/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/winreg/index.d.ts:
 /** @type {!WinregStatic} */
var Winreg;
/**
 * @record
 * @struct
 */
function WinregStatic() {}

/* TODO: ConstructSignature:  */
 /** @type {string} */
WinregStatic.prototype.HKLM;
 /** @type {string} */
WinregStatic.prototype.HKCU;
 /** @type {string} */
WinregStatic.prototype.HKCR;
 /** @type {string} */
WinregStatic.prototype.HKU;
 /** @type {string} */
WinregStatic.prototype.HKCC;
 /** @type {!Array<string>} */
WinregStatic.prototype.HIVES;
 /** @type {string} */
WinregStatic.prototype.REG_SZ;
 /** @type {string} */
WinregStatic.prototype.REG_MULTI_SZ;
 /** @type {string} */
WinregStatic.prototype.REG_EXPAND_SZ;
 /** @type {string} */
WinregStatic.prototype.REG_DWORD;
 /** @type {string} */
WinregStatic.prototype.REG_QWORD;
 /** @type {string} */
WinregStatic.prototype.REG_BINARY;
 /** @type {string} */
WinregStatic.prototype.REG_NONE;
 /** @type {!Array<string>} */
WinregStatic.prototype.REG_TYPES;
 /** @type {string} */
WinregStatic.prototype.DEFAULT_VALUE;
/**
 * @record
 * @struct
 */
Winreg.Options = function() {};
 /** @type {string} */
Winreg.Options.prototype.host;
 /** @type {string} */
Winreg.Options.prototype.hive;
 /** @type {string} */
Winreg.Options.prototype.key;
 /** @type {string} */
Winreg.Options.prototype.arch;
/**
 * @record
 * @struct
 */
Winreg.Registry = function() {};
 /** @type {string} */
Winreg.Registry.prototype.host;
 /** @type {string} */
Winreg.Registry.prototype.hive;
 /** @type {string} */
Winreg.Registry.prototype.key;
 /** @type {string} */
Winreg.Registry.prototype.path;
 /** @type {string} */
Winreg.Registry.prototype.arch;
 /** @type {!Winreg.Registry} */
Winreg.Registry.prototype.parent;

/**
 * Retrieve all values from this registry key.
 * @param {function(!Error, !Array<!Winreg.RegistryItem>): void} cb
 * @return {!Winreg.Registry}
 */
Winreg.Registry.prototype.values = function(cb) {};

/**
 * Retrieve all subkeys from this registry key.
 * @param {function(!Error, !Array<!Winreg.Registry>): void} cb
 * @return {!Winreg.Registry}
 */
Winreg.Registry.prototype.keys = function(cb) {};

/**
 * Gets a named value from this registry key.
 * @param {string} name
 * @param {function(!Error, !Winreg.RegistryItem): void} cb
 * @return {!Winreg.Registry}
 */
Winreg.Registry.prototype.get = function(name, cb) {};

/**
 * Sets a named value in this registry key, overwriting an already existing value.
 * @param {string} name
 * @param {string} type
 * @param {string} value
 * @param {function(!Error): void} cb
 * @return {!Winreg.Registry}
 */
Winreg.Registry.prototype.set = function(name, type, value, cb) {};

/**
 * Remove a named value from this registry key. If name is empty, sets the default value of this key.
 * Note: This key must be already existing.
 * @param {string} name
 * @param {function(!Error): void} cb
 * @return {!Winreg.Registry}
 */
Winreg.Registry.prototype.remove = function(name, cb) {};

/**
 * Remove all subkeys and values (including the default value) from this registry key.
 * @param {function(!Error): void} cb
 * @return {!Winreg.Registry}
 */
Winreg.Registry.prototype.clear = function(cb) {};

/**
 * Alias for the clear method to keep it backward compatible.
 * \@method
 * @deprecated Use {\@link Registry#clear} or {\@link Registry#destroy} in favour of this method.
 * @param {function(!Error): void} cb
 * @return {!Winreg.Registry}
 */
Winreg.Registry.prototype.erase = function(cb) {};

/**
 * Delete this key and all subkeys from the registry.
 * @param {function(!Error): void} cb
 * @return {!Winreg.Registry}
 */
Winreg.Registry.prototype.destroy = function(cb) {};

/**
 * Create this registry key. Note that this is a no-op if the key already exists.
 * @param {function(!Error): void} cb
 * @return {!Winreg.Registry}
 */
Winreg.Registry.prototype.create = function(cb) {};

/**
 * Checks if this key already exists.
 * @param {function(!Error, boolean): void} cb
 * @return {!Winreg.Registry}
 */
Winreg.Registry.prototype.keyExists = function(cb) {};

/**
 * Checks if a value with the given name already exists within this key.
 * @param {string} name
 * @param {function(!Error, boolean): void} cb
 * @return {!Winreg.Registry}
 */
Winreg.Registry.prototype.valueExists = function(name, cb) {};
/**
 * @record
 * @struct
 */
Winreg.RegistryItem = function() {};
 /** @type {string} */
Winreg.RegistryItem.prototype.host;
 /** @type {string} */
Winreg.RegistryItem.prototype.hive;
 /** @type {string} */
Winreg.RegistryItem.prototype.key;
 /** @type {string} */
Winreg.RegistryItem.prototype.name;
 /** @type {string} */
Winreg.RegistryItem.prototype.type;
 /** @type {string} */
Winreg.RegistryItem.prototype.value;
 /** @type {string} */
Winreg.RegistryItem.prototype.arch;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "winreg"
/** @const */
tsickle_declare_module.winreg = {};

/* TODO: ExportAssignment in tsickle_declare_module.winreg */
