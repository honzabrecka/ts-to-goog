/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/gulp-cache/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */
/** @const */
var gc = {};

/** @typedef {function(T): boolean} */
gc.Predicate;
/**
 * @record
 * @struct
 */
gc.IGulpCacheOptions = function() {};
 /** @type {!gc.IGulpCache} */
gc.IGulpCacheOptions.prototype.fileCache;
 /** @type {string} */
gc.IGulpCacheOptions.prototype.name;
 /** @type {function(?, function(?, string): void): (string|!Promise<string>)} */
gc.IGulpCacheOptions.prototype.key;
 /** @type {(boolean|function(?): boolean)} */
gc.IGulpCacheOptions.prototype.success;
 /** @type {function(?): (string|!Object|!Promise<!Object>)} */
gc.IGulpCacheOptions.prototype.value;
/**
 * @record
 * @struct
 */
gc.ICacheOptions = function() {};
 /** @type {string} */
gc.ICacheOptions.prototype.cacheDirName;
/**
 * @record
 * @struct
 */
gc.IGulpCacheStatic = function() {};

/* TODO: CallSignature: gc */

/* TODO: CallSignature: gc */
 /** @type {!gc.IGulpCache} */
gc.IGulpCacheStatic.prototype.Cache;

/**
 * @param {!gc.IGulpCacheOptions} options
 * @return {!internal.Transform}
 */
gc.IGulpCacheStatic.prototype.clear = function(options) {};

/**
 * Purges the cache.
 * @param {function(?): void=} callback
 * @return {void}
 */
gc.IGulpCacheStatic.prototype.clearAll = function(callback) {};
/**
 * @record
 * @struct
 */
gc.IGulpCache = function() {};

/* TODO: ConstructSignature: gc */
 /** @type {!gc.IGulpCacheStatic} */
var _;

/* TODO: ExportAssignment in  */
