/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jquery v1/index.d.ts:
/**
 * @record
 * @struct
 */
function JQueryAjaxSettings() {}
 /** @type {?} */
JQueryAjaxSettings.prototype.accepts;
 /** @type {boolean} */
JQueryAjaxSettings.prototype.async;
 /** @type {boolean} */
JQueryAjaxSettings.prototype.cache;
 /** @type {!Object<string,?>} */
JQueryAjaxSettings.prototype.contents;
 /** @type {?} */
JQueryAjaxSettings.prototype.contentType;
 /** @type {?} */
JQueryAjaxSettings.prototype.context;
 /** @type {!Object<string,?>} */
JQueryAjaxSettings.prototype.converters;
 /** @type {boolean} */
JQueryAjaxSettings.prototype.crossDomain;
 /** @type {?} */
JQueryAjaxSettings.prototype.data;
 /** @type {string} */
JQueryAjaxSettings.prototype.dataType;
 /** @type {boolean} */
JQueryAjaxSettings.prototype.global;
 /** @type {!Object<string,?>} */
JQueryAjaxSettings.prototype.headers;
 /** @type {boolean} */
JQueryAjaxSettings.prototype.ifModified;
 /** @type {boolean} */
JQueryAjaxSettings.prototype.isLocal;
 /** @type {?} */
JQueryAjaxSettings.prototype.jsonp;
 /** @type {?} */
JQueryAjaxSettings.prototype.jsonpCallback;
 /** @type {string} */
JQueryAjaxSettings.prototype.method;
 /** @type {string} */
JQueryAjaxSettings.prototype.mimeType;
 /** @type {string} */
JQueryAjaxSettings.prototype.password;
 /** @type {boolean} */
JQueryAjaxSettings.prototype.processData;
 /** @type {string} */
JQueryAjaxSettings.prototype.scriptCharset;
 /** @type {!Object<string,?>} */
JQueryAjaxSettings.prototype.statusCode;
 /** @type {number} */
JQueryAjaxSettings.prototype.timeout;
 /** @type {boolean} */
JQueryAjaxSettings.prototype.traditional;
 /** @type {string} */
JQueryAjaxSettings.prototype.type;
 /** @type {string} */
JQueryAjaxSettings.prototype.url;
 /** @type {string} */
JQueryAjaxSettings.prototype.username;
 /** @type {?} */
JQueryAjaxSettings.prototype.xhr;
 /** @type {!Object<string,?>} */
JQueryAjaxSettings.prototype.xhrFields;

/**
 * A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request.
 * @param {!JQueryXHR} jqXHR
 * @param {!JQueryAjaxSettings} settings
 * @return {?}
 */
JQueryAjaxSettings.prototype.beforeSend = function(jqXHR, settings) {};

/**
 * A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request ("success", "notmodified", "error", "timeout", "abort", or "parsererror"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event.
 * @param {!JQueryXHR} jqXHR
 * @param {string} textStatus
 * @return {?}
 */
JQueryAjaxSettings.prototype.complete = function(jqXHR, textStatus) {};

/**
 * A function to be used to handle the raw response data of XMLHttpRequest.This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter.
 * @param {?} data
 * @param {?} ty
 * @return {?}
 */
JQueryAjaxSettings.prototype.dataFilter = function(data, ty) {};

/**
 * A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are "timeout", "error", "abort", and "parsererror". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as "Not Found" or "Internal Server Error." As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event.
 * @param {!JQueryXHR} jqXHR
 * @param {string} textStatus
 * @param {string} errorThrown
 * @return {?}
 */
JQueryAjaxSettings.prototype.error = function(jqXHR, textStatus, errorThrown) {};

/**
 * A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event.
 * @param {?} data
 * @param {string} textStatus
 * @param {!JQueryXHR} jqXHR
 * @return {?}
 */
JQueryAjaxSettings.prototype.success = function(data, textStatus, jqXHR) {};
/**
 * @extends {JQueryPromise}
 * @record
 * @struct
 */
function JQueryXHR() {}
 /** @type {?} */
JQueryXHR.prototype.responseJSON;

/**
 * The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header. As of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5).
 * @param {string} mimeType
 * @return {?}
 */
JQueryXHR.prototype.overrideMimeType = function(mimeType) {};

/**
 * Cancel the request.
 * 
 * @param {string=} statusText A string passed as the textStatus parameter for the done callback. Default value: "canceled"
 * @return {void}
 */
JQueryXHR.prototype.abort = function(statusText) {};

/**
 * Incorporates the functionality of the .done() and .fail() methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to deferred.then() for implementation details.
 * @template R
 * @param {function(?, string, !JQueryXHR): (R|!JQueryPromise<R>)} doneCallback
 * @param {function(!JQueryXHR, string, ?): void=} failCallback
 * @return {!JQueryPromise<R>}
 */
JQueryXHR.prototype.then = function(doneCallback, failCallback) {};

/**
 * A function to be called if the request fails.
 * @param {!JQueryXHR} xhr
 * @param {string} textStatus
 * @param {string} errorThrown
 * @return {void}
 */
JQueryXHR.prototype.error = function(xhr, textStatus, errorThrown) {};
/**
 * @record
 * @struct
 */
function JQueryCallback() {}

/**
 * Add a callback or a collection of callbacks to a callback list.
 * 
 * @see {\@link https://api.jquery.com/callbacks.add/}
 * Add a callback or a collection of callbacks to a callback list.
 * 
 * @see {\@link https://api.jquery.com/callbacks.add/}
 * @param {!Function|!Array<!Function>} callbacks A function, or array of functions, that are to be added to the callback list.
 * @return {!JQueryCallback}
 */
JQueryCallback.prototype.add = function(callbacks) {};

/**
 * Disable a callback list from doing anything more.
 * @see {\@link https://api.jquery.com/callbacks.disable/}
 * @return {!JQueryCallback}
 */
JQueryCallback.prototype.disable = function() {};

/**
 * Determine if the callbacks list has been disabled.
 * @see {\@link https://api.jquery.com/callbacks.disabled/}
 * @return {boolean}
 */
JQueryCallback.prototype.disabled = function() {};

/**
 * Remove all of the callbacks from a list.
 * @see {\@link https://api.jquery.com/callbacks.empty/}
 * @return {!JQueryCallback}
 */
JQueryCallback.prototype.empty = function() {};

/**
 * Call all of the callbacks with the given arguments
 * 
 * @see {\@link https://api.jquery.com/callbacks.fire/}
 * @param {...?} tsickle_arguments
 * @return {!JQueryCallback}
 */
JQueryCallback.prototype.fire = function(tsickle_arguments) {};

/**
 * Determine if the callbacks have already been called at least once.
 * @see {\@link https://api.jquery.com/callbacks.fired/}
 * @return {boolean}
 */
JQueryCallback.prototype.fired = function() {};

/**
 * Call all callbacks in a list with the given context and arguments.
 * 
 * @see {\@link https://api.jquery.com/callbacks.fireWith/}
 * @param {?=} context A reference to the context in which the callbacks in the list should be fired.
 * @param {!Array<?>=} args
 * @return {!JQueryCallback}
 */
JQueryCallback.prototype.fireWith = function(context, args) {};

/**
 * Determine whether a supplied callback is in a list
 * 
 * @see {\@link https://api.jquery.com/callbacks.has/}
 * @param {!Function} callback The callback to search for.
 * @return {boolean}
 */
JQueryCallback.prototype.has = function(callback) {};

/**
 * Lock a callback list in its current state.
 * @see {\@link https://api.jquery.com/callbacks.lock/}
 * @return {!JQueryCallback}
 */
JQueryCallback.prototype.lock = function() {};

/**
 * Determine if the callbacks list has been locked.
 * @see {\@link https://api.jquery.com/callbacks.locked/}
 * @return {boolean}
 */
JQueryCallback.prototype.locked = function() {};

/**
 * Remove a callback or a collection of callbacks from a callback list.
 * 
 * @see {\@link https://api.jquery.com/callbacks.remove/}
 * Remove a callback or a collection of callbacks from a callback list.
 * 
 * @see {\@link https://api.jquery.com/callbacks.remove/}
 * @param {!Function|!Array<!Function>} callbacks A function, or array of functions, that are to be removed from the callback list.
 * @return {!JQueryCallback}
 */
JQueryCallback.prototype.remove = function(callbacks) {};
/**
 * @record
 * @struct
 */
function JQueryGenericPromise() {}

/**
 * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
 * 
 * @see {\@link https://api.jquery.com/deferred.then/#deferred-then-doneFilter-failFilter-progressFilter}
 * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
 * 
 * @see {\@link https://api.jquery.com/deferred.then/#deferred-then-doneFilter-failFilter-progressFilter}
 * @template U
 * @param {function(T, !Array<?>): (U|!JQueryPromise<U>)|function(T, !Array<?>): void} doneFilter A function that is called when the Deferred is resolved.
 * @param {function(!Array<?>): ?=} failFilter An optional function that is called when the Deferred is rejected.
 * @param {function(!Array<?>): ?=} progressFilter
 * @return {!JQueryPromise<U>|!JQueryPromise<void>}
 */
JQueryGenericPromise.prototype.then = function(doneFilter, failFilter, progressFilter) {};
/**
 * @record
 * @struct
 */
function JQueryPromiseCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function JQueryPromiseOperator() {}

/* TODO: CallSignature:  */
/**
 * @extends {JQueryGenericPromise}
 * @record
 * @struct
 */
function JQueryPromise() {}

/**
 * Determine the current state of a Deferred object.
 * @see {\@link https://api.jquery.com/deferred.state/}
 * @return {string}
 */
JQueryPromise.prototype.state = function() {};

/**
 * Add handlers to be called when the Deferred object is either resolved or rejected.
 * 
 * @see {\@link https://api.jquery.com/deferred.always/}
 * @param {(!JQueryPromiseCallback<?>|!Array<!JQueryPromiseCallback<?>>)=} alwaysCallback1 A function, or array of functions, that is called when the Deferred is resolved or rejected.
 * @param {...(!JQueryPromiseCallback<?>|!Array<!JQueryPromiseCallback<?>>)} alwaysCallbackN Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.
 * @return {!JQueryPromise}
 */
JQueryPromise.prototype.always = function(alwaysCallback1, alwaysCallbackN) {};

/**
 * Add handlers to be called when the Deferred object is resolved.
 * 
 * @see {\@link https://api.jquery.com/deferred.done/}
 * @param {(!JQueryPromiseCallback<T>|!Array<!JQueryPromiseCallback<T>>)=} doneCallback1 A function, or array of functions, that are called when the Deferred is resolved.
 * @param {...(!JQueryPromiseCallback<T>|!Array<!JQueryPromiseCallback<T>>)} doneCallbackN Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.
 * @return {!JQueryPromise}
 */
JQueryPromise.prototype.done = function(doneCallback1, doneCallbackN) {};

/**
 * Add handlers to be called when the Deferred object is rejected.
 * 
 * @see {\@link https://api.jquery.com/deferred.fail/}
 * @param {(!JQueryPromiseCallback<?>|!Array<!JQueryPromiseCallback<?>>)=} failCallback1 A function, or array of functions, that are called when the Deferred is rejected.
 * @param {...(!JQueryPromiseCallback<?>|!Array<!JQueryPromiseCallback<?>>)} failCallbackN Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.
 * @return {!JQueryPromise}
 */
JQueryPromise.prototype.fail = function(failCallback1, failCallbackN) {};

/**
 * Add handlers to be called when the Deferred object generates progress notifications.
 * 
 * @see {\@link https://api.jquery.com/deferred.progress/}
 * @param {(!JQueryPromiseCallback<?>|!Array<!JQueryPromiseCallback<?>>)=} progressCallback1 A function, or array of functions, to be called when the Deferred generates progress notifications.
 * @param {...(!JQueryPromiseCallback<?>|!Array<!JQueryPromiseCallback<?>>)} progressCallbackN Optional additional functions, or arrays of functions, to be called when the Deferred generates progress notifications.
 * @return {!JQueryPromise}
 */
JQueryPromise.prototype.progress = function(progressCallback1, progressCallbackN) {};

/**
 * @param {function(?): ?=} doneFilter
 * @param {function(?): ?=} failFilter
 * @param {function(?): ?=} progressFilter
 * @return {!JQueryPromise<?>}
 */
JQueryPromise.prototype.pipe = function(doneFilter, failFilter, progressFilter) {};

/**
 * Return a Deferred's Promise object.
 * 
 * @see {\@link https://api.jquery.com/deferred.promise/}
 * @param {?=} target Object onto which the promise methods have to be attached
 * @return {!JQueryPromise}
 */
JQueryPromise.prototype.promise = function(target) {};
/**
 * @extends {JQueryGenericPromise}
 * @record
 * @struct
 */
function JQueryDeferred() {}

/**
 * Determine the current state of a Deferred object.
 * @see {\@link https://api.jquery.com/deferred.state/}
 * @return {string}
 */
JQueryDeferred.prototype.state = function() {};

/**
 * Add handlers to be called when the Deferred object is either resolved or rejected.
 * 
 * @see {\@link https://api.jquery.com/deferred.always/}
 * @param {(!JQueryPromiseCallback<?>|!Array<!JQueryPromiseCallback<?>>)=} alwaysCallback1 A function, or array of functions, that is called when the Deferred is resolved or rejected.
 * @param {...(!JQueryPromiseCallback<?>|!Array<!JQueryPromiseCallback<?>>)} alwaysCallbackN Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.
 * @return {!JQueryDeferred}
 */
JQueryDeferred.prototype.always = function(alwaysCallback1, alwaysCallbackN) {};

/**
 * Add handlers to be called when the Deferred object is resolved.
 * 
 * @see {\@link https://api.jquery.com/deferred.done/}
 * @param {(!JQueryPromiseCallback<T>|!Array<!JQueryPromiseCallback<T>>)=} doneCallback1 A function, or array of functions, that are called when the Deferred is resolved.
 * @param {...(!JQueryPromiseCallback<T>|!Array<!JQueryPromiseCallback<T>>)} doneCallbackN Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.
 * @return {!JQueryDeferred}
 */
JQueryDeferred.prototype.done = function(doneCallback1, doneCallbackN) {};

/**
 * Add handlers to be called when the Deferred object is rejected.
 * 
 * @see {\@link https://api.jquery.com/deferred.fail/}
 * @param {(!JQueryPromiseCallback<?>|!Array<!JQueryPromiseCallback<?>>)=} failCallback1 A function, or array of functions, that are called when the Deferred is rejected.
 * @param {...(!JQueryPromiseCallback<?>|!Array<!JQueryPromiseCallback<?>>)} failCallbackN Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.
 * @return {!JQueryDeferred}
 */
JQueryDeferred.prototype.fail = function(failCallback1, failCallbackN) {};

/**
 * Add handlers to be called when the Deferred object generates progress notifications.
 * 
 * @see {\@link https://api.jquery.com/deferred.progress/}
 * @param {(!JQueryPromiseCallback<?>|!Array<!JQueryPromiseCallback<?>>)=} progressCallback1 A function, or array of functions, to be called when the Deferred generates progress notifications.
 * @param {...(!JQueryPromiseCallback<?>|!Array<!JQueryPromiseCallback<?>>)} progressCallbackN Optional additional functions, or arrays of functions, to be called when the Deferred generates progress notifications.
 * @return {!JQueryDeferred}
 */
JQueryDeferred.prototype.progress = function(progressCallback1, progressCallbackN) {};

/**
 * Call the progressCallbacks on a Deferred object with the given args.
 * 
 * @see {\@link https://api.jquery.com/deferred.notify/}
 * @param {?=} value
 * @param {...?} args Optional arguments that are passed to the progressCallbacks.
 * @return {!JQueryDeferred}
 */
JQueryDeferred.prototype.notify = function(value, args) {};

/**
 * Call the progressCallbacks on a Deferred object with the given context and args.
 * 
 * @see {\@link https://api.jquery.com/deferred.notifyWith/}
 * @param {?} context Context passed to the progressCallbacks as the this object.
 * @param {!Array<?>=} args Optional arguments that are passed to the progressCallbacks.
 * @return {!JQueryDeferred}
 */
JQueryDeferred.prototype.notifyWith = function(context, args) {};

/**
 * Reject a Deferred object and call any failCallbacks with the given args.
 * 
 * @see {\@link https://api.jquery.com/deferred.reject/}
 * @param {?=} value
 * @param {...?} args Optional arguments that are passed to the failCallbacks.
 * @return {!JQueryDeferred}
 */
JQueryDeferred.prototype.reject = function(value, args) {};

/**
 * Reject a Deferred object and call any failCallbacks with the given context and args.
 * 
 * @see {\@link https://api.jquery.com/deferred.rejectWith/}
 * @param {?} context Context passed to the failCallbacks as the this object.
 * @param {!Array<?>=} args An optional array of arguments that are passed to the failCallbacks.
 * @return {!JQueryDeferred}
 */
JQueryDeferred.prototype.rejectWith = function(context, args) {};

/**
 * Resolve a Deferred object and call any doneCallbacks with the given args.
 * 
 * @see {\@link https://api.jquery.com/deferred.resolve/}
 * @param {T=} value First argument passed to doneCallbacks.
 * @param {...?} args Optional subsequent arguments that are passed to the doneCallbacks.
 * @return {!JQueryDeferred}
 */
JQueryDeferred.prototype.resolve = function(value, args) {};

/**
 * Resolve a Deferred object and call any doneCallbacks with the given context and args.
 * 
 * @see {\@link https://api.jquery.com/deferred.resolveWith/}
 * @param {?} context Context passed to the doneCallbacks as the this object.
 * @param {!Array<T>=} args An optional array of arguments that are passed to the doneCallbacks.
 * @return {!JQueryDeferred}
 */
JQueryDeferred.prototype.resolveWith = function(context, args) {};

/**
 * Return a Deferred's Promise object.
 * 
 * @see {\@link https://api.jquery.com/deferred.promise/}
 * @param {?=} target Object onto which the promise methods have to be attached
 * @return {!JQueryPromise<T>}
 */
JQueryDeferred.prototype.promise = function(target) {};

/**
 * @param {function(?): ?=} doneFilter
 * @param {function(?): ?=} failFilter
 * @param {function(?): ?=} progressFilter
 * @return {!JQueryPromise<?>}
 */
JQueryDeferred.prototype.pipe = function(doneFilter, failFilter, progressFilter) {};
/**
 * @record
 * @struct
 */
function BaseJQueryEventObject() {}
 /** @type {!Element} */
BaseJQueryEventObject.prototype.currentTarget;
 /** @type {?} */
BaseJQueryEventObject.prototype.data;
 /** @type {!Element} */
BaseJQueryEventObject.prototype.delegateTarget;
 /** @type {string} */
BaseJQueryEventObject.prototype.namespace;
 /** @type {!Event} */
BaseJQueryEventObject.prototype.originalEvent;
 /** @type {!Element} */
BaseJQueryEventObject.prototype.relatedTarget;
 /** @type {?} */
BaseJQueryEventObject.prototype.result;
 /** @type {!Element} */
BaseJQueryEventObject.prototype.target;
 /** @type {number} */
BaseJQueryEventObject.prototype.pageX;
 /** @type {number} */
BaseJQueryEventObject.prototype.pageY;
 /** @type {number} */
BaseJQueryEventObject.prototype.which;
 /** @type {boolean} */
BaseJQueryEventObject.prototype.metaKey;

/**
 * Returns whether event.preventDefault() was ever called on this event object.
 * @see {\@link https://api.jquery.com/event.isDefaultPrevented/}
 * @return {boolean}
 */
BaseJQueryEventObject.prototype.isDefaultPrevented = function() {};

/**
 * Returns whether event.stopImmediatePropagation() was ever called on this event object.
 * @see {\@link https://api.jquery.com/event.isImmediatePropagationStopped/}
 * @return {boolean}
 */
BaseJQueryEventObject.prototype.isImmediatePropagationStopped = function() {};

/**
 * Returns whether event.stopPropagation() was ever called on this event object.
 * @see {\@link https://api.jquery.com/event.isPropagationStopped/}
 * @return {boolean}
 */
BaseJQueryEventObject.prototype.isPropagationStopped = function() {};

/**
 * If this method is called, the default action of the event will not be triggered.
 * @see {\@link https://api.jquery.com/event.preventDefault/}
 * @return {?}
 */
BaseJQueryEventObject.prototype.preventDefault = function() {};

/**
 * Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.
 * @see {\@link https://api.jquery.com/event.stopImmediatePropagation/}
 * @return {void}
 */
BaseJQueryEventObject.prototype.stopImmediatePropagation = function() {};

/**
 * Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.
 * @see {\@link https://api.jquery.com/event.stopPropagation/}
 * @return {void}
 */
BaseJQueryEventObject.prototype.stopPropagation = function() {};
/**
 * @extends {BaseJQueryEventObject}
 * @record
 * @struct
 */
function JQueryInputEventObject() {}
 /** @type {boolean} */
JQueryInputEventObject.prototype.altKey;
 /** @type {boolean} */
JQueryInputEventObject.prototype.ctrlKey;
 /** @type {boolean} */
JQueryInputEventObject.prototype.metaKey;
 /** @type {boolean} */
JQueryInputEventObject.prototype.shiftKey;
/**
 * @extends {JQueryInputEventObject}
 * @record
 * @struct
 */
function JQueryMouseEventObject() {}
 /** @type {number} */
JQueryMouseEventObject.prototype.button;
 /** @type {number} */
JQueryMouseEventObject.prototype.clientX;
 /** @type {number} */
JQueryMouseEventObject.prototype.clientY;
 /** @type {number} */
JQueryMouseEventObject.prototype.offsetX;
 /** @type {number} */
JQueryMouseEventObject.prototype.offsetY;
 /** @type {number} */
JQueryMouseEventObject.prototype.pageX;
 /** @type {number} */
JQueryMouseEventObject.prototype.pageY;
 /** @type {number} */
JQueryMouseEventObject.prototype.screenX;
 /** @type {number} */
JQueryMouseEventObject.prototype.screenY;
/**
 * @extends {JQueryInputEventObject}
 * @record
 * @struct
 */
function JQueryKeyEventObject() {}
 /** @type {?} */
JQueryKeyEventObject.prototype.char;
 /** @type {number} */
JQueryKeyEventObject.prototype.charCode;
 /** @type {?} */
JQueryKeyEventObject.prototype.key;
 /** @type {number} */
JQueryKeyEventObject.prototype.keyCode;
/**
 * @extends {BaseJQueryEventObject}
 * @extends {JQueryInputEventObject}
 * @extends {JQueryMouseEventObject}
 * @extends {JQueryKeyEventObject}
 * @record
 * @struct
 */
function JQueryEventObject() {}
/**
 * @record
 * @struct
 */
function JQuerySupport() {}
 /** @type {boolean} */
JQuerySupport.prototype.ajax;
 /** @type {boolean} */
JQuerySupport.prototype.boxModel;
 /** @type {boolean} */
JQuerySupport.prototype.changeBubbles;
 /** @type {boolean} */
JQuerySupport.prototype.checkClone;
 /** @type {boolean} */
JQuerySupport.prototype.checkOn;
 /** @type {boolean} */
JQuerySupport.prototype.cors;
 /** @type {boolean} */
JQuerySupport.prototype.cssFloat;
 /** @type {boolean} */
JQuerySupport.prototype.hrefNormalized;
 /** @type {boolean} */
JQuerySupport.prototype.htmlSerialize;
 /** @type {boolean} */
JQuerySupport.prototype.leadingWhitespace;
 /** @type {boolean} */
JQuerySupport.prototype.noCloneChecked;
 /** @type {boolean} */
JQuerySupport.prototype.noCloneEvent;
 /** @type {boolean} */
JQuerySupport.prototype.opacity;
 /** @type {boolean} */
JQuerySupport.prototype.optDisabled;
 /** @type {boolean} */
JQuerySupport.prototype.optSelected;
 /** @type {boolean} */
JQuerySupport.prototype.style;
 /** @type {boolean} */
JQuerySupport.prototype.submitBubbles;
 /** @type {boolean} */
JQuerySupport.prototype.tbody;

/**
 * @return {boolean}
 */
JQuerySupport.prototype.scriptEval = function() {};
/**
 * @record
 * @struct
 */
function JQueryParam() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function JQueryEventConstructor() {}

/* TODO: CallSignature:  */

/* TODO: ConstructSignature:  */
/**
 * @record
 * @struct
 */
function JQueryCoordinates() {}
 /** @type {number} */
JQueryCoordinates.prototype.left;
 /** @type {number} */
JQueryCoordinates.prototype.top;
/**
 * @record
 * @struct
 */
function cssPropertySetter() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function JQueryCssProperties() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function JQuerySerializeArrayElement() {}
 /** @type {string} */
JQuerySerializeArrayElement.prototype.name;
 /** @type {string} */
JQuerySerializeArrayElement.prototype.value;
/**
 * @record
 * @struct
 */
function JQueryAnimationOptions() {}
 /** @type {?} */
JQueryAnimationOptions.prototype.duration;
 /** @type {string} */
JQueryAnimationOptions.prototype.easing;
 /** @type {!Function} */
JQueryAnimationOptions.prototype.complete;
 /** @type {function(number, ?): ?} */
JQueryAnimationOptions.prototype.step;
 /** @type {function(!JQueryPromise<?>, number, number): ?} */
JQueryAnimationOptions.prototype.progress;
 /** @type {function(!JQueryPromise<?>): ?} */
JQueryAnimationOptions.prototype.start;
 /** @type {function(!JQueryPromise<?>, boolean): ?} */
JQueryAnimationOptions.prototype.done;
 /** @type {function(!JQueryPromise<?>, boolean): ?} */
JQueryAnimationOptions.prototype.fail;
 /** @type {function(!JQueryPromise<?>, boolean): ?} */
JQueryAnimationOptions.prototype.always;
 /** @type {?} */
JQueryAnimationOptions.prototype.queue;
 /** @type {!Object} */
JQueryAnimationOptions.prototype.specialEasing;
/**
 * @record
 * @struct
 */
function JQueryEasingFunction() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function JQueryEasingFunctions() {}

/* TODO: IndexSignature:  */
 /** @type {!JQueryEasingFunction} */
JQueryEasingFunctions.prototype.linear;
 /** @type {!JQueryEasingFunction} */
JQueryEasingFunctions.prototype.swing;
/**
 * @record
 * @struct
 */
function JQueryStatic() {}
 /** @type {!JQueryAjaxSettings} */
JQueryStatic.prototype.ajaxSettings;
 /** @type {!JQueryParam} */
JQueryStatic.prototype.param;

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */
 /** @type {!Object<string,?>} */
JQueryStatic.prototype.cssHooks;
 /** @type {?} */
JQueryStatic.prototype.cssNumber;
 /** @type {!JQueryEasingFunctions} */
JQueryStatic.prototype.easing;
 /** @type {{tick: function(): void, interval: number, stop: function(): void, speeds: {slow: number, fast: number}, off: boolean, step: ?}} */
JQueryStatic.prototype.fx;
 /** @type {!JQueryEventConstructor} */
JQueryStatic.prototype.Event;
 /** @type {?} */
JQueryStatic.prototype.expr;
 /** @type {!JQuery} */
JQueryStatic.prototype.fn;
 /** @type {boolean} */
JQueryStatic.prototype.isReady;
 /** @type {!JQuerySupport} */
JQueryStatic.prototype.support;

/**
 * Perform an asynchronous HTTP (Ajax) request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.ajax/#jQuery-ajax-settings}
 * Perform an asynchronous HTTP (Ajax) request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.ajax/#jQuery-ajax-url-settings}
 * @param {!JQueryAjaxSettings|string} settings_or_url A set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). / A string containing the URL to which the request is sent.
 * @param {!JQueryAjaxSettings=} settings A set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup().
 * @return {!JQueryXHR}
 */
JQueryStatic.prototype.ajax = function(settings_or_url, settings) {};

/**
 * Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().
 * 
 * @see {\@link https://api.jquery.com/jQuery.ajaxPrefilter/}
 * Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().
 * 
 * @see {\@link https://api.jquery.com/jQuery.ajaxPrefilter/}
 * @param {string|function(?, !JQueryAjaxSettings, !JQueryXHR): ?} dataTypes_or_handler An optional string containing one or more space-separated dataTypes / A handler to set default values for future Ajax requests.
 * @param {function(?, !JQueryAjaxSettings, !JQueryXHR): ?=} handler A handler to set default values for future Ajax requests.
 * @return {void}
 */
JQueryStatic.prototype.ajaxPrefilter = function(dataTypes_or_handler, handler) {};

/**
 * Creates an object that handles the actual transmission of Ajax data.
 * 
 * @see {\@link https://api.jquery.com/jQuery.ajaxTransport/}
 * @param {string} dataType A string identifying the data type to use.
 * @param {function(?, !JQueryAjaxSettings, !JQueryXHR): ?} handler A handler to return the new transport object to use with the data type provided in the first argument.
 * @return {void}
 */
JQueryStatic.prototype.ajaxTransport = function(dataType, handler) {};

/**
 * Set default values for future Ajax requests. Its use is not recommended.
 * 
 * @see {\@link https://api.jquery.com/jQuery.ajaxSetup/}
 * @param {!JQueryAjaxSettings} options A set of key/value pairs that configure the default Ajax request. All options are optional.
 * @return {void}
 */
JQueryStatic.prototype.ajaxSetup = function(options) {};

/**
 * Load data from the server using a HTTP GET request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.get/#jQuery-get-url-data-success-dataType}
 * Load data from the server using a HTTP GET request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.get/#jQuery-get-url-data-success-dataType}
 * Load data from the server using a HTTP GET request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.get/#jQuery-get-settings}
 * @param {string|!JQueryAjaxSettings} url_or_settings A string containing the URL to which the request is sent. / The JQueryAjaxSettings to be used for the request
 * @param {function(?, string, !JQueryXHR): ?|(string|!Object)=} success_or_data A callback function that is executed if the request succeeds. / A plain object or string that is sent to the server with the request.
 * @param {string|function(?, string, !JQueryXHR): ?=} dataType_or_success The type of data expected from the server. Default: Intelligent Guess (xml, json, script, or html). / A callback function that is executed if the request succeeds.
 * @param {string=} dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, or html).
 * @return {!JQueryXHR}
 */
JQueryStatic.prototype.get = function(url_or_settings, success_or_data, dataType_or_success, dataType) {};

/**
 * Load JSON-encoded data from the server using a GET HTTP request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.getJSON/}
 * Load JSON-encoded data from the server using a GET HTTP request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.getJSON/}
 * @param {string} url A string containing the URL to which the request is sent.
 * @param {function(?, string, !JQueryXHR): ?|(string|!Object)=} success_or_data A callback function that is executed if the request succeeds. / A plain object or string that is sent to the server with the request.
 * @param {function(?, string, !JQueryXHR): ?=} success A callback function that is executed if the request succeeds.
 * @return {!JQueryXHR}
 */
JQueryStatic.prototype.getJSON = function(url, success_or_data, success) {};

/**
 * Load a JavaScript file from the server using a GET HTTP request, then execute it.
 * 
 * @see {\@link https://api.jquery.com/jQuery.getScript/}
 * @param {string} url A string containing the URL to which the request is sent.
 * @param {function(string, string, !JQueryXHR): ?=} success A callback function that is executed if the request succeeds.
 * @return {!JQueryXHR}
 */
JQueryStatic.prototype.getScript = function(url, success) {};

/**
 * Load data from the server using a HTTP POST request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.post/#jQuery-post-url-data-success-dataType}
 * Load data from the server using a HTTP POST request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.post/#jQuery-post-url-data-success-dataType}
 * Load data from the server using a HTTP POST request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.post/#jQuery-post-settings}
 * @param {string|!JQueryAjaxSettings} url_or_settings A string containing the URL to which the request is sent. / The JQueryAjaxSettings to be used for the request
 * @param {function(?, string, !JQueryXHR): ?|(string|!Object)=} success_or_data A callback function that is executed if the request succeeds. Required if dataType is provided, but can be null in that case. / A plain object or string that is sent to the server with the request.
 * @param {string|function(?, string, !JQueryXHR): ?=} dataType_or_success The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html). / A callback function that is executed if the request succeeds. Required if dataType is provided, but can be null in that case.
 * @param {string=} dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
 * @return {!JQueryXHR}
 */
JQueryStatic.prototype.post = function(url_or_settings, success_or_data, dataType_or_success, dataType) {};

/**
 * A multi-purpose callbacks list object that provides a powerful way to manage callback lists.
 * 
 * @see {\@link https://api.jquery.com/jQuery.Callbacks/}
 * @param {string=} flags An optional list of space-separated flags that change how the callback list behaves.
 * @return {!JQueryCallback}
 */
JQueryStatic.prototype.Callbacks = function(flags) {};

/**
 * Holds or releases the execution of jQuery's ready event.
 * 
 * @see {\@link https://api.jquery.com/jQuery.holdReady/}
 * @param {boolean} hold Indicates whether the ready hold is being requested or released
 * @return {void}
 */
JQueryStatic.prototype.holdReady = function(hold) {};

/**
 * Relinquish jQuery's control of the $ variable.
 * 
 * @see {\@link https://api.jquery.com/jQuery.noConflict/}
 * @param {boolean=} removeAll A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).
 * @return {!JQueryStatic}
 */
JQueryStatic.prototype.noConflict = function(removeAll) {};

/**
 * Provides a way to execute callback functions based on one or more objects, usually Deferred objects that represent asynchronous events.
 * 
 * @see {\@link https://api.jquery.com/jQuery.when/}
 * @template T
 * @param {...(T|!JQueryPromise<T>)} deferreds One or more Deferred objects, or plain JavaScript objects.
 * @return {!JQueryPromise<T>}
 */
JQueryStatic.prototype.when = function(deferreds) {};

/**
 * Store arbitrary data associated with the specified element. Returns the value that was set.
 * 
 * @see {\@link https://api.jquery.com/jQuery.data/#jQuery-data-element-key-value}
 * Returns value at named data store for the element, as set by jQuery.data(element, name, value), or the full data store for the element.
 * 
 * @see {\@link https://api.jquery.com/jQuery.data/#jQuery-data-element-key}
 * Returns value at named data store for the element, as set by jQuery.data(element, name, value), or the full data store for the element.
 * 
 * @see {\@link https://api.jquery.com/jQuery.data/#jQuery-data-element}
 * @template T
 * @param {!Element} element The DOM element to associate with the data.
 * @param {string=} key A string naming the piece of data to set.
 * @param {T=} value The new data value.
 * @return {T|?}
 */
JQueryStatic.prototype.data = function(element, key, value) {};

/**
 * Execute the next function on the queue for the matched element.
 * 
 * @see {\@link https://api.jquery.com/jQuery.dequeue/}
 * @param {!Element} element A DOM element from which to remove and execute a queued function.
 * @param {string=} queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
 * @return {void}
 */
JQueryStatic.prototype.dequeue = function(element, queueName) {};

/**
 * Determine whether an element has any jQuery data associated with it.
 * 
 * @see {\@link https://api.jquery.com/jQuery.hasData/}
 * @param {!Element} element A DOM element to be checked for data.
 * @return {boolean}
 */
JQueryStatic.prototype.hasData = function(element) {};

/**
 * Show the queue of functions to be executed on the matched element.
 * 
 * @see {\@link https://api.jquery.com/jQuery.queue/#jQuery-queue-element-queueName}
 * Manipulate the queue of functions to be executed on the matched element.
 * 
 * @see {\@link https://api.jquery.com/jQuery.queue/#jQuery-queue-element-queueName-newQueue}
 * Manipulate the queue of functions to be executed on the matched element.
 * 
 * @see {\@link https://api.jquery.com/jQuery.queue/#jQuery-queue-element-queueName-callback}
 * @param {!Element} element A DOM element to inspect for an attached queue. / A DOM element where the array of queued functions is attached. / A DOM element on which to add a queued function.
 * @param {string=} queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
 * @param {!Array<!Function>|!Function=} newQueue_or_callback An array of functions to replace the current queue contents. / The new function to add to the queue.
 * @return {!Array<?>|!JQuery}
 */
JQueryStatic.prototype.queue = function(element, queueName, newQueue_or_callback) {};

/**
 * Remove a previously-stored piece of data.
 * 
 * @see {\@link https://api.jquery.com/jQuery.removeData/}
 * @param {!Element} element A DOM element from which to remove data.
 * @param {string=} name A string naming the piece of data to remove.
 * @return {!JQuery}
 */
JQueryStatic.prototype.removeData = function(element, name) {};

/**
 * A constructor function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.
 * 
 * @see {\@link https://api.jquery.com/jQuery.Deferred/}
 * @template T
 * @param {function(!JQueryDeferred<T>): ?=} beforeStart A function that is called just before the constructor returns.
 * @return {!JQueryDeferred<T>}
 */
JQueryStatic.prototype.Deferred = function(beforeStart) {};

/**
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/#jQuery-proxy-function-context-additionalArguments}
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/#jQuery-proxy-context-name-additionalArguments}
 * @param {function(!Array<?>): ?|!Object} func_or_context The function whose context will be changed. / The object to which the context (this) of the function should be set.
 * @param {!Object|string} context_or_name The object to which the context (this) of the function should be set. / The name of the function whose context will be changed (should be a property of the context object).
 * @param {...?} additionalArguments Any number of arguments to be passed to the function referenced in the function argument. / Any number of arguments to be passed to the function named in the name argument.
 * @return {?}
 */
JQueryStatic.prototype.proxy = function(func_or_context, context_or_name, additionalArguments) {};

/**
 * Takes a string and throws an exception containing it.
 * 
 * @see {\@link https://api.jquery.com/jQuery.error/}
 * @param {?} message The message to send out.
 * @return {!JQuery}
 */
JQueryStatic.prototype.error = function(message) {};

/**
 * Check to see if a DOM element is a descendant of another DOM element.
 * 
 * @see {\@link https://api.jquery.com/jQuery.contains/}
 * @param {!Element} container The DOM element that may contain the other element.
 * @param {!Element} contained The DOM element that may be contained by (a descendant of) the other element.
 * @return {boolean}
 */
JQueryStatic.prototype.contains = function(container, contained) {};

/**
 * A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.
 * 
 * @see {\@link https://api.jquery.com/jQuery.each/#jQuery-each-array-callback}
 * A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.
 * 
 * @see {\@link https://api.jquery.com/jQuery.each/#jQuery-each-object-callback}
 * @template T
 * @param {!Array<T>|T} collection The object or array to iterate over.
 * @param {function(number, T): (boolean|void)|function(string, ?): (boolean|void)} callback The function that will be executed on every object. Will break the loop by returning false.
 * @return {!Array<T>|T} the first argument, the object that is iterated.
 */
JQueryStatic.prototype.each = function(collection, callback) {};

/**
 * Merge the contents of two or more objects together into the first object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.extend/#jQuery-extend-target-object1-objectN}
 * Merge the contents of two or more objects together into the first object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.extend/#jQuery-extend-deep-target-object1-objectN}
 * @param {?|boolean} target_or_deep An object that will receive the new properties if additional objects are passed in or that will extend the jQuery namespace if it is the sole argument. / If true, the merge becomes recursive (aka. deep copy).
 * @param {?=} object1_or_target An object containing additional properties to merge in. / The object to extend. It will receive the new properties.
 * @param {...?=} objectN_or_object1 Additional objects containing properties to merge in. / An object containing additional properties to merge in.
 * @return {?}
 */
JQueryStatic.prototype.extend = function(target_or_deep, object1_or_target, objectN_or_object1) {};

/**
 * Execute some JavaScript code globally.
 * 
 * @see {\@link https://api.jquery.com/jQuery.globalEval/}
 * @param {string} code The JavaScript code to execute.
 * @return {?}
 */
JQueryStatic.prototype.globalEval = function(code) {};

/**
 * Finds the elements of an array which satisfy a filter function. The original array is not affected.
 * 
 * @see {\@link https://api.jquery.com/jQuery.grep/}
 * @template T
 * @param {!Array<T>} array The array to search through.
 * @param {function(T, number): boolean} func The function to process each item against. The first argument to the function is the item, and the second argument is the index. The function should return a Boolean value.  this will be the global window object.
 * @param {boolean=} invert If "invert" is false, or not provided, then the function returns an array consisting of all elements for which "callback" returns true. If "invert" is true, then the function returns an array consisting of all elements for which "callback" returns false.
 * @return {!Array<T>}
 */
JQueryStatic.prototype.grep = function(array, func, invert) {};

/**
 * Search for a specified value within an array and return its index (or -1 if not found).
 * 
 * @see {\@link https://api.jquery.com/jQuery.inArray/}
 * @template T
 * @param {T} value The value to search for.
 * @param {!Array<T>} array An array through which to search.
 * @param {number=} fromIndex The index of the array at which to begin the search. The default is 0, which will search the whole array.
 * @return {number}
 */
JQueryStatic.prototype.inArray = function(value, array, fromIndex) {};

/**
 * Determine whether the argument is an array.
 * 
 * @see {\@link https://api.jquery.com/jQuery.isArray/}
 * @param {?} obj Object to test whether or not it is an array.
 * @return {boolean}
 */
JQueryStatic.prototype.isArray = function(obj) {};

/**
 * Check to see if an object is empty (contains no enumerable properties).
 * 
 * @see {\@link https://api.jquery.com/jQuery.isEmptyObject/}
 * @param {?} obj The object that will be checked to see if it's empty.
 * @return {boolean}
 */
JQueryStatic.prototype.isEmptyObject = function(obj) {};

/**
 * Determine if the argument passed is a JavaScript function object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.isFunction/}
 * @param {?} obj Object to test whether or not it is a function.
 * @return {boolean}
 */
JQueryStatic.prototype.isFunction = function(obj) {};

/**
 * Determines whether its argument is a number.
 * 
 * @see {\@link https://api.jquery.com/jQuery.isNumeric/}
 * @param {?} value The value to be tested.
 * @return {boolean}
 */
JQueryStatic.prototype.isNumeric = function(value) {};

/**
 * Check to see if an object is a plain object (created using "{}" or "new Object").
 * 
 * @see {\@link https://api.jquery.com/jQuery.isPlainObject/}
 * @param {?} obj The object that will be checked to see if it's a plain object.
 * @return {boolean}
 */
JQueryStatic.prototype.isPlainObject = function(obj) {};

/**
 * Determine whether the argument is a window.
 * 
 * @see {\@link https://api.jquery.com/jQuery.isWindow/}
 * @param {?} obj Object to test whether or not it is a window.
 * @return {boolean}
 */
JQueryStatic.prototype.isWindow = function(obj) {};

/**
 * Check to see if a DOM node is within an XML document (or is an XML document).
 * 
 * @see {\@link https://api.jquery.com/jQuery.isXMLDoc/}
 * @param {!Node} node The DOM node that will be checked to see if it's in an XML document.
 * @return {boolean}
 */
JQueryStatic.prototype.isXMLDoc = function(node) {};

/**
 * Convert an array-like object into a true JavaScript array.
 * 
 * @see {\@link https://api.jquery.com/jQuery.makeArray/}
 * @param {?} obj Any object to turn into a native Array.
 * @return {!Array<?>}
 */
JQueryStatic.prototype.makeArray = function(obj) {};

/**
 * Translate all items in an array or object to new array of items.
 * 
 * @see {\@link https://api.jquery.com/jQuery.map/#jQuery-map-array-callback}
 * Translate all items in an array or object to new array of items.
 * 
 * @see {\@link https://api.jquery.com/jQuery.map/#jQuery-map-object-callback}
 * @template T, U
 * @param {!Array<T>|?} array_or_arrayOrObject The Array to translate. / The Array or Object to translate.
 * @param {function(T, number): U|function(?, ?): ?} callback The function to process each item against. The first argument to the function is the array item, the second argument is the index in array The function can return any value. Within the function, this refers to the global (window) object. / The function to process each item against. The first argument to the function is the value; the second argument is the index or key of the array or object property. The function can return any value to add to the array. A returned array will be flattened into the resulting array. Within the function, this refers to the global (window) object.
 * @return {!Array<U>|?}
 */
JQueryStatic.prototype.map = function(array_or_arrayOrObject, callback) {};

/**
 * Merge the contents of two arrays together into the first array.
 * 
 * @see {\@link https://api.jquery.com/jQuery.merge/}
 * @template T
 * @param {!Array<T>} first The first array to merge, the elements of second added.
 * @param {!Array<T>} second The second array to merge into the first, unaltered.
 * @return {!Array<T>}
 */
JQueryStatic.prototype.merge = function(first, second) {};

/**
 * An empty function.
 * @see {\@link https://api.jquery.com/jQuery.noop/}
 * @return {?}
 */
JQueryStatic.prototype.noop = function() {};

/**
 * Return a number representing the current time.
 * @see {\@link https://api.jquery.com/jQuery.now/}
 * @return {number}
 */
JQueryStatic.prototype.now = function() {};

/**
 * Takes a well-formed JSON string and returns the resulting JavaScript object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.parseJSON/}
 * @param {string} json The JSON string to parse.
 * @return {?}
 */
JQueryStatic.prototype.parseJSON = function(json) {};

/**
 * Parses a string into an XML document.
 * 
 * @see {\@link https://api.jquery.com/jQuery.parseXML/}
 * @param {string} data a well-formed XML string to be parsed
 * @return {!XMLDocument}
 */
JQueryStatic.prototype.parseXML = function(data) {};

/**
 * Remove the whitespace from the beginning and end of a string.
 * 
 * @see {\@link https://api.jquery.com/jQuery.trim/}
 * @param {string} str Remove the whitespace from the beginning and end of a string.
 * @return {string}
 */
JQueryStatic.prototype.trim = function(str) {};

/**
 * Determine the internal JavaScript [[Class]] of an object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.type/}
 * @param {?} obj Object to get the internal JavaScript [[Class]] of.
 * @return {string}
 */
JQueryStatic.prototype.type = function(obj) {};

/**
 * Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.
 * 
 * @see {\@link https://api.jquery.com/jQuery.unique/}
 * @template T
 * @param {!Array<T>} array The Array of DOM elements.
 * @return {!Array<T>}
 */
JQueryStatic.prototype.unique = function(array) {};

/**
 * Parses a string into an array of DOM nodes.
 * 
 * @see {\@link https://api.jquery.com/jQuery.parseHTML/}
 * Parses a string into an array of DOM nodes.
 * 
 * @see {\@link https://api.jquery.com/jQuery.parseHTML/}
 * @param {string} data HTML string to be parsed
 * @param {!HTMLElement|!Document=} context DOM element to serve as the context in which the HTML fragment will be created
 * @param {boolean=} keepScripts A Boolean indicating whether to include scripts passed in the HTML string
 * @return {!Array<?>}
 */
JQueryStatic.prototype.parseHTML = function(data, context, keepScripts) {};
/**
 * @record
 * @struct
 */
function JQuery() {}
 /** @type {!Element} */
JQuery.prototype.context;
 /** @type {string} */
JQuery.prototype.jquery;
 /** @type {number} */
JQuery.prototype.length;
 /** @type {string} */
JQuery.prototype.selector;

/* TODO: IndexSignature:  */

/**
 * Register a handler to be called when Ajax requests complete. This is an AjaxEvent.
 * 
 * @see {\@link https://api.jquery.com/ajaxComplete/}
 * @param {function(!JQueryEventObject, !XMLHttpRequest, ?): ?} handler The function to be invoked.
 * @return {!JQuery}
 */
JQuery.prototype.ajaxComplete = function(handler) {};

/**
 * Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event.
 * 
 * @see {\@link https://api.jquery.com/ajaxError/}
 * @param {function(!JQueryEventObject, !JQueryXHR, !JQueryAjaxSettings, ?): ?} handler The function to be invoked.
 * @return {!JQuery}
 */
JQuery.prototype.ajaxError = function(handler) {};

/**
 * Attach a function to be executed before an Ajax request is sent. This is an Ajax Event.
 * 
 * @see {\@link https://api.jquery.com/ajaxSend/}
 * @param {function(!JQueryEventObject, !JQueryXHR, !JQueryAjaxSettings): ?} handler The function to be invoked.
 * @return {!JQuery}
 */
JQuery.prototype.ajaxSend = function(handler) {};

/**
 * Register a handler to be called when the first Ajax request begins. This is an Ajax Event.
 * 
 * @see {\@link https://api.jquery.com/ajaxStart/}
 * @param {function(): ?} handler The function to be invoked.
 * @return {!JQuery}
 */
JQuery.prototype.ajaxStart = function(handler) {};

/**
 * Register a handler to be called when all Ajax requests have completed. This is an Ajax Event.
 * 
 * @see {\@link https://api.jquery.com/ajaxStop/}
 * @param {function(): ?} handler The function to be invoked.
 * @return {!JQuery}
 */
JQuery.prototype.ajaxStop = function(handler) {};

/**
 * Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event.
 * 
 * @see {\@link https://api.jquery.com/ajaxSuccess/}
 * @param {function(!JQueryEventObject, !XMLHttpRequest, !JQueryAjaxSettings): ?} handler The function to be invoked.
 * @return {!JQuery}
 */
JQuery.prototype.ajaxSuccess = function(handler) {};

/**
 * Load data from the server and place the returned HTML into the matched element.
 * 
 * @see {\@link https://api.jquery.com/load/}
 * Bind an event handler to the "load" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/load/}
 * Bind an event handler to the "load" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/load/}
 * @param {string|function(!JQueryEventObject): ?|?=} url_or_handler_or_eventData A string containing the URL to which the request is sent. / A function to execute when the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {(string|!Object)|function(!JQueryEventObject): ?=} data_or_handler A plain object or string that is sent to the server with the request. / A function to execute when the event is triggered.
 * @param {function(string, string, !XMLHttpRequest): ?=} complete A callback function that is executed when the request completes.
 * @return {!JQuery}
 */
JQuery.prototype.load = function(url_or_handler_or_eventData, data_or_handler, complete) {};

/**
 * Encode a set of form elements as a string for submission.
 * @see {\@link https://api.jquery.com/serialize/}
 * @return {string}
 */
JQuery.prototype.serialize = function() {};

/**
 * Encode a set of form elements as an array of names and values.
 * @see {\@link https://api.jquery.com/serializeArray/}
 * @return {!Array<!JQuerySerializeArrayElement>}
 */
JQuery.prototype.serializeArray = function() {};

/**
 * Adds the specified class(es) to each of the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/addClass/#addClass-className}
 * Adds the specified class(es) to each of the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/addClass/#addClass-function}
 * @param {string|function(number, string): string} className_or_func One or more space-separated classes to be added to the class attribute of each matched element. / A function returning one or more space-separated class names to be added to the existing class name(s). Receives the index position of the element in the set and the existing class name(s) as arguments. Within the function, this refers to the current element in the set.
 * @return {!JQuery}
 */
JQuery.prototype.addClass = function(className_or_func) {};

/**
 * Add the previous set of elements on the stack to the current set, optionally filtered by a selector.
 * @see {\@link https://api.jquery.com/addBack/}
 * @param {string=} selector
 * @return {!JQuery}
 */
JQuery.prototype.addBack = function(selector) {};

/**
 * Get the value of an attribute for the first element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/attr/#attr-attributeName}
 * Set one or more attributes for the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/attr/#attr-attributeName-value}
 * Set one or more attributes for the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/attr/#attr-attributeName-function}
 * Set one or more attributes for the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/attr/#attr-attributes}
 * @param {string|!Object} attributeName_or_attributes The name of the attribute to get. / The name of the attribute to set. / An object of attribute-value pairs to set.
 * @param {(string|number)|function(number, string): (string|number)=} value_or_func A value to set for the attribute. If this is `null`, the attribute will be deleted. / A function returning the value to set. this is the current element. Receives the index position of the element in the set and the old attribute value as arguments.
 * @return {string|!JQuery}
 */
JQuery.prototype.attr = function(attributeName_or_attributes, value_or_func) {};

/**
 * Determine whether any of the matched elements are assigned the given class.
 * 
 * @see {\@link https://api.jquery.com/hasClass/}
 * @param {string} className The class name to search for.
 * @return {boolean}
 */
JQuery.prototype.hasClass = function(className) {};

/**
 * Get the HTML contents of the first element in the set of matched elements.
 * @see {\@link https://api.jquery.com/html/#html}
 * Set the HTML contents of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/html/#html-htmlString}
 * Set the HTML contents of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/html/#html-function}
 * @param {string|function(number, string): string=} htmlString_or_func A string of HTML to set as the content of each matched element. / A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set.
 * @return {string|!JQuery}
 */
JQuery.prototype.html = function(htmlString_or_func) {};

/**
 * Get the value of a property for the first element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/prop/#prop-propertyName}
 * Set one or more properties for the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/prop/#prop-propertyName-value}
 * Set one or more properties for the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/prop/#prop-properties}
 * Set one or more properties for the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/prop/#prop-propertyName-function}
 * @param {string|!Object} propertyName_or_properties The name of the property to get. / The name of the property to set. / An object of property-value pairs to set.
 * @param {(string|number|boolean)|function(number, ?): ?=} value_or_func A value to set for the property. / A function returning the value to set. Receives the index position of the element in the set and the old property value as arguments. Within the function, the keyword this refers to the current element.
 * @return {?|!JQuery}
 */
JQuery.prototype.prop = function(propertyName_or_properties, value_or_func) {};

/**
 * Remove an attribute from each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/removeAttr/}
 * @param {string} attributeName An attribute to remove; as of version 1.7, it can be a space-separated list of attributes.
 * @return {!JQuery}
 */
JQuery.prototype.removeAttr = function(attributeName) {};

/**
 * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/removeClass/#removeClass-className}
 * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/removeClass/#removeClass-function}
 * @param {string|function(number, string): string=} className_or_func One or more space-separated classes to be removed from the class attribute of each matched element. / A function returning one or more space-separated class names to be removed. Receives the index position of the element in the set and the old class value as arguments.
 * @return {!JQuery}
 */
JQuery.prototype.removeClass = function(className_or_func) {};

/**
 * Remove a property for the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/removeProp/}
 * @param {string} propertyName The name of the property to remove.
 * @return {!JQuery}
 */
JQuery.prototype.removeProp = function(propertyName) {};

/**
 * Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.
 * 
 * @see {\@link https://api.jquery.com/toggleClass/#toggleClass-className}
 * Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.
 * 
 * @see {\@link https://api.jquery.com/toggleClass/#toggleClass-state}
 * Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.
 * 
 * @see {\@link https://api.jquery.com/toggleClass/#toggleClass-function-state}
 * @param {string|boolean|function(number, string, boolean): string=} className_or_swtch_or_func One or more class names (separated by spaces) to be toggled for each element in the matched set. / A boolean value to determine whether the class should be added or removed. / A function that returns class names to be toggled in the class attribute of each element in the matched set. Receives the index position of the element in the set, the old class value, and the switch as arguments.
 * @param {boolean=} swtch A Boolean (not just truthy/falsy) value to determine whether the class should be added or removed. / A boolean value to determine whether the class should be added or removed.
 * @return {!JQuery}
 */
JQuery.prototype.toggleClass = function(className_or_swtch_or_func, swtch) {};

/**
 * Get the current value of the first element in the set of matched elements.
 * @see {\@link https://api.jquery.com/val/#val}
 * Set the value of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/val/#val-value}
 * Set the value of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/val/#val-function}
 * @param {(string|number|!Array<string>)|function(number, string): string=} value_or_func A string of text, an array of strings or number corresponding to the value of each matched element to set as selected/checked. / A function returning the value to set. this is the current element. Receives the index position of the element in the set and the old value as arguments.
 * @return {?|!JQuery}
 */
JQuery.prototype.val = function(value_or_func) {};

/**
 * Get the value of style properties for the first element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/css/#css-propertyName}
 * Get the value of style properties for the first element in the set of matched elements.
 * Results in an object of property-value pairs.
 * 
 * @see {\@link https://api.jquery.com/css/#css-propertyNames}
 * Set one or more CSS properties for the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/css/#css-propertyName-value}
 * Set one or more CSS properties for the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/css/#css-propertyName-function}
 * Set one or more CSS properties for the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/css/#css-properties}
 * @param {string|!Array<string>|!JQueryCssProperties} propertyName_or_propertyNames_or_properties A CSS property. / An array of one or more CSS properties. / A CSS property name. / An object of property-value pairs to set.
 * @param {(string|number)|function(number, string): (string|number)=} value A value to set for the property. / A function returning the value to set. this is the current element. Receives the index position of the element in the set and the old value as arguments.
 * @return {string|?|!JQuery}
 */
JQuery.prototype.css = function(propertyName_or_propertyNames_or_properties, value) {};

/**
 * Get the current computed height for the first element in the set of matched elements.
 * @see {\@link https://api.jquery.com/height/#height}
 * Set the CSS height of every matched element.
 * 
 * @see {\@link https://api.jquery.com/height/#height-value}
 * Set the CSS height of every matched element.
 * 
 * @see {\@link https://api.jquery.com/height/#height-function}
 * @param {(string|number)|function(number, number): (string|number)=} value_or_func An integer representing the number of pixels, or an integer with an optional unit of measure appended (as a string). / A function returning the height to set. Receives the index position of the element in the set and the old height as arguments. Within the function, this refers to the current element in the set.
 * @return {number|!JQuery}
 */
JQuery.prototype.height = function(value_or_func) {};

/**
 * Get the current computed height for the first element in the set of matched elements, including padding but not border.
 * @see {\@link https://api.jquery.com/innerHeight/#innerHeight}
 * Sets the inner height on elements in the set of matched elements, including padding but not border.
 * 
 * @see {\@link https://api.jquery.com/innerHeight/#innerHeight-value}
 * @param {(string|number)=} value An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).
 * @return {number|!JQuery}
 */
JQuery.prototype.innerHeight = function(value) {};

/**
 * Get the current computed width for the first element in the set of matched elements, including padding but not border.
 * @see {\@link https://api.jquery.com/innerWidth/#innerWidth}
 * Sets the inner width on elements in the set of matched elements, including padding but not border.
 * 
 * @see {\@link https://api.jquery.com/innerWidth/#innerWidth-value}
 * @param {(string|number)=} value An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).
 * @return {number|!JQuery}
 */
JQuery.prototype.innerWidth = function(value) {};

/**
 * Get the current coordinates of the first element in the set of matched elements, relative to the document.
 * @see {\@link https://api.jquery.com/offset/#offset}
 * An object containing the properties top and left, which are integers indicating the new top and left coordinates for the elements.
 * 
 * @see {\@link https://api.jquery.com/offset/#offset-coordinates}
 * An object containing the properties top and left, which are integers indicating the new top and left coordinates for the elements.
 * 
 * @see {\@link https://api.jquery.com/offset/#offset-function}
 * @param {!JQueryCoordinates|function(number, !JQueryCoordinates): !JQueryCoordinates=} coordinates_or_func An object containing the properties top and left, which are integers indicating the new top and left coordinates for the elements. / A function to return the coordinates to set. Receives the index of the element in the collection as the first argument and the current coordinates as the second argument. The function should return an object with the new top and left properties.
 * @return {!JQueryCoordinates|!JQuery}
 */
JQuery.prototype.offset = function(coordinates_or_func) {};

/**
 * Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin. Returns an integer (without "px") representation of the value or null if called on an empty set of elements.
 * 
 * @see {\@link https://api.jquery.com/outerHeight/#outerHeight-includeMargin}
 * Sets the outer height on elements in the set of matched elements, including padding and border.
 * 
 * @see {\@link https://api.jquery.com/outerHeight/#outerHeight-value}
 * @param {boolean|(string|number)=} includeMargin_or_value A Boolean indicating whether to include the element's margin in the calculation. / An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).
 * @return {number|!JQuery}
 */
JQuery.prototype.outerHeight = function(includeMargin_or_value) {};

/**
 * Get the current computed width for the first element in the set of matched elements, including padding and border.
 * 
 * @see {\@link https://api.jquery.com/outerWidth/#outerWidth-includeMargin}
 * Sets the outer width on elements in the set of matched elements, including padding and border.
 * 
 * @see {\@link https://api.jquery.com/outerWidth/#outerWidth-value}
 * @param {boolean|(string|number)=} includeMargin_or_value A Boolean indicating whether to include the element's margin in the calculation. / An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).
 * @return {number|!JQuery}
 */
JQuery.prototype.outerWidth = function(includeMargin_or_value) {};

/**
 * Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.
 * @see {\@link https://api.jquery.com/position/}
 * @return {!JQueryCoordinates}
 */
JQuery.prototype.position = function() {};

/**
 * Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element.
 * @see {\@link https://api.jquery.com/scrollLeft/#scrollLeft}
 * Set the current horizontal position of the scroll bar for each of the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/scrollLeft/#scrollLeft-value}
 * @param {number=} value An integer indicating the new position to set the scroll bar to.
 * @return {number|!JQuery}
 */
JQuery.prototype.scrollLeft = function(value) {};

/**
 * Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element.
 * @see {\@link https://api.jquery.com/scrollTop/#scrollTop}
 * Set the current vertical position of the scroll bar for each of the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/scrollTop/#scrollTop-value}
 * @param {number=} value An integer indicating the new position to set the scroll bar to.
 * @return {number|!JQuery}
 */
JQuery.prototype.scrollTop = function(value) {};

/**
 * Get the current computed width for the first element in the set of matched elements.
 * @see {\@link https://api.jquery.com/width/#width}
 * Set the CSS width of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/width/#width-value}
 * Set the CSS width of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/width/#width-function}
 * @param {(string|number)|function(number, number): (string|number)=} value_or_func An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string). / A function returning the width to set. Receives the index position of the element in the set and the old width as arguments. Within the function, this refers to the current element in the set.
 * @return {number|!JQuery}
 */
JQuery.prototype.width = function(value_or_func) {};

/**
 * Remove from the queue all items that have not yet been run.
 * 
 * @see {\@link https://api.jquery.com/clearQueue/}
 * @param {string=} queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
 * @return {!JQuery}
 */
JQuery.prototype.clearQueue = function(queueName) {};

/**
 * Store arbitrary data associated with the matched elements.
 * 
 * @see {\@link https://api.jquery.com/data/#data-key-value}
 * Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.
 * 
 * @see {\@link https://api.jquery.com/data/#data-key}
 * Store arbitrary data associated with the matched elements.
 * 
 * @see {\@link https://api.jquery.com/data/#data-obj}
 * Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.
 * @see {\@link https://api.jquery.com/data/#data}
 * @param {string|!Object<string,?>=} key_or_obj A string naming the piece of data to set. / Name of the data stored. / An object of key-value pairs of data to update.
 * @param {?=} value The new data value; it can be any JavaScript type including Array or Object.
 * @return {!JQuery|?}
 */
JQuery.prototype.data = function(key_or_obj, value) {};

/**
 * Execute the next function on the queue for the matched elements.
 * 
 * @see {\@link https://api.jquery.com/dequeue/}
 * @param {string=} queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
 * @return {!JQuery}
 */
JQuery.prototype.dequeue = function(queueName) {};

/**
 * Remove a previously-stored piece of data.
 * 
 * @see {\@link https://api.jquery.com/removeData/#removeData-name}
 * Remove a previously-stored piece of data.
 * 
 * @see {\@link https://api.jquery.com/removeData/#removeData-list}
 * Remove all previously-stored piece of data.
 * @see {\@link https://api.jquery.com/removeData/}
 * @param {string|!Array<string>=} name_or_list A string naming the piece of data to delete or space-separated string naming the pieces of data to delete. / An array of strings naming the pieces of data to delete.
 * @return {!JQuery}
 */
JQuery.prototype.removeData = function(name_or_list) {};

/**
 * Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.
 * 
 * @see {\@link https://api.jquery.com/promise/}
 * @param {string=} type The type of queue that needs to be observed. (default: fx)
 * @param {!Object=} target Object onto which the promise methods have to be attached
 * @return {!JQueryPromise<?>}
 */
JQuery.prototype.promise = function(type, target) {};

/**
 * Perform a custom animation of a set of CSS properties.
 * 
 * @see {\@link https://api.jquery.com/animate/#animate-properties-duration-easing-complete}
 * Perform a custom animation of a set of CSS properties.
 * 
 * @see {\@link https://api.jquery.com/animate/#animate-properties-duration-easing-complete}
 * Perform a custom animation of a set of CSS properties.
 * 
 * @see {\@link https://api.jquery.com/animate/#animate-properties-options}
 * @param {!Object} properties An object of CSS properties and values that the animation will move toward.
 * @param {(string|number)|!JQueryAnimationOptions=} duration_or_options A string or number determining how long the animation will run. / A map of additional options to pass to the method.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition. (default: swing)
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!JQuery}
 */
JQuery.prototype.animate = function(properties, duration_or_options, complete_or_easing, complete) {};

/**
 * Set a timer to delay execution of subsequent items in the queue.
 * 
 * @see {\@link https://api.jquery.com/delay/}
 * @param {number} duration An integer indicating the number of milliseconds to delay execution of the next item in the queue.
 * @param {string=} queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
 * @return {!JQuery}
 */
JQuery.prototype.delay = function(duration, queueName) {};

/**
 * Display the matched elements by fading them to opaque.
 * 
 * @see {\@link https://api.jquery.com/fadeIn/#fadeIn-duration-complete}
 * Display the matched elements by fading them to opaque.
 * 
 * @see {\@link https://api.jquery.com/fadeIn/#fadeIn-duration-easing-complete}
 * Display the matched elements by fading them to opaque.
 * 
 * @see {\@link https://api.jquery.com/fadeIn/#fadeIn-options}
 * @param {(string|number)|!JQueryAnimationOptions=} duration_or_options A string or number determining how long the animation will run. / A map of additional options to pass to the method.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition.
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!JQuery}
 */
JQuery.prototype.fadeIn = function(duration_or_options, complete_or_easing, complete) {};

/**
 * Hide the matched elements by fading them to transparent.
 * 
 * @see {\@link https://api.jquery.com/fadeOut/#fadeOut-duration-complete}
 * Hide the matched elements by fading them to transparent.
 * 
 * @see {\@link https://api.jquery.com/fadeOut/#fadeOut-duration-easing-complete}
 * Hide the matched elements by fading them to transparent.
 * 
 * @see {\@link https://api.jquery.com/fadeOut/#fadeOut-options}
 * @param {(string|number)|!JQueryAnimationOptions=} duration_or_options A string or number determining how long the animation will run. / A map of additional options to pass to the method.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition.
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!JQuery}
 */
JQuery.prototype.fadeOut = function(duration_or_options, complete_or_easing, complete) {};

/**
 * Adjust the opacity of the matched elements.
 * 
 * @see {\@link https://api.jquery.com/fadeTo/#fadeTo-duration-opacity-complete}
 * Adjust the opacity of the matched elements.
 * 
 * @see {\@link https://api.jquery.com/fadeTo/#fadeTo-duration-opacity-easing-complete}
 * @param {(string|number)} duration A string or number determining how long the animation will run.
 * @param {number} opacity A number between 0 and 1 denoting the target opacity.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition.
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!JQuery}
 */
JQuery.prototype.fadeTo = function(duration, opacity, complete_or_easing, complete) {};

/**
 * Display or hide the matched elements by animating their opacity.
 * 
 * @see {\@link https://api.jquery.com/fadeToggle/#fadeToggle-duration-easing-complete}
 * Display or hide the matched elements by animating their opacity.
 * 
 * @see {\@link https://api.jquery.com/fadeToggle/#fadeToggle-duration-easing-complete}
 * Display or hide the matched elements by animating their opacity.
 * 
 * @see {\@link https://api.jquery.com/fadeToggle/#fadeToggle-options}
 * @param {(string|number)|!JQueryAnimationOptions=} duration_or_options A string or number determining how long the animation will run. / A map of additional options to pass to the method.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition.
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!JQuery}
 */
JQuery.prototype.fadeToggle = function(duration_or_options, complete_or_easing, complete) {};

/**
 * Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements.
 * 
 * @see {\@link https://api.jquery.com/finish/}
 * @param {string=} queue The name of the queue in which to stop animations.
 * @return {!JQuery}
 */
JQuery.prototype.finish = function(queue) {};

/**
 * Hide the matched elements.
 * 
 * @see {\@link https://api.jquery.com/hide/#hide}
 * Hide the matched elements.
 * 
 * @see {\@link https://api.jquery.com/hide/#hide-duration-easing-complete}
 * Hide the matched elements.
 * 
 * @see {\@link https://api.jquery.com/hide/#hide-options}
 * @param {(string|number)|!JQueryAnimationOptions=} duration_or_options A string or number determining how long the animation will run. / A map of additional options to pass to the method.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition.
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!JQuery}
 */
JQuery.prototype.hide = function(duration_or_options, complete_or_easing, complete) {};

/**
 * Display the matched elements.
 * 
 * @see {\@link https://api.jquery.com/show/#show}
 * Display the matched elements.
 * 
 * @see {\@link https://api.jquery.com/show/#show-duration-easing-complete}
 * Display the matched elements.
 * 
 * @see {\@link https://api.jquery.com/show/#show-options}
 * @param {(string|number)|!JQueryAnimationOptions=} duration_or_options A string or number determining how long the animation will run. / A map of additional options to pass to the method.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition.
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!JQuery}
 */
JQuery.prototype.show = function(duration_or_options, complete_or_easing, complete) {};

/**
 * Display the matched elements with a sliding motion.
 * 
 * @see {\@link https://api.jquery.com/slideDown/#slideDown-duration-complete}
 * Display the matched elements with a sliding motion.
 * 
 * @see {\@link https://api.jquery.com/slideDown/#slideDown-duration-easing-complete}
 * Display the matched elements with a sliding motion.
 * 
 * @see {\@link https://api.jquery.com/slideDown/#slideDown-options}
 * @param {(string|number)|!JQueryAnimationOptions=} duration_or_options A string or number determining how long the animation will run. / A map of additional options to pass to the method.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition.
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!JQuery}
 */
JQuery.prototype.slideDown = function(duration_or_options, complete_or_easing, complete) {};

/**
 * Display or hide the matched elements with a sliding motion.
 * 
 * @see {\@link https://api.jquery.com/slideToggle/#slideToggle-duration-complete}
 * Display or hide the matched elements with a sliding motion.
 * 
 * @see {\@link https://api.jquery.com/slideToggle/#slideToggle-duration-easing-complete}
 * Display or hide the matched elements with a sliding motion.
 * 
 * @see {\@link https://api.jquery.com/slideToggle/#slideToggle-options}
 * @param {(string|number)|!JQueryAnimationOptions=} duration_or_options A string or number determining how long the animation will run. / A map of additional options to pass to the method.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition.
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!JQuery}
 */
JQuery.prototype.slideToggle = function(duration_or_options, complete_or_easing, complete) {};

/**
 * Hide the matched elements with a sliding motion.
 * 
 * @see {\@link https://api.jquery.com/slideUp/#slideUp-duration-complete}
 * Hide the matched elements with a sliding motion.
 * 
 * @see {\@link https://api.jquery.com/slideUp/#slideUp-duration-easing-complete}
 * Hide the matched elements with a sliding motion.
 * 
 * @see {\@link https://api.jquery.com/slideUp/#slideUp-options}
 * @param {(string|number)|!JQueryAnimationOptions=} duration_or_options A string or number determining how long the animation will run. / A map of additional options to pass to the method.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition.
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!JQuery}
 */
JQuery.prototype.slideUp = function(duration_or_options, complete_or_easing, complete) {};

/**
 * Stop the currently-running animation on the matched elements.
 * 
 * @see {\@link https://api.jquery.com/stop/#stop-clearQueue-jumpToEnd}
 * Stop the currently-running animation on the matched elements.
 * 
 * @see {\@link https://api.jquery.com/stop/#stop-queue-clearQueue-jumpToEnd}
 * @param {boolean|string=} clearQueue_or_queue A Boolean indicating whether to remove queued animation as well. Defaults to false. / The name of the queue in which to stop animations.
 * @param {boolean=} jumpToEnd_or_clearQueue A Boolean indicating whether to complete the current animation immediately. Defaults to false. / A Boolean indicating whether to remove queued animation as well. Defaults to false.
 * @param {boolean=} jumpToEnd A Boolean indicating whether to complete the current animation immediately. Defaults to false.
 * @return {!JQuery}
 */
JQuery.prototype.stop = function(clearQueue_or_queue, jumpToEnd_or_clearQueue, jumpToEnd) {};

/**
 * Display or hide the matched elements.
 * 
 * @see {\@link https://api.jquery.com/toggle/#toggle-duration-complete}
 * Display or hide the matched elements.
 * 
 * @see {\@link https://api.jquery.com/toggle/#toggle-duration-easing-complete}
 * Display or hide the matched elements.
 * 
 * @see {\@link https://api.jquery.com/toggle/#toggle-options}
 * Display or hide the matched elements.
 * 
 * @see {\@link https://api.jquery.com/toggle/#toggle-display}
 * @param {(string|number)|!JQueryAnimationOptions|boolean=} duration_or_options_or_showOrHide A string or number determining how long the animation will run. / A map of additional options to pass to the method. / A Boolean indicating whether to show or hide the elements.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition.
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!JQuery}
 */
JQuery.prototype.toggle = function(duration_or_options_or_showOrHide, complete_or_easing, complete) {};

/**
 * Attach a handler to an event for the elements.
 * 
 * @see {\@link https://api.jquery.com/bind/#bind-eventType-eventData-handler}
 * Attach a handler to an event for the elements.
 * 
 * @see {\@link https://api.jquery.com/bind/#bind-eventType-eventData-handler}
 * Attach a handler to an event for the elements.
 * 
 * @see {\@link https://api.jquery.com/bind/#bind-eventType-eventData-preventBubble}
 * Attach a handler to an event for the elements.
 * 
 * @see {\@link https://api.jquery.com/bind/#bind-eventType-eventData-preventBubble}
 * Attach a handler to an event for the elements.
 * 
 * @see {\@link https://api.jquery.com/bind/#bind-events}
 * @param {string|?} eventType_or_events A string containing one or more DOM event types, such as "click" or "submit," or custom event names. / An object containing one or more DOM event types and functions to execute for them.
 * @param {?|function(!JQueryEventObject): ?|boolean=} eventData_or_handler_or_preventBubble An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered. / Setting the third argument to false will attach a function that prevents the default action from occurring and stops the event from bubbling. The default is true.
 * @param {function(!JQueryEventObject): ?|boolean=} handler_or_preventBubble A function to execute each time the event is triggered. / Setting the third argument to false will attach a function that prevents the default action from occurring and stops the event from bubbling. The default is true.
 * @return {!JQuery}
 */
JQuery.prototype.bind = function(eventType_or_events, eventData_or_handler_or_preventBubble, handler_or_preventBubble) {};

/**
 * Trigger the "blur" event on an element
 * @see {\@link https://api.jquery.com/blur/#blur}
 * Bind an event handler to the "blur" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/blur/#blur-handler}
 * Bind an event handler to the "blur" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/blur/#blur-eventData-handler}
 * @param {function(!JQueryEventObject): ?|?=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.blur = function(handler_or_eventData, handler) {};

/**
 * Trigger the "change" event on an element.
 * @see {\@link https://api.jquery.com/change/#change}
 * Bind an event handler to the "change" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/change/#change-handler}
 * Bind an event handler to the "change" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/change/#change-eventData-handler}
 * @param {function(!JQueryEventObject): ?|?=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.change = function(handler_or_eventData, handler) {};

/**
 * Trigger the "click" event on an element.
 * @see {\@link https://api.jquery.com/click/#click}
 * Bind an event handler to the "click" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/click/#click-handler}
 * Bind an event handler to the "click" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/click/#click-eventData-handler}
 * @param {function(!JQueryEventObject): ?|?=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.click = function(handler_or_eventData, handler) {};

/**
 * Trigger the "contextmenu" event on an element.
 * @see {\@link https://api.jquery.com/contextmenu/#contextmenu}
 * Bind an event handler to the "contextmenu" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/contextmenu/#contextmenu-handler}
 * Bind an event handler to the "contextmenu" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/contextmenu/#contextmenu-eventData-handler}
 * @param {function(!JQueryMouseEventObject): ?|!Object=} handler_or_eventData A function to execute when the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryMouseEventObject): ?=} handler A function to execute when the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.contextmenu = function(handler_or_eventData, handler) {};

/**
 * Trigger the "dblclick" event on an element.
 * @see {\@link https://api.jquery.com/dblclick/#dblclick}
 * Bind an event handler to the "dblclick" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/dblclick/#dblclick-handler}
 * Bind an event handler to the "dblclick" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/dblclick/#dblclick-eventData-handler}
 * @param {function(!JQueryEventObject): ?|?=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.dblclick = function(handler_or_eventData, handler) {};

/**
 * Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.
 * @see {\@link https://api.jquery.com/delegate/#delegate-selector-eventType-handler}
 * Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.
 * @see {\@link https://api.jquery.com/delegate/#delegate-selector-eventType-eventData-handler}
 * @param {?} selector
 * @param {string} eventType
 * @param {function(!JQueryEventObject): ?|?} handler_or_eventData
 * @param {function(!JQueryEventObject): ?=} handler
 * @return {!JQuery}
 */
JQuery.prototype.delegate = function(selector, eventType, handler_or_eventData, handler) {};

/**
 * Trigger the "focus" event on an element.
 * @see {\@link https://api.jquery.com/focus/#focus}
 * Bind an event handler to the "focus" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/focus/#focus-handler}
 * Bind an event handler to the "focus" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/focus/#focus-eventData-handler}
 * @param {function(!JQueryEventObject): ?|?=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.focus = function(handler_or_eventData, handler) {};

/**
 * Trigger the "focusin" event on an element.
 * @see {\@link https://api.jquery.com/focusin/#focusin}
 * Bind an event handler to the "focusin" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/focusin/#focusin-handler}
 * Bind an event handler to the "focusin" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/focusin/#focusin-eventData-handler}
 * @param {function(!JQueryEventObject): ?|!Object=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.focusin = function(handler_or_eventData, handler) {};

/**
 * Trigger the "focusout" event on an element.
 * @see {\@link https://api.jquery.com/focusout/#focusout}
 * Bind an event handler to the "focusout" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/focusout/#focusout-handler}
 * Bind an event handler to the "focusout" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/focusout/#focusout-eventData-handler}
 * @param {function(!JQueryEventObject): ?|!Object=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.focusout = function(handler_or_eventData, handler) {};

/**
 * Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.
 * 
 * @see {\@link https://api.jquery.com/hover/#hover-handlerIn-handlerOut}
 * Bind a single handler to the matched elements, to be executed when the mouse pointer enters or leaves the elements.
 * 
 * @see {\@link https://api.jquery.com/hover/#hover-handlerInOut}
 * @param {function(!JQueryEventObject): ?} handlerIn_or_handlerInOut A function to execute when the mouse pointer enters the element. / A function to execute when the mouse pointer enters or leaves the element.
 * @param {function(!JQueryEventObject): ?=} handlerOut A function to execute when the mouse pointer leaves the element.
 * @return {!JQuery}
 */
JQuery.prototype.hover = function(handlerIn_or_handlerInOut, handlerOut) {};

/**
 * Trigger the "keydown" event on an element.
 * @see {\@link https://api.jquery.com/keydown/#keydown}
 * Bind an event handler to the "keydown" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/keydown/#keydown-handler}
 * Bind an event handler to the "keydown" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/keydown/#keydown-eventData-handler}
 * @param {function(!JQueryKeyEventObject): ?|?=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryKeyEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.keydown = function(handler_or_eventData, handler) {};

/**
 * Trigger the "keypress" event on an element.
 * @see {\@link https://api.jquery.com/keypress/#keypress}
 * Bind an event handler to the "keypress" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/keypress/#keypress-handler}
 * Bind an event handler to the "keypress" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/keypress/#keypress-eventData-handler}
 * @param {function(!JQueryKeyEventObject): ?|?=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryKeyEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.keypress = function(handler_or_eventData, handler) {};

/**
 * Trigger the "keyup" event on an element.
 * @see {\@link https://api.jquery.com/keyup/#keyup}
 * Bind an event handler to the "keyup" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/keyup/#keyup-handler}
 * Bind an event handler to the "keyup" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/keyup/#keyup-eventData-handler}
 * @param {function(!JQueryKeyEventObject): ?|?=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryKeyEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.keyup = function(handler_or_eventData, handler) {};

/**
 * Trigger the "mousedown" event on an element.
 * @see {\@link https://api.jquery.com/mousedown/#mousedown}
 * Bind an event handler to the "mousedown" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/mousedown/#mousedown-handler}
 * Bind an event handler to the "mousedown" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/mousedown/#mousedown-eventData-handler}
 * @param {function(!JQueryMouseEventObject): ?|!Object=} handler_or_eventData A function to execute when the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryMouseEventObject): ?=} handler A function to execute when the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.mousedown = function(handler_or_eventData, handler) {};

/**
 * Trigger the "mouseenter" event on an element.
 * @see {\@link https://api.jquery.com/mouseenter/#mouseenter}
 * Bind an event handler to be fired when the mouse enters an element.
 * 
 * @see {\@link https://api.jquery.com/mouseenter/#mouseenter-handler}
 * Bind an event handler to be fired when the mouse enters an element.
 * 
 * @see {\@link https://api.jquery.com/mouseenter/#mouseenter-eventData-handler}
 * @param {function(!JQueryMouseEventObject): ?|!Object=} handler_or_eventData A function to execute when the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryMouseEventObject): ?=} handler A function to execute when the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.mouseenter = function(handler_or_eventData, handler) {};

/**
 * Trigger the "mouseleave" event on an element.
 * @see {\@link https://api.jquery.com/mouseleave/#mouseleave}
 * Bind an event handler to be fired when the mouse leaves an element.
 * 
 * @see {\@link https://api.jquery.com/mouseleave/#mouseleave-handler}
 * Bind an event handler to be fired when the mouse leaves an element.
 * 
 * @see {\@link https://api.jquery.com/mouseleave/#mouseleave-eventData-handler}
 * @param {function(!JQueryMouseEventObject): ?|!Object=} handler_or_eventData A function to execute when the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryMouseEventObject): ?=} handler A function to execute when the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.mouseleave = function(handler_or_eventData, handler) {};

/**
 * Trigger the "mousemove" event on an element.
 * @see {\@link https://api.jquery.com/mousemove/#mousemove}
 * Bind an event handler to the "mousemove" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/mousemove/#mousemove-handler}
 * Bind an event handler to the "mousemove" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/mousemove/#mousemove-eventData-handler}
 * @param {function(!JQueryMouseEventObject): ?|!Object=} handler_or_eventData A function to execute when the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryMouseEventObject): ?=} handler A function to execute when the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.mousemove = function(handler_or_eventData, handler) {};

/**
 * Trigger the "mouseout" event on an element.
 * @see {\@link https://api.jquery.com/mouseout/#mouseout}
 * Bind an event handler to the "mouseout" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/mouseout/#mouseout-handler}
 * Bind an event handler to the "mouseout" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/mouseout/#mouseout-eventData-handler}
 * @param {function(!JQueryMouseEventObject): ?|!Object=} handler_or_eventData A function to execute when the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryMouseEventObject): ?=} handler A function to execute when the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.mouseout = function(handler_or_eventData, handler) {};

/**
 * Trigger the "mouseover" event on an element.
 * @see {\@link https://api.jquery.com/mouseover/#mouseover}
 * Bind an event handler to the "mouseover" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/mouseover/#mouseover-handler}
 * Bind an event handler to the "mouseover" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/mouseover/#mouseover-eventData-handler}
 * @param {function(!JQueryMouseEventObject): ?|!Object=} handler_or_eventData A function to execute when the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryMouseEventObject): ?=} handler A function to execute when the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.mouseover = function(handler_or_eventData, handler) {};

/**
 * Trigger the "mouseup" event on an element.
 * @see {\@link https://api.jquery.com/mouseup/#mouseup}
 * Bind an event handler to the "mouseup" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/mouseup/#mouseup-handler}
 * Bind an event handler to the "mouseup" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/mouseup/#mouseup-eventData-handler}
 * @param {function(!JQueryMouseEventObject): ?|!Object=} handler_or_eventData A function to execute when the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryMouseEventObject): ?=} handler A function to execute when the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.mouseup = function(handler_or_eventData, handler) {};

/**
 * Remove an event handler.
 * @see {\@link https://api.jquery.com/off/#off}
 * Remove an event handler.
 * 
 * @see {\@link https://api.jquery.com/off/#off-events-selector-handler}
 * Remove an event handler.
 * 
 * @see {\@link https://api.jquery.com/off/#off-events-selector-handler}
 * Remove an event handler.
 * 
 * @see {\@link https://api.jquery.com/off/#off-events-selector-handler}
 * Remove an event handler.
 * 
 * @see {\@link https://api.jquery.com/off/#off-events-selector}
 * @param {string|!Object<string,?>=} events One or more space-separated event types and optional namespaces, or just namespaces, such as "click", "keydown.myPlugin", or ".myPlugin". / An object where the string keys represent one or more space-separated event types and optional namespaces, and the values represent handler functions previously attached for the event(s).
 * @param {string|function(!JQueryEventObject, !Array<?>): ?|function(!JQueryEventObject): ?=} selector_or_handler A selector which should match the one originally passed to .on() when attaching event handlers. / A handler function previously attached for the event(s), or the special value false. Takes handler with extra args that can be attached with on(). / A handler function previously attached for the event(s), or the special value false.
 * @param {function(!JQueryEventObject): ?=} handler A handler function previously attached for the event(s), or the special value false.
 * @return {!JQuery}
 */
JQuery.prototype.off = function(events, selector_or_handler, handler) {};

/**
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * @see {\@link https://api.jquery.com/on/#on-events-selector-data-handler}
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * @see {\@link https://api.jquery.com/on/#on-events-selector-data-handler}
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * @see {\@link https://api.jquery.com/on/#on-events-selector-data-handler}
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * @see {\@link https://api.jquery.com/on/#on-events-selector-data-handler}
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * @see {\@link https://api.jquery.com/on/#on-events-selector-data}
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * @see {\@link https://api.jquery.com/on/#on-events-selector-data}
 * @param {string|!Object<string,function(!JQueryEventObject, !Array<?>): ?>} events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin". / An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).
 * @param {function(!JQueryEventObject, !Array<?>): ?|?|string=} handler_or_data_or_selector A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false. Rest parameter args is for optional parameters passed to jQuery.trigger(). Note that the actual parameters on the event handler function must be marked as optional (? syntax). / Data to be passed to the handler in event.data when an event is triggered. / A selector string to filter the descendants of the selected elements that trigger the event. If the selector is null or omitted, the event is always triggered when it reaches the selected element. / A selector string to filter the descendants of the selected elements that will call the handler. If the selector is null or omitted, the handler is always called when it reaches the selected element. / Data to be passed to the handler in event.data when an event occurs.
 * @param {function(!JQueryEventObject, !Array<?>): ?|?=} handler_or_data A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false. / Data to be passed to the handler in event.data when an event is triggered. / Data to be passed to the handler in event.data when an event occurs.
 * @param {function(!JQueryEventObject, !Array<?>): ?=} handler A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false.
 * @return {!JQuery}
 */
JQuery.prototype.on = function(events, handler_or_data_or_selector, handler_or_data, handler) {};

/**
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * @see {\@link https://api.jquery.com/one/#one-events-data-handler}
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * @see {\@link https://api.jquery.com/one/#one-events-data-handler}
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * @see {\@link https://api.jquery.com/one/#one-events-selector-data-handler}
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * @see {\@link https://api.jquery.com/one/#one-events-selector-data-handler}
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * @see {\@link https://api.jquery.com/one/#one-events-selector-data}
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * @see {\@link https://api.jquery.com/one/#one-events-selector-data}
 * @param {string|!Object<string,?>} events A string containing one or more JavaScript event types, such as "click" or "submit," or custom event names. / One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin". / An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).
 * @param {function(!JQueryEventObject): ?|!Object|string|?=} handler_or_data_or_selector A function to execute at the time the event is triggered. / An object containing data that will be passed to the event handler. / A selector string to filter the descendants of the selected elements that trigger the event. If the selector is null or omitted, the event is always triggered when it reaches the selected element. / A selector string to filter the descendants of the selected elements that will call the handler. If the selector is null or omitted, the handler is always called when it reaches the selected element. / Data to be passed to the handler in event.data when an event occurs.
 * @param {function(!JQueryEventObject): ?|?=} handler_or_data A function to execute at the time the event is triggered. / A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false. / Data to be passed to the handler in event.data when an event is triggered. / Data to be passed to the handler in event.data when an event occurs.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false.
 * @return {!JQuery}
 */
JQuery.prototype.one = function(events, handler_or_data_or_selector, handler_or_data, handler) {};

/**
 * Specify a function to execute when the DOM is fully loaded.
 * 
 * @see {\@link https://api.jquery.com/ready/}
 * @param {function(!JQueryStatic): ?} handler A function to execute after the DOM is ready.
 * @return {!JQuery}
 */
JQuery.prototype.ready = function(handler) {};

/**
 * Trigger the "resize" event on an element.
 * @see {\@link https://api.jquery.com/resize/#resize}
 * Bind an event handler to the "resize" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/resize/#resize-handler}
 * Bind an event handler to the "resize" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/resize/#resize-eventData-handler}
 * @param {function(!JQueryEventObject): ?|!Object=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.resize = function(handler_or_eventData, handler) {};

/**
 * Trigger the "scroll" event on an element.
 * @see {\@link https://api.jquery.com/scroll/#scroll}
 * Bind an event handler to the "scroll" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/scroll/#scroll-handler}
 * Bind an event handler to the "scroll" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/scroll/#scroll-eventData-handler}
 * @param {function(!JQueryEventObject): ?|!Object=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.scroll = function(handler_or_eventData, handler) {};

/**
 * Trigger the "select" event on an element.
 * @see {\@link https://api.jquery.com/select/#select}
 * Bind an event handler to the "select" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/select/#select-handler}
 * Bind an event handler to the "select" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/select/#select-eventData-handler}
 * @param {function(!JQueryEventObject): ?|!Object=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.select = function(handler_or_eventData, handler) {};

/**
 * Trigger the "submit" event on an element.
 * @see {\@link https://api.jquery.com/submit/#submit}
 * Bind an event handler to the "submit" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/submit/#submit-handler}
 * Bind an event handler to the "submit" JavaScript event
 * 
 * @see {\@link https://api.jquery.com/submit/#submit-eventData-handler}
 * @param {function(!JQueryEventObject): ?|?=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.submit = function(handler_or_eventData, handler) {};

/**
 * Execute all handlers and behaviors attached to the matched elements for the given event type.
 * 
 * @see {\@link https://api.jquery.com/trigger/#trigger-eventType-extraParameters}
 * Execute all handlers and behaviors attached to the matched elements for the given event type.
 * 
 * @see {\@link https://api.jquery.com/trigger/#trigger-event-extraParameters}
 * @param {string|!JQueryEventObject} eventType_or_event A string containing a JavaScript event type, such as click or submit. / A jQuery.Event object.
 * @param {(!Object|!Array<?>)=} extraParameters Additional parameters to pass along to the event handler.
 * @return {!JQuery}
 */
JQuery.prototype.trigger = function(eventType_or_event, extraParameters) {};

/**
 * Execute all handlers attached to an element for an event.
 * 
 * @see {\@link https://api.jquery.com/triggerHandler/#triggerHandler-eventType-extraParameters}
 * Execute all handlers attached to an element for an event.
 * 
 * @see {\@link https://api.jquery.com/triggerHandler/#triggerHandler-event-extraParameters}
 * @param {string|!JQueryEventObject} eventType_or_event A string containing a JavaScript event type, such as click or submit. / A jQuery.Event object.
 * @param {...?} extraParameters An array of additional parameters to pass along to the event handler.
 * @return {!Object}
 */
JQuery.prototype.triggerHandler = function(eventType_or_event, extraParameters) {};

/**
 * Remove a previously-attached event handler from the elements.
 * 
 * @see {\@link https://api.jquery.com/unbind/#unbind-eventType-handler}
 * Remove a previously-attached event handler from the elements.
 * 
 * @see {\@link https://api.jquery.com/unbind/#unbind-eventType-false}
 * Remove a previously-attached event handler from the elements.
 * 
 * @see {\@link https://api.jquery.com/unbind/#unbind-event}
 * @param {string|?=} eventType_or_evt A string containing a JavaScript event type, such as click or submit. / A JavaScript event object as passed to an event handler.
 * @param {function(!JQueryEventObject): ?|boolean=} handler_or_fls The function that is to be no longer executed. / Unbinds the corresponding 'return false' function that was bound using .bind( eventType, false ).
 * @return {!JQuery}
 */
JQuery.prototype.unbind = function(eventType_or_evt, handler_or_fls) {};

/**
 * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
 * @see {\@link https://api.jquery.com/undelegate/#undelegate}
 * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
 * 
 * @see {\@link https://api.jquery.com/undelegate/#undelegate-selector-eventType}
 * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
 * 
 * @see {\@link https://api.jquery.com/undelegate/#undelegate-selector-events}
 * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
 * 
 * @see {\@link https://api.jquery.com/undelegate/#undelegate-namespace}
 * @param {string=} selector_or_namespace A selector which will be used to filter the event results. / A string containing a namespace to unbind all events from.
 * @param {string|!Object=} eventType_or_events A string containing a JavaScript event type, such as "click" or "keydown" / An object of one or more event types and previously bound functions to unbind from them.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute at the time the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.undelegate = function(selector_or_namespace, eventType_or_events, handler) {};

/**
 * Bind an event handler to the "unload" JavaScript event. (DEPRECATED from v1.8)
 * 
 * @see {\@link https://api.jquery.com/unload/#unload-handler}
 * Bind an event handler to the "unload" JavaScript event. (DEPRECATED from v1.8)
 * 
 * @see {\@link https://api.jquery.com/unload/#unload-eventData-handler}
 * @param {function(!JQueryEventObject): ?|?=} handler_or_eventData A function to execute when the event is triggered. / A plain object of data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute when the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.unload = function(handler_or_eventData, handler) {};

/**
 * Bind an event handler to the "error" JavaScript event. (DEPRECATED from v1.8)
 * 
 * @see {\@link https://api.jquery.com/error/#error-handler}
 * Bind an event handler to the "error" JavaScript event. (DEPRECATED from v1.8)
 * 
 * @see {\@link https://api.jquery.com/error/#error-eventData-handler}
 * @param {function(!JQueryEventObject): ?|?} handler_or_eventData A function to execute when the event is triggered. / A plain object of data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute when the event is triggered.
 * @return {!JQuery}
 */
JQuery.prototype.error = function(handler_or_eventData, handler) {};

/**
 * Add a collection of DOM elements onto the jQuery stack.
 * 
 * @see {\@link https://api.jquery.com/pushStack/#pushStack-elements}
 * Add a collection of DOM elements onto the jQuery stack.
 * 
 * @see {\@link https://api.jquery.com/pushStack/#pushStack-elements-name-arguments}
 * @param {!Array<?>} elements An array of elements to push onto the stack and make into a new jQuery object.
 * @param {string=} name The name of a jQuery method that generated the array of elements.
 * @param {!Array<?>=} tsickle_arguments
 * @return {!JQuery}
 */
JQuery.prototype.pushStack = function(elements, name, tsickle_arguments) {};

/**
 * Insert content, specified by the parameter, after each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/after/#after-content-content}
 * Insert content, specified by the parameter, after each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/after/#after-function}
 * @param {(string|!Array<?>|!Element|!JQuery|!DocumentFragment|!Text)|function(number, string): (string|!Element|!JQuery)} content1_or_func HTML string, DOM element, DocumentFragment, array of elements, or jQuery object to insert after each element in the set of matched elements. / A function that returns an HTML string, DOM element(s), or jQuery object to insert after each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.
 * @param {...?} content2 One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert after each element in the set of matched elements.
 * @return {!JQuery}
 */
JQuery.prototype.after = function(content1_or_func, content2) {};

/**
 * Insert content, specified by the parameter, to the end of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/append/#append-content-content}
 * Insert content, specified by the parameter, to the end of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/append/#append-function}
 * @param {(string|!Array<?>|!Element|!JQuery|!DocumentFragment|!Text)|function(number, string): (string|!Element|!JQuery)} content1_or_func DOM element, DocumentFragment, array of elements, HTML string, or jQuery object to insert at the end of each element in the set of matched elements. / A function that returns an HTML string, DOM element(s), or jQuery object to insert at the end of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.
 * @param {...?} content2 One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert at the end of each element in the set of matched elements.
 * @return {!JQuery}
 */
JQuery.prototype.append = function(content1_or_func, content2) {};

/**
 * Insert every element in the set of matched elements to the end of the target.
 * 
 * @see {\@link https://api.jquery.com/appendTo/}
 * @param {(string|!Array<?>|!Element|!JQuery)} target A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the end of the element(s) specified by this parameter.
 * @return {!JQuery}
 */
JQuery.prototype.appendTo = function(target) {};

/**
 * Insert content, specified by the parameter, before each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/before/#before-content-content}
 * Insert content, specified by the parameter, before each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/before/#before-function}
 * @param {(string|!Array<?>|!Element|!JQuery|!DocumentFragment|!Text)|function(number, string): (string|!Element|!JQuery)} content1_or_func HTML string, DOM element, DocumentFragment, array of elements, or jQuery object to insert before each element in the set of matched elements. / A function that returns an HTML string, DOM element(s), or jQuery object to insert before each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.
 * @param {...?} content2 One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert before each element in the set of matched elements.
 * @return {!JQuery}
 */
JQuery.prototype.before = function(content1_or_func, content2) {};

/**
 * Create a deep copy of the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/clone/}
 * @param {boolean=} withDataAndEvents A Boolean indicating whether event handlers and data should be copied along with the elements. The default value is false.
 * @param {boolean=} deepWithDataAndEvents A Boolean indicating whether event handlers and data for all children of the cloned element should be copied. By default its value matches the first argument's value (which defaults to false).
 * @return {!JQuery}
 */
JQuery.prototype.clone = function(withDataAndEvents, deepWithDataAndEvents) {};

/**
 * Remove the set of matched elements from the DOM.
 * 
 * @see {\@link https://api.jquery.com/detach/}
 * @param {string=} selector A selector expression that filters the set of matched elements to be removed.
 * @return {!JQuery}
 */
JQuery.prototype.detach = function(selector) {};

/**
 * Remove all child nodes of the set of matched elements from the DOM.
 * @see {\@link https://api.jquery.com/empty/}
 * @return {!JQuery}
 */
JQuery.prototype.empty = function() {};

/**
 * Insert every element in the set of matched elements after the target.
 * 
 * @see {\@link https://api.jquery.com/insertAfter/}
 * @param {(string|!Array<?>|!Element|!JQuery|!Text)} target A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted after the element(s) specified by this parameter.
 * @return {!JQuery}
 */
JQuery.prototype.insertAfter = function(target) {};

/**
 * Insert every element in the set of matched elements before the target.
 * 
 * @see {\@link https://api.jquery.com/insertBefore/}
 * @param {(string|!Array<?>|!Element|!JQuery|!Text)} target A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted before the element(s) specified by this parameter.
 * @return {!JQuery}
 */
JQuery.prototype.insertBefore = function(target) {};

/**
 * Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/prepend/#prepend-content-content}
 * Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/prepend/#prepend-function}
 * @param {(string|!Array<?>|!Element|!JQuery|!DocumentFragment|!Text)|function(number, string): (string|!Element|!JQuery)} content1_or_func DOM element, DocumentFragment, array of elements, HTML string, or jQuery object to insert at the beginning of each element in the set of matched elements. / A function that returns an HTML string, DOM element(s), or jQuery object to insert at the beginning of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.
 * @param {...?} content2 One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert at the beginning of each element in the set of matched elements.
 * @return {!JQuery}
 */
JQuery.prototype.prepend = function(content1_or_func, content2) {};

/**
 * Insert every element in the set of matched elements to the beginning of the target.
 * 
 * @see {\@link https://api.jquery.com/prependTo/}
 * @param {(string|!Array<?>|!Element|!JQuery)} target A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the beginning of the element(s) specified by this parameter.
 * @return {!JQuery}
 */
JQuery.prototype.prependTo = function(target) {};

/**
 * Remove the set of matched elements from the DOM.
 * 
 * @see {\@link https://api.jquery.com/remove/}
 * @param {string=} selector A selector expression that filters the set of matched elements to be removed.
 * @return {!JQuery}
 */
JQuery.prototype.remove = function(selector) {};

/**
 * Replace each target element with the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/replaceAll/}
 * @param {(string|!Array<?>|!Element|!JQuery)} target A selector string, jQuery object, DOM element, or array of elements indicating which element(s) to replace.
 * @return {!JQuery}
 */
JQuery.prototype.replaceAll = function(target) {};

/**
 * Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.
 * 
 * @see {\@link https://api.jquery.com/replaceWith/#replaceWith-newContent}
 * Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.
 * 
 * @see {\@link https://api.jquery.com/replaceWith/#replaceWith-function}
 * @param {(string|!Array<?>|!Element|!JQuery|!Text)|function(): (!Element|!JQuery)} newContent_or_func The content to insert. May be an HTML string, DOM element, array of DOM elements, or jQuery object. / A function that returns content with which to replace the set of matched elements.
 * @return {!JQuery}
 */
JQuery.prototype.replaceWith = function(newContent_or_func) {};

/**
 * Get the combined text contents of each element in the set of matched elements, including their descendants.
 * @see {\@link https://api.jquery.com/text/#text}
 * Set the content of each element in the set of matched elements to the specified text.
 * 
 * @see {\@link https://api.jquery.com/text/#text-text}
 * Set the content of each element in the set of matched elements to the specified text.
 * 
 * @see {\@link https://api.jquery.com/text/#text-function}
 * @param {(string|number|boolean)|function(number, string): string=} text_or_func The text to set as the content of each matched element. When Number or Boolean is supplied, it will be converted to a String representation. / A function returning the text content to set. Receives the index position of the element in the set and the old text value as arguments.
 * @return {string|!JQuery}
 */
JQuery.prototype.text = function(text_or_func) {};

/**
 * Retrieve all the elements contained in the jQuery set, as an array.
 * \@name toArray
 * @see {\@link https://api.jquery.com/toArray/}
 * @return {!Array<!HTMLElement>}
 */
JQuery.prototype.toArray = function() {};

/**
 * Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.
 * @see {\@link https://api.jquery.com/unwrap/}
 * @return {!JQuery}
 */
JQuery.prototype.unwrap = function() {};

/**
 * Wrap an HTML structure around each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/wrap/#wrap-wrappingElement}
 * Wrap an HTML structure around each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/wrap/#wrap-function}
 * @param {(string|!Element|!JQuery)|function(number): (string|!JQuery)} wrappingElement_or_func A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements. / A callback function returning the HTML content or jQuery object to wrap around the matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.
 * @return {!JQuery}
 */
JQuery.prototype.wrap = function(wrappingElement_or_func) {};

/**
 * Wrap an HTML structure around all elements in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/wrapAll/#wrapAll-wrappingElement}
 * Wrap an HTML structure around all elements in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/wrapAll/#wrapAll-function}
 * @param {(string|!Element|!JQuery)|function(number): string} wrappingElement_or_func A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements. / A callback function returning the HTML content or jQuery object to wrap around all the matched elements. Within the function, this refers to the first element in the set.
 * @return {!JQuery}
 */
JQuery.prototype.wrapAll = function(wrappingElement_or_func) {};

/**
 * Wrap an HTML structure around the content of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/wrapInner/#wrapInner-wrappingElement}
 * Wrap an HTML structure around the content of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/wrapInner/#wrapInner-function}
 * @param {(string|!Element|!JQuery)|function(number): string} wrappingElement_or_func An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the content of the matched elements. / A callback function which generates a structure to wrap around the content of the matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.
 * @return {!JQuery}
 */
JQuery.prototype.wrapInner = function(wrappingElement_or_func) {};

/**
 * Iterate over a jQuery object, executing a function for each matched element.
 * 
 * @see {\@link https://api.jquery.com/each/}
 * @param {function(number, !Element): (boolean|void)} func A function to execute for each matched element. Can stop the loop by returning false.
 * @return {!JQuery}
 */
JQuery.prototype.each = function(func) {};

/**
 * Retrieve one of the elements matched by the jQuery object.
 * 
 * @see {\@link https://api.jquery.com/get/#get-index}
 * Retrieve the elements matched by the jQuery object.
 * \@alias toArray
 * @see {\@link https://api.jquery.com/get/#get}
 * @param {number=} index A zero-based integer indicating which element to retrieve.
 * @return {!HTMLElement|!Array<!HTMLElement>}
 */
JQuery.prototype.get = function(index) {};

/**
 * Search for a given element from among the matched elements.
 * @see {\@link https://api.jquery.com/index/#index}
 * Search for a given element from among the matched elements.
 * 
 * @see {\@link https://api.jquery.com/index/#index-selector}
 * @param {(string|!Element|!JQuery)=} selector A selector representing a jQuery collection in which to look for an element.
 * @return {number}
 */
JQuery.prototype.index = function(selector) {};

/**
 * Add elements to the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/add/#add-selector}
 * Add elements to the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/add/#add-elements}
 * Add elements to the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/add/#add-html}
 * Add elements to the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/add/#add-selection}
 * @param {...string|!Element|!JQuery} selector_or_elements_or_html_or_obj A string representing a selector expression to find additional elements to add to the set of matched elements. / One or more elements to add to the set of matched elements. / An HTML fragment to add to the set of matched elements. / An existing jQuery object to add to the set of matched elements.
 * @return {!JQuery}
 */
JQuery.prototype.add = function(selector_or_elements_or_html_or_obj) {};

/**
 * Get the children of each element in the set of matched elements, optionally filtered by a selector.
 * 
 * @see {\@link https://api.jquery.com/children/}
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {!JQuery}
 */
JQuery.prototype.children = function(selector) {};

/**
 * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
 * 
 * @see {\@link https://api.jquery.com/closest/#closest-selector}
 * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
 * 
 * @see {\@link https://api.jquery.com/closest/#closest-selector-context}
 * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
 * 
 * @see {\@link https://api.jquery.com/closest/#closest-selection}
 * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
 * 
 * @see {\@link https://api.jquery.com/closest/#closest-element}
 * Get an array of all the elements and selectors matched against the current element up through the DOM tree.
 * 
 * @see {\@link https://api.jquery.com/closest/#closest-selectors-context}
 * @param {string|!JQuery|!Element|?} selector_or_obj_or_element_or_selectors A string containing a selector expression to match elements against. / A jQuery object to match elements against. / An element to match elements against. / An array or string containing a selector expression to match elements against (can also be a jQuery object).
 * @param {!Element=} context A DOM element within which a matching element may be found. If no context is passed in then the context of the jQuery set will be used instead.
 * @return {!JQuery|!Array<?>}
 */
JQuery.prototype.closest = function(selector_or_obj_or_element_or_selectors, context) {};

/**
 * Get the children of each element in the set of matched elements, including text and comment nodes.
 * @see {\@link https://api.jquery.com/contents/}
 * @return {!JQuery}
 */
JQuery.prototype.contents = function() {};

/**
 * End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.
 * @see {\@link https://api.jquery.com/end/}
 * @return {!JQuery}
 */
JQuery.prototype.end = function() {};

/**
 * Reduce the set of matched elements to the one at the specified index.
 * 
 * @see {\@link https://api.jquery.com/eq/}
 * @param {number} index An integer indicating the 0-based position of the element. OR An integer indicating the position of the element, counting backwards from the last element in the set.
 * @return {!JQuery}
 */
JQuery.prototype.eq = function(index) {};

/**
 * Reduce the set of matched elements to those that match the selector or pass the function's test.
 * 
 * @see {\@link https://api.jquery.com/filter/#filter-selector}
 * Reduce the set of matched elements to those that match the selector or pass the function's test.
 * 
 * @see {\@link https://api.jquery.com/filter/#filter-function}
 * Reduce the set of matched elements to those that match the selector or pass the function's test.
 * 
 * @see {\@link https://api.jquery.com/filter/#filter-elements}
 * Reduce the set of matched elements to those that match the selector or pass the function's test.
 * 
 * @see {\@link https://api.jquery.com/filter/#filter-selection}
 * @param {string|function(number, !Element): boolean|!Element|!JQuery} selector_or_func_or_element_or_obj A string containing a selector expression to match the current set of elements against. / A function used as a test for each element in the set. this is the current DOM element. / An element to match the current set of elements against. / An existing jQuery object to match the current set of elements against.
 * @return {!JQuery}
 */
JQuery.prototype.filter = function(selector_or_func_or_element_or_obj) {};

/**
 * Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.
 * 
 * @see {\@link https://api.jquery.com/find/#find-selector}
 * Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.
 * 
 * @see {\@link https://api.jquery.com/find/#find-element}
 * Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.
 * 
 * @see {\@link https://api.jquery.com/find/#find-element}
 * @param {string|!Element|!JQuery} selector_or_element_or_obj A string containing a selector expression to match elements against. / An element to match elements against. / A jQuery object to match elements against.
 * @return {!JQuery}
 */
JQuery.prototype.find = function(selector_or_element_or_obj) {};

/**
 * Reduce the set of matched elements to the first in the set.
 * @see {\@link https://api.jquery.com/first/}
 * @return {!JQuery}
 */
JQuery.prototype.first = function() {};

/**
 * Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.
 * 
 * @see {\@link https://api.jquery.com/has/#has-selector}
 * Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.
 * 
 * @see {\@link https://api.jquery.com/has/#has-contained}
 * @param {string|!Element} selector_or_contained A string containing a selector expression to match elements against. / A DOM element to match elements against.
 * @return {!JQuery}
 */
JQuery.prototype.has = function(selector_or_contained) {};

/**
 * Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.
 * 
 * @see {\@link https://api.jquery.com/is/#is-selector}
 * Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.
 * 
 * @see {\@link https://api.jquery.com/is/#is-function}
 * Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.
 * 
 * @see {\@link https://api.jquery.com/is/#is-selection}
 * Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.
 * 
 * @see {\@link https://api.jquery.com/is/#is-elements}
 * @param {string|function(number, !Element): boolean|!JQuery|?} selector_or_func_or_obj_or_elements A string containing a selector expression to match elements against. / A function used as a test for the set of elements. It accepts one argument, index, which is the element's index in the jQuery collection.Within the function, this refers to the current DOM element. / An existing jQuery object to match the current set of elements against. / One or more elements to match the current set of elements against.
 * @return {boolean}
 */
JQuery.prototype.is = function(selector_or_func_or_obj_or_elements) {};

/**
 * Reduce the set of matched elements to the final one in the set.
 * @see {\@link https://api.jquery.com/last/}
 * @return {!JQuery}
 */
JQuery.prototype.last = function() {};

/**
 * Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.
 * 
 * @see {\@link https://api.jquery.com/map/}
 * @param {function(number, !Element): ?} callback A function object that will be invoked for each element in the current set.
 * @return {!JQuery}
 */
JQuery.prototype.map = function(callback) {};

/**
 * Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.
 * 
 * @see {\@link https://api.jquery.com/next/}
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {!JQuery}
 */
JQuery.prototype.next = function(selector) {};

/**
 * Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.
 * 
 * @see {\@link https://api.jquery.com/nextAll/}
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {!JQuery}
 */
JQuery.prototype.nextAll = function(selector) {};

/**
 * Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.
 * 
 * @see {\@link https://api.jquery.com/nextUntil/#nextUntil-selector-filter}
 * Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.
 * 
 * @see {\@link https://api.jquery.com/nextUntil/#nextUntil-element-filter}
 * Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.
 * 
 * @see {\@link https://api.jquery.com/nextUntil/#nextUntil-element-filter}
 * @param {string|!Element|!JQuery=} selector_or_element_or_obj A string containing a selector expression to indicate where to stop matching following sibling elements. / A DOM node or jQuery object indicating where to stop matching following sibling elements.
 * @param {string=} filter A string containing a selector expression to match elements against.
 * @return {!JQuery}
 */
JQuery.prototype.nextUntil = function(selector_or_element_or_obj, filter) {};

/**
 * Remove elements from the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/not/#not-selector}
 * Remove elements from the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/not/#not-function}
 * Remove elements from the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/not/#not-selection}
 * Remove elements from the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/not/#not-selection}
 * @param {string|function(number, !Element): boolean|(!Element|!Array<!Element>)|!JQuery} selector_or_func_or_elements_or_obj A string containing a selector expression to match elements against. / A function used as a test for each element in the set. this is the current DOM element. / One or more DOM elements to remove from the matched set. / An existing jQuery object to match the current set of elements against.
 * @return {!JQuery}
 */
JQuery.prototype.not = function(selector_or_func_or_elements_or_obj) {};

/**
 * Get the closest ancestor element that is positioned.
 * @see {\@link https://api.jquery.com/offsetParent/}
 * @return {!JQuery}
 */
JQuery.prototype.offsetParent = function() {};

/**
 * Get the parent of each element in the current set of matched elements, optionally filtered by a selector.
 * 
 * @see {\@link https://api.jquery.com/parent/}
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {!JQuery}
 */
JQuery.prototype.parent = function(selector) {};

/**
 * Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.
 * 
 * @see {\@link https://api.jquery.com/parents/}
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {!JQuery}
 */
JQuery.prototype.parents = function(selector) {};

/**
 * Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.
 * 
 * @see {\@link https://api.jquery.com/parentsUntil/#parentsUntil-selector-filter}
 * Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.
 * 
 * @see {\@link https://api.jquery.com/parentsUntil/#parentsUntil-element-filter}
 * Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.
 * 
 * @see {\@link https://api.jquery.com/parentsUntil/#parentsUntil-element-filter}
 * @param {string|!Element|!JQuery=} selector_or_element_or_obj A string containing a selector expression to indicate where to stop matching ancestor elements. / A DOM node or jQuery object indicating where to stop matching ancestor elements.
 * @param {string=} filter A string containing a selector expression to match elements against.
 * @return {!JQuery}
 */
JQuery.prototype.parentsUntil = function(selector_or_element_or_obj, filter) {};

/**
 * Get the immediately preceding sibling of each element in the set of matched elements, optionally filtered by a selector.
 * 
 * @see {\@link https://api.jquery.com/prev/}
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {!JQuery}
 */
JQuery.prototype.prev = function(selector) {};

/**
 * Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.
 * 
 * @see {\@link https://api.jquery.com/prevAll/}
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {!JQuery}
 */
JQuery.prototype.prevAll = function(selector) {};

/**
 * Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.
 * 
 * @see {\@link https://api.jquery.com/prevUntil/#prevUntil-selector-filter}
 * Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.
 * 
 * @see {\@link https://api.jquery.com/prevUntil/#prevUntil-element-filter}
 * Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.
 * 
 * @see {\@link https://api.jquery.com/prevUntil/#prevUntil-element-filter}
 * @param {string|!Element|!JQuery=} selector_or_element_or_obj A string containing a selector expression to indicate where to stop matching preceding sibling elements. / A DOM node or jQuery object indicating where to stop matching preceding sibling elements.
 * @param {string=} filter A string containing a selector expression to match elements against.
 * @return {!JQuery}
 */
JQuery.prototype.prevUntil = function(selector_or_element_or_obj, filter) {};

/**
 * Get the siblings of each element in the set of matched elements, optionally filtered by a selector.
 * 
 * @see {\@link https://api.jquery.com/siblings/}
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {!JQuery}
 */
JQuery.prototype.siblings = function(selector) {};

/**
 * Reduce the set of matched elements to a subset specified by a range of indices.
 * 
 * @see {\@link https://api.jquery.com/slice/}
 * @param {number} start An integer indicating the 0-based position at which the elements begin to be selected. If negative, it indicates an offset from the end of the set.
 * @param {number=} end An integer indicating the 0-based position at which the elements stop being selected. If negative, it indicates an offset from the end of the set. If omitted, the range continues until the end of the set.
 * @return {!JQuery}
 */
JQuery.prototype.slice = function(start, end) {};

/**
 * Show the queue of functions to be executed on the matched elements.
 * 
 * @see {\@link https://api.jquery.com/queue/#queue-queueName}
 * Manipulate the queue of functions to be executed, once for each matched element.
 * 
 * @see {\@link https://api.jquery.com/queue/#queue-queueName-newQueue}
 * Manipulate the queue of functions to be executed, once for each matched element.
 * 
 * @see {\@link https://api.jquery.com/queue/#queue-queueName-callback}
 * Manipulate the queue of functions to be executed, once for each matched element.
 * 
 * @see {\@link https://api.jquery.com/queue/#queue-queueName-newQueue}
 * Manipulate the queue of functions to be executed, once for each matched element.
 * 
 * @see {\@link https://api.jquery.com/queue/#queue-queueName-callback}
 * @param {string|!Array<!Function>|!Function=} queueName_or_newQueue_or_callback A string containing the name of the queue. Defaults to fx, the standard effects queue. / An array of functions to replace the current queue contents. / The new function to add to the queue, with a function to call that will dequeue the next item.
 * @param {!Array<!Function>|!Function=} newQueue_or_callback An array of functions to replace the current queue contents. / The new function to add to the queue, with a function to call that will dequeue the next item.
 * @return {!Array<?>|!JQuery}
 */
JQuery.prototype.queue = function(queueName_or_newQueue_or_callback, newQueue_or_callback) {};

/**
 * Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods.
 * 
 * @see {\@link https://api.jquery.com/jQuery.fn.extend/#jQuery-fn-extend-object}
 * @param {!Object<string,function(!Array<?>): ?>} object An object to merge onto the jQuery prototype.
 * @return {!JQuery}
 */
JQuery.prototype.extend = function(object) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "jquery"
/** @const */
tsickle_declare_module.jquery = {};

/* TODO: ExportAssignment in tsickle_declare_module.jquery */
 /** @type {!JQueryStatic} */
var jQuery;
 /** @type {!JQueryStatic} */
var $;
