/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/qlik/index.d.ts:

/* TODO: ImportDeclaration in  */
/**
 * @record
 * @struct
 */
function Size() {}
 /** @type {number} */
Size.prototype.qcx;
 /** @type {number} */
Size.prototype.qcy;
/**
 * @record
 * @struct
 */
function NxValidationError() {}
 /** @type {number} */
NxValidationError.prototype.qErrorCode;
 /** @type {string} */
NxValidationError.prototype.qContext;
 /** @type {string} */
NxValidationError.prototype.qExtendedMessage;
/**
 * @record
 * @struct
 */
function NxStateCounts() {}
 /** @type {number} */
NxStateCounts.prototype.qLocked;
 /** @type {number} */
NxStateCounts.prototype.qSelected;
 /** @type {number} */
NxStateCounts.prototype.qOption;
 /** @type {number} */
NxStateCounts.prototype.qDeselected;
 /** @type {number} */
NxStateCounts.prototype.qAlternative;
 /** @type {number} */
NxStateCounts.prototype.qExcluded;
 /** @type {number} */
NxStateCounts.prototype.qSelectedExcluded;
 /** @type {number} */
NxStateCounts.prototype.qLockedExcluded;
/**
 * @record
 * @struct
 */
function FieldAttributes() {}
 /** @type {string} */
FieldAttributes.prototype.qType;
 /** @type {number} */
FieldAttributes.prototype.qnDec;
 /** @type {number} */
FieldAttributes.prototype.qUseThou;
 /** @type {string} */
FieldAttributes.prototype.qFmt;
 /** @type {string} */
FieldAttributes.prototype.qDec;
 /** @type {string} */
FieldAttributes.prototype.qThou;
 /** @type {!Array<?>} */
FieldAttributes.prototype.qSAFEARRAY;
/**
 * @record
 * @struct
 */
function CharRange() {}
 /** @type {number} */
CharRange.prototype.qCharPos;
 /** @type {number} */
CharRange.prototype.qCharCount;
/**
 * @record
 * @struct
 */
function NxHighlightRanges() {}
 /** @type {!Array<?>} */
NxHighlightRanges.prototype.qRanges;
/**
 * @record
 * @struct
 */
function NxSimpleValue() {}
 /** @type {string} */
NxSimpleValue.prototype.qText;
 /** @type {number} */
NxSimpleValue.prototype.qNum;
/**
 * @record
 * @struct
 */
function NxAttributeExpressionValues() {}
 /** @type {!Array<?>} */
NxAttributeExpressionValues.prototype.qValues;

/** @typedef {!Array<?>} */
var NxCellRows;
/**
 * @record
 * @struct
 */
function NxGroupTail() {}
 /** @type {number} */
NxGroupTail.prototype.qUp;
 /** @type {number} */
NxGroupTail.prototype.qDown;
/**
 * @record
 * @struct
 */
function Rect() {}
 /** @type {number} */
Rect.prototype.qLeft;
 /** @type {number} */
Rect.prototype.qTop;
 /** @type {number} */
Rect.prototype.qWdith;
 /** @type {number} */
Rect.prototype.qHeight;
/**
 * @record
 * @struct
 */
function NxPivotDimensioncell() {}
 /** @type {string} */
NxPivotDimensioncell.prototype.qText;
 /** @type {number} */
NxPivotDimensioncell.prototype.qElemNo;
 /** @type {number} */
NxPivotDimensioncell.prototype.qValue;
 /** @type {boolean} */
NxPivotDimensioncell.prototype.qCanExpand;
 /** @type {boolean} */
NxPivotDimensioncell.prototype.qCanCollapse;
 /** @type {string} */
NxPivotDimensioncell.prototype.qType;
 /** @type {number} */
NxPivotDimensioncell.prototype.qUp;
 /** @type {number} */
NxPivotDimensioncell.prototype.qDown;
 /** @type {!Array<?>} */
NxPivotDimensioncell.prototype.qSubNodes;
 /** @type {!Array<?>} */
NxPivotDimensioncell.prototype.qAttrExps;
 /** @type {!Array<?>} */
NxPivotDimensioncell.prototype.qAttrDims;
/**
 * @record
 * @struct
 */
function NxPivotValuePoint() {}
 /** @type {string} */
NxPivotValuePoint.prototype.qLabel;
 /** @type {string} */
NxPivotValuePoint.prototype.qText;
 /** @type {number} */
NxPivotValuePoint.prototype.qNum;
 /** @type {string} */
NxPivotValuePoint.prototype.qType;
 /** @type {?} */
NxPivotValuePoint.prototype.qAttrExps;
/**
 * @record
 * @struct
 */
function NxPivotPage() {}
 /** @type {!Array<?>} */
NxPivotPage.prototype.qLeft;
 /** @type {!Array<?>} */
NxPivotPage.prototype.qTop;
 /** @type {!Array<?>} */
NxPivotPage.prototype.qData;
 /** @type {?} */
NxPivotPage.prototype.qArea;
/**
 * @record
 * @struct
 */
function NxStackedPivotCell() {}
 /** @type {string} */
NxStackedPivotCell.prototype.qText;
 /** @type {number} */
NxStackedPivotCell.prototype.qElemNo;
 /** @type {number} */
NxStackedPivotCell.prototype.qValue;
 /** @type {boolean} */
NxStackedPivotCell.prototype.qCanExpand;
 /** @type {boolean} */
NxStackedPivotCell.prototype.qCanCollapse;
 /** @type {string} */
NxStackedPivotCell.prototype.qType;
 /** @type {number} */
NxStackedPivotCell.prototype.qMaxPos;
 /** @type {number} */
NxStackedPivotCell.prototype.qMinNeg;
 /** @type {number} */
NxStackedPivotCell.prototype.qUp;
 /** @type {number} */
NxStackedPivotCell.prototype.qDown;
 /** @type {number} */
NxStackedPivotCell.prototype.qRow;
 /** @type {!Array<?>} */
NxStackedPivotCell.prototype.qSubNodes;
 /** @type {?} */
NxStackedPivotCell.prototype.qAttrExps;
 /** @type {?} */
NxStackedPivotCell.prototype.qAttrDims;
/**
 * @record
 * @struct
 */
function NxStackPage() {}
 /** @type {!Array<?>} */
NxStackPage.prototype.qData;
 /** @type {?} */
NxStackPage.prototype.qArea;
/**
 * @record
 * @struct
 */
function NxCellPosition() {}
 /** @type {number} */
NxCellPosition.prototype.qx;
 /** @type {number} */
NxCellPosition.prototype.qy;
/**
 * @record
 * @struct
 */
function NxDataPage() {}
 /** @type {!Array<!Array<?>>} */
NxDataPage.prototype.qMatrix;
 /** @type {!Array<?>} */
NxDataPage.prototype.qTails;
 /** @type {?} */
NxDataPage.prototype.qArea;
 /** @type {boolean} */
NxDataPage.prototype.qIsReduced;
/**
 * @record
 * @struct
 */
function NxAttributeDimValues() {}
 /** @type {!Array<?>} */
NxAttributeDimValues.prototype.qValues;
/**
 * @record
 * @struct
 */
function NxSimpleDimValue() {}
 /** @type {string} */
NxSimpleDimValue.prototype.qText;
 /** @type {number} */
NxSimpleDimValue.prototype.qElemNo;
/**
 * @record
 * @struct
 */
function NxCell() {}
 /** @type {string} */
NxCell.prototype.qText;
 /** @type {number} */
NxCell.prototype.qNum;
 /** @type {number} */
NxCell.prototype.qElemNumber;
 /** @type {string} */
NxCell.prototype.qState;
 /** @type {boolean} */
NxCell.prototype.qIsEmpty;
 /** @type {boolean} */
NxCell.prototype.qIsTotalCell;
 /** @type {boolean} */
NxCell.prototype.qIsOtherCell;
 /** @type {string} */
NxCell.prototype.qFrequency;
 /** @type {?} */
NxCell.prototype.qHighlightRanges;
 /** @type {?} */
NxCell.prototype.qAttrExps;
 /** @type {boolean} */
NxCell.prototype.qIsNull;
 /** @type {?} */
NxCell.prototype.qAttrDims;
/**
 * @record
 * @struct
 */
function NxAttrExprInfo() {}
 /** @type {number} */
NxAttrExprInfo.prototype.qMin;
 /** @type {number} */
NxAttrExprInfo.prototype.qMax;
 /** @type {boolean} */
NxAttrExprInfo.prototype.qContinuousAxes;
 /** @type {boolean} */
NxAttrExprInfo.prototype.qIsCyclic;
 /** @type {string} */
NxAttrExprInfo.prototype.qFallbackTitle;
/**
 * @record
 * @struct
 */
function NxAttrDimInfo() {}
 /** @type {number} */
NxAttrDimInfo.prototype.qCardinal;
 /** @type {?} */
NxAttrDimInfo.prototype.qSize;
 /** @type {string} */
NxAttrDimInfo.prototype.qFallbackTitle;
 /** @type {boolean} */
NxAttrDimInfo.prototype.qLocked;
 /** @type {?} */
NxAttrDimInfo.prototype.qError;
/**
 * @record
 * @struct
 */
function ColumnInfo() {}
 /** @type {string} */
ColumnInfo.prototype.qFallbackTitle;
 /** @type {number} */
ColumnInfo.prototype.qApprMaxGlyphCount;
 /** @type {string} */
ColumnInfo.prototype.qCardinal;
 /** @type {string} */
ColumnInfo.prototype.qSortIndicator;
 /** @type {?} */
ColumnInfo.prototype.qNumFormat;
 /** @type {boolean} */
ColumnInfo.prototype.qIsAutoFormat;
 /** @type {number} */
ColumnInfo.prototype.qMin;
 /** @type {number} */
ColumnInfo.prototype.qMax;
 /** @type {?} */
ColumnInfo.prototype.qError;
 /** @type {boolean} */
ColumnInfo.prototype.qReverseSort;
 /** @type {!Array<?>} */
ColumnInfo.prototype.qAttrExprInfo;
 /** @type {!Array<?>} */
ColumnInfo.prototype.qAttrDimInfo;
/**
 * @extends {ColumnInfo}
 * @record
 * @struct
 */
function NxDimensionInfo() {}
 /** @type {string} */
NxDimensionInfo.prototype.qLocker;
 /** @type {!Array<string>} */
NxDimensionInfo.prototype.qGroupFallbackTitles;
 /** @type {number} */
NxDimensionInfo.prototype.qGroupPos;
 /** @type {?} */
NxDimensionInfo.prototype.qStateCounts;
 /** @type {!Array<string>} */
NxDimensionInfo.prototype.qTags;
 /** @type {string} */
NxDimensionInfo.prototype.qDimensionType;
 /** @type {string} */
NxDimensionInfo.prototype.qGrouping;
 /** @type {boolean} */
NxDimensionInfo.prototype.qIsSemantic;
 /** @type {!Array<string>} */
NxDimensionInfo.prototype.qGroupFieldDefs;
 /** @type {boolean} */
NxDimensionInfo.prototype.qContinuousAxes;
 /** @type {boolean} */
NxDimensionInfo.prototype.qIsCyclic;
 /** @type {boolean} */
NxDimensionInfo.prototype.qDerivedField;

/** @typedef {?} */
var NxMeasureInfo;
/**
 * @record
 * @struct
 */
function HyperCube() {}
 /** @type {string} */
HyperCube.prototype.qStateName;
 /** @type {?} */
HyperCube.prototype.qSize;
 /** @type {?} */
HyperCube.prototype.qError;
 /** @type {!Array<?>} */
HyperCube.prototype.qDimensionInfo;
 /** @type {!Array<?>} */
HyperCube.prototype.qMeasureInfo;
 /** @type {!Array<number>} */
HyperCube.prototype.qEffectiveInterColumnSortOrder;
 /** @type {!Array<?>} */
HyperCube.prototype.qGrandTotalRow;
 /** @type {!Array<?>} */
HyperCube.prototype.qDataPages;
 /** @type {!Array<?>} */
HyperCube.prototype.qPivotDataPages;
 /** @type {!Array<?>} */
HyperCube.prototype.qStackedDataPages;
 /** @type {string} */
HyperCube.prototype.qMode;
 /** @type {number} */
HyperCube.prototype.qNoOfLeftDims;
 /** @type {boolean} */
HyperCube.prototype.qIndentMode;
 /** @type {?} */
HyperCube.prototype.qLastExpandedPos;
 /** @type {boolean} */
HyperCube.prototype.qHasOtherValues;
/**
 * @record
 * @struct
 */
function NxInfo() {}
 /** @type {string} */
NxInfo.prototype.qId;
 /** @type {string} */
NxInfo.prototype.qType;
/**
 * @record
 * @struct
 */
function NxCurrentSelectionItem() {}
 /** @type {number} */
NxCurrentSelectionItem.prototype.qTotal;
 /** @type {boolean} */
NxCurrentSelectionItem.prototype.qIsNum;
 /** @type {string} */
NxCurrentSelectionItem.prototype.qField;
 /** @type {boolean} */
NxCurrentSelectionItem.prototype.qLocked;
 /** @type {boolean} */
NxCurrentSelectionItem.prototype.qOneAndOnlyOne;
 /** @type {string} */
NxCurrentSelectionItem.prototype.qTextSearch;
 /** @type {number} */
NxCurrentSelectionItem.prototype.qSelectedCount;
 /** @type {string} */
NxCurrentSelectionItem.prototype.qSelected;
 /** @type {!Array<?>} */
NxCurrentSelectionItem.prototype.qRangeInfo;
 /** @type {number} */
NxCurrentSelectionItem.prototype.qSortIndex;
 /** @type {?} */
NxCurrentSelectionItem.prototype.qStateCounts;
 /** @type {!Array<?>} */
NxCurrentSelectionItem.prototype.qSelectedFieldSelectionInfo;
 /** @type {!Array<?>} */
NxCurrentSelectionItem.prototype.qNotSelectedFieldSelectionInfo;
 /** @type {number} */
NxCurrentSelectionItem.prototype.qSelectionThreshold;
/**
 * @record
 * @struct
 */
function RangeSelectInfo() {}
 /** @type {number} */
RangeSelectInfo.prototype.qRangeLo;
 /** @type {number} */
RangeSelectInfo.prototype.qRangeHi;
 /** @type {string} */
RangeSelectInfo.prototype.qMeasure;
/**
 * @record
 * @struct
 */
function NxFieldSelectionInfo() {}
 /** @type {string} */
NxFieldSelectionInfo.prototype.qName;
 /** @type {string} */
NxFieldSelectionInfo.prototype.qFieldSelectionmode;
/**
 * @record
 * @struct
 */
function Selectionobject() {}
 /** @type {number} */
Selectionobject.prototype.qBackCount;
 /** @type {number} */
Selectionobject.prototype.qForwardCount;
 /** @type {!Array<?>} */
Selectionobject.prototype.qSelections;
/**
 * @record
 * @struct
 */
function Layout() {}
 /** @type {?} */
Layout.prototype.qHyperCube;
 /** @type {?} */
Layout.prototype.qInfo;
 /** @type {?} */
Layout.prototype.qSelectionInfo;
/**
 * @record
 * @struct
 */
function ValueExpr() {}
 /** @type {string} */
ValueExpr.prototype.qv;
/**
 * @record
 * @struct
 */
function SortCriteria() {}
 /** @type {number} */
SortCriteria.prototype.qSortByState;
 /** @type {number} */
SortCriteria.prototype.qSortByFrequency;
 /** @type {number} */
SortCriteria.prototype.qSortByNumeric;
 /** @type {number} */
SortCriteria.prototype.qSortByAscii;
 /** @type {number} */
SortCriteria.prototype.qSortByLoadOrder;
 /** @type {number} */
SortCriteria.prototype.qSortByExpression;
 /** @type {?} */
SortCriteria.prototype.qExpression;
/**
 * @record
 * @struct
 */
function NxInlineDimensionDef() {}
 /** @type {string} */
NxInlineDimensionDef.prototype.qGrouping;
 /** @type {!Array<string>} */
NxInlineDimensionDef.prototype.qFieldDefs;
 /** @type {!Array<?>} */
NxInlineDimensionDef.prototype.qSortCriteries;
 /** @type {!Array<?>} */
NxInlineDimensionDef.prototype.qNumberPresentations;
 /** @type {boolean} */
NxInlineDimensionDef.prototype.qReverseSort;
 /** @type {number} */
NxInlineDimensionDef.prototype.qActiveField;
/**
 * @record
 * @struct
 */
function OtherTotalSpecProp() {}
 /** @type {string} */
OtherTotalSpecProp.prototype.qOtherMode;
 /** @type {?} */
OtherTotalSpecProp.prototype.qOtherCounted;
 /** @type {?} */
OtherTotalSpecProp.prototype.qOtherLimit;
 /** @type {string} */
OtherTotalSpecProp.prototype.qOtherLimitMode;
 /** @type {boolean} */
OtherTotalSpecProp.prototype.qSupressOther;
 /** @type {boolean} */
OtherTotalSpecProp.prototype.qForceBadValueKeeping;
 /** @type {boolean} */
OtherTotalSpecProp.prototype.qApplyEvenWhenPossiblyWrongResult;
 /** @type {boolean} */
OtherTotalSpecProp.prototype.qGlobalOtherGrouping;
 /** @type {boolean} */
OtherTotalSpecProp.prototype.qOtherCollapseInnerDimensions;
 /** @type {string} */
OtherTotalSpecProp.prototype.qOtherSortMode;
 /** @type {string} */
OtherTotalSpecProp.prototype.qTotalMode;
 /** @type {string} */
OtherTotalSpecProp.prototype.qReferencedExpression;
/**
 * @record
 * @struct
 */
function NxAttrExprDef() {}
 /** @type {string} */
NxAttrExprDef.prototype.qExpression;
 /** @type {string} */
NxAttrExprDef.prototype.qLibraryId;
/**
 * @record
 * @struct
 */
function NxAttrDimDef() {}
 /** @type {string} */
NxAttrDimDef.prototype.qDef;
 /** @type {string} */
NxAttrDimDef.prototype.qLibraryId;
 /** @type {?} */
NxAttrDimDef.prototype.qSortBy;
/**
 * @record
 * @struct
 */
function NxDimension() {}
 /** @type {string} */
NxDimension.prototype.qLibraryId;
 /** @type {?} */
NxDimension.prototype.qDef;
 /** @type {boolean} */
NxDimension.prototype.qNullSuppression;
 /** @type {?} */
NxDimension.prototype.qOtherTotalSpec;
 /** @type {boolean} */
NxDimension.prototype.qShowAll;
 /** @type {string} */
NxDimension.prototype.qOtherLabel;
 /** @type {string} */
NxDimension.prototype.qTotalLabel;
 /** @type {?} */
NxDimension.prototype.qCalcCond;
 /** @type {!Array<?>} */
NxDimension.prototype.qAttributeExpressions;
 /** @type {!Array<?>} */
NxDimension.prototype.qAttributeDimensions;
/**
 * @record
 * @struct
 */
function NxMeasure() {}
 /** @type {string} */
NxMeasure.prototype.qLibraryId;
 /** @type {?} */
NxMeasure.prototype.qDef;
 /** @type {?} */
NxMeasure.prototype.qSortBy;
 /** @type {!Array<?>} */
NxMeasure.prototype.qAttributeExpressions;
 /** @type {?} */
NxMeasure.prototype.qCalcCond;
 /** @type {!Array<?>} */
NxMeasure.prototype.qAttributeDimensions;
/**
 * @record
 * @struct
 */
function NxInlineMeasureDef() {}
 /** @type {number} */
NxInlineMeasureDef.prototype.qcx;
 /** @type {number} */
NxInlineMeasureDef.prototype.qcy;
/**
 * @record
 * @struct
 */
function NxPage() {}
 /** @type {number} */
NxPage.prototype.qLeft;
 /** @type {number} */
NxPage.prototype.qTop;
 /** @type {number} */
NxPage.prototype.qWidth;
 /** @type {number} */
NxPage.prototype.qHeight;
/**
 * @record
 * @struct
 */
function HyperCubeDef() {}
 /** @type {string} */
HyperCubeDef.prototype.qStateName;
 /** @type {!Array<?>} */
HyperCubeDef.prototype.qDimensions;
 /** @type {!Array<?>} */
HyperCubeDef.prototype.qMeasures;
 /** @type {!Array<number>} */
HyperCubeDef.prototype.qInterColumnSortOrder;
 /** @type {boolean} */
HyperCubeDef.prototype.qSuppressZero;
 /** @type {boolean} */
HyperCubeDef.prototype.qSupressMissing;
 /** @type {!Array<?>} */
HyperCubeDef.prototype.qInitialDataFetch;
 /** @type {string} */
HyperCubeDef.prototype.qMode;
 /** @type {number} */
HyperCubeDef.prototype.qNoOfLeftDims;
 /** @type {boolean} */
HyperCubeDef.prototype.qAlwaysFullyExpanded;
 /** @type {number} */
HyperCubeDef.prototype.qMaxStackedCells;
 /** @type {boolean} */
HyperCubeDef.prototype.qPopulateMissing;
 /** @type {boolean} */
HyperCubeDef.prototype.qShowTotalsAbove;
 /** @type {boolean} */
HyperCubeDef.prototype.qIndentMode;
 /** @type {?} */
HyperCubeDef.prototype.qCalcCond;
 /** @type {number} */
HyperCubeDef.prototype.qSortByYValue;
/**
 * @record
 * @struct
 */
function NxAutoSortByStateDef() {}
 /** @type {number} */
NxAutoSortByStateDef.prototype.qDisplayNumberOfRows;
/**
 * @record
 * @struct
 */
function NxListobjectExpressionDef() {}
 /** @type {string} */
NxListobjectExpressionDef.prototype.qExpr;
 /** @type {string} */
NxListobjectExpressionDef.prototype.qLibraryId;
/**
 * @record
 * @struct
 */
function ListobjectDef() {}
 /** @type {string} */
ListobjectDef.prototype.qStateName;
 /** @type {string} */
ListobjectDef.prototype.qLibraryId;
 /** @type {?} */
ListobjectDef.prototype.qDef;
 /** @type {?} */
ListobjectDef.prototype.qAutoSortByState;
 /** @type {string} */
ListobjectDef.prototype.qFrequencyMode;
 /** @type {boolean} */
ListobjectDef.prototype.qShowAlternatives;
 /** @type {!Array<?>} */
ListobjectDef.prototype.qInitialDataFetch;
 /** @type {!Array<?>} */
ListobjectDef.prototype.qExpressions;
/**
 * @record
 * @struct
 */
function InitialPropertiesHyperCube() {}
 /** @type {?} */
InitialPropertiesHyperCube.prototype.qHyperCubeDef;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function InitialPropertiesListobject() {}
 /** @type {?} */
InitialPropertiesListobject.prototype.qListobjectDef;

/* TODO: IndexSignature:  */

/** @typedef {?} */
var InitialProperties;
/**
 * @record
 * @struct
 */
function SnapshotLegacy() {}
 /** @type {boolean} */
SnapshotLegacy.prototype.canTakeSnapshot;

/** @typedef {?} */
var SupportFunction;

/** @typedef {(boolean|?)} */
var SupportItem;
/**
 * @record
 * @struct
 */
function Support() {}
 /** @type {(boolean|?)} */
Support.prototype.snapshot;
 /** @type {(boolean|?)} */
Support.prototype.export;
 /** @type {(boolean|?)} */
Support.prototype.exportData;

/** @typedef {?} */
var Paint;
/**
 * @record
 * @struct
 */
function VisualizationCommon() {}
 /** @type {?} */
VisualizationCommon.prototype.qHyperCubeDef;
 /** @type {string} */
VisualizationCommon.prototype.title;
 /** @type {boolean} */
VisualizationCommon.prototype.showTitles;
 /** @type {string} */
VisualizationCommon.prototype.subtitle;
 /** @type {string} */
VisualizationCommon.prototype.footnote;

/** @typedef {?} */
var VisualizationOptions;

/** @typedef {?} */
var ShowFunction;
/**
 * @record
 * @struct
 */
function CustomPropertyCommon() {}
 /** @type {string} */
CustomPropertyCommon.prototype.type;
 /** @type {string} */
CustomPropertyCommon.prototype.ref;
 /** @type {string} */
CustomPropertyCommon.prototype.label;
 /** @type {(boolean|?)} */
CustomPropertyCommon.prototype.show;
/**
 * @extends {CustomPropertyCommon}
 * @record
 * @struct
 */
function CustomPropertyString() {}
 /** @type {string} */
CustomPropertyString.prototype.type;
 /** @type {string} */
CustomPropertyString.prototype.expression;
 /** @type {number} */
CustomPropertyString.prototype.maxLength;
 /** @type {string} */
CustomPropertyString.prototype.defaultValue;
/**
 * @extends {CustomPropertyCommon}
 * @record
 * @struct
 */
function CustomPropertyInteger() {}
 /** @type {string} */
CustomPropertyInteger.prototype.type;
 /** @type {string} */
CustomPropertyInteger.prototype.component;
 /** @type {string} */
CustomPropertyInteger.prototype.min;
 /** @type {string} */
CustomPropertyInteger.prototype.max;
 /** @type {number} */
CustomPropertyInteger.prototype.defaultValue;
/**
 * @extends {CustomPropertyCommon}
 * @record
 * @struct
 */
function CustomPropertyNumber() {}
 /** @type {string} */
CustomPropertyNumber.prototype.type;
 /** @type {string} */
CustomPropertyNumber.prototype.component;
 /** @type {string} */
CustomPropertyNumber.prototype.min;
 /** @type {string} */
CustomPropertyNumber.prototype.max;
 /** @type {number} */
CustomPropertyNumber.prototype.defaultValue;
/**
 * @extends {CustomPropertyCommon}
 * @record
 * @struct
 */
function CustomPropertyArray() {}
 /** @type {string} */
CustomPropertyArray.prototype.type;
 /** @type {undefined} */
CustomPropertyArray.prototype.component;
 /** @type {string} */
CustomPropertyArray.prototype.itemTitleRef;
 /** @type {boolean} */
CustomPropertyArray.prototype.allowAdd;
 /** @type {boolean} */
CustomPropertyArray.prototype.allowRemove;
 /** @type {string} */
CustomPropertyArray.prototype.addTranslation;
 /** @type {boolean} */
CustomPropertyArray.prototype.allowMove;
/**
 * @extends {CustomPropertyCommon}
 * @record
 * @struct
 */
function CustomPropertyButton() {}
 /** @type {string} */
CustomPropertyButton.prototype.component;

/**
 * @param {?} data
 * @return {void}
 */
CustomPropertyButton.prototype.action = function(data) {};
/**
 * @record
 * @struct
 */
function ButtonGroupOption() {}
 /** @type {string} */
ButtonGroupOption.prototype.value;
 /** @type {string} */
ButtonGroupOption.prototype.label;
 /** @type {string} */
ButtonGroupOption.prototype.tooltip;
/**
 * @extends {CustomPropertyCommon}
 * @record
 * @struct
 */
function CustomPropertyButtonGroup() {}
 /** @type {string} */
CustomPropertyButtonGroup.prototype.type;
 /** @type {string} */
CustomPropertyButtonGroup.prototype.component;
 /** @type {string} */
CustomPropertyButtonGroup.prototype.defaultValue;
 /** @type {(!Array<?>|?)} */
CustomPropertyButtonGroup.prototype.options;
/**
 * @extends {CustomPropertyCommon}
 * @record
 * @struct
 */
function CustomPropertyCheckbox() {}
 /** @type {string} */
CustomPropertyCheckbox.prototype.type;
 /** @type {boolean} */
CustomPropertyCheckbox.prototype.defaultValue;
/**
 * @extends {CustomPropertyCommon}
 * @record
 * @struct
 */
function CustomPropertyColorPicker() {}
 /** @type {string} */
CustomPropertyColorPicker.prototype.type;
 /** @type {string} */
CustomPropertyColorPicker.prototype.component;
 /** @type {number} */
CustomPropertyColorPicker.prototype.defaultValue;
/**
 * @record
 * @struct
 */
function CustomPropertyOption() {}
 /** @type {string} */
CustomPropertyOption.prototype.value;
 /** @type {string} */
CustomPropertyOption.prototype.label;

/** @typedef {(!Array<?>|?)} */
var CustomPropertyOptions;
/**
 * @extends {CustomPropertyCommon}
 * @record
 * @struct
 */
function CustomPropertyDropdown() {}
 /** @type {string} */
CustomPropertyDropdown.prototype.type;
 /** @type {string} */
CustomPropertyDropdown.prototype.ref;
 /** @type {string} */
CustomPropertyDropdown.prototype.component;
 /** @type {string} */
CustomPropertyDropdown.prototype.defaultValue;
 /** @type {(!Array<?>|?)} */
CustomPropertyDropdown.prototype.options;
/**
 * @extends {CustomPropertyCommon}
 * @record
 * @struct
 */
function CustomPropertyLink() {}
 /** @type {string} */
CustomPropertyLink.prototype.component;
 /** @type {string} */
CustomPropertyLink.prototype.url;
/**
 * @extends {CustomPropertyCommon}
 * @record
 * @struct
 */
function CustomProperyMedia() {}
 /** @type {string} */
CustomProperyMedia.prototype.type;
 /** @type {string} */
CustomProperyMedia.prototype.component;
 /** @type {string} */
CustomProperyMedia.prototype.layoutRef;
/**
 * @extends {CustomPropertyCommon}
 * @record
 * @struct
 */
function CustomPropertyRadio() {}
 /** @type {string} */
CustomPropertyRadio.prototype.type;
 /** @type {string} */
CustomPropertyRadio.prototype.component;
 /** @type {string} */
CustomPropertyRadio.prototype.defaultValue;
 /** @type {(!Array<?>|?)} */
CustomPropertyRadio.prototype.options;
/**
 * @extends {CustomPropertyCommon}
 * @record
 * @struct
 */
function CustomPropertySlider() {}
 /** @type {string} */
CustomPropertySlider.prototype.type;
 /** @type {string} */
CustomPropertySlider.prototype.component;
 /** @type {number} */
CustomPropertySlider.prototype.defaultValue;
 /** @type {number} */
CustomPropertySlider.prototype.min;
 /** @type {number} */
CustomPropertySlider.prototype.max;
 /** @type {number} */
CustomPropertySlider.prototype.step;
/**
 * @extends {CustomPropertyCommon}
 * @record
 * @struct
 */
function CustomPropertyRangeSlider() {}
 /** @type {string} */
CustomPropertyRangeSlider.prototype.type;
 /** @type {string} */
CustomPropertyRangeSlider.prototype.component;
 /** @type {number} */
CustomPropertyRangeSlider.prototype.defaultValue;
 /** @type {number} */
CustomPropertyRangeSlider.prototype.min;
 /** @type {number} */
CustomPropertyRangeSlider.prototype.max;
 /** @type {number} */
CustomPropertyRangeSlider.prototype.step;
/**
 * @extends {CustomPropertyCommon}
 * @record
 * @struct
 */
function CustomPropertySwitch() {}
 /** @type {string} */
CustomPropertySwitch.prototype.type;
 /** @type {string} */
CustomPropertySwitch.prototype.component;
 /** @type {string} */
CustomPropertySwitch.prototype.defaultValue;
 /** @type {(!Array<?>|?)} */
CustomPropertySwitch.prototype.options;
/**
 * @extends {CustomPropertyCommon}
 * @record
 * @struct
 */
function CustomPropertyText() {}
 /** @type {string} */
CustomPropertyText.prototype.component;
/**
 * @extends {CustomPropertyCommon}
 * @record
 * @struct
 */
function CustomPropertyTextArea() {}
 /** @type {string} */
CustomPropertyTextArea.prototype.type;
 /** @type {string} */
CustomPropertyTextArea.prototype.component;
 /** @type {number} */
CustomPropertyTextArea.prototype.rows;
 /** @type {number} */
CustomPropertyTextArea.prototype.maxlength;
 /** @type {string} */
CustomPropertyTextArea.prototype.defaultValue;
/**
 * @extends {CustomPropertyCommon}
 * @record
 * @struct
 */
function CustomPropertyExpression() {}
 /** @type {undefined} */
CustomPropertyExpression.prototype.type;
 /** @type {string} */
CustomPropertyExpression.prototype.component;
 /** @type {string} */
CustomPropertyExpression.prototype.expressionType;
 /** @type {string} */
CustomPropertyExpression.prototype.defaultValue;
/**
 * @extends {CustomPropertyCommon}
 * @record
 * @struct
 */
function CustomPropertyItems() {}
 /** @type {string} */
CustomPropertyItems.prototype.type;
 /** @type {?} */
CustomPropertyItems.prototype.items;

/** @typedef {?} */
var CustomProperty;
/**
 * @record
 * @struct
 */
function Definition() {}
 /** @type {string} */
Definition.prototype.type;
 /** @type {string} */
Definition.prototype.component;
 /** @type {?} */
Definition.prototype.items;
/**
 * @record
 * @struct
 */
function Extension() {}
 /** @type {?} */
Extension.prototype.initialProperties;
 /** @type {?} */
Extension.prototype.definition;
 /** @type {?} */
Extension.prototype.paint;
 /** @type {?} */
Extension.prototype.support;
/**
 * @record
 * @struct
 */
function Patch() {}
 /** @type {string} */
Patch.prototype.qOp;
 /** @type {string} */
Patch.prototype.qPath;
 /** @type {string} */
Patch.prototype.qValue;
/**
 * @record
 * @struct
 */
function BackendApi() {}

/**
 * @return {void}
 */
BackendApi.prototype.abortSearch = function() {};

/**
 * @param {boolean} toggleMode
 * @return {void}
 */
BackendApi.prototype.acceptSearch = function(toggleMode) {};

/**
 * @param {!Array<?>} qPatches
 * @param {boolean} qSoftPatch
 * @return {!Promise<?>}
 */
BackendApi.prototype.applyPatches = function(qPatches, qSoftPatch) {};

/**
 * @return {void}
 */
BackendApi.prototype.clearSelections = function() {};

/**
 * @return {!Promise<?>}
 */
BackendApi.prototype.clearSoftPatches = function() {};

/**
 * @param {number} qRow
 * @param {number} qCol
 * @param {boolean=} qAll
 * @return {!Promise<?>}
 */
BackendApi.prototype.collapseLeft = function(qRow, qCol, qAll) {};

/**
 * @param {number} qRow
 * @param {number} qCol
 * @param {boolean=} qAll
 * @return {!Promise<?>}
 */
BackendApi.prototype.collapseTop = function(qRow, qCol, qAll) {};

/**
 * @param {?} callback
 * @return {!Array<?>}
 */
BackendApi.prototype.eachDataRow = function(callback) {};

/**
 * @param {number} qRow
 * @param {number} qCol
 * @param {boolean=} qAll
 * @return {!Promise<?>}
 */
BackendApi.prototype.expandLeft = function(qRow, qCol, qAll) {};

/**
 * @param {number} qRow
 * @param {number} qCol
 * @param {boolean=} qAll
 * @return {!Promise<?>}
 */
BackendApi.prototype.expandTop = function(qRow, qCol, qAll) {};

/**
 * @param {!Array<?>} qPages
 * @return {!Promise<!Array<?>>}
 */
BackendApi.prototype.getData = function(qPages) {};

/**
 * @param {number} rownum
 * @return {!Array<?>}
 */
BackendApi.prototype.getDataRow = function(rownum) {};

/**
 * @return {!Array<?>}
 */
BackendApi.prototype.getDimensionInfos = function() {};

/**
 * @return {!Array<?>}
 */
BackendApi.prototype.getMeasureInfos = function() {};

/**
 * @param {!Array<?>} qPages
 * @return {!Promise<?>}
 */
BackendApi.prototype.getPivotData = function(qPages) {};

/**
 * @return {number}
 */
BackendApi.prototype.getRowCount = function() {};

/**
 * @param {!Array<?>} qPages
 * @param {number} qMaxNbrCells
 * @return {!Promise<?>}
 */
BackendApi.prototype.getStackeddata = function(qPages, qMaxNbrCells) {};

/**
 * @return {boolean}
 */
BackendApi.prototype.hasSelections = function() {};

/**
 * @return {!Promise<undefined>}
 */
BackendApi.prototype.save = function() {};

/**
 * @param {string} term
 * @return {void}
 */
BackendApi.prototype.search = function(term) {};

/**
 * @param {number} qDimNo
 * @param {!Array<number>} qValues
 * @param {boolean} qToggleMode
 * @return {void}
 */
BackendApi.prototype.selectValues = function(qDimNo, qValues, qToggleMode) {};

/**
 * @param {!Object} props
 * @return {!Promise<?>}
 */
BackendApi.prototype.selectProperties = function(props) {};
/**
 * @record
 * @struct
 */
function ExtensionContext() {}
 /** @type {?<!HTMLElement>} */
ExtensionContext.prototype.$element;
 /** @type {?} */
ExtensionContext.prototype.$scope;
 /** @type {boolean} */
ExtensionContext.prototype._inAnalysisState;
 /** @type {boolean} */
ExtensionContext.prototype._inEditState;
 /** @type {number} */
ExtensionContext.prototype._interactionState;
 /** @type {boolean} */
ExtensionContext.prototype._on;
 /** @type {?} */
ExtensionContext.prototype.backendApi;
 /** @type {?} */
ExtensionContext.prototype.paint;
 /** @type {boolean} */
ExtensionContext.prototype.selectionsEnabled;

/**
 * @return {void}
 */
ExtensionContext.prototype.toggleLasso = function() {};

/**
 * @param {number} dimNo
 * @param {!Array<number>} values
 * @param {boolean} toggleMode
 * @return {void}
 */
ExtensionContext.prototype.selectValues = function(dimNo, values, toggleMode) {};
/**
 * @record
 * @struct
 */
function QDimensionCell() {}
 /** @type {string} */
QDimensionCell.prototype.qText;
 /** @type {number} */
QDimensionCell.prototype.qElemNumber;
 /** @type {string} */
QDimensionCell.prototype.qState;
 /** @type {number} */
QDimensionCell.prototype.qNum;

/**
 * @return {void}
 */
QDimensionCell.prototype.select = function() {};
/**
 * @record
 * @struct
 */
function QMeasureCell() {}
 /** @type {string} */
QMeasureCell.prototype.qText;
 /** @type {number} */
QMeasureCell.prototype.qNum;

/**
 * @return {number}
 */
QMeasureCell.prototype.getPercent = function() {};

/**
 * @return {number}
 */
QMeasureCell.prototype.getPercentOfMax = function() {};
/**
 * @record
 * @struct
 */
function QRow() {}
 /** @type {!Array<?>} */
QRow.prototype.dimensions;
 /** @type {!Array<?>} */
QRow.prototype.measures;
 /** @type {!Array<?>} */
QRow.prototype.cells;
/**
 * @record
 * @struct
 */
function QHeader() {}
 /** @type {string} */
QHeader.prototype.qFallbackTitle;
 /** @type {string} */
QHeader.prototype.qSortIndicator;
 /** @type {boolean} */
QHeader.prototype.isOrderedBy;
 /** @type {boolean} */
QHeader.prototype.qReverseSort;
 /** @type {number} */
QHeader.prototype.col;
 /** @type {number} */
QHeader.prototype.qCardinal;
 /** @type {?} */
QHeader.prototype.qStateCounts;
 /** @type {number} */
QHeader.prototype.qMin;
 /** @type {number} */
QHeader.prototype.qMax;
 /** @type {number} */
QHeader.prototype.errorCode;
 /** @type {number} */
QHeader.prototype.errorMessage;

/**
 * @return {void}
 */
QHeader.prototype.orderBy = function() {};

/**
 * @return {void}
 */
QHeader.prototype.reverseOrder = function() {};

/**
 * @param {number} min
 * @param {number} max
 * @param {boolean} inclMin
 * @param {boolean} inclMax
 * @return {!Promise<?>}
 */
QHeader.prototype.selectRange = function(min, max, inclMin, inclMax) {};
/**
 * @record
 * @struct
 */
function ExportDataOptions() {}
 /** @type {string} */
ExportDataOptions.prototype.format;
 /** @type {string} */
ExportDataOptions.prototype.filename;
 /** @type {string} */
ExportDataOptions.prototype.state;
 /** @type {boolean} */
ExportDataOptions.prototype.download;
/**
 * @record
 * @struct
 */
function QTable() {}
 /** @type {!Array<?>} */
QTable.prototype.rows;
 /** @type {!Array<?>} */
QTable.prototype.headers;
 /** @type {!Array<?>} */
QTable.prototype.totals;
 /** @type {number} */
QTable.prototype.rowCount;
 /** @type {number} */
QTable.prototype.colCount;

/**
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
QTable.prototype.exportData = function(options, callback) {};

/**
 * @param {string} fld
 * @return {number}
 */
QTable.prototype.getColByName = function(fld) {};

/**
 * @return {void}
 */
QTable.prototype.getMoreData = function() {};
/**
 * @record
 * @struct
 */
function Variable() {}
 /** @type {?} */
Variable.prototype.qContent;
/**
 * @record
 * @struct
 */
function QFieldValue() {}
 /** @type {string} */
QFieldValue.prototype.qText;
 /** @type {number} */
QFieldValue.prototype.qElemNumber;
 /** @type {?} */
QFieldValue.prototype.qState;
 /** @type {string} */
QFieldValue.prototype.qNum;
 /** @type {string} */
QFieldValue.prototype.qFrequency;

/**
 * @param {boolean=} toggle
 * @param {boolean=} softlock
 * @return {!Promise<?>}
 */
QFieldValue.prototype.select = function(toggle, softlock) {};
/**
 * @record
 * @struct
 */
function GetDataOptions() {}
 /** @type {number} */
GetDataOptions.prototype.rows;
 /** @type {string} */
GetDataOptions.prototype.frequencyMode;
/**
 * @record
 * @struct
 */
function QField() {}
 /** @type {!Array<?>} */
QField.prototype.rows;
 /** @type {number} */
QField.prototype.rowCount;
 /** @type {?} */
QField.prototype.qStateCounts;

/**
 * @return {!Promise<?>}
 */
QField.prototype.clear = function() {};

/**
 * @param {boolean} softlock
 * @return {!Promise<?>}
 */
QField.prototype.clearOther = function(softlock) {};

/**
 * @param {?} options
 * @return {?}
 */
QField.prototype.getData = function(options) {};

/**
 * @return {?}
 */
QField.prototype.getMoreData = function() {};

/**
 * @return {!Promise<?>}
 */
QField.prototype.lock = function() {};

/**
 * @param {!Array<number>} values
 * @param {boolean=} toggle
 * @param {boolean=} softlock
 * @return {!Promise<?>}
 */
QField.prototype.select = function(values, toggle, softlock) {};

/**
 * @param {boolean=} softlock
 * @return {!Promise<?>}
 */
QField.prototype.selectAll = function(softlock) {};

/**
 * @param {boolean=} softlock
 * @return {!Promise<?>}
 */
QField.prototype.selectAlternative = function(softlock) {};

/**
 * @param {boolean=} softlock
 * @return {!Promise<?>}
 */
QField.prototype.selectExcluded = function(softlock) {};

/**
 * @param {string} match
 * @param {boolean=} softlock
 * @return {!Promise<?>}
 */
QField.prototype.selectMatch = function(match, softlock) {};

/**
 * @param {boolean=} softlock
 * @return {!Promise<?>}
 */
QField.prototype.selectPossible = function(softlock) {};

/**
 * @param {!Array<?>} values
 * @param {boolean=} toggle
 * @param {boolean=} softlock
 * @return {!Promise<?>}
 */
QField.prototype.selectValues = function(values, toggle, softlock) {};

/**
 * @param {string} match
 * @param {boolean=} softlock
 * @return {!Promise<?>}
 */
QField.prototype.toggleSelect = function(match, softlock) {};

/**
 * @return {!Promise<?>}
 */
QField.prototype.unlock = function() {};

/** @typedef {string} */
var ListTypes;
/**
 * @record
 * @struct
 */
function App() {}
 /** @type {?} */
App.prototype.variable;

/**
 * @param {string} qStateName
 * @return {!Promise<?>}
 */
App.prototype.addAlternateState = function(qStateName) {};

/**
 * @return {!Promise<?>}
 */
App.prototype.back = function() {};

/**
 * @param {boolean=} lockedAlso
 * @param {string=} state
 * @return {!Promise<?>}
 */
App.prototype.clearrAll = function(lockedAlso, state) {};

/**
 * @return {void}
 */
App.prototype.close = function() {};

/**
 * @param {?} qHyperCubeDef
 * @param {?=} callback
 * @return {!Promise<?>}
 */
App.prototype.createCube = function(qHyperCubeDef, callback) {};

/**
 * @param {string} id
 * @return {!Promise<?>}
 */
App.prototype.destroySession = function(id) {};

/**
 * @param {string=} qMode
 * @param {boolean=} qPartial
 * @param {boolean=} qDebug
 * @return {!Promise<?>}
 */
App.prototype.doReload = function(qMode, qPartial, qDebug) {};

/**
 * @param {string=} qFileName
 * @return {!Promise<?>}
 */
App.prototype.doSave = function(qFileName) {};

/**
 * @param {string} field
 * @param {string=} state
 * @return {?}
 */
App.prototype.field = function(field, state) {};

/**
 * @return {!Promise<?>}
 */
App.prototype.forward = function() {};

/**
 * @param {?} callback
 * @return {!Promise<?>}
 */
App.prototype.getAppLayout = function(callback) {};

/**
 * @param {string} id
 * @return {!Promise<?>}
 */
App.prototype.getFullPropertyTree = function(id) {};

/**
 * @param {(string|!HTMLElement)=} elem
 * @param {string=} id
 * @param {?=} options
 * @return {!Promise<?>}
 */
App.prototype.getobject = function(elem, id, options) {};

/**
 * @param {string} id
 * @return {!Promise<?>}
 */
App.prototype.getobjectProperties = function(id) {};

/**
 * @param {(string|!HTMLElement)=} elem
 * @param {string=} id
 * @return {!Promise<?>}
 */
App.prototype.getSnapshot = function(elem, id) {};

/**
 * @param {string=} state
 * @return {!Promise<?>}
 */
App.prototype.lockAll = function(state) {};

/**
 * @param {string} qStateName
 * @return {!Promise<?>}
 */
App.prototype.removeAlternateState = function(qStateName) {};

/**
 * @param {string=} state
 * @return {!Promise<?>}
 */
App.prototype.unlockAll = function(state) {};

/**
 * @param {string} path
 * @param {string} method
 * @param {string} body
 * @return {!Promise<?>}
 */
function callRepository(path, method, body) {}

/**
 * @param {!Object} reference
 * @return {?}
 */
function currApp(reference) {}
/**
 * @record
 * @struct
 */
function GetAppConfig() {}
 /** @type {string} */
GetAppConfig.prototype.host;
 /** @type {(string|number)} */
GetAppConfig.prototype.port;
 /** @type {string} */
GetAppConfig.prototype.prefix;
 /** @type {boolean} */
GetAppConfig.prototype.isSecure;
 /** @type {boolean} */
GetAppConfig.prototype.openWithoutData;
 /** @type {string} */
GetAppConfig.prototype.identity;

/**
 * @param {!Array<?>} callback
 * @param {?} config
 * @return {void}
 */
function getAppList(callback, config) {}

/**
 * @param {!Array<?>} callback
 * @return {!Promise<?>}
 */
function getExtensionList(callback) {}

/** @typedef {?} */
var Global;
/**
 * @record
 * @struct
 */
function GetGlobalConfig() {}
 /** @type {string} */
GetGlobalConfig.prototype.host;
 /** @type {string} */
GetGlobalConfig.prototype.port;
 /** @type {string} */
GetGlobalConfig.prototype.prefix;
 /** @type {boolean} */
GetGlobalConfig.prototype.isSecure;
 /** @type {string} */
GetGlobalConfig.prototype.identity;

/**
 * @param {?} config
 * @return {?}
 */
function getGlobal(config) {}

/**
 * @param {string} appId
 * @param {?} config
 * @return {?}
 */
function openApp(appId, config) {}

/**
 * @param {string} id
 * @param {?} impl
 * @param {!Object} metadata
 * @return {void}
 */
function registerExtension(id, impl, metadata) {}

/**
 * @param {string=} ID
 * @return {void}
 */
function resize(ID) {}
/** @const */
var LanguageCodes = {};

/** @typedef {string} */
LanguageCodes.German;

/** @typedef {string} */
LanguageCodes.English;

/** @typedef {string} */
LanguageCodes.Spanish;

/** @typedef {string} */
LanguageCodes.French;

/** @typedef {string} */
LanguageCodes.Italian;

/** @typedef {string} */
LanguageCodes.Japanese;

/** @typedef {string} */
LanguageCodes.Korean;

/** @typedef {string} */
LanguageCodes.Dutch;

/** @typedef {string} */
LanguageCodes.Polish;

/** @typedef {string} */
LanguageCodes.BrazilianPortuguese;

/** @typedef {string} */
LanguageCodes.Russian;

/** @typedef {string} */
LanguageCodes.Swedish;

/** @typedef {string} */
LanguageCodes.Turkish;

/** @typedef {string} */
LanguageCodes.SimplifiedChinese;

/** @typedef {string} */
LanguageCodes.TraditionalChinese;

/** @typedef {string} */
LanguageCodes.ALL;

/**
 * @param {string} lang
 * @return {void}
 */
function setLanguage(lang) {}
/**
 * @record
 * @struct
 */
function Error() {}
 /** @type {?} */
Error.prototype.code;
 /** @type {string} */
Error.prototype.message;

/**
 * @param {?} onError
 * @param {?} onWarning
 * @return {void}
 */
function setOnError(onError, onWarning) {}

/**
 * @param {!Object} ext
 * @param {string=} path
 * @return {void}
 */
function table(ext, path) {}
