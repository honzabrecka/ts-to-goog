/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/flipsnap/index.d.ts:
/**
 * @record
 * @struct
 */
function IFlipsnap() {}
 /** @type {!HTMLElement} */
IFlipsnap.prototype.element;

/**
 * Return true or false. true is returned when there is previous element.
 * @return {boolean}
 */
IFlipsnap.prototype.hasPrev = function() {};

/**
 * Return true or false. true is returned when there is next element.
 * @return {boolean}
 */
IFlipsnap.prototype.hasNext = function() {};

/**
 * Move to previous item.
 * @param {number=} transitionDuration
 * @return {void}
 */
IFlipsnap.prototype.toPrev = function(transitionDuration) {};

/**
 * Move to next item.
 * @param {number=} transitionDuration
 * @return {void}
 */
IFlipsnap.prototype.toNext = function(transitionDuration) {};

/**
 * Move to item of number.
 * @param {number} point
 * @param {number=} transitionDuration
 * @return {void}
 */
IFlipsnap.prototype.moveToPoint = function(point, transitionDuration) {};

/**
 * Recalculate values
 * @return {void}
 */
IFlipsnap.prototype.refresh = function() {};
/**
 * @record
 * @struct
 */
function FlipsnapStatic() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FlipsnapOptions() {}
 /** @type {number} */
FlipsnapOptions.prototype.maxPoint;
 /** @type {number} */
FlipsnapOptions.prototype.distance;
 /** @type {number} */
FlipsnapOptions.prototype.transitionDuration;
 /** @type {boolean} */
FlipsnapOptions.prototype.disableTouch;
 /** @type {boolean} */
FlipsnapOptions.prototype.disable3d;

/**
 * @param {string} type
 * @param {function(!Event): ?|function(!FlipsnapTouchMoveEvent): ?|function(!FlipsnapTouchEndEvent): ?} listener
 * @param {boolean=} useCapture
 * @return {void}
 */
HTMLElement.prototype.addEventListener = function(type, listener, useCapture) {};
/**
 * @record
 * @struct
 */
function FlipsnapTouchMoveEvent() {}
 /** @type {number} */
FlipsnapTouchMoveEvent.prototype.delta;
 /** @type {number} */
FlipsnapTouchMoveEvent.prototype.direction;
/**
 * @record
 * @struct
 */
function FlipsnapTouchEndEvent() {}
 /** @type {boolean} */
FlipsnapTouchEndEvent.prototype.moved;
 /** @type {boolean} */
FlipsnapTouchEndEvent.prototype.cancelled;
 /** @type {number} */
FlipsnapTouchEndEvent.prototype.newPoint;
 /** @type {number} */
FlipsnapTouchEndEvent.prototype.originalPoint;
 /** @type {!FlipsnapStatic} */
var Flipsnap;
