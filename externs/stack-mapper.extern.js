/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/stack-mapper/index.d.ts:
/** @const */
var stackMapper = {};
/**
 * @constructor
 * @struct
 */
stackMapper.StackMapper = function() {};

/**
 * Maps the trace statements of the given error stack and replaces locations
 * referencing code in the generated file with the locations inside the original files.
 * 
 * \@name map
 *    - filename: original filename
 *    - line: origial line in that filename of the trace
 *    - column: origial column on that line of the trace
 * @param {!Array<!stackMapper.Callsite>} stack
 * @return {!Array<!stackMapper.Callsite>}
 */
stackMapper.StackMapper.prototype.map = function(stack) {};
/**
 * @record
 * @struct
 */
stackMapper.Callsite = function() {};
 /** @type {string} */
stackMapper.Callsite.prototype.filename;
 /** @type {number} */
stackMapper.Callsite.prototype.line;
 /** @type {number} */
stackMapper.Callsite.prototype.column;

/**
 * Returns a Stackmapper that will use the given source map to map error trace locations.
 * 
 * \@name stackMapper
 * @param {?} sourcemap
 * @return {!stackMapper.StackMapper}
 */
function stackMapper(sourcemap) {}

/* TODO: ExportAssignment in  */
