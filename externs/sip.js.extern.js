/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/sip.js/index.d.ts:

/* TODO: NamespaceExportDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {string=} scheme
 * @param {string=} user
 * @param {string=} host
 * @param {number=} port
 * @param {!Array<string>=} parameters
 * @param {!Array<string>=} headers
 */
function URI(scheme, user, host, port, parameters, headers) {}
 /** @type {string} */
URI.prototype.scheme;
 /** @type {string} */
URI.prototype.user;
 /** @type {string} */
URI.prototype.host;
 /** @type {number} */
URI.prototype.port;

/**
 * @param {string} uri
 * @return {?}
 */
URI.parse = function(uri) {};

/**
 * @param {string} key
 * @param {string=} value
 * @return {void}
 */
URI.prototype.setParam = function(key, value) {};

/**
 * @param {string} key
 * @return {string}
 */
URI.prototype.getParam = function(key) {};

/**
 * @param {string} key
 * @return {string}
 */
URI.prototype.hasParam = function(key) {};

/**
 * @param {string} key
 * @return {string}
 */
URI.prototype.deleteParam = function(key) {};

/**
 * @return {void}
 */
URI.prototype.clearParams = function() {};

/**
 * @param {string} name
 * @param {string} value
 * @return {void}
 */
URI.prototype.setHeader = function(name, value) {};

/**
 * @param {string} name
 * @return {!Array<string>}
 */
URI.prototype.getHeader = function(name) {};

/**
 * @param {string} name
 * @return {boolean}
 */
URI.prototype.hasHeader = function(name) {};

/**
 * @param {string} name
 * @return {!Array<string>}
 */
URI.prototype.deleteHeader = function(name) {};

/**
 * @return {void}
 */
URI.prototype.clearHeaders = function() {};

/**
 * @return {?}
 */
URI.prototype.clone = function() {};

/**
 * @return {string}
 */
URI.prototype.toString = function() {};
/** @const */
var UA = {};
/** @const */
UA.EventArgs = {};
/**
 * @record
 * @struct
 */
UA.EventArgs.ConnectedArgs = function() {};
 /** @type {number} */
UA.EventArgs.ConnectedArgs.prototype.attempts;
/**
 * @record
 * @struct
 */
UA.EventArgs.UnregisteredArgs = function() {};
 /** @type {string} */
UA.EventArgs.UnregisteredArgs.prototype.response;
 /** @type {string} */
UA.EventArgs.UnregisteredArgs.prototype.cause;
/**
 * @extends {UA.EventArgs.UnregisteredArgs}
 * @record
 * @struct
 */
UA.EventArgs.RegistrationFailedArgs = function() {};

/**
 * @return {?}
 */
UA.prototype.start = function() {};

/**
 * @return {?}
 */
UA.prototype.stop = function() {};

/**
 * @param {?=} options
 * @return {?}
 */
UA.prototype.register = function(options) {};

/**
 * @param {?=} options
 * @return {?}
 */
UA.prototype.unregister = function(options) {};

/**
 * @return {boolean}
 */
UA.prototype.isRegistered = function() {};

/**
 * @return {boolean}
 */
UA.prototype.isConnected = function() {};

/**
 * @param {(string|?)} target
 * @param {string} body
 * @param {?=} options
 * @return {?}
 */
UA.prototype.message = function(target, body, options) {};

/**
 * @param {(string|?)} target
 * @param {string} event
 * @param {?=} options
 * @return {?}
 */
UA.prototype.subscribe = function(target, event, options) {};

/**
 * @param {(string|?)} target
 * @param {(?|!HTMLAudioElement|!HTMLVideoElement)=} element
 * @return {?}
 */
UA.prototype.invite = function(target, element) {};

/**
 * @param {string} method
 * @param {(string|?)} target
 * @param {?=} options
 * @return {?}
 */
UA.prototype.request = function(method, target, options) {};

/**
 * @param {string} name
 * @param {?} callback
 * @return {void}
 */
UA.prototype.on = function(name, callback) {};
/** @const */
var C = {};
/** @const */
C.supported = {};
 /** @type {string} */
C.supported.REQUIRED;
 /** @type {string} */
C.supported.SUPPORTED;
 /** @type {string} */
C.supported.UNSUPPORTED;
/** @const */
C.causes = {};
 /** @type {string} */
C.causes.INVALID_TARGET;
 /** @type {string} */
C.causes.CONNECTION_ERROR;
 /** @type {string} */
C.causes.REQUEST_TIMEOUT;
 /** @type {string} */
C.causes.SIP_FAILURE_CODE;
/**
 * @record
 * @struct
 */
function Session() {}
 /** @type {!Date} */
Session.prototype.startTime;
 /** @type {!Date} */
Session.prototype.endTime;
 /** @type {?} */
Session.prototype.ua;
 /** @type {string} */
Session.prototype.method;
 /** @type {?} */
Session.prototype.mediaHandler;
 /** @type {?} */
Session.prototype.request;
 /** @type {?} */
Session.prototype.localIdentity;
 /** @type {?} */
Session.prototype.remoteIdentity;
 /** @type {?} */
Session.prototype.data;

/**
 * @param {(string|number)} tone
 * @param {?=} options
 * @return {?}
 */
Session.prototype.dtmf = function(tone, options) {};

/**
 * @param {?=} options
 * @return {?}
 */
Session.prototype.terminate = function(options) {};

/**
 * @param {?=} options
 * @return {?}
 */
Session.prototype.bye = function(options) {};

/**
 * @return {!Array<?>}
 */
Session.prototype.getLocalStreams = function() {};

/**
 * @return {!Array<?>}
 */
Session.prototype.getRemoteStreams = function() {};

/**
 * @param {(string|?)} target
 * @param {?=} options
 * @return {?}
 */
Session.prototype.refer = function(target, options) {};

/**
 * @param {?=} options
 * @return {void}
 */
Session.prototype.mute = function(options) {};

/**
 * @param {?=} options
 * @return {void}
 */
Session.prototype.unmute = function(options) {};

/**
 * @param {?=} options
 * @return {void}
 */
Session.prototype.cancel = function(options) {};

/**
 * @param {?=} options
 * @return {void}
 */
Session.prototype.progress = function(options) {};

/**
 * @param {?=} options
 * @return {void}
 */
Session.prototype.accept = function(options) {};

/**
 * @param {?=} options
 * @return {void}
 */
Session.prototype.reject = function(options) {};

/**
 * @param {?=} options
 * @return {void}
 */
Session.prototype.reply = function(options) {};

/**
 * @param {?=} options
 * @return {void}
 */
Session.prototype.hold = function(options) {};

/**
 * @param {?=} options
 * @return {void}
 */
Session.prototype.unhold = function(options) {};

/**
 * @return {?}
 */
Session.prototype.isOnHold = function() {};

/**
 * @param {?} callback
 * @return {void}
 */
Session.prototype.followRefer = function(callback) {};

/**
 * @param {string} name
 * @param {?} callback
 * @return {void}
 */
Session.prototype.on = function(name, callback) {};
/**
 * @extends {ExtraHeadersOptions}
 * @record
 * @struct
 */
Session.DtmfOptions = function() {};
 /** @type {number} */
Session.DtmfOptions.prototype.duration;
 /** @type {number} */
Session.DtmfOptions.prototype.interToneGap;
/**
 * @extends {ExtraHeadersOptions}
 * @record
 * @struct
 */
Session.CommonOptions = function() {};
 /** @type {number} */
Session.CommonOptions.prototype.status_code;
 /** @type {string} */
Session.CommonOptions.prototype.reason_phrase;
 /** @type {string} */
Session.CommonOptions.prototype.body;
/**
 * @extends {ExtraHeadersOptions}
 * @record
 * @struct
 */
Session.ProgressOptions = function() {};
 /** @type {boolean} */
Session.ProgressOptions.prototype.rel100;
 /** @type {?} */
Session.ProgressOptions.prototype.media;
/**
 * @record
 * @struct
 */
Session.AcceptOptions = function() {};
 /** @type {?} */
Session.AcceptOptions.prototype.RTCConstraints;
 /** @type {?} */
Session.AcceptOptions.prototype.media;
/**
 * @extends {ExtraHeadersOptions}
 * @record
 * @struct
 */
Session.HoldOptions = function() {};
 /** @type {?} */
Session.HoldOptions.prototype.eventHandlers;
/**
 * @record
 * @struct
 */
Session.DTMF = function() {};
/**
 * @record
 * @struct
 */
Session.Muted = function() {};
 /** @type {boolean} */
Session.Muted.prototype.audio;
 /** @type {boolean} */
Session.Muted.prototype.video;
/**
 * @record
 * @struct
 */
Session.Held = function() {};
 /** @type {boolean} */
Session.Held.prototype.local;
 /** @type {boolean} */
Session.Held.prototype.remote;
/**
 * @record
 * @struct
 */
function RenderHint() {}
 /** @type {!Element} */
RenderHint.prototype.remote;
 /** @type {!Element} */
RenderHint.prototype.local;
/**
 * @record
 * @struct
 */
function MediaConstraints() {}
 /** @type {boolean} */
MediaConstraints.prototype.audio;
 /** @type {boolean} */
MediaConstraints.prototype.video;
/**
 * @record
 * @struct
 */
function TurnServer() {}
 /** @type {(string|!Array<string>)} */
TurnServer.prototype.urls;
 /** @type {string} */
TurnServer.prototype.username;
 /** @type {string} */
TurnServer.prototype.password;
/** @const */
var WebRTC = {};
/**
 * @record
 * @struct
 */
WebRTC.Options = function() {};
 /** @type {(string|!Array<string>)} */
WebRTC.Options.prototype.stunServers;
 /** @type {(?|!Array<?>)} */
WebRTC.Options.prototype.turnServers;
 /** @type {?} */
WebRTC.Options.prototype.RTCConstraints;

/** @typedef {?} */
WebRTC.MediaHandlerFactory;
/**
 * @constructor
 * @struct
 */
WebRTC.MediaHandler = function() {};

/**
 * @return {!Array<?>}
 */
WebRTC.MediaHandler.prototype.getLocalStreams = function() {};

/**
 * @return {!Array<?>}
 */
WebRTC.MediaHandler.prototype.getRemoteStreams = function() {};

/**
 * @param {?} renderHint
 * @return {void}
 */
WebRTC.MediaHandler.prototype.render = function(renderHint) {};

/**
 * @param {string} name
 * @param {?} callback
 * @return {void}
 */
WebRTC.MediaHandler.prototype.on = function(name, callback) {};
/**
 * @record
 * @struct
 */
function ConfigurationParameters() {}
 /** @type {string} */
ConfigurationParameters.prototype.uri;
 /** @type {(string|!Array<(string|?)>)} */
ConfigurationParameters.prototype.wsServers;
 /** @type {boolean} */
ConfigurationParameters.prototype.allowLegacyNotifications;
 /** @type {?} */
ConfigurationParameters.prototype.authenticationFactory;
 /** @type {string} */
ConfigurationParameters.prototype.authorizationUser;
 /** @type {boolean} */
ConfigurationParameters.prototype.autostart;
 /** @type {boolean} */
ConfigurationParameters.prototype.autostop;
 /** @type {number} */
ConfigurationParameters.prototype.connectionRecoveryMaxInterval;
 /** @type {number} */
ConfigurationParameters.prototype.connectionRecoveryMinInterval;
 /** @type {string} */
ConfigurationParameters.prototype.contactTransport;
 /** @type {string} */
ConfigurationParameters.prototype.displayName;
 /** @type {!Array<string>} */
ConfigurationParameters.prototype.extraSupported;
 /** @type {boolean} */
ConfigurationParameters.prototype.forceRport;
 /** @type {boolean} */
ConfigurationParameters.prototype.hackAllowUnregisteredOptionTags;
 /** @type {boolean} */
ConfigurationParameters.prototype.hackCleanJitsiSdpImageattr;
 /** @type {boolean} */
ConfigurationParameters.prototype.hackStripTcp;
 /** @type {boolean} */
ConfigurationParameters.prototype.hackIpInContact;
 /** @type {boolean} */
ConfigurationParameters.prototype.hackViaTcp;
 /** @type {boolean} */
ConfigurationParameters.prototype.hackWssInTransport;
 /** @type {number} */
ConfigurationParameters.prototype.iceCheckingTimeout;
 /** @type {string} */
ConfigurationParameters.prototype.instanceId;
 /** @type {number} */
ConfigurationParameters.prototype.keepAliveInterval;
 /** @type {?} */
ConfigurationParameters.prototype.log;
 /** @type {?} */
ConfigurationParameters.prototype.mediaHandlerFactory;
 /** @type {number} */
ConfigurationParameters.prototype.noAnswerTimeout;
 /** @type {string} */
ConfigurationParameters.prototype.password;
 /** @type {boolean} */
ConfigurationParameters.prototype.register;
 /** @type {number} */
ConfigurationParameters.prototype.registerExpires;
 /** @type {string} */
ConfigurationParameters.prototype.registrarServer;
 /** @type {string} */
ConfigurationParameters.prototype.rel100;
 /** @type {string} */
ConfigurationParameters.prototype.replaces;
 /** @type {string} */
ConfigurationParameters.prototype.rtcpMuxPolicy;
 /** @type {(string|!Array<string>)} */
ConfigurationParameters.prototype.stunServers;
 /** @type {boolean} */
ConfigurationParameters.prototype.traceSip;
 /** @type {(?|!Array<?>)} */
ConfigurationParameters.prototype.turnServers;
 /** @type {boolean} */
ConfigurationParameters.prototype.usePreloadedRoute;
 /** @type {string} */
ConfigurationParameters.prototype.userAgentString;
 /** @type {number} */
ConfigurationParameters.prototype.wsServerMaxReconnection;
 /** @type {number} */
ConfigurationParameters.prototype.wsServerReconnectionTimeout;
/**
 * @record
 * @struct
 */
function ExtraHeadersOptions() {}
 /** @type {!Array<string>} */
ExtraHeadersOptions.prototype.extraHeaders;
/**
 * @extends {ExtraHeadersOptions}
 * @record
 * @struct
 */
function UnregisterOptions() {}
 /** @type {boolean} */
UnregisterOptions.prototype.all;
/**
 * @extends {ExtraHeadersOptions}
 * @record
 * @struct
 */
function MessageOptions() {}
 /** @type {string} */
MessageOptions.prototype.contentType;
/**
 * @extends {ExtraHeadersOptions}
 * @record
 * @struct
 */
function SubscribeOptions() {}
 /** @type {number} */
SubscribeOptions.prototype.expires;
/**
 * @record
 * @struct
 */
function MediaOptions() {}
 /** @type {?} */
MediaOptions.prototype.constraints;
 /** @type {?} */
MediaOptions.prototype.stream;
 /** @type {?} */
MediaOptions.prototype.render;
/**
 * @extends {ExtraHeadersOptions}
 * @record
 * @struct
 */
function InviteOptions() {}
 /** @type {?} */
InviteOptions.prototype.media;
 /** @type {boolean} */
InviteOptions.prototype.anonymous;
 /** @type {string} */
InviteOptions.prototype.rel100;
 /** @type {boolean} */
InviteOptions.prototype.inviteWithoutSdp;
 /** @type {?} */
InviteOptions.prototype.RTCConstraints;
/**
 * @extends {ExtraHeadersOptions}
 * @record
 * @struct
 */
function RequestOptions() {}
 /** @type {string} */
RequestOptions.prototype.body;
/**
 * @extends {ClientContext}
 * @record
 * @struct
 */
function Message() {}
 /** @type {string} */
Message.prototype.body;
/**
 * @extends {ClientContext}
 * @record
 * @struct
 */
function Subscription() {}
 /** @type {string} */
Subscription.prototype.id;
 /** @type {string} */
Subscription.prototype.state;
 /** @type {string} */
Subscription.prototype.event;
 /** @type {string} */
Subscription.prototype.dialog;
 /** @type {!Object} */
Subscription.prototype.timers;
 /** @type {!Array<number>} */
Subscription.prototype.errorCodes;

/**
 * @return {?}
 */
Subscription.prototype.subscribe = function() {};

/**
 * @return {void}
 */
Subscription.prototype.unsubscribe = function() {};

/**
 * @return {void}
 */
Subscription.prototype.close = function() {};
/**
 * @record
 * @struct
 */
function Context() {}
 /** @type {?} */
Context.prototype.ua;
 /** @type {string} */
Context.prototype.method;
 /** @type {?} */
Context.prototype.request;
 /** @type {?} */
Context.prototype.localIdentity;
 /** @type {?} */
Context.prototype.remoteIdentity;
 /** @type {!Object} */
Context.prototype.data;

/**
 * @param {string} name
 * @param {?} callback
 * @return {void}
 */
Context.prototype.on = function(name, callback) {};
/**
 * @extends {Context}
 * @record
 * @struct
 */
function ClientContext() {}

/**
 * @param {?=} options
 * @return {?}
 */
ClientContext.prototype.cancel = function(options) {};
/**
 * @extends {Context}
 * @record
 * @struct
 */
function ServerContext() {}

/**
 * @param {?=} options
 * @return {void}
 */
ServerContext.prototype.progress = function(options) {};

/**
 * @param {?=} options
 * @return {void}
 */
ServerContext.prototype.accept = function(options) {};

/**
 * @param {?=} options
 * @return {void}
 */
ServerContext.prototype.reject = function(options) {};

/**
 * @param {?=} options
 * @return {void}
 */
ServerContext.prototype.reply = function(options) {};
/**
 * @extends {Context}
 * @record
 * @struct
 */
function Request() {}
/**
 * @extends {Request}
 * @record
 * @struct
 */
function IncomingRequest() {}
/**
 * @extends {Request}
 * @record
 * @struct
 */
function OutgoingRequest() {}
/**
 * @extends {Request}
 * @record
 * @struct
 */
function IncomingResponse() {}
/**
 * @extends {Request}
 * @record
 * @struct
 */
function IncomingMessage() {}

/**
 * @constructor
 * @struct
 * @param {(string|?)} uri
 * @param {string} displayName
 * @param {!Array<?>} parameters
 */
function NameAddrHeader(uri, displayName, parameters) {}
 /** @type {(string|?)} */
NameAddrHeader.prototype.uri;
 /** @type {string} */
NameAddrHeader.prototype.displayName;

/**
 * @param {string} name_addr_header
 * @return {?}
 */
NameAddrHeader.parse = function(name_addr_header) {};

/**
 * @param {string} key
 * @param {string=} value
 * @return {void}
 */
NameAddrHeader.prototype.setParam = function(key, value) {};

/**
 * @param {string} key
 * @return {string}
 */
NameAddrHeader.prototype.getParam = function(key) {};

/**
 * @param {string} key
 * @return {string}
 */
NameAddrHeader.prototype.deleteParam = function(key) {};

/**
 * @return {void}
 */
NameAddrHeader.prototype.clearParams = function() {};
