/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/webappsec-credential-management/index.d.ts:

/**
 * @param {(string|!Request)} url
 * @param {!CMRequestInit=} init
 * @return {!Promise<!Response>}
 */
GlobalFetch.prototype.fetch = function(url, init) {};
/**
 * @record
 * @struct
 */
function CMRequestInit() {}
 /** @type {string} */
CMRequestInit.prototype.method;
 /** @type {?} */
CMRequestInit.prototype.headers;
 /** @type {?} */
CMRequestInit.prototype.body;
 /** @type {string} */
CMRequestInit.prototype.referrer;
 /** @type {string} */
CMRequestInit.prototype.referrerPolicy;
 /** @type {string} */
CMRequestInit.prototype.mode;
 /** @type {(string|!PasswordCredential)} */
CMRequestInit.prototype.credentials;
 /** @type {string} */
CMRequestInit.prototype.cache;
 /** @type {string} */
CMRequestInit.prototype.redirect;
 /** @type {string} */
CMRequestInit.prototype.integrity;
 /** @type {boolean} */
CMRequestInit.prototype.keepalive;
 /** @type {?} */
CMRequestInit.prototype.window;
 /** @type {!CredentialsContainer} */
Navigator.prototype.credentials;
/**
 * @record
 * @struct
 */
function CredentialsContainer() {}

/**
 * Request a credential from the credential manager.
 * 
 * @see {\@link https://www.w3.org/TR/credential-management-1/#dom-credentialscontainer-get}
 * @param {!CredentialRequestOptions=} options 
 *     Contains an object filled with type-specific sets of parameters
 *     which will be used to select a particular {\@link Credential} to
 *     return.
 * @return {!Promise<(!PasswordCredential|!FederatedCredential)>}
 */
CredentialsContainer.prototype.get = function(options) {};

/**
 * Ask the credential manager to store a {\@link Credential} for the user.
 * Authors could call this method after a user successfully signs in, or
 * after a successful password change operation.
 * 
 * @see {\@link https://www.w3.org/TR/credential-management-1/#dom-credentialscontainer-store}
 * @param {(!PasswordCredential|!FederatedCredential)} credential
 * @return {!Promise<(!PasswordCredential|!FederatedCredential)>}
 */
CredentialsContainer.prototype.store = function(credential) {};

/**
 * Create a {\@link Credential} asynchronously.
 * 
 * @see {\@link https://www.w3.org/TR/2017/WD-credential-management-1-20170804/#dom-credentialscontainer-create}
 * @param {!CredentialCreationOptions} options
 * @return {!Promise<(!PasswordCredential|!FederatedCredential)>}
 */
CredentialsContainer.prototype.create = function(options) {};

/**
 * Ask the credential manager to require user mediation before returning
 * credentials for the origin in which the method is called. This might be
 * called after a user signs out of a website, for instance, in order to
 * ensure that they are not automatically signed back in next time they
 * visits.
 * 
 * @deprecated Use {\@link preventSilentAccess} instead.
 * @see {\@link https://www.w3.org/TR/2016/WD-credential-management-1-20160425/#dom-credentialscontainer-requireusermediation}
 * @return {!Promise<void>}
 */
CredentialsContainer.prototype.requireUserMediation = function() {};

/**
 * Ask the credential manager to require user mediation before returning
 * credentials for the origin in which the method is called. This might be
 * called after a user signs out of a website, for instance, in order to
 * ensure that they are not automatically signed back in next time they
 * visits.
 * 
 * @see {\@link https://www.w3.org/TR/2017/WD-credential-management-1-20170804/#dom-credentialscontainer-preventsilentaccess}
 * @return {!Promise<void>}
 */
CredentialsContainer.prototype.preventSilentAccess = function() {};
/**
 * @record
 * @struct
 */
function CredentialData() {}
 /** @type {string} */
CredentialData.prototype.id;

/** @typedef {(!PasswordCredential|!FederatedCredential)} */
var Credential;
/**
 * @constructor
 * @struct
 */
function CredentialBase() {}
 /** @type {string} */
CredentialBase.prototype.id;
 /** @type {string} */
CredentialBase.prototype.type;
/**
 * @extends {CredentialData}
 * @record
 * @struct
 */
function SiteBoundCredentialData() {}
 /** @type {string} */
SiteBoundCredentialData.prototype.name;
 /** @type {string} */
SiteBoundCredentialData.prototype.iconURL;
/**
 * @extends {CredentialBase}
 * @constructor
 * @struct
 */
function SiteBoundCredential() {}
 /** @type {string} */
SiteBoundCredential.prototype.name;
 /** @type {string} */
SiteBoundCredential.prototype.iconURL;
/**
 * @extends {SiteBoundCredentialData}
 * @record
 * @struct
 */
function PasswordCredentialData() {}
 /** @type {string} */
PasswordCredentialData.prototype.password;

/** @typedef {(!FormData|!URLSearchParams)} */
var CredentialBodyType;

/**
 * @constructor
 * @struct
 * @see {\@link https://www.w3.org/TR/credential-management-1/#dom-passwordcredential-passwordcredential-data}
 * @see {\@link https://www.w3.org/TR/credential-management-1/#dom-passwordcredential-passwordcredential}
 * @param {(!PasswordCredentialData|!HTMLFormElement)} data
 */
function PasswordCredential(data) {}
 /** @type {string} */
PasswordCredential.prototype.type;
 /** @type {string} */
PasswordCredential.prototype.idName;
 /** @type {string} */
PasswordCredential.prototype.passwordName;
 /** @type {(!FormData|!URLSearchParams)} */
PasswordCredential.prototype.additionalData;
 /** @type {string} */
PasswordCredential.prototype.password;
/**
 * @extends {SiteBoundCredentialData}
 * @record
 * @struct
 */
function FederatedCredentialData() {}
 /** @type {string} */
FederatedCredentialData.prototype.provider;
 /** @type {string} */
FederatedCredentialData.prototype.protocol;

/**
 * @constructor
 * @struct
 * @param {!FederatedCredentialData} data
 */
function FederatedCredential(data) {}
 /** @type {string} */
FederatedCredential.prototype.type;
 /** @type {string} */
FederatedCredential.prototype.provider;
 /** @type {string} */
FederatedCredential.prototype.protocol;

/** @typedef {string} */
var CredentialMediationRequirement;
/**
 * @record
 * @struct
 */
function CredentialRequestOptions() {}
 /** @type {boolean} */
CredentialRequestOptions.prototype.password;
 /** @type {!FederatedCredentialRequestOptions} */
CredentialRequestOptions.prototype.federated;
 /** @type {boolean} */
CredentialRequestOptions.prototype.unmediated;
 /** @type {string} */
CredentialRequestOptions.prototype.mediation;

/** @typedef {(!PasswordCredentialData|!HTMLFormElement)} */
var PasswordCredentialInit;

/** @typedef {!FederatedCredentialData} */
var FederatedCredentialInit;
/**
 * @record
 * @struct
 */
function CredentialCreationOptions() {}
 /** @type {(!PasswordCredentialData|!HTMLFormElement)} */
CredentialCreationOptions.prototype.password;
 /** @type {!FederatedCredentialData} */
CredentialCreationOptions.prototype.federated;
/**
 * @record
 * @struct
 */
function FederatedCredentialRequestOptions() {}
 /** @type {!Array<string>} */
FederatedCredentialRequestOptions.prototype.providers;
 /** @type {!Array<string>} */
FederatedCredentialRequestOptions.prototype.protocols;
