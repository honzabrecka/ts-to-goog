/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/browser-harness/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */
/**
 * @record
 * @struct
 */
function HarnessEvents() {}

/**
 * @param {string} event
 * @param {?} listener
 * @return {?}
 */
HarnessEvents.prototype.once = function(event, listener) {};

/**
 * @param {string} event
 * @param {?} listener
 * @return {?}
 */
HarnessEvents.prototype.on = function(event, listener) {};
/**
 * @record
 * @struct
 */
function DriverEvents() {}

/**
 * @param {string} event
 * @param {?} listener
 * @return {?}
 */
DriverEvents.prototype.once = function(event, listener) {};

/**
 * @param {string} event
 * @param {?} listener
 * @return {?}
 */
DriverEvents.prototype.on = function(event, listener) {};
/**
 * @record
 * @struct
 */
function Driver() {}
 /** @type {?} */
Driver.prototype.events;

/**
 * @param {?|!Function} args_or_func
 * @param {!Function=} callback
 * @return {?}
 */
Driver.prototype.exec = function(args_or_func, callback) {};

/**
 * @param {string} url
 * @param {!Function=} callback
 * @return {?}
 */
Driver.prototype.setUrl = function(url, callback) {};

/**
 * @param {?|!Function} args_or_condition
 * @param {!Function=} callback
 * @return {?}
 */
Driver.prototype.waitFor = function(args_or_condition, callback) {};

/**
 * @param {string} selector
 * @param {?=} callback
 * @return {?}
 */
Driver.prototype.findElement = function(selector, callback) {};

/**
 * @param {string} selector
 * @param {?=} callback
 * @return {?}
 */
Driver.prototype.findElements = function(selector, callback) {};

/**
 * @param {string} selector
 * @param {?=} callback
 * @return {?}
 */
Driver.prototype.findVisible = function(selector, callback) {};

/**
 * @param {string} selector
 * @param {?=} callback
 * @return {?}
 */
Driver.prototype.findVisibles = function(selector, callback) {};

/**
 * @param {string} selector
 * @param {?=} callback
 * @return {?}
 */
Driver.prototype.find = function(selector, callback) {};
/**
 * @record
 * @struct
 */
function ElementProxy() {}

/**
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.click = function(callback) {};

/**
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.focus = function(callback) {};

/**
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.blur = function(callback) {};

/**
 * @param {string=} value
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.val = function(value, callback) {};

/**
 * @param {string} name
 * @param {string=} value
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.attr = function(name, value, callback) {};

/**
 * @param {string} name
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.removeAttr = function(name, callback) {};

/**
 * @param {string} name
 * @param {string=} value
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.prop = function(name, value, callback) {};

/**
 * @param {string} name
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.removeProp = function(name, callback) {};

/**
 * @param {string=} value
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.html = function(value, callback) {};

/**
 * @param {string=} value
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.text = function(value, callback) {};

/**
 * @param {string} className
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.hasClass = function(className, callback) {};

/**
 * @param {string} className
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.addClass = function(className, callback) {};

/**
 * @param {string} className
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.removeClass = function(className, callback) {};

/**
 * @param {string} className
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.toggleClass = function(className, callback) {};

/**
 * @param {string} event
 * @param {?=} extraParameters
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.trigger = function(event, extraParameters, callback) {};

/**
 * @param {string} event
 * @param {?=} extraParameters
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.triggerHandler = function(event, extraParameters, callback) {};

/**
 * @param {string} name
 * @param {string=} value
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.css = function(name, value, callback) {};

/**
 * @param {?=} value
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.height = function(value, callback) {};

/**
 * @param {?=} value
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.innerHeight = function(value, callback) {};

/**
 * @param {?=} value
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.outerHeight = function(value, callback) {};

/**
 * @param {?=} value
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.width = function(value, callback) {};

/**
 * @param {?=} value
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.innerWidth = function(value, callback) {};

/**
 * @param {?=} value
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.outerWidth = function(value, callback) {};

/**
 * @param {?=} value
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.offset = function(value, callback) {};

/**
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.position = function(callback) {};

/**
 * @param {number=} value
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.scrollLeft = function(value, callback) {};

/**
 * @param {number=} value
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.scrollTop = function(value, callback) {};

/**
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.hide = function(callback) {};

/**
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.show = function(callback) {};

/**
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.toggle = function(callback) {};

/**
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.children = function(callback) {};

/**
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.closest = function(callback) {};

/**
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.contents = function(callback) {};

/**
 * @param {string} selector
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.find = function(selector, callback) {};

/**
 * @param {string} selector
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.findElements = function(selector, callback) {};

/**
 * @param {string} selector
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.findElement = function(selector, callback) {};

/**
 * @param {string} selector
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.findVisible = function(selector, callback) {};

/**
 * @param {string} selector
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.findVisibles = function(selector, callback) {};

/**
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.isActionable = function(callback) {};

/**
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.first = function(callback) {};

/**
 * @param {?} arg
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.has = function(arg, callback) {};

/**
 * @param {?} arg
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.is = function(arg, callback) {};

/**
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.last = function(callback) {};

/**
 * @param {string=} selector
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.next = function(selector, callback) {};

/**
 * @param {string=} selector
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.nextAll = function(selector, callback) {};

/**
 * @param {string=} selector
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.nextUntil = function(selector, callback) {};

/**
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.offsetParent = function(callback) {};

/**
 * @param {string=} selector
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.parent = function(selector, callback) {};

/**
 * @param {string=} selector
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.parents = function(selector, callback) {};

/**
 * @param {string=} selector
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.parentsUntil = function(selector, callback) {};

/**
 * @param {string=} selector
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.prev = function(selector, callback) {};

/**
 * @param {string=} selector
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.prevAll = function(selector, callback) {};

/**
 * @param {string=} selector
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.prevUntil = function(selector, callback) {};

/**
 * @param {string=} selector
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.siblings = function(selector, callback) {};

/**
 * @param {string} name
 * @param {?=} value
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.data = function(name, value, callback) {};

/**
 * @param {string} name
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.removeData = function(name, callback) {};

/**
 * @param {?} selector
 * @param {?=} callback
 * @return {?}
 */
ElementProxy.prototype.filter = function(selector, callback) {};

/**
 * @constructor
 * @struct
 * @param {{type: string, location: string, args: ?}} args
 */
function Browser(args) {}

/**
 * @param {string} harnessUrl
 * @param {string=} serverUrl
 * @return {?}
 */
Browser.prototype.open = function(harnessUrl, serverUrl) {};

/**
 * @return {?}
 */
Browser.prototype.close = function() {};

/**
 * @param {number} port
 * @param {!Function=} callback
 * @return {?}
 */
function listen(port, callback) {}
 /** @type {?} */
var events;
 /** @type {{timeoutMS: number, retryMS: number}} */
var config;
