/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/rollup/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/** @typedef {string} */
var Format;
/**
 * @extends {RawSourceMap}
 * @record
 * @struct
 */
function SourceMap() {}

/**
 * @return {string}
 */
SourceMap.prototype.toString = function() {};

/**
 * @return {string}
 */
SourceMap.prototype.toUrl = function() {};
/**
 * @record
 * @struct
 */
function Warning() {}
 /** @type {string} */
Warning.prototype.code;
 /** @type {string} */
Warning.prototype.message;
 /** @type {?} */
Warning.prototype.loc;
 /** @type {string} */
Warning.prototype.frame;
/**
 * @record
 * @struct
 */
function BundleOptions() {}
 /** @type {string} */
BundleOptions.prototype.format;
 /** @type {string} */
BundleOptions.prototype.exports;
 /** @type {string} */
BundleOptions.prototype.moduleId;
 /** @type {string} */
BundleOptions.prototype.moduleName;
 /** @type {?} */
BundleOptions.prototype.globals;
 /** @type {(string|boolean)} */
BundleOptions.prototype.indent;
 /** @type {boolean} */
BundleOptions.prototype.interop;
 /** @type {string} */
BundleOptions.prototype.banner;
 /** @type {string} */
BundleOptions.prototype.footer;
 /** @type {string} */
BundleOptions.prototype.intro;
 /** @type {string} */
BundleOptions.prototype.outro;
 /** @type {boolean} */
BundleOptions.prototype.useStrict;
/**
 * @extends {BundleOptions}
 * @record
 * @struct
 */
function GenerateOptions() {}
 /** @type {boolean} */
GenerateOptions.prototype.sourceMap;
 /** @type {string} */
GenerateOptions.prototype.sourceMapFile;
/**
 * @extends {BundleOptions}
 * @record
 * @struct
 */
function WriteOptions() {}
 /** @type {string} */
WriteOptions.prototype.dest;
 /** @type {(boolean|string)} */
WriteOptions.prototype.sourceMap;
 /** @type {string} */
WriteOptions.prototype.sourceMapFile;
/**
 * @record
 * @struct
 */
function Bundle() {}

/**
 * Generate bundled code as an object
 * @param {?} options
 * @return {?}
 */
Bundle.prototype.generate = function(options) {};

/**
 * writes the file (and accompanying sourcemap file, if appropriate) to the file system.
 * @param {?} options
 * @return {!Promise<void>}
 */
Bundle.prototype.write = function(options) {};
/**
 * @record
 * @struct
 */
function Options() {}
 /** @type {(string|!Array<string>)} */
Options.prototype.entry;
 /** @type {?} */
Options.prototype.cache;
 /** @type {(!Array<string>|?)} */
Options.prototype.external;
 /** @type {?} */
Options.prototype.paths;
 /** @type {(?|!Array<?>)} */
Options.prototype.plugins;
 /** @type {boolean} */
Options.prototype.treeshake;
 /** @type {!acorn.Options} */
Options.prototype.acorn;
 /** @type {?} */
Options.prototype.context;
 /** @type {?} */
Options.prototype.moduleContext;
 /** @type {boolean} */
Options.prototype.legacy;

/**
 * Function that will intercept warning messages. If not supplied, warnings will be deduplicated and printed to the console.
 * @param {?} warning
 * @return {void}
 */
Options.prototype.onwarn = function(warning) {};
/**
 * @record
 * @struct
 */
function Plugin() {}
 /** @type {string} */
Plugin.prototype.name;
 /** @type {(string|?)} */
Plugin.prototype.banner;
 /** @type {(string|?)} */
Plugin.prototype.footer;

/**
 * A function that replaces or manipulates the options object passed to rollup.rollup
 * @param {?} options
 * @return {?}
 */
Plugin.prototype.options = function(options) {};

/**
 * A custom loader. Returning null or undefined defers to other load functions (and eventually the default behavior of loading from the file system).
 * @param {string} id
 * @return {string}
 */
Plugin.prototype.load = function(id) {};

/**
 * Custom resolver (useful for e.g. locating third-party dependencies).
 * Returning null or undefined defers to other resolveId functions (and eventually the default resolution behavior);
 * returning any other falsy value signals that importee should be treated as an external module and not included in the bundle.
 * @param {string} importee
 * @param {string} importer
 * @return {(string|boolean|number)}
 */
Plugin.prototype.resolveId = function(importee, importer) {};

/**
 * A module transformer function
 * @param {string} source
 * @param {string} id
 * @return {(string|?)}
 */
Plugin.prototype.transform = function(source, id) {};

/**
 * A bundle transformer function
 * @param {string} source
 * @param {?} options
 * @return {(string|?)}
 */
Plugin.prototype.transformBundle = function(source, options) {};

/**
 * Function hook called when bundle.generate() is being executed.
 * @param {?} options
 * @param {?} bundle
 * @return {void}
 */
Plugin.prototype.ongenerate = function(options, bundle) {};

/**
 * Function hook called when bundle.write() is being executed, after the file has been written to disk.
 * @param {?} options
 * @param {?} bundle
 * @return {void}
 */
Plugin.prototype.onwrite = function(options, bundle) {};

/**
 * A function for generating intro text
 * @return {string}
 */
Plugin.prototype.intro = function() {};

/**
 * A function for generating outro text
 * @return {string}
 */
Plugin.prototype.outro = function() {};

/**
 * Returns a Promise that resolves with a bundle
 * @param {?} options
 * @return {!Promise<?>}
 */
function rollup(options) {}
