/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/hammerjs v1/index.d.ts:
 /** @type {!HammerStatic} */
var Hammer;
/**
 * @record
 * @struct
 */
function HammerStatic() {}

/* TODO: CallSignature:  */
 /** @type {number} */
HammerStatic.prototype.VERSION;
 /** @type {boolean} */
HammerStatic.prototype.HAS_POINTEREVENTS;
 /** @type {boolean} */
HammerStatic.prototype.HAS_TOUCHEVENTS;
 /** @type {number} */
HammerStatic.prototype.UPDATE_VELOCITY_INTERVAL;
 /** @type {HammerPointerType} */
HammerStatic.prototype.POINTER_MOUSE;
 /** @type {HammerPointerType} */
HammerStatic.prototype.POINTER_TOUCH;
 /** @type {HammerPointerType} */
HammerStatic.prototype.POINTER_PEN;
 /** @type {HammerDirectionType} */
HammerStatic.prototype.DIRECTION_UP;
 /** @type {HammerDirectionType} */
HammerStatic.prototype.DIRECTION_DOWN;
 /** @type {HammerDirectionType} */
HammerStatic.prototype.DIRECTION_LEFT;
 /** @type {HammerDirectionType} */
HammerStatic.prototype.DIRECTION_RIGH;
 /** @type {HammerTouchEventState} */
HammerStatic.prototype.EVENT_START;
 /** @type {HammerTouchEventState} */
HammerStatic.prototype.EVENT_MOVE;
 /** @type {HammerTouchEventState} */
HammerStatic.prototype.EVENT_END;
 /** @type {?} */
HammerStatic.prototype.plugins;
 /** @type {?} */
HammerStatic.prototype.gestures;
 /** @type {boolean} */
HammerStatic.prototype.READY;

/**
 * @constructor
 * @struct
 * @param {?} element
 * @param {!HammerOptions=} options
 */
function HammerInstance(element, options) {}

/**
 * @param {string} gesture
 * @param {function(!HammerEvent): void} handler
 * @return {!HammerInstance}
 */
HammerInstance.prototype.on = function(gesture, handler) {};

/**
 * @param {string} gesture
 * @param {function(!HammerEvent): void} handler
 * @return {!HammerInstance}
 */
HammerInstance.prototype.off = function(gesture, handler) {};

/**
 * @param {boolean} toggle
 * @return {!HammerInstance}
 */
HammerInstance.prototype.enable = function(toggle) {};

/**
 * @param {string} gesture
 * @param {!HammerGestureEventData} eventData
 * @return {!HammerInstance}
 */
HammerInstance.prototype.trigger = function(gesture, eventData) {};
/**
 * @record
 * @struct
 */
function HammerOptions() {}
 /** @type {{contentZooming: string, tapHighlightColor: string, touchAction: string, touchCallout: string, userDrag: string, userSelect: string}} */
HammerOptions.prototype.behavior;
 /** @type {number} */
HammerOptions.prototype.doubleTapDistance;
 /** @type {number} */
HammerOptions.prototype.doubleTapInterval;
 /** @type {boolean} */
HammerOptions.prototype.drag;
 /** @type {boolean} */
HammerOptions.prototype.dragBlockHorizontal;
 /** @type {boolean} */
HammerOptions.prototype.dragBlockVertical;
 /** @type {boolean} */
HammerOptions.prototype.dragDistanceCorrection;
 /** @type {number} */
HammerOptions.prototype.dragLockMinDistance;
 /** @type {boolean} */
HammerOptions.prototype.dragLockToAxis;
 /** @type {number} */
HammerOptions.prototype.dragMaxTouches;
 /** @type {number} */
HammerOptions.prototype.dragMinDistance;
 /** @type {boolean} */
HammerOptions.prototype.gesture;
 /** @type {boolean} */
HammerOptions.prototype.hold;
 /** @type {number} */
HammerOptions.prototype.holdThreshold;
 /** @type {number} */
HammerOptions.prototype.holdTimeout;
 /** @type {boolean} */
HammerOptions.prototype.preventDefault;
 /** @type {boolean} */
HammerOptions.prototype.preventMouse;
 /** @type {boolean} */
HammerOptions.prototype.release;
 /** @type {boolean} */
HammerOptions.prototype.showTouches;
 /** @type {boolean} */
HammerOptions.prototype.swipe;
 /** @type {number} */
HammerOptions.prototype.swipeMaxTouches;
 /** @type {number} */
HammerOptions.prototype.swipeMinTouches;
 /** @type {number} */
HammerOptions.prototype.swipeVelocityX;
 /** @type {number} */
HammerOptions.prototype.swipeVelocityY;
 /** @type {boolean} */
HammerOptions.prototype.tap;
 /** @type {boolean} */
HammerOptions.prototype.tapAlways;
 /** @type {number} */
HammerOptions.prototype.tapMaxDistance;
 /** @type {number} */
HammerOptions.prototype.tapMaxTime;
 /** @type {boolean} */
HammerOptions.prototype.touch;
 /** @type {boolean} */
HammerOptions.prototype.transform;
 /** @type {number} */
HammerOptions.prototype.transformMinRotation;
 /** @type {number} */
HammerOptions.prototype.transformMinScale;
/**
 * @record
 * @struct
 */
function HammerGestureEventData() {}
 /** @type {number} */
HammerGestureEventData.prototype.timestamp;
 /** @type {!HTMLElement} */
HammerGestureEventData.prototype.target;
 /** @type {!Array<!HammerPoint>} */
HammerGestureEventData.prototype.touches;
 /** @type {HammerPointerType} */
HammerGestureEventData.prototype.pointerType;
 /** @type {!HammerPoint} */
HammerGestureEventData.prototype.center;
 /** @type {number} */
HammerGestureEventData.prototype.deltaTime;
 /** @type {number} */
HammerGestureEventData.prototype.deltaX;
 /** @type {number} */
HammerGestureEventData.prototype.deltaY;
 /** @type {number} */
HammerGestureEventData.prototype.velocityX;
 /** @type {number} */
HammerGestureEventData.prototype.velocityY;
 /** @type {number} */
HammerGestureEventData.prototype.angle;
 /** @type {number} */
HammerGestureEventData.prototype.interimAngle;
 /** @type {HammerDirectionType} */
HammerGestureEventData.prototype.direction;
 /** @type {HammerDirectionType} */
HammerGestureEventData.prototype.interimDirection;
 /** @type {number} */
HammerGestureEventData.prototype.distance;
 /** @type {number} */
HammerGestureEventData.prototype.scale;
 /** @type {number} */
HammerGestureEventData.prototype.rotation;
 /** @type {HammerTouchEventState} */
HammerGestureEventData.prototype.eventType;
 /** @type {?} */
HammerGestureEventData.prototype.srcEvent;
 /** @type {?} */
HammerGestureEventData.prototype.startEvent;

/**
 * @return {void}
 */
HammerGestureEventData.prototype.stopPropagation = function() {};

/**
 * @return {void}
 */
HammerGestureEventData.prototype.preventDefault = function() {};

/**
 * @return {void}
 */
HammerGestureEventData.prototype.stopDetect = function() {};
/**
 * @record
 * @struct
 */
function HammerPoint() {}
 /** @type {number} */
HammerPoint.prototype.clientX;
 /** @type {number} */
HammerPoint.prototype.clientY;
 /** @type {number} */
HammerPoint.prototype.pageX;
 /** @type {number} */
HammerPoint.prototype.pageY;
/**
 * @record
 * @struct
 */
function HammerEvent() {}
 /** @type {string} */
HammerEvent.prototype.type;
 /** @type {!HammerGestureEventData} */
HammerEvent.prototype.gesture;

/**
 * @return {void}
 */
HammerEvent.prototype.stopPropagation = function() {};

/**
 * @return {void}
 */
HammerEvent.prototype.preventDefault = function() {};

/** @const */
var HammerPointerType = {};

/** @const */
var HammerDirectionType = {};

/** @const */
var HammerTouchEventState = {};

/**
 * @param {!HammerOptions=} options
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.hammer = function(options) {};
