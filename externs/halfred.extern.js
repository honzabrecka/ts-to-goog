/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/halfred/index.d.ts:
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "halfred"
/** @const */
tsickle_declare_module.halfred = {};

/**
 * halfred.parse(object) returns a Resource object.
 * 
 * @see https://github.com/basti1302/halfred#usage
 * @param {?} object
 * @return {!Resource}
 */
tsickle_declare_module.halfred.parse = function(object) {};

/**
 * @see https://github.com/basti1302/halfred#enabledisable-validation
 * @param {boolean} flag
 * @return {void}
 */
tsickle_declare_module.halfred.enableValidation = function(flag) {};

/**
 * @see https://github.com/basti1302/halfred#enabledisable-validation
 * @return {void}
 */
tsickle_declare_module.halfred.disableValidation = function() {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.halfred.Resource = function() {};

/**
 * Returns an object which has an array for each link that was present in the source object.
 * See below why each link is represented as an array.
 * @return {!LinkCollection}
 */
tsickle_declare_module.halfred.Resource.prototype.allLinkArrays = function() {};

/**
 * Alias for allLinkArrays()
 * @return {!LinkCollection}
 */
tsickle_declare_module.halfred.Resource.prototype.allLinks = function() {};

/**
 * Returns the array of links for the given key, or null if there are no links for this key.
 * @param {string} key
 * @return {!Array<!Link>}
 */
tsickle_declare_module.halfred.Resource.prototype.linkArray = function(key) {};

/**
 * Returns the first element of the array of links for the given key or null if there are no
 * links for this key.
 * @param {string} key
 * @return {!Link}
 */
tsickle_declare_module.halfred.Resource.prototype.link = function(key) {};

/**
 * Returns an object which has an array for each embedded resource that was present in the
 * source object.
 * See below why each embedded resource is represented as an array. Each element of any of
 * this arrays is in turn a Resource object.
 * @return {!ResourceCollection}
 */
tsickle_declare_module.halfred.Resource.prototype.allEmbeddedResourceArrays = function() {};

/**
 * Alias for allEmbeddedResourceArrays()
 * @return {!ResourceCollection}
 */
tsickle_declare_module.halfred.Resource.prototype.allEmbeddedArrays = function() {};

/**
 * Alias for allEmbeddedResourceArrays()
 * @return {!ResourceCollection}
 */
tsickle_declare_module.halfred.Resource.prototype.allEmbeddedResources = function() {};

/**
 * Returns the array of embedded resources for the given key, or null if there are no embedded
 * resources for this key. Each element of this arrays is in turn a Resource object.
 * @param {string} key
 * @return {!Array<!Resource>}
 */
tsickle_declare_module.halfred.Resource.prototype.embeddedResourceArray = function(key) {};

/**
 * Alias for embeddedResourceArray()
 * @param {string} key
 * @return {!Array<!Resource>}
 */
tsickle_declare_module.halfred.Resource.prototype.embeddedArray = function(key) {};

/**
 * Returns the first element of the array of embedded resources for the given key or null if
 * there are no embedded resources for this key. The returend object is a Resource object.
 * @param {string} key
 * @return {!Resource}
 */
tsickle_declare_module.halfred.Resource.prototype.embeddedResource = function(key) {};

/**
 * Alias for embeddedResource(key)
 * @param {string} key
 * @return {!Resource}
 */
tsickle_declare_module.halfred.Resource.prototype.embedded = function(key) {};

/**
 * Returns the unmodified, original object that was parsed to this resource. This is rather
 * uninteresting for the source object you give to the parse method (because you probably
 * still have a reference to the source object) but it is a convenient way to get the part of
 * the source object that corresponds to an embedded resource.
 * @return {?}
 */
tsickle_declare_module.halfred.Resource.prototype.original = function() {};

/**
 * Returns true if the resource has any CURIEs (Compact URIs).
 * 
 * @see http://www.w3.org/TR/2010/NOTE-curie-20101216/
 * @return {boolean}
 */
tsickle_declare_module.halfred.Resource.prototype.hasCuries = function() {};

/**
 * Returns the array of CURIEs. Each object in the array is a link object, which means it
 * can be templated etc. See below for the link object API.
 * @return {!Array<!Link>}
 */
tsickle_declare_module.halfred.Resource.prototype.curieArray = function() {};

/**
 * Returns the curie with the given name, if any. The returned object is a link object, which
 * means it can be templated etc. See below for link object API.
 * @param {string} name
 * @return {!Link}
 */
tsickle_declare_module.halfred.Resource.prototype.curie = function(name) {};

/**
 * Returns the compact URI for the given full URL, if any
 * @param {string} fullUrl
 * @return {string}
 */
tsickle_declare_module.halfred.Resource.prototype.reverseResolveCurie = function(fullUrl) {};

/**
 * Returns all validation issues. Validation issues are only gathered if validation has been
 * turned on by calling ``halfred.enableValidation()`` before calling ``halfred.parse``.
 * @return {?}
 */
tsickle_declare_module.halfred.Resource.prototype.validationIssues = function() {};

/**
 * Alias for validationIssues()
 * @return {?}
 */
tsickle_declare_module.halfred.Resource.prototype.validation = function() {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.halfred.ResourceCollection = function() {};

/* TODO: IndexSignature: tsickle_declare_module.halfred */
/**
 * @record
 * @struct
 */
tsickle_declare_module.halfred.LinkCollection = function() {};

/* TODO: IndexSignature: tsickle_declare_module.halfred */
/**
 * @record
 * @struct
 */
tsickle_declare_module.halfred.Link = function() {};
 /** @type {string} */
tsickle_declare_module.halfred.Link.prototype.href;
 /** @type {boolean} */
tsickle_declare_module.halfred.Link.prototype.templated;
 /** @type {string} */
tsickle_declare_module.halfred.Link.prototype.type;
 /** @type {string} */
tsickle_declare_module.halfred.Link.prototype.deprecation;
 /** @type {string} */
tsickle_declare_module.halfred.Link.prototype.name;
 /** @type {string} */
tsickle_declare_module.halfred.Link.prototype.profile;
 /** @type {string} */
tsickle_declare_module.halfred.Link.prototype.title;
 /** @type {string} */
tsickle_declare_module.halfred.Link.prototype.hreflang;
