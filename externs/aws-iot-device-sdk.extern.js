/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/aws-iot-device-sdk/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */
/**
 * @extends {mqtt.ClientOptions}
 * @record
 * @struct
 */
function DeviceOptions() {}
 /** @type {string} */
DeviceOptions.prototype.region;
 /** @type {string} */
DeviceOptions.prototype.clientId;
 /** @type {string} */
DeviceOptions.prototype.certPath;
 /** @type {string} */
DeviceOptions.prototype.keyPath;
 /** @type {string} */
DeviceOptions.prototype.caPath;
 /** @type {string} */
DeviceOptions.prototype.clientCert;
 /** @type {string} */
DeviceOptions.prototype.privateKey;
 /** @type {string} */
DeviceOptions.prototype.caCert;
 /** @type {boolean} */
DeviceOptions.prototype.autoResubscribe;
 /** @type {boolean} */
DeviceOptions.prototype.offlineQueueing;
 /** @type {number} */
DeviceOptions.prototype.offlineQueueMaxSize;
 /** @type {string} */
DeviceOptions.prototype.offlineQueueDropBehavior;
 /** @type {number} */
DeviceOptions.prototype.drainTimeMs;
 /** @type {number} */
DeviceOptions.prototype.baseReconnectTimeMs;
 /** @type {number} */
DeviceOptions.prototype.maximumReconnectTimeMs;
 /** @type {number} */
DeviceOptions.prototype.minimumConnectionTimeMs;
 /** @type {string} */
DeviceOptions.prototype.protocol;
 /** @type {!WebSocket.IClientOptions} */
DeviceOptions.prototype.websocketOptions;
 /** @type {string} */
DeviceOptions.prototype.accessKeyId;
 /** @type {string} */
DeviceOptions.prototype.secretKey;
 /** @type {string} */
DeviceOptions.prototype.sessionToken;
 /** @type {string} */
DeviceOptions.prototype.host;
 /** @type {number} */
DeviceOptions.prototype.port;
 /** @type {boolean} */
DeviceOptions.prototype.debug;

/**
 * @constructor
 * @struct
 * Returns a wrapper for the mqtt.Client() class, configured for a TLS
 * connection with the AWS IoT platform and with arguments as specified
 * in options.
 * @param {?=} options
 */
function device(options) {}

/**
 * Update the credentials set used to authenticate via WebSocket/SigV4.
 * 
 * This method is designed to be invoked during the callback of the
 * getCredentialsForIdentity method in the AWS SDK for JavaScript.
 * @param {string} accessKeyId
 * @param {string} secretKey
 * @param {string} sessionToken
 * @param {!Date} expiration
 * @return {void}
 */
device.prototype.updateWebSocketCredentials = function(accessKeyId, secretKey, sessionToken, expiration) {};

/**
 * Emitted when a message is received on a topic not related to any Thing Shadows
 * @param {string} event
 * @param {?} listener
 * @return {?}
 */
device.prototype.on = function(event, listener) {};

/**
 * Publish a message to a topic
 * 
 * @param {string} topic to publish to
 * @param {(string|?)} message to publish
 * @param {!mqtt.ClientPublishOptions=} options
 * @param {?=} callback
 * @return {!mqtt.Client}
 */
device.prototype.publish = function(topic, message, options, callback) {};

/**
 * Subscribe to a topic or topics
 * @param {(string|!Array<string>|!mqtt.Topic)} topic to subscribe to or an Array of topics to subscribe to. It can also be an object.
 * @param {!mqtt.ClientSubscribeOptions=} options
 * @param {!mqtt.ClientSubscribeCallback=} callback fired on suback
 * @return {!mqtt.Client}
 */
device.prototype.subscribe = function(topic, options, callback) {};

/**
 * Unsubscribe from a topic or topics
 * 
 * @param {(string|!Array<string>)} topic  is a String topic or an array of topics to unsubscribe from
 * @param {!mqtt.ClientSubscribeOptions=} options
 * @param {!mqtt.ClientSubscribeCallback=} callback  fired on unsuback
 * @return {!mqtt.Client}
 */
device.prototype.unsubscribe = function(topic, options, callback) {};

/**
 * end - close connection
 * 
 * @param {boolean=} force passing it to true will close the client right away, without waiting for the in-flight messages to be acked.
 *     This parameter is optional.
 * @param {!Function=} callback
 * @return {!mqtt.Client}
 */
device.prototype.end = function(force, callback) {};
/**
 * @extends {DeviceOptions}
 * @record
 * @struct
 */
function ThingShadowOptions() {}
 /** @type {number} */
ThingShadowOptions.prototype.operationTimeout;
/**
 * @record
 * @struct
 */
function RegisterOptions() {}
 /** @type {boolean} */
RegisterOptions.prototype.ignoreDeltas;
 /** @type {boolean} */
RegisterOptions.prototype.persistentSubscribe;
 /** @type {boolean} */
RegisterOptions.prototype.discardStale;
 /** @type {boolean} */
RegisterOptions.prototype.enableVersioning;

/**
 * @constructor
 * @struct
 * @param {?=} options
 */
function thingShadow(options) {}

/**
 * Register interest in the Thing Shadow named thingName.
 * 
 * The thingShadow class will subscribe to any applicable topics, and will
 * fire events for the Thing Shadow until awsIot.thingShadow#unregister()
 * is called with thingName
 * 
 * If the callback parameter is provided, it will be invoked after
 * registration is complete (i.e., when subscription ACKs have been received
 * for all shadow topics). Applications should wait until shadow
 * registration is complete before performing update/get/delete operations.
 * @param {string} thingName
 * @param {?=} options
 * @param {?=} callback
 * @return {void}
 */
thingShadow.prototype.register = function(thingName, options, callback) {};

/**
 * Unregister interest in the Thing Shadow named thingName.
 * 
 * The thingShadow class will unsubscribe from all applicable topics
 * and no more events will be fired for thingName.
 * @param {string} thingName
 * @return {void}
 */
thingShadow.prototype.unregister = function(thingName) {};

/**
 * Update the Thing Shadow named thingName with the state specified in the
 * JavaScript object stateObject. thingName must have been previously
 * registered using awsIot.thingShadow#register().
 * 
 * The thingShadow class will subscribe to all applicable topics and
 * publish stateObject on the update sub-topic.
 * 
 * This function returns a clientToken, which is a unique value associated
 * with the update operation. When a "status" or "timeout" event is emitted,
 * the clientToken will be supplied as one of the parameters, allowing the
 * application to keep track of the status of each operation. The caller may
 * create their own clientToken value; if stateObject contains a clientToken
 * property, that will be used rather than the internally generated value.
 * Note that it should be of atomic type (i.e. numeric or string).
 * This function returns "null" if an operation is already in progress.
 * @param {string} thingName
 * @param {?} stateObject
 * @return {string}
 */
thingShadow.prototype.update = function(thingName, stateObject) {};

/**
 * Get the current state of the Thing Shadow named thingName, which must
 * have been previously registered using awsIot.thingShadow#register().
 * The thingShadow class will subscribe to all applicable topics and
 * publish on the get sub-topic.
 * 
 * This function returns a clientToken, which is a unique value
 * associated with the get operation. When a "status or "timeout" event
 * is emitted, the clientToken will be supplied as one of the parameters,
 * allowing the application to keep track of the status of each operation.
 * The caller may supply their own clientToken value (optional); if
 * supplied, the value of clientToken will be used rather than the
 * internally generated value. Note that this value should be of atomic
 * type (i.e. numeric or string). This function returns "null" if an
 * operation is already in progress.
 * @param {string} thingName
 * @param {string=} clientToken
 * @return {string}
 */
thingShadow.prototype.get = function(thingName, clientToken) {};

/**
 * Delete the Thing Shadow named thingName, which must have been previously
 * registered using awsIot.thingShadow#register(). The thingShadow class
 * will subscribe to all applicable topics and publish on the delete sub-topic.
 * 
 * This function returns a clientToken, which is a unique value associated
 * with the delete operation. When a "status" or "timeout" event is
 * emitted, the clientToken will be supplied as one of the parameters,
 * allowing the application to keep track of the status of each operation.
 * The caller may supply their own clientToken value (optional); if
 * supplied, the value of clientToken will be used rather than the
 * internally generated value. Note that this value should be of atomic
 * type (i.e. numeric or string). This function returns "null" if an
 * operation is already in progress.
 * @param {string} thingName
 * @param {string=} clientToken
 * @return {string}
 */
thingShadow.prototype.delete = function(thingName, clientToken) {};

/**
 * Publish a message to a topic
 * 
 * @param {string} topic
 * @param {?|string} message
 * @param {!mqtt.ClientPublishOptions=} options
 * @param {!Function=} callback
 * @return {!mqtt.Client}
 */
thingShadow.prototype.publish = function(topic, message, options, callback) {};

/**
 * Subscribe to a topic or topics
 * @param {string|!Array<string>|!mqtt.Topic} topic to subscribe to or an Array of topics to subscribe to. It can also be an object.
 * @param {!mqtt.ClientSubscribeOptions=} options
 * @param {!mqtt.ClientSubscribeCallback=} callback fired on suback
 * @return {!mqtt.Client}
 */
thingShadow.prototype.subscribe = function(topic, options, callback) {};

/**
 * Unsubscribe from a topic or topics
 * 
 * @param {string|!Array<string>} topic  is a String topic or an array of topics to unsubscribe from
 * @param {!mqtt.ClientSubscribeOptions=} options
 * @param {!mqtt.ClientSubscribeCallback=} callback  fired on unsuback
 * @return {!mqtt.Client}
 */
thingShadow.prototype.unsubscribe = function(topic, options, callback) {};

/**
 * end - close connection
 * 
 * @param {boolean=} force passing it to true will close the client right away, without waiting for the in-flight messages to be acked.
 *     This parameter is optional.
 * @param {!Function=} callback
 * @return {!mqtt.Client}
 */
thingShadow.prototype.end = function(force, callback) {};

/**
 * Emitted when a message is received on a topic not related to any Thing Shadows
 * Emitted when an operation update|get|delete completes.
 * 
 * thingName - name of the Thing Shadow for which the operation has completed
 * stat - status of the operation accepted|rejected
 * clientToken - the operation"s clientToken
 * stateObject - the stateObject returned for the operation
 * 
 * Applications can use clientToken values to correlate status events with
 * the operations that they are associated with by saving the clientTokens
 * returned from each operation.
 * Emitted when an operation update|get|delete has timed out.
 * Emitted when a delta has been received for a registered Thing Shadow.
 * Emitted when a different client"s update or delete operation is accepted on the shadow.
 * @param {string} event
 * @param {?} listener
 * @return {?}
 */
thingShadow.prototype.on = function(event, listener) {};
