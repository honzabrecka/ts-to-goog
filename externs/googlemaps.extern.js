/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/googlemaps/index.d.ts:
/** @const */
var google = {};
/** @const */
google.maps = {};

/**
 * @constructor
 * @struct
 * @param {!Element} mapDiv
 * @param {!google.maps.MapOptions=} opts
 */
google.maps.Map = function(mapDiv, opts) {};
 /** @type {!Array<!google.maps.MVCArray<!Node>>} */
google.maps.Map.prototype.controls;
 /** @type {!google.maps.Data} */
google.maps.Map.prototype.data;
 /** @type {!google.maps.MapTypeRegistry} */
google.maps.Map.prototype.mapTypes;
 /** @type {!google.maps.MVCArray<!google.maps.MapType>} */
google.maps.Map.prototype.overlayMapTypes;

/**
 * @param {(!google.maps.LatLngBounds|{east: number, north: number, south: number, west: number})} bounds
 * @return {void}
 */
google.maps.Map.prototype.fitBounds = function(bounds) {};

/**
 * @return {!google.maps.LatLngBounds}
 */
google.maps.Map.prototype.getBounds = function() {};

/**
 * @return {!google.maps.LatLng}
 */
google.maps.Map.prototype.getCenter = function() {};

/**
 * @return {!Element}
 */
google.maps.Map.prototype.getDiv = function() {};

/**
 * @return {number}
 */
google.maps.Map.prototype.getHeading = function() {};

/**
 * @return {(string|google.maps.MapTypeId)}
 */
google.maps.Map.prototype.getMapTypeId = function() {};

/**
 * @return {!google.maps.Projection}
 */
google.maps.Map.prototype.getProjection = function() {};

/**
 * @return {!google.maps.StreetViewPanorama}
 */
google.maps.Map.prototype.getStreetView = function() {};

/**
 * @return {number}
 */
google.maps.Map.prototype.getTilt = function() {};

/**
 * @return {number}
 */
google.maps.Map.prototype.getZoom = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
google.maps.Map.prototype.panBy = function(x, y) {};

/**
 * @param {(!google.maps.LatLng|{lat: number, lng: number})} latLng
 * @return {void}
 */
google.maps.Map.prototype.panTo = function(latLng) {};

/**
 * @param {(!google.maps.LatLngBounds|{east: number, north: number, south: number, west: number})} latLngBounds
 * @return {void}
 */
google.maps.Map.prototype.panToBounds = function(latLngBounds) {};

/**
 * @param {(!google.maps.LatLng|{lat: number, lng: number})} latlng
 * @return {void}
 */
google.maps.Map.prototype.setCenter = function(latlng) {};

/**
 * @param {number} heading
 * @return {void}
 */
google.maps.Map.prototype.setHeading = function(heading) {};

/**
 * @param {(string|google.maps.MapTypeId)} mapTypeId
 * @return {void}
 */
google.maps.Map.prototype.setMapTypeId = function(mapTypeId) {};

/**
 * @param {!google.maps.MapOptions} options
 * @return {void}
 */
google.maps.Map.prototype.setOptions = function(options) {};

/**
 * @param {!google.maps.StreetViewPanorama} panorama
 * @return {void}
 */
google.maps.Map.prototype.setStreetView = function(panorama) {};

/**
 * @param {number} tilt
 * @return {void}
 */
google.maps.Map.prototype.setTilt = function(tilt) {};

/**
 * @param {number} zoom
 * @return {void}
 */
google.maps.Map.prototype.setZoom = function(zoom) {};
/**
 * @record
 * @struct
 */
google.maps.MapOptions = function() {};
 /** @type {string} */
google.maps.MapOptions.prototype.backgroundColor;
 /** @type {(!google.maps.LatLng|{lat: number, lng: number})} */
google.maps.MapOptions.prototype.center;
 /** @type {boolean} */
google.maps.MapOptions.prototype.clickableIcons;
 /** @type {boolean} */
google.maps.MapOptions.prototype.disableDefaultUI;
 /** @type {boolean} */
google.maps.MapOptions.prototype.disableDoubleClickZoom;
 /** @type {boolean} */
google.maps.MapOptions.prototype.draggable;
 /** @type {string} */
google.maps.MapOptions.prototype.draggableCursor;
 /** @type {string} */
google.maps.MapOptions.prototype.draggingCursor;
 /** @type {boolean} */
google.maps.MapOptions.prototype.fullscreenControl;
 /** @type {!google.maps.FullscreenControlOptions} */
google.maps.MapOptions.prototype.fullscreenControlOptions;
 /** @type {string} */
google.maps.MapOptions.prototype.gestureHandling;
 /** @type {number} */
google.maps.MapOptions.prototype.heading;
 /** @type {boolean} */
google.maps.MapOptions.prototype.keyboardShortcuts;
 /** @type {boolean} */
google.maps.MapOptions.prototype.mapTypeControl;
 /** @type {!google.maps.MapTypeControlOptions} */
google.maps.MapOptions.prototype.mapTypeControlOptions;
 /** @type {google.maps.MapTypeId} */
google.maps.MapOptions.prototype.mapTypeId;
 /** @type {number} */
google.maps.MapOptions.prototype.maxZoom;
 /** @type {number} */
google.maps.MapOptions.prototype.minZoom;
 /** @type {boolean} */
google.maps.MapOptions.prototype.noClear;
 /** @type {boolean} */
google.maps.MapOptions.prototype.overviewMapControl;
 /** @type {!google.maps.OverviewMapControlOptions} */
google.maps.MapOptions.prototype.overviewMapControlOptions;
 /** @type {boolean} */
google.maps.MapOptions.prototype.panControl;
 /** @type {!google.maps.PanControlOptions} */
google.maps.MapOptions.prototype.panControlOptions;
 /** @type {boolean} */
google.maps.MapOptions.prototype.rotateControl;
 /** @type {!google.maps.RotateControlOptions} */
google.maps.MapOptions.prototype.rotateControlOptions;
 /** @type {boolean} */
google.maps.MapOptions.prototype.scaleControl;
 /** @type {!google.maps.ScaleControlOptions} */
google.maps.MapOptions.prototype.scaleControlOptions;
 /** @type {boolean} */
google.maps.MapOptions.prototype.scrollwheel;
 /** @type {boolean} */
google.maps.MapOptions.prototype.signInControl;
 /** @type {!google.maps.StreetViewPanorama} */
google.maps.MapOptions.prototype.streetView;
 /** @type {boolean} */
google.maps.MapOptions.prototype.streetViewControl;
 /** @type {!google.maps.StreetViewControlOptions} */
google.maps.MapOptions.prototype.streetViewControlOptions;
 /** @type {!Array<!google.maps.MapTypeStyle>} */
google.maps.MapOptions.prototype.styles;
 /** @type {number} */
google.maps.MapOptions.prototype.tilt;
 /** @type {number} */
google.maps.MapOptions.prototype.zoom;
 /** @type {boolean} */
google.maps.MapOptions.prototype.zoomControl;
 /** @type {!google.maps.ZoomControlOptions} */
google.maps.MapOptions.prototype.zoomControlOptions;

/** @const */
google.maps.MapTypeId = {};
/** @const {number} */
google.maps.MapTypeId.HYBRID;
/** @const {number} */
google.maps.MapTypeId.ROADMAP;
/** @const {number} */
google.maps.MapTypeId.SATELLITE;
/** @const {number} */
google.maps.MapTypeId.TERRAIN;
/**
 * @record
 * @struct
 */
google.maps.MapTypeControlOptions = function() {};
 /** @type {!Array<(string|google.maps.MapTypeId)>} */
google.maps.MapTypeControlOptions.prototype.mapTypeIds;
 /** @type {google.maps.ControlPosition} */
google.maps.MapTypeControlOptions.prototype.position;
 /** @type {google.maps.MapTypeControlStyle} */
google.maps.MapTypeControlOptions.prototype.style;

/** @const */
google.maps.MapTypeControlStyle = {};
/** @const {number} */
google.maps.MapTypeControlStyle.DEFAULT;
/** @const {number} */
google.maps.MapTypeControlStyle.DROPDOWN_MENU;
/** @const {number} */
google.maps.MapTypeControlStyle.HORIZONTAL_BAR;
/**
 * @record
 * @struct
 */
google.maps.OverviewMapControlOptions = function() {};
 /** @type {boolean} */
google.maps.OverviewMapControlOptions.prototype.opened;

/** @typedef {string} */
google.maps.GestureHandlingOptions;
/**
 * @record
 * @struct
 */
google.maps.PanControlOptions = function() {};
 /** @type {google.maps.ControlPosition} */
google.maps.PanControlOptions.prototype.position;
/**
 * @record
 * @struct
 */
google.maps.RotateControlOptions = function() {};
 /** @type {google.maps.ControlPosition} */
google.maps.RotateControlOptions.prototype.position;
/**
 * @record
 * @struct
 */
google.maps.ScaleControlOptions = function() {};
 /** @type {google.maps.ScaleControlStyle} */
google.maps.ScaleControlOptions.prototype.style;

/** @const */
google.maps.ScaleControlStyle = {};
/** @const {number} */
google.maps.ScaleControlStyle.DEFAULT;
/**
 * @record
 * @struct
 */
google.maps.StreetViewControlOptions = function() {};
 /** @type {google.maps.ControlPosition} */
google.maps.StreetViewControlOptions.prototype.position;
/**
 * @record
 * @struct
 */
google.maps.ZoomControlOptions = function() {};
 /** @type {google.maps.ControlPosition} */
google.maps.ZoomControlOptions.prototype.position;
 /** @type {google.maps.ZoomControlStyle} */
google.maps.ZoomControlOptions.prototype.style;

/** @const */
google.maps.ZoomControlStyle = {};
/** @const {number} */
google.maps.ZoomControlStyle.DEFAULT;
/** @const {number} */
google.maps.ZoomControlStyle.LARGE;
/** @const {number} */
google.maps.ZoomControlStyle.SMALL;

/** @const */
google.maps.ControlPosition = {};
/** @const {number} */
google.maps.ControlPosition.BOTTOM_CENTER;
/** @const {number} */
google.maps.ControlPosition.BOTTOM_LEFT;
/** @const {number} */
google.maps.ControlPosition.BOTTOM_RIGHT;
/** @const {number} */
google.maps.ControlPosition.LEFT_BOTTOM;
/** @const {number} */
google.maps.ControlPosition.LEFT_CENTER;
/** @const {number} */
google.maps.ControlPosition.LEFT_TOP;
/** @const {number} */
google.maps.ControlPosition.RIGHT_BOTTOM;
/** @const {number} */
google.maps.ControlPosition.RIGHT_CENTER;
/** @const {number} */
google.maps.ControlPosition.RIGHT_TOP;
/** @const {number} */
google.maps.ControlPosition.TOP_CENTER;
/** @const {number} */
google.maps.ControlPosition.TOP_LEFT;
/** @const {number} */
google.maps.ControlPosition.TOP_RIGHT;

/** @typedef {string} */
google.maps.DrawingMode;

/**
 * @constructor
 * @struct
 * @param {!google.maps.Data.DataOptions=} options
 */
google.maps.Data = function(options) {};

/**
 * @param {(!google.maps.Data.Feature|!google.maps.Data.FeatureOptions)} feature
 * @return {!google.maps.Data.Feature}
 */
google.maps.Data.prototype.add = function(feature) {};

/**
 * @param {!Object} geoJson
 * @param {!google.maps.Data.GeoJsonOptions=} options
 * @return {!Array<!google.maps.Data.Feature>}
 */
google.maps.Data.prototype.addGeoJson = function(geoJson, options) {};

/**
 * @param {!google.maps.Data.Feature} feature
 * @return {boolean}
 */
google.maps.Data.prototype.contains = function(feature) {};

/**
 * @param {function(!google.maps.Data.Feature): void} callback
 * @return {void}
 */
google.maps.Data.prototype.forEach = function(callback) {};

/**
 * @return {google.maps.ControlPosition}
 */
google.maps.Data.prototype.getControlPosition = function() {};

/**
 * @return {!Array<string>}
 */
google.maps.Data.prototype.getControls = function() {};

/**
 * @return {string}
 */
google.maps.Data.prototype.getDrawingMode = function() {};

/**
 * @param {(string|number)} id
 * @return {!google.maps.Data.Feature}
 */
google.maps.Data.prototype.getFeatureById = function(id) {};

/**
 * @return {!google.maps.Map}
 */
google.maps.Data.prototype.getMap = function() {};

/**
 * @return {(function(!google.maps.Data.Feature): !google.maps.Data.StyleOptions|!google.maps.Data.StyleOptions)}
 */
google.maps.Data.prototype.getStyle = function() {};

/**
 * @param {string} url
 * @param {!google.maps.Data.GeoJsonOptions=} options
 * @param {function(!Array<!google.maps.Data.Feature>): void=} callback
 * @return {void}
 */
google.maps.Data.prototype.loadGeoJson = function(url, options, callback) {};

/**
 * @param {!google.maps.Data.Feature} feature
 * @param {!google.maps.Data.StyleOptions} style
 * @return {void}
 */
google.maps.Data.prototype.overrideStyle = function(feature, style) {};

/**
 * @param {!google.maps.Data.Feature} feature
 * @return {void}
 */
google.maps.Data.prototype.remove = function(feature) {};

/**
 * @param {!google.maps.Data.Feature=} feature
 * @return {void}
 */
google.maps.Data.prototype.revertStyle = function(feature) {};

/**
 * @param {google.maps.ControlPosition} controlPosition
 * @return {void}
 */
google.maps.Data.prototype.setControlPosition = function(controlPosition) {};

/**
 * @param {!Array<string>} controls
 * @return {void}
 */
google.maps.Data.prototype.setControls = function(controls) {};

/**
 * @param {string} drawingMode
 * @return {void}
 */
google.maps.Data.prototype.setDrawingMode = function(drawingMode) {};

/**
 * @param {!google.maps.Map} map
 * @return {void}
 */
google.maps.Data.prototype.setMap = function(map) {};

/**
 * @param {(function(!google.maps.Data.Feature): !google.maps.Data.StyleOptions|!google.maps.Data.StyleOptions)} style
 * @return {void}
 */
google.maps.Data.prototype.setStyle = function(style) {};

/**
 * @param {function(!Object): void} callback
 * @return {void}
 */
google.maps.Data.prototype.toGeoJson = function(callback) {};
/**
 * @record
 * @struct
 */
google.maps.Data.DataOptions = function() {};
 /** @type {google.maps.ControlPosition} */
google.maps.Data.DataOptions.prototype.controlPosition;
 /** @type {!Array<string>} */
google.maps.Data.DataOptions.prototype.controls;
 /** @type {string} */
google.maps.Data.DataOptions.prototype.drawingMode;
 /** @type {function(!google.maps.Data.Geometry): !google.maps.Data.Feature} */
google.maps.Data.DataOptions.prototype.featureFactory;
 /** @type {!google.maps.Map} */
google.maps.Data.DataOptions.prototype.map;
 /** @type {(function(!google.maps.Data.Feature): !google.maps.Data.StyleOptions|!google.maps.Data.StyleOptions)} */
google.maps.Data.DataOptions.prototype.style;
/**
 * @record
 * @struct
 */
google.maps.Data.GeoJsonOptions = function() {};
 /** @type {string} */
google.maps.Data.GeoJsonOptions.prototype.idPropertyName;
/**
 * @record
 * @struct
 */
google.maps.Data.StyleOptions = function() {};
 /** @type {boolean} */
google.maps.Data.StyleOptions.prototype.clickable;
 /** @type {string} */
google.maps.Data.StyleOptions.prototype.cursor;
 /** @type {boolean} */
google.maps.Data.StyleOptions.prototype.draggable;
 /** @type {boolean} */
google.maps.Data.StyleOptions.prototype.editable;
 /** @type {string} */
google.maps.Data.StyleOptions.prototype.fillColor;
 /** @type {number} */
google.maps.Data.StyleOptions.prototype.fillOpacity;
 /** @type {(string|!google.maps.Icon|!google.maps.Symbol)} */
google.maps.Data.StyleOptions.prototype.icon;
 /** @type {!google.maps.MarkerShape} */
google.maps.Data.StyleOptions.prototype.shape;
 /** @type {string} */
google.maps.Data.StyleOptions.prototype.strokeColor;
 /** @type {number} */
google.maps.Data.StyleOptions.prototype.strokeOpacity;
 /** @type {number} */
google.maps.Data.StyleOptions.prototype.strokeWeight;
 /** @type {string} */
google.maps.Data.StyleOptions.prototype.title;
 /** @type {boolean} */
google.maps.Data.StyleOptions.prototype.visible;
 /** @type {number} */
google.maps.Data.StyleOptions.prototype.zIndex;

/** @typedef {function(!google.maps.Data.Feature): !google.maps.Data.StyleOptions} */
google.maps.Data.StylingFunction;

/**
 * @constructor
 * @struct
 * @param {!google.maps.Data.FeatureOptions=} options
 */
google.maps.Data.Feature = function(options) {};

/**
 * @param {function(?, string): void} callback
 * @return {void}
 */
google.maps.Data.Feature.prototype.forEachProperty = function(callback) {};

/**
 * @return {!google.maps.Data.Geometry}
 */
google.maps.Data.Feature.prototype.getGeometry = function() {};

/**
 * @return {(string|number)}
 */
google.maps.Data.Feature.prototype.getId = function() {};

/**
 * @param {string} name
 * @return {?}
 */
google.maps.Data.Feature.prototype.getProperty = function(name) {};

/**
 * @param {string} name
 * @return {void}
 */
google.maps.Data.Feature.prototype.removeProperty = function(name) {};

/**
 * @param {(!google.maps.LatLng|{lat: number, lng: number}|!google.maps.Data.Geometry)} newGeometry
 * @return {void}
 */
google.maps.Data.Feature.prototype.setGeometry = function(newGeometry) {};

/**
 * @param {string} name
 * @param {?} newValue
 * @return {void}
 */
google.maps.Data.Feature.prototype.setProperty = function(name, newValue) {};

/**
 * @param {function(!Object): void} callback
 * @return {void}
 */
google.maps.Data.Feature.prototype.toGeoJson = function(callback) {};
/**
 * @record
 * @struct
 */
google.maps.Data.FeatureOptions = function() {};
 /** @type {(!google.maps.LatLng|{lat: number, lng: number}|!google.maps.Data.Geometry)} */
google.maps.Data.FeatureOptions.prototype.geometry;
 /** @type {(string|number)} */
google.maps.Data.FeatureOptions.prototype.id;
 /** @type {!Object} */
google.maps.Data.FeatureOptions.prototype.properties;
/**
 * @constructor
 * @struct
 */
google.maps.Data.Geometry = function() {};

/**
 * @return {string}
 */
google.maps.Data.Geometry.prototype.getType = function() {};

/**
 * @param {function(!google.maps.LatLng): void} callback
 * @return {void}
 */
google.maps.Data.Geometry.prototype.forEachLatLng = function(callback) {};

/**
 * @constructor
 * @struct
 * @param {(!google.maps.LatLng|{lat: number, lng: number})} latLng
 */
google.maps.Data.Point = function(latLng) {};

/**
 * @return {!google.maps.LatLng}
 */
google.maps.Data.Point.prototype.get = function() {};

/**
 * @constructor
 * @struct
 * @param {!Array<(!google.maps.LatLng|{lat: number, lng: number})>} elements
 */
google.maps.Data.MultiPoint = function(elements) {};

/**
 * @return {!Array<!google.maps.LatLng>}
 */
google.maps.Data.MultiPoint.prototype.getArray = function() {};

/**
 * @param {number} n
 * @return {!google.maps.LatLng}
 */
google.maps.Data.MultiPoint.prototype.getAt = function(n) {};

/**
 * @return {number}
 */
google.maps.Data.MultiPoint.prototype.getLength = function() {};

/**
 * @constructor
 * @struct
 * @param {!Array<(!google.maps.LatLng|{lat: number, lng: number})>} elements
 */
google.maps.Data.LineString = function(elements) {};

/**
 * @return {!Array<!google.maps.LatLng>}
 */
google.maps.Data.LineString.prototype.getArray = function() {};

/**
 * @param {number} n
 * @return {!google.maps.LatLng}
 */
google.maps.Data.LineString.prototype.getAt = function(n) {};

/**
 * @return {number}
 */
google.maps.Data.LineString.prototype.getLength = function() {};

/**
 * @constructor
 * @struct
 * @param {!Array<(!Array<(!google.maps.LatLng|{lat: number, lng: number})>|!google.maps.Data.LineString)>} elements
 */
google.maps.Data.MultiLineString = function(elements) {};

/**
 * @return {!Array<!google.maps.Data.LineString>}
 */
google.maps.Data.MultiLineString.prototype.getArray = function() {};

/**
 * @param {number} n
 * @return {!google.maps.Data.LineString}
 */
google.maps.Data.MultiLineString.prototype.getAt = function(n) {};

/**
 * @return {number}
 */
google.maps.Data.MultiLineString.prototype.getLength = function() {};

/**
 * @constructor
 * @struct
 * @param {!Array<(!google.maps.LatLng|{lat: number, lng: number})>} elements
 */
google.maps.Data.LinearRing = function(elements) {};

/**
 * @return {!Array<!google.maps.LatLng>}
 */
google.maps.Data.LinearRing.prototype.getArray = function() {};

/**
 * @param {number} n
 * @return {!google.maps.LatLng}
 */
google.maps.Data.LinearRing.prototype.getAt = function(n) {};

/**
 * @return {number}
 */
google.maps.Data.LinearRing.prototype.getLength = function() {};

/**
 * @constructor
 * @struct
 * @param {!Array<(!Array<(!google.maps.LatLng|{lat: number, lng: number})>|!google.maps.Data.LinearRing)>} elements
 */
google.maps.Data.Polygon = function(elements) {};

/**
 * @return {!Array<!google.maps.Data.LinearRing>}
 */
google.maps.Data.Polygon.prototype.getArray = function() {};

/**
 * @param {number} n
 * @return {!google.maps.Data.LinearRing}
 */
google.maps.Data.Polygon.prototype.getAt = function(n) {};

/**
 * @return {number}
 */
google.maps.Data.Polygon.prototype.getLength = function() {};

/**
 * @constructor
 * @struct
 * @param {!Array<(!google.maps.Data.Polygon|!Array<(!Array<(!google.maps.LatLng|{lat: number, lng: number})>|!google.maps.Data.LinearRing)>)>} elements
 */
google.maps.Data.MultiPolygon = function(elements) {};

/**
 * @return {!Array<!google.maps.Data.Polygon>}
 */
google.maps.Data.MultiPolygon.prototype.getArray = function() {};

/**
 * @param {number} n
 * @return {!google.maps.Data.Polygon}
 */
google.maps.Data.MultiPolygon.prototype.getAt = function(n) {};

/**
 * @return {number}
 */
google.maps.Data.MultiPolygon.prototype.getLength = function() {};

/**
 * @constructor
 * @struct
 * @param {!Array<({lat: number, lng: number}|!Array<!google.maps.LatLng>|!Array<!google.maps.Data.Geometry>)>} elements
 */
google.maps.Data.GeometryCollection = function(elements) {};

/**
 * @return {!Array<!google.maps.Data.Geometry>}
 */
google.maps.Data.GeometryCollection.prototype.getArray = function() {};

/**
 * @param {number} n
 * @return {!google.maps.Data.Geometry}
 */
google.maps.Data.GeometryCollection.prototype.getAt = function(n) {};

/**
 * @return {number}
 */
google.maps.Data.GeometryCollection.prototype.getLength = function() {};
/**
 * @extends {google.maps.MouseEvent}
 * @record
 * @struct
 */
google.maps.Data.MouseEvent = function() {};
 /** @type {!google.maps.Data.Feature} */
google.maps.Data.MouseEvent.prototype.feature;
/**
 * @record
 * @struct
 */
google.maps.Data.AddFeatureEvent = function() {};
 /** @type {!google.maps.Data.Feature} */
google.maps.Data.AddFeatureEvent.prototype.feature;
/**
 * @record
 * @struct
 */
google.maps.Data.RemoveFeatureEvent = function() {};
 /** @type {!google.maps.Data.Feature} */
google.maps.Data.RemoveFeatureEvent.prototype.feature;
/**
 * @record
 * @struct
 */
google.maps.Data.SetGeometryEvent = function() {};
 /** @type {!google.maps.Data.Feature} */
google.maps.Data.SetGeometryEvent.prototype.feature;
 /** @type {!google.maps.Data.Geometry} */
google.maps.Data.SetGeometryEvent.prototype.newGeometry;
 /** @type {!google.maps.Data.Geometry} */
google.maps.Data.SetGeometryEvent.prototype.oldGeometry;
/**
 * @record
 * @struct
 */
google.maps.Data.SetPropertyEvent = function() {};
 /** @type {!google.maps.Data.Feature} */
google.maps.Data.SetPropertyEvent.prototype.feature;
 /** @type {string} */
google.maps.Data.SetPropertyEvent.prototype.name;
 /** @type {?} */
google.maps.Data.SetPropertyEvent.prototype.newValue;
 /** @type {?} */
google.maps.Data.SetPropertyEvent.prototype.oldValue;
/**
 * @record
 * @struct
 */
google.maps.Data.RemovePropertyEvent = function() {};
 /** @type {!google.maps.Data.Feature} */
google.maps.Data.RemovePropertyEvent.prototype.feature;
 /** @type {string} */
google.maps.Data.RemovePropertyEvent.prototype.name;
 /** @type {?} */
google.maps.Data.RemovePropertyEvent.prototype.oldValue;

/**
 * @constructor
 * @struct
 * @param {!google.maps.MarkerOptions=} opts
 */
google.maps.Marker = function(opts) {};
 /** @type {number} */
google.maps.Marker.MAX_ZINDEX;

/**
 * @return {google.maps.Animation}
 */
google.maps.Marker.prototype.getAnimation = function() {};

/**
 * @return {!google.maps.Attribution}
 */
google.maps.Marker.prototype.getAttribution = function() {};

/**
 * @return {boolean}
 */
google.maps.Marker.prototype.getClickable = function() {};

/**
 * @return {string}
 */
google.maps.Marker.prototype.getCursor = function() {};

/**
 * @return {boolean}
 */
google.maps.Marker.prototype.getDraggable = function() {};

/**
 * @return {(string|!google.maps.Icon|!google.maps.Symbol)}
 */
google.maps.Marker.prototype.getIcon = function() {};

/**
 * @return {!google.maps.MarkerLabel}
 */
google.maps.Marker.prototype.getLabel = function() {};

/**
 * @return {(!google.maps.Map|!google.maps.StreetViewPanorama)}
 */
google.maps.Marker.prototype.getMap = function() {};

/**
 * @return {number}
 */
google.maps.Marker.prototype.getOpacity = function() {};

/**
 * @return {!google.maps.Place}
 */
google.maps.Marker.prototype.getPlace = function() {};

/**
 * @return {!google.maps.LatLng}
 */
google.maps.Marker.prototype.getPosition = function() {};

/**
 * @return {!google.maps.MarkerShape}
 */
google.maps.Marker.prototype.getShape = function() {};

/**
 * @return {string}
 */
google.maps.Marker.prototype.getTitle = function() {};

/**
 * @return {boolean}
 */
google.maps.Marker.prototype.getVisible = function() {};

/**
 * @return {number}
 */
google.maps.Marker.prototype.getZIndex = function() {};

/**
 * @param {google.maps.Animation} animation
 * @return {void}
 */
google.maps.Marker.prototype.setAnimation = function(animation) {};

/**
 * @param {!google.maps.Attribution} attribution
 * @return {void}
 */
google.maps.Marker.prototype.setAttribution = function(attribution) {};

/**
 * @param {boolean} flag
 * @return {void}
 */
google.maps.Marker.prototype.setClickable = function(flag) {};

/**
 * @param {string} cursor
 * @return {void}
 */
google.maps.Marker.prototype.setCursor = function(cursor) {};

/**
 * @param {boolean} flag
 * @return {void}
 */
google.maps.Marker.prototype.setDraggable = function(flag) {};

/**
 * @param {(string|!google.maps.Icon|!google.maps.Symbol)} icon
 * @return {void}
 */
google.maps.Marker.prototype.setIcon = function(icon) {};

/**
 * @param {(string|!google.maps.MarkerLabel)} label
 * @return {void}
 */
google.maps.Marker.prototype.setLabel = function(label) {};

/**
 * @param {(!google.maps.Map|!google.maps.StreetViewPanorama)} map
 * @return {void}
 */
google.maps.Marker.prototype.setMap = function(map) {};

/**
 * @param {number} opacity
 * @return {void}
 */
google.maps.Marker.prototype.setOpacity = function(opacity) {};

/**
 * @param {!google.maps.MarkerOptions} options
 * @return {void}
 */
google.maps.Marker.prototype.setOptions = function(options) {};

/**
 * @param {!google.maps.Place} place
 * @return {void}
 */
google.maps.Marker.prototype.setPlace = function(place) {};

/**
 * @param {(!google.maps.LatLng|{lat: number, lng: number})} latlng
 * @return {void}
 */
google.maps.Marker.prototype.setPosition = function(latlng) {};

/**
 * @param {!google.maps.MarkerShape} shape
 * @return {void}
 */
google.maps.Marker.prototype.setShape = function(shape) {};

/**
 * @param {string} title
 * @return {void}
 */
google.maps.Marker.prototype.setTitle = function(title) {};

/**
 * @param {boolean} visible
 * @return {void}
 */
google.maps.Marker.prototype.setVisible = function(visible) {};

/**
 * @param {number} zIndex
 * @return {void}
 */
google.maps.Marker.prototype.setZIndex = function(zIndex) {};
/**
 * @record
 * @struct
 */
google.maps.MarkerOptions = function() {};
 /** @type {!google.maps.Point} */
google.maps.MarkerOptions.prototype.anchorPoint;
 /** @type {google.maps.Animation} */
google.maps.MarkerOptions.prototype.animation;
 /** @type {boolean} */
google.maps.MarkerOptions.prototype.clickable;
 /** @type {string} */
google.maps.MarkerOptions.prototype.cursor;
 /** @type {boolean} */
google.maps.MarkerOptions.prototype.draggable;
 /** @type {(string|!google.maps.Icon|!google.maps.Symbol)} */
google.maps.MarkerOptions.prototype.icon;
 /** @type {(string|!google.maps.MarkerLabel)} */
google.maps.MarkerOptions.prototype.label;
 /** @type {(!google.maps.Map|!google.maps.StreetViewPanorama)} */
google.maps.MarkerOptions.prototype.map;
 /** @type {number} */
google.maps.MarkerOptions.prototype.opacity;
 /** @type {boolean} */
google.maps.MarkerOptions.prototype.optimized;
 /** @type {!google.maps.Place} */
google.maps.MarkerOptions.prototype.place;
 /** @type {(!google.maps.LatLng|{lat: number, lng: number})} */
google.maps.MarkerOptions.prototype.position;
 /** @type {!google.maps.MarkerShape} */
google.maps.MarkerOptions.prototype.shape;
 /** @type {string} */
google.maps.MarkerOptions.prototype.title;
 /** @type {boolean} */
google.maps.MarkerOptions.prototype.visible;
 /** @type {number} */
google.maps.MarkerOptions.prototype.zIndex;
/**
 * @record
 * @struct
 */
google.maps.Icon = function() {};
 /** @type {!google.maps.Point} */
google.maps.Icon.prototype.anchor;
 /** @type {!google.maps.Point} */
google.maps.Icon.prototype.labelOrigin;
 /** @type {!google.maps.Point} */
google.maps.Icon.prototype.origin;
 /** @type {!google.maps.Size} */
google.maps.Icon.prototype.scaledSize;
 /** @type {!google.maps.Size} */
google.maps.Icon.prototype.size;
 /** @type {string} */
google.maps.Icon.prototype.url;
/**
 * @record
 * @struct
 */
google.maps.MarkerLabel = function() {};
 /** @type {string} */
google.maps.MarkerLabel.prototype.color;
 /** @type {string} */
google.maps.MarkerLabel.prototype.fontFamily;
 /** @type {string} */
google.maps.MarkerLabel.prototype.fontSize;
 /** @type {string} */
google.maps.MarkerLabel.prototype.fontWeight;
 /** @type {string} */
google.maps.MarkerLabel.prototype.text;
/**
 * @record
 * @struct
 */
google.maps.MarkerShape = function() {};
 /** @type {!Array<number>} */
google.maps.MarkerShape.prototype.coords;
 /** @type {string} */
google.maps.MarkerShape.prototype.type;
/**
 * @record
 * @struct
 */
google.maps.Symbol = function() {};
 /** @type {!google.maps.Point} */
google.maps.Symbol.prototype.anchor;
 /** @type {string} */
google.maps.Symbol.prototype.fillColor;
 /** @type {number} */
google.maps.Symbol.prototype.fillOpacity;
 /** @type {(string|google.maps.SymbolPath)} */
google.maps.Symbol.prototype.path;
 /** @type {number} */
google.maps.Symbol.prototype.rotation;
 /** @type {number} */
google.maps.Symbol.prototype.scale;
 /** @type {string} */
google.maps.Symbol.prototype.strokeColor;
 /** @type {number} */
google.maps.Symbol.prototype.strokeOpacity;
 /** @type {number} */
google.maps.Symbol.prototype.strokeWeight;

/** @const */
google.maps.SymbolPath = {};
/** @const {number} */
google.maps.SymbolPath.BACKWARD_CLOSED_ARROW;
/** @const {number} */
google.maps.SymbolPath.BACKWARD_OPEN_ARROW;
/** @const {number} */
google.maps.SymbolPath.CIRCLE;
/** @const {number} */
google.maps.SymbolPath.FORWARD_CLOSED_ARROW;
/** @const {number} */
google.maps.SymbolPath.FORWARD_OPEN_ARROW;

/** @const */
google.maps.Animation = {};
/** @const {number} */
google.maps.Animation.BOUNCE;
/** @const {number} */
google.maps.Animation.DROP;

/**
 * @constructor
 * @struct
 * Creates an info window with the given options. An InfoWindow can be
 * placed on a map at a particular position or above a marker,
 * depending on what is specified in the options. Unless auto-pan is
 * disabled, an InfoWindow will pan the map to make itself visible
 * when it is opened. After constructing an InfoWindow, you must call
 * open to display it on the map. The user can click the close button
 * on the InfoWindow to remove it from the map, or the developer can
 * call close() for the same effect.
 * @param {!google.maps.InfoWindowOptions=} opts
 */
google.maps.InfoWindow = function(opts) {};

/**
 * Closes this InfoWindow by removing it from the DOM structure.
 * @return {void}
 */
google.maps.InfoWindow.prototype.close = function() {};

/**
 * @return {(string|!Element)}
 */
google.maps.InfoWindow.prototype.getContent = function() {};

/**
 * @return {!google.maps.LatLng}
 */
google.maps.InfoWindow.prototype.getPosition = function() {};

/**
 * @return {number}
 */
google.maps.InfoWindow.prototype.getZIndex = function() {};

/**
 * Opens this InfoWindow on the given map. Optionally, an InfoWindow can be associated with an anchor.
 * In the core API, the only anchor is the Marker class.
 * However, an anchor can be any MVCObject that exposes a LatLng position property and optionally
 * a Point anchorPoint property for calculating the pixelOffset (see InfoWindowOptions).
 * The anchorPoint is the offset from the anchor's position to the tip of the InfoWindow.
 * @param {(!google.maps.Map|!google.maps.StreetViewPanorama)=} map
 * @param {!google.maps.MVCObject=} anchor
 * @return {void}
 */
google.maps.InfoWindow.prototype.open = function(map, anchor) {};

/**
 * @param {(string|!Node)} content
 * @return {void}
 */
google.maps.InfoWindow.prototype.setContent = function(content) {};

/**
 * @param {!google.maps.InfoWindowOptions} options
 * @return {void}
 */
google.maps.InfoWindow.prototype.setOptions = function(options) {};

/**
 * @param {(!google.maps.LatLng|{lat: number, lng: number})} position
 * @return {void}
 */
google.maps.InfoWindow.prototype.setPosition = function(position) {};

/**
 * @param {number} zIndex
 * @return {void}
 */
google.maps.InfoWindow.prototype.setZIndex = function(zIndex) {};
/**
 * @record
 * @struct
 */
google.maps.InfoWindowOptions = function() {};
 /** @type {(string|!Node)} */
google.maps.InfoWindowOptions.prototype.content;
 /** @type {boolean} */
google.maps.InfoWindowOptions.prototype.disableAutoPan;
 /** @type {number} */
google.maps.InfoWindowOptions.prototype.maxWidth;
 /** @type {!google.maps.Size} */
google.maps.InfoWindowOptions.prototype.pixelOffset;
 /** @type {(!google.maps.LatLng|{lat: number, lng: number})} */
google.maps.InfoWindowOptions.prototype.position;
 /** @type {number} */
google.maps.InfoWindowOptions.prototype.zIndex;

/**
 * @constructor
 * @struct
 * @param {!google.maps.PolylineOptions=} opts
 */
google.maps.Polyline = function(opts) {};

/**
 * @return {boolean}
 */
google.maps.Polyline.prototype.getDraggable = function() {};

/**
 * @return {boolean}
 */
google.maps.Polyline.prototype.getEditable = function() {};

/**
 * @return {!google.maps.Map}
 */
google.maps.Polyline.prototype.getMap = function() {};

/**
 * @return {!google.maps.MVCArray<!google.maps.LatLng>}
 */
google.maps.Polyline.prototype.getPath = function() {};

/**
 * @return {boolean}
 */
google.maps.Polyline.prototype.getVisible = function() {};

/**
 * @param {boolean} draggable
 * @return {void}
 */
google.maps.Polyline.prototype.setDraggable = function(draggable) {};

/**
 * @param {boolean} editable
 * @return {void}
 */
google.maps.Polyline.prototype.setEditable = function(editable) {};

/**
 * @param {!google.maps.Map} map
 * @return {void}
 */
google.maps.Polyline.prototype.setMap = function(map) {};

/**
 * @param {!google.maps.PolylineOptions} options
 * @return {void}
 */
google.maps.Polyline.prototype.setOptions = function(options) {};

/**
 * @param {(!Array<!google.maps.LatLng>|!google.maps.MVCArray<!google.maps.LatLng>|!Array<{lat: number, lng: number}>)} path
 * @return {void}
 */
google.maps.Polyline.prototype.setPath = function(path) {};

/**
 * @param {boolean} visible
 * @return {void}
 */
google.maps.Polyline.prototype.setVisible = function(visible) {};
/**
 * @record
 * @struct
 */
google.maps.PolylineOptions = function() {};
 /** @type {boolean} */
google.maps.PolylineOptions.prototype.clickable;
 /** @type {boolean} */
google.maps.PolylineOptions.prototype.draggable;
 /** @type {boolean} */
google.maps.PolylineOptions.prototype.editable;
 /** @type {boolean} */
google.maps.PolylineOptions.prototype.geodesic;
 /** @type {!Array<!google.maps.IconSequence>} */
google.maps.PolylineOptions.prototype.icons;
 /** @type {!google.maps.Map} */
google.maps.PolylineOptions.prototype.map;
 /** @type {(!Array<!google.maps.LatLng>|!google.maps.MVCArray<!google.maps.LatLng>|!Array<{lat: number, lng: number}>)} */
google.maps.PolylineOptions.prototype.path;
 /** @type {string} */
google.maps.PolylineOptions.prototype.strokeColor;
 /** @type {number} */
google.maps.PolylineOptions.prototype.strokeOpacity;
 /** @type {number} */
google.maps.PolylineOptions.prototype.strokeWeight;
 /** @type {boolean} */
google.maps.PolylineOptions.prototype.visible;
 /** @type {number} */
google.maps.PolylineOptions.prototype.zIndex;
/**
 * @record
 * @struct
 */
google.maps.IconSequence = function() {};
 /** @type {boolean} */
google.maps.IconSequence.prototype.fixedRotation;
 /** @type {!google.maps.Symbol} */
google.maps.IconSequence.prototype.icon;
 /** @type {string} */
google.maps.IconSequence.prototype.offset;
 /** @type {string} */
google.maps.IconSequence.prototype.repeat;

/**
 * @constructor
 * @struct
 * @param {!google.maps.PolygonOptions=} opts
 */
google.maps.Polygon = function(opts) {};

/**
 * @return {boolean}
 */
google.maps.Polygon.prototype.getDraggable = function() {};

/**
 * @return {boolean}
 */
google.maps.Polygon.prototype.getEditable = function() {};

/**
 * @return {!google.maps.Map}
 */
google.maps.Polygon.prototype.getMap = function() {};

/**
 * Retrieves the first path.
 * @return {!google.maps.MVCArray<!google.maps.LatLng>}
 */
google.maps.Polygon.prototype.getPath = function() {};

/**
 * Retrieves the paths for this polygon.
 * @return {!google.maps.MVCArray<!google.maps.MVCArray<!google.maps.LatLng>>}
 */
google.maps.Polygon.prototype.getPaths = function() {};

/**
 * @return {boolean}
 */
google.maps.Polygon.prototype.getVisible = function() {};

/**
 * @param {boolean} draggable
 * @return {void}
 */
google.maps.Polygon.prototype.setDraggable = function(draggable) {};

/**
 * @param {boolean} editable
 * @return {void}
 */
google.maps.Polygon.prototype.setEditable = function(editable) {};

/**
 * @param {!google.maps.Map} map
 * @return {void}
 */
google.maps.Polygon.prototype.setMap = function(map) {};

/**
 * @param {!google.maps.PolygonOptions} options
 * @return {void}
 */
google.maps.Polygon.prototype.setOptions = function(options) {};

/**
 * @param {(!Array<!google.maps.LatLng>|!google.maps.MVCArray<!google.maps.LatLng>|!Array<{lat: number, lng: number}>)} path
 * @return {void}
 */
google.maps.Polygon.prototype.setPath = function(path) {};

/**
 * @param {(!Array<!google.maps.LatLng>|!google.maps.MVCArray<!google.maps.LatLng>|!Array<{lat: number, lng: number}>|!google.maps.MVCArray<!google.maps.MVCArray<!google.maps.LatLng>>|!Array<!Array<!google.maps.LatLng>>|!Array<!Array<?>>)} paths
 * @return {void}
 */
google.maps.Polygon.prototype.setPaths = function(paths) {};

/**
 * @param {boolean} visible
 * @return {void}
 */
google.maps.Polygon.prototype.setVisible = function(visible) {};
/**
 * @record
 * @struct
 */
google.maps.PolygonOptions = function() {};
 /** @type {boolean} */
google.maps.PolygonOptions.prototype.clickable;
 /** @type {boolean} */
google.maps.PolygonOptions.prototype.draggable;
 /** @type {boolean} */
google.maps.PolygonOptions.prototype.editable;
 /** @type {string} */
google.maps.PolygonOptions.prototype.fillColor;
 /** @type {number} */
google.maps.PolygonOptions.prototype.fillOpacity;
 /** @type {boolean} */
google.maps.PolygonOptions.prototype.geodesic;
 /** @type {!google.maps.Map} */
google.maps.PolygonOptions.prototype.map;
 /** @type {(!Array<!google.maps.LatLng>|!google.maps.MVCArray<!google.maps.LatLng>|!Array<{lat: number, lng: number}>|!google.maps.MVCArray<!google.maps.MVCArray<!google.maps.LatLng>>|!Array<!Array<!google.maps.LatLng>>|!Array<!Array<?>>)} */
google.maps.PolygonOptions.prototype.paths;
 /** @type {string} */
google.maps.PolygonOptions.prototype.strokeColor;
 /** @type {number} */
google.maps.PolygonOptions.prototype.strokeOpacity;
 /** @type {google.maps.StrokePosition} */
google.maps.PolygonOptions.prototype.strokePosition;
 /** @type {number} */
google.maps.PolygonOptions.prototype.strokeWeight;
 /** @type {boolean} */
google.maps.PolygonOptions.prototype.visible;
 /** @type {number} */
google.maps.PolygonOptions.prototype.zIndex;
/**
 * @extends {google.maps.MouseEvent}
 * @record
 * @struct
 */
google.maps.PolyMouseEvent = function() {};
 /** @type {number} */
google.maps.PolyMouseEvent.prototype.edge;
 /** @type {number} */
google.maps.PolyMouseEvent.prototype.path;
 /** @type {number} */
google.maps.PolyMouseEvent.prototype.vertex;

/**
 * @constructor
 * @struct
 * @param {!google.maps.RectangleOptions=} opts
 */
google.maps.Rectangle = function(opts) {};

/**
 * @return {!google.maps.LatLngBounds}
 */
google.maps.Rectangle.prototype.getBounds = function() {};

/**
 * @return {boolean}
 */
google.maps.Rectangle.prototype.getDraggable = function() {};

/**
 * @return {boolean}
 */
google.maps.Rectangle.prototype.getEditable = function() {};

/**
 * @return {!google.maps.Map}
 */
google.maps.Rectangle.prototype.getMap = function() {};

/**
 * @return {boolean}
 */
google.maps.Rectangle.prototype.getVisible = function() {};

/**
 * @param {(!google.maps.LatLngBounds|{east: number, north: number, south: number, west: number})} bounds
 * @return {void}
 */
google.maps.Rectangle.prototype.setBounds = function(bounds) {};

/**
 * @param {boolean} draggable
 * @return {void}
 */
google.maps.Rectangle.prototype.setDraggable = function(draggable) {};

/**
 * @param {boolean} editable
 * @return {void}
 */
google.maps.Rectangle.prototype.setEditable = function(editable) {};

/**
 * @param {!google.maps.Map} map
 * @return {void}
 */
google.maps.Rectangle.prototype.setMap = function(map) {};

/**
 * @param {!google.maps.RectangleOptions} options
 * @return {void}
 */
google.maps.Rectangle.prototype.setOptions = function(options) {};

/**
 * @param {boolean} visible
 * @return {void}
 */
google.maps.Rectangle.prototype.setVisible = function(visible) {};
/**
 * @record
 * @struct
 */
google.maps.RectangleOptions = function() {};
 /** @type {(!google.maps.LatLngBounds|{east: number, north: number, south: number, west: number})} */
google.maps.RectangleOptions.prototype.bounds;
 /** @type {boolean} */
google.maps.RectangleOptions.prototype.clickable;
 /** @type {boolean} */
google.maps.RectangleOptions.prototype.draggable;
 /** @type {boolean} */
google.maps.RectangleOptions.prototype.editable;
 /** @type {string} */
google.maps.RectangleOptions.prototype.fillColor;
 /** @type {number} */
google.maps.RectangleOptions.prototype.fillOpacity;
 /** @type {!google.maps.Map} */
google.maps.RectangleOptions.prototype.map;
 /** @type {string} */
google.maps.RectangleOptions.prototype.strokeColor;
 /** @type {number} */
google.maps.RectangleOptions.prototype.strokeOpacity;
 /** @type {google.maps.StrokePosition} */
google.maps.RectangleOptions.prototype.strokePosition;
 /** @type {number} */
google.maps.RectangleOptions.prototype.strokeWeight;
 /** @type {boolean} */
google.maps.RectangleOptions.prototype.visible;
 /** @type {number} */
google.maps.RectangleOptions.prototype.zIndex;

/**
 * @constructor
 * @struct
 * Create a circle using the passed CircleOptions, which specify the center, radius, and style.
 * @param {!google.maps.CircleOptions=} opts
 */
google.maps.Circle = function(opts) {};

/**
 * Gets the LatLngBounds of this Circle.
 * @return {!google.maps.LatLngBounds}
 */
google.maps.Circle.prototype.getBounds = function() {};

/**
 * Returns the center of this circle.
 * @return {!google.maps.LatLng}
 */
google.maps.Circle.prototype.getCenter = function() {};

/**
 * Returns whether this circle can be dragged by the user.
 * @return {boolean}
 */
google.maps.Circle.prototype.getDraggable = function() {};

/**
 * Returns whether this circle can be edited by the user.
 * @return {boolean}
 */
google.maps.Circle.prototype.getEditable = function() {};

/**
 * Returns the map on which this circle is displayed.
 * @return {!google.maps.Map}
 */
google.maps.Circle.prototype.getMap = function() {};

/**
 * Returns the radius of this circle (in meters).
 * @return {number}
 */
google.maps.Circle.prototype.getRadius = function() {};

/**
 * Returns whether this circle is visible on the map.
 * @return {boolean}
 */
google.maps.Circle.prototype.getVisible = function() {};

/**
 * Sets the center of this circle.
 * @param {(!google.maps.LatLng|{lat: number, lng: number})} center
 * @return {void}
 */
google.maps.Circle.prototype.setCenter = function(center) {};

/**
 * If set to true, the user can drag this circle over the map.
 * @param {boolean} draggable
 * @return {void}
 */
google.maps.Circle.prototype.setDraggable = function(draggable) {};

/**
 * If set to true, the user can edit this circle by dragging the control points shown at the center and around
 * the circumference of the circle.
 * @param {boolean} editable
 * @return {void}
 */
google.maps.Circle.prototype.setEditable = function(editable) {};

/**
 * Renders the circle on the specified map. If map is set to null, the circle will be removed.
 * @param {!google.maps.Map} map
 * @return {void}
 */
google.maps.Circle.prototype.setMap = function(map) {};

/**
 * @param {!google.maps.CircleOptions} options
 * @return {void}
 */
google.maps.Circle.prototype.setOptions = function(options) {};

/**
 * Sets the radius of this circle (in meters).
 * @param {number} radius
 * @return {void}
 */
google.maps.Circle.prototype.setRadius = function(radius) {};

/**
 * Hides this circle if set to false.
 * @param {boolean} visible
 * @return {void}
 */
google.maps.Circle.prototype.setVisible = function(visible) {};
/**
 * @record
 * @struct
 */
google.maps.CircleOptions = function() {};
 /** @type {(!google.maps.LatLng|{lat: number, lng: number})} */
google.maps.CircleOptions.prototype.center;
 /** @type {boolean} */
google.maps.CircleOptions.prototype.clickable;
 /** @type {boolean} */
google.maps.CircleOptions.prototype.draggable;
 /** @type {boolean} */
google.maps.CircleOptions.prototype.editable;
 /** @type {string} */
google.maps.CircleOptions.prototype.fillColor;
 /** @type {number} */
google.maps.CircleOptions.prototype.fillOpacity;
 /** @type {!google.maps.Map} */
google.maps.CircleOptions.prototype.map;
 /** @type {number} */
google.maps.CircleOptions.prototype.radius;
 /** @type {string} */
google.maps.CircleOptions.prototype.strokeColor;
 /** @type {number} */
google.maps.CircleOptions.prototype.strokeOpacity;
 /** @type {google.maps.StrokePosition} */
google.maps.CircleOptions.prototype.strokePosition;
 /** @type {number} */
google.maps.CircleOptions.prototype.strokeWeight;
 /** @type {boolean} */
google.maps.CircleOptions.prototype.visible;
 /** @type {number} */
google.maps.CircleOptions.prototype.zIndex;

/** @const */
google.maps.StrokePosition = {};
/** @const {number} */
google.maps.StrokePosition.CENTER;
/** @const {number} */
google.maps.StrokePosition.INSIDE;
/** @const {number} */
google.maps.StrokePosition.OUTSIDE;

/**
 * @constructor
 * @struct
 * @param {string} url
 * @param {(!google.maps.LatLngBounds|{east: number, north: number, south: number, west: number})} bounds
 * @param {!google.maps.GroundOverlayOptions=} opts
 */
google.maps.GroundOverlay = function(url, bounds, opts) {};

/**
 * @return {!google.maps.LatLngBounds}
 */
google.maps.GroundOverlay.prototype.getBounds = function() {};

/**
 * @return {!google.maps.Map}
 */
google.maps.GroundOverlay.prototype.getMap = function() {};

/**
 * @return {number}
 */
google.maps.GroundOverlay.prototype.getOpacity = function() {};

/**
 * @return {string}
 */
google.maps.GroundOverlay.prototype.getUrl = function() {};

/**
 * @param {!google.maps.Map} map
 * @return {void}
 */
google.maps.GroundOverlay.prototype.setMap = function(map) {};

/**
 * @param {number} opacity
 * @return {void}
 */
google.maps.GroundOverlay.prototype.setOpacity = function(opacity) {};
/**
 * @record
 * @struct
 */
google.maps.GroundOverlayOptions = function() {};
 /** @type {boolean} */
google.maps.GroundOverlayOptions.prototype.clickable;
 /** @type {!google.maps.Map} */
google.maps.GroundOverlayOptions.prototype.map;
 /** @type {number} */
google.maps.GroundOverlayOptions.prototype.opacity;
/**
 * @extends {google.maps.MVCObject}
 * @constructor
 * @struct
 */
google.maps.OverlayView = function() {};

/**
 * @return {void}
 */
google.maps.OverlayView.prototype.draw = function() {};

/**
 * @return {(!google.maps.Map|!google.maps.StreetViewPanorama)}
 */
google.maps.OverlayView.prototype.getMap = function() {};

/**
 * @return {!google.maps.MapPanes}
 */
google.maps.OverlayView.prototype.getPanes = function() {};

/**
 * @return {!google.maps.MapCanvasProjection}
 */
google.maps.OverlayView.prototype.getProjection = function() {};

/**
 * @return {void}
 */
google.maps.OverlayView.prototype.onAdd = function() {};

/**
 * @return {void}
 */
google.maps.OverlayView.prototype.onRemove = function() {};

/**
 * @param {(!google.maps.Map|!google.maps.StreetViewPanorama)} map
 * @return {void}
 */
google.maps.OverlayView.prototype.setMap = function(map) {};
/**
 * @record
 * @struct
 */
google.maps.MapPanes = function() {};
 /** @type {!Element} */
google.maps.MapPanes.prototype.floatPane;
 /** @type {!Element} */
google.maps.MapPanes.prototype.floatShadow;
 /** @type {!Element} */
google.maps.MapPanes.prototype.mapPane;
 /** @type {!Element} */
google.maps.MapPanes.prototype.markerLayer;
 /** @type {!Element} */
google.maps.MapPanes.prototype.overlayImage;
 /** @type {!Element} */
google.maps.MapPanes.prototype.overlayLayer;
 /** @type {!Element} */
google.maps.MapPanes.prototype.overlayMouseTarget;
 /** @type {!Element} */
google.maps.MapPanes.prototype.overlayShadow;
/**
 * @extends {google.maps.MVCObject}
 * @constructor
 * @struct
 */
google.maps.MapCanvasProjection = function() {};

/**
 * @param {!google.maps.Point} pixel
 * @param {boolean=} nowrap
 * @return {!google.maps.LatLng}
 */
google.maps.MapCanvasProjection.prototype.fromContainerPixelToLatLng = function(pixel, nowrap) {};

/**
 * @param {!google.maps.Point} pixel
 * @param {boolean=} nowrap
 * @return {!google.maps.LatLng}
 */
google.maps.MapCanvasProjection.prototype.fromDivPixelToLatLng = function(pixel, nowrap) {};

/**
 * @param {!google.maps.LatLng} latLng
 * @return {!google.maps.Point}
 */
google.maps.MapCanvasProjection.prototype.fromLatLngToContainerPixel = function(latLng) {};

/**
 * @param {!google.maps.LatLng} latLng
 * @return {!google.maps.Point}
 */
google.maps.MapCanvasProjection.prototype.fromLatLngToDivPixel = function(latLng) {};

/**
 * @return {number}
 */
google.maps.MapCanvasProjection.prototype.getWorldWidth = function() {};
/**
 * @constructor
 * @struct
 */
google.maps.Geocoder = function() {};

/**
 * @param {!google.maps.GeocoderRequest} request
 * @param {function(!Array<!google.maps.GeocoderResult>, google.maps.GeocoderStatus): void} callback
 * @return {void}
 */
google.maps.Geocoder.prototype.geocode = function(request, callback) {};
/**
 * @record
 * @struct
 */
google.maps.GeocoderRequest = function() {};
 /** @type {string} */
google.maps.GeocoderRequest.prototype.address;
 /** @type {(!google.maps.LatLngBounds|{east: number, north: number, south: number, west: number})} */
google.maps.GeocoderRequest.prototype.bounds;
 /** @type {!google.maps.GeocoderComponentRestrictions} */
google.maps.GeocoderRequest.prototype.componentRestrictions;
 /** @type {(!google.maps.LatLng|{lat: number, lng: number})} */
google.maps.GeocoderRequest.prototype.location;
 /** @type {string} */
google.maps.GeocoderRequest.prototype.placeId;
 /** @type {string} */
google.maps.GeocoderRequest.prototype.region;
/**
 * @record
 * @struct
 */
google.maps.GeocoderComponentRestrictions = function() {};
 /** @type {string} */
google.maps.GeocoderComponentRestrictions.prototype.administrativeArea;
 /** @type {(string|!Array<string>)} */
google.maps.GeocoderComponentRestrictions.prototype.country;
 /** @type {string} */
google.maps.GeocoderComponentRestrictions.prototype.locality;
 /** @type {string} */
google.maps.GeocoderComponentRestrictions.prototype.postalCode;
 /** @type {string} */
google.maps.GeocoderComponentRestrictions.prototype.route;

/** @const */
google.maps.GeocoderStatus = {};
/** @const {number} */
google.maps.GeocoderStatus.ERROR;
/** @const {number} */
google.maps.GeocoderStatus.INVALID_REQUEST;
/** @const {number} */
google.maps.GeocoderStatus.OK;
/** @const {number} */
google.maps.GeocoderStatus.OVER_QUERY_LIMIT;
/** @const {number} */
google.maps.GeocoderStatus.REQUEST_DENIED;
/** @const {number} */
google.maps.GeocoderStatus.UNKNOWN_ERROR;
/** @const {number} */
google.maps.GeocoderStatus.ZERO_RESULTS;
/**
 * @record
 * @struct
 */
google.maps.GeocoderResult = function() {};
 /** @type {!Array<!google.maps.GeocoderAddressComponent>} */
google.maps.GeocoderResult.prototype.address_components;
 /** @type {string} */
google.maps.GeocoderResult.prototype.formatted_address;
 /** @type {!google.maps.GeocoderGeometry} */
google.maps.GeocoderResult.prototype.geometry;
 /** @type {boolean} */
google.maps.GeocoderResult.prototype.partial_match;
 /** @type {string} */
google.maps.GeocoderResult.prototype.place_id;
 /** @type {!Array<string>} */
google.maps.GeocoderResult.prototype.postcode_localities;
 /** @type {!Array<string>} */
google.maps.GeocoderResult.prototype.types;
/**
 * @record
 * @struct
 */
google.maps.GeocoderAddressComponent = function() {};
 /** @type {string} */
google.maps.GeocoderAddressComponent.prototype.long_name;
 /** @type {string} */
google.maps.GeocoderAddressComponent.prototype.short_name;
 /** @type {!Array<string>} */
google.maps.GeocoderAddressComponent.prototype.types;
/**
 * @record
 * @struct
 */
google.maps.GeocoderGeometry = function() {};
 /** @type {!google.maps.LatLngBounds} */
google.maps.GeocoderGeometry.prototype.bounds;
 /** @type {!google.maps.LatLng} */
google.maps.GeocoderGeometry.prototype.location;
 /** @type {google.maps.GeocoderLocationType} */
google.maps.GeocoderGeometry.prototype.location_type;
 /** @type {!google.maps.LatLngBounds} */
google.maps.GeocoderGeometry.prototype.viewport;

/** @const */
google.maps.GeocoderLocationType = {};
/** @const {number} */
google.maps.GeocoderLocationType.APPROXIMATE;
/** @const {number} */
google.maps.GeocoderLocationType.GEOMETRIC_CENTER;
/** @const {number} */
google.maps.GeocoderLocationType.RANGE_INTERPOLATED;
/** @const {number} */
google.maps.GeocoderLocationType.ROOFTOP;

/**
 * @constructor
 * @struct
 * @param {!google.maps.DirectionsRendererOptions=} opts
 */
google.maps.DirectionsRenderer = function(opts) {};

/**
 * @return {!google.maps.DirectionsResult}
 */
google.maps.DirectionsRenderer.prototype.getDirections = function() {};

/**
 * @return {!google.maps.Map}
 */
google.maps.DirectionsRenderer.prototype.getMap = function() {};

/**
 * @return {!Element}
 */
google.maps.DirectionsRenderer.prototype.getPanel = function() {};

/**
 * @return {number}
 */
google.maps.DirectionsRenderer.prototype.getRouteIndex = function() {};

/**
 * @param {!google.maps.DirectionsResult} directions
 * @return {void}
 */
google.maps.DirectionsRenderer.prototype.setDirections = function(directions) {};

/**
 * @param {!google.maps.Map} map
 * @return {void}
 */
google.maps.DirectionsRenderer.prototype.setMap = function(map) {};

/**
 * @param {!google.maps.DirectionsRendererOptions} options
 * @return {void}
 */
google.maps.DirectionsRenderer.prototype.setOptions = function(options) {};

/**
 * @param {!Element} panel
 * @return {void}
 */
google.maps.DirectionsRenderer.prototype.setPanel = function(panel) {};

/**
 * @param {number} routeIndex
 * @return {void}
 */
google.maps.DirectionsRenderer.prototype.setRouteIndex = function(routeIndex) {};
/**
 * @record
 * @struct
 */
google.maps.DirectionsRendererOptions = function() {};
 /** @type {!google.maps.DirectionsResult} */
google.maps.DirectionsRendererOptions.prototype.directions;
 /** @type {boolean} */
google.maps.DirectionsRendererOptions.prototype.draggable;
 /** @type {boolean} */
google.maps.DirectionsRendererOptions.prototype.hideRouteList;
 /** @type {!google.maps.InfoWindow} */
google.maps.DirectionsRendererOptions.prototype.infoWindow;
 /** @type {!google.maps.Map} */
google.maps.DirectionsRendererOptions.prototype.map;
 /** @type {!google.maps.MarkerOptions} */
google.maps.DirectionsRendererOptions.prototype.markerOptions;
 /** @type {!Element} */
google.maps.DirectionsRendererOptions.prototype.panel;
 /** @type {!google.maps.PolylineOptions} */
google.maps.DirectionsRendererOptions.prototype.polylineOptions;
 /** @type {boolean} */
google.maps.DirectionsRendererOptions.prototype.preserveViewport;
 /** @type {number} */
google.maps.DirectionsRendererOptions.prototype.routeIndex;
 /** @type {boolean} */
google.maps.DirectionsRendererOptions.prototype.suppressBicyclingLayer;
 /** @type {boolean} */
google.maps.DirectionsRendererOptions.prototype.suppressInfoWindows;
 /** @type {boolean} */
google.maps.DirectionsRendererOptions.prototype.suppressMarkers;
 /** @type {boolean} */
google.maps.DirectionsRendererOptions.prototype.suppressPolylines;
/**
 * @constructor
 * @struct
 */
google.maps.DirectionsService = function() {};

/**
 * @param {!google.maps.DirectionsRequest} request
 * @param {function(!google.maps.DirectionsResult, google.maps.DirectionsStatus): void} callback
 * @return {void}
 */
google.maps.DirectionsService.prototype.route = function(request, callback) {};
/**
 * @record
 * @struct
 */
google.maps.DirectionsRequest = function() {};
 /** @type {boolean} */
google.maps.DirectionsRequest.prototype.avoidFerries;
 /** @type {boolean} */
google.maps.DirectionsRequest.prototype.avoidHighways;
 /** @type {boolean} */
google.maps.DirectionsRequest.prototype.avoidTolls;
 /** @type {(string|!google.maps.LatLng|{lat: number, lng: number}|!google.maps.Place)} */
google.maps.DirectionsRequest.prototype.destination;
 /** @type {boolean} */
google.maps.DirectionsRequest.prototype.durationInTraffic;
 /** @type {!google.maps.DrivingOptions} */
google.maps.DirectionsRequest.prototype.drivingOptions;
 /** @type {boolean} */
google.maps.DirectionsRequest.prototype.optimizeWaypoints;
 /** @type {(string|!google.maps.LatLng|{lat: number, lng: number}|!google.maps.Place)} */
google.maps.DirectionsRequest.prototype.origin;
 /** @type {boolean} */
google.maps.DirectionsRequest.prototype.provideRouteAlternatives;
 /** @type {string} */
google.maps.DirectionsRequest.prototype.region;
 /** @type {!google.maps.TransitOptions} */
google.maps.DirectionsRequest.prototype.transitOptions;
 /** @type {google.maps.TravelMode} */
google.maps.DirectionsRequest.prototype.travelMode;
 /** @type {google.maps.UnitSystem} */
google.maps.DirectionsRequest.prototype.unitSystem;
 /** @type {!Array<!google.maps.DirectionsWaypoint>} */
google.maps.DirectionsRequest.prototype.waypoints;

/** @const */
google.maps.TravelMode = {};
/** @const {number} */
google.maps.TravelMode.BICYCLING;
/** @const {number} */
google.maps.TravelMode.DRIVING;
/** @const {number} */
google.maps.TravelMode.TRANSIT;
/** @const {number} */
google.maps.TravelMode.WALKING;

/** @const */
google.maps.UnitSystem = {};
/** @const {number} */
google.maps.UnitSystem.IMPERIAL;
/** @const {number} */
google.maps.UnitSystem.METRIC;
/**
 * @record
 * @struct
 */
google.maps.TransitOptions = function() {};
 /** @type {!Date} */
google.maps.TransitOptions.prototype.arrivalTime;
 /** @type {!Date} */
google.maps.TransitOptions.prototype.departureTime;
 /** @type {!Array<google.maps.TransitMode>} */
google.maps.TransitOptions.prototype.modes;
 /** @type {google.maps.TransitRoutePreference} */
google.maps.TransitOptions.prototype.routingPreference;

/** @const */
google.maps.TransitMode = {};
/** @const {number} */
google.maps.TransitMode.BUS;
/** @const {number} */
google.maps.TransitMode.RAIL;
/** @const {number} */
google.maps.TransitMode.SUBWAY;
/** @const {number} */
google.maps.TransitMode.TRAIN;
/** @const {number} */
google.maps.TransitMode.TRAM;

/** @const */
google.maps.TransitRoutePreference = {};
/** @const {number} */
google.maps.TransitRoutePreference.FEWER_TRANSFERS;
/** @const {number} */
google.maps.TransitRoutePreference.LESS_WALKING;
/**
 * @record
 * @struct
 */
google.maps.TransitFare = function() {};
/**
 * @record
 * @struct
 */
google.maps.DrivingOptions = function() {};
 /** @type {!Date} */
google.maps.DrivingOptions.prototype.departureTime;
 /** @type {google.maps.TrafficModel} */
google.maps.DrivingOptions.prototype.trafficModel;

/** @const */
google.maps.TrafficModel = {};
/** @const {number} */
google.maps.TrafficModel.BEST_GUESS;
/** @const {number} */
google.maps.TrafficModel.OPTIMISTIC;
/** @const {number} */
google.maps.TrafficModel.PESSIMISTIC;
/**
 * @record
 * @struct
 */
google.maps.DirectionsWaypoint = function() {};
 /** @type {(string|!google.maps.LatLng|{lat: number, lng: number})} */
google.maps.DirectionsWaypoint.prototype.location;
 /** @type {boolean} */
google.maps.DirectionsWaypoint.prototype.stopover;

/** @const */
google.maps.DirectionsStatus = {};
/** @const {number} */
google.maps.DirectionsStatus.INVALID_REQUEST;
/** @const {number} */
google.maps.DirectionsStatus.MAX_WAYPOINTS_EXCEEDED;
/** @const {number} */
google.maps.DirectionsStatus.NOT_FOUND;
/** @const {number} */
google.maps.DirectionsStatus.OK;
/** @const {number} */
google.maps.DirectionsStatus.OVER_QUERY_LIMIT;
/** @const {number} */
google.maps.DirectionsStatus.REQUEST_DENIED;
/** @const {number} */
google.maps.DirectionsStatus.UNKNOWN_ERROR;
/** @const {number} */
google.maps.DirectionsStatus.ZERO_RESULTS;
/**
 * @record
 * @struct
 */
google.maps.DirectionsResult = function() {};
 /** @type {!Array<!google.maps.DirectionsGeocodedWaypoint>} */
google.maps.DirectionsResult.prototype.geocoded_waypoints;
 /** @type {!Array<!google.maps.DirectionsRoute>} */
google.maps.DirectionsResult.prototype.routes;
/**
 * @record
 * @struct
 */
google.maps.DirectionsGeocodedWaypoint = function() {};
 /** @type {boolean} */
google.maps.DirectionsGeocodedWaypoint.prototype.partial_match;
 /** @type {string} */
google.maps.DirectionsGeocodedWaypoint.prototype.place_id;
 /** @type {!Array<string>} */
google.maps.DirectionsGeocodedWaypoint.prototype.types;
/**
 * @record
 * @struct
 */
google.maps.DirectionsRoute = function() {};
 /** @type {!google.maps.LatLngBounds} */
google.maps.DirectionsRoute.prototype.bounds;
 /** @type {string} */
google.maps.DirectionsRoute.prototype.copyrights;
 /** @type {!google.maps.TransitFare} */
google.maps.DirectionsRoute.prototype.fare;
 /** @type {!Array<!google.maps.DirectionsLeg>} */
google.maps.DirectionsRoute.prototype.legs;
 /** @type {!Array<!google.maps.LatLng>} */
google.maps.DirectionsRoute.prototype.overview_path;
 /** @type {string} */
google.maps.DirectionsRoute.prototype.overview_polyline;
 /** @type {!Array<string>} */
google.maps.DirectionsRoute.prototype.warnings;
 /** @type {!Array<number>} */
google.maps.DirectionsRoute.prototype.waypoint_order;
/**
 * @record
 * @struct
 */
google.maps.DirectionsLeg = function() {};
 /** @type {!google.maps.Time} */
google.maps.DirectionsLeg.prototype.arrival_time;
 /** @type {!google.maps.Time} */
google.maps.DirectionsLeg.prototype.departure_time;
 /** @type {!google.maps.Distance} */
google.maps.DirectionsLeg.prototype.distance;
 /** @type {!google.maps.Duration} */
google.maps.DirectionsLeg.prototype.duration;
 /** @type {!google.maps.Duration} */
google.maps.DirectionsLeg.prototype.duration_in_traffic;
 /** @type {string} */
google.maps.DirectionsLeg.prototype.end_address;
 /** @type {!google.maps.LatLng} */
google.maps.DirectionsLeg.prototype.end_location;
 /** @type {string} */
google.maps.DirectionsLeg.prototype.start_address;
 /** @type {!google.maps.LatLng} */
google.maps.DirectionsLeg.prototype.start_location;
 /** @type {!Array<!google.maps.DirectionsStep>} */
google.maps.DirectionsLeg.prototype.steps;
 /** @type {!Array<!google.maps.LatLng>} */
google.maps.DirectionsLeg.prototype.via_waypoints;
/**
 * @record
 * @struct
 */
google.maps.DirectionsStep = function() {};
 /** @type {!google.maps.Distance} */
google.maps.DirectionsStep.prototype.distance;
 /** @type {!google.maps.Duration} */
google.maps.DirectionsStep.prototype.duration;
 /** @type {!google.maps.LatLng} */
google.maps.DirectionsStep.prototype.end_location;
 /** @type {string} */
google.maps.DirectionsStep.prototype.instructions;
 /** @type {!Array<!google.maps.LatLng>} */
google.maps.DirectionsStep.prototype.path;
 /** @type {!google.maps.LatLng} */
google.maps.DirectionsStep.prototype.start_location;
 /** @type {!google.maps.DirectionsStep} */
google.maps.DirectionsStep.prototype.steps;
 /** @type {!google.maps.TransitDetails} */
google.maps.DirectionsStep.prototype.transit;
 /** @type {google.maps.TravelMode} */
google.maps.DirectionsStep.prototype.travel_mode;
/**
 * @record
 * @struct
 */
google.maps.Distance = function() {};
 /** @type {string} */
google.maps.Distance.prototype.text;
 /** @type {number} */
google.maps.Distance.prototype.value;
/**
 * @record
 * @struct
 */
google.maps.Duration = function() {};
 /** @type {string} */
google.maps.Duration.prototype.text;
 /** @type {number} */
google.maps.Duration.prototype.value;
/**
 * @record
 * @struct
 */
google.maps.Time = function() {};
 /** @type {string} */
google.maps.Time.prototype.text;
 /** @type {string} */
google.maps.Time.prototype.time_zone;
 /** @type {!Date} */
google.maps.Time.prototype.value;
/**
 * @record
 * @struct
 */
google.maps.TransitDetails = function() {};
 /** @type {!google.maps.TransitStop} */
google.maps.TransitDetails.prototype.arrival_stop;
 /** @type {!google.maps.Time} */
google.maps.TransitDetails.prototype.arrival_time;
 /** @type {!google.maps.TransitStop} */
google.maps.TransitDetails.prototype.departure_stop;
 /** @type {!google.maps.Time} */
google.maps.TransitDetails.prototype.departure_time;
 /** @type {string} */
google.maps.TransitDetails.prototype.headsign;
 /** @type {number} */
google.maps.TransitDetails.prototype.headway;
 /** @type {!google.maps.TransitLine} */
google.maps.TransitDetails.prototype.line;
 /** @type {number} */
google.maps.TransitDetails.prototype.num_stops;
/**
 * @record
 * @struct
 */
google.maps.TransitStop = function() {};
 /** @type {!google.maps.LatLng} */
google.maps.TransitStop.prototype.location;
 /** @type {string} */
google.maps.TransitStop.prototype.name;
/**
 * @record
 * @struct
 */
google.maps.TransitLine = function() {};
 /** @type {!Array<!google.maps.TransitAgency>} */
google.maps.TransitLine.prototype.agencies;
 /** @type {string} */
google.maps.TransitLine.prototype.color;
 /** @type {string} */
google.maps.TransitLine.prototype.icon;
 /** @type {string} */
google.maps.TransitLine.prototype.name;
 /** @type {string} */
google.maps.TransitLine.prototype.short_name;
 /** @type {string} */
google.maps.TransitLine.prototype.text_color;
 /** @type {string} */
google.maps.TransitLine.prototype.url;
 /** @type {!google.maps.TransitVehicle} */
google.maps.TransitLine.prototype.vehicle;
/**
 * @record
 * @struct
 */
google.maps.TransitAgency = function() {};
 /** @type {string} */
google.maps.TransitAgency.prototype.name;
 /** @type {string} */
google.maps.TransitAgency.prototype.phone;
 /** @type {string} */
google.maps.TransitAgency.prototype.url;
/**
 * @record
 * @struct
 */
google.maps.TransitVehicle = function() {};
 /** @type {string} */
google.maps.TransitVehicle.prototype.icon;
 /** @type {string} */
google.maps.TransitVehicle.prototype.local_icon;
 /** @type {string} */
google.maps.TransitVehicle.prototype.name;
 /** @type {google.maps.VehicleType} */
google.maps.TransitVehicle.prototype.type;

/** @const */
google.maps.VehicleType = {};
/** @const {number} */
google.maps.VehicleType.BUS;
/** @const {number} */
google.maps.VehicleType.CABLE_CAR;
/** @const {number} */
google.maps.VehicleType.COMMUTER_TRAIN;
/** @const {number} */
google.maps.VehicleType.FERRY;
/** @const {number} */
google.maps.VehicleType.FUNICULAR;
/** @const {number} */
google.maps.VehicleType.GONDOLA_LIFT;
/** @const {number} */
google.maps.VehicleType.HEAVY_RAIL;
/** @const {number} */
google.maps.VehicleType.HIGH_SPEED_TRAIN;
/** @const {number} */
google.maps.VehicleType.INTERCITY_BUS;
/** @const {number} */
google.maps.VehicleType.METRO_RAIL;
/** @const {number} */
google.maps.VehicleType.MONORAIL;
/** @const {number} */
google.maps.VehicleType.OTHER;
/** @const {number} */
google.maps.VehicleType.RAIL;
/** @const {number} */
google.maps.VehicleType.SHARE_TAXI;
/** @const {number} */
google.maps.VehicleType.SUBWAY;
/** @const {number} */
google.maps.VehicleType.TRAM;
/** @const {number} */
google.maps.VehicleType.TROLLEYBUS;
/**
 * @constructor
 * @struct
 */
google.maps.ElevationService = function() {};

/**
 * @param {!google.maps.PathElevationRequest} request
 * @param {function(!Array<!google.maps.ElevationResult>, google.maps.ElevationStatus): void} callback
 * @return {void}
 */
google.maps.ElevationService.prototype.getElevationAlongPath = function(request, callback) {};

/**
 * @param {!google.maps.LocationElevationRequest} request
 * @param {function(!Array<!google.maps.ElevationResult>, google.maps.ElevationStatus): void} callback
 * @return {void}
 */
google.maps.ElevationService.prototype.getElevationForLocations = function(request, callback) {};
/**
 * @record
 * @struct
 */
google.maps.LocationElevationRequest = function() {};
 /** @type {!Array<!google.maps.LatLng>} */
google.maps.LocationElevationRequest.prototype.locations;
/**
 * @record
 * @struct
 */
google.maps.PathElevationRequest = function() {};
 /** @type {!Array<!google.maps.LatLng>} */
google.maps.PathElevationRequest.prototype.path;
 /** @type {number} */
google.maps.PathElevationRequest.prototype.samples;
/**
 * @record
 * @struct
 */
google.maps.ElevationResult = function() {};
 /** @type {number} */
google.maps.ElevationResult.prototype.elevation;
 /** @type {!google.maps.LatLng} */
google.maps.ElevationResult.prototype.location;
 /** @type {number} */
google.maps.ElevationResult.prototype.resolution;

/** @const */
google.maps.ElevationStatus = {};
/** @const {number} */
google.maps.ElevationStatus.INVALID_REQUEST;
/** @const {number} */
google.maps.ElevationStatus.OK;
/** @const {number} */
google.maps.ElevationStatus.OVER_QUERY_LIMIT;
/** @const {number} */
google.maps.ElevationStatus.REQUEST_DENIED;
/** @const {number} */
google.maps.ElevationStatus.UNKNOWN_ERROR;
/**
 * @constructor
 * @struct
 */
google.maps.MaxZoomService = function() {};

/**
 * @param {(!google.maps.LatLng|{lat: number, lng: number})} latlng
 * @param {function(!google.maps.MaxZoomResult): void} callback
 * @return {void}
 */
google.maps.MaxZoomService.prototype.getMaxZoomAtLatLng = function(latlng, callback) {};
/**
 * @record
 * @struct
 */
google.maps.MaxZoomResult = function() {};
 /** @type {google.maps.MaxZoomStatus} */
google.maps.MaxZoomResult.prototype.status;
 /** @type {number} */
google.maps.MaxZoomResult.prototype.zoom;

/** @const */
google.maps.MaxZoomStatus = {};
/** @const {number} */
google.maps.MaxZoomStatus.ERROR;
/** @const {number} */
google.maps.MaxZoomStatus.OK;
/**
 * @constructor
 * @struct
 */
google.maps.DistanceMatrixService = function() {};

/**
 * @param {!google.maps.DistanceMatrixRequest} request
 * @param {function(!google.maps.DistanceMatrixResponse, google.maps.DistanceMatrixStatus): void} callback
 * @return {void}
 */
google.maps.DistanceMatrixService.prototype.getDistanceMatrix = function(request, callback) {};
/**
 * @record
 * @struct
 */
google.maps.DistanceMatrixRequest = function() {};
 /** @type {boolean} */
google.maps.DistanceMatrixRequest.prototype.avoidFerries;
 /** @type {boolean} */
google.maps.DistanceMatrixRequest.prototype.avoidHighways;
 /** @type {boolean} */
google.maps.DistanceMatrixRequest.prototype.avoidTolls;
 /** @type {(!Array<string>|!Array<!google.maps.LatLng>|!Array<!google.maps.Place>)} */
google.maps.DistanceMatrixRequest.prototype.destinations;
 /** @type {!google.maps.DrivingOptions} */
google.maps.DistanceMatrixRequest.prototype.drivingOptions;
 /** @type {boolean} */
google.maps.DistanceMatrixRequest.prototype.durationInTraffic;
 /** @type {(!Array<string>|!Array<!google.maps.LatLng>|!Array<!google.maps.Place>)} */
google.maps.DistanceMatrixRequest.prototype.origins;
 /** @type {string} */
google.maps.DistanceMatrixRequest.prototype.region;
 /** @type {!google.maps.TransitOptions} */
google.maps.DistanceMatrixRequest.prototype.transitOptions;
 /** @type {google.maps.TravelMode} */
google.maps.DistanceMatrixRequest.prototype.travelMode;
 /** @type {google.maps.UnitSystem} */
google.maps.DistanceMatrixRequest.prototype.unitSystem;
/**
 * @record
 * @struct
 */
google.maps.DistanceMatrixResponse = function() {};
 /** @type {!Array<string>} */
google.maps.DistanceMatrixResponse.prototype.destinationAddresses;
 /** @type {!Array<string>} */
google.maps.DistanceMatrixResponse.prototype.originAddresses;
 /** @type {!Array<!google.maps.DistanceMatrixResponseRow>} */
google.maps.DistanceMatrixResponse.prototype.rows;
/**
 * @record
 * @struct
 */
google.maps.DistanceMatrixResponseRow = function() {};
 /** @type {!Array<!google.maps.DistanceMatrixResponseElement>} */
google.maps.DistanceMatrixResponseRow.prototype.elements;
/**
 * @record
 * @struct
 */
google.maps.DistanceMatrixResponseElement = function() {};
 /** @type {!google.maps.Distance} */
google.maps.DistanceMatrixResponseElement.prototype.distance;
 /** @type {!google.maps.Duration} */
google.maps.DistanceMatrixResponseElement.prototype.duration;
 /** @type {!google.maps.Duration} */
google.maps.DistanceMatrixResponseElement.prototype.duration_in_traffic;
 /** @type {!google.maps.TransitFare} */
google.maps.DistanceMatrixResponseElement.prototype.fare;
 /** @type {google.maps.DistanceMatrixElementStatus} */
google.maps.DistanceMatrixResponseElement.prototype.status;

/** @const */
google.maps.DistanceMatrixStatus = {};
/** @const {number} */
google.maps.DistanceMatrixStatus.INVALID_REQUEST;
/** @const {number} */
google.maps.DistanceMatrixStatus.MAX_DIMENSIONS_EXCEEDED;
/** @const {number} */
google.maps.DistanceMatrixStatus.MAX_ELEMENTS_EXCEEDED;
/** @const {number} */
google.maps.DistanceMatrixStatus.OK;
/** @const {number} */
google.maps.DistanceMatrixStatus.OVER_QUERY_LIMIT;
/** @const {number} */
google.maps.DistanceMatrixStatus.REQUEST_DENIED;
/** @const {number} */
google.maps.DistanceMatrixStatus.UNKNOWN_ERROR;

/** @const */
google.maps.DistanceMatrixElementStatus = {};
/** @const {number} */
google.maps.DistanceMatrixElementStatus.NOT_FOUND;
/** @const {number} */
google.maps.DistanceMatrixElementStatus.OK;
/** @const {number} */
google.maps.DistanceMatrixElementStatus.ZERO_RESULTS;
/**
 * @record
 * @struct
 */
google.maps.Attribution = function() {};
 /** @type {string} */
google.maps.Attribution.prototype.iosDeepLinkId;
 /** @type {string} */
google.maps.Attribution.prototype.source;
 /** @type {string} */
google.maps.Attribution.prototype.webUrl;
/**
 * @record
 * @struct
 */
google.maps.Place = function() {};
 /** @type {(!google.maps.LatLng|{lat: number, lng: number})} */
google.maps.Place.prototype.location;
 /** @type {string} */
google.maps.Place.prototype.placeId;
 /** @type {string} */
google.maps.Place.prototype.query;

/**
 * @constructor
 * @struct
 * @param {!Node} container
 * @param {!google.maps.SaveWidgetOptions=} opts
 */
google.maps.SaveWidget = function(container, opts) {};

/**
 * @return {!google.maps.Attribution}
 */
google.maps.SaveWidget.prototype.getAttribution = function() {};

/**
 * @return {!google.maps.Place}
 */
google.maps.SaveWidget.prototype.getPlace = function() {};

/**
 * @param {!google.maps.Attribution} attribution
 * @return {void}
 */
google.maps.SaveWidget.prototype.setAttribution = function(attribution) {};

/**
 * @param {!google.maps.SaveWidgetOptions} opts
 * @return {void}
 */
google.maps.SaveWidget.prototype.setOptions = function(opts) {};

/**
 * @param {!google.maps.Place} place
 * @return {void}
 */
google.maps.SaveWidget.prototype.setPlace = function(place) {};
/**
 * @record
 * @struct
 */
google.maps.SaveWidgetOptions = function() {};
 /** @type {!google.maps.Attribution} */
google.maps.SaveWidgetOptions.prototype.attribution;
 /** @type {!google.maps.Place} */
google.maps.SaveWidgetOptions.prototype.place;
/**
 * @record
 * @struct
 */
google.maps.MapType = function() {};
 /** @type {string} */
google.maps.MapType.prototype.alt;
 /** @type {number} */
google.maps.MapType.prototype.maxZoom;
 /** @type {number} */
google.maps.MapType.prototype.minZoom;
 /** @type {string} */
google.maps.MapType.prototype.name;
 /** @type {!google.maps.Projection} */
google.maps.MapType.prototype.projection;
 /** @type {number} */
google.maps.MapType.prototype.radius;
 /** @type {!google.maps.Size} */
google.maps.MapType.prototype.tileSize;

/**
 * @param {!google.maps.Point} tileCoord
 * @param {number} zoom
 * @param {!Document} ownerDocument
 * @return {!Element}
 */
google.maps.MapType.prototype.getTile = function(tileCoord, zoom, ownerDocument) {};

/**
 * @param {!Element} tile
 * @return {void}
 */
google.maps.MapType.prototype.releaseTile = function(tile) {};

/**
 * @constructor
 * @struct
 */
google.maps.MapTypeRegistry = function() {};

/**
 * @param {string} id
 * @param {!google.maps.MapType} mapType
 * @return {void}
 */
google.maps.MapTypeRegistry.prototype.set = function(id, mapType) {};
/**
 * @record
 * @struct
 */
google.maps.Projection = function() {};

/**
 * @param {!google.maps.LatLng} latLng
 * @param {!google.maps.Point=} point
 * @return {!google.maps.Point}
 */
google.maps.Projection.prototype.fromLatLngToPoint = function(latLng, point) {};

/**
 * @param {!google.maps.Point} pixel
 * @param {boolean=} noWrap
 * @return {!google.maps.LatLng}
 */
google.maps.Projection.prototype.fromPointToLatLng = function(pixel, noWrap) {};

/**
 * @constructor
 * @struct
 * @param {!google.maps.ImageMapTypeOptions} opts
 */
google.maps.ImageMapType = function(opts) {};

/**
 * @return {number}
 */
google.maps.ImageMapType.prototype.getOpacity = function() {};

/**
 * @param {!google.maps.Point} tileCoord
 * @param {number} zoom
 * @param {!Document} ownerDocument
 * @return {!Element}
 */
google.maps.ImageMapType.prototype.getTile = function(tileCoord, zoom, ownerDocument) {};

/**
 * @param {!Element} tile
 * @return {void}
 */
google.maps.ImageMapType.prototype.releaseTile = function(tile) {};

/**
 * @param {number} opacity
 * @return {void}
 */
google.maps.ImageMapType.prototype.setOpacity = function(opacity) {};
/**
 * @record
 * @struct
 */
google.maps.ImageMapTypeOptions = function() {};
 /** @type {string} */
google.maps.ImageMapTypeOptions.prototype.alt;
 /** @type {number} */
google.maps.ImageMapTypeOptions.prototype.maxZoom;
 /** @type {number} */
google.maps.ImageMapTypeOptions.prototype.minZoom;
 /** @type {string} */
google.maps.ImageMapTypeOptions.prototype.name;
 /** @type {number} */
google.maps.ImageMapTypeOptions.prototype.opacity;
 /** @type {!google.maps.Size} */
google.maps.ImageMapTypeOptions.prototype.tileSize;

/**
 * @param {!google.maps.Point} tileCoord
 * @param {number} zoom
 * @return {string}
 */
google.maps.ImageMapTypeOptions.prototype.getTileUrl = function(tileCoord, zoom) {};

/**
 * @constructor
 * @struct
 * @param {!Array<!google.maps.MapTypeStyle>} styles
 * @param {!google.maps.StyledMapTypeOptions=} options
 */
google.maps.StyledMapType = function(styles, options) {};

/**
 * @param {!google.maps.Point} tileCoord
 * @param {number} zoom
 * @param {!Document} ownerDocument
 * @return {!Element}
 */
google.maps.StyledMapType.prototype.getTile = function(tileCoord, zoom, ownerDocument) {};

/**
 * @param {!Element} tile
 * @return {void}
 */
google.maps.StyledMapType.prototype.releaseTile = function(tile) {};
/**
 * @record
 * @struct
 */
google.maps.StyledMapTypeOptions = function() {};
 /** @type {string} */
google.maps.StyledMapTypeOptions.prototype.alt;
 /** @type {number} */
google.maps.StyledMapTypeOptions.prototype.maxZoom;
 /** @type {number} */
google.maps.StyledMapTypeOptions.prototype.minZoom;
 /** @type {string} */
google.maps.StyledMapTypeOptions.prototype.name;
/**
 * @record
 * @struct
 */
google.maps.MapTypeStyle = function() {};
 /** @type {string} */
google.maps.MapTypeStyle.prototype.elementType;
 /** @type {string} */
google.maps.MapTypeStyle.prototype.featureType;
 /** @type {!Array<!google.maps.MapTypeStyler>} */
google.maps.MapTypeStyle.prototype.stylers;

/** @typedef {string} */
google.maps.MapTypeStyleFeatureType;

/** @typedef {string} */
google.maps.MapTypeStyleElementType;
/**
 * @record
 * @struct
 */
google.maps.MapTypeStyler = function() {};
 /** @type {string} */
google.maps.MapTypeStyler.prototype.color;
 /** @type {number} */
google.maps.MapTypeStyler.prototype.gamma;
 /** @type {string} */
google.maps.MapTypeStyler.prototype.hue;
 /** @type {boolean} */
google.maps.MapTypeStyler.prototype.invert_lightness;
 /** @type {number} */
google.maps.MapTypeStyler.prototype.lightness;
 /** @type {number} */
google.maps.MapTypeStyler.prototype.saturation;
 /** @type {string} */
google.maps.MapTypeStyler.prototype.visibility;
 /** @type {number} */
google.maps.MapTypeStyler.prototype.weight;

/**
 * @constructor
 * @struct
 */
google.maps.BicyclingLayer = function() {};

/**
 * @return {!google.maps.Map}
 */
google.maps.BicyclingLayer.prototype.getMap = function() {};

/**
 * @param {!google.maps.Map} map
 * @return {void}
 */
google.maps.BicyclingLayer.prototype.setMap = function(map) {};

/**
 * @constructor
 * @struct
 * @param {!google.maps.FusionTablesLayerOptions} options
 */
google.maps.FusionTablesLayer = function(options) {};

/**
 * @return {!google.maps.Map}
 */
google.maps.FusionTablesLayer.prototype.getMap = function() {};

/**
 * @param {!google.maps.Map} map
 * @return {void}
 */
google.maps.FusionTablesLayer.prototype.setMap = function(map) {};

/**
 * @param {!google.maps.FusionTablesLayerOptions} options
 * @return {void}
 */
google.maps.FusionTablesLayer.prototype.setOptions = function(options) {};
/**
 * @record
 * @struct
 */
google.maps.FusionTablesLayerOptions = function() {};
 /** @type {boolean} */
google.maps.FusionTablesLayerOptions.prototype.clickable;
 /** @type {!google.maps.FusionTablesHeatmap} */
google.maps.FusionTablesLayerOptions.prototype.heatmap;
 /** @type {!google.maps.Map} */
google.maps.FusionTablesLayerOptions.prototype.map;
 /** @type {!google.maps.FusionTablesQuery} */
google.maps.FusionTablesLayerOptions.prototype.query;
 /** @type {!Array<!google.maps.FusionTablesStyle>} */
google.maps.FusionTablesLayerOptions.prototype.styles;
 /** @type {boolean} */
google.maps.FusionTablesLayerOptions.prototype.suppressInfoWindows;
/**
 * @record
 * @struct
 */
google.maps.FusionTablesQuery = function() {};
 /** @type {string} */
google.maps.FusionTablesQuery.prototype.from;
 /** @type {number} */
google.maps.FusionTablesQuery.prototype.limit;
 /** @type {number} */
google.maps.FusionTablesQuery.prototype.offset;
 /** @type {string} */
google.maps.FusionTablesQuery.prototype.orderBy;
 /** @type {string} */
google.maps.FusionTablesQuery.prototype.select;
 /** @type {string} */
google.maps.FusionTablesQuery.prototype.where;
/**
 * @record
 * @struct
 */
google.maps.FusionTablesStyle = function() {};
 /** @type {!google.maps.FusionTablesMarkerOptions} */
google.maps.FusionTablesStyle.prototype.markerOptions;
 /** @type {!google.maps.FusionTablesPolygonOptions} */
google.maps.FusionTablesStyle.prototype.polygonOptions;
 /** @type {!google.maps.FusionTablesPolylineOptions} */
google.maps.FusionTablesStyle.prototype.polylineOptions;
 /** @type {string} */
google.maps.FusionTablesStyle.prototype.where;
/**
 * @record
 * @struct
 */
google.maps.FusionTablesHeatmap = function() {};
 /** @type {boolean} */
google.maps.FusionTablesHeatmap.prototype.enabled;
/**
 * @record
 * @struct
 */
google.maps.FusionTablesMarkerOptions = function() {};
 /** @type {string} */
google.maps.FusionTablesMarkerOptions.prototype.iconName;
/**
 * @record
 * @struct
 */
google.maps.FusionTablesPolygonOptions = function() {};
 /** @type {string} */
google.maps.FusionTablesPolygonOptions.prototype.fillColor;
 /** @type {number} */
google.maps.FusionTablesPolygonOptions.prototype.fillOpacity;
 /** @type {string} */
google.maps.FusionTablesPolygonOptions.prototype.strokeColor;
 /** @type {number} */
google.maps.FusionTablesPolygonOptions.prototype.strokeOpacity;
 /** @type {number} */
google.maps.FusionTablesPolygonOptions.prototype.strokeWeight;
/**
 * @record
 * @struct
 */
google.maps.FusionTablesPolylineOptions = function() {};
 /** @type {string} */
google.maps.FusionTablesPolylineOptions.prototype.strokeColor;
 /** @type {number} */
google.maps.FusionTablesPolylineOptions.prototype.strokeOpacity;
 /** @type {number} */
google.maps.FusionTablesPolylineOptions.prototype.strokeWeight;
/**
 * @record
 * @struct
 */
google.maps.FusionTablesMouseEvent = function() {};
 /** @type {string} */
google.maps.FusionTablesMouseEvent.prototype.infoWindowHtml;
 /** @type {!google.maps.LatLng} */
google.maps.FusionTablesMouseEvent.prototype.latLng;
 /** @type {!google.maps.Size} */
google.maps.FusionTablesMouseEvent.prototype.pixelOffset;
 /** @type {!Object} */
google.maps.FusionTablesMouseEvent.prototype.row;
/**
 * @record
 * @struct
 */
google.maps.FusionTablesCell = function() {};
 /** @type {string} */
google.maps.FusionTablesCell.prototype.columnName;
 /** @type {string} */
google.maps.FusionTablesCell.prototype.value;

/**
 * @constructor
 * @struct
 * @param {!google.maps.KmlLayerOptions=} opts
 */
google.maps.KmlLayer = function(opts) {};

/**
 * @return {!google.maps.LatLngBounds}
 */
google.maps.KmlLayer.prototype.getDefaultViewport = function() {};

/**
 * @return {!google.maps.Map}
 */
google.maps.KmlLayer.prototype.getMap = function() {};

/**
 * @return {!google.maps.KmlLayerMetadata}
 */
google.maps.KmlLayer.prototype.getMetadata = function() {};

/**
 * @return {google.maps.KmlLayerStatus}
 */
google.maps.KmlLayer.prototype.getStatus = function() {};

/**
 * @return {string}
 */
google.maps.KmlLayer.prototype.getUrl = function() {};

/**
 * @return {number}
 */
google.maps.KmlLayer.prototype.getZIndex = function() {};

/**
 * @param {!google.maps.Map} map
 * @return {void}
 */
google.maps.KmlLayer.prototype.setMap = function(map) {};

/**
 * @param {string} url
 * @return {void}
 */
google.maps.KmlLayer.prototype.setUrl = function(url) {};

/**
 * @param {number} zIndex
 * @return {void}
 */
google.maps.KmlLayer.prototype.setZIndez = function(zIndex) {};
/**
 * @record
 * @struct
 */
google.maps.KmlLayerOptions = function() {};
 /** @type {boolean} */
google.maps.KmlLayerOptions.prototype.clickable;
 /** @type {!google.maps.Map} */
google.maps.KmlLayerOptions.prototype.map;
 /** @type {boolean} */
google.maps.KmlLayerOptions.prototype.preserveViewport;
 /** @type {boolean} */
google.maps.KmlLayerOptions.prototype.screenOverlays;
 /** @type {boolean} */
google.maps.KmlLayerOptions.prototype.suppressInfoWindows;
 /** @type {string} */
google.maps.KmlLayerOptions.prototype.url;
 /** @type {number} */
google.maps.KmlLayerOptions.prototype.zIndex;
/**
 * @record
 * @struct
 */
google.maps.KmlLayerMetadata = function() {};
 /** @type {!google.maps.KmlAuthor} */
google.maps.KmlLayerMetadata.prototype.author;
 /** @type {string} */
google.maps.KmlLayerMetadata.prototype.description;
 /** @type {boolean} */
google.maps.KmlLayerMetadata.prototype.hasScreenOverlays;
 /** @type {string} */
google.maps.KmlLayerMetadata.prototype.name;
 /** @type {string} */
google.maps.KmlLayerMetadata.prototype.snippet;

/** @const */
google.maps.KmlLayerStatus = {};
/** @const {number} */
google.maps.KmlLayerStatus.DOCUMENT_NOT_FOUND;
/** @const {number} */
google.maps.KmlLayerStatus.DOCUMENT_TOO_LARGE;
/** @const {number} */
google.maps.KmlLayerStatus.FETCH_ERROR;
/** @const {number} */
google.maps.KmlLayerStatus.INVALID_DOCUMENT;
/** @const {number} */
google.maps.KmlLayerStatus.INVALID_REQUEST;
/** @const {number} */
google.maps.KmlLayerStatus.LIMITS_EXCEEDED;
/** @const {number} */
google.maps.KmlLayerStatus.OK;
/** @const {number} */
google.maps.KmlLayerStatus.TIMED_OUT;
/** @const {number} */
google.maps.KmlLayerStatus.UNKNOWN;
/**
 * @record
 * @struct
 */
google.maps.KmlMouseEvent = function() {};
 /** @type {!google.maps.KmlFeatureData} */
google.maps.KmlMouseEvent.prototype.featureData;
 /** @type {!google.maps.LatLng} */
google.maps.KmlMouseEvent.prototype.latLng;
 /** @type {!google.maps.Size} */
google.maps.KmlMouseEvent.prototype.pixelOffset;
/**
 * @record
 * @struct
 */
google.maps.KmlFeatureData = function() {};
 /** @type {!google.maps.KmlAuthor} */
google.maps.KmlFeatureData.prototype.author;
 /** @type {string} */
google.maps.KmlFeatureData.prototype.description;
 /** @type {string} */
google.maps.KmlFeatureData.prototype.id;
 /** @type {string} */
google.maps.KmlFeatureData.prototype.infoWindowHtml;
 /** @type {string} */
google.maps.KmlFeatureData.prototype.name;
 /** @type {string} */
google.maps.KmlFeatureData.prototype.snippet;
/**
 * @record
 * @struct
 */
google.maps.KmlAuthor = function() {};
 /** @type {string} */
google.maps.KmlAuthor.prototype.email;
 /** @type {string} */
google.maps.KmlAuthor.prototype.name;
 /** @type {string} */
google.maps.KmlAuthor.prototype.uri;

/**
 * @constructor
 * @struct
 * @param {!google.maps.TrafficLayerOptions=} opts
 */
google.maps.TrafficLayer = function(opts) {};

/**
 * @return {!google.maps.Map}
 */
google.maps.TrafficLayer.prototype.getMap = function() {};

/**
 * @param {!google.maps.Map} map
 * @return {void}
 */
google.maps.TrafficLayer.prototype.setMap = function(map) {};

/**
 * @param {!google.maps.TrafficLayerOptions} options
 * @return {void}
 */
google.maps.TrafficLayer.prototype.setOptions = function(options) {};
/**
 * @record
 * @struct
 */
google.maps.TrafficLayerOptions = function() {};
 /** @type {boolean} */
google.maps.TrafficLayerOptions.prototype.autoRefresh;
 /** @type {!google.maps.Map} */
google.maps.TrafficLayerOptions.prototype.map;

/**
 * @constructor
 * @struct
 */
google.maps.TransitLayer = function() {};

/**
 * @return {void}
 */
google.maps.TransitLayer.prototype.getMap = function() {};

/**
 * @param {!google.maps.Map} map
 * @return {void}
 */
google.maps.TransitLayer.prototype.setMap = function(map) {};

/**
 * @constructor
 * @struct
 * @param {!Element} container
 * @param {!google.maps.StreetViewPanoramaOptions=} opts
 */
google.maps.StreetViewPanorama = function(container, opts) {};
 /** @type {!Array<!google.maps.MVCArray<!Node>>} */
google.maps.StreetViewPanorama.prototype.controls;

/**
 * @return {!Array<!google.maps.StreetViewLink>}
 */
google.maps.StreetViewPanorama.prototype.getLinks = function() {};

/**
 * @return {!google.maps.StreetViewLocation}
 */
google.maps.StreetViewPanorama.prototype.getLocation = function() {};

/**
 * @return {boolean}
 */
google.maps.StreetViewPanorama.prototype.getMotionTracking = function() {};

/**
 * @return {string}
 */
google.maps.StreetViewPanorama.prototype.getPano = function() {};

/**
 * @return {!google.maps.StreetViewPov}
 */
google.maps.StreetViewPanorama.prototype.getPhotographerPov = function() {};

/**
 * @return {!google.maps.LatLng}
 */
google.maps.StreetViewPanorama.prototype.getPosition = function() {};

/**
 * @return {!google.maps.StreetViewPov}
 */
google.maps.StreetViewPanorama.prototype.getPov = function() {};

/**
 * @return {google.maps.StreetViewStatus}
 */
google.maps.StreetViewPanorama.prototype.getStatus = function() {};

/**
 * @return {boolean}
 */
google.maps.StreetViewPanorama.prototype.getVisible = function() {};

/**
 * @return {number}
 */
google.maps.StreetViewPanorama.prototype.getZoom = function() {};

/**
 * @param {function(string): !google.maps.StreetViewPanoramaData} provider
 * @return {void}
 */
google.maps.StreetViewPanorama.prototype.registerPanoProvider = function(provider) {};

/**
 * @param {!Array<!google.maps.StreetViewLink>} links
 * @return {void}
 */
google.maps.StreetViewPanorama.prototype.setLinks = function(links) {};

/**
 * @param {boolean} motionTracking
 * @return {void}
 */
google.maps.StreetViewPanorama.prototype.setMotionTracking = function(motionTracking) {};

/**
 * @param {!google.maps.StreetViewPanoramaOptions} options
 * @return {void}
 */
google.maps.StreetViewPanorama.prototype.setOptions = function(options) {};

/**
 * @param {string} pano
 * @return {void}
 */
google.maps.StreetViewPanorama.prototype.setPano = function(pano) {};

/**
 * @param {(!google.maps.LatLng|{lat: number, lng: number})} latLng
 * @return {void}
 */
google.maps.StreetViewPanorama.prototype.setPosition = function(latLng) {};

/**
 * @param {!google.maps.StreetViewPov} pov
 * @return {void}
 */
google.maps.StreetViewPanorama.prototype.setPov = function(pov) {};

/**
 * @param {boolean} flag
 * @return {void}
 */
google.maps.StreetViewPanorama.prototype.setVisible = function(flag) {};

/**
 * @param {number} zoom
 * @return {void}
 */
google.maps.StreetViewPanorama.prototype.setZoom = function(zoom) {};
/**
 * @record
 * @struct
 */
google.maps.FullscreenControlOptions = function() {};
 /** @type {google.maps.ControlPosition} */
google.maps.FullscreenControlOptions.prototype.position;
/**
 * @record
 * @struct
 */
google.maps.StreetViewPanoramaOptions = function() {};
 /** @type {boolean} */
google.maps.StreetViewPanoramaOptions.prototype.addressControl;
 /** @type {!google.maps.StreetViewAddressControlOptions} */
google.maps.StreetViewPanoramaOptions.prototype.addressControlOptions;
 /** @type {boolean} */
google.maps.StreetViewPanoramaOptions.prototype.clickToGo;
 /** @type {boolean} */
google.maps.StreetViewPanoramaOptions.prototype.disableDefaultUI;
 /** @type {boolean} */
google.maps.StreetViewPanoramaOptions.prototype.disableDoubleClickZoom;
 /** @type {boolean} */
google.maps.StreetViewPanoramaOptions.prototype.enableCloseButton;
 /** @type {boolean} */
google.maps.StreetViewPanoramaOptions.prototype.fullscreenControl;
 /** @type {!google.maps.FullscreenControlOptions} */
google.maps.StreetViewPanoramaOptions.prototype.fullscreenControlOptions;
 /** @type {boolean} */
google.maps.StreetViewPanoramaOptions.prototype.imageDateControl;
 /** @type {boolean} */
google.maps.StreetViewPanoramaOptions.prototype.linksControl;
 /** @type {boolean} */
google.maps.StreetViewPanoramaOptions.prototype.motionTracking;
 /** @type {boolean} */
google.maps.StreetViewPanoramaOptions.prototype.motionTrackingControl;
 /** @type {!google.maps.MotionTrackingControlOptions} */
google.maps.StreetViewPanoramaOptions.prototype.motionTrackingControlOptions;
 /** @type {string} */
google.maps.StreetViewPanoramaOptions.prototype.mode;
 /** @type {boolean} */
google.maps.StreetViewPanoramaOptions.prototype.panControl;
 /** @type {!google.maps.PanControlOptions} */
google.maps.StreetViewPanoramaOptions.prototype.panControlOptions;
 /** @type {string} */
google.maps.StreetViewPanoramaOptions.prototype.pano;
 /** @type {function(string): !google.maps.StreetViewPanoramaData} */
google.maps.StreetViewPanoramaOptions.prototype.panoProvider;
 /** @type {(!google.maps.LatLng|{lat: number, lng: number})} */
google.maps.StreetViewPanoramaOptions.prototype.position;
 /** @type {!google.maps.StreetViewPov} */
google.maps.StreetViewPanoramaOptions.prototype.pov;
 /** @type {boolean} */
google.maps.StreetViewPanoramaOptions.prototype.scrollwheel;
 /** @type {boolean} */
google.maps.StreetViewPanoramaOptions.prototype.visible;
 /** @type {number} */
google.maps.StreetViewPanoramaOptions.prototype.zoom;
 /** @type {boolean} */
google.maps.StreetViewPanoramaOptions.prototype.zoomControl;
 /** @type {!google.maps.ZoomControlOptions} */
google.maps.StreetViewPanoramaOptions.prototype.zoomControlOptions;
/**
 * @record
 * @struct
 */
google.maps.StreetViewAddressControlOptions = function() {};
 /** @type {google.maps.ControlPosition} */
google.maps.StreetViewAddressControlOptions.prototype.position;
/**
 * @record
 * @struct
 */
google.maps.StreetViewLink = function() {};
 /** @type {string} */
google.maps.StreetViewLink.prototype.description;
 /** @type {number} */
google.maps.StreetViewLink.prototype.heading;
 /** @type {string} */
google.maps.StreetViewLink.prototype.pano;
/**
 * @record
 * @struct
 */
google.maps.StreetViewPov = function() {};
 /** @type {number} */
google.maps.StreetViewPov.prototype.heading;
 /** @type {number} */
google.maps.StreetViewPov.prototype.pitch;
/**
 * @record
 * @struct
 */
google.maps.StreetViewPanoramaData = function() {};
 /** @type {string} */
google.maps.StreetViewPanoramaData.prototype.copyright;
 /** @type {string} */
google.maps.StreetViewPanoramaData.prototype.imageDate;
 /** @type {!Array<!google.maps.StreetViewLink>} */
google.maps.StreetViewPanoramaData.prototype.links;
 /** @type {!google.maps.StreetViewLocation} */
google.maps.StreetViewPanoramaData.prototype.location;
 /** @type {!google.maps.StreetViewTileData} */
google.maps.StreetViewPanoramaData.prototype.tiles;
/**
 * @record
 * @struct
 */
google.maps.StreetViewLocation = function() {};
 /** @type {string} */
google.maps.StreetViewLocation.prototype.description;
 /** @type {!google.maps.LatLng} */
google.maps.StreetViewLocation.prototype.latLng;
 /** @type {string} */
google.maps.StreetViewLocation.prototype.pano;
 /** @type {string} */
google.maps.StreetViewLocation.prototype.shortDescription;
/**
 * @record
 * @struct
 */
google.maps.StreetViewTileData = function() {};
 /** @type {number} */
google.maps.StreetViewTileData.prototype.centerHeading;
 /** @type {!google.maps.Size} */
google.maps.StreetViewTileData.prototype.tileSize;
 /** @type {!google.maps.Size} */
google.maps.StreetViewTileData.prototype.worldSize;

/**
 * @param {string} pano
 * @param {number} tileZoom
 * @param {number} tileX
 * @param {number} tileY
 * @return {string}
 */
google.maps.StreetViewTileData.prototype.getTileUrl = function(pano, tileZoom, tileX, tileY) {};

/** @const */
google.maps.StreetViewPreference = {};
/** @const {number} */
google.maps.StreetViewPreference.BEST;
/** @const {number} */
google.maps.StreetViewPreference.NEAREST;

/** @const */
google.maps.StreetViewSource = {};
/** @const {number} */
google.maps.StreetViewSource.DEFAULT;
/** @const {number} */
google.maps.StreetViewSource.OUTDOOR;
/**
 * @record
 * @struct
 */
google.maps.StreetViewLocationRequest = function() {};
 /** @type {(!google.maps.LatLng|{lat: number, lng: number})} */
google.maps.StreetViewLocationRequest.prototype.location;
 /** @type {google.maps.StreetViewPreference} */
google.maps.StreetViewLocationRequest.prototype.preference;
 /** @type {number} */
google.maps.StreetViewLocationRequest.prototype.radius;
 /** @type {google.maps.StreetViewSource} */
google.maps.StreetViewLocationRequest.prototype.source;
/**
 * @record
 * @struct
 */
google.maps.StreetViewPanoRequest = function() {};
 /** @type {string} */
google.maps.StreetViewPanoRequest.prototype.pano;
/**
 * @constructor
 * @struct
 */
google.maps.StreetViewService = function() {};

/**
 * @param {(!google.maps.StreetViewLocationRequest|!google.maps.StreetViewPanoRequest)} request
 * @param {function(!google.maps.StreetViewPanoramaData, google.maps.StreetViewStatus): void} cb
 * @return {void}
 */
google.maps.StreetViewService.prototype.getPanorama = function(request, cb) {};

/**
 * @param {string} pano
 * @param {function(!google.maps.StreetViewPanoramaData, google.maps.StreetViewStatus): void} callback
 * @return {void}
 */
google.maps.StreetViewService.prototype.getPanoramaById = function(pano, callback) {};

/**
 * @param {(!google.maps.LatLng|{lat: number, lng: number})} latlng
 * @param {number} radius
 * @param {function(!google.maps.StreetViewPanoramaData, google.maps.StreetViewStatus): void} callback
 * @return {void}
 */
google.maps.StreetViewService.prototype.getPanoramaByLocation = function(latlng, radius, callback) {};

/** @const */
google.maps.StreetViewStatus = {};
/** @const {number} */
google.maps.StreetViewStatus.OK;
/** @const {number} */
google.maps.StreetViewStatus.UNKNOWN_ERROR;
/** @const {number} */
google.maps.StreetViewStatus.ZERO_RESULTS;
/**
 * @extends {google.maps.MVCObject}
 * @constructor
 * @struct
 */
google.maps.StreetViewCoverageLayer = function() {};

/**
 * @return {!google.maps.Map}
 */
google.maps.StreetViewCoverageLayer.prototype.getMap = function() {};

/**
 * @param {!google.maps.Map} map
 * @return {void}
 */
google.maps.StreetViewCoverageLayer.prototype.setMap = function(map) {};
/**
 * @record
 * @struct
 */
google.maps.MotionTrackingControlOptions = function() {};
 /** @type {google.maps.ControlPosition} */
google.maps.MotionTrackingControlOptions.prototype.position;
/**
 * @record
 * @struct
 */
google.maps.MapsEventListener = function() {};

/**
 * Removes the listener.  Equivalent to calling google.maps.event.removeListener(listener).
 * @return {void}
 */
google.maps.MapsEventListener.prototype.remove = function() {};
/**
 * @constructor
 * @struct
 */
google.maps.event = function() {};

/**
 * Cross browser event handler registration. This listener is removed by calling
 * removeListener(handle) for the handle that is returned by this function.
 * @param {!Object} instance
 * @param {string} eventName
 * @param {!Function} handler
 * @param {boolean=} capture
 * @return {!google.maps.MapsEventListener}
 */
google.maps.event.addDomListener = function(instance, eventName, handler, capture) {};

/**
 * Wrapper around addDomListener that removes the listener after the first event.
 * @param {!Object} instance
 * @param {string} eventName
 * @param {!Function} handler
 * @param {boolean=} capture
 * @return {!google.maps.MapsEventListener}
 */
google.maps.event.addDomListenerOnce = function(instance, eventName, handler, capture) {};

/**
 * Adds the given listener function to the given event name for the given object
 * instance. Returns an identifier for this listener that can be used with
 * removeListener().
 * @param {!Object} instance
 * @param {string} eventName
 * @param {!Function} handler
 * @return {!google.maps.MapsEventListener}
 */
google.maps.event.addListener = function(instance, eventName, handler) {};

/**
 * Like addListener, but the handler removes itself after handling the first event.
 * @param {!Object} instance
 * @param {string} eventName
 * @param {!Function} handler
 * @return {!google.maps.MapsEventListener}
 */
google.maps.event.addListenerOnce = function(instance, eventName, handler) {};

/**
 * Removes all listeners for all events for the given instance.
 * @param {!Object} instance
 * @return {void}
 */
google.maps.event.clearInstanceListeners = function(instance) {};

/**
 * Removes all listeners for the given event for the given instance.
 * @param {!Object} instance
 * @param {string} eventName
 * @return {void}
 */
google.maps.event.clearListeners = function(instance, eventName) {};

/**
 * Removes the given listener, which should have been returned by addListener above.
 * Equivalent to calling listener.remove().
 * @param {!google.maps.MapsEventListener} listener
 * @return {void}
 */
google.maps.event.removeListener = function(listener) {};

/**
 * Triggers the given event. All arguments after eventName are passed as arguments to
 * the listeners.
 * @param {?} instance
 * @param {string} eventName
 * @param {...?} args
 * @return {void}
 */
google.maps.event.trigger = function(instance, eventName, args) {};
/**
 * @record
 * @struct
 */
google.maps.MouseEvent = function() {};
 /** @type {!google.maps.LatLng} */
google.maps.MouseEvent.prototype.latLng;

/**
 * Prevents this event from propagating further.
 * @return {void}
 */
google.maps.MouseEvent.prototype.stop = function() {};
/**
 * @extends {google.maps.MouseEvent}
 * @record
 * @struct
 */
google.maps.IconMouseEvent = function() {};
 /** @type {string} */
google.maps.IconMouseEvent.prototype.placeId;

/**
 * @constructor
 * @struct
 * Creates a LatLng object representing a geographic point.
 * Note the ordering of latitude and longitude.
 * @param {number} lat Latitude is specified in degrees within the range [-90, 90].
 * @param {number} lng Longitude is specified in degrees within the range [-180, 180].
 * @param {boolean=} noWrap Set noWrap to true to enable values outside of this range.
 */
google.maps.LatLng = function(lat, lng, noWrap) {};

/**
 * Comparison function.
 * @param {!google.maps.LatLng} other
 * @return {boolean}
 */
google.maps.LatLng.prototype.equals = function(other) {};

/**
 * Returns the latitude in degrees.
 * @return {number}
 */
google.maps.LatLng.prototype.lat = function() {};

/**
 * Returns the longitude in degrees.
 * @return {number}
 */
google.maps.LatLng.prototype.lng = function() {};

/**
 * Converts to string representation.
 * @return {string}
 */
google.maps.LatLng.prototype.toString = function() {};

/**
 * Returns a string of the form "lat,lng". We round the lat/lng values to 6 decimal places by default.
 * @param {number=} precision
 * @return {string}
 */
google.maps.LatLng.prototype.toUrlValue = function(precision) {};

/**
 * Converts to JSON representation. This function is intended to be used via JSON.stringify.
 * @return {{lat: number, lng: number}}
 */
google.maps.LatLng.prototype.toJSON = function() {};

/** @typedef {{lat: number, lng: number}} */
google.maps.LatLngLiteral;

/** @typedef {{east: number, north: number, south: number, west: number}} */
google.maps.LatLngBoundsLiteral;

/**
 * @constructor
 * @struct
 * Constructs a rectangle from the points at its south-west and north-east corners.
 * @param {(!google.maps.LatLng|{lat: number, lng: number})=} sw
 * @param {(!google.maps.LatLng|{lat: number, lng: number})=} ne
 */
google.maps.LatLngBounds = function(sw, ne) {};

/**
 * Returns true if the given lat/lng is in this bounds.
 * @param {(!google.maps.LatLng|{lat: number, lng: number})} latLng
 * @return {boolean}
 */
google.maps.LatLngBounds.prototype.contains = function(latLng) {};

/**
 * Returns true if this bounds approximately equals the given bounds.
 * @param {(!google.maps.LatLngBounds|{east: number, north: number, south: number, west: number})} other
 * @return {boolean}
 */
google.maps.LatLngBounds.prototype.equals = function(other) {};

/**
 * Extends this bounds to contain the given point.
 * @param {(!google.maps.LatLng|{lat: number, lng: number})} point
 * @return {!google.maps.LatLngBounds}
 */
google.maps.LatLngBounds.prototype.extend = function(point) {};

/**
 * Computes the center of this LatLngBounds
 * @return {!google.maps.LatLng}
 */
google.maps.LatLngBounds.prototype.getCenter = function() {};

/**
 * Returns the north-east corner of this bounds.
 * @return {!google.maps.LatLng}
 */
google.maps.LatLngBounds.prototype.getNorthEast = function() {};

/**
 * Returns the south-west corner of this bounds.
 * @return {!google.maps.LatLng}
 */
google.maps.LatLngBounds.prototype.getSouthWest = function() {};

/**
 * Returns true if this bounds shares any points with the other bounds.
 * @param {(!google.maps.LatLngBounds|{east: number, north: number, south: number, west: number})} other
 * @return {boolean}
 */
google.maps.LatLngBounds.prototype.intersects = function(other) {};

/**
 * Returns if the bounds are empty.
 * @return {boolean}
 */
google.maps.LatLngBounds.prototype.isEmpty = function() {};

/**
 * Converts to JSON representation. This function is intended to be used via JSON.stringify.
 * @return {{east: number, north: number, south: number, west: number}}
 */
google.maps.LatLngBounds.prototype.toJSON = function() {};

/**
 * Converts the given map bounds to a lat/lng span.
 * @return {!google.maps.LatLng}
 */
google.maps.LatLngBounds.prototype.toSpan = function() {};

/**
 * Converts to string.
 * @return {string}
 */
google.maps.LatLngBounds.prototype.toString = function() {};

/**
 * Returns a string of the form "lat_lo,lng_lo,lat_hi,lng_hi" for this bounds, where "lo" corresponds to the
 * southwest corner of the bounding box, while "hi" corresponds to the northeast corner of that box.
 * @param {number=} precision
 * @return {string}
 */
google.maps.LatLngBounds.prototype.toUrlValue = function(precision) {};

/**
 * Extends this bounds to contain the union of this and the given bounds.
 * @param {(!google.maps.LatLngBounds|{east: number, north: number, south: number, west: number})} other
 * @return {!google.maps.LatLngBounds}
 */
google.maps.LatLngBounds.prototype.union = function(other) {};

/**
 * @constructor
 * @struct
 * A point on a two-dimensional plane.
 * @param {number} x
 * @param {number} y
 */
google.maps.Point = function(x, y) {};
 /** @type {number} */
google.maps.Point.prototype.x;
 /** @type {number} */
google.maps.Point.prototype.y;

/**
 * Compares two Points
 * @param {!google.maps.Point} other
 * @return {boolean}
 */
google.maps.Point.prototype.equals = function(other) {};

/**
 * Returns a string representation of this Point.
 * @return {string}
 */
google.maps.Point.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * @param {number} width
 * @param {number} height
 * @param {string=} widthUnit
 * @param {string=} heightUnit
 */
google.maps.Size = function(width, height, widthUnit, heightUnit) {};
 /** @type {number} */
google.maps.Size.prototype.height;
 /** @type {number} */
google.maps.Size.prototype.width;

/**
 * @param {!google.maps.Size} other
 * @return {boolean}
 */
google.maps.Size.prototype.equals = function(other) {};

/**
 * @return {string}
 */
google.maps.Size.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * The MVCObject constructor is guaranteed to be an empty function, and so you may inherit from MVCObject
 * by simply writing MySubclass.prototype = new google.maps.MVCObject();. Unless otherwise noted,
 * this is not true of other classes in the API, and inheriting from other classes in the API is not supported.
 */
google.maps.MVCObject = function() {};

/**
 * Adds the given listener function to the given event name. Returns an identifier for this listener
 * that can be used with google.maps.event.removeListener.
 * @param {string} eventName
 * @param {function(!Array<?>): void} handler
 * @return {!google.maps.MapsEventListener}
 */
google.maps.MVCObject.prototype.addListener = function(eventName, handler) {};

/**
 * Binds a View to a Model.
 * @param {string} key
 * @param {!google.maps.MVCObject} target
 * @param {string=} targetKey
 * @param {boolean=} noNotify
 * @return {void}
 */
google.maps.MVCObject.prototype.bindTo = function(key, target, targetKey, noNotify) {};

/**
 * @param {string} key
 * @return {void}
 */
google.maps.MVCObject.prototype.changed = function(key) {};

/**
 * Gets a value.
 * @param {string} key
 * @return {?}
 */
google.maps.MVCObject.prototype.get = function(key) {};

/**
 * Notify all observers of a change on this property. This notifies both objects that are bound
 * to the object's property as well as the object that it is bound to.
 * @param {string} key
 * @return {void}
 */
google.maps.MVCObject.prototype.notify = function(key) {};

/**
 * Sets a value.
 * @param {string} key
 * @param {?} value
 * @return {void}
 */
google.maps.MVCObject.prototype.set = function(key, value) {};

/**
 * Sets a collection of key-value pairs.
 * @param {?} values
 * @return {void}
 */
google.maps.MVCObject.prototype.setValues = function(values) {};

/**
 * Removes a binding. Unbinding will set the unbound property to the current value.
 * The object will not be notified, as the value has not changed.
 * @param {string} key
 * @return {void}
 */
google.maps.MVCObject.prototype.unbind = function(key) {};

/**
 * Removes all bindings.
 * @return {void}
 */
google.maps.MVCObject.prototype.unbindAll = function() {};

/**
 * @constructor
 * @struct
 * A mutable MVC Array.
 * @param {!Array<T>=} array
 */
google.maps.MVCArray = function(array) {};

/**
 * Removes all elements from the array.
 * @return {void}
 */
google.maps.MVCArray.prototype.clear = function() {};

/**
 * Iterate over each element, calling the provided callback.
 * The callback is called for each element like: callback(element, index).
 * @param {function(T, number): void} callback
 * @return {void}
 */
google.maps.MVCArray.prototype.forEach = function(callback) {};

/**
 * Returns a reference to the underlying Array.
 * Warning: if the Array is mutated, no events will be fired by this object.
 * @return {!Array<T>}
 */
google.maps.MVCArray.prototype.getArray = function() {};

/**
 * Returns the element at the specified index.
 * @param {number} i
 * @return {T}
 */
google.maps.MVCArray.prototype.getAt = function(i) {};

/**
 * Returns the number of elements in this array.
 * @return {number}
 */
google.maps.MVCArray.prototype.getLength = function() {};

/**
 * Inserts an element at the specified index.
 * @param {number} i
 * @param {T} elem
 * @return {void}
 */
google.maps.MVCArray.prototype.insertAt = function(i, elem) {};

/**
 * Removes the last element of the array and returns that element.
 * @return {T}
 */
google.maps.MVCArray.prototype.pop = function() {};

/**
 * Adds one element to the end of the array and returns the new length of the array.
 * @param {T} elem
 * @return {number}
 */
google.maps.MVCArray.prototype.push = function(elem) {};

/**
 * Removes an element from the specified index.
 * @param {number} i
 * @return {T}
 */
google.maps.MVCArray.prototype.removeAt = function(i) {};

/**
 * Sets an element at the specified index.
 * @param {number} i
 * @param {T} elem
 * @return {void}
 */
google.maps.MVCArray.prototype.setAt = function(i, elem) {};
/** @const */
google.maps.geometry = {};
/**
 * @constructor
 * @struct
 */
google.maps.geometry.encoding = function() {};

/**
 * @param {string} encodedPath
 * @return {!Array<!google.maps.LatLng>}
 */
google.maps.geometry.encoding.decodePath = function(encodedPath) {};

/**
 * @param {(!Array<!google.maps.LatLng>|!google.maps.MVCArray<!google.maps.LatLng>)} path
 * @return {string}
 */
google.maps.geometry.encoding.encodePath = function(path) {};
/**
 * @constructor
 * @struct
 */
google.maps.geometry.spherical = function() {};

/**
 * Returns the area of a closed path.
 * The computed area uses the same units as the radius.
 * The radius defaults to the Earth's radius in meters,
 * in which case the area is in square meters.
 * @param {(!Array<!google.maps.LatLng>|!google.maps.MVCArray<!google.maps.LatLng>)} path
 * @param {number=} radius
 * @return {number}
 */
google.maps.geometry.spherical.computeArea = function(path, radius) {};

/**
 * Returns the distance, in meters, between two LatLngs.
 * You can optionally specify a custom radius.
 * The radius defaults to the radius of the Earth.
 * @param {!google.maps.LatLng} from
 * @param {!google.maps.LatLng} to
 * @param {number=} radius
 * @return {number}
 */
google.maps.geometry.spherical.computeDistanceBetween = function(from, to, radius) {};

/**
 * Returns the heading from one LatLng to another LatLng.
 * Headings are expressed in degrees clockwise from North within the range [-180,180).
 * @param {!google.maps.LatLng} from
 * @param {!google.maps.LatLng} to
 * @return {number}
 */
google.maps.geometry.spherical.computeHeading = function(from, to) {};

/**
 * Returns the length of the given path.
 * @param {(!Array<!google.maps.LatLng>|!google.maps.MVCArray<!google.maps.LatLng>)} path
 * @param {number=} radius
 * @return {number}
 */
google.maps.geometry.spherical.computeLength = function(path, radius) {};

/**
 * Returns the LatLng resulting from moving a distance from an origin in the
 * specified heading (expressed in degrees clockwise from north).
 * @param {!google.maps.LatLng} from
 * @param {number} distance
 * @param {number} heading
 * @param {number=} radius
 * @return {!google.maps.LatLng}
 */
google.maps.geometry.spherical.computeOffset = function(from, distance, heading, radius) {};

/**
 * Returns the location of origin when provided with a LatLng destination, meters
 * travelled and original heading. Headings are expressed in degrees clockwise from
 * North. This function returns null when no solution is available.
 * @param {!google.maps.LatLng} to
 * @param {number} distance
 * @param {number} heading
 * @param {number=} radius
 * @return {!google.maps.LatLng}
 */
google.maps.geometry.spherical.computeOffsetOrigin = function(to, distance, heading, radius) {};

/**
 * Returns the signed area of a closed path. The signed area may be used to determine
 * the orientation of the path. The computed area uses the same units as the radius.
 * The radius defaults to the Earth's radius in meters, in which case the area is in
 * square meters.
 * @param {(!Array<!google.maps.LatLng>|!google.maps.MVCArray<!google.maps.LatLng>)} loop
 * @param {number=} radius
 * @return {number}
 */
google.maps.geometry.spherical.computeSignedArea = function(loop, radius) {};

/**
 * Returns the LatLng which lies the given fraction of the way between the origin
 * LatLng and the destination LatLng.
 * @param {!google.maps.LatLng} from
 * @param {!google.maps.LatLng} to
 * @param {number} fraction
 * @return {!google.maps.LatLng}
 */
google.maps.geometry.spherical.interpolate = function(from, to, fraction) {};
/**
 * @constructor
 * @struct
 */
google.maps.geometry.poly = function() {};

/**
 * @param {!google.maps.LatLng} point
 * @param {!google.maps.Polygon} polygon
 * @return {boolean}
 */
google.maps.geometry.poly.containsLocation = function(point, polygon) {};

/**
 * @param {!google.maps.LatLng} point
 * @param {(!google.maps.Polyline|!google.maps.Polygon)} poly
 * @param {number=} tolerance
 * @return {boolean}
 */
google.maps.geometry.poly.isLocationOnEdge = function(point, poly, tolerance) {};
/** @const */
google.maps.adsense = {};

/**
 * @constructor
 * @struct
 * @param {!Element} container
 * @param {!google.maps.adsense.AdUnitOptions} opts
 */
google.maps.adsense.AdUnit = function(container, opts) {};

/**
 * @return {string}
 */
google.maps.adsense.AdUnit.prototype.getBackgroundColor = function() {};

/**
 * @return {string}
 */
google.maps.adsense.AdUnit.prototype.getBorderColor = function() {};

/**
 * @return {string}
 */
google.maps.adsense.AdUnit.prototype.getChannelNumber = function() {};

/**
 * @return {!Element}
 */
google.maps.adsense.AdUnit.prototype.getContainer = function() {};

/**
 * @return {google.maps.adsense.AdFormat}
 */
google.maps.adsense.AdUnit.prototype.getFormat = function() {};

/**
 * @return {!google.maps.Map}
 */
google.maps.adsense.AdUnit.prototype.getMap = function() {};

/**
 * @return {google.maps.ControlPosition}
 */
google.maps.adsense.AdUnit.prototype.getPosition = function() {};

/**
 * @return {string}
 */
google.maps.adsense.AdUnit.prototype.getPublisherId = function() {};

/**
 * @return {string}
 */
google.maps.adsense.AdUnit.prototype.getTextColor = function() {};

/**
 * @return {string}
 */
google.maps.adsense.AdUnit.prototype.getTitleColor = function() {};

/**
 * @return {string}
 */
google.maps.adsense.AdUnit.prototype.getUrlColor = function() {};

/**
 * @param {string} backgroundColor
 * @return {void}
 */
google.maps.adsense.AdUnit.prototype.setBackgroundColor = function(backgroundColor) {};

/**
 * @param {string} borderColor
 * @return {void}
 */
google.maps.adsense.AdUnit.prototype.setBorderColor = function(borderColor) {};

/**
 * @param {string} channelNumber
 * @return {void}
 */
google.maps.adsense.AdUnit.prototype.setChannelNumber = function(channelNumber) {};

/**
 * @param {google.maps.adsense.AdFormat} format
 * @return {void}
 */
google.maps.adsense.AdUnit.prototype.setFormat = function(format) {};

/**
 * @param {!google.maps.Map} map
 * @return {void}
 */
google.maps.adsense.AdUnit.prototype.setMap = function(map) {};

/**
 * @param {google.maps.ControlPosition} position
 * @return {void}
 */
google.maps.adsense.AdUnit.prototype.setPosition = function(position) {};

/**
 * @param {string} textColor
 * @return {void}
 */
google.maps.adsense.AdUnit.prototype.setTextColor = function(textColor) {};

/**
 * @param {string} titleColor
 * @return {void}
 */
google.maps.adsense.AdUnit.prototype.setTitleColor = function(titleColor) {};

/**
 * @param {string} urlColor
 * @return {void}
 */
google.maps.adsense.AdUnit.prototype.setUrlColor = function(urlColor) {};
/**
 * @record
 * @struct
 */
google.maps.adsense.AdUnitOptions = function() {};
 /** @type {string} */
google.maps.adsense.AdUnitOptions.prototype.backgroundColor;
 /** @type {string} */
google.maps.adsense.AdUnitOptions.prototype.borderColor;
 /** @type {string} */
google.maps.adsense.AdUnitOptions.prototype.channelNumber;
 /** @type {google.maps.adsense.AdFormat} */
google.maps.adsense.AdUnitOptions.prototype.format;
 /** @type {!google.maps.Map} */
google.maps.adsense.AdUnitOptions.prototype.map;
 /** @type {google.maps.ControlPosition} */
google.maps.adsense.AdUnitOptions.prototype.position;
 /** @type {string} */
google.maps.adsense.AdUnitOptions.prototype.publisherId;
 /** @type {string} */
google.maps.adsense.AdUnitOptions.prototype.textColor;
 /** @type {string} */
google.maps.adsense.AdUnitOptions.prototype.titleColor;
 /** @type {string} */
google.maps.adsense.AdUnitOptions.prototype.urlColor;

/** @const */
google.maps.adsense.AdFormat = {};
/** @const {number} */
google.maps.adsense.AdFormat.BANNER;
/** @const {number} */
google.maps.adsense.AdFormat.BUTTON;
/** @const {number} */
google.maps.adsense.AdFormat.HALF_BANNER;
/** @const {number} */
google.maps.adsense.AdFormat.LARGE_HORIZONTAL_LINK_UNIT;
/** @const {number} */
google.maps.adsense.AdFormat.LARGE_RECTANGLE;
/** @const {number} */
google.maps.adsense.AdFormat.LARGE_VERTICAL_LINK_UNIT;
/** @const {number} */
google.maps.adsense.AdFormat.LEADERBOARD;
/** @const {number} */
google.maps.adsense.AdFormat.MEDIUM_RECTANGLE;
/** @const {number} */
google.maps.adsense.AdFormat.MEDIUM_VERTICAL_LINK_UNIT;
/** @const {number} */
google.maps.adsense.AdFormat.SKYSCRAPER;
/** @const {number} */
google.maps.adsense.AdFormat.SMALL_HORIZONTAL_LINK_UNIT;
/** @const {number} */
google.maps.adsense.AdFormat.SMALL_RECTANGLE;
/** @const {number} */
google.maps.adsense.AdFormat.SMALL_SQUARE;
/** @const {number} */
google.maps.adsense.AdFormat.SMALL_VERTICAL_LINK_UNIT;
/** @const {number} */
google.maps.adsense.AdFormat.SQUARE;
/** @const {number} */
google.maps.adsense.AdFormat.VERTICAL_BANNER;
/** @const {number} */
google.maps.adsense.AdFormat.WIDE_SKYSCRAPER;
/** @const {number} */
google.maps.adsense.AdFormat.X_LARGE_VERTICAL_LINK_UNIT;
/** @const */
google.maps.places = {};

/**
 * @constructor
 * @struct
 * @param {!HTMLInputElement} inputField
 * @param {!google.maps.places.AutocompleteOptions=} opts
 */
google.maps.places.Autocomplete = function(inputField, opts) {};

/**
 * @return {!google.maps.LatLngBounds}
 */
google.maps.places.Autocomplete.prototype.getBounds = function() {};

/**
 * @return {!google.maps.places.PlaceResult}
 */
google.maps.places.Autocomplete.prototype.getPlace = function() {};

/**
 * @param {(!google.maps.LatLngBounds|{east: number, north: number, south: number, west: number})} bounds
 * @return {void}
 */
google.maps.places.Autocomplete.prototype.setBounds = function(bounds) {};

/**
 * @param {!google.maps.places.ComponentRestrictions} restrictions
 * @return {void}
 */
google.maps.places.Autocomplete.prototype.setComponentRestrictions = function(restrictions) {};

/**
 * @param {!Array<string>} types
 * @return {void}
 */
google.maps.places.Autocomplete.prototype.setTypes = function(types) {};
/**
 * @record
 * @struct
 */
google.maps.places.AutocompleteOptions = function() {};
 /** @type {(!google.maps.LatLngBounds|{east: number, north: number, south: number, west: number})} */
google.maps.places.AutocompleteOptions.prototype.bounds;
 /** @type {!google.maps.places.ComponentRestrictions} */
google.maps.places.AutocompleteOptions.prototype.componentRestrictions;
 /** @type {boolean} */
google.maps.places.AutocompleteOptions.prototype.placeIdOnly;
 /** @type {boolean} */
google.maps.places.AutocompleteOptions.prototype.strictBounds;
 /** @type {!Array<string>} */
google.maps.places.AutocompleteOptions.prototype.types;
 /** @type {string} */
google.maps.places.AutocompleteOptions.prototype.type;
/**
 * @record
 * @struct
 */
google.maps.places.AutocompletePrediction = function() {};
 /** @type {string} */
google.maps.places.AutocompletePrediction.prototype.description;
 /** @type {!Array<!google.maps.places.PredictionSubstring>} */
google.maps.places.AutocompletePrediction.prototype.matched_substrings;
 /** @type {string} */
google.maps.places.AutocompletePrediction.prototype.place_id;
 /** @type {!Array<!google.maps.places.PredictionTerm>} */
google.maps.places.AutocompletePrediction.prototype.terms;
 /** @type {!Array<string>} */
google.maps.places.AutocompletePrediction.prototype.types;
/**
 * @record
 * @struct
 */
google.maps.places.OpeningHours = function() {};
 /** @type {boolean} */
google.maps.places.OpeningHours.prototype.open_now;
 /** @type {!Array<!google.maps.places.OpeningPeriod>} */
google.maps.places.OpeningHours.prototype.periods;
 /** @type {!Array<string>} */
google.maps.places.OpeningHours.prototype.weekday_text;
/**
 * @record
 * @struct
 */
google.maps.places.OpeningPeriod = function() {};
 /** @type {!google.maps.places.OpeningHoursTime} */
google.maps.places.OpeningPeriod.prototype.open;
 /** @type {!google.maps.places.OpeningHoursTime} */
google.maps.places.OpeningPeriod.prototype.close;
/**
 * @record
 * @struct
 */
google.maps.places.OpeningHoursTime = function() {};
 /** @type {number} */
google.maps.places.OpeningHoursTime.prototype.day;
 /** @type {string} */
google.maps.places.OpeningHoursTime.prototype.time;
/**
 * @record
 * @struct
 */
google.maps.places.PredictionTerm = function() {};
 /** @type {number} */
google.maps.places.PredictionTerm.prototype.offset;
 /** @type {string} */
google.maps.places.PredictionTerm.prototype.value;
/**
 * @record
 * @struct
 */
google.maps.places.PredictionSubstring = function() {};
 /** @type {number} */
google.maps.places.PredictionSubstring.prototype.length;
 /** @type {number} */
google.maps.places.PredictionSubstring.prototype.offset;

/**
 * @constructor
 * @struct
 */
google.maps.places.AutocompleteService = function() {};

/**
 * @param {!google.maps.places.AutocompletionRequest} request
 * @param {function(!Array<!google.maps.places.AutocompletePrediction>, google.maps.places.PlacesServiceStatus): void} callback
 * @return {void}
 */
google.maps.places.AutocompleteService.prototype.getPlacePredictions = function(request, callback) {};

/**
 * @param {!google.maps.places.QueryAutocompletionRequest} request
 * @param {function(!Array<!google.maps.places.QueryAutocompletePrediction>, google.maps.places.PlacesServiceStatus): void} callback
 * @return {void}
 */
google.maps.places.AutocompleteService.prototype.getQueryPredictions = function(request, callback) {};
/**
 * @record
 * @struct
 */
google.maps.places.AutocompletionRequest = function() {};
 /** @type {(!google.maps.LatLngBounds|{east: number, north: number, south: number, west: number})} */
google.maps.places.AutocompletionRequest.prototype.bounds;
 /** @type {!google.maps.places.ComponentRestrictions} */
google.maps.places.AutocompletionRequest.prototype.componentRestrictions;
 /** @type {string} */
google.maps.places.AutocompletionRequest.prototype.input;
 /** @type {!google.maps.LatLng} */
google.maps.places.AutocompletionRequest.prototype.location;
 /** @type {number} */
google.maps.places.AutocompletionRequest.prototype.offset;
 /** @type {number} */
google.maps.places.AutocompletionRequest.prototype.radius;
 /** @type {!Array<string>} */
google.maps.places.AutocompletionRequest.prototype.types;
/**
 * @record
 * @struct
 */
google.maps.places.ComponentRestrictions = function() {};
 /** @type {string} */
google.maps.places.ComponentRestrictions.prototype.country;
/**
 * @record
 * @struct
 */
google.maps.places.PlaceAspectRating = function() {};
 /** @type {number} */
google.maps.places.PlaceAspectRating.prototype.rating;
 /** @type {string} */
google.maps.places.PlaceAspectRating.prototype.type;
/**
 * @record
 * @struct
 */
google.maps.places.PlaceDetailsRequest = function() {};
 /** @type {string} */
google.maps.places.PlaceDetailsRequest.prototype.placeId;
/**
 * @record
 * @struct
 */
google.maps.places.PlaceGeometry = function() {};
 /** @type {!google.maps.LatLng} */
google.maps.places.PlaceGeometry.prototype.location;
 /** @type {!google.maps.LatLngBounds} */
google.maps.places.PlaceGeometry.prototype.viewport;
/**
 * @record
 * @struct
 */
google.maps.places.PlacePhoto = function() {};
 /** @type {number} */
google.maps.places.PlacePhoto.prototype.height;
 /** @type {!Array<string>} */
google.maps.places.PlacePhoto.prototype.html_attributions;
 /** @type {number} */
google.maps.places.PlacePhoto.prototype.width;

/**
 * @param {!google.maps.places.PhotoOptions} opts
 * @return {string}
 */
google.maps.places.PlacePhoto.prototype.getUrl = function(opts) {};
/**
 * @record
 * @struct
 */
google.maps.places.PhotoOptions = function() {};
 /** @type {number} */
google.maps.places.PhotoOptions.prototype.maxHeight;
 /** @type {number} */
google.maps.places.PhotoOptions.prototype.maxWidth;
/**
 * @record
 * @struct
 */
google.maps.places.PlaceResult = function() {};
 /** @type {!Array<!google.maps.GeocoderAddressComponent>} */
google.maps.places.PlaceResult.prototype.address_components;
 /** @type {!Array<!google.maps.places.PlaceAspectRating>} */
google.maps.places.PlaceResult.prototype.aspects;
 /** @type {string} */
google.maps.places.PlaceResult.prototype.formatted_address;
 /** @type {string} */
google.maps.places.PlaceResult.prototype.formatted_phone_number;
 /** @type {!google.maps.places.PlaceGeometry} */
google.maps.places.PlaceResult.prototype.geometry;
 /** @type {!Array<string>} */
google.maps.places.PlaceResult.prototype.html_attributions;
 /** @type {string} */
google.maps.places.PlaceResult.prototype.icon;
 /** @type {string} */
google.maps.places.PlaceResult.prototype.international_phone_number;
 /** @type {string} */
google.maps.places.PlaceResult.prototype.name;
 /** @type {!google.maps.places.OpeningHours} */
google.maps.places.PlaceResult.prototype.opening_hours;
 /** @type {boolean} */
google.maps.places.PlaceResult.prototype.permanently_closed;
 /** @type {!Array<!google.maps.places.PlacePhoto>} */
google.maps.places.PlaceResult.prototype.photos;
 /** @type {string} */
google.maps.places.PlaceResult.prototype.place_id;
 /** @type {number} */
google.maps.places.PlaceResult.prototype.price_level;
 /** @type {number} */
google.maps.places.PlaceResult.prototype.rating;
 /** @type {!Array<!google.maps.places.PlaceReview>} */
google.maps.places.PlaceResult.prototype.reviews;
 /** @type {!Array<string>} */
google.maps.places.PlaceResult.prototype.types;
 /** @type {string} */
google.maps.places.PlaceResult.prototype.url;
 /** @type {string} */
google.maps.places.PlaceResult.prototype.vicinity;
 /** @type {string} */
google.maps.places.PlaceResult.prototype.website;
/**
 * @record
 * @struct
 */
google.maps.places.PlaceReview = function() {};
 /** @type {!Array<!google.maps.places.PlaceAspectRating>} */
google.maps.places.PlaceReview.prototype.aspects;
 /** @type {string} */
google.maps.places.PlaceReview.prototype.author_name;
 /** @type {string} */
google.maps.places.PlaceReview.prototype.author_url;
 /** @type {string} */
google.maps.places.PlaceReview.prototype.language;
 /** @type {string} */
google.maps.places.PlaceReview.prototype.text;
/**
 * @record
 * @struct
 */
google.maps.places.PlaceSearchPagination = function() {};
 /** @type {boolean} */
google.maps.places.PlaceSearchPagination.prototype.hasNextPage;

/**
 * @return {void}
 */
google.maps.places.PlaceSearchPagination.prototype.nextPage = function() {};
/**
 * @record
 * @struct
 */
google.maps.places.PlaceSearchRequest = function() {};
 /** @type {(!google.maps.LatLngBounds|{east: number, north: number, south: number, west: number})} */
google.maps.places.PlaceSearchRequest.prototype.bounds;
 /** @type {string} */
google.maps.places.PlaceSearchRequest.prototype.keyword;
 /** @type {(!google.maps.LatLng|{lat: number, lng: number})} */
google.maps.places.PlaceSearchRequest.prototype.location;
 /** @type {number} */
google.maps.places.PlaceSearchRequest.prototype.maxPriceLevel;
 /** @type {number} */
google.maps.places.PlaceSearchRequest.prototype.minPriceLevel;
 /** @type {string} */
google.maps.places.PlaceSearchRequest.prototype.name;
 /** @type {boolean} */
google.maps.places.PlaceSearchRequest.prototype.openNow;
 /** @type {number} */
google.maps.places.PlaceSearchRequest.prototype.radius;
 /** @type {google.maps.places.RankBy} */
google.maps.places.PlaceSearchRequest.prototype.rankBy;
 /** @type {!Array<string>} */
google.maps.places.PlaceSearchRequest.prototype.types;
 /** @type {string} */
google.maps.places.PlaceSearchRequest.prototype.type;

/**
 * @constructor
 * @struct
 * @param {(!google.maps.Map|!HTMLDivElement)} attrContainer
 */
google.maps.places.PlacesService = function(attrContainer) {};

/**
 * @param {!google.maps.places.PlaceDetailsRequest} request
 * @param {function(!google.maps.places.PlaceResult, google.maps.places.PlacesServiceStatus): void} callback
 * @return {void}
 */
google.maps.places.PlacesService.prototype.getDetails = function(request, callback) {};

/**
 * @param {!google.maps.places.PlaceSearchRequest} request
 * @param {function(!Array<!google.maps.places.PlaceResult>, google.maps.places.PlacesServiceStatus, !google.maps.places.PlaceSearchPagination): void} callback
 * @return {void}
 */
google.maps.places.PlacesService.prototype.nearbySearch = function(request, callback) {};

/**
 * @param {!google.maps.places.RadarSearchRequest} request
 * @param {function(!Array<!google.maps.places.PlaceResult>, google.maps.places.PlacesServiceStatus): void} callback
 * @return {void}
 */
google.maps.places.PlacesService.prototype.radarSearch = function(request, callback) {};

/**
 * @param {!google.maps.places.TextSearchRequest} request
 * @param {function(!Array<!google.maps.places.PlaceResult>, google.maps.places.PlacesServiceStatus): void} callback
 * @return {void}
 */
google.maps.places.PlacesService.prototype.textSearch = function(request, callback) {};

/** @const */
google.maps.places.PlacesServiceStatus = {};
/** @const {number} */
google.maps.places.PlacesServiceStatus.INVALID_REQUEST;
/** @const {number} */
google.maps.places.PlacesServiceStatus.OK;
/** @const {number} */
google.maps.places.PlacesServiceStatus.OVER_QUERY_LIMIT;
/** @const {number} */
google.maps.places.PlacesServiceStatus.REQUEST_DENIED;
/** @const {number} */
google.maps.places.PlacesServiceStatus.UNKNOWN_ERROR;
/** @const {number} */
google.maps.places.PlacesServiceStatus.ZERO_RESULTS;
/**
 * @record
 * @struct
 */
google.maps.places.QueryAutocompletePrediction = function() {};
 /** @type {string} */
google.maps.places.QueryAutocompletePrediction.prototype.description;
 /** @type {!Array<!google.maps.places.PredictionSubstring>} */
google.maps.places.QueryAutocompletePrediction.prototype.matched_substrings;
 /** @type {string} */
google.maps.places.QueryAutocompletePrediction.prototype.place_id;
 /** @type {!Array<!google.maps.places.PredictionTerm>} */
google.maps.places.QueryAutocompletePrediction.prototype.terms;
/**
 * @record
 * @struct
 */
google.maps.places.QueryAutocompletionRequest = function() {};
 /** @type {(!google.maps.LatLngBounds|{east: number, north: number, south: number, west: number})} */
google.maps.places.QueryAutocompletionRequest.prototype.bounds;
 /** @type {string} */
google.maps.places.QueryAutocompletionRequest.prototype.input;
 /** @type {!google.maps.LatLng} */
google.maps.places.QueryAutocompletionRequest.prototype.location;
 /** @type {number} */
google.maps.places.QueryAutocompletionRequest.prototype.offset;
 /** @type {number} */
google.maps.places.QueryAutocompletionRequest.prototype.radius;
/**
 * @record
 * @struct
 */
google.maps.places.RadarSearchRequest = function() {};
 /** @type {(!google.maps.LatLngBounds|{east: number, north: number, south: number, west: number})} */
google.maps.places.RadarSearchRequest.prototype.bounds;
 /** @type {string} */
google.maps.places.RadarSearchRequest.prototype.keyword;
 /** @type {(!google.maps.LatLng|{lat: number, lng: number})} */
google.maps.places.RadarSearchRequest.prototype.location;
 /** @type {string} */
google.maps.places.RadarSearchRequest.prototype.name;
 /** @type {number} */
google.maps.places.RadarSearchRequest.prototype.radius;
 /** @type {!Array<string>} */
google.maps.places.RadarSearchRequest.prototype.types;
 /** @type {string} */
google.maps.places.RadarSearchRequest.prototype.type;

/** @const */
google.maps.places.RankBy = {};
/** @const {number} */
google.maps.places.RankBy.DISTANCE;
/** @const {number} */
google.maps.places.RankBy.PROMINENCE;

/**
 * @constructor
 * @struct
 * @param {!HTMLInputElement} inputField
 * @param {!google.maps.places.SearchBoxOptions=} opts
 */
google.maps.places.SearchBox = function(inputField, opts) {};

/**
 * @return {!google.maps.LatLngBounds}
 */
google.maps.places.SearchBox.prototype.getBounds = function() {};

/**
 * @return {!Array<!google.maps.places.PlaceResult>}
 */
google.maps.places.SearchBox.prototype.getPlaces = function() {};

/**
 * @param {(!google.maps.LatLngBounds|{east: number, north: number, south: number, west: number})} bounds
 * @return {void}
 */
google.maps.places.SearchBox.prototype.setBounds = function(bounds) {};
/**
 * @record
 * @struct
 */
google.maps.places.SearchBoxOptions = function() {};
 /** @type {(!google.maps.LatLngBounds|{east: number, north: number, south: number, west: number})} */
google.maps.places.SearchBoxOptions.prototype.bounds;
/**
 * @record
 * @struct
 */
google.maps.places.TextSearchRequest = function() {};
 /** @type {(!google.maps.LatLngBounds|{east: number, north: number, south: number, west: number})} */
google.maps.places.TextSearchRequest.prototype.bounds;
 /** @type {(!google.maps.LatLng|{lat: number, lng: number})} */
google.maps.places.TextSearchRequest.prototype.location;
 /** @type {string} */
google.maps.places.TextSearchRequest.prototype.query;
 /** @type {number} */
google.maps.places.TextSearchRequest.prototype.radius;
 /** @type {!Array<string>} */
google.maps.places.TextSearchRequest.prototype.types;
 /** @type {string} */
google.maps.places.TextSearchRequest.prototype.type;
/** @const */
google.maps.drawing = {};

/**
 * @constructor
 * @struct
 * @param {!google.maps.drawing.DrawingManagerOptions=} options
 */
google.maps.drawing.DrawingManager = function(options) {};

/**
 * @return {google.maps.drawing.OverlayType}
 */
google.maps.drawing.DrawingManager.prototype.getDrawingMode = function() {};

/**
 * @return {!google.maps.Map}
 */
google.maps.drawing.DrawingManager.prototype.getMap = function() {};

/**
 * @param {google.maps.drawing.OverlayType} drawingMode
 * @return {void}
 */
google.maps.drawing.DrawingManager.prototype.setDrawingMode = function(drawingMode) {};

/**
 * @param {!google.maps.Map} map
 * @return {void}
 */
google.maps.drawing.DrawingManager.prototype.setMap = function(map) {};

/**
 * @param {!google.maps.drawing.DrawingManagerOptions} options
 * @return {void}
 */
google.maps.drawing.DrawingManager.prototype.setOptions = function(options) {};
/**
 * @record
 * @struct
 */
google.maps.drawing.DrawingManagerOptions = function() {};
 /** @type {!google.maps.CircleOptions} */
google.maps.drawing.DrawingManagerOptions.prototype.circleOptions;
 /** @type {boolean} */
google.maps.drawing.DrawingManagerOptions.prototype.drawingControl;
 /** @type {!google.maps.drawing.DrawingControlOptions} */
google.maps.drawing.DrawingManagerOptions.prototype.drawingControlOptions;
 /** @type {google.maps.drawing.OverlayType} */
google.maps.drawing.DrawingManagerOptions.prototype.drawingMode;
 /** @type {!google.maps.Map} */
google.maps.drawing.DrawingManagerOptions.prototype.map;
 /** @type {!google.maps.MarkerOptions} */
google.maps.drawing.DrawingManagerOptions.prototype.markerOptions;
 /** @type {!google.maps.PolygonOptions} */
google.maps.drawing.DrawingManagerOptions.prototype.polygonOptions;
 /** @type {!google.maps.PolylineOptions} */
google.maps.drawing.DrawingManagerOptions.prototype.polylineOptions;
 /** @type {!google.maps.RectangleOptions} */
google.maps.drawing.DrawingManagerOptions.prototype.rectangleOptions;
/**
 * @record
 * @struct
 */
google.maps.drawing.DrawingControlOptions = function() {};
 /** @type {!Array<google.maps.drawing.OverlayType>} */
google.maps.drawing.DrawingControlOptions.prototype.drawingModes;
 /** @type {google.maps.ControlPosition} */
google.maps.drawing.DrawingControlOptions.prototype.position;
/**
 * @record
 * @struct
 */
google.maps.drawing.OverlayCompleteEvent = function() {};
 /** @type {(!google.maps.Marker|!google.maps.Polyline|!google.maps.Polygon|!google.maps.Rectangle|!google.maps.Circle)} */
google.maps.drawing.OverlayCompleteEvent.prototype.overlay;
 /** @type {google.maps.drawing.OverlayType} */
google.maps.drawing.OverlayCompleteEvent.prototype.type;

/** @const */
google.maps.drawing.OverlayType = {};
/** @const {number} */
google.maps.drawing.OverlayType.CIRCLE;
/** @const {number} */
google.maps.drawing.OverlayType.MARKER;
/** @const {number} */
google.maps.drawing.OverlayType.POLYGON;
/** @const {number} */
google.maps.drawing.OverlayType.POLYLINE;
/** @const {number} */
google.maps.drawing.OverlayType.RECTANGLE;
/** @const */
google.maps.visualization = {};

/**
 * @constructor
 * @struct
 * @param {!google.maps.visualization.MapsEngineLayerOptions} options
 */
google.maps.visualization.MapsEngineLayer = function(options) {};

/**
 * @return {string}
 */
google.maps.visualization.MapsEngineLayer.prototype.getLayerId = function() {};

/**
 * @return {string}
 */
google.maps.visualization.MapsEngineLayer.prototype.getLayerKey = function() {};

/**
 * @return {!google.maps.Map}
 */
google.maps.visualization.MapsEngineLayer.prototype.getMap = function() {};

/**
 * @return {string}
 */
google.maps.visualization.MapsEngineLayer.prototype.getMapId = function() {};

/**
 * @return {number}
 */
google.maps.visualization.MapsEngineLayer.prototype.getOpacity = function() {};

/**
 * @return {!google.maps.visualization.MapsEngineLayerProperties}
 */
google.maps.visualization.MapsEngineLayer.prototype.getProperties = function() {};

/**
 * @return {google.maps.visualization.MapsEngineStatus}
 */
google.maps.visualization.MapsEngineLayer.prototype.getStatus = function() {};

/**
 * @return {number}
 */
google.maps.visualization.MapsEngineLayer.prototype.getZIndex = function() {};

/**
 * @param {string} layerId
 * @return {void}
 */
google.maps.visualization.MapsEngineLayer.prototype.setLayerId = function(layerId) {};

/**
 * @param {string} layerKey
 * @return {void}
 */
google.maps.visualization.MapsEngineLayer.prototype.setLayerKey = function(layerKey) {};

/**
 * @param {!google.maps.Map} map
 * @return {void}
 */
google.maps.visualization.MapsEngineLayer.prototype.setMap = function(map) {};

/**
 * @param {string} mapId
 * @return {void}
 */
google.maps.visualization.MapsEngineLayer.prototype.setMapId = function(mapId) {};

/**
 * @param {number} opacity
 * @return {void}
 */
google.maps.visualization.MapsEngineLayer.prototype.setOpacity = function(opacity) {};

/**
 * @param {!google.maps.visualization.MapsEngineLayerOptions} options
 * @return {void}
 */
google.maps.visualization.MapsEngineLayer.prototype.setOptions = function(options) {};

/**
 * @param {number} zIndex
 * @return {void}
 */
google.maps.visualization.MapsEngineLayer.prototype.setZIndex = function(zIndex) {};
/**
 * @record
 * @struct
 */
google.maps.visualization.MapsEngineLayerOptions = function() {};
 /** @type {string} */
google.maps.visualization.MapsEngineLayerOptions.prototype.accessToken;
 /** @type {boolean} */
google.maps.visualization.MapsEngineLayerOptions.prototype.clickable;
 /** @type {boolean} */
google.maps.visualization.MapsEngineLayerOptions.prototype.fitBounds;
 /** @type {string} */
google.maps.visualization.MapsEngineLayerOptions.prototype.layerId;
 /** @type {string} */
google.maps.visualization.MapsEngineLayerOptions.prototype.layerKey;
 /** @type {!google.maps.Map} */
google.maps.visualization.MapsEngineLayerOptions.prototype.map;
 /** @type {string} */
google.maps.visualization.MapsEngineLayerOptions.prototype.mapId;
 /** @type {number} */
google.maps.visualization.MapsEngineLayerOptions.prototype.opacity;
 /** @type {boolean} */
google.maps.visualization.MapsEngineLayerOptions.prototype.suppressInfoWindows;
 /** @type {number} */
google.maps.visualization.MapsEngineLayerOptions.prototype.zIndex;
/**
 * @record
 * @struct
 */
google.maps.visualization.MapsEngineLayerProperties = function() {};
 /** @type {string} */
google.maps.visualization.MapsEngineLayerProperties.prototype.name;
/**
 * @record
 * @struct
 */
google.maps.visualization.MapsEngineMouseEvent = function() {};
 /** @type {string} */
google.maps.visualization.MapsEngineMouseEvent.prototype.featureId;
 /** @type {string} */
google.maps.visualization.MapsEngineMouseEvent.prototype.infoWindowHtml;
 /** @type {!google.maps.LatLng} */
google.maps.visualization.MapsEngineMouseEvent.prototype.latLng;
 /** @type {!google.maps.Size} */
google.maps.visualization.MapsEngineMouseEvent.prototype.pixelOffset;

/** @const */
google.maps.visualization.MapsEngineStatus = {};
/** @const {number} */
google.maps.visualization.MapsEngineStatus.INVALID_LAYER;
/** @const {number} */
google.maps.visualization.MapsEngineStatus.OK;
/** @const {number} */
google.maps.visualization.MapsEngineStatus.UNKNOWN_ERROR;

/**
 * @constructor
 * @struct
 * @param {!google.maps.visualization.HeatmapLayerOptions=} opts
 */
google.maps.visualization.HeatmapLayer = function(opts) {};

/**
 * @template T
 * @return {!google.maps.MVCArray<T>}
 */
google.maps.visualization.HeatmapLayer.prototype.getData = function() {};

/**
 * @return {!google.maps.Map}
 */
google.maps.visualization.HeatmapLayer.prototype.getMap = function() {};

/**
 * @param {(!Array<!google.maps.LatLng>|!google.maps.MVCArray<(!google.maps.LatLng|!google.maps.visualization.WeightedLocation)>|!Array<!google.maps.visualization.WeightedLocation>)} data
 * @return {void}
 */
google.maps.visualization.HeatmapLayer.prototype.setData = function(data) {};

/**
 * @param {!google.maps.Map} map
 * @return {void}
 */
google.maps.visualization.HeatmapLayer.prototype.setMap = function(map) {};
/**
 * @record
 * @struct
 */
google.maps.visualization.HeatmapLayerOptions = function() {};
 /** @type {?} */
google.maps.visualization.HeatmapLayerOptions.prototype.data;
 /** @type {boolean} */
google.maps.visualization.HeatmapLayerOptions.prototype.dissipating;
 /** @type {!Array<string>} */
google.maps.visualization.HeatmapLayerOptions.prototype.gradient;
 /** @type {!google.maps.Map} */
google.maps.visualization.HeatmapLayerOptions.prototype.map;
 /** @type {number} */
google.maps.visualization.HeatmapLayerOptions.prototype.maxIntensity;
 /** @type {number} */
google.maps.visualization.HeatmapLayerOptions.prototype.opacity;
 /** @type {number} */
google.maps.visualization.HeatmapLayerOptions.prototype.radius;
/**
 * @record
 * @struct
 */
google.maps.visualization.WeightedLocation = function() {};
 /** @type {!google.maps.LatLng} */
google.maps.visualization.WeightedLocation.prototype.location;
 /** @type {number} */
google.maps.visualization.WeightedLocation.prototype.weight;
/**
 * @constructor
 * @struct
 */
google.maps.visualization.MouseEvent = function() {};

/**
 * @return {void}
 */
google.maps.visualization.MouseEvent.prototype.stop = function() {};
/**
 * @constructor
 * @struct
 */
google.maps.visualization.MapsEventListener = function() {};
