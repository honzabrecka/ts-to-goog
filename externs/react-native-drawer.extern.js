/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/react-native-drawer/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */
/**
 * @record
 * @struct
 */
function NestedViewStyles() {}
 /** @type {?} */
NestedViewStyles.prototype.main;
 /** @type {?} */
NestedViewStyles.prototype.drawerOverlay;
 /** @type {?} */
NestedViewStyles.prototype.mainOverlay;
/**
 * @extends {NestedViewStyles}
 * @record
 * @struct
 */
function DrawerStyles() {}
 /** @type {?} */
DrawerStyles.prototype.drawer;

/** @typedef {string} */
var TweenFunctions;
/**
 * @record
 * @struct
 */
function DrawerProperties() {}
 /** @type {(string|number|boolean|!Object|!React.ReactElement<?>|!Array<(string|number|boolean|!Array<?>|!React.ReactElement<?>)>)} */
DrawerProperties.prototype.content;
 /** @type {string} */
DrawerProperties.prototype.type;
 /** @type {boolean} */
DrawerProperties.prototype.open;
 /** @type {(number|?)} */
DrawerProperties.prototype.openDrawerOffset;
 /** @type {(number|?)} */
DrawerProperties.prototype.closedDrawerOffset;
 /** @type {boolean} */
DrawerProperties.prototype.disabled;
 /** @type {?} */
DrawerProperties.prototype.styles;
 /** @type {number} */
DrawerProperties.prototype.tweenDuration;
 /** @type {string} */
DrawerProperties.prototype.tweenEasing;
 /** @type {(boolean|string)} */
DrawerProperties.prototype.captureGestures;
 /** @type {boolean} */
DrawerProperties.prototype.acceptDoubleTap;
 /** @type {boolean} */
DrawerProperties.prototype.acceptTap;
 /** @type {boolean} */
DrawerProperties.prototype.acceptPan;
 /** @type {boolean} */
DrawerProperties.prototype.tapToClose;
 /** @type {boolean} */
DrawerProperties.prototype.negotiatePan;
 /** @type {number} */
DrawerProperties.prototype.panThreshold;
 /** @type {number} */
DrawerProperties.prototype.panOpenMask;
 /** @type {number} */
DrawerProperties.prototype.panCloseMask;
 /** @type {number} */
DrawerProperties.prototype.initializeOpen;
 /** @type {string} */
DrawerProperties.prototype.side;
 /** @type {boolean} */
DrawerProperties.prototype.useInteractionManager;
 /** @type {number} */
DrawerProperties.prototype.elevation;

/**
 * Takes in the pan ratio (decimal 0 to 1) that represents the tween percent. Returns an object of
 * native props to be set on the constituent views
 * @param {number} ratio
 * @return {?}
 */
DrawerProperties.prototype.tweenHandler = function(ratio) {};

/**
 * Will be called immediately after the drawer has entered the open state
 * @return {void}
 */
DrawerProperties.prototype.onOpen = function() {};

/**
 * Callback fired at the start of an open animation
 * @return {void}
 */
DrawerProperties.prototype.onOpenStart = function() {};

/**
 * Will be called immediately after the drawer has entered the closed state
 * @return {void}
 */
DrawerProperties.prototype.onClose = function() {};

/**
 * Ccallback fired at the start of a close animation
 * @return {void}
 */
DrawerProperties.prototype.onCloseStart = function() {};
/**
 * @constructor
 * @struct
 */
function Drawer() {}
