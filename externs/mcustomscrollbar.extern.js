/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/mcustomscrollbar/index.d.ts:
/** @const */
var MCustomScrollbar = {};

/** @typedef {function(!JQueryStatic<!HTMLElement>): void} */
MCustomScrollbar.Factory;
/**
 * @record
 * @struct
 */
MCustomScrollbar.CustomScrollbarOptions = function() {};
 /** @type {(string|number|boolean)} */
MCustomScrollbar.CustomScrollbarOptions.prototype.setWidth;
 /** @type {(string|number|boolean)} */
MCustomScrollbar.CustomScrollbarOptions.prototype.setHeight;
 /** @type {(string|number)} */
MCustomScrollbar.CustomScrollbarOptions.prototype.setTop;
 /** @type {(string|number)} */
MCustomScrollbar.CustomScrollbarOptions.prototype.setLeft;
 /** @type {string} */
MCustomScrollbar.CustomScrollbarOptions.prototype.axis;
 /** @type {string} */
MCustomScrollbar.CustomScrollbarOptions.prototype.scrollbarPosition;
 /** @type {number} */
MCustomScrollbar.CustomScrollbarOptions.prototype.alwaysShowScrollbar;
 /** @type {(number|!Array<?>)} */
MCustomScrollbar.CustomScrollbarOptions.prototype.snapAmount;
 /** @type {number} */
MCustomScrollbar.CustomScrollbarOptions.prototype.snapOffset;
 /** @type {boolean} */
MCustomScrollbar.CustomScrollbarOptions.prototype.autoExpandScrollbar;
 /** @type {number} */
MCustomScrollbar.CustomScrollbarOptions.prototype.scrollInertia;
 /** @type {{enable: boolean, scrollAmount: (number|string), axis: string, preventDefault: boolean, deltaFactor: number, normalizeDelta: boolean, invert: boolean, disableOver: !Array<string>}} */
MCustomScrollbar.CustomScrollbarOptions.prototype.mouseWheel;
 /** @type {{enable: boolean, scrollAmount: (number|string), scrollType: string}} */
MCustomScrollbar.CustomScrollbarOptions.prototype.keyboard;
 /** @type {?} */
MCustomScrollbar.CustomScrollbarOptions.prototype.mouseWheelPixels;
 /** @type {boolean} */
MCustomScrollbar.CustomScrollbarOptions.prototype.autoDraggerLength;
 /** @type {boolean} */
MCustomScrollbar.CustomScrollbarOptions.prototype.autoHideScrollbar;
 /** @type {{enable: boolean, scrollType: string, tabindex: number, scrollAmount: (number|string)}} */
MCustomScrollbar.CustomScrollbarOptions.prototype.scrollButtons;
 /** @type {{updateOnBrowserResize: boolean, updateOnContentResize: boolean, updateOnImageLoad: (boolean|string), extraDraggableSelectors: string, releaseDraggableSelectors: string, autoUpdateTimeout: number, updateOnSelectorChange: (string|boolean), autoExpandHorizontalScroll: boolean, autoScrollOnFocus: (string|boolean), normalizeMouseWheelDelta: boolean}} */
MCustomScrollbar.CustomScrollbarOptions.prototype.advanced;
 /** @type {(number|boolean)} */
MCustomScrollbar.CustomScrollbarOptions.prototype.contentTouchScroll;
 /** @type {boolean} */
MCustomScrollbar.CustomScrollbarOptions.prototype.documentTouchScroll;
 /** @type {{onCreate: function(): void, onInit: function(): void, onScrollStart: function(): void, onScroll: function(): void, onTotalScroll: function(): void, onTotalScrollBack: function(): void, onTotalScrollOffset: number, onTotalScrollBackOffset: number, whileScrolling: function(): void, alwaysTriggerOffsets: boolean, onOverflowY: function(): void, onOverflowX: function(): void, onOverflowYNone: function(): void, onOverflowXNone: function(): void, onBeforeUpdate: function(): void, onUpdate: function(): void, onImageLoad: function(): void, onSelectorChange: function(): void}} */
MCustomScrollbar.CustomScrollbarOptions.prototype.callbacks;
 /** @type {string} */
MCustomScrollbar.CustomScrollbarOptions.prototype.theme;
 /** @type {(string|boolean)} */
MCustomScrollbar.CustomScrollbarOptions.prototype.live;
 /** @type {string} */
MCustomScrollbar.CustomScrollbarOptions.prototype.liveSelector;
/**
 * @record
 * @struct
 */
MCustomScrollbar.ScrollToParameterOptions = function() {};
 /** @type {number} */
MCustomScrollbar.ScrollToParameterOptions.prototype.scrollInertia;
 /** @type {string} */
MCustomScrollbar.ScrollToParameterOptions.prototype.scrollEasing;
 /** @type {boolean} */
MCustomScrollbar.ScrollToParameterOptions.prototype.moveDragger;
 /** @type {number} */
MCustomScrollbar.ScrollToParameterOptions.prototype.timeout;
 /** @type {boolean} */
MCustomScrollbar.ScrollToParameterOptions.prototype.callbacks;

/**
 * Calls specified methods on the scrollbar "update", "stop", "disable", "destroy"
 * 
 * Calls the scrollTo method on the scrollbar
 * 
 * Creates a new mCustomScrollbar with the specified or default options
 * 
 * @param {string|!MCustomScrollbar.CustomScrollbarOptions=} method_or_scrollTo_or_options Method name to call on scrollbar e.g. "update", "stop" / Method name as a string "scrollTo" / Override default options
 * @param {?=} parameter String or pixel integer value to specify where to scroll to e.g. "bottom", "top" or 20
 * @param {!MCustomScrollbar.ScrollToParameterOptions=} options Override default options
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.mCustomScrollbar = function(method_or_scrollTo_or_options, parameter, options) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "malihu-custom-scrollbar-plugin"
/** @const */
tsickle_declare_module.malihu_custom_scrollbar_plugin = {};
 /** @type {function(!JQueryStatic<!HTMLElement>): void} */
tsickle_declare_module.malihu_custom_scrollbar_plugin.factory;

/* TODO: ExportAssignment in tsickle_declare_module.malihu_custom_scrollbar_plugin */
