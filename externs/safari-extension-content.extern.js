/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/safari-extension-content/index.d.ts:
 /** @type {?} */
Window.prototype.safari;
/** @const */
var safari = {};
 /** @type {!SafariContentExtension} */
safari.extension;
 /** @type {!SafariContentWebPage} */
safari.self;
/**
 * @record
 * @struct
 */
function SafariEvent() {}
 /** @type {string} */
SafariEvent.prototype.type;
 /** @type {!SafariEventTarget} */
SafariEvent.prototype.target;
 /** @type {!SafariEventTarget} */
SafariEvent.prototype.currentTarget;
 /** @type {number} */
SafariEvent.prototype.timestamp;
 /** @type {number} */
SafariEvent.prototype.eventPhase;
 /** @type {boolean} */
SafariEvent.prototype.bubbles;
 /** @type {boolean} */
SafariEvent.prototype.cancelable;
 /** @type {boolean} */
SafariEvent.prototype.defaultPrevented;

/**
 * Prevents the event from any further propagation.
 * Propagation can be stopped only fon cancelable events. After propagation is stopped, the event is not sent to any other targets.
 * @return {void}
 */
SafariEvent.prototype.stopPropagation = function() {};

/**
 * Prevents the browser from performing the default action for an event.
 * Use this method to indicate that your extension has already fully handled the event; you donâ€™t want the browser to do anything. Note that preventing the default action does not stop an event from propagating.
 * @return {void}
 */
SafariEvent.prototype.preventDefault = function() {};
/**
 * @extends {SafariEvent}
 * @record
 * @struct
 */
function SafariExtensionMessageEvent() {}
 /** @type {string} */
SafariExtensionMessageEvent.prototype.name;
 /** @type {?} */
SafariExtensionMessageEvent.prototype.message;
/**
 * @record
 * @struct
 */
function SafariEventListener() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SafariEventTarget() {}

/**
 * @param {string} type
 * @param {!SafariEventListener} listener
 * @param {boolean=} useCapture
 * @return {void}
 */
SafariEventTarget.prototype.addEventListener = function(type, listener, useCapture) {};

/**
 * @param {string} type
 * @param {!SafariEventListener} listener
 * @param {boolean=} useCapture
 * @return {void}
 */
SafariEventTarget.prototype.removeEventListener = function(type, listener, useCapture) {};
/**
 * @record
 * @struct
 */
function SafariContentExtension() {}
 /** @type {string} */
SafariContentExtension.prototype.baseURI;
/**
 * @extends {SafariEventTarget}
 * @record
 * @struct
 */
function SafariContentWebPage() {}
 /** @type {!SafariContentBrowserTabProxy} */
SafariContentWebPage.prototype.tab;
/**
 * @record
 * @struct
 */
function SafariContentBrowserTabProxy() {}

/**
 * @param {?} event
 * @param {?} message
 * @return {?}
 */
SafariContentBrowserTabProxy.prototype.canLoad = function(event, message) {};

/**
 * @param {string} name
 * @param {?=} message
 * @return {void}
 */
SafariContentBrowserTabProxy.prototype.dispatchMessage = function(name, message) {};

/**
 * @param {!MouseEvent} event
 * @param {?} userInfo
 * @return {void}
 */
SafariContentBrowserTabProxy.prototype.setContextMenuEventUserInfo = function(event, userInfo) {};
/**
 * @record
 * @struct
 */
function BeforeLoadEvent() {}
 /** @type {string} */
BeforeLoadEvent.prototype.url;
