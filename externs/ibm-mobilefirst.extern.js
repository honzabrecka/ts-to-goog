/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/ibm-mobilefirst/index.d.ts:
/** @const */
var WL = {};
/** @const */
WL.Events = {};
 /** @type {string} */
WL.Events.WORKLIGHT_IS_CONNECTED;
 /** @type {string} */
WL.Events.WORKLIGHT_IS_DISCONNECTED;
/** @const */
WL.AppProperty = {};
 /** @type {string} */
WL.AppProperty.AIR_ICON_16x16_PATH;
 /** @type {string} */
WL.AppProperty.AIR_ICON_128x128_PATH;
 /** @type {string} */
WL.AppProperty.DOWNLOAD_APP_LINK;
 /** @type {string} */
WL.AppProperty.APP_DISPLAY_NAME;
 /** @type {string} */
WL.AppProperty.APP_LOGIN_TYPE;
 /** @type {string} */
WL.AppProperty.APP_VERSION;
 /** @type {string} */
WL.AppProperty.LATEST_VERSION;
 /** @type {string} */
WL.AppProperty.MAIN_FILE_PATH;
 /** @type {string} */
WL.AppProperty.SHOW_IN_TASKBAR;
 /** @type {string} */
WL.AppProperty.THUMBNAIL_IMAGE_URL;
/** @const */
WL.Environment = {};
 /** @type {string} */
WL.Environment.ADOBE_AIR;
 /** @type {string} */
WL.Environment.ANDROID;
 /** @type {string} */
WL.Environment.EMBEDDED;
 /** @type {string} */
WL.Environment.IPAD;
 /** @type {string} */
WL.Environment.IPHONE;
 /** @type {string} */
WL.Environment.MOBILE_WEB;
 /** @type {string} */
WL.Environment.PREVIEW;
 /** @type {string} */
WL.Environment.WINDOWS_PHONE_8;
 /** @type {string} */
WL.Environment.WINDOWS8;
/**
 * @record
 * @struct
 */
WL.IResponse = function() {};
 /** @type {?} */
WL.IResponse.prototype.invocationContext;
/**
 * @record
 * @struct
 */
WL.Headers = function() {};

/* TODO: IndexSignature: WL */
/**
 * @constructor
 * @struct
 */
WL.ResponseBase = function() {};
 /** @type {?} */
WL.ResponseBase.prototype.invocationContext;
 /** @type {!Object<string,?>} */
WL.ResponseBase.prototype.headerJSON;
 /** @type {number} */
WL.ResponseBase.prototype.readyState;
 /** @type {?} */
WL.ResponseBase.prototype.request;
 /** @type {!Object<string,?>} */
WL.ResponseBase.prototype.responseJSON;
 /** @type {string} */
WL.ResponseBase.prototype.responseText;
 /** @type {string} */
WL.ResponseBase.prototype.responseXML;
 /** @type {number} */
WL.ResponseBase.prototype.status;
 /** @type {string} */
WL.ResponseBase.prototype.statusText;
 /** @type {number} */
WL.ResponseBase.prototype.errorCode;
 /** @type {string} */
WL.ResponseBase.prototype.errorMsg;
/**
 * @extends {WL.ResponseBase}
 * @constructor
 * @struct
 */
WL.FailureResponse = function() {};
/**
 * @extends {WL.ResponseBase}
 * @constructor
 * @struct
 */
WL.Response = function() {};

/**
 * @return {!Array<string>}
 */
WL.Response.prototype.getHeaderNames = function() {};

/**
 * @return {!WL.Headers}
 */
WL.Response.prototype.getAllHeaders = function() {};

/**
 * @param {?} name
 * @return {string}
 */
WL.Response.prototype.getHeader = function(name) {};
/**
 * @record
 * @struct
 */
WL.Options = function() {};
 /** @type {function(!WL.IResponse): void} */
WL.Options.prototype.onSuccess;
 /** @type {function(!WL.IResponse): void} */
WL.Options.prototype.onFailure;
 /** @type {?} */
WL.Options.prototype.invocationContext;
/**
 * @record
 * @struct
 */
WL.ResponseHandler = function() {};

/* TODO: CallSignature: WL */
/** @const */
WL.Analytics = {};

/**
 * @return {void}
 */
WL.Analytics.disable = function() {};

/**
 * @return {void}
 */
WL.Analytics.enable = function() {};

/**
 * @param {string} message
 * @param {string} name
 * @return {void}
 */
WL.Analytics.log = function(message, name) {};

/**
 * @deprecated since version 6.2. WL.Analytics.restart is now a NOP.
 * @return {void}
 */
WL.Analytics.restart = function() {};

/**
 * @return {void}
 */
WL.Analytics.send = function() {};

/**
 * @return {void}
 */
WL.Analytics.state = function() {};
/** @const */
WL.App = {};
/**
 * @record
 * @struct
 */
WL.App.ActionReceiverCallback = function() {};

/* TODO: CallSignature: WL.App */
/**
 * @record
 * @struct
 */
WL.App.Callback = function() {};

/* TODO: CallSignature: WL.App */
/**
 * @record
 * @struct
 */
WL.App.OpenURLOptions = function() {};
 /** @type {number} */
WL.App.OpenURLOptions.prototype.status;
 /** @type {number} */
WL.App.OpenURLOptions.prototype.toolbar;
 /** @type {number} */
WL.App.OpenURLOptions.prototype.location;
 /** @type {number} */
WL.App.OpenURLOptions.prototype.menubar;
 /** @type {number} */
WL.App.OpenURLOptions.prototype.directories;
 /** @type {number} */
WL.App.OpenURLOptions.prototype.resizable;
 /** @type {number} */
WL.App.OpenURLOptions.prototype.scrollbars;
/**
 * @record
 * @struct
 */
WL.App.Data = function() {};
/**
 * @record
 * @struct
 */
WL.App.KeepAliveInBackgroundOptions = function() {};
 /** @type {string} */
WL.App.KeepAliveInBackgroundOptions.prototype.tickerText;
 /** @type {string} */
WL.App.KeepAliveInBackgroundOptions.prototype.contentTitle;
 /** @type {string} */
WL.App.KeepAliveInBackgroundOptions.prototype.contentTextText;
 /** @type {string} */
WL.App.KeepAliveInBackgroundOptions.prototype.icon;
 /** @type {number} */
WL.App.KeepAliveInBackgroundOptions.prototype.notificationId;
 /** @type {string} */
WL.App.KeepAliveInBackgroundOptions.prototype.className;

/**
 * @param {string} id
 * @param {!WL.App.ActionReceiverCallback} callback
 * @return {void}
 */
WL.App.addActionReceiver = function(id, callback) {};

/**
 * \@deprecate Deprecated.
 * @return {void}
 */
WL.App.close = function() {};

/**
 * @param {string} stringToCopy
 * @param {!WL.App.Callback=} callback
 * @return {void}
 */
WL.App.copyToClipboard = function(stringToCopy, callback) {};

/**
 * @return {string}
 */
WL.App.getDeviceLanguage = function() {};

/**
 * @return {string}
 */
WL.App.getDeviceLocale = function() {};

/**
 * TODO: declare exception type. (Exceptions that are thrown by the IBM® Worklight® client runtime framework)
 * @param {?} exception
 * @return {string}
 */
WL.App.getErrorMessage = function(exception) {};

/**
 * @return {void}
 */
WL.App.hideSplashScreen = function() {};

/**
 * @param {string} url
 * @param {string=} target
 * @param {!WL.App.OpenURLOptions=} options
 * @return {void}
 */
WL.App.openURL = function(url, target, options) {};

/**
 * @param {!WL.App.Callback} callback
 * @return {void}
 */
WL.App.overrideBackButton = function(callback) {};

/**
 * @param {string} id
 * @return {void}
 */
WL.App.removeActionReceiver = function(id) {};

/**
 * @deprecated since version 6.0.0
 * @return {void}
 */
WL.App.resetBackButton = function() {};

/**
 * @param {string} action
 * @param {!WL.App.Data=} data
 * @return {void}
 */
WL.App.sendActionToNative = function(action, data) {};

/**
 * @param {boolean} enabled
 * @param {!WL.App.KeepAliveInBackgroundOptions=} options
 * @return {void}
 */
WL.App.setKeepAliveInBackground = function(enabled, options) {};

/**
 * @return {void}
 */
WL.App.showSplashScreen = function() {};
/** @const */
WL.App.BackgroundHandler = {};
/**
 * @record
 * @struct
 */
WL.App.BackgroundHandler.Handler = function() {};

/* TODO: CallSignature: WL.App.BackgroundHandler */

/**
 * @param {!WL.App.BackgroundHandler.Handler} handler
 * @return {void}
 */
WL.App.BackgroundHandler.setOnAppEnteringBackground = function(handler) {};
 /** @type {!WL.App.BackgroundHandler.Handler} */
WL.App.BackgroundHandler.hideView;
 /** @type {!WL.App.BackgroundHandler.Handler} */
WL.App.BackgroundHandler.defaultIOSBehavior;
 /** @type {!WL.App.BackgroundHandler.Handler} */
WL.App.BackgroundHandler.hideElements;
/** @const */
WL.Badge = {};

/**
 * @param {number} badgeNumber
 * @return {void}
 */
WL.Badge.setNumber = function(badgeNumber) {};
/**
 * @record
 * @struct
 */
WL.BusyIndicatorOptions = function() {};
 /** @type {string} */
WL.BusyIndicatorOptions.prototype.tickerText;
 /** @type {string} */
WL.BusyIndicatorOptions.prototype.contentTitle;
 /** @type {string} */
WL.BusyIndicatorOptions.prototype.contentTextText;
 /** @type {string} */
WL.BusyIndicatorOptions.prototype.icon;
 /** @type {number} */
WL.BusyIndicatorOptions.prototype.notificationId;
 /** @type {string} */
WL.BusyIndicatorOptions.prototype.className;

/**
 * @constructor
 * @struct
 * @param {string=} containerId
 * @param {!WL.BusyIndicator=} options
 */
WL.BusyIndicator = function(containerId, options) {};

/**
 * @return {void}
 */
WL.BusyIndicator.prototype.hide = function() {};

/**
 * @return {void}
 */
WL.BusyIndicator.prototype.show = function() {};
/** @const */
WL.Client = {};
/**
 * @record
 * @struct
 */
WL.Client.SharedTokenObject = function() {};
 /** @type {string} */
WL.Client.SharedTokenObject.prototype.key;
/**
 * @record
 * @struct
 */
WL.Client.ConnectOptions = function() {};
 /** @type {function(!WL.ResponseBase): void} */
WL.Client.ConnectOptions.prototype.onSuccess;
 /** @type {function(!WL.FailureResponse): void} */
WL.Client.ConnectOptions.prototype.onFailure;
 /** @type {number} */
WL.Client.ConnectOptions.prototype.timeout;
/**
 * @record
 * @struct
 */
WL.Client.ChallengehandlerInvocationData = function() {};
 /** @type {string} */
WL.Client.ChallengehandlerInvocationData.prototype.adapter;
 /** @type {string} */
WL.Client.ChallengehandlerInvocationData.prototype.procedure;
 /** @type {!Array<?>} */
WL.Client.ChallengehandlerInvocationData.prototype.parameters;
/**
 * @record
 * @struct
 */
WL.Client.ChallengeHandlerAuthenticationOptions = function() {};
/**
 * @record
 * @struct
 */
WL.Client.ChallengeHandlerSubmitLoginFormOptions = function() {};
 /** @type {number} */
WL.Client.ChallengeHandlerSubmitLoginFormOptions.prototype.timeout;
 /** @type {!Object} */
WL.Client.ChallengeHandlerSubmitLoginFormOptions.prototype.headers;
 /** @type {!Object} */
WL.Client.ChallengeHandlerSubmitLoginFormOptions.prototype.parameters;
/**
 * @constructor
 * @struct
 */
WL.Client.AbstractChallengeHandler = function() {};

/**
 * @param {?} challenge
 * @return {boolean}
 */
WL.Client.AbstractChallengeHandler.prototype.handleChallenge = function(challenge) {};

/**
 * @param {?} transport
 * @return {boolean}
 */
WL.Client.AbstractChallengeHandler.prototype.isCustomResponse = function(transport) {};

/**
 * @param {!WL.Client.ChallengehandlerInvocationData} invocationData
 * @param {!WL.Client.ChallengeHandlerAuthenticationOptions} options
 * @return {void}
 */
WL.Client.AbstractChallengeHandler.prototype.submitAdapterAuthentication = function(invocationData, options) {};

/**
 * @param {string} error
 * @return {void}
 */
WL.Client.AbstractChallengeHandler.prototype.submitFailure = function(error) {};

/**
 * @param {string} reqURL
 * @param {!WL.Client.ChallengeHandlerSubmitLoginFormOptions} options
 * @param {function(?): void} submitLoginFormCallback
 * @return {void}
 */
WL.Client.AbstractChallengeHandler.prototype.submitLoginForm = function(reqURL, options, submitLoginFormCallback) {};

/**
 * @return {void}
 */
WL.Client.AbstractChallengeHandler.prototype.submitSuccess = function() {};
/**
 * @extends {WL.Options}
 * @record
 * @struct
 */
WL.Client.InitOptions = function() {};
 /** @type {number} */
WL.Client.InitOptions.prototype.timeout;
 /** @type {boolean} */
WL.Client.InitOptions.prototype.enableLogger;
 /** @type {string} */
WL.Client.InitOptions.prototype.messages;
 /** @type {!Object} */
WL.Client.InitOptions.prototype.authenticator;
 /** @type {number} */
WL.Client.InitOptions.prototype.heartBeatIntervalInSecs;
 /** @type {boolean} */
WL.Client.InitOptions.prototype.connectOnStartup;
 /** @type {function(!WL.FailureResponse): void} */
WL.Client.InitOptions.prototype.onConnectionFailure;
 /** @type {function(!WL.FailureResponse): void} */
WL.Client.InitOptions.prototype.onUnsupportedVersion;
 /** @type {function(!WL.FailureResponse): void} */
WL.Client.InitOptions.prototype.onRequestTimeout;
 /** @type {function(!WL.FailureResponse): void} */
WL.Client.InitOptions.prototype.onUnsupportedBrowser;
 /** @type {function(!WL.FailureResponse): void} */
WL.Client.InitOptions.prototype.onDisabledCookies;
 /** @type {function(!WL.FailureResponse): void} */
WL.Client.InitOptions.prototype.onUserInstanceAccessViolation;
 /** @type {function(!WL.FailureResponse): void} */
WL.Client.InitOptions.prototype.onErrorRemoteDisableDenial;
 /** @type {function(!WL.FailureResponse): void} */
WL.Client.InitOptions.prototype.onErrorAppVersionAccessDenial;
 /** @type {boolean} */
WL.Client.InitOptions.prototype.validateArguments;
 /** @type {boolean} */
WL.Client.InitOptions.prototype.autoHideSplash;
 /** @type {function(function(?): void): void} */
WL.Client.InitOptions.prototype.onGetCustomDeviceProvisioningProperties;
/**
 * @record
 * @struct
 */
WL.Client.ProcedureInvocationData = function() {};
 /** @type {string} */
WL.Client.ProcedureInvocationData.prototype.adapter;
 /** @type {string} */
WL.Client.ProcedureInvocationData.prototype.procedure;
 /** @type {!Array<?>} */
WL.Client.ProcedureInvocationData.prototype.parameters;
 /** @type {boolean} */
WL.Client.ProcedureInvocationData.prototype.compressResponse;
/**
 * @record
 * @struct
 */
WL.Client.ProcedureInvocationResult = function() {};
 /** @type {boolean} */
WL.Client.ProcedureInvocationResult.prototype.isSuccessful;
 /** @type {!Array<string>} */
WL.Client.ProcedureInvocationResult.prototype.errors;
/**
 * @record
 * @struct
 */
WL.Client.ProcedureResponse = function() {};
 /** @type {!WL.Client.ProcedureInvocationResult} */
WL.Client.ProcedureResponse.prototype.invocationResult;
 /** @type {!Array<?>} */
WL.Client.ProcedureResponse.prototype.parameters;
/**
 * @extends {WL.Options}
 * @record
 * @struct
 */
WL.Client.ProcedureInvocationOptions = function() {};
 /** @type {number} */
WL.Client.ProcedureInvocationOptions.prototype.timeout;
 /** @type {function(!WL.Client.ProcedureResponse): void} */
WL.Client.ProcedureInvocationOptions.prototype.onSuccess;

/**
 * @param {string} headerName
 * @param {string} headerValue
 * @return {void}
 */
WL.Client.addGlobalHeader = function(headerName, headerValue) {};

/**
 * @param {!WL.Options} options
 * @return {void}
 */
WL.Client.checkForDirectUpdate = function(options) {};

/**
 * @param {!WL.Client.SharedTokenObject} object
 * @return {!JQueryDeferred<?>}
 */
WL.Client.clearSharedToken = function(object) {};

/**
 * @return {void}
 */
WL.Client.close = function() {};

/**
 * @param {!WL.Client.ConnectOptions=} options
 * @return {void}
 */
WL.Client.connect = function(options) {};

/**
 * @param {string} realmName
 * @return {!WL.Client.AbstractChallengeHandler}
 */
WL.Client.createChallengeHandler = function(realmName) {};

/**
 * @param {string} realmName
 * @return {!WL.Client.AbstractChallengeHandler}
 */
WL.Client.createProvisioningChallengeHandler = function(realmName) {};

/**
 * @param {string} realName
 * @return {!WL.Client.AbstractChallengeHandler}
 */
WL.Client.createWLChallengeHandler = function(realName) {};

/**
 * @param {string} key
 * @param {!WL.Options=} options
 * @return {void}
 */
WL.Client.deleteUserPref = function(key, options) {};

/**
 * See WL.AppProperty for possible results
 * @param {?} property
 * @return {?}
 */
WL.Client.getAppProperty = function(property) {};

/**
 * See WL.Environment for possible results
 * @return {string}
 */
WL.Client.getEnvironment = function() {};

/**
 * @return {string}
 */
WL.Client.getLanguage = function() {};

/**
 * @param {string=} scope
 * @return {string}
 */
WL.Client.getLastAccessToken = function(scope) {};

/**
 * @param {string} realmName
 * @return {string}
 */
WL.Client.getLoginName = function(realmName) {};

/**
 * @deprecated since version 7.0
 * @param {number} status
 * @param {string} header
 * @return {string}
 */
WL.Client.getRequiredAccessTokenScope = function(status, header) {};

/**
 * @param {!WL.Client.SharedTokenObject} object
 * @return {!JQueryDeferred<?>}
 */
WL.Client.getSharedToken = function(object) {};

/**
 * @param {string} realm
 * @param {string} key
 * @return {?}
 */
WL.Client.getUserInfo = function(realm, key) {};

/**
 * @param {?} realm
 * @return {string}
 */
WL.Client.getUserName = function(realm) {};

/**
 * @param {?} key
 * @return {?}
 */
WL.Client.getUserPref = function(key) {};

/**
 * @param {?} key
 * @return {boolean}
 */
WL.Client.hasUserPref = function(key) {};

/**
 * @param {!WL.Client.InitOptions} options
 * @return {void}
 */
WL.Client.init = function(options) {};

/**
 * @param {!WL.Client.ProcedureInvocationData} invocationData
 * @param {!WL.Client.ProcedureInvocationOptions=} options
 * @return {!JQueryDeferred<!WL.Response>}
 */
WL.Client.invokeProcedure = function(invocationData, options) {};

/**
 * @deprecated since version 4.1.3. Use WL.Device.getNetworkInfo instead.
 * @return {void}
 */
WL.Client.isConnected = function() {};

/**
 * @param {string} realm
 * @return {boolean}
 */
WL.Client.isUserAuthenticated = function(realm) {};

/**
 * @deprecated since version 7.0. Use WL.Logger instead.
 * @param {string} activityType
 * @return {void}
 */
WL.Client.logActivity = function(activityType) {};

/**
 * @param {string} realm
 * @param {!WL.Options=} options
 * @return {void}
 */
WL.Client.login = function(realm, options) {};

/**
 * @param {string} realm
 * @param {!WL.Options=} options
 * @return {void}
 */
WL.Client.logout = function(realm, options) {};

/**
 * @return {void}
 */
WL.Client.minimize = function() {};

/**
 * @deprecated since version 7.0
 * @param {string} scope
 * @param {!WL.ResponseHandler<!WL.Response>} onSuccess
 * @param {!WL.ResponseHandler<!WL.FailureResponse>} onFailure
 * @return {void}
 */
WL.Client.obtainAccessToken = function(scope, onSuccess, onFailure) {};

/**
 * @return {void}
 */
WL.Client.purgeEventTransmissionBuffer = function() {};

/**
 * @return {void}
 */
WL.Client.reloadApp = function() {};

/**
 * @param {string} headerName
 * @return {void}
 */
WL.Client.removeGlobalHeader = function(headerName) {};
/**
 * @record
 * @struct
 */
WL.Client.EventTransmissionPolicy = function() {};
 /** @type {boolean} */
WL.Client.EventTransmissionPolicy.prototype.eventStorageEnabled;
 /** @type {number} */
WL.Client.EventTransmissionPolicy.prototype.interval;

/**
 * @param {!WL.Client.EventTransmissionPolicy} policy
 * @return {void}
 */
WL.Client.setEventTransmissionPolicy = function(policy) {};

/**
 * @param {number} interval
 * @return {void}
 */
WL.Client.setHeartBeatInterval = function(interval) {};

/**
 * @param {!WL.Client.SharedTokenObject} token
 * @return {void}
 */
WL.Client.setSharedToken = function(token) {};

/**
 * @param {string} key
 * @param {string} value
 * @param {!WL.Options=} options
 * @return {void}
 */
WL.Client.setUserPref = function(key, value, options) {};
/**
 * @record
 * @struct
 */
WL.Client.UserPreferences = function() {};

/* TODO: IndexSignature: WL.Client */

/**
 * @param {!WL.Client.UserPreferences} userPrefsHash
 * @param {!WL.Options=} options
 * @return {void}
 */
WL.Client.setUserPrefs = function(userPrefsHash, options) {};

/**
 * @param {?} event
 * @param {boolean=} immediate
 * @return {void}
 */
WL.Client.transmitEvent = function(event, immediate) {};

/**
 * @param {!WL.Options} options
 * @return {void}
 */
WL.Client.updateUserInfo = function(options) {};
/** @const */
WL.Device = {};
/**
 * @record
 * @struct
 */
WL.Device.AddressPair = function() {};
 /** @type {string} */
WL.Device.AddressPair.prototype.wifiAddress;

/* TODO: PropertySignature: WL.Device."3GAddress" */
/**
 * @record
 * @struct
 */
WL.Device.NetworkInfo = function() {};
 /** @type {boolean} */
WL.Device.NetworkInfo.prototype.isNetworkConnected;
 /** @type {boolean} */
WL.Device.NetworkInfo.prototype.isAirplaneMode;
 /** @type {boolean} */
WL.Device.NetworkInfo.prototype.isRoaming;
 /** @type {string} */
WL.Device.NetworkInfo.prototype.networkConnectionType;
 /** @type {string} */
WL.Device.NetworkInfo.prototype.wifiName;
 /** @type {string} */
WL.Device.NetworkInfo.prototype.telephonyNetworkType;
 /** @type {string} */
WL.Device.NetworkInfo.prototype.carrierName;
 /** @type {string} */
WL.Device.NetworkInfo.prototype.ipAddress;
 /** @type {!Array<!WL.Device.AddressPair>} */
WL.Device.NetworkInfo.prototype.Ipv4Addresses;
 /** @type {!Array<!WL.Device.AddressPair>} */
WL.Device.NetworkInfo.prototype.Ipv6Addresses;

/**
 * @param {function(!WL.Device.NetworkInfo): void} callback
 * @return {void}
 */
WL.Device.getNetworkInfo = function(callback) {};
/** @const */
WL.EncryptedCache = {};
 /** @type {number} */
WL.EncryptedCache.OK;
 /** @type {number} */
WL.EncryptedCache.ERROR_COULD_NOT_GENERATE_KEY;
 /** @type {number} */
WL.EncryptedCache.ERROR_CREDENTIALS_MISMATCH;
 /** @type {number} */
WL.EncryptedCache.ERROR_EOC_CLOSED;
 /** @type {number} */
WL.EncryptedCache.ERROR_EOC_DELETED;
 /** @type {number} */
WL.EncryptedCache.ERROR_EOC_TO_BE_DELETED;
 /** @type {number} */
WL.EncryptedCache.ERROR_INVALID_PARAMETER;
 /** @type {number} */
WL.EncryptedCache.ERROR_KEY_CREATION_IN_PROGRESS;
 /** @type {number} */
WL.EncryptedCache.ERROR_LOCAL_STORAGE_NOT_SUPPORTED;
 /** @type {number} */
WL.EncryptedCache.ERROR_MIGRATION;
 /** @type {number} */
WL.EncryptedCache.ERROR_NO_EOC;
 /** @type {number} */
WL.EncryptedCache.ERROR_NO_SUCH_KEY;
 /** @type {number} */
WL.EncryptedCache.ERROR_SECURE_RANDOM_GENERATOR_UNAVAILABLE;
 /** @type {number} */
WL.EncryptedCache.ERROR_UNKNOWN;
 /** @type {number} */
WL.EncryptedCache.ERROR_UNSAFE_CREDENTIALS;
/**
 * @record
 * @struct
 */
WL.EncryptedCache.StatusHandler = function() {};

/* TODO: CallSignature: WL.EncryptedCache */

/**
 * @param {!WL.EncryptedCache.StatusHandler} successHandler
 * @param {!WL.EncryptedCache.StatusHandler} failureHandler
 * @return {void}
 */
WL.EncryptedCache.close = function(successHandler, failureHandler) {};

/**
 * @param {!WL.EncryptedCache.StatusHandler} successHandler
 * @param {!WL.EncryptedCache.StatusHandler} failureHandler
 * @return {void}
 */
WL.EncryptedCache.destroy = function(successHandler, failureHandler) {};

/**
 * @param {string} credentials
 * @param {boolean} createIfNone
 * @param {!WL.EncryptedCache.StatusHandler} successHandler
 * @param {!WL.EncryptedCache.StatusHandler} failureHandler
 * @return {void}
 */
WL.EncryptedCache.open = function(credentials, createIfNone, successHandler, failureHandler) {};

/**
 * @param {string} key
 * @param {!WL.EncryptedCache.StatusHandler} successHandler
 * @param {!WL.EncryptedCache.StatusHandler} failureHandler
 * @return {void}
 */
WL.EncryptedCache.read = function(key, successHandler, failureHandler) {};

/**
 * @param {string} key
 * @param {!WL.EncryptedCache.StatusHandler} successHandler
 * @param {!WL.EncryptedCache.StatusHandler} failureHandler
 * @return {void}
 */
WL.EncryptedCache.remove = function(key, successHandler, failureHandler) {};

/**
 * @param {string} key
 * @param {string} value
 * @param {!WL.EncryptedCache.StatusHandler} successHandler
 * @param {!WL.EncryptedCache.StatusHandler} failureHandler
 * @return {void}
 */
WL.EncryptedCache.write = function(key, value, successHandler, failureHandler) {};
/** @const */
WL.Geo = {};
/**
 * @record
 * @struct
 */
WL.Geo.Coordinate = function() {};
 /** @type {number} */
WL.Geo.Coordinate.prototype.latitute;
 /** @type {number} */
WL.Geo.Coordinate.prototype.longitude;
/**
 * @extends {WL.Geo.Coordinate}
 * @record
 * @struct
 */
WL.Geo.Circle = function() {};
 /** @type {number} */
WL.Geo.Circle.prototype.radius;
/**
 * @record
 * @struct
 */
WL.Geo.DistanceOptions = function() {};
 /** @type {number} */
WL.Geo.DistanceOptions.prototype.bufferZoneWidth;
/**
 * @record
 * @struct
 */
WL.Geo.InsideOutsideOptions = function() {};
 /** @type {string} */
WL.Geo.InsideOutsideOptions.prototype.confidenceLevel;

/**
 * @param {!WL.Geo.Coordinate} coordinate1
 * @param {!WL.Geo.Coordinate} coordinate2
 * @return {number}
 */
WL.Geo.getDistanceBetweenCoordinates = function(coordinate1, coordinate2) {};

/**
 * @param {!WL.Geo.Coordinate} coordinate
 * @param {!WL.Geo.Circle} circle
 * @param {!WL.Geo.DistanceOptions} options
 * @return {number}
 */
WL.Geo.getDistanceToCircle = function(coordinate, circle, options) {};

/**
 * @param {!WL.Geo.Coordinate} coordinate
 * @param {!Array<!WL.Geo.Coordinate>} polygon
 * @param {!WL.Geo.DistanceOptions} options
 * @return {number}
 */
WL.Geo.getDistanceToPolygon = function(coordinate, polygon, options) {};

/**
 * @param {!WL.Geo.Coordinate} coordinate
 * @param {!WL.Geo.Circle} circle
 * @param {!WL.Geo.InsideOutsideOptions} options
 * @return {boolean}
 */
WL.Geo.isInsideCircle = function(coordinate, circle, options) {};

/**
 * @param {!WL.Geo.Coordinate} coordinate
 * @param {!Array<!WL.Geo.Coordinate>} polygon
 * @param {!WL.Geo.InsideOutsideOptions} options
 * @return {boolean}
 */
WL.Geo.isInsidePolygon = function(coordinate, polygon, options) {};

/**
 * @param {!WL.Geo.Coordinate} coordinate
 * @param {!WL.Geo.Circle} circle
 * @param {!WL.Geo.InsideOutsideOptions} options
 * @return {boolean}
 */
WL.Geo.isOutsideCircle = function(coordinate, circle, options) {};

/**
 * @param {!WL.Geo.Coordinate} coordinate
 * @param {!Array<!WL.Geo.Coordinate>} polygon
 * @param {!WL.Geo.InsideOutsideOptions} options
 * @return {boolean}
 */
WL.Geo.isOutsidePolygon = function(coordinate, polygon, options) {};
/**
 * @constructor
 * @struct
 */
WL.Item = function() {};

/**
 * @param {string} isEnable
 * @return {void}
 */
WL.Item.prototype.setEnabled = function(isEnable) {};

/**
 * @param {string} imagePath
 * @return {void}
 */
WL.Item.prototype.setImagePath = function(imagePath) {};

/**
 * @param {string} title
 * @return {void}
 */
WL.Item.prototype.setTitle = function(title) {};
/** @const */
WL.JSONStore = {};

/**
 * Changes the password for the internal storage. You must have an initialized collection before calling WL.JSONStore.changePassword.
 * @param {string} oldPassword
 * @param {string} newPassword
 * @param {string} username
 * @param {!WL.Options} options
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.changePassword = function(oldPassword, newPassword, username, options) {};

/**
 * @deprecated since version 5.0.6, it is no longer needed if you use WL.JSONStore.init
 * @return {boolean}
 */
WL.JSONStore.clearPassword = function() {};

/**
 * Locks access to all the collections until WL.JSONStore.init is called.
 * @param {!WL.Options=} options
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.closeAll = function(options) {};

/**
 * Commit a transaction.
 * @return {!JQueryDeferred<number>}
 */
WL.JSONStore.commitTransaction = function() {};

/**
 * Completely wipes data for all users, destroys the internal storage, and clears security artifacts.
 * \@parameters options is \@deprecated
 * @param {string} username
 * @param {!WL.Options=} options
 * @return {!JQueryDeferred<number>}
 */
WL.JSONStore.destroy = function(username, options) {};

/**
 * @deprecated since version 6.2.0.
 * @param {number} id
 * @param {?} data
 * @return {?}
 */
WL.JSONStore.documentify = function(id, data) {};

/**
 * Returns information about the file that is used to persist data in the store. The following key value pairs are returned:
 * name - name of the store
 * size - the total size, in bytes, of the store
 * isEncrypted - boolean that is true when encrypted and false otherwise.
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.fileInfo = function() {};

/**
 * Provides an accessor to the collection if the collection exists, otherwise it returns undefined.
 * @param {string} collectionName
 * @return {!WL.JSONStore.JSONStoreInstance}
 */
WL.JSONStore.get = function(collectionName) {};

/**
 * Returns the message that is associated with a JSONStore error code.
 * @param {number} errorCode
 * @return {string}
 */
WL.JSONStore.getErrorMessage = function(errorCode) {};
/**
 * @record
 * @struct
 */
WL.JSONStore.InitOptions = function() {};
 /** @type {string} */
WL.JSONStore.InitOptions.prototype.username;
 /** @type {string} */
WL.JSONStore.InitOptions.prototype.password;
 /** @type {boolean} */
WL.JSONStore.InitOptions.prototype.clear;
 /** @type {boolean} */
WL.JSONStore.InitOptions.prototype.localKeyGen;
 /** @type {boolean} */
WL.JSONStore.InitOptions.prototype.analytics;

/**
 * @param {?} collections
 * @param {!WL.JSONStore.InitOptions=} options
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.init = function(collections, options) {};

/**
 * @deprecated since version 5.0.6, it is no longer needed if you use WL.JSONStore.init
 * @param {string} name
 * @param {?} searchFields
 * @param {!WL.JSONStore.InitOptions=} options
 * @return {!WL.JSONStore.JSONStoreInstance}
 */
WL.JSONStore.initCollection = function(name, searchFields, options) {};

/**
 * Creates a query for advanced find. See WL.JSONStore.QueryPart for more information.
 * @return {!WL.JSONStore.QueryPartObj}
 */
WL.JSONStore.QueryPart = function() {};

/**
 * Roll back a transaction
 * @return {!JQueryDeferred<number>}
 */
WL.JSONStore.rollbackTransaction = function() {};

/**
 * Initiates a transaction
 * @return {!JQueryDeferred<number>}
 */
WL.JSONStore.startTransaction = function() {};

/**
 * Sets the password that is used to generate keys to encrypt data that is stored locally on the device.
 * @deprecated since version 5.0.6, it is no longer needed if you use WL.JSONStore.init
 * @param {string} pwd
 * @return {boolean}
 */
WL.JSONStore.usePassword = function(pwd) {};
/**
 * @extends {WL.Options}
 * @record
 * @struct
 */
WL.JSONStore.AddOptions = function() {};
 /** @type {?} */
WL.JSONStore.AddOptions.prototype.additionalSearchFields;
 /** @type {boolean} */
WL.JSONStore.AddOptions.prototype.markDirty;
 /** @type {boolean} */
WL.JSONStore.AddOptions.prototype.push;
/**
 * @extends {WL.Options}
 * @record
 * @struct
 */
WL.JSONStore.BasicFindOptions = function() {};
 /** @type {!Array<string>} */
WL.JSONStore.BasicFindOptions.prototype.filter;
 /** @type {!Array<string>} */
WL.JSONStore.BasicFindOptions.prototype.sort;
/**
 * @extends {WL.JSONStore.BasicFindOptions}
 * @record
 * @struct
 */
WL.JSONStore.AdvancedFindOptions = function() {};
 /** @type {number} */
WL.JSONStore.AdvancedFindOptions.prototype.limit;
 /** @type {number} */
WL.JSONStore.AdvancedFindOptions.prototype.offset;
/**
 * @extends {WL.JSONStore.BasicFindOptions}
 * @record
 * @struct
 */
WL.JSONStore.FindOptions = function() {};
 /** @type {boolean} */
WL.JSONStore.FindOptions.prototype.exact;
 /** @type {number} */
WL.JSONStore.FindOptions.prototype.limit;
 /** @type {number} */
WL.JSONStore.FindOptions.prototype.offset;
/**
 * @extends {WL.Options}
 * @record
 * @struct
 */
WL.JSONStore.EraseOptions = function() {};
 /** @type {boolean} */
WL.JSONStore.EraseOptions.prototype.push;
/**
 * @extends {WL.Options}
 * @record
 * @struct
 */
WL.JSONStore.RefreshOptions = function() {};
 /** @type {boolean} */
WL.JSONStore.RefreshOptions.prototype.push;
/**
 * @extends {WL.Options}
 * @record
 * @struct
 */
WL.JSONStore.ChangeOptions = function() {};
 /** @type {boolean} */
WL.JSONStore.ChangeOptions.prototype.addNew;
 /** @type {boolean} */
WL.JSONStore.ChangeOptions.prototype.markDirty;
 /** @type {!Array<string>} */
WL.JSONStore.ChangeOptions.prototype.replaceCriteria;
/**
 * @extends {WL.Options}
 * @record
 * @struct
 */
WL.JSONStore.RemoveOptions = function() {};
 /** @type {boolean} */
WL.JSONStore.RemoveOptions.prototype.markDirty;
 /** @type {boolean} */
WL.JSONStore.RemoveOptions.prototype.push;
 /** @type {boolean} */
WL.JSONStore.RemoveOptions.prototype.exact;
/**
 * @extends {WL.Options}
 * @record
 * @struct
 */
WL.JSONStore.ReplaceOptions = function() {};
 /** @type {boolean} */
WL.JSONStore.ReplaceOptions.prototype.markDirty;
 /** @type {boolean} */
WL.JSONStore.ReplaceOptions.prototype.push;
/**
 * @extends {WL.Options}
 * @record
 * @struct
 */
WL.JSONStore.StoreOptions = function() {};
 /** @type {!Object} */
WL.JSONStore.StoreOptions.prototype.additionalSearchFields;
 /** @type {boolean} */
WL.JSONStore.StoreOptions.prototype.push;
/**
 * @constructor
 * @struct
 */
WL.JSONStore.JSONStoreInstance = function() {};

/**
 * @param {?} data
 * @param {!WL.JSONStore.AddOptions=} options
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.JSONStoreInstance.prototype.add = function(data, options) {};

/**
 * @param {!Array<?>} query
 * @param {!WL.JSONStore.AdvancedFindOptions=} options
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.JSONStoreInstance.prototype.advancedFind = function(query, options) {};

/**
 * @param {?} data
 * @param {!WL.JSONStore.ChangeOptions=} options
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.JSONStoreInstance.prototype.change = function(data, options) {};

/**
 * @param {!WL.Options=} options
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.JSONStoreInstance.prototype.clear = function(options) {};

/**
 * @param {?=} query
 * @param {!WL.Options=} options
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.JSONStoreInstance.prototype.count = function(query, options) {};

/**
 * @param {!WL.Options=} options
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.JSONStoreInstance.prototype.countAllDirty = function(options) {};

/**
 * @param {string} name
 * @param {!Function} fn
 * @return {number}
 */
WL.JSONStore.JSONStoreInstance.prototype.enhance = function(name, fn) {};

/**
 * @deprecated since version 5.0.6, it is no longer needed if you use WL.JSONStore.JSONStoreInstance.remove with {push: false}.
 * @param {?} doc
 * @param {!WL.JSONStore.EraseOptions=} options
 * @return {void}
 */
WL.JSONStore.JSONStoreInstance.prototype.erase = function(doc, options) {};

/**
 * @param {(!Object|!Array<!Object>)} query
 * @param {!WL.JSONStore.FindOptions=} options
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.JSONStoreInstance.prototype.find = function(query, options) {};

/**
 * @param {!WL.JSONStore.BasicFindOptions=} options
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.JSONStoreInstance.prototype.findAll = function(options) {};

/**
 * @param {!WL.Options=} options
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.JSONStoreInstance.prototype.findById = function(options) {};

/**
 * @param {?} doc
 * @param {!WL.Options=} options
 * @return {!JQueryDeferred<boolean>}
 */
WL.JSONStore.JSONStoreInstance.prototype.isDirty = function(doc, options) {};

/**
 * @deprecated since version 6.2.0.
 * @param {!WL.Options=} options
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.JSONStoreInstance.prototype.load = function(options) {};

/**
 * @param {!Array<?>} docs
 * @param {!WL.Options=} options
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.JSONStoreInstance.prototype.markClean = function(docs, options) {};

/**
 * @deprecated since version 6.2.0.
 * @param {?=} options
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.JSONStoreInstance.prototype.push = function(options) {};

/**
 * @deprecated since version 5.0.6, it is no longer needed if you use WL.JSONStore.JSONStoreInstance.push.
 * @param {?} doc
 * @param {!WL.Options=} options
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.JSONStoreInstance.prototype.pushSelected = function(doc, options) {};

/**
 * @deprecated since version 5.0.6. It is no longer needed if you use WL.JSONStore.JSONStoreInstance.replace with {push: false}.
 * @param {?} doc
 * @param {!WL.JSONStore.RefreshOptions=} options
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.JSONStoreInstance.prototype.refresh = function(doc, options) {};

/**
 * @param {?} doc
 * @param {!WL.JSONStore.RemoveOptions=} options
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.JSONStoreInstance.prototype.remove = function(doc, options) {};

/**
 * Deletes all the documents that are stored inside a collection.
 * @param {!WL.Options=} options
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.JSONStoreInstance.prototype.removeCollection = function(options) {};

/**
 * @param {(!Object|!Array<!Object>)} doc
 * @param {!WL.JSONStore.ReplaceOptions=} options
 * @return {!JQueryDeferred<?>}
 */
WL.JSONStore.JSONStoreInstance.prototype.replace = function(doc, options) {};

/**
 * Writes data to a collection.
 * @deprecated since version 5.0.6, it is no longer needed if you use WL.JSONStore.JSONStoreInstance.add with {push: false}.
 * @param {(!Object|!Array<!Object>)} data
 * @param {!WL.JSONStore.StoreOptions=} options
 * @return {void}
 */
WL.JSONStore.JSONStoreInstance.prototype.store = function(data, options) {};

/**
 * @param {number=} limit
 * @param {number=} offset
 * @return {!JQueryDeferred<number>}
 */
WL.JSONStore.JSONStoreInstance.prototype.toString = function(limit, offset) {};
/**
 * @constructor
 * @struct
 */
WL.JSONStore.QueryPartObj = function() {};

/**
 * Add a between clause to a query for advanced find.
 * @param {?} searchField
 * @param {?} value
 * @return {!Array<?>}
 */
WL.JSONStore.QueryPartObj.prototype.between = function(searchField, value) {};

/**
 * Add an equal to clause to a query for advanced find.
 * @param {?} searchField
 * @param {?} value
 * @return {!Array<?>}
 */
WL.JSONStore.QueryPartObj.prototype.equal = function(searchField, value) {};

/**
 * Add a greater or equal thanclause to a query for advanced find.
 * @param {?} searchField
 * @param {?} value
 * @return {!Array<?>}
 */
WL.JSONStore.QueryPartObj.prototype.greaterOrEqualThan = function(searchField, value) {};

/**
 * Add a greater than clause to a query for advanced find.
 * @param {?} searchField
 * @param {?} value
 * @return {!Array<?>}
 */
WL.JSONStore.QueryPartObj.prototype.greaterThan = function(searchField, value) {};

/**
 * Add an in clause to a query for advanced find.
 * @param {?} searchField
 * @param {?} value
 * @return {!Array<?>}
 */
WL.JSONStore.QueryPartObj.prototype.inside = function(searchField, value) {};

/**
 * Add a left clause to a query for advanced find.
 * @param {?} searchField
 * @param {?} value
 * @return {!Array<?>}
 */
WL.JSONStore.QueryPartObj.prototype.leftLike = function(searchField, value) {};

/**
 * Add a less or equal than clause to a query for advanced find.
 * @param {?} searchField
 * @param {?} value
 * @return {!Array<?>}
 */
WL.JSONStore.QueryPartObj.prototype.lessOrEqualThan = function(searchField, value) {};

/**
 * Add a less than clause to a query for advanced find.
 * @param {?} searchField
 * @param {?} value
 * @return {!Array<?>}
 */
WL.JSONStore.QueryPartObj.prototype.lessThan = function(searchField, value) {};

/**
 * Add a like clause to a query for advanced find.
 * @param {?} searchField
 * @param {?} value
 * @return {!Array<?>}
 */
WL.JSONStore.QueryPartObj.prototype.like = function(searchField, value) {};

/**
 * Add a not between clause to a query for advanced find.
 * @param {?} searchField
 * @param {?} value
 * @return {!Array<?>}
 */
WL.JSONStore.QueryPartObj.prototype.notBetween = function(searchField, value) {};

/**
 * Add a not equal to clause to a query for advanced find.
 * @param {?} searchField
 * @param {?} value
 * @return {!Array<?>}
 */
WL.JSONStore.QueryPartObj.prototype.notEqual = function(searchField, value) {};

/**
 * Add a not in clause to a query for advanced find.
 * @param {?} searchField
 * @param {?} value
 * @return {!Array<?>}
 */
WL.JSONStore.QueryPartObj.prototype.notInside = function(searchField, value) {};

/**
 * Add a not left clause to a query for advanced find.
 * @param {?} searchField
 * @param {?} value
 * @return {!Array<?>}
 */
WL.JSONStore.QueryPartObj.prototype.notLeftLike = function(searchField, value) {};

/**
 * Add a not like clause to a query for advanced find.
 * @param {?} searchField
 * @param {?} value
 * @return {!Array<?>}
 */
WL.JSONStore.QueryPartObj.prototype.notLike = function(searchField, value) {};

/**
 * Add a not right clause to a query for advanced find.
 * @param {?} searchField
 * @param {?} value
 * @return {!Array<?>}
 */
WL.JSONStore.QueryPartObj.prototype.notRightLike = function(searchField, value) {};

/**
 * Add a right clause to a query for advanced find.
 * @param {?} searchField
 * @param {?} value
 * @return {!Array<?>}
 */
WL.JSONStore.QueryPartObj.prototype.rightLike = function(searchField, value) {};
/** @const */
WL.LocalStorage = {};

/**
 * @param {string} key
 * @return {string}
 */
WL.LocalStorage.getValue = function(key) {};

/**
 * @param {string} key
 * @param {string} value
 * @return {void}
 */
WL.LocalStorage.setValue = function(key, value) {};

/**
 * @param {string} key
 * @return {void}
 */
WL.LocalStorage.clear = function(key) {};

/**
 * @return {void}
 */
WL.LocalStorage.clearAll = function() {};
 /** @type {!WL.LoggerObject} */
WL.Logger;
/**
 * @record
 * @struct
 */
WL.LoggerCallback = function() {};

/* TODO: CallSignature: WL */
/**
 * @record
 * @struct
 */
WL.Tag = function() {};
 /** @type {boolean} */
WL.Tag.prototype.level;
 /** @type {boolean} */
WL.Tag.prototype.tag;
/**
 * @record
 * @struct
 */
WL.Filter = function() {};

/* TODO: IndexSignature: WL */
/**
 * @record
 * @struct
 */
WL.LoggerOptions = function() {};
 /** @type {boolean} */
WL.LoggerOptions.prototype.stringify;
 /** @type {boolean} */
WL.LoggerOptions.prototype.pretty;
 /** @type {boolean} */
WL.LoggerOptions.prototype.stacktrace;
 /** @type {!WL.LoggerCallback} */
WL.LoggerOptions.prototype.callback;
 /** @type {string} */
WL.LoggerOptions.prototype.pkg;
 /** @type {!WL.Tag} */
WL.LoggerOptions.prototype.tag;
 /** @type {!Array<string>} */
WL.LoggerOptions.prototype.whitelist;
 /** @type {!Array<string>} */
WL.LoggerOptions.prototype.blacklist;
 /** @type {!WL.Filter} */
WL.LoggerOptions.prototype.filters;
 /** @type {boolean} */
WL.LoggerOptions.prototype.capture;
 /** @type {boolean} */
WL.LoggerOptions.prototype.autoSendLogs;
 /** @type {number} */
WL.LoggerOptions.prototype.maxFileSize;
 /** @type {(string|number|!Array<string>)} */
WL.LoggerOptions.prototype.level;
/**
 * @record
 * @struct
 */
WL.NativeOptions = function() {};
 /** @type {number} */
WL.NativeOptions.prototype.maxFileSize;
 /** @type {string} */
WL.NativeOptions.prototype.level;
 /** @type {boolean} */
WL.NativeOptions.prototype.capture;
 /** @type {boolean} */
WL.NativeOptions.prototype.autoSendLogs;
 /** @type {boolean} */
WL.NativeOptions.prototype.autoUpdateConfig;
 /** @type {!WL.Filter} */
WL.NativeOptions.prototype.filters;
/**
 * @constructor
 * @struct
 */
WL.LoggerObject = function() {};

/**
 * Configures the logger globally.
 * @param {!WL.LoggerOptions=} options
 * @return {!WL.LoggerObject}
 */
WL.LoggerObject.prototype.config = function(options) {};

/**
 * Creates an instance of a logger with its own context (also called status or state).
 * @param {!WL.LoggerOptions=} options
 * @return {!WL.LogInstance}
 */
WL.LoggerObject.prototype.create = function(options) {};

/**
 * Updates the state (also called context or status) of the logger.
 * @param {!WL.LoggerOptions=} options
 * @return {!WL.LoggerObject}
 */
WL.LoggerObject.prototype.ctx = function(options) {};

/**
 * Prints arguments to the console.
 * @param {string} message
 * @return {void}
 */
WL.LoggerObject.prototype.debug = function(message) {};

/**
 * Prints arguments to the console.
 * @param {string} message
 * @return {void}
 */
WL.LoggerObject.prototype.error = function(message) {};

/**
 * Prints arguments to the console.
 * @param {string} message
 * @return {void}
 */
WL.LoggerObject.prototype.fatal = function(message) {};

/**
 * Prints arguments to the console.
 * @param {string} message
 * @return {void}
 */
WL.LoggerObject.prototype.info = function(message) {};

/**
 * Prints arguments to the console.
 * @param {string} message
 * @return {void}
 */
WL.LoggerObject.prototype.log = function(message) {};

/**
 * Attach additional metadata to the next logger instance call.
 * @param {?} options
 * @return {!WL.LoggerObject}
 */
WL.LoggerObject.prototype.metadata = function(options) {};

/**
 * @deprecated since version 6.2. WL.Logger.on is now a no-op. WL.Logger is always enabled. Use WL.Logger.config with {'level': 'FATAL'} to reduce verbosity.
 * @return {!WL.LoggerObject}
 */
WL.LoggerObject.prototype.off = function() {};

/**
 * @deprecated since version 6.2. WL.Logger.on is now a no-op. WL.Logger is always enabled. Use WL.Logger.config with {'level': 'FATAL'} to reduce verbosity.
 * @param {?} options
 * @return {!WL.LoggerObject}
 */
WL.LoggerObject.prototype.on = function(options) {};

/**
 * Send any logs collected up to this point to the IBM® Worklight® server.
 * @return {!JQueryDeferred<?>}
 */
WL.LoggerObject.prototype.send = function() {};

/**
 * @deprecated since version 6.2. Use WL.Logger.config instead. Sets options in native application layer (iOS and Android only)
 * @param {!WL.NativeOptions=} options
 * @return {void}
 */
WL.LoggerObject.prototype.setNativeOptions = function(options) {};

/**
 * Shows the status (current configuration) of the logger.
 * @return {!JQueryDeferred<?>}
 */
WL.LoggerObject.prototype.status = function() {};

/**
 * Prints arguments to the console.
 * @param {string} message
 * @return {void}
 */
WL.LoggerObject.prototype.trace = function(message) {};

/**
 * Retrieves and applies any matching configuration profile from the IBM® Worklight® Server.
 * @return {!JQueryDeferred<?>}
 */
WL.LoggerObject.prototype.updateConfigFromServer = function() {};

/**
 * Prints arguments to the console.
 * @param {string} message
 * @return {void}
 */
WL.LoggerObject.prototype.warn = function(message) {};
/**
 * @constructor
 * @struct
 */
WL.LogInstance = function() {};

/**
 * @param {string} message
 * @return {void}
 */
WL.LogInstance.prototype.debug = function(message) {};

/**
 * @param {string} message
 * @return {void}
 */
WL.LogInstance.prototype.error = function(message) {};

/**
 * @param {string} message
 * @return {void}
 */
WL.LogInstance.prototype.fatal = function(message) {};

/**
 * @param {string} message
 * @return {void}
 */
WL.LogInstance.prototype.info = function(message) {};

/**
 * @param {string} message
 * @return {void}
 */
WL.LogInstance.prototype.trace = function(message) {};

/**
 * @param {string} message
 * @return {void}
 */
WL.LogInstance.prototype.warn = function(message) {};
/** @const */
WL.NativePage = {};

/**
 * @param {string} className
 * @param {function(?): void} callback
 * @param {?} data
 * @return {void}
 */
WL.NativePage.show = function(className, callback, data) {};
/** @const */
WL.SecurityUtils = {};
/**
 * @record
 * @struct
 */
WL.SecurityUtils.DecryptOptions = function() {};
 /** @type {string} */
WL.SecurityUtils.DecryptOptions.prototype.key;
 /** @type {string} */
WL.SecurityUtils.DecryptOptions.prototype.ct;
 /** @type {string} */
WL.SecurityUtils.DecryptOptions.prototype.lv;
 /** @type {string} */
WL.SecurityUtils.DecryptOptions.prototype.src;
 /** @type {string} */
WL.SecurityUtils.DecryptOptions.prototype.v;
/**
 * @record
 * @struct
 */
WL.SecurityUtils.EncryptOptions = function() {};
 /** @type {string} */
WL.SecurityUtils.EncryptOptions.prototype.key;
 /** @type {string} */
WL.SecurityUtils.EncryptOptions.prototype.text;
/**
 * @record
 * @struct
 */
WL.SecurityUtils.KeygenOptions = function() {};
 /** @type {string} */
WL.SecurityUtils.KeygenOptions.prototype.password;
 /** @type {string} */
WL.SecurityUtils.KeygenOptions.prototype.salt;
 /** @type {number} */
WL.SecurityUtils.KeygenOptions.prototype.iterations;

/**
 * @param {string} input
 * @return {!JQueryDeferred<string>}
 */
WL.SecurityUtils.base64Decode = function(input) {};

/**
 * @param {string} input
 * @return {!JQueryDeferred<string>}
 */
WL.SecurityUtils.base64Encode = function(input) {};

/**
 * @param {!WL.SecurityUtils.DecryptOptions} options
 * @return {!JQueryDeferred<string>}
 */
WL.SecurityUtils.decrypt = function(options) {};

/**
 * @param {!WL.SecurityUtils.EncryptOptions} options
 * @return {!JQueryDeferred<string>}
 */
WL.SecurityUtils.encrypt = function(options) {};

/**
 * @param {!WL.SecurityUtils.KeygenOptions} options
 * @return {!JQueryDeferred<string>}
 */
WL.SecurityUtils.keygen = function(options) {};

/**
 * @param {number=} bytes
 * @return {!JQueryDeferred<string>}
 */
WL.SecurityUtils.localRandomString = function(bytes) {};

/**
 * @param {number=} bytes
 * @return {!JQueryDeferred<string>}
 */
WL.SecurityUtils.remoteRandomString = function(bytes) {};
/** @const */
WL.SimpleDialog = {};
/**
 * @record
 * @struct
 */
WL.SimpleDialog.Button = function() {};
 /** @type {string} */
WL.SimpleDialog.Button.prototype.text;
 /** @type {!Function} */
WL.SimpleDialog.Button.prototype.handler;
/**
 * @record
 * @struct
 */
WL.SimpleDialog.Options = function() {};
 /** @type {string} */
WL.SimpleDialog.Options.prototype.title;
 /** @type {string} */
WL.SimpleDialog.Options.prototype.text;

/**
 * @param {string} title
 * @param {string} text
 * @param {!Array<!WL.SimpleDialog.Button>} buttons
 * @param {!WL.SimpleDialog.Options=} options
 * @return {void}
 */
WL.SimpleDialog.show = function(title, text, buttons, options) {};
/** @const */
WL.TabBar = {};
/**
 * @record
 * @struct
 */
WL.TabBar.ItemOptions = function() {};
 /** @type {string} */
WL.TabBar.ItemOptions.prototype.image;
 /** @type {string} */
WL.TabBar.ItemOptions.prototype.badge;
 /** @type {string} */
WL.TabBar.ItemOptions.prototype.imageSelected;

/**
 * @param {string} id
 * @param {!Function} callback
 * @param {string} title
 * @param {!WL.TabBar.ItemOptions} options
 * @return {!WL.TabBarItem}
 */
WL.TabBar.addItem = function(id, callback, title, options) {};

/**
 * @return {void}
 */
WL.TabBar.init = function() {};

/**
 * @return {boolean}
 */
WL.TabBar.isVisible = function() {};

/**
 * @return {void}
 */
WL.TabBar.RemoveAllItems = function() {};

/**
 * @param {boolean} isEnabled
 * @return {void}
 */
WL.TabBar.setEnabled = function(isEnabled) {};

/**
 * @deprecated
 * @param {string} parentId
 * @return {void}
 */
WL.TabBar.setParentDivId = function(parentId) {};

/**
 * @param {string} id
 * @return {void}
 */
WL.TabBar.setSelectedItem = function(id) {};

/**
 * @param {boolean} isVisible
 * @return {void}
 */
WL.TabBar.setVisible = function(isVisible) {};
/**
 * @constructor
 * @struct
 */
WL.TabBarItem = function() {};

/**
 * @param {boolean} isEnabled
 * @return {void}
 */
WL.TabBarItem.prototype.setEnabled = function(isEnabled) {};

/**
 * @param {string=} badge
 * @return {void}
 */
WL.TabBarItem.prototype.updateBadge = function(badge) {};
/** @const */
WL.Toast = {};

/**
 * @return {void}
 */
WL.Toast.show = function() {};
/** @const */
WL.Trusteer = {};
/**
 * @record
 * @struct
 */
WL.Trusteer.AssesmentRisk = function() {};
 /** @type {number} */
WL.Trusteer.AssesmentRisk.prototype.value;
 /** @type {string} */
WL.Trusteer.AssesmentRisk.prototype.additionalData;
 /** @type {number} */
WL.Trusteer.AssesmentRisk.prototype.lastCalculated;
 /** @type {string} */
WL.Trusteer.AssesmentRisk.prototype.name;
/**
 * @record
 * @struct
 */
WL.Trusteer.AssetmentRisks = function() {};
 /** @type {string} */
WL.Trusteer.AssetmentRisks.prototype.device_key;

/* TODO: PropertySignature: WL.Trusteer.'malware.any' */

/* TODO: PropertySignature: WL.Trusteer.'network.wifi' */

/* TODO: PropertySignature: WL.Trusteer.'os.rooted' */

/* TODO: PropertySignature: WL.Trusteer.'os.rooted.native' */

/* TODO: PropertySignature: WL.Trusteer.'os.rooted.hiders' */

/* TODO: PropertySignature: WL.Trusteer.'os.ver_up_to_date' */

/* TODO: PropertySignature: WL.Trusteer.'plat.android.dumpsys' */

/* TODO: PropertySignature: WL.Trusteer.'plat.android.apprestrict' */

/* TODO: PropertySignature: WL.Trusteer.'total.risk.generic' */

/* TODO: PropertySignature: WL.Trusteer.'tas.config_update' */

/**
 * @param {!WL.ResponseHandler<!WL.Response>} onSuccess
 * @param {!WL.ResponseHandler<!WL.FailureResponse>} onFailure
 * @return {!WL.Trusteer.AssetmentRisks}
 */
WL.Trusteer.getRiskAssessment = function(onSuccess, onFailure) {};
/** @const */
WL.UserAuth = {};

/**
 * @param {string=} provisioningEntity
 * @return {!JQueryDeferred<void>}
 */
WL.UserAuth.deleteCertificate = function(provisioningEntity) {};
/** @const */
var WLAuthorizationManager = {};
 /** @type {string} */
WLAuthorizationManager.ALWAYS;
 /** @type {string} */
WLAuthorizationManager.NEVER;
/**
 * @record
 * @struct
 */
WLAuthorizationManager.RequestObject = function() {};
 /** @type {function(string, string): void} */
WLAuthorizationManager.RequestObject.prototype.setRequestHeader;

/**
 * @param {!WLAuthorizationManager.RequestObject} request
 * @return {!JQueryDeferred<!WLAuthorizationManager.RequestObject>}
 */
WLAuthorizationManager.addCachedAuthorizationHeader = function(request) {};

/**
 * @return {!JQueryDeferred<?>}
 */
WLAuthorizationManager.getAppIdentity = function() {};

/**
 * @param {string} responseAuthenticationHeader
 * @return {string}
 */
WLAuthorizationManager.getAuthorizationScope = function(responseAuthenticationHeader) {};

/**
 * TODO: Set Promise types. Should be something like: JQueryDeferred<data, error>()
 * @return {!JQueryDeferred<?>}
 */
WLAuthorizationManager.getCachedAuthorizationHeader = function() {};

/**
 * TODO: Set Promise types. Should be something like: JQueryDeferred<data, error>()
 * @return {!JQueryDeferred<?>}
 */
WLAuthorizationManager.getDeviceIdentity = function() {};

/**
 * TODO: Set Promise types. Should be something like: JQueryDeferred<data, error>()
 * @return {!JQueryDeferred<?>}
 */
WLAuthorizationManager.getUserIdentity = function() {};

/**
 * @param {number} responseStatus
 * @param {string} responseAuthenticationHeader
 * @return {boolean}
 */
WLAuthorizationManager.isAuthorizationRequired = function(responseStatus, responseAuthenticationHeader) {};

/**
 * TODO: Set Promise types. Should be something like: JQueryDeferred<header, error>()
 * @param {string} scope
 * @return {!JQueryDeferred<?>}
 */
WLAuthorizationManager.obtainAuthorizationHeader = function(scope) {};

/**
 * See WLAuthorizarionManager.NEVER and WLAuthorizarionManager.ALWAYS
 * @param {string} authorizationPersistencePolicy
 * @return {void}
 */
WLAuthorizationManager.setAuthorizationPersistencePolicy = function(authorizationPersistencePolicy) {};
 /** @type {!Object<string,string>} */
WL.ClientMessages;

/**
 * @constructor
 * @struct
 * @param {string} url
 * @param {string} method
 * @param {number=} timeout
 */
function WLResourceRequest(url, method, timeout) {}
 /** @type {string} */
WLResourceRequest.GET;
 /** @type {string} */
WLResourceRequest.POST;
 /** @type {string} */
WLResourceRequest.PUT;
 /** @type {string} */
WLResourceRequest.DELETE;
 /** @type {string} */
WLResourceRequest.HEAD;
 /** @type {string} */
WLResourceRequest.OPTIONS;
 /** @type {string} */
WLResourceRequest.TRACE;
 /** @type {string} */
WLResourceRequest.CONNECT;

/**
 * @param {string} name
 * @param {(string|number|boolean)} value
 * @return {void}
 */
WLResourceRequest.prototype.addHeader = function(name, value) {};

/**
 * @param {string} name
 * @return {string}
 */
WLResourceRequest.prototype.getHeader = function(name) {};

/**
 * @return {!Array<string>}
 */
WLResourceRequest.prototype.getHeaderNames = function() {};

/**
 * @param {string} name
 * @return {!Array<string>}
 */
WLResourceRequest.prototype.getHeaders = function(name) {};

/**
 * @return {string}
 */
WLResourceRequest.prototype.getMethod = function() {};

/**
 * @return {?}
 */
WLResourceRequest.prototype.getQueryParameters = function() {};

/**
 * @return {number}
 */
WLResourceRequest.prototype.getTimeout = function() {};

/**
 * @return {string}
 */
WLResourceRequest.prototype.getUrl = function() {};

/**
 * @param {?=} content
 * @return {!JQueryDeferred<?>}
 */
WLResourceRequest.prototype.send = function(content) {};

/**
 * @param {!Object} json
 * @return {!JQueryDeferred<?>}
 */
WLResourceRequest.prototype.sendFormParameters = function(json) {};

/**
 * @param {string} name
 * @param {(string|number|boolean)} value
 * @return {void}
 */
WLResourceRequest.prototype.setHeader = function(name, value) {};

/**
 * @param {!Object<string,(string|!Array<string>)>=} requestHeaders
 * @return {void}
 */
WLResourceRequest.prototype.setHeaders = function(requestHeaders) {};

/**
 * @param {string} name
 * @param {(string|number|boolean|!Object)} value
 * @return {void}
 */
WLResourceRequest.prototype.setQueryParameter = function(name, value) {};

/**
 * @param {!Object<string,(string|number|boolean|!Object)>=} parameters
 * @return {void}
 */
WLResourceRequest.prototype.setQueryParameters = function(parameters) {};

/**
 * @param {number} requestTimeout
 * @return {void}
 */
WLResourceRequest.prototype.setTimeout = function(requestTimeout) {};
