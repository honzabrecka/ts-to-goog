/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/sap__xsenv/index.d.ts:

/**
 * @param {string=} jsonFile
 * @return {void}
 */
function loadEnv(jsonFile) {}

/**
 * @return {?}
 */
function readCFServices() {}

/** @typedef {(string|?)} */
var ServiceFilter;

/**
 * Reads service configuration from CloudFoundry environment variable <code>VCAP_SERVICES</code>.
 * 
 * @throws Error in case no or multiple matching services are found
 * @param {(string|?)} filter Filter used to find a bound Cloud Foundry service, see filterCFServices
 * @return {?} credentials property of found service
 */
function cfServiceCredentials(filter) {}

/**
 * Returns an array of Cloud Foundry services matching the given filter.
 * 
 * @param {(string|?)} filter {(string|Object|function)}
 *  - if string, returns the service with the same service instance name (name property)
 *  - if Object, should have some of these properties [name, label, tag, plan] and returns all services
 *    where all of the given properties match. Given tag matches if it is present in the tags array.
 *  - if function, should take a service object as argument and return true only if it matches the filter
 * @return {?} Arrays of matching service objects, empty if no matches
 */
function filterCFServices(filter) {}

/**
 * Looks up and returns bound Cloud Foundry services.
 * 
 * If a service is not found in VCAP_SERVICES, returns default service configuration loaded from a JSON file.
 * 
 * @throws Error, if for some of the requested services no or multiple instances are found; Error, if query parameter is not provided
 * @param {?} query {object} describes requested Cloud Foundry services, each property value is a filter
 *  as described in filterCFServices.
 * @param {string=} servicesFile {string} path to JSON file to load default service configuration (default is default-services.json).
 *  If null, do not load default service configuration.
 * 
 *  property is the respective service credentials object.
 * @return {?}
 */
function getServices(query, servicesFile) {}

/**
 * @deprecated use loadCertificates instead
 * @return {void}
 */
function loadCaCert() {}

/**
 * @param {string=} certPath
 * @return {?}
 */
function loadCertificates(certPath) {}
