/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/xdomain/index.d.ts:
/**
 * @record
 * @struct
 */
function XDomainCookies() {}
 /** @type {string} */
XDomainCookies.prototype.master;
 /** @type {string} */
XDomainCookies.prototype.slave;
/**
 * @record
 * @struct
 */
function IXDomain() {}
 /** @type {string} */
IXDomain.prototype.origin;
 /** @type {boolean} */
IXDomain.prototype.debug;
 /** @type {!XDomainCookies} */
IXDomain.prototype.cookies;

/**
 * Will initialize as a master
 * 
 * Each of the slaves must be defined as: origin: proxy file
 * 
 * The slaves object is used as a list slaves to force one proxy file per origin.
 * @param {!Object} slaveObj
 * @return {void}
 */
IXDomain.prototype.slaves = function(slaveObj) {};

/**
 * Will initialize as a slave
 * 
 * Each of the masters must be defined as: origin: path
 * 
 * origin and path are converted to a regular expression by escaping all non-alphanumeric chars, then converting * into .* and finally wrapping it with ^ and $. path can also be a RegExp literal.
 * 
 * Requests that do not match both the origin and the path regular expressions will be blocked.
 * @param {!Object} masterObj
 * @return {void}
 */
IXDomain.prototype.masters = function(masterObj) {};

/**
 * event may be log, warn or timeout. When listening for log and warn events, handler with contain the message as
 * the first parameter. The timeout event fires when an iframe exeeds the xdomain.timeout time limit.
 * @param {string} event
 * @param {function(string): ?} handler
 * @return {void}
 */
IXDomain.prototype.on = function(event, handler) {};
 /** @type {!IXDomain} */
var xdomain;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "xdomain"
/** @const */
tsickle_declare_module.xdomain = {};
 /** @type {!IXDomain} */
tsickle_declare_module.xdomain.xdomain;
