/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/vast-client/index.d.ts:
 /** @type {?} */
var client;
 /** @type {?} */
var parser;

/**
 * @constructor
 * @struct
 * The VAST tracker constructor will process the tracking URLs of the selected ad/creative and returns an instance of VASTTracker.
 * You can create an instance with new DMVAST.tracker( ad , creative ).
 * 
 * Object ad – Reference to the <Ad> element of the selected mediaFile
 * Object creative – Reference to the <Creative> element of the selected mediaFile
 * Object variationd -  An optional reference to the selected <NonLinear>/<Companion> element for non-linear ads
 * @param {?} ad
 * @param {?} creative
 * @param {?=} companion
 */
function tracker(ad, creative, companion) {}

/**
 * Add a listener function for the specified event.
 * 
 * eventName – Name of the event to attach the listener to. See events below for all details.
 * listener – Method to be called when the event is emitted.
 * @param {string} eventName
 * @param {?} listener
 * @return {void}
 */
tracker.prototype.on = function(eventName, listener) {};

/**
 * Remove a listener function for the specified event.
 * 
 * eventName – Name of the event.
 * listener – Method to remove. Will remove all listeners for the given event if no specific callback is passed.
 * @param {string} eventName
 * @param {?=} listener
 * @return {void}
 */
tracker.prototype.off = function(eventName, listener) {};

/**
 * Remove all listener functions for the specified event.
 * 
 * eventName – Name of the event.
 * @param {string} eventName
 * @return {void}
 */
tracker.prototype.removeAllListeners = function(eventName) {};

/**
 * Update the current time value. This is required for tracking time related events such as start, firstQuartile, midpoint, thirdQuartile or rewind.
 * 
 * progess – Current playback time in seconds.
 * @param {number} progress
 * @return {void}
 */
tracker.prototype.setProgress = function(progress) {};

/**
 * Update the mute state and call the mute/unmute tracking URLs. Emit a mute or unmute event.
 * 
 * muted – Indicate if the video is muted or not.
 * @param {boolean} muted
 * @return {void}
 */
tracker.prototype.setMuted = function(muted) {};

/**
 * Update the pause state and call the resume/pause tracking URLs. Emit a resume or pause event.
 * 
 * paused – Indicate if the video is paused or not.
 * @param {boolean} paused
 * @return {void}
 */
tracker.prototype.setPaused = function(paused) {};

/**
 * Update the fullscreen state and call the fullscreen tracking URLs. Emit a fullscreen or exitFullscreen event.
 * 
 * fullscreen – Indicate the fullscreen mode.
 * @param {boolean} fullscreen
 * @return {void}
 */
tracker.prototype.setFullscreen = function(fullscreen) {};

/**
 * Update the expand state and call the expand/collapse tracking URLs. Emit a expand or collapse event
 * 
 * Boolean expanded – Indicate if the video is expanded or no
 * @param {boolean} expanded
 * @return {void}
 */
tracker.prototype.setExpand = function(expanded) {};

/**
 * Must be called if you want to overwrite the <Linear> Skipoffset value. This will init the skip countdown duration.
 * Then, every time you call setProgress(), it will decrease the countdown and emit a skip-countdown event with the remaining time.
 * Do not call this method if you want to keep the original Skipoffset value.
 * 
 * duration – The time in seconds until the skip button is displayed.
 * @param {number} duration
 * @return {void}
 */
tracker.prototype.setSkipDelay = function(duration) {};

/**
 * Report the impression URI. Can only be called once. Will report the following URI:
 * 
 * - All <Impression> URI from the <InLine> and <Wrapper> tracking elements.
 * - The creativeView URI from the <Tracking> events
 * 
 * Once done, a creativeView event is emitted.
 * @return {void}
 */
tracker.prototype.load = function() {};

/**
 * Send a request to the URI provided by the VAST <Error> element. If an [ERRORCODE] macro is included, it will be substitute with code.
 * 
 * code – Replaces [ERRORCODE] macro. [ERRORCODE] values are liste in the VAST specification.
 * @param {string} code
 * @return {void}
 */
tracker.prototype.errorWithCode = function(code) {};

/**
 * Must be called when the user watched the linear creative until its end. Call the complete tracking URLs. Emit a complete events when done.
 * @return {void}
 */
tracker.prototype.complete = function() {};

/**
 * Must be called when the player or the window is closed during the ad. Call the closeLinear (in VAST 3.0) and close tracking URLs. Emit a closeLinear or a close event when done.
 * @return {void}
 */
tracker.prototype.close = function() {};

/**
 * Must be called when the skip button is clicked. Call the skip tracking URLs. Emit a skip event when done.
 * @return {void}
 */
tracker.prototype.skip = function() {};

/**
 * Must be called when the user clicks on the creative. Call the tracking URLs. Emit a clickthrough event with the resolved clickThrough URL when done.
 * @return {void}
 */
tracker.prototype.click = function() {};
/**
 * @record
 * @struct
 */
function VastClient() {}
 /** @type {number} */
VastClient.prototype.cappingFreeLunch;
 /** @type {number} */
VastClient.prototype.cappingMinimumTimeInterval;

/**
 * Fetch a URL and parse the response into a valid VAST object.
 * 
 * String url – Contains the URL for fetching the VAST XML document.
 * Object options – An optional set of key/value to configure the Ajax request:
 *      String response – A VAST XML document. When response is provided, no Ajax request is made and thus the url parameter is ignored
 *      Object urlhandler – A URL handler module, used to fetch the VAST document instead of the default ones.
 *      Boolean withCredentials – A boolean to enable the withCredentials options for the XHR and FLASH URLHandlers.
 *      Number wrapperLimit – A number of available Wrapper responses that can be received with no InLine response.
 * Function done – Method to be called once the VAST document is parsed. The VAST JS object is passed as the 1st parameter. If null, an error is provided as a 2nd parameter.
 * @param {string} url
 * @param {?} done_or_options
 * @param {?=} done
 * @return {void}
 */
VastClient.prototype.get = function(url, done_or_options, done) {};
/**
 * @record
 * @struct
 */
function VastParser() {}

/**
 * Add the replace function at the end of the URLTemplateFilters array.
 * All functions in URLTemplateFilters will be called with the VAST URL as parameter before fetching the VAST URL document.
 * @param {?} cb
 * @return {void}
 */
VastParser.prototype.addURLTemplateFilter = function(cb) {};

/**
 * Reset URLTemplateFilters to empty, previous replace function set with addURLTemplateFilter() are no longer called.
 * @return {void}
 */
VastParser.prototype.clearUrlTemplateFilters = function() {};

/**
 * Returns how many replace function are set (ie: URLTemplateFilters length)
 * @return {number}
 */
VastParser.prototype.countURLTemplateFilters = function() {};

/**
 * Parse an VAST xml, resolve any wrappers and execute callback function done
 * 
 * String XMLDocument – A VAST XML document.
 * Object options – An optional set of key/value to configure the Ajax request:
 *      Object urlhandler – A URL handler module, used to fetch VASTAdTagURI URL. If defined, will be used instead of the default ones.
 *      Boolean withCredentials – A boolean to enable the withCredentials options for the XHR and FLASH URLHandlers.
 *      Number wrapperLimit – A number of available Wrapper responses that can be received with no InLine response.
 * Function done – Method to be called once the VAST document is parsed. When at least 1 valid <inline> has been found, the 1st parameter will be an array of VASTAd instances.
 * Hoverwise, in case of no ads, it will be null, and an error as a 2nd parameter is provided.
 * @param {string} xml
 * @param {?} done_or_options
 * @param {?=} done
 * @return {void}
 */
VastParser.prototype.load = function(xml, done_or_options, done) {};

/**
 * Add the listener function for the event named eventName. eventName value can be :
 * 
 * String VAST-error – emitted when the parser encountered a VAST error (ie: no ads, warapper timeout...).
 * The VAST error code is passed to the listener function as a parameter.
 * @param {string} eventName
 * @param {?} listener
 * @return {void}
 */
VastParser.prototype.on = function(eventName, listener) {};

/**
 * Add a one time listener function for the event named eventName.
 * @param {string} eventName
 * @param {?} listener
 * @return {void}
 */
VastParser.prototype.once = function(eventName, listener) {};

/**
 * Fetch a URL and parse the response into a valid VAST object.
 * 
 * String url – The VAST XML document URL to fetch.
 * Object options – An optional set of key/value to configure the Ajax request:
 *      Object urlhandler – A URL handler module, used to fetch the VAST document instead of the default ones.
 *      Boolean withCredentials – A boolean to enable the withCredentials options for the XHR and FLASH URLHandlers.
 *      Number wrapperLimit – A number of available Wrapper responses that can be received with no InLine response.
 * Function done – Method to be called once the VAST document is parsed. When at least 1 valid <inline> has been found, the 1st parameter will be an array of VASTAd instances.
 * Hoverwise, in case of no ads, it will be null, and an error as a 2nd parameter is provided.
 * @param {string} url
 * @param {?} done_or_options
 * @param {?=} done
 * @return {void}
 */
VastParser.prototype.parse = function(url, done_or_options, done) {};

/**
 * Remove the specified listener for the event named eventName.
 * @param {string} eventName
 * @param {?} listener
 * @return {void}
 */
VastParser.prototype.off = function(eventName, listener) {};

/**
 * Remove replace function from URLTemplateFilters array.
 * Replace function won't be called on the next VAST URL encountred by the parser.
 * @param {?} cb
 * @return {void}
 */
VastParser.prototype.removeURLTemplateFilter = function(cb) {};
/**
 * @record
 * @struct
 */
function VastRequestOptions() {}
 /** @type {string} */
VastRequestOptions.prototype.response;
 /** @type {?} */
VastRequestOptions.prototype.urlhandler;
 /** @type {boolean} */
VastRequestOptions.prototype.withCredentials;
 /** @type {number} */
VastRequestOptions.prototype.wrapperLimit;
/**
 * @record
 * @struct
 */
function VastResponse() {}
 /** @type {!Array<?>} */
VastResponse.prototype.ads;
 /** @type {!Array<string>} */
VastResponse.prototype.errorURLTemplates;
/**
 * @record
 * @struct
 */
function VastError() {}
 /** @type {string} */
VastError.prototype.ERRORCODE;
/**
 * @record
 * @struct
 */
function VastCreative() {}
 /** @type {string} */
VastCreative.prototype.id;
 /** @type {string} */
VastCreative.prototype.adId;
 /** @type {?} */
VastCreative.prototype.trackingEvents;
 /** @type {?} */
VastCreative.prototype.apiFramework;
 /** @type {?} */
VastCreative.prototype.sequence;
 /** @type {string} */
VastCreative.prototype.type;
/**
 * @extends {VastCreative}
 * @record
 * @struct
 */
function VastCreativeLinear() {}
 /** @type {?} */
VastCreativeLinear.prototype.adParameters;
 /** @type {number} */
VastCreativeLinear.prototype.duration;
 /** @type {!Array<string>} */
VastCreativeLinear.prototype.icons;
 /** @type {!Array<?>} */
VastCreativeLinear.prototype.mediaFiles;
 /** @type {boolean} */
VastCreativeLinear.prototype.skipDelay;
 /** @type {string} */
VastCreativeLinear.prototype.videoClickThroughURLTemplate;
 /** @type {!Array<string>} */
VastCreativeLinear.prototype.videoClickTrackingURLTemplates;
 /** @type {!Array<string>} */
VastCreativeLinear.prototype.videoCustomClickURLTempaltes;
/**
 * @extends {VastCreative}
 * @record
 * @struct
 */
function VastCreativeNonLinear() {}
 /** @type {!Array<?>} */
VastCreativeNonLinear.prototype.variations;
/**
 * @extends {VastCreative}
 * @record
 * @struct
 */
function VastCreativeCompanion() {}
 /** @type {!Array<?>} */
VastCreativeCompanion.prototype.variations;
/**
 * @record
 * @struct
 */
function VastAd() {}
 /** @type {?} */
VastAd.prototype.advertiser;
 /** @type {!Array<?>} */
VastAd.prototype.creatives;
 /** @type {string} */
VastAd.prototype.description;
 /** @type {!Array<string>} */
VastAd.prototype.errorURLTemplates;
 /** @type {!Array<?>} */
VastAd.prototype.extensions;
 /** @type {string} */
VastAd.prototype.id;
 /** @type {!Array<string>} */
VastAd.prototype.impressionURLTemplates;
 /** @type {?} */
VastAd.prototype.pricing;
 /** @type {string} */
VastAd.prototype.sequence;
 /** @type {?} */
VastAd.prototype.survey;
 /** @type {?} */
VastAd.prototype.system;
 /** @type {string} */
VastAd.prototype.title;
 /** @type {boolean} */
VastAd.prototype.hasHLS;
/**
 * @record
 * @struct
 */
function VastAdExtension() {}
 /** @type {?} */
VastAdExtension.prototype.attributes;
 /** @type {!Array<?>} */
VastAdExtension.prototype.children;
/**
 * @record
 * @struct
 */
function VastAdAttributes() {}
 /** @type {string} */
VastAdAttributes.prototype.type;
/**
 * @record
 * @struct
 */
function VastAdExtensionChild() {}
 /** @type {?} */
VastAdExtensionChild.prototype.attributes;
 /** @type {string} */
VastAdExtensionChild.prototype.name;
 /** @type {string} */
VastAdExtensionChild.prototype.value;
/**
 * @record
 * @struct
 */
function VastAdChildAttributes() {}
 /** @type {string} */
VastAdChildAttributes.prototype.name;
/**
 * @record
 * @struct
 */
function VastNonLinearAd() {}
 /** @type {!Array<string>} */
VastNonLinearAd.prototype.nonLinearClickTrackingURLTemplates;
 /** @type {string} */
VastNonLinearAd.prototype.nonLinearClickThroughURLTemplate;
 /** @type {string} */
VastNonLinearAd.prototype.adParameters;
 /** @type {string} */
VastNonLinearAd.prototype.type;
 /** @type {string} */
VastNonLinearAd.prototype.iframeResource;
 /** @type {string} */
VastNonLinearAd.prototype.htmlResource;
 /** @type {string} */
VastNonLinearAd.prototype.id;
 /** @type {string} */
VastNonLinearAd.prototype.width;
 /** @type {string} */
VastNonLinearAd.prototype.height;
 /** @type {string} */
VastNonLinearAd.prototype.expandedWidth;
 /** @type {string} */
VastNonLinearAd.prototype.expandedHeight;
 /** @type {boolean} */
VastNonLinearAd.prototype.scalablle;
 /** @type {boolean} */
VastNonLinearAd.prototype.maintainAspectRatio;
 /** @type {number} */
VastNonLinearAd.prototype.minSuggestedDuration;
 /** @type {?} */
VastNonLinearAd.prototype.apiFramework;
/**
 * @record
 * @struct
 */
function VastCompanionAd() {}
 /** @type {string} */
VastCompanionAd.prototype.companionClickThroughURLTemplate;
 /** @type {string} */
VastCompanionAd.prototype.companionClickTrackingURLTemplate;
 /** @type {!Array<string>} */
VastCompanionAd.prototype.companionClickTrackingURLTemplates;
 /** @type {string} */
VastCompanionAd.prototype.height;
 /** @type {string} */
VastCompanionAd.prototype.htmlResource;
 /** @type {string} */
VastCompanionAd.prototype.id;
 /** @type {string} */
VastCompanionAd.prototype.iframeResource;
 /** @type {string} */
VastCompanionAd.prototype.staticResource;
 /** @type {?} */
VastCompanionAd.prototype.trackingEvents;
 /** @type {string} */
VastCompanionAd.prototype.type;
 /** @type {string} */
VastCompanionAd.prototype.width;
/**
 * @record
 * @struct
 */
function VastCompanionTrackingEvents() {}
 /** @type {!Array<string>} */
VastCompanionTrackingEvents.prototype.creativeView;
/**
 * @record
 * @struct
 */
function VastMediaFile() {}
 /** @type {?} */
VastMediaFile.prototype.apiFramework;
 /** @type {number} */
VastMediaFile.prototype.bitrate;
 /** @type {string} */
VastMediaFile.prototype.codec;
 /** @type {string} */
VastMediaFile.prototype.deliveryType;
 /** @type {string} */
VastMediaFile.prototype.fileURL;
 /** @type {number} */
VastMediaFile.prototype.height;
 /** @type {string} */
VastMediaFile.prototype.id;
 /** @type {boolean} */
VastMediaFile.prototype.maintainAspectRatio;
 /** @type {number} */
VastMediaFile.prototype.maxBitrate;
 /** @type {string} */
VastMediaFile.prototype.mimeType;
 /** @type {number} */
VastMediaFile.prototype.minBitrate;
 /** @type {?} */
VastMediaFile.prototype.scalable;
 /** @type {number} */
VastMediaFile.prototype.width;
/**
 * @record
 * @struct
 */
function VastTrackingEvents() {}
 /** @type {!Array<string>} */
VastTrackingEvents.prototype.complete;
 /** @type {!Array<string>} */
VastTrackingEvents.prototype.firstQuartile;
 /** @type {!Array<string>} */
VastTrackingEvents.prototype.midpoint;
 /** @type {!Array<string>} */
VastTrackingEvents.prototype.thirdQuartile;
/**
 * @record
 * @struct
 */
function VastSystem() {}
 /** @type {string} */
VastSystem.prototype.value;
 /** @type {string} */
VastSystem.prototype.version;
