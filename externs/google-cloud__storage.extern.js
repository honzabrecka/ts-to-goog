/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/google-cloud__storage/index.d.ts:

/* TODO: ImportDeclaration in  */

/** @typedef {?} */
var PromiseLibrary;
/** @const */
var Storage = {};

/**
 * @constructor
 * @struct
 * @param {!Storage.Storage} storage
 * @param {string} name
 */
Storage.Bucket = function(storage, name) {};
 /** @type {!Storage.Acl} */
Storage.Bucket.prototype.acl;
 /** @type {string} */
Storage.Bucket.prototype.id;
 /** @type {!Storage.Iam} */
Storage.Bucket.prototype.iam;
 /** @type {!Storage.BucketMetadata} */
Storage.Bucket.prototype.metadata;
 /** @type {string} */
Storage.Bucket.prototype.name;

/**
 * @param {(!Array<string>|!Array<!Storage.File>)} sources
 * @param {(!Array<string>|!Array<!Storage.File>)} destination
 * @return {!Promise<!Array<?>>}
 */
Storage.Bucket.prototype.combine = function(sources, destination) {};

/**
 * @param {!Storage.BucketConfig=} config
 * @return {!Promise<!Array<?>>}
 */
Storage.Bucket.prototype.create = function(config) {};

/**
 * @param {string} id
 * @param {!Storage.ChannelConfig} config
 * @return {!Promise<!Array<?>>}
 */
Storage.Bucket.prototype.createChannel = function(id, config) {};

/**
 * @return {!Promise<!Array<?>>}
 */
Storage.Bucket.prototype.delete = function() {};

/**
 * @param {!Storage.BucketQuery=} query
 * @return {!Promise<void>}
 */
Storage.Bucket.prototype.deleteFiles = function(query) {};

/**
 * @return {!Promise<!Array<?>>}
 */
Storage.Bucket.prototype.exists = function() {};

/**
 * @param {string} name
 * @param {!Storage.BucketFileOptions=} options
 * @return {!Storage.File}
 */
Storage.Bucket.prototype.file = function(name, options) {};

/**
 * @param {!Storage.BucketGetOptions=} options
 * @return {!Promise<!Array<?>>}
 */
Storage.Bucket.prototype.get = function(options) {};

/**
 * @param {!Storage.BucketQuery=} query
 * @return {!Promise<!Array<?>>}
 */
Storage.Bucket.prototype.getFiles = function(query) {};

/**
 * @param {!Storage.BucketQuery=} query
 * @return {!ReadStream}
 */
Storage.Bucket.prototype.getFilesStream = function(query) {};

/**
 * @return {!Promise<!Array<?>>}
 */
Storage.Bucket.prototype.getMetadata = function() {};

/**
 * @param {!Storage.BucketPrivacyOptions=} options
 * @return {!Promise<!Array<?>>}
 */
Storage.Bucket.prototype.makePrivate = function(options) {};

/**
 * @param {!Storage.BucketPrivacyOptions=} options
 * @return {!Promise<!Array<?>>}
 */
Storage.Bucket.prototype.makePublic = function(options) {};

/**
 * @param {!Storage.BucketMetadata=} metadata
 * @return {!Promise<!Array<?>>}
 */
Storage.Bucket.prototype.setMetadata = function(metadata) {};

/**
 * @param {string} localPath
 * @param {!Storage.UploadOptions=} options
 * @return {!Promise<!Array<?>>}
 */
Storage.Bucket.prototype.upload = function(localPath, options) {};
/**
 * @record
 * @struct
 */
Storage.BucketConfig = function() {};
 /** @type {boolean} */
Storage.BucketConfig.prototype.coldline;
 /** @type {boolean} */
Storage.BucketConfig.prototype.dra;
 /** @type {string} */
Storage.BucketConfig.prototype.location;
 /** @type {boolean} */
Storage.BucketConfig.prototype.multiRegional;
 /** @type {boolean} */
Storage.BucketConfig.prototype.nearline;
 /** @type {boolean} */
Storage.BucketConfig.prototype.regional;
 /** @type {{enabled: boolean}} */
Storage.BucketConfig.prototype.versioning;
/**
 * @record
 * @struct
 */
Storage.BucketFileOptions = function() {};
 /** @type {(string|number)} */
Storage.BucketFileOptions.prototype.generation;
/**
 * @record
 * @struct
 */
Storage.BucketGetOptions = function() {};
 /** @type {boolean} */
Storage.BucketGetOptions.prototype.autoCreate;
/**
 * @record
 * @struct
 */
Storage.BucketMetadata = function() {};
 /** @type {string} */
Storage.BucketMetadata.prototype.etag;
 /** @type {string} */
Storage.BucketMetadata.prototype.id;
 /** @type {string} */
Storage.BucketMetadata.prototype.kind;
 /** @type {string} */
Storage.BucketMetadata.prototype.location;
 /** @type {string} */
Storage.BucketMetadata.prototype.metageneration;
 /** @type {string} */
Storage.BucketMetadata.prototype.name;
 /** @type {string} */
Storage.BucketMetadata.prototype.projectNumber;
 /** @type {string} */
Storage.BucketMetadata.prototype.selfLink;
 /** @type {string} */
Storage.BucketMetadata.prototype.storageClass;
 /** @type {string} */
Storage.BucketMetadata.prototype.timeCreated;
 /** @type {string} */
Storage.BucketMetadata.prototype.updated;
/**
 * @record
 * @struct
 */
Storage.BucketPrivacyOptions = function() {};
 /** @type {boolean} */
Storage.BucketPrivacyOptions.prototype.includeFiles;
 /** @type {boolean} */
Storage.BucketPrivacyOptions.prototype.force;
/**
 * @record
 * @struct
 */
Storage.BucketQuery = function() {};
 /** @type {boolean} */
Storage.BucketQuery.prototype.autoPaginate;
 /** @type {string} */
Storage.BucketQuery.prototype.delimiter;
 /** @type {string} */
Storage.BucketQuery.prototype.prefix;
 /** @type {number} */
Storage.BucketQuery.prototype.maxApiCalls;
 /** @type {number} */
Storage.BucketQuery.prototype.maxResults;
 /** @type {string} */
Storage.BucketQuery.prototype.pageToken;
 /** @type {boolean} */
Storage.BucketQuery.prototype.versions;
/**
 * @record
 * @struct
 */
Storage.ContentLengthRange = function() {};
 /** @type {number} */
Storage.ContentLengthRange.prototype.max;
 /** @type {number} */
Storage.ContentLengthRange.prototype.min;

/**
 * @constructor
 * @struct
 * @param {!Storage.Bucket} bucket
 * @param {string} name
 * @param {!Storage.BucketFileOptions=} options
 */
Storage.File = function(bucket, name, options) {};
 /** @type {!Storage.Acl} */
Storage.File.prototype.acl;
 /** @type {string} */
Storage.File.prototype.name;
 /** @type {!Storage.FileMetadata} */
Storage.File.prototype.metadata;

/**
 * @param {(string|!Storage.Bucket|!Storage.File)} destination
 * @return {!Promise<!Array<?>>}
 */
Storage.File.prototype.copy = function(destination) {};

/**
 * @param {!Storage.ReadStreamOptions=} options
 * @return {!ReadStream}
 */
Storage.File.prototype.createReadStream = function(options) {};

/**
 * @param {!Storage.WriteStreamOptions=} options
 * @return {!WriteStream}
 */
Storage.File.prototype.createWriteStream = function(options) {};

/**
 * @return {!Promise<!Array<?>>}
 */
Storage.File.prototype.delete = function() {};

/**
 * @param {!Storage.DownloadOptions=} options
 * @return {!Promise<!Array<?>>}
 */
Storage.File.prototype.download = function(options) {};

/**
 * @return {!Promise<!Array<?>>}
 */
Storage.File.prototype.exists = function() {};

/**
 * @return {!Promise<!Array<?>>}
 */
Storage.File.prototype.get = function() {};

/**
 * @return {!Promise<!Array<?>>}
 */
Storage.File.prototype.getMetadata = function() {};

/**
 * @param {!Storage.SignedPolicyOptions=} options
 * @return {!Promise<!Array<?>>}
 */
Storage.File.prototype.getSignedPolicy = function(options) {};

/**
 * @param {!Storage.SignedUrlConfig=} config
 * @return {!Promise<!Array<?>>}
 */
Storage.File.prototype.getSignedUrl = function(config) {};

/**
 * @param {!Storage.FilePrivateOptions=} options
 * @return {!Promise<!Array<?>>}
 */
Storage.File.prototype.makePrivate = function(options) {};

/**
 * @return {!Promise<!Array<?>>}
 */
Storage.File.prototype.makePublic = function() {};

/**
 * @param {(string|!Storage.Bucket|!Storage.File)} destination
 * @return {!Promise<!Array<?>>}
 */
Storage.File.prototype.move = function(destination) {};

/**
 * @param {string} data
 * @param {!Storage.WriteStreamOptions=} options
 * @return {!Promise<void>}
 */
Storage.File.prototype.save = function(data, options) {};

/**
 * @param {(string|?)} encryptionKey
 * @return {!Storage.File}
 */
Storage.File.prototype.setEncryptionKey = function(encryptionKey) {};

/**
 * @param {!Storage.FileMetadata} metadata
 * @return {!Promise<!Array<?>>}
 */
Storage.File.prototype.setMetadata = function(metadata) {};
/**
 * @record
 * @struct
 */
Storage.FileMetadata = function() {};
 /** @type {string} */
Storage.FileMetadata.prototype.contentType;
/**
 * @record
 * @struct
 */
Storage.FilePrivateOptions = function() {};
 /** @type {boolean} */
Storage.FilePrivateOptions.prototype.strict;
/**
 * @record
 * @struct
 */
Storage.SignedPolicy = function() {};
 /** @type {string} */
Storage.SignedPolicy.prototype.base64;
 /** @type {string} */
Storage.SignedPolicy.prototype.signature;
 /** @type {string} */
Storage.SignedPolicy.prototype.string;
/**
 * @record
 * @struct
 */
Storage.SignedPolicyOptions = function() {};
 /** @type {string} */
Storage.SignedPolicyOptions.prototype.acl;
 /** @type {!Storage.ContentLengthRange} */
Storage.SignedPolicyOptions.prototype.contentLengthRange;
 /** @type {(!Array<string>|!Array<?>)} */
Storage.SignedPolicyOptions.prototype.equals;
 /** @type {(string|number)} */
Storage.SignedPolicyOptions.prototype.expires;
 /** @type {number} */
Storage.SignedPolicyOptions.prototype.max;
 /** @type {number} */
Storage.SignedPolicyOptions.prototype.min;
 /** @type {(!Array<string>|!Array<?>)} */
Storage.SignedPolicyOptions.prototype.startsWith;
 /** @type {string} */
Storage.SignedPolicyOptions.prototype.successRedirect;
 /** @type {string} */
Storage.SignedPolicyOptions.prototype.successStatus;
/**
 * @record
 * @struct
 */
Storage.SignedUrlConfig = function() {};
 /** @type {string} */
Storage.SignedUrlConfig.prototype.action;
 /** @type {string} */
Storage.SignedUrlConfig.prototype.cname;
 /** @type {string} */
Storage.SignedUrlConfig.prototype.contentMd5;
 /** @type {string} */
Storage.SignedUrlConfig.prototype.contentType;
 /** @type {(string|number)} */
Storage.SignedUrlConfig.prototype.expires;
 /** @type {!Object<string,string>} */
Storage.SignedUrlConfig.prototype.extensionHeaders;
 /** @type {string} */
Storage.SignedUrlConfig.prototype.promptSaveAs;
 /** @type {string} */
Storage.SignedUrlConfig.prototype.responseDisposition;
 /** @type {string} */
Storage.SignedUrlConfig.prototype.responseType;
/**
 * @extends {Storage.AclActions}
 * @record
 * @struct
 */
Storage.Acl = function() {};
 /** @type {!Storage.AclEntity} */
Storage.Acl.prototype.default;
 /** @type {!Storage.AclEntity} */
Storage.Acl.prototype.owners;
 /** @type {!Storage.AclEntity} */
Storage.Acl.prototype.readers;
 /** @type {!Storage.AclEntity} */
Storage.Acl.prototype.writers;
/**
 * @record
 * @struct
 */
Storage.AclActions = function() {};

/**
 * @param {!Storage.AclOptions} options
 * @return {!Promise<!Array<?>>}
 */
Storage.AclActions.prototype.add = function(options) {};

/**
 * @param {!Storage.AclOptions} options
 * @return {!Promise<!Array<?>>}
 */
Storage.AclActions.prototype.delete = function(options) {};

/**
 * @param {!Storage.AclOptions} options
 * @return {!Promise<!Array<?>>}
 */
Storage.AclActions.prototype.get = function(options) {};

/**
 * @param {!Storage.AclOptions} options
 * @return {!Promise<!Array<?>>}
 */
Storage.AclActions.prototype.update = function(options) {};
/**
 * @extends {Storage.AclActions}
 * @record
 * @struct
 */
Storage.AclEntity = function() {};

/**
 * @return {!Promise<!Array<?>>}
 */
Storage.AclEntity.prototype.addAllAuthenticatedUsers = function() {};

/**
 * @return {!Promise<!Array<?>>}
 */
Storage.AclEntity.prototype.addAllUsers = function() {};

/**
 * @param {string} entity
 * @return {!Promise<!Array<?>>}
 */
Storage.AclEntity.prototype.addDomain = function(entity) {};

/**
 * @param {string} entity
 * @return {!Promise<!Array<?>>}
 */
Storage.AclEntity.prototype.addGroup = function(entity) {};

/**
 * @param {string} entity
 * @return {!Promise<!Array<?>>}
 */
Storage.AclEntity.prototype.addProject = function(entity) {};

/**
 * @param {string} entity
 * @return {!Promise<!Array<?>>}
 */
Storage.AclEntity.prototype.addUser = function(entity) {};

/**
 * @return {!Promise<!Array<?>>}
 */
Storage.AclEntity.prototype.deleteAllAuthenticatedUsers = function() {};

/**
 * @return {!Promise<!Array<?>>}
 */
Storage.AclEntity.prototype.deleteAllUsers = function() {};

/**
 * @param {string} entity
 * @return {!Promise<!Array<?>>}
 */
Storage.AclEntity.prototype.deleteDomain = function(entity) {};

/**
 * @param {string} entity
 * @return {!Promise<!Array<?>>}
 */
Storage.AclEntity.prototype.deleteGroup = function(entity) {};

/**
 * @param {string} entity
 * @return {!Promise<!Array<?>>}
 */
Storage.AclEntity.prototype.deleteProject = function(entity) {};

/**
 * @param {string} entity
 * @return {!Promise<!Array<?>>}
 */
Storage.AclEntity.prototype.deleteUser = function(entity) {};
/**
 * @record
 * @struct
 */
Storage.AclOptions = function() {};
 /** @type {string} */
Storage.AclOptions.prototype.entity;
 /** @type {string} */
Storage.AclOptions.prototype.role;
 /** @type {number} */
Storage.AclOptions.prototype.generation;
/**
 * @record
 * @struct
 */
Storage.ApiResponse = function() {};
 /** @type {string} */
Storage.ApiResponse.prototype.etag;
 /** @type {string} */
Storage.ApiResponse.prototype.id;
 /** @type {string} */
Storage.ApiResponse.prototype.kind;
 /** @type {string} */
Storage.ApiResponse.prototype.location;
 /** @type {string} */
Storage.ApiResponse.prototype.metageneration;
 /** @type {string} */
Storage.ApiResponse.prototype.name;
 /** @type {string} */
Storage.ApiResponse.prototype.projectNumber;
 /** @type {string} */
Storage.ApiResponse.prototype.selfLink;
 /** @type {string} */
Storage.ApiResponse.prototype.storageClass;
 /** @type {string} */
Storage.ApiResponse.prototype.timeCreated;
 /** @type {string} */
Storage.ApiResponse.prototype.updated;
/**
 * @record
 * @struct
 */
Storage.Credentials = function() {};
 /** @type {string} */
Storage.Credentials.prototype.client_email;
 /** @type {string} */
Storage.Credentials.prototype.private_key;
/**
 * @record
 * @struct
 */
Storage.ConfigurationObject = function() {};
 /** @type {boolean} */
Storage.ConfigurationObject.prototype.autoRetry;
 /** @type {!Storage.Credentials} */
Storage.ConfigurationObject.prototype.credentials;
 /** @type {string} */
Storage.ConfigurationObject.prototype.email;
 /** @type {string} */
Storage.ConfigurationObject.prototype.keyFilename;
 /** @type {number} */
Storage.ConfigurationObject.prototype.maxRetries;
 /** @type {string} */
Storage.ConfigurationObject.prototype.projectId;
 /** @type {?} */
Storage.ConfigurationObject.prototype.promise;
/**
 * @extends {Storage.ReadStreamOptions}
 * @record
 * @struct
 */
Storage.DownloadOptions = function() {};
 /** @type {string} */
Storage.DownloadOptions.prototype.destination;
/**
 * @record
 * @struct
 */
Storage.ReadStreamOptions = function() {};
 /** @type {number} */
Storage.ReadStreamOptions.prototype.end;
 /** @type {number} */
Storage.ReadStreamOptions.prototype.start;
 /** @type {(string|boolean)} */
Storage.ReadStreamOptions.prototype.validation;
/**
 * @extends {Storage.WriteStreamOptions}
 * @record
 * @struct
 */
Storage.UploadOptions = function() {};
 /** @type {string} */
Storage.UploadOptions.prototype.destination;
/**
 * @record
 * @struct
 */
Storage.WriteStreamOptions = function() {};
 /** @type {boolean} */
Storage.WriteStreamOptions.prototype.gzip;
 /** @type {!Storage.FileMetadata} */
Storage.WriteStreamOptions.prototype.metadata;
 /** @type {number} */
Storage.WriteStreamOptions.prototype.offset;
 /** @type {string} */
Storage.WriteStreamOptions.prototype.predefinedAcl;
 /** @type {boolean} */
Storage.WriteStreamOptions.prototype.private;
 /** @type {boolean} */
Storage.WriteStreamOptions.prototype.public;
 /** @type {boolean} */
Storage.WriteStreamOptions.prototype.resumable;
 /** @type {string} */
Storage.WriteStreamOptions.prototype.uri;
 /** @type {(string|boolean)} */
Storage.WriteStreamOptions.prototype.validation;

/**
 * @constructor
 * @struct
 * @param {!Storage.ConfigurationObject=} config
 */
Storage.Storage = function(config) {};
 /** @type {!Storage.Acl} */
Storage.Storage.prototype.acl;
 /** @type {function(!Storage.Storage, string, string): !Storage.Channel} */
Storage.Storage.prototype.Channel;
 /** @type {function(!Storage.Bucket, string, !Storage.BucketFileOptions): !Storage.File} */
Storage.Storage.prototype.File;
 /** @type {function(!Storage.Storage, string): !Storage.Bucket} */
Storage.Storage.prototype.Bucket;

/**
 * @param {(string|!Storage.Bucket)} name
 * @return {!Storage.Bucket}
 */
Storage.Storage.prototype.bucket = function(name) {};

/**
 * @param {string} id
 * @param {string} resourceId
 * @return {!Storage.Channel}
 */
Storage.Storage.prototype.channel = function(id, resourceId) {};

/**
 * @param {string} name
 * @param {!Storage.BucketConfig=} metadata
 * @return {!Promise<!Array<?>>}
 */
Storage.Storage.prototype.createBucket = function(name, metadata) {};

/**
 * @param {!Storage.BucketQuery=} query
 * @return {!Promise<!Array<?>>}
 */
Storage.Storage.prototype.getBuckets = function(query) {};

/**
 * @param {!Storage.BucketQuery=} query
 * @return {!Promise<!Array<?>>}
 */
Storage.Storage.prototype.getBucketsStream = function(query) {};

/**
 * @constructor
 * @struct
 * @param {!Storage.Storage} storage
 * @param {string} id
 * @param {string} resourceId
 */
Storage.Channel = function(storage, id, resourceId) {};

/**
 * @return {!Promise<!Array<?>>}
 */
Storage.Channel.prototype.stop = function() {};
/**
 * @record
 * @struct
 */
Storage.ChannelConfig = function() {};
 /** @type {string} */
Storage.ChannelConfig.prototype.address;
/**
 * @constructor
 * @struct
 */
Storage.Iam = function() {};

/**
 * @return {!Promise<!Storage.IamPolicy>}
 */
Storage.Iam.prototype.getPolicy = function() {};

/**
 * @param {!Storage.IamPolicy} policy
 * @return {!Promise<!Array<?>>}
 */
Storage.Iam.prototype.setPolicy = function(policy) {};

/**
 * @param {(string|!Array<string>)} permission
 * @return {!Promise<!Array<?>>}
 */
Storage.Iam.prototype.testPermissions = function(permission) {};
/**
 * @record
 * @struct
 */
Storage.IamPolicy = function() {};
 /** @type {!Array<!Storage.IamBinding>} */
Storage.IamPolicy.prototype.bindings;
/**
 * @record
 * @struct
 */
Storage.IamBinding = function() {};
 /** @type {string} */
Storage.IamBinding.prototype.role;
 /** @type {!Array<string>} */
Storage.IamBinding.prototype.members;

/**
 * @param {!Storage.ConfigurationObject=} config
 * @return {!Storage.Storage}
 */
function Storage(config) {}

/* TODO: ExportAssignment in  */
