/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/ftp/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */
/** @const */
var Client = {};
/**
 * @record
 * @struct
 */
Client.Options = function() {};
 /** @type {string} */
Client.Options.prototype.host;
 /** @type {number} */
Client.Options.prototype.port;
 /** @type {(string|boolean)} */
Client.Options.prototype.secure;
 /** @type {!ConnectionOptions} */
Client.Options.prototype.secureOptions;
 /** @type {string} */
Client.Options.prototype.user;
 /** @type {string} */
Client.Options.prototype.password;
 /** @type {number} */
Client.Options.prototype.connTimeout;
 /** @type {number} */
Client.Options.prototype.pasvTimeout;
 /** @type {number} */
Client.Options.prototype.keepalive;
/**
 * @record
 * @struct
 */
Client.ListingElement = function() {};

/* TODO: PropertySignature: Client."type" */
 /** @type {string} */
Client.ListingElement.prototype.name;
 /** @type {string} */
Client.ListingElement.prototype.size;
 /** @type {!Date} */
Client.ListingElement.prototype.date;
 /** @type {{user: string, group: string, other: string}} */
Client.ListingElement.prototype.rights;
 /** @type {string} */
Client.ListingElement.prototype.owner;
 /** @type {string} */
Client.ListingElement.prototype.group;
 /** @type {string} */
Client.ListingElement.prototype.target;
 /** @type {boolean} */
Client.ListingElement.prototype.sticky;

/**
 * Connects to an FTP server.
 * @param {!Client.Options=} config
 * @return {void}
 */
Client.prototype.connect = function(config) {};

/**
 * Closes the connection to the server after any/all enqueued commands have been executed.
 * @return {void}
 */
Client.prototype.end = function() {};

/**
 * Closes the connection to the server immediately.
 * @return {void}
 */
Client.prototype.destroy = function() {};

/**
 * Retrieves the directory listing of path.
 * @param {string|boolean|function(!Error, !Array<!Client.ListingElement>): void} path_or_useCompression_or_callback defaults to the current working directory.
 * @param {boolean|function(!Error, !Array<!Client.ListingElement>): void=} useCompression_or_callback defaults to false.
 * @param {function(!Error, !Array<!Client.ListingElement>): void=} callback
 * @return {void}
 */
Client.prototype.list = function(path_or_useCompression_or_callback, useCompression_or_callback, callback) {};

/**
 * Retrieves a file at path from the server. useCompression defaults to false
 * @param {string} path
 * @param {function(!Error, !NodeJS.ReadableStream): void|boolean} callback_or_useCompression
 * @param {function(!Error, !NodeJS.ReadableStream): void=} callback
 * @return {void}
 */
Client.prototype.get = function(path, callback_or_useCompression, callback) {};

/**
 * Sends data to the server to be stored as destPath.
 * @param {(string|!NodeJS.ReadableStream|?)} input can be a ReadableStream, a Buffer, or a path to a local file.
 * @param {string} destPath
 * @param {boolean|function(!Error): void} useCompression_or_callback defaults to false.
 * @param {function(!Error): void=} callback
 * @return {void}
 */
Client.prototype.put = function(input, destPath, useCompression_or_callback, callback) {};

/**
 * Same as put(), except if destPath already exists, it will be appended to instead of overwritten.
 * @param {(string|!NodeJS.ReadableStream|?)} input can be a ReadableStream, a Buffer, or a path to a local file.
 * @param {string} destPath
 * @param {boolean|function(!Error): void} useCompression_or_callback defaults to false.
 * @param {function(!Error): void=} callback
 * @return {void}
 */
Client.prototype.append = function(input, destPath, useCompression_or_callback, callback) {};

/**
 * Renames oldPath to newPath on the server
 * @param {string} oldPath
 * @param {string} newPath
 * @param {function(!Error): void} callback
 * @return {void}
 */
Client.prototype.rename = function(oldPath, newPath, callback) {};

/**
 * Logout the user from the server.
 * @param {function(!Error): void} callback
 * @return {void}
 */
Client.prototype.logout = function(callback) {};

/**
 * Delete a file on the server
 * @param {string} path
 * @param {function(!Error): void} callback
 * @return {void}
 */
Client.prototype.delete = function(path, callback) {};

/**
 * Changes the current working directory to path. callback has 2 parameters: < Error >err, < string >currentDir.
 * Note: currentDir is only given if the server replies with the path in the response text.
 * @param {string} path
 * @param {function(!Error, string): void} callback
 * @return {void}
 */
Client.prototype.cwd = function(path, callback) {};

/**
 * Aborts the current data transfer (e.g. from get(), put(), or list())
 * @param {function(!Error): void} callback
 * @return {void}
 */
Client.prototype.abort = function(callback) {};

/**
 * Sends command (e.g. 'CHMOD 755 foo', 'QUOTA') using SITE. callback has 3 parameters:
 * < Error >err, < _string >responseText, < integer >responseCode.
 * @param {string} command
 * @param {function(!Error, string, number): void} callback
 * @return {void}
 */
Client.prototype.site = function(command, callback) {};

/**
 * Retrieves human-readable information about the server's status.
 * @param {function(!Error, string): void} callback
 * @return {void}
 */
Client.prototype.status = function(callback) {};

/**
 * Sets the transfer data type to ASCII.
 * @param {function(!Error): void} callback
 * @return {void}
 */
Client.prototype.ascii = function(callback) {};

/**
 * Sets the transfer data type to binary (default at time of connection).
 * @param {function(!Error): void} callback
 * @return {void}
 */
Client.prototype.binary = function(callback) {};

/**
 * Optional "standard" commands (RFC 959)
 * Creates a new directory, path, on the server. recursive is for enabling a 'mkdir -p' algorithm and defaults to false
 * @param {string} path
 * @param {boolean|function(!Error): void} recursive_or_callback
 * @param {function(!Error): void=} callback
 * @return {void}
 */
Client.prototype.mkdir = function(path, recursive_or_callback, callback) {};

/**
 * Optional "standard" commands (RFC 959)
 * Removes a directory, path, on the server. If recursive, this call will delete the contents of the directory if it is not empty
 * @param {string} path
 * @param {boolean|function(!Error): void} recursive_or_callback
 * @param {function(!Error): void=} callback
 * @return {void}
 */
Client.prototype.rmdir = function(path, recursive_or_callback, callback) {};

/**
 * Optional "standard" commands (RFC 959)
 * Changes the working directory to the parent of the current directory
 * @param {function(!Error): void} callback
 * @return {void}
 */
Client.prototype.cdup = function(callback) {};

/**
 * Optional "standard" commands (RFC 959)
 * Retrieves the current working directory
 * @param {function(!Error, string): void} callback
 * @return {void}
 */
Client.prototype.pwd = function(callback) {};

/**
 * Optional "standard" commands (RFC 959)
 * Retrieves the server's operating system.
 * @param {function(!Error, string): void} callback
 * @return {void}
 */
Client.prototype.system = function(callback) {};

/**
 * Optional "standard" commands (RFC 959)
 * Similar to list(), except the directory is temporarily changed to path to retrieve the directory listing.
 * This is useful for servers that do not handle characters like spaces and quotes in directory names well for the LIST command.
 * This function is "optional" because it relies on pwd() being available.
 * @param {string|boolean|function(!Error, !Array<!Client.ListingElement>): void} path_or_useCompression_or_callback
 * @param {boolean|function(!Error, !Array<!Client.ListingElement>): void=} useCompression_or_callback
 * @param {function(!Error, !Array<!Client.ListingElement>): void=} callback
 * @return {void}
 */
Client.prototype.listSafe = function(path_or_useCompression_or_callback, useCompression_or_callback, callback) {};

/**
 * Extended commands (RFC 3659)
 * Retrieves the size of path
 * @param {string} path
 * @param {function(!Error, number): void} callback
 * @return {void}
 */
Client.prototype.size = function(path, callback) {};

/**
 * Extended commands (RFC 3659)
 * Retrieves the last modified date and time for path
 * @param {string} path
 * @param {function(!Error, !Date): void} callback
 * @return {void}
 */
Client.prototype.lastMod = function(path, callback) {};

/**
 * Extended commands (RFC 3659)
 * Sets the file byte offset for the next file transfer action (get/put) to byteOffset
 * @param {number} byteOffset
 * @param {function(!Error): void} callback
 * @return {void}
 */
Client.prototype.restart = function(byteOffset, callback) {};

/* TODO: ExportAssignment in  */
