/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cordova-plugin-native-keyboard/index.d.ts:
/**
 * @record
 * @struct
 */
function NativeKeyboard() {}

/**
 * Show the messenger, the bare minimum which has to be passed to the function is
 * the onSubmit callback
 * @param {!NativeKeyboardShowOptions} options
 * @return {void}
 */
NativeKeyboard.prototype.showMessenger = function(options) {};

/**
 * It's likely your app only has 1 one page where you want to show the messenger,
 * so you want to hide it when the user navigates away. You can choose to do this
 * either animated (a quick slide down animation) or not.
 * 
 * @param {!NativeKeyboardHideOptions=} options
 * @param {function(): void=} onSuccess
 * @param {function(?): void=} onError
 * @return {void}
 */
NativeKeyboard.prototype.hideMessenger = function(options, onSuccess, onError) {};

/**
 * Show a previously hidden keyboard
 * 
 * @param {function(): void=} onSuccess
 * @param {function(?): void=} onError
 * @return {void}
 */
NativeKeyboard.prototype.showMessengerKeyboard = function(onSuccess, onError) {};

/**
 * Hide the keyboard, but not the messenger bar
 * 
 * @param {function(): void=} onSuccess
 * @param {function(?): void=} onError
 * @return {void}
 */
NativeKeyboard.prototype.hideMessengerKeyboard = function(onSuccess, onError) {};

/**
 * Manipulate the messenger while it's open. For instance if you want to
 * update the text programmatically based on what the user typed (by responding to
 * onTextChanged events).
 * 
 * @param {!NativeKeyboardUpdateOptions} options
 * @param {function(): void=} onSuccess
 * @param {function(?): void=} onError
 * @return {void}
 */
NativeKeyboard.prototype.updateMessenger = function(options, onSuccess, onError) {};
/**
 * @record
 * @struct
 */
function NativeKeyboardUpdateOptions() {}
 /** @type {string} */
NativeKeyboardUpdateOptions.prototype.text;
 /** @type {number} */
NativeKeyboardUpdateOptions.prototype.caretIndex;
 /** @type {boolean} */
NativeKeyboardUpdateOptions.prototype.showKeyboard;
/**
 * @record
 * @struct
 */
function NativeKeyboardHideOptions() {}
 /** @type {boolean} */
NativeKeyboardHideOptions.prototype.animated;
/**
 * @record
 * @struct
 */
function NativeKeyboardShowOptions() {}
 /** @type {?} */
NativeKeyboardShowOptions.prototype.autoscrollElement;
 /** @type {boolean} */
NativeKeyboardShowOptions.prototype.scrollToBottomAfterMessengerShows;
 /** @type {boolean} */
NativeKeyboardShowOptions.prototype.keepOpenAfterSubmit;
 /** @type {boolean} */
NativeKeyboardShowOptions.prototype.animated;
 /** @type {boolean} */
NativeKeyboardShowOptions.prototype.showKeyboard;
 /** @type {string} */
NativeKeyboardShowOptions.prototype.text;
 /** @type {string} */
NativeKeyboardShowOptions.prototype.textColor;
 /** @type {string} */
NativeKeyboardShowOptions.prototype.placeholder;
 /** @type {string} */
NativeKeyboardShowOptions.prototype.placeholderColor;
 /** @type {string} */
NativeKeyboardShowOptions.prototype.backgroundColor;
 /** @type {string} */
NativeKeyboardShowOptions.prototype.textViewBackgroundColor;
 /** @type {string} */
NativeKeyboardShowOptions.prototype.textViewBorderColor;
 /** @type {number} */
NativeKeyboardShowOptions.prototype.maxChars;
 /** @type {string} */
NativeKeyboardShowOptions.prototype.counterStyle;
 /** @type {string} */
NativeKeyboardShowOptions.prototype.type;
 /** @type {string} */
NativeKeyboardShowOptions.prototype.appearance;
 /** @type {boolean} */
NativeKeyboardShowOptions.prototype.secure;
 /** @type {!LeftButtonOptions} */
NativeKeyboardShowOptions.prototype.leftButton;
 /** @type {!ButtonOptions} */
NativeKeyboardShowOptions.prototype.rightButton;

/**
 * Callback function, which is being called as soon as the user submits
 * @param {string} text
 * @return {void}
 */
NativeKeyboardShowOptions.prototype.onSubmit = function(text) {};

/**
 * Callback function which is being executed as soon as the keyboard will show
 * @return {void}
 */
NativeKeyboardShowOptions.prototype.onKeyboardWillShow = function() {};

/**
 * Callback function which is being executed as soon as the keyboard did show
 * @return {void}
 */
NativeKeyboardShowOptions.prototype.onKeyboardDidShow = function() {};

/**
 * Callback function which is being executed as soon as the keyboard will hide
 * @return {void}
 */
NativeKeyboardShowOptions.prototype.onKeyboardWillHide = function() {};

/**
 * Callback function which is being executed as soon as the keyboard did hide
 * @return {void}
 */
NativeKeyboardShowOptions.prototype.onKeyboardDidHide = function() {};

/**
 * Callback function which is being executed as soon as the entered text changes. Will
 * return the new text
 * 
 * @param {string} text
 * @return {void}
 */
NativeKeyboardShowOptions.prototype.onTextChanged = function(text) {};
/**
 * @record
 * @struct
 */
function ButtonOptions() {}
 /** @type {string} */
ButtonOptions.prototype.type;
 /** @type {string} */
ButtonOptions.prototype.value;
 /** @type {string} */
ButtonOptions.prototype.textStyle;
 /** @type {string} */
ButtonOptions.prototype.color;

/**
 * A callback being executed as soon as the button is clicked
 * @return {void}
 */
ButtonOptions.prototype.onPress = function() {};
/**
 * @extends {ButtonOptions}
 * @record
 * @struct
 */
function LeftButtonOptions() {}
 /** @type {boolean} */
LeftButtonOptions.prototype.disabledWhenTextEntered;
 /** @type {?} */
var NativeKeyboard;
 /** @type {?} */
Window.prototype.NativeKeyboard;
