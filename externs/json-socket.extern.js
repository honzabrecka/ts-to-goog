/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/json-socket/index.d.ts:

/* TODO: ImportDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {?} socket
 */
function JsonSocket(socket) {}

/**
 * sends a single message and closes the connection instantly. Use this if you need to send a server a message,
 * but you don't need any response.
 * @param {number} port port to send the message to
 * @param {string} host host to send the message to
 * @param {?} message the message to send
 * @param {function(!Error): void} callback will be called after the message has been sent
 * @return {void}
 */
JsonSocket.sendSingleMessage = function(port, host, message, callback) {};

/**
 * sends a single message, waits for a single response message from the server and closes the connection right after.
 * Use this if you need to send a server a message, and get a response, but you don't need the connection to stay
 * open.
 * @param {number} port port to send the message to
 * @param {string} host host to send the message to
 * @param {?} message the message to send
 * @param {function(!Error, ?): void} callback will be called when the response message has been received
 * @return {void}
 */
JsonSocket.sendSingleMessageAndReceive = function(port, host, message, callback) {};

/**
 * Convenience method for sending an error as a message.
 * @param {!Error} err an Error object that should be formatted as a message
 * @param {function(!Error): void} callback will be called after the message has been sent
 * @return {void}
 */
JsonSocket.prototype.sendError = function(err, callback) {};

/**
 * Same as {\@link JsonSocket.sendError}, except that the socket is closed right after the message has been sent
 * using <a href="https://nodejs.org/api/net.html#net_socket_end_data_encoding">net.end()</a>.
 * No more messages can be sent from either the server or client through this socket.
 * @param {!Error} err
 * @param {function(!Error): void} callback
 * @return {void}
 */
JsonSocket.prototype.sendEndError = function(err, callback) {};

/**
 * Sends a JSON message over the socket.
 * @param {?} message the message to send
 * @param {function(!Error): void} callback will be called after the message has been sent
 * @return {void}
 */
JsonSocket.prototype.sendMessage = function(message, callback) {};

/**
 * Same as {\@link JsonSocket.sendMessage}, except that the socket is closed right after the message has been sent
 * using <a href="https://nodejs.org/api/net.html#net_socket_end_data_encoding">net.end()</a>.
 * No more messages can be sent from either the server or client through this socket.
 * @param {?} message the message to send
 * @param {function(!Error): void} callback will be called after the message has been sent
 * @return {void}
 */
JsonSocket.prototype.sendEndMessage = function(message, callback) {};

/* TODO: ExportAssignment in  */
