/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/express-mysql-session/index.d.ts:

/* TODO: ExportAssignment in  */
/** @const */
var MySQLStore = {};
/**
 * @record
 * @struct
 */
MySQLStore.Options = function() {};
 /** @type {string} */
MySQLStore.Options.prototype.host;
 /** @type {number} */
MySQLStore.Options.prototype.port;
 /** @type {string} */
MySQLStore.Options.prototype.user;
 /** @type {string} */
MySQLStore.Options.prototype.password;
 /** @type {string} */
MySQLStore.Options.prototype.database;
 /** @type {number} */
MySQLStore.Options.prototype.checkExpirationInterval;
 /** @type {number} */
MySQLStore.Options.prototype.expiration;
 /** @type {boolean} */
MySQLStore.Options.prototype.createDatabaseTable;
 /** @type {number} */
MySQLStore.Options.prototype.connectionLimit;
 /** @type {!MySQLStore.Schema} */
MySQLStore.Options.prototype.schema;
/**
 * @record
 * @struct
 */
MySQLStore.Schema = function() {};
 /** @type {string} */
MySQLStore.Schema.prototype.tableName;
 /** @type {!MySQLStore.ColumnNames} */
MySQLStore.Schema.prototype.columnNames;
/**
 * @record
 * @struct
 */
MySQLStore.ColumnNames = function() {};
 /** @type {string} */
MySQLStore.ColumnNames.prototype.session_id;
 /** @type {string} */
MySQLStore.ColumnNames.prototype.expires;
 /** @type {string} */
MySQLStore.ColumnNames.prototype.data;

/**
 * @return {void} void
 */
MySQLStore.prototype.setDefaultOptions = function() {};

/**
 * @param {function(?): void=} callback
 * @return {void} void
 */
MySQLStore.prototype.createDatabaseTable = function(callback) {};

/**
 * @param {string} sessionId
 * @param {function(?, ?): void=} callback
 * @return {void} void
 */
MySQLStore.prototype.get = function(sessionId, callback) {};

/**
 * @param {string} sessionId
 * @param {?} data
 * @param {function(?): void=} callback
 * @return {void} void
 */
MySQLStore.prototype.set = function(sessionId, data, callback) {};

/**
 * @param {string} sessionId
 * @param {?} data
 * @param {function(?): void=} callback
 * @return {void} void
 */
MySQLStore.prototype.touch = function(sessionId, data, callback) {};

/**
 * @param {string} sessionId
 * @param {function(?): void=} callback
 * @return {void} void
 */
MySQLStore.prototype.destroy = function(sessionId, callback) {};

/**
 * @param {function(?, ?): void=} callback
 * @return {void} void
 */
MySQLStore.prototype.length = function(callback) {};

/**
 * @param {function(?): void=} callback
 * @return {void} void
 */
MySQLStore.prototype.clear = function(callback) {};

/**
 * @param {function(?): void=} callback
 * @return {void} void
 */
MySQLStore.prototype.clearExpiredSessions = function(callback) {};

/**
 * @param {number} interval
 * @return {void} void
 */
MySQLStore.prototype.setExpirationInterval = function(interval) {};

/**
 * @return {void} void
 */
MySQLStore.prototype.clearExpirationInterval = function() {};

/**
 * @param {function(): void=} callback
 * @return {void} void
 */
MySQLStore.prototype.close = function(callback) {};

/**
 * @param {?} object
 * @param {?} defaultValues
 * @param {?=} options
 * @return {void} void
 */
MySQLStore.prototype.default = function(object, defaultValues, options) {};

/**
 * @param {?} object
 * @return {void} void
 */
MySQLStore.prototype.clone = function(object) {};

/**
 * @param {?} value
 * @return {void} void
 */
MySQLStore.prototype.isObject = function(value) {};
