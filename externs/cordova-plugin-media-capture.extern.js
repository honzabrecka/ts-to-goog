/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cordova-plugin-media-capture/index.d.ts:
 /** @type {!Device} */
Navigator.prototype.device;
/**
 * @record
 * @struct
 */
function Device() {}
 /** @type {!Capture} */
Device.prototype.capture;
/**
 * @record
 * @struct
 */
function Capture() {}
 /** @type {!Array<!ConfigurationData>} */
Capture.prototype.supportedAudioModes;
 /** @type {!Array<!ConfigurationData>} */
Capture.prototype.supportedImageModes;
 /** @type {!Array<!ConfigurationData>} */
Capture.prototype.supportedVideoModes;

/**
 * Start the audio recorder application and return information about captured audio clip files.
 * @param {function(!Array<!MediaFile>): void} onSuccess Executes when the capture operation finishes with an array
 *                  of MediaFile objects describing each captured audio clip file.
 * @param {function(?): void} onError   Executes, if the user terminates the operation before an audio clip is captured,
 *                  with a CaptureError object, featuring the CaptureError.CAPTURE_NO_MEDIA_FILES error code.
 * @param {!AudioOptions=} options   Encapsulates audio capture configuration options.
 * @return {void}
 */
Capture.prototype.captureAudio = function(onSuccess, onError, options) {};

/**
 * Start the camera application and return information about captured image files.
 * @param {function(!Array<!MediaFile>): void} onSuccess Executes when the capture operation finishes with an array
 *                  of MediaFile objects describing each captured image clip file.
 * @param {function(?): void} onError   Executes, if the user terminates the operation before an audio clip is captured,
 *                  with a CaptureError object, featuring the CaptureError.CAPTURE_NO_MEDIA_FILES error code.
 * @param {!ImageOptions=} options   Encapsulates audio capture configuration options.
 * @return {void}
 */
Capture.prototype.captureImage = function(onSuccess, onError, options) {};

/**
 * Start the video recorder application and return information about captured video clip files.
 * @param {function(!Array<!MediaFile>): void} onSuccess Executes when the capture operation finishes with an array
 *                  of MediaFile objects describing each captured video clip file.
 * @param {function(?): void} onError   Executes, if the user terminates the operation before an audio clip is captured,
 *                  with a CaptureError object, featuring the CaptureError.CAPTURE_NO_MEDIA_FILES error code.
 * @param {!VideoOptions=} options   Encapsulates audio capture configuration options.
 * @return {void}
 */
Capture.prototype.captureVideo = function(onSuccess, onError, options) {};
/**
 * @record
 * @struct
 */
function MediaFile() {}
 /** @type {string} */
MediaFile.prototype.name;
 /** @type {string} */
MediaFile.prototype.fullPath;
 /** @type {string} */
MediaFile.prototype.type;
 /** @type {!Date} */
MediaFile.prototype.lastModifiedDate;
 /** @type {number} */
MediaFile.prototype.size;

/**
 * Retrieves format information about the media capture file.
 * @param {function(!MediaFileData): void} successCallback Invoked with a MediaFileData object when successful.
 * @param {function(): void=} errorCallback   Invoked if the attempt fails, this function.
 * @return {void}
 */
MediaFile.prototype.getFormatData = function(successCallback, errorCallback) {};
/**
 * @record
 * @struct
 */
function MediaFileData() {}
 /** @type {string} */
MediaFileData.prototype.codecs;
 /** @type {number} */
MediaFileData.prototype.bitrate;
 /** @type {number} */
MediaFileData.prototype.height;
 /** @type {number} */
MediaFileData.prototype.width;
 /** @type {number} */
MediaFileData.prototype.duration;
/**
 * @record
 * @struct
 */
function CaptureError() {}
 /** @type {number} */
CaptureError.prototype.code;
 /** @type {string} */
CaptureError.prototype.message;
 /** @type {function(new: (?), number, string): ?} */
var CaptureError;
/**
 * @record
 * @struct
 */
function AudioOptions() {}
 /** @type {number} */
AudioOptions.prototype.limit;
 /** @type {number} */
AudioOptions.prototype.duration;
/**
 * @record
 * @struct
 */
function ImageOptions() {}
 /** @type {number} */
ImageOptions.prototype.limit;
/**
 * @record
 * @struct
 */
function VideoOptions() {}
 /** @type {number} */
VideoOptions.prototype.limit;
 /** @type {number} */
VideoOptions.prototype.duration;
/**
 * @record
 * @struct
 */
function ConfigurationData() {}
 /** @type {string} */
ConfigurationData.prototype.type;
 /** @type {number} */
ConfigurationData.prototype.height;
 /** @type {number} */
ConfigurationData.prototype.width;
