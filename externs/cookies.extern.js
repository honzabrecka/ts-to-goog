/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cookies/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */
/**
 * @record
 * @struct
 */
function Cookies() {}
 /** @type {boolean} */
Cookies.prototype.secure;
 /** @type {!IncomingMessage} */
Cookies.prototype.request;
 /** @type {!ServerResponse} */
Cookies.prototype.response;

/**
 * This extracts the cookie with the given name from the
 * Cookie header in the request. If such a cookie exists,
 * its value is returned. Otherwise, nothing is returned.
 * @param {string} name
 * @param {!Cookies.GetOption=} opts
 * @return {string}
 */
Cookies.prototype.get = function(name, opts) {};

/**
 * This sets the given cookie in the response and returns
 * the current context to allow chaining.If the value is omitted,
 * an outbound header with an expired date is used to delete the cookie.
 * @param {string} name
 * @param {string=} value
 * @param {!Cookies.SetOption=} opts
 * @return {Cookies}
 */
Cookies.prototype.set = function(name, value, opts) {};

/** @typedef {?} */
Cookies.ICookies;

/** @typedef {!Cookies.SetOption} */
Cookies.IOptions;
/**
 * @record
 * @struct
 */
Cookies.Option = function() {};
 /** @type {(!Array<string>|?)} */
Cookies.Option.prototype.keys;
 /** @type {boolean} */
Cookies.Option.prototype.secure;
/**
 * @record
 * @struct
 */
Cookies.GetOption = function() {};
 /** @type {boolean} */
Cookies.GetOption.prototype.signed;
/**
 * @record
 * @struct
 */
Cookies.SetOption = function() {};
 /** @type {number} */
Cookies.SetOption.prototype.maxAge;
 /** @type {!Date} */
Cookies.SetOption.prototype.expires;
 /** @type {string} */
Cookies.SetOption.prototype.path;
 /** @type {string} */
Cookies.SetOption.prototype.domain;
 /** @type {boolean} */
Cookies.SetOption.prototype.secure;
 /** @type {boolean} */
Cookies.SetOption.prototype.secureProxy;
 /** @type {boolean} */
Cookies.SetOption.prototype.httpOnly;
 /** @type {boolean} */
Cookies.SetOption.prototype.signed;
 /** @type {boolean} */
Cookies.SetOption.prototype.overwrite;

/** @typedef {!Cookies.SetOption} */
Cookies.CookieAttr;
/**
 * @record
 * @struct
 */
Cookies.Cookie = function() {};
 /** @type {string} */
Cookies.Cookie.prototype.name;
 /** @type {string} */
Cookies.Cookie.prototype.value;
 /** @type {number} */
Cookies.Cookie.prototype.maxage;
 /** @type {number} */
Cookies.Cookie.prototype.maxAge;
 /** @type {!Date} */
Cookies.Cookie.prototype.expires;
 /** @type {string} */
Cookies.Cookie.prototype.path;
 /** @type {string} */
Cookies.Cookie.prototype.domain;
 /** @type {boolean} */
Cookies.Cookie.prototype.secure;
 /** @type {boolean} */
Cookies.Cookie.prototype.httpOnly;
 /** @type {boolean} */
Cookies.Cookie.prototype.overwrite;

/**
 * @return {string}
 */
Cookies.Cookie.prototype.toString = function() {};

/**
 * @return {string}
 */
Cookies.Cookie.prototype.toHeader = function() {};
/**
 * @record
 * @struct
 */
function CookiesFunction() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: ConstructSignature:  */

/* TODO: ConstructSignature:  */

/* TODO: ConstructSignature:  */
 /** @type {?} */
CookiesFunction.prototype.Cookie;
 /** @type {?} */
var Cookies;

/* TODO: ExportAssignment in  */
