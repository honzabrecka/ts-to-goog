/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/d3-collection/index.d.ts:
/**
 * @record
 * @struct
 */
function Stringifiable() {}

/**
 * @return {string}
 */
Stringifiable.prototype.toString = function() {};

/**
 * @param {?} object
 * @return {!Array<string>}
 */
function keys(object) {}

/**
 * @template T
 * @param {?} object
 * @return {!Array<?>}
 */
function values(object) {}

/**
 * @template T
 * @param {?} object
 * @return {!Array<?>}
 */
function entries(object) {}
/**
 * @record
 * @struct
 */
function Map() {}

/**
 * @param {string} key
 * @return {boolean}
 */
Map.prototype.has = function(key) {};

/**
 * @param {string} key
 * @return {?}
 */
Map.prototype.get = function(key) {};

/**
 * @param {string} key
 * @param {?} value
 * @return {?}
 */
Map.prototype.set = function(key, value) {};

/**
 * @param {string} key
 * @return {boolean}
 */
Map.prototype.remove = function(key) {};

/**
 * @return {void}
 */
Map.prototype.clear = function() {};

/**
 * @return {!Array<string>}
 */
Map.prototype.keys = function() {};

/**
 * @return {!Array<?>}
 */
Map.prototype.values = function() {};

/**
 * @return {!Array<?>}
 */
Map.prototype.entries = function() {};

/**
 * @param {?} func
 * @return {void}
 */
Map.prototype.each = function(func) {};

/**
 * @return {boolean}
 */
Map.prototype.empty = function() {};

/**
 * @return {number}
 */
Map.prototype.size = function() {};

/**
 * @template T
 * @param {?|!Array<?>=} d3Map_or_object_or_array
 * @param {?=} key
 * @return {?}
 */
function map(d3Map_or_object_or_array, key) {}
/**
 * @record
 * @struct
 */
function Set() {}

/**
 * @param {(string|?)} value
 * @return {boolean}
 */
Set.prototype.has = function(value) {};

/**
 * @param {(string|?)} value
 * @return {?}
 */
Set.prototype.add = function(value) {};

/**
 * @param {(string|?)} value
 * @return {boolean}
 */
Set.prototype.remove = function(value) {};

/**
 * @return {void}
 */
Set.prototype.clear = function() {};

/**
 * @return {!Array<string>}
 */
Set.prototype.values = function() {};

/**
 * The first and second parameter of the function are both passed
 * the 'value' of the set entry for consistency with map.each(...)
 * signature
 * @param {?} func
 * @return {void}
 */
Set.prototype.each = function(func) {};

/**
 * @return {boolean}
 */
Set.prototype.empty = function() {};

/**
 * @return {number}
 */
Set.prototype.size = function() {};

/**
 * @template T
 * @param {?|!Array<(string|?)>|!Array<?>=} d3Set_or_array
 * @param {?=} key
 * @return {?}
 */
function set(d3Set_or_array, key) {}
/**
 * @record
 * @struct
 */
function NestedArray() {}
/**
 * @extends {Map}
 * @record
 * @struct
 */
function NestedMap() {}
/**
 * @record
 * @struct
 */
function NestedObject() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function Nest() {}

/**
 * @param {?} func
 * @return {?}
 */
Nest.prototype.key = function(func) {};

/**
 * @param {?} comparator
 * @return {?}
 */
Nest.prototype.sortKeys = function(comparator) {};

/**
 * @param {?} comparator
 * @return {?}
 */
Nest.prototype.sortValues = function(comparator) {};

/**
 * @param {?} func
 * @return {?}
 */
Nest.prototype.rollup = function(func) {};

/**
 * @param {!Array<?>} array
 * @return {?}
 */
Nest.prototype.map = function(array) {};

/**
 * @param {!Array<?>} array
 * @return {?}
 */
Nest.prototype.object = function(array) {};

/**
 * @param {!Array<?>} array
 * @return {!Array<?>}
 */
Nest.prototype.entries = function(array) {};

/**
 * @template Datum, RollupType
 * @return {?}
 */
function nest() {}
