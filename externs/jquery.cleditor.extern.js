/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jquery.cleditor/index.d.ts:
/**
 * @record
 * @struct
 */
function CLEditor() {}
 /** @type {?<!HTMLElement>} */
CLEditor.prototype.$area;
 /** @type {?<!HTMLElement>} */
CLEditor.prototype.$frame;
 /** @type {?<!HTMLElement>} */
CLEditor.prototype.$main;
 /** @type {?<!HTMLElement>} */
CLEditor.prototype.$toolbar;
 /** @type {boolean} */
CLEditor.prototype.disabled;
 /** @type {!Document} */
CLEditor.prototype.doc;
 /** @type {!JQueryCLEditorOptions} */
CLEditor.prototype.options;

/**
 * @param {!Function} handler
 * @return {!CLEditor}
 */
CLEditor.prototype.change = function(handler) {};

/**
 * @return {!CLEditor}
 */
CLEditor.prototype.clear = function() {};

/**
 * @param {boolean} disabled
 * @return {!CLEditor}
 */
CLEditor.prototype.disable = function(disabled) {};

/**
 * @param {string} commands
 * @param {?} value
 * @param {boolean=} useCSS
 * @param {?=} button
 * @return {!CLEditor}
 */
CLEditor.prototype.execCommand = function(commands, value, useCSS, button) {};

/**
 * @return {!CLEditor}
 */
CLEditor.prototype.focus = function() {};

/**
 * @return {!CLEditor}
 */
CLEditor.prototype.hidePopups = function() {};

/**
 * @return {!CLEditor}
 */
CLEditor.prototype.refresh = function() {};

/**
 * @return {!CLEditor}
 */
CLEditor.prototype.select = function() {};

/**
 * @return {string}
 */
CLEditor.prototype.selectedHTML = function() {};

/**
 * @return {string}
 */
CLEditor.prototype.selectedText = function() {};

/**
 * @param {string} message
 * @param {?=} button
 * @return {!CLEditor}
 */
CLEditor.prototype.showMessage = function(message, button) {};

/**
 * @return {boolean}
 */
CLEditor.prototype.sourceMode = function() {};

/**
 * @return {!CLEditor}
 */
CLEditor.prototype.updateFrame = function() {};

/**
 * @return {!CLEditor}
 */
CLEditor.prototype.updateTextArea = function() {};
/**
 * @record
 * @struct
 */
function JQueryCLEditorOptions() {}
 /** @type {number} */
JQueryCLEditorOptions.prototype.width;
 /** @type {number} */
JQueryCLEditorOptions.prototype.height;
 /** @type {string} */
JQueryCLEditorOptions.prototype.controls;
 /** @type {string} */
JQueryCLEditorOptions.prototype.colors;
 /** @type {string} */
JQueryCLEditorOptions.prototype.fonts;
 /** @type {string} */
JQueryCLEditorOptions.prototype.sizes;
 /** @type {!Array<!Array<string>>} */
JQueryCLEditorOptions.prototype.styles;
 /** @type {boolean} */
JQueryCLEditorOptions.prototype.useCSS;
 /** @type {string} */
JQueryCLEditorOptions.prototype.docType;
 /** @type {string} */
JQueryCLEditorOptions.prototype.docCSSFile;
 /** @type {string} */
JQueryCLEditorOptions.prototype.bodyStyle;
/**
 * @record
 * @struct
 */
function JQueryCLEditorButtonDefinition() {}
 /** @type {string} */
JQueryCLEditorButtonDefinition.prototype.name;
 /** @type {string} */
JQueryCLEditorButtonDefinition.prototype.title;
 /** @type {?} */
JQueryCLEditorButtonDefinition.prototype.css;
 /** @type {string} */
JQueryCLEditorButtonDefinition.prototype.image;
 /** @type {number} */
JQueryCLEditorButtonDefinition.prototype.stripIndex;
 /** @type {string} */
JQueryCLEditorButtonDefinition.prototype.command;
 /** @type {string} */
JQueryCLEditorButtonDefinition.prototype.popupName;
 /** @type {string} */
JQueryCLEditorButtonDefinition.prototype.popupContent;
 /** @type {function(!JQueryCLEditorButtonDefinitionEventData): boolean} */
JQueryCLEditorButtonDefinition.prototype.getEnabled;
 /** @type {function(!JQueryCLEditorButtonDefinitionEventData): boolean} */
JQueryCLEditorButtonDefinition.prototype.getPressed;
 /** @type {function(!Event, !JQueryCLEditorButtonDefinitionEventData): boolean} */
JQueryCLEditorButtonDefinition.prototype.buttonClick;
 /** @type {function(!Event, !JQueryCLEditorButtonDefinitionEventData): boolean} */
JQueryCLEditorButtonDefinition.prototype.popupClick;
/**
 * @record
 * @struct
 */
function JQueryCLEditorButtonDefinitionEventData() {}
 /** @type {!CLEditor} */
JQueryCLEditorButtonDefinitionEventData.prototype.editor;
 /** @type {!HTMLElement} */
JQueryCLEditorButtonDefinitionEventData.prototype.button;
 /** @type {string} */
JQueryCLEditorButtonDefinitionEventData.prototype.buttonName;
 /** @type {!HTMLElement} */
JQueryCLEditorButtonDefinitionEventData.prototype.popup;
 /** @type {string} */
JQueryCLEditorButtonDefinitionEventData.prototype.popupName;
 /** @type {string} */
JQueryCLEditorButtonDefinitionEventData.prototype.command;
 /** @type {?} */
JQueryCLEditorButtonDefinitionEventData.prototype.value;
 /** @type {boolean} */
JQueryCLEditorButtonDefinitionEventData.prototype.useCSS;
/**
 * @record
 * @struct
 */
function JQueryCLEditorStatic() {}
 /** @type {!JQueryCLEditorOptions} */
JQueryCLEditorStatic.prototype.defaultOptions;
 /** @type {!Array<!JQueryCLEditorButtonDefinition>} */
JQueryCLEditorStatic.prototype.buttons;
 /** @type {function(): string} */
JQueryCLEditorStatic.prototype.imagesPath;
 /** @type {!JQueryCLEditorStatic} */
JQueryStatic.prototype.cleditor;

/**
 * If the cleditor object does not exist for a matched textarea element,
 * it will be created using the default options combined with the supplied options.
 * This is the core method for creating and selecting cleditor objects.
 * @param {!JQueryCLEditorOptions=} options
 * @return {!CLEditor}
 */
JQuery.prototype.cleditor = function(options) {};
