/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/angular-permission/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "angular"
/** @const */
tsickle_declare_module.angular.permission = {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.permission.TransitionProperties = function() {};
 /** @type {!ui.IState} */
tsickle_declare_module.angular.permission.TransitionProperties.prototype.fromState;
 /** @type {!ui.IStateParamsService} */
tsickle_declare_module.angular.permission.TransitionProperties.prototype.fromParams;
 /** @type {!ui.IState} */
tsickle_declare_module.angular.permission.TransitionProperties.prototype.toState;
 /** @type {!ui.IStateParamsService} */
tsickle_declare_module.angular.permission.TransitionProperties.prototype.toParams;
 /** @type {!ui.IStateOptions} */
tsickle_declare_module.angular.permission.TransitionProperties.prototype.options;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.permission.PermissionStore = function() {};

/**
 * Allows to define permission on application configuration
 * \@method 
 * 
 * @param {string} permissionName {String} Name of defined permission
 * @param {function(string, !permission.TransitionProperties): (boolean|!angular.IPromise<?>)} validationFunction {Function} Function used to validate if permission is valid
 * @return {void}
 */
tsickle_declare_module.angular.permission.PermissionStore.prototype.definePermission = function(permissionName, validationFunction) {};

/**
 * Allows to define set of permissionNames with shared validation function on application configuration
 * \@method
 * @throws {TypeError}
 * 
 * @param {!Array<string>} permissionNames {Array} Set of permission names
 * @param {function(string, !permission.TransitionProperties): (boolean|!angular.IPromise<?>)} validationFunction {Function} Function used to validate if permission is valid
 * @return {void}
 */
tsickle_declare_module.angular.permission.PermissionStore.prototype.defineManyPermissions = function(permissionNames, validationFunction) {};

/**
 * Removes all permissions
 * \@method
 * @return {void}
 */
tsickle_declare_module.angular.permission.PermissionStore.prototype.clearStore = function() {};

/**
 * Deletes permission
 * \@method 
 * 
 * @param {string} permissionName {String} Name of defined permission
 * @return {void}
 */
tsickle_declare_module.angular.permission.PermissionStore.prototype.removePermissionDefinition = function(permissionName) {};

/**
 * Checks if permission exists
 * \@method 
 * 
 * @param {string} permissionName {String} Name of defined permission
 * @return {boolean}
 */
tsickle_declare_module.angular.permission.PermissionStore.prototype.hasPermissionDefinition = function(permissionName) {};

/**
 * Returns permission by it's name
 * \@method 
 * 
 * @param {string} permissionName
 * @return {!permission.Permission}
 */
tsickle_declare_module.angular.permission.PermissionStore.prototype.getPermissionDefinition = function(permissionName) {};

/**
 * Returns all permissions
 * \@method 
 * 
 * @return {!Object<string,!permission.Permission>}
 */
tsickle_declare_module.angular.permission.PermissionStore.prototype.getStore = function() {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.permission.RoleStore = function() {};

/**
 * Allows to define role
 * \@method 
 * 
 * Allows to define role
 * \@method 
 * 
 * @param {string} roleName {String} Name of defined role
 * @param {!Array<string>} permissions {Array} Set of permission names
 * @param {function(string, !permission.TransitionProperties): (boolean|!angular.IPromise<?>)=} validationFunction
 * @return {void}
 */
tsickle_declare_module.angular.permission.RoleStore.prototype.defineRole = function(roleName, permissions, validationFunction) {};

/**
 * Checks if role is defined in store
 * \@method 
 * 
 * @param {string} roleName {String} Name of role
 * @return {boolean}
 */
tsickle_declare_module.angular.permission.RoleStore.prototype.hasRoleDefinition = function(roleName) {};

/**
 * Returns role definition object by it's name
 * \@method 
 * 
 * @param {string} roleName
 * @return {!permission.Role}
 */
tsickle_declare_module.angular.permission.RoleStore.prototype.getRoleDefinition = function(roleName) {};

/**
 * Removes all role definitions
 * \@method
 * @return {void}
 */
tsickle_declare_module.angular.permission.RoleStore.prototype.clearStore = function() {};

/**
 * Deletes role from store
 * \@method 
 * 
 * @param {string} roleName {String} Name of defined permission
 * @return {void}
 */
tsickle_declare_module.angular.permission.RoleStore.prototype.removeRoleDefinition = function(roleName) {};

/**
 * Returns all role definitions
 * \@method 
 * 
 * @return {!Object<string,!permission.Role>}
 */
tsickle_declare_module.angular.permission.RoleStore.prototype.getStore = function() {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.permission.Role = function() {};
 /** @type {string} */
tsickle_declare_module.angular.permission.Role.prototype.roleName;
 /** @type {!Array<string>} */
tsickle_declare_module.angular.permission.Role.prototype.permissionNames;
 /** @type {function(string, !permission.TransitionProperties): (boolean|!angular.IPromise<?>)} */
tsickle_declare_module.angular.permission.Role.prototype.validationFunction;
 /** @type {function(): !angular.IPromise<?>} */
tsickle_declare_module.angular.permission.Role.prototype.validateRole;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.permission.Permission = function() {};
 /** @type {string} */
tsickle_declare_module.angular.permission.Permission.prototype.permissionName;
 /** @type {function(string, !permission.TransitionProperties): (boolean|!angular.IPromise<?>)} */
tsickle_declare_module.angular.permission.Permission.prototype.validationFunction;
 /** @type {function(): !angular.IPromise<?>} */
tsickle_declare_module.angular.permission.Permission.prototype.validatePermission;

/** @typedef {function(string, !permission.TransitionProperties): (boolean|!angular.IPromise<?>)} */
tsickle_declare_module.angular.permission.RoleValidationFunction;

/** @typedef {function(string, !permission.TransitionProperties): (boolean|!angular.IPromise<?>)} */
tsickle_declare_module.angular.permission.PermissionValidationFunction;
/**
 * @extends {ui.IState}
 * @record
 * @struct
 */
tsickle_declare_module.angular.permission.IPermissionState = function() {};
 /** @type {?} */
tsickle_declare_module.angular.permission.IPermissionState.prototype.data;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.permission.DataWithPermissions = function() {};
 /** @type {{only: (string|!angular.IPromise<?>|!Array<string>|function(): void), except: (string|!angular.IPromise<?>|!Array<string>|function(): void), redirectTo: (string|function(): string|function(): !permission.PermissionRedirectConfigation|!Object<string,!permission.PermissionRedirectConfigation>)}} */
tsickle_declare_module.angular.permission.DataWithPermissions.prototype.permissions;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.permission.PermissionRedirectConfigation = function() {};
 /** @type {string} */
tsickle_declare_module.angular.permission.PermissionRedirectConfigation.prototype.state;
 /** @type {!Object} */
tsickle_declare_module.angular.permission.PermissionRedirectConfigation.prototype.params;
 /** @type {!ui.IStateOptions} */
tsickle_declare_module.angular.permission.PermissionRedirectConfigation.prototype.options;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "angular-permission"
/** @const */
tsickle_declare_module.angular_permission = {};
 /** @type {string} */
tsickle_declare_module.angular_permission.permission;
 /** @type {string} */
tsickle_declare_module.angular_permission.ngPermission;
 /** @type {string} */
tsickle_declare_module.angular_permission.uiPermission;
