/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/novnc-core/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {?=} defaults
 */
function RFB(defaults) {}

/**
 * @return {!HTMLCanvasElement}
 */
RFB.prototype.get_target = function() {};

/**
 * @param {!HTMLCanvasElement} target
 * @return {void}
 */
RFB.prototype.set_target = function(target) {};

/**
 * @return {!HTMLElement}
 */
RFB.prototype.get_focusContainer = function() {};

/**
 * @param {!HTMLElement} container
 * @return {void}
 */
RFB.prototype.set_focusContainer = function(container) {};

/**
 * @return {boolean}
 */
RFB.prototype.get_encrypt = function() {};

/**
 * @param {boolean} encrypt
 * @return {void}
 */
RFB.prototype.set_encrypt = function(encrypt) {};

/**
 * @return {boolean}
 */
RFB.prototype.get_local_cursor = function() {};

/**
 * @param {boolean} localCursor
 * @return {void}
 */
RFB.prototype.set_local_cursor = function(localCursor) {};

/**
 * @return {boolean}
 */
RFB.prototype.get_shared = function() {};

/**
 * @param {boolean} shared
 * @return {void}
 */
RFB.prototype.set_shared = function(shared) {};

/**
 * @return {boolean}
 */
RFB.prototype.get_view_only = function() {};

/**
 * @param {boolean} viewOnly
 * @return {void}
 */
RFB.prototype.set_view_only = function(viewOnly) {};

/**
 * @return {string}
 */
RFB.prototype.get_xvp_password_sep = function() {};

/**
 * @param {string} xvpPasswordSep
 * @return {void}
 */
RFB.prototype.set_xvp_password_sep = function(xvpPasswordSep) {};

/**
 * @return {number}
 */
RFB.prototype.get_disconnectTimeout = function() {};

/**
 * @param {number} disconnectTimeout
 * @return {void}
 */
RFB.prototype.set_disconnectTimeout = function(disconnectTimeout) {};

/**
 * @return {!Array<string>}
 */
RFB.prototype.get_wsProtocols = function() {};

/**
 * @param {!Array<string>} wsProtocols
 * @return {void}
 */
RFB.prototype.set_wsProtocols = function(wsProtocols) {};

/**
 * @return {string}
 */
RFB.prototype.get_repeaterID = function() {};

/**
 * @param {string} repeaterID
 * @return {void}
 */
RFB.prototype.set_repeaterID = function(repeaterID) {};

/**
 * @return {boolean}
 */
RFB.prototype.get_viewportDrag = function() {};

/**
 * @param {boolean} viewportDrag
 * @return {void}
 */
RFB.prototype.set_viewportDrag = function(viewportDrag) {};

/**
 * @return {?}
 */
RFB.prototype.get_onUpdateState = function() {};

/**
 * @param {?} handler
 * @return {void}
 */
RFB.prototype.set_onUpdateState = function(handler) {};

/**
 * @return {?}
 */
RFB.prototype.get_onNotification = function() {};

/**
 * @param {?} handler
 * @return {void}
 */
RFB.prototype.set_onNotification = function(handler) {};

/**
 * @return {?}
 */
RFB.prototype.get_onDisconnected = function() {};

/**
 * @param {?} handler
 * @return {void}
 */
RFB.prototype.set_onDisconnected = function(handler) {};

/**
 * @return {?}
 */
RFB.prototype.get_onPasswordRequired = function() {};

/**
 * @param {?} handler
 * @return {void}
 */
RFB.prototype.set_onPasswordRequired = function(handler) {};

/**
 * @return {?}
 */
RFB.prototype.get_onClipboard = function() {};

/**
 * @param {?} handler
 * @return {void}
 */
RFB.prototype.set_onClipboard = function(handler) {};

/**
 * @return {?}
 */
RFB.prototype.get_onBell = function() {};

/**
 * @param {?} handler
 * @return {void}
 */
RFB.prototype.set_onBell = function(handler) {};

/**
 * @return {?}
 */
RFB.prototype.get_onFBUReceive = function() {};

/**
 * @param {?} handler
 * @return {void}
 */
RFB.prototype.set_onFBUReceive = function(handler) {};

/**
 * @return {?}
 */
RFB.prototype.get_onFBUComplete = function() {};

/**
 * @param {?} handler
 * @return {void}
 */
RFB.prototype.set_onFBUComplete = function(handler) {};

/**
 * @return {?}
 */
RFB.prototype.get_onFBResize = function() {};

/**
 * @param {?} handler
 * @return {void}
 */
RFB.prototype.set_onFBResize = function(handler) {};

/**
 * @return {?}
 */
RFB.prototype.get_onDesktopName = function() {};

/**
 * @param {?} handler
 * @return {void}
 */
RFB.prototype.set_onDesktopName = function(handler) {};

/**
 * @return {?}
 */
RFB.prototype.get_onXvpInit = function() {};

/**
 * @param {?} handler
 * @return {void}
 */
RFB.prototype.set_onXvpInit = function(handler) {};

/**
 * @return {?}
 */
RFB.prototype.get_display = function() {};

/**
 * @return {?}
 */
RFB.prototype.get_keyboard = function() {};

/**
 * @return {?}
 */
RFB.prototype.get_mouse = function() {};

/**
 * @param {string} host
 * @param {number} port
 * @param {string=} password
 * @param {string=} path
 * @return {boolean}
 */
RFB.prototype.connect = function(host, port, password, path) {};

/**
 * @return {void}
 */
RFB.prototype.disconnect = function() {};

/**
 * @param {string} passwd
 * @return {void}
 */
RFB.prototype.sendPassword = function(passwd) {};

/**
 * @return {boolean}
 */
RFB.prototype.sendCtrlAltDel = function() {};

/**
 * @param {number} version
 * @param {?} op
 * @return {boolean}
 */
RFB.prototype.xvpOp = function(version, op) {};

/**
 * @return {boolean}
 */
RFB.prototype.xvpShutdown = function() {};

/**
 * @return {boolean}
 */
RFB.prototype.xvpReboot = function() {};

/**
 * @return {boolean}
 */
RFB.prototype.xvpReset = function() {};

/**
 * @param {number} keysym
 * @param {string} code
 * @param {boolean=} down
 * @return {boolean}
 */
RFB.prototype.sendKey = function(keysym, code, down) {};

/**
 * @param {string} text
 * @return {void}
 */
RFB.prototype.clipboardPasteFrom = function(text) {};

/**
 * @param {number} width
 * @param {number} height
 * @return {boolean}
 */
RFB.prototype.requestDesktopSize = function(width, height) {};
/**
 * @record
 * @struct
 */
function NvRFBDefaults() {}
 /** @type {!HTMLCanvasElement} */
NvRFBDefaults.prototype.target;
 /** @type {!HTMLElement} */
NvRFBDefaults.prototype.focusContainer;
 /** @type {boolean} */
NvRFBDefaults.prototype.encrypt;
 /** @type {boolean} */
NvRFBDefaults.prototype.local_cursor;
 /** @type {boolean} */
NvRFBDefaults.prototype.shared;
 /** @type {boolean} */
NvRFBDefaults.prototype.view_only;
 /** @type {string} */
NvRFBDefaults.prototype.xvp_password_sep;
 /** @type {number} */
NvRFBDefaults.prototype.disconnectTimeout;
 /** @type {!Array<string>} */
NvRFBDefaults.prototype.wsProtocols;
 /** @type {string} */
NvRFBDefaults.prototype.repeaterID;
 /** @type {boolean} */
NvRFBDefaults.prototype.viewportDrag;

/**
 * @param {?} rfb
 * @param {string} state
 * @param {string} oldstate
 * @return {void}
 */
NvRFBDefaults.prototype.onUpdateState = function(rfb, state, oldstate) {};

/**
 * @param {?} rfb
 * @param {string} msg
 * @param {string} level
 * @param {?=} options
 * @return {void}
 */
NvRFBDefaults.prototype.onNotification = function(rfb, msg, level, options) {};

/**
 * @param {?} rfb
 * @param {string=} reason
 * @return {void}
 */
NvRFBDefaults.prototype.onDisconnected = function(rfb, reason) {};

/**
 * @param {?} rfb
 * @param {string=} msg
 * @return {void}
 */
NvRFBDefaults.prototype.onPasswordRequired = function(rfb, msg) {};

/**
 * @param {?} rfb
 * @param {string} text
 * @return {void}
 */
NvRFBDefaults.prototype.onClipboard = function(rfb, text) {};

/**
 * @param {?} rfb
 * @return {void}
 */
NvRFBDefaults.prototype.onBell = function(rfb) {};

/**
 * @param {?} rfb
 * @param {?} fbu
 * @return {void}
 */
NvRFBDefaults.prototype.onFBUReceive = function(rfb, fbu) {};

/**
 * @param {?} rfb
 * @param {?} fbu
 * @return {void}
 */
NvRFBDefaults.prototype.onFBUComplete = function(rfb, fbu) {};

/**
 * @param {?} rfb
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
NvRFBDefaults.prototype.onFBResize = function(rfb, width, height) {};

/**
 * @param {?} rfb
 * @param {string} name
 * @return {void}
 */
NvRFBDefaults.prototype.onDesktopName = function(rfb, name) {};

/**
 * @param {number} version
 * @return {void}
 */
NvRFBDefaults.prototype.onXvpInit = function(version) {};
/**
 * @record
 * @struct
 */
function NvFBU() {}
 /** @type {number} */
NvFBU.prototype.x;
 /** @type {number} */
NvFBU.prototype.y;
 /** @type {number} */
NvFBU.prototype.width;
 /** @type {number} */
NvFBU.prototype.height;
 /** @type {number} */
NvFBU.prototype.encoding;
 /** @type {string} */
NvFBU.prototype.encodingName;

/** @typedef {string} */
var NvConnectionState;

/** @const */
var NvXvpOperation = {};
/** @const {number} */
NvXvpOperation.shutdown;
/** @const {number} */
NvXvpOperation.reboot;
/** @const {number} */
NvXvpOperation.reset;
