/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/mocha/index.d.ts:
/**
 * @record
 * @struct
 */
function MochaSetupOptions() {}
 /** @type {number} */
MochaSetupOptions.prototype.slow;
 /** @type {number} */
MochaSetupOptions.prototype.timeout;
 /** @type {string} */
MochaSetupOptions.prototype.ui;
 /** @type {!Array<?>} */
MochaSetupOptions.prototype.globals;
 /** @type {?} */
MochaSetupOptions.prototype.reporter;
 /** @type {boolean} */
MochaSetupOptions.prototype.bail;
 /** @type {boolean} */
MochaSetupOptions.prototype.ignoreLeaks;
 /** @type {?} */
MochaSetupOptions.prototype.grep;
 /** @type {!Mocha} */
var mocha;
 /** @type {!Mocha.IContextDefinition} */
var describe;
 /** @type {!Mocha.IContextDefinition} */
var xdescribe;
 /** @type {!Mocha.IContextDefinition} */
var context;
 /** @type {!Mocha.IContextDefinition} */
var suite;
 /** @type {!Mocha.ITestDefinition} */
var it;
 /** @type {!Mocha.ITestDefinition} */
var xit;
 /** @type {!Mocha.ITestDefinition} */
var test;
 /** @type {!Mocha.ITestDefinition} */
var specify;

/**
 * @return {void}
 */
function run() {}
/**
 * @record
 * @struct
 */
function MochaDone() {}

/* TODO: CallSignature:  */

/**
 * @param {function(!MochaDone): ?} callback
 * @return {void}
 */
function setup(callback) {}

/**
 * @param {function(!MochaDone): ?} callback
 * @return {void}
 */
function teardown(callback) {}

/**
 * @param {function(!MochaDone): ?} callback
 * @return {void}
 */
function suiteSetup(callback) {}

/**
 * @param {function(!MochaDone): ?} callback
 * @return {void}
 */
function suiteTeardown(callback) {}

/**
 * @param {function(!MochaDone): ?|string} callback_or_description
 * @param {function(!MochaDone): ?=} callback
 * @return {void}
 */
function before(callback_or_description, callback) {}

/**
 * @param {function(!MochaDone): ?|string} callback_or_description
 * @param {function(!MochaDone): ?=} callback
 * @return {void}
 */
function after(callback_or_description, callback) {}

/**
 * @param {function(!MochaDone): ?|string} callback_or_description
 * @param {function(!MochaDone): ?=} callback
 * @return {void}
 */
function beforeEach(callback_or_description, callback) {}

/**
 * @param {function(!MochaDone): ?|string} callback_or_description
 * @param {function(!MochaDone): ?=} callback
 * @return {void}
 */
function afterEach(callback_or_description, callback) {}

/**
 * @constructor
 * @struct
 * @param {{grep: !RegExp, ui: string, reporter: string, timeout: number, reporterOptions: ?, slow: number, bail: boolean}=} options
 */
function Mocha(options) {}
 /** @type {!Mocha.ITestDefinition} */
Mocha.prototype.currentTest;

/**
 * Setup mocha with the given options.
 * @param {!MochaSetupOptions} options
 * @return {!Mocha}
 */
Mocha.prototype.setup = function(options) {};

/**
 * @param {boolean=} value
 * @return {!Mocha}
 */
Mocha.prototype.bail = function(value) {};

/**
 * @param {string} file
 * @return {!Mocha}
 */
Mocha.prototype.addFile = function(file) {};

/**
 * Sets reporter by name, defaults to "spec".
 * Sets reporter constructor, defaults to mocha.reporters.Spec.
 * @param {string|function(!Mocha.IRunner, ?): ?} name_or_reporter
 * @return {!Mocha}
 */
Mocha.prototype.reporter = function(name_or_reporter) {};

/**
 * @param {string} value
 * @return {!Mocha}
 */
Mocha.prototype.ui = function(value) {};

/**
 * @param {string|!RegExp} value
 * @return {!Mocha}
 */
Mocha.prototype.grep = function(value) {};

/**
 * @return {!Mocha}
 */
Mocha.prototype.invert = function() {};

/**
 * @param {boolean} value
 * @return {!Mocha}
 */
Mocha.prototype.ignoreLeaks = function(value) {};

/**
 * @return {!Mocha}
 */
Mocha.prototype.checkLeaks = function() {};

/**
 * Function to allow assertion libraries to throw errors directly into mocha.
 * This is useful when running tests in a browser because window.onerror will
 * only receive the 'message' attribute of the Error.
 * @param {!Error} error
 * @return {void}
 */
Mocha.prototype.throwError = function(error) {};

/**
 * Enables growl support.
 * @return {!Mocha}
 */
Mocha.prototype.growl = function() {};

/**
 * @param {string|!Array<string>} value_or_values
 * @return {!Mocha}
 */
Mocha.prototype.globals = function(value_or_values) {};

/**
 * @param {boolean} value
 * @return {!Mocha}
 */
Mocha.prototype.useColors = function(value) {};

/**
 * @param {boolean} value
 * @return {!Mocha}
 */
Mocha.prototype.useInlineDiffs = function(value) {};

/**
 * @param {number} value
 * @return {!Mocha}
 */
Mocha.prototype.timeout = function(value) {};

/**
 * @param {number} value
 * @return {!Mocha}
 */
Mocha.prototype.slow = function(value) {};

/**
 * @param {boolean} value
 * @return {!Mocha}
 */
Mocha.prototype.enableTimeouts = function(value) {};

/**
 * @param {boolean} value
 * @return {!Mocha}
 */
Mocha.prototype.asyncOnly = function(value) {};

/**
 * @param {boolean} value
 * @return {!Mocha}
 */
Mocha.prototype.noHighlighting = function(value) {};

/**
 * Runs tests and invokes `onComplete()` when finished.
 * @param {function(number): void=} onComplete
 * @return {!Mocha.IRunner}
 */
Mocha.prototype.run = function(onComplete) {};
/**
 * @record
 * @struct
 */
Mocha.ISuiteCallbackContext = function() {};

/**
 * @param {number} ms
 * @return {ISuiteCallbackContext}
 */
Mocha.ISuiteCallbackContext.prototype.timeout = function(ms) {};

/**
 * @param {number} n
 * @return {ISuiteCallbackContext}
 */
Mocha.ISuiteCallbackContext.prototype.retries = function(n) {};

/**
 * @param {number} ms
 * @return {ISuiteCallbackContext}
 */
Mocha.ISuiteCallbackContext.prototype.slow = function(ms) {};
/**
 * @record
 * @struct
 */
Mocha.IHookCallbackContext = function() {};

/* TODO: IndexSignature: Mocha */

/**
 * @return {IHookCallbackContext}
 */
Mocha.IHookCallbackContext.prototype.skip = function() {};

/**
 * @param {number} ms
 * @return {IHookCallbackContext}
 */
Mocha.IHookCallbackContext.prototype.timeout = function(ms) {};
/**
 * @record
 * @struct
 */
Mocha.ITestCallbackContext = function() {};

/* TODO: IndexSignature: Mocha */

/**
 * @return {ITestCallbackContext}
 */
Mocha.ITestCallbackContext.prototype.skip = function() {};

/**
 * @param {number} ms
 * @return {ITestCallbackContext}
 */
Mocha.ITestCallbackContext.prototype.timeout = function(ms) {};

/**
 * @param {number} n
 * @return {ITestCallbackContext}
 */
Mocha.ITestCallbackContext.prototype.retries = function(n) {};

/**
 * @param {number} ms
 * @return {ITestCallbackContext}
 */
Mocha.ITestCallbackContext.prototype.slow = function(ms) {};
/**
 * @record
 * @struct
 */
Mocha.IRunnable = function() {};
 /** @type {string} */
Mocha.IRunnable.prototype.title;
 /** @type {!Function} */
Mocha.IRunnable.prototype.fn;
 /** @type {boolean} */
Mocha.IRunnable.prototype.async;
 /** @type {boolean} */
Mocha.IRunnable.prototype.sync;
 /** @type {boolean} */
Mocha.IRunnable.prototype.timedOut;

/**
 * @param {number} n
 * @return {IRunnable}
 */
Mocha.IRunnable.prototype.timeout = function(n) {};
/**
 * @record
 * @struct
 */
Mocha.ISuite = function() {};
 /** @type {!Mocha.ISuite} */
Mocha.ISuite.prototype.parent;
 /** @type {string} */
Mocha.ISuite.prototype.title;

/**
 * @return {string}
 */
Mocha.ISuite.prototype.fullTitle = function() {};
/**
 * @extends {Mocha.IRunnable}
 * @record
 * @struct
 */
Mocha.ITest = function() {};
 /** @type {!Mocha.ISuite} */
Mocha.ITest.prototype.parent;
 /** @type {boolean} */
Mocha.ITest.prototype.pending;
 /** @type {string} */
Mocha.ITest.prototype.state;

/**
 * @return {string}
 */
Mocha.ITest.prototype.fullTitle = function() {};
/**
 * @extends {Mocha.IHookCallbackContext}
 * @record
 * @struct
 */
Mocha.IBeforeAndAfterContext = function() {};
 /** @type {!Mocha.ITest} */
Mocha.IBeforeAndAfterContext.prototype.currentTest;
/**
 * @record
 * @struct
 */
Mocha.IRunner = function() {};
/**
 * @record
 * @struct
 */
Mocha.IContextDefinition = function() {};

/* TODO: CallSignature: Mocha */

/**
 * @param {string} description
 * @param {function(): void} callback
 * @return {!Mocha.ISuite}
 */
Mocha.IContextDefinition.prototype.only = function(description, callback) {};

/**
 * @param {string} description
 * @param {function(): void} callback
 * @return {void}
 */
Mocha.IContextDefinition.prototype.skip = function(description, callback) {};

/**
 * @param {number} ms
 * @return {void}
 */
Mocha.IContextDefinition.prototype.timeout = function(ms) {};
/**
 * @record
 * @struct
 */
Mocha.ITestDefinition = function() {};

/* TODO: CallSignature: Mocha */
 /** @type {string} */
Mocha.ITestDefinition.prototype.state;

/**
 * @param {string} expectation
 * @param {function(!MochaDone): ?=} callback
 * @return {!Mocha.ITest}
 */
Mocha.ITestDefinition.prototype.only = function(expectation, callback) {};

/**
 * @param {string} expectation
 * @param {function(!MochaDone): ?=} callback
 * @return {void}
 */
Mocha.ITestDefinition.prototype.skip = function(expectation, callback) {};

/**
 * @param {number} ms
 * @return {void}
 */
Mocha.ITestDefinition.prototype.timeout = function(ms) {};
/** @const */
Mocha.reporters = {};

/**
 * @constructor
 * @struct
 * @param {!Mocha.IRunner} runner
 */
Mocha.reporters.Base = function(runner) {};
 /** @type {{suites: number, tests: number, passes: number, pending: number, failures: number}} */
Mocha.reporters.Base.prototype.stats;
/**
 * @extends {Mocha.reporters.Base}
 * @constructor
 * @struct
 */
Mocha.reporters.Doc = function() {};
/**
 * @extends {Mocha.reporters.Base}
 * @constructor
 * @struct
 */
Mocha.reporters.Dot = function() {};
/**
 * @extends {Mocha.reporters.Base}
 * @constructor
 * @struct
 */
Mocha.reporters.HTML = function() {};
/**
 * @extends {Mocha.reporters.Base}
 * @constructor
 * @struct
 */
Mocha.reporters.HTMLCov = function() {};
/**
 * @extends {Mocha.reporters.Base}
 * @constructor
 * @struct
 */
Mocha.reporters.JSON = function() {};
/**
 * @extends {Mocha.reporters.Base}
 * @constructor
 * @struct
 */
Mocha.reporters.JSONCov = function() {};
/**
 * @extends {Mocha.reporters.Base}
 * @constructor
 * @struct
 */
Mocha.reporters.JSONStream = function() {};
/**
 * @extends {Mocha.reporters.Base}
 * @constructor
 * @struct
 */
Mocha.reporters.Landing = function() {};
/**
 * @extends {Mocha.reporters.Base}
 * @constructor
 * @struct
 */
Mocha.reporters.List = function() {};
/**
 * @extends {Mocha.reporters.Base}
 * @constructor
 * @struct
 */
Mocha.reporters.Markdown = function() {};
/**
 * @extends {Mocha.reporters.Base}
 * @constructor
 * @struct
 */
Mocha.reporters.Min = function() {};
/**
 * @extends {Mocha.reporters.Base}
 * @constructor
 * @struct
 */
Mocha.reporters.Nyan = function() {};

/**
 * @constructor
 * @struct
 * @param {!Mocha.IRunner} runner
 * @param {{open: string, complete: string, incomplete: string, close: string}=} options
 */
Mocha.reporters.Progress = function(runner, options) {};
/**
 * @extends {Mocha.reporters.Base}
 * @constructor
 * @struct
 */
Mocha.reporters.Spec = function() {};
/**
 * @extends {Mocha.reporters.Base}
 * @constructor
 * @struct
 */
Mocha.reporters.TAP = function() {};

/**
 * @constructor
 * @struct
 * @param {!Mocha.IRunner} runner
 * @param {?=} options
 */
Mocha.reporters.XUnit = function(runner, options) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "mocha"
/** @const */
tsickle_declare_module.mocha = {};

/* TODO: ExportAssignment in tsickle_declare_module.mocha */
