/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/photoswipe/index.d.ts:
/** @const */
var PhotoSwipe = {};
/**
 * @record
 * @struct
 */
PhotoSwipe.Item = function() {};
 /** @type {string} */
PhotoSwipe.Item.prototype.src;
 /** @type {number} */
PhotoSwipe.Item.prototype.w;
 /** @type {number} */
PhotoSwipe.Item.prototype.h;
 /** @type {boolean} */
PhotoSwipe.Item.prototype.loadError;
 /** @type {{top: number, bottom: number}} */
PhotoSwipe.Item.prototype.vGap;
 /** @type {number} */
PhotoSwipe.Item.prototype.fitRatio;
 /** @type {number} */
PhotoSwipe.Item.prototype.initialZoomLevel;
 /** @type {?} */
PhotoSwipe.Item.prototype.bounds;
 /** @type {?} */
PhotoSwipe.Item.prototype.initialPosition;
/**
 * @record
 * @struct
 */
PhotoSwipe.Options = function() {};
 /** @type {number} */
PhotoSwipe.Options.prototype.index;
 /** @type {function(number): {x: number, y: number, w: number}} */
PhotoSwipe.Options.prototype.getThumbBoundsFn;
 /** @type {number} */
PhotoSwipe.Options.prototype.showAnimationDuration;
 /** @type {number} */
PhotoSwipe.Options.prototype.hideAnimationDuration;
 /** @type {boolean} */
PhotoSwipe.Options.prototype.showHideOpacity;
 /** @type {number} */
PhotoSwipe.Options.prototype.bgOpacity;
 /** @type {number} */
PhotoSwipe.Options.prototype.spacing;
 /** @type {boolean} */
PhotoSwipe.Options.prototype.allowNoPanText;
 /** @type {number} */
PhotoSwipe.Options.prototype.maxSpreadZoom;
 /** @type {function(boolean, !PhotoSwipe.Item): number} */
PhotoSwipe.Options.prototype.getDoubleTapZoom;
 /** @type {boolean} */
PhotoSwipe.Options.prototype.loop;
 /** @type {boolean} */
PhotoSwipe.Options.prototype.pinchToClose;
 /** @type {boolean} */
PhotoSwipe.Options.prototype.closeOnScroll;
 /** @type {boolean} */
PhotoSwipe.Options.prototype.closeOnVerticalDrag;
 /** @type {boolean} */
PhotoSwipe.Options.prototype.mouseUsed;
 /** @type {boolean} */
PhotoSwipe.Options.prototype.escKey;
 /** @type {boolean} */
PhotoSwipe.Options.prototype.arrowKeys;
 /** @type {boolean} */
PhotoSwipe.Options.prototype.history;
 /** @type {number} */
PhotoSwipe.Options.prototype.galleryUID;
 /** @type {string} */
PhotoSwipe.Options.prototype.errorMsg;
 /** @type {!Array<number>} */
PhotoSwipe.Options.prototype.preload;
 /** @type {string} */
PhotoSwipe.Options.prototype.mainClass;
 /** @type {number} */
PhotoSwipe.Options.prototype.mainScrollEndFriction;
 /** @type {number} */
PhotoSwipe.Options.prototype.panEndFriction;
 /** @type {function(): number} */
PhotoSwipe.Options.prototype.getNumItemsFn;
 /** @type {boolean} */
PhotoSwipe.Options.prototype.focus;
 /** @type {function(!HTMLElement): boolean} */
PhotoSwipe.Options.prototype.isClickableElement;
 /** @type {boolean} */
PhotoSwipe.Options.prototype.modal;
/**
 * @record
 * @struct
 */
PhotoSwipe.UIFramework = function() {};

/* TODO: IndexSignature: PhotoSwipe */
/**
 * @record
 * @struct
 */
PhotoSwipe.UI = function() {};
 /** @type {function(): void} */
PhotoSwipe.UI.prototype.init;
 /** @type {!PhotoSwipe.Item} */
PhotoSwipe.prototype.currItem;
 /** @type {!Array<!PhotoSwipe.Item>} */
PhotoSwipe.prototype.items;
 /** @type {{x: number, y: number}} */
PhotoSwipe.prototype.viewportSize;
 /** @type {!PhotoSwipe.UIFramework} */
PhotoSwipe.prototype.framework;
 /** @type {!PhotoSwipe.UI<T>} */
PhotoSwipe.prototype.ui;
 /** @type {!HTMLElement} */
PhotoSwipe.prototype.bg;
 /** @type {!HTMLElement} */
PhotoSwipe.prototype.container;
 /** @type {T} */
PhotoSwipe.prototype.options;

/**
 * Current item index.
 * @return {number}
 */
PhotoSwipe.prototype.getCurrentIndex = function() {};

/**
 * Current zoom level.
 * @return {number}
 */
PhotoSwipe.prototype.getZoomLevel = function() {};

/**
 * Whether one (or more) pointer is used.
 * @return {boolean}
 */
PhotoSwipe.prototype.isDragging = function() {};

/**
 * Whether two (or more) pointers are used.
 * @return {boolean}
 */
PhotoSwipe.prototype.isZooming = function() {};

/**
 * true wehn transition between is running (after swipe).
 * @return {boolean}
 */
PhotoSwipe.prototype.isMainScrollAnimating = function() {};

/**
 * Initialize and open gallery (you can bind events before this method).
 * @return {void}
 */
PhotoSwipe.prototype.init = function() {};

/**
 * Go to slide by index.
 * @param {number} index
 * @return {void}
 */
PhotoSwipe.prototype.goTo = function(index) {};

/**
 * Go to the next slide.
 * @return {void}
 */
PhotoSwipe.prototype.next = function() {};

/**
 * Go to the previous slide.
 * @return {void}
 */
PhotoSwipe.prototype.prev = function() {};

/**
 * Update gallery size
 * @param {boolean} force
 * @return {void}
 */
PhotoSwipe.prototype.updateSize = function(force) {};

/**
 * Close gallery. Calls destroy() after closing.
 * @return {void}
 */
PhotoSwipe.prototype.close = function() {};

/**
 * Destroy gallery (unbind listeners, free memory). Automatically called after close().
 * @return {void}
 */
PhotoSwipe.prototype.destroy = function() {};

/**
 * Zoom in/out the current slide to a specified zoom level, optionally with animation.
 * 
 *                                    Use `pswp.currItem.fitRatio - image` to zoom the image to perfectly fit into the viewport.
 *                                    This method is passed in the percentage that the animation is finished (from 0 to 1) and should return an eased value (which should be 0 at the start and 1 at the end).
 *                                    This method is passed the eased zoom level.
 * 
 * Example below will 2x zoom to center of slide:
 * 
 * pswp.zoomTo(2, {x:pswp.viewportSize.x/2,y:pswp.viewportSize.y/2}, 2000, false, function(now) {});
 * 
 * @param {number} destZoomLevel
 * @param {{x: number, y: number}} centerPoint
 * @param {number} speed
 * @param {function(number): number=} easingFn
 * @param {function(number): void=} updateFn
 * @return {void}
 */
PhotoSwipe.prototype.zoomTo = function(destZoomLevel, centerPoint, speed, easingFn, updateFn) {};

/**
 * Apply zoom and pan to the current slide
 * 
 * 
 * For example: `pswp.applyZoomPan(1, 0, 0)`
 * will zoom current image to the original size
 * and will place it on top left corner.
 * 
 * @param {number} zoomLevel
 * @param {number} panX
 * @param {number} panY
 * @return {void}
 */
PhotoSwipe.prototype.applyZoomPan = function(zoomLevel, panX, panY) {};

/**
 * Call this method after dynamically modifying the current, next, or previous slide in the items array.
 * @return {void}
 */
PhotoSwipe.prototype.invalidateCurrItems = function() {};

/**
 * PhotoSwipe uses very simple Event/Messaging system.
 * It has two methods shout (triggers event) and listen (handles event).
 * For now there is no method to unbind listener, but all of them are cleared when PhotoSwipe is closed.
 * Called before slides change (before the content is changed ,but after navigation). Update UI here.
 * Called after slides change (after content has changed).
 * Called when an image is loaded.
 * Called when the viewport size changes.
 * Triggers when PhotoSwipe reads slide object data, which happens before content is set, or before lazy-loading is initiated.
 * Use it to dynamically change properties of the slide object.
 * Called when mouse is first used (triggers only once).
 * Called when opening zoom in animation starting.
 * Called when opening zoom in animation finished.
 * Called when closing zoom out animation started.
 * Called when closing zoom out animation finished.
 * Allows overriding vertical margin for individual items.
 * 
 * Example:
 * 
 * pswp.listen('parseVerticalMargin', function(item) {
 *     var gap = item.vGap;
 * 
 *     gap.top = 50; // There will be 50px gap from top of viewport
 *     gap.bottom = 100; // and 100px gap from the bottom
 * });
 * Called when the gallery starts closing.
 * Gallery unbinds events (triggers before closing animation).
 * Called after the gallery is closed and the closing animation finishes.
 * Clean up your stuff here.
 * Allow to call preventDefault on down and up events.
 * @param {string} eventName
 * @param {function(!Array<?>): void|function(): void|function(number, !PhotoSwipe.Item): void|function(!PhotoSwipe.Item): void|function(!MouseEvent, boolean, {prevent: boolean}): void} callback
 * @return {void}
 */
PhotoSwipe.prototype.listen = function(eventName, callback) {};

/**
 * Triggers eventName event with args passed through to listeners.
 * @param {string} eventName
 * @param {...?} args
 * @return {void}
 */
PhotoSwipe.prototype.shout = function(eventName, args) {};

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
