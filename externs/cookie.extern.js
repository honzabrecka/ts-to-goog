/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cookie/index.d.ts:
/**
 * @record
 * @struct
 */
function CookieSerializeOptions() {}
 /** @type {string} */
CookieSerializeOptions.prototype.domain;
 /** @type {!Date} */
CookieSerializeOptions.prototype.expires;
 /** @type {boolean} */
CookieSerializeOptions.prototype.httpOnly;
 /** @type {number} */
CookieSerializeOptions.prototype.maxAge;
 /** @type {string} */
CookieSerializeOptions.prototype.path;
 /** @type {(boolean|string)} */
CookieSerializeOptions.prototype.sameSite;
 /** @type {boolean} */
CookieSerializeOptions.prototype.secure;

/**
 * Specifies a function that will be used to encode a cookie's value. Since
 * value of a cookie has a limited character set (and must be a simple
 * string), this function can be used to encode a value into a string suited
 * for a cookie's value.
 * 
 * The default function is the global `encodeURIComponent`, which will
 * encode a JavaScript string into UTF-8 byte sequences and then URL-encode
 * any that fall outside of the cookie range.
 * @param {string} val
 * @return {string}
 */
CookieSerializeOptions.prototype.encode = function(val) {};
/**
 * @record
 * @struct
 */
function CookieParseOptions() {}

/**
 * Specifies a function that will be used to decode a cookie's value. Since
 * the value of a cookie has a limited character set (and must be a simple
 * string), this function can be used to decode a previously-encoded cookie
 * value into a JavaScript string or other object.
 * 
 * The default function is the global `decodeURIComponent`, which will decode
 * any URL-encoded sequences into their byte representations.
 * 
 * *Note* if an error is thrown from this function, the original, non-decoded
 * cookie value will be returned as the cookie's value.
 * @param {string} val
 * @return {string}
 */
CookieParseOptions.prototype.decode = function(val) {};

/**
 * Parse an HTTP Cookie header string and returning an object of all cookie
 * name-value pairs.
 * 
 * @param {string} str the string representing a `Cookie` header value
 * @param {?=} options object containing parsing options
 * @return {?}
 */
function parse(str, options) {}

/**
 * Serialize a cookie name-value pair into a `Set-Cookie` header string.
 * 
 * @param {string} name the name for the cookie
 * @param {string} val value to set the cookie to
 * @param {?=} options object containing serialization options
 * @return {string}
 */
function serialize(name, val, options) {}
