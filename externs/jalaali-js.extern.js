/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jalaali-js/index.d.ts:
/**
 * @record
 * @struct
 */
function JalaaliDateObject() {}
 /** @type {number} */
JalaaliDateObject.prototype.jy;
 /** @type {number} */
JalaaliDateObject.prototype.jm;
 /** @type {number} */
JalaaliDateObject.prototype.jd;
/**
 * @record
 * @struct
 */
function GregorianDateObject() {}
 /** @type {number} */
GregorianDateObject.prototype.gy;
 /** @type {number} */
GregorianDateObject.prototype.gm;
 /** @type {number} */
GregorianDateObject.prototype.gd;
/**
 * @record
 * @struct
 */
function JalCalResult() {}
 /** @type {number} */
JalCalResult.prototype.leap;
 /** @type {number} */
JalCalResult.prototype.gy;
 /** @type {number} */
JalCalResult.prototype.march;

/**
 * Converts a Gregorian date to Jalaali.
 * Converts a Gregorian Date object to Jalaali.
 * @param {number|!Date} gy_or_date Gregorian Calendar year (years BC numbered 0, -1, -2, ...) / Gregorian Date object
 * @param {number=} gm Gregorian Calendar month (1 to 12)
 * @param {number=} gd Gregorian Calendar day of the month (1 to 28/29/30/31)
 * @return {?}
 */
function toJalaali(gy_or_date, gm, gd) {}

/**
 * Converts a Jalaali date to Gregorian.
 * @param {number} jy Jalaali Calendar year (years BC numbered 0, -1, -2, ...)
 * @param {number} jm Jalaali Calendar month (1 to 12)
 * @param {number} jd Jalaali Calendar day of the month (1 to 28/29/30/31)
 * @return {?}
 */
function toGregorian(jy, jm, jd) {}

/**
 * Checks whether a Jalaali date is valid or not.
 * @param {number} jy Jalaali Calendar year (years BC numbered 0, -1, -2, ...)
 * @param {number} jm Jalaali Calendar month (1 to 12)
 * @param {number} jd Jalaali Calendar day of the month (1 to 28/29/30/31)
 * @return {boolean}
 */
function isValidJalaaliDate(jy, jm, jd) {}

/**
 * Check if this is a leap year.
 * @param {number} jy Jalaali Calendar year (years BC numbered 0, -1, -2, ...)
 * @return {boolean}
 */
function isLeapJalaaliYear(jy) {}

/**
 * Number of days in a given month in a Jalaali year.
 * @param {number} jy Jalaali Calendar year (years BC numbered 0, -1, -2, ...)
 * @param {number} jm Jalaali Calendar month (1 to 12)
 * @return {number}
 */
function jalaaliMonthLength(jy, jm) {}

/**
 * This function determines if the Jalaali (Persian) year is
 * leap (366-day long) or is the common year (365 days), and
 * finds the day in March (Gregorian calendar) of the first
 * day of the Jalaali year (jy).
 * \@see: http://www.astro.uni.torun.pl/~kb/Papers/EMP/PersianC-EMP.htm
 * \@see: http://www.fourmilab.ch/documents/calendar/
 * @param {number} jy Jalaali calendar year (-61 to 3177)
 * @return {?} 
 *   leap: number of years since the last leap year (0 to 4)
 *   gy: Gregorian year of the beginning of Jalaali year
 *   march: the March day of Farvardin the 1st (1st day of jy)
 */
function jalCal(jy) {}

/**
 * Converts a date of the Jalaali calendar to the Julian Day number.
 * @param {number} jy Jalaali year (1 to 3100)
 * @param {number} jm Jalaali month (1 to 12)
 * @param {number} jd Jalaali day (1 to 29/31)
 * @return {number} Julian Day number
 */
function j2d(jy, jm, jd) {}

/**
 * Converts the Julian Day number to a date in the Jalaali calendar.
 * @param {number} jdn Julian Day number
 * @return {?} 
 *   jy: Jalaali Calendar year (1 to 3100)
 *   jm: Jalaali Calendar month (1 to 12)
 *   jd: Jalaali Calendar day (1 to 29/31)
 */
function d2j(jdn) {}

/**
 * Calculates the Julian Day number from Gregorian or Julian
 * calendar dates. This integer number corresponds to the noon of
 * the date (i.e. 12 hours of Universal Time).
 * The procedure was tested to be good since 1 March, -100100 (of both
 * calendars) up to a few million years into the future.
 * @param {number} gy Gregorian Calendar year (years BC numbered 0, -1, -2, ...)
 * @param {number} gm Gregorian Calendar month (1 to 12)
 * @param {number} gd Gregorian Calendar day of the month (1 to 28/29/30/31)
 * @return {number} Julian Day number
 */
function g2d(gy, gm, gd) {}

/**
 * Calculates Gregorian and Julian calendar dates from the Julian Day number
 * (jdn) for the period since jdn=-34839655 (i.e. the year -100100 of both
 * calendars) to some millions years ahead of the present.
 * @param {number} jdn Julian Day number
 * @return {?} 
 *   gy: Gregorian Calendar year (years BC numbered 0, -1, -2, ...)
 *   gm: Gregorian Calendar month (1 to 12)
 *   gd: Gregorian Calendar day of the month M (1 to 28/29/30/31)
 */
function d2g(jdn) {}
