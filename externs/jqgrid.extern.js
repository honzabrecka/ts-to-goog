/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jqgrid/index.d.ts:
/**
 * @record
 * @struct
 */
function JQueryJqGridColumn() {}
 /** @type {string} */
JQueryJqGridColumn.prototype.align;
 /** @type {function(?, ?, ?, ?, ?): string} */
JQueryJqGridColumn.prototype.cellattr;
 /** @type {string} */
JQueryJqGridColumn.prototype.classes;
 /** @type {string} */
JQueryJqGridColumn.prototype.datefmt;
 /** @type {boolean} */
JQueryJqGridColumn.prototype.editable;
 /** @type {(string|function(?, {rowId: ?, colModel: ?}, ?): ?)} */
JQueryJqGridColumn.prototype.formatter;
 /** @type {boolean} */
JQueryJqGridColumn.prototype.hidden;
 /** @type {string} */
JQueryJqGridColumn.prototype.index;
 /** @type {boolean} */
JQueryJqGridColumn.prototype.key;
 /** @type {string} */
JQueryJqGridColumn.prototype.label;
 /** @type {string} */
JQueryJqGridColumn.prototype.name;
 /** @type {boolean} */
JQueryJqGridColumn.prototype.search;
 /** @type {boolean} */
JQueryJqGridColumn.prototype.sortable;
 /** @type {number} */
JQueryJqGridColumn.prototype.width;
/**
 * @record
 * @struct
 */
function IJqGridJsonReader() {}
 /** @type {boolean} */
IJqGridJsonReader.prototype.repeatitems;
 /** @type {(string|function(?): ?)} */
IJqGridJsonReader.prototype.root;
 /** @type {(string|function(?): number)} */
IJqGridJsonReader.prototype.page;
 /** @type {(string|function(?): number)} */
IJqGridJsonReader.prototype.total;
 /** @type {(string|function({data: !Array<?>}): number)} */
IJqGridJsonReader.prototype.records;
/**
 * @record
 * @struct
 */
function JQueryJqGridOptions() {}
 /** @type {boolean} */
JQueryJqGridOptions.prototype.autoencode;
 /** @type {boolean} */
JQueryJqGridOptions.prototype.autoWidth;
 /** @type {string} */
JQueryJqGridOptions.prototype.caption;
 /** @type {!Array<!JQueryJqGridColumn>} */
JQueryJqGridOptions.prototype.colModel;
 /** @type {!Array<string>} */
JQueryJqGridOptions.prototype.colNames;
 /** @type {!Array<?>} */
JQueryJqGridOptions.prototype.data;
 /** @type {(!Function|string)} */
JQueryJqGridOptions.prototype.datatype;
 /** @type {boolean} */
JQueryJqGridOptions.prototype.forceFit;
 /** @type {boolean} */
JQueryJqGridOptions.prototype.gridview;
 /** @type {(string|number)} */
JQueryJqGridOptions.prototype.height;
 /** @type {boolean} */
JQueryJqGridOptions.prototype.loadonce;
 /** @type {!IJqGridJsonReader} */
JQueryJqGridOptions.prototype.jsonReader;
 /** @type {string} */
JQueryJqGridOptions.prototype.mtype;
 /** @type {boolean} */
JQueryJqGridOptions.prototype.multiboxonly;
 /** @type {boolean} */
JQueryJqGridOptions.prototype.multiselect;
 /** @type {string} */
JQueryJqGridOptions.prototype.pager;
 /** @type {!Array<number>} */
JQueryJqGridOptions.prototype.rowList;
 /** @type {number} */
JQueryJqGridOptions.prototype.rowNum;
 /** @type {(number|boolean)} */
JQueryJqGridOptions.prototype.shrinkToFit;
 /** @type {string} */
JQueryJqGridOptions.prototype.sortname;
 /** @type {string} */
JQueryJqGridOptions.prototype.sortorder;
 /** @type {string} */
JQueryJqGridOptions.prototype.url;
 /** @type {boolean} */
JQueryJqGridOptions.prototype.viewrecords;
 /** @type {number} */
JQueryJqGridOptions.prototype.width;
 /** @type {function(): void} */
JQueryJqGridOptions.prototype.gridComplete;
 /** @type {function(?, number, number, !Event): void} */
JQueryJqGridOptions.prototype.onRightClickRow;
 /** @type {function(string, ?, !Event): void} */
JQueryJqGridOptions.prototype.onSelectRow;
/**
 * @record
 * @struct
 */
function JQueryJqGridStatic() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */
 /** @type {!JQueryJqGridStatic} */
JQueryStatic.prototype.jqGrid;
 /** @type {!JQueryJqGridStatic} */
JQuery.prototype.jqGrid;

/**
 * Populates a grid with the passed data (an array)
 * @param {!Array<?>} data
 * @return {void}
 */
JQuery.prototype.addJSONData = function(data) {};

/**
 * Edits the row specified by rowid.
 * keys is a boolean value, indicating if to use the Enter key to accept the value ane Esc to cancel the edit, or not.
 * @param {?} rowid the id of the row to edit
 * @param {boolean=} keys when set to true we can use [Enter] key to save the row and [Esc] to cancel editing
 * @return {void}
 */
JQuery.prototype.editRow = function(rowid, keys) {};

/**
 * Returns the value of the requested parameter. name is the name from the options array. If the name is not set, the entry options are returned.
 * @param {string} name
 * @return {?}
 */
JQuery.prototype.getGridParam = function(name) {};

/**
 * This method restores the data to original values before the editing of the row
 * @param {?} rowId the row to restore
 * @param {function(?): void=} afterRestoreFunc if defined this function is called in after the row is restored.
 * @return {void}
 */
JQuery.prototype.restoreRow = function(rowId, afterRestoreFunc) {};

/**
 * Saves the edited row.
 * Saves the edited row.
 * @param {string} rowid the id of the row to save
 * @param {function(?): boolean|boolean=} successfunc
 * @param {string=} url if defined, this parameter replaces the editurl parameter from the options array. If set to 'clientArray', the data is not posted to the server but rather is saved only to the grid (presumably for later manual saving).
 * @param {?=} extraparam an array of type name: value. When set these values are posted along with the other values to the server.
 * @return {void}
 */
JQuery.prototype.saveRow = function(rowid, successfunc, url, extraparam) {};

/**
 * Sets a particular parameter.
 * Note - for some parameters to take effect a trigger("reloadGrid") should be executed.
 * Note that with this method we can override events.
 * The name (in the name:value pair) is the name from options array
 * @param {?} obj
 * @return {void}
 */
JQuery.prototype.setGridParam = function(obj) {};
