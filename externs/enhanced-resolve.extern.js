/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/enhanced-resolve/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */
/** @const */
var Resolve = {};

/**
 * @param {string|?} path_or_context
 * @param {string} request_or_path
 * @param {string=} request
 * @return {string}
 */
Resolve.sync = function(path_or_context, request_or_path, request) {};

/**
 * @param {string|?} path_or_context
 * @param {string} request_or_path
 * @param {?|string} callback_or_request
 * @param {?=} callback
 * @return {void}
 */
Resolve.context = function(path_or_context, request_or_path, callback_or_request, callback) {};

/**
 * @param {string|?} path_or_context
 * @param {string} request_or_path
 * @param {string=} request
 * @return {string}
 */
Resolve.context.sync = function(path_or_context, request_or_path, request) {};

/**
 * @param {string|?} path_or_context
 * @param {string} request_or_path
 * @param {?|string} callback_or_request
 * @param {?=} callback
 * @return {void}
 */
Resolve.loader = function(path_or_context, request_or_path, callback_or_request, callback) {};

/**
 * @param {string|?} path_or_context
 * @param {string} request_or_path
 * @param {string=} request
 * @return {string}
 */
Resolve.loader.sync = function(path_or_context, request_or_path, request) {};

/**
 * @param {!Resolve.ResolverFactory.ResolverOption} options
 * @return {?}
 */
Resolve.create = function(options) {};

/**
 * @param {!Resolve.ResolverFactory.ResolverOption} options
 * @return {?}
 */
Resolve.create.sync = function(options) {};
/** @const */
Resolve.ResolverFactory = {};
/**
 * @record
 * @struct
 */
Resolve.ResolverFactory.ResolverOption = function() {};
 /** @type {(!Array<!Resolve.ResolverFactory.AliasItem>|?)} */
Resolve.ResolverFactory.ResolverOption.prototype.alias;
 /** @type {!Array<string>} */
Resolve.ResolverFactory.ResolverOption.prototype.aliasFields;
 /** @type {function(?): boolean} */
Resolve.ResolverFactory.ResolverOption.prototype.cachePredicate;
 /** @type {!Array<string>} */
Resolve.ResolverFactory.ResolverOption.prototype.descriptionFiles;
 /** @type {boolean} */
Resolve.ResolverFactory.ResolverOption.prototype.enforceExtension;
 /** @type {boolean} */
Resolve.ResolverFactory.ResolverOption.prototype.enforceModuleExtension;
 /** @type {!Array<string>} */
Resolve.ResolverFactory.ResolverOption.prototype.extensions;
 /** @type {?} */
Resolve.ResolverFactory.ResolverOption.prototype.fileSystem;
 /** @type {!Array<string>} */
Resolve.ResolverFactory.ResolverOption.prototype.mainFields;
 /** @type {!Array<string>} */
Resolve.ResolverFactory.ResolverOption.prototype.mainFiles;
 /** @type {!Array<string>} */
Resolve.ResolverFactory.ResolverOption.prototype.moduleExtensions;
 /** @type {!Array<string>} */
Resolve.ResolverFactory.ResolverOption.prototype.modules;
 /** @type {!Array<!Tapable.Plugin>} */
Resolve.ResolverFactory.ResolverOption.prototype.plugins;
 /** @type {!Resolver} */
Resolve.ResolverFactory.ResolverOption.prototype.resolver;
 /** @type {boolean} */
Resolve.ResolverFactory.ResolverOption.prototype.resolveToContext;
 /** @type {(boolean|!Array<string>)} */
Resolve.ResolverFactory.ResolverOption.prototype.symlinks;
 /** @type {(boolean|?)} */
Resolve.ResolverFactory.ResolverOption.prototype.unsafeCache;
 /** @type {boolean} */
Resolve.ResolverFactory.ResolverOption.prototype.useSyncFileSystemCalls;
/**
 * @record
 * @struct
 */
Resolve.ResolverFactory.AliasItem = function() {};
 /** @type {string} */
Resolve.ResolverFactory.AliasItem.prototype.alias;
 /** @type {string} */
Resolve.ResolverFactory.AliasItem.prototype.name;
 /** @type {boolean} */
Resolve.ResolverFactory.AliasItem.prototype.onlyModule;

/**
 * @param {!Resolve.ResolverFactory.ResolverOption} options
 * @return {!Resolver}
 */
Resolve.ResolverFactory.createResolver = function(options) {};
/**
 * @constructor
 * @struct
 */
Resolve.NodeJsInputFileSystem = function() {};

/**
 * @param {string} path
 * @param {function(!NodeJS.ErrnoException, !Stats): ?=} callback
 * @return {void}
 */
Resolve.NodeJsInputFileSystem.prototype.stat = function(path, callback) {};

/**
 * @param {string} path
 * @param {function(!Error, !Array<string>): void} callback
 * @return {void}
 */
Resolve.NodeJsInputFileSystem.prototype.readdir = function(path, callback) {};

/**
 * @param {string} filename
 * @param {string|{encoding: string, flag: string}|{flag: string}|function(!NodeJS.ErrnoException, ?): void} encoding_or_options_or_callback
 * @param {function(!NodeJS.ErrnoException, string): void|function(!NodeJS.ErrnoException, ?): void=} callback
 * @return {void}
 */
Resolve.NodeJsInputFileSystem.prototype.readFile = function(filename, encoding_or_options_or_callback, callback) {};

/**
 * @param {string} path
 * @param {function(!NodeJS.ErrnoException, string): ?=} callback
 * @return {void}
 */
Resolve.NodeJsInputFileSystem.prototype.readlink = function(path, callback) {};

/**
 * @param {(string|?)} path
 * @return {!Stats}
 */
Resolve.NodeJsInputFileSystem.prototype.statSync = function(path) {};

/**
 * @param {string} path
 * @return {!Array<string>}
 */
Resolve.NodeJsInputFileSystem.prototype.readdirSync = function(path) {};

/**
 * @param {string} filename
 * @param {string|{encoding: string, flag: string}|{flag: string}=} encoding_or_options
 * @return {string|?}
 */
Resolve.NodeJsInputFileSystem.prototype.readFileSync = function(filename, encoding_or_options) {};

/**
 * @param {(string|?)} path
 * @return {string}
 */
Resolve.NodeJsInputFileSystem.prototype.readlinkSync = function(path) {};

/**
 * @constructor
 * @struct
 * @param {?} fileSystem
 * @param {number} duration
 */
Resolve.CachedInputFileSystem = function(fileSystem, duration) {};
 /** @type {?} */
Resolve.CachedInputFileSystem.prototype.fileSystem;

/**
 * @param {string} path
 * @param {function(!NodeJS.ErrnoException, !Stats): void} callback
 * @return {void}
 */
Resolve.CachedInputFileSystem.prototype.stat = function(path, callback) {};

/**
 * @param {string} path
 * @param {function(!NodeJS.ErrnoException, !Array<string>): void} callback
 * @return {void}
 */
Resolve.CachedInputFileSystem.prototype.readdir = function(path, callback) {};

/**
 * @param {string} path
 * @param {function(!NodeJS.ErrnoException, ?): void} callback
 * @return {void}
 */
Resolve.CachedInputFileSystem.prototype.readFile = function(path, callback) {};

/**
 * @param {string} path
 * @param {function(!NodeJS.ErrnoException, ?): void} callback
 * @return {void}
 */
Resolve.CachedInputFileSystem.prototype.readJson = function(path, callback) {};

/**
 * @param {string} path
 * @param {function(!NodeJS.ErrnoException, string): void} callback
 * @return {void}
 */
Resolve.CachedInputFileSystem.prototype.readlink = function(path, callback) {};

/**
 * @param {(string|?)} path
 * @return {!Stats}
 */
Resolve.CachedInputFileSystem.prototype.statSync = function(path) {};

/**
 * @param {string} path
 * @return {!Array<string>}
 */
Resolve.CachedInputFileSystem.prototype.readdirSync = function(path) {};

/**
 * @param {string} filename
 * @param {{flag: string}=} options
 * @return {?}
 */
Resolve.CachedInputFileSystem.prototype.readFileSync = function(filename, options) {};

/**
 * @param {(string|?)} path
 * @return {string}
 */
Resolve.CachedInputFileSystem.prototype.readlinkSync = function(path) {};

/**
 * @param {string} path
 * @return {?}
 */
Resolve.CachedInputFileSystem.prototype.readJsonSync = function(path) {};

/**
 * @param {(string|!Array<string>)=} what
 * @return {void}
 */
Resolve.CachedInputFileSystem.prototype.purge = function(what) {};

/**
 * @param {string|?} path_or_context
 * @param {string} request_or_path
 * @param {?|string} callback_or_request
 * @param {?=} callback
 * @return {void}
 */
function Resolve(path_or_context, request_or_path, callback_or_request, callback) {}

/* TODO: ExportAssignment in  */
