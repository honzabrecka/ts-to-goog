/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/switchery/index.d.ts:
 /** @type {!Switchery.SwitcheryStatic} */
var switchery;

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
/** @const */
var Switchery = {};
/**
 * @record
 * @struct
 */
Switchery.SwitcheryStatic = function() {};

/* TODO: ConstructSignature: Switchery */
/**
 * @record
 * @struct
 */
Switchery.Options = function() {};
 /** @type {string} */
Switchery.Options.prototype.color;
 /** @type {string} */
Switchery.Options.prototype.secondaryColor;
 /** @type {string} */
Switchery.Options.prototype.jackColor;
 /** @type {string} */
Switchery.Options.prototype.jackSecondaryColor;
 /** @type {string} */
Switchery.Options.prototype.className;
 /** @type {boolean} */
Switchery.Options.prototype.disabled;
 /** @type {number} */
Switchery.Options.prototype.disabledOpacity;
 /** @type {string} */
Switchery.Options.prototype.speed;
 /** @type {string} */
Switchery.Options.prototype.size;

/**
 * Unbinding all event handlers attached to the switch element to prepare the object for garbage collection.
 * @return {void}
 */
Switchery.prototype.destroy = function() {};

/**
 * Enable disabled switch by re-adding event handlers and changing the opacity to 1.
 * @return {void}
 */
Switchery.prototype.enable = function() {};

/**
 * Disable switch by unbinding attached events and changing opacity to disabledOpacity value
 * @return {void}
 */
Switchery.prototype.disable = function() {};

/**
 * Check if switch is currently disabled by checking the readonly and disabled attributes on the checkbox and the disabled option set via JS.
 *  If any of those are present, the returned value is true.
 * @return {boolean}
 */
Switchery.prototype.isDisabled = function() {};
