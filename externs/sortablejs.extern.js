/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/sortablejs/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
/** @const */
var Sortablejs = {};
/**
 * @record
 * @struct
 */
Sortablejs.SortableOptions = function() {};
 /** @type {?} */
Sortablejs.SortableOptions.prototype.group;
 /** @type {boolean} */
Sortablejs.SortableOptions.prototype.sort;
 /** @type {number} */
Sortablejs.SortableOptions.prototype.delay;
 /** @type {boolean} */
Sortablejs.SortableOptions.prototype.disabled;
 /** @type {{get: function(!Sortablejs.Sortable): !Array<?>, set: function(!Sortablejs.Sortable): ?}} */
Sortablejs.SortableOptions.prototype.store;
 /** @type {number} */
Sortablejs.SortableOptions.prototype.animation;
 /** @type {string} */
Sortablejs.SortableOptions.prototype.handle;
 /** @type {?} */
Sortablejs.SortableOptions.prototype.filter;
 /** @type {string} */
Sortablejs.SortableOptions.prototype.draggable;
 /** @type {string} */
Sortablejs.SortableOptions.prototype.ghostClass;
 /** @type {string} */
Sortablejs.SortableOptions.prototype.chosenClass;
 /** @type {string} */
Sortablejs.SortableOptions.prototype.dataIdAttr;
 /** @type {boolean} */
Sortablejs.SortableOptions.prototype.forceFallback;
 /** @type {string} */
Sortablejs.SortableOptions.prototype.fallbackClass;
 /** @type {boolean} */
Sortablejs.SortableOptions.prototype.fallbackOnBody;
 /** @type {boolean} */
Sortablejs.SortableOptions.prototype.scroll;
 /** @type {number} */
Sortablejs.SortableOptions.prototype.scrollSensitivity;
 /** @type {number} */
Sortablejs.SortableOptions.prototype.scrollSpeed;
 /** @type {function(?, ?): ?} */
Sortablejs.SortableOptions.prototype.setData;
 /** @type {function(?): ?} */
Sortablejs.SortableOptions.prototype.onStart;
 /** @type {function(?): ?} */
Sortablejs.SortableOptions.prototype.onEnd;
 /** @type {function(?): ?} */
Sortablejs.SortableOptions.prototype.onAdd;
 /** @type {function(?): ?} */
Sortablejs.SortableOptions.prototype.onUpdate;
 /** @type {function(?): ?} */
Sortablejs.SortableOptions.prototype.onSort;
 /** @type {function(?): ?} */
Sortablejs.SortableOptions.prototype.onRemove;
 /** @type {function(?): ?} */
Sortablejs.SortableOptions.prototype.onFilter;
 /** @type {function(?): boolean} */
Sortablejs.SortableOptions.prototype.onMove;
/**
 * @record
 * @struct
 */
Sortablejs.SortableUtils = function() {};

/**
 * Attach an event handler function
 * @param {?} element
 * @param {string} event
 * @param {function(?): ?} fn
 * @return {void}
 */
Sortablejs.SortableUtils.prototype.on = function(element, event, fn) {};

/**
 * Remove an event handler function
 * @param {?} element
 * @param {string} event
 * @param {function(?): ?} fn
 * @return {void}
 */
Sortablejs.SortableUtils.prototype.off = function(element, event, fn) {};

/**
 * Get the values of all the CSS properties.
 * Get the value of style properties.
 * Set one CSS property.
 * Set CSS properties.
 * @param {?} element
 * @param {string|?=} prop_or_props
 * @param {string=} value
 * @return {?|void}
 */
Sortablejs.SortableUtils.prototype.css = function(element, prop_or_props, value) {};

/**
 * Get elements by tag name.
 * @param {?} context
 * @param {string} tagName
 * @param {function(?): ?=} iterator
 * @return {!Array<?>}
 */
Sortablejs.SortableUtils.prototype.find = function(context, tagName, iterator) {};

/**
 * Takes a function and returns a new one that will always have a particular context.
 * @param {?} context
 * @param {function(): ?} fn
 * @return {function(): ?}
 */
Sortablejs.SortableUtils.prototype.bind = function(context, fn) {};

/**
 * Check the current matched set of elements against a selector.
 * @param {?} element
 * @param {string} selector
 * @return {boolean}
 */
Sortablejs.SortableUtils.prototype.is = function(element, selector) {};

/**
 * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
 * @param {?} element
 * @param {string} selector
 * @param {?=} context
 * @return {?}
 */
Sortablejs.SortableUtils.prototype.closest = function(element, selector, context) {};

/**
 * Add or remove one classes from each element
 * @param {?} element
 * @param {string} name
 * @param {boolean} state
 * @return {void}
 */
Sortablejs.SortableUtils.prototype.toggleClass = function(element, name, state) {};
/**
 * @constructor
 * @struct
 */
Sortablejs.DOMRect = function() {};
 /** @type {number} */
Sortablejs.DOMRect.prototype.bottom;
 /** @type {number} */
Sortablejs.DOMRect.prototype.height;
 /** @type {number} */
Sortablejs.DOMRect.prototype.left;
 /** @type {number} */
Sortablejs.DOMRect.prototype.right;
 /** @type {number} */
Sortablejs.DOMRect.prototype.top;
 /** @type {number} */
Sortablejs.DOMRect.prototype.width;
 /** @type {number} */
Sortablejs.DOMRect.prototype.x;
 /** @type {number} */
Sortablejs.DOMRect.prototype.y;

/**
 * @constructor
 * @struct
 * Sortable's main constructor.
 * @param {?} element
 * @param {!Sortablejs.SortableOptions} options
 */
Sortablejs.Sortable = function(element, options) {};
 /** @type {!Sortablejs.SortableOptions} */
Sortablejs.Sortable.prototype.options;
 /** @type {?} */
Sortablejs.Sortable.prototype.el;
 /** @type {!Sortablejs.Sortable} */
Sortablejs.Sortable.active;
 /** @type {!Sortablejs.SortableUtils} */
Sortablejs.Sortable.utils;

/**
 * Creation of new instances.
 * @param {?} element
 * @param {!Sortablejs.SortableOptions} options
 * @return {!Sortablejs.Sortable}
 */
Sortablejs.Sortable.create = function(element, options) {};

/**
 * Options getter/setter
 * @param {string} name
 * @param {?=} value
 * @return {?}
 */
Sortablejs.Sortable.prototype.option = function(name, value) {};

/**
 * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
 * @param {?} element
 * @return {?}
 */
Sortablejs.Sortable.prototype.closest = function(element) {};

/**
 * Sorts the elements according to the array.
 * @param {!Array<string>} order
 * @return {void}
 */
Sortablejs.Sortable.prototype.sort = function(order) {};

/**
 * Saving and restoring of the sort.
 * @return {void}
 */
Sortablejs.Sortable.prototype.save = function() {};

/**
 * Removes the sortable functionality completely.
 * @return {void}
 */
Sortablejs.Sortable.prototype.destroy = function() {};

/**
 * Serializes the sortable's item data-id's (dataIdAttr option) into an array of string.
 * @return {!Array<string>}
 */
Sortablejs.Sortable.prototype.toArray = function() {};
