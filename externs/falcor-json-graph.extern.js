/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/falcor-json-graph/index.d.ts:

/* TODO: ExportAssignment in  */
/** @const */
var FalcorJsonGraph = {};
/**
 * @extends {FalcorJsonGraph.Sentinel}
 * @record
 * @struct
 */
FalcorJsonGraph.Atom = function() {};
 /** @type {string} */
FalcorJsonGraph.Atom.prototype.$type;
 /** @type {?} */
FalcorJsonGraph.Atom.prototype.value;
/**
 * @extends {FalcorJsonGraph.Sentinel}
 * @record
 * @struct
 */
FalcorJsonGraph.Error = function() {};
 /** @type {string} */
FalcorJsonGraph.Error.prototype.$type;
 /** @type {?} */
FalcorJsonGraph.Error.prototype.value;
/**
 * @record
 * @struct
 */
FalcorJsonGraph.InvalidPath = function() {};
 /** @type {!Array<(string|number|boolean|!FalcorJsonGraph.Range|!Array<(string|number|boolean|!FalcorJsonGraph.Range)>)>} */
FalcorJsonGraph.InvalidPath.prototype.path;
 /** @type {boolean} */
FalcorJsonGraph.InvalidPath.prototype.invalidate;

/** @typedef {(string|number|boolean)} */
FalcorJsonGraph.Key;

/** @typedef {(string|number|boolean|!FalcorJsonGraph.Range|!Array<(string|number|boolean|!FalcorJsonGraph.Range)>)} */
FalcorJsonGraph.KeySet;

/** @typedef {!Array<(string|number|boolean)>} */
FalcorJsonGraph.Path;

/** @typedef {!Array<(string|number|boolean|!FalcorJsonGraph.Range|!Array<(string|number|boolean|!FalcorJsonGraph.Range)>)>} */
FalcorJsonGraph.PathSet;
/**
 * @record
 * @struct
 */
FalcorJsonGraph.PathValue = function() {};
 /** @type {(string|!Array<(string|number|boolean|!FalcorJsonGraph.Range|!Array<(string|number|boolean|!FalcorJsonGraph.Range)>)>)} */
FalcorJsonGraph.PathValue.prototype.path;
 /** @type {?} */
FalcorJsonGraph.PathValue.prototype.value;
/**
 * @record
 * @struct
 */
FalcorJsonGraph.JSONEnvelope = function() {};
 /** @type {T} */
FalcorJsonGraph.JSONEnvelope.prototype.json;

/** @typedef {?} */
FalcorJsonGraph.JSONGraph;
/**
 * @record
 * @struct
 */
FalcorJsonGraph.JSONGraphEnvelope = function() {};
 /** @type {?} */
FalcorJsonGraph.JSONGraphEnvelope.prototype.jsonGraph;
 /** @type {!Array<!Array<(string|number|boolean|!FalcorJsonGraph.Range|!Array<(string|number|boolean|!FalcorJsonGraph.Range)>)>>} */
FalcorJsonGraph.JSONGraphEnvelope.prototype.paths;
 /** @type {!Array<!Array<(string|number|boolean|!FalcorJsonGraph.Range|!Array<(string|number|boolean|!FalcorJsonGraph.Range)>)>>} */
FalcorJsonGraph.JSONGraphEnvelope.prototype.invalidate;
/**
 * @record
 * @struct
 */
FalcorJsonGraph.Range = function() {};
 /** @type {number} */
FalcorJsonGraph.Range.prototype.from;
 /** @type {number} */
FalcorJsonGraph.Range.prototype.to;
 /** @type {number} */
FalcorJsonGraph.Range.prototype.length;
/**
 * @extends {FalcorJsonGraph.Sentinel}
 * @record
 * @struct
 */
FalcorJsonGraph.Reference = function() {};
 /** @type {string} */
FalcorJsonGraph.Reference.prototype.$type;
 /** @type {!Array<(string|number|boolean)>} */
FalcorJsonGraph.Reference.prototype.value;
/**
 * @record
 * @struct
 */
FalcorJsonGraph.Sentinel = function() {};
 /** @type {number} */
FalcorJsonGraph.Sentinel.prototype.$expires;

/**
 * @param {(string|!Array<(string|number|boolean|!FalcorJsonGraph.Range|!Array<(string|number|boolean|!FalcorJsonGraph.Range)>)>)} path
 * @param {!FalcorJsonGraph.Sentinel=} props
 * @return {!FalcorJsonGraph.Reference}
 */
FalcorJsonGraph.ref = function(path, props) {};

/**
 * @param {?} value
 * @param {!FalcorJsonGraph.Sentinel=} props
 * @return {!FalcorJsonGraph.Atom}
 */
FalcorJsonGraph.atom = function(value, props) {};

/**
 * @param {?} errorValue
 * @param {!FalcorJsonGraph.Sentinel=} props
 * @return {!FalcorJsonGraph.Error}
 */
FalcorJsonGraph.error = function(errorValue, props) {};

/**
 * @param {(string|!Array<(string|number|boolean|!FalcorJsonGraph.Range|!Array<(string|number|boolean|!FalcorJsonGraph.Range)>)>)} path
 * @param {?} value
 * @return {!FalcorJsonGraph.PathValue}
 */
FalcorJsonGraph.pathValue = function(path, value) {};

/**
 * @param {(string|!Array<(string|number|boolean|!FalcorJsonGraph.Range|!Array<(string|number|boolean|!FalcorJsonGraph.Range)>)>)} path
 * @return {!FalcorJsonGraph.InvalidPath}
 */
FalcorJsonGraph.pathInvalidation = function(path) {};
