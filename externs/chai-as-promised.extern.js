/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/chai-as-promised/index.d.ts:
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "chai-as-promised"
/** @const */
tsickle_declare_module.chai_as_promised = {};

/**
 * @param {?} chai
 * @param {?} utils
 * @return {void}
 */
tsickle_declare_module.chai_as_promised.chaiAsPromised = function(chai, utils) {};

/**
 * @param {!Chai.PromisedAssertion} assertion
 * @param {!PromiseLike<?>} promise
 * @return {void}
 */
tsickle_declare_module.chai_as_promised.chaiAsPromised.transferPromiseness = function(assertion, promise) {};

/**
 * @param {!Array<?>} values
 * @return {?}
 */
tsickle_declare_module.chai_as_promised.chaiAsPromised.transformAsserterArgs = function(values) {};

/* TODO: ExportAssignment in tsickle_declare_module.chai_as_promised */
 /** @type {!Chai.PromisedAssertion} */
Chai.Assertion.prototype.eventually;
 /** @type {!Chai.PromisedAssertion} */
Chai.Assertion.prototype.fulfilled;
 /** @type {!Chai.PromisedAssertion} */
Chai.Assertion.prototype.rejected;

/**
 * @param {?} expected
 * @return {!Chai.PromisedAssertion}
 */
Chai.Assertion.prototype.become = function(expected) {};

/**
 * @param {?} expected
 * @param {(string|!RegExp)=} message
 * @return {!Chai.PromisedAssertion}
 */
Chai.Assertion.prototype.rejectedWith = function(expected, message) {};

/**
 * @param {!Function} fn
 * @return {!Chai.PromisedAssertion}
 */
Chai.Assertion.prototype.notify = function(fn) {};
/**
 * @extends {Chai.PromisedLanguageChains}
 * @extends {Chai.PromisedNumericComparison}
 * @extends {Chai.PromisedTypeComparison}
 * @record
 * @struct
 */
Chai.Eventually = function() {};
 /** @type {!Chai.PromisedAssertion} */
Chai.Eventually.prototype.fulfilled;
 /** @type {!Chai.PromisedAssertion} */
Chai.Eventually.prototype.rejected;
 /** @type {!Chai.PromisedAssertion} */
Chai.Eventually.prototype.not;
 /** @type {!Chai.PromisedDeep} */
Chai.Eventually.prototype.deep;
 /** @type {!Chai.PromisedKeyFilter} */
Chai.Eventually.prototype.all;
 /** @type {!Chai.PromisedTypeComparison} */
Chai.Eventually.prototype.a;
 /** @type {!Chai.PromisedTypeComparison} */
Chai.Eventually.prototype.an;
 /** @type {!Chai.PromisedInclude} */
Chai.Eventually.prototype.include;
 /** @type {!Chai.PromisedInclude} */
Chai.Eventually.prototype.contain;
 /** @type {!Chai.PromisedAssertion} */
Chai.Eventually.prototype.ok;
 /** @type {!Chai.PromisedAssertion} */
Chai.Eventually.prototype.true;
 /** @type {!Chai.PromisedAssertion} */
Chai.Eventually.prototype.false;
 /** @type {!Chai.PromisedAssertion} */
Chai.Eventually.prototype.null;
 /** @type {!Chai.PromisedAssertion} */
Chai.Eventually.prototype.undefined;
 /** @type {!Chai.PromisedAssertion} */
Chai.Eventually.prototype.exist;
 /** @type {!Chai.PromisedAssertion} */
Chai.Eventually.prototype.empty;
 /** @type {!Chai.PromisedAssertion} */
Chai.Eventually.prototype.arguments;
 /** @type {!Chai.PromisedAssertion} */
Chai.Eventually.prototype.Arguments;
 /** @type {!Chai.PromisedEqual} */
Chai.Eventually.prototype.equal;
 /** @type {!Chai.PromisedEqual} */
Chai.Eventually.prototype.equals;
 /** @type {!Chai.PromisedEqual} */
Chai.Eventually.prototype.eq;
 /** @type {!Chai.PromisedEqual} */
Chai.Eventually.prototype.eql;
 /** @type {!Chai.PromisedEqual} */
Chai.Eventually.prototype.eqls;
 /** @type {!Chai.PromisedProperty} */
Chai.Eventually.prototype.property;
 /** @type {!Chai.PromisedOwnProperty} */
Chai.Eventually.prototype.ownProperty;
 /** @type {!Chai.PromisedOwnProperty} */
Chai.Eventually.prototype.haveOwnProperty;
 /** @type {!Chai.PromisedLength} */
Chai.Eventually.prototype.length;
 /** @type {!Chai.PromisedLength} */
Chai.Eventually.prototype.lengthOf;
 /** @type {!Chai.PromisedKeys} */
Chai.Eventually.prototype.keys;
 /** @type {!Chai.PromisedThrow} */
Chai.Eventually.prototype.throw;
 /** @type {!Chai.PromisedThrow} */
Chai.Eventually.prototype.throws;
 /** @type {!Chai.PromisedThrow} */
Chai.Eventually.prototype.Throw;
 /** @type {!Chai.PromisedAssertion} */
Chai.Eventually.prototype.itself;
 /** @type {!Chai.PromisedMembers} */
Chai.Eventually.prototype.members;

/**
 * @param {!PromiseLike<?>} expected
 * @return {!Chai.PromisedAssertion}
 */
Chai.Eventually.prototype.become = function(expected) {};

/**
 * @param {?} expected
 * @param {(string|!RegExp)=} message
 * @return {!Chai.PromisedAssertion}
 */
Chai.Eventually.prototype.rejectedWith = function(expected, message) {};

/**
 * @param {!Function} fn
 * @return {!Chai.PromisedAssertion}
 */
Chai.Eventually.prototype.notify = function(fn) {};

/**
 * @param {(string|!RegExp)} regexp
 * @param {string=} message
 * @return {!Chai.PromisedAssertion}
 */
Chai.Eventually.prototype.match = function(regexp, message) {};

/**
 * @param {string} string
 * @param {string=} message
 * @return {!Chai.PromisedAssertion}
 */
Chai.Eventually.prototype.string = function(string, message) {};

/**
 * @param {string} string
 * @return {!Chai.PromisedAssertion}
 */
Chai.Eventually.prototype.key = function(string) {};

/**
 * @param {string} method
 * @param {string=} message
 * @return {!Chai.PromisedAssertion}
 */
Chai.Eventually.prototype.respondTo = function(method, message) {};

/**
 * @param {!Function} matcher
 * @param {string=} message
 * @return {!Chai.PromisedAssertion}
 */
Chai.Eventually.prototype.satisfy = function(matcher, message) {};

/**
 * @param {number} expected
 * @param {number} delta
 * @param {string=} message
 * @return {!Chai.PromisedAssertion}
 */
Chai.Eventually.prototype.closeTo = function(expected, delta, message) {};
/**
 * @extends {Chai.Eventually}
 * @extends {PromiseLike}
 * @record
 * @struct
 */
Chai.PromisedAssertion = function() {};
/**
 * @record
 * @struct
 */
Chai.PromisedLanguageChains = function() {};
 /** @type {!Chai.Eventually} */
Chai.PromisedLanguageChains.prototype.eventually;
 /** @type {!Chai.PromisedAssertion} */
Chai.PromisedLanguageChains.prototype.to;
 /** @type {!Chai.PromisedAssertion} */
Chai.PromisedLanguageChains.prototype.be;
 /** @type {!Chai.PromisedAssertion} */
Chai.PromisedLanguageChains.prototype.been;
 /** @type {!Chai.PromisedAssertion} */
Chai.PromisedLanguageChains.prototype.is;
 /** @type {!Chai.PromisedAssertion} */
Chai.PromisedLanguageChains.prototype.that;
 /** @type {!Chai.PromisedAssertion} */
Chai.PromisedLanguageChains.prototype.which;
 /** @type {!Chai.PromisedAssertion} */
Chai.PromisedLanguageChains.prototype.and;
 /** @type {!Chai.PromisedAssertion} */
Chai.PromisedLanguageChains.prototype.has;
 /** @type {!Chai.PromisedAssertion} */
Chai.PromisedLanguageChains.prototype.have;
 /** @type {!Chai.PromisedAssertion} */
Chai.PromisedLanguageChains.prototype.with;
 /** @type {!Chai.PromisedAssertion} */
Chai.PromisedLanguageChains.prototype.at;
 /** @type {!Chai.PromisedAssertion} */
Chai.PromisedLanguageChains.prototype.of;
 /** @type {!Chai.PromisedAssertion} */
Chai.PromisedLanguageChains.prototype.same;
/**
 * @record
 * @struct
 */
Chai.PromisedNumericComparison = function() {};
 /** @type {!Chai.PromisedNumberComparer} */
Chai.PromisedNumericComparison.prototype.above;
 /** @type {!Chai.PromisedNumberComparer} */
Chai.PromisedNumericComparison.prototype.gt;
 /** @type {!Chai.PromisedNumberComparer} */
Chai.PromisedNumericComparison.prototype.greaterThan;
 /** @type {!Chai.PromisedNumberComparer} */
Chai.PromisedNumericComparison.prototype.least;
 /** @type {!Chai.PromisedNumberComparer} */
Chai.PromisedNumericComparison.prototype.gte;
 /** @type {!Chai.PromisedNumberComparer} */
Chai.PromisedNumericComparison.prototype.below;
 /** @type {!Chai.PromisedNumberComparer} */
Chai.PromisedNumericComparison.prototype.lt;
 /** @type {!Chai.PromisedNumberComparer} */
Chai.PromisedNumericComparison.prototype.lessThan;
 /** @type {!Chai.PromisedNumberComparer} */
Chai.PromisedNumericComparison.prototype.most;
 /** @type {!Chai.PromisedNumberComparer} */
Chai.PromisedNumericComparison.prototype.lte;

/**
 * @param {number} start
 * @param {number} finish
 * @param {string=} message
 * @return {!Chai.PromisedAssertion}
 */
Chai.PromisedNumericComparison.prototype.within = function(start, finish, message) {};
/**
 * @record
 * @struct
 */
Chai.PromisedNumberComparer = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.PromisedTypeComparison = function() {};

/* TODO: CallSignature: Chai */
 /** @type {!Chai.PromisedInstanceOf} */
Chai.PromisedTypeComparison.prototype.instanceof;
 /** @type {!Chai.PromisedInstanceOf} */
Chai.PromisedTypeComparison.prototype.instanceOf;
/**
 * @record
 * @struct
 */
Chai.PromisedInstanceOf = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.PromisedDeep = function() {};
 /** @type {!Chai.PromisedEqual} */
Chai.PromisedDeep.prototype.equal;
 /** @type {!Chai.PromisedInclude} */
Chai.PromisedDeep.prototype.include;
 /** @type {!Chai.PromisedProperty} */
Chai.PromisedDeep.prototype.property;
/**
 * @record
 * @struct
 */
Chai.PromisedKeyFilter = function() {};
 /** @type {!Chai.PromisedKeys} */
Chai.PromisedKeyFilter.prototype.keys;
/**
 * @record
 * @struct
 */
Chai.PromisedEqual = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.PromisedProperty = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.PromisedOwnProperty = function() {};

/* TODO: CallSignature: Chai */
/**
 * @extends {Chai.PromisedLanguageChains}
 * @extends {Chai.PromisedNumericComparison}
 * @record
 * @struct
 */
Chai.PromisedLength = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.PromisedInclude = function() {};

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */
 /** @type {!Chai.PromisedKeys} */
Chai.PromisedInclude.prototype.keys;
 /** @type {!Chai.PromisedMembers} */
Chai.PromisedInclude.prototype.members;
 /** @type {!Chai.PromisedKeyFilter} */
Chai.PromisedInclude.prototype.all;
/**
 * @record
 * @struct
 */
Chai.PromisedKeys = function() {};

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.PromisedThrow = function() {};

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.PromisedMembers = function() {};

/* TODO: CallSignature: Chai */
 /** @type {!Chai.PromisedAssert} */
Chai.Assert.prototype.eventually;

/**
 * @param {!PromiseLike<?>} promise
 * @param {string=} message
 * @return {!PromiseLike<void>}
 */
Chai.Assert.prototype.isFulfilled = function(promise, message) {};

/**
 * @param {!PromiseLike<?>} promise
 * @param {?} expected
 * @param {string=} message
 * @return {!PromiseLike<void>}
 */
Chai.Assert.prototype.becomes = function(promise, expected, message) {};

/**
 * @param {!PromiseLike<?>} promise
 * @param {?} expected
 * @param {string=} message
 * @return {!PromiseLike<void>}
 */
Chai.Assert.prototype.doesNotBecome = function(promise, expected, message) {};

/**
 * @param {!PromiseLike<?>} promise
 * @param {string|?|!RegExp=} message_or_expected_or_match
 * @param {string=} message
 * @return {!PromiseLike<void>}
 */
Chai.Assert.prototype.isRejected = function(promise, message_or_expected_or_match, message) {};

/**
 * @param {!Function} fn
 * @return {!PromiseLike<void>}
 */
Chai.Assert.prototype.notify = function(fn) {};
/**
 * @record
 * @struct
 */
Chai.PromisedAssert = function() {};

/**
 * @param {?=} actual
 * @param {?=} expected
 * @param {string=} msg
 * @param {string=} operator
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.fail = function(actual, expected, msg, operator) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.ok = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.notOk = function(val, msg) {};

/**
 * @param {?} act
 * @param {?} exp
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.equal = function(act, exp, msg) {};

/**
 * @param {?} act
 * @param {?} exp
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.notEqual = function(act, exp, msg) {};

/**
 * @param {?} act
 * @param {?} exp
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.strictEqual = function(act, exp, msg) {};

/**
 * @param {?} act
 * @param {?} exp
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.notStrictEqual = function(act, exp, msg) {};

/**
 * @param {?} act
 * @param {?} exp
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.deepEqual = function(act, exp, msg) {};

/**
 * @param {?} act
 * @param {?} exp
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.notDeepEqual = function(act, exp, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.isTrue = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.isFalse = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.isNull = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.isNotNull = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.isUndefined = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.isDefined = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.isFunction = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.isNotFunction = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.isObject = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.isNotObject = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.isArray = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.isNotArray = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.isString = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.isNotString = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.isNumber = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.isNotNumber = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.isBoolean = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.isNotBoolean = function(val, msg) {};

/**
 * @param {?} val
 * @param {string} type
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.typeOf = function(val, type, msg) {};

/**
 * @param {?} val
 * @param {string} type
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.notTypeOf = function(val, type, msg) {};

/**
 * @param {?} val
 * @param {!Function} type
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.instanceOf = function(val, type, msg) {};

/**
 * @param {?} val
 * @param {!Function} type
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.notInstanceOf = function(val, type, msg) {};

/**
 * @param {string|!Array<?>} exp
 * @param {?} inc
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.include = function(exp, inc, msg) {};

/**
 * @param {string|!Array<?>} exp
 * @param {?} inc
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.notInclude = function(exp, inc, msg) {};

/**
 * @param {?} exp
 * @param {!RegExp} re
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.match = function(exp, re, msg) {};

/**
 * @param {?} exp
 * @param {!RegExp} re
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.notMatch = function(exp, re, msg) {};

/**
 * @param {!Object} obj
 * @param {string} prop
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.property = function(obj, prop, msg) {};

/**
 * @param {!Object} obj
 * @param {string} prop
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.notProperty = function(obj, prop, msg) {};

/**
 * @param {!Object} obj
 * @param {string} prop
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.deepProperty = function(obj, prop, msg) {};

/**
 * @param {!Object} obj
 * @param {string} prop
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.notDeepProperty = function(obj, prop, msg) {};

/**
 * @param {!Object} obj
 * @param {string} prop
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.propertyVal = function(obj, prop, val, msg) {};

/**
 * @param {!Object} obj
 * @param {string} prop
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.propertyNotVal = function(obj, prop, val, msg) {};

/**
 * @param {!Object} obj
 * @param {string} prop
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.deepPropertyVal = function(obj, prop, val, msg) {};

/**
 * @param {!Object} obj
 * @param {string} prop
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.deepPropertyNotVal = function(obj, prop, val, msg) {};

/**
 * @param {?} exp
 * @param {number} len
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.lengthOf = function(exp, len, msg) {};

/**
 * @param {!Function} fn
 * @param {string|!RegExp|!Function=} msg_or_regExp_or_errType
 * @param {string|!RegExp=} msg_or_regExp
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.throw = function(fn, msg_or_regExp_or_errType, msg_or_regExp) {};

/**
 * @param {!Function} fn
 * @param {string|!RegExp|!Function=} msg_or_regExp_or_errType
 * @param {string|!RegExp=} msg_or_regExp
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.throws = function(fn, msg_or_regExp_or_errType, msg_or_regExp) {};

/**
 * @param {!Function} fn
 * @param {string|!RegExp|!Function=} msg_or_regExp_or_errType
 * @param {string|!RegExp=} msg_or_regExp
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.Throw = function(fn, msg_or_regExp_or_errType, msg_or_regExp) {};

/**
 * @param {!Function} fn
 * @param {string|!RegExp|!Function=} msg_or_regExp_or_errType
 * @param {string|!RegExp=} msg_or_regExp
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.doesNotThrow = function(fn, msg_or_regExp_or_errType, msg_or_regExp) {};

/**
 * @param {?} val
 * @param {string} operator
 * @param {?} val2
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.operator = function(val, operator, val2, msg) {};

/**
 * @param {number} act
 * @param {number} exp
 * @param {number} delta
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.closeTo = function(act, exp, delta, msg) {};

/**
 * @param {!Array<?>} set1
 * @param {!Array<?>} set2
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.sameMembers = function(set1, set2, msg) {};

/**
 * @param {!Array<?>} set1
 * @param {!Array<?>} set2
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.includeMembers = function(set1, set2, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {!PromiseLike<void>}
 */
Chai.PromisedAssert.prototype.ifError = function(val, msg) {};
