/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jsdom v2/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/**
 * The do-what-I-mean API.
 * 
 * Example:
 * jsdom.env(html, function (errors, window) {
 *  // free memory associated with the window
 *  window.close();
 * });
 * 
 * @param {string|?} urlOrHtml_or_config
 * @param {string|!Array<string>|?=} scripts_or_callback_or_config
 * @param {?=} config_or_callback  Configuration object
 * @param {?=} callback
 * @return {void}
 */
function env(urlOrHtml_or_config, scripts_or_callback_or_config, config_or_callback, callback) {}

/**
 * @param {!Document} doc
 * @return {string}
 */
function serializeDocument(doc) {}
/**
 * @record
 * @struct
 */
function VirtualConsole() {}

/**
 * @param {!Console} console
 * @return {?}
 */
VirtualConsole.prototype.sendTo = function(console) {};
/**
 * @record
 * @struct
 */
function VirtualConsoleOptions() {}
/**
 * @record
 * @struct
 */
function WindowProperties() {}
 /** @type {string} */
WindowProperties.prototype.parsingMode;
 /** @type {string} */
WindowProperties.prototype.contentType;
 /** @type {?} */
WindowProperties.prototype.parser;
 /** @type {string} */
WindowProperties.prototype.url;
 /** @type {string} */
WindowProperties.prototype.referrer;
 /** @type {?} */
WindowProperties.prototype.cookieJar;
 /** @type {string} */
WindowProperties.prototype.cookie;
 /** @type {?} */
WindowProperties.prototype.resourceLoader;
 /** @type {boolean} */
WindowProperties.prototype.deferClose;
 /** @type {number} */
WindowProperties.prototype.concurrentNodeIterators;
 /** @type {?} */
WindowProperties.prototype.virtualConsole;
 /** @type {?} */
WindowProperties.prototype.created;
 /** @type {?} */
WindowProperties.prototype.features;
 /** @type {!Window} */
WindowProperties.prototype.top;
/**
 * @record
 * @struct
 */
function CookieJar() {}

/**
 * @param {?=} options
 * @return {?}
 */
function createVirtualConsole(options) {}

/**
 * @param {!Window} window
 * @return {?}
 */
function getVirtualConsole(window) {}

/**
 * @return {?}
 */
function createCookieJar() {}

/**
 * @param {!Node} node
 * @return {?}
 */
function nodeLocation(node) {}

/**
 * @param {!Window} window
 * @param {?} newProps
 * @return {void}
 */
function reconfigureWindow(window, newProps) {}

/**
 * @param {!Window} window
 * @param {string} url
 * @return {void}
 */
function changeURL(window, url) {}

/**
 * @param {!Window} window
 * @param {string} jqueryUrl
 * @param {function(!Window, ?<!HTMLElement>): ?} callback
 * @return {void}
 */
function jQueryify(window, jqueryUrl, callback) {}
 /** @type {boolean} */
var debugMode;
/**
 * @record
 * @struct
 */
function DocumentWithParentWindow() {}
 /** @type {!Window} */
DocumentWithParentWindow.prototype.parentWindow;

/**
 * The jsdom.jsdom method does less things automatically; it takes in only HTML source, and does not let you to
 * separately supply script that it will inject and execute. It just gives you back a document object,
 * with usable document.parentWindow, and starts asynchronously executing any <script>s included in the HTML source.
 * You can listen for the 'load' event to wait until scripts are done loading and executing, just like you would in a
 * normal HTML page.
 * 
 * @param {string=} markup 	is a HTML document to be parsed. You can also pass undefined to get the basic document,
 * 					equivalent to what a browser will give if you open up an empty .html file.
 * @param {?=} config
 * @return {?}
 */
function jsdom(markup, config) {}
 /** @type {?} */
var availableDocumentFeatures;
 /** @type {?} */
var defaultDocumentFeatures;
 /** @type {?} */
var applyDocumentFeatures;
/**
 * @record
 * @struct
 */
function Callback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FeatureOptions() {}
 /** @type {(boolean|!Array<string>)} */
FeatureOptions.prototype.FetchExternalResources;
 /** @type {(boolean|!Array<string>)} */
FeatureOptions.prototype.ProcessExternalResources;
 /** @type {(string|boolean)} */
FeatureOptions.prototype.SkipExternalResources;
/**
 * @record
 * @struct
 */
function EnvDocument() {}
 /** @type {string} */
EnvDocument.prototype.referrer;
 /** @type {string} */
EnvDocument.prototype.cookie;
 /** @type {string} */
EnvDocument.prototype.cookieDomain;
/**
 * @record
 * @struct
 */
function Config() {}
 /** @type {string} */
Config.prototype.html;
 /** @type {string} */
Config.prototype.file;
 /** @type {string} */
Config.prototype.url;
 /** @type {!Array<string>} */
Config.prototype.scripts;
 /** @type {!Array<string>} */
Config.prototype.src;
 /** @type {?} */
Config.prototype.jar;
 /** @type {string} */
Config.prototype.parsingMode;
 /** @type {?} */
Config.prototype.document;
 /** @type {?} */
Config.prototype.features;
 /** @type {?} */
Config.prototype.virtualConsole;
 /** @type {?} */
Config.prototype.done;
 /** @type {?} */
Config.prototype.loaded;
 /** @type {?} */
Config.prototype.created;
