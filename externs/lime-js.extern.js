/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/lime-js/index.d.ts:
/** @const */
var Lime = {};
/**
 * @record
 * @struct
 */
Lime.Envelope = function() {};
 /** @type {string} */
Lime.Envelope.prototype.id;
 /** @type {string} */
Lime.Envelope.prototype.from;
 /** @type {string} */
Lime.Envelope.prototype.to;
 /** @type {string} */
Lime.Envelope.prototype.pp;
 /** @type {?} */
Lime.Envelope.prototype.metadata;
/**
 * @record
 * @struct
 */
Lime.Reason = function() {};
 /** @type {number} */
Lime.Reason.prototype.code;
 /** @type {string} */
Lime.Reason.prototype.description;
/**
 * @extends {Lime.Envelope}
 * @record
 * @struct
 */
Lime.Message = function() {};
 /** @type {string} */
Lime.Message.prototype.type;
 /** @type {?} */
Lime.Message.prototype.content;
/**
 * @extends {Lime.Envelope}
 * @record
 * @struct
 */
Lime.Notification = function() {};
 /** @type {string} */
Lime.Notification.prototype.event;
 /** @type {!Lime.Reason} */
Lime.Notification.prototype.reason;
/**
 * @constructor
 * @struct
 */
Lime.NotificationEvent = function() {};
 /** @type {string} */
Lime.NotificationEvent.accepted;
 /** @type {string} */
Lime.NotificationEvent.validated;
 /** @type {string} */
Lime.NotificationEvent.authorized;
 /** @type {string} */
Lime.NotificationEvent.dispatched;
 /** @type {string} */
Lime.NotificationEvent.received;
 /** @type {string} */
Lime.NotificationEvent.consumed;
/**
 * @extends {Lime.Envelope}
 * @record
 * @struct
 */
Lime.Command = function() {};
 /** @type {string} */
Lime.Command.prototype.uri;
 /** @type {string} */
Lime.Command.prototype.type;
 /** @type {?} */
Lime.Command.prototype.resource;
 /** @type {string} */
Lime.Command.prototype.method;
 /** @type {string} */
Lime.Command.prototype.status;
 /** @type {!Lime.Reason} */
Lime.Command.prototype.reason;
/**
 * @constructor
 * @struct
 */
Lime.CommandMethod = function() {};
 /** @type {string} */
Lime.CommandMethod.get;
 /** @type {string} */
Lime.CommandMethod.set;
 /** @type {string} */
Lime.CommandMethod.delete;
 /** @type {string} */
Lime.CommandMethod.observe;
 /** @type {string} */
Lime.CommandMethod.subscribe;
/**
 * @constructor
 * @struct
 */
Lime.CommandStatus = function() {};
 /** @type {string} */
Lime.CommandStatus.success;
 /** @type {string} */
Lime.CommandStatus.failure;
/**
 * @extends {Lime.Envelope}
 * @record
 * @struct
 */
Lime.Session = function() {};
 /** @type {string} */
Lime.Session.prototype.state;
 /** @type {!Array<string>} */
Lime.Session.prototype.encryptionOptions;
 /** @type {string} */
Lime.Session.prototype.encryption;
 /** @type {!Array<string>} */
Lime.Session.prototype.compressionOptions;
 /** @type {string} */
Lime.Session.prototype.compression;
 /** @type {string} */
Lime.Session.prototype.scheme;
 /** @type {?} */
Lime.Session.prototype.authentication;
 /** @type {!Lime.Reason} */
Lime.Session.prototype.reason;
/**
 * @constructor
 * @struct
 */
Lime.SessionState = function() {};
 /** @type {string} */
Lime.SessionState.new;
 /** @type {string} */
Lime.SessionState.negotiating;
 /** @type {string} */
Lime.SessionState.authenticating;
 /** @type {string} */
Lime.SessionState.established;
 /** @type {string} */
Lime.SessionState.finishing;
 /** @type {string} */
Lime.SessionState.finished;
 /** @type {string} */
Lime.SessionState.failed;
/**
 * @constructor
 * @struct
 */
Lime.SessionEncryption = function() {};
 /** @type {string} */
Lime.SessionEncryption.none;
 /** @type {string} */
Lime.SessionEncryption.tls;
/**
 * @constructor
 * @struct
 */
Lime.SessionCompression = function() {};
 /** @type {string} */
Lime.SessionCompression.none;
 /** @type {string} */
Lime.SessionCompression.gzip;
/**
 * @constructor
 * @struct
 */
Lime.Authentication = function() {};
 /** @type {string} */
Lime.Authentication.prototype.scheme;
 /** @type {string} */
Lime.Authentication.guest;
 /** @type {string} */
Lime.Authentication.plain;
 /** @type {string} */
Lime.Authentication.transport;
 /** @type {string} */
Lime.Authentication.key;
/**
 * @extends {Lime.Authentication}
 * @constructor
 * @struct
 */
Lime.GuestAuthentication = function() {};
 /** @type {string} */
Lime.GuestAuthentication.prototype.scheme;
/**
 * @extends {Lime.Authentication}
 * @constructor
 * @struct
 */
Lime.TransportAuthentication = function() {};
 /** @type {string} */
Lime.TransportAuthentication.prototype.scheme;
/**
 * @extends {Lime.Authentication}
 * @constructor
 * @struct
 */
Lime.PlainAuthentication = function() {};
 /** @type {string} */
Lime.PlainAuthentication.prototype.scheme;
 /** @type {string} */
Lime.PlainAuthentication.prototype.password;
/**
 * @extends {Lime.Authentication}
 * @constructor
 * @struct
 */
Lime.KeyAuthentication = function() {};
 /** @type {string} */
Lime.KeyAuthentication.prototype.scheme;
 /** @type {string} */
Lime.KeyAuthentication.prototype.key;

/**
 * @constructor
 * @struct
 * @param {!Lime.Transport} transport
 * @param {boolean} autoReplyPings
 * @param {boolean} autoNotifyReceipt
 */
Lime.Channel = function(transport, autoReplyPings, autoNotifyReceipt) {};
 /** @type {!Lime.Transport} */
Lime.Channel.prototype.transport;
 /** @type {string} */
Lime.Channel.prototype.remoteNode;
 /** @type {string} */
Lime.Channel.prototype.localNode;
 /** @type {string} */
Lime.Channel.prototype.sessionId;
 /** @type {string} */
Lime.Channel.prototype.state;

/**
 * @param {!Lime.Message} message
 * @return {void}
 */
Lime.Channel.prototype.sendMessage = function(message) {};

/**
 * @param {!Lime.Message} message
 * @return {void}
 */
Lime.Channel.prototype.onMessage = function(message) {};

/**
 * @param {!Lime.Command} command
 * @return {void}
 */
Lime.Channel.prototype.sendCommand = function(command) {};

/**
 * @param {!Lime.Command} command
 * @return {void}
 */
Lime.Channel.prototype.onCommand = function(command) {};

/**
 * @param {!Lime.Notification} notification
 * @return {void}
 */
Lime.Channel.prototype.sendNotification = function(notification) {};

/**
 * @param {!Lime.Notification} notification
 * @return {void}
 */
Lime.Channel.prototype.onNotification = function(notification) {};

/**
 * @param {!Lime.Session} session
 * @return {void}
 */
Lime.Channel.prototype.sendSession = function(session) {};

/**
 * @param {!Lime.Session} session
 * @return {void}
 */
Lime.Channel.prototype.onSession = function(session) {};

/**
 * @constructor
 * @struct
 * @param {!Lime.Transport} transport
 * @param {boolean=} autoReplyPings
 * @param {boolean=} autoNotifyReceipt
 */
Lime.ClientChannel = function(transport, autoReplyPings, autoNotifyReceipt) {};

/**
 * @return {void}
 */
Lime.ClientChannel.prototype.startNewSession = function() {};

/**
 * @param {string} sessionCompression
 * @param {string} sessionEncryption
 * @return {void}
 */
Lime.ClientChannel.prototype.negotiateSession = function(sessionCompression, sessionEncryption) {};

/**
 * @param {string} identity
 * @param {!Lime.Authentication} authentication
 * @param {string} instance
 * @return {void}
 */
Lime.ClientChannel.prototype.authenticateSession = function(identity, authentication, instance) {};

/**
 * @return {void}
 */
Lime.ClientChannel.prototype.sendFinishingSession = function() {};

/**
 * @param {!Lime.Session} session
 * @return {void}
 */
Lime.ClientChannel.prototype.onSessionNegotiating = function(session) {};

/**
 * @param {!Lime.Session} session
 * @return {void}
 */
Lime.ClientChannel.prototype.onSessionAuthenticating = function(session) {};

/**
 * @param {!Lime.Session} session
 * @return {void}
 */
Lime.ClientChannel.prototype.onSessionEstablished = function(session) {};

/**
 * @param {!Lime.Session} session
 * @return {void}
 */
Lime.ClientChannel.prototype.onSessionFinished = function(session) {};

/**
 * @param {!Lime.Session} session
 * @return {void}
 */
Lime.ClientChannel.prototype.onSessionFailed = function(session) {};
/**
 * @constructor
 * @struct
 */
Lime.ClientChannelExtensions = function() {};

/**
 * @param {!Lime.ClientChannel} clientChannel
 * @param {string} compression
 * @param {string} encryption
 * @param {string} identity
 * @param {!Lime.Authentication} authentication
 * @param {string} instance
 * @param {function(!Error, !Lime.Session): ?} callback
 * @return {void}
 */
Lime.ClientChannelExtensions.establishSession = function(clientChannel, compression, encryption, identity, authentication, instance, callback) {};
/**
 * @record
 * @struct
 */
Lime.IMessageChannel = function() {};
 /** @type {function(!Lime.Message): ?} */
Lime.IMessageChannel.prototype.onMessage;

/**
 * @param {!Lime.Message} message
 * @return {void}
 */
Lime.IMessageChannel.prototype.sendMessage = function(message) {};
/**
 * @record
 * @struct
 */
Lime.ICommandChannel = function() {};
 /** @type {function(!Lime.Command): ?} */
Lime.ICommandChannel.prototype.onCommand;

/**
 * @param {!Lime.Command} command
 * @return {void}
 */
Lime.ICommandChannel.prototype.sendCommand = function(command) {};
/**
 * @record
 * @struct
 */
Lime.INotificationChannel = function() {};
 /** @type {function(!Lime.Notification): ?} */
Lime.INotificationChannel.prototype.onNotification;

/**
 * @param {!Lime.Notification} notification
 * @return {void}
 */
Lime.INotificationChannel.prototype.sendNotification = function(notification) {};
/**
 * @record
 * @struct
 */
Lime.ISessionChannel = function() {};
 /** @type {function(!Lime.Session): ?} */
Lime.ISessionChannel.prototype.onSession;

/**
 * @param {!Lime.Session} session
 * @return {void}
 */
Lime.ISessionChannel.prototype.sendSession = function(session) {};
/**
 * @record
 * @struct
 */
Lime.ISessionListener = function() {};

/* TODO: CallSignature: Lime */
/**
 * @extends {Lime.ITransportStateListener}
 * @record
 * @struct
 */
Lime.Transport = function() {};
 /** @type {function(!Lime.Envelope): ?} */
Lime.Transport.prototype.onEnvelope;
 /** @type {string} */
Lime.Transport.prototype.compression;
 /** @type {string} */
Lime.Transport.prototype.encryption;

/**
 * @param {!Lime.Envelope} envelope
 * @return {void}
 */
Lime.Transport.prototype.send = function(envelope) {};

/**
 * @param {string} uri
 * @return {void}
 */
Lime.Transport.prototype.open = function(uri) {};

/**
 * @return {void}
 */
Lime.Transport.prototype.close = function() {};

/**
 * @return {!Array<string>}
 */
Lime.Transport.prototype.getSupportedCompression = function() {};

/**
 * @param {string} compression
 * @return {void}
 */
Lime.Transport.prototype.setCompression = function(compression) {};

/**
 * @return {!Array<string>}
 */
Lime.Transport.prototype.getSupportedEncryption = function() {};

/**
 * @param {string} encryption
 * @return {void}
 */
Lime.Transport.prototype.setEncryption = function(encryption) {};
/**
 * @record
 * @struct
 */
Lime.ITransportEnvelopeListener = function() {};

/* TODO: CallSignature: Lime */
/**
 * @record
 * @struct
 */
Lime.ITransportStateListener = function() {};
 /** @type {function(): void} */
Lime.ITransportStateListener.prototype.onOpen;
 /** @type {function(): void} */
Lime.ITransportStateListener.prototype.onClose;
 /** @type {function(string): void} */
Lime.ITransportStateListener.prototype.onError;

/**
 * @constructor
 * @struct
 * @param {boolean=} traceEnabled
 */
Lime.WebSocketTransport = function(traceEnabled) {};
 /** @type {!WebSocket} */
Lime.WebSocketTransport.prototype.webSocket;
 /** @type {string} */
Lime.WebSocketTransport.prototype.compression;
 /** @type {string} */
Lime.WebSocketTransport.prototype.encryption;

/**
 * @param {!Lime.Envelope} envelope
 * @return {void}
 */
Lime.WebSocketTransport.prototype.send = function(envelope) {};

/**
 * @param {!Lime.Envelope} envelope
 * @return {void}
 */
Lime.WebSocketTransport.prototype.onEnvelope = function(envelope) {};

/**
 * @param {string} uri
 * @return {void}
 */
Lime.WebSocketTransport.prototype.open = function(uri) {};

/**
 * @return {void}
 */
Lime.WebSocketTransport.prototype.close = function() {};

/**
 * @return {!Array<string>}
 */
Lime.WebSocketTransport.prototype.getSupportedCompression = function() {};

/**
 * @param {string} compression
 * @return {void}
 */
Lime.WebSocketTransport.prototype.setCompression = function(compression) {};

/**
 * @return {!Array<string>}
 */
Lime.WebSocketTransport.prototype.getSupportedEncryption = function() {};

/**
 * @param {string} encryption
 * @return {void}
 */
Lime.WebSocketTransport.prototype.setEncryption = function(encryption) {};

/**
 * @return {void}
 */
Lime.WebSocketTransport.prototype.onOpen = function() {};

/**
 * @return {void}
 */
Lime.WebSocketTransport.prototype.onClose = function() {};

/**
 * @param {string} error
 * @return {void}
 */
Lime.WebSocketTransport.prototype.onError = function(error) {};
