/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/dockerode/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */
/** @const */
var Dockerode = {};
/**
 * @record
 * @struct
 */
Dockerode.Container = function() {};
 /** @type {?} */
Dockerode.Container.prototype.modem;
 /** @type {string} */
Dockerode.Container.prototype.id;

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<!Dockerode.ContainerInspectInfo>}
 */
Dockerode.Container.prototype.inspect = function(options_or_callback, callback) {};

/**
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Container.prototype.rename = function(options, callback) {};

/**
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Container.prototype.update = function(options, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Container.prototype.top = function(options_or_callback, callback) {};

/**
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Container.prototype.changes = function(callback) {};

/**
 * @param {?=} callback
 * @return {void|!Promise<!NodeJS.ReadableStream>}
 */
Dockerode.Container.prototype.export = function(callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Container.prototype.start = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Container.prototype.pause = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Container.prototype.unpause = function(options_or_callback, callback) {};

/**
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Container.prototype.exec = function(options, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Container.prototype.commit = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Container.prototype.stop = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Container.prototype.restart = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Container.prototype.kill = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Container.prototype.resize = function(options_or_callback, callback) {};

/**
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Container.prototype.wait = function(callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Container.prototype.remove = function(options_or_callback, callback) {};

/**
 * Deprecated since RAPI v1.20
 * Deprecated since RAPI v1.20
 * Deprecated since RAPI v1.20
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Container.prototype.copy = function(options_or_callback, callback) {};

/**
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<!NodeJS.ReadableStream>}
 */
Dockerode.Container.prototype.getArchive = function(options, callback) {};

/**
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Container.prototype.infoArchive = function(options, callback) {};

/**
 * @param {(string|!NodeJS.ReadableStream|?)} file Filename (will read synchronously), Buffer or stream
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<!NodeJS.ReadWriteStream>}
 */
Dockerode.Container.prototype.putArchive = function(file, options, callback) {};

/**
 * @param {!Dockerode.ContainerLogsOptions|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<!NodeJS.ReadableStream>}
 */
Dockerode.Container.prototype.logs = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Container.prototype.stats = function(options_or_callback, callback) {};

/**
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<!NodeJS.ReadableStream>}
 */
Dockerode.Container.prototype.attach = function(options, callback) {};
/**
 * @record
 * @struct
 */
Dockerode.Image = function() {};
 /** @type {?} */
Dockerode.Image.prototype.modem;
 /** @type {string} */
Dockerode.Image.prototype.id;

/**
 * @param {?=} callback
 * @return {void|!Promise<!Dockerode.ImageInspectInfo>}
 */
Dockerode.Image.prototype.inspect = function(callback) {};

/**
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Image.prototype.history = function(callback) {};

/**
 * @param {?=} callback
 * @return {void|!Promise<!NodeJS.ReadableStream>}
 */
Dockerode.Image.prototype.get = function(callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<!NodeJS.ReadableStream>}
 */
Dockerode.Image.prototype.push = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Image.prototype.tag = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Image.prototype.remove = function(options_or_callback, callback) {};
/**
 * @record
 * @struct
 */
Dockerode.Volume = function() {};
 /** @type {?} */
Dockerode.Volume.prototype.modem;
 /** @type {string} */
Dockerode.Volume.prototype.name;

/**
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Volume.prototype.inspect = function(callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Volume.prototype.remove = function(options_or_callback, callback) {};
/**
 * @record
 * @struct
 */
Dockerode.Service = function() {};
 /** @type {?} */
Dockerode.Service.prototype.modem;
 /** @type {string} */
Dockerode.Service.prototype.id;

/**
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Service.prototype.inspect = function(callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Service.prototype.remove = function(options_or_callback, callback) {};

/**
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Service.prototype.update = function(options, callback) {};
/**
 * @record
 * @struct
 */
Dockerode.Task = function() {};
 /** @type {?} */
Dockerode.Task.prototype.modem;
 /** @type {string} */
Dockerode.Task.prototype.id;

/**
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Task.prototype.inspect = function(callback) {};
/**
 * @record
 * @struct
 */
Dockerode.Node = function() {};
 /** @type {?} */
Dockerode.Node.prototype.modem;
 /** @type {string} */
Dockerode.Node.prototype.id;

/**
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Node.prototype.inspect = function(callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Node.prototype.update = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Node.prototype.remove = function(options_or_callback, callback) {};
/**
 * @record
 * @struct
 */
Dockerode.Plugin = function() {};
 /** @type {?} */
Dockerode.Plugin.prototype.modem;
 /** @type {string} */
Dockerode.Plugin.prototype.name;
 /** @type {?} */
Dockerode.Plugin.prototype.remote;

/**
 * @param {?=} callback
 * @return {void|!Promise<!Dockerode.PluginInfo>}
 */
Dockerode.Plugin.prototype.inspect = function(callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Plugin.prototype.remove = function(options_or_callback, callback) {};

/**
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Plugin.prototype.privileges = function(callback) {};

/**
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Plugin.prototype.pull = function(options, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Plugin.prototype.enable = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Plugin.prototype.disable = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Plugin.prototype.push = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Plugin.prototype.configure = function(options_or_callback, callback) {};

/**
 * @param {?} auth
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Plugin.prototype.upgrade = function(auth, options_or_callback, callback) {};
/**
 * @record
 * @struct
 */
Dockerode.Secret = function() {};
 /** @type {?} */
Dockerode.Secret.prototype.modem;
 /** @type {string} */
Dockerode.Secret.prototype.id;

/**
 * @param {?=} callback
 * @return {void|!Promise<!Dockerode.SecretInfo>}
 */
Dockerode.Secret.prototype.inspect = function(callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Secret.prototype.update = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Secret.prototype.remove = function(options_or_callback, callback) {};
/**
 * @record
 * @struct
 */
Dockerode.Network = function() {};
 /** @type {?} */
Dockerode.Network.prototype.modem;
 /** @type {string} */
Dockerode.Network.prototype.id;

/**
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Network.prototype.inspect = function(callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Network.prototype.remove = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Network.prototype.connect = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Network.prototype.disconnect = function(options_or_callback, callback) {};
/**
 * @record
 * @struct
 */
Dockerode.Exec = function() {};
 /** @type {?} */
Dockerode.Exec.prototype.modem;
 /** @type {string} */
Dockerode.Exec.prototype.id;

/**
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Exec.prototype.inspect = function(callback) {};

/**
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Exec.prototype.start = function(options, callback) {};

/**
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.Exec.prototype.resize = function(options, callback) {};
/**
 * @record
 * @struct
 */
Dockerode.ImageInfo = function() {};
 /** @type {string} */
Dockerode.ImageInfo.prototype.Id;
 /** @type {string} */
Dockerode.ImageInfo.prototype.ParentId;
 /** @type {!Array<string>} */
Dockerode.ImageInfo.prototype.RepoTags;
 /** @type {!Array<string>} */
Dockerode.ImageInfo.prototype.RepoDigests;
 /** @type {number} */
Dockerode.ImageInfo.prototype.Created;
 /** @type {number} */
Dockerode.ImageInfo.prototype.Size;
 /** @type {number} */
Dockerode.ImageInfo.prototype.VirtualSize;
 /** @type {!Object<string,string>} */
Dockerode.ImageInfo.prototype.Labels;
/**
 * @record
 * @struct
 */
Dockerode.ContainerInfo = function() {};
 /** @type {string} */
Dockerode.ContainerInfo.prototype.Id;
 /** @type {!Array<string>} */
Dockerode.ContainerInfo.prototype.Names;
 /** @type {string} */
Dockerode.ContainerInfo.prototype.Image;
 /** @type {string} */
Dockerode.ContainerInfo.prototype.ImageID;
 /** @type {string} */
Dockerode.ContainerInfo.prototype.Command;
 /** @type {number} */
Dockerode.ContainerInfo.prototype.Created;
 /** @type {!Array<!Dockerode.Port>} */
Dockerode.ContainerInfo.prototype.Ports;
 /** @type {!Object<string,string>} */
Dockerode.ContainerInfo.prototype.Labels;
 /** @type {string} */
Dockerode.ContainerInfo.prototype.State;
 /** @type {string} */
Dockerode.ContainerInfo.prototype.Status;
 /** @type {{NetworkMode: string}} */
Dockerode.ContainerInfo.prototype.HostConfig;
 /** @type {{Networks: !Object<string,!Dockerode.NetworkInfo>}} */
Dockerode.ContainerInfo.prototype.NetworkSettings;
/**
 * @record
 * @struct
 */
Dockerode.Port = function() {};
 /** @type {string} */
Dockerode.Port.prototype.IP;
 /** @type {number} */
Dockerode.Port.prototype.PrivatePort;
 /** @type {number} */
Dockerode.Port.prototype.PublicPort;
 /** @type {string} */
Dockerode.Port.prototype.Type;
/**
 * @record
 * @struct
 */
Dockerode.NetworkInfo = function() {};
 /** @type {?} */
Dockerode.NetworkInfo.prototype.IPAMConfig;
 /** @type {?} */
Dockerode.NetworkInfo.prototype.Links;
 /** @type {?} */
Dockerode.NetworkInfo.prototype.Aliases;
 /** @type {string} */
Dockerode.NetworkInfo.prototype.NetworkID;
 /** @type {string} */
Dockerode.NetworkInfo.prototype.EndpointID;
 /** @type {string} */
Dockerode.NetworkInfo.prototype.Gateway;
 /** @type {string} */
Dockerode.NetworkInfo.prototype.IPAddress;
 /** @type {number} */
Dockerode.NetworkInfo.prototype.IPPrefixLen;
 /** @type {string} */
Dockerode.NetworkInfo.prototype.IPv6Gateway;
 /** @type {string} */
Dockerode.NetworkInfo.prototype.GlobalIPv6Address;
 /** @type {number} */
Dockerode.NetworkInfo.prototype.GlobalIPv6PrefixLen;
 /** @type {string} */
Dockerode.NetworkInfo.prototype.MacAddress;
/**
 * @record
 * @struct
 */
Dockerode.ContainerInspectInfo = function() {};
 /** @type {string} */
Dockerode.ContainerInspectInfo.prototype.Id;
 /** @type {string} */
Dockerode.ContainerInspectInfo.prototype.Created;
 /** @type {string} */
Dockerode.ContainerInspectInfo.prototype.Path;
 /** @type {!Array<string>} */
Dockerode.ContainerInspectInfo.prototype.Args;
 /** @type {{Status: string, Running: boolean, Paused: boolean, Restarting: boolean, OOMKilled: boolean, Dead: boolean, Pid: number, ExitCode: number, Error: string, StartedAt: string, FinishedAt: string}} */
Dockerode.ContainerInspectInfo.prototype.State;
 /** @type {string} */
Dockerode.ContainerInspectInfo.prototype.Image;
 /** @type {string} */
Dockerode.ContainerInspectInfo.prototype.ResolvConfPath;
 /** @type {string} */
Dockerode.ContainerInspectInfo.prototype.HostnamePath;
 /** @type {string} */
Dockerode.ContainerInspectInfo.prototype.HostsPath;
 /** @type {string} */
Dockerode.ContainerInspectInfo.prototype.LogPath;
 /** @type {string} */
Dockerode.ContainerInspectInfo.prototype.Name;
 /** @type {number} */
Dockerode.ContainerInspectInfo.prototype.RestartCount;
 /** @type {string} */
Dockerode.ContainerInspectInfo.prototype.Driver;
 /** @type {string} */
Dockerode.ContainerInspectInfo.prototype.MountLabel;
 /** @type {string} */
Dockerode.ContainerInspectInfo.prototype.ProcessLabel;
 /** @type {string} */
Dockerode.ContainerInspectInfo.prototype.AppArmorProfile;
 /** @type {?} */
Dockerode.ContainerInspectInfo.prototype.ExecIDs;
 /** @type {!Dockerode.HostConfig} */
Dockerode.ContainerInspectInfo.prototype.HostConfig;
 /** @type {{Name: string, Data: {DeviceId: string, DeviceName: string, DeviceSize: string}}} */
Dockerode.ContainerInspectInfo.prototype.GraphDriver;
 /** @type {!Array<{Source: string, Destination: string, Mode: string, RW: boolean, Propagation: string}>} */
Dockerode.ContainerInspectInfo.prototype.Mounts;
 /** @type {{Hostname: string, Domainname: string, User: string, AttachStdin: boolean, AttachStdout: boolean, AttachStderr: boolean, ExposedPorts: !Object<string,!Object>, Tty: boolean, OpenStdin: boolean, StdinOnce: boolean, Env: !Array<string>, Cmd: !Array<string>, Image: string, Volumes: !Object<string,?>, WorkingDir: string, Entrypoint: ?, OnBuild: ?, Labels: !Object<string,string>}} */
Dockerode.ContainerInspectInfo.prototype.Config;
 /** @type {{Bridge: string, SandboxID: string, HairpinMode: boolean, LinkLocalIPv6Address: string, LinkLocalIPv6PrefixLen: number, Ports: !Object<string,{HostIp: string, HostPort: string}>, SandboxKey: string, SecondaryIPAddresses: ?, SecondaryIPv6Addresses: ?, EndpointID: string, Gateway: string, GlobalIPv6Address: string, GlobalIPv6PrefixLen: number, IPAddress: string, IPPrefixLen: number, IPv6Gateway: string, MacAddress: string, Networks: !Object<string,{IPAMConfig: ?, Links: ?, Aliases: ?, NetworkID: string, EndpointID: string, Gateway: string, IPAddress: string, IPPrefixLen: number, IPv6Gateway: string, GlobalIPv6Address: string, GlobalIPv6PrefixLen: number, MacAddress: string}>, Node: {ID: string, IP: string, Addr: string, Name: string, Cpus: number, Memory: number, Labels: ?}}} */
Dockerode.ContainerInspectInfo.prototype.NetworkSettings;
/**
 * @record
 * @struct
 */
Dockerode.HostConfig = function() {};
 /** @type {!Array<string>} */
Dockerode.HostConfig.prototype.Binds;
 /** @type {string} */
Dockerode.HostConfig.prototype.ContainerIDFile;
 /** @type {{Type: string, Config: ?}} */
Dockerode.HostConfig.prototype.LogConfig;
 /** @type {string} */
Dockerode.HostConfig.prototype.NetworkMode;
 /** @type {?} */
Dockerode.HostConfig.prototype.PortBindings;
 /** @type {{Name: string, MaximumRetryCount: number}} */
Dockerode.HostConfig.prototype.RestartPolicy;
 /** @type {string} */
Dockerode.HostConfig.prototype.VolumeDriver;
 /** @type {?} */
Dockerode.HostConfig.prototype.VolumesFrom;
 /** @type {?} */
Dockerode.HostConfig.prototype.CapAdd;
 /** @type {?} */
Dockerode.HostConfig.prototype.CapDrop;
 /** @type {!Array<?>} */
Dockerode.HostConfig.prototype.Dns;
 /** @type {!Array<?>} */
Dockerode.HostConfig.prototype.DnsOptions;
 /** @type {!Array<?>} */
Dockerode.HostConfig.prototype.DnsSearch;
 /** @type {?} */
Dockerode.HostConfig.prototype.ExtraHosts;
 /** @type {string} */
Dockerode.HostConfig.prototype.IpcMode;
 /** @type {?} */
Dockerode.HostConfig.prototype.Links;
 /** @type {number} */
Dockerode.HostConfig.prototype.OomScoreAdj;
 /** @type {string} */
Dockerode.HostConfig.prototype.PidMode;
 /** @type {boolean} */
Dockerode.HostConfig.prototype.Privileged;
 /** @type {boolean} */
Dockerode.HostConfig.prototype.PublishAllPorts;
 /** @type {boolean} */
Dockerode.HostConfig.prototype.ReadonlyRootfs;
 /** @type {?} */
Dockerode.HostConfig.prototype.SecurityOpt;
 /** @type {string} */
Dockerode.HostConfig.prototype.UTSMode;
 /** @type {number} */
Dockerode.HostConfig.prototype.ShmSize;
 /** @type {!Array<number>} */
Dockerode.HostConfig.prototype.ConsoleSize;
 /** @type {string} */
Dockerode.HostConfig.prototype.Isolation;
 /** @type {number} */
Dockerode.HostConfig.prototype.CpuShares;
 /** @type {string} */
Dockerode.HostConfig.prototype.CgroupParent;
 /** @type {number} */
Dockerode.HostConfig.prototype.BlkioWeight;
 /** @type {?} */
Dockerode.HostConfig.prototype.BlkioWeightDevice;
 /** @type {?} */
Dockerode.HostConfig.prototype.BlkioDeviceReadBps;
 /** @type {?} */
Dockerode.HostConfig.prototype.BlkioDeviceWriteBps;
 /** @type {?} */
Dockerode.HostConfig.prototype.BlkioDeviceReadIOps;
 /** @type {?} */
Dockerode.HostConfig.prototype.BlkioDeviceWriteIOps;
 /** @type {number} */
Dockerode.HostConfig.prototype.CpuPeriod;
 /** @type {number} */
Dockerode.HostConfig.prototype.CpuQuota;
 /** @type {string} */
Dockerode.HostConfig.prototype.CpusetCpus;
 /** @type {string} */
Dockerode.HostConfig.prototype.CpusetMems;
 /** @type {?} */
Dockerode.HostConfig.prototype.Devices;
 /** @type {number} */
Dockerode.HostConfig.prototype.KernelMemory;
 /** @type {number} */
Dockerode.HostConfig.prototype.Memory;
 /** @type {number} */
Dockerode.HostConfig.prototype.MemoryReservation;
 /** @type {number} */
Dockerode.HostConfig.prototype.MemorySwap;
 /** @type {number} */
Dockerode.HostConfig.prototype.MemorySwappiness;
 /** @type {boolean} */
Dockerode.HostConfig.prototype.OomKillDisable;
 /** @type {number} */
Dockerode.HostConfig.prototype.PidsLimit;
 /** @type {?} */
Dockerode.HostConfig.prototype.Ulimits;
/**
 * @record
 * @struct
 */
Dockerode.ImageInspectInfo = function() {};
 /** @type {string} */
Dockerode.ImageInspectInfo.prototype.Id;
 /** @type {!Array<string>} */
Dockerode.ImageInspectInfo.prototype.RepoTags;
 /** @type {!Array<string>} */
Dockerode.ImageInspectInfo.prototype.RepoDigests;
 /** @type {string} */
Dockerode.ImageInspectInfo.prototype.Parent;
 /** @type {string} */
Dockerode.ImageInspectInfo.prototype.Comment;
 /** @type {string} */
Dockerode.ImageInspectInfo.prototype.Created;
 /** @type {string} */
Dockerode.ImageInspectInfo.prototype.Container;
 /** @type {{Hostname: string, Domainname: string, User: string, AttachStdin: boolean, AttachStdout: boolean, AttachStderr: boolean, ExposedPorts: !Object<string,!Object>, Tty: boolean, OpenStdin: boolean, StdinOnce: boolean, Env: !Array<string>, Cmd: !Array<string>, ArgsEscaped: boolean, Image: string, Volumes: !Object<string,?>, WorkingDir: string, Entrypoint: ?, OnBuild: !Array<?>, Labels: !Object<string,string>}} */
Dockerode.ImageInspectInfo.prototype.ContainerConfig;
 /** @type {string} */
Dockerode.ImageInspectInfo.prototype.DockerVersion;
 /** @type {string} */
Dockerode.ImageInspectInfo.prototype.Author;
 /** @type {{Hostname: string, Domainname: string, User: string, AttachStdin: boolean, AttachStdout: boolean, AttachStderr: boolean, ExposedPorts: !Object<string,!Object>, Tty: boolean, OpenStdin: boolean, StdinOnce: boolean, Env: !Array<string>, Cmd: !Array<string>, ArgsEscaped: boolean, Image: string, Volumes: !Object<string,?>, WorkingDir: string, Entrypoint: ?, OnBuild: !Array<?>, Labels: !Object<string,string>}} */
Dockerode.ImageInspectInfo.prototype.Config;
 /** @type {string} */
Dockerode.ImageInspectInfo.prototype.Architecture;
 /** @type {string} */
Dockerode.ImageInspectInfo.prototype.Os;
 /** @type {number} */
Dockerode.ImageInspectInfo.prototype.Size;
 /** @type {number} */
Dockerode.ImageInspectInfo.prototype.VirtualSize;
 /** @type {{Name: string, Data: {DeviceId: string, DeviceName: string, DeviceSize: string}}} */
Dockerode.ImageInspectInfo.prototype.GraphDriver;
/**
 * @record
 * @struct
 */
Dockerode.ContainerCreateOptions = function() {};
 /** @type {string} */
Dockerode.ContainerCreateOptions.prototype.name;
 /** @type {string} */
Dockerode.ContainerCreateOptions.prototype.Hostname;
 /** @type {string} */
Dockerode.ContainerCreateOptions.prototype.Domainname;
 /** @type {string} */
Dockerode.ContainerCreateOptions.prototype.User;
 /** @type {boolean} */
Dockerode.ContainerCreateOptions.prototype.AttachStdin;
 /** @type {boolean} */
Dockerode.ContainerCreateOptions.prototype.AttachStdout;
 /** @type {boolean} */
Dockerode.ContainerCreateOptions.prototype.AttachStderr;
 /** @type {boolean} */
Dockerode.ContainerCreateOptions.prototype.Tty;
 /** @type {boolean} */
Dockerode.ContainerCreateOptions.prototype.OpenStdin;
 /** @type {boolean} */
Dockerode.ContainerCreateOptions.prototype.StdinOnce;
 /** @type {!Array<string>} */
Dockerode.ContainerCreateOptions.prototype.Env;
 /** @type {!Array<string>} */
Dockerode.ContainerCreateOptions.prototype.Cmd;
 /** @type {string} */
Dockerode.ContainerCreateOptions.prototype.Entrypoint;
 /** @type {string} */
Dockerode.ContainerCreateOptions.prototype.Image;
 /** @type {!Object<string,string>} */
Dockerode.ContainerCreateOptions.prototype.Labels;
 /** @type {!Object<string,!Object>} */
Dockerode.ContainerCreateOptions.prototype.Volumes;
 /** @type {string} */
Dockerode.ContainerCreateOptions.prototype.WorkingDir;
 /** @type {boolean} */
Dockerode.ContainerCreateOptions.prototype.NetworkDisabled;
 /** @type {boolean} */
Dockerode.ContainerCreateOptions.prototype.MacAddress;
 /** @type {!Object<string,!Object>} */
Dockerode.ContainerCreateOptions.prototype.ExposedPorts;
 /** @type {string} */
Dockerode.ContainerCreateOptions.prototype.StopSignal;
 /** @type {{Binds: !Array<string>, Links: !Array<string>, Memory: number, MemorySwap: number, MemoryReservation: number, KernelMemory: number, CpuPercent: number, CpuShares: number, CpuPeriod: number, CpuQuota: number, CpusetMems: string, MaximumIOps: number, MaxmimumIOBps: number, BlkioWeightDevice: !Array<!Object>, BlkioDeviceReadBps: !Array<?>, BlkioDeviceReadIOps: !Array<?>, BlkioDeviceWriteBps: !Array<?>, BlkioDeviceWriteIOps: !Array<?>, MemorySwappiness: number, OomKillDisable: boolean, OomScoreAdj: number, PidMode: string, PidsLimit: number, PortBindings: !Object<string,!Array<!Object<string,string>>>, PublishAllPorts: boolean, Privileged: boolean, ReadonlyRootfs: boolean, Dns: !Array<string>, DnsOptions: !Array<string>, DnsSearch: !Array<string>, ExtraHosts: ?, VolumesFrom: !Array<string>, CapAdd: !Array<string>, CapDrop: !Array<string>, GroupAdd: !Array<string>, RestartPolicy: !Object<string,(string|number)>, NetworkMode: string, Devices: !Array<?>, Sysctls: !Object<string,string>, Ulimits: !Array<?>, LogConfig: !Object<string,(string|?)>, SecurityOpt: !Object<string,?>, CgroupParent: string, VolumeDriver: string, ShmSize: number}} */
Dockerode.ContainerCreateOptions.prototype.HostConfig;
 /** @type {{EndpointsConfig: ?}} */
Dockerode.ContainerCreateOptions.prototype.NetworkingConfig;
/**
 * @record
 * @struct
 */
Dockerode.DockerOptions = function() {};
 /** @type {string} */
Dockerode.DockerOptions.prototype.socketPath;
 /** @type {string} */
Dockerode.DockerOptions.prototype.host;
 /** @type {(string|number)} */
Dockerode.DockerOptions.prototype.port;
 /** @type {string} */
Dockerode.DockerOptions.prototype.ca;
 /** @type {string} */
Dockerode.DockerOptions.prototype.cert;
 /** @type {string} */
Dockerode.DockerOptions.prototype.key;
 /** @type {string} */
Dockerode.DockerOptions.prototype.protocol;
 /** @type {number} */
Dockerode.DockerOptions.prototype.timeout;
 /** @type {!PromiseConstructor} */
Dockerode.DockerOptions.prototype.Promise;
/**
 * @record
 * @struct
 */
Dockerode.SecretVersion = function() {};
 /** @type {number} */
Dockerode.SecretVersion.prototype.Index;
/**
 * @record
 * @struct
 */
Dockerode.ServiceSpec = function() {};
 /** @type {string} */
Dockerode.ServiceSpec.prototype.Name;
/**
 * @record
 * @struct
 */
Dockerode.SecretInfo = function() {};
 /** @type {string} */
Dockerode.SecretInfo.prototype.ID;
 /** @type {!Dockerode.SecretVersion} */
Dockerode.SecretInfo.prototype.Version;
 /** @type {string} */
Dockerode.SecretInfo.prototype.CreatedAt;
 /** @type {string} */
Dockerode.SecretInfo.prototype.UpdatedAt;
 /** @type {!Dockerode.ServiceSpec} */
Dockerode.SecretInfo.prototype.Spec;
/**
 * @record
 * @struct
 */
Dockerode.PluginInfo = function() {};
 /** @type {string} */
Dockerode.PluginInfo.prototype.Id;
 /** @type {string} */
Dockerode.PluginInfo.prototype.Name;
 /** @type {boolean} */
Dockerode.PluginInfo.prototype.Enabled;
 /** @type {!Dockerode.PluginSettings} */
Dockerode.PluginInfo.prototype.Settings;
 /** @type {string} */
Dockerode.PluginInfo.prototype.PluginReference;
 /** @type {!Dockerode.PluginConfig} */
Dockerode.PluginInfo.prototype.Config;

/** @typedef {!Dockerode.PluginInfo} */
Dockerode.PluginInspectInfo;
/**
 * @record
 * @struct
 */
Dockerode.PluginSettings = function() {};
 /** @type {!Array<!Dockerode.PluginMount>} */
Dockerode.PluginSettings.prototype.Mounts;
 /** @type {!Array<string>} */
Dockerode.PluginSettings.prototype.Env;
 /** @type {!Array<string>} */
Dockerode.PluginSettings.prototype.Args;
 /** @type {!Array<!Dockerode.PluginDevice>} */
Dockerode.PluginSettings.prototype.Devices;
/**
 * @record
 * @struct
 */
Dockerode.PluginConfig = function() {};
 /** @type {string} */
Dockerode.PluginConfig.prototype.Description;
 /** @type {string} */
Dockerode.PluginConfig.prototype.Documentation;
 /** @type {?} */
Dockerode.PluginConfig.prototype.Interface;
 /** @type {!Array<string>} */
Dockerode.PluginConfig.prototype.Entrypoint;
 /** @type {string} */
Dockerode.PluginConfig.prototype.WorkDir;
 /** @type {!Dockerode.User} */
Dockerode.PluginConfig.prototype.User;
 /** @type {!Dockerode.Network} */
Dockerode.PluginConfig.prototype.Network;
 /** @type {!Dockerode.Linux} */
Dockerode.PluginConfig.prototype.Linux;
 /** @type {string} */
Dockerode.PluginConfig.prototype.PropagatedMount;
 /** @type {!Array<!Dockerode.PluginMount>} */
Dockerode.PluginConfig.prototype.Mounts;
 /** @type {!Array<!Dockerode.PluginEnv>} */
Dockerode.PluginConfig.prototype.Env;
 /** @type {!Dockerode.Args} */
Dockerode.PluginConfig.prototype.Args;
 /** @type {?} */
Dockerode.PluginConfig.prototype.rootfs;
/**
 * @record
 * @struct
 */
Dockerode.Interface = function() {};
 /** @type {!Array<!Dockerode.PluginInterfaceType>} */
Dockerode.Interface.prototype.Types;
 /** @type {string} */
Dockerode.Interface.prototype.Socket;
/**
 * @record
 * @struct
 */
Dockerode.PluginInterfaceType = function() {};
 /** @type {string} */
Dockerode.PluginInterfaceType.prototype.Prefix;
 /** @type {string} */
Dockerode.PluginInterfaceType.prototype.Capability;
 /** @type {string} */
Dockerode.PluginInterfaceType.prototype.Version;
/**
 * @record
 * @struct
 */
Dockerode.PluginMount = function() {};
 /** @type {string} */
Dockerode.PluginMount.prototype.Name;
 /** @type {string} */
Dockerode.PluginMount.prototype.Description;
 /** @type {!Array<string>} */
Dockerode.PluginMount.prototype.Settable;
 /** @type {string} */
Dockerode.PluginMount.prototype.Source;
 /** @type {string} */
Dockerode.PluginMount.prototype.Destination;
 /** @type {string} */
Dockerode.PluginMount.prototype.Type;
 /** @type {!Array<string>} */
Dockerode.PluginMount.prototype.Options;
/**
 * @record
 * @struct
 */
Dockerode.Linux = function() {};
 /** @type {!Array<string>} */
Dockerode.Linux.prototype.Capabilities;
 /** @type {boolean} */
Dockerode.Linux.prototype.AllowAllDevices;
 /** @type {!Array<!Dockerode.PluginDevice>} */
Dockerode.Linux.prototype.Devices;
/**
 * @record
 * @struct
 */
Dockerode.PluginDevice = function() {};
 /** @type {string} */
Dockerode.PluginDevice.prototype.Name;
 /** @type {string} */
Dockerode.PluginDevice.prototype.Description;
 /** @type {!Array<string>} */
Dockerode.PluginDevice.prototype.Settable;
 /** @type {string} */
Dockerode.PluginDevice.prototype.Path;
 /** @type {string} */
Dockerode.Network.prototype.Type;
/**
 * @record
 * @struct
 */
Dockerode.PluginEnv = function() {};
 /** @type {string} */
Dockerode.PluginEnv.prototype.Name;
 /** @type {string} */
Dockerode.PluginEnv.prototype.Description;
 /** @type {!Array<string>} */
Dockerode.PluginEnv.prototype.Settable;
 /** @type {string} */
Dockerode.PluginEnv.prototype.Value;
/**
 * @record
 * @struct
 */
Dockerode.Args = function() {};
 /** @type {string} */
Dockerode.Args.prototype.Name;
 /** @type {string} */
Dockerode.Args.prototype.Description;
 /** @type {!Array<string>} */
Dockerode.Args.prototype.Settable;
 /** @type {string} */
Dockerode.Args.prototype.Value;
/**
 * @record
 * @struct
 */
Dockerode.User = function() {};
 /** @type {number} */
Dockerode.User.prototype.UID;
 /** @type {number} */
Dockerode.User.prototype.GID;
/**
 * @record
 * @struct
 */
Dockerode.ImageRemoveInfo = function() {};
 /** @type {string} */
Dockerode.ImageRemoveInfo.prototype.Untagged;
 /** @type {string} */
Dockerode.ImageRemoveInfo.prototype.Deleted;
/**
 * @record
 * @struct
 */
Dockerode.PruneImagesInfo = function() {};
 /** @type {!Array<!Dockerode.ImageRemoveInfo>} */
Dockerode.PruneImagesInfo.prototype.ImagesDeleted;
 /** @type {number} */
Dockerode.PruneImagesInfo.prototype.SpaceReclaimed;
/**
 * @record
 * @struct
 */
Dockerode.PruneVolumesInfo = function() {};
 /** @type {!Array<string>} */
Dockerode.PruneVolumesInfo.prototype.VolumesDeleted;
 /** @type {number} */
Dockerode.PruneVolumesInfo.prototype.SpaceReclaimed;
/**
 * @record
 * @struct
 */
Dockerode.PruneContainersInfo = function() {};
 /** @type {!Array<string>} */
Dockerode.PruneContainersInfo.prototype.ContainersDeleted;
 /** @type {number} */
Dockerode.PruneContainersInfo.prototype.SpaceReclaimed;
/**
 * @record
 * @struct
 */
Dockerode.PruneNetworksInfo = function() {};
 /** @type {!Array<string>} */
Dockerode.PruneNetworksInfo.prototype.NetworksDeleted;
/**
 * @record
 * @struct
 */
Dockerode.ContainerLogsOptions = function() {};
 /** @type {boolean} */
Dockerode.ContainerLogsOptions.prototype.stdout;
 /** @type {boolean} */
Dockerode.ContainerLogsOptions.prototype.stderr;
 /** @type {boolean} */
Dockerode.ContainerLogsOptions.prototype.follow;
 /** @type {number} */
Dockerode.ContainerLogsOptions.prototype.since;
 /** @type {boolean} */
Dockerode.ContainerLogsOptions.prototype.details;
 /** @type {number} */
Dockerode.ContainerLogsOptions.prototype.tail;
 /** @type {boolean} */
Dockerode.ContainerLogsOptions.prototype.timestamps;
/**
 * @record
 * @struct
 */
Dockerode.ImageBuildContext = function() {};
 /** @type {string} */
Dockerode.ImageBuildContext.prototype.context;
 /** @type {!Array<string>} */
Dockerode.ImageBuildContext.prototype.src;

/** @typedef {?} */
var Callback;
 /** @type {?} */
Dockerode.prototype.modem;

/**
 * @param {!Dockerode.ContainerCreateOptions} options
 * @param {?=} callback
 * @return {void|!Promise<!Dockerode.Container>}
 */
Dockerode.prototype.createContainer = function(options, callback) {};

/**
 * @param {!Object|?} options_or_auth
 * @param {?|!Object=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<!Dockerode.Image>}
 */
Dockerode.prototype.createImage = function(options_or_auth, callback_or_options, callback) {};

/**
 * @param {string} file
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.prototype.loadImage = function(file, options_or_callback, callback) {};

/**
 * @param {string} file
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.prototype.importImage = function(file, options_or_callback, callback) {};

/**
 * @param {?} options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.prototype.checkAuth = function(options, callback) {};

/**
 * @param {(string|!NodeJS.ReadableStream|!Dockerode.ImageBuildContext)} file
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.prototype.buildImage = function(file, options_or_callback, callback) {};

/**
 * @param {string} id
 * @return {!Dockerode.Container}
 */
Dockerode.prototype.getContainer = function(id) {};

/**
 * @param {string} name
 * @return {!Dockerode.Image}
 */
Dockerode.prototype.getImage = function(name) {};

/**
 * @param {string} name
 * @return {!Dockerode.Volume}
 */
Dockerode.prototype.getVolume = function(name) {};

/**
 * @param {string} name
 * @param {?} remote
 * @return {!Dockerode.Plugin}
 */
Dockerode.prototype.getPlugin = function(name, remote) {};

/**
 * @param {string} id
 * @return {!Dockerode.Service}
 */
Dockerode.prototype.getService = function(id) {};

/**
 * @param {string} id
 * @return {!Dockerode.Task}
 */
Dockerode.prototype.getTask = function(id) {};

/**
 * @param {string} id
 * @return {!Dockerode.Node}
 */
Dockerode.prototype.getNode = function(id) {};

/**
 * @param {string} id
 * @return {!Dockerode.Network}
 */
Dockerode.prototype.getNetwork = function(id) {};

/**
 * @param {string} id
 * @return {!Dockerode.Secret}
 */
Dockerode.prototype.getSecret = function(id) {};

/**
 * @param {string} id
 * @return {!Dockerode.Exec}
 */
Dockerode.prototype.getExec = function(id) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<!Array<!Dockerode.ContainerInfo>>}
 */
Dockerode.prototype.listContainers = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<!Array<!Dockerode.ImageInfo>>}
 */
Dockerode.prototype.listImages = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<!Array<?>>}
 */
Dockerode.prototype.listServices = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<!Array<?>>}
 */
Dockerode.prototype.listNodes = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<!Array<?>>}
 */
Dockerode.prototype.listTasks = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<!Array<!Dockerode.SecretInfo>>}
 */
Dockerode.prototype.listSecrets = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<!Array<!Dockerode.PluginInfo>>}
 */
Dockerode.prototype.listPlugins = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<!Array<?>>}
 */
Dockerode.prototype.listVolumes = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<!Array<?>>}
 */
Dockerode.prototype.listNetworks = function(options_or_callback, callback) {};

/**
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.prototype.createSecret = function(options, callback) {};

/**
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.prototype.createPlugin = function(options, callback) {};

/**
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.prototype.createVolume = function(options, callback) {};

/**
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.prototype.createService = function(options, callback) {};

/**
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.prototype.createNetwork = function(options, callback) {};

/**
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.prototype.searchImages = function(options, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<!Dockerode.PruneImagesInfo>}
 */
Dockerode.prototype.pruneImages = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<!Dockerode.PruneContainersInfo>}
 */
Dockerode.prototype.pruneContainers = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<!Dockerode.PruneVolumesInfo>}
 */
Dockerode.prototype.pruneVolumes = function(options_or_callback, callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<!Dockerode.PruneNetworksInfo>}
 */
Dockerode.prototype.pruneNetworks = function(options_or_callback, callback) {};

/**
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.prototype.info = function(callback) {};

/**
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.prototype.version = function(callback) {};

/**
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.prototype.ping = function(callback) {};

/**
 * @param {!Object|?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<!NodeJS.ReadableStream>}
 */
Dockerode.prototype.getEvents = function(options_or_callback, callback) {};

/**
 * @param {string} repoTag
 * @param {!Object} options
 * @param {?|!Object=} callback_or_auth
 * @param {!Object=} auth
 * @return {!Dockerode.Image|!Promise<?>}
 */
Dockerode.prototype.pull = function(repoTag, options, callback_or_auth, auth) {};

/**
 * @param {string} image
 * @param {!Array<string>} cmd
 * @param {!NodeJS.WritableStream} outputStream
 * @param {!Object|?=} createOptions_or_startOptions_or_callback
 * @param {!Object|?=} startOptions_or_callback
 * @param {?=} callback
 * @return {!internal.EventEmitter|!Promise<?>}
 */
Dockerode.prototype.run = function(image, cmd, outputStream, createOptions_or_startOptions_or_callback, startOptions_or_callback, callback) {};

/**
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.prototype.swarmInit = function(options, callback) {};

/**
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.prototype.swarmJoin = function(options, callback) {};

/**
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.prototype.swarmLeave = function(options, callback) {};

/**
 * @param {!Object} options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.prototype.swarmUpdate = function(options, callback) {};

/**
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Dockerode.prototype.swarmInspect = function(callback) {};

/* TODO: ExportAssignment in  */
