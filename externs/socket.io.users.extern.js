/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/socket.io.users/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */
 /** @type {!Array<string>} */
var CONNECTION_EVENTS;
 /** @type {function(): function(!SocketIO.Socket, function(): ?): void} */
var Middleware;
 /** @type {function(!e.Application, !session.SessionOptions): void} */
var Session;

/** @typedef {?} */
var SocketUserList;
/**
 * @constructor
 * @struct
 */
function Namespaces() {}
 /** @type {?} */
Namespaces.socketUsersList;

/**
 * @param {string} namespace
 * @param {!Users} socketUsersObj
 * @return {void}
 */
Namespaces.attach = function(namespace, socketUsersObj) {};

/**
 * @param {string} namespace
 * @return {!Users}
 */
Namespaces.get = function(namespace) {};
/**
 * @constructor
 * @struct
 */
function User() {}
 /** @type {(string|number)} */
User.prototype.id;
 /** @type {!SocketIO.Socket} */
User.prototype.socket;
 /** @type {!Array<!SocketIO.Socket>} */
User.prototype.sockets;
 /** @type {!Array<string>} */
User.prototype.rooms;
 /** @type {string} */
User.prototype.ip;
 /** @type {!Array<string>} */
User.prototype.remoteAddresses;
 /** @type {?} */
User.prototype.store;
 /** @type {function(string): ?} */
User.prototype.get;

/**
 * @param {!SocketIO.Socket} socket
 * @return {void}
 */
User.prototype.attach = function(socket) {};

/**
 * @param {!SocketIO.Socket} socket
 * @return {void}
 */
User.prototype.detachSocket = function(socket) {};

/**
 * @return {void}
 */
User.prototype.detach = function() {};

/**
 * @param {string} room
 * @return {boolean}
 */
User.prototype.join = function(room) {};

/**
 * @param {string} room
 * @return {void}
 */
User.prototype.leave = function(room) {};

/**
 * @return {void}
 */
User.prototype.leaveAll = function() {};

/**
 * same as in, checks if this user is inside a room
 * @param {string} room
 * @return {boolean}
 */
User.prototype.belong = function(room) {};

/**
 * same as belong, checks if this user is inside a room
 * @param {string} room
 * @return {boolean}
 */
User.prototype.in = function(room) {};

/**
 * @param {string} key
 * @param {?} value
 * @param {function(): void=} callback
 * @return {void}
 */
User.prototype.set = function(key, value, callback) {};

/**
 * @return {string}
 */
User.prototype.toString = function() {};

/**
 * @param {...?} args
 * @return {void}
 */
User.prototype.emit = function(args) {};

/**
 * @param {string} room
 * @return {!SocketIO.Socket}
 */
User.prototype.to = function(room) {};

/**
 * @constructor
 * @struct
 * @param {string=} namespace
 */
function Users(namespace) {}
 /** @type {string} */
Users.prototype.namespace;
 /** @type {!Array<!User>} */
Users.prototype.users;
 /** @type {function(?): (string|number)} */
Users.prototype.takeId;

/**
 * @param {string=} namespace
 * @return {!Users}
 */
Users.of = function(namespace) {};

/**
 * @param {!SocketIO.Socket} socket
 * @return {!User}
 */
Users.prototype.create = function(socket) {};

/**
 * @param {(string|number)} id
 * @return {!User}
 */
Users.prototype.getById = function(id) {};

/**
 * @param {!SocketIO.Socket} socket
 * @return {!User}
 */
Users.prototype.get = function(socket) {};

/**
 * @return {!Array<!User>}
 */
Users.prototype.list = function() {};

/**
 * @return {number}
 */
Users.prototype.size = function() {};

/**
 * @param {!User} _user
 * @return {void}
 */
Users.prototype.push = function(_user) {};

/**
 * @param {!SocketIO.Socket} socket
 * @return {!User}
 */
Users.prototype.add = function(socket) {};

/**
 * @param {!User} user
 * @return {number}
 */
Users.prototype.indexOf = function(user) {};

/**
 * @param {!User} user
 * @return {void}
 */
Users.prototype.remove = function(user) {};

/**
 * @param {string} room
 * @return {!Array<!User>}
 */
Users.prototype.room = function(room) {};

/**
 * @param {string} room
 * @return {!Array<!User>}
 */
Users.prototype.in = function(room) {};

/**
 * @param {string} room
 * @return {!Array<!User>}
 */
Users.prototype.from = function(room) {};

/**
 * @param {!User} user
 * @return {void}
 */
Users.prototype.update = function(user) {};

/**
 * @param {...?} args
 * @return {void}
 */
Users.prototype.emitAll = function(args) {};

/**
 * @param {!User} currentUser
 * @return {void}
 */
Users.prototype.registerSocketEvents = function(currentUser) {};
