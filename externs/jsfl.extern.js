/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jsfl/index.d.ts:
/**
 * @record
 * @struct
 */
function FlashPoint() {}
 /** @type {number} */
FlashPoint.prototype.x;
 /** @type {number} */
FlashPoint.prototype.y;
/**
 * @extends {FlashPoint}
 * @record
 * @struct
 */
function FlashPoint3D() {}
 /** @type {number} */
FlashPoint3D.prototype.z;
/**
 * @record
 * @struct
 */
function FlashRectangle() {}
 /** @type {number} */
FlashRectangle.prototype.top;
 /** @type {number} */
FlashRectangle.prototype.right;
 /** @type {number} */
FlashRectangle.prototype.bottom;
 /** @type {number} */
FlashRectangle.prototype.left;
/**
 * @record
 * @struct
 */
function FlashMatrix() {}
 /** @type {number} */
FlashMatrix.prototype.a;
 /** @type {number} */
FlashMatrix.prototype.b;
 /** @type {number} */
FlashMatrix.prototype.c;
 /** @type {number} */
FlashMatrix.prototype.d;
 /** @type {number} */
FlashMatrix.prototype.tx;
 /** @type {number} */
FlashMatrix.prototype.ty;
/**
 * @record
 * @struct
 */
function FlashFilter() {}
 /** @type {number} */
FlashFilter.prototype.angle;
 /** @type {number} */
FlashFilter.prototype.blurX;
 /** @type {number} */
FlashFilter.prototype.blurY;
 /** @type {number} */
FlashFilter.prototype.brightness;
 /** @type {?} */
FlashFilter.prototype.color;
 /** @type {number} */
FlashFilter.prototype.contrast;
 /** @type {number} */
FlashFilter.prototype.distance;
 /** @type {boolean} */
FlashFilter.prototype.enabled;
 /** @type {boolean} */
FlashFilter.prototype.hideObject;
 /** @type {?} */
FlashFilter.prototype.highlightColor;
 /** @type {number} */
FlashFilter.prototype.hue;
 /** @type {boolean} */
FlashFilter.prototype.inner;
 /** @type {boolean} */
FlashFilter.prototype.knockout;
 /** @type {string} */
FlashFilter.prototype.name;
 /** @type {string} */
FlashFilter.prototype.quality;
 /** @type {number} */
FlashFilter.prototype.saturation;
 /** @type {?} */
FlashFilter.prototype.shadowColor;
 /** @type {number} */
FlashFilter.prototype.strength;
 /** @type {string} */
FlashFilter.prototype.type;
/**
 * @record
 * @struct
 */
function FlashDocument() {}
 /** @type {string} */
FlashDocument.prototype.accName;
 /** @type {boolean} */
FlashDocument.prototype.as3AutoDeclare;
 /** @type {string} */
FlashDocument.prototype.as3Dialect;
 /** @type {number} */
FlashDocument.prototype.as3ExportFrame;
 /** @type {boolean} */
FlashDocument.prototype.as3StrictMode;
 /** @type {boolean} */
FlashDocument.prototype.as3WarningsMode;
 /** @type {number} */
FlashDocument.prototype.asVersion;
 /** @type {boolean} */
FlashDocument.prototype.autoLabel;
 /** @type {?} */
FlashDocument.prototype.backgroundColor;
 /** @type {string} */
FlashDocument.prototype.currentPublishProfile;
 /** @type {!FlashTimeline} */
FlashDocument.prototype.currentTimeline;
 /** @type {string} */
FlashDocument.prototype.description;
 /** @type {?} */
FlashDocument.prototype.docClass;
 /** @type {boolean} */
FlashDocument.prototype.forceSimple;
 /** @type {number} */
FlashDocument.prototype.frameRate;
 /** @type {number} */
FlashDocument.prototype.height;
 /** @type {number} */
FlashDocument.prototype.id;
 /** @type {!FlashLibrary} */
FlashDocument.prototype.library;
 /** @type {boolean} */
FlashDocument.prototype.livePreview;
 /** @type {string} */
FlashDocument.prototype.name;
 /** @type {string} */
FlashDocument.prototype.path;
 /** @type {string} */
FlashDocument.prototype.pathURI;
 /** @type {!Array<string>} */
FlashDocument.prototype.publishProfiles;
 /** @type {!Array<!FlashElement>} */
FlashDocument.prototype.selection;
 /** @type {boolean} */
FlashDocument.prototype.silent;
 /** @type {!Array<!FlashTimeline>} */
FlashDocument.prototype.timelines;
 /** @type {!FlashMatrix} */
FlashDocument.prototype.viewMatrix;
 /** @type {number} */
FlashDocument.prototype.width;
 /** @type {number} */
FlashDocument.prototype.zoomFactor;

/**
 * @param {string} name
 * @param {string} type
 * @param {?} data
 * @return {void}
 */
FlashDocument.prototype.addDataToDocument = function(name, type, data) {};

/**
 * @param {string} name
 * @param {string} type
 * @param {?} data
 * @return {void}
 */
FlashDocument.prototype.addDataToSelection = function(name, type, data) {};

/**
 * @param {string} filterName
 * @return {void}
 */
FlashDocument.prototype.addFilter = function(filterName) {};

/**
 * @param {!FlashPoint} position
 * @param {!FlashItem} item
 * @return {boolean}
 */
FlashDocument.prototype.addItem = function(position, item) {};

/**
 * @param {!FlashPoint} startPoint
 * @param {!FlashPoint} endpoint
 * @return {void}
 */
FlashDocument.prototype.addNewLine = function(startPoint, endpoint) {};

/**
 * @param {!FlashRectangle} boundingRectangle
 * @param {boolean=} bSuppressFill
 * @param {boolean=} bSuppressStroke
 * @return {void}
 */
FlashDocument.prototype.addNewOval = function(boundingRectangle, bSuppressFill, bSuppressStroke) {};

/**
 * @param {!FlashRectangle} boundingRectangle
 * @param {boolean=} bSpupressFill
 * @param {boolean=} bSuppressStroke
 * @return {void}
 */
FlashDocument.prototype.addNewPrimitiveOval = function(boundingRectangle, bSpupressFill, bSuppressStroke) {};

/**
 * @param {!FlashRectangle} boundingRectangle
 * @param {number} roundness
 * @param {boolean=} bSuppressFill
 * @param {boolean=} bSuppressStroke
 * @return {?}
 */
FlashDocument.prototype.addNewRectangle = function(boundingRectangle, roundness, bSuppressFill, bSuppressStroke) {};

/**
 * @param {!FlashRectangle} boundingRectangle
 * @param {number} roundness
 * @param {boolean=} bSuppressFill
 * @param {boolean=} bSuppressStroke
 * @return {?}
 */
FlashDocument.prototype.addNewPrimitiveRectangle = function(boundingRectangle, roundness, bSuppressFill, bSuppressStroke) {};

/**
 * @param {string=} profileName
 * @return {void}
 */
FlashDocument.prototype.addNewPublishProfile = function(profileName) {};

/**
 * @param {string} name
 * @return {boolean}
 */
FlashDocument.prototype.addNewScene = function(name) {};

/**
 * @param {!FlashRectangle} boundingRectangle
 * @param {string=} text
 * @return {void}
 */
FlashDocument.prototype.addNewText = function(boundingRectangle, text) {};

/**
 * @param {string} alignmode
 * @param {boolean=} bUseDocumentBounds
 * @return {?}
 */
FlashDocument.prototype.align = function(alignmode, bUseDocumentBounds) {};

/**
 * @return {void}
 */
FlashDocument.prototype.allowScreens = function() {};

/**
 * Arranges the selection on the Stage. "back", "backward", "forward", and "front"
 * @param {string} arrangeMode
 * @return {void}
 */
FlashDocument.prototype.arrange = function(arrangeMode) {};

/**
 * Performs a break-apart operation on the current
 * @return {void}
 */
FlashDocument.prototype.breakApart = function() {};

/**
 * Indicates whether the Edit Symbols menu and
 * @return {boolean}
 */
FlashDocument.prototype.canEditSymbol = function() {};

/**
 * Determines whether you can use the
 * @return {boolean}
 */
FlashDocument.prototype.canRevert = function() {};

/**
 * Determines whether you can use the
 * @return {boolean}
 */
FlashDocument.prototype.canTestMovie = function() {};

/**
 * Determines whether you can use the
 * @return {boolean}
 */
FlashDocument.prototype.canTestScene = function() {};

/**
 * Changes the index of the filter in the Filter list.
 * @param {number} oldIndex
 * @param {number} newIndex
 * @return {void}
 */
FlashDocument.prototype.changeFilterOrder = function(oldIndex, newIndex) {};

/**
 * Copies the current selection from the document
 * @return {void}
 */
FlashDocument.prototype.clipCopy = function() {};

/**
 * Cuts the current selection from the document
 * @return {void}
 */
FlashDocument.prototype.clipCut = function() {};

/**
 * Pastes the contents of the Clipboard into the document.
 * @param {boolean=} bInPlace
 * @return {void}
 */
FlashDocument.prototype.clipPaste = function(bInPlace) {};

/**
 * Closes the specified document.
 * @param {boolean=} bPromptToSaveChanges
 * @return {void}
 */
FlashDocument.prototype.close = function(bPromptToSaveChanges) {};

/**
 * Converts lines to fills on the selected objects.
 * @return {void}
 */
FlashDocument.prototype.convertLinesToFills = function() {};

/**
 * Converts the selected Stage item(s) to a new
 * @param {string} type
 * @param {string} name
 * @param {string} registrationPoint
 * @return {!FlashSymbolInstance}
 */
FlashDocument.prototype.convertToSymbol = function(type, name, registrationPoint) {};

/**
 * Uses the top selected drawing object to crop all
 * @return {void}
 */
FlashDocument.prototype.crop = function() {};

/**
 * Method; Invokes the Debug Movie command on the document.
 * @param {boolean=} abortIfErrorsExist
 * @return {void}
 */
FlashDocument.prototype.debugMovie = function(abortIfErrorsExist) {};

/**
 * Deletes the envelope (bounding box that
 * @return {boolean}
 */
FlashDocument.prototype.deleteEnvelope = function() {};

/**
 * Deletes the currently active profile, if there is
 * @return {boolean}
 */
FlashDocument.prototype.deletePublishProfile = function() {};

/**
 * Deletes the current scene (Timeline object), and
 * @return {boolean}
 */
FlashDocument.prototype.deleteScene = function() {};

/**
 * Deletes the current selection on the Stage.
 * @return {void}
 */
FlashDocument.prototype.deleteSelection = function() {};

/**
 * Disables all filters on the selected objects.
 * @return {void}
 */
FlashDocument.prototype.disableAllFilters = function() {};

/**
 * Disables the specified filter in the Filters list.
 * @param {number} filterIndex
 * @return {void}
 */
FlashDocument.prototype.disableFilter = function(filterIndex) {};

/**
 * Disables all filters except the one at the specified
 * @param {number} enabledFilterIndex
 * @return {void}
 */
FlashDocument.prototype.disableOtherFilters = function(enabledFilterIndex) {};

/**
 * Distributes the selection.
 * @param {string} distributemode
 * @param {boolean=} bUseDocumentBounds
 * @return {void}
 */
FlashDocument.prototype.distribute = function(distributemode, bUseDocumentBounds) {};

/**
 * Performs a distribute-to-layers operation on the
 * @return {void}
 */
FlashDocument.prototype.distributeToLayers = function() {};

/**
 * Checks the document for persistent data with the
 * @param {string} name
 * @return {boolean}
 */
FlashDocument.prototype.documentHasData = function(name) {};

/**
 * Duplicates the currently active profile and gives
 * @param {string=} profileName
 * @return {number}
 */
FlashDocument.prototype.duplicatePublishProfile = function(profileName) {};

/**
 * Makes a copy of the currently selected scene,
 * @return {boolean}
 */
FlashDocument.prototype.duplicateScene = function() {};

/**
 * Duplicates the selection on the Stage.
 * @return {void}
 */
FlashDocument.prototype.duplicateSelection = function() {};

/**
 * Makes the specified scene the currently selected
 * @param {number} index
 * @return {void}
 */
FlashDocument.prototype.editScene = function(index) {};

/**
 * Enables all the filters on the Filters list for the
 * @return {void}
 */
FlashDocument.prototype.enableAllFilters = function() {};

/**
 * Enables the specified filter for the selected
 * @param {number} filterIndex
 * @return {void}
 */
FlashDocument.prototype.enableFilter = function(filterIndex) {};

/**
 * Switches the authoring tool into the editing mode
 * @param {string=} editMode
 * @return {void}
 */
FlashDocument.prototype.enterEditMode = function(editMode) {};

/**
 * Exits from symbol-editing mode and returns
 * @return {void}
 */
FlashDocument.prototype.exitEditMode = function() {};

/**
 * Exports the document as one or more PNG files.
 * @param {string} fileURI
 * @param {boolean=} bCurrentPNGSettings
 * @param {boolean=} bCurrentFrame
 * @return {boolean}
 */
FlashDocument.prototype.exportPNG = function(fileURI, bCurrentPNGSettings, bCurrentFrame) {};

/**
 * Exports the currently active profile to an XML
 * @param {string} fileURI
 * @return {void}
 */
FlashDocument.prototype.exportPublishProfile = function(fileURI) {};

/**
 * returns a string that specifies, in XML format, the specified profile. If you don't pass a value for profileName, the current profile is exported.
 * @param {string=} profileName
 * @return {string}
 */
FlashDocument.prototype.exportPublishProfileString = function(profileName) {};

/**
 * Exports the document in the Flash SWF format.
 * @param {string} fileURI
 * @param {boolean=} bCurrentSettings
 * @return {void}
 */
FlashDocument.prototype.exportSWF = function(fileURI, bCurrentSettings) {};

/**
 * Identical to retrieving the value of the To Stage
 * @return {boolean}
 */
FlashDocument.prototype.getAlignToDocument = function() {};

/**
 * Returns a string that specifies the blending mode
 * @return {string}
 */
FlashDocument.prototype.getBlendMode = function() {};

/**
 * Retrieves the fill object of the selected shape, or
 * @param {string=} objectToFill
 * @return {!FlashFill}
 */
FlashDocument.prototype.getCustomFill = function(objectToFill) {};

/**
 * Returns the stroke object of the selected shape,
 * @param {string=} locationOfStroke
 * @return {!FlashStroke}
 */
FlashDocument.prototype.getCustomStroke = function(locationOfStroke) {};

/**
 * Retrieves the value of the specified data.
 * @param {string} name
 * @return {?}
 */
FlashDocument.prototype.getDataFromDocument = function(name) {};

/**
 * Gets the specified Element property for the
 * @param {string} propertyName
 * @return {?}
 */
FlashDocument.prototype.getElementProperty = function(propertyName) {};

/**
 * Gets a specified TextAttrs property of the
 * @param {string} attrName
 * @param {number=} startIndex
 * @param {number=} endIndex
 * @return {!FlashTextAttrs}
 */
FlashDocument.prototype.getElementTextAttr = function(attrName, startIndex, endIndex) {};

/**
 * Returns an array that contains the list of filters
 * @return {!Array<!FlashFilter>}
 */
FlashDocument.prototype.getFilters = function() {};

/**
 * Returns a string containing the XML metadata
 * @return {string}
 */
FlashDocument.prototype.getMetadata = function() {};

/**
 * returns the mobile XML settings for the document.
 * @return {string}
 */
FlashDocument.prototype.getMobileSettings = function() {};

/**
 * Returns a string that represents the targeted
 * @return {string}
 */
FlashDocument.prototype.getPlayerVersion = function() {};

/**
 * Gets the bounding rectangle of the current
 * @return {!FlashRectangle}
 */
FlashDocument.prototype.getSelectionRect = function() {};

/**
 * Gets the currently selected text.
 * @param {number=} startIndex
 * @param {number=} endIndex
 * @return {string}
 */
FlashDocument.prototype.getTextString = function(startIndex, endIndex) {};

/**
 * Retrieves the current Timeline object in the
 * @return {!FlashTimeline}
 */
FlashDocument.prototype.getTimeline = function() {};

/**
 * gets the location of the transformation point of the current selection. You can use the transformation point for commutations such as rotate and skew.
 * @return {!FlashPoint}
 */
FlashDocument.prototype.getTransformationPoint = function() {};

/**
 * Converts the current selection to a group.
 * @return {void}
 */
FlashDocument.prototype.group = function() {};

/**
 * Imports a file into the document.
 * @param {string} fileURI
 * @param {boolean=} importToLibrary
 * @return {void}
 */
FlashDocument.prototype.importFile = function(fileURI, importToLibrary) {};

/**
 * Imports a profile from a file.
 * @param {string} fileURI
 * @return {number}
 */
FlashDocument.prototype.importPublishProfile = function(fileURI) {};

/**
 * imports an XML string that represents a publish profile and sets it as the current profile. To generate an XML string to import, use document.exportPublishProfileString() before using this method.
 * @param {string} xmlString
 * @return {number}
 */
FlashDocument.prototype.importPublishProfileString = function(xmlString) {};

/**
 * Imports a SWF file into the document.
 * @param {string} fileURI
 * @return {void}
 */
FlashDocument.prototype.importSWF = function(fileURI) {};

/**
 * creates an intersection drawing object from all selected drawing objects. This method returns false if there are no drawing objects selected, or if any of the selected items are not drawing objects.
 * @return {boolean}
 */
FlashDocument.prototype.intersect = function() {};

/**
 * loads a cue point XML file. The format and DTD of the XML file is the same as the one imported and exported by the Cue Points Property inspector. The return value is the same as the string serialized in the Cue Point property of the object containing the instance of an FLVPlayback Component.
 * @param {string} uri
 * @return {!Array<?>}
 */
FlashDocument.prototype.loadCuepointXML = function(uri) {};

/**
 * Makes the size of the selected objects the same.
 * @param {boolean} bWidth
 * @param {boolean} bHeight
 * @param {boolean=} bUseDocumentBounds
 * @return {void}
 */
FlashDocument.prototype.match = function(bWidth, bHeight, bUseDocumentBounds) {};

/**
 * Performs a mouse click from the Selection tool.
 * @param {!FlashPoint} position
 * @param {boolean} bToggleSel
 * @param {boolean} bShiftSel
 * @return {void}
 */
FlashDocument.prototype.mouseClick = function(position, bToggleSel, bShiftSel) {};

/**
 * Performs a double mouse click from the
 * @param {!FlashPoint} position
 * @param {boolean} bAltDown
 * @param {boolean} bShiftDown
 * @param {boolean} bShiftSelect
 * @return {void}
 */
FlashDocument.prototype.mouseDblClk = function(position, bAltDown, bShiftDown, bShiftSelect) {};

/**
 * If the selection contains at least one path with at
 * @param {!FlashPoint} delta
 * @return {void}
 */
FlashDocument.prototype.moveSelectedBezierPointsBy = function(delta) {};

/**
 * Moves selected objects by a specified distance.
 * @param {!FlashPoint} distanceToMove
 * @return {void}
 */
FlashDocument.prototype.moveSelectionBy = function(distanceToMove) {};

/**
 * Optimizes smoothing for the current selection,
 * @param {number} smoothing
 * @param {boolean} bUseMultiplePasses
 * @return {void}
 */
FlashDocument.prototype.optimizeCurves = function(smoothing, bUseMultiplePasses) {};

/**
 * Publishes the document according to the active
 * @return {void}
 */
FlashDocument.prototype.publish = function() {};

/**
 * uses the top selected drawing object to punch through all selected drawing objects underneath it. This method returns false if there are no drawing objects selected or if any of the selected items are not drawing objects.
 * @return {boolean}
 */
FlashDocument.prototype.punch = function() {};

/**
 * Removes all filters from the selected object(s).
 * @return {void}
 */
FlashDocument.prototype.removeAllFilters = function() {};

/**
 * Removes persistent data with the specified
 * @param {string} name
 * @return {void}
 */
FlashDocument.prototype.removeDataFromDocument = function(name) {};

/**
 * Removes persistent data with the specified
 * @param {string} name
 * @return {void}
 */
FlashDocument.prototype.removeDataFromSelection = function(name) {};

/**
 * Removes the specified filter from the Filters list
 * @param {number} filterIndex
 * @return {void}
 */
FlashDocument.prototype.removeFilter = function(filterIndex) {};

/**
 * Renames the current profile.
 * @param {string=} profileNewName
 * @return {boolean}
 */
FlashDocument.prototype.renamePublishProfile = function(profileNewName) {};

/**
 * Renames the currently selected scene in the
 * @param {string} name
 * @return {boolean}
 */
FlashDocument.prototype.renameScene = function(name) {};

/**
 * Moves the specified scene before another
 * @param {number} sceneToMove
 * @param {number} sceneToPutItBefore
 * @return {void}
 */
FlashDocument.prototype.reorderScene = function(sceneToMove, sceneToPutItBefore) {};

/**
 * Sets all values in the Property inspector to
 * @return {void}
 */
FlashDocument.prototype.resetOvalObject = function() {};

/**
 * Sets all values in the Property inspector to
 * @return {void}
 */
FlashDocument.prototype.resetRectangleObject = function() {};

/**
 * Resets the transformation matrix; equivalent to
 * @return {void}
 */
FlashDocument.prototype.resetTransformation = function() {};

/**
 * Method; reverts the specified document to its previously saved version. This method is equivalent to selecting File > Revert.
 * @return {void}
 */
FlashDocument.prototype.revert = function() {};

/**
 * applies a 3D rotation to the selection. This method is available only for movie clips.
 * @param {!FlashPoint3D} xyzCoordinate
 * @param {boolean} bGlobalTransform
 * @return {void}
 */
FlashDocument.prototype.rotate3DSelection = function(xyzCoordinate, bGlobalTransform) {};

/**
 * Rotates the selection by a specified number of
 * @param {number} angle
 * @param {string=} rotationPoint
 * @return {void}
 */
FlashDocument.prototype.rotateSelection = function(angle, rotationPoint) {};

/**
 * Saves the document in its default location;
 * @param {boolean=} bOkToSaveAs
 * @return {boolean}
 */
FlashDocument.prototype.save = function(bOkToSaveAs) {};

/**
 * saves and compacts the file. This method is equivalent to selecting File > Save and Compact.
 * @param {boolean=} bOkToSaveAs
 * @return {boolean}
 */
FlashDocument.prototype.saveAndCompact = function(bOkToSaveAs) {};

/**
 * Scales the selection by a specified amount;
 * @param {number} xScale
 * @param {number} yScale
 * @param {string=} whichCorner
 * @return {void}
 */
FlashDocument.prototype.scaleSelection = function(xScale, yScale, whichCorner) {};

/**
 * Selects all items on the Stage; equivalent to
 * @return {void}
 */
FlashDocument.prototype.selectAll = function() {};

/**
 * Deselects any selected items.
 * @return {void}
 */
FlashDocument.prototype.selectNone = function() {};

/**
 * Sets the preferences for document.align(),
 * @param {boolean=} bToStage
 * @return {void}
 */
FlashDocument.prototype.setAlignToDocument = function(bToStage) {};

/**
 * Sets the blending mode for the selected objects.
 * @param {string} mode
 * @return {void}
 */
FlashDocument.prototype.setBlendMode = function(mode) {};

/**
 * Sets the fill settings for the Tools panel, Property
 * @param {!FlashFill} fill
 * @return {void}
 */
FlashDocument.prototype.setCustomFill = function(fill) {};

/**
 * Sets the stroke settings for the Tools panel,
 * @param {!FlashStroke} stroke
 * @return {void}
 */
FlashDocument.prototype.setCustomStroke = function(stroke) {};

/**
 * Sets the specified Element property on selected
 * @param {string} property
 * @param {number} value
 * @return {void}
 */
FlashDocument.prototype.setElementProperty = function(property, value) {};

/**
 * Sets the specified TextAttrs property of the
 * @param {string} attrName
 * @param {!FlashTextAttrs} attrValue
 * @param {number=} startIndex
 * @param {number=} endIndex
 * @return {boolean}
 */
FlashDocument.prototype.setElementTextAttr = function(attrName, attrValue, startIndex, endIndex) {};

/**
 * Changes the fill color of the selection to the
 * @param {?} color
 * @return {void}
 */
FlashDocument.prototype.setFillColor = function(color) {};

/**
 * Sets a specified filter property for the currently
 * @param {string} property
 * @param {number} filterIndex
 * @param {?} value
 * @return {void}
 */
FlashDocument.prototype.setFilterProperty = function(property, filterIndex, value) {};

/**
 * Applies filters to the selected objects .
 * @param {!Array<!FlashFilter>} filterArray
 * @return {void}
 */
FlashDocument.prototype.setFilters = function(filterArray) {};

/**
 * Sets the opacity of the instance.
 * @param {number} opacity
 * @return {void}
 */
FlashDocument.prototype.setInstanceAlpha = function(opacity) {};

/**
 * Sets the brightness for the instance.
 * @param {number} brightness
 * @return {void}
 */
FlashDocument.prototype.setInstanceBrightness = function(brightness) {};

/**
 * Sets the tint for the instance.
 * @param {?} color
 * @param {number} strength
 * @return {void}
 */
FlashDocument.prototype.setInstanceTint = function(color, strength) {};

/**
 * Sets the XML metadata for the specified
 * @param {string} strMetadata
 * @return {boolean}
 */
FlashDocument.prototype.setMetadata = function(strMetadata) {};

/**
 * Sets the value of an XML settings string in a
 * @param {string} xmlString
 * @return {boolean}
 */
FlashDocument.prototype.setMobileSettings = function(xmlString) {};

/**
 * Specifies a value for a specified property of
 * @param {string} propertyName
 * @param {?} value
 * @return {void}
 */
FlashDocument.prototype.setOvalObjectProperty = function(propertyName, value) {};

/**
 * Sets the version of the Flash Player targeted by
 * @param {string} version
 * @return {boolean}
 */
FlashDocument.prototype.setPlayerVersion = function(version) {};

/**
 * Specifies a value for a specified property of
 * @param {string} propertyName
 * @param {?} value
 * @return {void}
 */
FlashDocument.prototype.setRectangleObjectProperty = function(propertyName, value) {};

/**
 * Moves and resizes the selection in a single
 * @param {!FlashRectangle} boundingRectangle
 * @param {boolean=} bContactSensitiveSelection
 * @return {void}
 */
FlashDocument.prototype.setSelectionBounds = function(boundingRectangle, bContactSensitiveSelection) {};

/**
 * Draws a rectangular selection marquee relative
 * @param {!FlashRectangle} rect
 * @param {boolean=} bReplaceCurrentSelection
 * @param {boolean=} bContactSensitiveSelection
 * @return {void}
 */
FlashDocument.prototype.setSelectionRect = function(rect, bReplaceCurrentSelection, bContactSensitiveSelection) {};

/**
 * Specifies the vanishing point for viewing 3D objects.
 * @param {!FlashPoint} point
 * @return {void}
 */
FlashDocument.prototype.setStageVanishingPoint = function(point) {};

/**
 * @param {number} angle
 * @return {void}
 */
FlashDocument.prototype.setStageViewAngle = function(angle) {};

/**
 * Sets the color, width, and style of the selected
 * @param {?} color
 * @param {number} size
 * @param {string} strokeType
 * @return {void}
 */
FlashDocument.prototype.setStroke = function(color, size, strokeType) {};

/**
 * Changes the stroke color of the selection to the
 * @param {?} color
 * @return {void}
 */
FlashDocument.prototype.setStrokeColor = function(color) {};

/**
 * Changes the stroke size of the selection to the
 * @param {number} size
 * @return {void}
 */
FlashDocument.prototype.setStrokeSize = function(size) {};

/**
 * Changes the stroke style of the selection to the
 * @param {string} strokeType
 * @return {void}
 */
FlashDocument.prototype.setStrokeStyle = function(strokeType) {};

/**
 * Changes the bounding rectangle for the selected
 * @param {!FlashRectangle} boundingRectangle
 * @return {boolean}
 */
FlashDocument.prototype.setTextRectangle = function(boundingRectangle) {};

/**
 * Sets the text selection of the currently selected
 * @param {number} startIndex
 * @param {number} endIndex
 * @return {boolean}
 */
FlashDocument.prototype.setTextSelection = function(startIndex, endIndex) {};

/**
 * Inserts a string of text.
 * @param {string} text
 * @param {number=} startIndex
 * @param {number=} endIndex
 * @return {boolean}
 */
FlashDocument.prototype.setTextString = function(text, startIndex, endIndex) {};

/**
 * Moves the transformation point of the current
 * @param {!FlashPoint} transformationPoint
 * @return {void}
 */
FlashDocument.prototype.setTransformationPoint = function(transformationPoint) {};

/**
 * Skews the selection by a specified amount.
 * @param {number} xSkew
 * @param {number} ySkew
 * @param {string=} whichEdge
 * @return {void}
 */
FlashDocument.prototype.skewSelection = function(xSkew, ySkew, whichEdge) {};

/**
 * Smooths the curve of each selected fill outline or
 * @return {void}
 */
FlashDocument.prototype.smoothSelection = function() {};

/**
 * Spaces the objects in the selection evenly.
 * @param {string} direction
 * @param {boolean=} bUseDocumentBounds
 * @return {void}
 */
FlashDocument.prototype.space = function(direction, bUseDocumentBounds) {};

/**
 * Straightens the currently selected strokes;
 * @return {void}
 */
FlashDocument.prototype.straightenSelection = function() {};

/**
 * Swaps the current selection with the specified
 * @param {string} name
 * @return {void}
 */
FlashDocument.prototype.swapElement = function(name) {};

/**
 * Swaps the Stroke and Fill colors.
 * @return {void}
 */
FlashDocument.prototype.swapStrokeAndFill = function() {};

/**
 * Executes a Test Movie operation on the
 * @return {void}
 */
FlashDocument.prototype.testMovie = function() {};

/**
 * Executes a Test Scene operation on the current
 * @return {void}
 */
FlashDocument.prototype.testScene = function() {};

/**
 * Performs a trace bitmap on the current selection;
 * @param {number} threshold
 * @param {number} minimumArea
 * @param {string} curveFit
 * @param {string} cornerThreshold
 * @return {void}
 */
FlashDocument.prototype.traceBitmap = function(threshold, minimumArea, curveFit, cornerThreshold) {};

/**
 * @param {number} a
 * @param {number} b
 * @param {number} c
 * @param {number} d
 * @return {void}
 */
FlashDocument.prototype.transformSelection = function(a, b, c, d) {};

/**
 * @return {void}
 */
FlashDocument.prototype.unGroup = function() {};

/**
 * @return {void}
 */
FlashDocument.prototype.union = function() {};

/**
 * @return {void}
 */
FlashDocument.prototype.unlockAllElements = function() {};

/**
 * @param {string} fileURI
 * @return {?}
 */
FlashDocument.prototype.xmlPanel = function(fileURI) {};
/**
 * @record
 * @struct
 */
function FlashText() {}
 /** @type {string} */
FlashText.prototype.accName;
 /** @type {number} */
FlashText.prototype.antiAliasSharpness;
 /** @type {number} */
FlashText.prototype.antiAliasThickness;
 /** @type {boolean} */
FlashText.prototype.autoExpand;
 /** @type {boolean} */
FlashText.prototype.border;
 /** @type {string} */
FlashText.prototype.description;
 /** @type {string} */
FlashText.prototype.embeddedCharacters;

/**
 * @return {?}
 */
FlashText.prototype.getTextAttr = function() {};

/**
 * @return {?}
 */
FlashText.prototype.getTextString = function() {};

/**
 * @return {?}
 */
FlashText.prototype.setTextAttr = function() {};

/**
 * @return {?}
 */
FlashText.prototype.setTextString = function() {};
/**
 * @extends {FlashText}
 * @record
 * @struct
 */
function FlashTextAttrs() {}
 /** @type {boolean} */
FlashTextAttrs.prototype.aliasText;
 /** @type {string} */
FlashTextAttrs.prototype.alignment;
 /** @type {boolean} */
FlashTextAttrs.prototype.autoKern;
 /** @type {boolean} */
FlashTextAttrs.prototype.bold;
 /** @type {string} */
FlashTextAttrs.prototype.characterPosition;
 /** @type {number} */
FlashTextAttrs.prototype.characterSpacing;
 /** @type {string} */
FlashTextAttrs.prototype.face;
 /** @type {?} */
FlashTextAttrs.prototype.fillColor;
 /** @type {number} */
FlashTextAttrs.prototype.indent;
 /** @type {boolean} */
FlashTextAttrs.prototype.italic;
 /** @type {number} */
FlashTextAttrs.prototype.leftMargin;
 /** @type {number} */
FlashTextAttrs.prototype.letterSpacing;
 /** @type {number} */
FlashTextAttrs.prototype.lineSpacing;
 /** @type {number} */
FlashTextAttrs.prototype.rightMargin;
 /** @type {boolean} */
FlashTextAttrs.prototype.rotation;
 /** @type {number} */
FlashTextAttrs.prototype.size;
 /** @type {string} */
FlashTextAttrs.prototype.target;
 /** @type {string} */
FlashTextAttrs.prototype.url;
/**
 * @record
 * @struct
 */
function FlashFLfile() {}

/**
 * @param {string} fileURI
 * @param {string} copyURI
 * @return {boolean}
 */
FlashFLfile.prototype.copy = function(fileURI, copyURI) {};

/**
 * @param {string} folderURI
 * @return {boolean}
 */
FlashFLfile.prototype.createFolder = function(folderURI) {};

/**
 * @param {string} fileURI
 * @return {boolean}
 */
FlashFLfile.prototype.exists = function(fileURI) {};

/**
 * @param {string} fileOrFolderURI
 * @return {string}
 */
FlashFLfile.prototype.getAttributes = function(fileOrFolderURI) {};

/**
 * @param {string} fileOrFolderURI
 * @return {string}
 */
FlashFLfile.prototype.getCreationDate = function(fileOrFolderURI) {};

/**
 * @param {string} fileOrFolderURI
 * @return {!Date}
 */
FlashFLfile.prototype.getCreationDateObj = function(fileOrFolderURI) {};

/**
 * @param {string} fileOrFolderURI
 * @return {string}
 */
FlashFLfile.prototype.getModificationDate = function(fileOrFolderURI) {};

/**
 * @param {string} fileOrFolderURI
 * @return {!Date}
 */
FlashFLfile.prototype.getModificationDateObj = function(fileOrFolderURI) {};

/**
 * @param {string} fileURI
 * @return {number}
 */
FlashFLfile.prototype.getSize = function(fileURI) {};

/**
 * @param {string} folderURI
 * @param {boolean=} filesOrDirectories
 * @return {!Array<string>}
 */
FlashFLfile.prototype.listFolder = function(folderURI, filesOrDirectories) {};

/**
 * @param {string} fileName
 * @return {string}
 */
FlashFLfile.prototype.platformPathToURI = function(fileName) {};

/**
 * @param {string} fileOrFolderURI
 * @return {string}
 */
FlashFLfile.prototype.read = function(fileOrFolderURI) {};

/**
 * @param {string} fileOrFolderURI
 * @return {boolean}
 */
FlashFLfile.prototype.remove = function(fileOrFolderURI) {};

/**
 * @param {string} fileURI
 * @param {string} strAttrs
 * @return {boolean}
 */
FlashFLfile.prototype.setAttributes = function(fileURI, strAttrs) {};

/**
 * @param {string} fileURI
 * @return {string}
 */
FlashFLfile.prototype.uriToPlatformPath = function(fileURI) {};

/**
 * @param {string} fileURI
 * @param {string} textToWrite
 * @param {string=} strAppendMode
 * @return {boolean}
 */
FlashFLfile.prototype.write = function(fileURI, textToWrite, strAppendMode) {};
/**
 * @record
 * @struct
 */
function FlashSoundItem() {}
/**
 * @record
 * @struct
 */
function FlashInstance() {}
 /** @type {string} */
FlashInstance.prototype.instanceType;
 /** @type {!FlashItem} */
FlashInstance.prototype.libraryItem;
/**
 * @record
 * @struct
 */
function _FlashBitmap() {}
 /** @type {?} */
_FlashBitmap.prototype.width;
 /** @type {?} */
_FlashBitmap.prototype.height;
 /** @type {?} */
_FlashBitmap.prototype.depth;
 /** @type {?} */
_FlashBitmap.prototype.bits;
 /** @type {!Array<string>} */
_FlashBitmap.prototype.cTab;
/**
 * @record
 * @struct
 */
function FlashBitmapInstance() {}
 /** @type {number} */
FlashBitmapInstance.prototype.hPixels;
 /** @type {number} */
FlashBitmapInstance.prototype.vPixels;

/**
 * @return {!_FlashBitmap}
 */
FlashBitmapInstance.prototype.getBits = function() {};

/**
 * @param {!_FlashBitmap} bitmap
 * @return {void}
 */
FlashBitmapInstance.prototype.setBits = function(bitmap) {};
/**
 * @record
 * @struct
 */
function FlashCompiledClipInstance() {}
 /** @type {string} */
FlashCompiledClipInstance.prototype.accName;
 /** @type {string} */
FlashCompiledClipInstance.prototype.actionScript;
 /** @type {string} */
FlashCompiledClipInstance.prototype.description;
 /** @type {boolean} */
FlashCompiledClipInstance.prototype.forceSimple;
 /** @type {string} */
FlashCompiledClipInstance.prototype.shortcut;
 /** @type {boolean} */
FlashCompiledClipInstance.prototype.silent;
 /** @type {number} */
FlashCompiledClipInstance.prototype.tabIndex;
/**
 * @record
 * @struct
 */
function FlashSymbolInstance() {}
 /** @type {string} */
FlashSymbolInstance.prototype.accName;
 /** @type {string} */
FlashSymbolInstance.prototype.actionScript;
 /** @type {string} */
FlashSymbolInstance.prototype.backgroundColor;
 /** @type {string} */
FlashSymbolInstance.prototype.bitmapRenderMode;
 /** @type {string} */
FlashSymbolInstance.prototype.blendMode;
 /** @type {string} */
FlashSymbolInstance.prototype.buttonTracking;
 /** @type {boolean} */
FlashSymbolInstance.prototype.cacheAsBitmap;
 /** @type {number} */
FlashSymbolInstance.prototype.colorAlphaAmount;
 /** @type {number} */
FlashSymbolInstance.prototype.colorAlphaPercent;
 /** @type {number} */
FlashSymbolInstance.prototype.colorBlueAmount;
 /** @type {number} */
FlashSymbolInstance.prototype.colorBluePercent;
 /** @type {number} */
FlashSymbolInstance.prototype.colorGreenAmount;
 /** @type {number} */
FlashSymbolInstance.prototype.colorGreenPercent;
 /** @type {string} */
FlashSymbolInstance.prototype.colorMode;
 /** @type {number} */
FlashSymbolInstance.prototype.colorRedAmount;
 /** @type {number} */
FlashSymbolInstance.prototype.colorRedPercent;
 /** @type {string} */
FlashSymbolInstance.prototype.description;
 /** @type {!Array<!FlashFilter>} */
FlashSymbolInstance.prototype.filters;
 /** @type {number} */
FlashSymbolInstance.prototype.firstFrame;
 /** @type {boolean} */
FlashSymbolInstance.prototype.forceSimple;
 /** @type {string} */
FlashSymbolInstance.prototype.loop;
 /** @type {string} */
FlashSymbolInstance.prototype.shortcut;
 /** @type {boolean} */
FlashSymbolInstance.prototype.silent;
 /** @type {string} */
FlashSymbolInstance.prototype.symbolType;
 /** @type {number} */
FlashSymbolInstance.prototype.tabIndex;
 /** @type {boolean} */
FlashSymbolInstance.prototype.useBackgroundColor;
 /** @type {boolean} */
FlashSymbolInstance.prototype.visible;
/**
 * @record
 * @struct
 */
function FlashComponentInstance() {}
 /** @type {!Array<?>} */
FlashComponentInstance.prototype.parameters;
/**
 * @extends {FlashOval}
 * @record
 * @struct
 */
function FlashShape() {}
 /** @type {!Array<!FlashContour>} */
FlashShape.prototype.contours;
 /** @type {!Array<!FlashEdge>} */
FlashShape.prototype.edges;
 /** @type {boolean} */
FlashShape.prototype.isDrawingObject;
 /** @type {boolean} */
FlashShape.prototype.isGroup;
 /** @type {boolean} */
FlashShape.prototype.isOvalObject;
 /** @type {boolean} */
FlashShape.prototype.isRectangleObject;
 /** @type {!Array<!FlashShape>} */
FlashShape.prototype.members;
 /** @type {number} */
FlashShape.prototype.numCubicSegments;
 /** @type {!Array<!FlashVertex>} */
FlashShape.prototype.vertices;

/**
 * @param {number} cubicSegmentIndex
 * @return {!Array<!FlashPoint>}
 */
FlashShape.prototype.getCubicSegmentPoints = function(cubicSegmentIndex) {};

/**
 * @return {void}
 */
FlashShape.prototype.beginEdit = function() {};

/**
 * @param {number} index
 * @return {void}
 */
FlashShape.prototype.deleteEdge = function(index) {};

/**
 * @return {void}
 */
FlashShape.prototype.endEdit = function() {};
/**
 * @extends {FlashInstance}
 * @extends {FlashBitmapInstance}
 * @extends {FlashCompiledClipInstance}
 * @extends {FlashSymbolInstance}
 * @extends {FlashComponentInstance}
 * @extends {FlashShape}
 * @record
 * @struct
 */
function FlashElement() {}
 /** @type {number} */
FlashElement.prototype.depth;
 /** @type {string} */
FlashElement.prototype.elementType;
 /** @type {number} */
FlashElement.prototype.height;
 /** @type {!FlashLayer} */
FlashElement.prototype.layer;
 /** @type {number} */
FlashElement.prototype.left;
 /** @type {boolean} */
FlashElement.prototype.locked;
 /** @type {!FlashMatrix} */
FlashElement.prototype.matrix;
 /** @type {string} */
FlashElement.prototype.name;
 /** @type {number} */
FlashElement.prototype.rotation;
 /** @type {number} */
FlashElement.prototype.scaleX;
 /** @type {number} */
FlashElement.prototype.scaleY;
 /** @type {boolean} */
FlashElement.prototype.selected;
 /** @type {number} */
FlashElement.prototype.skewX;
 /** @type {number} */
FlashElement.prototype.skewY;
 /** @type {number} */
FlashElement.prototype.top;
 /** @type {number} */
FlashElement.prototype.transformX;
 /** @type {number} */
FlashElement.prototype.transformY;
 /** @type {number} */
FlashElement.prototype.width;
 /** @type {number} */
FlashElement.prototype.x;
 /** @type {number} */
FlashElement.prototype.y;

/**
 * @param {string} name
 * @return {?}
 */
FlashElement.prototype.getPersistentData = function(name) {};

/**
 * @return {!FlashPoint}
 */
FlashElement.prototype.getTransformationPoint = function() {};

/**
 * @param {string} name
 * @return {boolean}
 */
FlashElement.prototype.hasPersistentData = function(name) {};

/**
 * @param {string} name
 * @return {void}
 */
FlashElement.prototype.removePersistentData = function(name) {};

/**
 * @param {string} name
 * @param {string} type
 * @param {?} value
 * @return {void}
 */
FlashElement.prototype.setPersistentData = function(name, type, value) {};

/**
 * @param {!FlashPoint} transformationPoint
 * @return {void}
 */
FlashElement.prototype.setTransformationPoint = function(transformationPoint) {};
/**
 * @record
 * @struct
 */
function FlashFrame() {}
 /** @type {?} */
FlashFrame.prototype.actionScript;
 /** @type {?} */
FlashFrame.prototype.duration;
 /** @type {!Array<!FlashElement>} */
FlashFrame.prototype.elements;
 /** @type {?} */
FlashFrame.prototype.hasCustomEase;
 /** @type {?} */
FlashFrame.prototype.labelType;
 /** @type {?} */
FlashFrame.prototype.motionTweenOrientToPath;
 /** @type {?} */
FlashFrame.prototype.motionTweenRotate;
 /** @type {?} */
FlashFrame.prototype.motionTweenRotateTimes;
 /** @type {?} */
FlashFrame.prototype.motionTweenScale;
 /** @type {?} */
FlashFrame.prototype.motionTweenSnap;
 /** @type {?} */
FlashFrame.prototype.motionTweenSync;
 /** @type {?} */
FlashFrame.prototype.name;
 /** @type {?} */
FlashFrame.prototype.shapeTweenBlend;
 /** @type {?} */
FlashFrame.prototype.soundEffect;
 /** @type {!FlashSoundItem} */
FlashFrame.prototype.soundLibraryItem;
 /** @type {?} */
FlashFrame.prototype.soundLoop;
 /** @type {?} */
FlashFrame.prototype.soundLoopMode;
 /** @type {?} */
FlashFrame.prototype.soundName;
 /** @type {?} */
FlashFrame.prototype.soundSync;
 /** @type {?} */
FlashFrame.prototype.startFrame;
 /** @type {?} */
FlashFrame.prototype.tweenEasing;
 /** @type {?} */
FlashFrame.prototype.tweenType;
 /** @type {?} */
FlashFrame.prototype.useSingleEaseCurve;

/**
 * @return {?}
 */
FlashFrame.prototype.getCustomEase = function() {};

/**
 * @return {?}
 */
FlashFrame.prototype.setCustomEase = function() {};
/**
 * @record
 * @struct
 */
function FlashSymbolItem() {}
 /** @type {boolean} */
FlashSymbolItem.prototype.scalingGrid;
 /** @type {!FlashRectangle} */
FlashSymbolItem.prototype.scalingGridRect;
 /** @type {boolean} */
FlashSymbolItem.prototype.sourceAutoUpdate;
 /** @type {string} */
FlashSymbolItem.prototype.sourceFilePath;
 /** @type {string} */
FlashSymbolItem.prototype.sourceLibraryName;
 /** @type {string} */
FlashSymbolItem.prototype.symbolType;
 /** @type {!FlashTimeline} */
FlashSymbolItem.prototype.timeline;

/**
 * @return {void}
 */
FlashSymbolItem.prototype.convertToCompiledClip = function() {};

/**
 * @param {string} outputURI
 * @return {void}
 */
FlashSymbolItem.prototype.exportSWC = function(outputURI) {};

/**
 * @param {string} outputURI
 * @return {void}
 */
FlashSymbolItem.prototype.exportSWF = function(outputURI) {};
/**
 * @record
 * @struct
 */
function FlashFolderItem() {}
/**
 * @record
 * @struct
 */
function FlashFontItem() {}
 /** @type {boolean} */
FlashFontItem.prototype.bitmap;
 /** @type {boolean} */
FlashFontItem.prototype.bold;
 /** @type {string} */
FlashFontItem.prototype.embeddedCharacters;
 /** @type {string} */
FlashFontItem.prototype.embedRanges;
 /** @type {boolean} */
FlashFontItem.prototype.embedVariantGlyphs;
 /** @type {string} */
FlashFontItem.prototype.font;
 /** @type {boolean} */
FlashFontItem.prototype.isDefineFont4Symbol;
 /** @type {boolean} */
FlashFontItem.prototype.italic;
 /** @type {number} */
FlashFontItem.prototype.size;
 /** @type {string} */
FlashSoundItem.prototype.bitRate;
 /** @type {string} */
FlashSoundItem.prototype.bits;
 /** @type {string} */
FlashSoundItem.prototype.compressionType;
 /** @type {boolean} */
FlashSoundItem.prototype.convertStereoToMono;
 /** @type {string} */
FlashSoundItem.prototype.fileLastModifiedDate;
 /** @type {string} */
FlashSoundItem.prototype.originalCompressionType;
 /** @type {string} */
FlashSoundItem.prototype.quality;
 /** @type {string} */
FlashSoundItem.prototype.sampleRate;
 /** @type {boolean} */
FlashSoundItem.prototype.sourceFileExists;

/**
 * @param {string} fileURI
 * @return {boolean}
 */
FlashSoundItem.prototype.exportToFile = function(fileURI) {};
/**
 * @record
 * @struct
 */
function FlashVideoItem() {}
 /** @type {string} */
FlashVideoItem.prototype.fileLastModifiedDate;
 /** @type {boolean} */
FlashVideoItem.prototype.sourceFileExists;
 /** @type {boolean} */
FlashVideoItem.prototype.sourceFileIsCurrent;
 /** @type {string} */
FlashVideoItem.prototype.sourceFilePath;
 /** @type {string} */
FlashVideoItem.prototype.videoType;

/**
 * @param {string} fileURI
 * @return {boolean}
 */
FlashVideoItem.prototype.exportToFLV = function(fileURI) {};
/**
 * @record
 * @struct
 */
function FlashBitmapItem() {}
 /** @type {boolean} */
FlashBitmapItem.prototype.allowSmoothing;
 /** @type {string} */
FlashBitmapItem.prototype.compressionType;
 /** @type {string} */
FlashBitmapItem.prototype.fileLastModifiedDate;
 /** @type {string} */
FlashBitmapItem.prototype.originalCompressionType;
 /** @type {boolean} */
FlashBitmapItem.prototype.sourceFileExists;
 /** @type {boolean} */
FlashBitmapItem.prototype.sourceFileIsCurrent;
 /** @type {string} */
FlashBitmapItem.prototype.sourceFilePath;
 /** @type {boolean} */
FlashBitmapItem.prototype.useDeblocking;
 /** @type {boolean} */
FlashBitmapItem.prototype.useImportedJPEGQuality;

/**
 * @param {string} fileURI
 * @return {boolean}
 */
FlashBitmapItem.prototype.exportToFile = function(fileURI) {};
/**
 * @extends {FlashSymbolItem}
 * @extends {FlashFolderItem}
 * @extends {FlashFontItem}
 * @extends {FlashSoundItem}
 * @extends {FlashVideoItem}
 * @extends {FlashBitmapItem}
 * @extends {FlashBitmapItem}
 * @record
 * @struct
 */
function FlashItem() {}
 /** @type {string} */
FlashItem.prototype.itemType;
 /** @type {string} */
FlashItem.prototype.linkageBaseClass;
 /** @type {string} */
FlashItem.prototype.linkageClassName;
 /** @type {boolean} */
FlashItem.prototype.linkageExportForAS;
 /** @type {boolean} */
FlashItem.prototype.linkageExportForRS;
 /** @type {boolean} */
FlashItem.prototype.linkageExportInFirstFrame;
 /** @type {string} */
FlashItem.prototype.linkageIdentifier;
 /** @type {boolean} */
FlashItem.prototype.linkageImportForRS;
 /** @type {string} */
FlashItem.prototype.linkageURL;
 /** @type {string} */
FlashItem.prototype.name;

/**
 * @param {string} name
 * @param {string} type
 * @param {?} data
 * @return {void}
 */
FlashItem.prototype.addData = function(name, type, data) {};

/**
 * @param {string} name
 * @return {?}
 */
FlashItem.prototype.getData = function(name) {};

/**
 * @param {string} name
 * @return {boolean}
 */
FlashItem.prototype.hasData = function(name) {};

/**
 * @param {string} name
 * @return {void}
 */
FlashItem.prototype.removeData = function(name) {};
/**
 * @record
 * @struct
 */
function FlashLayer() {}
 /** @type {?} */
FlashLayer.prototype.color;
 /** @type {number} */
FlashLayer.prototype.frameCount;
 /** @type {!Array<!FlashFrame>} */
FlashLayer.prototype.frames;
 /** @type {number} */
FlashLayer.prototype.height;
 /** @type {string} */
FlashLayer.prototype.layerType;
 /** @type {boolean} */
FlashLayer.prototype.locked;
 /** @type {string} */
FlashLayer.prototype.name;
 /** @type {boolean} */
FlashLayer.prototype.outline;
 /** @type {!FlashLayer} */
FlashLayer.prototype.parentLayer;
 /** @type {boolean} */
FlashLayer.prototype.visible;
/**
 * @record
 * @struct
 */
function FlashLibrary() {}
 /** @type {!Array<!FlashItem>} */
FlashLibrary.prototype.items;

/**
 * @param {!FlashPoint} position
 * @param {string=} namePath
 * @return {boolean}
 */
FlashLibrary.prototype.addItemToDocument = function(position, namePath) {};

/**
 * "video", "movie clip", "button", "graphic", "bitmap", "screen", and "folder"
 * @param {string} type
 * @param {string=} namePath
 * @return {boolean}
 */
FlashLibrary.prototype.addNewItem = function(type, namePath) {};

/**
 * @param {string=} namePath
 * @return {boolean}
 */
FlashLibrary.prototype.deleteItem = function(namePath) {};

/**
 * Method; makes a copy of the currently selected or specified item. The new item has a default name (such as item copy) and is set as the currently selected item. If more than one item is selected, the command fails.
 * @param {string} namePath
 * @return {boolean}
 */
FlashLibrary.prototype.duplicateItem = function(namePath) {};

/**
 * @param {string=} namePath
 * @return {boolean}
 */
FlashLibrary.prototype.editItem = function(namePath) {};

/**
 * @param {boolean} bExpand
 * @param {boolean=} bRecurseNestedParents
 * @param {string=} namePath
 * @return {boolean}
 */
FlashLibrary.prototype.expandFolder = function(bExpand, bRecurseNestedParents, namePath) {};

/**
 * @param {string} namePath
 * @return {number}
 */
FlashLibrary.prototype.findItemIndex = function(namePath) {};

/**
 * @param {string} property
 * @return {string}
 */
FlashLibrary.prototype.getItemProperty = function(property) {};

/**
 * @param {string=} namePath
 * @return {string}
 */
FlashLibrary.prototype.getItemType = function(namePath) {};

/**
 * An array of values for all currently selected items in the library.
 * @return {!Array<!FlashItem>}
 */
FlashLibrary.prototype.getSelectedItems = function() {};

/**
 * @param {string} linkageName
 * @param {!Array<?>} swfData
 * @param {string=} libName
 * @return {void}
 */
FlashLibrary.prototype.importEmbeddedSWF = function(linkageName, swfData, libName) {};

/**
 * @param {string} namePath
 * @return {boolean}
 */
FlashLibrary.prototype.itemExists = function(namePath) {};

/**
 * @param {string} folderPath
 * @param {string=} itemToMove
 * @param {boolean=} bReplace
 * @return {boolean}
 */
FlashLibrary.prototype.moveToFolder = function(folderPath, itemToMove, bReplace) {};

/**
 * Method; creates a new folder with the specified name, or a default name ("untitled folder #" ) if no folderName parameter is provided, in the currently selected folder.
 * @param {string=} folderPath
 * @return {boolean}
 */
FlashLibrary.prototype.newFolder = function(folderPath) {};

/**
 * Method; renames the currently selected library item in the Library panel.
 * @param {string} name
 * @return {boolean}
 */
FlashLibrary.prototype.renameItem = function(name) {};

/**
 * Method; selects or deselects all items in the library.
 * @param {boolean=} bSelectAll
 * @return {void}
 */
FlashLibrary.prototype.selectAll = function(bSelectAll) {};

/**
 * Method; selects a specified library item.
 * @param {string} namePath
 * @param {boolean=} bReplaceCurrentSelection
 * @param {boolean=} bSelect
 * @return {boolean}
 */
FlashLibrary.prototype.selectItem = function(namePath, bReplaceCurrentSelection, bSelect) {};

/**
 * Method; deselects all the library items.
 * @return {void}
 */
FlashLibrary.prototype.selectNone = function() {};

/**
 * Method; sets the property for all selected library items (ignoring folders).
 * @param {string} property
 * @param {?} value
 * @return {void}
 */
FlashLibrary.prototype.setItemProperty = function(property, value) {};

/**
 * Method; updates the specified item.
 * @param {string} namePath
 * @return {boolean}
 */
FlashLibrary.prototype.updateItem = function(namePath) {};
/**
 * @record
 * @struct
 */
function FlashMath() {}

/**
 * Method; performs a matrix concatenation and returns the result.
 * @param {!FlashMatrix} mat1
 * @param {!FlashMatrix} mat2
 * @return {!FlashMatrix}
 */
FlashMath.prototype.concatMatrix = function(mat1, mat2) {};

/**
 * A Matrix object that is the inverse of the original matrix.
 * @param {!FlashMatrix} mat
 * @return {!FlashMatrix}
 */
FlashMath.prototype.invertMatrix = function(mat) {};

/**
 * A floating-point value that represents the distance between the points.
 * @param {!FlashPoint} pt1
 * @param {!FlashPoint} pt2
 * @return {number}
 */
FlashMath.prototype.pointDistance = function(pt1, pt2) {};
/**
 * @record
 * @struct
 */
function FlashOutputPanel() {}

/**
 * Method; clears the contents of the Output panel. You can use this method in a batch processing application to clear a list of errors, or to save them incrementally by using this method withoutputPanel.save().
 * @return {void}
 */
FlashOutputPanel.prototype.clear = function() {};

/**
 * @param {string} fileURI
 * @param {boolean=} bAppendToFile
 * @param {boolean=} bUseSystemEncoding
 * @return {void}
 */
FlashOutputPanel.prototype.save = function(fileURI, bAppendToFile, bUseSystemEncoding) {};

/**
 * @param {string} message
 * @return {void}
 */
FlashOutputPanel.prototype.trace = function(message) {};
/**
 * @record
 * @struct
 */
function FlashHalfEdge() {}
 /** @type {number} */
FlashHalfEdge.prototype.id;
 /** @type {number} */
FlashHalfEdge.prototype.index;

/**
 * @return {!FlashEdge}
 */
FlashHalfEdge.prototype.getEdge = function() {};

/**
 * @return {!FlashHalfEdge}
 */
FlashHalfEdge.prototype.getNext = function() {};

/**
 * @return {!FlashHalfEdge}
 */
FlashHalfEdge.prototype.getOppositeHalfEdge = function() {};

/**
 * @return {!FlashHalfEdge}
 */
FlashHalfEdge.prototype.getPrev = function() {};

/**
 * @return {!FlashVertex}
 */
FlashHalfEdge.prototype.getVertex = function() {};
/**
 * @record
 * @struct
 */
function FlashOval() {}
 /** @type {boolean} */
FlashOval.prototype.closePath;
 /** @type {number} */
FlashOval.prototype.endAngle;
 /** @type {number} */
FlashOval.prototype.innerRadius;
 /** @type {number} */
FlashOval.prototype.startAngle;
/**
 * @record
 * @struct
 */
function FlashFill() {}
 /** @type {boolean} */
FlashFill.prototype.bitmapIsClipped;
 /** @type {string} */
FlashFill.prototype.bitmapPath;
 /** @type {?} */
FlashFill.prototype.color;
 /** @type {!Array<?>} */
FlashFill.prototype.colorArray;
 /** @type {number} */
FlashFill.prototype.focalPoint;
 /** @type {boolean} */
FlashFill.prototype.linearRGB;
 /** @type {!FlashMatrix} */
FlashFill.prototype.matrix;
 /** @type {string} */
FlashFill.prototype.overflow;
 /** @type {!Array<number>} */
FlashFill.prototype.posArray;
 /** @type {string} */
FlashFill.prototype.style;
/**
 * @record
 * @struct
 */
function FlashContour() {}
 /** @type {!FlashFill} */
FlashContour.prototype.fill;
 /** @type {boolean} */
FlashContour.prototype.interior;
 /** @type {number} */
FlashContour.prototype.orientation;

/**
 * @return {!FlashHalfEdge}
 */
FlashContour.prototype.getHalfEdge = function() {};
/**
 * @record
 * @struct
 */
function FlashStroke() {}
 /** @type {boolean} */
FlashStroke.prototype.breakAtCorners;
 /** @type {string} */
FlashStroke.prototype.capType;
 /** @type {?} */
FlashStroke.prototype.color;
 /** @type {string} */
FlashStroke.prototype.curve;
 /** @type {number} */
FlashStroke.prototype.dash1;
 /** @type {number} */
FlashStroke.prototype.dash2;
 /** @type {string} */
FlashStroke.prototype.density;
 /** @type {string} */
FlashStroke.prototype.dotSize;
 /** @type {number} */
FlashStroke.prototype.dotSpace;
 /** @type {string} */
FlashStroke.prototype.hatchThickness;
 /** @type {string} */
FlashStroke.prototype.jiggle;
 /** @type {string} */
FlashStroke.prototype.joinType;
 /** @type {string} */
FlashStroke.prototype.length;
 /** @type {number} */
FlashStroke.prototype.miterLimit;
 /** @type {string} */
FlashStroke.prototype.pattern;
 /** @type {string} */
FlashStroke.prototype.rotate;
 /** @type {string} */
FlashStroke.prototype.scaleType;
 /** @type {!FlashFill} */
FlashStroke.prototype.shapeFill;
 /** @type {string} */
FlashStroke.prototype.space;
 /** @type {boolean} */
FlashStroke.prototype.strokeHinting;
 /** @type {string} */
FlashStroke.prototype.style;
 /** @type {number} */
FlashStroke.prototype.thickness;
 /** @type {string} */
FlashStroke.prototype.variation;
 /** @type {string} */
FlashStroke.prototype.waveHeight;
 /** @type {string} */
FlashStroke.prototype.waveLength;
/**
 * @record
 * @struct
 */
function FlashEdge() {}
 /** @type {number} */
FlashEdge.prototype.cubicSegmentIndex;
 /** @type {number} */
FlashEdge.prototype.id;
 /** @type {boolean} */
FlashEdge.prototype.isLine;
 /** @type {!FlashStroke} */
FlashEdge.prototype.stroke;

/**
 * @param {number} i
 * @return {!FlashPoint}
 */
FlashEdge.prototype.getControl = function(i) {};

/**
 * @param {number} index
 * @return {!FlashHalfEdge}
 */
FlashEdge.prototype.getHalfEdge = function(index) {};

/**
 * @param {number} index
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
FlashEdge.prototype.setControl = function(index, x, y) {};

/**
 * @param {number} t
 * @return {void}
 */
FlashEdge.prototype.splitEdge = function(t) {};
/**
 * @record
 * @struct
 */
function FlashVertex() {}
 /** @type {number} */
FlashVertex.prototype.x;
 /** @type {number} */
FlashVertex.prototype.y;

/**
 * @return {!FlashHalfEdge}
 */
FlashVertex.prototype.getHalfEdge = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @return {?}
 */
FlashVertex.prototype.setLocation = function(x, y) {};
/**
 * @record
 * @struct
 */
function FlashTimeline() {}
 /** @type {number} */
FlashTimeline.prototype.currentFrame;
 /** @type {number} */
FlashTimeline.prototype.currentLayer;
 /** @type {number} */
FlashTimeline.prototype.frameCount;
 /** @type {number} */
FlashTimeline.prototype.layerCount;
 /** @type {!Array<!FlashLayer>} */
FlashTimeline.prototype.layers;
 /** @type {string} */
FlashTimeline.prototype.name;
 /** @type {!FlashItem} */
FlashTimeline.prototype.libraryItem;

/**
 * Adds a motion guide layer above the current layer and attaches the current layer to the newly added guide layer.
 * @return {number}
 */
FlashTimeline.prototype.addMotionGuide = function() {};

/**
 * Adds a new layer to the document and makes it the current layer.
 * @param {string=} name
 * @param {string=} layerType
 * @param {boolean=} bAddAbove
 * @return {?}
 */
FlashTimeline.prototype.addNewLayer = function(name, layerType, bAddAbove) {};

/**
 * Deletes all the contents from a frame or range of frames on the current layer.
 * @param {number=} startFrameIndex
 * @param {number=} endFrameIndex
 * @return {void}
 */
FlashTimeline.prototype.clearFrames = function(startFrameIndex, endFrameIndex) {};

/**
 * Converts a keyframe to a regular frame and deletes its contents on the current layer.
 * @param {number=} startFrameIndex
 * @param {number=} endFrameIndex
 * @return {void}
 */
FlashTimeline.prototype.clearKeyframes = function(startFrameIndex, endFrameIndex) {};

/**
 * Converts frames to blank keyframes on the current layer.
 * @param {number=} startFrameIndex
 * @param {number=} endFrameIndex
 * @return {void}
 */
FlashTimeline.prototype.convertToBlankKeyframes = function(startFrameIndex, endFrameIndex) {};

/**
 * Converts a range of frames to keyframes (or converts the selection if no frames are specified) on the current layer.
 * @param {number=} startFrameIndex
 * @param {number=} endFrameIndex
 * @return {void}
 */
FlashTimeline.prototype.convertToKeyframes = function(startFrameIndex, endFrameIndex) {};

/**
 * Copies a range of frames on the current layer to the clipboard.
 * @param {number=} startFrameIndex
 * @param {number=} endFrameIndex
 * @return {void}
 */
FlashTimeline.prototype.copyFrames = function(startFrameIndex, endFrameIndex) {};

/**
 * Copies a range of Timeline layers to the clipboard.
 * @param {number=} startFrameIndex
 * @param {number=} endFrameIndex
 * @return {void}
 */
FlashTimeline.prototype.copyLayers = function(startFrameIndex, endFrameIndex) {};

/**
 * Copies motion on selected frames, either from a motion tween or from frame - by - frame animation, so it can be applied to other frames.
 * @return {void}
 */
FlashTimeline.prototype.copyMotion = function() {};

/**
 * Copies motion on selected frames, either from a motion tween or from frame - by - frame animation, to the clipboard as ActionScript 3.0 code.
 * @return {void}
 */
FlashTimeline.prototype.copyMotionAsAS3 = function() {};

/**
 * Creates a new motion object at a designated start and end frame.
 * @param {number=} startFrameIndex
 * @param {number=} endFrameIndex
 * @return {void}
 */
FlashTimeline.prototype.createMotionObject = function(startFrameIndex, endFrameIndex) {};

/**
 * Sets the frame.tweenType property to motion for each selected keyframe on the current layer, and converts each frame's contents to a single symbol instance if necessary.
 * @param {number=} startFrameIndex
 * @param {number=} endFrameIndex
 * @return {void}
 */
FlashTimeline.prototype.createMotionTween = function(startFrameIndex, endFrameIndex) {};

/**
 * Cuts a range of frames on the current layer from the timeline and saves them to the clipboard.
 * @param {number=} startFrameIndex
 * @param {number=} endFrameIndex
 * @return {void}
 */
FlashTimeline.prototype.cutFrames = function(startFrameIndex, endFrameIndex) {};

/**
 * Cuts a range of Timeline layers and saves them to the clipboard.
 * @param {number=} startLayerIndex
 * @param {number=} endLayerIndex
 * @return {void}
 */
FlashTimeline.prototype.cutLayers = function(startLayerIndex, endLayerIndex) {};

/**
 * Deletes a layer.
 * @param {number} index
 * @return {void}
 */
FlashTimeline.prototype.deleteLayer = function(index) {};

/**
 * Duplicates the selected layers or specified layers.
 * @param {number=} startFrameIndex
 * @param {number=} endFrameIndex
 * @return {void}
 */
FlashTimeline.prototype.duplicateLayers = function(startFrameIndex, endFrameIndex) {};

/**
 * Expands or collapses the specified folder or folders.
 * @param {boolean} bExpand
 * @param {boolean=} bRecurseNestedParents
 * @param {number=} index
 * @return {void}
 */
FlashTimeline.prototype.expandFolder = function(bExpand, bRecurseNestedParents, index) {};

/**
 * Finds an array of indexes for the layers with the given name.
 * @param {string} name
 * @return {!Array<number>}
 */
FlashTimeline.prototype.findLayerIndex = function(name) {};

/**
 * Retrieves the specified property's value for the selected frames.
 * @param {string} property
 * @param {number=} startframeIndex
 * @param {number=} endFrameIndex
 * @return {?}
 */
FlashTimeline.prototype.getFrameProperty = function(property, startframeIndex, endFrameIndex) {};

/**
 * Returns an XML string that represents the current positions of the horizontal and vertical guide lines for a timeline(View > Guides > Show Guides).
 * @return {string}
 */
FlashTimeline.prototype.getGuidelines = function() {};

/**
 * Retrieves the specified property's value for the selected layers.
 * @param {string} property
 * @return {?}
 */
FlashTimeline.prototype.getLayerProperty = function(property) {};

/**
 * Retrieves the currently selected frames in an array.
 * @return {!Array<!FlashFrame>}
 */
FlashTimeline.prototype.getSelectedFrames = function() {};

/**
 * Retrieves the zero - based index values of the currently selected layers.
 * @return {!Array<!FlashLayer>}
 */
FlashTimeline.prototype.getSelectedLayers = function() {};

/**
 * Inserts a blank keyframe at the specified frame index; if the index is not specified, inserts the blank keyframe by using the playhead / selection.
 * @param {number=} frameNumIndex
 * @return {void}
 */
FlashTimeline.prototype.insertBlankKeyframe = function(frameNumIndex) {};

/**
 * Inserts the specified number of frames at the given frame number.
 * @param {number=} numFrames
 * @param {boolean=} bAllLayers
 * @param {number=} frameNumIndex
 * @return {void}
 */
FlashTimeline.prototype.insertFrames = function(numFrames, bAllLayers, frameNumIndex) {};

/**
 * Inserts a keyframe at the specified frame.
 * @param {number=} frameNumIndex
 * @return {void}
 */
FlashTimeline.prototype.insertKeyframe = function(frameNumIndex) {};

/**
 * Pastes the range of frames from the clipboard into the specified frames.
 * @param {number=} startFrameIndex
 * @param {number=} endFrameIndex
 * @return {void}
 */
FlashTimeline.prototype.pasteFrames = function(startFrameIndex, endFrameIndex) {};

/**
 * Pastes copied layers to the Timeline above the specified layer index.
 * @param {number} layerIndex
 * @return {number}
 */
FlashTimeline.prototype.pasteLayers = function(layerIndex) {};

/**
 * Pastes the range of motion frames retrieved by
 * @return {void}
 */
FlashTimeline.prototype.pasteMotion = function() {};

/**
 * Deletes the frame.
 * @param {number=} startFrameIndex
 * @param {number=} endFrameIndex
 * @return {void}
 */
FlashTimeline.prototype.removeFrames = function(startFrameIndex, endFrameIndex) {};

/**
 * Removes the motion object created with timeline.createMotionObject(), and converts the frame(s) to static frames.
 * @param {number} startFrame
 * @param {number} endFrame
 * @return {void}
 */
FlashTimeline.prototype.removeMotionObject = function(startFrame, endFrame) {};

/**
 * Moves the first specified layer before or after the second specified layer.
 * @param {number} layerToMove
 * @param {number} layerToPutItBy
 * @param {boolean=} bAddBefore
 * @return {void}
 */
FlashTimeline.prototype.reorderLayer = function(layerToMove, layerToPutItBy, bAddBefore) {};

/**
 * Reverses a range of frames.
 * @param {number=} startFrameIndex
 * @param {number=} endFrameIndex
 * @return {void}
 */
FlashTimeline.prototype.reverseFrames = function(startFrameIndex, endFrameIndex) {};

/**
 * Selects all the frames in the current timeline.
 * @return {void}
 */
FlashTimeline.prototype.selectAllFrames = function() {};

/**
 * Sets the property of the Frame object for the selected frames.
 * @param {string} property
 * @param {?} value
 * @param {number=} startFrameIndex
 * @param {number=} endFrameIndex
 * @return {void}
 */
FlashTimeline.prototype.setFrameProperty = function(property, value, startFrameIndex, endFrameIndex) {};

/**
 * Replaces the guide lines for the timeline with the information specified.
 * @param {string} xmlString
 * @return {boolean}
 */
FlashTimeline.prototype.setGuidelines = function(xmlString) {};

/**
 * Sets the specified property on all the selected layers to a specified value.
 * @param {string} property
 * @param {?} value
 * @param {string=} layersToChange
 * @return {void}
 */
FlashTimeline.prototype.setLayerProperty = function(property, value, layersToChange) {};

/**
 * Selects a range of frames in the current layer or sets the selected frames to the selection array passed into this method.
 * @param {number|!Array<number>} startFrameIndex_or_selectionList
 * @param {number|boolean=} endFrameIndex_or_bReplaceCurrentSelection
 * @param {boolean=} bReplaceCurrentSelection
 * @return {void}
 */
FlashTimeline.prototype.setSelectedFrames = function(startFrameIndex_or_selectionList, endFrameIndex_or_bReplaceCurrentSelection, bReplaceCurrentSelection) {};

/**
 * Sets the layer to be selected; also makes the specified layer the current layer.
 * @param {number} index
 * @param {boolean=} bReplaceCurrentSelection
 * @return {void}
 */
FlashTimeline.prototype.setSelectedLayers = function(index, bReplaceCurrentSelection) {};

/**
 * Shows the layer masking during authoring by locking the mask and masked layers.
 * @param {number} layer
 * @return {void}
 */
FlashTimeline.prototype.showLayerMasking = function(layer) {};

/**
 * Starts automatic playback of the timeline if it is not currently playing.
 * @return {void}
 */
FlashTimeline.prototype.startPlayback = function() {};

/**
 * Stops autoumatic playback of the timeline if it is currently playing.
 * @return {void}
 */
FlashTimeline.prototype.stopPlayback = function() {};
/**
 * @record
 * @struct
 */
function FlashPath() {}
 /** @type {?} */
FlashPath.prototype.void;
 /** @type {number} */
FlashPath.prototype.nPts;

/**
 * @param {number} xAnchor
 * @param {number} yAnchor
 * @param {number} x2
 * @param {number} y2
 * @param {number} x3
 * @param {number} y3
 * @param {number} x4
 * @param {number} y4
 * @return {void}
 */
FlashPath.prototype.addCubicCurve = function(xAnchor, yAnchor, x2, y2, x3, y3, x4, y4) {};

/**
 * @param {number} xAnchor
 * @param {number} yAnchor
 * @param {number} x2
 * @param {number} y2
 * @param {number} x3
 * @param {number} y3
 * @return {void}
 */
FlashPath.prototype.addCurve = function(xAnchor, yAnchor, x2, y2, x3, y3) {};

/**
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
FlashPath.prototype.addPoint = function(x, y) {};

/**
 * @return {void}
 */
FlashPath.prototype.clear = function() {};

/**
 * @return {?}
 */
FlashPath.prototype.close = function() {};

/**
 * @param {boolean=} bSupressFill
 * @param {boolean=} bSupressStroke
 * @return {void}
 */
FlashPath.prototype.makeShape = function(bSupressFill, bSupressStroke) {};

/**
 * @return {void}
 */
FlashPath.prototype.newContour = function() {};
/**
 * @record
 * @struct
 */
function FlashDrawingLayer() {}

/**
 * @param {boolean=} persistentDraw
 * @return {void}
 */
FlashDrawingLayer.prototype.beginDraw = function(persistentDraw) {};

/**
 * @return {void}
 */
FlashDrawingLayer.prototype.beginFrame = function() {};

/**
 * @param {number} x1Ctrl
 * @param {number} y1Ctrl
 * @param {number} x2Ctl
 * @param {number} y2Ctl
 * @param {number} xEnd
 * @param {number} yEnd
 * @return {void}
 */
FlashDrawingLayer.prototype.cubicCurveTo = function(x1Ctrl, y1Ctrl, x2Ctl, y2Ctl, xEnd, yEnd) {};

/**
 * @param {number} xCtl
 * @param {number} yCtl
 * @param {number} xEnd
 * @param {number} yEnd
 * @return {void}
 */
FlashDrawingLayer.prototype.curveTo = function(xCtl, yCtl, xEnd, yEnd) {};

/**
 * @param {!FlashPath} path
 * @return {void}
 */
FlashDrawingLayer.prototype.drawPath = function(path) {};

/**
 * @return {void}
 */
FlashDrawingLayer.prototype.endDraw = function() {};

/**
 * @return {void}
 */
FlashDrawingLayer.prototype.endFrame = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
FlashDrawingLayer.prototype.lineTo = function(x, y) {};

/**
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
FlashDrawingLayer.prototype.moveTo = function(x, y) {};

/**
 * @return {void}
 */
FlashDrawingLayer.prototype.newPath = function() {};

/**
 * @param {?} color
 * @return {void}
 */
FlashDrawingLayer.prototype.setColor = function(color) {};

/**
 * @return {void}
 */
FlashDrawingLayer.prototype.setFill = function() {};

/**
 * @return {void}
 */
FlashDrawingLayer.prototype.setStroke = function() {};
/**
 * @record
 * @struct
 */
function FlashXMLUI() {}

/**
 * @return {?}
 */
FlashXMLUI.prototype.accept = function() {};

/**
 * @return {?}
 */
FlashXMLUI.prototype.cancel = function() {};

/**
 * @return {?}
 */
FlashXMLUI.prototype.get = function() {};

/**
 * @return {?}
 */
FlashXMLUI.prototype.getControlItemElement = function() {};

/**
 * @return {?}
 */
FlashXMLUI.prototype.getEnabled = function() {};

/**
 * @return {?}
 */
FlashXMLUI.prototype.getVisible = function() {};

/**
 * @return {?}
 */
FlashXMLUI.prototype.set = function() {};

/**
 * @return {?}
 */
FlashXMLUI.prototype.setControItemElement = function() {};

/**
 * @return {?}
 */
FlashXMLUI.prototype.setControItemElements = function() {};

/**
 * @return {?}
 */
FlashXMLUI.prototype.setEnabled = function() {};

/**
 * @return {?}
 */
FlashXMLUI.prototype.setVisible = function() {};
/**
 * @record
 * @struct
 */
function FlashActionsPanel() {}

/**
 * @return {?}
 */
FlashActionsPanel.prototype.getClassForObject = function() {};

/**
 * @return {?}
 */
FlashActionsPanel.prototype.getScriptAssistMode = function() {};

/**
 * @return {?}
 */
FlashActionsPanel.prototype.getSelectedText = function() {};

/**
 * @return {?}
 */
FlashActionsPanel.prototype.getText = function() {};

/**
 * @return {?}
 */
FlashActionsPanel.prototype.hasSelection = function() {};

/**
 * @return {?}
 */
FlashActionsPanel.prototype.replaceSelectedText = function() {};

/**
 * @return {?}
 */
FlashActionsPanel.prototype.setScriptAssistMode = function() {};

/**
 * @return {?}
 */
FlashActionsPanel.prototype.setSelection = function() {};

/**
 * @return {?}
 */
FlashActionsPanel.prototype.setText = function() {};
/**
 * @record
 * @struct
 */
function FlashCompilerErrors() {}

/**
 * @return {?}
 */
FlashCompilerErrors.prototype.clear = function() {};

/**
 * @return {?}
 */
FlashCompilerErrors.prototype.save = function() {};
/**
 * @record
 * @struct
 */
function FlashComponentsPanel() {}

/**
 * @return {?}
 */
FlashComponentsPanel.prototype.addItemToDocument = function() {};

/**
 * @return {?}
 */
FlashComponentsPanel.prototype.reload = function() {};
/**
 * @record
 * @struct
 */
function FlashPresetPanel() {}

/**
 * @return {?}
 */
FlashPresetPanel.prototype.addNewItem = function() {};

/**
 * @return {?}
 */
FlashPresetPanel.prototype.applyPreset = function() {};

/**
 * @return {?}
 */
FlashPresetPanel.prototype.deleteFolder = function() {};

/**
 * @return {?}
 */
FlashPresetPanel.prototype.deleteItem = function() {};

/**
 * @return {?}
 */
FlashPresetPanel.prototype.expandFolder = function() {};

/**
 * @return {?}
 */
FlashPresetPanel.prototype.exportItem = function() {};

/**
 * @return {?}
 */
FlashPresetPanel.prototype.findItemIndex = function() {};

/**
 * @return {?}
 */
FlashPresetPanel.prototype.getSelectedItems = function() {};

/**
 * @return {?}
 */
FlashPresetPanel.prototype.importItem = function() {};

/**
 * @return {?}
 */
FlashPresetPanel.prototype.moveToFolder = function() {};

/**
 * @return {?}
 */
FlashPresetPanel.prototype.newFolder = function() {};

/**
 * @return {?}
 */
FlashPresetPanel.prototype.renameItem = function() {};

/**
 * @return {?}
 */
FlashPresetPanel.prototype.selectItem = function() {};
/**
 * @record
 * @struct
 */
function FlashSwfPanel() {}
 /** @type {?} */
FlashSwfPanel.prototype.name;
 /** @type {?} */
FlashSwfPanel.prototype.path;

/**
 * @return {?}
 */
FlashSwfPanel.prototype.call = function() {};

/**
 * @return {?}
 */
FlashSwfPanel.prototype.setFocus = function() {};
/**
 * @record
 * @struct
 */
function FlashTools() {}
 /** @type {?} */
FlashTools.prototype.activeTool;
 /** @type {?} */
FlashTools.prototype.altIsDown;
 /** @type {?} */
FlashTools.prototype.ctlIsDown;
 /** @type {?} */
FlashTools.prototype.mouseIsDown;
 /** @type {?} */
FlashTools.prototype.penDownLoc;
 /** @type {?} */
FlashTools.prototype.penLoc;
 /** @type {?} */
FlashTools.prototype.shiftIsDown;
 /** @type {?} */
FlashTools.prototype.toolObjs;

/**
 * @return {?}
 */
FlashTools.prototype.constraintPoint = function() {};

/**
 * @return {?}
 */
FlashTools.prototype.getKeyDown = function() {};

/**
 * @return {?}
 */
FlashTools.prototype.setCreatingBbox = function() {};

/**
 * @return {?}
 */
FlashTools.prototype.setCursor = function() {};

/**
 * @return {?}
 */
FlashTools.prototype.snapPoint = function() {};
/**
 * @constructor
 * @struct
 */
function SpriteSheetExporter() {}
 /** @type {string} */
SpriteSheetExporter.prototype.algorithm;
 /** @type {boolean} */
SpriteSheetExporter.prototype.allowRotate;
 /** @type {boolean} */
SpriteSheetExporter.prototype.allowTrimming;
 /** @type {string} */
SpriteSheetExporter.prototype.app;
 /** @type {boolean} */
SpriteSheetExporter.prototype.autoSize;
 /** @type {number} */
SpriteSheetExporter.prototype.borderPadding;
 /** @type {boolean} */
SpriteSheetExporter.prototype.canBorderPad;
 /** @type {boolean} */
SpriteSheetExporter.prototype.canRotate;
 /** @type {boolean} */
SpriteSheetExporter.prototype.canTrim;
 /** @type {boolean} */
SpriteSheetExporter.prototype.canShapePad;
 /** @type {boolean} */
SpriteSheetExporter.prototype.canStackDuplicateFrames;
 /** @type {string} */
SpriteSheetExporter.prototype.format;
 /** @type {string} */
SpriteSheetExporter.prototype.image;
 /** @type {string} */
SpriteSheetExporter.prototype.layoutFormat;
 /** @type {number} */
SpriteSheetExporter.prototype.maxSheetHeight;
 /** @type {number} */
SpriteSheetExporter.prototype.maxSheetWidth;
 /** @type {boolean} */
SpriteSheetExporter.prototype.overflowed;
 /** @type {number} */
SpriteSheetExporter.prototype.shapePadding;
 /** @type {number} */
SpriteSheetExporter.prototype.sheetHeight;
 /** @type {number} */
SpriteSheetExporter.prototype.sheetWidth;
 /** @type {boolean} */
SpriteSheetExporter.prototype.stackDuplicateFrames;
 /** @type {string} */
SpriteSheetExporter.prototype.version;

/**
 * @param {!FlashItem} item
 * @return {?}
 */
SpriteSheetExporter.prototype.addBitmap = function(item) {};

/**
 * @param {!FlashItem} item
 * @param {string=} name
 * @param {number=} beginFrame
 * @param {number=} endFrame
 * @return {?}
 */
SpriteSheetExporter.prototype.addSymbol = function(item, name, beginFrame, endFrame) {};

/**
 * @return {?}
 */
SpriteSheetExporter.prototype.beginExport = function() {};

/**
 * @return {?}
 */
SpriteSheetExporter.prototype.changeSymbol = function() {};

/**
 * @param {string} fileURL
 * @param {!Object} option
 * @param {boolean=} writeMetaData
 * @return {string}
 */
SpriteSheetExporter.prototype.exportSpriteSheet = function(fileURL, option, writeMetaData) {};

/**
 * @return {?}
 */
SpriteSheetExporter.prototype.removeBitmap = function() {};

/**
 * @return {?}
 */
SpriteSheetExporter.prototype.removeSymbol = function() {};
/**
 * @record
 * @struct
 */
function FlashFL() {}
 /** @type {!FlashActionsPanel} */
FlashFL.prototype.actionsPanel;
 /** @type {string} */
FlashFL.prototype.as3PackagePaths;
 /** @type {!FlashCompilerErrors} */
FlashFL.prototype.compilerErrors;
 /** @type {!FlashComponentsPanel} */
FlashFL.prototype.componentsPanel;
 /** @type {string} */
FlashFL.prototype.configDirectory;
 /** @type {string} */
FlashFL.prototype.configURI;
 /** @type {boolean} */
FlashFL.prototype.contactSensitiveSelection;
 /** @type {!Array<string>} */
FlashFL.prototype.createNewDocList;
 /** @type {!Array<string>} */
FlashFL.prototype.createNewDocListType;
 /** @type {!Array<string>} */
FlashFL.prototype.createNewTemplateList;
 /** @type {!Array<!FlashDocument>} */
FlashFL.prototype.documents;
 /** @type {!FlashDrawingLayer} */
FlashFL.prototype.drawingLayer;
 /** @type {string} */
FlashFL.prototype.externalLibraryPath;
 /** @type {string} */
FlashFL.prototype.flexSDKPath;
 /** @type {!Array<?>} */
FlashFL.prototype.installedPlayers;
 /** @type {string} */
FlashFL.prototype.languageCode;
 /** @type {string} */
FlashFL.prototype.libraryPath;
 /** @type {!FlashMath} */
FlashFL.prototype.Math;
 /** @type {!Array<string>} */
FlashFL.prototype.mruRecentFileList;
 /** @type {!Array<string>} */
FlashFL.prototype.mruRecentFileListType;
 /** @type {!Array<string>} */
FlashFL.prototype.packagePaths;
 /** @type {number} */
FlashFL.prototype.publishCacheDiskSizeMax;
 /** @type {boolean} */
FlashFL.prototype.publishCacheEnabled;
 /** @type {number} */
FlashFL.prototype.publishCacheMemoryEntrySizeLimit;
 /** @type {number} */
FlashFL.prototype.publishCacheMemorySizeMax;
 /** @type {number} */
FlashFL.prototype.objectDrawingMode;
 /** @type {!FlashOutputPanel} */
FlashFL.prototype.outputPanel;
 /** @type {!FlashPresetPanel} */
FlashFL.prototype.presetPanel;
 /** @type {string} */
FlashFL.prototype.scriptURI;
 /** @type {string} */
FlashFL.prototype.sourcePath;
 /** @type {!Array<!FlashSwfPanel>} */
FlashFL.prototype.swfPanels;
 /** @type {!Array<!FlashTools>} */
FlashFL.prototype.tools;
 /** @type {string} */
FlashFL.prototype.version;
 /** @type {!FlashXMLUI} */
FlashFL.prototype.xmlui;

/**
 * @param {?} eventType
 * @param {?} callbackFunction
 * @return {?}
 */
FlashFL.prototype.addEventListener = function(eventType, callbackFunction) {};

/**
 * @param {?} browseType
 * @param {?=} title
 * @param {?=} previewArea
 * @param {?=} fileFilter
 * @return {?}
 */
FlashFL.prototype.browseForFileURL = function(browseType, title, previewArea, fileFilter) {};

/**
 * @param {string} description
 * @return {?}
 */
FlashFL.prototype.browseForFolderURL = function(description) {};

/**
 * @return {void}
 */
FlashFL.prototype.clearPublishCache = function() {};

/**
 * @param {string} string
 * @return {void}
 */
FlashFL.prototype.clipCopyString = function(string) {};

/**
 * @param {boolean=} bPromptToSave
 * @return {void}
 */
FlashFL.prototype.closeAll = function(bPromptToSave) {};

/**
 * @return {boolean}
 */
FlashFL.prototype.closeAllPlayerDocuments = function() {};

/**
 * @param {!FlashDocument} documentObject
 * @param {boolean=} bPromptToSaveChanges
 * @return {?}
 */
FlashFL.prototype.closeDocument = function(documentObject, bPromptToSaveChanges) {};

/**
 * A string that specifies the type of document to create. Acceptable values are "timeline", "presentation", and "application". The default value is "timeline", which has the same effect as choosing File > New > Flash File (ActionScript 3.0). This parameter is optional.
 * @param {string=} document
 * @return {!FlashDocument}
 */
FlashFL.prototype.createDocument = function(document) {};

/**
 * @param {string} ucfURI
 * @param {string} profileName
 * @return {string}
 */
FlashFL.prototype.exportPublishProfileString = function(ucfURI, profileName) {};

/**
 * @param {string} fileURI
 * @return {boolean}
 */
FlashFL.prototype.fileExists = function(fileURI) {};

/**
 * @param {number} id
 * @return {!FlashDocument}
 */
FlashFL.prototype.findDocumentDOM = function(id) {};

/**
 * @param {string} name
 * @return {!Array<number>}
 */
FlashFL.prototype.findDocumentIndex = function(name) {};

/**
 * @param {string} instanceName
 * @param {!FlashDocument} document
 * @return {!Array<{keyframe: !FlashFrame, layer: !FlashLayer, timeline: !FlashTimeline, parent: ?}>}
 */
FlashFL.prototype.findObjectInDocByName = function(instanceName, document) {};

/**
 * elementType = "shape", "text", "instance", or "shapeObj".
 * @param {string} elementType
 * @param {!FlashDocument} document
 * @return {!Array<?>}
 */
FlashFL.prototype.findObjectInDocByType = function(elementType, document) {};

/**
 * @param {number} memType
 * @return {?}
 */
FlashFL.prototype.getAppMemoryInfo = function(memType) {};

/**
 * @return {!FlashDocument}
 */
FlashFL.prototype.getDocumentDOM = function() {};

/**
 * @return {?}
 */
FlashFL.prototype.getSwfPanel = function() {};

/**
 * @return {?}
 */
FlashFL.prototype.isFontInstalled = function() {};

/**
 * @param {string} URI
 * @param {boolean=} returnMBCS
 * @return {string}
 */
FlashFL.prototype.mapPlayerURL = function(URI, returnMBCS) {};

/**
 * Method; opens a Flash document (FLA file) for editing in a new Flash Document window and gives it focus. For a user, the effect is the same as selecting File > Open and then selecting a file. If the specified file is already open, the window that contains the document comes to the front. The window that contains the specified file becomes the currently selected document.
 * @param {string} fileURI
 * @return {!FlashDocument}
 */
FlashFL.prototype.openDocument = function(fileURI) {};

/**
 * @param {string} fileURI
 * @param {string=} createExtension
 * @param {string=} className
 * @return {void}
 */
FlashFL.prototype.openScript = function(fileURI, createExtension, className) {};

/**
 * @param {boolean=} bPromptIfNeeded
 * @return {void}
 */
FlashFL.prototype.quit = function(bPromptIfNeeded) {};

/**
 * @return {void}
 */
FlashFL.prototype.reloadTools = function() {};

/**
 * documentNew", "documentOpened", "documentClosed", "mouseMove", "documentChanged", "layerChanged", and "frameChanged".
 * @param {string} eventType
 * @return {boolean}
 */
FlashFL.prototype.removeEventListener = function(eventType) {};

/**
 * @return {void}
 */
FlashFL.prototype.resetAS3PackagePaths = function() {};

/**
 * @return {void}
 */
FlashFL.prototype.resetPackagePaths = function() {};

/**
 * @param {!FlashDocument} document
 * @return {void}
 */
FlashFL.prototype.revertDocument = function(document) {};

/**
 * @param {string} fileURI
 * @param {!Function=} funcName
 * @param {!Array<?>=} args
 * @return {?}
 */
FlashFL.prototype.runScript = function(fileURI, funcName, args) {};

/**
 * @return {void}
 */
FlashFL.prototype.saveAll = function() {};

/**
 * @param {!FlashDocument} document
 * @param {string=} fileURI
 * @return {boolean}
 */
FlashFL.prototype.saveDocument = function(document, fileURI) {};

/**
 * @param {!FlashDocument} document
 * @return {boolean}
 */
FlashFL.prototype.saveDocumentAs = function(document) {};

/**
 * Method; enables selection or editing of an element. Generally, you will use this method on objects returned by fl.findObjectInDocByName() or fl.findObjectInDocByType().
 * @param {!FlashElement} elementObject
 * @param {boolean} editMode
 * @return {boolean}
 */
FlashFL.prototype.selectElement = function(elementObject, editMode) {};

/**
 * "arrow","bezierSelect","freeXform","fillXform","lasso","pen","penplus","penminus","penmodify","text","line","rect","oval","rectPrimitive","ovalPrimitive","polystar","pencil","brush","inkBottle","bucket","eyeDropper","eraser","hand", and "magnifier".
 * @param {string} toolName
 * @return {void}
 */
FlashFL.prototype.selectTool = function(toolName) {};

/**
 * @param {!FlashDocument} document
 * @param {boolean=} bActivateFrame
 * @return {void}
 */
FlashFL.prototype.selectActiveWindow = function(document, bActivateFrame) {};

/**
 * @param {boolean} show
 * @return {void}
 */
FlashFL.prototype.showIdleMessage = function(show) {};

/**
 * @return {?}
 */
FlashFL.prototype.toggleBreakpoint = function() {};

/**
 * @param {?} message
 * @return {void}
 */
FlashFL.prototype.trace = function(message) {};
 /** @type {!FlashFL} */
var fl;
 /** @type {!FlashFLfile} */
var FLfile;
