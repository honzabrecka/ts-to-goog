/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/chroma-js v0/index.d.ts:
/** @const */
var Chroma = {};
/**
 * @record
 * @struct
 */
Chroma.ChromaStatic = function() {};

/* TODO: CallSignature: Chroma */

/* TODO: CallSignature: Chroma */

/* TODO: CallSignature: Chroma */
 /** @type {!Chroma.InterpolateFunction} */
Chroma.ChromaStatic.prototype.interpolate;
 /** @type {!Chroma.InterpolateFunction} */
Chroma.ChromaStatic.prototype.mix;
 /** @type {!Chroma.PredefinedScales} */
Chroma.ChromaStatic.prototype.scales;

/**
 * Create a color in the specified color space using a, b and c as values.
 * 
 * @param {number} a
 * @param {number} b
 * @param {number} c
 * @param {string=} colorSpace The color space to use (one of "rgb", "hsl", "hsv", "lab", "lch", "gl"). Defaults to "rgb".
 * @return {!Chroma.Color} the color object.
 */
Chroma.ChromaStatic.prototype.color = function(a, b, c, colorSpace) {};

/**
 * Calculate the contrast ratio of two colors.
 * 
 * Calculate the contrast ratio of two colors.
 * 
 * Calculate the contrast ratio of two colors.
 * 
 * Calculate the contrast ratio of two colors.
 * 
 * @param {!Chroma.Color|string} color1 The first color.
 * @param {!Chroma.Color|string} color2 The second color.
 * @return {number} the contrast ratio.
 */
Chroma.ChromaStatic.prototype.contrast = function(color1, color2) {};

/**
 * Create a color from a hex or string representation (as supported in CSS).
 * 
 * This is an alias of chroma.hex().
 * 
 * @param {string} color The string to convert to a color.
 * @return {!Chroma.Color} the color object.
 */
Chroma.ChromaStatic.prototype.css = function(color) {};

/**
 * Create a color from a hex or string representation (as supported in CSS).
 * 
 * This is an alias of chroma.css().
 * 
 * @param {string} color The string to convert to a color.
 * @return {!Chroma.Color} the color object.
 */
Chroma.ChromaStatic.prototype.hex = function(color) {};

/**
 * @param {number} red
 * @param {number} green
 * @param {number} blue
 * @param {number=} alpha
 * @return {!Chroma.Color}
 */
Chroma.ChromaStatic.prototype.rgb = function(red, green, blue, alpha) {};

/**
 * @param {number} hue
 * @param {number} saturation
 * @param {number} lightness
 * @param {number=} alpha
 * @return {!Chroma.Color}
 */
Chroma.ChromaStatic.prototype.hsl = function(hue, saturation, lightness, alpha) {};

/**
 * @param {number} hue
 * @param {number} saturation
 * @param {number} value
 * @param {number=} alpha
 * @return {!Chroma.Color}
 */
Chroma.ChromaStatic.prototype.hsv = function(hue, saturation, value, alpha) {};

/**
 * @param {number} lightness
 * @param {number} a
 * @param {number} b
 * @param {number=} alpha
 * @return {!Chroma.Color}
 */
Chroma.ChromaStatic.prototype.lab = function(lightness, a, b, alpha) {};

/**
 * @param {number} lightness
 * @param {number} chroma
 * @param {number} hue
 * @param {number=} alpha
 * @return {!Chroma.Color}
 */
Chroma.ChromaStatic.prototype.lch = function(lightness, chroma, hue, alpha) {};

/**
 * @param {number} red
 * @param {number} green
 * @param {number} blue
 * @param {number=} alpha
 * @return {!Chroma.Color}
 */
Chroma.ChromaStatic.prototype.gl = function(red, green, blue, alpha) {};

/**
 * @param {!Chroma.Color|string} color
 * @return {number}
 */
Chroma.ChromaStatic.prototype.luminance = function(color) {};

/**
 * Creates a color scale using a pre-defined color scale.
 * 
 * Creates a color scale function from the given set of colors.
 * 
 * @param {string|!Array<string>=} name_or_colors The name of the color scale. / An Array of at least two color names or hex values.
 * @return {!Chroma.Scale} the resulting color scale.
 */
Chroma.ChromaStatic.prototype.scale = function(name_or_colors) {};
/**
 * @record
 * @struct
 */
Chroma.InterpolateFunction = function() {};

/* TODO: CallSignature: Chroma */

/* TODO: CallSignature: Chroma */

/* TODO: CallSignature: Chroma */

/* TODO: CallSignature: Chroma */

/**
 * @param {!Array<?>} colors
 * @return {function(number): !Chroma.Color}
 */
Chroma.InterpolateFunction.prototype.bezier = function(colors) {};
/**
 * @record
 * @struct
 */
Chroma.PredefinedScales = function() {};

/* TODO: IndexSignature: Chroma */
 /** @type {!Chroma.Scale} */
Chroma.PredefinedScales.prototype.cool;
 /** @type {!Chroma.Scale} */
Chroma.PredefinedScales.prototype.hot;
/**
 * @record
 * @struct
 */
Chroma.Color = function() {};

/* TODO: ConstructSignature: Chroma */

/* TODO: ConstructSignature: Chroma */

/* TODO: ConstructSignature: Chroma */

/* TODO: ConstructSignature: Chroma */

/**
 * Convert this color to CSS hex representation.
 * 
 * @return {string} this color's hex representation.
 */
Chroma.Color.prototype.hex = function() {};

/**
 * @return {number} the relative luminance of the color, which is a value between 0 (black) and 1 (white).
 */
Chroma.Color.prototype.luminance = function() {};

/**
 * @return {string} the X11 name of this color or its hex value if it does not have a name.
 */
Chroma.Color.prototype.name = function() {};

/**
 * Set the alpha value.
 * 
 * @param {number=} alpha The alpha value.
 * @return {number|!Chroma.Color} the alpha value of the color. / this
 */
Chroma.Color.prototype.alpha = function(alpha) {};

/**
 * @param {string=} mode
 * @return {string}
 */
Chroma.Color.prototype.css = function(mode) {};

/**
 * @param {!Chroma.Color|string} color
 * @param {number} f
 * @param {string=} mode
 * @return {!Chroma.Color}
 */
Chroma.Color.prototype.interpolate = function(color, f, mode) {};

/**
 * @return {!Chroma.Color}
 */
Chroma.Color.prototype.premultiply = function() {};

/**
 * @return {!Array<number>}
 */
Chroma.Color.prototype.rgb = function() {};

/**
 * @return {!Array<number>}
 */
Chroma.Color.prototype.rgba = function() {};

/**
 * @return {!Array<number>}
 */
Chroma.Color.prototype.hsl = function() {};

/**
 * @return {!Array<number>}
 */
Chroma.Color.prototype.hsv = function() {};

/**
 * @return {!Array<number>}
 */
Chroma.Color.prototype.lab = function() {};

/**
 * @return {!Array<number>}
 */
Chroma.Color.prototype.lch = function() {};

/**
 * @return {!Array<number>}
 */
Chroma.Color.prototype.hsi = function() {};

/**
 * @return {!Array<number>}
 */
Chroma.Color.prototype.gl = function() {};

/**
 * @param {number=} amount
 * @return {!Chroma.Color}
 */
Chroma.Color.prototype.darken = function(amount) {};

/**
 * @param {number} amount
 * @return {!Chroma.Color}
 */
Chroma.Color.prototype.darker = function(amount) {};

/**
 * @param {number=} amount
 * @return {!Chroma.Color}
 */
Chroma.Color.prototype.brighten = function(amount) {};

/**
 * @param {number} amount
 * @return {!Chroma.Color}
 */
Chroma.Color.prototype.brighter = function(amount) {};

/**
 * @param {number=} amount
 * @return {!Chroma.Color}
 */
Chroma.Color.prototype.saturate = function(amount) {};

/**
 * @param {number=} amount
 * @return {!Chroma.Color}
 */
Chroma.Color.prototype.desaturate = function(amount) {};

/**
 * @return {string}
 */
Chroma.Color.prototype.toString = function() {};
/**
 * @record
 * @struct
 */
Chroma.Scale = function() {};

/* TODO: CallSignature: Chroma */

/**
 * Retreive all possible colors generated by this scale if it has distinct classes.
 * 
 * @param {string=} mode The output mode to use. Must be one of Color's getters. Defaults to "hex".
 * @return {!Array<?>} an array of colors in the type specified by mode.
 */
Chroma.Scale.prototype.colors = function(mode) {};

/**
 * Enable or disable automatic lightness correction of this scale.
 * 
 * @param {boolean=} enable
 * @return {boolean|!Chroma.Scale} this
 */
Chroma.Scale.prototype.correctLightness = function(enable) {};

/**
 * Get the current domain.
 * 
 * Set the domain.
 * 
 * @param {!Array<number>=} domain An Array of at least two numbers (min and max).
 * @param {number=} classes The number of fixed classes to create between min and max.
 * @param {string=} mode The scale to use. Examples: log, quantiles, k-means.
 * @return {!Array<number>|!Chroma.Scale} The current domain. / this
 */
Chroma.Scale.prototype.domain = function(domain, classes, mode) {};

/**
 * Specify in which color space the colors should be interpolated. Defaults to "rgb".
 * You can use any of the following spaces: rgb, hsv, hsl, lab, lch
 * 
 * @param {string} colorSpace The color space to use for interpolation.
 * @return {!Chroma.Scale} this
 */
Chroma.Scale.prototype.mode = function(colorSpace) {};

/**
 * Set the output mode of this Scale.
 * 
 * @param {string} mode The output mode to use. Must be one of Color's getters.
 * @return {!Chroma.Scale} this
 */
Chroma.Scale.prototype.out = function(mode) {};

/**
 * Set the color range after initialization.
 * 
 * @param {!Array<string>} colors An Array of at least two color names or hex values.
 * @return {!Chroma.Scale} this
 */
Chroma.Scale.prototype.range = function(colors) {};
 /** @type {!Chroma.ChromaStatic} */
var chroma;
