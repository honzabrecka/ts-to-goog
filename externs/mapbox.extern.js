/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/mapbox/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
L.mapbox = {};
 /** @type {string} */
L.mapbox.accessToken;

/**
 * Create and automatically configure a map with layers, markers, and interactivity.
 * @param {(string|!Element)} element
 * @param {?} idOrTileJson
 * @param {!L.mapbox.MapOptions=} options
 * @return {!L.mapbox.Map}
 */
L.mapbox.map = function(element, idOrTileJson, options) {};
/**
 * @extends {L.Map.MapOptions}
 * @record
 * @struct
 */
L.mapbox.MapOptions = function() {};
 /** @type {!L.mapbox.FeatureLayerOptions} */
L.mapbox.MapOptions.prototype.featureLayer;
 /** @type {?} */
L.mapbox.MapOptions.prototype.gridLayer;
 /** @type {!L.mapbox.TileLayerOptions} */
L.mapbox.MapOptions.prototype.tileLayer;
 /** @type {!L.mapbox.ControlOptions} */
L.mapbox.MapOptions.prototype.infoControl;
 /** @type {!L.mapbox.ControlOptions} */
L.mapbox.MapOptions.prototype.legendControl;
 /** @type {!L.mapbox.ShareControlOptions} */
L.mapbox.MapOptions.prototype.shareControl;

/** @typedef {function(?): boolean} */
L.mapbox.FilterFunction;
/**
 * @record
 * @struct
 */
L.mapbox.Map = function() {};
 /** @type {!L.mapbox.TileLayer} */
L.mapbox.Map.prototype.tileLayer;
 /** @type {!L.mapbox.GridLayer} */
L.mapbox.Map.prototype.gridLayer;
 /** @type {!L.mapbox.FeatureLayer} */
L.mapbox.Map.prototype.featureLayer;
 /** @type {!L.mapbox.GridControl} */
L.mapbox.Map.prototype.gridControl;
 /** @type {!L.mapbox.InfoControl} */
L.mapbox.Map.prototype.infoControl;
 /** @type {!L.mapbox.LegendControl} */
L.mapbox.Map.prototype.legendControl;
 /** @type {!L.mapbox.ShareControl} */
L.mapbox.Map.prototype.shareControl;

/**
 * @return {?}
 */
L.mapbox.Map.prototype.getTileJSON = function() {};

/**
 * You can add a tiled layer to your map with L.mapbox.tileLayer(), a simple interface to layers from Mapbox and elsewhere.
 * @param {string} idOrTileJson
 * @param {!L.mapbox.TileLayerOptions=} options
 * @return {!L.mapbox.TileLayer}
 */
L.mapbox.tileLayer = function(idOrTileJson, options) {};
/**
 * @extends {L.TileLayerOptions}
 * @record
 * @struct
 */
L.mapbox.TileLayerOptions = function() {};
 /** @type {string} */
L.mapbox.TileLayerOptions.prototype.retinaVersion;
/**
 * @record
 * @struct
 */
L.mapbox.TileLayer = function() {};

/**
 * Returns this layer's TileJSON object which determines its tile source, zoom bounds and other metadata.
 * @return {?}
 */
L.mapbox.TileLayer.prototype.getTileJSON = function() {};

/**
 * Set the image format of tiles in this layer. You can use lower-quality tiles in order to load maps faster
 * @param {string} format
 * @return {!L.mapbox.TileLayer}
 */
L.mapbox.TileLayer.prototype.setFormat = function(format) {};

/**
 * An L.mapbox.gridLayer loads UTFGrid tiles of interactivity into your map, which you can easily access with L.mapbox.gridControl.
 * @param {?} idOrTileJson
 * @return {!L.mapbox.GridLayer}
 */
L.mapbox.gridLayer = function(idOrTileJson) {};
/**
 * @record
 * @struct
 */
L.mapbox.GridLayer = function() {};

/**
 * @return {boolean}
 */
L.mapbox.GridLayer.prototype.active = function() {};

/**
 * @param {!L.mapbox.Map} map
 * @return {?}
 */
L.mapbox.GridLayer.prototype.addTo = function(map) {};

/**
 * @param {!L.mapbox.Map} map
 * @return {?}
 */
L.mapbox.GridLayer.prototype.onAdd = function(map) {};

/**
 * @return {?}
 */
L.mapbox.GridLayer.prototype.onRemove = function() {};

/**
 * Bind an event handler to a given event on this L.mapbox.gridLayer instance. GridLayers expose a number of useful events that give you access to UTFGrid data as the user interacts with the map.
 * @param {string} event
 * @param {!Function} handler
 * @param {?=} context
 * @return {?}
 */
L.mapbox.GridLayer.prototype.on = function(event, handler, context) {};

/**
 * Returns this layer's TileJSON object which determines its tile source, zoom bounds and other metadata.
 * @return {?}
 */
L.mapbox.GridLayer.prototype.getTileJSON = function() {};

/**
 * Load data for a given latitude, longitude point on the map, and call the callback function with that data, if any.
 * @param {?} latlng
 * @param {!Function} callback
 * @return {?}
 */
L.mapbox.GridLayer.prototype.getData = function(latlng, callback) {};

/**
 * L.mapbox.featureLayer provides an easy way to integrate GeoJSON from Mapbox and elsewhere into your map.
 * @param {?=} idOrGeoJson
 * @param {!L.mapbox.FeatureLayerOptions=} options
 * @return {!L.mapbox.FeatureLayer}
 */
L.mapbox.featureLayer = function(idOrGeoJson, options) {};
/**
 * @record
 * @struct
 */
L.mapbox.FeatureLayerOptions = function() {};
 /** @type {function(?): boolean} */
L.mapbox.FeatureLayerOptions.prototype.filter;

/**
 * @param {string} template
 * @return {string}
 */
L.mapbox.FeatureLayerOptions.prototype.sanitizer = function(template) {};
/**
 * @record
 * @struct
 */
L.mapbox.FeatureLayer = function() {};

/**
 * Load GeoJSON data for this layer from the URL given by url.
 * @param {string} url
 * @return {?}
 */
L.mapbox.FeatureLayer.prototype.loadURL = function(url) {};

/**
 * Load marker GeoJSON data from a map with the given id on Mapbox.
 * @param {string} id
 * @return {?}
 */
L.mapbox.FeatureLayer.prototype.loadID = function(id) {};

/**
 * Sets the filter function for this data layer.
 * @param {function(?): boolean} filter
 * @return {?}
 */
L.mapbox.FeatureLayer.prototype.setFilter = function(filter) {};

/**
 * Gets the filter function for this data layer.
 * @return {function(?): boolean}
 */
L.mapbox.FeatureLayer.prototype.getFilter = function() {};

/**
 * Set the contents of a markers layer: run the provided features through
 * the filter function and then through the factory function to create
 * elements for the map. If the layer already has features, they are
 * replaced with the new features. An empty array will clear the
 * layer of all features.
 * @param {?} geojson
 * @return {!L.mapbox.FeatureLayer}
 */
L.mapbox.FeatureLayer.prototype.setGeoJSON = function(geojson) {};

/**
 * Get the contents of this layer as GeoJSON data.
 * @return {?}
 */
L.mapbox.FeatureLayer.prototype.getGeoJSON = function() {};

/**
 * A low-level interface to geocoding, useful for more complex uses and reverse-geocoding.
 * @param {string} id
 * @return {!L.mapbox.Geocoder}
 */
L.mapbox.geocoder = function(id) {};
/**
 * @record
 * @struct
 */
L.mapbox.Geocoder = function() {};

/**
 * @return {string}
 */
L.mapbox.Geocoder.prototype.getURL = function() {};

/**
 * @param {string} url
 * @return {?}
 */
L.mapbox.Geocoder.prototype.setURL = function(url) {};

/**
 * @param {string} id
 * @return {?}
 */
L.mapbox.Geocoder.prototype.setID = function(id) {};

/**
 * @param {?} tilejson
 * @return {?}
 */
L.mapbox.Geocoder.prototype.setTileJSON = function(tilejson) {};

/**
 * @param {string} url
 * @return {string}
 */
L.mapbox.Geocoder.prototype.queryURL = function(url) {};

/**
 * Queries the geocoder with a query string, and returns its result, if any.
 * @param {string} queryString
 * @param {!Function} callback
 * @return {?}
 */
L.mapbox.Geocoder.prototype.query = function(queryString, callback) {};

/**
 * Queries the geocoder with a location, and returns its result, if any.
 * @param {?} location
 * @param {!Function} callback
 * @return {?}
 */
L.mapbox.Geocoder.prototype.reverseQuery = function(location, callback) {};
/**
 * @extends {L.ControlOptions}
 * @record
 * @struct
 */
L.mapbox.ControlOptions = function() {};

/**
 * @param {string} template
 * @return {string}
 */
L.mapbox.ControlOptions.prototype.sanitizer = function(template) {};

/**
 * A map control that shows a toggleable info container. If set, attribution is auto-detected from active layers and added to the info container.
 * @param {!L.mapbox.ControlOptions=} options
 * @return {!L.mapbox.InfoControl}
 */
L.mapbox.infoControl = function(options) {};
/**
 * @record
 * @struct
 */
L.mapbox.InfoControl = function() {};

/**
 * @param {!L.mapbox.Map} map
 * @return {?}
 */
L.mapbox.InfoControl.prototype.onAdd = function(map) {};

/**
 * @param {!L.mapbox.Map} map
 * @return {?}
 */
L.mapbox.InfoControl.prototype.onRemove = function(map) {};

/**
 * Adds an info string to infoControl.
 * @param {string} info
 * @return {?}
 */
L.mapbox.InfoControl.prototype.addInfo = function(info) {};

/**
 * Removes an info string from infoControl
 * @param {string} info
 * @return {?}
 */
L.mapbox.InfoControl.prototype.removeInfo = function(info) {};

/**
 * A map control that shows legends added to maps in Mapbox.
 * Legends are auto-detected from active layers.
 * @param {!L.mapbox.ControlOptions=} options
 * @return {!L.mapbox.LegendControl}
 */
L.mapbox.legendControl = function(options) {};
/**
 * @record
 * @struct
 */
L.mapbox.LegendControl = function() {};

/**
 * @param {!L.mapbox.Map} map
 * @return {?}
 */
L.mapbox.LegendControl.prototype.onAdd = function(map) {};

/**
 * Adds a legend to the legendControl.
 * @param {string} legend
 * @return {?}
 */
L.mapbox.LegendControl.prototype.addLegend = function(legend) {};

/**
 * Removes a legend from the legendControl.
 * @param {string} legend
 * @return {?}
 */
L.mapbox.LegendControl.prototype.removeLegend = function(legend) {};

/**
 * Interaction is what we call interactive parts of maps that are created with
 * the powerful tooltips & regions system in TileMill. Under the hood, it's powered by the open UTFGrid specification.
 * @param {string} layer
 * @param {!L.mapbox.GridControlOptions=} options
 * @return {!L.mapbox.GridControl}
 */
L.mapbox.gridControl = function(layer, options) {};
/**
 * @extends {L.mapbox.ControlOptions}
 * @record
 * @struct
 */
L.mapbox.GridControlOptions = function() {};
 /** @type {string} */
L.mapbox.GridControlOptions.prototype.template;
 /** @type {boolean} */
L.mapbox.GridControlOptions.prototype.follow;
 /** @type {boolean} */
L.mapbox.GridControlOptions.prototype.pinnable;
 /** @type {boolean} */
L.mapbox.GridControlOptions.prototype.touchTeaser;
 /** @type {boolean} */
L.mapbox.GridControlOptions.prototype.location;
/**
 * @record
 * @struct
 */
L.mapbox.GridControl = function() {};

/**
 * @param {!L.mapbox.Map} map
 * @return {?}
 */
L.mapbox.GridControl.prototype.onAdd = function(map) {};

/**
 * @param {!L.mapbox.Map} map
 * @return {?}
 */
L.mapbox.GridControl.prototype.onRemove = function(map) {};

/**
 * If a tooltip is currently shown by the gridControl, hide and close it.
 * @return {?}
 */
L.mapbox.GridControl.prototype.hide = function() {};

/**
 * Change the Mustache template used to transform the UTFGrid data in the map's interactivity into HTML for display.
 * @param {string} template
 * @return {?}
 */
L.mapbox.GridControl.prototype.setTemplate = function(template) {};

/**
 * Adds geocoder functionality as well as a UI element to a map. This uses the Mapbox Geocoding API.
 * @param {string} id
 * @param {!L.mapbox.GeocoderControlOptions=} options
 * @return {!L.mapbox.GeocoderControl}
 */
L.mapbox.geocoderControl = function(id, options) {};
/**
 * @extends {L.ControlOptions}
 * @record
 * @struct
 */
L.mapbox.GeocoderControlOptions = function() {};
 /** @type {boolean} */
L.mapbox.GeocoderControlOptions.prototype.keepOpen;
/**
 * @record
 * @struct
 */
L.mapbox.GeocoderControl = function() {};

/**
 * @return {string}
 */
L.mapbox.GeocoderControl.prototype.getURL = function() {};

/**
 * @param {!L.mapbox.Map} map
 * @return {?}
 */
L.mapbox.GeocoderControl.prototype.onAdd = function(map) {};

/**
 * Set the url used for geocoding.
 * @param {string} url
 * @return {?}
 */
L.mapbox.GeocoderControl.prototype.setURL = function(url) {};

/**
 * Set the map id used for geocoding.
 * @param {string} id
 * @return {?}
 */
L.mapbox.GeocoderControl.prototype.setID = function(id) {};

/**
 * Set the TileJSON used for geocoding.
 * @param {?} tilejson
 * @return {?}
 */
L.mapbox.GeocoderControl.prototype.setTileJSON = function(tilejson) {};

/**
 * Bind a listener to an event emitted by the geocoder control. Supported additional events are
 * @param {string} event
 * @param {!Function} callback
 * @return {?}
 */
L.mapbox.GeocoderControl.prototype.on = function(event, callback) {};

/**
 * Adds a "Share" button to the map, which can be used to share the map to Twitter or Facebook, or generate HTML for a map embed.
 * @param {string} id
 * @param {!L.mapbox.ShareControlOptions=} options
 * @return {!L.mapbox.ShareControl}
 */
L.mapbox.shareControl = function(id, options) {};
/**
 * @extends {L.ControlOptions}
 * @record
 * @struct
 */
L.mapbox.ShareControlOptions = function() {};
 /** @type {string} */
L.mapbox.ShareControlOptions.prototype.url;
/**
 * @record
 * @struct
 */
L.mapbox.ShareControl = function() {};

/**
 * @param {!L.mapbox.Map} map
 * @return {?}
 */
L.mapbox.ShareControl.prototype.onAdd = function(map) {};
/** @const */
L.mapbox.marker = {};

/**
 * A core icon generator used in L.mapbox.marker.style
 * @param {?} feature
 * @return {?}
 */
L.mapbox.marker.icon = function(feature) {};

/**
 * An icon generator for use in conjunction with pointToLayer to generate markers from the Mapbox Markers API and support the simplestyle-spec for features.
 * @param {?} feature
 * @param {?} latlng
 * @return {?}
 */
L.mapbox.marker.style = function(feature, latlng) {};
/** @const */
L.mapbox.simplestyle = {};

/**
 * Given a GeoJSON Feature with optional simplestyle-spec properties, return an options object formatted to be used as Leaflet Path options.
 * @param {?} feature
 * @return {!L.PathOptions}
 */
L.mapbox.simplestyle.style = function(feature) {};

/**
 * A HTML sanitization function, with the same effect as the default value of the sanitizer option of L.mapbox.featureLayer, L.mapbox.gridControl, and L.mapbox.legendControl.
 * @param {string} text
 * @return {string}
 */
L.mapbox.sanitize = function(text) {};

/**
 * A mustache template rendering function, as used by the templating feature provided by L.mapbox.gridControl.
 * @param {string} template
 * @param {?=} data
 * @return {string}
 */
L.mapbox.template = function(template, data) {};
/**
 * @constructor
 * @struct
 */
L.mapbox.config = function() {};
 /** @type {boolean} */
L.mapbox.config.FORCE_HTTPS;
 /** @type {!Array<string>} */
L.mapbox.config.HTTP_URLS;
 /** @type {!Array<string>} */
L.mapbox.config.HTTPS_URLS;
