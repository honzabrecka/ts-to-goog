/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/postal v0/index.d.ts:
/**
 * @record
 * @struct
 */
function IConfiguration() {}
 /** @type {string} */
IConfiguration.prototype.SYSTEM_CHANNEL;
 /** @type {string} */
IConfiguration.prototype.DEFAULT_CHANNEL;
 /** @type {?} */
IConfiguration.prototype.resolver;
/**
 * @record
 * @struct
 */
function ISubscriptionDefinition() {}

/**
 * @return {void}
 */
ISubscriptionDefinition.prototype.unsubscribe = function() {};

/**
 * @param {function(?, !IEnvelope): void} callback
 * @return {void}
 */
ISubscriptionDefinition.prototype.subscribe = function(callback) {};

/**
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.defer = function() {};

/**
 * @param {number} maxCalls
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.disposeAfter = function(maxCalls) {};

/**
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.distinctUntilChanged = function() {};

/**
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.once = function() {};

/**
 * @param {!Function} predicate
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.withConstraint = function(predicate) {};

/**
 * @param {!Array<!Function>} predicates
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.withConstraints = function(predicates) {};

/**
 * @param {?} context
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.withContext = function(context) {};

/**
 * @param {number} milliseconds
 * @param {boolean} immediate
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.withDebounce = function(milliseconds, immediate) {};

/**
 * @param {number} milliseconds
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.withDelay = function(milliseconds) {};

/**
 * @param {number} milliseconds
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.withThrottle = function(milliseconds) {};
/**
 * @record
 * @struct
 */
function IEnvelope() {}
 /** @type {string} */
IEnvelope.prototype.topic;
 /** @type {?} */
IEnvelope.prototype.data;
 /** @type {string} */
IEnvelope.prototype.channel;
 /** @type {string} */
IEnvelope.prototype.timeStamp;
/**
 * @record
 * @struct
 */
function IChannelDefinition() {}
 /** @type {string} */
IChannelDefinition.prototype.channel;

/**
 * @param {string} topic
 * @param {function(?, !IEnvelope): void=} callback
 * @return {!ISubscriptionDefinition}
 */
IChannelDefinition.prototype.subscribe = function(topic, callback) {};

/**
 * @param {string|!IEnvelope} topic_or_envelope
 * @param {?=} data
 * @return {void}
 */
IChannelDefinition.prototype.publish = function(topic_or_envelope, data) {};
/**
 * @record
 * @struct
 */
function IPostalUtils() {}

/**
 * @param {string} channel
 * @param {?} tpc
 * @return {?}
 */
IPostalUtils.prototype.getSubscribersFor = function(channel, tpc) {};

/**
 * @return {void}
 */
IPostalUtils.prototype.reset = function() {};
/**
 * @record
 * @struct
 */
function IPostal() {}
 /** @type {!IPostalUtils} */
IPostal.prototype.utils;
 /** @type {!IConfiguration} */
IPostal.prototype.configuration;

/**
 * @param {string=} name
 * @return {!IChannelDefinition}
 */
IPostal.prototype.channel = function(name) {};

/**
 * @param {(!IEnvelope|!Array<!IEnvelope>)} sources
 * @param {(!IEnvelope|!Array<!IEnvelope>)} destinations
 * @return {!Array<!ISubscriptionDefinition>}
 */
IPostal.prototype.linkChannels = function(sources, destinations) {};
 /** @type {!IPostal} */
var postal;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "postal"
/** @const */
tsickle_declare_module.postal = {};
 /** @type {!IPostal} */
tsickle_declare_module.postal.postal;

/* TODO: ExportAssignment in tsickle_declare_module.postal */
