/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/xmlbuilder/index.d.ts:

/* TODO: ExportAssignment in  */
/**
 * @constructor
 * @struct
 */
function XMLDocType() {}

/**
 * @return {!XMLDocType}
 */
XMLDocType.prototype.clone = function() {};

/**
 * @param {string} name
 * @param {!Object=} value
 * @return {!XMLDocType}
 */
XMLDocType.prototype.element = function(name, value) {};

/**
 * @param {string} elementName
 * @param {string} attributeName
 * @param {string} attributeType
 * @param {string=} defaultValueType
 * @param {?=} defaultValue
 * @return {!XMLDocType}
 */
XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {};

/**
 * @param {string} name
 * @param {?} value
 * @return {!XMLDocType}
 */
XMLDocType.prototype.entity = function(name, value) {};

/**
 * @param {string} name
 * @param {?} value
 * @return {!XMLDocType}
 */
XMLDocType.prototype.pEntity = function(name, value) {};

/**
 * @param {string} name
 * @param {?} value
 * @return {!XMLDocType}
 */
XMLDocType.prototype.notation = function(name, value) {};

/**
 * @param {string} value
 * @return {!XMLDocType}
 */
XMLDocType.prototype.cdata = function(value) {};

/**
 * @param {string} value
 * @return {!XMLDocType}
 */
XMLDocType.prototype.comment = function(value) {};

/**
 * @param {string} target
 * @param {?} value
 * @return {!XMLDocType}
 */
XMLDocType.prototype.instruction = function(target, value) {};

/**
 * @return {!XMLDocType}
 */
XMLDocType.prototype.root = function() {};

/**
 * @return {?}
 */
XMLDocType.prototype.document = function() {};

/**
 * @param {!Object=} options
 * @param {!Number=} level
 * @return {string}
 */
XMLDocType.prototype.toString = function(options, level) {};

/**
 * @param {string} name
 * @param {!Object=} value
 * @return {!XMLDocType}
 */
XMLDocType.prototype.ele = function(name, value) {};

/**
 * @param {string} elementName
 * @param {string} attributeName
 * @param {string} attributeType
 * @param {string=} defaultValueType
 * @param {?=} defaultValue
 * @return {!XMLDocType}
 */
XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {};

/**
 * @param {string} name
 * @param {?} value
 * @return {!XMLDocType}
 */
XMLDocType.prototype.ent = function(name, value) {};

/**
 * @param {string} name
 * @param {?} value
 * @return {!XMLDocType}
 */
XMLDocType.prototype.pent = function(name, value) {};

/**
 * @param {string} name
 * @param {?} value
 * @return {!XMLDocType}
 */
XMLDocType.prototype.not = function(name, value) {};

/**
 * @param {string} value
 * @return {!XMLDocType}
 */
XMLDocType.prototype.dat = function(value) {};

/**
 * @param {string} value
 * @return {!XMLDocType}
 */
XMLDocType.prototype.com = function(value) {};

/**
 * @param {string} target
 * @param {?} value
 * @return {!XMLDocType}
 */
XMLDocType.prototype.ins = function(target, value) {};

/**
 * @return {!XMLDocType}
 */
XMLDocType.prototype.up = function() {};

/**
 * @return {?}
 */
XMLDocType.prototype.doc = function() {};
/**
 * @constructor
 * @struct
 */
function XMLElementOrXMLNode() {}

/**
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.clone = function() {};

/**
 * @param {?} name
 * @param {?=} value
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.attribute = function(name, value) {};

/**
 * @param {?} name
 * @param {?=} value
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.att = function(name, value) {};

/**
 * @param {string} name
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.removeAttribute = function(name) {};

/**
 * @param {string|!Array<?>|!Object} target_or_array_or_obj
 * @param {?=} value
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.instruction = function(target_or_array_or_obj, value) {};

/**
 * @param {string|!Array<?>|!Object} target_or_array_or_obj
 * @param {?=} value
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.ins = function(target_or_array_or_obj, value) {};

/**
 * @param {?} name
 * @param {?=} value
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.a = function(name, value) {};

/**
 * @param {string|!Array<?>|!Object} target_or_array_or_obj
 * @param {?=} value
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.i = function(target_or_array_or_obj, value) {};

/**
 * @param {!Object=} options
 * @param {!Number=} level
 * @return {string}
 */
XMLElementOrXMLNode.prototype.toString = function(options, level) {};

/**
 * @param {?} name
 * @param {!Object=} attributes
 * @param {?=} text
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.element = function(name, attributes, text) {};

/**
 * @param {?} name
 * @param {!Object=} attributes
 * @param {?=} text
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.ele = function(name, attributes, text) {};

/**
 * @param {?} name
 * @param {!Object=} attributes
 * @param {?=} text
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.insertBefore = function(name, attributes, text) {};

/**
 * @param {?} name
 * @param {!Object=} attributes
 * @param {?=} text
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.insertAfter = function(name, attributes, text) {};

/**
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.remove = function() {};

/**
 * @param {?} name
 * @param {!Object=} attributes
 * @param {?=} text
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.node = function(name, attributes, text) {};

/**
 * @param {string} value
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.text = function(value) {};

/**
 * @param {string} value
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.cdata = function(value) {};

/**
 * @param {string} value
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.comment = function(value) {};

/**
 * @param {string} value
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.raw = function(value) {};

/**
 * @param {string} version
 * @param {string} encoding
 * @param {boolean} standalone
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.declaration = function(version, encoding, standalone) {};

/**
 * @param {string} pubID
 * @param {string} sysID
 * @return {!XMLDocType}
 */
XMLElementOrXMLNode.prototype.doctype = function(pubID, sysID) {};

/**
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.up = function() {};

/**
 * @param {!XMLElementOrXMLNode} input
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.importDocument = function(input) {};

/**
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.root = function() {};

/**
 * @return {?}
 */
XMLElementOrXMLNode.prototype.document = function() {};

/**
 * @param {!Object=} options
 * @return {string}
 */
XMLElementOrXMLNode.prototype.end = function(options) {};

/**
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.prev = function() {};

/**
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.next = function() {};

/**
 * @param {?} name
 * @param {!Object=} attributes
 * @param {?=} text
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.nod = function(name, attributes, text) {};

/**
 * @param {string} value
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.txt = function(value) {};

/**
 * @param {string} value
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.dat = function(value) {};

/**
 * @param {string} value
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.com = function(value) {};

/**
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.doc = function() {};

/**
 * @param {string} version
 * @param {string} encoding
 * @param {boolean} standalone
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.dec = function(version, encoding, standalone) {};

/**
 * @param {string} pubID
 * @param {string} sysID
 * @return {!XMLDocType}
 */
XMLElementOrXMLNode.prototype.dtd = function(pubID, sysID) {};

/**
 * @param {?} name
 * @param {!Object=} attributes
 * @param {?=} text
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.e = function(name, attributes, text) {};

/**
 * @param {?} name
 * @param {!Object=} attributes
 * @param {?=} text
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.n = function(name, attributes, text) {};

/**
 * @param {string} value
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.t = function(value) {};

/**
 * @param {string} value
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.d = function(value) {};

/**
 * @param {string} value
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.c = function(value) {};

/**
 * @param {string} value
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.r = function(value) {};

/**
 * @return {!XMLElementOrXMLNode}
 */
XMLElementOrXMLNode.prototype.u = function() {};
/** @const */
var xmlbuilder = {};

/**
 * @param {(string|!Object<string,!Object>)} nameOrObjSpec
 * @param {!Object=} xmldec
 * @param {?=} doctype
 * @param {!Object=} options
 * @return {!XMLElementOrXMLNode}
 */
xmlbuilder.create = function(nameOrObjSpec, xmldec, doctype, options) {};
