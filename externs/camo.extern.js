/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/camo/index.d.ts:
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "camo"
/** @const */
tsickle_declare_module.camo = {};

/**
 * Connect function
 * 
 * @export
 * @param {string} uri
 * @return {!Promise<?>}
 */
tsickle_declare_module.camo.connect = function(uri) {};

/** @typedef {(Type|!Array<Type>)} */
tsickle_declare_module.camo.TypeOrArrayOfType;

/** @typedef {(!StringConstructor|!Array<!StringConstructor>|!NumberConstructor|!Array<!NumberConstructor>|!BooleanConstructor|!Array<!BooleanConstructor>|!ArrayBufferConstructor|!Array<!ArrayBufferConstructor>|!DateConstructor|!Array<!DateConstructor>|!ObjectConstructor|!Array<!ObjectConstructor>|!ArrayConstructor|!Array<!ArrayConstructor>)} */
tsickle_declare_module.camo.SchemaTypeConstructor;

/** @typedef {(string|number|boolean|!Object|!Date|!Array<(string|number|boolean|!Object|!Date)>)} */
tsickle_declare_module.camo.SchemaType;
/**
 * @record
 * @struct
 */
tsickle_declare_module.camo.SchemaTypeOptions = function() {};
 /** @type {(!StringConstructor|!Array<!StringConstructor>|!NumberConstructor|!Array<!NumberConstructor>|!BooleanConstructor|!Array<!BooleanConstructor>|!ArrayBufferConstructor|!Array<!ArrayBufferConstructor>|!DateConstructor|!Array<!DateConstructor>|!ObjectConstructor|!Array<!ObjectConstructor>|!ArrayConstructor|!Array<!ArrayConstructor>)} */
tsickle_declare_module.camo.SchemaTypeOptions.prototype.type;
 /** @type {Type} */
tsickle_declare_module.camo.SchemaTypeOptions.prototype.default;
 /** @type {number} */
tsickle_declare_module.camo.SchemaTypeOptions.prototype.min;
 /** @type {number} */
tsickle_declare_module.camo.SchemaTypeOptions.prototype.max;
 /** @type {!Array<Type>} */
tsickle_declare_module.camo.SchemaTypeOptions.prototype.choices;
 /** @type {!RegExp} */
tsickle_declare_module.camo.SchemaTypeOptions.prototype.match;
 /** @type {boolean} */
tsickle_declare_module.camo.SchemaTypeOptions.prototype.unique;
 /** @type {boolean} */
tsickle_declare_module.camo.SchemaTypeOptions.prototype.required;

/**
 * Validation function.
 * 
 * @param {Type} value
 * @return {boolean}
 */
tsickle_declare_module.camo.SchemaTypeOptions.prototype.validate = function(value) {};

/** @typedef {(!StringConstructor|!Array<!StringConstructor>|!NumberConstructor|!Array<!NumberConstructor>|!BooleanConstructor|!Array<!BooleanConstructor>|!ArrayBufferConstructor|!Array<!ArrayBufferConstructor>|!DateConstructor|!Array<!DateConstructor>|!ObjectConstructor|!Array<!ObjectConstructor>|!ArrayConstructor|!Array<!ArrayConstructor>|!SchemaTypeOptions<(string|number|boolean|!Object|!Date|!Array<(string|number|boolean|!Object|!Date)>)>)} */
tsickle_declare_module.camo.SchemaTypeExtended;
/**
 * @record
 * @struct
 */
tsickle_declare_module.camo.DocumentSchema = function() {};

/* TODO: IndexSignature: tsickle_declare_module.camo */
 /** @type {string} */
tsickle_declare_module.camo.DocumentSchema.prototype._id;
/**
 * @record
 * @struct
 */
tsickle_declare_module.camo.FindOneAndUpdateOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.camo.FindOneAndUpdateOptions.prototype.upsert;
/**
 * @record
 * @struct
 */
tsickle_declare_module.camo.FindOneOptions = function() {};
 /** @type {(boolean|!Array<string>)} */
tsickle_declare_module.camo.FindOneOptions.prototype.populate;
/**
 * @record
 * @struct
 */
tsickle_declare_module.camo.FindOptions = function() {};
 /** @type {(boolean|!Array<string>)} */
tsickle_declare_module.camo.FindOptions.prototype.populate;
 /** @type {(string|!Array<string>)} */
tsickle_declare_module.camo.FindOptions.prototype.sort;
 /** @type {number} */
tsickle_declare_module.camo.FindOptions.prototype.limit;
 /** @type {number} */
tsickle_declare_module.camo.FindOptions.prototype.skip;
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.camo.Document = function() {};

/* TODO: IndexSignature: tsickle_declare_module.camo */

/**
 * Static method to define the collection name.
 * 
 * @protected
 * @return {string}
 */
tsickle_declare_module.camo.Document.collectionName = function() {};

/**
 * Sets the schema (to be used on the constructor).
 * 
 * @protected
 * @template Schema
 * @param {Schema} schema
 * @return {void}
 */
tsickle_declare_module.camo.Document.prototype.schema = function(schema) {};

/**
 * Creates a camo document instance.
 * 
 * @template StaticSchema
 * @param {StaticSchema} schema
 * @return {!Document<StaticSchema>}
 */
tsickle_declare_module.camo.Document.create = function(schema) {};

/**
 * Saves the document instance to the database.
 * 
 * @return {!Promise<Schema>}
 */
tsickle_declare_module.camo.Document.prototype.save = function() {};

/**
 * Return the first document found, even if multiple documents match the query.
 * 
 * @template StaticSchema
 * @param {?} query
 * @param {!FindOneOptions=} options
 * @return {!Promise<StaticSchema>}
 */
tsickle_declare_module.camo.Document.findOne = function(query, options) {};

/**
 * Return all documents matching the query.
 * 
 * @template StaticSchema
 * @param {?} query
 * @param {!FindOptions=} options
 * @return {!Promise<!Array<StaticSchema>>}
 */
tsickle_declare_module.camo.Document.find = function(query, options) {};

/**
 * Find and update (or insert) a document in one atomic operation (atomic for MongoDB only).
 * 
 * @template StaticSchema
 * @param {?} query
 * @param {StaticSchema} values
 * @param {!FindOneAndUpdateOptions=} options
 * @return {!Promise<StaticSchema>}
 */
tsickle_declare_module.camo.Document.findOneAndUpdate = function(query, values, options) {};

/**
 * Removes documents from the database.
 * Should only be used on an instantiated document with a valid id.
 * 
 * @return {!Promise<number>}
 */
tsickle_declare_module.camo.Document.prototype.delete = function() {};

/**
 * Removes the first document found, even if multiple documents match the query.
 * 
 * @param {?} query
 * @return {!Promise<number>}
 */
tsickle_declare_module.camo.Document.deleteOne = function(query) {};

/**
 * Removes all documents matching the query.
 * 
 * @param {?} query
 * @return {!Promise<number>}
 */
tsickle_declare_module.camo.Document.deleteMany = function(query) {};

/**
 * Find the first document and delete it.
 * 
 * @param {?} query
 * @param {?=} options
 * @return {!Promise<number>}
 */
tsickle_declare_module.camo.Document.findOneAndDelete = function(query, options) {};

/**
 * Number of matching documents without retrieving all the data.
 * 
 * @param {?} query
 * @return {!Promise<number>}
 */
tsickle_declare_module.camo.Document.count = function(query) {};

/**
 * pre-validate hook.
 * 
 * @protected
 * @return {!Promise<?>}
 */
tsickle_declare_module.camo.Document.prototype.preValidate = function() {};

/**
 * post-validate hook.
 * 
 * @protected
 * @return {!Promise<?>}
 */
tsickle_declare_module.camo.Document.prototype.postValidate = function() {};

/**
 * pre-save hook.
 * 
 * @protected
 * @return {!Promise<?>}
 */
tsickle_declare_module.camo.Document.prototype.preSave = function() {};

/**
 * post-save hook.
 * 
 * @protected
 * @return {!Promise<?>}
 */
tsickle_declare_module.camo.Document.prototype.postSave = function() {};

/**
 * pre-delete hook.
 * 
 * @protected
 * @return {!Promise<?>}
 */
tsickle_declare_module.camo.Document.prototype.preDelete = function() {};

/**
 * post-delete hook.
 * 
 * @protected
 * @return {!Promise<?>}
 */
tsickle_declare_module.camo.Document.prototype.postDelete = function() {};

/**
 * Serialized document to just the data, which includes nested and referenced data.
 * 
 * @return {?}
 */
tsickle_declare_module.camo.Document.prototype.toJSON = function() {};
