/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/auth0-angular/index.d.ts:
/** @const */
var auth0 = {};
/** @const */
auth0.angular = {};
/**
 * @record
 * @struct
 */
auth0.angular.IAuth0ClientOptions = function() {};
 /** @type {string} */
auth0.angular.IAuth0ClientOptions.prototype.loginUrl;
 /** @type {string} */
auth0.angular.IAuth0ClientOptions.prototype.loginState;
 /** @type {string} */
auth0.angular.IAuth0ClientOptions.prototype.clientID;
 /** @type {string} */
auth0.angular.IAuth0ClientOptions.prototype.domain;
 /** @type {boolean} */
auth0.angular.IAuth0ClientOptions.prototype.sso;
/**
 * @record
 * @struct
 */
auth0.angular.ITokenOptions = function() {};
 /** @type {string} */
auth0.angular.ITokenOptions.prototype.targetClientId;
 /** @type {string} */
auth0.angular.ITokenOptions.prototype.api;
/**
 * @record
 * @struct
 */
auth0.angular.IAuth0Options = function() {};
 /** @type {string} */
auth0.angular.IAuth0Options.prototype.connection;
 /** @type {string} */
auth0.angular.IAuth0Options.prototype.username;
 /** @type {string} */
auth0.angular.IAuth0Options.prototype.email;
/**
 * @record
 * @struct
 */
auth0.angular.ISuccessCallback = function() {};

/* TODO: CallSignature: auth0.angular */
/**
 * @record
 * @struct
 */
auth0.angular.IErrorCallback = function() {};

/* TODO: CallSignature: auth0.angular */
/**
 * @record
 * @struct
 */
auth0.angular.IAuth0Service = function() {};
 /** @type {string} */
auth0.angular.IAuth0Service.prototype.accessToken;
 /** @type {string} */
auth0.angular.IAuth0Service.prototype.idToken;
 /** @type {?} */
auth0.angular.IAuth0Service.prototype.profile;
 /** @type {boolean} */
auth0.angular.IAuth0Service.prototype.isAuthenticated;
 /** @type {?} */
auth0.angular.IAuth0Service.prototype.config;

/**
 * Hooks to internal Angular events so that a user will be redirected to the login page if trying to visit a restricted resource
 * @return {void}
 */
auth0.angular.IAuth0Service.prototype.hookEvents = function() {};

/**
 * Performs a token delegation request exchanging th ecurrent token for another one.
 * @param {!auth0.angular.ITokenOptions=} options Token options
 * @return {!angular.IPromise<?>}
 */
auth0.angular.IAuth0Service.prototype.getToken = function(options) {};

/**
 * Refreshes the Id token
 * @param {string} refreshToken Refresh token to use when renewing
 * @return {!angular.IPromise<?>}
 */
auth0.angular.IAuth0Service.prototype.refreshIdToken = function(refreshToken) {};

/**
 * Renews the Id Token with the same scopes as the original token
 * @param {string} id_token Id Token
 * @return {!angular.IPromise<?>}
 */
auth0.angular.IAuth0Service.prototype.renewIdToken = function(id_token) {};

/**
 * Logs in a user, returning tokens and profile information
 * @param {!auth0.angular.IAuth0Options=} options Options to bypass displaying the Lock UI
 * @param {!auth0.angular.ISuccessCallback=} successCallback Callback on successful login
 * @param {!auth0.angular.IErrorCallback=} errorCallback Callback on failed login
 * @return {void}
 */
auth0.angular.IAuth0Service.prototype.signin = function(options, successCallback, errorCallback) {};

/**
 * Displays Lock in signup mode, and logs the user in immediately after a successful signup.
 * @param {!auth0.angular.IAuth0Options=} options Options to bypass displaying the Lock UI
 * @param {!auth0.angular.ISuccessCallback=} successCallback Callback on successful signup
 * @param {!auth0.angular.IErrorCallback=} errorCallback Callback on failed signup
 * @return {void}
 */
auth0.angular.IAuth0Service.prototype.signup = function(options, successCallback, errorCallback) {};

/**
 * Performs the "forgot your password" flow.
 * @param {!auth0.angular.IAuth0Options=} options Options to bypass displaying the Lock UI
 * @param {!auth0.angular.ISuccessCallback=} successCallback Callback on successful reset
 * @param {!auth0.angular.IErrorCallback=} errorCallback Callback on failed reset
 * @return {void}
 */
auth0.angular.IAuth0Service.prototype.reset = function(options, successCallback, errorCallback) {};

/**
 * Validates the user
 * @param {!auth0.angular.IAuth0Options} options Options to bypass displaying the Lock UI
 * @param {!auth0.angular.ISuccessCallback=} successCallback Callback on successful validation
 * @param {!auth0.angular.IErrorCallback=} errorCallback Callback on failed validation
 * @return {void}
 */
auth0.angular.IAuth0Service.prototype.validateUser = function(options, successCallback, errorCallback) {};

/**
 * Logs the user out locally by deleting their token from local storage.
 * @return {void}
 */
auth0.angular.IAuth0Service.prototype.signout = function() {};

/**
 * Reauthenticates the user by using a stored profile and token without going through the login flow.
 * @param {?=} profile Profile of the user
 * @param {string=} idToken Id token
 * @param {string=} accessToken Access token
 * @param {?=} state State
 * @param {boolean=} refreshToken Flag to indicate refreshing the token
 * @return {!angular.IPromise<?>}
 */
auth0.angular.IAuth0Service.prototype.authenticate = function(profile, idToken, accessToken, state, refreshToken) {};

/**
 * Gets the user's profile
 * @param {string=} idToken Id token
 * @return {!angular.IPromise<?>}
 */
auth0.angular.IAuth0Service.prototype.getProfile = function(idToken) {};
/**
 * @record
 * @struct
 */
auth0.angular.IAuth0ServiceProvider = function() {};

/**
 * Configures the auth service
 * @param {!auth0.angular.IAuth0ClientOptions} options Client options passed into Auth0
 * @return {void}
 */
auth0.angular.IAuth0ServiceProvider.prototype.init = function(options) {};

/**
 * @param {string} event Name of the event to handle.
 * @param {function(!Array<?>): ?} handler Event handler
 * @return {void}
 */
auth0.angular.IAuth0ServiceProvider.prototype.on = function(event, handler) {};
