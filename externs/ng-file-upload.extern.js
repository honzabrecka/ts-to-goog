/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/ng-file-upload/index.d.ts:

/* TODO: ImportDeclaration in  */
 /** @type {string} */
var angularFileUploadDefaultExport;

/* TODO: ExportAssignment in  */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "angular"
/** @const */
tsickle_declare_module.angular.angularFileUpload = {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.angularFileUpload.ImageDimensions = function() {};
 /** @type {number} */
tsickle_declare_module.angular.angularFileUpload.ImageDimensions.prototype.height;
 /** @type {number} */
tsickle_declare_module.angular.angularFileUpload.ImageDimensions.prototype.width;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.angularFileUpload.FileUploadOptions = function() {};
 /** @type {string} */
tsickle_declare_module.angular.angularFileUpload.FileUploadOptions.prototype.ngfAccept;
 /** @type {boolean} */
tsickle_declare_module.angular.angularFileUpload.FileUploadOptions.prototype.ngfAllowDir;
 /** @type {boolean} */
tsickle_declare_module.angular.angularFileUpload.FileUploadOptions.prototype.ngfEnableFirefoxPaste;
 /** @type {boolean} */
tsickle_declare_module.angular.angularFileUpload.FileUploadOptions.prototype.ngfHideOnDropNotAvailable;
 /** @type {(string|number)} */
tsickle_declare_module.angular.angularFileUpload.FileUploadOptions.prototype.ngfMinDuration;
 /** @type {(string|number)} */
tsickle_declare_module.angular.angularFileUpload.FileUploadOptions.prototype.ngfMinSize;
 /** @type {(string|number)} */
tsickle_declare_module.angular.angularFileUpload.FileUploadOptions.prototype.ngfMinRatio;
 /** @type {(string|number)} */
tsickle_declare_module.angular.angularFileUpload.FileUploadOptions.prototype.ngfMaxDuration;
 /** @type {number} */
tsickle_declare_module.angular.angularFileUpload.FileUploadOptions.prototype.ngfMaxFiles;
 /** @type {(string|number)} */
tsickle_declare_module.angular.angularFileUpload.FileUploadOptions.prototype.ngfMaxSize;
 /** @type {(string|number)} */
tsickle_declare_module.angular.angularFileUpload.FileUploadOptions.prototype.ngfMaxTotalSize;
 /** @type {boolean} */
tsickle_declare_module.angular.angularFileUpload.FileUploadOptions.prototype.ngfMultiple;
 /** @type {string} */
tsickle_declare_module.angular.angularFileUpload.FileUploadOptions.prototype.ngfRatio;
 /** @type {boolean} */
tsickle_declare_module.angular.angularFileUpload.FileUploadOptions.prototype.ngfStopPropagation;
 /** @type {boolean} */
tsickle_declare_module.angular.angularFileUpload.FileUploadOptions.prototype.ngfValidateForce;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.angularFileUpload.ResizeIfFunction = function() {};

/* TODO: CallSignature: tsickle_declare_module.angular.angularFileUpload */
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.angularFileUpload.FileResizeOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.angular.angularFileUpload.FileResizeOptions.prototype.centerCrop;
 /** @type {number} */
tsickle_declare_module.angular.angularFileUpload.FileResizeOptions.prototype.height;
 /** @type {string} */
tsickle_declare_module.angular.angularFileUpload.FileResizeOptions.prototype.pattern;
 /** @type {(string|number)} */
tsickle_declare_module.angular.angularFileUpload.FileResizeOptions.prototype.ratio;
 /** @type {!angularFileUpload.ResizeIfFunction} */
tsickle_declare_module.angular.angularFileUpload.FileResizeOptions.prototype.resizeIf;
 /** @type {boolean} */
tsickle_declare_module.angular.angularFileUpload.FileResizeOptions.prototype.restoreExif;
 /** @type {number} */
tsickle_declare_module.angular.angularFileUpload.FileResizeOptions.prototype.quality;
 /** @type {string} */
tsickle_declare_module.angular.angularFileUpload.FileResizeOptions.prototype.type;
 /** @type {number} */
tsickle_declare_module.angular.angularFileUpload.FileResizeOptions.prototype.width;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.angularFileUpload.IUploadService = function() {};

/**
 * Convert a single file or array of files to a single or array of
 * base64 data url representation of the file(s).
 * Could be used to send file in base64 format inside json to the databases
 * 
 * @param {(!File|!Array<!File>)} files
 * @return {!angular.IPromise<(string|!Array<string>)>}
 */
tsickle_declare_module.angular.angularFileUpload.IUploadService.prototype.base64DataUrl = function(files) {};

/**
 * Convert the file to blob url object or base64 data url based on boolean disallowObjectUrl value
 * 
 * @param {!File} file
 * @param {boolean=} disallowObjectUrl
 * @return {!angular.IPromise<(string|!Blob)>}
 */
tsickle_declare_module.angular.angularFileUpload.IUploadService.prototype.dataUrl = function(file, disallowObjectUrl) {};

/**
 * Alternative way of uploading, send the file binary with the file's content-type.
 * Could be used to upload files to CouchDB, imgur, etc... html5 FileReader is needed.
 * This is equivalent to angular $http() but allow you to listen to the progress event for HTML5 browsers.
 * 
 * @template T
 * @param {!angular.IRequestConfig} config
 * @return {!angularFileUpload.IUploadPromise<T>}
 */
tsickle_declare_module.angular.angularFileUpload.IUploadService.prototype.http = function(config) {};

/**
 * Get image file dimensions
 * 
 * @param {!File} file
 * @return {!angular.IPromise<!angularFileUpload.ImageDimensions>}
 */
tsickle_declare_module.angular.angularFileUpload.IUploadService.prototype.imageDimensions = function(file) {};

/**
 * Returns boolean showing if image resize is supported by this browser
 * 
 * @return {boolean}
 */
tsickle_declare_module.angular.angularFileUpload.IUploadService.prototype.isResizeSupported = function() {};

/**
 * Returns boolean showing if resumable upload is supported by this browser
 * 
 * @return {boolean}
 */
tsickle_declare_module.angular.angularFileUpload.IUploadService.prototype.isResumeSupported = function() {};

/**
 * Returns true if there is an upload in progress. Can be used to prompt user before closing browser tab
 * 
 * @return {boolean}
 */
tsickle_declare_module.angular.angularFileUpload.IUploadService.prototype.isUploadInProgress = function() {};

/**
 * Converts the value to json to send data as json string. Same as angular.toJson(obj)
 * 
 * @param {!Object} obj
 * @return {string}
 */
tsickle_declare_module.angular.angularFileUpload.IUploadService.prototype.json = function(obj) {};

/**
 * Converts the object to a Blob object with application/json content type
 * for jsob byte streaming support
 * 
 * @param {!Object} obj
 * @return {!Blob}
 */
tsickle_declare_module.angular.angularFileUpload.IUploadService.prototype.jsonBlob = function(obj) {};

/**
 * Returns a file which will be uploaded with the newName instead of original file name
 * 
 * @param {!File} file
 * @param {string} newName
 * @return {!Blob}
 */
tsickle_declare_module.angular.angularFileUpload.IUploadService.prototype.rename = function(file, newName) {};

/**
 * Resizes an image. Returns a promise
 * 
 * @param {!File} file
 * @param {!angularFileUpload.FileResizeOptions} options
 * @return {!angular.IPromise<!File>}
 */
tsickle_declare_module.angular.angularFileUpload.IUploadService.prototype.resize = function(file, options) {};

/**
 * Set the default values for ngf-select and ngf-drop directives
 * 
 * @param {!angularFileUpload.FileUploadOptions} defaultFileUploadOptions
 * @return {void}
 */
tsickle_declare_module.angular.angularFileUpload.IUploadService.prototype.setDefaults = function(defaultFileUploadOptions) {};

/**
 * Upload a file. Returns a Promise,
 * 
 * @template T
 * @param {!angularFileUpload.IFileUploadConfigFile} config
 * @return {!angularFileUpload.IUploadPromise<T>}
 */
tsickle_declare_module.angular.angularFileUpload.IUploadService.prototype.upload = function(config) {};
/**
 * @extends {angular.IHttpPromise}
 * @record
 * @struct
 */
tsickle_declare_module.angular.angularFileUpload.IUploadPromise = function() {};

/**
 * Cancel/abort the upload in progress.
 * 
 * @return {!angularFileUpload.IUploadPromise}
 */
tsickle_declare_module.angular.angularFileUpload.IUploadPromise.prototype.abort = function() {};

/**
 * @param {function(!angularFileUpload.IFileProgressEvent): void} callback
 * @return {!angularFileUpload.IUploadPromise}
 */
tsickle_declare_module.angular.angularFileUpload.IUploadPromise.prototype.progress = function(callback) {};

/**
 * Access or attach event listeners to the underlying XMLHttpRequest
 * 
 * @param {!angular.IHttpPromiseCallback<T>} callback
 * @return {!angularFileUpload.IUploadPromise}
 */
tsickle_declare_module.angular.angularFileUpload.IUploadPromise.prototype.xhr = function(callback) {};
/**
 * @extends {angular.IRequestConfig}
 * @record
 * @struct
 */
tsickle_declare_module.angular.angularFileUpload.IFileUploadConfigFile = function() {};
 /** @type {?} */
tsickle_declare_module.angular.angularFileUpload.IFileUploadConfigFile.prototype.data;
 /** @type {string} */
tsickle_declare_module.angular.angularFileUpload.IFileUploadConfigFile.prototype.url;
 /** @type {string} */
tsickle_declare_module.angular.angularFileUpload.IFileUploadConfigFile.prototype.objectKey;
 /** @type {string} */
tsickle_declare_module.angular.angularFileUpload.IFileUploadConfigFile.prototype.arrayKey;
 /** @type {string} */
tsickle_declare_module.angular.angularFileUpload.IFileUploadConfigFile.prototype.resumeSizeUrl;
 /** @type {!Function} */
tsickle_declare_module.angular.angularFileUpload.IFileUploadConfigFile.prototype.resumeSizeResponseReader;
 /** @type {!Function} */
tsickle_declare_module.angular.angularFileUpload.IFileUploadConfigFile.prototype.resumeSize;
 /** @type {(string|number)} */
tsickle_declare_module.angular.angularFileUpload.IFileUploadConfigFile.prototype.resumeChunkSize;
 /** @type {boolean} */
tsickle_declare_module.angular.angularFileUpload.IFileUploadConfigFile.prototype.disableProgress;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.angularFileUpload.IFileProgressEvent = function() {};
 /** @type {!angularFileUpload.IFileUploadConfigFile} */
tsickle_declare_module.angular.angularFileUpload.IFileProgressEvent.prototype.config;
