/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/xsockets/index.d.ts:
/** @const */
var XSockets = {};

/**
 * @constructor
 * @struct
 * @param {string} url
 * @param {string=} subprotocol
 * @param {?=} settings
 */
XSockets.WebSocket = function(url, subprotocol, settings) {};
 /** @type {string} */
XSockets.WebSocket.prototype.id;

/**
 * @param {string} event
 * @param {function(?): void} handler
 * @param {function(!XSockets.ConfirmationArgument): void=} confirmation
 * @return {void}
 */
XSockets.WebSocket.prototype.on = function(event, handler, confirmation) {};

/**
 * @param {string} event
 * @param {function(?): void} handler
 * @param {function(!XSockets.ConfirmationArgument): void=} confirmation
 * @return {void}
 */
XSockets.WebSocket.prototype.one = function(event, handler, confirmation) {};

/**
 * @param {string} event
 * @param {number} times
 * @param {function(?): void} handler
 * @param {function(!XSockets.ConfirmationArgument): void=} confirmation
 * @return {void}
 */
XSockets.WebSocket.prototype.many = function(event, times, handler, confirmation) {};

/**
 * @param {string} event
 * @return {void}
 */
XSockets.WebSocket.prototype.unbind = function(event) {};

/**
 * @param {string} topic
 * @param {?} data
 * @return {void}
 */
XSockets.WebSocket.prototype.publish = function(topic, data) {};
/**
 * @record
 * @struct
 */
XSockets.ConfirmationArgument = function() {};
 /** @type {string} */
XSockets.ConfirmationArgument.prototype.event;
/** @const */
XSockets.Events = {};
 /** @type {string} */
XSockets.Events.close;
 /** @type {string} */
XSockets.Events.onBlob;
 /** @type {string} */
XSockets.Events.onError;
/** @const */
XSockets.Events.bindings = {};
 /** @type {string} */
XSockets.Events.bindings.completed;
 /** @type {string} */
XSockets.Events.open;
/** @const */
XSockets.Events.pubSub = {};
 /** @type {string} */
XSockets.Events.pubSub.subscribe;
 /** @type {string} */
XSockets.Events.pubSub.unsubscribe;
/** @const */
XSockets.Events.storage = {};
 /** @type {string} */
XSockets.Events.storage.get;
 /** @type {string} */
XSockets.Events.storage.getAll;
 /** @type {string} */
XSockets.Events.storage.remove;
 /** @type {string} */
XSockets.Events.storage.set;
