/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/sane/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ExportAssignment in  */

/**
 * @param {string} dir
 * @param {!sane.Options=} options
 * @return {!SaneWatcher}
 */
function sane(dir, options) {}
/**
 * @record
 * @struct
 */
sane.Options = function() {};
 /** @type {(string|!Array<string>)} */
sane.Options.prototype.glob;
 /** @type {boolean} */
sane.Options.prototype.poll;
 /** @type {boolean} */
sane.Options.prototype.watchman;
 /** @type {boolean} */
sane.Options.prototype.fsevents;
 /** @type {string} */
sane.Options.prototype.watcher;
 /** @type {boolean} */
sane.Options.prototype.dot;
 /** @type {(string|!RegExp|function(!Array<string>): boolean|!Array<(string|!RegExp|?)>)} */
sane.Options.prototype.ignored;
 /** @type {?} */
sane.FSEventsWatcher;
 /** @type {?} */
sane.NodeWatcher;
 /** @type {?} */
sane.PollWatcher;
 /** @type {?} */
sane.WatchmanWatcher;

/** @typedef {!SaneWatcher} */
sane.Watcher;

/** @typedef {(string|!RegExp|function(!Array<string>): boolean)} */
sane.AnymatchMatcher;

/**
 * @constructor
 * @struct
 * @param {string} dir
 * @param {!sane.Options=} options
 */
function SaneWatcher(dir, options) {}
 /** @type {!Array<string>} */
SaneWatcher.prototype.globs;
 /** @type {boolean} */
SaneWatcher.prototype.dot;
 /** @type {(string|!RegExp|function(!Array<string>): boolean|!Array<(string|!RegExp|?)>)} */
SaneWatcher.prototype.ignored;
 /** @type {boolean} */
SaneWatcher.prototype.hasIgnore;
 /** @type {string} */
SaneWatcher.prototype.root;

/**
 * @param {function(): void=} callback
 * @return {void}
 */
SaneWatcher.prototype.close = function(callback) {};

/**
 * @param {string} event
 * @param {function(): void|function(!Error): void|function(string, string, string, !Stats): void|function(string, string, !Stats): void|function(string, string): void} listener
 * @return {SaneWatcher}
 */
SaneWatcher.prototype.addListener = function(event, listener) {};

/**
 * @param {string} event
 * @param {function(): void|function(!Error): void|function(string, string, string, !Stats): void|function(string, string, !Stats): void|function(string, string): void} listener
 * @return {SaneWatcher}
 */
SaneWatcher.prototype.on = function(event, listener) {};

/**
 * @param {string} event
 * @param {function(): void|function(!Error): void|function(string, string, string, !Stats): void|function(string, string, !Stats): void|function(string, string): void} listener
 * @return {SaneWatcher}
 */
SaneWatcher.prototype.once = function(event, listener) {};

/**
 * @param {string} event
 * @param {function(): void|function(!Error): void|function(string, string, string, !Stats): void|function(string, string, !Stats): void|function(string, string): void} listener
 * @return {SaneWatcher}
 */
SaneWatcher.prototype.prependListener = function(event, listener) {};

/**
 * @param {string} event
 * @param {function(): void|function(!Error): void|function(string, string, string, !Stats): void|function(string, string, !Stats): void|function(string, string): void} listener
 * @return {SaneWatcher}
 */
SaneWatcher.prototype.prependOnceListener = function(event, listener) {};

/**
 * @param {string} event
 * @param {function(): void|function(!Error): void|function(string, string, string, !Stats): void|function(string, string, !Stats): void|function(string, string): void} listener
 * @return {SaneWatcher}
 */
SaneWatcher.prototype.removeListener = function(event, listener) {};

/**
 * @param {string=} event
 * @return {SaneWatcher}
 */
SaneWatcher.prototype.removeAllListeners = function(event) {};

/**
 * @param {string} event
 * @return {!Array<!Function>}
 */
SaneWatcher.prototype.listeners = function(event) {};

/**
 * @param {string} event
 * @param {!Error|string=} error_or_eventType_or_path
 * @param {string=} path_or_root
 * @param {string|!Stats=} root_or_stat
 * @param {!Stats=} stat
 * @return {boolean}
 */
SaneWatcher.prototype.emit = function(event, error_or_eventType_or_path, path_or_root, root_or_stat, stat) {};

/**
 * @return {!Array<string>}
 */
SaneWatcher.prototype.eventNames = function() {};

/**
 * @param {string} type
 * @return {number}
 */
SaneWatcher.prototype.listenerCount = function(type) {};

/** @typedef {string} */
var EventType;

/** @typedef {string} */
var AllEventType;
