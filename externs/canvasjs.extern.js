/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/canvasjs/index.d.ts:

/** @typedef {string} */
var DashType;
/** @const */
var CanvasJS = {};

/**
 * @constructor
 * @struct
 * Initializes a new instance of CanvasJS Chart.
 * @param {string} containerId the DOM ID of the location where the chart is to be rendered
 * @param {!CanvasJS.ChartOptions=} options the options used to render the chart
 */
CanvasJS.Chart = function(containerId, options) {};
 /** @type {!CanvasJS.ChartOptions} */
CanvasJS.Chart.prototype.options;
 /** @type {!CanvasJS.ChartTitle} */
CanvasJS.Chart.prototype.title;
 /** @type {!Array<!CanvasJS.ChartTitle>} */
CanvasJS.Chart.prototype.subtitles;
 /** @type {!CanvasJS.ChartToolTip} */
CanvasJS.Chart.prototype.toolTip;
 /** @type {!Array<!CanvasJS.ChartAxisX>} */
CanvasJS.Chart.prototype.axisX;
 /** @type {!Array<!CanvasJS.ChartAxisX>} */
CanvasJS.Chart.prototype.axisX2;
 /** @type {!Array<!CanvasJS.ChartAxisY>} */
CanvasJS.Chart.prototype.axisY;
 /** @type {!Array<!CanvasJS.ChartAxisY>} */
CanvasJS.Chart.prototype.axisY2;
 /** @type {!Array<!CanvasJS.ChartStrip>} */
CanvasJS.Chart.prototype.stripLines;
 /** @type {!Array<!CanvasJS.ChartDataSeries>} */
CanvasJS.Chart.prototype.data;

/**
 * Renders the chart.
 * @return {void}
 */
CanvasJS.Chart.prototype.render = function() {};

/**
 * Returns the specified property of Chart.
 * @param {string} propertyName Name of the property.
 * @return {?}
 */
CanvasJS.Chart.prototype.get = function(propertyName) {};

/**
 * Sets the specified property of Chart.
 * Notes:
 * 1. Chart should be rendered before you can use this method.
 * 2. Because the chart updates each time set is called by default,
 * it is recommended to disable auto update (set updateChart to false) till the last step if you have to set multiple properties.
 *  Otherwise it can affect performance because of repeated chart rendering. You can see an example below.
 * @param {string} propertyName Name of the property.
 * @param {!CanvasJS.ChartOptions} value value to be set on property.
 * @param {boolean=} updateChart When true, Updates the chart automatically after setting the value. Defaults to true.
 * @return {void}
 */
CanvasJS.Chart.prototype.set = function(propertyName, value, updateChart) {};

/**
 * Adds a new element of given type to the specified array. For example, it can be used to add new Axis to axisY array.
 * Notes:
 * 1. Chart should be rendered before you can use this method.
 * 2. Chart renders automatically after addTo() operation.
 * @param {string} propertyName Name of the property
 * @param {(!CanvasJS.ChartAxisXOptions|!CanvasJS.ChartAxisYOptions|!CanvasJS.ChartDataSeriesOptions)} options Option for the new element
 * @param {number=} index Index of the array where the new element is to be added. Defaults to the length (end) of array.
 * @param {boolean=} updateChart When true, Updates the chart automatically after setting the value. Defaults to true.
 * @return {void}
 */
CanvasJS.Chart.prototype.addTo = function(propertyName, options, index, updateChart) {};

/**
 * Export the chart as image (jpg / png).
 * @param {{format: string, toDataURL: boolean, fileName: string}} options Setting when export
 * @return {void}
 */
CanvasJS.Chart.prototype.exportChart = function(options) {};

/**
 * Prints the Chart.
 * Chart should be rendered before you can use this method.
 * @return {void}
 */
CanvasJS.Chart.prototype.print = function() {};

/**
 * Removes the chart references internally, thus making the chart eligible for garbage collection, in turn clearing up the memory.
 * Notes:
 * 1. On calling chart.destroy(), chart won’t be responsive unless new chart is created.
 * 2. chart.destroy() should be called before using the same variable to hold a newly allocated object/chart to prevent memory leaks.
 * @return {void}
 */
CanvasJS.Chart.prototype.destroy = function() {};

/**
 * Adds a new chart color set
 * @param {string} colorSetName name of the color set
 * @param {!Array<string>} colorSetArray array of colors.
 * @return {void}
 */
CanvasJS.addColorSet = function(colorSetName, colorSetArray) {};

/**
 * Adds a new culture info for your chart
 * @param {string} culture the name of the culture
 * @param {!CanvasJS.CultureInfo} info information used by this culture
 * @return {void}
 */
CanvasJS.addCultureInfo = function(culture, info) {};

/**
 * Formats number according to the given formatString(optional) & culture(optional).
 * @param {number} number Number to format.
 * @param {string=} formatString Default formatString is “#,##0.##” .
 * @param {string=} culture Default culture is “en”
 * @return {string}
 */
CanvasJS.formatNumber = function(number, formatString, culture) {};

/**
 * Formats date/timestamp according to the given formatString(optional) & culture(optional).
 * @param {(number|!Date)} date Date type or timestamp number.
 * @param {string=} formatString Default formatString is “DD MMM YYYY”.
 * @param {string=} culture Default culture is “en”.
 * @return {void}
 */
CanvasJS.formatDate = function(date, formatString, culture) {};
/**
 * @record
 * @struct
 */
CanvasJS.CultureInfo = function() {};
 /** @type {string} */
CanvasJS.CultureInfo.prototype.decimalSeparator;
 /** @type {string} */
CanvasJS.CultureInfo.prototype.digitGroupSeparator;
 /** @type {string} */
CanvasJS.CultureInfo.prototype.zoomText;
 /** @type {string} */
CanvasJS.CultureInfo.prototype.panText;
 /** @type {string} */
CanvasJS.CultureInfo.prototype.resetText;
 /** @type {string} */
CanvasJS.CultureInfo.prototype.savePNGText;
 /** @type {string} */
CanvasJS.CultureInfo.prototype.saveJPGText;
 /** @type {string} */
CanvasJS.CultureInfo.prototype.menuText;
 /** @type {!Array<string>} */
CanvasJS.CultureInfo.prototype.days;
 /** @type {!Array<string>} */
CanvasJS.CultureInfo.prototype.shortDays;
 /** @type {!Array<string>} */
CanvasJS.CultureInfo.prototype.months;
 /** @type {!Array<string>} */
CanvasJS.CultureInfo.prototype.shortMonths;
/**
 * @record
 * @struct
 */
CanvasJS.ChartOptions = function() {};
 /** @type {boolean} */
CanvasJS.ChartOptions.prototype.interactivityEnabled;
 /** @type {number} */
CanvasJS.ChartOptions.prototype.animationDuration;
 /** @type {boolean} */
CanvasJS.ChartOptions.prototype.animationEnabled;
 /** @type {string} */
CanvasJS.ChartOptions.prototype.exportFileName;
 /** @type {boolean} */
CanvasJS.ChartOptions.prototype.exportEnabled;
 /** @type {boolean} */
CanvasJS.ChartOptions.prototype.zoomEnabled;
 /** @type {string} */
CanvasJS.ChartOptions.prototype.theme;
 /** @type {string} */
CanvasJS.ChartOptions.prototype.backgroundColor;
 /** @type {string} */
CanvasJS.ChartOptions.prototype.colorSet;
 /** @type {string} */
CanvasJS.ChartOptions.prototype.culture;
 /** @type {number} */
CanvasJS.ChartOptions.prototype.width;
 /** @type {number} */
CanvasJS.ChartOptions.prototype.height;
 /** @type {number} */
CanvasJS.ChartOptions.prototype.dataPointMaxWidth;
 /** @type {!CanvasJS.ChartTitleOptions} */
CanvasJS.ChartOptions.prototype.title;
 /** @type {!CanvasJS.ChartLegendOptions} */
CanvasJS.ChartOptions.prototype.legend;
 /** @type {(!CanvasJS.ChartAxisXOptions|!Array<!CanvasJS.ChartAxisXOptions>)} */
CanvasJS.ChartOptions.prototype.axisX;
 /** @type {(!CanvasJS.ChartAxisXOptions|!Array<!CanvasJS.ChartAxisXOptions>)} */
CanvasJS.ChartOptions.prototype.axisX2;
 /** @type {(!CanvasJS.ChartAxisYOptions|!Array<!CanvasJS.ChartAxisYOptions>)} */
CanvasJS.ChartOptions.prototype.axisY;
 /** @type {(!CanvasJS.ChartAxisYOptions|!Array<!CanvasJS.ChartAxisYOptions>)} */
CanvasJS.ChartOptions.prototype.axisY2;
 /** @type {!CanvasJS.ChartToolTipOptions} */
CanvasJS.ChartOptions.prototype.toolTip;
 /** @type {!Array<!CanvasJS.ChartDataSeriesOptions>} */
CanvasJS.ChartOptions.prototype.data;
 /** @type {!Array<!CanvasJS.ChartTitleOptions>} */
CanvasJS.ChartOptions.prototype.subtitles;
/**
 * @record
 * @struct
 */
CanvasJS.ChartTitleOptions = function() {};
 /** @type {string} */
CanvasJS.ChartTitleOptions.prototype.text;
 /** @type {string} */
CanvasJS.ChartTitleOptions.prototype.verticalAlign;
 /** @type {string} */
CanvasJS.ChartTitleOptions.prototype.horizontalAlign;
 /** @type {number} */
CanvasJS.ChartTitleOptions.prototype.fontSize;
 /** @type {string} */
CanvasJS.ChartTitleOptions.prototype.fontFamily;
 /** @type {string} */
CanvasJS.ChartTitleOptions.prototype.fontWeight;
 /** @type {string} */
CanvasJS.ChartTitleOptions.prototype.fontColor;
 /** @type {string} */
CanvasJS.ChartTitleOptions.prototype.fontStyle;
 /** @type {number} */
CanvasJS.ChartTitleOptions.prototype.borderThickness;
 /** @type {number} */
CanvasJS.ChartTitleOptions.prototype.cornerRadius;
 /** @type {string} */
CanvasJS.ChartTitleOptions.prototype.borderColor;
 /** @type {string} */
CanvasJS.ChartTitleOptions.prototype.backgroundColor;
 /** @type {number} */
CanvasJS.ChartTitleOptions.prototype.margin;
 /** @type {number} */
CanvasJS.ChartTitleOptions.prototype.padding;
 /** @type {boolean} */
CanvasJS.ChartTitleOptions.prototype.wrap;
 /** @type {number} */
CanvasJS.ChartTitleOptions.prototype.maxWidth;
 /** @type {boolean} */
CanvasJS.ChartTitleOptions.prototype.dockInsidePlotArea;
/**
 * @extends {CanvasJS.ChartTitleOptions}
 * @record
 * @struct
 */
CanvasJS.ChartTitle = function() {};
 /** @type {{x1: number, x2: number, y1: number, y2: number}} */
CanvasJS.ChartTitle.prototype.bounds;

/**
 * Returns the specified property of title.
 * @param {string} propertyName Name of the property.
 * @return {(string|number|boolean)}
 */
CanvasJS.ChartTitle.prototype.get = function(propertyName) {};

/**
 * Sets the specified property of Title.
 * @param {string} propertyName Name of the property.
 * @param {(string|number|boolean)} value value to be set on property.
 * @param {boolean} updateChart When true, Updates the chart automatically after setting the value. Defaults to true.
 * @return {void}
 */
CanvasJS.ChartTitle.prototype.set = function(propertyName, value, updateChart) {};

/**
 * Removes title of the chart.
 * @return {void}
 */
CanvasJS.ChartTitle.prototype.remove = function() {};
/**
 * @record
 * @struct
 */
CanvasJS.ChartLegendOptions = function() {};
 /** @type {string} */
CanvasJS.ChartLegendOptions.prototype.cursor;
 /** @type {number} */
CanvasJS.ChartLegendOptions.prototype.fontSize;
 /** @type {string} */
CanvasJS.ChartLegendOptions.prototype.fontFamily;
 /** @type {string} */
CanvasJS.ChartLegendOptions.prototype.fontColor;
 /** @type {string} */
CanvasJS.ChartLegendOptions.prototype.fontWeight;
 /** @type {string} */
CanvasJS.ChartLegendOptions.prototype.fontStyle;
 /** @type {string} */
CanvasJS.ChartLegendOptions.prototype.verticalAlign;
 /** @type {string} */
CanvasJS.ChartLegendOptions.prototype.horizontalAlign;
 /** @type {number} */
CanvasJS.ChartLegendOptions.prototype.markerMargin;
 /** @type {boolean} */
CanvasJS.ChartLegendOptions.prototype.reversed;
 /** @type {number} */
CanvasJS.ChartLegendOptions.prototype.maxWidth;
 /** @type {number} */
CanvasJS.ChartLegendOptions.prototype.maxHeight;
 /** @type {number} */
CanvasJS.ChartLegendOptions.prototype.itemMaxWidth;
 /** @type {number} */
CanvasJS.ChartLegendOptions.prototype.itemWidth;
 /** @type {boolean} */
CanvasJS.ChartLegendOptions.prototype.itemWrap;
 /** @type {boolean} */
CanvasJS.ChartLegendOptions.prototype.dockInsidePlotArea;

/**
 * Sets the mouseover event handler for the legend, which is triggered when the user moves the mouse(input device) over a legend item.
 * After the event is triggered, the event related data is passed as a parameter to the assigned event handler. Parameters passed to the function are shown in the Event Object section below.
 * @param {!CanvasJS.ChartEvent} event a chart event
 * @return {void}
 */
CanvasJS.ChartLegendOptions.prototype.itemmouseover = function(event) {};

/**
 * Sets the mousemove event handler for the legend, which is triggered when the user moves the mouse(input device) within a legend item.
 * When the event is triggered, the event related data is passed as a parameter to the assigned event handler.
 * Parameters passed to the function are shown in the Event Object section below.
 * @param {!CanvasJS.ChartEvent} event a chart event
 * @return {void}
 */
CanvasJS.ChartLegendOptions.prototype.itemmousemove = function(event) {};

/**
 * Sets the mouseout event handler for the legend, which is triggered when the user moves the mouse pointer outside a legend item.
 * After the event is triggered, the event related data is passed as a parameter to the assigned event handler.
 * Parameters passed to the function are shown in the Event Object section below.
 * @param {!CanvasJS.ChartEvent} event a chart event
 * @return {void}
 */
CanvasJS.ChartLegendOptions.prototype.itemmouseout = function(event) {};

/**
 * Sets the click event handler for the legend, which is triggered when the user clicks on a legend item.
 * After the event is triggered, the event related data is passed as a parameter to the assigned event handler.
 * Parameters passed to the function are shown in the Event Object section below.
 * @param {!CanvasJS.ChartEvent} event a chart event
 * @return {void}
 */
CanvasJS.ChartLegendOptions.prototype.itemclick = function(event) {};

/**
 * A custom formatter function that returns text to be displayed inside individual legend items.
 * @param {{chart: !CanvasJS.Chart, legend: !CanvasJS.ChartLegendOptions, dataSeries: !CanvasJS.ChartDataSeriesOptions, dataPoint: !CanvasJS.ChartDataPoint}=} e
 * @return {string}
 */
CanvasJS.ChartLegendOptions.prototype.itemTextFormatter = function(e) {};
/**
 * @extends {CanvasJS.ChartLegendOptions}
 * @record
 * @struct
 */
CanvasJS.ChartLegend = function() {};

/**
 * Returns the specified property of legend.
 * @param {string} propertyName Name of the property.
 * @return {(string|number|boolean)}
 */
CanvasJS.ChartLegend.prototype.get = function(propertyName) {};

/**
 * Sets the specified property of legend.
 * @param {string} propertyName Name of the property.
 * @param {(string|number|boolean)} value Name of the property.
 * @param {boolean=} updateChart When true, Updates the chart automatically after setting the value. Defaults to true.
 * @return {void}
 */
CanvasJS.ChartLegend.prototype.set = function(propertyName, value, updateChart) {};
/**
 * @record
 * @struct
 */
CanvasJS.ChartEvent = function() {};
 /** @type {?} */
CanvasJS.ChartEvent.prototype.x;
 /** @type {number} */
CanvasJS.ChartEvent.prototype.y;
 /** @type {!CanvasJS.Chart} */
CanvasJS.ChartEvent.prototype.chart;
 /** @type {!CanvasJS.ChartDataPoint} */
CanvasJS.ChartEvent.prototype.dataPoint;
 /** @type {!CanvasJS.ChartDataSeriesOptions} */
CanvasJS.ChartEvent.prototype.dataSeries;
 /** @type {number} */
CanvasJS.ChartEvent.prototype.dataPointIndex;
 /** @type {number} */
CanvasJS.ChartEvent.prototype.dataSeriesIndex;
/**
 * @record
 * @struct
 */
CanvasJS.ChartAxisOptions = function() {};
 /** @type {string} */
CanvasJS.ChartAxisOptions.prototype.title;
 /** @type {string} */
CanvasJS.ChartAxisOptions.prototype.titleFontColor;
 /** @type {number} */
CanvasJS.ChartAxisOptions.prototype.titleFontSize;
 /** @type {string} */
CanvasJS.ChartAxisOptions.prototype.titleFontFamily;
 /** @type {string} */
CanvasJS.ChartAxisOptions.prototype.titleFontWeight;
 /** @type {string} */
CanvasJS.ChartAxisOptions.prototype.titleFontStyle;
 /** @type {number} */
CanvasJS.ChartAxisOptions.prototype.margin;
 /** @type {string} */
CanvasJS.ChartAxisOptions.prototype.lineColor;
 /** @type {number} */
CanvasJS.ChartAxisOptions.prototype.lineThickness;
 /** @type {string} */
CanvasJS.ChartAxisOptions.prototype.lineDashType;
 /** @type {number} */
CanvasJS.ChartAxisOptions.prototype.minimum;
 /** @type {number} */
CanvasJS.ChartAxisOptions.prototype.maximum;
 /** @type {number} */
CanvasJS.ChartAxisOptions.prototype.viewportMinimum;
 /** @type {number} */
CanvasJS.ChartAxisOptions.prototype.viewportMaximum;
/**
 * @record
 * @struct
 */
CanvasJS.ChartStripLinesOptions = function() {};
 /** @type {number} */
CanvasJS.ChartStripLinesOptions.prototype.value;
 /** @type {number} */
CanvasJS.ChartStripLinesOptions.prototype.startValue;
 /** @type {number} */
CanvasJS.ChartStripLinesOptions.prototype.endValue;
 /** @type {number} */
CanvasJS.ChartStripLinesOptions.prototype.thickness;
 /** @type {string} */
CanvasJS.ChartStripLinesOptions.prototype.color;
 /** @type {string} */
CanvasJS.ChartStripLinesOptions.prototype.label;
 /** @type {string} */
CanvasJS.ChartStripLinesOptions.prototype.labelPlacement;
 /** @type {string} */
CanvasJS.ChartStripLinesOptions.prototype.labelAlign;
 /** @type {boolean} */
CanvasJS.ChartStripLinesOptions.prototype.labelWrap;
 /** @type {number} */
CanvasJS.ChartStripLinesOptions.prototype.labelMaxWidth;
 /** @type {string} */
CanvasJS.ChartStripLinesOptions.prototype.labelBackgroundColor;
 /** @type {string} */
CanvasJS.ChartStripLinesOptions.prototype.labelFontFamily;
 /** @type {string} */
CanvasJS.ChartStripLinesOptions.prototype.labelFontColor;
 /** @type {number} */
CanvasJS.ChartStripLinesOptions.prototype.labelFontSize;
 /** @type {string} */
CanvasJS.ChartStripLinesOptions.prototype.labelFontWeight;
 /** @type {string} */
CanvasJS.ChartStripLinesOptions.prototype.labelFontStyle;
 /** @type {boolean} */
CanvasJS.ChartStripLinesOptions.prototype.showOnTop;
 /** @type {string} */
CanvasJS.ChartStripLinesOptions.prototype.lineDashType;
 /** @type {number} */
CanvasJS.ChartStripLinesOptions.prototype.opacity;

/**
 * A custom formatter function that returns stripLine’s label.
 * @param {{chart: !CanvasJS.Chart, axis: !CanvasJS.ChartAxisYOptions, stripline: !CanvasJS.ChartStripLinesOptions}=} e
 * @return {string}
 */
CanvasJS.ChartStripLinesOptions.prototype.labelFormatter = function(e) {};
/**
 * @extends {CanvasJS.ChartStripLinesOptions}
 * @record
 * @struct
 */
CanvasJS.ChartStrip = function() {};

/**
 * Returns the specified property of stripLines.
 * @param {string} propertyName Name of the property
 * @return {(string|number|boolean)}
 */
CanvasJS.ChartStrip.prototype.get = function(propertyName) {};

/**
 * Sets the specified property of stripLines.
 * @param {string} propertyName Name of the property.
 * @param {(string|number|boolean)} value value to be set on property.
 * @param {boolean} updateChart When true, Updates the chart automatically after setting the value. Defaults to true.
 * @return {void}
 */
CanvasJS.ChartStrip.prototype.set = function(propertyName, value, updateChart) {};

/**
 * Removes specified stripLine from stripLines Array.
 * @return {void}
 */
CanvasJS.ChartStrip.prototype.remove = function() {};
/**
 * @extends {CanvasJS.ChartAxisOptions}
 * @record
 * @struct
 */
CanvasJS.ChartAxisXOptions = function() {};
 /** @type {boolean} */
CanvasJS.ChartAxisXOptions.prototype.titleWrap;
 /** @type {number} */
CanvasJS.ChartAxisXOptions.prototype.titleMaxWidth;
 /** @type {string} */
CanvasJS.ChartAxisXOptions.prototype.labelBackgroundColor;
 /** @type {number} */
CanvasJS.ChartAxisXOptions.prototype.labelMaxWidth;
 /** @type {boolean} */
CanvasJS.ChartAxisXOptions.prototype.labelWrap;
 /** @type {boolean} */
CanvasJS.ChartAxisXOptions.prototype.labelAutoFit;
 /** @type {number} */
CanvasJS.ChartAxisXOptions.prototype.labelAngle;
 /** @type {string} */
CanvasJS.ChartAxisXOptions.prototype.labelFontFamily;
 /** @type {string} */
CanvasJS.ChartAxisXOptions.prototype.labelFontColor;
 /** @type {number} */
CanvasJS.ChartAxisXOptions.prototype.labelFontSize;
 /** @type {string} */
CanvasJS.ChartAxisXOptions.prototype.labelFontWeight;
 /** @type {string} */
CanvasJS.ChartAxisXOptions.prototype.labelFontStyle;
 /** @type {string} */
CanvasJS.ChartAxisXOptions.prototype.prefix;
 /** @type {string} */
CanvasJS.ChartAxisXOptions.prototype.suffix;
 /** @type {string} */
CanvasJS.ChartAxisXOptions.prototype.valueFormatString;
 /** @type {number} */
CanvasJS.ChartAxisXOptions.prototype.interval;
 /** @type {string} */
CanvasJS.ChartAxisXOptions.prototype.intervalType;
 /** @type {boolean} */
CanvasJS.ChartAxisXOptions.prototype.reversed;
 /** @type {boolean} */
CanvasJS.ChartAxisXOptions.prototype.logarithmic;
 /** @type {number} */
CanvasJS.ChartAxisXOptions.prototype.logarithmBase;
 /** @type {number} */
CanvasJS.ChartAxisXOptions.prototype.tickLength;
 /** @type {string} */
CanvasJS.ChartAxisXOptions.prototype.tickColor;
 /** @type {number} */
CanvasJS.ChartAxisXOptions.prototype.tickThickness;
 /** @type {string} */
CanvasJS.ChartAxisXOptions.prototype.interlacedColor;
 /** @type {number} */
CanvasJS.ChartAxisXOptions.prototype.gridThickness;
 /** @type {string} */
CanvasJS.ChartAxisXOptions.prototype.gridColor;
 /** @type {string} */
CanvasJS.ChartAxisXOptions.prototype.gridDashType;
 /** @type {(!CanvasJS.ChartStripLinesOptions|!Array<!CanvasJS.ChartStripLinesOptions>)} */
CanvasJS.ChartAxisXOptions.prototype.stripLines;

/**
 * A custom formatter function that returns label to be displayed on axisX.
 * Notes:
 * 1.labelFormatter function should return a string.
 * 2.You can use formatNumber and formatDate functions to format number/date values inside the formatter function.
 * @param {{chart: !CanvasJS.Chart, axis: !CanvasJS.ChartAxisYOptions, value: number, label: string}} e
 * @return {string}
 */
CanvasJS.ChartAxisXOptions.prototype.labelFormatter = function(e) {};
/**
 * @extends {CanvasJS.ChartAxisXOptions}
 * @record
 * @struct
 */
CanvasJS.ChartAxisX = function() {};

/**
 * Returns the specified property of Axis.
 * @param {string} propertyName Name of the property.
 * @return {(string|number|boolean)}
 */
CanvasJS.ChartAxisX.prototype.get = function(propertyName) {};

/**
 * Sets the specified property of Axis.
 * @param {string} propertyName Name of the property.
 * @param {(string|number|boolean)} value value to be set on property.
 * @param {boolean} updateChart When true, Updates the chart automatically after setting the value. Defaults to true.
 * @return {void}
 */
CanvasJS.ChartAxisX.prototype.set = function(propertyName, value, updateChart) {};

/**
 * Removes specified axis from axis Array.
 * @return {void}
 */
CanvasJS.ChartAxisX.prototype.remove = function() {};

/**
 * Adds a new element of given type to the specified array. For example, it can be used to add new stripLine to stripLines array.
 * @param {string} propertyName  Name of the property.
 * @param {!CanvasJS.ChartStripLinesOptions} options  Option for the new element.
 * @param {number=} index Index of the array where the new element is to be added. Defaults to the length (end) of array.
 * @param {boolean=} updateChart When true, Updates the chart automatically after setting the value. Defaults to true.
 * @return {void}
 */
CanvasJS.ChartAxisX.prototype.addTo = function(propertyName, options, index, updateChart) {};

/**
 * Return the pixel coordinate of the given value over axis.
 * @param {number} value Numeric value over Axis
 * @return {number}
 */
CanvasJS.ChartAxisX.prototype.convertValueToPixel = function(value) {};

/**
 * Return the value along Axis for given pixel coordinate.
 * @param {number} pixel pixel value over Axis
 * @return {number}
 */
CanvasJS.ChartAxisX.prototype.convertPixelToValue = function(pixel) {};
/**
 * @extends {CanvasJS.ChartAxisXOptions}
 * @record
 * @struct
 */
CanvasJS.ChartAxisYOptions = function() {};
 /** @type {boolean} */
CanvasJS.ChartAxisYOptions.prototype.includeZero;
/**
 * @extends {CanvasJS.ChartAxisYOptions}
 * @record
 * @struct
 */
CanvasJS.ChartAxisY = function() {};

/**
 * Returns the specified property of Axis.
 * @param {string} propertyName Name of the property.
 * @return {(string|number|boolean)}
 */
CanvasJS.ChartAxisY.prototype.get = function(propertyName) {};

/**
 * Sets the specified property of Axis.
 * @param {string} propertyName Name of the property.
 * @param {(string|number|boolean)} value value to be set on property.
 * @param {boolean} updateChart When true, Updates the chart automatically after setting the value. Defaults to true.
 * @return {void}
 */
CanvasJS.ChartAxisY.prototype.set = function(propertyName, value, updateChart) {};

/**
 * Removes specified axis from axis Array.
 * @return {void}
 */
CanvasJS.ChartAxisY.prototype.remove = function() {};

/**
 * Adds a new element of given type to the specified array. For example, it can be used to add new stripLine to stripLines array.
 * @param {string} propertyName  Name of the property.
 * @param {!CanvasJS.ChartStripLinesOptions} options  Option for the new element.
 * @param {number=} index Index of the array where the new element is to be added. Defaults to the length (end) of array.
 * @param {boolean=} updateChart When true, Updates the chart automatically after setting the value. Defaults to true.
 * @return {void}
 */
CanvasJS.ChartAxisY.prototype.addTo = function(propertyName, options, index, updateChart) {};

/**
 * Return the pixel coordinate of the given value over axis.
 * @param {number} value Numeric value over Axis
 * @return {number}
 */
CanvasJS.ChartAxisY.prototype.convertValueToPixel = function(value) {};

/**
 * Return the value along Axis for given pixel coordinate.
 * @param {number} pixel pixel value over Axis
 * @return {number}
 */
CanvasJS.ChartAxisY.prototype.convertPixelToValue = function(pixel) {};
/**
 * @record
 * @struct
 */
CanvasJS.ChartToolTipOptions = function() {};
 /** @type {boolean} */
CanvasJS.ChartToolTipOptions.prototype.animationEnabled;
 /** @type {boolean} */
CanvasJS.ChartToolTipOptions.prototype.enabled;
 /** @type {boolean} */
CanvasJS.ChartToolTipOptions.prototype.shared;
 /** @type {string} */
CanvasJS.ChartToolTipOptions.prototype.borderColor;
 /** @type {string} */
CanvasJS.ChartToolTipOptions.prototype.content;
 /** @type {string} */
CanvasJS.ChartToolTipOptions.prototype.fontColor;
 /** @type {string} */
CanvasJS.ChartToolTipOptions.prototype.fontStyle;
 /** @type {number} */
CanvasJS.ChartToolTipOptions.prototype.fontSize;
 /** @type {string} */
CanvasJS.ChartToolTipOptions.prototype.fontFamily;
 /** @type {string} */
CanvasJS.ChartToolTipOptions.prototype.fontWeight;
 /** @type {number} */
CanvasJS.ChartToolTipOptions.prototype.borderThickness;
 /** @type {number} */
CanvasJS.ChartToolTipOptions.prototype.cornerRadius;
 /** @type {boolean} */
CanvasJS.ChartToolTipOptions.prototype.reversed;
 /** @type {string} */
CanvasJS.ChartToolTipOptions.prototype.backgroundColor;

/**
 * A custom formatter function that returns the content (text/html) to be displayed inside the toolTip.
 * @param {{chart: !CanvasJS.Chart, toolTip: !CanvasJS.ChartToolTipOptions, entries: !Array<{dataPoint: !CanvasJS.ChartDataPoint, dataSeries: !CanvasJS.ChartDataSeriesOptions}>}} e
 * @return {string}
 */
CanvasJS.ChartToolTipOptions.prototype.contentFormatter = function(e) {};
/**
 * @extends {CanvasJS.ChartToolTipOptions}
 * @record
 * @struct
 */
CanvasJS.ChartToolTip = function() {};

/**
 * Returns the specified property of legend.
 * @param {string} propertyName Name of the property.
 * @return {(string|number|boolean)}
 */
CanvasJS.ChartToolTip.prototype.get = function(propertyName) {};

/**
 * Sets the specified property of legend.
 * @param {string} propertyName Name of the property.
 * @param {(string|number|boolean)} value Name of the property.
 * @param {boolean=} updateChart When true, Updates the chart automatically after setting the value. Defaults to true.
 * @return {void}
 */
CanvasJS.ChartToolTip.prototype.set = function(propertyName, value, updateChart) {};
/**
 * @record
 * @struct
 */
CanvasJS.ChartDataCommon = function() {};
 /** @type {string} */
CanvasJS.ChartDataCommon.prototype.name;
 /** @type {string} */
CanvasJS.ChartDataCommon.prototype.color;
 /** @type {boolean} */
CanvasJS.ChartDataCommon.prototype.highlightEnabled;
 /** @type {string} */
CanvasJS.ChartDataCommon.prototype.indexLabel;
 /** @type {string} */
CanvasJS.ChartDataCommon.prototype.indexLabelLineDashType;
 /** @type {string} */
CanvasJS.ChartDataCommon.prototype.indexLabelPlacement;
 /** @type {string} */
CanvasJS.ChartDataCommon.prototype.indexLabelOrientation;
 /** @type {string} */
CanvasJS.ChartDataCommon.prototype.indexLabelBackgroundColor;
 /** @type {string} */
CanvasJS.ChartDataCommon.prototype.indexLabelFontStyle;
 /** @type {string} */
CanvasJS.ChartDataCommon.prototype.indexLabelFontColor;
 /** @type {number} */
CanvasJS.ChartDataCommon.prototype.indexLabelFontSize;
 /** @type {string} */
CanvasJS.ChartDataCommon.prototype.indexLabelFontFamily;
 /** @type {string} */
CanvasJS.ChartDataCommon.prototype.indexLabelFontWeight;
 /** @type {string} */
CanvasJS.ChartDataCommon.prototype.indexLabelLineColor;
 /** @type {number} */
CanvasJS.ChartDataCommon.prototype.indexLabelLineThickness;
 /** @type {string} */
CanvasJS.ChartDataCommon.prototype.toolTipContent;
 /** @type {string} */
CanvasJS.ChartDataCommon.prototype.markerType;
 /** @type {string} */
CanvasJS.ChartDataCommon.prototype.markerColor;
 /** @type {number} */
CanvasJS.ChartDataCommon.prototype.markerSize;
 /** @type {string} */
CanvasJS.ChartDataCommon.prototype.markerBorderColor;
 /** @type {number} */
CanvasJS.ChartDataCommon.prototype.markerBorderThickness;
 /** @type {string} */
CanvasJS.ChartDataCommon.prototype.legendText;
 /** @type {string} */
CanvasJS.ChartDataCommon.prototype.legendMarkerType;
 /** @type {string} */
CanvasJS.ChartDataCommon.prototype.legendMarkerColor;
 /** @type {string} */
CanvasJS.ChartDataCommon.prototype.legendMarkerBorderColor;
 /** @type {number} */
CanvasJS.ChartDataCommon.prototype.legendMarkerBorderThickness;

/**
 * A custom formatter function which returns the text to be displayed as indexLabel on dataPoints.
 * @param {{chart: !CanvasJS.Chart, dataSeries: !CanvasJS.ChartDataSeriesOptions, dataPoint: !CanvasJS.ChartDataPoint, index: number, total: number, pencent: number}} e event object
 * @return {string}
 */
CanvasJS.ChartDataCommon.prototype.indexLabelFormatter = function(e) {};

/**
 * Sets the click event handler for dataSeries which is triggered when user clicks on a dataSeries.
 * Upon event, a parameter that contains event related data is sent to the assigned event handler.
 * Parameter includes dataPoint and dataSeries corresponding to the event.
 * Default: null
 * @param {!CanvasJS.ChartEvent} event
 * @return {void}
 */
CanvasJS.ChartDataCommon.prototype.click = function(event) {};

/**
 * Sets the mouseover event handler for dataSeries which is triggered when user moves Mouse Over a dataSeries.
 * Upon event, a parameter that contains event related data is sent to the assigned event handler.
 * Parameter includes dataPoint and dataSeries corresponding to the event.
 * Default: null
 * @param {!CanvasJS.ChartEvent} event
 * @return {void}
 */
CanvasJS.ChartDataCommon.prototype.mouseover = function(event) {};

/**
 * Sets the mousemove event handler for dataSeries which is triggered when user Moves mouse on a dataSeries.
 * Upon event, a parameter that contains event related data is sent to the assigned event handler.
 * Parameter includes dataPoint and dataSeries corresponding to the event.
 * Default: null
 * @param {!CanvasJS.ChartEvent} event
 * @return {void}
 */
CanvasJS.ChartDataCommon.prototype.mousemove = function(event) {};

/**
 * Sets the mouseout event handler for dataSeries which is triggered when user moves mouse out of a dataSeries.
 * Upon event, a parameter that contains event related data is sent to the assigned event handler.
 * Parameter includes dataPoint and dataSeries corresponding to the event.
 * Default: null
 * @param {!CanvasJS.ChartEvent} event
 * @return {void}
 */
CanvasJS.ChartDataCommon.prototype.mouseout = function(event) {};
/**
 * @extends {CanvasJS.ChartDataCommon}
 * @record
 * @struct
 */
CanvasJS.ChartDataSeriesOptions = function() {};
 /** @type {boolean} */
CanvasJS.ChartDataSeriesOptions.prototype.visible;
 /** @type {string} */
CanvasJS.ChartDataSeriesOptions.prototype.type;
 /** @type {string} */
CanvasJS.ChartDataSeriesOptions.prototype.axisXType;
 /** @type {string} */
CanvasJS.ChartDataSeriesOptions.prototype.axisYType;
 /** @type {number} */
CanvasJS.ChartDataSeriesOptions.prototype.axisXIndex;
 /** @type {number} */
CanvasJS.ChartDataSeriesOptions.prototype.axisYIndex;
 /** @type {string} */
CanvasJS.ChartDataSeriesOptions.prototype.xValueType;
 /** @type {string} */
CanvasJS.ChartDataSeriesOptions.prototype.yValueFormatString;
 /** @type {string} */
CanvasJS.ChartDataSeriesOptions.prototype.xValueFormatString;
 /** @type {string} */
CanvasJS.ChartDataSeriesOptions.prototype.zValueFormatString;
 /** @type {string} */
CanvasJS.ChartDataSeriesOptions.prototype.percentFormatString;
 /** @type {boolean} */
CanvasJS.ChartDataSeriesOptions.prototype.bevelEnabled;
 /** @type {number} */
CanvasJS.ChartDataSeriesOptions.prototype.fillOpacity;
 /** @type {number} */
CanvasJS.ChartDataSeriesOptions.prototype.startAngle;
 /** @type {(string|number)} */
CanvasJS.ChartDataSeriesOptions.prototype.innerRadius;
 /** @type {(string|number)} */
CanvasJS.ChartDataSeriesOptions.prototype.radius;
 /** @type {number} */
CanvasJS.ChartDataSeriesOptions.prototype.lineThickness;
 /** @type {boolean} */
CanvasJS.ChartDataSeriesOptions.prototype.showInLegend;
 /** @type {boolean} */
CanvasJS.ChartDataSeriesOptions.prototype.explodeOnClick;
 /** @type {string} */
CanvasJS.ChartDataSeriesOptions.prototype.risingColor;
 /** @type {!Array<!CanvasJS.ChartDataPoint>} */
CanvasJS.ChartDataSeriesOptions.prototype.dataPoints;
 /** @type {boolean} */
CanvasJS.ChartDataSeriesOptions.prototype.connectNullData;
 /** @type {string} */
CanvasJS.ChartDataSeriesOptions.prototype.lineDashType;
 /** @type {string} */
CanvasJS.ChartDataSeriesOptions.prototype.nullDataLineDashType;
/**
 * @extends {CanvasJS.ChartDataSeriesOptions}
 * @record
 * @struct
 */
CanvasJS.ChartDataSeries = function() {};

/**
 * Returns the specified property of dataSeries
 * @param {string} propertyName Name of the property.
 * @return {(string|number|boolean|!CanvasJS.ChartDataPoint)}
 */
CanvasJS.ChartDataSeries.prototype.get = function(propertyName) {};

/**
 * Sets the specified property of dataSeries.
 * @param {string} propertyName  Name of the property.
 * @param {(string|number|boolean|!CanvasJS.ChartDataPoint)} value value to be set on property.
 * @param {boolean} updateChart When true, Updates the chart automatically after setting the value. Defaults to true.
 * @return {void}
 */
CanvasJS.ChartDataSeries.prototype.set = function(propertyName, value, updateChart) {};

/**
 * Adds a new element of given type to the specified array. For example, it can be used to add new dataPoint to datPoints array.
 * @param {string} propertyName Name of the property
 * @param {!CanvasJS.ChartDataPoint} options Option for the new element
 * @param {number=} index Index of the array where the new element is to be added. Defaults to the length (end) of array.
 * @param {boolean=} updateChart When true, Updates the chart automatically after setting the value. Defaults to true.
 * @return {void}
 */
CanvasJS.ChartDataSeries.prototype.addTo = function(propertyName, options, index, updateChart) {};

/**
 * Removes specified dataSeries from data Array.
 * @return {void}
 */
CanvasJS.ChartDataSeries.prototype.remove = function() {};
/**
 * @extends {CanvasJS.ChartDataCommon}
 * @record
 * @struct
 */
CanvasJS.ChartDataPoint = function() {};
 /** @type {(number|!Date)} */
CanvasJS.ChartDataPoint.prototype.x;
 /** @type {number} */
CanvasJS.ChartDataPoint.prototype.y;
 /** @type {number} */
CanvasJS.ChartDataPoint.prototype.z;
 /** @type {string} */
CanvasJS.ChartDataPoint.prototype.label;
 /** @type {boolean} */
CanvasJS.ChartDataPoint.prototype.exploded;

/**
 * @return {void}
 */
function CanvasJS() {}

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
