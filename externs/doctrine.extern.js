/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/doctrine/index.d.ts:

/**
 * Parse the given content as a jsdoc comment.
 * @param {string} content
 * @param {?=} options
 * @return {?}
 */
function parse(content, options) {}

/**
 * Remove /*, *, and * / from jsdoc.
 * @param {string} doc
 * @return {string}
 */
function unwrapComment(doc) {}
/**
 * @record
 * @struct
 */
function Options() {}
 /** @type {boolean} */
Options.prototype.unwrap;
 /** @type {!Array<string>} */
Options.prototype.tags;
 /** @type {boolean} */
Options.prototype.recoverable;
 /** @type {boolean} */
Options.prototype.sloppy;
 /** @type {boolean} */
Options.prototype.strict;
 /** @type {boolean} */
Options.prototype.preserveWhitespace;
 /** @type {boolean} */
Options.prototype.lineNumbers;
/**
 * @record
 * @struct
 */
function Annotation() {}
 /** @type {string} */
Annotation.prototype.description;
 /** @type {!Array<?>} */
Annotation.prototype.tags;
/**
 * @record
 * @struct
 */
function Tag() {}
 /** @type {string} */
Tag.prototype.title;
 /** @type {string} */
Tag.prototype.name;
 /** @type {string} */
Tag.prototype.description;
 /** @type {?} */
Tag.prototype.type;
 /** @type {string} */
Tag.prototype.kind;
 /** @type {!Array<string>} */
Tag.prototype.errors;

/** @typedef {?} */
var Type;
/** @const */
var type = {};
/**
 * @record
 * @struct
 */
type.AllLiteral = function() {};
 /** @type {string} */
type.AllLiteral.prototype.type;
/**
 * @record
 * @struct
 */
type.ArrayType = function() {};
 /** @type {string} */
type.ArrayType.prototype.type;
 /** @type {!Array<?>} */
type.ArrayType.prototype.elements;
/**
 * @record
 * @struct
 */
type.FieldType = function() {};
 /** @type {string} */
type.FieldType.prototype.type;
 /** @type {string} */
type.FieldType.prototype.key;
 /** @type {?} */
type.FieldType.prototype.value;
/**
 * @record
 * @struct
 */
type.FunctionType = function() {};
 /** @type {string} */
type.FunctionType.prototype.type;

/* TODO: PropertySignature: type.'this' */

/* TODO: PropertySignature: type.'new' */
 /** @type {!Array<?>} */
type.FunctionType.prototype.params;
 /** @type {!Array<?>} */
type.FunctionType.prototype.result;
/**
 * @record
 * @struct
 */
type.NameExpression = function() {};
 /** @type {string} */
type.NameExpression.prototype.type;
 /** @type {string} */
type.NameExpression.prototype.name;
/**
 * @record
 * @struct
 */
type.NonNullableType = function() {};
 /** @type {string} */
type.NonNullableType.prototype.type;
 /** @type {boolean} */
type.NonNullableType.prototype.prefix;
 /** @type {?} */
type.NonNullableType.prototype.expression;
/**
 * @record
 * @struct
 */
type.NullableLiteral = function() {};
 /** @type {string} */
type.NullableLiteral.prototype.type;
/**
 * @record
 * @struct
 */
type.NullableType = function() {};
 /** @type {string} */
type.NullableType.prototype.type;
 /** @type {boolean} */
type.NullableType.prototype.prefix;
 /** @type {?} */
type.NullableType.prototype.expression;
/**
 * @record
 * @struct
 */
type.NullLiteral = function() {};
 /** @type {string} */
type.NullLiteral.prototype.type;
/**
 * @record
 * @struct
 */
type.OptionalType = function() {};
 /** @type {string} */
type.OptionalType.prototype.type;
 /** @type {?} */
type.OptionalType.prototype.expression;
/**
 * @record
 * @struct
 */
type.ParameterType = function() {};
 /** @type {string} */
type.ParameterType.prototype.type;
 /** @type {string} */
type.ParameterType.prototype.name;
 /** @type {?} */
type.ParameterType.prototype.expression;
/**
 * @record
 * @struct
 */
type.RecordType = function() {};
 /** @type {string} */
type.RecordType.prototype.type;
 /** @type {!Array<?>} */
type.RecordType.prototype.fields;
/**
 * @record
 * @struct
 */
type.RestType = function() {};
 /** @type {string} */
type.RestType.prototype.type;
 /** @type {?} */
type.RestType.prototype.expression;
/**
 * @record
 * @struct
 */
type.TypeApplication = function() {};
 /** @type {string} */
type.TypeApplication.prototype.type;
 /** @type {?} */
type.TypeApplication.prototype.expression;
 /** @type {!Array<?>} */
type.TypeApplication.prototype.applications;
/**
 * @record
 * @struct
 */
type.UndefinedLiteral = function() {};
 /** @type {string} */
type.UndefinedLiteral.prototype.type;
/**
 * @record
 * @struct
 */
type.UnionType = function() {};
 /** @type {string} */
type.UnionType.prototype.type;
 /** @type {!Array<?>} */
type.UnionType.prototype.elements;
/**
 * @record
 * @struct
 */
type.VoidLiteral = function() {};
 /** @type {string} */
type.VoidLiteral.prototype.type;

/**
 * @param {?} type
 * @return {string}
 */
type.stringify = function(type) {};

/**
 * @param {string} src
 * @param {?=} options
 * @return {?}
 */
type.parseType = function(src, options) {};

/**
 * @param {string} src
 * @param {?=} options
 * @return {?}
 */
type.parseParamType = function(src, options) {};
 /** @type {?} */
type.Syntax;
 /** @type {string} */
var version;
 /** @type {?} */
var parseType;
 /** @type {?} */
var parseParamType;
 /** @type {?} */
var Syntax;
