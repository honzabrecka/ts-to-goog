/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/selectize/index.d.ts:
/** @const */
var Selectize = {};
/**
 * @record
 * @struct
 */
Selectize.IOptions = function() {};
 /** @type {string} */
Selectize.IOptions.prototype.delimiter;
 /** @type {boolean} */
Selectize.IOptions.prototype.diacritics;
 /** @type {?} */
Selectize.IOptions.prototype.create;
 /** @type {boolean} */
Selectize.IOptions.prototype.createOnBlur;
 /** @type {?} */
Selectize.IOptions.prototype.createFilter;
 /** @type {boolean} */
Selectize.IOptions.prototype.highlight;
 /** @type {boolean} */
Selectize.IOptions.prototype.persist;
 /** @type {boolean} */
Selectize.IOptions.prototype.openOnFocus;
 /** @type {number} */
Selectize.IOptions.prototype.maxOptions;
 /** @type {number} */
Selectize.IOptions.prototype.maxItems;
 /** @type {boolean} */
Selectize.IOptions.prototype.hideSelected;
 /** @type {boolean} */
Selectize.IOptions.prototype.allowEmptyOption;
 /** @type {number} */
Selectize.IOptions.prototype.scrollDuration;
 /** @type {number} */
Selectize.IOptions.prototype.loadThrottle;
 /** @type {?} */
Selectize.IOptions.prototype.preload;
 /** @type {string} */
Selectize.IOptions.prototype.dropdownParent;
 /** @type {boolean} */
Selectize.IOptions.prototype.addPrecedence;
 /** @type {boolean} */
Selectize.IOptions.prototype.selectOnTab;
 /** @type {(!Array<string>|!Array<!Selectize.IPluginOption>|!Object<string,?>)} */
Selectize.IOptions.prototype.plugins;
 /** @type {!Array<U>} */
Selectize.IOptions.prototype.options;
 /** @type {string} */
Selectize.IOptions.prototype.dataAttr;
 /** @type {string} */
Selectize.IOptions.prototype.valueField;
 /** @type {!Array<U>} */
Selectize.IOptions.prototype.optgroups;
 /** @type {string} */
Selectize.IOptions.prototype.optgroupValueField;
 /** @type {string} */
Selectize.IOptions.prototype.labelField;
 /** @type {string} */
Selectize.IOptions.prototype.optgroupLabelField;
 /** @type {string} */
Selectize.IOptions.prototype.optgroupField;
 /** @type {?} */
Selectize.IOptions.prototype.sortField;
 /** @type {?} */
Selectize.IOptions.prototype.searchField;
 /** @type {string} */
Selectize.IOptions.prototype.searchConjunction;
 /** @type {!Array<string>} */
Selectize.IOptions.prototype.optgroupOrder;
 /** @type {boolean} */
Selectize.IOptions.prototype.copyClassesToDropdown;
 /** @type {!Selectize.ICustomRenderers<U>} */
Selectize.IOptions.prototype.render;

/**
 * Invoked when new options should be loaded from the server.
 * @param {string} query
 * @param {!Function} callback
 * @return {?}
 */
Selectize.IOptions.prototype.load = function(query, callback) {};

/**
 * Overrides the scoring function used to sort available options. The provided function should return a
 * function that returns a number greater than or equal to zero to represent the "score" of an item
 * (the function's first argument). If 0, the option is declared not a match.
 * @param {!Selectize.ISearch} search
 * @return {function(?): number}
 */
Selectize.IOptions.prototype.score = function(search) {};

/**
 * Invoked once the control is completely initialized.
 * @return {?}
 */
Selectize.IOptions.prototype.onInitialize = function() {};

/**
 * Invoked when the value of the control changes.
 * 
 * If single select, value is of type T.
 * If multi select, value is of type T[].
 * @param {?} value
 * @return {?}
 */
Selectize.IOptions.prototype.onChange = function(value) {};

/**
 * Invoked when an item is selected.
 * @param {T} value
 * @param {!JQuery} item
 * @return {?}
 */
Selectize.IOptions.prototype.onItemAdd = function(value, item) {};

/**
 * Invoked when an item is deselected.
 * @param {T} value
 * @return {?}
 */
Selectize.IOptions.prototype.onItemRemove = function(value) {};

/**
 * Invoked when the control is manually cleared via the clear() method.
 * @return {?}
 */
Selectize.IOptions.prototype.onClear = function() {};

/**
 * Invoked when the user attempts to delete the current selection.
 * @param {!Array<T>} values
 * @return {?}
 */
Selectize.IOptions.prototype.onDelete = function(values) {};

/**
 * Invoked when a new option is added to the available options list.
 * @param {T} value
 * @param {U} data
 * @return {?}
 */
Selectize.IOptions.prototype.onOptionAdd = function(value, data) {};

/**
 * Invoked when an option is removed from the available options.
 * @param {T} value
 * @return {?}
 */
Selectize.IOptions.prototype.onOptionRemove = function(value) {};

/**
 * Invoked when the dropdown opens.
 * @param {!JQuery} dropdown
 * @return {?}
 */
Selectize.IOptions.prototype.onDropdownOpen = function(dropdown) {};

/**
 * Invoked when the dropdown closes.
 * @param {!JQuery} dropdown
 * @return {?}
 */
Selectize.IOptions.prototype.onDropdownClose = function(dropdown) {};

/**
 * Invoked when the user types while filtering options.
 * @param {string} srt
 * @return {?}
 */
Selectize.IOptions.prototype.onType = function(srt) {};

/**
 * Invoked when new options have been loaded and added to the control (via the "load" option or "load" API method).
 * @param {!Array<U>} data
 * @return {?}
 */
Selectize.IOptions.prototype.onLoad = function(data) {};
/**
 * @record
 * @struct
 */
Selectize.ICustomRenderers = function() {};

/**
 * @param {U} data
 * @param {function(string): string} escape
 * @return {string}
 */
Selectize.ICustomRenderers.prototype.option = function(data, escape) {};

/**
 * @param {U} data
 * @param {function(string): string} escape
 * @return {string}
 */
Selectize.ICustomRenderers.prototype.item = function(data, escape) {};

/**
 * @param {U} data
 * @param {function(string): string} escape
 * @return {string}
 */
Selectize.ICustomRenderers.prototype.option_create = function(data, escape) {};

/**
 * @param {U} data
 * @param {function(string): string} escape
 * @return {string}
 */
Selectize.ICustomRenderers.prototype.optgroup_header = function(data, escape) {};

/**
 * @param {U} data
 * @param {function(string): string} escape
 * @return {string}
 */
Selectize.ICustomRenderers.prototype.optgroup = function(data, escape) {};
/**
 * @record
 * @struct
 */
Selectize.IApi = function() {};
 /** @type {!Array<T>} */
Selectize.IApi.prototype.items;
 /** @type {!Object<string,U>} */
Selectize.IApi.prototype.options;

/**
 * Adds an available option. If it already exists, nothing will happen.
 * Note: this does not refresh the options list dropdown (use refreshOptions() for that).
 * @param {U} data
 * @return {void}
 */
Selectize.IApi.prototype.addOption = function(data) {};

/**
 * Updates an option available for selection. If it is visible in the selected items or options dropdown,
 * it will be re-rendered automatically.
 * @param {T} value
 * @param {U} data
 * @return {void}
 */
Selectize.IApi.prototype.updateOption = function(value, data) {};

/**
 * Removes the option identified by the given value.
 * @param {T} value
 * @return {void}
 */
Selectize.IApi.prototype.removeOption = function(value) {};

/**
 * Removes all options from the control.
 * @return {void}
 */
Selectize.IApi.prototype.clearOptions = function() {};

/**
 * Retrieves the jQuery element for the option identified by the given value.
 * @param {T} value
 * @return {!JQuery}
 */
Selectize.IApi.prototype.getOption = function(value) {};

/**
 * Retrieves the jQuery element for the previous or next option, relative to the currently highlighted option.
 * The "direction" argument should be 1 for "next" or -1 for "previous".
 * @param {T} value
 * @param {number} direction
 * @return {void}
 */
Selectize.IApi.prototype.getAdjacentOption = function(value, direction) {};

/**
 * Refreshes the list of available options shown in the autocomplete dropdown menu.
 * @param {boolean} triggerDropdown
 * @return {void}
 */
Selectize.IApi.prototype.refreshOptions = function(triggerDropdown) {};

/**
 * Resets / clears all selected items from the control.
 * @return {void}
 */
Selectize.IApi.prototype.clear = function() {};

/**
 * Returns the jQuery element of the item matching the given value.
 * @param {T} value
 * @return {!JQuery}
 */
Selectize.IApi.prototype.getItem = function(value) {};

/**
 * "Selects" an item. Adds it to the list at the current caret position.
 * @param {T} value
 * @return {void}
 */
Selectize.IApi.prototype.addItem = function(value) {};

/**
 * Removes the selected item matching the provided value.
 * @param {T} value
 * @return {void}
 */
Selectize.IApi.prototype.removeItem = function(value) {};

/**
 * Invokes the "create" method provided in the selectize options that should provide the data for the
 * new item, given the user input. Once this completes, it will be added to the item list.
 * @param {T} value
 * @return {void}
 */
Selectize.IApi.prototype.createItem = function(value) {};

/**
 * Re-renders the selected item lists.
 * @return {void}
 */
Selectize.IApi.prototype.refreshItems = function() {};

/**
 * Registers a new optgroup for options to be bucketed into.
 * The "id" argument refers to a value of the property in option identified by the "optgroupField" setting.
 * @param {string} id
 * @param {U} data
 * @return {void}
 */
Selectize.IApi.prototype.addOptionGroup = function(id, data) {};

/**
 * Adds an event listener.
 * @param {string} eventName
 * @param {!Function} handler
 * @return {void}
 */
Selectize.IApi.prototype.on = function(eventName, handler) {};

/**
 * Removes an event listener. If no handler is provided, all event listeners are removed.
 * @param {string} eventName
 * @param {!Function=} handler
 * @return {void}
 */
Selectize.IApi.prototype.off = function(eventName, handler) {};

/**
 * Triggers event listeners.
 * @param {string} eventName
 * @param {...?} args
 * @return {void}
 */
Selectize.IApi.prototype.trigger = function(eventName, args) {};

/**
 * Shows the autocomplete dropdown containing the available options.
 * @return {void}
 */
Selectize.IApi.prototype.open = function() {};

/**
 * Closes the autocomplete dropdown menu.
 * @return {void}
 */
Selectize.IApi.prototype.close = function() {};

/**
 * Calculates and applies the appropriate position of the dropdown.
 * @return {void}
 */
Selectize.IApi.prototype.positionDropdown = function() {};

/**
 * Destroys the control and unbinds event listeners so that it can be garbage collected.
 * @return {void}
 */
Selectize.IApi.prototype.destroy = function() {};

/**
 * Loads options by invoking the the provided function. The function should accept one argument (callback)
 * and invoke the callback with the results once they are available.
 * @param {function(?): ?} callback
 * @return {void}
 */
Selectize.IApi.prototype.load = function(callback) {};

/**
 * Brings the control into focus.
 * @return {void}
 */
Selectize.IApi.prototype.focus = function() {};

/**
 * Forces the control out of focus.
 * @return {void}
 */
Selectize.IApi.prototype.blur = function() {};

/**
 * Disables user input on the control (note: the control can still receive focus).
 * @return {void}
 */
Selectize.IApi.prototype.lock = function() {};

/**
 * Re-enables user input on the control.
 * @return {void}
 */
Selectize.IApi.prototype.unlock = function() {};

/**
 * Disables user input on the control completely. While disabled, it cannot receive focus.
 * @return {void}
 */
Selectize.IApi.prototype.disable = function() {};

/**
 * Enables the control so that it can respond to focus and user input.
 * @return {void}
 */
Selectize.IApi.prototype.enable = function() {};

/**
 * Returns the value of the control. If multiple items can be selected (e.g. <select multiple>), this
 * returns an array. If only one item can be selected, this returns a string.
 * @return {?}
 */
Selectize.IApi.prototype.getValue = function() {};

/**
 * Resets the selected items to the given value(s).
 * @param {T|!Array<T>} value
 * @param {boolean=} silent
 * @return {void}
 */
Selectize.IApi.prototype.setValue = function(value, silent) {};

/**
 * Moves the caret to the specified position ("index" being the index in the list of selected items).
 * @param {number} index
 * @return {void}
 */
Selectize.IApi.prototype.setCaret = function(index) {};

/**
 * Returns whether or not the user can select more items.
 * @return {boolean}
 */
Selectize.IApi.prototype.isFull = function() {};

/**
 * Clears the render cache. Takes an optional template argument (e.g. "option", "item") to clear only that cache.
 * @param {string=} template
 * @return {void}
 */
Selectize.IApi.prototype.clearCache = function(template) {};

/**
 * When the `settings.placeholder` value is changed, the new placeholder will be displayed.
 * @return {void}
 */
Selectize.IApi.prototype.updatePlaceholder = function() {};
/**
 * @record
 * @struct
 */
Selectize.ISearchToken = function() {};
 /** @type {!RegExp} */
Selectize.ISearchToken.prototype.regex;
 /** @type {string} */
Selectize.ISearchToken.prototype.string;
/**
 * @record
 * @struct
 */
Selectize.ISearchResult = function() {};
 /** @type {string} */
Selectize.ISearchResult.prototype.id;
 /** @type {number} */
Selectize.ISearchResult.prototype.score;
/**
 * @record
 * @struct
 */
Selectize.ISearch = function() {};
 /** @type {?} */
Selectize.ISearch.prototype.options;
 /** @type {string} */
Selectize.ISearch.prototype.query;
 /** @type {!Array<!Selectize.ISearchToken>} */
Selectize.ISearch.prototype.tokens;
 /** @type {number} */
Selectize.ISearch.prototype.total;
 /** @type {!Array<!Selectize.ISearchResult>} */
Selectize.ISearch.prototype.items;
/**
 * @record
 * @struct
 */
Selectize.IPluginOption = function() {};
 /** @type {string} */
Selectize.IPluginOption.prototype.name;
 /** @type {?} */
Selectize.IPluginOption.prototype.options;
/**
 * @record
 * @struct
 */
function JQuery() {}

/**
 * @param {!Selectize.IOptions<?, ?>=} options
 * @return {!JQuery}
 */
JQuery.prototype.selectize = function(options) {};
 /** @type {!Selectize.IApi<?, ?>} */
HTMLElement.prototype.selectize;
