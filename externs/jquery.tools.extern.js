/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jquery.tools/index.d.ts:

/**
 * @template T
 * @param {!JQueryTools.overlay.OverlayOptions=} opts
 * @return {?<!HTMLElement>|T}
 */
JQuery.prototype.overlay = function(opts) {};

/**
 * @param {string} key
 * @return {!JQueryTools.overlay.Overlay}
 */
JQuery.prototype.data = function(key) {};
 /** @type {!JQueryTools.ToolsStatic} */
JQueryStatic.prototype.tools;
/** @const */
var JQueryTools = {};
/**
 * @record
 * @struct
 */
JQueryTools.ToolsStatic = function() {};
 /** @type {!JQueryTools.overlay.OverlayStatic} */
JQueryTools.ToolsStatic.prototype.overlay;
/** @const */
JQueryTools.overlay = {};
/**
 * @record
 * @struct
 */
JQueryTools.overlay.OverlayStatic = function() {};

/**
 * @param {string} effectName
 * @param {function(!JQueryTools.overlay.CssOptions, function(): void): void} effectFn
 * @param {function(function(): void): void} closeFn
 * @return {void}
 */
JQueryTools.overlay.OverlayStatic.prototype.addEffect = function(effectName, effectFn, closeFn) {};
/**
 * @record
 * @struct
 */
JQueryTools.overlay.CssOptions = function() {};

/* TODO: IndexSignature: JQueryTools.overlay */
/**
 * @record
 * @struct
 */
JQueryTools.overlay.OverlayOptions = function() {};
 /** @type {?<!HTMLElement>} */
JQueryTools.overlay.OverlayOptions.prototype.close;
 /** @type {boolean} */
JQueryTools.overlay.OverlayOptions.prototype.closeOnClick;
 /** @type {boolean} */
JQueryTools.overlay.OverlayOptions.prototype.closeOnEsc;
 /** @type {number} */
JQueryTools.overlay.OverlayOptions.prototype.closeSpeed;
 /** @type {string} */
JQueryTools.overlay.OverlayOptions.prototype.effect;
 /** @type {boolean} */
JQueryTools.overlay.OverlayOptions.prototype.fixed;
 /** @type {(string|!JQueryTools.overlay.MaskOptions)} */
JQueryTools.overlay.OverlayOptions.prototype.mask;
 /** @type {(number|string)} */
JQueryTools.overlay.OverlayOptions.prototype.left;
 /** @type {boolean} */
JQueryTools.overlay.OverlayOptions.prototype.load;
 /** @type {boolean} */
JQueryTools.overlay.OverlayOptions.prototype.oneInstance;
 /** @type {(number|string)} */
JQueryTools.overlay.OverlayOptions.prototype.speed;
 /** @type {!Element} */
JQueryTools.overlay.OverlayOptions.prototype.target;
 /** @type {(string|number)} */
JQueryTools.overlay.OverlayOptions.prototype.top;

/**
 * before the overlay is displayed. The overlay has already been positioned at the
 * location from where it will start animating.
 * @this {!JQueryTools.overlay.Overlay}
 * @param {!JQueryEventObject} event
 * @return {void}
 */
JQueryTools.overlay.OverlayOptions.prototype.onBeforeLoad = function(event) {};

/**
 * when the overlay has completely been displayed
 * @this {!JQueryTools.overlay.Overlay}
 * @param {!JQueryEventObject} event
 * @return {void}
 */
JQueryTools.overlay.OverlayOptions.prototype.onLoad = function(event) {};

/**
 * before the overlay is closed
 * @this {!JQueryTools.overlay.Overlay}
 * @param {!JQueryEventObject} event
 * @return {void}
 */
JQueryTools.overlay.OverlayOptions.prototype.onBeforeClose = function(event) {};

/**
 * when the overlay is closed
 * @this {!JQueryTools.overlay.Overlay}
 * @param {!JQueryEventObject} event
 * @return {void}
 */
JQueryTools.overlay.OverlayOptions.prototype.onClose = function(event) {};
/**
 * @record
 * @struct
 */
JQueryTools.overlay.MaskOptions = function() {};
 /** @type {string} */
JQueryTools.overlay.MaskOptions.prototype.color;
 /** @type {number} */
JQueryTools.overlay.MaskOptions.prototype.loadSpeed;
 /** @type {number} */
JQueryTools.overlay.MaskOptions.prototype.opacity;
/**
 * @record
 * @struct
 */
JQueryTools.overlay.Overlay = function() {};

/**
 * Closes the overlay.
 * @return {!JQueryTools.overlay.Overlay}
 */
JQueryTools.overlay.Overlay.prototype.close = function() {};

/**
 * Returns the closing element(s) as a jQuery object.
 * @return {?<!HTMLElement>}
 */
JQueryTools.overlay.Overlay.prototype.getClosers = function() {};

/**
 * Returns the configuration for the overlay.
 * @return {!JQueryTools.overlay.OverlayOptions}
 */
JQueryTools.overlay.Overlay.prototype.getConf = function() {};

/**
 * Returns the overlayed element as a jQuery object.
 * @return {?<!HTMLElement>}
 */
JQueryTools.overlay.Overlay.prototype.getOverlay = function() {};

/**
 * Returns the triggering element as a jQuery object.
 * @return {?<!HTMLElement>}
 */
JQueryTools.overlay.Overlay.prototype.getTrigger = function() {};

/**
 * Returns `true` if the overlay is opened.
 * @return {boolean}
 */
JQueryTools.overlay.Overlay.prototype.isOpened = function() {};

/**
 * Opens the overlay.
 * @return {!JQueryTools.overlay.Overlay}
 */
JQueryTools.overlay.Overlay.prototype.load = function() {};
