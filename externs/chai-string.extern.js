/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/chai-string/index.d.ts:

/**
 * @param {string} expected
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.startsWith = function(expected, message) {};

/**
 * @param {string} expected
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.startWith = function(expected, message) {};

/**
 * @param {string} expected
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.endsWith = function(expected, message) {};

/**
 * @param {string} expected
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.endWith = function(expected, message) {};

/**
 * @param {string} expected
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.equalIgnoreCase = function(expected, message) {};

/**
 * @param {string} expected
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.equalIgnoreSpaces = function(expected, message) {};

/**
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.singleLine = function(message) {};

/**
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.reverseOf = function(message) {};

/**
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.palindrome = function(message) {};

/**
 * @param {string} substr
 * @param {number} expected
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.entriesCount = function(substr, expected, message) {};

/**
 * @param {string} val
 * @param {string} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.startsWith = function(val, exp, msg) {};

/**
 * @param {string} val
 * @param {string} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notStartsWith = function(val, exp, msg) {};

/**
 * @param {string} val
 * @param {string} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.endsWith = function(val, exp, msg) {};

/**
 * @param {string} val
 * @param {string} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notEndsWith = function(val, exp, msg) {};

/**
 * @param {string} val
 * @param {string} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.equalIgnoreCase = function(val, exp, msg) {};

/**
 * @param {string} val
 * @param {string} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notEqualIgnoreCase = function(val, exp, msg) {};

/**
 * @param {string} val
 * @param {string} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.equalIgnoreSpaces = function(val, exp, msg) {};

/**
 * @param {string} val
 * @param {string} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notEqualIgnoreSpaces = function(val, exp, msg) {};

/**
 * @param {string} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.singleLine = function(val, msg) {};

/**
 * @param {string} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notSingleLine = function(val, msg) {};

/**
 * @param {string} val
 * @param {string} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.reverseOf = function(val, exp, msg) {};

/**
 * @param {string} val
 * @param {string} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notReverseOf = function(val, exp, msg) {};

/**
 * @param {string} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.palindrome = function(val, msg) {};

/**
 * @param {string} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notPalindrome = function(val, msg) {};

/**
 * @param {string} str
 * @param {string} substr
 * @param {number} count
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.entriesCount = function(str, substr, count, msg) {};

/**
 * @param {?} chai
 * @param {?} utils
 * @return {void}
 */
function chaiString(chai, utils) {}

/* TODO: ExportAssignment in  */
