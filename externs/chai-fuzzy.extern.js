/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/chai-fuzzy/index.d.ts:

/**
 * Compare object attributes and values rather than checking to see if
 * they're the same reference.
 * @param {?} expected
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.like = function(expected, message) {};

/**
 * Compare object attributes and values rather than checking to see if
 * they're the same reference.
 * @param {?} expected
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.notLike = function(expected, message) {};

/**
 * Check the first level of the container for a value like the one provided.
 * @param {?} expected
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.containOneLike = function(expected, message) {};

/**
 * Check the first level of the container for a value like the one provided.
 * @param {?} expected
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.notContainOneLike = function(expected, message) {};

/**
 * Check that the given javascript object is like the JSON-ified expected
 * value. Useful for checking stringification and parsing of an object.
 * @param {?} expected
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.jsonOf = function(expected, message) {};

/**
 * Check that the given javascript object is like the JSON-ified expected
 * value. Useful for checking stringification and parsing of an object.
 * @param {?} expected
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.notJsonOf = function(expected, message) {};

/**
 * Compare object attributes and values rather than checking to see if
 * they're the same reference.
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @return {void}
 */
Chai.Assert.prototype.like = function(actual, expected, message) {};

/**
 * Compare object attributes and values rather than checking to see if
 * they're the same reference.
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @return {void}
 */
Chai.Assert.prototype.notLike = function(actual, expected, message) {};

/**
 * Check the first level of the container for a value like the one provided.
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @return {void}
 */
Chai.Assert.prototype.containOneLike = function(actual, expected, message) {};

/**
 * Check the first level of the container for a value like the one provided.
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @return {void}
 */
Chai.Assert.prototype.notContainOneLike = function(actual, expected, message) {};

/**
 * Check that the given javascript object is like the JSON-ified expected
 * value. Useful for checking stringification and parsing of an object.
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @return {void}
 */
Chai.Assert.prototype.jsonOf = function(actual, expected, message) {};

/**
 * Check that the given javascript object is like the JSON-ified expected
 * value. Useful for checking stringification and parsing of an object.
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @return {void}
 */
Chai.Assert.prototype.notJsonOf = function(actual, expected, message) {};

/**
 * @param {?} chai
 * @param {?} utils
 * @return {void}
 */
function chaiFuzzy(chai, utils) {}

/* TODO: ExportAssignment in  */
