/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/sass-graph/index.d.ts:
/** @const */
var SassGraph = {};
/**
 * @record
 * @struct
 */
SassGraph.Options = function() {};
 /** @type {!Array<string>} */
SassGraph.Options.prototype.loadPath;
 /** @type {!Array<string>} */
SassGraph.Options.prototype.extensions;

/** @typedef {!Object<string,{imports: !Array<string>, importedBy: !Array<string>, modified: string}>} */
SassGraph.Node;
/**
 * @record
 * @struct
 */
SassGraph.Graph = function() {};
 /** @type {string} */
SassGraph.Graph.prototype.dir;
 /** @type {!Array<string>} */
SassGraph.Graph.prototype.loadPaths;
 /** @type {!Array<string>} */
SassGraph.Graph.prototype.extensions;
 /** @type {!Object<string,{imports: !Array<string>, importedBy: !Array<string>, modified: string}>} */
SassGraph.Graph.prototype.index;

/**
 * Add a sass file to the graph
 * @param {string} filepath
 * @param {string=} parent
 * @return {void}
 */
SassGraph.Graph.prototype.addFile = function(filepath, parent) {};

/**
 * visits all files that are ancestors of the provided file
 * @param {string} filepath
 * @param {function(string, !Object<string,{imports: !Array<string>, importedBy: !Array<string>, modified: string}>): ?} callback
 * @return {void}
 */
SassGraph.Graph.prototype.visitAncestors = function(filepath, callback) {};

/**
 * Visits all files that are descendents of the provided file
 * @param {string} filepath
 * @param {function(string, !Object<string,{imports: !Array<string>, importedBy: !Array<string>, modified: string}>): ?} callback
 * @return {void}
 */
SassGraph.Graph.prototype.visitDescendents = function(filepath, callback) {};

/**
 * A generic visitor that uses an edgeCallback to find the edges to traverse
 * for a node
 * @param {string} filepath
 * @param {function(string, !Object<string,{imports: !Array<string>, importedBy: !Array<string>, modified: string}>): ?} callback
 * @param {function(string, !Object<string,{imports: !Array<string>, importedBy: !Array<string>, modified: string}>): ?} edgeCallback
 * @param {!Array<string>=} visited
 * @return {void}
 */
SassGraph.Graph.prototype.visit = function(filepath, callback, edgeCallback, visited) {};

/**
 * @param {string} filepath
 * @param {!SassGraph.Options=} options
 * @return {!SassGraph.Graph}
 */
SassGraph.parseFile = function(filepath, options) {};

/**
 * @param {string} dirpath
 * @param {!SassGraph.Options=} options
 * @return {!SassGraph.Graph}
 */
SassGraph.parseDir = function(dirpath, options) {};

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
