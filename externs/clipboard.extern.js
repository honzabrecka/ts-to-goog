/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/clipboard/index.d.ts:

/**
 * @constructor
 * @struct
 * @param {(string|!Element|!NodeListOf<!Element>)} selector
 * @param {!Clipboard.Options=} options
 */
function Clipboard(selector, options) {}

/**
 * Subscribes to events that indicate the result of a copy/cut operation.
 * @param {string} type {"success" | "error"} Event type ('success' or 'error').
 * @param {function(!Clipboard.Event): void|function(!Array<?>): void} handler Callback function.
 * @return {Clipboard}
 */
Clipboard.prototype.on = function(type, handler) {};

/**
 * Clears all event bindings.
 * @return {void}
 */
Clipboard.prototype.destroy = function() {};

/**
 * Checks if clipboard.js is supported
 * @return {boolean}
 */
Clipboard.prototype.isSupported = function() {};
/**
 * @record
 * @struct
 */
Clipboard.Options = function() {};

/**
 * Overwrites default command ('cut' or 'copy').
 * @param {!Element} elem
 * @return {string}
 */
Clipboard.Options.prototype.action = function(elem) {};

/**
 * Overwrites default target input element.
 * @param {!Element} elem
 * @return {!Element}
 */
Clipboard.Options.prototype.target = function(elem) {};

/**
 * Returns the explicit text to copy.
 * @param {!Element} elem
 * @return {string}
 */
Clipboard.Options.prototype.text = function(elem) {};
/**
 * @record
 * @struct
 */
Clipboard.Event = function() {};
 /** @type {string} */
Clipboard.Event.prototype.action;
 /** @type {string} */
Clipboard.Event.prototype.text;
 /** @type {!Element} */
Clipboard.Event.prototype.trigger;

/**
 * @return {void}
 */
Clipboard.Event.prototype.clearSelection = function() {};

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
