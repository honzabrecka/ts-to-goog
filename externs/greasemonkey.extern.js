/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/greasemonkey/index.d.ts:
 /** @type {!Window} */
var unsafeWindow;
 /** @type {{script: {description: string, excludes: !Array<string>, includes: !Array<string>, matches: !Array<string>, name: string, namespace: string, resources: !Object, run-at: string, unwrap: boolean, version: string}, scriptMetaStr: string, scriptWillUpdate: boolean, version: string}} */
var GM_info;

/**
 * Deletes an existing name / value pair from the script storage.
 * @see {\@link http://wiki.greasespot.net/GM_deleteValue}
 * @param {string} name  a name of the pair to delete.
 * @return {void}
 */
function GM_deleteValue(name) {}

/**
 * Retrieves a value from the script storage.
 * @see {\@link http://wiki.greasespot.net/GM_getValue}
 * @param {string} name          a name to retrieve.
 * @param {?|string|number|boolean=} defaultValue  a value to be returned when the name does not exist.
 * @return {?|string|number|boolean} a retrieved value, or passed default value, or undefined.
 */
function GM_getValue(name, defaultValue) {}

/**
 * Retrieves an array of names stored in the script storage.
 * @see {\@link http://wiki.greasespot.net/GM_listValues}
 * @return {!Array<string>} an array of names in the storage.
 */
function GM_listValues() {}

/**
 * Stores a name / value pair to the script storage.
 * @see {\@link http://wiki.greasespot.net/GM_setValue}
 * @param {string} name   a name of the pair.
 * @param {string|boolean|number} value  a value to be stored.
 * @return {void}
 */
function GM_setValue(name, value) {}

/**
 * Gets a content of a resouce defined by {\@link http://wiki.greasespot.net/Metadata_Block#.40resource|\@resource}.
 * @see {\@link http://wiki.greasespot.net/GM_getResourceText}
 * @param {string} resourceName  a name of the resource to get.
 * @return {string} the content of the resource.
 */
function GM_getResourceText(resourceName) {}

/**
 * Gets a URL of a resource defined by {\@link http://wiki.greasespot.net/Metadata_Block#.40resource|\@resource}.
 * @see {\@link http://wiki.greasespot.net/GM_getResourceURL}
 * @param {string} resourceName  a name of the resource.
 * @return {string} a URL that returns the content of the resource.
 */
function GM_getResourceURL(resourceName) {}

/**
 * Adds CSS to the content page.
 * @see {\@link http://wiki.greasespot.net/GM_addStyle}
 * @param {string} css  a CSS string. It can have multiple style definitions.
 * @return {void}
 */
function GM_addStyle(css) {}

/**
 * Writes a message as a log to the console with the script identifier.
 * @see {\@link http://wiki.greasespot.net/GM_log}
 * @param {?} message  a message to be written.
 * @return {void}
 */
function GM_log(message) {}

/**
 * Opens a URL in a new tab.
 * @see {\@link http://wiki.greasespot.net/GM_openInTab}
 * @param {string} url  a URL to open.
 * @return {!Window} window object of the opened tab.
 */
function GM_openInTab(url) {}

/**
 * Registers an item as a submenu of User Script Commands.
 * @see {\@link http://wiki.greasespot.net/GM_registerMenuCommand}
 * @param {string} caption      a caption of the menu item.
 * @param {!Function} commandFunc  a function to be invoked when the item has been selected.
 * @param {string=} accessKey    a single character that can be used to select the item by keyboard.
 *                      It should be a letter in the caption.
 * @return {void}
 */
function GM_registerMenuCommand(caption, commandFunc, accessKey) {}

/**
 * Sets a text to the clipboard of the opeating system.
 * @see {\@link http://wiki.greasespot.net/GM_setClipboard}
 * @param {string} text  a text to be set to the clipboard.
 * @return {void}
 */
function GM_setClipboard(text) {}
/**
 * @record
 * @struct
 */
function GMXMLHttpRequestOptions() {}
 /** @type {boolean} */
GMXMLHttpRequestOptions.prototype.binary;
 /** @type {?} */
GMXMLHttpRequestOptions.prototype.context;
 /** @type {string} */
GMXMLHttpRequestOptions.prototype.data;
 /** @type {!Object} */
GMXMLHttpRequestOptions.prototype.headers;
 /** @type {string} */
GMXMLHttpRequestOptions.prototype.method;
 /** @type {function(!GMXMLHttpRequestResponse): ?} */
GMXMLHttpRequestOptions.prototype.onabort;
 /** @type {function(!GMXMLHttpRequestResponse): ?} */
GMXMLHttpRequestOptions.prototype.onerror;
 /** @type {function(!GMXMLHttpRequestResponse): ?} */
GMXMLHttpRequestOptions.prototype.onload;
 /** @type {function(!GMXMLHttpRequestProgressResponse): ?} */
GMXMLHttpRequestOptions.prototype.onprogress;
 /** @type {function(!GMXMLHttpRequestResponse): ?} */
GMXMLHttpRequestOptions.prototype.onreadystatechange;
 /** @type {function(!GMXMLHttpRequestResponse): ?} */
GMXMLHttpRequestOptions.prototype.ontimeout;
 /** @type {string} */
GMXMLHttpRequestOptions.prototype.overrideMimeType;
 /** @type {string} */
GMXMLHttpRequestOptions.prototype.password;
 /** @type {boolean} */
GMXMLHttpRequestOptions.prototype.synchronous;
 /** @type {number} */
GMXMLHttpRequestOptions.prototype.timeout;
 /** @type {{onabort: function(!GMXMLHttpRequestResponse): ?, onerror: function(!GMXMLHttpRequestResponse): ?, onload: function(!GMXMLHttpRequestResponse): ?, onprogress: function(!GMXMLHttpRequestProgressResponse): ?}} */
GMXMLHttpRequestOptions.prototype.upload;
 /** @type {string} */
GMXMLHttpRequestOptions.prototype.url;
 /** @type {string} */
GMXMLHttpRequestOptions.prototype.user;
/**
 * @record
 * @struct
 */
function GMXMLHttpRequestResponse() {}
 /** @type {number} */
GMXMLHttpRequestResponse.prototype.readyState;
 /** @type {string} */
GMXMLHttpRequestResponse.prototype.responseHeaders;
 /** @type {string} */
GMXMLHttpRequestResponse.prototype.responseText;
 /** @type {number} */
GMXMLHttpRequestResponse.prototype.status;
 /** @type {string} */
GMXMLHttpRequestResponse.prototype.statusText;
 /** @type {?} */
GMXMLHttpRequestResponse.prototype.context;
 /** @type {string} */
GMXMLHttpRequestResponse.prototype.finalUrl;
/**
 * @extends {GMXMLHttpRequestResponse}
 * @record
 * @struct
 */
function GMXMLHttpRequestProgressResponse() {}
 /** @type {boolean} */
GMXMLHttpRequestProgressResponse.prototype.lengthComputable;
 /** @type {number} */
GMXMLHttpRequestProgressResponse.prototype.loaded;
 /** @type {number} */
GMXMLHttpRequestProgressResponse.prototype.total;
/**
 * @record
 * @struct
 */
function GMXMLHttpRequestAsyncResult() {}

/**
 * @return {void}
 */
GMXMLHttpRequestAsyncResult.prototype.abort = function() {};
/**
 * @record
 * @struct
 */
function GMXMLHttpRequestSyncResult() {}
 /** @type {string} */
GMXMLHttpRequestSyncResult.prototype.finalUrl;
 /** @type {number} */
GMXMLHttpRequestSyncResult.prototype.readyState;
 /** @type {string} */
GMXMLHttpRequestSyncResult.prototype.responseHeaders;
 /** @type {string} */
GMXMLHttpRequestSyncResult.prototype.responseText;
 /** @type {number} */
GMXMLHttpRequestSyncResult.prototype.status;
 /** @type {string} */
GMXMLHttpRequestSyncResult.prototype.statusText;

/**
 * @return {void}
 */
GMXMLHttpRequestSyncResult.prototype.abort = function() {};
/**
 * @extends {GMXMLHttpRequestAsyncResult}
 * @extends {GMXMLHttpRequestSyncResult}
 * @record
 * @struct
 */
function GMXMLHttpRequestResult() {}

/**
 * Sends a HTTP request to a URL.
 * @see {\@link http://wiki.greasespot.net/GM_setClipboard}
 * @param {!GMXMLHttpRequestOptions} options  options and callbacks for HTTP request.
 * @return {!GMXMLHttpRequestResult} an object which can abort the request.
 *           If the request is sent in the synchronous mode, it also contains the response information.
 */
function GM_xmlhttpRequest(options) {}
