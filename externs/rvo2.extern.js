/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/rvo2/index.d.ts:
/** @const */
var rvo2 = {};
/**
 * @constructor
 * @struct
 */
rvo2.Line = function() {};
 /** @type {!rvo2.Vector2} */
rvo2.Line.prototype.point;
 /** @type {!rvo2.Vector2} */
rvo2.Line.prototype.direction;
/**
 * @constructor
 * @struct
 */
rvo2.Agent = function() {};
/**
 * @constructor
 * @struct
 */
rvo2.KdTree = function() {};
/**
 * @constructor
 * @struct
 */
rvo2.Obstacle = function() {};

/**
 * @constructor
 * @struct
 * Creates an instance of Vector2.
 * 
 * 
 * \@memberOf Vector2
 * @param {number} x
 * @param {number} y
 */
rvo2.Vector2 = function(x, y) {};

/**
 * Returns the x position.
 * 
 * 
 * \@memberOf Vector2
 * @return {number}
 */
rvo2.Vector2.prototype.x = function() {};

/**
 * Returns the y position.
 * 
 * 
 * \@memberOf Vector2
 * @return {number}
 */
rvo2.Vector2.prototype.y = function() {};

/**
 * Add two vectors.
 * 
 * 
 * \@memberOf Vector2
 * @param {!rvo2.Vector2} v
 * @return {!rvo2.Vector2}
 */
rvo2.Vector2.prototype.add = function(v) {};

/**
 * Subtract two vectors.
 * 
 * 
 * \@memberOf Vector2
 * @param {!rvo2.Vector2} v
 * @return {!rvo2.Vector2}
 */
rvo2.Vector2.prototype.sub = function(v) {};

/**
 * Multiplies the vector by a scalar.
 * 
 * 
 * \@memberOf Vector2
 * @param {number} s
 * @return {!rvo2.Vector2}
 */
rvo2.Vector2.prototype.mul = function(s) {};

/**
 * @constructor
 * @struct
 * @param {number=} size
 */
rvo2.vectorvector = function(size) {};

/* TODO: IndexSignature: rvo2 */

/**
 * @constructor
 * @struct
 * Constructs a simulator instance and sets the default
 * properties for any new agent that is added.
 * 
 *                             Must be positive.
 *                             to center point) to other agents a new agent
 *                             takes into account in the navigation. The
 *                             larger this number, the longer he running
 *                             time of the simulation. If the number is too
 *                             low, the simulation will not be safe. Must be
 *                             non-negative.
 *                             new agent takes into account in the
 *                             navigation. The larger this number, the
 *                             longer the running time of the simulation.
 *                             If the number is too low, the simulation
 *                             will not be safe.
 *                             a new agent's velocities that are computed
 *                             by the simulation are safe with respect to
 *                             other agents. The larger this number, the
 *                             sooner an agent will respond to the presence
 *                             of other agents, but the less freedom the
 *                             agent has in choosing its velocities.
 *                             Must be positive.
 *                             a new agent's velocities that are computed
 *                             by the simulation are safe with respect to
 *                             obstacles. The larger this number, the
 *                             sooner an agent will respond to the presence
 *                             of obstacles, but the less freedom the agent
 *                             has in choosing its velocities.
 *                             Must be positive.
 *                             Must be non-negative.
 *                             Must be non-negative.
 *                             velocity of a new agent (optional).
 * @param {number=} timeStep
 * @param {number=} neighborDist
 * @param {number=} maxNeighbors
 * @param {number=} timeHorizon
 * @param {number=} timeHorizonObst
 * @param {number=} radius
 * @param {number=} maxSpeed
 * @param {!rvo2.Vector2=} velocity
 */
rvo2.RVOSimulator = function(timeStep, neighborDist, maxNeighbors, timeHorizon, timeHorizonObst, radius, maxSpeed, velocity) {};

/**
 * Sets the time step of the simulation.
 * 
 *                             Must be positive.
 * 
 * \@memberOf sim
 * @param {number} timeStep
 * @return {void}
 */
rvo2.RVOSimulator.prototype.setTimeStep = function(timeStep) {};

/**
 * Lets the simulator perform a simulation step and updates the
 * two-dimensional position and two-dimensional velocity of each agent.
 * 
 * \@memberOf RVOSimulator
 * @return {void}
 */
rvo2.RVOSimulator.prototype.doStep = function() {};

/**
 * Sets the default properties for any new agent that is added.
 *                             to center point) to other agents a new agent
 *                             takes into account in the navigation. The
 *                             larger this number, the longer he running
 *                             time of the simulation. If the number is too
 *                             low, the simulation will not be safe.
 *                             Must be non-negative.
 *                             new agent takes into account in the
 *                             navigation. The larger this number, the
 *                             longer the running time of the simulation.
 *                             If the number is too low, the simulation
 *                             will not be safe.
 *                             a new agent's velocities that are computed
 *                             by the simulation are safe with respect to
 *                             other agents. The larger this number, the
 *                             sooner an agent will respond to the presence
 *                             of other agents, but the less freedom the
 *                             agent has in choosing its velocities.
 *                             Must be positive.
 *                             a new agent's velocities that are computed
 *                             by the simulation are safe with respect to
 *                             obstacles. The larger this number, the
 *                             sooner an agent will respond to the presence
 *                             of obstacles, but the less freedom the agent
 *                             has in choosing its velocities.
 *                             Must be positive.
 *                             Must be non-negative.
 *                             Must be non-negative.
 *                             velocity of a new agent (optional).
 * @param {number} neighborDist
 * @param {number} maxNeighbors
 * @param {number} timeHorizon
 * @param {number} timeHorizonObst
 * @param {number} radius
 * @param {number} maxSpeed
 * @param {!rvo2.Vector2=} velocity
 * @return {void}
 */
rvo2.RVOSimulator.prototype.setAgentDefaults = function(neighborDist, maxNeighbors, timeHorizon, timeHorizonObst, radius, maxSpeed, velocity) {};

/**
 * Adds a new agent with default properties to the simulation.
 * 
 * 
 * \@membeim
 * Adds a new agent to the simulation.
 * 
 *                             this agent.
 *                             center point) to other agents this agent
 *                             takes into account in the navigation. The
 *                             larger this number, the longer the running
 *                             of the simulation. If the number is too
 *                             low, the simulation will not be safe.
 *                             Must be non-negative.
 *                             agent takes into account in the navigation.
 *                             The larger this number, the longer the
 *                             running time of the simulation. If the
 *                             number is too low, the simulation will not
 *                             safe.
 *                             agent's velocities that are computed by the
 *                             simulation are safe with respect to other
 *                             agents. The larger this number, the sooner
 *                             this agent will respond to the presence of
 *                             other agents, but the less freedom this
 *                             agent has in choosing its velocities.
 *                             be positive.
 *                             agevelocities that are computed by the
 *                             simulation are safe with respect to
 *                             obst. The larger this number, the
 *                             sooner this agent will respond to the
 *                             presence of obstacles, but the less freedom
 *                             this agent has in choosing its velocities.
 *                             Must be positive.
 *                             Must be non-negative.
 *                             Must be non-negative.
 *                             of this agent (optional).
 * @param {!rvo2.Vector2} position
 * @param {number=} neighborDist
 * @param {number=} maxNeighbors
 * @param {number=} timeHorizon
 * @param {number=} timeHorizonObst
 * @param {number=} radius
 * @param {number=} maxSpeed
 * @param {!rvo2.Vector2=} velocity
 * @return {number}
 */
rvo2.RVOSimulator.prototype.addAgent = function(position, neighborDist, maxNeighbors, timeHorizon, timeHorizonObst, radius, maxSpeed, velocity) {};

/**
 * Adds a new obstacle to the simulation.
 * 
 * To add a "negative" obstacle, e.g. a bounding polygon around
 * the environment, the vertices should be listed in clockwise order.
 * 
 *             obstacle in counterclockwise order.
 *             or RVO::RVO_ERROR when the number of vertices is less than two.
 * @param {!rvo2.vectorvector} vertices
 * @return {number}
 */
rvo2.RVOSimulator.prototype.addObstacle = function(vertices) {};

/**
 * Returns the position of agent at the specified index.
 * 
 * 
 * \@memberOf sim
 * Returns the two-dimensional position of a specified
 *             agent.
 *                         is to be retrieved.
 * @param {number} index_or_agentNo
 * @return {!rvo2.Vector2}
 */
rvo2.RVOSimulator.prototype.getAgentPosition = function(index_or_agentNo) {};

/**
 * Sets the two-dimensional preferred velocity of a specified agent.
 *                             preferred velocity is to be modified.
 *                             preferred velocity.
 * @param {number} agentNo
 * @param {!rvo2.Vector2} prefVelocity
 * @return {void}
 */
rvo2.RVOSimulator.prototype.setAgentPrefVelocity = function(agentNo, prefVelocity) {};

/**
 * Returns the specified agent neighbor of the specified agent.
 * 
 *                             neighbor is to be retrieved.
 *                             retrieved.
 * @param {number} agentNo
 * @param {number} neighborNo
 * @return {number} The number of the neighboring agent.
 */
rvo2.RVOSimulator.prototype.getAgentAgentNeighbor = function(agentNo, neighborNo) {};

/**
 * Returns the maximum neighbor count of a specified agent.
 * 
 *                         to be retrieved.
 * @param {number} agentNo
 * @return {number}
 */
rvo2.RVOSimulator.prototype.getAgentMaxNeighbors = function(agentNo) {};

/**
 * Returns the maximum speed of a specified agent.
 * 
 * @param {number} agentNo
 * @return {number}
 */
rvo2.RVOSimulator.prototype.getAgentMaxSpeed = function(agentNo) {};

/**
 * Returns the maximum neighbor distance of a specified agent.
 *                         neighbor distance is to be retrieved.
 * @param {number} agentNo
 * @return {number} The present maximum neighbor distance of the agent.
 */
rvo2.RVOSimulator.prototype.getAgentNeighborDist = function(agentNo) {};

/**
 * Returns the count of agent neighbors taken into account to
 * compute the current velocity for the specified agent.
 * 
 *                         neighbors is to be retrieved.
 *             the current velocity for the specified agent.
 * @param {number} agentNo
 * @return {number}
 */
rvo2.RVOSimulator.prototype.getAgentNumAgentNeighbors = function(agentNo) {};

/**
 * Returns the count of obstacle neighbors taken into account
 * to compute the current velocity for the specified agent.
 * 
 *                         obstacle neighbors is to be retrieved.
 *             compute the current velocity for the specified agent.
 * @param {number} agentNo
 * @return {number}
 */
rvo2.RVOSimulator.prototype.getAgentNumObstacleNeighbors = function(agentNo) {};

/**
 * Returns the count of ORCAconstraints used to compute
 * 
 * the current velocity for the specified agent.
 * 
 *                        constraints is to be retrieved.
 * 
 * 
 *             velocity for the specified agent.
 * @param {number} agentNo
 * @return {number}
 */
rvo2.RVOSimulator.prototype.getAgentNumORCALines = function(agentNo) {};

/**
 * Returns the specified obstacle neighbor of the specified agent.
 * 
 *                         neighbor is to be retrieved.
 *                            retrieved.
 * @param {number} agentNo
 * @param {number} neighborNo
 * @return {number}
 */
rvo2.RVOSimulator.prototype.getAgentObstacleNeighbor = function(agentNo, neighborNo) {};

/**
 * Returns the specified ORCA constraint of the specified agent.
 * 
 * The halfplane to the left of the line is the region of
 * permissible velocities with respect to the specified
 * ORCAconstraint.
 * 
 * 
 * 
 * 
 * @param {number} agentNo
 * @param {number} lineNo
 * @return {!rvo2.Line}
 */
rvo2.RVOSimulator.prototype.getAgentORCALine = function(agentNo, lineNo) {};

/**
 * Returns the two-dimensional preferred velocity of a
 *             specified agent.
 *             preferred velocity is to be retrieved.
 * @param {number} agentNo
 * @return {!rvo2.Vector2}
 */
rvo2.RVOSimulator.prototype.getAgentPrefVelocity = function(agentNo) {};

/**
 * Returns the radius of a specified agent.
 * @param {number} agentNo
 * @return {number}
 */
rvo2.RVOSimulator.prototype.getAgentRadius = function(agentNo) {};

/**
 * Returns the time horizon of a specified agent.
 * @param {number} agentNo
 * @return {number}
 */
rvo2.RVOSimulator.prototype.getAgentTimeHorizon = function(agentNo) {};

/**
 * Returns the time horizon with respect to obstacles of a specified agent.
 * 
 *                         with respect to obstacles is to be retrieved.
 *             agent.
 * @param {number} agentNo
 * @return {number}
 */
rvo2.RVOSimulator.prototype.getAgentTimeHorizonObst = function(agentNo) {};

/**
 * Returns the two-dimensional linear velocity of a
 *             specified agent.
 *                         velocity is to be retrieved.
 * @param {number} agentNo
 * @return {!rvo2.Vector2}
 */
rvo2.RVOSimulator.prototype.getAgentVelocity = function(agentNo) {};

/**
 * Returns the global time of the simulation.
 * 
 * @return {number}
 */
rvo2.RVOSimulator.prototype.getGlobalTime = function() {};

/**
 * Returns the count of agents in the simulation.
 * 
 * @return {number}
 */
rvo2.RVOSimulator.prototype.getNumAgents = function() {};

/**
 * Returns the count of obstacle vertices in the simulation.
 * 
 * @return {number}
 */
rvo2.RVOSimulator.prototype.getNumObstacleVertices = function() {};

/**
 * Returns the two-dimensional position of a specified obstacle vertex.
 * @param {number} vertexNo
 * @return {!rvo2.Vector2}
 */
rvo2.RVOSimulator.prototype.getObstacleVertex = function(vertexNo) {};

/**
 * Returns the number of the obstacle vertex succeeding the specified obstacle vertex in its polygon.
 * 
 *                          successor is to be retrieved.
 *             obstacle vertex in its polygon.
 * @param {number} vertexNo
 * @return {number}
 */
rvo2.RVOSimulator.prototype.getNextObstacleVertexNo = function(vertexNo) {};

/**
 * Returns the number of the obstacle vertex preceding the specified obstacle
 * vertex in its polygon.
 * 
 *                          predecessor is to be retrieved.
 *             obstacle vertex in its polygon.
 * @param {number} vertexNo
 * @return {number}
 */
rvo2.RVOSimulator.prototype.getPrevObstacleVertexNo = function(vertexNo) {};

/**
 * Returns the time step of the simulation.
 * 
 * @return {number}
 */
rvo2.RVOSimulator.prototype.getTimeStep = function() {};

/**
 * Processes the obstacles that have been added so that they are accounted for in
 * the simulation.
 * 
 * Obstacles added to the simulation after this function has
 * been called are not accounted for in the simulation.
 * @return {void}
 */
rvo2.RVOSimulator.prototype.processObstacles = function() {};

/**
 * Performs a visibility query between the two specified points with respect to
 * the obstacles
 * 
 *                        connecting the two points and the obstacles
 *                        in order for the points to be mutually
 *                        visible (optional). Must be non-negative.
 * visible. Returns true when the obstacles have not been processed.
 * @param {!rvo2.Vector2} point1
 * @param {!rvo2.Vector2} point2
 * @param {number=} radius
 * @return {number}
 */
rvo2.RVOSimulator.prototype.queryVisibility = function(point1, point2, radius) {};

/**
 * Computes the length of a specified two-dimensional vector.
 * 
 * 
 * \@memberOf sim
 * @param {!rvo2.Vector2} v
 * @return {number}
 */
rvo2.abs = function(v) {};

/**
 * Computes the squared length of a specified two-dimensional vector.
 * @param {!rvo2.Vector2} v
 * @return {number}
 */
rvo2.absSq = function(v) {};

/**
 * Computes the determinant of a two-dimensional square matrix with
 * rows consisting of the specified two-dimensional vectors.
 * @param {!rvo2.Vector2} v1
 * @param {!rvo2.Vector2} v2
 * @return {number}
 */
rvo2.det = function(v1, v2) {};

/**
 * Computes the normalization of the specified two-dimensional vector.
 *                          is to be computed.
 * returns {Vector2}   The normalization of the two-dimensional vector.
 * @param {!rvo2.Vector2} vector
 * @return {!rvo2.Vector2}
 */
rvo2.normalize = function(vector) {};

/* TODO: ExportAssignment in  */
