/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/uikit/index.d.ts:
/** @const */
var UIkit = {};
/**
 * @record
 * @struct
 */
UIkit.DropdownElement = function() {};

/**
 * Show the dropdown
 * @return {void}
 */
UIkit.DropdownElement.prototype.show = function() {};

/**
 * Hide the dropdown
 * @param {boolean=} force
 * @return {void}
 */
UIkit.DropdownElement.prototype.hide = function(force) {};

/** @typedef {string} */
UIkit.DropdownPosition;
/**
 * @record
 * @struct
 */
UIkit.DropdownOptions = function() {};
 /** @type {string} */
UIkit.DropdownOptions.prototype.pos;
 /** @type {string} */
UIkit.DropdownOptions.prototype.mode;
 /** @type {number} */
UIkit.DropdownOptions.prototype.remaintime;
 /** @type {(string|boolean|?<!HTMLElement>)} */
UIkit.DropdownOptions.prototype.justify;
 /** @type {(string|?<!HTMLElement>|!Window)} */
UIkit.DropdownOptions.prototype.boundary;
 /** @type {number} */
UIkit.DropdownOptions.prototype.delay;
 /** @type {(string|?<!HTMLElement>)} */
UIkit.DropdownOptions.prototype.dropdownSelector;
 /** @type {number} */
UIkit.DropdownOptions.prototype.hoverDelayIdle;
 /** @type {(boolean|string)} */
UIkit.DropdownOptions.prototype.preventflip;

/** @typedef {function((string|?<!HTMLElement>), !UIkit.DropdownOptions): !UIkit.DropdownElement} */
UIkit.Dropdown;
/**
 * @record
 * @struct
 */
UIkit.ModalElement = function() {};

/**
 * Show the modal
 * @return {void}
 */
UIkit.ModalElement.prototype.show = function() {};

/**
 * Hide the modal
 * @return {void}
 */
UIkit.ModalElement.prototype.hide = function() {};

/**
 * Return if the modal is active on the page
 * @return {boolean}
 */
UIkit.ModalElement.prototype.isActive = function() {};
/**
 * @record
 * @struct
 */
UIkit.ModalOptions = function() {};
 /** @type {boolean} */
UIkit.ModalOptions.prototype.keyboard;
 /** @type {boolean} */
UIkit.ModalOptions.prototype.bgclose;
 /** @type {number} */
UIkit.ModalOptions.prototype.minScrollHeight;
 /** @type {boolean} */
UIkit.ModalOptions.prototype.center;
 /** @type {boolean} */
UIkit.ModalOptions.prototype.modal;
/**
 * @record
 * @struct
 */
UIkit.Modal = function() {};

/* TODO: CallSignature: UIkit */

/**
 * Create a alert dialog
 * @param {string} message
 * @return {void}
 */
UIkit.Modal.prototype.alert = function(message) {};

/**
 * Create a confirm dialog
 * Create a confirm dialog and execute onconfirm on confirmation
 * Create a confirm dialog and execute onconfirm on confirmation and oncancel on cancelation.
 * @param {string} message
 * @param {!UIkit.ModalOptions|function(): ?=} options_or_onconfirm
 * @param {!UIkit.ModalOptions|function(): ?=} options_or_oncancel
 * @param {!UIkit.ModalOptions=} options
 * @return {void}
 */
UIkit.Modal.prototype.confirm = function(message, options_or_onconfirm, options_or_oncancel, options) {};

/**
 * Create a prompt dialog, where the user enter information
 * @param {string} message
 * @param {string} value
 * @param {function(string): ?=} onsubmit
 * @param {!UIkit.ModalOptions=} options
 * @return {void}
 */
UIkit.Modal.prototype.prompt = function(message, value, onsubmit, options) {};

/**
 * Create a modal that blocks the entire page
 * @param {string} content
 * @param {!UIkit.ModalOptions=} options
 * @return {!UIkit.ModalElement}
 */
UIkit.Modal.prototype.blockUI = function(content, options) {};
/**
 * @record
 * @struct
 */
UIkit.OffCanvas = function() {};

/**
 * Show an off-canvas matching the passed CSS selector
 * @param {string} selector
 * @return {void}
 */
UIkit.OffCanvas.prototype.show = function(selector) {};

/**
 * Hide any active offcanvas. Set force to true, if you don't want any
 * animation
 * \@default false
 * @param {boolean=} force
 * @return {void}
 */
UIkit.OffCanvas.prototype.hide = function(force) {};
/**
 * @record
 * @struct
 */
UIkit.LightBoxOptions = function() {};
 /** @type {string} */
UIkit.LightBoxOptions.prototype.group;
 /** @type {number} */
UIkit.LightBoxOptions.prototype.duration;
 /** @type {boolean} */
UIkit.LightBoxOptions.prototype.keyboard;
/**
 * @record
 * @struct
 */
UIkit.LightBoxItem = function() {};
 /** @type {string} */
UIkit.LightBoxItem.prototype.source;
 /** @type {string} */
UIkit.LightBoxItem.prototype.type;
/**
 * @record
 * @struct
 */
UIkit.LightBoxElement = function() {};

/**
 * Open the lightbox
 * @return {void}
 */
UIkit.LightBoxElement.prototype.show = function() {};
/**
 * @record
 * @struct
 */
UIkit.LightBox = function() {};

/* TODO: CallSignature: UIkit */

/**
 * Create dynamic lightbox
 * @param {!Array<!UIkit.LightBoxItem>} items
 * @return {!UIkit.LightBoxElement}
 */
UIkit.LightBox.prototype.create = function(items) {};

/** @typedef {function(): string} */
UIkit.CallbackAutoComplete;
/**
 * @record
 * @struct
 */
UIkit.AutoCompleteOptions = function() {};
 /** @type {(string|function(): string|!Array<string>)} */
UIkit.AutoCompleteOptions.prototype.source;
 /** @type {number} */
UIkit.AutoCompleteOptions.prototype.minLength;
 /** @type {string} */
UIkit.AutoCompleteOptions.prototype.param;
 /** @type {number} */
UIkit.AutoCompleteOptions.prototype.delay;

/** @typedef {function((string|?<!HTMLElement>), !UIkit.AutoCompleteOptions): ?} */
UIkit.AutoComplete;
/**
 * @record
 * @struct
 */
UIkit.DatePickerOptions = function() {};
 /** @type {number} */
UIkit.DatePickerOptions.prototype.weekstart;
 /** @type {!Object} */
UIkit.DatePickerOptions.prototype.i18n;
 /** @type {string} */
UIkit.DatePickerOptions.prototype.format;
 /** @type {number} */
UIkit.DatePickerOptions.prototype.offsettop;
 /** @type {(string|number|boolean)} */
UIkit.DatePickerOptions.prototype.minDate;
 /** @type {(string|number|boolean)} */
UIkit.DatePickerOptions.prototype.maxDate;
 /** @type {string} */
UIkit.DatePickerOptions.prototype.pos;

/** @typedef {function((string|?<!HTMLElement>), !UIkit.DatePickerOptions): ?} */
UIkit.DatePicker;
/**
 * @record
 * @struct
 */
UIkit.HtmlEditorOptions = function() {};
 /** @type {string} */
UIkit.HtmlEditorOptions.prototype.mode;
 /** @type {!Array<string>} */
UIkit.HtmlEditorOptions.prototype.toolbar;
 /** @type {number} */
UIkit.HtmlEditorOptions.prototype.maxsplitsize;
 /** @type {string} */
UIkit.HtmlEditorOptions.prototype.lblPreview;
 /** @type {string} */
UIkit.HtmlEditorOptions.prototype.lblCodeview;

/** @typedef {function((string|?<!HTMLElement>), !UIkit.HtmlEditorOptions): ?} */
UIkit.HtmlEditor;
/**
 * @record
 * @struct
 */
UIkit.SliderOptions = function() {};
 /** @type {boolean} */
UIkit.SliderOptions.prototype.center;
 /** @type {boolean} */
UIkit.SliderOptions.prototype.threshold;
 /** @type {boolean} */
UIkit.SliderOptions.prototype.infinite;
 /** @type {string} */
UIkit.SliderOptions.prototype.activecls;
 /** @type {boolean} */
UIkit.SliderOptions.prototype.autoplay;
 /** @type {boolean} */
UIkit.SliderOptions.prototype.pauseOnHover;
 /** @type {number} */
UIkit.SliderOptions.prototype.autoplayInterval;

/** @typedef {function((string|?<!HTMLElement>), !UIkit.SliderOptions): ?} */
UIkit.Slider;
/**
 * @record
 * @struct
 */
UIkit.SlideSetOptions = function() {};
 /** @type {number} */
UIkit.SlideSetOptions.prototype.default;
 /** @type {number} */
UIkit.SlideSetOptions.prototype.small;
 /** @type {number} */
UIkit.SlideSetOptions.prototype.medium;
 /** @type {number} */
UIkit.SlideSetOptions.prototype.large;
 /** @type {number} */
UIkit.SlideSetOptions.prototype.xlarge;
 /** @type {string} */
UIkit.SlideSetOptions.prototype.animation;
 /** @type {number} */
UIkit.SlideSetOptions.prototype.duration;
 /** @type {number} */
UIkit.SlideSetOptions.prototype.delay;
 /** @type {string} */
UIkit.SlideSetOptions.prototype.filter;
 /** @type {boolean} */
UIkit.SlideSetOptions.prototype.autoplay;
 /** @type {boolean} */
UIkit.SlideSetOptions.prototype.pauseOnHover;
 /** @type {number} */
UIkit.SlideSetOptions.prototype.autoplayInterval;

/** @typedef {function((string|?<!HTMLElement>), !UIkit.SlideSetOptions): ?} */
UIkit.SlideSet;
/**
 * @record
 * @struct
 */
UIkit.SlideShowOptions = function() {};
 /** @type {string} */
UIkit.SlideShowOptions.prototype.animation;
 /** @type {number} */
UIkit.SlideShowOptions.prototype.duration;
 /** @type {string} */
UIkit.SlideShowOptions.prototype.height;
 /** @type {number} */
UIkit.SlideShowOptions.prototype.start;
 /** @type {boolean} */
UIkit.SlideShowOptions.prototype.autoplay;
 /** @type {boolean} */
UIkit.SlideShowOptions.prototype.pauseOnHover;
 /** @type {number} */
UIkit.SlideShowOptions.prototype.autoplayInterval;
 /** @type {boolean} */
UIkit.SlideShowOptions.prototype.videoautoplay;
 /** @type {boolean} */
UIkit.SlideShowOptions.prototype.videomute;
 /** @type {boolean} */
UIkit.SlideShowOptions.prototype.kenburns;
 /** @type {string} */
UIkit.SlideShowOptions.prototype.kenburnsanimations;
 /** @type {number} */
UIkit.SlideShowOptions.prototype.slices;

/** @typedef {function((string|?<!HTMLElement>), !UIkit.SlideShowOptions): ?} */
UIkit.SlideShow;
/**
 * @record
 * @struct
 */
UIkit.ParallaxOptions = function() {};
 /** @type {number} */
UIkit.ParallaxOptions.prototype.velocity;
 /** @type {boolean} */
UIkit.ParallaxOptions.prototype.target;
 /** @type {number} */
UIkit.ParallaxOptions.prototype.viewport;
 /** @type {(string|number)} */
UIkit.ParallaxOptions.prototype.media;

/** @typedef {function((string|?<!HTMLElement>), !UIkit.ParallaxOptions): ?} */
UIkit.Parallax;
/**
 * @record
 * @struct
 */
UIkit.AccordionOptions = function() {};
 /** @type {boolean} */
UIkit.AccordionOptions.prototype.showfirst;
 /** @type {boolean} */
UIkit.AccordionOptions.prototype.collapse;
 /** @type {boolean} */
UIkit.AccordionOptions.prototype.animate;
 /** @type {string} */
UIkit.AccordionOptions.prototype.easing;
 /** @type {number} */
UIkit.AccordionOptions.prototype.duration;
 /** @type {string} */
UIkit.AccordionOptions.prototype.toggle;
 /** @type {string} */
UIkit.AccordionOptions.prototype.containers;
 /** @type {string} */
UIkit.AccordionOptions.prototype.clsactive;

/** @typedef {function((string|?<!HTMLElement>), !UIkit.AccordionOptions): ?} */
UIkit.Accordion;
/**
 * @record
 * @struct
 */
UIkit.NotifyOptions = function() {};
 /** @type {string} */
UIkit.NotifyOptions.prototype.message;
 /** @type {string} */
UIkit.NotifyOptions.prototype.status;
 /** @type {number} */
UIkit.NotifyOptions.prototype.timeout;
 /** @type {string} */
UIkit.NotifyOptions.prototype.pos;
/**
 * @record
 * @struct
 */
UIkit.Notify = function() {};

/* TODO: CallSignature: UIkit */

/* TODO: CallSignature: UIkit */
/**
 * @record
 * @struct
 */
UIkit.SearchOptions = function() {};
 /** @type {string} */
UIkit.SearchOptions.prototype.source;
 /** @type {number} */
UIkit.SearchOptions.prototype.minLength;
 /** @type {string} */
UIkit.SearchOptions.prototype.param;
 /** @type {number} */
UIkit.SearchOptions.prototype.delay;

/** @typedef {function((string|?<!HTMLElement>), !UIkit.SearchOptions): ?} */
UIkit.Search;
/**
 * @record
 * @struct
 */
UIkit.NestableOptions = function() {};
 /** @type {string} */
UIkit.NestableOptions.prototype.group;
 /** @type {number} */
UIkit.NestableOptions.prototype.maxDepth;
 /** @type {number} */
UIkit.NestableOptions.prototype.threshold;
 /** @type {string} */
UIkit.NestableOptions.prototype.listNodeName;
 /** @type {string} */
UIkit.NestableOptions.prototype.itemNodeName;
 /** @type {string} */
UIkit.NestableOptions.prototype.listBaseClass;
 /** @type {string} */
UIkit.NestableOptions.prototype.listClass;
 /** @type {string} */
UIkit.NestableOptions.prototype.listitemClass;
 /** @type {string} */
UIkit.NestableOptions.prototype.itemClass;
 /** @type {string} */
UIkit.NestableOptions.prototype.dragClass;
 /** @type {string} */
UIkit.NestableOptions.prototype.movingClass;
 /** @type {string} */
UIkit.NestableOptions.prototype.handleClass;
 /** @type {string} */
UIkit.NestableOptions.prototype.collapsedClass;
 /** @type {string} */
UIkit.NestableOptions.prototype.placeClass;
 /** @type {string} */
UIkit.NestableOptions.prototype.noDragClass;
 /** @type {string} */
UIkit.NestableOptions.prototype.emptyClass;

/** @typedef {function((string|?<!HTMLElement>), !UIkit.NestableOptions): ?} */
UIkit.Nestable;
/**
 * @record
 * @struct
 */
UIkit.SortableOptions = function() {};
 /** @type {string} */
UIkit.SortableOptions.prototype.group;
 /** @type {string} */
UIkit.SortableOptions.prototype.animation;
 /** @type {string} */
UIkit.SortableOptions.prototype.threshold;
 /** @type {string} */
UIkit.SortableOptions.prototype.handleClass;
 /** @type {string} */
UIkit.SortableOptions.prototype.dragCustomClass;

/** @typedef {function((string|?<!HTMLElement>), !UIkit.SortableOptions): ?} */
UIkit.Sortable;
/**
 * @record
 * @struct
 */
UIkit.StickyOptions = function() {};
 /** @type {number} */
UIkit.StickyOptions.prototype.top;
 /** @type {string} */
UIkit.StickyOptions.prototype.animation;
 /** @type {string} */
UIkit.StickyOptions.prototype.clsinit;
 /** @type {string} */
UIkit.StickyOptions.prototype.clsactive;
 /** @type {string} */
UIkit.StickyOptions.prototype.clsinactive;
 /** @type {string} */
UIkit.StickyOptions.prototype.getWidthFrom;
 /** @type {(string|number)} */
UIkit.StickyOptions.prototype.media;
 /** @type {boolean} */
UIkit.StickyOptions.prototype.target;
 /** @type {boolean} */
UIkit.StickyOptions.prototype.showup;
 /** @type {(string|boolean)} */
UIkit.StickyOptions.prototype.boundary;

/** @typedef {function((string|?<!HTMLElement>), !UIkit.StickyOptions): ?} */
UIkit.Sticky;
/**
 * @record
 * @struct
 */
UIkit.TimepickerOptions = function() {};
 /** @type {string} */
UIkit.TimepickerOptions.prototype.format;
 /** @type {number} */
UIkit.TimepickerOptions.prototype.start;
 /** @type {number} */
UIkit.TimepickerOptions.prototype.end;

/** @typedef {function((string|?<!HTMLElement>), !UIkit.TimepickerOptions): ?} */
UIkit.Timepicker;
/**
 * @record
 * @struct
 */
UIkit.TooltipOptions = function() {};
 /** @type {number} */
UIkit.TooltipOptions.prototype.offset;
 /** @type {string} */
UIkit.TooltipOptions.prototype.pos;
 /** @type {boolean} */
UIkit.TooltipOptions.prototype.animation;
 /** @type {number} */
UIkit.TooltipOptions.prototype.delay;
 /** @type {string} */
UIkit.TooltipOptions.prototype.cls;
 /** @type {string} */
UIkit.TooltipOptions.prototype.activeClass;

/** @typedef {function((string|?<!HTMLElement>), !UIkit.TooltipOptions): ?} */
UIkit.Tooltip;
/**
 * @record
 * @struct
 */
UIkit.UploadOptions = function() {};
 /** @type {string} */
UIkit.UploadOptions.prototype.action;
 /** @type {boolean} */
UIkit.UploadOptions.prototype.single;
 /** @type {string} */
UIkit.UploadOptions.prototype.param;
 /** @type {!Object} */
UIkit.UploadOptions.prototype.params;
 /** @type {string} */
UIkit.UploadOptions.prototype.allow;
 /** @type {number} */
UIkit.UploadOptions.prototype.filelimit;

/* TODO: PropertySignature: UIkit."type" */

/**
 * @param {!UIkit.UploadOptions} settings
 * @param {(string|!Array<string>)} files
 * @return {?}
 */
UIkit.UploadOptions.prototype.before = function(settings, files) {};

/**
 * @param {(string|!Array<string>)} files
 * @return {?}
 */
UIkit.UploadOptions.prototype.beforeAll = function(files) {};

/**
 * @param {!XMLHttpRequest} xhr
 * @return {?}
 */
UIkit.UploadOptions.prototype.beforeSend = function(xhr) {};

/**
 * @param {number} percent
 * @return {?}
 */
UIkit.UploadOptions.prototype.progress = function(percent) {};

/**
 * @param {?} response
 * @param {!XMLHttpRequest} xhr
 * @return {?}
 */
UIkit.UploadOptions.prototype.complete = function(response, xhr) {};

/**
 * @param {?} response
 * @param {!XMLHttpRequest} xhr
 * @return {?}
 */
UIkit.UploadOptions.prototype.allcomplete = function(response, xhr) {};

/**
 * @param {(string|!Array<string>)} file
 * @param {!UIkit.UploadOptions} settings
 * @return {?}
 */
UIkit.UploadOptions.prototype.notallowed = function(file, settings) {};

/**
 * @param {?} event
 * @return {?}
 */
UIkit.UploadOptions.prototype.loadstart = function(event) {};

/**
 * @param {?} event
 * @return {?}
 */
UIkit.UploadOptions.prototype.load = function(event) {};

/**
 * @param {?} event
 * @return {?}
 */
UIkit.UploadOptions.prototype.loadend = function(event) {};

/**
 * @param {?} event
 * @return {?}
 */
UIkit.UploadOptions.prototype.error = function(event) {};

/**
 * @param {?} event
 * @return {?}
 */
UIkit.UploadOptions.prototype.abort = function(event) {};

/**
 * @param {?} event
 * @return {?}
 */
UIkit.UploadOptions.prototype.readystatechange = function(event) {};

/** @typedef {function((string|?<!HTMLElement>), !UIkit.UploadOptions): ?} */
UIkit.Upload;
 /** @type {function((string|?<!HTMLElement>), !UIkit.DropdownOptions): !UIkit.DropdownElement} */
UIkit.dropdown;
 /** @type {!UIkit.Modal} */
UIkit.modal;
 /** @type {!UIkit.LightBox} */
UIkit.lightbox;
 /** @type {!UIkit.OffCanvas} */
UIkit.offcanvas;
 /** @type {function((string|?<!HTMLElement>), !UIkit.AutoCompleteOptions): ?} */
UIkit.autocomplete;
 /** @type {function((string|?<!HTMLElement>), !UIkit.DatePickerOptions): ?} */
UIkit.datepicker;
 /** @type {function((string|?<!HTMLElement>), !UIkit.HtmlEditorOptions): ?} */
UIkit.htmleditor;
 /** @type {function((string|?<!HTMLElement>), !UIkit.SliderOptions): ?} */
UIkit.slider;
 /** @type {function((string|?<!HTMLElement>), !UIkit.SlideSetOptions): ?} */
UIkit.slideset;
 /** @type {function((string|?<!HTMLElement>), !UIkit.SlideShowOptions): ?} */
UIkit.slideshow;
 /** @type {function((string|?<!HTMLElement>), !UIkit.ParallaxOptions): ?} */
UIkit.parallax;
 /** @type {function((string|?<!HTMLElement>), !UIkit.AccordionOptions): ?} */
UIkit.accordion;
 /** @type {!UIkit.Notify} */
UIkit.notify;
 /** @type {function((string|?<!HTMLElement>), !UIkit.SearchOptions): ?} */
UIkit.search;
 /** @type {function((string|?<!HTMLElement>), !UIkit.NestableOptions): ?} */
UIkit.nestable;
 /** @type {function((string|?<!HTMLElement>), !UIkit.SortableOptions): ?} */
UIkit.sortable;
 /** @type {function((string|?<!HTMLElement>), !UIkit.StickyOptions): ?} */
UIkit.sticky;
 /** @type {function((string|?<!HTMLElement>), !UIkit.TimepickerOptions): ?} */
UIkit.timepicker;
 /** @type {function((string|?<!HTMLElement>), !UIkit.TooltipOptions): ?} */
UIkit.tooltip;
 /** @type {function((string|?<!HTMLElement>), !UIkit.UploadOptions): ?} */
UIkit.uploadSelect;
 /** @type {function((string|?<!HTMLElement>), !UIkit.UploadOptions): ?} */
UIkit.uploadDrop;
