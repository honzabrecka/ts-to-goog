/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/memoizee/index.d.ts:
/** @const */
var memoizee = {};
/**
 * @record
 * @struct
 */
memoizee.Options = function() {};
 /** @type {number} */
memoizee.Options.prototype.length;
 /** @type {number} */
memoizee.Options.prototype.maxAge;
 /** @type {number} */
memoizee.Options.prototype.max;
 /** @type {(number|boolean)} */
memoizee.Options.prototype.preFetch;
 /** @type {boolean} */
memoizee.Options.prototype.promise;
 /** @type {boolean} */
memoizee.Options.prototype.async;
 /** @type {boolean} */
memoizee.Options.prototype.primitive;
 /** @type {!Array<function(?): ?>} */
memoizee.Options.prototype.resolvers;

/**
 * @param {?} value
 * @return {void}
 */
memoizee.Options.prototype.dispose = function(value) {};

/**
 * @param {?} value
 * @return {void}
 */
memoizee.Options.prototype.normalizer = function(value) {};
/**
 * @record
 * @struct
 */
memoizee.Memoized = function() {};
 /** @type {F} */
memoizee.Memoized.prototype.delete;
 /** @type {?} */
memoizee.Memoized.prototype.clear;

/**
 * @template F
 * @param {F} f
 * @param {!memoizee.Options=} options
 * @return {?}
 */
function memoizee(f, options) {}

/* TODO: ExportAssignment in  */
