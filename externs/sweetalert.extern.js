/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/sweetalert/index.d.ts:
 /** @type {!SweetAlert.SweetAlertStatic} */
var sweetAlert;
 /** @type {!SweetAlert.SweetAlertStatic} */
var swal;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sweetalert"
/** @const */
tsickle_declare_module.sweetalert = {};

/* TODO: ExportAssignment in tsickle_declare_module.sweetalert */
/** @const */
var SweetAlert = {};

/** @typedef {string} */
SweetAlert.AlertType;

/** @typedef {string} */
SweetAlert.PromtType;
/**
 * @record
 * @struct
 */
SweetAlert.SettingsBase = function() {};
 /** @type {string} */
SweetAlert.SettingsBase.prototype.text;
 /** @type {boolean} */
SweetAlert.SettingsBase.prototype.allowEscapeKey;
 /** @type {string} */
SweetAlert.SettingsBase.prototype.customClass;
 /** @type {boolean} */
SweetAlert.SettingsBase.prototype.allowOutsideClick;
 /** @type {boolean} */
SweetAlert.SettingsBase.prototype.showCancelButton;
 /** @type {boolean} */
SweetAlert.SettingsBase.prototype.showConfirmButton;
 /** @type {string} */
SweetAlert.SettingsBase.prototype.confirmButtonText;
 /** @type {string} */
SweetAlert.SettingsBase.prototype.confirmButtonColor;
 /** @type {string} */
SweetAlert.SettingsBase.prototype.cancelButtonText;
 /** @type {boolean} */
SweetAlert.SettingsBase.prototype.closeOnConfirm;
 /** @type {boolean} */
SweetAlert.SettingsBase.prototype.closeOnCancel;
 /** @type {string} */
SweetAlert.SettingsBase.prototype.imageUrl;
 /** @type {string} */
SweetAlert.SettingsBase.prototype.imageSize;
 /** @type {number} */
SweetAlert.SettingsBase.prototype.timer;
 /** @type {boolean} */
SweetAlert.SettingsBase.prototype.html;
 /** @type {(string|boolean)} */
SweetAlert.SettingsBase.prototype.animation;
 /** @type {boolean} */
SweetAlert.SettingsBase.prototype.showLoaderOnConfirm;
/**
 * @extends {SweetAlert.SettingsBase}
 * @record
 * @struct
 */
SweetAlert.AlertModalSettings = function() {};
 /** @type {string} */
SweetAlert.AlertModalSettings.prototype.type;
/**
 * @extends {SweetAlert.SettingsBase}
 * @record
 * @struct
 */
SweetAlert.PromtModalSettings = function() {};
 /** @type {string} */
SweetAlert.PromtModalSettings.prototype.type;
 /** @type {string} */
SweetAlert.PromtModalSettings.prototype.inputType;
 /** @type {string} */
SweetAlert.PromtModalSettings.prototype.inputPlaceholder;
 /** @type {string} */
SweetAlert.PromtModalSettings.prototype.inputValue;
/**
 * @record
 * @struct
 */
SweetAlert.Settings = function() {};
 /** @type {string} */
SweetAlert.Settings.prototype.title;
/**
 * @record
 * @struct
 */
SweetAlert.SetDefaultsSettings = function() {};
 /** @type {string} */
SweetAlert.SetDefaultsSettings.prototype.title;
/**
 * @record
 * @struct
 */
SweetAlert.SweetAlertStatic = function() {};

/* TODO: CallSignature: SweetAlert */

/* TODO: CallSignature: SweetAlert */

/* TODO: CallSignature: SweetAlert */

/* TODO: CallSignature: SweetAlert */

/* TODO: CallSignature: SweetAlert */

/**
 * If you end up using a lot of the same settings when calling SweetAlert, you can use setDefaults at the start of your program to set them once and for all!
 * @param {?} settings
 * @return {void}
 */
SweetAlert.SweetAlertStatic.prototype.setDefaults = function(settings) {};

/**
 * Close the currently open SweetAlert programmatically.
 * @return {void}
 */
SweetAlert.SweetAlertStatic.prototype.close = function() {};

/**
 * Show an error message after validating the input field, if the user's data is bad.
 * @param {string} errorMessage
 * @return {void}
 */
SweetAlert.SweetAlertStatic.prototype.showInputError = function(errorMessage) {};

/**
 * Enable the user to click on the cancel and confirm buttons.
 * @return {void}
 */
SweetAlert.SweetAlertStatic.prototype.enableButtons = function() {};

/**
 * Disable the user to click on the cancel and confirm buttons.
 * @return {void}
 */
SweetAlert.SweetAlertStatic.prototype.disableButtons = function() {};
