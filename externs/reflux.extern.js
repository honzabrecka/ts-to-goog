/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/reflux/index.d.ts:

/* TODO: NamespaceExportDeclaration in  */
/**
 * @record
 * @struct
 */
function StoreDefinition() {}
 /** @type {!Array<?>} */
StoreDefinition.prototype.listenables;
 /** @type {!Function} */
StoreDefinition.prototype.init;
 /** @type {!Function} */
StoreDefinition.prototype.getInitialState;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function ListenFn() {}

/* TODO: CallSignature:  */
 /** @type {!Function} */
ListenFn.prototype.completed;
 /** @type {!Function} */
ListenFn.prototype.failed;
/**
 * @record
 * @struct
 */
function Listenable() {}
 /** @type {?} */
Listenable.prototype.listen;
/**
 * @record
 * @struct
 */
function Subscription() {}
 /** @type {!Function} */
Subscription.prototype.stop;
 /** @type {?} */
Subscription.prototype.listenable;
/**
 * @record
 * @struct
 */
function Store() {}

/**
 * @param {?} listenable
 * @return {boolean}
 */
Store.prototype.hasListener = function(listenable) {};

/**
 * @param {!Array<?>} listenables
 * @return {void}
 */
Store.prototype.listenToMany = function(listenables) {};

/**
 * @param {?} listenable
 * @return {string}
 */
Store.prototype.validateListening = function(listenable) {};

/**
 * @param {?} listenable
 * @param {!Function} callback
 * @param {!Function=} defaultCallback
 * @return {?}
 */
Store.prototype.listenTo = function(listenable, callback, defaultCallback) {};

/**
 * @param {?} listenable
 * @return {boolean}
 */
Store.prototype.stopListeningTo = function(listenable) {};

/**
 * @return {void}
 */
Store.prototype.stopListeningToAll = function() {};

/**
 * @param {?} listenable
 * @param {!Function} defaultCallback
 * @return {void}
 */
Store.prototype.fetchInitialState = function(listenable, defaultCallback) {};

/**
 * @param {?} state
 * @return {void}
 */
Store.prototype.trigger = function(state) {};

/**
 * @param {!Function} callback
 * @param {?} bindContext
 * @return {!Function}
 */
Store.prototype.listen = function(callback, bindContext) {};
/**
 * @record
 * @struct
 */
function ActionsDefinition() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function Actions() {}

/* TODO: IndexSignature:  */

/**
 * @param {?} definition
 * @return {?}
 */
function createStore(definition) {}

/**
 * @param {?=} definition
 * @return {?}
 */
function createAction(definition) {}

/**
 * @param {(?|!Array<string>)} definitions
 * @return {?}
 */
function createActions(definitions) {}

/**
 * @param {?} store
 * @param {string=} key
 * @return {void}
 */
function connect(store, key) {}

/**
 * @param {?} store
 * @param {string} handler
 * @return {void}
 */
function listenTo(store, handler) {}

/**
 * @param {?} state
 * @return {void}
 */
function setState(state) {}

/**
 * @return {?}
 */
function ListenerMixin() {}
