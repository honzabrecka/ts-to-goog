/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/phantomjs/index.d.ts:

/**
 * @param {string} module
 * @return {?}
 */
function require(module) {}
 /** @type {!Phantom} */
var phantom;
/**
 * @record
 * @struct
 */
function Phantom() {}
 /** @type {!Array<string>} */
Phantom.prototype.args;
 /** @type {!Array<!Cookie>} */
Phantom.prototype.cookies;
 /** @type {boolean} */
Phantom.prototype.cookiesEnabled;
 /** @type {string} */
Phantom.prototype.libraryPath;
 /** @type {string} */
Phantom.prototype.scriptName;
 /** @type {{major: number, minor: number, patch: number}} */
Phantom.prototype.version;
 /** @type {function(string, !Array<string>): ?} */
Phantom.prototype.onError;

/**
 * @param {!Cookie} cookie
 * @return {boolean}
 */
Phantom.prototype.addCookie = function(cookie) {};

/**
 * @return {void}
 */
Phantom.prototype.clearCookies = function() {};

/**
 * @param {string} cookieName
 * @return {boolean}
 */
Phantom.prototype.deleteCookie = function(cookieName) {};

/**
 * @param {?=} returnValue
 * @return {boolean}
 */
Phantom.prototype.exit = function(returnValue) {};

/**
 * @param {string} filename
 * @return {boolean}
 */
Phantom.prototype.injectJs = function(filename) {};
/**
 * @record
 * @struct
 */
function System() {}
 /** @type {number} */
System.prototype.pid;
 /** @type {string} */
System.prototype.platform;
 /** @type {{architecture: string, name: string, version: string}} */
System.prototype.os;
 /** @type {!Object<string,string>} */
System.prototype.env;
 /** @type {!Array<string>} */
System.prototype.args;
/**
 * @record
 * @struct
 */
function WebPage() {}
 /** @type {boolean} */
WebPage.prototype.canGoBack;
 /** @type {boolean} */
WebPage.prototype.canGoForward;
 /** @type {!ClipRect} */
WebPage.prototype.clipRect;
 /** @type {string} */
WebPage.prototype.content;
 /** @type {!Array<!Cookie>} */
WebPage.prototype.cookies;
 /** @type {!Object<string,string>} */
WebPage.prototype.customHeaders;
 /** @type {?} */
WebPage.prototype.event;
 /** @type {string} */
WebPage.prototype.focusedFrameName;
 /** @type {string} */
WebPage.prototype.frameContent;
 /** @type {string} */
WebPage.prototype.frameName;
 /** @type {string} */
WebPage.prototype.framePlainText;
 /** @type {string} */
WebPage.prototype.frameTitle;
 /** @type {string} */
WebPage.prototype.frameUrl;
 /** @type {number} */
WebPage.prototype.framesCount;
 /** @type {?} */
WebPage.prototype.framesName;
 /** @type {string} */
WebPage.prototype.libraryPath;
 /** @type {boolean} */
WebPage.prototype.navigationLocked;
 /** @type {string} */
WebPage.prototype.offlineStoragePath;
 /** @type {number} */
WebPage.prototype.offlineStorageQuota;
 /** @type {boolean} */
WebPage.prototype.ownsPages;
 /** @type {!Array<!WebPage>} */
WebPage.prototype.pages;
 /** @type {string} */
WebPage.prototype.pagesWindowName;
 /** @type {!PaperSize} */
WebPage.prototype.paperSize;
 /** @type {string} */
WebPage.prototype.plainText;
 /** @type {!TopLeft} */
WebPage.prototype.scrollPosition;
 /** @type {!WebPageSettings} */
WebPage.prototype.settings;
 /** @type {string} */
WebPage.prototype.title;
 /** @type {string} */
WebPage.prototype.url;
 /** @type {!Size} */
WebPage.prototype.viewportSize;
 /** @type {string} */
WebPage.prototype.windowName;
 /** @type {number} */
WebPage.prototype.zoomFactor;
 /** @type {function(string): ?} */
WebPage.prototype.onAlert;
 /** @type {!Function} */
WebPage.prototype.onCallback;
 /** @type {function(!WebPage): ?} */
WebPage.prototype.onClosing;
 /** @type {function(string): boolean} */
WebPage.prototype.onConfirm;
 /** @type {function(string, number, string): ?} */
WebPage.prototype.onConsoleMessage;
 /** @type {function(string, !Array<string>): ?} */
WebPage.prototype.onError;
 /** @type {function(string): string} */
WebPage.prototype.onFilePicker;
 /** @type {function(): ?} */
WebPage.prototype.onInitialized;
 /** @type {function(string): ?} */
WebPage.prototype.onLoadFinished;
 /** @type {function(): ?} */
WebPage.prototype.onLoadStarted;
 /** @type {function(string, string, boolean, boolean): ?} */
WebPage.prototype.onNavigationRequested;
 /** @type {function(!WebPage): ?} */
WebPage.prototype.onPageCreated;
 /** @type {function(string, string): string} */
WebPage.prototype.onPrompt;
 /** @type {function(!ResourceError): ?} */
WebPage.prototype.onResourceError;
 /** @type {function(!ResourceResponse): ?} */
WebPage.prototype.onResourceReceived;
 /** @type {function(!ResourceRequest, !NetworkRequest): ?} */
WebPage.prototype.onResourceRequested;
 /** @type {function(string): ?} */
WebPage.prototype.onUrlChanged;

/**
 * @param {!Cookie} cookie
 * @return {boolean}
 */
WebPage.prototype.addCookie = function(cookie) {};

/**
 * @return {number}
 */
WebPage.prototype.childFramesCount = function() {};

/**
 * @return {string}
 */
WebPage.prototype.childFramesName = function() {};

/**
 * @return {void}
 */
WebPage.prototype.clearCookies = function() {};

/**
 * @return {void}
 */
WebPage.prototype.close = function() {};

/**
 * @return {string}
 */
WebPage.prototype.currentFrameName = function() {};

/**
 * @param {string} cookieName
 * @return {boolean}
 */
WebPage.prototype.deleteCookie = function(cookieName) {};

/**
 * @param {!Function} fn
 * @param {...?} args
 * @return {?}
 */
WebPage.prototype.evaluate = function(fn, args) {};

/**
 * @param {!Function} fn
 * @return {void}
 */
WebPage.prototype.evaluateAsync = function(fn) {};

/**
 * @param {string} str
 * @return {?}
 */
WebPage.prototype.evaluateJavaScript = function(str) {};

/**
 * @param {string} windowName
 * @return {!WebPage}
 */
WebPage.prototype.getPage = function(windowName) {};

/**
 * @param {number} index
 * @return {void}
 */
WebPage.prototype.go = function(index) {};

/**
 * @return {void}
 */
WebPage.prototype.goBack = function() {};

/**
 * @return {void}
 */
WebPage.prototype.goForward = function() {};

/**
 * @param {string} url
 * @param {!Function} callback
 * @return {void}
 */
WebPage.prototype.includeJs = function(url, callback) {};

/**
 * @param {string} filename
 * @return {boolean}
 */
WebPage.prototype.injectJs = function(filename) {};

/**
 * @param {string} url
 * @param {function(string): ?|string} callback_or_method
 * @param {function(string): ?|?=} callback_or_data
 * @param {function(string): ?=} callback
 * @return {void}
 */
WebPage.prototype.open = function(url, callback_or_method, callback_or_data, callback) {};

/**
 * @param {string} url
 * @param {?} httpConf
 * @param {?} settings
 * @return {void}
 */
WebPage.prototype.openUrl = function(url, httpConf, settings) {};

/**
 * @return {void}
 */
WebPage.prototype.release = function() {};

/**
 * @return {void}
 */
WebPage.prototype.reload = function() {};

/**
 * @param {string} filename
 * @return {void}
 */
WebPage.prototype.render = function(filename) {};

/**
 * @param {string} format
 * @return {string}
 */
WebPage.prototype.renderBase64 = function(format) {};

/**
 * @param {string} mouseEventType_or_keyboardEventType
 * @param {number|?=} mouseX_or_keyOrKeys
 * @param {number|?=} mouseY_or_aNull
 * @param {string|?=} button_or_bNull
 * @param {number=} modifier
 * @return {void}
 */
WebPage.prototype.sendEvent = function(mouseEventType_or_keyboardEventType, mouseX_or_keyOrKeys, mouseY_or_aNull, button_or_bNull, modifier) {};

/**
 * @param {string} content
 * @param {string} url
 * @return {void}
 */
WebPage.prototype.setContent = function(content, url) {};

/**
 * @return {void}
 */
WebPage.prototype.stop = function() {};

/**
 * @return {void}
 */
WebPage.prototype.switchToFocusedFrame = function() {};

/**
 * @param {string|number} frameName_or_framePosition
 * @return {void}
 */
WebPage.prototype.switchToFrame = function(frameName_or_framePosition) {};

/**
 * @param {string|number} frameName_or_framePosition
 * @return {void}
 */
WebPage.prototype.switchToChildFrame = function(frameName_or_framePosition) {};

/**
 * @return {void}
 */
WebPage.prototype.switchToMainFrame = function() {};

/**
 * @return {void}
 */
WebPage.prototype.switchToParentFrame = function() {};

/**
 * @param {string} selector
 * @param {string} filename
 * @return {void}
 */
WebPage.prototype.uploadFile = function(selector, filename) {};

/**
 * @param {!WebPage} closingPage
 * @return {void}
 */
WebPage.prototype.closing = function(closingPage) {};

/**
 * @return {void}
 */
WebPage.prototype.initialized = function() {};

/**
 * @param {string} msg
 * @return {void}
 */
WebPage.prototype.javaScriptAlertSent = function(msg) {};

/**
 * @param {string} msg
 * @param {number=} lineNum
 * @param {string=} sourceId
 * @return {void}
 */
WebPage.prototype.javaScriptConsoleMessageSent = function(msg, lineNum, sourceId) {};

/**
 * @param {string} status
 * @return {void}
 */
WebPage.prototype.loadFinished = function(status) {};

/**
 * @return {void}
 */
WebPage.prototype.loadStarted = function() {};

/**
 * @param {string} url
 * @param {string} type
 * @param {boolean} willNavigate
 * @param {boolean} main
 * @return {void}
 */
WebPage.prototype.navigationRequested = function(url, type, willNavigate, main) {};

/**
 * @param {!WebPage} newPage
 * @return {void}
 */
WebPage.prototype.rawPageCreated = function(newPage) {};

/**
 * @param {!ResourceResponse} response
 * @return {void}
 */
WebPage.prototype.resourceReceived = function(response) {};

/**
 * @param {!ResourceRequest} requestData
 * @param {!NetworkRequest} networkRequest
 * @return {void}
 */
WebPage.prototype.resourceRequested = function(requestData, networkRequest) {};

/**
 * @param {string} targetUrl
 * @return {void}
 */
WebPage.prototype.urlChanged = function(targetUrl) {};
/**
 * @record
 * @struct
 */
function ResourceError() {}
 /** @type {number} */
ResourceError.prototype.id;
 /** @type {string} */
ResourceError.prototype.url;
 /** @type {string} */
ResourceError.prototype.errorCode;
 /** @type {string} */
ResourceError.prototype.errorString;
/**
 * @record
 * @struct
 */
function ResourceResponse() {}
 /** @type {number} */
ResourceResponse.prototype.id;
 /** @type {string} */
ResourceResponse.prototype.url;
 /** @type {!Date} */
ResourceResponse.prototype.time;
 /** @type {!Object<string,string>} */
ResourceResponse.prototype.headers;
 /** @type {number} */
ResourceResponse.prototype.bodySize;
 /** @type {string} */
ResourceResponse.prototype.contentType;
 /** @type {string} */
ResourceResponse.prototype.redirectURL;
 /** @type {string} */
ResourceResponse.prototype.stage;
 /** @type {number} */
ResourceResponse.prototype.status;
 /** @type {string} */
ResourceResponse.prototype.statusText;
/**
 * @record
 * @struct
 */
function ResourceRequest() {}
 /** @type {number} */
ResourceRequest.prototype.id;
 /** @type {string} */
ResourceRequest.prototype.method;
 /** @type {string} */
ResourceRequest.prototype.url;
 /** @type {!Date} */
ResourceRequest.prototype.time;
 /** @type {!Object<string,string>} */
ResourceRequest.prototype.headers;
/**
 * @record
 * @struct
 */
function NetworkRequest() {}

/**
 * @return {void}
 */
NetworkRequest.prototype.abort = function() {};

/**
 * @param {string} url
 * @return {void}
 */
NetworkRequest.prototype.changeUrl = function(url) {};

/**
 * @param {string} name
 * @param {string} value
 * @return {void}
 */
NetworkRequest.prototype.setHeader = function(name, value) {};
/**
 * @record
 * @struct
 */
function PaperSize() {}
 /** @type {string} */
PaperSize.prototype.width;
 /** @type {string} */
PaperSize.prototype.height;
 /** @type {string} */
PaperSize.prototype.border;
 /** @type {string} */
PaperSize.prototype.format;
 /** @type {string} */
PaperSize.prototype.orientation;
/**
 * @record
 * @struct
 */
function WebPageSettings() {}
 /** @type {boolean} */
WebPageSettings.prototype.javascriptEnabled;
 /** @type {boolean} */
WebPageSettings.prototype.loadImages;
 /** @type {boolean} */
WebPageSettings.prototype.localToRemoteUrlAccessEnabled;
 /** @type {string} */
WebPageSettings.prototype.userAgent;
 /** @type {string} */
WebPageSettings.prototype.userName;
 /** @type {string} */
WebPageSettings.prototype.password;
 /** @type {boolean} */
WebPageSettings.prototype.XSSAuditingEnabled;
 /** @type {boolean} */
WebPageSettings.prototype.webSecurityEnabled;
 /** @type {number} */
WebPageSettings.prototype.resourceTimeout;
/**
 * @record
 * @struct
 */
function FileSystem() {}
 /** @type {string} */
FileSystem.prototype.separator;
 /** @type {string} */
FileSystem.prototype.workingDirectory;

/**
 * @param {string} path
 * @return {!Array<string>}
 */
FileSystem.prototype.list = function(path) {};

/**
 * @param {string} path
 * @return {string}
 */
FileSystem.prototype.absolute = function(path) {};

/**
 * @param {string} path
 * @return {boolean}
 */
FileSystem.prototype.exists = function(path) {};

/**
 * @param {string} path
 * @return {boolean}
 */
FileSystem.prototype.isDirectory = function(path) {};

/**
 * @param {string} path
 * @return {boolean}
 */
FileSystem.prototype.isFile = function(path) {};

/**
 * @param {string} path
 * @return {boolean}
 */
FileSystem.prototype.isAbsolute = function(path) {};

/**
 * @param {string} path
 * @return {boolean}
 */
FileSystem.prototype.isExecutable = function(path) {};

/**
 * @param {string} path
 * @return {boolean}
 */
FileSystem.prototype.isReadable = function(path) {};

/**
 * @param {string} path
 * @return {boolean}
 */
FileSystem.prototype.isWritable = function(path) {};

/**
 * @param {string} path
 * @return {boolean}
 */
FileSystem.prototype.isLink = function(path) {};

/**
 * @param {string} path
 * @return {string}
 */
FileSystem.prototype.readLink = function(path) {};

/**
 * @param {string} path
 * @return {void}
 */
FileSystem.prototype.changeWorkingDirectory = function(path) {};

/**
 * @param {string} path
 * @return {void}
 */
FileSystem.prototype.makeDirectory = function(path) {};

/**
 * @param {string} path
 * @return {void}
 */
FileSystem.prototype.makeTree = function(path) {};

/**
 * @param {string} path
 * @return {void}
 */
FileSystem.prototype.removeDirectory = function(path) {};

/**
 * @param {string} path
 * @return {void}
 */
FileSystem.prototype.removeTree = function(path) {};

/**
 * @param {string} source
 * @param {string} destination
 * @return {void}
 */
FileSystem.prototype.copyTree = function(source, destination) {};

/**
 * @param {string} path
 * @param {string|{mode: string, charset: string}} mode_or_options
 * @return {!Stream}
 */
FileSystem.prototype.open = function(path, mode_or_options) {};

/**
 * @param {string} path
 * @return {string}
 */
FileSystem.prototype.read = function(path) {};

/**
 * @param {string} path
 * @param {string} content
 * @param {string} mode
 * @return {void}
 */
FileSystem.prototype.write = function(path, content, mode) {};

/**
 * @param {string} path
 * @return {number}
 */
FileSystem.prototype.size = function(path) {};

/**
 * @param {string} path
 * @return {void}
 */
FileSystem.prototype.remove = function(path) {};

/**
 * @param {string} source
 * @param {string} destination
 * @return {void}
 */
FileSystem.prototype.copy = function(source, destination) {};

/**
 * @param {string} source
 * @param {string} destination
 * @return {void}
 */
FileSystem.prototype.move = function(source, destination) {};

/**
 * @param {string} path
 * @return {void}
 */
FileSystem.prototype.touch = function(path) {};
/**
 * @record
 * @struct
 */
function Stream() {}

/**
 * @return {boolean}
 */
Stream.prototype.atEnd = function() {};

/**
 * @return {void}
 */
Stream.prototype.close = function() {};

/**
 * @return {void}
 */
Stream.prototype.flush = function() {};

/**
 * @return {string}
 */
Stream.prototype.read = function() {};

/**
 * @return {string}
 */
Stream.prototype.readLine = function() {};

/**
 * @param {number} position
 * @return {void}
 */
Stream.prototype.seek = function(position) {};

/**
 * @param {string} data
 * @return {void}
 */
Stream.prototype.write = function(data) {};

/**
 * @param {string} data
 * @return {void}
 */
Stream.prototype.writeLine = function(data) {};
/**
 * @record
 * @struct
 */
function WebServer() {}
 /** @type {number} */
WebServer.prototype.port;

/**
 * @param {number|string} port_or_ipAddressPort
 * @param {function(!WebServerRequest, !WebServerResponse): void=} cb
 * @return {boolean}
 */
WebServer.prototype.listen = function(port_or_ipAddressPort, cb) {};

/**
 * @return {void}
 */
WebServer.prototype.close = function() {};
/**
 * @record
 * @struct
 */
function WebServerRequest() {}
 /** @type {string} */
WebServerRequest.prototype.method;
 /** @type {string} */
WebServerRequest.prototype.url;
 /** @type {number} */
WebServerRequest.prototype.httpVersion;
 /** @type {!Object<string,string>} */
WebServerRequest.prototype.headers;
 /** @type {string} */
WebServerRequest.prototype.post;
 /** @type {string} */
WebServerRequest.prototype.postRaw;
/**
 * @record
 * @struct
 */
function WebServerResponse() {}
 /** @type {!Object<string,string>} */
WebServerResponse.prototype.headers;
 /** @type {number} */
WebServerResponse.prototype.statusCode;

/**
 * @param {string} name
 * @param {string} value
 * @return {void}
 */
WebServerResponse.prototype.setHeader = function(name, value) {};

/**
 * @param {string} name
 * @return {string}
 */
WebServerResponse.prototype.header = function(name) {};

/**
 * @param {string} encoding
 * @return {void}
 */
WebServerResponse.prototype.setEncoding = function(encoding) {};

/**
 * @param {string} data
 * @return {void}
 */
WebServerResponse.prototype.write = function(data) {};

/**
 * @param {number} statusCode
 * @param {!Object<string,string>=} headers
 * @return {void}
 */
WebServerResponse.prototype.writeHead = function(statusCode, headers) {};

/**
 * @return {void}
 */
WebServerResponse.prototype.close = function() {};

/**
 * @return {void}
 */
WebServerResponse.prototype.closeGracefully = function() {};
/**
 * @record
 * @struct
 */
function TopLeft() {}
 /** @type {number} */
TopLeft.prototype.top;
 /** @type {number} */
TopLeft.prototype.left;
/**
 * @record
 * @struct
 */
function Size() {}
 /** @type {number} */
Size.prototype.width;
 /** @type {number} */
Size.prototype.height;
/**
 * @extends {TopLeft}
 * @extends {Size}
 * @record
 * @struct
 */
function ClipRect() {}
/**
 * @record
 * @struct
 */
function Cookie() {}
 /** @type {string} */
Cookie.prototype.name;
 /** @type {string} */
Cookie.prototype.value;
 /** @type {string} */
Cookie.prototype.domain;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "webpage"
/** @const */
tsickle_declare_module.webpage = {};

/**
 * @return {!WebPage}
 */
tsickle_declare_module.webpage.create = function() {};
