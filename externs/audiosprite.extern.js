/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/audiosprite/index.d.ts:

/* TODO: NamespaceExportDeclaration in  */

/* TODO: ExportAssignment in  */

/**
 * @param {!Array<string>} files
 * @param {function(!Error, !audiosprite.Result): void|!audiosprite.Option} callback_or_option
 * @param {function(!Error, !audiosprite.Result): void=} callback
 * @return {void}
 */
function audiosprite(files, callback_or_option, callback) {}

/** @typedef {string} */
audiosprite.ExportType;

/** @typedef {string} */
audiosprite.LogLevel;

/** @typedef {number} */
audiosprite.VBR;

/** @typedef {number} */
audiosprite.VBR_Vorbis;

/** @typedef {number} */
audiosprite.Channels;
/**
 * @record
 * @struct
 */
audiosprite.Option = function() {};
 /** @type {string} */
audiosprite.Option.prototype.output;
 /** @type {string} */
audiosprite.Option.prototype.path;
 /** @type {string} */
audiosprite.Option.prototype.export;
 /** @type {string} */
audiosprite.Option.prototype.format;
 /** @type {string} */
audiosprite.Option.prototype.log;
 /** @type {string} */
audiosprite.Option.prototype.autoplay;
 /** @type {!Array<string>} */
audiosprite.Option.prototype.loop;
 /** @type {number} */
audiosprite.Option.prototype.silence;
 /** @type {number} */
audiosprite.Option.prototype.gap;
 /** @type {number} */
audiosprite.Option.prototype.minlength;
 /** @type {number} */
audiosprite.Option.prototype.bitrate;
 /** @type {number} */
audiosprite.Option.prototype.vbr;

/* TODO: PropertySignature: audiosprite.'vbr:vorbis' */
 /** @type {number} */
audiosprite.Option.prototype.samplerate;
 /** @type {number} */
audiosprite.Option.prototype.channels;
 /** @type {string} */
audiosprite.Option.prototype.rawparts;
 /** @type {!audiosprite.Logger} */
audiosprite.Option.prototype.logger;
/**
 * @record
 * @struct
 */
audiosprite.Logger = function() {};

/**
 * @param {...?} log
 * @return {void}
 */
audiosprite.Logger.prototype.debug = function(log) {};

/**
 * @param {...?} log
 * @return {void}
 */
audiosprite.Logger.prototype.info = function(log) {};

/**
 * @param {...?} log
 * @return {void}
 */
audiosprite.Logger.prototype.log = function(log) {};
/**
 * @record
 * @struct
 */
audiosprite.Result = function() {};
 /** @type {!Array<string>} */
audiosprite.Result.prototype.resources;
 /** @type {!Object<string,{start: number, end: number, loop: boolean}>} */
audiosprite.Result.prototype.spritemap;
 /** @type {string} */
audiosprite.Result.prototype.autoplay;
