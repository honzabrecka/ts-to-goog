/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/oclazyload/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: NamespaceExportDeclaration in  */
/**
 * @record
 * @struct
 */
function ILazyLoad() {}

/**
 * Loads a module or a list of modules into Angular.
 * 
 * @param {(string|?|!Array<(string|?)>)} module The name of a predefined module config object, or a module config object, or an array of either
 * @param {?=} config Options to be used when loading the modules
 * @return {!angular.IPromise<?>}
 */
ILazyLoad.prototype.load = function(module, config) {};

/**
 * Defines a module config object.
 * @param {?} config The module config object
 * @return {?} The module config object that was passed in
 */
ILazyLoad.prototype.setModuleConfig = function(config) {};

/**
 * Gets the specified module config object.
 * @param {string} name The name of the module config object to get
 * @return {?}
 */
ILazyLoad.prototype.getModuleConfig = function(name) {};

/**
 * Gets the list of loaded module names.
 * @return {!Array<string>}
 */
ILazyLoad.prototype.getModules = function() {};

/**
 * Checks if a module name, or list of modules names, has been previously loaded into Angular.
 * @param {(string|!Array<string>)} moduleName
 * @return {boolean}
 */
ILazyLoad.prototype.isLoaded = function(moduleName) {};

/**
 * Injects a module with the associated name into Angular. Useful for manual injection when loading through RequireJS, SystemJS, etc. Useful in
 * conjunction with the toggleWatch() method.
 * @param {(string|!Array<string>)} moduleName
 * @return {!angular.IPromise<?>}
 */
ILazyLoad.prototype.inject = function(moduleName) {};

/**
 * Enables or disables watching Angular for new modules. Useful in conjunction with the inject() method. Make sure to not keep the watch enabled
 * indefinitely, or unexpected results may occur.
 * @param {boolean} watch
 * @return {void}
 */
ILazyLoad.prototype.toggleWatch = function(watch) {};
/**
 * @extends {IOptionsConfig}
 * @record
 * @struct
 */
function ITypedModuleConfig() {}
 /** @type {string} */
ITypedModuleConfig.prototype.type;
 /** @type {string} */
ITypedModuleConfig.prototype.path;
/**
 * @extends {IOptionsConfig}
 * @record
 * @struct
 */
function IModuleConfig() {}
 /** @type {string} */
IModuleConfig.prototype.name;
 /** @type {!Array<string>} */
IModuleConfig.prototype.files;
/**
 * @extends {angular.IRequestShortcutConfig}
 * @record
 * @struct
 */
function IOptionsConfig() {}
 /** @type {boolean} */
IOptionsConfig.prototype.cache;
 /** @type {boolean} */
IOptionsConfig.prototype.reconfig;
 /** @type {boolean} */
IOptionsConfig.prototype.rerun;
 /** @type {boolean} */
IOptionsConfig.prototype.serie;
 /** @type {string} */
IOptionsConfig.prototype.insertBefore;
/**
 * @record
 * @struct
 */
function ILazyLoadProvider() {}

/**
 * Configures the main service provider.
 * @param {?} config The configuration settings to use
 * @return {void}
 */
ILazyLoadProvider.prototype.config = function(config) {};
/**
 * @record
 * @struct
 */
function IProviderConfig() {}
 /** @type {boolean} */
IProviderConfig.prototype.debug;
 /** @type {boolean} */
IProviderConfig.prototype.events;
 /** @type {!Array<?>} */
IProviderConfig.prototype.modules;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "angular"

/**
 * The angular.module is a global place for creating, registering and retrieving Angular modules. All modules (angular core or 3rd party) that should be available to an application must be registered using this mechanism.
 * 
 * When passed two or more arguments, a new module is created. If passed only one argument, an existing module (the name passed as the first argument to module) is retrieved.
 * 
 * @param {string} name The name of the module to create or retrieve.
 * @param {!Array<(string|?)>=} requires The names of modules this module depends on, and/or ocLazyLoad module configurations. If specified then new module is being created. If unspecified then the module is being retrieved for further configuration.
 * @param {!Function=} configFn Optional configuration function for the module.
 * @return {!angular.IModule}
 */
tsickle_declare_module.angular.IAngularStatic.prototype.module = function(name, requires, configFn) {};
