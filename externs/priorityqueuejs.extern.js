/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/priorityqueuejs/index.d.ts:

/**
 * @constructor
 * @struct
 * Initializes a new empty PriorityQueue wich uses .DEFAULT_COMPARATOR() as the comparator function for its elements.
 * Initializes a new empty PriorityQueue with uses the given comparator(a, b) function as the comparator for its elements.
 * The comparator function must return a positive number when a > b, 0 when a == b and a negative number when a < b.
 * @param {!PriorityQueue.Comparator<T>=} comparator
 */
function PriorityQueue(comparator) {}
 /** @type {!PriorityQueue.Comparator<(string|number)>} */
PriorityQueue.DEFAULT_COMPARATOR;

/**
 * Dequeues the top element of the priority queue.
 * Throws an Error when the queue is empty.
 * @return {T}
 */
PriorityQueue.prototype.deq = function() {};

/**
 * Enqueues the element at the priority queue and returns its new size.
 * @param {T} element The element to add
 * @return {number}
 */
PriorityQueue.prototype.enq = function(element) {};

/**
 * Executes fn on each element.
 * Just be careful to not modify the priorities, since the queue won't reorder itself.
 * @param {function(T, number, !Array<T>): void} fn The value to pass to an Array.forEach call
 * @return {void}
 */
PriorityQueue.prototype.forEach = function(fn) {};

/**
 * Returns whether the priority queue is empty or not.
 * @return {boolean}
 */
PriorityQueue.prototype.isEmpty = function() {};

/**
 * Peeks at the top element of the priority queue.
 * Throws an Error when the queue is empty.
 * @return {T}
 */
PriorityQueue.prototype.peek = function() {};

/**
 * Returns the size of the priority queue.
 * @return {number}
 */
PriorityQueue.prototype.size = function() {};
/**
 * @record
 * @struct
 */
PriorityQueue.Comparator = function() {};

/* TODO: CallSignature: PriorityQueue */

/* TODO: ExportAssignment in  */
