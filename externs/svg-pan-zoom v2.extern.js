/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/svg-pan-zoom v2/index.d.ts:
/** @const */
var SvgPanZoom = {};
/**
 * @record
 * @struct
 */
SvgPanZoom.OptionConfig = function() {};
 /** @type {boolean} */
SvgPanZoom.OptionConfig.prototype.panEnabled;
 /** @type {boolean} */
SvgPanZoom.OptionConfig.prototype.controlIconsEnabled;
 /** @type {boolean} */
SvgPanZoom.OptionConfig.prototype.zoomEnabled;
 /** @type {boolean} */
SvgPanZoom.OptionConfig.prototype.dblClickZoomEnabled;
 /** @type {number} */
SvgPanZoom.OptionConfig.prototype.zoomScaleSensitivity;
 /** @type {number} */
SvgPanZoom.OptionConfig.prototype.minZoom;
 /** @type {number} */
SvgPanZoom.OptionConfig.prototype.maxZoom;
 /** @type {boolean} */
SvgPanZoom.OptionConfig.prototype.fit;
 /** @type {boolean} */
SvgPanZoom.OptionConfig.prototype.center;
 /** @type {function(number): void} */
SvgPanZoom.OptionConfig.prototype.beforeZoom;
 /** @type {function(number): void} */
SvgPanZoom.OptionConfig.prototype.onZoom;
 /** @type {function(!SvgPanZoom.IPoint): void} */
SvgPanZoom.OptionConfig.prototype.beforePan;
 /** @type {function(number, number): void} */
SvgPanZoom.OptionConfig.prototype.onPan;
 /** @type {?} */
SvgPanZoom.OptionConfig.prototype.refreshRate;
/**
 * @record
 * @struct
 */
SvgPanZoom.IPoint = function() {};
 /** @type {number} */
SvgPanZoom.IPoint.prototype.x;
 /** @type {number} */
SvgPanZoom.IPoint.prototype.y;
/**
 * @record
 * @struct
 */
SvgPanZoom.ISvgPanZoom = function() {};

/* TODO: CallSignature: SvgPanZoom */

/**
 * Enables Panning on svg element
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.enablePan = function() {};

/**
 * Disables panning on svg element
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.disablePan = function() {};

/**
 * Checks if Panning is enabled or not
 * @return {boolean} true or false based on panning settings
 */
SvgPanZoom.ISvgPanZoom.prototype.isPanEnabled = function() {};

/**
 * @param {function(!SvgPanZoom.IPoint): void} fn
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.setBeforePan = function(fn) {};

/**
 * @param {function(number, number): void} fn
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.setOnPan = function(fn) {};

/**
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.enableZoom = function() {};

/**
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.disableZoom = function() {};

/**
 * @return {boolean}
 */
SvgPanZoom.ISvgPanZoom.prototype.isZoomEnabled = function() {};

/**
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.enableControlIcons = function() {};

/**
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.disableControlIcons = function() {};

/**
 * @return {boolean}
 */
SvgPanZoom.ISvgPanZoom.prototype.isControlIconsEnabled = function() {};

/**
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.enableDblClickZoom = function() {};

/**
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.disableDblClickZoom = function() {};

/**
 * @param {number} scale
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.setZoomScaleSensitivity = function(scale) {};

/**
 * @param {number} zoom
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.setMinZoom = function(zoom) {};

/**
 * @param {number} zoom
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.setMaxZoom = function(zoom) {};

/**
 * @param {function(number): void} fn
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.setBeforeZoom = function(fn) {};

/**
 * @param {function(number): void} fn
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.setOnZoom = function(fn) {};

/**
 * @param {number} scale
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.zoom = function(scale) {};

/**
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.zoomIn = function() {};

/**
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.zoomOut = function() {};

/**
 * @param {number} scale
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.zoomBy = function(scale) {};

/**
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.resetZoom = function() {};

/**
 * Get zoom scale/level
 * 
 * @return {number}
 */
SvgPanZoom.ISvgPanZoom.prototype.getZoom = function() {};

/**
 * Adjust viewport size (only) so it will fit in SVG
 * Does not center image
 * 
 * @param {boolean=} dropCache
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.fit = function(dropCache) {};

/**
 * Adjust viewport pan (only) so it will be centered in SVG
 * Does not zoom/fit image
 * 
 * @param {boolean=} dropCache
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.center = function(dropCache) {};

/**
 * Recalculates cached svg dimensions and controls position
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.resize = function() {};

/**
 * Pan to a rendered position
 * 
 * @param {!SvgPanZoom.IPoint} point
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.pan = function(point) {};

/**
 * Relatively pan the graph by a specified rendered position vector
 * 
 * @param {!SvgPanZoom.IPoint} point
 * @return {void}
 */
SvgPanZoom.ISvgPanZoom.prototype.panBy = function(point) {};

/**
 * Get pan vector
 * 
 * @return {!SvgPanZoom.IPoint}
 */
SvgPanZoom.ISvgPanZoom.prototype.getPan = function() {};

/**
 * @param {number} scale
 * @param {!SvgPanZoom.IPoint} point
 * @return {boolean}
 */
SvgPanZoom.ISvgPanZoom.prototype.zoomAtPoint = function(scale, point) {};

/**
 * @param {number} scale
 * @param {!SvgPanZoom.IPoint} point
 * @return {boolean}
 */
SvgPanZoom.ISvgPanZoom.prototype.zoomAtPointBy = function(scale, point) {};
 /** @type {!SvgPanZoom.ISvgPanZoom} */
var svgPanZoom;
