/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/adm-zip/index.d.ts:

/**
 * @constructor
 * @struct
 * Create a new, empty archive.
 * Read an existing archive.
 * @param {string|?=} fileName_or_rawData
 */
function AdmZip(fileName_or_rawData) {}

/**
 * Extracts the given entry from the archive and returns the content as a
 * Buffer object.
 * Extracts the given entry from the archive and returns the content as a
 * Buffer object.
 * @param {string|!AdmZip.IZipEntry} entry String with the full path of the entry / ZipEntry object
 * @return {?} Buffer or Null in case of error
 */
AdmZip.prototype.readFile = function(entry) {};

/**
 * Asynchronous readFile
 * Asynchronous readFile
 * @param {string|!AdmZip.IZipEntry} entry String with the full path of the entry / ZipEntry object
 * @param {function(?, string): ?} callback Called with a Buffer or Null in case of error
 * @return {void} Buffer or Null in case of error
 */
AdmZip.prototype.readFileAsync = function(entry, callback) {};

/**
 * Extracts the given entry from the archive and returns the content as
 * plain text in the given encoding
 * Extracts the given entry from the archive and returns the content as
 * plain text in the given encoding
 * @param {string|!AdmZip.IZipEntry} fileName
 * @param {string=} encoding Optional. If no encoding is specified utf8 is used
 * @return {string} String
 */
AdmZip.prototype.readAsText = function(fileName, encoding) {};

/**
 * Asynchronous readAsText
 * Asynchronous readAsText
 * @param {string|!AdmZip.IZipEntry} fileName
 * @param {function(string): ?} callback Called with the resulting string.
 * @param {string=} encoding Optional. If no encoding is specified utf8 is used
 * @return {void}
 */
AdmZip.prototype.readAsTextAsync = function(fileName, callback, encoding) {};

/**
 * Remove the entry from the file or the entry and all its nested directories
 * and files if the given entry is a directory
 * Remove the entry from the file or the entry and all its nested directories
 * and files if the given entry is a directory
 * @param {string|!AdmZip.IZipEntry} entry String with the full path of the entry / A ZipEntry object.
 * @return {void}
 */
AdmZip.prototype.deleteFile = function(entry) {};

/**
 * Adds a comment to the zip. The zip must be rewritten after
 * adding the comment.
 * @param {string} comment Content of the comment.
 * @return {void}
 */
AdmZip.prototype.addZipComment = function(comment) {};

/**
 * Returns the zip comment
 * @return {string} The zip comment.
 */
AdmZip.prototype.getZipComment = function() {};

/**
 * Adds a comment to a specified zipEntry. The zip must be rewritten after
 * adding the comment.
 * The comment cannot exceed 65535 characters in length.
 * Adds a comment to a specified zipEntry. The zip must be rewritten after
 * adding the comment.
 * The comment cannot exceed 65535 characters in length.
 * @param {string|!AdmZip.IZipEntry} entry String with the full path of the entry / ZipEntry object.
 * @param {string} comment The comment to add to the entry.
 * @return {void}
 */
AdmZip.prototype.addZipEntryComment = function(entry, comment) {};

/**
 * Returns the comment of the specified entry.
 * Returns the comment of the specified entry
 * @param {string|!AdmZip.IZipEntry} entry String with the full path of the entry. / ZipEntry object.
 * @return {string} String The comment of the specified entry.
 */
AdmZip.prototype.getZipEntryComment = function(entry) {};

/**
 * Updates the content of an existing entry inside the archive. The zip
 * must be rewritten after updating the content
 * Updates the content of an existing entry inside the archive. The zip
 * must be rewritten after updating the content
 * @param {string|!AdmZip.IZipEntry} entry String with the full path of the entry. / ZipEntry object.
 * @param {?} content The entry's new contents.
 * @return {void}
 */
AdmZip.prototype.updateFile = function(entry, content) {};

/**
 * Adds a file from the disk to the archive.
 * @param {string} localPath Path to a file on disk.
 * @param {string=} zipPath Path to a directory in the archive. Defaults to the empty
 *   string.
 * @return {void}
 */
AdmZip.prototype.addLocalFile = function(localPath, zipPath) {};

/**
 * Adds a local directory and all its nested files and directories to the
 * archive.
 * @param {string} localPath Path to a folder on disk.
 * @param {string=} zipPath Path to a folder in the archive. Defaults to an empty
 *   string.
 * @return {void}
 */
AdmZip.prototype.addLocalFolder = function(localPath, zipPath) {};

/**
 * Allows you to create a entry (file or directory) in the zip file.
 * If you want to create a directory the entryName must end in / and a null
 * buffer should be provided.
 * @param {string} entryName Entry path
 * @param {?} data
 * @param {string=} comment Comment to add to the entry.
 * @param {number=} attr Attribute to add to the entry.
 * @return {void}
 */
AdmZip.prototype.addFile = function(entryName, data, comment, attr) {};

/**
 * Returns an array of ZipEntry objects representing the files and folders
 * inside the archive
 * @return {!Array<!AdmZip.IZipEntry>}
 */
AdmZip.prototype.getEntries = function() {};

/**
 * Returns a ZipEntry object representing the file or folder specified by
 * ``name``.
 * @param {string} name Name of the file or folder to retrieve.
 * @return {!AdmZip.IZipEntry} ZipEntry The entry corresponding to the name.
 */
AdmZip.prototype.getEntry = function(name) {};

/**
 * Extracts the given entry to the given targetPath.
 * If the entry is a directory inside the archive, the entire directory and
 * its subdirectories will be extracted.
 * Extracts the given entry to the given targetPath.
 * If the entry is a directory inside the archive, the entire directory and
 * its subdirectories will be extracted.
 * @param {string|!AdmZip.IZipEntry} entryPath
 * @param {string} targetPath Target folder where to write the file
 * @param {boolean=} maintainEntryPath If maintainEntryPath is true and the entry is
 *   inside a folder, the entry folder will be created in targetPath as
 *   well. Default is TRUE
 * @param {boolean=} overwrite If the file already exists at the target path, the file
 *   will be overwriten if this is true. Default is FALSE
 *  / If the file already exists at the target path, the file
 *   will be overwriten if this is true. Default is FALSE
 * @return {boolean} Boolean
 */
AdmZip.prototype.extractEntryTo = function(entryPath, targetPath, maintainEntryPath, overwrite) {};

/**
 * Extracts the entire archive to the given location
 * @param {string} targetPath Target location
 * @param {boolean=} overwrite If the file already exists at the target path, the file
 *   will be overwriten if this is true. Default is FALSE
 * @return {void}
 */
AdmZip.prototype.extractAllTo = function(targetPath, overwrite) {};

/**
 * Extracts the entire archive to the given location
 * @param {string} targetPath Target location
 * @param {boolean} overwrite If the file already exists at the target path, the file
 *   will be overwriten if this is true. Default is FALSE
 * @param {function(!Error): void} callback The callback function will be called afeter extraction
 * @return {void}
 */
AdmZip.prototype.extractAllToAsync = function(targetPath, overwrite, callback) {};

/**
 * Writes the newly created zip file to disk at the specified location or
 * if a zip was opened and no ``targetFileName`` is provided, it will
 * overwrite the opened zip
 * @param {string=} targetPath
 * @return {void}
 */
AdmZip.prototype.writeZip = function(targetPath) {};

/**
 * Returns the content of the entire zip file as a Buffer object
 * @return {?} Buffer
 */
AdmZip.prototype.toBuffer = function() {};
/**
 * @record
 * @struct
 */
AdmZip.IZipEntry = function() {};
 /** @type {string} */
AdmZip.IZipEntry.prototype.entryName;
 /** @type {?} */
AdmZip.IZipEntry.prototype.rawEntryName;
 /** @type {?} */
AdmZip.IZipEntry.prototype.extra;
 /** @type {string} */
AdmZip.IZipEntry.prototype.comment;
 /** @type {string} */
AdmZip.IZipEntry.prototype.name;
 /** @type {boolean} */
AdmZip.IZipEntry.prototype.isDirectory;
 /** @type {?} */
AdmZip.IZipEntry.prototype.header;

/**
 * Retrieve the compressed data for this entry. Note that this may trigger
 * compression if any properties were modified.
 * @return {?}
 */
AdmZip.IZipEntry.prototype.getCompressedData = function() {};

/**
 * Asynchronously retrieve the compressed data for this entry. Note that
 * this may trigger compression if any properties were modified.
 * @param {function(?): void} callback
 * @return {void}
 */
AdmZip.IZipEntry.prototype.getCompressedDataAsync = function(callback) {};

/**
 * Set the (uncompressed) data to be associated with this entry.
 * Set the (uncompressed) data to be associated with this entry.
 * @param {string|?} value
 * @return {void}
 */
AdmZip.IZipEntry.prototype.setData = function(value) {};

/**
 * Get the decompressed data associated with this entry.
 * @return {?}
 */
AdmZip.IZipEntry.prototype.getData = function() {};

/**
 * Asynchronously get the decompressed data associated with this entry.
 * @param {function(?): void} callback
 * @return {void}
 */
AdmZip.IZipEntry.prototype.getDataAsync = function(callback) {};

/**
 * Returns the CEN Entry Header to be written to the output zip file, plus
 * the extra data and the entry comment.
 * @return {?}
 */
AdmZip.IZipEntry.prototype.packHeader = function() {};

/**
 * Returns a nicely formatted string with the most important properties of
 * the ZipEntry.
 * @return {string}
 */
AdmZip.IZipEntry.prototype.toString = function() {};

/* TODO: ExportAssignment in  */
