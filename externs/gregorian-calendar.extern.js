/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/gregorian-calendar/index.d.ts:
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "gregorian-calendar"
/** @const */
tsickle_declare_module.gregorian_calendar = {};

/**
 * @constructor
 * @struct
 * @param {!Object=} locale
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar = function(locale) {};

/**
 * same as call setYear, setMonth, setDayOfMonth ....
 * @param {!Number} year
 * @param {!Number} month
 * @param {!Number} dayOfMonth
 * @param {!Number} hourOfDay
 * @param {!Number} minutes
 * @param {!Number} seconds
 * @param {!Number} milliseconds
 * @return {void}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.set = function(year, month, dayOfMonth, hourOfDay, minutes, seconds, milliseconds) {};

/**
 * set absolute time for current instance
 * @param {!Number} time
 * @return {void}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.setTime = function(time) {};

/**
 * get absolute time for current instance
 * @return {!Number}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.getTime = function() {};

/**
 * set current date instance's timezone offset (in minutes)
 * @param {!Number} timezoneOffset
 * @return {void}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.setTimezoneOffset = function(timezoneOffset) {};

/**
 * current date instance's timezone offset (in minutes)
 * @return {!Number}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.getTimezoneOffset = function() {};

/**
 * set the year of the given calendar field.
 * @param {!Number} year
 * @return {void}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.setYear = function(year) {};

/**
 * Returns the year of the given calendar field.
 * @return {!Number}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.getYear = function() {};

/**
 * set the month of the given calendar field. January is 0, you can use enum
 * @param {!Number} month
 * @return {void}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.setMonth = function(month) {};

/**
 * set the month of the given calendar field without influence month.
 * 2015-09-29 -> setMonth(2) -> 2015-03-01
 * 2015-09-29 -> rollSetMonth(2) -> 2015-02-28
 * @param {!Number} month
 * @return {void}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.rollSetMonth = function(month) {};

/**
 * Returns the month of the given calendar field.
 * @return {!Number}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.getMonth = function() {};

/**
 * set the day of month of the given calendar field.
 * @param {!Number} day
 * @return {void}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.setDayOfMonth = function(day) {};

/**
 * Returns the day of month of the given calendar field.
 * @return {!Number}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.getDayOfMonth = function() {};

/**
 * set the hour of day for the given calendar field.
 * @param {!Number} hour
 * @return {void}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.setHourOfDay = function(hour) {};

/**
 * Returns the hour of day for the given calendar field.
 * @return {!Number}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.getHourOfDay = function() {};

/**
 * set the minute of the given calendar field.
 * @param {!Number} minute
 * @return {void}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.setMinutes = function(minute) {};

/**
 * Returns the minute of the given calendar field.
 * @return {!Number}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.getMinutes = function() {};

/**
 * set the second of the given calendar field.
 * @param {!Number} second
 * @return {void}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.setSeconds = function(second) {};

/**
 * Returns the second of the given calendar field.
 * @return {!Number}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.getSeconds = function() {};

/**
 * set the millisecond of the given calendar field.
 * @param {!Number} second
 * @return {void}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.setMilliSeconds = function(second) {};

/**
 * Returns the millisecond of the given calendar field.
 * @return {!Number}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.getMilliSeconds = function() {};

/**
 * Returns the week of year of the given calendar field.
 * @return {!Number}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.getWeekOfYear = function() {};

/**
 * Returns the week of month of the given calendar field.
 * @return {!Number}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.getWeekOfMonth = function() {};

/**
 * Returns the day of year of the given calendar field.
 * @return {!Number}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.getDayOfYear = function() {};

/**
 * Returns the day of week of the given calendar field. sunday is 0, monday is 1
 * @return {!Number}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.getDayOfWeek = function() {};

/**
 * Returns the day of week in month of the given calendar field.
 * @return {!Number}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.getDayOfWeekInMonth = function() {};

/**
 * add the year of the given calendar field.
 * @param {!Number} amount
 * @return {void}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.addYear = function(amount) {};

/**
 * add the month of the given calendar field.
 * @param {!Number} amount
 * @return {void}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.addMonth = function(amount) {};

/**
 * add the day of month of the given calendar field.
 * @param {!Number} amount
 * @return {void}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.addDayOfMonth = function(amount) {};

/**
 * add the hour of day of the given calendar field.
 * @param {!Number} amount
 * @return {void}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.addHourOfDay = function(amount) {};

/**
 * add the minute of the given calendar field.
 * @param {!Number} amount
 * @return {void}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.addMinute = function(amount) {};

/**
 * add the second of the given calendar field.
 * @param {!Number} amount
 * @return {void}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.addSecond = function(amount) {};

/**
 * add the millisecond of the given calendar field.
 * @param {!Number} amount
 * @return {void}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.addMilliSecond = function(amount) {};

/**
 * Returns the week number of year represented by this GregorianCalendar.
 * @return {!Number}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.getWeekYear = function() {};

/**
 * Sets this GregorianCalendar to the date given by the date specifiers - weekYear, weekOfYear, and dayOfWeek.
 * weekOfYear follows the WEEK_OF_YEAR numbering.
 * The dayOfWeek value must be one of the DAY_OF_WEEK values: SUNDAY to SATURDAY.
 *        weekYear: the week year
 *         weekOfYear: the week number based on weekYear
 *         dayOfWeek: the day of week value
 * @param {!Number} weekYear
 * @param {!Number} weekOfYear
 * @param {!Number} dayOfWeek
 * @return {void}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.setWeekDate = function(weekYear, weekOfYear, dayOfWeek) {};

/**
 * Returns the number of weeks in the week year
 * @return {!Number}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.getWeeksInWeekYear = function() {};

/**
 * Returns a clone of current instance
 * @return {!GregorianCalendar}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.clone = function() {};

/**
 * @param {!GregorianCalendar} other
 * @return {boolean}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.equals = function(other) {};

/**
 * compare this object and other by day. return -1 0 or 1
 * @param {!GregorianCalendar} other
 * @return {!Number}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.compareToDay = function(other) {};

/**
 * clear all field of current instance
 * @return {void}
 */
tsickle_declare_module.gregorian_calendar.GregorianCalendar.prototype.clear = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.gregorian_calendar */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "gregorian-calendar-format"
/** @const */
tsickle_declare_module.gregorian_calendar_format = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.gregorian_calendar_format */

/** @const */
tsickle_declare_module.gregorian_calendar_format.DateTimeStyle = {};
/** @const {number} */
tsickle_declare_module.gregorian_calendar_format.DateTimeStyle.FULL;
/** @const {number} */
tsickle_declare_module.gregorian_calendar_format.DateTimeStyle.LONG;
/** @const {number} */
tsickle_declare_module.gregorian_calendar_format.DateTimeStyle.MEDIUM;
/** @const {number} */
tsickle_declare_module.gregorian_calendar_format.DateTimeStyle.SHORT;

/**
 * @constructor
 * @struct
 * @param {string} pattern The format pattern string
 * @param {!Object=} locale The local of to output (defaults to require('gregorian-calendar/lib/locale/en_US'),
 *               may also be one of:
 *                   require('gregorian-calendar/lib/locale/zh_CN')
 *                   require('gregorian-calendar/lib/locale/ru_RU')
 */
tsickle_declare_module.gregorian_calendar_format.DateTimeFormat = function(pattern, locale) {};
 /** @type {DateTimeStyle} */
tsickle_declare_module.gregorian_calendar_format.DateTimeFormat.prototype.Style;

/**
 * format an instance of GregorianCalendar according to pattern
 * @param {!GregorianCalendar} calendar
 * @return {!String}
 */
tsickle_declare_module.gregorian_calendar_format.DateTimeFormat.prototype.format = function(calendar) {};

/**
 * parse a dateString to an instance of GregorianCalendar according to pattern, it's better to specify calendarLocale, such as
 *  `df.parse('2013-11-12', {locale: require('gregorian-calendar/lib/locale/zh_CN'}));`
 * @param {!String} dateString
 * @param {{locale: !Object}} __1
 * @return {!GregorianCalendar}
 */
tsickle_declare_module.gregorian_calendar_format.DateTimeFormat.prototype.parse = function(dateString, __1) {};

/**
 * get a predefine GregorianCalendarFormat instance
 * @param {DateTimeStyle} dateStyle
 * @param {DateTimeStyle} timeStyle
 * @param {!Object=} locale
 * @return {!DateTimeFormat}
 */
tsickle_declare_module.gregorian_calendar_format.DateTimeFormat.prototype.getDateTimeInstance = function(dateStyle, timeStyle, locale) {};

/* TODO: ExportAssignment in tsickle_declare_module.gregorian_calendar_format */
