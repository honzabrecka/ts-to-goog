/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/fetch.io/index.d.ts:

/** @typedef {string} */
var TUrl;

/** @typedef {string} */
var TMethod;
/**
 * @record
 * @struct
 */
function Query() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function Header() {}

/* TODO: IndexSignature:  */
/**
 * @extends {RequestInit}
 * @record
 * @struct
 */
function Options() {}
 /** @type {string} */
Options.prototype.prefix;
 /** @type {?} */
Options.prototype.query;
 /** @type {?} */
Options.prototype.header;

/**
 * @param {string} url
 * @param {?} body
 * @return {(boolean|void)}
 */
Options.prototype.beforeRequest = function(url, body) {};

/**
 * @param {!Response} res
 * @return {void}
 */
Options.prototype.afterResponse = function(res) {};

/**
 * @param {?} body
 * @return {void}
 */
Options.prototype.afterJSON = function(body) {};

/**
 * @constructor
 * @struct
 * @param {string} method
 * @param {string} url
 * @param {?} options
 */
function Request(method, url, options) {}
 /** @type {?} */
Request.prototype.delete;
 /** @type {?} */
Request.prototype.get;
 /** @type {?} */
Request.prototype.head;
 /** @type {?} */
Request.prototype.options;
 /** @type {?} */
Request.prototype.post;
 /** @type {?} */
Request.prototype.put;
 /** @type {?} */
Request.prototype.patch;

/**
 * Set Options
 * @param {string|?} key_or_opts
 * @param {?=} value
 * @return {?}
 */
Request.prototype.config = function(key_or_opts, value) {};

/**
 * Set Header
 * @param {string|?} key_or_opts
 * @param {?=} value
 * @return {?}
 */
Request.prototype.set = function(key_or_opts, value) {};

/**
 * Set Content-Type
 * @param {string} type
 * @return {?}
 */
Request.prototype.type = function(type) {};

/**
 * Add query string
 * @param {?} object
 * @return {?}
 */
Request.prototype.query = function(object) {};

/**
 * Send data
 * @param {?} data
 * @return {?}
 */
Request.prototype.send = function(data) {};

/**
 * append formData
 * @param {string|?} key_or_object
 * @param {?=} value
 * @return {?}
 */
Request.prototype.append = function(key_or_object, value) {};

/**
 * Get Response directly
 * @param {?} resolve
 * @param {?=} reject
 * @return {!Promise<?>}
 */
Request.prototype.then = function(resolve, reject) {};

/**
 * Make Response to JSON
 * @param {boolean=} strict
 * @return {!Promise<?>}
 */
Request.prototype.json = function(strict) {};

/**
 * Make Response to string
 * @return {!Promise<string>}
 */
Request.prototype.text = function() {};

/**
 * @constructor
 * @struct
 * @param {?=} options
 */
function Fetch(options) {}
