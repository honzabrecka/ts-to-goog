/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/react-navigation/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/** @typedef {?} */
var AnimatedValue;

/** @typedef {string} */
var HeaderMode;

/** @typedef {?} */
var HeaderProps;

/** @typedef {?} */
var NavigationState;

/** @typedef {?} */
var NavigationRoute;

/** @typedef {?} */
var NavigationLeafRoute;

/** @typedef {?} */
var NavigationStateRoute;

/** @typedef {?} */
var NavigationScreenOptionsGetter;

/** @typedef {?} */
var NavigationRouter;

/** @typedef {?} */
var NavigationScreenOption;

/** @typedef {?} */
var NavigationScreenDetails;

/** @typedef {?} */
var NavigationScreenOptions;

/** @typedef {?} */
var NavigationScreenConfigProps;

/** @typedef {?} */
var NavigationScreenConfig;

/** @typedef {?} */
var NavigationComponent;

/** @typedef {?} */
var NavigationScreenComponent;

/** @typedef {?} */
var NavigationNavigator;
/**
 * @record
 * @struct
 */
function NavigationParams() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function NavigationNavigateActionPayload() {}
 /** @type {string} */
NavigationNavigateActionPayload.prototype.routeName;
 /** @type {?} */
NavigationNavigateActionPayload.prototype.params;
 /** @type {?} */
NavigationNavigateActionPayload.prototype.action;
/**
 * @extends {NavigationNavigateActionPayload}
 * @record
 * @struct
 */
function NavigationNavigateAction() {}
 /** @type {string} */
NavigationNavigateAction.prototype.type;
/**
 * @record
 * @struct
 */
function NavigationBackActionPayload() {}
 /** @type {string} */
NavigationBackActionPayload.prototype.key;
/**
 * @extends {NavigationBackActionPayload}
 * @record
 * @struct
 */
function NavigationBackAction() {}
 /** @type {string} */
NavigationBackAction.prototype.type;
/**
 * @record
 * @struct
 */
function NavigationSetParamsActionPayload() {}
 /** @type {string} */
NavigationSetParamsActionPayload.prototype.key;
 /** @type {?} */
NavigationSetParamsActionPayload.prototype.params;
/**
 * @extends {NavigationSetParamsActionPayload}
 * @record
 * @struct
 */
function NavigationSetParamsAction() {}
 /** @type {string} */
NavigationSetParamsAction.prototype.type;
/**
 * @record
 * @struct
 */
function NavigationInitActionPayload() {}
 /** @type {?} */
NavigationInitActionPayload.prototype.params;
/**
 * @extends {NavigationInitActionPayload}
 * @record
 * @struct
 */
function NavigationInitAction() {}
 /** @type {string} */
NavigationInitAction.prototype.type;
/**
 * @record
 * @struct
 */
function NavigationResetActionPayload() {}
 /** @type {number} */
NavigationResetActionPayload.prototype.index;
 /** @type {string} */
NavigationResetActionPayload.prototype.key;
 /** @type {!Array<?>} */
NavigationResetActionPayload.prototype.actions;
/**
 * @extends {NavigationResetActionPayload}
 * @record
 * @struct
 */
function NavigationResetAction() {}
 /** @type {string} */
NavigationResetAction.prototype.type;
/**
 * @record
 * @struct
 */
function NavigationUriActionPayload() {}
 /** @type {string} */
NavigationUriActionPayload.prototype.uri;
/**
 * @extends {NavigationUriActionPayload}
 * @record
 * @struct
 */
function NavigationUriAction() {}
 /** @type {string} */
NavigationUriAction.prototype.type;
/**
 * @record
 * @struct
 */
function NavigationStackViewConfig() {}
 /** @type {string} */
NavigationStackViewConfig.prototype.mode;
 /** @type {string} */
NavigationStackViewConfig.prototype.headerMode;
 /** @type {?} */
NavigationStackViewConfig.prototype.cardStyle;
 /** @type {?} */
NavigationStackViewConfig.prototype.transitionConfig;
 /** @type {?} */
NavigationStackViewConfig.prototype.onTransitionStart;
 /** @type {?} */
NavigationStackViewConfig.prototype.onTransitionEnd;

/** @typedef {?} */
var NavigationStackScreenOptions;
/**
 * @record
 * @struct
 */
function NavigationStackRouterConfig() {}
 /** @type {string} */
NavigationStackRouterConfig.prototype.initialRouteName;
 /** @type {?} */
NavigationStackRouterConfig.prototype.initialRouteParams;
 /** @type {?} */
NavigationStackRouterConfig.prototype.paths;
 /** @type {?} */
NavigationStackRouterConfig.prototype.navigationOptions;

/** @typedef {?} */
var NavigationStackAction;

/** @typedef {?} */
var NavigationTabAction;

/** @typedef {?} */
var NavigationAction;

/** @typedef {?} */
var NavigationRouteConfig;

/** @typedef {?} */
var NavigationScreenRouteConfig;

/** @typedef {?} */
var NavigationPathsConfig;
/**
 * @record
 * @struct
 */
function NavigationTabRouterConfig() {}
 /** @type {string} */
NavigationTabRouterConfig.prototype.initialRouteName;
 /** @type {?} */
NavigationTabRouterConfig.prototype.paths;
 /** @type {?} */
NavigationTabRouterConfig.prototype.navigationOptions;
 /** @type {!Array<string>} */
NavigationTabRouterConfig.prototype.order;
 /** @type {string} */
NavigationTabRouterConfig.prototype.backBehavior;

/** @typedef {?} */
var NavigationTabScreenOptions;

/** @typedef {?} */
var NavigationDrawerScreenOptions;

/** @typedef {?} */
var NavigationRouteConfigMap;

/** @typedef {?} */
var NavigationDispatch;

/** @typedef {?} */
var NavigationProp;

/** @typedef {?} */
var NavigationScreenProp;

/** @typedef {?} */
var NavigationNavigatorProps;

/** @typedef {string} */
var NavigationGestureDirection;

/** @typedef {?} */
var NavigationLayout;

/** @typedef {?} */
var NavigationScene;

/** @typedef {?} */
var NavigationTransitionProps;

/** @typedef {?} */
var NavigationSceneRendererProps;

/** @typedef {?} */
var NavigationTransitionSpec;

/** @typedef {?} */
var TransitionConfig;

/** @typedef {?} */
var NavigationAnimationSetter;

/** @typedef {?} */
var NavigationSceneRenderer;

/** @typedef {?} */
var NavigationStyleInterpolator;

/** @typedef {?} */
var LayoutEvent;

/** @typedef {string} */
var NavigatorType;

/**
 * @template S
 * @param {?} navigation
 * @return {?}
 */
function addNavigationHelpers(navigation) {}
/**
 * @record
 * @struct
 */
function NavigationContainerProps() {}
 /** @type {(string|!RegExp)} */
NavigationContainerProps.prototype.uriPrefix;
 /** @type {?} */
NavigationContainerProps.prototype.onNavigationStateChange;
 /** @type {?} */
NavigationContainerProps.prototype.style;
/**
 * @extends {React.ComponentClass}
 * @record
 * @struct
 */
function NavigationContainer() {}
 /** @type {?} */
NavigationContainer.prototype.router;
 /** @type {?} */
NavigationContainer.prototype.screenProps;
 /** @type {?} */
NavigationContainer.prototype.navigationOptions;
 /** @type {?} */
NavigationContainer.prototype.state;
/**
 * @extends {NavigationStackViewConfig}
 * @extends {NavigationStackRouterConfig}
 * @record
 * @struct
 */
function StackNavigatorConfig() {}
 /** @type {?} */
StackNavigatorConfig.prototype.containerOptions;

/**
 * @template T
 * @param {?} routeConfigMap
 * @param {?=} stackConfig
 * @return {?}
 */
function StackNavigator(routeConfigMap, stackConfig) {}
 /** @type {!React.ComponentClass<?>} */
var DrawerItems;
/**
 * @record
 * @struct
 */
function DrawerViewConfig() {}
 /** @type {number} */
DrawerViewConfig.prototype.drawerWidth;
 /** @type {string} */
DrawerViewConfig.prototype.drawerPosition;
 /** @type {?} */
DrawerViewConfig.prototype.contentComponent;
 /** @type {?} */
DrawerViewConfig.prototype.contentOptions;
 /** @type {?} */
DrawerViewConfig.prototype.style;
/**
 * @extends {NavigationTabRouterConfig}
 * @extends {DrawerViewConfig}
 * @record
 * @struct
 */
function DrawerNavigatorConfig() {}
 /** @type {?} */
DrawerNavigatorConfig.prototype.containerConfig;
 /** @type {?} */
DrawerNavigatorConfig.prototype.contentOptions;

/**
 * @template T
 * @param {?} routeConfigMap
 * @param {?=} drawerConfig
 * @return {?}
 */
function DrawerNavigator(routeConfigMap, drawerConfig) {}
/**
 * @record
 * @struct
 */
function TabViewConfig() {}
 /** @type {!React.ComponentClass<?>} */
TabViewConfig.prototype.tabBarComponent;
 /** @type {string} */
TabViewConfig.prototype.tabBarPosition;
 /** @type {?} */
TabViewConfig.prototype.tabBarOptions;
 /** @type {boolean} */
TabViewConfig.prototype.swipeEnabled;
 /** @type {boolean} */
TabViewConfig.prototype.animationEnabled;
 /** @type {boolean} */
TabViewConfig.prototype.lazy;
/**
 * @extends {NavigationTabRouterConfig}
 * @extends {TabViewConfig}
 * @record
 * @struct
 */
function TabNavigatorConfig() {}

/**
 * @template T
 * @param {?} routeConfigMap
 * @param {?=} drawConfig
 * @return {?}
 */
function TabNavigator(routeConfigMap, drawConfig) {}
 /** @type {!React.ComponentClass<?>} */
var TabBarTop;
 /** @type {!React.ComponentClass<?>} */
var TabBarBottom;
/** @const */
var NavigationActions = {};

/**
 * @param {?=} options
 * @return {?}
 */
NavigationActions.init = function(options) {};

/**
 * @param {?} options
 * @return {?}
 */
NavigationActions.navigate = function(options) {};

/**
 * @param {?} options
 * @return {?}
 */
NavigationActions.reset = function(options) {};

/**
 * @param {?=} options
 * @return {?}
 */
NavigationActions.back = function(options) {};

/**
 * @param {?} options
 * @return {?}
 */
NavigationActions.setParams = function(options) {};
/**
 * @record
 * @struct
 */
function TransitionerProps() {}
 /** @type {?} */
TransitionerProps.prototype.configureTransition;
 /** @type {?} */
TransitionerProps.prototype.navigation;
 /** @type {?} */
TransitionerProps.prototype.onTransitionEnd;
 /** @type {?} */
TransitionerProps.prototype.onTransitionStart;
 /** @type {?} */
TransitionerProps.prototype.render;
 /** @type {?} */
TransitionerProps.prototype.style;
/**
 * @record
 * @struct
 */
function TransitionerState() {}
 /** @type {?} */
TransitionerState.prototype.layout;
 /** @type {?} */
TransitionerState.prototype.position;
 /** @type {?} */
TransitionerState.prototype.progress;
 /** @type {!Array<?>} */
TransitionerState.prototype.scenes;
/**
 * @constructor
 * @struct
 */
function Transitioner() {}

/**
 * Tab Router
 * 
 * @desc from react-navigation/src/routers/TabRouter.js
 * @param {?} routeConfigs
 * @param {?} config
 * @return {?}
 */
function TabRouter(routeConfigs, config) {}

/**
 * Stack Router
 * 
 * @desc from react-navigation/src/routers/StackRouter.js
 * @param {?} routeConfigs
 * @param {?} config
 * @return {?}
 */
function StackRouter(routeConfigs, config) {}

/**
 * Create Navigator
 * 
 * @see https://github.com/react-community/react-navigation/blob/master/src/navigators/createNavigator.js
 * @template C, S, A, NavigatorConfig, Options
 * @param {?} router
 * @param {?=} routeConfigs
 * @param {?=} navigatorConfig
 * @param {string=} navigatorType
 * @return {?}
 */
function createNavigator(router, routeConfigs, navigatorConfig, navigatorType) {}

/**
 * Create an HOC that injects the navigation and manages the navigation state
 * in case it's not passed from above.
 * This allows to use e.g. the StackNavigator and TabNavigator as root-level
 * components.
 * 
 * @see https://github.com/react-community/react-navigation/blob/master/src/createNavigationContainer.js
 * @template S, O
 * @param {?} Component
 * @return {!React.Component<?, ?>}
 */
function createNavigationContainer(Component) {}
/**
 * @record
 * @struct
 */
function NavigationScreenProps() {}
 /** @type {?} */
NavigationScreenProps.prototype.navigation;
 /** @type {?} */
NavigationScreenProps.prototype.screenProps;
 /** @type {?} */
NavigationScreenProps.prototype.navigationOptions;
/**
 * @record
 * @struct
 */
function HeaderBackButtonProps() {}
 /** @type {?} */
HeaderBackButtonProps.prototype.onPress;
 /** @type {string} */
HeaderBackButtonProps.prototype.pressColorAndroid;
 /** @type {string} */
HeaderBackButtonProps.prototype.title;
 /** @type {?} */
HeaderBackButtonProps.prototype.titleStyle;
 /** @type {string} */
HeaderBackButtonProps.prototype.tintColor;
 /** @type {string} */
HeaderBackButtonProps.prototype.truncatedTitle;
 /** @type {number} */
HeaderBackButtonProps.prototype.width;
 /** @type {!React.ComponentClass<?>} */
var HeaderBackButton;
