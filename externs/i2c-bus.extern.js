/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/i2c-bus/index.d.ts:

/** @typedef {?} */
var CompletionCallback;

/** @typedef {?} */
var BufferCallback;

/** @typedef {?} */
var ResultCallback;
/**
 * @record
 * @struct
 */
function I2cBusFuncs() {}
 /** @type {boolean} */
I2cBusFuncs.prototype.i2c;
 /** @type {boolean} */
I2cBusFuncs.prototype.tenBitAddr;
 /** @type {boolean} */
I2cBusFuncs.prototype.protocolMangling;
 /** @type {boolean} */
I2cBusFuncs.prototype.smbusPec;
 /** @type {boolean} */
I2cBusFuncs.prototype.smbusBlockProcCall;
 /** @type {boolean} */
I2cBusFuncs.prototype.smbusQuick;
 /** @type {boolean} */
I2cBusFuncs.prototype.smbusReceiveByte;
 /** @type {boolean} */
I2cBusFuncs.prototype.smbusSendByte;
 /** @type {boolean} */
I2cBusFuncs.prototype.smbusReadByte;
 /** @type {boolean} */
I2cBusFuncs.prototype.smbusWriteByte;
 /** @type {boolean} */
I2cBusFuncs.prototype.smbusReadWord;
 /** @type {boolean} */
I2cBusFuncs.prototype.smbusWriteWord;
 /** @type {boolean} */
I2cBusFuncs.prototype.smbusProcCall;
 /** @type {boolean} */
I2cBusFuncs.prototype.smbusReadBlock;
 /** @type {boolean} */
I2cBusFuncs.prototype.smbusWriteBlock;
 /** @type {boolean} */
I2cBusFuncs.prototype.smbusReadI2cBlock;
 /** @type {boolean} */
I2cBusFuncs.prototype.smbusWriteI2cBlock;
/**
 * @record
 * @struct
 */
function I2cBus() {}

/**
 * Asynchronous close.
 * 
 *     Completion callback
 * @param {?} callback
 * @return {void}
 */
I2cBus.prototype.close = function(callback) {};

/**
 * Synchronous close.
 * @return {void}
 */
I2cBus.prototype.closeSync = function() {};

/**
 * Determine functionality of the bus/adapter asynchronously.
 * 
 *     Callback that will recieve a frozen I2cFuncs object describing the I2C functionality available.
 * @param {?} callback
 * @return {void}
 */
I2cBus.prototype.i2cFuncs = function(callback) {};

/**
 * Determine functionality of the bus/adapter synchronously.
 * 
 *     A frozen I2cFuncs object describing the I2C functionality available.
 * @return {?}
 */
I2cBus.prototype.i2cFuncsSync = function() {};

/**
 * Scans the I2C bus asynchronously for devices the same way <code>i2cdetect -y -r</code> would.
 * 
 *     Callback that will recieve an array of numbers where each number represents the I2C address of a device which was detected.
 * @param {?} callback
 * @return {void}
 */
I2cBus.prototype.scan = function(callback) {};

/**
 * Scans the I2C bus synchronously for devices the same way <code>i2cdetect -y -r</code> would.
 * 
 *     An array of numbers where each number represents the I2C address of a device which was detected.
 * @return {!Array<number>}
 */
I2cBus.prototype.scanSync = function() {};

/**
 * Asynchronous plain I2C read.
 * 
 *     I2C device address.
 *     The number of bytes to read.
 *     The buffer that the data will be written to (must be at least {length} bytes long).
 *     Callback that will recieve the number of bytes read and the given buffer.
 * @param {number} address
 * @param {number} length
 * @param {?} buffer
 * @param {?} callback
 * @return {void}
 */
I2cBus.prototype.i2cRead = function(address, length, buffer, callback) {};

/**
 * Synchronous plain I2C read.
 * 
 *     I2C device address.
 *     The number of bytes to read.
 *     The buffer that the data will be written to (must be at least {length} bytes long).
 *     The number of bytes read.
 * @param {number} address
 * @param {number} length
 * @param {?} buffer
 * @return {number}
 */
I2cBus.prototype.i2cReadSync = function(address, length, buffer) {};

/**
 * Asynchronous plain I2C write.
 * 
 *     I2C device address.
 *     The number of bytes to write.
 *     The buffer that the data to write (must contain at least {length} bytes).
 *     Callback that will recieve the number of bytes written and the given buffer.
 * @param {number} address
 * @param {number} length
 * @param {?} buffer
 * @param {?} callback
 * @return {void}
 */
I2cBus.prototype.i2cWrite = function(address, length, buffer, callback) {};

/**
 * Synchronous plain I2C write.
 * 
 *     I2C device address.
 *     The number of bytes to write.
 *     The buffer that the data will to write (must contain at least {length} bytes).
 *     The number of bytes written.
 * @param {number} address
 * @param {number} length
 * @param {?} buffer
 * @return {number}
 */
I2cBus.prototype.i2cWriteSync = function(address, length, buffer) {};

/**
 * Asynchronous SMBus read byte.
 * 
 *     I2C device address.
 *     The command code.
 *     Callback that will recieve the byte read.
 * @param {number} address
 * @param {number} command
 * @param {?} callback
 * @return {void}
 */
I2cBus.prototype.readByte = function(address, command, callback) {};

/**
 * Synchronous SMBus read byte.
 * 
 *     I2C device address.
 *     The command code.
 *     The byte read.
 * @param {number} address
 * @param {number} command
 * @return {number}
 */
I2cBus.prototype.readByteSync = function(address, command) {};

/**
 * Asynchronous SMBus read word.
 * 
 *     I2C device address.
 *     The command code.
 *     Callback that will recieve the word read.
 * @param {number} address
 * @param {number} command
 * @param {?} callback
 * @return {void}
 */
I2cBus.prototype.readWord = function(address, command, callback) {};

/**
 * Synchronous SMBus read word.
 * 
 *     I2C device address.
 *     The command code.
 *     The word read.
 * @param {number} address
 * @param {number} command
 * @return {number}
 */
I2cBus.prototype.readWordSync = function(address, command) {};

/**
 * Asynchronous I2C block read (not defined by the SMBus
 * specification). Reads a block of bytes from a device, from a
 * designated register that is specified by cmd.
 * 
 *     I2C device address.
 *     The command code.
 *     The number of bytes to read (max 32).
 *     The buffer that the data will be written to (must be at least {length} bytes long).
 *     Callback that will recieve the number of bytes read and the given buffer.
 * @param {number} address
 * @param {number} command
 * @param {number} length
 * @param {?} buffer
 * @param {?} callback
 * @return {void}
 */
I2cBus.prototype.readI2cBlock = function(address, command, length, buffer, callback) {};

/**
 * Synchronous I2C block read (not defined by the SMBus
 * specification). Reads a block of bytes from a device, from a
 * designated register that is specified by cmd.
 * 
 *     I2C device address.
 *     The command code.
 *     The number of bytes to read (max 32).
 *     The buffer that the data will be written to (must be at least {length} bytes long).
 *     The number of bytes read.
 * @param {number} address
 * @param {number} command
 * @param {number} length
 * @param {?} buffer
 * @return {number}
 */
I2cBus.prototype.readI2cBlockSync = function(address, command, length, buffer) {};

/**
 * Asynchronous SMBus receive byte.
 * 
 *     I2C device address.
 *     Callback that will recieve the byte received.
 * @param {number} address
 * @param {?} callback
 * @return {void}
 */
I2cBus.prototype.receiveByte = function(address, callback) {};

/**
 * Synchronous SMBus receive byte.
 * 
 *     I2C device address.
 *     The byte received.
 * @param {number} address
 * @return {number}
 */
I2cBus.prototype.receiveByteSync = function(address) {};

/**
 * Asynchronous SMBus send byte.
 * 
 *     I2C device address.
 *     The data byte to send.
 *     Completion callback
 * @param {number} address
 * @param {number} byte
 * @param {?} callback
 * @return {void}
 */
I2cBus.prototype.sendByte = function(address, byte, callback) {};

/**
 * Synchronous SMBus send byte.
 * 
 *     I2C device address.
 *     The data byte to send.
 * @param {number} address
 * @param {number} byte
 * @return {void}
 */
I2cBus.prototype.sendByteSync = function(address, byte) {};

/**
 * Asynchronous SMBus write byte.
 * 
 *     I2C device address.
 *     The command code.
 *     The data byte to write.
 *     Completion callback
 * @param {number} address
 * @param {number} command
 * @param {number} byte
 * @param {?} callback
 * @return {void}
 */
I2cBus.prototype.writeByte = function(address, command, byte, callback) {};

/**
 * Synchronous SMBus write byte.
 * 
 *     I2C device address.
 *     The command code.
 *     The data byte to write.
 * @param {number} address
 * @param {number} command
 * @param {number} byte
 * @return {void}
 */
I2cBus.prototype.writeByteSync = function(address, command, byte) {};

/**
 * Asynchronous SMBus write word.
 * 
 *     I2C device address.
 *     The command code.
 *     The data word to write.
 *     Completion callback
 * @param {number} address
 * @param {number} command
 * @param {number} word
 * @param {?} callback
 * @return {void}
 */
I2cBus.prototype.writeWord = function(address, command, word, callback) {};

/**
 * Synchronous SMBus write word.
 * 
 *     I2C device address.
 *     The command code.
 *     The data word to write.
 * @param {number} address
 * @param {number} command
 * @param {number} word
 * @return {void}
 */
I2cBus.prototype.writeWordSync = function(address, command, word) {};

/**
 * Asynchronous SMBus quick command.  Writes a single bit to the device.
 * 
 *     I2C device address.
 *     The data bit to write (0 or 1).
 *     Completion callback
 * @param {number} address
 * @param {number} command
 * @param {number} bit
 * @param {?} callback
 * @return {void}
 */
I2cBus.prototype.writeQuick = function(address, command, bit, callback) {};

/**
 * Synchronous SMBus quick command.  Writes a single bit to the device.
 * 
 *     I2C device address.
 *     The data bit to write (0 or 1).
 * @param {number} address
 * @param {number} command
 * @param {number} bit
 * @return {void}
 */
I2cBus.prototype.writeQuickSync = function(address, command, bit) {};

/**
 * Asynchronous I2C block write (not defined by the SMBus
 * specification). Writes a block of bytes to a device, to a designated
 * register that is specified by {command}.
 * 
 *     I2C device address.
 *     The command code.
 *     The number of bytes to write (max 32).
 *     The buffer that the data to write (must contain at least {length} bytes).
 *     Callback that will recieve the number of bytes written and the given buffer.
 * @param {number} address
 * @param {number} command
 * @param {number} length
 * @param {?} buffer
 * @param {?} callback
 * @return {void}
 */
I2cBus.prototype.writeI2cBlock = function(address, command, length, buffer, callback) {};

/**
 * Synchronous I2C block write (not defined by the SMBus
 * specification). Writes a block of bytes to a device, to a designated
 * register that is specified by {command}.
 * 
 *     I2C device address.
 *     The command code.
 *     The number of bytes to write (max 32).
 *     The buffer that the data will to write (must contain at least {length} bytes).
 *     The number of bytes written.
 * @param {number} address
 * @param {number} command
 * @param {number} length
 * @param {?} buffer
 * @return {number}
 */
I2cBus.prototype.writeI2cBlockSync = function(address, command, length, buffer) {};

/**
 * Asynchronous open.
 * 
 *     The number of the I2C bus/adapter to open, 0 for {/dev/i2c-0}, 1 for {/dev/i2c-1}, etc.
 *     Completion callback.
 *     A new I2cBus object.
 * @param {number} busNumber
 * @param {?} calback
 * @return {?}
 */
function open(busNumber, calback) {}

/**
 * Synchronous open.
 * 
 *     The number of the I2C bus/adapter to open, 0 for {/dev/i2c-0}, 1 for {/dev/i2c-1}, etc.
 *     A new I2cBus object.
 * @param {number} busNumber
 * @return {?}
 */
function openSync(busNumber) {}
