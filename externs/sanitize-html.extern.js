/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/sanitize-html/index.d.ts:

/* TODO: ExportAssignment in  */

/**
 * @param {string} dirty
 * @param {!sanitize.IOptions=} options
 * @return {string}
 */
function sanitize(dirty, options) {}

/** @typedef {!Object<string,string>} */
sanitize.Attributes;

/** @typedef {{tagName: string, attribs: !Object<string,string>, text: string}} */
sanitize.Tag;

/** @typedef {function(string, !Object<string,string>): {tagName: string, attribs: ?, text: string}} */
sanitize.Transformer;
/**
 * @record
 * @struct
 */
sanitize.IDefaults = function() {};
 /** @type {!Object<string,!Array<string>>} */
sanitize.IDefaults.prototype.allowedAttributes;
 /** @type {!Array<string>} */
sanitize.IDefaults.prototype.allowedSchemes;
 /** @type {!Object<string,!Array<string>>} */
sanitize.IDefaults.prototype.allowedSchemesByTag;
 /** @type {!Array<string>} */
sanitize.IDefaults.prototype.allowedTags;
 /** @type {!Array<string>} */
sanitize.IDefaults.prototype.selfClosing;
/**
 * @record
 * @struct
 */
sanitize.IFrame = function() {};
 /** @type {string} */
sanitize.IFrame.prototype.tag;
 /** @type {!Object<string,string>} */
sanitize.IFrame.prototype.attribs;
 /** @type {string} */
sanitize.IFrame.prototype.text;
 /** @type {number} */
sanitize.IFrame.prototype.tagPosition;
/**
 * @record
 * @struct
 */
sanitize.IOptions = function() {};
 /** @type {(boolean|!Object<string,!Array<string>>)} */
sanitize.IOptions.prototype.allowedAttributes;
 /** @type {(boolean|!Object<string,!Array<string>>)} */
sanitize.IOptions.prototype.allowedClasses;
 /** @type {(boolean|!Array<string>)} */
sanitize.IOptions.prototype.allowedSchemes;
 /** @type {(boolean|!Array<string>)} */
sanitize.IOptions.prototype.allowedTags;
 /** @type {function(!sanitize.IFrame): boolean} */
sanitize.IOptions.prototype.exclusiveFilter;
 /** @type {!Array<string>} */
sanitize.IOptions.prototype.nonTextTags;
 /** @type {!Array<string>} */
sanitize.IOptions.prototype.selfClosing;
 /** @type {!Object<string,(string|function(string, !Object<string,string>): {tagName: string, attribs: ?, text: string})>} */
sanitize.IOptions.prototype.transformTags;
 /** @type {!sanitize.IDefaults} */
sanitize.defaults;

/**
 * @param {string} tagName
 * @param {!Object<string,string>} attribs
 * @param {boolean=} merge
 * @return {function(string, !Object<string,string>): {tagName: string, attribs: ?, text: string}}
 */
sanitize.simpleTransform = function(tagName, attribs, merge) {};
