/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cordova-plugin-websql/index.d.ts:

/**
 * Creates (opens, if exist) database with supplied parameters.
 * @param {string} name        Database name
 * @param {string} version     Database version
 * @param {string} displayname Database display name
 * @param {number} size        Size, in bytes
 * @param {function(?): void=} creationCallback Callback, that executed on database creation. Accepts Database object.
 * @return {?}
 */
Window.prototype.openDatabase = function(name, version, displayname, size, creationCallback) {};
/**
 * @record
 * @struct
 */
function Database() {}
 /** @type {string} */
Database.prototype.name;
 /** @type {string} */
Database.prototype.version;
 /** @type {string} */
Database.prototype.displayName;
 /** @type {number} */
Database.prototype.size;

/**
 * Starts new transaction.
 * @param {function(?): void} callback        Function, that will be called when transaction starts.
 * @param {function(?): void=} errorCallback   Called, when Transaction fails.
 * @param {function(): void=} successCallback Called, when transaction committed.
 * @return {void}
 */
Database.prototype.transaction = function(callback, errorCallback, successCallback) {};

/**
 * Starts new transaction.
 * @param {function(?): void} callback        Function, that will be called when transaction starts.
 * @param {function(?): void=} errorCallback   Called, when Transaction fails.
 * @param {function(): void=} successCallback Called, when transaction committed.
 * @return {void}
 */
Database.prototype.readTransaction = function(callback, errorCallback, successCallback) {};
 /** @type {function(new: (?), string, string, string, number, function(?): void): ?} */
var Database;
/**
 * @record
 * @struct
 */
function SqlTransaction() {}

/**
 * Executes SQL statement via current transaction.
 * @param {string} sql SQL statement to execute.
 * @param {!Array<?>=} tsickle_arguments
 * @param {function(?, !SqlResultSet): void=} successCallback Called in case of query has been successfully done.
 * @param {function(?, ?): ?=} errorCallback   Called, when query fails. Return false to continue transaction; true or no return to rollback.
 * @return {void}
 */
SqlTransaction.prototype.executeSql = function(sql, tsickle_arguments, successCallback, errorCallback) {};
 /** @type {function(new: (?)): ?} */
var SqlTransaction;
/**
 * @record
 * @struct
 */
function SqlResultSet() {}
 /** @type {number} */
SqlResultSet.prototype.insertId;
 /** @type {number} */
SqlResultSet.prototype.rowsAffected;
 /** @type {!SqlResultSetRowList} */
SqlResultSet.prototype.rows;
/**
 * @record
 * @struct
 */
function SqlResultSetRowList() {}
 /** @type {number} */
SqlResultSetRowList.prototype.length;

/**
 * @param {number} index
 * @return {!Object}
 */
SqlResultSetRowList.prototype.item = function(index) {};
/**
 * @record
 * @struct
 */
function SqlError() {}
 /** @type {number} */
SqlError.prototype.code;
 /** @type {string} */
SqlError.prototype.message;
 /** @type {{UNKNOWN_ERR: number, DATABASE_ERR: number, VERSION_ERR: number, TOO_LARGE_ERR: number, QUOTA_ERR: number, SYNTAX_ERR: number, CONSTRAINT_ERR: number, TIMEOUT_ERR: number}} */
var SqlError;
