/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/should/index.d.ts:
 /** @type {!ShouldAssertion} */
Object.prototype.should;
/**
 * @record
 * @struct
 */
function ShouldAssertion() {}
 /** @type {!ShouldAssertion} */
ShouldAssertion.prototype.a;
 /** @type {!ShouldAssertion} */
ShouldAssertion.prototype.an;
 /** @type {!ShouldAssertion} */
ShouldAssertion.prototype.and;
 /** @type {!ShouldAssertion} */
ShouldAssertion.prototype.be;
 /** @type {!ShouldAssertion} */
ShouldAssertion.prototype.has;
 /** @type {!ShouldAssertion} */
ShouldAssertion.prototype.have;
 /** @type {!ShouldAssertion} */
ShouldAssertion.prototype.is;
 /** @type {!ShouldAssertion} */
ShouldAssertion.prototype.it;
 /** @type {!ShouldAssertion} */
ShouldAssertion.prototype.with;
 /** @type {!ShouldAssertion} */
ShouldAssertion.prototype.which;
 /** @type {!ShouldAssertion} */
ShouldAssertion.prototype.the;
 /** @type {!ShouldAssertion} */
ShouldAssertion.prototype.of;
 /** @type {!ShouldAssertion} */
ShouldAssertion.prototype.not;
 /** @type {!ShouldAssertion} */
ShouldAssertion.prototype.eventually;
 /** @type {!ShouldAssertion} */
ShouldAssertion.prototype.finally;

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.arguments = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.empty = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.ok = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.true = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.false = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.NaN = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.Infinity = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.Array = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.Object = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.String = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.Boolean = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.Number = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.Error = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.Function = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.Date = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.Class = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.Undefined = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.Null = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.Promise = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.generator = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.iterable = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.iterator = function() {};

/**
 * @param {?} expected
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.eql = function(expected, description) {};

/**
 * @param {?} expected
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.equal = function(expected, description) {};

/**
 * @param {...?} values
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.equalOneOf = function(values) {};

/**
 * @param {number} start
 * @param {number} finish
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.within = function(start, finish, description) {};

/**
 * @param {number} value
 * @param {number} delta
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.approximately = function(value, delta, description) {};

/**
 * @param {?} expected
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.type = function(expected, description) {};

/**
 * @param {!Function} constructor
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.instanceof = function(constructor, description) {};

/**
 * @param {number} n
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.above = function(n, description) {};

/**
 * @param {number} n
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.below = function(n, description) {};

/**
 * @param {number} n
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.aboveOrEqual = function(n, description) {};

/**
 * @param {number} n
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.greaterThanOrEqual = function(n, description) {};

/**
 * @param {number} n
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.belowOrEqual = function(n, description) {};

/**
 * @param {number} n
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.lessThanOrEqual = function(n, description) {};

/**
 * @param {!Object|function(?): ?|!RegExp|?} other_or_regexp
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.match = function(other_or_regexp, description) {};

/**
 * @param {!Object|function(?): ?|!RegExp|?} other_or_regexp
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.matchEach = function(other_or_regexp, description) {};

/**
 * @param {!Object|function(?): ?|!RegExp|?} other_or_regexp
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.matchAny = function(other_or_regexp, description) {};

/**
 * @param {number} n
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.length = function(n, description) {};

/**
 * @param {string} name
 * @param {string|?=} description_or_val
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.property = function(name, description_or_val, description) {};

/**
 * @param {...!Array<string>|string|?} names_or_name_or_descriptor_or_properties
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.properties = function(names_or_name_or_descriptor_or_properties) {};

/**
 * @param {...string} properties
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.propertyByPath = function(properties) {};

/**
 * @param {string} name
 * @param {!PropertyDescriptor} descriptor
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.propertyWithDescriptor = function(name, descriptor) {};

/**
 * @param {...?} values
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.oneOf = function(values) {};

/**
 * @param {string} name
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.ownProperty = function(name, description) {};

/**
 * @param {?} obj
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.containEql = function(obj) {};

/**
 * @param {?} obj
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.containDeep = function(obj) {};

/**
 * @param {?} obj
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.containDeepOrdered = function(obj) {};

/**
 * @param {...string|!Array<string>} allKeys
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.keys = function(allKeys) {};

/**
 * @param {string} property
 * @param {?=} value
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.enumerable = function(property, value) {};

/**
 * @param {...string} properties
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.enumerables = function(properties) {};

/**
 * @param {string} expected
 * @param {?=} message
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.startWith = function(expected, message) {};

/**
 * @param {string} expected
 * @param {?=} message
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.endWith = function(expected, message) {};

/**
 * @param {?=} message
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.throw = function(message) {};

/**
 * @return {!Promise<?>}
 */
ShouldAssertion.prototype.fulfilled = function() {};

/**
 * @param {?} value
 * @return {!Promise<?>}
 */
ShouldAssertion.prototype.fulfilledWith = function(value) {};

/**
 * @return {!Promise<?>}
 */
ShouldAssertion.prototype.rejected = function() {};

/**
 * @param {(string|!Function|!RegExp)|!Object} message_or_errType
 * @param {!Object=} properties
 * @return {!Promise<?>}
 */
ShouldAssertion.prototype.rejectedWith = function(message_or_errType, properties) {};

/**
 * @param {string} field
 * @param {string=} val
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.header = function(field, val) {};

/**
 * @param {number} code
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.status = function(code) {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.json = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.html = function() {};

/**
 * @param {?} thisTarget
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.alwaysCalledOn = function(thisTarget) {};

/**
 * @param {...?} tsickle_arguments
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.alwaysCalledWith = function(tsickle_arguments) {};

/**
 * @param {...?} tsickle_arguments
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.alwaysCalledWithExactly = function(tsickle_arguments) {};

/**
 * @param {...?} tsickle_arguments
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.alwaysCalledWithMatch = function(tsickle_arguments) {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.alwaysCalledWithNew = function() {};

/**
 * @param {?=} exception
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.alwaysThrew = function(exception) {};

/**
 * @param {number} count
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.callCount = function(count) {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.called = function() {};

/**
 * @param {?} thisTarget
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.calledOn = function(thisTarget) {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.calledOnce = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.calledTwice = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.calledThrice = function() {};

/**
 * @param {...?} tsickle_arguments
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.calledWith = function(tsickle_arguments) {};

/**
 * @param {...?} tsickle_arguments
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.calledWithExactly = function(tsickle_arguments) {};

/**
 * @param {...?} tsickle_arguments
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.calledWithMatch = function(tsickle_arguments) {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.calledWithNew = function() {};

/**
 * @param {...?} tsickle_arguments
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.neverCalledWith = function(tsickle_arguments) {};

/**
 * @param {...?} tsickle_arguments
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.neverCalledWithMatch = function(tsickle_arguments) {};

/**
 * @param {?=} exception
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.threw = function(exception) {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.True = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.False = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.Arguments = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.class = function() {};

/**
 * @param {?} expected
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.deepEqual = function(expected, description) {};

/**
 * @param {?} expected
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.exactly = function(expected, description) {};

/**
 * @param {!Function} constructor
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.instanceOf = function(constructor, description) {};

/**
 * @param {?=} message
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.throwError = function(message) {};

/**
 * @param {number} n
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.lengthOf = function(n, description) {};

/**
 * @param {string} key
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.key = function(key) {};

/**
 * @param {string} name
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.hasOwnProperty = function(name, description) {};

/**
 * @param {number} n
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.greaterThan = function(n, description) {};

/**
 * @param {number} n
 * @param {string=} description
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.lessThan = function(n, description) {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.null = function() {};

/**
 * @return {!ShouldAssertion}
 */
ShouldAssertion.prototype.undefined = function() {};
/**
 * @record
 * @struct
 */
function ShouldInternal() {}
 /** @type {!ShouldInternal} */
ShouldInternal.prototype.not;

/**
 * @param {?} actual
 * @param {string=} msg
 * @return {void}
 */
ShouldInternal.prototype.exist = function(actual, msg) {};

/**
 * @param {?} actual
 * @param {string=} msg
 * @return {void}
 */
ShouldInternal.prototype.exists = function(actual, msg) {};
/**
 * @extends {ShouldInternal}
 * @record
 * @struct
 */
function Internal() {}

/* TODO: CallSignature:  */

/**
 * @param {?} actual
 * @param {?} expected
 * @param {string} message
 * @param {string} operator
 * @return {void}
 */
Internal.prototype.fail = function(actual, expected, message, operator) {};

/**
 * @param {?} value
 * @param {string} message
 * @return {void}
 */
Internal.prototype.assert = function(value, message) {};

/**
 * @param {?} value
 * @param {string=} message
 * @return {void}
 */
Internal.prototype.ok = function(value, message) {};

/**
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @return {void}
 */
Internal.prototype.equal = function(actual, expected, message) {};

/**
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @return {void}
 */
Internal.prototype.notEqual = function(actual, expected, message) {};

/**
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @return {void}
 */
Internal.prototype.deepEqual = function(actual, expected, message) {};

/**
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @return {void}
 */
Internal.prototype.notDeepEqual = function(actual, expected, message) {};

/**
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @return {void}
 */
Internal.prototype.strictEqual = function(actual, expected, message) {};

/**
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @return {void}
 */
Internal.prototype.notStrictEqual = function(actual, expected, message) {};

/**
 * @param {?} block
 * @param {?=} error
 * @param {string=} message
 * @return {void}
 */
Internal.prototype.throws = function(block, error, message) {};

/**
 * @param {?} block
 * @param {string=} message
 * @return {void}
 */
Internal.prototype.doesNotThrow = function(block, message) {};

/**
 * @param {?} value
 * @return {void}
 */
Internal.prototype.ifError = function(value) {};

/**
 * @param {?} value
 * @param {?} obj
 * @return {?}
 */
Internal.prototype.inspect = function(value, obj) {};
 /** @type {!Internal} */
var should;
 /** @type {!Internal} */
var Should;
 /** @type {!Internal} */
Window.prototype.Should;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "should"
/** @const */
tsickle_declare_module.should = {};

/* TODO: ExportAssignment in tsickle_declare_module.should */
