/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/dot-object/index.d.ts:
/** @const */
var DotObject = {};
/**
 * @extends {DotObject.Dot}
 * @record
 * @struct
 */
DotObject.DotConstructor = function() {};

/* TODO: ConstructSignature: DotObject */
/**
 * @record
 * @struct
 */
DotObject.ModifierFunctionWrapper = function() {};

/* TODO: CallSignature: DotObject */
/**
 * @record
 * @struct
 */
DotObject.Dot = function() {};

/**
 * 
 * Copy a property from one object to another object.
 * 
 * If the source path does not exist (undefined)
 * the property on the other object will not be set.
 * 
 * @param {string} source
 * @param {string} target
 * @param {?} obj1
 * @param {?} obj2
 * @param {(!DotObject.ModifierFunctionWrapper|!Array<!DotObject.ModifierFunctionWrapper>)=} mods
 * @param {boolean=} merge
 * @return {void}
 */
DotObject.Dot.prototype.copy = function(source, target, obj1, obj2, mods, merge) {};

/**
 * 
 * Convert object to dotted-key/value pair
 * 
 * Usage:
 *   var tgt = {}
 *   dot.dot(obj, tgt)
 * 
 * 
 * Convert object to dotted-key/value pair
 * 
 * Usage:
 * 
 *   var tgt = dot.dot(obj)
 * @param {?} obj
 * @param {?=} tgt
 * @return {void|?}
 */
DotObject.Dot.prototype.dot = function(obj, tgt) {};

/**
 * 
 * Remove value from an object using dot notation.
 * 
 * @param {string} path
 * @param {?} obj
 * @return {?}
 */
DotObject.Dot.prototype.del = function(path, obj) {};

/**
 * 
 * Move a property from one place to the other.
 * 
 * If the source path does not exist (undefined)
 * the target property will not be set.
 * 
 * @param {string} source
 * @param {string} target
 * @param {?} obj
 * @param {(!DotObject.ModifierFunctionWrapper|!Array<!DotObject.ModifierFunctionWrapper>)=} mods
 * @param {boolean=} merge
 * @return {void}
 */
DotObject.Dot.prototype.move = function(source, target, obj, mods, merge) {};

/**
 * 
 * Converts an object with dotted-key/value pairs to it's expanded version
 * 
 * Optionally transformed by a set of modifiers.
 * 
 * Usage:
 * 
 *   var row = {
 *     'nr': 200,
 *     'doc.name': '  My Document  '
 *   }
 * 
 *   var mods = {
 *     'doc.name': [_s.trim, _s.underscored]
 *   }
 * 
 *   dot.object(row, mods)
 * 
 * @param {?} obj
 * @param {(!DotObject.ModifierFunctionWrapper|!Array<!DotObject.ModifierFunctionWrapper>)=} mods
 * @return {void}
 */
DotObject.Dot.prototype.object = function(obj, mods) {};

/**
 * 
 * Pick a value from an object using dot notation.
 * 
 * Optionally remove the value
 * 
 * @param {string} path
 * @param {?} obj
 * @param {boolean=} remove
 * @return {?}
 */
DotObject.Dot.prototype.pick = function(path, obj, remove) {};

/**
 * 
 * Remove value from an object using dot notation.
 * 
 * @param {string} path
 * @param {?} obj
 * @return {?}
 */
DotObject.Dot.prototype.remove = function(path, obj) {};

/**
 * @param {string} path
 * @param {?} v
 * @param {!Object} obj
 * @param {(!DotObject.ModifierFunctionWrapper|!Array<!DotObject.ModifierFunctionWrapper>)=} mods
 * @return {void}
 */
DotObject.Dot.prototype.str = function(path, v, obj, mods) {};

/**
 * 
 * Transfer a property from one object to another object.
 * 
 * If the source path does not exist (undefined)
 * the property on the other object will not be set.
 * 
 * @param {string} source
 * @param {string} target
 * @param {?} obj1
 * @param {?} obj2
 * @param {(!DotObject.ModifierFunctionWrapper|!Array<!DotObject.ModifierFunctionWrapper>)=} mods
 * @param {boolean=} merge
 * @return {void}
 */
DotObject.Dot.prototype.transfer = function(source, target, obj1, obj2, mods, merge) {};

/**
 * 
 * Transform an object
 * 
 * Usage:
 * 
 *   var obj = {
 *     "id": 1,
 *    "some": {
 *      "thing": "else"
 *    }
 *   }
 * 
 *   var transform = {
 *     "id": "nr",
 *    "some.thing": "name"
 *   }
 * 
 *   var tgt = dot.transform(transform, obj)
 * 
 * @param {?} recipe
 * @param {?} obj
 * @param {(!DotObject.ModifierFunctionWrapper|!Array<!DotObject.ModifierFunctionWrapper>)=} mods
 * @return {void}
 */
DotObject.Dot.prototype.transform = function(recipe, obj, mods) {};
 /** @type {!DotObject.DotConstructor} */
var dot;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "dot-object"
/** @const */
tsickle_declare_module.dot_object = {};

/* TODO: ExportAssignment in tsickle_declare_module.dot_object */
