/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/vec3/index.d.ts:

/**
 * @constructor
 * @struct
 * @param {number|!Array<number>|{x: number, y: number, z: number}|string} x_or_location_or_locationStr
 * @param {number=} y
 * @param {number=} z
 */
function Vec3(x_or_location_or_locationStr, y, z) {}

/**
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @return {!Vec3}
 */
Vec3.prototype.set = function(x, y, z) {};

/**
 * @param {!Vec3} other
 * @return {!Vec3}
 */
Vec3.prototype.update = function(other) {};

/**
 * @return {!Vec3}
 */
Vec3.prototype.floored = function() {};

/**
 * @return {!Vec3}
 */
Vec3.prototype.floor = function() {};

/**
 * @param {number} dx
 * @param {number} dy
 * @param {number} dz
 * @return {!Vec3}
 */
Vec3.prototype.offset = function(dx, dy, dz) {};

/**
 * @param {number} dx
 * @param {number} dy
 * @param {number} dz
 * @return {!Vec3}
 */
Vec3.prototype.translate = function(dx, dy, dz) {};

/**
 * @param {!Vec3} other
 * @return {!Vec3}
 */
Vec3.prototype.add = function(other) {};

/**
 * @param {!Vec3} other
 * @return {!Vec3}
 */
Vec3.prototype.substract = function(other) {};

/**
 * @param {!Vec3} other
 * @return {!Vec3}
 */
Vec3.prototype.plus = function(other) {};

/**
 * @param {!Vec3} other
 * @return {!Vec3}
 */
Vec3.prototype.minus = function(other) {};

/**
 * @param {number} scalar
 * @return {!Vec3}
 */
Vec3.prototype.scaled = function(scalar) {};

/**
 * @return {!Vec3}
 */
Vec3.prototype.abs = function() {};

/**
 * @return {number}
 */
Vec3.prototype.volume = function() {};

/**
 * @return {!Vec3}
 */
Vec3.prototype.modulus = function() {};

/**
 * @param {!Vec3} other
 * @return {number}
 */
Vec3.prototype.distanceTo = function(other) {};

/**
 * @param {!Vec3} other
 * @return {boolean}
 */
Vec3.prototype.equals = function(other) {};

/**
 * @return {string}
 */
Vec3.prototype.toString = function() {};

/**
 * @return {!Vec3}
 */
Vec3.prototype.clone = function() {};

/**
 * @param {!Vec3} other
 * @return {!Vec3}
 */
Vec3.prototype.min = function(other) {};

/**
 * @param {!Vec3} other
 * @return {!Vec3}
 */
Vec3.prototype.max = function(other) {};
