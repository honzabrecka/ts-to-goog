/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/mongodb/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ExportDeclaration in  */

/**
 * @constructor
 * @struct
 */
function MongoClient() {}

/**
 * @param {string} uri
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
MongoClient.connect = function(uri, callback_or_options, callback) {};

/**
 * @param {string} uri
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
MongoClient.prototype.connect = function(uri, callback_or_options, callback) {};
/**
 * @record
 * @struct
 */
function MongoCallback() {}

/* TODO: CallSignature:  */

/**
 * @constructor
 * @struct
 * @param {string} message
 */
function MongoError(message) {}
 /** @type {number} */
MongoError.prototype.code;

/**
 * @param {!Object} options
 * @return {?}
 */
MongoError.create = function(options) {};
/**
 * @extends {DbCreateOptions}
 * @extends {ServerOptions}
 * @extends {MongosOptions}
 * @extends {ReplSetOptions}
 * @extends {SocketOptions}
 * @extends {SSLOptions}
 * @extends {HighAvailabilityOptions}
 * @record
 * @struct
 */
function MongoClientOptions() {}
 /** @type {string} */
MongoClientOptions.prototype.loggerLevel;
 /** @type {!Object} */
MongoClientOptions.prototype.logger;
 /** @type {!Object} */
MongoClientOptions.prototype.validateOptions;
/**
 * @record
 * @struct
 */
function SSLOptions() {}
 /** @type {number} */
SSLOptions.prototype.poolSize;
 /** @type {boolean} */
SSLOptions.prototype.ssl;
 /** @type {!Object} */
SSLOptions.prototype.sslValidate;
 /** @type {(boolean|!Function)} */
SSLOptions.prototype.checkServerIdentity;
 /** @type {!Array<(string|?)>} */
SSLOptions.prototype.sslCA;
 /** @type {?} */
SSLOptions.prototype.sslCRL;
 /** @type {(string|?)} */
SSLOptions.prototype.sslCert;
 /** @type {(string|?)} */
SSLOptions.prototype.sslKey;
 /** @type {(string|?)} */
SSLOptions.prototype.sslPass;
 /** @type {string} */
SSLOptions.prototype.servername;
/**
 * @record
 * @struct
 */
function HighAvailabilityOptions() {}
 /** @type {boolean} */
HighAvailabilityOptions.prototype.ha;
 /** @type {number} */
HighAvailabilityOptions.prototype.haInterval;
 /** @type {boolean} */
HighAvailabilityOptions.prototype.domainsEnabled;

/**
 * @constructor
 * @struct
 * @param {string} mode
 * @param {!Object} tags
 */
function ReadPreference(mode, tags) {}
 /** @type {string} */
ReadPreference.prototype.mode;
 /** @type {?} */
ReadPreference.prototype.tags;
 /** @type {?} */
ReadPreference.prototype.options;
 /** @type {string} */
ReadPreference.PRIMARY;
 /** @type {string} */
ReadPreference.PRIMARY_PREFERRED;
 /** @type {string} */
ReadPreference.SECONDARY;
 /** @type {string} */
ReadPreference.SECONDARY_PREFERRED;
 /** @type {string} */
ReadPreference.NEAREST;

/**
 * @param {string} mode
 * @return {boolean}
 */
ReadPreference.prototype.isValid = function(mode) {};

/**
 * @param {string} mode
 * @return {boolean}
 */
ReadPreference.isValid = function(mode) {};
/**
 * @record
 * @struct
 */
function DbCreateOptions() {}
 /** @type {string} */
DbCreateOptions.prototype.authSource;
 /** @type {(string|number)} */
DbCreateOptions.prototype.w;
 /** @type {number} */
DbCreateOptions.prototype.wtimeout;
 /** @type {boolean} */
DbCreateOptions.prototype.j;
 /** @type {boolean} */
DbCreateOptions.prototype.forceServerObjectId;
 /** @type {boolean} */
DbCreateOptions.prototype.native_parser;
 /** @type {boolean} */
DbCreateOptions.prototype.serializeFunctions;
 /** @type {boolean} */
DbCreateOptions.prototype.ignoreUndefined;
 /** @type {boolean} */
DbCreateOptions.prototype.raw;
 /** @type {boolean} */
DbCreateOptions.prototype.promoteLongs;
 /** @type {number} */
DbCreateOptions.prototype.promoteBuffers;
 /** @type {(string|?)} */
DbCreateOptions.prototype.readPreference;
 /** @type {!Object} */
DbCreateOptions.prototype.promoteValues;
 /** @type {!Object} */
DbCreateOptions.prototype.pkFactory;
 /** @type {!Object} */
DbCreateOptions.prototype.promiseLibrary;
 /** @type {?} */
DbCreateOptions.prototype.readConcern;
/**
 * @record
 * @struct
 */
function SocketOptions() {}
 /** @type {boolean} */
SocketOptions.prototype.autoReconnect;
 /** @type {boolean} */
SocketOptions.prototype.noDelay;
 /** @type {number} */
SocketOptions.prototype.keepAlive;
 /** @type {number} */
SocketOptions.prototype.connectTimeoutMS;
 /** @type {number} */
SocketOptions.prototype.socketTimeoutMS;
/**
 * @extends {SSLOptions}
 * @record
 * @struct
 */
function ServerOptions() {}
 /** @type {number} */
ServerOptions.prototype.reconnectTries;
 /** @type {number} */
ServerOptions.prototype.reconnectInterval;
 /** @type {boolean} */
ServerOptions.prototype.monitoring;
 /** @type {?} */
ServerOptions.prototype.socketOptions;
 /** @type {number} */
ServerOptions.prototype.haInterval;
 /** @type {boolean} */
ServerOptions.prototype.domainsEnabled;
/**
 * @extends {SSLOptions}
 * @extends {HighAvailabilityOptions}
 * @record
 * @struct
 */
function MongosOptions() {}
 /** @type {number} */
MongosOptions.prototype.acceptableLatencyMS;
 /** @type {?} */
MongosOptions.prototype.socketOptions;
/**
 * @extends {SSLOptions}
 * @extends {HighAvailabilityOptions}
 * @record
 * @struct
 */
function ReplSetOptions() {}
 /** @type {number} */
ReplSetOptions.prototype.maxStalenessSeconds;
 /** @type {string} */
ReplSetOptions.prototype.replicaSet;
 /** @type {number} */
ReplSetOptions.prototype.secondaryAcceptableLatencyMS;
 /** @type {boolean} */
ReplSetOptions.prototype.connectWithNoPrimary;
 /** @type {?} */
ReplSetOptions.prototype.socketOptions;

/**
 * @constructor
 * @struct
 * @param {string} databaseName
 * @param {?} serverConfig
 * @param {?=} options
 */
function Db(databaseName, serverConfig, options) {}
 /** @type {?} */
Db.prototype.serverConfig;
 /** @type {number} */
Db.prototype.bufferMaxEntries;
 /** @type {string} */
Db.prototype.databaseName;
 /** @type {?} */
Db.prototype.options;
 /** @type {boolean} */
Db.prototype.native_parser;
 /** @type {boolean} */
Db.prototype.slaveOk;
 /** @type {?} */
Db.prototype.writeConcern;

/**
 * @param {string} username
 * @param {string} password
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Db.prototype.addUser = function(username, password, callback_or_options, callback) {};

/**
 * @return {?}
 */
Db.prototype.admin = function() {};

/**
 * @param {string} userName
 * @param {string} password
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Db.prototype.authenticate = function(userName, password, callback_or_options, callback) {};

/**
 * @param {?|boolean=} callback_or_forceClose
 * @param {?=} callback
 * @return {void|!Promise<void>}
 */
Db.prototype.close = function(callback_or_forceClose, callback) {};

/**
 * @template TSchema
 * @param {string} name
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {?}
 */
Db.prototype.collection = function(name, callback_or_options, callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<!Array<?>>|void}
 */
Db.prototype.collections = function(callback) {};

/**
 * @param {!Object} command
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Db.prototype.command = function(command, callback_or_options, callback) {};

/**
 * @template TSchema
 * @param {string} name
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Db.prototype.createCollection = function(name, callback_or_options, callback) {};

/**
 * @param {string} name
 * @param {(string|!Object)} fieldOrSpec
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Db.prototype.createIndex = function(name, fieldOrSpec, callback_or_options, callback) {};

/**
 * @param {string} dbName
 * @param {?=} options
 * @return {?}
 */
Db.prototype.db = function(dbName, options) {};

/**
 * @param {string} name
 * @param {?=} callback
 * @return {!Promise<boolean>|void}
 */
Db.prototype.dropCollection = function(name, callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Db.prototype.dropDatabase = function(callback) {};

/**
 * @param {!Object} command
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Db.prototype.executeDbAdminCommand = function(command, callback_or_options, callback) {};

/**
 * @param {string} name
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Db.prototype.indexInformation = function(name, callback_or_options, callback) {};

/**
 * @param {!Object} filter
 * @param {?=} options
 * @return {?}
 */
Db.prototype.listCollections = function(filter, options) {};

/**
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Db.prototype.logout = function(callback_or_options, callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Db.prototype.open = function(callback) {};

/**
 * @param {string} username
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Db.prototype.removeUser = function(username, callback_or_options, callback) {};

/**
 * @template TSchema
 * @param {string} fromCollection
 * @param {string} toCollection
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Db.prototype.renameCollection = function(fromCollection, toCollection, callback_or_options, callback) {};

/**
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Db.prototype.stats = function(callback_or_options, callback) {};

/**
 * @constructor
 * @struct
 * @param {string} host
 * @param {number} port
 * @param {?=} options
 */
function Server(host, port, options) {}

/**
 * @return {!Array<?>}
 */
Server.prototype.connections = function() {};

/**
 * @constructor
 * @struct
 * @param {!Array<?>} servers
 * @param {?=} options
 */
function ReplSet(servers, options) {}

/**
 * @return {!Array<?>}
 */
ReplSet.prototype.connections = function() {};

/**
 * @constructor
 * @struct
 * @param {!Array<?>} servers
 * @param {?=} options
 */
function Mongos(servers, options) {}

/**
 * @return {!Array<?>}
 */
Mongos.prototype.connections = function() {};
/**
 * @record
 * @struct
 */
function DbAddUserOptions() {}
 /** @type {(string|number)} */
DbAddUserOptions.prototype.w;
 /** @type {number} */
DbAddUserOptions.prototype.wtimeout;
 /** @type {boolean} */
DbAddUserOptions.prototype.j;
 /** @type {!Object} */
DbAddUserOptions.prototype.customData;
 /** @type {!Array<!Object>} */
DbAddUserOptions.prototype.roles;
/**
 * @record
 * @struct
 */
function CollectionCreateOptions() {}
 /** @type {(string|number)} */
CollectionCreateOptions.prototype.w;
 /** @type {number} */
CollectionCreateOptions.prototype.wtimeout;
 /** @type {boolean} */
CollectionCreateOptions.prototype.j;
 /** @type {boolean} */
CollectionCreateOptions.prototype.raw;
 /** @type {!Object} */
CollectionCreateOptions.prototype.pkFactory;
 /** @type {(string|?)} */
CollectionCreateOptions.prototype.readPreference;
 /** @type {boolean} */
CollectionCreateOptions.prototype.serializeFunctions;
 /** @type {boolean} */
CollectionCreateOptions.prototype.strict;
 /** @type {boolean} */
CollectionCreateOptions.prototype.capped;
 /** @type {number} */
CollectionCreateOptions.prototype.size;
 /** @type {number} */
CollectionCreateOptions.prototype.max;
 /** @type {boolean} */
CollectionCreateOptions.prototype.autoIndexId;
/**
 * @record
 * @struct
 */
function DbCollectionOptions() {}
 /** @type {(string|number)} */
DbCollectionOptions.prototype.w;
 /** @type {number} */
DbCollectionOptions.prototype.wtimeout;
 /** @type {boolean} */
DbCollectionOptions.prototype.j;
 /** @type {boolean} */
DbCollectionOptions.prototype.raw;
 /** @type {!Object} */
DbCollectionOptions.prototype.pkFactory;
 /** @type {(string|?)} */
DbCollectionOptions.prototype.readPreference;
 /** @type {boolean} */
DbCollectionOptions.prototype.serializeFunctions;
 /** @type {boolean} */
DbCollectionOptions.prototype.strict;
 /** @type {?} */
DbCollectionOptions.prototype.readConcern;
/**
 * @record
 * @struct
 */
function IndexOptions() {}
 /** @type {(string|number)} */
IndexOptions.prototype.w;
 /** @type {number} */
IndexOptions.prototype.wtimeout;
 /** @type {boolean} */
IndexOptions.prototype.j;
 /** @type {boolean} */
IndexOptions.prototype.unique;
 /** @type {boolean} */
IndexOptions.prototype.sparse;
 /** @type {boolean} */
IndexOptions.prototype.background;
 /** @type {boolean} */
IndexOptions.prototype.dropDups;
 /** @type {number} */
IndexOptions.prototype.min;
 /** @type {number} */
IndexOptions.prototype.max;
 /** @type {number} */
IndexOptions.prototype.v;
 /** @type {number} */
IndexOptions.prototype.expireAfterSeconds;
 /** @type {string} */
IndexOptions.prototype.name;
 /** @type {?} */
IndexOptions.prototype.partialFilterExpression;
/**
 * @record
 * @struct
 */
function Admin() {}

/**
 * @param {string} username
 * @param {string} password
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Admin.prototype.addUser = function(username, password, callback_or_options, callback) {};

/**
 * @param {string} username
 * @param {?|string=} callback_or_password
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Admin.prototype.authenticate = function(username, callback_or_password, callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Admin.prototype.buildInfo = function(callback) {};

/**
 * @param {!Object} command
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Admin.prototype.command = function(command, callback_or_options, callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Admin.prototype.listDatabases = function(callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Admin.prototype.logout = function(callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Admin.prototype.ping = function(callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Admin.prototype.profilingInfo = function(callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Admin.prototype.profilingLevel = function(callback) {};

/**
 * @param {string} username
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Admin.prototype.removeUser = function(username, callback_or_options, callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Admin.prototype.replSetGetStatus = function(callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Admin.prototype.serverInfo = function(callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Admin.prototype.serverStatus = function(callback) {};

/**
 * @param {string} level
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Admin.prototype.setProfilingLevel = function(level, callback) {};

/**
 * @param {string} collectionNme
 * @param {?|!Object=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Admin.prototype.validateCollection = function(collectionNme, callback_or_options, callback) {};
/**
 * @record
 * @struct
 */
function AddUserOptions() {}
 /** @type {(string|number)} */
AddUserOptions.prototype.w;
 /** @type {number} */
AddUserOptions.prototype.wtimeout;
 /** @type {boolean} */
AddUserOptions.prototype.j;
 /** @type {boolean} */
AddUserOptions.prototype.fsync;
 /** @type {!Object} */
AddUserOptions.prototype.customData;
 /** @type {!Array<!Object>} */
AddUserOptions.prototype.roles;
/**
 * @record
 * @struct
 */
function FSyncOptions() {}
 /** @type {(string|number)} */
FSyncOptions.prototype.w;
 /** @type {number} */
FSyncOptions.prototype.wtimeout;
 /** @type {boolean} */
FSyncOptions.prototype.j;
 /** @type {boolean} */
FSyncOptions.prototype.fsync;
/**
 * @record
 * @struct
 */
function Collection() {}
 /** @type {string} */
Collection.prototype.collectionName;
 /** @type {string} */
Collection.prototype.namespace;
 /** @type {?} */
Collection.prototype.writeConcern;
 /** @type {?} */
Collection.prototype.readConcern;
 /** @type {?} */
Collection.prototype.hint;

/**
 * @template T
 * @param {!Array<!Object>} pipeline
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {?}
 */
Collection.prototype.aggregate = function(pipeline, callback_or_options, callback) {};

/**
 * @param {!Array<!Object>} operations
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.bulkWrite = function(operations, callback_or_options, callback) {};

/**
 * @param {!Object} query
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<number>}
 */
Collection.prototype.count = function(query, callback_or_options, callback) {};

/**
 * @param {?} fieldOrSpec
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<string>}
 */
Collection.prototype.createIndex = function(fieldOrSpec, callback_or_options, callback) {};

/**
 * @param {!Array<!Object>} indexSpecs
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Collection.prototype.createIndexes = function(indexSpecs, callback) {};

/**
 * @param {!Object} filter
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.deleteMany = function(filter, callback_or_options, callback) {};

/**
 * @param {!Object} filter
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.deleteOne = function(filter, callback_or_options, callback) {};

/**
 * @param {string} key
 * @param {!Object} query
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.distinct = function(key, query, callback_or_options, callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Collection.prototype.drop = function(callback) {};

/**
 * @param {string} indexName
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.dropIndex = function(indexName, callback_or_options, callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Collection.prototype.dropIndexes = function(callback) {};

/**
 * @deprecated
 * @template T
 * @param {!Object=} query
 * @param {!Object=} fields
 * @param {number=} skip
 * @param {number=} limit
 * @param {number=} timeout
 * @return {?}
 */
Collection.prototype.find = function(query, fields, skip, limit, timeout) {};

/**
 * @template T
 * @param {!Object} filter
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.findOne = function(filter, callback_or_options, callback) {};

/**
 * @param {!Object} filter
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.findOneAndDelete = function(filter, callback_or_options, callback) {};

/**
 * @param {!Object} filter
 * @param {!Object} replacement
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.findOneAndReplace = function(filter, replacement, callback_or_options, callback) {};

/**
 * @param {!Object} filter
 * @param {!Object} update
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.findOneAndUpdate = function(filter, update, callback_or_options, callback) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.geoHaystackSearch = function(x, y, callback_or_options, callback) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.geoNear = function(x, y, callback_or_options, callback) {};

/**
 * @param {(!Object|!Function|!Array<?>|?)} keys
 * @param {!Object} condition
 * @param {!Object} initial
 * @param {(!Function|?)} reduce
 * @param {(!Function|?)} finalize
 * @param {boolean} command
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.group = function(keys, condition, initial, reduce, finalize, command, callback_or_options, callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Collection.prototype.indexes = function(callback) {};

/**
 * @param {(string|!Array<string>)} indexes
 * @param {?=} callback
 * @return {!Promise<boolean>|void}
 */
Collection.prototype.indexExists = function(indexes, callback) {};

/**
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.indexInformation = function(callback_or_options, callback) {};

/**
 * @param {?=} options
 * @return {?}
 */
Collection.prototype.initializeOrderedBulkOp = function(options) {};

/**
 * @param {?=} options
 * @return {?}
 */
Collection.prototype.initializeUnorderedBulkOp = function(options) {};

/**
 * @deprecated Use insertOne, insertMany or bulkWrite
 * @param {!Object} docs
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.insert = function(docs, callback_or_options, callback) {};

/**
 * @param {!Array<!Object>} docs
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.insertMany = function(docs, callback_or_options, callback) {};

/**
 * @param {!Object} docs
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.insertOne = function(docs, callback_or_options, callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Collection.prototype.isCapped = function(callback) {};

/**
 * @param {?=} options
 * @return {?}
 */
Collection.prototype.listIndexes = function(options) {};

/**
 * @param {(string|!Function)} map
 * @param {(string|!Function)} reduce
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.mapReduce = function(map, reduce, callback_or_options, callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Collection.prototype.options = function(callback) {};

/**
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<!Array<?>>}
 */
Collection.prototype.parallelCollectionScan = function(callback_or_options, callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Collection.prototype.reIndex = function(callback) {};

/**
 * @deprecated Use use deleteOne, deleteMany or bulkWrite
 * @param {!Object} selector
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.remove = function(selector, callback_or_options, callback) {};

/**
 * @param {string} newName
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.rename = function(newName, callback_or_options, callback) {};

/**
 * @param {!Object} filter
 * @param {!Object} doc
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.replaceOne = function(filter, doc, callback_or_options, callback) {};

/**
 * @deprecated Use insertOne, insertMany, updateOne or updateMany
 * @param {!Object} doc
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.save = function(doc, callback_or_options, callback) {};

/**
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.stats = function(callback_or_options, callback) {};

/**
 * @deprecated use updateOne, updateMany or bulkWrite
 * @param {!Object} filter
 * @param {!Object} update
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.update = function(filter, update, callback_or_options, callback) {};

/**
 * @param {!Object} filter
 * @param {!Object} update
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.updateMany = function(filter, update, callback_or_options, callback) {};

/**
 * @param {!Object} filter
 * @param {!Object} update
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Collection.prototype.updateOne = function(filter, update, callback_or_options, callback) {};
/**
 * @record
 * @struct
 */
function CollStats() {}
 /** @type {string} */
CollStats.prototype.ns;
 /** @type {number} */
CollStats.prototype.count;
 /** @type {number} */
CollStats.prototype.size;
 /** @type {number} */
CollStats.prototype.avgObjSize;
 /** @type {number} */
CollStats.prototype.storageSize;
 /** @type {number} */
CollStats.prototype.numExtents;
 /** @type {number} */
CollStats.prototype.nindexes;
 /** @type {number} */
CollStats.prototype.lastExtentSize;
 /** @type {number} */
CollStats.prototype.paddingFactor;
 /** @type {number} */
CollStats.prototype.userFlags;
 /** @type {number} */
CollStats.prototype.totalIndexSize;
 /** @type {?} */
CollStats.prototype.indexSizes;
 /** @type {boolean} */
CollStats.prototype.capped;
 /** @type {boolean} */
CollStats.prototype.maxSize;
 /** @type {?} */
CollStats.prototype.wiredTiger;
 /** @type {?} */
CollStats.prototype.indexDetails;
 /** @type {number} */
CollStats.prototype.ok;
/**
 * @record
 * @struct
 */
function CollectionAggregationOptions() {}
 /** @type {(string|?)} */
CollectionAggregationOptions.prototype.readPreference;
 /** @type {?} */
CollectionAggregationOptions.prototype.cursor;
 /** @type {boolean} */
CollectionAggregationOptions.prototype.explain;
 /** @type {boolean} */
CollectionAggregationOptions.prototype.allowDiskUse;
 /** @type {number} */
CollectionAggregationOptions.prototype.maxTimeMS;
 /** @type {boolean} */
CollectionAggregationOptions.prototype.bypassDocumentValidation;
/**
 * @record
 * @struct
 */
function CollectionInsertManyOptions() {}
 /** @type {(string|number)} */
CollectionInsertManyOptions.prototype.w;
 /** @type {number} */
CollectionInsertManyOptions.prototype.wtimeout;
 /** @type {boolean} */
CollectionInsertManyOptions.prototype.j;
 /** @type {boolean} */
CollectionInsertManyOptions.prototype.serializeFunctions;
 /** @type {boolean} */
CollectionInsertManyOptions.prototype.forceServerObjectId;
 /** @type {boolean} */
CollectionInsertManyOptions.prototype.bypassDocumentValidation;
 /** @type {boolean} */
CollectionInsertManyOptions.prototype.ordered;
/**
 * @record
 * @struct
 */
function CollectionBluckWriteOptions() {}
 /** @type {(string|number)} */
CollectionBluckWriteOptions.prototype.w;
 /** @type {number} */
CollectionBluckWriteOptions.prototype.wtimeout;
 /** @type {boolean} */
CollectionBluckWriteOptions.prototype.j;
 /** @type {boolean} */
CollectionBluckWriteOptions.prototype.serializeFunctions;
 /** @type {boolean} */
CollectionBluckWriteOptions.prototype.ordered;
 /** @type {boolean} */
CollectionBluckWriteOptions.prototype.bypassDocumentValidation;
/**
 * @record
 * @struct
 */
function BulkWriteOpResultObject() {}
 /** @type {number} */
BulkWriteOpResultObject.prototype.insertedCount;
 /** @type {number} */
BulkWriteOpResultObject.prototype.matchedCount;
 /** @type {number} */
BulkWriteOpResultObject.prototype.modifiedCount;
 /** @type {number} */
BulkWriteOpResultObject.prototype.deletedCount;
 /** @type {number} */
BulkWriteOpResultObject.prototype.upsertedCount;
 /** @type {?} */
BulkWriteOpResultObject.prototype.insertedIds;
 /** @type {?} */
BulkWriteOpResultObject.prototype.upsertedIds;
 /** @type {?} */
BulkWriteOpResultObject.prototype.result;
/**
 * @record
 * @struct
 */
function MongoCountPreferences() {}
 /** @type {number} */
MongoCountPreferences.prototype.limit;
 /** @type {boolean} */
MongoCountPreferences.prototype.skip;
 /** @type {string} */
MongoCountPreferences.prototype.hint;
 /** @type {(string|?)} */
MongoCountPreferences.prototype.readPreference;
/**
 * @record
 * @struct
 */
function DeleteWriteOpResultObject() {}
 /** @type {?} */
DeleteWriteOpResultObject.prototype.result;
 /** @type {?} */
DeleteWriteOpResultObject.prototype.connection;
 /** @type {number} */
DeleteWriteOpResultObject.prototype.deletedCount;
/**
 * @record
 * @struct
 */
function FindAndModifyWriteOpResultObject() {}
 /** @type {?} */
FindAndModifyWriteOpResultObject.prototype.value;
 /** @type {?} */
FindAndModifyWriteOpResultObject.prototype.lastErrorObject;
 /** @type {number} */
FindAndModifyWriteOpResultObject.prototype.ok;
/**
 * @record
 * @struct
 */
function FindOneAndReplaceOption() {}
 /** @type {!Object} */
FindOneAndReplaceOption.prototype.projection;
 /** @type {!Object} */
FindOneAndReplaceOption.prototype.sort;
 /** @type {number} */
FindOneAndReplaceOption.prototype.maxTimeMS;
 /** @type {boolean} */
FindOneAndReplaceOption.prototype.upsert;
 /** @type {boolean} */
FindOneAndReplaceOption.prototype.returnOriginal;
/**
 * @record
 * @struct
 */
function GeoHaystackSearchOptions() {}
 /** @type {(string|?)} */
GeoHaystackSearchOptions.prototype.readPreference;
 /** @type {number} */
GeoHaystackSearchOptions.prototype.maxDistance;
 /** @type {!Object} */
GeoHaystackSearchOptions.prototype.search;
 /** @type {number} */
GeoHaystackSearchOptions.prototype.limit;
/**
 * @record
 * @struct
 */
function GeoNearOptions() {}
 /** @type {(string|?)} */
GeoNearOptions.prototype.readPreference;
 /** @type {number} */
GeoNearOptions.prototype.num;
 /** @type {number} */
GeoNearOptions.prototype.minDistance;
 /** @type {number} */
GeoNearOptions.prototype.maxDistance;
 /** @type {number} */
GeoNearOptions.prototype.distanceMultiplier;
 /** @type {!Object} */
GeoNearOptions.prototype.query;
 /** @type {boolean} */
GeoNearOptions.prototype.spherical;
 /** @type {boolean} */
GeoNearOptions.prototype.uniqueDocs;
 /** @type {boolean} */
GeoNearOptions.prototype.includeLocs;

/**
 * @constructor
 * @struct
 * @param {(string|!Function)} code
 * @param {!Object=} scope
 */
function Code(code, scope) {}
 /** @type {(string|!Function)} */
Code.prototype.code;
 /** @type {?} */
Code.prototype.scope;
/**
 * @record
 * @struct
 */
function CollectionOptions() {}
 /** @type {(string|number)} */
CollectionOptions.prototype.w;
 /** @type {number} */
CollectionOptions.prototype.wtimeout;
 /** @type {boolean} */
CollectionOptions.prototype.j;
/**
 * @record
 * @struct
 */
function OrderedBulkOperation() {}
 /** @type {number} */
OrderedBulkOperation.prototype.length;

/**
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
OrderedBulkOperation.prototype.execute = function(callback_or_options, callback) {};

/**
 * @param {!Object} selector
 * @return {?}
 */
OrderedBulkOperation.prototype.find = function(selector) {};

/**
 * @param {!Object} doc
 * @return {?}
 */
OrderedBulkOperation.prototype.insert = function(doc) {};
/**
 * @record
 * @struct
 */
function BulkWriteResult() {}
 /** @type {number} */
BulkWriteResult.prototype.ok;
 /** @type {number} */
BulkWriteResult.prototype.nInserted;
 /** @type {number} */
BulkWriteResult.prototype.nUpdated;
 /** @type {number} */
BulkWriteResult.prototype.nUpserted;
 /** @type {number} */
BulkWriteResult.prototype.nModified;
 /** @type {number} */
BulkWriteResult.prototype.nRemoved;

/**
 * @return {!Array<!Object>}
 */
BulkWriteResult.prototype.getInsertedIds = function() {};

/**
 * @return {!Object}
 */
BulkWriteResult.prototype.getLastOp = function() {};

/**
 * @return {!Object}
 */
BulkWriteResult.prototype.getRawResponse = function() {};

/**
 * @param {number} index
 * @return {!Object}
 */
BulkWriteResult.prototype.getUpsertedIdAt = function(index) {};

/**
 * @return {!Array<!Object>}
 */
BulkWriteResult.prototype.getUpsertedIds = function() {};

/**
 * @return {?}
 */
BulkWriteResult.prototype.getWriteConcernError = function() {};

/**
 * @param {number} index
 * @return {?}
 */
BulkWriteResult.prototype.getWriteErrorAt = function(index) {};

/**
 * @return {number}
 */
BulkWriteResult.prototype.getWriteErrorCount = function() {};

/**
 * @return {!Array<!Object>}
 */
BulkWriteResult.prototype.getWriteErrors = function() {};

/**
 * @return {boolean}
 */
BulkWriteResult.prototype.hasWriteErrors = function() {};
/**
 * @record
 * @struct
 */
function WriteError() {}
 /** @type {number} */
WriteError.prototype.code;
 /** @type {number} */
WriteError.prototype.index;
 /** @type {string} */
WriteError.prototype.errmsg;
/**
 * @record
 * @struct
 */
function WriteConcernError() {}
 /** @type {number} */
WriteConcernError.prototype.code;
 /** @type {string} */
WriteConcernError.prototype.errmsg;
/**
 * @record
 * @struct
 */
function FindOperatorsOrdered() {}

/**
 * @return {?}
 */
FindOperatorsOrdered.prototype.delete = function() {};

/**
 * @return {?}
 */
FindOperatorsOrdered.prototype.deleteOne = function() {};

/**
 * @param {!Object} doc
 * @return {?}
 */
FindOperatorsOrdered.prototype.replaceOne = function(doc) {};

/**
 * @param {!Object} doc
 * @return {?}
 */
FindOperatorsOrdered.prototype.update = function(doc) {};

/**
 * @param {!Object} doc
 * @return {?}
 */
FindOperatorsOrdered.prototype.updateOne = function(doc) {};

/**
 * @return {?}
 */
FindOperatorsOrdered.prototype.upsert = function() {};
/**
 * @record
 * @struct
 */
function UnorderedBulkOperation() {}
 /** @type {number} */
UnorderedBulkOperation.prototype.length;

/**
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
UnorderedBulkOperation.prototype.execute = function(callback_or_options, callback) {};

/**
 * @param {!Object} selector
 * @return {?}
 */
UnorderedBulkOperation.prototype.find = function(selector) {};

/**
 * @param {!Object} doc
 * @return {?}
 */
UnorderedBulkOperation.prototype.insert = function(doc) {};
/**
 * @record
 * @struct
 */
function FindOperatorsUnordered() {}
 /** @type {number} */
FindOperatorsUnordered.prototype.length;

/**
 * @return {?}
 */
FindOperatorsUnordered.prototype.remove = function() {};

/**
 * @return {?}
 */
FindOperatorsUnordered.prototype.removeOne = function() {};

/**
 * @param {!Object} doc
 * @return {?}
 */
FindOperatorsUnordered.prototype.replaceOne = function(doc) {};

/**
 * @param {!Object} doc
 * @return {?}
 */
FindOperatorsUnordered.prototype.update = function(doc) {};

/**
 * @param {!Object} doc
 * @return {?}
 */
FindOperatorsUnordered.prototype.updateOne = function(doc) {};

/**
 * @return {?}
 */
FindOperatorsUnordered.prototype.upsert = function() {};
/**
 * @record
 * @struct
 */
function FindOneOptions() {}
 /** @type {number} */
FindOneOptions.prototype.limit;
 /** @type {(!Object|!Array<?>)} */
FindOneOptions.prototype.sort;
 /** @type {!Object} */
FindOneOptions.prototype.fields;
 /** @type {number} */
FindOneOptions.prototype.skip;
 /** @type {!Object} */
FindOneOptions.prototype.hint;
 /** @type {boolean} */
FindOneOptions.prototype.explain;
 /** @type {boolean} */
FindOneOptions.prototype.snapshot;
 /** @type {boolean} */
FindOneOptions.prototype.timeout;
 /** @type {boolean} */
FindOneOptions.prototype.tailable;
 /** @type {number} */
FindOneOptions.prototype.batchSize;
 /** @type {boolean} */
FindOneOptions.prototype.returnKey;
 /** @type {number} */
FindOneOptions.prototype.maxScan;
 /** @type {number} */
FindOneOptions.prototype.min;
 /** @type {number} */
FindOneOptions.prototype.max;
 /** @type {boolean} */
FindOneOptions.prototype.showDiskLoc;
 /** @type {string} */
FindOneOptions.prototype.comment;
 /** @type {boolean} */
FindOneOptions.prototype.raw;
 /** @type {(string|?)} */
FindOneOptions.prototype.readPreference;
 /** @type {boolean} */
FindOneOptions.prototype.partial;
 /** @type {number} */
FindOneOptions.prototype.maxTimeMs;
/**
 * @record
 * @struct
 */
function InsertWriteOpResult() {}
 /** @type {number} */
InsertWriteOpResult.prototype.insertedCount;
 /** @type {!Array<?>} */
InsertWriteOpResult.prototype.ops;
 /** @type {!Array<?>} */
InsertWriteOpResult.prototype.insertedIds;
 /** @type {?} */
InsertWriteOpResult.prototype.connection;
 /** @type {?} */
InsertWriteOpResult.prototype.result;
/**
 * @record
 * @struct
 */
function CollectionInsertOneOptions() {}
 /** @type {(string|number)} */
CollectionInsertOneOptions.prototype.w;
 /** @type {number} */
CollectionInsertOneOptions.prototype.wtimeout;
 /** @type {boolean} */
CollectionInsertOneOptions.prototype.j;
 /** @type {boolean} */
CollectionInsertOneOptions.prototype.serializeFunctions;
 /** @type {boolean} */
CollectionInsertOneOptions.prototype.forceServerObjectId;
 /** @type {boolean} */
CollectionInsertOneOptions.prototype.bypassDocumentValidation;
/**
 * @record
 * @struct
 */
function InsertOneWriteOpResult() {}
 /** @type {number} */
InsertOneWriteOpResult.prototype.insertedCount;
 /** @type {!Array<?>} */
InsertOneWriteOpResult.prototype.ops;
 /** @type {?} */
InsertOneWriteOpResult.prototype.insertedId;
 /** @type {?} */
InsertOneWriteOpResult.prototype.connection;
 /** @type {?} */
InsertOneWriteOpResult.prototype.result;
/**
 * @record
 * @struct
 */
function ParallelCollectionScanOptions() {}
 /** @type {(string|?)} */
ParallelCollectionScanOptions.prototype.readPreference;
 /** @type {number} */
ParallelCollectionScanOptions.prototype.batchSize;
 /** @type {number} */
ParallelCollectionScanOptions.prototype.numCursors;
 /** @type {boolean} */
ParallelCollectionScanOptions.prototype.raw;
/**
 * @record
 * @struct
 */
function ReplaceOneOptions() {}
 /** @type {boolean} */
ReplaceOneOptions.prototype.upsert;
 /** @type {(string|number)} */
ReplaceOneOptions.prototype.w;
 /** @type {number} */
ReplaceOneOptions.prototype.wtimeout;
 /** @type {boolean} */
ReplaceOneOptions.prototype.j;
 /** @type {boolean} */
ReplaceOneOptions.prototype.bypassDocumentValidation;
/**
 * @record
 * @struct
 */
function UpdateWriteOpResult() {}
 /** @type {?} */
UpdateWriteOpResult.prototype.result;
 /** @type {?} */
UpdateWriteOpResult.prototype.connection;
 /** @type {number} */
UpdateWriteOpResult.prototype.matchedCount;
 /** @type {number} */
UpdateWriteOpResult.prototype.modifiedCount;
 /** @type {number} */
UpdateWriteOpResult.prototype.upsertedCount;
 /** @type {?} */
UpdateWriteOpResult.prototype.upsertedId;
/**
 * @record
 * @struct
 */
function MapReduceOptions() {}
 /** @type {(string|?)} */
MapReduceOptions.prototype.readPreference;
 /** @type {!Object} */
MapReduceOptions.prototype.out;
 /** @type {!Object} */
MapReduceOptions.prototype.query;
 /** @type {!Object} */
MapReduceOptions.prototype.sort;
 /** @type {number} */
MapReduceOptions.prototype.limit;
 /** @type {boolean} */
MapReduceOptions.prototype.keeptemp;
 /** @type {(string|!Function)} */
MapReduceOptions.prototype.finalize;
 /** @type {!Object} */
MapReduceOptions.prototype.scope;
 /** @type {boolean} */
MapReduceOptions.prototype.jsMode;
 /** @type {boolean} */
MapReduceOptions.prototype.verbose;
 /** @type {boolean} */
MapReduceOptions.prototype.bypassDocumentValidation;
/**
 * @record
 * @struct
 */
function WriteOpResult() {}
 /** @type {!Array<?>} */
WriteOpResult.prototype.ops;
 /** @type {?} */
WriteOpResult.prototype.connection;
 /** @type {?} */
WriteOpResult.prototype.result;

/** @typedef {?} */
var CursorResult;

/** @typedef {?} */
var Default;
/**
 * @constructor
 * @struct
 */
function Cursor() {}
 /** @type {string} */
Cursor.prototype.sortValue;
 /** @type {boolean} */
Cursor.prototype.timeout;
 /** @type {?} */
Cursor.prototype.readPreference;

/**
 * @param {string} flag
 * @param {boolean} value
 * @return {?}
 */
Cursor.prototype.addCursorFlag = function(flag, value) {};

/**
 * @param {string} name
 * @param {boolean} value
 * @return {?}
 */
Cursor.prototype.addQueryModifier = function(name, value) {};

/**
 * @param {number} value
 * @return {?}
 */
Cursor.prototype.batchSize = function(value) {};

/**
 * @return {?}
 */
Cursor.prototype.clone = function() {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Cursor.prototype.close = function(callback) {};

/**
 * @param {string} value
 * @return {?}
 */
Cursor.prototype.comment = function(value) {};

/**
 * @param {?|boolean=} callback_or_applySkipLimit_or_options
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<number>}
 */
Cursor.prototype.count = function(callback_or_applySkipLimit_or_options, callback_or_options, callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Cursor.prototype.explain = function(callback) {};

/**
 * @param {!Object} filter
 * @return {?}
 */
Cursor.prototype.filter = function(filter) {};

/**
 * @param {?} iterator
 * @param {?} callback
 * @return {void}
 */
Cursor.prototype.forEach = function(iterator, callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<boolean>|void}
 */
Cursor.prototype.hasNext = function(callback) {};

/**
 * @param {!Object} hint
 * @return {?}
 */
Cursor.prototype.hint = function(hint) {};

/**
 * @return {boolean}
 */
Cursor.prototype.isClosed = function() {};

/**
 * @param {number} value
 * @return {?}
 */
Cursor.prototype.limit = function(value) {};

/**
 * @param {!Function} transform
 * @return {?}
 */
Cursor.prototype.map = function(transform) {};

/**
 * @param {number} max
 * @return {?}
 */
Cursor.prototype.max = function(max) {};

/**
 * @param {number} value
 * @return {?}
 */
Cursor.prototype.maxAwaitTimeMS = function(value) {};

/**
 * @param {!Object} maxScan
 * @return {?}
 */
Cursor.prototype.maxScan = function(maxScan) {};

/**
 * @param {number} value
 * @return {?}
 */
Cursor.prototype.maxTimeMS = function(value) {};

/**
 * @param {number} min
 * @return {?}
 */
Cursor.prototype.min = function(min) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
Cursor.prototype.next = function(callback) {};

/**
 * @param {!Object} value
 * @return {?}
 */
Cursor.prototype.project = function(value) {};

/**
 * @param {number} size
 * @return {(string|void|?)}
 */
Cursor.prototype.read = function(size) {};

/**
 * @param {!Object} returnKey
 * @return {?}
 */
Cursor.prototype.returnKey = function(returnKey) {};

/**
 * @return {void}
 */
Cursor.prototype.rewind = function() {};

/**
 * @param {string} field
 * @param {!Object} value
 * @return {?}
 */
Cursor.prototype.setCursorOption = function(field, value) {};

/**
 * @param {(string|?)} readPreference
 * @return {?}
 */
Cursor.prototype.setReadPreference = function(readPreference) {};

/**
 * @param {!Object} showRecordId
 * @return {?}
 */
Cursor.prototype.showRecordId = function(showRecordId) {};

/**
 * @param {number} value
 * @return {?}
 */
Cursor.prototype.skip = function(value) {};

/**
 * @param {!Object} snapshot
 * @return {?}
 */
Cursor.prototype.snapshot = function(snapshot) {};

/**
 * @param {(string|!Object|!Array<!Object>)} keyOrList
 * @param {number=} direction
 * @return {?}
 */
Cursor.prototype.sort = function(keyOrList, direction) {};

/**
 * @param {?=} options
 * @return {?}
 */
Cursor.prototype.stream = function(options) {};

/**
 * @param {?=} callback
 * @return {!Promise<!Array<?>>|void}
 */
Cursor.prototype.toArray = function(callback) {};

/**
 * @param {(string|?)} stream
 * @return {void}
 */
Cursor.prototype.unshift = function(stream) {};
/**
 * @record
 * @struct
 */
function CursorCommentOptions() {}
 /** @type {number} */
CursorCommentOptions.prototype.skip;
 /** @type {number} */
CursorCommentOptions.prototype.limit;
 /** @type {number} */
CursorCommentOptions.prototype.maxTimeMS;
 /** @type {string} */
CursorCommentOptions.prototype.hint;
 /** @type {(string|?)} */
CursorCommentOptions.prototype.readPreference;
/**
 * @record
 * @struct
 */
function IteratorCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function EndCallback() {}

/* TODO: CallSignature:  */

/** @typedef {?} */
var AggregationCursorResult;
/**
 * @constructor
 * @struct
 */
function AggregationCursor() {}

/**
 * @param {number} value
 * @return {?}
 */
AggregationCursor.prototype.batchSize = function(value) {};

/**
 * @return {?}
 */
AggregationCursor.prototype.clone = function() {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
AggregationCursor.prototype.close = function(callback) {};

/**
 * @param {?} callback
 * @return {void}
 */
AggregationCursor.prototype.each = function(callback) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
AggregationCursor.prototype.explain = function(callback) {};

/**
 * @param {!Object} document
 * @return {?}
 */
AggregationCursor.prototype.geoNear = function(document) {};

/**
 * @param {!Object} document
 * @return {?}
 */
AggregationCursor.prototype.group = function(document) {};

/**
 * @return {boolean}
 */
AggregationCursor.prototype.isClosed = function() {};

/**
 * @param {number} value
 * @return {?}
 */
AggregationCursor.prototype.limit = function(value) {};

/**
 * @param {!Object} document
 * @return {?}
 */
AggregationCursor.prototype.match = function(document) {};

/**
 * @param {number} value
 * @return {?}
 */
AggregationCursor.prototype.maxTimeMS = function(value) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
AggregationCursor.prototype.next = function(callback) {};

/**
 * @param {string} destination
 * @return {?}
 */
AggregationCursor.prototype.out = function(destination) {};

/**
 * @param {!Object} document
 * @return {?}
 */
AggregationCursor.prototype.project = function(document) {};

/**
 * @param {number} size
 * @return {(string|void|?)}
 */
AggregationCursor.prototype.read = function(size) {};

/**
 * @param {!Object} document
 * @return {?}
 */
AggregationCursor.prototype.redact = function(document) {};

/**
 * @return {?}
 */
AggregationCursor.prototype.rewind = function() {};

/**
 * @param {number} value
 * @return {?}
 */
AggregationCursor.prototype.skip = function(value) {};

/**
 * @param {!Object} document
 * @return {?}
 */
AggregationCursor.prototype.sort = function(document) {};

/**
 * @param {?=} callback
 * @return {!Promise<!Array<?>>|void}
 */
AggregationCursor.prototype.toArray = function(callback) {};

/**
 * @param {(string|?)} stream
 * @return {void}
 */
AggregationCursor.prototype.unshift = function(stream) {};

/**
 * @param {string} field
 * @return {?}
 */
AggregationCursor.prototype.unwind = function(field) {};
/**
 * @constructor
 * @struct
 */
function CommandCursor() {}

/**
 * @param {number} value
 * @return {?}
 */
CommandCursor.prototype.batchSize = function(value) {};

/**
 * @return {?}
 */
CommandCursor.prototype.clone = function() {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
CommandCursor.prototype.close = function(callback) {};

/**
 * @param {?} callback
 * @return {void}
 */
CommandCursor.prototype.each = function(callback) {};

/**
 * @return {boolean}
 */
CommandCursor.prototype.isClosed = function() {};

/**
 * @param {number} value
 * @return {?}
 */
CommandCursor.prototype.maxTimeMS = function(value) {};

/**
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
CommandCursor.prototype.next = function(callback) {};

/**
 * @param {number} size
 * @return {(string|void|?)}
 */
CommandCursor.prototype.read = function(size) {};

/**
 * @return {?}
 */
CommandCursor.prototype.rewind = function() {};

/**
 * @param {(string|?)} readPreference
 * @return {?}
 */
CommandCursor.prototype.setReadPreference = function(readPreference) {};

/**
 * @param {?=} callback
 * @return {!Promise<!Array<?>>|void}
 */
CommandCursor.prototype.toArray = function(callback) {};

/**
 * @param {(string|?)} stream
 * @return {void}
 */
CommandCursor.prototype.unshift = function(stream) {};

/**
 * @constructor
 * @struct
 * @param {?} db
 * @param {?=} options
 */
function GridFSBucket(db, options) {}

/**
 * @param {?} id
 * @param {?=} callback
 * @return {void}
 */
GridFSBucket.prototype.delete = function(id, callback) {};

/**
 * @param {?=} callback
 * @return {void}
 */
GridFSBucket.prototype.drop = function(callback) {};

/**
 * @param {!Object=} filter
 * @param {?=} options
 * @return {?}
 */
GridFSBucket.prototype.find = function(filter, options) {};

/**
 * @param {?} id
 * @param {?=} options
 * @return {?}
 */
GridFSBucket.prototype.openDownloadStream = function(id, options) {};

/**
 * @param {string} filename
 * @param {?=} options
 * @return {?}
 */
GridFSBucket.prototype.openDownloadStreamByName = function(filename, options) {};

/**
 * @param {string} filename
 * @param {?=} options
 * @return {?}
 */
GridFSBucket.prototype.openUploadStream = function(filename, options) {};

/**
 * @param {(string|number|!Object)} id
 * @param {string} filename
 * @param {?=} options
 * @return {?}
 */
GridFSBucket.prototype.openUploadStreamWithId = function(id, filename, options) {};

/**
 * @param {?} id
 * @param {string} filename
 * @param {?=} callback
 * @return {void}
 */
GridFSBucket.prototype.rename = function(id, filename, callback) {};
/**
 * @record
 * @struct
 */
function GridFSBucketOptions() {}
 /** @type {string} */
GridFSBucketOptions.prototype.bucketName;
 /** @type {number} */
GridFSBucketOptions.prototype.chunkSizeBytes;
 /** @type {!Object} */
GridFSBucketOptions.prototype.writeConcern;
 /** @type {!Object} */
GridFSBucketOptions.prototype.ReadPreference;
/**
 * @record
 * @struct
 */
function GridFSBucketErrorCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function GridFSBucketFindOptions() {}
 /** @type {number} */
GridFSBucketFindOptions.prototype.batchSize;
 /** @type {number} */
GridFSBucketFindOptions.prototype.limit;
 /** @type {number} */
GridFSBucketFindOptions.prototype.maxTimeMS;
 /** @type {boolean} */
GridFSBucketFindOptions.prototype.noCursorTimeout;
 /** @type {number} */
GridFSBucketFindOptions.prototype.skip;
 /** @type {!Object} */
GridFSBucketFindOptions.prototype.sort;
/**
 * @record
 * @struct
 */
function GridFSBucketOpenUploadStreamOptions() {}
 /** @type {number} */
GridFSBucketOpenUploadStreamOptions.prototype.chunkSizeBytes;
 /** @type {!Object} */
GridFSBucketOpenUploadStreamOptions.prototype.metadata;
 /** @type {string} */
GridFSBucketOpenUploadStreamOptions.prototype.contentType;
 /** @type {!Array<string>} */
GridFSBucketOpenUploadStreamOptions.prototype.aliases;

/**
 * @constructor
 * @struct
 * @param {?} chunks
 * @param {?} files
 * @param {!Object} readPreference
 * @param {!Object} filter
 * @param {?=} options
 */
function GridFSBucketReadStream(chunks, files, readPreference, filter, options) {}
/**
 * @record
 * @struct
 */
function GridFSBucketReadStreamOptions() {}
 /** @type {number} */
GridFSBucketReadStreamOptions.prototype.sort;
 /** @type {number} */
GridFSBucketReadStreamOptions.prototype.skip;
 /** @type {number} */
GridFSBucketReadStreamOptions.prototype.start;
 /** @type {number} */
GridFSBucketReadStreamOptions.prototype.end;

/**
 * @constructor
 * @struct
 * @param {?} bucket
 * @param {string} filename
 * @param {?=} options
 */
function GridFSBucketWriteStream(bucket, filename, options) {}
/**
 * @record
 * @struct
 */
function GridFSBucketWriteStreamOptions() {}
 /** @type {(string|number|!Object)} */
GridFSBucketWriteStreamOptions.prototype.id;
 /** @type {number} */
GridFSBucketWriteStreamOptions.prototype.chunkSizeBytes;
 /** @type {number} */
GridFSBucketWriteStreamOptions.prototype.w;
 /** @type {number} */
GridFSBucketWriteStreamOptions.prototype.wtimeout;
 /** @type {number} */
GridFSBucketWriteStreamOptions.prototype.j;
