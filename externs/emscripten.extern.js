/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/emscripten/index.d.ts:
/** @const */
var Emscripten = {};
/**
 * @record
 * @struct
 */
Emscripten.FileSystemType = function() {};
/** @const */
var Module = {};

/** @typedef {string} */
Module.EnvironmentType;

/**
 * @param {string} str
 * @return {void}
 */
Module.print = function(str) {};

/**
 * @param {string} str
 * @return {void}
 */
Module.printErr = function(str) {};
 /** @type {!Array<string>} */
Module.arguments;
 /** @type {string} */
Module.environment;
 /** @type {!Array<function(): void>} */
Module.preInit;
 /** @type {!Array<function(): void>} */
Module.preRun;
 /** @type {!Array<function(): void>} */
Module.postRun;
 /** @type {!WebGLRenderingContext} */
Module.preinitializedWebGLContext;
 /** @type {boolean} */
Module.noInitialRun;
 /** @type {boolean} */
Module.noExitRuntime;
 /** @type {boolean} */
Module.logReadFiles;
 /** @type {string} */
Module.filePackagePrefixURL;
 /** @type {!ArrayBuffer} */
Module.wasmBinary;

/**
 * @param {!Object} object
 * @return {void}
 */
Module.destroy = function(object) {};

/**
 * @param {string} remotePackageName
 * @param {number} remotePackageSize
 * @return {!ArrayBuffer}
 */
Module.getPreloadedPackage = function(remotePackageName, remotePackageSize) {};

/**
 * @param {!Array<{name: string, kind: string}>} imports
 * @param {function(!WebAssembly.Module): void} successCallback
 * @return {!Array<{module: string, name: string, kind: string}>}
 */
Module.instantiateWasm = function(imports, successCallback) {};

/**
 * @param {string} url
 * @return {string}
 */
Module.locateFile = function(url) {};

/**
 * @param {!MessageEvent} event
 * @return {void}
 */
Module.onCustomMessage = function(event) {};
 /** @type {?} */
Module.Runtime;

/**
 * @param {string} ident
 * @param {string} returnType
 * @param {!Array<string>} argTypes
 * @param {!Array<?>} args
 * @return {?}
 */
Module.ccall = function(ident, returnType, argTypes, args) {};

/**
 * @param {string} ident
 * @param {string} returnType
 * @param {!Array<string>} argTypes
 * @return {?}
 */
Module.cwrap = function(ident, returnType, argTypes) {};

/**
 * @param {number} ptr
 * @param {?} value
 * @param {string} type
 * @param {boolean=} noSafe
 * @return {void}
 */
Module.setValue = function(ptr, value, type, noSafe) {};

/**
 * @param {number} ptr
 * @param {string} type
 * @param {boolean=} noSafe
 * @return {number}
 */
Module.getValue = function(ptr, type, noSafe) {};
 /** @type {number} */
Module.ALLOC_NORMAL;
 /** @type {number} */
Module.ALLOC_STACK;
 /** @type {number} */
Module.ALLOC_STATIC;
 /** @type {number} */
Module.ALLOC_DYNAMIC;
 /** @type {number} */
Module.ALLOC_NONE;

/**
 * @param {?} slab
 * @param {string|!Array<string>} types
 * @param {number} allocator
 * @param {number} ptr
 * @return {number}
 */
Module.allocate = function(slab, types, allocator, ptr) {};

/**
 * @param {number} ptr
 * @param {number=} length
 * @return {string}
 */
Module.Pointer_stringify = function(ptr, length) {};

/**
 * @param {number} ptr
 * @return {string}
 */
Module.UTF16ToString = function(ptr) {};

/**
 * @param {string} str
 * @param {number} outPtr
 * @return {void}
 */
Module.stringToUTF16 = function(str, outPtr) {};

/**
 * @param {number} ptr
 * @return {string}
 */
Module.UTF32ToString = function(ptr) {};

/**
 * @param {string} str
 * @param {number} outPtr
 * @return {void}
 */
Module.stringToUTF32 = function(str, outPtr) {};
 /** @type {!Int32Array} */
Module.HEAP;
 /** @type {!Int32Array} */
Module.IHEAP;
 /** @type {!Float64Array} */
Module.FHEAP;
 /** @type {!Int8Array} */
Module.HEAP8;
 /** @type {!Int16Array} */
Module.HEAP16;
 /** @type {!Int32Array} */
Module.HEAP32;
 /** @type {!Uint8Array} */
Module.HEAPU8;
 /** @type {!Uint16Array} */
Module.HEAPU16;
 /** @type {!Uint32Array} */
Module.HEAPU32;
 /** @type {!Float32Array} */
Module.HEAPF32;
 /** @type {!Float64Array} */
Module.HEAPF64;
 /** @type {number} */
Module.TOTAL_STACK;
 /** @type {number} */
Module.TOTAL_MEMORY;
 /** @type {number} */
Module.FAST_MEMORY;

/**
 * @param {function(): ?} cb
 * @return {void}
 */
Module.addOnPreRun = function(cb) {};

/**
 * @param {function(): ?} cb
 * @return {void}
 */
Module.addOnInit = function(cb) {};

/**
 * @param {function(): ?} cb
 * @return {void}
 */
Module.addOnPreMain = function(cb) {};

/**
 * @param {function(): ?} cb
 * @return {void}
 */
Module.addOnExit = function(cb) {};

/**
 * @param {function(): ?} cb
 * @return {void}
 */
Module.addOnPostRun = function(cb) {};

/**
 * @param {string} stringy
 * @param {boolean=} dontAddNull
 * @param {number=} length
 * @return {!Array<number>}
 */
Module.intArrayFromString = function(stringy, dontAddNull, length) {};

/**
 * @param {!Array<number>} array
 * @return {string}
 */
Module.intArrayToString = function(array) {};

/**
 * @param {string} str
 * @param {number} buffer
 * @param {boolean} dontAddNull
 * @return {void}
 */
Module.writeStringToMemory = function(str, buffer, dontAddNull) {};

/**
 * @param {!Array<number>} array
 * @param {number} buffer
 * @return {void}
 */
Module.writeArrayToMemory = function(array, buffer) {};

/**
 * @param {string} str
 * @param {number} buffer
 * @param {boolean} dontAddNull
 * @return {void}
 */
Module.writeAsciiToMemory = function(str, buffer, dontAddNull) {};

/**
 * @param {?} id
 * @return {void}
 */
Module.addRunDependency = function(id) {};

/**
 * @param {?} id
 * @return {void}
 */
Module.removeRunDependency = function(id) {};
 /** @type {?} */
Module.preloadedImages;
 /** @type {?} */
Module.preloadedAudios;

/**
 * @param {number} size
 * @return {number}
 */
Module._malloc = function(size) {};

/**
 * @param {number} ptr
 * @return {void}
 */
Module._free = function(ptr) {};
/** @const */
var FS = {};
/**
 * @record
 * @struct
 */
FS.Lookup = function() {};
 /** @type {string} */
FS.Lookup.prototype.path;
 /** @type {!FS.FSNode} */
FS.Lookup.prototype.node;
/**
 * @record
 * @struct
 */
FS.FSStream = function() {};
/**
 * @record
 * @struct
 */
FS.FSNode = function() {};
/**
 * @record
 * @struct
 */
FS.ErrnoError = function() {};
 /** @type {boolean} */
FS.ignorePermissions;
 /** @type {?} */
FS.trackingDelegate;
 /** @type {?} */
FS.tracking;
 /** @type {?} */
FS.genericErrors;

/**
 * @param {string} path
 * @param {?} opts
 * @return {!FS.Lookup}
 */
FS.lookupPath = function(path, opts) {};

/**
 * @param {!FS.FSNode} node
 * @return {string}
 */
FS.getPath = function(node) {};

/**
 * @param {number} mode
 * @return {boolean}
 */
FS.isFile = function(mode) {};

/**
 * @param {number} mode
 * @return {boolean}
 */
FS.isDir = function(mode) {};

/**
 * @param {number} mode
 * @return {boolean}
 */
FS.isLink = function(mode) {};

/**
 * @param {number} mode
 * @return {boolean}
 */
FS.isChrdev = function(mode) {};

/**
 * @param {number} mode
 * @return {boolean}
 */
FS.isBlkdev = function(mode) {};

/**
 * @param {number} mode
 * @return {boolean}
 */
FS.isFIFO = function(mode) {};

/**
 * @param {number} mode
 * @return {boolean}
 */
FS.isSocket = function(mode) {};

/**
 * @param {number} dev
 * @return {number}
 */
FS.major = function(dev) {};

/**
 * @param {number} dev
 * @return {number}
 */
FS.minor = function(dev) {};

/**
 * @param {number} ma
 * @param {number} mi
 * @return {number}
 */
FS.makedev = function(ma, mi) {};

/**
 * @param {number} dev
 * @param {?} ops
 * @return {void}
 */
FS.registerDevice = function(dev, ops) {};

/**
 * @param {boolean|function(?): ?} populate_or_callback
 * @param {function(?): ?|boolean=} callback_or_populate
 * @return {void}
 */
FS.syncfs = function(populate_or_callback, callback_or_populate) {};

/**
 * @param {!Emscripten.FileSystemType} type
 * @param {?} opts
 * @param {string} mountpoint
 * @return {?}
 */
FS.mount = function(type, opts, mountpoint) {};

/**
 * @param {string} mountpoint
 * @return {void}
 */
FS.unmount = function(mountpoint) {};

/**
 * @param {string} path
 * @param {number=} mode
 * @return {?}
 */
FS.mkdir = function(path, mode) {};

/**
 * @param {string} path
 * @param {number=} mode
 * @param {number=} dev
 * @return {?}
 */
FS.mkdev = function(path, mode, dev) {};

/**
 * @param {string} oldpath
 * @param {string} newpath
 * @return {?}
 */
FS.symlink = function(oldpath, newpath) {};

/**
 * @param {string} old_path
 * @param {string} new_path
 * @return {void}
 */
FS.rename = function(old_path, new_path) {};

/**
 * @param {string} path
 * @return {void}
 */
FS.rmdir = function(path) {};

/**
 * @param {string} path
 * @return {?}
 */
FS.readdir = function(path) {};

/**
 * @param {string} path
 * @return {void}
 */
FS.unlink = function(path) {};

/**
 * @param {string} path
 * @return {string}
 */
FS.readlink = function(path) {};

/**
 * @param {string} path
 * @param {boolean=} dontFollow
 * @return {?}
 */
FS.stat = function(path, dontFollow) {};

/**
 * @param {string} path
 * @return {?}
 */
FS.lstat = function(path) {};

/**
 * @param {string} path
 * @param {number} mode
 * @param {boolean=} dontFollow
 * @return {void}
 */
FS.chmod = function(path, mode, dontFollow) {};

/**
 * @param {string} path
 * @param {number} mode
 * @return {void}
 */
FS.lchmod = function(path, mode) {};

/**
 * @param {number} fd
 * @param {number} mode
 * @return {void}
 */
FS.fchmod = function(fd, mode) {};

/**
 * @param {string} path
 * @param {number} uid
 * @param {number} gid
 * @param {boolean=} dontFollow
 * @return {void}
 */
FS.chown = function(path, uid, gid, dontFollow) {};

/**
 * @param {string} path
 * @param {number} uid
 * @param {number} gid
 * @return {void}
 */
FS.lchown = function(path, uid, gid) {};

/**
 * @param {number} fd
 * @param {number} uid
 * @param {number} gid
 * @return {void}
 */
FS.fchown = function(fd, uid, gid) {};

/**
 * @param {string} path
 * @param {number} len
 * @return {void}
 */
FS.truncate = function(path, len) {};

/**
 * @param {number} fd
 * @param {number} len
 * @return {void}
 */
FS.ftruncate = function(fd, len) {};

/**
 * @param {string} path
 * @param {number} atime
 * @param {number} mtime
 * @return {void}
 */
FS.utime = function(path, atime, mtime) {};

/**
 * @param {string} path
 * @param {string} flags
 * @param {number=} mode
 * @param {number=} fd_start
 * @param {number=} fd_end
 * @return {!FS.FSStream}
 */
FS.open = function(path, flags, mode, fd_start, fd_end) {};

/**
 * @param {!FS.FSStream} stream
 * @return {void}
 */
FS.close = function(stream) {};

/**
 * @param {!FS.FSStream} stream
 * @param {number} offset
 * @param {number} whence
 * @return {?}
 */
FS.llseek = function(stream, offset, whence) {};

/**
 * @param {!FS.FSStream} stream
 * @param {!ArrayBufferView} buffer
 * @param {number} offset
 * @param {number} length
 * @param {number=} position
 * @return {number}
 */
FS.read = function(stream, buffer, offset, length, position) {};

/**
 * @param {!FS.FSStream} stream
 * @param {!ArrayBufferView} buffer
 * @param {number} offset
 * @param {number} length
 * @param {number=} position
 * @param {boolean=} canOwn
 * @return {number}
 */
FS.write = function(stream, buffer, offset, length, position, canOwn) {};

/**
 * @param {!FS.FSStream} stream
 * @param {number} offset
 * @param {number} length
 * @return {void}
 */
FS.allocate = function(stream, offset, length) {};

/**
 * @param {!FS.FSStream} stream
 * @param {!ArrayBufferView} buffer
 * @param {number} offset
 * @param {number} length
 * @param {number} position
 * @param {number} prot
 * @param {number} flags
 * @return {?}
 */
FS.mmap = function(stream, buffer, offset, length, position, prot, flags) {};

/**
 * @param {!FS.FSStream} stream
 * @param {?} cmd
 * @param {?} arg
 * @return {?}
 */
FS.ioctl = function(stream, cmd, arg) {};

/**
 * @param {string} path
 * @param {{encoding: string, flags: string}=} opts
 * @return {?}
 */
FS.readFile = function(path, opts) {};

/**
 * @param {string} path
 * @param {!ArrayBufferView|string} data
 * @param {{encoding: string, flags: string}=} opts
 * @return {void}
 */
FS.writeFile = function(path, data, opts) {};

/**
 * @return {string}
 */
FS.cwd = function() {};

/**
 * @param {string} path
 * @return {void}
 */
FS.chdir = function(path) {};

/**
 * @param {function(): number} input
 * @param {function(number): ?} output
 * @param {function(number): ?} error
 * @return {void}
 */
FS.init = function(input, output, error) {};

/**
 * @param {string|!FS.FSNode} parent
 * @param {string} name
 * @param {string} url
 * @param {boolean} canRead
 * @param {boolean} canWrite
 * @return {!FS.FSNode}
 */
FS.createLazyFile = function(parent, name, url, canRead, canWrite) {};

/**
 * @param {string|!FS.FSNode} parent
 * @param {string} name
 * @param {string} url
 * @param {boolean} canRead
 * @param {boolean} canWrite
 * @param {function(): void=} onload
 * @param {function(): void=} onerror
 * @param {boolean=} dontCreateFile
 * @param {boolean=} canOwn
 * @return {void}
 */
FS.createPreloadedFile = function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {};
 /** @type {!Emscripten.FileSystemType} */
var MEMFS;
 /** @type {!Emscripten.FileSystemType} */
var NODEFS;
 /** @type {!Emscripten.FileSystemType} */
var IDBFS;

/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
Math.prototype.imul = function(a, b) {};
