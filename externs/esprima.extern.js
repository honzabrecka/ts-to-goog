/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/esprima/index.d.ts:

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */

/* TODO: ImportDeclaration in  */
/** @const */
var esprima = {};
 /** @type {string} */
esprima.version;

/**
 * @param {string} code
 * @param {!esprima.Options=} options
 * @param {function(?, ?): void=} delegate
 * @return {?}
 */
esprima.parse = function(code, options, delegate) {};

/**
 * @param {string} code
 * @param {!esprima.Options=} options
 * @return {!Array<!esprima.Token>}
 */
esprima.tokenize = function(code, options) {};
/**
 * @record
 * @struct
 */
esprima.Token = function() {};
 /** @type {string} */
esprima.Token.prototype.type;
 /** @type {string} */
esprima.Token.prototype.value;
/**
 * @record
 * @struct
 */
esprima.Options = function() {};
 /** @type {boolean} */
esprima.Options.prototype.loc;
 /** @type {boolean} */
esprima.Options.prototype.range;
 /** @type {boolean} */
esprima.Options.prototype.raw;
 /** @type {boolean} */
esprima.Options.prototype.tokens;
 /** @type {boolean} */
esprima.Options.prototype.comment;
 /** @type {boolean} */
esprima.Options.prototype.attachComment;
 /** @type {boolean} */
esprima.Options.prototype.tolerant;
 /** @type {boolean} */
esprima.Options.prototype.source;
 /** @type {string} */
esprima.Options.prototype.sourceType;
 /** @type {{AssignmentExpression: string, AssignmentPattern: string, ArrayExpression: string, ArrayPattern: string, ArrowFunctionExpression: string, BlockStatement: string, BinaryExpression: string, BreakStatement: string, CallExpression: string, CatchClause: string, ClassBody: string, ClassDeclaration: string, ClassExpression: string, ConditionalExpression: string, ContinueStatement: string, DoWhileStatement: string, DebuggerStatement: string, EmptyStatement: string, ExportAllDeclaration: string, ExportDefaultDeclaration: string, ExportNamedDeclaration: string, ExportSpecifier: string, ExpressionStatement: string, ForStatement: string, ForOfStatement: string, ForInStatement: string, FunctionDeclaration: string, FunctionExpression: string, Identifier: string, IfStatement: string, ImportDeclaration: string, ImportDefaultSpecifier: string, ImportNamespaceSpecifier: string, ImportSpecifier: string, Literal: string, LabeledStatement: string, LogicalExpression: string, MemberExpression: string, MetaProperty: string, MethodDefinition: string, NewExpression: string, ObjectExpression: string, ObjectPattern: string, Program: string, Property: string, RestElement: string, ReturnStatement: string, SequenceExpression: string, SpreadElement: string, Super: string, SwitchCase: string, SwitchStatement: string, TaggedTemplateExpression: string, TemplateElement: string, TemplateLiteral: string, ThisExpression: string, ThrowStatement: string, TryStatement: string, UnaryExpression: string, UpdateExpression: string, VariableDeclaration: string, VariableDeclarator: string, WhileStatement: string, WithStatement: string, YieldExpression: string}} */
esprima.Syntax;
