/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/auth0-js/index.d.ts:

/* TODO: NamespaceExportDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {?} options
 */
function Authentication(options) {}
 /** @type {?} */
Authentication.prototype.passwordless;
 /** @type {?} */
Authentication.prototype.dbConnection;

/**
 * Builds and returns the `/authorize` url in order to initialize a new authN/authZ transaction
 * 
 * @param {?} options
 * @return {string}
 */
Authentication.prototype.buildAuthorizeUrl = function(options) {};

/**
 * Builds and returns the Logout url in order to initialize a new authN/authZ transaction
 * 
 * @param {?=} options
 * @return {string}
 */
Authentication.prototype.buildLogoutUrl = function(options) {};

/**
 * Makes a call to the `oauth/token` endpoint with `password` grant type
 * 
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
Authentication.prototype.loginWithDefaultDirectory = function(options, callback) {};

/**
 * Makes a call to the `/ro` endpoint
 * @deprecated `loginWithResourceOwner` will be soon deprecated, user `login` instead.
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
Authentication.prototype.loginWithResourceOwner = function(options, callback) {};

/**
 * Makes a call to the `oauth/token` endpoint with `password-realm` grant type
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
Authentication.prototype.login = function(options, callback) {};

/**
 * Makes a call to the `oauth/token` endpoint
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
Authentication.prototype.oauthToken = function(options, callback) {};

/**
 * Makes a call to the `/ssodata` endpoint
 * 
 * Makes a call to the `/ssodata` endpoint
 * 
 * @param {?|boolean=} callback_or_withActiveDirectories
 * @param {?=} callback
 * @return {void}
 */
Authentication.prototype.getSSOData = function(callback_or_withActiveDirectories, callback) {};

/**
 * Makes a call to the `/userinfo` endpoint and returns the user profile
 * 
 * @param {string} accessToken
 * @param {?} callback
 * @return {void}
 */
Authentication.prototype.userInfo = function(accessToken, callback) {};

/**
 * Makes a call to the `/delegation` endpoint
 * 
 * @param {?} options
 * @param {?} callback
 * @return {?}
 */
Authentication.prototype.delegation = function(options, callback) {};

/**
 * Fetches the user country based on the ip.
 * 
 * @param {?} callback
 * @return {void}
 */
Authentication.prototype.getUserCountry = function(callback) {};

/**
 * @constructor
 * @struct
 * @param {?} request
 * @param {?} option
 */
function PasswordlessAuthentication(request, option) {}

/**
 * Builds and returns the passwordless TOTP verify url in order to initialize a new authN/authZ transaction
 * 
 * @param {?} options
 * @return {string}
 */
PasswordlessAuthentication.prototype.buildVerifyUrl = function(options) {};

/**
 * Initializes a new passwordless authN/authZ transaction
 * 
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
PasswordlessAuthentication.prototype.start = function(options, callback) {};

/**
 * Verifies the passwordless TOTP and returns an error if any.
 * 
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
PasswordlessAuthentication.prototype.verify = function(options, callback) {};

/**
 * @constructor
 * @struct
 * @param {?} request
 * @param {?} option
 */
function DBConnection(request, option) {}

/**
 * Signup a new user
 * 
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
DBConnection.prototype.signup = function(options, callback) {};

/**
 * Initializes the change password flow
 * 
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
DBConnection.prototype.changePassword = function(options, callback) {};

/**
 * @constructor
 * @struct
 * @param {?} options
 */
function Management(options) {}

/**
 * Returns the user profile. https://auth0.com/docs/api/management/v2#!/Users/get_users_by_id
 * 
 * @param {string} userId
 * @param {?} callback
 * @return {void}
 */
Management.prototype.getUser = function(userId, callback) {};

/**
 * Updates the user metdata. It will patch the user metdata with the attributes sent.
 * https://auth0.com/docs/api/management/v2#!/Users/patch_users_by_id
 * 
 * @param {string} userId
 * @param {?} userMetadata
 * @param {?} callback
 * @return {void}
 */
Management.prototype.patchUserMetadata = function(userId, userMetadata, callback) {};

/**
 * Link two users. https://auth0.com/docs/api/management/v2#!/Users/post_identities
 * 
 * @param {string} userId
 * @param {string} secondaryUserToken
 * @param {?} callback
 * @return {void}
 */
Management.prototype.linkUser = function(userId, secondaryUserToken, callback) {};

/**
 * @constructor
 * @struct
 * @param {?} options
 */
function WebAuth(options) {}
 /** @type {?} */
WebAuth.prototype.client;
 /** @type {?} */
WebAuth.prototype.popup;
 /** @type {?} */
WebAuth.prototype.redirect;
 /** @type {?} */
WebAuth.prototype.crossOriginAuthentication;

/**
 * Redirects to the hosted login page (`/authorize`) in order to initialize a new authN/authZ transaction
 * 
 * @param {?} options
 * @return {void}
 */
WebAuth.prototype.authorize = function(options) {};

/**
 * Parse the url hash and extract the returned tokens depending on the transaction.
 * 
 * Only validates id_tokens signed by Auth0 using the RS256 algorithm using the public key exposed
 * by the `/.well-known/jwks.json` endpoint. Id tokens signed with other algorithms will not be
 * accepted.
 * 
 * Parse the url hash and extract the returned tokens depending on the transaction.
 * 
 * Only validates id_tokens signed by Auth0 using the RS256 algorithm using the public key exposed
 * by the `/.well-known/jwks.json` endpoint. Id tokens signed with other algorithms will not be
 * accepted.
 * 
 * @param {?} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
WebAuth.prototype.parseHash = function(callback_or_options, callback) {};

/**
 * Decodes the id_token and verifies  the nonce.
 * 
 * @param {string} token
 * @param {string} nonce
 * @param {?} callback
 * @return {void}
 */
WebAuth.prototype.validateToken = function(token, nonce, callback) {};

/**
 * Executes a silent authentication transaction under the hood in order to fetch a new tokens for the current session.
 * This method requires that all Auth is performed with {\@link authorize}
 * Watch out! If you're not using the hosted login page to do social logins, you have to use your own [social connection keys](https://manage.auth0.com/#/connections/social). If you use Auth0's dev keys, you'll always get `login_required` as an error when calling this method.
 * 
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
WebAuth.prototype.renewAuth = function(options, callback) {};

/**
 * Initialices a change password transaction
 * 
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
WebAuth.prototype.changePassword = function(options, callback) {};

/**
 * Signs up a new user
 * 
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
WebAuth.prototype.signup = function(options, callback) {};

/**
 * Signs up a new user, automatically logs the user in after the signup and returns the user token.
 * The login will be done using /oauth/token with password-realm grant type.
 * 
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
WebAuth.prototype.signupAndAuthorize = function(options, callback) {};

/**
 * Logs in the user with username and password using the cross origin authentication (/co/authenticate) flow. You can use either `username` or `email` to identify the user, but `username` will take precedence over `email`.
 * This only works when 3rd party cookies are enabled in the browser. After the /co/authenticate call, you'll have to use the {\@link parseHash} function at the `redirectUri` specified in the constructor.
 * 
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
WebAuth.prototype.login = function(options, callback) {};

/**
 * Runs the callback code for the cross origin authentication call. This method is meant to be called by the cross origin authentication callback url.
 * 
 * @return {void}
 */
WebAuth.prototype.crossOriginAuthenticationCallback = function() {};

/**
 * Redirects to the auth0 logout endpoint
 * 
 * If you want to navigate the user to a specific URL after the logout, set that URL at the returnTo parameter. The URL should be included in any the appropriate Allowed Logout URLs list:
 * 
 * - If the client_id parameter is included, the returnTo URL must be listed in the Allowed Logout URLs set at the client level (see Setting Allowed Logout URLs at the App Level).
 * - If the client_id parameter is NOT included, the returnTo URL must be listed in the Allowed Logout URLs set at the account level (see Setting Allowed Logout URLs at the Account Level).
 * 
 * @see {\@link https://auth0.com/docs/api/authentication#logout}
 * @param {?} options
 * @return {void}
 */
WebAuth.prototype.logout = function(options) {};

/**
 * Initialices a passwordless authentication transaction
 * 
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
WebAuth.prototype.passwordlessStart = function(options, callback) {};

/**
 * Verifies the passwordless TOTP and redirects to finish the passwordless transaction
 * 
 * \@method passwordlessVerify
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
WebAuth.prototype.passwordlessVerify = function(options, callback) {};

/**
 * @constructor
 * @struct
 * @param {?} client
 * @param {?} options
 */
function Redirect(client, options) {}

/**
 * Performs authentication with username/email and password with a database connection
 * 
 * This method is not compatible with API Auth so if you need to fetch API tokens with audience
 * you should use {\@link authorize} or {\@link login}.
 * 
 * \@method loginWithCredentials
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
Redirect.prototype.loginWithCredentials = function(options, callback) {};

/**
 * Signs up a new user and automatically logs the user in after the signup.
 * 
 * \@method signupAndLogin
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
Redirect.prototype.signupAndLogin = function(options, callback) {};

/**
 * @constructor
 * @struct
 * @param {?} client
 * @param {?} options
 */
function Popup(client, options) {}

/**
 * Returns a new instance of the popup handler
 * 
 * \@method buildPopupHandler
 * @return {?}
 */
Popup.prototype.buildPopupHandler = function() {};

/**
 * Initializes the popup window and returns the instance to be used later in order to avoid being blocked by the browser.
 * 
 * \@method preload
 * @param {?} options
 * @return {?}
 */
Popup.prototype.preload = function(options) {};

/**
 * Handles the popup logic for the callback page.
 * 
 * \@method callback
 * @see {\@link parseHash}
 * @param {?} options
 * @return {void}
 */
Popup.prototype.callback = function(options) {};

/**
 * Shows inside a new window the hosted login page (`/authorize`) in order to start a new authN/authZ transaction and post its result using `postMessage`.
 * 
 * \@method authorize
 * @see {\@link https://auth0.com/docs/api/authentication#authorize-client}
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
Popup.prototype.authorize = function(options, callback) {};

/**
 * Performs authentication with username/email and password with a database connection inside a new window
 * 
 * This method is not compatible with API Auth so if you need to fetch API tokens with audience
 * you should use {\@link authorize} or {\@link login}.
 * 
 * \@method loginWithCredentials
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
Popup.prototype.loginWithCredentials = function(options, callback) {};

/**
 * Verifies the passwordless TOTP and returns the requested token
 * 
 * \@method passwordlessVerify
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
Popup.prototype.passwordlessVerify = function(options, callback) {};

/**
 * Signs up a new user and automatically logs the user in after the signup.
 * 
 * This method is not compatible with API Auth so if you need to fetch API tokens with audience
 * you should use {\@link authorize} or {\@link signupAndAuthorize}.
 * 
 * \@method signupAndLogin
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
Popup.prototype.signupAndLogin = function(options, callback) {};

/**
 * @constructor
 * @struct
 * @param {?} webAuth
 * @param {?} options
 */
function CrossOriginAuthentication(webAuth, options) {}

/**
 * Logs in the user with username and password using the cross origin authentication (/co/authenticate) flow. You can use either `username` or `email` to identify the user, but `username` will take precedence over `email`.
 * This only works when 3rd party cookies are enabled in the browser. After the /co/authenticate call, you'll have to use the {\@link parseHash} function at the `redirectUri` specified in the constructor.
 * 
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
CrossOriginAuthentication.prototype.login = function(options, callback) {};

/**
 * Runs the callback code for the cross origin authentication call. This method is meant to be called by the cross origin authentication callback url.
 * 
 * @return {void}
 */
CrossOriginAuthentication.prototype.callback = function() {};

/** @typedef {?} */
var Auth0Callback;
/**
 * @record
 * @struct
 */
function ManagementOptions() {}
 /** @type {string} */
ManagementOptions.prototype.domain;
 /** @type {string} */
ManagementOptions.prototype.token;
 /** @type {boolean} */
ManagementOptions.prototype._sendTelemetry;
 /** @type {?} */
ManagementOptions.prototype._telemetryInfo;
/**
 * @record
 * @struct
 */
function AuthOptions() {}
 /** @type {string} */
AuthOptions.prototype.domain;
 /** @type {string} */
AuthOptions.prototype.clientID;
 /** @type {string} */
AuthOptions.prototype.responseType;
 /** @type {string} */
AuthOptions.prototype.responseMode;
 /** @type {string} */
AuthOptions.prototype.redirectUri;
 /** @type {string} */
AuthOptions.prototype.scope;
 /** @type {string} */
AuthOptions.prototype.audience;
 /** @type {number} */
AuthOptions.prototype.leeway;
 /** @type {!Array<?>} */
AuthOptions.prototype.plugins;
 /** @type {boolean} */
AuthOptions.prototype._disableDeprecationWarnings;
 /** @type {boolean} */
AuthOptions.prototype._sendTelemetry;
 /** @type {?} */
AuthOptions.prototype._telemetryInfo;
/**
 * @record
 * @struct
 */
function PasswordlessAuthOptions() {}
 /** @type {string} */
PasswordlessAuthOptions.prototype.connection;
 /** @type {string} */
PasswordlessAuthOptions.prototype.verificationCode;
 /** @type {string} */
PasswordlessAuthOptions.prototype.phoneNumber;
 /** @type {string} */
PasswordlessAuthOptions.prototype.email;
/**
 * @record
 * @struct
 */
function Auth0Error() {}
 /** @type {?} */
Auth0Error.prototype.error;
 /** @type {string} */
Auth0Error.prototype.errorDescription;
 /** @type {string} */
Auth0Error.prototype.code;
 /** @type {string} */
Auth0Error.prototype.description;
 /** @type {string} */
Auth0Error.prototype.name;
 /** @type {string} */
Auth0Error.prototype.policy;
 /** @type {?} */
Auth0Error.prototype.original;
 /** @type {number} */
Auth0Error.prototype.statusCode;
 /** @type {string} */
Auth0Error.prototype.statusText;
/**
 * @record
 * @struct
 */
function Auth0DecodedHash() {}
 /** @type {string} */
Auth0DecodedHash.prototype.accessToken;
 /** @type {string} */
Auth0DecodedHash.prototype.idToken;
 /** @type {?} */
Auth0DecodedHash.prototype.idTokenPayload;
 /** @type {string} */
Auth0DecodedHash.prototype.refreshToken;
 /** @type {string} */
Auth0DecodedHash.prototype.state;
 /** @type {number} */
Auth0DecodedHash.prototype.expiresIn;
 /** @type {string} */
Auth0DecodedHash.prototype.tokenType;
/**
 * @record
 * @struct
 */
function Auth0DelegationToken() {}
 /** @type {number} */
Auth0DelegationToken.prototype.expiresIn;
 /** @type {string} */
Auth0DelegationToken.prototype.idToken;
 /** @type {string} */
Auth0DelegationToken.prototype.tokenType;
/**
 * @record
 * @struct
 */
function ChangePasswordOptions() {}
 /** @type {string} */
ChangePasswordOptions.prototype.connection;
 /** @type {string} */
ChangePasswordOptions.prototype.email;
 /** @type {string} */
ChangePasswordOptions.prototype.password;
/**
 * @record
 * @struct
 */
function PasswordlessStartOptions() {}
 /** @type {string} */
PasswordlessStartOptions.prototype.connection;
 /** @type {string} */
PasswordlessStartOptions.prototype.send;
 /** @type {string} */
PasswordlessStartOptions.prototype.phoneNumber;
 /** @type {string} */
PasswordlessStartOptions.prototype.email;
 /** @type {?} */
PasswordlessStartOptions.prototype.authParams;
/**
 * @record
 * @struct
 */
function PasswordlessVerifyOptions() {}
 /** @type {string} */
PasswordlessVerifyOptions.prototype.connection;
 /** @type {string} */
PasswordlessVerifyOptions.prototype.verificationCode;
 /** @type {string} */
PasswordlessVerifyOptions.prototype.phoneNumber;
 /** @type {string} */
PasswordlessVerifyOptions.prototype.email;
 /** @type {string} */
PasswordlessVerifyOptions.prototype.send;
/**
 * @record
 * @struct
 */
function Auth0UserProfile() {}
 /** @type {string} */
Auth0UserProfile.prototype.name;
 /** @type {string} */
Auth0UserProfile.prototype.nickname;
 /** @type {string} */
Auth0UserProfile.prototype.picture;
 /** @type {string} */
Auth0UserProfile.prototype.user_id;
 /** @type {string} */
Auth0UserProfile.prototype.username;
 /** @type {string} */
Auth0UserProfile.prototype.given_name;
 /** @type {string} */
Auth0UserProfile.prototype.family_name;
 /** @type {string} */
Auth0UserProfile.prototype.email;
 /** @type {string} */
Auth0UserProfile.prototype.email_verified;
 /** @type {string} */
Auth0UserProfile.prototype.clientID;
 /** @type {string} */
Auth0UserProfile.prototype.gender;
 /** @type {string} */
Auth0UserProfile.prototype.locale;
 /** @type {!Array<?>} */
Auth0UserProfile.prototype.identities;
 /** @type {string} */
Auth0UserProfile.prototype.created_at;
 /** @type {string} */
Auth0UserProfile.prototype.updated_at;
 /** @type {string} */
Auth0UserProfile.prototype.sub;
 /** @type {?} */
Auth0UserProfile.prototype.user_metadata;
 /** @type {?} */
Auth0UserProfile.prototype.app_metadata;
/**
 * @extends {Auth0UserProfile}
 * @record
 * @struct
 */
function MicrosoftUserProfile() {}
 /** @type {!Array<string>} */
MicrosoftUserProfile.prototype.emails;
/**
 * @extends {Auth0UserProfile}
 * @record
 * @struct
 */
function Office365UserProfile() {}
 /** @type {string} */
Office365UserProfile.prototype.tenantid;
 /** @type {string} */
Office365UserProfile.prototype.upn;
/**
 * @extends {Auth0UserProfile}
 * @record
 * @struct
 */
function AdfsUserProfile() {}
 /** @type {string} */
AdfsUserProfile.prototype.issuer;
/**
 * @record
 * @struct
 */
function Auth0Identity() {}
 /** @type {string} */
Auth0Identity.prototype.connection;
 /** @type {boolean} */
Auth0Identity.prototype.isSocial;
 /** @type {string} */
Auth0Identity.prototype.provider;
 /** @type {string} */
Auth0Identity.prototype.user_id;
/**
 * @record
 * @struct
 */
function LoginOptions() {}
 /** @type {string} */
LoginOptions.prototype.username;
 /** @type {string} */
LoginOptions.prototype.password;
 /** @type {string} */
LoginOptions.prototype.scope;
/**
 * @extends {LoginOptions}
 * @record
 * @struct
 */
function DefaultLoginOptions() {}
 /** @type {string} */
DefaultLoginOptions.prototype.audience;
 /** @type {string} */
DefaultLoginOptions.prototype.realm;
/**
 * @extends {LoginOptions}
 * @record
 * @struct
 */
function DefaultDirectoryLoginOptions() {}
 /** @type {string} */
DefaultDirectoryLoginOptions.prototype.audience;
/**
 * @extends {LoginOptions}
 * @record
 * @struct
 */
function ResourceOwnerLoginOptions() {}
 /** @type {string} */
ResourceOwnerLoginOptions.prototype.connection;
 /** @type {string} */
ResourceOwnerLoginOptions.prototype.device;
/**
 * @record
 * @struct
 */
function CrossOriginLoginOptions() {}
 /** @type {string} */
CrossOriginLoginOptions.prototype.username;
 /** @type {string} */
CrossOriginLoginOptions.prototype.email;
 /** @type {string} */
CrossOriginLoginOptions.prototype.password;
 /** @type {string} */
CrossOriginLoginOptions.prototype.realm;
/**
 * @record
 * @struct
 */
function LogoutOptions() {}
 /** @type {string} */
LogoutOptions.prototype.clientID;
 /** @type {string} */
LogoutOptions.prototype.returnTo;
 /** @type {boolean} */
LogoutOptions.prototype.federated;
/**
 * @record
 * @struct
 */
function DelegationOptions() {}
 /** @type {string} */
DelegationOptions.prototype.client_id;
 /** @type {string} */
DelegationOptions.prototype.grant_type;
 /** @type {string} */
DelegationOptions.prototype.id_token;
 /** @type {string} */
DelegationOptions.prototype.refresh_token;
 /** @type {string} */
DelegationOptions.prototype.target;
 /** @type {string} */
DelegationOptions.prototype.scope;
 /** @type {string} */
DelegationOptions.prototype.api_type;
/**
 * @record
 * @struct
 */
function DbSignUpOptions() {}
 /** @type {string} */
DbSignUpOptions.prototype.email;
 /** @type {string} */
DbSignUpOptions.prototype.password;
 /** @type {string} */
DbSignUpOptions.prototype.connection;
 /** @type {string} */
DbSignUpOptions.prototype.scope;
/**
 * @record
 * @struct
 */
function ParseHashOptions() {}
 /** @type {string} */
ParseHashOptions.prototype.hash;
 /** @type {string} */
ParseHashOptions.prototype.state;
 /** @type {string} */
ParseHashOptions.prototype.nonce;
 /** @type {boolean} */
ParseHashOptions.prototype._idTokenVerification;
/**
 * @record
 * @struct
 */
function RenewAuthOptions() {}
 /** @type {string} */
RenewAuthOptions.prototype.domain;
 /** @type {string} */
RenewAuthOptions.prototype.clientID;
 /** @type {string} */
RenewAuthOptions.prototype.redirectUri;
 /** @type {string} */
RenewAuthOptions.prototype.responseType;
 /** @type {string} */
RenewAuthOptions.prototype.responseMode;
 /** @type {string} */
RenewAuthOptions.prototype.state;
 /** @type {string} */
RenewAuthOptions.prototype.nonce;
 /** @type {string} */
RenewAuthOptions.prototype.scope;
 /** @type {string} */
RenewAuthOptions.prototype.audience;
 /** @type {boolean} */
RenewAuthOptions.prototype.usePostMessage;
 /** @type {string} */
RenewAuthOptions.prototype.postMessageDataType;
/**
 * @record
 * @struct
 */
function AuthorizeOptions() {}
 /** @type {string} */
AuthorizeOptions.prototype.domain;
 /** @type {string} */
AuthorizeOptions.prototype.clientID;
 /** @type {string} */
AuthorizeOptions.prototype.connection;
 /** @type {string} */
AuthorizeOptions.prototype.redirectUri;
 /** @type {string} */
AuthorizeOptions.prototype.responseType;
 /** @type {string} */
AuthorizeOptions.prototype.responseMode;
 /** @type {string} */
AuthorizeOptions.prototype.state;
 /** @type {string} */
AuthorizeOptions.prototype.nonce;
 /** @type {string} */
AuthorizeOptions.prototype.scope;
 /** @type {string} */
AuthorizeOptions.prototype.audience;
