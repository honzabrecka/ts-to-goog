/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/core-decorators/index.d.ts:
/**
 * @record
 * @struct
 */
function ClassDecorator() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ParameterDecorator() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function PropertyDecorator() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function MethodDecorator() {}

/* TODO: CallSignature:  */
/**
 * @extends {MethodDecorator}
 * @extends {PropertyDecorator}
 * @record
 * @struct
 */
function PropertyOrMethodDecorator() {}

/* TODO: CallSignature:  */
/**
 * @extends {MethodDecorator}
 * @record
 * @struct
 */
function Deprecate() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DeprecateOption() {}
 /** @type {string} */
DeprecateOption.prototype.url;
/**
 * @record
 * @struct
 */
function ThrottleOptions() {}
 /** @type {boolean} */
ThrottleOptions.prototype.leading;
 /** @type {boolean} */
ThrottleOptions.prototype.trailing;
/**
 * @record
 * @struct
 */
function Console() {}

/**
 * @param {?=} message
 * @param {...?} optionalParams
 * @return {void}
 */
Console.prototype.log = function(message, optionalParams) {};

/**
 * @param {string=} timerName
 * @return {void}
 */
Console.prototype.time = function(timerName) {};

/**
 * @param {string=} timerName
 * @return {void}
 */
Console.prototype.timeEnd = function(timerName) {};
 /** @type {!Function} */
var autobind;
 /** @type {?} */
var readonly;
 /** @type {?} */
var override;
 /** @type {?} */
var deprecate;
 /** @type {?} */
var deprecated;

/**
 * Creates a new debounced function which will be invoked after wait milliseconds since the time it was invoked. Default timeout is 300 ms.
 * @param {number} wait
 * @return {?}
 */
function debounce(wait) {}

/**
 * Creates a new throttled function which will be invoked in every wait milliseconds. Default timeout is 300 ms.
 * @param {number} wait
 * @param {?=} options
 * @return {?}
 */
function throttle(wait, options) {}
 /** @type {?} */
var suppressWarnings;
 /** @type {?} */
var nonenumerable;
 /** @type {?} */
var nonconfigurable;
 /** @type {?} */
var memoize;

/**
 * Immediately applies the provided function and arguments to the method, allowing you to wrap methods with arbitrary helpers like those provided by lodash.
 * The first argument is the function to apply, all further arguments will be passed to that decorating function.
 * @param {!Function} func
 * @param {...?} args
 * @return {?}
 */
function decorate(func, args) {}
 /** @type {?} */
var lazyInitialize;

/**
 * Mixes in all property descriptors from the provided Plain Old JavaScript Objects (aka POJOs) as arguments.
 * Mixins are applied in the order they are passed, but do not override descriptors already on the class, including those inherited traditionally.
 * @param {...?} mixins
 * @return {?}
 */
function mixin(mixins) {}

/**
 * Mixes in all property descriptors from the provided Plain Old JavaScript Objects (aka POJOs) as arguments.
 * Mixins are applied in the order they are passed, but do not override descriptors already on the class, including those inherited traditionally.
 * @param {...?} mixins
 * @return {?}
 */
function mixins(mixins) {}

/**
 * Uses console.time and console.timeEnd to provide function timings with a unique label whose default prefix is ClassName.method. Supply a first argument to override the prefix:
 * @param {string} label
 * @param {?=} console
 * @return {?}
 */
function time(label, console) {}
