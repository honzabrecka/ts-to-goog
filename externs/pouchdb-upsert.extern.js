/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/pouchdb-upsert/index.d.ts:

/**
 * Perform an upsert (update or insert) operation. Returns a Promise.
 * 
 * Perform an upsert (update or insert) operation. If a callback is not provided, the Promise based version
 * of this function will be called.
 * 
 * @template Model
 * @param {string} docId - the _id of the document.
 * @param {function(?): (boolean|?)} diffFun - function that takes the existing doc as input and returns an updated doc.
 * If this diffFunc returns falsey, then the update won't be performed (as an optimization).
 * If the document does not already exist, then {} will be the input to diffFunc.
 *  / - function that takes the existing doc as input and returns an updated doc.
 * If this diffFunc returns falsey, then the update won't be performed (as an optimization).
 * If the document does not already exist, then {} will be the input to diffFunc.
 * @param {function(!PouchDB.Core.Error, !PouchDB.Core.Response): void=} callback - called with the results after operation is completed.
 * @return {!Promise<!PouchDB.Core.Response>|void}
 */
PouchDB.Database.prototype.upsert = function(docId, diffFun, callback) {};

/**
 * Put a new document with the given docId, if it doesn't already exist. Returns a Promise.
 * 
 * Put a new document with the given docId, if it doesn't already exist.  If a callback is not provided,
 * the Promise based version of this function will be called.
 * 
 * @template Model
 * @param {?} doc - the document to insert. Should contain an _id if docId is not specified
 * If the document already exists, then the Promise will just resolve immediately.
 * @param {function(!PouchDB.Core.Error, !PouchDB.Core.Response): void=} callback - called with the results after operation is completed.
 * If you don't specify a callback, then the Promise version of this function will be invoked and it
 * will return a Promise.
 * @return {!Promise<!PouchDB.Core.Response>|void}
 */
PouchDB.Database.prototype.putIfNotExists = function(doc, callback) {};

/** @typedef {function(?): (boolean|?)} */
PouchDB.UpsertDiffCallback;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "pouchdb-upsert"
/** @const */
tsickle_declare_module.pouchdb_upsert = {};
 /** @type {string} */
tsickle_declare_module.pouchdb_upsert.plugin;

/* TODO: ExportAssignment in tsickle_declare_module.pouchdb_upsert */
