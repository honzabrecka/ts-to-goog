/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cryptojs/index.d.ts:
 /** @type {!CryptoJS.CryptoJSStatic} */
var CryptoJS;
/** @const */
CryptoJS.lib = {};

/** @typedef {(!ArrayBuffer|!Int8Array|!Int16Array|!Int32Array|!Uint8Array|!Uint16Array|!Uint32Array)} */
CryptoJS.lib.SomeArray;
/**
 * @record
 * @struct
 */
CryptoJS.lib.Base = function() {};

/**
 * @param {!Object} overrides
 * @return {!Object}
 */
CryptoJS.lib.Base.prototype.extend = function(overrides) {};

/**
 * @param {...?} args
 * @return {void}
 */
CryptoJS.lib.Base.prototype.init = function(args) {};

/**
 * @param {...?} args
 * @return {!CryptoJS.lib.Base}
 */
CryptoJS.lib.Base.prototype.create = function(args) {};

/**
 * @param {!Object} properties
 * @return {void}
 */
CryptoJS.lib.Base.prototype.mixIn = function(properties) {};

/**
 * @return {!CryptoJS.lib.Base}
 */
CryptoJS.lib.Base.prototype.clone = function() {};
/**
 * @extends {CryptoJS.lib.Base}
 * @record
 * @struct
 */
CryptoJS.lib.WordArray = function() {};
 /** @type {!Array<number>} */
CryptoJS.lib.WordArray.prototype.words;
 /** @type {number} */
CryptoJS.lib.WordArray.prototype.sigBytes;

/**
 * @param {(!ArrayBuffer|!Int8Array|!Int16Array|!Int32Array|!Uint8Array|!Uint16Array|!Uint32Array)|!Array<number>=} typedArray_or_words
 * @param {number=} sigBytes
 * @return {void}
 */
CryptoJS.lib.WordArray.prototype.init = function(typedArray_or_words, sigBytes) {};

/**
 * @param {(!ArrayBuffer|!Int8Array|!Int16Array|!Int32Array|!Uint8Array|!Uint16Array|!Uint32Array)|!Array<number>=} typedArray_or_words
 * @param {number=} sigBytes
 * @return {!CryptoJS.lib.WordArray}
 */
CryptoJS.lib.WordArray.prototype.create = function(typedArray_or_words, sigBytes) {};

/**
 * @param {!CryptoJS.enc.IEncoder=} encoder
 * @return {string}
 */
CryptoJS.lib.WordArray.prototype.toString = function(encoder) {};

/**
 * @param {!CryptoJS.lib.WordArray} wordArray
 * @return {!CryptoJS.lib.WordArray}
 */
CryptoJS.lib.WordArray.prototype.concat = function(wordArray) {};

/**
 * @return {void}
 */
CryptoJS.lib.WordArray.prototype.clamp = function() {};

/**
 * @return {!CryptoJS.lib.WordArray}
 */
CryptoJS.lib.WordArray.prototype.clone = function() {};

/**
 * @param {number} nBytes
 * @return {!CryptoJS.lib.WordArray}
 */
CryptoJS.lib.WordArray.prototype.random = function(nBytes) {};
/**
 * @extends {CryptoJS.lib.Base}
 * @record
 * @struct
 */
CryptoJS.lib.BufferedBlockAlgorithm = function() {};

/**
 * @return {void}
 */
CryptoJS.lib.BufferedBlockAlgorithm.prototype.reset = function() {};

/**
 * @return {!CryptoJS.lib.BufferedBlockAlgorithm}
 */
CryptoJS.lib.BufferedBlockAlgorithm.prototype.clone = function() {};
/**
 * @extends {CryptoJS.lib.BufferedBlockAlgorithm}
 * @record
 * @struct
 */
CryptoJS.lib.IHasher = function() {};
 /** @type {C} */
CryptoJS.lib.IHasher.prototype.cfg;
 /** @type {number} */
CryptoJS.lib.IHasher.prototype.blockSize;

/**
 * @param {C=} cfg
 * @return {void}
 */
CryptoJS.lib.IHasher.prototype.init = function(cfg) {};

/**
 * @param {C=} cfg
 * @return {!CryptoJS.lib.IHasher}
 */
CryptoJS.lib.IHasher.prototype.create = function(cfg) {};

/**
 * @param {string|!CryptoJS.lib.WordArray} messageUpdate
 * @return {!CryptoJS.lib.Hasher}
 */
CryptoJS.lib.IHasher.prototype.update = function(messageUpdate) {};

/**
 * @param {string|!CryptoJS.lib.WordArray=} messageUpdate
 * @return {!CryptoJS.lib.WordArray}
 */
CryptoJS.lib.IHasher.prototype.finalize = function(messageUpdate) {};

/**
 * @param {!CryptoJS.lib.Hasher} hasher
 * @return {!CryptoJS.lib.IHasherHelper<C>}
 */
CryptoJS.lib.IHasher.prototype._createHelper = function(hasher) {};

/**
 * @param {!CryptoJS.lib.Hasher} hasher
 * @return {!CryptoJS.lib.IHasherHmacHelper}
 */
CryptoJS.lib.IHasher.prototype._createHmacHelper = function(hasher) {};

/**
 * @return {!CryptoJS.lib.IHasher}
 */
CryptoJS.lib.IHasher.prototype.clone = function() {};
/**
 * @extends {CryptoJS.lib.IHasher}
 * @record
 * @struct
 */
CryptoJS.lib.Hasher = function() {};
/**
 * @record
 * @struct
 */
CryptoJS.lib.IHasherHelper = function() {};

/* TODO: CallSignature: CryptoJS.lib */

/* TODO: CallSignature: CryptoJS.lib */
/**
 * @extends {CryptoJS.lib.IHasherHelper}
 * @record
 * @struct
 */
CryptoJS.lib.HasherHelper = function() {};
/**
 * @record
 * @struct
 */
CryptoJS.lib.IHasherHmacHelper = function() {};

/* TODO: CallSignature: CryptoJS.lib */

/* TODO: CallSignature: CryptoJS.lib */

/* TODO: CallSignature: CryptoJS.lib */

/* TODO: CallSignature: CryptoJS.lib */
/**
 * @extends {CryptoJS.lib.BufferedBlockAlgorithm}
 * @record
 * @struct
 */
CryptoJS.lib.ICipher = function() {};
 /** @type {C} */
CryptoJS.lib.ICipher.prototype.cfg;
 /** @type {number} */
CryptoJS.lib.ICipher.prototype.keySize;
 /** @type {number} */
CryptoJS.lib.ICipher.prototype.ivSize;

/**
 * @param {!CryptoJS.lib.WordArray} key
 * @param {C=} cfg
 * @return {!CryptoJS.lib.ICipher}
 */
CryptoJS.lib.ICipher.prototype.createEncryptor = function(key, cfg) {};

/**
 * @param {!CryptoJS.lib.WordArray} key
 * @param {C=} cfg
 * @return {!CryptoJS.lib.ICipher}
 */
CryptoJS.lib.ICipher.prototype.createDecryptor = function(key, cfg) {};

/**
 * @param {number=} xformMode
 * @param {!CryptoJS.lib.WordArray=} key
 * @param {C=} cfg
 * @return {!CryptoJS.lib.ICipher}
 */
CryptoJS.lib.ICipher.prototype.create = function(xformMode, key, cfg) {};

/**
 * @param {number=} xformMode
 * @param {!CryptoJS.lib.WordArray=} key
 * @param {C=} cfg
 * @return {void}
 */
CryptoJS.lib.ICipher.prototype.init = function(xformMode, key, cfg) {};

/**
 * @param {string|!CryptoJS.lib.WordArray} dataUpdate
 * @return {!CryptoJS.lib.WordArray}
 */
CryptoJS.lib.ICipher.prototype.process = function(dataUpdate) {};

/**
 * @param {string|!CryptoJS.lib.WordArray=} dataUpdate
 * @return {!CryptoJS.lib.WordArray}
 */
CryptoJS.lib.ICipher.prototype.finalize = function(dataUpdate) {};

/**
 * @param {!CryptoJS.lib.Cipher} cipher
 * @return {!CryptoJS.lib.ICipherHelper<C>}
 */
CryptoJS.lib.ICipher.prototype._createHelper = function(cipher) {};

/**
 * @return {!CryptoJS.lib.ICipher}
 */
CryptoJS.lib.ICipher.prototype.clone = function() {};
/**
 * @extends {CryptoJS.lib.ICipher}
 * @record
 * @struct
 */
CryptoJS.lib.Cipher = function() {};
/**
 * @extends {CryptoJS.lib.ICipher}
 * @record
 * @struct
 */
CryptoJS.lib.IStreamCipher = function() {};
 /** @type {number} */
CryptoJS.lib.IStreamCipher.prototype.drop;
 /** @type {number} */
CryptoJS.lib.IStreamCipher.prototype.blockSize;

/**
 * @param {!CryptoJS.lib.WordArray} key
 * @param {C=} cfg
 * @return {!CryptoJS.lib.IStreamCipher}
 */
CryptoJS.lib.IStreamCipher.prototype.createEncryptor = function(key, cfg) {};

/**
 * @param {!CryptoJS.lib.WordArray} key
 * @param {C=} cfg
 * @return {!CryptoJS.lib.IStreamCipher}
 */
CryptoJS.lib.IStreamCipher.prototype.createDecryptor = function(key, cfg) {};

/**
 * @param {number=} xformMode
 * @param {!CryptoJS.lib.WordArray=} key
 * @param {C=} cfg
 * @return {!CryptoJS.lib.IStreamCipher}
 */
CryptoJS.lib.IStreamCipher.prototype.create = function(xformMode, key, cfg) {};
/**
 * @extends {CryptoJS.lib.IStreamCipher}
 * @record
 * @struct
 */
CryptoJS.lib.StreamCipher = function() {};
/**
 * @extends {CryptoJS.lib.Base}
 * @record
 * @struct
 */
CryptoJS.lib.BlockCipherMode = function() {};

/**
 * @param {!CryptoJS.lib.Cipher} cipher
 * @param {!Array<number>} iv
 * @return {!CryptoJS.mode.IBlockCipherEncryptor}
 */
CryptoJS.lib.BlockCipherMode.prototype.createEncryptor = function(cipher, iv) {};

/**
 * @param {!CryptoJS.lib.Cipher} cipher
 * @param {!Array<number>} iv
 * @return {!CryptoJS.mode.IBlockCipherDecryptor}
 */
CryptoJS.lib.BlockCipherMode.prototype.createDecryptor = function(cipher, iv) {};

/**
 * @param {!CryptoJS.lib.Cipher=} cipher
 * @param {!Array<number>=} iv
 * @return {void}
 */
CryptoJS.lib.BlockCipherMode.prototype.init = function(cipher, iv) {};

/**
 * @param {!CryptoJS.lib.Cipher=} cipher
 * @param {!Array<number>=} iv
 * @return {!CryptoJS.lib.BlockCipherMode}
 */
CryptoJS.lib.BlockCipherMode.prototype.create = function(cipher, iv) {};
/**
 * @extends {CryptoJS.lib.IStreamCipher}
 * @record
 * @struct
 */
CryptoJS.lib.BlockCipher = function() {};
/**
 * @record
 * @struct
 */
CryptoJS.lib.IBlockCipherCfg = function() {};
 /** @type {!CryptoJS.lib.WordArray} */
CryptoJS.lib.IBlockCipherCfg.prototype.iv;
 /** @type {!CryptoJS.mode.IBlockCipherModeImpl} */
CryptoJS.lib.IBlockCipherCfg.prototype.mode;
 /** @type {!CryptoJS.pad.IPaddingImpl} */
CryptoJS.lib.IBlockCipherCfg.prototype.padding;
/**
 * @record
 * @struct
 */
CryptoJS.lib.CipherParamsData = function() {};
 /** @type {!CryptoJS.lib.WordArray} */
CryptoJS.lib.CipherParamsData.prototype.ciphertext;
 /** @type {!CryptoJS.lib.WordArray} */
CryptoJS.lib.CipherParamsData.prototype.key;
 /** @type {!CryptoJS.lib.WordArray} */
CryptoJS.lib.CipherParamsData.prototype.iv;
 /** @type {!CryptoJS.lib.WordArray} */
CryptoJS.lib.CipherParamsData.prototype.salt;
 /** @type {!CryptoJS.lib.Cipher} */
CryptoJS.lib.CipherParamsData.prototype.algorithm;
 /** @type {!CryptoJS.mode.IBlockCipherModeImpl} */
CryptoJS.lib.CipherParamsData.prototype.mode;
 /** @type {!CryptoJS.pad.IPaddingImpl} */
CryptoJS.lib.CipherParamsData.prototype.padding;
 /** @type {number} */
CryptoJS.lib.CipherParamsData.prototype.blockSize;
 /** @type {!CryptoJS.format.IFormatter} */
CryptoJS.lib.CipherParamsData.prototype.formatter;
/**
 * @extends {CryptoJS.lib.Base}
 * @extends {CryptoJS.lib.CipherParamsData}
 * @record
 * @struct
 */
CryptoJS.lib.CipherParams = function() {};

/**
 * @param {!CryptoJS.lib.CipherParamsData=} cipherParams
 * @return {void}
 */
CryptoJS.lib.CipherParams.prototype.init = function(cipherParams) {};

/**
 * @param {!CryptoJS.lib.CipherParamsData=} cipherParams
 * @return {!CryptoJS.lib.CipherParams}
 */
CryptoJS.lib.CipherParams.prototype.create = function(cipherParams) {};

/**
 * @param {!CryptoJS.format.IFormatter=} formatter
 * @return {string}
 */
CryptoJS.lib.CipherParams.prototype.toString = function(formatter) {};
/**
 * @extends {CryptoJS.lib.Base}
 * @record
 * @struct
 */
CryptoJS.lib.ISerializableCipher = function() {};
 /** @type {C} */
CryptoJS.lib.ISerializableCipher.prototype.cfg;

/**
 * @param {!CryptoJS.lib.Cipher} cipher
 * @param {!CryptoJS.lib.WordArray|string} message
 * @param {!CryptoJS.lib.WordArray} key
 * @param {C=} cfg
 * @return {!CryptoJS.lib.CipherParams}
 */
CryptoJS.lib.ISerializableCipher.prototype.encrypt = function(cipher, message, key, cfg) {};

/**
 * @param {!CryptoJS.lib.Cipher} cipher
 * @param {!CryptoJS.lib.CipherParamsData|string} ciphertext
 * @param {!CryptoJS.lib.WordArray} key
 * @param {C=} cfg
 * @return {!CryptoJS.lib.WordArray}
 */
CryptoJS.lib.ISerializableCipher.prototype.decrypt = function(cipher, ciphertext, key, cfg) {};
/**
 * @extends {CryptoJS.lib.ISerializableCipher}
 * @record
 * @struct
 */
CryptoJS.lib.SerializableCipher = function() {};
/**
 * @record
 * @struct
 */
CryptoJS.lib.ISerializableCipherCfg = function() {};
 /** @type {!CryptoJS.format.IFormatter} */
CryptoJS.lib.ISerializableCipherCfg.prototype.format;
 /** @type {!CryptoJS.lib.WordArray} */
CryptoJS.lib.ISerializableCipherCfg.prototype.iv;
 /** @type {!CryptoJS.mode.IBlockCipherModeImpl} */
CryptoJS.lib.ISerializableCipherCfg.prototype.mode;
 /** @type {!CryptoJS.pad.IPaddingImpl} */
CryptoJS.lib.ISerializableCipherCfg.prototype.padding;
/**
 * @extends {CryptoJS.lib.Base}
 * @record
 * @struct
 */
CryptoJS.lib.IPasswordBasedCipher = function() {};
 /** @type {C} */
CryptoJS.lib.IPasswordBasedCipher.prototype.cfg;

/**
 * @param {!CryptoJS.lib.Cipher} cipher
 * @param {!CryptoJS.lib.WordArray|string} message
 * @param {string} password
 * @param {C=} cfg
 * @return {!CryptoJS.lib.CipherParams}
 */
CryptoJS.lib.IPasswordBasedCipher.prototype.encrypt = function(cipher, message, password, cfg) {};

/**
 * @param {!CryptoJS.lib.Cipher} cipher
 * @param {!CryptoJS.lib.CipherParamsData|string} ciphertext
 * @param {string} password
 * @param {C=} cfg
 * @return {!CryptoJS.lib.WordArray}
 */
CryptoJS.lib.IPasswordBasedCipher.prototype.decrypt = function(cipher, ciphertext, password, cfg) {};
/**
 * @extends {CryptoJS.lib.IPasswordBasedCipher}
 * @record
 * @struct
 */
CryptoJS.lib.PasswordBasedCipher = function() {};
/**
 * @extends {CryptoJS.lib.ISerializableCipherCfg}
 * @record
 * @struct
 */
CryptoJS.lib.IPasswordBasedCipherCfg = function() {};
 /** @type {!CryptoJS.kdf.IKdfImpl} */
CryptoJS.lib.IPasswordBasedCipherCfg.prototype.kdf;
 /** @type {!CryptoJS.mode.IBlockCipherModeImpl} */
CryptoJS.lib.IPasswordBasedCipherCfg.prototype.mode;
 /** @type {!CryptoJS.pad.IPaddingImpl} */
CryptoJS.lib.IPasswordBasedCipherCfg.prototype.padding;
/**
 * @record
 * @struct
 */
CryptoJS.lib.ICipherHelper = function() {};

/**
 * @param {string|!CryptoJS.lib.WordArray} message
 * @param {string|!CryptoJS.lib.WordArray} password_or_key
 * @param {C=} cfg
 * @return {!CryptoJS.lib.CipherParams}
 */
CryptoJS.lib.ICipherHelper.prototype.encrypt = function(message, password_or_key, cfg) {};

/**
 * @param {string|!CryptoJS.lib.CipherParamsData} ciphertext
 * @param {string|!CryptoJS.lib.WordArray} password_or_key
 * @param {C=} cfg
 * @return {!CryptoJS.lib.WordArray}
 */
CryptoJS.lib.ICipherHelper.prototype.decrypt = function(ciphertext, password_or_key, cfg) {};
/**
 * @extends {CryptoJS.lib.ICipherHelper}
 * @record
 * @struct
 */
CryptoJS.lib.CipherHelper = function() {};
/**
 * @record
 * @struct
 */
CryptoJS.lib.LibStatic = function() {};
 /** @type {!CryptoJS.lib.Base} */
CryptoJS.lib.LibStatic.prototype.Base;
 /** @type {!CryptoJS.lib.WordArray} */
CryptoJS.lib.LibStatic.prototype.WordArray;
 /** @type {!CryptoJS.lib.CipherParams} */
CryptoJS.lib.LibStatic.prototype.CipherParams;
 /** @type {!CryptoJS.lib.SerializableCipher} */
CryptoJS.lib.LibStatic.prototype.SerializableCipher;
 /** @type {!CryptoJS.lib.PasswordBasedCipher} */
CryptoJS.lib.LibStatic.prototype.PasswordBasedCipher;
/** @const */
CryptoJS.enc = {};
/**
 * @record
 * @struct
 */
CryptoJS.enc.IEncoder = function() {};

/**
 * @param {!CryptoJS.lib.WordArray} wordArray
 * @return {string}
 */
CryptoJS.enc.IEncoder.prototype.stringify = function(wordArray) {};
/**
 * @record
 * @struct
 */
CryptoJS.enc.IDecoder = function() {};

/**
 * @param {string} s
 * @return {!CryptoJS.lib.WordArray}
 */
CryptoJS.enc.IDecoder.prototype.parse = function(s) {};
/**
 * @extends {CryptoJS.enc.IEncoder}
 * @extends {CryptoJS.enc.IDecoder}
 * @record
 * @struct
 */
CryptoJS.enc.ICoder = function() {};
/**
 * @record
 * @struct
 */
CryptoJS.enc.EncStatic = function() {};
 /** @type {!CryptoJS.enc.ICoder} */
CryptoJS.enc.EncStatic.prototype.Hex;
 /** @type {!CryptoJS.enc.ICoder} */
CryptoJS.enc.EncStatic.prototype.Latin1;
 /** @type {!CryptoJS.enc.ICoder} */
CryptoJS.enc.EncStatic.prototype.Utf8;
 /** @type {!CryptoJS.enc.ICoder} */
CryptoJS.enc.EncStatic.prototype.Base64;
 /** @type {!CryptoJS.enc.ICoder} */
CryptoJS.enc.EncStatic.prototype.Utf16;
 /** @type {!CryptoJS.enc.ICoder} */
CryptoJS.enc.EncStatic.prototype.Utf16BE;
 /** @type {!CryptoJS.enc.ICoder} */
CryptoJS.enc.EncStatic.prototype.Utf16LE;
/** @const */
CryptoJS.kdf = {};
/**
 * @record
 * @struct
 */
CryptoJS.kdf.KdfStatic = function() {};
 /** @type {!CryptoJS.kdf.IKdfImpl} */
CryptoJS.kdf.KdfStatic.prototype.OpenSSL;
/**
 * @record
 * @struct
 */
CryptoJS.kdf.IKdfImpl = function() {};

/**
 * @param {string} password
 * @param {number} keySize
 * @param {number} ivSize
 * @param {string|!CryptoJS.lib.WordArray=} salt
 * @return {!CryptoJS.lib.CipherParams}
 */
CryptoJS.kdf.IKdfImpl.prototype.execute = function(password, keySize, ivSize, salt) {};
/** @const */
CryptoJS.format = {};
/**
 * @record
 * @struct
 */
CryptoJS.format.FormatStatic = function() {};
 /** @type {!CryptoJS.format.IFormatter} */
CryptoJS.format.FormatStatic.prototype.OpenSSL;
 /** @type {!CryptoJS.format.IFormatter} */
CryptoJS.format.FormatStatic.prototype.Hex;
/**
 * @record
 * @struct
 */
CryptoJS.format.IFormatter = function() {};

/**
 * @param {!CryptoJS.lib.CipherParamsData} cipherParams
 * @return {string}
 */
CryptoJS.format.IFormatter.prototype.stringify = function(cipherParams) {};

/**
 * @param {string} s
 * @return {!CryptoJS.lib.CipherParams}
 */
CryptoJS.format.IFormatter.prototype.parse = function(s) {};
/** @const */
CryptoJS.algo = {};
/**
 * @record
 * @struct
 */
CryptoJS.algo.AlgoStatic = function() {};
 /** @type {!CryptoJS.algo.AES} */
CryptoJS.algo.AlgoStatic.prototype.AES;
 /** @type {!CryptoJS.algo.DES} */
CryptoJS.algo.AlgoStatic.prototype.DES;
 /** @type {!CryptoJS.algo.TripleDES} */
CryptoJS.algo.AlgoStatic.prototype.TripleDES;
 /** @type {!CryptoJS.algo.RabbitLegacy} */
CryptoJS.algo.AlgoStatic.prototype.RabbitLegacy;
 /** @type {!CryptoJS.algo.Rabbit} */
CryptoJS.algo.AlgoStatic.prototype.Rabbit;
 /** @type {!CryptoJS.algo.RC4} */
CryptoJS.algo.AlgoStatic.prototype.RC4;
 /** @type {!CryptoJS.algo.MD5} */
CryptoJS.algo.AlgoStatic.prototype.MD5;
 /** @type {!CryptoJS.algo.RIPEMD160} */
CryptoJS.algo.AlgoStatic.prototype.RIPEMD160;
 /** @type {!CryptoJS.algo.SHA1} */
CryptoJS.algo.AlgoStatic.prototype.SHA1;
 /** @type {!CryptoJS.algo.SHA256} */
CryptoJS.algo.AlgoStatic.prototype.SHA256;
 /** @type {!CryptoJS.algo.SHA224} */
CryptoJS.algo.AlgoStatic.prototype.SHA224;
 /** @type {!CryptoJS.algo.SHA384} */
CryptoJS.algo.AlgoStatic.prototype.SHA384;
 /** @type {!CryptoJS.algo.SHA512} */
CryptoJS.algo.AlgoStatic.prototype.SHA512;
 /** @type {!CryptoJS.algo.SHA3} */
CryptoJS.algo.AlgoStatic.prototype.SHA3;
 /** @type {!CryptoJS.algo.HMAC} */
CryptoJS.algo.AlgoStatic.prototype.HMAC;
 /** @type {!CryptoJS.algo.EvpKDF} */
CryptoJS.algo.AlgoStatic.prototype.EvpKDF;
 /** @type {!CryptoJS.algo.PBKDF2} */
CryptoJS.algo.AlgoStatic.prototype.PBKDF2;
 /** @type {!CryptoJS.algo.RC4Drop} */
CryptoJS.algo.AlgoStatic.prototype.RC4Drop;
/**
 * @extends {CryptoJS.lib.BlockCipher}
 * @record
 * @struct
 */
CryptoJS.algo.IBlockCipherImpl = function() {};

/**
 * @param {!Array<number>} M
 * @param {number} offset
 * @return {void}
 */
CryptoJS.algo.IBlockCipherImpl.prototype.encryptBlock = function(M, offset) {};

/**
 * @param {!Array<number>} M
 * @param {number} offset
 * @return {void}
 */
CryptoJS.algo.IBlockCipherImpl.prototype.decryptBlock = function(M, offset) {};

/**
 * @param {!CryptoJS.lib.WordArray} key
 * @param {!CryptoJS.lib.CipherParamsData=} cfg
 * @return {!CryptoJS.algo.IBlockCipherImpl}
 */
CryptoJS.algo.IBlockCipherImpl.prototype.createEncryptor = function(key, cfg) {};

/**
 * @param {!CryptoJS.lib.WordArray} key
 * @param {!CryptoJS.lib.CipherParamsData=} cfg
 * @return {!CryptoJS.algo.IBlockCipherImpl}
 */
CryptoJS.algo.IBlockCipherImpl.prototype.createDecryptor = function(key, cfg) {};

/**
 * @param {number=} xformMode
 * @param {!CryptoJS.lib.WordArray=} key
 * @param {!CryptoJS.lib.IBlockCipherCfg=} cfg
 * @return {!CryptoJS.algo.IBlockCipherImpl}
 */
CryptoJS.algo.IBlockCipherImpl.prototype.create = function(xformMode, key, cfg) {};
/**
 * @extends {CryptoJS.algo.IBlockCipherImpl}
 * @record
 * @struct
 */
CryptoJS.algo.AES = function() {};
/**
 * @extends {CryptoJS.algo.IBlockCipherImpl}
 * @record
 * @struct
 */
CryptoJS.algo.DES = function() {};
/**
 * @extends {CryptoJS.algo.IBlockCipherImpl}
 * @record
 * @struct
 */
CryptoJS.algo.TripleDES = function() {};
/**
 * @extends {CryptoJS.lib.StreamCipher}
 * @record
 * @struct
 */
CryptoJS.algo.RabbitLegacy = function() {};
/**
 * @extends {CryptoJS.lib.StreamCipher}
 * @record
 * @struct
 */
CryptoJS.algo.Rabbit = function() {};
/**
 * @extends {CryptoJS.lib.StreamCipher}
 * @record
 * @struct
 */
CryptoJS.algo.RC4 = function() {};
/**
 * @extends {CryptoJS.lib.Hasher}
 * @record
 * @struct
 */
CryptoJS.algo.MD5 = function() {};
/**
 * @extends {CryptoJS.lib.Hasher}
 * @record
 * @struct
 */
CryptoJS.algo.RIPEMD160 = function() {};
/**
 * @extends {CryptoJS.lib.Hasher}
 * @record
 * @struct
 */
CryptoJS.algo.SHA1 = function() {};
/**
 * @extends {CryptoJS.lib.Hasher}
 * @record
 * @struct
 */
CryptoJS.algo.SHA256 = function() {};
/**
 * @extends {CryptoJS.lib.Hasher}
 * @record
 * @struct
 */
CryptoJS.algo.SHA224 = function() {};
/**
 * @extends {CryptoJS.lib.Hasher}
 * @record
 * @struct
 */
CryptoJS.algo.SHA384 = function() {};
/**
 * @extends {CryptoJS.lib.Hasher}
 * @record
 * @struct
 */
CryptoJS.algo.SHA512 = function() {};
/**
 * @extends {CryptoJS.lib.IHasher}
 * @record
 * @struct
 */
CryptoJS.algo.SHA3 = function() {};
/**
 * @record
 * @struct
 */
CryptoJS.algo.ISHA3Cfg = function() {};
 /** @type {number} */
CryptoJS.algo.ISHA3Cfg.prototype.outputLength;
/**
 * @extends {CryptoJS.lib.Base}
 * @record
 * @struct
 */
CryptoJS.algo.HMAC = function() {};

/**
 * @param {!CryptoJS.lib.Hasher=} hasher
 * @param {string|!CryptoJS.lib.WordArray=} key
 * @return {void}
 */
CryptoJS.algo.HMAC.prototype.init = function(hasher, key) {};

/**
 * @param {!CryptoJS.lib.Hasher=} hasher
 * @param {string|!CryptoJS.lib.WordArray=} key
 * @return {!CryptoJS.algo.HMAC}
 */
CryptoJS.algo.HMAC.prototype.create = function(hasher, key) {};

/**
 * @param {string|!CryptoJS.lib.WordArray} messageUpdate
 * @return {!CryptoJS.algo.HMAC}
 */
CryptoJS.algo.HMAC.prototype.update = function(messageUpdate) {};

/**
 * @param {string|!CryptoJS.lib.WordArray=} messageUpdate
 * @return {!CryptoJS.lib.WordArray}
 */
CryptoJS.algo.HMAC.prototype.finalize = function(messageUpdate) {};
/**
 * @extends {CryptoJS.lib.Base}
 * @record
 * @struct
 */
CryptoJS.algo.EvpKDF = function() {};
 /** @type {!CryptoJS.algo.IEvpKDFCfg} */
CryptoJS.algo.EvpKDF.prototype.cfg;

/**
 * @param {!CryptoJS.algo.IEvpKDFCfg=} cfg
 * @return {void}
 */
CryptoJS.algo.EvpKDF.prototype.init = function(cfg) {};

/**
 * @param {!CryptoJS.algo.IEvpKDFCfg=} cfg
 * @return {!CryptoJS.algo.EvpKDF}
 */
CryptoJS.algo.EvpKDF.prototype.create = function(cfg) {};

/**
 * @param {string|!CryptoJS.lib.WordArray} password
 * @param {string|!CryptoJS.lib.WordArray} salt
 * @return {!CryptoJS.lib.WordArray}
 */
CryptoJS.algo.EvpKDF.prototype.compute = function(password, salt) {};
/**
 * @record
 * @struct
 */
CryptoJS.algo.IEvpKDFCfg = function() {};
 /** @type {number} */
CryptoJS.algo.IEvpKDFCfg.prototype.keySize;
 /** @type {!CryptoJS.lib.Hasher} */
CryptoJS.algo.IEvpKDFCfg.prototype.hasher;
 /** @type {number} */
CryptoJS.algo.IEvpKDFCfg.prototype.iterations;
/**
 * @record
 * @struct
 */
CryptoJS.algo.IEvpKDFHelper = function() {};

/* TODO: CallSignature: CryptoJS.algo */

/* TODO: CallSignature: CryptoJS.algo */

/* TODO: CallSignature: CryptoJS.algo */

/* TODO: CallSignature: CryptoJS.algo */
/**
 * @extends {CryptoJS.algo.EvpKDF}
 * @record
 * @struct
 */
CryptoJS.algo.PBKDF2 = function() {};
/**
 * @extends {CryptoJS.algo.RC4}
 * @record
 * @struct
 */
CryptoJS.algo.RC4Drop = function() {};
/** @const */
CryptoJS.mode = {};
/**
 * @record
 * @struct
 */
CryptoJS.mode.ModeStatic = function() {};
 /** @type {!CryptoJS.mode.CBC} */
CryptoJS.mode.ModeStatic.prototype.CBC;
 /** @type {!CryptoJS.mode.CFB} */
CryptoJS.mode.ModeStatic.prototype.CFB;
 /** @type {!CryptoJS.mode.CTR} */
CryptoJS.mode.ModeStatic.prototype.CTR;
 /** @type {!CryptoJS.mode.CTRGladman} */
CryptoJS.mode.ModeStatic.prototype.CTRGladman;
 /** @type {!CryptoJS.mode.ECB} */
CryptoJS.mode.ModeStatic.prototype.ECB;
 /** @type {!CryptoJS.mode.OFB} */
CryptoJS.mode.ModeStatic.prototype.OFB;
/**
 * @extends {CryptoJS.lib.BlockCipherMode}
 * @record
 * @struct
 */
CryptoJS.mode.IBlockCipherEncryptor = function() {};

/**
 * @param {!Array<number>} words
 * @param {number} offset
 * @return {void}
 */
CryptoJS.mode.IBlockCipherEncryptor.prototype.processBlock = function(words, offset) {};
/**
 * @extends {CryptoJS.lib.BlockCipherMode}
 * @record
 * @struct
 */
CryptoJS.mode.IBlockCipherDecryptor = function() {};

/**
 * @param {!Array<number>} words
 * @param {number} offset
 * @return {void}
 */
CryptoJS.mode.IBlockCipherDecryptor.prototype.processBlock = function(words, offset) {};
/**
 * @extends {CryptoJS.lib.BlockCipherMode}
 * @record
 * @struct
 */
CryptoJS.mode.IBlockCipherModeImpl = function() {};
 /** @type {!CryptoJS.mode.IBlockCipherEncryptor} */
CryptoJS.mode.IBlockCipherModeImpl.prototype.Encryptor;
 /** @type {!CryptoJS.mode.IBlockCipherDecryptor} */
CryptoJS.mode.IBlockCipherModeImpl.prototype.Decryptor;
/**
 * @extends {CryptoJS.mode.IBlockCipherModeImpl}
 * @record
 * @struct
 */
CryptoJS.mode.CBC = function() {};
/**
 * @extends {CryptoJS.mode.IBlockCipherModeImpl}
 * @record
 * @struct
 */
CryptoJS.mode.CFB = function() {};
/**
 * @extends {CryptoJS.mode.IBlockCipherModeImpl}
 * @record
 * @struct
 */
CryptoJS.mode.CTR = function() {};
/**
 * @extends {CryptoJS.mode.IBlockCipherModeImpl}
 * @record
 * @struct
 */
CryptoJS.mode.CTRGladman = function() {};
/**
 * @extends {CryptoJS.mode.IBlockCipherModeImpl}
 * @record
 * @struct
 */
CryptoJS.mode.ECB = function() {};
/**
 * @extends {CryptoJS.mode.IBlockCipherModeImpl}
 * @record
 * @struct
 */
CryptoJS.mode.OFB = function() {};
/** @const */
CryptoJS.pad = {};
/**
 * @record
 * @struct
 */
CryptoJS.pad.PadStatic = function() {};
 /** @type {!CryptoJS.pad.Pkcs7} */
CryptoJS.pad.PadStatic.prototype.Pkcs7;
 /** @type {!CryptoJS.pad.AnsiX923} */
CryptoJS.pad.PadStatic.prototype.AnsiX923;
 /** @type {!CryptoJS.pad.Iso10126} */
CryptoJS.pad.PadStatic.prototype.Iso10126;
 /** @type {!CryptoJS.pad.Iso97971} */
CryptoJS.pad.PadStatic.prototype.Iso97971;
 /** @type {!CryptoJS.pad.ZeroPadding} */
CryptoJS.pad.PadStatic.prototype.ZeroPadding;
 /** @type {!CryptoJS.pad.NoPadding} */
CryptoJS.pad.PadStatic.prototype.NoPadding;
/**
 * @record
 * @struct
 */
CryptoJS.pad.IPaddingImpl = function() {};

/**
 * @param {!CryptoJS.lib.WordArray} data
 * @param {number} blockSize
 * @return {void}
 */
CryptoJS.pad.IPaddingImpl.prototype.pad = function(data, blockSize) {};

/**
 * @param {!CryptoJS.lib.WordArray} data
 * @return {void}
 */
CryptoJS.pad.IPaddingImpl.prototype.unpad = function(data) {};
/**
 * @extends {CryptoJS.pad.IPaddingImpl}
 * @record
 * @struct
 */
CryptoJS.pad.Pkcs7 = function() {};
/**
 * @extends {CryptoJS.pad.IPaddingImpl}
 * @record
 * @struct
 */
CryptoJS.pad.AnsiX923 = function() {};
/**
 * @extends {CryptoJS.pad.IPaddingImpl}
 * @record
 * @struct
 */
CryptoJS.pad.Iso10126 = function() {};
/**
 * @extends {CryptoJS.pad.IPaddingImpl}
 * @record
 * @struct
 */
CryptoJS.pad.Iso97971 = function() {};
/**
 * @extends {CryptoJS.pad.IPaddingImpl}
 * @record
 * @struct
 */
CryptoJS.pad.ZeroPadding = function() {};
/**
 * @extends {CryptoJS.pad.IPaddingImpl}
 * @record
 * @struct
 */
CryptoJS.pad.NoPadding = function() {};
/** @const */
CryptoJS.x64 = {};
/**
 * @record
 * @struct
 */
CryptoJS.x64.X64Static = function() {};
 /** @type {!CryptoJS.x64.Word} */
CryptoJS.x64.X64Static.prototype.Word;
 /** @type {!CryptoJS.x64.WordArray} */
CryptoJS.x64.X64Static.prototype.WordArray;
/**
 * @extends {CryptoJS.lib.Base}
 * @record
 * @struct
 */
CryptoJS.x64.Word = function() {};
 /** @type {number} */
CryptoJS.x64.Word.prototype.high;
 /** @type {number} */
CryptoJS.x64.Word.prototype.low;

/**
 * @param {number=} high
 * @param {number=} low
 * @return {void}
 */
CryptoJS.x64.Word.prototype.init = function(high, low) {};

/**
 * @param {number=} high
 * @param {number=} low
 * @return {!CryptoJS.x64.Word}
 */
CryptoJS.x64.Word.prototype.create = function(high, low) {};
/**
 * @extends {CryptoJS.lib.Base}
 * @record
 * @struct
 */
CryptoJS.x64.WordArray = function() {};
 /** @type {!Array<!CryptoJS.x64.Word>} */
CryptoJS.x64.WordArray.prototype.words;
 /** @type {number} */
CryptoJS.x64.WordArray.prototype.sigBytes;

/**
 * @param {!Array<!CryptoJS.x64.Word>=} words
 * @param {number=} sigBytes
 * @return {void}
 */
CryptoJS.x64.WordArray.prototype.init = function(words, sigBytes) {};

/**
 * @param {!Array<!CryptoJS.x64.Word>=} words
 * @param {number=} sigBytes
 * @return {!CryptoJS.x64.WordArray}
 */
CryptoJS.x64.WordArray.prototype.create = function(words, sigBytes) {};

/**
 * @return {!CryptoJS.lib.WordArray}
 */
CryptoJS.x64.WordArray.prototype.toX32 = function() {};

/**
 * @return {!CryptoJS.x64.WordArray}
 */
CryptoJS.x64.WordArray.prototype.clone = function() {};
/**
 * @record
 * @struct
 */
CryptoJS.CryptoJSStatic = function() {};
 /** @type {!CryptoJS.lib.LibStatic} */
CryptoJS.CryptoJSStatic.prototype.lib;
 /** @type {!CryptoJS.enc.EncStatic} */
CryptoJS.CryptoJSStatic.prototype.enc;
 /** @type {!CryptoJS.kdf.KdfStatic} */
CryptoJS.CryptoJSStatic.prototype.kdf;
 /** @type {!CryptoJS.format.FormatStatic} */
CryptoJS.CryptoJSStatic.prototype.format;
 /** @type {!CryptoJS.algo.AlgoStatic} */
CryptoJS.CryptoJSStatic.prototype.algo;
 /** @type {!CryptoJS.mode.ModeStatic} */
CryptoJS.CryptoJSStatic.prototype.mode;
 /** @type {!CryptoJS.pad.PadStatic} */
CryptoJS.CryptoJSStatic.prototype.pad;
 /** @type {!CryptoJS.x64.X64Static} */
CryptoJS.CryptoJSStatic.prototype.x64;
 /** @type {!CryptoJS.lib.ICipherHelper<!CryptoJS.lib.IBlockCipherCfg>} */
CryptoJS.CryptoJSStatic.prototype.AES;
 /** @type {!CryptoJS.lib.ICipherHelper<!CryptoJS.lib.IBlockCipherCfg>} */
CryptoJS.CryptoJSStatic.prototype.DES;
 /** @type {!CryptoJS.lib.ICipherHelper<!CryptoJS.lib.IBlockCipherCfg>} */
CryptoJS.CryptoJSStatic.prototype.TripleDES;
 /** @type {!CryptoJS.lib.CipherHelper} */
CryptoJS.CryptoJSStatic.prototype.RabbitLegacy;
 /** @type {!CryptoJS.lib.CipherHelper} */
CryptoJS.CryptoJSStatic.prototype.Rabbit;
 /** @type {!CryptoJS.lib.CipherHelper} */
CryptoJS.CryptoJSStatic.prototype.RC4;
 /** @type {!CryptoJS.lib.ICipherHelper<!Object>} */
CryptoJS.CryptoJSStatic.prototype.RC4Drop;
 /** @type {!CryptoJS.lib.HasherHelper} */
CryptoJS.CryptoJSStatic.prototype.MD5;
 /** @type {!CryptoJS.lib.IHasherHmacHelper} */
CryptoJS.CryptoJSStatic.prototype.HmacMD5;
 /** @type {!CryptoJS.lib.HasherHelper} */
CryptoJS.CryptoJSStatic.prototype.RIPEMD160;
 /** @type {!CryptoJS.lib.IHasherHmacHelper} */
CryptoJS.CryptoJSStatic.prototype.HmacRIPEMD160;
 /** @type {!CryptoJS.lib.HasherHelper} */
CryptoJS.CryptoJSStatic.prototype.SHA1;
 /** @type {!CryptoJS.lib.IHasherHmacHelper} */
CryptoJS.CryptoJSStatic.prototype.HmacSHA1;
 /** @type {!CryptoJS.lib.HasherHelper} */
CryptoJS.CryptoJSStatic.prototype.SHA256;
 /** @type {!CryptoJS.lib.IHasherHmacHelper} */
CryptoJS.CryptoJSStatic.prototype.HmacSHA256;
 /** @type {!CryptoJS.lib.HasherHelper} */
CryptoJS.CryptoJSStatic.prototype.SHA224;
 /** @type {!CryptoJS.lib.IHasherHmacHelper} */
CryptoJS.CryptoJSStatic.prototype.HmacSHA224;
 /** @type {!CryptoJS.lib.HasherHelper} */
CryptoJS.CryptoJSStatic.prototype.SHA512;
 /** @type {!CryptoJS.lib.IHasherHmacHelper} */
CryptoJS.CryptoJSStatic.prototype.HmacSHA512;
 /** @type {!CryptoJS.lib.HasherHelper} */
CryptoJS.CryptoJSStatic.prototype.SHA384;
 /** @type {!CryptoJS.lib.IHasherHmacHelper} */
CryptoJS.CryptoJSStatic.prototype.HmacSHA384;
 /** @type {!CryptoJS.lib.IHasherHelper<!CryptoJS.algo.ISHA3Cfg>} */
CryptoJS.CryptoJSStatic.prototype.SHA3;
 /** @type {!CryptoJS.lib.IHasherHmacHelper} */
CryptoJS.CryptoJSStatic.prototype.HmacSHA3;
 /** @type {!CryptoJS.algo.IEvpKDFHelper} */
CryptoJS.CryptoJSStatic.prototype.EvpKDF;
 /** @type {!CryptoJS.algo.IEvpKDFHelper} */
CryptoJS.CryptoJSStatic.prototype.PBKDF2;
