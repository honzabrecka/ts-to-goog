/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/angular-ui-router/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ExportAssignment in  */

/** @typedef {!ui.IState} */
var IState;

/** @typedef {!ui.IStateProvider} */
var IStateProvider;

/** @typedef {!ui.IUrlMatcher} */
var IUrlMatcher;

/** @typedef {!ui.IUrlRouterProvider} */
var IUrlRouterProvider;

/** @typedef {!ui.IStateOptions} */
var IStateOptions;

/** @typedef {!ui.IHrefOptions} */
var IHrefOptions;

/** @typedef {!ui.IStateService} */
var IStateService;

/** @typedef {!ui.IResolvedState} */
var IResolvedState;

/** @typedef {!ui.IStateParamsService} */
var IStateParamsService;

/** @typedef {!ui.IUrlRouterService} */
var IUrlRouterService;

/** @typedef {!ui.IUiViewScrollProvider} */
var IUiViewScrollProvider;

/** @typedef {!ui.IType} */
var IType;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "angular"
/** @const */
tsickle_declare_module.angular.ui = {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IState = function() {};
 /** @type {string} */
tsickle_declare_module.angular.ui.IState.prototype.name;
 /** @type {(string|function(!ui.IStateParamsService): string)} */
tsickle_declare_module.angular.ui.IState.prototype.template;
 /** @type {(string|function(!ui.IStateParamsService): string)} */
tsickle_declare_module.angular.ui.IState.prototype.templateUrl;
 /** @type {(!Function|!Array<(string|!Function)>)} */
tsickle_declare_module.angular.ui.IState.prototype.templateProvider;
 /** @type {string} */
tsickle_declare_module.angular.ui.IState.prototype.component;
 /** @type {(string|!Function|!Array<(string|!Function)>)} */
tsickle_declare_module.angular.ui.IState.prototype.controller;
 /** @type {string} */
tsickle_declare_module.angular.ui.IState.prototype.controllerAs;
 /** @type {(!Function|!Array<(string|!Function)>)} */
tsickle_declare_module.angular.ui.IState.prototype.controllerProvider;
 /** @type {(string|!ui.IState)} */
tsickle_declare_module.angular.ui.IState.prototype.parent;
 /** @type {!Object<string,?>} */
tsickle_declare_module.angular.ui.IState.prototype.resolve;
 /** @type {(string|!ui.IUrlMatcher)} */
tsickle_declare_module.angular.ui.IState.prototype.url;
 /** @type {?} */
tsickle_declare_module.angular.ui.IState.prototype.params;
 /** @type {!Object<string,!ui.IState>} */
tsickle_declare_module.angular.ui.IState.prototype.views;
 /** @type {boolean} */
tsickle_declare_module.angular.ui.IState.prototype.abstract;
 /** @type {(!Function|!Array<(string|!Function)>)} */
tsickle_declare_module.angular.ui.IState.prototype.onEnter;
 /** @type {(!Function|!Array<(string|!Function)>)} */
tsickle_declare_module.angular.ui.IState.prototype.onExit;
 /** @type {?} */
tsickle_declare_module.angular.ui.IState.prototype.data;
 /** @type {boolean} */
tsickle_declare_module.angular.ui.IState.prototype.reloadOnSearch;
 /** @type {boolean} */
tsickle_declare_module.angular.ui.IState.prototype.cache;
 /** @type {(string|!Function|!ui.IState)} */
tsickle_declare_module.angular.ui.IState.prototype.redirectTo;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IUnfoundState = function() {};
 /** @type {string} */
tsickle_declare_module.angular.ui.IUnfoundState.prototype.to;
 /** @type {!Object} */
tsickle_declare_module.angular.ui.IUnfoundState.prototype.toParams;
 /** @type {!ui.IStateOptions} */
tsickle_declare_module.angular.ui.IUnfoundState.prototype.options;
/**
 * @extends {angular.IServiceProvider}
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IStateProvider = function() {};

/**
 * @param {string|!ui.IState} name_or_config
 * @param {!ui.IState=} config
 * @return {!ui.IStateProvider}
 */
tsickle_declare_module.angular.ui.IStateProvider.prototype.state = function(name_or_config, config) {};

/**
 * @param {string=} name
 * @param {function(!ui.IState, !Function): ?=} decorator
 * @return {?}
 */
tsickle_declare_module.angular.ui.IStateProvider.prototype.decorator = function(name, decorator) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IUrlMatcher = function() {};

/**
 * @param {string} pattern
 * @return {!ui.IUrlMatcher}
 */
tsickle_declare_module.angular.ui.IUrlMatcher.prototype.concat = function(pattern) {};

/**
 * @param {string} path
 * @param {?=} search
 * @param {string=} hash
 * @param {?=} options
 * @return {!Object}
 */
tsickle_declare_module.angular.ui.IUrlMatcher.prototype.exec = function(path, search, hash, options) {};

/**
 * @return {!Array<string>}
 */
tsickle_declare_module.angular.ui.IUrlMatcher.prototype.parameters = function() {};

/**
 * @param {!Object} values
 * @return {string}
 */
tsickle_declare_module.angular.ui.IUrlMatcher.prototype.format = function(values) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IUrlMatcherFactory = function() {};

/**
 * Creates a UrlMatcher for the specified pattern.
 * 
 * @param {string} pattern {string} The URL pattern.
 * 
 * @return {!ui.IUrlMatcher}
 */
tsickle_declare_module.angular.ui.IUrlMatcherFactory.prototype.compile = function(pattern) {};

/**
 * Returns true if the specified object is a UrlMatcher, or false otherwise.
 * 
 * @param {?} o {any} The object to perform the type check against.
 * 
 * @return {boolean}
 */
tsickle_declare_module.angular.ui.IUrlMatcherFactory.prototype.isMatcher = function(o) {};

/**
 * Returns a type definition for the specified name
 * 
 * Registers a custom Type object that can be used to generate URLs with typed parameters.
 * 
 * 
 * Registers a custom Type object that can be used to generate URLs with typed parameters.
 * 
 * 
 * @param {string} name {string} The type definition name
 * 
 * @param {!ui.IType=} definition
 * @param {!Array<?>|function(!Array<?>): !ui.IType=} inlineAnnotedDefinitionFn_or_definitionFn
 * @return {!ui.IType|!ui.IUrlMatcherFactory}
 */
tsickle_declare_module.angular.ui.IUrlMatcherFactory.prototype.type = function(name, definition, inlineAnnotedDefinitionFn_or_definitionFn) {};

/**
 * Defines whether URL matching should be case sensitive (the default behavior), or not.
 * 
 * @param {boolean=} value {boolean} false to match URL in a case sensitive manner; otherwise true;
 * 
 * @return {boolean}
 */
tsickle_declare_module.angular.ui.IUrlMatcherFactory.prototype.caseInsensitive = function(value) {};

/**
 * Sets the default behavior when generating or matching URLs with default parameter values
 * 
 * @param {string} value {string} A string that defines the default parameter URL squashing behavior. nosquash: When generating an href with a default parameter value, do not squash the parameter value from the URL slash: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the parameter is surrounded by slashes, squash (remove) one slash from the URL any other string, e.g. "~": When generating an href with a default parameter value, squash (remove) the parameter value from the URL and replace it with this string.
 * @return {void}
 */
tsickle_declare_module.angular.ui.IUrlMatcherFactory.prototype.defaultSquashPolicy = function(value) {};

/**
 * Defines whether URLs should match trailing slashes, or not (the default behavior).
 * 
 * @param {boolean=} value {boolean} false to match trailing slashes in URLs, otherwise true.
 * 
 * @return {boolean}
 */
tsickle_declare_module.angular.ui.IUrlMatcherFactory.prototype.strictMode = function(value) {};
/**
 * @extends {angular.IServiceProvider}
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IUrlRouterProvider = function() {};

/**
 * @param {!RegExp|!ui.IUrlMatcher|string} whenPath
 * @param {!Function|!Array<?>|string} handler_or_toPath_or_hanlder
 * @return {!ui.IUrlRouterProvider}
 */
tsickle_declare_module.angular.ui.IUrlRouterProvider.prototype.when = function(whenPath, handler_or_toPath_or_hanlder) {};

/**
 * @param {!Function|!Array<?>|string} handler_or_path
 * @return {!ui.IUrlRouterProvider}
 */
tsickle_declare_module.angular.ui.IUrlRouterProvider.prototype.otherwise = function(handler_or_path) {};

/**
 * @param {!Function|!Array<?>} handler
 * @return {!ui.IUrlRouterProvider}
 */
tsickle_declare_module.angular.ui.IUrlRouterProvider.prototype.rule = function(handler) {};

/**
 * Disables (or enables) deferring location change interception.
 * 
 * If you wish to customize the behavior of syncing the URL (for example, if you wish to defer a transition but maintain the current URL), call this method at configuration time. Then, at run time, call $urlRouter.listen() after you have configured your own $locationChangeSuccess event handler.
 * 
 * @param {boolean=} defer
 * @return {void}
 */
tsickle_declare_module.angular.ui.IUrlRouterProvider.prototype.deferIntercept = function(defer) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IStateOptions = function() {};
 /** @type {(string|boolean)} */
tsickle_declare_module.angular.ui.IStateOptions.prototype.location;
 /** @type {boolean} */
tsickle_declare_module.angular.ui.IStateOptions.prototype.inherit;
 /** @type {!ui.IState} */
tsickle_declare_module.angular.ui.IStateOptions.prototype.relative;
 /** @type {boolean} */
tsickle_declare_module.angular.ui.IStateOptions.prototype.notify;
 /** @type {(string|boolean|!ui.IState)} */
tsickle_declare_module.angular.ui.IStateOptions.prototype.reload;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IHrefOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.angular.ui.IHrefOptions.prototype.lossy;
 /** @type {boolean} */
tsickle_declare_module.angular.ui.IHrefOptions.prototype.inherit;
 /** @type {!ui.IState} */
tsickle_declare_module.angular.ui.IHrefOptions.prototype.relative;
 /** @type {boolean} */
tsickle_declare_module.angular.ui.IHrefOptions.prototype.absolute;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IStateService = function() {};
 /** @type {!ui.IState} */
tsickle_declare_module.angular.ui.IStateService.prototype.current;
 /** @type {!ui.IStateParamsService} */
tsickle_declare_module.angular.ui.IStateService.prototype.params;
 /** @type {!angular.IPromise<!Object>} */
tsickle_declare_module.angular.ui.IStateService.prototype.transition;
 /** @type {!ui.IResolvedState} */
tsickle_declare_module.angular.ui.IStateService.prototype.$current;

/**
 * Convenience method for transitioning to a new state. $state.go calls $state.transitionTo internally but automatically sets options to { location: true, inherit: true, relative: $state.$current, notify: true }. This allows you to easily use an absolute or relative to path and specify only the parameters you'd like to update (while letting unspecified parameters inherit from the currently active ancestor states).
 * 
 * @param {string|!ui.IState} to Absolute state name or relative state path. Some examples:
 * 
 * $state.go('contact.detail') - will go to the contact.detail state
 * $state.go('^') - will go to a parent state
 * $state.go('^.sibling') - will go to a sibling state
 * $state.go('.child.grandchild') - will go to grandchild state
 * 
 * @param {!Object=} params A map of the parameters that will be sent to the state, will populate $stateParams. Any parameters that are not specified will be inherited from currently defined parameters. This allows, for example, going to a sibling state that shares parameters specified in a parent state. Parameter inheritance only works between common ancestor states, I.e. transitioning to a sibling will get you the parameters for all parents, transitioning to a child will get you all current parameters, etc.
 * 
 * @param {!ui.IStateOptions=} options Options object.
 * @return {!angular.IPromise<?>}
 */
tsickle_declare_module.angular.ui.IStateService.prototype.go = function(to, params, options) {};

/**
 * @param {string|!ui.IState} state
 * @param {!Object=} params
 * @param {boolean|!ui.IStateOptions=} updateLocation_or_options
 * @return {!angular.IPromise<?>}
 */
tsickle_declare_module.angular.ui.IStateService.prototype.transitionTo = function(state, params, updateLocation_or_options) {};

/**
 * @param {string} state
 * @param {!Object=} params
 * @param {?=} options
 * @return {boolean}
 */
tsickle_declare_module.angular.ui.IStateService.prototype.includes = function(state, params, options) {};

/**
 * @param {string|!ui.IState} state
 * @param {!Object=} params
 * @return {boolean}
 */
tsickle_declare_module.angular.ui.IStateService.prototype.is = function(state, params) {};

/**
 * @param {!ui.IState|string} state
 * @param {!Object=} params
 * @param {!ui.IHrefOptions=} options
 * @return {string}
 */
tsickle_declare_module.angular.ui.IStateService.prototype.href = function(state, params, options) {};

/**
 * @param {string|!ui.IState=} state
 * @param {string|!ui.IState=} context
 * @return {!ui.IState|!Array<!ui.IState>}
 */
tsickle_declare_module.angular.ui.IStateService.prototype.get = function(state, context) {};

/**
 * @return {!angular.IPromise<?>}
 */
tsickle_declare_module.angular.ui.IStateService.prototype.reload = function() {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IResolvedState = function() {};
 /** @type {{globals: !Object<string,?>}} */
tsickle_declare_module.angular.ui.IResolvedState.prototype.locals;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IStateParamsService = function() {};

/* TODO: IndexSignature: tsickle_declare_module.angular.ui */
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IUrlRouterService = function() {};

/**
 * @return {void}
 */
tsickle_declare_module.angular.ui.IUrlRouterService.prototype.sync = function() {};

/**
 * @return {!Function}
 */
tsickle_declare_module.angular.ui.IUrlRouterService.prototype.listen = function() {};

/**
 * @param {!ui.IUrlMatcher} urlMatcher
 * @param {!ui.IStateParamsService=} params
 * @param {!ui.IHrefOptions=} options
 * @return {string}
 */
tsickle_declare_module.angular.ui.IUrlRouterService.prototype.href = function(urlMatcher, params, options) {};

/**
 * @param {boolean=} read
 * @return {void}
 */
tsickle_declare_module.angular.ui.IUrlRouterService.prototype.update = function(read) {};

/**
 * @param {!ui.IUrlMatcher} urlMatcher
 * @param {!ui.IStateParamsService=} params
 * @param {!ui.IHrefOptions=} options
 * @return {void}
 */
tsickle_declare_module.angular.ui.IUrlRouterService.prototype.push = function(urlMatcher, params, options) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IUiViewScrollProvider = function() {};

/**
 * @return {void}
 */
tsickle_declare_module.angular.ui.IUiViewScrollProvider.prototype.useAnchorScroll = function() {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IType = function() {};
 /** @type {!RegExp} */
tsickle_declare_module.angular.ui.IType.prototype.pattern;

/**
 * Converts a parameter value (from URL string or transition param) to a custom/native value.
 * 
 * @param {string} val {string} The URL parameter value to decode.
 * @param {string} key {string} The name of the parameter in which val is stored. Can be used for meta-programming of Type objects.
 * 
 * @return {?}
 */
tsickle_declare_module.angular.ui.IType.prototype.decode = function(val, key) {};

/**
 * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the return value does not need to be URL-safe (i.e. passed through encodeURIComponent()), it only needs to be a representation of val that has been coerced to a string.
 * 
 * @param {?} val {any} The value to encode.
 * @param {string} key {string} The name of the parameter in which val is stored. Can be used for meta-programming of Type objects.
 * 
 * @return {string}
 */
tsickle_declare_module.angular.ui.IType.prototype.encode = function(val, key) {};

/**
 * Determines whether two decoded values are equivalent.
 * 
 * @param {?} a {any} A value to compare against.
 * @param {?} b {any} A value to compare against.
 * 
 * @return {boolean}
 */
tsickle_declare_module.angular.ui.IType.prototype.equals = function(a, b) {};

/**
 * Detects whether a value is of a particular type. Accepts a native (decoded) value and determines whether it matches the current Type object.
 * 
 * @param {?} val {any} The value to check.
 * @param {string} key {any} Optional. If the type check is happening in the context of a specific UrlMatcher object, this is the name of the parameter in which val is stored. Can be used for meta-programming of Type objects.
 * 
 * @return {boolean}
 */
tsickle_declare_module.angular.ui.IType.prototype.is = function(val, key) {};
