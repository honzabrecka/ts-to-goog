/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/libxslt/index.d.ts:

/* TODO: ImportDeclaration in  */
 /** @type {?} */
var libxmljs;

/** @typedef {string} */
var OutputFormat;
/**
 * @record
 * @struct
 */
function ApplyOptions() {}
 /** @type {string} */
ApplyOptions.prototype.outputFormat;
 /** @type {boolean} */
ApplyOptions.prototype.noWrapParams;

/** @typedef {(string|!XMLDocument)} */
var ApplyResult;

/** @typedef {?} */
var ApplyCallback;

/** @typedef {?} */
var ApplyStringCallback;

/** @typedef {?} */
var ApplyDocumentCallback;
/**
 * @record
 * @struct
 */
function Stylesheet() {}

/**
 * @param {string|!XMLDocument} source
 * @param {!Object|?=} params_or_callback
 * @param {?=} options
 * @param {?=} callback
 * @return {string|(string|!XMLDocument)|void|!XMLDocument}
 */
Stylesheet.prototype.apply = function(source, params_or_callback, options, callback) {};

/**
 * @param {string} sourcePath
 * @param {!Object|?} params_or_callback
 * @param {?=} options
 * @param {?=} callback
 * @return {void}
 */
Stylesheet.prototype.applyToFile = function(sourcePath, params_or_callback, options, callback) {};

/** @typedef {?} */
var ParseCallback;

/**
 * @param {string|!XMLDocument} source
 * @param {?=} callback
 * @return {?|void}
 */
function parse(source, callback) {}

/**
 * @param {string} sourcePath
 * @param {?} callback
 * @return {void}
 */
function parseFile(sourcePath, callback) {}
