/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/windows-service/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */
/**
 * @record
 * @struct
 */
function AddOptions() {}
 /** @type {string} */
AddOptions.prototype.displayName;
 /** @type {string} */
AddOptions.prototype.nodePath;
 /** @type {!Array<string>} */
AddOptions.prototype.nodeArgs;
 /** @type {string} */
AddOptions.prototype.programPath;
 /** @type {!Array<string>} */
AddOptions.prototype.programArgs;

/**
 * The add() function adds a Windows service. The service will be set to automatically start at boot time, but not started.
 * The service can be started using the net start "My Service" command. An exception will be thrown if the service could
 * not be added. The error will be an instance of the Error class.
 * 
 * @param {string} name The name parameter specifies the name of the created service.
 * @param {?=} opts Options
 * @return {void}
 */
function add(name, opts) {}

/**
 * The remove() function removes a Windows service.
 * The name parameter specifies the name of the service to remove. This will be the same name parameter specified when adding the service.
 * The service must be in a stopped state for it to be removed. The net stop "My Service" command can be used to stop the service before
 * it is to be removed.
 * An exception will be thrown if the service could not be removed. The error will be an instance of the Error class.
 * @param {string} name
 * @return {void}
 */
function remove(name) {}

/**
 * The run() function will connect the calling program to the Windows Service Control Manager, allowing the program to run as a Windows service.
 * The programs process.stdout stream will be replaced with the stdoutLogStream parameter, and the programs process.stderr stream replaced with
 * the stdoutLogStream parameter (this allows the redirection of all console.log() type calls to a service specific log file). If the stderrLogStream
 * parameter is not specified the programs process.stderr stream will be replaced with the stdoutLogStream parameter. The callback function will be
 * called when the service receives a stop request, e.g. because the Windows Service Controller was used to send a stop request to the service.
 * The program should perform cleanup tasks and then call the service.stop() function.
 * @param {!internal.Writable} stdoutLogStream
 * @param {function(): void|!internal.Writable} callback_or_stderrLogStream
 * @param {function(): void=} callback
 * @return {void}
 */
function run(stdoutLogStream, callback_or_stderrLogStream, callback) {}

/**
 * The stop() function will cause the service to stop, and the calling program to exit.
 * Once the service has been stopped this function will terminate the program by calling the process.exit() function, passing to it the rcode
 * parameter which defaults to 0. Before calling this function ensure the program has finished performing cleanup tasks.
 * BE AWARE, THIS FUNCTION WILL NOT RETURN.
 * @param {number=} rcode
 * @return {void}
 */
function stop(rcode) {}
