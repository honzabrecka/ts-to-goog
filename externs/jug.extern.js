/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jug/index.d.ts:
/**
 * @record
 * @struct
 */
function VertexStructure() {}
 /** @type {number} */
VertexStructure.prototype.level;
 /** @type {!Array<?>} */
VertexStructure.prototype.edge;
 /** @type {!Object} */
VertexStructure.prototype.data;
 /** @type {?} */
VertexStructure.prototype.parent;

/** @typedef {!Object} */
var VertexData;
/**
 * @record
 * @struct
 */
function GraphConstructor() {}

/* TODO: ConstructSignature:  */
/**
 * @record
 * @struct
 */
function Graph() {}
 /** @type {?} */
Graph.prototype.vertex;

/**
 * @param {!Object=} data
 * @return {?}
 */
Graph.prototype.init = function(data) {};
/**
 * @record
 * @struct
 */
function VertexConstructor() {}

/* TODO: ConstructSignature:  */
/**
 * @record
 * @struct
 */
function Vertex() {}
 /** @type {?} */
Vertex.prototype.internal;

/**
 * Verify the level.
 * @return {number}
 */
Vertex.prototype.level = function() {};

/**
 * Get edge count.
 * Access node.
 * @param {number=} index - edge index.
 * @return {number|?}
 */
Vertex.prototype.edge = function(index) {};

/**
 * Seed node.
 * @param {!Object=} data
 * @return {?}
 */
Vertex.prototype.seed = function(data) {};

/**
 * Verify if the current node is the root.
 * @return {boolean}
 */
Vertex.prototype.isRoot = function() {};

/**
 * Set node data.
 * Get node data.
 * @param {!Object=} obj - data to be set.
 * @return {?|!Object}
 */
Vertex.prototype.data = function(obj) {};

/**
 * Get distance between nodes.
 * @param {string} from
 * @param {string} to
 * @return {!Array<number>}
 */
Vertex.prototype.proximity = function(from, to) {};

/**
 * Find a node.
 * @param {(string|void)} type
 * @param {!Object} query
 * @return {!Array<!Object>}
 */
Vertex.prototype.find = function(type, query) {};

/**
 * Get siblings of specified edge.
 * @param {number} index
 * @return {!Array<!Object>}
 */
Vertex.prototype.getSiblingsOf = function(index) {};

/**
 * Getting childs of an specified edge.
 * @param {number} egde - target vertex;
 * @return {!Array<!Object>}
 */
Vertex.prototype.getChildsOf = function(egde) {};

/**
 * Getting parents of an specified level and edge.
 * @param {number} level
 * @param {number} edge
 * @return {!Array<!Object>}
 */
Vertex.prototype.getParentsFrom = function(level, edge) {};

/**
 * Getting the length of childs of an specified edge.
 * @param {number} edge
 * @return {number}
 */
Vertex.prototype.getScopeOf = function(edge) {};
 /** @type {?} */
var jug;

/* TODO: ExportAssignment in  */
