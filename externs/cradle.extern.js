/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cradle/index.d.ts:
/**
 * @record
 * @struct
 */
function Options() {}
 /** @type {string} */
Options.prototype.host;
 /** @type {string} */
Options.prototype.hostname;
 /** @type {boolean} */
Options.prototype.cache;
 /** @type {boolean} */
Options.prototype.raw;
 /** @type {boolean} */
Options.prototype.forceSave;
 /** @type {(string|?)} */
Options.prototype.auth;
 /** @type {string} */
Options.prototype.ca;
 /** @type {boolean} */
Options.prototype.secure;
 /** @type {number} */
Options.prototype.retries;
 /** @type {number} */
Options.prototype.retryTimeout;
 /** @type {number} */
Options.prototype.maxSockets;
/**
 * @record
 * @struct
 */
function Callback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ErrorCallback() {}

/* TODO: CallSignature:  */

/**
 * @constructor
 * @struct
 * @param {string=} uri
 * @param {number=} port
 * @param {?=} options
 */
function Connection(uri, port, options) {}

/**
 * @param {string} name
 * @return {!Database}
 */
Connection.prototype.database = function(name) {};

/**
 * @param {?} Callback
 * @return {void}
 */
Connection.prototype.databases = function(Callback) {};

/**
 * @param {?} callback
 * @return {void}
 */
Connection.prototype.config = function(callback) {};

/**
 * @param {?} callback
 * @return {void}
 */
Connection.prototype.info = function(callback) {};

/**
 * @param {?} callback
 * @return {void}
 */
Connection.prototype.stats = function(callback) {};

/**
 * @param {?} callback
 * @return {void}
 */
Connection.prototype.activeTasks = function(callback) {};

/**
 * @param {?|number} callback_or_count
 * @param {?=} callback
 * @return {void}
 */
Connection.prototype.uuids = function(callback_or_count, callback) {};

/**
 * @param {{source: (string|{url: string}), target: (string|{url: string}), cancel: boolean, continuous: boolean, create_target: boolean, doc_ids: !Array<string>, filter: string, proxy: string, query_params: ?}} options
 * @param {?} callback
 * @return {void}
 */
Connection.prototype.replicate = function(options, callback) {};
/**
 * @record
 * @struct
 */
function ChangesOptions() {}
 /** @type {number} */
ChangesOptions.prototype.since;
/**
 * @constructor
 * @struct
 */
function Database() {}
 /** @type {string} */
Database.prototype.name;

/**
 * @template T
 * @param {string|!Array<string>} id_or_ids
 * @param {function(?, ?): void|function(?, T): void|string|?} callback_or_rev
 * @param {function(?, ?): void|function(?, T): void=} callback
 * @return {void}
 */
Database.prototype.get = function(id_or_ids, callback_or_rev, callback) {};

/**
 * @template T
 * @param {?|string|T|!Array<?>} document_or_id_or_documents
 * @param {?|string|T} callback_or_document_or_revision
 * @param {?|T=} callback_or_document
 * @param {?=} callback
 * @return {void}
 */
Database.prototype.save = function(document_or_id_or_documents, callback_or_document_or_revision, callback_or_document, callback) {};

/**
 * @template T
 * @param {string} id
 * @param {?|T} document
 * @param {?} callback
 * @return {void}
 */
Database.prototype.merge = function(id, document, callback) {};

/**
 * @param {string} id
 * @param {string} revision
 * @param {?} callback
 * @return {void}
 */
Database.prototype.remove = function(id, revision, callback) {};

/**
 * @param {string} name
 * @param {string} id
 * @param {?} queryObject
 * @param {?} documentBody
 * @param {?} callback
 * @return {void}
 */
Database.prototype.update = function(name, id, queryObject, documentBody, callback) {};

/**
 * @param {string} name
 * @param {?|{group: boolean, reduce: boolean, key: string, startkey: ?, endkey: ?, include_docs: boolean, limit: number, descending: boolean}} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Database.prototype.view = function(name, callback_or_options, callback) {};

/**
 * @param {?} view
 * @param {?} callback
 * @return {void}
 */
Database.prototype.temporaryView = function(view, callback) {};

/**
 * @param {?} callback
 * @return {void}
 */
Database.prototype.create = function(callback) {};

/**
 * @param {function(?, boolean): void} callback
 * @return {void}
 */
Database.prototype.exists = function(callback) {};

/**
 * @param {?} callback
 * @return {void}
 */
Database.prototype.destroy = function(callback) {};

/**
 * @param {?|function(?, !Array<?>): void} options_or_callback
 * @param {function(?, !Array<?>): void=} callback
 * @return {?|void}
 */
Database.prototype.changes = function(options_or_callback, callback) {};

/**
 * @param {{id: string, rev: string}} idAndRevData
 * @param {?} attachmentData
 * @param {?} callback
 * @return {void}
 */
Database.prototype.saveAttachment = function(idAndRevData, attachmentData, callback) {};

/**
 * @param {string} id
 * @param {string} attachmentName
 * @param {?} callback
 * @return {void}
 */
Database.prototype.getAttachment = function(id, attachmentName, callback) {};

/**
 * @param {string} id
 * @param {string} attachmentName
 * @param {?} callback
 * @return {void}
 */
Database.prototype.removeAttachment = function(id, attachmentName, callback) {};

/**
 * @param {?} callback
 * @return {void}
 */
Database.prototype.info = function(callback) {};

/**
 * @param {?} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Database.prototype.all = function(callback_or_options, callback) {};

/**
 * @param {?|string} callback_or_design
 * @param {?=} callback
 * @return {void}
 */
Database.prototype.compact = function(callback_or_design, callback) {};

/**
 * @param {?} callback
 * @return {void}
 */
Database.prototype.viewCleanup = function(callback) {};

/**
 * @param {string} target
 * @param {?} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Database.prototype.replicate = function(target, callback_or_options, callback) {};

/**
 * @param {?} options
 * @return {void}
 */
function setup(options) {}
