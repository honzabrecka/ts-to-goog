/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jquery.address/index.d.ts:
/**
 * @record
 * @struct
 */
function JQueryAddressStatic() {}

/* TODO: CallSignature:  */

/**
 * Binds any supported event type to a function with support for an optional map of data.
 * @param {?} type
 * @param {?} data
 * @param {!Function} callback
 * @return {!JQueryAddressStatic}
 */
JQueryAddressStatic.prototype.bind = function(type, data, callback) {};

/**
 * Binds a function to be executed whenever the address is changed. 
 * The function receives a single event object parameter that contains the following properties: 
 * value, path, pathNames, parameterNames, parameters and queryString.
 * @param {!Function} callback
 * @return {!JQueryAddressStatic}
 */
JQueryAddressStatic.prototype.change = function(callback) {};

/**
 * Binds a function to be executed once when the address is initiated. 
 * The function receives a single event object parameter that contains the following properties: 
 * value, path, pathNames, parameterNames, parameters and queryString.
 * @param {!Function} callback
 * @return {!JQueryAddressStatic}
 */
JQueryAddressStatic.prototype.init = function(callback) {};

/**
 * Binds a function to be executed when the address is changed from inside the page that uses the plugin. 
 * The function receives a single event object parameter that contains the following properties: 
 * value, path, pathNames, parameterNames, parameters and queryString.
 * @param {!Function} eventhandler
 * @return {!JQueryAddressStatic}
 */
JQueryAddressStatic.prototype.internalChange = function(eventhandler) {};

/**
 * Binds a function to be executed when the address is changed from the browser usually when entering the page or using the back and forward buttons. 
 * The function receives a single event object parameter that contains the following properties: 
 * value, path, pathNames, parameterNames, parameters and queryString.
 * @param {!Function} eventhandler
 * @return {!JQueryAddressStatic}
 */
JQueryAddressStatic.prototype.externalChange = function(eventhandler) {};

/**
 * Provides the base address of the document.
 * @return {string}
 */
JQueryAddressStatic.prototype.baseURL = function() {};

/**
 * Provides the state of the auto update mode. Enabled by default.
 * Enables or disables the auto update mode which can be turned off when multiple parameters values have to be changed at once.
 * @param {boolean=} value
 * @return {boolean|!JQueryAddressStatic}
 */
JQueryAddressStatic.prototype.autoUpdate = function(value) {};

/**
 * Provides the state of the crawling mode. Disables by default.
 * Enables or disables the crawling mode which will automatically convert the values into a Google Ajax Crawling friendly format.
 * @param {boolean=} value
 * @return {boolean|!JQueryAddressStatic}
 */
JQueryAddressStatic.prototype.crawlable = function(value) {};

/**
 * Provides the hash fragment part of the deep linking value.
 * Sets the hash fragment part of the deep linking value.
 * @param {string=} value
 * @return {string|!JQueryAddressStatic}
 */
JQueryAddressStatic.prototype.hash = function(value) {};

/**
 * Provides the state of the history mode setting. Enabled by default.
 * Enables or disables the history mode which generated entries in the browser history.
 * @param {boolean=} value
 * @return {boolean|void}
 */
JQueryAddressStatic.prototype.history = function(value) {};

/**
 * Provides the value of a specific query parameter.
 * Sets a query parameter value. Appending is disabled by default but can be enabled for array values.
 * @param {string} name
 * @param {string=} value
 * @param {boolean=} append
 * @return {string|!JQueryAddressStatic}
 */
JQueryAddressStatic.prototype.parameter = function(name, value, append) {};

/**
 * Provides a list of all the query parameter names.
 * @return {!Array<string>}
 */
JQueryAddressStatic.prototype.parameterNames = function() {};

/**
 * Provides the deep linking value without the query string and the hash fragment.
 * Sets the deep linking value without the query string and the hash fragment.
 * @param {string=} value
 * @return {string|!JQueryAddressStatic}
 */
JQueryAddressStatic.prototype.path = function(value) {};

/**
 * Provides a list of all the folders in the deep linking path.
 * @return {!Array<string>}
 */
JQueryAddressStatic.prototype.pathNames = function() {};

/**
 * Provides the query string part of the deep linking value.
 * Sets the query string part of the deep linking value.
 * @param {string=} value
 * @return {string|!JQueryAddressStatic}
 */
JQueryAddressStatic.prototype.queryString = function(value) {};

/**
 * Provides the value used as a base path for the HTML5 state management.
 * Sets the base path of the website that is utilized in HTML5 state management.
 * @param {string=} value
 * @return {string|!JQueryAddressStatic}
 */
JQueryAddressStatic.prototype.state = function(value) {};

/**
 * Provides the state of the strict mode setting. Enabled by default.
 * Enables or disables the strict mode which automatically appends a slash in the beginning of the deep linking value.
 * @param {boolean=} value
 * @return {boolean|!JQueryAddressStatic}
 */
JQueryAddressStatic.prototype.strict = function(value) {};

/**
 * Provides the title of the HTML document.
 * Sets the title of the HTML document.
 * @param {string=} value
 * @return {string|!JQueryAddressStatic}
 */
JQueryAddressStatic.prototype.title = function(value) {};

/**
 * Provides the currently set page view tracking function.
 * Sets a function for page view tracking. Google Analytics tracking is automatically invoked if it exists in the page.
 * @param {!Function=} value
 * @return {?|!JQueryAddressStatic}
 */
JQueryAddressStatic.prototype.tracker = function(value) {};

/**
 * Provides the current deep linking value.
 * Sets the current deep linking value.
 * @param {string=} url
 * @return {string|!JQueryAddressStatic}
 */
JQueryAddressStatic.prototype.value = function(url) {};

/**
 * Updates the value when auto updating is disabled.
 * @return {!JQueryAddressStatic}
 */
JQueryAddressStatic.prototype.update = function() {};

/**
 * Provides the state of the wrap mode. Disabled by default.
 * Enables or disables the wrap mode which generates a DIV wrapper around the page content and fixes any scroll issues caused by the use of hash fragments.
 * @param {boolean=} value
 * @return {boolean|!JQueryAddressStatic}
 */
JQueryAddressStatic.prototype.wrap = function(value) {};
/**
 * @record
 * @struct
 */
function JQueryAddress() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */
 /** @type {!JQueryAddressStatic} */
JQueryStatic.prototype.address;
 /** @type {!JQueryAddress} */
JQuery.prototype.address;
