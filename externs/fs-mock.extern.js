/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/fs-mock/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */
/** @const */
var FS = {};
/**
 * @record
 * @struct
 */
FS.Opts = function() {};
 /** @type {boolean} */
FS.Opts.prototype.windows;
 /** @type {!Array<string>} */
FS.Opts.prototype.drives;
 /** @type {string} */
FS.Opts.prototype.root;

/**
 * @param {string} oldPath
 * @param {string} newPath
 * @param {function(!NodeJS.ErrnoException): void=} callback
 * @return {void}
 */
FS.prototype.rename = function(oldPath, newPath, callback) {};

/**
 * @param {string} oldPath
 * @param {string} newPath
 * @return {void}
 */
FS.prototype.renameSync = function(oldPath, newPath) {};

/**
 * @param {string} path
 * @param {function(!NodeJS.ErrnoException): void|number=} callback_or_len
 * @param {function(!NodeJS.ErrnoException): void=} callback
 * @return {void}
 */
FS.prototype.truncate = function(path, callback_or_len, callback) {};

/**
 * @param {string} path
 * @param {number=} len
 * @return {void}
 */
FS.prototype.truncateSync = function(path, len) {};

/**
 * @param {number} fd
 * @param {function(!NodeJS.ErrnoException): void|number=} callback_or_len
 * @param {function(!NodeJS.ErrnoException): void=} callback
 * @return {void}
 */
FS.prototype.ftruncate = function(fd, callback_or_len, callback) {};

/**
 * @param {number} fd
 * @param {number=} len
 * @return {void}
 */
FS.prototype.ftruncateSync = function(fd, len) {};

/**
 * @param {string} path
 * @param {number} uid
 * @param {number} gid
 * @param {function(!NodeJS.ErrnoException): void=} callback
 * @return {void}
 */
FS.prototype.chown = function(path, uid, gid, callback) {};

/**
 * @param {string} path
 * @param {number} uid
 * @param {number} gid
 * @return {void}
 */
FS.prototype.chownSync = function(path, uid, gid) {};

/**
 * @param {number} fd
 * @param {number} uid
 * @param {number} gid
 * @param {function(!NodeJS.ErrnoException): void=} callback
 * @return {void}
 */
FS.prototype.fchown = function(fd, uid, gid, callback) {};

/**
 * @param {number} fd
 * @param {number} uid
 * @param {number} gid
 * @return {void}
 */
FS.prototype.fchownSync = function(fd, uid, gid) {};

/**
 * @param {string} path
 * @param {number} uid
 * @param {number} gid
 * @param {function(!NodeJS.ErrnoException): void=} callback
 * @return {void}
 */
FS.prototype.lchown = function(path, uid, gid, callback) {};

/**
 * @param {string} path
 * @param {number} uid
 * @param {number} gid
 * @return {void}
 */
FS.prototype.lchownSync = function(path, uid, gid) {};

/**
 * @param {string} path
 * @param {number|string} mode
 * @param {function(!NodeJS.ErrnoException): void=} callback
 * @return {void}
 */
FS.prototype.chmod = function(path, mode, callback) {};

/**
 * @param {string} path
 * @param {number|string} mode
 * @return {void}
 */
FS.prototype.chmodSync = function(path, mode) {};

/**
 * @param {number} fd
 * @param {number|string} mode
 * @param {function(!NodeJS.ErrnoException): void=} callback
 * @return {void}
 */
FS.prototype.fchmod = function(fd, mode, callback) {};

/**
 * @param {number} fd
 * @param {number|string} mode
 * @return {void}
 */
FS.prototype.fchmodSync = function(fd, mode) {};

/**
 * @param {string} path
 * @param {number|string} mode
 * @param {function(!NodeJS.ErrnoException): void=} callback
 * @return {void}
 */
FS.prototype.lchmod = function(path, mode, callback) {};

/**
 * @param {string} path
 * @param {number|string} mode
 * @return {void}
 */
FS.prototype.lchmodSync = function(path, mode) {};

/**
 * @param {string} path
 * @param {function(!NodeJS.ErrnoException, !Stats): ?=} callback
 * @return {void}
 */
FS.prototype.stat = function(path, callback) {};

/**
 * @param {string} path
 * @param {function(!NodeJS.ErrnoException, !Stats): ?=} callback
 * @return {void}
 */
FS.prototype.lstat = function(path, callback) {};

/**
 * @param {number} fd
 * @param {function(!NodeJS.ErrnoException, !Stats): ?=} callback
 * @return {void}
 */
FS.prototype.fstat = function(fd, callback) {};

/**
 * @param {string} path
 * @return {!Stats}
 */
FS.prototype.statSync = function(path) {};

/**
 * @param {string} path
 * @return {!Stats}
 */
FS.prototype.lstatSync = function(path) {};

/**
 * @param {number} fd
 * @return {!Stats}
 */
FS.prototype.fstatSync = function(fd) {};

/**
 * @param {string} srcpath
 * @param {string} dstpath
 * @param {function(!NodeJS.ErrnoException): void=} callback
 * @return {void}
 */
FS.prototype.link = function(srcpath, dstpath, callback) {};

/**
 * @param {string} srcpath
 * @param {string} dstpath
 * @return {void}
 */
FS.prototype.linkSync = function(srcpath, dstpath) {};

/**
 * @param {string} srcpath
 * @param {string} dstpath
 * @param {string=} type
 * @param {function(!NodeJS.ErrnoException): void=} callback
 * @return {void}
 */
FS.prototype.symlink = function(srcpath, dstpath, type, callback) {};

/**
 * @param {string} srcpath
 * @param {string} dstpath
 * @param {string=} type
 * @return {void}
 */
FS.prototype.symlinkSync = function(srcpath, dstpath, type) {};

/**
 * @param {string} path
 * @param {function(!NodeJS.ErrnoException, string): ?=} callback
 * @return {void}
 */
FS.prototype.readlink = function(path, callback) {};

/**
 * @param {string} path
 * @return {string}
 */
FS.prototype.readlinkSync = function(path) {};

/**
 * @param {string} path
 * @param {function(!NodeJS.ErrnoException, string): ?|!Object<string,string>=} callback_or_cache
 * @param {function(!NodeJS.ErrnoException, string): ?=} callback
 * @return {void}
 */
FS.prototype.realpath = function(path, callback_or_cache, callback) {};

/**
 * @param {string} path
 * @param {!Object<string,string>=} cache
 * @return {string}
 */
FS.prototype.realpathSync = function(path, cache) {};

/**
 * @param {string} path
 * @param {function(!NodeJS.ErrnoException): void=} callback
 * @return {void}
 */
FS.prototype.unlink = function(path, callback) {};

/**
 * @param {string} path
 * @return {void}
 */
FS.prototype.unlinkSync = function(path) {};

/**
 * @param {string} path
 * @param {function(!NodeJS.ErrnoException): void=} callback
 * @return {void}
 */
FS.prototype.rmdir = function(path, callback) {};

/**
 * @param {string} path
 * @return {void}
 */
FS.prototype.rmdirSync = function(path) {};

/**
 * @param {string} path
 * @param {function(!NodeJS.ErrnoException): void|number|string=} callback_or_mode
 * @param {function(!NodeJS.ErrnoException): void=} callback
 * @return {void}
 */
FS.prototype.mkdir = function(path, callback_or_mode, callback) {};

/**
 * @param {string} path
 * @param {number|string=} mode
 * @return {void}
 */
FS.prototype.mkdirSync = function(path, mode) {};

/**
 * @param {string} path
 * @param {function(!NodeJS.ErrnoException, !Array<string>): void=} callback
 * @return {void}
 */
FS.prototype.readdir = function(path, callback) {};

/**
 * @param {string} path
 * @return {!Array<string>}
 */
FS.prototype.readdirSync = function(path) {};

/**
 * @param {number} fd
 * @param {function(!NodeJS.ErrnoException): void=} callback
 * @return {void}
 */
FS.prototype.close = function(fd, callback) {};

/**
 * @param {number} fd
 * @return {void}
 */
FS.prototype.closeSync = function(fd) {};

/**
 * @param {string} path
 * @param {string} flags
 * @param {function(!NodeJS.ErrnoException, number): ?|number|string=} callback_or_mode
 * @param {function(!NodeJS.ErrnoException, number): ?=} callback
 * @return {void}
 */
FS.prototype.open = function(path, flags, callback_or_mode, callback) {};

/**
 * @param {string} path
 * @param {string} flags
 * @param {number|string=} mode
 * @return {number}
 */
FS.prototype.openSync = function(path, flags, mode) {};

/**
 * @param {string} path
 * @param {number|!Date} atime
 * @param {number|!Date} mtime
 * @param {function(!NodeJS.ErrnoException): void=} callback
 * @return {void}
 */
FS.prototype.utimes = function(path, atime, mtime, callback) {};

/**
 * @param {string} path
 * @param {number|!Date} atime
 * @param {number|!Date} mtime
 * @return {void}
 */
FS.prototype.utimesSync = function(path, atime, mtime) {};

/**
 * @param {number} fd
 * @param {number|!Date} atime
 * @param {number|!Date} mtime
 * @param {function(!NodeJS.ErrnoException): void=} callback
 * @return {void}
 */
FS.prototype.futimes = function(fd, atime, mtime, callback) {};

/**
 * @param {number} fd
 * @param {number|!Date} atime
 * @param {number|!Date} mtime
 * @return {void}
 */
FS.prototype.futimesSync = function(fd, atime, mtime) {};

/**
 * @param {number} fd
 * @param {function(!NodeJS.ErrnoException): void=} callback
 * @return {void}
 */
FS.prototype.fsync = function(fd, callback) {};

/**
 * @param {number} fd
 * @return {void}
 */
FS.prototype.fsyncSync = function(fd) {};

/**
 * @param {number} fd
 * @param {?} buffer
 * @param {number} offset
 * @param {number} length
 * @param {number} position
 * @param {function(!NodeJS.ErrnoException, number, ?): void=} callback
 * @return {void}
 */
FS.prototype.write = function(fd, buffer, offset, length, position, callback) {};

/**
 * @param {number} fd
 * @param {?} buffer
 * @param {number} offset
 * @param {number} length
 * @param {number} position
 * @return {number}
 */
FS.prototype.writeSync = function(fd, buffer, offset, length, position) {};

/**
 * @param {number} fd
 * @param {?} buffer
 * @param {number} offset
 * @param {number} length
 * @param {number} position
 * @param {function(!NodeJS.ErrnoException, number, ?): void=} callback
 * @return {void}
 */
FS.prototype.read = function(fd, buffer, offset, length, position, callback) {};

/**
 * @param {number} fd
 * @param {?} buffer
 * @param {number} offset
 * @param {number} length
 * @param {number} position
 * @return {number}
 */
FS.prototype.readSync = function(fd, buffer, offset, length, position) {};

/**
 * @param {string} filename
 * @param {string|{encoding: string, flag: string}|{flag: string}|function(!NodeJS.ErrnoException, ?): void} encoding_or_options_or_callback
 * @param {function(!NodeJS.ErrnoException, string): void|function(!NodeJS.ErrnoException, ?): void=} callback
 * @return {void}
 */
FS.prototype.readFile = function(filename, encoding_or_options_or_callback, callback) {};

/**
 * @param {string} filename
 * @param {string|{encoding: string, flag: string}|{flag: string}=} encoding_or_options
 * @return {string|?}
 */
FS.prototype.readFileSync = function(filename, encoding_or_options) {};

/**
 * @param {string} filename
 * @param {?} data
 * @param {function(!NodeJS.ErrnoException): void|{encoding: string, mode: number, flag: string}|{encoding: string, mode: string, flag: string}=} callback_or_options
 * @param {function(!NodeJS.ErrnoException): void=} callback
 * @return {void}
 */
FS.prototype.writeFile = function(filename, data, callback_or_options, callback) {};

/**
 * @param {string} filename
 * @param {?} data
 * @param {{encoding: string, mode: number, flag: string}|{encoding: string, mode: string, flag: string}=} options
 * @return {void}
 */
FS.prototype.writeFileSync = function(filename, data, options) {};

/**
 * @param {string} filename
 * @param {?} data
 * @param {{encoding: string, mode: number, flag: string}|{encoding: string, mode: string, flag: string}|function(!NodeJS.ErrnoException): void=} options_or_callback
 * @param {function(!NodeJS.ErrnoException): void=} callback
 * @return {void}
 */
FS.prototype.appendFile = function(filename, data, options_or_callback, callback) {};

/**
 * @param {string} filename
 * @param {?} data
 * @param {{encoding: string, mode: number, flag: string}|{encoding: string, mode: string, flag: string}=} options
 * @return {void}
 */
FS.prototype.appendFileSync = function(filename, data, options) {};

/**
 * @param {string} filename
 * @param {function(!Stats, !Stats): void|{persistent: boolean, interval: number}} listener_or_options
 * @param {function(!Stats, !Stats): void=} listener
 * @return {void}
 */
FS.prototype.watchFile = function(filename, listener_or_options, listener) {};

/**
 * @param {string} filename
 * @param {function(!Stats, !Stats): void=} listener
 * @return {void}
 */
FS.prototype.unwatchFile = function(filename, listener) {};

/**
 * @param {string} filename
 * @param {function(string, string): ?|{persistent: boolean}=} listener_or_options
 * @param {function(string, string): ?=} listener
 * @return {!FSWatcher}
 */
FS.prototype.watch = function(filename, listener_or_options, listener) {};

/**
 * @param {string} path
 * @param {function(boolean): void=} callback
 * @return {void}
 */
FS.prototype.exists = function(path, callback) {};

/**
 * @param {string} path
 * @return {boolean}
 */
FS.prototype.existsSync = function(path) {};

/**
 * @param {string} path
 * @param {{flags: string, encoding: string, fd: string, mode: number, bufferSize: number}|{flags: string, encoding: string, fd: string, mode: string, bufferSize: number}=} options
 * @return {!ReadStream}
 */
FS.prototype.createReadStream = function(path, options) {};

/**
 * @param {string} path
 * @param {{flags: string, encoding: string, string: string}=} options
 * @return {!WriteStream}
 */
FS.prototype.createWriteStream = function(path, options) {};

/* TODO: ExportAssignment in  */
