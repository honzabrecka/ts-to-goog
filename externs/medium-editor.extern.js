/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/medium-editor/index.d.ts:
/** @const */
var MediumEditor = {};
/**
 * @record
 * @struct
 */
MediumEditor.MediumEditor = function() {};

/* TODO: ConstructSignature: MediumEditor */
 /** @type {{major: number, minor: number, revision: number, preRelease: string, toString: !Function}} */
MediumEditor.MediumEditor.prototype.version;

/**
 * @return {void}
 */
MediumEditor.MediumEditor.prototype.destroy = function() {};

/**
 * @return {void}
 */
MediumEditor.MediumEditor.prototype.setup = function() {};

/**
 * @param {(string|!HTMLElement|!Array<!HTMLElement>|!NodeList|!NodeListOf<!Element>|!HTMLCollection)} elements
 * @return {void}
 */
MediumEditor.MediumEditor.prototype.addElements = function(elements) {};

/**
 * @param {(string|!HTMLElement|!Array<!HTMLElement>|!NodeList|!NodeListOf<!Element>|!HTMLCollection)} elements
 * @return {void}
 */
MediumEditor.MediumEditor.prototype.removeElements = function(elements) {};

/**
 * @param {(!HTMLElement|!NodeList)} targets
 * @param {string} event
 * @param {function(!Event): void|(!EventListener|!EventListenerObject)} listener
 * @param {boolean} useCapture
 * @return {!MediumEditor.MediumEditor}
 */
MediumEditor.MediumEditor.prototype.on = function(targets, event, listener, useCapture) {};

/**
 * @param {(!HTMLElement|!NodeList)} targets
 * @param {string} event
 * @param {!Function|(!EventListener|!EventListenerObject)} listener
 * @param {boolean} useCapture
 * @return {!MediumEditor.MediumEditor}
 */
MediumEditor.MediumEditor.prototype.off = function(targets, event, listener, useCapture) {};

/**
 * @param {string} name
 * @param {function(?, !HTMLElement): void} listener
 * @return {!MediumEditor.MediumEditor}
 */
MediumEditor.MediumEditor.prototype.subscribe = function(name, listener) {};

/**
 * @param {string} name
 * @param {!Function} listener
 * @return {!MediumEditor.MediumEditor}
 */
MediumEditor.MediumEditor.prototype.unsubscribe = function(name, listener) {};

/**
 * @param {string} name
 * @param {?} data
 * @param {!HTMLElement} editable
 * @return {!MediumEditor.MediumEditor}
 */
MediumEditor.MediumEditor.prototype.trigger = function(name, data, editable) {};

/**
 * @return {!MediumEditor.MediumEditor}
 */
MediumEditor.MediumEditor.prototype.checkSelection = function() {};

/**
 * @return {{start: number, end: number}}
 */
MediumEditor.MediumEditor.prototype.exportSelection = function() {};

/**
 * @param {{start: number, end: number}} selectionState
 * @param {boolean} favorLaterSelectionAnchor
 * @return {void}
 */
MediumEditor.MediumEditor.prototype.importSelection = function(selectionState, favorLaterSelectionAnchor) {};

/**
 * @return {!HTMLElement}
 */
MediumEditor.MediumEditor.prototype.getFocusedElement = function() {};

/**
 * @param {!Range=} range
 * @return {!HTMLElement}
 */
MediumEditor.MediumEditor.prototype.getSelectedParentElement = function(range) {};

/**
 * @return {void}
 */
MediumEditor.MediumEditor.prototype.restoreSelection = function() {};

/**
 * @return {void}
 */
MediumEditor.MediumEditor.prototype.saveSelection = function() {};

/**
 * @return {void}
 */
MediumEditor.MediumEditor.prototype.selectAllContents = function() {};

/**
 * @param {!HTMLElement} element
 * @return {void}
 */
MediumEditor.MediumEditor.prototype.selectElement = function(element) {};

/**
 * @return {void}
 */
MediumEditor.MediumEditor.prototype.stopSelectionUpdates = function() {};

/**
 * @return {void}
 */
MediumEditor.MediumEditor.prototype.startSelectionUpdates = function() {};

/**
 * @param {string} text
 * @return {void}
 */
MediumEditor.MediumEditor.prototype.cleanPaste = function(text) {};

/**
 * @param {!MediumEditor.CreateLinkOptions} opts
 * @return {void}
 */
MediumEditor.MediumEditor.prototype.createLink = function(opts) {};

/**
 * @param {string} action
 * @param {string|!MediumEditor.CreateLinkOptions=} opts
 * @return {boolean}
 */
MediumEditor.MediumEditor.prototype.execAction = function(action, opts) {};

/**
 * @param {string} html
 * @param {!MediumEditor.PasteHTMLOptions=} options
 * @return {void}
 */
MediumEditor.MediumEditor.prototype.pasteHTML = function(html, options) {};

/**
 * @param {string} action
 * @return {boolean}
 */
MediumEditor.MediumEditor.prototype.queryCommandState = function(action) {};

/**
 * @param {!HTMLElement=} editable
 * @return {void}
 */
MediumEditor.MediumEditor.prototype.checkContentChanged = function(editable) {};

/**
 * @param {!Function} fn
 * @return {void}
 */
MediumEditor.MediumEditor.prototype.delay = function(fn) {};

/**
 * @param {number=} index
 * @return {string}
 */
MediumEditor.MediumEditor.prototype.getContent = function(index) {};

/**
 * @param {string} name
 * @return {?}
 */
MediumEditor.MediumEditor.prototype.getExtensionByName = function(name) {};

/**
 * @param {!HTMLElement} element
 * @return {void}
 */
MediumEditor.MediumEditor.prototype.resetContent = function(element) {};

/**
 * @return {?}
 */
MediumEditor.MediumEditor.prototype.serialize = function() {};

/**
 * @param {string} html
 * @param {number=} index
 * @return {void}
 */
MediumEditor.MediumEditor.prototype.setContent = function(html, index) {};

/**
 * @param {!HTMLElement} element
 * @return {!MediumEditor.MediumEditor}
 */
MediumEditor.MediumEditor.prototype.getEditorFromElement = function(element) {};
/**
 * @record
 * @struct
 */
MediumEditor.CoreOptions = function() {};
 /** @type {string} */
MediumEditor.CoreOptions.prototype.activeButtonClass;
 /** @type {boolean} */
MediumEditor.CoreOptions.prototype.allowMultiParagraphSelection;
 /** @type {(string|boolean)} */
MediumEditor.CoreOptions.prototype.buttonLabels;
 /** @type {!Window} */
MediumEditor.CoreOptions.prototype.contentWindow;
 /** @type {number} */
MediumEditor.CoreOptions.prototype.delay;
 /** @type {boolean} */
MediumEditor.CoreOptions.prototype.disableReturn;
 /** @type {boolean} */
MediumEditor.CoreOptions.prototype.disableDoubleReturn;
 /** @type {boolean} */
MediumEditor.CoreOptions.prototype.disableExtraSpaces;
 /** @type {boolean} */
MediumEditor.CoreOptions.prototype.disableEditing;
 /** @type {!HTMLElement} */
MediumEditor.CoreOptions.prototype.elementsContainer;
 /** @type {?} */
MediumEditor.CoreOptions.prototype.extensions;
 /** @type {!Document} */
MediumEditor.CoreOptions.prototype.ownerDocument;
 /** @type {boolean} */
MediumEditor.CoreOptions.prototype.spellcheck;
 /** @type {boolean} */
MediumEditor.CoreOptions.prototype.targetBlank;
 /** @type {!MediumEditor.ToolbarOptions} */
MediumEditor.CoreOptions.prototype.toolbar;
 /** @type {(boolean|!MediumEditor.AnchorPreviewOptions)} */
MediumEditor.CoreOptions.prototype.anchorPreview;
 /** @type {(boolean|!MediumEditor.PlaceholderOptions)} */
MediumEditor.CoreOptions.prototype.placeholder;
 /** @type {!MediumEditor.AnchorFormOptions} */
MediumEditor.CoreOptions.prototype.anchor;
 /** @type {!MediumEditor.PasteOptions} */
MediumEditor.CoreOptions.prototype.paste;
 /** @type {(boolean|!MediumEditor.KeyboardCommandsOptions)} */
MediumEditor.CoreOptions.prototype.keyboardCommands;
 /** @type {boolean} */
MediumEditor.CoreOptions.prototype.autoLink;
 /** @type {boolean} */
MediumEditor.CoreOptions.prototype.imageDragging;
/**
 * @record
 * @struct
 */
MediumEditor.ToolbarOptions = function() {};
 /** @type {string} */
MediumEditor.ToolbarOptions.prototype.align;
 /** @type {boolean} */
MediumEditor.ToolbarOptions.prototype.allowMultiParagraphSelection;
 /** @type {!Array<string>} */
MediumEditor.ToolbarOptions.prototype.buttons;
 /** @type {number} */
MediumEditor.ToolbarOptions.prototype.diffLeft;
 /** @type {number} */
MediumEditor.ToolbarOptions.prototype.diffTop;
 /** @type {string} */
MediumEditor.ToolbarOptions.prototype.firstButtonClass;
 /** @type {string} */
MediumEditor.ToolbarOptions.prototype.lastButtonClass;
 /** @type {boolean} */
MediumEditor.ToolbarOptions.prototype.standardizeSelectionStart;
 /** @type {boolean} */
MediumEditor.ToolbarOptions.prototype.static;
 /** @type {boolean} */
MediumEditor.ToolbarOptions.prototype.sticky;
 /** @type {number} */
MediumEditor.ToolbarOptions.prototype.stickyTopOffset;
 /** @type {boolean} */
MediumEditor.ToolbarOptions.prototype.updateOnEmptySelection;
 /** @type {!Node} */
MediumEditor.ToolbarOptions.prototype.relativeContainer;
/**
 * @record
 * @struct
 */
MediumEditor.AnchorPreviewOptions = function() {};
 /** @type {number} */
MediumEditor.AnchorPreviewOptions.prototype.hideDelay;
 /** @type {string} */
MediumEditor.AnchorPreviewOptions.prototype.previewValueSelector;
 /** @type {boolean} */
MediumEditor.AnchorPreviewOptions.prototype.showWhenToolbarIsVisible;
 /** @type {boolean} */
MediumEditor.AnchorPreviewOptions.prototype.showOnEmptyLinks;
/**
 * @record
 * @struct
 */
MediumEditor.PlaceholderOptions = function() {};
 /** @type {string} */
MediumEditor.PlaceholderOptions.prototype.text;
 /** @type {boolean} */
MediumEditor.PlaceholderOptions.prototype.hideOnClick;
/**
 * @record
 * @struct
 */
MediumEditor.AnchorFormOptions = function() {};
 /** @type {string} */
MediumEditor.AnchorFormOptions.prototype.customClassOption;
 /** @type {string} */
MediumEditor.AnchorFormOptions.prototype.customClassOptionText;
 /** @type {boolean} */
MediumEditor.AnchorFormOptions.prototype.linkValidation;
 /** @type {string} */
MediumEditor.AnchorFormOptions.prototype.placeholderText;
 /** @type {boolean} */
MediumEditor.AnchorFormOptions.prototype.targetCheckbox;
 /** @type {string} */
MediumEditor.AnchorFormOptions.prototype.targetCheckboxText;
/**
 * @record
 * @struct
 */
MediumEditor.PasteOptions = function() {};
 /** @type {boolean} */
MediumEditor.PasteOptions.prototype.forcePlainText;
 /** @type {boolean} */
MediumEditor.PasteOptions.prototype.cleanPastedHTML;
 /** @type {!Array<?>} */
MediumEditor.PasteOptions.prototype.preCleanReplacements;
 /** @type {!Array<?>} */
MediumEditor.PasteOptions.prototype.cleanReplacements;
 /** @type {!Array<string>} */
MediumEditor.PasteOptions.prototype.cleanAttrs;
 /** @type {!Array<string>} */
MediumEditor.PasteOptions.prototype.cleanTags;
 /** @type {!Array<string>} */
MediumEditor.PasteOptions.prototype.unwrapTags;
/**
 * @record
 * @struct
 */
MediumEditor.KeyboardCommandsOptions = function() {};
 /** @type {!Array<!MediumEditor.KeyboardCommandOptions>} */
MediumEditor.KeyboardCommandsOptions.prototype.commands;
/**
 * @record
 * @struct
 */
MediumEditor.KeyboardCommandOptions = function() {};
 /** @type {string} */
MediumEditor.KeyboardCommandOptions.prototype.command;
 /** @type {string} */
MediumEditor.KeyboardCommandOptions.prototype.key;
 /** @type {boolean} */
MediumEditor.KeyboardCommandOptions.prototype.meta;
 /** @type {boolean} */
MediumEditor.KeyboardCommandOptions.prototype.shift;
 /** @type {boolean} */
MediumEditor.KeyboardCommandOptions.prototype.alt;
/**
 * @record
 * @struct
 */
MediumEditor.CreateLinkOptions = function() {};
 /** @type {string} */
MediumEditor.CreateLinkOptions.prototype.value;
 /** @type {string} */
MediumEditor.CreateLinkOptions.prototype.target;
 /** @type {string} */
MediumEditor.CreateLinkOptions.prototype.buttonClass;
/**
 * @record
 * @struct
 */
MediumEditor.PasteHTMLOptions = function() {};
 /** @type {!Array<string>} */
MediumEditor.PasteHTMLOptions.prototype.cleanAttrs;
 /** @type {!Array<string>} */
MediumEditor.PasteHTMLOptions.prototype.cleanTags;
 /** @type {!Array<string>} */
MediumEditor.PasteHTMLOptions.prototype.unwrapTags;

/** @typedef {(string|!HTMLElement|!Array<!HTMLElement>|!NodeList|!NodeListOf<!Element>|!HTMLCollection)} */
MediumEditor.elementType;

/** @typedef {{start: number, end: number}} */
MediumEditor.selectionObject;
 /** @type {!MediumEditor.MediumEditor} */
var MediumEditor;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "medium-editor"
/** @const */
tsickle_declare_module.medium_editor = {};

/* TODO: ExportAssignment in tsickle_declare_module.medium_editor */
