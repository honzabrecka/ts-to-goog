/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/srp/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ExportAssignment in  */
/** @const */
var SRP = {};
/**
 * @record
 * @struct
 */
SRP.Params = function() {};
 /** @type {number} */
SRP.Params.prototype.N_length_bits;
 /** @type {!BigNum} */
SRP.Params.prototype.N;
 /** @type {!BigNum} */
SRP.Params.prototype.g;
 /** @type {string} */
SRP.Params.prototype.hash;
 /** @type {!Object<string,!SRP.Params>} */
SRP.params;

/**
 * The verifier is calculated as described in Section 3 of [SRP-RFC].
 * We give the algorithm here for convenience.
 * 
 * The verifier (v) is computed based on the salt (s), user name (I),
 * password (P), and group parameters (N, g).
 * 
 *         x = H(s | H(I | ":" | P))
 *         v = g^x % N
 * 
 * 
 * @param {!SRP.Params} params
 * @param {?} salt
 * @param {?} I
 * @param {?} P
 * @return {?}
 */
SRP.computeVerifier = function(params, salt, I, P) {};

/**
 * Generate a random key.
 * 
 * Generate a random 32-byte key.
 * 
 * @param {number|function(!Error, ?): void} bytes_or_callback
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
SRP.genKey = function(bytes_or_callback, callback) {};

/**
 * @constructor
 * @struct
 * @param {!SRP.Params} params
 * @param {?} salt
 * @param {?} identity
 * @param {?} password
 * @param {?} secret1
 */
SRP.Client = function(params, salt, identity, password, secret1) {};

/**
 * @return {?}
 */
SRP.Client.prototype.computeA = function() {};

/**
 * @param {?} B
 * @return {void}
 */
SRP.Client.prototype.setB = function(B) {};

/**
 * @return {?}
 */
SRP.Client.prototype.computeM1 = function() {};

/**
 * @param {?} M2
 * @return {void}
 */
SRP.Client.prototype.checkM2 = function(M2) {};

/**
 * @return {?}
 */
SRP.Client.prototype.computeK = function() {};

/**
 * @constructor
 * @struct
 * @param {!SRP.Params} params
 * @param {?} verifier
 * @param {?} secret2
 */
SRP.Server = function(params, verifier, secret2) {};

/**
 * @return {?}
 */
SRP.Server.prototype.computeB = function() {};

/**
 * @param {?} A
 * @return {void}
 */
SRP.Server.prototype.setA = function(A) {};

/**
 * @param {?} M1
 * @return {?}
 */
SRP.Server.prototype.checkM1 = function(M1) {};

/**
 * @return {?}
 */
SRP.Server.prototype.computeK = function() {};
