/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/materialize-css/index.d.ts:
/** @const */
var Materialize = {};
/**
 * @record
 * @struct
 */
Materialize.CollapsibleOptions = function() {};
 /** @type {boolean} */
Materialize.CollapsibleOptions.prototype.accordion;
 /** @type {!Function} */
Materialize.CollapsibleOptions.prototype.onClose;
 /** @type {!Function} */
Materialize.CollapsibleOptions.prototype.onOpen;
/**
 * @record
 * @struct
 */
Materialize.TooltipOptions = function() {};
 /** @type {number} */
Materialize.TooltipOptions.prototype.delay;
 /** @type {string} */
Materialize.TooltipOptions.prototype.tooltip;
 /** @type {string} */
Materialize.TooltipOptions.prototype.position;
 /** @type {boolean} */
Materialize.TooltipOptions.prototype.html;
/**
 * @record
 * @struct
 */
Materialize.DropDownOptions = function() {};
 /** @type {number} */
Materialize.DropDownOptions.prototype.inDuration;
 /** @type {number} */
Materialize.DropDownOptions.prototype.outDuration;
 /** @type {boolean} */
Materialize.DropDownOptions.prototype.constrainWidth;
 /** @type {boolean} */
Materialize.DropDownOptions.prototype.hover;
 /** @type {number} */
Materialize.DropDownOptions.prototype.gutter;
 /** @type {boolean} */
Materialize.DropDownOptions.prototype.belowOrigin;
 /** @type {string} */
Materialize.DropDownOptions.prototype.alignment;
 /** @type {boolean} */
Materialize.DropDownOptions.prototype.stopPropagation;
/**
 * @record
 * @struct
 */
Materialize.SliderOptions = function() {};
 /** @type {boolean} */
Materialize.SliderOptions.prototype.indicators;
 /** @type {number} */
Materialize.SliderOptions.prototype.height;
 /** @type {number} */
Materialize.SliderOptions.prototype.transition;
 /** @type {number} */
Materialize.SliderOptions.prototype.interval;
/**
 * @record
 * @struct
 */
Materialize.CarouselOptions = function() {};
 /** @type {number} */
Materialize.CarouselOptions.prototype.duration;
 /** @type {number} */
Materialize.CarouselOptions.prototype.dist;
 /** @type {number} */
Materialize.CarouselOptions.prototype.shift;
 /** @type {number} */
Materialize.CarouselOptions.prototype.padding;
 /** @type {boolean} */
Materialize.CarouselOptions.prototype.fullWidth;
 /** @type {boolean} */
Materialize.CarouselOptions.prototype.indicators;
 /** @type {boolean} */
Materialize.CarouselOptions.prototype.noWrap;
/**
 * @record
 * @struct
 */
Materialize.ModalOptions = function() {};
 /** @type {boolean} */
Materialize.ModalOptions.prototype.dismissible;
 /** @type {number} */
Materialize.ModalOptions.prototype.opacity;
 /** @type {number} */
Materialize.ModalOptions.prototype.inDuration;
 /** @type {number} */
Materialize.ModalOptions.prototype.outDuration;
 /** @type {string} */
Materialize.ModalOptions.prototype.startingTop;
 /** @type {string} */
Materialize.ModalOptions.prototype.endingTop;
 /** @type {!Function} */
Materialize.ModalOptions.prototype.ready;
 /** @type {!Function} */
Materialize.ModalOptions.prototype.complete;
/**
 * @record
 * @struct
 */
Materialize.PushpinOptions = function() {};
 /** @type {number} */
Materialize.PushpinOptions.prototype.top;
 /** @type {number} */
Materialize.PushpinOptions.prototype.bottom;
 /** @type {number} */
Materialize.PushpinOptions.prototype.offset;
/**
 * @record
 * @struct
 */
Materialize.ScrollSpyOptions = function() {};
 /** @type {number} */
Materialize.ScrollSpyOptions.prototype.scrollOffset;
 /** @type {string} */
Materialize.ScrollSpyOptions.prototype.activeClass;
 /** @type {!Function} */
Materialize.ScrollSpyOptions.prototype.getActiveElement;
/**
 * @record
 * @struct
 */
Materialize.SideNavOptions = function() {};
 /** @type {number} */
Materialize.SideNavOptions.prototype.menuWidth;
 /** @type {string} */
Materialize.SideNavOptions.prototype.edge;
 /** @type {boolean} */
Materialize.SideNavOptions.prototype.closeOnClick;
 /** @type {boolean} */
Materialize.SideNavOptions.prototype.draggable;
/**
 * @record
 * @struct
 */
Materialize.ScrollFireOptions = function() {};
 /** @type {string} */
Materialize.ScrollFireOptions.prototype.selector;
 /** @type {number} */
Materialize.ScrollFireOptions.prototype.offset;
 /** @type {(string|function(): void)} */
Materialize.ScrollFireOptions.prototype.callback;
/**
 * @record
 * @struct
 */
Materialize.TabOptions = function() {};
 /** @type {!Function} */
Materialize.TabOptions.prototype.onShow;
 /** @type {boolean} */
Materialize.TabOptions.prototype.swipeable;
 /** @type {number} */
Materialize.TabOptions.prototype.responsiveThreshold;
/**
 * @record
 * @struct
 */
Materialize.ChipDataObject = function() {};
 /** @type {string} */
Materialize.ChipDataObject.prototype.tag;
 /** @type {string} */
Materialize.ChipDataObject.prototype.image;
 /** @type {number} */
Materialize.ChipDataObject.prototype.id;
/**
 * @record
 * @struct
 */
Materialize.ChipOptions = function() {};
 /** @type {!Array<!Materialize.ChipDataObject>} */
Materialize.ChipOptions.prototype.data;
 /** @type {string} */
Materialize.ChipOptions.prototype.placeholder;
 /** @type {string} */
Materialize.ChipOptions.prototype.secondaryPlaceholder;
 /** @type {?} */
Materialize.ChipOptions.prototype.autocompleteData;
 /** @type {number} */
Materialize.ChipOptions.prototype.autocompleteLimit;
 /** @type {!Materialize.AutoCompleteOptions} */
Materialize.ChipOptions.prototype.autocompleteOptions;
/**
 * @record
 * @struct
 */
Materialize.AutoCompleteOptions = function() {};
 /** @type {!Object} */
Materialize.AutoCompleteOptions.prototype.data;
 /** @type {number} */
Materialize.AutoCompleteOptions.prototype.limit;
 /** @type {function(?): void} */
Materialize.AutoCompleteOptions.prototype.onAutocomplete;
 /** @type {number} */
Materialize.AutoCompleteOptions.prototype.minLength;
/**
 * @record
 * @struct
 */
Materialize.Toast = function() {};
 /** @type {!Function} */
Materialize.Toast.prototype.removeAll;
/**
 * @record
 * @struct
 */
Materialize.Materialize = function() {};
 /** @type {!Materialize.Toast} */
Materialize.Materialize.prototype.Toast;

/**
 * Displays a toast message on screen
 * 
 * @param {(string|?<!HTMLElement>)} message
 * @param {number} displayLength
 * @param {string=} className
 * @param {!Function=} completeCallback
 * @return {void}
 */
Materialize.Materialize.prototype.toast = function(message, displayLength, className, completeCallback) {};

/**
 * Fires an event when the page is scrolled to a certain area
 * 
 * @param {!Array<!Materialize.ScrollFireOptions>=} options
 * @return {void}
 */
Materialize.Materialize.prototype.scrollFire = function(options) {};

/**
 * A staggered reveal effect for any UL Tag with list items
 * 
 * @param {string} selector
 * @return {void}
 */
Materialize.Materialize.prototype.showStaggeredList = function(selector) {};

/**
 * Fade in images. It also animates grayscale and brightness to give it a unique effect.
 * 
 * @param {string} selector
 * @return {void}
 */
Materialize.Materialize.prototype.fadeInImage = function(selector) {};

/**
 * Update all text field to reinitialize all the Materialize labels on the page if dynamically adding inputs
 * @return {void}
 */
Materialize.Materialize.prototype.updateTextFields = function() {};
 /** @type {string} */
Pickadate.TimeOptions.prototype.default;
 /** @type {number} */
Pickadate.TimeOptions.prototype.fromnow;
 /** @type {boolean} */
Pickadate.TimeOptions.prototype.twelvehour;
 /** @type {string} */
Pickadate.TimeOptions.prototype.donetext;
 /** @type {string} */
Pickadate.TimeOptions.prototype.cleartext;
 /** @type {string} */
Pickadate.TimeOptions.prototype.canceltext;
 /** @type {boolean} */
Pickadate.TimeOptions.prototype.autoclose;
 /** @type {boolean} */
Pickadate.TimeOptions.prototype.ampmclickable;
 /** @type {!Function} */
Pickadate.TimeOptions.prototype.aftershow;
 /** @type {!Materialize.Materialize} */
var Materialize;

/**
 * open Fixed Action Button
 * @return {void}
 */
JQuery.prototype.openFAB = function() {};

/**
 * close Fixed Action Button
 * @return {void}
 */
JQuery.prototype.closeFAB = function() {};

/**
 * Select allows user input through specified options.
 * 
 * @param {string=} method
 * @return {void}
 */
JQuery.prototype.material_select = function(method) {};

/**
 * Use a character counter in fields where a character restriction is in place.
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.characterCounter = function() {};

/**
 * Collapsibles are accordion elements that expand when clicked on.
 * They allow you to hide content that is not immediately relevant to the user.
 * 
 * @param {!Materialize.CollapsibleOptions=} options
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.collapsible = function(options) {};

/**
 * Tooltips are small, interactive, textual hints for mainly graphical elements.
 * When using icons for actions you can use a tooltip to give people clarification on its function.
 * 
 * @param {(string|!Materialize.TooltipOptions)=} options
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.tooltip = function(options) {};

/**
 * Add a dropdown list to any button.
 * Make sure that the data-activates attribute matches the id in the <ul> tag.
 * 
 * @param {!Materialize.DropDownOptions=} options
 * @return {void}
 */
JQuery.prototype.dropdown = function(options) {};

/**
 * Material box is a material design implementation of the Lightbox plugin.
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.materialbox = function() {};

/**
 * slider is a simple and elegant image carousel.
 * You can also have captions that will be transitioned on their own depending on their alignment.
 * You can also have indicators that show up on the bottom of the slider.
 * 
 * slider is a simple and elegant image carousel.
 * You can also have captions that will be transitioned on their own depending on their alignment.
 * You can also have indicators that show up on the bottom of the slider.
 * 
 * @param {!Materialize.SliderOptions|string=} options_or_method
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.slider = function(options_or_method) {};

/**
 * Our slider is a simple and elegant image carousel.
 * You can also have captions that will be transitioned on their own depending on their alignment.
 * You can also have indicators that show up on the bottom of the slider.
 * 
 * Our slider is a simple and elegant image carousel.
 * You can also have captions that will be transitioned on their own depending on their alignment.
 * You can also have indicators that show up on the bottom of the slider.
 * 
 * @param {!Materialize.CarouselOptions|string=} options_or_method
 * @param {number=} count
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.carousel = function(options_or_method, count) {};

/**
 * Modal for dialog boxes, confirmation messages, or other content that can be called up.
 * 
 * To customize the behaviour of a modal
 * 
 * Modal for dialog boxes, confirmation messages, or other content that can be called up.
 * 
 * For opening and closing modals programatically.
 * 
 * @param {!Materialize.ModalOptions|string=} options_or_action
 * @param {!Materialize.ModalOptions=} options
 * @return {void}
 */
JQuery.prototype.modal = function(options_or_action, options) {};

/**
 * Parallax is an effect where the background content or image in this case, is moved at a different speed than the foreground content while scrolling.
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.parallax = function() {};

/**
 * Pushpin is a fixed positioning plugin.
 * 
 * @param {!Materialize.PushpinOptions=} options
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.pushpin = function(options) {};

/**
 * Scrollspy is a jQuery plugin that tracks certain elements and which element the user's screen is currently centered on.
 * 
 * @param {!Materialize.ScrollSpyOptions=} options
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.scrollSpy = function(options) {};

/**
 * A slide out menu. You can add a dropdown to your sidebar by using our collapsible component.
 * 
 * @param {(string|!Materialize.SideNavOptions)=} methodOrOptions
 * @return {void}
 */
JQuery.prototype.sideNav = function(methodOrOptions) {};

/**
 * Programmatically trigger the tab change event
 * 
 * Tab Initialization with options
 * 
 * @param {string|!Materialize.TabOptions=} method_or_options
 * @param {string=} tab
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.tabs = function(method_or_options, tab) {};

/**
 * Chip Initialization
 * 
 * To access chip data
 * 
 * @param {!Materialize.ChipOptions|string=} options_or_method
 * @return {?<!HTMLElement>|(!Materialize.ChipDataObject|!Array<!Materialize.ChipDataObject>)}
 */
JQuery.prototype.material_chip = function(options_or_method) {};

/**
 * Add an autocomplete dropdown below your input to suggest possible values.
 * @param {!Materialize.AutoCompleteOptions} options
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.autocomplete = function(options) {};

/**
 * Feature discovery - open and close a tap target
 * @param {string=} action
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.tapTarget = function(action) {};
