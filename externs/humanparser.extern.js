/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/humanparser/index.d.ts:
/** @const */
var humanparser = {};
/**
 * @record
 * @struct
 */
humanparser.NameOutput = function() {};
 /** @type {string} */
humanparser.NameOutput.prototype.firstName;
 /** @type {string} */
humanparser.NameOutput.prototype.lastName;
 /** @type {string} */
humanparser.NameOutput.prototype.fullName;
 /** @type {string} */
humanparser.NameOutput.prototype.suffix;
 /** @type {string} */
humanparser.NameOutput.prototype.middleName;
 /** @type {string} */
humanparser.NameOutput.prototype.salutation;
/**
 * @record
 * @struct
 */
humanparser.FullerNameOutput = function() {};
 /** @type {string} */
humanparser.FullerNameOutput.prototype.fullName;
/**
 * @record
 * @struct
 */
humanparser.AddressOutput = function() {};
 /** @type {string} */
humanparser.AddressOutput.prototype.address;
 /** @type {string} */
humanparser.AddressOutput.prototype.state;
 /** @type {string} */
humanparser.AddressOutput.prototype.fullAddress;
 /** @type {string} */
humanparser.AddressOutput.prototype.zip;
 /** @type {string} */
humanparser.AddressOutput.prototype.city;
/**
 * @record
 * @struct
 */
humanparser.HumanparserStatic = function() {};

/**
 * @param {string} name
 * @return {!humanparser.NameOutput}
 */
humanparser.HumanparserStatic.prototype.parseName = function(name) {};

/**
 * @param {string} name
 * @return {!humanparser.FullerNameOutput}
 */
humanparser.HumanparserStatic.prototype.getFullestName = function(name) {};

/**
 * @param {string} address
 * @return {!humanparser.AddressOutput}
 */
humanparser.HumanparserStatic.prototype.parseAddress = function(address) {};
 /** @type {!humanparser.HumanparserStatic} */
var humanparser;

/* TODO: ExportAssignment in  */
