/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/send/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/**
 * Create a new SendStream for the given path to send to a res.
 * The req is the Node.js HTTP request and the path is a urlencoded path to send (urlencoded, not the actual file-system path).
 * @param {!internal.Readable} req
 * @param {string} path
 * @param {!send.SendOptions=} options
 * @return {!send.SendStream}
 */
function send(req, path, options) {}

/* TODO: ImportDeclaration in  */
 /** @type {?} */
send.mime;
/**
 * @record
 * @struct
 */
send.SendOptions = function() {};
 /** @type {boolean} */
send.SendOptions.prototype.acceptRanges;
 /** @type {boolean} */
send.SendOptions.prototype.cacheControl;
 /** @type {string} */
send.SendOptions.prototype.dotfiles;
 /** @type {number} */
send.SendOptions.prototype.end;
 /** @type {boolean} */
send.SendOptions.prototype.etag;
 /** @type {(string|boolean|!Array<string>)} */
send.SendOptions.prototype.extensions;
 /** @type {(string|boolean|!Array<string>)} */
send.SendOptions.prototype.index;
 /** @type {boolean} */
send.SendOptions.prototype.lastModified;
 /** @type {(string|number)} */
send.SendOptions.prototype.maxAge;
 /** @type {string} */
send.SendOptions.prototype.root;
 /** @type {number} */
send.SendOptions.prototype.start;
/**
 * @record
 * @struct
 */
send.SendStream = function() {};

/**
 * @deprecated pass etag as option
 * Enable or disable etag generation.
 * @param {boolean} val
 * @return {!send.SendStream}
 */
send.SendStream.prototype.etag = function(val) {};

/**
 * @deprecated use dotfiles option
 * Enable or disable "hidden" (dot) files.
 * @param {boolean} val
 * @return {!send.SendStream}
 */
send.SendStream.prototype.hidden = function(val) {};

/**
 * @deprecated pass index as option
 * Set index `paths`, set to a falsy value to disable index support.
 * @param {(string|!Array<string>)} paths
 * @return {!send.SendStream}
 */
send.SendStream.prototype.index = function(paths) {};

/**
 * @deprecated pass root as option
 * Set root `path`.
 * @param {string} paths
 * @return {!send.SendStream}
 */
send.SendStream.prototype.root = function(paths) {};

/**
 * @deprecated pass root as option
 * Set root `path`.
 * @param {string} paths
 * @return {!send.SendStream}
 */
send.SendStream.prototype.from = function(paths) {};

/**
 * @deprecated pass maxAge as option
 * Set max-age to `maxAge`.
 * @param {(string|number)} maxAge
 * @return {!send.SendStream}
 */
send.SendStream.prototype.maxage = function(maxAge) {};

/**
 * Emit error with `status`.
 * @param {number} status
 * @param {!Error=} error
 * @return {void}
 */
send.SendStream.prototype.error = function(status, error) {};

/**
 * Check if the pathname ends with "/".
 * @return {boolean}
 */
send.SendStream.prototype.hasTrailingSlash = function() {};

/**
 * Check if this is a conditional GET request.
 * @return {boolean}
 */
send.SendStream.prototype.isConditionalGET = function() {};

/**
 * Strip content-* header fields.
 * @return {void}
 */
send.SendStream.prototype.removeContentHeaderFields = function() {};

/**
 * Respond with 304 not modified.
 * @return {void}
 */
send.SendStream.prototype.notModified = function() {};

/**
 * Raise error that headers already sent.
 * @return {void}
 */
send.SendStream.prototype.headersAlreadySent = function() {};

/**
 * Check if the request is cacheable, aka responded with 2xx or 304 (see RFC 2616 section 14.2{5,6}).
 * @return {boolean}
 */
send.SendStream.prototype.isCachable = function() {};

/**
 * Handle stat() error.
 * @param {!Error} error
 * @return {void}
 */
send.SendStream.prototype.onStatError = function(error) {};

/**
 * Check if the cache is fresh.
 * @return {boolean}
 */
send.SendStream.prototype.isFresh = function() {};

/**
 * Check if the range is fresh.
 * @return {boolean}
 */
send.SendStream.prototype.isRangeFresh = function() {};

/**
 * Redirect to path.
 * @param {string} path
 * @return {void}
 */
send.SendStream.prototype.redirect = function(path) {};

/**
 * Pipe to `res`.
 * @template T
 * @param {T} res
 * @return {T}
 */
send.SendStream.prototype.pipe = function(res) {};

/**
 * Transfer `path`.
 * @param {string} path
 * @param {!Stats=} stat
 * @return {void}
 */
send.SendStream.prototype.send = function(path, stat) {};

/**
 * Transfer file for `path`.
 * @param {string} path
 * @return {void}
 */
send.SendStream.prototype.sendFile = function(path) {};

/**
 * Transfer index for `path`.
 * @param {string} path
 * @return {void}
 */
send.SendStream.prototype.sendIndex = function(path) {};

/**
 * Transfer index for `path`.
 * @param {string} path
 * @param {!Object=} options
 * @return {void}
 */
send.SendStream.prototype.stream = function(path, options) {};

/**
 * Set content-type based on `path` if it hasn't been explicitly set.
 * @param {string} path
 * @return {void}
 */
send.SendStream.prototype.type = function(path) {};

/**
 * Set response header fields, most fields may be pre-defined.
 * @param {string} path
 * @param {!Stats} stat
 * @return {void}
 */
send.SendStream.prototype.setHeader = function(path, stat) {};

/* TODO: ExportAssignment in  */
