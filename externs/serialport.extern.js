/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/serialport/index.d.ts:

/* TODO: ExportAssignment in  */

/**
 * @constructor
 * @struct
 * @param {string} path
 * @param {(!SerialPort.options|function(?): void)=} options
 * @param {function(?): void=} callback
 */
function SerialPort(path, options, callback) {}
 /** @type {?} */
SerialPort.parsers;

/**
 * @return {boolean}
 */
SerialPort.prototype.isOpen = function() {};

/**
 * @param {string} event
 * @param {function(?): void=} callback
 * @return {void}
 */
SerialPort.prototype.on = function(event, callback) {};

/**
 * @param {function(?): void=} callback
 * @return {void}
 */
SerialPort.prototype.open = function(callback) {};

/**
 * @param {?} buffer
 * @param {function(?, number): void=} callback
 * @return {void}
 */
SerialPort.prototype.write = function(buffer, callback) {};

/**
 * @return {void}
 */
SerialPort.prototype.pause = function() {};

/**
 * @return {void}
 */
SerialPort.prototype.resume = function() {};

/**
 * @param {!Error} err
 * @return {void}
 */
SerialPort.prototype.disconnected = function(err) {};

/**
 * @param {function(?): void=} callback
 * @return {void}
 */
SerialPort.prototype.close = function(callback) {};

/**
 * @param {function(?): void=} callback
 * @return {void}
 */
SerialPort.prototype.flush = function(callback) {};

/**
 * @param {!SerialPort.setOptions} options
 * @param {function(?): void} callback
 * @return {void}
 */
SerialPort.prototype.set = function(options, callback) {};

/**
 * @param {function(?): void=} callback
 * @return {void}
 */
SerialPort.prototype.drain = function(callback) {};

/**
 * @param {!SerialPort.updateOptions} options
 * @param {function(?): void=} callback
 * @return {void}
 */
SerialPort.prototype.update = function(options, callback) {};

/**
 * @param {function(?, !Array<!SerialPort.portConfig>): void} callback
 * @return {void}
 */
SerialPort.list = function(callback) {};
/**
 * @record
 * @struct
 */
SerialPort.portConfig = function() {};
 /** @type {string} */
SerialPort.portConfig.prototype.comName;
 /** @type {string} */
SerialPort.portConfig.prototype.manufacturer;
 /** @type {string} */
SerialPort.portConfig.prototype.serialNumber;
 /** @type {string} */
SerialPort.portConfig.prototype.pnpId;
 /** @type {string} */
SerialPort.portConfig.prototype.locationId;
 /** @type {string} */
SerialPort.portConfig.prototype.vendorId;
 /** @type {string} */
SerialPort.portConfig.prototype.productId;
/**
 * @record
 * @struct
 */
SerialPort.setOptions = function() {};
 /** @type {boolean} */
SerialPort.setOptions.prototype.brk;
 /** @type {boolean} */
SerialPort.setOptions.prototype.cts;
 /** @type {boolean} */
SerialPort.setOptions.prototype.dsr;
 /** @type {boolean} */
SerialPort.setOptions.prototype.dtr;
 /** @type {boolean} */
SerialPort.setOptions.prototype.rts;
/**
 * @record
 * @struct
 */
SerialPort.updateOptions = function() {};
 /** @type {number} */
SerialPort.updateOptions.prototype.baudRate;

/** @typedef {function(!NodeJS.EventEmitter, (string|?)): void} */
SerialPort.serialParser;

/** @typedef {function(string, string): function(!NodeJS.EventEmitter, (string|?)): void} */
SerialPort.readlineParser;

/** @typedef {function(number): function(!NodeJS.EventEmitter, (string|?)): void} */
SerialPort.byteLengthParser;

/** @typedef {function(!Array<number>): function(!NodeJS.EventEmitter, (string|?)): void} */
SerialPort.byteDelimiterParser;

/** @typedef {function(?): void} */
SerialPort.callback;
 /** @type {function(!NodeJS.EventEmitter, (string|?)): void} */
SerialPort.parsers.prototype.raw;
 /** @type {function(string, string): function(!NodeJS.EventEmitter, (string|?)): void} */
SerialPort.parsers.prototype.readline;
 /** @type {function(number): function(!NodeJS.EventEmitter, (string|?)): void} */
SerialPort.parsers.prototype.byteLength;
 /** @type {function(!Array<number>): function(!NodeJS.EventEmitter, (string|?)): void} */
SerialPort.parsers.prototype.byteDelimiter;
/**
 * @record
 * @struct
 */
SerialPort.options = function() {};
 /** @type {boolean} */
SerialPort.options.prototype.autoOpen;
 /** @type {boolean} */
SerialPort.options.prototype.lock;
 /** @type {number} */
SerialPort.options.prototype.baudRate;
 /** @type {number} */
SerialPort.options.prototype.dataBits;
 /** @type {number} */
SerialPort.options.prototype.stopBits;
 /** @type {string} */
SerialPort.options.prototype.parity;
 /** @type {boolean} */
SerialPort.options.prototype.rtscts;
 /** @type {boolean} */
SerialPort.options.prototype.xon;
 /** @type {boolean} */
SerialPort.options.prototype.xoff;
 /** @type {number} */
SerialPort.options.prototype.bufferSize;
 /** @type {function(!NodeJS.EventEmitter, (string|?)): void} */
SerialPort.options.prototype.parser;
 /** @type {{vmin: number, vtime: number}} */
SerialPort.options.prototype.platformOptions;
