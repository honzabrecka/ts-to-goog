/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/grecaptcha/index.d.ts:
 /** @type {!ReCaptchaV2.ReCaptcha} */
var grecaptcha;
/** @const */
var ReCaptchaV2 = {};
/**
 * @constructor
 * @struct
 */
ReCaptchaV2.ReCaptcha = function() {};

/**
 * Renders the container as a reCAPTCHA widget and returns the ID of the newly created widget.
 * @param {(string|!HTMLElement)} container The HTML element to render the reCAPTCHA widget. Specify either the ID of the container (string) or the DOM element itself.
 * @param {!ReCaptchaV2.Parameters=} parameters An object containing parameters as key=value pairs, for example, {"sitekey": "your_site_key", "theme": "light"}. See \@see render parameters.
 * @return {number} the ID of the newly created widget.
 */
ReCaptchaV2.ReCaptcha.prototype.render = function(container, parameters) {};

/**
 * Resets the reCAPTCHA widget.
 * @param {number=} opt_widget_id Optional widget ID, defaults to the first widget created if unspecified.
 * @return {void}
 */
ReCaptchaV2.ReCaptcha.prototype.reset = function(opt_widget_id) {};

/**
 * Gets the response for the reCAPTCHA widget.
 * @param {number=} opt_widget_id Optional widget ID, defaults to the first widget created if unspecified.
 * @return {string} the response of the reCAPTCHA widget.
 */
ReCaptchaV2.ReCaptcha.prototype.getResponse = function(opt_widget_id) {};

/**
 * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.
 * @param {number=} opt_widget_id Optional widget ID, defaults to the first widget created if unspecified.
 * @return {void}
 */
ReCaptchaV2.ReCaptcha.prototype.execute = function(opt_widget_id) {};

/** @typedef {string} */
ReCaptchaV2.Theme;

/** @typedef {string} */
ReCaptchaV2.Type;

/** @typedef {string} */
ReCaptchaV2.Size;

/** @typedef {string} */
ReCaptchaV2.Badge;
/**
 * @record
 * @struct
 */
ReCaptchaV2.Parameters = function() {};
 /** @type {string} */
ReCaptchaV2.Parameters.prototype.sitekey;
 /** @type {string} */
ReCaptchaV2.Parameters.prototype.theme;
 /** @type {string} */
ReCaptchaV2.Parameters.prototype.type;
 /** @type {string} */
ReCaptchaV2.Parameters.prototype.size;
 /** @type {number} */
ReCaptchaV2.Parameters.prototype.tabindex;
 /** @type {string} */
ReCaptchaV2.Parameters.prototype.badge;

/**
 * Optional. Your callback function that's executed when the user submits a successful CAPTCHA response.
 * The user's response, g-recaptcha-response, will be the input for your callback function.
 * @param {string} response
 * @return {void}
 */
ReCaptchaV2.Parameters.prototype.callback = function(response) {};

/**
 * @return {void}
 */
ReCaptchaV2.Parameters.prototype"expired-callback" = function() {};
