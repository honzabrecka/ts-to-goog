/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/crossfilter/index.d.ts:
/** @const */
var CrossFilter = {};
/**
 * @record
 * @struct
 */
CrossFilter.Selector = function() {};

/* TODO: CallSignature: CrossFilter */
/**
 * @record
 * @struct
 */
CrossFilter.CrossFilterStatic = function() {};

/* TODO: CallSignature: CrossFilter */
 /** @type {string} */
CrossFilter.CrossFilterStatic.prototype.version;
 /** @type {?} */
CrossFilter.CrossFilterStatic.prototype.bisect;
 /** @type {?} */
CrossFilter.CrossFilterStatic.prototype.heap;
 /** @type {?} */
CrossFilter.CrossFilterStatic.prototype.heapselect;
 /** @type {?} */
CrossFilter.CrossFilterStatic.prototype.insertionsort;
 /** @type {?} */
CrossFilter.CrossFilterStatic.prototype.quicksort;

/**
 * @template T
 * @param {!Array<T>} array
 * @param {!Array<number>} index
 * @return {!Array<T>}
 */
CrossFilter.CrossFilterStatic.prototype.permute = function(array, index) {};
/**
 * @record
 * @struct
 */
CrossFilter.Bisection = function() {};

/* TODO: CallSignature: CrossFilter */
/**
 * @extends {CrossFilter.Bisection}
 * @record
 * @struct
 */
CrossFilter.Bisector = function() {};
 /** @type {!CrossFilter.Bisection<T>} */
CrossFilter.Bisector.prototype.left;
 /** @type {!CrossFilter.Bisection<T>} */
CrossFilter.Bisector.prototype.right;
/**
 * @record
 * @struct
 */
CrossFilter.Heap = function() {};

/* TODO: CallSignature: CrossFilter */

/**
 * @param {!Array<T>} array
 * @param {number} lo
 * @param {number} hi
 * @return {!Array<T>}
 */
CrossFilter.Heap.prototype.sort = function(array, lo, hi) {};
/**
 * @record
 * @struct
 */
CrossFilter.HeapSelect = function() {};

/* TODO: CallSignature: CrossFilter */
/**
 * @record
 * @struct
 */
CrossFilter.Sort = function() {};

/* TODO: CallSignature: CrossFilter */
/**
 * @record
 * @struct
 */
CrossFilter.GroupAll = function() {};

/**
 * @template TValue
 * @param {function(TValue, T): TValue} add
 * @param {function(TValue, T): TValue} remove
 * @param {function(): TValue} initial
 * @return {!CrossFilter.GroupAll<T, TValue>}
 */
CrossFilter.GroupAll.prototype.reduce = function(add, remove, initial) {};

/**
 * @return {!CrossFilter.GroupAll}
 */
CrossFilter.GroupAll.prototype.reduceCount = function() {};

/**
 * @param {!CrossFilter.Selector<T>} value
 * @return {!CrossFilter.GroupAll}
 */
CrossFilter.GroupAll.prototype.reduceSum = function(value) {};

/**
 * @return {!CrossFilter.GroupAll}
 */
CrossFilter.GroupAll.prototype.dispose = function() {};

/**
 * @return {TValue}
 */
CrossFilter.GroupAll.prototype.value = function() {};
/**
 * @record
 * @struct
 */
CrossFilter.Grouping = function() {};
 /** @type {TKey} */
CrossFilter.Grouping.prototype.key;
 /** @type {TValue} */
CrossFilter.Grouping.prototype.value;
/**
 * @record
 * @struct
 */
CrossFilter.Group = function() {};

/**
 * @param {number} k
 * @return {!Array<!CrossFilter.Grouping<TKey, TValue>>}
 */
CrossFilter.Group.prototype.top = function(k) {};

/**
 * @return {!Array<!CrossFilter.Grouping<TKey, TValue>>}
 */
CrossFilter.Group.prototype.all = function() {};

/**
 * @template TGroup
 * @param {function(TGroup, T): TGroup} add
 * @param {function(TGroup, T): TGroup} remove
 * @param {function(): TGroup} initial
 * @return {!CrossFilter.Group<T, TKey, TGroup>}
 */
CrossFilter.Group.prototype.reduce = function(add, remove, initial) {};

/**
 * @return {!CrossFilter.Group<T, TKey, number>}
 */
CrossFilter.Group.prototype.reduceCount = function() {};

/**
 * @template TGroup
 * @param {function(T): TGroup} value
 * @return {!CrossFilter.Group<T, TKey, TGroup>}
 */
CrossFilter.Group.prototype.reduceSum = function(value) {};

/**
 * @param {!CrossFilter.Selector<TValue>=} value
 * @return {!CrossFilter.Group}
 */
CrossFilter.Group.prototype.order = function(value) {};

/**
 * @return {!CrossFilter.Group}
 */
CrossFilter.Group.prototype.orderNatural = function() {};

/**
 * @return {number}
 */
CrossFilter.Group.prototype.size = function() {};

/**
 * @return {!CrossFilter.Group}
 */
CrossFilter.Group.prototype.dispose = function() {};
/**
 * @record
 * @struct
 */
CrossFilter.CrossFilter = function() {};

/**
 * @param {!Array<T>} records
 * @return {!CrossFilter.CrossFilter}
 */
CrossFilter.CrossFilter.prototype.add = function(records) {};

/**
 * @return {!CrossFilter.CrossFilter}
 */
CrossFilter.CrossFilter.prototype.remove = function() {};

/**
 * @return {number}
 */
CrossFilter.CrossFilter.prototype.size = function() {};

/**
 * @return {!CrossFilter.GroupAll<T, T>}
 */
CrossFilter.CrossFilter.prototype.GroupAll = function() {};

/**
 * @template TValue
 * @return {!CrossFilter.GroupAll<T, TValue>}
 */
CrossFilter.CrossFilter.prototype.groupAll = function() {};

/**
 * @template TDimension
 * @param {function(T): TDimension} value
 * @return {!CrossFilter.Dimension<T, TDimension>}
 */
CrossFilter.CrossFilter.prototype.dimension = function(value) {};
/**
 * @record
 * @struct
 */
CrossFilter.Dimension = function() {};

/**
 * @param {!Array<TDimension>|TDimension|!CrossFilter.Selector<TDimension>} value
 * @return {!CrossFilter.Dimension}
 */
CrossFilter.Dimension.prototype.filter = function(value) {};

/**
 * @param {TDimension} value
 * @return {!CrossFilter.Dimension}
 */
CrossFilter.Dimension.prototype.filterExact = function(value) {};

/**
 * @param {!Array<TDimension>} value
 * @return {!CrossFilter.Dimension}
 */
CrossFilter.Dimension.prototype.filterRange = function(value) {};

/**
 * @param {!CrossFilter.Selector<TDimension>} value
 * @return {!CrossFilter.Dimension}
 */
CrossFilter.Dimension.prototype.filterFunction = function(value) {};

/**
 * @return {!CrossFilter.Dimension}
 */
CrossFilter.Dimension.prototype.filterAll = function() {};

/**
 * @param {number} k
 * @return {!Array<T>}
 */
CrossFilter.Dimension.prototype.top = function(k) {};

/**
 * @param {number} k
 * @return {!Array<T>}
 */
CrossFilter.Dimension.prototype.bottom = function(k) {};

/**
 * @return {void}
 */
CrossFilter.Dimension.prototype.dispose = function() {};

/**
 * @template TGroup
 * @param {function(TDimension): TGroup=} groupValue
 * @return {!CrossFilter.Group<T, TDimension, TDimension>|!CrossFilter.Group<T, TDimension, TGroup>}
 */
CrossFilter.Dimension.prototype.group = function(groupValue) {};

/**
 * @template TValue
 * @return {!CrossFilter.GroupAll<T, T>|!CrossFilter.GroupAll<T, TValue>}
 */
CrossFilter.Dimension.prototype.groupAll = function() {};
 /** @type {!CrossFilter.CrossFilterStatic} */
var crossfilter;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "crossfilter"
/** @const */
tsickle_declare_module.crossfilter = {};
 /** @type {!CrossFilter.CrossFilterStatic} */
tsickle_declare_module.crossfilter.crossfilter;

/* TODO: ExportAssignment in tsickle_declare_module.crossfilter */
