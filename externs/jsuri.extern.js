/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jsuri/index.d.ts:
/** @const */
var jsuri = {};

/** @typedef {(string|number|boolean)} */
jsuri.Primitive;

/**
 * @constructor
 * @struct
 * Creates a new Uri object
 * @param {string=} str
 */
jsuri.Uri = function(str) {};

/**
 * Define getter/setter methods
 * @param {string=} val
 * @return {string}
 */
jsuri.Uri.prototype.protocol = function(val) {};

/**
 * @param {string=} val
 * @return {string}
 */
jsuri.Uri.prototype.userInfo = function(val) {};

/**
 * @param {string=} val
 * @return {string}
 */
jsuri.Uri.prototype.host = function(val) {};

/**
 * @param {number=} val
 * @return {number}
 */
jsuri.Uri.prototype.port = function(val) {};

/**
 * @param {string=} val
 * @return {string}
 */
jsuri.Uri.prototype.path = function(val) {};

/**
 * @param {string=} val
 * @return {string}
 */
jsuri.Uri.prototype.anchor = function(val) {};

/**
 * if there is no protocol, the leading // can be enabled or disabled
 * @param {boolean=} val
 * @return {boolean}
 */
jsuri.Uri.prototype.hasAuthorityPrefix = function(val) {};

/**
 * @param {boolean=} val
 * @return {boolean}
 */
jsuri.Uri.prototype.isColonUri = function(val) {};

/**
 * Serializes the internal state of the query pairs
 * @param {string=} val
 * @return {string}
 */
jsuri.Uri.prototype.query = function(val) {};

/**
 * returns the first query param value found for the key
 * @param {string} key
 * @return {string}
 */
jsuri.Uri.prototype.getQueryParamValue = function(key) {};

/**
 * returns an array of query param values for the key
 * @param {string} key
 * @return {!Array<string>}
 */
jsuri.Uri.prototype.getQueryParamValues = function(key) {};

/**
 * removes query parameters
 * @param {string} key
 * @param {string=} val
 * @return {!jsuri.Uri}
 */
jsuri.Uri.prototype.deleteQueryParam = function(key, val) {};

/**
 * adds a query parameter
 * @param {string} key
 * @param {(string|number|boolean)} val
 * @param {number=} index
 * @return {!jsuri.Uri}
 */
jsuri.Uri.prototype.addQueryParam = function(key, val, index) {};

/**
 * test for the existence of a query parameter
 * @param {string} key
 * @return {boolean}
 */
jsuri.Uri.prototype.hasQueryParam = function(key) {};

/**
 * replaces query param values
 * @param {string} key
 * @param {(string|number|boolean)} newVal
 * @param {(string|number|boolean)=} oldVal
 * @return {!jsuri.Uri}
 */
jsuri.Uri.prototype.replaceQueryParam = function(key, newVal, oldVal) {};

/**
 * Define fluent setter methods (setProtocol, setHasAuthorityPrefix, etc)
 * @param {string} val
 * @return {!jsuri.Uri}
 */
jsuri.Uri.prototype.setProtocol = function(val) {};

/**
 * @param {boolean} val
 * @return {!jsuri.Uri}
 */
jsuri.Uri.prototype.setHasAuthorityPrefix = function(val) {};

/**
 * @param {boolean} val
 * @return {!jsuri.Uri}
 */
jsuri.Uri.prototype.setIsColonUri = function(val) {};

/**
 * @param {string} val
 * @return {!jsuri.Uri}
 */
jsuri.Uri.prototype.setUserInfo = function(val) {};

/**
 * @param {string} val
 * @return {!jsuri.Uri}
 */
jsuri.Uri.prototype.setHost = function(val) {};

/**
 * @param {number} val
 * @return {!jsuri.Uri}
 */
jsuri.Uri.prototype.setPort = function(val) {};

/**
 * @param {string} val
 * @return {!jsuri.Uri}
 */
jsuri.Uri.prototype.setPath = function(val) {};

/**
 * @param {string} val
 * @return {!jsuri.Uri}
 */
jsuri.Uri.prototype.setQuery = function(val) {};

/**
 * @param {string} val
 * @return {!jsuri.Uri}
 */
jsuri.Uri.prototype.setAnchor = function(val) {};

/**
 * Scheme name, colon and doubleslash, as required
 * @return {string}
 */
jsuri.Uri.prototype.scheme = function() {};

/**
 * Same as Mozilla nsIURI.prePath
 * @see https://developer.mozilla.org/en/nsIURI
 * @return {string}
 */
jsuri.Uri.prototype.origin = function() {};

/**
 * Adds a trailing slash to the path
 * @return {!jsuri.Uri}
 */
jsuri.Uri.prototype.addTrailingSlash = function() {};

/**
 * Serializes the internal state of the Uri object
 * @return {string}
 */
jsuri.Uri.prototype.toString = function() {};

/**
 * Clone a Uri object
 * @return {!jsuri.Uri}
 */
jsuri.Uri.prototype.clone = function() {};

/** @typedef {!jsuri.Uri} */
var Uri;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "jsuri"
/** @const */
tsickle_declare_module.jsuri = {};

/* TODO: ExportAssignment in tsickle_declare_module.jsuri */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "jsUri"
/** @const */
tsickle_declare_module.jsUri = {};

/* TODO: ExportAssignment in tsickle_declare_module.jsUri */
