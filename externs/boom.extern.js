/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/boom/index.d.ts:

/* TODO: ExportAssignment in  */
/** @const */
var Boom = {};
/**
 * @record
 * @struct
 */
Boom.BoomError = function() {};
 /** @type {boolean} */
Boom.BoomError.prototype.isBoom;
 /** @type {boolean} */
Boom.BoomError.prototype.isServer;
 /** @type {string} */
Boom.BoomError.prototype.message;
 /** @type {!Boom.Output} */
Boom.BoomError.prototype.output;
 /** @type {function(): string} */
Boom.BoomError.prototype.reformat;
 /** @type {boolean} */
Boom.BoomError.prototype.isMissing;
 /** @type {Data} */
Boom.BoomError.prototype.data;
/**
 * @record
 * @struct
 */
Boom.Output = function() {};
 /** @type {number} */
Boom.Output.prototype.statusCode;
 /** @type {!Object<string,string>} */
Boom.Output.prototype.headers;
 /** @type {!Boom.Payload} */
Boom.Output.prototype.payload;
/**
 * @record
 * @struct
 */
Boom.Payload = function() {};
 /** @type {number} */
Boom.Payload.prototype.statusCode;
 /** @type {string} */
Boom.Payload.prototype.error;
 /** @type {string} */
Boom.Payload.prototype.message;
 /** @type {?} */
Boom.Payload.prototype.attributes;

/**
 * Decorates an error with the boom properties
 * @see {\@link https://github.com/hapijs/boom#boomifyerror-options}
 * @param {!Error} error the error object to wrap. If error is already a boom object, it defaults to overriding the object with the new status code and message.
 * @param {{statusCode: number, message: string, override: boolean}=} options optional additional options
 * @return {!Boom.BoomError<null>}
 */
Boom.boomify = function(error, options) {};

/**
 * Decorates an error with the boom properties
 * @see {\@link https://github.com/hapijs/boom#wraperror-statuscode-message}
 * @param {!Error} error the error object to wrap. If error is already a boom object, returns back the same object.
 * @param {number=} statusCode optional HTTP status code. Defaults to 500.
 * @param {string=} message optional message string. If the error already has a message, it adds the message as a prefix. Defaults to no message.
 * @return {!Boom.BoomError<null>}
 */
Boom.wrap = function(error, statusCode, message) {};

/**
 * Generates an Error object with the boom decorations
 * @see {\@link https://github.com/hapijs/boom#createstatuscode-message-data}
 * @template Data
 * @param {number} statusCode an HTTP error code number. Must be greater or equal 400.
 * @param {string=} message optional message string.
 * @param {Data=} data additional error data set to error.data property.
 * @return {!Boom.BoomError<Data>}
 */
Boom.create = function(statusCode, message, data) {};

/**
 * Returns a 400 Bad Request error
 * @see {\@link https://github.com/hapijs/boom#boombadrequestmessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.badRequest = function(message, data) {};

/**
 * Returns a 401 Unauthorized error
 * @see {\@link https://github.com/hapijs/boom#boomunauthorizedmessage-scheme-attributes}
 * @param {string|null=} message optional message.
 * @param {string|!Array<string>=} scheme can be one of the following:
 *      * an authentication scheme name
 *      * an array of string values. These values will be separated by ', ' and set to the 'WWW-Authenticate' header.
 * @param {!Object<string,string>|(string|!Object<string,string>)=} attributes an object of values to use while setting the 'WWW-Authenticate' header. This value is only used when scheme is a string, otherwise it is ignored. Every key/value pair will be included in the 'WWW-Authenticate' in the format of 'key="value"' as well as in the response payload under the attributes key. Alternatively value can be a string which is use to set the value of the scheme, for example setting the token value for negotiate header. If string is used message parameter must be null. null and undefined will be replaced with an empty string. If attributes is set, message will be used as the 'error' segment of the 'WWW-Authenticate' header. If message is unset, the 'error' segment of the header will not be present and isMissing will be true on the error object.
 * @return {!Boom.BoomError<null>}
 */
Boom.unauthorized = function(message, scheme, attributes) {};

/**
 * Returns a 402 Payment Required error
 * @see {\@link https://github.com/hapijs/boom#boompaymentrequiredmessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.paymentRequired = function(message, data) {};

/**
 * Returns a 403 Forbidden error
 * @see {\@link https://github.com/hapijs/boom#boomforbiddenmessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.forbidden = function(message, data) {};

/**
 * Returns a 404 Not Found error
 * @see {\@link https://github.com/hapijs/boom#boomnotfoundmessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.notFound = function(message, data) {};

/**
 * Returns a 405 Method Not Allowed error
 * @see {\@link https://github.com/hapijs/boom#boommethodnotallowedmessage-data-allow}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @param {(string|!Array<string>)=} allow optional string or array of strings (to be combined and separated by ', ') which is set to the 'Allow' header.
 * @return {!Boom.BoomError<Data>}
 */
Boom.methodNotAllowed = function(message, data, allow) {};

/**
 * Returns a 406 Not Acceptable error
 * @see {\@link https://github.com/hapijs/boom#boomnotacceptablemessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.notAcceptable = function(message, data) {};

/**
 * Returns a 407 Proxy Authentication Required error
 * @see {\@link https://github.com/hapijs/boom#boomproxyauthrequiredmessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.proxyAuthRequired = function(message, data) {};

/**
 * Returns a 408 Request Time-out error
 * @see {\@link https://github.com/hapijs/boom#boomclienttimeoutmessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.clientTimeout = function(message, data) {};

/**
 * Returns a 409 Conflict error
 * @see {\@link https://github.com/hapijs/boom#boomconflictmessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.conflict = function(message, data) {};

/**
 * Returns a 410 Gone error
 * @see {\@link https://github.com/hapijs/boom#boomresourcegonemessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.resourceGone = function(message, data) {};

/**
 * Returns a 411 Length Required error
 * @see {\@link https://github.com/hapijs/boom#boomlengthrequiredmessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.lengthRequired = function(message, data) {};

/**
 * Returns a 412 Precondition Failed error
 * @see {\@link https://github.com/hapijs/boom#boompreconditionfailedmessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.preconditionFailed = function(message, data) {};

/**
 * Returns a 413 Request Entity Too Large error
 * @see {\@link https://github.com/hapijs/boom#boomentitytoolargemessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.entityTooLarge = function(message, data) {};

/**
 * Returns a 414 Request-URI Too Large error
 * @see {\@link https://github.com/hapijs/boom#boomuritoolongmessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.uriTooLong = function(message, data) {};

/**
 * Returns a 415 Unsupported Media Type error
 * @see {\@link https://github.com/hapijs/boom#boomunsupportedmediatypemessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.unsupportedMediaType = function(message, data) {};

/**
 * Returns a 416 Requested Range Not Satisfiable error
 * @see {\@link https://github.com/hapijs/boom#boomrangenotsatisfiablemessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.rangeNotSatisfiable = function(message, data) {};

/**
 * Returns a 417 Expectation Failed error
 * @see {\@link https://github.com/hapijs/boom#boomexpectationfailedmessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.expectationFailed = function(message, data) {};

/**
 * Returns a 418 I'm a Teapot error
 * @see {\@link https://github.com/hapijs/boom#boomteapotmessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.teapot = function(message, data) {};

/**
 * Returns a 422 Unprocessable Entity error
 * @see {\@link https://github.com/hapijs/boom#boombaddatamessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.badData = function(message, data) {};

/**
 * Returns a 423 Locked error
 * @see {\@link https://github.com/hapijs/boom#boomlockedmessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.locked = function(message, data) {};

/**
 * Returns a 428 Precondition Required error
 * @see {\@link https://github.com/hapijs/boom#boompreconditionrequiredmessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.preconditionRequired = function(message, data) {};

/**
 * Returns a 429 Too Many Requests error
 * @see {\@link https://github.com/hapijs/boom#boomtoomanyrequestsmessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.tooManyRequests = function(message, data) {};

/**
 * Returns a 451 Unavailable For Legal Reasons error
 * @see {\@link https://github.com/hapijs/boom#boomillegalmessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.illegal = function(message, data) {};

/**
 * Returns a 500 Internal Server Error error
 * Only 500 errors will hide your message from the end user. Your message is recorded in the server log.
 * @see {\@link https://github.com/hapijs/boom#boombadimplementationmessage-data---alias-internal}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.badImplementation = function(message, data) {};

/**
 * Returns a 500 Internal Server Error error
 * Only 500 errors will hide your message from the end user. Your message is recorded in the server log.
 * @see {\@link https://github.com/hapijs/boom#boombadimplementationmessage-data---alias-internal}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.internal = function(message, data) {};

/**
 * Returns a 501 Not Implemented error with your error message to the user
 * @see {\@link https://github.com/hapijs/boom#boomnotimplementedmessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.notImplemented = function(message, data) {};

/**
 * Returns a 502 Bad Gateway error with your error message to the user
 * @see {\@link https://github.com/hapijs/boom#boombadgatewaymessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.badGateway = function(message, data) {};

/**
 * Returns a 503 Service Unavailable error with your error message to the user
 * @see {\@link https://github.com/hapijs/boom#boomserverunavailablemessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.serverUnavailable = function(message, data) {};

/**
 * Returns a 504 Gateway Time-out error with your error message to the user
 * @see {\@link https://github.com/hapijs/boom#boomgatewaytimeoutmessage-data}
 * @template Data
 * @param {string=} message optional message.
 * @param {Data=} data optional additional error data.
 * @return {!Boom.BoomError<Data>}
 */
Boom.gatewayTimeout = function(message, data) {};
