/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/any-db-transaction/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */
/** @const */
var begin = {};
/**
 * @extends {Queryable}
 * @record
 * @struct
 */
begin.Transaction = function() {};

/**
 * Issue a COMMIT (or RELEASE ... in the case of nested transactions) statement to the database.
 * If a continuation is provided it will be called (possibly with an error) after the COMMIT
 * statement completes. The transaction object itself will be unusable after calling commit().
 * @param {function(!Error): void=} callback
 * @return {void}
 */
begin.Transaction.prototype.commit = function(callback) {};

/**
 * The same as Transaction.commit but issues a ROLLBACK. Again, the transaction will be unusable after calling this method.
 * @param {function(!Error): void=} callback
 * @return {void}
 */
begin.Transaction.prototype.rollback = function(callback) {};
/**
 * @record
 * @struct
 */
begin.TransactionOptions = function() {};
 /** @type {?} */
begin.TransactionOptions.prototype.adapter;
 /** @type {string} */
begin.TransactionOptions.prototype.begin;
 /** @type {string} */
begin.TransactionOptions.prototype.commit;
 /** @type {string} */
begin.TransactionOptions.prototype.rollback;
 /** @type {function(!Error, !begin.Transaction): void} */
begin.TransactionOptions.prototype.callback;
 /** @type {boolean} */
begin.TransactionOptions.prototype.autoRollback;

/**
 * Start a transaction
 * @param {?} q
 * @param {!begin.TransactionOptions|function(!Error, !begin.Transaction): void|string=} options_or_callback_or_beginStatement
 * @param {function(!Error, !begin.Transaction): void|string=} callback_or_beginStatement
 * @param {function(!Error, !begin.Transaction): void=} callback
 * @return {!begin.Transaction}
 */
function begin(q, options_or_callback_or_beginStatement, callback_or_beginStatement, callback) {}

/* TODO: ExportAssignment in  */
