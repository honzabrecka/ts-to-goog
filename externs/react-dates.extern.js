/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/react-dates/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ExportAssignment in  */
/** @const */
var momentPropTypes = {};

/** @typedef {!moment.Moment} */
momentPropTypes.momentObj;

/** @typedef {?} */
momentPropTypes.momentString;

/** @typedef {?} */
momentPropTypes.momentDurationObj;
/** @const */
var ReactDates = {};

/** @typedef {string} */
ReactDates.AnchorDirectionShape;

/** @typedef {string} */
ReactDates.FocusedInputShape;

/** @typedef {string} */
ReactDates.OrientationShape;

/** @typedef {string} */
ReactDates.ScrollableOrientationShape;
/**
 * @record
 * @struct
 */
ReactDates.DateRangePickerShape = function() {};
 /** @type {!moment.Moment} */
ReactDates.DateRangePickerShape.prototype.startDate;
 /** @type {!moment.Moment} */
ReactDates.DateRangePickerShape.prototype.endDate;
 /** @type {function({startDate: !moment.Moment, endDate: !moment.Moment}): void} */
ReactDates.DateRangePickerShape.prototype.onDatesChange;
 /** @type {string} */
ReactDates.DateRangePickerShape.prototype.focusedInput;
 /** @type {function(string): void} */
ReactDates.DateRangePickerShape.prototype.onFocusChange;
 /** @type {string} */
ReactDates.DateRangePickerShape.prototype.startDateId;
 /** @type {string} */
ReactDates.DateRangePickerShape.prototype.startDatePlaceholderText;
 /** @type {string} */
ReactDates.DateRangePickerShape.prototype.endDateId;
 /** @type {string} */
ReactDates.DateRangePickerShape.prototype.endDatePlaceholderText;
 /** @type {boolean} */
ReactDates.DateRangePickerShape.prototype.disabled;
 /** @type {boolean} */
ReactDates.DateRangePickerShape.prototype.required;
 /** @type {boolean} */
ReactDates.DateRangePickerShape.prototype.readOnly;
 /** @type {string} */
ReactDates.DateRangePickerShape.prototype.screenReaderInputMessage;
 /** @type {boolean} */
ReactDates.DateRangePickerShape.prototype.showClearDates;
 /** @type {boolean} */
ReactDates.DateRangePickerShape.prototype.showDefaultInputIcon;
 /** @type {(string|!JSX.Element)} */
ReactDates.DateRangePickerShape.prototype.customInputIcon;
 /** @type {(string|!JSX.Element)} */
ReactDates.DateRangePickerShape.prototype.customArrowIcon;
 /** @type {(string|!JSX.Element)} */
ReactDates.DateRangePickerShape.prototype.customCloseIcon;
 /** @type {string} */
ReactDates.DateRangePickerShape.prototype.orientation;
 /** @type {string} */
ReactDates.DateRangePickerShape.prototype.anchorDirection;
 /** @type {number} */
ReactDates.DateRangePickerShape.prototype.horizontalMargin;
 /** @type {boolean} */
ReactDates.DateRangePickerShape.prototype.withPortal;
 /** @type {boolean} */
ReactDates.DateRangePickerShape.prototype.withFullScreenPortal;
 /** @type {function(): !moment.Moment} */
ReactDates.DateRangePickerShape.prototype.initialVisibleMonth;
 /** @type {number} */
ReactDates.DateRangePickerShape.prototype.numberOfMonths;
 /** @type {boolean} */
ReactDates.DateRangePickerShape.prototype.keepOpenOnDateSelect;
 /** @type {boolean} */
ReactDates.DateRangePickerShape.prototype.reopenPickerOnClearDates;
 /** @type {function(): (string|!JSX.Element)} */
ReactDates.DateRangePickerShape.prototype.renderCalendarInfo;
 /** @type {boolean} */
ReactDates.DateRangePickerShape.prototype.hideKeyboardShortcutsPanel;
 /** @type {boolean} */
ReactDates.DateRangePickerShape.prototype.isRTL;
 /** @type {(string|!JSX.Element)} */
ReactDates.DateRangePickerShape.prototype.navPrev;
 /** @type {(string|!JSX.Element)} */
ReactDates.DateRangePickerShape.prototype.navNext;
 /** @type {function(function(!React.MouseEvent<!HTMLSpanElement>): void): void} */
ReactDates.DateRangePickerShape.prototype.onPrevMonthClick;
 /** @type {function(function(!React.MouseEvent<!HTMLSpanElement>): void): void} */
ReactDates.DateRangePickerShape.prototype.onNextMonthClick;
 /** @type {function({startDate: !moment.Moment, endDate: !moment.Moment}): void} */
ReactDates.DateRangePickerShape.prototype.onClose;
 /** @type {function(!moment.Moment): (string|!JSX.Element)} */
ReactDates.DateRangePickerShape.prototype.renderDay;
 /** @type {number} */
ReactDates.DateRangePickerShape.prototype.minimumNights;
 /** @type {boolean} */
ReactDates.DateRangePickerShape.prototype.enableOutsideDays;
 /** @type {function(?): boolean} */
ReactDates.DateRangePickerShape.prototype.isDayBlocked;
 /** @type {function(?): boolean} */
ReactDates.DateRangePickerShape.prototype.isOutsideRange;
 /** @type {function(?): boolean} */
ReactDates.DateRangePickerShape.prototype.isDayHighlighted;
 /** @type {(string|function(): string)} */
ReactDates.DateRangePickerShape.prototype.displayFormat;
 /** @type {string} */
ReactDates.DateRangePickerShape.prototype.monthFormat;
 /** @type {{closeDatePicker: string, clearDates: string, focusStartDate: string, jumpToPrevMonth: string, jumpToNextMonth: string, keyboardShortcuts: string, showKeyboardShortcutsPanel: string, hideKeyboardShortcutsPanel: string, openThisPanel: string, enterKey: string, leftArrowRightArrow: string, upArrowDownArrow: string, pageUpPageDown: string, homeEnd: string, escape: string, questionMark: string, selectFocusedDate: string, moveFocusByOneDay: string, moveFocusByOneWeek: string, moveFocusByOneMonth: string, moveFocustoStartAndEndOfWeek: string, returnFocusToInput: string, keyboardNavigationInstructions: string, chooseAvailableStartDate: function(string): string, chooseAvailableEndDate: function(string): string, dateIsUnavailable: function(string): string}} */
ReactDates.DateRangePickerShape.prototype.phrases;

/** @typedef {!React.ClassicComponentClass<!ReactDates.DateRangePickerShape>} */
ReactDates.DateRangePicker;
 /** @type {!React.ClassicComponentClass<!ReactDates.DateRangePickerShape>} */
ReactDates.DateRangePicker;
/**
 * @record
 * @struct
 */
ReactDates.SingleDatePickerShape = function() {};
 /** @type {!moment.Moment} */
ReactDates.SingleDatePickerShape.prototype.date;
 /** @type {function(!moment.Moment): void} */
ReactDates.SingleDatePickerShape.prototype.onDateChange;
 /** @type {boolean} */
ReactDates.SingleDatePickerShape.prototype.focused;
 /** @type {function({focused: boolean}): void} */
ReactDates.SingleDatePickerShape.prototype.onFocusChange;
 /** @type {string} */
ReactDates.SingleDatePickerShape.prototype.id;
 /** @type {string} */
ReactDates.SingleDatePickerShape.prototype.placeholder;
 /** @type {boolean} */
ReactDates.SingleDatePickerShape.prototype.disabled;
 /** @type {boolean} */
ReactDates.SingleDatePickerShape.prototype.required;
 /** @type {boolean} */
ReactDates.SingleDatePickerShape.prototype.readOnly;
 /** @type {string} */
ReactDates.SingleDatePickerShape.prototype.screenReaderInputMessage;
 /** @type {boolean} */
ReactDates.SingleDatePickerShape.prototype.showClearDate;
 /** @type {(string|!JSX.Element)} */
ReactDates.SingleDatePickerShape.prototype.customCloseIcon;
 /** @type {boolean} */
ReactDates.SingleDatePickerShape.prototype.showDefaultInputIcon;
 /** @type {(string|!JSX.Element)} */
ReactDates.SingleDatePickerShape.prototype.customInputIcon;
 /** @type {string} */
ReactDates.SingleDatePickerShape.prototype.orientation;
 /** @type {string} */
ReactDates.SingleDatePickerShape.prototype.anchorDirection;
 /** @type {number} */
ReactDates.SingleDatePickerShape.prototype.horizontalMargin;
 /** @type {boolean} */
ReactDates.SingleDatePickerShape.prototype.withPortal;
 /** @type {boolean} */
ReactDates.SingleDatePickerShape.prototype.withFullScreenPortal;
 /** @type {function(): !moment.Moment} */
ReactDates.SingleDatePickerShape.prototype.initialVisibleMonth;
 /** @type {number} */
ReactDates.SingleDatePickerShape.prototype.numberOfMonths;
 /** @type {boolean} */
ReactDates.SingleDatePickerShape.prototype.keepOpenOnDateSelect;
 /** @type {boolean} */
ReactDates.SingleDatePickerShape.prototype.reopenPickerOnClearDates;
 /** @type {function(): (string|!JSX.Element)} */
ReactDates.SingleDatePickerShape.prototype.renderCalendarInfo;
 /** @type {boolean} */
ReactDates.SingleDatePickerShape.prototype.hideKeyboardShortcutsPanel;
 /** @type {boolean} */
ReactDates.SingleDatePickerShape.prototype.isRTL;
 /** @type {(string|!JSX.Element)} */
ReactDates.SingleDatePickerShape.prototype.navPrev;
 /** @type {(string|!JSX.Element)} */
ReactDates.SingleDatePickerShape.prototype.navNext;
 /** @type {function(function(!React.MouseEvent<!HTMLSpanElement>): void): void} */
ReactDates.SingleDatePickerShape.prototype.onPrevMonthClick;
 /** @type {function(function(!React.MouseEvent<!HTMLSpanElement>): void): void} */
ReactDates.SingleDatePickerShape.prototype.onNextMonthClick;
 /** @type {function({startDate: !moment.Moment, endDate: !moment.Moment}): void} */
ReactDates.SingleDatePickerShape.prototype.onClose;
 /** @type {function(!moment.Moment): (string|!JSX.Element)} */
ReactDates.SingleDatePickerShape.prototype.renderDay;
 /** @type {boolean} */
ReactDates.SingleDatePickerShape.prototype.enableOutsideDays;
 /** @type {function(?): boolean} */
ReactDates.SingleDatePickerShape.prototype.isDayBlocked;
 /** @type {function(?): boolean} */
ReactDates.SingleDatePickerShape.prototype.isOutsideRange;
 /** @type {function(?): boolean} */
ReactDates.SingleDatePickerShape.prototype.isDayHighlighted;
 /** @type {(string|function(): string)} */
ReactDates.SingleDatePickerShape.prototype.displayFormat;
 /** @type {string} */
ReactDates.SingleDatePickerShape.prototype.monthFormat;
 /** @type {{closeDatePicker: string, clearDate: string, jumpToPrevMonth: string, jumpToNextMonth: string, keyboardShortcuts: string, showKeyboardShortcutsPanel: string, hideKeyboardShortcutsPanel: string, openThisPanel: string, enterKey: string, leftArrowRightArrow: string, upArrowDownArrow: string, pageUpPageDown: string, homeEnd: string, escape: string, questionMark: string, selectFocusedDate: string, moveFocusByOneDay: string, moveFocusByOneWeek: string, moveFocusByOneMonth: string, moveFocustoStartAndEndOfWeek: string, returnFocusToInput: string, keyboardNavigationInstructions: string, chooseAvailableDate: function(string): string, dateIsUnavailable: function(string): string}} */
ReactDates.SingleDatePickerShape.prototype.phrases;

/** @typedef {!React.ClassicComponentClass<!ReactDates.SingleDatePickerShape>} */
ReactDates.SingleDatePicker;
 /** @type {!React.ClassicComponentClass<!ReactDates.SingleDatePickerShape>} */
ReactDates.SingleDatePicker;
/**
 * @record
 * @struct
 */
ReactDates.DayPickerRangeControllerShape = function() {};
 /** @type {!moment.Moment} */
ReactDates.DayPickerRangeControllerShape.prototype.startDate;
 /** @type {!moment.Moment} */
ReactDates.DayPickerRangeControllerShape.prototype.endDate;
 /** @type {function({startDate: !moment.Moment, endDate: !moment.Moment}): void} */
ReactDates.DayPickerRangeControllerShape.prototype.onDatesChange;
 /** @type {string} */
ReactDates.DayPickerRangeControllerShape.prototype.focusedInput;
 /** @type {function(string): void} */
ReactDates.DayPickerRangeControllerShape.prototype.onFocusChange;
 /** @type {boolean} */
ReactDates.DayPickerRangeControllerShape.prototype.enableOutsideDays;
 /** @type {number} */
ReactDates.DayPickerRangeControllerShape.prototype.numberOfMonths;
 /** @type {string} */
ReactDates.DayPickerRangeControllerShape.prototype.orientation;
 /** @type {boolean} */
ReactDates.DayPickerRangeControllerShape.prototype.withPortal;
 /** @type {function(): !moment.Moment} */
ReactDates.DayPickerRangeControllerShape.prototype.initialVisibleMonth;
 /** @type {function(): (string|!JSX.Element)} */
ReactDates.DayPickerRangeControllerShape.prototype.renderCalendarInfo;
 /** @type {function(?): void} */
ReactDates.DayPickerRangeControllerShape.prototype.onOutsideClick;
 /** @type {boolean} */
ReactDates.DayPickerRangeControllerShape.prototype.keepOpenOnDateSelect;
 /** @type {(string|!JSX.Element)} */
ReactDates.DayPickerRangeControllerShape.prototype.navPrev;
 /** @type {(string|!JSX.Element)} */
ReactDates.DayPickerRangeControllerShape.prototype.navNext;
 /** @type {boolean} */
ReactDates.DayPickerRangeControllerShape.prototype.hideKeyboardShortcutsPanel;
 /** @type {function(function(!React.MouseEvent<!HTMLSpanElement>): void): void} */
ReactDates.DayPickerRangeControllerShape.prototype.onPrevMonthClick;
 /** @type {function(function(!React.MouseEvent<!HTMLSpanElement>): void): void} */
ReactDates.DayPickerRangeControllerShape.prototype.onNextMonthClick;
 /** @type {function(!moment.Moment): (string|!JSX.Element)} */
ReactDates.DayPickerRangeControllerShape.prototype.renderDay;
 /** @type {number} */
ReactDates.DayPickerRangeControllerShape.prototype.minimumNights;
 /** @type {function(?): boolean} */
ReactDates.DayPickerRangeControllerShape.prototype.isOutsideRange;
 /** @type {function(?): boolean} */
ReactDates.DayPickerRangeControllerShape.prototype.isDayBlocked;
 /** @type {function(?): boolean} */
ReactDates.DayPickerRangeControllerShape.prototype.isDayHighlighted;
 /** @type {string} */
ReactDates.DayPickerRangeControllerShape.prototype.monthFormat;
 /** @type {{focusStartDate: string, clearDates: string, keyboardNavigationInstructions: string}} */
ReactDates.DayPickerRangeControllerShape.prototype.phrases;

/** @typedef {!React.ClassicComponentClass<!ReactDates.DayPickerRangeControllerShape>} */
ReactDates.DayPickerRangeController;
 /** @type {!React.ClassicComponentClass<!ReactDates.DayPickerRangeControllerShape>} */
ReactDates.DayPickerRangeController;
 /** @type {function(!moment.Moment, !moment.Moment): boolean} */
ReactDates.isInclusivelyAfterDay;
 /** @type {function(!moment.Moment, !moment.Moment): boolean} */
ReactDates.isInclusivelyBeforeDay;
 /** @type {function(!moment.Moment, !moment.Moment): boolean} */
ReactDates.isNextDay;
 /** @type {function(!moment.Moment, !moment.Moment): boolean} */
ReactDates.isSameDay;
 /** @type {function((string|number|void|!moment.Moment|!Date|!Array<(string|number)>|!moment.MomentInputObject), (string|!moment.MomentBuiltinFormat|!Array<(string|!moment.MomentBuiltinFormat)>)): string} */
ReactDates.toISODateString;
 /** @type {function((string|number|void|!moment.Moment|!Date|!Array<(string|number)>|!moment.MomentInputObject), (string|!moment.MomentBuiltinFormat|!Array<(string|!moment.MomentBuiltinFormat)>)): string} */
ReactDates.toLocalizedDateString;
 /** @type {function((string|number|void|!moment.Moment|!Date|!Array<(string|number)>|!moment.MomentInputObject), (string|!moment.MomentBuiltinFormat|!Array<(string|!moment.MomentBuiltinFormat)>)): !moment.Moment} */
ReactDates.toMomentObject;
