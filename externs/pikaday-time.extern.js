/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/pikaday-time/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: NamespaceExportDeclaration in  */

/* TODO: ExportAssignment in  */

/**
 * @constructor
 * @struct
 * @param {!Pikaday.PikadayOptions} options
 */
function Pikaday(options) {}
 /** @type {!HTMLElement} */
Pikaday.prototype.el;

/**
 * Extends the existing configuration options for Pikaday object with the options provided.
 * Can be used to change/extend the configurations on runtime.
 * @param {!Pikaday.PikadayOptions} options full/partial configuration options.
 * @return {!Pikaday.PikadayOptions}
 */
Pikaday.prototype.config = function(options) {};

/**
 * Returns the selected date in a string format. If Moment.js exists
 * (recommended) then Pikaday can return any format that Moment
 * understands, otherwise you're stuck with JavaScript's default.
 * @param {string=} format
 * @return {string}
 */
Pikaday.prototype.toString = function(format) {};

/**
 * Returns a JavaScript Date object for the selected day, or null if
 * no date is selected.
 * @return {!Date}
 */
Pikaday.prototype.getDate = function() {};

/**
 * Set the current selection. This will be restricted within the bounds
 * of minDate and maxDate options if they're specified. A boolean (true)
 * can optionally be passed as the second parameter to prevent triggering
 * of the onSelect callback, allowing the date to be set silently.
 * @param {(string|!Date)} date
 * @param {boolean=} triggerOnSelect
 * @return {void}
 */
Pikaday.prototype.setDate = function(date, triggerOnSelect) {};

/**
 * Returns a Moment.js object for the selected date (Moment must be
 * loaded before Pikaday).
 * @return {!moment.Moment}
 */
Pikaday.prototype.getMoment = function() {};

/**
 * Set the current selection with a Moment.js object (see setDate).
 * @param {?} moment
 * @return {void}
 */
Pikaday.prototype.setMoment = function(moment) {};

/**
 * Change the current view to see a specific date.
 * @param {!Date} date
 * @return {void}
 */
Pikaday.prototype.gotoDate = function(date) {};

/**
 * Shortcut for picker.gotoDate(new Date())
 * @return {void}
 */
Pikaday.prototype.gotoToday = function() {};

/**
 * Change the current view by month (0: January, 1: Februrary, etc).
 * @param {number} monthIndex
 * @return {void}
 */
Pikaday.prototype.gotoMonth = function(monthIndex) {};

/**
 * Go to the next month (this will change year if necessary).
 * @return {void}
 */
Pikaday.prototype.nextMonth = function() {};

/**
 * Go to the previous month (this will change year if necessary).
 * @return {void}
 */
Pikaday.prototype.prevMonth = function() {};

/**
 * Change the year being viewed.
 * @param {number} year
 * @return {void}
 */
Pikaday.prototype.gotoYear = function(year) {};

/**
 * Update the minimum/earliest date that can be selected.
 * @param {!Date} date
 * @return {void}
 */
Pikaday.prototype.setMinDate = function(date) {};

/**
 * Update the maximum/latest date that can be selected.
 * @param {!Date} date
 * @return {void}
 */
Pikaday.prototype.setMaxDate = function(date) {};

/**
 * Update the range start date. For using two Pikaday instances to
 * select a date range.
 * @param {!Date} date
 * @return {void}
 */
Pikaday.prototype.setStartRange = function(date) {};

/**
 * Update the range end date. For using two Pikaday instances to select
 * a date range.
 * @param {!Date} date
 * @return {void}
 */
Pikaday.prototype.setEndRange = function(date) {};

/**
 * Update the HTML.
 * @param {boolean} force
 * @return {void}
 */
Pikaday.prototype.draw = function(force) {};

/**
 * Returns true if the picker is visible.
 * @return {boolean}
 */
Pikaday.prototype.isVisible = function() {};

/**
 * Make the picker visible.
 * @return {void}
 */
Pikaday.prototype.show = function() {};

/**
 * Hide the picker making it invisible.
 * @return {void}
 */
Pikaday.prototype.hide = function() {};

/**
 * Recalculate and change the position of the picker.
 * @return {void}
 */
Pikaday.prototype.adjustPosition = function() {};

/**
 * Hide the picker and remove all event listeners - no going back!
 * @return {void}
 */
Pikaday.prototype.destroy = function() {};
/**
 * @record
 * @struct
 */
Pikaday.PikadayI18nConfig = function() {};
 /** @type {string} */
Pikaday.PikadayI18nConfig.prototype.previousMonth;
 /** @type {string} */
Pikaday.PikadayI18nConfig.prototype.nextMonth;
 /** @type {!Array<string>} */
Pikaday.PikadayI18nConfig.prototype.months;
 /** @type {!Array<string>} */
Pikaday.PikadayI18nConfig.prototype.weekdays;
 /** @type {!Array<string>} */
Pikaday.PikadayI18nConfig.prototype.weekdaysShort;
/**
 * @record
 * @struct
 */
Pikaday.PikadayOptions = function() {};
 /** @type {!HTMLElement} */
Pikaday.PikadayOptions.prototype.field;
 /** @type {string} */
Pikaday.PikadayOptions.prototype.format;
 /** @type {!HTMLElement} */
Pikaday.PikadayOptions.prototype.trigger;
 /** @type {boolean} */
Pikaday.PikadayOptions.prototype.bound;
 /** @type {string} */
Pikaday.PikadayOptions.prototype.position;
 /** @type {boolean} */
Pikaday.PikadayOptions.prototype.reposition;
 /** @type {!HTMLElement} */
Pikaday.PikadayOptions.prototype.container;
 /** @type {!Date} */
Pikaday.PikadayOptions.prototype.defaultDate;
 /** @type {boolean} */
Pikaday.PikadayOptions.prototype.setDefaultDate;
 /** @type {number} */
Pikaday.PikadayOptions.prototype.firstDay;
 /** @type {!Date} */
Pikaday.PikadayOptions.prototype.minDate;
 /** @type {!Date} */
Pikaday.PikadayOptions.prototype.maxDate;
 /** @type {boolean} */
Pikaday.PikadayOptions.prototype.disableWeekends;
 /** @type {(number|!Array<number>)} */
Pikaday.PikadayOptions.prototype.yearRange;
 /** @type {boolean} */
Pikaday.PikadayOptions.prototype.showWeekNumber;
 /** @type {boolean} */
Pikaday.PikadayOptions.prototype.isRTL;
 /** @type {!Pikaday.PikadayI18nConfig} */
Pikaday.PikadayOptions.prototype.i18n;
 /** @type {string} */
Pikaday.PikadayOptions.prototype.yearSuffix;
 /** @type {boolean} */
Pikaday.PikadayOptions.prototype.showMonthAfterYear;
 /** @type {boolean} */
Pikaday.PikadayOptions.prototype.showDaysInNextAndPreviousMonths;
 /** @type {number} */
Pikaday.PikadayOptions.prototype.numberOfMonths;
 /** @type {string} */
Pikaday.PikadayOptions.prototype.mainCalendar;
 /** @type {string} */
Pikaday.PikadayOptions.prototype.theme;
 /** @type {boolean} */
Pikaday.PikadayOptions.prototype.showTime;
 /** @type {boolean} */
Pikaday.PikadayOptions.prototype.showMinutes;
 /** @type {boolean} */
Pikaday.PikadayOptions.prototype.showSeconds;
 /** @type {boolean} */
Pikaday.PikadayOptions.prototype.use24hour;
 /** @type {number} */
Pikaday.PikadayOptions.prototype.incrementHourBy;
 /** @type {number} */
Pikaday.PikadayOptions.prototype.incrementMinuteBy;
 /** @type {number} */
Pikaday.PikadayOptions.prototype.incrementSecondBy;
 /** @type {boolean} */
Pikaday.PikadayOptions.prototype.autoClose;
 /** @type {string} */
Pikaday.PikadayOptions.prototype.timeLabel;

/**
 * Callback function that gets passed a Date object for each day
 * in view. Should return true to disable selection of that day.
 * @param {!Date} date
 * @return {boolean}
 */
Pikaday.PikadayOptions.prototype.disableDayFn = function(date) {};

/**
 * Callback function for when a date is selected.
 * @param {!Date} date
 * @return {void}
 */
Pikaday.PikadayOptions.prototype.onSelect = function(date) {};

/**
 * Callback function for when the picker becomes visible.
 * @return {void}
 */
Pikaday.PikadayOptions.prototype.onOpen = function() {};

/**
 * Callback function for when the picker is hidden.
 * @return {void}
 */
Pikaday.PikadayOptions.prototype.onClose = function() {};

/**
 * Callback function for when the picker draws a new month.
 * @return {void}
 */
Pikaday.PikadayOptions.prototype.onDraw = function() {};
