/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/memcached/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ExportAssignment in  */

/**
 * @constructor
 * @struct
 * Connect to a single Memcached server or cluster
 * @param {(string|!Array<string>|!Object<string,number>)} location Server locations
 * @param {!Memcached.options=} options options
 */
function Memcached(location, options) {}
 /** @type {!Memcached.options} */
Memcached.config;

/**
 * Touches the given key.
 * @param {string} key The key
 * @param {number} lifetime After how long should the key expire measured in seconds
 * @param {function(?): void} cb
 * @return {void}
 */
Memcached.prototype.touch = function(key, lifetime, cb) {};

/**
 * Get the value for the given key.
 * @param {string} key The key
 * @param {function(?, ?): void} cb
 * @return {void}
 */
Memcached.prototype.get = function(key, cb) {};

/**
 * Get the value and the CAS id.
 * @param {string} key The key
 * @param {function(?, ?): void} cb
 * @return {void}
 */
Memcached.prototype.gets = function(key, cb) {};

/**
 * Retrieves a bunch of values from multiple keys.
 * @param {!Array<string>} keys all the keys that needs to be fetched
 * @param {function(?, !Object<string,?>): void} cb
 * @return {void}
 */
Memcached.prototype.getMulti = function(keys, cb) {};

/**
 * Stores a new value in Memcached.
 * 
 * @param {string} key The key
 * @param {?} value Either a buffer, JSON, number or string that you want to store.
 * @param {number} lifetime
 * @param {function(?, boolean): void} cb
 * @return {void}
 */
Memcached.prototype.set = function(key, value, lifetime, cb) {};

/**
 * Replaces the value in memcached.
 * @param {string} key The key
 * @param {?} value Either a buffer, JSON, number or string that you want to store.
 * @param {number} lifetime
 * @param {function(?, boolean): void} cb
 * @return {void}
 */
Memcached.prototype.replace = function(key, value, lifetime, cb) {};

/**
 * Add the value, only if it's not in memcached already.
 * @param {string} key The key
 * @param {?} value Either a buffer, JSON, number or string that you want to store.
 * @param {number} lifetime
 * @param {function(?, boolean): void} cb
 * @return {void}
 */
Memcached.prototype.add = function(key, value, lifetime, cb) {};

/**
 * Add the value, only if it matches the given CAS value.
 * @param {string} key The key
 * @param {?} value Either a buffer, JSON, number or string that you want to store.
 * @param {string} cas
 * @param {number} lifetime
 * @param {function(?, boolean): void} cb
 * @return {void}
 */
Memcached.prototype.cas = function(key, value, cas, lifetime, cb) {};

/**
 * Add the given value string to the value of an existing item.
 * @param {string} key The key
 * @param {?} value Either a buffer, JSON, number or string that you want to store.
 * @param {function(?, boolean): void} cb
 * @return {void}
 */
Memcached.prototype.append = function(key, value, cb) {};

/**
 * Add the given value string to the value of an existing item.
 * @param {string} key The key
 * @param {?} value Either a buffer, JSON, number or string that you want to store.
 * @param {function(?, boolean): void} cb
 * @return {void}
 */
Memcached.prototype.prepend = function(key, value, cb) {};

/**
 * Increment a given key.
 * @param {string} key The key
 * @param {number} amount The increment
 * @param {function(?, (number|boolean)): void} cb
 * @return {void}
 */
Memcached.prototype.incr = function(key, amount, cb) {};

/**
 * Decrement a given key.
 * @param {string} key The key
 * @param {number} amount The decrement
 * @param {function(?, (number|boolean)): void} cb
 * @return {void}
 */
Memcached.prototype.decr = function(key, amount, cb) {};

/**
 * Remove the key from memcached.
 * @param {string} key The key
 * @param {function(?, boolean): void} cb
 * @return {void}
 */
Memcached.prototype.del = function(key, cb) {};

/**
 * Retrieves the version number of your server.
 * @param {function(?, !Array<!Memcached.VersionData>): void} cb
 * @return {void}
 */
Memcached.prototype.version = function(cb) {};

/**
 * Retrieves your stats settings.
 * @param {function(?, !Array<!Memcached.StatusData>): void} cb
 * @return {void}
 */
Memcached.prototype.settings = function(cb) {};

/**
 * Retrieves stats from your memcached server.
 * @param {function(?, !Array<!Memcached.StatusData>): void} cb
 * @return {void}
 */
Memcached.prototype.stats = function(cb) {};

/**
 * Retrieves stats slabs information.
 * @param {function(?, !Array<!Memcached.StatusData>): void} cb
 * @return {void}
 */
Memcached.prototype.slabs = function(cb) {};

/**
 * Retrieves stats items information.
 * @param {function(?, !Array<!Memcached.StatusData>): void} cb
 * @return {void}
 */
Memcached.prototype.items = function(cb) {};

/**
 * Inspect cache, see examples for a detailed explanation.
 * @param {string} server
 * @param {number} slabid
 * @param {number} number
 * @param {function(?, (!Memcached.CacheDumpData|!Array<!Memcached.CacheDumpData>)): void} cb
 * @return {void}
 */
Memcached.prototype.cachedump = function(server, slabid, number, cb) {};

/**
 * Flushes the memcached server.
 * @param {function(?, !Array<boolean>): void} cb
 * @return {void}
 */
Memcached.prototype.flush = function(cb) {};

/**
 * Register event listener
 * @param {string} event
 * @param {function(!Memcached.IssueData): void} cb
 * @return {Memcached}
 */
Memcached.prototype.on = function(event, cb) {};

/**
 * Closes all active memcached connections.
 * @return {void}
 */
Memcached.prototype.end = function() {};
/**
 * @record
 * @struct
 */
Memcached.IssueData = function() {};
 /** @type {string} */
Memcached.IssueData.prototype.server;
 /** @type {!Array<?>} */
Memcached.IssueData.prototype.tokens;
 /** @type {!Array<string>} */
Memcached.IssueData.prototype.messages;
 /** @type {number} */
Memcached.IssueData.prototype.failures;
 /** @type {number} */
Memcached.IssueData.prototype.totalFailures;
 /** @type {number} */
Memcached.IssueData.prototype.totalReconnectsAttempted;
 /** @type {number} */
Memcached.IssueData.prototype.totalReconnectsSuccess;
 /** @type {number} */
Memcached.IssueData.prototype.totalReconnectsFailed;
 /** @type {number} */
Memcached.IssueData.prototype.totalDownTime;
/**
 * @record
 * @struct
 */
Memcached.CommandData = function() {};
 /** @type {number} */
Memcached.CommandData.prototype.start;
 /** @type {number} */
Memcached.CommandData.prototype.execution;
 /** @type {string} */
Memcached.CommandData.prototype.type;
 /** @type {string} */
Memcached.CommandData.prototype.command;
 /** @type {!Array<!Array<?>>} */
Memcached.CommandData.prototype.validate;
 /** @type {string} */
Memcached.CommandData.prototype.cas;
 /** @type {boolean} */
Memcached.CommandData.prototype.redundancyEnabled;
 /** @type {string} */
Memcached.CommandData.prototype.key;
 /** @type {?} */
Memcached.CommandData.prototype.value;
 /** @type {number} */
Memcached.CommandData.prototype.lifetime;

/**
 * @param {...?} args
 * @return {?}
 */
Memcached.CommandData.prototype.callback = function(args) {};
/**
 * @record
 * @struct
 */
Memcached.StatusData = function() {};
 /** @type {string} */
Memcached.StatusData.prototype.server;

/* TODO: IndexSignature: Memcached */
/**
 * @extends {Memcached.StatusData}
 * @record
 * @struct
 */
Memcached.VersionData = function() {};
 /** @type {string} */
Memcached.VersionData.prototype.version;
 /** @type {string} */
Memcached.VersionData.prototype.major;
 /** @type {string} */
Memcached.VersionData.prototype.minor;
 /** @type {string} */
Memcached.VersionData.prototype.bugfix;
/**
 * @record
 * @struct
 */
Memcached.CacheDumpData = function() {};
 /** @type {string} */
Memcached.CacheDumpData.prototype.key;
 /** @type {number} */
Memcached.CacheDumpData.prototype.b;
 /** @type {number} */
Memcached.CacheDumpData.prototype.s;

/** @typedef {string} */
Memcached.EventNames;

/** @typedef {(string|!Array<string>|!Object<string,number>)} */
Memcached.Location;
/**
 * @record
 * @struct
 */
Memcached.options = function() {};
 /** @type {number} */
Memcached.options.prototype.maxKeySize;
 /** @type {number} */
Memcached.options.prototype.maxExpiration;
 /** @type {number} */
Memcached.options.prototype.maxValue;
 /** @type {number} */
Memcached.options.prototype.poolSize;
 /** @type {string} */
Memcached.options.prototype.algorithm;
 /** @type {number} */
Memcached.options.prototype.reconnect;
 /** @type {number} */
Memcached.options.prototype.timeout;
 /** @type {number} */
Memcached.options.prototype.retries;
 /** @type {number} */
Memcached.options.prototype.failures;
 /** @type {number} */
Memcached.options.prototype.retry;
 /** @type {boolean} */
Memcached.options.prototype.remove;
 /** @type {(string|!Array<string>)} */
Memcached.options.prototype.failOverServers;
 /** @type {boolean} */
Memcached.options.prototype.keyCompression;
 /** @type {number} */
Memcached.options.prototype.idle;
