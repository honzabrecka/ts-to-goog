/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/hyco-ws/index.d.ts:

/* TODO: ImportDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {?} options
 */
function HybridConnectionWebSocketServer(options) {}
 /** @type {string} */
HybridConnectionWebSocketServer.prototype.listenUri;
 /** @type {boolean} */
HybridConnectionWebSocketServer.prototype.closeRequested;
 /** @type {?} */
HybridConnectionWebSocketServer.prototype.options;
 /** @type {string} */
HybridConnectionWebSocketServer.prototype.path;
 /** @type {!Array<!WebSocket>} */
HybridConnectionWebSocketServer.prototype.clients;
 /** @type {!WebSocket} */
HybridConnectionWebSocketServer.prototype.controlChannel;

/**
 * @param {?} callback
 * @return {void}
 */
HybridConnectionWebSocketServer.prototype.close = function(callback) {};

/**
 * @param {?} options
 * @param {?} fn
 * @return {?}
 */
function createRelayedServer(options, fn) {}

/**
 * @param {string} address
 * @param {?} fn
 * @return {!WebSocket}
 */
function relayedConnect(address, fn) {}

/**
 * @param {string} uri
 * @param {string} key_name
 * @param {string} key
 * @param {number=} expiry
 * @return {string}
 */
function createRelayToken(uri, key_name, key, expiry) {}

/**
 * @param {string} uri
 * @param {string} key_name
 * @param {string} key
 * @param {number=} expiry
 * @return {string}
 */
function appendRelayToken(uri, key_name, key, expiry) {}

/**
 * @param {string} serviceBusNamespace
 * @param {string} path
 * @return {string}
 */
function createRelayBaseUri(serviceBusNamespace, path) {}

/**
 * @param {string} serviceBusNamespace
 * @param {string} path
 * @param {?=} token
 * @param {?=} id
 * @return {string}
 */
function createRelaySendUri(serviceBusNamespace, path, token, id) {}

/**
 * @param {string} serviceBusNamespace
 * @param {string} path
 * @param {?=} token
 * @param {?=} id
 * @return {string}
 */
function createRelayListenUri(serviceBusNamespace, path, token, id) {}
