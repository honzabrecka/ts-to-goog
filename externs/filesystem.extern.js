/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/filesystem/index.d.ts:
/**
 * @record
 * @struct
 */
function LocalFileSystem() {}
 /** @type {number} */
LocalFileSystem.prototype.TEMPORARY;
 /** @type {number} */
LocalFileSystem.prototype.PERSISTENT;

/**
 * Requests a filesystem in which to store application data.
 * @param {number} type Whether the filesystem requested should be persistent, as defined above. Use one of TEMPORARY or PERSISTENT.
 * @param {number} size This is an indicator of how much storage space, in bytes, the application expects to need.
 * @param {!FileSystemCallback} successCallback The callback that is called when the user agent provides a filesystem.
 * @param {!ErrorCallback=} errorCallback A callback that is called when errors happen, or when the request to obtain the filesystem is denied.
 * @return {void}
 */
LocalFileSystem.prototype.requestFileSystem = function(type, size, successCallback, errorCallback) {};

/**
 * Allows the user to look up the Entry for a file or directory referred to by a local URL.
 * @param {string} url A URL referring to a local file in a filesystem accessable via this API.
 * @param {!EntryCallback} successCallback A callback that is called to report the Entry to which the supplied URL refers.
 * @param {!ErrorCallback=} errorCallback A callback that is called when errors happen, or when the request to obtain the Entry is denied.
 * @return {void}
 */
LocalFileSystem.prototype.resolveLocalFileSystemURL = function(url, successCallback, errorCallback) {};

/**
 * see requestFileSystem.
 * @param {number} type
 * @param {number} size
 * @param {!FileSystemCallback} successCallback
 * @param {!ErrorCallback=} errorCallback
 * @return {void}
 */
LocalFileSystem.prototype.webkitRequestFileSystem = function(type, size, successCallback, errorCallback) {};
/**
 * @record
 * @struct
 */
function LocalFileSystemSync() {}
 /** @type {number} */
LocalFileSystemSync.prototype.TEMPORARY;
 /** @type {number} */
LocalFileSystemSync.prototype.PERSISTENT;

/**
 * Requests a filesystem in which to store application data.
 * @param {number} type Whether the filesystem requested should be persistent, as defined above. Use one of TEMPORARY or PERSISTENT.
 * @param {number} size This is an indicator of how much storage space, in bytes, the application expects to need.
 * @return {!FileSystemSync}
 */
LocalFileSystemSync.prototype.requestFileSystemSync = function(type, size) {};

/**
 * Allows the user to look up the Entry for a file or directory referred to by a local URL.
 * @param {string} url A URL referring to a local file in a filesystem accessable via this API.
 * @return {!EntrySync}
 */
LocalFileSystemSync.prototype.resolveLocalFileSystemSyncURL = function(url) {};

/**
 * see requestFileSystemSync
 * @param {number} type
 * @param {number} size
 * @return {!FileSystemSync}
 */
LocalFileSystemSync.prototype.webkitRequestFileSystemSync = function(type, size) {};
/**
 * @record
 * @struct
 */
function Metadata() {}
 /** @type {!Date} */
Metadata.prototype.modificationTime;
 /** @type {number} */
Metadata.prototype.size;
/**
 * @record
 * @struct
 */
function Flags() {}
 /** @type {boolean} */
Flags.prototype.create;
 /** @type {boolean} */
Flags.prototype.exclusive;
/**
 * @record
 * @struct
 */
function FileSystem() {}
 /** @type {string} */
FileSystem.prototype.name;
 /** @type {!DirectoryEntry} */
FileSystem.prototype.root;
/**
 * @record
 * @struct
 */
function Entry() {}
 /** @type {boolean} */
Entry.prototype.isFile;
 /** @type {boolean} */
Entry.prototype.isDirectory;
 /** @type {string} */
Entry.prototype.name;
 /** @type {string} */
Entry.prototype.fullPath;
 /** @type {!FileSystem} */
Entry.prototype.filesystem;

/**
 * Look up metadata about this entry.
 * @param {!MetadataCallback} successCallback A callback that is called with the time of the last modification.
 * @param {!ErrorCallback=} errorCallback ErrorCallback A callback that is called when errors happen.
 * @return {void}
 */
Entry.prototype.getMetadata = function(successCallback, errorCallback) {};

/**
 * Move an entry to a different location on the file system. It is an error to try to:
 * 
 * <ui>
 * <li>move a directory inside itself or to any child at any depth;</li>
 * <li>move an entry into its parent if a name different from its current one isn't provided;</li>
 * <li>move a file to a path occupied by a directory;</li>
 * <li>move a directory to a path occupied by a file;</li>
 * <li>move any element to a path occupied by a directory which is not empty.</li>
 * <ul>
 * 
 * A move of a file on top of an existing file must attempt to delete and replace that file.
 * A move of a directory on top of an existing empty directory must attempt to delete and replace that directory.
 * @param {!DirectoryEntry} parent
 * @param {string=} newName
 * @param {!EntryCallback=} successCallback
 * @param {!ErrorCallback=} errorCallback
 * @return {void}
 */
Entry.prototype.moveTo = function(parent, newName, successCallback, errorCallback) {};

/**
 * Copy an entry to a different location on the file system. It is an error to try to:
 * 
 * <ul> 
 * <li> copy a directory inside itself or to any child at any depth;</li>
 * <li> copy an entry into its parent if a name different from its current one isn't provided;</li>
 * <li> copy a file to a path occupied by a directory;</li>
 * <li> copy a directory to a path occupied by a file;</li>
 * <li> copy any element to a path occupied by a directory which is not empty.</li>
 * <li> A copy of a file on top of an existing file must attempt to delete and replace that file.</li>
 * <li> A copy of a directory on top of an existing empty directory must attempt to delete and replace that directory.</li>
 * </ul>
 * 
 * Directory copies are always recursive--that is, they copy all contents of the directory.
 * @param {!DirectoryEntry} parent
 * @param {string=} newName
 * @param {!EntryCallback=} successCallback
 * @param {!ErrorCallback=} errorCallback
 * @return {void}
 */
Entry.prototype.copyTo = function(parent, newName, successCallback, errorCallback) {};

/**
 * Returns a URL that can be used to identify this entry. Unlike the URN defined in [FILE-API-ED], it has no specific expiration; as it describes a location on disk, it should be valid at least as long as that location exists.
 * @return {string}
 */
Entry.prototype.toURL = function() {};

/**
 * Deletes a file or directory. It is an error to attempt to delete a directory that is not empty. It is an error to attempt to delete the root directory of a filesystem.
 * @param {!VoidCallback} successCallback A callback that is called on success.
 * @param {!ErrorCallback=} errorCallback A callback that is called when errors happen.
 * @return {void}
 */
Entry.prototype.remove = function(successCallback, errorCallback) {};

/**
 * Look up the parent DirectoryEntry containing this Entry. If this Entry is the root of its filesystem, its parent is itself.
 * @param {!DirectoryEntryCallback} successCallback A callback that is called to return the parent Entry.
 * @param {!ErrorCallback=} errorCallback A callback that is called when errors happen.
 * @return {void}
 */
Entry.prototype.getParent = function(successCallback, errorCallback) {};
/**
 * @extends {Entry}
 * @record
 * @struct
 */
function DirectoryEntry() {}

/**
 * Creates a new DirectoryReader to read Entries from this Directory.
 * @return {!DirectoryReader}
 */
DirectoryEntry.prototype.createReader = function() {};

/**
 * Creates or looks up a file.
 * @param {string} path Either an absolute path or a relative path from this DirectoryEntry to the file to be looked up or created. It is an error to attempt to create a file whose immediate parent does not yet exist.
 * @param {!Flags=} options 
 *     <ul> 
 *     <li>If create and exclusive are both true, and the path already exists, getFile must fail.</li>
 *     <li>If create is true, the path doesn't exist, and no other error occurs, getFile must create it as a zero-length file and return a corresponding FileEntry.</li>
 *     <li>If create is not true and the path doesn't exist, getFile must fail.</li>
 *     <li>If create is not true and the path exists, but is a directory, getFile must fail.</li>
 *     <li>Otherwise, if no other error occurs, getFile must return a FileEntry corresponding to path.</li>
 *     </ul>
 * @param {!FileEntryCallback=} successCallback A callback that is called to return the File selected or created.
 * @param {!ErrorCallback=} errorCallback A callback that is called when errors happen.
 * @return {void}
 */
DirectoryEntry.prototype.getFile = function(path, options, successCallback, errorCallback) {};

/**
 * Creates or looks up a directory.
 * @param {string} path Either an absolute path or a relative path from this DirectoryEntry to the directory to be looked up or created. It is an error to attempt to create a directory whose immediate parent does not yet exist.
 * @param {!Flags=} options 
 *     <ul>
 *     <li>If create and exclusive are both true and the path already exists, getDirectory must fail.</li>
 *     <li>If create is true, the path doesn't exist, and no other error occurs, getDirectory must create and return a corresponding DirectoryEntry.</li>
 *     <li>If create is not true and the path doesn't exist, getDirectory must fail.</li>
 *     <li>If create is not true and the path exists, but is a file, getDirectory must fail.</li>
 *     <li>Otherwise, if no other error occurs, getDirectory must return a DirectoryEntry corresponding to path.</li>
 *     </ul>
 * @param {!DirectoryEntryCallback=} successCallback   A callback that is called to return the DirectoryEntry selected or created.
 * @param {!ErrorCallback=} errorCallback A callback that is called when errors happen.
 * 
 * @return {void}
 */
DirectoryEntry.prototype.getDirectory = function(path, options, successCallback, errorCallback) {};

/**
 * Deletes a directory and all of its contents, if any. In the event of an error [e.g. trying to delete a directory that contains a file that cannot be removed], some of the contents of the directory may be deleted. It is an error to attempt to delete the root directory of a filesystem.
 * @param {!VoidCallback} successCallback A callback that is called on success.
 * @param {!ErrorCallback=} errorCallback A callback that is called when errors happen.
 * @return {void}
 */
DirectoryEntry.prototype.removeRecursively = function(successCallback, errorCallback) {};
/**
 * @record
 * @struct
 */
function DirectoryReader() {}

/**
 * Read the next block of entries from this directory.
 * @param {!EntriesCallback} successCallback Called once per successful call to readEntries to deliver the next previously-unreported set of Entries in the associated Directory. If all Entries have already been returned from previous invocations of readEntries, successCallback must be called with a zero-length array as an argument.
 * @param {!ErrorCallback=} errorCallback A callback indicating that there was an error reading from the Directory.
 * @return {void}
 */
DirectoryReader.prototype.readEntries = function(successCallback, errorCallback) {};
/**
 * @extends {Entry}
 * @record
 * @struct
 */
function FileEntry() {}

/**
 * Creates a new FileWriter associated with the file that this FileEntry represents.
 * @param {!FileWriterCallback} successCallback A callback that is called with the new FileWriter.
 * @param {!ErrorCallback=} errorCallback A callback that is called when errors happen.
 * @return {void}
 */
FileEntry.prototype.createWriter = function(successCallback, errorCallback) {};

/**
 * Returns a File that represents the current state of the file that this FileEntry represents.
 * @param {!FileCallback} successCallback A callback that is called with the File.
 * @param {!ErrorCallback=} errorCallback A callback that is called when errors happen.
 * @return {void}
 */
FileEntry.prototype.file = function(successCallback, errorCallback) {};
/**
 * @record
 * @struct
 */
function FileSystemCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function EntryCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FileEntryCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DirectoryEntryCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function EntriesCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function MetadataCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FileWriterCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FileCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function VoidCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ErrorCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FileSystemSync() {}
 /** @type {string} */
FileSystemSync.prototype.name;
 /** @type {!DirectoryEntrySync} */
FileSystemSync.prototype.root;
/**
 * @record
 * @struct
 */
function EntrySync() {}
 /** @type {boolean} */
EntrySync.prototype.isFile;
 /** @type {boolean} */
EntrySync.prototype.isDirectory;
 /** @type {string} */
EntrySync.prototype.name;
 /** @type {string} */
EntrySync.prototype.fullPath;
 /** @type {!FileSystemSync} */
EntrySync.prototype.filesystem;

/**
 * Look up metadata about this entry.
 * @return {!Metadata}
 */
EntrySync.prototype.getMetadata = function() {};

/**
 * Move an entry to a different location on the file system. It is an error to try to:
 * <ul>
 * <li> move a directory inside itself or to any child at any depth;</li>
 * <li> move an entry into its parent if a name different from its current one isn't provided;</li>
 * <li> move a file to a path occupied by a directory;</li>
 * <li> move a directory to a path occupied by a file;</li>
 * <li> move any element to a path occupied by a directory which is not empty.</li>
 * </ui> 
 * A move of a file on top of an existing file must attempt to delete and replace that file. A move of a directory on top of an existing empty directory must attempt to delete and replace that directory.
 * @param {!DirectoryEntrySync} parent The directory to which to move the entry.
 * @param {string=} newName The new name of the entry. Defaults to the EntrySync's current name if unspecified.
 * @return {!EntrySync}
 */
EntrySync.prototype.moveTo = function(parent, newName) {};

/**
 * Copy an entry to a different location on the file system. It is an error to try to:
 * <ul>
 * <li> copy a directory inside itself or to any child at any depth;</li>
 * <li> copy an entry into its parent if a name different from its current one isn't provided;</li>
 * <li> copy a file to a path occupied by a directory;</li>
 * <li> copy a directory to a path occupied by a file;</li>
 * <li> copy any element to a path occupied by a directory which is not empty.</li>
 * </ui> 
 * A copy of a file on top of an existing file must attempt to delete and replace that file.
 * A copy of a directory on top of an existing empty directory must attempt to delete and replace that directory.
 * Directory copies are always recursive--that is, they copy all contents of the directory.
 * @param {!DirectoryEntrySync} parent
 * @param {string=} newName
 * @return {!EntrySync}
 */
EntrySync.prototype.copyTo = function(parent, newName) {};

/**
 * Returns a URL that can be used to identify this entry. Unlike the URN defined in [FILE-API-ED], it has no specific expiration; as it describes a location on disk, it should be valid at least as long as that location exists.
 * @return {string}
 */
EntrySync.prototype.toURL = function() {};

/**
 * Deletes a file or directory. It is an error to attempt to delete a directory that is not empty. It is an error to attempt to delete the root directory of a filesystem.
 * @return {void}
 */
EntrySync.prototype.remove = function() {};

/**
 * Look up the parent DirectoryEntrySync containing this Entry. If this EntrySync is the root of its filesystem, its parent is itself.
 * @return {!DirectoryEntrySync}
 */
EntrySync.prototype.getParent = function() {};
/**
 * @extends {EntrySync}
 * @record
 * @struct
 */
function DirectoryEntrySync() {}

/**
 * Creates a new DirectoryReaderSync to read EntrySyncs from this DirectorySync.
 * @return {!DirectoryReaderSync}
 */
DirectoryEntrySync.prototype.createReader = function() {};

/**
 * Creates or looks up a directory.
 * @param {string} path Either an absolute path or a relative path from this DirectoryEntrySync to the file to be looked up or created. It is an error to attempt to create a file whose immediate parent does not yet exist.
 * @param {!Flags=} options 
 *     <ul>
 *     <li> If create and exclusive are both true and the path already exists, getFile must fail.</li>
 *     <li> If create is true, the path doesn't exist, and no other error occurs, getFile must create it as a zero-length file and return a corresponding FileEntry.</li>
 *     <li> If create is not true and the path doesn't exist, getFile must fail.</li>
 *     <li> If create is not true and the path exists, but is a directory, getFile must fail.</li>
 *     <li> Otherwise, if no other error occurs, getFile must return a FileEntrySync corresponding to path.</li>
 *     </ul>
 * @return {!FileEntrySync}
 */
DirectoryEntrySync.prototype.getFile = function(path, options) {};

/**
 * Creates or looks up a directory.
 * @param {string} path Either an absolute path or a relative path from this DirectoryEntrySync to the directory to be looked up or created. It is an error to attempt to create a directory whose immediate parent does not yet exist.
 * @param {!Flags=} options 
 *     <ul>
 *     <li> If create and exclusive are both true and the path already exists, getDirectory must fail.</li>
 *     <li> If create is true, the path doesn't exist, and no other error occurs, getDirectory must create and return a corresponding DirectoryEntry.</li>
 *     <li> If create is not true and the path doesn't exist, getDirectory must fail.</li>
 *     <li> If create is not true and the path exists, but is a file, getDirectory must fail.</li>
 *     <li> Otherwise, if no other error occurs, getDirectory must return a DirectoryEntrySync corresponding to path.</li>
 *     </ul>
 * @return {!DirectoryEntrySync}
 */
DirectoryEntrySync.prototype.getDirectory = function(path, options) {};

/**
 * Deletes a directory and all of its contents, if any. In the event of an error [e.g. trying to delete a directory that contains a file that cannot be removed], some of the contents of the directory may be deleted. It is an error to attempt to delete the root directory of a filesystem.
 * @return {void}
 */
DirectoryEntrySync.prototype.removeRecursively = function() {};
/**
 * @record
 * @struct
 */
function DirectoryReaderSync() {}

/**
 * Read the next block of entries from this directory.
 * @return {!Array<!EntrySync>}
 */
DirectoryReaderSync.prototype.readEntries = function() {};
/**
 * @extends {EntrySync}
 * @record
 * @struct
 */
function FileEntrySync() {}

/**
 * Creates a new FileWriterSync associated with the file that this FileEntrySync represents.
 * @return {!FileWriterSync}
 */
FileEntrySync.prototype.createWriter = function() {};

/**
 * Returns a File that represents the current state of the file that this FileEntrySync represents.
 * @return {!File}
 */
FileEntrySync.prototype.file = function() {};
