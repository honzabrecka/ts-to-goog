/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/crossroads/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var CrossroadsJs = {};
/**
 * @record
 * @struct
 */
CrossroadsJs.Route = function() {};
 /** @type {!signals.Signal} */
CrossroadsJs.Route.prototype.matched;
 /** @type {!signals.Signal} */
CrossroadsJs.Route.prototype.switched;
 /** @type {?} */
CrossroadsJs.Route.prototype.rules;
 /** @type {boolean} */
CrossroadsJs.Route.prototype.greedy;

/**
 * Remove route from crossroads and destroy it, releasing memory.
 * @return {void}
 */
CrossroadsJs.Route.prototype.dispose = function() {};

/**
 * Test if Route matches against request. Return true if request validate against route rules and pattern.
 * @param {?} request
 * @return {boolean}
 */
CrossroadsJs.Route.prototype.match = function(request) {};

/**
 * Return a string that matches the route replacing the capturing groups with the values provided in the replacements object.
 * @param {?} replacements
 * @return {string}
 */
CrossroadsJs.Route.prototype.interpolate = function(replacements) {};

/**
 * Add a listener to the signal.
 * 
 * @param {!Function} listener Signal handler function.
 * @param {?=} listenerContext
 * @param {!Number=} priority The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)
 * @return {!signals.SignalBinding}
 */
CrossroadsJs.Route.prototype.add = function(listener, listenerContext, priority) {};
/**
 * @record
 * @struct
 */
CrossroadsJs.CrossRoadsStatic = function() {};
 /** @type {!Function} */
CrossroadsJs.CrossRoadsStatic.prototype.NORM_AS_ARRAY;
 /** @type {!Function} */
CrossroadsJs.CrossRoadsStatic.prototype.NORM_AS_OBJECT;
 /** @type {!signals.Signal} */
CrossroadsJs.CrossRoadsStatic.prototype.bypassed;
 /** @type {!signals.Signal} */
CrossroadsJs.CrossRoadsStatic.prototype.routed;
 /** @type {!Function} */
CrossroadsJs.CrossRoadsStatic.prototype.normalizeFn;
 /** @type {boolean} */
CrossroadsJs.CrossRoadsStatic.prototype.shouldTypecast;
 /** @type {string} */
CrossroadsJs.CrossRoadsStatic.prototype.VERSION;
 /** @type {boolean} */
CrossroadsJs.CrossRoadsStatic.prototype.greedy;
 /** @type {boolean} */
CrossroadsJs.CrossRoadsStatic.prototype.greedyEnabled;
 /** @type {boolean} */
CrossroadsJs.CrossRoadsStatic.prototype.ignoreState;

/**
 * Creates a new route pattern listener and add it to crossroads routes collection.
 * 
 * @param {?} pattern String pattern or Regular Expression that should be used to match against requests.
 * @param {!Function=} handler Function that should be executed when a request matches the Route pattern.
 * @param {number=} priority Route execution priority.
 * @return {!CrossroadsJs.Route}
 */
CrossroadsJs.CrossRoadsStatic.prototype.addRoute = function(pattern, handler, priority) {};

/**
 * Remove a single route from crossroads collection.
 * 
 * @param {!CrossroadsJs.Route} route Reference to the Route object returned by crossroads.addRoute().
 * @return {void}
 */
CrossroadsJs.CrossRoadsStatic.prototype.removeRoute = function(route) {};

/**
 * Remove all routes from crossroads collection.
 * @return {void}
 */
CrossroadsJs.CrossRoadsStatic.prototype.removeAllRoutes = function() {};

/**
 * Parse a string input and dispatch matched Signal of the first Route that matches the request.
 * 
 * @param {string} request String that should be evaluated and matched against Routes to define which Route handlers should be executed and which parameters should be passed to the handlers.
 * @param {...?} defaultArgs
 * @return {void}
 */
CrossroadsJs.CrossRoadsStatic.prototype.parse = function(request, defaultArgs) {};

/**
 * Get number of Routes contained on the crossroads collection.
 * @return {number}
 */
CrossroadsJs.CrossRoadsStatic.prototype.getNumRoutes = function() {};

/**
 * Create a new independent Router instance.
 * @return {!CrossroadsJs.CrossRoadsStatic}
 */
CrossroadsJs.CrossRoadsStatic.prototype.create = function() {};

/**
 * Resets the Router internal state. Will clear reference to previously matched routes (so they won't dispatch switched signal when matching a new route) and reset last request.
 * @return {void}
 */
CrossroadsJs.CrossRoadsStatic.prototype.resetState = function() {};

/**
 * Pipe routers, so all crossroads.parse() calls will be forwarded to the other router as well.
 * @param {!CrossroadsJs.CrossRoadsStatic} router
 * @return {void}
 */
CrossroadsJs.CrossRoadsStatic.prototype.pipe = function(router) {};

/**
 * "Ceci n'est pas une pipe"
 * @param {!CrossroadsJs.CrossRoadsStatic} router
 * @return {void}
 */
CrossroadsJs.CrossRoadsStatic.prototype.unpipe = function(router) {};
 /** @type {!CrossroadsJs.CrossRoadsStatic} */
var crossroads;

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
