/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/tabtab/index.d.ts:

/**
 * Main completion method, has support for installation and actual completion.
 * Main completion method, has support for installation and actual completion.
 * @param {string} name Name of the command to complete.
 * @param {?|string} cb_or_completer Get called when a tab-completion command happens. / Name of the command to call on completion.
 * @param {?=} cb Get called when a tab-completion command happens.
 * @return {void}
 */
function complete(name, cb_or_completer, cb) {}

/**
 * Simple helper function to know if the script is run in the context of a completion command.
 * @return {boolean}
 */
function isComplete() {}

/**
 * Helper to return the list of short and long options, parsed from the usual --help output of a command (cake/rake -H, vagrant, commander -h, optimist.help(), ...).
 * @param {string} str
 * @return {{shorts: !Array<string>, longs: !Array<string>}}
 */
function parseOut(str) {}

/**
 * Same purpose as parseOut, but for parsing tasks from an help command (cake/rake -T, vagrant, etc.).
 * @param {string} str
 * @param {string} prefix
 * @param {(string|!RegExp)=} reg
 * @return {!Array<string>}
 */
function parseTasks(str, prefix, reg) {}

/**
 * Helper to return completion output and log to standard output.
 * @param {!Array<string>} values Array of values to complete against.
 * @param {?} data The data object returned by the complete callback, used mainly to filter results accordingly upon the text that is supplied by the user.
 * @param {string=} prefix A prefix to add to the completion results, useful for options to add dashes (eg. - or --).
 * @return {void}
 */
function log(values, data, prefix) {}
/**
 * @record
 * @struct
 */
function CallBack() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function Data() {}
 /** @type {string} */
Data.prototype.line;
 /** @type {number} */
Data.prototype.words;
 /** @type {number} */
Data.prototype.point;
 /** @type {string} */
Data.prototype.partial;
 /** @type {string} */
Data.prototype.last;
 /** @type {string} */
Data.prototype.lastPartial;
 /** @type {string} */
Data.prototype.prev;
