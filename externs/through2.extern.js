/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/through2/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/** @typedef {?} */
var TransformCallback;

/** @typedef {?} */
var TransformFunction;

/** @typedef {?} */
var FlushCallback;

/**
 * @param {?|!internal.DuplexOptions=} transform_or_opts
 * @param {?=} flush_or_transform
 * @param {?=} flush
 * @return {!internal.Transform}
 */
function through2(transform_or_opts, flush_or_transform, flush) {}
/**
 * @record
 * @struct
 */
through2.Through2Constructor = function() {};

/* TODO: ConstructSignature: through2 */

/* TODO: CallSignature: through2 */

/**
 * Convenvience method for creating object streams
 * @param {?=} transform
 * @param {?=} flush
 * @return {!internal.Transform}
 */
through2.obj = function(transform, flush) {};

/**
 * Creates a constructor for a custom Transform. This is useful when you
 * want to use the same transform logic in multiple instances.
 * @param {?|!internal.DuplexOptions=} transform_or_opts
 * @param {?=} flush_or_transform
 * @param {?=} flush
 * @return {!through2.Through2Constructor}
 */
through2.ctor = function(transform_or_opts, flush_or_transform, flush) {};

/* TODO: ExportAssignment in  */
