/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/strong-cluster-control/index.d.ts:
/** @const */
var StrongClusterControl = {};

/** @typedef {number} */
StrongClusterControl.pid;
/**
 * @record
 * @struct
 */
StrongClusterControl.StartOptions = function() {};
 /** @type {number} */
StrongClusterControl.StartOptions.prototype.size;
 /** @type {!Object} */
StrongClusterControl.StartOptions.prototype.env;
 /** @type {number} */
StrongClusterControl.StartOptions.prototype.shutdownTimeout;
 /** @type {number} */
StrongClusterControl.StartOptions.prototype.terminateTimeout;
 /** @type {number} */
StrongClusterControl.StartOptions.prototype.throttleDelay;
/**
 * @record
 * @struct
 */
StrongClusterControl.ClusterMaster = function() {};
 /** @type {number} */
StrongClusterControl.ClusterMaster.prototype.pid;
 /** @type {number} */
StrongClusterControl.ClusterMaster.prototype.setSize;
 /** @type {number} */
StrongClusterControl.ClusterMaster.prototype.startTime;
/**
 * @extends {StrongClusterControl.ClusterMaster}
 * @record
 * @struct
 */
StrongClusterControl.ClusterWorker = function() {};
 /** @type {number} */
StrongClusterControl.ClusterWorker.prototype.id;
/**
 * @record
 * @struct
 */
StrongClusterControl.ClusterStatus = function() {};
 /** @type {!StrongClusterControl.ClusterMaster} */
StrongClusterControl.ClusterStatus.prototype.master;
 /** @type {!Array<!StrongClusterControl.ClusterWorker>} */
StrongClusterControl.ClusterStatus.prototype.workers;
/**
 * @record
 * @struct
 */
StrongClusterControl.CMD = function() {};
 /** @type {string} */
StrongClusterControl.CMD.prototype.SHUTDOWN;
/**
 * @record
 * @struct
 */
StrongClusterControl.Control = function() {};
 /** @type {!StrongClusterControl.CMD} */
StrongClusterControl.Control.prototype.cmd;
 /** @type {number} */
StrongClusterControl.Control.prototype.CPUS;
 /** @type {!StrongClusterControl.StartOptions} */
StrongClusterControl.Control.prototype.options;

/**
 * \@description Start the controller
 * @param {!StrongClusterControl.StartOptions|function(): ?=} options_or_callback
 * @param {function(): ?=} callback
 * @return {Control}
 */
StrongClusterControl.Control.prototype.start = function(options_or_callback, callback) {};

/**
 * \@description Stop the controller, after stopping workers (if the size is being controlled, see setSize()).
 * @param {function(): ?=} callback
 * @return {Control}
 */
StrongClusterControl.Control.prototype.stop = function(callback) {};

/**
 * \@description Restart workers one by one, until all current workers have been restarted.
 * @return {Control}
 */
StrongClusterControl.Control.prototype.restart = function() {};

/**
 * \@description Returns the current cluster status
 * @return {!StrongClusterControl.ClusterStatus}
 */
StrongClusterControl.Control.prototype.status = function() {};

/**
 * \@description Set the size of the cluster.
 * @param {number=} N - The size of the cluster is the number of workers that should be maintained online.
 * @return {Control}
 */
StrongClusterControl.Control.prototype.setSize = function(N) {};

/**
 * \@description Disconnect worker id and take increasingly agressive action until it exits.
 * @param {number} id - Cluster worker ID,
 * @return {Control}
 */
StrongClusterControl.Control.prototype.shutdown = function(id) {};

/**
 * \@description Disconnect worker id and take increasingly agressive action until it exits.
 * @param {number} id - Cluster worker ID,
 * @return {Control}
 */
StrongClusterControl.Control.prototype.terminate = function(id) {};

/**
 * @param {string} event
 * @param {function(): ?|function(number): ?|function(!StrongClusterControl.ClusterWorker): ?|function(!Array<number>): ?|function(!StrongClusterControl.ClusterWorker, number, string): ?|function((!Error|!Array<!Error>)): ?} handler
 * @return {Control}
 */
StrongClusterControl.Control.prototype.on = function(event, handler) {};
 /** @type {!StrongClusterControl.Control} */
var control;

/* TODO: ExportAssignment in  */
