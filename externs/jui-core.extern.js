/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jui-core/index.d.ts:
 /** @type {?} */
var jui;
/**
 * @record
 * @struct
 */
function UtilBase() {}
 /** @type {?} */
UtilBase.prototype.browser;
 /** @type {boolean} */
UtilBase.prototype.isTouch;
 /** @type {?} */
UtilBase.prototype.ready;

/**
 * \@method inherit
 * 
 * 프로토타입 기반의 상속 제공
 * 
 * @param {?} ctor
 * @param {?} superCtor
 * @return {void}
 */
UtilBase.prototype.inherit = function(ctor, superCtor) {};

/**
 * \@method extend
 * 
 * implements object extend
 * 
 * @param {?} origin
 * @param {?} add
 * @param {boolean} skip
 * @return {?}
 */
UtilBase.prototype.extend = function(origin, add, skip) {};

/**
 * convert px to integer
 * @param {(string|number)} px
 * @return {number}
 */
UtilBase.prototype.pxToInt = function(px) {};

/**
 * \@method clone
 * implements object clone
 * @param {?} obj
 * @return {!Array<?>}
 */
UtilBase.prototype.clone = function(obj) {};

/**
 * \@method deepClone
 * implements object deep clone
 * @param {?} obj
 * @param {?} emit
 * @return {!Array<?>}
 */
UtilBase.prototype.deepClone = function(obj, emit) {};

/**
 * \@method sort
 * use QuickSort
 * @param {!Array<?>} array
 * @return {?}
 */
UtilBase.prototype.sort = function(array) {};

/**
 * \@method runtime
 * 
 * caculate callback runtime
 * 
 * @param {string} name
 * @param {?} callback
 * @return {void}
 */
UtilBase.prototype.runtime = function(name, callback) {};

/**
 * \@method template
 * parsing template string
 * @param {string} html
 * @param {?=} obj
 * @return {(string|?)}
 */
UtilBase.prototype.template = function(html, obj) {};

/**
 * \@method resize
 * add event in window resize event
 * @param {?} callback
 * @param {number} ms
 * @return {void}
 */
UtilBase.prototype.resize = function(callback, ms) {};

/**
 * \@method index
 * 
 * IndexParser 객체 생성
 * 
 * @return {?}
 */
UtilBase.prototype.index = function() {};

/**
 * \@method chunk
 * split array by length
 * @param {!Array<?>} arr
 * @param {number} len
 * @return {!Array<?>}
 */
UtilBase.prototype.chunk = function(arr, len) {};

/**
 * \@method typeCheck
 * check data  type
 * @param {string} typeName
 * @param {?} value
 * @return {boolean}
 */
UtilBase.prototype.typeCheck = function(typeName, value) {};

/**
 * @param {?} uiObj
 * @param {?} list
 * @return {void}
 */
UtilBase.prototype.typeCheckObj = function(uiObj, list) {};

/**
 * \@method dataToCsv
 * 
 * data 를 csv 로 변환한다.
 * 
 * @param {!Array<string>} keys
 * @param {!Array<?>} dataList
 * @param {number} dataSize
 * @return {string}
 */
UtilBase.prototype.dataToCsv = function(keys, dataList, dataSize) {};

/**
 * \@method dataToCsv2
 * 
 * @param {?} options
 * @return {string}
 */
UtilBase.prototype.dataToCsv2 = function(options) {};

/**
 * \@method fileToCsv
 * 
 * file 에서 csv 컨텐츠 로드
 * 
 * @param {string} fileText
 * @param {?} callback
 * @return {void}
 */
UtilBase.prototype.fileToCsv = function(fileText, callback) {};

/**
 * \@method csvToBase64
 * 
 * csv 다운로드 링크로 변환
 * 
 * @param {string} csv
 * @return {string}
 */
UtilBase.prototype.csvToBase64 = function(csv) {};

/**
 * \@method csvToData
 * 
 * @param {!Array<string>} keys
 * @param {string} csv
 * @param {number} csvNumber
 * @return {!Array<?>}
 */
UtilBase.prototype.csvToData = function(keys, csv, csvNumber) {};

/**
 * \@method getCsvFields
 * 
 * csv 에서 필드 얻어오기
 * 
 * @param {!Array<string>} fields
 * @param {!Array<string>} csvFields
 * @return {!Array<string>}
 */
UtilBase.prototype.getCsvFields = function(fields, csvFields) {};

/**
 * \@method svgToBase64
 * 
 * xml 문자열로 svg datauri 생성
 * 
 * @param {string} xml
 * @return {string}
 */
UtilBase.prototype.svgToBase64 = function(xml) {};

/**
 * \@method dateFormat
 * 
 * implements date format function
 * 
 * yyyy : 4 digits year
 * yy : 2 digits year
 * y : 1 digit year
 * 
 * @param {!Date} date
 * @param {string} format
 * @param {boolean=} utc
 * @return {string}
 */
UtilBase.prototype.dateFormat = function(date, format, utc) {};

/**
 * \@method createId
 * 
 * 유니크 아이디 생성
 * 
 * @param {string} key
 * @return {string}
 */
UtilBase.prototype.createId = function(key) {};

/**
 * \@method btoa
 * 
 * Base64 인코딩
 * 
 * @param {?} input
 * @return {string}
 */
UtilBase.prototype.btoa = function(input) {};

/**
 * \@method atob
 * 
 * Base64 디코딩
 * 
 * @param {string} input
 * @return {?}
 */
UtilBase.prototype.atob = function(input) {};

/**
 * implement async loop without blocking ui
 * 
 * @param {number} total
 * @param {?=} context
 * @return {?}
 */
UtilBase.prototype.timeLoop = function(total, context) {};

/**
 * \@method loop
 * 
 * 최적화된 루프 생성 (5단계로 나눔)
 * 
 * @param {number} total
 * @param {?=} context
 * @return {?}
 */
UtilBase.prototype.loop = function(total, context) {};

/**
 * \@method loopArray
 * 
 * 배열을 사용해서 최적화된 루프로 생성한다.
 * 
 * 
 * @param {!Array<?>} data
 * @param {?=} context
 * @return {?}
 */
UtilBase.prototype.loopArray = function(data, context) {};

/**
 * \@method makeIndex
 * 
 * 배열의 키 기반 인덱스를 생성한다.
 * 
 * 개별 값 별로 멀티 인덱스를 생성한다.
 * 
 * @param {!Array<?>} data
 * @param {string} keyField
 * @return {?}
 */
UtilBase.prototype.makeIndex = function(data, keyField) {};

/**
 * \@method startsWith
 * Check that it matches the starting string search string.
 * 
 * @param {string} str
 * @param {string} searchString
 * @param {number=} position
 * @return {number}
 */
UtilBase.prototype.startsWith = function(str, searchString, position) {};

/**
 * \@method endsWith
 * Check that it matches the end of a string search string.
 * 
 * @param {string} str
 * @param {string} searchString
 * @param {number=} position
 * @return {number}
 */
UtilBase.prototype.endsWith = function(str, searchString, position) {};

/**
 * @param {?} target
 * @param {!Array<?>} list
 * @return {number}
 */
UtilBase.prototype.inArray = function(target, list) {};

/**
 * @param {string} text
 * @return {string}
 */
UtilBase.prototype.trim = function(text) {};

/**
 * @param {?} data
 * @return {string}
 */
UtilBase.prototype.param = function(data) {};

/**
 * @param {?} data
 * @return {void}
 */
UtilBase.prototype.ajax = function(data) {};

/**
 * @return {number}
 */
UtilBase.prototype.scrollWidth = function() {};
/**
 * @record
 * @struct
 */
function JuiStatic() {}

/**
 * \@method ready
 * 
 * ready 타임에 실행될 callback 정의
 * 
 * @param {!Array<string>=} depends
 * @param {?=} callback
 * @return {void}
 */
JuiStatic.prototype.ready = function(depends, callback) {};

/**
 * \@method defineUI
 * 
 * 사용자가 실제로 사용할 수 있는 UI 클래스를 정의
 * 
 * @param {string} name
 * @param {!Array<string>} depends
 * @param {?} callback
 * @param {string=} parent
 * @return {void}
 */
JuiStatic.prototype.defineUI = function(name, depends, callback, parent) {};

/**
 * \@method define
 * 
 * UI 클래스에서 사용될 클래스를 정의하고, 자유롭게 상속할 수 있는 클래스를 정의
 * 
 * @param {string} name
 * @param {!Array<string>} depends
 * @param {?} callback
 * @param {string=} parent
 * @return {void}
 */
JuiStatic.prototype.define = function(name, depends, callback, parent) {};

/**
 * \@method redefine
 * 
 * UI 클래스에서 사용될 클래스를 정의하고, 자유롭게 상속할 수 있는 클래스를 정의
 * 
 * @param {string} name
 * @param {!Array<string>} depends
 * @param {?} callback
 * @param {string=} parent
 * @return {void}
 */
JuiStatic.prototype.redefine = function(name, depends, callback, parent) {};

/**
 * define과 defineUI로 정의된 클래스 또는 객체를 가져온다.
 * 
 * @param {string} name 가져온 클래스 또는 객체의 이름
 * @return {?}
 */
JuiStatic.prototype.include = function(name) {};

/**
 * define과 defineUI로 정의된 모든 클래스와 객체를 가져온다.
 * 
 * @return {!Array<?>}
 */
JuiStatic.prototype.includeAll = function() {};

/**
 * \@method add
 * Adds a component object created
 * 
 * @param {?} uiIns
 * @return {void}
 */
JuiStatic.prototype.add = function(uiIns) {};

/**
 * \@method emit
 * Generates a custom event to an applicable component
 * 
 * @param {string} key
 * @param {string} type
 * @param {!Array<?>} args
 * @return {void}
 */
JuiStatic.prototype.emit = function(key, type, args) {};

/**
 * \@method get
 * Gets a component currently created
 * 
 * @param {(string|number)} key
 * @return {?}
 */
JuiStatic.prototype.get = function(key) {};

/**
 * \@method getAll
 * Gets all components currently created
 * 
 * @return {!Array<?>}
 */
JuiStatic.prototype.getAll = function() {};

/**
 * \@method create
 * It is possible to create a component dynamically after the ready point
 * 
 * @param {string} type
 * @param {?} selector
 * @param {!Object=} options
 * @return {?}
 */
JuiStatic.prototype.create = function(type, selector, options) {};
/**
 * @record
 * @struct
 */
function UICollection() {}

/**
 * @return {void}
 */
UICollection.prototype.destroy = function() {};
/**
 * @record
 * @struct
 */
function UICore() {}
 /** @type {?} */
UICore.prototype.tpl;
 /** @type {?} */
UICore.prototype.event;
 /** @type {?} */
UICore.prototype.root;

/**
 * \@method emit
 * Generates a custom event. The first parameter is the type of a custom event. A function defined as an option or on method is called
 * 
 * @param {string} type
 * @param {?} args
 * @return {?}
 */
UICore.prototype.emit = function(type, args) {};

/**
 * \@method on
 * A callback function defined as an on method is run when an emit method is called
 * 
 * @param {string} type
 * @param {?} callback
 * @return {void}
 */
UICore.prototype.on = function(type, callback) {};

/**
 * \@method off
 * Removes a custom event of an applicable type or callback handler
 * 
 * @param {string} type
 * @return {void}
 */
UICore.prototype.off = function(type) {};

/**
 * \@method addValid
 * Check the parameter type of a UI method and generates an alarm when a wrong value is entered
 * 
 * @param {string} name
 * @param {!Array<?>} params
 * @return {void}
 */
UICore.prototype.addValid = function(name, params) {};

/**
 * \@method callBefore
 * Sets a callback function that is called before a UI method is run
 * 
 * @param {string} name
 * @param {?} callback
 * @return {void}
 */
UICore.prototype.callBefore = function(name, callback) {};

/**
 * \@method callAfter
 * Sets a callback function that is called after a UI method is run
 * 
 * @param {string} name
 * @param {?} callback
 * @return {void}
 */
UICore.prototype.callAfter = function(name, callback) {};

/**
 * \@method callDelay
 * Sets a callback function and the delay time before/after a UI method is run
 * 
 * @param {string} name
 * @param {?} callObj
 * @return {void}
 */
UICore.prototype.callDelay = function(name, callObj) {};

/**
 * \@method setTpl
 * Dynamically defines the template method of a UI
 * 
 * @param {string} name
 * @param {string} html
 * @return {void}
 */
UICore.prototype.setTpl = function(name, html) {};

/**
 * \@method setOption
 * Dynamically defines the options of a UI
 * 
 * @param {string} key
 * @param {?} value
 * @return {void}
 */
UICore.prototype.setOption = function(key, value) {};

/**
 * \@method destroy
 * Removes all events set in a UI obejct and the DOM element
 * 
 * @return {void}
 */
UICore.prototype.destroy = function() {};
/**
 * @extends {UICore}
 * @record
 * @struct
 */
function UIEvent() {}
 /** @type {?} */
UIEvent.prototype.root;

/**
 * \@method find
 * Get the child element of the root element
 * 
 * @param {?} selector
 * @return {?<!HTMLElement>}
 */
UIEvent.prototype.find = function(selector) {};
/**
 * @constructor
 * @struct
 */
function ColorScale() {}

/**
 * @param {string} color
 * @param {string} color2
 * @return {?}
 */
ColorScale.prototype.domain = function(color, color2) {};

/**
 * @param {number} max
 * @return {?}
 */
ColorScale.prototype.ticks = function(max) {};
/**
 * @record
 * @struct
 */
function UtilColor() {}

/**
 * \@method format
 * 
 * convert color to format string
 * 
 *     // hex
 *     color.format({ r : 255, g : 255, b : 255 }, 'hex')  // #FFFFFF
 * 
 *     // rgb
 *     color.format({ r : 255, g : 255, b : 255 }, 'rgb') // rgba(255, 255, 255, 0.5);
 * 
 *     // rgba
 *     color.format({ r : 255, g : 255, b : 255, a : 0.5 }, 'rgb') // rgba(255, 255, 255, 0.5);
 * 
 * @param {?} obj
 * @param {string} type
 * @return {string}
 */
UtilColor.prototype.format = function(obj, type) {};

/**
 * \@method scale
 * 
 * get color scale
 * 
 * 		var c = color.scale().domain('#FF0000', '#00FF00');
 * 
 * 		// get middle color
 * 		c(0.5)   ==  #808000
 * 
 * 		// get middle color list
 * 		c.ticks(20);  // return array ,    [startColor, ......, endColor ]
 * 
 * @return {?}
 */
UtilColor.prototype.scale = function() {};

/**
 * \@method map
 * 
 * create color map
 * 
 * 		var colorList = color.map(['#352a87', '#0f5cdd', '#00b5a6', '#ffc337', '#fdff00'], count)
 * 
 * @param {!Array<string>} color_list
 * @param {number} count
 * @return {!Array<string>}
 */
UtilColor.prototype.map = function(color_list, count) {};

/**
 * \@method rgb
 * 
 * parse string to rgb color
 * 
 * 		color.rgb("#FF0000") === { r : 255, g : 0, b : 0 }
 * 
 * 		color.rgb("rgb(255, 0, 0)") == { r : 255, g : 0, b : }
 * 
 * @param {string} str
 * @return {?}
 */
UtilColor.prototype.rgb = function(str) {};

/**
 * \@method HSVtoRGB
 * 
 * convert hsv to rgb
 * 
 * 		color.HSVtoRGB(0,0,1) === #FFFFF === { r : 255, g : 0, b : 0 }
 * 
 * @param {number} H
 * @param {number} S
 * @param {number} V
 * @return {?}
 */
UtilColor.prototype.HSVtoRGB = function(H, S, V) {};

/**
 * \@method RGBtoHSV
 * 
 * convert rgb to hsv
 * 
 * 		color.RGBtoHSV(0, 0, 255) === { h : 240, s : 1, v : 1 } === '#FFFF00'
 * 
 * @param {number} R
 * @param {number} G
 * @param {number} B
 * @return {?}
 */
UtilColor.prototype.RGBtoHSV = function(R, G, B) {};

/**
 * \@method lighten
 * 
 * rgb 컬러 밝은 농도로 변환
 * 
 * @param {string} color
 * @param {number} rate
 * @return {string}
 */
UtilColor.prototype.lighten = function(color, rate) {};

/**
 * \@method darken
 * 
 * rgb 컬러 어두운 농도로 변환
 * 
 * @param {string} color
 * @param {number} rate
 * @return {string}
 */
UtilColor.prototype.darken = function(color, rate) {};
/**
 * @record
 * @struct
 */
function UtilBase64() {}

/**
 * @param {string} input
 * @return {string}
 */
UtilBase64.prototype.encode = function(input) {};

/**
 * @param {string} input
 * @return {string}
 */
UtilBase64.prototype.decode = function(input) {};
/**
 * @record
 * @struct
 */
function UtilKeyParser() {}

/**
 * \@method isIndexDepth
 * 
 * @param {string} index
 * @return {boolean}
 */
UtilKeyParser.prototype.isIndexDepth = function(index) {};

/**
 * \@method getIndexList
 * 
 * @param {string} index
 * @return {boolean}
 */
UtilKeyParser.prototype.getIndexList = function(index) {};

/**
 * \@method changeIndex
 * 
 * 
 * @param {string} index
 * @param {string} targetIndex
 * @param {string} rootIndex
 * @return {string}
 */
UtilKeyParser.prototype.changeIndex = function(index, targetIndex, rootIndex) {};

/**
 * \@method getNextIndex
 * 
 * @param {string} index
 * @return {string}
 */
UtilKeyParser.prototype.getNextIndex = function(index) {};

/**
 * \@method getParentIndex
 * 
 * 
 * @param {string} index
 * @return {string}
 */
UtilKeyParser.prototype.getParentIndex = function(index) {};
/**
 * @record
 * @struct
 */
function UtilMath() {}

/**
 * \@method rotate
 * 
 * 2d rotate
 * 
 * 
 * @param {number} x
 * @param {number} y
 * @param {number} radian
 * @return {?}
 */
UtilMath.prototype.rotate = function(x, y, radian) {};

/**
 * @param {number} maxWidth
 * @param {number} maxHeight
 * @param {number} objectWidth
 * @param {number} objectHeight
 * @return {?}
 */
UtilMath.prototype.resize = function(maxWidth, maxHeight, objectWidth, objectHeight) {};

/**
 * \@method radian
 * 
 * convert degree to radian
 * 
 * @param {number} degree
 * @return {number}
 */
UtilMath.prototype.radian = function(degree) {};

/**
 * \@method degree
 * 
 * convert radian to degree
 * 
 * @param {number} radian
 * @return {number}
 */
UtilMath.prototype.degree = function(radian) {};

/**
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @return {number}
 */
UtilMath.prototype.angle = function(x1, y1, x2, y2) {};

/**
 * \@method interpolateNumber
 * 
 * a, b 의 중간값 계산을 위한 callback 함수 만들기
 * 
 * @param {number} a
 * @param {number} b
 * @return {?}
 */
UtilMath.prototype.interpolateNumber = function(a, b) {};

/**
 * @param {number} a
 * @param {number} b
 * @return {?}
 */
UtilMath.prototype.interpolateRound = function(a, b) {};

/**
 * @param {number} num
 * @param {number} fixed
 * @return {number}
 */
UtilMath.prototype.round = function(num, fixed) {};

/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
UtilMath.prototype.plus = function(a, b) {};

/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
UtilMath.prototype.minus = function(a, b) {};

/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
UtilMath.prototype.multi = function(a, b) {};

/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
UtilMath.prototype.div = function(a, b) {};

/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
UtilMath.prototype.remain = function(a, b) {};

/**
 * 특정 구간의 값을 자동으로 계산
 * 
 * @param {number} min
 * @param {number} max
 * @param {number} ticks
 * @param {boolean} isNice
 * @return {?}
 */
UtilMath.prototype.nice = function(min, max, ticks, isNice) {};

/**
 * @template T
 * @param {!Array<?>} a
 * @param {!Array<?>} b
 * @return {!Array<?>}
 */
UtilMath.prototype.matrix = function(a, b) {};

/**
 * @template T
 * @param {!Array<?>} a
 * @param {!Array<?>} b
 * @return {!Array<?>}
 */
UtilMath.prototype.matrix3d = function(a, b) {};

/**
 * @param {!Array<?>} a
 * @return {!Array<?>}
 */
UtilMath.prototype.inverseMatrix3d = function(a) {};
/**
 * @record
 * @struct
 */
function UtilScaleOrdinal() {}

/* TODO: CallSignature:  */

/**
 * @param {!Array<?>} values
 * @return {?}
 */
UtilScaleOrdinal.prototype.domain = function(values) {};

/**
 * @param {!Array<?>} values
 * @return {?}
 */
UtilScaleOrdinal.prototype.range = function(values) {};

/**
 * @param {number} interval
 * @param {number=} padding
 * @return {?}
 */
UtilScaleOrdinal.prototype.rangePoints = function(interval, padding) {};

/**
 * @param {number} interval
 * @param {number=} padding
 * @param {number=} outerPadding
 * @return {?}
 */
UtilScaleOrdinal.prototype.rangeBands = function(interval, padding, outerPadding) {};

/**
 * @param {number} x
 * @return {number}
 */
UtilScaleOrdinal.prototype.invert = function(x) {};

/** @typedef {?} */
var UtilQuickSort;
