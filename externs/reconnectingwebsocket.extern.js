/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/reconnectingwebsocket/index.d.ts:
/**
 * @record
 * @struct
 */
function Options() {}
 /** @type {boolean} */
Options.prototype.automaticOpen;
 /** @type {string} */
Options.prototype.binaryType;
 /** @type {boolean} */
Options.prototype.debug;
 /** @type {number} */
Options.prototype.maxReconnectAttempts;
 /** @type {number} */
Options.prototype.maxReconnectInterval;
 /** @type {number} */
Options.prototype.reconnectDecay;
 /** @type {number} */
Options.prototype.reconnectInterval;
 /** @type {number} */
Options.prototype.timeoutInterval;

/**
 * @constructor
 * @struct
 * @param {string} url
 * @param {!Array<string>=} protocols
 * @param {?=} options
 */
function ReconnectingWebSocket(url, protocols, options) {}
 /** @type {boolean} */
ReconnectingWebSocket.debugAll;
 /** @type {number} */
ReconnectingWebSocket.CONNECTING;
 /** @type {number} */
ReconnectingWebSocket.OPEN;
 /** @type {number} */
ReconnectingWebSocket.CLOSING;
 /** @type {number} */
ReconnectingWebSocket.CLOSED;
 /** @type {?} */
ReconnectingWebSocket.prototype.onclose;
 /** @type {?} */
ReconnectingWebSocket.prototype.onconnecting;
 /** @type {?} */
ReconnectingWebSocket.prototype.onerror;
 /** @type {?} */
ReconnectingWebSocket.prototype.onmessage;
 /** @type {?} */
ReconnectingWebSocket.prototype.onopen;
 /** @type {number} */
ReconnectingWebSocket.prototype.maxReconnectAttempts;
 /** @type {string} */
ReconnectingWebSocket.prototype.protocol;
 /** @type {number} */
ReconnectingWebSocket.prototype.readyState;
 /** @type {number} */
ReconnectingWebSocket.prototype.reconnectAttempts;
 /** @type {string} */
ReconnectingWebSocket.prototype.url;

/**
 * @param {number=} code
 * @param {string=} reason
 * @return {void}
 */
ReconnectingWebSocket.prototype.close = function(code, reason) {};

/**
 * @param {boolean=} reconnectAttempt
 * @return {void}
 */
ReconnectingWebSocket.prototype.open = function(reconnectAttempt) {};

/**
 * @return {void}
 */
ReconnectingWebSocket.prototype.refresh = function() {};

/**
 * @param {?} data
 * @return {void}
 */
ReconnectingWebSocket.prototype.send = function(data) {};
