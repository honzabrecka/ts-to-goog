/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/benchmark/index.d.ts:

/**
 * @constructor
 * @struct
 * @param {(string|!Function)|string|!Benchmark.Options} fn_or_name_or_options
 * @param {!Benchmark.Options|(string|!Function)=} options_or_fn
 * @param {!Benchmark.Options=} options
 */
function Benchmark(fn_or_name_or_options, options_or_fn, options) {}
 /** @type {!Benchmark.Options} */
Benchmark.options;
 /** @type {!Benchmark.Platform} */
Benchmark.platform;
 /** @type {!Benchmark.Support} */
Benchmark.support;
 /** @type {string} */
Benchmark.version;
 /** @type {boolean} */
Benchmark.prototype.aborted;
 /** @type {(string|!Function)} */
Benchmark.prototype.compiled;
 /** @type {number} */
Benchmark.prototype.count;
 /** @type {number} */
Benchmark.prototype.cycles;
 /** @type {!Error} */
Benchmark.prototype.error;
 /** @type {(string|!Function)} */
Benchmark.prototype.fn;
 /** @type {number} */
Benchmark.prototype.hz;
 /** @type {boolean} */
Benchmark.prototype.running;
 /** @type {(string|!Function)} */
Benchmark.prototype.setup;
 /** @type {(string|!Function)} */
Benchmark.prototype.teardown;
 /** @type {!Benchmark.Stats} */
Benchmark.prototype.stats;
 /** @type {!Benchmark.Times} */
Benchmark.prototype.times;

/**
 * @template T
 * @param {T} value
 * @return {T}
 */
Benchmark.deepClone = function(value) {};

/**
 * @param {(!Object|!Array<?>)} obj
 * @param {!Function} callback
 * @param {?=} thisArg
 * @return {void}
 */
Benchmark.each = function(obj, callback, thisArg) {};

/**
 * @param {!Object} destination
 * @param {...!Object} sources
 * @return {!Object}
 */
Benchmark.extend = function(destination, sources) {};

/**
 * @template T
 * @param {!Array<T>} arr
 * @param {function(T): ?|string} callback_or_filter
 * @param {?=} thisArg
 * @return {!Array<T>}
 */
Benchmark.filter = function(arr, callback_or_filter, thisArg) {};

/**
 * @template T
 * @param {!Array<T>} arr
 * @param {function(T): ?} callback
 * @param {?=} thisArg
 * @return {void}
 */
Benchmark.forEach = function(arr, callback, thisArg) {};

/**
 * @param {number} num
 * @return {string}
 */
Benchmark.formatNumber = function(num) {};

/**
 * @param {!Object} obj
 * @param {!Function} callback
 * @param {?=} thisArg
 * @return {void}
 */
Benchmark.forOwn = function(obj, callback, thisArg) {};

/**
 * @param {!Object} obj
 * @param {string} key
 * @return {boolean}
 */
Benchmark.hasKey = function(obj, key) {};

/**
 * @template T
 * @param {!Array<T>} arr
 * @param {T} value
 * @param {number=} fromIndex
 * @return {number}
 */
Benchmark.indexOf = function(arr, value, fromIndex) {};

/**
 * @param {string} template
 * @param {!Object} values
 * @return {string}
 */
Benchmark.interpolate = function(template, values) {};

/**
 * @param {!Array<!Benchmark>} benches
 * @param {(string|!Object)} name
 * @param {...?} args
 * @return {!Array<?>}
 */
Benchmark.invoke = function(benches, name, args) {};

/**
 * @param {!Object} obj
 * @param {string=} separator1
 * @param {string=} separator2
 * @return {string}
 */
Benchmark.join = function(obj, separator1, separator2) {};

/**
 * @template T, K
 * @param {!Array<T>} arr
 * @param {function(T): K} callback
 * @param {?=} thisArg
 * @return {!Array<K>}
 */
Benchmark.map = function(arr, callback, thisArg) {};

/**
 * @template T, K
 * @param {!Array<T>} arr
 * @param {string} key
 * @return {!Array<K>}
 */
Benchmark.pluck = function(arr, key) {};

/**
 * @template T, K
 * @param {!Array<T>} arr
 * @param {function(K, T): K} callback
 * @param {?=} thisArg
 * @return {K}
 */
Benchmark.reduce = function(arr, callback, thisArg) {};

/**
 * @return {!Benchmark}
 */
Benchmark.prototype.abort = function() {};

/**
 * @param {!Benchmark.Options} options
 * @return {!Benchmark}
 */
Benchmark.prototype.clone = function(options) {};

/**
 * @param {!Benchmark} benchmark
 * @return {number}
 */
Benchmark.prototype.compare = function(benchmark) {};

/**
 * @param {(string|!Object)} type
 * @return {?}
 */
Benchmark.prototype.emit = function(type) {};

/**
 * @param {string} type
 * @return {!Array<!Function>}
 */
Benchmark.prototype.listeners = function(type) {};

/**
 * @param {string|!Array<string>=} type_or_types
 * @param {!Function=} listener
 * @return {!Benchmark}
 */
Benchmark.prototype.off = function(type_or_types, listener) {};

/**
 * @param {string|!Array<string>=} type_or_types
 * @param {!Function=} listener
 * @return {!Benchmark}
 */
Benchmark.prototype.on = function(type_or_types, listener) {};

/**
 * @return {!Benchmark}
 */
Benchmark.prototype.reset = function() {};

/**
 * @param {!Benchmark.Options=} options
 * @return {!Benchmark}
 */
Benchmark.prototype.run = function(options) {};

/**
 * @return {string}
 */
Benchmark.prototype.toString = function() {};
/**
 * @record
 * @struct
 */
Benchmark.Options = function() {};
 /** @type {boolean} */
Benchmark.Options.prototype.async;
 /** @type {boolean} */
Benchmark.Options.prototype.defer;
 /** @type {number} */
Benchmark.Options.prototype.delay;
 /** @type {string} */
Benchmark.Options.prototype.id;
 /** @type {number} */
Benchmark.Options.prototype.initCount;
 /** @type {number} */
Benchmark.Options.prototype.maxTime;
 /** @type {number} */
Benchmark.Options.prototype.minSamples;
 /** @type {number} */
Benchmark.Options.prototype.minTime;
 /** @type {string} */
Benchmark.Options.prototype.name;
 /** @type {!Function} */
Benchmark.Options.prototype.onAbort;
 /** @type {!Function} */
Benchmark.Options.prototype.onComplete;
 /** @type {!Function} */
Benchmark.Options.prototype.onCycle;
 /** @type {!Function} */
Benchmark.Options.prototype.onError;
 /** @type {!Function} */
Benchmark.Options.prototype.onReset;
 /** @type {!Function} */
Benchmark.Options.prototype.onStart;
 /** @type {(string|!Function)} */
Benchmark.Options.prototype.setup;
 /** @type {(string|!Function)} */
Benchmark.Options.prototype.teardown;
 /** @type {(string|!Function)} */
Benchmark.Options.prototype.fn;
 /** @type {boolean} */
Benchmark.Options.prototype.queued;
/**
 * @record
 * @struct
 */
Benchmark.Platform = function() {};
 /** @type {string} */
Benchmark.Platform.prototype.description;
 /** @type {string} */
Benchmark.Platform.prototype.layout;
 /** @type {string} */
Benchmark.Platform.prototype.manufacturer;
 /** @type {string} */
Benchmark.Platform.prototype.name;
 /** @type {string} */
Benchmark.Platform.prototype.os;
 /** @type {string} */
Benchmark.Platform.prototype.prerelease;
 /** @type {string} */
Benchmark.Platform.prototype.product;
 /** @type {string} */
Benchmark.Platform.prototype.version;

/**
 * @return {string}
 */
Benchmark.Platform.prototype.toString = function() {};
/**
 * @record
 * @struct
 */
Benchmark.Support = function() {};
 /** @type {boolean} */
Benchmark.Support.prototype.air;
 /** @type {boolean} */
Benchmark.Support.prototype.argumentsClass;
 /** @type {boolean} */
Benchmark.Support.prototype.browser;
 /** @type {boolean} */
Benchmark.Support.prototype.charByIndex;
 /** @type {boolean} */
Benchmark.Support.prototype.charByOwnIndex;
 /** @type {boolean} */
Benchmark.Support.prototype.decompilation;
 /** @type {boolean} */
Benchmark.Support.prototype.descriptors;
 /** @type {boolean} */
Benchmark.Support.prototype.getAllKeys;
 /** @type {boolean} */
Benchmark.Support.prototype.iteratesOwnFirst;
 /** @type {boolean} */
Benchmark.Support.prototype.java;
 /** @type {boolean} */
Benchmark.Support.prototype.nodeClass;
 /** @type {boolean} */
Benchmark.Support.prototype.timeout;
/**
 * @record
 * @struct
 */
Benchmark.Stats = function() {};
 /** @type {number} */
Benchmark.Stats.prototype.deviation;
 /** @type {number} */
Benchmark.Stats.prototype.mean;
 /** @type {number} */
Benchmark.Stats.prototype.moe;
 /** @type {number} */
Benchmark.Stats.prototype.rme;
 /** @type {!Array<?>} */
Benchmark.Stats.prototype.sample;
 /** @type {number} */
Benchmark.Stats.prototype.sem;
 /** @type {number} */
Benchmark.Stats.prototype.variance;
/**
 * @record
 * @struct
 */
Benchmark.Times = function() {};
 /** @type {number} */
Benchmark.Times.prototype.cycle;
 /** @type {number} */
Benchmark.Times.prototype.elapsed;
 /** @type {number} */
Benchmark.Times.prototype.period;
 /** @type {number} */
Benchmark.Times.prototype.timeStamp;

/**
 * @constructor
 * @struct
 * @param {!Benchmark} clone
 */
Benchmark.Deferred = function(clone) {};
 /** @type {!Benchmark} */
Benchmark.Deferred.prototype.benchmark;
 /** @type {number} */
Benchmark.Deferred.prototype.cycles;
 /** @type {number} */
Benchmark.Deferred.prototype.elapsed;
 /** @type {number} */
Benchmark.Deferred.prototype.timeStamp;

/**
 * @constructor
 * @struct
 * @param {(string|!Object)} type
 */
Benchmark.Event = function(type) {};
 /** @type {boolean} */
Benchmark.Event.prototype.aborted;
 /** @type {boolean} */
Benchmark.Event.prototype.cancelled;
 /** @type {!Object} */
Benchmark.Event.prototype.currentTarget;
 /** @type {?} */
Benchmark.Event.prototype.result;
 /** @type {!Object} */
Benchmark.Event.prototype.target;
 /** @type {number} */
Benchmark.Event.prototype.timeStamp;
 /** @type {string} */
Benchmark.Event.prototype.type;

/**
 * @constructor
 * @struct
 * @param {string=} name
 * @param {!Benchmark.Options=} options
 */
Benchmark.Suite = function(name, options) {};
 /** @type {{name: string}} */
Benchmark.Suite.options;
 /** @type {boolean} */
Benchmark.Suite.prototype.aborted;
 /** @type {number} */
Benchmark.Suite.prototype.length;
 /** @type {boolean} */
Benchmark.Suite.prototype.running;

/**
 * @return {!Benchmark.Suite}
 */
Benchmark.Suite.prototype.abort = function() {};

/**
 * @param {string|(string|!Function)|!Benchmark.Options} name_or_fn_or_options
 * @param {(string|!Function)|!Benchmark.Options=} fn_or_options
 * @param {!Benchmark.Options=} options
 * @return {!Benchmark.Suite}
 */
Benchmark.Suite.prototype.add = function(name_or_fn_or_options, fn_or_options, options) {};

/**
 * @param {!Benchmark.Options} options
 * @return {!Benchmark.Suite}
 */
Benchmark.Suite.prototype.clone = function(options) {};

/**
 * @param {(string|!Object)} type
 * @return {?}
 */
Benchmark.Suite.prototype.emit = function(type) {};

/**
 * @param {(string|!Function)} callback
 * @return {!Benchmark.Suite}
 */
Benchmark.Suite.prototype.filter = function(callback) {};

/**
 * @param {!Function} callback
 * @return {!Benchmark.Suite}
 */
Benchmark.Suite.prototype.forEach = function(callback) {};

/**
 * @param {?} value
 * @return {number}
 */
Benchmark.Suite.prototype.indexOf = function(value) {};

/**
 * @param {string} name
 * @param {...?} args
 * @return {!Array<?>}
 */
Benchmark.Suite.prototype.invoke = function(name, args) {};

/**
 * @param {string=} separator
 * @return {string}
 */
Benchmark.Suite.prototype.join = function(separator) {};

/**
 * @param {string} type
 * @return {!Array<!Function>}
 */
Benchmark.Suite.prototype.listeners = function(type) {};

/**
 * @param {!Function} callback
 * @return {!Array<?>}
 */
Benchmark.Suite.prototype.map = function(callback) {};

/**
 * @param {string|!Array<string>=} type_or_types
 * @param {!Function=} callback
 * @return {!Benchmark}
 */
Benchmark.Suite.prototype.off = function(type_or_types, callback) {};

/**
 * @param {string|!Array<string>=} type_or_types
 * @param {!Function=} callback
 * @return {!Benchmark}
 */
Benchmark.Suite.prototype.on = function(type_or_types, callback) {};

/**
 * @param {string} property
 * @return {!Array<?>}
 */
Benchmark.Suite.prototype.pluck = function(property) {};

/**
 * @return {!Function}
 */
Benchmark.Suite.prototype.pop = function() {};

/**
 * @param {!Benchmark} benchmark
 * @return {number}
 */
Benchmark.Suite.prototype.push = function(benchmark) {};

/**
 * @template T
 * @param {!Function} callback
 * @param {T} accumulator
 * @return {T}
 */
Benchmark.Suite.prototype.reduce = function(callback, accumulator) {};

/**
 * @return {!Benchmark.Suite}
 */
Benchmark.Suite.prototype.reset = function() {};

/**
 * @return {!Array<?>}
 */
Benchmark.Suite.prototype.reverse = function() {};

/**
 * @param {!Benchmark.Options=} options
 * @return {!Benchmark.Suite}
 */
Benchmark.Suite.prototype.run = function(options) {};

/**
 * @return {!Benchmark}
 */
Benchmark.Suite.prototype.shift = function() {};

/**
 * @param {number} start
 * @param {number} end_or_deleteCount
 * @param {...?} values
 * @return {!Array<?>}
 */
Benchmark.Suite.prototype.slice = function(start, end_or_deleteCount, values) {};

/**
 * @param {!Benchmark} benchmark
 * @return {number}
 */
Benchmark.Suite.prototype.unshift = function(benchmark) {};

/* TODO: ExportAssignment in  */
