/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/hashtable/index.d.ts:
/**
 * @record
 * @struct
 */
function IHashtable() {}

/**
 * @param {TKey} key
 * @param {TValue} value
 * @return {TValue}
 */
IHashtable.prototype.put = function(key, value) {};

/**
 * @param {!IHashtable} hashtable
 * @param {function(TKey, TValue, TValue): TValue=} conflictCallback
 * @return {void}
 */
IHashtable.prototype.putAll = function(hashtable, conflictCallback) {};

/**
 * @param {TKey} key
 * @return {TValue}
 */
IHashtable.prototype.get = function(key) {};

/**
 * @param {TKey} key
 * @return {boolean}
 */
IHashtable.prototype.containsKey = function(key) {};

/**
 * @param {TValue} value
 * @return {boolean}
 */
IHashtable.prototype.containsValue = function(value) {};

/**
 * @return {void}
 */
IHashtable.prototype.clear = function() {};

/**
 * @return {boolean}
 */
IHashtable.prototype.isEmpty = function() {};

/**
 * @return {!Array<TKey>}
 */
IHashtable.prototype.keys = function() {};

/**
 * @return {!Array<TValue>}
 */
IHashtable.prototype.values = function() {};

/**
 * @return {!Array<!Array<?>>}
 */
IHashtable.prototype.entries = function() {};

/**
 * @param {TKey} key
 * @return {TValue}
 */
IHashtable.prototype.remove = function(key) {};

/**
 * @return {number}
 */
IHashtable.prototype.size = function() {};

/**
 * @return {!IHashtable}
 */
IHashtable.prototype.clone = function() {};

/**
 * @param {function(TKey, TValue): void} callback
 * @return {void}
 */
IHashtable.prototype.each = function(callback) {};

/**
 * @param {!IHashtable} hashtable
 * @return {boolean}
 */
IHashtable.prototype.equals = function(hashtable) {};

/**
 * @return {string}
 */
IHashtable.prototype.toQueryString = function() {};
/**
 * @record
 * @struct
 */
function IHashtableOptions() {}
 /** @type {function(TKey): ?} */
IHashtableOptions.prototype.hashCode;
 /** @type {function(TKey, TKey): boolean} */
IHashtableOptions.prototype.equals;
 /** @type {boolean} */
IHashtableOptions.prototype.replaceDuplicateKey;
/**
 * @record
 * @struct
 */
function IHashtableStatic() {}

/* TODO: ConstructSignature:  */

/* TODO: ConstructSignature:  */

/* TODO: ConstructSignature:  */
 /** @type {!IHashtableStatic} */
var Hashtable;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "hashtable"
/** @const */
tsickle_declare_module.hashtable = {};

/* TODO: ExportAssignment in tsickle_declare_module.hashtable */
