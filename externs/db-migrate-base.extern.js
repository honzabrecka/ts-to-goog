/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/db-migrate-base/index.d.ts:

/* TODO: ImportDeclaration in  */
/**
 * @record
 * @struct
 */
function CallbackFunction() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function InternalModule() {}
 /** @type {?} */
InternalModule.prototype.log;
 /** @type {?} */
InternalModule.prototype.type;
/**
 * @record
 * @struct
 */
function InternalOptions() {}
 /** @type {?} */
InternalOptions.prototype.mod;
/**
 * @record
 * @struct
 */
function ColumnSpec() {}
 /** @type {number} */
ColumnSpec.prototype.length;
 /** @type {string} */
ColumnSpec.prototype.type;
 /** @type {boolean} */
ColumnSpec.prototype.unsigned;
 /** @type {boolean} */
ColumnSpec.prototype.primaryKey;
 /** @type {boolean} */
ColumnSpec.prototype.autoIncrement;
 /** @type {boolean} */
ColumnSpec.prototype.notNull;
 /** @type {boolean} */
ColumnSpec.prototype.unique;
 /** @type {?} */
ColumnSpec.prototype.defaultValue;
 /** @type {?} */
ColumnSpec.prototype.foreignKey;
/**
 * @record
 * @struct
 */
function ForeignKeySpec() {}
 /** @type {string} */
ForeignKeySpec.prototype.name;
 /** @type {string} */
ForeignKeySpec.prototype.table;
 /** @type {?} */
ForeignKeySpec.prototype.rules;
 /** @type {?} */
ForeignKeySpec.prototype.mapping;
/**
 * @record
 * @struct
 */
function ForeignKeyRules() {}
 /** @type {string} */
ForeignKeyRules.prototype.onDelete;
 /** @type {string} */
ForeignKeyRules.prototype.onUpdate;
/**
 * @record
 * @struct
 */
function RemoveForeignKeyOptions() {}
 /** @type {boolean} */
RemoveForeignKeyOptions.prototype.dropIndex;
/**
 * @record
 * @struct
 */
function ColumnDef() {}
 /** @type {?} */
ColumnDef.prototype.foreignKey;
 /** @type {string} */
ColumnDef.prototype.constraints;
/**
 * @record
 * @struct
 */
function CreateTableOptions() {}
 /** @type {!Array<?>} */
CreateTableOptions.prototype.columns;
 /** @type {boolean} */
CreateTableOptions.prototype.ifNotExists;
/**
 * @record
 * @struct
 */
function DropTableOptions() {}
 /** @type {boolean} */
DropTableOptions.prototype.ifExists;

/**
 * @constructor
 * @struct
 * @param {?} intern
 */
function Base(intern) {}

/**
 * @param {?=} callback
 * @return {void}
 */
Base.prototype.close = function(callback) {};

/**
 * @param {string} str
 * @return {string}
 */
Base.prototype.mapDataType = function(str) {};

/**
 * @param {string} tableName
 * @param {?} callback
 * @return {void}
 */
Base.prototype.truncate = function(tableName, callback) {};

/**
 * @param {?} dbms
 * @param {?} callback
 * @return {void}
 */
Base.prototype.checkDBMS = function(dbms, callback) {};

/**
 * @param {...?} options
 * @return {void}
 */
Base.prototype.createDatabase = function(options) {};

/**
 * @param {...?} options
 * @return {void}
 */
Base.prototype.switchDatabase = function(options) {};

/**
 * @param {...?} options
 * @return {void}
 */
Base.prototype.dropDatabase = function(options) {};

/**
 * @param {!Array<string>} foreignKeys
 * @param {?} callback
 * @return {void}
 */
Base.prototype.recurseCallbackArray = function(foreignKeys, callback) {};

/**
 * @param {string} tableName
 * @param {string} columnName
 * @param {?} fkOptions
 * @return {?}
 */
Base.prototype.bindForeignKey = function(tableName, columnName, fkOptions) {};

/**
 * @param {string} name
 * @param {?} spec
 * @param {?=} options
 * @return {?}
 */
Base.prototype.createColumnDef = function(name, spec, options) {};

/**
 * @param {?} callback
 * @return {void}
 */
Base.prototype.createMigrationsTable = function(callback) {};

/**
 * @param {?} callback
 * @return {void}
 */
Base.prototype.createSeedsTable = function(callback) {};

/**
 * @param {string} tableName
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
Base.prototype.createTable = function(tableName, options, callback) {};

/**
 * @param {string} tableName
 * @param {?=} optionsOrCb
 * @param {?=} callback
 * @return {void}
 */
Base.prototype.dropTable = function(tableName, optionsOrCb, callback) {};

/**
 * @param {string} tableName
 * @param {string} newTableName
 * @param {?} callback
 * @return {void}
 */
Base.prototype.renameTable = function(tableName, newTableName, callback) {};

/**
 * @param {string} tableName
 * @param {string} columnName
 * @param {?} columnSpec
 * @param {?} callback
 * @return {void}
 */
Base.prototype.addColumn = function(tableName, columnName, columnSpec, callback) {};

/**
 * @param {string} tableName
 * @param {string} columnName
 * @param {?} callback
 * @return {void}
 */
Base.prototype.removeColumn = function(tableName, columnName, callback) {};

/**
 * @param {string} tableName
 * @param {string} oldColumnName
 * @param {string} newColumnName
 * @param {?} callback
 * @return {void}
 */
Base.prototype.renameColumn = function(tableName, oldColumnName, newColumnName, callback) {};

/**
 * @param {string} tableName
 * @param {string} columnName
 * @param {?} columnSpec
 * @param {?} callback
 * @return {void}
 */
Base.prototype.changeColumn = function(tableName, columnName, columnSpec, callback) {};

/**
 * @param {!Array<string>} arr
 * @return {!Array<string>}
 */
Base.prototype.quoteDDLArr = function(arr) {};

/**
 * @param {!Array<string>} arr
 * @return {!Array<string>}
 */
Base.prototype.quoteArr = function(arr) {};

/**
 * @param {string} tableName
 * @param {string} indexName
 * @param {(string|!Array<string>)} columns
 * @param {(boolean|?)=} uniqueOrCb
 * @param {?=} callback
 * @return {void}
 */
Base.prototype.addIndex = function(tableName, indexName, columns, uniqueOrCb, callback) {};

/**
 * @param {string} tableName
 * @param {?} columnNameOrValueArray
 * @param {?=} valueArrayOrCb
 * @param {?=} callback
 * @return {void}
 */
Base.prototype.insert = function(tableName, columnNameOrValueArray, valueArrayOrCb, callback) {};

/**
 * @param {string} tableName
 * @param {?} columnNameOrValueArray
 * @param {?=} valueArrayOrIds
 * @param {?=} idsOrCb
 * @param {?=} callback
 * @return {void}
 */
Base.prototype.update = function(tableName, columnNameOrValueArray, valueArrayOrIds, idsOrCb, callback) {};

/**
 * @param {string} tableName
 * @param {string} column
 * @param {?=} id
 * @param {?=} callback
 * @return {void}
 */
Base.prototype.lookup = function(tableName, column, id, callback) {};

/**
 * @param {string} tableNameOrIndexName
 * @param {(string|?)=} indexNameOrCb
 * @param {?=} callback
 * @return {void}
 */
Base.prototype.removeIndex = function(tableNameOrIndexName, indexNameOrCb, callback) {};

/**
 * @param {string} tableName
 * @param {string} referencedTableName
 * @param {string} keyName
 * @param {?} fieldMapping
 * @param {?} rules
 * @param {?} callback
 * @return {void}
 */
Base.prototype.addForeignKey = function(tableName, referencedTableName, keyName, fieldMapping, rules, callback) {};

/**
 * @param {string} tableName
 * @param {string} keyName
 * @param {?=} optionsOrCb
 * @param {?=} callback
 * @return {void}
 */
Base.prototype.removeForeignKey = function(tableName, keyName, optionsOrCb, callback) {};

/**
 * @param {(string|?)} spec
 * @return {?}
 */
Base.prototype.normalizeColumnSpec = function(spec) {};

/**
 * @param {string} name
 * @param {?} callback
 * @return {void}
 */
Base.prototype.addMigrationRecord = function(name, callback) {};

/**
 * @param {string} name
 * @param {?} callback
 * @return {void}
 */
Base.prototype.addSeedRecord = function(name, callback) {};

/**
 * @param {?} callback
 * @return {void}
 */
Base.prototype.startMigration = function(callback) {};

/**
 * @param {?} callback
 * @return {void}
 */
Base.prototype.endMigration = function(callback) {};

/**
 * @param {string=} sql
 * @param {(!Array<?>|?)=} paramsOrCb
 * @param {?=} callback
 * @return {void}
 */
Base.prototype.runSql = function(sql, paramsOrCb, callback) {};

/**
 * @param {?} callback
 * @return {void}
 */
Base.prototype.allLoadedMigrations = function(callback) {};

/**
 * @param {?} callback
 * @return {void}
 */
Base.prototype.allLoadedSeeds = function(callback) {};

/**
 * @param {string} migrationName
 * @param {?} callback
 * @return {void}
 */
Base.prototype.deleteMigration = function(migrationName, callback) {};

/**
 * @param {string} table
 * @param {?} ids
 * @param {?} callback
 * @return {void}
 */
Base.prototype.remove = function(table, ids, callback) {};

/**
 * @param {?} ids
 * @return {string}
 */
Base.prototype.buildWhereClause = function(ids) {};

/**
 * @param {string} seedName
 * @param {?} callback
 * @return {void}
 */
Base.prototype.deleteSeed = function(seedName, callback) {};

/**
 * @param {string} sql
 * @param {(!Array<?>|?)=} paramsOrCb
 * @param {?=} callback
 * @return {void}
 */
Base.prototype.all = function(sql, paramsOrCb, callback) {};

/**
 * @param {string} str
 * @return {string}
 */
Base.prototype.escape = function(str) {};

/**
 * @param {string} str
 * @return {string}
 */
Base.prototype.escapeString = function(str) {};

/**
 * @param {string} str
 * @return {string}
 */
Base.prototype.escapeDDL = function(str) {};

/**
 * @return {!Bluebird<?>}
 */
Base.prototype.closeAsync = function() {};

/**
 * @param {string} tableName
 * @return {!Bluebird<?>}
 */
Base.prototype.truncateAsync = function(tableName) {};

/**
 * @param {?} dbms
 * @return {!Bluebird<?>}
 */
Base.prototype.checkDBMSAsync = function(dbms) {};

/**
 * @param {...?} options
 * @return {!Bluebird<?>}
 */
Base.prototype.createDatabaseAsync = function(options) {};

/**
 * @param {...?} options
 * @return {!Bluebird<?>}
 */
Base.prototype.switchDatabaseAsync = function(options) {};

/**
 * @param {...?} options
 * @return {!Bluebird<?>}
 */
Base.prototype.dropDatabaseAsync = function(options) {};

/**
 * @param {!Array<string>} foreignKeys
 * @return {!Bluebird<?>}
 */
Base.prototype.recurseCallbackArrayAsync = function(foreignKeys) {};

/**
 * @return {!Bluebird<?>}
 */
Base.prototype.createMigrationsTableAsync = function() {};

/**
 * @return {!Bluebird<?>}
 */
Base.prototype.createSeedsTableAsync = function() {};

/**
 * @param {string} tableName
 * @param {?} options
 * @return {!Bluebird<?>}
 */
Base.prototype.createTableAsync = function(tableName, options) {};

/**
 * @param {string} tableName
 * @param {?=} options
 * @return {!Bluebird<?>}
 */
Base.prototype.dropTableAsync = function(tableName, options) {};

/**
 * @param {string} tableName
 * @param {string} newTableName
 * @return {!Bluebird<?>}
 */
Base.prototype.renameTableAsync = function(tableName, newTableName) {};

/**
 * @param {string} tableName
 * @param {string} columnName
 * @param {?} columnSpec
 * @return {!Bluebird<?>}
 */
Base.prototype.addColumnAsync = function(tableName, columnName, columnSpec) {};

/**
 * @param {string} tableName
 * @param {string} columnName
 * @return {!Bluebird<?>}
 */
Base.prototype.removeColumnAsync = function(tableName, columnName) {};

/**
 * @param {string} tableName
 * @param {string} oldColumnName
 * @param {string} newColumnName
 * @return {!Bluebird<?>}
 */
Base.prototype.renameColumnAsync = function(tableName, oldColumnName, newColumnName) {};

/**
 * @param {string} tableName
 * @param {string} columnName
 * @param {?} columnSpec
 * @return {!Bluebird<?>}
 */
Base.prototype.changeColumnAsync = function(tableName, columnName, columnSpec) {};

/**
 * @param {string} tableName
 * @param {string} indexName
 * @param {(string|!Array<string>)} columns
 * @param {boolean=} unique
 * @return {!Bluebird<?>}
 */
Base.prototype.addIndexAsync = function(tableName, indexName, columns, unique) {};

/**
 * @param {string} tableName
 * @param {?} columnNameOrValueArray
 * @param {?=} valueArrayOrCb
 * @param {?=} callback
 * @return {!Bluebird<?>}
 */
Base.prototype.insertAsync = function(tableName, columnNameOrValueArray, valueArrayOrCb, callback) {};

/**
 * @param {string} tableName
 * @param {?} columnNameOrValueArray
 * @param {?=} valueArrayOrIds
 * @param {?=} idsOrCb
 * @param {?=} callback
 * @return {!Bluebird<?>}
 */
Base.prototype.updateAsync = function(tableName, columnNameOrValueArray, valueArrayOrIds, idsOrCb, callback) {};

/**
 * @param {string} tableName
 * @param {string} column
 * @param {?=} id
 * @param {?=} callback
 * @return {!Bluebird<?>}
 */
Base.prototype.lookupAsync = function(tableName, column, id, callback) {};

/**
 * @param {string} tableNameOrIndexName
 * @param {string=} indexName
 * @return {!Bluebird<?>}
 */
Base.prototype.removeIndexAsync = function(tableNameOrIndexName, indexName) {};

/**
 * @param {string} tableName
 * @param {string} referencedTableName
 * @param {string} keyName
 * @param {?} fieldMapping
 * @param {?} rules
 * @return {!Bluebird<?>}
 */
Base.prototype.addForeignKeyAsync = function(tableName, referencedTableName, keyName, fieldMapping, rules) {};

/**
 * @param {string} tableName
 * @param {string} keyName
 * @param {?=} options
 * @return {!Bluebird<?>}
 */
Base.prototype.removeForeignKeyAsync = function(tableName, keyName, options) {};

/**
 * @param {string} name
 * @return {!Bluebird<?>}
 */
Base.prototype.addMigrationRecordAsync = function(name) {};

/**
 * @param {string} name
 * @return {!Bluebird<?>}
 */
Base.prototype.addSeedRecordAsync = function(name) {};

/**
 * @return {!Bluebird<?>}
 */
Base.prototype.startMigrationAsync = function() {};

/**
 * @param {?} callback
 * @return {!Bluebird<?>}
 */
Base.prototype.endMigrationAsync = function(callback) {};

/**
 * @param {string=} sql
 * @param {!Array<?>=} params
 * @return {!Bluebird<?>}
 */
Base.prototype.runSqlAsync = function(sql, params) {};

/**
 * @return {!Bluebird<?>}
 */
Base.prototype.allLoadedMigrationsAsync = function() {};

/**
 * @return {!Bluebird<?>}
 */
Base.prototype.allLoadedSeedsAsync = function() {};

/**
 * @param {string} migrationName
 * @return {!Bluebird<?>}
 */
Base.prototype.deleteMigrationAsync = function(migrationName) {};

/**
 * @param {string} table
 * @param {?} ids
 * @return {!Bluebird<?>}
 */
Base.prototype.removeAsync = function(table, ids) {};

/**
 * @param {string} seedName
 * @return {!Bluebird<?>}
 */
Base.prototype.deleteSeedAsync = function(seedName) {};

/**
 * @param {string} sql
 * @param {!Array<?>=} params
 * @return {!Bluebird<?>}
 */
Base.prototype.allAsync = function(sql, params) {};
