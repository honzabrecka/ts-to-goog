/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/nano/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/**
 * @param {(string|!nano.Configuration)} config
 * @return {(!nano.ServerScope|!nano.DocumentScope)}
 */
function nano(config) {}
/**
 * @record
 * @struct
 */
nano.Configuration = function() {};
 /** @type {string} */
nano.Configuration.prototype.url;
 /** @type {!request.CoreOptions} */
nano.Configuration.prototype.requestDefaults;
 /** @type {boolean} */
nano.Configuration.prototype.parseUrl;

/**
 * @param {string} id
 * @param {?} args
 * @return {void}
 */
nano.Configuration.prototype.log = function(id, args) {};

/**
 * @param {?} params
 * @return {void}
 */
nano.Configuration.prototype.request = function(params) {};

/** @typedef {function(?, ?, ?): void} */
nano.Callback;
/**
 * @record
 * @struct
 */
nano.ServerScope = function() {};
 /** @type {!nano.ServerConfig} */
nano.ServerScope.prototype.config;
 /** @type {!nano.DatabaseScope} */
nano.ServerScope.prototype.db;
 /** @type {function((string|!nano.RequestOptions), function(?, ?, ?): void): void} */
nano.ServerScope.prototype.request;
 /** @type {function((string|!nano.RequestOptions), function(?, ?, ?): void): void} */
nano.ServerScope.prototype.relax;
 /** @type {function((string|!nano.RequestOptions), function(?, ?, ?): void): void} */
nano.ServerScope.prototype.dinosaur;

/**
 * @param {string} db
 * @return {!nano.DocumentScope}
 */
nano.ServerScope.prototype.use = function(db) {};

/**
 * @param {string} db
 * @return {!nano.DocumentScope}
 */
nano.ServerScope.prototype.scope = function(db) {};

/**
 * @param {string} username
 * @param {string} userpass
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.ServerScope.prototype.auth = function(username, userpass, callback) {};

/**
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.ServerScope.prototype.session = function(callback) {};

/**
 * @param {!nano.UpdatesParams=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.ServerScope.prototype.updates = function(params, callback) {};

/**
 * @param {?=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!internal.EventEmitter}
 */
nano.ServerScope.prototype.followUpdates = function(params, callback) {};

/**
 * @param {number} num
 * @param {function(?, ?, ?): void} callback
 * @return {!request.Request}
 */
nano.ServerScope.prototype.uuids = function(num, callback) {};
/**
 * @record
 * @struct
 */
nano.DatabaseScope = function() {};

/**
 * @param {string} name
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DatabaseScope.prototype.create = function(name, callback) {};

/**
 * @param {string} name
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DatabaseScope.prototype.get = function(name, callback) {};

/**
 * @param {string} name
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DatabaseScope.prototype.destroy = function(name, callback) {};

/**
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DatabaseScope.prototype.list = function(callback) {};

/**
 * @param {string} db
 * @return {!nano.DocumentScope}
 */
nano.DatabaseScope.prototype.use = function(db) {};

/**
 * @param {string} name
 * @param {string=} designname
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DatabaseScope.prototype.compact = function(name, designname, callback) {};

/**
 * @param {(string|!nano.DocumentScope)} source
 * @param {(string|!nano.DocumentScope)} target
 * @param {?=} options
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DatabaseScope.prototype.replicate = function(source, target, options, callback) {};

/**
 * @param {string} name
 * @param {?=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DatabaseScope.prototype.changes = function(name, params, callback) {};

/**
 * @param {string} source
 * @param {!nano.DatabaseScopeFollowUpdatesParams=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!internal.EventEmitter}
 */
nano.DatabaseScope.prototype.follow = function(source, params, callback) {};

/**
 * @param {?=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!internal.EventEmitter}
 */
nano.DatabaseScope.prototype.followUpdates = function(params, callback) {};

/**
 * @param {!nano.UpdatesParams=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DatabaseScope.prototype.updates = function(params, callback) {};
/**
 * @record
 * @struct
 */
nano.DocumentScope = function() {};
 /** @type {!nano.ServerConfig} */
nano.DocumentScope.prototype.config;
 /** @type {!nano.Multipart} */
nano.DocumentScope.prototype.multipart;
 /** @type {!nano.Attachment} */
nano.DocumentScope.prototype.attachment;
 /** @type {!nano.ServerScope} */
nano.DocumentScope.prototype.server;

/**
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.info = function(callback) {};

/**
 * @param {(string|!nano.DocumentScope)} target
 * @param {?=} options
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.replicate = function(target, options, callback) {};

/**
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.compact = function(callback) {};

/**
 * @param {?=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.changes = function(params, callback) {};

/**
 * @param {!nano.DocumentScopeFollowUpdatesParams=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!internal.EventEmitter}
 */
nano.DocumentScope.prototype.follow = function(params, callback) {};

/**
 * @param {string} username
 * @param {string} userpass
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.auth = function(username, userpass, callback) {};

/**
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.session = function(callback) {};

/**
 * @param {?} document
 * @param {?=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.insert = function(document, params, callback) {};

/**
 * @param {string} docname
 * @param {?=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.get = function(docname, params, callback) {};

/**
 * @param {string} docname
 * @param {function(?, ?, ?): void} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.head = function(docname, callback) {};

/**
 * @param {string} src_document
 * @param {string} dst_document
 * @param {?} options
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.copy = function(src_document, dst_document, options, callback) {};

/**
 * @param {string} docname
 * @param {string} rev
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.destroy = function(docname, rev, callback) {};

/**
 * @param {!nano.BulkModifyDocsWrapper} docs
 * @param {?=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.bulk = function(docs, params, callback) {};

/**
 * @param {?=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.list = function(params, callback) {};

/**
 * @param {!nano.BulkFetchDocsWrapper} docnames
 * @param {?=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.fetch = function(docnames, params, callback) {};

/**
 * @param {!nano.BulkFetchDocsWrapper} docnames
 * @param {?=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.fetchRevs = function(docnames, params, callback) {};

/**
 * @param {string} designname
 * @param {string} showname
 * @param {string} doc_id
 * @param {?=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.show = function(designname, showname, doc_id, params, callback) {};

/**
 * @param {string} designname
 * @param {string} updatename
 * @param {string} docname
 * @param {?=} body
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.atomic = function(designname, updatename, docname, body, callback) {};

/**
 * @param {string} designname
 * @param {string} updatename
 * @param {string} docname
 * @param {?=} body
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.updateWithHandler = function(designname, updatename, docname, body, callback) {};

/**
 * @param {string} designname
 * @param {string} searchname
 * @param {?=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.search = function(designname, searchname, params, callback) {};

/**
 * @param {string} ddoc
 * @param {string} viewname
 * @param {?=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.spatial = function(ddoc, viewname, params, callback) {};

/**
 * @param {string} designname
 * @param {string} viewname
 * @param {?=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.view = function(designname, viewname, params, callback) {};

/**
 * @param {string} designname
 * @param {string} viewname
 * @param {string} listname
 * @param {?=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.DocumentScope.prototype.viewWithList = function(designname, viewname, listname, params, callback) {};
/**
 * @record
 * @struct
 */
nano.Multipart = function() {};

/**
 * @param {?} doc
 * @param {!Array<?>} attachments
 * @param {?} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.Multipart.prototype.insert = function(doc, attachments, params, callback) {};

/**
 * @param {string} docname
 * @param {?=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.Multipart.prototype.get = function(docname, params, callback) {};
/**
 * @record
 * @struct
 */
nano.Attachment = function() {};

/**
 * @param {string} docname
 * @param {string} attname
 * @param {?} att
 * @param {string} contenttype
 * @param {?=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.Attachment.prototype.insert = function(docname, attname, att, contenttype, params, callback) {};

/**
 * @param {string} docname
 * @param {string} attname
 * @param {?=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.Attachment.prototype.get = function(docname, attname, params, callback) {};

/**
 * @param {string} docname
 * @param {string} attname
 * @param {?=} params
 * @param {function(?, ?, ?): void=} callback
 * @return {!request.Request}
 */
nano.Attachment.prototype.destroy = function(docname, attname, params, callback) {};
/**
 * @record
 * @struct
 */
nano.ServerConfig = function() {};
 /** @type {string} */
nano.ServerConfig.prototype.url;
 /** @type {string} */
nano.ServerConfig.prototype.db;

/** @typedef {function((string|!nano.RequestOptions), function(?, ?, ?): void): void} */
nano.RequestFunction;
/**
 * @record
 * @struct
 */
nano.RequestOptions = function() {};
 /** @type {string} */
nano.RequestOptions.prototype.db;
 /** @type {string} */
nano.RequestOptions.prototype.method;
 /** @type {string} */
nano.RequestOptions.prototype.path;
 /** @type {string} */
nano.RequestOptions.prototype.doc;
 /** @type {string} */
nano.RequestOptions.prototype.att;
 /** @type {?} */
nano.RequestOptions.prototype.qs;
 /** @type {string} */
nano.RequestOptions.prototype.content_type;
 /** @type {?} */
nano.RequestOptions.prototype.headers;
 /** @type {?} */
nano.RequestOptions.prototype.body;
 /** @type {string} */
nano.RequestOptions.prototype.encoding;
 /** @type {!Array<?>} */
nano.RequestOptions.prototype.multipart;
/**
 * @record
 * @struct
 */
nano.UpdatesParams = function() {};
 /** @type {string} */
nano.UpdatesParams.prototype.feed;
 /** @type {number} */
nano.UpdatesParams.prototype.timeout;
 /** @type {boolean} */
nano.UpdatesParams.prototype.heartbeat;
/**
 * @record
 * @struct
 */
nano.DocumentScopeFollowUpdatesParams = function() {};
 /** @type {boolean} */
nano.DocumentScopeFollowUpdatesParams.prototype.inlucde_docs;
 /** @type {string} */
nano.DocumentScopeFollowUpdatesParams.prototype.since;
 /** @type {number} */
nano.DocumentScopeFollowUpdatesParams.prototype.heartbeat;
 /** @type {string} */
nano.DocumentScopeFollowUpdatesParams.prototype.feed;
 /** @type {(string|function(?, ?): boolean)} */
nano.DocumentScopeFollowUpdatesParams.prototype.filter;
 /** @type {?} */
nano.DocumentScopeFollowUpdatesParams.prototype.query_params;
 /** @type {?} */
nano.DocumentScopeFollowUpdatesParams.prototype.headers;
 /** @type {number} */
nano.DocumentScopeFollowUpdatesParams.prototype.inactivity_ms;
 /** @type {number} */
nano.DocumentScopeFollowUpdatesParams.prototype.max_retry_seconds;
 /** @type {number} */
nano.DocumentScopeFollowUpdatesParams.prototype.initial_retry_delay;
 /** @type {number} */
nano.DocumentScopeFollowUpdatesParams.prototype.response_grace_time;
/**
 * @extends {nano.DocumentScopeFollowUpdatesParams}
 * @record
 * @struct
 */
nano.DatabaseScopeFollowUpdatesParams = function() {};
 /** @type {string} */
nano.DatabaseScopeFollowUpdatesParams.prototype.db;

/** @typedef {function(?, ?): boolean} */
nano.FollowUpdatesParamsFilterFunction;
/**
 * @record
 * @struct
 */
nano.BulkModifyDocsWrapper = function() {};
 /** @type {!Array<?>} */
nano.BulkModifyDocsWrapper.prototype.docs;
/**
 * @record
 * @struct
 */
nano.BulkFetchDocsWrapper = function() {};
 /** @type {!Array<string>} */
nano.BulkFetchDocsWrapper.prototype.keys;

/* TODO: ExportAssignment in  */
