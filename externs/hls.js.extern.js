/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/hls.js/index.d.ts:

/**
 * @constructor
 * @struct
 * @param {!Hls.LoaderConfig} config
 */
function Loader(config) {}

/**
 * Start retrieving content located at given URL (HTTP GET).
 * @param {!Hls.LoaderContext} context
 * @param {!Hls.LoaderConfig} config
 * @param {!Hls.LoaderCallbacks} callbacks
 * @return {void}
 */
Loader.prototype.load = function(context, config, callbacks) {};

/**
 * Abort any loading in progress.
 * @return {void}
 */
Loader.prototype.abort = function() {};

/**
 * Destroy loading context.
 * @return {void}
 */
Loader.prototype.destroy = function() {};
/** @const */
var Hls = {};
/** @const */
Hls.Events = {};
 /** @type {string} */
Hls.Events.MEDIA_ATTACHING;
 /** @type {string} */
Hls.Events.MEDIA_ATTACHED;
 /** @type {string} */
Hls.Events.MEDIA_DETACHING;
 /** @type {string} */
Hls.Events.MEDIA_DETACHED;
 /** @type {string} */
Hls.Events.BUFFER_RESET;
 /** @type {string} */
Hls.Events.BUFFER_CODECS;
 /** @type {string} */
Hls.Events.BUFFER_CREATED;
 /** @type {string} */
Hls.Events.BUFFER_APPENDING;
 /** @type {string} */
Hls.Events.BUFFER_APPENDED;
 /** @type {string} */
Hls.Events.BUFFER_EOS;
 /** @type {string} */
Hls.Events.BUFFER_FLUSHING;
 /** @type {string} */
Hls.Events.BUFFER_FLUSHED;
 /** @type {string} */
Hls.Events.MANIFEST_LOADING;
 /** @type {string} */
Hls.Events.MANIFEST_LOADED;
 /** @type {string} */
Hls.Events.MANIFEST_PARSED;
 /** @type {string} */
Hls.Events.LEVEL_LOADING;
 /** @type {string} */
Hls.Events.LEVEL_LOADED;
 /** @type {string} */
Hls.Events.LEVEL_UPDATED;
 /** @type {string} */
Hls.Events.LEVEL_PTS_UPDATED;
 /** @type {string} */
Hls.Events.LEVEL_SWITCHING;
 /** @type {string} */
Hls.Events.LEVEL_SWITCHED;
 /** @type {string} */
Hls.Events.AUDIO_TRACKS_UPDATED;
 /** @type {string} */
Hls.Events.AUDIO_TRACK_SWTICH;
 /** @type {string} */
Hls.Events.AUDIO_TRACK_SWITCHING;
 /** @type {string} */
Hls.Events.AUDIO_TRACK_SWITCHED;
 /** @type {string} */
Hls.Events.AUDIO_TRACK_LOADING;
 /** @type {string} */
Hls.Events.AUDIO_TRACK_LOADED;
 /** @type {string} */
Hls.Events.SUBTITLE_TRACKS_UPDATED;
 /** @type {string} */
Hls.Events.SUBTITLE_TRACK_SWITCH;
 /** @type {string} */
Hls.Events.SUBTITLE_TRACK_LOADING;
 /** @type {string} */
Hls.Events.SUBTITLE_TRACK_LOADED;
 /** @type {string} */
Hls.Events.SUBTITLE_FRAG_PROCESSED;
 /** @type {string} */
Hls.Events.KEY_LOADING;
 /** @type {string} */
Hls.Events.KEY_LOADED;
 /** @type {string} */
Hls.Events.INIT_PTS_FOUND;
 /** @type {string} */
Hls.Events.FRAG_LOADING;
 /** @type {string} */
Hls.Events.FRAG_LOAD_PROGRESS;
 /** @type {string} */
Hls.Events.FRAG_LOAD_ERMERGENCY_ABORTED;
 /** @type {string} */
Hls.Events.FRAG_LOADED;
 /** @type {string} */
Hls.Events.FRAG_DECRYPTED;
 /** @type {string} */
Hls.Events.FRAG_PARSING_INIT_SEGMENT;
 /** @type {string} */
Hls.Events.FRAG_PARSING_METADATA;
 /** @type {string} */
Hls.Events.FRAG_PARSING_DATA;
 /** @type {string} */
Hls.Events.FRAG_PARSED;
 /** @type {string} */
Hls.Events.FRAG_BUFFERED;
 /** @type {string} */
Hls.Events.FRAG_CHANGED;
 /** @type {string} */
Hls.Events.FPS_DROP;
 /** @type {string} */
Hls.Events.FPS_DROP_LEVEL_CAPPING;
 /** @type {string} */
Hls.Events.ERROR;
 /** @type {string} */
Hls.Events.DESTROYING;
 /** @type {string} */
Hls.Events.STREAM_STATE_TRANSITION;
/** @const */
Hls.ErrorDetails = {};
 /** @type {string} */
Hls.ErrorDetails.MANIFEST_LOAD_ERROR;
 /** @type {string} */
Hls.ErrorDetails.MANIFEST_LOAD_TIMEOUT;
 /** @type {string} */
Hls.ErrorDetails.MANIFEST_PARSING_ERROR;
 /** @type {string} */
Hls.ErrorDetails.LEVEL_LOAD_ERROR;
 /** @type {string} */
Hls.ErrorDetails.LEVEL_LOAD_TIMEOUT;
 /** @type {string} */
Hls.ErrorDetails.AUDIO_TRACK_LOAD_ERROR;
 /** @type {string} */
Hls.ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT;
 /** @type {string} */
Hls.ErrorDetails.FRAG_LOAD_ERROR;
 /** @type {string} */
Hls.ErrorDetails.FRAG_LOAD_TIMEOUT;
 /** @type {string} */
Hls.ErrorDetails.KEY_LOAD_ERROR;
 /** @type {string} */
Hls.ErrorDetails.KEY_LOAD_TIMEOUT;
 /** @type {string} */
Hls.ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR;
 /** @type {string} */
Hls.ErrorDetails.FRAG_LOOP_LOADING_ERROR;
 /** @type {string} */
Hls.ErrorDetails.FRAG_DECRYPT_ERROR;
 /** @type {string} */
Hls.ErrorDetails.FRAG_PARSING_ERROR;
 /** @type {string} */
Hls.ErrorDetails.BUFFER_ADD_CODEC_ERROR;
 /** @type {string} */
Hls.ErrorDetails.BUFFER_APPEND_ERROR;
 /** @type {string} */
Hls.ErrorDetails.BUFFER_APPENDING_ERROR;
 /** @type {string} */
Hls.ErrorDetails.BUFFER_STALLED_ERROR;
 /** @type {string} */
Hls.ErrorDetails.BUFFER_FULL_ERROR;
 /** @type {string} */
Hls.ErrorDetails.BUFFER_SEEK_OVER_HOLE;
 /** @type {string} */
Hls.ErrorDetails.BUFFER_NUDGE_ON_STALL;
 /** @type {string} */
Hls.ErrorDetails.REMUX_ALLOC_ERROR;
 /** @type {string} */
Hls.ErrorDetails.LEVEL_SWITCH_ERROR;
 /** @type {string} */
Hls.ErrorDetails.INTERNAL_EXCEPTION;
/** @const */
Hls.ErrorTypes = {};
 /** @type {string} */
Hls.ErrorTypes.NETWORK_ERROR;
 /** @type {string} */
Hls.ErrorTypes.MEDIA_ERROR;
 /** @type {string} */
Hls.ErrorTypes.MUX_ERROR;
 /** @type {string} */
Hls.ErrorTypes.OTHER_ERROR;
 /** @type {!Hls.Config} */
Hls.DefaultConfig;

/**
 * checks whether your browser is supporting MediaSource Extensions
 * @return {boolean}
 */
Hls.isSupported = function() {};
 /** @type {string} */
Hls.version;
/**
 * @record
 * @struct
 */
Hls.Config = function() {};
 /** @type {boolean} */
Hls.Config.prototype.autoStartLoad;
 /** @type {number} */
Hls.Config.prototype.startPosition;
 /** @type {boolean} */
Hls.Config.prototype.capLevelToPlayerSize;
 /** @type {boolean} */
Hls.Config.prototype.debug;
 /** @type {string} */
Hls.Config.prototype.defaultAudioCodec;
 /** @type {number} */
Hls.Config.prototype.initialLiveManifestSize;
 /** @type {number} */
Hls.Config.prototype.maxBufferLength;
 /** @type {number} */
Hls.Config.prototype.maxMaxBufferLength;
 /** @type {number} */
Hls.Config.prototype.maxBufferSize;
 /** @type {number} */
Hls.Config.prototype.maxBufferHole;
 /** @type {number} */
Hls.Config.prototype.maxStarvationDelay;
 /** @type {number} */
Hls.Config.prototype.maxSeekHole;
 /** @type {number} */
Hls.Config.prototype.lowBufferWatchdogPeriod;
 /** @type {number} */
Hls.Config.prototype.highBufferWatchdogPeriod;
 /** @type {number} */
Hls.Config.prototype.nudgeOffset;
 /** @type {number} */
Hls.Config.prototype.nudgeMaxRetry;
 /** @type {number} */
Hls.Config.prototype.maxLoadingDelay;
 /** @type {number} */
Hls.Config.prototype.maxFragLookUpTolerance;
 /** @type {number} */
Hls.Config.prototype.liveSyncDurationCount;
 /** @type {number} */
Hls.Config.prototype.liveSyncDuration;
 /** @type {number} */
Hls.Config.prototype.liveMaxLatencyDurationCount;
 /** @type {number} */
Hls.Config.prototype.liveMaxLatencyDuration;
 /** @type {boolean} */
Hls.Config.prototype.enableWorker;
 /** @type {boolean} */
Hls.Config.prototype.enableSoftwareAES;
 /** @type {number} */
Hls.Config.prototype.startLevel;
 /** @type {number} */
Hls.Config.prototype.manifestLoadingTimeOut;
 /** @type {number} */
Hls.Config.prototype.manifestLoadingMaxRetry;
 /** @type {number} */
Hls.Config.prototype.manifestLoadingRetryDelay;
 /** @type {number} */
Hls.Config.prototype.manifestLoadingMaxRetryTimeout;
 /** @type {number} */
Hls.Config.prototype.levelLoadingTimeOut;
 /** @type {number} */
Hls.Config.prototype.levelLoadingMaxRetry;
 /** @type {number} */
Hls.Config.prototype.levelLoadingRetryDelay;
 /** @type {number} */
Hls.Config.prototype.levelLoadingMaxRetryTimeout;
 /** @type {number} */
Hls.Config.prototype.fragLoadingTimeOut;
 /** @type {number} */
Hls.Config.prototype.fragLoadingMaxRetry;
 /** @type {number} */
Hls.Config.prototype.fragLoadingRetryDelay;
 /** @type {number} */
Hls.Config.prototype.fragLoadingMaxRetryDelay;
 /** @type {boolean} */
Hls.Config.prototype.startFragPrefech;
 /** @type {number} */
Hls.Config.prototype.appendErrorMaxRetry;
 /** @type {?} */
Hls.Config.prototype.loader;
 /** @type {?} */
Hls.Config.prototype.fLoader;
 /** @type {?} */
Hls.Config.prototype.pLoader;
 /** @type {!Hls.AbrController} */
Hls.Config.prototype.abrController;
 /** @type {!Hls.TimelineController} */
Hls.Config.prototype.timelineController;
 /** @type {boolean} */
Hls.Config.prototype.enableCEA708Captions;
 /** @type {string} */
Hls.Config.prototype.captionsTextTrack1Label;
 /** @type {string} */
Hls.Config.prototype.captionsTextTrack1LanguagedCode;
 /** @type {string} */
Hls.Config.prototype.captionsTextTrack2Label;
 /** @type {string} */
Hls.Config.prototype.captionsTextTrack2LanguageCode;
 /** @type {boolean} */
Hls.Config.prototype.stretchShortVideoTrack;
 /** @type {boolean} */
Hls.Config.prototype.forceKeyFrameOnDiscontinuity;
 /** @type {number} */
Hls.Config.prototype.abrEwmaFastLive;
 /** @type {number} */
Hls.Config.prototype.abrEwmaSlowLive;
 /** @type {number} */
Hls.Config.prototype.abrEwmaFastVod;
 /** @type {number} */
Hls.Config.prototype.abrEwmaSlowVod;
 /** @type {number} */
Hls.Config.prototype.abrEwmaDefaultEstimate;
 /** @type {number} */
Hls.Config.prototype.abrBandWidthFactor;
 /** @type {number} */
Hls.Config.prototype.abrBandWidthUpFactor;
 /** @type {boolean} */
Hls.Config.prototype.abrMaxWithRealBitrate;
 /** @type {number} */
Hls.Config.prototype.minAutoBitrate;

/**
 * (default: undefined)
 * XMLHttpRequest customization callback for default XHR based loader.
 * Parameter should be a function with two arguments (xhr: XMLHttpRequest, url: string).
 * If xhrSetup is specified, default loader will invoke it before calling xhr.send(). This allows user to easily modify/setup XHR.
 * @param {!XMLHttpRequest} xhr
 * @param {string} url
 * @return {void}
 */
Hls.Config.prototype.xhrSetup = function(xhr, url) {};

/**
 * (default: undefined)
 * Fetch customization callback for Fetch based loader.
 * Parameter should be a function with two arguments (context and Request Init Params).
 * If fetchSetup is specified and Fetch loader is used, fetchSetup will be triggered to instantiate Request Object. This allows user to easily tweak Fetch loader.
 * @param {?} context
 * @param {?} initParams
 * @return {!Request}
 */
Hls.Config.prototype.fetchSetup = function(context, initParams) {};
/**
 * @record
 * @struct
 */
Hls.OptionalConfig = function() {};
 /** @type {boolean} */
Hls.OptionalConfig.prototype.autoStartLoad;
 /** @type {number} */
Hls.OptionalConfig.prototype.startPosition;
 /** @type {boolean} */
Hls.OptionalConfig.prototype.capLevelToPlayerSize;
 /** @type {boolean} */
Hls.OptionalConfig.prototype.debug;
 /** @type {string} */
Hls.OptionalConfig.prototype.defaultAudioCodec;
 /** @type {number} */
Hls.OptionalConfig.prototype.initialLiveManifestSize;
 /** @type {number} */
Hls.OptionalConfig.prototype.maxBufferLength;
 /** @type {number} */
Hls.OptionalConfig.prototype.maxMaxBufferLength;
 /** @type {number} */
Hls.OptionalConfig.prototype.maxBufferSize;
 /** @type {number} */
Hls.OptionalConfig.prototype.maxBufferHole;
 /** @type {number} */
Hls.OptionalConfig.prototype.maxStarvationDelay;
 /** @type {number} */
Hls.OptionalConfig.prototype.maxSeekHole;
 /** @type {number} */
Hls.OptionalConfig.prototype.lowBufferWatchdogPeriod;
 /** @type {number} */
Hls.OptionalConfig.prototype.highBufferWatchdogPeriod;
 /** @type {number} */
Hls.OptionalConfig.prototype.nudgeOffset;
 /** @type {number} */
Hls.OptionalConfig.prototype.nudgeMaxRetry;
 /** @type {number} */
Hls.OptionalConfig.prototype.maxLoadingDelay;
 /** @type {number} */
Hls.OptionalConfig.prototype.maxFragLookUpTolerance;
 /** @type {number} */
Hls.OptionalConfig.prototype.liveSyncDurationCount;
 /** @type {number} */
Hls.OptionalConfig.prototype.liveSyncDuration;
 /** @type {number} */
Hls.OptionalConfig.prototype.liveMaxLatencyDurationCount;
 /** @type {number} */
Hls.OptionalConfig.prototype.liveMaxLatencyDuration;
 /** @type {boolean} */
Hls.OptionalConfig.prototype.enableWorker;
 /** @type {boolean} */
Hls.OptionalConfig.prototype.enableSoftwareAES;
 /** @type {number} */
Hls.OptionalConfig.prototype.startLevel;
 /** @type {number} */
Hls.OptionalConfig.prototype.manifestLoadingTimeOut;
 /** @type {number} */
Hls.OptionalConfig.prototype.manifestLoadingMaxRetry;
 /** @type {number} */
Hls.OptionalConfig.prototype.manifestLoadingRetryDelay;
 /** @type {number} */
Hls.OptionalConfig.prototype.manifestLoadingMaxRetryTimeout;
 /** @type {number} */
Hls.OptionalConfig.prototype.levelLoadingTimeOut;
 /** @type {number} */
Hls.OptionalConfig.prototype.levelLoadingMaxRetry;
 /** @type {number} */
Hls.OptionalConfig.prototype.levelLoadingRetryDelay;
 /** @type {number} */
Hls.OptionalConfig.prototype.levelLoadingMaxRetryTimeout;
 /** @type {number} */
Hls.OptionalConfig.prototype.fragLoadingTimeOut;
 /** @type {number} */
Hls.OptionalConfig.prototype.fragLoadingMaxRetry;
 /** @type {number} */
Hls.OptionalConfig.prototype.fragLoadingRetryDelay;
 /** @type {number} */
Hls.OptionalConfig.prototype.fragLoadingMaxRetryDelay;
 /** @type {boolean} */
Hls.OptionalConfig.prototype.startFragPrefech;
 /** @type {number} */
Hls.OptionalConfig.prototype.appendErrorMaxRetry;
 /** @type {?} */
Hls.OptionalConfig.prototype.loader;
 /** @type {?} */
Hls.OptionalConfig.prototype.fLoader;
 /** @type {?} */
Hls.OptionalConfig.prototype.pLoader;
 /** @type {!Hls.AbrController} */
Hls.OptionalConfig.prototype.abrController;
 /** @type {!Hls.TimelineController} */
Hls.OptionalConfig.prototype.timelineController;
 /** @type {boolean} */
Hls.OptionalConfig.prototype.enableCEA708Captions;
 /** @type {string} */
Hls.OptionalConfig.prototype.captionsTextTrack1Label;
 /** @type {string} */
Hls.OptionalConfig.prototype.captionsTextTrack1LanguagedCode;
 /** @type {string} */
Hls.OptionalConfig.prototype.captionsTextTrack2Label;
 /** @type {string} */
Hls.OptionalConfig.prototype.captionsTextTrack2LanguageCode;
 /** @type {boolean} */
Hls.OptionalConfig.prototype.stretchShortVideoTrack;
 /** @type {boolean} */
Hls.OptionalConfig.prototype.forceKeyFrameOnDiscontinuity;
 /** @type {number} */
Hls.OptionalConfig.prototype.abrEwmaFastLive;
 /** @type {number} */
Hls.OptionalConfig.prototype.abrEwmaSlowLive;
 /** @type {number} */
Hls.OptionalConfig.prototype.abrEwmaFastVod;
 /** @type {number} */
Hls.OptionalConfig.prototype.abrEwmaSlowVod;
 /** @type {number} */
Hls.OptionalConfig.prototype.abrEwmaDefaultEstimate;
 /** @type {number} */
Hls.OptionalConfig.prototype.abrBandWidthFactor;
 /** @type {number} */
Hls.OptionalConfig.prototype.abrBandWidthUpFactor;
 /** @type {boolean} */
Hls.OptionalConfig.prototype.abrMaxWithRealBitrate;
 /** @type {number} */
Hls.OptionalConfig.prototype.minAutoBitrate;

/**
 * (default: undefined)
 * XMLHttpRequest customization callback for default XHR based loader.
 * Parameter should be a function with two arguments (xhr: XMLHttpRequest, url: string).
 * If xhrSetup is specified, default loader will invoke it before calling xhr.send(). This allows user to easily modify/setup XHR.
 * @param {!XMLHttpRequest} xhr
 * @param {string} url
 * @return {void}
 */
Hls.OptionalConfig.prototype.xhrSetup = function(xhr, url) {};

/**
 * (default: undefined)
 * Fetch customization callback for Fetch based loader.
 * Parameter should be a function with two arguments (context and Request Init Params).
 * If fetchSetup is specified and Fetch loader is used, fetchSetup will be triggered to instantiate Request Object. This allows user to easily tweak Fetch loader.
 * @param {?} context
 * @param {?} initParams
 * @return {!Request}
 */
Hls.OptionalConfig.prototype.fetchSetup = function(context, initParams) {};
/**
 * @record
 * @struct
 */
Hls.Level = function() {};
 /** @type {!Array<string>} */
Hls.Level.prototype.url;
 /** @type {number} */
Hls.Level.prototype.bitrate;
 /** @type {string} */
Hls.Level.prototype.name;
 /** @type {string} */
Hls.Level.prototype.codecs;
 /** @type {number} */
Hls.Level.prototype.width;
 /** @type {number} */
Hls.Level.prototype.height;
 /** @type {!Hls.LevelDetails} */
Hls.Level.prototype.details;
/**
 * @record
 * @struct
 */
Hls.LevelDetails = function() {};
 /** @type {number} */
Hls.LevelDetails.prototype.version;
 /** @type {string} */
Hls.LevelDetails.prototype.type;
 /** @type {number} */
Hls.LevelDetails.prototype.startSN;
 /** @type {number} */
Hls.LevelDetails.prototype.endSN;
 /** @type {number} */
Hls.LevelDetails.prototype.totalduration;
 /** @type {number} */
Hls.LevelDetails.prototype.targetduration;
 /** @type {number} */
Hls.LevelDetails.prototype.averagetargetduration;
 /** @type {!Array<!Hls.Fragment>} */
Hls.LevelDetails.prototype.fragments;
 /** @type {boolean} */
Hls.LevelDetails.prototype.live;
/**
 * @record
 * @struct
 */
Hls.Fragment = function() {};
 /** @type {number} */
Hls.Fragment.prototype.duration;
 /** @type {number} */
Hls.Fragment.prototype.level;
 /** @type {number} */
Hls.Fragment.prototype.sn;
 /** @type {number} */
Hls.Fragment.prototype.start;
 /** @type {string} */
Hls.Fragment.prototype.url;
 /** @type {!Date} */
Hls.Fragment.prototype.programDateTime;
 /** @type {number} */
Hls.Fragment.prototype.cc;
 /** @type {!Array<!Array<string>>} */
Hls.Fragment.prototype.tagList;
 /** @type {string} */
Hls.Fragment.prototype.title;
/**
 * @record
 * @struct
 */
Hls.Data = function() {};
 /** @type {!HTMLVideoElement} */
Hls.Data.prototype.video;
 /** @type {string} */
Hls.Data.prototype.mediaSource;
 /** @type {string} */
Hls.Data.prototype.url;
 /** @type {!Array<number>} */
Hls.Data.prototype.levels;
 /** @type {!Array<!AudioTrack>} */
Hls.Data.prototype.audioTracks;
 /** @type {!Hls.HlsStats} */
Hls.Data.prototype.stats;
 /** @type {number} */
Hls.Data.prototype.firstLevel;
 /** @type {number} */
Hls.Data.prototype.level;
 /** @type {number} */
Hls.Data.prototype.levelId;
 /** @type {string} */
Hls.Data.prototype.details;
 /** @type {number} */
Hls.Data.prototype.drift;
 /** @type {!Hls.Fragment} */
Hls.Data.prototype.frag;
 /** @type {?} */
Hls.Data.prototype.payload;
 /** @type {number} */
Hls.Data.prototype.id;
 /** @type {?} */
Hls.Data.prototype.moof;
 /** @type {?} */
Hls.Data.prototype.mdat;
 /** @type {number} */
Hls.Data.prototype.startPTS;
 /** @type {number} */
Hls.Data.prototype.endPTS;
 /** @type {number} */
Hls.Data.prototype.startDTS;
 /** @type {number} */
Hls.Data.prototype.endDTS;
 /** @type {string} */
Hls.Data.prototype.type;
 /** @type {number} */
Hls.Data.prototype.nb;
 /** @type {number} */
Hls.Data.prototype.currentDropped;
 /** @type {number} */
Hls.Data.prototype.currentDecode;
 /** @type {number} */
Hls.Data.prototype.totalDropped;
 /** @type {number} */
Hls.Data.prototype.droppedLevel;
 /** @type {boolean} */
Hls.Data.prototype.fatal;
/**
 * @record
 * @struct
 */
Hls.AbrController = function() {};
 /** @type {number} */
Hls.AbrController.prototype.autoLevelCapping;
 /** @type {!Array<string>} */
Hls.AbrController.prototype.handledEvents;
 /** @type {!Hls} */
Hls.AbrController.prototype.hls;
 /** @type {number} */
Hls.AbrController.prototype.lastLoadedFragLevel;
 /** @type {number} */
Hls.AbrController.prototype.nextAutoLevel;
 /** @type {boolean} */
Hls.AbrController.prototype.useGenericHandler;
/**
 * @record
 * @struct
 */
Hls.TimelineController = function() {};

/**
 * d
 * clean-up all used resources
 * @return {void}
 */
Hls.TimelineController.prototype.destory = function() {};
/**
 * @record
 * @struct
 */
Hls.LoaderResponse = function() {};
 /** @type {string} */
Hls.LoaderResponse.prototype.url;
 /** @type {(string|!ArrayBuffer)} */
Hls.LoaderResponse.prototype.data;
/**
 * @record
 * @struct
 */
Hls.LoaderStats = function() {};
 /** @type {number} */
Hls.LoaderStats.prototype.trequest;
 /** @type {number} */
Hls.LoaderStats.prototype.tfirst;
 /** @type {number} */
Hls.LoaderStats.prototype.tload;
 /** @type {number} */
Hls.LoaderStats.prototype.loaded;
 /** @type {number} */
Hls.LoaderStats.prototype.bw;
 /** @type {number} */
Hls.LoaderStats.prototype.total;
/**
 * @record
 * @struct
 */
Hls.LoaderError = function() {};
 /** @type {number} */
Hls.LoaderError.prototype.code;
 /** @type {string} */
Hls.LoaderError.prototype.text;
/**
 * @record
 * @struct
 */
Hls.HlsStats = function() {};
 /** @type {number} */
Hls.HlsStats.prototype.trequest;
 /** @type {number} */
Hls.HlsStats.prototype.tfirst;
 /** @type {number} */
Hls.HlsStats.prototype.tload;
 /** @type {number} */
Hls.HlsStats.prototype.mtime;
 /** @type {number} */
Hls.HlsStats.prototype.tbuffered;
 /** @type {number} */
Hls.HlsStats.prototype.length;
/**
 * @record
 * @struct
 */
Hls.LoaderContext = function() {};
 /** @type {string} */
Hls.LoaderContext.prototype.url;
 /** @type {string} */
Hls.LoaderContext.prototype.responseType;
 /** @type {number} */
Hls.LoaderContext.prototype.rangeStart;
 /** @type {number} */
Hls.LoaderContext.prototype.rangeEnd;
 /** @type {boolean} */
Hls.LoaderContext.prototype.progressData;
 /** @type {!Hls.Fragment} */
Hls.LoaderContext.prototype.frag;
 /** @type {string} */
Hls.LoaderContext.prototype.type;
 /** @type {number} */
Hls.LoaderContext.prototype.level;
/**
 * @record
 * @struct
 */
Hls.LoaderConfig = function() {};
 /** @type {number} */
Hls.LoaderConfig.prototype.maxRetry;
 /** @type {number} */
Hls.LoaderConfig.prototype.timeout;
 /** @type {number} */
Hls.LoaderConfig.prototype.retryDelay;
 /** @type {number} */
Hls.LoaderConfig.prototype.maxRetryDelay;
/**
 * @record
 * @struct
 */
Hls.LoaderCallbacks = function() {};

/**
 * @param {!Hls.LoaderResponse} response
 * @param {!Hls.LoaderStats} stats
 * @param {!Hls.LoaderContext} context
 * @return {void}
 */
Hls.LoaderCallbacks.prototype.onSuccess = function(response, stats, context) {};

/**
 * @param {!Hls.LoaderStats} stats
 * @param {!Hls.LoaderContext} context
 * @param {(string|!ArrayBuffer)} data
 * @return {void}
 */
Hls.LoaderCallbacks.prototype.onProgress = function(stats, context, data) {};

/**
 * @param {!Hls.LoaderError} error
 * @param {!Hls.LoaderContext} context
 * @return {void}
 */
Hls.LoaderCallbacks.prototype.onError = function(error, context) {};

/**
 * @param {!Hls.LoaderStats} stats
 * @param {!Hls.LoaderContext} context
 * @return {void}
 */
Hls.LoaderCallbacks.prototype.onTimeout = function(stats, context) {};
 /** @type {!Array<!Hls.Level>} */
Hls.prototype.levels;
 /** @type {number} */
Hls.prototype.currentLevel;
 /** @type {number} */
Hls.prototype.autoLevelCapping;
 /** @type {number} */
Hls.prototype.startLevel;
 /** @type {boolean} */
Hls.prototype.autoStartLoad;
 /** @type {!HTMLVideoElement} */
Hls.prototype.media;
 /** @type {!Hls.Config} */
Hls.prototype.config;
 /** @type {number} */
Hls.prototype.nextLevel;
 /** @type {number} */
Hls.prototype.loadLevel;
 /** @type {number} */
Hls.prototype.nextLoadLevel;
 /** @type {number} */
Hls.prototype.firstLevel;
 /** @type {!Array<!AudioTrack>} */
Hls.prototype.audioTracks;
 /** @type {number} */
Hls.prototype.audioTrack;
 /** @type {number} */
Hls.prototype.liveSyncPosition;

/**
 * calling this method will:
 *      bind videoElement and hls instances
 *      create MediaSource and set it as video source
 *      once MediaSource object is successfully created, MEDIA_ATTACHED event will be fired
 * @param {!HTMLVideoElement} videoElement
 * @return {void}
 */
Hls.prototype.attachMedia = function(videoElement) {};

/**
 * calling this method will:
 *      unbind VideoElement from hls instance
 *      signal the end of the stream on MediaSource
 *      reset video source ( video.src = '' )
 * @return {void}
 */
Hls.prototype.detachMedia = function() {};

/**
 * tell whether auto level selection is enabled or not
 * @param {boolean} enabled
 * @return {boolean}
 */
Hls.prototype.autoLevelEnabled = function(enabled) {};

/**
 * loads provided url as media source
 * @param {string} source
 * @return {void}
 */
Hls.prototype.loadSource = function(source) {};

/**
 * by default, hls.js will automatically start loading quality level playlists, and fragments after Hls.Events.MANIFEST_PARSED event has been triggered (and video element has been attached)
 * however if config.autoStartLoad is set to false, hls.startLoad() needs to be called to manually start playlist and fragments loading
 * 
 * start/restart playlist/fragment loading. this is only effective if MANIFEST_PARSED event has been triggered and video element has been attached to hls object
 * startPosition is the initial position in the playlist
 * ff startPosition is not set to -1, it allows to override default startPosition to the one you want
 * (it will bypass hls.config.liveSync* config params for Live for example, so that user can start playback from whatever position)
 * @param {number=} startPosition
 * @return {void}
 */
Hls.prototype.startLoad = function(startPosition) {};

/**
 * stop playlist/fragment loading. could be resumed later on by calling hls.startLoad()
 * @return {void}
 */
Hls.prototype.stopLoad = function() {};

/**
 * should be invoked to recover media error.
 * @return {void}
 */
Hls.prototype.recoverMediaError = function() {};

/**
 * if media error are still raised after calling hls.recoverMediaError(), calling this method, could be useful to workaround audio codec mismatch.
 * the workflow should be:
 *  on First Media Error : call hls.recoverMediaError()
 *  if another Media Error is raised 'quickly' after this first Media Error : first call hls.swapAudioCodec(), then call hls.recoverMediaError()
 * @return {void}
 */
Hls.prototype.swapAudioCodec = function() {};

/**
 * should be called to free used resources and destroy hls context
 * @return {void}
 */
Hls.prototype.destroy = function() {};

/**
 * hls.js event listener
 * @param {string} event
 * @param {function(string, !Hls.Data): void} callback
 * @return {void}
 */
Hls.prototype.on = function(event, callback) {};

/**
 * remove hls.js event listener
 * @param {string} event
 * @param {function(string, !Hls.Data): void} callback
 * @return {void}
 */
Hls.prototype.off = function(event, callback) {};

/* TODO: NamespaceExportDeclaration in  */

/* TODO: ExportAssignment in  */
