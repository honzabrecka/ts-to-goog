/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/db-migrate-pg/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */
/**
 * @record
 * @struct
 */
function CreateDatabaseOptions() {}
/**
 * @record
 * @struct
 */
function DropDatabaseOptions() {}
 /** @type {boolean} */
DropDatabaseOptions.prototype.ifExists;
/**
 * @record
 * @struct
 */
function CreateSequenceOptions() {}
 /** @type {boolean} */
CreateSequenceOptions.prototype.temp;
/**
 * @record
 * @struct
 */
function SwitchDatabaseOptions() {}
 /** @type {string} */
SwitchDatabaseOptions.prototype.database;
/**
 * @record
 * @struct
 */
function DropSequenceOptions() {}
 /** @type {boolean} */
DropSequenceOptions.prototype.ifExists;
 /** @type {boolean} */
DropSequenceOptions.prototype.cascade;
 /** @type {boolean} */
DropSequenceOptions.prototype.restrict;
/**
 * @record
 * @struct
 */
function ColumnConstraint() {}
 /** @type {?} */
ColumnConstraint.prototype.foreignKey;
 /** @type {string} */
ColumnConstraint.prototype.constraints;
/**
 * @record
 * @struct
 */
function ColumnConstraintOptions() {}
 /** @type {boolean} */
ColumnConstraintOptions.prototype.emitPrimaryKey;

/**
 * @constructor
 * @struct
 * @param {!Client} connection
 * @param {string} schema
 * @param {?} intern
 */
function PgDriver(connection, schema, intern) {}

/**
 * @param {string} dbName
 * @param {?} optionsOrCb
 * @param {?=} callback
 * @return {void}
 */
PgDriver.prototype.createDatabase = function(dbName, optionsOrCb, callback) {};

/**
 * @param {string} dbName
 * @param {?} optionsOrCb
 * @param {?=} callback
 * @return {void}
 */
PgDriver.prototype.dropDatabase = function(dbName, optionsOrCb, callback) {};

/**
 * @param {string} sqName
 * @param {?} optionsOrCb
 * @param {?=} callback
 * @return {void}
 */
PgDriver.prototype.createSequence = function(sqName, optionsOrCb, callback) {};

/**
 * @param {(string|?)} options
 * @param {?} callback
 * @return {void}
 */
PgDriver.prototype.switchDatabase = function(options, callback) {};

/**
 * @param {string} dbName
 * @param {?} optionsOrCb
 * @param {?=} callback
 * @return {void}
 */
PgDriver.prototype.dropSequence = function(dbName, optionsOrCb, callback) {};

/**
 * @param {?} spec
 * @param {?} options
 * @param {string} tableName
 * @param {string} columnName
 * @return {?}
 */
PgDriver.prototype.createColumnConstraint = function(spec, options, tableName, columnName) {};

/**
 * @param {string} dbName
 * @param {?=} options
 * @return {!Bluebird<?>}
 */
PgDriver.prototype.createDatabaseAsync = function(dbName, options) {};

/**
 * @param {string} dbName
 * @param {?=} options
 * @return {!Bluebird<?>}
 */
PgDriver.prototype.dropDatabaseAsync = function(dbName, options) {};

/**
 * @param {string} sqName
 * @param {?=} options
 * @return {!Bluebird<?>}
 */
PgDriver.prototype.createSequenceAsync = function(sqName, options) {};

/**
 * @param {(string|?)} options
 * @return {!Bluebird<?>}
 */
PgDriver.prototype.switchDatabaseAsync = function(options) {};

/**
 * @param {string} dbName
 * @param {?=} options
 * @return {!Bluebird<?>}
 */
PgDriver.prototype.dropSequenceAsync = function(dbName, options) {};
