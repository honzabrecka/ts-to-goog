/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/d3-shape/index.d.ts:

/* TODO: ImportDeclaration in  */
/**
 * @record
 * @struct
 */
function DefaultArcObject() {}
 /** @type {number} */
DefaultArcObject.prototype.innerRadius;
 /** @type {number} */
DefaultArcObject.prototype.outerRadius;
 /** @type {number} */
DefaultArcObject.prototype.startAngle;
 /** @type {number} */
DefaultArcObject.prototype.endAngle;
 /** @type {number} */
DefaultArcObject.prototype.padAngle;
/**
 * @record
 * @struct
 */
function Arc() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/**
 * Computes the midpoint [x, y] of the center line of the arc that would be generated by the given arguments.
 * 
 * To be consistent with the generated arc, the accessors must be deterministic, i.e., return the same value given the same arguments.
 * The midpoint is defined as (startAngle + endAngle) / 2 and (innerRadius + outerRadius) / 2.
 * 
 * Note that this is not the geometric center of the arc, which may be outside the arc;
 * this method is merely a convenience for positioning labels.
 * 
 * The method is invoked in the same "this" context as the generator was invoked in and
 * receives the same arguments that are passed into the arc generator.
 * 
 * @param {?} d The datum for which the arc is to be generated.
 * @param {...?} args
 * @return {!Array<?>}
 */
Arc.prototype.centroid = function(d, args) {};

/**
 * Returns the current inner radius accessor, which defaults to a function returning the innerRadius property
 * of the first argument passed into it.
 * Sets the inner radius to the specified number and returns this arc generator.
 * 
 * Specifying the inner radius as a function is useful for constructing a stacked polar bar chart, often in conjunction with a sqrt scale.
 * More commonly, a constant inner radius is used for a donut or pie chart. If the outer radius is smaller than the inner radius, the inner and outer radii are swapped.
 * A negative value is treated as zero.
 * 
 * Sets the inner radius to the specified function and returns this arc generator.
 * 
 * Specifying the inner radius as a function is useful for constructing a stacked polar bar chart, often in conjunction with a sqrt scale.
 * More commonly, a constant inner radius is used for a donut or pie chart. If the outer radius is smaller than the inner radius, the inner and outer radii are swapped.
 * A negative value is treated as zero.
 * 
 * @param {number|?=} radius Constant radius. / An accessor function returning a number to be used as a radius. The accessor function is invoked in the same "this" context as the generator was invoked in and
 * receives the same arguments that were passed into the arc generator.
 * @return {?}
 */
Arc.prototype.innerRadius = function(radius) {};

/**
 * Returns the current outer radius accessor, which defaults to a function returning the outerRadius property
 * of the first argument passed into it.
 * Sets the outer radius to the specified number and returns this arc generator.
 * 
 * Specifying the outer radius as a function is useful for constructing a coxcomb or polar bar chart,
 * often in conjunction with a sqrt scale. More commonly, a constant outer radius is used for a pie or donut chart.
 * If the outer radius is smaller than the inner radius, the inner and outer radii are swapped.
 * A negative value is treated as zero.
 * 
 * Sets the outer radius to the specified function and returns this arc generator.
 * 
 * Specifying the outer radius as a function is useful for constructing a coxcomb or polar bar chart,
 * often in conjunction with a sqrt scale. More commonly, a constant outer radius is used for a pie or donut chart.
 * If the outer radius is smaller than the inner radius, the inner and outer radii are swapped.
 * A negative value is treated as zero.
 * 
 * @param {number|?=} radius Constant radius. / An accessor function returning a number to be used as a radius. The accessor function is invoked in the same "this" context as the generator was invoked in and
 * receives the same arguments that were passed into the arc generator.
 * @return {?}
 */
Arc.prototype.outerRadius = function(radius) {};

/**
 * Returns the current corner radius accessor, which defaults to a function returning a constant value of zero.
 * Sets the corner radius to the specified number and returns this arc generator.
 * 
 * If the corner radius is greater than zero, the corners of the arc are rounded using circles of the given radius.
 * For a circular sector, the two outer corners are rounded; for an annular sector, all four corners are rounded.
 * 
 * The corner radius may not be larger than (outerRadius - innerRadius) / 2.
 * In addition, for arcs whose angular span is less than π, the corner radius may be reduced as two adjacent rounded corners intersect.
 * This is occurs more often with the inner corners.
 * 
 * Sets the corner radius to the specified function and returns this arc generator.
 * 
 * The corner radius may not be larger than (outerRadius - innerRadius) / 2.
 * In addition, for arcs whose angular span is less than π, the corner radius may be reduced as two adjacent rounded corners intersect.
 * This is occurs more often with the inner corners.
 * 
 * @param {number|?=} radius Constant radius. / An accessor function returning a number to be used as a radius. The accessor function is invoked in the same "this" context as the generator was invoked in and
 * receives the same arguments that were passed into the arc generator.
 * @return {?}
 */
Arc.prototype.cornerRadius = function(radius) {};

/**
 * Returns the current start angle accessor, which defaults to a function returning the startAngle property
 * of the first argument passed into it.
 * Sets the start angle to the specified number and returns this arc generator.
 * 
 * The angle is specified in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
 * If |endAngle - startAngle| ≥ τ, a complete circle or annulus is generated rather than a sector.
 * 
 * Sets the start angle to the specified function and returns this arc generator.
 * 
 * The angle is specified in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
 * If |endAngle - startAngle| ≥ τ, a complete circle or annulus is generated rather than a sector.
 * 
 * @param {number|?=} angle Constant angle in radians. / An accessor function returning a number in radians to be used as an angle. The accessor function is invoked in the same "this" context as the generator was invoked in and
 * receives the same arguments that were passed into the arc generator.
 * @return {?}
 */
Arc.prototype.startAngle = function(angle) {};

/**
 * Returns the current end angle accessor, which defaults to a function returning the endAngle property
 * of the first argument passed into it.
 * Sets the end angle to the specified number and returns this arc generator.
 * 
 * The angle is specified in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
 * If |endAngle - startAngle| ≥ τ, a complete circle or annulus is generated rather than a sector.
 * 
 * Sets the end angle to the specified function and returns this arc generator.
 * 
 * The angle is specified in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
 * If |endAngle - startAngle| ≥ τ, a complete circle or annulus is generated rather than a sector.
 * 
 * @param {number|?=} angle Constant angle in radians. / An accessor function returning a number in radians to be used as an angle. The accessor function is invoked in the same "this" context as the generator was invoked in and
 * receives the same arguments that were passed into the arc generator.
 * @return {?}
 */
Arc.prototype.endAngle = function(angle) {};

/**
 * Returns the current pad angle accessor, which defaults to a function returning the padAngle property
 * of the first argument passed into it, or false if no data are passed in or the property is not defined.
 * Sets the pad angle to the specified number and returns this arc generator.
 * 
 * The pad angle is converted to a fixed linear distance separating adjacent arcs, defined as padRadius * padAngle. This distance is subtracted equally from the start and end of the arc.
 * If the arc forms a complete circle or annulus, as when |endAngle - startAngle| ≥ τ, the pad angle is ignored. If the inner radius or angular span is small relative to the pad angle,
 * it may not be possible to maintain parallel edges between adjacent arcs. In this case, the inner edge of the arc may collapse to a point, similar to a circular sector.
 * For this reason, padding is typically only applied to annular sectors (i.e., when innerRadius is positive).
 * 
 * The recommended minimum inner radius when using padding is outerRadius * padAngle / sin(θ), where θ is the angular span of the smallest arc before padding.
 * For example, if the outer radius is 200 pixels and the pad angle is 0.02 radians, a reasonable θ is 0.04 radians, and a reasonable inner radius is 100 pixels.
 * 
 * Often, the pad angle is not set directly on the arc generator, but is instead computed by the pie generator so as to ensure that the area of padded arcs is proportional to their value;
 * see pie.padAngle. See the pie padding animation for illustration.
 * If you apply a constant pad angle to the arc generator directly, it tends to subtract disproportionately from smaller arcs, introducing distortion.
 * 
 * Sets the pad angle to the specified function and returns this arc generator.
 * 
 * The pad angle is converted to a fixed linear distance separating adjacent arcs, defined as padRadius * padAngle. This distance is subtracted equally from the start and end of the arc.
 * If the arc forms a complete circle or annulus, as when |endAngle - startAngle| ≥ τ, the pad angle is ignored. If the inner radius or angular span is small relative to the pad angle,
 * it may not be possible to maintain parallel edges between adjacent arcs. In this case, the inner edge of the arc may collapse to a point, similar to a circular sector.
 * For this reason, padding is typically only applied to annular sectors (i.e., when innerRadius is positive).
 * 
 * The recommended minimum inner radius when using padding is outerRadius * padAngle / sin(θ), where θ is the angular span of the smallest arc before padding.
 * For example, if the outer radius is 200 pixels and the pad angle is 0.02 radians, a reasonable θ is 0.04 radians, and a reasonable inner radius is 100 pixels.
 * 
 * Often, the pad angle is not set directly on the arc generator, but is instead computed by the pie generator so as to ensure that the area of padded arcs is proportional to their value;
 * see pie.padAngle. See the pie padding animation for illustration.
 * If you apply a constant pad angle to the arc generator directly, it tends to subtract disproportionately from smaller arcs, introducing distortion.
 * 
 * @param {number|?=} angle Constant angle in radians. / An accessor function returning a number in radians to be used as an angle. The accessor function is invoked in the same "this" context as the generator was invoked in and
 * receives the same arguments that were passed into the arc generator.
 * @return {?}
 */
Arc.prototype.padAngle = function(angle) {};

/**
 * Returns the current pad radius accessor, which defaults to null, indicating that the pad radius should be automatically computed as sqrt(innerRadius * innerRadius + outerRadius * outerRadius).
 * Sets the pad radius to null indicating that the pad radius should be automatically computed as sqrt(innerRadius * innerRadius + outerRadius * outerRadius), and returns this arc generator.
 * 
 * The pad radius determines the fixed linear distance separating adjacent arcs, defined as padRadius * padAngle.
 * 
 * Sets the pad radius to the specified number, and returns this arc generator.
 * 
 * The pad radius determines the fixed linear distance separating adjacent arcs, defined as padRadius * padAngle.
 * 
 * @param {null|number|?=} radius null to set automatic pad radius calculation. / A constant radius.
 * @return {?}
 */
Arc.prototype.padRadius = function(radius) {};

/**
 * Returns the current rendering context, which defaults to null.
 * Sets the rendering context and returns this arc generator.
 * 
 * If the context is not null, then the generated arc is rendered to this context as a sequence of path method calls.
 * 
 * Sets the rendering context to null and returns this arc generator.
 * 
 * A path data string representing the generated arc will be returned when the generator is invoked with data.
 * 
 * @param {!CanvasRenderingContext2D|null=} context The rendering context. / null, to remove rendering context.
 * @return {!CanvasRenderingContext2D|?}
 */
Arc.prototype.context = function(context) {};

/**
 * Constructs a new arc generator with the default settings.
 * 
 * Ensure that the accessors used with the arc generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 * Constructs a new arc generator with the default settings.
 * 
 * Ensure that the accessors used with the arc generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 * 
 * The generic corresponds to the datum type representing a arc.
 * Constructs a new arc generator with the default settings.
 * 
 * Ensure that the accessors used with the arc generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 * 
 * The first generic corresponds to the type of the "this" context within which the arc generator and its accessor functions will be invoked.
 * 
 * The second generic corresponds to the datum type representing a arc.
 * @template Datum, This
 * @return {?}
 */
function arc() {}
/**
 * @record
 * @struct
 */
function PieArcDatum() {}
 /** @type {?} */
PieArcDatum.prototype.data;
 /** @type {number} */
PieArcDatum.prototype.value;
 /** @type {number} */
PieArcDatum.prototype.index;
 /** @type {number} */
PieArcDatum.prototype.startAngle;
 /** @type {number} */
PieArcDatum.prototype.endAngle;
 /** @type {number} */
PieArcDatum.prototype.padAngle;
/**
 * @record
 * @struct
 */
function Pie() {}

/* TODO: CallSignature:  */

/**
 * Returns the current value accessor, which defaults to a function returning the first argument passed into it.
 * The default value accessor assumes that the input data are numbers, or that they are coercible to numbers using valueOf.
 * 
 * Sets the value accessor to use the specified constant number and returns this pie generator.
 * 
 * Sets the value accessor to use the specified function and returns this pie generator.
 * 
 * When a pie is generated, the value accessor will be invoked for each element in the input data array.
 * The default value accessor assumes that the input data are numbers, or that they are coercible to numbers using valueOf.
 * If your data are not simply numbers, then you should specify an accessor that returns the corresponding numeric value for a given datum.
 * 
 * 
 * @param {number|?=} value Constant value to be used. / A value accessor function, which is invoked for each element in the input data array, being passed the element d, the index i, and the array data as three arguments.
 * It returns a numeric value.
 * @return {?}
 */
Pie.prototype.value = function(value) {};

/**
 * Returns the current data comparator, which defaults to null.
 * Sets the data comparator to the specified function and returns this pie generator.
 * 
 * If both the data comparator and the value comparator are null, then arcs are positioned in the original input order.
 * Otherwise, the data is sorted according to the data comparator, and the resulting order is used. Setting the data comparator implicitly sets the value comparator to null.
 * 
 * Sorting does not affect the order of the generated arc array which is always in the same order as the input data array; it merely affects the computed angles of each arc.
 * The first arc starts at the start angle and the last arc ends at the end angle.
 * 
 * Sets the data comparator to null and returns this pie generator.
 * 
 * If both the data comparator and the value comparator are null, then arcs are positioned in the original input order.
 * 
 * @param {?|null=} comparator A compare function takes two arguments a and b, each elements from the input data array.
 * If the arc for a should be before the arc for b, then the comparator must return a number less than zero;
 * if the arc for a should be after the arc for b, then the comparator must return a number greater than zero;
 * returning zero means that the relative order of a and b is unspecified. / null, to set the pie generator to use the original input order or use the sortValues comparator, if any.
 * @return {?}
 */
Pie.prototype.sort = function(comparator) {};

/**
 * Returns the current value comparator, which defaults to descending value.
 * Sets the value comparator to the specified function and returns this pie generator.
 * 
 * If both the data comparator and the value comparator are null, then arcs are positioned in the original input order.
 * Otherwise, the data is sorted according to the data comparator, and the resulting order is used.
 * Setting the value comparator implicitly sets the data comparator to null.
 * 
 * Sorting does not affect the order of the generated arc array which is always in the same order as the input data array;
 * it merely affects the computed angles of each arc. The first arc starts at the start angle and the last arc ends at the end angle.
 * 
 * Sets the value comparator to null and returns this pie generator.
 * 
 * If both the data comparator and the value comparator are null, then arcs are positioned in the original input order.
 * 
 * @param {?|null=} comparator The value comparator takes two arguments a and b which are values derived from the input data array using the value accessor, not the data elements.
 * If the arc for a should be before the arc for b, then the comparator must return a number less than zero;
 * if the arc for a should be after the arc for b, then the comparator must return a number greater than zero; returning zero means that the relative order of a and b is unspecified.
 *  / null, to set the pie generator to use the original input order or use the data comparator, if any.
 * @return {?}
 */
Pie.prototype.sortValues = function(comparator) {};

/**
 * Returns the current start angle accessor, which defaults to a function returning a constant zero.
 * Sets the overall start angle of the pie to the specified number and returns this pie generator.
 * 
 * The default start angle is zero.
 * 
 * The start angle here means the overall start angle of the pie, i.e., the start angle of the first arc.
 * The start angle accessor is invoked once, being passed the same arguments and this context as the pie generator.
 * The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator,
 * you should specify an angle in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
 * 
 * Sets the overall start angle of the pie to the specified function and returns this pie generator.
 * 
 * The default start angle is zero.
 * 
 * The start angle here means the overall start angle of the pie, i.e., the start angle of the first arc.
 * The start angle accessor is invoked once, being passed the same arguments and this context as the pie generator.
 * The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator,
 * you should specify an angle in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
 * 
 * @param {number|?=} angle A constant angle. / An angle accessor function, which is invoked once, being passed the same arguments and this context as the pie generator.
 * @return {?}
 */
Pie.prototype.startAngle = function(angle) {};

/**
 * Returns the current end angle accessor, which defaults to a function returning a constant 2*pi.
 * Sets the overall end angle of the pie to the specified number and returns this pie generator.
 * 
 * The default end angle is 2*pi.
 * 
 * The end angle here means the overall end angle of the pie, i.e., the end angle of the last arc.
 * The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator,
 * you should specify an angle in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
 * 
 * The value of the end angle is constrained to startAngle ± τ, such that |endAngle - startAngle| ≤ τ.
 * 
 * Sets the overall end angle of the pie to the specified function and returns this pie generator.
 * 
 * The default end angle is 2*pi.
 * 
 * The end angle here means the overall end angle of the pie, i.e., the end angle of the last arc.
 * The end angle accessor is invoked once, being passed the same arguments and this context as the pie generator.
 * The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator,
 * you should specify an angle in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
 * 
 * The value of the end angle is constrained to startAngle ± τ, such that |endAngle - startAngle| ≤ τ.
 * 
 * @param {number|?=} angle A constant angle. / An angle accessor function, which is invoked once, being passed the same arguments and this context as the pie generator.
 * @return {?}
 */
Pie.prototype.endAngle = function(angle) {};

/**
 * Returns the current pad angle accessor, which defaults to a function returning a constant zero.
 * Sets the pad angle to the specified number and returns this pie generator.
 * 
 * The pad angle here means the angular separation between each adjacent arc.
 * The total amount of padding reserved is the specified angle times the number of elements in the input data array, and at most |endAngle - startAngle|;
 * the remaining space is then divided proportionally by value such that the relative area of each arc is preserved.
 * The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator, you should specify an angle in radians.
 * 
 * Sets the pad angle to the specified function and returns this pie generator.
 * 
 * The pad angle here means the angular separation between each adjacent arc.
 * The total amount of padding reserved is the specified angle times the number of elements in the input data array, and at most |endAngle - startAngle|;
 * the remaining space is then divided proportionally by value such that the relative area of each arc is preserved.
 * The pad angle accessor is invoked once, being passed the same arguments and this context as the pie generator.
 * The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator, you should specify an angle in radians.
 * 
 * @param {number|?=} angle A constant angle. / An angle accessor function, which is invoked once, being passed the same arguments and this context as the pie generator.
 * @return {?}
 */
Pie.prototype.padAngle = function(angle) {};

/**
 * Constructs a new pie generator with the default settings.
 * 
 * Ensure that the accessors used with the pie generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 * Constructs a new pie generator with the default settings.
 * 
 * Ensure that the accessors used with the pie generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 * 
 * The generic refers to the data type of an element in the input array passed into the Pie generator.
 * Constructs a new pie generator with the default settings.
 * 
 * Ensure that the accessors used with the pie generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 * 
 * The first generic corresponds to the type of the "this" context within which the pie generator and its accessor functions will be invoked.
 * 
 * The second generic refers to the data type of an element in the input array passed into the Pie generator.
 * @template Datum, This
 * @return {?}
 */
function pie() {}
/**
 * @record
 * @struct
 */
function Line() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/**
 * Returns the current x-coordinate accessor function, which defaults to a function returning first element of a two-element array of numbers.
 * Sets the x accessor to the specified number and returns this line generator.
 * 
 * Sets the x accessor to the specified function and returns this line generator.
 * 
 * When a line is generated, the x accessor will be invoked for each defined element in the input data array.
 * 
 * The default x accessor assumes that the input data are two-element arrays of numbers. If your data are in a different format, or if you wish to transform the data before rendering,
 * then you should specify a custom accessor.
 * 
 * @param {number|?=} x A constant x-coordinate value. / A coordinate accessor function which returns the x-coordinate value. The x accessor will be invoked for each defined element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * @return {?}
 */
Line.prototype.x = function(x) {};

/**
 * Returns the current y-coordinate accessor function, which defaults to a function returning second element of a two-element array of numbers.
 * Sets the y accessor to the specified number and returns this line generator.
 * 
 * Sets the y accessor to the specified function and returns this line generator.
 * 
 * When a line is generated, the y accessor will be invoked for each defined element in the input data array.
 * 
 * The default y accessor assumes that the input data are two-element arrays of numbers. If your data are in a different format, or if you wish to transform the data before rendering,
 * then you should specify a custom accessor.
 * 
 * @param {number|?=} y A constant y-coordinate value. / A coordinate accessor function which returns the y-coordinate value. The y accessor will be invoked for each defined element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * @return {?}
 */
Line.prototype.y = function(y) {};

/**
 * Returns the current defined accessor, which defaults to a function returning a constant boolean value of true.
 * Sets the defined accessor to the specified boolean and returns this line generator.
 * 
 * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.
 * 
 * When a line is generated, the defined accessor will be invoked for each element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),
 * the x and y accessors will subsequently be evaluated and the point will be added to the current line segment.
 * Otherwise, the element will be skipped, the current line segment will be ended, and a new line segment will be generated for the next defined point.
 * As a result, the generated line may have several discrete segments.
 * 
 * Note that if a line segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.
 * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.
 * 
 * Sets the defined accessor to the specified function and returns this line generator.
 * 
 * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.
 * 
 * When a line is generated, the defined accessor will be invoked for each element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),
 * the x and y accessors will subsequently be evaluated and the point will be added to the current line segment.
 * Otherwise, the element will be skipped, the current line segment will be ended, and a new line segment will be generated for the next defined point.
 * As a result, the generated line may have several discrete segments.
 * 
 * Note that if a line segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.
 * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.
 * 
 * @param {boolean|?=} defined A boolean constant / An accessor function which returns a boolean value. The accessor will be invoked for each defined element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * @return {?}
 */
Line.prototype.defined = function(defined) {};

/**
 * Returns the current curve factory, which defaults to curveLinear.
 * Returns the current curve factory, which defaults to curveLinear.
 * 
 * The generic allows to cast the curve factory to a specifc type, if known.
 * Sets the curve factory and returns this line generator.
 * 
 * @template C
 * @param {?=} curve A valid curve factory.
 * @return {?}
 */
Line.prototype.curve = function(curve) {};

/**
 * Returns the current rendering context, which defaults to null.
 * Sets the rendering context and returns this line generator.
 * 
 * If the context is not null, then the generated line is rendered to this context as a sequence of path method calls.
 * 
 * Sets the rendering context to null and returns this line generator.
 * 
 * A path data string representing the generated line will be returned when the generator is invoked with data.
 * 
 * @param {!CanvasRenderingContext2D|null=} context The rendering context. / null, to remove rendering context.
 * @return {!CanvasRenderingContext2D|?}
 */
Line.prototype.context = function(context) {};

/**
 * Constructs a new line generator with the default settings.
 * 
 * Ensure that the accessors used with the line generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 * Constructs a new line generator with the default settings.
 * 
 * Ensure that the accessors used with the line generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 * 
 * The generic refers to the data type of an element in the input array passed into the line generator.
 * @template Datum
 * @return {?}
 */
function line() {}
/**
 * @record
 * @struct
 */
function LineRadial() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/**
 * Returns the current angle accessor function, which defaults to a function returning first element of a two-element array of numbers.
 * Sets the angle accessor to the specified number and returns this radial line generator.
 * 
 * Sets the angle accessor to the specified function and returns this radial line generator.
 * 
 * When a radial line is generated, the angle accessor will be invoked for each defined element in the input data array.
 * 
 * The default angle accessor assumes that the input data are two-element arrays of numbers. If your data are in a different format, or if you wish to transform the data before rendering,
 * then you should specify a custom accessor.
 * 
 * @param {number|?=} angle A constant angle value in radians, with 0 at -y (12 o’clock). / An angle accessor function which returns the angle value in radians, with 0 at -y (12 o’clock). The angle accessor will be invoked for each defined element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * @return {?}
 */
LineRadial.prototype.angle = function(angle) {};

/**
 * Returns the current radius accessor function, which defaults to a function returning second element of a two-element array of numbers.
 * Sets the radius accessor to the specified number and returns this radial line generator.
 * 
 * Sets the radius accessor to the specified function and returns this radial line generator.
 * 
 * When a radial line is generated, the radius accessor will be invoked for each defined element in the input data array.
 * 
 * The default radius accessor assumes that the input data are two-element arrays of numbers. If your data are in a different format, or if you wish to transform the data before rendering,
 * then you should specify a custom accessor.
 * 
 * @param {number|?=} radius A constant radius value. / A radius accessor function which returns the radius value. The radius accessor will be invoked for each defined element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * @return {?}
 */
LineRadial.prototype.radius = function(radius) {};

/**
 * Returns the current defined accessor, which defaults to a function returning a constant boolean value of true.
 * Sets the defined accessor to the specified boolean and returns this radial line generator.
 * 
 * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.
 * 
 * When a radial line is generated, the defined accessor will be invoked for each element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),
 * the angle and radius accessors will subsequently be evaluated and the point will be added to the current radial line segment.
 * Otherwise, the element will be skipped, the current radial line segment will be ended, and a new radial line segment will be generated for the next defined point.
 * As a result, the generated radial line may have several discrete segments.
 * 
 * Note that if a radial line segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.
 * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.
 * 
 * Sets the defined accessor to the specified function and returns this radial line generator.
 * 
 * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.
 * 
 * When a radial line is generated, the defined accessor will be invoked for each element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),
 * the angle and radius accessors will subsequently be evaluated and the point will be added to the current radial line segment.
 * Otherwise, the element will be skipped, the current radial line segment will be ended, and a new radial line segment will be generated for the next defined point.
 * As a result, the generated radial line may have several discrete segments.
 * 
 * Note that if a radial line segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.
 * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.
 * 
 * @param {boolean|?=} defined A boolean constant / An accessor function which returns a boolean value. The accessor will be invoked for each defined element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * @return {?}
 */
LineRadial.prototype.defined = function(defined) {};

/**
 * Returns the current curve factory, which defaults to curveLinear.
 * Returns the current curve factory, which defaults to curveLinear.
 * 
 * The generic allows to cast the curve factory to a specifc type, if known.
 * Sets the curve factory and returns this radial line generator.
 * 
 * Note that curveMonotoneX or curveMonotoneY are not recommended for radial lines because they assume that the data is monotonic in x or y,
 * which is typically untrue of radial lines.
 * 
 * @template C
 * @param {?=} curve A valid curve factory.
 * @return {?}
 */
LineRadial.prototype.curve = function(curve) {};

/**
 * Returns the current rendering context, which defaults to null.
 * Sets the rendering context and returns this radial line generator.
 * 
 * If the context is not null, then the generated radial line is rendered to this context as a sequence of path method calls.
 * 
 * Sets the rendering context to null and returns this radial line generator.
 * 
 * A path data string representing the generated radial line will be returned when the generator is invoked with data.
 * 
 * @param {!CanvasRenderingContext2D|null=} context The rendering context. / null, to remove rendering context.
 * @return {!CanvasRenderingContext2D|?}
 */
LineRadial.prototype.context = function(context) {};

/**
 * Constructs a new radial line generator with the default settings.
 * 
 * Ensure that the accessors used with the radial line generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 * Constructs a new radial line generator with the default settings.
 * 
 * Ensure that the accessors used with the radial line generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 * 
 * The generic refers to the data type of an element in the input array passed into the radial line generator.
 * @template Datum
 * @return {?}
 */
function lineRadial() {}

/** @typedef {?} */
var RadialLine;

/**
 * DEPRECATED: Use lineRadial()
 * DEPRECATED: Use lineRadial<Datum>()
 * @template Datum
 * @return {?}
 */
function radialLine() {}
/**
 * @record
 * @struct
 */
function Area() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/**
 * Returns the current x0 accessor. The default x0 accessor is a function returning the first element of a
 * two-element array of numbers.
 * Sets x0 to a constant number x and x1 to null and returns this area generator.
 * 
 * Setting x1 to null indicates that the previously-computed x0 value should be reused for the x1 value.
 * 
 * Sets x0 to the specified function x and x1 to null and returns this area generator.
 * 
 * The default x0 accessor assumes that the input data are two-element arrays of numbers and returns the first element.
 * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
 * 
 * @param {number|?=} x A constant value to be used for x0. / An accessor function returning a value to be used for x0. The accessor will be invoked for each defined element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * @return {?}
 */
Area.prototype.x = function(x) {};

/**
 * Returns the current x0 accessor. The default x0 accessor is a function returning the first element of a
 * two-element array of numbers.
 * Sets x0 to a constant number and returns this area generator.
 * 
 * Sets x0 to the specified function and returns this area generator.
 * 
 * The default x0 accessor assumes that the input data are two-element arrays of numbers and returns the first element.
 * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
 * 
 * @param {number|?=} x A constant value. / An accessor function returning a value to be used for x0. The accessor will be invoked for each defined element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * @return {?}
 */
Area.prototype.x0 = function(x) {};

/**
 * Returns the current x1 accessor, which defaults to null, indicating that the previously-computed x0 value should be reused for the x1 value.
 * Sets x1 to null and returns this area generator.
 * 
 * Setting x1 to null indicates that the previously-computed x0 value should be reused for the x1 value.
 * 
 * Sets x1 to a constant number and returns this area generator.
 * 
 * Sets x1 to the specified function and returns this area generator.
 * 
 * The default x1 accessor is null, indicating that the previously-computed x0 value should be reused for the x1 value.
 * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
 * 
 * @param {null|number|?=} x null. / A constant value. / An accessor function returning a value to be used for x1. The accessor will be invoked for each defined element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * @return {?}
 */
Area.prototype.x1 = function(x) {};

/**
 * Returns the current y0 accessor. The default y0 accessor is a function returning a constant value of zero.
 * Sets y0 to a constant number y and y1 to null and returns this area generator.
 * 
 * Setting y1 to null indicates that the previously-computed y0 value should be reused for the y1 value.
 * 
 * Sets y0 to the accessor function y and y1 to null and returns this area generator.
 * 
 * The default y0 accessor returns a constant value of zero.
 * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
 * 
 * @param {number|?=} y A constant value to be used for y0. / An accessor function returning a value to be used for y0. The accessor will be invoked for each defined element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * @return {?}
 */
Area.prototype.y = function(y) {};

/**
 * Returns the current y0 accessor. The default y0 accessor is a function a constant value of zero.
 * Sets y0 to a constant number and returns this area generator.
 * 
 * Sets y0 to the specified function and returns this area generator.
 * 
 * The default y0 accessor is a function which returns a constant value of zero.
 * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
 * 
 * @param {number|?=} y A constant value. / An accessor function returning a value to be used for y0. The accessor will be invoked for each defined element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * @return {?}
 */
Area.prototype.y0 = function(y) {};

/**
 * Returns the current y1 accessor or null. The default y1 accessor is a function returning the second element of a
 * two-element array of numbers.
 * 
 * If the y1 accessor is null, the previously-computed y0 value is reused for the y1 value.
 * 
 * Sets y1 to null and returns this area generator.
 * 
 * Setting y1 to null indicates that the previously-computed y0 value should be reused for the y1 value.
 * 
 * Sets y1 to a constant number and returns this area generator.
 * 
 * Sets y1 to the specified function and returns this area generator.
 * 
 * The default y1 accessor assumes that the input data are two-element arrays of numbers and returns the second element.
 * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
 * 
 * @param {null|number|?=} y null. / A constant value. / An accessor function returning a value to be used for y1. The accessor will be invoked for each defined element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * @return {?}
 */
Area.prototype.y1 = function(y) {};

/**
 * Returns the current defined accessor, which defaults to a function returning a constant boolean value of true.
 * Sets the defined accessor to the specified boolean and returns this area generator.
 * 
 * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.
 * When an area is generated, the defined accessor will be invoked for each element in the input data array, being passed the element d, the index i, and the array data as three arguments.
 * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),
 * the x0, x1, y0 and y1 accessors will subsequently be evaluated and the point will be added to the current area segment.
 * Otherwise, the element will be skipped, the current area segment will be ended, and a new area segment will be generated for the next defined point.
 * As a result, the generated area may have several discrete segments.
 * 
 * Note that if an area segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.
 * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points
 * 
 * Sets the defined accessor to the specified function and returns this area generator.
 * 
 * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.
 * 
 * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.
 * When an area is generated, the defined accessor will be invoked for each element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),
 * the x0, x1, y0 and y1 accessors will subsequently be evaluated and the point will be added to the current area segment.
 * Otherwise, the element will be skipped, the current area segment will be ended, and a new area segment will be generated for the next defined point.
 * As a result, the generated area may have several discrete segments.
 * 
 * Note that if an area segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.
 * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points
 * 
 * @param {boolean|?=} defined A boolean constant / An accessor function which returns a boolean value. The accessor will be invoked for each defined element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * @return {?}
 */
Area.prototype.defined = function(defined) {};

/**
 * Returns the current curve factory, which defaults to curveLinear.
 * Returns the current curve factory, which defaults to curveLinear.
 * 
 * The generic allows to cast the curve factory to a specifc type, if known.
 * Sets the curve factory and returns this area generator.
 * 
 * 
 * @template C
 * @param {?=} curve A valid curve factory.
 * @return {?}
 */
Area.prototype.curve = function(curve) {};

/**
 * Returns the current rendering context, which defaults to null.
 * Sets the rendering context and returns this area generator.
 * 
 * If the context is not null, then the generated area is rendered to this context as a sequence of path method calls.
 * 
 * Sets the rendering context to null and returns this area generator.
 * 
 * A path data string representing the generated area will be returned when the generator is invoked with data.
 * 
 * @param {!CanvasRenderingContext2D|null=} context The rendering context. / null, to remove rendering context.
 * @return {!CanvasRenderingContext2D|?}
 */
Area.prototype.context = function(context) {};

/**
 * Returns a new line generator that has this area generator’s current defined accessor, curve and context.
 * The line’s x-accessor is this area’s x0-accessor, and the line’s y-accessor is this area’s y0-accessor.
 * @return {?}
 */
Area.prototype.lineX0 = function() {};

/**
 * Returns a new line generator that has this area generator’s current defined accessor, curve and context.
 * The line’s x-accessor is this area’s x0-accessor, and the line’s y-accessor is this area’s y0-accessor.
 * @return {?}
 */
Area.prototype.lineY0 = function() {};

/**
 * Returns a new line generator that has this area generator’s current defined accessor, curve and context.
 * The line’s x-accessor is this area’s x1-accessor, and the line’s y-accessor is this area’s y0-accessor.
 * @return {?}
 */
Area.prototype.lineX1 = function() {};

/**
 * Returns a new line generator that has this area generator’s current defined accessor, curve and context.
 * The line’s x-accessor is this area’s x0-accessor, and the line’s y-accessor is this area’s y1-accessor.
 * @return {?}
 */
Area.prototype.lineY1 = function() {};

/**
 * Constructs a new area generator with the default settings.
 * 
 * Ensure that the accessors used with the area generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 * Constructs a new area generator with the default settings.
 * 
 * Ensure that the accessors used with the area generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 * 
 * The generic refers to the data type of an element in the input array passed into the area generator.
 * @template Datum
 * @return {?}
 */
function area() {}
/**
 * @record
 * @struct
 */
function AreaRadial() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/**
 * Returns the current startAngle accessor. The default startAngle accessor is a function returning the first element of a
 * two-element array of numbers.
 * Sets startAngle to a constant number angle and endAngle to null and returns this radial area generator.
 * 
 * Setting endAngle to null indicates that the previously-computed startAngle value should be reused for the endAngle value.
 * 
 * Sets startAngle to the specified function angle and endAngle to null and returns this radial area generator.
 * 
 * The default startAngle accessor assumes that the input data are two-element arrays of numbers and returns the first element.
 * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
 * 
 * @param {number|?=} angle A constant value in radians with 0 at -y (12 o’clock). / An accessor function returning a value to be used for startAngle in radians with 0 at -y (12 o’clock).
 * The accessor will be invoked for each defined element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * @return {?}
 */
AreaRadial.prototype.angle = function(angle) {};

/**
 * Returns the current startAngle accessor. The default startAngle accessor is a function returning the first element of a
 * two-element array of numbers.
 * Sets startAngle to a constant number and returns this radial area generator.
 * 
 * Sets startAngle to the specified function and returns this radial area generator.
 * 
 * The default startAngle accessor assumes that the input data are two-element arrays of numbers and returns the first element.
 * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
 * 
 * @param {number|?=} angle A constant value in radians with 0 at -y (12 o’clock). / An accessor function returning a value to be used for startAngle in radians with 0 at -y (12 o’clock).
 * The accessor will be invoked for each defined element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * @return {?}
 */
AreaRadial.prototype.startAngle = function(angle) {};

/**
 * Returns the current endAngle accessor, which defaults to null, indicating that the previously-computed startAngle value should be reused for the endAngle value.
 * Sets endAngle to null and returns this radial area generator.
 * 
 * Setting endAngle to null indicates that the previously-computed startAngle value should be reused for the endAngle value.
 * 
 * Sets endAngle to a constant number and returns this radial area generator.
 * 
 * Sets endAngle to the specified function and returns this radial area generator.
 * 
 * The default endAngle accessor is null, indicating that the previously-computed startAngle value should be reused for the endAngle value.
 * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
 * 
 * @param {null|number|?=} angle null. / A constant value in radians with 0 at -y (12 o’clock). / An accessor function returning a value to be used for endAngle in radians with 0 at -y (12 o’clock).
 * The accessor will be invoked for each defined element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * @return {?}
 */
AreaRadial.prototype.endAngle = function(angle) {};

/**
 * Returns the current innerRadius accessor. The default innerRadius accessor is a function returning a constant value of zero.
 * Sets innerRadius to a constant number radius and outerRadius to null and returns this radial area generator.
 * 
 * Setting outerRadius to null indicates that the previously-computed innerRadius value should be reused for the outerRadius value.
 * 
 * Sets innerRadius to the accessor function radius and outerRadius to null and returns this radial area generator.
 * 
 * The default innerRadius accessor returns a constant value of zero.
 * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
 * 
 * @param {number|?=} radius A constant value to be used for innerRadius. / An accessor function returning a value to be used for innerRadius. The accessor will be invoked for each defined element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * @return {?}
 */
AreaRadial.prototype.radius = function(radius) {};

/**
 * Returns the current innerRadius accessor. The default innerRadius accessor is a function a constant value of zero.
 * Sets innerRadius to a constant number and returns this radial area generator.
 * 
 * Sets innerRadius to the specified function and returns this radial area generator.
 * 
 * The default innerRadius accessor is a function which returns a constant value of zero.
 * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
 * 
 * @param {number|?=} radius A constant value. / An accessor function returning a value to be used for innerRadius. The accessor will be invoked for each defined element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * @return {?}
 */
AreaRadial.prototype.innerRadius = function(radius) {};

/**
 * Returns the current outerRadius accessor or null. The default outerRadius accessor is a function returning the second element of a
 * two-element array of numbers.
 * 
 * If the outerRadius accessor is null, the previously-computed innerRadius value is reused for the outerRadius value.
 * 
 * Sets outerRadius to null and returns this radial area generator.
 * 
 * Setting outerRadius to null indicates that the previously-computed innerRadius value should be reused for the outerRadius value.
 * 
 * Sets outerRadius to a constant number and returns this radial area generator.
 * 
 * Sets outerRadius to the specified function and returns this radial area generator.
 * 
 * The default outerRadius accessor assumes that the input data are two-element arrays of numbers and returns the second element.
 * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
 * 
 * @param {null|number|?=} radius null. / A constant value. / An accessor function returning a value to be used for outerRadius. The accessor will be invoked for each defined element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * @return {?}
 */
AreaRadial.prototype.outerRadius = function(radius) {};

/**
 * Returns the current defined accessor, which defaults to a function returning a constant boolean value of true.
 * Sets the defined accessor to the specified boolean and returns this radial area generator.
 * 
 * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.
 * 
 * When a radial area is generated, the defined accessor will be invoked for each element in the input data array, being passed the element d, the index i, and the array data as three arguments.
 * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),
 * the startAngle, endAngle, innerRadius and outerRadius accessors will subsequently be evaluated and the point will be added to the current area segment.
 * 
 * Otherwise, the element will be skipped, the current area segment will be ended, and a new area segment will be generated for the next defined point.
 * As a result, the generated area may have several discrete segments.
 * 
 * Note that if an area segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.
 * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points
 * 
 * Sets the defined accessor to the specified function and returns this radial area generator.
 * 
 * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.
 * 
 * When a radial area is generated, the defined accessor will be invoked for each element in the input data array, being passed the element d, the index i, and the array data as three arguments.
 * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),
 * the startAngle, endAngle, innerRadius and outerRadius accessors will subsequently be evaluated and the point will be added to the current area segment.
 * 
 * Otherwise, the element will be skipped, the current area segment will be ended, and a new area segment will be generated for the next defined point.
 * As a result, the generated area may have several discrete segments.
 * 
 * Note that if an area segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.
 * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points
 * 
 * @param {boolean|?=} defined A boolean constant / An accessor function which returns a boolean value. The accessor will be invoked for each defined element in the input data array,
 * being passed the element d, the index i, and the array data as three arguments.
 * @return {?}
 */
AreaRadial.prototype.defined = function(defined) {};

/**
 * Returns the current curve factory, which defaults to curveLinear.
 * Returns the current curve factory, which defaults to curveLinear.
 * 
 * The generic allows to cast the curve factory to a specifc type, if known.
 * Sets the curve factory and returns this radial area generator.
 * 
 * Note that curveMonotoneX or curveMonotoneY are not recommended for radial areas because they assume that the data is monotonic in x or y, which is typically untrue of radial areas.
 * 
 * @template C
 * @param {?=} curve A valid curve factory.
 * @return {?}
 */
AreaRadial.prototype.curve = function(curve) {};

/**
 * Returns the current rendering context, which defaults to null.
 * Sets the rendering context and returns this radial area generator.
 * 
 * If the context is not null, then the generated radial area is rendered to this context as a sequence of path method calls.
 * 
 * Sets the rendering context to null and returns this radial area generator.
 * 
 * A path data string representing the generated radial area will be returned when the generator is invoked with data.
 * 
 * @param {!CanvasRenderingContext2D|null=} context The rendering context. / null, to remove rendering context.
 * @return {!CanvasRenderingContext2D|?}
 */
AreaRadial.prototype.context = function(context) {};

/**
 * Returns a new radial line generator that has this radial area generator’s current defined accessor, curve and context.
 * The line’s angle accessor is this area’s start angle accessor, and the line’s radius accessor is this area’s inner radius accessor.
 * @return {?}
 */
AreaRadial.prototype.lineStartAngle = function() {};

/**
 * Returns a new radial line generator that has this radial area generator’s current defined accessor, curve and context.
 * The line’s angle accessor is this area’s start angle accessor, and the line’s radius accessor is this area’s inner radius accessor.
 * @return {?}
 */
AreaRadial.prototype.lineInnerRadius = function() {};

/**
 * Returns a new radial line generator that has this radial area generator’s current defined accessor, curve and context.
 * The line’s angle accessor is this area’s end angle accessor, and the line’s radius accessor is this area’s inner radius accessor.
 * @return {?}
 */
AreaRadial.prototype.lineEndAngle = function() {};

/**
 * Returns a new radial line generator that has this radial area generator’s current defined accessor, curve and context.
 * The line’s angle accessor is this area’s start angle accessor, and the line’s radius accessor is this area’s outer radius accessor.
 * @return {?}
 */
AreaRadial.prototype.lineOuterRadius = function() {};

/**
 * Constructs a new radial area generator with the default settings.
 * 
 * Ensure that the accessors used with the area generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 * Constructs a new radial area generator with the default settings.
 * 
 * Ensure that the accessors used with the area generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 * 
 * The generic refers to the data type of an element in the input array passed into the radial area generator.
 * @template Datum
 * @return {?}
 */
function areaRadial() {}

/** @typedef {?} */
var RadialArea;

/**
 * DEPRECATED: Use areaRadial()
 * DEPRECATED: Use areaRadial<Datum>()
 * @template Datum
 * @return {?}
 */
function radialArea() {}
/**
 * @record
 * @struct
 */
function CurveGeneratorLineOnly() {}

/**
 * Indicates the start of a new line segment. Zero or more points will follow.
 * @return {void}
 */
CurveGeneratorLineOnly.prototype.lineStart = function() {};

/**
 * Indicates the end of the current line segment.
 * @return {void}
 */
CurveGeneratorLineOnly.prototype.lineEnd = function() {};

/**
 * Indicates a new point in the current line segment with the given x- and y-values.
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
CurveGeneratorLineOnly.prototype.point = function(x, y) {};
/**
 * @record
 * @struct
 */
function CurveFactoryLineOnly() {}

/* TODO: CallSignature:  */
/**
 * @extends {CurveGeneratorLineOnly}
 * @record
 * @struct
 */
function CurveGenerator() {}

/**
 * Indicates the start of a new area segment.
 * Each area segment consists of exactly two line segments: the topline, followed by the baseline, with the baseline points in reverse order.
 * @return {void}
 */
CurveGenerator.prototype.areaStart = function() {};

/**
 * Indicates the end of the current area segment.
 * @return {void}
 */
CurveGenerator.prototype.areaEnd = function() {};
/**
 * @record
 * @struct
 */
function CurveFactory() {}

/* TODO: CallSignature:  */
 /** @type {?} */
var curveBasis;
 /** @type {?} */
var curveBasisClosed;
 /** @type {?} */
var curveBasisOpen;
/**
 * @extends {CurveFactoryLineOnly}
 * @record
 * @struct
 */
function CurveBundleFactory() {}

/**
 * Returns a bundle curve factory with the specified beta in the range [0, 1], representing the bundle strength.
 * If beta equals zero, a straight line between the first and last point is produced; if beta equals one,
 * a standard basis spline is produced.
 * 
 * @param {number} beta A constant value in the [0, 1] interval.
 * @return {?}
 */
CurveBundleFactory.prototype.beta = function(beta) {};
 /** @type {?} */
var curveBundle;
/**
 * @extends {CurveFactory}
 * @record
 * @struct
 */
function CurveCardinalFactory() {}

/**
 * Returns a cardinal curve factory with the specified tension in the range [0, 1].
 * The tension determines the length of the tangents: a tension of one yields all zero tangents, equivalent to curveLinear; a tension of zero produces a uniform Catmull–Rom spline.
 * 
 * @param {number} tension A constant in the [0, 1] interval.
 * @return {?}
 */
CurveCardinalFactory.prototype.tension = function(tension) {};
 /** @type {?} */
var curveCardinal;
 /** @type {?} */
var curveCardinalClosed;
 /** @type {?} */
var curveCardinalOpen;
/**
 * @extends {CurveFactory}
 * @record
 * @struct
 */
function CurveCatmullRomFactory() {}

/**
 * Returns a cubic Catmull–Rom curve factory with the specified alpha in the range [0, 1].
 * If alpha is zero, produces a uniform spline, equivalent to curveCardinal with a tension of zero;
 * if alpha is one, produces a chordal spline; if alpha is 0.5, produces a centripetal spline.
 * Centripetal splines are recommended to avoid self-intersections and overshoot.
 * 
 * @param {number} alpha A constant in the [0, 1] interval.
 * @return {?}
 */
CurveCatmullRomFactory.prototype.alpha = function(alpha) {};
 /** @type {?} */
var curveCatmullRom;
 /** @type {?} */
var curveCatmullRomClosed;
 /** @type {?} */
var curveCatmullRomOpen;
 /** @type {?} */
var curveLinear;
 /** @type {?} */
var curveLinearClosed;
 /** @type {?} */
var curveMonotoneX;
 /** @type {?} */
var curveMonotoneY;
 /** @type {?} */
var curveNatural;
 /** @type {?} */
var curveStep;
 /** @type {?} */
var curveStepAfter;
 /** @type {?} */
var curveStepBefore;
/**
 * @record
 * @struct
 */
function DefaultLinkObject() {}
 /** @type {!Array<?>} */
DefaultLinkObject.prototype.source;
 /** @type {!Array<?>} */
DefaultLinkObject.prototype.target;
/**
 * @record
 * @struct
 */
function Link() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/**
 * Returns the current source node accessor function.
 * The default source accessor function returns a two element array [x, y].
 * Sets the source accessor to the specified function and returns this link generator.
 * 
 * @param {?=} source Source node accessor function. The accessor function is invoked in the same "this" context as the generator was invoked in and
 * receives the same arguments that were passed into the link generator. The default target accessor function returns a two element array [x, y].
 * @return {?}
 */
Link.prototype.source = function(source) {};

/**
 * Returns the current target node accessor function.
 * The default target accessor function returns a two element array [x, y].
 * Sets the target accessor to the specified function and returns this link generator.
 * 
 * @param {?=} target Target node accessor function. The accessor function is invoked in the same "this" context as the generator was invoked in and
 * receives the same arguments that were passed into the link generator. The default target accessor function returns a two element array [x, y].
 * @return {?}
 */
Link.prototype.target = function(target) {};

/**
 * Returns the current x-accessor, which defaults to a function accepting an number array
 * as its argument an returning the first element of the array.
 * Sets the x-accessor to the specified function and returns this link generator.
 * 
 * @param {?=} x x-coordinate accessor function. The accessor function is invoked in the same "this" context as the generator was invoked in and
 * receives as its first argument a node object followed by all additional arguments that were passed into the link generator.
 * @return {?}
 */
Link.prototype.x = function(x) {};

/**
 * Returns the current y-accessor, which defaults to a function accepting an number array
 * as its argument an returning the second element of the array.
 * Sets the y-accessor to the specified function and returns this link generator.
 * 
 * @param {?=} y y-coordinate accessor function. The accessor function is invoked in the same "this" context as the generator was invoked in and
 * receives as its first argument a node object followed by all additional arguments that were passed into the link generator.
 * @return {?}
 */
Link.prototype.y = function(y) {};

/**
 * Returns the current rendering context, which defaults to null.
 * Sets the rendering context and returns this link generator.
 * 
 * If the context is not null, then the generated link is rendered to this context as a sequence of path method calls.
 * 
 * Sets the rendering context to null and returns this link generator.
 * 
 * A path data string representing the generated link will be returned when the generator is invoked with data.
 * 
 * @param {!CanvasRenderingContext2D|null=} context The rendering context. / null, to remove rendering context.
 * @return {!CanvasRenderingContext2D|?}
 */
Link.prototype.context = function(context) {};

/**
 * Constructs a new default link generator with horizontal tangents, for example, to visualize links in a tree diagram
 * rooted on the left edge of the display.
 * 
 * With the default settings the link generator accepts a link object conforming to the DefaultLinkObject interface.
 * Constructs a new link generator with horizontal tangents, for example, to visualize links in a tree diagram
 * rooted on the left edge of the display.
 * 
 * Important: Ensure that the accessor functions are configured to work with the link and node datum types
 * specified in the generics.
 * 
 * The first generic corresponds to the datum type of the link object for which the link is to be generated.
 * 
 * The second generic corresponds to the datum type of the source/target node contained in the link object
 * Constructs a new link generator with horizontal tangents, for example, to visualize links in a tree diagram
 * rooted on the left edge of the display.
 * 
 * Important: Ensure that the accessor functions are configured to work with the link and node datum types
 * specified in the generics.
 * 
 * The first generic corresponds to the type of the "this" context within which the link generator and its accessor functions will be invoked.
 * 
 * The second generic corresponds to the datum type of the link object for which the link is to be generated.
 * 
 * The third generic corresponds to the datum type of the source/target node contained in the link object
 * @template LinkDatum, NodeDatum, This
 * @return {?}
 */
function linkHorizontal() {}

/**
 * Constructs a new default link generator with vertical tangents, for example, to visualize links in a tree diagram
 * rooted on the top edge of the display.
 * 
 * With the default settings the link generator accepts a link object conforming to the DefaultLinkObject interface.
 * Constructs a new link generator with vertical tangents, for example, to visualize links in a tree diagram
 * rooted on the top edge of the display.
 * 
 * Important: Ensure that the accessor functions are configured to work with the link and node datum types
 * specified in the generics.
 * 
 * The first generic corresponds to the datum type of the link object for which the link is to be generated.
 * 
 * The second generic corresponds to the datum type of the source/target node contained in the link object
 * Constructs a new link generator with vertical tangents, for example, to visualize links in a tree diagram
 * rooted on the top edge of the display.
 * 
 * Important: Ensure that the accessor functions are configured to work with the link and node datum types
 * specified in the generics.
 * 
 * The first generic corresponds to the type of the "this" context within which the link generator and its accessor functions will be invoked.
 * 
 * The second generic corresponds to the datum type of the link object for which the link is to be generated.
 * 
 * The third generic corresponds to the datum type of the source/target node contained in the link object
 * @template LinkDatum, NodeDatum, This
 * @return {?}
 */
function linkVertical() {}
/**
 * @record
 * @struct
 */
function LinkRadial() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/**
 * Returns the current source node accessor function.
 * The default source accessor function returns a two element array [x, y].
 * Sets the source accessor to the specified function and returns this radial link generator.
 * 
 * @param {?=} source Source node accessor function. The accessor function is invoked in the same "this" context as the generator was invoked in and
 * receives the same arguments that were passed into the radial link generator. The default target accessor function returns a two element array [x, y].
 * @return {?}
 */
LinkRadial.prototype.source = function(source) {};

/**
 * Returns the current target node accessor function.
 * The default target accessor function returns a two element array [x, y].
 * Sets the target accessor to the specified function and returns this radial link generator.
 * 
 * @param {?=} target Target node accessor function. The accessor function is invoked in the same "this" context as the generator was invoked in and
 * receives the same arguments that were passed into the radial link generator. The default target accessor function returns a two element array [x, y].
 * @return {?}
 */
LinkRadial.prototype.target = function(target) {};

/**
 * Returns the current angle accessor, which defaults to a function accepting an number array
 * as its argument an returning the first element of the array.
 * Sets the angle accessor to the specified function and returns this radial link generator.
 * The angle is stated in radians, with 0 at -y (12 o’clock).
 * 
 * @param {?=} angle Angle accessor function. The accessor function is invoked in the same "this" context as the generator was invoked in and
 * receives as its first argument a node object followed by all additional arguments that were passed into the radial link generator.
 * @return {?}
 */
LinkRadial.prototype.angle = function(angle) {};

/**
 * Returns the current radius accessor, which defaults to a function accepting an number array
 * as its argument an returning the second element of the array.
 * Sets the radius accessor to the specified function and returns this radial link generator.
 * The radius is measured as the distance from the origin ⟨0,0⟩.
 * 
 * @param {?=} radius Radius accessor function. The accessor function is invoked in the same "this" context as the generator was invoked in and
 * receives as its first argument a node object followed by all additional arguments that were passed into the radial link generator.
 * @return {?}
 */
LinkRadial.prototype.radius = function(radius) {};

/**
 * Returns the current rendering context, which defaults to null.
 * Sets the rendering context and returns this radial link generator.
 * 
 * If the context is not null, then the generated radial area is rendered to this context as a sequence of path method calls.
 * 
 * Sets the rendering context to null and returns this radial link generator.
 * 
 * A path data string representing the generated radial link will be returned when the generator is invoked with data.
 * 
 * @param {!CanvasRenderingContext2D|null=} context The rendering context. / null, to remove rendering context.
 * @return {!CanvasRenderingContext2D|?}
 */
LinkRadial.prototype.context = function(context) {};

/** @typedef {?} */
var RadialLink;

/**
 * Constructs a new default link generator with radial tangents, for example, to visualize links in a tree diagram
 * rooted in the center of the display.
 * 
 * With the default settings the link generator accepts a link object conforming to the DefaultLinkObject interface.
 * Constructs a new link generator with radial tangents, for example, to visualize links in a tree diagram
 * rooted in the center of the display.
 * 
 * Important: Ensure that the accessor functions are configured to work with the link and node datum types
 * specified in the generics.
 * 
 * The first generic corresponds to the datum type of the link object for which the link is to be generated.
 * 
 * The second generic corresponds to the datum type of the source/target node contained in the link object
 * Constructs a new link generator with radial tangents, for example, to visualize links in a tree diagram
 * rooted in the center of the display.
 * 
 * Important: Ensure that the accessor functions are configured to work with the link and node datum types
 * specified in the generics.
 * 
 * The first generic corresponds to the type of the "this" context within which the link generator and its accessor functions will be invoked.
 * 
 * The second generic corresponds to the datum type of the link object for which the link is to be generated.
 * 
 * The third generic corresponds to the datum type of the source/target node contained in the link object
 * @template LinkDatum, NodeDatum, This
 * @return {?}
 */
function linkRadial() {}
/**
 * @record
 * @struct
 */
function SymbolType() {}

/**
 * Renders this symbol type to the specified context with the specified size in square pixels. The context implements the CanvasPathMethods interface.
 * (Note that this is a subset of the CanvasRenderingContext2D interface!)
 * 
 * @param {!CanvasPathMethods} context A rendering context implementing CanvasPathMethods.
 * @param {number} size Size of the symbol to draw.
 * @return {void}
 */
SymbolType.prototype.draw = function(context, size) {};

/**
 * Constructs a new symbol generator with the default settings.
 * Constructs a new symbol generator with the default settings.
 * 
 * The generic corrsponds to the data type of the datum underlying the symbol.
 * Constructs a new symbol generator with the default settings.
 * 
 * The first generic corresponds to the "this" context within which the symbol generator is invoked.
 * The second generic corrsponds to the data type of the datum underlying the symbol.
 * @template Datum, This
 * @return {?}
 */
function symbol() {}
 /** @type {!Array<?>} */
var symbols;
 /** @type {?} */
var symbolCircle;
 /** @type {?} */
var symbolCross;
 /** @type {?} */
var symbolDiamond;
 /** @type {?} */
var symbolSquare;
 /** @type {?} */
var symbolStar;
 /** @type {?} */
var symbolTriangle;
 /** @type {?} */
var symbolWye;

/**
 * Returns the point [x, y] for the given angle and the given radius.
 * @param {number} angle Angle in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
 * @param {number} radius Radius.
 * @return {!Array<?>}
 */
function pointRadial(angle, radius) {}
/**
 * @record
 * @struct
 */
function SeriesPoint() {}

/* TODO: PropertySignature: 0 */

/* TODO: PropertySignature: 1 */
 /** @type {?} */
SeriesPoint.prototype.data;
/**
 * @record
 * @struct
 */
function Series() {}
 /** @type {?} */
Series.prototype.key;
 /** @type {number} */
Series.prototype.index;
/**
 * @record
 * @struct
 */
function Stack() {}

/* TODO: CallSignature:  */

/**
 * Returns the current keys accessor, which defaults to the empty array.
 * Sets the keys accessor to the specified function or array and returns this stack generator.
 * 
 * A series (layer) is generated for each key. Keys are typically strings, but they may be arbitrary values.
 * The series’ key is passed to the value accessor, along with each data point, to compute the point’s value.
 * 
 * Sets the keys accessor to the specified function or array and returns this stack generator.
 * 
 * A series (layer) is generated for each key. Keys are typically strings, but they may be arbitrary values.
 * The series’ key is passed to the value accessor, along with each data point, to compute the point’s value.
 * 
 * @param {!Array<?>|?=} keys An array of keys. / An accessor function returning the array of keys.
 *             The accessor function is invoked with the "this" context of the Stack generator and passed the same arguments passed into the generator.
 * @return {?}
 */
Stack.prototype.keys = function(keys) {};

/**
 * Returns the current value accessor, which defaults to a function return the property corresponding to the relevant key from the data element.
 * 
 * Thus, by default the stack generator assumes that the input data is an array of objects, with each object exposing named properties with numeric values; see stack for an example.
 * Sets the value accessor to the specified number and returns this stack generator.
 * 
 * Sets the value accessor to the specified function and returns this stack generator.
 * 
 * @param {number|?=} value A constant value. / A value accessor function which returns the numeric value for a given data element and key combination. The accessor function is invoked for each data element and key being passed
 * the datum, the key, index of the data element in the input data array, and the complete data array.
 * @return {?}
 */
Stack.prototype.value = function(value) {};

/**
 * Returns the current order acccesor, which defaults to stackOrderNone; this uses the order given by the key accessor.
 * Reset the order to use stackOrderNone; this uses the order given by the key accessor.
 * 
 * Sets the order accessor to the specified array and returns this stack generator.
 * 
 * The stack order is computed prior to the offset; thus, the lower value for all points is zero at the time the order is computed.
 * The index attribute for each series is also not set until after the order is computed.
 * 
 * Sets the order accessor to the specified function and returns this stack generator.
 * 
 * The stack order is computed prior to the offset; thus, the lower value for all points is zero at the time the order is computed.
 * The index attribute for each series is also not set until after the order is computed.
 * 
 * See stack orders for the built-in orders.
 * 
 * @param {null|!Array<number>|?=} order null to set to the default stackOrderNone. / An array of numeric indexes representing the stack order. / A function returning a sort order array. It is passed the generated series array and must return an array of numeric indexes representing the stack order.
 * @return {?}
 */
Stack.prototype.order = function(order) {};

/**
 * Returns the current offset acccesor, which defaults to stackOffsetNone; this uses a zero baseline.
 * Reset the offset to use stackOffsetNone; this uses a zero baseline.
 * 
 * Sets the offset accessor to the specified function and returns this stack generator.
 * 
 * @param {null|?=} offset null to set to the default stackOffsetNone. / A function which is passed the generated series array and the order index array.
 *               The offset function is then responsible for updating the lower and upper values in the series array to layout the stack.
 * @return {?}
 */
Stack.prototype.offset = function(offset) {};

/**
 * Constructs a new stack generator with the default settings.
 * 
 * Ensure that the accessors used with the stack generator correspond to the arguments passed into them.
 * Constructs a new stack generator with the default settings.
 * 
 * Ensure that the accessors used with the stack generator correspond to the arguments passed into them.
 * 
 * The generic corresponds to the data type of an element in the data array passed into the stack generator.
 * Constructs a new stack generator with the default settings.
 * 
 * Ensure that the accessors used with the stack generator correspond to the arguments passed into them.
 * 
 * The first generic corresponds to the data type of an element in the data array passed into the stack generator.
 * 
 * The second generic corresponds to the data type of key used to identify a series.
 * Constructs a new stack generator with the default settings.
 * 
 * Ensure that the accessors used with the stack generator correspond to the arguments passed into them.
 * 
 * The first generic corresponds to the "this" context in which the stack generator and its accessor functions are invoked.
 * 
 * The second generic corresponds to the data type of an element in the data array passed into the stack generator.
 * 
 * The third generic corresponds to the data type of key used to identify a series.
 * @template Datum, Key, This
 * @return {?}
 */
function stack() {}

/**
 * Returns a series order such that the smallest series (according to the sum of values) is at the bottom.
 * 
 * @param {?} series A series generated by a stack generator
 * @return {!Array<number>}
 */
function stackOrderAscending(series) {}

/**
 * Returns a series order such that the largest series (according to the sum of values) is at the bottom.
 * 
 * @param {?} series A series generated by a stack generator
 * @return {!Array<number>}
 */
function stackOrderDescending(series) {}

/**
 * Returns a series order such that the larger series (according to the sum of values) are on the inside and the smaller series are on the outside.
 * This order is recommended for streamgraphs in conjunction with the wiggle offset. See Stacked Graphs—Geometry & Aesthetics by Byron & Wattenberg for more information.
 * 
 * @param {?} series A series generated by a stack generator
 * @return {!Array<number>}
 */
function stackOrderInsideOut(series) {}

/**
 * Returns the given series order [0, 1, … n - 1] where n is the number of elements in series. Thus, the stack order is given by the key accessor.
 * 
 * @param {?} series A series generated by a stack generator
 * @return {!Array<number>}
 */
function stackOrderNone(series) {}

/**
 * Returns the reverse of the given series order [n - 1, n - 2, … 0] where n is the number of elements in series. Thus, the stack order is given by the reverse of the key accessor.
 * 
 * @param {?} series A series generated by a stack generator
 * @return {!Array<number>}
 */
function stackOrderReverse(series) {}

/**
 * Applies a zero baseline and normalizes the values for each point such that the topline is always one.
 * 
 * @param {?} series A series generated by a stack generator
 * @param {!Array<number>} order An array of numeric indexes representing the stack order.
 * @return {void}
 */
function stackOffsetExpand(series, order) {}

/**
 * Positive values are stacked above zero, while negative values are stacked below zero.
 * 
 * @param {?} series A series generated by a stack generator
 * @param {!Array<number>} order An array of numeric indexes representing the stack order.
 * @return {void}
 */
function stackOffsetDiverging(series, order) {}

/**
 * Applies a zero baseline.
 * 
 * @param {?} series A series generated by a stack generator
 * @param {!Array<number>} order An array of numeric indexes representing the stack order.
 * @return {void}
 */
function stackOffsetNone(series, order) {}

/**
 * Shifts the baseline down such that the center of the streamgraph is always at zero.
 * 
 * @param {?} series A series generated by a stack generator
 * @param {!Array<number>} order An array of numeric indexes representing the stack order.
 * @return {void}
 */
function stackOffsetSilhouette(series, order) {}

/**
 * Shifts the baseline so as to minimize the weighted wiggle of layers. This offset is recommended for streamgraphs in conjunction with the inside-out order.
 * See Stacked Graphs—Geometry & Aesthetics by Bryon & Wattenberg for more information.
 * 
 * @param {?} series A series generated by a stack generator
 * @param {!Array<number>} order An array of numeric indexes representing the stack order.
 * @return {void}
 */
function stackOffsetWiggle(series, order) {}
