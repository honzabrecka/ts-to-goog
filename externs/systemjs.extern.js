/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/systemjs/index.d.ts:
/** @const */
var SystemJSLoader = {};
/**
 * @record
 * @struct
 */
SystemJSLoader.ModulesList = function() {};

/* TODO: IndexSignature: SystemJSLoader */
/**
 * @record
 * @struct
 */
SystemJSLoader.PackageList = function() {};

/* TODO: IndexSignature: SystemJSLoader */

/** @typedef {string} */
SystemJSLoader.ModuleFormat;

/** @typedef {(boolean|string)} */
SystemJSLoader.Transpiler;

/** @typedef {!SystemJSLoader.PackageList<(string|!SystemJSLoader.PackageList<string>)>} */
SystemJSLoader.ConfigMap;

/** @typedef {!SystemJSLoader.PackageList<!SystemJSLoader.MetaConfig>} */
SystemJSLoader.ConfigMeta;
/**
 * @record
 * @struct
 */
SystemJSLoader.MetaConfig = function() {};
 /** @type {string} */
SystemJSLoader.MetaConfig.prototype.format;
 /** @type {string} */
SystemJSLoader.MetaConfig.prototype.exports;
 /** @type {!Array<string>} */
SystemJSLoader.MetaConfig.prototype.deps;
 /** @type {string} */
SystemJSLoader.MetaConfig.prototype.globals;
 /** @type {string} */
SystemJSLoader.MetaConfig.prototype.loader;
 /** @type {?} */
SystemJSLoader.MetaConfig.prototype.sourceMap;
 /** @type {boolean} */
SystemJSLoader.MetaConfig.prototype.scriptLoad;
 /** @type {string} */
SystemJSLoader.MetaConfig.prototype.nonce;
 /** @type {string} */
SystemJSLoader.MetaConfig.prototype.integrity;
 /** @type {string} */
SystemJSLoader.MetaConfig.prototype.crossOrigin;
 /** @type {boolean} */
SystemJSLoader.MetaConfig.prototype.esmExports;
 /** @type {boolean} */
SystemJSLoader.MetaConfig.prototype.build;
/**
 * @record
 * @struct
 */
SystemJSLoader.PackageConfig = function() {};
 /** @type {string} */
SystemJSLoader.PackageConfig.prototype.main;
 /** @type {string} */
SystemJSLoader.PackageConfig.prototype.format;
 /** @type {(string|boolean)} */
SystemJSLoader.PackageConfig.prototype.defaultExtension;
 /** @type {!SystemJSLoader.PackageList<(string|!SystemJSLoader.PackageList<string>)>} */
SystemJSLoader.PackageConfig.prototype.map;
 /** @type {!SystemJSLoader.PackageList<!SystemJSLoader.MetaConfig>} */
SystemJSLoader.PackageConfig.prototype.meta;
/**
 * @record
 * @struct
 */
SystemJSLoader.TraceurOptions = function() {};
 /** @type {boolean} */
SystemJSLoader.TraceurOptions.prototype.properTailCalls;
 /** @type {boolean} */
SystemJSLoader.TraceurOptions.prototype.symbols;
 /** @type {boolean} */
SystemJSLoader.TraceurOptions.prototype.arrayComprehension;
 /** @type {boolean} */
SystemJSLoader.TraceurOptions.prototype.asyncFunctions;
 /** @type {?} */
SystemJSLoader.TraceurOptions.prototype.asyncGenerators;
 /** @type {boolean} */
SystemJSLoader.TraceurOptions.prototype.forOn;
 /** @type {boolean} */
SystemJSLoader.TraceurOptions.prototype.generatorComprehension;
/**
 * @record
 * @struct
 */
SystemJSLoader.Config = function() {};

/* TODO: IndexSignature: SystemJSLoader */
 /** @type {string} */
SystemJSLoader.Config.prototype.baseURL;
 /** @type {?} */
SystemJSLoader.Config.prototype.babelOptions;
 /** @type {!SystemJSLoader.ModulesList} */
SystemJSLoader.Config.prototype.bundles;
 /** @type {boolean} */
SystemJSLoader.Config.prototype.defaultJSExtensions;
 /** @type {!SystemJSLoader.ModulesList} */
SystemJSLoader.Config.prototype.depCache;
 /** @type {!SystemJSLoader.PackageList<(string|!SystemJSLoader.PackageList<string>)>} */
SystemJSLoader.Config.prototype.map;
 /** @type {!SystemJSLoader.PackageList<!SystemJSLoader.MetaConfig>} */
SystemJSLoader.Config.prototype.meta;
 /** @type {!SystemJSLoader.PackageList<!SystemJSLoader.PackageConfig>} */
SystemJSLoader.Config.prototype.packages;
 /** @type {!SystemJSLoader.PackageList<string>} */
SystemJSLoader.Config.prototype.paths;
 /** @type {!SystemJSLoader.TraceurOptions} */
SystemJSLoader.Config.prototype.traceurOptions;
 /** @type {(boolean|string)} */
SystemJSLoader.Config.prototype.transpiler;
 /** @type {boolean} */
SystemJSLoader.Config.prototype.trace;
 /** @type {?} */
SystemJSLoader.Config.prototype.typescriptOptions;
/**
 * @record
 * @struct
 */
SystemJSLoader.SystemJSSystemFields = function() {};
 /** @type {string} */
SystemJSLoader.SystemJSSystemFields.prototype.env;
 /** @type {boolean} */
SystemJSLoader.SystemJSSystemFields.prototype.loaderErrorStack;
 /** @type {!Array<string>} */
SystemJSLoader.SystemJSSystemFields.prototype.packageConfigPaths;
 /** @type {boolean} */
SystemJSLoader.SystemJSSystemFields.prototype.pluginFirst;
 /** @type {string} */
SystemJSLoader.SystemJSSystemFields.prototype.version;
 /** @type {boolean} */
SystemJSLoader.SystemJSSystemFields.prototype.warnings;
/**
 * @extends {SystemJSLoader.Config}
 * @extends {SystemJSLoader.SystemJSSystemFields}
 * @record
 * @struct
 */
SystemJSLoader.System = function() {};
 /** @type {function(!Array<?>): void} */
SystemJSLoader.System.prototype.amdDefine;
 /** @type {function(!Array<string>, function(!Array<?>): void): void} */
SystemJSLoader.System.prototype.amdRequire;
 /** @type {function(new: (!SystemJSLoader.System)): ?} */
SystemJSLoader.System.prototype.constructor;
 /** @type {function(string): ?} */
SystemJSLoader.System.prototype._nodeRequire;
 /** @type {!SystemJSLoader.PackageList<?>} */
SystemJSLoader.System.prototype.loads;

/**
 * SystemJS configuration helper function.
 * Once SystemJS has loaded, configuration can be set on SystemJS by using the configuration function System.config.
 * @param {!SystemJSLoader.Config} config
 * @return {void}
 */
SystemJSLoader.System.prototype.config = function(config) {};

/**
 * Deletes a module from the registry by normalized name.
 * @param {string} moduleName
 * @return {void}
 */
SystemJSLoader.System.prototype.delete = function(moduleName) {};

/**
 * Returns a module from the registry by normalized name.
 * @template TModule
 * @param {string} moduleName
 * @return {?|TModule}
 */
SystemJSLoader.System.prototype.get = function(moduleName) {};

/**
 * Returns a clone of the internal SystemJS configuration in use.
 * @return {!SystemJSLoader.Config}
 */
SystemJSLoader.System.prototype.getConfig = function() {};

/**
 * Returns whether a given module exists in the registry by normalized module name.
 * @param {string} moduleName
 * @return {boolean}
 */
SystemJSLoader.System.prototype.has = function(moduleName) {};

/**
 * Loads a module by name taking an optional normalized parent name argument.
 * Promise resolves to the module value.
 * @template TModule
 * @param {string} moduleName
 * @param {string=} normalizedParentName
 * @return {!Promise<?>|!Promise<TModule>}
 */
SystemJSLoader.System.prototype.import = function(moduleName, normalizedParentName) {};

/**
 * Given any object, returns true if the object is either a SystemJS module or native JavaScript module object, and false otherwise.
 * Useful for interop scenarios.
 * @param {?} object
 * @return {boolean}
 */
SystemJSLoader.System.prototype.isModule = function(object) {};

/**
 * Given a plain JavaScript object, return an equivalent Module object.
 * Useful when writing a custom instantiate hook or using System.set.
 * @template TModule
 * @param {?} object
 * @return {?|TModule}
 */
SystemJSLoader.System.prototype.newModule = function(object) {};

/**
 * Declaration function for defining modules of the System.register polyfill module format.
 * @param {string|!Array<string>} name_or_deps
 * @param {!Array<string>|function(!Array<?>): ?} deps_or_declare
 * @param {function(!Array<?>): ?=} declare
 * @return {void}
 */
SystemJSLoader.System.prototype.register = function(name_or_deps, deps_or_declare, declare) {};

/**
 * Companion module format to System.register for non-ES6 modules.
 * Provides a <script>-injection-compatible module format that any CommonJS or Global module can be converted into for CSP compatibility.
 * @param {string|!Array<string>} name_or_deps
 * @param {!Array<string>|boolean} deps_or_executingRequire
 * @param {boolean|function(!Array<?>): ?} executingRequire_or_declare
 * @param {function(!Array<?>): ?=} declare
 * @return {void}
 */
SystemJSLoader.System.prototype.registerDynamic = function(name_or_deps, deps_or_executingRequire, executingRequire_or_declare, declare) {};

/**
 * Sets a module into the registry directly and synchronously.
 * Typically used along with System.newModule to create a valid Module object:
 * @param {string} moduleName
 * @param {?} module
 * @return {void}
 */
SystemJSLoader.System.prototype.set = function(moduleName, module) {};

/**
 * Resolves module name to normalized URL.
 * @param {string} moduleName
 * @param {string=} parentName
 * @return {!Promise<string>}
 */
SystemJSLoader.System.prototype.resolve = function(moduleName, parentName) {};

/**
 * Resolves module name to normalized URL.
 * Synchronous alternative to `SystemJS.resolve`.
 * @param {string} moduleName
 * @param {string=} parentName
 * @return {string}
 */
SystemJSLoader.System.prototype.resolveSync = function(moduleName, parentName) {};
 /** @type {!SystemJSLoader.System} */
var SystemJS;
 /** @type {string} */
var __moduleName;
 /** @type {!SystemJSLoader.System} */
var System;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "systemjs"
/** @const */
tsickle_declare_module.systemjs = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.systemjs */
 /** @type {!SystemJSLoader.System} */
tsickle_declare_module.systemjs.system;

/* TODO: ExportAssignment in tsickle_declare_module.systemjs */
