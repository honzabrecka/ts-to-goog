/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/restangular/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
/** @const */
var restangular = {};
/**
 * @extends {angular.IPromise}
 * @record
 * @struct
 */
restangular.IPromise = function() {};
 /** @type {T} */
restangular.IPromise.prototype.$object;

/**
 * @param {string} methodName
 * @param {?=} params
 * @return {!restangular.IPromise}
 */
restangular.IPromise.prototype.call = function(methodName, params) {};

/**
 * @param {string} fieldName
 * @return {!restangular.IPromise}
 */
restangular.IPromise.prototype.get = function(fieldName) {};
/**
 * @extends {angular.IPromise}
 * @record
 * @struct
 */
restangular.ICollectionPromise = function() {};
 /** @type {!Array<T>} */
restangular.ICollectionPromise.prototype.$object;

/**
 * @param {?} object
 * @return {!restangular.ICollectionPromise}
 */
restangular.ICollectionPromise.prototype.push = function(object) {};

/**
 * @param {string} methodName
 * @param {?=} params
 * @return {!restangular.ICollectionPromise}
 */
restangular.ICollectionPromise.prototype.call = function(methodName, params) {};

/**
 * @param {string} fieldName
 * @return {!restangular.ICollectionPromise}
 */
restangular.ICollectionPromise.prototype.get = function(fieldName) {};
/**
 * @record
 * @struct
 */
restangular.IResponse = function() {};
 /** @type {number} */
restangular.IResponse.prototype.status;
 /** @type {?} */
restangular.IResponse.prototype.data;
 /** @type {{method: string, url: string, params: ?}} */
restangular.IResponse.prototype.config;

/**
 * @param {string} name
 * @return {string}
 */
restangular.IResponse.prototype.headers = function(name) {};
/**
 * @record
 * @struct
 */
restangular.IProvider = function() {};

/**
 * @param {string} baseUrl
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setBaseUrl = function(baseUrl) {};

/**
 * @param {!Array<string>} fields
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setExtraFields = function(fields) {};

/**
 * @param {boolean|?} parentless_or_value
 * @param {!Array<string>=} routes
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setParentless = function(parentless_or_value, routes) {};

/**
 * @param {?} httpFields
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setDefaultHttpFields = function(httpFields) {};

/**
 * @param {string} route
 * @param {!Function|boolean} transformer_or_isCollection
 * @param {!Function=} transformer
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.addElementTransformer = function(route, transformer_or_isCollection, transformer) {};

/**
 * @param {boolean} active
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setTransformOnlyServerElements = function(active) {};

/**
 * @param {function(?, boolean, string, !restangular.IService): ?} callback
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setOnElemRestangularized = function(callback) {};

/**
 * @param {function(?, string, string, string, !restangular.IResponse, !angular.IDeferred<?>): ?} responseInterceptor
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setResponseInterceptor = function(responseInterceptor) {};

/**
 * @param {function(?, string, string, string, !restangular.IResponse, !angular.IDeferred<?>): ?} responseInterceptor
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setResponseExtractor = function(responseInterceptor) {};

/**
 * @param {function(?, string, string, string, !restangular.IResponse, !angular.IDeferred<?>): ?} responseInterceptor
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.addResponseInterceptor = function(responseInterceptor) {};

/**
 * @param {function(?, string, string, string): ?} requestInterceptor
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setRequestInterceptor = function(requestInterceptor) {};

/**
 * @param {function(?, string, string, string): ?} requestInterceptor
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.addRequestInterceptor = function(requestInterceptor) {};

/**
 * @param {function(?, string, string, string, ?, ?, !angular.IRequestShortcutConfig): {element: ?, headers: ?, params: ?}} fullRequestInterceptor
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setFullRequestInterceptor = function(fullRequestInterceptor) {};

/**
 * @param {function(?, string, string, string, ?, ?, !angular.IRequestShortcutConfig): {headers: ?, params: ?, element: ?, httpConfig: !angular.IRequestShortcutConfig}} requestInterceptor
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.addFullRequestInterceptor = function(requestInterceptor) {};

/**
 * @param {function(!restangular.IResponse, !angular.IDeferred<?>, function(!restangular.IResponse): ?): ?} errorInterceptor
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setErrorInterceptor = function(errorInterceptor) {};

/**
 * @param {!Object<string,string>} fields
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setRestangularFields = function(fields) {};

/**
 * @param {!Array<string>} overriders
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setMethodOverriders = function(overriders) {};

/**
 * @param {boolean} jsonp
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setJsonp = function(jsonp) {};

/**
 * @param {?|string|!Array<string>} params_or_method_or_methods
 * @param {?=} params
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setDefaultRequestParams = function(params_or_method_or_methods, params) {};

/**
 * @param {boolean} fullResponse
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setFullResponse = function(fullResponse) {};

/**
 * @param {?} headers
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setDefaultHeaders = function(headers) {};

/**
 * @param {string} suffix
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setRequestSuffix = function(suffix) {};

/**
 * @param {boolean} useCannonicalId
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setUseCannonicalId = function(useCannonicalId) {};

/**
 * @param {boolean} encode
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setEncodeIds = function(encode) {};

/**
 * @param {boolean} value
 * @return {!restangular.IProvider}
 */
restangular.IProvider.prototype.setSelfLinkAbsoluteUrl = function(value) {};
/**
 * @record
 * @struct
 */
restangular.ICustom = function() {};

/**
 * @param {string} path
 * @param {?=} params
 * @param {?=} headers
 * @return {!restangular.IPromise<?>}
 */
restangular.ICustom.prototype.customGET = function(path, params, headers) {};

/**
 * @param {string} path
 * @param {?=} params
 * @param {?=} headers
 * @return {!restangular.ICollectionPromise<?>}
 */
restangular.ICustom.prototype.customGETLIST = function(path, params, headers) {};

/**
 * @param {string} path
 * @param {?=} params
 * @param {?=} headers
 * @return {!restangular.IPromise<?>}
 */
restangular.ICustom.prototype.customDELETE = function(path, params, headers) {};

/**
 * @param {?=} elem
 * @param {string=} path
 * @param {?=} params
 * @param {?=} headers
 * @return {!restangular.IPromise<?>}
 */
restangular.ICustom.prototype.customPOST = function(elem, path, params, headers) {};

/**
 * @param {?=} elem
 * @param {string=} path
 * @param {?=} params
 * @param {?=} headers
 * @return {!restangular.IPromise<?>}
 */
restangular.ICustom.prototype.customPUT = function(elem, path, params, headers) {};

/**
 * @param {?=} elem
 * @param {string=} path
 * @param {?=} params
 * @param {?=} headers
 * @return {!restangular.IPromise<?>}
 */
restangular.ICustom.prototype.customPATCH = function(elem, path, params, headers) {};

/**
 * @param {string} operation
 * @param {string} path
 * @param {?=} params
 * @param {?=} headers
 * @param {?=} elem
 * @return {!restangular.IPromise<?>}
 */
restangular.ICustom.prototype.customOperation = function(operation, path, params, headers, elem) {};

/**
 * @param {string} name
 * @param {string} operation
 * @param {string=} path
 * @param {?=} params
 * @param {?=} headers
 * @param {?=} elem
 * @return {!restangular.IPromise<?>}
 */
restangular.ICustom.prototype.addRestangularMethod = function(name, operation, path, params, headers, elem) {};
/**
 * @extends {restangular.ICustom}
 * @extends {restangular.IProvider}
 * @record
 * @struct
 */
restangular.IService = function() {};

/**
 * @param {string} route
 * @param {number|string=} id
 * @return {!restangular.IElement}
 */
restangular.IService.prototype.one = function(route, id) {};

/**
 * @param {string} route
 * @param {string} url
 * @return {!restangular.IElement}
 */
restangular.IService.prototype.oneUrl = function(route, url) {};

/**
 * @param {string} route
 * @return {!restangular.ICollection}
 */
restangular.IService.prototype.all = function(route) {};

/**
 * @param {string} route
 * @param {string} url
 * @return {!restangular.ICollection}
 */
restangular.IService.prototype.allUrl = function(route, url) {};

/**
 * @param {?} fromElement
 * @return {!restangular.IElement}
 */
restangular.IService.prototype.copy = function(fromElement) {};

/**
 * @param {function(!restangular.IProvider): ?} configurer
 * @return {!restangular.IService}
 */
restangular.IService.prototype.withConfig = function(configurer) {};

/**
 * @param {?} parent
 * @param {?} element
 * @param {string} route
 * @param {?=} collection
 * @param {?=} reqParams
 * @return {!restangular.IElement}
 */
restangular.IService.prototype.restangularizeElement = function(parent, element, route, collection, reqParams) {};

/**
 * @param {?} parent
 * @param {?} element
 * @param {string} route
 * @return {!restangular.ICollection}
 */
restangular.IService.prototype.restangularizeCollection = function(parent, element, route) {};

/**
 * @param {string} route
 * @param {?=} parent
 * @return {!restangular.IScopedService}
 */
restangular.IService.prototype.service = function(route, parent) {};

/**
 * @param {?} element
 * @return {?}
 */
restangular.IService.prototype.stripRestangular = function(element) {};

/**
 * @param {string} route
 * @param {function(!restangular.IElement): ?} extender
 * @return {void}
 */
restangular.IService.prototype.extendModel = function(route, extender) {};

/**
 * @param {string} route
 * @param {function(!restangular.ICollection): ?} extender
 * @return {void}
 */
restangular.IService.prototype.extendCollection = function(route, extender) {};
/**
 * @extends {restangular.IService}
 * @record
 * @struct
 */
restangular.IScopedService = function() {};

/**
 * @param {number|string} id
 * @return {!restangular.IElement}
 */
restangular.IScopedService.prototype.one = function(id) {};

/**
 * @template T
 * @param {?|T} elementToPost
 * @param {?=} queryParams
 * @param {?=} headers
 * @return {!restangular.IPromise<?>|!restangular.IPromise<T>}
 */
restangular.IScopedService.prototype.post = function(elementToPost, queryParams, headers) {};

/**
 * @template T
 * @param {?=} queryParams
 * @param {?=} headers
 * @return {!restangular.ICollectionPromise<?>|!restangular.ICollectionPromise<T>}
 */
restangular.IScopedService.prototype.getList = function(queryParams, headers) {};

/**
 * @param {number|string} id
 * @return {!restangular.IElement}
 */
restangular.IScopedService.prototype.one = function(id) {};

/**
 * @template T
 * @param {?|T} elementToPost
 * @param {?=} queryParams
 * @param {?=} headers
 * @return {!restangular.IPromise<?>|!restangular.IPromise<T>}
 */
restangular.IScopedService.prototype.post = function(elementToPost, queryParams, headers) {};

/**
 * @template T
 * @param {?=} queryParams
 * @param {?=} headers
 * @return {!restangular.ICollectionPromise<?>|!restangular.ICollectionPromise<T>}
 */
restangular.IScopedService.prototype.getList = function(queryParams, headers) {};
/**
 * @extends {restangular.IService}
 * @record
 * @struct
 */
restangular.IElement = function() {};
 /** @type {string} */
restangular.IElement.prototype.route;
 /** @type {string} */
restangular.IElement.prototype.id;
 /** @type {?} */
restangular.IElement.prototype.reqParams;

/**
 * @template T
 * @param {?=} queryParams
 * @param {?=} headers
 * @return {!restangular.IPromise<?>|!restangular.IPromise<T>}
 */
restangular.IElement.prototype.get = function(queryParams, headers) {};

/**
 * @template T
 * @param {?=} subElement
 * @param {?=} queryParams
 * @param {?=} headers
 * @return {!restangular.ICollectionPromise<?>|!restangular.ICollectionPromise<T>}
 */
restangular.IElement.prototype.getList = function(subElement, queryParams, headers) {};

/**
 * @param {?=} queryParams
 * @param {?=} headers
 * @return {!restangular.IPromise<?>}
 */
restangular.IElement.prototype.put = function(queryParams, headers) {};

/**
 * @template T
 * @param {?} subElement
 * @param {?|T=} elementToPost
 * @param {?=} queryParams
 * @param {?=} headers
 * @return {!restangular.IPromise<?>|!restangular.IPromise<T>}
 */
restangular.IElement.prototype.post = function(subElement, elementToPost, queryParams, headers) {};

/**
 * @param {?=} queryParams
 * @param {?=} headers
 * @return {!restangular.IPromise<?>}
 */
restangular.IElement.prototype.remove = function(queryParams, headers) {};

/**
 * @param {?=} queryParams
 * @param {?=} headers
 * @return {!restangular.IPromise<?>}
 */
restangular.IElement.prototype.head = function(queryParams, headers) {};

/**
 * @param {?=} queryParams
 * @param {?=} headers
 * @return {!restangular.IPromise<?>}
 */
restangular.IElement.prototype.trace = function(queryParams, headers) {};

/**
 * @param {?=} queryParams
 * @param {?=} headers
 * @return {!restangular.IPromise<?>}
 */
restangular.IElement.prototype.options = function(queryParams, headers) {};

/**
 * @param {?=} queryParams
 * @param {?=} headers
 * @return {!restangular.IPromise<?>}
 */
restangular.IElement.prototype.patch = function(queryParams, headers) {};

/**
 * @return {!restangular.IElement}
 */
restangular.IElement.prototype.clone = function() {};

/**
 * @template T
 * @return {?|T}
 */
restangular.IElement.prototype.plain = function() {};

/**
 * @param {!angular.IRequestShortcutConfig} httpConfig
 * @return {!restangular.IElement}
 */
restangular.IElement.prototype.withHttpConfig = function(httpConfig) {};

/**
 * @param {?=} queryParams
 * @param {?=} headers
 * @return {!restangular.IPromise<?>}
 */
restangular.IElement.prototype.save = function(queryParams, headers) {};

/**
 * @return {string}
 */
restangular.IElement.prototype.getRestangularUrl = function() {};

/**
 * @return {string}
 */
restangular.IElement.prototype.getRequestedUrl = function() {};
/**
 * @extends {restangular.IService}
 * @record
 * @struct
 */
restangular.ICollection = function() {};

/**
 * @template T
 * @param {?=} queryParams
 * @param {?=} headers
 * @return {!restangular.ICollectionPromise<?>|!restangular.ICollectionPromise<T>}
 */
restangular.ICollection.prototype.getList = function(queryParams, headers) {};

/**
 * @template T
 * @param {?|T} elementToPost
 * @param {?=} queryParams
 * @param {?=} headers
 * @return {!restangular.IPromise<?>|!restangular.IPromise<T>}
 */
restangular.ICollection.prototype.post = function(elementToPost, queryParams, headers) {};

/**
 * @param {?=} queryParams
 * @param {?=} headers
 * @return {!restangular.IPromise<?>}
 */
restangular.ICollection.prototype.head = function(queryParams, headers) {};

/**
 * @param {?=} queryParams
 * @param {?=} headers
 * @return {!restangular.IPromise<?>}
 */
restangular.ICollection.prototype.trace = function(queryParams, headers) {};

/**
 * @param {?=} queryParams
 * @param {?=} headers
 * @return {!restangular.IPromise<?>}
 */
restangular.ICollection.prototype.options = function(queryParams, headers) {};

/**
 * @param {?=} queryParams
 * @param {?=} headers
 * @return {!restangular.IPromise<?>}
 */
restangular.ICollection.prototype.patch = function(queryParams, headers) {};

/**
 * @param {?} idx
 * @param {?} params
 * @param {?} headers
 * @return {!restangular.IPromise<?>}
 */
restangular.ICollection.prototype.putElement = function(idx, params, headers) {};

/**
 * @param {!angular.IRequestShortcutConfig} httpConfig
 * @return {!restangular.ICollection}
 */
restangular.ICollection.prototype.withHttpConfig = function(httpConfig) {};

/**
 * @return {!restangular.ICollection}
 */
restangular.ICollection.prototype.clone = function() {};

/**
 * @template T
 * @return {?|!Array<T>}
 */
restangular.ICollection.prototype.plain = function() {};

/**
 * @return {string}
 */
restangular.ICollection.prototype.getRestangularUrl = function() {};

/**
 * @return {string}
 */
restangular.ICollection.prototype.getRequestedUrl = function() {};
