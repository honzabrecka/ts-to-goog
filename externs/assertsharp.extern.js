/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/assertsharp/index.d.ts:
/**
 * @constructor
 * @struct
 */
function Assert() {}

/**
 * @template T
 * @param {?} expected
 * @param {?} actual
 * @param {string=} message
 * @return {void}
 */
Assert.AreEqual = function(expected, actual, message) {};

/**
 * @template T
 * @param {?} notExpected
 * @param {?} actual
 * @param {string=} message
 * @return {void}
 */
Assert.AreNotEqual = function(notExpected, actual, message) {};

/**
 * @template T
 * @param {?} notExpected
 * @param {?} actual
 * @param {string=} message
 * @return {void}
 */
Assert.AreNotSame = function(notExpected, actual, message) {};

/**
 * @template T
 * @param {!Array<?>} expected
 * @param {!Array<?>} actual
 * @param {?=} equals
 * @param {string=} message
 * @return {void}
 */
Assert.AreSequenceEqual = function(expected, actual, equals, message) {};

/**
 * @param {string=} message
 * @return {void}
 */
Assert.Fail = function(message) {};

/**
 * @param {boolean} actual
 * @param {string=} message
 * @return {void}
 */
Assert.IsFalse = function(actual, message) {};

/**
 * @param {?} actual
 * @param {!Function} expectedType
 * @param {string=} message
 * @return {void}
 */
Assert.IsInstanceOfType = function(actual, expectedType, message) {};

/**
 * @param {?} actual
 * @param {!Function} wrongType
 * @param {string=} message
 * @return {void}
 */
Assert.IsNotInstanceOfType = function(actual, wrongType, message) {};

/**
 * @param {?} actual
 * @param {string=} message
 * @return {void}
 */
Assert.IsNotNull = function(actual, message) {};

/**
 * @param {?} actual
 * @param {string=} message
 * @return {void}
 */
Assert.IsNull = function(actual, message) {};

/**
 * @param {boolean} actual
 * @param {string=} message
 * @return {void}
 */
Assert.IsTrue = function(actual, message) {};

/**
 * @param {?} fn
 * @param {string=} message
 * @return {void}
 */
Assert.Throws = function(fn, message) {};
