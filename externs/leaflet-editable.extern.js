/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/leaflet-editable/index.d.ts:

/* TODO: ImportDeclaration in  */
/**
 * @record
 * @struct
 */
L.EditableStatic = function() {};

/* TODO: ConstructSignature: L */
/**
 * @record
 * @struct
 */
L.EditOptions = function() {};
 /** @type {!Object} */
L.EditOptions.prototype.polylineClass;
 /** @type {!Object} */
L.EditOptions.prototype.polygonClass;
 /** @type {!Object} */
L.EditOptions.prototype.markerClass;
 /** @type {string} */
L.EditOptions.prototype.drawingCSSClass;
 /** @type {?<!L.ILayer>} */
L.EditOptions.prototype.editLayer;
 /** @type {?<?>} */
L.EditOptions.prototype.featuresLayer;
 /** @type {!Object} */
L.EditOptions.prototype.vertexMarkerClass;
 /** @type {!Object} */
L.EditOptions.prototype.middleMarkerClass;
 /** @type {!Object} */
L.EditOptions.prototype.polylineEditorClass;
 /** @type {!Object} */
L.EditOptions.prototype.polygonEditorClass;
 /** @type {!Object} */
L.EditOptions.prototype.markerEditorClass;
 /** @type {!Object} */
L.EditOptions.prototype.lineGuideOptions;
 /** @type {boolean} */
L.EditOptions.prototype.skipMiddleMarkers;
/**
 * @extends {L.Mixin.LeafletMixinEvents}
 * @record
 * @struct
 */
L.Editable = function() {};
 /** @type {!L.EditOptions} */
L.Editable.prototype.options;
 /** @type {?} */
L.Editable.prototype.currentPolygon;

/**
 * Start drawing a polyline. If latlng is given, a first point will be added. In any case, continuing on user
 * click. If options is given, it will be passed to the polyline class constructor.
 * @param {?=} latLng
 * @param {!L.PolylineOptions=} options
 * @return {?}
 */
L.Editable.prototype.startPolyline = function(latLng, options) {};

/**
 * Start drawing a polygon. If latlng is given, a first point will be added. In any case, continuing on user
 * click. If options is given, it will be passed to the polygon class constructor.
 * @param {?=} latLng
 * @param {!L.PolylineOptions=} options
 * @return {?}
 */
L.Editable.prototype.startPolygon = function(latLng, options) {};

/**
 * Start adding a marker. If latlng is given, the marker will be shown first at this point. In any case, it
 * will follow the user mouse, and will have a final latlng on next click (or touch). If options is given,
 * it will be passed to the marker class constructor.
 * @param {?=} latLng
 * @param {!L.MarkerOptions=} options
 * @return {?}
 */
L.Editable.prototype.startMarker = function(latLng, options) {};

/**
 * When you need to stop any ongoing drawing, without needing to know which editor is active.
 * @return {void}
 */
L.Editable.prototype.stopDrawing = function() {};
 /** @type {!L.EditableStatic} */
L.Editable;
/**
 * @record
 * @struct
 */
L.EditableMixin = function() {};

/**
 * Enable editing, by creating an editor if not existing, and then calling enable on it.
 * @return {?}
 */
L.EditableMixin.prototype.enableEdit = function() {};

/**
 * Disable editing, also remove the editor property reference.
 * @return {void}
 */
L.EditableMixin.prototype.disableEdit = function() {};

/**
 * Enable or disable editing, according to current status.
 * @return {void}
 */
L.EditableMixin.prototype.toggleEdit = function() {};

/**
 * Return true if current instance has an editor attached, and this editor is enabled.
 * @return {boolean}
 */
L.EditableMixin.prototype.editEnabled = function() {};
 /** @type {boolean} */
L.Map.prototype.editable;
 /** @type {!L.EditOptions} */
L.Map.prototype.editOptions;
 /** @type {?} */
L.Map.prototype.editTools;
 /** @type {boolean} */
L.Map.MapOptions.prototype.editable;
 /** @type {!L.EditOptions} */
L.Map.MapOptions.prototype.editOptions;
/**
 * @record
 * @struct
 */
L.BaseEditor = function() {};

/**
 * Set up the drawing tools for the feature to be editable.
 * @return {(!L.MarkerEditor|!L.PolylineEditor|!L.PolygonEditor)}
 */
L.BaseEditor.prototype.enable = function() {};

/**
 * Remove editing tools.
 * @return {(!L.MarkerEditor|!L.PolylineEditor|!L.PolygonEditor)}
 */
L.BaseEditor.prototype.disable = function() {};
/**
 * @extends {L.BaseEditor}
 * @record
 * @struct
 */
L.PathEditor = function() {};

/**
 * Rebuild edit elements (vertex, middlemarker, etc.).
 * @return {void}
 */
L.PathEditor.prototype.reset = function() {};
/**
 * @extends {L.PathEditor}
 * @record
 * @struct
 */
L.PolylineEditor = function() {};

/**
 * Set up drawing tools to continue the line forward.
 * @return {void}
 */
L.PolylineEditor.prototype.continueForward = function() {};

/**
 * Set up drawing tools to continue the line backward.
 * @return {void}
 */
L.PolylineEditor.prototype.continueBackward = function() {};
/**
 * @extends {L.PathEditor}
 * @record
 * @struct
 */
L.PolygonEditor = function() {};

/**
 * Set up drawing tools for creating a new hole on the polygon. If the latlng param is given, a first
 * point is created.
 * @param {?} latlng
 * @return {void}
 */
L.PolygonEditor.prototype.newHole = function(latlng) {};
/**
 * @extends {L.BaseEditor}
 * @record
 * @struct
 */
L.MarkerEditor = function() {};
