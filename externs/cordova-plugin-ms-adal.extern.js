/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cordova-plugin-ms-adal/index.d.ts:
/** @const */
var Microsoft = {};
/** @const */
Microsoft.ADAL = {};
/**
 * @record
 * @struct
 */
Microsoft.ADAL.UserInfo = function() {};
 /** @type {string} */
Microsoft.ADAL.UserInfo.prototype.displayableId;
 /** @type {string} */
Microsoft.ADAL.UserInfo.prototype.userId;
 /** @type {string} */
Microsoft.ADAL.UserInfo.prototype.familyName;
 /** @type {string} */
Microsoft.ADAL.UserInfo.prototype.givenName;
 /** @type {string} */
Microsoft.ADAL.UserInfo.prototype.identityProvider;
 /** @type {string} */
Microsoft.ADAL.UserInfo.prototype.passwordChangeUrl;
 /** @type {!Date} */
Microsoft.ADAL.UserInfo.prototype.passwordExpiresOn;
 /** @type {string} */
Microsoft.ADAL.UserInfo.prototype.uniqueId;
/**
 * @record
 * @struct
 */
Microsoft.ADAL.TokenCacheItem = function() {};
 /** @type {string} */
Microsoft.ADAL.TokenCacheItem.prototype.accessToken;
 /** @type {string} */
Microsoft.ADAL.TokenCacheItem.prototype.authority;
 /** @type {string} */
Microsoft.ADAL.TokenCacheItem.prototype.clientId;
 /** @type {string} */
Microsoft.ADAL.TokenCacheItem.prototype.displayableId;
 /** @type {!Date} */
Microsoft.ADAL.TokenCacheItem.prototype.expiresOn;
 /** @type {boolean} */
Microsoft.ADAL.TokenCacheItem.prototype.isMultipleResourceRefreshToken;
 /** @type {string} */
Microsoft.ADAL.TokenCacheItem.prototype.resource;
 /** @type {string} */
Microsoft.ADAL.TokenCacheItem.prototype.tenantId;
 /** @type {!Microsoft.ADAL.UserInfo} */
Microsoft.ADAL.TokenCacheItem.prototype.userInfo;
/**
 * @record
 * @struct
 */
Microsoft.ADAL.Promise = function() {};

/**
 * @param {function(): ?} doneCallBack
 * @param {function(string): ?=} failCallBack
 * @return {?}
 */
Microsoft.ADAL.Promise.prototype.then = function(doneCallBack, failCallBack) {};
/**
 * @record
 * @struct
 */
Microsoft.ADAL.PromiseTokenCacheItems = function() {};

/**
 * @param {function(!Array<!Microsoft.ADAL.TokenCacheItem>): ?} doneCallBack
 * @param {function(string): ?=} failCallBack
 * @return {?}
 */
Microsoft.ADAL.PromiseTokenCacheItems.prototype.then = function(doneCallBack, failCallBack) {};
/**
 * @constructor
 * @struct
 */
Microsoft.ADAL.TokenCache = function() {};
 /** @type {string} */
Microsoft.ADAL.TokenCache.prototype.contextAuthority;

/**
 * Clears the cache by deleting all the items.
 * 
 * @return {!Microsoft.ADAL.Promise}
 */
Microsoft.ADAL.TokenCache.prototype.clear = function() {};

/**
 * Gets all cached items.
 * 
 * @return {!Microsoft.ADAL.PromiseTokenCacheItems}
 */
Microsoft.ADAL.TokenCache.prototype.readItems = function() {};

/**
 * Deletes cached item.
 * 
 * 
 * @param {!Microsoft.ADAL.TokenCacheItem} item
 * @return {!Microsoft.ADAL.Promise}
 */
Microsoft.ADAL.TokenCache.prototype.deleteItem = function(item) {};
/**
 * @constructor
 * @struct
 */
Microsoft.ADAL.AuthenticationResult = function() {};
 /** @type {string} */
Microsoft.ADAL.AuthenticationResult.prototype.accessToken;
 /** @type {string} */
Microsoft.ADAL.AuthenticationResult.prototype.accessTokenType;
 /** @type {!Date} */
Microsoft.ADAL.AuthenticationResult.prototype.expiresOn;
 /** @type {string} */
Microsoft.ADAL.AuthenticationResult.prototype.idToken;
 /** @type {boolean} */
Microsoft.ADAL.AuthenticationResult.prototype.isMultipleResourceRefreshToken;
 /** @type {string} */
Microsoft.ADAL.AuthenticationResult.prototype.status;
 /** @type {string} */
Microsoft.ADAL.AuthenticationResult.prototype.statusCode;
 /** @type {string} */
Microsoft.ADAL.AuthenticationResult.prototype.tenantId;
 /** @type {!Microsoft.ADAL.UserInfo} */
Microsoft.ADAL.AuthenticationResult.prototype.userInfo;

/**
 * Creates authorization header for web requests.
 * 
 * @return {string}
 */
Microsoft.ADAL.AuthenticationResult.prototype.createAuthorizationHeader = function() {};
/**
 * @record
 * @struct
 */
Microsoft.ADAL.PromiseAuthenticationResult = function() {};

/**
 * @param {function(!Microsoft.ADAL.AuthenticationResult): ?} doneCallBack
 * @param {function(string): ?=} failCallBack
 * @return {?}
 */
Microsoft.ADAL.PromiseAuthenticationResult.prototype.then = function(doneCallBack, failCallBack) {};
/**
 * @record
 * @struct
 */
Microsoft.ADAL.PromiseAuthenticationContext = function() {};

/**
 * @param {function(!Microsoft.ADAL.AuthenticationContext): ?} doneCallBack
 * @param {function(string): ?=} failCallBack
 * @return {?}
 */
Microsoft.ADAL.PromiseAuthenticationContext.prototype.then = function(doneCallBack, failCallBack) {};

/**
 * @constructor
 * @struct
 * Constructs context to use with known authority to get the token. It reuses existing context
 * for this authority URL in native proxy or creates a new one if it doesn't exists.
 * Corresponding native context will be created at first time when it will be needed.
 * 
 *                                      When context is being created syncronously using this constructor
 *                                      validateAuthority in native context will be disabled to prevent
 *                                      context initialization failure
 * 
 * @param {string} authority
 * @param {boolean=} validateAuthority
 */
Microsoft.ADAL.AuthenticationContext = function(authority, validateAuthority) {};
 /** @type {string} */
Microsoft.ADAL.AuthenticationContext.prototype.authority;
 /** @type {boolean} */
Microsoft.ADAL.AuthenticationContext.prototype.validateAuthority;
 /** @type {!Microsoft.ADAL.TokenCache} */
Microsoft.ADAL.AuthenticationContext.prototype.tokenCache;

/**
 * Constructs context asynchronously to use with known authority to get the token.
 * It reuses existing context for this authority URL in native proxy or creates a new one if it doesn't exists.
 * 
 * 
 * @param {string} authority
 * @param {boolean=} validateAuthority
 * @return {!Microsoft.ADAL.PromiseAuthenticationContext}
 */
Microsoft.ADAL.AuthenticationContext.createAsync = function(authority, validateAuthority) {};

/**
 * Acquires token using interactive flow if needed. It checks the cache to return existing result
 * if not expired. It tries to use refresh token if available. If it fails to get token with
 * refresh token, it will remove this refresh token from cache and start authentication.
 * 
 *                                Extra query parameters (optional)
 *                                Parameters should be escaped before passing to this method (e.g. using 'encodeURI()')
 * 
 * @param {string} resourceUrl
 * @param {string} clientId
 * @param {string} redirectUrl
 * @param {string=} userId
 * @param {string=} extraQueryParameters
 * @return {!Microsoft.ADAL.PromiseAuthenticationResult}
 */
Microsoft.ADAL.AuthenticationContext.prototype.acquireTokenAsync = function(resourceUrl, clientId, redirectUrl, userId, extraQueryParameters) {};

/**
 * Acquires token WITHOUT using interactive flow. It checks the cache to return existing result
 * if not expired. It tries to use refresh token if available. If it fails to get token without
 * displaying UI it will fail. This method guarantees that no UI will be shown to user.
 * 
 * 
 * @param {string} resourceUrl
 * @param {string} clientId
 * @param {string} userId
 * @return {!Microsoft.ADAL.PromiseAuthenticationResult}
 */
Microsoft.ADAL.AuthenticationContext.prototype.acquireTokenSilentAsync = function(resourceUrl, clientId, userId) {};
