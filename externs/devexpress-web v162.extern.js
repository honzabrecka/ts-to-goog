/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/devexpress-web v162/index.d.ts:
/**
 * @record
 * @struct
 */
function MVCxClientDashboardViewer() {}
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemUnderlyingData() {}

/**
 * Gets the number of rows in the underlying data set.
 * @return {number}
 */
ASPxClientDashboardItemUnderlyingData.prototype.GetRowCount = function() {};

/**
 * Returns the value of the specified cell within the underlying data set.
 * @param {number} rowIndex An integer value that specifies the zero-based index of the required row.
 * @param {string} dataMember A String that specifies the required data member.
 * @return {!Object}
 */
ASPxClientDashboardItemUnderlyingData.prototype.GetRowValue = function(rowIndex, dataMember) {};

/**
 * Returns an array of data members available in a data source.
 * @return {!Array<string>}
 */
ASPxClientDashboardItemUnderlyingData.prototype.GetDataMembers = function() {};

/**
 * Returns whether or not a request for underlying data was successful.
 * @return {boolean}
 */
ASPxClientDashboardItemUnderlyingData.prototype.IsDataReceived = function() {};

/**
 * Returns a callstack containing the error caused by an unsuccessful request for underlying data.
 * @return {string}
 */
ASPxClientDashboardItemUnderlyingData.prototype.GetRequestDataError = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemRequestUnderlyingDataParameters() {}
 /** @type {!Array<string>} */
ASPxClientDashboardItemRequestUnderlyingDataParameters.prototype.DataMembers;
 /** @type {!Array<!ASPxClientDashboardItemDataAxisPoint>} */
ASPxClientDashboardItemRequestUnderlyingDataParameters.prototype.AxisPoints;
 /** @type {!Object} */
ASPxClientDashboardItemRequestUnderlyingDataParameters.prototype.ValuesByAxisName;
 /** @type {!Object} */
ASPxClientDashboardItemRequestUnderlyingDataParameters.prototype.UniqueValuesByAxisName;
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemRequestUnderlyingDataCompleted() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemClickEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientDashboardItemClickEventArgs() {}
 /** @type {string} */
ASPxClientDashboardItemClickEventArgs.prototype.ItemName;

/**
 * Gets the dashboard item's client data.
 * @return {!ASPxClientDashboardItemData}
 */
ASPxClientDashboardItemClickEventArgs.prototype.GetData = function() {};

/**
 * Returns the axis point corresponding to the clicked visual element.
 * @param {string} axisName A string value returned by the DashboardDataAxisNames class that specifies the name of the data axis.
 * @return {!ASPxClientDashboardItemDataAxisPoint}
 */
ASPxClientDashboardItemClickEventArgs.prototype.GetAxisPoint = function(axisName) {};

/**
 * Gets measures corresponding to the clicked visual element.
 * @return {!Array<!ASPxClientDashboardItemDataMeasure>}
 */
ASPxClientDashboardItemClickEventArgs.prototype.GetMeasures = function() {};

/**
 * Gets deltas corresponding to the clicked visual element.
 * @return {!Array<!ASPxClientDashboardItemDataDelta>}
 */
ASPxClientDashboardItemClickEventArgs.prototype.GetDeltas = function() {};

/**
 * Gets the dimensions used to create a hierarchy of axis points for the specified axis.
 * @param {string} axisName A string value returned by the DashboardDataAxisNames class that specifies the name of the data axis.
 * @return {!Array<!ASPxClientDashboardItemDataDimension>}
 */
ASPxClientDashboardItemClickEventArgs.prototype.GetDimensions = function(axisName) {};

/**
 * Requests underlying data corresponding to the clicked visual element.
 * @param {!ASPxClientDashboardItemRequestUnderlyingDataCompleted} onCompleted A ASPxClientDashboardItemRequestUnderlyingDataCompleted object that references a method executed after the request is completed.
 * @param {!Array<string>} dataMembers An array of String values that specify data members used to obtain underlying data.
 * @return {void}
 */
ASPxClientDashboardItemClickEventArgs.prototype.RequestUnderlyingData = function(onCompleted, dataMembers) {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemVisualInteractivityEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientDashboardItemVisualInteractivityEventArgs() {}
 /** @type {string} */
ASPxClientDashboardItemVisualInteractivityEventArgs.prototype.ItemName;

/**
 * Gets the selection mode for dashboard item elements.
 * @return {string}
 */
ASPxClientDashboardItemVisualInteractivityEventArgs.prototype.GetSelectionMode = function() {};

/**
 * Sets the selection mode for dashboard item elements.
 * @param {string} selectionMode A String that specifies the selection mode.
 * @return {void}
 */
ASPxClientDashboardItemVisualInteractivityEventArgs.prototype.SetSelectionMode = function(selectionMode) {};

/**
 * Returns whether or not highlighting is enabled for the current dashboard item.
 * @return {boolean}
 */
ASPxClientDashboardItemVisualInteractivityEventArgs.prototype.IsHighlightingEnabled = function() {};

/**
 * Enables highlighting for the current dashboard item.
 * @param {boolean} enableHighlighting true, to enable highlighting; otherwise, false.
 * @return {void}
 */
ASPxClientDashboardItemVisualInteractivityEventArgs.prototype.EnableHighlighting = function(enableHighlighting) {};

/**
 * Gets data axes used to perform custom interactivity actions.
 * @return {!Array<string>}
 */
ASPxClientDashboardItemVisualInteractivityEventArgs.prototype.GetTargetAxes = function() {};

/**
 * Sets data axes used to perform custom interactivity actions.
 * @param {!Array<string>} targetAxes An array of String objects that specify names of data axes.
 * @return {void}
 */
ASPxClientDashboardItemVisualInteractivityEventArgs.prototype.SetTargetAxes = function(targetAxes) {};

/**
 * Gets the default selection for the current dashboard item.
 * @return {!Array<!ASPxClientDashboardItemDataAxisPointTuple>}
 */
ASPxClientDashboardItemVisualInteractivityEventArgs.prototype.GetDefaultSelection = function() {};

/**
 * Sets the default selection for the current dashboard item.
 * @param {!Array<!ASPxClientDashboardItemDataAxisPointTuple>} values An array of ASPxClientDashboardItemDataAxisPointTuple objects specifying axis point tuples used to select default elements.
 * @return {void}
 */
ASPxClientDashboardItemVisualInteractivityEventArgs.prototype.SetDefaultSelection = function(values) {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemSelectionChangedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientDashboardItemSelectionChangedEventArgs() {}
 /** @type {string} */
ASPxClientDashboardItemSelectionChangedEventArgs.prototype.ItemName;

/**
 * Gets currently selected elements.
 * @return {!Array<!ASPxClientDashboardItemDataAxisPointTuple>}
 */
ASPxClientDashboardItemSelectionChangedEventArgs.prototype.GetCurrentSelection = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemElementCustomColorEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientDashboardItemElementCustomColorEventArgs() {}
 /** @type {string} */
ASPxClientDashboardItemElementCustomColorEventArgs.prototype.ItemName;

/**
 * Gets the axis point tuple that corresponds to the current dashboard item element.
 * @return {!ASPxClientDashboardItemDataAxisPointTuple}
 */
ASPxClientDashboardItemElementCustomColorEventArgs.prototype.GetTargetElement = function() {};

/**
 * Gets the color of the current dashboard item element.
 * @return {string}
 */
ASPxClientDashboardItemElementCustomColorEventArgs.prototype.GetColor = function() {};

/**
 * Sets the color of the current dashboard item element.
 * @param {string} color A String that specifies the color of the current dashboard item element.
 * @return {void}
 */
ASPxClientDashboardItemElementCustomColorEventArgs.prototype.SetColor = function(color) {};

/**
 * Gets measures corresponding to the current dashboard item element.
 * @return {!Array<!ASPxClientDashboardItemDataMeasure>}
 */
ASPxClientDashboardItemElementCustomColorEventArgs.prototype.GetMeasures = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemWidgetCreatedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemWidgetUpdatingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemWidgetUpdatedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemBeforeWidgetDisposedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientDashboardItemWidgetEventArgs() {}
 /** @type {string} */
ASPxClientDashboardItemWidgetEventArgs.prototype.ItemName;

/**
 * Returns an underlying widget corresponding to the current dashboard item.
 * @return {!Object}
 */
ASPxClientDashboardItemWidgetEventArgs.prototype.GetWidget = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemData() {}

/**
 * Gets the names of the axes that constitute the current ASPxClientDashboardItemData.
 * @return {!Array<string>}
 */
ASPxClientDashboardItemData.prototype.GetAxisNames = function() {};

/**
 * Returns the specified data axis.
 * @param {string} axisName A string value returned by the DashboardDataAxisNames class that specifies the name of the data axis.
 * @return {!ASPxClientDashboardItemDataAxis}
 */
ASPxClientDashboardItemData.prototype.GetAxis = function(axisName) {};

/**
 * Gets the dimensions used to create a hierarchy of axis points for the specified axis.
 * @param {string} axisName A string value returned by the DashboardDataAxisNames class that specifies the name of the data axis.
 * @return {!Array<!ASPxClientDashboardItemDataDimension>}
 */
ASPxClientDashboardItemData.prototype.GetDimensions = function(axisName) {};

/**
 * Gets the measures for the current ASPxClientDashboardItemData object.
 * @return {!Array<!ASPxClientDashboardItemDataMeasure>}
 */
ASPxClientDashboardItemData.prototype.GetMeasures = function() {};

/**
 * Gets the deltas for the current ASPxClientDashboardItemData object.
 * @return {!Array<!ASPxClientDashboardItemDataDelta>}
 */
ASPxClientDashboardItemData.prototype.GetDeltas = function() {};

/**
 * Gets the slice of the current ASPxClientDashboardItemData object by the specified axis point tuple.
 * Gets the slice of the current ASPxClientDashboardItemData object by the specified axis point.
 * @param {!ASPxClientDashboardItemDataAxisPointTuple|!ASPxClientDashboardItemDataAxisPoint} tuple_or_axisPoint A ASPxClientDashboardItemDataAxisPointTuple object that is a tuple of axis points. / An ASPxClientDashboardItemDataAxisPoint object that is the data point in a multidimensional space.
 * @return {!ASPxClientDashboardItemData}
 */
ASPxClientDashboardItemData.prototype.GetSlice = function(tuple_or_axisPoint) {};

/**
 * Returns a total summary value for the specified measure.
 * @param {string} measureId A String that is the measure identifier.
 * @return {!ASPxClientDashboardItemDataMeasureValue}
 */
ASPxClientDashboardItemData.prototype.GetMeasureValue = function(measureId) {};

/**
 * Gets the summary value for the specified delta.
 * @param {string} deltaId A String that is the data item identifier.
 * @return {!ASPxClientDashboardItemDataDeltaValue}
 */
ASPxClientDashboardItemData.prototype.GetDeltaValue = function(deltaId) {};

/**
 * Returns an array of data members available in a data source.
 * @return {!Array<string>}
 */
ASPxClientDashboardItemData.prototype.GetDataMembers = function() {};

/**
 * Creates a tuple based on the specified axes names and corresponding values.
 * Creates a tuple based on the specified axis points.
 * @param {!Array<!Object>|!Array<!ASPxClientDashboardItemDataAxisPoint>} values_or_axisPoints An array of name-value pairs containing the axis name and corresponding values. / An array of ASPxClientDashboardItemDataAxisPoint objects that specify axis points belonging to different data axes.
 * @return {!ASPxClientDashboardItemDataAxisPointTuple}
 */
ASPxClientDashboardItemData.prototype.CreateTuple = function(values_or_axisPoints) {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemDataAxis() {}

/**
 * Gets the dimensions used to create a hierarchy of axis points belonging to the current axis.
 * @return {!Array<!ASPxClientDashboardItemDataDimension>}
 */
ASPxClientDashboardItemDataAxis.prototype.GetDimensions = function() {};

/**
 * Gets the root axis point belonging to the current ASPxClientDashboardItemDataAxis.
 * @return {!ASPxClientDashboardItemDataAxisPoint}
 */
ASPxClientDashboardItemDataAxis.prototype.GetRootPoint = function() {};

/**
 * Returns axis points corresponding to values of the last-level dimension.
 * @return {!Array<!ASPxClientDashboardItemDataAxisPoint>}
 */
ASPxClientDashboardItemDataAxis.prototype.GetPoints = function() {};

/**
 * Returns axis points corresponding to the specified dimension.
 * @param {string} dimensionId A String that is the dimension identifier.
 * @return {!Array<!ASPxClientDashboardItemDataAxisPoint>}
 */
ASPxClientDashboardItemDataAxis.prototype.GetPointsByDimension = function(dimensionId) {};

/**
 * Returns the data point for the specified axis by unique values.
 * @param {!Array<!Object>} uniqueValues A hierarchy of unique values identifying the required data point.
 * @return {!ASPxClientDashboardItemDataAxisPoint}
 */
ASPxClientDashboardItemDataAxis.prototype.GetPointByUniqueValues = function(uniqueValues) {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemDataDimension() {}
 /** @type {string} */
ASPxClientDashboardItemDataDimension.prototype.Id;
 /** @type {string} */
ASPxClientDashboardItemDataDimension.prototype.Name;
 /** @type {string} */
ASPxClientDashboardItemDataDimension.prototype.DataMember;
 /** @type {string} */
ASPxClientDashboardItemDataDimension.prototype.DateTimeGroupInterval;
 /** @type {string} */
ASPxClientDashboardItemDataDimension.prototype.TextGroupInterval;

/**
 * Formats the specified value using format settings of the current dimension.
 * @param {!Object} value A value to be formatted.
 * @return {string}
 */
ASPxClientDashboardItemDataDimension.prototype.Format = function(value) {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemDataMeasure() {}
 /** @type {string} */
ASPxClientDashboardItemDataMeasure.prototype.Id;
 /** @type {string} */
ASPxClientDashboardItemDataMeasure.prototype.Name;
 /** @type {string} */
ASPxClientDashboardItemDataMeasure.prototype.DataMember;
 /** @type {string} */
ASPxClientDashboardItemDataMeasure.prototype.SummaryType;

/**
 * Formats the specified value using format settings of the current measure.
 * @param {!Object} value A value to be formatted.
 * @return {string}
 */
ASPxClientDashboardItemDataMeasure.prototype.Format = function(value) {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemDataDelta() {}
 /** @type {string} */
ASPxClientDashboardItemDataDelta.prototype.Id;
 /** @type {string} */
ASPxClientDashboardItemDataDelta.prototype.Name;
 /** @type {string} */
ASPxClientDashboardItemDataDelta.prototype.ActualMeasureId;
 /** @type {string} */
ASPxClientDashboardItemDataDelta.prototype.TargetMeasureId;
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemDataDimensionValue() {}

/**
 * Gets the current dimension value.
 * @return {!Object}
 */
ASPxClientDashboardItemDataDimensionValue.prototype.GetValue = function() {};

/**
 * Gets the unique value for the current dimension value.
 * @return {!Object}
 */
ASPxClientDashboardItemDataDimensionValue.prototype.GetUniqueValue = function() {};

/**
 * Gets the display text for the current dimension value.
 * @return {string}
 */
ASPxClientDashboardItemDataDimensionValue.prototype.GetDisplayText = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemDataMeasureValue() {}

/**
 * Gets the measure value.
 * @return {!Object}
 */
ASPxClientDashboardItemDataMeasureValue.prototype.GetValue = function() {};

/**
 * Gets the measure display text.
 * @return {string}
 */
ASPxClientDashboardItemDataMeasureValue.prototype.GetDisplayText = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemDataDeltaValue() {}

/**
 * Provides access to the actual value displayed within the delta element.
 * @return {!ASPxClientDashboardItemDataMeasureValue}
 */
ASPxClientDashboardItemDataDeltaValue.prototype.GetActualValue = function() {};

/**
 * Provides access to the target value.
 * @return {!ASPxClientDashboardItemDataMeasureValue}
 */
ASPxClientDashboardItemDataDeltaValue.prototype.GetTargetValue = function() {};

/**
 * Provides access to the absolute difference between the actual and target values.
 * @return {!ASPxClientDashboardItemDataMeasureValue}
 */
ASPxClientDashboardItemDataDeltaValue.prototype.GetAbsoluteVariation = function() {};

/**
 * Provides access to the percent of variation between the actual and target values.
 * @return {!ASPxClientDashboardItemDataMeasureValue}
 */
ASPxClientDashboardItemDataDeltaValue.prototype.GetPercentVariation = function() {};

/**
 * Provides access to the percentage of the actual value in the target value.
 * @return {!ASPxClientDashboardItemDataMeasureValue}
 */
ASPxClientDashboardItemDataDeltaValue.prototype.GetPercentOfTarget = function() {};

/**
 * Provides access to the main delta value.
 * @return {!ASPxClientDashboardItemDataMeasureValue}
 */
ASPxClientDashboardItemDataDeltaValue.prototype.GetDisplayValue = function() {};

/**
 * Provides access to the first additional delta value.
 * @return {!ASPxClientDashboardItemDataMeasureValue}
 */
ASPxClientDashboardItemDataDeltaValue.prototype.GetDisplaySubValue1 = function() {};

/**
 * Provides access to the second additional delta value.
 * @return {!ASPxClientDashboardItemDataMeasureValue}
 */
ASPxClientDashboardItemDataDeltaValue.prototype.GetDisplaySubValue2 = function() {};

/**
 * Gets the value specifying the condition for displaying the delta indication.
 * @return {!ASPxClientDashboardItemDataMeasureValue}
 */
ASPxClientDashboardItemDataDeltaValue.prototype.GetIsGood = function() {};

/**
 * Gets the type of delta indicator.
 * @return {!ASPxClientDashboardItemDataMeasureValue}
 */
ASPxClientDashboardItemDataDeltaValue.prototype.GetIndicatorType = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemDataAxisPoint() {}

/**
 * Gets the name of the axis to which the current axis point belongs.
 * @return {string}
 */
ASPxClientDashboardItemDataAxisPoint.prototype.GetAxisName = function() {};

/**
 * Gets the last level dimension corresponding to the current axis point.
 * @return {!ASPxClientDashboardItemDataDimension}
 */
ASPxClientDashboardItemDataAxisPoint.prototype.GetDimension = function() {};

/**
 * Gets the collection of dimensions used to create a hierarchy of axis points from the root point to the current axis point.
 * @return {!Array<!ASPxClientDashboardItemDataDimension>}
 */
ASPxClientDashboardItemDataAxisPoint.prototype.GetDimensions = function() {};

/**
 * Gets the value corresponding to the current axis point.
 * @return {!Object}
 */
ASPxClientDashboardItemDataAxisPoint.prototype.GetValue = function() {};

/**
 * Gets the display text corresponding to the current axis point.
 * @return {string}
 */
ASPxClientDashboardItemDataAxisPoint.prototype.GetDisplayText = function() {};

/**
 * Gets the unique value corresponding to the current axis point.
 * @return {!Object}
 */
ASPxClientDashboardItemDataAxisPoint.prototype.GetUniqueValue = function() {};

/**
 * Gets the dimension values at the specified axis point.
 * Gets the dimension value at the current axis point.
 * @param {string=} dimensionId A String value that specifies the dimension identifier.
 * @return {!ASPxClientDashboardItemDataDimensionValue}
 */
ASPxClientDashboardItemDataAxisPoint.prototype.GetDimensionValue = function(dimensionId) {};

/**
 * Gets the child axis points for the current axis point.
 * @return {!Array<!ASPxClientDashboardItemDataAxisPoint>}
 */
ASPxClientDashboardItemDataAxisPoint.prototype.GetChildren = function() {};

/**
 * Gets the parent axis point for the current axis point.
 * @return {!ASPxClientDashboardItemDataAxisPoint}
 */
ASPxClientDashboardItemDataAxisPoint.prototype.GetParent = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemDataAxisPointTuple() {}

/**
 * Returns the axis point belonging to the default data axis.
 * Returns the axis point belonging to the specified data axis.
 * @param {string=} axisName A string value returned by the DashboardDataAxisNames class that specifies the name of the data axis.
 * @return {!ASPxClientDashboardItemDataAxisPoint}
 */
ASPxClientDashboardItemDataAxisPointTuple.prototype.GetAxisPoint = function(axisName) {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardRangeFilterSelection() {}
 /** @type {!Object} */
ASPxClientDashboardRangeFilterSelection.prototype.Maximum;
 /** @type {!Object} */
ASPxClientDashboardRangeFilterSelection.prototype.Minimum;
/**
 * @record
 * @struct
 */
function ASPxClientDashboardParameters() {}

/**
 * Returns an array of dashboard parameters from the ASPxClientDashboardParameters collection.
 * @return {!Array<!ASPxClientDashboardParameter>}
 */
ASPxClientDashboardParameters.prototype.GetParameterList = function() {};

/**
 * Returns a dashboard parameter by its name.
 * @param {string} name A String object that specifies the parameter name.
 * @return {!ASPxClientDashboardParameter}
 */
ASPxClientDashboardParameters.prototype.GetParameterByName = function(name) {};

/**
 * Returns a dashboard parameter by its index in the ASPxClientDashboardParameters collection.
 * @param {number} index An integer value that specifies the parameter index.
 * @return {!ASPxClientDashboardParameter}
 */
ASPxClientDashboardParameters.prototype.GetParameterByIndex = function(index) {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardParameter() {}
 /** @type {string} */
ASPxClientDashboardParameter.prototype.Name;
 /** @type {!Object} */
ASPxClientDashboardParameter.prototype.Value;

/**
 * Returns a parameter name.
 * @return {string}
 */
ASPxClientDashboardParameter.prototype.GetName = function() {};

/**
 * Returns a current parameter value(s).
 * @return {!Object}
 */
ASPxClientDashboardParameter.prototype.GetValue = function() {};

/**
 * Specifies the current parameter value(s).
 * @param {!Object} value The current parameter value(s).
 * @return {void}
 */
ASPxClientDashboardParameter.prototype.SetValue = function(value) {};

/**
 * Returns a default parameter value.
 * @return {!Object}
 */
ASPxClientDashboardParameter.prototype.GetDefaultValue = function() {};

/**
 * Returns the parameter's description displayed to an end-user.
 * @return {string}
 */
ASPxClientDashboardParameter.prototype.GetDescription = function() {};

/**
 * Returns a parameter type.
 * @return {string}
 */
ASPxClientDashboardParameter.prototype.GetType = function() {};

/**
 * Returns possible parameter values.
 * @return {!Array<!ASPxClientDashboardParameterValue>}
 */
ASPxClientDashboardParameter.prototype.GetValues = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardParameterValue() {}

/**
 * Returns the parameter display text.
 * @return {string}
 */
ASPxClientDashboardParameterValue.prototype.GetDisplayText = function() {};

/**
 * Returns a parameter value.
 * @return {!Object}
 */
ASPxClientDashboardParameterValue.prototype.GetValue = function() {};
/**
 * @record
 * @struct
 */
function ImageFormatOptions() {}
 /** @type {string} */
ImageFormatOptions.prototype.Format;
 /** @type {number} */
ImageFormatOptions.prototype.Resolution;
/**
 * @record
 * @struct
 */
function ExcelFormatOptions() {}
 /** @type {string} */
ExcelFormatOptions.prototype.Format;
 /** @type {string} */
ExcelFormatOptions.prototype.CsvValueSeparator;
/**
 * @record
 * @struct
 */
function GridExportOptions() {}
 /** @type {boolean} */
GridExportOptions.prototype.FitToPageWidth;
 /** @type {boolean} */
GridExportOptions.prototype.PrintHeadersOnEveryPage;
/**
 * @record
 * @struct
 */
function PivotExportOptions() {}
 /** @type {boolean} */
PivotExportOptions.prototype.PrintHeadersOnEveryPage;
/**
 * @record
 * @struct
 */
function PieExportOptions() {}
 /** @type {boolean} */
PieExportOptions.prototype.AutoArrangeContent;
/**
 * @record
 * @struct
 */
function GaugeExportOptions() {}
 /** @type {boolean} */
GaugeExportOptions.prototype.AutoArrangeContent;
/**
 * @record
 * @struct
 */
function CardExportOptions() {}
 /** @type {boolean} */
CardExportOptions.prototype.AutoArrangeContent;
/**
 * @record
 * @struct
 */
function RangeFilterExportOptions() {}
 /** @type {boolean} */
RangeFilterExportOptions.prototype.AutomaticPageLayout;
 /** @type {string} */
RangeFilterExportOptions.prototype.SizeMode;
/**
 * @record
 * @struct
 */
function ChartExportOptions() {}
 /** @type {boolean} */
ChartExportOptions.prototype.AutomaticPageLayout;
 /** @type {string} */
ChartExportOptions.prototype.SizeMode;
/**
 * @record
 * @struct
 */
function MapExportOptions() {}
 /** @type {boolean} */
MapExportOptions.prototype.AutomaticPageLayout;
 /** @type {string} */
MapExportOptions.prototype.SizeMode;
/**
 * @record
 * @struct
 */
function ASPxClientDashboardExportOptions() {}
 /** @type {string} */
ASPxClientDashboardExportOptions.prototype.PaperKind;
 /** @type {string} */
ASPxClientDashboardExportOptions.prototype.PageLayout;
 /** @type {string} */
ASPxClientDashboardExportOptions.prototype.ScaleMode;
 /** @type {number} */
ASPxClientDashboardExportOptions.prototype.ScaleFactor;
 /** @type {number} */
ASPxClientDashboardExportOptions.prototype.AutoFitPageCount;
 /** @type {string} */
ASPxClientDashboardExportOptions.prototype.Title;
 /** @type {boolean} */
ASPxClientDashboardExportOptions.prototype.ShowTitle;
 /** @type {string} */
ASPxClientDashboardExportOptions.prototype.FilterState;
 /** @type {!ImageFormatOptions} */
ASPxClientDashboardExportOptions.prototype.ImageOptions;
 /** @type {!ExcelFormatOptions} */
ASPxClientDashboardExportOptions.prototype.ExcelOptions;
 /** @type {!GridExportOptions} */
ASPxClientDashboardExportOptions.prototype.GridOptions;
 /** @type {!PivotExportOptions} */
ASPxClientDashboardExportOptions.prototype.PivotOptions;
 /** @type {!PieExportOptions} */
ASPxClientDashboardExportOptions.prototype.PieOptions;
 /** @type {!GaugeExportOptions} */
ASPxClientDashboardExportOptions.prototype.GaugeOptions;
 /** @type {!CardExportOptions} */
ASPxClientDashboardExportOptions.prototype.CardOptions;
 /** @type {!RangeFilterExportOptions} */
ASPxClientDashboardExportOptions.prototype.RangeFilterOptions;
 /** @type {!ChartExportOptions} */
ASPxClientDashboardExportOptions.prototype.ChartOptions;
 /** @type {!MapExportOptions} */
ASPxClientDashboardExportOptions.prototype.MapOptions;
/**
 * @record
 * @struct
 */
function ASPxClientDashboard() {}
 /** @type {!ASPxClientEvent<!ASPxClientCustomDataCallbackEventHandler<?>>} */
ASPxClientDashboard.prototype.CustomDataCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientDashboard.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientDashboard.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardStateChangedEventHandler<?>>} */
ASPxClientDashboard.prototype.DashboardStateChanged;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardChangedEventHandler<?>>} */
ASPxClientDashboard.prototype.DashboardChanged;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardCustomizeMenuItemsEventHandler<?>>} */
ASPxClientDashboard.prototype.CustomizeMenuItems;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardBeforeRenderEventHandler<?>>} */
ASPxClientDashboard.prototype.BeforeRender;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardItemClickEventHandler<?>>} */
ASPxClientDashboard.prototype.ItemClick;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardItemVisualInteractivityEventHandler<?>>} */
ASPxClientDashboard.prototype.ItemVisualInteractivity;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardItemWidgetCreatedEventHandler<?>>} */
ASPxClientDashboard.prototype.ItemWidgetCreated;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardItemWidgetUpdatingEventHandler<?>>} */
ASPxClientDashboard.prototype.ItemWidgetUpdating;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardItemWidgetUpdatedEventHandler<?>>} */
ASPxClientDashboard.prototype.ItemWidgetUpdated;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardItemBeforeWidgetDisposedEventHandler<?>>} */
ASPxClientDashboard.prototype.ItemBeforeWidgetDisposed;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardItemSelectionChangedEventHandler<?>>} */
ASPxClientDashboard.prototype.ItemSelectionChanged;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardItemElementCustomColorEventHandler<?>>} */
ASPxClientDashboard.prototype.ItemElementCustomColor;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardItemMasterFilterStateChangedEventHandler<?>>} */
ASPxClientDashboard.prototype.ItemMasterFilterStateChanged;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardItemDrillDownStateChangedEventHandler<?>>} */
ASPxClientDashboard.prototype.ItemDrillDownStateChanged;

/**
 * Sends a callback to the server and generates the server-side CustomDataCallback event, passing it the specified argument.
 * @param {string} parameter A string value that represents any information that needs to be sent to the server-side CustomDataCallback event.
 * @param {!ASPxClientDataCallback} onCallback A ASPxClientDataCallback object that represents the JavaScript function which receives the callback data as a parameter.
 * @return {void}
 */
ASPxClientDashboard.prototype.PerformDataCallback = function(parameter, onCallback) {};

/**
 * Switches the ASPxClientDashboard to the viewer mode.
 * @return {void}
 */
ASPxClientDashboard.prototype.SwitchToViewer = function() {};

/**
 * Switches the ASPxClientDashboard to the designer mode.
 * @return {void}
 */
ASPxClientDashboard.prototype.SwitchToDesigner = function() {};

/**
 * Gets the current working mode of the Web Dashboard.
 * @return {string}
 */
ASPxClientDashboard.prototype.GetWorkingMode = function() {};

/**
 * Gets the identifier of the dashboard that is displayed in the ASPxClientDashboard.
 * @return {string}
 */
ASPxClientDashboard.prototype.GetDashboardId = function() {};

/**
 * Gets the name of the dashboard that is displayed in the ASPxClientDashboard.
 * @return {string}
 */
ASPxClientDashboard.prototype.GetDashboardName = function() {};

/**
 * Gets the state of the dashboard displayed in the ASPxClientDashboard.
 * @return {string}
 */
ASPxClientDashboard.prototype.GetDashboardState = function() {};

/**
 * Loads a dashboard with the specified identifier.
 * @param {string} dashboardId A String value that specifies the dashboard identifier.
 * @return {void}
 */
ASPxClientDashboard.prototype.LoadDashboard = function(dashboardId) {};

/**
 * Saves a current dashboard to the dashboard storage.
 * @return {void}
 */
ASPxClientDashboard.prototype.SaveDashboard = function() {};

/**
 * Invokes the Dashboard Parameters dialog.
 * @return {void}
 */
ASPxClientDashboard.prototype.ShowParametersDialog = function() {};

/**
 * Closes the Dashboard Parameters dialog.
 * @return {void}
 */
ASPxClientDashboard.prototype.HideParametersDialog = function() {};

/**
 * Returns dashboard parameter settings and metadata.
 * @return {!ASPxClientDashboardParameters}
 */
ASPxClientDashboard.prototype.GetParameters = function() {};

/**
 * Invokes the dialog that allows end-users to export the entire dashboard to the specified format.
 * @param {string} format A string value that specifies the format. For instance, you can use 'PDF' or 'Image'.
 * @return {void}
 */
ASPxClientDashboard.prototype.ShowExportDashboardDialog = function(format) {};

/**
 * Invokes the dialog that allows end-users to export the dashboard item to the specified format.
 * @param {string} itemComponentName A string value that specifies the component name of the dashboard item to export.
 * @param {string} format A string value that specifies the format. For instance, you can use 'PDF, 'Image' or 'Excel'.
 * @return {void}
 */
ASPxClientDashboard.prototype.ShowExportDashboardItemDialog = function(itemComponentName, format) {};

/**
 * Hides the dialog that allows end-users to export the dashboard/dashboard item.
 * @return {void}
 */
ASPxClientDashboard.prototype.HideExportDialog = function() {};

/**
 * Returns settings that specify parameters affecting how the dashboard is exported.
 * @return {!ASPxClientDashboardExportOptions}
 */
ASPxClientDashboard.prototype.GetExportOptions = function() {};

/**
 * Specifies settings that specify parameters affecting how the dashboard is exported.
 * @param {!ASPxClientDashboardExportOptions} options A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
 * @return {void}
 */
ASPxClientDashboard.prototype.SetExportOptions = function(options) {};

/**
 * Exports a dashboard to a PDF file and writes it to the Response.
 * Exports a dashboard to a PDF file with the specified export options and writes it to the Response.
 * Exports a dashboard to a PDF file with the specified export options and writes it to the Response.
 * @param {!ASPxClientDashboardExportOptions=} options A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
 * @param {string=} fileName A string that specifies the name of the exported file.
 * @return {void}
 */
ASPxClientDashboard.prototype.ExportToPdf = function(options, fileName) {};

/**
 * Exports a dashboard to an Image file and writes it to the Response.
 * Exports a dashboard to an Image file with the specified export options and writes it to the Response.
 * Exports a dashboard to an Image file with the specified export options and writes it to the Response.
 * @param {!ASPxClientDashboardExportOptions=} options A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
 * @param {string=} fileName A string that specifies the name of the exported file.
 * @return {void}
 */
ASPxClientDashboard.prototype.ExportToImage = function(options, fileName) {};

/**
 * Exports a dashboard item to a PDF file and writes it to the Response.
 * Exports a dashboard item to a PDF file with the specified export options and writes it to the Response.
 * Exports a dashboard item to a PDF file with the specified export options and writes it to the Response.
 * @param {string} itemName A string that is the component name of the dashboard item to be exported.
 * @param {!ASPxClientDashboardExportOptions=} options An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
 * @param {string=} fileName A string that specifies the name of the exported file.
 * @return {void}
 */
ASPxClientDashboard.prototype.ExportDashboardItemToPdf = function(itemName, options, fileName) {};

/**
 * Exports a dashboard item to an Image file and writes it to the Response.
 * Exports a dashboard item to an Image file with the specified export options and writes it to the Response.
 * Exports a dashboard item to an Image file with the specified export options and writes it to the Response.
 * @param {string} itemName A string that is the component name of the dashboard item to be exported.
 * @param {!ASPxClientDashboardExportOptions=} options An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
 * @param {string=} fileName A string value that specifies the name of the exported file.
 * @return {void}
 */
ASPxClientDashboard.prototype.ExportDashboardItemToImage = function(itemName, options, fileName) {};

/**
 * Exports a dashboard item to an Excel file and writes it to the Response.
 * Exports a dashboard item to an Excel file with the specified export options and writes it to the Response.
 * Exports a dashboard item to an Excel file with the specified export options and writes it to the Response.
 * @param {string} itemName A string that is the component name of the dashboard item to be exported.
 * @param {!ASPxClientDashboardExportOptions=} options An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
 * @param {string=} fileName A string that specifies the name of the exported Excel file.
 * @return {void}
 */
ASPxClientDashboard.prototype.ExportDashboardItemToExcel = function(itemName, options, fileName) {};

/**
 * Returns whether or not master filtering  can be applied in the current state of the specified master filter item.
 * @param {string} itemName A string that specifies the component name of the master filter item.
 * @return {boolean}
 */
ASPxClientDashboard.prototype.CanSetMasterFilter = function(itemName) {};

/**
 * Returns whether or not the specified master filter can be cleared in the current state.
 * @param {string} itemName A string that specifies the component name of the master filter item.
 * @return {boolean}
 */
ASPxClientDashboard.prototype.CanClearMasterFilter = function(itemName) {};

/**
 * Returns whether or not drill down is possible in the current state of the specified dashboard item.
 * @param {string} itemName A string that specifies the component name of the dashboard item.
 * @return {boolean}
 */
ASPxClientDashboard.prototype.CanPerformDrillDown = function(itemName) {};

/**
 * Returns whether or not drill up is possible in the current state of the specified dashboard item.
 * @param {string} itemName A string that specifies the component name of the dashboard item.
 * @return {boolean}
 */
ASPxClientDashboard.prototype.CanPerformDrillUp = function(itemName) {};

/**
 * Selects required elements by their values in the specified master filter item.
 * Selects the required elements in the specified master filter item.
 * @param {string} itemName A String that specifies the component name of the master filter item. / A String that species the component name of the master filter item.
 * @param {!Array<!Array<!Object>>|!Array<!ASPxClientDashboardItemDataAxisPointTuple>} values_or_axisPointTuples Values that will be used to select elements in the master filter item. / An array of ASPxClientDashboardItemDataAxisPointTuple objects used to identify master filter elements.
 * @return {void}
 */
ASPxClientDashboard.prototype.SetMasterFilter = function(itemName, values_or_axisPointTuples) {};

/**
 * Performs a drill-down into the required element by its value.
 * Performs a drill-down into the required element.
 * @param {string} itemName A String that species the component name of the dashboard item. / A String that specifies the component name of the dashboard item.
 * @param {!Object|!ASPxClientDashboardItemDataAxisPointTuple} value_or_axisPointTuple A value that will be used to perform a drill-down for the required element. / A ASPxClientDashboardItemDataAxisPointTuple object representing a set of axis points.
 * @return {void}
 */
ASPxClientDashboard.prototype.PerformDrillDown = function(itemName, value_or_axisPointTuple) {};

/**
 * Clears the specified master filter item.
 * @param {string} itemName A string that specifies the component name of the master filter item.
 * @return {void}
 */
ASPxClientDashboard.prototype.ClearMasterFilter = function(itemName) {};

/**
 * Performs a drill-up for the specified dashboard item.
 * @param {string} itemName A String that specifies the component name of the dashboard item.
 * @return {void}
 */
ASPxClientDashboard.prototype.PerformDrillUp = function(itemName) {};

/**
 * Returns axis point tuples identifying elements that can be used to perform drill-down in the specified dashboard item.
 * @param {string} itemName A String that is the component name of the dashboard item.
 * @return {!Array<!ASPxClientDashboardItemDataAxisPointTuple>}
 */
ASPxClientDashboard.prototype.GetAvailableDrillDownValues = function(itemName) {};

/**
 * Returns the axis point tuple identifying the current drill-down state.
 * @param {string} itemName A String that is the component name of the dashboard item.
 * @return {!ASPxClientDashboardItemDataAxisPointTuple}
 */
ASPxClientDashboard.prototype.GetCurrentDrillDownValues = function(itemName) {};

/**
 * Returns axis point tuples identifying elements that can be selected in the current state of the master filter item.
 * @param {string} itemName A String that is the component name of the master filter item.
 * @return {!Array<!ASPxClientDashboardItemDataAxisPointTuple>}
 */
ASPxClientDashboard.prototype.GetAvailableFilterValues = function(itemName) {};

/**
 * Returns axis point tuples identifying currently selected elements in the master filter item.
 * @param {string} itemName A String that is the component name of the master filter item.
 * @return {!Array<!ASPxClientDashboardItemDataAxisPointTuple>}
 */
ASPxClientDashboard.prototype.GetCurrentFilterValues = function(itemName) {};

/**
 * Returns currently selected elements in the master filter item.
 * @param {string} itemName A String that specifies a component name of the master filter item.
 * @return {!Array<!ASPxClientDashboardItemDataAxisPointTuple>}
 */
ASPxClientDashboard.prototype.GetCurrentSelection = function(itemName) {};

/**
 * Returns the client data for the specified dashboard item.
 * @param {string} itemName A String that specifies the component name of the dashboard item.
 * @return {!ASPxClientDashboardItemData}
 */
ASPxClientDashboard.prototype.GetItemData = function(itemName) {};

/**
 * Refreshes an entire dashboard displayed in the Web Dashboard control.
 * Refreshes the specific item from the dashboard displayed in the Web Dashboard control.
 * Refreshes specific items from the dashboard displayed in the Web Dashboard control.
 * @param {string|!Array<string>=} itemName A string value that specifies the component name of the dashboard item to be refreshed. / An array of string values that specify the component names of the dashboard items to be refreshed.
 * @return {void}
 */
ASPxClientDashboard.prototype.Refresh = function(itemName) {};

/**
 * Requests underlying data for the specified dashboard item.
 * @param {string} itemName A String that specifies the component name of the dashboard item.
 * @param {!ASPxClientDashboardItemRequestUnderlyingDataParameters} args A ASPxClientDashboardItemRequestUnderlyingDataParameters object containing parameters used to obtain the underlying data.
 * @param {!ASPxClientDashboardItemRequestUnderlyingDataCompleted} onCompleted A ASPxClientDashboardItemRequestUnderlyingDataCompleted object that references a method executed after the request is completed.
 * @return {void}
 */
ASPxClientDashboard.prototype.RequestUnderlyingData = function(itemName, args, onCompleted) {};

/**
 * Returns the currently selected range in the specified Range Filter dashboard item.
 * @param {string} itemName A String value that specifies the component name of the Range Filter dashboard item.
 * @return {!ASPxClientDashboardRangeFilterSelection}
 */
ASPxClientDashboard.prototype.GetCurrentRange = function(itemName) {};

/**
 * Returns the visible range for the specified Range Filter dashboard item.
 * @param {string} itemName A String value that specifies the component name of the Range Filter dashboard item.
 * @return {!ASPxClientDashboardRangeFilterSelection}
 */
ASPxClientDashboard.prototype.GetEntireRange = function(itemName) {};

/**
 * Selects the required range in the specified Range Filter dashboard item.
 * @param {string} itemName A String that specifies the component name of the Range Filter dashboard item.
 * @param {!ASPxClientDashboardRangeFilterSelection} range A String value that specifies the component name of the Range Filter dashboard item.
 * @return {void}
 */
ASPxClientDashboard.prototype.SetRange = function(itemName, range) {};

/**
 * Selects a predefined range in the Range Filter dashboard item.
 * @param {string} itemName A String value that specifies the component name of the Range Filter.
 * @param {string} dateTimePeriodName A String value that specifies the predefined range name.
 * @return {void}
 */
ASPxClientDashboard.prototype.SetPredefinedRange = function(itemName, dateTimePeriodName) {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardStateChangedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientDashboardStateChangedEventArgs() {}
 /** @type {string} */
ASPxClientDashboardStateChangedEventArgs.prototype.DashboardState;
/**
 * @record
 * @struct
 */
function ASPxClientDashboardChangedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientDashboardChangedEventArgs() {}
 /** @type {string} */
ASPxClientDashboardChangedEventArgs.prototype.DashboardId;
 /** @type {string} */
ASPxClientDashboardChangedEventArgs.prototype.DashboardName;
/**
 * @record
 * @struct
 */
function ASPxClientDashboardCustomizeMenuItemsEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientDashboardMenuItem() {}
 /** @type {string} */
ASPxClientDashboardMenuItem.prototype.id;
 /** @type {string} */
ASPxClientDashboardMenuItem.prototype.title;
 /** @type {string} */
ASPxClientDashboardMenuItem.prototype.template;
 /** @type {boolean} */
ASPxClientDashboardMenuItem.prototype.selected;
 /** @type {boolean} */
ASPxClientDashboardMenuItem.prototype.disabled;
 /** @type {boolean} */
ASPxClientDashboardMenuItem.prototype.hasSeparator;
 /** @type {!Function} */
ASPxClientDashboardMenuItem.prototype.click;
 /** @type {number} */
ASPxClientDashboardMenuItem.prototype.hotKey;
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientDashboardCustomizeMenuItemsEventArgs() {}
 /** @type {!Array<!ASPxClientDashboardMenuItem>} */
ASPxClientDashboardCustomizeMenuItemsEventArgs.prototype.Items;

/**
 * @param {string} itemId
 * @return {!ASPxClientDashboardMenuItem}
 */
ASPxClientDashboardCustomizeMenuItemsEventArgs.prototype.FindById = function(itemId) {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardBeforeRenderEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientDashboardItemEventArgs() {}
 /** @type {string} */
ASPxClientDashboardItemEventArgs.prototype.ItemName;

/**
 * Returns whether or not the specified value is null.
 * @param {!Object} value The specified value.
 * @return {boolean}
 */
ASPxClientDashboardItemEventArgs.prototype.IsNullValue = function(value) {};

/**
 * Returns whether or not the specified value is 'others'.
 * @param {!Object} value The specified value.
 * @return {boolean}
 */
ASPxClientDashboardItemEventArgs.prototype.IsOthersValue = function(value) {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemMasterFilterStateChangedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientDashboardItemEventArgs}
 * @record
 * @struct
 */
function ASPxClientDashboardItemMasterFilterStateChangedEventArgs() {}
 /** @type {!Array<!Array<!Object>>} */
ASPxClientDashboardItemMasterFilterStateChangedEventArgs.prototype.Values;
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemDrillDownStateChangedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientDashboardItemEventArgs}
 * @record
 * @struct
 */
function ASPxClientDashboardItemDrillDownStateChangedEventArgs() {}
 /** @type {string} */
ASPxClientDashboardItemDrillDownStateChangedEventArgs.prototype.Action;
 /** @type {!Array<!Object>} */
ASPxClientDashboardItemDrillDownStateChangedEventArgs.prototype.Values;
/**
 * @record
 * @struct
 */
function ASPxClientDashboardViewer() {}
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientDashboardViewer.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientDashboardViewer.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardActionAvailabilityChangedEventHandler<?>>} */
ASPxClientDashboardViewer.prototype.ActionAvailabilityChanged;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardMasterFilterSetEventHandler<?>>} */
ASPxClientDashboardViewer.prototype.MasterFilterSet;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardMasterFilterClearedEventHandler<?>>} */
ASPxClientDashboardViewer.prototype.MasterFilterCleared;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardDataLoadingErrorEventHandler<?>>} */
ASPxClientDashboardViewer.prototype.DataLoadingError;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardDrillDownPerformedEventHandler<?>>} */
ASPxClientDashboardViewer.prototype.DrillDownPerformed;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardDrillUpPerformedEventHandler<?>>} */
ASPxClientDashboardViewer.prototype.DrillUpPerformed;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientDashboardViewer.prototype.Loaded;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardItemClickEventHandler<?>>} */
ASPxClientDashboardViewer.prototype.ItemClick;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardItemVisualInteractivityEventHandler<?>>} */
ASPxClientDashboardViewer.prototype.ItemVisualInteractivity;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardItemWidgetCreatedEventHandler<?>>} */
ASPxClientDashboardViewer.prototype.ItemWidgetCreated;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardItemWidgetUpdatingEventHandler<?>>} */
ASPxClientDashboardViewer.prototype.ItemWidgetUpdating;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardItemWidgetUpdatedEventHandler<?>>} */
ASPxClientDashboardViewer.prototype.ItemWidgetUpdated;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardItemBeforeWidgetDisposedEventHandler<?>>} */
ASPxClientDashboardViewer.prototype.ItemBeforeWidgetDisposed;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardItemSelectionChangedEventHandler<?>>} */
ASPxClientDashboardViewer.prototype.ItemSelectionChanged;
 /** @type {!ASPxClientEvent<!ASPxClientDashboardItemElementCustomColorEventHandler<?>>} */
ASPxClientDashboardViewer.prototype.ItemElementCustomColor;

/**
 * Reloads data in the data sources.
 * Reloads data in the data sources.
 * @param {!Array<!ASPxClientDashboardParameter>=} parameters An array of ASPxClientDashboardParameter objects that specify dashboard parameters on the client side.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.ReloadData = function(parameters) {};

/**
 * Returns dashboard parameter settings and metadata.
 * @return {!ASPxClientDashboardParameters}
 */
ASPxClientDashboardViewer.prototype.GetParameters = function() {};

/**
 * Locks the EndUpdateParameters method call.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.BeginUpdateParameters = function() {};

/**
 * Unlocks the BeginUpdateParameters method and applies changes made to the parameter settings.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.EndUpdateParameters = function() {};

/**
 * Returns the currently selected range in the specified Range Filter dashboard item.
 * @param {string} itemName A String value that specifies the component name of the Range Filter dashboard item.
 * @return {!ASPxClientDashboardRangeFilterSelection}
 */
ASPxClientDashboardViewer.prototype.GetCurrentRange = function(itemName) {};

/**
 * Returns the visible range for the specified Range Filter dashboard item.
 * @param {string} itemName A String value that specifies the component name of the Range Filter dashboard item.
 * @return {!ASPxClientDashboardRangeFilterSelection}
 */
ASPxClientDashboardViewer.prototype.GetEntireRange = function(itemName) {};

/**
 * Selects the required range in the specified Range Filter dashboard item.
 * @param {string} itemName A String that specifies the component name of the Range Filter dashboard item.
 * @param {!ASPxClientDashboardRangeFilterSelection} range A String value that specifies the component name of the Range Filter dashboard item.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.SetRange = function(itemName, range) {};

/**
 * Selects a predefined range in the Range Filter dashboard item.
 * @param {string} itemName A String value that specifies the component name of the Range Filter.
 * @param {string} dateTimePeriodName A String value that specifies the predefined range name.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.SetPredefinedRange = function(itemName, dateTimePeriodName) {};

/**
 * Returns axis point tuples identifying elements that can be used to perform drill-down in the specified dashboard item.
 * @param {string} itemName A String that is the component name of the dashboard item.
 * @return {!Array<!ASPxClientDashboardItemDataAxisPointTuple>}
 */
ASPxClientDashboardViewer.prototype.GetAvailableDrillDownValues = function(itemName) {};

/**
 * Returns the axis point tuple identifying the current drill-down state.
 * @param {string} itemName A String that is the component name of the dashboard item.
 * @return {!ASPxClientDashboardItemDataAxisPointTuple}
 */
ASPxClientDashboardViewer.prototype.GetCurrentDrillDownValues = function(itemName) {};

/**
 * Returns axis point tuples identifying elements that can be selected in the current state of the master filter item.
 * @param {string} itemName A String that is the component name of the master filter item.
 * @return {!Array<!ASPxClientDashboardItemDataAxisPointTuple>}
 */
ASPxClientDashboardViewer.prototype.GetAvailableFilterValues = function(itemName) {};

/**
 * Returns axis point tuples identifying currently selected elements in the master filter item.
 * @param {string} itemName A String that is the component name of the master filter item.
 * @return {!Array<!ASPxClientDashboardItemDataAxisPointTuple>}
 */
ASPxClientDashboardViewer.prototype.GetCurrentFilterValues = function(itemName) {};

/**
 * Returns currently selected elements in the master filter item.
 * @param {string} itemName A String that specifies a component name of the master filter item.
 * @return {!Array<!ASPxClientDashboardItemDataAxisPointTuple>}
 */
ASPxClientDashboardViewer.prototype.GetCurrentSelection = function(itemName) {};

/**
 * Requests underlying data for the specified dashboard item.
 * @param {string} itemName A String that specifies the component name of the dashboard item.
 * @param {!ASPxClientDashboardItemRequestUnderlyingDataParameters} args A ASPxClientDashboardItemRequestUnderlyingDataParameters object containing parameters used to obtain the underlying data.
 * @param {!ASPxClientDashboardItemRequestUnderlyingDataCompleted} onCompleted A ASPxClientDashboardItemRequestUnderlyingDataCompleted object that references a method executed after the request is completed.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.RequestUnderlyingData = function(itemName, args, onCompleted) {};

/**
 * Invokes the Dashboard Parameters dialog.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.ShowParametersDialog = function() {};

/**
 * Closes the Dashboard Parameters dialog.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.HideParametersDialog = function() {};

/**
 * Returns settings that specify parameters affecting how the dashboard is exported.
 * @return {!ASPxClientDashboardExportOptions}
 */
ASPxClientDashboardViewer.prototype.GetExportOptions = function() {};

/**
 * Specifies settings that specify parameters affecting how the dashboard is exported.
 * @param {!ASPxClientDashboardExportOptions} options A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.SetExportOptions = function(options) {};

/**
 * Exports a dashboard to a PDF file and writes it to the Response.
 * Exports a dashboard to a PDF file with the specified export options and writes it to the Response.
 * Exports a dashboard to a PDF file with the specified export options and writes it to the Response.
 * @param {!ASPxClientDashboardExportOptions=} options A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
 * @param {string=} fileName A string that specifies the name of the exported file.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.ExportToPdf = function(options, fileName) {};

/**
 * Exports a dashboard to an Image file and writes it to the Response.
 * Exports a dashboard to an Image file with the specified export options and writes it to the Response.
 * Exports a dashboard to an Image file with the specified export options and writes it to the Response.
 * @param {!ASPxClientDashboardExportOptions=} options A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
 * @param {string=} fileName A string that specifies the name of the exported file.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.ExportToImage = function(options, fileName) {};

/**
 * Exports a dashboard item to a PDF file and writes it to the Response.
 * Exports a dashboard item to a PDF file with the specified export options and writes it to the Response.
 * Exports a dashboard item to a PDF file with the specified export options and writes it to the Response.
 * @param {string} itemName A String that is the component name of the dashboard item to be exported. / A string that is the component name of the dashboard item to be exported.
 * @param {!ASPxClientDashboardExportOptions=} options An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
 * @param {string=} fileName A string that specifies the name of the exported file.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.ExportDashboardItemToPdf = function(itemName, options, fileName) {};

/**
 * Exports a dashboard item to an Image file and writes it to the Response.
 * Exports a dashboard item to an Image file with the specified export options and writes it to the Response.
 * Exports a dashboard item to an Image file with the specified export options and writes it to the Response.
 * @param {string} itemName A String that is the component name of the dashboard item to be exported. / A string that is the component name of the dashboard item to be exported.
 * @param {!ASPxClientDashboardExportOptions=} options An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
 * @param {string=} fileName A string value that specifies the name of the exported file.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.ExportDashboardItemToImage = function(itemName, options, fileName) {};

/**
 * Exports a dashboard item to an Excel file and writes it to the Response.
 * Exports a dashboard item to an Excel file with the specified export options and writes it to the Response.
 * Exports a dashboard item to an Excel file with the specified export options and writes it to the Response.
 * @param {string} itemName A String that is the component name of the dashboard item to be exported. / A string that is the component name of the dashboard item to be exported.
 * @param {!ASPxClientDashboardExportOptions=} options An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item. / An ASPxClientDashboardExportOptions object containing export options.
 * @param {string=} fileName A string that specifies the name of the exported Excel file.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.ExportDashboardItemToExcel = function(itemName, options, fileName) {};

/**
 * Returns the dashboard width.
 * @return {number}
 */
ASPxClientDashboardViewer.prototype.GetWidth = function() {};

/**
 * Returns the dashboard height.
 * @return {number}
 */
ASPxClientDashboardViewer.prototype.GetHeight = function() {};

/**
 * Specifies the dashboard width.
 * @param {number} width An integer value that specifies the dashboard width.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.SetWidth = function(width) {};

/**
 * Specifies the dashboard height.
 * @param {number} height An integer value that specifies the dashboard height.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.SetHeight = function(height) {};

/**
 * Specifies the dashboard size.
 * @param {number} width An integer value that specifies the dashboard width.
 * @param {number} height An integer value that specifies the dashboard height.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.SetSize = function(width, height) {};

/**
 * Selects required elements by their values in the specified master filter item.
 * Selects the required elements in the specified master filter item.
 * @param {string} itemName A String that species the component name of the master filter item. / A String that specifies the component name of the master filter item.
 * @param {!Array<!Array<!Object>>|!Array<!ASPxClientDashboardItemDataAxisPointTuple>} values_or_axisPointTuples Values that will be used to select elements in the master filter item. / An array of ASPxClientDashboardItemDataAxisPointTuple objects used to identify master filter elements.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.SetMasterFilter = function(itemName, values_or_axisPointTuples) {};

/**
 * Performs a drill-down for the required element by its value.
 * Performs a drill-down for the required element.
 * @param {string} itemName A String that species the component name of the dashboard item. / A String that specifies the component name of the dashboard item.
 * @param {!Object|!ASPxClientDashboardItemDataAxisPointTuple} value_or_axisPointTuple A value that will be used to perform a drill-down for the required element. / A ASPxClientDashboardItemDataAxisPointTuple object representing a set of axis points.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.PerformDrillDown = function(itemName, value_or_axisPointTuple) {};

/**
 * Clears the specified master filter item.
 * @param {string} itemName A String that specifies the component name of the master filter item.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.ClearMasterFilter = function(itemName) {};

/**
 * Performs a drill-up for the specified dashboard item.
 * @param {string} itemName A String that specifies the component name of the dashboard item.
 * @return {void}
 */
ASPxClientDashboardViewer.prototype.PerformDrillUp = function(itemName) {};

/**
 * Returns whether or not the specified master filter item allows selecting one or more elements.
 * @param {string} itemName A String that specifies the component name of the master filter item.
 * @return {boolean}
 */
ASPxClientDashboardViewer.prototype.CanSetMasterFilter = function(itemName) {};

/**
 * Returns whether or not the specified master filter can be cleared in the current state.
 * @param {string} itemName A String that specifies the component name of the master filter item.
 * @return {boolean}
 */
ASPxClientDashboardViewer.prototype.CanClearMasterFilter = function(itemName) {};

/**
 * Returns whether or not drill down is possible in the current state of the specified dashboard item.
 * @param {string} itemName A String that specifies the component name of the dashboard item.
 * @return {boolean}
 */
ASPxClientDashboardViewer.prototype.CanPerformDrillDown = function(itemName) {};

/**
 * Returns whether or not drill up is possible in the current state of the specified dashboard item.
 * @param {string} itemName A String that specifies the component name of the dashboard item.
 * @return {boolean}
 */
ASPxClientDashboardViewer.prototype.CanPerformDrillUp = function(itemName) {};

/**
 * Returns the client data for the specified dashboard item.
 * @param {string} itemName A String that specifies the component name of the dashboard item.
 * @return {!ASPxClientDashboardItemData}
 */
ASPxClientDashboardViewer.prototype.GetItemData = function(itemName) {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardActionAvailabilityChangedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientDashboardActionAvailabilityChangedEventArgs() {}
 /** @type {boolean} */
ASPxClientDashboardActionAvailabilityChangedEventArgs.prototype.IsReloadDataAvailable;
 /** @type {!Array<!ASPxClientDashboardItemAction>} */
ASPxClientDashboardActionAvailabilityChangedEventArgs.prototype.ItemActions;
/**
 * @record
 * @struct
 */
function ASPxClientDashboardDataLoadingErrorEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientDashboardDataLoadingErrorEventArgs() {}

/**
 * Allows you to determine whether or not the error message will be shown.
 * @return {boolean}
 */
ASPxClientDashboardDataLoadingErrorEventArgs.prototype.IsErrorMessageShown = function() {};

/**
 * Allows you to specify whether to show the error message.
 * @param {boolean} value true, to show the error message; otherwise, false.
 * @return {void}
 */
ASPxClientDashboardDataLoadingErrorEventArgs.prototype.ShowErrorMessage = function(value) {};

/**
 * Allows you to obtain the displayed error message.
 * @return {string}
 */
ASPxClientDashboardDataLoadingErrorEventArgs.prototype.GetError = function() {};

/**
 * Allows you to specify the displayed error message.
 * @param {string} value A string value that specifies the displayed error message.
 * @return {void}
 */
ASPxClientDashboardDataLoadingErrorEventArgs.prototype.SetError = function(value) {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardItemAction() {}
 /** @type {string} */
ASPxClientDashboardItemAction.prototype.ItemName;
 /** @type {!Array<?>} */
ASPxClientDashboardItemAction.prototype.Actions;

/** @const */
var ASPxClientDashboardAction = {};
/** @const {number} */
ASPxClientDashboardAction.SetMasterFilter;
/** @const {number} */
ASPxClientDashboardAction.ClearMasterFilter;
/** @const {number} */
ASPxClientDashboardAction.DrillDown;
/** @const {number} */
ASPxClientDashboardAction.DrillUp;
/**
 * @record
 * @struct
 */
function ASPxClientDashboardMasterFilterSetEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientDashboardMasterFilterSetEventArgs() {}
 /** @type {string} */
ASPxClientDashboardMasterFilterSetEventArgs.prototype.ItemName;
 /** @type {!Array<!Array<!Object>>} */
ASPxClientDashboardMasterFilterSetEventArgs.prototype.Values;

/**
 * Returns whether or not the specified value is NullValue.
 * @param {!Object} value The specified value.
 * @return {boolean}
 */
ASPxClientDashboardMasterFilterSetEventArgs.prototype.IsNullValue = function(value) {};

/**
 * Returns whether or not the specified value is OthersValue.
 * @param {!Object} value The specified value.
 * @return {boolean}
 */
ASPxClientDashboardMasterFilterSetEventArgs.prototype.IsOthersValue = function(value) {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardMasterFilterClearedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientDashboardMasterFilterClearedEventArgs() {}
 /** @type {string} */
ASPxClientDashboardMasterFilterClearedEventArgs.prototype.ItemName;
/**
 * @record
 * @struct
 */
function ASPxClientDashboardDrillDownPerformedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientDashboardDrillDownPerformedEventArgs() {}
 /** @type {string} */
ASPxClientDashboardDrillDownPerformedEventArgs.prototype.ItemName;
 /** @type {!Array<!Object>} */
ASPxClientDashboardDrillDownPerformedEventArgs.prototype.Values;

/**
 * Returns whether or not the specified value is NullValue.
 * @param {!Object} value The specified value.
 * @return {boolean}
 */
ASPxClientDashboardDrillDownPerformedEventArgs.prototype.IsNullValue = function(value) {};

/**
 * Returns whether or not the specified value is OthersValue.
 * @param {!Object} value The specified value.
 * @return {boolean}
 */
ASPxClientDashboardDrillDownPerformedEventArgs.prototype.IsOthersValue = function(value) {};
/**
 * @record
 * @struct
 */
function ASPxClientDashboardDrillUpPerformedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientDashboardDrillUpPerformedEventArgs() {}
 /** @type {string} */
ASPxClientDashboardDrillUpPerformedEventArgs.prototype.ItemName;
/**
 * @record
 * @struct
 */
function ASPxClientEditBase() {}

/**
 * Returns the editor's value.
 * @return {!Object}
 */
ASPxClientEditBase.prototype.GetValue = function() {};

/**
 * Changes the editor's value.
 * @param {!Object} value An object representing the data to be assigned to the editor's edit value.
 * @return {void}
 */
ASPxClientEditBase.prototype.SetValue = function(value) {};

/**
 * Returns a value indicating whether an editor is enabled.
 * @return {boolean}
 */
ASPxClientEditBase.prototype.GetEnabled = function() {};

/**
 * Specifies whether an editor is enabled.
 * @param {boolean} value true to enable the editor; otherwise, false.
 * @return {void}
 */
ASPxClientEditBase.prototype.SetEnabled = function(value) {};

/**
 * Returns the text displayed in the editor caption.
 * @return {string}
 */
ASPxClientEditBase.prototype.GetCaption = function() {};

/**
 * Specifies the text displayed in the editor caption.
 * @param {string} caption A string value specifying the editor caption.
 * @return {void}
 */
ASPxClientEditBase.prototype.SetCaption = function(caption) {};
/**
 * @record
 * @struct
 */
function ASPxClientEdit() {}
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientEdit.prototype.GotFocus;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientEdit.prototype.LostFocus;
 /** @type {!ASPxClientEvent<!ASPxClientEditValidationEventHandler<?>>} */
ASPxClientEdit.prototype.Validation;
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientEdit.prototype.ValueChanged;

/**
 * Returns an HTML element that represents the control's input element.
 * @return {!Object}
 */
ASPxClientEdit.prototype.GetInputElement = function() {};

/**
 * Sets input focus to the editor.
 * @return {void}
 */
ASPxClientEdit.prototype.Focus = function() {};

/**
 * Gets a value that indicates whether the editor's value passes validation.
 * @return {boolean}
 */
ASPxClientEdit.prototype.GetIsValid = function() {};

/**
 * Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
 * @return {string}
 */
ASPxClientEdit.prototype.GetErrorText = function() {};

/**
 * Sets a value that specifies whether the editor's value is valid.
 * @param {boolean} isValid True if the editor's value is valid; otherwise, False.
 * @return {void}
 */
ASPxClientEdit.prototype.SetIsValid = function(isValid) {};

/**
 * Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
 * @param {string} errorText A string value representing the error text.
 * @return {void}
 */
ASPxClientEdit.prototype.SetErrorText = function(errorText) {};

/**
 * Performs the editor's validation.
 * @return {void}
 */
ASPxClientEdit.prototype.Validate = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientBinaryImage() {}
 /** @type {!ASPxClientEvent<!ASPxClientEditEventHandler<?>>} */
ASPxClientBinaryImage.prototype.Click;
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientBinaryImage.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientBinaryImage.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientBinaryImage.prototype.CallbackError;

/**
 * Sets the size of the image editor.
 * @param {number} width An integer value that specifies the control's width.
 * @param {number} height An integer value that specifies the control's height.
 * @return {void}
 */
ASPxClientBinaryImage.prototype.SetSize = function(width, height) {};

/**
 * For internal use only.
 * @return {!Object}
 */
ASPxClientBinaryImage.prototype.GetValue = function() {};

/**
 * For internal use only.
 * @param {!Object} value
 * @return {void}
 */
ASPxClientBinaryImage.prototype.SetValue = function(value) {};

/**
 * Removes an image from the editor content.
 * @return {void}
 */
ASPxClientBinaryImage.prototype.Clear = function() {};

/**
 * Returns a name of the last uploaded file.
 * @return {string}
 */
ASPxClientBinaryImage.prototype.GetUploadedFileName = function() {};

/**
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * @param {string} parameter A string value that contains any information that needs to be sent to the server-side CustomCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
ASPxClientBinaryImage.prototype.PerformCallback = function(parameter, onSuccess) {};
/**
 * @record
 * @struct
 */
function ASPxClientButton() {}
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientButton.prototype.CheckedChanged;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientButton.prototype.GotFocus;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientButton.prototype.LostFocus;
 /** @type {!ASPxClientEvent<!ASPxClientButtonClickEventHandler<?>>} */
ASPxClientButton.prototype.Click;

/**
 * Simulates a mouse click action on the button control.
 * @return {void}
 */
ASPxClientButton.prototype.DoClick = function() {};

/**
 * Returns a value indicating whether the button is checked.
 * @return {boolean}
 */
ASPxClientButton.prototype.GetChecked = function() {};

/**
 * Sets a value that specifies the button's checked status.
 * @param {boolean} value true if the button is checked; otherwise, false.
 * @return {void}
 */
ASPxClientButton.prototype.SetChecked = function(value) {};

/**
 * Returns the text displayed within the button.
 * @return {string}
 */
ASPxClientButton.prototype.GetText = function() {};

/**
 * Sets the text to be displayed within the button.
 * @param {string} value A string value specifying the text to be displayed within the button.
 * @return {void}
 */
ASPxClientButton.prototype.SetText = function(value) {};

/**
 * Returns the URL pointing to the image displayed within the button.
 * @return {string}
 */
ASPxClientButton.prototype.GetImageUrl = function() {};

/**
 * Sets the URL pointing to the image displayed within the button.
 * @param {string} value A string value that is the URL to the image displayed within the button.
 * @return {void}
 */
ASPxClientButton.prototype.SetImageUrl = function(value) {};

/**
 * Sets a value specifying whether the button is enabled.
 * @param {boolean} value true to enable the button; false to disable it.
 * @return {void}
 */
ASPxClientButton.prototype.SetEnabled = function(value) {};

/**
 * Returns a value indicating whether the button is enabled.
 * @return {boolean}
 */
ASPxClientButton.prototype.GetEnabled = function() {};

/**
 * Sets input focus to the button.
 * @return {void}
 */
ASPxClientButton.prototype.Focus = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientButtonClickEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientButtonClickEventArgs() {}
 /** @type {boolean} */
ASPxClientButtonClickEventArgs.prototype.cancelEventAndBubble;
/**
 * @record
 * @struct
 */
function ASPxClientCalendar() {}
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientCalendar.prototype.SelectionChanged;
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientCalendar.prototype.VisibleMonthChanged;
 /** @type {!ASPxClientEvent<!ASPxClientCalendarCustomDisabledDateEventHandler<?>>} */
ASPxClientCalendar.prototype.CustomDisabledDate;
 /** @type {!ASPxClientEvent<!ASPxClientEditKeyEventHandler<?>>} */
ASPxClientCalendar.prototype.KeyDown;
 /** @type {!ASPxClientEvent<!ASPxClientEditKeyEventHandler<?>>} */
ASPxClientCalendar.prototype.KeyPress;
 /** @type {!ASPxClientEvent<!ASPxClientEditKeyEventHandler<?>>} */
ASPxClientCalendar.prototype.KeyUp;
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientCalendar.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientCalendar.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientCalendar.prototype.CallbackError;

/**
 * Tests whether the specified date is selected.
 * @param {!Date} date A date-time value that specifies the date to test.
 * @return {boolean}
 */
ASPxClientCalendar.prototype.IsDateSelected = function(date) {};

/**
 * Sets the date that specifies the month and year to be displayed in the calendar.
 * @param {!Date} date The date that specifies calendar's visible month and year.
 * @return {void}
 */
ASPxClientCalendar.prototype.SetVisibleDate = function(date) {};

/**
 * Sets the calendar's selected date.
 * @param {!Date} date A date object that specifies the calendar's selected date.
 * @return {void}
 */
ASPxClientCalendar.prototype.SetSelectedDate = function(date) {};

/**
 * Returns the calendar's selected date.
 * @return {!Date}
 */
ASPxClientCalendar.prototype.GetSelectedDate = function() {};

/**
 * Gets the date that determines the month and year that are currently displayed in the calendar.
 * @return {!Date}
 */
ASPxClientCalendar.prototype.GetVisibleDate = function() {};

/**
 * Selects the specified date within the calendar.
 * @param {!Date} date A date-time value that specifies the selected date.
 * @return {void}
 */
ASPxClientCalendar.prototype.SelectDate = function(date) {};

/**
 * Selects the specified range of dates within the calendar.
 * @param {!Date} start A date-time value that specifies the range's first date.
 * @param {!Date} end A date-time value that specifies the range's last date.
 * @return {void}
 */
ASPxClientCalendar.prototype.SelectRange = function(start, end) {};

/**
 * Deselects the specified date within the calendar.
 * @param {!Date} date A date-time value that specifies the date to deselect.
 * @return {void}
 */
ASPxClientCalendar.prototype.DeselectDate = function(date) {};

/**
 * Deselects the specified range of dates within the calendar.
 * @param {!Date} start A date-time value that specifies the range's first date.
 * @param {!Date} end A date-time value that specifies the range's last date.
 * @return {void}
 */
ASPxClientCalendar.prototype.DeselectRange = function(start, end) {};

/**
 * Deselects all the selected dates within the calendar.
 * @return {void}
 */
ASPxClientCalendar.prototype.ClearSelection = function() {};

/**
 * Returns a list of dates which are selected within the calendar.
 * @return {!Array<!Date>}
 */
ASPxClientCalendar.prototype.GetSelectedDates = function() {};

/**
 * Gets the minimum date on the calendar.
 * @return {!Date}
 */
ASPxClientCalendar.prototype.GetMinDate = function() {};

/**
 * Sets the minimum date of the calendar.
 * @param {!Date} date A DateTime object representing the minimum date.
 * @return {void}
 */
ASPxClientCalendar.prototype.SetMinDate = function(date) {};

/**
 * Gets the maximum date on the calendar.
 * @return {!Date}
 */
ASPxClientCalendar.prototype.GetMaxDate = function() {};

/**
 * Sets the maximum date of the calendar.
 * @param {!Date} date A DateTime object representing the maximum date.
 * @return {void}
 */
ASPxClientCalendar.prototype.SetMaxDate = function(date) {};
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientCalendarCustomDisabledDateEventArgs() {}
 /** @type {!Date} */
ASPxClientCalendarCustomDisabledDateEventArgs.prototype.date;
 /** @type {boolean} */
ASPxClientCalendarCustomDisabledDateEventArgs.prototype.isDisabled;
/**
 * @record
 * @struct
 */
function ASPxClientCalendarCustomDisabledDateEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientCaptcha() {}

/**
 * Sets input focus to the control's text box.
 * @return {void}
 */
ASPxClientCaptcha.prototype.Focus = function() {};

/**
 * Refreshes the code displayed within the editor's challenge image.
 * @return {void}
 */
ASPxClientCaptcha.prototype.Refresh = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientCheckBox() {}
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientCheckBox.prototype.CheckedChanged;

/**
 * Returns a value indicating whether the check box editor is checked.
 * @return {boolean}
 */
ASPxClientCheckBox.prototype.GetChecked = function() {};

/**
 * Sets a value which specifies the checked status of the check box editor.
 * @param {boolean} isChecked true if the check box editor is checked; otherwise, false.
 * @return {void}
 */
ASPxClientCheckBox.prototype.SetChecked = function(isChecked) {};

/**
 * Returns the text displayed within the editor.
 * @return {string}
 */
ASPxClientCheckBox.prototype.GetText = function() {};

/**
 * Returns a value which specifies a check box checked state.
 * @return {string}
 */
ASPxClientCheckBox.prototype.GetCheckState = function() {};

/**
 * Sets a value specifying the state of a check box.
 * @param {string} checkState A string value matches one of the CheckState enumeration values.
 * @return {void}
 */
ASPxClientCheckBox.prototype.SetCheckState = function(checkState) {};

/**
 * Sets the text to be displayed within the editor.
 * @param {string} text A string value specifying the text to be displayed within the editor.
 * @return {void}
 */
ASPxClientCheckBox.prototype.SetText = function(text) {};
/**
 * @record
 * @struct
 */
function ASPxClientRadioButton() {}

/**
 * Returns a value indicating whether the radio button is checked.
 * @return {boolean}
 */
ASPxClientRadioButton.prototype.GetChecked = function() {};

/**
 * Sets a value which specifies the radio button's checked status.
 * @param {boolean} isChecked true if the radio button is checked; otherwise, false.
 * @return {void}
 */
ASPxClientRadioButton.prototype.SetChecked = function(isChecked) {};
/**
 * @record
 * @struct
 */
function ASPxClientTextEdit() {}
 /** @type {!ASPxClientEvent<!ASPxClientEditKeyEventHandler<?>>} */
ASPxClientTextEdit.prototype.KeyDown;
 /** @type {!ASPxClientEvent<!ASPxClientEditKeyEventHandler<?>>} */
ASPxClientTextEdit.prototype.KeyPress;
 /** @type {!ASPxClientEvent<!ASPxClientEditKeyEventHandler<?>>} */
ASPxClientTextEdit.prototype.KeyUp;
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientTextEdit.prototype.TextChanged;

/**
 * Returns the text displayed within the editor.
 * @return {string}
 */
ASPxClientTextEdit.prototype.GetText = function() {};

/**
 * Sets the text to be displayed within the editor.
 * @param {string} text A string value specifying the text to be displayed within the editor.
 * @return {void}
 */
ASPxClientTextEdit.prototype.SetText = function(text) {};

/**
 * Selects all text in the text editor.
 * @return {void}
 */
ASPxClientTextEdit.prototype.SelectAll = function() {};

/**
 * Sets the caret position within the edited text.
 * @param {number} position An integer value that specifies the zero-based index of a text character that shall precede the caret.
 * @return {void}
 */
ASPxClientTextEdit.prototype.SetCaretPosition = function(position) {};

/**
 * Obtains the caret position within the edited text.
 * @return {number}
 */
ASPxClientTextEdit.prototype.GetCaretPosition = function() {};

/**
 * Selects the specified portion of the editor's text.
 * @param {number} startPos A zero-based integer value specifying the selection's starting position.
 * @param {number} endPos A zero-based integer value specifying the selection's ending position.
 * @param {boolean} scrollToSelection true to scroll the editor's contents to make the selection visible; otherwise, false.
 * @return {void}
 */
ASPxClientTextEdit.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {};
/**
 * @record
 * @struct
 */
function ASPxClientTextBoxBase() {}
/**
 * @record
 * @struct
 */
function ASPxClientButtonEditBase() {}
 /** @type {!ASPxClientEvent<!ASPxClientButtonEditClickEventHandler<?>>} */
ASPxClientButtonEditBase.prototype.ButtonClick;

/**
 * Specifies whether the button is visible.
 * @param {number} number An integer value specifying the button's index within the Buttons collection.
 * @param {boolean} value true, to make the button visible; otherwise, false.
 * @return {void}
 */
ASPxClientButtonEditBase.prototype.SetButtonVisible = function(number, value) {};

/**
 * Returns a value specifying whether a button is displayed.
 * @param {number} number An integer value specifying the button's index within the Buttons collection.
 * @return {boolean}
 */
ASPxClientButtonEditBase.prototype.GetButtonVisible = function(number) {};
/**
 * @record
 * @struct
 */
function ASPxClientDropDownEditBase() {}
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientDropDownEditBase.prototype.DropDown;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientDropDownEditBase.prototype.CloseUp;
 /** @type {!ASPxClientEvent<!ASPxClientCancelEventHandler<?>>} */
ASPxClientDropDownEditBase.prototype.QueryCloseUp;

/**
 * Modifies the size of the drop down window in accordance with its content.
 * @return {void}
 */
ASPxClientDropDownEditBase.prototype.AdjustDropDownWindow = function() {};

/**
 * Invokes the editor's drop down window.
 * @return {void}
 */
ASPxClientDropDownEditBase.prototype.ShowDropDown = function() {};

/**
 * Closes the opened drop down window of the editor.
 * @return {void}
 */
ASPxClientDropDownEditBase.prototype.HideDropDown = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientColorEdit() {}
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientColorEdit.prototype.ColorChanged;
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientColorEdit.prototype.TextChanged;

/**
 * Returns the color editor's value.
 * @return {string}
 */
ASPxClientColorEdit.prototype.GetColor = function() {};

/**
 * Specifies the color value for the color editor.
 * @param {string} value A string value specifying the editor color.
 * @return {void}
 */
ASPxClientColorEdit.prototype.SetColor = function(value) {};

/**
 * Indicates whether the automatic color item is selected.
 * @return {boolean}
 */
ASPxClientColorEdit.prototype.IsAutomaticColorSelected = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientComboBox() {}
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientComboBox.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientComboBox.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientComboBox.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientComboBox.prototype.SelectedIndexChanged;

/**
 * Specifies the text displayed within the editor's edit box.
 * @param {string} text A string value specifying the editor's text.
 * @return {void}
 */
ASPxClientComboBox.prototype.SetText = function(text) {};

/**
 * Adds a new item to the editor specifying the item's display text and returns the index of the added item.
 * Adds a new item to the editor specifying the item's display text and associated value, and returns the index of the added item.
 * Adds a new item to the editor specifying the item's display text, associated value and displayed image, and returns the index of the added item.
 * Adds a new item to the editor, specifying the item's display text, and returns the index of the added item.
 * Adds a new item to the end of the control's items collection.
 * Adds a new item to the end of the control's items collection.
 * @param {string|!Array<string>} text_or_texts A string value specifying the item's display text. / An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
 * @param {!Object=} value An object specifying the value associated with the item. / An object that represents the item's associated value.
 * @param {string=} imageUrl A string value specifying the path to the image displayed by the item.
 * @return {number}
 */
ASPxClientComboBox.prototype.AddItem = function(text_or_texts, value, imageUrl) {};

/**
 * Inserts a new item specified by its display text, associated value and displayed image into the editor's item collection, at the position specified.
 * Inserts a new item specified by its display text and associated value into the editor's item collection, at the position specified.
 * Inserts a new item specified by its display text into the editor's item collection, at the position specified.
 * Adds a new item to the control's items collection at the specified index.
 * Adds a new item to the control's items collection at the specified index.
 * Adds a new item to the control's items collection at the specified index.
 * @param {number} index An integer value representing the zero-based index of the position where the item should be inserted. / An integer value that represents the index position.
 * @param {string|!Array<string>} text_or_texts A string value specifying the item's display text. / An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
 * @param {!Object=} value An object specifying the value associated with the item. / An object that represents the item's associated value.
 * @param {string=} imageUrl A string value specifying the path to the image displayed by the item. / A String value specifying the path to the image displayed by the item.
 * @return {void}
 */
ASPxClientComboBox.prototype.InsertItem = function(index, text_or_texts, value, imageUrl) {};

/**
 * Removes an item specified by its index from the client list editor.
 * @param {number} index An integer value representing the index of the list item to be removed.
 * @return {void}
 */
ASPxClientComboBox.prototype.RemoveItem = function(index) {};

/**
 * Removes all items from the client combo box editor.
 * @return {void}
 */
ASPxClientComboBox.prototype.ClearItems = function() {};

/**
 * Prevents the client combobox editor from being rendered until the EndUpdate method is called.
 * @return {void}
 */
ASPxClientComboBox.prototype.BeginUpdate = function() {};

/**
 * Re-enables editor render operations after a call to the BeginUpdate method and forces an immediate re-rendering.
 * @return {void}
 */
ASPxClientComboBox.prototype.EndUpdate = function() {};

/**
 * Scrolls the editor's item list, so that the specified item becomes visible.
 * @param {number} index An integer value that specifies the item's index within the editor's client item list.
 * @return {void}
 */
ASPxClientComboBox.prototype.MakeItemVisible = function(index) {};

/**
 * Returns an item specified by its index within the combo box editor's item collection.
 * @param {number} index An integer value specifying the zero-based index of the item to search for.
 * @return {!ASPxClientListEditItem}
 */
ASPxClientComboBox.prototype.GetItem = function(index) {};

/**
 * Returns a combo box item by its text.
 * @param {string} text A string that specifies the item's text.
 * @return {!ASPxClientListEditItem}
 */
ASPxClientComboBox.prototype.FindItemByText = function(text) {};

/**
 * Returns a combo box item by its value.
 * @param {!Object} value An object that specifies the item's value.
 * @return {!ASPxClientListEditItem}
 */
ASPxClientComboBox.prototype.FindItemByValue = function(value) {};

/**
 * Gets the number of items contained in the editor's item collection.
 * @return {number}
 */
ASPxClientComboBox.prototype.GetItemCount = function() {};

/**
 * Returns the index of the selected item within the combo box editor.
 * @return {number}
 */
ASPxClientComboBox.prototype.GetSelectedIndex = function() {};

/**
 * Sets the combobox editor's selected item specified by its index.
 * @param {number} index An integer value specifying the zero-based index of the item to select.
 * @return {void}
 */
ASPxClientComboBox.prototype.SetSelectedIndex = function(index) {};

/**
 * Returns the combo box editor's selected item.
 * @return {!ASPxClientListEditItem}
 */
ASPxClientComboBox.prototype.GetSelectedItem = function() {};

/**
 * Sets the list editor's selected item.
 * @param {!ASPxClientListEditItem} item An ASPxClientListEditItem object that specifies the item to select.
 * @return {void}
 */
ASPxClientComboBox.prototype.SetSelectedItem = function(item) {};

/**
 * Gets the text displayed in the editor's edit box.
 * @return {string}
 */
ASPxClientComboBox.prototype.GetText = function() {};

/**
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * @param {string} parameter A string value that represents any information that needs to be sent to the server-side Callback event.
 * @return {void}
 */
ASPxClientComboBox.prototype.PerformCallback = function(parameter) {};

/**
 * Determines whether the drop-down content is loaded; if not - loads the content.
 * @param {!Object} callbackFunction An object that is the JavaScript function that receives the callback data as a parameter. The function is performed after the combo box content is loaded.
 * @return {void}
 */
ASPxClientComboBox.prototype.EnsureDropDownLoaded = function(callbackFunction) {};

/**
 * Defines the HTML content for the specified combo box item.
 * @param {number} index An integer value specifying the zero-based index of the item.
 * @param {string} html A string value that is the HTML code defining the content of the combo box item.
 * @return {void}
 */
ASPxClientComboBox.prototype.SetItemHtml = function(index, html) {};

/**
 * Sets the tooltip text for the combo box editor's item specified by its index.
 * @param {number} index An integer value specifying the zero-based index of the item.
 * @param {string} tooltip A string value specifying the tooltip text.
 * @return {void}
 */
ASPxClientComboBox.prototype.SetItemTooltip = function(index, tooltip) {};

/**
 * Sets the CSS class for a combo box item specified by its index.
 * @param {number} index An integer value specifying the zero-based index of the item.
 * @param {string} className A string value specifying the CSS class name.
 * @return {void}
 */
ASPxClientComboBox.prototype.AddItemCssClass = function(index, className) {};

/**
 * Removes the CSS class from a combo box item specified by its index.
 * @param {number} index An integer value specifying the zero-based index of the item.
 * @param {string} className A string value specifying the CSS class name.
 * @return {void}
 */
ASPxClientComboBox.prototype.RemoveItemCssClass = function(index, className) {};

/**
 * Defines the HTML content for the specified combo box item's text cell.
 * @param {number} itemIndex An integer value specifying the zero-based index of the item.
 * @param {number} textCellIndex An integer value specifying the zero-based index of the item's text cell.
 * @param {string} html A string value that is the HTML code defining the content of the combo box item.
 * @return {void}
 */
ASPxClientComboBox.prototype.SetItemTextCellHtml = function(itemIndex, textCellIndex, html) {};

/**
 * Sets the tooltip text for the text cell of the editor's item specified by its index.
 * @param {number} itemIndex An integer value specifying the zero-based index of the item.
 * @param {number} textCellIndex An integer value specifying the zero-based index of the item's text cell.
 * @param {string} tooltip A string value specifying the tooltip text.
 * @return {void}
 */
ASPxClientComboBox.prototype.SetItemTextCellTooltip = function(itemIndex, textCellIndex, tooltip) {};

/**
 * Sets the CSS class for a combo box item's text cell specified by its index.
 * @param {number} itemIndex An integer value specifying the zero-based index of the item.
 * @param {number} textCellIndex An integer value specifying the zero-based index of the item's text cell.
 * @param {string} className A string value specifying the CSS class name.
 * @return {void}
 */
ASPxClientComboBox.prototype.AddItemTextCellCssClass = function(itemIndex, textCellIndex, className) {};

/**
 * Removes the CSS class from a combo box item's text cell specified by its index.
 * @param {number} itemIndex An integer value specifying the zero-based index of the item.
 * @param {number} textCellIndex An integer value specifying the zero-based index of the item's text cell.
 * @param {string} className A string value specifying the CSS class name.
 * @return {void}
 */
ASPxClientComboBox.prototype.RemoveItemTextCellCssClass = function(itemIndex, textCellIndex, className) {};
/**
 * @record
 * @struct
 */
function ASPxClientDateEdit() {}
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientDateEdit.prototype.DateChanged;
 /** @type {!ASPxClientEvent<!ASPxClientParseDateEventHandler<?>>} */
ASPxClientDateEdit.prototype.ParseDate;
 /** @type {!ASPxClientEvent<!ASPxClientCalendarCustomDisabledDateEventHandler<?>>} */
ASPxClientDateEdit.prototype.CalendarCustomDisabledDate;
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientDateEdit.prototype.TextChanged;

/**
 * Returns the calendar of the date editor.
 * @return {?}
 */
ASPxClientDateEdit.prototype.GetCalendar = function() {};

/**
 * Returns the built-in time edit control.
 * @return {?}
 */
ASPxClientDateEdit.prototype.GetTimeEdit = function() {};

/**
 * Specifies the date for the editor.
 * @param {!Date} date A DateTime object that is the date.
 * @return {void}
 */
ASPxClientDateEdit.prototype.SetDate = function(date) {};

/**
 * Gets the date that is the editor's value.
 * @return {!Date}
 */
ASPxClientDateEdit.prototype.GetDate = function() {};

/**
 * Returns the number of days in a range selected within a date edit.
 * @return {number}
 */
ASPxClientDateEdit.prototype.GetRangeDayCount = function() {};

/**
 * Gets the minimum date of the editor.
 * @return {!Date}
 */
ASPxClientDateEdit.prototype.GetMinDate = function() {};

/**
 * Sets the minimum date of the editor.
 * @param {!Date} date A DateTime object representing the minimum date.
 * @return {void}
 */
ASPxClientDateEdit.prototype.SetMinDate = function(date) {};

/**
 * Gets the maximum date of the editor.
 * @return {!Date}
 */
ASPxClientDateEdit.prototype.GetMaxDate = function() {};

/**
 * Sets the maximum date of the editor.
 * @param {!Date} date A DateTime object representing the maximum date.
 * @return {void}
 */
ASPxClientDateEdit.prototype.SetMaxDate = function(date) {};
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientParseDateEventArgs() {}
 /** @type {string} */
ASPxClientParseDateEventArgs.prototype.value;
 /** @type {!Date} */
ASPxClientParseDateEventArgs.prototype.date;
 /** @type {boolean} */
ASPxClientParseDateEventArgs.prototype.handled;
/**
 * @record
 * @struct
 */
function ASPxClientParseDateEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientDropDownEdit() {}

/**
 * Obtains the key value associated with the text displayed within the editor's edit box.
 * @return {string}
 */
ASPxClientDropDownEdit.prototype.GetKeyValue = function() {};

/**
 * Specifies the key value associated with the text displayed within the editor's edit box.
 * @param {string} keyValue A string specifying the key value associated with the editor's value (displayed text).
 * @return {void}
 */
ASPxClientDropDownEdit.prototype.SetKeyValue = function(keyValue) {};
/**
 * @record
 * @struct
 */
function ASPxClientEditKeyEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientEditKeyEventArgs() {}
 /** @type {!Object} */
ASPxClientEditKeyEventArgs.prototype.htmlEvent;
/**
 * @record
 * @struct
 */
function ASPxClientEditValidationEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientEditValidationEventArgs() {}
 /** @type {string} */
ASPxClientEditValidationEventArgs.prototype.errorText;
 /** @type {boolean} */
ASPxClientEditValidationEventArgs.prototype.isValid;
 /** @type {string} */
ASPxClientEditValidationEventArgs.prototype.value;
/**
 * @record
 * @struct
 */
function ASPxClientFilterControl() {}
 /** @type {!ASPxClientEvent<!ASPxClientFilterAppliedEventHandler<?>>} */
ASPxClientFilterControl.prototype.Applied;
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientFilterControl.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientFilterControl.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientFilterControl.prototype.CallbackError;

/**
 * Returns the filter expression.
 * @return {string}
 */
ASPxClientFilterControl.prototype.GetFilterExpression = function() {};

/**
 * Returns the applied filter expression.
 * @return {string}
 */
ASPxClientFilterControl.prototype.GetAppliedFilterExpression = function() {};

/**
 * Returns the editor used to edit operand values for the specified filter column.
 * @param {number} editorIndex An integer value that identifies the filter column by its index within the collection.
 * @return {?}
 */
ASPxClientFilterControl.prototype.GetEditor = function(editorIndex) {};

/**
 * Returns a value indicating whether the filter expression being currently composed on the client side is valid - all expression conditions are filled.
 * @return {boolean}
 */
ASPxClientFilterControl.prototype.IsFilterExpressionValid = function() {};

/**
 * Applies a filter constructed by an end-user.
 * @return {void}
 */
ASPxClientFilterControl.prototype.Apply = function() {};

/**
 * Resets the current filter expression to a previously applied filter expression.
 * @return {void}
 */
ASPxClientFilterControl.prototype.Reset = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientFilterAppliedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientFilterAppliedEventArgs() {}
 /** @type {string} */
ASPxClientFilterAppliedEventArgs.prototype.filterExpression;
/**
 * @record
 * @struct
 */
function ASPxClientListEdit() {}
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientListEdit.prototype.SelectedIndexChanged;

/**
 * Returns the list editor's selected item.
 * @return {!ASPxClientListEditItem}
 */
ASPxClientListEdit.prototype.GetSelectedItem = function() {};

/**
 * Returns the index of the selected item within the list editor.
 * @return {number}
 */
ASPxClientListEdit.prototype.GetSelectedIndex = function() {};

/**
 * Sets the list editor's selected item.
 * @param {!ASPxClientListEditItem} item An ASPxClientListEditItem object that specifies the item to select.
 * @return {void}
 */
ASPxClientListEdit.prototype.SetSelectedItem = function(item) {};

/**
 * Sets the list editor's selected item specified by its index.
 * @param {number} index An integer value specifying the zero-based index of the item to select.
 * @return {void}
 */
ASPxClientListEdit.prototype.SetSelectedIndex = function(index) {};
/**
 * @record
 * @struct
 */
function ASPxClientListEditItem() {}
 /** @type {boolean} */
ASPxClientListEditItem.prototype.selected;
 /** @type {?} */
ASPxClientListEditItem.prototype.listEditBase;
 /** @type {number} */
ASPxClientListEditItem.prototype.index;
 /** @type {string} */
ASPxClientListEditItem.prototype.imageUrl;
 /** @type {string} */
ASPxClientListEditItem.prototype.text;
 /** @type {!Object} */
ASPxClientListEditItem.prototype.value;

/**
 * Returns the list item's value that corresponds to a column specified by its index.
 * Returns the list item's value that corresponds to a column specified by its field name.
 * @param {number|string} columnIndex_or_columnName An integer value that specifies the column's index within the editor's Columns collection. / A string value that specifies the column's field name defined via the FieldName property.
 * @return {string}
 */
ASPxClientListEditItem.prototype.GetColumnText = function(columnIndex_or_columnName) {};
/**
 * @record
 * @struct
 */
function ASPxClientListBox() {}
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientListBox.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientListBox.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientListBox.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ASPxClientEditKeyEventHandler<?>>} */
ASPxClientListBox.prototype.KeyDown;
 /** @type {!ASPxClientEvent<!ASPxClientEditKeyEventHandler<?>>} */
ASPxClientListBox.prototype.KeyPress;
 /** @type {!ASPxClientEvent<!ASPxClientEditKeyEventHandler<?>>} */
ASPxClientListBox.prototype.KeyUp;
 /** @type {!ASPxClientEvent<!ASPxClientListEditItemSelectedChangedEventHandler<?>>} */
ASPxClientListBox.prototype.SelectedIndexChanged;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientListBox.prototype.ItemDoubleClick;

/**
 * Gets the number of items contained in the editor's item collection.
 * @return {number}
 */
ASPxClientListBox.prototype.GetItemCount = function() {};

/**
 * Returns an item specified by its index within the list box editor's item collection.
 * @param {number} index An integer value specifying the zero-based index of the item to search for.
 * @return {!ASPxClientListEditItem}
 */
ASPxClientListBox.prototype.GetItem = function(index) {};

/**
 * Returns an array of the list editor's selected items indices.
 * @return {!Array<number>}
 */
ASPxClientListBox.prototype.GetSelectedIndices = function() {};

/**
 * Returns an array of the list editor's selected items values.
 * @return {!Array<!Object>}
 */
ASPxClientListBox.prototype.GetSelectedValues = function() {};

/**
 * Returns an array of the list editor's selected items.
 * @return {!Array<!ASPxClientListEditItem>}
 */
ASPxClientListBox.prototype.GetSelectedItems = function() {};

/**
 * Selects all list box items.
 * @return {void}
 */
ASPxClientListBox.prototype.SelectAll = function() {};

/**
 * Unselects all list box items.
 * @return {void}
 */
ASPxClientListBox.prototype.UnselectAll = function() {};

/**
 * Selects the items with the specified indices within a list box.
 * @param {!Array<number>} indices An array of integer values that represent the items indices.
 * @return {void}
 */
ASPxClientListBox.prototype.SelectIndices = function(indices) {};

/**
 * Unselects an array of the list box items with the specified indices.
 * @param {!Array<number>} indices An array of integer values that represent the indices.
 * @return {void}
 */
ASPxClientListBox.prototype.UnselectIndices = function(indices) {};

/**
 * Selects the specified items within a list box.
 * @param {!Array<!ASPxClientListEditItem>} items An array of ASPxClientListEditItem objects that represent the items.
 * @return {void}
 */
ASPxClientListBox.prototype.SelectItems = function(items) {};

/**
 * Unselects an array of the specified list box items.
 * @param {!Array<!ASPxClientListEditItem>} items An array of ASPxClientListEditItem objects that represent the items.
 * @return {void}
 */
ASPxClientListBox.prototype.UnselectItems = function(items) {};

/**
 * Select the items with the specified values within a list box.
 * @param {!Array<!Object>} values An array of Object[] objects that represent the item's values.
 * @return {void}
 */
ASPxClientListBox.prototype.SelectValues = function(values) {};

/**
 * Unselects an array of the list box items with the specified values.
 * @param {!Array<!Object>} values An array of Object[] objects that represent the values.
 * @return {void}
 */
ASPxClientListBox.prototype.UnselectValues = function(values) {};

/**
 * Scrolls the editor's item list, so that the specified item becomes visible.
 * @param {number} index An integer value that specifies the item's index within the editor's client item list.
 * @return {void}
 */
ASPxClientListBox.prototype.MakeItemVisible = function(index) {};

/**
 * Initializes the ASPxClientListBox client object when its parent container becomes visible dynamically, on the client side.
 * @return {void}
 */
ASPxClientListBox.prototype.InitOnContainerMadeVisible = function() {};

/**
 * Adds a new item to the editor, specifying the item's display text, and returns the index of the added item.
 * Adds a new item to the editor, specifying the item's display text and associated value, and returns the index of the added item.
 * Adds a new item to the editor, specifying the item's display text, associated value and displayed image, and returns the index of the added item.
 * Adds a new item to the end of the editor's items collection, specifying the item's display text, and returns the index of the added item.
 * Adds a new item to the end of the control's items collection.
 * Adds a new item to the end of the editor's items collection, specifying the item's display text, associated value and displayed image, and returns the index of the added item.
 * @param {string|!Array<string>} text_or_texts A string value specifying the item's display text. / An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection. / An array of strings that specifies the item's display text. Array element positions relate to the positions of corresponding columns within the editor's Columns collection.
 * @param {!Object=} value An object specifying the value associated with the item. / An object that represents the item's associated value.
 * @param {string=} imageUrl A string value specifying the path to the image displayed by the item. / A String value specifying the path to the image displayed by the item.
 * @return {number}
 */
ASPxClientListBox.prototype.AddItem = function(text_or_texts, value, imageUrl) {};

/**
 * Inserts a new item specified by its display text, associated value and displayed image into the editor's item collection, at the position specified.
 * Inserts a new item specified by its display text and associated value into the editor's item collection, at the position specified.
 * Inserts a new item specified by its display text into the editor's item collection, at the position specified.
 * Adds a new item to the control's items collection at the specified index.
 * Adds a new item to the control's items collection at the specified index.
 * Adds a new item to the control's items collection at the specified index.
 * @param {number} index An integer value representing the zero-based index of the position where the item should be inserted. / An integer value that represents the index position.
 * @param {string|!Array<string>} text_or_texts A string value specifying the item's display text. / An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
 * @param {!Object=} value An object specifying the value associated with the item. / An object that represents the item's associated value.
 * @param {string=} imageUrl A string value specifying the path to the image displayed by the item. / A String value specifying the path to the image displayed by the item.
 * @return {void}
 */
ASPxClientListBox.prototype.InsertItem = function(index, text_or_texts, value, imageUrl) {};

/**
 * Prevents the client list box editor from being rendered until the EndUpdate method is called.
 * @return {void}
 */
ASPxClientListBox.prototype.BeginUpdate = function() {};

/**
 * Re-enables editor render operations after a call to the BeginUpdate method, and forces an immediate re-rendering.
 * @return {void}
 */
ASPxClientListBox.prototype.EndUpdate = function() {};

/**
 * Removes all items from the client list box editor.
 * @return {void}
 */
ASPxClientListBox.prototype.ClearItems = function() {};

/**
 * Removes an item specified by its index from the client list editor.
 * @param {number} index An integer value representing the index of the list item to be removed.
 * @return {void}
 */
ASPxClientListBox.prototype.RemoveItem = function(index) {};

/**
 * Returns a list box item by its text.
 * @param {string} text A string that specifies the item's text.
 * @return {!ASPxClientListEditItem}
 */
ASPxClientListBox.prototype.FindItemByText = function(text) {};

/**
 * Returns a list box item by its value.
 * @param {!Object} value An object that specifies the item's value.
 * @return {!ASPxClientListEditItem}
 */
ASPxClientListBox.prototype.FindItemByValue = function(value) {};

/**
 * Sends a callback to the server, and generates the server-side Callback event, passing it the specified argument.
 * @param {string} parameter A string value that represents any information that needs to be sent to the server-side Callback event.
 * @return {void}
 */
ASPxClientListBox.prototype.PerformCallback = function(parameter) {};

/**
 * Defines the HTML content for the specified list box item.
 * @param {number} index An integer value specifying the zero-based index of the item.
 * @param {string} html A string value that is the HTML code defining the content of the list box item.
 * @return {void}
 */
ASPxClientListBox.prototype.SetItemHtml = function(index, html) {};

/**
 * Sets the tooltip text for the list box editor's item specified by its index.
 * @param {number} index An integer value specifying the zero-based index of the item.
 * @param {string} tooltip A string value specifying the tooltip text.
 * @return {void}
 */
ASPxClientListBox.prototype.SetItemTooltip = function(index, tooltip) {};

/**
 * Sets the CSS class for a list box item specified by its index.
 * @param {number} index An integer value specifying the zero-based index of the item.
 * @param {string} className A string value specifying the CSS class name.
 * @return {void}
 */
ASPxClientListBox.prototype.AddItemCssClass = function(index, className) {};

/**
 * Removes the CSS class from a list box item specified by its index.
 * @param {number} index An integer value specifying the zero-based index of the item.
 * @param {string} className A string value specifying the CSS class name.
 * @return {void}
 */
ASPxClientListBox.prototype.RemoveItemCssClass = function(index, className) {};

/**
 * Defines the HTML content for the specified list box item's text cell.
 * @param {number} itemIndex An integer value specifying the zero-based index of the item.
 * @param {number} textCellIndex An integer value specifying the zero-based index of the item's text cell.
 * @param {string} html A string value that is the HTML code defining the content of the list box item.
 * @return {void}
 */
ASPxClientListBox.prototype.SetItemTextCellHtml = function(itemIndex, textCellIndex, html) {};

/**
 * Sets the tooltip text for the text cell of the editor's item specified by its index.
 * @param {number} itemIndex An integer value specifying the zero-based index of the item.
 * @param {number} textCellIndex An integer value specifying the zero-based index of the item's text cell.
 * @param {string} tooltip A string value specifying the tooltip text.
 * @return {void}
 */
ASPxClientListBox.prototype.SetItemTextCellTooltip = function(itemIndex, textCellIndex, tooltip) {};

/**
 * Sets the CSS class for a list box item's text cell specified by its index.
 * @param {number} itemIndex An integer value specifying the zero-based index of the item.
 * @param {number} textCellIndex An integer value specifying the zero-based index of the item's text cell.
 * @param {string} className A string value specifying the CSS class name.
 * @return {void}
 */
ASPxClientListBox.prototype.AddItemTextCellCssClass = function(itemIndex, textCellIndex, className) {};

/**
 * Removes the CSS class from a list box item's text cell specified by its index.
 * @param {number} itemIndex An integer value specifying the zero-based index of the item.
 * @param {number} textCellIndex An integer value specifying the zero-based index of the item's text cell.
 * @param {string} className A string value specifying the CSS class name.
 * @return {void}
 */
ASPxClientListBox.prototype.RemoveItemTextCellCssClass = function(itemIndex, textCellIndex, className) {};
/**
 * @record
 * @struct
 */
function ASPxClientCheckListBase() {}

/**
 * Gets the number of items contained in the editor's item collection.
 * @return {number}
 */
ASPxClientCheckListBase.prototype.GetItemCount = function() {};

/**
 * Returns the editor's item specified by its index.
 * @param {number} index An integer value specifying the zero-based index of the item to be retrieved.
 * @return {!ASPxClientListEditItem}
 */
ASPxClientCheckListBase.prototype.GetItem = function(index) {};
/**
 * @record
 * @struct
 */
function ASPxClientRadioButtonList() {}
/**
 * @record
 * @struct
 */
function ASPxClientCheckBoxList() {}
 /** @type {!ASPxClientEvent<!ASPxClientListEditItemSelectedChangedEventHandler<?>>} */
ASPxClientCheckBoxList.prototype.SelectedIndexChanged;

/**
 * Returns an array of the check box list editor's selected items indices.
 * @return {!Array<number>}
 */
ASPxClientCheckBoxList.prototype.GetSelectedIndices = function() {};

/**
 * Returns an array of the check box list editor's selected items values.
 * @return {!Array<!Object>}
 */
ASPxClientCheckBoxList.prototype.GetSelectedValues = function() {};

/**
 * Returns an array of the check box list editor's selected items.
 * @return {!Array<!ASPxClientListEditItem>}
 */
ASPxClientCheckBoxList.prototype.GetSelectedItems = function() {};

/**
 * Selects all check box list items.
 * @return {void}
 */
ASPxClientCheckBoxList.prototype.SelectAll = function() {};

/**
 * Unselects all check box list items.
 * @return {void}
 */
ASPxClientCheckBoxList.prototype.UnselectAll = function() {};

/**
 * Selects items with the specified indices within a check box list.
 * @param {!Array<number>} indices An array of integer values that are the item indices.
 * @return {void}
 */
ASPxClientCheckBoxList.prototype.SelectIndices = function(indices) {};

/**
 * Selects the specified items within a check box list.
 * @param {!Array<!ASPxClientListEditItem>} items An array of ASPxClientListEditItem objects that are the items.
 * @return {void}
 */
ASPxClientCheckBoxList.prototype.SelectItems = function(items) {};

/**
 * Selects items with the specified values within a check box list.
 * @param {!Array<!Object>} values An array of Object[] objects that are the item values.
 * @return {void}
 */
ASPxClientCheckBoxList.prototype.SelectValues = function(values) {};

/**
 * Unselects items with the specified indices within a check box list.
 * @param {!Array<number>} indices An array of integer values that are the item indices.
 * @return {void}
 */
ASPxClientCheckBoxList.prototype.UnselectIndices = function(indices) {};

/**
 * Unselects the specified items within a check box list.
 * @param {!Array<!ASPxClientListEditItem>} items An array of ASPxClientListEditItem objects that are the items.
 * @return {void}
 */
ASPxClientCheckBoxList.prototype.UnselectItems = function(items) {};

/**
 * Unselects items with the specified values within a check box list.
 * @param {!Array<!Object>} values An array of Object[] objects that are the item values.
 * @return {void}
 */
ASPxClientCheckBoxList.prototype.UnselectValues = function(values) {};
/**
 * @record
 * @struct
 */
function ASPxClientListEditItemSelectedChangedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientListEditItemSelectedChangedEventArgs() {}
 /** @type {number} */
ASPxClientListEditItemSelectedChangedEventArgs.prototype.index;
 /** @type {boolean} */
ASPxClientListEditItemSelectedChangedEventArgs.prototype.isSelected;
/**
 * @record
 * @struct
 */
function ASPxClientProgressBar() {}

/**
 * Sets the position of the operation's progress.
 * @param {number} position An integer value specifying the progress position.
 * @return {void}
 */
ASPxClientProgressBar.prototype.SetPosition = function(position) {};

/**
 * Gets the position of the operation's progress.
 * @return {number}
 */
ASPxClientProgressBar.prototype.GetPosition = function() {};

/**
 * Sets the pattern used to format the displayed text for the progress bar.
 * @param {string} text A  value that is the format pattern.
 * @return {void}
 */
ASPxClientProgressBar.prototype.SetCustomDisplayFormat = function(text) {};

/**
 * Returns the text displayed within the progress bar.
 * @return {string}
 */
ASPxClientProgressBar.prototype.GetDisplayText = function() {};

/**
 * Sets the percentage representation of the progress position.
 * @return {number}
 */
ASPxClientProgressBar.prototype.GetPercent = function() {};

/**
 * Sets the minimum range value of the progress bar.
 * @param {number} min An integer value specifying the minimum value of the progress bar range.
 * @return {void}
 */
ASPxClientProgressBar.prototype.SetMinimum = function(min) {};

/**
 * Sets the maximum range value of the progress bar.
 * @param {number} max An integer value specifying the maximum value of the progress bar range.
 * @return {void}
 */
ASPxClientProgressBar.prototype.SetMaximum = function(max) {};

/**
 * Gets the minimum range value of the progress bar.
 * @return {number}
 */
ASPxClientProgressBar.prototype.GetMinimum = function() {};

/**
 * Gets the maximum range value of the progress bar.
 * @return {number}
 */
ASPxClientProgressBar.prototype.GetMaximum = function() {};

/**
 * Sets the minimum and maximum range values of the progress bar.
 * @param {number} minValue An integer value specifying the minimum value of the progress bar range.
 * @param {number} maxValue An integer value specifying the maximum value of the progress bar range.
 * @return {void}
 */
ASPxClientProgressBar.prototype.SetMinMaxValues = function(minValue, maxValue) {};
/**
 * @record
 * @struct
 */
function ASPxClientSpinEditBase() {}
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientSpinEditBase.prototype.TextChanged;
/**
 * @record
 * @struct
 */
function ASPxClientSpinEdit() {}
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientSpinEdit.prototype.NumberChanged;

/**
 * Specifies the value of the spin edit control on the client side.
 * Changes the editor's value.
 * @param {number|!Object} number_or_value A Decimal value specifying the control value. / An object representing the data to be assigned to the editor's edit value.
 * @return {void}
 */
ASPxClientSpinEdit.prototype.SetValue = function(number_or_value) {};

/**
 * Sets the spin editor's value.
 * @param {number} number A decimal number specifying the value to assign to the spin editor.
 * @return {void}
 */
ASPxClientSpinEdit.prototype.SetNumber = function(number) {};

/**
 * Gets a number which represents the spin editor's value.
 * @return {number}
 */
ASPxClientSpinEdit.prototype.GetNumber = function() {};

/**
 * Returns the text displayed within the editor.
 * @return {string}
 */
ASPxClientSpinEdit.prototype.GetText = function() {};

/**
 * Sets the minimum value of the editor.
 * @param {number} value A decimal value specifying the minimum value of the editor.
 * @return {void}
 */
ASPxClientSpinEdit.prototype.SetMinValue = function(value) {};

/**
 * Gets the minimum value of the editor.
 * @return {number}
 */
ASPxClientSpinEdit.prototype.GetMinValue = function() {};

/**
 * Sets the maximum value of the editor.
 * @param {number} value A decimal value specifying the maximum value of the editor.
 * @return {void}
 */
ASPxClientSpinEdit.prototype.SetMaxValue = function(value) {};

/**
 * Gets the maximum value of the editor.
 * @return {number}
 */
ASPxClientSpinEdit.prototype.GetMaxValue = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientTimeEdit() {}
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientTimeEdit.prototype.DateChanged;

/**
 * Specifies the date for the editor.
 * @param {!Date} date A DateTime object that is the date.
 * @return {void}
 */
ASPxClientTimeEdit.prototype.SetDate = function(date) {};

/**
 * Gets the date that is the editor's value.
 * @return {!Date}
 */
ASPxClientTimeEdit.prototype.GetDate = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientStaticEdit() {}
 /** @type {!ASPxClientEvent<!ASPxClientEditEventHandler<?>>} */
ASPxClientStaticEdit.prototype.Click;
/**
 * @record
 * @struct
 */
function ASPxClientEditEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientEditClickEventArgs() {}
 /** @type {!Object} */
ASPxClientEditClickEventArgs.prototype.htmlElement;
 /** @type {!Object} */
ASPxClientEditClickEventArgs.prototype.htmlEvent;
/**
 * @record
 * @struct
 */
function ASPxClientHyperLink() {}

/**
 * Gets an URL which defines the navigation location for the editor's hyperlink.
 * @return {string}
 */
ASPxClientHyperLink.prototype.GetNavigateUrl = function() {};

/**
 * Specifies an URL which defines the navigation location for the editor's hyperlink.
 * @param {string} url A string value which specifies an URL to where the client web browser will navigate when a hyperlink in the editor is clicked.
 * @return {void}
 */
ASPxClientHyperLink.prototype.SetNavigateUrl = function(url) {};

/**
 * Gets the text caption displayed for the hyperlink in the hyperlink editor.
 * @return {string}
 */
ASPxClientHyperLink.prototype.GetText = function() {};

/**
 * Specifies the text caption displayed for the hyperlink in the hyperlink editor.
 * @param {string} text A string value specifying the text caption for the hyperlink in the editor.
 * @return {void}
 */
ASPxClientHyperLink.prototype.SetText = function(text) {};
/**
 * @record
 * @struct
 */
function ASPxClientImageBase() {}

/**
 * Sets the size of the image displayed within the image editor.
 * @param {number} width An integer value that specifies the image's width.
 * @param {number} height An integer value that specifies the image's height.
 * @return {void}
 */
ASPxClientImageBase.prototype.SetSize = function(width, height) {};
/**
 * @record
 * @struct
 */
function ASPxClientImage() {}

/**
 * Returns the URL pointing to the image displayed within the image editor.
 * @return {string}
 */
ASPxClientImage.prototype.GetImageUrl = function() {};

/**
 * Sets the URL which points to the image displayed within the image editor.
 * @param {string} url A string value specifying the URL to the image displayed within the editor.
 * @return {void}
 */
ASPxClientImage.prototype.SetImageUrl = function(url) {};
/**
 * @record
 * @struct
 */
function ASPxClientLabel() {}

/**
 * Returns the text displayed within the editor.
 * @return {string}
 */
ASPxClientLabel.prototype.GetText = function() {};

/**
 * Sets the text to be displayed within the editor.
 * @param {string} text A string value specifying the text to be displayed within the editor.
 * @return {void}
 */
ASPxClientLabel.prototype.SetText = function(text) {};
/**
 * @record
 * @struct
 */
function ASPxClientTextBox() {}
/**
 * @record
 * @struct
 */
function ASPxClientMemo() {}
/**
 * @record
 * @struct
 */
function ASPxClientButtonEdit() {}
/**
 * @record
 * @struct
 */
function ASPxClientButtonEditClickEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientButtonEditClickEventArgs() {}
 /** @type {number} */
ASPxClientButtonEditClickEventArgs.prototype.buttonIndex;
/**
 * @record
 * @struct
 */
function ASPxClientTokenBox() {}
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientTokenBox.prototype.TokensChanged;

/**
 * Adds a new token with the specified text to the end of the control's token collection.
 * @param {string} text A string value specifying the token's text.
 * @return {void}
 */
ASPxClientTokenBox.prototype.AddToken = function(text) {};

/**
 * Removes a token specified by its text from the client token box.
 * @param {string} text A string value that is the text of the token to be removed.
 * @return {void}
 */
ASPxClientTokenBox.prototype.RemoveTokenByText = function(text) {};

/**
 * Removes a token specified by its index from the client token box.
 * @param {number} index An integer value that is the index of the token to be removed.
 * @return {void}
 */
ASPxClientTokenBox.prototype.RemoveToken = function(index) {};

/**
 * Returns an HTML span element that corresponds to the specified token.
 * @param {number} index An integer value that is the token index.
 * @return {!Object}
 */
ASPxClientTokenBox.prototype.GetTokenHtmlElement = function(index) {};

/**
 * Returns an HTML span element that corresponds to the specified token's text.
 * @param {number} index An integer value that is the token index.
 * @return {!Object}
 */
ASPxClientTokenBox.prototype.GetTokenTextHtmlElement = function(index) {};

/**
 * Returns an HTML span element that corresponds to the specified token's remove button.
 * @param {number} index An integer value that is the token index.
 * @return {!Object}
 */
ASPxClientTokenBox.prototype.GetTokenRemoveButtonHtmlElement = function(index) {};

/**
 * Returns a collection of tokens.
 * @return {!Array<string>}
 */
ASPxClientTokenBox.prototype.GetTokenCollection = function() {};

/**
 * Sets a collection of tokens.
 * @param {!Array<string>} collection A  object that is the collection of tokens.
 * @return {void}
 */
ASPxClientTokenBox.prototype.SetTokenCollection = function(collection) {};

/**
 * Removes all tokens contained in the token box.
 * @return {void}
 */
ASPxClientTokenBox.prototype.ClearTokenCollection = function() {};

/**
 * Returns the index of a token specified by its text.
 * @param {string} text A string value that specifies the text of the token.
 * @return {number}
 */
ASPxClientTokenBox.prototype.GetTokenIndexByText = function(text) {};

/**
 * Gets the token texts, separated with a sign, specified by the TextSeparator property.
 * @return {string}
 */
ASPxClientTokenBox.prototype.GetText = function() {};

/**
 * Sets the token texts, separated with a sign, specified by the TextSeparator property.
 * @param {string} text A string value that is the token texts separated with a text separator.
 * @return {void}
 */
ASPxClientTokenBox.prototype.SetText = function(text) {};

/**
 * Gets the editor value.
 * @return {string}
 */
ASPxClientTokenBox.prototype.GetValue = function() {};

/**
 * Sets the editor value.
 * Changes the editor's value.
 * @param {string|!Object} value A string that is the editor value. / An object representing the data to be assigned to the editor's edit value.
 * @return {void}
 */
ASPxClientTokenBox.prototype.SetValue = function(value) {};

/**
 * Returns a value that indicates if the specified token (string) is a custom token.
 * @param {string} text A string value that is a token.
 * @param {boolean} caseSensitive true, if tokens are case sensitive; otherwise, false.
 * @return {boolean}
 */
ASPxClientTokenBox.prototype.IsCustomToken = function(text, caseSensitive) {};
/**
 * @record
 * @struct
 */
function ASPxClientTrackBar() {}
 /** @type {!ASPxClientEvent<!ASPxClientTrackBarPositionChangingEventHandler<?>>} */
ASPxClientTrackBar.prototype.PositionChanging;
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientTrackBar.prototype.PositionChanged;
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientTrackBar.prototype.Track;
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientTrackBar.prototype.TrackStart;
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientTrackBar.prototype.TrackEnd;

/**
 * Returns a track bar item index by the item's value.
 * @param {!Object} value An object that specifies the item's value.
 * @return {number}
 */
ASPxClientTrackBar.prototype.GetItemIndexByValue = function(value) {};

/**
 * Returns a track bar item's associated value.
 * @param {number} index An integer value that specifies the required item's index.
 * @return {!Object}
 */
ASPxClientTrackBar.prototype.GetItemValue = function(index) {};

/**
 * Returns a track bar item text.
 * @param {number} index An integer value that specifies the required item's index.
 * @return {string}
 */
ASPxClientTrackBar.prototype.GetItemText = function(index) {};

/**
 * Returns a track bar item's tooltip text.
 * @param {number} index An integer value that specifies the required item's index.
 * @return {string}
 */
ASPxClientTrackBar.prototype.GetItemToolTip = function(index) {};

/**
 * Returns the number of the track bar items that are maintained by the item collection.
 * @return {number}
 */
ASPxClientTrackBar.prototype.GetItemCount = function() {};

/**
 * Specifies the secondary drag handle position.
 * @param {number} position A  value that specifies the position.
 * @return {void}
 */
ASPxClientTrackBar.prototype.SetPositionEnd = function(position) {};

/**
 * Specifies the main drag handle position.
 * @param {number} position A  value that specifies the position.
 * @return {void}
 */
ASPxClientTrackBar.prototype.SetPositionStart = function(position) {};

/**
 * Returns the secondary drag handle position.
 * @return {number}
 */
ASPxClientTrackBar.prototype.GetPositionEnd = function() {};

/**
 * Returns the main drag handle position.
 * @return {number}
 */
ASPxClientTrackBar.prototype.GetPositionStart = function() {};

/**
 * Gets a drag handle position.
 * @return {number}
 */
ASPxClientTrackBar.prototype.GetPosition = function() {};

/**
 * Specifies a drag handle position.
 * @param {number} position A  value that specifies the position.
 * @return {void}
 */
ASPxClientTrackBar.prototype.SetPosition = function(position) {};
/**
 * @record
 * @struct
 */
function ASPxClientTrackBarPositionChangingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientTrackBarPositionChangingEventArgs() {}
 /** @type {boolean} */
ASPxClientTrackBarPositionChangingEventArgs.prototype.cancel;
 /** @type {number} */
ASPxClientTrackBarPositionChangingEventArgs.prototype.currentPosition;
 /** @type {number} */
ASPxClientTrackBarPositionChangingEventArgs.prototype.currentPositionEnd;
 /** @type {number} */
ASPxClientTrackBarPositionChangingEventArgs.prototype.currentPositionStart;
 /** @type {number} */
ASPxClientTrackBarPositionChangingEventArgs.prototype.newPosition;
 /** @type {number} */
ASPxClientTrackBarPositionChangingEventArgs.prototype.newPositionEnd;
 /** @type {number} */
ASPxClientTrackBarPositionChangingEventArgs.prototype.newPositionStart;
/**
 * @record
 * @struct
 */
function ASPxClientValidationSummary() {}
 /** @type {!ASPxClientEvent<!ASPxClientValidationSummaryVisibilityChangedEventHandler<?>>} */
ASPxClientValidationSummary.prototype.VisibilityChanged;
/**
 * @record
 * @struct
 */
function ASPxClientValidationSummaryVisibilityChangedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientValidationSummaryVisibilityChangedEventArgs() {}
 /** @type {boolean} */
ASPxClientValidationSummaryVisibilityChangedEventArgs.prototype.visible;
/**
 * @record
 * @struct
 */
function ASPxClientGaugeControl() {}
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientGaugeControl.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientGaugeControl.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientGaugeControl.prototype.CallbackError;

/**
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * @param {string} parameter A string value that represents any information that needs to be sent to the server-side CustomCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
ASPxClientGaugeControl.prototype.PerformCallback = function(parameter, onSuccess) {};
/**
 * @record
 * @struct
 */
function ASPxClientGridColumnMovingTargetPosition() {}
 /** @type {number} */
ASPxClientGridColumnMovingTargetPosition.prototype.Right;
 /** @type {number} */
ASPxClientGridColumnMovingTargetPosition.prototype.Left;
 /** @type {number} */
ASPxClientGridColumnMovingTargetPosition.prototype.Top;
 /** @type {number} */
ASPxClientGridColumnMovingTargetPosition.prototype.Bottom;
/**
 * @record
 * @struct
 */
function ASPxClientGridBase() {}
/**
 * @record
 * @struct
 */
function ASPxClientGridColumnBase() {}
/**
 * @record
 * @struct
 */
function ASPxClientGridLookup() {}
 /** @type {!ASPxClientEvent<!ASPxClientGridViewRowClickEventHandler<?>>} */
ASPxClientGridLookup.prototype.RowClick;
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientGridLookup.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientGridLookup.prototype.EndCallback;

/**
 * Returns a client object representing the built-in dropdown grid.
 * @return {?}
 */
ASPxClientGridLookup.prototype.GetGridView = function() {};

/**
 * Confirms the current selection made by an end-user within the editor's dropdown grid.
 * @return {void}
 */
ASPxClientGridLookup.prototype.ConfirmCurrentSelection = function() {};

/**
 * Cancels the current selection made by an end-user within the editor's dropdown grid and rolls back to the last confirmed selection. The selection can be confirmed by either pressing the Enter key or calling the ConfirmCurrentSelection method.
 * @return {void}
 */
ASPxClientGridLookup.prototype.RollbackToLastConfirmedSelection = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientCardView() {}
 /** @type {!ASPxClientCardViewBatchEditApi} */
ASPxClientCardView.prototype.batchEditApi;
 /** @type {!ASPxClientEvent<!ASPxClientCardViewCustomButtonEventHandler<?>>} */
ASPxClientCardView.prototype.CustomButtonClick;
 /** @type {!ASPxClientEvent<!ASPxClientCardViewSelectionEventHandler<?>>} */
ASPxClientCardView.prototype.SelectionChanged;
 /** @type {!ASPxClientEvent<!ASPxClientCardViewColumnCancelEventHandler<?>>} */
ASPxClientCardView.prototype.ColumnSorting;
 /** @type {!ASPxClientEvent<!ASPxClientCardViewBatchEditStartEditingEventHandler<?>>} */
ASPxClientCardView.prototype.BatchEditStartEditing;
 /** @type {!ASPxClientEvent<!ASPxClientCardViewBatchEditEndEditingEventHandler<?>>} */
ASPxClientCardView.prototype.BatchEditEndEditing;
 /** @type {!ASPxClientEvent<!ASPxClientCardViewBatchEditConfirmShowingEventHandler<?>>} */
ASPxClientCardView.prototype.BatchEditConfirmShowing;
 /** @type {!ASPxClientEvent<!ASPxClientCardViewBatchEditTemplateCellFocusedEventHandler<?>>} */
ASPxClientCardView.prototype.BatchEditTemplateCellFocused;
 /** @type {!ASPxClientEvent<!ASPxClientCardViewBatchEditCardValidatingEventHandler<?>>} */
ASPxClientCardView.prototype.BatchEditCardValidating;
 /** @type {!ASPxClientEvent<!ASPxClientCardViewBatchEditChangesSavingEventHandler<?>>} */
ASPxClientCardView.prototype.BatchEditChangesSaving;
 /** @type {!ASPxClientEvent<!ASPxClientCardViewBatchEditChangesCancelingEventHandler<?>>} */
ASPxClientCardView.prototype.BatchEditChangesCanceling;
 /** @type {!ASPxClientEvent<!ASPxClientCardViewBatchEditCardInsertingEventHandler<?>>} */
ASPxClientCardView.prototype.BatchEditCardInserting;
 /** @type {!ASPxClientEvent<!ASPxClientCardViewBatchEditCardDeletingEventHandler<?>>} */
ASPxClientCardView.prototype.BatchEditCardDeleting;
 /** @type {!ASPxClientEvent<!ASPxClientCardViewCardClickEventHandler<?>>} */
ASPxClientCardView.prototype.CardClick;
 /** @type {!ASPxClientEvent<!ASPxClientCardViewCardClickEventHandler<?>>} */
ASPxClientCardView.prototype.CardDblClick;
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientCardView.prototype.FocusedCardChanged;
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientCardView.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientCardView.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientCardView.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientCardView.prototype.CustomizationWindowCloseUp;

/**
 * Returns the value of the specified edit cell.
 * Returns the value of the specified edit cell.
 * Returns the value of the specified edit cell.
 * @param {string|!ASPxClientCardViewColumn|number} columnFieldNameOrId_or_column_or_columnIndex A string value that specifies the column's field name or unique identifier (the column's Name property value). / An ASPxClientCardViewColumn object that represents the data column within the client grid. / An integer value that identifies the data column within the grid's column collection.
 * @return {string}
 */
ASPxClientCardView.prototype.GetEditValue = function(columnFieldNameOrId_or_column_or_columnIndex) {};

/**
 * Moves focus to the specified edit cell within the edited card.
 * Moves focus to the specified edit cell within the edited card.
 * Moves focus to the specified edit cell within the edited card.
 * @param {!ASPxClientCardViewColumn|number|string} column_or_columnIndex_or_columnFieldNameOrId An ASPxClientCardViewColumn object that represents the data column within the client grid. / An integer value that specifies the column's position within the columns collection. / A string value that specifies the column's field name or unique identifier (the column's Name property value).
 * @return {void}
 */
ASPxClientCardView.prototype.FocusEditor = function(column_or_columnIndex_or_columnFieldNameOrId) {};

/**
 * Sets the value of the specified edit cell.
 * Sets the value of the specified edit cell.
 * Sets the value of the specified edit cell.
 * @param {!ASPxClientCardViewColumn|number|string} column_or_columnIndex_or_columnFieldNameOrId An ASPxClientCardViewColumn object that represents the data column within the client grid. / An integer value that identifies the data column within the grid's column collection. / A string value that specifies the column's field name or unique identifier (the column's Name property value).
 * @param {string} value A string value that specifies the edit cell's new value.
 * @return {void}
 */
ASPxClientCardView.prototype.SetEditValue = function(column_or_columnIndex_or_columnFieldNameOrId, value) {};

/**
 * Displays the Filter Control.
 * @return {void}
 */
ASPxClientCardView.prototype.ShowFilterControl = function() {};

/**
 * Hides the Filter Control.
 * @return {void}
 */
ASPxClientCardView.prototype.CloseFilterControl = function() {};

/**
 * Enables or disables the current filter.
 * @param {boolean} isFilterEnabled true to enable the current filter; otherwise, false.
 * @return {void}
 */
ASPxClientCardView.prototype.SetFilterEnabled = function(isFilterEnabled) {};

/**
 * Returns the current vertical scroll position of the grid's content.
 * @return {number}
 */
ASPxClientCardView.prototype.GetVerticalScrollPosition = function() {};

/**
 * Specifies the vertical scroll position for the grid's content.
 * @param {number} position An integer value specifying the vertical scroll position.
 * @return {void}
 */
ASPxClientCardView.prototype.SetVerticalScrollPosition = function(position) {};

/**
 * Gets information about a focused cell.
 * @return {!ASPxClientCardViewCellInfo}
 */
ASPxClientCardView.prototype.GetFocusedCell = function() {};

/**
 * Focuses the specified cell.
 * @param {number} cardVisibleIndex An  value that specifies the visible index of the card.
 * @param {number} columnIndex A zero-based index that identifies the column in the column collection (the column's Index property value).
 * @return {void}
 */
ASPxClientCardView.prototype.SetFocusedCell = function(cardVisibleIndex, columnIndex) {};

/**
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
 * Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
 * Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
 * @param {!ASPxClientCardViewColumn|number|string} column_or_columnIndex_or_columnFieldNameOrId An ASPxClientCardViewColumn object that represents the data column. / An integer value that specifies the column's position within the column collection. / A string value that specifies the column's field name or unique identifier (the column's Name property value).
 * @param {string=} sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
 * @param {boolean=} reset true to clear any previous sorting; otherwise, false.
 * @param {number=} sortIndex An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
 * @return {void}
 */
ASPxClientCardView.prototype.SortBy = function(column_or_columnIndex_or_columnFieldNameOrId, sortOrder, reset, sortIndex) {};

/**
 * Hides the specified column.
 * Hides the specified column.
 * Hides the specified column.
 * Moves the specified column to the specified visual position within the ASPxCardView.
 * Moves the specified column to the specified visual position within the ASPxCardView.
 * Moves the specified column to the specified visual position within the ASPxCardView.
 * Moves the specified column to the specified visual position within the ASPxCardView.
 * Moves the specified column to the specified visual position within the ASPxCardView.
 * Moves the specified column to the specified visual position within the ASPxCardView.
 * @param {!ASPxClientCardViewColumn|number|string} column_or_columnIndex_or_columnFieldNameOrId An ASPxClientCardViewColumn object that represents the column to hide. / An integer value that specifies the absolute index of the column to hide. / A string value that identifies the column to be hidden by the name of the data source field to which the column is bound, or by the column's name. / An ASPxClientCardViewColumn object that represents the column to move. / An integer value that specifies the absolute index of the column to move. / A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
 * @param {number=} moveToColumnVisibleIndex An integer value that specifies the column's position among the visible columns within the ASPxCardView. / An integer value that specifies the column's position among the visible columns within the grid. / An integer value that identifies the target column displayed within the CardView. / An integer value that identifies the target column displayed within the grid.
 * @param {boolean=} moveBefore true, to move the column before the target column; otherwise, false. / true to move the column before the target column; otherwise, false.
 * @return {void}
 */
ASPxClientCardView.prototype.MoveColumn = function(column_or_columnIndex_or_columnFieldNameOrId, moveToColumnVisibleIndex, moveBefore) {};

/**
 * Returns the key value of the specified card.
 * @param {number} visibleIndex An integer value that specifies the card's visible index.
 * @return {string}
 */
ASPxClientCardView.prototype.GetCardKey = function(visibleIndex) {};

/**
 * Switches the CardView to edit mode.
 * @param {number} visibleIndex A zero-based integer that identifies a card to be edited.
 * @return {void}
 */
ASPxClientCardView.prototype.StartEditCard = function(visibleIndex) {};

/**
 * Switches the ASPxCardView to edit mode.
 * @param {!Object} key An object that uniquely identifies a card to be edited.
 * @return {void}
 */
ASPxClientCardView.prototype.StartEditCardByKey = function(key) {};

/**
 * Indicates whether or not a new card is being edited.
 * @return {boolean}
 */
ASPxClientCardView.prototype.IsNewCardEditing = function() {};

/**
 * Adds a new record.
 * @return {void}
 */
ASPxClientCardView.prototype.AddNewCard = function() {};

/**
 * Deletes the specified card.
 * @param {number} visibleIndex An integer value that identifies the card.
 * @return {void}
 */
ASPxClientCardView.prototype.DeleteCard = function(visibleIndex) {};

/**
 * Deletes a card with the specified key value.
 * @param {!Object} key An object that uniquely identifies the card.
 * @return {void}
 */
ASPxClientCardView.prototype.DeleteCardByKey = function(key) {};

/**
 * Returns the focused card's index.
 * @return {number}
 */
ASPxClientCardView.prototype.GetFocusedCardIndex = function() {};

/**
 * Moves focus to the specified card.
 * @param {number} visibleIndex An integer value that specifies the focused card's index.
 * @return {void}
 */
ASPxClientCardView.prototype.SetFocusedCardIndex = function(visibleIndex) {};

/**
 * Selects all the unselected cards within the CardView.
 * Selects the specified card displayed within the CardView.
 * Selects the specified cards within the CardView.
 * Selects or deselects the specified cards within the CardView.
 * Selects or deselects the specified card within the GridView.
 * @param {number|!Array<number>=} visibleIndex_or_visibleIndices A zero-based integer value that specifies the card's visible index. / An array of zero-based indices that identify data cards within the grid. / An integer zero-based index that identifies the data card within the grid.
 * @param {boolean=} selected true to select the specified cards; false to deselect the cards. / true to select the specified card; false to deselect the card.
 * @return {void}
 */
ASPxClientCardView.prototype.SelectCards = function(visibleIndex_or_visibleIndices, selected) {};

/**
 * Selects or deselects the specified cards displayed within the CardView.
 * Selects or deselects the specified card displayed within the CardView.
 * Selects the specified cards displayed within the CardView.
 * Selects a card displayed within the CardView by its key.
 * @param {!Array<!Object>|!Object} keys_or_key An array of objects that uniquely identify the cards. / An object that uniquely identifies the card.
 * @param {boolean=} selected true to select the specified cards; false to deselect the cards. / true to select the specified card; false to deselect the card.
 * @return {void}
 */
ASPxClientCardView.prototype.SelectCardsByKey = function(keys_or_key, selected) {};

/**
 * Deselects the specified cards displayed within the ASPxCardView.
 * Deselects the specified card displayed within the ASPxCardView.
 * @param {!Array<!Object>|!Object} keys_or_key An array of objects that uniquely identify the cards. / An object that uniquely identifies the card.
 * @return {void}
 */
ASPxClientCardView.prototype.UnselectCardsByKey = function(keys_or_key) {};

/**
 * Deselects all the selected cards within the ASPxCardView.
 * Deselects the specified cards (if selected) within the ASPxCardView.
 * Deselects the specified cards (if selected) within the ASPxCardView.
 * @param {!Array<number>|number=} visibleIndices_or_visibleIndex An array of zero-based indices that identify data cards within the grid. / A zero-based integer value that specifies the card's visible index.
 * @return {void}
 */
ASPxClientCardView.prototype.UnselectCards = function(visibleIndices_or_visibleIndex) {};

/**
 * Deselects all grid cards that match the filter criteria currently applied to the CardView.
 * @return {void}
 */
ASPxClientCardView.prototype.UnselectFilteredCards = function() {};

/**
 * Selects the specified card displayed on the current page.
 * Selects or deselects the specified card displayed on the current page.
 * @param {number} visibleIndex A zero-based integer value that specifies the card's visible index.
 * @param {boolean=} selected true to select the specified card; false to deselect the card.
 * @return {void}
 */
ASPxClientCardView.prototype.SelectCardOnPage = function(visibleIndex, selected) {};

/**
 * Deselects the specified cards (if selected) displayed on the current page.
 * @param {number} visibleIndex A zero-based integer value that specifies the card's visible index.
 * @return {void}
 */
ASPxClientCardView.prototype.UnselectCardOnPage = function(visibleIndex) {};

/**
 * Selects all unselected cards displayed on the current page.
 * Allows you to select or deselect all cards displayed on the current page based on the parameter passed.
 * @param {boolean=} selected true to select all unselected cards displayed on the current page; false to deselect all selected cards on the page.
 * @return {void}
 */
ASPxClientCardView.prototype.SelectAllCardsOnPage = function(selected) {};

/**
 * Deselects all selected cards displayed on the current page.
 * @return {void}
 */
ASPxClientCardView.prototype.UnselectAllCardsOnPage = function() {};

/**
 * Returns the number of selected cards.
 * @return {number}
 */
ASPxClientCardView.prototype.GetSelectedCardCount = function() {};

/**
 * Indicates whether or not the specified card is selected within the current page.
 * @param {number} visibleIndex An integer value that identifies the card by its visible index.
 * @return {boolean}
 */
ASPxClientCardView.prototype.IsCardSelectedOnPage = function(visibleIndex) {};

/**
 * Applies the specified search panel filter criterion to grid data.
 * @param {string} value A string value that specifies the filter criterion.
 * @return {void}
 */
ASPxClientCardView.prototype.ApplySearchPanelFilter = function(value) {};

/**
 * Applies the specified filter expression to the grid.
 * @param {string} filterExpression A string value that specifies the filter expression.
 * @return {void}
 */
ASPxClientCardView.prototype.ApplyFilter = function(filterExpression) {};

/**
 * Clears the filter expression applied to a client CardView.
 * @return {void}
 */
ASPxClientCardView.prototype.ClearFilter = function() {};

/**
 * Gets the Popup Edit Form.
 * @return {?}
 */
ASPxClientCardView.prototype.GetPopupEditForm = function() {};

/**
 * Sets input focus to the grid.
 * @return {void}
 */
ASPxClientCardView.prototype.Focus = function() {};

/**
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 *
 * @param {string} args A string value that represents any information that needs to be sent to the server-side CustomCallback event.
 * @param {function(string): void=} onSuccess
 * @return {void}
 */
ASPxClientCardView.prototype.PerformCallback = function(args, onSuccess) {};

/**
 * Selects the specified page.
 * @param {number} pageIndex An integer value that specifies the active page's index.
 * @return {void}
 */
ASPxClientCardView.prototype.GotoPage = function(pageIndex) {};

/**
 * Gets the index of the page currently being selected.
 * @return {number}
 */
ASPxClientCardView.prototype.GetPageIndex = function() {};

/**
 * Gets the number of pages to which the grid's data is divided.
 * @return {number}
 */
ASPxClientCardView.prototype.GetPageCount = function() {};

/**
 * Activates the next page.
 * @return {void}
 */
ASPxClientCardView.prototype.NextPage = function() {};

/**
 * Activates the previous page.
 * @return {void}
 */
ASPxClientCardView.prototype.PrevPage = function() {};

/**
 * Returns the index of the first card displayed within the grid's active page.
 * @return {number}
 */
ASPxClientCardView.prototype.GetTopVisibleIndex = function() {};

/**
 * Indicates whether the grid is in edit mode.
 * @return {boolean}
 */
ASPxClientCardView.prototype.IsEditing = function() {};

/**
 * Saves all the changes made and switches the grid to browse mode.
 * @return {void}
 */
ASPxClientCardView.prototype.UpdateEdit = function() {};

/**
 * Cancels all the changes made and switches the CardView to browse mode.
 * @return {void}
 */
ASPxClientCardView.prototype.CancelEdit = function() {};

/**
 * Updates data displayed within the grid.
 * @return {void}
 */
ASPxClientCardView.prototype.Refresh = function() {};

/**
 * Indicates whether the customization window is displayed.
 * @return {boolean}
 */
ASPxClientCardView.prototype.IsCustomizationWindowVisible = function() {};

/**
 * Invokes the customization window.
 * Invokes the customization window and displays it over the specified HTML element.
 * @param {!Object=} showAtElement An object that specifies the HTML element relative to whose position the customization window is invoked.
 * @return {void}
 */
ASPxClientCardView.prototype.ShowCustomizationWindow = function(showAtElement) {};

/**
 * Closes the customization window.
 * @return {void}
 */
ASPxClientCardView.prototype.HideCustomizationWindow = function() {};

/**
 * Returns the number of columns within the client grid.
 * @return {number}
 */
ASPxClientCardView.prototype.GetColumnCount = function() {};

/**
 * Returns the card values displayed within all selected cards.
 * @param {string} fieldNames The names of data source fields separated via a semicolon, whose values within the selected cards are returned.
 * @param {!ASPxClientCardViewValuesCallback} onCallback An ASPxClientCardViewValuesCallback object that represents the JavaScript function which receives the list of card values as a parameter.
 * @return {void}
 */
ASPxClientCardView.prototype.GetSelectedFieldValues = function(fieldNames, onCallback) {};

/**
 * Returns key values of selected cards displayed within the current page.
 * @return {!Array<!Object>}
 */
ASPxClientCardView.prototype.GetSelectedKeysOnPage = function() {};

/**
 * Sends a callback to the server and generates the server-side CustomDataCallback event.
 * @param {string} args A string value that is any information that needs to be sent to the server-side CustomDataCallback event.
 * @param {!ASPxClientCardViewValuesCallback} onCallback An ASPxClientCardViewValuesCallback object that is the JavaScript function which receives the information on the client side.
 * @return {void}
 */
ASPxClientCardView.prototype.GetValuesOnCustomCallback = function(args, onCallback) {};

/**
 * Returns the values of the specified data source fields within the specified card.
 * @param {number} visibleIndex An integer value that identifies the data card.
 * @param {string} fieldNames The names of data source fields separated via a semicolon, whose values within the specified card are returned.
 * @param {!ASPxClientCardViewValuesCallback} onCallback An ASPxClientCardViewValuesCallback object that represents the JavaScript function which receives the list of card values as a parameter.
 * @return {void}
 */
ASPxClientCardView.prototype.GetCardValues = function(visibleIndex, fieldNames, onCallback) {};

/**
 * Returns the card values displayed within the current page.
 * @param {string} fieldNames The names of data source fields whose values are returned.
 * @param {!ASPxClientCardViewValuesCallback} onCallback An ASPxClientCardViewValuesCallback object that represents the JavaScript function which receives the list of card values as a parameter.
 * @return {void}
 */
ASPxClientCardView.prototype.GetPageCardValues = function(fieldNames, onCallback) {};

/**
 * Returns the number of cards actually displayed within the active page.
 * @return {number}
 */
ASPxClientCardView.prototype.GetVisibleCardsOnPage = function() {};

/**
 * Returns the client column that resides at the specified position within the column collection.
 * @param {number} columnIndex A zero-based index that identifies the column within the column collection (the column's Index property value).
 * @return {!ASPxClientCardViewColumn}
 */
ASPxClientCardView.prototype.GetColumn = function(columnIndex) {};

/**
 * Returns the column with the specified unique identifier.
 * @param {string} columnId A string value that specifies the column's unique identifier (the column's Name property value).
 * @return {!ASPxClientCardViewColumn}
 */
ASPxClientCardView.prototype.GetColumnById = function(columnId) {};

/**
 * Returns the client column which is bound to the specified data source field.
 * @param {string} columnFieldName A string value that specifies the name of the data source field to which the column is bound (the column's FieldName property value).
 * @return {!ASPxClientCardViewColumn}
 */
ASPxClientCardView.prototype.GetColumnByField = function(columnFieldName) {};

/**
 * Returns the editor used to edit the specified column's values.
 * Returns the editor used to edit the specified column's values.
 * Returns the editor used to edit the specified column's values.
 * @param {!ASPxClientCardViewColumn|number|string} column_or_columnIndex_or_columnFieldNameOrId An ASPxClientCardViewColumn object that specifies the required column within the client grid. / An integer value that specifies the column's position within the column collection. / A string value that specifies the column's field name or unique identifier (the column's Name property value).
 * @return {?}
 */
ASPxClientCardView.prototype.GetEditor = function(column_or_columnIndex_or_columnFieldNameOrId) {};
/**
 * @extends {ASPxClientGridColumnBase}
 * @record
 * @struct
 */
function ASPxClientCardViewColumn() {}
 /** @type {string} */
ASPxClientCardViewColumn.prototype.name;
 /** @type {number} */
ASPxClientCardViewColumn.prototype.index;
 /** @type {string} */
ASPxClientCardViewColumn.prototype.fieldName;
 /** @type {boolean} */
ASPxClientCardViewColumn.prototype.visible;
/**
 * @record
 * @struct
 */
function ASPxClientCardViewValuesCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientCardViewColumnCancelEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientCardViewColumnCancelEventArgs() {}
 /** @type {!ASPxClientCardViewColumn} */
ASPxClientCardViewColumnCancelEventArgs.prototype.column;
/**
 * @record
 * @struct
 */
function ASPxClientCardViewCardClickEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientCardViewCardClickEventArgs() {}
 /** @type {number} */
ASPxClientCardViewCardClickEventArgs.prototype.visibleIndex;
 /** @type {!Object} */
ASPxClientCardViewCardClickEventArgs.prototype.htmlEvent;
/**
 * @record
 * @struct
 */
function ASPxClientCardViewCustomButtonEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientCardViewCustomButtonEventArgs() {}
 /** @type {number} */
ASPxClientCardViewCustomButtonEventArgs.prototype.visibleIndex;
 /** @type {string} */
ASPxClientCardViewCustomButtonEventArgs.prototype.buttonID;
/**
 * @record
 * @struct
 */
function ASPxClientCardViewSelectionEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientCardViewSelectionEventArgs() {}
 /** @type {number} */
ASPxClientCardViewSelectionEventArgs.prototype.visibleIndex;
 /** @type {boolean} */
ASPxClientCardViewSelectionEventArgs.prototype.isSelected;
 /** @type {boolean} */
ASPxClientCardViewSelectionEventArgs.prototype.isAllRecordsOnPage;
 /** @type {boolean} */
ASPxClientCardViewSelectionEventArgs.prototype.isChangedOnServer;
/**
 * @record
 * @struct
 */
function ASPxClientCardViewBatchEditStartEditingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientCardViewBatchEditStartEditingEventArgs() {}
 /** @type {number} */
ASPxClientCardViewBatchEditStartEditingEventArgs.prototype.visibleIndex;
 /** @type {!ASPxClientCardViewColumn} */
ASPxClientCardViewBatchEditStartEditingEventArgs.prototype.focusedColumn;
 /** @type {!Object} */
ASPxClientCardViewBatchEditStartEditingEventArgs.prototype.cardValues;
/**
 * @record
 * @struct
 */
function ASPxClientCardViewBatchEditEndEditingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientCardViewBatchEditEndEditingEventArgs() {}
 /** @type {number} */
ASPxClientCardViewBatchEditEndEditingEventArgs.prototype.visibleIndex;
 /** @type {!Object} */
ASPxClientCardViewBatchEditEndEditingEventArgs.prototype.cardValues;
/**
 * @record
 * @struct
 */
function ASPxClientCardViewBatchEditCardValidatingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientCardViewBatchEditCardValidatingEventArgs() {}
 /** @type {number} */
ASPxClientCardViewBatchEditCardValidatingEventArgs.prototype.visibleIndex;
 /** @type {!Object} */
ASPxClientCardViewBatchEditCardValidatingEventArgs.prototype.validationInfo;
/**
 * @record
 * @struct
 */
function ASPxClientCardViewBatchEditConfirmShowingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientCardViewBatchEditConfirmShowingEventArgs() {}
 /** @type {string} */
ASPxClientCardViewBatchEditConfirmShowingEventArgs.prototype.requestTriggerID;
/**
 * @record
 * @struct
 */
function ASPxClientCardViewBatchEditTemplateCellFocusedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientCardViewBatchEditTemplateCellFocusedEventArgs() {}
 /** @type {!ASPxClientCardViewColumn} */
ASPxClientCardViewBatchEditTemplateCellFocusedEventArgs.prototype.column;
 /** @type {boolean} */
ASPxClientCardViewBatchEditTemplateCellFocusedEventArgs.prototype.handled;
/**
 * @record
 * @struct
 */
function ASPxClientCardViewBatchEditChangesSavingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientCardViewBatchEditChangesSavingEventArgs() {}
 /** @type {!Object} */
ASPxClientCardViewBatchEditChangesSavingEventArgs.prototype.insertedValues;
 /** @type {!Object} */
ASPxClientCardViewBatchEditChangesSavingEventArgs.prototype.deletedValues;
 /** @type {!Object} */
ASPxClientCardViewBatchEditChangesSavingEventArgs.prototype.updatedValues;
/**
 * @record
 * @struct
 */
function ASPxClientCardViewBatchEditChangesCancelingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientCardViewBatchEditChangesCancelingEventArgs() {}
 /** @type {!Object} */
ASPxClientCardViewBatchEditChangesCancelingEventArgs.prototype.insertedValues;
 /** @type {!Object} */
ASPxClientCardViewBatchEditChangesCancelingEventArgs.prototype.deletedValues;
 /** @type {!Object} */
ASPxClientCardViewBatchEditChangesCancelingEventArgs.prototype.updatedValues;
/**
 * @record
 * @struct
 */
function ASPxClientCardViewBatchEditCardInsertingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientCardViewBatchEditCardInsertingEventArgs() {}
 /** @type {number} */
ASPxClientCardViewBatchEditCardInsertingEventArgs.prototype.visibleIndex;
/**
 * @record
 * @struct
 */
function ASPxClientCardViewBatchEditCardDeletingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientCardViewBatchEditCardDeletingEventArgs() {}
 /** @type {number} */
ASPxClientCardViewBatchEditCardDeletingEventArgs.prototype.visibleIndex;
 /** @type {!Object} */
ASPxClientCardViewBatchEditCardDeletingEventArgs.prototype.cardValues;
/**
 * @record
 * @struct
 */
function ASPxClientCardViewBatchEditApi() {}

/**
 * Performs validation of CardView data contained in the cards when the CardView operates in Batch Edit mode.
 * @param {boolean=} validateOnlyModified true, if only modified cards should be validated; otherwise, false.
 * @return {boolean}
 */
ASPxClientCardViewBatchEditApi.prototype.ValidateCards = function(validateOnlyModified) {};

/**
 * Performs validation of CardView data contained in the specified card when the CardView operates in Batch Edit mode.
 * @param {number} visibleIndex An integer value specifying the visible index of the validated card.
 * @return {boolean}
 */
ASPxClientCardViewBatchEditApi.prototype.ValidateCard = function(visibleIndex) {};

/**
 * Returns an array of card visible indices.
 * @param {boolean} includeDeleted true, to include visible indices of deleted cards to the returned array; otherwise, false.
 * @return {!Array<number>}
 */
ASPxClientCardViewBatchEditApi.prototype.GetCardVisibleIndices = function(includeDeleted) {};

/**
 * Returns an array of the deleted card visible indices.
 * @return {!Array<number>}
 */
ASPxClientCardViewBatchEditApi.prototype.GetDeletedCardIndices = function() {};

/**
 * Returns an array of the inserted card visible indices.
 * @return {!Array<number>}
 */
ASPxClientCardViewBatchEditApi.prototype.GetInsertedCardIndices = function() {};

/**
 * Indicates if the card with the specified visible index is deleted.
 * @param {number} visibleIndex An integer value that identifies the card by its visible index.
 * @return {boolean}
 */
ASPxClientCardViewBatchEditApi.prototype.IsDeletedCard = function(visibleIndex) {};

/**
 * Indicates if the card with the specified visible index is newly created.
 * @param {number} visibleIndex An integer value that identifies the card by its visible index.
 * @return {boolean}
 */
ASPxClientCardViewBatchEditApi.prototype.IsNewCard = function(visibleIndex) {};

/**
 * Programmatically moves the focus to the previous cell in the card
 * @return {boolean}
 */
ASPxClientCardViewBatchEditApi.prototype.MoveFocusBackward = function() {};

/**
 * Programmatically moves the focus to the next cell in the card.
 * @return {boolean}
 */
ASPxClientCardViewBatchEditApi.prototype.MoveFocusForward = function() {};

/**
 * Sets the value of the specified cell.
 * Sets the value of the specified cell.
 * @param {number} visibleIndex An integer zero-based index that identifies the card containing the processed cell.
 * @param {string} columnFieldNameOrId A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
 * @param {!Object} value An object that contains the new cell value.
 * @param {string=} displayText A string value that specifies the cell display text.
 * @param {boolean=} cancelCellHighlighting true to cancel highlighting of the modified cell, false to highlight the modified cell.
 * @return {void}
 */
ASPxClientCardViewBatchEditApi.prototype.SetCellValue = function(visibleIndex, columnFieldNameOrId, value, displayText, cancelCellHighlighting) {};

/**
 * Gets the value of the specified cell.
 * @param {number} visibleIndex A zero-based integer value that specifies the visible index of a card containing the processed cell.
 * @param {string} columnFieldNameOrId A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
 * @param {boolean=} initial true, to return the initial (server) value; false, to return a value currently contained on the client side (modified value).
 * @return {!Object}
 */
ASPxClientCardViewBatchEditApi.prototype.GetCellValue = function(visibleIndex, columnFieldNameOrId, initial) {};

/**
 * Gets information about the cell currently being edited.
 * @return {!ASPxClientCardViewCellInfo}
 */
ASPxClientCardViewBatchEditApi.prototype.GetEditCellInfo = function() {};

/**
 * Returns a value that indicates whether the card view has changed data.
 * Returns a value that indicates whether the specified card has changed data.
 * Returns a value that indicates whether the specified cell's data has been changed.
 * @param {number=} visibleIndex An integer value that specifies the visible index of a card.
 * @param {string=} columnFieldNameOrId A string value that specifies the column's field name or unique identifier (the column's Name property value).
 * @return {boolean}
 */
ASPxClientCardViewBatchEditApi.prototype.HasChanges = function(visibleIndex, columnFieldNameOrId) {};

/**
 * Resets changes in the specified card.
 * Resets changes in the specified cell.
 * @param {number} visibleIndex An integer value that specifies the visible index of a card. / An integer value that specifies the visible index of a card containing the processed cell.
 * @param {number=} columnIndex A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
 * @return {void}
 */
ASPxClientCardViewBatchEditApi.prototype.ResetChanges = function(visibleIndex, columnIndex) {};

/**
 * Switches the specified cell to edit mode.
 * @param {number} visibleIndex A zero-based integer value that specifies the visible index of a card containing the processed cell.
 * @param {number} columnIndex A zero-based integer value that identifies the column which contains the processed cell in the column collection.
 * @return {void}
 */
ASPxClientCardViewBatchEditApi.prototype.StartEdit = function(visibleIndex, columnIndex) {};

/**
 * Ends cell or card editing.
 * @return {void}
 */
ASPxClientCardViewBatchEditApi.prototype.EndEdit = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientCardViewCellInfo() {}
 /** @type {number} */
ASPxClientCardViewCellInfo.prototype.cardVisibleIndex;
 /** @type {!ASPxClientCardViewColumn} */
ASPxClientCardViewCellInfo.prototype.column;
/**
 * @record
 * @struct
 */
function ASPxClientGridView() {}
 /** @type {!ASPxClientGridViewBatchEditApi} */
ASPxClientGridView.prototype.batchEditApi;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewCustomButtonEventHandler<?>>} */
ASPxClientGridView.prototype.CustomButtonClick;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewSelectionEventHandler<?>>} */
ASPxClientGridView.prototype.SelectionChanged;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewColumnCancelEventHandler<?>>} */
ASPxClientGridView.prototype.ColumnSorting;
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientGridView.prototype.FocusedRowChanged;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewColumnCancelEventHandler<?>>} */
ASPxClientGridView.prototype.ColumnGrouping;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewColumnCancelEventHandler<?>>} */
ASPxClientGridView.prototype.ColumnStartDragging;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewColumnCancelEventHandler<?>>} */
ASPxClientGridView.prototype.ColumnResizing;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewColumnProcessingModeEventHandler<?>>} */
ASPxClientGridView.prototype.ColumnResized;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewColumnMovingEventHandler<?>>} */
ASPxClientGridView.prototype.ColumnMoving;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewRowCancelEventHandler<?>>} */
ASPxClientGridView.prototype.RowExpanding;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewRowCancelEventHandler<?>>} */
ASPxClientGridView.prototype.RowCollapsing;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewRowCancelEventHandler<?>>} */
ASPxClientGridView.prototype.DetailRowExpanding;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewRowCancelEventHandler<?>>} */
ASPxClientGridView.prototype.DetailRowCollapsing;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewRowClickEventHandler<?>>} */
ASPxClientGridView.prototype.RowClick;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewRowClickEventHandler<?>>} */
ASPxClientGridView.prototype.RowDblClick;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewContextMenuEventHandler<?>>} */
ASPxClientGridView.prototype.ContextMenu;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewContextMenuItemClickEventHandler<?>>} */
ASPxClientGridView.prototype.ContextMenuItemClick;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewBatchEditRowValidatingEventHandler<?>>} */
ASPxClientGridView.prototype.BatchEditRowValidating;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewBatchEditConfirmShowingEventHandler<?>>} */
ASPxClientGridView.prototype.BatchEditConfirmShowing;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewBatchEditStartEditingEventHandler<?>>} */
ASPxClientGridView.prototype.BatchEditStartEditing;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewBatchEditEndEditingEventHandler<?>>} */
ASPxClientGridView.prototype.BatchEditEndEditing;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewBatchEditTemplateCellFocusedEventHandler<?>>} */
ASPxClientGridView.prototype.BatchEditTemplateCellFocused;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewBatchEditChangesSavingEventHandler<?>>} */
ASPxClientGridView.prototype.BatchEditChangesSaving;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewBatchEditChangesCancelingEventHandler<?>>} */
ASPxClientGridView.prototype.BatchEditChangesCanceling;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewBatchEditRowInsertingEventHandler<?>>} */
ASPxClientGridView.prototype.BatchEditRowInserting;
 /** @type {!ASPxClientEvent<!ASPxClientGridViewBatchEditRowDeletingEventHandler<?>>} */
ASPxClientGridView.prototype.BatchEditRowDeleting;
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientGridView.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientGridView.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientGridView.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientGridView.prototype.CustomizationWindowCloseUp;

/**
 * Deselects the specified rows (if selected) within the grid.
 * Deselects the specified row (if selected) within the grid.
 * Deselects all the selected rows within the grid.
 * @param {!Array<number>|number=} visibleIndices_or_visibleIndex An array of zero-based indices that identify data rows within the grid. / A zero-based integer value that specifies the row's visible index.
 * @return {void}
 */
ASPxClientGridView.prototype.UnselectRows = function(visibleIndices_or_visibleIndex) {};

/**
 * Deselects all grid rows that match the filter criteria currently applied to the grid.
 * @return {void}
 */
ASPxClientGridView.prototype.UnselectFilteredRows = function() {};

/**
 * Selects the specified row displayed on the current page.
 * Selects or deselects the specified row displayed on the current page.
 * @param {number} visibleIndex A zero-based integer value that specifies the row's visible index.
 * @param {boolean=} selected true to select the specified row; false to deselect the row.
 * @return {void}
 */
ASPxClientGridView.prototype.SelectRowOnPage = function(visibleIndex, selected) {};

/**
 * Deselects the specified row (if selected) displayed on the current page.
 * @param {number} visibleIndex A zero-based integer value that specifies the row's visible index.
 * @return {void}
 */
ASPxClientGridView.prototype.UnselectRowOnPage = function(visibleIndex) {};

/**
 * Selects all unselected rows displayed on the current page.
 * Allows you to select or deselect all rows displayed on the current page based on the parameter passed.
 * @param {boolean=} selected true to select all unselected rows displayed on the current page; false to deselect all selected rows on the page.
 * @return {void}
 */
ASPxClientGridView.prototype.SelectAllRowsOnPage = function(selected) {};

/**
 * Deselects all selected rows displayed on the current page.
 * @return {void}
 */
ASPxClientGridView.prototype.UnselectAllRowsOnPage = function() {};

/**
 * Returns the number of selected rows.
 * @return {number}
 */
ASPxClientGridView.prototype.GetSelectedRowCount = function() {};

/**
 * Indicates whether or not the specified row is selected within the current page.
 * @param {number} visibleIndex An integer value that identifies the row by its visible index.
 * @return {boolean}
 */
ASPxClientGridView.prototype.IsRowSelectedOnPage = function(visibleIndex) {};

/**
 * Indicates whether the specified row is a group row.
 * @param {number} visibleIndex An integer value that identifies the row by its visible index.
 * @return {boolean}
 */
ASPxClientGridView.prototype.IsGroupRow = function(visibleIndex) {};

/**
 * Indicates whether the specified row is a data row.
 * @param {number} visibleIndex An integer value that identifies the row by its visible index.
 * @return {boolean}
 */
ASPxClientGridView.prototype.IsDataRow = function(visibleIndex) {};

/**
 * Indicates whether the specified group row is expanded.
 * @param {number} visibleIndex An integer value that identifies the group row by its visible index.
 * @return {boolean}
 */
ASPxClientGridView.prototype.IsGroupRowExpanded = function(visibleIndex) {};

/**
 * Returns the current vertical scroll position of the grid's content.
 * @return {number}
 */
ASPxClientGridView.prototype.GetVertScrollPos = function() {};

/**
 * Returns the current horizontal scroll position of the grid's content.
 * @return {number}
 */
ASPxClientGridView.prototype.GetHorzScrollPos = function() {};

/**
 * Returns the current horizontal scroll position of the grid's content.
 * @return {number}
 */
ASPxClientGridView.prototype.GetHorizontalScrollPosition = function() {};

/**
 * Specifies the vertical scroll position for the grid's content.
 * @param {number} position An integer value specifying the vertical scroll position.
 * @return {void}
 */
ASPxClientGridView.prototype.SetVertScrollPos = function(position) {};

/**
 * Specifies the horizontal scroll position for the grid's content.
 * @param {number} position An integer value specifying the horizontal scroll position.
 * @return {void}
 */
ASPxClientGridView.prototype.SetHorzScrollPos = function(position) {};

/**
 * Specifies the horizontal scroll position for the grid's content.
 * @param {number} position An integer value specifying the horizontal scroll position.
 * @return {void}
 */
ASPxClientGridView.prototype.SetHorizontalScrollPosition = function(position) {};

/**
 * Sets the scrollability of various types of grid rows when the grid displays fixed columns.
 * @param {!Object} scrollableRowSettings An object specifying which types of grid rows should or should not be scrollable.
 * @return {void}
 */
ASPxClientGridView.prototype.SetFixedColumnScrollableRows = function(scrollableRowSettings) {};

/**
 * Applies a filter specified in the filter row to the GridView.
 * @return {void}
 */
ASPxClientGridView.prototype.ApplyOnClickRowFilter = function() {};

/**
 * Returns the editor used to edit the value in the auto filter row for the specified data column.
 * Returns the editor used to edit the value in the auto filter row for the specified data column.
 * Returns the editor used to edit the value in the auto filter row for the specified data column.
 * @param {!ASPxClientGridViewColumn|number|string} column_or_columnIndex_or_columnFieldNameOrId An ASPxClientGridViewColumn object that represents the data colum within the ASPxGridView. / An integer value that identifies the data column by its index. / A string value that specifies the column's name or its data base field name.
 * @return {!Object}
 */
ASPxClientGridView.prototype.GetAutoFilterEditor = function(column_or_columnIndex_or_columnFieldNameOrId) {};

/**
 * Applies a filter to the specified data column.
 * Applies a filter to the specified data column.
 * Applies a filter to the specified data column.
 * @param {!ASPxClientGridViewColumn|number|string} column_or_columnIndex_or_columnFieldNameOrId An ASPxClientGridViewColumn object that represents the data column within the client GridView. / An integer value that specifies the column's position within the column collection. / A string value that specifies the column's field name or unique identifier (the column's Name property value).
 * @param {string} val A string value that specifies the filter expression.
 * @return {void}
 */
ASPxClientGridView.prototype.AutoFilterByColumn = function(column_or_columnIndex_or_columnFieldNameOrId, val) {};

/**
 * Applies the specified search panel filter criterion to grid data.
 * @param {string} value A string value that specifies the filter criterion.
 * @return {void}
 */
ASPxClientGridView.prototype.ApplySearchPanelFilter = function(value) {};

/**
 * Applies the specified filter expression to the GridView.
 * @param {string} filterExpression A string value that specifies the filter expression.
 * @return {void}
 */
ASPxClientGridView.prototype.ApplyFilter = function(filterExpression) {};

/**
 * Clears the filter expression applied to a client GridView.
 * @return {void}
 */
ASPxClientGridView.prototype.ClearFilter = function() {};

/**
 * Gets the Popup Edit Form.
 * @return {?}
 */
ASPxClientGridView.prototype.GetPopupEditForm = function() {};

/**
 * Sets input focus to the grid.
 * @return {void}
 */
ASPxClientGridView.prototype.Focus = function() {};

/**
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 *
 * @param {string} args A string value that represents any information that needs to be sent to the server-side CustomCallback event.
 * @param {function(string): void=} onSuccess
 * @return {void}
 */
ASPxClientGridView.prototype.PerformCallback = function(args, onSuccess) {};

/**
 * Selects the specified page.
 * @param {number} pageIndex An integer value that specifies the active page's index.
 * @return {void}
 */
ASPxClientGridView.prototype.GotoPage = function(pageIndex) {};

/**
 * Gets the index of the page currently being selected.
 * @return {number}
 */
ASPxClientGridView.prototype.GetPageIndex = function() {};

/**
 * Gets the number of pages to which the grid's data is divided.
 * @return {number}
 */
ASPxClientGridView.prototype.GetPageCount = function() {};

/**
 * Activates the next page.
 * @return {void}
 */
ASPxClientGridView.prototype.NextPage = function() {};

/**
 * Activates the previous page.
 * @return {void}
 */
ASPxClientGridView.prototype.PrevPage = function() {};

/**
 * Returns the index of the first data row displayed within the GridView's active page.
 * @return {number}
 */
ASPxClientGridView.prototype.GetTopVisibleIndex = function() {};

/**
 * Indicates whether the grid is in edit mode.
 * @return {boolean}
 */
ASPxClientGridView.prototype.IsEditing = function() {};

/**
 * Saves all the changes made and switches the grid to browse mode.
 * @return {void}
 */
ASPxClientGridView.prototype.UpdateEdit = function() {};

/**
 * Cancels all the changes made and switches the GridView to browse mode.
 * @return {void}
 */
ASPxClientGridView.prototype.CancelEdit = function() {};

/**
 * Updates data displayed within the grid.
 * @return {void}
 */
ASPxClientGridView.prototype.Refresh = function() {};

/**
 * Indicates whether the Customization Window is displayed.
 * @return {boolean}
 */
ASPxClientGridView.prototype.IsCustomizationWindowVisible = function() {};

/**
 * Invokes the Customization Window.
 * Invokes the Customization Window and displays it over the specified HTML element.
 * @param {!Object=} showAtElement An object that specifies the HTML element relative to whose position the customization window is invoked.
 * @return {void}
 */
ASPxClientGridView.prototype.ShowCustomizationWindow = function(showAtElement) {};

/**
 * Closes the Customization Window.
 * @return {void}
 */
ASPxClientGridView.prototype.HideCustomizationWindow = function() {};

/**
 * Returns the number of columns within the client GridView.
 * @return {number}
 */
ASPxClientGridView.prototype.GetColumnsCount = function() {};

/**
 * Returns the number of columns within the client GridView.
 * @return {number}
 */
ASPxClientGridView.prototype.GetColumnCount = function() {};

/**
 * Returns the row values displayed within all selected rows.
 * @param {string} fieldNames The names of data source fields separated via a semicolon, whose values within the selected rows are returned.
 * @param {!ASPxClientGridViewValuesCallback} onCallback A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
 * @return {void}
 */
ASPxClientGridView.prototype.GetSelectedFieldValues = function(fieldNames, onCallback) {};

/**
 * Returns key values of selected rows displayed within the current page.
 * @return {!Array<!Object>}
 */
ASPxClientGridView.prototype.GetSelectedKeysOnPage = function() {};

/**
 * Sends a callback to the server and generates the server-side CustomDataCallback event.
 * @param {string} args A string value that is any information that needs to be sent to the server-side CustomDataCallback event.
 * @param {!ASPxClientGridViewValuesCallback} onCallback A ASPxClientGridViewValuesCallback object that is the JavaScript function which receives the information on the client side.
 * @return {void}
 */
ASPxClientGridView.prototype.GetValuesOnCustomCallback = function(args, onCallback) {};

/**
 * Returns the values of the specified data source fields within the specified row.
 * @param {number} visibleIndex An integer value that identifies the data row.
 * @param {string} fieldNames The names of data source fields separated via a semicolon, whose values within the specified row are returned.
 * @param {!ASPxClientGridViewValuesCallback} onCallback An ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
 * @return {void}
 */
ASPxClientGridView.prototype.GetRowValues = function(visibleIndex, fieldNames, onCallback) {};

/**
 * Returns the row values displayed within the current page.
 * @param {string} fieldNames The names of data source fields whose values are returned.
 * @param {!ASPxClientGridViewValuesCallback} onCallback A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
 * @return {void}
 */
ASPxClientGridView.prototype.GetPageRowValues = function(fieldNames, onCallback) {};

/**
 * Returns the number of rows actually displayed within the active page.
 * @return {number}
 */
ASPxClientGridView.prototype.GetVisibleRowsOnPage = function() {};

/**
 * Returns the client column that resides at the specified position within the column collection.
 * @param {number} columnIndex A zero-based index that identifies the column within the column collection (the column's Index property value).
 * @return {!ASPxClientGridViewColumn}
 */
ASPxClientGridView.prototype.GetColumn = function(columnIndex) {};

/**
 * Returns the column with the specified unique identifier.
 * @param {string} columnId A string value that specifies the column's unique identifier (the column's Name property value).
 * @return {!ASPxClientGridViewColumn}
 */
ASPxClientGridView.prototype.GetColumnById = function(columnId) {};

/**
 * Returns the client column which is bound to the specified data source field.
 * @param {string} columnFieldName A string value that specifies the name of the data source field to which the column is bound (the column's FieldName property value).
 * @return {!ASPxClientGridViewColumn}
 */
ASPxClientGridView.prototype.GetColumnByField = function(columnFieldName) {};

/**
 * Returns the editor used to edit the specified column's values.
 * Returns the editor used to edit the specified column's values.
 * Returns the editor used to edit the specified column's values.
 * @param {!ASPxClientGridViewColumn|number|string} column_or_columnIndex_or_columnFieldNameOrId An ASPxClientGridViewColumn object that specifies the required column within the client grid. / An integer value that specifies the column's position within the column collection. / A string value that specifies the column's field name or unique identifier (the column's Name property value).
 * @return {?}
 */
ASPxClientGridView.prototype.GetEditor = function(column_or_columnIndex_or_columnFieldNameOrId) {};

/**
 * Returns the value of the specified edit cell.
 * Returns the value of the specified edit cell.
 * Returns the value of the specified edit cell.
 * @param {!ASPxClientGridViewColumn|number|string} column_or_columnIndex_or_columnFieldNameOrId An ASPxClientGridViewColumn object that represents the data column within the client grid. / An integer value that identifies the data column within the grid's column collection. / A string value that specifies the column's field name or unique identifier (the column's Name property value).
 * @return {string}
 */
ASPxClientGridView.prototype.GetEditValue = function(column_or_columnIndex_or_columnFieldNameOrId) {};

/**
 * Moves focus to the specified edit cell within the edited row.
 * Moves focus to the specified edit cell within the edited row.
 * Moves focus to the specified edit cell within the edited row.
 * @param {!ASPxClientGridViewColumn|number|string} column_or_columnIndex_or_columnFieldNameOrId An ASPxClientGridViewColumn object that represents the data column within the client grid. / An integer value that specifies the column's position within the columns collection. / A string value that specifies the column's field name or unique identifier (the column's Name property value).
 * @return {void}
 */
ASPxClientGridView.prototype.FocusEditor = function(column_or_columnIndex_or_columnFieldNameOrId) {};

/**
 * Sets the value of the specified edit cell.
 * Sets the value of the specified edit cell.
 * Sets the value of the specified edit cell.
 * @param {!ASPxClientGridViewColumn|number|string} column_or_columnIndex_or_columnFieldNameOrId An ASPxClientGridViewColumn object that represents the data column within the client grid. / An integer value that identifies the data column within the grid's column collection. / A string value that specifies the column's field name or unique identifier (the column's Name property value).
 * @param {string} value A string value that specifies the edit cell's new value.
 * @return {void}
 */
ASPxClientGridView.prototype.SetEditValue = function(column_or_columnIndex_or_columnFieldNameOrId, value) {};

/**
 * Displays the Filter Control.
 * @return {void}
 */
ASPxClientGridView.prototype.ShowFilterControl = function() {};

/**
 * Hides the Filter Control.
 * @return {void}
 */
ASPxClientGridView.prototype.CloseFilterControl = function() {};

/**
 * Enables or disables the current filter.
 * @param {boolean} isFilterEnabled true to enable the current filter; otherwise, false.
 * @return {void}
 */
ASPxClientGridView.prototype.SetFilterEnabled = function(isFilterEnabled) {};

/**
 * Returns the current vertical scroll position of the grid's content.
 * @return {number}
 */
ASPxClientGridView.prototype.GetVerticalScrollPosition = function() {};

/**
 * Specifies the vertical scroll position for the grid's content.
 * @param {number} position An integer value specifying the vertical scroll position.
 * @return {void}
 */
ASPxClientGridView.prototype.SetVerticalScrollPosition = function(position) {};

/**
 * Gets information about a focused cell.
 * @return {!ASPxClientGridViewCellInfo}
 */
ASPxClientGridView.prototype.GetFocusedCell = function() {};

/**
 * Focuses the specified cell.
 * @param {number} rowVisibleIndex An integer value that specifies the visible index of the row.
 * @param {number} columnIndex A zero-based index that identifies the column in the column collection (the column's Index property value).
 * @return {void}
 */
ASPxClientGridView.prototype.SetFocusedCell = function(rowVisibleIndex, columnIndex) {};

/**
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
 * Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
 * Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
 * @param {!ASPxClientGridViewColumn|number|string} column_or_columnIndex_or_columnFieldNameOrId An ASPxClientGridViewColumn object that represents the data column. / An integer value that specifies the column's position within the column collection. / A string value that specifies the column's field name or unique identifier (the column's Name property value).
 * @param {string=} sortOrder A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
 * @param {boolean=} reset true to clear any previous sorting; otherwise, false.
 * @param {number=} sortIndex An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
 * @return {void}
 */
ASPxClientGridView.prototype.SortBy = function(column_or_columnIndex_or_columnFieldNameOrId, sortOrder, reset, sortIndex) {};

/**
 * Hides the specified column.
 * Hides the specified column.
 * Hides the specified column.
 * Moves the specified column to the specified visual position within the grid.
 * Moves the specified column to the specified visual position within the grid.
 * Moves the specified column to the specified visual position within the grid.
 * Moves the specified column to the specified visual position within the grid.
 * Moves the specified column to the specified visual position within the grid.
 * Moves the specified column to the specified visual position within the grid.
 * Moves the specified column to the specified visual position within the grid and optionally groups the grid's data by this column.
 * Moves the specified column to the specified visual position within the grid and optionally groups the grid's data by this column.
 * Moves the specified column to the specified visual position within the grid and optionally groups the grid's data by this column.
 * Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
 * Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
 * Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
 * Moves the specified column to the specified visual position within the grid.
 * Moves the specified column to the specified visual position within the grid.
 * Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
 * Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
 * @param {!ASPxClientGridViewColumn|number|string} column_or_columnIndex_or_columnFieldNameOrId An ASPxClientGridViewColumn object that represents the column to hide. / An integer value that specifies the absolute index of the column to hide. / A String value that identifies the column to be hidden by the name of the data source field to which the column is bound, or by the column's name. / An ASPxClientGridViewColumn object that represents the column to move. / An integer value that specifies the absolute index of the column to move. / A String value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name. / A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
 * @param {number=} moveToColumnVisibleIndex An integer value that specifies the column's position among the visible columns within the grid. / An integer value that identifies the target column displayed within the grid.
 * @param {boolean|!ASPxClientGridColumnMovingTargetPosition=} moveBefore_or_targetPosition true to move the column before the target column; otherwise, false. / An ASPxClientGridColumnMovingTargetPosition enumeration value specifying the position relative to the target column in which to place the moved column.
 * @param {boolean=} moveToGroup true to group the grid's data by the column; otherwise, false. / true to group the ASPxGridView's data by the column; otherwise, false. / true, to group the ASPxGridView's data by the column; otherwise, false. / true, to group the grid's data by the column; otherwise, false.
 * @param {boolean=} moveFromGroup true to ungroup the grid's data by the column; otherwise, false. / true, to ungroup the grid's data by the column; otherwise, false.
 * @return {void}
 */
ASPxClientGridView.prototype.MoveColumn = function(column_or_columnIndex_or_columnFieldNameOrId, moveToColumnVisibleIndex, moveBefore_or_targetPosition, moveToGroup, moveFromGroup) {};

/**
 * Groups data by the values of the specified column.
 * Groups data by the values of the specified column.
 * Groups data by the values of the specified column.
 * Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
 * Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
 * Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
 * Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
 * Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
 * Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
 * @param {!ASPxClientGridViewColumn|number|string} column_or_columnIndex_or_columnFieldNameOrId An ASPxClientGridViewColumn object that represents the data column by whose values data is grouped. / An integer value that specifies the column's position within the column collection. / A string value that specifies the column's field name or unique identifier (the column's Name property value).
 * @param {number=} groupIndex An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
 * @param {string=} sortOrder A string value that specifies the column's sort order.
 * @return {void}
 */
ASPxClientGridView.prototype.GroupBy = function(column_or_columnIndex_or_columnFieldNameOrId, groupIndex, sortOrder) {};

/**
 * Ungroups data by the values of the specified column.
 * Ungroups data by the values of the specified column.
 * Ungroups data by the values of the specified column.
 * @param {!ASPxClientGridViewColumn|number|string} column_or_columnIndex_or_columnFieldNameOrId An ASPxClientGridViewColumn object that represents the data column within the ASPxGridView. / An integer value that specifies the column's position within the column collection. / A string value that specifies the column's field name or unique identifier (the column's Name property value).
 * @return {void}
 */
ASPxClientGridView.prototype.UnGroup = function(column_or_columnIndex_or_columnFieldNameOrId) {};

/**
 * Expands all group rows.
 * @return {void}
 */
ASPxClientGridView.prototype.ExpandAll = function() {};

/**
 * Collapses all group rows.
 * @return {void}
 */
ASPxClientGridView.prototype.CollapseAll = function() {};

/**
 * Expands all detail rows.
 * @return {void}
 */
ASPxClientGridView.prototype.ExpandAllDetailRows = function() {};

/**
 * Collapses all detail rows.
 * @return {void}
 */
ASPxClientGridView.prototype.CollapseAllDetailRows = function() {};

/**
 * Expands the specified group row preserving the collapsed state of any child group row.
 * Expands the specified group row and optionally child group rows at all nesting levels.
 * @param {number} visibleIndex An integer value that identifies the group row.
 * @param {boolean=} recursive true to expand any child group rows at all nesting levels; false to preserve the collapsed state of any child group rows.
 * @return {void}
 */
ASPxClientGridView.prototype.ExpandRow = function(visibleIndex, recursive) {};

/**
 * Collapses the specified group row preserving the expanded state of child group rows.
 * Collapses the specified group row and optionally child group rows at all nesting levels.
 * @param {number} visibleIndex An integer value that identifies the group row by its visible index.
 * @param {boolean=} recursive true to collapse child group rows at all nesting levels; false to preserve the expanded state of any child group row.
 * @return {void}
 */
ASPxClientGridView.prototype.CollapseRow = function(visibleIndex, recursive) {};

/**
 * Scrolls the view to the specified row.
 * @param {number} visibleIndex An integer value that identifies a row by its visible index.
 * @return {void}
 */
ASPxClientGridView.prototype.MakeRowVisible = function(visibleIndex) {};

/**
 * Expands the specified detail row.
 * @param {number} visibleIndex A zero-based integer index that identifies the detail row.
 * @return {void}
 */
ASPxClientGridView.prototype.ExpandDetailRow = function(visibleIndex) {};

/**
 * Collapses the specified detail row.
 * @param {number} visibleIndex A zero-based integer index that identifies the detail row.
 * @return {void}
 */
ASPxClientGridView.prototype.CollapseDetailRow = function(visibleIndex) {};

/**
 * Returns the key value of the specified data row.
 * @param {number} visibleIndex An integer value that specifies the row's visible index.
 * @return {string}
 */
ASPxClientGridView.prototype.GetRowKey = function(visibleIndex) {};

/**
 * Switches the grid to edit mode.
 * @param {number} visibleIndex A zero-based integer that identifies a data row to be edited.
 * @return {void}
 */
ASPxClientGridView.prototype.StartEditRow = function(visibleIndex) {};

/**
 * Switches the grid to edit mode.
 * @param {!Object} key An object that uniquely identifies a data row to be edited.
 * @return {void}
 */
ASPxClientGridView.prototype.StartEditRowByKey = function(key) {};

/**
 * Indicates whether or not a new row is being edited.
 * @return {boolean}
 */
ASPxClientGridView.prototype.IsNewRowEditing = function() {};

/**
 * Adds a new record.
 * @return {void}
 */
ASPxClientGridView.prototype.AddNewRow = function() {};

/**
 * Deletes the specified row.
 * @param {number} visibleIndex An integer value that identifies the row.
 * @return {void}
 */
ASPxClientGridView.prototype.DeleteRow = function(visibleIndex) {};

/**
 * Deletes a row with the specified key value.
 * @param {!Object} key An object that uniquely identifies the row.
 * @return {void}
 */
ASPxClientGridView.prototype.DeleteRowByKey = function(key) {};

/**
 * Returns the focused row's index.
 * @return {number}
 */
ASPxClientGridView.prototype.GetFocusedRowIndex = function() {};

/**
 * Moves focus to the specified row.
 * @param {number} visibleIndex An integer value that specifies the focused row's index.
 * @return {void}
 */
ASPxClientGridView.prototype.SetFocusedRowIndex = function(visibleIndex) {};

/**
 * Selects all the unselected rows within the grid.
 * Selects the specified row displayed within the grid.
 * Selects the specified rows within the grid.
 * Selects or deselects the specified rows within the grid.
 * Selects or deselects the specified row within the grid.
 * @param {number|!Array<number>=} visibleIndex_or_visibleIndices A zero-based integer value that specifies the row's visible index. / An array of zero-based indices that identify data rows within the grid. / An integer zero-based index that identifies the data row within the grid.
 * @param {boolean=} selected true to select the specified rows; false to deselect the rows. / true to select the specified row; false to deselect the row.
 * @return {void}
 */
ASPxClientGridView.prototype.SelectRows = function(visibleIndex_or_visibleIndices, selected) {};

/**
 * Selects or deselects the specified rows displayed within the grid.
 * Selects or deselects the specified row displayed within the grid.
 * Selects the specified rows displayed within the grid.
 * Selects a grid row by its key.
 * @param {!Array<!Object>|!Object} keys_or_key An array of objects that uniquely identify the rows. / An object that uniquely identifies the row.
 * @param {boolean=} selected true to select the specified rows; false to deselect the rows. / true to select the specified row; false to deselect the row.
 * @return {void}
 */
ASPxClientGridView.prototype.SelectRowsByKey = function(keys_or_key, selected) {};

/**
 * Deselects the specified rows displayed within the grid.
 * Deselects the specified row displayed within the grid.
 * @param {!Array<!Object>|!Object} keys_or_key An array of objects that uniquely identify the rows. / An object that uniquely identifies the row.
 * @return {void}
 */
ASPxClientGridView.prototype.UnselectRowsByKey = function(keys_or_key) {};
/**
 * @extends {ASPxClientGridColumnBase}
 * @record
 * @struct
 */
function ASPxClientGridViewColumn() {}
 /** @type {string} */
ASPxClientGridViewColumn.prototype.id;
 /** @type {string} */
ASPxClientGridViewColumn.prototype.name;
 /** @type {number} */
ASPxClientGridViewColumn.prototype.index;
 /** @type {string} */
ASPxClientGridViewColumn.prototype.fieldName;
 /** @type {boolean} */
ASPxClientGridViewColumn.prototype.visible;
/**
 * @record
 * @struct
 */
function ASPxClientGridViewValuesCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientGridViewColumnCancelEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientGridViewColumnCancelEventArgs() {}
 /** @type {!ASPxClientGridViewColumn} */
ASPxClientGridViewColumnCancelEventArgs.prototype.column;
/**
 * @record
 * @struct
 */
function ASPxClientGridViewColumnProcessingModeEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientGridViewColumnProcessingModeEventArgs() {}
 /** @type {!ASPxClientGridViewColumn} */
ASPxClientGridViewColumnProcessingModeEventArgs.prototype.column;
/**
 * @record
 * @struct
 */
function ASPxClientGridViewRowCancelEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientGridViewRowCancelEventArgs() {}
 /** @type {number} */
ASPxClientGridViewRowCancelEventArgs.prototype.visibleIndex;
/**
 * @record
 * @struct
 */
function ASPxClientGridViewSelectionEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientGridViewSelectionEventArgs() {}
 /** @type {number} */
ASPxClientGridViewSelectionEventArgs.prototype.visibleIndex;
 /** @type {boolean} */
ASPxClientGridViewSelectionEventArgs.prototype.isSelected;
 /** @type {boolean} */
ASPxClientGridViewSelectionEventArgs.prototype.isAllRecordsOnPage;
 /** @type {boolean} */
ASPxClientGridViewSelectionEventArgs.prototype.isChangedOnServer;
/**
 * @record
 * @struct
 */
function ASPxClientGridViewRowClickEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientGridViewRowCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientGridViewRowClickEventArgs() {}
 /** @type {!Object} */
ASPxClientGridViewRowClickEventArgs.prototype.htmlEvent;
/**
 * @record
 * @struct
 */
function ASPxClientGridViewContextMenuEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientGridViewContextMenuEventArgs() {}
 /** @type {string} */
ASPxClientGridViewContextMenuEventArgs.prototype.objectType;
 /** @type {number} */
ASPxClientGridViewContextMenuEventArgs.prototype.index;
 /** @type {!Object} */
ASPxClientGridViewContextMenuEventArgs.prototype.htmlEvent;
 /** @type {!Object} */
ASPxClientGridViewContextMenuEventArgs.prototype.menu;
 /** @type {boolean} */
ASPxClientGridViewContextMenuEventArgs.prototype.showBrowserMenu;
/**
 * @record
 * @struct
 */
function ASPxClientGridViewContextMenuItemClickEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientGridViewContextMenuItemClickEventArgs() {}
 /** @type {!ASPxClientMenuItem} */
ASPxClientGridViewContextMenuItemClickEventArgs.prototype.item;
 /** @type {string} */
ASPxClientGridViewContextMenuItemClickEventArgs.prototype.objectType;
 /** @type {number} */
ASPxClientGridViewContextMenuItemClickEventArgs.prototype.elementIndex;
 /** @type {boolean} */
ASPxClientGridViewContextMenuItemClickEventArgs.prototype.usePostBack;
 /** @type {boolean} */
ASPxClientGridViewContextMenuItemClickEventArgs.prototype.handled;
/**
 * @record
 * @struct
 */
function ASPxClientGridViewCustomButtonEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientGridViewCustomButtonEventArgs() {}
 /** @type {number} */
ASPxClientGridViewCustomButtonEventArgs.prototype.visibleIndex;
 /** @type {string} */
ASPxClientGridViewCustomButtonEventArgs.prototype.buttonID;
/**
 * @record
 * @struct
 */
function ASPxClientGridViewColumnMovingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientGridViewColumnMovingEventArgs() {}
 /** @type {boolean} */
ASPxClientGridViewColumnMovingEventArgs.prototype.allow;
 /** @type {!ASPxClientGridViewColumn} */
ASPxClientGridViewColumnMovingEventArgs.prototype.sourceColumn;
 /** @type {!ASPxClientGridViewColumn} */
ASPxClientGridViewColumnMovingEventArgs.prototype.destinationColumn;
 /** @type {boolean} */
ASPxClientGridViewColumnMovingEventArgs.prototype.isDropBefore;
 /** @type {boolean} */
ASPxClientGridViewColumnMovingEventArgs.prototype.isGroupPanel;
/**
 * @record
 * @struct
 */
function ASPxClientGridViewBatchEditConfirmShowingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientGridViewBatchEditConfirmShowingEventArgs() {}
 /** @type {string} */
ASPxClientGridViewBatchEditConfirmShowingEventArgs.prototype.requestTriggerID;
/**
 * @record
 * @struct
 */
function ASPxClientGridViewBatchEditStartEditingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientGridViewBatchEditStartEditingEventArgs() {}
 /** @type {number} */
ASPxClientGridViewBatchEditStartEditingEventArgs.prototype.visibleIndex;
 /** @type {!ASPxClientGridViewColumn} */
ASPxClientGridViewBatchEditStartEditingEventArgs.prototype.focusedColumn;
 /** @type {!Object} */
ASPxClientGridViewBatchEditStartEditingEventArgs.prototype.rowValues;
/**
 * @record
 * @struct
 */
function ASPxClientGridViewBatchEditEndEditingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientGridViewBatchEditEndEditingEventArgs() {}
 /** @type {number} */
ASPxClientGridViewBatchEditEndEditingEventArgs.prototype.visibleIndex;
 /** @type {!Object} */
ASPxClientGridViewBatchEditEndEditingEventArgs.prototype.rowValues;
/**
 * @record
 * @struct
 */
function ASPxClientGridViewBatchEditRowValidatingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientGridViewBatchEditRowValidatingEventArgs() {}
 /** @type {number} */
ASPxClientGridViewBatchEditRowValidatingEventArgs.prototype.visibleIndex;
 /** @type {!Object} */
ASPxClientGridViewBatchEditRowValidatingEventArgs.prototype.validationInfo;
/**
 * @record
 * @struct
 */
function ASPxClientGridViewBatchEditTemplateCellFocusedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs() {}
 /** @type {!ASPxClientGridViewColumn} */
ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs.prototype.column;
 /** @type {boolean} */
ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs.prototype.handled;
/**
 * @record
 * @struct
 */
function ASPxClientGridViewBatchEditChangesSavingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientGridViewBatchEditChangesSavingEventArgs() {}
 /** @type {!Object} */
ASPxClientGridViewBatchEditChangesSavingEventArgs.prototype.insertedValues;
 /** @type {!Object} */
ASPxClientGridViewBatchEditChangesSavingEventArgs.prototype.deletedValues;
 /** @type {!Object} */
ASPxClientGridViewBatchEditChangesSavingEventArgs.prototype.updatedValues;
/**
 * @record
 * @struct
 */
function ASPxClientGridViewBatchEditChangesCancelingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientGridViewBatchEditChangesCancelingEventArgs() {}
 /** @type {!Object} */
ASPxClientGridViewBatchEditChangesCancelingEventArgs.prototype.insertedValues;
 /** @type {!Object} */
ASPxClientGridViewBatchEditChangesCancelingEventArgs.prototype.deletedValues;
 /** @type {!Object} */
ASPxClientGridViewBatchEditChangesCancelingEventArgs.prototype.updatedValues;
/**
 * @record
 * @struct
 */
function ASPxClientGridViewBatchEditRowInsertingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientGridViewBatchEditRowInsertingEventArgs() {}
 /** @type {number} */
ASPxClientGridViewBatchEditRowInsertingEventArgs.prototype.visibleIndex;
/**
 * @record
 * @struct
 */
function ASPxClientGridViewBatchEditRowDeletingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientGridViewBatchEditRowDeletingEventArgs() {}
 /** @type {number} */
ASPxClientGridViewBatchEditRowDeletingEventArgs.prototype.visibleIndex;
 /** @type {!Object} */
ASPxClientGridViewBatchEditRowDeletingEventArgs.prototype.rowValues;
/**
 * @record
 * @struct
 */
function ASPxClientGridViewCellInfo() {}
 /** @type {number} */
ASPxClientGridViewCellInfo.prototype.rowVisibleIndex;
 /** @type {!ASPxClientGridViewColumn} */
ASPxClientGridViewCellInfo.prototype.column;
/**
 * @record
 * @struct
 */
function ASPxClientGridViewBatchEditApi() {}

/**
 * Performs validation of grid data contained in all rows when the grid operates in Batch Edit mode.
 * @param {boolean=} validateOnlyModified true, if only modified rows should be validated; otherwise, false.
 * @return {boolean}
 */
ASPxClientGridViewBatchEditApi.prototype.ValidateRows = function(validateOnlyModified) {};

/**
 * Performs validation of grid data contained in the specified row when the grid operates in Batch Edit mode.
 * @param {number} visibleIndex An integer value specifying the visible index of the validated row.
 * @return {boolean}
 */
ASPxClientGridViewBatchEditApi.prototype.ValidateRow = function(visibleIndex) {};

/**
 * Returns an array of row visible indices.
 * @param {boolean} includeDeleted true, to include visible indices of deleted rows to the returned array; otherwise, false.
 * @return {!Array<number>}
 */
ASPxClientGridViewBatchEditApi.prototype.GetRowVisibleIndices = function(includeDeleted) {};

/**
 * Returns an array of the deleted row visible indices.
 * @return {!Array<number>}
 */
ASPxClientGridViewBatchEditApi.prototype.GetDeletedRowIndices = function() {};

/**
 * Returns an array of the inserted row visible indices.
 * @return {!Array<number>}
 */
ASPxClientGridViewBatchEditApi.prototype.GetInsertedRowIndices = function() {};

/**
 * Indicates if the row with specified visible index is deleted.
 * @param {number} visibleIndex An integer value that identifies the row by its visible index.
 * @return {boolean}
 */
ASPxClientGridViewBatchEditApi.prototype.IsDeletedRow = function(visibleIndex) {};

/**
 * Indicates if the row with specified visible index is newly created.
 * @param {number} visibleIndex An integer value that identifies the row by its visible index.
 * @return {boolean}
 */
ASPxClientGridViewBatchEditApi.prototype.IsNewRow = function(visibleIndex) {};

/**
 * Programmatically moves the focus to the previous cell in the row.
 * @return {boolean}
 */
ASPxClientGridViewBatchEditApi.prototype.MoveFocusBackward = function() {};

/**
 * Programmatically moves the focus to the next cell in the row.
 * @return {boolean}
 */
ASPxClientGridViewBatchEditApi.prototype.MoveFocusForward = function() {};

/**
 * Sets a value of the specified cell.
 * Sets the value of the specified cell.
 * @param {number} visibleIndex An integer zero-based index that identifies the row containing the processed cell.
 * @param {string} columnFieldNameOrId A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
 * @param {!Object} value An object that contains the new cell value.
 * @param {string=} displayText A string value that specifies the cell display text.
 * @param {boolean=} cancelCellHighlighting true to cancel highlighting of the modified cell, false to highlight the modified cell.
 * @return {void}
 */
ASPxClientGridViewBatchEditApi.prototype.SetCellValue = function(visibleIndex, columnFieldNameOrId, value, displayText, cancelCellHighlighting) {};

/**
 * Gets the value of the specified cell.
 * @param {number} visibleIndex A zero-based integer value that specifies a visible index of a row containing the processed cell.
 * @param {string} columnFieldNameOrId A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
 * @param {boolean=} initial true, to return the initial (server) value; false, to return a value currently contained on the client side (modified value).
 * @return {!Object}
 */
ASPxClientGridViewBatchEditApi.prototype.GetCellValue = function(visibleIndex, columnFieldNameOrId, initial) {};

/**
 * Gets information about the cell currently being edited.
 * @return {!ASPxClientGridViewCellInfo}
 */
ASPxClientGridViewBatchEditApi.prototype.GetEditCellInfo = function() {};

/**
 * Returns a value that indicates whether the grid has changed data.
 * Returns a value that indicates whether the specified row has changed data.
 * Returns a value that indicates whether the specified data cell's data has been changed.
 * @param {number=} visibleIndex An integer value that specifies the visible index of a row.
 * @param {string=} columnFieldNameOrId A string value that identifies the column by the name of the data source field to which the column is bound, or by the column's name.
 * @return {boolean}
 */
ASPxClientGridViewBatchEditApi.prototype.HasChanges = function(visibleIndex, columnFieldNameOrId) {};

/**
 * Resets changes in the specified row.
 * Resets changes in the specified cell.
 * @param {number} visibleIndex An integer value that specifies the visible index of a row. / An integer value that specifies the visible index of a row containing the processed cell.
 * @param {number=} columnIndex A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
 * @return {void}
 */
ASPxClientGridViewBatchEditApi.prototype.ResetChanges = function(visibleIndex, columnIndex) {};

/**
 * Switches the specified cell to edit mode.
 * @param {number} visibleIndex A zero-based integer value that specifies the visible index of a row containing the processed cell.
 * @param {number} columnIndex A zero-based integer value that identifies the column which contains the processed cell in the column collection.
 * @return {void}
 */
ASPxClientGridViewBatchEditApi.prototype.StartEdit = function(visibleIndex, columnIndex) {};

/**
 * Ends cell or row editing.
 * @return {void}
 */
ASPxClientGridViewBatchEditApi.prototype.EndEdit = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientVerticalGrid() {}
 /** @type {!ASPxClientVerticalGridBatchEditApi} */
ASPxClientVerticalGrid.prototype.batchEditApi;
 /** @type {!ASPxClientEvent<!ASPxClientVerticalGridCustomButtonEventHandler<?>>} */
ASPxClientVerticalGrid.prototype.CustomButtonClick;
 /** @type {!ASPxClientEvent<!ASPxClientVerticalGridSelectionEventHandler<?>>} */
ASPxClientVerticalGrid.prototype.SelectionChanged;
 /** @type {!ASPxClientEvent<!ASPxClientVerticalGridBatchEditStartEditingEventHandler<?>>} */
ASPxClientVerticalGrid.prototype.BatchEditStartEditing;
 /** @type {!ASPxClientEvent<!ASPxClientVerticalGridBatchEditEndEditingEventHandler<?>>} */
ASPxClientVerticalGrid.prototype.BatchEditEndEditing;
 /** @type {!ASPxClientEvent<!ASPxClientVerticalGridBatchEditConfirmShowingEventHandler<?>>} */
ASPxClientVerticalGrid.prototype.BatchEditConfirmShowing;
 /** @type {!ASPxClientEvent<!ASPxClientVerticalGridBatchEditTemplateCellFocusedEventHandler<?>>} */
ASPxClientVerticalGrid.prototype.BatchEditTemplateCellFocused;
 /** @type {!ASPxClientEvent<!ASPxClientVerticalGridBatchEditChangesSavingEventHandler<?>>} */
ASPxClientVerticalGrid.prototype.BatchEditChangesSaving;
 /** @type {!ASPxClientEvent<!ASPxClientVerticalGridBatchEditChangesCancelingEventHandler<?>>} */
ASPxClientVerticalGrid.prototype.BatchEditChangesCanceling;
 /** @type {!ASPxClientEvent<!ASPxClientVerticalGridBatchEditRecordInsertingEventHandler<?>>} */
ASPxClientVerticalGrid.prototype.BatchEditRecordInserting;
 /** @type {!ASPxClientEvent<!ASPxClientVerticalGridBatchEditRecordDeletingEventHandler<?>>} */
ASPxClientVerticalGrid.prototype.BatchEditRecordDeleting;
 /** @type {!ASPxClientEvent<!ASPxClientVerticalGridBatchEditRecordValidatingEventHandler<?>>} */
ASPxClientVerticalGrid.prototype.BatchEditRecordValidating;
 /** @type {!ASPxClientEvent<!ASPxClientVerticalGridRowCancelEventHandler<?>>} */
ASPxClientVerticalGrid.prototype.RowSorting;
 /** @type {!ASPxClientEvent<!ASPxClientVerticalGridRowExpandingEventHandler<?>>} */
ASPxClientVerticalGrid.prototype.RowExpandedChanging;
 /** @type {!ASPxClientEvent<!ASPxClientVerticalGridRowExpandedEventHandler<?>>} */
ASPxClientVerticalGrid.prototype.RowExpandedChanged;
 /** @type {!ASPxClientEvent<!ASPxClientVerticalGridRecordClickEventHandler<?>>} */
ASPxClientVerticalGrid.prototype.RecordClick;
 /** @type {!ASPxClientEvent<!ASPxClientVerticalGridRecordClickEventHandler<?>>} */
ASPxClientVerticalGrid.prototype.RecordDblClick;
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientVerticalGrid.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientVerticalGrid.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientVerticalGrid.prototype.CallbackError;

/**
 * Sorts data by the specified data row's values.
 * Sorts data by the specified data row's values.
 * Sorts data by the specified data row's values.
 * Sorts data by the specified data row's values.
 * Sorts data by the specified data row's values.
 * Sorts data by the specified data row's values.
 * Sorts data by the specified data row's values.
 * Sorts data by the specified data row's values.
 * Sorts data by the specified data row's values.
 * Sorts data by the specified data row's values, and places the row to the specified position among the sorted rows.
 * Sorts data by the specified data row's values, and places the row to the specified position among the sorted rows.
 * Sorts data by the specified data row's values, and places the row to the specified position among the sorted rows.
 * @param {!ASPxClientVerticalGridRow|number|string} row_or_rowIndex_or_rowFieldNameOrId An ASPxClientVerticalGridRow object that represents the data row. / An integer value that specifies the row's position within the row collection. / A string value that specifies the row's field name or unique identifier (the row's Name property value). / An ASPxClientGridViewColumn object that represents the data column. / A string value that specifies the column's field name or unique identifier (the column's Name property value).
 * @param {string=} sortOrder A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
 * @param {boolean=} reset true to clear any previous sorting; otherwise, false. / true, to clear any previous sorting; otherwise, false.
 * @param {number=} sortIndex An integer value that specifies the zero-based row's index among the sorted rows. -1 if data is not sorted by this row.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.SortBy = function(row_or_rowIndex_or_rowFieldNameOrId, sortOrder, reset, sortIndex) {};

/**
 * Returns the key value of the specified data row (record in the vertical grid).
 * @param {number} visibleIndex An integer value that specifies the record's visible index.
 * @return {string}
 */
ASPxClientVerticalGrid.prototype.GetRecordKey = function(visibleIndex) {};

/**
 * Adds a new record.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.AddNewRecord = function() {};

/**
 * Deletes the specified record.
 * @param {number} visibleIndex An integer value that identifies the record.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.DeleteRecord = function(visibleIndex) {};

/**
 * Deletes a record with the specified key value.
 * @param {!Object} key An object that uniquely identifies the record.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.DeleteRecordByKey = function(key) {};

/**
 * Selects all the unselected records within the grid.
 * Selects the specified record displayed within the grid.
 * Selects the specified rercords within the grid.
 * Selects or deselects the specified records within the grid.
 * Selects or deselects the specified record within the grid.
 * @param {number|!Array<number>=} visibleIndex_or_visibleIndices A zero-based integer value that specifies the record's visible index. / An array of zero-based indices that identify records within the grid. / An integer zero-based index that identifies the record within the grid.
 * @param {boolean=} selected true to select the specified records; false to deselect the records. / true to select the specified record; false to deselect the record.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.SelectRecords = function(visibleIndex_or_visibleIndices, selected) {};

/**
 * Selects or deselects the specified records displayed within the grid.
 * Selects or deselects the specified record displayed within the grid.
 * Selects the specified records displayed within the grid.
 * Selects a grid record by its key.
 * @param {!Array<!Object>|!Object} keys_or_key An array of objects that uniquely identify the records. / An object that uniquely identifies the record.
 * @param {boolean=} selected true to select the specified records; false to deselect the records. / true to select the specified record; false to deselect the record.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.SelectRecordsByKey = function(keys_or_key, selected) {};

/**
 * Deselects all the selected records within the grid.
 * Deselects the specified records (if selected) within the grid.
 * Deselects the specified record (if selected) within the grid.
 * @param {!Array<number>|number=} visibleIndices_or_visibleIndex An array of zero-based indices that identify records within the grid. / A zero-based integer value that specifies the record's visible index.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.UnselectRecords = function(visibleIndices_or_visibleIndex) {};

/**
 * Deselects the specified records displayed within the grid.
 * Deselects the specified record displayed within the grid.
 * @param {!Array<!Object>|!Object} keys_or_key An array of objects that uniquely identify the records. / An object that uniquely identifies the record.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.UnselectRecordsByKey = function(keys_or_key) {};

/**
 * Deselects all grid records that match the filter criteria currently applied to the grid.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.UnselectFilteredRecords = function() {};

/**
 * Selects the specified record displayed on the current page.
 * Selects or deselects the specified record displayed on the current page.
 * @param {number} visibleIndex A zero-based integer value that specifies the record's visible index.
 * @param {boolean=} selected true to select the specified record; false to deselect the record.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.SelectRecordOnPage = function(visibleIndex, selected) {};

/**
 * Deselects the specified record (if selected) displayed on the current page.
 * @param {number} visibleIndex A zero-based integer value that specifies the record's visible index.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.UnselectRecordOnPage = function(visibleIndex) {};

/**
 * Selects all unselected records displayed on the current page.
 * Allows you to select or deselect all records displayed on the current page based on the parameter passed.
 * @param {boolean=} selected true to select all unselected records displayed on the current page; false to deselect all selected records on the page.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.SelectAllRecordsOnPage = function(selected) {};

/**
 * Deselects all selected records displayed on the current page.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.UnselectAllRecordsOnPage = function() {};

/**
 * Returns the number of selected records.
 * @return {number}
 */
ASPxClientVerticalGrid.prototype.GetSelectedRecordCount = function() {};

/**
 * Indicates whether or not the specified record is selected within the current page.
 * @param {number} visibleIndex An integer value that identifies the record by its visible index.
 * @return {boolean}
 */
ASPxClientVerticalGrid.prototype.IsRecordSelectedOnPage = function(visibleIndex) {};

/**
 * Returns the values of the specified data source fields within the specified record.
 * @param {number} visibleIndex An integer value that identifies the record.
 * @param {string} fieldNames The names of data source fields separated using a semicolon, whose values within the specified record are returned.
 * @param {!ASPxClientVerticalGridValuesCallback} onCallback An ASPxClientVerticalGridValuesCallback object that represents the JavaScript function which receives the list of record values as a parameter.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.GetRecordValues = function(visibleIndex, fieldNames, onCallback) {};

/**
 * Returns the record values displayed within the current page.
 * @param {string} fieldNames The names of data source fields whose values are returned.
 * @param {!ASPxClientVerticalGridValuesCallback} onCallback A ASPxClientVerticalGridValuesCallback object that represents the JavaScript function which receives the list of record values as a parameter.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.GetPageRecordValues = function(fieldNames, onCallback) {};

/**
 * Returns the number of records actually displayed within the active page.
 * @return {number}
 */
ASPxClientVerticalGrid.prototype.GetVisibleRecordsOnPage = function() {};

/**
 * Returns the number of rows within the client vertical grid.
 * @return {number}
 */
ASPxClientVerticalGrid.prototype.GetRowCount = function() {};

/**
 * Applies the specified search panel filter criterion to grid data.
 * @param {string} value A string value that specifies the filter criterion.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.ApplySearchPanelFilter = function(value) {};

/**
 * Applies the specified filter expression to the ASPxVerticalGrid.
 * @param {string} filterExpression A string value that specifies the filter expression.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.ApplyFilter = function(filterExpression) {};

/**
 * Clears the filter expression applied to a client vertical grid.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.ClearFilter = function() {};

/**
 * Sets input focus to the grid.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.Focus = function() {};

/**
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 *
 * @param {string} args A string value that represents any information that needs to be sent to the server-side CustomCallback event.
 * @param {function(string): void=} onSuccess
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.PerformCallback = function(args, onSuccess) {};

/**
 * Selects the specified page.
 * @param {number} pageIndex An integer value that specifies the active page's index.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.GotoPage = function(pageIndex) {};

/**
 * Gets the index of the page currently being selected.
 * @return {number}
 */
ASPxClientVerticalGrid.prototype.GetPageIndex = function() {};

/**
 * Gets the number of pages to which the grid's data is divided.
 * @return {number}
 */
ASPxClientVerticalGrid.prototype.GetPageCount = function() {};

/**
 * Activates the next page.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.NextPage = function() {};

/**
 * Activates the previous page.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.PrevPage = function() {};

/**
 * Returns the index of the first record displayed within the vertical grid's active page.
 * @return {number}
 */
ASPxClientVerticalGrid.prototype.GetTopVisibleIndex = function() {};

/**
 * Saves all the changes made and switches the grid to browse mode.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.UpdateEdit = function() {};

/**
 * Cancels all the changes made and switches the ASPxVerticalGrid to browse mode.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.CancelEdit = function() {};

/**
 * Updates data displayed within the grid.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.Refresh = function() {};

/**
 * Returns the record values displayed within all selected records.
 * @param {string} fieldNames The names of data source fields separated by a semicolon, whose values within the selected records are returned.
 * @param {!ASPxClientVerticalGridValuesCallback} onCallback A ASPxClientVerticalGridValuesCallback object that represents the JavaScript function which receives the list of record values as a parameter.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.GetSelectedFieldValues = function(fieldNames, onCallback) {};

/**
 * Returns key values of selected records displayed within the current page.
 * @return {!Array<!Object>}
 */
ASPxClientVerticalGrid.prototype.GetSelectedKeysOnPage = function() {};

/**
 * Sends a callback to the server and generates the server-side CustomDataCallback event.
 * @param {string} args A string value that is any information that needs to be sent to the server-side CustomDataCallback event.
 * @param {!ASPxClientVerticalGridValuesCallback} onCallback A ASPxClientVerticalGridValuesCallback object that is the JavaScript function which receives the information on the client side.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.GetValuesOnCustomCallback = function(args, onCallback) {};

/**
 * Returns the editor used to edit the specified row's values.
 * Returns the editor used to edit the specified row's values.
 * Returns the editor used to edit the specified row's values.
 * @param {!ASPxClientVerticalGridRow|number|string} row_or_rowIndex_or_rowFieldNameOrId An ASPxClientVerticalGridRowobject that specifies the required row within the client grid. / An integer value that specifies the row's position within the rows collection. / A string value that specifies the row's field name or unique identifier (the row's Name property value).
 * @return {?}
 */
ASPxClientVerticalGrid.prototype.GetEditor = function(row_or_rowIndex_or_rowFieldNameOrId) {};

/**
 * Displays the Filter Control.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.ShowFilterControl = function() {};

/**
 * Hides the Filter Control.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.CloseFilterControl = function() {};

/**
 * Enables or disables the current filter.
 * @param {boolean} isFilterEnabled true to enable the current filter; otherwise, false.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.SetFilterEnabled = function(isFilterEnabled) {};

/**
 * Returns the client row that resides at the specified position within the row collection.
 * @param {number} rowIndex A zero-based index that identifies the row within the row collection (the row's Index property value).
 * @return {!ASPxClientVerticalGridRow}
 */
ASPxClientVerticalGrid.prototype.GetRow = function(rowIndex) {};

/**
 * Returns the row with the specified unique identifier.
 * @param {string} rowId A string value that specifies the row's unique identifier (the row's Name property value).
 * @return {!ASPxClientVerticalGridRow}
 */
ASPxClientVerticalGrid.prototype.GetRowById = function(rowId) {};

/**
 * Returns the client row which is bound to the specified data source field.
 * @param {string} rowFieldName A string value that specifies the name of the data source field to which the row is bound (the row's fieldName property value).
 * @return {!ASPxClientVerticalGridRow}
 */
ASPxClientVerticalGrid.prototype.GetRowByField = function(rowFieldName) {};

/**
 * Returns the current vertical scroll position of the grid's content.
 * @return {number}
 */
ASPxClientVerticalGrid.prototype.GetVerticalScrollPosition = function() {};

/**
 * Returns the current horizontal scroll position of the grid's content.
 * @return {number}
 */
ASPxClientVerticalGrid.prototype.GetHorizontalScrollPosition = function() {};

/**
 * Specifies the vertical scroll position for the grid's content.
 * @param {number} position An integer value specifying the vertical scroll position.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.SetVerticalScrollPosition = function(position) {};

/**
 * Specifies the horizontal scroll position for the grid's content.
 * @param {number} position An integer value specifying the horizontal scroll position.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.SetHorizontalScrollPosition = function(position) {};

/**
 * Gets the value that specifies whether the required row is expanded.
 * Gets the value that specifies whether the row with the specified index is expanded.
 * Gets the value that specifies whether the row with the specified field name or ID is expanded.
 * @param {!ASPxClientVerticalGridRow|number|string} row_or_rowIndex_or_rowFieldNameOrId An ASPxClientVerticalGridRowobject that specifies the row. / An integer value specifying the row's index. / A string value specifying the row's field name or ID.
 * @return {boolean}
 */
ASPxClientVerticalGrid.prototype.GetRowExpanded = function(row_or_rowIndex_or_rowFieldNameOrId) {};

/**
 * Sets a value indicating whether the row is expanded.
 * Sets a value indicating whether the row is expanded.
 * Sets a value indicating whether the row is expanded.
 * @param {!ASPxClientVerticalGridRow|number|string} row_or_rowIndex_or_rowFieldNameOrId An ASPxClientVerticalGridRowobject that specifies the required row within the client grid. / An integer value specifying the index of the row. / A string value that specifies the row's field name or unique identifier (the row's Name property value).
 * @param {boolean} value true, to expand the row; otherwise, false.
 * @return {void}
 */
ASPxClientVerticalGrid.prototype.SetRowExpanded = function(row_or_rowIndex_or_rowFieldNameOrId, value) {};
/**
 * @extends {ASPxClientGridColumnBase}
 * @record
 * @struct
 */
function ASPxClientVerticalGridRow() {}
 /** @type {string} */
ASPxClientVerticalGridRow.prototype.name;
 /** @type {number} */
ASPxClientVerticalGridRow.prototype.index;
 /** @type {string} */
ASPxClientVerticalGridRow.prototype.fieldName;
 /** @type {boolean} */
ASPxClientVerticalGridRow.prototype.visible;
/**
 * @record
 * @struct
 */
function ASPxClientVerticalGridValuesCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientVerticalGridRowCancelEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientVerticalGridRowCancelEventArgs() {}
 /** @type {!ASPxClientVerticalGridRow} */
ASPxClientVerticalGridRowCancelEventArgs.prototype.row;
/**
 * @record
 * @struct
 */
function ASPxClientVerticalGridRecordClickEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientVerticalGridRecordClickEventArgs() {}
 /** @type {number} */
ASPxClientVerticalGridRecordClickEventArgs.prototype.visibleIndex;
 /** @type {!Object} */
ASPxClientVerticalGridRecordClickEventArgs.prototype.htmlEvent;
/**
 * @record
 * @struct
 */
function ASPxClientVerticalGridCustomButtonEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientVerticalGridCustomButtonEventArgs() {}
 /** @type {number} */
ASPxClientVerticalGridCustomButtonEventArgs.prototype.visibleIndex;
 /** @type {string} */
ASPxClientVerticalGridCustomButtonEventArgs.prototype.buttonID;
/**
 * @record
 * @struct
 */
function ASPxClientVerticalGridSelectionEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientVerticalGridSelectionEventArgs() {}
 /** @type {number} */
ASPxClientVerticalGridSelectionEventArgs.prototype.visibleIndex;
 /** @type {boolean} */
ASPxClientVerticalGridSelectionEventArgs.prototype.isSelected;
 /** @type {boolean} */
ASPxClientVerticalGridSelectionEventArgs.prototype.isAllRecordsOnPage;
 /** @type {boolean} */
ASPxClientVerticalGridSelectionEventArgs.prototype.isChangedOnServer;
/**
 * @record
 * @struct
 */
function ASPxClientVerticalGridRowExpandedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientVerticalGridRowExpandedEventArgs() {}
 /** @type {!ASPxClientVerticalGridRow} */
ASPxClientVerticalGridRowExpandedEventArgs.prototype.row;
/**
 * @record
 * @struct
 */
function ASPxClientVerticalGridRowExpandingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientVerticalGridRowExpandedEventArgs}
 * @record
 * @struct
 */
function ASPxClientVerticalGridRowExpandingEventArgs() {}
 /** @type {boolean} */
ASPxClientVerticalGridRowExpandingEventArgs.prototype.cancel;
/**
 * @record
 * @struct
 */
function ASPxClientVerticalGridBatchEditStartEditingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientVerticalGridBatchEditStartEditingEventArgs() {}
 /** @type {number} */
ASPxClientVerticalGridBatchEditStartEditingEventArgs.prototype.visibleIndex;
 /** @type {!ASPxClientVerticalGridRow} */
ASPxClientVerticalGridBatchEditStartEditingEventArgs.prototype.focusedRow;
 /** @type {!Object} */
ASPxClientVerticalGridBatchEditStartEditingEventArgs.prototype.recordValues;
/**
 * @record
 * @struct
 */
function ASPxClientVerticalGridBatchEditEndEditingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientVerticalGridBatchEditEndEditingEventArgs() {}
 /** @type {number} */
ASPxClientVerticalGridBatchEditEndEditingEventArgs.prototype.visibleIndex;
 /** @type {!Object} */
ASPxClientVerticalGridBatchEditEndEditingEventArgs.prototype.recordValues;
/**
 * @record
 * @struct
 */
function ASPxClientVerticalGridBatchEditRecordValidatingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientVerticalGridBatchEditRecordValidatingEventArgs() {}
 /** @type {number} */
ASPxClientVerticalGridBatchEditRecordValidatingEventArgs.prototype.visibleIndex;
 /** @type {!Object} */
ASPxClientVerticalGridBatchEditRecordValidatingEventArgs.prototype.validationInfo;
/**
 * @record
 * @struct
 */
function ASPxClientVerticalGridBatchEditConfirmShowingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientVerticalGridBatchEditConfirmShowingEventArgs() {}
 /** @type {string} */
ASPxClientVerticalGridBatchEditConfirmShowingEventArgs.prototype.requestTriggerID;
/**
 * @record
 * @struct
 */
function ASPxClientVerticalGridBatchEditTemplateCellFocusedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientVerticalGridBatchEditTemplateCellFocusedEventArgs() {}
 /** @type {!ASPxClientVerticalGridRow} */
ASPxClientVerticalGridBatchEditTemplateCellFocusedEventArgs.prototype.row;
 /** @type {boolean} */
ASPxClientVerticalGridBatchEditTemplateCellFocusedEventArgs.prototype.handled;
/**
 * @record
 * @struct
 */
function ASPxClientVerticalGridBatchEditChangesSavingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientVerticalGridBatchEditChangesSavingEventArgs() {}
 /** @type {!Object} */
ASPxClientVerticalGridBatchEditChangesSavingEventArgs.prototype.insertedValues;
 /** @type {!Object} */
ASPxClientVerticalGridBatchEditChangesSavingEventArgs.prototype.deletedValues;
 /** @type {!Object} */
ASPxClientVerticalGridBatchEditChangesSavingEventArgs.prototype.updatedValues;
/**
 * @record
 * @struct
 */
function ASPxClientVerticalGridBatchEditChangesCancelingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientVerticalGridBatchEditChangesCancelingEventArgs() {}
 /** @type {!Object} */
ASPxClientVerticalGridBatchEditChangesCancelingEventArgs.prototype.insertedValues;
 /** @type {!Object} */
ASPxClientVerticalGridBatchEditChangesCancelingEventArgs.prototype.deletedValues;
 /** @type {!Object} */
ASPxClientVerticalGridBatchEditChangesCancelingEventArgs.prototype.updatedValues;
/**
 * @record
 * @struct
 */
function ASPxClientVerticalGridBatchEditRecordInsertingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientVerticalGridBatchEditRecordInsertingEventArgs() {}
 /** @type {number} */
ASPxClientVerticalGridBatchEditRecordInsertingEventArgs.prototype.visibleIndex;
/**
 * @record
 * @struct
 */
function ASPxClientVerticalGridBatchEditRecordDeletingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientVerticalGridBatchEditRecordDeletingEventArgs() {}
 /** @type {number} */
ASPxClientVerticalGridBatchEditRecordDeletingEventArgs.prototype.visibleIndex;
 /** @type {!Object} */
ASPxClientVerticalGridBatchEditRecordDeletingEventArgs.prototype.recordValues;
/**
 * @record
 * @struct
 */
function ASPxClientVerticalGridCellInfo() {}
 /** @type {!ASPxClientVerticalGridRow} */
ASPxClientVerticalGridCellInfo.prototype.row;
 /** @type {number} */
ASPxClientVerticalGridCellInfo.prototype.recordVisibleIndex;
/**
 * @record
 * @struct
 */
function ASPxClientVerticalGridBatchEditApi() {}

/**
 * Performs validation of grid data contained in all records when the grid operates in batch edit mode.
 * @param {boolean=} validateOnlyModified true, if only modified records should be validated; otherwise, false.
 * @return {boolean}
 */
ASPxClientVerticalGridBatchEditApi.prototype.ValidateRecords = function(validateOnlyModified) {};

/**
 * Performs validation of grid data contained in the specified record when the grid operates in batch edit mode.
 * @param {number} visibleIndex An integer value specifying the visible index of the validated record.
 * @return {boolean}
 */
ASPxClientVerticalGridBatchEditApi.prototype.ValidateRecord = function(visibleIndex) {};

/**
 * Returns an array of record visible indices.
 * @param {boolean} includeDeleted true, to include visible indices of deleted records to the returned array; otherwise, false.
 * @return {!Array<number>}
 */
ASPxClientVerticalGridBatchEditApi.prototype.GetRecordVisibleIndices = function(includeDeleted) {};

/**
 * Returns an array of the deleted record visible indices.
 * @return {!Array<number>}
 */
ASPxClientVerticalGridBatchEditApi.prototype.GetDeletedRecordIndices = function() {};

/**
 * Returns an array of the inserted record visible indices.
 * @return {!Array<number>}
 */
ASPxClientVerticalGridBatchEditApi.prototype.GetInsertedRecordIndices = function() {};

/**
 * Indicates if the record with the specified visible index is deleted.
 * @param {number} visibleIndex An integer value that identifies the record by its visible index.
 * @return {boolean}
 */
ASPxClientVerticalGridBatchEditApi.prototype.IsDeletedRecord = function(visibleIndex) {};

/**
 * Indicates if the record with specified visible index is newly created.
 * @param {number} visibleIndex An integer value that identifies the record by its visible index.
 * @return {boolean}
 */
ASPxClientVerticalGridBatchEditApi.prototype.IsNewRecord = function(visibleIndex) {};

/**
 * Programmatically moves the focus to the previous cell in the record.
 * @return {boolean}
 */
ASPxClientVerticalGridBatchEditApi.prototype.MoveFocusBackward = function() {};

/**
 * Programmatically moves the focus to the next cell in the record.
 * @return {boolean}
 */
ASPxClientVerticalGridBatchEditApi.prototype.MoveFocusForward = function() {};

/**
 * Sets a value of the specified cell.
 * Sets the value of the specified cell.
 * @param {number} visibleIndex An integer zero-based index that identifies the record containing the processed cell. / An integer zero-based index that identifies the row containing the processed cell.
 * @param {string} rowFieldNameOrId A string value that specifies the field name or unique identifier (the row's Name property value) of a row containing the processed cell. / A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
 * @param {!Object} value An object that contains the new cell value.
 * @param {string=} displayText A string value that specifies the cell display text.
 * @param {boolean=} cancelCellHighlighting true to cancel highlighting of the modified cell, false to highlight the modified cell.
 * @return {void}
 */
ASPxClientVerticalGridBatchEditApi.prototype.SetCellValue = function(visibleIndex, rowFieldNameOrId, value, displayText, cancelCellHighlighting) {};

/**
 * Gets the value of the specified cell.
 * @param {number} visibleIndex A zero-based integer value that specifies a visible index of a record containing the processed cell.
 * @param {string} rowFieldNameOrId A string value that specifies the field name or unique identifier (the row's Name property value) of a row containing the processed cell.
 * @param {boolean=} initial true, to return the initial (server) value; false, to return a value currently contained on the client side (modified value).
 * @return {!Object}
 */
ASPxClientVerticalGridBatchEditApi.prototype.GetCellValue = function(visibleIndex, rowFieldNameOrId, initial) {};

/**
 * Gets information about the cell currently being edited.
 * @return {!ASPxClientVerticalGridCellInfo}
 */
ASPxClientVerticalGridBatchEditApi.prototype.GetEditCellInfo = function() {};

/**
 * Returns a value that indicates whether the vertical grid has changed data.
 * Returns a value that indicates whether the specified record has changed data.
 * Returns a value that indicates whether the specified data cell's data has been changed.
 * @param {number=} visibleIndex An integer value that specifies the visible index of a record.
 * @param {string=} rowFieldNameOrId A string value that identifies the row by the name of the data source field to which the row is bound, or by the row's name.
 * @return {boolean}
 */
ASPxClientVerticalGridBatchEditApi.prototype.HasChanges = function(visibleIndex, rowFieldNameOrId) {};

/**
 * Resets changes in the specified record.
 * Resets changes in the specified cell.
 * @param {number} visibleIndex An integer value that specifies the visible index of a record. / An integer value that specifies the visible index of a record containing the processed cell.
 * @param {number=} rowIndex A string value that specifies the field name or unique identifier (the row's Name property value) of a row containing the processed cell.
 * @return {void}
 */
ASPxClientVerticalGridBatchEditApi.prototype.ResetChanges = function(visibleIndex, rowIndex) {};

/**
 * Switches the specified cell to batch edit mode.
 * @param {number} visibleIndex A zero-based integer value that specifies the visible index of a record containing the processed cell.
 * @param {number} rowIndex A zero-based integer value that identifies the row which contains the processed cell in the rows collection.
 * @return {void}
 */
ASPxClientVerticalGridBatchEditApi.prototype.StartEdit = function(visibleIndex, rowIndex) {};

/**
 * Ends the cell(s) editing.
 * @return {void}
 */
ASPxClientVerticalGridBatchEditApi.prototype.EndEdit = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientHtmlEditorCommandStyleSettings() {}
 /** @type {string} */
ASPxClientHtmlEditorCommandStyleSettings.prototype.className;
 /** @type {string} */
ASPxClientHtmlEditorCommandStyleSettings.prototype.width;
 /** @type {string} */
ASPxClientHtmlEditorCommandStyleSettings.prototype.height;
 /** @type {string} */
ASPxClientHtmlEditorCommandStyleSettings.prototype.borderWidth;
 /** @type {string} */
ASPxClientHtmlEditorCommandStyleSettings.prototype.borderColor;
 /** @type {string} */
ASPxClientHtmlEditorCommandStyleSettings.prototype.borderStyle;
 /** @type {string} */
ASPxClientHtmlEditorCommandStyleSettings.prototype.marginTop;
 /** @type {string} */
ASPxClientHtmlEditorCommandStyleSettings.prototype.marginRight;
 /** @type {string} */
ASPxClientHtmlEditorCommandStyleSettings.prototype.marginBottom;
 /** @type {string} */
ASPxClientHtmlEditorCommandStyleSettings.prototype.marginLeft;
 /** @type {string} */
ASPxClientHtmlEditorCommandStyleSettings.prototype.backgroundColor;
 /** @type {string} */
ASPxClientHtmlEditorCommandStyleSettings.prototype.textAlign;
 /** @type {string} */
ASPxClientHtmlEditorCommandStyleSettings.prototype.verticalAlign;
/**
 * @record
 * @struct
 */
function ASPxClientHtmlEditorCommandArguments() {}
 /** @type {!Object} */
ASPxClientHtmlEditorCommandArguments.prototype.selectedElement;
/**
 * @extends {ASPxClientHtmlEditorCommandArguments}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorInsertImageCommandArguments() {}
 /** @type {string} */
ASPxClientHtmlEditorInsertImageCommandArguments.prototype.src;
 /** @type {string} */
ASPxClientHtmlEditorInsertImageCommandArguments.prototype.alt;
 /** @type {boolean} */
ASPxClientHtmlEditorInsertImageCommandArguments.prototype.useFloat;
 /** @type {string} */
ASPxClientHtmlEditorInsertImageCommandArguments.prototype.align;
 /** @type {!ASPxClientHtmlEditorCommandStyleSettings} */
ASPxClientHtmlEditorInsertImageCommandArguments.prototype.styleSettings;
/**
 * @extends {ASPxClientHtmlEditorInsertImageCommandArguments}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorChangeImageCommandArguments() {}
/**
 * @extends {ASPxClientHtmlEditorCommandArguments}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorInsertLinkCommandArguments() {}
 /** @type {string} */
ASPxClientHtmlEditorInsertLinkCommandArguments.prototype.url;
 /** @type {string} */
ASPxClientHtmlEditorInsertLinkCommandArguments.prototype.text;
 /** @type {string} */
ASPxClientHtmlEditorInsertLinkCommandArguments.prototype.target;
 /** @type {string} */
ASPxClientHtmlEditorInsertLinkCommandArguments.prototype.title;
 /** @type {!ASPxClientHtmlEditorCommandStyleSettings} */
ASPxClientHtmlEditorInsertLinkCommandArguments.prototype.styleSettings;
/**
 * @extends {ASPxClientHtmlEditorCommandArguments}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorChangeMediaElementCommandArguments() {}
 /** @type {string} */
ASPxClientHtmlEditorChangeMediaElementCommandArguments.prototype.id;
 /** @type {string} */
ASPxClientHtmlEditorChangeMediaElementCommandArguments.prototype.src;
 /** @type {string} */
ASPxClientHtmlEditorChangeMediaElementCommandArguments.prototype.align;
 /** @type {!ASPxClientHtmlEditorCommandStyleSettings} */
ASPxClientHtmlEditorChangeMediaElementCommandArguments.prototype.styleSettings;

/**
 * Returns the name of the client-side command corresponding to the parameter.
 * @return {string}
 */
ASPxClientHtmlEditorChangeMediaElementCommandArguments.prototype.GetCommandName = function() {};
/**
 * @extends {ASPxClientHtmlEditorChangeMediaElementCommandArguments}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorChangeHtml5MediaElementCommandArguments() {}
 /** @type {boolean} */
ASPxClientHtmlEditorChangeHtml5MediaElementCommandArguments.prototype.autoPlay;
 /** @type {boolean} */
ASPxClientHtmlEditorChangeHtml5MediaElementCommandArguments.prototype.loop;
 /** @type {boolean} */
ASPxClientHtmlEditorChangeHtml5MediaElementCommandArguments.prototype.showPlayerControls;
 /** @type {string} */
ASPxClientHtmlEditorChangeHtml5MediaElementCommandArguments.prototype.preloadMode;
/**
 * @extends {ASPxClientHtmlEditorChangeHtml5MediaElementCommandArguments}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorInsertAudioCommandArguments() {}
/**
 * @extends {ASPxClientHtmlEditorInsertAudioCommandArguments}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorChangeAudioCommandArguments() {}
/**
 * @extends {ASPxClientHtmlEditorChangeHtml5MediaElementCommandArguments}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorInsertVideoCommandArguments() {}
 /** @type {string} */
ASPxClientHtmlEditorInsertVideoCommandArguments.prototype.posterUrl;
/**
 * @extends {ASPxClientHtmlEditorInsertVideoCommandArguments}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorChangeVideoCommandArguments() {}
/**
 * @extends {ASPxClientHtmlEditorChangeMediaElementCommandArguments}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorInsertFlashCommandArguments() {}
 /** @type {boolean} */
ASPxClientHtmlEditorInsertFlashCommandArguments.prototype.autoPlay;
 /** @type {boolean} */
ASPxClientHtmlEditorInsertFlashCommandArguments.prototype.loop;
 /** @type {boolean} */
ASPxClientHtmlEditorInsertFlashCommandArguments.prototype.enableFlashMenu;
 /** @type {boolean} */
ASPxClientHtmlEditorInsertFlashCommandArguments.prototype.allowFullscreen;
 /** @type {string} */
ASPxClientHtmlEditorInsertFlashCommandArguments.prototype.quality;
/**
 * @extends {ASPxClientHtmlEditorInsertFlashCommandArguments}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorChangeFlashCommandArguments() {}
/**
 * @extends {ASPxClientHtmlEditorChangeMediaElementCommandArguments}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorInsertYouTubeVideoCommandArguments() {}
 /** @type {boolean} */
ASPxClientHtmlEditorInsertYouTubeVideoCommandArguments.prototype.showRelatedVideos;
 /** @type {boolean} */
ASPxClientHtmlEditorInsertYouTubeVideoCommandArguments.prototype.showVideoInfo;
 /** @type {boolean} */
ASPxClientHtmlEditorInsertYouTubeVideoCommandArguments.prototype.enablePrivacyEnhancedMode;
 /** @type {boolean} */
ASPxClientHtmlEditorInsertYouTubeVideoCommandArguments.prototype.showPlayerControls;
/**
 * @extends {ASPxClientHtmlEditorInsertYouTubeVideoCommandArguments}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorChangeYouTubeVideoCommandArguments() {}
/**
 * @extends {ASPxClientHtmlEditorCommandArguments}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorTablePropertiesCommandArguments() {}
 /** @type {!ASPxClientHtmlEditorCommandStyleSettings} */
ASPxClientHtmlEditorTablePropertiesCommandArguments.prototype.styleSettings;
 /** @type {string} */
ASPxClientHtmlEditorTablePropertiesCommandArguments.prototype.align;
 /** @type {number} */
ASPxClientHtmlEditorTablePropertiesCommandArguments.prototype.cellPadding;
 /** @type {number} */
ASPxClientHtmlEditorTablePropertiesCommandArguments.prototype.cellSpacing;
 /** @type {string} */
ASPxClientHtmlEditorTablePropertiesCommandArguments.prototype.caption;
 /** @type {string} */
ASPxClientHtmlEditorTablePropertiesCommandArguments.prototype.headers;
 /** @type {string} */
ASPxClientHtmlEditorTablePropertiesCommandArguments.prototype.summary;
/**
 * @extends {ASPxClientHtmlEditorTablePropertiesCommandArguments}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorInsertTableCommandArguments() {}
 /** @type {number} */
ASPxClientHtmlEditorInsertTableCommandArguments.prototype.columns;
 /** @type {number} */
ASPxClientHtmlEditorInsertTableCommandArguments.prototype.rows;
 /** @type {boolean} */
ASPxClientHtmlEditorInsertTableCommandArguments.prototype.isEqualColumnWidth;
/**
 * @extends {ASPxClientHtmlEditorCommandArguments}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorTableCellPropertiesCommandArguments() {}
 /** @type {!ASPxClientHtmlEditorCommandStyleSettings} */
ASPxClientHtmlEditorTableCellPropertiesCommandArguments.prototype.styleSettings;
 /** @type {boolean} */
ASPxClientHtmlEditorTableCellPropertiesCommandArguments.prototype.applyForAll;
/**
 * @extends {ASPxClientHtmlEditorCommandArguments}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorTableRowPropertiesCommandArguments() {}
 /** @type {!ASPxClientHtmlEditorCommandStyleSettings} */
ASPxClientHtmlEditorTableRowPropertiesCommandArguments.prototype.styleSettings;
/**
 * @extends {ASPxClientHtmlEditorCommandArguments}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorTableColumnPropertiesCommandArguments() {}
 /** @type {!ASPxClientHtmlEditorCommandStyleSettings} */
ASPxClientHtmlEditorTableColumnPropertiesCommandArguments.prototype.styleSettings;
/**
 * @record
 * @struct
 */
function ASPxClientHtmlEditorDialogInitializedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorDialogInitializedEventArgs() {}
 /** @type {string} */
ASPxClientHtmlEditorDialogInitializedEventArgs.prototype.dialogName;
/**
 * @record
 * @struct
 */
function ASPxClientHtmlEditorCommandExecutingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorCommandExecutingEventArgs() {}
 /** @type {string} */
ASPxClientHtmlEditorCommandExecutingEventArgs.prototype.commandName;
 /** @type {!Object} */
ASPxClientHtmlEditorCommandExecutingEventArgs.prototype.parameter;
/**
 * @record
 * @struct
 */
function ASPxClientHtmlEditorCommandEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorCommandEventArgs() {}
 /** @type {string} */
ASPxClientHtmlEditorCommandEventArgs.prototype.commandName;
 /** @type {!Object} */
ASPxClientHtmlEditorCommandEventArgs.prototype.parameter;
/**
 * @record
 * @struct
 */
function ASPxClientHtmlEditorCustomDialogEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorCustomDialogEventArgs() {}
 /** @type {string} */
ASPxClientHtmlEditorCustomDialogEventArgs.prototype.name;
/**
 * @extends {ASPxClientHtmlEditorCustomDialogEventArgs}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorCustomDialogCloseEventArgsBase() {}
 /** @type {!Object} */
ASPxClientHtmlEditorCustomDialogCloseEventArgsBase.prototype.status;
/**
 * @record
 * @struct
 */
function ASPxClientHtmlEditorCustomDialogClosingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientHtmlEditorCustomDialogCloseEventArgsBase}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorCustomDialogClosingEventArgs() {}
 /** @type {boolean} */
ASPxClientHtmlEditorCustomDialogClosingEventArgs.prototype.handled;
/**
 * @record
 * @struct
 */
function ASPxClientHtmlEditorCustomDialogClosedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientHtmlEditorCustomDialogCloseEventArgsBase}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorCustomDialogClosedEventArgs() {}
 /** @type {!Object} */
ASPxClientHtmlEditorCustomDialogClosedEventArgs.prototype.data;
/**
 * @record
 * @struct
 */
function ASPxClientHtmlEditorValidationEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorValidationEventArgs() {}
 /** @type {string} */
ASPxClientHtmlEditorValidationEventArgs.prototype.html;
 /** @type {boolean} */
ASPxClientHtmlEditorValidationEventArgs.prototype.isValid;
 /** @type {string} */
ASPxClientHtmlEditorValidationEventArgs.prototype.errorText;
/**
 * @record
 * @struct
 */
function ASPxClientHtmlEditorTabEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorTabEventArgs() {}
 /** @type {string} */
ASPxClientHtmlEditorTabEventArgs.prototype.name;
/**
 * @record
 * @struct
 */
function ASPxClientHtmlEditorTabCancelEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientHtmlEditorTabEventArgs}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorTabCancelEventArgs() {}
 /** @type {boolean} */
ASPxClientHtmlEditorTabCancelEventArgs.prototype.cancel;
/**
 * @record
 * @struct
 */
function ASPxClientHtmlEditorBeforePasteEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorBeforePasteEventArgs() {}
 /** @type {string} */
ASPxClientHtmlEditorBeforePasteEventArgs.prototype.commandName;
 /** @type {string} */
ASPxClientHtmlEditorBeforePasteEventArgs.prototype.html;
/**
 * @record
 * @struct
 */
function ASPxClientHtmlEditor() {}
 /** @type {!ASPxClientEvent<!ASPxClientHtmlEditorDialogInitializedEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.DialogInitialized;
 /** @type {!ASPxClientEvent<!ASPxClientHtmlEditorCommandExecutingEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.CommandExecuting;
 /** @type {!ASPxClientEvent<!ASPxClientHtmlEditorCommandEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.CustomCommand;
 /** @type {!ASPxClientEvent<!ASPxClientHtmlEditorCommandEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.CommandExecuted;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.GotFocus;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.LostFocus;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.SelectionChanged;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.HtmlChanged;
 /** @type {!ASPxClientEvent<!ASPxClientHtmlEditorCustomDialogEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.CustomDialogOpened;
 /** @type {!ASPxClientEvent<!ASPxClientHtmlEditorCustomDialogClosingEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.CustomDialogClosing;
 /** @type {!ASPxClientEvent<!ASPxClientHtmlEditorCustomDialogClosedEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.CustomDialogClosed;
 /** @type {!ASPxClientEvent<!ASPxClientHtmlEditorValidationEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.Validation;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.ContextMenuShowing;
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ASPxClientCustomDataCallbackEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.CustomDataCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.SpellingChecked;
 /** @type {!ASPxClientEvent<!ASPxClientHtmlEditorTabEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.ActiveTabChanged;
 /** @type {!ASPxClientEvent<!ASPxClientHtmlEditorTabCancelEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.ActiveTabChanging;
 /** @type {!ASPxClientEvent<!ASPxClientHtmlEditorBeforePasteEventHandler<?>>} */
ASPxClientHtmlEditor.prototype.BeforePaste;

/**
 * Returns the document object generated by an iframe element within a design view area.
 * @return {!Object}
 */
ASPxClientHtmlEditor.prototype.GetDesignViewDocument = function() {};

/**
 * Returns the document object generated by an iframe element within a preview area.
 * @return {!Object}
 */
ASPxClientHtmlEditor.prototype.GetPreviewDocument = function() {};

/**
 * Returns a collection of client context menu objects.
 * @return {?}
 */
ASPxClientHtmlEditor.prototype.GetContextMenu = function() {};

/**
 * Returns a value indicating whether an editor is enabled.
 * @return {boolean}
 */
ASPxClientHtmlEditor.prototype.GetEnabled = function() {};

/**
 * Specifies whether an editor is enabled.
 * @param {boolean} value true to enable the editor; false to disable it.
 * @return {void}
 */
ASPxClientHtmlEditor.prototype.SetEnabled = function(value) {};

/**
 * Sets input focus to the ASPxHtmlEditor's edit region.
 * @return {void}
 */
ASPxClientHtmlEditor.prototype.Focus = function() {};

/**
 * Gets the HTML markup that represents the editor's content.
 * @return {string}
 */
ASPxClientHtmlEditor.prototype.GetHtml = function() {};

/**
 * Specifies the HTML markup that represents the editor's content.
 * Sets the HTML markup that represents the editor's content.
 * @param {string} html A string value that specifies the HTML markup.
 * @param {boolean=} clearUndoHistory true to clear the undo stack; otherwise, false.
 * @return {void}
 */
ASPxClientHtmlEditor.prototype.SetHtml = function(html, clearUndoHistory) {};

/**
 * Replaces placeholders with the specified values.
 * @param {string} html A string value that specifies the HTML code to process.
 * @param {!Array<!Object>} placeholders An array of objects that specify the placeholders and values to replace them.
 * @return {string}
 */
ASPxClientHtmlEditor.prototype.ReplacePlaceholders = function(html, placeholders) {};

/**
 * Creates a parameter for ASPxHtmlEditor's client-side commands related to changing media elements.
 * @param {!Object} element An element that is being changed.
 * @return {!ASPxClientHtmlEditorChangeMediaElementCommandArguments}
 */
ASPxClientHtmlEditor.prototype.CreateChangeMediaElementCommandArguments = function(element) {};

/**
 * Executes the specified command.
 * @param {string} commandName A string value that specifies the command to perform.
 * @param {!Object} parameter A string value specifying additional information about the command to perform.
 * @param {boolean} addToUndoHistory true, to add the specified command to the undo stack; otherwise, false.
 * @return {boolean}
 */
ASPxClientHtmlEditor.prototype.ExecuteCommand = function(commandName, parameter, addToUndoHistory) {};

/**
 * Adds the current editor state to the undo/redo history.
 * @return {void}
 */
ASPxClientHtmlEditor.prototype.SaveToUndoHistory = function() {};

/**
 * Returns the selection in the ASPxHtmlEditor.
 * @return {!ASPxClientHtmlEditorSelection}
 */
ASPxClientHtmlEditor.prototype.GetSelection = function() {};

/**
 * Restores the selection within the ASPxHtmlEditor.
 * @return {boolean}
 */
ASPxClientHtmlEditor.prototype.RestoreSelection = function() {};

/**
 * Sets the value of the combo box within the HtmlEditor on the client side.
 * @param {string} commandName A string value that identifies the combo box's command name within the HtmlEditor's control collection.
 * @param {string} value A string value that specifies the combo box's new value.
 * @return {void}
 */
ASPxClientHtmlEditor.prototype.SetToolbarComboBoxValue = function(commandName, value) {};

/**
 * Sets the value of the dropdown item picker in the HtmlEditor on the client side.
 * @param {string} commandName A string value that identifies the dropdown item picker by its command name. This value is contained in the CommandName property.
 * @param {string} value A string value that specifies the dropdown item picker's new value, i.e., the ToolbarItemPickerItem object.
 * @return {void}
 */
ASPxClientHtmlEditor.prototype.SetToolbarDropDownItemPickerValue = function(commandName, value) {};

/**
 * Specifies the visibility of a ribbon context tab category specified by its name.
 * @param {string} categoryName A Name property value of the required category.
 * @param {string} active true to make a category visible; false to make it hidden.
 * @return {void}
 */
ASPxClientHtmlEditor.prototype.SetRibbonContextTabCategoryVisible = function(categoryName, active) {};

/**
 * Provides access to an object implementing the HtmlEditor's ribbon UI.
 * @return {?}
 */
ASPxClientHtmlEditor.prototype.GetRibbon = function() {};

/**
 * Gets a value that indicates whether the editor's value passes validation.
 * @return {boolean}
 */
ASPxClientHtmlEditor.prototype.GetIsValid = function() {};

/**
 * Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
 * @return {string}
 */
ASPxClientHtmlEditor.prototype.GetErrorText = function() {};

/**
 * Sets a value that specifies whether the editor's value passes validation.
 * @param {boolean} isValid true if the editor's value passes validation; otherwise, false.
 * @return {void}
 */
ASPxClientHtmlEditor.prototype.SetIsValid = function(isValid) {};

/**
 * Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
 * @param {string} errorText A string value representing the error text.
 * @return {void}
 */
ASPxClientHtmlEditor.prototype.SetErrorText = function(errorText) {};

/**
 * Performs validation of the editor's content.
 * @return {void}
 */
ASPxClientHtmlEditor.prototype.Validate = function() {};

/**
 * Set an active tab specified by its name.
 * @param {string} name A string value that is the name of the tab.
 * @return {void}
 */
ASPxClientHtmlEditor.prototype.SetActiveTabByName = function(name) {};

/**
 * Returns the name of the active HTML editor tab.
 * @return {string}
 */
ASPxClientHtmlEditor.prototype.GetActiveTabName = function() {};

/**
 * Reconnect the control to an external ribbon.
 * @return {void}
 */
ASPxClientHtmlEditor.prototype.ReconnectToExternalRibbon = function() {};

/**
 * Sends a callback to the server and generates the server-side CustomDataCallback event passing it the specified argument.
 * @param {string} parameter A string value that represents any information that needs to be sent to the server-side CustomDataCallback event.
 * @param {!ASPxClientDataCallback} onCallback A ASPxClientDataCallback object that represents the JavaScript function which receives the callback data as a parameter.
 * @return {void}
 */
ASPxClientHtmlEditor.prototype.PerformDataCallback = function(parameter, onCallback) {};
/**
 * @record
 * @struct
 */
function ASPxClientHtmlEditorSelection() {}

/**
 * Returns a DOM element that relates to the current selection.
 * @return {!Object}
 */
ASPxClientHtmlEditorSelection.prototype.GetSelectedElement = function() {};

/**
 * Returns the HTML markup specifying the currently selected ASPxHtmlEditor content.
 * @return {string}
 */
ASPxClientHtmlEditorSelection.prototype.GetHtml = function() {};

/**
 * Returns the text within the currently selected ASPxHtmlEditor content.
 * @return {string}
 */
ASPxClientHtmlEditorSelection.prototype.GetText = function() {};

/**
 * Returns an array of the currently selected elements.
 * @return {!Array<!Object>}
 */
ASPxClientHtmlEditorSelection.prototype.GetElements = function() {};

/**
 * Sets the new HTML markup in place of the currently selected within ASPxHtmlEditor content.
 * @param {string} html A string value specifying the new HTML markup.
 * @param {boolean} addToHistory true to add this operation to the history; otherwise, false.
 * @return {void}
 */
ASPxClientHtmlEditorSelection.prototype.SetHtml = function(html, addToHistory) {};
/**
 * @record
 * @struct
 */
function ASPxClientPivotGrid() {}
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientPivotGrid.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientPivotGrid.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientPivotGrid.prototype.AfterCallback;
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientPivotGrid.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientPivotGrid.prototype.BeforeCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientPivotGrid.prototype.CustomizationFieldsVisibleChanged;
 /** @type {!ASPxClientEvent<!ASPxClientClickEventHandler<?>>} */
ASPxClientPivotGrid.prototype.CellClick;
 /** @type {!ASPxClientEvent<!ASPxClientClickEventHandler<?>>} */
ASPxClientPivotGrid.prototype.CellDblClick;
 /** @type {!ASPxClientEvent<!ASPxClientPivotMenuItemClickEventHandler<?>>} */
ASPxClientPivotGrid.prototype.PopupMenuItemClick;

/**
 * Indicates whether the Defer Layout Update check box is enabled.
 * @return {boolean}
 */
ASPxClientPivotGrid.prototype.IsDeferUpdatesChecked = function() {};

/**
 * Indicates whether the Filter Editor (Prefilter) is visible.
 * @return {boolean}
 */
ASPxClientPivotGrid.prototype.IsPrefilterVisible = function() {};

/**
 * Shows the Filter Editor.
 * @return {void}
 */
ASPxClientPivotGrid.prototype.ShowPrefilter = function() {};

/**
 * Hides the Filter Editor.
 * @return {void}
 */
ASPxClientPivotGrid.prototype.HidePrefilter = function() {};

/**
 * Clears the filter expression applied using the Prefilter (Filter Editor).
 * @return {void}
 */
ASPxClientPivotGrid.prototype.ClearPrefilter = function() {};

/**
 * Enables or disables the current filter applied by the Filter Editor (Prefilter).
 * @return {void}
 */
ASPxClientPivotGrid.prototype.ChangePrefilterEnabled = function() {};

/**
 * Returns a value that specifies whether the customization form is visible.
 * @return {boolean}
 */
ASPxClientPivotGrid.prototype.GetCustomizationFieldsVisibility = function() {};

/**
 * Specifies the visibility of the customization form.
 * @param {boolean} value true to display the customization form; false to hide the customization form.
 * @return {void}
 */
ASPxClientPivotGrid.prototype.SetCustomizationFieldsVisibility = function(value) {};

/**
 * Switches the customization form's visible state.
 * @return {void}
 */
ASPxClientPivotGrid.prototype.ChangeCustomizationFieldsVisibility = function() {};

/**
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * @param {string} args A string value that represents any information that needs to be sent to the server-side CustomCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
ASPxClientPivotGrid.prototype.PerformCallback = function(args, onSuccess) {};
/**
 * @record
 * @struct
 */
function ASPxClientClickEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientClickEventArgs() {}
 /** @type {!Object} */
ASPxClientClickEventArgs.prototype.HtmlEvent;
 /** @type {!Object} */
ASPxClientClickEventArgs.prototype.Value;
 /** @type {number} */
ASPxClientClickEventArgs.prototype.ColumnIndex;
 /** @type {number} */
ASPxClientClickEventArgs.prototype.RowIndex;
 /** @type {!Object} */
ASPxClientClickEventArgs.prototype.ColumnValue;
 /** @type {!Object} */
ASPxClientClickEventArgs.prototype.RowValue;
 /** @type {string} */
ASPxClientClickEventArgs.prototype.ColumnFieldName;
 /** @type {string} */
ASPxClientClickEventArgs.prototype.RowFieldName;
 /** @type {string} */
ASPxClientClickEventArgs.prototype.ColumnValueType;
 /** @type {string} */
ASPxClientClickEventArgs.prototype.RowValueType;
 /** @type {number} */
ASPxClientClickEventArgs.prototype.DataIndex;
/**
 * @record
 * @struct
 */
function ASPxClientPivotMenuItemClickEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientPivotMenuItemClickEventArgs() {}
 /** @type {string} */
ASPxClientPivotMenuItemClickEventArgs.prototype.MenuType;
 /** @type {string} */
ASPxClientPivotMenuItemClickEventArgs.prototype.MenuItemName;
 /** @type {string} */
ASPxClientPivotMenuItemClickEventArgs.prototype.FieldID;
 /** @type {number} */
ASPxClientPivotMenuItemClickEventArgs.prototype.FieldValueIndex;
/**
 * @record
 * @struct
 */
function ASPxClientPivotCustomization() {}

/**
 * Returns an HTML element that represents the root of the control's hierarchy.
 * @return {!Object}
 */
ASPxClientPivotCustomization.prototype.GetMainContainer = function() {};

/**
 * Returns a client-side equivalent of the owner Pivot Grid Control.
 * @return {?}
 */
ASPxClientPivotCustomization.prototype.GetPivotGrid = function() {};

/**
 * Specifies the Customization Control's height.
 * @param {number} value An integer value that specifies the Customization Control's height.
 * @return {void}
 */
ASPxClientPivotCustomization.prototype.SetHeight = function(value) {};

/**
 * Specifies the Customization Control's width.
 * @param {number} value An integer value that specifies the Customization Control's width.
 * @return {void}
 */
ASPxClientPivotCustomization.prototype.SetWidth = function(value) {};

/**
 * Recalculates the Customization Control height.
 * @return {void}
 */
ASPxClientPivotCustomization.prototype.UpdateHeight = function() {};

/**
 * Specifies the Customization Control's layout.
 * @param {string} layout A string that specifies the Customization Control's layout.
 * @return {void}
 */
ASPxClientPivotCustomization.prototype.SetLayout = function(layout) {};
/**
 * @record
 * @struct
 */
function ASPxClientRichEditCustomCommandExecutedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientRichEditCustomCommandExecutedEventArgs() {}
 /** @type {string} */
ASPxClientRichEditCustomCommandExecutedEventArgs.prototype.commandName;
 /** @type {!Object} */
ASPxClientRichEditCustomCommandExecutedEventArgs.prototype.parameter;
/**
 * @record
 * @struct
 */
function ASPxClientRichEditHyperlinkClickEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientRichEditHyperlinkClickEventArgs() {}
 /** @type {boolean} */
ASPxClientRichEditHyperlinkClickEventArgs.prototype.handled;
 /** @type {!Object} */
ASPxClientRichEditHyperlinkClickEventArgs.prototype.htmlEvent;
 /** @type {!ASPxClientOfficeDocumentLinkType} */
ASPxClientRichEditHyperlinkClickEventArgs.prototype.hyperlinkType;
 /** @type {string} */
ASPxClientRichEditHyperlinkClickEventArgs.prototype.targetUri;
/**
 * @record
 * @struct
 */
function ASPxClientRichEdit() {}
 /** @type {!RichEditDocument} */
ASPxClientRichEdit.prototype.document;
 /** @type {!RichEditCommands} */
ASPxClientRichEdit.prototype.commands;
 /** @type {!RichEditSelection} */
ASPxClientRichEdit.prototype.selection;
 /** @type {!RichEditUnitConverter} */
ASPxClientRichEdit.prototype.unitConverter;
 /** @type {!ASPxClientEvent<!ASPxClientRichEditCustomCommandExecutedEventHandler<?>>} */
ASPxClientRichEdit.prototype.CustomCommandExecuted;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientRichEdit.prototype.BeginSynchronization;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientRichEdit.prototype.EndSynchronization;
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientRichEdit.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientRichEdit.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientRichEdit.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientRichEdit.prototype.DocumentChanged;
 /** @type {!ASPxClientEvent<!ASPxClientRichEditHyperlinkClickEventHandler<?>>} */
ASPxClientRichEdit.prototype.HyperlinkClick;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientRichEdit.prototype.SelectionChanged;

/**
 * Enables you to switch the full-screen mode of the Rich Text Editor.
 * @param {boolean} fullscreen true to activate full-screen mode; false to deactivate full-screen mode.
 * @return {void}
 */
ASPxClientRichEdit.prototype.SetFullscreenMode = function(fullscreen) {};

/**
 * Provides access to an object implementing the RichEdit's ribbon UI.
 * @return {?}
 */
ASPxClientRichEdit.prototype.GetRibbon = function() {};

/**
 * Sets input focus to the RichEdit.
 * @return {void}
 */
ASPxClientRichEdit.prototype.Focus = function() {};

/**
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * @param {string} parameter A string value that represents any information that needs to be sent to the server-side event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
ASPxClientRichEdit.prototype.PerformCallback = function(parameter, onSuccess) {};

/**
 * Indicates whether any unsaved changes are contained in the current document.
 * @return {boolean}
 */
ASPxClientRichEdit.prototype.HasUnsavedChanges = function() {};

/**
 * Reconnects the RichEdit to an external ribbon.
 * @return {void}
 */
ASPxClientRichEdit.prototype.ReconnectToExternalRibbon = function() {};
/**
 * @record
 * @struct
 */
function RichEditCommands() {}
 /** @type {!FileNewCommand} */
RichEditCommands.prototype.fileNew;
 /** @type {!FileOpenCommand} */
RichEditCommands.prototype.fileOpen;
 /** @type {!FileOpenDialogCommand} */
RichEditCommands.prototype.fileOpenDialog;
 /** @type {!FileSaveCommand} */
RichEditCommands.prototype.fileSave;
 /** @type {!FileDownloadCommand} */
RichEditCommands.prototype.fileDownload;
 /** @type {!FileSaveAsCommand} */
RichEditCommands.prototype.fileSaveAs;
 /** @type {!FileSaveAsDialogCommand} */
RichEditCommands.prototype.fileSaveAsDialog;
 /** @type {!FilePrintCommand} */
RichEditCommands.prototype.filePrint;
 /** @type {!UndoCommand} */
RichEditCommands.prototype.undo;
 /** @type {!RedoCommand} */
RichEditCommands.prototype.redo;
 /** @type {!CopyCommand} */
RichEditCommands.prototype.copy;
 /** @type {!PasteCommand} */
RichEditCommands.prototype.paste;
 /** @type {!CutCommand} */
RichEditCommands.prototype.cut;
 /** @type {!ChangeFontNameCommand} */
RichEditCommands.prototype.changeFontName;
 /** @type {!ChangeFontSizeCommand} */
RichEditCommands.prototype.changeFontSize;
 /** @type {!IncreaseFontSizeCommand} */
RichEditCommands.prototype.increaseFontSize;
 /** @type {!DecreaseFontSizeCommand} */
RichEditCommands.prototype.decreaseFontSize;
 /** @type {!MakeTextUpperCaseCommand} */
RichEditCommands.prototype.makeTextUpperCase;
 /** @type {!MakeTextLowerCaseCommand} */
RichEditCommands.prototype.makeTextLowerCase;
 /** @type {!CapitalizeEachWordTextCaseCommand} */
RichEditCommands.prototype.capitalizeEachWordTextCase;
 /** @type {!ToggleTextCaseCommand} */
RichEditCommands.prototype.toggleTextCase;
 /** @type {!ChangeFontBoldCommand} */
RichEditCommands.prototype.changeFontBold;
 /** @type {!ChangeFontItalicCommand} */
RichEditCommands.prototype.changeFontItalic;
 /** @type {!ChangeFontUnderlineCommand} */
RichEditCommands.prototype.changeFontUnderline;
 /** @type {!ChangeFontStrikeoutCommand} */
RichEditCommands.prototype.changeFontStrikeout;
 /** @type {!ChangeFontSuperscriptCommand} */
RichEditCommands.prototype.changeFontSuperscript;
 /** @type {!ChangeFontSubscriptCommand} */
RichEditCommands.prototype.changeFontSubscript;
 /** @type {!ChangeFontForeColorCommand} */
RichEditCommands.prototype.changeFontForeColor;
 /** @type {!ChangeFontBackColorCommand} */
RichEditCommands.prototype.changeFontBackColor;
 /** @type {!ClearFormattingCommand} */
RichEditCommands.prototype.clearFormatting;
 /** @type {!ChangeStyleCommand} */
RichEditCommands.prototype.changeStyle;
 /** @type {!ToggleBulletedListCommand} */
RichEditCommands.prototype.toggleBulletedList;
 /** @type {!ToggleNumberingListCommand} */
RichEditCommands.prototype.toggleNumberingList;
 /** @type {!ToggleMultilevelListCommand} */
RichEditCommands.prototype.toggleMultilevelList;
 /** @type {!IncreaseIndentCommand} */
RichEditCommands.prototype.increaseIndent;
 /** @type {!DecreaseIndentCommand} */
RichEditCommands.prototype.decreaseIndent;
 /** @type {!ShowHiddenSymbolsCommand} */
RichEditCommands.prototype.showHiddenSymbols;
 /** @type {!ToggleParagraphAlignmentLeftCommand} */
RichEditCommands.prototype.toggleParagraphAlignmentLeft;
 /** @type {!ToggleParagraphAlignmentCenterCommand} */
RichEditCommands.prototype.toggleParagraphAlignmentCenter;
 /** @type {!ToggleParagraphAlignmentRightCommand} */
RichEditCommands.prototype.toggleParagraphAlignmentRight;
 /** @type {!ToggleParagraphAlignmentJustifyCommand} */
RichEditCommands.prototype.toggleParagraphAlignmentJustify;
 /** @type {!SetSingleParagraphSpacingCommand} */
RichEditCommands.prototype.setSingleParagraphSpacing;
 /** @type {!SetSesquialteralParagraphSpacingCommand} */
RichEditCommands.prototype.setSesquialteralParagraphSpacing;
 /** @type {!SetDoubleParagraphSpacingCommand} */
RichEditCommands.prototype.setDoubleParagraphSpacing;
 /** @type {!AddSpacingBeforeParagraphCommand} */
RichEditCommands.prototype.addSpacingBeforeParagraph;
 /** @type {!AddSpacingAfterParagraphCommand} */
RichEditCommands.prototype.addSpacingAfterParagraph;
 /** @type {!RemoveSpacingBeforeParagraphCommand} */
RichEditCommands.prototype.removeSpacingBeforeParagraph;
 /** @type {!RemoveSpacingAfterParagraphCommand} */
RichEditCommands.prototype.removeSpacingAfterParagraph;
 /** @type {!ChangeParagraphBackColorCommand} */
RichEditCommands.prototype.changeParagraphBackColor;
 /** @type {!OpenFontFormattingDialogCommand} */
RichEditCommands.prototype.openFontFormattingDialog;
 /** @type {!ChangeFontFormattingCommand} */
RichEditCommands.prototype.changeFontFormatting;
 /** @type {!OpenParagraphFormattingDialogCommand} */
RichEditCommands.prototype.openParagraphFormattingDialog;
 /** @type {!ChangeParagraphFormattingCommand} */
RichEditCommands.prototype.changeParagraphFormatting;
 /** @type {!InsertPageBreakCommand} */
RichEditCommands.prototype.insertPageBreak;
 /** @type {!OpenInsertTableDialogCommand} */
RichEditCommands.prototype.openInsertTableDialog;
 /** @type {!InsertTableCommand} */
RichEditCommands.prototype.insertTable;
 /** @type {!OpenInsertPictureDialogCommand} */
RichEditCommands.prototype.openInsertPictureDialog;
 /** @type {!InsertPictureCommand} */
RichEditCommands.prototype.insertPicture;
 /** @type {!OpenInsertBookmarkDialogCommand} */
RichEditCommands.prototype.openInsertBookmarkDialog;
 /** @type {!InsertBookmarkCommand} */
RichEditCommands.prototype.insertBookmark;
 /** @type {!DeleteBookmarkCommand} */
RichEditCommands.prototype.deleteBookmark;
 /** @type {!GoToBookmarkCommand} */
RichEditCommands.prototype.goToBookmark;
 /** @type {!OpenInsertHyperlinkDialogCommand} */
RichEditCommands.prototype.openInsertHyperlinkDialog;
 /** @type {!InsertHyperlinkCommand} */
RichEditCommands.prototype.insertHyperlink;
 /** @type {!DeleteHyperlinkCommand} */
RichEditCommands.prototype.deleteHyperlink;
 /** @type {!DeleteHyperlinksCommand} */
RichEditCommands.prototype.deleteHyperlinks;
 /** @type {!OpenHyperlinkCommand} */
RichEditCommands.prototype.openHyperlink;
 /** @type {!OpenInsertSymbolDialogCommand} */
RichEditCommands.prototype.openInsertSymbolDialog;
 /** @type {!InsertSymbolCommand} */
RichEditCommands.prototype.insertSymbol;
 /** @type {!ChangePageMarginsCommand} */
RichEditCommands.prototype.changePageMargins;
 /** @type {!OpenPageMarginsDialogCommand} */
RichEditCommands.prototype.openPageMarginsDialog;
 /** @type {!ChangePageOrientationCommand} */
RichEditCommands.prototype.changePageOrientation;
 /** @type {!SetPageSizeDialogCommand} */
RichEditCommands.prototype.setPageSizeDialog;
 /** @type {!OpenPagePaperSizeDialogCommand} */
RichEditCommands.prototype.openPagePaperSizeDialog;
 /** @type {!ChangePageSizeCommand} */
RichEditCommands.prototype.changePageSize;
 /** @type {!ChangeSectionEqualColumnCountCommand} */
RichEditCommands.prototype.changeSectionEqualColumnCount;
 /** @type {!OpenSectionColumnsDialogCommand} */
RichEditCommands.prototype.openSectionColumnsDialog;
 /** @type {!ChangeSectionColumnsCommand} */
RichEditCommands.prototype.changeSectionColumns;
 /** @type {!InsertColumnBreakCommand} */
RichEditCommands.prototype.insertColumnBreak;
 /** @type {!InsertSectionBreakNextPageCommand} */
RichEditCommands.prototype.insertSectionBreakNextPage;
 /** @type {!InsertSectionBreakEvenPageCommand} */
RichEditCommands.prototype.insertSectionBreakEvenPage;
 /** @type {!InsertSectionBreakOddPageCommand} */
RichEditCommands.prototype.insertSectionBreakOddPage;
 /** @type {!ChangePageColorCommand} */
RichEditCommands.prototype.changePageColor;
 /** @type {!ShowHorizontalRulerCommand} */
RichEditCommands.prototype.showHorizontalRuler;
 /** @type {!SetFullscreenCommand} */
RichEditCommands.prototype.setFullscreen;
 /** @type {!OpenNumberingListDialogCommand} */
RichEditCommands.prototype.openNumberingListDialog;
 /** @type {!InsertParagraphCommand} */
RichEditCommands.prototype.insertParagraph;
 /** @type {!InsertTextCommand} */
RichEditCommands.prototype.insertText;
 /** @type {!DeleteCommand} */
RichEditCommands.prototype.delete;
 /** @type {!RemovePrevWordCommand} */
RichEditCommands.prototype.removePrevWord;
 /** @type {!RemoveNextWordCommand} */
RichEditCommands.prototype.removeNextWord;
 /** @type {!BackspaceCommand} */
RichEditCommands.prototype.backspace;
 /** @type {!InsertLineBreakCommand} */
RichEditCommands.prototype.insertLineBreak;
 /** @type {!ChangePictureScaleCommand} */
RichEditCommands.prototype.changePictureScale;
 /** @type {!IncrementParagraphLeftIndentCommand} */
RichEditCommands.prototype.incrementParagraphLeftIndent;
 /** @type {!DecrementParagraphLeftIndentCommand} */
RichEditCommands.prototype.decrementParagraphLeftIndent;
 /** @type {!MoveContentCommand} */
RichEditCommands.prototype.moveContent;
 /** @type {!CopyContentCommand} */
RichEditCommands.prototype.copyContent;
 /** @type {!InsertTabCommand} */
RichEditCommands.prototype.insertTab;
 /** @type {!OpenTabsDialogCommand} */
RichEditCommands.prototype.openTabsDialog;
 /** @type {!ChangeTabsCommand} */
RichEditCommands.prototype.changeTabs;
 /** @type {!OpenCustomNumberingListDialogCommand} */
RichEditCommands.prototype.openCustomNumberingListDialog;
 /** @type {!ChangeCustomNumberingListCommand} */
RichEditCommands.prototype.changeCustomNumberingList;
 /** @type {!RestartNumberingListCommand} */
RichEditCommands.prototype.restartNumberingList;
 /** @type {!IncrementNumberingIndentCommand} */
RichEditCommands.prototype.incrementNumberingIndent;
 /** @type {!DecrementNumberingIndentCommand} */
RichEditCommands.prototype.decrementNumberingIndent;
 /** @type {!CreateFieldCommand} */
RichEditCommands.prototype.createField;
 /** @type {!UpdateFieldCommand} */
RichEditCommands.prototype.updateField;
 /** @type {!ShowFieldCodesCommand} */
RichEditCommands.prototype.showFieldCodes;
 /** @type {!ShowAllFieldCodesCommand} */
RichEditCommands.prototype.showAllFieldCodes;
 /** @type {!ContinueNumberingListCommand} */
RichEditCommands.prototype.continueNumberingList;
 /** @type {!InsertNumerationCommand} */
RichEditCommands.prototype.insertNumeration;
 /** @type {!RemoveNumerationCommand} */
RichEditCommands.prototype.removeNumeration;
 /** @type {!UpdateAllFieldsCommand} */
RichEditCommands.prototype.updateAllFields;
 /** @type {!CreateDateFieldCommand} */
RichEditCommands.prototype.createDateField;
 /** @type {!CreateTimeFieldCommand} */
RichEditCommands.prototype.createTimeField;
 /** @type {!CreatePageFieldCommand} */
RichEditCommands.prototype.createPageField;
 /** @type {!MakeTextSentenceCaseCommand} */
RichEditCommands.prototype.makeTextSentenceCase;
 /** @type {!SwitchTextCaseCommand} */
RichEditCommands.prototype.switchTextCase;
 /** @type {!GoToFirstDataRecordCommand} */
RichEditCommands.prototype.goToFirstDataRecord;
 /** @type {!GoToPreviousDataRecordCommand} */
RichEditCommands.prototype.goToPreviousDataRecord;
 /** @type {!GoToNextDataRecordCommand} */
RichEditCommands.prototype.goToNextDataRecord;
 /** @type {!GoToDataRecordCommand} */
RichEditCommands.prototype.goToDataRecord;
 /** @type {!GoToLastDataRecordCommand} */
RichEditCommands.prototype.goToLastDataRecord;
 /** @type {!ShowMergedDataCommand} */
RichEditCommands.prototype.showMergedData;
 /** @type {!MergeFieldDialogCommand} */
RichEditCommands.prototype.mergeFieldDialog;
 /** @type {!CreateMergeFieldCommand} */
RichEditCommands.prototype.createMergeField;
 /** @type {!MailMergeDialogCommand} */
RichEditCommands.prototype.mailMergeDialog;
 /** @type {!MailMergeAndDownloadCommand} */
RichEditCommands.prototype.mailMergeAndDownload;
 /** @type {!MailMergeAndSaveAsCommand} */
RichEditCommands.prototype.mailMergeAndSaveAs;
 /** @type {!InsertHeaderCommand} */
RichEditCommands.prototype.insertHeader;
 /** @type {!InsertFooterCommand} */
RichEditCommands.prototype.insertFooter;
 /** @type {!LinkHeaderFooterToPreviousCommand} */
RichEditCommands.prototype.linkHeaderFooterToPrevious;
 /** @type {!GoToFooterCommand} */
RichEditCommands.prototype.goToFooter;
 /** @type {!GoToHeaderCommand} */
RichEditCommands.prototype.goToHeader;
 /** @type {!GoToNextHeaderFooterCommand} */
RichEditCommands.prototype.goToNextHeaderFooter;
 /** @type {!GoToPreviousHeaderFooterCommand} */
RichEditCommands.prototype.goToPreviousHeaderFooter;
 /** @type {!SetDifferentFirstPageHeaderFooterCommand} */
RichEditCommands.prototype.setDifferentFirstPageHeaderFooter;
 /** @type {!SetDifferentOddAndEvenPagesHeaderFooterCommand} */
RichEditCommands.prototype.setDifferentOddAndEvenPagesHeaderFooter;
 /** @type {!CloseHeaderFooterCommand} */
RichEditCommands.prototype.closeHeaderFooter;
 /** @type {!CreatePageCountFieldCommand} */
RichEditCommands.prototype.createPageCountField;
 /** @type {!OpenTableFormattingDialogCommand} */
RichEditCommands.prototype.openTableFormattingDialog;
 /** @type {!ChangeTableFormattingCommand} */
RichEditCommands.prototype.changeTableFormatting;
 /** @type {!ChangeTableRowPreferredHeightCommand} */
RichEditCommands.prototype.changeTableRowPreferredHeight;
 /** @type {!ChangeTableCellPreferredWidthCommand} */
RichEditCommands.prototype.changeTableCellPreferredWidth;
 /** @type {!ToggleTableCellInsideBordersCommand} */
RichEditCommands.prototype.toggleTableCellInsideBorders;
 /** @type {!ChangeTableColumnPreferredWidthCommand} */
RichEditCommands.prototype.changeTableColumnPreferredWidth;
 /** @type {!ChangeTableCellFormattingCommand} */
RichEditCommands.prototype.changeTableCellFormatting;
 /** @type {!InsertTableColumnToTheLeftCommand} */
RichEditCommands.prototype.insertTableColumnToTheLeft;
 /** @type {!InsertTableColumnToTheRightCommand} */
RichEditCommands.prototype.insertTableColumnToTheRight;
 /** @type {!InsertTableRowBelowCommand} */
RichEditCommands.prototype.insertTableRowBelow;
 /** @type {!InsertTableRowAboveCommand} */
RichEditCommands.prototype.insertTableRowAbove;
 /** @type {!DeleteTableRowsCommand} */
RichEditCommands.prototype.deleteTableRows;
 /** @type {!DeleteTableColumnsCommand} */
RichEditCommands.prototype.deleteTableColumns;
 /** @type {!InsertTableCellWithShiftToTheLeftCommand} */
RichEditCommands.prototype.insertTableCellWithShiftToTheLeft;
 /** @type {!DeleteTableCellsWithShiftHorizontallyCommand} */
RichEditCommands.prototype.deleteTableCellsWithShiftHorizontally;
 /** @type {!DeleteTableCellsWithShiftVerticallyCommand} */
RichEditCommands.prototype.deleteTableCellsWithShiftVertically;
 /** @type {!DeleteTableCommand} */
RichEditCommands.prototype.deleteTable;
 /** @type {!InsertTableCellsDialogCommand} */
RichEditCommands.prototype.insertTableCellsDialog;
 /** @type {!DeleteTableCellsDialogCommand} */
RichEditCommands.prototype.deleteTableCellsDialog;
 /** @type {!MergeTableCellsCommand} */
RichEditCommands.prototype.mergeTableCells;
 /** @type {!SplitTableCellsDialogCommand} */
RichEditCommands.prototype.splitTableCellsDialog;
 /** @type {!SplitTableCellsCommand} */
RichEditCommands.prototype.splitTableCells;
 /** @type {!InsertTableCellsWithShiftToTheVerticallyCommand} */
RichEditCommands.prototype.insertTableCellsWithShiftToTheVertically;
 /** @type {!OpenTableBordersAndShadingDialogCommand} */
RichEditCommands.prototype.openTableBordersAndShadingDialog;
 /** @type {!ChangeTableBordersAndShadingCommand} */
RichEditCommands.prototype.changeTableBordersAndShading;
 /** @type {!ToggleTableCellAlignTopLeftCommand} */
RichEditCommands.prototype.toggleTableCellAlignTopLeft;
 /** @type {!ToggleTableCellAlignTopCenterCommand} */
RichEditCommands.prototype.toggleTableCellAlignTopCenter;
 /** @type {!ToggleTableCellAlignTopRightCommand} */
RichEditCommands.prototype.toggleTableCellAlignTopRight;
 /** @type {!ToggleTableCellAlignMiddleLeftCommand} */
RichEditCommands.prototype.toggleTableCellAlignMiddleLeft;
 /** @type {!ToggleTableCellAlignMiddleCenterCommand} */
RichEditCommands.prototype.toggleTableCellAlignMiddleCenter;
 /** @type {!ToggleTableCellAlignMiddleRightCommand} */
RichEditCommands.prototype.toggleTableCellAlignMiddleRight;
 /** @type {!ToggleTableCellAlignBottomLeftCommand} */
RichEditCommands.prototype.toggleTableCellAlignBottomLeft;
 /** @type {!ToggleTableCellAlignBottomCenterCommand} */
RichEditCommands.prototype.toggleTableCellAlignBottomCenter;
 /** @type {!ToggleTableCellAlignBottomRightCommand} */
RichEditCommands.prototype.toggleTableCellAlignBottomRight;
 /** @type {!ChangeTableStyleCommand} */
RichEditCommands.prototype.changeTableStyle;
 /** @type {!ToggleTableCellTopBorderCommand} */
RichEditCommands.prototype.toggleTableCellTopBorder;
 /** @type {!ToggleTableCellRightBorderCommand} */
RichEditCommands.prototype.toggleTableCellRightBorder;
 /** @type {!ToggleTableCellBottomBorderCommand} */
RichEditCommands.prototype.toggleTableCellBottomBorder;
 /** @type {!ToggleTableCellLeftBorderCommand} */
RichEditCommands.prototype.toggleTableCellLeftBorder;
 /** @type {!RemoveTableCellBordersCommand} */
RichEditCommands.prototype.removeTableCellBorders;
 /** @type {!ToggleTableCellAllBordersCommand} */
RichEditCommands.prototype.toggleTableCellAllBorders;
 /** @type {!ToggleTableCellInsideHorizontalBordersCommand} */
RichEditCommands.prototype.toggleTableCellInsideHorizontalBorders;
 /** @type {!ToggleTableCellInsideVerticalBordersCommand} */
RichEditCommands.prototype.toggleTableCellInsideVerticalBorders;
 /** @type {!ToggleTableCellOutsideBordersCommand} */
RichEditCommands.prototype.toggleTableCellOutsideBorders;
 /** @type {!ChangeTableLookCommand} */
RichEditCommands.prototype.changeTableLook;
 /** @type {!ChangeTableBorderRepositoryItemCommand} */
RichEditCommands.prototype.changeTableBorderRepositoryItem;
 /** @type {!ChangeTableCellShadingCommand} */
RichEditCommands.prototype.changeTableCellShading;
 /** @type {!ShowTableGridLinesCommand} */
RichEditCommands.prototype.showTableGridLines;
 /** @type {!OpenFindPanelCommand} */
RichEditCommands.prototype.openFindPanel;
 /** @type {!OpenFindAndReplaceDialogCommand} */
RichEditCommands.prototype.openFindAndReplaceDialog;
 /** @type {!FindAllCommand} */
RichEditCommands.prototype.findAll;
 /** @type {!HideFindResultsCommand} */
RichEditCommands.prototype.hideFindResults;
 /** @type {!ReplaceAllCommand} */
RichEditCommands.prototype.replaceAll;
 /** @type {!ReplaceNextCommand} */
RichEditCommands.prototype.replaceNext;
 /** @type {!OpenSpellingDialogCommand} */
RichEditCommands.prototype.openSpellingDialog;
 /** @type {!AssignShortcutCommand} */
RichEditCommands.prototype.assignShortcut;
/**
 * @record
 * @struct
 */
function CommandBase() {}
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function CommandWithSimpleStateBase() {}

/**
 * Gets information about the command state.
 * @return {!SimpleCommandState}
 */
CommandWithSimpleStateBase.prototype.getState = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function CommandWithBooleanStateBase() {}

/**
 * Gets information about the command state.
 * @return {?}
 */
CommandWithBooleanStateBase.prototype.getState = function() {};
/**
 * @record
 * @struct
 */
function SimpleCommandState() {}
 /** @type {boolean} */
SimpleCommandState.prototype.enabled;
 /** @type {boolean} */
SimpleCommandState.prototype.visible;
/**
 * @extends {SimpleCommandState}
 * @record
 * @struct
 */
function CommandState() {}
 /** @type {T} */
CommandState.prototype.value;
/**
 * @record
 * @struct
 */
function RichEditDocument() {}
 /** @type {!SubDocument} */
RichEditDocument.prototype.activeSubDocument;
 /** @type {!Array<!Section>} */
RichEditDocument.prototype.sectionsInfo;
 /** @type {!Array<!ParagraphStyle>} */
RichEditDocument.prototype.paragraphStylesInfo;
 /** @type {!Array<!CharacterStyle>} */
RichEditDocument.prototype.characterStylesInfo;
 /** @type {!Array<!AbstractNumberingList>} */
RichEditDocument.prototype.abstractNumberingListsInfo;
 /** @type {!Array<!TableStyle>} */
RichEditDocument.prototype.tableStylesInfo;
 /** @type {!SpellingInfo} */
RichEditDocument.prototype.spellingInfo;
/**
 * @record
 * @struct
 */
function AbstractNumberingList() {}
 /** @type {boolean} */
AbstractNumberingList.prototype.deleted;
/**
 * @record
 * @struct
 */
function Paragraph() {}
 /** @type {number} */
Paragraph.prototype.length;
 /** @type {number} */
Paragraph.prototype.start;
 /** @type {!Interval} */
Paragraph.prototype.interval;
 /** @type {string} */
Paragraph.prototype.styleName;
 /** @type {number} */
Paragraph.prototype.listIndex;
 /** @type {number} */
Paragraph.prototype.listLevelIndex;
/**
 * @record
 * @struct
 */
function Field() {}
 /** @type {number} */
Field.prototype.start;
 /** @type {number} */
Field.prototype.length;
 /** @type {!Interval} */
Field.prototype.codeInterval;
 /** @type {!Interval} */
Field.prototype.resultInterval;
 /** @type {!Interval} */
Field.prototype.interval;
 /** @type {string} */
Field.prototype.hyperlinkUri;
 /** @type {string} */
Field.prototype.hyperlinkTip;
 /** @type {string} */
Field.prototype.hyperlinkAnchor;
 /** @type {boolean} */
Field.prototype.showCode;
/**
 * @record
 * @struct
 */
function Bookmark() {}
 /** @type {number} */
Bookmark.prototype.start;
 /** @type {number} */
Bookmark.prototype.length;
 /** @type {!Interval} */
Bookmark.prototype.interval;
 /** @type {string} */
Bookmark.prototype.name;
/**
 * @record
 * @struct
 */
function Section() {}
 /** @type {number} */
Section.prototype.start;
 /** @type {number} */
Section.prototype.length;
 /** @type {!Interval} */
Section.prototype.interval;
 /** @type {!Array<!HeaderFooter>} */
Section.prototype.headers;
 /** @type {!Array<!HeaderFooter>} */
Section.prototype.footers;
/**
 * @record
 * @struct
 */
function HeaderFooter() {}
 /** @type {?} */
HeaderFooter.prototype.type;
 /** @type {!SubDocument} */
HeaderFooter.prototype.subDocument;
/**
 * @record
 * @struct
 */
function InlinePictureInfo() {}
 /** @type {number} */
InlinePictureInfo.prototype.id;
 /** @type {number} */
InlinePictureInfo.prototype.position;
 /** @type {number} */
InlinePictureInfo.prototype.initialWidth;
 /** @type {number} */
InlinePictureInfo.prototype.initialHeight;
 /** @type {number} */
InlinePictureInfo.prototype.scaleX;
 /** @type {number} */
InlinePictureInfo.prototype.scaleY;
 /** @type {number} */
InlinePictureInfo.prototype.actualWidth;
 /** @type {number} */
InlinePictureInfo.prototype.actualHeight;

/** @const */
var HeaderFooterType = {};
/** @const {number} */
HeaderFooterType.First;
/** @const {number} */
HeaderFooterType.Odd;
/** @const {number} */
HeaderFooterType.Primary;
/** @const {number} */
HeaderFooterType.Even;
/**
 * @record
 * @struct
 */
function RichEditFileInfo() {}
 /** @type {string} */
RichEditFileInfo.prototype.folderPath;
 /** @type {string} */
RichEditFileInfo.prototype.fileName;
 /** @type {?} */
RichEditFileInfo.prototype.documentFormat;

/** @const */
var DocumentFormat = {};
/** @const {number} */
DocumentFormat.Undefined;
/** @const {number} */
DocumentFormat.PlainText;
/** @const {number} */
DocumentFormat.Rtf;
/** @const {number} */
DocumentFormat.Html;
/** @const {number} */
DocumentFormat.OpenXml;
/** @const {number} */
DocumentFormat.Mht;
/** @const {number} */
DocumentFormat.WordML;
/** @const {number} */
DocumentFormat.OpenDocument;
/** @const {number} */
DocumentFormat.ePub;
/** @const {number} */
DocumentFormat.Doc;
/**
 * @record
 * @struct
 */
function RichEditSelection() {}
 /** @type {!Array<!Interval>} */
RichEditSelection.prototype.intervals;
 /** @type {boolean} */
RichEditSelection.prototype.collapsed;

/**
 * @return {number}
 */
RichEditSelection.prototype.getIntervalMaxPosition = function() {};

/**
 * Moves the cursor to the next line.
 * Moves the cursor to the next line and allows you to extend the selection.
 * @param {boolean=} extendSelection true to extend the selection; otherwise, false.
 * @return {void}
 */
RichEditSelection.prototype.goToNextLine = function(extendSelection) {};

/**
 * Moves the cursor to the end of the line in which the cursor is located.
 * Moves the cursor to the end of the line in which the cursor is located and allows you to extend the selection.
 * @param {boolean=} extendSelection true to extend the selection; otherwise, false.
 * @return {void}
 */
RichEditSelection.prototype.goToLineEnd = function(extendSelection) {};

/**
 * Moves the cursor to the start of the line in which the cursor is located.
 * Moves the cursor to the start of the line in which the cursor is located and allows you to extend the selection.
 * @param {boolean=} extendSelection true to extend the selection; otherwise, false.
 * @return {void}
 */
RichEditSelection.prototype.goToLineStart = function(extendSelection) {};

/**
 * Moves the cursor to the previous line.
 * Moves the cursor to the previous line and allows you to extend the selection.
 * @param {boolean=} extendSelection true to extend the selection; otherwise, false.
 * @return {void}
 */
RichEditSelection.prototype.goToPreviousLine = function(extendSelection) {};

/**
 * Moves the cursor to the next character.
 * Moves the cursor to the next character and allows you to extend the selection.
 * @param {boolean=} extendSelection true to extend the selection; otherwise, false.
 * @return {void}
 */
RichEditSelection.prototype.goToNextCharacter = function(extendSelection) {};

/**
 * Moves the cursor to the previous character.
 * Moves the cursor to the previous character and allows you to extend the selection.
 * @param {boolean=} extendSelection true to extend the selection; otherwise, false.
 * @return {void}
 */
RichEditSelection.prototype.goToPreviousCharacter = function(extendSelection) {};

/**
 * Selects the line in which the cursor is located.
 * Selects the line in which the cursor is located and allows you to extend the entire selection with the currently existing selection.
 * @param {boolean=} extendSelection true to extend the selection; otherwise, false.
 * @return {void}
 */
RichEditSelection.prototype.selectLine = function(extendSelection) {};

/**
 * Moves the cursor to the beginning of the next page.
 * Moves the cursor to the beginning of the next page and allows you to extend the selection.
 * @param {boolean=} extendSelection true to extend the selection; otherwise, false.
 * @return {void}
 */
RichEditSelection.prototype.goToNextPage = function(extendSelection) {};

/**
 * Moves the cursor to the beginning of the previous page.
 * Moves the cursor to the beginning of the previous page and allows you to extend the selection.
 * @param {boolean=} extendSelection true to extend the selection; otherwise, false.
 * @return {void}
 */
RichEditSelection.prototype.goToPreviousPage = function(extendSelection) {};

/**
 * Moves the cursor to the start of the document.
 * Moves the cursor to the start of the document and allows you to extend the selection.
 * @param {boolean=} extendSelection true to extend the selection; otherwise, false.
 * @return {void}
 */
RichEditSelection.prototype.goToDocumentStart = function(extendSelection) {};

/**
 * Moves the cursor to the end of the document.
 * Moves the cursor to the end of the document and allows you to extend the selection.
 * @param {boolean=} extendSelection true to extend the selection; otherwise, false.
 * @return {void}
 */
RichEditSelection.prototype.goToDocumentEnd = function(extendSelection) {};

/**
 * Moves the cursor to the next word.
 * Moves the cursor to the next word and allows you to extend the selection.
 * @param {boolean=} extendSelection true to extend the selection; otherwise, false.
 * @return {void}
 */
RichEditSelection.prototype.goToNextWord = function(extendSelection) {};

/**
 * Moves the cursor to the previous word.
 * Moves the cursor to the previous word and allows you to extend the selection.
 * @param {boolean=} extendSelection true to extend the selection; otherwise, false.
 * @return {void}
 */
RichEditSelection.prototype.goToPrevWord = function(extendSelection) {};

/**
 * Moves the cursor to the start of the paragraph in which the cursor is located.
 * Moves the cursor to the start of the paragraph in which the cursor is located and allows you to extend the selection.
 * @param {boolean=} extendSelection true to extend the selection; otherwise, false.
 * @return {void}
 */
RichEditSelection.prototype.goToParagraphStart = function(extendSelection) {};

/**
 * Moves the cursor to the end of the paragraph in which the cursor is located.
 * Moves the cursor to the end of the paragraph in which the cursor is located and allows you to extend the selection.
 * @param {boolean=} extendSelection true to extend the selection; otherwise, false.
 * @return {void}
 */
RichEditSelection.prototype.goToParagraphEnd = function(extendSelection) {};

/**
 * Selects the paragraph in which the cursor is located.
 * @return {void}
 */
RichEditSelection.prototype.selectParagraph = function() {};

/**
 * Moves the cursor to the next page break mark.
 * Moves the cursor to the next page break mark and extends the selection.
 * @param {boolean=} extendSelection true to extend the selection; otherwise, false.
 * @return {void}
 */
RichEditSelection.prototype.goToStartNextPageCommand = function(extendSelection) {};

/**
 * Moves the cursor to the previous page break mark.
 * Moves the cursor to the previous page break mark and extends the selection.
 * @param {boolean=} extendSelection true to extend the selection; otherwise, false.
 * @return {void}
 */
RichEditSelection.prototype.goToStartPrevPageCommand = function(extendSelection) {};

/**
 * Selects the table cell in which the cursor is located.
 * Selects the table cell in which the cursor is located and allows you to extend the entire selection with the currently existing selection.
 * @param {boolean=} extendSelection true to extend the selection; otherwise, false.
 * @return {void}
 */
RichEditSelection.prototype.selectTableCell = function(extendSelection) {};

/**
 * Selects the table row in which the cursor is located.
 * Selects the table row in which the cursor is located and allows you to extend the entire selection with the currently existing selection.
 * @param {boolean=} extendSelection true to extend the selection; otherwise, false.
 * @return {void}
 */
RichEditSelection.prototype.selectTableRow = function(extendSelection) {};

/**
 * Selects the entire table in which the cursor is located.
 * Selects the entire table in which the cursor is located and allows you to extend the entire selection with the currently existing selection.
 * @param {boolean=} extendSelection true to extend the selection; otherwise, false.
 * @return {void}
 */
RichEditSelection.prototype.selectTable = function(extendSelection) {};

/**
 * Selects the editor's entire content.
 * @return {void}
 */
RichEditSelection.prototype.selectAll = function() {};

/**
 * Makes the main sub-document active and moves the cursor to its beginning.
 * @return {void}
 */
RichEditSelection.prototype.setMainSubDocumentAsActive = function() {};

/**
 * Creates a footer sub-document (if it was not created before) and sets the footer as the active sub-document. Moves the cursor to the footer's start position.
 * @param {number} pageIndex An integer value specifying the active page's index.
 * @return {void}
 */
RichEditSelection.prototype.setFooterSubDocumentAsActiveByPageIndex = function(pageIndex) {};

/**
 * Creates a header sub-document (if it was not created before) and sets the header as the active sub-document. Moves the cursor to the header's start position.
 * @param {number} pageIndex An integer value specifying the active page's index.
 * @return {void}
 */
RichEditSelection.prototype.setHeaderSubDocumentAsActiveByPageIndex = function(pageIndex) {};
/**
 * @record
 * @struct
 */
function Interval() {}
 /** @type {number} */
Interval.prototype.start;
 /** @type {number} */
Interval.prototype.length;
/**
 * @record
 * @struct
 */
function SpellingInfo() {}
 /** @type {?} */
SpellingInfo.prototype.spellCheckerState;
 /** @type {!Array<!MisspelledInterval>} */
SpellingInfo.prototype.misspelledIntervals;

/** @const */
var SpellCheckerState = {};
/** @const {number} */
SpellCheckerState.Disabled;
/** @const {number} */
SpellCheckerState.InProgress;
/** @const {number} */
SpellCheckerState.Done;
/**
 * @record
 * @struct
 */
function MisspelledInterval() {}
 /** @type {number} */
MisspelledInterval.prototype.start;
 /** @type {number} */
MisspelledInterval.prototype.length;
 /** @type {!Interval} */
MisspelledInterval.prototype.interval;
 /** @type {?} */
MisspelledInterval.prototype.errorType;
 /** @type {string} */
MisspelledInterval.prototype.word;
 /** @type {!Array<string>} */
MisspelledInterval.prototype.suggestions;

/** @const */
var SpellingErrorType = {};
/** @const {number} */
SpellingErrorType.Misspelling;
/** @const {number} */
SpellingErrorType.Repeating;
/**
 * @record
 * @struct
 */
function StyleBase() {}
 /** @type {string} */
StyleBase.prototype.name;
 /** @type {boolean} */
StyleBase.prototype.isDeleted;
/**
 * @extends {StyleBase}
 * @record
 * @struct
 */
function ParagraphStyle() {}
 /** @type {!CharacterStyle} */
ParagraphStyle.prototype.linkedStyle;
 /** @type {!ParagraphStyle} */
ParagraphStyle.prototype.nextStyle;
 /** @type {number} */
ParagraphStyle.prototype.listIndex;
 /** @type {number} */
ParagraphStyle.prototype.listLevelIndex;
 /** @type {!ParagraphStyle} */
ParagraphStyle.prototype.parent;
/**
 * @extends {StyleBase}
 * @record
 * @struct
 */
function CharacterStyle() {}
 /** @type {!ParagraphStyle} */
CharacterStyle.prototype.linkedStyle;
 /** @type {!CharacterStyle} */
CharacterStyle.prototype.parent;
/**
 * @extends {StyleBase}
 * @record
 * @struct
 */
function TableStyle() {}
 /** @type {!TableStyle} */
TableStyle.prototype.parent;
/**
 * @record
 * @struct
 */
function SubDocument() {}
 /** @type {number} */
SubDocument.prototype.id;
 /** @type {?} */
SubDocument.prototype.type;
 /** @type {!Array<!Paragraph>} */
SubDocument.prototype.paragraphsInfo;
 /** @type {!Array<!Field>} */
SubDocument.prototype.fieldsInfo;
 /** @type {!Array<!Table>} */
SubDocument.prototype.tablesInfo;
 /** @type {!Array<!Bookmark>} */
SubDocument.prototype.bookmarksInfo;
 /** @type {!Array<!InlinePictureInfo>} */
SubDocument.prototype.inlinePicturesInfo;
 /** @type {string} */
SubDocument.prototype.text;
 /** @type {number} */
SubDocument.prototype.length;

/** @const */
var SubDocumentType = {};
/** @const {number} */
SubDocumentType.Main;
/** @const {number} */
SubDocumentType.Header;
/** @const {number} */
SubDocumentType.Footer;
/** @const {number} */
SubDocumentType.TextBox;
/**
 * @record
 * @struct
 */
function Table() {}
 /** @type {number} */
Table.prototype.start;
 /** @type {number} */
Table.prototype.length;
 /** @type {!Interval} */
Table.prototype.interval;
 /** @type {!Array<!TableRow>} */
Table.prototype.rows;
 /** @type {string} */
Table.prototype.styleName;
/**
 * @record
 * @struct
 */
function TableRow() {}
 /** @type {number} */
TableRow.prototype.start;
 /** @type {number} */
TableRow.prototype.length;
 /** @type {!Interval} */
TableRow.prototype.interval;
 /** @type {!Array<!TableCell>} */
TableRow.prototype.cells;
/**
 * @record
 * @struct
 */
function TableCell() {}
 /** @type {number} */
TableCell.prototype.start;
 /** @type {number} */
TableCell.prototype.length;
 /** @type {!Interval} */
TableCell.prototype.interval;
/**
 * @record
 * @struct
 */
function RichEditUnitConverter() {}

/**
 *
 * @param {number} value
 * @return {number}
 */
RichEditUnitConverter.prototype.pixelsToTwips = function(value) {};

/**
 *
 * @param {number} value
 * @return {number}
 */
RichEditUnitConverter.prototype.inchesToTwips = function(value) {};

/**
 *
 * @param {number} value
 * @return {number}
 */
RichEditUnitConverter.prototype.pointsToTwips = function(value) {};

/**
 * Converts a value on centimeters to twips.
 * @param {number} value
 * @return {number}
 */
RichEditUnitConverter.prototype.centimetersToTwips = function(value) {};

/**
 *
 * @param {number} value
 * @return {number}
 */
RichEditUnitConverter.prototype.twipsToCentimeters = function(value) {};

/**
 *
 * @param {number} value
 * @return {number}
 */
RichEditUnitConverter.prototype.pixelsToCentimeters = function(value) {};

/**
 *
 * @param {number} value
 * @return {number}
 */
RichEditUnitConverter.prototype.twipsToInches = function(value) {};

/**
 *
 * @param {number} value
 * @return {number}
 */
RichEditUnitConverter.prototype.pixelsToInches = function(value) {};

/**
 *
 * @param {number} value
 * @return {number}
 */
RichEditUnitConverter.prototype.pixelsToPoints = function(value) {};

/**
 *
 * @param {number} value
 * @return {number}
 */
RichEditUnitConverter.prototype.twipsToPoints = function(value) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function OpenInsertBookmarkDialogCommand() {}

/**
 * Executes the OpenInsertBookmarkDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
OpenInsertBookmarkDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertBookmarkCommand() {}

/**
 * Executes the InsertBookmarkCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {string} name A string value specifying name of creating bookmark.
 * @param {number} start An integer value specifying the start position of bookmark's range.
 * @param {number} length An integer value specifying the length of bookmark's range.
 * @return {boolean}
 */
InsertBookmarkCommand.prototype.execute = function(name, start, length) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function DeleteBookmarkCommand() {}

/**
 * Executes the DeleteBookmarkCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {string} name A string value specifying name of the deleted bookmark.
 * @return {boolean}
 */
DeleteBookmarkCommand.prototype.execute = function(name) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function GoToBookmarkCommand() {}

/**
 * Executes the GoToBookmarkCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {string} name
 * @return {boolean}
 */
GoToBookmarkCommand.prototype.execute = function(name) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function PasteCommand() {}

/**
 * Executes the PasteCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
PasteCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function CopyCommand() {}

/**
 * Executes the CopyCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
CopyCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function CutCommand() {}

/**
 * Executes the CutCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
CutCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function CreateFieldCommand() {}

/**
 * Executes the CreateFieldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
CreateFieldCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function UpdateFieldCommand() {}

/**
 * Executes the UpdateFieldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
UpdateFieldCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function ShowFieldCodesCommand() {}

/**
 * Executes the ShowFieldCodesCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the ShowFieldCodesCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {boolean=} showFieldCodes true to display field codes, false to hide field codes.
 * @return {boolean}
 */
ShowFieldCodesCommand.prototype.execute = function(showFieldCodes) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function ShowAllFieldCodesCommand() {}

/**
 * Executes the ShowAllFieldCodesCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the ShowAllFieldCodesCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {boolean=} showFieldCodes true to display field codes, false to hide field codes.
 * @return {boolean}
 */
ShowAllFieldCodesCommand.prototype.execute = function(showFieldCodes) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function UpdateAllFieldsCommand() {}

/**
 * Executes the UpdateAllFieldsCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
UpdateAllFieldsCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function CreateDateFieldCommand() {}

/**
 * Executes the CreateDateFieldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
CreateDateFieldCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function CreateTimeFieldCommand() {}

/**
 * Executes the CreateTimeFieldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
CreateTimeFieldCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function CreatePageFieldCommand() {}

/**
 * Executes the CreatePageFieldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
CreatePageFieldCommand.prototype.execute = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function GoToDataRecordCommand() {}

/**
 * Executes the GoToDataRecordCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {number} activeRecordIndex An integer value specifying index of the next data record.
 * @return {boolean}
 */
GoToDataRecordCommand.prototype.execute = function(activeRecordIndex) {};

/**
 * @return {?}
 */
GoToDataRecordCommand.prototype.getState = function() {};
/**
 * @record
 * @struct
 */
function DataRecordOptions() {}
 /** @type {number} */
DataRecordOptions.prototype.activeRecordIndex;
 /** @type {number} */
DataRecordOptions.prototype.recordCount;
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function GoToFirstDataRecordCommand() {}

/**
 * Executes the GoToFirstDataRecordCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
GoToFirstDataRecordCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function GoToPreviousDataRecordCommand() {}

/**
 * Executes the GoToPreviousDataRecordCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
GoToPreviousDataRecordCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function GoToNextDataRecordCommand() {}

/**
 * Executes the GoToNextDataRecordCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
GoToNextDataRecordCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function GoToLastDataRecordCommand() {}

/**
 * Executes the GoToLastDataRecordCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
GoToLastDataRecordCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ShowMergedDataCommand() {}

/**
 * Executes the ShowMergedDataCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the ShowMergedDataCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {boolean=} showMergedData true to display merged data, false to hide merged data.
 * @return {boolean}
 */
ShowMergedDataCommand.prototype.execute = function(showMergedData) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function MergeFieldDialogCommand() {}

/**
 * Executes the MergeFieldDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
MergeFieldDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function CreateMergeFieldCommand() {}

/**
 * Executes the CreateMergeFieldCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {string} fieldName A string value specifying the name of the merge field.
 * @return {boolean}
 */
CreateMergeFieldCommand.prototype.execute = function(fieldName) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function MailMergeDialogCommand() {}

/**
 * Executes the MailMergeDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
MailMergeDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function MailMergeAndDownloadCommand() {}

/**
 * Executes the MailMergeAndDownloadCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 *
 * Executes the MailMergeAndDownloadCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 *
 * @param {string|?} fileExtension_or_documentFormat A string value specifying the file extension of the resulting document.
 * @param {!MailMergeSettings=} settings A MailMergeSettings object containing settings to set up mail merge operations.
 * @return {boolean}
 */
MailMergeAndDownloadCommand.prototype.execute = function(fileExtension_or_documentFormat, settings) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
MailMergeAndDownloadCommand.prototype.getState = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function MailMergeAndSaveAsCommand() {}

/**
 * Executes the MailMergeAndSaveAsCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 *
 * @param {string|!RichEditFileInfo} filePath_or_fileInfo A string value specifying path to the saving file on the server.
 * @param {!MailMergeSettings=} settings
 * @return {boolean}
 */
MailMergeAndSaveAsCommand.prototype.execute = function(filePath_or_fileInfo, settings) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
MailMergeAndSaveAsCommand.prototype.getState = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function CreatePageCountFieldCommand() {}

/**
 * Executes the CreatePageCountFieldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
CreatePageCountFieldCommand.prototype.execute = function() {};
/**
 * @record
 * @struct
 */
function MailMergeSettings() {}
 /** @type {?} */
MailMergeSettings.prototype.range;
 /** @type {number} */
MailMergeSettings.prototype.exportFrom;
 /** @type {number} */
MailMergeSettings.prototype.exportRecordsCount;
 /** @type {?} */
MailMergeSettings.prototype.mergeMode;

/** @const */
var MergeMode = {};
/** @const {number} */
MergeMode.NewParagraph;
/** @const {number} */
MergeMode.NewSection;
/** @const {number} */
MergeMode.JoinTables;

/** @const */
var MailMergeExportRange = {};
/** @const {number} */
MailMergeExportRange.AllRecords;
/** @const {number} */
MailMergeExportRange.CurrentRecord;
/** @const {number} */
MailMergeExportRange.Range;
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function FileNewCommand() {}

/**
 * Executes the FileNewCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
FileNewCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function FileOpenCommand() {}

/**
 * Executes the FileOpenCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {string} path A string value specifying path to the opening file.
 * @return {boolean}
 */
FileOpenCommand.prototype.execute = function(path) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function FileOpenDialogCommand() {}

/**
 * Executes the FileOpenDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
FileOpenDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function FileSaveCommand() {}

/**
 * Executes the FileSaveCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
FileSaveCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function FileSaveAsCommand() {}

/**
 * Executes the FileSaveAsCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 *
 * @param {string|!RichEditFileInfo} path_or_fileInfo A string value specifying path to the saving file.
 * @return {boolean}
 */
FileSaveAsCommand.prototype.execute = function(path_or_fileInfo) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function FileSaveAsDialogCommand() {}

/**
 * @return {boolean}
 */
FileSaveAsDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function FileDownloadCommand() {}

/**
 * Executes the FileDownloadCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 *
 * @param {string|?} fileExtension_or_documentFormat A string value specifying the extension of the downloading file.
 * @return {boolean}
 */
FileDownloadCommand.prototype.execute = function(fileExtension_or_documentFormat) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function FilePrintCommand() {}

/**
 * Executes the FilePrintCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
FilePrintCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function OpenFindPanelCommand() {}

/**
 * Executes the OpenFindPanelCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
OpenFindPanelCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function OpenFindAndReplaceDialogCommand() {}

/**
 * Executes the OpenFindAndReplaceDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
OpenFindAndReplaceDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function FindAllCommand() {}

/**
 * Executes the FindAllCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the FindAllCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {string} text A string value specifying finding text. / A string value specifying text to find.
 * @param {boolean} matchCase true, to perform a case-sensitive search; otherwise, false.
 * @param {boolean} highlightResults true, to highlight result of search; otherwise, false.
 * @param {!Array<!Interval>=} results An array of Interval objects containing the results of search.
 * @return {boolean}
 */
FindAllCommand.prototype.execute = function(text, matchCase, highlightResults, results) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function HideFindResultsCommand() {}

/**
 * Executes the HideFindResultsCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
HideFindResultsCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function ReplaceAllCommand() {}

/**
 * Executes the ReplaceAllCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {string} text A string value specifying text to replace.
 * @param {string} replaceText A string value specifying replacing text.
 * @param {boolean} matchCase true, to perform a case-sensitive search; otherwise, false.
 * @return {boolean}
 */
ReplaceAllCommand.prototype.execute = function(text, replaceText, matchCase) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function ReplaceNextCommand() {}

/**
 * Executes the ReplaceNextCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {string} text A string value specifying text to replace.
 * @param {string} replaceText A string value specifying replacing text.
 * @param {boolean} matchCase true, to perform a case-sensitive search; otherwise, false.
 * @return {boolean}
 */
ReplaceNextCommand.prototype.execute = function(text, replaceText, matchCase) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function UndoCommand() {}

/**
 * Executes the UndoCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
UndoCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function RedoCommand() {}

/**
 * Executes the RedoCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
RedoCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function OpenInsertHyperlinkDialogCommand() {}

/**
 * Executes the OpenInsertHyperlinkDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
OpenInsertHyperlinkDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function InsertHyperlinkCommand() {}

/**
 * Executes the InsertHyperlinkCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {!HyperlinkSettings} settings A HyperLinkSettings object specifying hyperlink settings.
 * @return {boolean}
 */
InsertHyperlinkCommand.prototype.execute = function(settings) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
InsertHyperlinkCommand.prototype.getState = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function DeleteHyperlinkCommand() {}

/**
 * Executes the DeleteHyperlinkCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
DeleteHyperlinkCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function DeleteHyperlinksCommand() {}

/**
 * Executes the DeleteHyperlinksCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
DeleteHyperlinksCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function OpenHyperlinkCommand() {}

/**
 * Executes the OpenHyperlinkCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
OpenHyperlinkCommand.prototype.execute = function() {};
/**
 * @record
 * @struct
 */
function HyperlinkSettings() {}
 /** @type {string} */
HyperlinkSettings.prototype.text;
 /** @type {string} */
HyperlinkSettings.prototype.tooltip;
 /** @type {string} */
HyperlinkSettings.prototype.url;
 /** @type {string} */
HyperlinkSettings.prototype.bookmark;
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertPageBreakCommand() {}

/**
 * Executes the InsertPageBreakCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
InsertPageBreakCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertColumnBreakCommand() {}

/**
 * Executes the InsertColumnBreakCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
InsertColumnBreakCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertSectionBreakNextPageCommand() {}

/**
 * Executes the InsertSectionBreakNextPageCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
InsertSectionBreakNextPageCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertSectionBreakEvenPageCommand() {}

/**
 * Executes the InsertSectionBreakEvenPageCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
InsertSectionBreakEvenPageCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertSectionBreakOddPageCommand() {}

/**
 * Executes the InsertSectionBreakOddPageCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
InsertSectionBreakOddPageCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertLineBreakCommand() {}

/**
 * Executes the InsertLineBreakCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
InsertLineBreakCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleBulletedListCommand() {}

/**
 * Executes the ToggleBulletedListCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleBulletedListCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleNumberingListCommand() {}

/**
 * Executes the ToggleNumberingListCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleNumberingListCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleMultilevelListCommand() {}

/**
 * Executes the ToggleMultilevelListCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleMultilevelListCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function OpenNumberingListDialogCommand() {}

/**
 * Executes the OpenNumberingListDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
OpenNumberingListDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function OpenCustomNumberingListDialogCommand() {}

/**
 * Executes the OpenCustomNumberingListDialogCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {number} abstractNumberingListIndex An integer value specifying index of abstract numbering list.
 * @return {boolean}
 */
OpenCustomNumberingListDialogCommand.prototype.execute = function(abstractNumberingListIndex) {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeCustomNumberingListCommand() {}

/**
 * Executes the ChangeCustomNumberingListCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {number} abstractNumberingListIndex An integer value specifying the numbering list index.
 * @param {!Array<!ListLevelSettings>} listLevelSettings An array of ListLevelSettings objects defining settings for list levels.
 * @return {boolean}
 */
ChangeCustomNumberingListCommand.prototype.execute = function(abstractNumberingListIndex, listLevelSettings) {};

/**
 * Gets information about the command state.
 * @param {number} abstractNumberingListIndex An integer value specifying the index of the abstract numbering list item whose state to return.
 * @return {?}
 */
ChangeCustomNumberingListCommand.prototype.getState = function(abstractNumberingListIndex) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function RestartNumberingListCommand() {}

/**
 * Executes the RestartNumberingListCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
RestartNumberingListCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function IncrementNumberingIndentCommand() {}

/**
 * Executes the IncrementNumberingIndentCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
IncrementNumberingIndentCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function DecrementNumberingIndentCommand() {}

/**
 * Executes the DecrementNumberingIndentCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
DecrementNumberingIndentCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function ContinueNumberingListCommand() {}

/**
 * Executes the ContinueNumberingListCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ContinueNumberingListCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertNumerationCommand() {}

/**
 * Executes the InsertNumerationCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the InsertNumerationCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {number} abstractNumberingListIndex_or_numberingListIndex An integer value specifying index of abstract numbering list. / An integer value specifying index of numbering list.
 * @param {boolean=} isAbstractNumberingList true, to insert an abstract numbering list; otherwise, false.
 * @return {boolean}
 */
InsertNumerationCommand.prototype.execute = function(abstractNumberingListIndex_or_numberingListIndex, isAbstractNumberingList) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function RemoveNumerationCommand() {}

/**
 * Executes the RemoveNumerationCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
RemoveNumerationCommand.prototype.execute = function() {};
/**
 * @record
 * @struct
 */
function ListLevelSettings() {}
 /** @type {string} */
ListLevelSettings.prototype.displayFormatString;
 /** @type {?} */
ListLevelSettings.prototype.format;
 /** @type {number} */
ListLevelSettings.prototype.start;
 /** @type {?} */
ListLevelSettings.prototype.alignment;
 /** @type {string} */
ListLevelSettings.prototype.separator;
 /** @type {number} */
ListLevelSettings.prototype.leftIndent;
 /** @type {number} */
ListLevelSettings.prototype.firstLineIndent;
 /** @type {?} */
ListLevelSettings.prototype.firstLineIndentType;
 /** @type {string} */
ListLevelSettings.prototype.fontName;
 /** @type {string} */
ListLevelSettings.prototype.fontColor;
 /** @type {number} */
ListLevelSettings.prototype.fontSize;
 /** @type {boolean} */
ListLevelSettings.prototype.fontBold;
 /** @type {boolean} */
ListLevelSettings.prototype.fontItalic;

/** @const */
var ListLevelFormat = {};
/** @const {number} */
ListLevelFormat.Decimal;
/** @const {number} */
ListLevelFormat.AIUEOHiragana;
/** @const {number} */
ListLevelFormat.AIUEOFullWidthHiragana;
/** @const {number} */
ListLevelFormat.ArabicAbjad;
/** @const {number} */
ListLevelFormat.ArabicAlpha;
/** @const {number} */
ListLevelFormat.Bullet;
/** @const {number} */
ListLevelFormat.CardinalText;
/** @const {number} */
ListLevelFormat.Chicago;
/** @const {number} */
ListLevelFormat.ChineseCounting;
/** @const {number} */
ListLevelFormat.ChineseCountingThousand;
/** @const {number} */
ListLevelFormat.ChineseLegalSimplified;
/** @const {number} */
ListLevelFormat.Chosung;
/** @const {number} */
ListLevelFormat.DecimalEnclosedCircle;
/** @const {number} */
ListLevelFormat.DecimalEnclosedCircleChinese;
/** @const {number} */
ListLevelFormat.DecimalEnclosedFullstop;
/** @const {number} */
ListLevelFormat.DecimalEnclosedParentheses;
/** @const {number} */
ListLevelFormat.DecimalFullWidth;
/** @const {number} */
ListLevelFormat.DecimalFullWidth2;
/** @const {number} */
ListLevelFormat.DecimalHalfWidth;
/** @const {number} */
ListLevelFormat.DecimalZero;
/** @const {number} */
ListLevelFormat.Ganada;
/** @const {number} */
ListLevelFormat.Hebrew1;
/** @const {number} */
ListLevelFormat.Hebrew2;
/** @const {number} */
ListLevelFormat.Hex;
/** @const {number} */
ListLevelFormat.HindiConsonants;
/** @const {number} */
ListLevelFormat.HindiDescriptive;
/** @const {number} */
ListLevelFormat.HindiNumbers;
/** @const {number} */
ListLevelFormat.HindiVowels;
/** @const {number} */
ListLevelFormat.IdeographDigital;
/** @const {number} */
ListLevelFormat.IdeographEnclosedCircle;
/** @const {number} */
ListLevelFormat.IdeographLegalTraditional;
/** @const {number} */
ListLevelFormat.IdeographTraditional;
/** @const {number} */
ListLevelFormat.IdeographZodiac;
/** @const {number} */
ListLevelFormat.IdeographZodiacTraditional;
/** @const {number} */
ListLevelFormat.Iroha;
/** @const {number} */
ListLevelFormat.IrohaFullWidth;
/** @const {number} */
ListLevelFormat.JapaneseCounting;
/** @const {number} */
ListLevelFormat.JapaneseDigitalTenThousand;
/** @const {number} */
ListLevelFormat.JapaneseLegal;
/** @const {number} */
ListLevelFormat.KoreanCounting;
/** @const {number} */
ListLevelFormat.KoreanDigital;
/** @const {number} */
ListLevelFormat.KoreanDigital2;
/** @const {number} */
ListLevelFormat.KoreanLegal;
/** @const {number} */
ListLevelFormat.LowerLetter;
/** @const {number} */
ListLevelFormat.LowerRoman;
/** @const {number} */
ListLevelFormat.None;
/** @const {number} */
ListLevelFormat.NumberInDash;
/** @const {number} */
ListLevelFormat.Ordinal;
/** @const {number} */
ListLevelFormat.OrdinalText;
/** @const {number} */
ListLevelFormat.RussianLower;
/** @const {number} */
ListLevelFormat.RussianUpper;
/** @const {number} */
ListLevelFormat.TaiwaneseCounting;
/** @const {number} */
ListLevelFormat.TaiwaneseCountingThousand;
/** @const {number} */
ListLevelFormat.TaiwaneseDigital;
/** @const {number} */
ListLevelFormat.ThaiDescriptive;
/** @const {number} */
ListLevelFormat.ThaiLetters;
/** @const {number} */
ListLevelFormat.ThaiNumbers;
/** @const {number} */
ListLevelFormat.UpperLetter;
/** @const {number} */
ListLevelFormat.UpperRoman;
/** @const {number} */
ListLevelFormat.VietnameseDescriptive;

/** @const */
var ListLevelNumberAlignment = {};
/** @const {number} */
ListLevelNumberAlignment.Left;
/** @const {number} */
ListLevelNumberAlignment.Center;
/** @const {number} */
ListLevelNumberAlignment.Right;
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function OpenInsertPictureDialogCommand() {}

/**
 * Executes the OpenInsertPictureDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
OpenInsertPictureDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertPictureCommand() {}

/**
 * Executes the InsertPictureCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {string} imageUrl A string value specifying picture's Url.
 * @return {boolean}
 */
InsertPictureCommand.prototype.execute = function(imageUrl) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function OpenInsertSymbolDialogCommand() {}

/**
 * Executes the OpenInsertSymbolDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
OpenInsertSymbolDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertSymbolCommand() {}

/**
 * Executes the InsertSymbolCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {string} symbol A string value specifying symbols to insert.
 * @param {string} fontName A string value specifying font of symbols to insert.
 * @return {boolean}
 */
InsertSymbolCommand.prototype.execute = function(symbol, fontName) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertParagraphCommand() {}

/**
 * Executes the InsertParagraphCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
InsertParagraphCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertTextCommand() {}

/**
 * Executes the InsertTextCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {string} text A string value specifying text to insert.
 * @return {boolean}
 */
InsertTextCommand.prototype.execute = function(text) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function DeleteCommand() {}

/**
 * Executes the DeleteCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
DeleteCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function RemovePrevWordCommand() {}

/**
 * @return {boolean}
 */
RemovePrevWordCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function RemoveNextWordCommand() {}

/**
 * @return {boolean}
 */
RemoveNextWordCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function BackspaceCommand() {}

/**
 * Executes the BackspaceCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
BackspaceCommand.prototype.execute = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangePictureScaleCommand() {}

/**
 * Executes the ChangePictureScaleCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the ChangePictureScaleCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {!Scale|number} scale_or_x A Scale object specifying scaling of the picture. / An interger number specifying width of the picture
 * @param {number=} y An interger number specifying height of the picture
 * @return {boolean}
 */
ChangePictureScaleCommand.prototype.execute = function(scale_or_x, y) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangePictureScaleCommand.prototype.getState = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function MoveContentCommand() {}

/**
 * Executes the MoveContentCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {number} position An integer value specifying position to insert selected text.
 * @return {boolean}
 */
MoveContentCommand.prototype.execute = function(position) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function CopyContentCommand() {}

/**
 * Executes the CopyContentCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {number} position An integer number value specifying position for pasting selected text.
 * @return {boolean}
 */
CopyContentCommand.prototype.execute = function(position) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertTabCommand() {}

/**
 * Executes the InsertTabCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
InsertTabCommand.prototype.execute = function() {};
/**
 * @record
 * @struct
 */
function Scale() {}
 /** @type {number} */
Scale.prototype.x;
 /** @type {number} */
Scale.prototype.y;
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangePageMarginsCommand() {}

/**
 * Executes the ChangePageMarginsCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the ChangePageMarginsCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {number|!Margins} left_or_margins An integer number specifying left margin of the page. / A Margins object specifying page margin settings.
 * @param {number=} top An integer number specifying top margin of the page.
 * @param {number=} right An integer number specifying right margin of the page.
 * @param {number=} bottom An integer number specifying bottom margin of the page.
 * @return {boolean}
 */
ChangePageMarginsCommand.prototype.execute = function(left_or_margins, top, right, bottom) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangePageMarginsCommand.prototype.getState = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function OpenPageMarginsDialogCommand() {}

/**
 * Executes the OpenPageMarginsDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
OpenPageMarginsDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangePageOrientationCommand() {}

/**
 *
 * @param {?} isPortrait
 * @return {boolean}
 */
ChangePageOrientationCommand.prototype.execute = function(isPortrait) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangePageOrientationCommand.prototype.getState = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function OpenPagePaperSizeDialogCommand() {}

/**
 * Executes the OpenPagePaperSizeDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
OpenPagePaperSizeDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function SetPageSizeDialogCommand() {}

/**
 * Executes the SetPageSizeDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
SetPageSizeDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangePageSizeCommand() {}

/**
 * Executes the ChangePageSizeCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the ChangePageSizeCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {number|!Size} width_or_size An integer number specifying width of the page. / A Size object specifying the page size settings.
 * @param {number=} height An integer number specifying height of the page.
 * @return {boolean}
 */
ChangePageSizeCommand.prototype.execute = function(width_or_size, height) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangePageSizeCommand.prototype.getState = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeSectionEqualColumnCountCommand() {}

/**
 * Executes the ChangeSectionEqualColumnCountCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {number} columnCount An interger number specifying the number of section columns having the same width.
 * @return {boolean}
 */
ChangeSectionEqualColumnCountCommand.prototype.execute = function(columnCount) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeSectionEqualColumnCountCommand.prototype.getState = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function OpenSectionColumnsDialogCommand() {}

/**
 * Executes the OpenSectionColumnsDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
OpenSectionColumnsDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeSectionColumnsCommand() {}

/**
 *
 * @param {!Array<!SectionColumn>} columns
 * @return {boolean}
 */
ChangeSectionColumnsCommand.prototype.execute = function(columns) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeSectionColumnsCommand.prototype.getState = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangePageColorCommand() {}

/**
 * Executes the ChangePageColorCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {string} color A string specifying background color of the page. May be specified as color name or hex color value.
 * @return {boolean}
 */
ChangePageColorCommand.prototype.execute = function(color) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangePageColorCommand.prototype.getState = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertHeaderCommand() {}

/**
 * Executes the InsertHeaderCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
InsertHeaderCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertFooterCommand() {}

/**
 * Executes the InsertFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
InsertFooterCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function LinkHeaderFooterToPreviousCommand() {}

/**
 * Executes the LinkHeaderFooterToPreviousCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
LinkHeaderFooterToPreviousCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function GoToFooterCommand() {}

/**
 * Executes the GoToFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
GoToFooterCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function GoToHeaderCommand() {}

/**
 * Executes the GoToHeaderCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
GoToHeaderCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function GoToNextHeaderFooterCommand() {}

/**
 * Executes the GoToNextHeaderFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
GoToNextHeaderFooterCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function GoToPreviousHeaderFooterCommand() {}

/**
 * Executes the GoToPreviousHeaderFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
GoToPreviousHeaderFooterCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function SetDifferentFirstPageHeaderFooterCommand() {}

/**
 * Executes the SetDifferentFirstPageHeaderFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the SetDifferentFirstPageHeaderFooterCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {boolean=} differentFirstPage true to apply different text for first page's header and footer, false to remove difference.
 * @return {boolean}
 */
SetDifferentFirstPageHeaderFooterCommand.prototype.execute = function(differentFirstPage) {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function SetDifferentOddAndEvenPagesHeaderFooterCommand() {}

/**
 * Executes the SetDifferentOddAndEvenPagesHeaderFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the SetDifferentOddAndEvenPagesHeaderFooterCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {boolean=} differentOddAndEvenPages true to apply different text for odd and even pages' header and footer, false to remove difference.
 * @return {boolean}
 */
SetDifferentOddAndEvenPagesHeaderFooterCommand.prototype.execute = function(differentOddAndEvenPages) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function CloseHeaderFooterCommand() {}

/**
 * Executes the CloseHeaderFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
CloseHeaderFooterCommand.prototype.execute = function() {};
/**
 * @record
 * @struct
 */
function SectionColumn() {}
 /** @type {number} */
SectionColumn.prototype.width;
 /** @type {number} */
SectionColumn.prototype.spacing;
/**
 * @record
 * @struct
 */
function Size() {}
 /** @type {number} */
Size.prototype.width;
 /** @type {number} */
Size.prototype.height;
/**
 * @record
 * @struct
 */
function Margins() {}
 /** @type {number} */
Margins.prototype.left;
 /** @type {number} */
Margins.prototype.top;
 /** @type {number} */
Margins.prototype.right;
 /** @type {number} */
Margins.prototype.bottom;

/** @const */
var Orientation = {};
/** @const {number} */
Orientation.Landscape;
/** @const {number} */
Orientation.Portrait;
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function IncreaseIndentCommand() {}

/**
 * Executes the IncreaseIndentCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
IncreaseIndentCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function DecreaseIndentCommand() {}

/**
 * Executes the DecreaseIndentCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
DecreaseIndentCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ShowHiddenSymbolsCommand() {}

/**
 * Executes the ShowHiddenSymbolsCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the ShowHiddenSymbolsCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {boolean=} show true to display hidden symbols; otherwise, false.
 * @return {boolean}
 */
ShowHiddenSymbolsCommand.prototype.execute = function(show) {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleParagraphAlignmentLeftCommand() {}

/**
 * Executes the ToggleParagraphAlignmentLeftCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleParagraphAlignmentLeftCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleParagraphAlignmentCenterCommand() {}

/**
 * Executes the ToggleParagraphAlignmentCenterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleParagraphAlignmentCenterCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleParagraphAlignmentRightCommand() {}

/**
 * Executes the ToggleParagraphAlignmentRightCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleParagraphAlignmentRightCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleParagraphAlignmentJustifyCommand() {}

/**
 * Executes the ToggleParagraphAlignmentJustifyCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleParagraphAlignmentJustifyCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function SetSingleParagraphSpacingCommand() {}

/**
 * Executes the SetSingleParagraphSpacingCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
SetSingleParagraphSpacingCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function SetSesquialteralParagraphSpacingCommand() {}

/**
 * Executes the SetSesquialteralParagraphSpacingCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
SetSesquialteralParagraphSpacingCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function SetDoubleParagraphSpacingCommand() {}

/**
 * Executes the SetDoubleParagraphSpacingCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
SetDoubleParagraphSpacingCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function AddSpacingBeforeParagraphCommand() {}

/**
 * Executes the AddSpacingBeforeParagraphCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
AddSpacingBeforeParagraphCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function AddSpacingAfterParagraphCommand() {}

/**
 * Executes the AddSpacingAfterParagraphCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
AddSpacingAfterParagraphCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function RemoveSpacingBeforeParagraphCommand() {}

/**
 * Executes the RemoveSpacingBeforeParagraphCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
RemoveSpacingBeforeParagraphCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function RemoveSpacingAfterParagraphCommand() {}

/**
 * Executes the RemoveSpacingAfterParagraphCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
RemoveSpacingAfterParagraphCommand.prototype.execute = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeParagraphBackColorCommand() {}

/**
 * Executes the ChangeParagraphBackColorCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {string} color A string specifying highlighting color of the paragraphs in a selected range. May be specified as color name or hex color value.
 * @return {boolean}
 */
ChangeParagraphBackColorCommand.prototype.execute = function(color) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeParagraphBackColorCommand.prototype.getState = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function OpenParagraphFormattingDialogCommand() {}

/**
 * Executes the OpenParagraphFormattingDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
OpenParagraphFormattingDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeParagraphFormattingCommand() {}

/**
 * Executes the ChangeParagraphFormattingCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {!ParagraphFormattingSettings} settings A ParagraphFormattingSettings object specifying paragraph formatting settings.
 * @return {boolean}
 */
ChangeParagraphFormattingCommand.prototype.execute = function(settings) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeParagraphFormattingCommand.prototype.getState = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function IncrementParagraphLeftIndentCommand() {}

/**
 * Executes the IncrementParagraphLeftIndentCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
IncrementParagraphLeftIndentCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function DecrementParagraphLeftIndentCommand() {}

/**
 * Executes the DecrementParagraphLeftIndentCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
DecrementParagraphLeftIndentCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function OpenTabsDialogCommand() {}

/**
 * Executes the OpenTabsDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
OpenTabsDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeTabsCommand() {}

/**
 * Executes the ChangeTabsCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {!TabsSettings} settings A TabsSettings object maintaining the information about tab stops.
 * @return {boolean}
 */
ChangeTabsCommand.prototype.execute = function(settings) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeTabsCommand.prototype.getState = function() {};
/**
 * @record
 * @struct
 */
function TabsSettings() {}
 /** @type {number} */
TabsSettings.prototype.defaultTabStop;
 /** @type {!Array<!TabSettings>} */
TabsSettings.prototype.tabs;
/**
 * @record
 * @struct
 */
function TabSettings() {}
 /** @type {?} */
TabSettings.prototype.alignment;
 /** @type {?} */
TabSettings.prototype.leader;
 /** @type {number} */
TabSettings.prototype.position;
 /** @type {boolean} */
TabSettings.prototype.deleted;

/** @const */
var TabAlign = {};
/** @const {number} */
TabAlign.Left;
/** @const {number} */
TabAlign.Center;
/** @const {number} */
TabAlign.Right;
/** @const {number} */
TabAlign.Decimal;

/** @const */
var TabLeaderType = {};
/** @const {number} */
TabLeaderType.None;
/** @const {number} */
TabLeaderType.Dots;
/** @const {number} */
TabLeaderType.MiddleDots;
/** @const {number} */
TabLeaderType.Hyphens;
/** @const {number} */
TabLeaderType.Underline;
/** @const {number} */
TabLeaderType.ThickLine;
/** @const {number} */
TabLeaderType.EqualSign;
/**
 * @record
 * @struct
 */
function ParagraphFormattingSettings() {}
 /** @type {?} */
ParagraphFormattingSettings.prototype.alignment;
 /** @type {number} */
ParagraphFormattingSettings.prototype.outlineLevel;
 /** @type {number} */
ParagraphFormattingSettings.prototype.rightIndent;
 /** @type {number} */
ParagraphFormattingSettings.prototype.spacingBefore;
 /** @type {number} */
ParagraphFormattingSettings.prototype.spacingAfter;
 /** @type {?} */
ParagraphFormattingSettings.prototype.lineSpacingType;
 /** @type {?} */
ParagraphFormattingSettings.prototype.firstLineIndentType;
 /** @type {number} */
ParagraphFormattingSettings.prototype.firstLineIndent;
 /** @type {boolean} */
ParagraphFormattingSettings.prototype.contextualSpacing;
 /** @type {boolean} */
ParagraphFormattingSettings.prototype.keepLinesTogether;
 /** @type {boolean} */
ParagraphFormattingSettings.prototype.pageBreakBefore;
 /** @type {number} */
ParagraphFormattingSettings.prototype.leftIndent;
 /** @type {number} */
ParagraphFormattingSettings.prototype.lineSpacing;
 /** @type {string} */
ParagraphFormattingSettings.prototype.backColor;

/** @const */
var ParagraphAlignment = {};
/** @const {number} */
ParagraphAlignment.Left;
/** @const {number} */
ParagraphAlignment.Right;
/** @const {number} */
ParagraphAlignment.Center;
/** @const {number} */
ParagraphAlignment.Justify;

/** @const */
var ParagraphLineSpacingType = {};
/** @const {number} */
ParagraphLineSpacingType.Single;
/** @const {number} */
ParagraphLineSpacingType.Sesquialteral;
/** @const {number} */
ParagraphLineSpacingType.Double;
/** @const {number} */
ParagraphLineSpacingType.Multiple;
/** @const {number} */
ParagraphLineSpacingType.Exactly;
/** @const {number} */
ParagraphLineSpacingType.AtLeast;

/** @const */
var ParagraphFirstLineIndent = {};
/** @const {number} */
ParagraphFirstLineIndent.None;
/** @const {number} */
ParagraphFirstLineIndent.Indented;
/** @const {number} */
ParagraphFirstLineIndent.Hanging;
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function AssignShortcutCommand() {}

/**
 *
 * @param {number} keyCode
 * @param {function(string): void} callback
 * @return {boolean}
 */
AssignShortcutCommand.prototype.execute = function(keyCode, callback) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function OpenSpellingDialogCommand() {}

/**
 * @return {boolean}
 */
OpenSpellingDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function OpenInsertTableDialogCommand() {}

/**
 * Executes the OpenInsertTableDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
OpenInsertTableDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertTableCommand() {}

/**
 * Executes the InsertTableCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {number} columnCount An integer value specifying number of columns in a generated table.
 * @param {number} rowCount An integer value specifying number of rows in a generated table.
 * @return {boolean}
 */
InsertTableCommand.prototype.execute = function(columnCount, rowCount) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function OpenTableFormattingDialogCommand() {}

/**
 * Executes the OpenTableFormattingDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
OpenTableFormattingDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeTableFormattingCommand() {}

/**
 * Executes the ChangeTableFormattingCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {!TableFormattingSettings} settings A TableFormattingSettings object containing the settings to format a table.
 * @return {boolean}
 */
ChangeTableFormattingCommand.prototype.execute = function(settings) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeTableFormattingCommand.prototype.getState = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeTableRowPreferredHeightCommand() {}

/**
 * Executes the ChangeTableRowPreferredHeightCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {!TableHeightUnit} preferredHeight A TableHeightUnit object specifying preferred height of the selected table rows.
 * @return {boolean}
 */
ChangeTableRowPreferredHeightCommand.prototype.execute = function(preferredHeight) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeTableRowPreferredHeightCommand.prototype.getState = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeTableCellPreferredWidthCommand() {}

/**
 * Executes the ChangeTableCellPreferredWidthCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {!TableWidthUnit} preferredWidth A TableWidthUnit object specifying preferred width of the selected table rows.
 * @return {boolean}
 */
ChangeTableCellPreferredWidthCommand.prototype.execute = function(preferredWidth) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeTableCellPreferredWidthCommand.prototype.getState = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeTableColumnPreferredWidthCommand() {}

/**
 * Executes the ChangeTableColumnPreferredWidthCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {!TableWidthUnit} preferredWidth A TableWidthUnit object specifying preferred width of the selected table columns.
 * @return {boolean}
 */
ChangeTableColumnPreferredWidthCommand.prototype.execute = function(preferredWidth) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeTableColumnPreferredWidthCommand.prototype.getState = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeTableCellFormattingCommand() {}

/**
 * Executes the ChangeTableCellFormattingCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {!TableCellFormattingSettings} settings A TableFormattingSettings object specifying cell formatting of the selected table elements.
 * @return {boolean}
 */
ChangeTableCellFormattingCommand.prototype.execute = function(settings) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeTableCellFormattingCommand.prototype.getState = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertTableColumnToTheLeftCommand() {}

/**
 * Executes the InsertTableColumnToTheLeftCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
InsertTableColumnToTheLeftCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertTableColumnToTheRightCommand() {}

/**
 * Executes the InsertTableColumnToTheRightCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
InsertTableColumnToTheRightCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertTableRowBelowCommand() {}

/**
 * Executes the InsertTableRowBelowCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
InsertTableRowBelowCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertTableRowAboveCommand() {}

/**
 * Executes the InsertTableRowAboveCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
InsertTableRowAboveCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function DeleteTableRowsCommand() {}

/**
 * Executes the DeleteTableRowsCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
DeleteTableRowsCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function DeleteTableColumnsCommand() {}

/**
 * Executes the DeleteTableColumnsCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
DeleteTableColumnsCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertTableCellWithShiftToTheLeftCommand() {}

/**
 * Executes the InsertTableCellWithShiftToTheLeftCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
InsertTableCellWithShiftToTheLeftCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function DeleteTableCellsWithShiftHorizontallyCommand() {}

/**
 * Executes the DeleteTableCellsWithShiftHorizontallyCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
DeleteTableCellsWithShiftHorizontallyCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function DeleteTableCellsWithShiftVerticallyCommand() {}

/**
 * Executes the DeleteTableCellsWithShiftVerticallyCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
DeleteTableCellsWithShiftVerticallyCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function DeleteTableCommand() {}

/**
 * Executes the DeleteTableCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
DeleteTableCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertTableCellsDialogCommand() {}

/**
 * Executes the InsertTableCellsDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
InsertTableCellsDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function DeleteTableCellsDialogCommand() {}

/**
 * Executes the DeleteTableCellsDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
DeleteTableCellsDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function MergeTableCellsCommand() {}

/**
 * Executes the MergeTableCellsCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
MergeTableCellsCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function SplitTableCellsDialogCommand() {}

/**
 * Executes the SplitTableCellsDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
SplitTableCellsDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function SplitTableCellsCommand() {}

/**
 * Executes the SplitTableCellsCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {number} rowCount An integer value specifying number of rows in the splitted table cells.
 * @param {number} columnCount An integer value specifying number of columns in the splitted table cells.
 * @param {boolean} mergeBeforeSplit true to merge the selected cells before splitting; otherwise, false.
 * @return {boolean}
 */
SplitTableCellsCommand.prototype.execute = function(rowCount, columnCount, mergeBeforeSplit) {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function InsertTableCellsWithShiftToTheVerticallyCommand() {}

/**
 * Executes the InsertTableCellsWithShiftToTheVerticallyCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
InsertTableCellsWithShiftToTheVerticallyCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function OpenTableBordersAndShadingDialogCommand() {}

/**
 * Executes the OpenTableBordersAndShadingDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
OpenTableBordersAndShadingDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeTableBordersAndShadingCommand() {}

/**
 * Executes the ChangeTableBordersAndShadingCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {!TableBordersSettings} settings A TableBorderSettings object with settings specifying table borders.
 * @param {boolean} applyToWholeTable true to apply the border settings to the whole table, false to apply the border settings to the selected cells.
 * @return {boolean}
 */
ChangeTableBordersAndShadingCommand.prototype.execute = function(settings, applyToWholeTable) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeTableBordersAndShadingCommand.prototype.getState = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleTableCellAlignTopLeftCommand() {}

/**
 * Executes the ToggleTableCellAlignTopLeftCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleTableCellAlignTopLeftCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleTableCellAlignTopCenterCommand() {}

/**
 * Executes the ToggleTableCellAlignTopCenterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleTableCellAlignTopCenterCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleTableCellAlignTopRightCommand() {}

/**
 * Executes the ToggleTableCellAlignTopRightCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleTableCellAlignTopRightCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleTableCellAlignMiddleLeftCommand() {}

/**
 * Executes the ToggleTableCellAlignMiddleLeftCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleTableCellAlignMiddleLeftCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleTableCellAlignMiddleCenterCommand() {}

/**
 * Executes the ToggleTableCellAlignMiddleCenterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleTableCellAlignMiddleCenterCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleTableCellAlignMiddleRightCommand() {}

/**
 * Executes the ToggleTableCellAlignMiddleRightCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleTableCellAlignMiddleRightCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleTableCellAlignBottomLeftCommand() {}

/**
 * Executes the ToggleTableCellAlignBottomLeftCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleTableCellAlignBottomLeftCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleTableCellAlignBottomCenterCommand() {}

/**
 * Executes the ToggleTableCellAlignBottomCenterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleTableCellAlignBottomCenterCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleTableCellAlignBottomRightCommand() {}

/**
 * Executes the ToggleTableCellAlignBottomRightCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleTableCellAlignBottomRightCommand.prototype.execute = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeTableStyleCommand() {}

/**
 * Executes the ChangeTableStyleCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the ChangeTableStyleCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {!TableStyle|string} style_or_styleName A TableStyle object specifying the style applying to the table. / A string specifying the name of style applying to the table.
 * @return {boolean}
 */
ChangeTableStyleCommand.prototype.execute = function(style_or_styleName) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeTableStyleCommand.prototype.getState = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleTableCellTopBorderCommand() {}

/**
 * Executes the ToggleTableCellTopBorderCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleTableCellTopBorderCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleTableCellRightBorderCommand() {}

/**
 * Executes the ToggleTableCellRightBorderCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleTableCellRightBorderCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleTableCellBottomBorderCommand() {}

/**
 * Executes the ToggleTableCellBottomBorderCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleTableCellBottomBorderCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleTableCellLeftBorderCommand() {}

/**
 * @return {boolean}
 */
ToggleTableCellLeftBorderCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function RemoveTableCellBordersCommand() {}

/**
 * Executes the RemoveTableCellBordersCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
RemoveTableCellBordersCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleTableCellAllBordersCommand() {}

/**
 * Executes the ToggleTableCellAllBordersCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleTableCellAllBordersCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleTableCellInsideBordersCommand() {}

/**
 * Executes the ToggleTableCellInsideBordersCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleTableCellInsideBordersCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleTableCellInsideHorizontalBordersCommand() {}

/**
 * Executes the ToggleTableCellInsideHorizontalBordersCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleTableCellInsideHorizontalBordersCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleTableCellInsideVerticalBordersCommand() {}

/**
 * Executes the ToggleTableCellInsideVerticalBordersCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleTableCellInsideVerticalBordersCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ToggleTableCellOutsideBordersCommand() {}

/**
 * Executes the ToggleTableCellOutsideBordersCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleTableCellOutsideBordersCommand.prototype.execute = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeTableLookCommand() {}

/**
 * Executes the ChangeTableLookCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {!TableLookSettings} settings A TableLookSettings object containing the settings that modify the table appearance.
 * @return {boolean}
 */
ChangeTableLookCommand.prototype.execute = function(settings) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeTableLookCommand.prototype.getState = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeTableBorderRepositoryItemCommand() {}

/**
 * Executes the ChangeTableBorderRepositoryItemCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {!TableBorderSettings} settings A TableBorderSettings object specifying the repository item's table border style.
 * @return {boolean}
 */
ChangeTableBorderRepositoryItemCommand.prototype.execute = function(settings) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeTableBorderRepositoryItemCommand.prototype.getState = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeTableCellShadingCommand() {}

/**
 * Executes the ChangeTableCellShadingCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {string} color A string specifying color of the selected cells' shading. May be specified as color name or hex color value.
 * @return {boolean}
 */
ChangeTableCellShadingCommand.prototype.execute = function(color) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeTableCellShadingCommand.prototype.getState = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ShowTableGridLinesCommand() {}

/**
 * Executes the ShowTableGridLinesCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the ShowTableGridLinesCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {boolean=} showTableGridLines true to display grid lines of the table, false to hide grid lines of the table.
 * @return {boolean}
 */
ShowTableGridLinesCommand.prototype.execute = function(showTableGridLines) {};
/**
 * @record
 * @struct
 */
function TableLookSettings() {}
 /** @type {boolean} */
TableLookSettings.prototype.applyFirstRow;
 /** @type {boolean} */
TableLookSettings.prototype.applyLastRow;
 /** @type {boolean} */
TableLookSettings.prototype.applyFirstColumn;
 /** @type {boolean} */
TableLookSettings.prototype.applyLastColumn;
 /** @type {boolean} */
TableLookSettings.prototype.doNotApplyRowBanding;
 /** @type {boolean} */
TableLookSettings.prototype.doNotApplyColumnBanding;
/**
 * @record
 * @struct
 */
function TableBordersSettings() {}
 /** @type {!TableBorderSettings} */
TableBordersSettings.prototype.top;
 /** @type {!TableBorderSettings} */
TableBordersSettings.prototype.right;
 /** @type {!TableBorderSettings} */
TableBordersSettings.prototype.bottom;
 /** @type {!TableBorderSettings} */
TableBordersSettings.prototype.left;
 /** @type {!TableBorderSettings} */
TableBordersSettings.prototype.insideHorizontal;
 /** @type {!TableBorderSettings} */
TableBordersSettings.prototype.insideVertical;
 /** @type {string} */
TableBordersSettings.prototype.backgroundColor;
/**
 * @record
 * @struct
 */
function TableBorderSettings() {}
 /** @type {string} */
TableBorderSettings.prototype.color;
 /** @type {number} */
TableBorderSettings.prototype.width;
 /** @type {?} */
TableBorderSettings.prototype.style;

/** @const */
var BorderLineStyle = {};
/** @const {number} */
BorderLineStyle.None;
/** @const {number} */
BorderLineStyle.Single;
/** @const {number} */
BorderLineStyle.Thick;
/** @const {number} */
BorderLineStyle.Double;
/** @const {number} */
BorderLineStyle.Dotted;
/** @const {number} */
BorderLineStyle.Dashed;
/** @const {number} */
BorderLineStyle.DotDash;
/** @const {number} */
BorderLineStyle.DotDotDash;
/** @const {number} */
BorderLineStyle.Triple;
/** @const {number} */
BorderLineStyle.ThinThickSmallGap;
/** @const {number} */
BorderLineStyle.ThickThinSmallGap;
/** @const {number} */
BorderLineStyle.ThinThickThinSmallGap;
/** @const {number} */
BorderLineStyle.ThinThickMediumGap;
/** @const {number} */
BorderLineStyle.ThickThinMediumGap;
/** @const {number} */
BorderLineStyle.ThinThickThinMediumGap;
/** @const {number} */
BorderLineStyle.ThinThickLargeGap;
/** @const {number} */
BorderLineStyle.ThickThinLargeGap;
/** @const {number} */
BorderLineStyle.ThinThickThinLargeGap;
/** @const {number} */
BorderLineStyle.Wave;
/** @const {number} */
BorderLineStyle.DoubleWave;
/** @const {number} */
BorderLineStyle.DashSmallGap;
/** @const {number} */
BorderLineStyle.DashDotStroked;
/** @const {number} */
BorderLineStyle.ThreeDEmboss;
/** @const {number} */
BorderLineStyle.ThreeDEngrave;
/** @const {number} */
BorderLineStyle.Outset;
/** @const {number} */
BorderLineStyle.Inset;
/** @const {number} */
BorderLineStyle.Apples;
/** @const {number} */
BorderLineStyle.ArchedScallops;
/** @const {number} */
BorderLineStyle.BabyPacifier;
/** @const {number} */
BorderLineStyle.BabyRattle;
/** @const {number} */
BorderLineStyle.Balloons3Colors;
/** @const {number} */
BorderLineStyle.BalloonsHotAir;
/** @const {number} */
BorderLineStyle.BasicBlackDashes;
/** @const {number} */
BorderLineStyle.BasicBlackDots;
/** @const {number} */
BorderLineStyle.BasicBlackSquares;
/** @const {number} */
BorderLineStyle.BasicThinLines;
/** @const {number} */
BorderLineStyle.BasicWhiteDashes;
/** @const {number} */
BorderLineStyle.BasicWhiteDots;
/** @const {number} */
BorderLineStyle.BasicWhiteSquares;
/** @const {number} */
BorderLineStyle.BasicWideInline;
/** @const {number} */
BorderLineStyle.BasicWideMidline;
/** @const {number} */
BorderLineStyle.BasicWideOutline;
/** @const {number} */
BorderLineStyle.Bats;
/** @const {number} */
BorderLineStyle.Birds;
/** @const {number} */
BorderLineStyle.BirdsFlight;
/** @const {number} */
BorderLineStyle.Cabins;
/** @const {number} */
BorderLineStyle.CakeSlice;
/** @const {number} */
BorderLineStyle.CandyCorn;
/** @const {number} */
BorderLineStyle.CelticKnotwork;
/** @const {number} */
BorderLineStyle.CertificateBanner;
/** @const {number} */
BorderLineStyle.ChainLink;
/** @const {number} */
BorderLineStyle.ChampagneBottle;
/** @const {number} */
BorderLineStyle.CheckedBarBlack;
/** @const {number} */
BorderLineStyle.CheckedBarColor;
/** @const {number} */
BorderLineStyle.Checkered;
/** @const {number} */
BorderLineStyle.ChristmasTree;
/** @const {number} */
BorderLineStyle.CirclesLines;
/** @const {number} */
BorderLineStyle.CirclesRectangles;
/** @const {number} */
BorderLineStyle.ClassicalWave;
/** @const {number} */
BorderLineStyle.Clocks;
/** @const {number} */
BorderLineStyle.Compass;
/** @const {number} */
BorderLineStyle.Confetti;
/** @const {number} */
BorderLineStyle.ConfettiGrays;
/** @const {number} */
BorderLineStyle.ConfettiOutline;
/** @const {number} */
BorderLineStyle.ConfettiStreamers;
/** @const {number} */
BorderLineStyle.ConfettiWhite;
/** @const {number} */
BorderLineStyle.CornerTriangles;
/** @const {number} */
BorderLineStyle.CouponCutoutDashes;
/** @const {number} */
BorderLineStyle.CouponCutoutDots;
/** @const {number} */
BorderLineStyle.CrazyMaze;
/** @const {number} */
BorderLineStyle.CreaturesButterfly;
/** @const {number} */
BorderLineStyle.CreaturesFish;
/** @const {number} */
BorderLineStyle.CreaturesInsects;
/** @const {number} */
BorderLineStyle.CreaturesLadyBug;
/** @const {number} */
BorderLineStyle.CrossStitch;
/** @const {number} */
BorderLineStyle.Cup;
/** @const {number} */
BorderLineStyle.DecoArch;
/** @const {number} */
BorderLineStyle.DecoArchColor;
/** @const {number} */
BorderLineStyle.DecoBlocks;
/** @const {number} */
BorderLineStyle.DiamondsGray;
/** @const {number} */
BorderLineStyle.DoubleD;
/** @const {number} */
BorderLineStyle.DoubleDiamonds;
/** @const {number} */
BorderLineStyle.Earth1;
/** @const {number} */
BorderLineStyle.Earth2;
/** @const {number} */
BorderLineStyle.EclipsingSquares1;
/** @const {number} */
BorderLineStyle.EclipsingSquares2;
/** @const {number} */
BorderLineStyle.EggsBlack;
/** @const {number} */
BorderLineStyle.Fans;
/** @const {number} */
BorderLineStyle.Film;
/** @const {number} */
BorderLineStyle.Firecrackers;
/** @const {number} */
BorderLineStyle.FlowersBlockPrint;
/** @const {number} */
BorderLineStyle.FlowersDaisies;
/** @const {number} */
BorderLineStyle.FlowersModern1;
/** @const {number} */
BorderLineStyle.FlowersModern2;
/** @const {number} */
BorderLineStyle.FlowersPansy;
/** @const {number} */
BorderLineStyle.FlowersRedRose;
/** @const {number} */
BorderLineStyle.FlowersRoses;
/** @const {number} */
BorderLineStyle.FlowersTeacup;
/** @const {number} */
BorderLineStyle.FlowersTiny;
/** @const {number} */
BorderLineStyle.Gems;
/** @const {number} */
BorderLineStyle.GingerbreadMan;
/** @const {number} */
BorderLineStyle.Gradient;
/** @const {number} */
BorderLineStyle.Handmade1;
/** @const {number} */
BorderLineStyle.Handmade2;
/** @const {number} */
BorderLineStyle.HeartBalloon;
/** @const {number} */
BorderLineStyle.HeartGray;
/** @const {number} */
BorderLineStyle.Hearts;
/** @const {number} */
BorderLineStyle.HeebieJeebies;
/** @const {number} */
BorderLineStyle.Holly;
/** @const {number} */
BorderLineStyle.HouseFunky;
/** @const {number} */
BorderLineStyle.Hypnotic;
/** @const {number} */
BorderLineStyle.IceCreamCones;
/** @const {number} */
BorderLineStyle.LightBulb;
/** @const {number} */
BorderLineStyle.Lightning1;
/** @const {number} */
BorderLineStyle.Lightning2;
/** @const {number} */
BorderLineStyle.MapleLeaf;
/** @const {number} */
BorderLineStyle.MapleMuffins;
/** @const {number} */
BorderLineStyle.MapPins;
/** @const {number} */
BorderLineStyle.Marquee;
/** @const {number} */
BorderLineStyle.MarqueeToothed;
/** @const {number} */
BorderLineStyle.Moons;
/** @const {number} */
BorderLineStyle.Mosaic;
/** @const {number} */
BorderLineStyle.MusicNotes;
/** @const {number} */
BorderLineStyle.Northwest;
/** @const {number} */
BorderLineStyle.Ovals;
/** @const {number} */
BorderLineStyle.Packages;
/** @const {number} */
BorderLineStyle.PalmsBlack;
/** @const {number} */
BorderLineStyle.PalmsColor;
/** @const {number} */
BorderLineStyle.PaperClips;
/** @const {number} */
BorderLineStyle.Papyrus;
/** @const {number} */
BorderLineStyle.PartyFavor;
/** @const {number} */
BorderLineStyle.PartyGlass;
/** @const {number} */
BorderLineStyle.Pencils;
/** @const {number} */
BorderLineStyle.People;
/** @const {number} */
BorderLineStyle.PeopleHats;
/** @const {number} */
BorderLineStyle.PeopleWaving;
/** @const {number} */
BorderLineStyle.Poinsettias;
/** @const {number} */
BorderLineStyle.PostageStamp;
/** @const {number} */
BorderLineStyle.Pumpkin1;
/** @const {number} */
BorderLineStyle.PushPinNote1;
/** @const {number} */
BorderLineStyle.PushPinNote2;
/** @const {number} */
BorderLineStyle.Pyramids;
/** @const {number} */
BorderLineStyle.PyramidsAbove;
/** @const {number} */
BorderLineStyle.Quadrants;
/** @const {number} */
BorderLineStyle.Rings;
/** @const {number} */
BorderLineStyle.Safari;
/** @const {number} */
BorderLineStyle.Sawtooth;
/** @const {number} */
BorderLineStyle.SawtoothGray;
/** @const {number} */
BorderLineStyle.ScaredCat;
/** @const {number} */
BorderLineStyle.Seattle;
/** @const {number} */
BorderLineStyle.ShadowedSquares;
/** @const {number} */
BorderLineStyle.SharksTeeth;
/** @const {number} */
BorderLineStyle.ShorebirdTracks;
/** @const {number} */
BorderLineStyle.Skyrocket;
/** @const {number} */
BorderLineStyle.SnowflakeFancy;
/** @const {number} */
BorderLineStyle.Snowflakes;
/** @const {number} */
BorderLineStyle.Sombrero;
/** @const {number} */
BorderLineStyle.Southwest;
/** @const {number} */
BorderLineStyle.Stars;
/** @const {number} */
BorderLineStyle.Stars3d;
/** @const {number} */
BorderLineStyle.StarsBlack;
/** @const {number} */
BorderLineStyle.StarsShadowed;
/** @const {number} */
BorderLineStyle.StarsTop;
/** @const {number} */
BorderLineStyle.Sun;
/** @const {number} */
BorderLineStyle.Swirligig;
/** @const {number} */
BorderLineStyle.TornPaper;
/** @const {number} */
BorderLineStyle.TornPaperBlack;
/** @const {number} */
BorderLineStyle.Trees;
/** @const {number} */
BorderLineStyle.TriangleParty;
/** @const {number} */
BorderLineStyle.Triangles;
/** @const {number} */
BorderLineStyle.Tribal1;
/** @const {number} */
BorderLineStyle.Tribal2;
/** @const {number} */
BorderLineStyle.Tribal3;
/** @const {number} */
BorderLineStyle.Tribal4;
/** @const {number} */
BorderLineStyle.Tribal5;
/** @const {number} */
BorderLineStyle.Tribal6;
/** @const {number} */
BorderLineStyle.TwistedLines1;
/** @const {number} */
BorderLineStyle.TwistedLines2;
/** @const {number} */
BorderLineStyle.Vine;
/** @const {number} */
BorderLineStyle.Waveline;
/** @const {number} */
BorderLineStyle.WeavingAngles;
/** @const {number} */
BorderLineStyle.WeavingBraid;
/** @const {number} */
BorderLineStyle.WeavingRibbon;
/** @const {number} */
BorderLineStyle.WeavingStrips;
/** @const {number} */
BorderLineStyle.WhiteFlowers;
/** @const {number} */
BorderLineStyle.Woodwork;
/** @const {number} */
BorderLineStyle.XIllusions;
/** @const {number} */
BorderLineStyle.ZanyTriangles;
/** @const {number} */
BorderLineStyle.ZigZag;
/** @const {number} */
BorderLineStyle.ZigZagStitch;
/** @const {number} */
BorderLineStyle.Nil;
/**
 * @record
 * @struct
 */
function TableCellFormattingSettings() {}
 /** @type {!TableWidthUnit} */
TableCellFormattingSettings.prototype.preferredWidth;
 /** @type {?} */
TableCellFormattingSettings.prototype.verticalAlignment;
 /** @type {boolean} */
TableCellFormattingSettings.prototype.noWrap;
 /** @type {number} */
TableCellFormattingSettings.prototype.marginLeft;
 /** @type {number} */
TableCellFormattingSettings.prototype.marginRight;
 /** @type {number} */
TableCellFormattingSettings.prototype.marginTop;
 /** @type {number} */
TableCellFormattingSettings.prototype.marginBottom;
 /** @type {boolean} */
TableCellFormattingSettings.prototype.marginsSameAsTable;

/** @const */
var TableCellVerticalAlignment = {};
/** @const {number} */
TableCellVerticalAlignment.Top;
/** @const {number} */
TableCellVerticalAlignment.Both;
/** @const {number} */
TableCellVerticalAlignment.Center;
/** @const {number} */
TableCellVerticalAlignment.Bottom;
/**
 * @record
 * @struct
 */
function TableFormattingSettings() {}
 /** @type {!TableWidthUnit} */
TableFormattingSettings.prototype.preferredWidth;
 /** @type {?} */
TableFormattingSettings.prototype.alignment;
 /** @type {number} */
TableFormattingSettings.prototype.indent;
 /** @type {number} */
TableFormattingSettings.prototype.spacingBetweenCells;
 /** @type {boolean} */
TableFormattingSettings.prototype.allowSpacingBetweenCells;
 /** @type {boolean} */
TableFormattingSettings.prototype.resizeToFitContent;
 /** @type {number} */
TableFormattingSettings.prototype.defaultCellMarginLeft;
 /** @type {number} */
TableFormattingSettings.prototype.defaultCellMarginRight;
 /** @type {number} */
TableFormattingSettings.prototype.defaultCellMarginTop;
 /** @type {number} */
TableFormattingSettings.prototype.defaultCellMarginBottom;
/**
 * @record
 * @struct
 */
function TableWidthUnit() {}
 /** @type {number} */
TableWidthUnit.prototype.value;
 /** @type {?} */
TableWidthUnit.prototype.type;
/**
 * @record
 * @struct
 */
function TableHeightUnit() {}
 /** @type {number} */
TableHeightUnit.prototype.value;
 /** @type {?} */
TableHeightUnit.prototype.type;

/** @const */
var TableHeightUnitType = {};
/** @const {number} */
TableHeightUnitType.Minimum;
/** @const {number} */
TableHeightUnitType.Auto;
/** @const {number} */
TableHeightUnitType.Exact;

/** @const */
var TableRowAlignment = {};
/** @const {number} */
TableRowAlignment.Both;
/** @const {number} */
TableRowAlignment.Center;
/** @const {number} */
TableRowAlignment.Distribute;
/** @const {number} */
TableRowAlignment.Left;
/** @const {number} */
TableRowAlignment.NumTab;
/** @const {number} */
TableRowAlignment.Right;

/** @const */
var TableWidthUnitType = {};
/** @const {number} */
TableWidthUnitType.Nil;
/** @const {number} */
TableWidthUnitType.Auto;
/** @const {number} */
TableWidthUnitType.FiftiethsOfPercent;
/** @const {number} */
TableWidthUnitType.ModelUnits;
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeFontNameCommand() {}

/**
 * Executes the ChangeFontNameCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {string} fontName A string specifying font name.
 * @return {boolean}
 */
ChangeFontNameCommand.prototype.execute = function(fontName) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeFontNameCommand.prototype.getState = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeFontSizeCommand() {}

/**
 * Executes the ChangeFontSizeCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {number} fontSize An integer number specifying font size.
 * @return {boolean}
 */
ChangeFontSizeCommand.prototype.execute = function(fontSize) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeFontSizeCommand.prototype.getState = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function IncreaseFontSizeCommand() {}

/**
 * Executes the IncreaseFontSizeCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
IncreaseFontSizeCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function DecreaseFontSizeCommand() {}

/**
 * Executes the DecreaseFontSizeCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
DecreaseFontSizeCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function MakeTextUpperCaseCommand() {}

/**
 * Executes the MakeTextUpperCaseCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
MakeTextUpperCaseCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function MakeTextLowerCaseCommand() {}

/**
 * Executes the MakeTextLowerCaseCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
MakeTextLowerCaseCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function CapitalizeEachWordTextCaseCommand() {}

/**
 * Executes the CapitalizeEachWordTextCaseCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
CapitalizeEachWordTextCaseCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function ToggleTextCaseCommand() {}

/**
 * Executes the ToggleTextCaseCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ToggleTextCaseCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ChangeFontBoldCommand() {}

/**
 * Executes the ChangeFontBoldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the ChangeFontBoldCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {boolean=} fontBold true to apply bold formatting to the text, false to remove bold formatting.
 * @return {boolean}
 */
ChangeFontBoldCommand.prototype.execute = function(fontBold) {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ChangeFontItalicCommand() {}

/**
 * Executes the ChangeFontItalicCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the ChangeFontItalicCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {boolean=} fontItalic true to apply italic formatting to the text, false to remove italic formatting.
 * @return {boolean}
 */
ChangeFontItalicCommand.prototype.execute = function(fontItalic) {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ChangeFontUnderlineCommand() {}

/**
 * Executes the ChangeFontUnderlineCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the ChangeFontUnderlineCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {boolean=} fontUnderline true to apply underline formatting to the text, false to remove underline formatting.
 * @return {boolean}
 */
ChangeFontUnderlineCommand.prototype.execute = function(fontUnderline) {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ChangeFontStrikeoutCommand() {}

/**
 * Executes the ChangeFontStrikeoutCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the ChangeFontStrikeoutCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {boolean=} fontStrikeout true to apply strikeout formatting to the text, false to remove strikeout formatting.
 * @return {boolean}
 */
ChangeFontStrikeoutCommand.prototype.execute = function(fontStrikeout) {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ChangeFontSuperscriptCommand() {}

/**
 * Executes the ChangeFontSuperscriptCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the ChangeFontSuperscriptCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {boolean=} fontSuperscript true to apply superscript formatting to the text, false to remove superscript formatting.
 * @return {boolean}
 */
ChangeFontSuperscriptCommand.prototype.execute = function(fontSuperscript) {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ChangeFontSubscriptCommand() {}

/**
 * Executes the ChangeFontSubscriptCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the ChangeFontSubscriptCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {boolean=} fontSubscript true to apply subscript formatting to the text, false to remove subscript formatting.
 * @return {boolean}
 */
ChangeFontSubscriptCommand.prototype.execute = function(fontSubscript) {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeFontForeColorCommand() {}

/**
 * Executes the ChangeFontForeColorCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {string} color A string specifying font color. May be specified as color name or hex color value.
 * @return {boolean}
 */
ChangeFontForeColorCommand.prototype.execute = function(color) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeFontForeColorCommand.prototype.getState = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeFontBackColorCommand() {}

/**
 * Executes the ChangeFontBackColorCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {string} color A string specifying highlighting color. May be specified as color name or hex color value.
 * @return {boolean}
 */
ChangeFontBackColorCommand.prototype.execute = function(color) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeFontBackColorCommand.prototype.getState = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function ClearFormattingCommand() {}

/**
 * Executes the ClearFormattingCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
ClearFormattingCommand.prototype.execute = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeStyleCommand() {}

/**
 * Executes the ChangeStyleCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the ChangeStyleCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {!StyleBase|string} style_or_styleName A StyleBase object specifying the selected range's style. / A string specifying the name of applying style.
 * @param {boolean=} isParagraphStyle true to apply style to paragraph, false to apply style to character.
 * @return {boolean}
 */
ChangeStyleCommand.prototype.execute = function(style_or_styleName, isParagraphStyle) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeStyleCommand.prototype.getState = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function OpenFontFormattingDialogCommand() {}

/**
 * Executes the OpenFontFormattingDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
OpenFontFormattingDialogCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function MakeTextSentenceCaseCommand() {}

/**
 * Executes the MakeTextSentenceCaseCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
MakeTextSentenceCaseCommand.prototype.execute = function() {};
/**
 * @extends {CommandWithSimpleStateBase}
 * @record
 * @struct
 */
function SwitchTextCaseCommand() {}

/**
 * Executes the SwitchTextCaseCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @return {boolean}
 */
SwitchTextCaseCommand.prototype.execute = function() {};
/**
 * @extends {CommandBase}
 * @record
 * @struct
 */
function ChangeFontFormattingCommand() {}

/**
 * Executes the ChangeFontFormattingCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {!FontFormattingSettings} settings A  FontFormattingSettings object specifying font formatting settings.
 * @return {boolean}
 */
ChangeFontFormattingCommand.prototype.execute = function(settings) {};

/**
 * Gets information about the command state.
 * @return {?}
 */
ChangeFontFormattingCommand.prototype.getState = function() {};
/**
 * @record
 * @struct
 */
function FontFormattingSettings() {}
 /** @type {string} */
FontFormattingSettings.prototype.fontName;
 /** @type {number} */
FontFormattingSettings.prototype.size;
 /** @type {string} */
FontFormattingSettings.prototype.foreColor;
 /** @type {string} */
FontFormattingSettings.prototype.backColor;
 /** @type {boolean} */
FontFormattingSettings.prototype.underline;
 /** @type {string} */
FontFormattingSettings.prototype.underlineColor;
 /** @type {boolean} */
FontFormattingSettings.prototype.bold;
 /** @type {boolean} */
FontFormattingSettings.prototype.italic;
 /** @type {boolean} */
FontFormattingSettings.prototype.strikeout;
 /** @type {boolean} */
FontFormattingSettings.prototype.underlineWordsOnly;
 /** @type {?} */
FontFormattingSettings.prototype.script;
 /** @type {boolean} */
FontFormattingSettings.prototype.allCaps;
 /** @type {boolean} */
FontFormattingSettings.prototype.hidden;

/** @const */
var CharacterFormattingScript = {};
/** @const {number} */
CharacterFormattingScript.Normal;
/** @const {number} */
CharacterFormattingScript.Subscript;
/** @const {number} */
CharacterFormattingScript.Superscript;
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function ShowHorizontalRulerCommand() {}

/**
 * Executes the ShowHorizontalRulerCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the ShowHorizontalRulerCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {boolean=} show true to display the horizontal ruler, false to hide the horizontal ruler.
 * @return {boolean}
 */
ShowHorizontalRulerCommand.prototype.execute = function(show) {};
/**
 * @extends {CommandWithBooleanStateBase}
 * @record
 * @struct
 */
function SetFullscreenCommand() {}

/**
 * Executes the SetFullscreenCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * Executes the SetFullscreenCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
 * @param {boolean=} fullscreen true to apply fullscreen mode, false to remove fullscreen mode.
 * @return {boolean}
 */
SetFullscreenCommand.prototype.execute = function(fullscreen) {};
/**
 * @record
 * @struct
 */
function ASPxClientAppointmentFlags() {}
 /** @type {boolean} */
ASPxClientAppointmentFlags.prototype.allowDelete;
 /** @type {boolean} */
ASPxClientAppointmentFlags.prototype.allowEdit;
 /** @type {boolean} */
ASPxClientAppointmentFlags.prototype.allowResize;
 /** @type {boolean} */
ASPxClientAppointmentFlags.prototype.allowCopy;
 /** @type {boolean} */
ASPxClientAppointmentFlags.prototype.allowDrag;
 /** @type {boolean} */
ASPxClientAppointmentFlags.prototype.allowDragBetweenResources;
 /** @type {boolean} */
ASPxClientAppointmentFlags.prototype.allowInplaceEditor;
 /** @type {boolean} */
ASPxClientAppointmentFlags.prototype.allowConflicts;
/**
 * @record
 * @struct
 */
function ASPxClientAppointment() {}
 /** @type {?} */
ASPxClientAppointment.prototype.interval;
 /** @type {!Array<string>} */
ASPxClientAppointment.prototype.resources;
 /** @type {string} */
ASPxClientAppointment.prototype.appointmentId;
 /** @type {!ASPxAppointmentType} */
ASPxClientAppointment.prototype.appointmentType;
 /** @type {number} */
ASPxClientAppointment.prototype.statusIndex;
 /** @type {number} */
ASPxClientAppointment.prototype.labelIndex;
 /** @type {string} */
ASPxClientAppointment.prototype.subject;
 /** @type {string} */
ASPxClientAppointment.prototype.description;
 /** @type {string} */
ASPxClientAppointment.prototype.location;
 /** @type {boolean} */
ASPxClientAppointment.prototype.allDay;

/**
 * Adds a resource to the collection of resources associated with the client appointment.
 * @param {!Object} resourceId An object, representing the resource id.
 * @return {void}
 */
ASPxClientAppointment.prototype.AddResource = function(resourceId) {};

/**
 * Gets the resource associated with the client-side appointment by its index.
 * @param {number} index An integer, representing an index of a resource in a resource collection associated with the current appointment.
 * @return {!Object}
 */
ASPxClientAppointment.prototype.GetResource = function(index) {};

/**
 * Sets the property value of the client appointment, corresponding to the Start appointment property.
 * @param {!Date} start A JavaScript Date object representing the appointment start.
 * @return {void}
 */
ASPxClientAppointment.prototype.SetStart = function(start) {};

/**
 * Gets the property value of the client appointment corresponding to the Start appointment property.
 * @return {!Date}
 */
ASPxClientAppointment.prototype.GetStart = function() {};

/**
 * Sets the property value of the client appointment, corresponding to the End appointment property.
 * @param {!Date} end A JavaScript Date object representing the end of the appointment.
 * @return {void}
 */
ASPxClientAppointment.prototype.SetEnd = function(end) {};

/**
 * Gets the property value of the client appointment corresponding to the End appointment property.
 * @return {!Date}
 */
ASPxClientAppointment.prototype.GetEnd = function() {};

/**
 * Sets the property value of the client appointment, corresponding to the Duration appointment property.
 * @param {?} duration A TimeSpan object representing the appointment duration.
 * @return {void}
 */
ASPxClientAppointment.prototype.SetDuration = function(duration) {};

/**
 * Gets the property value of the client appointment corresponding to the Duration appointment property.
 * @return {number}
 */
ASPxClientAppointment.prototype.GetDuration = function() {};

/**
 * Sets the ID of the client appointment.
 * @param {!Object} id An object representing the appointment identifier.
 * @return {void}
 */
ASPxClientAppointment.prototype.SetId = function(id) {};

/**
 * Gets the ID of the client appointment.
 * @return {!Object}
 */
ASPxClientAppointment.prototype.GetId = function() {};

/**
 * Specifies the type of the current client appointment.
 * @param {!ASPxAppointmentType} type An ASPxAppointmentType enumeration value indicating the appointment type.
 * @return {void}
 */
ASPxClientAppointment.prototype.SetAppointmentType = function(type) {};

/**
 * Gets the type of the client appointment.
 * @return {!ASPxAppointmentType}
 */
ASPxClientAppointment.prototype.GetAppointmentType = function() {};

/**
 * Sets the property value of the client appointment, corresponding to the StatusId appointment property.
 * @param {number} statusId An integer representing the index in the AppointmentStatusCollection.
 * @return {void}
 */
ASPxClientAppointment.prototype.SetStatusId = function(statusId) {};

/**
 * Gets the property value of the client appointment corresponding to the StatusId appointment property.
 * @return {number}
 */
ASPxClientAppointment.prototype.GetStatusId = function() {};

/**
 * Sets the property value of the client appointment, corresponding to the LabelId appointment property.
 * @param {number} statusId An integer representing the index of the label in the Labels label collection.
 * @return {void}
 */
ASPxClientAppointment.prototype.SetLabelId = function(statusId) {};

/**
 * Gets the property value of the client appointment corresponding to the LabelId appointment property.
 * @return {number}
 */
ASPxClientAppointment.prototype.GetLabelId = function() {};

/**
 * Sets the property value of the client appointment, corresponding to the Subject appointment property.
 * @param {string} subject A string containing the appointment subject.
 * @return {void}
 */
ASPxClientAppointment.prototype.SetSubject = function(subject) {};

/**
 * Gets the property value of the client appointment corresponding to the Subject appointment property.
 * @return {string}
 */
ASPxClientAppointment.prototype.GetSubject = function() {};

/**
 * Sets the property value of the client appointment, corresponding to the Description appointment property.
 * @param {string} description A string representing the appointment description.
 * @return {void}
 */
ASPxClientAppointment.prototype.SetDescription = function(description) {};

/**
 * Gets the property value of the client appointment corresponding to the Description appointment property.
 * @return {string}
 */
ASPxClientAppointment.prototype.GetDescription = function() {};

/**
 * Sets the property value of the client appointment, corresponding to the Location appointment property.
 * @param {string} location A string representing the appointment location.
 * @return {void}
 */
ASPxClientAppointment.prototype.SetLocation = function(location) {};

/**
 * Gets the property value of the client appointment corresponding to the Location appointment property.
 * @return {string}
 */
ASPxClientAppointment.prototype.GetLocation = function() {};

/**
 * Specifies the property value of the client appointment corresponding to the AllDay appointment property.
 * @param {boolean} allDay true to indicate the all-day appointment; otherwise, false.
 * @return {void}
 */
ASPxClientAppointment.prototype.SetAllDay = function(allDay) {};

/**
 * Gets the property value of the client appointment corresponding to the AllDay appointment property.
 * @return {boolean}
 */
ASPxClientAppointment.prototype.GetAllDay = function() {};

/**
 * Gets the appointment that is the RecurrencePattern for the current appointment.
 * @return {!ASPxClientAppointment}
 */
ASPxClientAppointment.prototype.GetRecurrencePattern = function() {};

/**
 * Sets the property value of the client appointment, corresponding to the RecurrenceInfo appointment property.
 * @param {!ASPxClientRecurrenceInfo} recurrenceInfo An ASPxClientRecurrenceInfo object representing the recurrence information.
 * @return {void}
 */
ASPxClientAppointment.prototype.SetRecurrenceInfo = function(recurrenceInfo) {};

/**
 * Gets the property value of the client appointment corresponding to the RecurrenceInfo appointment property.
 * @return {!ASPxClientRecurrenceInfo}
 */
ASPxClientAppointment.prototype.GetRecurrenceInfo = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientPoint() {}

/**
 * Gets the point's X-coordinate.
 * @return {number}
 */
ASPxClientPoint.prototype.GetX = function() {};

/**
 * Gets the point's Y-coordinate.
 * @return {number}
 */
ASPxClientPoint.prototype.GetY = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientRect() {}

/**
 * Gets the X-coordinate of the rectangle's left edge.
 * @return {number}
 */
ASPxClientRect.prototype.GetLeft = function() {};

/**
 * Gets the X-coordinate of the rectangle's right edge.
 * @return {number}
 */
ASPxClientRect.prototype.GetRight = function() {};

/**
 * Gets the Y-coordinate of the rectangle's top edge.
 * @return {number}
 */
ASPxClientRect.prototype.GetTop = function() {};

/**
 * Gets the Y-coordinate of the rectangle's bottom edge.
 * @return {number}
 */
ASPxClientRect.prototype.GetBottom = function() {};

/**
 * Gets the rectangle's width.
 * @return {number}
 */
ASPxClientRect.prototype.GetWidth = function() {};

/**
 * Gets the rectangle's height.
 * @return {number}
 */
ASPxClientRect.prototype.GetHeight = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientRecurrenceInfo() {}

/**
 * Sets the recurrence start date.
 * @param {!Date} start A JavaScript date object value that specifies the start date for the recurrence.
 * @return {void}
 */
ASPxClientRecurrenceInfo.prototype.SetStart = function(start) {};

/**
 * Gets the recurrence start date.
 * @return {!Date}
 */
ASPxClientRecurrenceInfo.prototype.GetStart = function() {};

/**
 * Sets the recurrence end date.
 * @param {!Date} end A JavaScript Date object that specifies the end date for the recurrence.
 * @return {void}
 */
ASPxClientRecurrenceInfo.prototype.SetEnd = function(end) {};

/**
 * Gets the recurrence end date.
 * @return {!Date}
 */
ASPxClientRecurrenceInfo.prototype.GetEnd = function() {};

/**
 * Sets the duration of the recurrence.
 * @param {?} duration A TimeSpan object representing the duration.
 * @return {void}
 */
ASPxClientRecurrenceInfo.prototype.SetDuration = function(duration) {};

/**
 * Gets the duration of the recurrence.
 * @return {number}
 */
ASPxClientRecurrenceInfo.prototype.GetDuration = function() {};

/**
 * Sets the time base for the frequency of the corresponding appointment occurrences.
 * @param {!ASPxClientRecurrenceType} type An ASPxClientRecurrenceType enumeration value that specifies the recurrence's frequency type.
 * @return {void}
 */
ASPxClientRecurrenceInfo.prototype.SetRecurrenceType = function(type) {};

/**
 * Gets the time base for the frequency of the corresponding appointment reoccurrence.
 * @return {!ASPxClientRecurrenceType}
 */
ASPxClientRecurrenceInfo.prototype.GetRecurrenceType = function() {};

/**
 * Sets the day/days in a week that the corresponding appointment recurs on.
 * @param {!ASPxClientWeekDays} weekDays The ASPxClientWeekDays enumeration value specifying the day/days in a week.
 * @return {void}
 */
ASPxClientRecurrenceInfo.prototype.SetWeekDays = function(weekDays) {};

/**
 * Gets the day/days in a week on which the corresponding appointment occurs.
 * @return {!ASPxClientWeekDays}
 */
ASPxClientRecurrenceInfo.prototype.GetWeekDays = function() {};

/**
 * Sets how many times the appointment occurs.
 * @param {number} occurrenceCount An integer value that specifies how many times the appointment occurs.
 * @return {void}
 */
ASPxClientRecurrenceInfo.prototype.SetOccurrenceCount = function(occurrenceCount) {};

/**
 * Gets how many times the appointment occurs.
 * @return {number}
 */
ASPxClientRecurrenceInfo.prototype.GetOccurrenceCount = function() {};

/**
 * Sets the frequency with which the corresponding appointment occurs (dependent on the recurrence Type).
 * @param {number} periodicity An integer value that specifies the frequency with which the corresponding appointment occurs.
 * @return {void}
 */
ASPxClientRecurrenceInfo.prototype.SetPeriodicity = function(periodicity) {};

/**
 * Gets the frequency with which the corresponding appointment reoccurs (dependent on the recurrence Type).
 * @return {number}
 */
ASPxClientRecurrenceInfo.prototype.GetPeriodicity = function() {};

/**
 * Sets the ordinal number of a day within a defined month.
 * @param {number} dayNumber A positive integer value that specifies the day number within a month.
 * @return {void}
 */
ASPxClientRecurrenceInfo.prototype.SetDayNumber = function(dayNumber) {};

/**
 * Gets the ordinal number of a day within a defined month.
 * @return {number}
 */
ASPxClientRecurrenceInfo.prototype.GetDayNumber = function() {};

/**
 * Sets the occurrence number of the week in a month for the recurrence pattern.
 * @param {!ASPxClientWeekOfMonth} weekOfMonth A ASPxClientWeekOfMonth enumeration value that specifies a particular week in every month.
 * @return {void}
 */
ASPxClientRecurrenceInfo.prototype.SetWeekOfMonth = function(weekOfMonth) {};

/**
 * Gets the occurrence number of the week in a month for the recurrence pattern.
 * @return {!ASPxClientWeekOfMonth}
 */
ASPxClientRecurrenceInfo.prototype.GetWeekOfMonth = function() {};

/**
 * Sets the month (as a number) on which the corresponding appointment occurs.
 * @param {number} month A positive integer value that specifies the month's number.
 * @return {void}
 */
ASPxClientRecurrenceInfo.prototype.SetMonth = function(month) {};

/**
 * Gets the month (as a number) on which the corresponding appointment recurs.
 * @return {number}
 */
ASPxClientRecurrenceInfo.prototype.GetMonth = function() {};

/**
 * Gets the type of the recurrence range.
 * @return {!ASPxClientRecurrenceRange}
 */
ASPxClientRecurrenceInfo.prototype.GetRange = function() {};

/**
 * Sets the type of the recurrence range.
 * @param {!ASPxClientRecurrenceRange} range An ASPxClientRecurrenceRangeenumeration value that specifies the recurrence range type.
 * @return {void}
 */
ASPxClientRecurrenceInfo.prototype.SetRange = function(range) {};
/**
 * @record
 * @struct
 */
function ASPxClientRecurrenceRange() {}
 /** @type {string} */
ASPxClientRecurrenceRange.prototype.NoEndDate;
 /** @type {string} */
ASPxClientRecurrenceRange.prototype.OccurrenceCount;
 /** @type {string} */
ASPxClientRecurrenceRange.prototype.EndByDate;
/**
 * @record
 * @struct
 */
function ASPxClientRecurrenceType() {}
 /** @type {string} */
ASPxClientRecurrenceType.prototype.Daily;
 /** @type {string} */
ASPxClientRecurrenceType.prototype.Weekly;
 /** @type {string} */
ASPxClientRecurrenceType.prototype.Monthly;
 /** @type {string} */
ASPxClientRecurrenceType.prototype.Yearly;
 /** @type {string} */
ASPxClientRecurrenceType.prototype.Hourly;
/**
 * @record
 * @struct
 */
function ASPxClientWeekDays() {}
 /** @type {number} */
ASPxClientWeekDays.prototype.Sunday;
 /** @type {number} */
ASPxClientWeekDays.prototype.Monday;
 /** @type {number} */
ASPxClientWeekDays.prototype.Tuesday;
 /** @type {number} */
ASPxClientWeekDays.prototype.Wednesday;
 /** @type {number} */
ASPxClientWeekDays.prototype.Thursday;
 /** @type {number} */
ASPxClientWeekDays.prototype.Friday;
 /** @type {number} */
ASPxClientWeekDays.prototype.Saturday;
 /** @type {number} */
ASPxClientWeekDays.prototype.WeekendDays;
 /** @type {number} */
ASPxClientWeekDays.prototype.WorkDays;
 /** @type {number} */
ASPxClientWeekDays.prototype.EveryDay;
/**
 * @record
 * @struct
 */
function ASPxClientWeekOfMonth() {}
 /** @type {number} */
ASPxClientWeekOfMonth.prototype.None;
 /** @type {number} */
ASPxClientWeekOfMonth.prototype.First;
 /** @type {number} */
ASPxClientWeekOfMonth.prototype.Second;
 /** @type {number} */
ASPxClientWeekOfMonth.prototype.Third;
 /** @type {number} */
ASPxClientWeekOfMonth.prototype.Fourth;
 /** @type {number} */
ASPxClientWeekOfMonth.prototype.Last;
/**
 * @record
 * @struct
 */
function ASPxClientWeekDaysCheckEdit() {}

/**
 * Gets the selection state of the week day check boxes.
 * @return {!ASPxClientWeekDays}
 */
ASPxClientWeekDaysCheckEdit.prototype.GetValue = function() {};

/**
 * Gets the selection state of the week day check boxes.
 * @param {!ASPxClientWeekDays} value An ASPxClientWeekDays object specifying the selection state of the week day check boxes.
 * @return {void}
 */
ASPxClientWeekDaysCheckEdit.prototype.SetValue = function(value) {};
/**
 * @record
 * @struct
 */
function ASPxClientRecurrenceRangeControl() {}

/**
 * Gets the type of the recurrence range.
 * @return {!ASPxClientRecurrenceRange}
 */
ASPxClientRecurrenceRangeControl.prototype.GetRange = function() {};

/**
 * Gets how many times the appointment occurs.
 * @return {number}
 */
ASPxClientRecurrenceRangeControl.prototype.GetOccurrenceCount = function() {};

/**
 * Gets the recurrence end date.
 * @return {!Date}
 */
ASPxClientRecurrenceRangeControl.prototype.GetEndDate = function() {};

/**
 * Sets the type of the recurrence range.
 * @param {!ASPxClientRecurrenceRange} range An ASPxClientRecurrenceRangeenumeration value that specifies the recurrence range type.
 * @return {void}
 */
ASPxClientRecurrenceRangeControl.prototype.SetRange = function(range) {};

/**
 * Sets how many times the appointment occurs.
 * @param {number} occurrenceCount An integer value that specifies how many times the appointment occurs.
 * @return {void}
 */
ASPxClientRecurrenceRangeControl.prototype.SetOccurrenceCount = function(occurrenceCount) {};

/**
 * Sets the recurrence end date.
 * @param {!Date} date A JavaScript Date object that specifies the end date for the recurrence.
 * @return {void}
 */
ASPxClientRecurrenceRangeControl.prototype.SetEndDate = function(date) {};
/**
 * @record
 * @struct
 */
function ASPxClientRecurrenceControlBase() {}

/**
 * Returns an object providing access to the ASPxClientRecurrenceControlBase control's editor values.
 * @return {!DefaultRecurrenceRuleValuesAccessor}
 */
ASPxClientRecurrenceControlBase.prototype.CreateValueAccessor = function() {};

/**
 * Updates values of editors displayed by the ASPxClientRecurrenceControlBase control.
 * @param {!ASPxClientRecurrenceInfo} recurrenceInfo An ASPxClientRecurrenceInfo object containing new editor values.
 * @return {void}
 */
ASPxClientRecurrenceControlBase.prototype.Update = function(recurrenceInfo) {};
/**
 * @record
 * @struct
 */
function ASPxClientDailyRecurrenceControl() {}

/**
 * Returns an object providing access to the ASPxClientDailyRecurrenceControl's editor values.
 * @return {!DefaultRecurrenceRuleValuesAccessor}
 */
ASPxClientDailyRecurrenceControl.prototype.CreateValueAccessor = function() {};

/**
 * Updates values of editors displayed by the ASPxClientDailyRecurrenceControl.
 * @param {!ASPxClientRecurrenceInfo} recurrenceInfo An ASPxClientRecurrenceInfo object containing new editor values.
 * @return {void}
 */
ASPxClientDailyRecurrenceControl.prototype.Update = function(recurrenceInfo) {};
/**
 * @record
 * @struct
 */
function ASPxClientWeeklyRecurrenceControl() {}

/**
 * Returns an object providing access to the ASPxClientWeeklyRecurrenceControl's editor values.
 * @return {!DefaultRecurrenceRuleValuesAccessor}
 */
ASPxClientWeeklyRecurrenceControl.prototype.CreateValueAccessor = function() {};

/**
 * Updates values of editors displayed by the ASPxClientWeeklyRecurrenceControl.
 * @param {!ASPxClientRecurrenceInfo} recurrenceInfo An ASPxClientRecurrenceInfo object containing new editor values.
 * @return {void}
 */
ASPxClientWeeklyRecurrenceControl.prototype.Update = function(recurrenceInfo) {};
/**
 * @record
 * @struct
 */
function ASPxClientMonthlyRecurrenceControl() {}

/**
 * Returns an object providing access to the ASPxClientMonthlyRecurrenceControl's editor values.
 * @return {!DefaultRecurrenceRuleValuesAccessor}
 */
ASPxClientMonthlyRecurrenceControl.prototype.CreateValueAccessor = function() {};

/**
 * Updates values of editors displayed by the ASPxClientMonthlyRecurrenceControll.
 * @param {!ASPxClientRecurrenceInfo} recurrenceInfo An ASPxClientRecurrenceInfo object containing new editor values.
 * @return {void}
 */
ASPxClientMonthlyRecurrenceControl.prototype.Update = function(recurrenceInfo) {};
/**
 * @record
 * @struct
 */
function ASPxClientYearlyRecurrenceControl() {}

/**
 * Returns an object providing access to the ASPxClientYearlyRecurrenceControl's editor values.
 * @return {!DefaultRecurrenceRuleValuesAccessor}
 */
ASPxClientYearlyRecurrenceControl.prototype.CreateValueAccessor = function() {};

/**
 * Updates values of editors displayed by the ASPxClientYearlyRecurrenceControl.
 * @param {!ASPxClientRecurrenceInfo} recurrenceInfo An ASPxClientRecurrenceInfo object containing new editor values.
 * @return {void}
 */
ASPxClientYearlyRecurrenceControl.prototype.Update = function(recurrenceInfo) {};
/**
 * @record
 * @struct
 */
function DefaultRecurrenceRuleValuesAccessor() {}

/**
 * Get the frequency with which the appointment occurs with respect to the appointment's recurrence type.
 * @return {number}
 */
DefaultRecurrenceRuleValuesAccessor.prototype.GetPeriodicity = function() {};

/**
 * Gets the number of the month's day in which the appointment is scheduled.
 * @return {number}
 */
DefaultRecurrenceRuleValuesAccessor.prototype.GetDayNumber = function() {};

/**
 * Gets or sets the month's number.
 * @return {number}
 */
DefaultRecurrenceRuleValuesAccessor.prototype.GetMonth = function() {};

/**
 * Gets the days of the week on which a weekly recurrent appointment is scheduled.
 * @return {!ASPxClientWeekDays}
 */
DefaultRecurrenceRuleValuesAccessor.prototype.GetWeekDays = function() {};

/**
 * Gets the number of the week in a month when an appointment is scheduled.
 * @return {!ASPxClientWeekOfMonth}
 */
DefaultRecurrenceRuleValuesAccessor.prototype.GetWeekOfMonth = function() {};
/**
 * @extends {DefaultRecurrenceRuleValuesAccessor}
 * @record
 * @struct
 */
function DailyRecurrenceValuesAccessor() {}

/**
 * Gets the number of days between appointment occurrences.
 * @return {number}
 */
DailyRecurrenceValuesAccessor.prototype.GetPeriodicity = function() {};

/**
 * Gets the days of the week to which a daily recurrent appointment is scheduled.
 * @return {!ASPxClientWeekDays}
 */
DailyRecurrenceValuesAccessor.prototype.GetWeekDays = function() {};
/**
 * @extends {DefaultRecurrenceRuleValuesAccessor}
 * @record
 * @struct
 */
function WeeklyRecurrenceValuesAccessor() {}

/**
 * Gets the number of weeks between appointment occurrences.
 * @return {number}
 */
WeeklyRecurrenceValuesAccessor.prototype.GetPeriodicity = function() {};

/**
 * Gets the days of the week on which a weekly recurrent appointment is scheduled.
 * @return {!ASPxClientWeekDays}
 */
WeeklyRecurrenceValuesAccessor.prototype.GetWeekDays = function() {};
/**
 * @extends {DefaultRecurrenceRuleValuesAccessor}
 * @record
 * @struct
 */
function MonthlyRecurrenceValuesAccessor() {}

/**
 * Gets the day of the month on which the appointment is scheduled.
 * @return {number}
 */
MonthlyRecurrenceValuesAccessor.prototype.GetDayNumber = function() {};

/**
 * Gets the number of months between appointment occurrences.
 * @return {number}
 */
MonthlyRecurrenceValuesAccessor.prototype.GetPeriodicity = function() {};

/**
 * Gets the days of the week on which a monthly recurrent appointment is scheduled.
 * @return {!ASPxClientWeekDays}
 */
MonthlyRecurrenceValuesAccessor.prototype.GetWeekDays = function() {};

/**
 * Gets the number of the week in a month when an appointment is scheduled.
 * @return {!ASPxClientWeekOfMonth}
 */
MonthlyRecurrenceValuesAccessor.prototype.GetWeekOfMonth = function() {};
/**
 * @extends {DefaultRecurrenceRuleValuesAccessor}
 * @record
 * @struct
 */
function YearlyRecurrenceValuesAccessor() {}

/**
 * Gets the day of the month on which the appointment is scheduled.
 * @return {number}
 */
YearlyRecurrenceValuesAccessor.prototype.GetDayNumber = function() {};

/**
 * Gets or sets the month's number.
 * @return {number}
 */
YearlyRecurrenceValuesAccessor.prototype.GetMonth = function() {};

/**
 * Gets the days of the week on which a yearly recurrent appointment is scheduled.
 * @return {!ASPxClientWeekDays}
 */
YearlyRecurrenceValuesAccessor.prototype.GetWeekDays = function() {};

/**
 * Gets or sets the number of a week in a month when an appointment is scheduled.
 * @return {!ASPxClientWeekOfMonth}
 */
YearlyRecurrenceValuesAccessor.prototype.GetWeekOfMonth = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientFormBase() {}
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<!ASPxClientFormBase>>} */
ASPxClientFormBase.prototype.FormClosed;

/**
 * Closes the form.
 * @return {void}
 */
ASPxClientFormBase.prototype.Close = function() {};

/**
 * Sets the visibility state of the specified form element.
 * @param {!Object} element An object specifying the element whose visibility state should be changed.
 * @param {boolean} isVisible true to display the element; false to hide the element.
 * @return {void}
 */
ASPxClientFormBase.prototype.SetVisibleCore = function(element, isVisible) {};
/**
 * @record
 * @struct
 */
function ASPxClientRecurrenceTypeEdit() {}

/**
 * Gets the selected recurrence type.
 * @return {!ASPxClientRecurrenceType}
 */
ASPxClientRecurrenceTypeEdit.prototype.GetRecurrenceType = function() {};

/**
 * Sets the selected recurrence type.
 * @param {!ASPxClientRecurrenceType} recurrenceType An ASPxClientRecurrenceType enumeration value.
 * @return {void}
 */
ASPxClientRecurrenceTypeEdit.prototype.SetRecurrenceType = function(recurrenceType) {};
/**
 * @record
 * @struct
 */
function AppointmentPropertyNames() {}
 /** @type {string} */
AppointmentPropertyNames.prototype.Normal;
 /** @type {string} */
AppointmentPropertyNames.prototype.Pattern;
/**
 * @record
 * @struct
 */
function ASPxClientTimeInterval() {}

/**
 * Gets a value indicating if the time interval is All-Day.
 * @return {boolean}
 */
ASPxClientTimeInterval.prototype.GetAllDay = function() {};

/**
 * Sets a value specifying if the time interval is All-Day.
 * @param {boolean} allDayValue true, if this is an all-day time interval; otherwise, false.
 * @return {void}
 */
ASPxClientTimeInterval.prototype.SetAllDay = function(allDayValue) {};

/**
 * Client-side function that returns the start time of the interval.
 * @return {!Date}
 */
ASPxClientTimeInterval.prototype.GetStart = function() {};

/**
 * Client-side function that returns the duration of the specified time interval.
 * @return {number}
 */
ASPxClientTimeInterval.prototype.GetDuration = function() {};

/**
 * Client-side function that returns the end time of the interval.
 * @return {!Date}
 */
ASPxClientTimeInterval.prototype.GetEnd = function() {};

/**
 * Client-side function that sets the start time of the interval.
 * @param {!Date} value A DateTime value, representing the beginning of the interval.
 * @return {void}
 */
ASPxClientTimeInterval.prototype.SetStart = function(value) {};

/**
 * Client-side function that returns the duration of the specified time interval.
 * @param {?} value A TimeSpan  object, representing the duration of the time period.
 * @return {void}
 */
ASPxClientTimeInterval.prototype.SetDuration = function(value) {};

/**
 * Client-side function that sets the end time of the interval.
 * @param {!Date} value A DateTime value, representing the end of the interval.
 * @return {void}
 */
ASPxClientTimeInterval.prototype.SetEnd = function(value) {};

/**
 * Determines whether the specified object is equal to the current ASPxClientTimeInterval instance.
 * @param {?} interval The object to compare with the current object.
 * @return {boolean}
 */
ASPxClientTimeInterval.prototype.Equals = function(interval) {};

/**
 * Checks if the current time interval intersects with the specified time interval.
 * @param {?} interval A ASPxClientTimeInterval object which represents the time interval to be checked.
 * @return {boolean}
 */
ASPxClientTimeInterval.prototype.IntersectsWith = function(interval) {};

/**
 * Checks if the current time interval intersects with the specified time interval. The boundaries of the time intervals are excluded from the check.
 * @param {?} interval A ASPxClientTimeInterval object which represents the time interval to be checked.
 * @return {boolean}
 */
ASPxClientTimeInterval.prototype.IntersectsWithExcludingBounds = function(interval) {};

/**
 * Client-side function that determines whether the specified interval is contained within the current one.
 * @param {?} interval An ASPxClientTimeInterval object, representing the time interval to check.
 * @return {boolean}
 */
ASPxClientTimeInterval.prototype.Contains = function(interval) {};
/**
 * @record
 * @struct
 */
function ASPxClientSchedulerRefreshAction() {}
 /** @type {number} */
ASPxClientSchedulerRefreshAction.prototype.None;
 /** @type {number} */
ASPxClientSchedulerRefreshAction.prototype.VisibleIntervalChanged;
 /** @type {number} */
ASPxClientSchedulerRefreshAction.prototype.ActiveViewTypeChanged;
/**
 * @record
 * @struct
 */
function ASPxClientAppointmentOperation() {}

/**
 * Passes parameters to the corresponding callback function to accomplish the operation.
 * @return {void}
 */
ASPxClientAppointmentOperation.prototype.Apply = function() {};

/**
 * Cancels the operation.
 * @return {void}
 */
ASPxClientAppointmentOperation.prototype.Cancel = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientScheduler() {}
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientScheduler.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientScheduler.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientScheduler.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ActiveViewChangingEventHandler<?>>} */
ASPxClientScheduler.prototype.ActiveViewChanging;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientScheduler.prototype.ActiveViewChanged;
 /** @type {!ASPxClientEvent<!AppointmentClickEventHandler<?>>} */
ASPxClientScheduler.prototype.AppointmentClick;
 /** @type {!ASPxClientEvent<!AppointmentClickEventHandler<?>>} */
ASPxClientScheduler.prototype.AppointmentDoubleClick;
 /** @type {!ASPxClientEvent<!AppointmentsSelectionEventHandler<?>>} */
ASPxClientScheduler.prototype.AppointmentsSelectionChanged;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientScheduler.prototype.SelectionChanged;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientScheduler.prototype.SelectionChanging;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientScheduler.prototype.VisibleIntervalChanged;
 /** @type {!ASPxClientEvent<!MoreButtonClickedEventHandler<?>>} */
ASPxClientScheduler.prototype.MoreButtonClicked;
 /** @type {!ASPxClientEvent<!MenuItemClickedEventHandler<?>>} */
ASPxClientScheduler.prototype.MenuItemClicked;
 /** @type {!ASPxClientEvent<!AppointmentDropEventHandler<?>>} */
ASPxClientScheduler.prototype.AppointmentDrop;
 /** @type {!ASPxClientEvent<!AppointmentDragEventHandler<?>>} */
ASPxClientScheduler.prototype.AppointmentDrag;
 /** @type {!ASPxClientEvent<!AppointmentResizingEventHandler<?>>} */
ASPxClientScheduler.prototype.AppointmentResizing;
 /** @type {!ASPxClientEvent<!AppointmentResizeEventHandler<?>>} */
ASPxClientScheduler.prototype.AppointmentResize;
 /** @type {!ASPxClientEvent<!ASPxClientAppointmentDeletingEventHandler<?>>} */
ASPxClientScheduler.prototype.AppointmentDeleting;

/**
 * Client-side scripting  method that gets the active View.
 * @return {!ASPxSchedulerViewType}
 */
ASPxClientScheduler.prototype.GetActiveViewType = function() {};

/**
 * Client-side scripting  method to change the ASPxScheduler's active View.
 * @param {!ASPxSchedulerViewType} value A ASPxSchedulerViewType enumeration value, representing a view type to set.
 * @return {void}
 */
ASPxClientScheduler.prototype.SetActiveViewType = function(value) {};

/**
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument
 * @param {string} parameter A string value that represents any information that needs to be sent to the server-side CustomCallback event.
 * @return {void}
 */
ASPxClientScheduler.prototype.PerformCallback = function(parameter) {};

/**
 * Client-side scripting method which initiates a round trip to the server so that the current page will be reloaded.
 * Client-side scripting method which initiates a round trip to the server, so that the control will be reloaded using the specified refresh action.
 * @param {!ASPxClientSchedulerRefreshAction=} refreshAction An ASPxClientSchedulerRefreshAction enumeration value, specifying the refresh action.
 * @return {void}
 */
ASPxClientScheduler.prototype.Refresh = function(refreshAction) {};

/**
 * Client-side function that returns the type of grouping applied to the appointments displayed in the scheduler.
 * @return {!ASPxSchedulerGroupType}
 */
ASPxClientScheduler.prototype.GetGroupType = function() {};

/**
 * Client-side scripting method which raises the callback command to set the GroupType.
 * @param {!ASPxSchedulerGroupType} value An ASPxSchedulerGroupType enumeration value, which specifies how appointments are grouped.
 * @return {void}
 */
ASPxClientScheduler.prototype.SetGroupType = function(value) {};

/**
 * Client-side method that navigates the scheduler to the current system date.
 * @return {void}
 */
ASPxClientScheduler.prototype.GotoToday = function() {};

/**
 * Client-side scripting method which raises the GotoDate callback command.
 * @param {!Date} date A DateTime value specifying the destination time.
 * @return {void}
 */
ASPxClientScheduler.prototype.GotoDate = function(date) {};

/**
 * Client-side function which slides the visible interval one time span back.
 * @return {void}
 */
ASPxClientScheduler.prototype.NavigateBackward = function() {};

/**
 * Client-side function which slides the visible interval one time span forward.
 * @return {void}
 */
ASPxClientScheduler.prototype.NavigateForward = function() {};

/**
 * Client-side method which raises the callback command to change the ClientTimeZoneId of the scheduler.
 * @param {string} timeZoneId A string, a time zone identifier which is valid for the System.TimeZoneInfo.Id property.
 * @return {void}
 */
ASPxClientScheduler.prototype.ChangeTimeZoneId = function(timeZoneId) {};

/**
 * Displays a Selection ToolTip on a position given by the specified coordinates.
 * @param {number} x An integer representing the X-coordinate.
 * @param {number} y An integer representing the Y-coordinate.
 * @return {void}
 */
ASPxClientScheduler.prototype.ShowSelectionToolTip = function(x, y) {};

/**
 * Client-side function that returns the time interval, selected in the scheduler.
 * @return {?}
 */
ASPxClientScheduler.prototype.GetSelectedInterval = function() {};

/**
 * Client-side function that returns the ResourceId of selected time cell's resource.
 * @return {string}
 */
ASPxClientScheduler.prototype.GetSelectedResource = function() {};

/**
 * Client-side function that returns an appointment with the specified ID.
 * @param {!Object} id An appointment's identifier.
 * @return {!ASPxClientAppointment}
 */
ASPxClientScheduler.prototype.GetAppointmentById = function(id) {};

/**
 * Client-side function that returns the id's of selected appointments.
 * @return {!Array<string>}
 */
ASPxClientScheduler.prototype.GetSelectedAppointmentIds = function() {};

/**
 * Client-side function that removes the appointment specified by its client ID from a collection of selected appointments.
 * @param {!Object} aptId An appointment's identifier.
 * @return {void}
 */
ASPxClientScheduler.prototype.DeselectAppointmentById = function(aptId) {};

/**
 * Client-side function that selects an appointment with the specified ID.
 * @param {!Object} aptId An appointment's identifier.
 * @return {void}
 */
ASPxClientScheduler.prototype.SelectAppointmentById = function(aptId) {};

/**
 * Enables obtaining appointment property values in a client-side script. Executes the callback command with the AppointmentData identifier.
 * @param {number} aptId An integer, representing the appointment ID.
 * @param {!Array<string>} propertyNames An array of strings, representing the appointment properties to query.
 * @param {!Object} onCallBack A handler of a function which will receive and process the properties' values.
 * @return {!Array<string>}
 */
ASPxClientScheduler.prototype.GetAppointmentProperties = function(aptId, propertyNames, onCallBack) {};

/**
 * Initiates a callback to retrieve and apply the values for the specified list of properties to the specified appointment, and transfer control to the specified function.
 * @param {!ASPxClientAppointment} clientAppointment An ASPxClientAppointment object that is the client appointment for which the data is retrieved.
 * @param {!Array<string>} propertyNames An array of strings, that are the names of appointment properties to query.
 * @param {!Object} onCallBack A handler of a function executed after a callback.
 * @return {void}
 */
ASPxClientScheduler.prototype.RefreshClientAppointmentProperties = function(clientAppointment, propertyNames, onCallBack) {};

/**
 * Client-side function that invokes the editing form for the appointment specified by its client ID.
 * @param {string} aptClientId A string, representing the appointment client identifier.
 * @return {void}
 */
ASPxClientScheduler.prototype.ShowAppointmentFormByClientId = function(aptClientId) {};

/**
 * Client-side function that invokes the editing form for the appointment specified by its storage identifier.
 * @param {string} aptServerId A string, representing the appointment identifier.
 * @return {void}
 */
ASPxClientScheduler.prototype.ShowAppointmentFormByServerId = function(aptServerId) {};

/**
 * Sets the time of the day corresponding to the start of the topmost displayed time cell row.
 * Sets the time of the day corresponding to the start of the topmost displayed time cell row.
 * @param {number} duration An integer, representing the number of milliseconds passed since the start of the day.
 * @param {!ASPxSchedulerViewType=} viewType An ASPxSchedulerViewType enumeration member, representing the scheduler's View. It can be either 'Day' or 'WorkWeek'.
 * @return {void}
 */
ASPxClientScheduler.prototype.SetTopRowTime = function(duration, viewType) {};

/**
 * Gets the time of the day corresponding to the start of the topmost displayed time cell row.
 * Gets the time of day corresponding to the start of the topmost displayed time cell row.
 * @param {!ASPxSchedulerViewType=} viewType An ASPxSchedulerViewType enumeration member, representing the scheduler's View. It can be either "Day" or  "WorkWeek", otherwise the result is undefined.
 * @return {number}
 */
ASPxClientScheduler.prototype.GetTopRowTime = function(viewType) {};

/**
 * Client-side scripting method which displays the Loading Panel.
 * @return {void}
 */
ASPxClientScheduler.prototype.ShowLoadingPanel = function() {};

/**
 * Client-side scripting method which hides the Loading Panel from view.
 * @return {void}
 */
ASPxClientScheduler.prototype.HideLoadingPanel = function() {};

/**
 * Client-side method that invokes the inplace editor form to create a new appointment.
 * Client-side method that invokes the inplace editor form to create a new appointment.
 * @param {!Date} start A date object, representing the start of the new appointment.
 * @param {!Date} end A date object, representing the end of the new appointment.
 * @param {string=} resourceId An object representing the identifier of a resource associated with the new appointment.
 * @return {void}
 */
ASPxClientScheduler.prototype.ShowInplaceEditor = function(start, end, resourceId) {};

/**
 * Client-side scripting  method to insert the specified appointment.
 * @param {!ASPxClientAppointment} apt An ASPxClientAppointment object representing the client-side appointment.
 * @return {void}
 */
ASPxClientScheduler.prototype.InsertAppointment = function(apt) {};

/**
 * Client-side scripting  method to update the specified appointment.
 * @param {!ASPxClientAppointment} apt An ASPxClientAppointment object representing the client-side appointment.
 * @return {void}
 */
ASPxClientScheduler.prototype.UpdateAppointment = function(apt) {};

/**
 * Client-side scripting  method to delete the specified appointment.
 * @param {!ASPxClientAppointment} apt An ASPxClientAppointment object representing the client-side appointment.
 * @return {void}
 */
ASPxClientScheduler.prototype.DeleteAppointment = function(apt) {};

/**
 * Client-side method that allows retrieving a collection of time intervals displayed by the ASPxScheduler.
 * @return {!Array<?>}
 */
ASPxClientScheduler.prototype.GetVisibleIntervals = function() {};

/**
 * Changes the container that the ASPxScheduler tooltip belongs to.
 * @param {!Object} container An object that serves as the new container for the pop-up menu.
 * @return {void}
 */
ASPxClientScheduler.prototype.ChangeToolTipContainer = function(container) {};

/**
 * Changes the container that the ASPxScheduler pop-up menu belongs to.
 * @param {!Object} container An object that serves as the new container for the pop-up menu.
 * @return {void}
 */
ASPxClientScheduler.prototype.ChangePopupMenuContainer = function(container) {};

/**
 * Returns focus to the form if the ASPxScheduler control is not visible when the reminder fires.
 * @param {!Object} container A DIV object that is located in such a way that it is visible on the page in situations when the ASPxScheduler control is hidden.
 * @return {void}
 */
ASPxClientScheduler.prototype.ChangeFormContainer = function(container) {};

/**
 * Client-side scripting method that saves appointment modifications and closes the form.
 * @return {void}
 */
ASPxClientScheduler.prototype.AppointmentFormSave = function() {};

/**
 * Client-side scripting method that deletes the appointment being edited.
 * @return {void}
 */
ASPxClientScheduler.prototype.AppointmentFormDelete = function() {};

/**
 * Client-side scripting method that cancels changes and closes the appointment editing form.
 * @return {void}
 */
ASPxClientScheduler.prototype.AppointmentFormCancel = function() {};

/**
 * Client-side scripting method that navigates the scheduler to the date selected in the GotoDate form and closes the form.
 * @return {void}
 */
ASPxClientScheduler.prototype.GoToDateFormApply = function() {};

/**
 * Client-side scripting method that cancels changes and closes the GotoDate form.
 * @return {void}
 */
ASPxClientScheduler.prototype.GoToDateFormCancel = function() {};

/**
 * Client-side scripting method that cancels changes and closes the form.
 * @return {void}
 */
ASPxClientScheduler.prototype.InplaceEditFormSave = function() {};

/**
 * Client-side scripting method that cancels changes and closes the form.
 * @return {void}
 */
ASPxClientScheduler.prototype.InplaceEditFormCancel = function() {};

/**
 * Client-side scripting method that invokes the appointment editing form for the appointment being edited in the inplace editor.
 * @return {void}
 */
ASPxClientScheduler.prototype.InplaceEditFormShowMore = function() {};

/**
 * Client-side scripting method that closes the Reminder form.
 * @return {void}
 */
ASPxClientScheduler.prototype.ReminderFormCancel = function() {};

/**
 * Client-side scripting method that calls the Dismiss method for the selected reminder.
 * @return {void}
 */
ASPxClientScheduler.prototype.ReminderFormDismiss = function() {};

/**
 * Client-side scripting method that dismisses all reminders shown in the Reminder form.
 * @return {void}
 */
ASPxClientScheduler.prototype.ReminderFormDismissAll = function() {};

/**
 * Client-side scripting method that changes the alert time for the selected reminder to the specified interval.
 * @return {void}
 */
ASPxClientScheduler.prototype.ReminderFormSnooze = function() {};
/**
 * @record
 * @struct
 */
function ASPxSchedulerViewType() {}
 /** @type {string} */
ASPxSchedulerViewType.prototype.Day;
 /** @type {string} */
ASPxSchedulerViewType.prototype.WorkWeek;
 /** @type {string} */
ASPxSchedulerViewType.prototype.Week;
 /** @type {string} */
ASPxSchedulerViewType.prototype.Month;
 /** @type {string} */
ASPxSchedulerViewType.prototype.Timeline;
 /** @type {string} */
ASPxSchedulerViewType.prototype.FullWeek;
/**
 * @record
 * @struct
 */
function ASPxSchedulerGroupType() {}
 /** @type {string} */
ASPxSchedulerGroupType.prototype.None;
 /** @type {string} */
ASPxSchedulerGroupType.prototype.Date;
 /** @type {string} */
ASPxSchedulerGroupType.prototype.Resource;
/**
 * @record
 * @struct
 */
function ASPxAppointmentType() {}
 /** @type {string} */
ASPxAppointmentType.prototype.Normal;
 /** @type {string} */
ASPxAppointmentType.prototype.Pattern;
 /** @type {string} */
ASPxAppointmentType.prototype.Occurrence;
 /** @type {string} */
ASPxAppointmentType.prototype.ChangedOccurrence;
 /** @type {string} */
ASPxAppointmentType.prototype.DeletedOccurrence;
/**
 * @record
 * @struct
 */
function ASPxClientAppointmentDeletingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientAppointmentDeletingEventArgs() {}
 /** @type {!Array<!Object>} */
ASPxClientAppointmentDeletingEventArgs.prototype.appointmentIds;
/**
 * @record
 * @struct
 */
function AppointmentClickEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function AppointmentClickEventArgs() {}
 /** @type {string} */
AppointmentClickEventArgs.prototype.appointmentId;
 /** @type {!Object} */
AppointmentClickEventArgs.prototype.htmlElement;
 /** @type {boolean} */
AppointmentClickEventArgs.prototype.handled;
/**
 * @record
 * @struct
 */
function AppointmentsSelectionEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function AppointmentsSelectionEventArgs() {}
 /** @type {!Array<string>} */
AppointmentsSelectionEventArgs.prototype.appointmentIds;
/**
 * @record
 * @struct
 */
function ActiveViewChangingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ActiveViewChangingEventArgs() {}
 /** @type {!ASPxSchedulerViewType} */
ActiveViewChangingEventArgs.prototype.oldView;
 /** @type {!ASPxSchedulerViewType} */
ActiveViewChangingEventArgs.prototype.newView;
 /** @type {boolean} */
ActiveViewChangingEventArgs.prototype.cancel;
/**
 * @record
 * @struct
 */
function MoreButtonClickedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function MoreButtonClickedEventArgs() {}
 /** @type {!Date} */
MoreButtonClickedEventArgs.prototype.targetDateTime;
 /** @type {?} */
MoreButtonClickedEventArgs.prototype.interval;
 /** @type {string} */
MoreButtonClickedEventArgs.prototype.resource;
 /** @type {boolean} */
MoreButtonClickedEventArgs.prototype.handled;
/**
 * @record
 * @struct
 */
function MenuItemClickedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function MenuItemClickedEventArgs() {}
 /** @type {string} */
MenuItemClickedEventArgs.prototype.itemName;
 /** @type {boolean} */
MenuItemClickedEventArgs.prototype.handled;
/**
 * @record
 * @struct
 */
function AppointmentDragEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientAppointmentDragEventArgs() {}
 /** @type {boolean} */
ASPxClientAppointmentDragEventArgs.prototype.allow;
 /** @type {!Object} */
ASPxClientAppointmentDragEventArgs.prototype.mouseEvent;
 /** @type {!Array<!ASPxClientAppointmentDragInfo>} */
ASPxClientAppointmentDragEventArgs.prototype.dragInformation;
/**
 * @record
 * @struct
 */
function AppointmentDropEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientAppointmentDropEventArgs() {}
 /** @type {boolean} */
ASPxClientAppointmentDropEventArgs.prototype.handled;
 /** @type {!ASPxClientAppointmentOperation} */
ASPxClientAppointmentDropEventArgs.prototype.operation;
 /** @type {!Array<!ASPxClientAppointmentDragInfo>} */
ASPxClientAppointmentDropEventArgs.prototype.dragInformation;
/**
 * @record
 * @struct
 */
function AppointmentResizeEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientAppointmentResizeEventArgs() {}
 /** @type {boolean} */
ASPxClientAppointmentResizeEventArgs.prototype.handled;
 /** @type {!ASPxClientAppointmentOperation} */
ASPxClientAppointmentResizeEventArgs.prototype.operation;
 /** @type {string} */
ASPxClientAppointmentResizeEventArgs.prototype.appointmentId;
 /** @type {?} */
ASPxClientAppointmentResizeEventArgs.prototype.oldInterval;
 /** @type {?} */
ASPxClientAppointmentResizeEventArgs.prototype.newInterval;
/**
 * @record
 * @struct
 */
function AppointmentResizingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientAppointmentResizingEventArgs() {}
 /** @type {boolean} */
ASPxClientAppointmentResizingEventArgs.prototype.allow;
 /** @type {!Object} */
ASPxClientAppointmentResizingEventArgs.prototype.mouseEvent;
 /** @type {string} */
ASPxClientAppointmentResizingEventArgs.prototype.appointmentId;
 /** @type {?} */
ASPxClientAppointmentResizingEventArgs.prototype.oldInterval;
 /** @type {?} */
ASPxClientAppointmentResizingEventArgs.prototype.newInterval;
/**
 * @record
 * @struct
 */
function ASPxClientAppointmentDragInfo() {}
 /** @type {string} */
ASPxClientAppointmentDragInfo.prototype.appointmentId;
 /** @type {?} */
ASPxClientAppointmentDragInfo.prototype.oldInterval;
 /** @type {!Array<string>} */
ASPxClientAppointmentDragInfo.prototype.oldResources;
 /** @type {?} */
ASPxClientAppointmentDragInfo.prototype.newInterval;
 /** @type {!Array<string>} */
ASPxClientAppointmentDragInfo.prototype.newResources;
/**
 * @record
 * @struct
 */
function ASPxClientSchedulerToolTipData() {}

/**
 * Returns the client appointment for which the tooltip is displayed.
 * @return {!ASPxClientAppointment}
 */
ASPxClientSchedulerToolTipData.prototype.GetAppointment = function() {};

/**
 * Returns the client time interval for which the tooltip is displayed.
 * @return {?}
 */
ASPxClientSchedulerToolTipData.prototype.GetInterval = function() {};

/**
 * Returns the resources associated with the appointment for which the tooltip is displayed.
 * @return {!Array<!Object>}
 */
ASPxClientSchedulerToolTipData.prototype.GetResources = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientToolTipBase() {}

/**
 * Returns the value that indicates whether or not the tooltip can be displayed.
 * @return {boolean}
 */
ASPxClientToolTipBase.prototype.CanShowToolTip = function() {};

/**
 * Ends updating the tooltip content.
 * @param {!ASPxClientSchedulerToolTipData} toolTipData An ASPxClientSchedulerToolTipData object providing data required to update the tooltip content.
 * @return {void}
 */
ASPxClientToolTipBase.prototype.FinalizeUpdate = function(toolTipData) {};

/**
 * Updates the tooltip content.
 * @param {!ASPxClientSchedulerToolTipData} toolTipData An ASPxClientSchedulerToolTipData object providing data required to update the tooltip content.
 * @return {void}
 */
ASPxClientToolTipBase.prototype.Update = function(toolTipData) {};

/**
 * Closes the tooltip.
 * @return {void}
 */
ASPxClientToolTipBase.prototype.Close = function() {};

/**
 *
 * @param {!Object} bounds
 * @return {!ASPxClientPoint}
 */
ASPxClientToolTipBase.prototype.CalculatePosition = function(bounds) {};

/**
 * Displays the Appointment Menu in the position of the tooltip.
 * @param {!Object} eventObject An object containing information about the event on which the menu is displayed.
 * @return {void}
 */
ASPxClientToolTipBase.prototype.ShowAppointmentMenu = function(eventObject) {};

/**
 * Displays the View Menu in the position of the tooltip.
 * @param {!Object} eventObject An object containing information about the event on which the menu is displayed.
 * @return {void}
 */
ASPxClientToolTipBase.prototype.ShowViewMenu = function(eventObject) {};

/**
 * Returns the string representation of the specified interval.
 * @param {?} interval An ASPxClientTimeInterval object to convert.
 * @return {string}
 */
ASPxClientToolTipBase.prototype.ConvertIntervalToString = function(interval) {};
/**
 * @record
 * @struct
 */
function ASPxClientSpellChecker() {}
 /** @type {!ASPxClientEvent<!ASPxClientBeforeCheckEventHandler<?>>} */
ASPxClientSpellChecker.prototype.BeforeCheck;
 /** @type {!ASPxClientEvent<!ASPxClientCancelEventHandler<?>>} */
ASPxClientSpellChecker.prototype.CheckCompleteFormShowing;
 /** @type {!ASPxClientEvent<!ASPxClientAfterCheckEventHandler<?>>} */
ASPxClientSpellChecker.prototype.AfterCheck;
 /** @type {!ASPxClientEvent<!ASPxClientWordChangedEventHandler<?>>} */
ASPxClientSpellChecker.prototype.WordChanged;

/**
 * Starts the spelling check of the text contained within the element specified by the CheckedElementID value.
 * @return {void}
 */
ASPxClientSpellChecker.prototype.Check = function() {};

/**
 * Starts checking contents of the specified element.
 * @param {!Object} element An object representing the element being checked.
 * @return {void}
 */
ASPxClientSpellChecker.prototype.CheckElement = function(element) {};

/**
 * Starts checking contents of the specified element.
 * @param {string} id A string representing the identifier of the element being checked.
 * @return {void}
 */
ASPxClientSpellChecker.prototype.CheckElementById = function(id) {};

/**
 * Starts checking the contents of controls in the specified container.
 * @param {!Object} containerElement An object representing a control which contains elements being checked.
 * @return {void}
 */
ASPxClientSpellChecker.prototype.CheckElementsInContainer = function(containerElement) {};

/**
 * Starts checking the contents of controls in the specified container.
 * @param {string} containerId A string, specifying the control's identifier.
 * @return {void}
 */
ASPxClientSpellChecker.prototype.CheckElementsInContainerById = function(containerId) {};
/**
 * @record
 * @struct
 */
function ASPxClientBeforeCheckEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientSpellCheckerBeforeCheckEventArgs() {}
 /** @type {string} */
ASPxClientSpellCheckerBeforeCheckEventArgs.prototype.controlId;
/**
 * @record
 * @struct
 */
function ASPxClientAfterCheckEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientSpellCheckerAfterCheckEventArgs() {}
 /** @type {string} */
ASPxClientSpellCheckerAfterCheckEventArgs.prototype.controlId;
 /** @type {string} */
ASPxClientSpellCheckerAfterCheckEventArgs.prototype.checkedText;
 /** @type {string} */
ASPxClientSpellCheckerAfterCheckEventArgs.prototype.reason;
/**
 * @record
 * @struct
 */
function ASPxClientWordChangedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientSpreadsheetCustomCommandExecutedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientSpreadsheetCustomCommandExecutedEventArgs() {}
 /** @type {string} */
ASPxClientSpreadsheetCustomCommandExecutedEventArgs.prototype.commandName;
 /** @type {string} */
ASPxClientSpreadsheetCustomCommandExecutedEventArgs.prototype.parameter;
 /** @type {!ASPxClientRibbonItem} */
ASPxClientSpreadsheetCustomCommandExecutedEventArgs.prototype.item;
/**
 * @record
 * @struct
 */
function ASPxClientSpreadsheetDocumentChangedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientSpreadsheetDocumentChangedEventArgs() {}
/**
 * @record
 * @struct
 */
function ASPxClientSpreadsheetSynchronizationEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientSpreadsheetSynchronizationEventArgs() {}
/**
 * @record
 * @struct
 */
function ASPxClientSpreadsheetHyperlinkClickEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientSpreadsheetHyperlinkClickEventArgs() {}
 /** @type {boolean} */
ASPxClientSpreadsheetHyperlinkClickEventArgs.prototype.handled;
 /** @type {!Object} */
ASPxClientSpreadsheetHyperlinkClickEventArgs.prototype.htmlEvent;
 /** @type {!ASPxClientOfficeDocumentLinkType} */
ASPxClientSpreadsheetHyperlinkClickEventArgs.prototype.hyperlinkType;
 /** @type {string} */
ASPxClientSpreadsheetHyperlinkClickEventArgs.prototype.targetUri;
/**
 * @record
 * @struct
 */
function ASPxClientSpreadsheet() {}
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientSpreadsheet.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientSpreadsheet.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientSpreadsheet.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ASPxClientSpreadsheetSelectionChangedEventHandler<?>>} */
ASPxClientSpreadsheet.prototype.SelectionChanged;
 /** @type {!ASPxClientEvent<!ASPxClientSpreadsheetCustomCommandExecutedEventHandler<?>>} */
ASPxClientSpreadsheet.prototype.CustomCommandExecuted;
 /** @type {!ASPxClientEvent<!ASPxClientSpreadsheetDocumentChangedEventHandler<?>>} */
ASPxClientSpreadsheet.prototype.DocumentChanged;
 /** @type {!ASPxClientEvent<!ASPxClientSpreadsheetSynchronizationEventHandler<?>>} */
ASPxClientSpreadsheet.prototype.BeginSynchronization;
 /** @type {!ASPxClientEvent<!ASPxClientSpreadsheetSynchronizationEventHandler<?>>} */
ASPxClientSpreadsheet.prototype.EndSynchronization;
 /** @type {!ASPxClientEvent<!ASPxClientSpreadsheetHyperlinkClickEventHandler<?>>} */
ASPxClientSpreadsheet.prototype.HyperlinkClick;

/**
 * Sets input focus to the Spreadsheet.
 * @return {void}
 */
ASPxClientSpreadsheet.prototype.Focus = function() {};

/**
 * Gets access to the client ribbon object.
 * @return {?}
 */
ASPxClientSpreadsheet.prototype.GetRibbon = function() {};

/**
 * Enables you to switch the full-screen mode of the Spreadsheet.
 * @param {boolean} fullscreen true to activate full-screen mode; false to deactivate full-screen mode.
 * @return {void}
 */
ASPxClientSpreadsheet.prototype.SetFullscreenMode = function(fullscreen) {};

/**
 * Returns the current selection made in a Spreadsheet.
 * @return {!ASPxClientSpreadsheetSelection}
 */
ASPxClientSpreadsheet.prototype.GetSelection = function() {};

/**
 * Indicates whether any unsaved changes are contained in the current document.
 * @return {boolean}
 */
ASPxClientSpreadsheet.prototype.HasUnsavedChanges = function() {};

/**
 * Gets the value of the specified cell.
 * @param {number} colModelIndex An integer value specifying the cell's column index.
 * @param {number} rowModelIndex An integer value specifying the cell's row index.
 * @return {!Object}
 */
ASPxClientSpreadsheet.prototype.GetCellValue = function(colModelIndex, rowModelIndex) {};

/**
 * Gets the value of the currently active cell.
 * @return {!Object}
 */
ASPxClientSpreadsheet.prototype.GetActiveCellValue = function() {};

/**
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * @param {string} parameter A string value that represents any information that needs to be sent to the server-side event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
ASPxClientSpreadsheet.prototype.PerformCallback = function(parameter, onSuccess) {};

/**
 * Sends a callback to the server and generates the server-side DocumentCallback event, passing it the specified argument.
 * @param {string} parameter A string value that represents any information that needs to be sent to the server-side DocumentCallback event.
 * @return {void}
 */
ASPxClientSpreadsheet.prototype.PerformDocumentCallback = function(parameter) {};

/**
 * Reconnects the Spreadsheet to an external ribbon.
 * @return {void}
 */
ASPxClientSpreadsheet.prototype.ReconnectToExternalRibbon = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientSpreadsheetSelectionChangedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientSpreadsheetSelectionChangedEventArgs() {}
 /** @type {!ASPxClientSpreadsheetSelection} */
ASPxClientSpreadsheetSelectionChangedEventArgs.prototype.selection;
/**
 * @record
 * @struct
 */
function ASPxClientSpreadsheetSelection() {}
 /** @type {number} */
ASPxClientSpreadsheetSelection.prototype.activeCellColumnIndex;
 /** @type {number} */
ASPxClientSpreadsheetSelection.prototype.activeCellRowIndex;
 /** @type {number} */
ASPxClientSpreadsheetSelection.prototype.leftColumnIndex;
 /** @type {number} */
ASPxClientSpreadsheetSelection.prototype.topRowIndex;
 /** @type {number} */
ASPxClientSpreadsheetSelection.prototype.rightColumnIndex;
 /** @type {number} */
ASPxClientSpreadsheetSelection.prototype.bottomRowIndex;
/**
 * @record
 * @struct
 */
function ASPxClientTreeList() {}
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientTreeList.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientTreeList.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientTreeList.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ASPxClientTreeListContextMenuEventHandler<?>>} */
ASPxClientTreeList.prototype.ContextMenu;
 /** @type {!ASPxClientEvent<!ASPxClientTreeListCustomButtonEventHandler<?>>} */
ASPxClientTreeList.prototype.CustomButtonClick;
 /** @type {!ASPxClientEvent<!ASPxClientTreeListNodeEventHandler<?>>} */
ASPxClientTreeList.prototype.NodeFocusing;
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientTreeList.prototype.FocusedNodeChanged;
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientTreeList.prototype.SelectionChanged;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientTreeList.prototype.CustomizationWindowCloseUp;
 /** @type {!ASPxClientEvent<!ASPxClientTreeListCustomDataCallbackEventHandler<?>>} */
ASPxClientTreeList.prototype.CustomDataCallback;
 /** @type {!ASPxClientEvent<!ASPxClientTreeListNodeEventHandler<?>>} */
ASPxClientTreeList.prototype.NodeClick;
 /** @type {!ASPxClientEvent<!ASPxClientTreeListNodeEventHandler<?>>} */
ASPxClientTreeList.prototype.NodeDblClick;
 /** @type {!ASPxClientEvent<!ASPxClientTreeListNodeEventHandler<?>>} */
ASPxClientTreeList.prototype.NodeExpanding;
 /** @type {!ASPxClientEvent<!ASPxClientTreeListNodeEventHandler<?>>} */
ASPxClientTreeList.prototype.NodeCollapsing;
 /** @type {!ASPxClientEvent<!ASPxClientTreeListStartDragNodeEventHandler<?>>} */
ASPxClientTreeList.prototype.StartDragNode;
 /** @type {!ASPxClientEvent<!ASPxClientTreeListEndDragNodeEventHandler<?>>} */
ASPxClientTreeList.prototype.EndDragNode;
 /** @type {!ASPxClientEvent<!ASPxClientTreeListColumnResizingEventHandler<?>>} */
ASPxClientTreeList.prototype.ColumnResizing;
 /** @type {!ASPxClientEvent<!ASPxClientTreeListColumnResizedEventHandler<?>>} */
ASPxClientTreeList.prototype.ColumnResized;

/**
 * Sets input focus to the ASPxTreeList.
 * @return {void}
 */
ASPxClientTreeList.prototype.Focus = function() {};

/**
 * Gets the Popup Edit Form.
 * @return {?}
 */
ASPxClientTreeList.prototype.GetPopupEditForm = function() {};

/**
 * Returns the focused node's key value.
 * @return {string}
 */
ASPxClientTreeList.prototype.GetFocusedNodeKey = function() {};

/**
 * Moves focus to the specified node.
 * @param {string} key A String value that uniquely identifies the node.
 * @return {void}
 */
ASPxClientTreeList.prototype.SetFocusedNodeKey = function(key) {};

/**
 * Indicates whether the specified node is selected.
 * @param {string} nodeKey A String value that identifies the node by its key value.
 * @return {?}
 */
ASPxClientTreeList.prototype.IsNodeSelected = function(nodeKey) {};

/**
 * Selects the specified node.
 * Selects or deselects the specified node.
 * @param {string} nodeKey A string value that identifies the node.
 * @param {boolean=} state true to select the node; otherwise, false.
 * @return {void}
 */
ASPxClientTreeList.prototype.SelectNode = function(nodeKey, state) {};

/**
 * Obtains key values of selected nodes that are displayed within the current page.
 * @return {!Array<string>}
 */
ASPxClientTreeList.prototype.GetVisibleSelectedNodeKeys = function() {};

/**
 * Indicates whether the Customization Window is displayed.
 * @return {boolean}
 */
ASPxClientTreeList.prototype.IsCustomizationWindowVisible = function() {};

/**
 * Invokes the Customization Window.
 * Invokes the Customization Window and displays it over the specified HTML element.
 * @param {!Object=} htmlElement An object that specifies the HTML element relative to whose position the customization window is invoked.
 * @return {void}
 */
ASPxClientTreeList.prototype.ShowCustomizationWindow = function(htmlElement) {};

/**
 * Closes the Customization Window.
 * @return {void}
 */
ASPxClientTreeList.prototype.HideCustomizationWindow = function() {};

/**
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * @param {string} arg A string value that represents any information that needs to be sent to the server-side CustomCallback event.
 * @return {void}
 */
ASPxClientTreeList.prototype.PerformCustomCallback = function(arg) {};

/**
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * @param {string} args A string value that represents any information that needs to be sent to the server-side CustomCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
ASPxClientTreeList.prototype.PerformCallback = function(args, onSuccess) {};

/**
 * Sends a callback to the server and generates the server-side CustomDataCallback event passing it the specified argument.
 * @param {string} arg A string value that represents any information that needs to be sent to the server-side CustomDataCallback event.
 * @return {void}
 */
ASPxClientTreeList.prototype.PerformCustomDataCallback = function(arg) {};

/**
 * Obtains specified data source field values within a specified node, and submits them to the specified JavaScript function.
 * Obtains specified data source field values within a specified node, and submits them to the specified JavaScript function.
 * @param {string} nodeKey A string value that identifies the node.
 * @param {string|!Array<string>} fieldNames A string value that contains the names of data source fields whose values within the specified node are returned. The field names should be separated by ';'. / The names of data source fields whose values within the specified node are returned.
 * @param {!ASPxClientTreeListValuesCallback} onCallback A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
 * @return {void}
 */
ASPxClientTreeList.prototype.GetNodeValues = function(nodeKey, fieldNames, onCallback) {};

/**
 * Obtains specified data source field values within nodes that are displayed within the current page, and submits them to the specified JavaScript function.
 * Obtains specified data source field values within nodes that are displayed within the current page, and submits them to the specified JavaScript function.
 * @param {string|!Array<string>} fieldNames A string value that contains the names of data source fields whose values within visible nodes are returned. The field names should be separated by ';'. / The names of data source fields whose values within visible nodes are returned.
 * @param {!ASPxClientTreeListValuesCallback} onCallback A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
 * @return {void}
 */
ASPxClientTreeList.prototype.GetVisibleNodeValues = function(fieldNames, onCallback) {};

/**
 * Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
 * Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
 * Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
 * Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
 * @param {string|!Array<string>} fieldNames A string value that contains the names of data source fields whose values within selected nodes are returned. The field names should be separated by ';'. / The names of data source fields whose values within selected nodes are returned.
 * @param {!ASPxClientTreeListValuesCallback} onCallback A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
 * @param {boolean=} visibleOnly true to return values within selected nodes that are displayed within the current page; false to return values within all selected nodes.
 * @return {void}
 */
ASPxClientTreeList.prototype.GetSelectedNodeValues = function(fieldNames, onCallback, visibleOnly) {};

/**
 * Selects the specified page.
 * @param {number} index An integer value that specifies the active page's index.
 * @return {void}
 */
ASPxClientTreeList.prototype.GoToPage = function(index) {};

/**
 * Activates the previous page.
 * @return {void}
 */
ASPxClientTreeList.prototype.PrevPage = function() {};

/**
 * Activates the next page.
 * @return {void}
 */
ASPxClientTreeList.prototype.NextPage = function() {};

/**
 * Gets the index of the page currently being selected.
 * @return {number}
 */
ASPxClientTreeList.prototype.GetPageIndex = function() {};

/**
 * Gets the number of pages to which the ASPxTreeList's data is divided.
 * @return {number}
 */
ASPxClientTreeList.prototype.GetPageCount = function() {};

/**
 * Returns the specified node's state.
 * @param {string} nodeKey A String value that identifies the node.
 * @return {string}
 */
ASPxClientTreeList.prototype.GetNodeState = function(nodeKey) {};

/**
 * Expands all nodes.
 * @return {void}
 */
ASPxClientTreeList.prototype.ExpandAll = function() {};

/**
 * Collapses all Node.
 * @return {void}
 */
ASPxClientTreeList.prototype.CollapseAll = function() {};

/**
 * Expands the specified node preserving the collapsed state of child nodes.
 * @param {string} key A String value that uniquely identifies the node.
 * @return {void}
 */
ASPxClientTreeList.prototype.ExpandNode = function(key) {};

/**
 * Collapses the specified node preserving the expanded state of child nodes.
 * @param {string} key A String value that uniquely identifies the node.
 * @return {void}
 */
ASPxClientTreeList.prototype.CollapseNode = function(key) {};

/**
 * Obtains key values of nodes that are displayed within the current page.
 * @return {!Array<string>}
 */
ASPxClientTreeList.prototype.GetVisibleNodeKeys = function() {};

/**
 * Returns an HTML table row that represents the specified node.
 * @param {string} nodeKey A string value that identifies the node.
 * @return {!Object}
 */
ASPxClientTreeList.prototype.GetNodeHtmlElement = function(nodeKey) {};

/**
 * Returns the number of visible columns within the client ASPxTreeList.
 * @return {number}
 */
ASPxClientTreeList.prototype.GetVisibleColumnCount = function() {};

/**
 * Returns the number of columns within the client ASPxTreeList.
 * @return {number}
 */
ASPxClientTreeList.prototype.GetColumnCount = function() {};

/**
 * Returns the column located at the specified position within the Columns collection.
 * @param {number} index An integer value that identifies the column within the collection (the column's Index property value).
 * @return {!ASPxClientTreeListColumn}
 */
ASPxClientTreeList.prototype.GetColumnByIndex = function(index) {};

/**
 * Returns the column with the specified name.
 * @param {string} name A string value that specifies the column's name (the column's Name property value).
 * @return {!ASPxClientTreeListColumn}
 */
ASPxClientTreeList.prototype.GetColumnByName = function(name) {};

/**
 * Returns the client column which is bound to the specified data source field.
 * @param {string} fieldName A string value that specifies the name of the data source field to which the column is bound (the column's FieldName property value).
 * @return {!ASPxClientTreeListColumn}
 */
ASPxClientTreeList.prototype.GetColumnByFieldName = function(fieldName) {};

/**
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * Sorts data by the specified data column's values.
 * @param {number|string|!ASPxClientTreeListColumn} columnIndex_or_nameOrFieldName_or_column An integer value that specifies the column's position within the column collection. / A String value that specifies the column's name or field name. / An ASPxClientTreeListColumn object that represents the data column.
 * @param {string=} sortOrder A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
 * @param {boolean=} reset true to clear any previous sorting; otherwise, false.
 * @return {void}
 */
ASPxClientTreeList.prototype.SortBy = function(columnIndex_or_nameOrFieldName_or_column, sortOrder, reset) {};

/**
 * Switches the ASPxTreeList to edit mode.
 * @param {string} nodeKey A string value that identifies the node by its key value.
 * @return {void}
 */
ASPxClientTreeList.prototype.StartEdit = function(nodeKey) {};

/**
 * Saves all the changes made and switches the ASPxTreeList to browse mode.
 * @return {void}
 */
ASPxClientTreeList.prototype.UpdateEdit = function() {};

/**
 * Cancels all the changes made and switches the ASPxTreeList to browse mode.
 * @return {void}
 */
ASPxClientTreeList.prototype.CancelEdit = function() {};

/**
 * Indicates whether the ASPxTreeList is in edit mode.
 * @return {boolean}
 */
ASPxClientTreeList.prototype.IsEditing = function() {};

/**
 * Gets the key value of the node currently being edited.
 * @return {string}
 */
ASPxClientTreeList.prototype.GetEditingNodeKey = function() {};

/**
 * Moves the specified node to a new position.
 * @param {string} nodeKey A string value that identifies the target node by its key value.
 * @param {string} parentNodeKey A string value that identifies the node to whose child collection the target node is moved. An empty string to display the target node within the root.
 * @return {void}
 */
ASPxClientTreeList.prototype.MoveNode = function(nodeKey, parentNodeKey) {};

/**
 * Deletes the specified node.
 * @param {string} nodeKey A string value that identifies the node.
 * @return {void}
 */
ASPxClientTreeList.prototype.DeleteNode = function(nodeKey) {};

/**
 * Switches the ASPxTreeList to edit mode and allows new root node values to be edited.
 * Switches the ASPxTreeList to edit mode and allows new node values to be edited.
 * @param {string=} parentNodeKey A String value that identifies the parent node, which owns a new node.
 * @return {void}
 */
ASPxClientTreeList.prototype.StartEditNewNode = function(parentNodeKey) {};

/**
 * Returns the editor used to edit the specified column's values.
 * Returns the editor used to edit the specified column's values.
 * Returns the editor used to edit the specified column's values.
 * @param {!ASPxClientTreeListColumn|number|string} column_or_columnIndex_or_columnNameOrFieldName An ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList. / An integer value that identifies the column by its position within the column collection. / A String value that identifies the column by its name or field name.
 * @return {!Object}
 */
ASPxClientTreeList.prototype.GetEditor = function(column_or_columnIndex_or_columnNameOrFieldName) {};

/**
 * Returns the value of the specified edit cell.
 * Returns the value of the specified edit cell.
 * Returns the value of the specified edit cell.
 * @param {!ASPxClientTreeListColumn|number|string} column_or_columnIndex_or_columnNameOrFieldName An ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList. / An integer value that identifies the data column by its index within the ASPxTreeList's column collection. / A String value that identifies the column by its name or field name.
 * @return {!Object}
 */
ASPxClientTreeList.prototype.GetEditValue = function(column_or_columnIndex_or_columnNameOrFieldName) {};

/**
 * Sets the value of the specified edit cell.
 * Sets the value of the specified edit cell.
 * Sets the value of the specified edit cell.
 * @param {!ASPxClientTreeListColumn|number|string} column_or_columnIndex_or_columnNameOrFieldName An ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList. / An integer value that identifies the data column by its index within the ASPxTreeList's column collection. / A String value that identifies the column by its name or field name.
 * @param {!Object} value An object that specifies the edit cell's new value.
 * @return {void}
 */
ASPxClientTreeList.prototype.SetEditValue = function(column_or_columnIndex_or_columnNameOrFieldName, value) {};

/**
 * Moves focus to the specified editor within the edited node.
 * Moves focus to the specified editor within the edited node.
 * Moves focus to the specified editor within the edited node.
 * @param {!ASPxClientTreeListColumn|number|string} column_or_columnIndex_or_columnNameOrFieldName A ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList. / An integer value that identifies the data column. / A String value that specifies the column's name or field name.
 * @return {void}
 */
ASPxClientTreeList.prototype.FocusEditor = function(column_or_columnIndex_or_columnNameOrFieldName) {};

/**
 * Scrolls the tree list so that the specified node becomes visible.
 * @param {string} nodeKey An integer value that specifies the node index within the tree list's client item list.
 * @return {void}
 */
ASPxClientTreeList.prototype.MakeNodeVisible = function(nodeKey) {};

/**
 * Returns the current vertical scroll position of the tree list's content.
 * @return {number}
 */
ASPxClientTreeList.prototype.GetVerticalScrollPosition = function() {};

/**
 * Returns the current horizontal scroll position of the tree list's content.
 * @return {number}
 */
ASPxClientTreeList.prototype.GetHorizontalScrollPosition = function() {};

/**
 * Specifies the vertical scroll position for the tree list's content.
 * @param {number} position An integer value specifying the vertical scroll position.
 * @return {void}
 */
ASPxClientTreeList.prototype.SetVerticalScrollPosition = function(position) {};

/**
 * Specifies the horizontal scroll position for the tree list's content.
 * @param {number} position An integer value specifying the horizontal scroll position.
 * @return {void}
 */
ASPxClientTreeList.prototype.SetHorizontalScrollPosition = function(position) {};
/**
 * @record
 * @struct
 */
function ASPxClientTreeListColumn() {}
 /** @type {number} */
ASPxClientTreeListColumn.prototype.index;
 /** @type {string} */
ASPxClientTreeListColumn.prototype.name;
 /** @type {string} */
ASPxClientTreeListColumn.prototype.fieldName;
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientTreeListCustomDataCallbackEventArgs() {}
 /** @type {string} */
ASPxClientTreeListCustomDataCallbackEventArgs.prototype.arg;
 /** @type {!Object} */
ASPxClientTreeListCustomDataCallbackEventArgs.prototype.result;
/**
 * @record
 * @struct
 */
function ASPxClientTreeListCustomDataCallbackEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientTreeListNodeEventArgs() {}
 /** @type {string} */
ASPxClientTreeListNodeEventArgs.prototype.nodeKey;
 /** @type {!Object} */
ASPxClientTreeListNodeEventArgs.prototype.htmlEvent;
 /** @type {boolean} */
ASPxClientTreeListNodeEventArgs.prototype.cancel;
/**
 * @record
 * @struct
 */
function ASPxClientTreeListNodeEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientTreeListContextMenuEventArgs() {}
 /** @type {string} */
ASPxClientTreeListContextMenuEventArgs.prototype.objectType;
 /** @type {!Object} */
ASPxClientTreeListContextMenuEventArgs.prototype.objectKey;
 /** @type {!Object} */
ASPxClientTreeListContextMenuEventArgs.prototype.htmlEvent;
 /** @type {boolean} */
ASPxClientTreeListContextMenuEventArgs.prototype.cancel;
/**
 * @record
 * @struct
 */
function ASPxClientTreeListContextMenuEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientTreeListNodeEventArgs}
 * @record
 * @struct
 */
function ASPxClientTreeListStartDragNodeEventArgs() {}
 /** @type {!Array<!Object>} */
ASPxClientTreeListStartDragNodeEventArgs.prototype.targets;
/**
 * @record
 * @struct
 */
function ASPxClientTreeListStartDragNodeEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientTreeListNodeEventArgs}
 * @record
 * @struct
 */
function ASPxClientTreeListEndDragNodeEventArgs() {}
 /** @type {!Object} */
ASPxClientTreeListEndDragNodeEventArgs.prototype.targetElement;
/**
 * @record
 * @struct
 */
function ASPxClientTreeListEndDragNodeEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientTreeListCustomButtonEventArgs() {}
 /** @type {string} */
ASPxClientTreeListCustomButtonEventArgs.prototype.nodeKey;
 /** @type {number} */
ASPxClientTreeListCustomButtonEventArgs.prototype.buttonIndex;
 /** @type {string} */
ASPxClientTreeListCustomButtonEventArgs.prototype.buttonID;
/**
 * @record
 * @struct
 */
function ASPxClientTreeListCustomButtonEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientTreeListValuesCallback() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientTreeListColumnResizingEventArgs() {}
 /** @type {!ASPxClientTreeListColumn} */
ASPxClientTreeListColumnResizingEventArgs.prototype.column;
/**
 * @record
 * @struct
 */
function ASPxClientTreeListColumnResizingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientTreeListColumnResizedEventArgs() {}
 /** @type {!ASPxClientTreeListColumn} */
ASPxClientTreeListColumnResizedEventArgs.prototype.column;
/**
 * @record
 * @struct
 */
function ASPxClientTreeListColumnResizedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function BootstrapClientAccordion() {}
/**
 * @record
 * @struct
 */
function BootstrapClientButton() {}

/**
 * Returns the text displayed within the button.
 * @return {string}
 */
BootstrapClientButton.prototype.GetText = function() {};

/**
 * Sets the text to be displayed within the button.
 * @param {string} value A string value specifying the text to be displayed within the button.
 * @return {void}
 */
BootstrapClientButton.prototype.SetText = function(value) {};
/**
 * @record
 * @struct
 */
function BootstrapClientCalendar() {}
/**
 * @record
 * @struct
 */
function BootstrapClientCheckBox() {}
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
BootstrapClientCheckBox.prototype.CheckedChanged;

/**
 * Returns a value indicating whether the check box editor is checked.
 * @return {boolean}
 */
BootstrapClientCheckBox.prototype.GetChecked = function() {};

/**
 * Sets a value which specifies the checked status of the check box editor.
 * @param {boolean} isChecked
 * @return {void}
 */
BootstrapClientCheckBox.prototype.SetChecked = function(isChecked) {};

/**
 * Returns the text displayed within the editor.
 * @return {string}
 */
BootstrapClientCheckBox.prototype.GetText = function() {};

/**
 * Returns a value which specifies a check box checked state.
 * @return {string}
 */
BootstrapClientCheckBox.prototype.GetCheckState = function() {};

/**
 * Sets a value specifying the state of a check box.
 * @param {string} checkState
 * @return {void}
 */
BootstrapClientCheckBox.prototype.SetCheckState = function(checkState) {};

/**
 * Sets the text to be displayed within the editor.
 * @param {string} text
 * @return {void}
 */
BootstrapClientCheckBox.prototype.SetText = function(text) {};
/**
 * @record
 * @struct
 */
function BootstrapClientRadioButton() {}
/**
 * @record
 * @struct
 */
function BootstrapClientComboBox() {}
/**
 * @record
 * @struct
 */
function BootstrapClientDateEdit() {}
/**
 * @record
 * @struct
 */
function BootstrapClientDropDownEdit() {}
/**
 * @record
 * @struct
 */
function BootstrapClientFormLayout() {}
/**
 * @record
 * @struct
 */
function BootstrapClientGridView() {}
/**
 * @record
 * @struct
 */
function BootstrapClientHyperLink() {}
/**
 * @record
 * @struct
 */
function BootstrapClientListBox() {}
/**
 * @record
 * @struct
 */
function BootstrapClientCheckBoxList() {}
/**
 * @record
 * @struct
 */
function BootstrapClientRadioButtonList() {}
/**
 * @record
 * @struct
 */
function BootstrapClientMenu() {}
/**
 * @record
 * @struct
 */
function BootstrapClientPopupControl() {}
/**
 * @record
 * @struct
 */
function BootstrapClientPopupMenu() {}
/**
 * @record
 * @struct
 */
function BootstrapClientProgressBar() {}
/**
 * @record
 * @struct
 */
function BootstrapClientSpinEdit() {}
/**
 * @record
 * @struct
 */
function BootstrapClientTabControl() {}
/**
 * @record
 * @struct
 */
function BootstrapClientPageControl() {}
/**
 * @record
 * @struct
 */
function BootstrapClientTextBox() {}
/**
 * @record
 * @struct
 */
function BootstrapClientMemo() {}
/**
 * @record
 * @struct
 */
function BootstrapClientButtonEdit() {}
/**
 * @record
 * @struct
 */
function BootstrapClientTreeView() {}
/**
 * @record
 * @struct
 */
function MVCxClientCalendar() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientCalendar.prototype.BeginCallback;
/**
 * @record
 * @struct
 */
function MVCxClientCallbackPanel() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientCallbackPanel.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to update the Callback Panel by processing the passed information on the server, in an Action specified by the Callback Panel's CallbackRouteValues property.
 * Sends a callback with a parameter to update the Callback Panel by processing the passed information on the server, in an Action specified by the Callback Panel's CallbackRouteValues property.
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * @param {!Object|string} data_or_parameter An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property. / A string value that represents any information that needs to be sent to the server-side Callback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientCallbackPanel.prototype.PerformCallback = function(data_or_parameter, onSuccess) {};
/**
 * @record
 * @struct
 */
function MVCxClientCardView() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientCardView.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to update the CardView by processing the passed information on the server, in an Action specified via the CardView's CustomActionRouteValues property.
 * Sends a callback with a parameter to update the CardView by processing the passed information on the server, in an Action specified via the CardView's CustomActionRouteValues property.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 *
 * @param {!Object|string} data_or_args An object containing any information that needs to be passed to a handling Action specified via the CardView's CustomActionRouteValues property. / A string value that represents any information that needs to be sent to the server-side CustomCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientCardView.prototype.PerformCallback = function(data_or_args, onSuccess) {};

/**
 * Sends a callback with a parameter to process the passed information on the server, in an Action specified via the CardView's CustomDataActionRouteValues property, and then process the returned result in the specified client function. This method does not update the CardView.
 * Sends a callback to the server and generates the server-side CustomDataCallback event.
 * @param {!Object|string} data_or_args An object containing any information that needs to be passed to a handling Action specified via the CustomDataActionRouteValues property. / A string value that is any information that needs to be sent to the server-side CustomDataCallback event.
 * @param {!ASPxClientCardViewValuesCallback} onCallback A ASPxClientCardViewValuesCallback object that represents the JavaScript function which receives the information on the client side. / An ASPxClientCardViewValuesCallback object that is the JavaScript function which receives the information on the client side.
 * @return {void}
 */
MVCxClientCardView.prototype.GetValuesOnCustomCallback = function(data_or_args, onCallback) {};
/**
 * @record
 * @struct
 */
function MVCxClientChart() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientChart.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to update a Chart by processing the passed information on the server, in an Action specified via the Chart's CustomActionRouteValues property.
 * Sends a callback with a parameter to update a Chart by processing the passed information on the server, in an Action specified via the Chart's CustomActionRouteValues property.
 * Sends a callback to the server and generates the server-side event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side event, passing it the specified argument.
 * @param {!Object|string} data_or_args An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property. / A string value that represents any information that needs to be sent to the server-side event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientChart.prototype.PerformCallback = function(data_or_args, onSuccess) {};
/**
 * @record
 * @struct
 */
function MVCxClientComboBox() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientComboBox.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to update the ComboBox by processing the passed information on the server, in an Action specified by the ComboBox's CallbackRouteValues property.
 * Sends a callback with a parameter to update the ComboBox by processing the passed information on the server, in an Action specified by the ComboBox's CallbackRouteValues property.
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * @param {!Object|string} data_or_parameter An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property. / A string value that represents any information that needs to be sent to the server-side Callback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientComboBox.prototype.PerformCallback = function(data_or_parameter, onSuccess) {};
/**
 * @record
 * @struct
 */
function MVCxClientDataView() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientDataView.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to update the DataView by processing the passed information on the server, in an Action specified via the DataView's CustomActionRouteValues property.
 * Sends a callback with a parameter to update the DataView by processing the passed information on the server, in an Action specified via the DataView's CustomActionRouteValues property.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * @param {!Object|string} data_or_parameter An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property. / A string value that represents any information that needs to be sent to the server-side CustomCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientDataView.prototype.PerformCallback = function(data_or_parameter, onSuccess) {};
/**
 * @record
 * @struct
 */
function MVCxClientDateEdit() {}
/**
 * @record
 * @struct
 */
function MVCxClientDockManager() {}

/**
 * Sends a callback with a parameter to update the DockManager by processing the passed information on the server, in an Action specified by the DockManager's CallbackRouteValues property.
 * Sends a callback with a parameter to update the DockManager by processing the passed information on the server, in an Action specified by the DockManager's CallbackRouteValues property.
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * @param {!Object|string} data_or_parameter An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property. / A string value that contains any information that needs to be sent to the server-side Callback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientDockManager.prototype.PerformCallback = function(data_or_parameter, onSuccess) {};
/**
 * @record
 * @struct
 */
function MVCxClientDockPanel() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientDockPanel.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to update the DockPanel by processing the passed information on the server, in an Action specified by the DockPanel's DockPanelSettings.CallbackRouteValues) property.
 * Sends a callback with a parameter to update the DockPanel by processing the passed information on the server, in an Action specified by the DockPanel's DockPanelSettings.CallbackRouteValues) property.
 * Sends a callback to the server and generates the server-side WindowCallback event, passing the specified argument to it.
 * @param {!Object|string} data_or_parameter An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property. / A string value that is any information that needs to be sent to the server-side WindowCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientDockPanel.prototype.PerformCallback = function(data_or_parameter, onSuccess) {};
/**
 * @record
 * @struct
 */
function MVCxClientFileManager() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientFileManager.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to update the FileManager by processing the passed information on the server, in an Action specified via the extension's CustomActionRouteValues property.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * @param {!Object|string} data_or_args An object containing any information that needs to be passed to a handling Action specified via the file manager's CustomActionRouteValues property. / A string value that specifies any information that needs to be sent to the server-side CustomCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientFileManager.prototype.PerformCallback = function(data_or_args, onSuccess) {};
/**
 * @record
 * @struct
 */
function MVCxClientGridView() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientGridView.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to update the GridView by processing the passed information on the server, in an Action specified via the grid's CustomActionRouteValues property.
 * Sends a callback with a parameter to update the GridView by processing the passed information on the server, in an Action specified via the grid's CustomActionRouteValues property.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 *
 * @param {!Object|string} data_or_args An object containing any information that needs to be passed to a handling Action specified via the grid's CustomActionRouteValues property. / A string value that represents any information that needs to be sent to the server-side CustomCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientGridView.prototype.PerformCallback = function(data_or_args, onSuccess) {};

/**
 * Sends a callback with a parameter to process the passed information on the server, in an Action specified via the GridView's CustomDataActionRouteValues property, and then process the returned result in the specified client function. This method does not update the GridView.
 * Sends a callback to the server and generates the server-side CustomDataCallback event.
 * @param {!Object|string} data_or_args An object containing any information that needs to be passed to a handling Action specified via the CustomDataActionRouteValues property. / A string value that is any information that needs to be sent to the server-side CustomDataCallback event.
 * @param {!ASPxClientGridViewValuesCallback} onCallback A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the information on the client side. / A ASPxClientGridViewValuesCallback object that is the JavaScript function which receives the information on the client side.
 * @return {void}
 */
MVCxClientGridView.prototype.GetValuesOnCustomCallback = function(data_or_args, onCallback) {};
/**
 * @record
 * @struct
 */
function MVCxClientHtmlEditor() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientHtmlEditor.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to process the passed information on the server, in an Action specified via the HtmlEditor's CustomDataCallback event on the client. This method does not update the HtmlEditor.
 * Sends a callback with a parameter to process the passed information on the server, in an Action specified via the HtmlEditor's CustomDataCallback event on the client. This method does not update the HtmlEditor.
 * Sends a callback to the server and generates the server-side CustomDataCallback event passing it the specified argument.
 * @param {!Object|string} data_or_parameter An object containing any information that needs to be passed to a handling Action specified via the CustomDataActionRouteValues property. / A string value that represents any information that needs to be sent to the server-side CustomDataCallback event.
 * @param {!ASPxClientDataCallback=} onCallback An ASPxClientDataCallback object that is the JavaScript function which receives the callback data as a parameter. / A ASPxClientDataCallback object that represents the JavaScript function which receives the callback data as a parameter.
 * @return {void}
 */
MVCxClientHtmlEditor.prototype.PerformDataCallback = function(data_or_parameter, onCallback) {};
/**
 * @record
 * @struct
 */
function MVCxClientImageGallery() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientImageGallery.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to update the ImageGallery by processing the passed information on the server, in an Action specified via the ImageGallery's CustomActionRouteValues property.
 * Sends a callback with a parameter to update the ImageGallery by processing the passed information on the server, in an Action specified via the ImageGallery's CustomActionRouteValues property.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * @param {!Object|string} data_or_parameter An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property. / A string value that represents any information that needs to be sent to the server-side CustomCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientImageGallery.prototype.PerformCallback = function(data_or_parameter, onSuccess) {};
/**
 * @record
 * @struct
 */
function MVCxClientListBox() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientListBox.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to update the ListBox by processing the passed information on the server, in an Action specified by the ListBox's CallbackRouteValues property.
 * Sends a callback with a parameter to update the ListBox by processing the passed information on the server, in an Action specified by the ListBox's CallbackRouteValues property.
 * Sends a callback to the server, and generates the server-side Callback event, passing it the specified argument.
 * @param {!Object|string} data_or_parameter An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property. / A string value that represents any information that needs to be sent to the server-side Callback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientListBox.prototype.PerformCallback = function(data_or_parameter, onSuccess) {};
/**
 * @record
 * @struct
 */
function MVCxClientNavBar() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientNavBar.prototype.BeginCallback;
/**
 * @record
 * @struct
 */
function MVCxClientPivotGrid() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientPivotGrid.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to update the PivotGrid by processing the passed information on the server, in an Action specified via the grid's CustomActionRouteValues property.
 * Sends a callback with a parameter to update the PivotGrid by processing the passed information on the server, in an Action specified via the grid's CustomActionRouteValues property.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * @param {!Object|string} data_or_args An object containing any information that needs to be passed to a handling Action specified via the grid's CustomActionRouteValues property. / A string value that represents any information that needs to be sent to the server-side CustomCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientPivotGrid.prototype.PerformCallback = function(data_or_args, onSuccess) {};

/**
 * Passes PivotGrid callback parameters to the specified object.
 * @param {!Object} obj An object that receives PivotGrid callback parameters.
 * @return {void}
 */
MVCxClientPivotGrid.prototype.FillStateObject = function(obj) {};
/**
 * @record
 * @struct
 */
function MVCxClientPopupControl() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientPopupControl.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to update the PopupControl by processing the passed information on the server, in an Action specified via the PopupControl's CallbackRouteValues property.
 * Sends a callback with a parameter to update the PopupControl by processing the passed information on the server, in an Action specified via the PopupControl's CallbackRouteValues property.
 * Sends a callback to the server and generates the server-side WindowCallback event, passing the specified argument to it.
 * @param {!Object|string} data_or_parameter An object containing any information that needs to be passed to a handling Action specified via the CallbackRouteValues property. / A string value that is any information that needs to be sent to the server-side WindowCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientPopupControl.prototype.PerformCallback = function(data_or_parameter, onSuccess) {};

/**
 * Sends a callback with a parameters to update the popup window by processing the related popup window and the passed information on the server, in an Action specified by the PopupControl's CallbackRouteValues property.
 *
 * Sends a callback with parameters to update the popup window by processing the related popup window and the passed information on the server.
 * @param {!ASPxClientPopupWindow} window A ASPxClientPopupWindow object identifying the processed popup window.
 * @param {!Object|string} data_or_parameter An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property. / A string value that represents any information that needs to be sent to the server-side CustomCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientPopupControl.prototype.PerformWindowCallback = function(window, data_or_parameter, onSuccess) {};
/**
 * @record
 * @struct
 */
function MVCxClientDocumentViewer() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeforeExportRequestEventHandler<?>>} */
MVCxClientDocumentViewer.prototype.BeforeExportRequest;
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientDocumentViewer.prototype.BeginCallback;
/**
 * @record
 * @struct
 */
function MVCxClientReportViewer() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientReportViewer.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!MVCxClientBeforeExportRequestEventHandler<?>>} */
MVCxClientReportViewer.prototype.BeforeExportRequest;
/**
 * @record
 * @struct
 */
function MVCxClientBeforeExportRequestEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function MVCxClientBeforeExportRequestEventArgs() {}
 /** @type {!Object} */
MVCxClientBeforeExportRequestEventArgs.prototype.customArgs;
/**
 * @record
 * @struct
 */
function MVCxClientReportDesigner() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientReportDesigner.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!MVCxClientReportDesignerSaveCommandExecutedEventHandler<?>>} */
MVCxClientReportDesigner.prototype.SaveCommandExecuted;

/**
 * Sends a callback to the server with the specified argument.
 * Sends a callback to the server and generates the server-side event, passing it the specified argument.
 * Sends a callback to the server with the specified argument.
 * Sends a callback to the server and generates the server-side event, passing it the specified argument.
 * @param {!Object|string} arg A Object value, specifying the callback argument. / A string value that represents any information that needs to be sent to the server-side event. / A String value, specifying the callback argument.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientReportDesigner.prototype.PerformCallback = function(arg, onSuccess) {};
/**
 * @record
 * @struct
 */
function MVCxClientReportDesignerSaveCommandExecutedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function MVCxClientReportDesignerSaveCommandExecutedEventArgs() {}
 /** @type {string} */
MVCxClientReportDesignerSaveCommandExecutedEventArgs.prototype.Result;
/**
 * @record
 * @struct
 */
function MVCxClientRichEdit() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientRichEdit.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to update the RichEdit by processing the passed information on the server, in an Action specified via the CustomActionRouteValues property.
 * Sends a callback with a parameter to update the RichEdit by processing the passed information on the server, in an Action specified via the CustomActionRouteValues property.
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * @param {!Object|string} data_or_parameter An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property. / A string value that represents any information that needs to be sent to the server-side event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientRichEdit.prototype.PerformCallback = function(data_or_parameter, onSuccess) {};
/**
 * @record
 * @struct
 */
function MVCxClientRoundPanel() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientRoundPanel.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to update the Round Panel by processing the passed information on the server, in an Action specified by the Round Panel's CallbackRouteValues property.
 * Sends a callback with a parameter to update the Round Panel by processing the passed information on the server, in an Action specified by the Round Panel's CallbackRouteValues property.
 * Sends a callback to the server and generates the server-side ContentCallback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side ContentCallback event, passing it the specified argument.
 * @param {!Object|string} data_or_parameter An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property. / A string value that is any information that needs to be sent to the server-side ContentCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientRoundPanel.prototype.PerformCallback = function(data_or_parameter, onSuccess) {};
/**
 * @record
 * @struct
 */
function MVCxClientScheduler() {}
 /** @type {!ASPxClientEvent<!MVCxClientSchedulerToolTipDisplayingEventHandler<?>>} */
MVCxClientScheduler.prototype.ToolTipDisplaying;
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientScheduler.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to update the Scheduler by processing the passed information on the server, in an Action specified via the Scheduler's CustomActionRouteValues property.
 * Sends a callback with a parameter to update the Scheduler by processing the passed information on the server, in an Action specified via the Scheduler's CustomActionRouteValues property.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument
 * @param {!Object|string} data_or_parameter An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property. / A string value that represents any information that needs to be sent to the server-side CustomCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientScheduler.prototype.PerformCallback = function(data_or_parameter, onSuccess) {};
/**
 * @extends {ASPxClientToolTipBase}
 * @record
 * @struct
 */
function MVCxClientSchedulerTemplateToolTip() {}
 /** @type {?} */
MVCxClientSchedulerTemplateToolTip.prototype.type;
/**
 * @record
 * @struct
 */
function MVCxClientSchedulerToolTipDisplayingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function MVCxClientSchedulerToolTipDisplayingEventArgs() {}
 /** @type {!MVCxClientSchedulerTemplateToolTip} */
MVCxClientSchedulerToolTipDisplayingEventArgs.prototype.toolTip;
 /** @type {!ASPxClientSchedulerToolTipData} */
MVCxClientSchedulerToolTipDisplayingEventArgs.prototype.data;
/**
 * @record
 * @struct
 */
function MVCxSchedulerToolTipType() {}
/**
 * @record
 * @struct
 */
function MVCxClientSpreadsheet() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientSpreadsheet.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to update the Spreadsheet by processing the passed information on the server, in an Action specified via the CustomActionRouteValues property.
 * Sends a callback with a parameter to update the Spreadsheet by processing the passed information on the server, in an Action specified via the CustomActionRouteValues property.
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * @param {!Object|string} data_or_parameter An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property. / A string value that represents any information that needs to be sent to the server-side event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientSpreadsheet.prototype.PerformCallback = function(data_or_parameter, onSuccess) {};
/**
 * @record
 * @struct
 */
function MVCxClientPageControl() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientPageControl.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to update the PageControl by processing the passed information on the server, in an Action specified by the PageControl's CallbackRouteValues property.
 * Sends a callback with a parameter to update the PageControl by processing the passed information on the server, in an Action specified by the PageControl's CallbackRouteValues property.
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * @param {!Object|string} data_or_parameter An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property. / A string value that represents any information that needs to be sent to the server-side Callback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientPageControl.prototype.PerformCallback = function(data_or_parameter, onSuccess) {};
/**
 * @record
 * @struct
 */
function MVCxClientTokenBox() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientTokenBox.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to update the TokenBox by processing the passed information on the server, in an Action specified by the TokenBox's CallbackRouteValues property.
 * Sends a callback with a parameter to update the TokenBox by processing the passed information on the server, in an Action specified by the TokenBox's CallbackRouteValues property.
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * @param {!Object|string} data_or_parameter An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property. / A string value that represents any information that needs to be sent to the server-side Callback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientTokenBox.prototype.PerformCallback = function(data_or_parameter, onSuccess) {};
/**
 * @record
 * @struct
 */
function MVCxClientTreeList() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientTreeList.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to update the TreeList by processing the passed information on the server, in an Action specified via the TreeList's CustomActionRouteValues property.
 * Sends a callback with a parameter to update the TreeList by processing the passed information on the server, in an Action specified via the TreeList's CustomActionRouteValues property.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * @param {!Object|string} data_or_args An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property. / A string value that represents any information that needs to be sent to the server-side CustomCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientTreeList.prototype.PerformCallback = function(data_or_args, onSuccess) {};

/**
 * Sends a callback with a parameter to process the passed information on the server, in an Action specified via the TreeList's CustomDataCallback event. This method does not update the TreeList.
 * Sends a callback to the server and generates the server-side CustomDataCallback event passing it the specified argument.
 * @param {!Object|string} data_or_arg An object containing any information that needs to be passed to a handling Action specified via the CustomDataActionRouteValues property. / A string value that represents any information that needs to be sent to the server-side CustomDataCallback event.
 * @return {void}
 */
MVCxClientTreeList.prototype.PerformCustomDataCallback = function(data_or_arg) {};
/**
 * @record
 * @struct
 */
function MVCxClientTreeView() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientTreeView.prototype.BeginCallback;
/**
 * @record
 * @struct
 */
function MVCxClientUploadControl() {}
/**
 * @record
 * @struct
 */
function MVCxClientBeginCallbackEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientBeginCallbackEventArgs}
 * @record
 * @struct
 */
function MVCxClientBeginCallbackEventArgs() {}
 /** @type {!Object} */
MVCxClientBeginCallbackEventArgs.prototype.customArgs;
/**
 * @record
 * @struct
 */
function MVCxClientGlobalBeginCallbackEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientGlobalBeginCallbackEventArgs}
 * @record
 * @struct
 */
function MVCxClientGlobalBeginCallbackEventArgs() {}
 /** @type {!Object} */
MVCxClientGlobalBeginCallbackEventArgs.prototype.customArgs;
/**
 * @record
 * @struct
 */
function MVCxClientGlobalEvents() {}
 /** @type {!ASPxClientEvent<!ASPxClientControlsInitializedEventHandler<?>>} */
MVCxClientGlobalEvents.prototype.ControlsInitialized;
 /** @type {!ASPxClientEvent<!MVCxClientGlobalBeginCallbackEventHandler<?>>} */
MVCxClientGlobalEvents.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientGlobalEndCallbackEventHandler<?>>} */
MVCxClientGlobalEvents.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientGlobalCallbackErrorEventHandler<?>>} */
MVCxClientGlobalEvents.prototype.CallbackError;
/**
 * @record
 * @struct
 */
function MVCxClientVerticalGrid() {}
 /** @type {!ASPxClientEvent<!MVCxClientBeginCallbackEventHandler<?>>} */
MVCxClientVerticalGrid.prototype.BeginCallback;

/**
 * Sends a callback with a parameter to update the VerticalGrid by processing the passed information on the server in an Action specified via the grid's CustomActionRouteValues property.
 * Sends a callback with a parameter to update the VerticalGrid by processing the passed information on the server in an Action specified via the grid's CustomActionRouteValues property.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 *
 * @param {!Object|string} data_or_args An object containing any information that needs to be passed to a handling Action specified via the grid's CustomActionRouteValues property. / A string value that represents any information that needs to be sent to the server-side CustomCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
MVCxClientVerticalGrid.prototype.PerformCallback = function(data_or_args, onSuccess) {};

/**
 * Sends a callback with a parameter to process the passed information on the server, in an Action specified via the VerticalGrid's CustomDataActionRouteValues property, and then process the returned result in the specified client function. This method does not update the VerticalGrid.
 * Sends a callback to the server and generates the server-side CustomDataCallback event.
 * @param {!Object|string} data_or_args An object containing any information that needs to be passed to a handling Action specified via the CustomDataActionRouteValues property. / A string value that is any information that needs to be sent to the server-side CustomDataCallback event.
 * @param {!ASPxClientGridViewValuesCallback|!ASPxClientVerticalGridValuesCallback} onCallback A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the information on the client side. / A ASPxClientVerticalGridValuesCallback object that is the JavaScript function which receives the information on the client side.
 * @return {void}
 */
MVCxClientVerticalGrid.prototype.GetValuesOnCustomCallback = function(data_or_args, onCallback) {};
/**
 * @record
 * @struct
 */
function MVCxClientWebDocumentViewer() {}
/**
 * @record
 * @struct
 */
function ASPxClientControlBase() {}
 /** @type {string} */
ASPxClientControlBase.prototype.name;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientControlBase.prototype.Init;

/**
 * Returns an HTML element that is the root of the control's hierarchy.
 * @return {!Object}
 */
ASPxClientControlBase.prototype.GetMainElement = function() {};

/**
 * Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
 * @param {string} message A String value that specifies a text.
 * @return {void}
 */
ASPxClientControlBase.prototype.SendMessageToAssistiveTechnology = function(message) {};

/**
 * Returns a value specifying whether a control is displayed.
 * @return {boolean}
 */
ASPxClientControlBase.prototype.GetClientVisible = function() {};

/**
 * Specifies whether a control is displayed.
 * @param {boolean} visible
 * @return {void}
 */
ASPxClientControlBase.prototype.SetClientVisible = function(visible) {};

/**
 * Returns a value specifying whether a control is displayed.
 * @return {boolean}
 */
ASPxClientControlBase.prototype.GetVisible = function() {};

/**
 * Specifies whether a control is displayed.
 * @param {boolean} visible true to make a control visible; false to make it hidden.
 * @return {void}
 */
ASPxClientControlBase.prototype.SetVisible = function(visible) {};

/**
 * Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
 * @return {boolean}
 */
ASPxClientControlBase.prototype.InCallback = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientControl() {}

/**
 * Returns the control's width.
 * @return {number}
 */
ASPxClientControl.prototype.GetWidth = function() {};

/**
 * Returns the control's height.
 * @return {number}
 */
ASPxClientControl.prototype.GetHeight = function() {};

/**
 * Specifies the control's width.
 * @param {number} width An integer value that specifies the control's width.
 * @return {void}
 */
ASPxClientControl.prototype.SetWidth = function(width) {};

/**
 * Specifies the control's height.   Note that this method is not in effect for some controls.
 * @param {number} height An integer value that specifies the control's height.
 * @return {void}
 */
ASPxClientControl.prototype.SetHeight = function(height) {};

/**
 * Modifies the control's size against the control's container.
 * @return {void}
 */
ASPxClientControl.prototype.AdjustControl = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientCallback() {}
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientCallback.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientCallback.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientCallback.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackCompleteEventHandler<?>>} */
ASPxClientCallback.prototype.CallbackComplete;

/**
 * Sends a callback to the server and generates the server-side Callback event passing it the specified argument.
 * @param {string} parameter A string value that represents any information that needs to be sent to the server-side Callback event.
 * @return {void}
 */
ASPxClientCallback.prototype.SendCallback = function(parameter) {};

/**
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * @param {string} parameter A string value that represents any information that needs to be sent to the server-side Callback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
ASPxClientCallback.prototype.PerformCallback = function(parameter, onSuccess) {};
/**
 * @record
 * @struct
 */
function ASPxClientCallbackCompleteEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientEventArgs() {}
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientCallbackCompleteEventArgs() {}
 /** @type {string} */
ASPxClientCallbackCompleteEventArgs.prototype.parameter;
 /** @type {string} */
ASPxClientCallbackCompleteEventArgs.prototype.result;
/**
 * @record
 * @struct
 */
function ASPxClientPanelBase() {}

/**
 * Returns the HTML code that is the content of the panel.
 * @return {string}
 */
ASPxClientPanelBase.prototype.GetContentHtml = function() {};

/**
 * Sets the HTML content for the panel.
 * @param {string} html A string value that is the HTML code defining the content of the panel.
 * @return {void}
 */
ASPxClientPanelBase.prototype.SetContentHtml = function(html) {};

/**
 * Sets a value specifying whether the panel is enabled.
 * @param {boolean} enabled true to enable the panel; false to disable it.
 * @return {void}
 */
ASPxClientPanelBase.prototype.SetEnabled = function(enabled) {};

/**
 * Returns a value specifying whether a panel is enabled.
 * @return {boolean}
 */
ASPxClientPanelBase.prototype.GetEnabled = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientPanel() {}
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientPanel.prototype.Collapsed;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientPanel.prototype.Expanded;

/**
 * Expands or collapses the client panel.
 * @return {void}
 */
ASPxClientPanel.prototype.Toggle = function() {};

/**
 * Returns a value specifying whether the panel can be expanded.
 * @return {boolean}
 */
ASPxClientPanel.prototype.IsExpandable = function() {};

/**
 * Returns a value specifying whether the panel is expanded.
 * @return {boolean}
 */
ASPxClientPanel.prototype.IsExpanded = function() {};

/**
 * Expands the collapsed panel.
 * @return {void}
 */
ASPxClientPanel.prototype.Expand = function() {};

/**
 * Collapses the expanded panel.
 * @return {void}
 */
ASPxClientPanel.prototype.Collapse = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientCallbackPanel() {}
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientCallbackPanel.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientCallbackPanel.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientCallbackPanel.prototype.CallbackError;

/**
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * @param {string} parameter A string value that represents any information that needs to be sent to the server-side Callback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
ASPxClientCallbackPanel.prototype.PerformCallback = function(parameter, onSuccess) {};

/**
 * Returns the text displayed within the control's loading panel.
 * @return {string}
 */
ASPxClientCallbackPanel.prototype.GetLoadingPanelText = function() {};

/**
 * Sets the text to be displayed within the control's loading panel.
 * @param {string} loadingPanelText A string value specifying the text to be displayed within the loading panel.
 * @return {void}
 */
ASPxClientCallbackPanel.prototype.SetLoadingPanelText = function(loadingPanelText) {};

/**
 * Sets a value specifying whether the callback panel is enabled.
 * @param {boolean} enabled true, to enable the callback panel; false to disable it.
 * @return {void}
 */
ASPxClientCallbackPanel.prototype.SetEnabled = function(enabled) {};

/**
 * Returns a value specifying whether a callback panel is enabled.
 * @return {boolean}
 */
ASPxClientCallbackPanel.prototype.GetEnabled = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientEvent() {}

/**
 * Dynamically connects the event with an appropriate event handler function.
 * @param {T} handler An object representing the event handling function's content.
 * @return {void}
 */
ASPxClientEvent.prototype.AddHandler = function(handler) {};

/**
 * Dynamically disconnects the event from the associated event handler function.
 * @param {T} handler An object representing the event handling function's content.
 * @return {void}
 */
ASPxClientEvent.prototype.RemoveHandler = function(handler) {};

/**
 * Dynamically disconnects the event from all the associated event handler functions.
 * @return {void}
 */
ASPxClientEvent.prototype.ClearHandlers = function() {};

/**
 * For internal use only.
 * @param {!Object} source
 * @param {!ASPxClientEventArgs} e
 * @return {void}
 */
ASPxClientEvent.prototype.FireEvent = function(source, e) {};
/**
 * @record
 * @struct
 */
function ASPxClientEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientCancelEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientCancelEventArgs() {}
 /** @type {boolean} */
ASPxClientCancelEventArgs.prototype.cancel;
/**
 * @record
 * @struct
 */
function ASPxClientProcessingModeEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientProcessingModeEventArgs() {}
 /** @type {boolean} */
ASPxClientProcessingModeEventArgs.prototype.processOnServer;
/**
 * @record
 * @struct
 */
function ASPxClientProcessingModeCancelEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientProcessingModeCancelEventArgs() {}
 /** @type {boolean} */
ASPxClientProcessingModeCancelEventArgs.prototype.cancel;
/**
 * @record
 * @struct
 */
function ASPxClientDataCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientCloudControl() {}
 /** @type {!ASPxClientEvent<!ASPxClientCloudControlItemEventHandler<?>>} */
ASPxClientCloudControl.prototype.ItemClick;
/**
 * @record
 * @struct
 */
function ASPxClientCloudControlItemEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientCloudControlItemEventArgs() {}
 /** @type {!Object} */
ASPxClientCloudControlItemEventArgs.prototype.name;
 /** @type {!Object} */
ASPxClientCloudControlItemEventArgs.prototype.htmlElement;
 /** @type {!Object} */
ASPxClientCloudControlItemEventArgs.prototype.htmlEvent;
/**
 * @record
 * @struct
 */
function ASPxClientBeginCallbackEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientBeginCallbackEventArgs() {}
 /** @type {string} */
ASPxClientBeginCallbackEventArgs.prototype.command;
/**
 * @record
 * @struct
 */
function ASPxClientGlobalBeginCallbackEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientBeginCallbackEventArgs}
 * @record
 * @struct
 */
function ASPxClientGlobalBeginCallbackEventArgs() {}
 /** @type {?} */
ASPxClientGlobalBeginCallbackEventArgs.prototype.control;
/**
 * @record
 * @struct
 */
function ASPxClientEndCallbackEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientEndCallbackEventArgs() {}
/**
 * @record
 * @struct
 */
function ASPxClientGlobalEndCallbackEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEndCallbackEventArgs}
 * @record
 * @struct
 */
function ASPxClientGlobalEndCallbackEventArgs() {}
 /** @type {?} */
ASPxClientGlobalEndCallbackEventArgs.prototype.control;
/**
 * @record
 * @struct
 */
function ASPxClientCustomDataCallbackEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientCustomDataCallbackEventArgs() {}
 /** @type {string} */
ASPxClientCustomDataCallbackEventArgs.prototype.result;
/**
 * @record
 * @struct
 */
function ASPxClientCallbackErrorEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientCallbackErrorEventArgs() {}
 /** @type {string} */
ASPxClientCallbackErrorEventArgs.prototype.message;
 /** @type {boolean} */
ASPxClientCallbackErrorEventArgs.prototype.handled;
/**
 * @record
 * @struct
 */
function ASPxClientGlobalCallbackErrorEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCallbackErrorEventArgs}
 * @record
 * @struct
 */
function ASPxClientGlobalCallbackErrorEventArgs() {}
 /** @type {?} */
ASPxClientGlobalCallbackErrorEventArgs.prototype.control;
/**
 * @record
 * @struct
 */
function ASPxClientValidationCompletedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientValidationCompletedEventArgs() {}
 /** @type {!Object} */
ASPxClientValidationCompletedEventArgs.prototype.container;
 /** @type {string} */
ASPxClientValidationCompletedEventArgs.prototype.validationGroup;
 /** @type {boolean} */
ASPxClientValidationCompletedEventArgs.prototype.invisibleControlsValidated;
 /** @type {boolean} */
ASPxClientValidationCompletedEventArgs.prototype.isValid;
 /** @type {?} */
ASPxClientValidationCompletedEventArgs.prototype.firstInvalidControl;
 /** @type {?} */
ASPxClientValidationCompletedEventArgs.prototype.firstVisibleInvalidControl;
/**
 * @record
 * @struct
 */
function ASPxClientControlsInitializedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientControlsInitializedEventArgs() {}
 /** @type {boolean} */
ASPxClientControlsInitializedEventArgs.prototype.isCallback;
/**
 * @record
 * @struct
 */
function ASPxClientControlPredicate() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientControlAction() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientControlCollection() {}
 /** @type {!ASPxClientEvent<!ASPxClientControlsInitializedEventHandler<!ASPxClientControlCollection>>} */
ASPxClientControlCollection.prototype.ControlsInitialized;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<!ASPxClientControlCollection>>} */
ASPxClientControlCollection.prototype.BrowserWindowResized;
 /** @type {!ASPxClientEvent<!ASPxClientGlobalBeginCallbackEventHandler<!ASPxClientControlCollection>>} */
ASPxClientControlCollection.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientGlobalEndCallbackEventHandler<!ASPxClientControlCollection>>} */
ASPxClientControlCollection.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientGlobalCallbackErrorEventHandler<!ASPxClientControlCollection>>} */
ASPxClientControlCollection.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ASPxClientValidationCompletedEventHandler<!ASPxClientControlCollection>>} */
ASPxClientControlCollection.prototype.ValidationCompleted;

/**
 * Returns a collection item identified by its unique hierarchically-qualified identifier.
 * @param {!Object} name A string value representing the hierarchically-qualified identifier of the required control.
 * @return {!Object}
 */
ASPxClientControlCollection.prototype.Get = function(name) {};

/**
 * Returns a DevExpress client control object identified by its unique hierarchically-qualified identifier (either ClientInstanceName or ClientID property value).
 * @param {string} name A string value that is the hierarchically-qualified identifier of the required DevExpress control.
 * @return {!Object}
 */
ASPxClientControlCollection.prototype.GetByName = function(name) {};

/**
 * Returns all controls in the collection that satisfy the specified predicate.
 * @param {!ASPxClientControlPredicate} predicate An ASPxClientControlPredicate object that is a predicate used to search for controls in the collection.
 * @return {!Array<!Object>}
 */
ASPxClientControlCollection.prototype.GetControlsByPredicate = function(predicate) {};

/**
 * Returns all controls of the specified type.
 * @param {!Object} type The object specifying the client control type.
 * @return {!Array<!Object>}
 */
ASPxClientControlCollection.prototype.GetControlsByType = function(type) {};

/**
 * Performs the specified action for each control in the collection.
 * @param {!ASPxClientControlAction} action An ASPxClientControlAction object specifying an action to perform.
 * @return {void}
 */
ASPxClientControlCollection.prototype.ForEachControl = function(action) {};
/**
 * @record
 * @struct
 */
function ASPxClientDataView() {}
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientDataView.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientDataView.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientDataView.prototype.CallbackError;

/**
 * Activates the specified page.
 * @param {number} pageIndex An integer value that specifies the active page's index.
 * @return {void}
 */
ASPxClientDataView.prototype.GotoPage = function(pageIndex) {};

/**
 * Gets the index of the page that is currently active.
 * @return {number}
 */
ASPxClientDataView.prototype.GetPageIndex = function() {};

/**
 * Gets the size of a single ASPxDataView's page.
 * @return {number}
 */
ASPxClientDataView.prototype.GetPageSize = function() {};

/**
 * Sets the size of a single ASPxDataView's page.
 * @param {number} pageSize An integer value that specifies the page size.
 * @return {void}
 */
ASPxClientDataView.prototype.SetPageSize = function(pageSize) {};

/**
 * Gets the number of pages into which the ASPxDataView's data is divided.
 * @return {number}
 */
ASPxClientDataView.prototype.GetPageCount = function() {};

/**
 * Activates the next page.
 * @return {void}
 */
ASPxClientDataView.prototype.NextPage = function() {};

/**
 * Activates the previous page.
 * @return {void}
 */
ASPxClientDataView.prototype.PrevPage = function() {};

/**
 * Activates the first page.
 * @return {void}
 */
ASPxClientDataView.prototype.FirstPage = function() {};

/**
 * Activates the last page.
 * @return {void}
 */
ASPxClientDataView.prototype.LastPage = function() {};

/**
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * @param {string} parameter A string value that represents any information that needs to be sent to the server-side CustomCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
ASPxClientDataView.prototype.PerformCallback = function(parameter, onSuccess) {};
/**
 * @record
 * @struct
 */
function ASPxClientDockingFilterPredicate() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientDockManager() {}
 /** @type {!ASPxClientEvent<!ASPxClientDockManagerProcessingModeCancelEventHandler<?>>} */
ASPxClientDockManager.prototype.BeforeDock;
 /** @type {!ASPxClientEvent<!ASPxClientDockManagerProcessingModeEventHandler<?>>} */
ASPxClientDockManager.prototype.AfterDock;
 /** @type {!ASPxClientEvent<!ASPxClientDockManagerProcessingModeCancelEventHandler<?>>} */
ASPxClientDockManager.prototype.BeforeFloat;
 /** @type {!ASPxClientEvent<!ASPxClientDockManagerProcessingModeEventHandler<?>>} */
ASPxClientDockManager.prototype.AfterFloat;
 /** @type {!ASPxClientEvent<!ASPxClientDockManagerEventHandler<?>>} */
ASPxClientDockManager.prototype.StartPanelDragging;
 /** @type {!ASPxClientEvent<!ASPxClientDockManagerEventHandler<?>>} */
ASPxClientDockManager.prototype.EndPanelDragging;
 /** @type {!ASPxClientEvent<!ASPxClientDockManagerCancelEventHandler<?>>} */
ASPxClientDockManager.prototype.PanelClosing;
 /** @type {!ASPxClientEvent<!ASPxClientDockManagerEventHandler<?>>} */
ASPxClientDockManager.prototype.PanelCloseUp;
 /** @type {!ASPxClientEvent<!ASPxClientDockManagerEventHandler<?>>} */
ASPxClientDockManager.prototype.PanelPopUp;
 /** @type {!ASPxClientEvent<!ASPxClientDockManagerEventHandler<?>>} */
ASPxClientDockManager.prototype.PanelShown;
 /** @type {!ASPxClientEvent<!ASPxClientDockManagerEventHandler<?>>} */
ASPxClientDockManager.prototype.PanelResize;

/**
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * @param {string} parameter A string value that contains any information that needs to be sent to the server-side Callback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
ASPxClientDockManager.prototype.PerformCallback = function(parameter, onSuccess) {};

/**
 * Returns a zone specified by its unique identifier (zoneUID).
 * @param {string} zoneUID A string value specifying the unique identifier of the zone.
 * @return {?}
 */
ASPxClientDockManager.prototype.GetZoneByUID = function(zoneUID) {};

/**
 * Returns a panel specified by its unique identifier (panelUID).
 * @param {string} panelUID A string value specifying the unique identifier of the panel.
 * @return {?}
 */
ASPxClientDockManager.prototype.GetPanelByUID = function(panelUID) {};

/**
 * Returns an array of panels contained in a page.
 * Returns an array of panels that are contained in a page and meet a specified criteria.
 * @param {!ASPxClientDockingFilterPredicate=} filterPredicate An ASPxClientDockingFilterPredicate delegate that defines a set of criteria and determines whether a panel meets those criteria.
 * @return {!Array<?>}
 */
ASPxClientDockManager.prototype.GetPanels = function(filterPredicate) {};

/**
 * Returns an array of zones contained in a page.
 * Returns an array of zones that are contained in a page and meet a specified criteria.
 * @param {!ASPxClientDockingFilterPredicate=} filterPredicate An ASPxClientDockingFilterPredicate delegate that defines a set of criteria and determines whether a zone meets those criteria.
 * @return {!Array<?>}
 */
ASPxClientDockManager.prototype.GetZones = function(filterPredicate) {};
/**
 * @record
 * @struct
 */
function ASPxClientDockManagerProcessingModeCancelEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientDockManagerProcessingModeCancelEventArgs() {}
 /** @type {?} */
ASPxClientDockManagerProcessingModeCancelEventArgs.prototype.panel;
 /** @type {?} */
ASPxClientDockManagerProcessingModeCancelEventArgs.prototype.zone;
/**
 * @record
 * @struct
 */
function ASPxClientDockManagerProcessingModeEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientDockManagerProcessingModeEventArgs() {}
 /** @type {?} */
ASPxClientDockManagerProcessingModeEventArgs.prototype.panel;
 /** @type {?} */
ASPxClientDockManagerProcessingModeEventArgs.prototype.zone;
/**
 * @record
 * @struct
 */
function ASPxClientDockManagerEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientDockManagerEventArgs() {}
 /** @type {?} */
ASPxClientDockManagerEventArgs.prototype.panel;
/**
 * @record
 * @struct
 */
function ASPxClientDockManagerCancelEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientDockManagerCancelEventArgs() {}
 /** @type {?} */
ASPxClientDockManagerCancelEventArgs.prototype.panel;
/**
 * @record
 * @struct
 */
function ASPxClientPopupControlBase() {}
 /** @type {!ASPxClientEvent<!ASPxClientPopupWindowEventHandler<?>>} */
ASPxClientPopupControlBase.prototype.BeforeResizing;
 /** @type {!ASPxClientEvent<!ASPxClientPopupWindowEventHandler<?>>} */
ASPxClientPopupControlBase.prototype.AfterResizing;
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientPopupControlBase.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientPopupControlBase.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientPopupControlBase.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ASPxClientPopupWindowCloseUpEventHandler<?>>} */
ASPxClientPopupControlBase.prototype.CloseUp;
 /** @type {!ASPxClientEvent<!ASPxClientPopupWindowCancelEventHandler<?>>} */
ASPxClientPopupControlBase.prototype.Closing;
 /** @type {!ASPxClientEvent<!ASPxClientPopupWindowEventHandler<?>>} */
ASPxClientPopupControlBase.prototype.PopUp;
 /** @type {!ASPxClientEvent<!ASPxClientPopupWindowResizeEventHandler<?>>} */
ASPxClientPopupControlBase.prototype.Resize;
 /** @type {!ASPxClientEvent<!ASPxClientPopupWindowEventHandler<?>>} */
ASPxClientPopupControlBase.prototype.Shown;
 /** @type {!ASPxClientEvent<!ASPxClientPopupWindowPinnedChangedEventHandler<?>>} */
ASPxClientPopupControlBase.prototype.PinnedChanged;

/**
 * Modifies a control's window size in accordance with the content.
 * @return {void}
 */
ASPxClientPopupControlBase.prototype.AdjustSize = function() {};

/**
 * Brings the window to the front of the z-order.
 * @return {void}
 */
ASPxClientPopupControlBase.prototype.BringToFront = function() {};

/**
 * Returns a value indicating whether the window is collapsed.
 * @return {boolean}
 */
ASPxClientPopupControlBase.prototype.GetCollapsed = function() {};

/**
 * Returns the HTML code that specifies the contents of the control's window.
 * @return {string}
 */
ASPxClientPopupControlBase.prototype.GetContentHtml = function() {};

/**
 * Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
 * @return {!Object}
 */
ASPxClientPopupControlBase.prototype.GetContentIFrame = function() {};

/**
 * Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
 * @return {!Object}
 */
ASPxClientPopupControlBase.prototype.GetContentIFrameWindow = function() {};

/**
 * Returns the URL pointing to the web page displayed within the control's window.
 * @return {string}
 */
ASPxClientPopupControlBase.prototype.GetContentUrl = function() {};

/**
 * Returns the URL pointing to the image displayed within the window footer by default.
 * @return {string}
 */
ASPxClientPopupControlBase.prototype.GetFooterImageUrl = function() {};

/**
 * Returns the URL where the web browser will navigate when the text or image is clicked within a window's footer.
 * @return {string}
 */
ASPxClientPopupControlBase.prototype.GetFooterNavigateUrl = function() {};

/**
 * Returns the text displayed within a window's footer.
 * @return {string}
 */
ASPxClientPopupControlBase.prototype.GetFooterText = function() {};

/**
 * Returns the URL pointing to the image displayed within the window header.
 * @return {string}
 */
ASPxClientPopupControlBase.prototype.GetHeaderImageUrl = function() {};

/**
 * Returns the URL where the web browser will navigate when the text or image is clicked within a window's header.
 * @return {string}
 */
ASPxClientPopupControlBase.prototype.GetHeaderNavigateUrl = function() {};

/**
 * Returns the text displayed within a window's header.
 * @return {string}
 */
ASPxClientPopupControlBase.prototype.GetHeaderText = function() {};

/**
 * Gets the width of the default window's (for ASPxPopupControl) or panel's (for ASPxDockPanel) content region.
 * @return {number}
 */
ASPxClientPopupControlBase.prototype.GetContentWidth = function() {};

/**
 * Gets the height of the default window's (for ASPxPopupControl) or panel's (for ASPxDockPanel) content region.
 * @return {number}
 */
ASPxClientPopupControlBase.prototype.GetContentHeight = function() {};

/**
 * Returns a value indicating whether the window is maximized.
 * @return {boolean}
 */
ASPxClientPopupControlBase.prototype.GetMaximized = function() {};

/**
 * Returns a value indicating whether the window is pinned.
 * @return {boolean}
 */
ASPxClientPopupControlBase.prototype.GetPinned = function() {};

/**
 * Sends a callback to the server and generates the server-side WindowCallback event, passing the specified argument to it.
 * @param {string} parameter A string value that is any information that needs to be sent to the server-side WindowCallback event.
 * @return {void}
 */
ASPxClientPopupControlBase.prototype.PerformCallback = function(parameter) {};

/**
 * Refreshes the content of the web page displayed within the control's window.
 * @return {void}
 */
ASPxClientPopupControlBase.prototype.RefreshContentUrl = function() {};

/**
 * Sets a value indicating whether the window is collapsed.
 * @param {boolean} value true, to collapse the window; otherwise, false.
 * @return {void}
 */
ASPxClientPopupControlBase.prototype.SetCollapsed = function(value) {};

/**
 * Sets the HTML markup specifying the contents of the control's window.
 * @param {string} html A string value that specifies the HTML markup.
 * @return {void}
 */
ASPxClientPopupControlBase.prototype.SetContentHtml = function(html) {};

/**
 * Sets the URL to point to the web page that should be loaded into, and displayed within the control's window.
 * @param {string} url A string value specifying the URL to the web page displayed within the control's window.
 * @return {void}
 */
ASPxClientPopupControlBase.prototype.SetContentUrl = function(url) {};

/**
 * Specifies the URL which points to the image displayed within the window footer by default.
 * @param {string} value A string value that is the URL for the image displayed within the window footer.
 * @return {void}
 */
ASPxClientPopupControlBase.prototype.SetFooterImageUrl = function(value) {};

/**
 * Specifies the URL where the web browser will navigate when the text or image is clicked within a window's footer.
 * @param {string} value A string value which specifies the required navigation location.
 * @return {void}
 */
ASPxClientPopupControlBase.prototype.SetFooterNavigateUrl = function(value) {};

/**
 * Specifies the text displayed within a window's footer.
 * @param {string} value A string value that specifies a window's footer text.
 * @return {void}
 */
ASPxClientPopupControlBase.prototype.SetFooterText = function(value) {};

/**
 * Specifies the URL which points to the image displayed within the window header.
 * @param {string} value A string value that is the URL to the image displayed within the header.
 * @return {void}
 */
ASPxClientPopupControlBase.prototype.SetHeaderImageUrl = function(value) {};

/**
 * Specifies the URL where the web browser will navigate when the text or image is clicked within a window's header.
 * @param {string} value A string value which specifies the required navigation location.
 * @return {void}
 */
ASPxClientPopupControlBase.prototype.SetHeaderNavigateUrl = function(value) {};

/**
 * Specifies the text displayed within a window's header.
 * @param {string} value A string value that specifies a window's header text.
 * @return {void}
 */
ASPxClientPopupControlBase.prototype.SetHeaderText = function(value) {};

/**
 * Sets a value indicating whether the window is maximized.
 * @param {boolean} value true. to maximize the window; otherwise, false.
 * @return {void}
 */
ASPxClientPopupControlBase.prototype.SetMaximized = function(value) {};

/**
 * Sets a value indicating whether the window is pinned.
 * @param {boolean} value true, to pin the window; otherwise, false.
 * @return {void}
 */
ASPxClientPopupControlBase.prototype.SetPinned = function(value) {};

/**
 * Invokes the control's window.
 * Invokes the control's window at the popup element with the specified index.
 * @param {number=} popupElementIndex An integer value specifying the zero-based index of the popup element.
 * @return {void}
 */
ASPxClientPopupControlBase.prototype.Show = function(popupElementIndex) {};

/**
 * Invokes the control's window and displays it over the specified HTML element.
 * @param {!Object} htmlElement An object specifying the HTML element relative to whose position the window is invoked.
 * @return {void}
 */
ASPxClientPopupControlBase.prototype.ShowAtElement = function(htmlElement) {};

/**
 * Invokes the control's window and displays it over an HTML element specified by its unique identifier.
 * @param {string} id A string value that specifies the hierarchically qualified identifier of an HTML element relative to whose position the window is invoked.
 * @return {void}
 */
ASPxClientPopupControlBase.prototype.ShowAtElementByID = function(id) {};

/**
 * Invokes the control's window at the specified position.
 * @param {number} x A integer value specifying the x-coordinate of the window's display position.
 * @param {number} y A integer value specifying the y-coordinate of the window's display position.
 * @return {void}
 */
ASPxClientPopupControlBase.prototype.ShowAtPos = function(x, y) {};

/**
 * Closes the control's window.
 * @return {void}
 */
ASPxClientPopupControlBase.prototype.Hide = function() {};

/**
 * Returns a value that specifies whether the control's window is displayed.
 * @return {boolean}
 */
ASPxClientPopupControlBase.prototype.IsVisible = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientDockPanel() {}
 /** @type {string} */
ASPxClientDockPanel.prototype.panelUID;
 /** @type {!ASPxClientEvent<!ASPxClientDockPanelProcessingModeCancelEventHandler<?>>} */
ASPxClientDockPanel.prototype.BeforeDock;
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientDockPanel.prototype.AfterDock;
 /** @type {!ASPxClientEvent<!ASPxClientDockPanelProcessingModeCancelEventHandler<?>>} */
ASPxClientDockPanel.prototype.BeforeFloat;
 /** @type {!ASPxClientEvent<!ASPxClientDockPanelProcessingModeEventHandler<?>>} */
ASPxClientDockPanel.prototype.AfterFloat;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientDockPanel.prototype.StartDragging;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientDockPanel.prototype.EndDragging;

/**
 * Retrieves a zone that owns the current panel.
 * @return {?}
 */
ASPxClientDockPanel.prototype.GetOwnerZone = function() {};

/**
 * Docks the current panel in the specified zone.
 * Docks the current panel in a zone at the specified position.
 * @param {?} zone An ASPxClientDockZone object specifying the zone. / An ASPxClientDockZone object specifying the zone, where the panel is docked
 * @param {number=} visibleIndex An integer value specifying the visible index position.
 * @return {void}
 */
ASPxClientDockPanel.prototype.Dock = function(zone, visibleIndex) {};

/**
 * Undocks the current panel.
 * Undocks the current panel and place it at the specified position.
 * @param {number=} x An integer value that specifies the X-coordinate of the panel's display position.
 * @param {number=} y An integer value that specifies the Y-coordinate of the panel's display position.
 * @return {void}
 */
ASPxClientDockPanel.prototype.MakeFloat = function(x, y) {};

/**
 * Gets or sets a value specifying the position of the current panel, amongst the visible panels within a zone.
 * @return {number}
 */
ASPxClientDockPanel.prototype.GetVisibleIndex = function() {};

/**
 * Sets a value specifying the position of the current panel, amongst the visible panels in a zone.
 * @param {number} visibleIndex An integer value specifying the zero-based index of the panel amongst visible panels in the zone.
 * @return {void}
 */
ASPxClientDockPanel.prototype.SetVisibleIndex = function(visibleIndex) {};

/**
 * Returns a value indicating whether the panel is docked.
 * @return {boolean}
 */
ASPxClientDockPanel.prototype.IsDocked = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientDockPanelProcessingModeCancelEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientDockPanelProcessingModeCancelEventArgs() {}
 /** @type {?} */
ASPxClientDockPanelProcessingModeCancelEventArgs.prototype.zone;
/**
 * @record
 * @struct
 */
function ASPxClientDockPanelProcessingModeEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientDockPanelProcessingModeEventArgs() {}
 /** @type {?} */
ASPxClientDockPanelProcessingModeEventArgs.prototype.zone;
/**
 * @record
 * @struct
 */
function ASPxClientDockZone() {}
 /** @type {string} */
ASPxClientDockZone.prototype.zoneUID;
 /** @type {!ASPxClientEvent<!ASPxClientDockZoneCancelEventHandler<?>>} */
ASPxClientDockZone.prototype.BeforeDock;
 /** @type {!ASPxClientEvent<!ASPxClientDockZoneProcessingModeEventHandler<?>>} */
ASPxClientDockZone.prototype.AfterDock;

/**
 * Returns a value that indicates the orientation in which panels are stacked in the current zone.
 * @return {boolean}
 */
ASPxClientDockZone.prototype.IsVertical = function() {};

/**
 * Gets a value that indicates whether the zone can enlarge its size.
 * @return {boolean}
 */
ASPxClientDockZone.prototype.GetAllowGrowing = function() {};

/**
 * Gets the number of panels contained in the zone.
 * @return {number}
 */
ASPxClientDockZone.prototype.GetPanelCount = function() {};

/**
 * Returns a panel specified by its unique identifier (panelUID).
 * @param {string} panelUID A string value specifying the unique identifier of the panel.
 * @return {?}
 */
ASPxClientDockZone.prototype.GetPanelByUID = function(panelUID) {};

/**
 * Returns a panel specified by its visible index.
 * @param {number} visibleIndex An integer value specifying the panel's position among the visible panels within the current zone.
 * @return {?}
 */
ASPxClientDockZone.prototype.GetPanelByVisibleIndex = function(visibleIndex) {};

/**
 * Returns an array of panels docked in the current zone.
 * Returns an array of panels that are docked in the current zone and meet a specified criteria.
 * @param {!ASPxClientDockingFilterPredicate=} filterPredicate An ASPxClientDockingFilterPredicate delegate that defines a set of criteria and determines whether a panel meets those criteria.
 * @return {!Array<?>}
 */
ASPxClientDockZone.prototype.GetPanels = function(filterPredicate) {};
/**
 * @record
 * @struct
 */
function ASPxClientDockZoneCancelEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientDockZoneCancelEventArgs() {}
 /** @type {?} */
ASPxClientDockZoneCancelEventArgs.prototype.panel;
/**
 * @record
 * @struct
 */
function ASPxClientDockZoneProcessingModeEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientDockZoneProcessingModeEventArgs() {}
 /** @type {?} */
ASPxClientDockZoneProcessingModeEventArgs.prototype.panel;
/**
 * @record
 * @struct
 */
function ASPxClientFileManager() {}
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientFileManager.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientFileManager.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientFileManager.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerFileEventHandler<?>>} */
ASPxClientFileManager.prototype.SelectedFileChanged;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerFileOpenedEventHandler<?>>} */
ASPxClientFileManager.prototype.SelectedFileOpened;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerFocusedItemChangedEventHandler<?>>} */
ASPxClientFileManager.prototype.FocusedItemChanged;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerSelectionChangedEventHandler<?>>} */
ASPxClientFileManager.prototype.SelectionChanged;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerCurrentFolderChangedEventHandler<?>>} */
ASPxClientFileManager.prototype.CurrentFolderChanged;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerItemEditingEventHandler<?>>} */
ASPxClientFileManager.prototype.FolderCreating;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerItemCreatedEventHandler<?>>} */
ASPxClientFileManager.prototype.FolderCreated;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerItemEditingEventHandler<?>>} */
ASPxClientFileManager.prototype.ItemRenaming;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerItemRenamedEventHandler<?>>} */
ASPxClientFileManager.prototype.ItemRenamed;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerItemEditingEventHandler<?>>} */
ASPxClientFileManager.prototype.ItemDeleting;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerItemDeletedEventHandler<?>>} */
ASPxClientFileManager.prototype.ItemDeleted;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerItemsDeletedEventHandler<?>>} */
ASPxClientFileManager.prototype.ItemsDeleted;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerItemEditingEventHandler<?>>} */
ASPxClientFileManager.prototype.ItemMoving;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerItemMovedEventHandler<?>>} */
ASPxClientFileManager.prototype.ItemMoved;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerItemsMovedEventHandler<?>>} */
ASPxClientFileManager.prototype.ItemsMoved;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerItemEditingEventHandler<?>>} */
ASPxClientFileManager.prototype.ItemCopying;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerItemCopiedEventHandler<?>>} */
ASPxClientFileManager.prototype.ItemCopied;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerItemsCopiedEventHandler<?>>} */
ASPxClientFileManager.prototype.ItemsCopied;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerErrorEventHandler<?>>} */
ASPxClientFileManager.prototype.ErrorOccurred;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerErrorAlertDisplayingEventHandler<?>>} */
ASPxClientFileManager.prototype.ErrorAlertDisplaying;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerCustomCommandEventHandler<?>>} */
ASPxClientFileManager.prototype.CustomCommand;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerToolbarUpdatingEventHandler<?>>} */
ASPxClientFileManager.prototype.ToolbarUpdating;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerHighlightItemTemplateEventHandler<?>>} */
ASPxClientFileManager.prototype.HighlightItemTemplate;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerFileUploadingEventHandler<?>>} */
ASPxClientFileManager.prototype.FileUploading;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerFilesUploadingEventHandler<?>>} */
ASPxClientFileManager.prototype.FilesUploading;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerFileUploadedEventHandler<?>>} */
ASPxClientFileManager.prototype.FileUploaded;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerFilesUploadedEventHandler<?>>} */
ASPxClientFileManager.prototype.FilesUploaded;
 /** @type {!ASPxClientEvent<!ASPxClientFileManagerFileDownloadingEventHandler<?>>} */
ASPxClientFileManager.prototype.FileDownloading;

/**
 * Gets the name of the currently active file manager area.
 * @return {string}
 */
ASPxClientFileManager.prototype.GetActiveAreaName = function() {};

/**
 * Client-side scripting method which initiates a round trip to the server, so that the current page will be reloaded.
 * @return {void}
 */
ASPxClientFileManager.prototype.Refresh = function() {};

/**
 * Executes the specified command.
 * @param {string} commandName A string value that specifies the command to perform.
 * @return {boolean}
 */
ASPxClientFileManager.prototype.ExecuteCommand = function(commandName) {};

/**
 * Returns the selected file within the ASPxFileManager control's file container.
 * @return {!ASPxClientFileManagerFile}
 */
ASPxClientFileManager.prototype.GetSelectedFile = function() {};

/**
 * Returns an array of the file manager's selected items.
 * @return {!Array<!ASPxClientFileManagerFile>}
 */
ASPxClientFileManager.prototype.GetSelectedItems = function() {};

/**
 * Returns a list of files that are loaded on the current page.
 * @return {!Array<!ASPxClientFileManagerFile>}
 */
ASPxClientFileManager.prototype.GetItems = function() {};

/**
 * Sends a callback to the server and returns a list of files that are contained within the current folder.
 * @param {!ASPxClientFileManagerAllItemsCallback} onCallback A  object that represents the JavaScript function which receives the list of row values as a parameter.
 * @return {void}
 */
ASPxClientFileManager.prototype.GetAllItems = function(onCallback) {};

/**
 * Returns a toolbar item specified by its command name.
 * @param {string} commandName A string value specifying the command name of the item.
 * @return {!ASPxClientFileManagerToolbarItem}
 */
ASPxClientFileManager.prototype.GetToolbarItemByCommandName = function(commandName) {};

/**
 * Returns a context menu item specified by its command name.
 * @param {string} commandName A string value specifying the command name of the item.
 * @return {!ASPxClientFileManagerToolbarItem}
 */
ASPxClientFileManager.prototype.GetContextMenuItemByCommandName = function(commandName) {};

/**
 * Gets the current folder's path.
 * Gets the current folder's path with the specified separator.
 * Gets the current folder's path with the specified settings.
 * @param {string=} separator A string value that specifies the separator between the folder's name within a path. / A string value that specifies the separator between the folder's name within the path.
 * @param {boolean=} skipRootFolder true to skip the root folder; otherwise, false.
 * @return {string}
 */
ASPxClientFileManager.prototype.GetCurrentFolderPath = function(separator, skipRootFolder) {};

/**
 * Sets the current folder's path.
 * @param {string} path A String value that is the relative path to the folder (without the root folder).
 * @param {!ASPxClientFileManagerCallback} onCallback A ASPxClientFileManagerCallback object that is the JavaScript function that receives the callback data as a parameter.
 * @return {void}
 */
ASPxClientFileManager.prototype.SetCurrentFolderPath = function(path, onCallback) {};

/**
 * Gets the current folder's ID.
 * @return {string}
 */
ASPxClientFileManager.prototype.GetCurrentFolderId = function() {};

/**
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * @param {string} args A string value that specifies any information that needs to be sent to the server-side CustomCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
ASPxClientFileManager.prototype.PerformCallback = function(args, onSuccess) {};
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerItem() {}
 /** @type {string} */
ASPxClientFileManagerItem.prototype.name;
 /** @type {string} */
ASPxClientFileManagerItem.prototype.id;
 /** @type {boolean} */
ASPxClientFileManagerItem.prototype.isFolder;

/**
 * Specifies whether the file manager item is selected.
 * @param {boolean} selected true, to select the item; otherwise, false.
 * @return {void}
 */
ASPxClientFileManagerItem.prototype.SetSelected = function(selected) {};

/**
 * Gets a value indicating whether the item is selected in the file manager.
 * @return {boolean}
 */
ASPxClientFileManagerItem.prototype.IsSelected = function() {};

/**
 * Gets the current item's full name.
 * Gets the current item's full name with the specified separator.
 * Gets the current item's full name with the specified settings.
 * @param {string=} separator A string value that specifies the separator between the folder name inside the item's full name.
 * @param {boolean=} skipRootFolder true, to skip the root folder; otherwise, false.
 * @return {string}
 */
ASPxClientFileManagerItem.prototype.GetFullName = function(separator, skipRootFolder) {};
/**
 * @extends {ASPxClientFileManagerItem}
 * @record
 * @struct
 */
function ASPxClientFileManagerFile() {}

/**
 * Downloads a file from a file manager.
 * @return {void}
 */
ASPxClientFileManagerFile.prototype.Download = function() {};
/**
 * @extends {ASPxClientFileManagerItem}
 * @record
 * @struct
 */
function ASPxClientFileManagerFolder() {}
 /** @type {boolean} */
ASPxClientFileManagerFolder.prototype.isParentFolder;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerAllItemsCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerFileEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientFileManagerFileEventArgs() {}
 /** @type {!ASPxClientFileManagerFile} */
ASPxClientFileManagerFileEventArgs.prototype.file;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerFileOpenedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientFileManagerFileEventArgs}
 * @record
 * @struct
 */
function ASPxClientFileManagerFileOpenedEventArgs() {}
 /** @type {boolean} */
ASPxClientFileManagerFileOpenedEventArgs.prototype.processOnServer;
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientFileManagerActionEventArgsBase() {}
 /** @type {string} */
ASPxClientFileManagerActionEventArgsBase.prototype.fullName;
 /** @type {string} */
ASPxClientFileManagerActionEventArgsBase.prototype.name;
 /** @type {boolean} */
ASPxClientFileManagerActionEventArgsBase.prototype.isFolder;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerItemEditingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientFileManagerActionEventArgsBase}
 * @record
 * @struct
 */
function ASPxClientFileManagerItemEditingEventArgs() {}
 /** @type {boolean} */
ASPxClientFileManagerItemEditingEventArgs.prototype.cancel;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerItemRenamedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientFileManagerActionEventArgsBase}
 * @record
 * @struct
 */
function ASPxClientFileManagerItemRenamedEventArgs() {}
 /** @type {string} */
ASPxClientFileManagerItemRenamedEventArgs.prototype.oldName;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerItemDeletedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientFileManagerActionEventArgsBase}
 * @record
 * @struct
 */
function ASPxClientFileManagerItemDeletedEventArgs() {}
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerItemsDeletedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientFileManagerItemsDeletedEventArgs() {}
 /** @type {!Array<!ASPxClientFileManagerItem>} */
ASPxClientFileManagerItemsDeletedEventArgs.prototype.items;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerItemMovedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientFileManagerActionEventArgsBase}
 * @record
 * @struct
 */
function ASPxClientFileManagerItemMovedEventArgs() {}
 /** @type {string} */
ASPxClientFileManagerItemMovedEventArgs.prototype.oldFolderFullName;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerItemsMovedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientFileManagerItemsMovedEventArgs() {}
 /** @type {!Array<!ASPxClientFileManagerItem>} */
ASPxClientFileManagerItemsMovedEventArgs.prototype.items;
 /** @type {string} */
ASPxClientFileManagerItemsMovedEventArgs.prototype.oldFolderFullName;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerItemCopiedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientFileManagerActionEventArgsBase}
 * @record
 * @struct
 */
function ASPxClientFileManagerItemCopiedEventArgs() {}
 /** @type {string} */
ASPxClientFileManagerItemCopiedEventArgs.prototype.oldFolderFullName;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerItemsCopiedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientFileManagerItemsCopiedEventArgs() {}
 /** @type {!Array<!ASPxClientFileManagerItem>} */
ASPxClientFileManagerItemsCopiedEventArgs.prototype.items;
 /** @type {string} */
ASPxClientFileManagerItemsCopiedEventArgs.prototype.oldFolderFullName;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerItemCreatedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientFileManagerActionEventArgsBase}
 * @record
 * @struct
 */
function ASPxClientFileManagerItemCreatedEventArgs() {}
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerErrorEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientFileManagerErrorEventArgs() {}
 /** @type {string} */
ASPxClientFileManagerErrorEventArgs.prototype.commandName;
 /** @type {string} */
ASPxClientFileManagerErrorEventArgs.prototype.errorText;
 /** @type {boolean} */
ASPxClientFileManagerErrorEventArgs.prototype.showAlert;
 /** @type {number} */
ASPxClientFileManagerErrorEventArgs.prototype.errorCode;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerErrorAlertDisplayingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientFileManagerErrorAlertDisplayingEventArgs() {}
 /** @type {string} */
ASPxClientFileManagerErrorAlertDisplayingEventArgs.prototype.commandName;
 /** @type {string} */
ASPxClientFileManagerErrorAlertDisplayingEventArgs.prototype.errorText;
 /** @type {boolean} */
ASPxClientFileManagerErrorAlertDisplayingEventArgs.prototype.showAlert;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerFileUploadingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientFileManagerFileUploadingEventArgs() {}
 /** @type {string} */
ASPxClientFileManagerFileUploadingEventArgs.prototype.folder;
 /** @type {string} */
ASPxClientFileManagerFileUploadingEventArgs.prototype.fileName;
 /** @type {boolean} */
ASPxClientFileManagerFileUploadingEventArgs.prototype.cancel;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerFilesUploadingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientFileManagerFilesUploadingEventArgs() {}
 /** @type {string} */
ASPxClientFileManagerFilesUploadingEventArgs.prototype.folder;
 /** @type {!Array<string>} */
ASPxClientFileManagerFilesUploadingEventArgs.prototype.fileNames;
 /** @type {boolean} */
ASPxClientFileManagerFilesUploadingEventArgs.prototype.cancel;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerFileUploadedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientFileManagerFileUploadedEventArgs() {}
 /** @type {string} */
ASPxClientFileManagerFileUploadedEventArgs.prototype.folder;
 /** @type {string} */
ASPxClientFileManagerFileUploadedEventArgs.prototype.fileName;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerFilesUploadedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientFileManagerFilesUploadedEventArgs() {}
 /** @type {string} */
ASPxClientFileManagerFilesUploadedEventArgs.prototype.folder;
 /** @type {!Array<string>} */
ASPxClientFileManagerFilesUploadedEventArgs.prototype.fileNames;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerFileDownloadingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientFileManagerFileEventArgs}
 * @record
 * @struct
 */
function ASPxClientFileManagerFileDownloadingEventArgs() {}
 /** @type {boolean} */
ASPxClientFileManagerFileDownloadingEventArgs.prototype.cancel;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerFocusedItemChangedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientFileManagerFocusedItemChangedEventArgs() {}
 /** @type {!ASPxClientFileManagerItem} */
ASPxClientFileManagerFocusedItemChangedEventArgs.prototype.item;
 /** @type {string} */
ASPxClientFileManagerFocusedItemChangedEventArgs.prototype.name;
 /** @type {string} */
ASPxClientFileManagerFocusedItemChangedEventArgs.prototype.fullName;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerCurrentFolderChangedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientFileManagerCurrentFolderChangedEventArgs() {}
 /** @type {string} */
ASPxClientFileManagerCurrentFolderChangedEventArgs.prototype.name;
 /** @type {string} */
ASPxClientFileManagerCurrentFolderChangedEventArgs.prototype.fullName;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerSelectionChangedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientFileManagerSelectionChangedEventArgs() {}
 /** @type {!ASPxClientFileManagerItem} */
ASPxClientFileManagerSelectionChangedEventArgs.prototype.item;
 /** @type {string} */
ASPxClientFileManagerSelectionChangedEventArgs.prototype.name;
 /** @type {string} */
ASPxClientFileManagerSelectionChangedEventArgs.prototype.fullName;
 /** @type {boolean} */
ASPxClientFileManagerSelectionChangedEventArgs.prototype.isSelected;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerCustomCommandEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientFileManagerCustomCommandEventArgs() {}
 /** @type {string} */
ASPxClientFileManagerCustomCommandEventArgs.prototype.commandName;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerToolbarUpdatingEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientFileManagerToolbarUpdatingEventArgs() {}
 /** @type {string} */
ASPxClientFileManagerToolbarUpdatingEventArgs.prototype.activeAreaName;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerHighlightItemTemplateEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientFileManagerHighlightItemTemplateEventArgs() {}
 /** @type {string} */
ASPxClientFileManagerHighlightItemTemplateEventArgs.prototype.filterValue;
 /** @type {string} */
ASPxClientFileManagerHighlightItemTemplateEventArgs.prototype.itemName;
 /** @type {string} */
ASPxClientFileManagerHighlightItemTemplateEventArgs.prototype.templateElement;
 /** @type {string} */
ASPxClientFileManagerHighlightItemTemplateEventArgs.prototype.highlightCssClassName;
/**
 * @record
 * @struct
 */
function ASPxClientMenuItem() {}
 /** @type {?} */
ASPxClientMenuItem.prototype.menu;
 /** @type {!ASPxClientMenuItem} */
ASPxClientMenuItem.prototype.parent;
 /** @type {number} */
ASPxClientMenuItem.prototype.index;
 /** @type {string} */
ASPxClientMenuItem.prototype.name;
 /** @type {string} */
ASPxClientMenuItem.prototype.indexPath;

/**
 * Returns the number of the current menu item's immediate child items.
 * @return {number}
 */
ASPxClientMenuItem.prototype.GetItemCount = function() {};

/**
 * Returns the current menu item's immediate subitem specified by its index.
 * @param {number} index An integer value specifying the zero-based index of the submenu item to be retrieved.
 * @return {!ASPxClientMenuItem}
 */
ASPxClientMenuItem.prototype.GetItem = function(index) {};

/**
 * Returns the current menu item's subitem specified by its name.
 * @param {string} name A string value specifying the name of the menu item.
 * @return {!ASPxClientMenuItem}
 */
ASPxClientMenuItem.prototype.GetItemByName = function(name) {};

/**
 * Indicates whether the menu item is checked.
 * @return {boolean}
 */
ASPxClientMenuItem.prototype.GetChecked = function() {};

/**
 * Specifies whether the menu item is checked.
 * @param {boolean} value true if the menu item is checked; otherwise, false.
 * @return {void}
 */
ASPxClientMenuItem.prototype.SetChecked = function(value) {};

/**
 * Returns a value specifying whether a menu item is enabled.
 * @return {boolean}
 */
ASPxClientMenuItem.prototype.GetEnabled = function() {};

/**
 * Specifies whether the menu item is enabled.
 * @param {boolean} value true to enable the menu item; otherwise, false.
 * @return {void}
 */
ASPxClientMenuItem.prototype.SetEnabled = function(value) {};

/**
 * Returns the URL pointing to the image displayed within the menu item.
 * @return {string}
 */
ASPxClientMenuItem.prototype.GetImageUrl = function() {};

/**
 * Sets the URL which points to the image displayed within the menu item.
 * @param {string} value A string value specifying the URL to the image displayed within the menu item.
 * @return {void}
 */
ASPxClientMenuItem.prototype.SetImageUrl = function(value) {};

/**
 * Gets a URL which defines the navigation location for the menu item.
 * @return {string}
 */
ASPxClientMenuItem.prototype.GetNavigateUrl = function() {};

/**
 * Specifies a URL which defines the navigation location for the menu item.
 * @param {string} value A string value which specifies a URL to where the client web browser will navigate when the menu item is clicked.
 * @return {void}
 */
ASPxClientMenuItem.prototype.SetNavigateUrl = function(value) {};

/**
 * Returns text displayed within the menu item.
 * @return {string}
 */
ASPxClientMenuItem.prototype.GetText = function() {};

/**
 * Sets the text to be displayed within the menu item.
 * @param {string} value A string value specifying the text to be displayed within the menu item.
 * @return {void}
 */
ASPxClientMenuItem.prototype.SetText = function(value) {};

/**
 * Returns a value specifying whether a menu item is displayed.
 * @return {boolean}
 */
ASPxClientMenuItem.prototype.GetVisible = function() {};

/**
 * Specifies the menu item's visibility.
 * @param {boolean} value true if the menu item is visible; otherwise, false.
 * @return {void}
 */
ASPxClientMenuItem.prototype.SetVisible = function(value) {};
/**
 * @extends {ASPxClientMenuItem}
 * @record
 * @struct
 */
function ASPxClientFileManagerToolbarItem() {}
 /** @type {?} */
ASPxClientFileManagerToolbarItem.prototype.menu;
 /** @type {!ASPxClientMenuItem} */
ASPxClientFileManagerToolbarItem.prototype.parent;
 /** @type {number} */
ASPxClientFileManagerToolbarItem.prototype.index;
/**
 * @record
 * @struct
 */
function ASPxClientLayoutItem() {}
 /** @type {?} */
ASPxClientLayoutItem.prototype.formLayout;
 /** @type {string} */
ASPxClientLayoutItem.prototype.name;
 /** @type {!ASPxClientLayoutItem} */
ASPxClientLayoutItem.prototype.parent;

/**
 * Returns the current layout item's subitem specified by its name.
 * @param {string} name A string value specifying the name of the layout item.
 * @return {!ASPxClientLayoutItem}
 */
ASPxClientLayoutItem.prototype.GetItemByName = function(name) {};

/**
 * Returns a value specifying whether a layout item is displayed.
 * @return {boolean}
 */
ASPxClientLayoutItem.prototype.GetVisible = function() {};

/**
 * Specifies the layout item's visibility.
 * @param {boolean} value true, if the layout item is visible; otherwise, false.
 * @return {void}
 */
ASPxClientLayoutItem.prototype.SetVisible = function(value) {};

/**
 * Specifies the text displayed in the layout item caption.
 * @param {string} caption A string value specifying the item caption.
 * @return {void}
 */
ASPxClientLayoutItem.prototype.SetCaption = function(caption) {};

/**
 * Returns the text displayed in the layout item caption.
 * @return {string}
 */
ASPxClientLayoutItem.prototype.GetCaption = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientFormLayout() {}

/**
 * Returns an item specified by its name.
 * @param {string} name A string value specifying the name of the item.
 * @return {!ASPxClientLayoutItem}
 */
ASPxClientFormLayout.prototype.GetItemByName = function(name) {};
/**
 * @record
 * @struct
 */
function ASPxClientGlobalEvents() {}
 /** @type {!ASPxClientEvent<!ASPxClientControlsInitializedEventHandler<!ASPxClientGlobalEvents>>} */
ASPxClientGlobalEvents.prototype.ControlsInitialized;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<!ASPxClientGlobalEvents>>} */
ASPxClientGlobalEvents.prototype.BrowserWindowResized;
 /** @type {!ASPxClientEvent<!ASPxClientGlobalBeginCallbackEventHandler<!ASPxClientGlobalEvents>>} */
ASPxClientGlobalEvents.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientGlobalEndCallbackEventHandler<!ASPxClientGlobalEvents>>} */
ASPxClientGlobalEvents.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientGlobalCallbackErrorEventHandler<!ASPxClientGlobalEvents>>} */
ASPxClientGlobalEvents.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ASPxClientValidationCompletedEventHandler<!ASPxClientGlobalEvents>>} */
ASPxClientGlobalEvents.prototype.ValidationCompleted;
/**
 * @record
 * @struct
 */
function ASPxClientHiddenField() {}
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientHiddenField.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientHiddenField.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientHiddenField.prototype.CallbackError;

/**
 * Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
 * @param {string} parameter A string value that represents any information that needs to be sent to the server-side CustomCallback event.
 * @return {void}
 */
ASPxClientHiddenField.prototype.PerformCallback = function(parameter) {};

/**
 * Adds a new value to the control's collection of property name/value pairs, on the client side.
 * @param {string} propertyName A string value that specifies the property name. It can contain letters, digits, underline characters, and dollar signs. It cannot begin with a digit character.
 * @param {!Object} propertyValue An object that represents the value of the specified property.
 * @return {void}
 */
ASPxClientHiddenField.prototype.Add = function(propertyName, propertyValue) {};

/**
 * Returns the value with the specified property name.
 * @param {string} propertyName A string value that specifies the property name.
 * @return {!Object}
 */
ASPxClientHiddenField.prototype.Get = function(propertyName) {};

/**
 * Adds a new value to the control's collection of property name/value pairs, on the client side.
 * @param {string} propertyName A string value that specifies the property name. It can contain letters, digits, underline characters, and dollar signs. It cannot begin with a digit character.
 * @param {!Object} propertyValue An object that represents the property value.
 * @return {void}
 */
ASPxClientHiddenField.prototype.Set = function(propertyName, propertyValue) {};

/**
 * Removes the specified value from the ASPxHiddenField collection.
 * @param {string} propertyName A string value representing the property name.
 * @return {void}
 */
ASPxClientHiddenField.prototype.Remove = function(propertyName) {};

/**
 * Clears the ASPxHiddenField's value collection.
 * @return {void}
 */
ASPxClientHiddenField.prototype.Clear = function() {};

/**
 * Returns a value indicating whether the value with the specified property name is contained within the ASPxHiddenField control's value collection.
 * @param {string} propertyName A string value that specifies the property name.
 * @return {boolean}
 */
ASPxClientHiddenField.prototype.Contains = function(propertyName) {};
/**
 * @record
 * @struct
 */
function ASPxClientImageGallery() {}
 /** @type {!ASPxClientEvent<!ASPxClientImageGalleryCancelEventHandler<?>>} */
ASPxClientImageGallery.prototype.FullscreenViewerShowing;
 /** @type {!ASPxClientEvent<!ASPxClientImageGalleryFullscreenViewerEventHandler<?>>} */
ASPxClientImageGallery.prototype.FullscreenViewerActiveItemIndexChanged;

/**
 * Shows the fullscreen viewer with the specified active item.
 * @param {number} index An Int32 value that is an index of the active item.
 * @return {void}
 */
ASPxClientImageGallery.prototype.ShowFullscreenViewer = function(index) {};

/**
 * Hides the fullscreen viewer.
 * @return {void}
 */
ASPxClientImageGallery.prototype.HideFullscreenViewer = function() {};

/**
 * Makes the specified item active within the fullscreen viewer on the client side.
 * @param {number} index An integer value specifying the index of the item to select.
 * @param {boolean} preventAnimation true to prevent the animation effect; false to change images using animation.
 * @return {void}
 */
ASPxClientImageGallery.prototype.SetFullscreenViewerActiveItemIndex = function(index, preventAnimation) {};

/**
 * Gets the number of items contained in the control's item collection.
 * @return {number}
 */
ASPxClientImageGallery.prototype.GetFullscreenViewerItemCount = function() {};

/**
 * Returns the index of the active item within the fullscreen viewer.
 * @return {number}
 */
ASPxClientImageGallery.prototype.GetFullscreenViewerActiveItemIndex = function() {};

/**
 * Plays a slide show within a fullscreen viewer.
 * @return {void}
 */
ASPxClientImageGallery.prototype.PlaySlideShow = function() {};

/**
 * Pauses a slide show within a fullscreen viewer.
 * @return {void}
 */
ASPxClientImageGallery.prototype.PauseSlideShow = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientImageGalleryCancelEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientImageGalleryCancelEventArgs() {}
 /** @type {number} */
ASPxClientImageGalleryCancelEventArgs.prototype.index;
 /** @type {string} */
ASPxClientImageGalleryCancelEventArgs.prototype.name;
/**
 * @record
 * @struct
 */
function ASPxClientImageGalleryFullscreenViewerEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientImageGalleryFullscreenViewerEventArgs() {}
 /** @type {number} */
ASPxClientImageGalleryFullscreenViewerEventArgs.prototype.index;
 /** @type {string} */
ASPxClientImageGalleryFullscreenViewerEventArgs.prototype.name;
/**
 * @record
 * @struct
 */
function ASPxClientImageSlider() {}
 /** @type {!ASPxClientEvent<!ASPxClientImageSliderItemEventHandler<?>>} */
ASPxClientImageSlider.prototype.ActiveItemChanged;
 /** @type {!ASPxClientEvent<!ASPxClientImageSliderItemEventHandler<?>>} */
ASPxClientImageSlider.prototype.ItemClick;
 /** @type {!ASPxClientEvent<!ASPxClientImageSliderItemEventHandler<?>>} */
ASPxClientImageSlider.prototype.ThumbnailItemClick;

/**
 * Returns an item specified by its index within the image slider's item collection.
 * @param {number} index An integer value specifying the zero-based index of the item to be retrieved.
 * @return {!ASPxClientImageSliderItem}
 */
ASPxClientImageSlider.prototype.GetItem = function(index) {};

/**
 * Returns an item specified by its name.
 * @param {string} name A string value specifying the name of the item.
 * @return {!ASPxClientImageSliderItem}
 */
ASPxClientImageSlider.prototype.GetItemByName = function(name) {};

/**
 * Returns the index of the active item within the image slider control.
 * @return {number}
 */
ASPxClientImageSlider.prototype.GetActiveItemIndex = function() {};

/**
 * Makes the specified item active within the image slider control on the client side.
 * @param {number} index An integer value specifying the index of the item to select.
 * @param {boolean} preventAnimation true to prevent the animation effect; false to change images using animation.
 * @return {void}
 */
ASPxClientImageSlider.prototype.SetActiveItemIndex = function(index, preventAnimation) {};

/**
 * Returns the active item within the ASPxImageSlider control.
 * @return {!ASPxClientImageSliderItem}
 */
ASPxClientImageSlider.prototype.GetActiveItem = function() {};

/**
 * Makes the specified item active within the image slider control on the client side.
 * @param {!ASPxClientImageSliderItem} item An ASPxClientImageSliderItem object specifying the item to select.
 * @param {boolean} preventAnimation true to prevent animation effect; false to enable animation.
 * @return {void}
 */
ASPxClientImageSlider.prototype.SetActiveItem = function(item, preventAnimation) {};

/**
 * Gets the number of items contained in the control's item collection.
 * @return {number}
 */
ASPxClientImageSlider.prototype.GetItemCount = function() {};

/**
 * Sets input focus to the ASPxImageSlider control.
 * @return {void}
 */
ASPxClientImageSlider.prototype.Focus = function() {};

/**
 * Plays a slide show within an image slider.
 * @return {void}
 */
ASPxClientImageSlider.prototype.Play = function() {};

/**
 * Pauses a slide show within image slider.
 * @return {void}
 */
ASPxClientImageSlider.prototype.Pause = function() {};

/**
 * Gets a value indicating whether the slide show is playing.
 * @return {boolean}
 */
ASPxClientImageSlider.prototype.IsSlideShowPlaying = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientImageSliderItemEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientImageSliderItemEventArgs() {}
 /** @type {!ASPxClientImageSliderItem} */
ASPxClientImageSliderItemEventArgs.prototype.item;
/**
 * @record
 * @struct
 */
function ASPxClientImageSliderItem() {}
 /** @type {?} */
ASPxClientImageSliderItem.prototype.imageSlider;
 /** @type {number} */
ASPxClientImageSliderItem.prototype.index;
 /** @type {string} */
ASPxClientImageSliderItem.prototype.name;
 /** @type {string} */
ASPxClientImageSliderItem.prototype.imageUrl;
 /** @type {string} */
ASPxClientImageSliderItem.prototype.text;
/**
 * @record
 * @struct
 */
function ASPxClientImageZoomNavigator() {}
/**
 * @record
 * @struct
 */
function ASPxClientImageZoom() {}

/**
 * Sets the properties on an image displayed in the image zoom control.
 * @param {string} imageUrl A string value specifying the path to the preview image displayed in the preview image.
 * @param {string} largeImageUrl A string value specifying the path to the preview image displayed in the zoom window and the expand window.
 * @param {string} zoomWindowText A string value specifying the text displayed in the zoom window.
 * @param {string} expandWindowText A string value specifying the text displayed in the expand window.
 * @param {string} alternateText A string value that specifies the alternate text displayed instead of the image.
 * @return {void}
 */
ASPxClientImageZoom.prototype.SetImageProperties = function(imageUrl, largeImageUrl, zoomWindowText, expandWindowText, alternateText) {};
/**
 * @record
 * @struct
 */
function ASPxClientLoadingPanel() {}

/**
 * Invokes the loading panel.
 * @return {void}
 */
ASPxClientLoadingPanel.prototype.Show = function() {};

/**
 * Invokes the loading panel, displaying it over the specified HTML element.
 * @param {!Object} htmlElement An object that specifies the required HTML element.
 * @return {void}
 */
ASPxClientLoadingPanel.prototype.ShowInElement = function(htmlElement) {};

/**
 * Invokes the loading panel, displaying it over the specified element.
 * @param {string} id A string that specifies the required element's identifier.
 * @return {void}
 */
ASPxClientLoadingPanel.prototype.ShowInElementByID = function(id) {};

/**
 * Invokes the loading panel at the specified position.
 * @param {number} x An integer value specifying the x-coordinate of the loading panel's display position.
 * @param {number} y An integer value specifying the y-coordinate of the loaidng panel's display position.
 * @return {void}
 */
ASPxClientLoadingPanel.prototype.ShowAtPos = function(x, y) {};

/**
 * Sets the text to be displayed within the ASPxLoadingPanel.
 * @param {string} text A string value specifying the text to be displayed within the ASPxLoadingPanel.
 * @return {void}
 */
ASPxClientLoadingPanel.prototype.SetText = function(text) {};

/**
 * Gets the text displayed within the ASPxLoadingPanel.
 * @return {string}
 */
ASPxClientLoadingPanel.prototype.GetText = function() {};

/**
 * Hides the loading panel.
 * @return {void}
 */
ASPxClientLoadingPanel.prototype.Hide = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientMenuBase() {}
 /** @type {!ASPxClientEvent<!ASPxClientMenuItemClickEventHandler<?>>} */
ASPxClientMenuBase.prototype.ItemClick;
 /** @type {!ASPxClientEvent<!ASPxClientMenuItemMouseEventHandler<?>>} */
ASPxClientMenuBase.prototype.ItemMouseOver;
 /** @type {!ASPxClientEvent<!ASPxClientMenuItemMouseEventHandler<?>>} */
ASPxClientMenuBase.prototype.ItemMouseOut;
 /** @type {!ASPxClientEvent<!ASPxClientMenuItemEventHandler<?>>} */
ASPxClientMenuBase.prototype.PopUp;
 /** @type {!ASPxClientEvent<!ASPxClientMenuItemEventHandler<?>>} */
ASPxClientMenuBase.prototype.CloseUp;

/**
 * Returns the number of menu items at the root menu level.
 * @return {number}
 */
ASPxClientMenuBase.prototype.GetItemCount = function() {};

/**
 * Returns the menu's root menu item specified by its index.
 * @param {number} index An integer value specifying the zero-based index of the root menu item to be retrieved.
 * @return {!ASPxClientMenuItem}
 */
ASPxClientMenuBase.prototype.GetItem = function(index) {};

/**
 * Returns a menu item specified by its name.
 * @param {string} name A string value specifying the name of the menu item.
 * @return {!ASPxClientMenuItem}
 */
ASPxClientMenuBase.prototype.GetItemByName = function(name) {};

/**
 * Returns the selected item within the menu control.
 * @return {!ASPxClientMenuItem}
 */
ASPxClientMenuBase.prototype.GetSelectedItem = function() {};

/**
 * Selects the specified menu item within a menu control on the client side.
 * @param {!ASPxClientMenuItem} item An ASPxClientMenuItem object specifying the menu item to select.
 * @return {void}
 */
ASPxClientMenuBase.prototype.SetSelectedItem = function(item) {};

/**
 * Returns a root menu item.
 * @return {!ASPxClientMenuItem}
 */
ASPxClientMenuBase.prototype.GetRootItem = function() {};
/**
 * @extends {ASPxClientControlCollection}
 * @record
 * @struct
 */
function ASPxClientMenuCollection() {}

/**
 * Recalculates the position of visible sub menus.
 * @return {void}
 */
ASPxClientMenuCollection.prototype.RecalculateAll = function() {};

/**
 * Hides all menus maitained by the collection.
 * @return {void}
 */
ASPxClientMenuCollection.prototype.HideAll = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientMenu() {}

/**
 * Gets a value specifying the menu orientation.
 * @return {string}
 */
ASPxClientMenu.prototype.GetOrientation = function() {};

/**
 * Sets the menu orientation.
 * @param {string} orientation 'Vertical' to orient the menu vertically; 'Horizontal' to orient the menu horizontally.
 * @return {void}
 */
ASPxClientMenu.prototype.SetOrientation = function(orientation) {};
/**
 * @record
 * @struct
 */
function ASPxClientMenuItemEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientMenuItemEventArgs() {}
 /** @type {!ASPxClientMenuItem} */
ASPxClientMenuItemEventArgs.prototype.item;
/**
 * @record
 * @struct
 */
function ASPxClientMenuItemMouseEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientMenuItemEventArgs}
 * @record
 * @struct
 */
function ASPxClientMenuItemMouseEventArgs() {}
 /** @type {!Object} */
ASPxClientMenuItemMouseEventArgs.prototype.htmlElement;
/**
 * @record
 * @struct
 */
function ASPxClientMenuItemClickEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientMenuItemClickEventArgs() {}
 /** @type {!ASPxClientMenuItem} */
ASPxClientMenuItemClickEventArgs.prototype.item;
 /** @type {!Object} */
ASPxClientMenuItemClickEventArgs.prototype.htmlElement;
 /** @type {!Object} */
ASPxClientMenuItemClickEventArgs.prototype.htmlEvent;
/**
 * @record
 * @struct
 */
function ASPxClientTouchUIOptions() {}
 /** @type {boolean} */
ASPxClientTouchUIOptions.prototype.showHorizontalScrollbar;
 /** @type {boolean} */
ASPxClientTouchUIOptions.prototype.showVerticalScrollbar;
 /** @type {string} */
ASPxClientTouchUIOptions.prototype.vScrollClassName;
 /** @type {string} */
ASPxClientTouchUIOptions.prototype.hScrollClassName;
/**
 * @record
 * @struct
 */
function ScrollExtender() {}

/**
 * Applies the current scroll extender to the element specified by the ID.
 * Applies the current scroll extender to the specified DOM element.
 * @param {string|!Object} id_or_element A string value specifying the element's ID. / An object specifying the required DOM element.
 * @return {void}
 */
ScrollExtender.prototype.ChangeElement = function(id_or_element) {};
/**
 * @record
 * @struct
 */
function ASPxClientNavBar() {}
 /** @type {!ASPxClientEvent<!ASPxClientNavBarItemEventHandler<?>>} */
ASPxClientNavBar.prototype.ItemClick;
 /** @type {!ASPxClientEvent<!ASPxClientNavBarGroupEventHandler<?>>} */
ASPxClientNavBar.prototype.ExpandedChanged;
 /** @type {!ASPxClientEvent<!ASPxClientNavBarGroupCancelEventHandler<?>>} */
ASPxClientNavBar.prototype.ExpandedChanging;
 /** @type {!ASPxClientEvent<!ASPxClientNavBarGroupClickEventHandler<?>>} */
ASPxClientNavBar.prototype.HeaderClick;
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientNavBar.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientNavBar.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientNavBar.prototype.CallbackError;

/**
 * Returns the number of groups in the navbar.
 * @return {number}
 */
ASPxClientNavBar.prototype.GetGroupCount = function() {};

/**
 * Returns a group specified by its index.
 * @param {number} index An integer value specifying the zero-based index of the group object to retrieve.
 * @return {!ASPxClientNavBarGroup}
 */
ASPxClientNavBar.prototype.GetGroup = function(index) {};

/**
 * Returns a group specified by its name.
 * @param {string} name A string value specifying the name of the group.
 * @return {!ASPxClientNavBarGroup}
 */
ASPxClientNavBar.prototype.GetGroupByName = function(name) {};

/**
 * Returns the navbar's active group.
 * @return {!ASPxClientNavBarGroup}
 */
ASPxClientNavBar.prototype.GetActiveGroup = function() {};

/**
 * Makes the specified group active.
 * @param {!ASPxClientNavBarGroup} group A ASPxClientNavBarGroup object that specifies the active group.
 * @return {void}
 */
ASPxClientNavBar.prototype.SetActiveGroup = function(group) {};

/**
 * Returns an item specified by its name.
 * @param {string} name A string value specifying the name of the item.
 * @return {!ASPxClientNavBarItem}
 */
ASPxClientNavBar.prototype.GetItemByName = function(name) {};

/**
 * Returns the selected item within the navbar control.
 * @return {!ASPxClientNavBarItem}
 */
ASPxClientNavBar.prototype.GetSelectedItem = function() {};

/**
 * Selects the specified item within the navbar control on the client side.
 * @param {!ASPxClientNavBarItem} item An ASPxClientNavBarItem object specifying the item to select.
 * @return {void}
 */
ASPxClientNavBar.prototype.SetSelectedItem = function(item) {};

/**
 * Collapses all groups of the navbar.
 * @return {void}
 */
ASPxClientNavBar.prototype.CollapseAll = function() {};

/**
 * Expands all groups of the navbar.
 * @return {void}
 */
ASPxClientNavBar.prototype.ExpandAll = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientNavBarGroup() {}
 /** @type {?} */
ASPxClientNavBarGroup.prototype.navBar;
 /** @type {number} */
ASPxClientNavBarGroup.prototype.index;
 /** @type {string} */
ASPxClientNavBarGroup.prototype.name;

/**
 * Returns a value specifying whether a group is enabled.
 * @return {boolean}
 */
ASPxClientNavBarGroup.prototype.GetEnabled = function() {};

/**
 * Returns a value specifying whether the group is expanded.
 * @return {boolean}
 */
ASPxClientNavBarGroup.prototype.GetExpanded = function() {};

/**
 * Sets the group's expansion state.
 * @param {boolean} value true to expand the group; false to collapse the group.
 * @return {void}
 */
ASPxClientNavBarGroup.prototype.SetExpanded = function(value) {};

/**
 * Returns a value specifying whether a group is displayed.
 * @return {boolean}
 */
ASPxClientNavBarGroup.prototype.GetVisible = function() {};

/**
 * Returns text displayed within a group.
 * @return {string}
 */
ASPxClientNavBarGroup.prototype.GetText = function() {};

/**
 * Specifies the text displayed within a group.
 * @param {string} text A string value that is the text displayed within the navbar group.
 * @return {void}
 */
ASPxClientNavBarGroup.prototype.SetText = function(text) {};

/**
 * Specifies whether the group is visible.
 * @param {boolean} value true if the group is visible; otherwise, false.
 * @return {void}
 */
ASPxClientNavBarGroup.prototype.SetVisible = function(value) {};

/**
 * Returns the number of items in the group.
 * @return {number}
 */
ASPxClientNavBarGroup.prototype.GetItemCount = function() {};

/**
 * Returns the group's item specified by its index.
 * @param {number} index An integer value specifying the zero-based index of the item to be retrieved.
 * @return {!ASPxClientNavBarItem}
 */
ASPxClientNavBarGroup.prototype.GetItem = function(index) {};

/**
 * Returns a group item specified by its name.
 * @param {string} name A string value specifying the name of the item.
 * @return {!ASPxClientNavBarItem}
 */
ASPxClientNavBarGroup.prototype.GetItemByName = function(name) {};
/**
 * @record
 * @struct
 */
function ASPxClientNavBarItem() {}
 /** @type {?} */
ASPxClientNavBarItem.prototype.navBar;
 /** @type {!ASPxClientNavBarGroup} */
ASPxClientNavBarItem.prototype.group;
 /** @type {number} */
ASPxClientNavBarItem.prototype.index;
 /** @type {string} */
ASPxClientNavBarItem.prototype.name;

/**
 * Returns a value indicating whether an item is enabled.
 * @return {boolean}
 */
ASPxClientNavBarItem.prototype.GetEnabled = function() {};

/**
 * Specifies whether the item is enabled.
 * @param {boolean} value true if the item is enabled; otherwise, false.
 * @return {void}
 */
ASPxClientNavBarItem.prototype.SetEnabled = function(value) {};

/**
 * Returns the URL which points to the image displayed within the item.
 * @return {string}
 */
ASPxClientNavBarItem.prototype.GetImageUrl = function() {};

/**
 * Specifies the URL which points to the image displayed within the item.
 * @param {string} value A string value that specifies the URL to the image displayed within the item.
 * @return {void}
 */
ASPxClientNavBarItem.prototype.SetImageUrl = function(value) {};

/**
 * Gets an URL which defines the item's navigation location.
 * @return {string}
 */
ASPxClientNavBarItem.prototype.GetNavigateUrl = function() {};

/**
 * Specifies a URL which defines the item's navigation location.
 * @param {string} value A string value which represents the URL to where the client web browser will navigate when the item is clicked.
 * @return {void}
 */
ASPxClientNavBarItem.prototype.SetNavigateUrl = function(value) {};

/**
 * Returns text displayed within the item.
 * @return {string}
 */
ASPxClientNavBarItem.prototype.GetText = function() {};

/**
 * Specifies the text displayed within the item.
 * @param {string} value A string value that represents the text displayed within the item.
 * @return {void}
 */
ASPxClientNavBarItem.prototype.SetText = function(value) {};

/**
 * Returns a value specifying whether an item is displayed.
 * @return {boolean}
 */
ASPxClientNavBarItem.prototype.GetVisible = function() {};

/**
 * Specifies whether the item is visible.
 * @param {boolean} value true is the item is visible; otherwise, false.
 * @return {void}
 */
ASPxClientNavBarItem.prototype.SetVisible = function(value) {};
/**
 * @record
 * @struct
 */
function ASPxClientNavBarItemEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientNavBarItemEventArgs() {}
 /** @type {!ASPxClientNavBarItem} */
ASPxClientNavBarItemEventArgs.prototype.item;
 /** @type {!Object} */
ASPxClientNavBarItemEventArgs.prototype.htmlElement;
 /** @type {!Object} */
ASPxClientNavBarItemEventArgs.prototype.htmlEvent;
/**
 * @record
 * @struct
 */
function ASPxClientNavBarGroupEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientNavBarGroupEventArgs() {}
 /** @type {!ASPxClientNavBarGroup} */
ASPxClientNavBarGroupEventArgs.prototype.group;
/**
 * @record
 * @struct
 */
function ASPxClientNavBarGroupCancelEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientNavBarGroupCancelEventArgs() {}
 /** @type {!ASPxClientNavBarGroup} */
ASPxClientNavBarGroupCancelEventArgs.prototype.group;
/**
 * @record
 * @struct
 */
function ASPxClientNavBarGroupClickEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientNavBarGroupCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientNavBarGroupClickEventArgs() {}
 /** @type {!Object} */
ASPxClientNavBarGroupClickEventArgs.prototype.htmlElement;
 /** @type {!Object} */
ASPxClientNavBarGroupClickEventArgs.prototype.htmlEvent;
/**
 * @record
 * @struct
 */
function ASPxClientNewsControl() {}
 /** @type {!ASPxClientEvent<!ASPxClientNewsControlItemEventHandler<?>>} */
ASPxClientNewsControl.prototype.TailClick;
/**
 * @record
 * @struct
 */
function ASPxClientNewsControlItemEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientNewsControlItemEventArgs() {}
 /** @type {!Object} */
ASPxClientNewsControlItemEventArgs.prototype.name;
 /** @type {!Object} */
ASPxClientNewsControlItemEventArgs.prototype.htmlElement;
 /** @type {!Object} */
ASPxClientNewsControlItemEventArgs.prototype.htmlEvent;
/**
 * @record
 * @struct
 */
function ASPxClientObjectContainer() {}
 /** @type {!ASPxClientEvent<!ASPxClientFlashScriptCommandEventHandler<?>>} */
ASPxClientObjectContainer.prototype.FlashScriptCommand;

/**
 * Play the Flash movie backwards.
 * @return {void}
 */
ASPxClientObjectContainer.prototype.Back = function() {};

/**
 * Returns the value of the Flash variable specified.
 * @param {string} name A string value that specifies the Flash variable.
 * @return {string}
 */
ASPxClientObjectContainer.prototype.GetVariable = function(name) {};

/**
 * Play the Flash movie forwards.
 * @return {void}
 */
ASPxClientObjectContainer.prototype.Forward = function() {};

/**
 * Activates the specified frame in the Flash movie.
 * @param {number} frameNumber An integer value that specifies the requested frame.
 * @return {void}
 */
ASPxClientObjectContainer.prototype.GotoFrame = function(frameNumber) {};

/**
 * Indicates whether the Flash movie is currently playing.
 * @return {boolean}
 */
ASPxClientObjectContainer.prototype.IsPlaying = function() {};

/**
 * Loads the Flash movie to the specified layer.
 * @param {number} layerNumber An integer value that identifies a layer in which to load the movie.
 * @param {string} url A string value that specifies the movie's URL.
 * @return {void}
 */
ASPxClientObjectContainer.prototype.LoadMovie = function(layerNumber, url) {};

/**
 * Pans a zoomed-in Flash movie to the specified coordinates.
 * @param {number} x An integer value that specifies the X-coordinate.
 * @param {number} y An integer value that specifies the Y-coordinate.
 * @param {number} mode 0 the coordinates are pixels; 1 the coordinates are a percentage of the window.
 * @return {void}
 */
ASPxClientObjectContainer.prototype.Pan = function(x, y, mode) {};

/**
 * Returns the percent of the Flash Player movie that has streamed into the browser so far.
 * @return {string}
 */
ASPxClientObjectContainer.prototype.PercentLoaded = function() {};

/**
 * Starts playing the Flash movie.
 * @return {void}
 */
ASPxClientObjectContainer.prototype.Play = function() {};

/**
 * Rewinds the Flash movie to the first frame.
 * @return {void}
 */
ASPxClientObjectContainer.prototype.Rewind = function() {};

/**
 * Sets the value of the specified Flash variable.
 * @param {string} name A string value that specifies the Flash variable.
 * @param {string} value A string value that represents a new value.
 * @return {void}
 */
ASPxClientObjectContainer.prototype.SetVariable = function(name, value) {};

/**
 * Zooms in on the specified rectangular area of the Flash movie.
 * @param {number} left An integer value that specifies the x-coordinate of the rectangle's left side, in twips.
 * @param {number} top An integer value that specifies the y-coordinate of the rectangle's top side, in twips.
 * @param {number} right An integer value that specifies the x-coordinate of the rectangle's right side, in twips.
 * @param {number} bottom An integer value that specifies the y-coordinate of the rectangle's bottom side, in twips.
 * @return {void}
 */
ASPxClientObjectContainer.prototype.SetZoomRect = function(left, top, right, bottom) {};

/**
 * Stops playing the Flash movie.
 * @return {void}
 */
ASPxClientObjectContainer.prototype.StopPlay = function() {};

/**
 * Returns the total number of frames in the Flash movie.
 * @return {number}
 */
ASPxClientObjectContainer.prototype.TotalFrames = function() {};

/**
 * Zooms the Flash view by a relative scale factor.
 * @param {number} percent An integer value that specifies the relative scale factor, as a  percentage.
 * @return {void}
 */
ASPxClientObjectContainer.prototype.Zoom = function(percent) {};

/**
 * Starts playing a Quick Time movie.
 * @return {void}
 */
ASPxClientObjectContainer.prototype.QTPlay = function() {};

/**
 * Stops playing a Quick Time movie.
 * @return {void}
 */
ASPxClientObjectContainer.prototype.QTStopPlay = function() {};

/**
 * Rewinds a Quick Time movie to the first frame.
 * @return {void}
 */
ASPxClientObjectContainer.prototype.QTRewind = function() {};

/**
 * Steps through a Quick Time video stream by a specified number of frames.
 * @param {number} count An integer value that specifies the number of frames to step.
 * @return {void}
 */
ASPxClientObjectContainer.prototype.QTStep = function(count) {};
/**
 * @record
 * @struct
 */
function ASPxClientFlashScriptCommandEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientFlashScriptCommandEventArgs() {}
 /** @type {string} */
ASPxClientFlashScriptCommandEventArgs.prototype.command;
 /** @type {string} */
ASPxClientFlashScriptCommandEventArgs.prototype.args;
/**
 * @record
 * @struct
 */
function ASPxClientOfficeDocumentLinkType() {}
/**
 * @record
 * @struct
 */
function ASPxClientPager() {}
/**
 * @record
 * @struct
 */
function ASPxClientPopupControl() {}
 /** @type {!ASPxClientEvent<!ASPxClientPopupWindowEventHandler<?>>} */
ASPxClientPopupControl.prototype.CloseButtonClick;

/**
 * This method is not in effect for a ASPxClientPopupControl object.
 * @return {!Object}
 */
ASPxClientPopupControl.prototype.GetMainElement = function() {};

/**
 * Returns an object containing the information about a mouse event that invoked a default popup window.
 * @return {!Object}
 */
ASPxClientPopupControl.prototype.GetPopUpReasonMouseEvent = function() {};

/**
 * Returns an object containing the information about a mouse event that invoked the specified popup window.
 * @param {!ASPxClientPopupWindow} window A ASPxClientPopupWindow object that specifies the required popup window.
 * @return {!Object}
 */
ASPxClientPopupControl.prototype.GetWindowPopUpReasonMouseEvent = function(window) {};

/**
 *
 * Sends a callback with parameters to update the popup window by processing the related popup window and the passed information on the server.
 * @param {!ASPxClientPopupWindow} window A ASPxClientPopupWindow object identifying the processed popup window.
 * @param {string} parameter A string value that represents any information that needs to be sent to the server-side CustomCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
ASPxClientPopupControl.prototype.PerformWindowCallback = function(window, parameter, onSuccess) {};

/**
 * Specifies the default popup window's size.
 * @param {number} width An integer value that specifies the default popup window's width.
 * @param {number} height An integer value that specifies the default popup window's height.
 * @return {void}
 */
ASPxClientPopupControl.prototype.SetSize = function(width, height) {};

/**
 * Gets the width of the specified popup window's content region.
 * @param {!ASPxClientPopupWindow} window An ASPxClientPopupWindow object that specifies the required popup window.
 * @return {number}
 */
ASPxClientPopupControl.prototype.GetWindowContentWidth = function(window) {};

/**
 * Gets the height of the specified popup window's content region.
 * @param {!ASPxClientPopupWindow} window An ASPxClientPopupWindow object that specifies the required popup window.
 * @return {number}
 */
ASPxClientPopupControl.prototype.GetWindowContentHeight = function(window) {};

/**
 * Returns the height of a specific popup window.
 * @param {!ASPxClientPopupWindow} window A ASPxClientPopupWindow object that specifies the required popup window.
 * @return {number}
 */
ASPxClientPopupControl.prototype.GetWindowHeight = function(window) {};

/**
 * Returns the width of a specific popup window.
 * @param {!ASPxClientPopupWindow} window A ASPxClientPopupWindow object that specifies the required popup window.
 * @return {number}
 */
ASPxClientPopupControl.prototype.GetWindowWidth = function(window) {};

/**
 * Specifies the size of a specific popup window.
 * @param {!ASPxClientPopupWindow} window A ASPxClientPopupWindow object that specifies the required popup window.
 * @param {number} width An integer value that specifies the required popup window's width.
 * @param {number} height An integer value that specifies the required popup window's height.
 * @return {void}
 */
ASPxClientPopupControl.prototype.SetWindowSize = function(window, width, height) {};

/**
 * Returns the HTML code that is the content of the popup control's default popup window.
 * @return {string}
 */
ASPxClientPopupControl.prototype.GetContentHTML = function() {};

/**
 * Defines the HTML content for the popup control's default popup window.
 * @param {string} html A string value that is the HTML code defining the content of the popup window.
 * @return {void}
 */
ASPxClientPopupControl.prototype.SetContentHTML = function(html) {};

/**
 * Sets the ID of a web control or HTML element (or a list of IDs) with which the current popup control's window is associated.
 * @param {!ASPxClientPopupWindow} window An ASPxClientPopupWindow object representing a popup control's window.
 * @param {string} popupElementId A string value specifying the ID (or a list of IDs) of the web control or HTML element with which the popup control's window is associated.
 * @return {void}
 */
ASPxClientPopupControl.prototype.SetWindowPopupElementID = function(window, popupElementId) {};

/**
 * Sets the ID of a web control or HTML element (or a list of IDs) with which the current popup control is associated.
 * @param {string} popupElementId A string value specifying the ID (or a list of IDs) of the web control or HTML element to which the popup control is associated.
 * @return {void}
 */
ASPxClientPopupControl.prototype.SetPopupElementID = function(popupElementId) {};

/**
 * Returns an index of the object that invoked the default window within the PopupElementID list.
 * @return {number}
 */
ASPxClientPopupControl.prototype.GetCurrentPopupElementIndex = function() {};

/**
 * Returns an index of the object that invoked the specified popup window, within the window's PopupElementID list.
 * @param {!ASPxClientPopupWindow} window An ASPxClientPopupWindow object that specifies the required popup window.
 * @return {number}
 */
ASPxClientPopupControl.prototype.GetWindowCurrentPopupElementIndex = function(window) {};

/**
 * Returns an object that invoked the default window.
 * @return {!Object}
 */
ASPxClientPopupControl.prototype.GetCurrentPopupElement = function() {};

/**
 * Returns an object that invoked the specified popup window.
 * @param {!ASPxClientPopupWindow} window An ASPxClientPopupWindow object that specifies the required popup window.
 * @return {!Object}
 */
ASPxClientPopupControl.prototype.GetWindowCurrentPopupElement = function(window) {};

/**
 * Returns a value that specifies whether the popup control's specific window is displayed.
 * @param {!ASPxClientPopupWindow} window A ASPxClientPopupWindow object representing the popup window whose visibility is checked.
 * @return {boolean}
 */
ASPxClientPopupControl.prototype.IsWindowVisible = function(window) {};

/**
 * Returns a popup window specified by its index.
 * @param {number} index An integer value specifying the zero-based index of the popup window object to be retrieved.
 * @return {!ASPxClientPopupWindow}
 */
ASPxClientPopupControl.prototype.GetWindow = function(index) {};

/**
 * Returns a popup window specified by its name.
 * @param {string} name A string value specifying the name of the popup window.
 * @return {!ASPxClientPopupWindow}
 */
ASPxClientPopupControl.prototype.GetWindowByName = function(name) {};

/**
 * Returns the number of popup windows in the popup control.
 * @return {number}
 */
ASPxClientPopupControl.prototype.GetWindowCount = function() {};

/**
 * Invokes the popup control's specific window.
 * Invokes the specified popup window at the popup element with the specified index.
 * @param {!ASPxClientPopupWindow} window A ASPxClientPopupWindow object representing the popup window to display. / A ASPxClientPopupWindow object that specifies the required popup window.
 * @param {number=} popupElementIndex An integer value specifying the zero-based index of the popup element within the window's PopupElementID list.
 * @return {void}
 */
ASPxClientPopupControl.prototype.ShowWindow = function(window, popupElementIndex) {};

/**
 * Invokes the popup control's specific window and displays it over the specified HTML element.
 * @param {!ASPxClientPopupWindow} window A ASPxClientPopupWindow object representing the popup window to display.
 * @param {!Object} htmlElement An object specifying the HTML element relative to whose position the default popup window is invoked.
 * @return {void}
 */
ASPxClientPopupControl.prototype.ShowWindowAtElement = function(window, htmlElement) {};

/**
 * Invokes the popup control's specific window and displays it over an HTML element specified by its unique identifier.
 * @param {!ASPxClientPopupWindow} window A ASPxClientPopupWindow object representing the popup window to display.
 * @param {string} id A string value that specifies the hierarchically qualified identifier of an HTML element relative to whose position the default popup window is invoked.
 * @return {void}
 */
ASPxClientPopupControl.prototype.ShowWindowAtElementByID = function(window, id) {};

/**
 * Invokes the popup control's specific popup window at the specified position.
 * @param {!ASPxClientPopupWindow} window A ASPxClientPopupWindow object representing the popup window to display.
 * @param {number} x A integer value specifying the x-coordinate of the popup window's display position.
 * @param {number} y A integer value specifying the y-coordinate of the popup window's display position.
 * @return {void}
 */
ASPxClientPopupControl.prototype.ShowWindowAtPos = function(window, x, y) {};

/**
 * Brings the specified popup window to the front of the z-order.
 * @param {!ASPxClientPopupWindow} window A ASPxClientPopupWindow object representing the popup window.
 * @return {void}
 */
ASPxClientPopupControl.prototype.BringWindowToFront = function(window) {};

/**
 * Closes the popup control's specified window.
 * @param {!ASPxClientPopupWindow} window A ASPxClientPopupWindow object representing the popup window to close.
 * @return {void}
 */
ASPxClientPopupControl.prototype.HideWindow = function(window) {};

/**
 * Returns the HTML code that represents the contents of the specified popup window.
 * @param {!ASPxClientPopupWindow} window An ASPxClientPopupWindow object that specifies the required popup window.
 * @return {string}
 */
ASPxClientPopupControl.prototype.GetWindowContentHtml = function(window) {};

/**
 * Defines the HTML content for a specific popup window within the popup control.
 * @param {!ASPxClientPopupWindow} window An ASPxClientPopupWindow object that specifies the required popup window.
 * @param {string} html A string value that represents the HTML code defining the content of the specified popup window.
 * @return {void}
 */
ASPxClientPopupControl.prototype.SetWindowContentHtml = function(window, html) {};

/**
 * Returns an iframe object containing a web page specified via the specified popup window's SetWindowContentUrl client method).
 * @param {!ASPxClientPopupWindow} window A ASPxClientPopupWindow object representing the required popup window.
 * @return {!Object}
 */
ASPxClientPopupControl.prototype.GetWindowContentIFrame = function(window) {};

/**
 * Returns the URL pointing to the web page displayed within the control's specific popup window.
 * @param {!ASPxClientPopupWindow} window A ASPxClientPopupWindow object representing the required popup window.
 * @return {string}
 */
ASPxClientPopupControl.prototype.GetWindowContentUrl = function(window) {};

/**
 * Sets the URL pointing to the web page that should be loaded into and displayed within the control's specific popup window.
 * @param {!ASPxClientPopupWindow} window A ASPxClientPopupWindow object representing the required popup window.
 * @param {string} url A string value specifying the URL to the web page to be displayed within the specified popup window.
 * @return {void}
 */
ASPxClientPopupControl.prototype.SetWindowContentUrl = function(window, url) {};

/**
 * Returns a value indicating whether the specified window is pinned.
 * @param {!ASPxClientPopupWindow} window An ASPxClientPopupWindow object specifying the popup window.
 * @return {boolean}
 */
ASPxClientPopupControl.prototype.GetWindowPinned = function(window) {};

/**
 * Sets a value indicating whether the specified window is pinned.
 * @param {!ASPxClientPopupWindow} window An ASPxClientPopupWindow object specifying the popup window.
 * @param {boolean} value true to pin the window; otherwise, false.
 * @return {void}
 */
ASPxClientPopupControl.prototype.SetWindowPinned = function(window, value) {};

/**
 * Returns a value indicating whether the specified window is maximized.
 * @param {!ASPxClientPopupWindow} window An ASPxClientPopupWindow object specifying the popup window.
 * @return {boolean}
 */
ASPxClientPopupControl.prototype.GetWindowMaximized = function(window) {};

/**
 * Sets a value indicating whether the specified window is maximized.
 * @param {!ASPxClientPopupWindow} window An ASPxClientPopupWindow object specifying the popup window.
 * @param {boolean} value true to maximize the window; otherwise, false.
 * @return {void}
 */
ASPxClientPopupControl.prototype.SetWindowMaximized = function(window, value) {};

/**
 * Returns a value indicating whether the specified window is collapsed.
 * @param {!ASPxClientPopupWindow} window An ASPxClientPopupWindow object specifying the popup window.
 * @return {boolean}
 */
ASPxClientPopupControl.prototype.GetWindowCollapsed = function(window) {};

/**
 * Sets a value indicating whether the specified window is collapsed.
 * @param {!ASPxClientPopupWindow} window An ASPxClientPopupWindow object specifying the popup window.
 * @param {boolean} value true to collapse the window; otherwise, false.
 * @return {void}
 */
ASPxClientPopupControl.prototype.SetWindowCollapsed = function(window, value) {};

/**
 * Refreshes the content of the web page displayed within the control's specific popup window.
 * @param {!ASPxClientPopupWindow} window A ASPxClientPopupWindow object representing the required popup window.
 * @return {void}
 */
ASPxClientPopupControl.prototype.RefreshWindowContentUrl = function(window) {};

/**
 * Updates the default popup window's position, to correctly align it at either the specified element, or the center of the browser's window.
 * @return {void}
 */
ASPxClientPopupControl.prototype.UpdatePosition = function() {};

/**
 * Updates the default popup window's position, to correctly align it at the specified HTML element.
 * @param {!Object} htmlElement An object specifying the HTML element to which the default popup window is aligned using the PopupVerticalAlign properties.
 * @return {void}
 */
ASPxClientPopupControl.prototype.UpdatePositionAtElement = function(htmlElement) {};

/**
 * Updates the specified popup window's position, to correctly align it at either the specified element, or the center of the browser's window.
 * @param {!ASPxClientPopupWindow} window An ASPxClientPopupWindow object that specifies the required popup window.
 * @return {void}
 */
ASPxClientPopupControl.prototype.UpdateWindowPosition = function(window) {};

/**
 * Updates the specified popup window's position, to correctly align it at the specified HTML element.
 * @param {!ASPxClientPopupWindow} window An ASPxClientPopupWindow object that specifies the required popup window.
 * @param {!Object} htmlElement An object specifying the HTML element to which the specified popup window is aligned using the PopupVerticalAlign properties.
 * @return {void}
 */
ASPxClientPopupControl.prototype.UpdateWindowPositionAtElement = function(window, htmlElement) {};

/**
 * Refreshes the connection between the ASPxPopupControl and the popup element.
 * @return {void}
 */
ASPxClientPopupControl.prototype.RefreshPopupElementConnection = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientPopupWindow() {}
 /** @type {?} */
ASPxClientPopupWindow.prototype.popupControl;
 /** @type {number} */
ASPxClientPopupWindow.prototype.index;
 /** @type {string} */
ASPxClientPopupWindow.prototype.name;

/**
 * Returns the URL pointing to the image displayed within the window header.
 * @return {string}
 */
ASPxClientPopupWindow.prototype.GetHeaderImageUrl = function() {};

/**
 * Specifies the URL which points to the image displayed within the window header.
 * @param {string} value A string value that is the URL to the image displayed within the header.
 * @return {void}
 */
ASPxClientPopupWindow.prototype.SetHeaderImageUrl = function(value) {};

/**
 * Returns the URL pointing to the image displayed within the window footer.
 * @return {string}
 */
ASPxClientPopupWindow.prototype.GetFooterImageUrl = function() {};

/**
 * Specifies the URL which points to the image displayed within the window footer.
 * @param {string} value A string value that is the URL to the image displayed within the window footer.
 * @return {void}
 */
ASPxClientPopupWindow.prototype.SetFooterImageUrl = function(value) {};

/**
 * Returns the URL where the web browser will navigate when the text or image is clicked within the popup window's header.
 * @return {string}
 */
ASPxClientPopupWindow.prototype.GetHeaderNavigateUrl = function() {};

/**
 * Returns the URL where the web browser will navigate when the text or image is clicked within the popup window's header.
 * @param {string} value A string value which specifies the required navigation location.
 * @return {void}
 */
ASPxClientPopupWindow.prototype.SetHeaderNavigateUrl = function(value) {};

/**
 * Returns the URL where the web browser will navigate when the text or image is clicked within the popup window's footer.
 * @return {string}
 */
ASPxClientPopupWindow.prototype.GetFooterNavigateUrl = function() {};

/**
 * Specifies the URL where the web browser will navigate when the text or image is clicked within the popup window's footer.
 * @param {string} value A string value which specifies the required navigation location.
 * @return {void}
 */
ASPxClientPopupWindow.prototype.SetFooterNavigateUrl = function(value) {};

/**
 * Returns the text displayed within the window's header.
 * @return {string}
 */
ASPxClientPopupWindow.prototype.GetHeaderText = function() {};

/**
 * Specifies the text displayed within the window's header.
 * @param {string} value A string value that specifies the window's header text.
 * @return {void}
 */
ASPxClientPopupWindow.prototype.SetHeaderText = function(value) {};

/**
 * Returns the text displayed within the popup window's footer.
 * @return {string}
 */
ASPxClientPopupWindow.prototype.GetFooterText = function() {};

/**
 * Specifies the text displayed within the window's footer.
 * @param {string} value A string value that specifies the window's footer text.
 * @return {void}
 */
ASPxClientPopupWindow.prototype.SetFooterText = function(value) {};
/**
 * @record
 * @struct
 */
function ASPxClientPopupWindowEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientPopupWindowEventArgs() {}
 /** @type {!ASPxClientPopupWindow} */
ASPxClientPopupWindowEventArgs.prototype.window;
/**
 * @record
 * @struct
 */
function ASPxClientPopupWindowCancelEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientPopupWindowCancelEventArgs() {}
 /** @type {!ASPxClientPopupWindow} */
ASPxClientPopupWindowCancelEventArgs.prototype.window;
 /** @type {?} */
ASPxClientPopupWindowCancelEventArgs.prototype.closeReason;
/**
 * @record
 * @struct
 */
function ASPxClientPopupWindowCloseUpEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientPopupWindowEventArgs}
 * @record
 * @struct
 */
function ASPxClientPopupWindowCloseUpEventArgs() {}
 /** @type {?} */
ASPxClientPopupWindowCloseUpEventArgs.prototype.closeReason;
/**
 * @record
 * @struct
 */
function ASPxClientPopupWindowResizeEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientPopupWindowEventArgs}
 * @record
 * @struct
 */
function ASPxClientPopupWindowResizeEventArgs() {}
 /** @type {number} */
ASPxClientPopupWindowResizeEventArgs.prototype.resizeState;
/**
 * @record
 * @struct
 */
function ASPxClientPopupWindowPinnedChangedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientPopupWindowEventArgs}
 * @record
 * @struct
 */
function ASPxClientPopupWindowPinnedChangedEventArgs() {}
 /** @type {boolean} */
ASPxClientPopupWindowPinnedChangedEventArgs.prototype.pinned;
/**
 * @extends {ASPxClientControlCollection}
 * @record
 * @struct
 */
function ASPxClientPopupControlCollection() {}

/**
 * Hides all popup windows maintained by the collection.
 * @return {void}
 */
ASPxClientPopupControlCollection.prototype.HideAllWindows = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientPopupControlCloseReason() {}
/**
 * @record
 * @struct
 */
function ASPxClientPopupMenu() {}

/**
 * Sets the ID of a web control or HTML element (or a list of IDs) with which the current popup menu is associated.
 * @param {string} popupElementId A string value specifying the ID (or a list of IDs) of the web control or HTML element with which the popup menu is associated.
 * @return {void}
 */
ASPxClientPopupMenu.prototype.SetPopupElementID = function(popupElementId) {};

/**
 * Returns an index of the object that invoked the popup menu within the PopupElementID list.
 * @return {number}
 */
ASPxClientPopupMenu.prototype.GetCurrentPopupElementIndex = function() {};

/**
 * Returns an object that invoked the popup menu.
 * @return {!Object}
 */
ASPxClientPopupMenu.prototype.GetCurrentPopupElement = function() {};

/**
 * Refreshes the connection between the ASPxPopupMenu and the popup element.
 * @return {void}
 */
ASPxClientPopupMenu.prototype.RefreshPopupElementConnection = function() {};

/**
 * Hides the popup menu.
 * @return {void}
 */
ASPxClientPopupMenu.prototype.Hide = function() {};

/**
 * Invokes the popup menu.
 * Invokes the popup menu at the popup element with the specified index.
 * @param {number=} popupElementIndex An integer value specifying the zero-based index of the popup element.
 * @return {void}
 */
ASPxClientPopupMenu.prototype.Show = function(popupElementIndex) {};

/**
 * Invokes the popup menu and displays it over the specified HTML element.
 * @param {!Object} htmlElement An object specifying the HTML element relative to which position the popup menu is invoked.
 * @return {void}
 */
ASPxClientPopupMenu.prototype.ShowAtElement = function(htmlElement) {};

/**
 * Invokes the popup menu and displays it over an HTML element specified by its unique identifier.
 * @param {string} id A string value that specifies the hierarchically qualified identifier of an HTML element relative to which position the popup menu is invoked.
 * @return {void}
 */
ASPxClientPopupMenu.prototype.ShowAtElementByID = function(id) {};

/**
 * Invokes the popup menu at the specified position.
 * @param {number} x An integer value specifying the x-coordinate of the popup menu's display position.
 * @param {number} y An integer value specifying the y-coordinate of the popup menu's display position.
 * @return {void}
 */
ASPxClientPopupMenu.prototype.ShowAtPos = function(x, y) {};
/**
 * @record
 * @struct
 */
function ASPxClientRatingControl() {}
 /** @type {!ASPxClientEvent<!ASPxClientRatingControlItemClickEventHandler<?>>} */
ASPxClientRatingControl.prototype.ItemClick;
 /** @type {!ASPxClientEvent<!ASPxClientRatingControlItemMouseEventHandler<?>>} */
ASPxClientRatingControl.prototype.ItemMouseOver;
 /** @type {!ASPxClientEvent<!ASPxClientRatingControlItemMouseEventHandler<?>>} */
ASPxClientRatingControl.prototype.ItemMouseOut;

/**
 * Gets the item tooltip title specified by the item index.
 * @param {number} index An integer value specifying the item index.
 * @return {string}
 */
ASPxClientRatingControl.prototype.GetTitle = function(index) {};

/**
 * Returns a value indicating whether the control's status is read-only.
 * @return {boolean}
 */
ASPxClientRatingControl.prototype.GetReadOnly = function() {};

/**
 * Specifies whether the control's status is read-only.
 * @param {boolean} value true to make the control read-only; otherwise, false.
 * @return {void}
 */
ASPxClientRatingControl.prototype.SetReadOnly = function(value) {};

/**
 * Returns the value of the ASPxRatingControl.
 * @return {number}
 */
ASPxClientRatingControl.prototype.GetValue = function() {};

/**
 * Modifies the value of the ASPxRatingControl on the client side.
 * @param {number} value A decimal value representing the value of the control.
 * @return {void}
 */
ASPxClientRatingControl.prototype.SetValue = function(value) {};
/**
 * @record
 * @struct
 */
function ASPxClientRatingControlItemClickEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientRatingControlItemClickEventArgs() {}
 /** @type {number} */
ASPxClientRatingControlItemClickEventArgs.prototype.index;
/**
 * @record
 * @struct
 */
function ASPxClientRatingControlItemMouseEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientRatingControlItemMouseEventArgs() {}
 /** @type {number} */
ASPxClientRatingControlItemMouseEventArgs.prototype.index;
/**
 * @record
 * @struct
 */
function ASPxClientRibbon() {}
 /** @type {!ASPxClientEvent<!ASPxClientRibbonCommandExecutedEventHandler<?>>} */
ASPxClientRibbon.prototype.CommandExecuted;
 /** @type {!ASPxClientEvent<!ASPxClientRibbonTabEventHandler<?>>} */
ASPxClientRibbon.prototype.ActiveTabChanged;
 /** @type {!ASPxClientEvent<!ASPxClientRibbonMinimizationStateEventHandler<?>>} */
ASPxClientRibbon.prototype.MinimizationStateChanged;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientRibbon.prototype.FileTabClicked;
 /** @type {!ASPxClientEvent<!ASPxClientRibbonDialogBoxLauncherClickedEventHandler<?>>} */
ASPxClientRibbon.prototype.DialogBoxLauncherClicked;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientRibbon.prototype.KeyTipsClosedOnEscape;

/**
 * Specifies whether the ribbon control is enabled.
 * @param {boolean} enabled true to enable the ribbon; false to disable it.
 * @return {void}
 */
ASPxClientRibbon.prototype.SetEnabled = function(enabled) {};

/**
 * Returns a value indicating whether the ribbon is enabled.
 * @return {boolean}
 */
ASPxClientRibbon.prototype.GetEnabled = function() {};

/**
 * Returns a tab specified by its index.
 * @param {number} index An integer value specifying the zero-based index of the tab object to retrieve.
 * @return {!ASPxClientRibbonTab}
 */
ASPxClientRibbon.prototype.GetTab = function(index) {};

/**
 * Returns a tab specified by its name.
 * @param {string} name A string value specifying the name of the tab.
 * @return {!ASPxClientRibbonTab}
 */
ASPxClientRibbon.prototype.GetTabByName = function(name) {};

/**
 * Returns the number of tabs in the ribbon Tabs collection.
 * @return {number}
 */
ASPxClientRibbon.prototype.GetTabCount = function() {};

/**
 * Returns the active tab within the ribbon control.
 * @return {!ASPxClientRibbonTab}
 */
ASPxClientRibbon.prototype.GetActiveTab = function() {};

/**
 * Makes the specified tab active in the ribbon control on the client side.
 * @param {!ASPxClientRibbonTab} tab A ASPxClientRibbonTab object specifying the tab selection.
 * @return {void}
 */
ASPxClientRibbon.prototype.SetActiveTab = function(tab) {};

/**
 * Makes a tab active within the ribbon control, specifying the tab's index.
 * @param {number} index An integer value specifying the index of the tab to select.
 * @return {void}
 */
ASPxClientRibbon.prototype.SetActiveTabIndex = function(index) {};

/**
 * Returns a ribbon item specified by its name.
 * @param {string} name A string value specifying the name of the item.
 * @return {!ASPxClientRibbonItem}
 */
ASPxClientRibbon.prototype.GetItemByName = function(name) {};

/**
 * Returns a value of item with the specified name.
 * @param {string} name A string value specifying the name of the item.
 * @return {!Object}
 */
ASPxClientRibbon.prototype.GetItemValueByName = function(name) {};

/**
 * Sets the value of the item with the specified name.
 * @param {string} name A string value specifying the name of the item.
 * @param {!Object} value An object that is the new item value.
 * @return {void}
 */
ASPxClientRibbon.prototype.SetItemValueByName = function(name, value) {};

/**
 * Specifies whether the ribbon is minimized.
 * @param {boolean} minimized true to set the ribbon state to minimized; false to set the ribbon state to normal.
 * @return {void}
 */
ASPxClientRibbon.prototype.SetMinimized = function(minimized) {};

/**
 * Gets a value specifying whether the ribbon is minimized.
 * @return {boolean}
 */
ASPxClientRibbon.prototype.GetMinimized = function() {};

/**
 * Specifies the visibility of a context tab category specified by its name.
 * @param {string} categoryName A Name property value of the required category.
 * @param {boolean} visible true to make a category visible; false to make it hidden.
 * @return {void}
 */
ASPxClientRibbon.prototype.SetContextTabCategoryVisible = function(categoryName, visible) {};

/**
 * Shows ribbon key tips.
 * @return {void}
 */
ASPxClientRibbon.prototype.ShowKeyTips = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientRibbonTab() {}
 /** @type {?} */
ASPxClientRibbonTab.prototype.ribbon;
 /** @type {number} */
ASPxClientRibbonTab.prototype.index;
 /** @type {string} */
ASPxClientRibbonTab.prototype.name;

/**
 * Returns the text displayed in the tab.
 * @return {string}
 */
ASPxClientRibbonTab.prototype.GetText = function() {};

/**
 * Sets a value specifying whether the tab is enabled.
 * @param {boolean} enabled true to enable the tab; false to disable it.
 * @return {void}
 */
ASPxClientRibbonTab.prototype.SetEnabled = function(enabled) {};

/**
 * Returns a value indicating whether a ribbon tab is enabled.
 * @return {boolean}
 */
ASPxClientRibbonTab.prototype.GetEnabled = function() {};

/**
 * Returns a value specifying whether a ribbon tab is displayed.
 * @return {boolean}
 */
ASPxClientRibbonTab.prototype.GetVisible = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientRibbonGroup() {}
 /** @type {?} */
ASPxClientRibbonGroup.prototype.ribbon;
 /** @type {!ASPxClientRibbonTab} */
ASPxClientRibbonGroup.prototype.tab;
 /** @type {number} */
ASPxClientRibbonGroup.prototype.index;
 /** @type {string} */
ASPxClientRibbonGroup.prototype.name;

/**
 * Returns a value specifying whether a ribbon group is displayed.
 * @return {boolean}
 */
ASPxClientRibbonGroup.prototype.GetVisible = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientRibbonItem() {}
 /** @type {!ASPxClientRibbonGroup} */
ASPxClientRibbonItem.prototype.group;
 /** @type {number} */
ASPxClientRibbonItem.prototype.index;
 /** @type {string} */
ASPxClientRibbonItem.prototype.name;
 /** @type {?} */
ASPxClientRibbonItem.prototype.ribbon;

/**
 * Returns a value indicating whether a ribbon item is enabled.
 * @return {boolean}
 */
ASPxClientRibbonItem.prototype.GetEnabled = function() {};

/**
 * Sets a value specifying whether the item is enabled.
 * @param {boolean} enabled true to enable the item; false to disable it.
 * @return {void}
 */
ASPxClientRibbonItem.prototype.SetEnabled = function(enabled) {};

/**
 * Returns the item value.
 * @return {!Object}
 */
ASPxClientRibbonItem.prototype.GetValue = function() {};

/**
 * Sets the item value.
 * @param {!Object} value An  that specifies the item value.
 * @return {void}
 */
ASPxClientRibbonItem.prototype.SetValue = function(value) {};

/**
 * Returns a value specifying whether a ribbon item is displayed.
 * @return {boolean}
 */
ASPxClientRibbonItem.prototype.GetVisible = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientRibbonCommandExecutedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientRibbonCommandExecutedEventArgs() {}
 /** @type {!ASPxClientRibbonItem} */
ASPxClientRibbonCommandExecutedEventArgs.prototype.item;
 /** @type {string} */
ASPxClientRibbonCommandExecutedEventArgs.prototype.parameter;
/**
 * @record
 * @struct
 */
function ASPxClientRibbonTabEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientRibbonTabEventArgs() {}
 /** @type {!ASPxClientRibbonTab} */
ASPxClientRibbonTabEventArgs.prototype.tab;
/**
 * @record
 * @struct
 */
function ASPxClientRibbonMinimizationStateEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientRibbonMinimizationStateEventArgs() {}
 /** @type {number} */
ASPxClientRibbonMinimizationStateEventArgs.prototype.ribbonState;
/**
 * @record
 * @struct
 */
function ASPxClientRibbonDialogBoxLauncherClickedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientRibbonDialogBoxLauncherClickedEventArgs() {}
 /** @type {!ASPxClientRibbonGroup} */
ASPxClientRibbonDialogBoxLauncherClickedEventArgs.prototype.group;
/**
 * @record
 * @struct
 */
function ASPxClientRoundPanel() {}
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientRoundPanel.prototype.CollapsedChanged;
 /** @type {!ASPxClientEvent<!ASPxClientCancelEventHandler<?>>} */
ASPxClientRoundPanel.prototype.CollapsedChanging;
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientRoundPanel.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientRoundPanel.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientRoundPanel.prototype.CallbackError;

/**
 * Sends a callback to the server and generates the server-side ContentCallback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side ContentCallback event, passing it the specified argument.
 * @param {string} parameter A string value that is any information that needs to be sent to the server-side ContentCallback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
ASPxClientRoundPanel.prototype.PerformCallback = function(parameter, onSuccess) {};

/**
 * Returns the text displayed within the panel's header.
 * @return {string}
 */
ASPxClientRoundPanel.prototype.GetHeaderText = function() {};

/**
 * Specifies the text displayed in the panel's header.
 * @param {string} text A string value that specifies the panel header's text.
 * @return {void}
 */
ASPxClientRoundPanel.prototype.SetHeaderText = function(text) {};

/**
 * Returns a value indicating whether the panel is collapsed.
 * @return {boolean}
 */
ASPxClientRoundPanel.prototype.GetCollapsed = function() {};

/**
 * Sets a value indicating whether the panel is collapsed.
 * @param {boolean} collapsed true, to collapse the panel; otherwise, false.
 * @return {void}
 */
ASPxClientRoundPanel.prototype.SetCollapsed = function(collapsed) {};
/**
 * @record
 * @struct
 */
function ASPxClientSplitter() {}
 /** @type {!ASPxClientEvent<!ASPxClientSplitterPaneCancelEventHandler<?>>} */
ASPxClientSplitter.prototype.PaneResizing;
 /** @type {!ASPxClientEvent<!ASPxClientSplitterPaneEventHandler<?>>} */
ASPxClientSplitter.prototype.PaneResized;
 /** @type {!ASPxClientEvent<!ASPxClientSplitterPaneCancelEventHandler<?>>} */
ASPxClientSplitter.prototype.PaneCollapsing;
 /** @type {!ASPxClientEvent<!ASPxClientSplitterPaneEventHandler<?>>} */
ASPxClientSplitter.prototype.PaneCollapsed;
 /** @type {!ASPxClientEvent<!ASPxClientSplitterPaneCancelEventHandler<?>>} */
ASPxClientSplitter.prototype.PaneExpanding;
 /** @type {!ASPxClientEvent<!ASPxClientSplitterPaneEventHandler<?>>} */
ASPxClientSplitter.prototype.PaneExpanded;
 /** @type {!ASPxClientEvent<!ASPxClientSplitterPaneEventHandler<?>>} */
ASPxClientSplitter.prototype.PaneResizeCompleted;
 /** @type {!ASPxClientEvent<!ASPxClientSplitterPaneEventHandler<?>>} */
ASPxClientSplitter.prototype.PaneContentUrlLoaded;

/**
 * Returns the number of panes at the root level of a splitter.
 * @return {number}
 */
ASPxClientSplitter.prototype.GetPaneCount = function() {};

/**
 * Returns the splitter's root pane specified by its index within the Panes collection.
 * @param {number} index An integer value specifying the zero-based index of the root pane to be retrieved.
 * @return {!ASPxClientSplitterPane}
 */
ASPxClientSplitter.prototype.GetPane = function(index) {};

/**
 * Returns a pane specified by its name.
 * @param {string} name A string value specifying the name of the pane.
 * @return {!ASPxClientSplitterPane}
 */
ASPxClientSplitter.prototype.GetPaneByName = function(name) {};

/**
 * Specifies whether the control's panes can be resized by end-users on the client side.
 * @param {boolean} allowResize true if pane resizing is allowed; otherwise, false.
 * @return {void}
 */
ASPxClientSplitter.prototype.SetAllowResize = function(allowResize) {};

/**
 * Returns a string value that represents the client state of splitter panes.
 * @return {string}
 */
ASPxClientSplitter.prototype.GetLayoutData = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientSplitterPane() {}
 /** @type {number} */
ASPxClientSplitterPane.prototype.index;
 /** @type {string} */
ASPxClientSplitterPane.prototype.name;

/**
 * Returns a client splitter object that contains the current pane.
 * @return {?}
 */
ASPxClientSplitterPane.prototype.GetSplitter = function() {};

/**
 * Returns the immediate parent of the current pane.
 * @return {!ASPxClientSplitterPane}
 */
ASPxClientSplitterPane.prototype.GetParentPane = function() {};

/**
 * Returns the previous sibling pane of the current pane.
 * @return {!ASPxClientSplitterPane}
 */
ASPxClientSplitterPane.prototype.GetPrevPane = function() {};

/**
 * Returns the next sibling pane of the current pane.
 * @return {!ASPxClientSplitterPane}
 */
ASPxClientSplitterPane.prototype.GetNextPane = function() {};

/**
 * Determines whether the current pane is the first pane within the SplitterPaneCollection.
 * @return {boolean}
 */
ASPxClientSplitterPane.prototype.IsFirstPane = function() {};

/**
 * Determines whether the current pane is the last pane within the SplitterPaneCollection.
 * @return {boolean}
 */
ASPxClientSplitterPane.prototype.IsLastPane = function() {};

/**
 * Returns a value that indicates the orientation in which the current pane and its sibling panes are stacked.
 * @return {boolean}
 */
ASPxClientSplitterPane.prototype.IsVertical = function() {};

/**
 * Returns the number of the current pane's immediate child panes.
 * @return {number}
 */
ASPxClientSplitterPane.prototype.GetPaneCount = function() {};

/**
 * Returns the current pane's immediate child pane specified by its index.
 * @param {number} index An integer value specifying the zero-based index of the child pane to be retrieved.
 * @return {!ASPxClientSplitterPane}
 */
ASPxClientSplitterPane.prototype.GetPane = function(index) {};

/**
 * Returns the current pane's child pane specified by its name.
 * @param {string} name A string value specifying the name of the pane.
 * @return {!ASPxClientSplitterPane}
 */
ASPxClientSplitterPane.prototype.GetPaneByName = function(name) {};

/**
 * Gets the width of the pane's content area.
 * @return {number}
 */
ASPxClientSplitterPane.prototype.GetClientWidth = function() {};

/**
 * Gets the height of the pane's content area.
 * @return {number}
 */
ASPxClientSplitterPane.prototype.GetClientHeight = function() {};

/**
 * Collapses the current pane and occupies its space by maximizing the specified pane.
 * @param {!ASPxClientSplitterPane} maximizedPane A ASPxClientSplitterPane object specifying the pane to be maximized to occupy the freed space.
 * @return {boolean}
 */
ASPxClientSplitterPane.prototype.Collapse = function(maximizedPane) {};

/**
 * Collapses the current pane in a forward direction and occupies its space by maximizing the previous adjacent pane.
 * @return {boolean}
 */
ASPxClientSplitterPane.prototype.CollapseForward = function() {};

/**
 * Collapses the current pane in a backward direction, and occupies its space by maximizing the next adjacent pane.
 * @return {boolean}
 */
ASPxClientSplitterPane.prototype.CollapseBackward = function() {};

/**
 * Expands the current pane object on the client side.
 * @return {boolean}
 */
ASPxClientSplitterPane.prototype.Expand = function() {};

/**
 * Returns whether the pane is collapsed.
 * @return {boolean}
 */
ASPxClientSplitterPane.prototype.IsCollapsed = function() {};

/**
 * Returns whether the pane's content is loaded from an external web page.
 * @return {boolean}
 */
ASPxClientSplitterPane.prototype.IsContentUrlPane = function() {};

/**
 * Gets the URL of a web page displayed as a pane's content.
 * @return {string}
 */
ASPxClientSplitterPane.prototype.GetContentUrl = function() {};

/**
 * Sets the URL to point to a web page that should be loaded into, and displayed within the current pane.
 * Sets the URL to point to a web page that should be loaded into, and displayed within the current pane, but should not be cached by a client browser.
 * @param {string} url A string value specifying the URL to a web page displayed within the pane.
 * @param {boolean=} preventBrowserCaching true to prevent the browser to cache the loaded content; false to allow browser caching.
 * @return {void}
 */
ASPxClientSplitterPane.prototype.SetContentUrl = function(url, preventBrowserCaching) {};

/**
 * Refreshes the content of the web page displayed within the current pane.
 * @return {void}
 */
ASPxClientSplitterPane.prototype.RefreshContentUrl = function() {};

/**
 * Returns an iframe object containing a web page specified via the pane's SetContentUrl client method).
 * @return {!Object}
 */
ASPxClientSplitterPane.prototype.GetContentIFrame = function() {};

/**
 * Specifies whether the current pane can be resized by end-users on the client side.
 * @param {boolean} allowResize true if pane resizing is allowed; otherwise, false.
 * @return {void}
 */
ASPxClientSplitterPane.prototype.SetAllowResize = function(allowResize) {};

/**
 * Forces the client PaneResized event to be generated.
 * @return {void}
 */
ASPxClientSplitterPane.prototype.RaiseResizedEvent = function() {};

/**
 * Returns an HTML element representing a splitter pane object.
 * @return {!Object}
 */
ASPxClientSplitterPane.prototype.GetElement = function() {};

/**
 * Specifies the splitter pane's size in pixels.
 * Specifies the splitter pane's size, in pixels or percents.
 * @param {number|string} size An integer value that specifies the splitter pane's size. / A string value that specifies the splitter pane's size, in pixels or percents.
 * @return {void}
 */
ASPxClientSplitterPane.prototype.SetSize = function(size) {};

/**
 * Returns the splitter pane's size, in pixels or percents.
 * @return {string}
 */
ASPxClientSplitterPane.prototype.GetSize = function() {};

/**
 * Returns the distance between the top edge of the pane content and the topmost portion of the content currently visible in the pane.
 * @return {number}
 */
ASPxClientSplitterPane.prototype.GetScrollTop = function() {};

/**
 * Specifies the distance between the top edge of the pane content and the topmost portion of the content currently visible in the pane.
 * @param {number} value An integer value that is the distance (in pixels).
 * @return {void}
 */
ASPxClientSplitterPane.prototype.SetScrollTop = function(value) {};

/**
 * Returns the distance between the left edge of the pane content and the leftmost portion of the content currently visible in the pane.
 * @return {number}
 */
ASPxClientSplitterPane.prototype.GetScrollLeft = function() {};

/**
 * Specifies the distance between the left edge of the pane content and the leftmost portion of the content currently visible in the pane.
 * @param {number} value An integer value that is the distance (in pixels).
 * @return {void}
 */
ASPxClientSplitterPane.prototype.SetScrollLeft = function(value) {};
/**
 * @record
 * @struct
 */
function ASPxClientSplitterPaneEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientSplitterPaneEventArgs() {}
 /** @type {!ASPxClientSplitterPane} */
ASPxClientSplitterPaneEventArgs.prototype.pane;
/**
 * @record
 * @struct
 */
function ASPxClientSplitterPaneCancelEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientSplitterPaneEventArgs}
 * @record
 * @struct
 */
function ASPxClientSplitterPaneCancelEventArgs() {}
 /** @type {boolean} */
ASPxClientSplitterPaneCancelEventArgs.prototype.cancel;
/**
 * @record
 * @struct
 */
function ASPxClientTabControlBase() {}
 /** @type {!ASPxClientEvent<!ASPxClientTabControlTabClickEventHandler<?>>} */
ASPxClientTabControlBase.prototype.TabClick;
 /** @type {!ASPxClientEvent<!ASPxClientTabControlTabEventHandler<?>>} */
ASPxClientTabControlBase.prototype.ActiveTabChanged;
 /** @type {!ASPxClientEvent<!ASPxClientTabControlTabCancelEventHandler<?>>} */
ASPxClientTabControlBase.prototype.ActiveTabChanging;
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientTabControlBase.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientTabControlBase.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientTabControlBase.prototype.CallbackError;

/**
 * Modifies a tab page's size in accordance with the content.
 * @return {void}
 */
ASPxClientTabControlBase.prototype.AdjustSize = function() {};

/**
 * Returns the active tab within the tab control.
 * @return {!ASPxClientTab}
 */
ASPxClientTabControlBase.prototype.GetActiveTab = function() {};

/**
 * Makes the specified tab active within the tab control on the client side.
 * @param {!ASPxClientTab} tab An ASPxClientTab object specifying the tab to select.
 * @return {void}
 */
ASPxClientTabControlBase.prototype.SetActiveTab = function(tab) {};

/**
 * Returns the index of the active tab within the tab control.
 * @return {number}
 */
ASPxClientTabControlBase.prototype.GetActiveTabIndex = function() {};

/**
 * Makes a tab active within the tab control, specifying the tab's index.
 * @param {number} index An integer value specifying the index of the tab to select.
 * @return {void}
 */
ASPxClientTabControlBase.prototype.SetActiveTabIndex = function(index) {};

/**
 * Returns the number of tabs in the ASPxTabControl.
 * @return {number}
 */
ASPxClientTabControlBase.prototype.GetTabCount = function() {};

/**
 * Returns a tab specified by its index.
 * @param {number} index An integer value specifying the zero-based index of the tab object to retrieve.
 * @return {!ASPxClientTab}
 */
ASPxClientTabControlBase.prototype.GetTab = function(index) {};

/**
 * Returns a tab specified by its name.
 * @param {string} name A string value specifying the name of the tab.
 * @return {!ASPxClientTab}
 */
ASPxClientTabControlBase.prototype.GetTabByName = function(name) {};
/**
 * @record
 * @struct
 */
function ASPxClientTabControl() {}
/**
 * @record
 * @struct
 */
function ASPxClientPageControl() {}

/**
 * Returns the HTML code that represents the contents of the specified page within the page control.
 * @param {!ASPxClientTab} tab An ASPxClientTab object that specifies the required page.
 * @return {string}
 */
ASPxClientPageControl.prototype.GetTabContentHTML = function(tab) {};

/**
 * Defines the HTML content for a specific tab page within the page control.
 * @param {!ASPxClientTab} tab An ASPxClientTab object that specifies the required tab page.
 * @param {string} html A string value that represents the HTML code defining the content of the specified page.
 * @return {void}
 */
ASPxClientPageControl.prototype.SetTabContentHTML = function(tab, html) {};

/**
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
 * @param {string} parameter A string value that represents any information that needs to be sent to the server-side Callback event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
ASPxClientPageControl.prototype.PerformCallback = function(parameter, onSuccess) {};
/**
 * @record
 * @struct
 */
function ASPxClientTab() {}
 /** @type {?} */
ASPxClientTab.prototype.tabControl;
 /** @type {number} */
ASPxClientTab.prototype.index;
 /** @type {string} */
ASPxClientTab.prototype.name;

/**
 * Returns a value specifying whether a tab is enabled.
 * @return {boolean}
 */
ASPxClientTab.prototype.GetEnabled = function() {};

/**
 * Specifies whether the tab is enabled.
 * @param {boolean} value true to enable the tab; otherwise, false.
 * @return {void}
 */
ASPxClientTab.prototype.SetEnabled = function(value) {};

/**
 * Returns the URL pointing to the image displayed within the tab.
 * @return {string}
 */
ASPxClientTab.prototype.GetImageUrl = function() {};

/**
 * Specifies the URL which points to the image displayed within the tab.
 * @param {string} value A string value that is the URL to the image displayed within the tab.
 * @return {void}
 */
ASPxClientTab.prototype.SetImageUrl = function(value) {};

/**
 * Returns the URL pointing to the image displayed within the active tab.
 * @return {string}
 */
ASPxClientTab.prototype.GetActiveImageUrl = function() {};

/**
 * Specifies the URL which points to the image displayed within the active tab.
 * @param {string} value A string value that is the URL to the image displayed within the active tab.
 * @return {void}
 */
ASPxClientTab.prototype.SetActiveImageUrl = function(value) {};

/**
 * Gets an URL which defines the navigation location for the tab.
 * @return {string}
 */
ASPxClientTab.prototype.GetNavigateUrl = function() {};

/**
 * Specifies a URL which defines the navigation location for the tab.
 * @param {string} value A string value which is a URL to where the client web browser will navigate when the tab is clicked.
 * @return {void}
 */
ASPxClientTab.prototype.SetNavigateUrl = function(value) {};

/**
 * Returns text displayed within the tab.
 * @return {string}
 */
ASPxClientTab.prototype.GetText = function() {};

/**
 * Specifies the text displayed within the tab.
 * @param {string} value A string value that is the text displayed within the tab.
 * @return {void}
 */
ASPxClientTab.prototype.SetText = function(value) {};

/**
 * Returns a value specifying whether a tab is displayed.
 * @return {boolean}
 */
ASPxClientTab.prototype.GetVisible = function() {};

/**
 * Specifies whether the tab is visible.
 * @param {boolean} value true is the tab is visible; otherwise, false.
 * @return {void}
 */
ASPxClientTab.prototype.SetVisible = function(value) {};
/**
 * @record
 * @struct
 */
function ASPxClientTabControlTabEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientTabControlTabEventArgs() {}
 /** @type {!ASPxClientTab} */
ASPxClientTabControlTabEventArgs.prototype.tab;
/**
 * @record
 * @struct
 */
function ASPxClientTabControlTabCancelEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientTabControlTabCancelEventArgs() {}
 /** @type {!ASPxClientTab} */
ASPxClientTabControlTabCancelEventArgs.prototype.tab;
 /** @type {boolean} */
ASPxClientTabControlTabCancelEventArgs.prototype.reloadContentOnCallback;
/**
 * @record
 * @struct
 */
function ASPxClientTabControlTabClickEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientTabControlTabCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientTabControlTabClickEventArgs() {}
 /** @type {!Object} */
ASPxClientTabControlTabClickEventArgs.prototype.htmlElement;
 /** @type {!Object} */
ASPxClientTabControlTabClickEventArgs.prototype.htmlEvent;
/**
 * @record
 * @struct
 */
function ASPxClientTimer() {}
 /** @type {!ASPxClientEvent<!ASPxClientProcessingModeEventHandler<?>>} */
ASPxClientTimer.prototype.Tick;

/**
 * Returns a value indicating whether the timer is enabled.
 * @return {boolean}
 */
ASPxClientTimer.prototype.GetEnabled = function() {};

/**
 * Enables the timer.
 * @param {boolean} enabled true to turn the timer on; false, to turn the timer off.
 * @return {void}
 */
ASPxClientTimer.prototype.SetEnabled = function(enabled) {};

/**
 * Gets the time before the Tick event.
 * @return {number}
 */
ASPxClientTimer.prototype.GetInterval = function() {};

/**
 * Specifies the time before the Tick event.
 * @param {number} interval An integer value that specifies the number of milliseconds before the Tick event is raised relative to the last occurrence of the Tick event. The value cannot be less than one.
 * @return {void}
 */
ASPxClientTimer.prototype.SetInterval = function(interval) {};
/**
 * @record
 * @struct
 */
function ASPxClientTitleIndex() {}
 /** @type {!ASPxClientEvent<!ASPxClientTitleIndexItemEventHandler<?>>} */
ASPxClientTitleIndex.prototype.ItemClick;
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientTitleIndex.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientTitleIndex.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientTitleIndex.prototype.CallbackError;
/**
 * @record
 * @struct
 */
function ASPxClientTitleIndexItemEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientTitleIndexItemEventArgs() {}
 /** @type {!Object} */
ASPxClientTitleIndexItemEventArgs.prototype.name;
 /** @type {!Object} */
ASPxClientTitleIndexItemEventArgs.prototype.htmlElement;
 /** @type {!Object} */
ASPxClientTitleIndexItemEventArgs.prototype.htmlEvent;
/**
 * @record
 * @struct
 */
function ASPxClientTreeView() {}
 /** @type {!ASPxClientEvent<!ASPxClientTreeViewNodeClickEventHandler<?>>} */
ASPxClientTreeView.prototype.NodeClick;
 /** @type {!ASPxClientEvent<!ASPxClientTreeViewNodeEventHandler<?>>} */
ASPxClientTreeView.prototype.ExpandedChanged;
 /** @type {!ASPxClientEvent<!ASPxClientTreeViewNodeCancelEventHandler<?>>} */
ASPxClientTreeView.prototype.ExpandedChanging;
 /** @type {!ASPxClientEvent<!ASPxClientTreeViewNodeProcessingModeEventHandler<?>>} */
ASPxClientTreeView.prototype.CheckedChanged;
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientTreeView.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientTreeView.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientTreeView.prototype.CallbackError;

/**
 * Returns a node specified by its index within the ASPxTreeView's node collection.
 * @param {number} index An integer value specifying the zero-based index of the node to be retrieved.
 * @return {!ASPxClientTreeViewNode}
 */
ASPxClientTreeView.prototype.GetNode = function(index) {};

/**
 * Returns a node specified by its name.
 * @param {string} name A string value specifying the name of the node.
 * @return {!ASPxClientTreeViewNode}
 */
ASPxClientTreeView.prototype.GetNodeByName = function(name) {};

/**
 * Returns a node specified by its text.
 * @param {string} text A string value specifying the text content of the node.
 * @return {!ASPxClientTreeViewNode}
 */
ASPxClientTreeView.prototype.GetNodeByText = function(text) {};

/**
 * Returns the number of nodes at the ASPxTreeView's zero level.
 * @return {number}
 */
ASPxClientTreeView.prototype.GetNodeCount = function() {};

/**
 * Returns the selected node within the ASPxTreeView control on the client side.
 * @return {!ASPxClientTreeViewNode}
 */
ASPxClientTreeView.prototype.GetSelectedNode = function() {};

/**
 * Selects the specified node within the ASPxTreeView control on the client side.
 * @param {!ASPxClientTreeViewNode} node An ASPxClientTreeViewNode object specifying the node to select.
 * @return {void}
 */
ASPxClientTreeView.prototype.SetSelectedNode = function(node) {};

/**
 * Gets the root node of the ASPxTreeView object.
 * @return {!ASPxClientTreeViewNode}
 */
ASPxClientTreeView.prototype.GetRootNode = function() {};

/**
 * Collapses all nodes in the ASPxTreeView on the client side.
 * @return {void}
 */
ASPxClientTreeView.prototype.CollapseAll = function() {};

/**
 * Expands all nodes in the ASPxTreeView on the client side.
 * @return {void}
 */
ASPxClientTreeView.prototype.ExpandAll = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientTreeViewNode() {}
 /** @type {?} */
ASPxClientTreeViewNode.prototype.treeView;
 /** @type {!ASPxClientTreeViewNode} */
ASPxClientTreeViewNode.prototype.parent;
 /** @type {number} */
ASPxClientTreeViewNode.prototype.index;
 /** @type {string} */
ASPxClientTreeViewNode.prototype.name;

/**
 * Returns the number of the current node's immediate child nodes.
 * @return {number}
 */
ASPxClientTreeViewNode.prototype.GetNodeCount = function() {};

/**
 * Returns the current node's immediate child node specified by its index.
 * @param {number} index An integer value specifying the zero-based index of the node to be retrieved.
 * @return {!ASPxClientTreeViewNode}
 */
ASPxClientTreeViewNode.prototype.GetNode = function(index) {};

/**
 * Returns the current node's child node specified by its name.
 * @param {string} name A string value specifying the name of the node.
 * @return {!ASPxClientTreeViewNode}
 */
ASPxClientTreeViewNode.prototype.GetNodeByName = function(name) {};

/**
 * Returns the current node's child node specified by its text.
 * @param {string} text A string value specifying the text content of the node.
 * @return {!ASPxClientTreeViewNode}
 */
ASPxClientTreeViewNode.prototype.GetNodeByText = function(text) {};

/**
 * Returns a value indicating whether the node is expanded.
 * @return {boolean}
 */
ASPxClientTreeViewNode.prototype.GetExpanded = function() {};

/**
 * Sets a value which specifies the node's expansion state.
 * @param {boolean} value true if the node is expanded; otherwise, false.
 * @return {void}
 */
ASPxClientTreeViewNode.prototype.SetExpanded = function(value) {};

/**
 * Returns a value indicating whether the node is checked.
 * @return {boolean}
 */
ASPxClientTreeViewNode.prototype.GetChecked = function() {};

/**
 * Sets a value indicating whether the node is checked.
 * @param {boolean} value true if the node is checked; otherwise, false.
 * @return {void}
 */
ASPxClientTreeViewNode.prototype.SetChecked = function(value) {};

/**
 * Returns a value which specifies the node's check state.
 * @return {string}
 */
ASPxClientTreeViewNode.prototype.GetCheckState = function() {};

/**
 * Returns a value specifying whether the node is enabled.
 * @return {boolean}
 */
ASPxClientTreeViewNode.prototype.GetEnabled = function() {};

/**
 * Sets a value specifying whether the node is enabled.
 * @param {boolean} value true to make the node enabled; false to disable it.
 * @return {void}
 */
ASPxClientTreeViewNode.prototype.SetEnabled = function(value) {};

/**
 * Returns the URL pointing to the image displayed within the node.
 * @return {string}
 */
ASPxClientTreeViewNode.prototype.GetImageUrl = function() {};

/**
 * Sets the URL which points to the image displayed within the node.
 * @param {string} value A string value specifying the URL to the image displayed within the node.
 * @return {void}
 */
ASPxClientTreeViewNode.prototype.SetImageUrl = function(value) {};

/**
 * Gets an URL which defines the navigation location for the node's hyperlink.
 * @return {string}
 */
ASPxClientTreeViewNode.prototype.GetNavigateUrl = function() {};

/**
 * Specifies a URL which defines the node's navigate URL.
 * @param {string} value A string value which specifies a URL to where the client web browser will navigate when the node is clicked.
 * @return {void}
 */
ASPxClientTreeViewNode.prototype.SetNavigateUrl = function(value) {};

/**
 * Gets the text, displayed within the node.
 * @return {string}
 */
ASPxClientTreeViewNode.prototype.GetText = function() {};

/**
 * Specifies the text, displayed within the node.
 * @param {string} value A string value that represents the text displayed within the node.
 * @return {void}
 */
ASPxClientTreeViewNode.prototype.SetText = function(value) {};

/**
 * Returns a value specifying whether a node is displayed.
 * @return {boolean}
 */
ASPxClientTreeViewNode.prototype.GetVisible = function() {};

/**
 * Specifies whether the node is visible.
 * @param {boolean} value true if the node is visible; otherwise, false.
 * @return {void}
 */
ASPxClientTreeViewNode.prototype.SetVisible = function(value) {};

/**
 * Gets the HTML object that contains the current node.
 * @return {!Object}
 */
ASPxClientTreeViewNode.prototype.GetHtmlElement = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientTreeViewNodeProcessingModeEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientTreeViewNodeProcessingModeEventArgs() {}
 /** @type {!ASPxClientTreeViewNode} */
ASPxClientTreeViewNodeProcessingModeEventArgs.prototype.node;
/**
 * @record
 * @struct
 */
function ASPxClientTreeViewNodeClickEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientTreeViewNodeProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientTreeViewNodeClickEventArgs() {}
 /** @type {!Object} */
ASPxClientTreeViewNodeClickEventArgs.prototype.htmlElement;
 /** @type {!Object} */
ASPxClientTreeViewNodeClickEventArgs.prototype.htmlEvent;
/**
 * @record
 * @struct
 */
function ASPxClientTreeViewNodeEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientTreeViewNodeEventArgs() {}
 /** @type {!ASPxClientTreeViewNode} */
ASPxClientTreeViewNodeEventArgs.prototype.node;
/**
 * @record
 * @struct
 */
function ASPxClientTreeViewNodeCancelEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeCancelEventArgs}
 * @record
 * @struct
 */
function ASPxClientTreeViewNodeCancelEventArgs() {}
 /** @type {!ASPxClientTreeViewNode} */
ASPxClientTreeViewNodeCancelEventArgs.prototype.node;
/**
 * @record
 * @struct
 */
function ASPxClientUploadControl() {}
 /** @type {!ASPxClientEvent<!ASPxClientUploadControlFileUploadCompleteEventHandler<?>>} */
ASPxClientUploadControl.prototype.FileUploadComplete;
 /** @type {!ASPxClientEvent<!ASPxClientUploadControlFilesUploadCompleteEventHandler<?>>} */
ASPxClientUploadControl.prototype.FilesUploadComplete;
 /** @type {!ASPxClientEvent<!ASPxClientUploadControlFilesUploadStartEventHandler<?>>} */
ASPxClientUploadControl.prototype.FileUploadStart;
 /** @type {!ASPxClientEvent<!ASPxClientUploadControlFilesUploadStartEventHandler<?>>} */
ASPxClientUploadControl.prototype.FilesUploadStart;
 /** @type {!ASPxClientEvent<!ASPxClientUploadControlTextChangedEventHandler<?>>} */
ASPxClientUploadControl.prototype.TextChanged;
 /** @type {!ASPxClientEvent<!ASPxClientUploadControlUploadingProgressChangedEventHandler<?>>} */
ASPxClientUploadControl.prototype.UploadingProgressChanged;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientUploadControl.prototype.FileInputCountChanged;
 /** @type {!ASPxClientEvent<!ASPxClientUploadControlDropZoneEnterEventHandler<?>>} */
ASPxClientUploadControl.prototype.DropZoneEnter;
 /** @type {!ASPxClientEvent<!ASPxClientUploadControlDropZoneLeaveEventHandler<?>>} */
ASPxClientUploadControl.prototype.DropZoneLeave;

/**
 * Initiates uploading of the specified file to the web server's memory.
 * @return {void}
 */
ASPxClientUploadControl.prototype.UploadFile = function() {};

/**
 * Adds a new file input element to the ASPxUploadControl.
 * @return {void}
 */
ASPxClientUploadControl.prototype.AddFileInput = function() {};

/**
 * Removes a file input element from the ASPxUploadControl.
 * @param {number} index An integer value that represents a file input element's index.
 * @return {void}
 */
ASPxClientUploadControl.prototype.RemoveFileInput = function(index) {};

/**
 * Removes a file with the specified index from the selected file list.
 * @param {number} fileIndex An integer value that is the zero-based index of an item in the file list.
 * @return {void}
 */
ASPxClientUploadControl.prototype.RemoveFileFromSelection = function(fileIndex) {};

/**
 * Gets the text displayed within the edit box of the specified file input element.
 * @param {number} index An integer value that specifies the required file input element's index.
 * @return {string}
 */
ASPxClientUploadControl.prototype.GetText = function(index) {};

/**
 * Gets the number of file input elements contained within the ASPxUploadControl.
 * @return {number}
 */
ASPxClientUploadControl.prototype.GetFileInputCount = function() {};

/**
 * Specifies the count of the file input elements within the upload control.
 * @param {number} count An integer value that specifies the file input elements count.
 * @return {void}
 */
ASPxClientUploadControl.prototype.SetFileInputCount = function(count) {};

/**
 * Specifies whether the upload control is enabled.
 * @param {boolean} enabled true, to enable the upload control; otherwise, false.
 * @return {void}
 */
ASPxClientUploadControl.prototype.SetEnabled = function(enabled) {};

/**
 * Returns a value indicating whether the upload control is enabled.
 * @return {boolean}
 */
ASPxClientUploadControl.prototype.GetEnabled = function() {};

/**
 * Initiates uploading of the specified file(s) to the web server's memory.
 * @return {void}
 */
ASPxClientUploadControl.prototype.Upload = function() {};

/**
 * Cancels the initiated file uploading process.
 * @return {void}
 */
ASPxClientUploadControl.prototype.Cancel = function() {};

/**
 * Clears the file selection in the upload control.
 * @return {void}
 */
ASPxClientUploadControl.prototype.ClearText = function() {};

/**
 * Sets the text to be displayed within the add button.
 * @param {string} text A string value specifying the text to be displayed within the button.
 * @return {void}
 */
ASPxClientUploadControl.prototype.SetAddButtonText = function(text) {};

/**
 * Sets the text to be displayed within the upload button.
 * @param {string} text A string value specifying the text to be displayed within the button.
 * @return {void}
 */
ASPxClientUploadControl.prototype.SetUploadButtonText = function(text) {};

/**
 * Returns the text displayed within the add button.
 * @return {string}
 */
ASPxClientUploadControl.prototype.GetAddButtonText = function() {};

/**
 * Returns the text displayed within the upload button.
 * @return {string}
 */
ASPxClientUploadControl.prototype.GetUploadButtonText = function() {};

/**
 * Sets the ID of a web control or HTML element (or a list of IDs), a click on which invokes file upload dialog.
 * @param {string} ids A string value specifying the ID or a list of IDs separated by the semicolon (;).
 * @return {void}
 */
ASPxClientUploadControl.prototype.SetDialogTriggerID = function(ids) {};
/**
 * @record
 * @struct
 */
function ASPxClientUploadControlFilesUploadStartEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientUploadControlFilesUploadStartEventArgs() {}
 /** @type {boolean} */
ASPxClientUploadControlFilesUploadStartEventArgs.prototype.cancel;
/**
 * @record
 * @struct
 */
function ASPxClientUploadControlFileUploadCompleteEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientUploadControlFileUploadCompleteEventArgs() {}
 /** @type {number} */
ASPxClientUploadControlFileUploadCompleteEventArgs.prototype.inputIndex;
 /** @type {boolean} */
ASPxClientUploadControlFileUploadCompleteEventArgs.prototype.isValid;
 /** @type {string} */
ASPxClientUploadControlFileUploadCompleteEventArgs.prototype.errorText;
 /** @type {string} */
ASPxClientUploadControlFileUploadCompleteEventArgs.prototype.callbackData;
/**
 * @record
 * @struct
 */
function ASPxClientUploadControlFilesUploadCompleteEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientUploadControlFilesUploadCompleteEventArgs() {}
 /** @type {string} */
ASPxClientUploadControlFilesUploadCompleteEventArgs.prototype.errorText;
 /** @type {string} */
ASPxClientUploadControlFilesUploadCompleteEventArgs.prototype.callbackData;
/**
 * @record
 * @struct
 */
function ASPxClientUploadControlTextChangedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientUploadControlTextChangedEventArgs() {}
 /** @type {number} */
ASPxClientUploadControlTextChangedEventArgs.prototype.inputIndex;
/**
 * @record
 * @struct
 */
function ASPxClientUploadControlUploadingProgressChangedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientUploadControlUploadingProgressChangedEventArgs() {}
 /** @type {number} */
ASPxClientUploadControlUploadingProgressChangedEventArgs.prototype.fileCount;
 /** @type {string} */
ASPxClientUploadControlUploadingProgressChangedEventArgs.prototype.currentFileName;
 /** @type {number} */
ASPxClientUploadControlUploadingProgressChangedEventArgs.prototype.currentFileContentLength;
 /** @type {number} */
ASPxClientUploadControlUploadingProgressChangedEventArgs.prototype.currentFileUploadedContentLength;
 /** @type {number} */
ASPxClientUploadControlUploadingProgressChangedEventArgs.prototype.currentFileProgress;
 /** @type {number} */
ASPxClientUploadControlUploadingProgressChangedEventArgs.prototype.totalContentLength;
 /** @type {number} */
ASPxClientUploadControlUploadingProgressChangedEventArgs.prototype.uploadedContentLength;
 /** @type {number} */
ASPxClientUploadControlUploadingProgressChangedEventArgs.prototype.progress;
/**
 * @record
 * @struct
 */
function ASPxClientUploadControlDropZoneEnterEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientUploadControlDropZoneEnterEventArgs() {}
 /** @type {!Object} */
ASPxClientUploadControlDropZoneEnterEventArgs.prototype.dropZone;
/**
 * @record
 * @struct
 */
function ASPxClientUploadControlDropZoneLeaveEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientUploadControlDropZoneLeaveEventArgs() {}
 /** @type {!Object} */
ASPxClientUploadControlDropZoneLeaveEventArgs.prototype.dropZone;
/**
 * @record
 * @struct
 */
function ASPxClientChartDesigner() {}
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientChartDesigner.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientChartDesigner.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientChartDesigner.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ASPxClientChartDesignerSaveCommandExecuteEventHandler<?>>} */
ASPxClientChartDesigner.prototype.SaveCommandExecute;
 /** @type {!ASPxClientEvent<!ASPxClientChartDesignerCustomizeMenuActionsEventHandler<?>>} */
ASPxClientChartDesigner.prototype.CustomizeMenuActions;

/**
 * Sends a callback to the server and generates the server-side event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side event, passing it the specified argument.
 * @param {string} arg A string value that represents any information that needs to be sent to the server-side event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
ASPxClientChartDesigner.prototype.PerformCallback = function(arg, onSuccess) {};

/**
 * Updates the localization settings of the ASPxClientChartDesigner properties.
 * @param {!Object<string,string>} localization A dictionary containing the property names, along with their localized equivalents.
 * @return {void}
 */
ASPxClientChartDesigner.prototype.UpdateLocalization = function(localization) {};

/**
 * Returns the model of the Client Chart Designer.
 * @return {!Object}
 */
ASPxClientChartDesigner.prototype.GetDesignerModel = function() {};

/**
 * For internal use.
 * @return {string}
 */
ASPxClientChartDesigner.prototype.GetJsonChartModel = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientChartDesignerSaveCommandExecuteEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientChartDesignerSaveCommandExecuteEventArgs() {}
 /** @type {boolean} */
ASPxClientChartDesignerSaveCommandExecuteEventArgs.prototype.handled;
/**
 * @record
 * @struct
 */
function ASPxClientChartDesignerCustomizeMenuActionsEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientChartDesignerMenuAction() {}
 /** @type {string} */
ASPxClientChartDesignerMenuAction.prototype.text;
 /** @type {string} */
ASPxClientChartDesignerMenuAction.prototype.imageClassName;
 /** @type {!Function} */
ASPxClientChartDesignerMenuAction.prototype.clickAction;
 /** @type {boolean} */
ASPxClientChartDesignerMenuAction.prototype.disabled;
 /** @type {boolean} */
ASPxClientChartDesignerMenuAction.prototype.visible;
 /** @type {string} */
ASPxClientChartDesignerMenuAction.prototype.hotKey;
 /** @type {string} */
ASPxClientChartDesignerMenuAction.prototype.hasSeparator;
 /** @type {string} */
ASPxClientChartDesignerMenuAction.prototype.container;
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientChartDesignerCustomizeMenuActionsEventArgs() {}
 /** @type {!Array<!ASPxClientChartDesignerMenuAction>} */
ASPxClientChartDesignerCustomizeMenuActionsEventArgs.prototype.actions;
/**
 * @record
 * @struct
 */
function ASPxClientWebChartControl() {}
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientWebChartControl.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientWebChartControl.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientWebChartControl.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ASPxClientWebChartControlHotTrackEventHandler<?>>} */
ASPxClientWebChartControl.prototype.ObjectHotTracked;
 /** @type {!ASPxClientEvent<!ASPxClientWebChartControlCustomDrawCrosshairEventHandler<?>>} */
ASPxClientWebChartControl.prototype.CustomDrawCrosshair;
 /** @type {!ASPxClientEvent<!ASPxClientWebChartControlHotTrackEventHandler<?>>} */
ASPxClientWebChartControl.prototype.ObjectSelected;

/**
 * Returns an ASPxClientWebChart object, which contains information about the hierarchy of a chart control, and provides access to the main properties of chart elements  on the client side.
 * @return {!ASPxClientWebChart}
 */
ASPxClientWebChartControl.prototype.GetChart = function() {};

/**
 * Returns the printing options of the chart control.
 * @return {!ASPxClientChartPrintOptions}
 */
ASPxClientWebChartControl.prototype.GetPrintOptions = function() {};

/**
 * Changes the mouse pointer, which is shown when the mouse is over the chart control, to the pointer with the specified name.
 * @param {string} cursor A string value representing the name of the desired cursor.
 * @return {void}
 */
ASPxClientWebChartControl.prototype.SetCursor = function(cursor) {};

/**
 * Returns the specific chart element which is located under the test point.
 * @param {number} x An integer value that specifies the x coordinate of the test point.
 * @param {number} y An integer value that specifies the y coordinate of the test point.
 * @return {!Array<!ASPxClientHitObject>}
 */
ASPxClientWebChartControl.prototype.HitTest = function(x, y) {};

/**
 * Sends a callback to the server and generates the server-side event, passing it the specified argument.
 * Sends a callback to the server and generates the server-side event, passing it the specified argument.
 * @param {string} args A string value that represents any information that needs to be sent to the server-side event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
ASPxClientWebChartControl.prototype.PerformCallback = function(args, onSuccess) {};

/**
 * Prints the current chart on the client side.
 * @return {void}
 */
ASPxClientWebChartControl.prototype.Print = function() {};

/**
 * Loads a chart which should be customized from its object model.
 * @param {string} serializedChartObjectModel A String object representing the chart model.
 * @return {void}
 */
ASPxClientWebChartControl.prototype.LoadFromObjectModel = function(serializedChartObjectModel) {};

/**
 * Exports a chart to the file of the specified format, and saves it to the disk.
 * Exports a chart to a file in the specified format, and saves it to disk, using the specified file name.
 * @param {string} format A string value specifying the format, to which a chart should be exported.
 * @param {string=} filename A string value specifying the file name, to which a chart should be exported. If this parameter is missing or set to an empty string, then the created file will be named using the client-side name of a chart.
 * @return {void}
 */
ASPxClientWebChartControl.prototype.SaveToDisk = function(format, filename) {};

/**
 * Exports a report to the file of the specified format, and shows it in a new Web Browser window.
 * @param {string} format A string  value specifying a format in which a report should be exported.
 * @return {void}
 */
ASPxClientWebChartControl.prototype.SaveToWindow = function(format) {};

/**
 * Gets the main DOM (Document Object Model) element on a Web Page representing this ASPxClientWebChartControl object.
 * @return {!Object}
 */
ASPxClientWebChartControl.prototype.GetMainDOMElement = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientWebChartControlCustomDrawCrosshairEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientWebChartControlCustomDrawCrosshairEventArgs() {}
 /** @type {!ASPxClientCrosshairElement} */
ASPxClientWebChartControlCustomDrawCrosshairEventArgs.prototype.crosshairElements;
 /** @type {!ASPxClientCrosshairAxisLabelElement} */
ASPxClientWebChartControlCustomDrawCrosshairEventArgs.prototype.cursorCrosshairAxisLabelElements;
 /** @type {!ASPxClientCrosshairLineElement} */
ASPxClientWebChartControlCustomDrawCrosshairEventArgs.prototype.cursorCrosshairLineElement;
 /** @type {!ASPxClientCrosshairGroupHeaderElement} */
ASPxClientWebChartControlCustomDrawCrosshairEventArgs.prototype.crosshairGroupHeaderElements;
 /** @type {!ASPxClientCrosshairElementGroup} */
ASPxClientWebChartControlCustomDrawCrosshairEventArgs.prototype.crosshairElementGroups;
/**
 * @record
 * @struct
 */
function ASPxClientCrosshairElement() {}
 /** @type {!ASPxClientSeries} */
ASPxClientCrosshairElement.prototype.Series;
 /** @type {!ASPxClientSeriesPoint} */
ASPxClientCrosshairElement.prototype.Point;
 /** @type {!ASPxClientCrosshairLineElement} */
ASPxClientCrosshairElement.prototype.LineElement;
 /** @type {!ASPxClientCrosshairAxisLabelElement} */
ASPxClientCrosshairElement.prototype.AxisLabelElement;
 /** @type {!ASPxClientCrosshairSeriesLabelElement} */
ASPxClientCrosshairElement.prototype.LabelElement;
 /** @type {boolean} */
ASPxClientCrosshairElement.prototype.visible;
/**
 * @record
 * @struct
 */
function ASPxClientCrosshairLineElement() {}
/**
 * @record
 * @struct
 */
function ASPxClientCrosshairAxisLabelElement() {}
/**
 * @record
 * @struct
 */
function ASPxClientCrosshairGroupHeaderElement() {}
/**
 * @record
 * @struct
 */
function ASPxClientCrosshairSeriesLabelElement() {}
/**
 * @record
 * @struct
 */
function ASPxClientCrosshairElementGroup() {}
/**
 * @record
 * @struct
 */
function ASPxClientWebChartControlHotTrackEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientWebChartControlHotTrackEventArgs() {}
 /** @type {!ASPxClientWebChartElement} */
ASPxClientWebChartControlHotTrackEventArgs.prototype.hitObject;
 /** @type {!ASPxClientWebChartElement} */
ASPxClientWebChartControlHotTrackEventArgs.prototype.additionalHitObject;
 /** @type {!ASPxClientWebChartHitInfo} */
ASPxClientWebChartControlHotTrackEventArgs.prototype.hitInfo;
 /** @type {!ASPxClientWebChart} */
ASPxClientWebChartControlHotTrackEventArgs.prototype.chart;
 /** @type {!Object} */
ASPxClientWebChartControlHotTrackEventArgs.prototype.htmlElement;
 /** @type {number} */
ASPxClientWebChartControlHotTrackEventArgs.prototype.x;
 /** @type {number} */
ASPxClientWebChartControlHotTrackEventArgs.prototype.y;
 /** @type {number} */
ASPxClientWebChartControlHotTrackEventArgs.prototype.absoluteX;
 /** @type {number} */
ASPxClientWebChartControlHotTrackEventArgs.prototype.absoluteY;
 /** @type {boolean} */
ASPxClientWebChartControlHotTrackEventArgs.prototype.cancel;
/**
 * @record
 * @struct
 */
function ASPxClientHitObject() {}
 /** @type {!ASPxClientWebChartElement} */
ASPxClientHitObject.prototype.Object;
 /** @type {!ASPxClientWebChartElement} */
ASPxClientHitObject.prototype.AdditionalObject;
/**
 * @record
 * @struct
 */
function ASPxClientWebChartHitInfo() {}
 /** @type {boolean} */
ASPxClientWebChartHitInfo.prototype.inChart;
 /** @type {boolean} */
ASPxClientWebChartHitInfo.prototype.inChartTitle;
 /** @type {boolean} */
ASPxClientWebChartHitInfo.prototype.inAxis;
 /** @type {boolean} */
ASPxClientWebChartHitInfo.prototype.inAxisLabelItem;
 /** @type {boolean} */
ASPxClientWebChartHitInfo.prototype.inAxisTitle;
 /** @type {boolean} */
ASPxClientWebChartHitInfo.prototype.inConstantLine;
 /** @type {boolean} */
ASPxClientWebChartHitInfo.prototype.inDiagram;
 /** @type {boolean} */
ASPxClientWebChartHitInfo.prototype.inNonDefaultPane;
 /** @type {boolean} */
ASPxClientWebChartHitInfo.prototype.inLegend;
 /** @type {boolean} */
ASPxClientWebChartHitInfo.prototype.inCustomLegendItem;
 /** @type {boolean} */
ASPxClientWebChartHitInfo.prototype.inSeries;
 /** @type {boolean} */
ASPxClientWebChartHitInfo.prototype.inSeriesLabel;
 /** @type {boolean} */
ASPxClientWebChartHitInfo.prototype.inSeriesPoint;
 /** @type {boolean} */
ASPxClientWebChartHitInfo.prototype.inSeriesTitle;
 /** @type {boolean} */
ASPxClientWebChartHitInfo.prototype.inTrendLine;
 /** @type {boolean} */
ASPxClientWebChartHitInfo.prototype.inFibonacciIndicator;
 /** @type {boolean} */
ASPxClientWebChartHitInfo.prototype.inRegressionLine;
 /** @type {boolean} */
ASPxClientWebChartHitInfo.prototype.inIndicator;
 /** @type {boolean} */
ASPxClientWebChartHitInfo.prototype.inAnnotation;
 /** @type {boolean} */
ASPxClientWebChartHitInfo.prototype.inHyperlink;
 /** @type {!ASPxClientWebChart} */
ASPxClientWebChartHitInfo.prototype.chart;
 /** @type {!ASPxClientChartTitle} */
ASPxClientWebChartHitInfo.prototype.chartTitle;
 /** @type {!ASPxClientAxisBase} */
ASPxClientWebChartHitInfo.prototype.axis;
 /** @type {!ASPxClientConstantLine} */
ASPxClientWebChartHitInfo.prototype.constantLine;
 /** @type {!ASPxClientXYDiagramBase} */
ASPxClientWebChartHitInfo.prototype.diagram;
 /** @type {!ASPxClientXYDiagramPane} */
ASPxClientWebChartHitInfo.prototype.nonDefaultPane;
 /** @type {!ASPxClientLegend} */
ASPxClientWebChartHitInfo.prototype.legend;
 /** @type {!ASPxClientCustomLegendItem} */
ASPxClientWebChartHitInfo.prototype.customLegendItem;
 /** @type {!ASPxClientSeries} */
ASPxClientWebChartHitInfo.prototype.series;
 /** @type {!ASPxClientSeriesLabel} */
ASPxClientWebChartHitInfo.prototype.seriesLabel;
 /** @type {!ASPxClientSeriesTitle} */
ASPxClientWebChartHitInfo.prototype.seriesTitle;
 /** @type {!ASPxClientTrendLine} */
ASPxClientWebChartHitInfo.prototype.trendLine;
 /** @type {!ASPxClientFibonacciIndicator} */
ASPxClientWebChartHitInfo.prototype.fibonacciIndicator;
 /** @type {!ASPxClientRegressionLine} */
ASPxClientWebChartHitInfo.prototype.regressionLine;
 /** @type {!ASPxClientIndicator} */
ASPxClientWebChartHitInfo.prototype.indicator;
 /** @type {!ASPxClientAnnotation} */
ASPxClientWebChartHitInfo.prototype.annotation;
 /** @type {!ASPxClientSeriesPoint} */
ASPxClientWebChartHitInfo.prototype.seriesPoint;
 /** @type {!ASPxClientAxisLabelItem} */
ASPxClientWebChartHitInfo.prototype.axisLabelItem;
 /** @type {!ASPxClientAxisTitle} */
ASPxClientWebChartHitInfo.prototype.axisTitle;
 /** @type {string} */
ASPxClientWebChartHitInfo.prototype.hyperlink;
/**
 * @record
 * @struct
 */
function ASPxClientDiagramCoordinates() {}
 /** @type {string} */
ASPxClientDiagramCoordinates.prototype.argumentScaleType;
 /** @type {string} */
ASPxClientDiagramCoordinates.prototype.valueScaleType;
 /** @type {string} */
ASPxClientDiagramCoordinates.prototype.qualitativeArgument;
 /** @type {number} */
ASPxClientDiagramCoordinates.prototype.numericalArgument;
 /** @type {!Date} */
ASPxClientDiagramCoordinates.prototype.dateTimeArgument;
 /** @type {number} */
ASPxClientDiagramCoordinates.prototype.numericalValue;
 /** @type {!Date} */
ASPxClientDiagramCoordinates.prototype.dateTimeValue;
 /** @type {!ASPxClientAxisBase} */
ASPxClientDiagramCoordinates.prototype.axisX;
 /** @type {!ASPxClientAxisBase} */
ASPxClientDiagramCoordinates.prototype.axisY;
 /** @type {!ASPxClientXYDiagramPane} */
ASPxClientDiagramCoordinates.prototype.pane;

/**
 * Checks whether the current object represents a point outside the diagram area.
 * @return {boolean}
 */
ASPxClientDiagramCoordinates.prototype.IsEmpty = function() {};

/**
 * Gets the value of the client-side axis instance.
 * @param {!ASPxClientAxisBase} axis An ASPxClientAxisBase class descendant, representing the axis that contains the requested value.
 * @return {!ASPxClientAxisValue}
 */
ASPxClientDiagramCoordinates.prototype.GetAxisValue = function(axis) {};
/**
 * @record
 * @struct
 */
function ASPxClientAxisValue() {}
 /** @type {string} */
ASPxClientAxisValue.prototype.scaleType;
 /** @type {string} */
ASPxClientAxisValue.prototype.qualitativeValue;
 /** @type {number} */
ASPxClientAxisValue.prototype.numericalValue;
 /** @type {!Date} */
ASPxClientAxisValue.prototype.dateTimeValue;
/**
 * @record
 * @struct
 */
function ASPxClientControlCoordinates() {}
 /** @type {!ASPxClientXYDiagramPane} */
ASPxClientControlCoordinates.prototype.pane;
 /** @type {number} */
ASPxClientControlCoordinates.prototype.x;
 /** @type {number} */
ASPxClientControlCoordinates.prototype.y;
 /** @type {string} */
ASPxClientControlCoordinates.prototype.visibility;
/**
 * @record
 * @struct
 */
function ASPxClientWebChartElement() {}
 /** @type {!ASPxClientWebChart} */
ASPxClientWebChartElement.prototype.chart;
/**
 * @extends {ASPxClientWebChartElement}
 * @record
 * @struct
 */
function ASPxClientWebChartEmptyElement() {}
/**
 * @extends {ASPxClientWebChartElement}
 * @record
 * @struct
 */
function ASPxClientWebChartRequiredElement() {}
/**
 * @extends {ASPxClientWebChartRequiredElement}
 * @record
 * @struct
 */
function ASPxClientWebChartElementNamed() {}
 /** @type {string} */
ASPxClientWebChartElementNamed.prototype.name;
/**
 * @extends {ASPxClientWebChartRequiredElement}
 * @record
 * @struct
 */
function ASPxClientWebChart() {}
 /** @type {?} */
ASPxClientWebChart.prototype.chartControl;
 /** @type {!ASPxClientWebChartElement} */
ASPxClientWebChart.prototype.diagram;
 /** @type {!Array<!ASPxClientSeries>} */
ASPxClientWebChart.prototype.series;
 /** @type {!Array<!ASPxClientChartTitle>} */
ASPxClientWebChart.prototype.titles;
 /** @type {!Array<!ASPxClientAnnotation>} */
ASPxClientWebChart.prototype.annotations;
 /** @type {!ASPxClientLegend} */
ASPxClientWebChart.prototype.legend;
 /** @type {!Array<!ASPxClientLegend>} */
ASPxClientWebChart.prototype.legends;
 /** @type {string} */
ASPxClientWebChart.prototype.appearanceName;
 /** @type {string} */
ASPxClientWebChart.prototype.paletteName;
 /** @type {boolean} */
ASPxClientWebChart.prototype.showSeriesToolTip;
 /** @type {boolean} */
ASPxClientWebChart.prototype.showPointToolTip;
 /** @type {boolean} */
ASPxClientWebChart.prototype.showCrosshair;
 /** @type {!ASPxClientToolTipPosition} */
ASPxClientWebChart.prototype.toolTipPosition;
 /** @type {!ASPxClientToolTipController} */
ASPxClientWebChart.prototype.toolTipController;
 /** @type {!ASPxClientCrosshairOptions} */
ASPxClientWebChart.prototype.crosshairOptions;
 /** @type {string} */
ASPxClientWebChart.prototype.cssPostfix;
 /** @type {string} */
ASPxClientWebChart.prototype.selectionMode;
/**
 * @extends {ASPxClientWebChartEmptyElement}
 * @record
 * @struct
 */
function ASPxClientSimpleDiagram() {}
/**
 * @extends {ASPxClientWebChartRequiredElement}
 * @record
 * @struct
 */
function ASPxClientXYDiagramBase() {}
 /** @type {!ASPxClientAxisBase} */
ASPxClientXYDiagramBase.prototype.axisX;
 /** @type {!ASPxClientAxisBase} */
ASPxClientXYDiagramBase.prototype.axisY;
/**
 * @extends {ASPxClientXYDiagramBase}
 * @record
 * @struct
 */
function ASPxClientXYDiagram2D() {}
 /** @type {!Array<!ASPxClientAxis>} */
ASPxClientXYDiagram2D.prototype.secondaryAxesX;
 /** @type {!Array<!ASPxClientAxis>} */
ASPxClientXYDiagram2D.prototype.secondaryAxesY;
 /** @type {!ASPxClientXYDiagramPane} */
ASPxClientXYDiagram2D.prototype.defaultPane;
 /** @type {!Array<!ASPxClientXYDiagramPane>} */
ASPxClientXYDiagram2D.prototype.panes;

/**
 * Converts the display coordinates into a diagram coordinates object.
 * @param {number} x An integer value, representing the X-coordinate of a point (measured in pixels relative to the top left corner of a chart).
 * @param {number} y An integer value, representing the Y-coordinate of a point (measured in pixels relative to the top left corner of a chart).
 * @return {!ASPxClientDiagramCoordinates}
 */
ASPxClientXYDiagram2D.prototype.PointToDiagram = function(x, y) {};

/**
 * Converts the diagram coordinates of a point into screen coordinates.
 * @param {!Object} argument An object, representing the point's argument.
 * @param {!Object} value An object, representing the point's value.
 * @param {!ASPxClientAxis2D} axisX An ASPxClientAxis2D descendant, representing the X-axis.
 * @param {!ASPxClientAxis2D} axisY An ASPxClientAxis2D descendant, representing the Y-axis.
 * @param {!ASPxClientXYDiagramPane} pane An ASPxClientXYDiagramPane object, representing the pane.
 * @return {!ASPxClientControlCoordinates}
 */
ASPxClientXYDiagram2D.prototype.DiagramToPoint = function(argument, value, axisX, axisY, pane) {};

/**
 * Shows the Crosshair Cursor at the point with the specified coordinates.
 * @param {number} screenX The horizontal coordinate that is related to the top-left angle of the chart.
 * @param {number} screenY The vertical coordinate that is related to the top-left angle of the chart.
 * @return {void}
 */
ASPxClientXYDiagram2D.prototype.ShowCrosshair = function(screenX, screenY) {};
/**
 * @extends {ASPxClientXYDiagram2D}
 * @record
 * @struct
 */
function ASPxClientXYDiagram() {}
 /** @type {boolean} */
ASPxClientXYDiagram.prototype.rotated;
/**
 * @extends {ASPxClientXYDiagram2D}
 * @record
 * @struct
 */
function ASPxClientSwiftPlotDiagram() {}
/**
 * @extends {ASPxClientWebChartElementNamed}
 * @record
 * @struct
 */
function ASPxClientXYDiagramPane() {}
 /** @type {!ASPxClientXYDiagram} */
ASPxClientXYDiagramPane.prototype.diagram;
/**
 * @extends {ASPxClientXYDiagramBase}
 * @record
 * @struct
 */
function ASPxClientXYDiagram3D() {}
/**
 * @extends {ASPxClientXYDiagramBase}
 * @record
 * @struct
 */
function ASPxClientRadarDiagram() {}

/**
 * Converts the display coordinates into a diagram coordinates object.
 * @param {number} x An integer value, representing the X-coordinate of a point (measured in pixels relative to the top left corner of a chart).
 * @param {number} y An integer value, representing the Y-coordinate of a point (measured in pixels relative to the top left corner of a chart).
 * @return {!ASPxClientDiagramCoordinates}
 */
ASPxClientRadarDiagram.prototype.PointToDiagram = function(x, y) {};

/**
 * Converts the diagram coordinates of a point into screen coordinates.
 * @param {!Object} argument An object, representing the point's argument.
 * @param {!Object} value An object, representing the point's value.
 * @return {!ASPxClientControlCoordinates}
 */
ASPxClientRadarDiagram.prototype.DiagramToPoint = function(argument, value) {};
/**
 * @extends {ASPxClientWebChartElementNamed}
 * @record
 * @struct
 */
function ASPxClientAxisBase() {}
 /** @type {!ASPxClientXYDiagramBase} */
ASPxClientAxisBase.prototype.diagram;
 /** @type {!ASPxClientAxisRange} */
ASPxClientAxisBase.prototype.range;
/**
 * @extends {ASPxClientAxisBase}
 * @record
 * @struct
 */
function ASPxClientAxis2D() {}
 /** @type {!ASPxClientAxisTitle} */
ASPxClientAxis2D.prototype.axisTitle;
 /** @type {!Array<!ASPxClientStrip>} */
ASPxClientAxis2D.prototype.strips;
 /** @type {!Array<!ASPxClientConstantLine>} */
ASPxClientAxis2D.prototype.constantLines;
/**
 * @extends {ASPxClientAxis2D}
 * @record
 * @struct
 */
function ASPxClientAxis() {}
 /** @type {boolean} */
ASPxClientAxis.prototype.reverse;
/**
 * @extends {ASPxClientAxis2D}
 * @record
 * @struct
 */
function ASPxClientSwiftPlotDiagramAxis() {}
/**
 * @extends {ASPxClientAxisBase}
 * @record
 * @struct
 */
function ASPxClientAxis3D() {}
/**
 * @extends {ASPxClientAxisBase}
 * @record
 * @struct
 */
function ASPxClientRadarAxis() {}
/**
 * @extends {ASPxClientWebChartRequiredElement}
 * @record
 * @struct
 */
function ASPxClientAxisTitle() {}
 /** @type {!ASPxClientAxisBase} */
ASPxClientAxisTitle.prototype.axis;
 /** @type {string} */
ASPxClientAxisTitle.prototype.text;
/**
 * @extends {ASPxClientWebChartRequiredElement}
 * @record
 * @struct
 */
function ASPxClientAxisLabelItem() {}
 /** @type {!ASPxClientAxisBase} */
ASPxClientAxisLabelItem.prototype.axis;
 /** @type {string} */
ASPxClientAxisLabelItem.prototype.text;
 /** @type {!Object} */
ASPxClientAxisLabelItem.prototype.axisValue;
 /** @type {number} */
ASPxClientAxisLabelItem.prototype.axisValueInternal;
/**
 * @extends {ASPxClientWebChartRequiredElement}
 * @record
 * @struct
 */
function ASPxClientAxisRange() {}
 /** @type {!ASPxClientAxisBase} */
ASPxClientAxisRange.prototype.axis;
 /** @type {!Object} */
ASPxClientAxisRange.prototype.minValue;
 /** @type {!Object} */
ASPxClientAxisRange.prototype.maxValue;
 /** @type {number} */
ASPxClientAxisRange.prototype.minValueInternal;
 /** @type {number} */
ASPxClientAxisRange.prototype.maxValueInternal;
/**
 * @extends {ASPxClientWebChartElementNamed}
 * @record
 * @struct
 */
function ASPxClientStrip() {}
 /** @type {!ASPxClientAxis} */
ASPxClientStrip.prototype.axis;
 /** @type {!Object} */
ASPxClientStrip.prototype.minValue;
 /** @type {!Object} */
ASPxClientStrip.prototype.maxValue;
/**
 * @extends {ASPxClientWebChartElementNamed}
 * @record
 * @struct
 */
function ASPxClientConstantLine() {}
 /** @type {!ASPxClientAxis} */
ASPxClientConstantLine.prototype.axis;
 /** @type {!Object} */
ASPxClientConstantLine.prototype.value;
 /** @type {string} */
ASPxClientConstantLine.prototype.title;
/**
 * @extends {ASPxClientWebChartElementNamed}
 * @record
 * @struct
 */
function ASPxClientSeries() {}
 /** @type {string} */
ASPxClientSeries.prototype.viewType;
 /** @type {string} */
ASPxClientSeries.prototype.argumentScaleType;
 /** @type {string} */
ASPxClientSeries.prototype.valueScaleType;
 /** @type {string} */
ASPxClientSeries.prototype.axisX;
 /** @type {string} */
ASPxClientSeries.prototype.axisY;
 /** @type {string} */
ASPxClientSeries.prototype.pane;
 /** @type {boolean} */
ASPxClientSeries.prototype.visible;
 /** @type {boolean} */
ASPxClientSeries.prototype.toolTipEnabled;
 /** @type {string} */
ASPxClientSeries.prototype.toolTipText;
 /** @type {string} */
ASPxClientSeries.prototype.toolTipImage;
 /** @type {!ASPxClientSeriesLabel} */
ASPxClientSeries.prototype.label;
 /** @type {!Array<!ASPxClientSeriesPoint>} */
ASPxClientSeries.prototype.points;
 /** @type {!Array<!ASPxClientSeriesTitle>} */
ASPxClientSeries.prototype.titles;
 /** @type {!Array<!ASPxClientIndicator>} */
ASPxClientSeries.prototype.indicators;
 /** @type {!Array<!ASPxClientRegressionLine>} */
ASPxClientSeries.prototype.regressionLines;
 /** @type {!Array<!ASPxClientTrendLine>} */
ASPxClientSeries.prototype.trendLines;
 /** @type {!Array<!ASPxClientFibonacciIndicator>} */
ASPxClientSeries.prototype.fibonacciIndicators;
 /** @type {string} */
ASPxClientSeries.prototype.color;
 /** @type {string} */
ASPxClientSeries.prototype.stackedGroup;
 /** @type {string} */
ASPxClientSeries.prototype.crosshairLabelPattern;
 /** @type {string} */
ASPxClientSeries.prototype.groupedElementsPattern;
 /** @type {!Array<!ASPxClientCrosshairValueItem>} */
ASPxClientSeries.prototype.crosshairValueItems;
 /** @type {boolean} */
ASPxClientSeries.prototype.actualCrosshairEnabled;
 /** @type {boolean} */
ASPxClientSeries.prototype.actualCrosshairLabelVisibility;
/**
 * @extends {ASPxClientWebChartElement}
 * @record
 * @struct
 */
function ASPxClientSeriesLabel() {}
 /** @type {!ASPxClientSeries} */
ASPxClientSeriesLabel.prototype.series;
 /** @type {string} */
ASPxClientSeriesLabel.prototype.text;
/**
 * @extends {ASPxClientWebChartRequiredElement}
 * @record
 * @struct
 */
function ASPxClientSeriesPoint() {}
 /** @type {!ASPxClientSeries} */
ASPxClientSeriesPoint.prototype.series;
 /** @type {!Object} */
ASPxClientSeriesPoint.prototype.argument;
 /** @type {!Array<!Object>} */
ASPxClientSeriesPoint.prototype.values;
 /** @type {string} */
ASPxClientSeriesPoint.prototype.toolTipText;
 /** @type {string} */
ASPxClientSeriesPoint.prototype.color;
 /** @type {number} */
ASPxClientSeriesPoint.prototype.percentValue;
 /** @type {string} */
ASPxClientSeriesPoint.prototype.toolTipHint;
/**
 * @extends {ASPxClientWebChartEmptyElement}
 * @record
 * @struct
 */
function ASPxClientLegend() {}
 /** @type {boolean} */
ASPxClientLegend.prototype.useCheckBoxes;
 /** @type {!Array<!ASPxClientCustomLegendItem>} */
ASPxClientLegend.prototype.customItems;
 /** @type {string} */
ASPxClientLegend.prototype.name;
/**
 * @extends {ASPxClientWebChartRequiredElement}
 * @record
 * @struct
 */
function ASPxClientTitleBase() {}
 /** @type {!Array<string>} */
ASPxClientTitleBase.prototype.lines;
 /** @type {string} */
ASPxClientTitleBase.prototype.alignment;
 /** @type {string} */
ASPxClientTitleBase.prototype.dock;
/**
 * @extends {ASPxClientTitleBase}
 * @record
 * @struct
 */
function ASPxClientChartTitle() {}
/**
 * @extends {ASPxClientTitleBase}
 * @record
 * @struct
 */
function ASPxClientSeriesTitle() {}
 /** @type {!ASPxClientSeries} */
ASPxClientSeriesTitle.prototype.series;
/**
 * @extends {ASPxClientWebChartElementNamed}
 * @record
 * @struct
 */
function ASPxClientIndicator() {}
 /** @type {!ASPxClientSeries} */
ASPxClientIndicator.prototype.series;
/**
 * @extends {ASPxClientIndicator}
 * @record
 * @struct
 */
function ASPxClientFinancialIndicator() {}
 /** @type {!ASPxClientFinancialIndicatorPoint} */
ASPxClientFinancialIndicator.prototype.point1;
 /** @type {!ASPxClientFinancialIndicatorPoint} */
ASPxClientFinancialIndicator.prototype.point2;
/**
 * @extends {ASPxClientFinancialIndicator}
 * @record
 * @struct
 */
function ASPxClientTrendLine() {}
/**
 * @extends {ASPxClientFinancialIndicator}
 * @record
 * @struct
 */
function ASPxClientFibonacciIndicator() {}
/**
 * @extends {ASPxClientWebChartRequiredElement}
 * @record
 * @struct
 */
function ASPxClientFinancialIndicatorPoint() {}
 /** @type {!ASPxClientFinancialIndicator} */
ASPxClientFinancialIndicatorPoint.prototype.financialIndicator;
 /** @type {!Object} */
ASPxClientFinancialIndicatorPoint.prototype.argument;
 /** @type {string} */
ASPxClientFinancialIndicatorPoint.prototype.valueLevel;
/**
 * @extends {ASPxClientIndicator}
 * @record
 * @struct
 */
function ASPxClientSingleLevelIndicator() {}
 /** @type {string} */
ASPxClientSingleLevelIndicator.prototype.valueLevel;
/**
 * @extends {ASPxClientSingleLevelIndicator}
 * @record
 * @struct
 */
function ASPxClientRegressionLine() {}
/**
 * @extends {ASPxClientSingleLevelIndicator}
 * @record
 * @struct
 */
function ASPxClientMovingAverage() {}
 /** @type {number} */
ASPxClientMovingAverage.prototype.pointsCount;
 /** @type {string} */
ASPxClientMovingAverage.prototype.kind;
 /** @type {number} */
ASPxClientMovingAverage.prototype.envelopePercent;
/**
 * @extends {ASPxClientMovingAverage}
 * @record
 * @struct
 */
function ASPxClientSimpleMovingAverage() {}
/**
 * @extends {ASPxClientMovingAverage}
 * @record
 * @struct
 */
function ASPxClientExponentialMovingAverage() {}
/**
 * @extends {ASPxClientMovingAverage}
 * @record
 * @struct
 */
function ASPxClientWeightedMovingAverage() {}
/**
 * @extends {ASPxClientMovingAverage}
 * @record
 * @struct
 */
function ASPxClientTriangularMovingAverage() {}
/**
 * @extends {ASPxClientMovingAverage}
 * @record
 * @struct
 */
function ASPxClientTripleExponentialMovingAverageTema() {}
/**
 * @extends {ASPxClientIndicator}
 * @record
 * @struct
 */
function ASPxClientBollingerBands() {}
 /** @type {number} */
ASPxClientBollingerBands.prototype.pointsCount;
 /** @type {string} */
ASPxClientBollingerBands.prototype.valueLevel;
/**
 * @extends {ASPxClientIndicator}
 * @record
 * @struct
 */
function ASPxClientMedianPrice() {}
/**
 * @extends {ASPxClientIndicator}
 * @record
 * @struct
 */
function ASPxClientTypicalPrice() {}
/**
 * @extends {ASPxClientIndicator}
 * @record
 * @struct
 */
function ASPxClientWeightedClose() {}
/**
 * @extends {ASPxClientIndicator}
 * @record
 * @struct
 */
function ASPxSeparatePaneIndicator() {}
 /** @type {string} */
ASPxSeparatePaneIndicator.prototype.axisY;
 /** @type {string} */
ASPxSeparatePaneIndicator.prototype.pane;
/**
 * @extends {ASPxSeparatePaneIndicator}
 * @record
 * @struct
 */
function ASPxClientAverageTrueRange() {}
 /** @type {number} */
ASPxClientAverageTrueRange.prototype.pointsCount;
/**
 * @extends {ASPxSeparatePaneIndicator}
 * @record
 * @struct
 */
function ASPxClientChaikinsVolatility() {}
 /** @type {number} */
ASPxClientChaikinsVolatility.prototype.pointsCount;
/**
 * @extends {ASPxSeparatePaneIndicator}
 * @record
 * @struct
 */
function ASPxClientCommodityChannelIndex() {}
 /** @type {number} */
ASPxClientCommodityChannelIndex.prototype.pointsCount;
/**
 * @extends {ASPxSeparatePaneIndicator}
 * @record
 * @struct
 */
function ASPxClientDetrendedPriceOscillator() {}
 /** @type {number} */
ASPxClientDetrendedPriceOscillator.prototype.pointsCount;
 /** @type {string} */
ASPxClientDetrendedPriceOscillator.prototype.valueLevel;
/**
 * @extends {ASPxSeparatePaneIndicator}
 * @record
 * @struct
 */
function ASPxClientMassIndex() {}
 /** @type {number} */
ASPxClientMassIndex.prototype.movingAveragePointsCount;
 /** @type {number} */
ASPxClientMassIndex.prototype.sumPointsCount;
/**
 * @extends {ASPxSeparatePaneIndicator}
 * @record
 * @struct
 */
function ASPxClientMovingAverageConvergenceDivergence() {}
 /** @type {number} */
ASPxClientMovingAverageConvergenceDivergence.prototype.shortPeriod;
 /** @type {number} */
ASPxClientMovingAverageConvergenceDivergence.prototype.longPeriod;
 /** @type {number} */
ASPxClientMovingAverageConvergenceDivergence.prototype.signalSmoothingPeriod;
/**
 * @extends {ASPxSeparatePaneIndicator}
 * @record
 * @struct
 */
function ASPxClientRateOfChange() {}
 /** @type {number} */
ASPxClientRateOfChange.prototype.pointsCount;
 /** @type {string} */
ASPxClientRateOfChange.prototype.valueLevel;
/**
 * @extends {ASPxSeparatePaneIndicator}
 * @record
 * @struct
 */
function ASPxClientRelativeStrengthIndex() {}
 /** @type {number} */
ASPxClientRelativeStrengthIndex.prototype.pointsCount;
 /** @type {string} */
ASPxClientRelativeStrengthIndex.prototype.valueLevel;
/**
 * @extends {ASPxSeparatePaneIndicator}
 * @record
 * @struct
 */
function ASPxClientStandardDeviation() {}
 /** @type {number} */
ASPxClientStandardDeviation.prototype.pointsCount;
 /** @type {string} */
ASPxClientStandardDeviation.prototype.valueLevel;
/**
 * @extends {ASPxSeparatePaneIndicator}
 * @record
 * @struct
 */
function ASPxClientTripleExponentialMovingAverageTrix() {}
 /** @type {number} */
ASPxClientTripleExponentialMovingAverageTrix.prototype.pointsCount;
 /** @type {string} */
ASPxClientTripleExponentialMovingAverageTrix.prototype.valueLevel;
/**
 * @extends {ASPxSeparatePaneIndicator}
 * @record
 * @struct
 */
function ASPxClientWilliamsR() {}
 /** @type {number} */
ASPxClientWilliamsR.prototype.pointsCount;
/**
 * @extends {ASPxClientIndicator}
 * @record
 * @struct
 */
function ASPxClientFixedValueErrorBars() {}
 /** @type {number} */
ASPxClientFixedValueErrorBars.prototype.positiveError;
 /** @type {number} */
ASPxClientFixedValueErrorBars.prototype.negativeError;
/**
 * @extends {ASPxClientIndicator}
 * @record
 * @struct
 */
function ASPxClientPercentageErrorBars() {}
 /** @type {number} */
ASPxClientPercentageErrorBars.prototype.percent;
/**
 * @extends {ASPxClientIndicator}
 * @record
 * @struct
 */
function ASPxClientStandardDeviationErrorBars() {}
 /** @type {number} */
ASPxClientStandardDeviationErrorBars.prototype.multiplier;
/**
 * @extends {ASPxClientIndicator}
 * @record
 * @struct
 */
function ASPxClientStandardErrorBars() {}
/**
 * @extends {ASPxClientIndicator}
 * @record
 * @struct
 */
function ASPxClientDataSourceBasedErrorBars() {}
/**
 * @extends {ASPxClientWebChartElementNamed}
 * @record
 * @struct
 */
function ASPxClientAnnotation() {}
/**
 * @extends {ASPxClientAnnotation}
 * @record
 * @struct
 */
function ASPxClientTextAnnotation() {}
 /** @type {!Array<string>} */
ASPxClientTextAnnotation.prototype.lines;
/**
 * @extends {ASPxClientAnnotation}
 * @record
 * @struct
 */
function ASPxClientImageAnnotation() {}
/**
 * @record
 * @struct
 */
function ASPxClientCrosshairValueItem() {}
 /** @type {number} */
ASPxClientCrosshairValueItem.prototype.value;
 /** @type {number} */
ASPxClientCrosshairValueItem.prototype.pointIndex;
/**
 * @extends {ASPxClientWebChartEmptyElement}
 * @record
 * @struct
 */
function ASPxClientToolTipController() {}
 /** @type {boolean} */
ASPxClientToolTipController.prototype.showImage;
 /** @type {boolean} */
ASPxClientToolTipController.prototype.showText;
 /** @type {string} */
ASPxClientToolTipController.prototype.imagePosition;
 /** @type {string} */
ASPxClientToolTipController.prototype.openMode;
/**
 * @record
 * @struct
 */
function ASPxClientToolTipPosition() {}
/**
 * @extends {ASPxClientToolTipPosition}
 * @record
 * @struct
 */
function ASPxClientToolTipRelativePosition() {}
 /** @type {number} */
ASPxClientToolTipRelativePosition.prototype.offsetX;
 /** @type {number} */
ASPxClientToolTipRelativePosition.prototype.offsetY;
/**
 * @extends {ASPxClientToolTipPosition}
 * @record
 * @struct
 */
function ASPxClientToolTipFreePosition() {}
 /** @type {number} */
ASPxClientToolTipFreePosition.prototype.offsetX;
 /** @type {number} */
ASPxClientToolTipFreePosition.prototype.offsetY;
 /** @type {number} */
ASPxClientToolTipFreePosition.prototype.paneID;
 /** @type {string} */
ASPxClientToolTipFreePosition.prototype.dockPosition;
/**
 * @record
 * @struct
 */
function ASPxClientCrosshairPosition() {}
 /** @type {number} */
ASPxClientCrosshairPosition.prototype.offsetX;
 /** @type {number} */
ASPxClientCrosshairPosition.prototype.offsetY;
/**
 * @extends {ASPxClientCrosshairPosition}
 * @record
 * @struct
 */
function ASPxClientCrosshairMousePosition() {}
/**
 * @extends {ASPxClientCrosshairPosition}
 * @record
 * @struct
 */
function ASPxClientCrosshairFreePosition() {}
 /** @type {number} */
ASPxClientCrosshairFreePosition.prototype.paneID;
 /** @type {string} */
ASPxClientCrosshairFreePosition.prototype.dockPosition;
/**
 * @extends {ASPxClientWebChartElement}
 * @record
 * @struct
 */
function ASPxClientLineStyle() {}
 /** @type {string} */
ASPxClientLineStyle.prototype.dashStyle;
 /** @type {number} */
ASPxClientLineStyle.prototype.thickness;
 /** @type {string} */
ASPxClientLineStyle.prototype.lineJoin;
/**
 * @extends {ASPxClientWebChartEmptyElement}
 * @record
 * @struct
 */
function ASPxClientCrosshairOptions() {}
 /** @type {boolean} */
ASPxClientCrosshairOptions.prototype.showAxisXLabels;
 /** @type {boolean} */
ASPxClientCrosshairOptions.prototype.showAxisYLabels;
 /** @type {boolean} */
ASPxClientCrosshairOptions.prototype.showCrosshairLabels;
 /** @type {boolean} */
ASPxClientCrosshairOptions.prototype.showArgumentLine;
 /** @type {boolean} */
ASPxClientCrosshairOptions.prototype.showValueLine;
 /** @type {boolean} */
ASPxClientCrosshairOptions.prototype.showOnlyInFocusedPane;
 /** @type {string} */
ASPxClientCrosshairOptions.prototype.snapMode;
 /** @type {string} */
ASPxClientCrosshairOptions.prototype.crosshairLabelMode;
 /** @type {boolean} */
ASPxClientCrosshairOptions.prototype.showGroupHeaders;
 /** @type {string} */
ASPxClientCrosshairOptions.prototype.groupHeaderPattern;
 /** @type {boolean} */
ASPxClientCrosshairOptions.prototype.showOutOfRangePoints;
 /** @type {string} */
ASPxClientCrosshairOptions.prototype.valueSelectionMode;
 /** @type {string} */
ASPxClientCrosshairOptions.prototype.argumentLineColor;
 /** @type {string} */
ASPxClientCrosshairOptions.prototype.valueLineColor;
/**
 * @record
 * @struct
 */
function ASPxClientChartPrintOptions() {}

/**
 * Gets the size mode used to print a chart.
 * @return {string}
 */
ASPxClientChartPrintOptions.prototype.GetSizeMode = function() {};

/**
 * Sets the size mode used to print a chart.
 * @param {string} sizeMode A System.String object, specifying the name of the size mode.
 * @return {void}
 */
ASPxClientChartPrintOptions.prototype.SetSizeMode = function(sizeMode) {};

/**
 * Gets a value indicating that the landscape orientation will be used to print a chart.
 * @return {boolean}
 */
ASPxClientChartPrintOptions.prototype.GetLandscape = function() {};

/**
 * Sets a value indicating that the landscape orientation will be used to print a chart.
 * @param {boolean} landscape A Boolean value, specifying that the landscape orientation will be used to print a chart.
 * @return {void}
 */
ASPxClientChartPrintOptions.prototype.SetLandscape = function(landscape) {};

/**
 * Gets the left margin which will be used to print a chart.
 * @return {number}
 */
ASPxClientChartPrintOptions.prototype.GetMarginLeft = function() {};

/**
 * Sets the left margin which will be used to print a chart.
 * @param {number} marginLeft A System.Int32 value, specifying the margin in hundredths of an inch.
 * @return {void}
 */
ASPxClientChartPrintOptions.prototype.SetMarginLeft = function(marginLeft) {};

/**
 * Gets the top margin which will be used to print a chart.
 * @return {number}
 */
ASPxClientChartPrintOptions.prototype.GetMarginTop = function() {};

/**
 * Sets the top margin which will be used to print a chart.
 * @param {number} marginTop A System.Int32 value, specifying the margin in hundredths of an inch.
 * @return {void}
 */
ASPxClientChartPrintOptions.prototype.SetMarginTop = function(marginTop) {};

/**
 * Gets the right margin which will be used to print a chart.
 * @return {number}
 */
ASPxClientChartPrintOptions.prototype.GetMarginRight = function() {};

/**
 * Sets the right margin which will be used to print a chart.
 * @param {number} marginRight A System.Int32 value, specifying the margin in hundredths of an inch.
 * @return {void}
 */
ASPxClientChartPrintOptions.prototype.SetMarginRight = function(marginRight) {};

/**
 * Gets the bottom margin which will be used to print a chart.
 * @return {number}
 */
ASPxClientChartPrintOptions.prototype.GetMarginBottom = function() {};

/**
 * Sets the bottom margin which will be used to print a chart.
 * @param {number} marginBottom A System.Int32 value, specifying the margin in hundredths of an inch.
 * @return {void}
 */
ASPxClientChartPrintOptions.prototype.SetMarginBottom = function(marginBottom) {};

/**
 * Gets the predefined size ratio of the paper which will be used to print a chart.
 * @return {string}
 */
ASPxClientChartPrintOptions.prototype.GetPaperKind = function() {};

/**
 * Sets the predefined size ratio of the paper which will be used to print a chart.
 * @param {string} paperKind A System.String object, specifying the name of a size ratio.
 * @return {void}
 */
ASPxClientChartPrintOptions.prototype.SetPaperKind = function(paperKind) {};

/**
 * Gets the custom paper width which will be used to print a chart.
 * @return {number}
 */
ASPxClientChartPrintOptions.prototype.GetCustomPaperWidth = function() {};

/**
 * Sets the custom paper width which will be used to print a chart.
 * @param {number} customPaperWidth A System.Int32 object, specifying the width in hundredths of an inch.
 * @return {void}
 */
ASPxClientChartPrintOptions.prototype.SetCustomPaperWidth = function(customPaperWidth) {};

/**
 * Gets the custom paper height which will be used to print a chart.
 * @return {number}
 */
ASPxClientChartPrintOptions.prototype.GetCustomPaperHeight = function() {};

/**
 * Sets the custom paper height which will be used to print a chart.
 * @param {number} customPaperHeight A System.Int32 object, specifying the height in hundredths of an inch.
 * @return {void}
 */
ASPxClientChartPrintOptions.prototype.SetCustomPaperHeight = function(customPaperHeight) {};

/**
 * Gets the name of the custom paper width-height ratio used to print the chart.
 * @return {string}
 */
ASPxClientChartPrintOptions.prototype.GetCustomPaperName = function() {};

/**
 * Sets the name of the custom paper width-height ratio used to print a chart.
 * @param {string} customPaperName A String object, specifying the name of the custom paper width-height ratio.
 * @return {void}
 */
ASPxClientChartPrintOptions.prototype.SetCustomPaperName = function(customPaperName) {};
/**
 * @extends {ASPxClientWebChartElementNamed}
 * @record
 * @struct
 */
function ASPxClientCustomLegendItem() {}
 /** @type {string} */
ASPxClientCustomLegendItem.prototype.text;
/**
 * @record
 * @struct
 */
function ASPxClientDocumentViewer() {}
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientDocumentViewer.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientDocumentViewer.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientDocumentViewer.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientDocumentViewer.prototype.ToolbarItemValueChanged;
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientDocumentViewer.prototype.ToolbarItemClick;
 /** @type {!ASPxClientEvent<!ASPxClientReportViewerPageLoadEventHandler<?>>} */
ASPxClientDocumentViewer.prototype.PageLoad;

/**
 * Provides access to the Splitter of the ASPxClientDocumentViewer.
 * @return {?}
 */
ASPxClientDocumentViewer.prototype.GetSplitter = function() {};

/**
 * Provides access to the ASPxClientDocumentViewer's preview that exposes methods to print and export the document.
 * @return {?}
 */
ASPxClientDocumentViewer.prototype.GetViewer = function() {};

/**
 * Provides access to the Document Viewer toolbar on the client.
 * @return {?}
 */
ASPxClientDocumentViewer.prototype.GetToolbar = function() {};

/**
 * Provides access to the Ribbon of the ASPxClientDocumentViewer.
 * @return {?}
 */
ASPxClientDocumentViewer.prototype.GetRibbonToolbar = function() {};

/**
 * Provides access to the parameters panel of the ASPxClientDocumentViewer.
 * @return {?}
 */
ASPxClientDocumentViewer.prototype.GetParametersPanel = function() {};

/**
 * Provides access to the document of the ASPxClientDocumentViewer.
 * @return {?}
 */
ASPxClientDocumentViewer.prototype.GetDocumentMap = function() {};

/**
 * Sets focus on the report control specified by its bookmark.
 * @param {number} pageIndex An integer value, specifying the page index.
 * @param {string} bookmarkPath A String value, specifying the path to the bookmark.
 * @return {void}
 */
ASPxClientDocumentViewer.prototype.GotoBookmark = function(pageIndex, bookmarkPath) {};

/**
 * Initiates a round trip to the server so that the current page will be reloaded.
 * @return {void}
 */
ASPxClientDocumentViewer.prototype.Refresh = function() {};

/**
 * Prints the current document.
 * Prints the document's page with the specified page index.
 * @param {number=} pageIndex A Int32 representing the index of the page to be printed.
 * @return {void}
 */
ASPxClientDocumentViewer.prototype.Print = function(pageIndex) {};

/**
 * Displays the specified report page.
 * @param {number} pageIndex An integer value, identifying the report page.
 * @return {void}
 */
ASPxClientDocumentViewer.prototype.GotoPage = function(pageIndex) {};

/**
 * Invokes the Search dialog, which allows end-users to search for specific text in a report.
 * @return {void}
 */
ASPxClientDocumentViewer.prototype.Search = function() {};

/**
 * Gets a value indicating whether or not searching text across a report is permitted in the web browser.
 * @return {boolean}
 */
ASPxClientDocumentViewer.prototype.IsSearchAllowed = function() {};

/**
 * Exports a report to a file of the specified format, and shows it in a new Web Browser window.
 * @param {string} format A string specifying the format to which a report should be exported.
 * @return {void}
 */
ASPxClientDocumentViewer.prototype.SaveToWindow = function(format) {};

/**
 * Exports a report to a file of the specified format, and saves it to the disk.
 * @param {string} format A string specifying the format to which a report should be exported.
 * @return {void}
 */
ASPxClientDocumentViewer.prototype.SaveToDisk = function(format) {};
/**
 * @record
 * @struct
 */
function ASPxClientToolbarItemValueChangedEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientProcessingModeEventArgs}
 * @record
 * @struct
 */
function ASPxClientToolbarItemValueChangedEventArgs() {}
 /** @type {!ASPxClientMenuItem} */
ASPxClientToolbarItemValueChangedEventArgs.prototype.item;
 /** @type {?} */
ASPxClientToolbarItemValueChangedEventArgs.prototype.editor;
/**
 * @record
 * @struct
 */
function ASPxClientQueryBuilder() {}
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientQueryBuilder.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientQueryBuilder.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientQueryBuilder.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ASPxClientQueryBuilderCustomizeToolbarActionsEventHandler<?>>} */
ASPxClientQueryBuilder.prototype.CustomizeToolbarActions;
 /** @type {!ASPxClientEvent<!ASPxClientQueryBuilderSaveCommandExecuteEventHandler<?>>} */
ASPxClientQueryBuilder.prototype.SaveCommandExecute;

/**
 * Sends a callback to the server with the specified argument.
 * Sends a callback to the server and generates the server-side event, passing it the specified argument.
 * @param {string} arg A String value, specifying the callback argument. / A string value that represents any information that needs to be sent to the server-side event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
ASPxClientQueryBuilder.prototype.PerformCallback = function(arg, onSuccess) {};

/**
 * Updates the localization settings of the ASPxClientQueryBuilder properties.
 * @param {!Object<string,string>} localization A dictionary containing the property names, along with their localized equivalents.
 * @return {void}
 */
ASPxClientQueryBuilder.prototype.UpdateLocalization = function(localization) {};

/**
 * Returns the object model of a Query Builder.
 * @return {!Object}
 */
ASPxClientQueryBuilder.prototype.GetDesignerModel = function() {};

/**
 * Gets a client-side model of the currently opened query serialized to Json.
 * @return {string}
 */
ASPxClientQueryBuilder.prototype.GetJsonQueryModel = function() {};

/**
 * Saves the current query.
 * @return {void}
 */
ASPxClientQueryBuilder.prototype.Save = function() {};

/**
 * Invokes a Data Preview for the current query.
 * @return {void}
 */
ASPxClientQueryBuilder.prototype.ShowPreview = function() {};

/**
 * Specifies whether or not the current query is a valid SQL string.
 * @return {boolean}
 */
ASPxClientQueryBuilder.prototype.IsQueryValid = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientQueryBuilderSaveCommandExecuteEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientQueryBuilderSaveCommandExecuteEventArgs() {}
 /** @type {boolean} */
ASPxClientQueryBuilderSaveCommandExecuteEventArgs.prototype.handled;
/**
 * @record
 * @struct
 */
function ASPxClientQueryBuilderCustomizeToolbarActionsEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientReportDesigner() {}
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientReportDesigner.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientReportDesigner.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientReportDesigner.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ASPxClientReportDesignerSaveCommandExecuteEventHandler<?>>} */
ASPxClientReportDesigner.prototype.SaveCommandExecute;
 /** @type {!ASPxClientEvent<!ASPxClientReportDesignerCustomizeMenuActionsEventHandler<?>>} */
ASPxClientReportDesigner.prototype.CustomizeMenuActions;
 /** @type {!ASPxClientEvent<!ASPxClientReportDesignerCustomizeParameterEditorsEventHandler<?>>} */
ASPxClientReportDesigner.prototype.CustomizeParameterEditors;
 /** @type {!ASPxClientEvent<!ASPxClientReportDesignerCustomizeParameterLookUpSourceEventHandler<?>>} */
ASPxClientReportDesigner.prototype.CustomizeParameterLookUpSource;
 /** @type {!ASPxClientEvent<!ASPxClientReportDesignerExitDesignerEventHandler<?>>} */
ASPxClientReportDesigner.prototype.ExitDesigner;

/**
 * Sends a callback to the server with the specified argument.
 * Sends a callback to the server and generates the server-side event, passing it the specified argument.
 * @param {string} arg A String value, specifying the callback argument. / A string value that represents any information that needs to be sent to the server-side event.
 * @param {function(string): void=} onSuccess A client action to perform if the server round-trip completed successfully.
 * @return {void}
 */
ASPxClientReportDesigner.prototype.PerformCallback = function(arg, onSuccess) {};

/**
 * Updates the localization settings of the ASPxClientReportDesigner properties.
 * @param {!Object<string,string>} localization A dictionary containing the property names, along with their localized equivalents.
 * @return {void}
 */
ASPxClientReportDesigner.prototype.UpdateLocalization = function(localization) {};

/**
 * Returns the object model of a Web Report Designer.
 * @return {!Object}
 */
ASPxClientReportDesigner.prototype.GetDesignerModel = function() {};

/**
 * Gets a client-side model of the currently opened report serialized to Json.
 * @return {string}
 */
ASPxClientReportDesigner.prototype.GetJsonReportModel = function() {};

/**
 * Returns serialization information for the specific property of the specific control type.
 * @param {string} controlType A string that identifies the name of the control type for which serialization information is to be returned.
 * @param {string} propertyDisplayName A string that identifies the name of the property for which serialization information is to be returned.
 * @return {!ASPxDesignerElementSerializationInfo}
 */
ASPxClientReportDesigner.prototype.GetPropertyInfo = function(controlType, propertyDisplayName) {};

/**
 * Indicates whether or not the current ASPxClientReportDesigner instance has been modified.
 * @return {boolean}
 */
ASPxClientReportDesigner.prototype.IsModified = function() {};

/**
 * Resets the value returned by the IsModified method.
 * @return {void}
 */
ASPxClientReportDesigner.prototype.ResetIsModified = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientReportDesignerSaveCommandExecuteEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientReportDesignerSaveCommandExecuteEventArgs() {}
 /** @type {boolean} */
ASPxClientReportDesignerSaveCommandExecuteEventArgs.prototype.handled;
/**
 * @record
 * @struct
 */
function ASPxClientReportDesignerCustomizeMenuActionsEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientReportDesignerExitDesignerEventArgs() {}
/**
 * @record
 * @struct
 */
function ASPxClientReportDesignerCustomizeParameterLookUpSourceEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientReportDesignerCustomizeParameterEditorsEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientReportDesignerExitDesignerEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientReportDocumentMap() {}
 /** @type {!ASPxClientEvent<!ASPxClientEventHandler<?>>} */
ASPxClientReportDocumentMap.prototype.ContentChanged;
/**
 * @record
 * @struct
 */
function ASPxClientReportParametersPanel() {}

/**
 * Assigns a value to a parameter of the report displayed in the document viewer.
 * @param {!Array<!ASPxClientReportParameterInfo>} parametersInfo An array of ASPxClientReportParameterInfo values specifying parameters and values to assign.
 * @return {void}
 */
ASPxClientReportParametersPanel.prototype.AssignParameters = function(parametersInfo) {};

/**
 * Assigns a value to a parameter of the report displayed in the document viewer.
 * @param {string} path A System.String specifying the parameter's path.
 * @param {!Object} value An object specifying the parameter value.
 * @return {void}
 */
ASPxClientReportParametersPanel.prototype.AssignParameter = function(path, value) {};

/**
 * Returns an array storing the names of parameters available in a report.
 * @return {!Array<string>}
 */
ASPxClientReportParametersPanel.prototype.GetParameterNames = function() {};

/**
 * Returns a value editor that is associated with a parameter with the specified name.
 * @param {string} parameterName A String value, specifying the parameter name.
 * @return {?}
 */
ASPxClientReportParametersPanel.prototype.GetEditorByParameterName = function(parameterName) {};
/**
 * @record
 * @struct
 */
function ASPxClientReportParameterInfo() {}
 /** @type {string} */
ASPxClientReportParameterInfo.prototype.Path;
 /** @type {!Object} */
ASPxClientReportParameterInfo.prototype.Value;
/**
 * @record
 * @struct
 */
function ASPxClientReportToolbar() {}

/**
 * Provides access to the control template assigned for the specified menu item.
 * @param {string} name A String value, specifying the menu item name.
 * @return {?}
 */
ASPxClientReportToolbar.prototype.GetItemTemplateControl = function(name) {};
/**
 * @record
 * @struct
 */
function ASPxClientReportViewer() {}
 /** @type {!ASPxClientEvent<!ASPxClientBeginCallbackEventHandler<?>>} */
ASPxClientReportViewer.prototype.BeginCallback;
 /** @type {!ASPxClientEvent<!ASPxClientEndCallbackEventHandler<?>>} */
ASPxClientReportViewer.prototype.EndCallback;
 /** @type {!ASPxClientEvent<!ASPxClientCallbackErrorEventHandler<?>>} */
ASPxClientReportViewer.prototype.CallbackError;
 /** @type {!ASPxClientEvent<!ASPxClientReportViewerPageLoadEventHandler<?>>} */
ASPxClientReportViewer.prototype.PageLoad;

/**
 * Submits the values of the specified parameters.
 * @param {!Object<string,!Object>} parameters A dictionary containing the parameter names, along with their Object values.
 * @return {void}
 */
ASPxClientReportViewer.prototype.SubmitParameters = function(parameters) {};

/**
 * Prints a report shown in the ReportViewer.
 * Prints a report page with the specified page index.
 * @param {number=} pageIndex An integer value which specifies an index of the page to be printed.
 * @return {void}
 */
ASPxClientReportViewer.prototype.Print = function(pageIndex) {};

/**
 * Displays a report page with the specified page index in the ReportViewer.
 * @param {number} pageIndex An integer value which specifies the index of a page to be displayed.
 * @return {void}
 */
ASPxClientReportViewer.prototype.GotoPage = function(pageIndex) {};

/**
 * Initiates a round trip to the server so that the current page will be reloaded.
 * @return {void}
 */
ASPxClientReportViewer.prototype.Refresh = function() {};

/**
 * Invokes the Search dialog, which allows end-users to search for specific text in a report.
 * @return {void}
 */
ASPxClientReportViewer.prototype.Search = function() {};

/**
 * Exports a report to a file of the specified format, and shows it in a new Web Browser window.
 * @param {string} format A string specifying the format, to which a report should be exported.
 * @return {void}
 */
ASPxClientReportViewer.prototype.SaveToWindow = function(format) {};

/**
 * Exports a report to a file of the specified format, and saves it to the disk.
 * @param {string} format A string specifying the format, to which a report should be exported.
 * @return {void}
 */
ASPxClientReportViewer.prototype.SaveToDisk = function(format) {};

/**
 * Gets a value indicating whether or not searching text across a report is permitted in the web browser.
 * @return {boolean}
 */
ASPxClientReportViewer.prototype.IsSearchAllowed = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientReportViewerPageLoadEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientReportViewerPageLoadEventArgs() {}
 /** @type {number} */
ASPxClientReportViewerPageLoadEventArgs.prototype.PageIndex;
 /** @type {number} */
ASPxClientReportViewerPageLoadEventArgs.prototype.PageCount;

/**
 * Gets a value indicating whether a report page, which is currently loaded into the ASPxClientReportViewer, is the first page of a report.
 * @return {boolean}
 */
ASPxClientReportViewerPageLoadEventArgs.prototype.IsFirstPage = function() {};

/**
 * Gets a value indicating whether a report page, which is currently loaded into the ASPxClientReportViewer, is the last page of a report.
 * @return {boolean}
 */
ASPxClientReportViewerPageLoadEventArgs.prototype.IsLastPage = function() {};
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientCustomizeParameterEditorsEventArgs() {}
 /** @type {!ASPxDesignerElementParameterDescriptor} */
ASPxClientCustomizeParameterEditorsEventArgs.prototype.parameter;
 /** @type {!ASPxDesignerElementSerializationInfo} */
ASPxClientCustomizeParameterEditorsEventArgs.prototype.info;
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientCustomizeParameterLookUpSourceEventArgs() {}
 /** @type {!ASPxDesignerElementParameterDescriptor} */
ASPxClientCustomizeParameterLookUpSourceEventArgs.prototype.parameter;
 /** @type {!Array<!ASPxDesignerElementEditorItem>} */
ASPxClientCustomizeParameterLookUpSourceEventArgs.prototype.items;
 /** @type {!Object} */
ASPxClientCustomizeParameterLookUpSourceEventArgs.prototype.dataSource;
/**
 * @extends {ASPxClientEventArgs}
 * @record
 * @struct
 */
function ASPxClientCustomizeMenuActionsEventArgs() {}
 /** @type {!Array<!ASPxClientMenuAction>} */
ASPxClientCustomizeMenuActionsEventArgs.prototype.Actions;

/**
 * @param {string} actionId
 * @return {!ASPxClientMenuAction}
 */
ASPxClientCustomizeMenuActionsEventArgs.prototype.GetById = function(actionId) {};
/**
 * @record
 * @struct
 */
function ASPxClientMenuAction() {}
 /** @type {string} */
ASPxClientMenuAction.prototype.text;
 /** @type {string} */
ASPxClientMenuAction.prototype.imageClassName;
 /** @type {!Function} */
ASPxClientMenuAction.prototype.clickAction;
 /** @type {boolean} */
ASPxClientMenuAction.prototype.disabled;
 /** @type {boolean} */
ASPxClientMenuAction.prototype.visible;
 /** @type {!ASPxClientMenuActionHotKey} */
ASPxClientMenuAction.prototype.hotKey;
 /** @type {string} */
ASPxClientMenuAction.prototype.hasSeparator;
 /** @type {string} */
ASPxClientMenuAction.prototype.container;
/**
 * @record
 * @struct
 */
function ASPxClientMenuActionHotKey() {}
 /** @type {number} */
ASPxClientMenuActionHotKey.prototype.keyCode;
 /** @type {boolean} */
ASPxClientMenuActionHotKey.prototype.ctrlKey;
/**
 * @record
 * @struct
 */
function ASPxDesignerElementParameterDescriptor() {}
 /** @type {string} */
ASPxDesignerElementParameterDescriptor.prototype.description;
 /** @type {string} */
ASPxDesignerElementParameterDescriptor.prototype.name;
 /** @type {string} */
ASPxDesignerElementParameterDescriptor.prototype.type;
 /** @type {!Object} */
ASPxDesignerElementParameterDescriptor.prototype.value;
 /** @type {boolean} */
ASPxDesignerElementParameterDescriptor.prototype.visible;
/**
 * @record
 * @struct
 */
function ASPxDesignerElementSerializationInfo() {}
 /** @type {string} */
ASPxDesignerElementSerializationInfo.prototype.propertyName;
 /** @type {string} */
ASPxDesignerElementSerializationInfo.prototype.displayName;
 /** @type {string} */
ASPxDesignerElementSerializationInfo.prototype.modelName;
 /** @type {!Object} */
ASPxDesignerElementSerializationInfo.prototype.defaultVal;
 /** @type {!Array<!ASPxDesignerElementSerializationInfo>} */
ASPxDesignerElementSerializationInfo.prototype.info;
 /** @type {boolean} */
ASPxDesignerElementSerializationInfo.prototype.array;
 /** @type {boolean} */
ASPxDesignerElementSerializationInfo.prototype.link;
 /** @type {!ASPxDesignerElementEditor} */
ASPxDesignerElementSerializationInfo.prototype.editor;
 /** @type {!Array<!ASPxDesignerElementEditorItem>} */
ASPxDesignerElementSerializationInfo.prototype.valuesArray;
 /** @type {!Array<!Object>} */
ASPxDesignerElementSerializationInfo.prototype.validationRules;
 /** @type {!Object} */
ASPxDesignerElementSerializationInfo.prototype.visible;
 /** @type {!Object} */
ASPxDesignerElementSerializationInfo.prototype.disabled;
/**
 * @record
 * @struct
 */
function ASPxDesignerElementEditor() {}
 /** @type {string} */
ASPxDesignerElementEditor.prototype.header;
 /** @type {string} */
ASPxDesignerElementEditor.prototype.content;
 /** @type {!Object} */
ASPxDesignerElementEditor.prototype.extendedOptions;
 /** @type {!Object} */
ASPxDesignerElementEditor.prototype.editorType;
/**
 * @record
 * @struct
 */
function ASPxDesignerElementEditorItem() {}
 /** @type {!Object} */
ASPxDesignerElementEditorItem.prototype.value;
 /** @type {string} */
ASPxDesignerElementEditorItem.prototype.displayValue;
/**
 * @record
 * @struct
 */
function ASPxClientWebDocumentViewer() {}
 /** @type {!ASPxClientEvent<!ASPxClientWebDocumentViewerCustomizeMenuActionsEventHandler<?>>} */
ASPxClientWebDocumentViewer.prototype.CustomizeMenuActions;
 /** @type {!ASPxClientEvent<!ASPxClientWebDocumentViewerCustomizeParameterEditorsEventHandler<?>>} */
ASPxClientWebDocumentViewer.prototype.CustomizeParameterEditors;
 /** @type {!ASPxClientEvent<!ASPxClientWebDocumentViewerCustomizeParameterLookUpSourceEventHandler<?>>} */
ASPxClientWebDocumentViewer.prototype.CustomizeParameterLookUpSource;

/**
 * Provides access to the preview model of the ASPxClientWebDocumentViewer.
 * @return {!Object}
 */
ASPxClientWebDocumentViewer.prototype.GetPreviewModel = function() {};

/**
 * Opens the specified report in the HTML5 Document Viewer.
 * @return {!Object}
 */
ASPxClientWebDocumentViewer.prototype.OpenReport = function() {};

/**
 * Prints the current document.
 * Prints the document's page with the specified index.
 * @param {number=} pageIndex An index of the page to be printed.
 * @return {void}
 */
ASPxClientWebDocumentViewer.prototype.Print = function(pageIndex) {};

/**
 * Exports the document to a PDF file.
 * Exports the document to a specified file format.
 * @param {string=} format A String value, specifying the export format. The following formats are currently supported: 'csv', 'html', 'image', 'mht', 'pdf', 'rtf', 'txt', 'xls', and 'xlsx'.
 * @return {void}
 */
ASPxClientWebDocumentViewer.prototype.ExportTo = function(format) {};

/**
 * Updates the localization settings of the ASPxClientWebDocumentViewer properties.
 * @param {!Object<string,string>} localization A dictionary containing the property names, along with their localized equivalents.
 * @return {void}
 */
ASPxClientWebDocumentViewer.prototype.UpdateLocalization = function(localization) {};
/**
 * @record
 * @struct
 */
function ASPxClientWebDocumentViewerCustomizeMenuActionsEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientWebDocumentViewerCustomizeParameterEditorsEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ASPxClientWebDocumentViewerCustomizeParameterLookUpSourceEventHandler() {}

/* TODO: CallSignature:  */
/**
 * @extends {ASPxClientDashboardViewerStatic}
 * @record
 * @struct
 */
function MVCxClientDashboardViewerStatic() {}
/**
 * @record
 * @struct
 */
function DashboardDataAxisNamesStatic() {}
 /** @type {string} */
DashboardDataAxisNamesStatic.prototype.DefaultAxis;
 /** @type {string} */
DashboardDataAxisNamesStatic.prototype.ChartSeriesAxis;
 /** @type {string} */
DashboardDataAxisNamesStatic.prototype.ChartArgumentAxis;
 /** @type {string} */
DashboardDataAxisNamesStatic.prototype.SparklineAxis;
 /** @type {string} */
DashboardDataAxisNamesStatic.prototype.PivotColumnAxis;
 /** @type {string} */
DashboardDataAxisNamesStatic.prototype.PivotRowAxis;
/**
 * @record
 * @struct
 */
function DashboardSpecialValuesStatic() {}
 /** @type {string} */
DashboardSpecialValuesStatic.prototype.NullValue;
 /** @type {string} */
DashboardSpecialValuesStatic.prototype.OlapNullValue;
 /** @type {string} */
DashboardSpecialValuesStatic.prototype.OthersValue;
 /** @type {string} */
DashboardSpecialValuesStatic.prototype.ErrorValue;

/**
 * Returns whether or not the specified value is an NullValue.
 * @param {!Object} value The specified value.
 * @return {boolean}
 */
DashboardSpecialValuesStatic.prototype.IsNullValue = function(value) {};

/**
 * Returns whether or not the specified value is an OlapNullValue.
 * @param {!Object} value The specified value.
 * @return {boolean}
 */
DashboardSpecialValuesStatic.prototype.IsOlapNullValue = function(value) {};

/**
 * Returns whether or not the specified value is an OthersValue.
 * @param {!Object} value The specified value.
 * @return {boolean}
 */
DashboardSpecialValuesStatic.prototype.IsOthersValue = function(value) {};

/**
 * Returns whether or not the specified value is an ErrorValue.
 * @param {!Object} value The specified value.
 * @return {boolean}
 */
DashboardSpecialValuesStatic.prototype.IsErrorValue = function(value) {};
/**
 * @record
 * @struct
 */
function DashboardExportPageLayoutStatic() {}
 /** @type {string} */
DashboardExportPageLayoutStatic.prototype.Portrait;
 /** @type {string} */
DashboardExportPageLayoutStatic.prototype.Landscape;
/**
 * @record
 * @struct
 */
function DashboardExportPaperKindStatic() {}
 /** @type {string} */
DashboardExportPaperKindStatic.prototype.Letter;
 /** @type {string} */
DashboardExportPaperKindStatic.prototype.Legal;
 /** @type {string} */
DashboardExportPaperKindStatic.prototype.Executive;
 /** @type {string} */
DashboardExportPaperKindStatic.prototype.A5;
 /** @type {string} */
DashboardExportPaperKindStatic.prototype.A4;
 /** @type {string} */
DashboardExportPaperKindStatic.prototype.A3;
/**
 * @record
 * @struct
 */
function DashboardExportScaleModeStatic() {}
 /** @type {string} */
DashboardExportScaleModeStatic.prototype.None;
 /** @type {string} */
DashboardExportScaleModeStatic.prototype.UseScaleFactor;
 /** @type {string} */
DashboardExportScaleModeStatic.prototype.AutoFitToPageWidth;
 /** @type {string} */
DashboardExportScaleModeStatic.prototype.AutoFitWithinOnePage;
/**
 * @record
 * @struct
 */
function DashboardExportFilterStateStatic() {}
 /** @type {string} */
DashboardExportFilterStateStatic.prototype.None;
 /** @type {string} */
DashboardExportFilterStateStatic.prototype.Below;
 /** @type {string} */
DashboardExportFilterStateStatic.prototype.SeparatePage;
/**
 * @record
 * @struct
 */
function DashboardExportImageFormatStatic() {}
 /** @type {string} */
DashboardExportImageFormatStatic.prototype.Png;
 /** @type {string} */
DashboardExportImageFormatStatic.prototype.Gif;
 /** @type {string} */
DashboardExportImageFormatStatic.prototype.Jpg;
/**
 * @record
 * @struct
 */
function DashboardExportExcelFormatStatic() {}
 /** @type {string} */
DashboardExportExcelFormatStatic.prototype.Xls;
 /** @type {string} */
DashboardExportExcelFormatStatic.prototype.Xlsx;
 /** @type {string} */
DashboardExportExcelFormatStatic.prototype.Csv;
/**
 * @record
 * @struct
 */
function ChartExportSizeModeStatic() {}
 /** @type {string} */
ChartExportSizeModeStatic.prototype.None;
 /** @type {string} */
ChartExportSizeModeStatic.prototype.Stretch;
 /** @type {string} */
ChartExportSizeModeStatic.prototype.Zoom;
/**
 * @record
 * @struct
 */
function MapExportSizeModeStatic() {}
 /** @type {string} */
MapExportSizeModeStatic.prototype.None;
 /** @type {string} */
MapExportSizeModeStatic.prototype.Zoom;
/**
 * @record
 * @struct
 */
function RangeFilterExportSizeModeStatic() {}
 /** @type {string} */
RangeFilterExportSizeModeStatic.prototype.None;
 /** @type {string} */
RangeFilterExportSizeModeStatic.prototype.Stretch;
 /** @type {string} */
RangeFilterExportSizeModeStatic.prototype.Zoom;
/**
 * @record
 * @struct
 */
function DashboardSelectionModeStatic() {}
 /** @type {string} */
DashboardSelectionModeStatic.prototype.None;
 /** @type {string} */
DashboardSelectionModeStatic.prototype.Single;
 /** @type {string} */
DashboardSelectionModeStatic.prototype.Multiple;
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientDashboardStatic() {}
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientDashboardViewerStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientDashboardViewerStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientEditBaseStatic() {}
/**
 * @extends {ASPxClientEditBaseStatic}
 * @record
 * @struct
 */
function ASPxClientEditStatic() {}

/**
 * Assigns a null value to all editors in a specified visibility state, which are located within a specified container and belong to a specific validation group.
 * Assigns a null value to all visible editors located within a specified container, and belonging to a specific validation group.
 * Assigns a null value to all visible editors located within a specified container.
 * @param {!Object} container An HTML element specifying the container of editors to be validated.
 * @param {string=} validationGroup A string value specifying the validation group's name.
 * @param {boolean=} clearInvisibleEditors true to clear both visible and invisible editors that belong to the specified container and group; false to clear only visible editors.
 * @return {void}
 */
ASPxClientEditStatic.prototype.ClearEditorsInContainer = function(container, validationGroup, clearInvisibleEditors) {};

/**
 * Assigns a null value to all editors which are located within the specified container object, and belonging to a specific validation group, dependent on the visibility state specified.
 * Assigns a null value to all visible editors that are located within the specified container object, and belonging to a specific validation group.
 * Assigns a null value to all visible editors that are located within the specified container object.
 * @param {string} containerId A string value specifying the editor container's identifier.
 * @param {string=} validationGroup A string value specifying the validatiion group's name.
 * @param {boolean=} clearInvisibleEditors true to clear both visible and invisible editors that belong to the specified container and group; false to clear only visible editors.
 * @return {void}
 */
ASPxClientEditStatic.prototype.ClearEditorsInContainerById = function(containerId, validationGroup, clearInvisibleEditors) {};

/**
 * Assigns a null value to all editors which belong to a specific validation group, dependent on the visibility state specified.
 * Assigns a null value to all visible editors which belong to a specific validation group.
 * @param {string} validationGroup A string value specifying the validation group's name.
 * @param {boolean=} clearInvisibleEditors true to clear both visible and invisible editors that belong to the specified validation group; false to clear only visible editors.
 * @return {void}
 */
ASPxClientEditStatic.prototype.ClearGroup = function(validationGroup, clearInvisibleEditors) {};

/**
 * Performs validation of all editors in a specified visibility state, which are located within a specified container and belong to a specific validation group.
 * Performs validation of visible editors that are located within the specified container and belong to a specific validation group.
 * Performs validation of visible editors that are located within the specified container.
 * @param {!Object} container An HTML element specifying the container of editors to be validated.
 * @param {string=} validationGroup A string value that specifies the validation group's name.
 * @param {boolean=} validateInvisibleEditors true to validate both visible and invisible editors that belong to the specified container and group; false to validate only visible editors.
 * @return {boolean}
 */
ASPxClientEditStatic.prototype.ValidateEditorsInContainer = function(container, validationGroup, validateInvisibleEditors) {};

/**
 * Performs validation of the editors which are located within the specified container and belong to a specific validation group, dependent on the visibility state specified.
 * Performs validation of visible editors that are located within the specified container and belong to a specific validation group.
 * Performs validation of visible editors which are located within the specified container.
 * @param {string} containerId A string value specifying the editor container's identifier. / A string value that specifies the container's unique identifier.
 * @param {string=} validationGroup A string value that specifies the validation group's name.
 * @param {boolean=} validateInvisibleEditors true to validate both visible and invisible editors that belong to the specified container and group; false to validate only visible editors.
 * @return {boolean}
 */
ASPxClientEditStatic.prototype.ValidateEditorsInContainerById = function(containerId, validationGroup, validateInvisibleEditors) {};

/**
 * Performs validation of editors contained within the specified validation group, dependent on the editor visibility state specified.
 * Performs validation of visible editors contained within the specified validation group.
 * @param {string} validationGroup A string value specifying the validation group's name.
 * @param {boolean=} validateInvisibleEditors true to validate both visible and invisible editors that belong to the specified validation group; false to validate only visible editors.
 * @return {boolean}
 */
ASPxClientEditStatic.prototype.ValidateGroup = function(validationGroup, validateInvisibleEditors) {};

/**
 * Verifies whether the editors in a specified visibility state, which are located within a specified container and belong to a specific validation group, are valid.
 * Verifies whether visible editors, which are located within a specified container and belong to a specific validation group, are valid.
 * Verifies whether visible editors located in a specified container are valid.
 * Verifies whether the editors with the specified settings are valid.
 * Verifies whether visible editors with the specified settings are valid.
 * Verifies whether visible editors with the specified settings are valid.
 * Verifies whether visible editors on a page are valid.
 * @param {!Object|string=} container_or_containerId An HTML element specifying the container of editors to be validated. / A string value that specifies the container's unique identifier.
 * @param {string=} validationGroup A string value that specifies the validation group's name.
 * @param {boolean=} checkInvisibleEditors true to check both visible and invisible editors that belong to the specified container; false to check only visible editors.
 * @return {boolean}
 */
ASPxClientEditStatic.prototype.AreEditorsValid = function(container_or_containerId, validationGroup, checkInvisibleEditors) {};
/**
 * @extends {ASPxClientEditStatic}
 * @record
 * @struct
 */
function ASPxClientBinaryImageStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientBinaryImageStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientButtonStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientButtonStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientEditStatic}
 * @record
 * @struct
 */
function ASPxClientCalendarStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientCalendarStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientCaptchaStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientCaptchaStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientEditStatic}
 * @record
 * @struct
 */
function ASPxClientCheckBoxStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientCheckBoxStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientCheckBoxStatic}
 * @record
 * @struct
 */
function ASPxClientRadioButtonStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientRadioButtonStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientEditStatic}
 * @record
 * @struct
 */
function ASPxClientTextEditStatic() {}
/**
 * @extends {ASPxClientTextEditStatic}
 * @record
 * @struct
 */
function ASPxClientTextBoxBaseStatic() {}
/**
 * @extends {ASPxClientTextBoxBaseStatic}
 * @record
 * @struct
 */
function ASPxClientButtonEditBaseStatic() {}
/**
 * @extends {ASPxClientButtonEditBaseStatic}
 * @record
 * @struct
 */
function ASPxClientDropDownEditBaseStatic() {}
/**
 * @extends {ASPxClientDropDownEditBaseStatic}
 * @record
 * @struct
 */
function ASPxClientColorEditStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientColorEditStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientDropDownEditBaseStatic}
 * @record
 * @struct
 */
function ASPxClientComboBoxStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientComboBoxStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientDropDownEditBaseStatic}
 * @record
 * @struct
 */
function ASPxClientDateEditStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientDateEditStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientDropDownEditBaseStatic}
 * @record
 * @struct
 */
function ASPxClientDropDownEditStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientDropDownEditStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientFilterControlStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientFilterControlStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientEditStatic}
 * @record
 * @struct
 */
function ASPxClientListEditStatic() {}
/**
 * @extends {ASPxClientListEditStatic}
 * @record
 * @struct
 */
function ASPxClientListBoxStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientListBoxStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientListEditStatic}
 * @record
 * @struct
 */
function ASPxClientCheckListBaseStatic() {}
/**
 * @extends {ASPxClientCheckListBaseStatic}
 * @record
 * @struct
 */
function ASPxClientRadioButtonListStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientRadioButtonListStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientCheckListBaseStatic}
 * @record
 * @struct
 */
function ASPxClientCheckBoxListStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientCheckBoxListStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientEditBaseStatic}
 * @record
 * @struct
 */
function ASPxClientProgressBarStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientProgressBarStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientButtonEditBaseStatic}
 * @record
 * @struct
 */
function ASPxClientSpinEditBaseStatic() {}
/**
 * @extends {ASPxClientSpinEditBaseStatic}
 * @record
 * @struct
 */
function ASPxClientSpinEditStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientSpinEditStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientSpinEditBaseStatic}
 * @record
 * @struct
 */
function ASPxClientTimeEditStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientTimeEditStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientEditBaseStatic}
 * @record
 * @struct
 */
function ASPxClientStaticEditStatic() {}
/**
 * @extends {ASPxClientStaticEditStatic}
 * @record
 * @struct
 */
function ASPxClientHyperLinkStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientHyperLinkStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientStaticEditStatic}
 * @record
 * @struct
 */
function ASPxClientImageBaseStatic() {}
/**
 * @extends {ASPxClientImageBaseStatic}
 * @record
 * @struct
 */
function ASPxClientImageStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientImageStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientStaticEditStatic}
 * @record
 * @struct
 */
function ASPxClientLabelStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientLabelStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientTextBoxBaseStatic}
 * @record
 * @struct
 */
function ASPxClientTextBoxStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientTextBoxStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientTextEditStatic}
 * @record
 * @struct
 */
function ASPxClientMemoStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientMemoStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientButtonEditBaseStatic}
 * @record
 * @struct
 */
function ASPxClientButtonEditStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientButtonEditStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientComboBoxStatic}
 * @record
 * @struct
 */
function ASPxClientTokenBoxStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientTokenBoxStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientEditStatic}
 * @record
 * @struct
 */
function ASPxClientTrackBarStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientTrackBarStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientValidationSummaryStatic() {}
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientGaugeControlStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientGaugeControlStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientGridBaseStatic() {}
/**
 * @record
 * @struct
 */
function ASPxClientGridViewCallbackCommandStatic() {}
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.NextPage;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.PreviousPage;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.GotoPage;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.SelectRows;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.SelectRowsKey;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.Selection;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.FocusedRow;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.Group;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.UnGroup;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.Sort;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.ColumnMove;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.CollapseAll;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.ExpandAll;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.ExpandRow;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.CollapseRow;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.HideAllDetail;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.ShowAllDetail;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.ShowDetailRow;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.HideDetailRow;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.PagerOnClick;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.ApplyFilter;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.ApplyColumnFilter;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.ApplyMultiColumnFilter;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.ApplyHeaderColumnFilter;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.ApplySearchPanelFilter;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.FilterRowMenu;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.StartEdit;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.CancelEdit;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.UpdateEdit;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.AddNewRow;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.DeleteRow;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.CustomButton;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.CustomCallback;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.ShowFilterControl;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.CloseFilterControl;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.SetFilterEnabled;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.Refresh;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.SelFieldValues;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.RowValues;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.PageRowValues;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.FilterPopup;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.ContextMenu;
 /** @type {string} */
ASPxClientGridViewCallbackCommandStatic.prototype.CustomValues;
/**
 * @extends {ASPxClientDropDownEditBaseStatic}
 * @record
 * @struct
 */
function ASPxClientGridLookupStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientGridLookupStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientGridBaseStatic}
 * @record
 * @struct
 */
function ASPxClientCardViewStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientCardViewStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientGridBaseStatic}
 * @record
 * @struct
 */
function ASPxClientGridViewStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientGridViewStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientGridBaseStatic}
 * @record
 * @struct
 */
function ASPxClientVerticalGridStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientVerticalGridStatic.prototype.Cast = function(obj) {};
/**
 * @record
 * @struct
 */
function ASPxClientVerticalGridCallbackCommandStatic() {}
 /** @type {string} */
ASPxClientVerticalGridCallbackCommandStatic.prototype.ExpandRow;
/**
 * @record
 * @struct
 */
function ASPxClientCommandConstsStatic() {}
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.SHOWSEARCHPANEL_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.FINDANDREPLACE_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.BOLD_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.ITALIC_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.UNDERLINE_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.STRIKETHROUGH_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.SUPERSCRIPT_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.SUBSCRIPT_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.JUSTIFYCENTER_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.JUSTIFYLEFT_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INDENT_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.OUTDENT_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.JUSTIFYRIGHT_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.JUSTIFYFULL_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.FONTSIZE_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.FONTNAME_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.FONTCOLOR_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.BACKCOLOR_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.FORMATBLOCK_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.APPLYCSS_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.REMOVEFORMAT_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.UNDO_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.REDO_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.COPY_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.PASTE_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.PASTEFROMWORD_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.PASTEFROMWORDDIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CUT_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.SELECT_ALL;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.DELETE_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.PASTEHTML_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTORDEREDLIST_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTUNORDEREDLIST_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.RESTARTORDEREDLIST_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CONTINUEORDEREDLIST_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.UNLINK_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTLINK_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTIMAGE_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CHANGEIMAGE_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CHECKSPELLING_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTIMAGE_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CHANGEIMAGE_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTLINK_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CHANGELINK_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTTABLE_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.TABLEPROPERTIES_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.TABLECELLPROPERTIES_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.TABLECOLUMNPROPERTIES_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.TABLEROWPROPERTIES_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.PRINT_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.FULLSCREEN_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTTABLE_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CHANGETABLE_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CHANGETABLECELL_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CHANGETABLEROW_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CHANGETABLECOLUMN_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.DELETETABLE_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.DELETETABLEROW_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.DELETETABLECOLUMN_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTTABLECOLUMNTOLEFT_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTTABLECOLUMNTORIGHT_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTTABLEROWBELOW_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTTABLEROWABOVE_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.SPLITTABLECELLHORIZONTALLY_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.SPLITTABLECELLVERTICALLY_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.MERGETABLECELLRIGHT_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.MERGETABLECELLDOWN_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CUSTOMDIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.EXPORT_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTAUDIO_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTVIDEO_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTFLASH_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTYOUTUBEVIDEO_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CHANGEAUDIO_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CHANGEVIDEO_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CHANGEFLASH_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CHANGEYOUTUBEVIDEO_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTAUDIO_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTVIDEO_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTFLASH_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTYOUTUBEVIDEO_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CHANGEAUDIO_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CHANGEVIDEO_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CHANGEFLASH_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CHANGEYOUTUBEVIDEO_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.PASTEHTMLSOURCEFORMATTING_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.PASTEHTMLPLAINTEXT_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.PASTEHTMLMERGEFORMATTING_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTPLACEHOLDER_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CHANGEPLACEHOLDER_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INSERTPLACEHOLDER_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CHANGEPLACEHOLDER_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.UPDATEDOCUMENT_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CHANGEELEMENTPROPERTIES_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.CHANGEELEMENTPROPERTIES_DIALOG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.COMMENT_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.UNCOMMENTHTML_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.FORMATDOCUMENT_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.INDENTLINE_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.OUTDENTLINE_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.COLLAPSETAG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.EXPANDTAG_COMMAND;
 /** @type {string} */
ASPxClientCommandConstsStatic.prototype.SHOWINTELLISENSE_COMMAND;
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientHtmlEditorStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientHtmlEditorStatic.prototype.Cast = function(obj) {};

/**
 * Programmatically closes a custom dialog, supplying it with specific parameters.
 * @param {!Object} status An object representing a custom dialog's closing status.
 * @param {!Object} data An object representing custom data associated with a custom dialog.
 * @return {void}
 */
ASPxClientHtmlEditorStatic.prototype.CustomDialogComplete = function(status, data) {};
/**
 * @record
 * @struct
 */
function ASPxClientHtmlEditorMediaPreloadModeStatic() {}
 /** @type {string} */
ASPxClientHtmlEditorMediaPreloadModeStatic.prototype.None;
 /** @type {string} */
ASPxClientHtmlEditorMediaPreloadModeStatic.prototype.Auto;
 /** @type {string} */
ASPxClientHtmlEditorMediaPreloadModeStatic.prototype.Metadata;
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientPivotGridStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientPivotGridStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientPivotCustomizationStatic() {}
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientRichEditStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientRichEditStatic.prototype.Cast = function(obj) {};
/**
 * @record
 * @struct
 */
function ASPxSchedulerDateTimeHelperStatic() {}

/**
 * Returns the date part of the specified DateTime value.
 * @param {!Date} date A DateTime object from which to extract the date.
 * @return {!Date}
 */
ASPxSchedulerDateTimeHelperStatic.prototype.TruncToDate = function(date) {};

/**
 * Returns the day time part of the specified DateTime value.
 * @param {!Date} date A DateTime object from which to extract the day time.
 * @return {?}
 */
ASPxSchedulerDateTimeHelperStatic.prototype.ToDayTime = function(date) {};

/**
 * Adds the specified number of days to a DateTime object and returns the result.
 * @param {!Date} date A DateTime object to which to add days.
 * @param {number} dayCount The number of days to add.
 * @return {!Date}
 */
ASPxSchedulerDateTimeHelperStatic.prototype.AddDays = function(date, dayCount) {};

/**
 * Adds the specified timespan to a DateTime object and returns the result.
 * @param {!Date} date A DateTime object to which to add a timespan.
 * @param {?} timeSpan A TimeSpan object specifying the timespan to add.
 * @return {!Date}
 */
ASPxSchedulerDateTimeHelperStatic.prototype.AddTimeSpan = function(date, timeSpan) {};

/**
 * Rounds a DateTime value up to the nearest interval.
 * @param {!Date} date A DateTime object containing a value to round.
 * @param {?} spanInMs A TimeSpan object specifying an interval to which to round.
 * @return {!Date}
 */
ASPxSchedulerDateTimeHelperStatic.prototype.CeilDateTime = function(date, spanInMs) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientWeekDaysCheckEditStatic() {}
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientRecurrenceRangeControlStatic() {}
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientRecurrenceControlBaseStatic() {}
/**
 * @extends {ASPxClientRecurrenceControlBaseStatic}
 * @record
 * @struct
 */
function ASPxClientDailyRecurrenceControlStatic() {}
/**
 * @extends {ASPxClientRecurrenceControlBaseStatic}
 * @record
 * @struct
 */
function ASPxClientWeeklyRecurrenceControlStatic() {}
/**
 * @extends {ASPxClientRecurrenceControlBaseStatic}
 * @record
 * @struct
 */
function ASPxClientMonthlyRecurrenceControlStatic() {}
/**
 * @extends {ASPxClientRecurrenceControlBaseStatic}
 * @record
 * @struct
 */
function ASPxClientYearlyRecurrenceControlStatic() {}
/**
 * @extends {ASPxClientRadioButtonListStatic}
 * @record
 * @struct
 */
function ASPxClientRecurrenceTypeEditStatic() {}
/**
 * @record
 * @struct
 */
function ASPxClientTimeIntervalStatic() {}

/**
 * Gets the duration of a time interval between two points in time.
 * @param {!Date} start A DateTime object specifying the starting point of the time interval.
 * @param {!Date} end A DateTime object specifying the ending point of the time interval.
 * @return {number}
 */
ASPxClientTimeIntervalStatic.prototype.CalculateDuration = function(start, end) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientSchedulerStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientSchedulerStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientSpellCheckerStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientSpellCheckerStatic.prototype.Cast = function(obj) {};
/**
 * @record
 * @struct
 */
function ASPxClientSpellCheckerStopCheckingReasonStatic() {}
 /** @type {string} */
ASPxClientSpellCheckerStopCheckingReasonStatic.prototype.Default;
 /** @type {string} */
ASPxClientSpellCheckerStopCheckingReasonStatic.prototype.User;
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientSpreadsheetStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientSpreadsheetStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientTreeListStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientTreeListStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientNavBarStatic}
 * @record
 * @struct
 */
function BootstrapClientAccordionStatic() {}
/**
 * @extends {ASPxClientButtonStatic}
 * @record
 * @struct
 */
function BootstrapClientButtonStatic() {}
/**
 * @extends {ASPxClientCalendarStatic}
 * @record
 * @struct
 */
function BootstrapClientCalendarStatic() {}
/**
 * @extends {ASPxClientEditStatic}
 * @record
 * @struct
 */
function BootstrapClientCheckBoxStatic() {}
/**
 * @extends {BootstrapClientCheckBoxStatic}
 * @record
 * @struct
 */
function BootstrapClientRadioButtonStatic() {}
/**
 * @extends {ASPxClientComboBoxStatic}
 * @record
 * @struct
 */
function BootstrapClientComboBoxStatic() {}
/**
 * @extends {ASPxClientDateEditStatic}
 * @record
 * @struct
 */
function BootstrapClientDateEditStatic() {}
/**
 * @extends {ASPxClientDropDownEditStatic}
 * @record
 * @struct
 */
function BootstrapClientDropDownEditStatic() {}
/**
 * @extends {ASPxClientFormLayoutStatic}
 * @record
 * @struct
 */
function BootstrapClientFormLayoutStatic() {}
/**
 * @extends {ASPxClientGridViewStatic}
 * @record
 * @struct
 */
function BootstrapClientGridViewStatic() {}
/**
 * @extends {ASPxClientHyperLinkStatic}
 * @record
 * @struct
 */
function BootstrapClientHyperLinkStatic() {}
/**
 * @extends {ASPxClientListBoxStatic}
 * @record
 * @struct
 */
function BootstrapClientListBoxStatic() {}
/**
 * @extends {ASPxClientCheckBoxListStatic}
 * @record
 * @struct
 */
function BootstrapClientCheckBoxListStatic() {}
/**
 * @extends {ASPxClientRadioButtonListStatic}
 * @record
 * @struct
 */
function BootstrapClientRadioButtonListStatic() {}
/**
 * @extends {ASPxClientMenuStatic}
 * @record
 * @struct
 */
function BootstrapClientMenuStatic() {}
/**
 * @extends {ASPxClientPopupControlStatic}
 * @record
 * @struct
 */
function BootstrapClientPopupControlStatic() {}
/**
 * @extends {ASPxClientPopupMenuStatic}
 * @record
 * @struct
 */
function BootstrapClientPopupMenuStatic() {}
/**
 * @extends {ASPxClientProgressBarStatic}
 * @record
 * @struct
 */
function BootstrapClientProgressBarStatic() {}
/**
 * @extends {ASPxClientSpinEditStatic}
 * @record
 * @struct
 */
function BootstrapClientSpinEditStatic() {}
/**
 * @extends {ASPxClientTabControlStatic}
 * @record
 * @struct
 */
function BootstrapClientTabControlStatic() {}
/**
 * @extends {ASPxClientPageControlStatic}
 * @record
 * @struct
 */
function BootstrapClientPageControlStatic() {}
/**
 * @extends {ASPxClientTextBoxStatic}
 * @record
 * @struct
 */
function BootstrapClientTextBoxStatic() {}
/**
 * @extends {ASPxClientMemoStatic}
 * @record
 * @struct
 */
function BootstrapClientMemoStatic() {}
/**
 * @extends {ASPxClientButtonEditStatic}
 * @record
 * @struct
 */
function BootstrapClientButtonEditStatic() {}
/**
 * @extends {ASPxClientTreeViewStatic}
 * @record
 * @struct
 */
function BootstrapClientTreeViewStatic() {}
/**
 * @extends {ASPxClientCalendarStatic}
 * @record
 * @struct
 */
function MVCxClientCalendarStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientCalendarStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientCallbackPanelStatic}
 * @record
 * @struct
 */
function MVCxClientCallbackPanelStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientCallbackPanelStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientCardViewStatic}
 * @record
 * @struct
 */
function MVCxClientCardViewStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientCardViewStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientWebChartControlStatic}
 * @record
 * @struct
 */
function MVCxClientChartStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientChartStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientComboBoxStatic}
 * @record
 * @struct
 */
function MVCxClientComboBoxStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientComboBoxStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientDataViewStatic}
 * @record
 * @struct
 */
function MVCxClientDataViewStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientDataViewStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientDateEditStatic}
 * @record
 * @struct
 */
function MVCxClientDateEditStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientDateEditStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientDockManagerStatic}
 * @record
 * @struct
 */
function MVCxClientDockManagerStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientDockManagerStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientDockPanelStatic}
 * @record
 * @struct
 */
function MVCxClientDockPanelStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientDockPanelStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientFileManagerStatic}
 * @record
 * @struct
 */
function MVCxClientFileManagerStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientFileManagerStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientGridViewStatic}
 * @record
 * @struct
 */
function MVCxClientGridViewStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientGridViewStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientHtmlEditorStatic}
 * @record
 * @struct
 */
function MVCxClientHtmlEditorStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientHtmlEditorStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientImageGalleryStatic}
 * @record
 * @struct
 */
function MVCxClientImageGalleryStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientImageGalleryStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientListBoxStatic}
 * @record
 * @struct
 */
function MVCxClientListBoxStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientListBoxStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientNavBarStatic}
 * @record
 * @struct
 */
function MVCxClientNavBarStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientNavBarStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientPivotGridStatic}
 * @record
 * @struct
 */
function MVCxClientPivotGridStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientPivotGridStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientPopupControlStatic}
 * @record
 * @struct
 */
function MVCxClientPopupControlStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientPopupControlStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientDocumentViewerStatic}
 * @record
 * @struct
 */
function MVCxClientDocumentViewerStatic() {}
/**
 * @extends {ASPxClientReportViewerStatic}
 * @record
 * @struct
 */
function MVCxClientReportViewerStatic() {}
/**
 * @extends {ASPxClientReportDesignerStatic}
 * @record
 * @struct
 */
function MVCxClientReportDesignerStatic() {}
/**
 * @extends {ASPxClientRichEditStatic}
 * @record
 * @struct
 */
function MVCxClientRichEditStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientRichEditStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientRoundPanelStatic}
 * @record
 * @struct
 */
function MVCxClientRoundPanelStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientRoundPanelStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientSchedulerStatic}
 * @record
 * @struct
 */
function MVCxClientSchedulerStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientSchedulerStatic.prototype.Cast = function(obj) {};
/**
 * @record
 * @struct
 */
function MVCxSchedulerToolTipTypeStatic() {}
 /** @type {number} */
MVCxSchedulerToolTipTypeStatic.prototype.Appointment;
 /** @type {number} */
MVCxSchedulerToolTipTypeStatic.prototype.AppointmentDrag;
 /** @type {number} */
MVCxSchedulerToolTipTypeStatic.prototype.Selection;
/**
 * @extends {ASPxClientSpreadsheetStatic}
 * @record
 * @struct
 */
function MVCxClientSpreadsheetStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientSpreadsheetStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientPageControlStatic}
 * @record
 * @struct
 */
function MVCxClientPageControlStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientPageControlStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientTokenBoxStatic}
 * @record
 * @struct
 */
function MVCxClientTokenBoxStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientTokenBoxStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientTreeListStatic}
 * @record
 * @struct
 */
function MVCxClientTreeListStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientTreeListStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientTreeViewStatic}
 * @record
 * @struct
 */
function MVCxClientTreeViewStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientTreeViewStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientUploadControlStatic}
 * @record
 * @struct
 */
function MVCxClientUploadControlStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientUploadControlStatic.prototype.Cast = function(obj) {};
/**
 * @record
 * @struct
 */
function MVCxClientUtilsStatic() {}

/**
 * Loads service resources (such as scripts, CSS files, etc.) required for DevExpress functionality to work properly after a non DevExpress callback has been processed on the server and returned back to the client.
 * @return {void}
 */
MVCxClientUtilsStatic.prototype.FinalizeCallback = function() {};

/**
 * Returns values of editors placed in the specified container.
 * Returns values of editors placed in the specified container.
 * @param {!Object} containerOrId A container of editors, or its ID.
 * @param {boolean=} processInvisibleEditors true to process both visible and invisible editors that belong to the specified container; false to process only visible editors.
 * @return {!Object}
 */
MVCxClientUtilsStatic.prototype.GetSerializedEditorValuesInContainer = function(containerOrId, processInvisibleEditors) {};
/**
 * @record
 * @struct
 */
function MVCxClientGlobalEventsStatic() {}

/**
 * Dynamically connects the ControlsInitialized client event with an appropriate event handler function.
 * @param {!ASPxClientControlsInitializedEventHandler<?>} handler A object representing the event handling function's content.
 * @return {void}
 */
MVCxClientGlobalEventsStatic.prototype.AddControlsInitializedEventHandler = function(handler) {};

/**
 * Dynamically connects the BeginCallback client event with an appropriate event handler function.
 * @param {!MVCxClientBeginCallbackEventHandler<?>} handler A object containing the event handling function's content.
 * @return {void}
 */
MVCxClientGlobalEventsStatic.prototype.AddBeginCallbackEventHandler = function(handler) {};

/**
 * Dynamically connects the EndCallback client event with an appropriate event handler function.
 * @param {!ASPxClientEndCallbackEventHandler<?>} handler A object containing the event handling function's content.
 * @return {void}
 */
MVCxClientGlobalEventsStatic.prototype.AddEndCallbackEventHandler = function(handler) {};

/**
 * Dynamically connects the CallbackError client event with an appropriate event handler function.
 * @param {!ASPxClientCallbackErrorEventHandler<?>} handler A object containing the event handling function's content.
 * @return {void}
 */
MVCxClientGlobalEventsStatic.prototype.AddCallbackErrorHandler = function(handler) {};
/**
 * @extends {ASPxClientVerticalGridStatic}
 * @record
 * @struct
 */
function MVCxClientVerticalGridStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
MVCxClientVerticalGridStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientWebDocumentViewerStatic}
 * @record
 * @struct
 */
function MVCxClientWebDocumentViewerStatic() {}
/**
 * @record
 * @struct
 */
function ASPxClientControlBaseStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientControlBaseStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlBaseStatic}
 * @record
 * @struct
 */
function ASPxClientControlStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientControlStatic.prototype.Cast = function(obj) {};

/**
 * Modifies the controls size on the page.
 * Modifies the controls size within the specified container.
 * @param {!Object=} container An HTML element that is the container of the controls.
 * @return {void}
 */
ASPxClientControlStatic.prototype.AdjustControls = function(container) {};

/**
 * Returns a collection of client web control objects.
 * @return {!ASPxClientControlCollection}
 */
ASPxClientControlStatic.prototype.GetControlCollection = function() {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientCallbackStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientCallbackStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientPanelBaseStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientPanelBaseStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientPanelBaseStatic}
 * @record
 * @struct
 */
function ASPxClientPanelStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientPanelStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientPanelStatic}
 * @record
 * @struct
 */
function ASPxClientCallbackPanelStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientCallbackPanelStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientCloudControlStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientCloudControlStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientDataViewStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientDataViewStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientDockManagerStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientDockManagerStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientPopupControlBaseStatic() {}
/**
 * @extends {ASPxClientPopupControlBaseStatic}
 * @record
 * @struct
 */
function ASPxClientDockPanelStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientDockPanelStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientDockZoneStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientDockZoneStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientFileManagerStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientFileManagerStatic.prototype.Cast = function(obj) {};
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerCommandConstsStatic() {}
 /** @type {string} */
ASPxClientFileManagerCommandConstsStatic.prototype.Rename;
 /** @type {string} */
ASPxClientFileManagerCommandConstsStatic.prototype.Move;
 /** @type {string} */
ASPxClientFileManagerCommandConstsStatic.prototype.Delete;
 /** @type {string} */
ASPxClientFileManagerCommandConstsStatic.prototype.Create;
 /** @type {string} */
ASPxClientFileManagerCommandConstsStatic.prototype.Upload;
 /** @type {string} */
ASPxClientFileManagerCommandConstsStatic.prototype.Download;
 /** @type {string} */
ASPxClientFileManagerCommandConstsStatic.prototype.Copy;
 /** @type {string} */
ASPxClientFileManagerCommandConstsStatic.prototype.Open;
/**
 * @record
 * @struct
 */
function ASPxClientFileManagerErrorConstsStatic() {}
 /** @type {number} */
ASPxClientFileManagerErrorConstsStatic.prototype.FileNotFound;
 /** @type {number} */
ASPxClientFileManagerErrorConstsStatic.prototype.FolderNotFound;
 /** @type {number} */
ASPxClientFileManagerErrorConstsStatic.prototype.AccessDenied;
 /** @type {number} */
ASPxClientFileManagerErrorConstsStatic.prototype.UnspecifiedIO;
 /** @type {number} */
ASPxClientFileManagerErrorConstsStatic.prototype.Unspecified;
 /** @type {number} */
ASPxClientFileManagerErrorConstsStatic.prototype.EmptyName;
 /** @type {number} */
ASPxClientFileManagerErrorConstsStatic.prototype.CanceledOperation;
 /** @type {number} */
ASPxClientFileManagerErrorConstsStatic.prototype.InvalidSymbols;
 /** @type {number} */
ASPxClientFileManagerErrorConstsStatic.prototype.WrongExtension;
 /** @type {number} */
ASPxClientFileManagerErrorConstsStatic.prototype.UsedByAnotherProcess;
 /** @type {number} */
ASPxClientFileManagerErrorConstsStatic.prototype.AlreadyExists;
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientFormLayoutStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientFormLayoutStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientHiddenFieldStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientHiddenFieldStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientDataViewStatic}
 * @record
 * @struct
 */
function ASPxClientImageGalleryStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientImageGalleryStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientImageSliderStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientImageSliderStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientImageSliderStatic}
 * @record
 * @struct
 */
function ASPxClientImageZoomNavigatorStatic() {}
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientImageZoomStatic() {}
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientLoadingPanelStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientLoadingPanelStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientMenuBaseStatic() {}

/**
 * Returns a collection of client menu objects.
 * @return {!ASPxClientMenuCollection}
 */
ASPxClientMenuBaseStatic.prototype.GetMenuCollection = function() {};
/**
 * @extends {ASPxClientMenuBaseStatic}
 * @record
 * @struct
 */
function ASPxClientMenuStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientMenuStatic.prototype.Cast = function(obj) {};
/**
 * @record
 * @struct
 */
function ASPxClientTouchUIStatic() {}

/**
 * Extends the specified element's functionality with scrolling via touch behavior (one finger) and the ability to display vertical and horizontal scroll bars.
 * Extends the specified element's functionality with scrolling via touch behavior (one finger) and the ability to display vertical and horizontal scroll bars.
 * Extends the specified element's functionality with  scrolling via touch behavior (one finger) and customized scrollbar-related options.
 * Extends the specified element's functionality with scrolling via touch behavior (one finger) and customized scrollbar-related options.
 * @param {string|!Object} id_or_element A string value specifying the element's ID. / An object that specifies the required DOM element. / A string value specifying the name of a DOM element that should be extended with the touch scrolling functionality. / An object specifying the DOM element to extend with the touch scrolling functionality.
 * @param {!ASPxClientTouchUIOptions=} options An ASPxClientTouchUIOptions object that provides options affecting the touch scrolling functionality.
 * @return {!ScrollExtender}
 */
ASPxClientTouchUIStatic.prototype.MakeScrollable = function(id_or_element, options) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientNavBarStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientNavBarStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientDataViewStatic}
 * @record
 * @struct
 */
function ASPxClientNewsControlStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientNewsControlStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientObjectContainerStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientObjectContainerStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientPagerStatic() {}
/**
 * @extends {ASPxClientPopupControlBaseStatic}
 * @record
 * @struct
 */
function ASPxClientPopupControlStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientPopupControlStatic.prototype.Cast = function(obj) {};

/**
 * Returns a collection of client popup control objects.
 * @return {!ASPxClientPopupControlCollection}
 */
ASPxClientPopupControlStatic.prototype.GetPopupControlCollection = function() {};
/**
 * @record
 * @struct
 */
function ASPxClientPopupControlResizeStateStatic() {}
 /** @type {number} */
ASPxClientPopupControlResizeStateStatic.prototype.Resized;
 /** @type {number} */
ASPxClientPopupControlResizeStateStatic.prototype.Collapsed;
 /** @type {number} */
ASPxClientPopupControlResizeStateStatic.prototype.Expanded;
 /** @type {number} */
ASPxClientPopupControlResizeStateStatic.prototype.Maximized;
 /** @type {number} */
ASPxClientPopupControlResizeStateStatic.prototype.RestoredAfterMaximized;
/**
 * @record
 * @struct
 */
function ASPxClientPopupControlCloseReasonStatic() {}
 /** @type {string} */
ASPxClientPopupControlCloseReasonStatic.prototype.API;
 /** @type {string} */
ASPxClientPopupControlCloseReasonStatic.prototype.CloseButton;
 /** @type {string} */
ASPxClientPopupControlCloseReasonStatic.prototype.OuterMouseClick;
 /** @type {string} */
ASPxClientPopupControlCloseReasonStatic.prototype.MouseOut;
 /** @type {string} */
ASPxClientPopupControlCloseReasonStatic.prototype.Escape;
/**
 * @extends {ASPxClientMenuBaseStatic}
 * @record
 * @struct
 */
function ASPxClientPopupMenuStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientPopupMenuStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientRatingControlStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientRatingControlStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientRibbonStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientRibbonStatic.prototype.Cast = function(obj) {};
/**
 * @record
 * @struct
 */
function ASPxClientRibbonStateStatic() {}
 /** @type {number} */
ASPxClientRibbonStateStatic.prototype.Normal;
 /** @type {number} */
ASPxClientRibbonStateStatic.prototype.Minimized;
 /** @type {number} */
ASPxClientRibbonStateStatic.prototype.TemporaryShown;
/**
 * @extends {ASPxClientPanelBaseStatic}
 * @record
 * @struct
 */
function ASPxClientRoundPanelStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientRoundPanelStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientSplitterStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientSplitterStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientTabControlBaseStatic() {}
/**
 * @extends {ASPxClientTabControlBaseStatic}
 * @record
 * @struct
 */
function ASPxClientTabControlStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientTabControlStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientTabControlBaseStatic}
 * @record
 * @struct
 */
function ASPxClientPageControlStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientPageControlStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientTimerStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientTimerStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientTitleIndexStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientTitleIndexStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientTreeViewStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientTreeViewStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientUploadControlStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientUploadControlStatic.prototype.Cast = function(obj) {};
/**
 * @record
 * @struct
 */
function ASPxClientUtilsStatic() {}
 /** @type {string} */
ASPxClientUtilsStatic.prototype.agent;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.opera;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.opera9;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.safari;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.safari3;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.safariMacOS;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.chrome;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.ie;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.ie7;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.firefox;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.firefox3;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.mozilla;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.netscape;
 /** @type {number} */
ASPxClientUtilsStatic.prototype.browserVersion;
 /** @type {number} */
ASPxClientUtilsStatic.prototype.browserMajorVersion;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.macOSPlatform;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.windowsPlatform;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.webKitFamily;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.netscapeFamily;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.touchUI;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.webKitTouchUI;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.msTouchUI;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.iOSPlatform;
 /** @type {boolean} */
ASPxClientUtilsStatic.prototype.androidPlatform;

/**
 * Inserts the specified item into the specified array object.
 * @param {!Array<!Object>} array An object that specifies the array to manipulate.
 * @param {!Object} element An object that specifies the array item to insert.
 * @return {void}
 */
ASPxClientUtilsStatic.prototype.ArrayInsert = function(array, element) {};

/**
 * Removes the specified item from the specified array object.
 * @param {!Array<!Object>} array An object that specifies the array to manipulate.
 * @param {!Object} element An object that specifies the array item to remove.
 * @return {void}
 */
ASPxClientUtilsStatic.prototype.ArrayRemove = function(array, element) {};

/**
 * Removes an item at the specified index location from the specified array object.
 * @param {!Array<!Object>} array An object that specifies the array to manipulate.
 * @param {number} index The zero-based index location of the array item to remove.
 * @return {void}
 */
ASPxClientUtilsStatic.prototype.ArrayRemoveAt = function(array, index) {};

/**
 * Removes all items from the specified array object.
 * @param {!Array<!Object>} array An object that specifies the array to manipulate.
 * @return {void}
 */
ASPxClientUtilsStatic.prototype.ArrayClear = function(array) {};

/**
 * Searches for the specified array item and returns the zero-based index of its first occurrence within the specified array object.
 * @param {!Array<!Object>} array An object that specifies the array to manipulate.
 * @param {!Object} element An object that specifies the array item to locate.
 * @return {number}
 */
ASPxClientUtilsStatic.prototype.ArrayIndexOf = function(array, element) {};

/**
 * Binds the specified function to a specific element's event, so that the function gets called whenever the event fires on the element.
 * @param {!Object} element An object specifying the required element.
 * @param {string} eventName A string value that specifies the required event name without the "on" prefix.
 * @param {!Object} method An object that specifies the event's handling function.
 * @return {void}
 */
ASPxClientUtilsStatic.prototype.AttachEventToElement = function(element, eventName, method) {};

/**
 * Unbinds the specified function from a specific element's event, so that the function stops receiving notifications when the event fires.
 * @param {!Object} element An object specifying the required element.
 * @param {string} eventName A string value that specifies the required event name.
 * @param {!Object} method An object that specifies the event's handling function.
 * @return {void}
 */
ASPxClientUtilsStatic.prototype.DetachEventFromElement = function(element, eventName, method) {};

/**
 * Returns the object that fired the event.
 * @param {!Object} htmlEvent An object that represents the current event.
 * @return {!Object}
 */
ASPxClientUtilsStatic.prototype.GetEventSource = function(htmlEvent) {};

/**
 * Gets the x-coordinate of the event-related mouse pointer position relative to an end-user's screen.
 * @param {!Object} htmlEvent An object specifying the required HTML event.
 * @return {number}
 */
ASPxClientUtilsStatic.prototype.GetEventX = function(htmlEvent) {};

/**
 * Gets the y-coordinate of the event-related mouse pointer position relative to an end-user's screen.
 * @param {!Object} htmlEvent An object specifying the required HTML event.
 * @return {number}
 */
ASPxClientUtilsStatic.prototype.GetEventY = function(htmlEvent) {};

/**
 * Gets the keyboard code for the specified event.
 * @param {!Object} htmlEvent An object specifying the required HTML event.
 * @return {number}
 */
ASPxClientUtilsStatic.prototype.GetKeyCode = function(htmlEvent) {};

/**
 * Cancels the default action of the specified event.
 * @param {!Object} htmlEvent An object that specifies the required HTML event.
 * @return {boolean}
 */
ASPxClientUtilsStatic.prototype.PreventEvent = function(htmlEvent) {};

/**
 * Cancels both the specified event's default action and the event's bubbling upon the hierarchy of event handlers.
 * @param {!Object} htmlEvent An object that specifies the required HTML event.
 * @return {boolean}
 */
ASPxClientUtilsStatic.prototype.PreventEventAndBubble = function(htmlEvent) {};

/**
 * Removes mouse capture from the specified event's source object.
 * @param {!Object} htmlEvent An object that specifies the required HTML event.
 * @return {boolean}
 */
ASPxClientUtilsStatic.prototype.PreventDragStart = function(htmlEvent) {};

/**
 * Clears any text selection made within the window's client region.
 * @return {void}
 */
ASPxClientUtilsStatic.prototype.ClearSelection = function() {};

/**
 * Gets a value that indicates whether the specified object exists on the client side.
 * @param {!Object} obj The object to test.
 * @return {boolean}
 */
ASPxClientUtilsStatic.prototype.IsExists = function(obj) {};

/**
 * Gets a value that indicates whether the specified object is a function.
 * @param {!Object} obj The object to test.
 * @return {boolean}
 */
ASPxClientUtilsStatic.prototype.IsFunction = function(obj) {};

/**
 * Gets the x-coordinate of the specified element's top left corner relative to the client area of the window, excluding scroll bars.
 * @param {!Object} element An object identifying the HTML element whose position should be obtained.
 * @return {number}
 */
ASPxClientUtilsStatic.prototype.GetAbsoluteX = function(element) {};

/**
 * Gets the y-coordinate of the specified element's top left corner relative to the client area of the window, excluding scroll bars.
 * @param {!Object} element An object identifying the HTML element whose position should be obtained.
 * @return {number}
 */
ASPxClientUtilsStatic.prototype.GetAbsoluteY = function(element) {};

/**
 * Sets the x-coordinate of the specified element's top left corner relative to the client area of the window, excluding scroll bars.
 * @param {!Object} element An object identifying the HTML element whose position should be defined.
 * @param {number} x An integer value specifying the required element's x-coordinate, in pixels.
 * @return {void}
 */
ASPxClientUtilsStatic.prototype.SetAbsoluteX = function(element, x) {};

/**
 * Sets the y-coordinate of the specified element's top left corner relative to the client area of the window, excluding scroll bars.
 * @param {!Object} element An object identifying the HTML element whose position should be defined.
 * @param {number} y An integer value specifying the required element's y-coordinate, in pixels.
 * @return {void}
 */
ASPxClientUtilsStatic.prototype.SetAbsoluteY = function(element, y) {};

/**
 * Returns the distance between the top edge of the document and the topmost portion of the content currently visible in the window.
 * @return {number}
 */
ASPxClientUtilsStatic.prototype.GetDocumentScrollTop = function() {};

/**
 * Returns the distance between the left edge of the document and the leftmost portion of the content currently visible in the window.
 * @return {number}
 */
ASPxClientUtilsStatic.prototype.GetDocumentScrollLeft = function() {};

/**
 * Gets the width of the window's client region.
 * @return {number}
 */
ASPxClientUtilsStatic.prototype.GetDocumentClientWidth = function() {};

/**
 * Gets the height of the window's client region.
 * @return {number}
 */
ASPxClientUtilsStatic.prototype.GetDocumentClientHeight = function() {};

/**
 * Gets a value indicating whether the object passed via the parentElement parameter is a parent of the object passed via the element parameter.
 * @param {!Object} parentElement An object specifying the parent HTML element.
 * @param {!Object} element An object specifying the child HTML element.
 * @return {boolean}
 */
ASPxClientUtilsStatic.prototype.GetIsParent = function(parentElement, element) {};

/**
 * Returns a reference to the specified HTML element's first parent object which has an ID that matches the specified value.
 * @param {!Object} element An object specifying the child HTML element whose parent elements are searched.
 * @param {string} id A string specifying the required parent's ID.
 * @return {!Object}
 */
ASPxClientUtilsStatic.prototype.GetParentById = function(element, id) {};

/**
 * Returns a reference to the specified HTML element's first parent object whose element name matches the specified value.
 * @param {!Object} element An object specifying the child HTML element whose parent elements are searched.
 * @param {string} tagName A string value specifying the element name (tag name) of the desired HTML element.
 * @return {!Object}
 */
ASPxClientUtilsStatic.prototype.GetParentByTagName = function(element, tagName) {};

/**
 * Returns a reference to the specified HTML element's first parent object whose class name matches the specified value.
 * @param {!Object} element An object specifying the child HTML element whose parent elements are searched.
 * @param {string} className A string value specifying the class name of the desired HTML element.
 * @return {!Object}
 */
ASPxClientUtilsStatic.prototype.GetParentByClassName = function(element, className) {};

/**
 * Returns a reference to the first element that has the specified ID in the parent HTML element specified.
 * @param {!Object} element An object identifying the parent HTML element to search.
 * @param {string} id A string specifying the ID attribute value of the desired child element.
 * @return {!Object}
 */
ASPxClientUtilsStatic.prototype.GetChildById = function(element, id) {};

/**
 * Returns a reference to the particular element that has the specified element name and is contained within the specified parent HTML element.
 * @param {!Object} element An object specifying the parent HTML element to search.
 * @param {string} tagName A string value specifying the element name (tag name) of the desired HTML element.
 * @param {number} index An integer value specifying the zero-based index of the desired element amongst all the matching elements found.
 * @return {!Object}
 */
ASPxClientUtilsStatic.prototype.GetChildByTagName = function(element, tagName, index) {};

/**
 * Creates or updates the HTTP cookie for the response.
 * Creates or updates the HTTP cookie for the response.
 * @param {string} name A string value that represents the name of a cookie.
 * @param {string} value A string representing the cookie value.
 * @param {!Date=} expirationDate A date-time object that represents the expiration date and time for the cookie.
 * @return {void}
 */
ASPxClientUtilsStatic.prototype.SetCookie = function(name, value, expirationDate) {};

/**
 * Retrieves a cookie with the specified name.
 * @param {string} name A string value that represents the name of a cookie.
 * @return {string}
 */
ASPxClientUtilsStatic.prototype.GetCookie = function(name) {};

/**
 * Deletes a cookie with the specified name.
 * @param {string} name A string value that represents the name of a cookie.
 * @return {void}
 */
ASPxClientUtilsStatic.prototype.DeleteCookie = function(name) {};

/**
 * Returns a specifically generated code that uniquely identifies the combination of keys specified via the parameters.
 * @param {number} keyCode An integer value that specifies the code of the key.
 * @param {boolean} isCtrlKey true if the CTRL key should be included into the key combination; otherwise, false.
 * @param {boolean} isShiftKey true if the SHIFT key should be included into the key combination; otherwise, false.
 * @param {boolean} isAltKey true if the ALT key should be included into the key combination; otherwise, false.
 * @return {number}
 */
ASPxClientUtilsStatic.prototype.GetShortcutCode = function(keyCode, isCtrlKey, isShiftKey, isAltKey) {};

/**
 * Returns a specifically generated code that uniquely identifies the pressed key combination, which is specified by the related HTML event.
 * @param {!Object} htmlEvent A DHTML event object that relates to a key combination being pressed.
 * @return {number}
 */
ASPxClientUtilsStatic.prototype.GetShortcutCodeByEvent = function(htmlEvent) {};

/**
 * Returns a specifically generated code that uniquely identifies the combination of keys specified via the parameter.
 * @param {string} shortcutString A string value that specifies the key combination.
 * @return {number}
 */
ASPxClientUtilsStatic.prototype.StringToShortcutCode = function(shortcutString) {};

/**
 * Trims all leading and trailing whitespaces from the string.
 * @param {string} str A string value representing the string for trimming.
 * @return {string}
 */
ASPxClientUtilsStatic.prototype.Trim = function(str) {};

/**
 * Trims all leading whitespaces from the string.
 * @param {string} str A string value representing the string for trimming.
 * @return {string}
 */
ASPxClientUtilsStatic.prototype.TrimStart = function(str) {};

/**
 * Trims all trailing whitespaces from the string.
 * @param {string} str A string value representing the string for trimming.
 * @return {string}
 */
ASPxClientUtilsStatic.prototype.TrimEnd = function(str) {};

/**
 * Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
 * @param {string} message A String value that specifies a text.
 * @return {void}
 */
ASPxClientUtilsStatic.prototype.SendMessageToAssistiveTechnology = function(message) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientChartDesignerStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientChartDesignerStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientWebChartControlStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientWebChartControlStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientDocumentViewerStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientDocumentViewerStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientQueryBuilderStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientQueryBuilderStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientReportDesignerStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientReportDesignerStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientReportDocumentMapStatic() {}
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientReportParametersPanelStatic() {}
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientReportToolbarStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientReportToolbarStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientReportViewerStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientReportViewerStatic.prototype.Cast = function(obj) {};
/**
 * @extends {ASPxClientControlStatic}
 * @record
 * @struct
 */
function ASPxClientWebDocumentViewerStatic() {}

/**
 * Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
 * @param {!Object} obj The client object to be type cast. Represents an instance of a DevExpress web control's client object.
 * @return {?}
 */
ASPxClientWebDocumentViewerStatic.prototype.Cast = function(obj) {};
 /** @type {!MVCxClientDashboardViewerStatic} */
var MVCxClientDashboardViewer;
 /** @type {!DashboardDataAxisNamesStatic} */
var DashboardDataAxisNames;
 /** @type {!DashboardSpecialValuesStatic} */
var DashboardSpecialValues;
 /** @type {!DashboardExportPageLayoutStatic} */
var DashboardExportPageLayout;
 /** @type {!DashboardExportPaperKindStatic} */
var DashboardExportPaperKind;
 /** @type {!DashboardExportScaleModeStatic} */
var DashboardExportScaleMode;
 /** @type {!DashboardExportFilterStateStatic} */
var DashboardExportFilterState;
 /** @type {!DashboardExportImageFormatStatic} */
var DashboardExportImageFormat;
 /** @type {!DashboardExportExcelFormatStatic} */
var DashboardExportExcelFormat;
 /** @type {!ChartExportSizeModeStatic} */
var ChartExportSizeMode;
 /** @type {!MapExportSizeModeStatic} */
var MapExportSizeMode;
 /** @type {!RangeFilterExportSizeModeStatic} */
var RangeFilterExportSizeMode;
 /** @type {!DashboardSelectionModeStatic} */
var DashboardSelectionMode;
 /** @type {!ASPxClientDashboardStatic} */
var ASPxClientDashboard;
 /** @type {!ASPxClientDashboardViewerStatic} */
var ASPxClientDashboardViewer;
 /** @type {!ASPxClientEditBaseStatic} */
var ASPxClientEditBase;
 /** @type {!ASPxClientEditStatic} */
var ASPxClientEdit;
 /** @type {!ASPxClientBinaryImageStatic} */
var ASPxClientBinaryImage;
 /** @type {!ASPxClientButtonStatic} */
var ASPxClientButton;
 /** @type {!ASPxClientCalendarStatic} */
var ASPxClientCalendar;
 /** @type {!ASPxClientCaptchaStatic} */
var ASPxClientCaptcha;
 /** @type {!ASPxClientCheckBoxStatic} */
var ASPxClientCheckBox;
 /** @type {!ASPxClientRadioButtonStatic} */
var ASPxClientRadioButton;
 /** @type {!ASPxClientTextEditStatic} */
var ASPxClientTextEdit;
 /** @type {!ASPxClientTextBoxBaseStatic} */
var ASPxClientTextBoxBase;
 /** @type {!ASPxClientButtonEditBaseStatic} */
var ASPxClientButtonEditBase;
 /** @type {!ASPxClientDropDownEditBaseStatic} */
var ASPxClientDropDownEditBase;
 /** @type {!ASPxClientColorEditStatic} */
var ASPxClientColorEdit;
 /** @type {!ASPxClientComboBoxStatic} */
var ASPxClientComboBox;
 /** @type {!ASPxClientDateEditStatic} */
var ASPxClientDateEdit;
 /** @type {!ASPxClientDropDownEditStatic} */
var ASPxClientDropDownEdit;
 /** @type {!ASPxClientFilterControlStatic} */
var ASPxClientFilterControl;
 /** @type {!ASPxClientListEditStatic} */
var ASPxClientListEdit;
 /** @type {!ASPxClientListBoxStatic} */
var ASPxClientListBox;
 /** @type {!ASPxClientCheckListBaseStatic} */
var ASPxClientCheckListBase;
 /** @type {!ASPxClientRadioButtonListStatic} */
var ASPxClientRadioButtonList;
 /** @type {!ASPxClientCheckBoxListStatic} */
var ASPxClientCheckBoxList;
 /** @type {!ASPxClientProgressBarStatic} */
var ASPxClientProgressBar;
 /** @type {!ASPxClientSpinEditBaseStatic} */
var ASPxClientSpinEditBase;
 /** @type {!ASPxClientSpinEditStatic} */
var ASPxClientSpinEdit;
 /** @type {!ASPxClientTimeEditStatic} */
var ASPxClientTimeEdit;
 /** @type {!ASPxClientStaticEditStatic} */
var ASPxClientStaticEdit;
 /** @type {!ASPxClientHyperLinkStatic} */
var ASPxClientHyperLink;
 /** @type {!ASPxClientImageBaseStatic} */
var ASPxClientImageBase;
 /** @type {!ASPxClientImageStatic} */
var ASPxClientImage;
 /** @type {!ASPxClientLabelStatic} */
var ASPxClientLabel;
 /** @type {!ASPxClientTextBoxStatic} */
var ASPxClientTextBox;
 /** @type {!ASPxClientMemoStatic} */
var ASPxClientMemo;
 /** @type {!ASPxClientButtonEditStatic} */
var ASPxClientButtonEdit;
 /** @type {!ASPxClientTokenBoxStatic} */
var ASPxClientTokenBox;
 /** @type {!ASPxClientTrackBarStatic} */
var ASPxClientTrackBar;
 /** @type {!ASPxClientValidationSummaryStatic} */
var ASPxClientValidationSummary;
 /** @type {!ASPxClientGaugeControlStatic} */
var ASPxClientGaugeControl;
 /** @type {!ASPxClientGridBaseStatic} */
var ASPxClientGridBase;
 /** @type {!ASPxClientGridViewCallbackCommandStatic} */
var ASPxClientGridViewCallbackCommand;
 /** @type {!ASPxClientGridLookupStatic} */
var ASPxClientGridLookup;
 /** @type {!ASPxClientCardViewStatic} */
var ASPxClientCardView;
 /** @type {!ASPxClientGridViewStatic} */
var ASPxClientGridView;
 /** @type {!ASPxClientVerticalGridStatic} */
var ASPxClientVerticalGrid;
 /** @type {!ASPxClientVerticalGridCallbackCommandStatic} */
var ASPxClientVerticalGridCallbackCommand;
 /** @type {!ASPxClientCommandConstsStatic} */
var ASPxClientCommandConsts;
 /** @type {!ASPxClientHtmlEditorStatic} */
var ASPxClientHtmlEditor;
 /** @type {!ASPxClientHtmlEditorMediaPreloadModeStatic} */
var ASPxClientHtmlEditorMediaPreloadMode;
 /** @type {!ASPxClientPivotGridStatic} */
var ASPxClientPivotGrid;
 /** @type {!ASPxClientPivotCustomizationStatic} */
var ASPxClientPivotCustomization;
 /** @type {!ASPxClientRichEditStatic} */
var ASPxClientRichEdit;
 /** @type {!ASPxSchedulerDateTimeHelperStatic} */
var ASPxSchedulerDateTimeHelper;
 /** @type {!ASPxClientWeekDaysCheckEditStatic} */
var ASPxClientWeekDaysCheckEdit;
 /** @type {!ASPxClientRecurrenceRangeControlStatic} */
var ASPxClientRecurrenceRangeControl;
 /** @type {!ASPxClientRecurrenceControlBaseStatic} */
var ASPxClientRecurrenceControlBase;
 /** @type {!ASPxClientDailyRecurrenceControlStatic} */
var ASPxClientDailyRecurrenceControl;
 /** @type {!ASPxClientWeeklyRecurrenceControlStatic} */
var ASPxClientWeeklyRecurrenceControl;
 /** @type {!ASPxClientMonthlyRecurrenceControlStatic} */
var ASPxClientMonthlyRecurrenceControl;
 /** @type {!ASPxClientYearlyRecurrenceControlStatic} */
var ASPxClientYearlyRecurrenceControl;
 /** @type {!ASPxClientRecurrenceTypeEditStatic} */
var ASPxClientRecurrenceTypeEdit;
 /** @type {!ASPxClientTimeIntervalStatic} */
var ASPxClientTimeInterval;
 /** @type {!ASPxClientSchedulerStatic} */
var ASPxClientScheduler;
 /** @type {!ASPxClientSpellCheckerStatic} */
var ASPxClientSpellChecker;
 /** @type {!ASPxClientSpellCheckerStopCheckingReasonStatic} */
var ASPxClientSpellCheckerStopCheckingReason;
 /** @type {!ASPxClientSpreadsheetStatic} */
var ASPxClientSpreadsheet;
 /** @type {!ASPxClientTreeListStatic} */
var ASPxClientTreeList;
 /** @type {!BootstrapClientAccordionStatic} */
var BootstrapClientAccordion;
 /** @type {!BootstrapClientButtonStatic} */
var BootstrapClientButton;
 /** @type {!BootstrapClientCalendarStatic} */
var BootstrapClientCalendar;
 /** @type {!BootstrapClientCheckBoxStatic} */
var BootstrapClientCheckBox;
 /** @type {!BootstrapClientRadioButtonStatic} */
var BootstrapClientRadioButton;
 /** @type {!BootstrapClientComboBoxStatic} */
var BootstrapClientComboBox;
 /** @type {!BootstrapClientDateEditStatic} */
var BootstrapClientDateEdit;
 /** @type {!BootstrapClientDropDownEditStatic} */
var BootstrapClientDropDownEdit;
 /** @type {!BootstrapClientFormLayoutStatic} */
var BootstrapClientFormLayout;
 /** @type {!BootstrapClientGridViewStatic} */
var BootstrapClientGridView;
 /** @type {!BootstrapClientHyperLinkStatic} */
var BootstrapClientHyperLink;
 /** @type {!BootstrapClientListBoxStatic} */
var BootstrapClientListBox;
 /** @type {!BootstrapClientCheckBoxListStatic} */
var BootstrapClientCheckBoxList;
 /** @type {!BootstrapClientRadioButtonListStatic} */
var BootstrapClientRadioButtonList;
 /** @type {!BootstrapClientMenuStatic} */
var BootstrapClientMenu;
 /** @type {!BootstrapClientPopupControlStatic} */
var BootstrapClientPopupControl;
 /** @type {!BootstrapClientPopupMenuStatic} */
var BootstrapClientPopupMenu;
 /** @type {!BootstrapClientProgressBarStatic} */
var BootstrapClientProgressBar;
 /** @type {!BootstrapClientSpinEditStatic} */
var BootstrapClientSpinEdit;
 /** @type {!BootstrapClientTabControlStatic} */
var BootstrapClientTabControl;
 /** @type {!BootstrapClientPageControlStatic} */
var BootstrapClientPageControl;
 /** @type {!BootstrapClientTextBoxStatic} */
var BootstrapClientTextBox;
 /** @type {!BootstrapClientMemoStatic} */
var BootstrapClientMemo;
 /** @type {!BootstrapClientButtonEditStatic} */
var BootstrapClientButtonEdit;
 /** @type {!BootstrapClientTreeViewStatic} */
var BootstrapClientTreeView;
 /** @type {!MVCxClientCalendarStatic} */
var MVCxClientCalendar;
 /** @type {!MVCxClientCallbackPanelStatic} */
var MVCxClientCallbackPanel;
 /** @type {!MVCxClientCardViewStatic} */
var MVCxClientCardView;
 /** @type {!MVCxClientChartStatic} */
var MVCxClientChart;
 /** @type {!MVCxClientComboBoxStatic} */
var MVCxClientComboBox;
 /** @type {!MVCxClientDataViewStatic} */
var MVCxClientDataView;
 /** @type {!MVCxClientDateEditStatic} */
var MVCxClientDateEdit;
 /** @type {!MVCxClientDockManagerStatic} */
var MVCxClientDockManager;
 /** @type {!MVCxClientDockPanelStatic} */
var MVCxClientDockPanel;
 /** @type {!MVCxClientFileManagerStatic} */
var MVCxClientFileManager;
 /** @type {!MVCxClientGridViewStatic} */
var MVCxClientGridView;
 /** @type {!MVCxClientHtmlEditorStatic} */
var MVCxClientHtmlEditor;
 /** @type {!MVCxClientImageGalleryStatic} */
var MVCxClientImageGallery;
 /** @type {!MVCxClientListBoxStatic} */
var MVCxClientListBox;
 /** @type {!MVCxClientNavBarStatic} */
var MVCxClientNavBar;
 /** @type {!MVCxClientPivotGridStatic} */
var MVCxClientPivotGrid;
 /** @type {!MVCxClientPopupControlStatic} */
var MVCxClientPopupControl;
 /** @type {!MVCxClientDocumentViewerStatic} */
var MVCxClientDocumentViewer;
 /** @type {!MVCxClientReportViewerStatic} */
var MVCxClientReportViewer;
 /** @type {!MVCxClientReportDesignerStatic} */
var MVCxClientReportDesigner;
 /** @type {!MVCxClientRichEditStatic} */
var MVCxClientRichEdit;
 /** @type {!MVCxClientRoundPanelStatic} */
var MVCxClientRoundPanel;
 /** @type {!MVCxClientSchedulerStatic} */
var MVCxClientScheduler;
 /** @type {!MVCxSchedulerToolTipTypeStatic} */
var MVCxSchedulerToolTipType;
 /** @type {!MVCxClientSpreadsheetStatic} */
var MVCxClientSpreadsheet;
 /** @type {!MVCxClientPageControlStatic} */
var MVCxClientPageControl;
 /** @type {!MVCxClientTokenBoxStatic} */
var MVCxClientTokenBox;
 /** @type {!MVCxClientTreeListStatic} */
var MVCxClientTreeList;
 /** @type {!MVCxClientTreeViewStatic} */
var MVCxClientTreeView;
 /** @type {!MVCxClientUploadControlStatic} */
var MVCxClientUploadControl;
 /** @type {!MVCxClientUtilsStatic} */
var MVCxClientUtils;
 /** @type {!MVCxClientGlobalEventsStatic} */
var MVCxClientGlobalEvents;
 /** @type {!MVCxClientVerticalGridStatic} */
var MVCxClientVerticalGrid;
 /** @type {!MVCxClientWebDocumentViewerStatic} */
var MVCxClientWebDocumentViewer;
 /** @type {!ASPxClientControlBaseStatic} */
var ASPxClientControlBase;
 /** @type {!ASPxClientControlStatic} */
var ASPxClientControl;
 /** @type {!ASPxClientCallbackStatic} */
var ASPxClientCallback;
 /** @type {!ASPxClientPanelBaseStatic} */
var ASPxClientPanelBase;
 /** @type {!ASPxClientPanelStatic} */
var ASPxClientPanel;
 /** @type {!ASPxClientCallbackPanelStatic} */
var ASPxClientCallbackPanel;
 /** @type {!ASPxClientCloudControlStatic} */
var ASPxClientCloudControl;
 /** @type {!ASPxClientDataViewStatic} */
var ASPxClientDataView;
 /** @type {!ASPxClientDockManagerStatic} */
var ASPxClientDockManager;
 /** @type {!ASPxClientPopupControlBaseStatic} */
var ASPxClientPopupControlBase;
 /** @type {!ASPxClientDockPanelStatic} */
var ASPxClientDockPanel;
 /** @type {!ASPxClientDockZoneStatic} */
var ASPxClientDockZone;
 /** @type {!ASPxClientFileManagerStatic} */
var ASPxClientFileManager;
 /** @type {!ASPxClientFileManagerCommandConstsStatic} */
var ASPxClientFileManagerCommandConsts;
 /** @type {!ASPxClientFileManagerErrorConstsStatic} */
var ASPxClientFileManagerErrorConsts;
 /** @type {!ASPxClientFormLayoutStatic} */
var ASPxClientFormLayout;
 /** @type {!ASPxClientHiddenFieldStatic} */
var ASPxClientHiddenField;
 /** @type {!ASPxClientImageGalleryStatic} */
var ASPxClientImageGallery;
 /** @type {!ASPxClientImageSliderStatic} */
var ASPxClientImageSlider;
 /** @type {!ASPxClientImageZoomNavigatorStatic} */
var ASPxClientImageZoomNavigator;
 /** @type {!ASPxClientImageZoomStatic} */
var ASPxClientImageZoom;
 /** @type {!ASPxClientLoadingPanelStatic} */
var ASPxClientLoadingPanel;
 /** @type {!ASPxClientMenuBaseStatic} */
var ASPxClientMenuBase;
 /** @type {!ASPxClientMenuStatic} */
var ASPxClientMenu;
 /** @type {!ASPxClientTouchUIStatic} */
var ASPxClientTouchUI;
 /** @type {!ASPxClientNavBarStatic} */
var ASPxClientNavBar;
 /** @type {!ASPxClientNewsControlStatic} */
var ASPxClientNewsControl;
 /** @type {!ASPxClientObjectContainerStatic} */
var ASPxClientObjectContainer;
 /** @type {!ASPxClientPagerStatic} */
var ASPxClientPager;
 /** @type {!ASPxClientPopupControlStatic} */
var ASPxClientPopupControl;
 /** @type {!ASPxClientPopupControlResizeStateStatic} */
var ASPxClientPopupControlResizeState;
 /** @type {!ASPxClientPopupControlCloseReasonStatic} */
var ASPxClientPopupControlCloseReason;
 /** @type {!ASPxClientPopupMenuStatic} */
var ASPxClientPopupMenu;
 /** @type {!ASPxClientRatingControlStatic} */
var ASPxClientRatingControl;
 /** @type {!ASPxClientRibbonStatic} */
var ASPxClientRibbon;
 /** @type {!ASPxClientRibbonStateStatic} */
var ASPxClientRibbonState;
 /** @type {!ASPxClientRoundPanelStatic} */
var ASPxClientRoundPanel;
 /** @type {!ASPxClientSplitterStatic} */
var ASPxClientSplitter;
 /** @type {!ASPxClientTabControlBaseStatic} */
var ASPxClientTabControlBase;
 /** @type {!ASPxClientTabControlStatic} */
var ASPxClientTabControl;
 /** @type {!ASPxClientPageControlStatic} */
var ASPxClientPageControl;
 /** @type {!ASPxClientTimerStatic} */
var ASPxClientTimer;
 /** @type {!ASPxClientTitleIndexStatic} */
var ASPxClientTitleIndex;
 /** @type {!ASPxClientTreeViewStatic} */
var ASPxClientTreeView;
 /** @type {!ASPxClientUploadControlStatic} */
var ASPxClientUploadControl;
 /** @type {!ASPxClientUtilsStatic} */
var ASPxClientUtils;
 /** @type {!ASPxClientChartDesignerStatic} */
var ASPxClientChartDesigner;
 /** @type {!ASPxClientWebChartControlStatic} */
var ASPxClientWebChartControl;
 /** @type {!ASPxClientDocumentViewerStatic} */
var ASPxClientDocumentViewer;
 /** @type {!ASPxClientQueryBuilderStatic} */
var ASPxClientQueryBuilder;
 /** @type {!ASPxClientReportDesignerStatic} */
var ASPxClientReportDesigner;
 /** @type {!ASPxClientReportDocumentMapStatic} */
var ASPxClientReportDocumentMap;
 /** @type {!ASPxClientReportParametersPanelStatic} */
var ASPxClientReportParametersPanel;
 /** @type {!ASPxClientReportToolbarStatic} */
var ASPxClientReportToolbar;
 /** @type {!ASPxClientReportViewerStatic} */
var ASPxClientReportViewer;
 /** @type {!ASPxClientWebDocumentViewerStatic} */
var ASPxClientWebDocumentViewer;
