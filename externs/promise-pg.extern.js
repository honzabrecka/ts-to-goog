/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/promise-pg/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ExportDeclaration in  */
/**
 * @extends {ClientConfig}
 * @record
 * @struct
 */
function ClientConfig() {}

/**
 * @param {string|?} connection
 * @return {?<!Client>}
 */
function connect(connection) {}

/**
 * @return {?<void>}
 */
function end() {}
/**
 * @extends {QueryConfig}
 * @record
 * @struct
 */
function QueryConfig() {}
 /** @type {boolean} */
QueryConfig.prototype.buffer;

/**
 * @constructor
 * @struct
 * @param {string|?} connection_or_config
 */
function Client(connection_or_config) {}
 /** @type {!Client} */
Client.prototype.raw;

/**
 * @return {?<void>}
 */
Client.prototype.connect = function() {};

/**
 * @return {?<void>}
 */
Client.prototype.end = function() {};

/**
 * @param {string|?} queryText_or_config
 * @param {!Array<?>=} values
 * @return {!Query}
 */
Client.prototype.query = function(queryText_or_config, values) {};

/**
 * @param {string} queryText
 * @return {!internal.Writable}
 */
Client.prototype.copyFrom = function(queryText) {};

/**
 * @param {string} queryText
 * @return {!internal.Readable}
 */
Client.prototype.copyTo = function(queryText) {};

/**
 * @return {void}
 */
Client.prototype.pauseDrain = function() {};

/**
 * @return {void}
 */
Client.prototype.resumeDrain = function() {};

/**
 * @param {string} event
 * @param {function(): void|function(!Error): void|function(?): void|!Function} listener
 * @return {!Client}
 */
Client.prototype.on = function(event, listener) {};

/**
 * @param {function(): ?<?>} task
 * @return {?<?>}
 */
Client.prototype.transaction = function(task) {};
/**
 * @extends {QueryResult}
 * @record
 * @struct
 */
function QueryResult() {}
/**
 * @extends {ResultBuilder}
 * @record
 * @struct
 */
function ResultBuilder() {}
/**
 * @extends {Query}
 * @constructor
 * @struct
 */
function Query() {}
 /** @type {?<?>} */
Query.prototype.promise;
