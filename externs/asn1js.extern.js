/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/asn1js/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ExportAssignment in  */
/** @const */
var Asn1js = {};
/**
 * @record
 * @struct
 */
Asn1js.LocalBaseBlockParams = function() {};
 /** @type {number} */
Asn1js.LocalBaseBlockParams.prototype.blockLength;
 /** @type {string} */
Asn1js.LocalBaseBlockParams.prototype.error;
 /** @type {!Array<string>} */
Asn1js.LocalBaseBlockParams.prototype.warnings;
 /** @type {!ArrayBuffer} */
Asn1js.LocalBaseBlockParams.prototype.valueBeforeDecode;
/**
 * @record
 * @struct
 */
Asn1js.JsonLocalBaseBlock = function() {};
 /** @type {string} */
Asn1js.JsonLocalBaseBlock.prototype.blockName;
 /** @type {number} */
Asn1js.JsonLocalBaseBlock.prototype.blockLength;
 /** @type {string} */
Asn1js.JsonLocalBaseBlock.prototype.error;
 /** @type {!Array<string>} */
Asn1js.JsonLocalBaseBlock.prototype.warnings;
 /** @type {!ArrayBuffer} */
Asn1js.JsonLocalBaseBlock.prototype.valueBeforeDecode;

/**
 * @constructor
 * @struct
 * @param {!Asn1js.LocalBaseBlockParams=} params
 */
Asn1js.LocalBaseBlock = function(params) {};
 /** @type {number} */
Asn1js.LocalBaseBlock.prototype.blockLength;
 /** @type {string} */
Asn1js.LocalBaseBlock.prototype.error;
 /** @type {!Array<string>} */
Asn1js.LocalBaseBlock.prototype.warnings;
 /** @type {!ArrayBuffer} */
Asn1js.LocalBaseBlock.prototype.valueBeforeDecode;

/**
 * Aux function, need to get a block name. Need to have it here for inhiritence
 * 
 * 
 * \@memberOf LocalBaseBlock
 * @return {string}
 */
Asn1js.LocalBaseBlock.blockName = function() {};

/**
 * Convertion for the block to JSON object
 * 
 * 
 * \@memberOf LocalBaseBlock
 * @return {!Asn1js.JsonLocalBaseBlock}
 */
Asn1js.LocalBaseBlock.prototype.toJSON = function() {};
/**
 * @extends {Asn1js.LocalBaseBlockParams}
 * @record
 * @struct
 */
Asn1js.LocalHexBlockParams = function() {};
 /** @type {boolean} */
Asn1js.LocalHexBlockParams.prototype.isHexOnly;
 /** @type {!ArrayBuffer} */
Asn1js.LocalHexBlockParams.prototype.valueHex;
/**
 * @record
 * @struct
 */
Asn1js.ILocalHexBlock = function() {};
 /** @type {boolean} */
Asn1js.ILocalHexBlock.prototype.isHexOnly;
 /** @type {!ArrayBuffer} */
Asn1js.ILocalHexBlock.prototype.valueHex;

/**
 * Base function for converting block from BER encoded array of bytes
 * 
 * 
 * \@memberOf LocalHexBlockMixin
 * @param {!ArrayBuffer} inputBuffer
 * @param {number} inputOffset
 * @param {number} inputLength
 * @return {number}
 */
Asn1js.ILocalHexBlock.prototype.fromBER = function(inputBuffer, inputOffset, inputLength) {};

/**
 * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)
 * 
 * 
 * \@memberOf LocalHexBlockMixin
 * @param {boolean=} sizeOnly
 * @return {!ArrayBuffer}
 */
Asn1js.ILocalHexBlock.prototype.toBER = function(sizeOnly) {};

/**
 * Convertion for the block to JSON object
 * @return {?}
 */
Asn1js.ILocalHexBlock.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {?} params
 */
Asn1js.LocalHexBlock = function(params) {};
 /** @type {boolean} */
Asn1js.LocalHexBlock.prototype.isHexOnly;
 /** @type {!ArrayBuffer} */
Asn1js.LocalHexBlock.prototype.valueHex;

/**
 * Aux function, need to get a block name. Need to have it here for inhiritence
 * 
 * 
 * \@memberOf LocalHexBlockMixin
 * @return {string}
 */
Asn1js.LocalHexBlock.blockName = function() {};

/**
 * Base function for converting block from BER encoded array of bytes
 * 
 * 
 * \@memberOf LocalHexBlockMixin
 * @param {!ArrayBuffer} inputBuffer
 * @param {number} inputOffset
 * @param {number} inputLength
 * @return {number}
 */
Asn1js.LocalHexBlock.prototype.fromBER = function(inputBuffer, inputOffset, inputLength) {};

/**
 * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)
 * 
 * 
 * \@memberOf LocalHexBlockMixin
 * @param {boolean=} sizeOnly
 * @return {!ArrayBuffer}
 */
Asn1js.LocalHexBlock.prototype.toBER = function(sizeOnly) {};

/**
 * Convertion for the block to JSON object
 * @return {?}
 */
Asn1js.LocalHexBlock.prototype.toJSON = function() {};
/**
 * @record
 * @struct
 */
Asn1js.LocalIdentificationBlockParams = function() {};
 /** @type {?} */
Asn1js.LocalIdentificationBlockParams.prototype.idBlock;

/**
 * @constructor
 * @struct
 * @param {!Asn1js.LocalIdentificationBlockParams=} params
 */
Asn1js.LocalIdentificationBlock = function(params) {};
 /** @type {boolean} */
Asn1js.LocalIdentificationBlock.prototype.isConstructed;
 /** @type {number} */
Asn1js.LocalIdentificationBlock.prototype.tagClass;
 /** @type {number} */
Asn1js.LocalIdentificationBlock.prototype.tagNumber;
 /** @type {boolean} */
Asn1js.LocalIdentificationBlock.prototype.isHexOnly;
 /** @type {!ArrayBuffer} */
Asn1js.LocalIdentificationBlock.prototype.valueHex;

/**
 * @param {!ArrayBuffer} inputBuffer
 * @param {number} inputOffset
 * @param {number} inputLength
 * @return {number}
 */
Asn1js.LocalIdentificationBlock.prototype.fromBER = function(inputBuffer, inputOffset, inputLength) {};

/**
 * @param {boolean=} sizeOnly
 * @return {!ArrayBuffer}
 */
Asn1js.LocalIdentificationBlock.prototype.toBER = function(sizeOnly) {};
/**
 * @record
 * @struct
 */
Asn1js.LocalLengthBlockParams = function() {};
 /** @type {{isIndefiniteForm: boolean, longFormUsed: boolean, length: number}} */
Asn1js.LocalLengthBlockParams.prototype.lenBlock;

/**
 * @constructor
 * @struct
 * @param {!Asn1js.LocalLengthBlockParams=} params
 */
Asn1js.LocalLengthBlock = function(params) {};
 /** @type {boolean} */
Asn1js.LocalLengthBlock.prototype.isIndefiniteForm;
 /** @type {boolean} */
Asn1js.LocalLengthBlock.prototype.longFormUsed;
 /** @type {number} */
Asn1js.LocalLengthBlock.prototype.length;

/**
 * @param {!ArrayBuffer} inputBuffer
 * @param {number} inputOffset
 * @param {number} inputLength
 * @return {void}
 */
Asn1js.LocalLengthBlock.prototype.fromBER = function(inputBuffer, inputOffset, inputLength) {};

/**
 * @param {boolean=} sizeOnly
 * @return {!ArrayBuffer}
 */
Asn1js.LocalLengthBlock.prototype.toBER = function(sizeOnly) {};
/**
 * @extends {Asn1js.LocalBaseBlock}
 * @constructor
 * @struct
 */
Asn1js.LocalValueBlock = function() {};

/**
 * @param {!ArrayBuffer} inputBuffer
 * @param {number} inputOffset
 * @param {number} inputLength
 * @return {void}
 */
Asn1js.LocalValueBlock.prototype.fromBER = function(inputBuffer, inputOffset, inputLength) {};

/**
 * @param {boolean=} sizeOnly
 * @return {!ArrayBuffer}
 */
Asn1js.LocalValueBlock.prototype.toBER = function(sizeOnly) {};
/**
 * @extends {Asn1js.LocalBaseBlockParams}
 * @record
 * @struct
 */
Asn1js.BaseBlockParams = function() {};
 /** @type {string} */
Asn1js.BaseBlockParams.prototype.name;
 /** @type {boolean} */
Asn1js.BaseBlockParams.prototype.optional;
 /** @type {!Object} */
Asn1js.BaseBlockParams.prototype.primitiveSchema;

/**
 * @constructor
 * @struct
 * @param {!Asn1js.BaseBlockParams=} parameters
 * @param {?=} valueBlockType
 */
Asn1js.BaseBlock = function(parameters, valueBlockType) {};
 /** @type {!Asn1js.LocalIdentificationBlock} */
Asn1js.BaseBlock.prototype.idBlock;
 /** @type {!Asn1js.LocalLengthBlock} */
Asn1js.BaseBlock.prototype.lenBlock;
 /** @type {T} */
Asn1js.BaseBlock.prototype.valueBlock;

/**
 * @param {!ArrayBuffer} inputBuffer
 * @param {number} inputOffset
 * @param {number} inputLength
 * @return {number}
 */
Asn1js.BaseBlock.prototype.fromBER = function(inputBuffer, inputOffset, inputLength) {};

/**
 * @param {boolean=} sizeOnly
 * @return {!ArrayBuffer}
 */
Asn1js.BaseBlock.prototype.toBER = function(sizeOnly) {};
/**
 * @extends {Asn1js.LocalBaseBlockParams}
 * @record
 * @struct
 */
Asn1js.LocalPrimitiveValueBlockParams = function() {};
 /** @type {!ArrayBuffer} */
Asn1js.LocalPrimitiveValueBlockParams.prototype.valueHex;
 /** @type {boolean} */
Asn1js.LocalPrimitiveValueBlockParams.prototype.isHexOnly;
/**
 * @extends {Asn1js.LocalValueBlock}
 * @constructor
 * @struct
 */
Asn1js.LocalPrimitiveValueBlock = function() {};
 /** @type {!ArrayBuffer} */
Asn1js.LocalPrimitiveValueBlock.prototype.valueHex;
 /** @type {boolean} */
Asn1js.LocalPrimitiveValueBlock.prototype.isHexOnly;

/**
 * @param {!ArrayBuffer} inputBuffer
 * @param {number} inputOffset
 * @param {number} inputLength
 * @return {number}
 */
Asn1js.LocalPrimitiveValueBlock.prototype.fromBER = function(inputBuffer, inputOffset, inputLength) {};

/**
 * @param {boolean=} sizeOnly
 * @return {!ArrayBuffer}
 */
Asn1js.LocalPrimitiveValueBlock.prototype.toBER = function(sizeOnly) {};
/**
 * @extends {Asn1js.BaseBlock}
 * @constructor
 * @struct
 */
Asn1js.Primitive = function() {};
/**
 * @extends {Asn1js.LocalBaseBlockParams}
 * @record
 * @struct
 */
Asn1js.LocalConstructedValueBlockParams = function() {};
 /** @type {!Asn1js.LocalValueBlock} */
Asn1js.LocalConstructedValueBlockParams.prototype.value;
 /** @type {boolean} */
Asn1js.LocalConstructedValueBlockParams.prototype.isIndefiniteForm;
/**
 * @extends {Asn1js.LocalValueBlock}
 * @constructor
 * @struct
 */
Asn1js.LocalConstructedValueBlock = function() {};
 /** @type {!Array<!Asn1js.LocalValueBlock>} */
Asn1js.LocalConstructedValueBlock.prototype.value;
 /** @type {boolean} */
Asn1js.LocalConstructedValueBlock.prototype.isIndefiniteForm;

/**
 * @param {!ArrayBuffer} inputBuffer
 * @param {number} inputOffset
 * @param {number} inputLength
 * @return {number}
 */
Asn1js.LocalConstructedValueBlock.prototype.fromBER = function(inputBuffer, inputOffset, inputLength) {};

/**
 * @param {boolean=} sizeOnly
 * @return {!ArrayBuffer}
 */
Asn1js.LocalConstructedValueBlock.prototype.toBER = function(sizeOnly) {};
/**
 * @extends {Asn1js.BaseBlock}
 * @constructor
 * @struct
 */
Asn1js.Constructed = function() {};
/**
 * @extends {Asn1js.LocalBaseBlockParams}
 * @record
 * @struct
 */
Asn1js.LocalEndOfContentValueBlockParams = function() {};

/**
 * @constructor
 * @struct
 * @param {!Asn1js.LocalEndOfContentValueBlockParams=} params
 */
Asn1js.LocalEndOfContentValueBlock = function(params) {};

/**
 * @param {!ArrayBuffer} inputBuffer
 * @param {number} inputOffset
 * @param {number} inputLength
 * @return {number}
 */
Asn1js.LocalEndOfContentValueBlock.prototype.fromBER = function(inputBuffer, inputOffset, inputLength) {};

/**
 * @param {boolean=} sizeOnly
 * @return {!ArrayBuffer}
 */
Asn1js.LocalEndOfContentValueBlock.prototype.toBER = function(sizeOnly) {};
/**
 * @extends {Asn1js.BaseBlock}
 * @constructor
 * @struct
 */
Asn1js.EndOfContent = function() {};
/**
 * @extends {Asn1js.LocalBaseBlockParams}
 * @record
 * @struct
 */
Asn1js.LocalBooleanValueBlockParams = function() {};
 /** @type {boolean} */
Asn1js.LocalBooleanValueBlockParams.prototype.value;
 /** @type {boolean} */
Asn1js.LocalBooleanValueBlockParams.prototype.isHexOnly;
 /** @type {!ArrayBuffer} */
Asn1js.LocalBooleanValueBlockParams.prototype.valueHex;
/**
 * @extends {Asn1js.LocalValueBlock}
 * @constructor
 * @struct
 */
Asn1js.LocalBooleanValueBlock = function() {};
 /** @type {boolean} */
Asn1js.LocalBooleanValueBlock.prototype.value;
 /** @type {boolean} */
Asn1js.LocalBooleanValueBlock.prototype.isHexOnly;
 /** @type {!ArrayBuffer} */
Asn1js.LocalBooleanValueBlock.prototype.valueHex;

/**
 * @param {!ArrayBuffer} inputBuffer
 * @param {number} inputOffset
 * @param {number} inputLength
 * @return {number}
 */
Asn1js.LocalBooleanValueBlock.prototype.fromBER = function(inputBuffer, inputOffset, inputLength) {};

/**
 * @param {boolean=} sizeOnly
 * @return {!ArrayBuffer}
 */
Asn1js.LocalBooleanValueBlock.prototype.toBER = function(sizeOnly) {};
/**
 * @extends {Asn1js.BaseBlock}
 * @constructor
 * @struct
 */
Asn1js.Boolean = function() {};
/**
 * @extends {Asn1js.Constructed}
 * @constructor
 * @struct
 */
Asn1js.Sequence = function() {};
/**
 * @extends {Asn1js.Constructed}
 * @constructor
 * @struct
 */
Asn1js.Set = function() {};
/**
 * @extends {Asn1js.BaseBlock}
 * @constructor
 * @struct
 */
Asn1js.Null = function() {};
/**
 * @extends {Asn1js.LocalConstructedValueBlockParams}
 * @extends {Asn1js.LocalHexBlockParams}
 * @record
 * @struct
 */
Asn1js.LocalOctetStringValueBlockParams = function() {};
 /** @type {boolean} */
Asn1js.LocalOctetStringValueBlockParams.prototype.isConstructed;

/**
 * @constructor
 * @struct
 * @param {!Asn1js.LocalOctetStringValueBlockParams=} params
 */
Asn1js.LocalOctetStringValueBlock = function(params) {};
 /** @type {boolean} */
Asn1js.LocalOctetStringValueBlock.prototype.isConstructed;
 /** @type {boolean} */
Asn1js.LocalOctetStringValueBlock.prototype.isHexOnly;
 /** @type {!ArrayBuffer} */
Asn1js.LocalOctetStringValueBlock.prototype.valueHex;

/**
 * @constructor
 * @struct
 * @param {!Asn1js.LocalOctetStringValueBlockParams=} params
 */
Asn1js.OctetString = function(params) {};

/**
 * Checking that two OCTETSTRINGs are equal
 * 
 * 
 * \@memberOf OctetString
 * @param {!Asn1js.OctetString} octetString
 * @return {boolean}
 */
Asn1js.OctetString.prototype.isEqual = function(octetString) {};
/**
 * @extends {Asn1js.LocalConstructedValueBlockParams}
 * @extends {Asn1js.LocalHexBlockParams}
 * @record
 * @struct
 */
Asn1js.LocalBitStringValueBlockParams = function() {};
 /** @type {number} */
Asn1js.LocalBitStringValueBlockParams.prototype.unusedBits;
 /** @type {boolean} */
Asn1js.LocalBitStringValueBlockParams.prototype.isConstructed;
 /** @type {number} */
Asn1js.LocalBitStringValueBlockParams.prototype.blockLength;

/**
 * @constructor
 * @struct
 * @param {!Asn1js.LocalBitStringValueBlockParams=} params
 */
Asn1js.LocalBitStringValueBlock = function(params) {};
 /** @type {number} */
Asn1js.LocalBitStringValueBlock.prototype.unusedBits;
 /** @type {boolean} */
Asn1js.LocalBitStringValueBlock.prototype.isConstructed;
 /** @type {number} */
Asn1js.LocalBitStringValueBlock.prototype.blockLength;
 /** @type {boolean} */
Asn1js.LocalBitStringValueBlock.prototype.isHexOnly;
 /** @type {!ArrayBuffer} */
Asn1js.LocalBitStringValueBlock.prototype.valueHex;

/**
 * @constructor
 * @struct
 * @param {!Asn1js.LocalBitStringValueBlockParams=} params
 */
Asn1js.BitString = function(params) {};

/**
 * Checking that two BITSTRINGs are equal
 * @param {!Asn1js.BitString} bitString
 * @return {boolean}
 */
Asn1js.BitString.prototype.isEqual = function(bitString) {};
/**
 * @extends {Asn1js.LocalBaseBlockParams}
 * @extends {Asn1js.LocalHexBlockParams}
 * @record
 * @struct
 */
Asn1js.LocalIntegerValueBlockParams = function() {};

/**
 * @constructor
 * @struct
 * @param {!Asn1js.LocalIntegerValueBlockParams=} params
 */
Asn1js.LocalIntegerValueBlock = function(params) {};
 /** @type {number} */
Asn1js.LocalIntegerValueBlock.prototype.valueDec;
 /** @type {boolean} */
Asn1js.LocalIntegerValueBlock.prototype.isHexOnly;
 /** @type {!ArrayBuffer} */
Asn1js.LocalIntegerValueBlock.prototype.valueHex;

/**
 * @param {!ArrayBuffer} inputBuffer
 * @param {number} inputOffset
 * @param {number} inputLength
 * @return {number}
 */
Asn1js.LocalIntegerValueBlock.prototype.fromBER = function(inputBuffer, inputOffset, inputLength) {};

/**
 * @param {boolean=} sizeOnly
 * @return {!ArrayBuffer}
 */
Asn1js.LocalIntegerValueBlock.prototype.toBER = function(sizeOnly) {};

/**
 * Base function for converting block from DER encoded array of bytes
 * 
 * @param {!ArrayBuffer} inputBuffer
 * @param {number} inputOffset
 * @param {number} inputLength
 * @param {number=} expectedLength
 * @return {number}
 */
Asn1js.LocalIntegerValueBlock.prototype.fromDER = function(inputBuffer, inputOffset, inputLength, expectedLength) {};

/**
 * Encoding of current ASN.1 block into ASN.1 encoded array (DER rules)
 * 
 * @param {boolean=} sizeOnly
 * @return {!ArrayBuffer}
 */
Asn1js.LocalIntegerValueBlock.prototype.toDER = function(sizeOnly) {};
/**
 * @record
 * @struct
 */
Asn1js.IntegerParams = function() {};
 /** @type {number} */
Asn1js.IntegerParams.prototype.value;

/**
 * @constructor
 * @struct
 * @param {!Asn1js.IntegerParams=} params
 */
Asn1js.Integer = function(params) {};

/**
 * Compare two Integer object, or Integer and ArrayBuffer objects
 * 
 * 
 * \@memberOf Integer
 * @param {(!ArrayBuffer|!Asn1js.Integer)} otherValue
 * @return {boolean}
 */
Asn1js.Integer.prototype.isEqual = function(otherValue) {};

/**
 * Convert current Integer value from BER into DER format
 * 
 * @return {!Asn1js.Integer}
 */
Asn1js.Integer.prototype.convertToDER = function() {};

/**
 * Convert current Integer value from DER to BER format
 * @return {!Asn1js.Integer}
 */
Asn1js.Integer.prototype.convertFromDER = function() {};
/**
 * @extends {Asn1js.Integer}
 * @constructor
 * @struct
 */
Asn1js.Enumerated = function() {};
/**
 * @extends {Asn1js.LocalBaseBlockParams}
 * @extends {Asn1js.LocalHexBlockParams}
 * @record
 * @struct
 */
Asn1js.LocalSidValueBlockParams = function() {};
 /** @type {number} */
Asn1js.LocalSidValueBlockParams.prototype.valueDec;
 /** @type {boolean} */
Asn1js.LocalSidValueBlockParams.prototype.isFirstSid;

/**
 * @constructor
 * @struct
 * @param {!Asn1js.LocalSidValueBlockParams=} params
 */
Asn1js.LocalSidValueBlock = function(params) {};
 /** @type {number} */
Asn1js.LocalSidValueBlock.prototype.valueDec;
 /** @type {boolean} */
Asn1js.LocalSidValueBlock.prototype.isFirstSid;
 /** @type {boolean} */
Asn1js.LocalSidValueBlock.prototype.isHexOnly;
 /** @type {!ArrayBuffer} */
Asn1js.LocalSidValueBlock.prototype.valueHex;

/**
 * @param {!ArrayBuffer} inputBuffer
 * @param {number} inputOffset
 * @param {number} inputLength
 * @return {number}
 */
Asn1js.LocalSidValueBlock.prototype.fromBER = function(inputBuffer, inputOffset, inputLength) {};

/**
 * @param {boolean=} sizeOnly
 * @return {!ArrayBuffer}
 */
Asn1js.LocalSidValueBlock.prototype.toBER = function(sizeOnly) {};

/**
 * @return {string}
 */
Asn1js.LocalSidValueBlock.prototype.toString = function() {};
/**
 * @extends {Asn1js.LocalBaseBlockParams}
 * @record
 * @struct
 */
Asn1js.LocalObjectIdentifierValueBlockParams = function() {};
 /** @type {string} */
Asn1js.LocalObjectIdentifierValueBlockParams.prototype.value;

/**
 * @constructor
 * @struct
 * @param {!Asn1js.LocalObjectIdentifierValueBlockParams=} params
 */
Asn1js.LocalObjectIdentifierValueBlock = function(params) {};

/**
 * Create "LocalObjectIdentifierValueBlock" class from string
 * 
 * @param {string} data
 * @return {boolean}
 */
Asn1js.LocalObjectIdentifierValueBlock.prototype.fromString = function(data) {};

/**
 * Converts "LocalObjectIdentifierValueBlock" class to string
 * 
 * 
 * \@memberOf LocalObjectIdentifierValueBlock
 * @return {string}
 */
Asn1js.LocalObjectIdentifierValueBlock.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * @param {!Asn1js.LocalObjectIdentifierValueBlockParams=} params
 */
Asn1js.ObjectIdentifier = function(params) {};
/**
 * @extends {Asn1js.LocalBaseBlockParams}
 * @record
 * @struct
 */
Asn1js.LocalUtf8StringValueBlockParams = function() {};

/**
 * @constructor
 * @struct
 * @param {!Asn1js.LocalSidValueBlockParams=} params
 */
Asn1js.LocalUtf8StringValueBlock = function(params) {};
 /** @type {boolean} */
Asn1js.LocalUtf8StringValueBlock.prototype.isHexOnly;
 /** @type {!ArrayBuffer} */
Asn1js.LocalUtf8StringValueBlock.prototype.valueHex;

/**
 * @param {!ArrayBuffer} inputBuffer
 * @param {number} inputOffset
 * @param {number} inputLength
 * @return {number}
 */
Asn1js.LocalUtf8StringValueBlock.prototype.fromBER = function(inputBuffer, inputOffset, inputLength) {};

/**
 * @param {boolean=} sizeOnly
 * @return {!ArrayBuffer}
 */
Asn1js.LocalUtf8StringValueBlock.prototype.toBER = function(sizeOnly) {};

/**
 * @return {string}
 */
Asn1js.LocalUtf8StringValueBlock.prototype.toString = function() {};
/**
 * @record
 * @struct
 */
Asn1js.Utf8StringParams = function() {};
 /** @type {string} */
Asn1js.Utf8StringParams.prototype.value;

/**
 * @constructor
 * @struct
 * @param {!Asn1js.Utf8StringParams=} params
 */
Asn1js.Utf8String = function(params) {};

/**
 * Function converting ArrayBuffer into ASN.1 internal string
 * 
 * 
 * \@memberOf Utf8String
 * @param {!ArrayBuffer} inputBuffer
 * @return {void}
 */
Asn1js.Utf8String.prototype.fromBuffer = function(inputBuffer) {};

/**
 * Function converting JavaScript string into ASN.1 internal class
 * 
 * 
 * \@memberOf Utf8String
 * @param {string} inputString
 * @return {void}
 */
Asn1js.Utf8String.prototype.fromString = function(inputString) {};
/**
 * @extends {Asn1js.LocalHexBlockParams}
 * @extends {Asn1js.LocalBaseBlockParams}
 * @record
 * @struct
 */
Asn1js.LocalBmpStringValueBlockParams = function() {};

/**
 * @constructor
 * @struct
 * @param {!Asn1js.LocalBmpStringValueBlockParams=} params
 */
Asn1js.LocalBmpStringValueBlock = function(params) {};
 /** @type {string} */
Asn1js.LocalBmpStringValueBlock.prototype.value;
 /** @type {boolean} */
Asn1js.LocalBmpStringValueBlock.prototype.isHexOnly;
 /** @type {!ArrayBuffer} */
Asn1js.LocalBmpStringValueBlock.prototype.valueHex;

/**
 * @param {!ArrayBuffer} inputBuffer
 * @param {number} inputOffset
 * @param {number} inputLength
 * @return {number}
 */
Asn1js.LocalBmpStringValueBlock.prototype.fromBER = function(inputBuffer, inputOffset, inputLength) {};

/**
 * @param {boolean=} sizeOnly
 * @return {!ArrayBuffer}
 */
Asn1js.LocalBmpStringValueBlock.prototype.toBER = function(sizeOnly) {};
/**
 * @record
 * @struct
 */
Asn1js.BmpStringParams = function() {};
 /** @type {string} */
Asn1js.BmpStringParams.prototype.value;

/**
 * @constructor
 * @struct
 * @param {!Asn1js.BmpStringParams=} params
 */
Asn1js.BmpString = function(params) {};

/**
 * Function converting ArrayBuffer into ASN.1 internal string
 * 
 * 
 * \@memberOf BmpString
 * @param {!ArrayBuffer} inputBuffer
 * @return {void}
 */
Asn1js.BmpString.prototype.fromBuffer = function(inputBuffer) {};

/**
 * Function converting JavaScript string into ASN.1 internal class
 * 
 * 
 * \@memberOf BmpString
 * @param {string} inputString
 * @return {void}
 */
Asn1js.BmpString.prototype.fromString = function(inputString) {};
/**
 * @extends {Asn1js.LocalHexBlockParams}
 * @extends {Asn1js.LocalBaseBlockParams}
 * @record
 * @struct
 */
Asn1js.LocalUniversalStringValueParams = function() {};

/**
 * @constructor
 * @struct
 * @param {!Asn1js.LocalUniversalStringValueParams=} params
 */
Asn1js.LocalUniversalStringValueBlock = function(params) {};
 /** @type {string} */
Asn1js.LocalUniversalStringValueBlock.prototype.value;
 /** @type {boolean} */
Asn1js.LocalUniversalStringValueBlock.prototype.isHexOnly;
 /** @type {!ArrayBuffer} */
Asn1js.LocalUniversalStringValueBlock.prototype.valueHex;

/**
 * @param {!ArrayBuffer} inputBuffer
 * @param {number} inputOffset
 * @param {number} inputLength
 * @return {number}
 */
Asn1js.LocalUniversalStringValueBlock.prototype.fromBER = function(inputBuffer, inputOffset, inputLength) {};

/**
 * @param {boolean=} sizeOnly
 * @return {!ArrayBuffer}
 */
Asn1js.LocalUniversalStringValueBlock.prototype.toBER = function(sizeOnly) {};
/**
 * @record
 * @struct
 */
Asn1js.UniversalStringParams = function() {};
 /** @type {string} */
Asn1js.UniversalStringParams.prototype.value;

/**
 * @constructor
 * @struct
 * @param {!Asn1js.UniversalStringParams=} params
 */
Asn1js.UniversalString = function(params) {};

/**
 * Function converting ArrayBuffer into ASN.1 internal string
 * 
 * 
 * \@memberOf UniversalString
 * @param {!ArrayBuffer} inputBuffer
 * @return {void}
 */
Asn1js.UniversalString.prototype.fromBuffer = function(inputBuffer) {};

/**
 * Function converting JavaScript string into ASN.1 internal class
 * 
 * 
 * \@memberOf UniversalString
 * @param {string} inputString
 * @return {void}
 */
Asn1js.UniversalString.prototype.fromString = function(inputString) {};
/**
 * @extends {Asn1js.LocalHexBlockParams}
 * @extends {Asn1js.LocalBaseBlockParams}
 * @record
 * @struct
 */
Asn1js.LocalSimpleLocalSimpleStringValueBlockParams = function() {};

/**
 * @constructor
 * @struct
 * @param {!Asn1js.LocalSimpleLocalSimpleStringValueBlockParams=} params
 */
Asn1js.LocalSimpleLocalSimpleStringValueBlock = function(params) {};
 /** @type {string} */
Asn1js.LocalSimpleLocalSimpleStringValueBlock.prototype.value;
 /** @type {boolean} */
Asn1js.LocalSimpleLocalSimpleStringValueBlock.prototype.isHexOnly;
 /** @type {!ArrayBuffer} */
Asn1js.LocalSimpleLocalSimpleStringValueBlock.prototype.valueHex;

/**
 * @param {!ArrayBuffer} inputBuffer
 * @param {number} inputOffset
 * @param {number} inputLength
 * @return {number}
 */
Asn1js.LocalSimpleLocalSimpleStringValueBlock.prototype.fromBER = function(inputBuffer, inputOffset, inputLength) {};

/**
 * @param {boolean=} sizeOnly
 * @return {!ArrayBuffer}
 */
Asn1js.LocalSimpleLocalSimpleStringValueBlock.prototype.toBER = function(sizeOnly) {};
/**
 * @record
 * @struct
 */
Asn1js.LocalSimpleStringBlockParams = function() {};
 /** @type {string} */
Asn1js.LocalSimpleStringBlockParams.prototype.value;

/**
 * @constructor
 * @struct
 * @param {!Asn1js.LocalSimpleStringBlockParams=} params
 */
Asn1js.LocalSimpleStringBlock = function(params) {};

/**
 * Function converting ArrayBuffer into ASN.1 internal string
 * 
 * 
 * \@memberOf LocalSimpleStringBlock
 * @param {!ArrayBuffer} inputBuffer
 * @return {void}
 */
Asn1js.LocalSimpleStringBlock.prototype.fromBuffer = function(inputBuffer) {};

/**
 * Function converting JavaScript string into ASN.1 internal class
 * 
 * 
 * \@memberOf LocalSimpleStringBlock
 * @param {string} inputString
 * @return {void}
 */
Asn1js.LocalSimpleStringBlock.prototype.fromString = function(inputString) {};
/**
 * @extends {Asn1js.LocalSimpleStringBlock}
 * @constructor
 * @struct
 */
Asn1js.NumericString = function() {};
/**
 * @extends {Asn1js.LocalSimpleStringBlock}
 * @constructor
 * @struct
 */
Asn1js.PrintableString = function() {};
/**
 * @extends {Asn1js.LocalSimpleStringBlock}
 * @constructor
 * @struct
 */
Asn1js.TeletexString = function() {};
/**
 * @extends {Asn1js.LocalSimpleStringBlock}
 * @constructor
 * @struct
 */
Asn1js.VideotexString = function() {};
/**
 * @extends {Asn1js.LocalSimpleStringBlock}
 * @constructor
 * @struct
 */
Asn1js.IA5String = function() {};
/**
 * @extends {Asn1js.LocalSimpleStringBlock}
 * @constructor
 * @struct
 */
Asn1js.GraphicString = function() {};
/**
 * @extends {Asn1js.LocalSimpleStringBlock}
 * @constructor
 * @struct
 */
Asn1js.VisibleString = function() {};
/**
 * @extends {Asn1js.LocalSimpleStringBlock}
 * @constructor
 * @struct
 */
Asn1js.GeneralString = function() {};
/**
 * @extends {Asn1js.LocalSimpleStringBlock}
 * @constructor
 * @struct
 */
Asn1js.CharacterString = function() {};
/**
 * @extends {Asn1js.LocalSimpleLocalSimpleStringValueBlockParams}
 * @record
 * @struct
 */
Asn1js.UTCTimeParams = function() {};
 /** @type {string} */
Asn1js.UTCTimeParams.prototype.value;
 /** @type {!Date} */
Asn1js.UTCTimeParams.prototype.valueDate;

/**
 * @constructor
 * @struct
 * @param {!Asn1js.UTCTimeParams=} params
 */
Asn1js.UTCTime = function(params) {};
 /** @type {number} */
Asn1js.UTCTime.prototype.year;
 /** @type {number} */
Asn1js.UTCTime.prototype.month;
 /** @type {number} */
Asn1js.UTCTime.prototype.day;
 /** @type {number} */
Asn1js.UTCTime.prototype.hour;
 /** @type {number} */
Asn1js.UTCTime.prototype.minute;
 /** @type {number} */
Asn1js.UTCTime.prototype.second;

/**
 * Function converting ASN.1 internal string into ArrayBuffer
 * 
 * 
 * \@memberOf UTCTime
 * @return {!ArrayBuffer}
 */
Asn1js.UTCTime.prototype.toBuffer = function() {};

/**
 * Function converting "Date" object into ASN.1 internal string
 * 
 * 
 * \@memberOf UTCTime
 * @param {!Date} inputDate
 * @return {void}
 */
Asn1js.UTCTime.prototype.fromDate = function(inputDate) {};

/**
 * Function converting ASN.1 internal string into "Date" object
 * 
 * 
 * \@memberOf UTCTime
 * @return {!Date}
 */
Asn1js.UTCTime.prototype.toDate = function() {};
/**
 * @extends {Asn1js.UTCTime}
 * @constructor
 * @struct
 */
Asn1js.GeneralizedTime = function() {};
 /** @type {number} */
Asn1js.GeneralizedTime.prototype.millisecond;
/**
 * @extends {Asn1js.Utf8String}
 * @constructor
 * @struct
 */
Asn1js.DATE = function() {};
/**
 * @extends {Asn1js.Utf8String}
 * @constructor
 * @struct
 */
Asn1js.TimeOfDay = function() {};
/**
 * @extends {Asn1js.Utf8String}
 * @constructor
 * @struct
 */
Asn1js.DateTime = function() {};
/**
 * @extends {Asn1js.Utf8String}
 * @constructor
 * @struct
 */
Asn1js.Duration = function() {};
/**
 * @extends {Asn1js.Utf8String}
 * @constructor
 * @struct
 */
Asn1js.TIME = function() {};
/**
 * @record
 * @struct
 */
Asn1js.ChoiceParams = function() {};
 /** @type {!Array<!Asn1js.LocalValueBlock>} */
Asn1js.ChoiceParams.prototype.value;
 /** @type {boolean} */
Asn1js.ChoiceParams.prototype.optional;

/**
 * @constructor
 * @struct
 * @param {!Asn1js.ChoiceParams=} params
 */
Asn1js.Choice = function(params) {};
 /** @type {!Array<!Asn1js.LocalValueBlock>} */
Asn1js.Choice.prototype.value;
 /** @type {boolean} */
Asn1js.Choice.prototype.optional;
/**
 * @record
 * @struct
 */
Asn1js.AnyParams = function() {};
 /** @type {string} */
Asn1js.AnyParams.prototype.name;
 /** @type {boolean} */
Asn1js.AnyParams.prototype.optional;

/**
 * @constructor
 * @struct
 * @param {!Asn1js.AnyParams=} params
 */
Asn1js.Any = function(params) {};
 /** @type {string} */
Asn1js.Any.prototype.name;
 /** @type {boolean} */
Asn1js.Any.prototype.optional;
/**
 * @record
 * @struct
 */
Asn1js.RepeatedParams = function() {};
 /** @type {string} */
Asn1js.RepeatedParams.prototype.name;
 /** @type {boolean} */
Asn1js.RepeatedParams.prototype.optional;
 /** @type {!Asn1js.Any} */
Asn1js.RepeatedParams.prototype.value;
 /** @type {boolean} */
Asn1js.RepeatedParams.prototype.local;

/**
 * @constructor
 * @struct
 * @param {!Asn1js.RepeatedParams=} params
 */
Asn1js.Repeated = function(params) {};
 /** @type {string} */
Asn1js.Repeated.prototype.name;
 /** @type {boolean} */
Asn1js.Repeated.prototype.optional;
 /** @type {!Asn1js.Any} */
Asn1js.Repeated.prototype.value;
 /** @type {boolean} */
Asn1js.Repeated.prototype.local;
/**
 * @record
 * @struct
 */
Asn1js.RawDataParams = function() {};
 /** @type {!ArrayBuffer} */
Asn1js.RawDataParams.prototype.data;

/**
 * @constructor
 * @struct
 * @param {!Asn1js.RawDataParams=} params
 */
Asn1js.RawData = function(params) {};
 /** @type {!ArrayBuffer} */
Asn1js.RawData.prototype.data;

/**
 * @param {!ArrayBuffer} inputBuffer
 * @param {number} inputOffset
 * @param {number} inputLength
 * @return {number}
 */
Asn1js.RawData.prototype.fromBER = function(inputBuffer, inputOffset, inputLength) {};

/**
 * @param {boolean=} sizeOnly
 * @return {!ArrayBuffer}
 */
Asn1js.RawData.prototype.toBER = function(sizeOnly) {};

/**
 * Major function for decoding ASN.1 BER array into internal library structuries
 * 
 * @param {!ArrayBuffer} inputBuffer
 * @return {{offset: number, result: !Asn1js.LocalBaseBlock}}
 */
Asn1js.fromBER = function(inputBuffer) {};

/**
 * Compare of two ASN.1 object trees
 * 
 * @param {?} root
 * @param {?} inputData
 * @param {?} inputSchema
 * @return {{verified: boolean, result: ?}}
 */
Asn1js.compareSchema = function(root, inputData, inputSchema) {};

/**
 * ASN.1 schema verification for ArrayBuffer data
 * 
 * @param {!ArrayBuffer} inputBuffer
 * @param {?} inputSchema
 * @return {{verified: boolean, result: ?}}
 */
Asn1js.verifySchema = function(inputBuffer, inputSchema) {};
