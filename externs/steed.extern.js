/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/steed/index.d.ts:
/** @const */
var steed = {};
/**
 * @record
 * @struct
 */
steed.Dictionary = function() {};

/* TODO: IndexSignature: steed */

/** @typedef {function(T): void} */
steed.ErrorCallback;

/** @typedef {function(E, T): void} */
steed.SteedResultCallback;

/** @typedef {function(E, !Array<T>): void} */
steed.SteedResultArrayCallback;

/** @typedef {function(E, !steed.Dictionary<T>): void} */
steed.SteedResultObjectCallback;

/** @typedef {function(T, function(E): void): void} */
steed.SteedWorker;

/** @typedef {function(T, function(E): void): void} */
steed.SteedIterator;

/** @typedef {function(T, function(E, R): void): void} */
steed.SteedResultIterator;

/** @typedef {function(function(E, T): void): void} */
steed.SteedFunction;
/**
 * @record
 * @struct
 */
steed.SteedQueue = function() {};
 /** @type {number} */
steed.SteedQueue.prototype.concurrency;

/**
 * @template E
 * @param {(T|!Array<T>)} task
 * @param {function(E, T): void=} callback
 * @return {void}
 */
steed.SteedQueue.prototype.push = function(task, callback) {};

/**
 * @template E
 * @param {(T|!Array<T>)} task
 * @param {function(E): void=} callback
 * @return {void}
 */
steed.SteedQueue.prototype.unshift = function(task, callback) {};

/**
 * @return {void}
 */
steed.SteedQueue.prototype.pause = function() {};

/**
 * @return {void}
 */
steed.SteedQueue.prototype.resume = function() {};

/**
 * @return {boolean}
 */
steed.SteedQueue.prototype.idle = function() {};

/**
 * @return {number}
 */
steed.SteedQueue.prototype.length = function() {};

/**
 * @return {void}
 */
steed.SteedQueue.prototype.kill = function() {};

/**
 * @return {?}
 */
steed.SteedQueue.prototype.drain = function() {};

/**
 * @return {?}
 */
steed.SteedQueue.prototype.empty = function() {};

/**
 * @return {?}
 */
steed.SteedQueue.prototype.saturated = function() {};
/**
 * @record
 * @struct
 */
steed.Steed = function() {};
 /** @type {function((!Array<T>|!steed.Dictionary<T>), function(T, function(E): void): void, ?): void} */
steed.Steed.prototype.eachSeries;
 /** @type {function((!Array<T>|!steed.Dictionary<T>), function(T, function(E, R): void): void, function(E, !Array<R>): void): void} */
steed.Steed.prototype.mapSeries;

/**
 * @template T, E
 * @param {!Array<function(function(E, T): void): void>|!steed.Dictionary<function(function(E, T): void): void>} tasks
 * @param {function(E, !Array<T>): void|function(E, !steed.Dictionary<T>): void=} callback
 * @return {void}
 */
steed.Steed.prototype.parallel = function(tasks, callback) {};

/**
 * @template T, E
 * @param {!Array<function(function(E, T): void): void>|!steed.Dictionary<function(function(E, T): void): void>} tasks
 * @param {function(E, !Array<T>): void|function(E, !steed.Dictionary<T>): void=} callback
 * @return {void}
 */
steed.Steed.prototype.series = function(tasks, callback) {};

/**
 * @template T, E
 * @param {!Array<!Function>} tasks
 * @param {function(E, T): void=} callback
 * @return {void}
 */
steed.Steed.prototype.waterfall = function(tasks, callback) {};

/**
 * @template T, E
 * @param {(!Array<T>|!steed.Dictionary<T>)} arr
 * @param {function(T, function(E): void): void} iterator
 * @param {function(E): void=} callback
 * @return {void}
 */
steed.Steed.prototype.each = function(arr, iterator, callback) {};

/**
 * @template T, R, E
 * @param {(!Array<T>|!steed.Dictionary<T>)} arr
 * @param {function(T, function(E, R): void): void} iterator
 * @param {function(E, !Array<R>): void=} callback
 * @return {void}
 */
steed.Steed.prototype.map = function(arr, iterator, callback) {};

/**
 * @template T, E, R
 * @param {function(T, function(E): void): void|function(T, function(E, R): void): void} worker
 * @param {number=} concurrency
 * @return {!steed.SteedQueue<T>}
 */
steed.Steed.prototype.queue = function(worker, concurrency) {};
 /** @type {!steed.Steed} */
var steed;

/* TODO: ExportAssignment in  */
