/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/react-native-fs/index.d.ts:
/**
 * @record
 * @struct
 */
function ReadDirItem() {}
 /** @type {string} */
ReadDirItem.prototype.name;
 /** @type {string} */
ReadDirItem.prototype.path;
 /** @type {string} */
ReadDirItem.prototype.size;

/**
 * @return {boolean}
 */
ReadDirItem.prototype.isFile = function() {};

/**
 * @return {boolean}
 */
ReadDirItem.prototype.isDirectory = function() {};
/**
 * @record
 * @struct
 */
function StatResult() {}
 /** @type {string} */
StatResult.prototype.name;
 /** @type {string} */
StatResult.prototype.path;
 /** @type {string} */
StatResult.prototype.size;
 /** @type {number} */
StatResult.prototype.mode;

/**
 * @return {boolean}
 */
StatResult.prototype.isFile = function() {};

/**
 * @return {boolean}
 */
StatResult.prototype.isDirectory = function() {};
/**
 * @record
 * @struct
 */
function Headers() {}

/* TODO: IndexSignature:  */

/** @typedef {?} */
var Fields;
/**
 * @record
 * @struct
 */
function MkdirOptions() {}
 /** @type {boolean} */
MkdirOptions.prototype.NSURLIsExcludedFromBackupKey;
/**
 * @record
 * @struct
 */
function DownloadResult() {}
 /** @type {number} */
DownloadResult.prototype.jobId;
 /** @type {number} */
DownloadResult.prototype.statusCode;
 /** @type {number} */
DownloadResult.prototype.bytesWritten;

/** @typedef {?} */
var DownloadCallbackBegin;

/** @typedef {?} */
var DownloadCallbackProgress;
/**
 * @record
 * @struct
 */
function DownloadFileOptions() {}
 /** @type {string} */
DownloadFileOptions.prototype.fromUrl;
 /** @type {string} */
DownloadFileOptions.prototype.toFile;
 /** @type {?} */
DownloadFileOptions.prototype.headers;
 /** @type {boolean} */
DownloadFileOptions.prototype.background;
 /** @type {number} */
DownloadFileOptions.prototype.progressDivider;
 /** @type {?} */
DownloadFileOptions.prototype.begin;
 /** @type {?} */
DownloadFileOptions.prototype.progress;
/**
 * @record
 * @struct
 */
function DownloadProgressCallbackResult() {}
 /** @type {number} */
DownloadProgressCallbackResult.prototype.jobId;
 /** @type {number} */
DownloadProgressCallbackResult.prototype.contentLength;
 /** @type {number} */
DownloadProgressCallbackResult.prototype.bytesWritten;
/**
 * @record
 * @struct
 */
function DownloadBeginCallbackResult() {}
 /** @type {number} */
DownloadBeginCallbackResult.prototype.jobId;
 /** @type {number} */
DownloadBeginCallbackResult.prototype.statusCode;
 /** @type {number} */
DownloadBeginCallbackResult.prototype.contentLength;
 /** @type {?} */
DownloadBeginCallbackResult.prototype.headers;

/** @typedef {?} */
var UploadCallbackBegin;

/** @typedef {?} */
var UploadCallbackProgress;
/**
 * @record
 * @struct
 */
function UploadFileOptions() {}
 /** @type {string} */
UploadFileOptions.prototype.toUrl;
 /** @type {!Array<?>} */
UploadFileOptions.prototype.files;
 /** @type {?} */
UploadFileOptions.prototype.headers;
 /** @type {?} */
UploadFileOptions.prototype.fields;
 /** @type {string} */
UploadFileOptions.prototype.method;
 /** @type {?} */
UploadFileOptions.prototype.begin;
 /** @type {?} */
UploadFileOptions.prototype.progress;
/**
 * @record
 * @struct
 */
function UploadResult() {}
 /** @type {number} */
UploadResult.prototype.jobId;
 /** @type {number} */
UploadResult.prototype.statusCode;
 /** @type {?} */
UploadResult.prototype.headers;
 /** @type {string} */
UploadResult.prototype.body;
/**
 * @record
 * @struct
 */
function UploadFileItem() {}
 /** @type {string} */
UploadFileItem.prototype.name;
 /** @type {string} */
UploadFileItem.prototype.filename;
 /** @type {string} */
UploadFileItem.prototype.filepath;
 /** @type {string} */
UploadFileItem.prototype.filetype;
/**
 * @record
 * @struct
 */
function UploadBeginCallbackResult() {}
 /** @type {number} */
UploadBeginCallbackResult.prototype.jobId;
/**
 * @record
 * @struct
 */
function UploadProgressCallbackResult() {}
 /** @type {number} */
UploadProgressCallbackResult.prototype.jobId;
 /** @type {number} */
UploadProgressCallbackResult.prototype.totalBytesExpectedToSend;
 /** @type {number} */
UploadProgressCallbackResult.prototype.totalBytesSent;
/**
 * @record
 * @struct
 */
function FSInfoResult() {}
 /** @type {number} */
FSInfoResult.prototype.totalSpace;
 /** @type {number} */
FSInfoResult.prototype.freeSpace;
/**
 * @record
 * @struct
 */
function JobReturnValue() {}
 /** @type {number} */
JobReturnValue.prototype.jobId;
 /** @type {!Promise<?>} */
JobReturnValue.prototype.promise;
 /** @type {string} */
var MainBundlePath;
 /** @type {string} */
var CachesDirectoryPath;
 /** @type {string} */
var DocumentDirectoryPath;
 /** @type {string} */
var TemporaryDirectoryPath;
 /** @type {string} */
var ExternalDirectoryPath;
 /** @type {string} */
var ExternalStorageDirectoryPath;

/**
 * @param {string} path
 * @return {!Promise<!Array<?>>}
 */
function readDir(path) {}

/**
 * @param {string} path
 * @return {!Promise<!Array<string>>}
 */
function readdir(path) {}

/**
 * @param {string} filepath
 * @return {!Promise<?>}
 */
function stat(filepath) {}

/**
 * @param {string} filepath
 * @param {string=} encoding
 * @return {!Promise<string>}
 */
function readFile(filepath, encoding) {}

/**
 * @param {string} filepath
 * @return {!Promise<void>}
 */
function unlink(filepath) {}

/**
 * @param {string} filepath
 * @param {string} contents
 * @param {string=} encoding
 * @return {!Promise<void>}
 */
function writeFile(filepath, contents, encoding) {}

/**
 * @param {string} filepath
 * @param {string} contents
 * @param {string=} encoding
 * @return {!Promise<void>}
 */
function appendFile(filepath, contents, encoding) {}

/**
 * @param {string} filepath
 * @param {string} destPath
 * @return {!Promise<void>}
 */
function moveFile(filepath, destPath) {}

/**
 * @param {string} filepath
 * @param {string} destPath
 * @return {!Promise<void>}
 */
function copyFile(filepath, destPath) {}

/**
 * @param {string} filepath
 * @return {!Promise<boolean>}
 */
function exists(filepath) {}

/**
 * @param {string} filepath
 * @param {string} algorithm
 * @return {!Promise<string>}
 */
function hash(filepath, algorithm) {}

/**
 * @param {string} filepath
 * @param {?=} options
 * @return {!Promise<void>}
 */
function mkdir(filepath, options) {}

/**
 * @param {?} options
 * @return {?}
 */
function downloadFile(options) {}

/**
 * @param {number} jobId
 * @return {!Promise<void>}
 */
function stopDownload(jobId) {}

/**
 * @param {?} options
 * @return {?}
 */
function uploadFiles(options) {}

/**
 * @param {number} jobId
 * @return {!Promise<void>}
 */
function stopUpload(jobId) {}

/**
 * @return {!Promise<?>}
 */
function getFSInfo() {}
