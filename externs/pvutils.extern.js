/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/pvutils/index.d.ts:

/* TODO: ExportAssignment in  */
/** @const */
var PvUtils = {};

/**
 * Making UTC date from local date
 * @param {!Date} date
 * @return {!Date}
 */
PvUtils.getUTCDate = function(date) {};

/**
 * Get value for input parameters, or set a default value
 * @template T
 * @param {?} parameters
 * @param {string} name
 * @param {T=} defaultValue
 * @return {T}
 */
PvUtils.getParametersValue = function(parameters, name, defaultValue) {};

/**
 * Converts "ArrayBuffer" into a hexdecimal string
 * @param {!ArrayBuffer} inputBuffer
 * @param {number=} inputOffset
 * @param {number=} inputLength
 * @return {string}
 */
PvUtils.bufferToHexCodes = function(inputBuffer, inputOffset, inputLength) {};

/**
 * Check input "ArrayBuffer" for common functions
 * @param {?} baseBlock
 * @param {!ArrayBuffer} inputBuffer
 * @param {number} inputOffset
 * @param {number} inputLength
 * @return {boolean}
 */
PvUtils.checkBufferParams = function(baseBlock, inputBuffer, inputOffset, inputLength) {};

/**
 * Convert number from 2^base to 2^10
 * @param {!Uint8Array} inputBuffer
 * @param {number} inputBase
 * @return {number}
 */
PvUtils.utilFromBase = function(inputBuffer, inputBase) {};

/**
 * Convert number from 2^10 to 2^base
 * @param {number} value
 * @param {number} base
 * @param {number=} reserved
 * @return {!ArrayBuffer}
 */
PvUtils.utilToBase = function(value, base, reserved) {};

/**
 * Concatenate two ArrayBuffers
 * @param {...!ArrayBuffer} buf
 * @return {!ArrayBuffer}
 */
PvUtils.utilConcatBuf = function(buf) {};

/**
 * Decoding of "two complement" values
 * The function must be called in scope of instance of "hexBlock" class ("valueHex" and "warnings" properties must be present)
 * @return {number}
 */
PvUtils.utilDecodeTC = function() {};

/**
 * Encode integer value to "two complement" format
 * @param {number} value
 * @return {!ArrayBuffer}
 */
PvUtils.utilEncodeTC = function(value) {};

/**
 * Compare two array buffers
 * @param {!ArrayBuffer} inputBuffer1
 * @param {!ArrayBuffer} inputBuffer2
 * @return {boolean}
 */
PvUtils.isEqualBuffer = function(inputBuffer1, inputBuffer2) {};

/**
 * Pad input number with leade "0" if needed
 * @param {number} inputNumber
 * @param {number} fullLength
 * @return {string}
 */
PvUtils.padNumber = function(inputNumber, fullLength) {};

/**
 * Encode string into BASE64 (or "base64url")
 * @param {string} input
 * @param {boolean=} useUrlTemplate
 * @param {boolean=} skipPadding
 * @return {string}
 */
PvUtils.toBase64 = function(input, useUrlTemplate, skipPadding) {};

/**
 * Decode string from BASE64 (or "base64url")
 * @param {string} input
 * @param {boolean=} useUrlTemplate
 * @param {boolean=} cutTailZeros
 * @return {string}
 */
PvUtils.fromBase64 = function(input, useUrlTemplate, cutTailZeros) {};

/**
 * @param {(!ArrayBuffer|!ArrayBufferView)} buffer
 * @return {string}
 */
PvUtils.arrayBufferToString = function(buffer) {};

/**
 * @param {string} str
 * @return {!ArrayBuffer}
 */
PvUtils.stringToArrayBuffer = function(str) {};

/**
 * Get nearest to input length power of 2
 * @param {number} length
 * @return {number}
 */
PvUtils.nearestPowerOf2 = function(length) {};
