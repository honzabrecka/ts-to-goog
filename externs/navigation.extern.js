/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/navigation/index.d.ts:
/**
 * @record
 * @struct
 */
function StateInfo() {}
 /** @type {string} */
StateInfo.prototype.key;
 /** @type {?} */
StateInfo.prototype.defaults;
 /** @type {?} */
StateInfo.prototype.defaultTypes;
 /** @type {string} */
StateInfo.prototype.title;
 /** @type {(string|!Array<string>)} */
StateInfo.prototype.route;
 /** @type {(string|boolean)} */
StateInfo.prototype.trackCrumbTrail;
 /** @type {boolean} */
StateInfo.prototype.trackTypes;

/* TODO: IndexSignature:  */
/**
 * @implements {StateInfo}
 * @constructor
 * @struct
 */
function State() {}
 /** @type {string} */
State.prototype.key;
 /** @type {?} */
State.prototype.defaults;
 /** @type {?} */
State.prototype.defaultTypes;
 /** @type {?} */
State.prototype.formattedDefaults;
 /** @type {?} */
State.prototype.formattedArrayDefaults;
 /** @type {string} */
State.prototype.title;
 /** @type {(string|!Array<string>)} */
State.prototype.route;
 /** @type {boolean} */
State.prototype.trackCrumbTrail;
 /** @type {string} */
State.prototype.crumbTrailKey;
 /** @type {boolean} */
State.prototype.trackTypes;

/* TODO: IndexSignature:  */
 /** @type {?} */
State.prototype.unloading;
 /** @type {?} */
State.prototype.dispose;
 /** @type {?} */
State.prototype.navigated;
 /** @type {?} */
State.prototype.navigating;

/**
 * Encodes the Url value
 * @param {?} state The State navigated to
 * @param {string} key The key of the navigation data item
 * @param {string} val The Url value of the navigation data item
 * @param {boolean} queryString A value indicating the Url value's location
 * @return {string}
 */
State.prototype.urlEncode = function(state, key, val, queryString) {};

/**
 * Decodes the Url value
 * @param {?} state The State navigated to
 * @param {string} key The key of the navigation data item
 * @param {string} val The Url value of the navigation data item
 * @param {boolean} queryString A value indicating the Url value's location
 * @return {string}
 */
State.prototype.urlDecode = function(state, key, val, queryString) {};

/**
 * Validates the NavigationData before navigating to the new State
 * @param {?} data The new NavigationData
 * @return {boolean} Validation success indicator
 */
State.prototype.validate = function(data) {};

/**
 * Truncates the crumb trail whenever a repeated or initial State is
 * encountered
 * @param {?} state
 * @param {?} data
 * @param {!Array<?>} crumbs
 * @return {!Array<?>} Truncated crumb trail
 */
State.prototype.truncateCrumbTrail = function(state, data, crumbs) {};
/**
 * @record
 * @struct
 */
function HistoryManager() {}
 /** @type {boolean} */
HistoryManager.prototype.disabled;

/**
 * Registers browser history event listeners
 * @param {?} navigateHistory The history navigation event handler
 * @return {void}
 */
HistoryManager.prototype.init = function(navigateHistory) {};

/**
 * Adds browser history
 * @param {string} url The current url
 * @param {boolean} replace A value indicating whether to replace the current
 * browser history entry
 * @return {void}
 */
HistoryManager.prototype.addHistory = function(url, replace) {};

/**
 * Gets the current location
 * @return {string}
 */
HistoryManager.prototype.getCurrentUrl = function() {};

/**
 * Gets an Href from the url
 * @param {string} url
 * @return {string}
 */
HistoryManager.prototype.getHref = function(url) {};

/**
 * Gets a Url from the anchor or location
 * @param {(!HTMLAnchorElement|!Location)} hrefElement
 * @return {string}
 */
HistoryManager.prototype.getUrl = function(hrefElement) {};

/**
 * Removes browser history event listeners
 * @return {void}
 */
HistoryManager.prototype.stop = function() {};

/**
 * @constructor
 * @struct
 * Initializes a new instance of the HashHistoryManager class
 * @param {boolean=} replaceQueryIdentifier a value indicating whether to use '#'
 * in place of '?'. Set to true for Internet explorer 6 and 7 support
 */
function HashHistoryManager(replaceQueryIdentifier) {}
 /** @type {boolean} */
HashHistoryManager.prototype.disabled;

/**
 * Registers a listener for the hashchange event
 * @param {?} navigateHistory The history navigation event handler
 * @return {void}
 */
HashHistoryManager.prototype.init = function(navigateHistory) {};

/**
 * Sets the browser Url's hash to the url
 * @param {string} url The current url
 * @param {boolean} replace A value indicating whether to replace the current
 * browser history entry
 * @return {void}
 */
HashHistoryManager.prototype.addHistory = function(url, replace) {};

/**
 * Gets the current location
 * @return {string}
 */
HashHistoryManager.prototype.getCurrentUrl = function() {};

/**
 * Gets an Href from the url
 * @param {string} url
 * @return {string}
 */
HashHistoryManager.prototype.getHref = function(url) {};

/**
 * Gets a Url from the anchor or location
 * @param {(!HTMLAnchorElement|!Location)} hrefElement
 * @return {string}
 */
HashHistoryManager.prototype.getUrl = function(hrefElement) {};

/**
 * Removes a listener for the hashchange event
 * @return {void}
 */
HashHistoryManager.prototype.stop = function() {};

/**
 * @constructor
 * @struct
 * Initializes a new instance of the HTML5HistoryManager class
 * @param {string=} applicationPath The application path
 */
function HTML5HistoryManager(applicationPath) {}
 /** @type {boolean} */
HTML5HistoryManager.prototype.disabled;

/**
 * Registers a listener for the popstate event
 * @param {?} navigateHistory The history navigation event handler
 * @return {void}
 */
HTML5HistoryManager.prototype.init = function(navigateHistory) {};

/**
 * Sets the browser Url to the url using pushState
 * @param {string} url The current url
 * @param {boolean} replace A value indicating whether to replace the current
 * browser history entry
 * @return {void}
 */
HTML5HistoryManager.prototype.addHistory = function(url, replace) {};

/**
 * Gets the current location
 * @return {string}
 */
HTML5HistoryManager.prototype.getCurrentUrl = function() {};

/**
 * Gets an Href from the url
 * @param {string} url
 * @return {string}
 */
HTML5HistoryManager.prototype.getHref = function(url) {};

/**
 * Gets a Url from the anchor or location
 * @param {(!HTMLAnchorElement|!Location)} hrefElement
 * @return {string}
 */
HTML5HistoryManager.prototype.getUrl = function(hrefElement) {};

/**
 * Removes a listener for the popstate event
 * @return {void}
 */
HTML5HistoryManager.prototype.stop = function() {};

/**
 * @constructor
 * @struct
 * Initializes a new instance of the Crumb class
 * @param {?} data The Context Data held at the time of navigating away
 * from this State
 * @param {?} state The configuration information associated with this
 * navigation
 * @param {string} link The link navigation to return to the State and pass the
 * associated Data
 * @param {string} crumblessLink The link navigation without crumb trail to
 * return to the State and pass the associated Data
 * @param {boolean} last A value indicating whether the Crumb is the last in the
 * crumb trail
 */
function Crumb(data, state, link, crumblessLink, last) {}
 /** @type {?} */
Crumb.prototype.data;
 /** @type {?} */
Crumb.prototype.state;
 /** @type {boolean} */
Crumb.prototype.last;
 /** @type {string} */
Crumb.prototype.title;
 /** @type {string} */
Crumb.prototype.url;
 /** @type {string} */
Crumb.prototype.crumblessUrl;
/**
 * @constructor
 * @struct
 */
function StateContext() {}
 /** @type {?} */
StateContext.prototype.oldState;
 /** @type {?} */
StateContext.prototype.oldData;
 /** @type {?} */
StateContext.prototype.previousState;
 /** @type {?} */
StateContext.prototype.previousData;
 /** @type {?} */
StateContext.prototype.state;
 /** @type {?} */
StateContext.prototype.data;
 /** @type {string} */
StateContext.prototype.url;
 /** @type {string} */
StateContext.prototype.title;
 /** @type {!Array<?>} */
StateContext.prototype.crumbs;
 /** @type {?} */
StateContext.prototype.nextCrumb;

/**
 * Clears the Context Data
 * @return {void}
 */
StateContext.prototype.clear = function() {};

/**
 * Combines the data with a subset of the current NavigationData
 * @param {?} data
 * @param {!Array<string>=} keys
 * @return {?} The combined data
 */
StateContext.prototype.includeCurrentData = function(data, keys) {};
/**
 * @record
 * @struct
 */
function FluentNavigator() {}
 /** @type {string} */
FluentNavigator.prototype.url;

/**
 * Navigates to a State
 * @throws state does not match the key of a State or there is
 * NavigationData that cannot be converted to a String
 * @throws A mandatory route parameter has not been supplied a value
 * @param {string} stateKey The key of a State
 * @param {?=} navigationData The NavigationData to be passed to the next
 * State and stored in the StateContext
 * @return {?}
 */
FluentNavigator.prototype.navigate = function(stateKey, navigationData) {};

/**
 * Navigates back along the crumb trail
 * @throws canNavigateBack returns false for this distance
 * @throws A mandatory route parameter has not been supplied a value
 * @param {number} distance Starting at 1, the number of Crumb steps to go back
 * @return {?}
 */
FluentNavigator.prototype.navigateBack = function(distance) {};

/**
 * Navigates to the current State
 * @throws There is NavigationData that cannot be converted to a String
 * @throws A mandatory route parameter has not been supplied a value
 * @param {?=} navigationData The NavigationData to be passed to the current
 * State and stored in the StateContext
 * @return {?}
 */
FluentNavigator.prototype.refresh = function(navigationData) {};

/**
 * @constructor
 * @struct
 * Initializes a new instance of the StateNavigator class
 * @param {!Array<?>=} states A collection of States
 * @param {?=} historyManager The manager of the browser Url
 */
function StateNavigator(states, historyManager) {}
 /** @type {?} */
StateNavigator.prototype.stateContext;
 /** @type {?} */
StateNavigator.prototype.historyManager;
 /** @type {?} */
StateNavigator.prototype.states;

/**
 * Configures the StateNavigator
 * @param {!Array<?>} stateInfos A collection of State Infos
 * @param {?=} historyManager The manager of the browser Url
 * @return {void}
 */
StateNavigator.prototype.configure = function(stateInfos, historyManager) {};

/**
 * Registers a navigate event listener
 * @param {?} handler The navigate event listener
 * @return {void}
 */
StateNavigator.prototype.onNavigate = function(handler) {};

/**
 * Unregisters a navigate event listener
 * @param {?} handler The navigate event listener
 * @return {void}
 */
StateNavigator.prototype.offNavigate = function(handler) {};

/**
 * Navigates to a State
 * @throws state does not match the key of a State or there is
 * NavigationData that cannot be converted to a String
 * @throws A mandatory route parameter has not been supplied a value
 * @param {string} stateKey The key of a State
 * @param {?=} navigationData The NavigationData to be passed to the next
 * State and stored in the StateContext
 * @param {string=} historyAction
 * @return {void}
 */
StateNavigator.prototype.navigate = function(stateKey, navigationData, historyAction) {};

/**
 * Gets a Url to navigate to a State
 * @throws state does not match the key of a State or there is
 * NavigationData that cannot be converted to a String
 * @param {string} stateKey The key of a State
 * @param {?=} navigationData The NavigationData to be passed to the next
 * State and stored in the StateContext
 * @return {string} Url that will navigate to State specified in the action
 */
StateNavigator.prototype.getNavigationLink = function(stateKey, navigationData) {};

/**
 * Determines if the distance specified is within the bounds of the
 * crumb trail represented by the Crumbs collection
 * @param {number} distance
 * @return {boolean}
 */
StateNavigator.prototype.canNavigateBack = function(distance) {};

/**
 * Navigates back along the crumb trail
 * @throws canNavigateBack returns false for this distance
 * @throws A mandatory route parameter has not been supplied a value
 * @param {number} distance Starting at 1, the number of Crumb steps to go back
 * @param {string=} historyAction
 * @return {void}
 */
StateNavigator.prototype.navigateBack = function(distance, historyAction) {};

/**
 * Gets a Url to navigate back along the crumb trail
 * @throws canNavigateBack returns false for this distance
 * @param {number} distance Starting at 1, the number of Crumb steps to go back
 * @return {string}
 */
StateNavigator.prototype.getNavigationBackLink = function(distance) {};

/**
 * Navigates to the current State
 * @throws There is NavigationData that cannot be converted to a String
 * @throws A mandatory route parameter has not been supplied a value
 * @param {?=} navigationData The NavigationData to be passed to the current
 * State and stored in the StateContext
 * @param {string=} historyAction
 * @return {void}
 */
StateNavigator.prototype.refresh = function(navigationData, historyAction) {};

/**
 * Gets a Url to navigate to the current State
 * @throws There is NavigationData that cannot be converted to a String
 * @param {?=} navigationData The NavigationData to be passed to the current
 * State and stored in the StateContext
 * @return {string} Url that will navigate to the current State
 */
StateNavigator.prototype.getRefreshLink = function(navigationData) {};

/**
 * Navigates to the url
 * @param {string} url The target location
 * @param {string=} historyAction
 * @param {boolean=} history A value indicating whether browser history was used
 * @return {void}
 */
StateNavigator.prototype.navigateLink = function(url, historyAction, history) {};

/**
 * Parses the url out into State and Navigation Data
 * @param {string} url The url to parse
 * @return {?}
 */
StateNavigator.prototype.parseLink = function(url) {};

/**
 * Creates a FluentNavigator
 * @param {boolean=} withContext a value indicating whether to inherit the current
 * context
 * @return {?} A FluentNavigator
 */
StateNavigator.prototype.fluent = function(withContext) {};

/**
 * Navigates to the passed in url
 * @param {string=} url The url to navigate to
 * @return {void}
 */
StateNavigator.prototype.start = function(url) {};
