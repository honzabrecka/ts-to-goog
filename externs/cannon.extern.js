/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cannon/index.d.ts:
/** @const */
var CANNON = {};
/**
 * @record
 * @struct
 */
CANNON.IAABBOptions = function() {};
 /** @type {!CANNON.Vec3} */
CANNON.IAABBOptions.prototype.upperBound;
 /** @type {!CANNON.Vec3} */
CANNON.IAABBOptions.prototype.lowerBound;

/**
 * @constructor
 * @struct
 * @param {!CANNON.IAABBOptions=} options
 */
CANNON.AABB = function(options) {};
 /** @type {!CANNON.Vec3} */
CANNON.AABB.prototype.lowerBound;
 /** @type {!CANNON.Vec3} */
CANNON.AABB.prototype.upperBound;

/**
 * @param {!Array<!CANNON.Vec3>} points
 * @param {!CANNON.Vec3=} position
 * @param {!CANNON.Quaternion=} quaternion
 * @param {number=} skinSize
 * @return {void}
 */
CANNON.AABB.prototype.setFromPoints = function(points, position, quaternion, skinSize) {};

/**
 * @param {!CANNON.AABB} aabb
 * @return {void}
 */
CANNON.AABB.prototype.copy = function(aabb) {};

/**
 * @param {!CANNON.AABB} aabb
 * @return {void}
 */
CANNON.AABB.prototype.extend = function(aabb) {};

/**
 * @param {!CANNON.AABB} aabb
 * @return {boolean}
 */
CANNON.AABB.prototype.overlaps = function(aabb) {};
/**
 * @constructor
 * @struct
 */
CANNON.ArrayCollisionMatrix = function() {};
 /** @type {!Array<!CANNON.Mat3>} */
CANNON.ArrayCollisionMatrix.prototype.matrix;

/**
 * @param {number} i
 * @param {number} j
 * @return {number}
 */
CANNON.ArrayCollisionMatrix.prototype.get = function(i, j) {};

/**
 * @param {number} i
 * @param {number} j
 * @param {number=} value
 * @return {void}
 */
CANNON.ArrayCollisionMatrix.prototype.set = function(i, j, value) {};

/**
 * @return {void}
 */
CANNON.ArrayCollisionMatrix.prototype.reset = function() {};

/**
 * @param {number} n
 * @return {void}
 */
CANNON.ArrayCollisionMatrix.prototype.setNumObjects = function(n) {};
/**
 * @constructor
 * @struct
 */
CANNON.BroadPhase = function() {};
 /** @type {!CANNON.World} */
CANNON.BroadPhase.prototype.world;
 /** @type {boolean} */
CANNON.BroadPhase.prototype.useBoundingBoxes;
 /** @type {boolean} */
CANNON.BroadPhase.prototype.dirty;

/**
 * @param {!CANNON.World} world
 * @param {!Array<!CANNON.Body>} p1
 * @param {!Array<!CANNON.Body>} p2
 * @return {void}
 */
CANNON.BroadPhase.prototype.collisionPairs = function(world, p1, p2) {};

/**
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @return {boolean}
 */
CANNON.BroadPhase.prototype.needBroadphaseCollision = function(bodyA, bodyB) {};

/**
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @param {!Array<!CANNON.Body>} pairs1
 * @param {!Array<!CANNON.Body>} pairs2
 * @return {void}
 */
CANNON.BroadPhase.prototype.intersectionTest = function(bodyA, bodyB, pairs1, pairs2) {};

/**
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @param {!Array<!CANNON.Body>} pairs1
 * @param {!Array<!CANNON.Body>} pairs2
 * @return {void}
 */
CANNON.BroadPhase.prototype.doBoundingSphereBroadphase = function(bodyA, bodyB, pairs1, pairs2) {};

/**
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @param {!Array<!CANNON.Body>} pairs1
 * @param {!Array<!CANNON.Body>} pairs2
 * @return {void}
 */
CANNON.BroadPhase.prototype.doBoundingBoxBroadphase = function(bodyA, bodyB, pairs1, pairs2) {};

/**
 * @param {!Array<!CANNON.Body>} pairs1
 * @param {!Array<!CANNON.Body>} pairs2
 * @return {void}
 */
CANNON.BroadPhase.prototype.makePairsUnique = function(pairs1, pairs2) {};

/**
 * @param {!CANNON.World} world
 * @return {void}
 */
CANNON.BroadPhase.prototype.setWorld = function(world) {};

/**
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @return {boolean}
 */
CANNON.BroadPhase.prototype.boundingSphereCheck = function(bodyA, bodyB) {};

/**
 * @param {!CANNON.World} world
 * @param {!CANNON.AABB} aabb
 * @param {!Array<!CANNON.Body>} result
 * @return {!Array<!CANNON.Body>}
 */
CANNON.BroadPhase.prototype.aabbQuery = function(world, aabb, result) {};

/**
 * @constructor
 * @struct
 * @param {!CANNON.Vec3=} aabbMin
 * @param {!CANNON.Vec3=} aabbMax
 * @param {number=} nx
 * @param {number=} ny
 * @param {number=} nz
 */
CANNON.GridBroadphase = function(aabbMin, aabbMax, nx, ny, nz) {};
 /** @type {number} */
CANNON.GridBroadphase.prototype.nx;
 /** @type {number} */
CANNON.GridBroadphase.prototype.ny;
 /** @type {number} */
CANNON.GridBroadphase.prototype.nz;
 /** @type {!CANNON.Vec3} */
CANNON.GridBroadphase.prototype.aabbMin;
 /** @type {!CANNON.Vec3} */
CANNON.GridBroadphase.prototype.aabbMax;
 /** @type {!Array<?>} */
CANNON.GridBroadphase.prototype.bins;
/**
 * @extends {CANNON.BroadPhase}
 * @constructor
 * @struct
 */
CANNON.NaiveBroadphase = function() {};
/**
 * @constructor
 * @struct
 */
CANNON.ObjectCollisionMatrix = function() {};
 /** @type {!Array<number>} */
CANNON.ObjectCollisionMatrix.prototype.matrix;

/**
 * @param {number} i
 * @param {number} j
 * @return {number}
 */
CANNON.ObjectCollisionMatrix.prototype.get = function(i, j) {};

/**
 * @param {number} i
 * @param {number} j
 * @param {number} value
 * @return {void}
 */
CANNON.ObjectCollisionMatrix.prototype.set = function(i, j, value) {};

/**
 * @return {void}
 */
CANNON.ObjectCollisionMatrix.prototype.reset = function() {};

/**
 * @param {number} n
 * @return {void}
 */
CANNON.ObjectCollisionMatrix.prototype.setNumObjects = function(n) {};

/**
 * @constructor
 * @struct
 * @param {!CANNON.Vec3=} from
 * @param {!CANNON.Vec3=} to
 */
CANNON.Ray = function(from, to) {};
 /** @type {!CANNON.Vec3} */
CANNON.Ray.prototype.from;
 /** @type {!CANNON.Vec3} */
CANNON.Ray.prototype.to;
 /** @type {number} */
CANNON.Ray.prototype.precision;
 /** @type {boolean} */
CANNON.Ray.prototype.checkCollisionResponse;

/**
 * @param {!CANNON.RaycastResult} result
 * @return {void}
 */
CANNON.Ray.prototype.getAABB = function(result) {};
/**
 * @constructor
 * @struct
 */
CANNON.RaycastResult = function() {};
 /** @type {!CANNON.Vec3} */
CANNON.RaycastResult.prototype.rayFromWorld;
 /** @type {!CANNON.Vec3} */
CANNON.RaycastResult.prototype.rayToWorld;
 /** @type {!CANNON.Vec3} */
CANNON.RaycastResult.prototype.hitNormalWorld;
 /** @type {!CANNON.Vec3} */
CANNON.RaycastResult.prototype.hitPointWorld;
 /** @type {boolean} */
CANNON.RaycastResult.prototype.hasHit;
 /** @type {!CANNON.Shape} */
CANNON.RaycastResult.prototype.shape;
 /** @type {!CANNON.Body} */
CANNON.RaycastResult.prototype.body;
 /** @type {number} */
CANNON.RaycastResult.prototype.distance;

/**
 * @return {void}
 */
CANNON.RaycastResult.prototype.reset = function() {};

/**
 * @param {!CANNON.Vec3} rayFromWorld
 * @param {!CANNON.Vec3} rayToWorld
 * @param {!CANNON.Vec3} hitNormalWorld
 * @param {!CANNON.Vec3} hitPointWorld
 * @param {!CANNON.Shape} shape
 * @param {!CANNON.Body} body
 * @param {number} distance
 * @return {void}
 */
CANNON.RaycastResult.prototype.set = function(rayFromWorld, rayToWorld, hitNormalWorld, hitPointWorld, shape, body, distance) {};

/**
 * @constructor
 * @struct
 * @param {!CANNON.World=} world
 */
CANNON.SAPBroadphase = function(world) {};
 /** @type {!Array<?>} */
CANNON.SAPBroadphase.prototype.axisList;
 /** @type {!CANNON.World} */
CANNON.SAPBroadphase.prototype.world;
 /** @type {number} */
CANNON.SAPBroadphase.prototype.axisIndex;

/**
 * @param {!Array<?>} a
 * @return {!Array<?>}
 */
CANNON.SAPBroadphase.insertionSortX = function(a) {};

/**
 * @param {!Array<?>} a
 * @return {!Array<?>}
 */
CANNON.SAPBroadphase.insertionSortY = function(a) {};

/**
 * @param {!Array<?>} a
 * @return {!Array<?>}
 */
CANNON.SAPBroadphase.insertionSortZ = function(a) {};

/**
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 * @param {number=} axisIndex
 * @return {boolean}
 */
CANNON.SAPBroadphase.checkBounds = function(bi, bj, axisIndex) {};

/**
 * @return {void}
 */
CANNON.SAPBroadphase.prototype.autoDetectAxis = function() {};

/**
 * @param {!CANNON.World} world
 * @param {!CANNON.AABB} aabb
 * @param {!Array<!CANNON.Body>=} result
 * @return {!Array<!CANNON.Body>}
 */
CANNON.SAPBroadphase.prototype.aabbQuery = function(world, aabb, result) {};
/**
 * @record
 * @struct
 */
CANNON.IConstraintOptions = function() {};
 /** @type {boolean} */
CANNON.IConstraintOptions.prototype.collideConnected;
 /** @type {boolean} */
CANNON.IConstraintOptions.prototype.wakeUpBodies;

/**
 * @constructor
 * @struct
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @param {!CANNON.IConstraintOptions=} options
 */
CANNON.Constraint = function(bodyA, bodyB, options) {};
 /** @type {!Array<?>} */
CANNON.Constraint.prototype.equations;
 /** @type {!CANNON.Body} */
CANNON.Constraint.prototype.bodyA;
 /** @type {!CANNON.Body} */
CANNON.Constraint.prototype.bodyB;
 /** @type {number} */
CANNON.Constraint.prototype.id;
 /** @type {boolean} */
CANNON.Constraint.prototype.collideConnected;

/**
 * @return {void}
 */
CANNON.Constraint.prototype.update = function() {};

/**
 * @constructor
 * @struct
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @param {number} distance
 * @param {number=} maxForce
 */
CANNON.DistanceConstraint = function(bodyA, bodyB, distance, maxForce) {};
/**
 * @record
 * @struct
 */
CANNON.IHingeConstraintOptions = function() {};
 /** @type {!CANNON.Vec3} */
CANNON.IHingeConstraintOptions.prototype.pivotA;
 /** @type {!CANNON.Vec3} */
CANNON.IHingeConstraintOptions.prototype.axisA;
 /** @type {!CANNON.Vec3} */
CANNON.IHingeConstraintOptions.prototype.pivotB;
 /** @type {!CANNON.Vec3} */
CANNON.IHingeConstraintOptions.prototype.axisB;
 /** @type {number} */
CANNON.IHingeConstraintOptions.prototype.maxForce;

/**
 * @constructor
 * @struct
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @param {!CANNON.IHingeConstraintOptions=} options
 */
CANNON.HingeConstraint = function(bodyA, bodyB, options) {};
 /** @type {boolean} */
CANNON.HingeConstraint.prototype.motorEnabled;
 /** @type {number} */
CANNON.HingeConstraint.prototype.motorTargetVelocity;
 /** @type {number} */
CANNON.HingeConstraint.prototype.motorMinForce;
 /** @type {number} */
CANNON.HingeConstraint.prototype.motorMaxForce;
 /** @type {!CANNON.RotationalMotorEquation} */
CANNON.HingeConstraint.prototype.motorEquation;

/**
 * @return {void}
 */
CANNON.HingeConstraint.prototype.enableMotor = function() {};

/**
 * @return {void}
 */
CANNON.HingeConstraint.prototype.disableMotor = function() {};

/**
 * @constructor
 * @struct
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Vec3} pivotA
 * @param {!CANNON.Body} bodyB
 * @param {!CANNON.Vec3} pivotB
 * @param {number=} maxForce
 */
CANNON.PointToPointConstraint = function(bodyA, pivotA, bodyB, pivotB, maxForce) {};

/**
 * @constructor
 * @struct
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @param {?=} options
 */
CANNON.LockConstraint = function(bodyA, bodyB, options) {};

/**
 * @constructor
 * @struct
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 * @param {number=} minForce
 * @param {number=} maxForce
 */
CANNON.Equation = function(bi, bj, minForce, maxForce) {};
 /** @type {number} */
CANNON.Equation.prototype.id;
 /** @type {number} */
CANNON.Equation.prototype.minForce;
 /** @type {number} */
CANNON.Equation.prototype.maxForce;
 /** @type {!CANNON.Body} */
CANNON.Equation.prototype.bi;
 /** @type {!CANNON.Body} */
CANNON.Equation.prototype.bj;
 /** @type {number} */
CANNON.Equation.prototype.a;
 /** @type {number} */
CANNON.Equation.prototype.b;
 /** @type {number} */
CANNON.Equation.prototype.eps;
 /** @type {!CANNON.JacobianElement} */
CANNON.Equation.prototype.jacobianElementA;
 /** @type {!CANNON.JacobianElement} */
CANNON.Equation.prototype.jacobianElementB;
 /** @type {boolean} */
CANNON.Equation.prototype.enabled;

/**
 * @param {number} stiffness
 * @param {number} relaxation
 * @param {number} timeStep
 * @return {void}
 */
CANNON.Equation.prototype.setSpookParams = function(stiffness, relaxation, timeStep) {};

/**
 * @param {number} a
 * @param {number} b
 * @param {number} h
 * @return {number}
 */
CANNON.Equation.prototype.computeB = function(a, b, h) {};

/**
 * @return {number}
 */
CANNON.Equation.prototype.computeGq = function() {};

/**
 * @return {number}
 */
CANNON.Equation.prototype.computeGW = function() {};

/**
 * @return {number}
 */
CANNON.Equation.prototype.computeGWlamda = function() {};

/**
 * @return {number}
 */
CANNON.Equation.prototype.computeGiMf = function() {};

/**
 * @return {number}
 */
CANNON.Equation.prototype.computeGiMGt = function() {};

/**
 * @param {number} deltalambda
 * @return {number}
 */
CANNON.Equation.prototype.addToWlamda = function(deltalambda) {};

/**
 * @return {number}
 */
CANNON.Equation.prototype.computeC = function() {};

/**
 * @constructor
 * @struct
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 * @param {number} slipForce
 */
CANNON.FrictionEquation = function(bi, bj, slipForce) {};

/**
 * @constructor
 * @struct
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 */
CANNON.RotationalEquation = function(bodyA, bodyB) {};
 /** @type {!CANNON.Vec3} */
CANNON.RotationalEquation.prototype.ni;
 /** @type {!CANNON.Vec3} */
CANNON.RotationalEquation.prototype.nj;
 /** @type {!CANNON.Vec3} */
CANNON.RotationalEquation.prototype.nixnj;
 /** @type {!CANNON.Vec3} */
CANNON.RotationalEquation.prototype.njxni;
 /** @type {!CANNON.Mat3} */
CANNON.RotationalEquation.prototype.invIi;
 /** @type {!CANNON.Mat3} */
CANNON.RotationalEquation.prototype.invIj;
 /** @type {!CANNON.Vec3} */
CANNON.RotationalEquation.prototype.relVel;
 /** @type {!CANNON.Vec3} */
CANNON.RotationalEquation.prototype.relForce;

/**
 * @constructor
 * @struct
 * @param {!CANNON.Body} bodyA
 * @param {!CANNON.Body} bodyB
 * @param {number=} maxForce
 */
CANNON.RotationalMotorEquation = function(bodyA, bodyB, maxForce) {};
 /** @type {!CANNON.Vec3} */
CANNON.RotationalMotorEquation.prototype.axisA;
 /** @type {!CANNON.Vec3} */
CANNON.RotationalMotorEquation.prototype.axisB;
 /** @type {!CANNON.Mat3} */
CANNON.RotationalMotorEquation.prototype.invLi;
 /** @type {!CANNON.Mat3} */
CANNON.RotationalMotorEquation.prototype.invIj;
 /** @type {number} */
CANNON.RotationalMotorEquation.prototype.targetVelocity;

/**
 * @constructor
 * @struct
 * @param {!CANNON.Body} bi
 * @param {!CANNON.Body} bj
 */
CANNON.ContactEquation = function(bi, bj) {};
 /** @type {number} */
CANNON.ContactEquation.prototype.restitution;
 /** @type {!CANNON.Vec3} */
CANNON.ContactEquation.prototype.ri;
 /** @type {!CANNON.Vec3} */
CANNON.ContactEquation.prototype.rj;
 /** @type {!CANNON.Vec3} */
CANNON.ContactEquation.prototype.penetrationVec;
 /** @type {!CANNON.Vec3} */
CANNON.ContactEquation.prototype.ni;
 /** @type {!CANNON.Vec3} */
CANNON.ContactEquation.prototype.rixn;
 /** @type {!CANNON.Vec3} */
CANNON.ContactEquation.prototype.rjxn;
 /** @type {!CANNON.Mat3} */
CANNON.ContactEquation.prototype.invIi;
 /** @type {!CANNON.Mat3} */
CANNON.ContactEquation.prototype.invIj;
 /** @type {!CANNON.Vec3} */
CANNON.ContactEquation.prototype.biInvInertiaTimesRixn;
 /** @type {!CANNON.Vec3} */
CANNON.ContactEquation.prototype.bjInvInertiaTimesRjxn;
/**
 * @record
 * @struct
 */
CANNON.IContactMaterialOptions = function() {};
 /** @type {number} */
CANNON.IContactMaterialOptions.prototype.friction;
 /** @type {number} */
CANNON.IContactMaterialOptions.prototype.restitution;
 /** @type {number} */
CANNON.IContactMaterialOptions.prototype.contactEquationStiffness;
 /** @type {number} */
CANNON.IContactMaterialOptions.prototype.contactEquationRelaxation;
 /** @type {number} */
CANNON.IContactMaterialOptions.prototype.frictionEquationStiffness;
 /** @type {number} */
CANNON.IContactMaterialOptions.prototype.frictionEquationRelaxation;

/**
 * @constructor
 * @struct
 * @param {!CANNON.Material} m1
 * @param {!CANNON.Material} m2
 * @param {!CANNON.IContactMaterialOptions=} options
 */
CANNON.ContactMaterial = function(m1, m2, options) {};
 /** @type {number} */
CANNON.ContactMaterial.prototype.id;
 /** @type {!Array<!CANNON.Material>} */
CANNON.ContactMaterial.prototype.materials;
 /** @type {number} */
CANNON.ContactMaterial.prototype.friction;
 /** @type {number} */
CANNON.ContactMaterial.prototype.restitution;
 /** @type {number} */
CANNON.ContactMaterial.prototype.contactEquationStiffness;
 /** @type {number} */
CANNON.ContactMaterial.prototype.contactEquationRelaxation;
 /** @type {number} */
CANNON.ContactMaterial.prototype.frictionEquationStiffness;
 /** @type {number} */
CANNON.ContactMaterial.prototype.frictionEquationRelaxation;

/**
 * @constructor
 * @struct
 * @param {string} name
 */
CANNON.Material = function(name) {};
 /** @type {string} */
CANNON.Material.prototype.name;
 /** @type {number} */
CANNON.Material.prototype.id;
 /** @type {number} */
CANNON.Material.prototype.friction;
 /** @type {number} */
CANNON.Material.prototype.restitution;
/**
 * @constructor
 * @struct
 */
CANNON.JacobianElement = function() {};
 /** @type {!CANNON.Vec3} */
CANNON.JacobianElement.prototype.spatial;
 /** @type {!CANNON.Vec3} */
CANNON.JacobianElement.prototype.rotational;

/**
 * @param {!CANNON.JacobianElement} element
 * @return {number}
 */
CANNON.JacobianElement.prototype.multiplyElement = function(element) {};

/**
 * @param {!CANNON.Vec3} spacial
 * @param {!CANNON.Vec3} rotational
 * @return {number}
 */
CANNON.JacobianElement.prototype.multiplyVectors = function(spacial, rotational) {};

/**
 * @constructor
 * @struct
 * @param {!Array<number>=} elements
 */
CANNON.Mat3 = function(elements) {};

/**
 * @return {void}
 */
CANNON.Mat3.prototype.identity = function() {};

/**
 * @return {void}
 */
CANNON.Mat3.prototype.setZero = function() {};

/**
 * @param {!CANNON.Vec3} vec3
 * @return {void}
 */
CANNON.Mat3.prototype.setTrace = function(vec3) {};

/**
 * @param {!CANNON.Vec3} target
 * @return {void}
 */
CANNON.Mat3.prototype.getTrace = function(target) {};

/**
 * @param {!CANNON.Vec3} v
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Mat3.prototype.vmult = function(v, target) {};

/**
 * @param {number} s
 * @return {void}
 */
CANNON.Mat3.prototype.smult = function(s) {};

/**
 * @param {!CANNON.Mat3} m
 * @return {!CANNON.Mat3}
 */
CANNON.Mat3.prototype.mmult = function(m) {};

/**
 * @param {!CANNON.Vec3} v
 * @param {!CANNON.Mat3=} target
 * @return {!CANNON.Mat3}
 */
CANNON.Mat3.prototype.scale = function(v, target) {};

/**
 * @param {!CANNON.Vec3} b
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Mat3.prototype.solve = function(b, target) {};

/**
 * @param {number} row
 * @param {number} column
 * @param {number=} value
 * @return {number}
 */
CANNON.Mat3.prototype.e = function(row, column, value) {};

/**
 * @param {!CANNON.Mat3} source
 * @return {!CANNON.Mat3}
 */
CANNON.Mat3.prototype.copy = function(source) {};

/**
 * @return {string}
 */
CANNON.Mat3.prototype.toString = function() {};

/**
 * @param {!CANNON.Mat3=} target
 * @return {!CANNON.Mat3}
 */
CANNON.Mat3.prototype.reverse = function(target) {};

/**
 * @param {!CANNON.Quaternion} q
 * @return {!CANNON.Mat3}
 */
CANNON.Mat3.prototype.setRotationFromQuaternion = function(q) {};

/**
 * @param {!CANNON.Mat3=} target
 * @return {!CANNON.Mat3}
 */
CANNON.Mat3.prototype.transpose = function(target) {};

/**
 * @constructor
 * @struct
 * @param {number=} x
 * @param {number=} y
 * @param {number=} z
 * @param {number=} w
 */
CANNON.Quaternion = function(x, y, z, w) {};
 /** @type {number} */
CANNON.Quaternion.prototype.x;
 /** @type {number} */
CANNON.Quaternion.prototype.y;
 /** @type {number} */
CANNON.Quaternion.prototype.z;
 /** @type {number} */
CANNON.Quaternion.prototype.w;

/**
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @param {number} w
 * @return {void}
 */
CANNON.Quaternion.prototype.set = function(x, y, z, w) {};

/**
 * @return {string}
 */
CANNON.Quaternion.prototype.toString = function() {};

/**
 * @return {!Array<number>}
 */
CANNON.Quaternion.prototype.toArray = function() {};

/**
 * @param {!CANNON.Vec3} axis
 * @param {number} angle
 * @return {void}
 */
CANNON.Quaternion.prototype.setFromAxisAngle = function(axis, angle) {};

/**
 * @param {!CANNON.Vec3=} targetAxis
 * @return {!Array<?>}
 */
CANNON.Quaternion.prototype.toAxisAngle = function(targetAxis) {};

/**
 * @param {!CANNON.Vec3} u
 * @param {!CANNON.Vec3} v
 * @return {void}
 */
CANNON.Quaternion.prototype.setFromVectors = function(u, v) {};

/**
 * @param {!CANNON.Quaternion} q
 * @param {!CANNON.Quaternion=} target
 * @return {!CANNON.Quaternion}
 */
CANNON.Quaternion.prototype.mult = function(q, target) {};

/**
 * @param {!CANNON.Quaternion=} target
 * @return {!CANNON.Quaternion}
 */
CANNON.Quaternion.prototype.inverse = function(target) {};

/**
 * @param {!CANNON.Quaternion=} target
 * @return {!CANNON.Quaternion}
 */
CANNON.Quaternion.prototype.conjugate = function(target) {};

/**
 * @return {void}
 */
CANNON.Quaternion.prototype.normalize = function() {};

/**
 * @return {void}
 */
CANNON.Quaternion.prototype.normalizeFast = function() {};

/**
 * @param {!CANNON.Vec3} v
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Quaternion.prototype.vmult = function(v, target) {};

/**
 * @param {!CANNON.Quaternion} source
 * @return {!CANNON.Quaternion}
 */
CANNON.Quaternion.prototype.copy = function(source) {};

/**
 * @param {!CANNON.Vec3} target
 * @param {string=} order
 * @return {void}
 */
CANNON.Quaternion.prototype.toEuler = function(target, order) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @param {string=} order
 * @return {!CANNON.Quaternion}
 */
CANNON.Quaternion.prototype.setFromEuler = function(x, y, z, order) {};

/**
 * @return {!CANNON.Quaternion}
 */
CANNON.Quaternion.prototype.clone = function() {};
/**
 * @constructor
 * @struct
 */
CANNON.Transform = function() {};
 /** @type {!CANNON.Vec3} */
CANNON.Transform.prototype.position;
 /** @type {!CANNON.Quaternion} */
CANNON.Transform.prototype.quaternion;

/**
 * @param {!CANNON.Vec3} position
 * @param {!CANNON.Quaternion} quaternion
 * @param {!CANNON.Vec3} worldPoint
 * @param {!CANNON.Vec3=} result
 * @return {!CANNON.Vec3}
 */
CANNON.Transform.pointToLocalFrame = function(position, quaternion, worldPoint, result) {};

/**
 * @param {!CANNON.Vec3} position
 * @param {!CANNON.Quaternion} quaternion
 * @param {!CANNON.Vec3} localPoint
 * @param {!CANNON.Vec3=} result
 * @return {!CANNON.Vec3}
 */
CANNON.Transform.pointToWorldFrame = function(position, quaternion, localPoint, result) {};

/**
 * @param {!CANNON.Vec3} localVector
 * @param {!CANNON.Vec3=} result
 * @return {!CANNON.Vec3}
 */
CANNON.Transform.prototype.vectorToWorldFrame = function(localVector, result) {};

/**
 * @param {!CANNON.Vec3} position
 * @param {!CANNON.Quaternion} quaternion
 * @param {!CANNON.Vec3} worldVector
 * @param {!CANNON.Vec3=} result
 * @return {!CANNON.Vec3}
 */
CANNON.Transform.prototype.vectorToLocalFrame = function(position, quaternion, worldVector, result) {};

/**
 * @constructor
 * @struct
 * @param {number=} x
 * @param {number=} y
 * @param {number=} z
 */
CANNON.Vec3 = function(x, y, z) {};
 /** @type {!CANNON.Vec3} */
CANNON.Vec3.ZERO;
 /** @type {number} */
CANNON.Vec3.prototype.x;
 /** @type {number} */
CANNON.Vec3.prototype.y;
 /** @type {number} */
CANNON.Vec3.prototype.z;

/**
 * @param {!CANNON.Vec3} v
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3.prototype.cross = function(v, target) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3.prototype.set = function(x, y, z) {};

/**
 * @return {void}
 */
CANNON.Vec3.prototype.setZero = function() {};

/**
 * @param {!CANNON.Vec3} v
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3.prototype.vadd = function(v, target) {};

/**
 * @param {!CANNON.Vec3} v
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3.prototype.vsub = function(v, target) {};

/**
 * @return {!CANNON.Mat3}
 */
CANNON.Vec3.prototype.crossmat = function() {};

/**
 * @return {number}
 */
CANNON.Vec3.prototype.normalize = function() {};

/**
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3.prototype.unit = function(target) {};

/**
 * @return {number}
 */
CANNON.Vec3.prototype.norm = function() {};

/**
 * @return {number}
 */
CANNON.Vec3.prototype.norm2 = function() {};

/**
 * @param {!CANNON.Vec3} p
 * @return {number}
 */
CANNON.Vec3.prototype.distanceTo = function(p) {};

/**
 * @param {number} scalar
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3.prototype.mult = function(scalar, target) {};

/**
 * @param {number} scalar
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3.prototype.scale = function(scalar, target) {};

/**
 * @param {!CANNON.Vec3} v
 * @return {number}
 */
CANNON.Vec3.prototype.dot = function(v) {};

/**
 * @return {boolean}
 */
CANNON.Vec3.prototype.isZero = function() {};

/**
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3.prototype.negate = function(target) {};

/**
 * @param {!CANNON.Vec3} t1
 * @param {!CANNON.Vec3} t2
 * @return {void}
 */
CANNON.Vec3.prototype.tangents = function(t1, t2) {};

/**
 * @return {string}
 */
CANNON.Vec3.prototype.toString = function() {};

/**
 * @return {!Array<number>}
 */
CANNON.Vec3.prototype.toArray = function() {};

/**
 * @param {!CANNON.Vec3} source
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3.prototype.copy = function(source) {};

/**
 * @param {!CANNON.Vec3} v
 * @param {number} t
 * @param {!CANNON.Vec3=} target
 * @return {void}
 */
CANNON.Vec3.prototype.lerp = function(v, t, target) {};

/**
 * @param {!CANNON.Vec3} v
 * @param {number=} precision
 * @return {boolean}
 */
CANNON.Vec3.prototype.almostEquals = function(v, precision) {};

/**
 * @param {number=} precision
 * @return {boolean}
 */
CANNON.Vec3.prototype.almostZero = function(precision) {};

/**
 * @param {!CANNON.Vec3} v
 * @param {number=} prescision
 * @return {boolean}
 */
CANNON.Vec3.prototype.isAntiparallelTo = function(v, prescision) {};

/**
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3.prototype.clone = function() {};
/**
 * @record
 * @struct
 */
CANNON.IBodyOptions = function() {};
 /** @type {!CANNON.Vec3} */
CANNON.IBodyOptions.prototype.position;
 /** @type {!CANNON.Vec3} */
CANNON.IBodyOptions.prototype.velocity;
 /** @type {!CANNON.Vec3} */
CANNON.IBodyOptions.prototype.angularVelocity;
 /** @type {!CANNON.Quaternion} */
CANNON.IBodyOptions.prototype.quaternion;
 /** @type {number} */
CANNON.IBodyOptions.prototype.mass;
 /** @type {number} */
CANNON.IBodyOptions.prototype.material;
 /** @type {number} */
CANNON.IBodyOptions.prototype.type;
 /** @type {number} */
CANNON.IBodyOptions.prototype.linearDamping;
 /** @type {number} */
CANNON.IBodyOptions.prototype.angularDamping;

/**
 * @constructor
 * @struct
 * @param {!CANNON.IBodyOptions=} options
 */
CANNON.Body = function(options) {};
 /** @type {number} */
CANNON.Body.DYNAMIC;
 /** @type {number} */
CANNON.Body.STATIC;
 /** @type {number} */
CANNON.Body.KINEMATIC;
 /** @type {number} */
CANNON.Body.AWAKE;
 /** @type {number} */
CANNON.Body.SLEEPY;
 /** @type {number} */
CANNON.Body.SLEEPING;
 /** @type {!CANNON.IEvent} */
CANNON.Body.sleepyEvent;
 /** @type {!CANNON.IEvent} */
CANNON.Body.sleepEvent;
 /** @type {number} */
CANNON.Body.prototype.id;
 /** @type {!CANNON.World} */
CANNON.Body.prototype.world;
 /** @type {!Function} */
CANNON.Body.prototype.preStep;
 /** @type {!Function} */
CANNON.Body.prototype.postStep;
 /** @type {!CANNON.Vec3} */
CANNON.Body.prototype.vlambda;
 /** @type {number} */
CANNON.Body.prototype.collisionFilterGroup;
 /** @type {number} */
CANNON.Body.prototype.collisionFilterMask;
 /** @type {boolean} */
CANNON.Body.prototype.collisionResponse;
 /** @type {!CANNON.Vec3} */
CANNON.Body.prototype.position;
 /** @type {!CANNON.Vec3} */
CANNON.Body.prototype.previousPosition;
 /** @type {!CANNON.Vec3} */
CANNON.Body.prototype.initPosition;
 /** @type {!CANNON.Vec3} */
CANNON.Body.prototype.velocity;
 /** @type {!CANNON.Vec3} */
CANNON.Body.prototype.initVelocity;
 /** @type {!CANNON.Vec3} */
CANNON.Body.prototype.force;
 /** @type {number} */
CANNON.Body.prototype.mass;
 /** @type {number} */
CANNON.Body.prototype.invMass;
 /** @type {!CANNON.Material} */
CANNON.Body.prototype.material;
 /** @type {number} */
CANNON.Body.prototype.linearDamping;
 /** @type {number} */
CANNON.Body.prototype.type;
 /** @type {boolean} */
CANNON.Body.prototype.allowSleep;
 /** @type {number} */
CANNON.Body.prototype.sleepState;
 /** @type {number} */
CANNON.Body.prototype.sleepSpeedLimit;
 /** @type {number} */
CANNON.Body.prototype.sleepTimeLimit;
 /** @type {number} */
CANNON.Body.prototype.timeLastSleepy;
 /** @type {!CANNON.Vec3} */
CANNON.Body.prototype.torque;
 /** @type {!CANNON.Quaternion} */
CANNON.Body.prototype.quaternion;
 /** @type {!CANNON.Quaternion} */
CANNON.Body.prototype.initQuaternion;
 /** @type {!CANNON.Vec3} */
CANNON.Body.prototype.angularVelocity;
 /** @type {!CANNON.Vec3} */
CANNON.Body.prototype.initAngularVelocity;
 /** @type {!CANNON.Vec3} */
CANNON.Body.prototype.interpolatedPosition;
 /** @type {!CANNON.Quaternion} */
CANNON.Body.prototype.interpolatedQuaternion;
 /** @type {!Array<!CANNON.Shape>} */
CANNON.Body.prototype.shapes;
 /** @type {!Array<?>} */
CANNON.Body.prototype.shapeOffsets;
 /** @type {!Array<?>} */
CANNON.Body.prototype.shapeOrentiations;
 /** @type {!CANNON.Vec3} */
CANNON.Body.prototype.inertia;
 /** @type {!CANNON.Vec3} */
CANNON.Body.prototype.invInertia;
 /** @type {!CANNON.Mat3} */
CANNON.Body.prototype.invInertiaWorld;
 /** @type {number} */
CANNON.Body.prototype.invMassSolve;
 /** @type {!CANNON.Vec3} */
CANNON.Body.prototype.invInertiaSolve;
 /** @type {!CANNON.Mat3} */
CANNON.Body.prototype.invInteriaWorldSolve;
 /** @type {boolean} */
CANNON.Body.prototype.fixedRotation;
 /** @type {number} */
CANNON.Body.prototype.angularDamping;
 /** @type {!CANNON.AABB} */
CANNON.Body.prototype.aabb;
 /** @type {boolean} */
CANNON.Body.prototype.aabbNeedsUpdate;
 /** @type {!CANNON.Vec3} */
CANNON.Body.prototype.wlambda;

/**
 * @return {void}
 */
CANNON.Body.prototype.wakeUp = function() {};

/**
 * @return {void}
 */
CANNON.Body.prototype.sleep = function() {};

/**
 * @param {number} time
 * @return {void}
 */
CANNON.Body.prototype.sleepTick = function(time) {};

/**
 * @return {void}
 */
CANNON.Body.prototype.updateSolveMassProperties = function() {};

/**
 * @param {!CANNON.Vec3} worldPoint
 * @param {!CANNON.Vec3=} result
 * @return {!CANNON.Vec3}
 */
CANNON.Body.prototype.pointToLocalFrame = function(worldPoint, result) {};

/**
 * @param {!CANNON.Vec3} localPoint
 * @param {!CANNON.Vec3=} result
 * @return {!CANNON.Vec3}
 */
CANNON.Body.prototype.pointToWorldFrame = function(localPoint, result) {};

/**
 * @param {!CANNON.Vec3} localVector
 * @param {!CANNON.Vec3=} result
 * @return {!CANNON.Vec3}
 */
CANNON.Body.prototype.vectorToWorldFrame = function(localVector, result) {};

/**
 * @param {!CANNON.Shape} shape
 * @param {!CANNON.Vec3=} offset
 * @param {!CANNON.Quaternion=} orientation
 * @return {void}
 */
CANNON.Body.prototype.addShape = function(shape, offset, orientation) {};

/**
 * @return {void}
 */
CANNON.Body.prototype.updateBoundingRadius = function() {};

/**
 * @return {void}
 */
CANNON.Body.prototype.computeAABB = function() {};

/**
 * @param {!CANNON.Vec3} force
 * @return {void}
 */
CANNON.Body.prototype.updateInertiaWorld = function(force) {};

/**
 * @param {!CANNON.Vec3} force
 * @param {!CANNON.Vec3} worldPoint
 * @return {void}
 */
CANNON.Body.prototype.applyForce = function(force, worldPoint) {};

/**
 * @param {!CANNON.Vec3} impulse
 * @param {!CANNON.Vec3} worldPoint
 * @return {void}
 */
CANNON.Body.prototype.applyImpulse = function(impulse, worldPoint) {};

/**
 * @return {void}
 */
CANNON.Body.prototype.updateMassProperties = function() {};

/**
 * @param {!CANNON.Vec3} worldPoint
 * @param {!CANNON.Vec3} result
 * @return {!CANNON.Vec3}
 */
CANNON.Body.prototype.getVelocityAtWorldPoint = function(worldPoint, result) {};
/**
 * @record
 * @struct
 */
CANNON.IRaycastVehicleOptions = function() {};
 /** @type {!CANNON.Body} */
CANNON.IRaycastVehicleOptions.prototype.chassisBody;
 /** @type {number} */
CANNON.IRaycastVehicleOptions.prototype.indexRightAxis;
 /** @type {number} */
CANNON.IRaycastVehicleOptions.prototype.indexLeftAxis;
 /** @type {number} */
CANNON.IRaycastVehicleOptions.prototype.indexUpAxis;
/**
 * @record
 * @struct
 */
CANNON.IWheelInfoOptions = function() {};
 /** @type {!CANNON.Vec3} */
CANNON.IWheelInfoOptions.prototype.chassisConnectionPointLocal;
 /** @type {!CANNON.Vec3} */
CANNON.IWheelInfoOptions.prototype.chassisConnectionPointWorld;
 /** @type {!CANNON.Vec3} */
CANNON.IWheelInfoOptions.prototype.directionLocal;
 /** @type {!CANNON.Vec3} */
CANNON.IWheelInfoOptions.prototype.directionWorld;
 /** @type {!CANNON.Vec3} */
CANNON.IWheelInfoOptions.prototype.axleLocal;
 /** @type {!CANNON.Vec3} */
CANNON.IWheelInfoOptions.prototype.axleWorld;
 /** @type {number} */
CANNON.IWheelInfoOptions.prototype.suspensionRestLength;
 /** @type {number} */
CANNON.IWheelInfoOptions.prototype.suspensionMaxLength;
 /** @type {number} */
CANNON.IWheelInfoOptions.prototype.radius;
 /** @type {number} */
CANNON.IWheelInfoOptions.prototype.suspensionStiffness;
 /** @type {number} */
CANNON.IWheelInfoOptions.prototype.dampingCompression;
 /** @type {number} */
CANNON.IWheelInfoOptions.prototype.dampingRelaxation;
 /** @type {number} */
CANNON.IWheelInfoOptions.prototype.frictionSlip;
 /** @type {number} */
CANNON.IWheelInfoOptions.prototype.steering;
 /** @type {number} */
CANNON.IWheelInfoOptions.prototype.rotation;
 /** @type {number} */
CANNON.IWheelInfoOptions.prototype.deltaRotation;
 /** @type {number} */
CANNON.IWheelInfoOptions.prototype.rollInfluence;
 /** @type {number} */
CANNON.IWheelInfoOptions.prototype.maxSuspensionForce;
 /** @type {boolean} */
CANNON.IWheelInfoOptions.prototype.isFronmtWheel;
 /** @type {number} */
CANNON.IWheelInfoOptions.prototype.clippedInvContactDotSuspension;
 /** @type {number} */
CANNON.IWheelInfoOptions.prototype.suspensionRelativeVelocity;
 /** @type {number} */
CANNON.IWheelInfoOptions.prototype.suspensionForce;
 /** @type {number} */
CANNON.IWheelInfoOptions.prototype.skidInfo;
 /** @type {number} */
CANNON.IWheelInfoOptions.prototype.suspensionLength;
 /** @type {number} */
CANNON.IWheelInfoOptions.prototype.maxSuspensionTravel;
 /** @type {boolean} */
CANNON.IWheelInfoOptions.prototype.useCustomSlidingRotationalSpeed;
 /** @type {number} */
CANNON.IWheelInfoOptions.prototype.customSlidingRotationalSpeed;
 /** @type {!CANNON.Vec3} */
CANNON.IWheelInfoOptions.prototype.position;
 /** @type {!CANNON.Vec3} */
CANNON.IWheelInfoOptions.prototype.direction;
 /** @type {!CANNON.Vec3} */
CANNON.IWheelInfoOptions.prototype.axis;
 /** @type {!CANNON.Body} */
CANNON.IWheelInfoOptions.prototype.body;

/**
 * @constructor
 * @struct
 * @param {!CANNON.IWheelInfoOptions=} options
 */
CANNON.WheelInfo = function(options) {};
 /** @type {number} */
CANNON.WheelInfo.prototype.maxSuspensionTravbel;
 /** @type {number} */
CANNON.WheelInfo.prototype.customSlidingRotationalSpeed;
 /** @type {boolean} */
CANNON.WheelInfo.prototype.useCustomSlidingRotationalSpeed;
 /** @type {boolean} */
CANNON.WheelInfo.prototype.sliding;
 /** @type {!CANNON.Vec3} */
CANNON.WheelInfo.prototype.chassisConnectionPointLocal;
 /** @type {!CANNON.Vec3} */
CANNON.WheelInfo.prototype.chassisConnectionPointWorld;
 /** @type {!CANNON.Vec3} */
CANNON.WheelInfo.prototype.directionLocal;
 /** @type {!CANNON.Vec3} */
CANNON.WheelInfo.prototype.directionWorld;
 /** @type {!CANNON.Vec3} */
CANNON.WheelInfo.prototype.axleLocal;
 /** @type {!CANNON.Vec3} */
CANNON.WheelInfo.prototype.axleWorld;
 /** @type {number} */
CANNON.WheelInfo.prototype.suspensionRestLength;
 /** @type {number} */
CANNON.WheelInfo.prototype.suspensionMaxLength;
 /** @type {number} */
CANNON.WheelInfo.prototype.radius;
 /** @type {number} */
CANNON.WheelInfo.prototype.suspensionStiffness;
 /** @type {number} */
CANNON.WheelInfo.prototype.dampingCompression;
 /** @type {number} */
CANNON.WheelInfo.prototype.dampingRelaxation;
 /** @type {number} */
CANNON.WheelInfo.prototype.frictionSlip;
 /** @type {number} */
CANNON.WheelInfo.prototype.steering;
 /** @type {number} */
CANNON.WheelInfo.prototype.rotation;
 /** @type {number} */
CANNON.WheelInfo.prototype.deltaRotation;
 /** @type {number} */
CANNON.WheelInfo.prototype.rollInfluence;
 /** @type {number} */
CANNON.WheelInfo.prototype.maxSuspensionForce;
 /** @type {number} */
CANNON.WheelInfo.prototype.engineForce;
 /** @type {number} */
CANNON.WheelInfo.prototype.brake;
 /** @type {boolean} */
CANNON.WheelInfo.prototype.isFrontWheel;
 /** @type {number} */
CANNON.WheelInfo.prototype.clippedInvContactDotSuspension;
 /** @type {number} */
CANNON.WheelInfo.prototype.suspensionRelativeVelocity;
 /** @type {number} */
CANNON.WheelInfo.prototype.suspensionForce;
 /** @type {number} */
CANNON.WheelInfo.prototype.skidInfo;
 /** @type {number} */
CANNON.WheelInfo.prototype.suspensionLength;
 /** @type {number} */
CANNON.WheelInfo.prototype.sideImpulse;
 /** @type {number} */
CANNON.WheelInfo.prototype.forwardImpulse;
 /** @type {!CANNON.RaycastResult} */
CANNON.WheelInfo.prototype.raycastResult;
 /** @type {!CANNON.Transform} */
CANNON.WheelInfo.prototype.worldTransform;
 /** @type {boolean} */
CANNON.WheelInfo.prototype.isInContact;

/**
 * @constructor
 * @struct
 * @param {!CANNON.IRaycastVehicleOptions=} options
 */
CANNON.RaycastVehicle = function(options) {};
 /** @type {!CANNON.Body} */
CANNON.RaycastVehicle.prototype.chassisBody;
 /** @type {!Array<!CANNON.IWheelInfoOptions>} */
CANNON.RaycastVehicle.prototype.wheelInfos;
 /** @type {boolean} */
CANNON.RaycastVehicle.prototype.sliding;
 /** @type {!CANNON.World} */
CANNON.RaycastVehicle.prototype.world;
 /** @type {number} */
CANNON.RaycastVehicle.prototype.iindexRightAxis;
 /** @type {number} */
CANNON.RaycastVehicle.prototype.indexForwardAxis;
 /** @type {number} */
CANNON.RaycastVehicle.prototype.indexUpAxis;

/**
 * @param {!CANNON.IWheelInfoOptions=} options
 * @return {void}
 */
CANNON.RaycastVehicle.prototype.addWheel = function(options) {};

/**
 * @param {number} value
 * @param {number} wheelIndex
 * @return {void}
 */
CANNON.RaycastVehicle.prototype.setSteeringValue = function(value, wheelIndex) {};

/**
 * @param {number} value
 * @param {number} wheelIndex
 * @return {void}
 */
CANNON.RaycastVehicle.prototype.applyEngineForce = function(value, wheelIndex) {};

/**
 * @param {number} brake
 * @param {number} wheelIndex
 * @return {void}
 */
CANNON.RaycastVehicle.prototype.setBrake = function(brake, wheelIndex) {};

/**
 * @param {!CANNON.World} world
 * @return {void}
 */
CANNON.RaycastVehicle.prototype.addToWorld = function(world) {};

/**
 * @param {number} axisIndex
 * @param {!CANNON.Vec3} result
 * @return {!CANNON.Vec3}
 */
CANNON.RaycastVehicle.prototype.getVehicleAxisWorld = function(axisIndex, result) {};

/**
 * @param {number} timeStep
 * @return {void}
 */
CANNON.RaycastVehicle.prototype.updateVehicle = function(timeStep) {};

/**
 * @param {number} deltaTime
 * @return {void}
 */
CANNON.RaycastVehicle.prototype.updateSuspension = function(deltaTime) {};

/**
 * @param {!CANNON.World} world
 * @return {void}
 */
CANNON.RaycastVehicle.prototype.removeFromWorld = function(world) {};

/**
 * @param {number} wheelIndex
 * @return {!CANNON.Transform}
 */
CANNON.RaycastVehicle.prototype.getWheelTransformWorld = function(wheelIndex) {};
/**
 * @record
 * @struct
 */
CANNON.IRigidVehicleOptions = function() {};
 /** @type {!CANNON.Body} */
CANNON.IRigidVehicleOptions.prototype.chassisBody;

/**
 * @constructor
 * @struct
 * @param {!CANNON.IRigidVehicleOptions=} options
 */
CANNON.RigidVehicle = function(options) {};
 /** @type {!Array<!CANNON.Body>} */
CANNON.RigidVehicle.prototype.wheelBodies;
 /** @type {!CANNON.Vec3} */
CANNON.RigidVehicle.prototype.coordinateSystem;
 /** @type {!CANNON.Body} */
CANNON.RigidVehicle.prototype.chassisBody;
 /** @type {!Array<!CANNON.Constraint>} */
CANNON.RigidVehicle.prototype.constraints;
 /** @type {!Array<!CANNON.Vec3>} */
CANNON.RigidVehicle.prototype.wheelAxes;
 /** @type {!Array<!CANNON.Vec3>} */
CANNON.RigidVehicle.prototype.wheelForces;

/**
 * @param {!CANNON.IWheelInfoOptions=} options
 * @return {!CANNON.Body}
 */
CANNON.RigidVehicle.prototype.addWheel = function(options) {};

/**
 * @param {number} value
 * @param {number} wheelIndex
 * @return {void}
 */
CANNON.RigidVehicle.prototype.setSteeringValue = function(value, wheelIndex) {};

/**
 * @param {number} value
 * @param {number} wheelIndex
 * @return {void}
 */
CANNON.RigidVehicle.prototype.setMotorSpeed = function(value, wheelIndex) {};

/**
 * @param {number} wheelIndex
 * @return {void}
 */
CANNON.RigidVehicle.prototype.disableMotor = function(wheelIndex) {};

/**
 * @param {number} value
 * @param {number} wheelIndex
 * @return {void}
 */
CANNON.RigidVehicle.prototype.setWheelForce = function(value, wheelIndex) {};

/**
 * @param {number} value
 * @param {number} wheelIndex
 * @return {void}
 */
CANNON.RigidVehicle.prototype.applyWheelForce = function(value, wheelIndex) {};

/**
 * @param {!CANNON.World} world
 * @return {void}
 */
CANNON.RigidVehicle.prototype.addToWorld = function(world) {};

/**
 * @param {!CANNON.World} world
 * @return {void}
 */
CANNON.RigidVehicle.prototype.removeFromWorld = function(world) {};

/**
 * @param {number} wheelIndex
 * @return {number}
 */
CANNON.RigidVehicle.prototype.getWheelSpeed = function(wheelIndex) {};
/**
 * @constructor
 * @struct
 */
CANNON.SPHSystem = function() {};
 /** @type {!Array<!CANNON.Particle>} */
CANNON.SPHSystem.prototype.particles;
 /** @type {number} */
CANNON.SPHSystem.prototype.density;
 /** @type {number} */
CANNON.SPHSystem.prototype.smoothingRadius;
 /** @type {number} */
CANNON.SPHSystem.prototype.speedOfSound;
 /** @type {number} */
CANNON.SPHSystem.prototype.viscosity;
 /** @type {number} */
CANNON.SPHSystem.prototype.eps;
 /** @type {!Array<number>} */
CANNON.SPHSystem.prototype.pressures;
 /** @type {!Array<number>} */
CANNON.SPHSystem.prototype.densities;
 /** @type {!Array<number>} */
CANNON.SPHSystem.prototype.neighbors;

/**
 * @param {!CANNON.Particle} particle
 * @return {void}
 */
CANNON.SPHSystem.prototype.add = function(particle) {};

/**
 * @param {!CANNON.Particle} particle
 * @return {void}
 */
CANNON.SPHSystem.prototype.remove = function(particle) {};

/**
 * @param {!CANNON.Particle} particle
 * @param {!Array<!CANNON.Particle>} neighbors
 * @return {void}
 */
CANNON.SPHSystem.prototype.getNeighbors = function(particle, neighbors) {};

/**
 * @return {void}
 */
CANNON.SPHSystem.prototype.update = function() {};

/**
 * @param {number} r
 * @return {number}
 */
CANNON.SPHSystem.prototype.w = function(r) {};

/**
 * @param {!CANNON.Vec3} rVec
 * @param {!CANNON.Vec3} resultVec
 * @return {void}
 */
CANNON.SPHSystem.prototype.gradw = function(rVec, resultVec) {};

/**
 * @param {number} r
 * @return {number}
 */
CANNON.SPHSystem.prototype.nablaw = function(r) {};
/**
 * @record
 * @struct
 */
CANNON.ISpringOptions = function() {};
 /** @type {number} */
CANNON.ISpringOptions.prototype.restLength;
 /** @type {number} */
CANNON.ISpringOptions.prototype.stiffness;
 /** @type {number} */
CANNON.ISpringOptions.prototype.damping;
 /** @type {!CANNON.Vec3} */
CANNON.ISpringOptions.prototype.worldAnchorA;
 /** @type {!CANNON.Vec3} */
CANNON.ISpringOptions.prototype.worldAnchorB;
 /** @type {!CANNON.Vec3} */
CANNON.ISpringOptions.prototype.localAnchorA;
 /** @type {!CANNON.Vec3} */
CANNON.ISpringOptions.prototype.localAnchorB;

/**
 * @constructor
 * @struct
 * @param {!CANNON.ISpringOptions=} options
 */
CANNON.Spring = function(options) {};
 /** @type {number} */
CANNON.Spring.prototype.restLength;
 /** @type {number} */
CANNON.Spring.prototype.stffness;
 /** @type {number} */
CANNON.Spring.prototype.damping;
 /** @type {!CANNON.Body} */
CANNON.Spring.prototype.bodyA;
 /** @type {!CANNON.Body} */
CANNON.Spring.prototype.bodyB;
 /** @type {!CANNON.Vec3} */
CANNON.Spring.prototype.localAnchorA;
 /** @type {!CANNON.Vec3} */
CANNON.Spring.prototype.localAnchorB;

/**
 * @param {!CANNON.Vec3} worldAnchorA
 * @return {void}
 */
CANNON.Spring.prototype.setWorldAnchorA = function(worldAnchorA) {};

/**
 * @param {!CANNON.Vec3} worldAnchorB
 * @return {void}
 */
CANNON.Spring.prototype.setWorldAnchorB = function(worldAnchorB) {};

/**
 * @param {!CANNON.Vec3} result
 * @return {void}
 */
CANNON.Spring.prototype.getWorldAnchorA = function(result) {};

/**
 * @param {!CANNON.Vec3} result
 * @return {void}
 */
CANNON.Spring.prototype.getWorldAnchorB = function(result) {};

/**
 * @return {void}
 */
CANNON.Spring.prototype.applyForce = function() {};

/**
 * @constructor
 * @struct
 * @param {!CANNON.Vec3} halfExtents
 */
CANNON.Box = function(halfExtents) {};
 /** @type {number} */
CANNON.Box.prototype.boundingSphereRadius;
 /** @type {boolean} */
CANNON.Box.prototype.collisionResponse;
 /** @type {!CANNON.Vec3} */
CANNON.Box.prototype.halfExtents;
 /** @type {!CANNON.ConvexPolyhedron} */
CANNON.Box.prototype.convexPolyhedronRepresentation;

/**
 * @param {!CANNON.Vec3} halfExtents
 * @param {number} mass
 * @param {!CANNON.Vec3} target
 * @return {void}
 */
CANNON.Box.calculateIntertia = function(halfExtents, mass, target) {};

/**
 * @return {void}
 */
CANNON.Box.prototype.updateConvexPolyhedronRepresentation = function() {};

/**
 * @param {number} mass
 * @param {!CANNON.Vec3=} target
 * @return {!CANNON.Vec3}
 */
CANNON.Box.prototype.calculateLocalInertia = function(mass, target) {};

/**
 * @param {boolean} sixTargetVectors
 * @param {!CANNON.Quaternion=} quat
 * @return {!Array<!CANNON.Vec3>}
 */
CANNON.Box.prototype.getSideNormals = function(sixTargetVectors, quat) {};

/**
 * @return {number}
 */
CANNON.Box.prototype.updateBoundingSphereRadius = function() {};

/**
 * @return {number}
 */
CANNON.Box.prototype.volume = function() {};

/**
 * @param {!CANNON.Vec3} pos
 * @param {!CANNON.Quaternion} quat
 * @param {!Function} callback
 * @return {void}
 */
CANNON.Box.prototype.forEachWorldCorner = function(pos, quat, callback) {};

/**
 * @constructor
 * @struct
 * @param {!Array<!CANNON.Vec3>=} points
 * @param {!Array<number>=} faces
 */
CANNON.ConvexPolyhedron = function(points, faces) {};
 /** @type {!Array<!CANNON.Vec3>} */
CANNON.ConvexPolyhedron.prototype.vertices;
 /** @type {!Array<!CANNON.Vec3>} */
CANNON.ConvexPolyhedron.prototype.worldVertices;
 /** @type {boolean} */
CANNON.ConvexPolyhedron.prototype.worldVerticesNeedsUpdate;
 /** @type {!Array<number>} */
CANNON.ConvexPolyhedron.prototype.faces;
 /** @type {!Array<!CANNON.Vec3>} */
CANNON.ConvexPolyhedron.prototype.faceNormals;
 /** @type {!Array<!CANNON.Vec3>} */
CANNON.ConvexPolyhedron.prototype.uniqueEdges;

/**
 * @param {!CANNON.Vec3} va
 * @param {!CANNON.Vec3} vb
 * @param {!CANNON.Vec3} vc
 * @param {!CANNON.Vec3} target
 * @return {void}
 */
CANNON.ConvexPolyhedron.computeNormal = function(va, vb, vc, target) {};

/**
 * @param {!CANNON.ConvexPolyhedron} hull
 * @param {!CANNON.Vec3} axis
 * @param {!CANNON.Vec3} pos
 * @param {!CANNON.Quaternion} quat
 * @param {!Array<number>} result
 * @return {void}
 */
CANNON.ConvexPolyhedron.project = function(hull, axis, pos, quat, result) {};

/**
 * @return {void}
 */
CANNON.ConvexPolyhedron.prototype.computeEdges = function() {};

/**
 * @return {void}
 */
CANNON.ConvexPolyhedron.prototype.computeNormals = function() {};

/**
 * @param {number} i
 * @param {!CANNON.Vec3} target
 * @return {!CANNON.Vec3}
 */
CANNON.ConvexPolyhedron.prototype.getFaceNormal = function(i, target) {};

/**
 * @param {!CANNON.Vec3} posA
 * @param {!CANNON.Quaternion} quatA
 * @param {!CANNON.Vec3} hullB
 * @param {!CANNON.Quaternion} quatB
 * @param {!CANNON.Vec3} separatingNormal
 * @param {number} minDist
 * @param {number} maxDist
 * @param {!Array<?>} result
 * @return {void}
 */
CANNON.ConvexPolyhedron.prototype.clipAgainstHull = function(posA, quatA, hullB, quatB, separatingNormal, minDist, maxDist, result) {};

/**
 * @param {!CANNON.ConvexPolyhedron} hullB
 * @param {!CANNON.Vec3} posA
 * @param {!CANNON.Quaternion} quatA
 * @param {!CANNON.Vec3} posB
 * @param {!CANNON.Quaternion} quatB
 * @param {!CANNON.Vec3} target
 * @param {!Array<?>} faceListA
 * @param {!Array<?>} faceListB
 * @return {boolean}
 */
CANNON.ConvexPolyhedron.prototype.findSaparatingAxis = function(hullB, posA, quatA, posB, quatB, target, faceListA, faceListB) {};

/**
 * @param {!CANNON.Vec3} axis
 * @param {!CANNON.ConvexPolyhedron} hullB
 * @param {!CANNON.Vec3} posA
 * @param {!CANNON.Quaternion} quatA
 * @param {!CANNON.Vec3} posB
 * @param {!CANNON.Quaternion} quatB
 * @return {number}
 */
CANNON.ConvexPolyhedron.prototype.testSepAxis = function(axis, hullB, posA, quatA, posB, quatB) {};

/**
 * @param {number} face_i
 * @return {number}
 */
CANNON.ConvexPolyhedron.prototype.getPlaneConstantOfFace = function(face_i) {};

/**
 * @param {!CANNON.Vec3} separatingNormal
 * @param {!CANNON.Vec3} posA
 * @param {!CANNON.Quaternion} quatA
 * @param {!Array<!CANNON.Vec3>} worldVertsB1
 * @param {number} minDist
 * @param {number} maxDist
 * @param {!Array<?>} result
 * @return {void}
 */
CANNON.ConvexPolyhedron.prototype.clipFaceAgainstHull = function(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result) {};

/**
 * @param {!Array<!CANNON.Vec3>} inVertices
 * @param {!Array<!CANNON.Vec3>} outVertices
 * @param {!CANNON.Vec3} planeNormal
 * @param {number} planeConstant
 * @return {!CANNON.Vec3}
 */
CANNON.ConvexPolyhedron.prototype.clipFaceAgainstPlane = function(inVertices, outVertices, planeNormal, planeConstant) {};

/**
 * @param {!CANNON.Vec3} position
 * @param {!CANNON.Quaternion} quat
 * @return {void}
 */
CANNON.ConvexPolyhedron.prototype.computeWorldVertices = function(position, quat) {};

/**
 * @param {!CANNON.Vec3} aabbmin
 * @param {!CANNON.Vec3} aabbmax
 * @return {void}
 */
CANNON.ConvexPolyhedron.prototype.computeLocalAABB = function(aabbmin, aabbmax) {};

/**
 * @param {!CANNON.Quaternion} quat
 * @return {void}
 */
CANNON.ConvexPolyhedron.prototype.computeWorldFaceNormals = function(quat) {};

/**
 * @param {!CANNON.Vec3} pos
 * @param {!CANNON.Quaternion} quat
 * @param {!CANNON.Vec3} min
 * @param {!CANNON.Vec3} max
 * @return {void}
 */
CANNON.ConvexPolyhedron.prototype.calculateWorldAABB = function(pos, quat, min, max) {};

/**
 * @param {!CANNON.Vec3} target
 * @return {!CANNON.Vec3}
 */
CANNON.ConvexPolyhedron.prototype.getAveragePointLocal = function(target) {};

/**
 * @param {!CANNON.Vec3} offset
 * @param {!CANNON.Quaternion} quat
 * @return {void}
 */
CANNON.ConvexPolyhedron.prototype.transformAllPoints = function(offset, quat) {};

/**
 * @param {!CANNON.Vec3} p
 * @return {boolean}
 */
CANNON.ConvexPolyhedron.prototype.pointIsInside = function(p) {};

/**
 * @constructor
 * @struct
 * @param {number} radiusTop
 * @param {number} radiusBottom
 * @param {number} height
 * @param {number} numSegments
 */
CANNON.Cylinder = function(radiusTop, radiusBottom, height, numSegments) {};
/**
 * @record
 * @struct
 */
CANNON.IHightfield = function() {};
 /** @type {number} */
CANNON.IHightfield.prototype.minValue;
 /** @type {number} */
CANNON.IHightfield.prototype.maxValue;
 /** @type {number} */
CANNON.IHightfield.prototype.elementSize;

/**
 * @constructor
 * @struct
 * @param {!Array<number>} data
 * @param {!CANNON.IHightfield=} options
 */
CANNON.Heightfield = function(data, options) {};
 /** @type {!Array<number>} */
CANNON.Heightfield.prototype.data;
 /** @type {number} */
CANNON.Heightfield.prototype.maxValue;
 /** @type {number} */
CANNON.Heightfield.prototype.minValue;
 /** @type {number} */
CANNON.Heightfield.prototype.elementSize;
 /** @type {boolean} */
CANNON.Heightfield.prototype.cacheEnabled;
 /** @type {!CANNON.ConvexPolyhedron} */
CANNON.Heightfield.prototype.pillarConvex;
 /** @type {!CANNON.Vec3} */
CANNON.Heightfield.prototype.pillarOffset;
 /** @type {number} */
CANNON.Heightfield.prototype.type;

/**
 * @return {void}
 */
CANNON.Heightfield.prototype.update = function() {};

/**
 * @return {void}
 */
CANNON.Heightfield.prototype.updateMinValue = function() {};

/**
 * @return {void}
 */
CANNON.Heightfield.prototype.updateMaxValue = function() {};

/**
 * @param {number} xi
 * @param {number} yi
 * @param {number} value
 * @return {void}
 */
CANNON.Heightfield.prototype.setHeightValueAtIndex = function(xi, yi, value) {};

/**
 * @param {number} iMinX
 * @param {number} iMinY
 * @param {number} iMaxX
 * @param {number} iMaxY
 * @param {!Array<?>} result
 * @return {void}
 */
CANNON.Heightfield.prototype.getRectMinMax = function(iMinX, iMinY, iMaxX, iMaxY, result) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {!Array<?>} result
 * @param {boolean} clamp
 * @return {boolean}
 */
CANNON.Heightfield.prototype.getIndexOfPosition = function(x, y, result, clamp) {};

/**
 * @param {number} xi
 * @param {number} yi
 * @param {boolean} getUpperTriangle
 * @return {void}
 */
CANNON.Heightfield.prototype.getConvexTrianglePillar = function(xi, yi, getUpperTriangle) {};
/**
 * @extends {CANNON.Shape}
 * @constructor
 * @struct
 */
CANNON.Particle = function() {};
/**
 * @extends {CANNON.Shape}
 * @constructor
 * @struct
 */
CANNON.Plane = function() {};
 /** @type {!CANNON.Vec3} */
CANNON.Plane.prototype.worldNormal;
 /** @type {boolean} */
CANNON.Plane.prototype.worldNormalNeedsUpdate;
 /** @type {number} */
CANNON.Plane.prototype.boundingSphereRadius;

/**
 * @param {!CANNON.Quaternion} quat
 * @return {void}
 */
CANNON.Plane.prototype.computeWorldNormal = function(quat) {};

/**
 * @param {!CANNON.Vec3} pos
 * @param {!CANNON.Quaternion} quat
 * @param {number} min
 * @param {number} max
 * @return {void}
 */
CANNON.Plane.prototype.calculateWorldAABB = function(pos, quat, min, max) {};
/**
 * @constructor
 * @struct
 */
CANNON.Shape = function() {};
 /** @type {{SPHERE: number, PLANE: number, BOX: number, COMPOUND: number, CONVEXPOLYHEDRON: number, HEIGHTFIELD: number, PARTICLE: number, CYLINDER: number}} */
CANNON.Shape.types;
 /** @type {number} */
CANNON.Shape.prototype.type;
 /** @type {number} */
CANNON.Shape.prototype.boundingSphereRadius;
 /** @type {boolean} */
CANNON.Shape.prototype.collisionResponse;

/**
 * @return {number}
 */
CANNON.Shape.prototype.updateBoundingSphereRadius = function() {};

/**
 * @return {number}
 */
CANNON.Shape.prototype.volume = function() {};

/**
 * @param {number} mass
 * @param {!CANNON.Vec3} target
 * @return {!CANNON.Vec3}
 */
CANNON.Shape.prototype.calculateLocalInertia = function(mass, target) {};

/**
 * @constructor
 * @struct
 * @param {number} radius
 */
CANNON.Sphere = function(radius) {};
 /** @type {number} */
CANNON.Sphere.prototype.radius;
/**
 * @extends {CANNON.Solver}
 * @constructor
 * @struct
 */
CANNON.GSSolver = function() {};
 /** @type {number} */
CANNON.GSSolver.prototype.iterations;
 /** @type {number} */
CANNON.GSSolver.prototype.tolerance;

/**
 * @param {number} dy
 * @param {!CANNON.World} world
 * @return {number}
 */
CANNON.GSSolver.prototype.solve = function(dy, world) {};
/**
 * @constructor
 * @struct
 */
CANNON.Solver = function() {};
 /** @type {number} */
CANNON.Solver.prototype.iterations;
 /** @type {!Array<!CANNON.Equation>} */
CANNON.Solver.prototype.equations;

/**
 * @param {number} dy
 * @param {!CANNON.World} world
 * @return {number}
 */
CANNON.Solver.prototype.solve = function(dy, world) {};

/**
 * @param {!CANNON.Equation} eq
 * @return {void}
 */
CANNON.Solver.prototype.addEquation = function(eq) {};

/**
 * @param {!CANNON.Equation} eq
 * @return {void}
 */
CANNON.Solver.prototype.removeEquation = function(eq) {};

/**
 * @return {void}
 */
CANNON.Solver.prototype.removeAllEquations = function() {};

/**
 * @constructor
 * @struct
 * @param {!CANNON.Solver} subsolver
 */
CANNON.SplitSolver = function(subsolver) {};
 /** @type {!CANNON.Solver} */
CANNON.SplitSolver.prototype.subsolver;

/**
 * @param {number} dy
 * @param {!CANNON.World} world
 * @return {number}
 */
CANNON.SplitSolver.prototype.solve = function(dy, world) {};
/**
 * @constructor
 * @struct
 */
CANNON.EventTarget = function() {};

/**
 * @param {string} type
 * @param {!Function} listener
 * @return {!CANNON.EventTarget}
 */
CANNON.EventTarget.prototype.addEventListener = function(type, listener) {};

/**
 * @param {string} type
 * @param {!Function} listener
 * @return {boolean}
 */
CANNON.EventTarget.prototype.hasEventListener = function(type, listener) {};

/**
 * @param {string} type
 * @param {!Function} listener
 * @return {!CANNON.EventTarget}
 */
CANNON.EventTarget.prototype.removeEventListener = function(type, listener) {};

/**
 * @param {!CANNON.IEvent} event
 * @return {!CANNON.IEvent}
 */
CANNON.EventTarget.prototype.dispatchEvent = function(event) {};
/**
 * @constructor
 * @struct
 */
CANNON.Pool = function() {};
 /** @type {!Array<?>} */
CANNON.Pool.prototype.objects;
 /** @type {!Array<?>} */
CANNON.Pool.prototype.type;

/**
 * @return {?}
 */
CANNON.Pool.prototype.release = function() {};

/**
 * @return {?}
 */
CANNON.Pool.prototype.get = function() {};

/**
 * @return {?}
 */
CANNON.Pool.prototype.constructObject = function() {};
/**
 * @constructor
 * @struct
 */
CANNON.TupleDictionary = function() {};
 /** @type {{keys: !Array<?>}} */
CANNON.TupleDictionary.prototype.data;

/**
 * @param {number} i
 * @param {number} j
 * @return {number}
 */
CANNON.TupleDictionary.prototype.get = function(i, j) {};

/**
 * @param {number} i
 * @param {number} j
 * @param {number} value
 * @return {void}
 */
CANNON.TupleDictionary.prototype.set = function(i, j, value) {};

/**
 * @return {void}
 */
CANNON.TupleDictionary.prototype.reset = function() {};
/**
 * @constructor
 * @struct
 */
CANNON.Utils = function() {};

/**
 * @param {?=} options
 * @param {?=} defaults
 * @return {?}
 */
CANNON.Utils.defaults = function(options, defaults) {};
/**
 * @extends {CANNON.Pool}
 * @constructor
 * @struct
 */
CANNON.Vec3Pool = function() {};
 /** @type {?} */
CANNON.Vec3Pool.prototype.type;

/**
 * @return {!CANNON.Vec3}
 */
CANNON.Vec3Pool.prototype.constructObject = function() {};
/**
 * @constructor
 * @struct
 */
CANNON.NarrowPhase = function() {};
 /** @type {!Array<!CANNON.Pool>} */
CANNON.NarrowPhase.prototype.contactPointPool;
 /** @type {!CANNON.Vec3Pool} */
CANNON.NarrowPhase.prototype.v3pool;
/**
 * @extends {CANNON.EventTarget}
 * @constructor
 * @struct
 */
CANNON.World = function() {};
 /** @type {number} */
CANNON.World.prototype.dt;
 /** @type {boolean} */
CANNON.World.prototype.allowSleep;
 /** @type {!Array<!CANNON.ContactEquation>} */
CANNON.World.prototype.contacts;
 /** @type {!Array<!CANNON.FrictionEquation>} */
CANNON.World.prototype.frictionEquations;
 /** @type {number} */
CANNON.World.prototype.quatNormalizeSkip;
 /** @type {boolean} */
CANNON.World.prototype.quatNormalizeFast;
 /** @type {number} */
CANNON.World.prototype.time;
 /** @type {number} */
CANNON.World.prototype.stepnumber;
 /** @type {number} */
CANNON.World.prototype.default_dt;
 /** @type {number} */
CANNON.World.prototype.nextId;
 /** @type {!CANNON.Vec3} */
CANNON.World.prototype.gravity;
 /** @type {!CANNON.NaiveBroadphase} */
CANNON.World.prototype.broadphase;
 /** @type {!Array<!CANNON.Body>} */
CANNON.World.prototype.bodies;
 /** @type {!CANNON.Solver} */
CANNON.World.prototype.solver;
 /** @type {!Array<!CANNON.Constraint>} */
CANNON.World.prototype.constraints;
 /** @type {!CANNON.NarrowPhase} */
CANNON.World.prototype.narrowPhase;
 /** @type {!CANNON.ArrayCollisionMatrix} */
CANNON.World.prototype.collisionMatrix;
 /** @type {!CANNON.ArrayCollisionMatrix} */
CANNON.World.prototype.collisionMatrixPrevious;
 /** @type {!Array<!CANNON.Material>} */
CANNON.World.prototype.materials;
 /** @type {!Array<!CANNON.ContactMaterial>} */
CANNON.World.prototype.contactmaterials;
 /** @type {!CANNON.TupleDictionary} */
CANNON.World.prototype.contactMaterialTable;
 /** @type {!CANNON.Material} */
CANNON.World.prototype.defaultMaterial;
 /** @type {!CANNON.ContactMaterial} */
CANNON.World.prototype.defaultContactMaterial;
 /** @type {boolean} */
CANNON.World.prototype.doProfiling;
 /** @type {{solve: number, makeContactConstraints: number, broadphaser: number, integrate: number, narrowphase: number}} */
CANNON.World.prototype.profile;
 /** @type {!Array<?>} */
CANNON.World.prototype.subsystems;
 /** @type {!CANNON.IBodyEvent} */
CANNON.World.prototype.addBodyEvent;
 /** @type {!CANNON.IBodyEvent} */
CANNON.World.prototype.removeBodyEvent;

/**
 * @param {!CANNON.Material} m1
 * @param {!CANNON.Material} m2
 * @return {!CANNON.ContactMaterial}
 */
CANNON.World.prototype.getContactMaterial = function(m1, m2) {};

/**
 * @return {number}
 */
CANNON.World.prototype.numObjects = function() {};

/**
 * @return {void}
 */
CANNON.World.prototype.collisionMatrixTick = function() {};

/**
 * @param {!CANNON.Body} body
 * @return {void}
 */
CANNON.World.prototype.addBody = function(body) {};

/**
 * @param {!CANNON.Constraint} c
 * @return {void}
 */
CANNON.World.prototype.addConstraint = function(c) {};

/**
 * @param {!CANNON.Constraint} c
 * @return {void}
 */
CANNON.World.prototype.removeConstraint = function(c) {};

/**
 * @param {!CANNON.Vec3} from
 * @param {!CANNON.Vec3} to
 * @param {!CANNON.RaycastResult} result
 * @return {void}
 */
CANNON.World.prototype.rayTest = function(from, to, result) {};

/**
 * @param {!CANNON.Body} body
 * @return {void}
 */
CANNON.World.prototype.remove = function(body) {};

/**
 * @param {!CANNON.Material} m
 * @return {void}
 */
CANNON.World.prototype.addMaterial = function(m) {};

/**
 * @param {!CANNON.ContactMaterial} cmat
 * @return {void}
 */
CANNON.World.prototype.addContactMaterial = function(cmat) {};

/**
 * @param {number} dy
 * @param {number=} timeSinceLastCalled
 * @param {number=} maxSubSteps
 * @return {void}
 */
CANNON.World.prototype.step = function(dy, timeSinceLastCalled, maxSubSteps) {};
/**
 * @record
 * @struct
 */
CANNON.IEvent = function() {};
 /** @type {string} */
CANNON.IEvent.prototype.type;
/**
 * @extends {CANNON.IEvent}
 * @record
 * @struct
 */
CANNON.IBodyEvent = function() {};
 /** @type {!CANNON.Body} */
CANNON.IBodyEvent.prototype.body;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "cannon"
/** @const */
tsickle_declare_module.cannon = {};

/* TODO: ExportAssignment in tsickle_declare_module.cannon */
