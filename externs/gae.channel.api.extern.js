/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/gae.channel.api/index.d.ts:
/** @const */
var goog = {};
/** @const */
goog.appengine = {};

/**
 * @constructor
 * @struct
 * Create a channel object using the token returned by the createChannel() call on the server.
 * @param {string} token {string}
 */
goog.appengine.Channel = function(token) {};

/**
 * Open a socket on this channel. open() returns a goog.appengine.Socket object.
 * You can set the callback properties directly on the returned socket object or set them using an optional object handler with the following properties:
 * onopen, onmessage, onerror, onclose .
 * If the token specified during channel creation is invalid or expired then the onerror and onclose callbacks will be called.
 * The code field for the error object will be 401 (Unauthorized) and the description field will be 'Invalid+token.' or 'Token+timed+out.' respectively.
 * The onerror callback is also called asynchronously whenever the token for the channel expires.
 * An onerror call is always followed by an onclose call and the channel object will have to be recreated after this event.
 * @param {!Function=} handler
 * @return {!goog.appengine.Socket}
 */
goog.appengine.Channel.prototype.open = function(handler) {};
/**
 * @constructor
 * @struct
 */
goog.appengine.Socket = function() {};
 /** @type {function(): void} */
goog.appengine.Socket.prototype.onopen;
 /** @type {function(?): void} */
goog.appengine.Socket.prototype.onmessage;
 /** @type {!Function} */
goog.appengine.Socket.prototype.onerror;
 /** @type {function(): void} */
goog.appengine.Socket.prototype.onclose;

/**
 * Close the socket.
 * The socket cannot be used again after calling close; the server must create a new socket.
 * @return {void}
 */
goog.appengine.Socket.prototype.close = function() {};
