/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/egg/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {?} ctx
 */
function BaseContextClass(ctx) {}
 /** @type {?} */
BaseContextClass.prototype.ctx;
 /** @type {?} */
BaseContextClass.prototype.app;
 /** @type {?} */
BaseContextClass.prototype.config;
 /** @type {?} */
BaseContextClass.prototype.service;
/**
 * @record
 * @struct
 */
function Logger() {}

/**
 * @param {string} info
 * @param {...string} args
 * @return {void}
 */
Logger.prototype.info = function(info, args) {};

/**
 * @param {string} info
 * @param {...string} args
 * @return {void}
 */
Logger.prototype.warn = function(info, args) {};

/**
 * @param {string} info
 * @param {...string} args
 * @return {void}
 */
Logger.prototype.debug = function(info, args) {};

/**
 * @param {string} info
 * @param {...string} args
 * @return {void}
 */
Logger.prototype.error = function(info, args) {};
/**
 * @extends {Application.Request}
 * @record
 * @struct
 */
function Request() {}
 /** @type {boolean} */
Request.prototype.acceptJSON;
 /** @type {string} */
Request.prototype.ip;
 /** @type {!Array<string>} */
Request.prototype.ips;
 /** @type {string} */
Request.prototype.protocol;
 /** @type {?} */
Request.prototype.queries;
 /** @type {?} */
Request.prototype.query;
/**
 * @extends {Application.Response}
 * @record
 * @struct
 */
function Response() {}
 /** @type {number} */
Response.prototype.realStatus;
/**
 * @record
 * @struct
 */
function ContextView() {}

/**
 * Render a file by view engine
 * @param {string} name
 * @param {?} locals
 * @param {?=} options
 * @return {!Promise<string>}
 */
ContextView.prototype.render = function(name, locals, options) {};

/**
 * Render a template string by view engine
 * @param {string} name
 * @param {?} locals
 * @param {?=} options
 * @return {!Promise<string>}
 */
ContextView.prototype.renderString = function(name, locals, options) {};

/** @typedef {string} */
var LoggerLevel;
/**
 * @record
 * @struct
 */
function EggAppConfig() {}
 /** @type {number} */
EggAppConfig.prototype.workerStartTimeout;
 /** @type {string} */
EggAppConfig.prototype.baseDir;
 /** @type {?} */
EggAppConfig.prototype.bodyParser;
 /** @type {?} */
EggAppConfig.prototype.logger;
 /** @type {?} */
EggAppConfig.prototype.httpclient;
 /** @type {?} */
EggAppConfig.prototype.development;
 /** @type {?} */
EggAppConfig.prototype.dump;
 /** @type {string} */
EggAppConfig.prototype.env;
 /** @type {string} */
EggAppConfig.prototype.HOME;
 /** @type {string} */
EggAppConfig.prototype.hostHeaders;
 /** @type {?} */
EggAppConfig.prototype.i18n;
 /** @type {string} */
EggAppConfig.prototype.ipHeaders;
 /** @type {?} */
EggAppConfig.prototype.jsonp;
 /** @type {string} */
EggAppConfig.prototype.keys;
 /** @type {string} */
EggAppConfig.prototype.name;
 /** @type {?} */
EggAppConfig.prototype.pkg;
 /** @type {string} */
EggAppConfig.prototype.rundir;
 /** @type {?} */
EggAppConfig.prototype.security;
 /** @type {?} */
EggAppConfig.prototype.siteFile;
 /** @type {?} */
EggAppConfig.prototype.static;
 /** @type {?} */
EggAppConfig.prototype.view;
 /** @type {?} */
EggAppConfig.prototype.watcher;
/**
 * @record
 * @struct
 */
function Router() {}

/**
 * restful router api
 * @param {string} name
 * @param {string} prefix
 * @param {?} middleware
 * @return {?}
 */
Router.prototype.resources = function(name, prefix, middleware) {};

/**
 * \@example 
 * ```js
 * router.url('edit_post', { id: 1, name: 'foo', page: 2 })
 * => /posts/1/edit?name=foo&page=2
 * router.url('posts', { name: 'foo&1', page: 2 })
 * => /posts?name=foo%261&page=2
 * ```
 * \@since 1.0.0
 * @param {string} name
 * @param {?} params
 * @return {?}
 */
Router.prototype.url = function(name, params) {};
/**
 * @record
 * @struct
 */
function EggApplication() {}
 /** @type {string} */
EggApplication.prototype.baseDir;
 /** @type {?} */
EggApplication.prototype.config;
 /** @type {string} */
EggApplication.prototype.env;
 /** @type {?} */
EggApplication.prototype.coreLogger;
 /** @type {?} */
EggApplication.prototype.deprecate;
 /** @type {?} */
EggApplication.prototype.httpclient;
 /** @type {?} */
EggApplication.prototype.loader;
 /** @type {?} */
EggApplication.prototype.logger;
 /** @type {!Object<string,?>} */
EggApplication.prototype.loggers;
 /** @type {?} */
EggApplication.prototype.messenger;
 /** @type {?} */
EggApplication.prototype.plugins;
 /** @type {?} */
EggApplication.prototype.router;
 /** @type {?} */
EggApplication.prototype.Service;
 /** @type {string} */
EggApplication.prototype.type;

/**
 * create a singleton instance
 * @param {string} name
 * @param {?} create
 * @return {void}
 */
EggApplication.prototype.addSingleton = function(name, create) {};

/**
 * Excute scope after loaded and before app start
 * @param {function(): void} scrope
 * @return {void}
 */
EggApplication.prototype.beforeStart = function(scrope) {};

/**
 * Close all, it wil close
 * - callbacks registered by beforeClose
 * - emit `close` event
 * - remove add listeners
 * 
 * If error is thrown when it's closing, the promise will reject.
 * It will also reject after following call.
 * \@since 1.0.0
 * @return {!Promise<?>}
 */
EggApplication.prototype.close = function() {};

/**
 * http request helper base on httpclient, it will auto save httpclient log.
 * Keep the same api with httpclient.request(url, args).
 * See https://github.com/node-modules/urllib#api-doc for more details.
 * @param {string} url
 * @param {?} opt
 * @return {!Promise<?>}
 */
EggApplication.prototype.curl = function(url, opt) {};

/**
 * Get logger by name, it's equal to app.loggers['name'], but you can extend it with your own logical
 * @param {string} name
 * @return {?}
 */
EggApplication.prototype.getLogger = function(name) {};

/**
 * print the infomation when console.log(app)
 * @return {?}
 */
EggApplication.prototype.inspect = function() {};

/**
 * Alias to Router#url
 * @param {string} name
 * @param {?} params
 * @return {?}
 */
EggApplication.prototype.url = function(name, params) {};
/**
 * @extends {EggApplication}
 * @record
 * @struct
 */
function Application() {}
 /** @type {?} */
Application.prototype.locals;
 /** @type {?} */
Application.prototype.controller;
 /** @type {?} */
Application.prototype.Controller;

/**
 * HTTP get method
 * @param {string} path
 * @param {...string|?} fn_or_middleware
 * @return {void}
 */
Application.prototype.get = function(path, fn_or_middleware) {};

/**
 * HTTP post method
 * @param {string} path
 * @param {...string|?} fn_or_middleware
 * @return {void}
 */
Application.prototype.post = function(path, fn_or_middleware) {};

/**
 * HTTP put method
 * @param {string} path
 * @param {...string|?} fn_or_middleware
 * @return {void}
 */
Application.prototype.put = function(path, fn_or_middleware) {};

/**
 * HTTP delete method
 * @param {string} path
 * @param {...string|?} fn_or_middleware
 * @return {void}
 */
Application.prototype.delete = function(path, fn_or_middleware) {};

/**
 * restful router api
 * @param {string} name
 * @param {string} prefix
 * @param {string} fn
 * @return {?}
 */
Application.prototype.resources = function(name, prefix, fn) {};

/**
 * @param {string} path
 * @param {string} redirectPath
 * @return {void}
 */
Application.prototype.redirect = function(path, redirectPath) {};
/**
 * @record
 * @struct
 */
function FileStream() {}
 /** @type {?} */
FileStream.prototype.fields;
/**
 * @extends {Application.Context}
 * @record
 * @struct
 */
function Context() {}
 /** @type {?} */
Context.prototype.app;
 /** @type {?} */
Context.prototype.service;
 /** @type {?} */
Context.prototype.request;
 /** @type {?} */
Context.prototype.response;
 /** @type {?} */
Context.prototype.params;
 /** @type {?} */
Context.prototype.queries;
 /** @type {!accepts.Accepts} */
Context.prototype.accept;
 /** @type {boolean} */
Context.prototype.acceptJSON;
 /** @type {string} */
Context.prototype.ip;
 /** @type {number} */
Context.prototype.realStatus;
 /** @type {?} */
Context.prototype.data;
 /** @type {?} */
Context.prototype.meta;
 /** @type {?} */
Context.prototype.locals;
 /** @type {?} */
Context.prototype.state;
 /** @type {?} */
Context.prototype.logger;
 /** @type {number} */
Context.prototype.starttime;
 /** @type {?} */
Context.prototype.view;

/**
 * http request helper base on httpclient, it will auto save httpclient log.
 * Keep the same api with httpclient.request(url, args).
 * See https://github.com/node-modules/urllib#api-doc for more details.
 * @param {string} url
 * @param {?} opt
 * @return {!Promise<?>}
 */
Context.prototype.curl = function(url, opt) {};

/**
 * Render a file by view engine
 * @param {string} name
 * @param {?} locals
 * @param {?=} options
 * @return {!Promise<string>}
 */
Context.prototype.render = function(name, locals, options) {};

/**
 * Render a template string by view engine
 * @param {string} name
 * @param {?} locals
 * @param {?=} options
 * @return {!Promise<string>}
 */
Context.prototype.renderString = function(name, locals, options) {};

/**
 * @param {string} key
 * @param {...string} values
 * @return {string}
 */
Context.prototype.__ = function(key, values) {};

/**
 * @param {string} key
 * @param {...string} values
 * @return {string}
 */
Context.prototype.gettext = function(key, values) {};

/**
 * get upload file stream
 * \@example 
 * ```js
 * const stream = yield this.getFileStream();
 * // get other fields
 * console.log(stream.fields);
 * ```
 * \@method Context#getFileStream
 * \@since 1.0.0
 * @return {!Promise<?>}
 */
Context.prototype.getFileStream = function() {};

/**
 * @see Responce.redirect
 * @param {string} url
 * @param {string=} alt
 * @return {void}
 */
Context.prototype.redirect = function(url, alt) {};
/**
 * @constructor
 * @struct
 */
function Controller() {}
/**
 * @constructor
 * @struct
 */
function Service() {}
/**
 * @record
 * @struct
 */
function IService() {}
/**
 * @record
 * @struct
 */
function IController() {}
