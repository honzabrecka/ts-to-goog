/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/nodemailer/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */
/**
 * @record
 * @struct
 */
function Plugin() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function Transporter() {}

/**
 * Send a mail with callback
 * Send a mail
 * return Promise
 * @param {?} mail
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
Transporter.prototype.sendMail = function(mail, callback) {};

/**
 * Attach a plugin. 'compile' and 'stream' plugins can be attached with use(plugin) method
 * 
 * @param {string} step is a string, either 'compile' or 'stream' thatd defines when the plugin should be hooked
 * @param {?} plugin
 * @return {void}
 */
Transporter.prototype.use = function(step, plugin) {};

/**
 * Verifies connection with server
 * Verifies connection with server
 * @param {?=} callback
 * @return {void|!Promise<void>}
 */
Transporter.prototype.verify = function(callback) {};

/**
 * Close all connections
 * @return {void}
 */
Transporter.prototype.close = function() {};

/**
 * Create a direct transporter
 * Create an SMTP transporter
 * Create an SMTP transporter using a connection url
 * Create an AWS SES transporter
 * Create a transporter from a given implementation
 * @param {!directTransport.DirectOptions|!smtpTransport.SmtpOptions|string|!sesTransport.SesOptions|?=} options_or_connectionUrl_or_transport
 * @param {!Object=} defaults
 * @return {?}
 */
function createTransport(options_or_connectionUrl_or_transport, defaults) {}
/**
 * @record
 * @struct
 */
function AttachmentObject() {}
 /** @type {string} */
AttachmentObject.prototype.filename;
 /** @type {string} */
AttachmentObject.prototype.cid;
 /** @type {string} */
AttachmentObject.prototype.path;
 /** @type {(string|?|!NodeJS.ReadableStream)} */
AttachmentObject.prototype.content;
 /** @type {string} */
AttachmentObject.prototype.encoding;
 /** @type {string} */
AttachmentObject.prototype.contentType;
 /** @type {string} */
AttachmentObject.prototype.contentDisposition;
/**
 * @record
 * @struct
 */
function SendMailOptions() {}
 /** @type {string} */
SendMailOptions.prototype.from;
 /** @type {string} */
SendMailOptions.prototype.sender;
 /** @type {(string|!Array<string>)} */
SendMailOptions.prototype.to;
 /** @type {(string|!Array<string>)} */
SendMailOptions.prototype.cc;
 /** @type {(string|!Array<string>)} */
SendMailOptions.prototype.bcc;
 /** @type {string} */
SendMailOptions.prototype.replyTo;
 /** @type {string} */
SendMailOptions.prototype.inReplyTo;
 /** @type {(string|!Array<string>)} */
SendMailOptions.prototype.references;
 /** @type {string} */
SendMailOptions.prototype.subject;
 /** @type {(string|?|!NodeJS.ReadableStream)} */
SendMailOptions.prototype.text;
 /** @type {(string|?|!NodeJS.ReadableStream)} */
SendMailOptions.prototype.html;
 /** @type {?} */
SendMailOptions.prototype.headers;
 /** @type {!Array<?>} */
SendMailOptions.prototype.attachments;
 /** @type {!Array<?>} */
SendMailOptions.prototype.alternatives;
 /** @type {string} */
SendMailOptions.prototype.messageId;
 /** @type {!Date} */
SendMailOptions.prototype.date;
 /** @type {string} */
SendMailOptions.prototype.encoding;
/**
 * @record
 * @struct
 */
function SentMessageInfo() {}
 /** @type {string} */
SentMessageInfo.prototype.messageId;
 /** @type {?} */
SentMessageInfo.prototype.envelope;
 /** @type {!Array<string>} */
SentMessageInfo.prototype.accepted;
 /** @type {!Array<string>} */
SentMessageInfo.prototype.rejected;
 /** @type {!Array<string>} */
SentMessageInfo.prototype.pending;
 /** @type {string} */
SentMessageInfo.prototype.response;
/**
 * @record
 * @struct
 */
function Transport() {}
 /** @type {string} */
Transport.prototype.name;
 /** @type {string} */
Transport.prototype.version;

/**
 * @param {?} mail
 * @param {?=} callback
 * @return {void}
 */
Transport.prototype.send = function(mail, callback) {};

/**
 * @return {void}
 */
Transport.prototype.close = function() {};
