/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/maxmind/index.d.ts:

/**
 * @param {string} database
 * @param {function(!Error, !Reader): void|!Options} cb_or_opts
 * @param {function(!Error, !Reader): void=} cb
 * @return {void}
 */
function open(database, cb_or_opts, cb) {}

/**
 * @param {string} database
 * @param {!Options=} opts
 * @return {!Reader}
 */
function openSync(database, opts) {}

/**
 * @param {string} ip
 * @return {boolean}
 */
function validate(ip) {}
/**
 * @record
 * @struct
 */
function Reader() {}
 /** @type {!Metadata} */
Reader.prototype.metadata;

/**
 * @param {string} ip
 * @return {!Response}
 */
Reader.prototype.get = function(ip) {};
/**
 * @record
 * @struct
 */
function Options() {}
 /** @type {{max: number, maxAge: number}} */
Options.prototype.cache;
/**
 * @record
 * @struct
 */
function Metadata() {}
 /** @type {number} */
Metadata.prototype.binaryFormatMajorVersion;
 /** @type {number} */
Metadata.prototype.binaryFormatMinorVersion;
 /** @type {!Date} */
Metadata.prototype.buildEpoch;
 /** @type {string} */
Metadata.prototype.databaseType;
 /** @type {!Array<string>} */
Metadata.prototype.languages;
 /** @type {!Translations} */
Metadata.prototype.description;
 /** @type {number} */
Metadata.prototype.ipVersion;
 /** @type {number} */
Metadata.prototype.nodeCount;
 /** @type {number} */
Metadata.prototype.recordSize;
 /** @type {number} */
Metadata.prototype.nodeByteSize;
 /** @type {number} */
Metadata.prototype.searchTreeSize;
 /** @type {number} */
Metadata.prototype.treeDepth;
/**
 * @record
 * @struct
 */
function Response() {}
 /** @type {{geoname_id: number, names: !Translations, code: string}} */
Response.prototype.continent;
 /** @type {{geoname_id: number, names: !Translations, iso_code: string}} */
Response.prototype.country;
 /** @type {{geoname_id: number, names: !Translations, iso_code: string}} */
Response.prototype.registered_country;
 /** @type {{accuracy_radius: number, latitude: number, longitude: number, metro_code: number, time_zone: string}} */
Response.prototype.location;
 /** @type {!Array<{geoname_id: number, names: !Translations, iso_code: string}>} */
Response.prototype.subdivisions;
 /** @type {{geoname_id: number, names: !Translations}} */
Response.prototype.city;
 /** @type {{code: string}} */
Response.prototype.postal;
/**
 * @record
 * @struct
 */
function Translations() {}

/* TODO: IndexSignature:  */
