/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/log4js/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/**
 * Replaces the console
 * @param {?=} logger
 * @return {void} void
 */
function replaceConsole(logger) {}

/**
 * Restores the console
 * @return {void} void
 */
function restoreConsole() {}

/**
 * Get a logger instance. Instance is cached on categoryName level.
 * 
 * @param {string=} categoryName
 * @return {?}
 */
function getLogger(categoryName) {}

/**
 * @param {string=} categoryName
 * @return {?}
 */
function getBufferedLogger(categoryName) {}

/**
 * Has a logger instance cached on categoryName.
 * 
 * @param {string} categoryName
 * @return {boolean}
 */
function hasLogger(categoryName) {}

/**
 * Get the default logger instance.
 * 
 * @return {?}
 */
function getDefaultLogger() {}

/**
 * args are appender, then zero or more categories
 * 
 * @param {...?} appenders
 * @return {void}
 */
function addAppender(appenders) {}

/**
 * Load appender
 * 
 * @param {string} appenderType
 * @param {?=} appenderModule
 * @return {void}
 */
function loadAppender(appenderType, appenderModule) {}

/**
 * Claer configured appenders
 * 
 * @return {void}
 */
function clearAppenders() {}

/**
 * Shutdown all log appenders. This will first disable all writing to appenders
 * and then call the shutdown function each appender.
 * 
 * \@params {Function} cb - The callback to be invoked once all appenders have
 *  shutdown. If an error occurs, the callback will be given the error object
 *  as the first argument.
 * @param {!Function} cb
 * @return {void}
 */
function shutdown(cb) {}

/**
 * @param {string|?} filename_or_config
 * @param {?=} options
 * @return {void}
 */
function configure(filename_or_config, options) {}

/**
 * @param {string|?} level
 * @return {void}
 */
function setGlobalLogLevel(level) {}

/**
 * Create logger for connect middleware.
 * 
 * 
 * @param {?} logger
 * @param {?} options
 * @return {!e.Handler}
 */
function connectLogger(logger, options) {}
 /** @type {?} */
var layouts;
 /** @type {?} */
var appenders;
 /** @type {?} */
var levels;
/**
 * @record
 * @struct
 */
function Logger() {}

/**
 * @param {string|?} level
 * @return {void}
 */
Logger.prototype.setLevel = function(level) {};

/**
 * @param {?} level
 * @return {boolean}
 */
Logger.prototype.isLevelEnabled = function(level) {};

/**
 * @return {boolean}
 */
Logger.prototype.isTraceEnabled = function() {};

/**
 * @return {boolean}
 */
Logger.prototype.isDebugEnabled = function() {};

/**
 * @return {boolean}
 */
Logger.prototype.isInfoEnabled = function() {};

/**
 * @return {boolean}
 */
Logger.prototype.isWarnEnabled = function() {};

/**
 * @return {boolean}
 */
Logger.prototype.isErrorEnabled = function() {};

/**
 * @return {boolean}
 */
Logger.prototype.isFatalEnabled = function() {};

/**
 * @param {string} message
 * @param {...?} args
 * @return {void}
 */
Logger.prototype.trace = function(message, args) {};

/**
 * @param {string} message
 * @param {...?} args
 * @return {void}
 */
Logger.prototype.debug = function(message, args) {};

/**
 * @param {string} message
 * @param {...?} args
 * @return {void}
 */
Logger.prototype.info = function(message, args) {};

/**
 * @param {string} message
 * @param {...?} args
 * @return {void}
 */
Logger.prototype.warn = function(message, args) {};

/**
 * @param {string} message
 * @param {...?} args
 * @return {void}
 */
Logger.prototype.error = function(message, args) {};

/**
 * @param {string} message
 * @param {...?} args
 * @return {void}
 */
Logger.prototype.fatal = function(message, args) {};
/**
 * @record
 * @struct
 */
function Level() {}

/**
 * @param {string|?} other_or_otherLevel
 * @return {boolean}
 */
Level.prototype.isEqualTo = function(other_or_otherLevel) {};

/**
 * @param {string|?} other_or_otherLevel
 * @return {boolean}
 */
Level.prototype.isLessThanOrEqualTo = function(other_or_otherLevel) {};

/**
 * @param {string|?} other_or_otherLevel
 * @return {boolean}
 */
Level.prototype.isGreaterThanOrEqualTo = function(other_or_otherLevel) {};
/**
 * @record
 * @struct
 */
function IConfig() {}
 /** @type {!Array<?>} */
IConfig.prototype.appenders;
 /** @type {?} */
IConfig.prototype.levels;
 /** @type {boolean} */
IConfig.prototype.replaceConsole;
/**
 * @record
 * @struct
 */
function AppenderConfigBase() {}
 /** @type {string} */
AppenderConfigBase.prototype.type;
 /** @type {string} */
AppenderConfigBase.prototype.category;
 /** @type {?} */
AppenderConfigBase.prototype.layout;
/**
 * @extends {AppenderConfigBase}
 * @record
 * @struct
 */
function ConsoleAppenderConfig() {}
/**
 * @extends {AppenderConfigBase}
 * @record
 * @struct
 */
function FileAppenderConfig() {}
 /** @type {string} */
FileAppenderConfig.prototype.filename;
/**
 * @extends {FileAppenderConfig}
 * @record
 * @struct
 */
function DateFileAppenderConfig() {}
 /** @type {string} */
DateFileAppenderConfig.prototype.pattern;
 /** @type {boolean} */
DateFileAppenderConfig.prototype.alwaysIncludePattern;
/**
 * @extends {AppenderConfigBase}
 * @record
 * @struct
 */
function SmtpAppenderConfig() {}
 /** @type {string} */
SmtpAppenderConfig.prototype.recipients;
 /** @type {string} */
SmtpAppenderConfig.prototype.sender;
 /** @type {string} */
SmtpAppenderConfig.prototype.subject;
 /** @type {number} */
SmtpAppenderConfig.prototype.sendInterval;
 /** @type {?} */
SmtpAppenderConfig.prototype.SMTP;
/**
 * @extends {FileAppenderConfig}
 * @record
 * @struct
 */
function HookIoAppenderConfig() {}
 /** @type {number} */
HookIoAppenderConfig.prototype.maxLogSize;
 /** @type {number} */
HookIoAppenderConfig.prototype.backup;
 /** @type {number} */
HookIoAppenderConfig.prototype.pollInterval;
/**
 * @extends {AppenderConfigBase}
 * @record
 * @struct
 */
function GelfAppenderConfig() {}
 /** @type {string} */
GelfAppenderConfig.prototype.host;
 /** @type {string} */
GelfAppenderConfig.prototype.hostname;
 /** @type {string} */
GelfAppenderConfig.prototype.port;
 /** @type {string} */
GelfAppenderConfig.prototype.facility;
/**
 * @extends {AppenderConfigBase}
 * @record
 * @struct
 */
function MultiprocessAppenderConfig() {}
 /** @type {string} */
MultiprocessAppenderConfig.prototype.mode;
 /** @type {number} */
MultiprocessAppenderConfig.prototype.loggerPort;
 /** @type {string} */
MultiprocessAppenderConfig.prototype.loggerHost;
 /** @type {string} */
MultiprocessAppenderConfig.prototype.facility;
 /** @type {?} */
MultiprocessAppenderConfig.prototype.appender;
/**
 * @extends {AppenderConfigBase}
 * @record
 * @struct
 */
function LogglyAppenderConfig() {}
 /** @type {string} */
LogglyAppenderConfig.prototype.token;
 /** @type {string} */
LogglyAppenderConfig.prototype.subdomain;
 /** @type {!Array<string>} */
LogglyAppenderConfig.prototype.tags;
 /** @type {boolean} */
LogglyAppenderConfig.prototype.json;
/**
 * @extends {AppenderConfigBase}
 * @record
 * @struct
 */
function ClusteredAppenderConfig() {}
 /** @type {!Array<?>} */
ClusteredAppenderConfig.prototype.appenders;

/** @typedef {?} */
var CoreAppenderConfig;
/**
 * @extends {AppenderConfigBase}
 * @record
 * @struct
 */
function CustomAppenderConfig() {}

/* TODO: IndexSignature:  */

/** @typedef {?} */
var AppenderConfig;
/**
 * @record
 * @struct
 */
function LogEvent() {}
 /** @type {number} */
LogEvent.prototype.startTime;
 /** @type {string} */
LogEvent.prototype.categoryName;
 /** @type {!Array<?>} */
LogEvent.prototype.data;
 /** @type {?} */
LogEvent.prototype.level;
 /** @type {?} */
LogEvent.prototype.logger;
/**
 * @record
 * @struct
 */
function Appender() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function AppenderModule() {}
 /** @type {?} */
AppenderModule.prototype.appender;
 /** @type {?} */
AppenderModule.prototype.shutdown;
 /** @type {?} */
AppenderModule.prototype.configure;
/**
 * @record
 * @struct
 */
function LayoutConfig() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function LayoutGenerator() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function Layout() {}

/* TODO: CallSignature:  */
