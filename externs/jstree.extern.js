/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jstree/index.d.ts:
 /** @type {!JSTreeStatic} */
JQueryStatic.prototype.jstree;

/**
 * Create an instance, get an instance or invoke a command on a instance.
 * 
 * If there is no instance associated with the current node a new one is created
 * and `arg` is used to extend `$.jstree.defaults` for this new instance. There would be no return value (chaining is not broken).
 * 
 * If there is an existing instance and `arg` is a string the command specified by `arg` is executed on the instance,
 * with any additional arguments passed to the function. If the function returns a value it will be returned (chaining could break depending on function).
 * 
 * If there is an existing instance and `arg` is not a string the instance itself is returned (similar to `$.jstree.reference`).
 * 
 * In any other case - nothing is returned and chaining is not broken.
 * 
 * __Examples__
 * 
 * 	$('#tree1').jstree(); // creates an instance
 * 	$('#tree2').jstree({ plugins : [] }); // create an instance with some options
 * 	$('#tree1').jstree('open_node', '#branch_1'); // call a method on an existing instance, passing additional arguments
 * 	$('#tree2').jstree(); // get an existing instance (or create an instance)
 * 	$('#tree2').jstree(true); // get an existing instance (will not create new instance)
 * 	$('#branch_1').jstree().select_node('#branch_1'); // get an instance (using a nested element and call a method)
 * 
 * \@name $().jstree([arg])
 * @param {...!JSTreeStaticDefaults|boolean|?} options_or_arg_or_args
 * @return {!JSTree|?}
 */
JQuery.prototype.jstree = function(options_or_arg_or_args) {};
/**
 * @record
 * @struct
 */
function JSTreeStatic() {}
 /** @type {string} */
JSTreeStatic.prototype.version;
 /** @type {!JSTreeStaticDefaults} */
JSTreeStatic.prototype.defaults;
 /** @type {!Array<?>} */
JSTreeStatic.prototype.plugins;
 /** @type {string} */
JSTreeStatic.prototype.path;
 /** @type {?} */
JSTreeStatic.prototype.idregex;
 /** @type {string} */
JSTreeStatic.prototype.root;

/**
 * creates a jstree instance
 * \@name $.jstree.create(el [, options])
 * @param {(string|!HTMLElement|?<!HTMLElement>)} el
 * @param {!JSTreeStaticDefaults=} options
 * @return {!JSTree}
 */
JSTreeStatic.prototype.create = function(el, options) {};

/**
 * remove all traces of jstree from the DOM and destroy all instances
 * \@name $.jstree.destroy()
 * @return {void}
 */
JSTreeStatic.prototype.destroy = function() {};

/**
 * the jstree class constructor, used only internally
 * \@name $.jstree.core(id)
 * @param {number} id
 * @return {void}
 */
JSTreeStatic.prototype.core = function(id) {};

/**
 * get a reference to an existing instance
 * 
 * __Examples__
 * 
 * 	// provided a container with an ID of "tree", and a nested node with an ID of "branch"
 * 	// all of there will return the same instance
 * $.jstree.reference('tree');
 * $.jstree.reference('#tree');
 * 	$.jstree.reference($('#tree'));
 * 	$.jstree.reference(document.getElementByID('tree'));
 * $.jstree.reference('branch');
 * $.jstree.reference('#branch');
 * $.jstree.reference($('#branch'));
 * 	$.jstree.reference(document.getElementByID('branch'));
 * 
 * \@name $.jstree.reference(needle)
 * @param {(string|!HTMLElement|?<!HTMLElement>)} needle
 * @return {!JSTree}
 */
JSTreeStatic.prototype.reference = function(needle) {};
/**
 * @record
 * @struct
 */
function JSTreeStaticDefaults() {}
 /** @type {!Array<string>} */
JSTreeStaticDefaults.prototype.plugins;
 /** @type {!JSTreeStaticDefaultsCore} */
JSTreeStaticDefaults.prototype.core;
 /** @type {!JSTreeStaticDefaultsCheckbox} */
JSTreeStaticDefaults.prototype.checkbox;
 /** @type {!JSTreeStaticDefaultsContextMenu} */
JSTreeStaticDefaults.prototype.contextmenu;
 /** @type {!JSTreeStaticDefaultsDragNDrop} */
JSTreeStaticDefaults.prototype.dnd;
 /** @type {!JSTreeStaticDefaultsMassload} */
JSTreeStaticDefaults.prototype.massload;
 /** @type {!JSTreeStaticDefaultsSearch} */
JSTreeStaticDefaults.prototype.search;
 /** @type {function(?, ?): number} */
JSTreeStaticDefaults.prototype.sort;
 /** @type {!JSTreeStaticDefaultsState} */
JSTreeStaticDefaults.prototype.state;
 /** @type {?} */
JSTreeStaticDefaults.prototype.types;
 /** @type {!JSTreeStaticDefaultsUnique} */
JSTreeStaticDefaults.prototype.unique;
/**
 * @record
 * @struct
 */
function JSTreeStaticDefaultsCore() {}
 /** @type {?} */
JSTreeStaticDefaultsCore.prototype.data;
 /** @type {?} */
JSTreeStaticDefaultsCore.prototype.strings;
 /** @type {?} */
JSTreeStaticDefaultsCore.prototype.check_callback;
 /** @type {function(): ?} */
JSTreeStaticDefaultsCore.prototype.error;
 /** @type {?} */
JSTreeStaticDefaultsCore.prototype.animation;
 /** @type {boolean} */
JSTreeStaticDefaultsCore.prototype.multiple;
 /** @type {!JSTreeStaticDefaultsCoreThemes} */
JSTreeStaticDefaultsCore.prototype.themes;
 /** @type {boolean} */
JSTreeStaticDefaultsCore.prototype.expand_selected_onload;
 /** @type {boolean} */
JSTreeStaticDefaultsCore.prototype.worker;
 /** @type {boolean} */
JSTreeStaticDefaultsCore.prototype.force_text;
 /** @type {boolean} */
JSTreeStaticDefaultsCore.prototype.dblclick_toggle;
/**
 * @record
 * @struct
 */
function JSTreeStaticDefaultsCoreThemes() {}
 /** @type {string} */
JSTreeStaticDefaultsCoreThemes.prototype.name;
 /** @type {string} */
JSTreeStaticDefaultsCoreThemes.prototype.url;
 /** @type {string} */
JSTreeStaticDefaultsCoreThemes.prototype.dir;
 /** @type {boolean} */
JSTreeStaticDefaultsCoreThemes.prototype.dots;
 /** @type {boolean} */
JSTreeStaticDefaultsCoreThemes.prototype.icons;
 /** @type {boolean} */
JSTreeStaticDefaultsCoreThemes.prototype.ellipsis;
 /** @type {boolean} */
JSTreeStaticDefaultsCoreThemes.prototype.stripes;
 /** @type {?} */
JSTreeStaticDefaultsCoreThemes.prototype.variant;
 /** @type {boolean} */
JSTreeStaticDefaultsCoreThemes.prototype.responsive;
/**
 * @record
 * @struct
 */
function JSTreeStaticDefaultsCheckbox() {}
 /** @type {boolean} */
JSTreeStaticDefaultsCheckbox.prototype.visible;
 /** @type {boolean} */
JSTreeStaticDefaultsCheckbox.prototype.three_state;
 /** @type {boolean} */
JSTreeStaticDefaultsCheckbox.prototype.whole_node;
 /** @type {boolean} */
JSTreeStaticDefaultsCheckbox.prototype.keep_selected_style;
 /** @type {string} */
JSTreeStaticDefaultsCheckbox.prototype.cascade;
 /** @type {boolean} */
JSTreeStaticDefaultsCheckbox.prototype.tie_selection;
/**
 * @record
 * @struct
 */
function JSTreeStaticDefaultsContextMenu() {}
 /** @type {boolean} */
JSTreeStaticDefaultsContextMenu.prototype.select_node;
 /** @type {boolean} */
JSTreeStaticDefaultsContextMenu.prototype.show_at_node;
 /** @type {?} */
JSTreeStaticDefaultsContextMenu.prototype.items;
/**
 * @record
 * @struct
 */
function JSTreeStaticDefaultsDragNDrop() {}
 /** @type {boolean} */
JSTreeStaticDefaultsDragNDrop.prototype.copy;
 /** @type {number} */
JSTreeStaticDefaultsDragNDrop.prototype.open_timeout;
 /** @type {boolean} */
JSTreeStaticDefaultsDragNDrop.prototype.is_draggable;
 /** @type {boolean} */
JSTreeStaticDefaultsDragNDrop.prototype.check_while_dragging;
 /** @type {boolean} */
JSTreeStaticDefaultsDragNDrop.prototype.always_copy;
 /** @type {?} */
JSTreeStaticDefaultsDragNDrop.prototype.inside_pos;
 /** @type {boolean} */
JSTreeStaticDefaultsDragNDrop.prototype.drag_selection;
 /** @type {boolean} */
JSTreeStaticDefaultsDragNDrop.prototype.touch;
 /** @type {boolean} */
JSTreeStaticDefaultsDragNDrop.prototype.large_drop_target;
 /** @type {boolean} */
JSTreeStaticDefaultsDragNDrop.prototype.large_drag_target;
 /** @type {boolean} */
JSTreeStaticDefaultsDragNDrop.prototype.use_html5;
/**
 * @record
 * @struct
 */
function JSTreeStaticDefaultsMassload() {}
 /** @type {?} */
JSTreeStaticDefaultsMassload.prototype.url;
 /** @type {?} */
JSTreeStaticDefaultsMassload.prototype.data;
/**
 * @record
 * @struct
 */
function JSTreeStaticDefaultsSearch() {}
 /** @type {?} */
JSTreeStaticDefaultsSearch.prototype.ajax;
 /** @type {boolean} */
JSTreeStaticDefaultsSearch.prototype.fuzzy;
 /** @type {boolean} */
JSTreeStaticDefaultsSearch.prototype.case_sensitive;
 /** @type {boolean} */
JSTreeStaticDefaultsSearch.prototype.show_only_matches;
 /** @type {boolean} */
JSTreeStaticDefaultsSearch.prototype.show_only_matches_children;
 /** @type {boolean} */
JSTreeStaticDefaultsSearch.prototype.close_opened_onclear;
 /** @type {boolean} */
JSTreeStaticDefaultsSearch.prototype.search_leaves_only;
 /** @type {?} */
JSTreeStaticDefaultsSearch.prototype.search_callback;
/**
 * @record
 * @struct
 */
function JSTreeStaticDefaultsState() {}
 /** @type {string} */
JSTreeStaticDefaultsState.prototype.key;
 /** @type {string} */
JSTreeStaticDefaultsState.prototype.events;
 /** @type {?} */
JSTreeStaticDefaultsState.prototype.ttl;
 /** @type {?} */
JSTreeStaticDefaultsState.prototype.filter;
/**
 * @record
 * @struct
 */
function JSTreeStaticDefaultsUnique() {}
 /** @type {boolean} */
JSTreeStaticDefaultsUnique.prototype.case_sensitive;
 /** @type {function(string, number): string} */
JSTreeStaticDefaultsUnique.prototype.duplicate;
/**
 * @record
 * @struct
 */
function JSTree() {}
 /** @type {function(string, ?): !JSTree} */
JSTree.prototype.plugin;
 /** @type {function((string|!HTMLElement|?<!HTMLElement>), ?): void} */
JSTree.prototype.init;
 /** @type {function(boolean): void} */
JSTree.prototype.destroy;
 /** @type {function(): void} */
JSTree.prototype.teardown;
 /** @type {function(): !HTMLElement} */
JSTree.prototype._create_prototype_node;
 /** @type {function(): ?} */
JSTree.prototype.bind;
 /** @type {function(): ?} */
JSTree.prototype.unbind;
 /** @type {function(): ?<!HTMLElement>} */
JSTree.prototype.get_container;
 /** @type {function(): ?<!HTMLElement>} */
JSTree.prototype.get_container_ul;
 /** @type {function(string): string} */
JSTree.prototype.get_string;
 /** @type {function(!HTMLElement): !HTMLElement} */
JSTree.prototype._firstChild;
 /** @type {function(!HTMLElement): !HTMLElement} */
JSTree.prototype._nextSibling;
 /** @type {function(!HTMLElement): !HTMLElement} */
JSTree.prototype._previousSibling;
 /** @type {function(?, boolean): ?} */
JSTree.prototype.get_node;
 /** @type {function(?, string, boolean): ?} */
JSTree.prototype.get_path;
 /** @type {function(?, boolean): ?<!HTMLElement>} */
JSTree.prototype.get_next_dom;
 /** @type {function(?, boolean): ?<!HTMLElement>} */
JSTree.prototype.get_prev_dom;
 /** @type {function(?): string} */
JSTree.prototype.get_parent;
 /** @type {function(?): ?<!HTMLElement>} */
JSTree.prototype.get_children_dom;
 /** @type {function(?): boolean} */
JSTree.prototype.is_parent;
 /** @type {function(?): boolean} */
JSTree.prototype.is_loaded;
 /** @type {function(?): boolean} */
JSTree.prototype.is_loading;
 /** @type {function(?): boolean} */
JSTree.prototype.is_open;
 /** @type {function(?): boolean} */
JSTree.prototype.is_closed;
 /** @type {function(?): boolean} */
JSTree.prototype.is_leaf;
 /** @type {function(?, function(?, boolean): void): boolean} */
JSTree.prototype.load_node;
 /** @type {function(!Array<?>, function(!Array<?>): void, boolean, boolean): void} */
JSTree.prototype._load_nodes;
 /** @type {function(?, function(): void): void} */
JSTree.prototype.load_all;
 /** @type {function(?, function(boolean): void): boolean} */
JSTree.prototype._load_node;
 /** @type {function(?): void} */
JSTree.prototype._node_changed;
 /** @type {function(?, string, function(boolean): void): void} */
JSTree.prototype._append_html_data;
 /** @type {function(?, string, function(boolean): void, boolean): void} */
JSTree.prototype._append_json_data;
 /** @type {function(?<!HTMLElement>, string, !Array<?>): string} */
JSTree.prototype._parse_model_from_html;
 /** @type {function(?, string, !Array<?>): string} */
JSTree.prototype._parse_model_from_flat_json;
 /** @type {function(?, string, !Array<?>): string} */
JSTree.prototype._parse_model_from_json;
 /** @type {function(): void} */
JSTree.prototype._redraw;
 /** @type {function(boolean): void} */
JSTree.prototype.redraw;
 /** @type {function(?): void} */
JSTree.prototype.draw_children;
 /** @type {function(?, boolean, boolean, boolean): void} */
JSTree.prototype.redraw_node;
 /** @type {function(?, ?, ?): void} */
JSTree.prototype.open_node;
 /** @type {function(?): void} */
JSTree.prototype._open_to;
 /** @type {function(?, ?): void} */
JSTree.prototype.close_node;
 /** @type {function(?): void} */
JSTree.prototype.toggle_node;
 /** @type {function(?, number, ?): void} */
JSTree.prototype.open_all;
 /** @type {function(?, number): void} */
JSTree.prototype.close_all;
 /** @type {function(?): boolean} */
JSTree.prototype.is_disabled;
 /** @type {function(?): boolean} */
JSTree.prototype.enable_node;
 /** @type {function(?): boolean} */
JSTree.prototype.disable_node;
 /** @type {function(?): boolean} */
JSTree.prototype.is_hidden;
 /** @type {function(?, boolean): boolean} */
JSTree.prototype.hide_node;
 /** @type {function(?, boolean): boolean} */
JSTree.prototype.show_node;
 /** @type {function(boolean): boolean} */
JSTree.prototype.hide_all;
 /** @type {function(boolean): boolean} */
JSTree.prototype.show_all;
 /** @type {function(?, ?): void} */
JSTree.prototype.activate_node;
 /** @type {function(?): void} */
JSTree.prototype.hover_node;
 /** @type {function(?): void} */
JSTree.prototype.dehover_node;
 /** @type {function(?, boolean, boolean, ?): ?} */
JSTree.prototype.select_node;
 /** @type {function(?, boolean, ?): void} */
JSTree.prototype.deselect_node;
 /** @type {function(boolean): void} */
JSTree.prototype.select_all;
 /** @type {function(boolean): void} */
JSTree.prototype.deselect_all;
 /** @type {function(?): boolean} */
JSTree.prototype.is_selected;
 /** @type {function(?): !Array<?>} */
JSTree.prototype.get_selected;
 /** @type {function(?): !Array<?>} */
JSTree.prototype.get_top_selected;
 /** @type {function(?): !Array<?>} */
JSTree.prototype.get_bottom_selected;
 /** @type {function(): ?} */
JSTree.prototype.get_state;
 /** @type {function(?, function(): void): void} */
JSTree.prototype.set_state;
 /** @type {function(boolean, ?): void} */
JSTree.prototype.refresh;
 /** @type {function(?): void} */
JSTree.prototype.refresh_node;
 /** @type {function(?, string): boolean} */
JSTree.prototype.set_id;
 /** @type {function(?): string} */
JSTree.prototype.get_text;
 /** @type {function(?, string): boolean} */
JSTree.prototype.set_text;
 /** @type {function(?, !JSTreeGetJsonOptions, boolean): ?} */
JSTree.prototype.get_json;
 /** @type {function(?, ?, ?, ?, boolean): string} */
JSTree.prototype.create_node;
 /** @type {function(?, string): boolean} */
JSTree.prototype.rename_node;
 /** @type {function(?): boolean} */
JSTree.prototype.delete_node;
 /** @type {function(string, ?, ?, ?, ?): boolean} */
JSTree.prototype.check;
 /** @type {function(): ?} */
JSTree.prototype.last_error;
 /** @type {function(?, ?, ?, function(?, ?, ?): void, boolean, boolean, boolean): void} */
JSTree.prototype.move_node;
 /** @type {function(?, ?, ?, function(?, ?, ?): void, boolean, boolean, boolean): void} */
JSTree.prototype.copy_node;
 /** @type {function(?): void} */
JSTree.prototype.cut;
 /** @type {function(?): void} */
JSTree.prototype.copy;
 /** @type {function(): !Buffer} */
JSTree.prototype.get_buffer;
 /** @type {function(): boolean} */
JSTree.prototype.can_paste;
 /** @type {function(?, ?): void} */
JSTree.prototype.paste;
 /** @type {function(): void} */
JSTree.prototype.clear_buffer;
 /** @type {function(?, string, function(?, boolean, boolean): void): void} */
JSTree.prototype.edit;
 /** @type {function(string, ?): void} */
JSTree.prototype.set_theme;
 /** @type {function(): string} */
JSTree.prototype.get_theme;
 /** @type {function(?): void} */
JSTree.prototype.set_theme_variant;
 /** @type {function(): string} */
JSTree.prototype.get_theme_variant;
 /** @type {function(): void} */
JSTree.prototype.show_stripes;
 /** @type {function(): void} */
JSTree.prototype.hide_stripes;
 /** @type {function(): void} */
JSTree.prototype.toggle_stripes;
 /** @type {function(): void} */
JSTree.prototype.show_dots;
 /** @type {function(): void} */
JSTree.prototype.hide_dots;
 /** @type {function(): void} */
JSTree.prototype.toggle_dots;
 /** @type {function(): void} */
JSTree.prototype.show_icons;
 /** @type {function(): void} */
JSTree.prototype.hide_icons;
 /** @type {function(): void} */
JSTree.prototype.toggle_icons;
 /** @type {function(): void} */
JSTree.prototype.show_ellipsis;
 /** @type {function(): void} */
JSTree.prototype.hide_ellipsis;
 /** @type {function(): void} */
JSTree.prototype.toggle_ellipsis;
 /** @type {function(?, string): void} */
JSTree.prototype.set_icon;
 /** @type {function(?): string} */
JSTree.prototype.get_icon;
 /** @type {function(?): void} */
JSTree.prototype.hide_icon;
 /** @type {function(?): void} */
JSTree.prototype.show_icon;
 /** @type {function(): void} */
JSTree.prototype._undetermined;
 /** @type {function(): void} */
JSTree.prototype.show_checkboxes;
 /** @type {function(): void} */
JSTree.prototype.hide_checkboxes;
 /** @type {function(): void} */
JSTree.prototype.toggle_checkboxes;
 /** @type {function(?): boolean} */
JSTree.prototype.is_undetermined;
 /** @type {function(?): boolean} */
JSTree.prototype.disable_checkbox;
 /** @type {function(?): boolean} */
JSTree.prototype.enable_checkbox;
 /** @type {function(?, ?): ?} */
JSTree.prototype.check_node;
 /** @type {function(?, ?): ?} */
JSTree.prototype.uncheck_node;
 /** @type {function(): ?} */
JSTree.prototype.check_all;
 /** @type {function(): ?} */
JSTree.prototype.uncheck_all;
 /** @type {function(?): boolean} */
JSTree.prototype.is_checked;
 /** @type {function(?): !Array<?>} */
JSTree.prototype.get_checked;
 /** @type {function(?): !Array<?>} */
JSTree.prototype.get_top_checked;
 /** @type {function(?): !Array<?>} */
JSTree.prototype.get_bottom_checked;
 /** @type {function(?, number, number, ?): void} */
JSTree.prototype.show_contextmenu;
 /** @type {function(?, number, number, number): void} */
JSTree.prototype._show_contextmenu;
 /** @type {function(string, boolean, boolean, ?, boolean, boolean): void} */
JSTree.prototype.search;
 /** @type {function(): void} */
JSTree.prototype.clear_search;
 /** @type {function(!Array<string>): void} */
JSTree.prototype._search_open;
 /** @type {function(?, boolean): void} */
JSTree.prototype.sort;
 /** @type {function(): void} */
JSTree.prototype.save_state;
 /** @type {function(): void} */
JSTree.prototype.restore_state;
 /** @type {function(): void} */
JSTree.prototype.clear_state;
 /** @type {function(?): ?} */
JSTree.prototype.get_rules;
 /** @type {function(?, ?): ?} */
JSTree.prototype.get_type;
 /** @type {function(?, string): ?} */
JSTree.prototype.set_type;
/**
 * @record
 * @struct
 */
function JSTreeGetJsonOptions() {}
 /** @type {boolean} */
JSTreeGetJsonOptions.prototype.no_state;
 /** @type {boolean} */
JSTreeGetJsonOptions.prototype.no_id;
 /** @type {boolean} */
JSTreeGetJsonOptions.prototype.no_children;
 /** @type {boolean} */
JSTreeGetJsonOptions.prototype.no_data;
 /** @type {boolean} */
JSTreeGetJsonOptions.prototype.no_li_attr;
 /** @type {boolean} */
JSTreeGetJsonOptions.prototype.no_a_attr;
 /** @type {boolean} */
JSTreeGetJsonOptions.prototype.flat;
/**
 * @record
 * @struct
 */
function JSTreeBindOptions() {}
 /** @type {?} */
JSTreeBindOptions.prototype.inst;
 /** @type {?} */
JSTreeBindOptions.prototype.args;
 /** @type {?} */
JSTreeBindOptions.prototype.rslt;
 /** @type {?} */
JSTreeBindOptions.prototype.rlbk;
/**
 * @record
 * @struct
 */
function Buffer() {}
 /** @type {string} */
Buffer.prototype.mode;
 /** @type {!Array<?>} */
Buffer.prototype.node;
 /** @type {?} */
Buffer.prototype.inst;
