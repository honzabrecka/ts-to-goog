/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/exceljs/index.d.ts:

/* TODO: ImportDeclaration in  */

/** @const */
var RelationshipType = {};
/** @const {number} */
RelationshipType.None;
/** @const {number} */
RelationshipType.OfficeDocument;
/** @const {number} */
RelationshipType.Worksheet;
/** @const {number} */
RelationshipType.CalcChain;
/** @const {number} */
RelationshipType.SharedStrings;
/** @const {number} */
RelationshipType.Styles;
/** @const {number} */
RelationshipType.Theme;
/** @const {number} */
RelationshipType.Hyperlink;

/** @const */
var DocumentType = {};
/** @const {number} */
DocumentType.Xlsx;

/** @const */
var PaperSize = {};
/** @const {number} */
PaperSize.Legal;
/** @const {number} */
PaperSize.Executive;
/** @const {number} */
PaperSize.A4;
/** @const {number} */
PaperSize.A5;
/** @const {number} */
PaperSize.B5;
/** @const {number} */
PaperSize.Envelope_10;
/** @const {number} */
PaperSize.Envelope_DL;
/** @const {number} */
PaperSize.Envelope_C5;
/** @const {number} */
PaperSize.Envelope_B5;
/** @const {number} */
PaperSize.Envelope_Monarch;
/** @const {number} */
PaperSize.Double_Japan_Postcard_Rotated;
/** @const {number} */
PaperSize.K16_197x273_mm;
/**
 * @record
 * @struct
 */
function WorksheetViewCommon() {}
 /** @type {boolean} */
WorksheetViewCommon.prototype.rightToLeft;
 /** @type {string} */
WorksheetViewCommon.prototype.activeCell;
 /** @type {boolean} */
WorksheetViewCommon.prototype.showRuler;
 /** @type {boolean} */
WorksheetViewCommon.prototype.showRowColHeaders;
 /** @type {boolean} */
WorksheetViewCommon.prototype.showGridLines;
 /** @type {number} */
WorksheetViewCommon.prototype.zoomScale;
 /** @type {number} */
WorksheetViewCommon.prototype.zoomScaleNormal;
/**
 * @record
 * @struct
 */
function WorksheetViewNormal() {}
 /** @type {string} */
WorksheetViewNormal.prototype.state;
 /** @type {string} */
WorksheetViewNormal.prototype.style;
/**
 * @record
 * @struct
 */
function WorksheetViewFrozen() {}
 /** @type {string} */
WorksheetViewFrozen.prototype.state;
 /** @type {string} */
WorksheetViewFrozen.prototype.style;
 /** @type {number} */
WorksheetViewFrozen.prototype.xSplit;
 /** @type {number} */
WorksheetViewFrozen.prototype.ySplit;
 /** @type {string} */
WorksheetViewFrozen.prototype.topLeftCell;
/**
 * @record
 * @struct
 */
function WorksheetViewSplit() {}
 /** @type {string} */
WorksheetViewSplit.prototype.state;
 /** @type {string} */
WorksheetViewSplit.prototype.style;
 /** @type {number} */
WorksheetViewSplit.prototype.xSplit;
 /** @type {number} */
WorksheetViewSplit.prototype.ySplit;
 /** @type {string} */
WorksheetViewSplit.prototype.topLeftCell;
 /** @type {string} */
WorksheetViewSplit.prototype.activePane;

/** @typedef {?} */
var WorksheetView;
/**
 * @record
 * @struct
 */
function WorkbookView() {}
 /** @type {number} */
WorkbookView.prototype.x;
 /** @type {number} */
WorkbookView.prototype.y;
 /** @type {number} */
WorkbookView.prototype.width;
 /** @type {number} */
WorkbookView.prototype.height;
 /** @type {number} */
WorkbookView.prototype.firstSheet;
 /** @type {number} */
WorkbookView.prototype.activeTab;
 /** @type {string} */
WorkbookView.prototype.visibility;

/** @typedef {string} */
var FillPatterns;
/**
 * @record
 * @struct
 */
function FillPattern() {}
 /** @type {string} */
FillPattern.prototype.type;
 /** @type {string} */
FillPattern.prototype.pattern;
 /** @type {?} */
FillPattern.prototype.fgColor;
 /** @type {?} */
FillPattern.prototype.bgColor;
/**
 * @record
 * @struct
 */
function GradientStop() {}
 /** @type {number} */
GradientStop.prototype.position;
 /** @type {?} */
GradientStop.prototype.color;
/**
 * @record
 * @struct
 */
function FillGradientAngle() {}
 /** @type {string} */
FillGradientAngle.prototype.type;
 /** @type {string} */
FillGradientAngle.prototype.gradient;
 /** @type {number} */
FillGradientAngle.prototype.degree;
 /** @type {!Array<?>} */
FillGradientAngle.prototype.stops;
/**
 * @record
 * @struct
 */
function FillGradientPath() {}
 /** @type {string} */
FillGradientPath.prototype.type;
 /** @type {string} */
FillGradientPath.prototype.gradient;
 /** @type {?} */
FillGradientPath.prototype.center;
 /** @type {!Array<?>} */
FillGradientPath.prototype.stops;

/** @typedef {?} */
var Fill;
/**
 * @record
 * @struct
 */
function Font() {}
 /** @type {string} */
Font.prototype.name;
 /** @type {number} */
Font.prototype.size;
 /** @type {number} */
Font.prototype.family;
 /** @type {string} */
Font.prototype.scheme;
 /** @type {number} */
Font.prototype.charset;
 /** @type {?} */
Font.prototype.color;
 /** @type {boolean} */
Font.prototype.bold;
 /** @type {boolean} */
Font.prototype.italic;
 /** @type {(boolean|string)} */
Font.prototype.underline;
 /** @type {boolean} */
Font.prototype.strike;
 /** @type {boolean} */
Font.prototype.outline;

/** @typedef {string} */
var BorderStyle;
/**
 * @record
 * @struct
 */
function Color() {}
 /** @type {string} */
Color.prototype.argb;
 /** @type {number} */
Color.prototype.theme;
/**
 * @record
 * @struct
 */
function Border() {}
 /** @type {string} */
Border.prototype.style;
 /** @type {?} */
Border.prototype.color;
/**
 * @extends {Border}
 * @record
 * @struct
 */
function BorderDiagonal() {}
 /** @type {boolean} */
BorderDiagonal.prototype.up;
 /** @type {boolean} */
BorderDiagonal.prototype.down;
/**
 * @record
 * @struct
 */
function Borders() {}
 /** @type {?} */
Borders.prototype.top;
 /** @type {?} */
Borders.prototype.left;
 /** @type {?} */
Borders.prototype.bottom;
 /** @type {?} */
Borders.prototype.right;
 /** @type {?} */
Borders.prototype.diagonal;
/**
 * @record
 * @struct
 */
function Margins() {}
 /** @type {number} */
Margins.prototype.top;
 /** @type {number} */
Margins.prototype.left;
 /** @type {number} */
Margins.prototype.bottom;
 /** @type {number} */
Margins.prototype.right;
 /** @type {number} */
Margins.prototype.header;
 /** @type {number} */
Margins.prototype.footer;

/** @const */
var ReadingOrder = {};
/** @const {number} */
ReadingOrder.LeftToRight;
/** @const {number} */
ReadingOrder.RightToLeft;
/**
 * @record
 * @struct
 */
function Alignment() {}
 /** @type {string} */
Alignment.prototype.horizontal;
 /** @type {string} */
Alignment.prototype.vertical;
 /** @type {boolean} */
Alignment.prototype.wrapText;
 /** @type {number} */
Alignment.prototype.indent;
 /** @type {string} */
Alignment.prototype.readingOrder;
 /** @type {(number|string)} */
Alignment.prototype.textRotation;
/**
 * @record
 * @struct
 */
function Style() {}
 /** @type {string} */
Style.prototype.numFmt;
 /** @type {?} */
Style.prototype.font;
 /** @type {?} */
Style.prototype.alignment;
 /** @type {?} */
Style.prototype.border;
 /** @type {?} */
Style.prototype.fill;

/** @typedef {string} */
var DataValidationOperator;
/**
 * @record
 * @struct
 */
function DataValidation() {}
 /** @type {string} */
DataValidation.prototype.type;
 /** @type {!Array<?>} */
DataValidation.prototype.formulae;
 /** @type {boolean} */
DataValidation.prototype.allowBlank;
 /** @type {string} */
DataValidation.prototype.operator;
 /** @type {string} */
DataValidation.prototype.error;
 /** @type {string} */
DataValidation.prototype.errorTitle;
 /** @type {string} */
DataValidation.prototype.errorStyle;
 /** @type {string} */
DataValidation.prototype.prompt;
 /** @type {string} */
DataValidation.prototype.promptTitle;
 /** @type {boolean} */
DataValidation.prototype.showErrorMessage;
 /** @type {boolean} */
DataValidation.prototype.showInputMessage;
/**
 * @record
 * @struct
 */
function CellErrorValue() {}
 /** @type {string} */
CellErrorValue.prototype.error;
/**
 * @record
 * @struct
 */
function RichText() {}
 /** @type {string} */
RichText.prototype.text;
 /** @type {?} */
RichText.prototype.font;
/**
 * @record
 * @struct
 */
function CellRichTextValue() {}
 /** @type {!Array<?>} */
CellRichTextValue.prototype.richText;
/**
 * @record
 * @struct
 */
function CellHyperlinkValue() {}
 /** @type {string} */
CellHyperlinkValue.prototype.text;
 /** @type {string} */
CellHyperlinkValue.prototype.hyperlink;
/**
 * @record
 * @struct
 */
function CellFormulaValue() {}
 /** @type {string} */
CellFormulaValue.prototype.formula;
 /** @type {(string|number|!Date)} */
CellFormulaValue.prototype.result;
/**
 * @record
 * @struct
 */
function CellSharedFormulaValue() {}
 /** @type {string} */
CellSharedFormulaValue.prototype.sharedFormula;
 /** @type {string} */
CellSharedFormulaValue.prototype.formula;
 /** @type {(string|number|!Date)} */
CellSharedFormulaValue.prototype.result;

/** @const */
var ValueType = {};
/** @const {number} */
ValueType.Null;
/** @const {number} */
ValueType.Merge;
/** @const {number} */
ValueType.Number;
/** @const {number} */
ValueType.String;
/** @const {number} */
ValueType.Date;
/** @const {number} */
ValueType.Hyperlink;
/** @const {number} */
ValueType.Formula;
/** @const {number} */
ValueType.SharedString;
/** @const {number} */
ValueType.RichText;
/** @const {number} */
ValueType.Boolean;
/** @const {number} */
ValueType.Error;

/** @const */
var FormulaType = {};
/** @const {number} */
FormulaType.None;
/** @const {number} */
FormulaType.Master;
/** @const {number} */
FormulaType.Shared;

/** @typedef {(string|number|boolean|!Date|?)} */
var CellValue;
/**
 * @extends {Style}
 * @record
 * @struct
 */
function Cell() {}
 /** @type {string} */
Cell.prototype.name;
 /** @type {!Array<string>} */
Cell.prototype.names;
 /** @type {?} */
Cell.prototype.dataValidation;
 /** @type {(string|number|boolean|!Date|?)} */
Cell.prototype.value;
 /** @type {string} */
Cell.prototype.formula;
 /** @type {(string|number|!Date)} */
Cell.prototype.result;
 /** @type {?} */
Cell.prototype.type;
 /** @type {?} */
Cell.prototype.formulaType;
 /** @type {?} */
Cell.prototype.master;
 /** @type {?} */
Cell.prototype.style;

/**
 * Remove a name from a cell
 * @param {string} name
 * @return {void}
 */
Cell.prototype.removeName = function(name) {};
/**
 * @extends {Style}
 * @record
 * @struct
 */
function Row() {}
 /** @type {number} */
Row.prototype.height;
 /** @type {boolean} */
Row.prototype.hidden;
 /** @type {?} */
Row.prototype.values;
 /** @type {number} */
Row.prototype.outlineLevel;
 /** @type {number} */
Row.prototype.number;
 /** @type {boolean} */
Row.prototype.collapsed;
 /** @type {number} */
Row.prototype.cellCount;
 /** @type {number} */
Row.prototype.actualCellCount;

/**
 * Get cell by number, column letter or column key
 * @param {(string|number)} indexOrKey
 * @return {?}
 */
Row.prototype.getCell = function(indexOrKey) {};

/**
 * Iterate over all non-null cells in a row
 * Iterate over all cells in a row (including empty cells)
 * @param {?} callback_or_opt
 * @param {?=} callback
 * @return {void}
 */
Row.prototype.eachCell = function(callback_or_opt, callback) {};

/**
 * Cut one or more cells (cells to the right are shifted left)
 * 
 * Note: this operation will not affect other rows
 * @param {number} start
 * @param {number} count
 * @param {...?} insert
 * @return {void}
 */
Row.prototype.splice = function(start, count, insert) {};

/**
 * Commit a completed row to stream
 * @return {void}
 */
Row.prototype.commit = function() {};
/**
 * @record
 * @struct
 */
function Column() {}
 /** @type {(string|!Array<string>)} */
Column.prototype.header;
 /** @type {string} */
Column.prototype.key;
 /** @type {number} */
Column.prototype.width;
 /** @type {number} */
Column.prototype.outlineLevel;
 /** @type {boolean} */
Column.prototype.hidden;
 /** @type {?} */
Column.prototype.style;
/**
 * @extends {Style}
 * @record
 * @struct
 */
function ColumnExtension() {}
 /** @type {boolean} */
ColumnExtension.prototype.collapsed;

/**
 * Iterate over all current cells in this column
 * Iterate over all current cells in this column including empty cells
 * @param {?} callback_or_opt
 * @param {?=} callback
 * @return {void}
 */
ColumnExtension.prototype.eachCell = function(callback_or_opt, callback) {};
/**
 * @record
 * @struct
 */
function PageSetup() {}
 /** @type {?} */
PageSetup.prototype.margins;
 /** @type {string} */
PageSetup.prototype.orientation;
 /** @type {number} */
PageSetup.prototype.horizontalDpi;
 /** @type {number} */
PageSetup.prototype.verticalDpi;
 /** @type {boolean} */
PageSetup.prototype.fitToPage;
 /** @type {number} */
PageSetup.prototype.fitToWidth;
 /** @type {number} */
PageSetup.prototype.fitToHeight;
 /** @type {number} */
PageSetup.prototype.scale;
 /** @type {string} */
PageSetup.prototype.pageOrder;
 /** @type {boolean} */
PageSetup.prototype.blackAndWhite;
 /** @type {boolean} */
PageSetup.prototype.draft;
 /** @type {string} */
PageSetup.prototype.cellComments;
 /** @type {string} */
PageSetup.prototype.errors;
 /** @type {?} */
PageSetup.prototype.paperSize;
 /** @type {boolean} */
PageSetup.prototype.showRowColHeaders;
 /** @type {boolean} */
PageSetup.prototype.showGridLines;
 /** @type {number} */
PageSetup.prototype.firstPageNumber;
 /** @type {boolean} */
PageSetup.prototype.horizontalCentered;
 /** @type {boolean} */
PageSetup.prototype.verticalCentered;
 /** @type {string} */
PageSetup.prototype.printArea;
 /** @type {string} */
PageSetup.prototype.printTitlesRow;

/** @typedef {(string|?)} */
var AutoFilter;
/**
 * @record
 * @struct
 */
function Image() {}
 /** @type {string} */
Image.prototype.extension;
 /** @type {string} */
Image.prototype.filename;
 /** @type {?} */
Image.prototype.buffer;
/**
 * @record
 * @struct
 */
function ImageRange() {}
 /** @type {?} */
ImageRange.prototype.tl;
 /** @type {?} */
ImageRange.prototype.br;
/**
 * @record
 * @struct
 */
function Worksheet() {}
 /** @type {?} */
Worksheet.prototype.pageSetup;
 /** @type {?} */
Worksheet.prototype.properties;
 /** @type {!Array<?>} */
Worksheet.prototype.views;
 /** @type {(string|?)} */
Worksheet.prototype.autoFilter;
 /** @type {!Array<?>} */
Worksheet.prototype.columns;
 /** @type {number} */
Worksheet.prototype.rowCount;
 /** @type {number} */
Worksheet.prototype.actualRowCount;
 /** @type {number} */
Worksheet.prototype.columnCount;
 /** @type {number} */
Worksheet.prototype.actualColumnCount;
 /** @type {?} */
Worksheet.prototype.lastRow;

/**
 * Access an individual columns by key, letter and 1-based column number
 * @param {(string|number)} indexOrKey
 * @return {?}
 */
Worksheet.prototype.getColumn = function(indexOrKey) {};

/**
 * Cut one or more columns (columns to the right are shifted left)
 * and optionally insert more
 * 
 * If column properties have been definde, they will be cut or moved accordingly
 * 
 * Known Issue: If a splice causes any merged cells to move, the results may be unpredictable
 * 
 * Also: If the worksheet has more rows than values in the colulmn inserts,
 * the rows will still be shifted as if the values existed
 * @param {number} start
 * @param {number} count
 * @param {...!Array<?>} insert
 * @return {void}
 */
Worksheet.prototype.spliceColumns = function(start, count, insert) {};

/**
 * Cut one or more rows (rows below are shifted up)
 * and optionally insert more
 * 
 * Known Issue: If a splice causes any merged cells to move, the results may be unpredictable
 * @param {number} start
 * @param {number} count
 * @param {...!Array<?>} insert
 * @return {void}
 */
Worksheet.prototype.spliceRows = function(start, count, insert) {};

/**
 * Add a couple of Rows by key-value, after the last current row, using the column keys,
 * or add a row by contiguous Array (assign to columns A, B & C)
 * @param {?} data
 * @return {?}
 */
Worksheet.prototype.addRow = function(data) {};

/**
 * Add multiple rows by providing an array of arrays or key-value pairs
 * @param {!Array<?>} rows
 * @return {void}
 */
Worksheet.prototype.addRows = function(rows) {};

/**
 * Get or create row by 0-based index
 * @param {number} index
 * @return {?}
 */
Worksheet.prototype.getRow = function(index) {};

/**
 * Iterate over all rows that have values in a worksheet
 * Iterate over all rows (including empty rows) in a worksheet
 * @param {?} callback_or_opt
 * @param {?=} callback
 * @return {void}
 */
Worksheet.prototype.eachRow = function(callback_or_opt, callback) {};

/**
 * Get or create cell
 * @param {string} ref
 * @return {?}
 */
Worksheet.prototype.getCell = function(ref) {};

/**
 * Merge cells, either:
 * 
 * tlbr string, e.g. `'A4:B5'`
 * 
 * tl string, br string, e.g. `'G10', 'H11'`
 * 
 * t, l, b, r numbers, e.g. `10,11,12,13`
 * @param {(string|number)} a
 * @param {(string|number)=} b
 * @param {number=} c
 * @param {number=} d
 * @return {void}
 */
Worksheet.prototype.mergeCells = function(a, b, c, d) {};

/**
 * unmerging the cells breaks the style links
 * @param {string} cell
 * @return {void}
 */
Worksheet.prototype.unMergeCells = function(cell) {};

/**
 * Using the image id from `Workbook.addImage`, set the background to the worksheet
 * @param {string} imageId
 * @return {void}
 */
Worksheet.prototype.addBackgroundImage = function(imageId) {};

/**
 * Using the image id from `Workbook.addImage`,
 * embed an image within the worksheet to cover a range
 * @param {string} imageId
 * @param {(string|?)} range
 * @return {void}
 */
Worksheet.prototype.addImage = function(imageId, range) {};

/**
 * Commit a completed worksheet to stream
 * @return {void}
 */
Worksheet.prototype.commit = function() {};
/**
 * @record
 * @struct
 */
function WorksheetProperties() {}
 /** @type {?} */
WorksheetProperties.prototype.tabColor;
 /** @type {number} */
WorksheetProperties.prototype.outlineLevelCol;
 /** @type {number} */
WorksheetProperties.prototype.outlineLevelRow;
 /** @type {number} */
WorksheetProperties.prototype.defaultRowHeight;
 /** @type {number} */
WorksheetProperties.prototype.dyDescent;
/**
 * @record
 * @struct
 */
function AddWorksheetOptions() {}
 /** @type {?} */
AddWorksheetOptions.prototype.properties;
 /** @type {?} */
AddWorksheetOptions.prototype.pageSetup;
 /** @type {!Array<?>} */
AddWorksheetOptions.prototype.views;
/**
 * @record
 * @struct
 */
function WorkbookProperties() {}
 /** @type {boolean} */
WorkbookProperties.prototype.date1904;
/**
 * @record
 * @struct
 */
function Xlsx() {}

/**
 * read from a file
 * @param {string} path
 * @return {!Promise<void>}
 */
Xlsx.prototype.readFile = function(path) {};

/**
 * Create input stream for reading
 * @return {!internal.Writable}
 */
Xlsx.prototype.createInputStream = function() {};

/**
 * write to a file
 * @param {string} path
 * @return {!Promise<void>}
 */
Xlsx.prototype.writeFile = function(path) {};

/**
 * write to a stream
 * @param {!internal.Stream} stream
 * @return {!Promise<void>}
 */
Xlsx.prototype.write = function(stream) {};
/**
 * @record
 * @struct
 */
function CsvReadOptions() {}
 /** @type {!Array<string>} */
CsvReadOptions.prototype.dateFormats;

/**
 * @param {?} value
 * @param {number} index
 * @return {?}
 */
CsvReadOptions.prototype.map = function(value, index) {};
/**
 * @record
 * @struct
 */
function CsvWriteOptions() {}
 /** @type {string} */
CsvWriteOptions.prototype.dateFormat;
/**
 * @record
 * @struct
 */
function Csv() {}

/**
 * read from a file
 * @param {string} path
 * @param {?=} options
 * @return {!Promise<?>}
 */
Csv.prototype.readFile = function(path, options) {};

/**
 * read from a stream
 * @param {!internal.Stream} stream
 * @param {?=} options
 * @return {!Promise<?>}
 */
Csv.prototype.read = function(stream, options) {};

/**
 * Create input stream for reading
 * @return {!internal.Writable}
 */
Csv.prototype.createInputStream = function() {};

/**
 * write to a file
 * @param {string} path
 * @param {?=} options
 * @return {!Promise<void>}
 */
Csv.prototype.writeFile = function(path, options) {};

/**
 * write to a stream
 * @param {!internal.Stream} stream
 * @param {?=} options
 * @return {!Promise<void>}
 */
Csv.prototype.write = function(stream, options) {};
/**
 * @constructor
 * @struct
 */
function Workbook() {}
 /** @type {string} */
Workbook.prototype.creator;
 /** @type {string} */
Workbook.prototype.lastModifiedBy;
 /** @type {!Date} */
Workbook.prototype.created;
 /** @type {!Date} */
Workbook.prototype.modified;
 /** @type {!Date} */
Workbook.prototype.lastPrinted;
 /** @type {?} */
Workbook.prototype.properties;
 /** @type {?} */
Workbook.prototype.xlsx;
 /** @type {?} */
Workbook.prototype.csv;
 /** @type {!Array<?>} */
Workbook.prototype.views;
 /** @type {!Array<?>} */
Workbook.prototype.worksheets;

/**
 * Add a new worksheet and return a reference to it
 * @param {string} name
 * @param {?=} options
 * @return {?}
 */
Workbook.prototype.addWorksheet = function(name, options) {};

/**
 * fetch sheet by name or id
 * @param {(string|number)} indexOrName
 * @return {?}
 */
Workbook.prototype.getWorksheet = function(indexOrName) {};

/**
 * Iterate over all sheets.
 * 
 * Note: `workbook.worksheets.forEach` will still work but this is better.
 * @param {?} callback
 * @return {void}
 */
Workbook.prototype.eachSheet = function(callback) {};

/**
 * Add Image to Workbook and return the id
 * @param {?} img
 * @return {string}
 */
Workbook.prototype.addImage = function(img) {};

/**
 * Commit a completed workbook to stream and close the stream
 * @return {!Promise<void>}
 */
Workbook.prototype.commit = function() {};
/** @const */
var config = {};

/**
 * @param {string} key
 * @param {?} promise
 * @return {void}
 */
config.setValue = function(key, promise) {};
/** @const */
var stream = {};
/** @const */
stream.xlsx = {};
/**
 * @record
 * @struct
 */
stream.xlsx.WorkbookWriterOptions = function() {};
 /** @type {!internal.Stream} */
stream.xlsx.WorkbookWriterOptions.prototype.stream;
 /** @type {string} */
stream.xlsx.WorkbookWriterOptions.prototype.filename;
 /** @type {boolean} */
stream.xlsx.WorkbookWriterOptions.prototype.useSharedStrings;
 /** @type {boolean} */
stream.xlsx.WorkbookWriterOptions.prototype.useStyles;

/**
 * @constructor
 * @struct
 * @param {?} options
 */
stream.xlsx.WorkbookWriter = function(options) {};
