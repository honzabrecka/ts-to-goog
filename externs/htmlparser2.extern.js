/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/htmlparser2/index.d.ts:
/**
 * @record
 * @struct
 */
function Handler() {}
 /** @type {?} */
Handler.prototype.onopentag;
 /** @type {?} */
Handler.prototype.onopentagname;
 /** @type {?} */
Handler.prototype.onattribute;
 /** @type {?} */
Handler.prototype.ontext;
 /** @type {?} */
Handler.prototype.onclosetag;
 /** @type {?} */
Handler.prototype.onprocessinginstruction;
 /** @type {?} */
Handler.prototype.oncomment;
 /** @type {?} */
Handler.prototype.oncommentend;
 /** @type {?} */
Handler.prototype.oncdatastart;
 /** @type {?} */
Handler.prototype.oncdataend;
 /** @type {?} */
Handler.prototype.onerror;
 /** @type {?} */
Handler.prototype.onreset;
 /** @type {?} */
Handler.prototype.onend;
/**
 * @record
 * @struct
 */
function Options() {}
 /** @type {boolean} */
Options.prototype.xmlMode;
 /** @type {boolean} */
Options.prototype.decodeEntities;
 /** @type {boolean} */
Options.prototype.lowerCaseTags;
 /** @type {boolean} */
Options.prototype.lowerCaseAttributeNames;
 /** @type {boolean} */
Options.prototype.recognizeCDATA;
 /** @type {boolean} */
Options.prototype.recognizeSelfClosing;

/**
 * @constructor
 * @struct
 * @param {?} handler
 * @param {?=} options
 */
function Parser(handler, options) {}

/**
 * 
 * Parses a chunk of data and calls the corresponding callbacks.
 * @param {string} input
 * @return {void}
 */
Parser.prototype.write = function(input) {};

/**
 * 
 * alias for backwards compat
 * @param {string} input
 * @return {void}
 */
Parser.prototype.parseChunk = function(input) {};

/**
 * 
 * Parses the end of the buffer and clears the stack, calls onend.
 * @return {void}
 */
Parser.prototype.end = function() {};

/**
 * 
 * alias for backwards compat
 * @return {void}
 */
Parser.prototype.done = function() {};

/**
 * 
 * Resets the parser, parses the data & calls end.
 * @param {string} input
 * @return {void}
 */
Parser.prototype.parseComplete = function(input) {};

/**
 * 
 * Resets buffer & stack, calls onreset.
 * @return {void}
 */
Parser.prototype.reset = function() {};
