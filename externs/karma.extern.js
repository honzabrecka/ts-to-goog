/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/karma/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */
/** @const */
var karma = {};
/**
 * @record
 * @struct
 */
karma.Karma = function() {};
 /** @type {!karma.DeprecatedServer} */
karma.Karma.prototype.server;
 /** @type {!karma.Server} */
karma.Karma.prototype.Server;
 /** @type {!karma.Runner} */
karma.Karma.prototype.runner;
 /** @type {!karma.Stopper} */
karma.Karma.prototype.stopper;
 /** @type {!karma.Launcher} */
karma.Karma.prototype.launcher;
 /** @type {string} */
karma.Karma.prototype.VERSION;
 /** @type {!karma.Constants} */
karma.Karma.prototype.constants;
/**
 * @record
 * @struct
 */
karma.Constants = function() {};
 /** @type {string} */
karma.Constants.prototype.VERSION;
 /** @type {number} */
karma.Constants.prototype.DEFAULT_PORT;
 /** @type {string} */
karma.Constants.prototype.DEFAULT_HOSTNAME;
 /** @type {string} */
karma.Constants.prototype.DEFAULT_LISTEN_ADDR;
 /** @type {string} */
karma.Constants.prototype.LOG_DISABLE;
 /** @type {string} */
karma.Constants.prototype.LOG_ERROR;
 /** @type {string} */
karma.Constants.prototype.LOG_WARN;
 /** @type {string} */
karma.Constants.prototype.LOG_INFO;
 /** @type {string} */
karma.Constants.prototype.LOG_DEBUG;
 /** @type {string} */
karma.Constants.prototype.LOG_LOG;
 /** @type {!Array<string>} */
karma.Constants.prototype.LOG_PRIORITIES;
 /** @type {string} */
karma.Constants.prototype.COLOR_PATTERN;
 /** @type {string} */
karma.Constants.prototype.NO_COLOR_PATTERN;
 /** @type {{type: string, layout: {type: string, pattern: string}}} */
karma.Constants.prototype.CONSOLE_APPENDER;
 /** @type {string} */
karma.Constants.prototype.EXIT_CODE;
/**
 * @record
 * @struct
 */
karma.LauncherStatic = function() {};

/* TODO: ConstructSignature: karma */

/**
 * @return {string}
 */
karma.LauncherStatic.prototype.generateId = function() {};
/**
 * @record
 * @struct
 */
karma.Launcher = function() {};
 /** @type {!karma.LauncherStatic} */
karma.Launcher.prototype.Launcher;

/**
 * @param {!Array<string>} names
 * @param {string} protocol
 * @param {string} hostname
 * @param {number} port
 * @param {string} urlRoot
 * @return {!Array<?>}
 */
karma.Launcher.prototype.launch = function(names, protocol, hostname, port, urlRoot) {};

/**
 * @param {string} id
 * @param {!Function} callback
 * @return {boolean}
 */
karma.Launcher.prototype.kill = function(id, callback) {};

/**
 * @param {string} id
 * @return {boolean}
 */
karma.Launcher.prototype.restart = function(id) {};

/**
 * @param {!Function} callback
 * @return {void}
 */
karma.Launcher.prototype.killAll = function(callback) {};

/**
 * @return {boolean}
 */
karma.Launcher.prototype.areAllCaptured = function() {};

/**
 * @param {string} id
 * @return {void}
 */
karma.Launcher.prototype.markCaptured = function(id) {};
/**
 * @record
 * @struct
 */
karma.DeprecatedServer = function() {};

/**
 * @param {?=} options
 * @param {!karma.ServerCallback=} callback
 * @return {void}
 */
karma.DeprecatedServer.prototype.start = function(options, callback) {};
/**
 * @record
 * @struct
 */
karma.Runner = function() {};

/**
 * @param {(!karma.ConfigOptions|!karma.ConfigFile)=} options
 * @param {!karma.ServerCallback=} callback
 * @return {void}
 */
karma.Runner.prototype.run = function(options, callback) {};
/**
 * @record
 * @struct
 */
karma.Stopper = function() {};

/**
 * This function will signal a running server to stop. The equivalent of karma stop.
 * @param {!karma.ConfigOptions=} options
 * @param {!karma.ServerCallback=} callback
 * @return {void}
 */
karma.Stopper.prototype.stop = function(options, callback) {};
/**
 * @record
 * @struct
 */
karma.TestResults = function() {};
 /** @type {boolean} */
karma.TestResults.prototype.disconnected;
 /** @type {boolean} */
karma.TestResults.prototype.error;
 /** @type {number} */
karma.TestResults.prototype.exitCode;
 /** @type {number} */
karma.TestResults.prototype.failed;
 /** @type {number} */
karma.TestResults.prototype.success;
/**
 * @record
 * @struct
 */
karma.Server = function() {};

/* TODO: ConstructSignature: karma */

/**
 * Start the server
 * @return {void}
 */
karma.Server.prototype.start = function() {};

/**
 * Get properties from the injector
 * @param {string} token
 * @return {?}
 */
karma.Server.prototype.get = function(token) {};

/**
 * Force a refresh of the file list
 * @return {!Bluebird<?>}
 */
karma.Server.prototype.refreshFiles = function() {};

/**
 * Listen to the 'run_complete' event.
 * @param {string} event
 * @param {!Function|function(?, !karma.TestResults): void} listener
 * @return {Server}
 */
karma.Server.prototype.on = function(event, listener) {};
/**
 * @record
 * @struct
 */
karma.ServerCallback = function() {};

/* TODO: CallSignature: karma */
/**
 * @record
 * @struct
 */
karma.Config = function() {};
 /** @type {function(!karma.ConfigOptions): void} */
karma.Config.prototype.set;
 /** @type {string} */
karma.Config.prototype.LOG_DISABLE;
 /** @type {string} */
karma.Config.prototype.LOG_ERROR;
 /** @type {string} */
karma.Config.prototype.LOG_WARN;
 /** @type {string} */
karma.Config.prototype.LOG_INFO;
 /** @type {string} */
karma.Config.prototype.LOG_DEBUG;
/**
 * @record
 * @struct
 */
karma.ConfigFile = function() {};
 /** @type {string} */
karma.ConfigFile.prototype.configFile;
/**
 * @record
 * @struct
 */
karma.ConfigOptions = function() {};
 /** @type {boolean} */
karma.ConfigOptions.prototype.autoWatch;
 /** @type {number} */
karma.ConfigOptions.prototype.autoWatchBatchDelay;
 /** @type {string} */
karma.ConfigOptions.prototype.basePath;
 /** @type {number} */
karma.ConfigOptions.prototype.browserDisconnectTimeout;
 /** @type {number} */
karma.ConfigOptions.prototype.browserDisconnectTolerance;
 /** @type {number} */
karma.ConfigOptions.prototype.browserNoActivityTimeout;
 /** @type {!Array<string>} */
karma.ConfigOptions.prototype.browsers;
 /** @type {number} */
karma.ConfigOptions.prototype.captureTimeout;
 /** @type {!karma.ClientOptions} */
karma.ConfigOptions.prototype.client;
 /** @type {boolean} */
karma.ConfigOptions.prototype.colors;
 /** @type {number} */
karma.ConfigOptions.prototype.concurrency;
 /** @type {!Array<string>} */
karma.ConfigOptions.prototype.exclude;
 /** @type {!Array<(string|!karma.FilePattern)>} */
karma.ConfigOptions.prototype.files;
 /** @type {!Array<string>} */
karma.ConfigOptions.prototype.frameworks;
 /** @type {string} */
karma.ConfigOptions.prototype.hostname;
 /** @type {!ServerOptions} */
karma.ConfigOptions.prototype.httpsServerOptions;
 /** @type {string} */
karma.ConfigOptions.prototype.logLevel;
 /** @type {!Array<?>} */
karma.ConfigOptions.prototype.loggers;
 /** @type {!Array<?>} */
karma.ConfigOptions.prototype.plugins;
 /** @type {number} */
karma.ConfigOptions.prototype.port;
 /** @type {!Object<string,(string|!Array<string>)>} */
karma.ConfigOptions.prototype.preprocessors;
 /** @type {string} */
karma.ConfigOptions.prototype.protocol;
 /** @type {!Object<string,string>} */
karma.ConfigOptions.prototype.proxies;
 /** @type {boolean} */
karma.ConfigOptions.prototype.proxyValidateSSL;
 /** @type {number} */
karma.ConfigOptions.prototype.reportSlowerThan;
 /** @type {!Array<string>} */
karma.ConfigOptions.prototype.reporters;
 /** @type {boolean} */
karma.ConfigOptions.prototype.singleRun;
 /** @type {!Array<string>} */
karma.ConfigOptions.prototype.transports;
 /** @type {string} */
karma.ConfigOptions.prototype.urlRoot;
/**
 * @record
 * @struct
 */
karma.ClientOptions = function() {};
 /** @type {!Array<string>} */
karma.ClientOptions.prototype.args;
 /** @type {boolean} */
karma.ClientOptions.prototype.useIframe;
 /** @type {boolean} */
karma.ClientOptions.prototype.captureConsole;
/**
 * @record
 * @struct
 */
karma.FilePattern = function() {};
 /** @type {string} */
karma.FilePattern.prototype.pattern;
 /** @type {boolean} */
karma.FilePattern.prototype.watched;
 /** @type {boolean} */
karma.FilePattern.prototype.included;
 /** @type {boolean} */
karma.FilePattern.prototype.served;
 /** @type {boolean} */
karma.FilePattern.prototype.nocache;
 /** @type {!karma.Karma} */
var karma;

/* TODO: ExportAssignment in  */
