/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/react-touch/index.d.ts:

/* TODO: ImportDeclaration in  */

/**
 * @param {?=} config
 * @return {?}
 */
function defineHold(config) {}
/**
 * @record
 * @struct
 */
function HoldConfig() {}
 /** @type {number} */
HoldConfig.prototype.updateEvery;
 /** @type {number} */
HoldConfig.prototype.holdFor;
/**
 * @record
 * @struct
 */
function HoldableConfig() {}

/**
 * @param {?} callback
 * @return {?}
 */
HoldableConfig.prototype.holdProgress = function(callback) {};

/**
 * @param {?} callback
 * @return {?}
 */
HoldableConfig.prototype.holdComplete = function(callback) {};
/**
 * @record
 * @struct
 */
function HoldableProps() {}
 /** @type {?} */
HoldableProps.prototype.config;

/**
 * @return {void}
 */
HoldableProps.prototype.onHoldProgress = function() {};

/**
 * @return {void}
 */
HoldableProps.prototype.onHoldComplete = function() {};

/**
 * @return {void}
 */
HoldableProps.prototype.onMouseDown = function() {};

/**
 * @return {void}
 */
HoldableProps.prototype.onTouchStart = function() {};
/**
 * @constructor
 * @struct
 */
function Holdable() {}
/**
 * @record
 * @struct
 */
function DraggableStyle() {}
 /** @type {number} */
DraggableStyle.prototype.translateX;
 /** @type {number} */
DraggableStyle.prototype.translateY;
 /** @type {number} */
DraggableStyle.prototype.top;
 /** @type {number} */
DraggableStyle.prototype.left;
 /** @type {number} */
DraggableStyle.prototype.right;
 /** @type {number} */
DraggableStyle.prototype.bottom;
/**
 * @extends {DraggableStyle}
 * @record
 * @struct
 */
function DraggableCallbackArgument() {}
 /** @type {number} */
DraggableCallbackArgument.prototype.dx;
 /** @type {number} */
DraggableCallbackArgument.prototype.dy;

/** @typedef {?} */
var DraggableCallback;
/**
 * @record
 * @struct
 */
function DraggableProps() {}
 /** @type {?} */
DraggableProps.prototype.style;
 /** @type {?} */
DraggableProps.prototype.children;
/**
 * @constructor
 * @struct
 */
function Draggable() {}

/**
 * @param {?=} config
 * @return {?}
 */
function defineSwipe(config) {}
/**
 * @record
 * @struct
 */
function SwipeConfig() {}
 /** @type {number} */
SwipeConfig.prototype.swipeDistance;
/**
 * @record
 * @struct
 */
function SwipeableConfig() {}

/**
 * @param {number} current
 * @param {number} initial
 * @param {?} callback
 * @return {void}
 */
SwipeableConfig.prototype.onSwipeLeft = function(current, initial, callback) {};

/**
 * @param {number} current
 * @param {number} initial
 * @param {?} callback
 * @return {void}
 */
SwipeableConfig.prototype.onSwipeRight = function(current, initial, callback) {};

/**
 * @param {number} current
 * @param {number} initial
 * @param {?} callback
 * @return {void}
 */
SwipeableConfig.prototype.onSwipeUp = function(current, initial, callback) {};

/**
 * @param {number} current
 * @param {number} initial
 * @param {?} callback
 * @return {void}
 */
SwipeableConfig.prototype.onSwipeDown = function(current, initial, callback) {};
/**
 * @record
 * @struct
 */
function SwipeableProps() {}
 /** @type {?} */
SwipeableProps.prototype.config;

/**
 * @return {void}
 */
SwipeableProps.prototype.onSwipeLeft = function() {};

/**
 * @return {void}
 */
SwipeableProps.prototype.onSwipeRight = function() {};

/**
 * @return {void}
 */
SwipeableProps.prototype.onSwipeUp = function() {};

/**
 * @return {void}
 */
SwipeableProps.prototype.onSwipeDown = function() {};

/**
 * @return {void}
 */
SwipeableProps.prototype.onMouseDown = function() {};

/**
 * @return {void}
 */
SwipeableProps.prototype.onTouchStart = function() {};
/**
 * @constructor
 * @struct
 */
function Swipeable() {}

/** @const */
var moves = {};
/** @const {number} */
moves.UPLEFT;
/** @const {number} */
moves.UP;
/** @const {number} */
moves.UPRIGHT;
/** @const {number} */
moves.LEFT;
/** @const {number} */
moves.RIGHT;
/** @const {number} */
moves.DOWNRIGHT;
/** @const {number} */
moves.DOWN;
/** @const {number} */
moves.DOWNLEFT;
/**
 * @record
 * @struct
 */
function CustomGestureProps() {}
 /** @type {!Array<?>} */
CustomGestureProps.prototype.config;

/**
 * @return {void}
 */
CustomGestureProps.prototype.onGesture = function() {};
/**
 * @constructor
 * @struct
 */
function CustomGesture() {}
