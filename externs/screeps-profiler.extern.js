/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/screeps-profiler/index.d.ts:
/**
 * @record
 * @struct
 */
function ScreepsGameProfiler() {}

/**
 * Will run for the given number of ticks then will output the gathered information to the console.
 * 
 * @param {number} ticks
 * @param {string=} functionFilter
 * @return {void}
 */
ScreepsGameProfiler.prototype.profile = function(ticks, functionFilter) {};

/**
 * Will run for the given number of ticks, and will output the gathered information each tick to
 * the console. The can sometimes be useful for seeing spikes in performance.
 * 
 * @param {number} ticks
 * @param {string=} functionFilter
 * @return {void}
 */
ScreepsGameProfiler.prototype.stream = function(ticks, functionFilter) {};

/**
 * This will run for the given number of ticks, and will email the output to your registered
 * Screeps email address. Very useful for long running profiles.
 * 
 * @param {number} ticks
 * @param {string=} functionFilter
 * @return {void}
 */
ScreepsGameProfiler.prototype.email = function(ticks, functionFilter) {};

/**
 * This will run indefinitely, and will only output data when the output console command is run.
 * Very useful for long running profiles with lots of function calls.
 * 
 * @param {string=} functionFilter
 * @return {void}
 */
ScreepsGameProfiler.prototype.background = function(functionFilter) {};

/**
 * Print a report based on the current tick. The profiler will continue to operate normally.
 * This is currently the only way to get data from the background profile.
 * 
 * @param {number=} lineCount
 * @return {void}
 */
ScreepsGameProfiler.prototype.output = function(lineCount) {};

/**
 * Stops the profiler and resets its memory. This is currently the only way to stop a background profile.
 * @return {void}
 */
ScreepsGameProfiler.prototype.reset = function() {};

/**
 *  Restarts the profiler using the same options previously used to start it.
 * @return {void}
 */
ScreepsGameProfiler.prototype.restart = function() {};
/**
 * @record
 * @struct
 */
function ScreepsProfilerStatic() {}

/**
 * This line monkey patches the global prototypes. Should be called before and outside your main loop.
 * @return {void}
 */
ScreepsProfilerStatic.prototype.enable = function() {};

/**
 * @param {!Function} callback
 * @return {!Function}
 */
ScreepsProfilerStatic.prototype.wrap = function(callback) {};

/**
 * @param {!Function} constructor
 * @param {string} className
 * @return {void}
 */
ScreepsProfilerStatic.prototype.registerClass = function(constructor, className) {};

/**
 * Each of the functions on this object will be replaced with a profiler wrapper.
 * @param {?} object
 * @param {string} objectName
 * @return {void}
 */
ScreepsProfilerStatic.prototype.registerObject = function(object, objectName) {};

/**
 * @param {!Function} fn
 * @param {string=} fnName
 * @return {!Function}
 */
ScreepsProfilerStatic.prototype.registerFN = function(fn, fnName) {};
/**
 * @record
 * @struct
 */
function Game() {}
 /** @type {?} */
Game.prototype.profiler;
 /** @type {?} */
var Game;
 /** @type {?} */
var profiler;

/* TODO: ExportAssignment in  */
