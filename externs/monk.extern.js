/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/monk/index.d.ts:
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "monk"
/** @const */
tsickle_declare_module.monk = {};

/**
 * @param {string} database
 * @return {!m.Monk}
 */
tsickle_declare_module.monk.m = function(database) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.monk.m.promise = function() {};
 /** @type {string} */
tsickle_declare_module.monk.m.promise.prototype.type;

/**
 * @param {string} eventName
 * @param {!Function} fn
 * @return {void}
 */
tsickle_declare_module.monk.m.promise.prototype.on = function(eventName, fn) {};

/**
 * @param {!Function} fn
 * @return {!m.promise}
 */
tsickle_declare_module.monk.m.promise.prototype.error = function(fn) {};

/**
 * @param {!Function} fn
 * @return {!m.promise}
 */
tsickle_declare_module.monk.m.promise.prototype.success = function(fn) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.monk.m.Collection = function() {};

/**
 * @param {string|!Object=} hexstring_or_obj
 * @return {string}
 */
tsickle_declare_module.monk.m.Collection.prototype.id = function(hexstring_or_obj) {};

/**
 * @param {!Object=} obj
 * @return {!Object}
 */
tsickle_declare_module.monk.m.Collection.prototype.cast = function(obj) {};

/**
 * @param {!Object} needle
 * @param {!Function=} fn
 * @return {!m.promise}
 */
tsickle_declare_module.monk.m.Collection.prototype.count = function(needle, fn) {};

/**
 * @param {string} field
 * @param {!Object=} options
 * @param {!Function=} fn
 * @return {!m.promise}
 */
tsickle_declare_module.monk.m.Collection.prototype.distinct = function(field, options, fn) {};

/**
 * @param {!Function=} fn
 * @return {!m.promise}
 */
tsickle_declare_module.monk.m.Collection.prototype.drop = function(fn) {};

/**
 * @param {!Object} data
 * @param {!Object=} options
 * @param {!Function=} fn
 * @return {!m.promise}
 */
tsickle_declare_module.monk.m.Collection.prototype.insert = function(data, options, fn) {};

/**
 * @param {!Object} needle
 * @param {!Object=} options
 * @param {!Function=} fn
 * @return {!m.promise}
 */
tsickle_declare_module.monk.m.Collection.prototype.find = function(needle, options, fn) {};

/**
 * @param {!Object} needle
 * @param {!Object=} options
 * @param {!Function=} fn
 * @return {!m.promise}
 */
tsickle_declare_module.monk.m.Collection.prototype.findOne = function(needle, options, fn) {};

/**
 * findAndModify
 * 
 * \@api public
 * @param {!Object} needle
 * @param {!Object=} update
 * @param {!Array<string>=} filter
 * @param {!Object=} options
 * @param {!Function=} fn
 * @return {!m.promise}
 */
tsickle_declare_module.monk.m.Collection.prototype.findAndModify = function(needle, update, filter, options, fn) {};

/**
 * @param {string} id
 * @param {!Object=} options
 * @param {!Function=} fn
 * @return {!m.promise}
 */
tsickle_declare_module.monk.m.Collection.prototype.findById = function(id, options, fn) {};

/**
 * @param {!Object} needle
 * @param {!Object} update
 * @param {!Array<string>=} filter
 * @param {!Object=} options
 * @param {!Function=} fn
 * @return {!m.promise}
 */
tsickle_declare_module.monk.m.Collection.prototype.update = function(needle, update, filter, options, fn) {};

/**
 * @param {string} id
 * @param {!Object} update
 * @param {!Array<string>=} filter
 * @param {!Object=} options
 * @param {!Function=} fn
 * @return {!m.promise}
 */
tsickle_declare_module.monk.m.Collection.prototype.updateById = function(id, update, filter, options, fn) {};

/**
 * @param {!Object} needle
 * @param {!Object=} options
 * @param {!Function=} fn
 * @return {!m.promise}
 */
tsickle_declare_module.monk.m.Collection.prototype.remove = function(needle, options, fn) {};

/**
 * @param {string} id
 * @param {!Object=} options
 * @param {!Function=} fn
 * @return {!m.promise}
 */
tsickle_declare_module.monk.m.Collection.prototype.removeById = function(id, options, fn) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.monk.m.Monk = function() {};

/* TODO: CallSignature: tsickle_declare_module.monk.m */

/**
 * @return {void}
 */
tsickle_declare_module.monk.m.Monk.prototype.close = function() {};

/**
 * @param {string} collection
 * @return {!m.Collection}
 */
tsickle_declare_module.monk.m.Monk.prototype.get = function(collection) {};

/* TODO: ExportAssignment in tsickle_declare_module.monk */
