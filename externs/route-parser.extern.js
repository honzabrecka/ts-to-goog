/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/route-parser/index.d.ts:

/**
 * @constructor
 * @struct
 * Represents a route
 * \@example 
 * var route = new Route('/:foo/:bar');
 * \@example 
 * var route = new Route('/:foo/:bar');
 * @param {string} spec
 */
function Route(spec) {}

/**
 * Match a path against this route, returning the matched parameters if
 * it matches, false if not.
 * \@example 
 * var route = new Route('/this/is/my/route')
 * route.match('/this/is/my/route') // -> {}
 * \@example 
 * var route = new Route('/:one/:two')
 * route.match('/foo/bar/') // -> {one: 'foo', two: 'bar'}
 * @param {string} pathname
 * @return {(boolean|!Object<string,string>)}
 */
Route.prototype.match = function(pathname) {};

/**
 * Reverse a route specification to a path, returning false if it can't be
 * fulfilled
 * \@example 
 * var route = new Route('/:one/:two')
 * route.reverse({one: 'foo', two: 'bar'}) -> '/foo/bar'
 * @param {!Object<string,?>} params
 * @return {(string|boolean)}
 */
Route.prototype.reverse = function(params) {};

/* TODO: ExportAssignment in  */
