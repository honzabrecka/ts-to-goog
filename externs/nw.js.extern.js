/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/nw.js/index.d.ts:
/** @const */
var NWJS_Helpers = {};
/**
 * @extends {NodeJS.EventEmitter}
 * @constructor
 * @struct
 */
NWJS_Helpers.EventEmitter = function() {};
 /** @type {!NWJS_Helpers.EventEmitter} */
NWJS_Helpers.EventEmitter.EventEmitter;
 /** @type {number} */
NWJS_Helpers.EventEmitter.defaultMaxListeners;

/**
 * @param {!NWJS_Helpers.EventEmitter} emitter
 * @param {string} event
 * @return {number}
 */
NWJS_Helpers.EventEmitter.listenerCount = function(emitter, event) {};

/**
 * @param {string} event
 * @param {!Function} listener
 * @return {EventEmitter}
 */
NWJS_Helpers.EventEmitter.prototype.addListener = function(event, listener) {};

/**
 * @param {string} event
 * @param {!Function} listener
 * @return {EventEmitter}
 */
NWJS_Helpers.EventEmitter.prototype.on = function(event, listener) {};

/**
 * @param {string} event
 * @param {!Function} listener
 * @return {EventEmitter}
 */
NWJS_Helpers.EventEmitter.prototype.once = function(event, listener) {};

/**
 * @param {string} event
 * @param {!Function} listener
 * @return {EventEmitter}
 */
NWJS_Helpers.EventEmitter.prototype.removeListener = function(event, listener) {};

/**
 * @param {string=} event
 * @return {EventEmitter}
 */
NWJS_Helpers.EventEmitter.prototype.removeAllListeners = function(event) {};

/**
 * @param {number} n
 * @return {EventEmitter}
 */
NWJS_Helpers.EventEmitter.prototype.setMaxListeners = function(n) {};

/**
 * @return {number}
 */
NWJS_Helpers.EventEmitter.prototype.getMaxListeners = function() {};

/**
 * @param {string} event
 * @return {!Array<!Function>}
 */
NWJS_Helpers.EventEmitter.prototype.listeners = function(event) {};

/**
 * @param {string} event
 * @param {...?} args
 * @return {boolean}
 */
NWJS_Helpers.EventEmitter.prototype.emit = function(event, args) {};

/**
 * @param {string} type
 * @return {number}
 */
NWJS_Helpers.EventEmitter.prototype.listenerCount = function(type) {};
/**
 * @record
 * @struct
 */
NWJS_Helpers.clip = function() {};

/**
 * Write `data` of `type` to the clipboard.
 * 
 * @param {string} data {string} the data to write to the clipboard
 * @param {string=} type {string} (Optional) the type of the data. Support text, png, jpeg, html and rtf. By default, type is set to "text".
 * @param {boolean=} raw {boolean} (Optional) requiring raw image data. This option is only valid if type is png or jpeg. By default, raw is set to false.
 * @return {void}
 */
NWJS_Helpers.clip.prototype.set = function(data, type, raw) {};

/**
 * Get the data of `type` from clipboard.
 * 
 * @param {string=} type {string} (Optional) the type of the data. Support text, png, jpeg, html and rtf. By default, type is set to "text".
 * @param {boolean=} raw {boolean} (Optional) requiring raw image data. This option is only valid if type is png or jpeg.
 * @return {string}
 */
NWJS_Helpers.clip.prototype.get = function(type, raw) {};

/**
 * Get an array contains list of available types of data in clipboard currenly.
 * You can use the returned list as a suggestion to get the right data from clipboard.
 * 
 * @return {!Array<string>}
 */
NWJS_Helpers.clip.prototype.readAvailableTypes = function() {};

/**
 * Clear the clipboard.
 * @return {void}
 */
NWJS_Helpers.clip.prototype.clear = function() {};
/**
 * @record
 * @struct
 */
NWJS_Helpers.MenuOption = function() {};
 /** @type {string} */
NWJS_Helpers.MenuOption.prototype.type;
/**
 * @record
 * @struct
 */
NWJS_Helpers.CreateMacBuiltinOption = function() {};
 /** @type {boolean} */
NWJS_Helpers.CreateMacBuiltinOption.prototype.hideEdit;
 /** @type {boolean} */
NWJS_Helpers.CreateMacBuiltinOption.prototype.hideWindow;
/**
 * @record
 * @struct
 */
NWJS_Helpers.MenuItemOption = function() {};
 /** @type {string} */
NWJS_Helpers.MenuItemOption.prototype.label;
 /** @type {string} */
NWJS_Helpers.MenuItemOption.prototype.icon;
 /** @type {string} */
NWJS_Helpers.MenuItemOption.prototype.tooltip;
 /** @type {string} */
NWJS_Helpers.MenuItemOption.prototype.type;
 /** @type {!Function} */
NWJS_Helpers.MenuItemOption.prototype.click;
 /** @type {boolean} */
NWJS_Helpers.MenuItemOption.prototype.enabled;
 /** @type {boolean} */
NWJS_Helpers.MenuItemOption.prototype.checked;
 /** @type {!nw.Menu} */
NWJS_Helpers.MenuItemOption.prototype.submenu;
 /** @type {string} */
NWJS_Helpers.MenuItemOption.prototype.key;
 /** @type {string} */
NWJS_Helpers.MenuItemOption.prototype.modifiers;
/**
 * @record
 * @struct
 */
NWJS_Helpers.screen = function() {};
 /** @type {number} */
NWJS_Helpers.screen.prototype.id;
 /** @type {{x: number, y: number, width: number, height: number}} */
NWJS_Helpers.screen.prototype.bounds;
 /** @type {{x: number, y: number, width: number, height: number}} */
NWJS_Helpers.screen.prototype.work_area;
 /** @type {number} */
NWJS_Helpers.screen.prototype.scaleFactor;
 /** @type {boolean} */
NWJS_Helpers.screen.prototype.isBuiltIn;
 /** @type {number} */
NWJS_Helpers.screen.prototype.rotation;
 /** @type {number} */
NWJS_Helpers.screen.prototype.touchSupport;
/**
 * @record
 * @struct
 */
NWJS_Helpers.DesktopCaptureMonitor = function() {};
 /** @type {boolean} */
NWJS_Helpers.DesktopCaptureMonitor.prototype.started;

/**
 * The DesktopCaptureMonitor will start monitoring the system and trigger the the events.
 * 
 * @param {boolean} should_include_screens {boolean} Whether should include screens
 * @param {boolean} should_include_windows {boolean} Whether should include windows
 * @return {void}
 */
NWJS_Helpers.DesktopCaptureMonitor.prototype.start = function(should_include_screens, should_include_windows) {};

/**
 * The DesktopCaptureMonitor will stop monitoring the system.
 * @return {void}
 */
NWJS_Helpers.DesktopCaptureMonitor.prototype.stop = function() {};

/**
 * Register and return a valid stream id passed into chromeMediaSourceId in getUserMedia constraints.
 * 
 * @param {string} id {string} valid stream id.
 * @return {void}
 */
NWJS_Helpers.DesktopCaptureMonitor.prototype.registerStream = function(id) {};

/**
 * Emit when a new source was added.
 * 
 * Emit when a source was removed.
 * 
 * Emit when the Z-order of a source changed (this may change for windows as others are focused).
 * 
 * Emit when the name of the source has changed. This can happen when a window changes title.
 * 
 * Emit when the thumbnail of a source changed.
 * 
 * @param {string} event {string} Event name
 * @param {!Function|function(string, string, number, string, boolean): ?|function(number): ?|function(string, number, number): ?|function(string, string): ?} listener {Function(id?,name?,order?,type?,primary?)} The callback that handles the `added` event.
 * - (optional) id {string} Is the media id.
 * - (optional) name {string} Is the title of the window or screen.
 * - (optional) order {number} Is the z-order of the windows, if screens are selected they will appear first.
 * - (optional) type {string} Type of the stream: "screen", "window", "other" or "unknown".
 * - (optional) primary {boolean} This will be true if the source is the primary monitor. (Windows OS only) / {Function(order?)} The callback that handles the `remove` event.
 * - (optional) order {number} Is the order of the media source that is no longer capturable. / {Function(id?,new_order?,old_order?)} The callback that handles the `orderchanged` event.
 * - (optional) id {string} Is the media id of the screen or window that has changed z-order.
 * - (optional) new_order {number} Is the new z-order.
 * - (optional) old_order {number} Is the old z-order. / {Function(id?,new_order?,old_order?)} The callback that handles the `namechanged ` event.
 * - (optional) id {string} Is the media id of the screen or window that has a name changed.
 * - (optional) name {string} Is the new name of the screen or window. / {Function(id?,new_order?,old_order?)} The callback that handles the `thumbnailchanged ` event.
 * - (optional) id {string} Is the media id of the screen or window that has an updated thumbnail.
 * - (optional) name {string} Is the base64 encoded png of the thumbnail.
 * @return {DesktopCaptureMonitor}
 */
NWJS_Helpers.DesktopCaptureMonitor.prototype.on = function(event, listener) {};
/**
 * @record
 * @struct
 */
NWJS_Helpers.ShortcutOption = function() {};
 /** @type {!Function} */
NWJS_Helpers.ShortcutOption.prototype.active;
 /** @type {function(string): ?} */
NWJS_Helpers.ShortcutOption.prototype.failed;
 /** @type {string} */
NWJS_Helpers.ShortcutOption.prototype.key;
/**
 * @record
 * @struct
 */
NWJS_Helpers.TrayOption = function() {};
 /** @type {string} */
NWJS_Helpers.TrayOption.prototype.title;
 /** @type {string} */
NWJS_Helpers.TrayOption.prototype.tooltip;
 /** @type {string} */
NWJS_Helpers.TrayOption.prototype.icon;
 /** @type {string} */
NWJS_Helpers.TrayOption.prototype.alticon;
 /** @type {boolean} */
NWJS_Helpers.TrayOption.prototype.iconsAreTemplates;
 /** @type {!nw.Menu} */
NWJS_Helpers.TrayOption.prototype.menu;
/**
 * @record
 * @struct
 */
NWJS_Helpers.PrintOption = function() {};
 /** @type {string} */
NWJS_Helpers.PrintOption.prototype.printer;
 /** @type {string} */
NWJS_Helpers.PrintOption.prototype.pdf_path;
 /** @type {boolean} */
NWJS_Helpers.PrintOption.prototype.headerFooterEnabled;
 /** @type {boolean} */
NWJS_Helpers.PrintOption.prototype.landscape;
 /** @type {!JSON} */
NWJS_Helpers.PrintOption.prototype.mediaSize;
 /** @type {boolean} */
NWJS_Helpers.PrintOption.prototype.shouldPrintBackgrounds;
/**
 * @record
 * @struct
 */
NWJS_Helpers.CapturePageConfig = function() {};
 /** @type {string} */
NWJS_Helpers.CapturePageConfig.prototype.format;
 /** @type {string} */
NWJS_Helpers.CapturePageConfig.prototype.datatype;
/**
 * @record
 * @struct
 */
NWJS_Helpers.Cookies = function() {};
 /** @type {{addListener: function(function(!NWJS_Helpers.CookiesOnChangedCallbackChangeInfo): void): void}} */
NWJS_Helpers.Cookies.prototype.onChanged;

/**
 * Retrieves information about a single cookie.
 * 
 * @param {!NWJS_Helpers.CookiesGetDetails} details {Objet} Details to identify the cookie being retrieved.
 * @param {function(!NWJS_Helpers.Cookie): void} callback {function(cookie?)} The callback when cookie retrieved.
 * - (Optional) cookie {Cookie} Contains details about the cookie. This parameter is null if no such cookie was found.
 * @return {void}
 */
NWJS_Helpers.Cookies.prototype.get = function(details, callback) {};

/**
 * Retrieves all cookies from a single cookie store that match the given information.
 * 
 * @param {!NWJS_Helpers.CookiesGetAllDetails} details {Objet} Information to filter the cookies being retrieved.
 * @param {function(!Array<!NWJS_Helpers.Cookie>): void} callback {function(cookies?)} The callback when cookies retrieved.
 * - (Optional) cookies {Cookie[]} All the existing, unexpired cookies that match the given cookie info.
 * @return {void}
 */
NWJS_Helpers.Cookies.prototype.getAll = function(details, callback) {};

/**
 * Sets a cookie with the given cookie data; may overwrite equivalent cookies if they exist.
 * 
 * @param {!NWJS_Helpers.CookiesSetDetails} details {Objet} Details about the cookie being set.
 * @param {function(!NWJS_Helpers.Cookie): void} callback {function(cookie?)} The callback when cookie has been set.
 * - (Optional) cookie {Cookie} Contains details about the cookie that's been set. If setting failed for any reason, this will be "null", and "chrome.runtime.lastError" will be set.
 * @return {void}
 */
NWJS_Helpers.Cookies.prototype.set = function(details, callback) {};

/**
 * Deletes a cookie by name.
 * 
 * @param {!NWJS_Helpers.CookiesRemoveDetails} details {Objet} Information to identify the cookie to remove.
 * @param {function(!NWJS_Helpers.CookiesRemovedDetails): void} callback {function(cookie?)} The callback when cookie has been set.
 * - (Optional) details {Objet} Contains details about the cookie that's been removed. If removal failed for any reason, this will be "null", and "chrome.runtime.lastError" will be set.
 * @return {void}
 */
NWJS_Helpers.Cookies.prototype.remove = function(details, callback) {};
/**
 * @record
 * @struct
 */
NWJS_Helpers.Cookie = function() {};
 /** @type {string} */
NWJS_Helpers.Cookie.prototype.name;
 /** @type {string} */
NWJS_Helpers.Cookie.prototype.value;
 /** @type {string} */
NWJS_Helpers.Cookie.prototype.domain;
 /** @type {boolean} */
NWJS_Helpers.Cookie.prototype.hostOnly;
 /** @type {string} */
NWJS_Helpers.Cookie.prototype.path;
 /** @type {boolean} */
NWJS_Helpers.Cookie.prototype.secure;
 /** @type {boolean} */
NWJS_Helpers.Cookie.prototype.httpOnly;
 /** @type {string} */
NWJS_Helpers.Cookie.prototype.sameSite;
 /** @type {boolean} */
NWJS_Helpers.Cookie.prototype.session;
 /** @type {number} */
NWJS_Helpers.Cookie.prototype.expirationDate;
 /** @type {string} */
NWJS_Helpers.Cookie.prototype.storeId;
/**
 * @record
 * @struct
 */
NWJS_Helpers.CookiesGetDetails = function() {};
 /** @type {string} */
NWJS_Helpers.CookiesGetDetails.prototype.url;
 /** @type {string} */
NWJS_Helpers.CookiesGetDetails.prototype.name;
 /** @type {string} */
NWJS_Helpers.CookiesGetDetails.prototype.storeId;
/**
 * @record
 * @struct
 */
NWJS_Helpers.CookiesGetAllDetails = function() {};
 /** @type {string} */
NWJS_Helpers.CookiesGetAllDetails.prototype.url;
 /** @type {string} */
NWJS_Helpers.CookiesGetAllDetails.prototype.name;
 /** @type {string} */
NWJS_Helpers.CookiesGetAllDetails.prototype.domain;
 /** @type {string} */
NWJS_Helpers.CookiesGetAllDetails.prototype.path;
 /** @type {boolean} */
NWJS_Helpers.CookiesGetAllDetails.prototype.secure;
 /** @type {boolean} */
NWJS_Helpers.CookiesGetAllDetails.prototype.session;
 /** @type {string} */
NWJS_Helpers.CookiesGetAllDetails.prototype.storeId;
/**
 * @record
 * @struct
 */
NWJS_Helpers.CookiesSetDetails = function() {};
 /** @type {string} */
NWJS_Helpers.CookiesSetDetails.prototype.url;
 /** @type {string} */
NWJS_Helpers.CookiesSetDetails.prototype.name;
 /** @type {string} */
NWJS_Helpers.CookiesSetDetails.prototype.value;
 /** @type {string} */
NWJS_Helpers.CookiesSetDetails.prototype.domain;
 /** @type {string} */
NWJS_Helpers.CookiesSetDetails.prototype.path;
 /** @type {boolean} */
NWJS_Helpers.CookiesSetDetails.prototype.secure;
 /** @type {boolean} */
NWJS_Helpers.CookiesSetDetails.prototype.httpOnly;
 /** @type {string} */
NWJS_Helpers.CookiesSetDetails.prototype.sameSite;
 /** @type {number} */
NWJS_Helpers.CookiesSetDetails.prototype.expirationDate;
 /** @type {string} */
NWJS_Helpers.CookiesSetDetails.prototype.storeId;
/**
 * @record
 * @struct
 */
NWJS_Helpers.CookiesRemoveDetails = function() {};
 /** @type {string} */
NWJS_Helpers.CookiesRemoveDetails.prototype.url;
 /** @type {string} */
NWJS_Helpers.CookiesRemoveDetails.prototype.name;
 /** @type {string} */
NWJS_Helpers.CookiesRemoveDetails.prototype.storeId;
/**
 * @record
 * @struct
 */
NWJS_Helpers.CookiesRemovedDetails = function() {};
 /** @type {string} */
NWJS_Helpers.CookiesRemovedDetails.prototype.url;
 /** @type {string} */
NWJS_Helpers.CookiesRemovedDetails.prototype.name;
 /** @type {string} */
NWJS_Helpers.CookiesRemovedDetails.prototype.storeId;
/**
 * @record
 * @struct
 */
NWJS_Helpers.CookiesOnChangedCallbackChangeInfo = function() {};
 /** @type {boolean} */
NWJS_Helpers.CookiesOnChangedCallbackChangeInfo.prototype.removed;
 /** @type {!NWJS_Helpers.Cookie} */
NWJS_Helpers.CookiesOnChangedCallbackChangeInfo.prototype.cookie;
 /** @type {string} */
NWJS_Helpers.CookiesOnChangedCallbackChangeInfo.prototype.cause;
/**
 * @record
 * @struct
 */
NWJS_Helpers.WinPolicy = function() {};

/**
 * Ignore the request, navigation won’t happen.
 * @return {void}
 */
NWJS_Helpers.WinPolicy.prototype.ignore = function() {};

/**
 * Force the link to be opened in the same frame
 * @return {void}
 */
NWJS_Helpers.WinPolicy.prototype.forceCurrent = function() {};

/**
 * Force the link to be a downloadable, or open by external program
 * @return {void}
 */
NWJS_Helpers.WinPolicy.prototype.forceDownload = function() {};

/**
 * Force the link to be opened in a new window
 * @return {void}
 */
NWJS_Helpers.WinPolicy.prototype.forceNewWindow = function() {};

/**
 * Force the link to be opened in a new popup window
 * @return {void}
 */
NWJS_Helpers.WinPolicy.prototype.forceNewPopup = function() {};

/**
 * Control the options for the new popup window.
 * 
 * @param {!NWJS_Helpers.WindowOption} m {Object} The object is in the same format as the Window subfields in manifest format.
 * @return {void}
 */
NWJS_Helpers.WinPolicy.prototype.setNewWindowManifest = function(m) {};
/**
 * @record
 * @struct
 */
NWJS_Helpers.WindowOption = function() {};
 /** @type {string} */
NWJS_Helpers.WindowOption.prototype.id;
 /** @type {string} */
NWJS_Helpers.WindowOption.prototype.title;
 /** @type {number} */
NWJS_Helpers.WindowOption.prototype.width;
 /** @type {number} */
NWJS_Helpers.WindowOption.prototype.height;
 /** @type {string} */
NWJS_Helpers.WindowOption.prototype.icon;
 /** @type {string} */
NWJS_Helpers.WindowOption.prototype.position;
 /** @type {number} */
NWJS_Helpers.WindowOption.prototype.min_width;
 /** @type {number} */
NWJS_Helpers.WindowOption.prototype.min_height;
 /** @type {number} */
NWJS_Helpers.WindowOption.prototype.max_width;
 /** @type {number} */
NWJS_Helpers.WindowOption.prototype.max_height;
 /** @type {boolean} */
NWJS_Helpers.WindowOption.prototype.as_desktop;
 /** @type {boolean} */
NWJS_Helpers.WindowOption.prototype.resizable;
 /** @type {boolean} */
NWJS_Helpers.WindowOption.prototype.always_on_top;
 /** @type {boolean} */
NWJS_Helpers.WindowOption.prototype.visible_on_all_workspaces;
 /** @type {boolean} */
NWJS_Helpers.WindowOption.prototype.fullscreen;
 /** @type {boolean} */
NWJS_Helpers.WindowOption.prototype.show_in_taskbar;
 /** @type {boolean} */
NWJS_Helpers.WindowOption.prototype.frame;
 /** @type {boolean} */
NWJS_Helpers.WindowOption.prototype.show;
 /** @type {boolean} */
NWJS_Helpers.WindowOption.prototype.kiosk;
 /** @type {boolean} */
NWJS_Helpers.WindowOption.prototype.transparent;
/**
 * @extends {NWJS_Helpers.WindowOption}
 * @record
 * @struct
 */
NWJS_Helpers.WindowOpenOption = function() {};
 /** @type {boolean} */
NWJS_Helpers.WindowOpenOption.prototype.new_instance;
 /** @type {string} */
NWJS_Helpers.WindowOpenOption.prototype.inject_js_start;
 /** @type {string} */
NWJS_Helpers.WindowOpenOption.prototype.inject_js_end;
 /** @type {string} */
NWJS_Helpers.WindowOpenOption.prototype.id;
/**
 * @record
 * @struct
 */
NWJS_Helpers.WinNavigationPolicy = function() {};

/**
 * Ignore the request, navigation won’t happen.
 * @return {void}
 */
NWJS_Helpers.WinNavigationPolicy.prototype.ignore = function() {};
/**
 * @record
 * @struct
 */
NWJS_Helpers.win = function() {};
 /** @type {!Object} */
NWJS_Helpers.win.prototype.window;
 /** @type {number} */
NWJS_Helpers.win.prototype.x;
 /** @type {number} */
NWJS_Helpers.win.prototype.y;
 /** @type {number} */
NWJS_Helpers.win.prototype.width;
 /** @type {number} */
NWJS_Helpers.win.prototype.height;
 /** @type {string} */
NWJS_Helpers.win.prototype.title;
 /** @type {!nw.Menu} */
NWJS_Helpers.win.prototype.menu;
 /** @type {boolean} */
NWJS_Helpers.win.prototype.isFullscreen;
 /** @type {boolean} */
NWJS_Helpers.win.prototype.isTransparent;
 /** @type {boolean} */
NWJS_Helpers.win.prototype.isKioskMode;
 /** @type {number} */
NWJS_Helpers.win.prototype.zoomLevel;
 /** @type {!NWJS_Helpers.Cookies} */
NWJS_Helpers.win.prototype.cookies;

/**
 * Moves a window's left and top edge to the specified coordinates.
 * 
 * @param {number} x {Integer} Offset to the left of the screen
 * @param {number} y {Integer} Offset to the top of the screen
 * @return {void}
 */
NWJS_Helpers.win.prototype.moveTo = function(x, y) {};

/**
 * Moves a window a specified number of pixels relative to its current coordinates.
 * 
 * @param {number} x {Integer} Horizontal offset
 * @param {number} y {Integer} Vertical offset
 * @return {void}
 */
NWJS_Helpers.win.prototype.moveBy = function(x, y) {};

/**
 * Resizes a window to the specified width and height.
 * 
 * @param {number} width {Integer} The width of the window
 * @param {number} height {Integer} The height of the window
 * @return {void}
 */
NWJS_Helpers.win.prototype.resizeTo = function(width, height) {};

/**
 * Resizes a window by the specified amount.
 * 
 * @param {number} width {Integer} The offset width of the window
 * @param {number} height {Integer} The offset height of the window
 * @return {void}
 */
NWJS_Helpers.win.prototype.resizeBy = function(width, height) {};

/**
 * Focus on the window.
 * @return {void}
 */
NWJS_Helpers.win.prototype.focus = function() {};

/**
 * Move focus away.
 * @return {void}
 */
NWJS_Helpers.win.prototype.blur = function() {};

/**
 * Show the window if it's not shown.
 * 
 * @param {boolean=} is_show {boolean} (Optional) Specify whether the window should be shown or hidden. It's set to true by default.
 * @return {void}
 */
NWJS_Helpers.win.prototype.show = function(is_show) {};

/**
 * Hide the window.
 * @return {void}
 */
NWJS_Helpers.win.prototype.hide = function() {};

/**
 * Close current window.
 * 
 * @param {boolean=} force {boolean} (Optional) Specify whether to close the window forcely and bypass close event.
 * @return {void}
 */
NWJS_Helpers.win.prototype.close = function(force) {};

/**
 * Reloads the current window.
 * @return {void}
 */
NWJS_Helpers.win.prototype.reload = function() {};

/**
 * Reloads the current page by starting a new renderer process from scratch.
 * @return {void}
 */
NWJS_Helpers.win.prototype.reloadDev = function() {};

/**
 * Like reload(), but don't use caches (aka 'shift-reload').
 * @return {void}
 */
NWJS_Helpers.win.prototype.reloadIgnoringCache = function() {};

/**
 * Maximize the window on GTK and Windows, and zoom the window on Mac OS X.
 * @return {void}
 */
NWJS_Helpers.win.prototype.maximize = function() {};

/**
 * Minimize the window to task bar on Windows, iconify the window on GTK, and miniaturize the window on Mac OS X.
 * @return {void}
 */
NWJS_Helpers.win.prototype.minimize = function() {};

/**
 * Restore window to previous state after the window is minimized.
 * @return {void}
 */
NWJS_Helpers.win.prototype.restore = function() {};

/**
 * Make the window fullscreen.
 * @return {void}
 */
NWJS_Helpers.win.prototype.enterFullscreen = function() {};

/**
 * Leave the fullscreen mode.
 * @return {void}
 */
NWJS_Helpers.win.prototype.leaveFullscreen = function() {};

/**
 * Toggle the fullscreen mode.
 * @return {void}
 */
NWJS_Helpers.win.prototype.toggleFullscreen = function() {};

/**
 * Enter the Kiosk mode.
 * @return {void}
 */
NWJS_Helpers.win.prototype.enterKioskMode = function() {};

/**
 * Leave the Kiosk mode.
 * @return {void}
 */
NWJS_Helpers.win.prototype.leaveKioskMode = function() {};

/**
 * Toggle the kiosk mode.
 * @return {void}
 */
NWJS_Helpers.win.prototype.toggleKioskMode = function() {};

/**
 * Open the devtools to inspect the window.
 * 
 * @param {(string|!HTMLIFrameElement)=} iframe {Integer} (Optional) the id or the element of the <iframe> to be jailed on. By default, the DevTools is shown for entire window.
 * @param {function(!Window): void=} callback {function(dev_win?)} callback with the native window of the DevTools window.
 * - (optional) dev_win {window} Window object that you can use any properties and methods of Window except the events
 * @return {void}
 */
NWJS_Helpers.win.prototype.showDevTools = function(iframe, callback) {};

/**
 * Close the devtools window.
 * @return {void}
 */
NWJS_Helpers.win.prototype.closeDevTools = function() {};

/**
 * Enumerate the printers in the system.
 * 
 * @param {function(!Array<!JSON>): void} callback {function(dev_win?)} callback with the native window of the DevTools window.
 * - (optional) printers {JSON[]} An array of JSON objects for the printer information.
 * @return {void}
 */
NWJS_Helpers.win.prototype.getPrinters = function(callback) {};

/**
 * Query the status of devtools window.
 * @return {boolean}
 */
NWJS_Helpers.win.prototype.isDevToolsOpen = function() {};

/**
 * Print the web contents in the window without the need for user’s interaction.
 * 
 * @param {(!JSON|!NWJS_Helpers.PrintOption)} options {Object} Specify whether to close the window forcely and bypass close event.
 * @return {void}
 */
NWJS_Helpers.win.prototype.print = function(options) {};

/**
 * Set window's maximum size.
 * 
 * @param {number} width {Integer} The maximum width of the window
 * @param {number} height {Integer} The maximum height of the window
 * @return {void}
 */
NWJS_Helpers.win.prototype.setMaximumSize = function(width, height) {};

/**
 * Set window's minimum size.
 * 
 * @param {number} width {Integer} The minimum width of the window
 * @param {number} height {Integer} The minimum height of the window
 * @return {void}
 */
NWJS_Helpers.win.prototype.setMinimumSize = function(width, height) {};

/**
 * Set whether window is resizable.
 * 
 * @param {boolean} resizable {boolean} Whether the window can be resized
 * @return {void}
 */
NWJS_Helpers.win.prototype.setResizable = function(resizable) {};

/**
 * Sets the widget to be on top of all other windows in the window system.
 * 
 * @param {boolean} top {boolean} Whether the window should always be on top
 * @return {void}
 */
NWJS_Helpers.win.prototype.setAlwaysOnTop = function(top) {};

/**
 * For platforms that support multiple workspaces (currently Mac OS X and Linux), this allows NW.js windows to be visible on all workspaces simultaneously.
 * 
 * @param {boolean} visible {boolean} Whether the window should be visible on all workspaces
 * @return {void}
 */
NWJS_Helpers.win.prototype.setVisibleOnAllWorkspaces = function(visible) {};

/**
 * Returns a a boolean indicating if the platform (currently Mac OS X and Linux) support Window API method setVisibleOnAllWorkspace(Boolean).
 * @return {boolean}
 */
NWJS_Helpers.win.prototype.canSetVisibleOnAllWorkspaces = function() {};

/**
 * Move window to specified position.
 * 
 * @param {string} position {string} The position of the window. There are three valid positions: null or center or mouse
 * @return {void}
 */
NWJS_Helpers.win.prototype.setPosition = function(position) {};

/**
 * Control whether to show window in taskbar or dock.
 * 
 * @param {boolean} show {boolean} Whether show in task bar
 * @return {void}
 */
NWJS_Helpers.win.prototype.setShowInTaskbar = function(show) {};

/**
 * Request the user’s attension by making the window flashes in the task bar.
 * 
 * @param {(number|boolean)} attension {boolean | number} If a Boolean, it indicates to request or cancel user’s attension. If an Integer, it indicates the number of times the window flashes.
 * @return {void}
 */
NWJS_Helpers.win.prototype.requestAttention = function(attension) {};

/**
 * Captures the visible area of the window.
 * 
 * @param {function((string|!Object)): void} callback {string} The callback when finished capturing the window
 * - (optional) arg {base64string|Buffer} Captured page data.
 * @param {(string|!NWJS_Helpers.CapturePageConfig)=} config {string|CapturePageConfig} (Optional) Conig how captured page returned.
 * @return {void}
 */
NWJS_Helpers.win.prototype.capturePage = function(callback, config) {};

/**
 * Show window progress bar.
 * 
 * @param {number} progress {number} valid values within [0, 1]. Setting to negative value (<0) removes the progress bar.
 * @return {void}
 */
NWJS_Helpers.win.prototype.setProgressBar = function(progress) {};

/**
 * Set the badge label on the window icon in taskbar or dock.
 * 
 * @param {string} label {string} Badge label.
 * @return {void}
 */
NWJS_Helpers.win.prototype.setBadgeLabel = function(label) {};

/**
 * Execute a piece of JavaScript in the frame.
 * 
 * @param {!HTMLIFrameElement} frame {HTMLIFrameElement} The frame to execute in. If iframe is null, it assumes in current window / frame.
 * @param {string} script {string} The source code of the script to be executed
 * @return {void}
 */
NWJS_Helpers.win.prototype.eval = function(frame, script) {};

/**
 * Load and execute the compiled snapshot in the frame.
 * 
 * @param {!HTMLIFrameElement} frame {HTMLIFrameElement} The frame to execute in. If iframe is null, it assumes in current window / frame.
 * @param {string} path {string} the path of the snapshot file generated by nwjc
 * @return {void}
 */
NWJS_Helpers.win.prototype.evalNWBin = function(frame, path) {};

/**
 * The close event is a special event that will affect the result of the Window.close() function.
 * 
 * The closed event is emitted after corresponding window is closed.
 * 
 * Emitted when the window starts to reload, normally you cannot catch this event because usually it’s emitted before you actually setup the callback.
 * 
 * Emitted when the window is fully loaded, this event behaves the same with window.onload, but doesn’t rely on the DOM.
 * 
 * Emitted when the document object in this window or a child iframe is available, after all files are loaded, but before DOM is constructed or any script is run.
 * 
 * Emitted when the document object in this window or a child iframe is unloaded, but before the onunload event is emitted.
 * 
 * Emitted when window gets focus.
 * 
 * Emitted when window loses focus.
 * 
 * Emitted when window is minimized.
 * 
 * Emitted when window is restored from minimize, maximize and fullscreen state.
 * 
 * Emitted when window is maximized.
 * 
 * Emitted after window is moved.
 * 
 * Emitted after window is resized.
 * 
 * Emitted when window enters fullscreen state.
 * 
 * Emitted when window zooming changed.
 * 
 * Emitted after Devtools is closed.
 * 
 * Emitted when a new window is requested from this window or a child iframe.
 * 
 * Emitted when navigating to another page.
 * 
 * @param {string} event {string} Event name
 * @param {!Function|function(?): ?|function(): ?|function(number, number): ?|function(number): ?|function(?, string, !NWJS_Helpers.WinPolicy): ?|function(?, string, !NWJS_Helpers.WinNavigationPolicy): ?} listener {function(byCommandQ?)} The callback that handles the `close` event.
 * - (optional) byCommandQ {string} Whether it’s being closed by ⌘+Q. / {function} The callback that handles the `closed` event. / {function} The callback that handles the `loading` event. / {function} The callback that handles the `loaded` event. / {function(byCommandQ?)} The callback that handles the `document-start` event.
 * - (optional) frame {HTMLIFrameElement|any} Is the iframe object, or null if the event is for the window.. / {function(byCommandQ?)} The callback that handles the `document-end` event.
 * - (optional) frame {HTMLIFrameElement|any} Is the iframe object, or null if the event is for the window.. / {function} The callback that handles the `focus` event. / {function} The callback that handles the `blur` event. / {function} The callback that handles the `minimize` event. / {function} The callback that handles the `restore` event. / {function} The callback that handles the `maximize` event. / {function(byCommandQ?)} The callback that handles the `move` event.
 * - (optional) x {Integer} The new location of the left corner of the window.
 * - (optional) y {Integer} The new location of the top corner of the window. / {function(byCommandQ?)} The callback that handles the `resize` event.
 * - (optional) width {Integer} The new width of the window.
 * - (optional) height {Integer} The new height of the window. / {function} The callback that handles the `enter-fullscreen` event. / {function(byCommandQ?)} The callback that handles the `zoom` event.
 * - (optional) zoom {Integer} Indicating the new zoom level / {function} The callback that handles the `devtools-closed` event. / {function(byCommandQ?)} The callback that handles the `new-win-policy` event.
 * - (optional) frame {HTMLIFrameElement} Is the object of the child iframe where the request is from, or null if it’s from the top window.
 * - (optional) url {string} Is the address of the requested link
 * - (optional) policy {Object} Is an object contain window policy. / {function(byCommandQ?)} The callback that handles the `navigation` event.
 * - (optional) frame {HTMLIFrameElement} Is the object of the child iframe where the request is from, or null if it’s from the top window.
 * - (optional) url {string} Is the address of the requested link
 * - (optional) policy {Object} Is an object contain window policy.
 * @return {win}
 */
NWJS_Helpers.win.prototype.on = function(event, listener) {};
/** @const */
var nw = {};
/**
 * @record
 * @struct
 */
nw.App = function() {};
 /** @type {!Array<string>} */
nw.App.prototype.argv;
 /** @type {!Array<string>} */
nw.App.prototype.fullArgv;
 /** @type {!Array<!Object>} */
nw.App.prototype.filteredArgv;
 /** @type {string} */
nw.App.prototype.dataPath;
 /** @type {!JSON} */
nw.App.prototype.manifest;

/**
 * Clear the HTTP cache in memory and the one on disk. This method call is synchronized.
 * @return {void}
 */
nw.App.prototype.clearCache = function() {};

/**
 * Send the `close` event to all windows of current app.
 * @return {void}
 */
nw.App.prototype.closeAllWindows = function() {};

/**
 * Crash the browser process to test the Crash dump feature.
 * @return {void}
 */
nw.App.prototype.crashBrowser = function() {};

/**
 * Crash the renderer process to test the Crash dump feature.
 * @return {void}
 */
nw.App.prototype.crashRenderer = function() {};

/**
 * Query the proxy to be used for loading `url` in DOM.
 * 
 * @param {string} url {string} the URL to query for proxy
 * @return {string}
 */
nw.App.prototype.getProxyForURL = function(url) {};

/**
 * Set the proxy config which the web engine will be used to request network resources.
 * 
 * @param {string} config {string} Proxy rules
 * @return {void}
 */
nw.App.prototype.setProxyConfig = function(config) {};

/**
 * Quit current app.
 * @return {void}
 */
nw.App.prototype.quit = function() {};

/**
 * Add an entry to the whitelist used for controlling cross-origin access.
 * 
 * @param {string} sourceOrigin {string} The source origin. e.g. http://github.com/
 * @param {string} destinationProtocol {string} The destination protocol where the sourceOrigin can access to. e.g. app
 * @param {string} destinationHost {string} The destination host where the sourceOrigin can access to. e.g. myapp
 * @param {boolean} allowDestinationSubdomains {Boolean} If set to true, the sourceOrigin is allowed to access subdomains of
 * @return {void}
 */
nw.App.prototype.addOriginAccessWhitelistEntry = function(sourceOrigin, destinationProtocol, destinationHost, allowDestinationSubdomains) {};

/**
 * Remove an entry from the whitelist used for controlling cross-origin access.
 * 
 * @param {string} sourceOrigin {string} The source origin. e.g. http://github.com/
 * @param {string} destinationProtocol {string} The destination protocol where the sourceOrigin can access to. e.g. app
 * @param {string} destinationHost {string} The destination host where the sourceOrigin can access to. e.g. myapp
 * @param {boolean} allowDestinationSubdomains {Boolean} If set to true, the sourceOrigin is allowed to access subdomains of
 * @return {void}
 */
nw.App.prototype.removeOriginAccessWhitelistEntry = function(sourceOrigin, destinationProtocol, destinationHost, allowDestinationSubdomains) {};

/**
 * Register a global keyboard shortcut (also known as system-wide hot key) to the system.
 * 
 * @param {!nw.Shortcut} shortcut {Shortcut} the Shortcut object to register.
 * @return {void}
 */
nw.App.prototype.registerGlobalHotKey = function(shortcut) {};

/**
 * Unregisters a global keyboard shortcut.
 * 
 * @param {!nw.Shortcut} shortcut {Shortcut} the Shortcut object to register.
 * @return {void}
 */
nw.App.prototype.unregisterGlobalHotKey = function(shortcut) {};

/**
 * Emitted when users opened a file with your app.
 * 
 * This event is sent when the user clicks the dock icon for an already running application. This is a Mac specific feature.
 * 
 * @param {string} event {string} Event name
 * @param {!Function|function(string): ?|function(): ?} listener {Function(args?)} The callback that handles the `open` event.
 * - (optional) args {string} the full command line of the program. / {Function} The callback that handles the `reopen` event.
 * @return {App}
 */
nw.App.prototype.on = function(event, listener) {};
/**
 * @record
 * @struct
 */
nw.Clipboard = function() {};

/**
 * Get the clipboard object.
 * 
 * @return {!NWJS_Helpers.clip}
 */
nw.Clipboard.prototype.get = function() {};

/**
 * @constructor
 * @struct
 * Create a Menu object.
 * 
 * @param {!NWJS_Helpers.MenuOption=} option {Object} (Optional) Option to customize returned menu object.
 */
nw.Menu = function(option) {};
 /** @type {!Array<!nw.MenuItem>} */
nw.Menu.prototype.items;

/**
 * Append `item` to the tail of the menu.
 * 
 * @param {!nw.MenuItem} item {MenuItem} the item to be appended to the tail of the menu
 * @return {void}
 */
nw.Menu.prototype.append = function(item) {};

/**
 * Insert the `item` at `i`th position of the menu. The index is started from 0.
 * 
 * @param {!nw.MenuItem} item {MenuItem} the item to be inserted into the menu
 * @param {number} i {Integer} the index in the menu list to insert the the item
 * @return {void}
 */
nw.Menu.prototype.insert = function(item, i) {};

/**
 * Remove `item` from the menu.
 * 
 * @param {!nw.MenuItem} item {MenuItem} the item to be removed
 * @return {void}
 */
nw.Menu.prototype.remove = function(item) {};

/**
 * Remove the `i`th item form the menu.
 * 
 * @param {number} i {Integer} the index of the item to be removed from the menu
 * @return {void}
 */
nw.Menu.prototype.removeAt = function(i) {};

/**
 * Popup the context menu at the anchor in (`x`, `y`) in current window.
 * 
 * @param {number} x {Integer} the x position of the anchor
 * @param {number} y {Integer} the y position of the anchor
 * @return {void}
 */
nw.Menu.prototype.popup = function(x, y) {};

/**
 * Creates the builtin menus (App, Edit and Window) within the menubar on Mac.
 * 
 * @param {string} appname {string} The application name
 * @param {!NWJS_Helpers.CreateMacBuiltinOption=} options {Object} (Optional) Options to modify default `edit` and `window` MenuItems in Mac
 * @return {void}
 */
nw.Menu.prototype.createMacBuiltin = function(appname, options) {};

/**
 * @constructor
 * @struct
 * Create a new MenuItem.
 * 
 * @param {!NWJS_Helpers.MenuItemOption} option {Object} Customize how MenuItem render and behave.
 */
nw.MenuItem = function(option) {};
 /** @type {string} */
nw.MenuItem.prototype.type;
 /** @type {string} */
nw.MenuItem.prototype.lable;
 /** @type {string} */
nw.MenuItem.prototype.icon;
 /** @type {boolean} */
nw.MenuItem.prototype.iconIsTemplate;
 /** @type {boolean} */
nw.MenuItem.prototype.tooltip;
 /** @type {boolean} */
nw.MenuItem.prototype.checked;
 /** @type {string} */
nw.MenuItem.prototype.enabled;
 /** @type {!nw.Menu} */
nw.MenuItem.prototype.submenu;
 /** @type {!Function} */
nw.MenuItem.prototype.click;
 /** @type {string} */
nw.MenuItem.prototype.key;
 /** @type {string} */
nw.MenuItem.prototype.modifiers;

/**
 * Emitted when user activates the menu item.
 * 
 * @param {string} event {string} Event name
 * @param {!Function|function(): ?} listener {Function} The callback that handles the `click` event.
 * @return {MenuItem}
 */
nw.MenuItem.prototype.on = function(event, listener) {};
/**
 * @record
 * @struct
 */
nw.Screen = function() {};
 /** @type {!Array<!NWJS_Helpers.screen>} */
nw.Screen.prototype.screens;
 /** @type {!NWJS_Helpers.DesktopCaptureMonitor} */
nw.Screen.prototype.DesktopCaptureMonitor;

/**
 * Init the Screen singleton object, you only need to call this once.
 * @return {void}
 */
nw.Screen.prototype.Init = function() {};

/**
 *
 * @param {!Array<string>} sources {string[]} Array of source types.
 * @param {function((string|boolean)): void} callback {Function} callback function with chosed streamId.
 * - (optional) streamId {string}  streamId will be false if failed to execute or existing session is alive.
 * @return {void}
 */
nw.Screen.prototype.chooseDesktopMedia = function(sources, callback) {};

/**
 * Emitted when the screen resolution, arrangement is changed.
 * 
 * Emitted when a new screen added.
 * 
 * Emitted when existing screen removed.
 * 
 * @param {string} event {string} Event name
 * @param {!Function|function(!NWJS_Helpers.screen): ?} listener {Function(screen?)} The callback that handles the `displayBoundsChanged` event.
 * - (optional) screen {screen} screen object / {Function(screen?)} The callback that handles the `displayAdded` event.
 * - (optional) screen {screen} screen object / {Function(screen?)} The callback that handles the `displayRemoved` event.
 * - (optional) screen {screen} screen object
 * @return {Screen}
 */
nw.Screen.prototype.on = function(event, listener) {};
/**
 * @record
 * @struct
 */
nw.Shell = function() {};

/**
 * Open the given external URI in the desktop"s default manner.
 * 
 * @param {string} uri {string} A URL to open in system default manner.
 * @return {void}
 */
nw.Shell.prototype.openExternal = function(uri) {};

/**
 * Open the given file_path in the desktop"s default manner.
 * 
 * @param {string} file_path {string} path to a local file
 * @return {void}
 */
nw.Shell.prototype.openItem = function(file_path) {};

/**
 * Show the given file_path in the parent folder with file manager. If possible, select the file.
 * 
 * @param {string} file_path {string} path to a local file
 * @return {void}
 */
nw.Shell.prototype.showItemInFolder = function(file_path) {};

/**
 * @constructor
 * @struct
 * Create new Shortcut.
 * 
 * @param {!NWJS_Helpers.ShortcutOption} option {Object} Shortcut option is an object contains initial settings for the Shortcut.
 */
nw.Shortcut = function(option) {};
 /** @type {!Function} */
nw.Shortcut.prototype.active;
 /** @type {function(string): ?} */
nw.Shortcut.prototype.failed;
 /** @type {string} */
nw.Shortcut.prototype.key;

/**
 * Get or set the active callback of a Shortcut. It will be called when user presses the shortcut.
 * 
 * Get or set the failed callback of a Shortcut. It will be called when application passes an invalid key, or failed to register the key.
 * 
 * @param {string} event {string} Event name
 * @param {!Function|function(): ?|function(string): ?} listener {Function} The callback that handles the `active` event. / {Function(msg?)} The callback that handles the `failed` event.
 * - (optional) msg {string} Failure message
 * @return {Shortcut}
 */
nw.Shortcut.prototype.on = function(event, listener) {};

/**
 * @constructor
 * @struct
 * Create a new Tray.
 * @param {!NWJS_Helpers.TrayOption} option {Object} Contains initial settings for the Tray.
 */
nw.Tray = function(option) {};
 /** @type {string} */
nw.Tray.prototype.title;
 /** @type {string} */
nw.Tray.prototype.tooltip;
 /** @type {string} */
nw.Tray.prototype.icon;
 /** @type {string} */
nw.Tray.prototype.alticon;
 /** @type {boolean} */
nw.Tray.prototype.iconsAreTemplates;
 /** @type {!nw.Menu} */
nw.Tray.prototype.menu;

/**
 * Remove the tray.
 * @return {void}
 */
nw.Tray.prototype.remove = function() {};

/**
 * Emitted when user clicks the menu item with left mouse button.
 * 
 * @param {string} event {string} Event name
 * @param {!Function|function(): ?} listener {Function} The callback that handles the `click` event.
 * @return {Tray}
 */
nw.Tray.prototype.on = function(event, listener) {};
/**
 * @record
 * @struct
 */
nw.Window = function() {};

/**
 * Get the native Window Object.
 * 
 * @param {!Object=} window_object
 * @return {!NWJS_Helpers.win}
 */
nw.Window.prototype.get = function(window_object) {};

/**
 * Open a new window and load url in it.
 * 
 * @param {string} url {string} URL to be loaded in the opened window
 * @param {!NWJS_Helpers.WindowOpenOption=} option {object} (Optional) New window open options like window subfields in manifest format plus some more options
 * @param {function(!NWJS_Helpers.win): void=} callback {string} (Optional) Callback when with the opened native Window object
 * - (Optional) new_win {object} New opened window object.
 * @return {void}
 */
nw.Window.prototype.open = function(url, option, callback) {};
 /** @type {?} */
nw.App;
 /** @type {?} */
nw.Clipboard;
 /** @type {?} */
nw.Screen;
 /** @type {?} */
nw.Shell;
 /** @type {?} */
nw.Window;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "nw.gui"
/** @const */
tsickle_declare_module.nw_gui = {};
/**
 * @extends {nw.Menu}
 * @constructor
 * @struct
 */
tsickle_declare_module.nw_gui.Menu = function() {};
/**
 * @extends {nw.MenuItem}
 * @constructor
 * @struct
 */
tsickle_declare_module.nw_gui.MenuItem = function() {};
/**
 * @extends {nw.Shortcut}
 * @constructor
 * @struct
 */
tsickle_declare_module.nw_gui.Shortcut = function() {};
/**
 * @extends {nw.Tray}
 * @constructor
 * @struct
 */
tsickle_declare_module.nw_gui.Tray = function() {};
 /** @type {?} */
tsickle_declare_module.nw_gui.App;
 /** @type {?} */
tsickle_declare_module.nw_gui.Clipboard;
 /** @type {?} */
tsickle_declare_module.nw_gui.Screen;
 /** @type {?} */
tsickle_declare_module.nw_gui.Shell;
 /** @type {?} */
tsickle_declare_module.nw_gui.Window;
