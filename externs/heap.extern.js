/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/heap/index.d.ts:

/**
 * @constructor
 * @struct
 * @param {function(T, T): number=} cmp
 */
function Heap(cmp) {}

/**
 * @param {T} item
 * @return {void}
 */
Heap.prototype.push = function(item) {};

/**
 * @param {T} item
 * @return {void}
 */
Heap.prototype.insert = function(item) {};

/**
 * @return {T}
 */
Heap.prototype.pop = function() {};

/**
 * @return {T}
 */
Heap.prototype.peek = function() {};

/**
 * @return {T}
 */
Heap.prototype.top = function() {};

/**
 * @return {T}
 */
Heap.prototype.front = function() {};

/**
 * @param {T} item
 * @return {T}
 */
Heap.prototype.replace = function(item) {};

/**
 * @param {T} item
 * @return {T}
 */
Heap.prototype.pushpop = function(item) {};

/**
 * @return {void}
 */
Heap.prototype.heapify = function() {};

/**
 * @param {T} item
 * @return {void}
 */
Heap.prototype.updateItem = function(item) {};

/**
 * @return {boolean}
 */
Heap.prototype.empty = function() {};

/**
 * @return {number}
 */
Heap.prototype.size = function() {};

/**
 * @return {!Array<T>}
 */
Heap.prototype.toArray = function() {};

/**
 * @return {!Heap}
 */
Heap.prototype.clone = function() {};

/**
 * @return {!Heap}
 */
Heap.prototype.copy = function() {};

/**
 * @template T
 * @param {!Array<T>} array
 * @param {T} item
 * @param {function(T, T): number=} cmp
 * @return {void}
 */
Heap.push = function(array, item, cmp) {};

/**
 * @template T
 * @param {!Array<T>} array
 * @param {function(T, T): number=} cmp
 * @return {T}
 */
Heap.pop = function(array, cmp) {};

/**
 * @template T
 * @param {!Array<T>} array
 * @param {T} item
 * @param {function(T, T): number=} cmp
 * @return {T}
 */
Heap.replace = function(array, item, cmp) {};

/**
 * @template T
 * @param {!Array<T>} array
 * @param {T} item
 * @param {function(T, T): number=} cmp
 * @return {T}
 */
Heap.pushpop = function(array, item, cmp) {};

/**
 * @template T
 * @param {!Array<T>} array
 * @param {function(T, T): number=} cmp
 * @return {!Heap<T>}
 */
Heap.heapify = function(array, cmp) {};

/**
 * @template T
 * @param {!Array<T>} array
 * @param {T} item
 * @param {function(T, T): number=} cmp
 * @return {void}
 */
Heap.updateItem = function(array, item, cmp) {};

/**
 * @template T
 * @param {!Array<T>} array
 * @param {number} n
 * @param {function(T, T): number=} cmp
 * @return {!Array<T>}
 */
Heap.nlargest = function(array, n, cmp) {};

/**
 * @template T
 * @param {!Array<T>} array
 * @param {number} n
 * @param {function(T, T): number=} cmp
 * @return {!Array<T>}
 */
Heap.nsmallest = function(array, n, cmp) {};

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
