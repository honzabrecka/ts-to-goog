/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/p2/index.d.ts:

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
/** @const */
var p2 = {};

/**
 * @constructor
 * @struct
 * @param {{upperBound: !Array<number>, lowerBound: !Array<number>}=} options
 */
p2.AABB = function(options) {};

/**
 * @param {!Array<!Array<number>>} points
 * @param {!Array<number>} position
 * @param {number} angle
 * @param {number} skinSize
 * @return {void}
 */
p2.AABB.prototype.setFromPoints = function(points, position, angle, skinSize) {};

/**
 * @param {!p2.AABB} aabb
 * @return {void}
 */
p2.AABB.prototype.copy = function(aabb) {};

/**
 * @param {!p2.AABB} aabb
 * @return {void}
 */
p2.AABB.prototype.extend = function(aabb) {};

/**
 * @param {!p2.AABB} aabb
 * @return {boolean}
 */
p2.AABB.prototype.overlaps = function(aabb) {};

/**
 * @constructor
 * @struct
 * @param {number} type
 */
p2.Broadphase = function(type) {};
 /** @type {number} */
p2.Broadphase.AABB;
 /** @type {number} */
p2.Broadphase.BOUNDING_CIRCLE;
 /** @type {number} */
p2.Broadphase.NAIVE;
 /** @type {number} */
p2.Broadphase.SAP;
 /** @type {number} */
p2.Broadphase.prototype.type;
 /** @type {!Array<!p2.Body>} */
p2.Broadphase.prototype.result;
 /** @type {!p2.World} */
p2.Broadphase.prototype.world;
 /** @type {number} */
p2.Broadphase.prototype.boundingVolumeType;

/**
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @return {boolean}
 */
p2.Broadphase.boundingRadiusCheck = function(bodyA, bodyB) {};

/**
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @return {boolean}
 */
p2.Broadphase.aabbCheck = function(bodyA, bodyB) {};

/**
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @return {boolean}
 */
p2.Broadphase.canCollide = function(bodyA, bodyB) {};

/**
 * @param {!p2.World} world
 * @return {void}
 */
p2.Broadphase.prototype.setWorld = function(world) {};

/**
 * @param {!p2.World} world
 * @return {!Array<!p2.Body>}
 */
p2.Broadphase.prototype.getCollisionPairs = function(world) {};

/**
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @return {boolean}
 */
p2.Broadphase.prototype.boundingVolumeCheck = function(bodyA, bodyB) {};

/**
 * @constructor
 * @struct
 * @param {{xmin: number, xmax: number, ymin: number, ymax: number, nx: number, ny: number}=} options
 */
p2.GridBroadphase = function(options) {};
 /** @type {number} */
p2.GridBroadphase.prototype.xmin;
 /** @type {number} */
p2.GridBroadphase.prototype.xmax;
 /** @type {number} */
p2.GridBroadphase.prototype.ymin;
 /** @type {number} */
p2.GridBroadphase.prototype.ymax;
 /** @type {number} */
p2.GridBroadphase.prototype.nx;
 /** @type {number} */
p2.GridBroadphase.prototype.ny;
 /** @type {number} */
p2.GridBroadphase.prototype.binsizeX;
 /** @type {number} */
p2.GridBroadphase.prototype.binsizeY;
/**
 * @extends {p2.Broadphase}
 * @constructor
 * @struct
 */
p2.NativeBroadphase = function() {};
/**
 * @constructor
 * @struct
 */
p2.Narrowphase = function() {};
 /** @type {!Array<!p2.ContactEquation>} */
p2.Narrowphase.prototype.contactEquations;
 /** @type {!Array<!p2.FrictionEquation>} */
p2.Narrowphase.prototype.frictionEquations;
 /** @type {boolean} */
p2.Narrowphase.prototype.enableFriction;
 /** @type {boolean} */
p2.Narrowphase.prototype.enableEquations;
 /** @type {number} */
p2.Narrowphase.prototype.slipForce;
 /** @type {number} */
p2.Narrowphase.prototype.frictionCoefficient;
 /** @type {number} */
p2.Narrowphase.prototype.surfaceVelocity;
 /** @type {boolean} */
p2.Narrowphase.prototype.reuseObjects;
 /** @type {!Array<?>} */
p2.Narrowphase.prototype.resuableContactEquations;
 /** @type {!Array<?>} */
p2.Narrowphase.prototype.reusableFrictionEquations;
 /** @type {number} */
p2.Narrowphase.prototype.restitution;
 /** @type {number} */
p2.Narrowphase.prototype.stiffness;
 /** @type {number} */
p2.Narrowphase.prototype.relaxation;
 /** @type {number} */
p2.Narrowphase.prototype.frictionStiffness;
 /** @type {number} */
p2.Narrowphase.prototype.frictionRelaxation;
 /** @type {boolean} */
p2.Narrowphase.prototype.enableFrictionReduction;
 /** @type {number} */
p2.Narrowphase.prototype.contactSkinSize;

/**
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @return {boolean}
 */
p2.Narrowphase.prototype.collidedLastStep = function(bodyA, bodyB) {};

/**
 * @return {void}
 */
p2.Narrowphase.prototype.reset = function() {};

/**
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @param {!p2.Shape} shapeA
 * @param {!p2.Shape} shapeB
 * @return {!p2.ContactEquation}
 */
p2.Narrowphase.prototype.createContactEquation = function(bodyA, bodyB, shapeA, shapeB) {};

/**
 * @param {!p2.ContactEquation} c
 * @return {!p2.FrictionEquation}
 */
p2.Narrowphase.prototype.createFrictionFromContact = function(c) {};
/**
 * @extends {p2.Broadphase}
 * @constructor
 * @struct
 */
p2.SAPBroadphase = function() {};
 /** @type {!Array<!p2.Body>} */
p2.SAPBroadphase.prototype.axisList;
 /** @type {number} */
p2.SAPBroadphase.prototype.axisIndex;

/**
 * @constructor
 * @struct
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @param {number} type
 * @param {{collideConnected: boolean}=} options
 */
p2.Constraint = function(bodyA, bodyB, type, options) {};
 /** @type {number} */
p2.Constraint.DISTANCE;
 /** @type {number} */
p2.Constraint.GEAR;
 /** @type {number} */
p2.Constraint.LOCK;
 /** @type {number} */
p2.Constraint.PRISMATIC;
 /** @type {number} */
p2.Constraint.REVOLUTE;
 /** @type {number} */
p2.Constraint.prototype.type;
 /** @type {!Array<!p2.Equation>} */
p2.Constraint.prototype.equeations;
 /** @type {!p2.Body} */
p2.Constraint.prototype.bodyA;
 /** @type {!p2.Body} */
p2.Constraint.prototype.bodyB;
 /** @type {boolean} */
p2.Constraint.prototype.collideConnected;

/**
 * @return {void}
 */
p2.Constraint.prototype.update = function() {};

/**
 * @param {number} stiffness
 * @return {void}
 */
p2.Constraint.prototype.setStiffness = function(stiffness) {};

/**
 * @param {number} relaxation
 * @return {void}
 */
p2.Constraint.prototype.setRelaxation = function(relaxation) {};

/**
 * @constructor
 * @struct
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @param {{distance: number, localAnchorA: !Array<number>, localAnchorB: !Array<number>, maxForce: number}=} options
 */
p2.DistanceConstraint = function(bodyA, bodyB, options) {};
 /** @type {!Array<number>} */
p2.DistanceConstraint.prototype.localAnchorA;
 /** @type {!Array<number>} */
p2.DistanceConstraint.prototype.localAnchorB;
 /** @type {number} */
p2.DistanceConstraint.prototype.distance;
 /** @type {number} */
p2.DistanceConstraint.prototype.maxForce;
 /** @type {boolean} */
p2.DistanceConstraint.prototype.upperLimitEnabled;
 /** @type {number} */
p2.DistanceConstraint.prototype.upperLimit;
 /** @type {boolean} */
p2.DistanceConstraint.prototype.lowerLimitEnabled;
 /** @type {number} */
p2.DistanceConstraint.prototype.lowerLimit;
 /** @type {number} */
p2.DistanceConstraint.prototype.position;

/**
 * @param {number} f
 * @return {void}
 */
p2.DistanceConstraint.prototype.setMaxForce = function(f) {};

/**
 * @return {number}
 */
p2.DistanceConstraint.prototype.getMaxForce = function() {};

/**
 * @constructor
 * @struct
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @param {{angle: number, ratio: number, maxTorque: number}=} options
 */
p2.GearConstraint = function(bodyA, bodyB, options) {};
 /** @type {number} */
p2.GearConstraint.prototype.ratio;
 /** @type {number} */
p2.GearConstraint.prototype.angle;

/**
 * @param {number} torque
 * @return {void}
 */
p2.GearConstraint.prototype.setMaxTorque = function(torque) {};

/**
 * @return {number}
 */
p2.GearConstraint.prototype.getMaxTorque = function() {};

/**
 * @constructor
 * @struct
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @param {{localOffsetB: !Array<number>, localAngleB: number, maxForce: number}=} options
 */
p2.LockConstraint = function(bodyA, bodyB, options) {};

/**
 * @param {number} force
 * @return {void}
 */
p2.LockConstraint.prototype.setMaxForce = function(force) {};

/**
 * @return {number}
 */
p2.LockConstraint.prototype.getMaxForce = function() {};

/**
 * @constructor
 * @struct
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @param {{maxForce: number, localAnchorA: !Array<number>, localAnchorB: !Array<number>, localAxisA: !Array<number>, disableRotationalLock: boolean, upperLimit: number, lowerLimit: number}=} options
 */
p2.PrismaticConstraint = function(bodyA, bodyB, options) {};
 /** @type {!Array<number>} */
p2.PrismaticConstraint.prototype.localAnchorA;
 /** @type {!Array<number>} */
p2.PrismaticConstraint.prototype.localAnchorB;
 /** @type {!Array<number>} */
p2.PrismaticConstraint.prototype.localAxisA;
 /** @type {number} */
p2.PrismaticConstraint.prototype.position;
 /** @type {number} */
p2.PrismaticConstraint.prototype.velocity;
 /** @type {boolean} */
p2.PrismaticConstraint.prototype.lowerLimitEnabled;
 /** @type {boolean} */
p2.PrismaticConstraint.prototype.upperLimitEnabled;
 /** @type {number} */
p2.PrismaticConstraint.prototype.lowerLimit;
 /** @type {number} */
p2.PrismaticConstraint.prototype.upperLimit;
 /** @type {!p2.ContactEquation} */
p2.PrismaticConstraint.prototype.upperLimitEquation;
 /** @type {!p2.ContactEquation} */
p2.PrismaticConstraint.prototype.lowerLimitEquation;
 /** @type {!p2.Equation} */
p2.PrismaticConstraint.prototype.motorEquation;
 /** @type {boolean} */
p2.PrismaticConstraint.prototype.motorEnabled;
 /** @type {number} */
p2.PrismaticConstraint.prototype.motorSpeed;

/**
 * @return {void}
 */
p2.PrismaticConstraint.prototype.enableMotor = function() {};

/**
 * @return {void}
 */
p2.PrismaticConstraint.prototype.disableMotor = function() {};

/**
 * @param {number} lower
 * @param {number} upper
 * @return {void}
 */
p2.PrismaticConstraint.prototype.setLimits = function(lower, upper) {};

/**
 * @constructor
 * @struct
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @param {{worldPivot: !Array<number>, localPivotA: !Array<number>, localPivotB: !Array<number>, maxForce: number}=} options
 */
p2.RevoluteConstraint = function(bodyA, bodyB, options) {};
 /** @type {!Array<number>} */
p2.RevoluteConstraint.prototype.pivotA;
 /** @type {!Array<number>} */
p2.RevoluteConstraint.prototype.pivotB;
 /** @type {!p2.RotationalVelocityEquation} */
p2.RevoluteConstraint.prototype.motorEquation;
 /** @type {boolean} */
p2.RevoluteConstraint.prototype.motorEnabled;
 /** @type {number} */
p2.RevoluteConstraint.prototype.angle;
 /** @type {boolean} */
p2.RevoluteConstraint.prototype.lowerLimitEnabled;
 /** @type {boolean} */
p2.RevoluteConstraint.prototype.upperLimitEnabled;
 /** @type {number} */
p2.RevoluteConstraint.prototype.lowerLimit;
 /** @type {number} */
p2.RevoluteConstraint.prototype.upperLimit;
 /** @type {!p2.ContactEquation} */
p2.RevoluteConstraint.prototype.upperLimitEquation;
 /** @type {!p2.ContactEquation} */
p2.RevoluteConstraint.prototype.lowerLimitEquation;

/**
 * @return {void}
 */
p2.RevoluteConstraint.prototype.enableMotor = function() {};

/**
 * @return {void}
 */
p2.RevoluteConstraint.prototype.disableMotor = function() {};

/**
 * @return {boolean}
 */
p2.RevoluteConstraint.prototype.motorIsEnabled = function() {};

/**
 * @param {number} lower
 * @param {number} upper
 * @return {void}
 */
p2.RevoluteConstraint.prototype.setLimits = function(lower, upper) {};

/**
 * @param {number} speed
 * @return {void}
 */
p2.RevoluteConstraint.prototype.setMotorSpeed = function(speed) {};

/**
 * @return {number}
 */
p2.RevoluteConstraint.prototype.getMotorSpeed = function() {};

/**
 * @constructor
 * @struct
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @param {{angle: number, ratio: number}=} options
 */
p2.AngleLockEquation = function(bodyA, bodyB, options) {};

/**
 * @return {number}
 */
p2.AngleLockEquation.prototype.computeGq = function() {};

/**
 * @param {number} ratio
 * @return {number}
 */
p2.AngleLockEquation.prototype.setRatio = function(ratio) {};

/**
 * @param {number} torque
 * @return {number}
 */
p2.AngleLockEquation.prototype.setMaxTorque = function(torque) {};

/**
 * @constructor
 * @struct
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 */
p2.ContactEquation = function(bodyA, bodyB) {};
 /** @type {!Array<number>} */
p2.ContactEquation.prototype.contactPointA;
 /** @type {!Array<number>} */
p2.ContactEquation.prototype.penetrationVec;
 /** @type {!Array<number>} */
p2.ContactEquation.prototype.contactPointB;
 /** @type {!Array<number>} */
p2.ContactEquation.prototype.normalA;
 /** @type {number} */
p2.ContactEquation.prototype.restitution;
 /** @type {boolean} */
p2.ContactEquation.prototype.firstImpact;
 /** @type {!p2.Shape} */
p2.ContactEquation.prototype.shapeA;
 /** @type {!p2.Shape} */
p2.ContactEquation.prototype.shapeB;

/**
 * @param {number} a
 * @param {number} b
 * @param {number} h
 * @return {number}
 */
p2.ContactEquation.prototype.computeB = function(a, b, h) {};

/**
 * @constructor
 * @struct
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @param {number=} minForce
 * @param {number=} maxForce
 */
p2.Equation = function(bodyA, bodyB, minForce, maxForce) {};
 /** @type {number} */
p2.Equation.DEFAULT_STIFFNESS;
 /** @type {number} */
p2.Equation.DEFAULT_RELAXATION;
 /** @type {number} */
p2.Equation.prototype.minForce;
 /** @type {number} */
p2.Equation.prototype.maxForce;
 /** @type {!p2.Body} */
p2.Equation.prototype.bodyA;
 /** @type {!p2.Body} */
p2.Equation.prototype.bodyB;
 /** @type {number} */
p2.Equation.prototype.stiffness;
 /** @type {number} */
p2.Equation.prototype.relaxation;
 /** @type {!Array<number>} */
p2.Equation.prototype.G;
 /** @type {number} */
p2.Equation.prototype.offset;
 /** @type {number} */
p2.Equation.prototype.a;
 /** @type {number} */
p2.Equation.prototype.b;
 /** @type {number} */
p2.Equation.prototype.epsilon;
 /** @type {number} */
p2.Equation.prototype.timeStep;
 /** @type {boolean} */
p2.Equation.prototype.needsUpdate;
 /** @type {number} */
p2.Equation.prototype.multiplier;
 /** @type {number} */
p2.Equation.prototype.relativeVelocity;
 /** @type {boolean} */
p2.Equation.prototype.enabled;

/**
 * @param {!Array<number>} G
 * @param {!Array<number>} vi
 * @param {!Array<number>} wi
 * @param {!Array<number>} vj
 * @param {!Array<number>} wj
 * @return {number}
 */
p2.Equation.prototype.gmult = function(G, vi, wi, vj, wj) {};

/**
 * @param {number} a
 * @param {number} b
 * @param {number} h
 * @return {number}
 */
p2.Equation.prototype.computeB = function(a, b, h) {};

/**
 * @return {number}
 */
p2.Equation.prototype.computeGq = function() {};

/**
 * @return {number}
 */
p2.Equation.prototype.computeGW = function() {};

/**
 * @return {number}
 */
p2.Equation.prototype.computeGWlambda = function() {};

/**
 * @return {number}
 */
p2.Equation.prototype.computeGiMf = function() {};

/**
 * @return {number}
 */
p2.Equation.prototype.computeGiMGt = function() {};

/**
 * @param {number} deltalambda
 * @return {number}
 */
p2.Equation.prototype.addToWlambda = function(deltalambda) {};

/**
 * @param {number} eps
 * @return {number}
 */
p2.Equation.prototype.computeInvC = function(eps) {};

/**
 * @constructor
 * @struct
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @param {number} slipForce
 */
p2.FrictionEquation = function(bodyA, bodyB, slipForce) {};
 /** @type {!Array<number>} */
p2.FrictionEquation.prototype.contactPointA;
 /** @type {!Array<number>} */
p2.FrictionEquation.prototype.contactPointB;
 /** @type {!Array<number>} */
p2.FrictionEquation.prototype.t;
 /** @type {!p2.Shape} */
p2.FrictionEquation.prototype.shapeA;
 /** @type {!p2.Shape} */
p2.FrictionEquation.prototype.shapeB;
 /** @type {number} */
p2.FrictionEquation.prototype.frictionCoefficient;

/**
 * @param {number} slipForce
 * @return {number}
 */
p2.FrictionEquation.prototype.setSlipForce = function(slipForce) {};

/**
 * @return {number}
 */
p2.FrictionEquation.prototype.getSlipForce = function() {};

/**
 * @param {number} a
 * @param {number} b
 * @param {number} h
 * @return {number}
 */
p2.FrictionEquation.prototype.computeB = function(a, b, h) {};

/**
 * @constructor
 * @struct
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @param {{angle: number}=} options
 */
p2.RotationalLockEquation = function(bodyA, bodyB, options) {};
 /** @type {number} */
p2.RotationalLockEquation.prototype.angle;

/**
 * @return {number}
 */
p2.RotationalLockEquation.prototype.computeGq = function() {};

/**
 * @constructor
 * @struct
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 */
p2.RotationalVelocityEquation = function(bodyA, bodyB) {};

/**
 * @param {number} a
 * @param {number} b
 * @param {number} h
 * @return {number}
 */
p2.RotationalVelocityEquation.prototype.computeB = function(a, b, h) {};
/**
 * @constructor
 * @struct
 */
p2.EventEmitter = function() {};

/**
 * @param {string} type
 * @param {!Function} listener
 * @param {?} context
 * @return {!p2.EventEmitter}
 */
p2.EventEmitter.prototype.on = function(type, listener, context) {};

/**
 * @param {string} type
 * @param {!Function} listener
 * @return {boolean}
 */
p2.EventEmitter.prototype.has = function(type, listener) {};

/**
 * @param {string} type
 * @param {!Function} listener
 * @return {!p2.EventEmitter}
 */
p2.EventEmitter.prototype.off = function(type, listener) {};

/**
 * @param {?} event
 * @return {!p2.EventEmitter}
 */
p2.EventEmitter.prototype.emit = function(event) {};
/**
 * @constructor
 * @struct
 */
p2.ContactMaterialOptions = function() {};
 /** @type {number} */
p2.ContactMaterialOptions.prototype.friction;
 /** @type {number} */
p2.ContactMaterialOptions.prototype.restitution;
 /** @type {number} */
p2.ContactMaterialOptions.prototype.stiffness;
 /** @type {number} */
p2.ContactMaterialOptions.prototype.relaxation;
 /** @type {number} */
p2.ContactMaterialOptions.prototype.frictionStiffness;
 /** @type {number} */
p2.ContactMaterialOptions.prototype.frictionRelaxation;
 /** @type {number} */
p2.ContactMaterialOptions.prototype.surfaceVelocity;

/**
 * @constructor
 * @struct
 * @param {!p2.Material} materialA
 * @param {!p2.Material} materialB
 * @param {!p2.ContactMaterialOptions=} options
 */
p2.ContactMaterial = function(materialA, materialB, options) {};
 /** @type {number} */
p2.ContactMaterial.idCounter;
 /** @type {number} */
p2.ContactMaterial.prototype.id;
 /** @type {!p2.Material} */
p2.ContactMaterial.prototype.materialA;
 /** @type {!p2.Material} */
p2.ContactMaterial.prototype.materialB;
 /** @type {number} */
p2.ContactMaterial.prototype.friction;
 /** @type {number} */
p2.ContactMaterial.prototype.restitution;
 /** @type {number} */
p2.ContactMaterial.prototype.stiffness;
 /** @type {number} */
p2.ContactMaterial.prototype.relaxation;
 /** @type {number} */
p2.ContactMaterial.prototype.frictionStiffness;
 /** @type {number} */
p2.ContactMaterial.prototype.frictionRelaxation;
 /** @type {number} */
p2.ContactMaterial.prototype.surfaceVelocity;
 /** @type {number} */
p2.ContactMaterial.prototype.contactSkinSize;

/**
 * @constructor
 * @struct
 * @param {number} id
 */
p2.Material = function(id) {};
 /** @type {number} */
p2.Material.idCounter;
 /** @type {number} */
p2.Material.prototype.id;
/**
 * @constructor
 * @struct
 */
p2.vec2 = function() {};

/**
 * @param {!Array<number>} a
 * @param {!Array<number>} b
 * @return {number}
 */
p2.vec2.crossLength = function(a, b) {};

/**
 * @param {!Array<number>} out
 * @param {!Array<number>} vec
 * @param {number} zcomp
 * @return {number}
 */
p2.vec2.crossVZ = function(out, vec, zcomp) {};

/**
 * @param {!Array<number>} out
 * @param {number} zcomp
 * @param {!Array<number>} vec
 * @return {number}
 */
p2.vec2.crossZV = function(out, zcomp, vec) {};

/**
 * @param {!Array<number>} out
 * @param {!Array<number>} a
 * @param {number} angle
 * @return {void}
 */
p2.vec2.rotate = function(out, a, angle) {};

/**
 * @param {!Array<number>} out
 * @param {!Array<number>} a
 * @return {number}
 */
p2.vec2.rotate90cw = function(out, a) {};

/**
 * @param {!Array<number>} out
 * @param {!Array<number>} a
 * @param {!Array<number>} b
 * @param {!Array<number>} c
 * @return {!Array<number>}
 */
p2.vec2.centroid = function(out, a, b, c) {};

/**
 * @return {!Array<number>}
 */
p2.vec2.create = function() {};

/**
 * @param {!Array<number>} a
 * @return {!Array<number>}
 */
p2.vec2.clone = function(a) {};

/**
 * @param {number} x
 * @param {number} y
 * @return {!Array<number>}
 */
p2.vec2.fromValues = function(x, y) {};

/**
 * @param {!Array<number>} out
 * @param {!Array<number>} a
 * @return {!Array<number>}
 */
p2.vec2.copy = function(out, a) {};

/**
 * @param {!Array<number>} out
 * @param {number} x
 * @param {number} y
 * @return {!Array<number>}
 */
p2.vec2.set = function(out, x, y) {};

/**
 * @param {!Array<number>} out
 * @param {!Array<number>} worldPoint
 * @param {!Array<number>} framePosition
 * @param {number} frameAngle
 * @return {void}
 */
p2.vec2.toLocalFrame = function(out, worldPoint, framePosition, frameAngle) {};

/**
 * @param {!Array<number>} out
 * @param {!Array<number>} localPoint
 * @param {!Array<number>} framePosition
 * @param {number} frameAngle
 * @return {void}
 */
p2.vec2.toGlobalFrame = function(out, localPoint, framePosition, frameAngle) {};

/**
 * @param {!Array<number>} out
 * @param {!Array<number>} a
 * @param {!Array<number>} b
 * @return {!Array<number>}
 */
p2.vec2.add = function(out, a, b) {};

/**
 * @param {!Array<number>} out
 * @param {!Array<number>} a
 * @param {!Array<number>} b
 * @return {!Array<number>}
 */
p2.vec2.subtract = function(out, a, b) {};

/**
 * @param {!Array<number>} out
 * @param {!Array<number>} a
 * @param {!Array<number>} b
 * @return {!Array<number>}
 */
p2.vec2.sub = function(out, a, b) {};

/**
 * @param {!Array<number>} out
 * @param {!Array<number>} a
 * @param {!Array<number>} b
 * @return {!Array<number>}
 */
p2.vec2.multiply = function(out, a, b) {};

/**
 * @param {!Array<number>} out
 * @param {!Array<number>} a
 * @param {!Array<number>} b
 * @return {!Array<number>}
 */
p2.vec2.mul = function(out, a, b) {};

/**
 * @param {!Array<number>} out
 * @param {!Array<number>} a
 * @param {!Array<number>} b
 * @return {!Array<number>}
 */
p2.vec2.divide = function(out, a, b) {};

/**
 * @param {!Array<number>} out
 * @param {!Array<number>} a
 * @param {!Array<number>} b
 * @return {!Array<number>}
 */
p2.vec2.div = function(out, a, b) {};

/**
 * @param {!Array<number>} out
 * @param {!Array<number>} a
 * @param {number} b
 * @return {!Array<number>}
 */
p2.vec2.scale = function(out, a, b) {};

/**
 * @param {!Array<number>} a
 * @param {!Array<number>} b
 * @return {number}
 */
p2.vec2.distance = function(a, b) {};

/**
 * @param {!Array<number>} a
 * @param {!Array<number>} b
 * @return {number}
 */
p2.vec2.dist = function(a, b) {};

/**
 * @param {!Array<number>} a
 * @param {!Array<number>} b
 * @return {number}
 */
p2.vec2.squaredDistance = function(a, b) {};

/**
 * @param {!Array<number>} a
 * @param {!Array<number>} b
 * @return {number}
 */
p2.vec2.sqrDist = function(a, b) {};

/**
 * @param {!Array<number>} a
 * @return {number}
 */
p2.vec2.length = function(a) {};

/**
 * @param {!Array<number>} a
 * @return {number}
 */
p2.vec2.len = function(a) {};

/**
 * @param {!Array<number>} a
 * @return {number}
 */
p2.vec2.squaredLength = function(a) {};

/**
 * @param {!Array<number>} a
 * @return {number}
 */
p2.vec2.sqrLen = function(a) {};

/**
 * @param {!Array<number>} out
 * @param {!Array<number>} a
 * @return {!Array<number>}
 */
p2.vec2.negate = function(out, a) {};

/**
 * @param {!Array<number>} out
 * @param {!Array<number>} a
 * @return {!Array<number>}
 */
p2.vec2.normalize = function(out, a) {};

/**
 * @param {!Array<number>} a
 * @param {!Array<number>} b
 * @return {number}
 */
p2.vec2.dot = function(a, b) {};

/**
 * @param {!Array<number>} a
 * @return {string}
 */
p2.vec2.str = function(a) {};
/**
 * @record
 * @struct
 */
p2.BodyOptions = function() {};
 /** @type {number} */
p2.BodyOptions.prototype.mass;
 /** @type {!Array<number>} */
p2.BodyOptions.prototype.position;
 /** @type {!Array<number>} */
p2.BodyOptions.prototype.velocity;
 /** @type {number} */
p2.BodyOptions.prototype.angle;
 /** @type {number} */
p2.BodyOptions.prototype.angularVelocity;
 /** @type {!Array<number>} */
p2.BodyOptions.prototype.force;
 /** @type {number} */
p2.BodyOptions.prototype.angularForce;
 /** @type {boolean} */
p2.BodyOptions.prototype.fixedRotation;

/**
 * @constructor
 * @struct
 * @param {!p2.BodyOptions=} options
 */
p2.Body = function(options) {};
 /** @type {{type: string}} */
p2.Body.prototype.sleepyEvent;
 /** @type {{type: string}} */
p2.Body.prototype.sleepEvent;
 /** @type {{type: string}} */
p2.Body.prototype.wakeUpEvent;
 /** @type {number} */
p2.Body.DYNAMIC;
 /** @type {number} */
p2.Body.STATIC;
 /** @type {number} */
p2.Body.KINEMATIC;
 /** @type {number} */
p2.Body.AWAKE;
 /** @type {number} */
p2.Body.SLEEPY;
 /** @type {number} */
p2.Body.SLEEPING;
 /** @type {number} */
p2.Body.prototype.id;
 /** @type {!p2.World} */
p2.Body.prototype.world;
 /** @type {!Array<!p2.Shape>} */
p2.Body.prototype.shapes;
 /** @type {number} */
p2.Body.prototype.mass;
 /** @type {number} */
p2.Body.prototype.invMass;
 /** @type {number} */
p2.Body.prototype.inertia;
 /** @type {number} */
p2.Body.prototype.invInertia;
 /** @type {number} */
p2.Body.prototype.invMassSolve;
 /** @type {number} */
p2.Body.prototype.invInertiaSolve;
 /** @type {number} */
p2.Body.prototype.fixedRotation;
 /** @type {!Array<number>} */
p2.Body.prototype.position;
 /** @type {!Array<number>} */
p2.Body.prototype.interpolatedPosition;
 /** @type {number} */
p2.Body.prototype.interpolatedAngle;
 /** @type {!Array<number>} */
p2.Body.prototype.previousPosition;
 /** @type {number} */
p2.Body.prototype.previousAngle;
 /** @type {!Array<number>} */
p2.Body.prototype.velocity;
 /** @type {!Array<number>} */
p2.Body.prototype.vlambda;
 /** @type {!Array<number>} */
p2.Body.prototype.wlambda;
 /** @type {number} */
p2.Body.prototype.angle;
 /** @type {number} */
p2.Body.prototype.angularVelocity;
 /** @type {!Array<number>} */
p2.Body.prototype.force;
 /** @type {number} */
p2.Body.prototype.angularForce;
 /** @type {number} */
p2.Body.prototype.damping;
 /** @type {number} */
p2.Body.prototype.angularDamping;
 /** @type {number} */
p2.Body.prototype.type;
 /** @type {number} */
p2.Body.prototype.boundingRadius;
 /** @type {!p2.AABB} */
p2.Body.prototype.aabb;
 /** @type {boolean} */
p2.Body.prototype.aabbNeedsUpdate;
 /** @type {boolean} */
p2.Body.prototype.allowSleep;
 /** @type {boolean} */
p2.Body.prototype.wantsToSleep;
 /** @type {number} */
p2.Body.prototype.sleepState;
 /** @type {number} */
p2.Body.prototype.sleepSpeedLimit;
 /** @type {number} */
p2.Body.prototype.sleepTimeLimit;
 /** @type {number} */
p2.Body.prototype.gravityScale;
 /** @type {boolean} */
p2.Body.prototype.collisionResponse;

/**
 * @return {void}
 */
p2.Body.prototype.updateSolveMassProperties = function() {};

/**
 * @param {number} density
 * @return {void}
 */
p2.Body.prototype.setDensity = function(density) {};

/**
 * @return {number}
 */
p2.Body.prototype.getArea = function() {};

/**
 * @return {!p2.AABB}
 */
p2.Body.prototype.getAABB = function() {};

/**
 * @return {void}
 */
p2.Body.prototype.updateAABB = function() {};

/**
 * @return {void}
 */
p2.Body.prototype.updateBoundingRadius = function() {};

/**
 * @param {!p2.Shape} shape
 * @param {!Array<number>=} offset
 * @param {number=} angle
 * @return {void}
 */
p2.Body.prototype.addShape = function(shape, offset, angle) {};

/**
 * @param {!p2.Shape} shape
 * @return {boolean}
 */
p2.Body.prototype.removeShape = function(shape) {};

/**
 * @return {void}
 */
p2.Body.prototype.updateMassProperties = function() {};

/**
 * @param {!Array<number>} force
 * @param {!Array<number>=} relativePoint
 * @return {void}
 */
p2.Body.prototype.applyForce = function(force, relativePoint) {};

/**
 * @param {!Array<number>} localforce
 * @param {!Array<number>=} localPoint
 * @return {void}
 */
p2.Body.prototype.applyForceLocal = function(localforce, localPoint) {};

/**
 * @param {!Array<number>} impulse
 * @param {!Array<number>=} relativePoint
 * @return {void}
 */
p2.Body.prototype.applyImpulse = function(impulse, relativePoint) {};

/**
 * @param {!Array<number>} impulse
 * @param {!Array<number>=} localPoint
 * @return {void}
 */
p2.Body.prototype.applyImpulseLocal = function(impulse, localPoint) {};

/**
 * @param {!Array<number>} out
 * @param {!Array<number>} worldPoint
 * @return {void}
 */
p2.Body.prototype.toLocalFrame = function(out, worldPoint) {};

/**
 * @param {!Array<number>} out
 * @param {!Array<number>} localPoint
 * @return {void}
 */
p2.Body.prototype.toWorldFrame = function(out, localPoint) {};

/**
 * @param {!Array<!Array<number>>} path
 * @param {{optimalDecomp: boolean, skipSimpleCheck: boolean, removeCollinearPoints: ?}=} options
 * @return {boolean}
 */
p2.Body.prototype.fromPolygon = function(path, options) {};

/**
 * @return {void}
 */
p2.Body.prototype.adjustCenterOfMass = function() {};

/**
 * @return {void}
 */
p2.Body.prototype.setZeroForce = function() {};

/**
 * @return {void}
 */
p2.Body.prototype.resetConstraintVelocity = function() {};

/**
 * @param {number} dy
 * @return {void}
 */
p2.Body.prototype.applyDamping = function(dy) {};

/**
 * @return {void}
 */
p2.Body.prototype.wakeUp = function() {};

/**
 * @return {void}
 */
p2.Body.prototype.sleep = function() {};

/**
 * @param {number} time
 * @param {boolean} dontSleep
 * @param {number} dt
 * @return {void}
 */
p2.Body.prototype.sleepTick = function(time, dontSleep, dt) {};

/**
 * @param {!Array<number>} story
 * @param {number} dt
 * @return {!Array<number>}
 */
p2.Body.prototype.getVelocityFromPosition = function(story, dt) {};

/**
 * @param {number} timeStep
 * @return {number}
 */
p2.Body.prototype.getAngularVelocityFromPosition = function(timeStep) {};

/**
 * @param {!p2.Body} body
 * @return {boolean}
 */
p2.Body.prototype.overlaps = function(body) {};

/**
 * @constructor
 * @struct
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @param {{stiffness: number, damping: number, localAnchorA: !Array<number>, localAnchorB: !Array<number>, worldAnchorA: !Array<number>, worldAnchorB: !Array<number>}=} options
 */
p2.Spring = function(bodyA, bodyB, options) {};
 /** @type {number} */
p2.Spring.prototype.stiffness;
 /** @type {number} */
p2.Spring.prototype.damping;
 /** @type {!p2.Body} */
p2.Spring.prototype.bodyA;
 /** @type {!p2.Body} */
p2.Spring.prototype.bodyB;

/**
 * @return {void}
 */
p2.Spring.prototype.applyForce = function() {};
/**
 * @extends {p2.Spring}
 * @constructor
 * @struct
 */
p2.LinearSpring = function() {};
 /** @type {!Array<number>} */
p2.LinearSpring.prototype.localAnchorA;
 /** @type {!Array<number>} */
p2.LinearSpring.prototype.localAnchorB;
 /** @type {number} */
p2.LinearSpring.prototype.restLength;

/**
 * @param {!Array<number>} worldAnchorA
 * @return {void}
 */
p2.LinearSpring.prototype.setWorldAnchorA = function(worldAnchorA) {};

/**
 * @param {!Array<number>} worldAnchorB
 * @return {void}
 */
p2.LinearSpring.prototype.setWorldAnchorB = function(worldAnchorB) {};

/**
 * @param {!Array<number>} result
 * @return {!Array<number>}
 */
p2.LinearSpring.prototype.getWorldAnchorA = function(result) {};

/**
 * @param {!Array<number>} result
 * @return {!Array<number>}
 */
p2.LinearSpring.prototype.getWorldAnchorB = function(result) {};

/**
 * @return {void}
 */
p2.LinearSpring.prototype.applyForce = function() {};

/**
 * @constructor
 * @struct
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @param {{restAngle: number, stiffness: number, damping: number}=} options
 */
p2.RotationalSpring = function(bodyA, bodyB, options) {};
 /** @type {number} */
p2.RotationalSpring.prototype.restAngle;
/**
 * @extends {p2.SharedShapeOptions}
 * @record
 * @struct
 */
p2.CapsuleOptions = function() {};
 /** @type {number} */
p2.CapsuleOptions.prototype.length;
 /** @type {number} */
p2.CapsuleOptions.prototype.radius;

/**
 * @constructor
 * @struct
 * @param {!p2.CapsuleOptions=} options
 */
p2.Capsule = function(options) {};
 /** @type {number} */
p2.Capsule.prototype.length;
 /** @type {number} */
p2.Capsule.prototype.radius;
/**
 * @extends {p2.SharedShapeOptions}
 * @record
 * @struct
 */
p2.CircleOptions = function() {};
 /** @type {number} */
p2.CircleOptions.prototype.radius;

/**
 * @constructor
 * @struct
 * @param {!p2.CircleOptions=} options
 */
p2.Circle = function(options) {};
 /** @type {number} */
p2.Circle.prototype.radius;
/**
 * @extends {p2.SharedShapeOptions}
 * @record
 * @struct
 */
p2.ConvexOptions = function() {};
 /** @type {number} */
p2.ConvexOptions.prototype.length;
 /** @type {number} */
p2.ConvexOptions.prototype.radius;

/**
 * @constructor
 * @struct
 * @param {!p2.ConvexOptions=} options
 */
p2.Convex = function(options) {};
 /** @type {!Array<!Array<number>>} */
p2.Convex.prototype.vertices;
 /** @type {!Array<number>} */
p2.Convex.prototype.axes;
 /** @type {!Array<number>} */
p2.Convex.prototype.centerOfMass;
 /** @type {!Array<number>} */
p2.Convex.prototype.triangles;
 /** @type {number} */
p2.Convex.prototype.boundingRadius;

/**
 * @param {!Array<number>} a
 * @param {!Array<number>} b
 * @param {!Array<number>} c
 * @return {number}
 */
p2.Convex.triangleArea = function(a, b, c) {};

/**
 * @param {!Array<number>} localAxis
 * @param {!Array<number>} result
 * @return {void}
 */
p2.Convex.prototype.projectOntoLocalAxis = function(localAxis, result) {};

/**
 * @param {!Array<number>} localAxis
 * @param {!Array<number>} shapeOffset
 * @param {number} shapeAngle
 * @param {!Array<number>} result
 * @return {void}
 */
p2.Convex.prototype.projectOntoWorldAxis = function(localAxis, shapeOffset, shapeAngle, result) {};

/**
 * @return {void}
 */
p2.Convex.prototype.updateCenterOfMass = function() {};
/**
 * @extends {p2.SharedShapeOptions}
 * @record
 * @struct
 */
p2.HeightfieldOptions = function() {};
 /** @type {!Array<number>} */
p2.HeightfieldOptions.prototype.heights;
 /** @type {number} */
p2.HeightfieldOptions.prototype.minValue;
 /** @type {number} */
p2.HeightfieldOptions.prototype.maxValue;
 /** @type {number} */
p2.HeightfieldOptions.prototype.elementWidth;

/**
 * @constructor
 * @struct
 * @param {!p2.HeightfieldOptions=} options
 */
p2.Heightfield = function(options) {};
 /** @type {!Array<number>} */
p2.Heightfield.prototype.data;
 /** @type {number} */
p2.Heightfield.prototype.maxValue;
 /** @type {number} */
p2.Heightfield.prototype.minValue;
 /** @type {number} */
p2.Heightfield.prototype.elementWidth;
/**
 * @record
 * @struct
 */
p2.SharedShapeOptions = function() {};
 /** @type {!Array<number>} */
p2.SharedShapeOptions.prototype.position;
 /** @type {number} */
p2.SharedShapeOptions.prototype.angle;
 /** @type {number} */
p2.SharedShapeOptions.prototype.collisionGroup;
 /** @type {boolean} */
p2.SharedShapeOptions.prototype.collisionResponse;
 /** @type {number} */
p2.SharedShapeOptions.prototype.collisionMask;
 /** @type {boolean} */
p2.SharedShapeOptions.prototype.sensor;
/**
 * @extends {p2.SharedShapeOptions}
 * @record
 * @struct
 */
p2.ShapeOptions = function() {};
 /** @type {number} */
p2.ShapeOptions.prototype.type;

/**
 * @constructor
 * @struct
 * @param {!p2.ShapeOptions=} options
 */
p2.Shape = function(options) {};
 /** @type {number} */
p2.Shape.idCounter;
 /** @type {number} */
p2.Shape.CIRCLE;
 /** @type {number} */
p2.Shape.PARTICLE;
 /** @type {number} */
p2.Shape.PLANE;
 /** @type {number} */
p2.Shape.CONVEX;
 /** @type {number} */
p2.Shape.LINE;
 /** @type {number} */
p2.Shape.BOX;
 /** @type {number} */
p2.Shape.CAPSULE;
 /** @type {number} */
p2.Shape.HEIGHTFIELD;
 /** @type {number} */
p2.Shape.prototype.type;
 /** @type {number} */
p2.Shape.prototype.id;
 /** @type {!Array<number>} */
p2.Shape.prototype.position;
 /** @type {number} */
p2.Shape.prototype.angle;
 /** @type {number} */
p2.Shape.prototype.boundingRadius;
 /** @type {number} */
p2.Shape.prototype.collisionGroup;
 /** @type {boolean} */
p2.Shape.prototype.collisionResponse;
 /** @type {number} */
p2.Shape.prototype.collisionMask;
 /** @type {!p2.Material} */
p2.Shape.prototype.material;
 /** @type {number} */
p2.Shape.prototype.area;
 /** @type {boolean} */
p2.Shape.prototype.sensor;

/**
 * @param {number} mass
 * @return {number}
 */
p2.Shape.prototype.computeMomentOfInertia = function(mass) {};

/**
 * @return {number}
 */
p2.Shape.prototype.updateBoundingRadius = function() {};

/**
 * @return {void}
 */
p2.Shape.prototype.updateArea = function() {};

/**
 * @param {!p2.AABB} out
 * @param {!Array<number>} position
 * @param {number} angle
 * @return {void}
 */
p2.Shape.prototype.computeAABB = function(out, position, angle) {};
/**
 * @extends {p2.SharedShapeOptions}
 * @record
 * @struct
 */
p2.LineOptions = function() {};
 /** @type {number} */
p2.LineOptions.prototype.length;

/**
 * @constructor
 * @struct
 * @param {!p2.LineOptions=} options
 */
p2.Line = function(options) {};
 /** @type {number} */
p2.Line.prototype.length;

/**
 * @constructor
 * @struct
 * @param {!p2.SharedShapeOptions=} options
 */
p2.Particle = function(options) {};

/**
 * @constructor
 * @struct
 * @param {!p2.SharedShapeOptions=} options
 */
p2.Plane = function(options) {};
/**
 * @record
 * @struct
 */
p2.BoxOptions = function() {};
 /** @type {number} */
p2.BoxOptions.prototype.width;
 /** @type {number} */
p2.BoxOptions.prototype.height;

/**
 * @constructor
 * @struct
 * @param {!p2.BoxOptions=} options
 */
p2.Box = function(options) {};
 /** @type {number} */
p2.Box.prototype.width;
 /** @type {number} */
p2.Box.prototype.height;

/**
 * @constructor
 * @struct
 * @param {!Object=} options
 * @param {number=} type
 */
p2.Solver = function(options, type) {};
 /** @type {number} */
p2.Solver.GS;
 /** @type {number} */
p2.Solver.ISLAND;
 /** @type {number} */
p2.Solver.prototype.type;
 /** @type {!Array<!p2.Equation>} */
p2.Solver.prototype.equations;
 /** @type {!p2.Equation} */
p2.Solver.prototype.equationSortFunction;

/**
 * @param {number} dy
 * @param {!p2.World} world
 * @return {void}
 */
p2.Solver.prototype.solve = function(dy, world) {};

/**
 * @param {number} dy
 * @param {!p2.Island} island
 * @return {void}
 */
p2.Solver.prototype.solveIsland = function(dy, island) {};

/**
 * @return {void}
 */
p2.Solver.prototype.sortEquations = function() {};

/**
 * @param {!p2.Equation} eq
 * @return {void}
 */
p2.Solver.prototype.addEquation = function(eq) {};

/**
 * @param {!Array<!p2.Equation>} eqs
 * @return {void}
 */
p2.Solver.prototype.addEquations = function(eqs) {};

/**
 * @param {!p2.Equation} eq
 * @return {void}
 */
p2.Solver.prototype.removeEquation = function(eq) {};

/**
 * @return {void}
 */
p2.Solver.prototype.removeAllEquations = function() {};

/**
 * @constructor
 * @struct
 * @param {{iterations: number, tolerance: number}=} options
 */
p2.GSSolver = function(options) {};
 /** @type {number} */
p2.GSSolver.prototype.iterations;
 /** @type {number} */
p2.GSSolver.prototype.tolerance;
 /** @type {boolean} */
p2.GSSolver.prototype.useZeroRHS;
 /** @type {number} */
p2.GSSolver.prototype.frictionIterations;
 /** @type {number} */
p2.GSSolver.prototype.usedIterations;

/**
 * @param {number} h
 * @param {!p2.World} world
 * @return {void}
 */
p2.GSSolver.prototype.solve = function(h, world) {};

/**
 * @constructor
 * @struct
 * @param {!p2.Body} bodyA
 * @param {!p2.Shape} shapeA
 * @param {!p2.Body} bodyB
 * @param {!p2.Shape} shapeB
 */
p2.OverlapKeeper = function(bodyA, shapeA, bodyB, shapeB) {};
 /** @type {!p2.Shape} */
p2.OverlapKeeper.prototype.shapeA;
 /** @type {!p2.Shape} */
p2.OverlapKeeper.prototype.shapeB;
 /** @type {!p2.Body} */
p2.OverlapKeeper.prototype.bodyA;
 /** @type {!p2.Body} */
p2.OverlapKeeper.prototype.bodyB;

/**
 * @return {void}
 */
p2.OverlapKeeper.prototype.tick = function() {};

/**
 * @param {!p2.Body} bodyA
 * @param {!p2.Shape} shapeA
 * @param {!p2.Body} bodyB
 * @param {!p2.Body} shapeB
 * @return {void}
 */
p2.OverlapKeeper.prototype.setOverlapping = function(bodyA, shapeA, bodyB, shapeB) {};

/**
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @return {boolean}
 */
p2.OverlapKeeper.prototype.bodiesAreOverlapping = function(bodyA, bodyB) {};

/**
 * @param {!p2.Body} bodyA
 * @param {!p2.Shape} shapeA
 * @param {!p2.Body} bodyB
 * @param {!p2.Shape} shapeB
 * @return {void}
 */
p2.OverlapKeeper.prototype.set = function(bodyA, shapeA, bodyB, shapeB) {};
/**
 * @constructor
 * @struct
 */
p2.TupleDictionary = function() {};
 /** @type {!Array<number>} */
p2.TupleDictionary.prototype.data;
 /** @type {!Array<number>} */
p2.TupleDictionary.prototype.keys;

/**
 * @param {number} id1
 * @param {number} id2
 * @return {string}
 */
p2.TupleDictionary.prototype.getKey = function(id1, id2) {};

/**
 * @param {number} key
 * @return {number}
 */
p2.TupleDictionary.prototype.getByKey = function(key) {};

/**
 * @param {number} i
 * @param {number} j
 * @return {number}
 */
p2.TupleDictionary.prototype.get = function(i, j) {};

/**
 * @param {number} i
 * @param {number} j
 * @param {number} value
 * @return {number}
 */
p2.TupleDictionary.prototype.set = function(i, j, value) {};

/**
 * @return {void}
 */
p2.TupleDictionary.prototype.reset = function() {};

/**
 * @param {!p2.TupleDictionary} dict
 * @return {void}
 */
p2.TupleDictionary.prototype.copy = function(dict) {};
/**
 * @constructor
 * @struct
 */
p2.Utils = function() {};

/**
 * @template T
 * @param {!Array<T>} a
 * @param {!Array<T>} b
 * @return {!Array<T>}
 */
p2.Utils.appendArray = function(a, b) {};

/**
 * @template T
 * @param {!Array<T>} array
 * @param {number} index
 * @param {number} howMany
 * @return {void}
 */
p2.Utils.splice = function(array, index, howMany) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {void}
 */
p2.Utils.extend = function(a, b) {};

/**
 * @param {?} options
 * @param {?} defaults
 * @return {?}
 */
p2.Utils.defaults = function(options, defaults) {};
/**
 * @constructor
 * @struct
 */
p2.Island = function() {};
 /** @type {!Array<!p2.Equation>} */
p2.Island.prototype.equations;
 /** @type {!Array<!p2.Body>} */
p2.Island.prototype.bodies;

/**
 * @return {void}
 */
p2.Island.prototype.reset = function() {};

/**
 * @param {?} result
 * @return {!Array<!p2.Body>}
 */
p2.Island.prototype.getBodies = function(result) {};

/**
 * @return {boolean}
 */
p2.Island.prototype.wantsToSleep = function() {};

/**
 * @return {boolean}
 */
p2.Island.prototype.sleep = function() {};
/**
 * @extends {p2.Solver}
 * @constructor
 * @struct
 */
p2.IslandManager = function() {};
 /** @type {!Array<!p2.Equation>} */
p2.IslandManager.prototype.equations;
 /** @type {!Array<!p2.Island>} */
p2.IslandManager.prototype.islands;
 /** @type {!Array<!p2.IslandNode>} */
p2.IslandManager.prototype.nodes;

/**
 * @param {!Array<!p2.IslandNode>} nodes
 * @return {!p2.IslandNode}
 */
p2.IslandManager.getUnvisitedNode = function(nodes) {};

/**
 * @param {!p2.IslandNode} node
 * @param {!Array<!p2.Body>} bds
 * @param {!Array<!p2.Equation>} eqs
 * @return {void}
 */
p2.IslandManager.prototype.visit = function(node, bds, eqs) {};

/**
 * @param {!p2.IslandNode} root
 * @param {!Array<!p2.Body>} bds
 * @param {!Array<!p2.Equation>} eqs
 * @return {void}
 */
p2.IslandManager.prototype.bfs = function(root, bds, eqs) {};

/**
 * @param {!p2.World} world
 * @return {!Array<!p2.Island>}
 */
p2.IslandManager.prototype.split = function(world) {};

/**
 * @constructor
 * @struct
 * @param {!p2.Body} body
 */
p2.IslandNode = function(body) {};
 /** @type {!p2.Body} */
p2.IslandNode.prototype.body;
 /** @type {!Array<!p2.IslandNode>} */
p2.IslandNode.prototype.neighbors;
 /** @type {!Array<!p2.Equation>} */
p2.IslandNode.prototype.equations;
 /** @type {boolean} */
p2.IslandNode.prototype.visited;

/**
 * @return {void}
 */
p2.IslandNode.prototype.reset = function() {};

/**
 * @constructor
 * @struct
 * @param {{solver: !p2.Solver, gravity: !Array<number>, broadphase: !p2.Broadphase, islandSplit: boolean, doProfiling: boolean}=} options
 */
p2.World = function(options) {};
 /** @type {{type: string}} */
p2.World.prototype.postStepEvent;
 /** @type {{type: string}} */
p2.World.prototype.addBodyEvent;
 /** @type {{type: string}} */
p2.World.prototype.removeBodyEvent;
 /** @type {{type: string}} */
p2.World.prototype.addSpringEvent;
 /** @type {{type: string, bodyA: !p2.Body, bodyB: !p2.Body, shapeA: !p2.Shape, shapeB: !p2.Shape, contactEquation: !p2.ContactEquation}} */
p2.World.prototype.impactEvent;
 /** @type {{type: string, pairs: !Array<!p2.Body>}} */
p2.World.prototype.postBroadphaseEvent;
 /** @type {{type: string, shapeA: !p2.Shape, shapeB: !p2.Shape, bodyA: !p2.Body, bodyB: !p2.Body, contactEquations: !Array<!p2.ContactEquation>}} */
p2.World.prototype.beginContactEvent;
 /** @type {{type: string, shapeA: !p2.Shape, shapeB: !p2.Shape, bodyA: !p2.Body, bodyB: !p2.Body}} */
p2.World.prototype.endContactEvent;
 /** @type {{type: string, contactEquations: !Array<!p2.ContactEquation>, frictionEquations: !Array<!p2.FrictionEquation>}} */
p2.World.prototype.preSolveEvent;
 /** @type {number} */
p2.World.NO_SLEEPING;
 /** @type {number} */
p2.World.BODY_SLEEPING;
 /** @type {number} */
p2.World.ISLAND_SLEEPING;
 /** @type {!Array<!p2.Spring>} */
p2.World.prototype.springs;
 /** @type {!Array<!p2.Body>} */
p2.World.prototype.bodies;
 /** @type {!p2.Solver} */
p2.World.prototype.solver;
 /** @type {!p2.Narrowphase} */
p2.World.prototype.narrowphase;
 /** @type {!p2.IslandManager} */
p2.World.prototype.islandManager;
 /** @type {!Array<number>} */
p2.World.prototype.gravity;
 /** @type {number} */
p2.World.prototype.frictionGravity;
 /** @type {boolean} */
p2.World.prototype.useWorldGravityAsFrictionGravity;
 /** @type {boolean} */
p2.World.prototype.useFrictionGravityOnZeroGravity;
 /** @type {boolean} */
p2.World.prototype.doProfiling;
 /** @type {number} */
p2.World.prototype.lastStepTime;
 /** @type {!p2.Broadphase} */
p2.World.prototype.broadphase;
 /** @type {!Array<!p2.Constraint>} */
p2.World.prototype.constraints;
 /** @type {!p2.Material} */
p2.World.prototype.defaultMaterial;
 /** @type {!p2.ContactMaterial} */
p2.World.prototype.defaultContactMaterial;
 /** @type {number} */
p2.World.prototype.lastTimeStep;
 /** @type {boolean} */
p2.World.prototype.applySpringForces;
 /** @type {boolean} */
p2.World.prototype.applyDamping;
 /** @type {boolean} */
p2.World.prototype.applyGravity;
 /** @type {boolean} */
p2.World.prototype.solveConstraints;
 /** @type {!Array<!p2.ContactMaterial>} */
p2.World.prototype.contactMaterials;
 /** @type {number} */
p2.World.prototype.time;
 /** @type {boolean} */
p2.World.prototype.stepping;
 /** @type {boolean} */
p2.World.prototype.islandSplit;
 /** @type {boolean} */
p2.World.prototype.emitImpactEvent;
 /** @type {number} */
p2.World.prototype.sleepMode;

/**
 * @param {!p2.Body} body
 * @param {number} dy
 * @return {void}
 */
p2.World.integrateBody = function(body, dy) {};

/**
 * @param {!p2.Constraint} c
 * @return {void}
 */
p2.World.prototype.addConstraint = function(c) {};

/**
 * @param {!p2.ContactMaterial} contactMaterial
 * @return {void}
 */
p2.World.prototype.addContactMaterial = function(contactMaterial) {};

/**
 * @param {!p2.ContactMaterial} cm
 * @return {void}
 */
p2.World.prototype.removeContactMaterial = function(cm) {};

/**
 * @param {!p2.Material} materialA
 * @param {!p2.Material} materialB
 * @return {!p2.ContactMaterial}
 */
p2.World.prototype.getContactMaterial = function(materialA, materialB) {};

/**
 * @param {!p2.Constraint} c
 * @return {void}
 */
p2.World.prototype.removeConstraint = function(c) {};

/**
 * @param {number} dy
 * @param {number=} timeSinceLastCalled
 * @param {number=} maxSubSteps
 * @return {void}
 */
p2.World.prototype.step = function(dy, timeSinceLastCalled, maxSubSteps) {};

/**
 * @param {!p2.Narrowphase} np
 * @param {!p2.Body} bi
 * @param {!p2.Shape} si
 * @param {!Array<?>} xi
 * @param {number} ai
 * @param {!p2.Body} bj
 * @param {!p2.Shape} sj
 * @param {!Array<?>} xj
 * @param {number} aj
 * @param {number} cm
 * @param {number} glen
 * @return {void}
 */
p2.World.prototype.runNarrowphase = function(np, bi, si, xi, ai, bj, sj, xj, aj, cm, glen) {};

/**
 * @param {!p2.Spring} s
 * @return {void}
 */
p2.World.prototype.addSpring = function(s) {};

/**
 * @param {!p2.Spring} s
 * @return {void}
 */
p2.World.prototype.removeSpring = function(s) {};

/**
 * @param {!p2.Body} body
 * @return {void}
 */
p2.World.prototype.addBody = function(body) {};

/**
 * @param {!p2.Body} body
 * @return {void}
 */
p2.World.prototype.removeBody = function(body) {};

/**
 * @param {number} id
 * @return {!p2.Body}
 */
p2.World.prototype.getBodyByID = function(id) {};

/**
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @return {void}
 */
p2.World.prototype.disableBodyCollision = function(bodyA, bodyB) {};

/**
 * @param {!p2.Body} bodyA
 * @param {!p2.Body} bodyB
 * @return {void}
 */
p2.World.prototype.enableBodyCollision = function(bodyA, bodyB) {};

/**
 * @return {void}
 */
p2.World.prototype.clear = function() {};

/**
 * @return {!p2.World}
 */
p2.World.prototype.clone = function() {};

/**
 * @param {!Array<number>} worldPoint
 * @param {!Array<!p2.Body>} bodies
 * @param {number} precision
 * @return {!Array<!p2.Body>}
 */
p2.World.prototype.hitTest = function(worldPoint, bodies, precision) {};

/**
 * @param {{relaxation: number, stiffness: number}} parameters
 * @return {void}
 */
p2.World.prototype.setGlobalEquationParameters = function(parameters) {};

/**
 * @param {number} stiffness
 * @return {void}
 */
p2.World.prototype.setGlobalStiffness = function(stiffness) {};

/**
 * @param {number} relaxation
 * @return {void}
 */
p2.World.prototype.setGlobalRelaxation = function(relaxation) {};
