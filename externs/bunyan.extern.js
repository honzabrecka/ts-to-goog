/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/bunyan/index.d.ts:

/* TODO: ImportDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {!Logger.LoggerOptions} options
 */
function Logger(options) {}
 /** @type {?} */
Logger.prototype.fields;
 /** @type {boolean} */
Logger.prototype.src;

/**
 * @param {!Logger.Stream} stream
 * @return {void}
 */
Logger.prototype.addStream = function(stream) {};

/**
 * @param {!Logger.Serializers} serializers
 * @return {void}
 */
Logger.prototype.addSerializers = function(serializers) {};

/**
 * @param {!Object} options
 * @param {boolean=} simple
 * @return {!Logger}
 */
Logger.prototype.child = function(options, simple) {};

/**
 * @return {void}
 */
Logger.prototype.reopenFileStreams = function() {};

/**
 * @param {(number|string)=} value
 * @return {number|void}
 */
Logger.prototype.level = function(value) {};

/**
 * @param {(string|number)=} name
 * @param {(number|string)=} value
 * @return {!Array<number>|number|void}
 */
Logger.prototype.levels = function(name, value) {};

/**
 * Returns a boolean: is the `trace` level enabled?
 * 
 * This is equivalent to `log.isTraceEnabled()` or `log.isEnabledFor(TRACE)` in log4j.
 * Special case to log an `Error` instance to the record.
 * This adds an `err` field with exception details
 * (including the stack) and sets `msg` to the exception
 * message or you can specify the `msg`.
 * The first field can optionally be a "fields" object, which
 * is merged into the log record.
 * 
 * To pass in an Error *and* other fields, use the `err`
 * field name for the Error instance.
 * Uses `util.format` for msg formatting.
 * @param {!Error|!Object|?=} error_or_obj_or_format
 * @param {...?} params
 * @return {boolean|void}
 */
Logger.prototype.trace = function(error_or_obj_or_format, params) {};

/**
 * Returns a boolean: is the `debug` level enabled?
 * 
 * This is equivalent to `log.isDebugEnabled()` or `log.isEnabledFor(DEBUG)` in log4j.
 * Special case to log an `Error` instance to the record.
 * This adds an `err` field with exception details
 * (including the stack) and sets `msg` to the exception
 * message or you can specify the `msg`.
 * The first field can optionally be a "fields" object, which
 * is merged into the log record.
 * 
 * To pass in an Error *and* other fields, use the `err`
 * field name for the Error instance.
 * Uses `util.format` for msg formatting.
 * @param {!Error|!Object|?=} error_or_obj_or_format
 * @param {...?} params
 * @return {boolean|void}
 */
Logger.prototype.debug = function(error_or_obj_or_format, params) {};

/**
 * Returns a boolean: is the `info` level enabled?
 * 
 * This is equivalent to `log.isInfoEnabled()` or `log.isEnabledFor(INFO)` in log4j.
 * Special case to log an `Error` instance to the record.
 * This adds an `err` field with exception details
 * (including the stack) and sets `msg` to the exception
 * message or you can specify the `msg`.
 * The first field can optionally be a "fields" object, which
 * is merged into the log record.
 * 
 * To pass in an Error *and* other fields, use the `err`
 * field name for the Error instance.
 * Uses `util.format` for msg formatting.
 * @param {!Error|!Object|?=} error_or_obj_or_format
 * @param {...?} params
 * @return {boolean|void}
 */
Logger.prototype.info = function(error_or_obj_or_format, params) {};

/**
 * Returns a boolean: is the `warn` level enabled?
 * 
 * This is equivalent to `log.isWarnEnabled()` or `log.isEnabledFor(WARN)` in log4j.
 * Special case to log an `Error` instance to the record.
 * This adds an `err` field with exception details
 * (including the stack) and sets `msg` to the exception
 * message or you can specify the `msg`.
 * The first field can optionally be a "fields" object, which
 * is merged into the log record.
 * 
 * To pass in an Error *and* other fields, use the `err`
 * field name for the Error instance.
 * Uses `util.format` for msg formatting.
 * @param {!Error|!Object|?=} error_or_obj_or_format
 * @param {...?} params
 * @return {boolean|void}
 */
Logger.prototype.warn = function(error_or_obj_or_format, params) {};

/**
 * Returns a boolean: is the `error` level enabled?
 * 
 * This is equivalent to `log.isErrorEnabled()` or `log.isEnabledFor(ERROR)` in log4j.
 * Special case to log an `Error` instance to the record.
 * This adds an `err` field with exception details
 * (including the stack) and sets `msg` to the exception
 * message or you can specify the `msg`.
 * The first field can optionally be a "fields" object, which
 * is merged into the log record.
 * 
 * To pass in an Error *and* other fields, use the `err`
 * field name for the Error instance.
 * Uses `util.format` for msg formatting.
 * @param {!Error|!Object|?=} error_or_obj_or_format
 * @param {...?} params
 * @return {boolean|void}
 */
Logger.prototype.error = function(error_or_obj_or_format, params) {};

/**
 * Returns a boolean: is the `fatal` level enabled?
 * 
 * This is equivalent to `log.isFatalEnabled()` or `log.isEnabledFor(FATAL)` in log4j.
 * Special case to log an `Error` instance to the record.
 * This adds an `err` field with exception details
 * (including the stack) and sets `msg` to the exception
 * message or you can specify the `msg`.
 * The first field can optionally be a "fields" object, which
 * is merged into the log record.
 * 
 * To pass in an Error *and* other fields, use the `err`
 * field name for the Error instance.
 * Uses `util.format` for msg formatting.
 * @param {!Error|!Object|?=} error_or_obj_or_format
 * @param {...?} params
 * @return {boolean|void}
 */
Logger.prototype.fatal = function(error_or_obj_or_format, params) {};
 /** @type {number} */
Logger.TRACE;
 /** @type {number} */
Logger.DEBUG;
 /** @type {number} */
Logger.INFO;
 /** @type {number} */
Logger.WARN;
 /** @type {number} */
Logger.ERROR;
 /** @type {number} */
Logger.FATAL;

/** @typedef {string} */
Logger.LogLevelString;

/** @typedef {(number|string)} */
Logger.LogLevel;
 /** @type {?} */
Logger.levelFromName;
 /** @type {!Object<number,string>} */
Logger.nameFromLevel;
 /** @type {!Logger.StdSerializers} */
Logger.stdSerializers;

/**
 * @param {!Logger.LoggerOptions} options
 * @return {!Logger}
 */
Logger.createLogger = function(options) {};

/**
 * @return {function(string, ?): ?}
 */
Logger.safeCycles = function() {};

/**
 * @param {(number|string)} value
 * @return {number}
 */
Logger.resolveLevel = function(value) {};
/**
 * @record
 * @struct
 */
Logger.Stream = function() {};
 /** @type {string} */
Logger.Stream.prototype.type;
 /** @type {(number|string)} */
Logger.Stream.prototype.level;
 /** @type {string} */
Logger.Stream.prototype.path;
 /** @type {(!Logger.Stream|!NodeJS.WritableStream)} */
Logger.Stream.prototype.stream;
 /** @type {boolean} */
Logger.Stream.prototype.closeOnExit;
 /** @type {string} */
Logger.Stream.prototype.period;
 /** @type {number} */
Logger.Stream.prototype.count;
 /** @type {string} */
Logger.Stream.prototype.name;
/**
 * @record
 * @struct
 */
Logger.LoggerOptions = function() {};
 /** @type {string} */
Logger.LoggerOptions.prototype.name;
 /** @type {!Array<!Logger.Stream>} */
Logger.LoggerOptions.prototype.streams;
 /** @type {(number|string)} */
Logger.LoggerOptions.prototype.level;
 /** @type {!NodeJS.WritableStream} */
Logger.LoggerOptions.prototype.stream;
 /** @type {!Logger.Serializers} */
Logger.LoggerOptions.prototype.serializers;
 /** @type {boolean} */
Logger.LoggerOptions.prototype.src;

/* TODO: IndexSignature: Logger */

/** @typedef {function(?): ?} */
Logger.Serializer;
/**
 * @record
 * @struct
 */
Logger.Serializers = function() {};

/* TODO: IndexSignature: Logger */
/**
 * @extends {Logger.Serializers}
 * @record
 * @struct
 */
Logger.StdSerializers = function() {};
 /** @type {function(?): ?} */
Logger.StdSerializers.prototype.err;
 /** @type {function(?): ?} */
Logger.StdSerializers.prototype.res;
 /** @type {function(?): ?} */
Logger.StdSerializers.prototype.req;
/**
 * @record
 * @struct
 */
Logger.RingBufferOptions = function() {};
 /** @type {number} */
Logger.RingBufferOptions.prototype.limit;

/**
 * @constructor
 * @struct
 * @param {!Logger.RingBufferOptions} options
 */
Logger.RingBuffer = function(options) {};
 /** @type {boolean} */
Logger.RingBuffer.prototype.writable;
 /** @type {!Array<?>} */
Logger.RingBuffer.prototype.records;

/**
 * @param {?} record
 * @return {boolean}
 */
Logger.RingBuffer.prototype.write = function(record) {};

/**
 * @param {?=} record
 * @return {void}
 */
Logger.RingBuffer.prototype.end = function(record) {};

/**
 * @return {void}
 */
Logger.RingBuffer.prototype.destroy = function() {};

/**
 * @return {void}
 */
Logger.RingBuffer.prototype.destroySoon = function() {};

/* TODO: ExportAssignment in  */
