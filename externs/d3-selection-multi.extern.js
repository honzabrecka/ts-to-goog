/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/d3-selection-multi/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/** @typedef {?} */
var ValueMap;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "d3-selection"

/**
 * Set multiple attributes on the given selection. Attribute values may be constant or derived from each node and its bound data.
 * 
 * Derive a map of attributes to be set on the selection.
 * 
 * @param {?} attrs An object used as a map of attribute names to set / A function that returns an object of attribute names and values to set.
 * @return {Selection}
 */
tsickle_declare_module.d__selection.Selection.prototype.attrs = function(attrs) {};

/**
 * Set multiple CSS style properties on the given selection. Style properties may be constant or derived from each node and its bound data.
 * 
 * Derive a map of style properties to be set on the selection.
 * 
 * @param {?} style An object used as a map of style properties to set. / A function that returns an object of style properties and the values to be set.
 * @param {string=} priority The CSS priority (either "important" or undefined). / The CSS priority (either "important" or undefined)
 * @return {Selection}
 */
tsickle_declare_module.d__selection.Selection.prototype.styles = function(style, priority) {};

/**
 * Set multiple object properties directly on the selection's node(s). Property values may be constants or derived from each node and its bound data.
 * 
 * Derive a map of object properties to be set on the selection's node(s).
 * 
 * @param {?} props An object used as a map of object properties to be set. / A function that returns an object of properties and their values.
 * @return {Selection}
 */
tsickle_declare_module.d__selection.Selection.prototype.properties = function(props) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "d3-transition"

/**
 * Set multiple attribute values. The transition will animate from the present value to the new value. Attribute values may be constant or derived from each node and its bound data.
 * 
 * Derive a map of attribute values to set.
 * 
 * @param {?} attrs An object used as a map of attributes and their values. / A function returning a map of attributes and their values.
 * @return {Transition}
 */
tsickle_declare_module.d__transition.Transition.prototype.attrs = function(attrs) {};

/**
 * Set multiple style properties. The transition will animate from the present value to the new value. Attribute values may be constant or derived from each node and its bound data.
 * 
 * Derive a map of style properties to be set.
 * 
 * @param {?} style A map of style properties and their values / A function returning a map of style properties and their values
 * @param {string=} priority The CSS priority (either "important" or undefined)
 * @return {Transition}
 */
tsickle_declare_module.d__transition.Transition.prototype.styles = function(style, priority) {};
