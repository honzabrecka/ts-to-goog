/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/knockout.kogrid/index.d.ts:
/** @const */
var kg = {};
/**
 * @record
 * @struct
 */
kg.DomUtilityService = function() {};

/**
 * @param {!kg.Grid<?>} grid
 * @return {void}
 */
kg.DomUtilityService.prototype.UpdateGridLayout = function(grid) {};

/**
 * @param {!kg.Grid<?>} grid
 * @return {void}
 */
kg.DomUtilityService.prototype.BuildStyles = function(grid) {};
/**
 * @record
 * @struct
 */
kg.Row = function() {};
 /** @type {!KnockoutObservable<boolean>} */
kg.Row.prototype.selected;
 /** @type {EntityType} */
kg.Row.prototype.entity;
/**
 * @record
 * @struct
 */
kg.RowFactory = function() {};
 /** @type {!Array<!kg.Row<EntityType>>} */
kg.RowFactory.prototype.rowCache;
/**
 * @record
 * @struct
 */
kg.SelectionService = function() {};
 /** @type {boolean} */
kg.SelectionService.prototype.multi;
 /** @type {!kg.Row<EntityType>} */
kg.SelectionService.prototype.lastClickedRow;

/**
 * @param {!kg.Row<EntityType>} row
 * @param {boolean} selected
 * @return {void}
 */
kg.SelectionService.prototype.setSelection = function(row, selected) {};
/**
 * @record
 * @struct
 */
kg.Grid = function() {};
 /** @type {!kg.RowFactory<EntityType>} */
kg.Grid.prototype.rowFactory;
 /** @type {!kg.GridOptions<EntityType>} */
kg.Grid.prototype.config;
 /** @type {boolean} */
kg.Grid.prototype.$$selectionPhase;
 /** @type {!kg.SelectionService<EntityType>} */
kg.Grid.prototype.selectionService;

/**
 * @return {void}
 */
kg.Grid.prototype.configureColumnWidths = function() {};
/**
 * @record
 * @struct
 */
kg.Plugin = function() {};

/**
 * @param {!kg.Grid<EntityType>} grid
 * @return {void}
 */
kg.Plugin.prototype.onGridInit = function(grid) {};
/**
 * @record
 * @struct
 */
kg.GridOptions = function() {};
 /** @type {boolean} */
kg.GridOptions.prototype.canSelectRows;
 /** @type {(!Array<!kg.ColumnDef>|!KnockoutObservable<!Array<!kg.ColumnDef>>)} */
kg.GridOptions.prototype.columnDefs;
 /** @type {number} */
kg.GridOptions.prototype.columnWidth;
 /** @type {!KnockoutObservableArray<EntityType>} */
kg.GridOptions.prototype.data;
 /** @type {boolean} */
kg.GridOptions.prototype.displaySelectionCheckbox;
 /** @type {boolean} */
kg.GridOptions.prototype.enableColumnResize;
 /** @type {boolean} */
kg.GridOptions.prototype.enablePaging;
 /** @type {boolean} */
kg.GridOptions.prototype.enableRowReordering;
 /** @type {boolean} */
kg.GridOptions.prototype.enableSorting;
 /** @type {!kg.FilterOptions} */
kg.GridOptions.prototype.filterOptions;
 /** @type {number} */
kg.GridOptions.prototype.footerRowHeight;
 /** @type {boolean} */
kg.GridOptions.prototype.footerVisible;
 /** @type {!Array<string>} */
kg.GridOptions.prototype.groups;
 /** @type {number} */
kg.GridOptions.prototype.headerRowHeight;
 /** @type {(string|!JQueryGenericPromise<string>)} */
kg.GridOptions.prototype.headerRowTemplate;
 /** @type {boolean} */
kg.GridOptions.prototype.jqueryUIDraggable;
 /** @type {boolean} */
kg.GridOptions.prototype.jqueryUITheme;
 /** @type {boolean} */
kg.GridOptions.prototype.keepLastSelected;
 /** @type {?} */
kg.GridOptions.prototype.maintainColumnRatios;
 /** @type {boolean} */
kg.GridOptions.prototype.multiSelect;
 /** @type {!kg.PagingOptions} */
kg.GridOptions.prototype.pagingOptions;
 /** @type {!Array<!kg.Plugin<EntityType>>} */
kg.GridOptions.prototype.plugins;
 /** @type {number} */
kg.GridOptions.prototype.rowHeight;
 /** @type {(string|!JQueryGenericPromise<string>)} */
kg.GridOptions.prototype.rowTemplate;
 /** @type {!KnockoutObservable<boolean>} */
kg.GridOptions.prototype.selectAllState;
 /** @type {!KnockoutObservableArray<?>} */
kg.GridOptions.prototype.selectedItems;
 /** @type {boolean} */
kg.GridOptions.prototype.selectWithCheckboxOnly;
 /** @type {boolean} */
kg.GridOptions.prototype.showColumnMenu;
 /** @type {boolean} */
kg.GridOptions.prototype.showFilter;
 /** @type {boolean} */
kg.GridOptions.prototype.showGroupPanel;
 /** @type {(!kg.SortInfo|!KnockoutObservable<!kg.SortInfo>)} */
kg.GridOptions.prototype.sortInfo;
 /** @type {number} */
kg.GridOptions.prototype.tabIndex;
 /** @type {boolean} */
kg.GridOptions.prototype.useExternalSorting;

/**
 * Callback for when you want to validate something after selection.
 * @param {!kg.Row<EntityType>} row
 * @return {void}
 */
kg.GridOptions.prototype.afterSelectionChange = function(row) {};

/**
 * Callback if you want to inspect something before selection,
 * return false if you want to cancel the selection. return true otherwise.
 * If you need to wait for an async call to proceed with selection you can
 * use rowItem.changeSelection(event) method after returning false initially.
 * Note: when shift+ Selecting multiple items in the grid this will only get called
 * once and the rowItem will be an array of items that are queued to be selected.
 * @param {!kg.Row<EntityType>} row
 * @return {boolean}
 */
kg.GridOptions.prototype.beforeSelectionChange = function(row) {};

/** @typedef {string} */
kg.Direction;
/**
 * @record
 * @struct
 */
kg.SortInfo = function() {};
 /** @type {!kg.SortColumn} */
kg.SortInfo.prototype.column;
 /** @type {string} */
kg.SortInfo.prototype.direction;
/**
 * @record
 * @struct
 */
kg.SortColumn = function() {};
 /** @type {string} */
kg.SortColumn.prototype.field;
 /** @type {function(?, ?): number} */
kg.SortColumn.prototype.sortingAlgorithm;
/**
 * @record
 * @struct
 */
kg.ColumnDef = function() {};
 /** @type {string} */
kg.ColumnDef.prototype.cellClass;
 /** @type {(string|!JQueryGenericPromise<string>)} */
kg.ColumnDef.prototype.cellTemplate;
 /** @type {string} */
kg.ColumnDef.prototype.displayName;
 /** @type {string} */
kg.ColumnDef.prototype.field;
 /** @type {(string|!JQueryGenericPromise<string>)} */
kg.ColumnDef.prototype.headerCellTemplate;
 /** @type {string} */
kg.ColumnDef.prototype.headerClass;
 /** @type {number} */
kg.ColumnDef.prototype.maxWidth;
 /** @type {boolean} */
kg.ColumnDef.prototype.resizable;
 /** @type {boolean} */
kg.ColumnDef.prototype.sortable;
 /** @type {function(?, ?): number} */
kg.ColumnDef.prototype.sortFn;
 /** @type {string} */
kg.ColumnDef.prototype.width;

/**
 * A function which takes the value of the cell and returns the display value. Useful when your data model has an underlying value which you need to convert to a human readable format.
 * \@example function(unixTimeTicks) { return new Date(unixTimeTicks); }
 * @param {?} val
 * @return {string} the display value
 */
kg.ColumnDef.prototype.cellFormatter = function(val) {};
/**
 * @record
 * @struct
 */
kg.FilterOptions = function() {};
 /** @type {!KnockoutObservable<string>} */
kg.FilterOptions.prototype.filterText;
 /** @type {boolean} */
kg.FilterOptions.prototype.useExternalFilter;
 /** @type {number} */
kg.FilterOptions.prototype.filterThrottle;
/**
 * @record
 * @struct
 */
kg.PagingOptions = function() {};
 /** @type {!KnockoutObservableArray<number>} */
kg.PagingOptions.prototype.pageSizes;
 /** @type {!KnockoutObservable<number>} */
kg.PagingOptions.prototype.pageSize;
 /** @type {!KnockoutObservable<number>} */
kg.PagingOptions.prototype.totalServerItems;
 /** @type {!KnockoutObservable<number>} */
kg.PagingOptions.prototype.currentPage;
/**
 * @record
 * @struct
 */
function IKg() {}
 /** @type {!kg.DomUtilityService} */
IKg.prototype.domUtilityService;

/**
 * Default grid template
 * @return {string}
 */
IKg.prototype.defaultGridTemplate = function() {};

/**
 * Default row template. Can be overriden in GridOptions.rowTemplate
 * @return {string}
 */
IKg.prototype.defaultRowTemplate = function() {};

/**
 * Default cell template. Can be overriden in GridOptions.cellTemplate
 * @return {string}
 */
IKg.prototype.defaultCellTemplate = function() {};

/**
 * Default aggregate template
 * @return {string}
 */
IKg.prototype.aggregateTemplate = function() {};

/**
 * Default headerrow template. Can be overriden in GridOptions.headerRowTemplate
 * @return {string}
 */
IKg.prototype.defaultHeaderRowTemplate = function() {};

/**
 * Default headercell template. Can be overriden in GridOptions.headerCellTemplate
 * @return {string}
 */
IKg.prototype.defaultHeaderCellTemplate = function() {};
 /** @type {!IKg} */
var kg;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "kg"
/** @const */
tsickle_declare_module.kg = {};

/* TODO: ExportAssignment in tsickle_declare_module.kg */
