/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/openfin/index.d.ts:
/** @const */
var fin = {};
 /** @type {!fin.OpenFinDesktop} */
fin.desktop;
/**
 * @record
 * @struct
 */
fin.OpenFinDesktop = function() {};
 /** @type {!fin.OpenFinApplicationStatic} */
fin.OpenFinDesktop.prototype.Application;
 /** @type {!fin.OpenFinExternalApplicationStatic} */
fin.OpenFinDesktop.prototype.ExternalApp;
 /** @type {!fin.OpenFinInterApplicationBus} */
fin.OpenFinDesktop.prototype.InterApplicationBus;
 /** @type {!fin.OpenFinNotificationStatic} */
fin.OpenFinDesktop.prototype.Notification;
 /** @type {!fin.OpenFinSystem} */
fin.OpenFinDesktop.prototype.System;
 /** @type {!fin.OpenFinWindowStatic} */
fin.OpenFinDesktop.prototype.Window;

/**
 * @param {function(): ?} f
 * @return {void}
 */
fin.OpenFinDesktop.prototype.main = function(f) {};
/**
 * @record
 * @struct
 */
fin.OpenFinApplicationStatic = function() {};

/* TODO: ConstructSignature: fin */

/**
 * Returns an Application object that represents an existing application.
 * @return {!fin.OpenFinApplication}
 */
fin.OpenFinApplicationStatic.prototype.getCurrent = function() {};

/**
 * Returns an Application object that represents an existing application.
 * @param {string} uuid
 * @return {!fin.OpenFinApplication}
 */
fin.OpenFinApplicationStatic.prototype.wrap = function(uuid) {};
/**
 * @record
 * @struct
 */
fin.OpenFinApplication = function() {};

/**
 * Returns an instance of the main Window of the application
 * @return {!fin.OpenFinWindow}
 */
fin.OpenFinApplication.prototype.getWindow = function() {};

/**
 * Registers an event listener on the specified event.
 * @param {string} type
 * @param {function((!fin.ApplicationBaseEvent|!fin.TrayIconClickedEvent|!fin.WindowEvent|!fin.WindowAlertRequestedEvent|!fin.WindowAuthRequested|!fin.WindowNavigationRejectedEvent|!fin.WindowEndLoadEvent)): void} listener
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinApplication.prototype.addEventListener = function(type, listener, callback, errorCallback) {};

/**
 * Closes the application and any child windows created by the application.
 * @param {boolean=} force
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinApplication.prototype.close = function(force, callback, errorCallback) {};

/**
 * Retrieves an array of wrapped fin.desktop.Windows for each of the application's child windows.
 * @param {function(!Array<!fin.OpenFinWindow>): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinApplication.prototype.getChildWindows = function(callback, errorCallback) {};

/**
 * Retrieves an array of active window groups for all of the application's windows. Each group is represented as an array of wrapped fin.desktop.Windows.
 * @param {function(!Array<!Array<!fin.OpenFinWindow>>): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinApplication.prototype.getGroups = function(callback, errorCallback) {};

/**
 * Retrieves the JSON manifest that was used to create the application. Invokes the error callback if the application was not created from a manifest.
 * @param {function(?): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinApplication.prototype.getManifest = function(callback, errorCallback) {};

/**
 * Retrieves UUID of the application that launches this application. Invokes the error callback if the application was created from a manifest.
 * @param {function(string): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinApplication.prototype.getParentUuid = function(callback, errorCallback) {};

/**
 * Retrieves current configuration of application's shortcuts.
 * @param {function(!fin.ShortCutConfig): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinApplication.prototype.getShortcuts = function(callback, errorCallback) {};

/**
 * Retrieves information about the application.
 * @param {function(!fin.LaunchInfo): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinApplication.prototype.getInfo = function(callback, errorCallback) {};

/**
 * Determines if the application is currently running.
 * @param {function(boolean): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinApplication.prototype.isRunning = function(callback, errorCallback) {};

/**
 * Passes in custom data that will be relayed to the RVM
 * @param {?} data
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinApplication.prototype.registerCustomData = function(data, callback, errorCallback) {};

/**
 * Removes a previously registered event listener from the specified event.
 * @param {string} type
 * @param {function((!fin.ApplicationBaseEvent|!fin.TrayIconClickedEvent|!fin.WindowEvent|!fin.WindowAlertRequestedEvent|!fin.WindowAuthRequested|!fin.WindowNavigationRejectedEvent|!fin.WindowEndLoadEvent)): ?} previouslyRegisteredListener
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinApplication.prototype.removeEventListener = function(type, previouslyRegisteredListener, callback, errorCallback) {};

/**
 * Removes the application's icon from the tray.
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinApplication.prototype.removeTrayIcon = function(callback, errorCallback) {};

/**
 * Restarts the application.
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinApplication.prototype.restart = function(callback, errorCallback) {};

/**
 * Runs the application. When the application is created, run must be called.
 * @param {function(!fin.SuccessObj): void=} callback
 * @param {function(string, !fin.NetworkErrorInfo): void=} errorCallback
 * @return {void}
 */
fin.OpenFinApplication.prototype.run = function(callback, errorCallback) {};

/**
 * Tells the rvm to relaunch the main application once upon a complete shutdown
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinApplication.prototype.scheduleRestart = function(callback, errorCallback) {};

/**
 * Sets new shortcut configuration for current application.
 * Application has to be launched with a manifest and has to have shortcut configuration (icon url, name, etc.) in its manifest to
 * be able to change shortcut states.
 * @param {!fin.ShortCutConfig} config
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinApplication.prototype.setShortcuts = function(config, callback, errorCallback) {};

/**
 * Adds a customizable icon in the system tray and notifies the application when clicked.
 * @param {string} iconUrl
 * @param {function(!fin.TrayIconClickedEvent): void} listener
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinApplication.prototype.setTrayIcon = function(iconUrl, listener, callback, errorCallback) {};

/**
 * Closes the application by terminating its process.
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinApplication.prototype.terminate = function(callback, errorCallback) {};

/**
 * Waits for a hanging application. This method can be called in response to an application "not-responding" to allow the application
 * to continue and to generate another "not-responding" message after a certain period of time.
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinApplication.prototype.wait = function(callback, errorCallback) {};
/**
 * @record
 * @struct
 */
fin.ShortCutConfig = function() {};
 /** @type {boolean} */
fin.ShortCutConfig.prototype.desktop;
 /** @type {boolean} */
fin.ShortCutConfig.prototype.startMenu;
 /** @type {boolean} */
fin.ShortCutConfig.prototype.systemStartup;
/**
 * @record
 * @struct
 */
fin.SuccessObj = function() {};
 /** @type {number} */
fin.SuccessObj.prototype.httpResponseCode;
/**
 * @extends {fin.ErrorInfo}
 * @record
 * @struct
 */
fin.NetworkErrorInfo = function() {};
 /** @type {number} */
fin.NetworkErrorInfo.prototype.networkErrorCode;
/**
 * @record
 * @struct
 */
fin.ErrorInfo = function() {};
 /** @type {string} */
fin.ErrorInfo.prototype.stack;
 /** @type {string} */
fin.ErrorInfo.prototype.message;
/**
 * @record
 * @struct
 */
fin.ApplicationOptions = function() {};
 /** @type {string} */
fin.ApplicationOptions.prototype.name;
 /** @type {string} */
fin.ApplicationOptions.prototype.url;
 /** @type {string} */
fin.ApplicationOptions.prototype.uuid;
 /** @type {boolean} */
fin.ApplicationOptions.prototype.plugins;
 /** @type {!fin.WindowOptions} */
fin.ApplicationOptions.prototype.mainWindowOptions;
/**
 * @record
 * @struct
 */
fin.WindowOptions = function() {};
 /** @type {{devtools: boolean, zoom: boolean, reload: boolean, reloadIgnoreCache: boolean}} */
fin.WindowOptions.prototype.accelerator;
 /** @type {boolean} */
fin.WindowOptions.prototype.alwaysOnTop;
 /** @type {boolean} */
fin.WindowOptions.prototype.autoShow;
 /** @type {boolean} */
fin.WindowOptions.prototype.contextMenu;
 /** @type {{width: number, height: number}} */
fin.WindowOptions.prototype.cornerRounding;
 /** @type {?} */
fin.WindowOptions.prototype.customData;
 /** @type {boolean} */
fin.WindowOptions.prototype.defaultCentered;
 /** @type {number} */
fin.WindowOptions.prototype.defaultHeight;
 /** @type {number} */
fin.WindowOptions.prototype.defaultWidth;
 /** @type {number} */
fin.WindowOptions.prototype.defaultTop;
 /** @type {number} */
fin.WindowOptions.prototype.defaultLeft;
 /** @type {boolean} */
fin.WindowOptions.prototype.frame;
 /** @type {boolean} */
fin.WindowOptions.prototype.hideOnClose;
 /** @type {string} */
fin.WindowOptions.prototype.icon;
 /** @type {number} */
fin.WindowOptions.prototype.maxHeight;
 /** @type {boolean} */
fin.WindowOptions.prototype.maximizable;
 /** @type {number} */
fin.WindowOptions.prototype.maxWidth;
 /** @type {number} */
fin.WindowOptions.prototype.minHeight;
 /** @type {boolean} */
fin.WindowOptions.prototype.minimizable;
 /** @type {number} */
fin.WindowOptions.prototype.minWidth;
 /** @type {string} */
fin.WindowOptions.prototype.name;
 /** @type {number} */
fin.WindowOptions.prototype.opacity;
 /** @type {boolean} */
fin.WindowOptions.prototype.resizable;
 /** @type {{size: number, bottomRightCorner: number}} */
fin.WindowOptions.prototype.resizeRegion;
 /** @type {boolean} */
fin.WindowOptions.prototype.showTaskbarIcon;
 /** @type {boolean} */
fin.WindowOptions.prototype.saveWindowState;
 /** @type {string} */
fin.WindowOptions.prototype.taskbarIconGroup;
 /** @type {string} */
fin.WindowOptions.prototype.state;
 /** @type {string} */
fin.WindowOptions.prototype.url;
 /** @type {boolean} */
fin.WindowOptions.prototype.waitForPageLoad;
/**
 * @record
 * @struct
 */
fin.OpenFinClipboard = function() {};

/**
 * Reads available formats for the clipboard type
 * @param {string} type
 * @param {function(!Array<string>): void=} callback
 * @param {function(string, !fin.ErrorInfo): void=} errorCallback
 * @return {void}
 */
fin.OpenFinClipboard.prototype.availableFormats = function(type, callback, errorCallback) {};

/**
 * Reads available formats for the clipboard type
 * @param {string} type
 * @param {function(string): void=} callback
 * @param {function(string, !fin.ErrorInfo): void=} errorCallback
 * @return {void}
 */
fin.OpenFinClipboard.prototype.readHtml = function(type, callback, errorCallback) {};

/**
 * Read the content of the clipboard as Rtf
 * @param {string} type
 * @param {function(string): void=} callback
 * @param {function(string, !fin.ErrorInfo): void=} errorCallback
 * @return {void}
 */
fin.OpenFinClipboard.prototype.readRtf = function(type, callback, errorCallback) {};

/**
 * Read the content of the clipboard as plain text
 * @param {string} type
 * @param {function(string): void=} callback
 * @param {function(string, !fin.ErrorInfo): void=} errorCallback
 * @return {void}
 */
fin.OpenFinClipboard.prototype.readText = function(type, callback, errorCallback) {};

/**
 * Writes data into the clipboard
 * @param {?} data
 * @param {string} type
 * @param {function(): void=} callback
 * @param {function(string, !fin.ErrorInfo): void=} errorCallback
 * @return {void}
 */
fin.OpenFinClipboard.prototype.write = function(data, type, callback, errorCallback) {};

/**
 * Writes data into the clipboard as Html
 * @param {string} data
 * @param {string} type
 * @param {function(): void=} callback
 * @param {function(string, !fin.ErrorInfo): void=} errorCallback
 * @return {void}
 */
fin.OpenFinClipboard.prototype.writeHtml = function(data, type, callback, errorCallback) {};

/**
 * Writes data into the clipboard as Rtf
 * @param {string} data
 * @param {string} type
 * @param {function(): void=} callback
 * @param {function(string, !fin.ErrorInfo): void=} errorCallback
 * @return {void}
 */
fin.OpenFinClipboard.prototype.writeRtf = function(data, type, callback, errorCallback) {};

/**
 * Writes data into the clipboard as plain text
 * @param {string} data
 * @param {string} type
 * @param {function(): void=} callback
 * @param {function(string, !fin.ErrorInfo): void=} errorCallback
 * @return {void}
 */
fin.OpenFinClipboard.prototype.writeText = function(data, type, callback, errorCallback) {};
/**
 * @record
 * @struct
 */
fin.OpenFinExternalApplicationStatic = function() {};

/**
 * Returns an External Application object that represents an existing external application.
 * @param {string} uuid
 * @return {!fin.OpenFinExternalApplication}
 */
fin.OpenFinExternalApplicationStatic.prototype.wrap = function(uuid) {};
/**
 * @record
 * @struct
 */
fin.OpenFinExternalApplication = function() {};

/**
 * Registers an event listener on the specified event.
 * @param {string} type
 * @param {function(): void} listener
 * @param {function(): void=} callback
 * @param {function(string, !fin.ErrorInfo): void=} errorCallback
 * @return {void}
 */
fin.OpenFinExternalApplication.prototype.addEventListener = function(type, listener, callback, errorCallback) {};

/**
 * Removes a previously registered event listener from the specified event.
 * @param {string} type
 * @param {function(): void} listener
 * @param {function(): void=} callback
 * @param {function(string, !fin.ErrorInfo): void=} errorCallback
 * @return {void}
 */
fin.OpenFinExternalApplication.prototype.removeEventListener = function(type, listener, callback, errorCallback) {};
/**
 * @record
 * @struct
 */
fin.OpenFinInterApplicationBus = function() {};

/**
 * Adds a listener that gets called when applications subscribe to the current application's messages.
 * @param {function(string, string, string): void} listener
 * @return {void}
 */
fin.OpenFinInterApplicationBus.prototype.addSubscribeListener = function(listener) {};

/**
 * Adds a listener that gets called when applications unsubscribe to the current application's messages.
 * @param {function(string, string, string): void} listener
 * @return {void}
 */
fin.OpenFinInterApplicationBus.prototype.addUnsubscribeListener = function(listener) {};

/**
 * Removes a previously registered subscribe listener.
 * @param {function(string, string, string): void} listener
 * @return {void}
 */
fin.OpenFinInterApplicationBus.prototype.removeSubscribeListener = function(listener) {};

/**
 * Removes a previously registered unsubscribe listener.
 * @param {function(string, string, string): void} listener
 * @return {void}
 */
fin.OpenFinInterApplicationBus.prototype.removeUnsubscribeListener = function(listener) {};

/**
 * Publishes a message to all applications running on OpenFin Runtime that are subscribed to the specified topic.
 * @param {string} topic
 * @param {?} message
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinInterApplicationBus.prototype.publish = function(topic, message, callback, errorCallback) {};

/**
 * Sends a message to a specific application on a specific topic.
 * @param {string} destinationUuid
 * @param {string} name_or_topic
 * @param {string|?} topic_or_message
 * @param {?|function(): void=} message_or_callback
 * @param {function(): void|function(string): void=} callback_or_errorCallback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinInterApplicationBus.prototype.send = function(destinationUuid, name_or_topic, topic_or_message, message_or_callback, callback_or_errorCallback, errorCallback) {};

/**
 * Subscribes to messages from the specified application on the specified topic. If the subscription is for a uuid, [name],
 * topic combination that has already been published to upon subscription you will receive the last 20 missed messages in the order they were published.
 * @param {string} senderUuid
 * @param {string} name_or_topic
 * @param {string|function(?, string, string): void} topic_or_listener
 * @param {function(?, string, string): void|function(): void=} listener_or_callback
 * @param {function(): void|function(string): void=} callback_or_errorCallback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinInterApplicationBus.prototype.subscribe = function(senderUuid, name_or_topic, topic_or_listener, listener_or_callback, callback_or_errorCallback, errorCallback) {};

/**
 * Unsubscribes to messages from the specified application on the specified topic.
 * @param {string} senderUuid
 * @param {string} name_or_topic
 * @param {string|function(?, string, string): void} topic_or_listener
 * @param {function(?, string, string): void|function(): void=} listener_or_callback
 * @param {function(): void|function(string): void=} callback_or_errorCallback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinInterApplicationBus.prototype.unsubscribe = function(senderUuid, name_or_topic, topic_or_listener, listener_or_callback, callback_or_errorCallback, errorCallback) {};
/**
 * @record
 * @struct
 */
fin.OpenFinNotificationStatic = function() {};

/* TODO: ConstructSignature: fin */

/**
 * Gets an instance of the current notification. For use within a notification window to close the window or send a message back to its parent application.
 * @return {!fin.OpenFinNotification}
 */
fin.OpenFinNotificationStatic.prototype.getCurrent = function() {};
/**
 * @record
 * @struct
 */
fin.OpenFinNotification = function() {};

/**
 * Closes the notification.
 * @param {function(): void=} callback
 * @return {void}
 */
fin.OpenFinNotification.prototype.close = function(callback) {};

/**
 * Sends a message to the notification.
 * @param {?} message
 * @param {function(): void=} callback
 * @return {void}
 */
fin.OpenFinNotification.prototype.sendMessage = function(message, callback) {};

/**
 * Sends a message from the notification to the application that created the notification. The message is handled by the notification's onMessage callback.
 * @param {?} message
 * @param {function(): void=} callback
 * @return {void}
 */
fin.OpenFinNotification.prototype.sendMessageToApplication = function(message, callback) {};
/**
 * @record
 * @struct
 */
fin.NotificationOptions = function() {};
 /** @type {boolean} */
fin.NotificationOptions.prototype.ignoreMouseOver;
 /** @type {?} */
fin.NotificationOptions.prototype.message;
 /** @type {(number|string)} */
fin.NotificationOptions.prototype.duration;
 /** @type {string} */
fin.NotificationOptions.prototype.url;

/**
 * A function that is called when a notification is clicked.
 * @param {function(): void} callback
 * @return {void}
 */
fin.NotificationOptions.prototype.onClick = function(callback) {};

/**
 * Invoked when the notification is closed via .close() method on the created notification instance
 * or the by the notification itself via fin.desktop.Notification.getCurrent().close().
 * NOTE: this is not invoked when the notification is dismissed via a swipe. For the swipe dismissal callback see onDismiss
 * @param {function(): void} callback
 * @return {void}
 */
fin.NotificationOptions.prototype.onClose = function(callback) {};

/**
 * Invoked when a the notification is dismissed by swiping it off the screen to the right. NOTE: this is no fired on a programmatic close.
 * @param {function(): void} callback
 * @return {void}
 */
fin.NotificationOptions.prototype.onDismiss = function(callback) {};

/**
 * A function that is called when an error occurs.The reason for the error is passed as an argument.
 * @param {function(string, !fin.NetworkErrorInfo): void} errorCallback
 * @return {void}
 */
fin.NotificationOptions.prototype.onError = function(errorCallback) {};

/**
 * The onMessage function will respond to messages sent from notification.sendMessageToApplication.
 * The function is passed the message, which can be of any primitive or composite-primitive type.
 * @param {function(?): void} callback
 * @return {void}
 */
fin.NotificationOptions.prototype.onMessage = function(callback) {};

/**
 * A function that is called when a notification is shown.
 * @param {function(!fin.SuccessObj): void} callback
 * @return {void}
 */
fin.NotificationOptions.prototype.onShow = function(callback) {};
/**
 * @record
 * @struct
 */
fin.OpenFinSystem = function() {};
 /** @type {!fin.OpenFinClipboard} */
fin.OpenFinSystem.prototype.Clipboard;

/**
 * Registers an event listener on the specified event.
 * @param {string} type
 * @param {function((!fin.SystemBaseEvent|!fin.DesktopIconClickedEvent|!fin.IdleStateChangedEvent|!fin.MonitorInfoChangedEvent|!fin.SessionChangedEvent)): void} listener
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.addEventListener = function(type, listener, callback, errorCallback) {};

/**
 * Clears cached data containing window state/positions,
 * application resource files (images, HTML, JavaScript files), cookies, and items stored in the Local Storage.
 * @param {!fin.CacheOptions} options
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.clearCache = function(options, callback, errorCallback) {};

/**
 * Clears all cached data when OpenFin Runtime exits.
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.deleteCacheOnExit = function(callback, errorCallback) {};

/**
 * Downloads the given application asset
 * @param {!fin.AppAssetInfo} assetObj
 * @param {function({downloadedBytes: number, totalBytes: number}): void=} progressListener
 * @param {function({path: string}): void=} callback
 * @param {function(string, !fin.NetworkErrorInfo): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.downloadAsset = function(assetObj, progressListener, callback, errorCallback) {};

/**
 * Exits the Runtime.
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.exit = function(callback, errorCallback) {};

/**
 * Retrieves an array of data for all applications.
 * @param {function(!Array<!fin.ApplicationInfo>): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.getAllApplications = function(callback, errorCallback) {};

/**
 * Retrieves an array of data for all external applications.
 * @param {function(!Array<!fin.ApplicationInfo>): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.getAllExternalApplications = function(callback, errorCallback) {};

/**
 * Retrieves an array of data (name, ids, bounds) for all application windows.
 * @param {function(!Array<!fin.WindowDetails>): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.getAllWindows = function(callback, errorCallback) {};

/**
 * Retrieves the command line argument string that started OpenFin Runtime.
 * @param {function(string): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.getCommandLineArguments = function(callback, errorCallback) {};

/**
 * Retrieves the configuration object that started the OpenFin Runtime.
 * @param {function(string): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.getDeviceId = function(callback, errorCallback) {};

/**
 * Gets the value of a given environment variable on the computer on which the runtime is installed.
 * @param {string} envVar
 * @param {function(string): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.getEnvironmentVariable = function(envVar, callback, errorCallback) {};

/**
 * Retrieves system information.
 * @param {function(!fin.HostSpecInfo): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.getHostSpecs = function(callback, errorCallback) {};

/**
 * Retrieves the contents of the log with the specified filename.
 * @param {string} logFileName
 * @param {function(string): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.getLog = function(logFileName, callback, errorCallback) {};

/**
 * Retrieves an array containing information for each log file.
 * @param {function(!Array<!fin.LogInfo>): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.getLogList = function(callback, errorCallback) {};

/**
 * Retrieves an object that contains data about the about the monitor setup of the computer that the runtime is running on.
 * @param {function(!fin.MonitorInfo): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.getMonitorInfo = function(callback, errorCallback) {};

/**
 * Returns the mouse in virtual screen coordinates (left, top).
 * @param {function(!fin.VirtualScreenCoordinates): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.getMousePosition = function(callback, errorCallback) {};

/**
 * Retrieves an array of all of the runtime processes that are currently running.
 * Each element in the array is an object containing the uuid and the name of the application to which the process belongs.
 * @param {function(!Array<!fin.ProcessInfo>): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.getProcessList = function(callback, errorCallback) {};

/**
 * Retrieves the Proxy settings.
 * @param {function(!fin.ProxyInfo): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.getProxySettings = function(callback, errorCallback) {};

/**
 * Returns information about the running RVM in an object.
 * @param {function(!fin.RvmInfo): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.getRvmInfo = function(callback, errorCallback) {};

/**
 * Returns the version of the runtime. The version contains the major, minor, build and revision numbers.
 * @param {function(string): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.getVersion = function(callback, errorCallback) {};

/**
 * Runs an executable or batch file.
 * @param {!fin.ExternalProcessLaunchInfo} options
 * @param {function({uuid: string}): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.launchExternalProcess = function(options, callback, errorCallback) {};

/**
 * Writes the passed message into both the log file and the console.
 * @param {string} level
 * @param {string} message
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.log = function(level, message, callback, errorCallback) {};

/**
 * Monitors a running process.
 * @param {!fin.ExternalProcessInfo} options
 * @param {function({uuid: string}): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.monitorExternalProcess = function(options, callback, errorCallback) {};

/**
 * Opens the passed URL in the default web browser.
 * @param {string} url
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.openUrlWithBrowser = function(url, callback, errorCallback) {};

/**
 * This function call will register a unique id and produce a token. The token can be used to broker an external connection.
 * @param {string} uuid
 * @param {function({token: string, uuid: string}): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.registerExternalConnection = function(uuid, callback, errorCallback) {};

/**
 * Removes the process entry for the passed UUID obtained from a prior call of fin.desktop.System.launchExternalProcess().
 * @param {string} processUuid
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.releaseExternalProcess = function(processUuid, callback, errorCallback) {};

/**
 * Removes a previously registered event listener from the specified event.
 * @param {string} type
 * @param {function((!fin.SystemBaseEvent|!fin.DesktopIconClickedEvent|!fin.IdleStateChangedEvent|!fin.MonitorInfoChangedEvent|!fin.SessionChangedEvent)): void} listener
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.removeEventListener = function(type, listener, callback, errorCallback) {};

/**
 * Shows the Chrome Developer Tools for the specified window.
 * @param {string} uuid
 * @param {string} name
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.showDeveloperTools = function(uuid, name, callback, errorCallback) {};

/**
 * Attempt to close an external process. The process will be terminated if it has not closed after the elapsed timeout in milliseconds.
 * @param {string} processUuid
 * @param {number} timeout
 * @param {boolean|function({result: string}): void=} killTree_or_callback
 * @param {function({result: string}): void|function(string): void=} callback_or_errorCallback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.terminateExternalProcess = function(processUuid, timeout, killTree_or_callback, callback_or_errorCallback, errorCallback) {};

/**
 * Update the OpenFin Runtime Proxy settings.
 * @param {string} type
 * @param {string} address
 * @param {number} port
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinSystem.prototype.updateProxySettings = function(type, address, port, callback, errorCallback) {};
/**
 * @record
 * @struct
 */
fin.CacheOptions = function() {};
 /** @type {boolean} */
fin.CacheOptions.prototype.cache;
 /** @type {boolean} */
fin.CacheOptions.prototype.cookies;
 /** @type {boolean} */
fin.CacheOptions.prototype.localStorage;
 /** @type {boolean} */
fin.CacheOptions.prototype.appcache;
 /** @type {boolean} */
fin.CacheOptions.prototype.userData;
/**
 * @record
 * @struct
 */
fin.AppAssetInfo = function() {};
 /** @type {string} */
fin.AppAssetInfo.prototype.src;
 /** @type {string} */
fin.AppAssetInfo.prototype.alias;
 /** @type {string} */
fin.AppAssetInfo.prototype.version;
 /** @type {string} */
fin.AppAssetInfo.prototype.target;
 /** @type {string} */
fin.AppAssetInfo.prototype.args;
/**
 * @record
 * @struct
 */
fin.ApplicationInfo = function() {};
 /** @type {boolean} */
fin.ApplicationInfo.prototype.isRunning;
 /** @type {string} */
fin.ApplicationInfo.prototype.uuid;
 /** @type {string} */
fin.ApplicationInfo.prototype.parentUuid;
/**
 * @record
 * @struct
 */
fin.WindowDetails = function() {};
 /** @type {string} */
fin.WindowDetails.prototype.uuid;
 /** @type {!fin.WindowInfo} */
fin.WindowDetails.prototype.mainWindow;
 /** @type {!Array<!fin.WindowInfo>} */
fin.WindowDetails.prototype.childWindows;
/**
 * @record
 * @struct
 */
fin.WindowInfo = function() {};
 /** @type {string} */
fin.WindowInfo.prototype.name;
 /** @type {number} */
fin.WindowInfo.prototype.top;
 /** @type {number} */
fin.WindowInfo.prototype.right;
 /** @type {number} */
fin.WindowInfo.prototype.bottom;
 /** @type {number} */
fin.WindowInfo.prototype.left;
/**
 * @record
 * @struct
 */
fin.HostSpecInfo = function() {};
 /** @type {string} */
fin.HostSpecInfo.prototype.arch;
 /** @type {!Array<!fin.NodeCpuInfo>} */
fin.HostSpecInfo.prototype.cpus;
 /** @type {{name: string}} */
fin.HostSpecInfo.prototype.gpu;
 /** @type {number} */
fin.HostSpecInfo.prototype.memory;
 /** @type {string} */
fin.HostSpecInfo.prototype.name;
/**
 * @record
 * @struct
 */
fin.NodeCpuInfo = function() {};
 /** @type {string} */
fin.NodeCpuInfo.prototype.model;
 /** @type {number} */
fin.NodeCpuInfo.prototype.speed;
 /** @type {{user: number, nice: number, sys: number, idle: number, irq: number}} */
fin.NodeCpuInfo.prototype.times;
/**
 * @record
 * @struct
 */
fin.LogInfo = function() {};
 /** @type {string} */
fin.LogInfo.prototype.name;
 /** @type {number} */
fin.LogInfo.prototype.size;
 /** @type {string} */
fin.LogInfo.prototype.date;
/**
 * @record
 * @struct
 */
fin.ProcessInfo = function() {};
 /** @type {number} */
fin.ProcessInfo.prototype.cpuUsage;
 /** @type {string} */
fin.ProcessInfo.prototype.name;
 /** @type {number} */
fin.ProcessInfo.prototype.nonPagedPoolUsage;
 /** @type {number} */
fin.ProcessInfo.prototype.pageFaultCount;
 /** @type {number} */
fin.ProcessInfo.prototype.pagedPoolUsage;
 /** @type {number} */
fin.ProcessInfo.prototype.pagefileUsage;
 /** @type {number} */
fin.ProcessInfo.prototype.peakNonPagedPoolUsage;
 /** @type {number} */
fin.ProcessInfo.prototype.peakPagedPoolUsage;
 /** @type {number} */
fin.ProcessInfo.prototype.peakPagefileUsage;
 /** @type {number} */
fin.ProcessInfo.prototype.peakWorkingSetSize;
 /** @type {number} */
fin.ProcessInfo.prototype.processId;
 /** @type {string} */
fin.ProcessInfo.prototype.uuid;
 /** @type {number} */
fin.ProcessInfo.prototype.workingSetSize;
/**
 * @record
 * @struct
 */
fin.ProxyInfo = function() {};
 /** @type {string} */
fin.ProxyInfo.prototype.proxyAddress;
 /** @type {number} */
fin.ProxyInfo.prototype.proxyPort;
 /** @type {string} */
fin.ProxyInfo.prototype.type;
/**
 * @record
 * @struct
 */
fin.RvmInfo = function() {};
 /** @type {string} */
fin.RvmInfo.prototype.version;

/* TODO: PropertySignature: fin."start-time" */
/**
 * @record
 * @struct
 */
fin.ExternalProcessLaunchInfo = function() {};
 /** @type {string} */
fin.ExternalProcessLaunchInfo.prototype.path;
 /** @type {string} */
fin.ExternalProcessLaunchInfo.prototype.alias;
 /** @type {string} */
fin.ExternalProcessLaunchInfo.prototype.arguments;
 /** @type {!fin.CertificationInfo} */
fin.ExternalProcessLaunchInfo.prototype.certificate;

/**
 * @param {{topic: string, uuid: string, exitCode: number}} result
 * @return {void}
 */
fin.ExternalProcessLaunchInfo.prototype.listener = function(result) {};
/**
 * @record
 * @struct
 */
fin.CertificationInfo = function() {};
 /** @type {string} */
fin.CertificationInfo.prototype.serial;
 /** @type {string} */
fin.CertificationInfo.prototype.subject;
 /** @type {string} */
fin.CertificationInfo.prototype.publickey;
 /** @type {string} */
fin.CertificationInfo.prototype.thumbprint;
 /** @type {boolean} */
fin.CertificationInfo.prototype.trusted;
/**
 * @record
 * @struct
 */
fin.ExternalProcessInfo = function() {};
 /** @type {number} */
fin.ExternalProcessInfo.prototype.pid;

/**
 * @param {{topic: string, uuid: string, exitCode: number}} result
 * @return {void}
 */
fin.ExternalProcessInfo.prototype.listener = function(result) {};
/**
 * @record
 * @struct
 */
fin.OpenFinWindowStatic = function() {};

/* TODO: ConstructSignature: fin */

/**
 * Returns an instance of the current window.
 * @return {!fin.OpenFinWindow}
 */
fin.OpenFinWindowStatic.prototype.getCurrent = function() {};

/**
 * Returns a Window object that wraps an existing window.
 * @param {string} appUuid
 * @param {string} windowName
 * @return {!fin.OpenFinWindow}
 */
fin.OpenFinWindowStatic.prototype.wrap = function(appUuid, windowName) {};
/**
 * @record
 * @struct
 */
fin.OpenFinWindow = function() {};
 /** @type {string} */
fin.OpenFinWindow.prototype.name;

/**
 * Returns the native JavaScript "window" object for the window. This method can only be used by the parent application or the window itself,
 * otherwise it will return undefined. The same Single-Origin-Policy (SOP) rules apply for child windows created by window.open(url) in that the
 * contents of the window object are only accessible if the URL has the same origin as the invoking window. See example below.
 * Also, will not work with fin.desktop.Window objects created with fin.desktop.Window.wrap().
 * @return {!Window}
 */
fin.OpenFinWindow.prototype.getNativeWindow = function() {};

/**
 * Gets the parent application.
 * @return {!fin.OpenFinApplication}
 */
fin.OpenFinWindow.prototype.getParentApplication = function() {};

/**
 * Gets the parent window.
 * @return {!fin.OpenFinWindow}
 */
fin.OpenFinWindow.prototype.getParentWindow = function() {};

/**
 * Registers an event listener on the specified event.
 * @param {string} type
 * @param {function((!fin.WindowBaseEvent|!fin.WindowAuthRequestedEvent|!fin.WindowBoundsEvent|!fin.WindowExternalProcessStartedEvent|!fin.WindowExternalProcessExited|!fin.WindowGroupChangedEvent|!fin.WindowHiddenEvent|!fin.Window_NavigationRejectedEvent)): void} listener
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.addEventListener = function(type, listener, callback, errorCallback) {};

/**
 * Performs the specified window transitions
 * @param {!fin.AnimationTransition} transitions
 * @param {!fin.AnimationOptions} options
 * @param {function(?): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.animate = function(transitions, options, callback, errorCallback) {};

/**
 * Provides credentials to authentication requests
 * @param {string} userName
 * @param {string} password
 * @param {function(): void=} callback
 * @param {function(string, !fin.ErrorInfo): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.authenticate = function(userName, password, callback, errorCallback) {};

/**
 * Removes focus from the window.
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.blur = function(callback, errorCallback) {};

/**
 * Brings the window to the front of the OpenFin window stack.
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.bringToFront = function(callback, errorCallback) {};

/**
 * Closes the window.
 * @param {boolean=} force
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.close = function(force, callback, errorCallback) {};

/**
 * Prevents a user from changing a window's size/position when using the window's frame.
 * 'disabled-frame-bounds-changing' is generated at the start of and during a user move/size operation.
 * 'disabled-frame-bounds-changed' is generated after a user move/size operation.
 * The events provide the bounds that would have been applied if the frame was enabled.
 * 'frame-disabled' is generated when an enabled frame becomes disabled.
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.disableFrame = function(callback, errorCallback) {};

/**
 * Re-enables user changes to a window's size/position when using the window's frame.
 * 'disabled-frame-bounds-changing' is generated at the start of and during a user move/size operation.
 * 'disabled-frame-bounds-changed' is generated after a user move/size operation.
 * The events provide the bounds that would have been applied if the frame was enabled.
 * 'frame-enabled' is generated when a disabled frame has becomes enabled.
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.enableFrame = function(callback, errorCallback) {};

/**
 * Flashes the window's frame and taskbar icon until the window is activated.
 * @param {?=} options
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.flash = function(options, callback, errorCallback) {};

/**
 * Gives focus to the window.
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.focus = function(callback, errorCallback) {};

/**
 * Gets the current bounds (top, left, width, height) of the window.
 * @param {function(!fin.WindowBounds): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.getBounds = function(callback, errorCallback) {};

/**
 * Retrieves an array containing wrapped fin.desktop.Windows that are grouped with this window. If a window is not in a group an empty array is returned.
 * Please note that calling window is included in the result array.
 * @param {function(!Array<!fin.OpenFinWindow>): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.getGroup = function(callback, errorCallback) {};

/**
 * Gets the current settings of the window.
 * @param {function(!fin.WindowOptions): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.getOptions = function(callback, errorCallback) {};

/**
 * Gets a base64 encoded PNG snapshot of the window.
 * @param {function(string): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.getSnapshot = function(callback, errorCallback) {};

/**
 * Gets the current state ("minimized", "maximized", or "restored") of the window.
 * @param {function(string): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.getState = function(callback, errorCallback) {};

/**
 * Returns the zoom level of the window.
 * @param {function(number): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.getZoomLevel = function(callback, errorCallback) {};

/**
 * Hides the window.
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.hide = function(callback, errorCallback) {};

/**
 * Determines if the window is currently showing.
 * @param {function(boolean): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.isShowing = function(callback, errorCallback) {};

/**
 * Joins the same window group as the specified window.
 * @param {!fin.OpenFinWindow} target
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.joinGroup = function(target, callback, errorCallback) {};

/**
 * Leaves the current window group so that the window can be move independently of those in the group.
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.leaveGroup = function(callback, errorCallback) {};

/**
 * Maximizes the window.
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.maximize = function(callback, errorCallback) {};

/**
 * Merges the instance's window group with the same window group as the specified window
 * @param {!fin.OpenFinWindow} target
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.mergeGroups = function(target, callback, errorCallback) {};

/**
 * Minimizes the window.
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.minimize = function(callback, errorCallback) {};

/**
 * Moves the window by a specified amount.
 * @param {number} deltaLeft
 * @param {number} deltaTop
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.moveBy = function(deltaLeft, deltaTop, callback, errorCallback) {};

/**
 * Moves the window to a specified location.
 * @param {number} left
 * @param {number} top
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.moveTo = function(left, top, callback, errorCallback) {};

/**
 * Removes a previously registered event listener from the specified event.
 * @param {string} type
 * @param {function((!fin.WindowBaseEvent|!fin.WindowAuthRequestedEvent|!fin.WindowBoundsEvent|!fin.WindowExternalProcessStartedEvent|!fin.WindowExternalProcessExited|!fin.WindowGroupChangedEvent|!fin.WindowHiddenEvent|!fin.Window_NavigationRejectedEvent)): void} listener
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.removeEventListener = function(type, listener, callback, errorCallback) {};

/**
 * Resizes the window by a specified amount.
 * @param {number} deltaWidth
 * @param {number} deltaHeight
 * @param {string} anchor
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.resizeBy = function(deltaWidth, deltaHeight, anchor, callback, errorCallback) {};

/**
 * Resizes the window by a specified amount.
 * @param {number} width
 * @param {number} height
 * @param {string} anchor
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.resizeTo = function(width, height, anchor, callback, errorCallback) {};

/**
 * Restores the window to its normal state (i.e., unminimized, unmaximized).
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.restore = function(callback, errorCallback) {};

/**
 * Will bring the window to the front of the entire stack and give it focus.
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.setAsForeground = function(callback, errorCallback) {};

/**
 * Sets the window's size and position
 * @param {number} left
 * @param {number} top
 * @param {number} width
 * @param {number} height
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.setBounds = function(left, top, width, height, callback, errorCallback) {};

/**
 * Sets the zoom level of the window.
 * @param {number} level
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.setZoomLevel = function(level, callback, errorCallback) {};

/**
 * Shows the window if it is hidden.
 * @param {boolean=} force
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.show = function(force, callback, errorCallback) {};

/**
 * Shows the window if it is hidden at the specified location. If the toggle parameter is set to true, the window will alternate between showing and hiding.
 * @param {number} left
 * @param {number} top
 * @param {boolean=} force
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.showAt = function(left, top, force, callback, errorCallback) {};

/**
 * Stops the taskbar icon from flashing.
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.stopFlashing = function(callback, errorCallback) {};

/**
 * Updates the window using the passed options
 * @param {!fin.WindowOptions} options
 * @param {function(): void=} callback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
fin.OpenFinWindow.prototype.updateOptions = function(options, callback, errorCallback) {};
/**
 * @record
 * @struct
 */
fin.ApplicationBaseEvent = function() {};
 /** @type {string} */
fin.ApplicationBaseEvent.prototype.topic;
 /** @type {string} */
fin.ApplicationBaseEvent.prototype.type;
 /** @type {string} */
fin.ApplicationBaseEvent.prototype.uuid;
/**
 * @extends {fin.ApplicationBaseEvent}
 * @record
 * @struct
 */
fin.TrayIconClickedEvent = function() {};
 /** @type {number} */
fin.TrayIconClickedEvent.prototype.button;
 /** @type {!fin.MonitorInfo} */
fin.TrayIconClickedEvent.prototype.monitorInfo;
 /** @type {number} */
fin.TrayIconClickedEvent.prototype.x;
 /** @type {number} */
fin.TrayIconClickedEvent.prototype.y;
/**
 * @extends {fin.ApplicationBaseEvent}
 * @record
 * @struct
 */
fin.WindowEvent = function() {};
 /** @type {string} */
fin.WindowEvent.prototype.name;
/**
 * @extends {fin.WindowEvent}
 * @record
 * @struct
 */
fin.WindowAlertRequestedEvent = function() {};
 /** @type {string} */
fin.WindowAlertRequestedEvent.prototype.message;
 /** @type {string} */
fin.WindowAlertRequestedEvent.prototype.url;
/**
 * @extends {fin.WindowEvent}
 * @record
 * @struct
 */
fin.WindowAuthRequested = function() {};
 /** @type {{host: string, isProxy: boolean, port: number, realm: string, scheme: string}} */
fin.WindowAuthRequested.prototype.authInfo;
/**
 * @extends {fin.WindowEvent}
 * @record
 * @struct
 */
fin.WindowNavigationRejectedEvent = function() {};
 /** @type {string} */
fin.WindowNavigationRejectedEvent.prototype.sourceName;
 /** @type {string} */
fin.WindowNavigationRejectedEvent.prototype.url;
/**
 * @extends {fin.WindowEvent}
 * @record
 * @struct
 */
fin.WindowEndLoadEvent = function() {};
 /** @type {string} */
fin.WindowEndLoadEvent.prototype.documentName;
 /** @type {boolean} */
fin.WindowEndLoadEvent.prototype.isMain;
/**
 * @extends {fin.MonitorInfo}
 * @record
 * @struct
 */
fin.MonitorInfoChangedEvent = function() {};
 /** @type {string} */
fin.MonitorInfoChangedEvent.prototype.topic;
 /** @type {string} */
fin.MonitorInfoChangedEvent.prototype.type;
/**
 * @record
 * @struct
 */
fin.MonitorInfo = function() {};
 /** @type {!Array<!fin.MonitorInfoDetail>} */
fin.MonitorInfo.prototype.nonPrimaryMonitors;
 /** @type {!fin.MonitorInfoDetail} */
fin.MonitorInfo.prototype.primaryMonitor;
 /** @type {string} */
fin.MonitorInfo.prototype.reason;
 /** @type {{edge: string, rect: !fin.MontiorCoordinates}} */
fin.MonitorInfo.prototype.taskbar;
 /** @type {string} */
fin.MonitorInfo.prototype.topic;
 /** @type {string} */
fin.MonitorInfo.prototype.type;
 /** @type {!fin.MontiorCoordinates} */
fin.MonitorInfo.prototype.virtualScreen;
/**
 * @record
 * @struct
 */
fin.MonitorInfoDetail = function() {};
 /** @type {!fin.MontiorCoordinates} */
fin.MonitorInfoDetail.prototype.availableRect;
 /** @type {string} */
fin.MonitorInfoDetail.prototype.deviceId;
 /** @type {boolean} */
fin.MonitorInfoDetail.prototype.displayDeviceActive;
 /** @type {!fin.MontiorCoordinates} */
fin.MonitorInfoDetail.prototype.monitorRect;
 /** @type {string} */
fin.MonitorInfoDetail.prototype.name;
/**
 * @record
 * @struct
 */
fin.MontiorCoordinates = function() {};
 /** @type {number} */
fin.MontiorCoordinates.prototype.bottom;
 /** @type {number} */
fin.MontiorCoordinates.prototype.left;
 /** @type {number} */
fin.MontiorCoordinates.prototype.right;
 /** @type {number} */
fin.MontiorCoordinates.prototype.top;
/**
 * @record
 * @struct
 */
fin.VirtualScreenCoordinates = function() {};
 /** @type {number} */
fin.VirtualScreenCoordinates.prototype.left;
 /** @type {number} */
fin.VirtualScreenCoordinates.prototype.top;
/**
 * @record
 * @struct
 */
fin.SystemBaseEvent = function() {};
 /** @type {string} */
fin.SystemBaseEvent.prototype.topic;
 /** @type {string} */
fin.SystemBaseEvent.prototype.type;
 /** @type {string} */
fin.SystemBaseEvent.prototype.uuid;
/**
 * @record
 * @struct
 */
fin.DesktopIconClickedEvent = function() {};
 /** @type {{left: number, top: number}} */
fin.DesktopIconClickedEvent.prototype.mouse;
 /** @type {number} */
fin.DesktopIconClickedEvent.prototype.tickCount;
 /** @type {string} */
fin.DesktopIconClickedEvent.prototype.topic;
 /** @type {string} */
fin.DesktopIconClickedEvent.prototype.type;
/**
 * @record
 * @struct
 */
fin.IdleStateChangedEvent = function() {};
 /** @type {number} */
fin.IdleStateChangedEvent.prototype.elapsedTime;
 /** @type {boolean} */
fin.IdleStateChangedEvent.prototype.isIdle;
 /** @type {string} */
fin.IdleStateChangedEvent.prototype.topic;
 /** @type {string} */
fin.IdleStateChangedEvent.prototype.type;
/**
 * @record
 * @struct
 */
fin.WindowBaseEvent = function() {};
 /** @type {string} */
fin.WindowBaseEvent.prototype.name;
 /** @type {string} */
fin.WindowBaseEvent.prototype.topic;
 /** @type {string} */
fin.WindowBaseEvent.prototype.type;
 /** @type {string} */
fin.WindowBaseEvent.prototype.uuid;
/**
 * @extends {fin.WindowBaseEvent}
 * @record
 * @struct
 */
fin.WindowAuthRequestedEvent = function() {};
 /** @type {{host: string, isProxy: boolean, port: number, realm: string, scheme: string}} */
fin.WindowAuthRequestedEvent.prototype.authInfo;
/**
 * @extends {fin.WindowBaseEvent}
 * @record
 * @struct
 */
fin.WindowBoundsEvent = function() {};
 /** @type {number} */
fin.WindowBoundsEvent.prototype.changeType;
 /** @type {boolean} */
fin.WindowBoundsEvent.prototype.deferred;
 /** @type {number} */
fin.WindowBoundsEvent.prototype.height;
 /** @type {number} */
fin.WindowBoundsEvent.prototype.left;
 /** @type {number} */
fin.WindowBoundsEvent.prototype.top;
 /** @type {string} */
fin.WindowBoundsEvent.prototype.type;
 /** @type {number} */
fin.WindowBoundsEvent.prototype.width;
/**
 * @extends {fin.WindowBaseEvent}
 * @record
 * @struct
 */
fin.WindowExternalProcessStartedEvent = function() {};
 /** @type {string} */
fin.WindowExternalProcessStartedEvent.prototype.processUuid;
 /** @type {string} */
fin.WindowExternalProcessStartedEvent.prototype.type;
/**
 * @extends {fin.WindowBaseEvent}
 * @record
 * @struct
 */
fin.WindowExternalProcessExited = function() {};
 /** @type {number} */
fin.WindowExternalProcessExited.prototype.exitCode;
 /** @type {string} */
fin.WindowExternalProcessExited.prototype.processUuid;
 /** @type {string} */
fin.WindowExternalProcessExited.prototype.type;
/**
 * @extends {fin.WindowBaseEvent}
 * @record
 * @struct
 */
fin.WindowGroupChangedEvent = function() {};
 /** @type {string} */
fin.WindowGroupChangedEvent.prototype.memberOf;
 /** @type {string} */
fin.WindowGroupChangedEvent.prototype.reason;
 /** @type {!Array<!fin.WindowOfGroupInfo>} */
fin.WindowGroupChangedEvent.prototype.sourceGroup;
 /** @type {string} */
fin.WindowGroupChangedEvent.prototype.sourceWindowAppUuid;
 /** @type {string} */
fin.WindowGroupChangedEvent.prototype.sourceWindowName;
 /** @type {!Array<!fin.WindowOfGroupInfo>} */
fin.WindowGroupChangedEvent.prototype.targetGroup;
 /** @type {string} */
fin.WindowGroupChangedEvent.prototype.targetWindowAppUuid;
 /** @type {string} */
fin.WindowGroupChangedEvent.prototype.targetWindowName;
 /** @type {string} */
fin.WindowGroupChangedEvent.prototype.type;
/**
 * @record
 * @struct
 */
fin.WindowOfGroupInfo = function() {};
 /** @type {string} */
fin.WindowOfGroupInfo.prototype.appUuid;
 /** @type {string} */
fin.WindowOfGroupInfo.prototype.windowName;
/**
 * @extends {fin.WindowBaseEvent}
 * @record
 * @struct
 */
fin.WindowHiddenEvent = function() {};
 /** @type {string} */
fin.WindowHiddenEvent.prototype.reason;
 /** @type {string} */
fin.WindowHiddenEvent.prototype.type;
/**
 * @record
 * @struct
 */
fin.Window_NavigationRejectedEvent = function() {};
 /** @type {string} */
fin.Window_NavigationRejectedEvent.prototype.name;
 /** @type {string} */
fin.Window_NavigationRejectedEvent.prototype.sourceName;
 /** @type {string} */
fin.Window_NavigationRejectedEvent.prototype.topic;
 /** @type {string} */
fin.Window_NavigationRejectedEvent.prototype.url;
 /** @type {string} */
fin.Window_NavigationRejectedEvent.prototype.uuid;
/**
 * @record
 * @struct
 */
fin.AnimationTransition = function() {};
 /** @type {{opacity: number, duration: number, relative: boolean}} */
fin.AnimationTransition.prototype.opacity;
 /** @type {{left: number, top: number, duration: number, relative: boolean}} */
fin.AnimationTransition.prototype.position;
 /** @type {{width: number, height: number, duration: number, relative: boolean}} */
fin.AnimationTransition.prototype.size;
/**
 * @record
 * @struct
 */
fin.AnimationOptions = function() {};
 /** @type {boolean} */
fin.AnimationOptions.prototype.interrupt;
 /** @type {string} */
fin.AnimationOptions.prototype.tween;
/**
 * @record
 * @struct
 */
fin.WindowBounds = function() {};
 /** @type {number} */
fin.WindowBounds.prototype.height;
 /** @type {number} */
fin.WindowBounds.prototype.left;
 /** @type {number} */
fin.WindowBounds.prototype.top;
 /** @type {number} */
fin.WindowBounds.prototype.width;
/**
 * @record
 * @struct
 */
fin.SessionChangedEvent = function() {};
 /** @type {string} */
fin.SessionChangedEvent.prototype.reason;
 /** @type {string} */
fin.SessionChangedEvent.prototype.topic;
 /** @type {string} */
fin.SessionChangedEvent.prototype.type;
/**
 * @record
 * @struct
 */
fin.LaunchInfo = function() {};
 /** @type {string} */
fin.LaunchInfo.prototype.launchMode;

/** @typedef {string} */
fin.OpenFinTweenType;

/** @typedef {string} */
fin.OpenFinApplicationEventType;

/** @typedef {string} */
fin.OpenFinExternalApplicationEventType;

/** @typedef {string} */
fin.OpenFinSystemEventType;

/** @typedef {string} */
fin.OpenFinWindowEventType;

/** @typedef {string} */
fin.OpenFinAnchor;
