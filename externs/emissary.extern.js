/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/emissary/index.d.ts:

/* TODO: NamespaceExportDeclaration in  */
/**
 * @extends {Mixto.IMixinStatic}
 * @record
 * @struct
 */
function IEmitterStatic() {}

/* TODO: ConstructSignature:  */
/**
 * @record
 * @struct
 */
function IEmitter() {}

/**
 * @param {string} eventNames
 * @param {!Function} handler
 * @return {?}
 */
IEmitter.prototype.on = function(eventNames, handler) {};

/**
 * @param {string} eventName
 * @param {!Function} handler
 * @return {?}
 */
IEmitter.prototype.once = function(eventName, handler) {};

/**
 * @param {string} eventName
 * @return {void}
 */
IEmitter.prototype.signal = function(eventName) {};

/**
 * @param {string} eventName
 * @param {?} initialValue
 * @return {void}
 */
IEmitter.prototype.behavior = function(eventName, initialValue) {};

/**
 * @param {string} eventName
 * @param {...?} args
 * @return {void}
 */
IEmitter.prototype.emit = function(eventName, args) {};

/**
 * @param {string} eventNames
 * @param {!Function} handler
 * @return {void}
 */
IEmitter.prototype.off = function(eventNames, handler) {};

/**
 * @param {string} eventNames
 * @return {void}
 */
IEmitter.prototype.pauseEvents = function(eventNames) {};

/**
 * @param {string} eventNames
 * @return {void}
 */
IEmitter.prototype.resumeEvents = function(eventNames) {};

/**
 * @param {string} eventName
 * @return {number}
 */
IEmitter.prototype.incrementSubscriptionCount = function(eventName) {};

/**
 * @param {string} eventName
 * @return {number}
 */
IEmitter.prototype.decrementSubscriptionCount = function(eventName) {};

/**
 * @param {string} eventName
 * @return {number}
 */
IEmitter.prototype.getSubscriptionCount = function(eventName) {};

/**
 * @param {string} eventName
 * @return {boolean}
 */
IEmitter.prototype.hasSubscriptions = function(eventName) {};
/**
 * @extends {Mixto.IMixinStatic}
 * @record
 * @struct
 */
function ISubscriberStatic() {}

/* TODO: ConstructSignature:  */
/**
 * @record
 * @struct
 */
function ISubscriber() {}

/**
 * @param {?} eventEmitter
 * @param {string} methodName
 * @param {?} args
 * @return {?}
 */
ISubscriber.prototype.subscribeWith = function(eventEmitter, methodName, args) {};

/**
 * @param {?} subscription
 * @return {?}
 */
ISubscriber.prototype.addSubscription = function(subscription) {};

/**
 * @param {?} eventEmitterOrSubscription
 * @param {...?} args
 * @return {?}
 */
ISubscriber.prototype.subscribe = function(eventEmitterOrSubscription, args) {};

/**
 * @param {?} eventEmitter
 * @param {...?} args
 * @return {?}
 */
ISubscriber.prototype.subscribeToCommand = function(eventEmitter, args) {};

/**
 * @param {?=} object
 * @return {?}
 */
ISubscriber.prototype.unsubscribe = function(object) {};
/**
 * @record
 * @struct
 */
function ISubscriptionStatic() {}

/* TODO: ConstructSignature:  */
/**
 * @extends {IEmitter}
 * @record
 * @struct
 */
function ISubscription() {}
 /** @type {boolean} */
ISubscription.prototype.cancelled;

/**
 * @return {?}
 */
ISubscription.prototype.off = function() {};
 /** @type {?} */
var Emitter;
 /** @type {?} */
var Subscriber;
 /** @type {!Function} */
var Signal;
 /** @type {!Function} */
var Behavior;
 /** @type {!Function} */
var combine;
