/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/tilebelt/index.d.ts:
 /** @type {!tilebelt.TilebeltStatic} */
var tilebelt;
/**
 * @record
 * @struct
 */
tilebelt.TilebeltStatic = function() {};

/**
 * Get a geojson representation of a tile
 * 
 * \@name tileToGeoJSON
 * \@example 
 * var poly = tileToGeoJSON([5, 10, 10])
 * //=poly
 * @param {!Array<number>} tile
 * @return {?}
 */
tilebelt.TilebeltStatic.prototype.tileToGeoJSON = function(tile) {};

/**
 * Get the bbox of a tile
 * 
 * \@name tileToBBOX
 * \@example 
 * var bbox = tileToBBOX([5, 10, 10])
 * //=bbox
 * @param {!Array<number>} tile
 * @return {!Array<number>}
 */
tilebelt.TilebeltStatic.prototype.tileToBBOX = function(tile) {};

/**
 * Get the tile for a point at a specified zoom level
 * 
 * \@name pointToTile
 * \@example 
 * var tile = pointToTile(1, 1, 20)
 * //=tile
 * @param {number} lon
 * @param {number} lat
 * @param {number} z
 * @return {!Array<number>}
 */
tilebelt.TilebeltStatic.prototype.pointToTile = function(lon, lat, z) {};

/**
 * Get the 4 tiles one zoom level higher
 * 
 * \@name getChildren
 * \@example 
 * var tiles = getChildren([5, 10, 10])
 * //=tiles
 * @param {!Array<number>} tile
 * @return {!Array<!Array<number>>}
 */
tilebelt.TilebeltStatic.prototype.getChildren = function(tile) {};

/**
 * Get the tile one zoom level lower
 * 
 * \@name getParent
 * \@example 
 * var tile = getParent([5, 10, 10])
 * //=tile
 * @param {!Array<number>} tile
 * @return {!Array<number>}
 */
tilebelt.TilebeltStatic.prototype.getParent = function(tile) {};

/**
 * Get the 3 sibling tiles for a tile
 * 
 * \@name getSiblings
 * \@example 
 * var tiles = getSiblings([5, 10, 10])
 * //=tiles
 * @param {!Array<number>} tile
 * @return {!Array<!Array<number>>}
 */
tilebelt.TilebeltStatic.prototype.getSiblings = function(tile) {};

/**
 * Check to see if an array of tiles contains a tiles siblings
 * 
 * \@name hasSiblings
 * \@example 
 * var tiles = [
 *     [0, 0, 5],
 *     [0, 1, 5],
 *     [1, 1, 5],
 *     [1, 0, 5]
 * ]
 * hasSiblings([0, 0, 5], tiles)
 * //=boolean
 * @param {!Array<number>} tile
 * @param {!Array<!Array<number>>} tiles
 * @return {boolean}
 */
tilebelt.TilebeltStatic.prototype.hasSiblings = function(tile, tiles) {};

/**
 * Check to see if an array of tiles contains a particular tile
 * 
 * \@name hasTile
 * \@example 
 * var tiles = [
 *     [0, 0, 5],
 *     [0, 1, 5],
 *     [1, 1, 5],
 *     [1, 0, 5]
 * ]
 * hasTile(tiles, [0, 0, 5])
 * //=boolean
 * @param {!Array<!Array<number>>} tiles
 * @param {!Array<number>} tile
 * @return {boolean}
 */
tilebelt.TilebeltStatic.prototype.hasTile = function(tiles, tile) {};

/**
 * Check to see if two tiles are the same
 * 
 * \@name tilesEqual
 * \@example 
 * tilesEqual([0, 1, 5], [0, 0, 5])
 * //=boolean
 * @param {!Array<number>} tile1
 * @param {!Array<number>} tile2
 * @return {boolean}
 */
tilebelt.TilebeltStatic.prototype.tilesEqual = function(tile1, tile2) {};

/**
 * Get the quadkey for a tile
 * 
 * \@name tileToQuadkey
 * \@example 
 * var quadkey = tileToQuadkey([0, 1, 5])
 * //=quadkey
 * @param {!Array<number>} tile
 * @return {string}
 */
tilebelt.TilebeltStatic.prototype.tileToQuadkey = function(tile) {};

/**
 * Get the tile for a quadkey
 * 
 * \@name quadkeyToTile
 * \@example 
 * var tile = quadkeyToTile('00001033')
 * //=tile
 * @param {string} quadkey
 * @return {!Array<number>}
 */
tilebelt.TilebeltStatic.prototype.quadkeyToTile = function(quadkey) {};

/**
 * Get the smallest tile to cover a bbox
 * 
 * \@name bboxToTile
 * \@example 
 * var tile = bboxToTile([ -178, 84, -177, 85 ])
 * //=tile
 * @param {!Array<number>} bbox
 * @return {!Array<number>}
 */
tilebelt.TilebeltStatic.prototype.bboxToTile = function(bbox) {};

/**
 * Get the precise fractional tile location for a point at a zoom level
 * 
 * \@name pointToTileFraction
 * var tile = pointToTileFraction(30.5, 50.5, 15)
 * //=tile
 * @param {number} lon
 * @param {number} lat
 * @param {number} z
 * @return {!Array<number>}
 */
tilebelt.TilebeltStatic.prototype.pointToTileFraction = function(lon, lat, z) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "tilebelt"
/** @const */
tsickle_declare_module.tilebelt = {};

/* TODO: ExportAssignment in tsickle_declare_module.tilebelt */
