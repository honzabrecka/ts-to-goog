/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/shot/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */
/**
 * @record
 * @struct
 */
function ShotAPI() {}

/**
 * Injects a fake request into an HTTP server.
 * @see {\@link https://github.com/hapijs/shot/blob/master/API.md#shotinjectdispatchfunc-options-callback}
 * @param {!Shot.Listener} dispatchFunc  listener function. The same as you would pass to Http.createServer when making a node HTTP server. \@see IListener
 * @param {!Shot.RequestOptions} options  request options object \@see RequestOptions
 * @param {?} callback  the callback function \@see Callback
 * @return {void}
 */
ShotAPI.prototype.inject = function(dispatchFunc, options, callback) {};

/**
 * Checks if given object obj is a Shot Request object.
 * @see {\@link https://github.com/hapijs/shot/blob/master/API.md#shotisinjectionobj}
 * @param {?} obj
 * @return {boolean}
 */
ShotAPI.prototype.isInjection = function(obj) {};
/** @const */
var Shot = {};
/**
 * @record
 * @struct
 */
Shot.Listener = function() {};

/* TODO: CallSignature: Shot */
/**
 * @record
 * @struct
 */
Shot.SimulatedRequestObject = function() {};
/**
 * @record
 * @struct
 */
Shot.SimulatedResponseObject = function() {};
/**
 * @record
 * @struct
 */
Shot.RequestOptions = function() {};
 /** @type {string} */
Shot.RequestOptions.prototype.url;
 /** @type {string} */
Shot.RequestOptions.prototype.method;
 /** @type {string} */
Shot.RequestOptions.prototype.authority;
 /** @type {!Shot.Headers} */
Shot.RequestOptions.prototype.headers;
 /** @type {string} */
Shot.RequestOptions.prototype.remoteAddress;
 /** @type {(string|?|!internal.Stream|!Object<string,?>)} */
Shot.RequestOptions.prototype.payload;
 /** @type {{end: boolean, split: boolean, error: boolean, close: boolean}} */
Shot.RequestOptions.prototype.simulate;
 /** @type {boolean} */
Shot.RequestOptions.prototype.validate;
/**
 * @record
 * @struct
 */
Shot.Headers = function() {};

/* TODO: IndexSignature: Shot */
/**
 * @record
 * @struct
 */
Shot.ResponseObject = function() {};
 /** @type {{req: !Shot.SimulatedRequestObject, res: !Shot.SimulatedResponseObject}} */
Shot.ResponseObject.prototype.raw;
 /** @type {!Shot.Headers} */
Shot.ResponseObject.prototype.headers;
 /** @type {number} */
Shot.ResponseObject.prototype.statusCode;
 /** @type {string} */
Shot.ResponseObject.prototype.statusMessage;
 /** @type {string} */
Shot.ResponseObject.prototype.payload;
 /** @type {?} */
Shot.ResponseObject.prototype.rawPayload;
 /** @type {!Object<string,?>} */
Shot.ResponseObject.prototype.trailers;
 /** @type {?} */
var Shot;

/* TODO: ExportAssignment in  */
