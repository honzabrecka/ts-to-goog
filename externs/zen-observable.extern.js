/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/zen-observable/index.d.ts:
 /** @type {symbol} */
SymbolConstructor.prototype.observable;
/** @const */
var ZenObservable = {};
/**
 * @record
 * @struct
 */
ZenObservable.SubscriptionObserver = function() {};
 /** @type {boolean} */
ZenObservable.SubscriptionObserver.prototype.closed;

/**
 * @param {T} value
 * @return {void}
 */
ZenObservable.SubscriptionObserver.prototype.next = function(value) {};

/**
 * @param {?} errorValue
 * @return {void}
 */
ZenObservable.SubscriptionObserver.prototype.error = function(errorValue) {};

/**
 * @return {void}
 */
ZenObservable.SubscriptionObserver.prototype.complete = function() {};
/**
 * @record
 * @struct
 */
ZenObservable.Subscription = function() {};
 /** @type {boolean} */
ZenObservable.Subscription.prototype.closed;

/**
 * @return {void}
 */
ZenObservable.Subscription.prototype.unsubscribe = function() {};
/**
 * @record
 * @struct
 */
ZenObservable.Observer = function() {};

/**
 * @param {!ZenObservable.Subscription} subscription
 * @return {?}
 */
ZenObservable.Observer.prototype.start = function(subscription) {};

/**
 * @param {T} value
 * @return {void}
 */
ZenObservable.Observer.prototype.next = function(value) {};

/**
 * @param {?} errorValue
 * @return {void}
 */
ZenObservable.Observer.prototype.error = function(errorValue) {};

/**
 * @return {void}
 */
ZenObservable.Observer.prototype.complete = function() {};

/** @typedef {function(!ZenObservable.SubscriptionObserver<T>): (void|!ZenObservable.Subscription|function(): void)} */
ZenObservable.Subscriber;
/**
 * @record
 * @struct
 */
ZenObservable.ObservableLike = function() {};
 /** @type {function(!ZenObservable.SubscriptionObserver<T>): (void|!ZenObservable.Subscription|function(): void)} */
ZenObservable.ObservableLike.prototype.subscribe;

/**
 * @return {(!Observable<T>|!ZenObservable.ObservableLike)}
 */
ZenObservable.ObservableLike.prototype[Symbol.observable] = function() {};

/**
 * @constructor
 * @struct
 * @param {function(!ZenObservable.SubscriptionObserver<T>): (void|!ZenObservable.Subscription|function(): void)} subscriber
 */
function Observable(subscriber) {}

/**
 * @param {!ZenObservable.Observer<T>|function(T): void} observer_or_onNext
 * @param {function(?): void=} onError
 * @param {function(): void=} onComplete
 * @return {!ZenObservable.Subscription}
 */
Observable.prototype.subscribe = function(observer_or_onNext, onError, onComplete) {};

/**
 * @return {!Observable}
 */
Observable.prototype[Symbol.observable] = function() {};

/**
 * @param {function(T): void} callback
 * @return {!Promise<void>}
 */
Observable.prototype.forEach = function(callback) {};

/**
 * @template R
 * @param {function(T): R} callback
 * @return {!Observable<R>}
 */
Observable.prototype.map = function(callback) {};

/**
 * @param {function(T): boolean} callback
 * @return {!Observable}
 */
Observable.prototype.filter = function(callback) {};

/**
 * @template R
 * @param {function(T, T): T|function(R, T): R} callback
 * @param {T|R=} initialValue
 * @return {!Observable|!Observable<R>}
 */
Observable.prototype.reduce = function(callback, initialValue) {};

/**
 * @template R
 * @param {function(T): !ZenObservable.ObservableLike<R>} callback
 * @return {!Observable<R>}
 */
Observable.prototype.flatMap = function(callback) {};

/**
 * @template R
 * @param {(!Observable<R>|!ZenObservable.ObservableLike<R>|!ArrayLike<R>)} observable
 * @return {!Observable<R>}
 */
Observable.from = function(observable) {};

/**
 * @template R
 * @param {...R} items
 * @return {!Observable<R>}
 */
Observable.of = function(items) {};

/* TODO: ExportAssignment in  */
