/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/gapi.youtube/index.d.ts:
/** @const */
gapi.client.youtube = {};
/**
 * @record
 * @struct
 */
gapi.client.youtube.activities = function() {};

/**
 * Posts a bulletin for a specific channel.
 * @param {{part: string, RequestBody: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubeActivityResource>}
 */
gapi.client.youtube.activities.prototype.insert = function(object) {};

/**
 * Returns a list of channel activity events that match the request criteria.
 * @param {{part: string, channelId: string, home: boolean, maxResults: number, mine: boolean, pageToken: string, publishedAfter: string, publishedBefore: string, regionCode: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubePaginationInfo<!GoogleApiYouTubeActivityResource>>}
 */
gapi.client.youtube.activities.prototype.list = function(object) {};
/**
 * @record
 * @struct
 */
gapi.client.youtube.channelBanners = function() {};

/**
 * Uploads a channel banner to YouTube.
 * @param {{onBehalfOfContentOwner: string, RequestBody: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubeChannelBannerResource>}
 */
gapi.client.youtube.channelBanners.prototype.insert = function(object) {};
/**
 * @record
 * @struct
 */
gapi.client.youtube.channels = function() {};

/**
 * Returns a collection of zero or more channel resources that match the request criteria.
 * @param {{part: string, categoryId: string, forUsername: string, id: string, managedByMe: boolean, maxResults: number, mine: boolean, mySubscribers: boolean, onBehalfOfContentOwner: string, pageToken: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubePaginationInfo<!GoogleApiYouTubeChannelResource>>}
 */
gapi.client.youtube.channels.prototype.list = function(object) {};

/**
 * Updates a channel's metadata.
 * @param {{part: string, onBehalfOfContentOwner: string, RequestBody: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubeChannelResource>}
 */
gapi.client.youtube.channels.prototype.update = function(object) {};
/**
 * @record
 * @struct
 */
gapi.client.youtube.guideCategories = function() {};

/**
 * Returns a list of categories that can be associated with YouTube channels.
 * @param {{part: string, hl: string, id: string, regionCode: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubePageInfo<!GoogleApiYouTubeGuideCategoryResource>>}
 */
gapi.client.youtube.guideCategories.prototype.list = function(object) {};
/**
 * @record
 * @struct
 */
gapi.client.youtube.playlistItems = function() {};

/**
 * Deletes a playlist item.
 * @param {{id: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubePlaylistItemResource>}
 */
gapi.client.youtube.playlistItems.prototype.delete = function(object) {};

/**
 * Adds a resource to a playlist.
 * @param {{part: string, RequestBody: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubePlaylistItemResource>}
 */
gapi.client.youtube.playlistItems.prototype.insert = function(object) {};

/**
 * Returns a collection of playlist items that match the API request parameters. You can retrieve all of the playlist items in a specified playlist or retrieve one or more playlist items by their unique IDs.
 * @param {{part: string, id: string, maxResults: number, pageToken: string, playlistId: string, videoId: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubePaginationInfo<!GoogleApiYouTubePlaylistItemResource>>}
 */
gapi.client.youtube.playlistItems.prototype.list = function(object) {};

/**
 * Modifies a playlist item. For example, you could update the item's position in the playlist.
 * @param {{part: string, RequestBody: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubePlaylistItemResource>}
 */
gapi.client.youtube.playlistItems.prototype.update = function(object) {};
/**
 * @record
 * @struct
 */
gapi.client.youtube.playlists = function() {};

/**
 * Deletes a playlist.
 * @param {{id: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubePlaylistResource>}
 */
gapi.client.youtube.playlists.prototype.delete = function(object) {};

/**
 * Creates a playlist.
 * @param {{part: string, RequestBody: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubePlaylistResource>}
 */
gapi.client.youtube.playlists.prototype.insert = function(object) {};

/**
 * Returns a collection of playlists that match the API request parameters. For example, you can retrieve all playlists that the authenticated user owns, or you can retrieve one or more playlists by their unique IDs.
 * @param {{part: string, channelId: string, id: string, maxResults: number, mine: boolean, pagetoken: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubePaginationInfo<!GoogleApiYouTubePlaylistResource>>}
 */
gapi.client.youtube.playlists.prototype.list = function(object) {};

/**
 * Modifies a playlist. For example, you could change a playlist's title, description, or privacy status.
 * @param {{part: string, RequestBody: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubePlaylistResource>}
 */
gapi.client.youtube.playlists.prototype.update = function(object) {};
/**
 * @record
 * @struct
 */
gapi.client.youtube.search = function() {};

/**
 * Returns a collection of search results that match the query parameters specified in the API request. By default, a search result set identifies matching video, channel, and playlist resources, but you can also configure queries to only retrieve a specific type of resource.
 * @param {{part: string, channelId: string, channelType: string, forContentOwner: boolean, forMine: boolean, maxResults: number, onBehalfOfContentOwner: string, order: string, pageToken: string, publishedAfter: string, publishedBefore: string, q: string, regionCode: string, relatedToVideoId: string, safeSearch: string, topicId: string, type: string, videoCaption: string, videoCategoryId: string, videoDefinition: string, videoDimension: string, videoDuration: string, videoEmbeddable: string, videoLicense: string, videoSyndicated: string, videoType: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubePaginationInfo<!GoogleApiYouTubeSearchResource>>}
 */
gapi.client.youtube.search.prototype.list = function(object) {};
/**
 * @record
 * @struct
 */
gapi.client.youtube.subscriptions = function() {};

/**
 * Deletes a subscription.
 * @param {{id: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubeSubscriptionResource>}
 */
gapi.client.youtube.subscriptions.prototype.delete = function(object) {};

/**
 * Adds a subscription for the authenticated user's channel.
 * @param {{part: string, RequestBody: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubeSubscriptionResource>}
 */
gapi.client.youtube.subscriptions.prototype.insert = function(object) {};

/**
 * Returns subscription resources that match the API request criteria.
 * @param {{part: string, channelId: string, forChannelId: string, id: string, maxResults: number, mine: boolean, mySubscripbers: boolean, order: string, pageToken: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubePaginationInfo<!GoogleApiYouTubeSubscriptionResource>>}
 */
gapi.client.youtube.subscriptions.prototype.list = function(object) {};
/**
 * @record
 * @struct
 */
gapi.client.youtube.thumbnails = function() {};

/**
 * Uploads a custom video thumbnail to YouTube and sets it for a video.
 * @param {{videoId: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubePageInfo<!GoogleApiYouTubeThumbnailResource>>}
 */
gapi.client.youtube.thumbnails.prototype.set = function(object) {};
/**
 * @record
 * @struct
 */
gapi.client.youtube.videoCategories = function() {};

/**
 * Returns a list of categories that can be associated with YouTube videos.
 * @param {{part: string, hl: string, id: string, regionCode: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubePageInfo<!GoogleApiYouTubeVideoCategoryResource>>}
 */
gapi.client.youtube.videoCategories.prototype.list = function(object) {};
/**
 * @record
 * @struct
 */
gapi.client.youtube.videos = function() {};

/**
 * Deletes a YouTube video.
 * @param {{id: string, onBehalfOfContentOwner: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubeVideoResource>}
 */
gapi.client.youtube.videos.prototype.delete = function(object) {};

/**
 * Get user ratings for videos.
 * @param {{id: string, onBehalfOfContentOwner: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubeVideoGetRatingResponse>}
 */
gapi.client.youtube.videos.prototype.getRating = function(object) {};

/**
 * Uploads a video to YouTube and optionally sets the video's metadata.
 * @param {{part: string, autoLevels: boolean, onBehalfOfContentOwner: string, onBehalfOfContentOwnerChannel: string, stabilize: boolean, RequestBody: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubeVideoResource>}
 */
gapi.client.youtube.videos.prototype.insert = function(object) {};

/**
 * Returns a list of videos that match the API request parameters.
 * @param {{part: string, chart: string, id: string, locale: string, maxResults: number, myRating: string, onBehalfOfContentOwner: string, pageToken: string, videoCategoryId: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubePaginationInfo<!GoogleApiYouTubeVideoResource>>}
 */
gapi.client.youtube.videos.prototype.list = function(object) {};

/**
 * Like, dislike, or remove rating from a video.
 * @param {{id: string, rating: string, onBehalfOfContentOwner: string}} object
 * @return {!gapi.client.HttpRequest<?>}
 */
gapi.client.youtube.videos.prototype.rate = function(object) {};

/**
 * Updates a video's metadata.
 * @param {{part: string, onBehalfOfContentOwner: string, RequestBody: string}} object
 * @return {!gapi.client.HttpRequest<!GoogleApiYouTubeVideoResource>}
 */
gapi.client.youtube.videos.prototype.update = function(object) {};
/**
 * @record
 * @struct
 */
function GoogleApiYouTubePageInfo() {}
 /** @type {string} */
GoogleApiYouTubePageInfo.prototype.kind;
 /** @type {string} */
GoogleApiYouTubePageInfo.prototype.etag;
 /** @type {!Array<T>} */
GoogleApiYouTubePageInfo.prototype.items;
/**
 * @record
 * @struct
 */
function GoogleApiYouTubePaginationInfo() {}
 /** @type {string} */
GoogleApiYouTubePaginationInfo.prototype.kind;
 /** @type {string} */
GoogleApiYouTubePaginationInfo.prototype.etag;
 /** @type {{totalResults: number, resultsPerPage: number}} */
GoogleApiYouTubePaginationInfo.prototype.pageInfo;
 /** @type {string} */
GoogleApiYouTubePaginationInfo.prototype.nextPageToken;
 /** @type {string} */
GoogleApiYouTubePaginationInfo.prototype.prevPageToken;
 /** @type {!Array<T>} */
GoogleApiYouTubePaginationInfo.prototype.items;
/**
 * @record
 * @struct
 */
function GoogleApiYouTubeActivityResource() {}
 /** @type {string} */
GoogleApiYouTubeActivityResource.prototype.kind;
 /** @type {string} */
GoogleApiYouTubeActivityResource.prototype.etag;
 /** @type {string} */
GoogleApiYouTubeActivityResource.prototype.id;
 /** @type {{publishedAt: string, channelId: string, title: string, description: string, thumbnails: !Array<!GoogleApiYouTubeThumbnailItemResource>, channelTitle: string, type: string, groupId: string}} */
GoogleApiYouTubeActivityResource.prototype.snippet;
 /** @type {{upload: {videoId: string}, like: {resourceId: {kind: string, videoId: string}}, favorite: {resourceId: {kind: string, videoId: string}}, comment: {resourceId: {kind: string, videoId: string, channelId: string}}, subscription: {resourceId: {kind: string, channelId: string}}, playlistItem: {resourceId: {kind: string, videoId: string}, playlistId: string, playlistItemId: string}, recommendation: {resourceId: {kind: string, videoId: string, channelId: string}, reason: string, seedResourceId: {kind: string, videoId: string, channelId: string, playlistId: string}}, bulletin: {resourceId: {kind: string, videoId: string, channelId: string, playlistId: string}}, social: {type: string, resourceId: {kind: string, videoId: string, channelId: string, playlistId: string}, author: string, referenceUrl: string, imageUrl: string}, channelItem: {resourceId: !Object}}} */
GoogleApiYouTubeActivityResource.prototype.contentDetails;
/**
 * @record
 * @struct
 */
function GoogleApiYouTubeChannelBannerResource() {}
 /** @type {string} */
GoogleApiYouTubeChannelBannerResource.prototype.kind;
 /** @type {string} */
GoogleApiYouTubeChannelBannerResource.prototype.etag;
 /** @type {string} */
GoogleApiYouTubeChannelBannerResource.prototype.url;
/**
 * @record
 * @struct
 */
function GoogleApiYouTubeChannelResource() {}
 /** @type {string} */
GoogleApiYouTubeChannelResource.prototype.id;
 /** @type {string} */
GoogleApiYouTubeChannelResource.prototype.kind;
 /** @type {string} */
GoogleApiYouTubeChannelResource.prototype.etag;
 /** @type {{title: string, description: string, publishedAt: string, thumbnails: !Array<!GoogleApiYouTubeThumbnailItemResource>}} */
GoogleApiYouTubeChannelResource.prototype.snippet;
 /** @type {{relatedPlaylists: {likes: string, favorites: string, uploads: string, watchHistory: string, watchLater: string}, googlePlusUserId: string}} */
GoogleApiYouTubeChannelResource.prototype.contentDetails;
 /** @type {{viewCount: number, commentCount: number, subscriberCount: number, videoCount: number}} */
GoogleApiYouTubeChannelResource.prototype.statistics;
 /** @type {{topicIds: !Array<string>}} */
GoogleApiYouTubeChannelResource.prototype.topicDetails;
 /** @type {{privacyStatus: string, isLinked: boolean}} */
GoogleApiYouTubeChannelResource.prototype.status;
 /** @type {{channel: {title: string, description: string, keywords: string, defaultTab: string, trackingAnalyticsAccountId: string, moderateComments: boolean, showRelatedChannels: boolean, showBrowseView: boolean, featuredChannelsTitle: string, featuredChannelsUrls: !Array<string>, unsubscribedTrailer: string}, watch: {textColor: string, backgroundColor: string, featuredPlaylistId: string}, image: {bannerImageUrl: string, bannerMobileImageUrl: string, backgroundImageUrl: {default: string, localized: !Array<{value: string, language: string}>}, largeBrandedBannerImageImapScript: {default: string, localized: !Array<{value: string, language: string}>}, largeBrandedBannerImageUrl: {default: string, localized: !Array<{value: string, language: string}>}, smallBrandedBannerImageImapScript: {default: string, localized: !Array<{value: string, language: string}>}, smallBrandedBannerImageUrl: {default: string, localized: !Array<{value: string, language: string}>}, watchIconImageUrl: string, trackingImageUrl: string, bannerTabletLowImageUrl: string, bannerTabletImageUrl: string, bannerTabletHdImageUrl: string, bannerTabletExtraHdImageUrl: string, bannerMobileLowImageUrl: string, bannerMobileMediumImageUrl: string, bannerMobileHdImageUrl: string, bannerMobileExtraHdImageUrl: string, bannerTvImageUrl: string, bannerExternalUrl: string}, hints: !Array<{property: string, value: string}>}} */
GoogleApiYouTubeChannelResource.prototype.brandingSettings;
 /** @type {{timing: {type: string, offsetMs: number}, position: {type: string, cornerPosition: string}, items: !Array<{type: string, videoId: string}>}} */
GoogleApiYouTubeChannelResource.prototype.invideoPromotion;
/**
 * @record
 * @struct
 */
function GoogleApiYouTubeGuideCategoryResource() {}
 /** @type {string} */
GoogleApiYouTubeGuideCategoryResource.prototype.id;
 /** @type {string} */
GoogleApiYouTubeGuideCategoryResource.prototype.kind;
 /** @type {string} */
GoogleApiYouTubeGuideCategoryResource.prototype.etag;
 /** @type {{channelId: string, title: string}} */
GoogleApiYouTubeGuideCategoryResource.prototype.snippet;
/**
 * @record
 * @struct
 */
function GoogleApiYouTubePlaylistItemResource() {}
 /** @type {string} */
GoogleApiYouTubePlaylistItemResource.prototype.id;
 /** @type {string} */
GoogleApiYouTubePlaylistItemResource.prototype.kind;
 /** @type {string} */
GoogleApiYouTubePlaylistItemResource.prototype.etag;
 /** @type {{publishedAt: string, channelId: string, title: string, description: string, thumbnails: !Array<!GoogleApiYouTubeThumbnailItemResource>, channelTitle: string, playlistId: string, position: number, resourceId: {kind: string, videoId: string}}} */
GoogleApiYouTubePlaylistItemResource.prototype.snippet;
 /** @type {{videoId: string, startAt: string, endAt: string, note: string}} */
GoogleApiYouTubePlaylistItemResource.prototype.contentDetails;
 /** @type {{privacyStatus: string}} */
GoogleApiYouTubePlaylistItemResource.prototype.status;
/**
 * @record
 * @struct
 */
function GoogleApiYouTubePlaylistResource() {}
 /** @type {string} */
GoogleApiYouTubePlaylistResource.prototype.id;
 /** @type {string} */
GoogleApiYouTubePlaylistResource.prototype.kind;
 /** @type {string} */
GoogleApiYouTubePlaylistResource.prototype.etag;
 /** @type {{publishedAt: string, channelId: string, title: string, description: string, thumbnails: !Array<!GoogleApiYouTubeThumbnailItemResource>, channelTitle: string, tags: !Array<string>}} */
GoogleApiYouTubePlaylistResource.prototype.snippet;
 /** @type {{privacyStatus: string}} */
GoogleApiYouTubePlaylistResource.prototype.status;
 /** @type {{itemCount: number}} */
GoogleApiYouTubePlaylistResource.prototype.contentDetails;
 /** @type {{embedHtml: string}} */
GoogleApiYouTubePlaylistResource.prototype.player;
/**
 * @record
 * @struct
 */
function GoogleApiYouTubeSearchResource() {}
 /** @type {string} */
GoogleApiYouTubeSearchResource.prototype.kind;
 /** @type {string} */
GoogleApiYouTubeSearchResource.prototype.etag;
 /** @type {{kind: string, videoId: string, channelId: string, playlistId: string}} */
GoogleApiYouTubeSearchResource.prototype.id;
 /** @type {{publishedAt: string, channelId: string, title: string, description: string, thumbnails: !Array<!GoogleApiYouTubeThumbnailItemResource>, channelTitle: string}} */
GoogleApiYouTubeSearchResource.prototype.snippet;
/**
 * @record
 * @struct
 */
function GoogleApiYouTubeSubscriptionResource() {}
 /** @type {string} */
GoogleApiYouTubeSubscriptionResource.prototype.id;
 /** @type {string} */
GoogleApiYouTubeSubscriptionResource.prototype.etag;
 /** @type {string} */
GoogleApiYouTubeSubscriptionResource.prototype.kind;
 /** @type {{publishedAt: string, channelTitle: string, title: string, description: string, resourceId: {kind: string, channelId: string}, channelId: string, thumbnails: !Array<!GoogleApiYouTubeThumbnailItemResource>}} */
GoogleApiYouTubeSubscriptionResource.prototype.snippet;
 /** @type {{totalItemCount: number, newItemCount: number}} */
GoogleApiYouTubeSubscriptionResource.prototype.contentDetails;
 /** @type {{title: string, description: string, channelId: string, thumbnails: !Array<!GoogleApiYouTubeThumbnailItemResource>}} */
GoogleApiYouTubeSubscriptionResource.prototype.subscriberSnippet;
/**
 * @record
 * @struct
 */
function GoogleApiYouTubeThumbnailResource() {}
 /** @type {!GoogleApiYouTubeThumbnailItemResource} */
GoogleApiYouTubeThumbnailResource.prototype.default;
 /** @type {!GoogleApiYouTubeThumbnailItemResource} */
GoogleApiYouTubeThumbnailResource.prototype.medium;
 /** @type {!GoogleApiYouTubeThumbnailItemResource} */
GoogleApiYouTubeThumbnailResource.prototype.high;
/**
 * @record
 * @struct
 */
function GoogleApiYouTubeThumbnailItemResource() {}
 /** @type {string} */
GoogleApiYouTubeThumbnailItemResource.prototype.url;
 /** @type {number} */
GoogleApiYouTubeThumbnailItemResource.prototype.width;
 /** @type {number} */
GoogleApiYouTubeThumbnailItemResource.prototype.height;
/**
 * @record
 * @struct
 */
function GoogleApiYouTubeVideoCategoryResource() {}
 /** @type {string} */
GoogleApiYouTubeVideoCategoryResource.prototype.id;
 /** @type {string} */
GoogleApiYouTubeVideoCategoryResource.prototype.kind;
 /** @type {string} */
GoogleApiYouTubeVideoCategoryResource.prototype.etag;
 /** @type {{channelId: string, title: string}} */
GoogleApiYouTubeVideoCategoryResource.prototype.snippet;
/**
 * @record
 * @struct
 */
function GoogleApiYouTubeVideoResource() {}
 /** @type {string} */
GoogleApiYouTubeVideoResource.prototype.id;
 /** @type {string} */
GoogleApiYouTubeVideoResource.prototype.kind;
 /** @type {string} */
GoogleApiYouTubeVideoResource.prototype.etag;
 /** @type {{publishedAt: string, channelId: string, title: string, description: string, thumbnails: !Array<!GoogleApiYouTubeThumbnailItemResource>, channelTitle: string, tags: !Array<string>, categoryId: string}} */
GoogleApiYouTubeVideoResource.prototype.snippet;
 /** @type {{duration: string, dimension: string, definition: string, caption: string, licensedContent: boolean, regionRestriction: {allowed: !Array<string>, blocked: !Array<string>}, contentRating: {mpaaRating: string, tvpgRating: string, bbfcRating: string, chvrsRating: string, eirinRating: string, cbfcRating: string, fmocRating: string, icaaRating: string, acbRating: string, oflcRating: string, fskRating: string, kmrbRating: string, djctqRating: string, russiaRating: string, rtcRating: string}}} */
GoogleApiYouTubeVideoResource.prototype.contentDetails;
 /** @type {{embedHtml: string}} */
GoogleApiYouTubeVideoResource.prototype.player;
 /** @type {{viewCount: number, likeCount: number, dislikeCount: number, favoriteCount: number, commentCount: number}} */
GoogleApiYouTubeVideoResource.prototype.statistics;
 /** @type {{uploadStatus: string, failureReason: string, rejectionReason: string, privacyStatus: string, license: string, embeddable: boolean, publicStatsViewable: boolean}} */
GoogleApiYouTubeVideoResource.prototype.status;
 /** @type {{topicIds: !Array<string>}} */
GoogleApiYouTubeVideoResource.prototype.topicDetails;
 /** @type {{location: {latitude: number, longitude: number, elevation: number}, locationDescription: string, recordingDate: string}} */
GoogleApiYouTubeVideoResource.prototype.recordingDetails;
 /** @type {{fileName: string, fileSize: number, fileType: string, container: string, videoStreams: !Array<{widthPixels: number, heightPixels: number, frameRateFps: number, aspectRatio: number, codec: string, bitrateBps: number, rotation: string, vender: string}>, audioStreams: !Array<{channelCount: number, codec: string, bitrateBps: number, vendor: string}>, durationMs: number, bitrateBps: number, recordingLocation: {latitude: number, longitude: number, elevation: number}, creationTime: string}} */
GoogleApiYouTubeVideoResource.prototype.fileDetails;
 /** @type {{processingStatus: string, processingProgress: {partsTotal: number, partsProcessed: number, timeLeftMs: number}, processingFailureReason: string, fileDetailsAvailability: string, processingIssuesAvailability: string, tagSuggestionsAvailability: string, editorSuggestionsAvailability: string, thumbnailsAvailability: string}} */
GoogleApiYouTubeVideoResource.prototype.processingDetails;
 /** @type {{processingErrors: !Array<string>, processingWarnings: !Array<string>, processingHints: !Array<string>, tagSuggestions: !Array<{tag: string, categoryRestricts: !Array<string>}>, editorSuggestions: !Array<string>}} */
GoogleApiYouTubeVideoResource.prototype.suggestions;
/**
 * @record
 * @struct
 */
function GoogleApiYouTubeVideoGetRatingResponse() {}
 /** @type {string} */
GoogleApiYouTubeVideoGetRatingResponse.prototype.kind;
 /** @type {string} */
GoogleApiYouTubeVideoGetRatingResponse.prototype.etag;
 /** @type {!Array<{videoId: string, rating: string}>} */
GoogleApiYouTubeVideoGetRatingResponse.prototype.items;
