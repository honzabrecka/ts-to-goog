/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/nock/index.d.ts:

/* TODO: ExportAssignment in  */

/**
 * @param {(string|!RegExp)} basePath
 * @param {!nock.Options=} options
 * @return {!nock.Scope}
 */
function nock(basePath, options) {}

/**
 * @return {void}
 */
nock.cleanAll = function() {};

/**
 * @return {void}
 */
nock.activate = function() {};

/**
 * @return {boolean}
 */
nock.isActive = function() {};

/**
 * @return {boolean}
 */
nock.isDone = function() {};

/**
 * @return {void}
 */
nock.pendingMocks = function() {};

/**
 * @param {(!nock.Interceptor|!nock.RequestOptions)} interceptor
 * @return {boolean}
 */
nock.removeInterceptor = function(interceptor) {};

/**
 * @return {void}
 */
nock.disableNetConnect = function() {};

/**
 * @param {(string|!RegExp)=} matcher
 * @return {void}
 */
nock.enableNetConnect = function(matcher) {};

/**
 * @param {string} path
 * @return {!Array<!nock.Scope>}
 */
nock.load = function(path) {};

/**
 * @param {string} path
 * @return {!Array<!nock.NockDefinition>}
 */
nock.loadDefs = function(path) {};

/**
 * @param {!Array<!nock.NockDefinition>} defs
 * @return {!Array<!nock.Scope>}
 */
nock.define = function(defs) {};
 /** @type {!NodeJS.EventEmitter} */
nock.emitter;
 /** @type {!nock.Recorder} */
nock.recorder;

/**
 * @return {void}
 */
nock.restore = function() {};
 /** @type {!nock.NockBack} */
nock.back;

/** @typedef {!Object<string,(string|function(?, ?, string): ?)>} */
nock.HttpHeaders;

/** @typedef {function((string|!RegExp|function(string): boolean), ?, !nock.Options): !nock.Interceptor} */
nock.InterceptFunction;

/** @typedef {function(?, ?): void} */
nock.ReplyCallback;

/** @typedef {?} */
nock.ReplyCallbackResult;
/**
 * @record
 * @struct
 */
nock.Scope = function() {};
 /** @type {function((string|!RegExp|function(string): boolean), ?, !nock.Options): !nock.Interceptor} */
nock.Scope.prototype.get;
 /** @type {function((string|!RegExp|function(string): boolean), ?, !nock.Options): !nock.Interceptor} */
nock.Scope.prototype.post;
 /** @type {function((string|!RegExp|function(string): boolean), ?, !nock.Options): !nock.Interceptor} */
nock.Scope.prototype.put;
 /** @type {function((string|!RegExp|function(string): boolean), ?, !nock.Options): !nock.Interceptor} */
nock.Scope.prototype.head;
 /** @type {function((string|!RegExp|function(string): boolean), ?, !nock.Options): !nock.Interceptor} */
nock.Scope.prototype.patch;
 /** @type {function((string|!RegExp|function(string): boolean), ?, !nock.Options): !nock.Interceptor} */
nock.Scope.prototype.merge;
 /** @type {function((string|!RegExp|function(string): boolean), ?, !nock.Options): !nock.Interceptor} */
nock.Scope.prototype.delete;
 /** @type {function((string|!RegExp|function(string): boolean), ?, !nock.Options): !nock.Interceptor} */
nock.Scope.prototype.options;
 /** @type {function((string|!RegExp|function(string): boolean), string, ?, !nock.Options): !nock.Interceptor} */
nock.Scope.prototype.intercept;

/**
 * @param {!Object<string,(string|function(?, ?, string): ?)>} headers
 * @return {Scope}
 */
nock.Scope.prototype.defaultReplyHeaders = function(headers) {};

/**
 * @param {string} name
 * @param {(string|!RegExp|function(string): boolean)} value
 * @return {Scope}
 */
nock.Scope.prototype.matchHeader = function(name, value) {};

/**
 * @param {!RegExp|function(string): string} regex_or_fn
 * @param {string=} replace
 * @return {Scope}
 */
nock.Scope.prototype.filteringPath = function(regex_or_fn, replace) {};

/**
 * @param {!RegExp|function(string): string} regex_or_fn
 * @param {string=} replace
 * @return {Scope}
 */
nock.Scope.prototype.filteringRequestBody = function(regex_or_fn, replace) {};

/**
 * @param {function(): void} out
 * @return {Scope}
 */
nock.Scope.prototype.log = function(out) {};

/**
 * @return {Scope}
 */
nock.Scope.prototype.persist = function() {};

/**
 * @return {boolean}
 */
nock.Scope.prototype.shouldPersist = function() {};

/**
 * @return {Scope}
 */
nock.Scope.prototype.replyContentLength = function() {};

/**
 * @param {!Date=} d
 * @return {Scope}
 */
nock.Scope.prototype.replyDate = function(d) {};

/**
 * @return {void}
 */
nock.Scope.prototype.done = function() {};

/**
 * @return {boolean}
 */
nock.Scope.prototype.isDone = function() {};

/**
 * @return {void}
 */
nock.Scope.prototype.restore = function() {};

/**
 * @return {!Array<string>}
 */
nock.Scope.prototype.pendingMocks = function() {};
/**
 * @record
 * @struct
 */
nock.Interceptor = function() {};

/**
 * @param {?} params
 * @return {Interceptor}
 */
nock.Interceptor.prototype.query = function(params) {};

/**
 * @param {number|function(string, string, function(?, ?): void): ?} responseCode_or_callback
 * @param {?|function(string, string, function(?, ?): void): ?|!Object<string,(string|function(?, ?, string): ?)>=} body_or_callback_or_headers
 * @param {!Object<string,(string|function(?, ?, string): ?)>=} headers
 * @return {!nock.Scope}
 */
nock.Interceptor.prototype.reply = function(responseCode_or_callback, body_or_callback_or_headers, headers) {};

/**
 * @param {?} errorMessage
 * @return {!nock.Scope}
 */
nock.Interceptor.prototype.replyWithError = function(errorMessage) {};

/**
 * @param {number} responseCode
 * @param {string} fileName
 * @param {!Object<string,(string|function(?, ?, string): ?)>=} headers
 * @return {!nock.Scope}
 */
nock.Interceptor.prototype.replyWithFile = function(responseCode, fileName, headers) {};

/**
 * @param {{user: string, pass: string}} options
 * @return {Interceptor}
 */
nock.Interceptor.prototype.basicAuth = function(options) {};

/**
 * @param {number} newCounter
 * @return {Interceptor}
 */
nock.Interceptor.prototype.times = function(newCounter) {};

/**
 * @return {Interceptor}
 */
nock.Interceptor.prototype.once = function() {};

/**
 * @return {Interceptor}
 */
nock.Interceptor.prototype.twice = function() {};

/**
 * @return {Interceptor}
 */
nock.Interceptor.prototype.thrice = function() {};

/**
 * @return {Interceptor}
 */
nock.Interceptor.prototype.optionally = function() {};

/**
 * @param {(number|{head: number, body: number})} opts
 * @return {Interceptor}
 */
nock.Interceptor.prototype.delay = function(opts) {};

/**
 * @param {number} timeMs
 * @return {Interceptor}
 */
nock.Interceptor.prototype.delayBody = function(timeMs) {};

/**
 * @param {number} timeMs
 * @return {Interceptor}
 */
nock.Interceptor.prototype.delayConnection = function(timeMs) {};

/**
 * @return {number}
 */
nock.Interceptor.prototype.getTotalDelay = function() {};

/**
 * @param {number} timeMs
 * @return {Interceptor}
 */
nock.Interceptor.prototype.socketDelay = function(timeMs) {};
/**
 * @record
 * @struct
 */
nock.Options = function() {};
 /** @type {boolean} */
nock.Options.prototype.allowUnmocked;
 /** @type {!Object<string,(string|!RegExp|function(string): boolean)>} */
nock.Options.prototype.reqheaders;
 /** @type {!Array<string>} */
nock.Options.prototype.badheaders;
 /** @type {function(string): boolean} */
nock.Options.prototype.filteringScope;
/**
 * @record
 * @struct
 */
nock.RequestOptions = function() {};
 /** @type {string} */
nock.RequestOptions.prototype.proto;
 /** @type {boolean} */
nock.RequestOptions.prototype._https_;
 /** @type {string} */
nock.RequestOptions.prototype.hostname;
 /** @type {string} */
nock.RequestOptions.prototype.host;
 /** @type {number} */
nock.RequestOptions.prototype.port;
 /** @type {string} */
nock.RequestOptions.prototype.method;
 /** @type {string} */
nock.RequestOptions.prototype.path;
/**
 * @record
 * @struct
 */
nock.Recorder = function() {};

/**
 * @param {(boolean|!nock.RecorderOptions)=} options
 * @return {void}
 */
nock.Recorder.prototype.rec = function(options) {};

/**
 * @return {void}
 */
nock.Recorder.prototype.clear = function() {};

/**
 * @return {(!Array<!nock.NockDefinition>|!Array<string>)}
 */
nock.Recorder.prototype.play = function() {};
/**
 * @record
 * @struct
 */
nock.RecorderOptions = function() {};
 /** @type {boolean} */
nock.RecorderOptions.prototype.dont_print;
 /** @type {boolean} */
nock.RecorderOptions.prototype.output_objects;
 /** @type {boolean} */
nock.RecorderOptions.prototype.enable_reqheaders_recording;
 /** @type {function(string): void} */
nock.RecorderOptions.prototype.logging;
 /** @type {boolean} */
nock.RecorderOptions.prototype.use_separator;
/**
 * @record
 * @struct
 */
nock.NockDefinition = function() {};
 /** @type {string} */
nock.NockDefinition.prototype.scope;
 /** @type {(string|number)} */
nock.NockDefinition.prototype.port;
 /** @type {string} */
nock.NockDefinition.prototype.method;
 /** @type {string} */
nock.NockDefinition.prototype.path;
 /** @type {?} */
nock.NockDefinition.prototype.body;
 /** @type {number} */
nock.NockDefinition.prototype.status;
 /** @type {?} */
nock.NockDefinition.prototype.response;
 /** @type {!Object<string,(string|function(?, ?, string): ?)>} */
nock.NockDefinition.prototype.headers;
 /** @type {!Object<string,(string|!RegExp|function(string): boolean)>} */
nock.NockDefinition.prototype.reqheaders;
 /** @type {!nock.Options} */
nock.NockDefinition.prototype.options;

/** @typedef {string} */
nock.NockBackMode;
/**
 * @record
 * @struct
 */
nock.NockBack = function() {};
 /** @type {string} */
nock.NockBack.prototype.fixtures;

/* TODO: CallSignature: nock */

/* TODO: CallSignature: nock */

/**
 * @param {string} mode
 * @return {void}
 */
nock.NockBack.prototype.setMode = function(mode) {};
/**
 * @record
 * @struct
 */
nock.NockBackOptions = function() {};
 /** @type {function(!nock.NockDefinition): void} */
nock.NockBackOptions.prototype.before;
 /** @type {function(!nock.Scope): void} */
nock.NockBackOptions.prototype.after;
 /** @type {function(!Array<!nock.NockDefinition>): !Array<!nock.NockDefinition>} */
nock.NockBackOptions.prototype.afterRecord;
 /** @type {!nock.RecorderOptions} */
nock.NockBackOptions.prototype.recorder;
