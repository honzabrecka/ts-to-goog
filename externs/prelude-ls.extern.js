/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/prelude-ls/index.d.ts:
/** @const */
var PreludeLS = {};

/**
 * @template A
 * @param {A} x
 * @return {A}
 */
PreludeLS.id = function(x) {};

/**
 * @template A
 * @param {string} type
 * @param {A=} x
 * @return {function(A): boolean|boolean}
 */
PreludeLS.isType = function(type, x) {};

/**
 * @template A
 * @param {number} n
 * @param {A=} x
 * @return {function(A): !Array<A>|!Array<A>}
 */
PreludeLS.replicate = function(n, x) {};

/**
 * @template A
 * @param {function(A): void} f
 * @param {!Array<A>|!Object<string,A>|!Object<number,A>=} xs_or_object
 * @return {function(!Array<A>): !Array<A>|!Array<A>|function(!Object<string,A>): !Object<string,A>|!Object<string,A>|function(!Object<number,A>): !Object<number,A>|!Object<number,A>}
 */
PreludeLS.each = function(f, xs_or_object) {};

/**
 * @template A, B
 * @param {function(A): B} f
 * @param {!Array<A>|!Object<string,A>|!Object<number,A>=} xs_or_object
 * @return {function(!Array<A>): !Array<B>|!Array<B>|function(!Object<string,A>): !Object<string,B>|!Object<string,B>|function(!Object<number,A>): !Object<number,B>|!Object<number,B>}
 */
PreludeLS.map = function(f, xs_or_object) {};

/**
 * @template A
 * @param {!Array<A>|!Object<string,A>|!Object<number,A>} xs_or_object
 * @return {!Array<A>|!Object<string,A>|!Object<number,A>}
 */
PreludeLS.compact = function(xs_or_object) {};

/**
 * @template A
 * @param {function(A): boolean} f
 * @param {!Array<A>|!Object<string,A>|!Object<number,A>=} xs_or_object
 * @return {function(!Array<A>): !Array<A>|!Array<A>|function(!Object<string,A>): !Object<string,A>|!Object<string,A>|function(!Object<number,A>): !Object<number,A>|!Object<number,A>}
 */
PreludeLS.filter = function(f, xs_or_object) {};

/**
 * @template A
 * @param {function(A): boolean} f
 * @param {!Array<A>|!Object<string,A>|!Object<number,A>=} xs_or_object
 * @return {function(!Array<A>): !Array<A>|!Array<A>|function(!Object<string,A>): !Object<string,A>|!Object<string,A>|function(!Object<number,A>): !Object<number,A>|!Object<number,A>}
 */
PreludeLS.reject = function(f, xs_or_object) {};

/**
 * @template A
 * @param {function(A): !Boolean|function(A): boolean} f
 * @param {!Array<A>|!Object<string,A>|!Object<number,A>=} xs_or_object
 * @return {function(!Array<A>): !Array<?>|!Array<?>|function(!Object<string,A>): !Array<?>|function(!Object<number,A>): !Array<?>}
 */
PreludeLS.partition = function(f, xs_or_object) {};

/**
 * @template A
 * @param {function(A): !Boolean|function(A): boolean} f
 * @param {!Array<A>|!Object<string,A>|!Object<number,A>=} xs_or_object
 * @return {function(!Array<A>): A|A|function(!Object<string,A>): A|function(!Object<number,A>): A}
 */
PreludeLS.find = function(f, xs_or_object) {};

/**
 * @template A
 * @param {!Array<A>} xs
 * @return {A}
 */
PreludeLS.head = function(xs) {};

/**
 * @template A
 * @param {!Array<A>} xs
 * @return {!Array<A>}
 */
PreludeLS.tail = function(xs) {};

/**
 * @template A
 * @param {!Array<A>} xs
 * @return {A}
 */
PreludeLS.last = function(xs) {};

/**
 * @template A
 * @param {!Array<A>} xs
 * @return {!Array<A>}
 */
PreludeLS.initial = function(xs) {};

/**
 * @template A
 * @param {!Array<A>|?|string} xs_or_object_or_str
 * @return {boolean}
 */
PreludeLS.empty = function(xs_or_object_or_str) {};

/**
 * @template A
 * @param {!Array<A>|string} xs_or_str
 * @return {!Array<A>|string}
 */
PreludeLS.reverse = function(xs_or_str) {};

/**
 * @template A
 * @param {!Array<A>} xs
 * @return {!Array<A>}
 */
PreludeLS.unique = function(xs) {};

/**
 * @template A, B
 * @param {function(A): B} f
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): !Array<A>|!Array<A>}
 */
PreludeLS.uniqueBy = function(f, xs) {};

/**
 * @template A, B
 * @param {function(A): function(B): A} f
 * @param {A=} memo
 * @param {!Array<B>=} xs
 * @return {function(A): function(!Array<B>): A|function(!Array<B>): A|A}
 */
PreludeLS.fold = function(f, memo, xs) {};

/**
 * @template A, B
 * @param {function(A): function(B): A} f
 * @param {A=} memo
 * @param {!Array<B>=} xs
 * @return {function(A): function(!Array<B>): A|function(!Array<B>): A|A}
 */
PreludeLS.foldl = function(f, memo, xs) {};

/**
 * @template A
 * @param {function(A): function(A): A} f
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): A|A}
 */
PreludeLS.fold1 = function(f, xs) {};

/**
 * @template A
 * @param {function(A): function(A): A} f
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): A|A}
 */
PreludeLS.foldl1 = function(f, xs) {};

/**
 * @template A, B
 * @param {function(A): function(B): B} f
 * @param {B=} memo
 * @param {!Array<A>=} xs
 * @return {function(B): function(!Array<A>): B|function(!Array<A>): B|B}
 */
PreludeLS.foldr = function(f, memo, xs) {};

/**
 * @template A
 * @param {function(A): function(A): A} f
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): A|A}
 */
PreludeLS.foldr1 = function(f, xs) {};

/**
 * @template A, B
 * @param {function(B): (void|!Array<?>)} f
 * @param {B=} x
 * @return {function(B): !Array<A>|!Array<A>}
 */
PreludeLS.unfoldr = function(f, x) {};

/**
 * @template A
 * @param {!Array<!Array<A>>} xss
 * @return {!Array<A>}
 */
PreludeLS.concat = function(xss) {};

/**
 * @template A, B
 * @param {function(A): !Array<B>} f
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): !Array<B>|!Array<B>}
 */
PreludeLS.concatMap = function(f, xs) {};

/**
 * @param {!Array<?>} xs
 * @return {!Array<?>}
 */
PreludeLS.flatten = function(xs) {};

/**
 * @template A
 * @param {...!Array<A>} xss
 * @return {!Array<A>}
 */
PreludeLS.difference = function(xss) {};

/**
 * @template A
 * @param {...!Array<A>} xss
 * @return {!Array<A>}
 */
PreludeLS.intersection = function(xss) {};

/**
 * @template A
 * @param {...!Array<A>} xss
 * @return {!Array<A>}
 */
PreludeLS.union = function(xss) {};

/**
 * @template A, B
 * @param {function(A): B} f
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): ?|?}
 */
PreludeLS.countBy = function(f, xs) {};

/**
 * @template A, B
 * @param {function(A): B} f
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): ?|?}
 */
PreludeLS.groupBy = function(f, xs) {};

/**
 * @template A
 * @param {!Array<A>} xs
 * @return {boolean}
 */
PreludeLS.andList = function(xs) {};

/**
 * @template A
 * @param {!Array<A>} xs
 * @return {boolean}
 */
PreludeLS.orList = function(xs) {};

/**
 * @template A
 * @param {function(A): boolean} f
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): boolean|boolean}
 */
PreludeLS.any = function(f, xs) {};

/**
 * @template A
 * @param {function(A): boolean} f
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): boolean|boolean}
 */
PreludeLS.all = function(f, xs) {};

/**
 * @template A
 * @param {!Array<A>} xs
 * @return {!Array<A>}
 */
PreludeLS.sort = function(xs) {};

/**
 * @template A
 * @param {function(A): function(A): number} f
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): !Array<A>|!Array<A>}
 */
PreludeLS.sortWith = function(f, xs) {};

/**
 * @template A, B
 * @param {function(A): B} f
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): !Array<A>|!Array<A>}
 */
PreludeLS.sortBy = function(f, xs) {};

/**
 * @param {!Array<number>} xs
 * @return {number}
 */
PreludeLS.sum = function(xs) {};

/**
 * @param {!Array<number>} xs
 * @return {number}
 */
PreludeLS.product = function(xs) {};

/**
 * @param {!Array<number>} xs
 * @return {number}
 */
PreludeLS.mean = function(xs) {};

/**
 * @template A
 * @param {!Array<A>} xs
 * @return {A}
 */
PreludeLS.maximum = function(xs) {};

/**
 * @template A
 * @param {!Array<A>} xs
 * @return {A}
 */
PreludeLS.minimum = function(xs) {};

/**
 * @template A, B
 * @param {function(A): B} f
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): A|A}
 */
PreludeLS.maximumBy = function(f, xs) {};

/**
 * @template A, B
 * @param {function(A): B} f
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): A|A}
 */
PreludeLS.minimumBy = function(f, xs) {};

/**
 * @template A, B
 * @param {function(A): function(B): A} f
 * @param {A=} memo
 * @param {!Array<B>=} xs
 * @return {function(A): function(!Array<B>): !Array<A>|function(!Array<B>): !Array<A>|!Array<A>}
 */
PreludeLS.scan = function(f, memo, xs) {};

/**
 * @template A, B
 * @param {function(A): function(B): A} f
 * @param {A=} memo
 * @param {!Array<B>=} xs
 * @return {function(A): function(!Array<B>): !Array<A>|function(!Array<B>): !Array<A>|!Array<A>}
 */
PreludeLS.scanl = function(f, memo, xs) {};

/**
 * @template A
 * @param {function(A): function(A): A} f
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): !Array<A>|!Array<A>}
 */
PreludeLS.scan1 = function(f, xs) {};

/**
 * @template A
 * @param {function(A): function(A): A} f
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): !Array<A>|!Array<A>}
 */
PreludeLS.scanl1 = function(f, xs) {};

/**
 * @template A, B
 * @param {function(A): function(B): B} f
 * @param {B=} memo
 * @param {!Array<A>=} xs
 * @return {function(B): function(!Array<A>): !Array<B>|function(!Array<A>): !Array<B>|!Array<B>}
 */
PreludeLS.scanr = function(f, memo, xs) {};

/**
 * @template A
 * @param {function(A): function(A): A} f
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): !Array<A>|!Array<A>}
 */
PreludeLS.scanr1 = function(f, xs) {};

/**
 * @template A
 * @param {number} x
 * @param {number=} y
 * @param {!Array<A>|string=} xs_or_str
 * @return {function(number): function(!Array<A>): !Array<A>|function(!Array<A>): !Array<A>|!Array<A>|function(number): function(string): string|function(string): string|string}
 */
PreludeLS.slice = function(x, y, xs_or_str) {};

/**
 * @template A
 * @param {number} n
 * @param {!Array<A>|string=} xs_or_str
 * @return {function(!Array<A>): !Array<A>|!Array<A>|function(string): string|string}
 */
PreludeLS.take = function(n, xs_or_str) {};

/**
 * @template A
 * @param {number} n
 * @param {!Array<A>|string=} xs_or_str
 * @return {function(!Array<A>): !Array<A>|!Array<A>|function(string): string|string}
 */
PreludeLS.drop = function(n, xs_or_str) {};

/**
 * @template A
 * @param {number} n
 * @param {!Array<A>|string=} xs_or_str
 * @return {function(!Array<A>): !Array<?>|!Array<?>|function(string): !Array<?>}
 */
PreludeLS.splitAt = function(n, xs_or_str) {};

/**
 * @template A
 * @param {function(A): boolean|function(string): boolean} p_or_f
 * @param {!Array<A>|string=} xs_or_str
 * @return {function(!Array<A>): !Array<A>|!Array<A>|function(string): string|string}
 */
PreludeLS.takeWhile = function(p_or_f, xs_or_str) {};

/**
 * @template A
 * @param {function(A): boolean|function(string): boolean} p_or_f
 * @param {!Array<A>|string=} xs_or_str
 * @return {function(!Array<A>): !Array<A>|!Array<A>|function(string): string|string}
 */
PreludeLS.dropWhile = function(p_or_f, xs_or_str) {};

/**
 * @template A
 * @param {function(A): boolean|function(string): boolean} p_or_f
 * @param {!Array<A>|string=} xs_or_str
 * @return {function(!Array<A>): !Array<?>|!Array<?>|function(string): !Array<?>}
 */
PreludeLS.span = function(p_or_f, xs_or_str) {};

/**
 * @template A
 * @param {function(A): boolean} p
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): !Array<?>|!Array<?>}
 */
PreludeLS.breakList = function(p, xs) {};

/**
 * @template A, B
 * @param {!Array<A>} xs
 * @param {!Array<B>=} ys
 * @return {function(!Array<B>): !Array<!Array<?>>|!Array<!Array<?>>}
 */
PreludeLS.zip = function(xs, ys) {};

/**
 * @template A, B, C
 * @param {function(A): function(B): C} f
 * @param {!Array<A>=} xs
 * @param {!Array<B>=} ys
 * @return {function(!Array<A>): function(!Array<B>): !Array<C>|function(!Array<B>): !Array<C>|!Array<C>}
 */
PreludeLS.zipWith = function(f, xs, ys) {};

/**
 * @template A
 * @param {...!Array<A>} xss
 * @return {!Array<!Array<A>>}
 */
PreludeLS.zipAll = function(xss) {};

/**
 * @template A, B
 * @param {function(!Array<A>): B} f
 * @param {...!Array<A>} xss
 * @return {!Array<B>}
 */
PreludeLS.zipAllWith = function(f, xss) {};

/**
 * @template A
 * @param {number} n
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): A|A}
 */
PreludeLS.at = function(n, xs) {};

/**
 * @template A
 * @param {A} x
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): number|number}
 */
PreludeLS.elemIndex = function(x, xs) {};

/**
 * @template A
 * @param {A} x
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): !Array<number>|!Array<number>}
 */
PreludeLS.elemIndices = function(x, xs) {};

/**
 * @template A
 * @param {function(A): boolean} f
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): number|number}
 */
PreludeLS.findIndex = function(f, xs) {};

/**
 * @template A
 * @param {function(A): boolean} f
 * @param {!Array<A>=} xs
 * @return {function(!Array<A>): !Array<number>|!Array<number>}
 */
PreludeLS.findIndices = function(f, xs) {};

/**
 * @template A
 * @param {!Object<string,A>|!Object<number,A>} object
 * @return {!Array<string>|!Array<number>}
 */
PreludeLS.keys = function(object) {};

/**
 * @template A
 * @param {!Object<string,A>|!Object<number,A>} object
 * @return {!Array<A>}
 */
PreludeLS.values = function(object) {};

/**
 * @template A
 * @param {!Array<!Array<?>>} object
 * @return {!Object<string,A>|!Object<number,A>}
 */
PreludeLS.pairsToObj = function(object) {};

/**
 * @template A
 * @param {!Object<string,A>|!Object<number,A>} object
 * @return {!Array<!Array<?>>}
 */
PreludeLS.objToPairs = function(object) {};

/**
 * @template A
 * @param {!Array<string>|!Array<number>} keys
 * @param {!Array<A>=} values
 * @return {function(!Array<A>): !Object<string,A>|!Object<string,A>|function(!Array<A>): !Object<number,A>|!Object<number,A>}
 */
PreludeLS.listsToObj = function(keys, values) {};

/**
 * @template A
 * @param {!Object<string,A>|!Object<number,A>} object
 * @return {!Array<?>}
 */
PreludeLS.objToLists = function(object) {};
/** @const */
PreludeLS.Obj = {};

/**
 * @template A
 * @param {?} object
 * @return {boolean}
 */
PreludeLS.Obj.empty = function(object) {};

/**
 * @template A
 * @param {function(A): void} f
 * @param {!Object<string,A>|!Object<number,A>=} object
 * @return {function(!Object<string,A>): !Object<string,A>|!Object<string,A>|function(!Object<number,A>): !Object<number,A>|!Object<number,A>}
 */
PreludeLS.Obj.each = function(f, object) {};

/**
 * @template A, B
 * @param {function(A): B} f
 * @param {!Object<string,A>|!Object<number,A>=} object
 * @return {function(!Object<string,A>): !Object<string,B>|!Object<string,B>|function(!Object<number,A>): !Object<number,B>|!Object<number,B>}
 */
PreludeLS.Obj.map = function(f, object) {};

/**
 * @template A
 * @param {!Object<string,A>|!Object<number,A>} object
 * @return {!Object<string,A>|!Object<number,A>}
 */
PreludeLS.Obj.compact = function(object) {};

/**
 * @template A
 * @param {function(A): boolean} f
 * @param {!Object<string,A>|!Object<number,A>=} object
 * @return {function(!Object<string,A>): !Object<string,A>|!Object<string,A>|function(!Object<number,A>): !Object<number,A>|!Object<number,A>}
 */
PreludeLS.Obj.filter = function(f, object) {};

/**
 * @template A
 * @param {function(A): boolean} f
 * @param {!Object<string,A>|!Object<number,A>=} object
 * @return {function(!Object<string,A>): !Object<string,A>|!Object<string,A>|function(!Object<number,A>): !Object<number,A>|!Object<number,A>}
 */
PreludeLS.Obj.reject = function(f, object) {};

/**
 * @template A
 * @param {function(A): boolean} f
 * @param {!Object<string,A>|!Object<number,A>=} object
 * @return {function(!Object<string,A>): !Array<?>|!Array<?>|function(!Object<number,A>): !Array<?>}
 */
PreludeLS.Obj.partition = function(f, object) {};

/**
 * @template A
 * @param {function(A): boolean} f
 * @param {!Object<string,A>|!Object<number,A>=} object
 * @return {function(!Object<string,A>): A|A|function(!Object<number,A>): A}
 */
PreludeLS.Obj.find = function(f, object) {};

/**
 * @param {string} separator
 * @param {string=} str
 * @return {function(string): !Array<string>|!Array<string>}
 */
PreludeLS.split = function(separator, str) {};

/**
 * @param {string} separator
 * @param {!Array<string>=} xs
 * @return {function(!Array<string>): string|string}
 */
PreludeLS.join = function(separator, xs) {};

/**
 * @param {string} str
 * @return {!Array<string>}
 */
PreludeLS.lines = function(str) {};

/**
 * @param {!Array<string>} xs
 * @return {string}
 */
PreludeLS.unlines = function(xs) {};

/**
 * @param {string} str
 * @return {!Array<string>}
 */
PreludeLS.words = function(str) {};

/**
 * @param {!Array<string>} xs
 * @return {string}
 */
PreludeLS.unwords = function(xs) {};

/**
 * @param {string} str
 * @return {!Array<string>}
 */
PreludeLS.chars = function(str) {};

/**
 * @param {!Array<string>} xs
 * @return {string}
 */
PreludeLS.unchars = function(xs) {};

/**
 * @param {number} n
 * @param {string=} str
 * @return {function(string): string|string}
 */
PreludeLS.repeat = function(n, str) {};

/**
 * @param {string} str
 * @return {string}
 */
PreludeLS.capitalize = function(str) {};

/**
 * @param {string} str
 * @return {string}
 */
PreludeLS.camelize = function(str) {};

/**
 * @param {string} str
 * @return {string}
 */
PreludeLS.dasherize = function(str) {};

/**
 * @param {function(string): boolean} f
 * @param {string=} str
 * @return {function(string): !Array<?>|!Array<?>}
 */
PreludeLS.breakStr = function(f, str) {};
/** @const */
PreludeLS.Str = {};

/**
 * @param {string} str
 * @return {boolean}
 */
PreludeLS.Str.empty = function(str) {};

/**
 * @param {string} str
 * @return {string}
 */
PreludeLS.Str.reverse = function(str) {};

/**
 * @param {number} x
 * @param {number=} y
 * @param {string=} str
 * @return {function(number): function(string): string|function(string): string|string}
 */
PreludeLS.Str.slice = function(x, y, str) {};

/**
 * @param {number} n
 * @param {string=} str
 * @return {function(string): string|string}
 */
PreludeLS.Str.take = function(n, str) {};

/**
 * @param {number} n
 * @param {string=} str
 * @return {function(string): string|string}
 */
PreludeLS.Str.drop = function(n, str) {};

/**
 * @param {number} n
 * @param {string=} str
 * @return {function(string): !Array<?>|!Array<?>}
 */
PreludeLS.Str.splitAt = function(n, str) {};

/**
 * @param {function(string): boolean} f
 * @param {string=} str
 * @return {function(string): string|string}
 */
PreludeLS.Str.takeWhile = function(f, str) {};

/**
 * @param {function(string): boolean} f
 * @param {string=} str
 * @return {function(string): string|string}
 */
PreludeLS.Str.dropWhile = function(f, str) {};

/**
 * @param {function(string): boolean} f
 * @param {string=} str
 * @return {function(string): !Array<?>|!Array<?>}
 */
PreludeLS.Str.span = function(f, str) {};

/**
 * @param {function(string): boolean} f
 * @param {string=} str
 * @return {function(string): !Array<?>|!Array<?>}
 */
PreludeLS.Str.breakStr = function(f, str) {};

/**
 * @template A, B
 * @param {function(!Array<A>): B} f
 * @param {!Array<A>=} args
 * @return {function(!Array<A>): B|B}
 */
PreludeLS.apply = function(f, args) {};

/**
 * @param {!Function} f
 * @return {!Function}
 */
PreludeLS.curry = function(f) {};

/**
 * @template A, B, C
 * @param {function(A): function(B): C} f
 * @param {B=} y
 * @param {A=} x
 * @return {function(B): function(A): C|function(A): C|C}
 */
PreludeLS.flip = function(f, y, x) {};

/**
 * @param {!Function} f
 * @return {!Function}
 */
PreludeLS.fix = function(f) {};

/**
 * @template A, B, C
 * @param {function(B): function(B): (C|function(B, B): C)|function(B, B): (C|function(B): function(B): C)|function(B, B): C|function(B): function(B): C} f
 * @param {function(A): B=} g
 * @param {A=} x
 * @param {A=} y
 * @return {C|function(A): C|function(A, A): C|function(A): function(A): C|function(function(A): B): function(A, A): C|function(function(A): B): function(A): function(A): C}
 */
PreludeLS.over = function(f, g, x, y) {};

/**
 * @template Comparable
 * @param {Comparable} x
 * @param {Comparable=} y
 * @return {function(Comparable): Comparable|Comparable}
 */
PreludeLS.max = function(x, y) {};

/**
 * @template Comparable
 * @param {Comparable} x
 * @param {Comparable=} y
 * @return {function(Comparable): Comparable|Comparable}
 */
PreludeLS.min = function(x, y) {};

/**
 * @param {number} x
 * @return {number}
 */
PreludeLS.negate = function(x) {};

/**
 * @param {number} x
 * @return {number}
 */
PreludeLS.abs = function(x) {};

/**
 * @param {number} x
 * @return {number}
 */
PreludeLS.signum = function(x) {};

/**
 * @param {number} x
 * @param {number=} y
 * @return {function(number): number|number}
 */
PreludeLS.quot = function(x, y) {};

/**
 * @param {number} x
 * @param {number=} y
 * @return {function(number): number|number}
 */
PreludeLS.rem = function(x, y) {};

/**
 * @param {number} x
 * @param {number=} y
 * @return {function(number): number|number}
 */
PreludeLS.div = function(x, y) {};

/**
 * @param {number} x
 * @param {number=} y
 * @return {function(number): number|number}
 */
PreludeLS.mod = function(x, y) {};

/**
 * @param {number} x
 * @return {number}
 */
PreludeLS.recip = function(x) {};
 /** @type {number} */
PreludeLS.pi;
 /** @type {number} */
PreludeLS.tau;

/**
 * @param {number} x
 * @return {number}
 */
PreludeLS.exp = function(x) {};

/**
 * @param {number} x
 * @return {number}
 */
PreludeLS.sqrt = function(x) {};

/**
 * @param {number} x
 * @return {number}
 */
PreludeLS.ln = function(x) {};

/**
 * @param {number} x
 * @param {number=} y
 * @return {function(number): number|number}
 */
PreludeLS.pow = function(x, y) {};

/**
 * @param {number} x
 * @return {number}
 */
PreludeLS.sin = function(x) {};

/**
 * @param {number} x
 * @return {number}
 */
PreludeLS.cos = function(x) {};

/**
 * @param {number} x
 * @return {number}
 */
PreludeLS.tan = function(x) {};

/**
 * @param {number} x
 * @return {number}
 */
PreludeLS.asin = function(x) {};

/**
 * @param {number} x
 * @return {number}
 */
PreludeLS.acos = function(x) {};

/**
 * @param {number} x
 * @return {number}
 */
PreludeLS.atan = function(x) {};

/**
 * @param {number} x
 * @param {number} y
 * @return {number}
 */
PreludeLS.atan2 = function(x, y) {};

/**
 * @param {number} x
 * @return {number}
 */
PreludeLS.truncate = function(x) {};

/**
 * @param {number} x
 * @return {number}
 */
PreludeLS.round = function(x) {};

/**
 * @param {number} x
 * @return {number}
 */
PreludeLS.ceiling = function(x) {};

/**
 * @param {number} x
 * @return {number}
 */
PreludeLS.floor = function(x) {};

/**
 * @param {number} x
 * @return {boolean}
 */
PreludeLS.isItNaN = function(x) {};

/**
 * @param {number} x
 * @return {boolean}
 */
PreludeLS.even = function(x) {};

/**
 * @param {number} x
 * @return {boolean}
 */
PreludeLS.odd = function(x) {};

/**
 * @param {number} x
 * @param {number=} y
 * @return {function(number): number|number}
 */
PreludeLS.gcd = function(x, y) {};

/**
 * @param {number} x
 * @param {number=} y
 * @return {function(number): number|number}
 */
PreludeLS.lcm = function(x, y) {};

/* TODO: ExportAssignment in  */
