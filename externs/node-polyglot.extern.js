/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/node-polyglot/index.d.ts:
/** @const */
var Polyglot = {};
/**
 * @record
 * @struct
 */
Polyglot.InterpolationOptions = function() {};
 /** @type {(number|{length: number})} */
Polyglot.InterpolationOptions.prototype.smart_count;
 /** @type {string} */
Polyglot.InterpolationOptions.prototype._;

/* TODO: IndexSignature: Polyglot */
/**
 * @record
 * @struct
 */
Polyglot.PolyglotOptions = function() {};
 /** @type {?} */
Polyglot.PolyglotOptions.prototype.phrases;
 /** @type {string} */
Polyglot.PolyglotOptions.prototype.locale;
 /** @type {boolean} */
Polyglot.PolyglotOptions.prototype.allowMissing;
 /** @type {function(string, !Polyglot.InterpolationOptions, string): string} */
Polyglot.PolyglotOptions.prototype.onMissingKey;

/**
 * @param {?} phrases
 * @return {void}
 */
Polyglot.prototype.extend = function(phrases) {};

/**
 * @param {string} phrase
 * @param {number|!Polyglot.InterpolationOptions=} smartCount_or_interpolationOptions
 * @return {string}
 */
Polyglot.prototype.t = function(phrase, smartCount_or_interpolationOptions) {};

/**
 * @return {void}
 */
Polyglot.prototype.clear = function() {};

/**
 * @param {?} phrases
 * @return {void}
 */
Polyglot.prototype.replace = function(phrases) {};

/**
 * @param {string=} locale
 * @return {string|void}
 */
Polyglot.prototype.locale = function(locale) {};

/* TODO: ExportAssignment in  */
