/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/stompjs/index.d.ts:
 /** @type {?} */
var VERSIONS;
/**
 * @constructor
 * @struct
 */
function Client() {}
 /** @type {boolean} */
Client.prototype.connected;
 /** @type {number} */
Client.prototype.counter;
 /** @type {?} */
Client.prototype.heartbeat;
 /** @type {number} */
Client.prototype.maxWebSocketFrameSize;
 /** @type {!Object} */
Client.prototype.subscriptions;
 /** @type {!WebSocket} */
Client.prototype.ws;

/**
 * @param {...string} args
 * @return {?}
 */
Client.prototype.debug = function(args) {};

/**
 * @param {?|string} headers_or_login
 * @param {?|string} connectCallback_or_passcode
 * @param {?=} errorCallback_or_connectCallback
 * @param {?=} errorCallback
 * @param {string=} host
 * @return {?}
 */
Client.prototype.connect = function(headers_or_login, connectCallback_or_passcode, errorCallback_or_connectCallback, errorCallback, host) {};

/**
 * @param {?} disconnectCallback
 * @param {!Object=} headers
 * @return {?}
 */
Client.prototype.disconnect = function(disconnectCallback, headers) {};

/**
 * @param {string} destination
 * @param {!Object=} headers
 * @param {string=} body
 * @return {?}
 */
Client.prototype.send = function(destination, headers, body) {};

/**
 * @param {string} destination
 * @param {?=} callback
 * @param {!Object=} headers
 * @return {?}
 */
Client.prototype.subscribe = function(destination, callback, headers) {};

/**
 * @return {?}
 */
Client.prototype.unsubscribe = function() {};

/**
 * @param {string} transaction
 * @return {?}
 */
Client.prototype.begin = function(transaction) {};

/**
 * @param {string} transaction
 * @return {?}
 */
Client.prototype.commit = function(transaction) {};

/**
 * @param {string} transaction
 * @return {?}
 */
Client.prototype.abort = function(transaction) {};

/**
 * @param {string} messageID
 * @param {string} subscription
 * @param {!Object=} headers
 * @return {?}
 */
Client.prototype.ack = function(messageID, subscription, headers) {};

/**
 * @param {string} messageID
 * @param {string} subscription
 * @param {!Object=} headers
 * @return {?}
 */
Client.prototype.nack = function(messageID, subscription, headers) {};
/**
 * @record
 * @struct
 */
function Message() {}
 /** @type {string} */
Message.prototype.command;
 /** @type {!Object} */
Message.prototype.headers;
 /** @type {string} */
Message.prototype.body;

/**
 * @param {!Object=} headers
 * @return {?}
 */
Message.prototype.ack = function(headers) {};

/**
 * @param {!Object=} headers
 * @return {?}
 */
Message.prototype.nack = function(headers) {};

/**
 * @constructor
 * @struct
 * @param {string} command
 * @param {!Object=} headers
 * @param {string=} body
 */
function Frame(command, headers, body) {}

/**
 * @return {string}
 */
Frame.prototype.toString = function() {};

/**
 * @param {string} s
 * @return {number}
 */
Frame.prototype.sizeOfUTF8 = function(s) {};

/**
 * @param {?} datas
 * @return {?}
 */
Frame.prototype.unmarshall = function(datas) {};

/**
 * @param {string} command
 * @param {!Object=} headers
 * @param {string=} body
 * @return {?}
 */
Frame.prototype.marshall = function(command, headers, body) {};

/**
 * @param {string} url
 * @param {(string|!Array<string>)=} protocols
 * @return {?}
 */
function client(url, protocols) {}

/**
 * @param {!WebSocket} ws
 * @return {?}
 */
function over(ws) {}

/**
 * @param {string} host
 * @param {number} port
 * @return {?}
 */
function overTCP(host, port) {}

/**
 * @param {string} url
 * @return {?}
 */
function overWS(url) {}

/**
 * @param {number} interval
 * @param {?} f
 * @return {!NodeJS.Timer}
 */
function setInterval(interval, f) {}

/**
 * @param {!NodeJS.Timer} id
 * @return {void}
 */
function clearInterval(id) {}
