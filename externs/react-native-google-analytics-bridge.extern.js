/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/react-native-google-analytics-bridge/index.d.ts:
/**
 * @record
 * @struct
 */
function TimeTrackingOptionalValues() {}
 /** @type {string} */
TimeTrackingOptionalValues.prototype.name;
 /** @type {string} */
TimeTrackingOptionalValues.prototype.label;
/**
 * @record
 * @struct
 */
function EventOptionalValues() {}
 /** @type {string} */
EventOptionalValues.prototype.label;
 /** @type {number} */
EventOptionalValues.prototype.value;
/**
 * @record
 * @struct
 */
function EventPurchaseProduct() {}
 /** @type {string} */
EventPurchaseProduct.prototype.id;
 /** @type {string} */
EventPurchaseProduct.prototype.name;
 /** @type {string} */
EventPurchaseProduct.prototype.category;
 /** @type {string} */
EventPurchaseProduct.prototype.brand;
 /** @type {string} */
EventPurchaseProduct.prototype.variant;
 /** @type {number} */
EventPurchaseProduct.prototype.price;
 /** @type {number} */
EventPurchaseProduct.prototype.quantity;
 /** @type {string} */
EventPurchaseProduct.prototype.couponCode;
/**
 * @record
 * @struct
 */
function EventPurchaseTransaction() {}
 /** @type {string} */
EventPurchaseTransaction.prototype.id;
 /** @type {string} */
EventPurchaseTransaction.prototype.affiliation;
 /** @type {number} */
EventPurchaseTransaction.prototype.revenue;
 /** @type {number} */
EventPurchaseTransaction.prototype.tax;
 /** @type {number} */
EventPurchaseTransaction.prototype.shipping;
 /** @type {string} */
EventPurchaseTransaction.prototype.couponCode;

/**
 * @constructor
 * @struct
 * Save all tracker related data that is needed to call native methods with proper data.
 * @param {string} trackerId {String}
 * @param {?=} customDimensionsFieldsIndexMap {{fieldName: fieldIndex}} Custom dimensions field/index pairs
 */
function GoogleAnalyticsTracker(trackerId, customDimensionsFieldsIndexMap) {}

/**
 * If Tracker has customDimensionsFieldsIndexMap, it will transform
 * customDimensions map pairs {field: value} to {fieldIndex: value}.
 * Otherwise customDimensions are passed trough untouched.
 * Underlay native methods will transform provided customDimensions map to expected format.
 * Google analytics expect dimensions to be tracker with 'dimension{index}' keys,
 * not dimension field names.
 * @param {!Object} customDimensions {Object}
 * @return {void}
 */
GoogleAnalyticsTracker.prototype.transformCustomDimensionsFieldsToIndexes = function(customDimensions) {};

/**
 * Track the current screen/view Important: Calling this will also set the "current view" for
 * other calls. So events tracked will be tagged as having occured on the current view.
 * @param {string} screenName
 * @return {void}
 */
GoogleAnalyticsTracker.prototype.trackScreenView = function(screenName) {};

/**
 * Track an event that has occured
 * @param {string} category
 * @param {string} action
 * @param {?=} optionalValues
 * @return {void}
 */
GoogleAnalyticsTracker.prototype.trackEvent = function(category, action, optionalValues) {};

/**
 * Track the current screen/view with custom dimension values
 * @param {string} screenName
 * @param {!Object} customDimensionValues
 * @return {void}
 */
GoogleAnalyticsTracker.prototype.trackScreenViewWithCustomDimensionValues = function(screenName, customDimensionValues) {};

/**
 * Track an event that has occured with custom dimension values
 * @param {string} category
 * @param {string} action
 * @param {?} optionalValues
 * @param {!Object} customDimensionValues
 * @return {void}
 */
GoogleAnalyticsTracker.prototype.trackEventWithCustomDimensionValues = function(category, action, optionalValues, customDimensionValues) {};

/**
 * Track an event that has occured
 * @param {string} category
 * @param {number} value
 * @param {?=} optionalValues
 * @return {void}
 */
GoogleAnalyticsTracker.prototype.trackTiming = function(category, value, optionalValues) {};

/**
 * Track a purchase event. This uses the Enhanced Ecommerce GA feature.
 * @param {?} product
 * @param {?} transaction
 * @param {string=} eventCategory
 * @param {string=} eventAction
 * @return {void}
 */
GoogleAnalyticsTracker.prototype.trackPurchaseEvent = function(product, transaction, eventCategory, eventAction) {};

/**
 * Track a purchase event. This uses the Enhanced Ecommerce GA feature.
 * @param {!Array<?>} products
 * @param {?} transaction
 * @param {string=} eventCategory
 * @param {string=} eventAction
 * @return {void}
 */
GoogleAnalyticsTracker.prototype.trackMultiProductsPurchaseEvent = function(products, transaction, eventCategory, eventAction) {};

/**
 * Track a purchase event with custom dimensions. This uses the Enhanced Ecommerce GA feature.
 * @param {!Array<?>} products
 * @param {?} transaction
 * @param {string=} eventCategory
 * @param {string=} eventAction
 * @param {!Object=} customDimensions
 * @return {void}
 */
GoogleAnalyticsTracker.prototype.trackMultiProductsPurchaseEventWithCustomDimensionValues = function(products, transaction, eventCategory, eventAction, customDimensions) {};

/**
 * Track an exception
 * @param {string} error
 * @param {boolean=} fatal
 * @return {void}
 */
GoogleAnalyticsTracker.prototype.trackException = function(error, fatal) {};

/**
 * Sets the Google Analytics User-ID for the current user for tracking.
 * The userId should be an anonymous identifier that complies with Google Analytic's User-ID policy.
 * @param {string} userId
 * @return {void}
 */
GoogleAnalyticsTracker.prototype.setUser = function(userId) {};

/**
 * Sets if IDFA (identifier for advertisers) collection should be enabled.
 * 
 * Enabled by default.
 * 
 * Important: For iOS you can only use this method if you have done the optional step 6 from the installation
 * guide. Only enable this (and link the appropriate libraries) if you plan to use advertising features
 * in your app, or else your app may get rejected from the AppStore.
 * @param {boolean=} enabled
 * @return {void}
 */
GoogleAnalyticsTracker.prototype.allowIDFA = function(enabled) {};

/**
 * Track a social interaction, Facebook, Twitter, etc.
 * @param {string} network
 * @param {string} action
 * @param {string} targetUrl
 * @return {void}
 */
GoogleAnalyticsTracker.prototype.trackSocialInteraction = function(network, action, targetUrl) {};

/**
 * Sets if uncaught exceptions should be tracked
 * @param {boolean} enabled
 * @return {void}
 */
GoogleAnalyticsTracker.prototype.setTrackUncaughtExceptions = function(enabled) {};

/**
 * Sets the trackers appName
 * The Bundle name is used by default
 * @param {string} appName
 * @return {void}
 */
GoogleAnalyticsTracker.prototype.setAppName = function(appName) {};

/**
 * Sets the trackers appVersion
 * @param {string} appVersion
 * @return {void}
 */
GoogleAnalyticsTracker.prototype.setAppVersion = function(appVersion) {};

/**
 * Sets if AnonymizeIp is enabled
 * If enabled the last octet of the IP address will be removed
 * @param {string} enabled
 * @return {void}
 */
GoogleAnalyticsTracker.prototype.setAnonymizeIp = function(enabled) {};

/**
 * Sets the tracker currency property. See accepted currency codes here
 * https://developers.google.com/analytics/devguides/platform/features/currencies
 * @param {string} currencyCode
 * @return {void}
 */
GoogleAnalyticsTracker.prototype.setCurrency = function(currencyCode) {};

/**
 * Sets tracker sampling rate.
 * @param {number} sampleRatio
 * @return {void}
 */
GoogleAnalyticsTracker.prototype.setSamplingRate = function(sampleRatio) {};
/**
 * @record
 * @struct
 */
function GAEvent() {}
 /** @type {string} */
GAEvent.prototype.event;
 /** @type {?} */
GAEvent.prototype.payload;
/**
 * @constructor
 * @struct
 */
function GoogleTagManager() {}

/**
 * Call once to open the container for all subsequent static calls.
 * @param {string} containerId
 * @return {!Promise<void>}
 */
GoogleTagManager.openContainerWithId = function(containerId) {};

/**
 * Retrieves a boolean value with the given key from the opened container.
 * @param {string} key
 * @return {!Promise<boolean>}
 */
GoogleTagManager.boolForKey = function(key) {};

/**
 * Retrieves a string with the given key from the opened container.
 * @param {string} key
 * @return {!Promise<string>}
 */
GoogleTagManager.stringForKey = function(key) {};

/**
 * Retrieves a number with the given key from the opened container.
 * @param {string} key
 * @return {!Promise<number>}
 */
GoogleTagManager.doubleForKey = function(key) {};

/**
 * push a datalayer event for Google Analytics through Google Tag Manager.
 * it must have at least one key "event" with event name
 *         example: {event: "eventName", pageId: "/home"}
 * @template E
 * @param {?} dictionary
 * @return {!Promise<boolean>}
 */
GoogleTagManager.pushDataLayerEvent = function(dictionary) {};
/**
 * @constructor
 * @struct
 */
function GoogleAnalyticsSettings() {}

/**
 * Sets if OptOut is active and disables Google Analytics
 * This has to be set each time the App starts
 * 
 * Disabled by default.
 * @param {boolean} enabled
 * @return {void}
 */
GoogleAnalyticsSettings.setOptOut = function(enabled) {};

/**
 * Sets the trackers dispatch interval
 * This will influence how often batches of events, screen views, etc
 * are sent to your tracker.
 * 
 * Events, screen views, etc, are sent in batches to the tracker. This function allows you to configure
 * how often (in seconds) the batches are sent to your tracker. Recommended to keep this around
 * 20-120 seconds to preserve battery and network traffic.
 * 
 * This is set to 20 seconds by default.
 * 
 * @param {number} intervalInSeconds
 * @return {void}
 */
GoogleAnalyticsSettings.setDispatchInterval = function(intervalInSeconds) {};

/**
 * When enabled the native library prevents any data from being sent to Google Analytics.
 * This allows you to test or debug the implementation, without your test data appearing in
 * your Google Analytics reports.
 * 
 * @param {boolean} enabled
 * @return {void}
 */
GoogleAnalyticsSettings.setDryRun = function(enabled) {};
