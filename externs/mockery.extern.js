/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/mockery/index.d.ts:
/**
 * @record
 * @struct
 */
function MockeryEnableArgs() {}
 /** @type {boolean} */
MockeryEnableArgs.prototype.useCleanCache;
 /** @type {boolean} */
MockeryEnableArgs.prototype.warnOnReplace;
 /** @type {boolean} */
MockeryEnableArgs.prototype.warnOnUnregistered;

/**
 * @param {?=} args
 * @return {void}
 */
function enable(args) {}

/**
 * @return {void}
 */
function disable() {}

/**
 * @param {string} name
 * @param {?} mock
 * @return {void}
 */
function registerMock(name, mock) {}

/**
 * @param {string} name
 * @return {void}
 */
function deregisterMock(name) {}

/**
 * @param {string} name
 * @param {string} substitute
 * @return {void}
 */
function registerSubstitute(name, substitute) {}

/**
 * @param {string} name
 * @return {void}
 */
function deregisterSubstitute(name) {}

/**
 * @param {string} name
 * @param {boolean=} unhook
 * @return {void}
 */
function registerAllowable(name, unhook) {}

/**
 * @param {string} name
 * @return {void}
 */
function deregisterAllowable(name) {}

/**
 * @param {!Array<string>} names
 * @return {void}
 */
function registerAllowables(names) {}

/**
 * @param {!Array<string>} names
 * @return {void}
 */
function deregisterAllowables(names) {}

/**
 * @return {void}
 */
function deregisterAll() {}

/**
 * @return {void}
 */
function resetCache() {}

/**
 * @param {boolean} value
 * @return {void}
 */
function warnOnUnregistered(value) {}

/**
 * @param {boolean} value
 * @return {void}
 */
function warnOnReplace(value) {}
