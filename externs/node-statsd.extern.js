/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/node-statsd/index.d.ts:

/* TODO: ImportDeclaration in  */
/**
 * @record
 * @struct
 */
function StatsDConfig() {}
 /** @type {string} */
StatsDConfig.prototype.host;
 /** @type {number} */
StatsDConfig.prototype.port;
 /** @type {string} */
StatsDConfig.prototype.prefix;
 /** @type {string} */
StatsDConfig.prototype.suffix;
 /** @type {boolean} */
StatsDConfig.prototype.globalize;
 /** @type {boolean} */
StatsDConfig.prototype.cacheDns;
 /** @type {boolean} */
StatsDConfig.prototype.mock;
 /** @type {!Array<string>} */
StatsDConfig.prototype.global_tags;

/** @typedef {?} */
var Callback;

/**
 * @constructor
 * @struct
 * The UDP Client for StatsD
 *   \@option {string} host         The host to connect to default: localhost
 *   \@option port        {String|Integer} The port to connect to default: 8125
 *   \@option {string} prefix       An optional prefix to assign to each stat name sent
 *   \@option {string} suffix       An optional suffix to assign to each stat name sent
 *   \@option globalize   {boolean} An optional boolean to add "statsd" as an object in the global namespace
 *   \@option cacheDns    {boolean} An optional option to only lookup the hostname -> ip address once
 *   \@option mock        {boolean} An optional boolean indicating this Client is a mock object, no stats are sent.
 *   \@option {string[]} global_tags Optional tags that will be added to every metric
 * @param {?|string=} config_or_host
 * @param {number=} port
 * @param {string=} prefix
 * @param {string=} suffix
 * @param {boolean=} globalize
 * @param {boolean=} cacheDns
 * @param {boolean=} mock
 * @param {!Array<string>=} global_tags
 */
function StatsD(config_or_host, port, prefix, suffix, globalize, cacheDns, mock, global_tags) {}
 /** @type {!Socket} */
StatsD.prototype.socket;
 /** @type {string} */
StatsD.prototype.host;
 /** @type {number} */
StatsD.prototype.port;
 /** @type {string} */
StatsD.prototype.prefix;
 /** @type {string} */
StatsD.prototype.suffix;
 /** @type {boolean} */
StatsD.prototype.cacheDns;
 /** @type {boolean} */
StatsD.prototype.mock;
 /** @type {!Array<string>} */
StatsD.prototype.global_tags;

/**
 * Close the underlying socket and stop listening for data on it.
 * @return {void}
 */
StatsD.prototype.close = function() {};

/**
 * Decrements a stat by a specified amount
 * @param {(string|!Array<string>)} stat
 * @param {number=} value
 * @param {number|(number|!Array<string>)|?=} sampleRate_or_sampleRateOrTags_or_callback
 * @param {!Array<string>|?=} tags_or_callback
 * @param {?=} callback
 * @return {void}
 */
StatsD.prototype.decrement = function(stat, value, sampleRate_or_sampleRateOrTags_or_callback, tags_or_callback, callback) {};

/**
 * Gauges a stat by a specified amount
 * @param {(string|!Array<string>)} stat
 * @param {number} value
 * @param {number|(number|!Array<string>)|?=} sampleRate_or_sampleRateOrTags_or_callback
 * @param {!Array<string>|?=} tags_or_callback
 * @param {?=} callback
 * @return {void}
 */
StatsD.prototype.gauge = function(stat, value, sampleRate_or_sampleRateOrTags_or_callback, tags_or_callback, callback) {};

/**
 * Represents the histogram stat
 * @param {(string|!Array<string>)} stat
 * @param {?} value
 * @param {number|(number|!Array<string>)|?=} sampleRate_or_sampleRateOrTags_or_callback
 * @param {!Array<string>|?=} tags_or_callback
 * @param {?=} callback
 * @return {void}
 */
StatsD.prototype.histogram = function(stat, value, sampleRate_or_sampleRateOrTags_or_callback, tags_or_callback, callback) {};

/**
 * Increments a stat by a specified amount
 * @param {(string|!Array<string>)} stat
 * @param {number=} value
 * @param {number=} sampleRate
 * @param {!Array<string>=} tags
 * @param {?=} callback
 * @return {void}
 */
StatsD.prototype.increment = function(stat, value, sampleRate, tags, callback) {};

/**
 * Sends a stat across the wire
 * @param {(string|!Array<string>)} stat
 * @param {?} value
 * @param {string} type
 * @param {number|(number|!Array<string>)|?=} sampleRate_or_sampleRateOrTags_or_callback
 * @param {!Array<string>|?=} tags_or_callback
 * @param {?=} callback
 * @return {void}
 */
StatsD.prototype.send = function(stat, value, type, sampleRate_or_sampleRateOrTags_or_callback, tags_or_callback, callback) {};

/**
 * Checks if stats is an array and sends all stats calling back once all have sent
 * @param {(string|!Array<string>)} stat
 * @param {?} value
 * @param {string} type
 * @param {number|(number|!Array<string>)|?=} sampleRate_or_sampleRateOrTags_or_callback
 * @param {!Array<string>|?=} tags_or_callback
 * @param {?=} callback
 * @return {void}
 */
StatsD.prototype.sendAll = function(stat, value, type, sampleRate_or_sampleRateOrTags_or_callback, tags_or_callback, callback) {};

/**
 * See StatsD.unique
 * @param {(string|!Array<string>)} stat
 * @param {?} value
 * @param {number|(number|!Array<string>)|?=} sampleRate_or_sampleRateOrTags_or_callback
 * @param {!Array<string>|?=} tags_or_callback
 * @param {?=} callback
 * @return {void}
 */
StatsD.prototype.set = function(stat, value, sampleRate_or_sampleRateOrTags_or_callback, tags_or_callback, callback) {};

/**
 * Represents the timing stat
 * @param {(string|!Array<string>)} stat
 * @param {number} time
 * @param {number|(number|!Array<string>)|?=} sampleRate_or_sampleRateOrTags_or_callback
 * @param {!Array<string>|?=} tags_or_callback
 * @param {?=} callback
 * @return {void}
 */
StatsD.prototype.timing = function(stat, time, sampleRate_or_sampleRateOrTags_or_callback, tags_or_callback, callback) {};

/**
 * Counts unique values by a specified amount
 * @param {(string|!Array<string>)} stat
 * @param {?} value
 * @param {number|(number|!Array<string>)|?=} sampleRate_or_sampleRateOrTags_or_callback
 * @param {!Array<string>|?=} tags_or_callback
 * @param {?=} callback
 * @return {void}
 */
StatsD.prototype.unique = function(stat, value, sampleRate_or_sampleRateOrTags_or_callback, tags_or_callback, callback) {};
