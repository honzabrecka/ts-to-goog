/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/chai/index.d.ts:
/** @const */
var Chai = {};
/**
 * @record
 * @struct
 */
Chai.ChaiStatic = function() {};
 /** @type {!Chai.ExpectStatic} */
Chai.ChaiStatic.prototype.expect;
 /** @type {!Chai.AssertStatic} */
Chai.ChaiStatic.prototype.assert;
 /** @type {!Chai.Config} */
Chai.ChaiStatic.prototype.config;
 /** @type {?} */
Chai.ChaiStatic.prototype.AssertionError;
 /** @type {string} */
Chai.ChaiStatic.prototype.version;

/**
 * @return {!Chai.Should}
 */
Chai.ChaiStatic.prototype.should = function() {};

/**
 * Provides a way to extend the internals of Chai
 * @param {function(?, ?): void} fn
 * @return {!Chai.ChaiStatic}
 */
Chai.ChaiStatic.prototype.use = function(fn) {};
/**
 * @extends {Chai.AssertionStatic}
 * @record
 * @struct
 */
Chai.ExpectStatic = function() {};

/**
 * @param {?=} actual
 * @param {?=} expected
 * @param {string=} message
 * @param {string=} operator
 * @return {void}
 */
Chai.ExpectStatic.prototype.fail = function(actual, expected, message, operator) {};
/**
 * @extends {Chai.Assert}
 * @record
 * @struct
 */
Chai.AssertStatic = function() {};
/**
 * @record
 * @struct
 */
Chai.AssertionStatic = function() {};

/* TODO: CallSignature: Chai */

/** @typedef {string} */
Chai.Operator;

/** @typedef {(string|number|boolean|!Date)} */
Chai.OperatorComparable;
/**
 * @record
 * @struct
 */
Chai.ShouldAssertion = function() {};
 /** @type {!Chai.ShouldThrow} */
Chai.ShouldAssertion.prototype.Throw;
 /** @type {!Chai.ShouldThrow} */
Chai.ShouldAssertion.prototype.throw;

/**
 * @param {?} value1
 * @param {?} value2
 * @param {string=} message
 * @return {void}
 */
Chai.ShouldAssertion.prototype.equal = function(value1, value2, message) {};

/**
 * @param {?} value
 * @param {string=} message
 * @return {void}
 */
Chai.ShouldAssertion.prototype.exist = function(value, message) {};
/**
 * @extends {Chai.ShouldAssertion}
 * @record
 * @struct
 */
Chai.Should = function() {};
 /** @type {!Chai.ShouldAssertion} */
Chai.Should.prototype.not;

/**
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @param {string=} operator
 * @return {void}
 */
Chai.Should.prototype.fail = function(actual, expected, message, operator) {};
/**
 * @record
 * @struct
 */
Chai.ShouldThrow = function() {};

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */
/**
 * @extends {Chai.LanguageChains}
 * @extends {Chai.NumericComparison}
 * @extends {Chai.TypeComparison}
 * @record
 * @struct
 */
Chai.Assertion = function() {};
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.not;
 /** @type {!Chai.Deep} */
Chai.Assertion.prototype.deep;
 /** @type {!Chai.Ordered} */
Chai.Assertion.prototype.ordered;
 /** @type {!Chai.Nested} */
Chai.Assertion.prototype.nested;
 /** @type {!Chai.KeyFilter} */
Chai.Assertion.prototype.any;
 /** @type {!Chai.KeyFilter} */
Chai.Assertion.prototype.all;
 /** @type {!Chai.TypeComparison} */
Chai.Assertion.prototype.a;
 /** @type {!Chai.TypeComparison} */
Chai.Assertion.prototype.an;
 /** @type {!Chai.Include} */
Chai.Assertion.prototype.include;
 /** @type {!Chai.Include} */
Chai.Assertion.prototype.includes;
 /** @type {!Chai.Include} */
Chai.Assertion.prototype.contain;
 /** @type {!Chai.Include} */
Chai.Assertion.prototype.contains;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.ok;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.true;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.false;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.null;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.undefined;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.NaN;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.exist;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.empty;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.arguments;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.Arguments;
 /** @type {!Chai.Equal} */
Chai.Assertion.prototype.equal;
 /** @type {!Chai.Equal} */
Chai.Assertion.prototype.equals;
 /** @type {!Chai.Equal} */
Chai.Assertion.prototype.eq;
 /** @type {!Chai.Equal} */
Chai.Assertion.prototype.eql;
 /** @type {!Chai.Equal} */
Chai.Assertion.prototype.eqls;
 /** @type {!Chai.Property} */
Chai.Assertion.prototype.property;
 /** @type {!Chai.OwnProperty} */
Chai.Assertion.prototype.ownProperty;
 /** @type {!Chai.OwnProperty} */
Chai.Assertion.prototype.haveOwnProperty;
 /** @type {!Chai.OwnPropertyDescriptor} */
Chai.Assertion.prototype.ownPropertyDescriptor;
 /** @type {!Chai.OwnPropertyDescriptor} */
Chai.Assertion.prototype.haveOwnPropertyDescriptor;
 /** @type {!Chai.Length} */
Chai.Assertion.prototype.length;
 /** @type {!Chai.Length} */
Chai.Assertion.prototype.lengthOf;
 /** @type {!Chai.Match} */
Chai.Assertion.prototype.match;
 /** @type {!Chai.Match} */
Chai.Assertion.prototype.matches;
 /** @type {!Chai.Keys} */
Chai.Assertion.prototype.keys;
 /** @type {!Chai.Throw} */
Chai.Assertion.prototype.throw;
 /** @type {!Chai.Throw} */
Chai.Assertion.prototype.throws;
 /** @type {!Chai.Throw} */
Chai.Assertion.prototype.Throw;
 /** @type {!Chai.RespondTo} */
Chai.Assertion.prototype.respondTo;
 /** @type {!Chai.RespondTo} */
Chai.Assertion.prototype.respondsTo;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.itself;
 /** @type {!Chai.Satisfy} */
Chai.Assertion.prototype.satisfy;
 /** @type {!Chai.Satisfy} */
Chai.Assertion.prototype.satisfies;
 /** @type {!Chai.CloseTo} */
Chai.Assertion.prototype.closeTo;
 /** @type {!Chai.CloseTo} */
Chai.Assertion.prototype.approximately;
 /** @type {!Chai.Members} */
Chai.Assertion.prototype.members;
 /** @type {!Chai.PropertyChange} */
Chai.Assertion.prototype.increase;
 /** @type {!Chai.PropertyChange} */
Chai.Assertion.prototype.increases;
 /** @type {!Chai.PropertyChange} */
Chai.Assertion.prototype.decrease;
 /** @type {!Chai.PropertyChange} */
Chai.Assertion.prototype.decreases;
 /** @type {!Chai.PropertyChange} */
Chai.Assertion.prototype.change;
 /** @type {!Chai.PropertyChange} */
Chai.Assertion.prototype.changes;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.extensible;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.sealed;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.frozen;

/**
 * @param {string} string
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.string = function(string, message) {};

/**
 * @param {string} string
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.key = function(string) {};

/**
 * @param {!Array<?>} list
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.oneOf = function(list, message) {};
/**
 * @record
 * @struct
 */
Chai.LanguageChains = function() {};
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.to;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.be;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.been;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.is;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.that;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.which;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.and;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.has;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.have;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.with;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.at;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.of;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.same;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.but;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.does;
/**
 * @record
 * @struct
 */
Chai.NumericComparison = function() {};
 /** @type {!Chai.NumberComparer} */
Chai.NumericComparison.prototype.above;
 /** @type {!Chai.NumberComparer} */
Chai.NumericComparison.prototype.gt;
 /** @type {!Chai.NumberComparer} */
Chai.NumericComparison.prototype.greaterThan;
 /** @type {!Chai.NumberComparer} */
Chai.NumericComparison.prototype.least;
 /** @type {!Chai.NumberComparer} */
Chai.NumericComparison.prototype.gte;
 /** @type {!Chai.NumberComparer} */
Chai.NumericComparison.prototype.below;
 /** @type {!Chai.NumberComparer} */
Chai.NumericComparison.prototype.lt;
 /** @type {!Chai.NumberComparer} */
Chai.NumericComparison.prototype.lessThan;
 /** @type {!Chai.NumberComparer} */
Chai.NumericComparison.prototype.most;
 /** @type {!Chai.NumberComparer} */
Chai.NumericComparison.prototype.lte;

/**
 * @param {number} start
 * @param {number} finish
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.NumericComparison.prototype.within = function(start, finish, message) {};
/**
 * @record
 * @struct
 */
Chai.NumberComparer = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.TypeComparison = function() {};

/* TODO: CallSignature: Chai */
 /** @type {!Chai.InstanceOf} */
Chai.TypeComparison.prototype.instanceof;
 /** @type {!Chai.InstanceOf} */
Chai.TypeComparison.prototype.instanceOf;
/**
 * @record
 * @struct
 */
Chai.InstanceOf = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.CloseTo = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.Nested = function() {};
 /** @type {!Chai.Include} */
Chai.Nested.prototype.include;
 /** @type {!Chai.Property} */
Chai.Nested.prototype.property;
 /** @type {!Chai.Members} */
Chai.Nested.prototype.members;
/**
 * @record
 * @struct
 */
Chai.Deep = function() {};
 /** @type {!Chai.Equal} */
Chai.Deep.prototype.equal;
 /** @type {!Chai.Equal} */
Chai.Deep.prototype.equals;
 /** @type {!Chai.Equal} */
Chai.Deep.prototype.eq;
 /** @type {!Chai.Include} */
Chai.Deep.prototype.include;
 /** @type {!Chai.Property} */
Chai.Deep.prototype.property;
 /** @type {!Chai.Members} */
Chai.Deep.prototype.members;
 /** @type {!Chai.Ordered} */
Chai.Deep.prototype.ordered;
/**
 * @record
 * @struct
 */
Chai.Ordered = function() {};
 /** @type {!Chai.Members} */
Chai.Ordered.prototype.members;
/**
 * @record
 * @struct
 */
Chai.KeyFilter = function() {};
 /** @type {!Chai.Keys} */
Chai.KeyFilter.prototype.keys;
/**
 * @record
 * @struct
 */
Chai.Equal = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.Property = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.OwnProperty = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.OwnPropertyDescriptor = function() {};

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */
/**
 * @extends {Chai.LanguageChains}
 * @extends {Chai.NumericComparison}
 * @record
 * @struct
 */
Chai.Length = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.Include = function() {};

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */
 /** @type {!Chai.Keys} */
Chai.Include.prototype.keys;
 /** @type {!Chai.Deep} */
Chai.Include.prototype.deep;
 /** @type {!Chai.Ordered} */
Chai.Include.prototype.ordered;
 /** @type {!Chai.Members} */
Chai.Include.prototype.members;
 /** @type {!Chai.KeyFilter} */
Chai.Include.prototype.any;
 /** @type {!Chai.KeyFilter} */
Chai.Include.prototype.all;
/**
 * @record
 * @struct
 */
Chai.Match = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.Keys = function() {};

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.Throw = function() {};

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.RespondTo = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.Satisfy = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.Members = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.PropertyChange = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.Assert = function() {};

/* TODO: CallSignature: Chai */

/**
 * Throws a failure.
 * 
 * \@remarks Node.js assert module-compatible.
 * @template T
 * @param {T=} actual   Actual value.
 * @param {T=} expected   Potential expected value.
 * @param {string=} message    Message to display on error.
 * @param {string=} operator   Comparison operator, if not strict equality.
 * @return {void}
 */
Chai.Assert.prototype.fail = function(actual, expected, message, operator) {};

/**
 * Asserts that object is truthy.
 * 
 * @template T
 * @param {T} value
 * @param {string=} message    Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isOk = function(value, message) {};

/**
 * Asserts that object is truthy.
 * 
 * @template T
 * @param {T} value
 * @param {string=} message    Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.ok = function(value, message) {};

/**
 * Asserts that object is falsy.
 * 
 * @template T
 * @param {T} value
 * @param {string=} message    Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isNotOk = function(value, message) {};

/**
 * Asserts that object is falsy.
 * 
 * @template T
 * @param {T} value
 * @param {string=} message    Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.notOk = function(value, message) {};

/**
 * Asserts non-strict equality (==) of actual and expected.
 * 
 * @template T
 * @param {T} actual   Actual value.
 * @param {T} expected   Potential expected value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.equal = function(actual, expected, message) {};

/**
 * Asserts non-strict inequality (==) of actual and expected.
 * 
 * @template T
 * @param {T} actual   Actual value.
 * @param {T} expected   Potential expected value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.notEqual = function(actual, expected, message) {};

/**
 * Asserts strict equality (===) of actual and expected.
 * 
 * @template T
 * @param {T} actual   Actual value.
 * @param {T} expected   Potential expected value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.strictEqual = function(actual, expected, message) {};

/**
 * Asserts strict inequality (==) of actual and expected.
 * 
 * @template T
 * @param {T} actual   Actual value.
 * @param {T} expected   Potential expected value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.notStrictEqual = function(actual, expected, message) {};

/**
 * Asserts that actual is deeply equal to expected.
 * 
 * @template T
 * @param {T} actual   Actual value.
 * @param {T} expected   Potential expected value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.deepEqual = function(actual, expected, message) {};

/**
 * Asserts that actual is not deeply equal to expected.
 * 
 * @template T
 * @param {T} actual   Actual value.
 * @param {T} expected   Potential expected value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.notDeepEqual = function(actual, expected, message) {};

/**
 * Asserts valueToCheck is strictly greater than (>) valueToBeAbove.
 * 
 * @param {number} valueToCheck   Actual value.
 * @param {number} valueToBeAbove   Minimum Potential expected value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isAbove = function(valueToCheck, valueToBeAbove, message) {};

/**
 * Asserts valueToCheck is greater than or equal to (>=) valueToBeAtLeast.
 * 
 * @param {number} valueToCheck   Actual value.
 * @param {number} valueToBeAtLeast   Minimum Potential expected value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isAtLeast = function(valueToCheck, valueToBeAtLeast, message) {};

/**
 * Asserts valueToCheck is strictly less than (<) valueToBeBelow.
 * 
 * @param {number} valueToCheck   Actual value.
 * @param {number} valueToBeBelow   Minimum Potential expected value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isBelow = function(valueToCheck, valueToBeBelow, message) {};

/**
 * Asserts valueToCheck is greater than or equal to (>=) valueToBeAtMost.
 * 
 * @param {number} valueToCheck   Actual value.
 * @param {number} valueToBeAtMost   Minimum Potential expected value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isAtMost = function(valueToCheck, valueToBeAtMost, message) {};

/**
 * Asserts that value is true.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isTrue = function(value, message) {};

/**
 * Asserts that value is false.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isFalse = function(value, message) {};

/**
 * Asserts that value is not true.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isNotTrue = function(value, message) {};

/**
 * Asserts that value is not false.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isNotFalse = function(value, message) {};

/**
 * Asserts that value is null.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isNull = function(value, message) {};

/**
 * Asserts that value is not null.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isNotNull = function(value, message) {};

/**
 * Asserts that value is not null.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isNaN = function(value, message) {};

/**
 * Asserts that value is not null.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isNotNaN = function(value, message) {};

/**
 * Asserts that the target is neither null nor undefined.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message    Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.exists = function(value, message) {};

/**
 * Asserts that the target is either null or undefined.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message    Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.notExists = function(value, message) {};

/**
 * Asserts that value is undefined.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isUndefined = function(value, message) {};

/**
 * Asserts that value is not undefined.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isDefined = function(value, message) {};

/**
 * Asserts that value is a function.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isFunction = function(value, message) {};

/**
 * Asserts that value is not a function.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isNotFunction = function(value, message) {};

/**
 * Asserts that value is an object of type 'Object'
 * (as revealed by Object.prototype.toString).
 * 
 * \@remarks The assertion does not match subclassed objects.
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isObject = function(value, message) {};

/**
 * Asserts that value is not an object of type 'Object'
 * (as revealed by Object.prototype.toString).
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isNotObject = function(value, message) {};

/**
 * Asserts that value is an array.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isArray = function(value, message) {};

/**
 * Asserts that value is not an array.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isNotArray = function(value, message) {};

/**
 * Asserts that value is a string.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isString = function(value, message) {};

/**
 * Asserts that value is not a string.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isNotString = function(value, message) {};

/**
 * Asserts that value is a number.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isNumber = function(value, message) {};

/**
 * Asserts that value is not a number.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isNotNumber = function(value, message) {};

/**
 * Asserts that value is a boolean.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isBoolean = function(value, message) {};

/**
 * Asserts that value is not a boolean.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isNotBoolean = function(value, message) {};

/**
 * Asserts that value's type is name, as determined by Object.prototype.toString.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string} name   Potential expected type name of value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.typeOf = function(value, name, message) {};

/**
 * Asserts that value's type is not name, as determined by Object.prototype.toString.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {string} name   Potential expected type name of value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.notTypeOf = function(value, name, message) {};

/**
 * Asserts that value is an instance of constructor.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {!Function} constructor   Potential expected contructor of value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.instanceOf = function(value, constructor, message) {};

/**
 * Asserts that value is not an instance of constructor.
 * 
 * @template T
 * @param {T} value   Actual value.
 * @param {!Function} type
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.notInstanceOf = function(value, type, message) {};

/**
 * Asserts that haystack includes needle.
 * 
 * Asserts that haystack includes needle.
 * 
 * @template T
 * @param {string|!Array<T>} haystack   Container string. /   Container array.
 * @param {string|T} needle   Potential expected substring of haystack. /   Potential value contained in haystack.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.include = function(haystack, needle, message) {};

/**
 * Asserts that haystack does not include needle.
 * 
 * Asserts that haystack does not include needle.
 * 
 * @param {string|!Array<?>} haystack   Container string. /   Container array.
 * @param {?} needle   Potential expected substring of haystack. /   Potential value contained in haystack.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.notInclude = function(haystack, needle, message) {};

/**
 * Asserts that value matches the regular expression regexp.
 * 
 * @param {string} value   Actual value.
 * @param {!RegExp} regexp   Potential match of value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.match = function(value, regexp, message) {};

/**
 * Asserts that value does not match the regular expression regexp.
 * 
 * @param {?} expected
 * @param {!RegExp} regexp   Potential match of value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.notMatch = function(expected, regexp, message) {};

/**
 * Asserts that object has a property named by property.
 * 
 * @template T
 * @param {T} object   Container object.
 * @param {string} property   Potential contained property of object.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.property = function(object, property, message) {};

/**
 * Asserts that object has a property named by property.
 * 
 * @template T
 * @param {T} object   Container object.
 * @param {string} property   Potential contained property of object.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.notProperty = function(object, property, message) {};

/**
 * Asserts that object has a property named by property, which can be a string
 * using dot- and bracket-notation for deep reference.
 * 
 * @template T
 * @param {T} object   Container object.
 * @param {string} property   Potential contained property of object.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.deepProperty = function(object, property, message) {};

/**
 * Asserts that object does not have a property named by property, which can be a
 * string using dot- and bracket-notation for deep reference.
 * 
 * @template T
 * @param {T} object   Container object.
 * @param {string} property   Potential contained property of object.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.notDeepProperty = function(object, property, message) {};

/**
 * Asserts that object has a property named by property with value given by value.
 * 
 * @template T, V
 * @param {T} object   Container object.
 * @param {string} property   Potential contained property of object.
 * @param {V} value   Potential expected property value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.propertyVal = function(object, property, value, message) {};

/**
 * Asserts that object has a property named by property with value given by value.
 * 
 * @template T, V
 * @param {T} object   Container object.
 * @param {string} property   Potential contained property of object.
 * @param {V} value   Potential expected property value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.propertyNotVal = function(object, property, value, message) {};

/**
 * Asserts that object has a property named by property, which can be a string
 * using dot- and bracket-notation for deep reference.
 * 
 * @template T, V
 * @param {T} object   Container object.
 * @param {string} property   Potential contained property of object.
 * @param {V} value   Potential expected property value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.deepPropertyVal = function(object, property, value, message) {};

/**
 * Asserts that object does not have a property named by property, which can be a
 * string using dot- and bracket-notation for deep reference.
 * 
 * @template T, V
 * @param {T} object   Container object.
 * @param {string} property   Potential contained property of object.
 * @param {V} value   Potential expected property value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.deepPropertyNotVal = function(object, property, value, message) {};

/**
 * Asserts that object has a length property with the expected value.
 * 
 * @template T
 * @param {T} object   Container object.
 * @param {number} length   Potential expected length of object.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.lengthOf = function(object, length, message) {};

/**
 * Asserts that fn will throw an error.
 * 
 * Asserts that function will throw an error with message matching regexp.
 * 
 * Asserts that function will throw an error that is an instance of constructor.
 * 
 * Asserts that function will throw an error that is an instance of constructor
 * and an error with message matching regexp.
 * 
 * @param {!Function} fn   Function that may throw.
 * @param {string|!RegExp|!Function=} message_or_regExp_or_constructor   Message to display on error. /   Potential expected message match. /   Potential expected error constructor.
 * @param {string|!RegExp=} message_or_regExp   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.throw = function(fn, message_or_regExp_or_constructor, message_or_regExp) {};

/**
 * Asserts that fn will throw an error.
 * 
 * Asserts that function will throw an error with message matching regexp.
 * 
 * Asserts that function will throw an error that is an instance of constructor.
 * 
 * Asserts that function will throw an error that is an instance of constructor
 * and an error with message matching regexp.
 * 
 * @param {!Function} fn   Function that may throw.
 * @param {string|!RegExp|!Function=} message_or_regExp_or_errType   Message to display on error. /   Potential expected message match.
 * @param {string|!RegExp=} message_or_regExp   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.throws = function(fn, message_or_regExp_or_errType, message_or_regExp) {};

/**
 * Asserts that fn will throw an error.
 * 
 * Asserts that function will throw an error with message matching regexp.
 * 
 * Asserts that function will throw an error that is an instance of constructor.
 * 
 * Asserts that function will throw an error that is an instance of constructor
 * and an error with message matching regexp.
 * 
 * @param {!Function} fn   Function that may throw.
 * @param {string|!RegExp|!Function=} message_or_regExp_or_errType   Message to display on error. /   Potential expected message match.
 * @param {string|!RegExp=} message_or_regExp   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.Throw = function(fn, message_or_regExp_or_errType, message_or_regExp) {};

/**
 * Asserts that fn will not throw an error.
 * 
 * Asserts that function will throw an error with message matching regexp.
 * 
 * Asserts that function will throw an error that is an instance of constructor.
 * 
 * Asserts that function will throw an error that is an instance of constructor
 * and an error with message matching regexp.
 * 
 * @param {!Function} fn   Function that may throw.
 * @param {string|!RegExp|!Function=} message_or_regExp_or_errType   Message to display on error. /   Potential expected message match.
 * @param {string|!RegExp=} message_or_regExp   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.doesNotThrow = function(fn, message_or_regExp_or_errType, message_or_regExp) {};

/**
 * Compares two values using operator.
 * 
 * @param {(string|number|boolean|!Date)} val1   Left value during comparison.
 * @param {string} operator   Comparison operator.
 * @param {(string|number|boolean|!Date)} val2   Right value during comparison.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.operator = function(val1, operator, val2, message) {};

/**
 * Asserts that the target is equal to expected, to within a +/- delta range.
 * 
 * @param {number} actual   Actual value
 * @param {number} expected   Potential expected value.
 * @param {number} delta   Maximum differenced between values.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.closeTo = function(actual, expected, delta, message) {};

/**
 * Asserts that the target is equal to expected, to within a +/- delta range.
 * 
 * @param {number} act
 * @param {number} exp
 * @param {number} delta   Maximum differenced between values.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.approximately = function(act, exp, delta, message) {};

/**
 * Asserts that set1 and set2 have the same members. Order is not take into account.
 * 
 * @template T
 * @param {!Array<T>} set1   Actual set of values.
 * @param {!Array<T>} set2   Potential expected set of values.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.sameMembers = function(set1, set2, message) {};

/**
 * Asserts that set1 and set2 have the same members using deep equality checking.
 * Order is not take into account.
 * 
 * @template T
 * @param {!Array<T>} set1   Actual set of values.
 * @param {!Array<T>} set2   Potential expected set of values.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.sameDeepMembers = function(set1, set2, message) {};

/**
 * Asserts that set1 and set2 have the same members in the same order.
 * Uses a strict equality check (===).
 * 
 * @template T
 * @param {!Array<T>} set1   Actual set of values.
 * @param {!Array<T>} set2   Potential expected set of values.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.sameOrderedMembers = function(set1, set2, message) {};

/**
 * Asserts that set1 and set2 don’t have the same members in the same order.
 * Uses a strict equality check (===).
 * 
 * @template T
 * @param {!Array<T>} set1   Actual set of values.
 * @param {!Array<T>} set2   Potential expected set of values.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.notSameOrderedMembers = function(set1, set2, message) {};

/**
 * Asserts that set1 and set2 have the same members in the same order.
 * Uses a deep equality check.
 * 
 * @template T
 * @param {!Array<T>} set1   Actual set of values.
 * @param {!Array<T>} set2   Potential expected set of values.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.sameDeepOrderedMembers = function(set1, set2, message) {};

/**
 * Asserts that set1 and set2 don’t have the same members in the same order.
 * Uses a deep equality check.
 * 
 * @template T
 * @param {!Array<T>} set1   Actual set of values.
 * @param {!Array<T>} set2   Potential expected set of values.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.notSameDeepOrderedMembers = function(set1, set2, message) {};

/**
 * Asserts that subset is included in superset in the same order beginning with the first element in superset.
 * Uses a strict equality check (===).
 * 
 * @template T
 * @param {!Array<T>} superset   Actual set of values.
 * @param {!Array<T>} subset   Potential contained set of values.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.includeOrderedMembers = function(superset, subset, message) {};

/**
 * Asserts that subset isn’t included in superset in the same order beginning with the first element in superset.
 * Uses a strict equality check (===).
 * 
 * @template T
 * @param {!Array<T>} superset   Actual set of values.
 * @param {!Array<T>} subset   Potential contained set of values.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.notIncludeOrderedMembers = function(superset, subset, message) {};

/**
 * Asserts that subset is included in superset in the same order beginning with the first element in superset.
 * Uses a deep equality check.
 * 
 * @template T
 * @param {!Array<T>} superset   Actual set of values.
 * @param {!Array<T>} subset   Potential contained set of values.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.includeDeepOrderedMembers = function(superset, subset, message) {};

/**
 * Asserts that subset isn’t included in superset in the same order beginning with the first element in superset.
 * Uses a deep equality check.
 * 
 * @template T
 * @param {!Array<T>} superset   Actual set of values.
 * @param {!Array<T>} subset   Potential contained set of values.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.notIncludeDeepOrderedMembers = function(superset, subset, message) {};

/**
 * Asserts that subset is included in superset. Order is not take into account.
 * 
 * @template T
 * @param {!Array<T>} superset   Actual set of values.
 * @param {!Array<T>} subset   Potential contained set of values.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.includeMembers = function(superset, subset, message) {};

/**
 * Asserts that subset is included in superset using deep equality checking.
 * Order is not take into account.
 * 
 * @template T
 * @param {!Array<T>} superset   Actual set of values.
 * @param {!Array<T>} subset   Potential contained set of values.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.includeDeepMembers = function(superset, subset, message) {};

/**
 * Asserts that non-object, non-array value inList appears in the flat array list.
 * 
 * @template T
 * @param {T} inList   Value expected to be in the list.
 * @param {!Array<T>} list   List of values.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.oneOf = function(inList, list, message) {};

/**
 * Asserts that a function changes the value of a property.
 * 
 * @template T
 * @param {!Function} modifier   Function to run.
 * @param {T} object   Container object.
 * @param {string} property   Property of object expected to be modified.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.changes = function(modifier, object, property, message) {};

/**
 * Asserts that a function does not change the value of a property.
 * 
 * @template T
 * @param {!Function} modifier   Function to run.
 * @param {T} object   Container object.
 * @param {string} property   Property of object expected not to be modified.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.doesNotChange = function(modifier, object, property, message) {};

/**
 * Asserts that a function increases an object property.
 * 
 * @template T
 * @param {!Function} modifier   Function to run.
 * @param {T} object   Container object.
 * @param {string} property   Property of object expected to be increased.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.increases = function(modifier, object, property, message) {};

/**
 * Asserts that a function does not increase an object property.
 * 
 * @template T
 * @param {!Function} modifier   Function to run.
 * @param {T} object   Container object.
 * @param {string} property   Property of object expected not to be increased.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.doesNotIncrease = function(modifier, object, property, message) {};

/**
 * Asserts that a function decreases an object property.
 * 
 * @template T
 * @param {!Function} modifier   Function to run.
 * @param {T} object   Container object.
 * @param {string} property   Property of object expected to be decreased.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.decreases = function(modifier, object, property, message) {};

/**
 * Asserts that a function does not decrease an object property.
 * 
 * @template T
 * @param {!Function} modifier   Function to run.
 * @param {T} object   Container object.
 * @param {string} property   Property of object expected not to be decreased.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.doesNotDecrease = function(modifier, object, property, message) {};

/**
 * Asserts if value is not a false value, and throws if it is a true value.
 * 
 * \@remarks This is added to allow for chai to be a drop-in replacement for
 *          Node’s assert class.
 * @template T
 * @param {T} object   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.ifError = function(object, message) {};

/**
 * Asserts that object is extensible (can have new properties added to it).
 * 
 * @template T
 * @param {T} object   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isExtensible = function(object, message) {};

/**
 * Asserts that object is extensible (can have new properties added to it).
 * 
 * @template T
 * @param {T} object   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.extensible = function(object, message) {};

/**
 * Asserts that object is not extensible.
 * 
 * @template T
 * @param {T} object   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isNotExtensible = function(object, message) {};

/**
 * Asserts that object is not extensible.
 * 
 * @template T
 * @param {T} object   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.notExtensible = function(object, message) {};

/**
 * Asserts that object is sealed (can have new properties added to it
 * and its existing properties cannot be removed).
 * 
 * @template T
 * @param {T} object   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isSealed = function(object, message) {};

/**
 * Asserts that object is sealed (can have new properties added to it
 * and its existing properties cannot be removed).
 * 
 * @template T
 * @param {T} object   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.sealed = function(object, message) {};

/**
 * Asserts that object is not sealed.
 * 
 * @template T
 * @param {T} object   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isNotSealed = function(object, message) {};

/**
 * Asserts that object is not sealed.
 * 
 * @template T
 * @param {T} object   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.notSealed = function(object, message) {};

/**
 * Asserts that object is frozen (cannot have new properties added to it
 * and its existing properties cannot be removed).
 * 
 * @template T
 * @param {T} object   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isFrozen = function(object, message) {};

/**
 * Asserts that object is frozen (cannot have new properties added to it
 * and its existing properties cannot be removed).
 * 
 * @template T
 * @param {T} object   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.frozen = function(object, message) {};

/**
 * Asserts that object is not frozen (cannot have new properties added to it
 * and its existing properties cannot be removed).
 * 
 * @template T
 * @param {T} object   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isNotFrozen = function(object, message) {};

/**
 * Asserts that object is not frozen (cannot have new properties added to it
 * and its existing properties cannot be removed).
 * 
 * @template T
 * @param {T} object   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.notFrozen = function(object, message) {};

/**
 * Asserts that the target does not contain any values. For arrays and
 * strings, it checks the length property. For Map and Set instances, it
 * checks the size property. For non-function objects, it gets the count
 * of own enumerable string keys.
 * 
 * @template T
 * @param {T} object   Actual value.
 * @param {string=} message   Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isEmpty = function(object, message) {};

/**
 * Asserts that the target contains values. For arrays and strings, it checks
 * the length property. For Map and Set instances, it checks the size property.
 * For non-function objects, it gets the count of own enumerable string keys.
 * 
 * @template T
 * @param {T} object   Object to test.
 * @param {string=} message    Message to display on error.
 * @return {void}
 */
Chai.Assert.prototype.isNotEmpty = function(object, message) {};
/**
 * @record
 * @struct
 */
Chai.Config = function() {};
 /** @type {boolean} */
Chai.Config.prototype.includeStack;
 /** @type {boolean} */
Chai.Config.prototype.showDiff;
 /** @type {number} */
Chai.Config.prototype.truncateThreshold;

/**
 * @constructor
 * @struct
 * @param {string} message
 * @param {?=} _props
 * @param {!Function=} ssf
 */
Chai.AssertionError = function(message, _props, ssf) {};
 /** @type {string} */
Chai.AssertionError.prototype.name;
 /** @type {string} */
Chai.AssertionError.prototype.message;
 /** @type {boolean} */
Chai.AssertionError.prototype.showDiff;
 /** @type {string} */
Chai.AssertionError.prototype.stack;
 /** @type {!Chai.ChaiStatic} */
var chai;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "chai"
/** @const */
tsickle_declare_module.chai = {};

/* TODO: ExportAssignment in tsickle_declare_module.chai */
 /** @type {!Chai.Assertion} */
Object.prototype.should;
