/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jquery.color/index.d.ts:
/**
 * @record
 * @struct
 */
function JQueryColor() {}

/**
 * Returns the red component of the color (integer from 0 - 255).
 * Returns a copy of the color object with the red set to val.
 * Returns a copy of the color object with the red set to val.
 * @param {number|string=} val
 * @return {number|!JQueryColor}
 */
JQueryColor.prototype.red = function(val) {};

/**
 * Returns the green component of the color (integer from 0 - 255).
 * Returns a copy of the color object with the green set to val.
 * Returns a copy of the color object with the green set to val.
 * @param {number|string=} val
 * @return {number|!JQueryColor}
 */
JQueryColor.prototype.green = function(val) {};

/**
 * Returns the blue component of the color (integer from 0 - 255).
 * Returns a copy of the color object with the blue set to val.
 * Returns a copy of the color object with the blue set to val.
 * @param {number|string=} val
 * @return {number|!JQueryColor}
 */
JQueryColor.prototype.blue = function(val) {};

/**
 * Returns the alpha value of this color (float from 0.0 - 1.0).
 * Returns a copy of the color object with the alpha set to val.
 * Returns a copy of the color object with the alpha set to val.
 * @param {number|string=} val
 * @return {number|!JQueryColor}
 */
JQueryColor.prototype.alpha = function(val) {};

/**
 * Returns the hue component of the color (integer from 0 - 359).
 * Returns a copy of the color object with the hue set to val.
 * Returns a copy of the color object with the hue set to val.
 * @param {number|string=} val
 * @return {number|!JQueryColor}
 */
JQueryColor.prototype.hue = function(val) {};

/**
 * Returns the saturation component of the color (float from 0.0 - 1.0).
 * Returns a copy of the color object with the saturation set to val.
 * Returns a copy of the color object with the saturation set to val.
 * @param {number|string=} val
 * @return {number|!JQueryColor}
 */
JQueryColor.prototype.saturation = function(val) {};

/**
 * Returns the lightness component of the color (float from 0.0 - 1.0).
 * Returns a copy of the color object with the lightness set to val.
 * Returns a copy of the color object with the lightness set to val.
 * @param {number|string=} val
 * @return {number|!JQueryColor}
 */
JQueryColor.prototype.lightness = function(val) {};

/**
 * Returns a rgba "tuple" [ red, green, blue, alpha ].
 * Returns a copy of the color with any defined values set to the new value.
 * Returns a copy of the color with any defined values set to the new value.
 * Returns a copy of the color with any defined values set to the new value.
 * @param {number|!RgbaColor|!Array<number>=} red_or_val_or_vals
 * @param {number=} green
 * @param {number=} blue
 * @param {number=} alpha
 * @return {!Array<number>|!JQueryColor}
 */
JQueryColor.prototype.rgba = function(red_or_val_or_vals, green, blue, alpha) {};

/**
 * Returns a HSL tuple [ hue, saturation, lightness, alpha ].
 * Returns a copy of the color with any defined values set to the new value.
 * Returns a copy of the color with any defined values set to the new value.
 * Returns a copy of the color with any defined values set to the new value.
 * @param {number|!HslaColor|!Array<number>=} hue_or_val_or_vals
 * @param {number=} saturation
 * @param {number=} lightness
 * @param {number=} alpha
 * @return {!Array<number>|!JQueryColor}
 */
JQueryColor.prototype.hsla = function(hue_or_val_or_vals, saturation, lightness, alpha) {};

/**
 * Returns a CSS string "rgba(255, 255, 255, 0.4)".
 * @return {string}
 */
JQueryColor.prototype.toRgbaString = function() {};

/**
 * Returns a css string "hsla(330, 75%, 25%, 0.4)".
 * @return {string}
 */
JQueryColor.prototype.toHslaString = function() {};

/**
 * Returns a css string "#abcdef", with "includeAlpha" uses "#rrggbbaa" (alpha *= 255).
 * @param {boolean=} includeAlpha
 * @return {string}
 */
JQueryColor.prototype.toHexString = function(includeAlpha) {};

/**
 * The color distance (0.0 - 1.0) of the way between this color and othercolor.
 * @param {!JQueryColor} othercolor
 * @param {number} distance
 * @return {!JQueryColor}
 */
JQueryColor.prototype.transition = function(othercolor, distance) {};

/**
 * Will apply this color on top of the other color using alpha blending.
 * @param {!JQueryColor} othercolor
 * @return {void}
 */
JQueryColor.prototype.blend = function(othercolor) {};

/**
 * Checks if two colors are equal.
 * @param {!JQueryColor} otherColor
 * @return {boolean}
 */
JQueryColor.prototype.is = function(otherColor) {};
/**
 * @record
 * @struct
 */
function HslaColor() {}
 /** @type {number} */
HslaColor.prototype.hue;
 /** @type {number} */
HslaColor.prototype.saturation;
 /** @type {number} */
HslaColor.prototype.lightness;
 /** @type {number} */
HslaColor.prototype.alpha;
/**
 * @record
 * @struct
 */
function RgbaColor() {}
 /** @type {number} */
RgbaColor.prototype.red;
 /** @type {number} */
RgbaColor.prototype.green;
 /** @type {number} */
RgbaColor.prototype.blue;
 /** @type {number} */
RgbaColor.prototype.alpha;

/**
 * @param {!HslaColor|!RgbaColor|string} color
 * @return {!JQueryColor}
 */
JQueryStatic.prototype.Color = function(color) {};
