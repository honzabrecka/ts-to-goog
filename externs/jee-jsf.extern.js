/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jee-jsf/index.d.ts:
/** @const */
var jsf = {};
/** @const */
jsf.ajax = {};
/**
 * @record
 * @struct
 */
jsf.ajax.RequestData = function() {};
 /** @type {string} */
jsf.ajax.RequestData.prototype.status;
 /** @type {string} */
jsf.ajax.RequestData.prototype.description;
/**
 * @record
 * @struct
 */
jsf.ajax.RequestOptions = function() {};
 /** @type {!String} */
jsf.ajax.RequestOptions.prototype.execute;
 /** @type {!String} */
jsf.ajax.RequestOptions.prototype.render;
 /** @type {?} */
jsf.ajax.RequestOptions.prototype.params;

/* TODO: PropertySignature: jsf.ajax.'javax.faces.behavior.event' */

/**
 * function to callback for event
 * @param {function(!jsf.ajax.RequestData): void} callback the callback function
 * @return {void}
 */
jsf.ajax.RequestOptions.prototype.onevent = function(callback) {};

/**
 * function to callback for error
 * @param {function(!jsf.ajax.RequestData): void} callback the callback function
 * @return {void}
 */
jsf.ajax.RequestOptions.prototype.onerror = function(callback) {};

/**
 * Register a callback for event handling.
 * @param {function(!jsf.ajax.RequestData): void} callback a reference to a function to call on an event
 * @return {void}
 */
jsf.ajax.addOnEvent = function(callback) {};

/**
 * Register a callback for error handling.
 * @param {function(!jsf.ajax.RequestData): void} callback a reference to a function to call on an error
 * @return {void}
 */
jsf.ajax.addOnError = function(callback) {};

/**
 * Send an asynchronous Ajax request to the server.
 * @param {?} source The DOM element that triggered this Ajax request, or an id string of the element to use as the triggering element.
 * @param {!String=} event The DOM event that triggered this Ajax request. The event argument is optional.
 * @param {!jsf.ajax.RequestOptions=} options The set of available options that can be sent as request parameters to control client and/or server side request processing.
 * @return {void}
 */
jsf.ajax.request = function(source, event, options) {};

/**
 * Receive an Ajax response from the server.
 * @throws EmptyResponse error if request contains no data
 * @param {?} request The XMLHttpRequest instance that contains the status code and response message from the server.
 * @param {?} context An object containing the request context, including the following properties: the source element, per call onerror callback function, and per call onevent callback function.
 * @return {void}
 */
jsf.ajax.response = function(request, context) {};
