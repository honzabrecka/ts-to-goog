/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/log4javascript/index.d.ts:
/** @const */
var log4javascript = {};

/**
 * Returns a logger with the specified name, creating it if a logger with that name does not already exist.
 * If no name is specified, a logger is returned with name [anonymous], and subsequent calls to getLogger()
 * (with no logger name specified) will return this same logger object.
 * Note that the names [anonymous], [default], [null] and root are reserved for the anonymous logger, default logger,
 * null logger and root logger respectively.
 * @param {string=} loggerName
 * @return {!log4javascript.Logger}
 */
log4javascript.getLogger = function(loggerName) {};

/**
 * Convenience method that returns the default logger. The default logger has a single appender: a PopUpAppender with the default
 * layout, width and height, and with focusPopUp set to false and lazyInit, useOldPopUp and complainAboutPopUpBlocking all set to true.
 * @return {!log4javascript.Logger}
 */
log4javascript.getDefaultLogger = function() {};

/**
 * Returns an empty logger with no appenders. Useful for disabling all logging.
 * @return {!log4javascript.Logger}
 */
log4javascript.getNullLogger = function() {};

/**
 * Returns the root logger from which all other loggers derive.
 * @return {!log4javascript.Logger}
 */
log4javascript.getRootLogger = function() {};

/**
 * Resets the all loggers to their default level.
 * @return {void}
 */
log4javascript.resetConfiguration = function() {};

/**
 * Enables or disables all logging, depending on enabled.
 * @param {boolean} enabled
 * @return {void}
 */
log4javascript.setEnabled = function(enabled) {};

/**
 * Returns true or false depending on whether logging is enabled.
 * @return {boolean}
 */
log4javascript.isEnabled = function() {};

/**
 * Adds a function to be called when an event of the type specified occurs in log4javascript.
 * Supported event types are load (occurs once the page has loaded) and error.
 * @param {string} eventType
 * @param {function(?, string, ?): void} listener
 * @return {void}
 */
log4javascript.addEventListener = function(eventType, listener) {};

/**
 * Removes the event listener function supplied for the event of the type specified.
 * @param {string} eventType
 * @param {function(?, string, ?): void} listener
 * @return {void}
 */
log4javascript.removeEventListener = function(eventType, listener) {};

/**
 * Raises an event of type eventType on the log4javascript object. Each of the listeners for this type of event
 * (registered via addEventListener) is called and passed eventArgs as the third parameter.
 * @param {string} eventType
 * @param {?} eventArgs
 * @return {void}
 */
log4javascript.dispatchEvent = function(eventType, eventArgs) {};

/**
 * Used internally to specify the types of events that the log4javascript object can raise.
 * @param {!Array<string>} eventTypes
 * @return {void}
 */
log4javascript.setEventTypes = function(eventTypes) {};

/**
 * Enables or disables displaying of error stack traces, depending on show. By default, stack traces are not displayed.
 * (Only works in Firefox)
 * @param {boolean} show
 * @return {void}
 */
log4javascript.setShowStackTraces = function(show) {};

/**
 * This evaluates the given expression in the log4javascript scope, thus allowing scripts to access internal
 * log4javascript variables and functions. This was written for the purposes of automated testing but could be used by
 * custom extensions to log4javascript.
 * @param {string} expr
 * @return {?}
 */
log4javascript.evalInScope = function(expr) {};

/**
 * @constructor
 * @struct
 * @param {number} level
 * @param {string} name
 */
log4javascript.Level = function(level, name) {};
 /** @type {!log4javascript.Level} */
log4javascript.Level.ALL;
 /** @type {!log4javascript.Level} */
log4javascript.Level.TRACE;
 /** @type {!log4javascript.Level} */
log4javascript.Level.DEBUG;
 /** @type {!log4javascript.Level} */
log4javascript.Level.INFO;
 /** @type {!log4javascript.Level} */
log4javascript.Level.WARN;
 /** @type {!log4javascript.Level} */
log4javascript.Level.ERROR;
 /** @type {!log4javascript.Level} */
log4javascript.Level.FATAL;
 /** @type {!log4javascript.Level} */
log4javascript.Level.OFF;

/**
 * @return {string}
 */
log4javascript.Level.prototype.toString = function() {};

/**
 * @param {!log4javascript.Level} level
 * @return {boolean}
 */
log4javascript.Level.prototype.equals = function(level) {};

/**
 * @param {!log4javascript.Level} level
 * @return {boolean}
 */
log4javascript.Level.prototype.isGreaterOrEqual = function(level) {};
/**
 * @constructor
 * @struct
 */
log4javascript.Logger = function() {};
 /** @type {string} */
log4javascript.Logger.prototype.name;

/**
 * Adds the given appender.
 * @param {!log4javascript.Appender} appender
 * @return {void}
 */
log4javascript.Logger.prototype.addAppender = function(appender) {};

/**
 * Removes the given appender.
 * @param {!log4javascript.Appender} appender
 * @return {void}
 */
log4javascript.Logger.prototype.removeAppender = function(appender) {};

/**
 * Clears all appenders for the current logger.
 * @return {void}
 */
log4javascript.Logger.prototype.removeAllAppenders = function() {};

/**
 * Returns all appenders which will log a message.
 * @return {!Array<!log4javascript.Appender>}
 */
log4javascript.Logger.prototype.getEffectiveAppenders = function() {};

/**
 * Sets the level. Log messages of a lower level than level will not be logged. Default value is DEBUG.
 * @param {!log4javascript.Level} level
 * @return {void}
 */
log4javascript.Logger.prototype.setLevel = function(level) {};

/**
 * Returns the level explicitly set for this logger or null if none has been set.
 * @return {!log4javascript.Level}
 */
log4javascript.Logger.prototype.getLevel = function() {};

/**
 * Returns the level at which the logger is operating. This is either the level explicitly set on the logger or, if no level
 * has been set, the effective level of the logger's parent.
 * @return {!log4javascript.Level}
 */
log4javascript.Logger.prototype.getEffectiveLevel = function() {};

/**
 * Sets whether appender additivity is enabled (the default) or disabled. If set to false, this particular logger will not
 * inherit any appenders form its ancestors. Any descendant of this logger, however, will inherit from its ancestors as
 * normal, unless its own additivity is explicitly set to false.
 * Default value is true.
 * @param {boolean} additivity
 * @return {void}
 */
log4javascript.Logger.prototype.setAdditivity = function(additivity) {};

/**
 * Returns whether additivity is enabled for this logger.
 * @return {boolean}
 */
log4javascript.Logger.prototype.getAdditivity = function() {};

/**
 * Generic logging method used by wrapper methods such as debug, error etc.
 * @param {!log4javascript.Level} level
 * @param {!Array<?>} params
 * @return {void}
 */
log4javascript.Logger.prototype.log = function(level, params) {};

/**
 * Logs one or more messages and optionally an error at level TRACE.
 * @param {...?} messages
 * @return {void}
 */
log4javascript.Logger.prototype.trace = function(messages) {};

/**
 * Logs one or more messages and optionally an error at level DEBUG.
 * @param {...?} messages
 * @return {void}
 */
log4javascript.Logger.prototype.debug = function(messages) {};

/**
 * Logs one or more messages and optionally an error at level INFO.
 * @param {...?} messages
 * @return {void}
 */
log4javascript.Logger.prototype.info = function(messages) {};

/**
 * Logs one or more messages and optionally an error at level WARN.
 * @param {...?} messages
 * @return {void}
 */
log4javascript.Logger.prototype.warn = function(messages) {};

/**
 * Logs one or more messages and optionally an error at level ERROR.
 * @param {...?} messages
 * @return {void}
 */
log4javascript.Logger.prototype.error = function(messages) {};

/**
 * Logs one or more messages and optionally an error at level FATAL.
 * @param {...?} messages
 * @return {void}
 */
log4javascript.Logger.prototype.fatal = function(messages) {};

/**
 * Returns whether the logger is enabled for the specified level.
 * @param {!log4javascript.Level} level
 * @param {!Error} exception
 * @return {boolean}
 */
log4javascript.Logger.prototype.isEnabledFor = function(level, exception) {};

/**
 * Returns whether the logger is enabled for TRACE messages.
 * @return {boolean}
 */
log4javascript.Logger.prototype.isTraceEnabled = function() {};

/**
 * Returns whether the logger is enabled for DEBUG messages.
 * @return {boolean}
 */
log4javascript.Logger.prototype.isDebugEnabled = function() {};

/**
 * Returns whether the logger is enabled for INFO messages.
 * @return {boolean}
 */
log4javascript.Logger.prototype.isInfoEnabled = function() {};

/**
 * Returns whether the logger is enabled for WARN messages.
 * @return {boolean}
 */
log4javascript.Logger.prototype.isWarnEnabled = function() {};

/**
 * Returns whether the logger is enabled for ERROR messages.
 * @return {boolean}
 */
log4javascript.Logger.prototype.isErrorEnabled = function() {};

/**
 * Returns whether the logger is enabled for FATAL messages.
 * @return {boolean}
 */
log4javascript.Logger.prototype.isFatalEnabled = function() {};

/**
 * Starts a new group of log messages. In appenders that support grouping (currently PopUpAppender and InPageAppender),
 * a group appears as an expandable section in the console, labelled with the name specified. Specifying initiallyExpanded
 * determines whether the group starts off expanded (the default is true). Groups may be nested.
 * @param {string} name
 * @param {boolean=} initiallyExpanded
 * @return {void}
 */
log4javascript.Logger.prototype.group = function(name, initiallyExpanded) {};

/**
 * Ends the current group. If there is no group then this function has no effect.
 * @return {void}
 */
log4javascript.Logger.prototype.groupEnd = function() {};

/**
 * Starts a timer with name name. When the timer is ended with a call to timeEnd using the same name, the amount of time
 * that has elapsed in milliseconds since the timer was started is logged at level level. If not level is supplied, the level
 * defaults to INFO.
 * @param {string} name
 * @param {!log4javascript.Level=} level
 * @return {void}
 */
log4javascript.Logger.prototype.time = function(name, level) {};

/**
 * Ends the timer with name name and logs the time elapsed.
 * @param {string} name
 * @return {void}
 */
log4javascript.Logger.prototype.timeEnd = function(name) {};

/**
 * Asserts the given expression is true or evaluates to true. If so, nothing is logged. If not, an error is logged at the ERROR level.
 * @param {?} expr
 * @return {void}
 */
log4javascript.Logger.prototype.assert = function(expr) {};

/**
 * @constructor
 * @struct
 * @param {!log4javascript.Logger} logger
 * @param {!Date} timeStamp
 * @param {!log4javascript.Level} level
 * @param {!Array<string>} messages
 * @param {!Error=} exception
 */
log4javascript.LoggingEvent = function(logger, timeStamp, level, messages, exception) {};
 /** @type {!log4javascript.Logger} */
log4javascript.LoggingEvent.prototype.logger;
 /** @type {!Date} */
log4javascript.LoggingEvent.prototype.timeStamp;
 /** @type {number} */
log4javascript.LoggingEvent.prototype.timeStampInMilliseconds;
 /** @type {number} */
log4javascript.LoggingEvent.prototype.timeStampInSeconds;
 /** @type {number} */
log4javascript.LoggingEvent.prototype.milliseconds;
 /** @type {!log4javascript.Level} */
log4javascript.LoggingEvent.prototype.level;
 /** @type {!Array<?>} */
log4javascript.LoggingEvent.prototype.messages;
 /** @type {!Error} */
log4javascript.LoggingEvent.prototype.exception;
 /** @type {function(): string} */
log4javascript.LoggingEvent.prototype.getThrowableStrRep;
 /** @type {function(): string} */
log4javascript.LoggingEvent.prototype.getCombinedMessages;
 /** @type {function(): string} */
log4javascript.LoggingEvent.prototype.toString;
/**
 * @constructor
 * @struct
 */
log4javascript.Appender = function() {};

/**
 * Checks the logging event's level is at least as severe as the appender's threshold and calls the appender's append method if so.
 * This method should not in general be used directly or overridden.
 * @param {!log4javascript.LoggingEvent} loggingEvent
 * @return {void}
 */
log4javascript.Appender.prototype.doAppend = function(loggingEvent) {};

/**
 * Appender-specific method to append a log message. Every appender object should implement this method.
 * @param {!log4javascript.LoggingEvent} loggingEvent
 * @return {void}
 */
log4javascript.Appender.prototype.append = function(loggingEvent) {};

/**
 * Sets the appender's layout.
 * @param {!log4javascript.Layout} layout
 * @return {void}
 */
log4javascript.Appender.prototype.setLayout = function(layout) {};

/**
 * Returns the appender's layout.
 * @return {!log4javascript.Layout}
 */
log4javascript.Appender.prototype.getLayout = function() {};

/**
 * Sets the appender's threshold. Log messages of level less severe than this threshold will not be logged.
 * @param {!log4javascript.Level} level
 * @return {void}
 */
log4javascript.Appender.prototype.setThreshold = function(level) {};

/**
 * Returns the appender's threshold.
 * @return {!log4javascript.Level}
 */
log4javascript.Appender.prototype.getThreshold = function() {};

/**
 * Returns a string representation of the appender. Every appender object should implement this method.
 * @return {string}
 */
log4javascript.Appender.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * Constructor
 */
log4javascript.AlertAppender = function() {};

/**
 * @constructor
 * @struct
 * Constructor
 * @param {string} url The URL to which log messages should be sent. Note that this is subject to the usual Ajax restrictions:
 * the URL should be in the same domain as that of the page making the request.
 * @param {boolean=} withCredentials Specifies whether cookies should be sent with each request.
 */
log4javascript.AjaxAppender = function(url, withCredentials) {};

/**
 * Whether to send all remaining unsent log messages to the server when the page unloads.
 * Since version 1.4.3, the default value is false. Previously the default was true.
 * @param {boolean} sendAllOnUnload
 * @return {void}
 */
log4javascript.AjaxAppender.prototype.setSendAllOnUnload = function(sendAllOnUnload) {};

/**
 * Returns whether all remaining unsent log messages are sent to the server when the page unloads.
 * @return {boolean}
 */
log4javascript.AjaxAppender.prototype.isSendAllOnUnload = function() {};

/**
 * Sets the post variable name whose value will the formatted log message(s) for each request.
 * Default value is data.
 * @param {string} postVarName
 * @return {void}
 */
log4javascript.AjaxAppender.prototype.setPostVarName = function(postVarName) {};

/**
 * Returns the post variable name whose value will the formatted log message(s) for each request.
 * @return {string}
 */
log4javascript.AjaxAppender.prototype.getPostVarName = function() {};

/**
 * Whether to send log messages to the server at regular, timed intervals.
 * Default value is false.
 * @param {boolean} timed
 * @return {void}
 */
log4javascript.AjaxAppender.prototype.setTimed = function(timed) {};

/**
 * Returns whether log messages are sent to the server at regular, timed intervals.
 * @return {boolean}
 */
log4javascript.AjaxAppender.prototype.isTimed = function() {};

/**
 * Sets whether to wait for a response from a previous HTTP request from this appender before sending the next log
 * message / batch of messages.
 * Default value is false.
 * @param {boolean} waitForResponse
 * @return {void}
 */
log4javascript.AjaxAppender.prototype.setWaitForResponse = function(waitForResponse) {};

/**
 * Returns whether the appender waits for a response from a previous HTTP request from this appender before sending the next
 * log message / batch of messages.
 * @return {boolean}
 */
log4javascript.AjaxAppender.prototype.isWaitForResponse = function() {};

/**
 * Sets the number of log messages to send in each request. If not specified, defaults to 1.
 * @param {number} batchSize
 * @return {void}
 */
log4javascript.AjaxAppender.prototype.setBatchSize = function(batchSize) {};

/**
 * Returns the number of log messages sent in each request. See above for more details.
 * @return {number}
 */
log4javascript.AjaxAppender.prototype.getBatchSize = function() {};

/**
 * Sets the length of time in milliseconds between each sending of queued log messages.
 * @param {number} timerInterval
 * @return {void}
 */
log4javascript.AjaxAppender.prototype.setTimerInterval = function(timerInterval) {};

/**
 * Returns the length of time in milliseconds between each sending of queued log messages. See above for more details.
 * @return {number}
 */
log4javascript.AjaxAppender.prototype.getTimerInterval = function() {};

/**
 * Sets the function that is called whenever a successful request is made, called at the point at which the response is
 * received. This feature can be used to confirm whether a request has been successful and act accordingly.
 * A single parameter, xmlHttp, is passed to the callback function. This is the XMLHttpRequest object that performed the
 * request.
 * @param {function(!XMLHttpRequest): void} requestSuccessCallback
 * @return {void}
 */
log4javascript.AjaxAppender.prototype.setRequestSuccessCallback = function(requestSuccessCallback) {};

/**
 * Sets the function that is called whenever any kind of failure occurs in the appender, including browser deficiencies or
 * configuration errors (e.g. supplying a non-existent URL to the appender). This feature can be used to handle
 * AjaxAppender-specific errors.
 * A single parameter, message, is passed to the callback function. This is the error-specific message that caused the failure.
 * @param {function(string): void} failCallback
 * @return {void}
 */
log4javascript.AjaxAppender.prototype.setFailCallback = function(failCallback) {};

/**
 * Sets the session id sent to the server each time a request is made.
 * @param {string} sessionId
 * @return {void}
 */
log4javascript.AjaxAppender.prototype.setSessionId = function(sessionId) {};

/**
 * Returns the session id sent to the server each time a request is made.
 * @return {string}
 */
log4javascript.AjaxAppender.prototype.getSessionId = function() {};

/**
 * Adds an HTTP header that is sent with each request.
 * @param {string} name
 * @param {string} value
 * @return {void}
 */
log4javascript.AjaxAppender.prototype.addHeader = function(name, value) {};

/**
 * Returns an array of the additional headers that are sent with each HTTP request. Each array item is an object with
 * properties name and value.
 * @return {!Array<{name: string, value: string}>}
 */
log4javascript.AjaxAppender.prototype.getHeaders = function() {};

/**
 * Sends all log messages in the queue. If log messages are batched then only completed batches are sent.
 * @return {void}
 */
log4javascript.AjaxAppender.prototype.sendAll = function() {};

/**
 * @constructor
 * @struct
 * Constructor
 * @param {boolean=} lazyInit Set this to true to open the pop-up only when the first log message reaches the appender. Otherwise, the
 * pop-up window opens as soon as the appender is created. If not specified, defaults to false.
 * @param {boolean=} initiallyMinimized Whether the console window should start off hidden / minimized. If not specified, defaults to false.
 * @param {boolean=} useDocumentWrite Specifies how the console window is created. By default, the console window is created dynamically
 * using document's write method. This has the advantage of keeping all the code in one single JavaScript file. However,
 * if your page sets document.domain then the browser prevents script access to a window unless it too has the same value
 * set for document.domain. To get round this issue, you can set useDocumentWrite to false and log4javascript will instead
 * use the external HTML file console.html (or console_uncompressed.html if you're using an uncompressed version of
 * log4javascript.js), which must be placed in the same directory as your log4javascript.js file.
 * Note that if useDocumentWrite is set to true, the old pop-up window will always be closed and a new one created whenever
 * the page is refreshed, even if setUseOldPopUp(true) has been called.
 * In general it's simpler to use the document.write method, so unless your page needs to set document.domain,
 * useDocumentWrite should be set to true.
 * If not specified, defaults to true.
 * @param {number=} width The outer width in pixels of the pop-up window. If not specified, defaults to 600.
 * @param {number=} height The outer height in pixels of the pop-up window. If not specified, defaults to 400.
 */
log4javascript.PopUpAppender = function(lazyInit, initiallyMinimized, useDocumentWrite, width, height) {};

/**
 * Returns whether the console window starts off hidden / minimized.
 * @return {boolean}
 */
log4javascript.PopUpAppender.prototype.isInitiallyMinimized = function() {};

/**
 * Sets whether the console window should start off hidden / minimized.
 * @param {boolean} initiallyMinimized
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.setInitiallyMinimized = function(initiallyMinimized) {};

/**
 * Returns whether the pop-up window is focussed (i.e. brought it to the front) when a new log message is added. Default value is false.
 * @return {boolean}
 */
log4javascript.PopUpAppender.prototype.isFocusPopUp = function() {};

/**
 * Sets whether to focus the pop-up window (i.e. bring it to the front) when a new log message is added.
 * @param {boolean} focusPopUp
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.setFocusPopUp = function(focusPopUp) {};

/**
 * Returns whether the same pop-up window is used if the main page is reloaded. If set to true, when the page is reloaded a
 * line is drawn in the pop-up and subsequent log messages are added to the same pop-up. Otherwise, a new pop-up window is
 * created that replaces the original pop-up. If not specified, defaults to true.
 * @return {boolean}
 */
log4javascript.PopUpAppender.prototype.isUseOldPopUp = function() {};

/**
 * Sets whether to use the same pop-up window if the main page is reloaded. See isUseOldPopUp above for details.
 * @param {boolean} useOldPopUp
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.setUseOldPopUp = function(useOldPopUp) {};

/**
 * Returns whether an alert is shown to the user when the pop-up window cannot be created as a result of a pop-up blocker.
 * Default value is true.
 * @return {boolean}
 */
log4javascript.PopUpAppender.prototype.isComplainAboutPopUpBlocking = function() {};

/**
 * Sets whether to announce to show an alert to the user when the pop-up window cannot be created as a result of a pop-up blocker.
 * @param {boolean} complainAboutPopUpBlocking
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.setComplainAboutPopUpBlocking = function(complainAboutPopUpBlocking) {};

/**
 * Returns whether new log messages are displayed at the top of the pop-up window. Default value is false (i.e. log messages
 * are appended to the bottom of the window).
 * @return {boolean}
 */
log4javascript.PopUpAppender.prototype.isNewestMessageAtTop = function() {};

/**
 * Sets whether to display new log messages at the top inside the pop-up window.
 * @param {boolean} newestMessageAtTop
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.setNewestMessageAtTop = function(newestMessageAtTop) {};

/**
 * Returns whether the pop-up window scrolls to display the latest log message when a new message is logged. Default value is true.
 * @return {boolean}
 */
log4javascript.PopUpAppender.prototype.isScrollToLatestMessage = function() {};

/**
 * Sets whether to scroll the pop-up window to display the latest log message when a new message is logged.
 * @param {boolean} scrollToLatestMessage
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.setScrollToLatestMessage = function(scrollToLatestMessage) {};

/**
 * Returns whether the pop-up window reopens automatically after being closed when a new log message is logged. Default value is false.
 * @return {boolean}
 */
log4javascript.PopUpAppender.prototype.isReopenWhenClosed = function() {};

/**
 * Sets whether to reopen the pop-up window automatically after being closed when a new log message is logged.
 * @param {boolean} reopenWhenClosed
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.setReopenWhenClosed = function(reopenWhenClosed) {};

/**
 * Returns the outer width in pixels of the pop-up window.
 * @return {number}
 */
log4javascript.PopUpAppender.prototype.getWidth = function() {};

/**
 * Sets the outer width in pixels of the pop-up window.
 * @param {number} width
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.setWidth = function(width) {};

/**
 * Returns the outer height in pixels of the pop-up window.
 * @return {number}
 */
log4javascript.PopUpAppender.prototype.getHeight = function() {};

/**
 * Sets the outer height in pixels of the pop-up window.
 * @param {number} height
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.setHeight = function(height) {};

/**
 * Returns the largest number of log messages that are displayed and stored by the the console. Once reached, a new log
 * message wil cause the oldest message to be discarded. Default value is null, which means no limit is applied.
 * @return {number}
 */
log4javascript.PopUpAppender.prototype.getMaxMessages = function() {};

/**
 * Sets the largest number of messages displayed and stored by the console window. Set this to null to make this number unlimited.
 * @param {number} maxMessages
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.setMaxMessages = function(maxMessages) {};

/**
 * Returns whether the console includes a command line. Default value is true.
 * @return {boolean}
 */
log4javascript.PopUpAppender.prototype.isShowCommandLine = function() {};

/**
 * Sets whether the console includes a command line.
 * @param {boolean} showCommandLine
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.setShowCommandLine = function(showCommandLine) {};

/**
 * Returns the number of levels to expand when an object value is logged to the console. Each property of an object above
 * this threshold will be expanded if it is itself an object or array, otherwise its string representation will be displayed.
 * Default value is 1 (i.e. the properties of the object logged will be displayed in their string representation but not expanded).
 * @return {number}
 */
log4javascript.PopUpAppender.prototype.getCommandLineObjectExpansionDepth = function() {};

/**
 * Sets the number of levels to expand when an object value is logged to the console.
 * @param {number} expansionDepth
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.setCommandLineObjectExpansionDepth = function(expansionDepth) {};

/**
 * Returns a reference to the window in which commands typed into the command line are currently being executed.
 * @return {!Window}
 */
log4javascript.PopUpAppender.prototype.getCommandWindow = function() {};

/**
 * Sets the window in which commands typed into the command line are executed.
 * @param {!Window} commandWindow
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.setCommandWindow = function(commandWindow) {};

/**
 * Returns the layout used to format the output for commands typed into the command line. The default value is a
 * PatternLayout with pattern string %m
 * @return {!log4javascript.Layout}
 */
log4javascript.PopUpAppender.prototype.getCommandLayout = function() {};

/**
 * Sets the layout used to format the output for commands typed into the command line.
 * @param {!log4javascript.Layout} commandLayout
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.setCommandLayout = function(commandLayout) {};

/**
 * Clears all messages from the console window.
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.clear = function() {};

/**
 * Closes the pop-up window.
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.close = function() {};

/**
 * Opens the pop-up window, if not already open.
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.show = function() {};

/**
 * Closes the pop-up window.
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.hide = function() {};

/**
 * Brings the console window to the top and gives it the focus.
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.focus = function() {};

/**
 * Brings the console window to the top and gives the focus to the command line.
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.focusCommandLine = function() {};

/**
 * Brings the console window to the top and gives the focus to the search box.
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.focusSearch = function() {};

/**
 * Evaluates the expression and appends the result to the console.
 * @param {string} expr
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.evalCommandAndAppend = function(expr) {};

/**
 * Adds a function with the name specified to the list of functions available on the command line. This feature may be used
 * to add custom functions to the command line.
 * @param {string} functionName
 * @param {function(!log4javascript.Appender, ?, {appendResult: boolean, isError: boolean}): ?} commandLineFunction
 * @return {void}
 */
log4javascript.PopUpAppender.prototype.addCommandLineFunction = function(functionName, commandLineFunction) {};

/**
 * @constructor
 * @struct
 * Constructor
 * @param {!HTMLElement} container The container element for the console window. This should be an HTML element.
 * @param {boolean=} lazyInit Set this to true to create the console only when the first log message reaches the appender. Otherwise,
 * the console is initialized as soon as the appender is created. If not specified, defaults to true.
 * @param {boolean=} initiallyMinimized Whether the console window should start off hidden / minimized. If not specified, defaults to false
 * @param {boolean=} useDocumentWrite Specifies how the console window is created. By default, the console window is created dynamically
 * using document's write method. This has the advantage of keeping all the code in one single JavaScript file. However,
 * if your page sets document.domain then the browser prevents script access to a window unless it too has the same value
 * set for document.domain. To get round this issue, you can set useDocumentWrite to false and log4javascript will instead
 * use the external HTML file console.html (or console_uncompressed.html if you're using an uncompressed version of
 * log4javascript.js), which must be placed in the same directory as your log4javascript.js file.
 * In general it's simpler to use the document.write method, so unless your page needs to set document.domain,
 * useDocumentWrite should be set to true.
 * If not specified, defaults to true.
 * @param {number=} width The width of the console window. Any valid CSS length may be used. If not specified, defaults to 100%.
 * @param {number=} height The height of the console window. Any valid CSS length may be used. If not specified, defaults to 250px.
 */
log4javascript.InPageAppender = function(container, lazyInit, initiallyMinimized, useDocumentWrite, width, height) {};

/**
 * Sets a CSS style property on the HTML element containing the console iframe.
 * @param {string} name
 * @param {string} value
 * @return {void}
 */
log4javascript.InPageAppender.prototype.addCssProperty = function(name, value) {};

/**
 * Returns whether the console window is currently visible.
 * @return {boolean}
 */
log4javascript.InPageAppender.prototype.isVisible = function() {};

/**
 * Returns whether the console window starts off hidden / minimized.
 * @return {boolean}
 */
log4javascript.InPageAppender.prototype.isInitiallyMinimized = function() {};

/**
 * Sets whether the console window should start off hidden / minimized.
 * @param {boolean} initiallyMinimized
 * @return {void}
 */
log4javascript.InPageAppender.prototype.setInitiallyMinimized = function(initiallyMinimized) {};

/**
 * Returns whether new log messages are displayed at the top of the pop-up window. Default value is false (i.e. log messages
 * are appended to the bottom of the window).
 * @return {boolean}
 */
log4javascript.InPageAppender.prototype.isNewestMessageAtTop = function() {};

/**
 * Sets whether to display new log messages at the top inside the pop-up window.
 * @param {boolean} newestMessageAtTop
 * @return {void}
 */
log4javascript.InPageAppender.prototype.setNewestMessageAtTop = function(newestMessageAtTop) {};

/**
 * Returns whether the pop-up window scrolls to display the latest log message when a new message is logged. Default value is true.
 * @return {boolean}
 */
log4javascript.InPageAppender.prototype.isScrollToLatestMessage = function() {};

/**
 * Sets whether to scroll the pop-up window to display the latest log message when a new message is logged.
 * @param {boolean} scrollToLatestMessage
 * @return {void}
 */
log4javascript.InPageAppender.prototype.setScrollToLatestMessage = function(scrollToLatestMessage) {};

/**
 * Returns the outer width of the console window.
 * @return {number}
 */
log4javascript.InPageAppender.prototype.getWidth = function() {};

/**
 * Sets the outer width of the console window. Any valid CSS length may be used.
 * @param {number} width
 * @return {void}
 */
log4javascript.InPageAppender.prototype.setWidth = function(width) {};

/**
 * Returns the outer height of the console window.
 * @return {number}
 */
log4javascript.InPageAppender.prototype.getHeight = function() {};

/**
 * Sets the outer height of the console window. Any valid CSS length may be used.
 * @param {number} height
 * @return {void}
 */
log4javascript.InPageAppender.prototype.setHeight = function(height) {};

/**
 * Returns the largest number of messages displayed and stored by the console window.
 * @return {number}
 */
log4javascript.InPageAppender.prototype.getMaxMessages = function() {};

/**
 * Sets the largest number of messages displayed and stored by the console window. Set this to null to make this number unlimited.
 * @param {number} maxMessages
 * @return {void}
 */
log4javascript.InPageAppender.prototype.setMaxMessages = function(maxMessages) {};

/**
 * Returns whether the console includes a command line. Default value is true.
 * @return {boolean}
 */
log4javascript.InPageAppender.prototype.isShowCommandLine = function() {};

/**
 * Sets whether the console includes a command line.
 * @param {boolean} showCommandLine
 * @return {void}
 */
log4javascript.InPageAppender.prototype.setShowCommandLine = function(showCommandLine) {};

/**
 * Returns the number of levels to expand when an object value is logged to the console. Each property of an object above
 * this threshold will be expanded if it is itself an object or array, otherwise its string representation will be displayed.
 * Default value is 1 (i.e. the properties of the object logged will be displayed in their string representation but not expanded).
 * @return {number}
 */
log4javascript.InPageAppender.prototype.getCommandLineObjectExpansionDepth = function() {};

/**
 * Sets the number of levels to expand when an object value is logged to the console.
 * @param {number} expansionDepth
 * @return {void}
 */
log4javascript.InPageAppender.prototype.setCommandLineObjectExpansionDepth = function(expansionDepth) {};

/**
 * Returns a reference to the window in which commands typed into the command line are currently being executed.
 * @return {!Window}
 */
log4javascript.InPageAppender.prototype.getCommandWindow = function() {};

/**
 * Sets the window in which commands typed into the command line are executed.
 * @param {!Window} commandWindow
 * @return {void}
 */
log4javascript.InPageAppender.prototype.setCommandWindow = function(commandWindow) {};

/**
 * Returns the layout used to format the output for commands typed into the command line. The default value is a
 * PatternLayout with pattern string %m
 * @return {!log4javascript.Layout}
 */
log4javascript.InPageAppender.prototype.getCommandLayout = function() {};

/**
 * Sets the layout used to format the output for commands typed into the command line.
 * @param {!log4javascript.Layout} commandLayout
 * @return {void}
 */
log4javascript.InPageAppender.prototype.setCommandLayout = function(commandLayout) {};

/**
 * Clears all messages from the console window.
 * @return {void}
 */
log4javascript.InPageAppender.prototype.clear = function() {};

/**
 * Closes the pop-up window.
 * @return {void}
 */
log4javascript.InPageAppender.prototype.close = function() {};

/**
 * Shows / unhides the console window.
 * @return {void}
 */
log4javascript.InPageAppender.prototype.show = function() {};

/**
 * Hides / minimizes the console window.
 * @return {void}
 */
log4javascript.InPageAppender.prototype.hide = function() {};

/**
 * Brings the console window to the top and gives it the focus.
 * @return {void}
 */
log4javascript.InPageAppender.prototype.focus = function() {};

/**
 * Brings the console window to the top and gives the focus to the command line.
 * @return {void}
 */
log4javascript.InPageAppender.prototype.focusCommandLine = function() {};

/**
 * Brings the console window to the top and gives the focus to the search box.
 * @return {void}
 */
log4javascript.InPageAppender.prototype.focusSearch = function() {};

/**
 * Evaluates the expression and appends the result to the console.
 * @param {string} expr
 * @return {void}
 */
log4javascript.InPageAppender.prototype.evalCommandAndAppend = function(expr) {};

/**
 * Adds a function with the name specified to the list of functions available on the command line. This feature may be used
 * to add custom functions to the command line.
 * @param {string} functionName
 * @param {function(!log4javascript.Appender, ?, {appendResult: boolean, isError: boolean}): ?} commandLineFunction
 * @return {void}
 */
log4javascript.InPageAppender.prototype.addCommandLineFunction = function(functionName, commandLineFunction) {};

/**
 * @constructor
 * @struct
 * Constructor
 */
log4javascript.BrowserConsoleAppender = function() {};
/**
 * @constructor
 * @struct
 */
log4javascript.Layout = function() {};

/**
 * Formats the log message. You should override this method in your own layouts.
 * @param {!log4javascript.LoggingEvent} loggingEvent
 * @return {string}
 */
log4javascript.Layout.prototype.format = function(loggingEvent) {};

/**
 * Returns whether the layout ignores an error object in a logging event passed to its format method.
 * @return {boolean}
 */
log4javascript.Layout.prototype.ignoresThrowable = function() {};

/**
 * Returns the content type of the output of the layout.
 * @return {string}
 */
log4javascript.Layout.prototype.getContentType = function() {};

/**
 * Returns whether the layout's output is suitable for batching. JsonLayout and XmlLayout are the only built-in layouts that
 * return true for this method.
 * @return {boolean}
 */
log4javascript.Layout.prototype.allowBatching = function() {};

/**
 * Used internally by log4javascript in constructing formatted output for some layouts.
 * @param {!log4javascript.LoggingEvent} loggingEvent
 * @return {!Array<?>}
 */
log4javascript.Layout.prototype.getDataValues = function(loggingEvent) {};

/**
 * This method is used to change the default keys used to create formatted name-value pairs for the properties of a log
 * message, for layouts that do this. These layouts are JsonLayout and HttpPostDataLayout.
 * @param {string} loggerKey Parameter to use for the log message's logger name. Default is logger.
 * @param {string} timeStampKey Parameter to use for the log message's timestamp. Default is timestamp.
 * @param {string} levelKey Parameter to use for the log message's level. Default is level.
 * @param {string} messageKey Parameter to use for the message itself. Default is message.
 * @param {string} exceptionKey Parameter to use for the log message's error (exception). Default is exception.
 * @param {string} urlKey Parameter to use for the current page URL. Default is url.
 * @return {void}
 */
log4javascript.Layout.prototype.setKeys = function(loggerKey, timeStampKey, levelKey, messageKey, exceptionKey, urlKey) {};

/**
 * Some layouts (JsonLayout, HttpPostDataLayout, PatternLayout and XmlLayout) allow you to set custom fields (e.g. a session
 * id to send to the server) to the formatted output. Use this method to set a custom field. If there is already a custom
 * field with the specified name, its value will be updated with value.
 * @param {string} name Name of the custom property you wish to be included in the formmtted output.
 * @param {string} value Value of the custom property you wish to be included in the formatted output.
 * @return {string}
 */
log4javascript.Layout.prototype.setCustomField = function(name, value) {};

/**
 * Returns whether the layout has any custom fields.
 * @return {boolean}
 */
log4javascript.Layout.prototype.hasCustomFields = function() {};

/**
 * @param {!log4javascript.LoggingEvent} loggingEvent
 * @return {string}
 */
log4javascript.Layout.prototype.formatWithException = function(loggingEvent) {};

/**
 * @constructor
 * @struct
 * Constructor
 */
log4javascript.NullLayout = function() {};

/**
 * @constructor
 * @struct
 * Constructor
 */
log4javascript.SimpleLayout = function() {};

/**
 * @constructor
 * @struct
 * Constructor
 * @param {string} pattern The conversion pattern string to use.
 */
log4javascript.PatternLayout = function(pattern) {};
 /** @type {string} */
log4javascript.PatternLayout.TTCC_CONVERSION_PATTERN;
 /** @type {string} */
log4javascript.PatternLayout.DEFAULT_CONVERSION_PATTERN;
 /** @type {string} */
log4javascript.PatternLayout.ISO8601_DATEFORMAT;
 /** @type {string} */
log4javascript.PatternLayout.DATETIME_DATEFORMAT;
 /** @type {string} */
log4javascript.PatternLayout.ABSOLUTETIME_DATEFORMAT;

/**
 * @constructor
 * @struct
 * Constructor
 * @param {boolean=} combineMessages Whether or not to format multiple log messages as a combined single <log4javascript:message>
 * element composed of each individual message separated by line breaks or to include a <log4javascript:message> element for
 * each message inside one <log4javascript:messages> element. If not specified, defaults to true.
 */
log4javascript.XmlLayout = function(combineMessages) {};

/**
 * @constructor
 * @struct
 * Constructor
 * @param {boolean=} readable Whether or not to format each log message with line breaks and tabs. If not specified, defaults to false.
 * @param {boolean=} combineMessages Whether or not to format multiple log messages as a combined single message property composed of
 * each individual message separated by line breaks or to format multiple messages as an array. If not specified, defaults to true.
 */
log4javascript.JsonLayout = function(readable, combineMessages) {};

/**
 * Returns whether or not to each log message is formatted with line breaks and tabs.
 * @return {boolean}
 */
log4javascript.JsonLayout.prototype.isReadable = function() {};

/**
 * @constructor
 * @struct
 * Constructor
 */
log4javascript.HttpPostDataLayout = function() {};
/** @const */
log4javascript.logLog = {};

/**
 * Sets whether logLog is in quiet mode or not. In quiet mode, no messages sent to logLog have any visible effect. By default,
 * quiet mode is switched off.
 * @param {boolean} quietMode Whether to turn quiet mode on or off.
 * @return {void}
 */
log4javascript.logLog.setQuietMode = function(quietMode) {};

/**
 * Sets how many errors logLog will display alerts for. By default, only the first error encountered generates an alert to the
 * user. If you turn all errors on by supplying true to this method then all errors will generate alerts.
 * @param {boolean} alertAllErrors
 * @return {void}
 */
log4javascript.logLog.setAlertAllErrors = function(alertAllErrors) {};

/**
 * Logs a debugging message to an in-memory list.
 * @param {string} message
 * @param {!Error=} exception
 * @return {void}
 */
log4javascript.logLog.debug = function(message, exception) {};

/**
 * Displays an alert of all debugging messages.
 * @return {void}
 */
log4javascript.logLog.displayDebug = function() {};

/**
 * Currently has no effect.
 * @param {string} message
 * @param {!Error=} exception
 * @return {void}
 */
log4javascript.logLog.warn = function(message, exception) {};

/**
 * Generates an alert to the user if and only if the error is the first one encountered and setAlertAllErrors(true) has not been called.
 * @param {string} message
 * @param {!Error=} exception
 * @return {void}
 */
log4javascript.logLog.error = function(message, exception) {};
