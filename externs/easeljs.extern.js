/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/easeljs/index.d.ts:
/**
 * @record
 * @struct
 */
function NativeMouseEvent() {}

/**
 * @constructor
 * @struct
 * @param {(!HTMLImageElement|!HTMLCanvasElement)} alphaMap
 */
createjs.AlphaMapFilter = function(alphaMap) {};
 /** @type {(!HTMLImageElement|!HTMLCanvasElement)} */
createjs.AlphaMapFilter.prototype.alphaMap;

/**
 * @return {!createjs.AlphaMapFilter}
 */
createjs.AlphaMapFilter.prototype.clone = function() {};

/**
 * @constructor
 * @struct
 * @param {(!HTMLImageElement|!HTMLCanvasElement)} mask
 */
createjs.AlphaMaskFilter = function(mask) {};
 /** @type {(!HTMLImageElement|!HTMLCanvasElement)} */
createjs.AlphaMaskFilter.prototype.mask;

/**
 * @return {!createjs.AlphaMaskFilter}
 */
createjs.AlphaMaskFilter.prototype.clone = function() {};

/**
 * @constructor
 * @struct
 * @param {(string|!Object|!HTMLImageElement|!HTMLCanvasElement|!HTMLVideoElement)} imageOrUrl
 */
createjs.Bitmap = function(imageOrUrl) {};
 /** @type {(!HTMLImageElement|!HTMLCanvasElement|!HTMLVideoElement)} */
createjs.Bitmap.prototype.image;
 /** @type {!createjs.Rectangle} */
createjs.Bitmap.prototype.sourceRect;

/**
 * @return {!createjs.Bitmap}
 */
createjs.Bitmap.prototype.clone = function() {};

/**
 * @constructor
 * @struct
 * @param {(string|!Object|!HTMLImageElement|!HTMLCanvasElement|!HTMLVideoElement)} imageOrUrl
 * @param {!createjs.Rectangle} scale9Grid
 */
createjs.ScaleBitmap = function(imageOrUrl, scale9Grid) {};
 /** @type {(!HTMLImageElement|!HTMLCanvasElement|!HTMLVideoElement)} */
createjs.ScaleBitmap.prototype.image;
 /** @type {!createjs.Rectangle} */
createjs.ScaleBitmap.prototype.sourceRect;
 /** @type {number} */
createjs.ScaleBitmap.prototype.drawWidth;
 /** @type {number} */
createjs.ScaleBitmap.prototype.drawHeight;
 /** @type {!createjs.Rectangle} */
createjs.ScaleBitmap.prototype.scale9Grid;
 /** @type {boolean} */
createjs.ScaleBitmap.prototype.snapToPixel;

/**
 * @param {number} newWidth
 * @param {number} newHeight
 * @return {void}
 */
createjs.ScaleBitmap.prototype.setDrawSize = function(newWidth, newHeight) {};

/**
 * @return {!createjs.ScaleBitmap}
 */
createjs.ScaleBitmap.prototype.clone = function() {};

/**
 * @constructor
 * @struct
 * @param {string=} text
 * @param {!createjs.SpriteSheet=} spriteSheet
 */
createjs.BitmapText = function(text, spriteSheet) {};
 /** @type {number} */
createjs.BitmapText.maxPoolSize;
 /** @type {number} */
createjs.BitmapText.prototype.letterSpacing;
 /** @type {number} */
createjs.BitmapText.prototype.lineHeight;
 /** @type {number} */
createjs.BitmapText.prototype.spaceWidth;
 /** @type {!createjs.SpriteSheet} */
createjs.BitmapText.prototype.spriteSheet;
 /** @type {string} */
createjs.BitmapText.prototype.text;

/**
 * @constructor
 * @struct
 * @param {number=} blurX
 * @param {number=} blurY
 * @param {number=} quality
 */
createjs.BlurFilter = function(blurX, blurY, quality) {};
 /** @type {number} */
createjs.BlurFilter.prototype.blurX;
 /** @type {number} */
createjs.BlurFilter.prototype.blurY;
 /** @type {number} */
createjs.BlurFilter.prototype.quality;

/**
 * @return {!createjs.BlurFilter}
 */
createjs.BlurFilter.prototype.clone = function() {};

/**
 * @constructor
 * @struct
 * @param {!createjs.Sprite|!createjs.MovieClip} target
 * @param {string=} outLabel
 * @param {string=} overLabel
 * @param {string=} downLabel
 * @param {boolean=} play
 * @param {!createjs.DisplayObject=} hitArea
 * @param {string=} hitLabel
 */
createjs.ButtonHelper = function(target, outLabel, overLabel, downLabel, play, hitArea, hitLabel) {};
 /** @type {(string|number)} */
createjs.ButtonHelper.prototype.downLabel;
 /** @type {(string|number)} */
createjs.ButtonHelper.prototype.outLabel;
 /** @type {(string|number)} */
createjs.ButtonHelper.prototype.overLabel;
 /** @type {boolean} */
createjs.ButtonHelper.prototype.play;
 /** @type {(!createjs.Sprite|!createjs.MovieClip)} */
createjs.ButtonHelper.prototype.target;
 /** @type {boolean} */
createjs.ButtonHelper.prototype.enabled;

/**
 * @deprecated - use the 'enabled' property instead
 * @param {boolean} value
 * @return {void}
 */
createjs.ButtonHelper.prototype.setEnabled = function(value) {};

/**
 * @deprecated - use the 'enabled' property instead
 * @return {boolean}
 */
createjs.ButtonHelper.prototype.getEnabled = function() {};

/**
 * @return {string}
 */
createjs.ButtonHelper.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * @param {number=} redMultiplier
 * @param {number=} greenMultiplier
 * @param {number=} blueMultiplier
 * @param {number=} alphaMultiplier
 * @param {number=} redOffset
 * @param {number=} greenOffset
 * @param {number=} blueOffset
 * @param {number=} alphaOffset
 */
createjs.ColorFilter = function(redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset) {};
 /** @type {number} */
createjs.ColorFilter.prototype.alphaMultiplier;
 /** @type {number} */
createjs.ColorFilter.prototype.alphaOffset;
 /** @type {number} */
createjs.ColorFilter.prototype.blueMultiplier;
 /** @type {number} */
createjs.ColorFilter.prototype.blueOffset;
 /** @type {number} */
createjs.ColorFilter.prototype.greenMultiplier;
 /** @type {number} */
createjs.ColorFilter.prototype.greenOffset;
 /** @type {number} */
createjs.ColorFilter.prototype.redMultiplier;
 /** @type {number} */
createjs.ColorFilter.prototype.redOffset;

/**
 * @return {!createjs.ColorFilter}
 */
createjs.ColorFilter.prototype.clone = function() {};

/**
 * @constructor
 * @struct
 * @param {number=} brightness
 * @param {number=} contrast
 * @param {number=} saturation
 * @param {number=} hue
 */
createjs.ColorMatrix = function(brightness, contrast, saturation, hue) {};

/**
 * @param {number} value
 * @return {!createjs.ColorMatrix}
 */
createjs.ColorMatrix.prototype.adjustBrightness = function(value) {};

/**
 * @param {number} brightness
 * @param {number} contrast
 * @param {number} saturation
 * @param {number} hue
 * @return {!createjs.ColorMatrix}
 */
createjs.ColorMatrix.prototype.adjustColor = function(brightness, contrast, saturation, hue) {};

/**
 * @param {number} value
 * @return {!createjs.ColorMatrix}
 */
createjs.ColorMatrix.prototype.adjustContrast = function(value) {};

/**
 * @param {number} value
 * @return {!createjs.ColorMatrix}
 */
createjs.ColorMatrix.prototype.adjustHue = function(value) {};

/**
 * @param {number} value
 * @return {!createjs.ColorMatrix}
 */
createjs.ColorMatrix.prototype.adjustSaturation = function(value) {};

/**
 * @return {!createjs.ColorMatrix}
 */
createjs.ColorMatrix.prototype.clone = function() {};

/**
 * @param {...number|!createjs.ColorMatrix} matrix
 * @return {!createjs.ColorMatrix}
 */
createjs.ColorMatrix.prototype.concat = function(matrix) {};

/**
 * @param {...number|!createjs.ColorMatrix} matrix
 * @return {!createjs.ColorMatrix}
 */
createjs.ColorMatrix.prototype.copy = function(matrix) {};

/**
 * @return {!createjs.ColorMatrix}
 */
createjs.ColorMatrix.prototype.reset = function() {};

/**
 * @param {number} brightness
 * @param {number} contrast
 * @param {number} saturation
 * @param {number} hue
 * @return {!createjs.ColorMatrix}
 */
createjs.ColorMatrix.prototype.setColor = function(brightness, contrast, saturation, hue) {};

/**
 * @return {!Array<number>}
 */
createjs.ColorMatrix.prototype.toArray = function() {};

/**
 * @return {string}
 */
createjs.ColorMatrix.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * @param {(!createjs.ColorMatrix|!Array<number>)} matrix
 */
createjs.ColorMatrixFilter = function(matrix) {};
 /** @type {(!createjs.ColorMatrix|!Array<number>)} */
createjs.ColorMatrixFilter.prototype.matrix;

/**
 * @return {!createjs.ColorMatrixFilter}
 */
createjs.ColorMatrixFilter.prototype.clone = function() {};

/**
 * @constructor
 * @struct
 */
createjs.Container = function() {};
 /** @type {!Array<!createjs.DisplayObject>} */
createjs.Container.prototype.children;
 /** @type {boolean} */
createjs.Container.prototype.mouseChildren;
 /** @type {number} */
createjs.Container.prototype.numChildren;
 /** @type {boolean} */
createjs.Container.prototype.tickChildren;

/**
 * @template T
 * @param {...T|!createjs.DisplayObject} child_or_child0_or_children
 * @return {T|!createjs.DisplayObject}
 */
createjs.Container.prototype.addChild = function(child_or_child0_or_children) {};

/**
 * @template T
 * @param {...T|!createjs.DisplayObject|(number|!createjs.DisplayObject)} child_or_child0_or_childOrIndex
 * @return {T|!createjs.DisplayObject}
 */
createjs.Container.prototype.addChildAt = function(child_or_child0_or_childOrIndex) {};

/**
 * @param {boolean=} recursive
 * @return {!createjs.Container}
 */
createjs.Container.prototype.clone = function(recursive) {};

/**
 * @param {!createjs.DisplayObject} child
 * @return {boolean}
 */
createjs.Container.prototype.contains = function(child) {};

/**
 * @param {number} index
 * @return {!createjs.DisplayObject}
 */
createjs.Container.prototype.getChildAt = function(index) {};

/**
 * @param {string} name
 * @return {!createjs.DisplayObject}
 */
createjs.Container.prototype.getChildByName = function(name) {};

/**
 * @param {!createjs.DisplayObject} child
 * @return {number}
 */
createjs.Container.prototype.getChildIndex = function(child) {};

/**
 * @deprecated - use numChildren property instead.
 * @return {number}
 */
createjs.Container.prototype.getNumChildren = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} mode
 * @return {!Array<!createjs.DisplayObject>}
 */
createjs.Container.prototype.getObjectsUnderPoint = function(x, y, mode) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} mode
 * @return {!createjs.DisplayObject}
 */
createjs.Container.prototype.getObjectUnderPoint = function(x, y, mode) {};

/**
 * @return {void}
 */
createjs.Container.prototype.removeAllChildren = function() {};

/**
 * @param {...!createjs.DisplayObject} child
 * @return {boolean}
 */
createjs.Container.prototype.removeChild = function(child) {};

/**
 * @param {...number} index
 * @return {boolean}
 */
createjs.Container.prototype.removeChildAt = function(index) {};

/**
 * @param {!createjs.DisplayObject} child
 * @param {number} index
 * @return {void}
 */
createjs.Container.prototype.setChildIndex = function(child, index) {};

/**
 * @param {function(!createjs.DisplayObject, !createjs.DisplayObject): number} sortFunction
 * @return {void}
 */
createjs.Container.prototype.sortChildren = function(sortFunction) {};

/**
 * @param {!createjs.DisplayObject} child1
 * @param {!createjs.DisplayObject} child2
 * @return {void}
 */
createjs.Container.prototype.swapChildren = function(child1, child2) {};

/**
 * @param {number} index1
 * @param {number} index2
 * @return {void}
 */
createjs.Container.prototype.swapChildrenAt = function(index1, index2) {};

/**
 * @constructor
 * @struct
 */
createjs.DisplayObject = function() {};
 /** @type {number} */
createjs.DisplayObject.prototype.alpha;
 /** @type {(!Object|!HTMLCanvasElement)} */
createjs.DisplayObject.prototype.cacheCanvas;
 /** @type {number} */
createjs.DisplayObject.prototype.cacheID;
 /** @type {string} */
createjs.DisplayObject.prototype.compositeOperation;
 /** @type {string} */
createjs.DisplayObject.prototype.cursor;
 /** @type {!Array<!createjs.Filter>} */
createjs.DisplayObject.prototype.filters;
 /** @type {!createjs.DisplayObject} */
createjs.DisplayObject.prototype.hitArea;
 /** @type {number} */
createjs.DisplayObject.prototype.id;
 /** @type {!createjs.Shape} */
createjs.DisplayObject.prototype.mask;
 /** @type {boolean} */
createjs.DisplayObject.prototype.mouseEnabled;
 /** @type {string} */
createjs.DisplayObject.prototype.name;
 /** @type {!createjs.Container} */
createjs.DisplayObject.prototype.parent;
 /** @type {number} */
createjs.DisplayObject.prototype.regX;
 /** @type {number} */
createjs.DisplayObject.prototype.regY;
 /** @type {number} */
createjs.DisplayObject.prototype.rotation;
 /** @type {number} */
createjs.DisplayObject.prototype.scaleX;
 /** @type {number} */
createjs.DisplayObject.prototype.scaleY;
 /** @type {!createjs.Shadow} */
createjs.DisplayObject.prototype.shadow;
 /** @type {number} */
createjs.DisplayObject.prototype.skewX;
 /** @type {number} */
createjs.DisplayObject.prototype.skewY;
 /** @type {boolean} */
createjs.DisplayObject.prototype.snapToPixel;
 /** @type {!createjs.Stage} */
createjs.DisplayObject.prototype.stage;
 /** @type {boolean} */
createjs.DisplayObject.suppressCrossDomainErrors;
 /** @type {boolean} */
createjs.DisplayObject.prototype.tickEnabled;
 /** @type {!createjs.Matrix2D} */
createjs.DisplayObject.prototype.transformMatrix;
 /** @type {boolean} */
createjs.DisplayObject.prototype.visible;
 /** @type {number} */
createjs.DisplayObject.prototype.x;
 /** @type {number} */
createjs.DisplayObject.prototype.y;

/**
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {number=} scale
 * @return {void}
 */
createjs.DisplayObject.prototype.cache = function(x, y, width, height, scale) {};

/**
 * @return {!createjs.DisplayObject}
 */
createjs.DisplayObject.prototype.clone = function() {};

/**
 * @param {!CanvasRenderingContext2D} ctx
 * @param {boolean=} ignoreCache
 * @return {boolean}
 */
createjs.DisplayObject.prototype.draw = function(ctx, ignoreCache) {};

/**
 * @return {!createjs.Rectangle}
 */
createjs.DisplayObject.prototype.getBounds = function() {};

/**
 * @return {string}
 */
createjs.DisplayObject.prototype.getCacheDataURL = function() {};

/**
 * @param {!createjs.DisplayProps=} props
 * @return {!createjs.DisplayProps}
 */
createjs.DisplayObject.prototype.getConcatenatedDisplayProps = function(props) {};

/**
 * @param {!createjs.Matrix2D=} mtx
 * @return {!createjs.Matrix2D}
 */
createjs.DisplayObject.prototype.getConcatenatedMatrix = function(mtx) {};

/**
 * @param {!createjs.Matrix2D=} matrix
 * @return {!createjs.Matrix2D}
 */
createjs.DisplayObject.prototype.getMatrix = function(matrix) {};

/**
 * @deprecated
 * @return {!createjs.Stage}
 */
createjs.DisplayObject.prototype.getStage = function() {};

/**
 * @return {!createjs.Rectangle}
 */
createjs.DisplayObject.prototype.getTransformedBounds = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @param {(!Object|!createjs.Point)=} pt
 * @return {!createjs.Point}
 */
createjs.DisplayObject.prototype.globalToLocal = function(x, y, pt) {};

/**
 * @param {number} x
 * @param {number} y
 * @return {boolean}
 */
createjs.DisplayObject.prototype.hitTest = function(x, y) {};

/**
 * @return {boolean}
 */
createjs.DisplayObject.prototype.isVisible = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @param {(!Object|!createjs.Point)=} pt
 * @return {!createjs.Point}
 */
createjs.DisplayObject.prototype.localToGlobal = function(x, y, pt) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {!createjs.DisplayObject} target
 * @param {(!Object|!createjs.Point)=} pt
 * @return {!createjs.Point}
 */
createjs.DisplayObject.prototype.localToLocal = function(x, y, target, pt) {};

/**
 * @param {!Object} props
 * @return {!createjs.DisplayObject}
 */
createjs.DisplayObject.prototype.set = function(props) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
createjs.DisplayObject.prototype.setBounds = function(x, y, width, height) {};

/**
 * @param {number=} x
 * @param {number=} y
 * @param {number=} scaleX
 * @param {number=} scaleY
 * @param {number=} rotation
 * @param {number=} skewX
 * @param {number=} skewY
 * @param {number=} regX
 * @param {number=} regY
 * @return {!createjs.DisplayObject}
 */
createjs.DisplayObject.prototype.setTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {};

/**
 * @return {void}
 */
createjs.DisplayObject.prototype.uncache = function() {};

/**
 * @param {string=} compositeOperation
 * @return {void}
 */
createjs.DisplayObject.prototype.updateCache = function(compositeOperation) {};

/**
 * @param {!CanvasRenderingContext2D} ctx
 * @return {void}
 */
createjs.DisplayObject.prototype.updateContext = function(ctx) {};

/**
 * @constructor
 * @struct
 * @param {number=} visible
 * @param {number=} alpha
 * @param {number=} shadow
 * @param {number=} compositeOperation
 * @param {number=} matrix
 */
createjs.DisplayProps = function(visible, alpha, shadow, compositeOperation, matrix) {};
 /** @type {number} */
createjs.DisplayProps.prototype.alpha;
 /** @type {string} */
createjs.DisplayProps.prototype.compositeOperation;
 /** @type {!createjs.Matrix2D} */
createjs.DisplayProps.prototype.matrix;
 /** @type {!createjs.Shadow} */
createjs.DisplayProps.prototype.shadow;
 /** @type {boolean} */
createjs.DisplayProps.prototype.visible;

/**
 * @param {boolean} visible
 * @param {number} alpha
 * @param {!createjs.Shadow} shadow
 * @param {string} compositeOperation
 * @param {!createjs.Matrix2D=} matrix
 * @return {!createjs.DisplayProps}
 */
createjs.DisplayProps.prototype.append = function(visible, alpha, shadow, compositeOperation, matrix) {};

/**
 * @return {!createjs.DisplayProps}
 */
createjs.DisplayProps.prototype.clone = function() {};

/**
 * @return {!createjs.DisplayProps}
 */
createjs.DisplayProps.prototype.identity = function() {};

/**
 * @param {boolean} visible
 * @param {number} alpha
 * @param {!createjs.Shadow} shadow
 * @param {string} compositeOperation
 * @param {!createjs.Matrix2D=} matrix
 * @return {!createjs.DisplayProps}
 */
createjs.DisplayProps.prototype.prepend = function(visible, alpha, shadow, compositeOperation, matrix) {};

/**
 * @param {boolean=} visible
 * @param {number=} alpha
 * @param {number=} shadow
 * @param {number=} compositeOperation
 * @param {number=} matrix
 * @return {!createjs.DisplayProps}
 */
createjs.DisplayProps.prototype.setValues = function(visible, alpha, shadow, compositeOperation, matrix) {};

/**
 * @constructor
 * @struct
 * @param {!HTMLElement} htmlElement
 */
createjs.DOMElement = function(htmlElement) {};
 /** @type {!HTMLElement} */
createjs.DOMElement.prototype.htmlElement;

/**
 * @return {!createjs.DisplayObject}
 */
createjs.DOMElement.prototype.clone = function() {};

/**
 * @param {!Object} props
 * @return {!createjs.DOMElement}
 */
createjs.DOMElement.prototype.set = function(props) {};

/**
 * @param {number=} x
 * @param {number=} y
 * @param {number=} scaleX
 * @param {number=} scaleY
 * @param {number=} rotation
 * @param {number=} skewX
 * @param {number=} skewY
 * @param {number=} regX
 * @param {number=} regY
 * @return {!createjs.DOMElement}
 */
createjs.DOMElement.prototype.setTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {};
/**
 * @constructor
 * @struct
 */
createjs.EaselJS = function() {};
 /** @type {string} */
createjs.EaselJS.buildDate;
 /** @type {string} */
createjs.EaselJS.version;

/**
 * @constructor
 * @struct
 */
createjs.Filter = function() {};

/**
 * @param {!CanvasRenderingContext2D} ctx
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {!CanvasRenderingContext2D=} targetCtx
 * @param {number=} targetX
 * @param {number=} targetY
 * @return {boolean}
 */
createjs.Filter.prototype.applyFilter = function(ctx, x, y, width, height, targetCtx, targetX, targetY) {};

/**
 * @return {!createjs.Filter}
 */
createjs.Filter.prototype.clone = function() {};

/**
 * @return {!createjs.Rectangle}
 */
createjs.Filter.prototype.getBounds = function() {};

/**
 * @return {string}
 */
createjs.Filter.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 */
createjs.Graphics = function() {};
 /** @type {!Object} */
createjs.Graphics.BASE_64;
 /** @type {!createjs.Graphics.BeginPath} */
createjs.Graphics.beginCmd;
 /** @type {!Object} */
createjs.Graphics.prototype.command;
 /** @type {!Array<!Object>} */
createjs.Graphics.prototype.instructions;
 /** @type {!Array<string>} */
createjs.Graphics.STROKE_CAPS_MAP;
 /** @type {!Array<string>} */
createjs.Graphics.STROKE_JOINTS_MAP;

/**
 * @param {!Object} command
 * @param {boolean=} clean
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.append = function(command, clean) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} radius
 * @param {number} startAngle
 * @param {number} endAngle
 * @param {boolean} anticlockwise
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.arc = function(x, y, radius, startAngle, endAngle, anticlockwise) {};

/**
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @param {number} radius
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.arcTo = function(x1, y1, x2, y2, radius) {};

/**
 * @param {!Object} image
 * @param {string=} repetition
 * @param {!createjs.Matrix2D=} matrix
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.beginBitmapFill = function(image, repetition, matrix) {};

/**
 * @param {!Object} image
 * @param {string=} repetition
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.beginBitmapStroke = function(image, repetition) {};

/**
 * @param {string} color
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.beginFill = function(color) {};

/**
 * @param {!Array<string>} colors
 * @param {!Array<number>} ratios
 * @param {number} x0
 * @param {number} y0
 * @param {number} x1
 * @param {number} y1
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.beginLinearGradientFill = function(colors, ratios, x0, y0, x1, y1) {};

/**
 * @param {!Array<string>} colors
 * @param {!Array<number>} ratios
 * @param {number} x0
 * @param {number} y0
 * @param {number} x1
 * @param {number} y1
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.beginLinearGradientStroke = function(colors, ratios, x0, y0, x1, y1) {};

/**
 * @param {!Array<string>} colors
 * @param {!Array<number>} ratios
 * @param {number} x0
 * @param {number} y0
 * @param {number} r0
 * @param {number} x1
 * @param {number} y1
 * @param {number} r1
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.beginRadialGradientFill = function(colors, ratios, x0, y0, r0, x1, y1, r1) {};

/**
 * @param {!Array<string>} colors
 * @param {!Array<number>} ratios
 * @param {number} x0
 * @param {number} y0
 * @param {number} r0
 * @param {number} x1
 * @param {number} y1
 * @param {number} r1
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.beginRadialGradientStroke = function(colors, ratios, x0, y0, r0, x1, y1, r1) {};

/**
 * @param {string} color
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.beginStroke = function(color) {};

/**
 * @param {number} cp1x
 * @param {number} cp1y
 * @param {number} cp2x
 * @param {number} cp2y
 * @param {number} x
 * @param {number} y
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.bezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {};

/**
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.clear = function() {};

/**
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.clone = function() {};

/**
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.closePath = function() {};

/**
 * @param {number} cpx
 * @param {number} cpy
 * @param {number} x
 * @param {number} y
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.curveTo = function(cpx, cpy, x, y) {};

/**
 * @param {string} str
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.decodePath = function(str) {};

/**
 * @param {!CanvasRenderingContext2D} ctx
 * @return {void}
 */
createjs.Graphics.prototype.draw = function(ctx) {};

/**
 * @param {!CanvasRenderingContext2D} ctx
 * @return {void}
 */
createjs.Graphics.prototype.drawAsPath = function(ctx) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} radius
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.drawCircle = function(x, y, radius) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.drawEllipse = function(x, y, w, h) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} radius
 * @param {number} sides
 * @param {number} pointSize
 * @param {number} angle
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.drawPolyStar = function(x, y, radius, sides, pointSize, angle) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.drawRect = function(x, y, w, h) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @param {number} radius
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.drawRoundRect = function(x, y, w, h, radius) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @param {number} radiusTL
 * @param {number} radiusTR
 * @param {number} radiusBR
 * @param {number} radisBL
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.drawRoundRectComplex = function(x, y, w, h, radiusTL, radiusTR, radiusBR, radisBL) {};

/**
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.endFill = function() {};

/**
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.endStroke = function() {};

/**
 * @param {number} hue
 * @param {number} saturation
 * @param {number} lightness
 * @param {number=} alpha
 * @return {string}
 */
createjs.Graphics.getHSL = function(hue, saturation, lightness, alpha) {};

/**
 * @deprecated - use the instructions property instead
 * @return {!Array<!Object>}
 */
createjs.Graphics.prototype.getInstructions = function() {};

/**
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @param {number=} alpha
 * @return {string}
 */
createjs.Graphics.getRGB = function(r, g, b, alpha) {};

/**
 * @param {function(?): ?} callback
 * @param {?} data
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.inject = function(callback, data) {};

/**
 * @return {boolean}
 */
createjs.Graphics.prototype.isEmpty = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.lineTo = function(x, y) {};

/**
 * @param {number} x
 * @param {number} y
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.moveTo = function(x, y) {};

/**
 * @param {number} cpx
 * @param {number} cpy
 * @param {number} x
 * @param {number} y
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.quadraticCurveTo = function(cpx, cpy, x, y) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.rect = function(x, y, w, h) {};

/**
 * @param {number} thickness
 * @param {(string|number)=} caps
 * @param {(string|number)=} joints
 * @param {number=} miterLimit
 * @param {boolean=} ignoreScale
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.setStrokeStyle = function(thickness, caps, joints, miterLimit, ignoreScale) {};

/**
 * @param {!Array<number>=} segments
 * @param {number=} offset
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.setStrokeDash = function(segments, offset) {};

/**
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.store = function() {};

/**
 * @return {string}
 */
createjs.Graphics.prototype.toString = function() {};

/**
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.unstore = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} radius
 * @param {number} startAngle
 * @param {number} endAngle
 * @param {boolean} anticlockwise
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.a = function(x, y, radius, startAngle, endAngle, anticlockwise) {};

/**
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @param {number} radius
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.at = function(x1, y1, x2, y2, radius) {};

/**
 * @param {!Object} image
 * @param {string=} repetition
 * @param {!createjs.Matrix2D=} matrix
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.bf = function(image, repetition, matrix) {};

/**
 * @param {!Object} image
 * @param {string=} repetition
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.bs = function(image, repetition) {};

/**
 * @param {string} color
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.f = function(color) {};

/**
 * @param {!Array<string>} colors
 * @param {!Array<number>} ratios
 * @param {number} x0
 * @param {number} y0
 * @param {number} x1
 * @param {number} y1
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.lf = function(colors, ratios, x0, y0, x1, y1) {};

/**
 * @param {!Array<string>} colors
 * @param {!Array<number>} ratios
 * @param {number} x0
 * @param {number} y0
 * @param {number} x1
 * @param {number} y1
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.ls = function(colors, ratios, x0, y0, x1, y1) {};

/**
 * @param {!Array<string>} colors
 * @param {!Array<number>} ratios
 * @param {number} x0
 * @param {number} y0
 * @param {number} r0
 * @param {number} x1
 * @param {number} y1
 * @param {number} r1
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.rf = function(colors, ratios, x0, y0, r0, x1, y1, r1) {};

/**
 * @param {!Array<string>} colors
 * @param {!Array<number>} ratios
 * @param {number} x0
 * @param {number} y0
 * @param {number} r0
 * @param {number} x1
 * @param {number} y1
 * @param {number} r1
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.rs = function(colors, ratios, x0, y0, r0, x1, y1, r1) {};

/**
 * @param {string} color
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.s = function(color) {};

/**
 * @param {number} cp1x
 * @param {number} cp1y
 * @param {number} cp2x
 * @param {number} cp2y
 * @param {number} x
 * @param {number} y
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.bt = function(cp1x, cp1y, cp2x, cp2y, x, y) {};

/**
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.c = function() {};

/**
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.cp = function() {};

/**
 * @param {string} str
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.p = function(str) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} radius
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.dc = function(x, y, radius) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.de = function(x, y, w, h) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} radius
 * @param {number} sides
 * @param {number} pointSize
 * @param {number} angle
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.dp = function(x, y, radius, sides, pointSize, angle) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.dr = function(x, y, w, h) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @param {number} radius
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.rr = function(x, y, w, h, radius) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @param {number} radiusTL
 * @param {number} radiusTR
 * @param {number} radiusBR
 * @param {number} radisBL
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.rc = function(x, y, w, h, radiusTL, radiusTR, radiusBR, radisBL) {};

/**
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.ef = function() {};

/**
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.es = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.lt = function(x, y) {};

/**
 * @param {number} x
 * @param {number} y
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.mt = function(x, y) {};

/**
 * @param {number} cpx
 * @param {number} cpy
 * @param {number} x
 * @param {number} y
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.qt = function(cpx, cpy, x, y) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.r = function(x, y, w, h) {};

/**
 * @param {number} thickness
 * @param {(string|number)=} caps
 * @param {(string|number)=} joints
 * @param {number=} miterLimit
 * @param {boolean=} ignoreScale
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.ss = function(thickness, caps, joints, miterLimit, ignoreScale) {};

/**
 * @param {!Array<number>=} segments
 * @param {number=} offset
 * @return {!createjs.Graphics}
 */
createjs.Graphics.prototype.sd = function(segments, offset) {};

/**
 * @constructor
 * @struct
 * @param {number} x
 * @param {number} y
 * @param {number} radius
 * @param {number} startAngle
 * @param {number} endAngle
 * @param {number} anticlockwise
 */
createjs.Graphics.Arc = function(x, y, radius, startAngle, endAngle, anticlockwise) {};
 /** @type {number} */
createjs.Graphics.Arc.prototype.anticlockwise;
 /** @type {number} */
createjs.Graphics.Arc.prototype.endAngle;
 /** @type {number} */
createjs.Graphics.Arc.prototype.radius;
 /** @type {number} */
createjs.Graphics.Arc.prototype.startAngle;
 /** @type {number} */
createjs.Graphics.Arc.prototype.x;
 /** @type {number} */
createjs.Graphics.Arc.prototype.y;

/**
 * @constructor
 * @struct
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @param {number} radius
 */
createjs.Graphics.ArcTo = function(x1, y1, x2, y2, radius) {};
 /** @type {number} */
createjs.Graphics.ArcTo.prototype.x1;
 /** @type {number} */
createjs.Graphics.ArcTo.prototype.y1;
 /** @type {number} */
createjs.Graphics.ArcTo.prototype.x2;
 /** @type {number} */
createjs.Graphics.ArcTo.prototype.y2;
 /** @type {number} */
createjs.Graphics.ArcTo.prototype.radius;
/**
 * @constructor
 * @struct
 */
createjs.Graphics.BeginPath = function() {};

/**
 * @constructor
 * @struct
 * @param {number} cp1x
 * @param {number} cp1y
 * @param {number} cp2x
 * @param {number} cp2y
 * @param {number} x
 * @param {number} y
 */
createjs.Graphics.BezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {};
 /** @type {number} */
createjs.Graphics.BezierCurveTo.prototype.cp1x;
 /** @type {number} */
createjs.Graphics.BezierCurveTo.prototype.cp1y;
 /** @type {number} */
createjs.Graphics.BezierCurveTo.prototype.cp2x;
 /** @type {number} */
createjs.Graphics.BezierCurveTo.prototype.cp2y;
 /** @type {number} */
createjs.Graphics.BezierCurveTo.prototype.x;
 /** @type {number} */
createjs.Graphics.BezierCurveTo.prototype.y;

/**
 * @constructor
 * @struct
 * @param {number} x
 * @param {number} y
 * @param {number} radius
 */
createjs.Graphics.Circle = function(x, y, radius) {};
 /** @type {number} */
createjs.Graphics.Circle.prototype.x;
 /** @type {number} */
createjs.Graphics.Circle.prototype.y;
 /** @type {number} */
createjs.Graphics.Circle.prototype.radius;
/**
 * @constructor
 * @struct
 */
createjs.Graphics.ClosePath = function() {};

/**
 * @constructor
 * @struct
 * @param {!Object} style
 * @param {!createjs.Matrix2D=} matrix
 */
createjs.Graphics.Fill = function(style, matrix) {};
 /** @type {!Object} */
createjs.Graphics.Fill.prototype.style;
 /** @type {!createjs.Matrix2D} */
createjs.Graphics.Fill.prototype.matrix;

/**
 * @param {!HTMLImageElement} image
 * @param {string=} repetition
 * @return {!createjs.Graphics.Fill}
 */
createjs.Graphics.Fill.prototype.bitmap = function(image, repetition) {};

/**
 * @param {!Array<number>} colors
 * @param {!Array<number>} ratios
 * @param {number} x0
 * @param {number} y0
 * @param {number} x1
 * @param {number} y1
 * @return {!createjs.Graphics.Fill}
 */
createjs.Graphics.Fill.prototype.linearGradient = function(colors, ratios, x0, y0, x1, y1) {};

/**
 * @param {!Array<number>} colors
 * @param {!Array<number>} ratios
 * @param {number} x0
 * @param {number} y0
 * @param {number} r0
 * @param {number} x1
 * @param {number} y1
 * @param {number} r1
 * @return {!createjs.Graphics.Fill}
 */
createjs.Graphics.Fill.prototype.radialGradient = function(colors, ratios, x0, y0, r0, x1, y1, r1) {};

/**
 * @constructor
 * @struct
 * @param {number} x
 * @param {number} y
 */
createjs.Graphics.LineTo = function(x, y) {};
 /** @type {number} */
createjs.Graphics.LineTo.prototype.x;
 /** @type {number} */
createjs.Graphics.LineTo.prototype.y;

/**
 * @constructor
 * @struct
 * @param {number} x
 * @param {number} y
 */
createjs.Graphics.MoveTo = function(x, y) {};
 /** @type {number} */
createjs.Graphics.MoveTo.prototype.x;
 /** @type {number} */
createjs.Graphics.MoveTo.prototype.y;

/**
 * @constructor
 * @struct
 * @param {number} x
 * @param {number} y
 * @param {number} radius
 * @param {number} sides
 * @param {number} pointSize
 * @param {number} angle
 */
createjs.Graphics.PolyStar = function(x, y, radius, sides, pointSize, angle) {};
 /** @type {number} */
createjs.Graphics.PolyStar.prototype.angle;
 /** @type {number} */
createjs.Graphics.PolyStar.prototype.pointSize;
 /** @type {number} */
createjs.Graphics.PolyStar.prototype.radius;
 /** @type {number} */
createjs.Graphics.PolyStar.prototype.sides;
 /** @type {number} */
createjs.Graphics.PolyStar.prototype.x;
 /** @type {number} */
createjs.Graphics.PolyStar.prototype.y;

/**
 * @constructor
 * @struct
 * @param {number} cpx
 * @param {number} cpy
 * @param {number} x
 * @param {number} y
 */
createjs.Graphics.QuadraticCurveTo = function(cpx, cpy, x, y) {};
 /** @type {number} */
createjs.Graphics.QuadraticCurveTo.prototype.cpx;
 /** @type {number} */
createjs.Graphics.QuadraticCurveTo.prototype.cpy;
 /** @type {number} */
createjs.Graphics.QuadraticCurveTo.prototype.x;
 /** @type {number} */
createjs.Graphics.QuadraticCurveTo.prototype.y;

/**
 * @constructor
 * @struct
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 */
createjs.Graphics.Rect = function(x, y, w, h) {};
 /** @type {number} */
createjs.Graphics.Rect.prototype.x;
 /** @type {number} */
createjs.Graphics.Rect.prototype.y;
 /** @type {number} */
createjs.Graphics.Rect.prototype.w;
 /** @type {number} */
createjs.Graphics.Rect.prototype.h;

/**
 * @constructor
 * @struct
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @param {number} radiusTL
 * @param {number} radiusTR
 * @param {number} radiusBR
 * @param {number} radiusBL
 */
createjs.Graphics.RoundRect = function(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL) {};
 /** @type {number} */
createjs.Graphics.RoundRect.prototype.x;
 /** @type {number} */
createjs.Graphics.RoundRect.prototype.y;
 /** @type {number} */
createjs.Graphics.RoundRect.prototype.w;
 /** @type {number} */
createjs.Graphics.RoundRect.prototype.h;
 /** @type {number} */
createjs.Graphics.RoundRect.prototype.radiusTL;
 /** @type {number} */
createjs.Graphics.RoundRect.prototype.radiusTR;
 /** @type {number} */
createjs.Graphics.RoundRect.prototype.radiusBR;
 /** @type {number} */
createjs.Graphics.RoundRect.prototype.radiusBL;

/**
 * @constructor
 * @struct
 * @param {!Object} style
 * @param {boolean} ignoreScale
 */
createjs.Graphics.Stroke = function(style, ignoreScale) {};
 /** @type {!Object} */
createjs.Graphics.Stroke.prototype.style;
 /** @type {boolean} */
createjs.Graphics.Stroke.prototype.ignoreScale;

/**
 * @param {!HTMLImageElement} image
 * @param {string=} repetition
 * @return {!createjs.Graphics.Stroke}
 */
createjs.Graphics.Stroke.prototype.bitmap = function(image, repetition) {};

/**
 * @param {!Array<number>} colors
 * @param {!Array<number>} ratios
 * @param {number} x0
 * @param {number} y0
 * @param {number} x1
 * @param {number} y1
 * @return {!createjs.Graphics.Stroke}
 */
createjs.Graphics.Stroke.prototype.linearGradient = function(colors, ratios, x0, y0, x1, y1) {};

/**
 * @param {!Array<number>} colors
 * @param {!Array<number>} ratios
 * @param {number} x0
 * @param {number} y0
 * @param {number} r0
 * @param {number} x1
 * @param {number} y1
 * @param {number} r1
 * @return {!createjs.Graphics.Stroke}
 */
createjs.Graphics.Stroke.prototype.radialGradient = function(colors, ratios, x0, y0, r0, x1, y1, r1) {};

/**
 * @constructor
 * @struct
 * @param {number} width
 * @param {string} caps
 * @param {number} joints
 * @param {number} miterLimit
 */
createjs.Graphics.StrokeStyle = function(width, caps, joints, miterLimit) {};
 /** @type {string} */
createjs.Graphics.StrokeStyle.prototype.caps;
 /** @type {string} */
createjs.Graphics.StrokeStyle.prototype.joints;
 /** @type {number} */
createjs.Graphics.StrokeStyle.prototype.miterLimit;
 /** @type {number} */
createjs.Graphics.StrokeStyle.prototype.width;

/**
 * @constructor
 * @struct
 * @param {number=} a
 * @param {number=} b
 * @param {number=} c
 * @param {number=} d
 * @param {number=} tx
 * @param {number=} ty
 */
createjs.Matrix2D = function(a, b, c, d, tx, ty) {};
 /** @type {number} */
createjs.Matrix2D.prototype.a;
 /** @type {number} */
createjs.Matrix2D.prototype.b;
 /** @type {number} */
createjs.Matrix2D.prototype.c;
 /** @type {number} */
createjs.Matrix2D.prototype.d;
 /** @type {number} */
createjs.Matrix2D.DEG_TO_RAD;
 /** @type {!createjs.Matrix2D} */
createjs.Matrix2D.identity;
 /** @type {number} */
createjs.Matrix2D.prototype.tx;
 /** @type {number} */
createjs.Matrix2D.prototype.ty;

/**
 * @param {number} a
 * @param {number} b
 * @param {number} c
 * @param {number} d
 * @param {number} tx
 * @param {number} ty
 * @return {!createjs.Matrix2D}
 */
createjs.Matrix2D.prototype.append = function(a, b, c, d, tx, ty) {};

/**
 * @param {!createjs.Matrix2D} matrix
 * @return {!createjs.Matrix2D}
 */
createjs.Matrix2D.prototype.appendMatrix = function(matrix) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} scaleX
 * @param {number} scaleY
 * @param {number} rotation
 * @param {number} skewX
 * @param {number} skewY
 * @param {number=} regX
 * @param {number=} regY
 * @return {!createjs.Matrix2D}
 */
createjs.Matrix2D.prototype.appendTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {};

/**
 * @return {!createjs.Matrix2D}
 */
createjs.Matrix2D.prototype.clone = function() {};

/**
 * @param {!createjs.Matrix2D} matrix
 * @return {!createjs.Matrix2D}
 */
createjs.Matrix2D.prototype.copy = function(matrix) {};

/**
 * @param {!Object=} target
 * @return {{x: number, y: number, scaleX: number, scaleY: number, rotation: number, skewX: number, skewY: number}|!createjs.Matrix2D}
 */
createjs.Matrix2D.prototype.decompose = function(target) {};

/**
 * @param {!createjs.Matrix2D} matrix
 * @return {boolean}
 */
createjs.Matrix2D.prototype.equals = function(matrix) {};

/**
 * @return {!createjs.Matrix2D}
 */
createjs.Matrix2D.prototype.identity = function() {};

/**
 * @return {!createjs.Matrix2D}
 */
createjs.Matrix2D.prototype.invert = function() {};

/**
 * @return {boolean}
 */
createjs.Matrix2D.prototype.isIdentity = function() {};

/**
 * @param {number} a
 * @param {number} b
 * @param {number} c
 * @param {number} d
 * @param {number} tx
 * @param {number} ty
 * @return {!createjs.Matrix2D}
 */
createjs.Matrix2D.prototype.prepend = function(a, b, c, d, tx, ty) {};

/**
 * @param {!createjs.Matrix2D} matrix
 * @return {!createjs.Matrix2D}
 */
createjs.Matrix2D.prototype.prependMatrix = function(matrix) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} scaleX
 * @param {number} scaleY
 * @param {number} rotation
 * @param {number} skewX
 * @param {number} skewY
 * @param {number=} regX
 * @param {number=} regY
 * @return {!createjs.Matrix2D}
 */
createjs.Matrix2D.prototype.prependTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {};

/**
 * @param {number} angle
 * @return {!createjs.Matrix2D}
 */
createjs.Matrix2D.prototype.rotate = function(angle) {};

/**
 * @param {number} x
 * @param {number} y
 * @return {!createjs.Matrix2D}
 */
createjs.Matrix2D.prototype.scale = function(x, y) {};

/**
 * @param {number=} a
 * @param {number=} b
 * @param {number=} c
 * @param {number=} d
 * @param {number=} tx
 * @param {number=} ty
 * @return {!createjs.Matrix2D}
 */
createjs.Matrix2D.prototype.setValues = function(a, b, c, d, tx, ty) {};

/**
 * @param {number} skewX
 * @param {number} skewY
 * @return {!createjs.Matrix2D}
 */
createjs.Matrix2D.prototype.skew = function(skewX, skewY) {};

/**
 * @return {string}
 */
createjs.Matrix2D.prototype.toString = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @param {(!Object|!createjs.Point)=} pt
 * @return {!createjs.Point}
 */
createjs.Matrix2D.prototype.transformPoint = function(x, y, pt) {};

/**
 * @param {number} x
 * @param {number} y
 * @return {!createjs.Matrix2D}
 */
createjs.Matrix2D.prototype.translate = function(x, y) {};

/**
 * @constructor
 * @struct
 * @param {string} type
 * @param {boolean} bubbles
 * @param {boolean} cancelable
 * @param {number} stageX
 * @param {number} stageY
 * @param {!NativeMouseEvent} nativeEvent
 * @param {number} pointerID
 * @param {boolean} primary
 * @param {number} rawX
 * @param {number} rawY
 */
createjs.MouseEvent = function(type, bubbles, cancelable, stageX, stageY, nativeEvent, pointerID, primary, rawX, rawY) {};
 /** @type {boolean} */
createjs.MouseEvent.prototype.isTouch;
 /** @type {number} */
createjs.MouseEvent.prototype.localX;
 /** @type {number} */
createjs.MouseEvent.prototype.localY;
 /** @type {!NativeMouseEvent} */
createjs.MouseEvent.prototype.nativeEvent;
 /** @type {number} */
createjs.MouseEvent.prototype.pointerID;
 /** @type {boolean} */
createjs.MouseEvent.prototype.primary;
 /** @type {number} */
createjs.MouseEvent.prototype.rawX;
 /** @type {number} */
createjs.MouseEvent.prototype.rawY;
 /** @type {!createjs.DisplayObject} */
createjs.MouseEvent.prototype.relatedTarget;
 /** @type {number} */
createjs.MouseEvent.prototype.stageX;
 /** @type {number} */
createjs.MouseEvent.prototype.stageY;
 /** @type {boolean} */
createjs.MouseEvent.prototype.mouseMoveOutside;

/**
 * @return {!createjs.MouseEvent}
 */
createjs.MouseEvent.prototype.clone = function() {};

/**
 * @param {string} type
 * @param {function(!Object): boolean|function(!Object): void|{handleEvent: function(!Object): boolean}|{handleEvent: function(!Object): void}} listener
 * @param {boolean=} useCapture
 * @return {!Function|!Object}
 */
createjs.MouseEvent.prototype.addEventListener = function(type, listener, useCapture) {};

/**
 * @param {(string|!Object|!createjs.Event)} eventObj
 * @param {!Object=} target
 * @return {boolean}
 */
createjs.MouseEvent.prototype.dispatchEvent = function(eventObj, target) {};

/**
 * @param {string} type
 * @return {boolean}
 */
createjs.MouseEvent.prototype.hasEventListener = function(type) {};

/**
 * @param {string} type
 * @param {function(!Object): boolean|function(!Object): void|{handleEvent: function(!Object): boolean}|{handleEvent: function(!Object): void}|!Function} listener
 * @param {boolean=} useCapture
 * @return {void}
 */
createjs.MouseEvent.prototype.off = function(type, listener, useCapture) {};

/**
 * @param {string} type
 * @param {function(!Object): boolean|function(!Object): void|{handleEvent: function(!Object): boolean}|{handleEvent: function(!Object): void}} listener
 * @param {!Object=} scope
 * @param {boolean=} once
 * @param {?=} data
 * @param {boolean=} useCapture
 * @return {!Function|!Object}
 */
createjs.MouseEvent.prototype.on = function(type, listener, scope, once, data, useCapture) {};

/**
 * @param {string=} type
 * @return {void}
 */
createjs.MouseEvent.prototype.removeAllEventListeners = function(type) {};

/**
 * @param {string} type
 * @param {function(!Object): boolean|function(!Object): void|{handleEvent: function(!Object): boolean}|{handleEvent: function(!Object): void}|!Function} listener
 * @param {boolean=} useCapture
 * @return {void}
 */
createjs.MouseEvent.prototype.removeEventListener = function(type, listener, useCapture) {};

/**
 * @return {string}
 */
createjs.MouseEvent.prototype.toString = function() {};

/**
 * @param {string} type
 * @return {boolean}
 */
createjs.MouseEvent.prototype.willTrigger = function(type) {};

/**
 * @constructor
 * @struct
 * @param {string=} mode
 * @param {number=} startPosition
 * @param {boolean=} loop
 * @param {!Object=} labels
 */
createjs.MovieClip = function(mode, startPosition, loop, labels) {};
 /** @type {boolean} */
createjs.MovieClip.prototype.actionsEnabled;
 /** @type {boolean} */
createjs.MovieClip.prototype.autoReset;
 /** @type {string} */
createjs.MovieClip.buildDate;
 /** @type {number} */
createjs.MovieClip.prototype.currentFrame;
 /** @type {number} */
createjs.MovieClip.prototype.totalFrames;
 /** @type {string} */
createjs.MovieClip.prototype.currentLabel;
 /** @type {!Array<!createjs.Rectangle>} */
createjs.MovieClip.prototype.frameBounds;
 /** @type {number} */
createjs.MovieClip.prototype.framerate;
 /** @type {string} */
createjs.MovieClip.INDEPENDENT;
 /** @type {!Array<!Object>} */
createjs.MovieClip.prototype.labels;
 /** @type {boolean} */
createjs.MovieClip.prototype.loop;
 /** @type {string} */
createjs.MovieClip.prototype.mode;
 /** @type {boolean} */
createjs.MovieClip.prototype.paused;
 /** @type {string} */
createjs.MovieClip.SINGLE_FRAME;
 /** @type {number} */
createjs.MovieClip.prototype.startPosition;
 /** @type {string} */
createjs.MovieClip.SYNCHED;
 /** @type {!createjs.Timeline} */
createjs.MovieClip.prototype.timeline;
 /** @type {number} */
createjs.MovieClip.prototype.duration;
 /** @type {string} */
createjs.MovieClip.version;

/**
 * @param {number=} time
 * @return {void}
 */
createjs.MovieClip.prototype.advance = function(time) {};

/**
 * @return {!createjs.MovieClip}
 */
createjs.MovieClip.prototype.clone = function() {};

/**
 * @deprecated - use 'currentLabel' property instead
 * @return {string}
 */
createjs.MovieClip.prototype.getCurrentLabel = function() {};

/**
 * @deprecated - use 'labels' property instead
 * @return {!Array<!Object>}
 */
createjs.MovieClip.prototype.getLabels = function() {};

/**
 * @param {(string|number)} positionOrLabel
 * @return {void}
 */
createjs.MovieClip.prototype.gotoAndPlay = function(positionOrLabel) {};

/**
 * @param {(string|number)} positionOrLabel
 * @return {void}
 */
createjs.MovieClip.prototype.gotoAndStop = function(positionOrLabel) {};

/**
 * @return {void}
 */
createjs.MovieClip.prototype.play = function() {};

/**
 * @return {void}
 */
createjs.MovieClip.prototype.stop = function() {};
/**
 * @constructor
 * @struct
 */
createjs.MovieClipPlugin = function() {};

/**
 * @param {!createjs.Tween} tween
 * @param {string} prop
 * @param {(string|number|boolean)} value
 * @param {!Array<?>} startValues
 * @param {!Array<?>} endValues
 * @param {number} ratio
 * @param {!Object} wait
 * @param {!Object} end
 * @return {void}
 */
createjs.MovieClipPlugin.prototype.tween = function(tween, prop, value, startValues, endValues, ratio, wait, end) {};

/**
 * @constructor
 * @struct
 * @param {number=} x
 * @param {number=} y
 */
createjs.Point = function(x, y) {};
 /** @type {number} */
createjs.Point.prototype.x;
 /** @type {number} */
createjs.Point.prototype.y;

/**
 * @return {!createjs.Point}
 */
createjs.Point.prototype.clone = function() {};

/**
 * @param {!createjs.Point} point
 * @return {!createjs.Point}
 */
createjs.Point.prototype.copy = function(point) {};

/**
 * @param {number=} x
 * @param {number=} y
 * @return {!createjs.Point}
 */
createjs.Point.prototype.setValues = function(x, y) {};

/**
 * @return {string}
 */
createjs.Point.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * @param {number=} x
 * @param {number=} y
 * @param {number=} width
 * @param {number=} height
 */
createjs.Rectangle = function(x, y, width, height) {};
 /** @type {number} */
createjs.Rectangle.prototype.height;
 /** @type {number} */
createjs.Rectangle.prototype.width;
 /** @type {number} */
createjs.Rectangle.prototype.x;
 /** @type {number} */
createjs.Rectangle.prototype.y;

/**
 * @return {!createjs.Rectangle}
 */
createjs.Rectangle.prototype.clone = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number=} width
 * @param {number=} height
 * @return {boolean}
 */
createjs.Rectangle.prototype.contains = function(x, y, width, height) {};

/**
 * @param {!createjs.Rectangle} rectangle
 * @return {!createjs.Rectangle}
 */
createjs.Rectangle.prototype.copy = function(rectangle) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number=} width
 * @param {number=} height
 * @return {!createjs.Rectangle}
 */
createjs.Rectangle.prototype.extend = function(x, y, width, height) {};

/**
 * @param {!createjs.Rectangle} rect
 * @return {!createjs.Rectangle}
 */
createjs.Rectangle.prototype.intersection = function(rect) {};

/**
 * @param {!createjs.Rectangle} rect
 * @return {boolean}
 */
createjs.Rectangle.prototype.intersects = function(rect) {};

/**
 * @return {boolean}
 */
createjs.Rectangle.prototype.isEmpty = function() {};

/**
 * @param {number} top
 * @param {number} left
 * @param {number} bottom
 * @param {number} right
 * @return {!createjs.Rectangle}
 */
createjs.Rectangle.prototype.pad = function(top, left, bottom, right) {};

/**
 * @param {number=} x
 * @param {number=} y
 * @param {number=} width
 * @param {number=} height
 * @return {!createjs.Rectangle}
 */
createjs.Rectangle.prototype.setValues = function(x, y, width, height) {};

/**
 * @return {string}
 */
createjs.Rectangle.prototype.toString = function() {};

/**
 * @param {!createjs.Rectangle} rect
 * @return {!createjs.Rectangle}
 */
createjs.Rectangle.prototype.union = function(rect) {};

/**
 * @constructor
 * @struct
 * @param {string} color
 * @param {number} offsetX
 * @param {number} offsetY
 * @param {number} blur
 */
createjs.Shadow = function(color, offsetX, offsetY, blur) {};
 /** @type {number} */
createjs.Shadow.prototype.blur;
 /** @type {string} */
createjs.Shadow.prototype.color;
 /** @type {!createjs.Shadow} */
createjs.Shadow.identity;
 /** @type {number} */
createjs.Shadow.prototype.offsetX;
 /** @type {number} */
createjs.Shadow.prototype.offsetY;

/**
 * @return {!createjs.Shadow}
 */
createjs.Shadow.prototype.clone = function() {};

/**
 * @return {string}
 */
createjs.Shadow.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * @param {!createjs.Graphics=} graphics
 */
createjs.Shape = function(graphics) {};
 /** @type {!createjs.Graphics} */
createjs.Shape.prototype.graphics;

/**
 * @param {boolean=} recursive
 * @return {!createjs.Shape}
 */
createjs.Shape.prototype.clone = function(recursive) {};

/**
 * @param {!Object} props
 * @return {!createjs.Shape}
 */
createjs.Shape.prototype.set = function(props) {};

/**
 * @param {number=} x
 * @param {number=} y
 * @param {number=} scaleX
 * @param {number=} scaleY
 * @param {number=} rotation
 * @param {number=} skewX
 * @param {number=} skewY
 * @param {number=} regX
 * @param {number=} regY
 * @return {!createjs.Shape}
 */
createjs.Shape.prototype.setTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {};

/**
 * @constructor
 * @struct
 * @param {!createjs.SpriteSheet} spriteSheet
 * @param {(string|number)=} frameOrAnimation
 */
createjs.Sprite = function(spriteSheet, frameOrAnimation) {};
 /** @type {string} */
createjs.Sprite.prototype.currentAnimation;
 /** @type {number} */
createjs.Sprite.prototype.currentAnimationFrame;
 /** @type {number} */
createjs.Sprite.prototype.currentFrame;
 /** @type {number} */
createjs.Sprite.prototype.framerate;
 /** @type {number} */
createjs.Sprite.prototype.offset;
 /** @type {boolean} */
createjs.Sprite.prototype.paused;
 /** @type {!createjs.SpriteSheet} */
createjs.Sprite.prototype.spriteSheet;

/**
 * @param {number=} time
 * @return {void}
 */
createjs.Sprite.prototype.advance = function(time) {};

/**
 * @return {!createjs.Sprite}
 */
createjs.Sprite.prototype.clone = function() {};

/**
 * @return {!createjs.Rectangle}
 */
createjs.Sprite.prototype.getBounds = function() {};

/**
 * @param {(string|number)} frameOrAnimation
 * @return {void}
 */
createjs.Sprite.prototype.gotoAndPlay = function(frameOrAnimation) {};

/**
 * @param {(string|number)} frameOrAnimation
 * @return {void}
 */
createjs.Sprite.prototype.gotoAndStop = function(frameOrAnimation) {};

/**
 * @return {void}
 */
createjs.Sprite.prototype.play = function() {};

/**
 * @param {!Object} props
 * @return {!createjs.Sprite}
 */
createjs.Sprite.prototype.set = function(props) {};

/**
 * @param {number=} x
 * @param {number=} y
 * @param {number=} scaleX
 * @param {number=} scaleY
 * @param {number=} rotation
 * @param {number=} skewX
 * @param {number=} skewY
 * @param {number=} regX
 * @param {number=} regY
 * @return {!createjs.Sprite}
 */
createjs.Sprite.prototype.setTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {};

/**
 * @return {void}
 */
createjs.Sprite.prototype.stop = function() {};

/**
 * @constructor
 * @struct
 * @param {!createjs.SpriteSheet=} spriteSheet
 */
createjs.SpriteContainer = function(spriteSheet) {};
 /** @type {!createjs.SpriteSheet} */
createjs.SpriteContainer.prototype.spriteSheet;
/**
 * @record
 * @struct
 */
createjs.SpriteSheetAnimation = function() {};
 /** @type {!Array<number>} */
createjs.SpriteSheetAnimation.prototype.frames;
 /** @type {number} */
createjs.SpriteSheetAnimation.prototype.speed;
 /** @type {string} */
createjs.SpriteSheetAnimation.prototype.name;
 /** @type {string} */
createjs.SpriteSheetAnimation.prototype.next;
/**
 * @record
 * @struct
 */
createjs.SpriteSheetFrame = function() {};
 /** @type {!HTMLImageElement} */
createjs.SpriteSheetFrame.prototype.image;
 /** @type {!createjs.Rectangle} */
createjs.SpriteSheetFrame.prototype.rect;

/**
 * @constructor
 * @struct
 * @param {!Object} data
 */
createjs.SpriteSheet = function(data) {};
 /** @type {!Array<string>} */
createjs.SpriteSheet.prototype.animations;
 /** @type {boolean} */
createjs.SpriteSheet.prototype.complete;
 /** @type {number} */
createjs.SpriteSheet.prototype.framerate;

/**
 * @return {!createjs.SpriteSheet}
 */
createjs.SpriteSheet.prototype.clone = function() {};

/**
 * @param {string} name
 * @return {!createjs.SpriteSheetAnimation}
 */
createjs.SpriteSheet.prototype.getAnimation = function(name) {};

/**
 * @deprecated - use the 'animations' property instead
 * @return {!Array<string>}
 */
createjs.SpriteSheet.prototype.getAnimations = function() {};

/**
 * @param {number} frameIndex
 * @return {!createjs.SpriteSheetFrame}
 */
createjs.SpriteSheet.prototype.getFrame = function(frameIndex) {};

/**
 * @param {number} frameIndex
 * @param {!createjs.Rectangle=} rectangle
 * @return {!createjs.Rectangle}
 */
createjs.SpriteSheet.prototype.getFrameBounds = function(frameIndex, rectangle) {};

/**
 * @param {string} animation
 * @return {number}
 */
createjs.SpriteSheet.prototype.getNumFrames = function(animation) {};

/**
 * @constructor
 * @struct
 */
createjs.SpriteSheetBuilder = function() {};
 /** @type {number} */
createjs.SpriteSheetBuilder.prototype.maxHeight;
 /** @type {number} */
createjs.SpriteSheetBuilder.prototype.maxWidth;
 /** @type {number} */
createjs.SpriteSheetBuilder.prototype.padding;
 /** @type {number} */
createjs.SpriteSheetBuilder.prototype.progress;
 /** @type {number} */
createjs.SpriteSheetBuilder.prototype.scale;
 /** @type {!createjs.SpriteSheet} */
createjs.SpriteSheetBuilder.prototype.spriteSheet;
 /** @type {number} */
createjs.SpriteSheetBuilder.prototype.timeSlice;

/**
 * @param {string} name
 * @param {!Array<number>} frames
 * @param {(string|boolean)=} next
 * @param {number=} frequency
 * @return {void}
 */
createjs.SpriteSheetBuilder.prototype.addAnimation = function(name, frames, next, frequency) {};

/**
 * @param {!createjs.DisplayObject} source
 * @param {!createjs.Rectangle=} sourceRect
 * @param {number=} scale
 * @param {function(): ?=} setupFunction
 * @param {!Object=} setupData
 * @return {number}
 */
createjs.SpriteSheetBuilder.prototype.addFrame = function(source, sourceRect, scale, setupFunction, setupData) {};

/**
 * @param {!createjs.MovieClip} source
 * @param {!createjs.Rectangle=} sourceRect
 * @param {number=} scale
 * @param {function(): ?=} setupFunction
 * @param {!Object=} setupData
 * @param {function(): ?=} labelFunction
 * @return {void}
 */
createjs.SpriteSheetBuilder.prototype.addMovieClip = function(source, sourceRect, scale, setupFunction, setupData, labelFunction) {};

/**
 * @return {!createjs.SpriteSheet}
 */
createjs.SpriteSheetBuilder.prototype.build = function() {};

/**
 * @param {number=} timeSlice
 * @return {void}
 */
createjs.SpriteSheetBuilder.prototype.buildAsync = function(timeSlice) {};

/**
 * @return {void}
 */
createjs.SpriteSheetBuilder.prototype.clone = function() {};

/**
 * @return {void}
 */
createjs.SpriteSheetBuilder.prototype.stopAsync = function() {};
/**
 * @constructor
 * @struct
 */
createjs.SpriteSheetUtils = function() {};

/**
 * @deprecated
 * @param {!createjs.SpriteSheet} spriteSheet
 * @param {boolean=} horizontal
 * @param {boolean=} vertical
 * @param {boolean=} both
 * @return {void}
 */
createjs.SpriteSheetUtils.addFlippedFrames = function(spriteSheet, horizontal, vertical, both) {};

/**
 * @param {!createjs.SpriteSheet} spriteSheet
 * @param {(string|number)} frameOrAnimation
 * @return {!HTMLImageElement}
 */
createjs.SpriteSheetUtils.extractFrame = function(spriteSheet, frameOrAnimation) {};

/**
 * @deprecated
 * @param {!HTMLImageElement} rgbImage
 * @param {!HTMLImageElement} alphaImage
 * @param {!HTMLCanvasElement=} canvas
 * @return {!HTMLCanvasElement}
 */
createjs.SpriteSheetUtils.mergeAlpha = function(rgbImage, alphaImage, canvas) {};

/**
 * @constructor
 * @struct
 * @param {(string|!HTMLCanvasElement)} canvas
 * @param {boolean=} preserveDrawingBuffer
 * @param {boolean=} antialias
 */
createjs.SpriteStage = function(canvas, preserveDrawingBuffer, antialias) {};
 /** @type {number} */
createjs.SpriteStage.INDICES_PER_BOX;
 /** @type {boolean} */
createjs.SpriteStage.prototype.isWebGL;
 /** @type {number} */
createjs.SpriteStage.MAX_BOXES_POINTS_INCREMENT;
 /** @type {number} */
createjs.SpriteStage.MAX_INDEX_SIZE;
 /** @type {number} */
createjs.SpriteStage.NUM_VERTEX_PROPERTIES;
 /** @type {number} */
createjs.SpriteStage.NUM_VERTEX_PROPERTIES_PER_BOX;
 /** @type {number} */
createjs.SpriteStage.POINTS_PER_BOX;

/**
 * @param {!Object} image
 * @return {void}
 */
createjs.SpriteStage.prototype.clearImageTexture = function(image) {};

/**
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
createjs.SpriteStage.prototype.updateViewport = function(width, height) {};

/**
 * @constructor
 * @struct
 * @param {(string|!Object|!HTMLCanvasElement)} canvas
 */
createjs.Stage = function(canvas) {};
 /** @type {boolean} */
createjs.Stage.prototype.autoClear;
 /** @type {(!Object|!HTMLCanvasElement)} */
createjs.Stage.prototype.canvas;
 /** @type {!createjs.Rectangle} */
createjs.Stage.prototype.drawRect;
 /** @type {!Function} */
createjs.Stage.prototype.handleEvent;
 /** @type {boolean} */
createjs.Stage.prototype.mouseInBounds;
 /** @type {boolean} */
createjs.Stage.prototype.mouseMoveOutside;
 /** @type {number} */
createjs.Stage.prototype.mouseX;
 /** @type {number} */
createjs.Stage.prototype.mouseY;
 /** @type {!createjs.Stage} */
createjs.Stage.prototype.nextStage;
 /** @type {boolean} */
createjs.Stage.prototype.preventSelection;
 /** @type {boolean} */
createjs.Stage.prototype.snapToPixelEnabled;
 /** @type {boolean} */
createjs.Stage.prototype.tickOnUpdate;

/**
 * @return {void}
 */
createjs.Stage.prototype.clear = function() {};

/**
 * @return {!createjs.Stage}
 */
createjs.Stage.prototype.clone = function() {};

/**
 * @param {boolean=} enable
 * @return {void}
 */
createjs.Stage.prototype.enableDOMEvents = function(enable) {};

/**
 * @param {number=} frequency
 * @return {void}
 */
createjs.Stage.prototype.enableMouseOver = function(frequency) {};

/**
 * @param {!Object=} props
 * @return {void}
 */
createjs.Stage.prototype.tick = function(props) {};

/**
 * @param {string} backgroundColor
 * @param {string} mimeType
 * @return {string}
 */
createjs.Stage.prototype.toDataURL = function(backgroundColor, mimeType) {};

/**
 * @param {...?} arg
 * @return {void}
 */
createjs.Stage.prototype.update = function(arg) {};

/**
 * @constructor
 * @struct
 * @param {string=} text
 * @param {string=} font
 * @param {string=} color
 */
createjs.Text = function(text, font, color) {};
 /** @type {string} */
createjs.Text.prototype.color;
 /** @type {string} */
createjs.Text.prototype.font;
 /** @type {number} */
createjs.Text.prototype.lineHeight;
 /** @type {number} */
createjs.Text.prototype.lineWidth;
 /** @type {number} */
createjs.Text.prototype.maxWidth;
 /** @type {number} */
createjs.Text.prototype.outline;
 /** @type {string} */
createjs.Text.prototype.text;
 /** @type {string} */
createjs.Text.prototype.textAlign;
 /** @type {string} */
createjs.Text.prototype.textBaseline;

/**
 * @return {!createjs.Text}
 */
createjs.Text.prototype.clone = function() {};

/**
 * @return {number}
 */
createjs.Text.prototype.getMeasuredHeight = function() {};

/**
 * @return {number}
 */
createjs.Text.prototype.getMeasuredLineHeight = function() {};

/**
 * @return {number}
 */
createjs.Text.prototype.getMeasuredWidth = function() {};

/**
 * @return {!Object}
 */
createjs.Text.prototype.getMetrics = function() {};

/**
 * @param {!Object} props
 * @return {!createjs.Text}
 */
createjs.Text.prototype.set = function(props) {};

/**
 * @param {number=} x
 * @param {number=} y
 * @param {number=} scaleX
 * @param {number=} scaleY
 * @param {number=} rotation
 * @param {number=} skewX
 * @param {number=} skewY
 * @param {number=} regX
 * @param {number=} regY
 * @return {!createjs.Text}
 */
createjs.Text.prototype.setTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {};
/**
 * @constructor
 * @struct
 */
createjs.Ticker = function() {};
 /** @type {number} */
createjs.Ticker.framerate;
 /** @type {number} */
createjs.Ticker.interval;
 /** @type {number} */
createjs.Ticker.maxDelta;
 /** @type {boolean} */
createjs.Ticker.paused;
 /** @type {string} */
createjs.Ticker.RAF;
 /** @type {string} */
createjs.Ticker.RAF_SYNCHED;
 /** @type {string} */
createjs.Ticker.TIMEOUT;
 /** @type {string} */
createjs.Ticker.timingMode;
 /** @type {boolean} */
createjs.Ticker.useRAF;

/**
 * @param {boolean=} runTime
 * @return {number}
 */
createjs.Ticker.getEventTime = function(runTime) {};

/**
 * @deprecated - use the 'framerate' property instead
 * @return {number}
 */
createjs.Ticker.getFPS = function() {};

/**
 * @deprecated - use the 'interval' property instead
 * @return {number}
 */
createjs.Ticker.getInterval = function() {};

/**
 * @param {number=} ticks
 * @return {number}
 */
createjs.Ticker.getMeasuredFPS = function(ticks) {};

/**
 * @param {number=} ticks
 * @return {number}
 */
createjs.Ticker.getMeasuredTickTime = function(ticks) {};

/**
 * @deprecated - use the 'paused' property instead
 * @return {boolean}
 */
createjs.Ticker.getPaused = function() {};

/**
 * @param {boolean=} pauseable
 * @return {number}
 */
createjs.Ticker.getTicks = function(pauseable) {};

/**
 * @param {boolean=} runTime
 * @return {number}
 */
createjs.Ticker.getTime = function(runTime) {};

/**
 * @return {void}
 */
createjs.Ticker.init = function() {};

/**
 * @return {void}
 */
createjs.Ticker.reset = function() {};

/**
 * @deprecated - use the 'framerate' property instead
 * @param {number} value
 * @return {void}
 */
createjs.Ticker.setFPS = function(value) {};

/**
 * @deprecated - use the 'interval' property instead
 * @param {number} interval
 * @return {void}
 */
createjs.Ticker.setInterval = function(interval) {};

/**
 * @deprecated - use the 'paused' property instead
 * @param {boolean} value
 * @return {void}
 */
createjs.Ticker.setPaused = function(value) {};

/**
 * @param {string} type
 * @param {!createjs.Stage|function(!Object): boolean|function(!Object): void|{handleEvent: function(!Object): boolean}|{handleEvent: function(!Object): void}} listener
 * @param {boolean=} useCapture
 * @return {!createjs.Stage|!Function|!Object}
 */
createjs.Ticker.addEventListener = function(type, listener, useCapture) {};

/**
 * @param {(string|!Object|!createjs.Event)} eventObj
 * @param {!Object=} target
 * @return {boolean}
 */
createjs.Ticker.dispatchEvent = function(eventObj, target) {};

/**
 * @param {string} type
 * @return {boolean}
 */
createjs.Ticker.hasEventListener = function(type) {};

/**
 * @param {string} type
 * @param {function(!Object): boolean|function(!Object): void|{handleEvent: function(!Object): boolean}|{handleEvent: function(!Object): void}|!Function} listener
 * @param {boolean=} useCapture
 * @return {void}
 */
createjs.Ticker.off = function(type, listener, useCapture) {};

/**
 * @param {string} type
 * @param {function(!Object): boolean|function(!Object): void|{handleEvent: function(!Object): boolean}|{handleEvent: function(!Object): void}} listener
 * @param {!Object=} scope
 * @param {boolean=} once
 * @param {?=} data
 * @param {boolean=} useCapture
 * @return {!Function|!Object}
 */
createjs.Ticker.on = function(type, listener, scope, once, data, useCapture) {};

/**
 * @param {string=} type
 * @return {void}
 */
createjs.Ticker.removeAllEventListeners = function(type) {};

/**
 * @param {string} type
 * @param {function(!Object): boolean|function(!Object): void|{handleEvent: function(!Object): boolean}|{handleEvent: function(!Object): void}|!Function} listener
 * @param {boolean=} useCapture
 * @return {void}
 */
createjs.Ticker.removeEventListener = function(type, listener, useCapture) {};

/**
 * @return {string}
 */
createjs.Ticker.toString = function() {};

/**
 * @param {string} type
 * @return {boolean}
 */
createjs.Ticker.willTrigger = function(type) {};
/**
 * @constructor
 * @struct
 */
createjs.TickerEvent = function() {};
 /** @type {!Object} */
createjs.TickerEvent.prototype.target;
 /** @type {string} */
createjs.TickerEvent.prototype.type;
 /** @type {boolean} */
createjs.TickerEvent.prototype.paused;
 /** @type {number} */
createjs.TickerEvent.prototype.delta;
 /** @type {number} */
createjs.TickerEvent.prototype.time;
 /** @type {number} */
createjs.TickerEvent.prototype.runTime;
/**
 * @constructor
 * @struct
 */
createjs.Touch = function() {};

/**
 * @param {!createjs.Stage} stage
 * @return {void}
 */
createjs.Touch.disable = function(stage) {};

/**
 * @param {!createjs.Stage} stage
 * @param {boolean=} singleTouch
 * @param {boolean=} allowDefault
 * @return {boolean}
 */
createjs.Touch.enable = function(stage, singleTouch, allowDefault) {};

/**
 * @return {boolean}
 */
createjs.Touch.isSupported = function() {};
/**
 * @constructor
 * @struct
 */
createjs.UID = function() {};

/**
 * @return {number}
 */
createjs.UID.get = function() {};
