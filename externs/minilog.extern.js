/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/minilog/index.d.ts:
/**
 * @record
 * @struct
 */
function Minilog() {}

/**
 * @param {...?} msg
 * @return {?}
 */
Minilog.prototype.debug = function(msg) {};

/**
 * @param {...?} msg
 * @return {?}
 */
Minilog.prototype.info = function(msg) {};

/**
 * @param {...?} msg
 * @return {?}
 */
Minilog.prototype.log = function(msg) {};

/**
 * @param {...?} msg
 * @return {?}
 */
Minilog.prototype.warn = function(msg) {};

/**
 * @param {...?} msg
 * @return {?}
 */
Minilog.prototype.error = function(msg) {};

/**
 * @param {string} namespace
 * @return {?}
 */
function Minilog(namespace) {}

/**
 * @return {?}
 */
Minilog.enable = function() {};

/**
 * @return {?}
 */
Minilog.disable = function() {};

/**
 * @param {?} dest
 * @return {!Minilog.Transform}
 */
Minilog.pipe = function(dest) {};
 /** @type {!Minilog.Filter} */
Minilog.suggest;
 /** @type {!Minilog.MinilogBackends} */
Minilog.backends;
 /** @type {?} */
Minilog.defaultBackend;
 /** @type {string} */
Minilog.defaultFormatter;
/**
 * @extends {Minilog.Transform}
 * @constructor
 * @struct
 */
Minilog.Filter = function() {};
 /** @type {boolean} */
Minilog.Filter.prototype.defaultResult;
 /** @type {boolean} */
Minilog.Filter.prototype.enabled;

/**
 * Adds an entry to the whitelist
 * Returns this filter
 * @param {?} name
 * @param {?=} level
 * @return {!Minilog.Filter}
 */
Minilog.Filter.prototype.allow = function(name, level) {};

/**
 * Adds an entry to the blacklist
 * Returns this filter
 * @param {?} name
 * @param {?=} level
 * @return {!Minilog.Filter}
 */
Minilog.Filter.prototype.deny = function(name, level) {};

/**
 * Empties the whitelist and blacklist
 * Returns this filter
 * @return {!Minilog.Filter}
 */
Minilog.Filter.prototype.clear = function() {};

/**
 * @param {?} name
 * @param {?} level
 * @return {boolean}
 */
Minilog.Filter.prototype.test = function(name, level) {};
/**
 * @record
 * @struct
 */
Minilog.MinilogBackends = function() {};
 /** @type {?} */
Minilog.MinilogBackends.prototype.array;
 /** @type {?} */
Minilog.MinilogBackends.prototype.browser;
 /** @type {!Minilog.Console} */
Minilog.MinilogBackends.prototype.console;
 /** @type {?} */
Minilog.MinilogBackends.prototype.localstorage;
 /** @type {?} */
Minilog.MinilogBackends.prototype.jQuery;
/**
 * @extends {Minilog.Transform}
 * @constructor
 * @struct
 */
Minilog.Console = function() {};
 /** @type {!Array<string>} */
Minilog.Console.prototype.formatters;
 /** @type {!Minilog.Transform} */
Minilog.Console.prototype.color;
 /** @type {!Minilog.Transform} */
Minilog.Console.prototype.minilog;
 /** @type {!Minilog.Transform} */
Minilog.Console.prototype.formatClean;
 /** @type {!Minilog.Transform} */
Minilog.Console.prototype.formatColor;
 /** @type {!Minilog.Transform} */
Minilog.Console.prototype.formatNpm;
 /** @type {!Minilog.Transform} */
Minilog.Console.prototype.formatLearnboost;
 /** @type {!Minilog.Transform} */
Minilog.Console.prototype.formatMinilog;
 /** @type {!Minilog.Transform} */
Minilog.Console.prototype.formatWithStack;
/**
 * @constructor
 * @struct
 */
Minilog.Transform = function() {};

/**
 * @param {?} name
 * @param {?} level
 * @param {?} args
 * @return {void}
 */
Minilog.Transform.prototype.write = function(name, level, args) {};

/**
 * @param {?} dest
 * @return {?}
 */
Minilog.Transform.prototype.pipe = function(dest) {};

/**
 * @param {?} from
 * @return {!Minilog.Transform}
 */
Minilog.Transform.prototype.unpipe = function(from) {};

/**
 * @param {?} dest
 * @return {void}
 */
Minilog.Transform.prototype.mixin = function(dest) {};

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
