/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/httperr/index.d.ts:
/**
 * @record
 * @struct
 */
function HttpErr() {}
 /** @type {?} */
HttpErr.prototype.HttpError;
 /** @type {?} */
HttpErr.prototype.badRequest;
 /** @type {?} */
HttpErr.prototype.unauthorized;
 /** @type {?} */
HttpErr.prototype.paymentRequired;
 /** @type {?} */
HttpErr.prototype.forbidden;
 /** @type {?} */
HttpErr.prototype.notFound;
 /** @type {?} */
HttpErr.prototype.methodNotAllowed;
 /** @type {?} */
HttpErr.prototype.notAcceptable;
 /** @type {?} */
HttpErr.prototype.proxyAuthenticationRequired;
 /** @type {?} */
HttpErr.prototype.requestTimeout;
 /** @type {?} */
HttpErr.prototype.conflict;
 /** @type {?} */
HttpErr.prototype.gone;
 /** @type {?} */
HttpErr.prototype.lengthRequired;
 /** @type {?} */
HttpErr.prototype.preconditionFailed;
 /** @type {?} */
HttpErr.prototype.requestEntityTooLarge;
 /** @type {?} */
HttpErr.prototype.requestUriTooLong;
 /** @type {?} */
HttpErr.prototype.unsupportedMediaType;
 /** @type {?} */
HttpErr.prototype.requestedRangeNotSatisfiable;
 /** @type {?} */
HttpErr.prototype.expectationFailed;
 /** @type {?} */
HttpErr.prototype.imATeapot;
 /** @type {?} */
HttpErr.prototype.authenticationTimeout;
 /** @type {?} */
HttpErr.prototype.enhanceYourCalm;
 /** @type {?} */
HttpErr.prototype.unprocessableEntity;
 /** @type {?} */
HttpErr.prototype.locked;
 /** @type {?} */
HttpErr.prototype.methodFailure;
 /** @type {?} */
HttpErr.prototype.failedDependency;
 /** @type {?} */
HttpErr.prototype.unorderedCollection;
 /** @type {?} */
HttpErr.prototype.upgradeRequired;
 /** @type {?} */
HttpErr.prototype.preconditionRequired;
 /** @type {?} */
HttpErr.prototype.tooManyRequests;
 /** @type {?} */
HttpErr.prototype.requestHeaderFieldsTooLarge;
 /** @type {?} */
HttpErr.prototype.loginTimeout;
 /** @type {?} */
HttpErr.prototype.noResponse;
 /** @type {?} */
HttpErr.prototype.retryWith;
 /** @type {?} */
HttpErr.prototype.blockedByWindowsParentalControls;
 /** @type {?} */
HttpErr.prototype.redirect;
 /** @type {?} */
HttpErr.prototype.unavailableForLegalReasons;
 /** @type {?} */
HttpErr.prototype.requestHeaderTooLarge;
 /** @type {?} */
HttpErr.prototype.certError;
 /** @type {?} */
HttpErr.prototype.noCert;
 /** @type {?} */
HttpErr.prototype.httpToHttps;
 /** @type {?} */
HttpErr.prototype.clientClosedRequest;
 /** @type {?} */
HttpErr.prototype.internalServerError;
 /** @type {?} */
HttpErr.prototype.notImplemented;
 /** @type {?} */
HttpErr.prototype.badGateway;
 /** @type {?} */
HttpErr.prototype.serviceUnavailable;
 /** @type {?} */
HttpErr.prototype.gatewayTimeout;
 /** @type {?} */
HttpErr.prototype.httpVersionNotSupported;
 /** @type {?} */
HttpErr.prototype.variantAlsoNegotiates;
 /** @type {?} */
HttpErr.prototype.insufficientStorage;
 /** @type {?} */
HttpErr.prototype.loopDetected;
 /** @type {?} */
HttpErr.prototype.bandwidthLimitExceeded;
 /** @type {?} */
HttpErr.prototype.notExtended;
 /** @type {?} */
HttpErr.prototype.networkAuthenticationRequired;
 /** @type {?} */
HttpErr.prototype.originError;
 /** @type {?} */
HttpErr.prototype.connectionTimedOut;
 /** @type {?} */
HttpErr.prototype.proxyDeclinedRequest;
 /** @type {?} */
HttpErr.prototype.aTimeoutOccured;
 /** @type {?} */
HttpErr.prototype.networkReadTimeoutError;
 /** @type {?} */
HttpErr.prototype.networkConnectTimeoutError;
 /** @type {?} */
HttpErr.prototype.BadRequest;
 /** @type {?} */
HttpErr.prototype.Unauthorized;
 /** @type {?} */
HttpErr.prototype.PaymentRequired;
 /** @type {?} */
HttpErr.prototype.Forbidden;
 /** @type {?} */
HttpErr.prototype.NotFound;
 /** @type {?} */
HttpErr.prototype.MethodNotAllowed;
 /** @type {?} */
HttpErr.prototype.NotAcceptable;
 /** @type {?} */
HttpErr.prototype.ProxyAuthenticationRequired;
 /** @type {?} */
HttpErr.prototype.RequestTimeout;
 /** @type {?} */
HttpErr.prototype.Conflict;
 /** @type {?} */
HttpErr.prototype.Gone;
 /** @type {?} */
HttpErr.prototype.LengthRequired;
 /** @type {?} */
HttpErr.prototype.PreconditionFailed;
 /** @type {?} */
HttpErr.prototype.RequestEntityTooLarge;
 /** @type {?} */
HttpErr.prototype.RequestUriTooLong;
 /** @type {?} */
HttpErr.prototype.UnsupportedMediaType;
 /** @type {?} */
HttpErr.prototype.RequestedRangeNotSatisfiable;
 /** @type {?} */
HttpErr.prototype.ExpectationFailed;
 /** @type {?} */
HttpErr.prototype.ImATeapot;
 /** @type {?} */
HttpErr.prototype.AuthenticationTimeout;
 /** @type {?} */
HttpErr.prototype.EnhanceYourCalm;
 /** @type {?} */
HttpErr.prototype.UnprocessableEntity;
 /** @type {?} */
HttpErr.prototype.Locked;
 /** @type {?} */
HttpErr.prototype.MethodFailure;
 /** @type {?} */
HttpErr.prototype.FailedDependency;
 /** @type {?} */
HttpErr.prototype.UnorderedCollection;
 /** @type {?} */
HttpErr.prototype.UpgradeRequired;
 /** @type {?} */
HttpErr.prototype.PreconditionRequired;
 /** @type {?} */
HttpErr.prototype.TooManyRequests;
 /** @type {?} */
HttpErr.prototype.RequestHeaderFieldsTooLarge;
 /** @type {?} */
HttpErr.prototype.LoginTimeout;
 /** @type {?} */
HttpErr.prototype.NoResponse;
 /** @type {?} */
HttpErr.prototype.RetryWith;
 /** @type {?} */
HttpErr.prototype.BlockedByWindowsParentalControls;
 /** @type {?} */
HttpErr.prototype.Redirect;
 /** @type {?} */
HttpErr.prototype.UnavailableForLegalReasons;
 /** @type {?} */
HttpErr.prototype.RequestHeaderTooLarge;
 /** @type {?} */
HttpErr.prototype.CertError;
 /** @type {?} */
HttpErr.prototype.NoCert;
 /** @type {?} */
HttpErr.prototype.HttpToHttps;
 /** @type {?} */
HttpErr.prototype.ClientClosedRequest;
 /** @type {?} */
HttpErr.prototype.InternalServerError;
 /** @type {?} */
HttpErr.prototype.NotImplemented;
 /** @type {?} */
HttpErr.prototype.BadGateway;
 /** @type {?} */
HttpErr.prototype.ServiceUnavailable;
 /** @type {?} */
HttpErr.prototype.GatewayTimeout;
 /** @type {?} */
HttpErr.prototype.HttpVersionNotSupported;
 /** @type {?} */
HttpErr.prototype.VariantAlsoNegotiates;
 /** @type {?} */
HttpErr.prototype.InsufficientStorage;
 /** @type {?} */
HttpErr.prototype.LoopDetected;
 /** @type {?} */
HttpErr.prototype.BandwidthLimitExceeded;
 /** @type {?} */
HttpErr.prototype.NotExtended;
 /** @type {?} */
HttpErr.prototype.NetworkAuthenticationRequired;
 /** @type {?} */
HttpErr.prototype.OriginError;
 /** @type {?} */
HttpErr.prototype.ConnectionTimedOut;
 /** @type {?} */
HttpErr.prototype.ProxyDeclinedRequest;
 /** @type {?} */
HttpErr.prototype.ATimeoutOccured;
 /** @type {?} */
HttpErr.prototype.NetworkReadTimeoutError;
 /** @type {?} */
HttpErr.prototype.NetworkConnectTimeoutError;

/* TODO: PropertySignature: 400 */

/* TODO: PropertySignature: 401 */

/* TODO: PropertySignature: 402 */

/* TODO: PropertySignature: 403 */

/* TODO: PropertySignature: 404 */

/* TODO: PropertySignature: 405 */

/* TODO: PropertySignature: 406 */

/* TODO: PropertySignature: 407 */

/* TODO: PropertySignature: 408 */

/* TODO: PropertySignature: 409 */

/* TODO: PropertySignature: 410 */

/* TODO: PropertySignature: 411 */

/* TODO: PropertySignature: 412 */

/* TODO: PropertySignature: 413 */

/* TODO: PropertySignature: 414 */

/* TODO: PropertySignature: 415 */

/* TODO: PropertySignature: 416 */

/* TODO: PropertySignature: 417 */

/* TODO: PropertySignature: 418 */

/* TODO: PropertySignature: 419 */

/* TODO: PropertySignature: 420 */

/* TODO: PropertySignature: 422 */

/* TODO: PropertySignature: 423 */

/* TODO: PropertySignature: 424 */

/* TODO: PropertySignature: 425 */

/* TODO: PropertySignature: 426 */

/* TODO: PropertySignature: 428 */

/* TODO: PropertySignature: 429 */

/* TODO: PropertySignature: 431 */

/* TODO: PropertySignature: 440 */

/* TODO: PropertySignature: 444 */

/* TODO: PropertySignature: 449 */

/* TODO: PropertySignature: 450 */

/* TODO: PropertySignature: 451 */

/* TODO: PropertySignature: 494 */

/* TODO: PropertySignature: 495 */

/* TODO: PropertySignature: 496 */

/* TODO: PropertySignature: 497 */

/* TODO: PropertySignature: 499 */

/* TODO: PropertySignature: 500 */

/* TODO: PropertySignature: 501 */

/* TODO: PropertySignature: 502 */

/* TODO: PropertySignature: 503 */

/* TODO: PropertySignature: 504 */

/* TODO: PropertySignature: 505 */

/* TODO: PropertySignature: 506 */

/* TODO: PropertySignature: 507 */

/* TODO: PropertySignature: 508 */

/* TODO: PropertySignature: 509 */

/* TODO: PropertySignature: 510 */

/* TODO: PropertySignature: 511 */

/* TODO: PropertySignature: 520 */

/* TODO: PropertySignature: 522 */

/* TODO: PropertySignature: 523 */

/* TODO: PropertySignature: 524 */

/* TODO: PropertySignature: 598 */

/* TODO: PropertySignature: 599 */

/**
 * Creates a new error type for the given HTTP error status.
 *                          new error with the config argument immediately after the error
 *                          is created by the factory. Can be used to process additional
 *                          error-specific configuration parameters.
 * @param {number} status
 * @param {string} title
 * @param {?=} init
 * @return {?}
 */
HttpErr.prototype.createHttpError = function(status, title, init) {};
/**
 * @record
 * @struct
 */
function HttpErrorStatic() {}

/* TODO: ConstructSignature:  */
/**
 * @record
 * @struct
 */
function HttpError() {}
 /** @type {string} */
HttpError.prototype.title;
 /** @type {string} */
HttpError.prototype.code;
 /** @type {number} */
HttpError.prototype.statusCode;

/**
 * @param {...(string|!RegExp)} skip
 * @return {?}
 */
HttpError.prototype.toObject = function(skip) {};
/**
 * @record
 * @struct
 */
function Config() {}
 /** @type {string} */
Config.prototype.message;
 /** @type {!Error} */
Config.prototype.cause;
 /** @type {string} */
Config.prototype.details;
 /** @type {!Array<string>} */
Config.prototype.allowed;
 /** @type {?} */
Config.prototype.retryAfter;
 /** @type {?} */
Config.prototype.parameters;
 /** @type {?} */
Config.prototype.location;
/**
 * @record
 * @struct
 */
function ErrorBuilder() {}

/* TODO: CallSignature:  */

/* TODO: ConstructSignature:  */
 /** @type {?} */
var _;

/* TODO: ExportAssignment in  */
