/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/archiver/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/**
 * @param {string} format
 * @param {?=} options
 * @return {!archiver.Archiver}
 */
function archiver(format, options) {}

/** @typedef {string} */
archiver.Format;

/**
 * @param {string} format
 * @param {?=} options
 * @return {!archiver.Archiver}
 */
archiver.create = function(format, options) {};

/**
 * @param {string} format
 * @param {!Function} module
 * @return {void}
 */
archiver.registerFormat = function(format, module) {};
/**
 * @record
 * @struct
 */
archiver.EntryData = function() {};
 /** @type {string} */
archiver.EntryData.prototype.name;
 /** @type {string} */
archiver.EntryData.prototype.prefix;
 /** @type {string} */
archiver.EntryData.prototype.stats;
/**
 * @record
 * @struct
 */
archiver.Archiver = function() {};

/**
 * @return {Archiver}
 */
archiver.Archiver.prototype.abort = function() {};

/**
 * @param {(string|!internal.Readable|?)} source
 * @param {!archiver.EntryData=} name
 * @return {Archiver}
 */
archiver.Archiver.prototype.append = function(source, name) {};

/**
 * @param {string} dirpath
 * @param {(string|!archiver.EntryData)} options
 * @param {!archiver.EntryData=} data
 * @return {Archiver}
 */
archiver.Archiver.prototype.directory = function(dirpath, options, data) {};

/**
 * @param {string} filename
 * @param {!archiver.EntryData} data
 * @return {Archiver}
 */
archiver.Archiver.prototype.file = function(filename, data) {};

/**
 * @param {string} pattern
 * @param {!G.IOptions=} options
 * @param {!archiver.EntryData=} data
 * @return {Archiver}
 */
archiver.Archiver.prototype.glob = function(pattern, options, data) {};

/**
 * @return {!Promise<void>}
 */
archiver.Archiver.prototype.finalize = function() {};

/**
 * @param {string} format
 * @return {Archiver}
 */
archiver.Archiver.prototype.setFormat = function(format) {};

/**
 * @param {!Function} module
 * @return {Archiver}
 */
archiver.Archiver.prototype.setModule = function(module) {};

/**
 * @return {number}
 */
archiver.Archiver.prototype.pointer = function() {};

/**
 * @param {!Function} plugin
 * @return {Archiver}
 */
archiver.Archiver.prototype.use = function(plugin) {};

/**
 * @param {string} filepath
 * @param {string} target
 * @return {Archiver}
 */
archiver.Archiver.prototype.symlink = function(filepath, target) {};

/** @typedef {?} */
archiver.ArchiverOptions;
/**
 * @record
 * @struct
 */
archiver.CoreOptions = function() {};
 /** @type {number} */
archiver.CoreOptions.prototype.statConcurrency;
/**
 * @record
 * @struct
 */
archiver.TransformOptions = function() {};
 /** @type {boolean} */
archiver.TransformOptions.prototype.allowHalfOpen;
 /** @type {boolean} */
archiver.TransformOptions.prototype.readableObjectMode;
 /** @type {boolean} */
archiver.TransformOptions.prototype.writeableObjectMode;
 /** @type {boolean} */
archiver.TransformOptions.prototype.decodeStrings;
 /** @type {string} */
archiver.TransformOptions.prototype.encoding;
 /** @type {number} */
archiver.TransformOptions.prototype.highWaterMark;
 /** @type {boolean} */
archiver.TransformOptions.prototype.objectmode;
/**
 * @record
 * @struct
 */
archiver.ZipOptions = function() {};
 /** @type {string} */
archiver.ZipOptions.prototype.comment;
 /** @type {boolean} */
archiver.ZipOptions.prototype.forceLocalTime;
 /** @type {boolean} */
archiver.ZipOptions.prototype.forceZip64;
 /** @type {boolean} */
archiver.ZipOptions.prototype.store;
 /** @type {!ZlibOptions} */
archiver.ZipOptions.prototype.zlib;
/**
 * @record
 * @struct
 */
archiver.TarOptions = function() {};
 /** @type {boolean} */
archiver.TarOptions.prototype.gzip;
 /** @type {!ZlibOptions} */
archiver.TarOptions.prototype.gzipOptions;

/* TODO: ExportAssignment in  */
