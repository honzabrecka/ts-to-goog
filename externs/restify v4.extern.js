/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/restify v4/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */
/**
 * @record
 * @struct
 */
function addressInterface() {}
 /** @type {number} */
addressInterface.prototype.port;
 /** @type {string} */
addressInterface.prototype.family;
 /** @type {string} */
addressInterface.prototype.address;
/**
 * @record
 * @struct
 */
function requestFileInterface() {}
 /** @type {string} */
requestFileInterface.prototype.path;
 /** @type {string} */
requestFileInterface.prototype.type;
/**
 * @record
 * @struct
 */
function requestAuthorization() {}
 /** @type {string} */
requestAuthorization.prototype.scheme;
 /** @type {string} */
requestAuthorization.prototype.credentials;
 /** @type {?} */
requestAuthorization.prototype.basic;
/**
 * @record
 * @struct
 */
function Request() {}
 /** @type {!Logger} */
Request.prototype.log;
 /** @type {?} */
Request.prototype.query;
 /** @type {boolean} */
Request.prototype.secure;
 /** @type {?} */
Request.prototype.params;
 /** @type {?} */
Request.prototype.files;
 /** @type {?} */
Request.prototype.body;
 /** @type {string} */
Request.prototype.username;
 /** @type {?} */
Request.prototype.authorization;
 /** @type {!Array<?>} */
Request.prototype.timers;

/**
 * builds an absolute URI for the request.
 * @param {string} path
 * @return {string}
 */
Request.prototype.absoluteUri = function(path) {};

/**
 * returns any header off the request. also, 'correct' any
 * correctly spelled 'referrer' header to the actual spelling used.
 * @param {string} name
 * @param {string=} value
 * @return {string}
 */
Request.prototype.header = function(name, value) {};

/**
 * returns any trailer header off the request. also, 'correct' any
 * correctly spelled 'referrer' header to the actual spelling used.
 * @param {string} name
 * @param {string=} value
 * @return {string}
 */
Request.prototype.trailer = function(name, value) {};

/**
 * checks if the accept header is present and has the value requested.
 * e.g., req.accepts('html');
 * @param {(string|!Array<string>)} types
 * @return {boolean}
 */
Request.prototype.accepts = function(types) {};

/**
 * checks if the request accepts the encoding types.
 * @param {(string|!Array<string>)} types
 * @return {boolean}
 */
Request.prototype.acceptsEncoding = function(types) {};

/**
 * Check if the incoming request contains the Content-Type header field, and
 * if it contains the given mime type.
 * @param {string} type
 * @return {boolean}
 */
Request.prototype.is = function(type) {};

/**
 * Check if the incoming request is chunked.
 * @return {boolean}
 */
Request.prototype.isChunked = function() {};

/**
 * Check if the incoming request is kept alive.
 * @return {boolean}
 */
Request.prototype.isKeepAlive = function() {};

/**
 * Check if the incoming request has been upgraded.
 * @return {boolean}
 */
Request.prototype.isUpgradeRequest = function() {};

/**
 * Check if the incoming request is an upload verb.
 * @return {boolean}
 */
Request.prototype.isUpload = function() {};

/**
 * retrieves the user-agent header.
 * @return {string}
 */
Request.prototype.userAgent = function() {};

/**
 * Start the timer for a request handler function. You must explicitly invoke
 * endHandlerTimer() after invoking this function. Otherwise timing information
 * will be inaccurate.
 * @param {string} handlerName
 * @return {void}
 */
Request.prototype.startHandlerTimer = function(handlerName) {};

/**
 * Stop the timer for a request handler function.
 * @param {string} handlerName
 * @return {void}
 */
Request.prototype.endHandlerTimer = function(handlerName) {};

/**
 * @param {string} component
 * @return {?}
 */
Request.prototype.getLogger = function(component) {};

/**
 * gets the content-length header off the request.
 * @return {number}
 */
Request.prototype.getContentLength = function() {};

/**
 * @see getContentLength
 * @return {number}
 */
Request.prototype.contentLength = function() {};

/**
 * gets the content-type header.
 * @return {string}
 */
Request.prototype.getContentType = function() {};

/**
 * @see getContentType
 * @return {string}
 */
Request.prototype.contentType = function() {};

/**
 * retrieves the complete URI requested by the client.
 * @return {string}
 */
Request.prototype.getHref = function() {};

/**
 * @see getHref
 * @return {string}
 */
Request.prototype.href = function() {};

/**
 * retrieves the request uuid. was created when the request was setup.
 * @return {string}
 */
Request.prototype.getId = function() {};

/**
 * @see getId
 * @return {string}
 */
Request.prototype.id = function() {};

/**
 * retrieves the cleaned up url path.
 * e.g., /foo?a=1  =>  /foo
 * @return {string}
 */
Request.prototype.getPath = function() {};

/**
 * @see getPath
 * @return {string}
 */
Request.prototype.path = function() {};

/**
 * returns the raw query string
 * @return {string}
 */
Request.prototype.getQuery = function() {};

/**
 * returns ms since epoch when request was setup.
 * @return {number}
 */
Request.prototype.time = function() {};

/**
 * returns a parsed URL object.
 * @return {!Url}
 */
Request.prototype.getUrl = function() {};

/**
 * returns the accept-version header.
 * @return {string}
 */
Request.prototype.getVersion = function() {};

/**
 * @see getVersion
 * @return {string}
 */
Request.prototype.version = function() {};

/**
 * Check if the incoming request is encrypted.
 * @return {boolean}
 */
Request.prototype.isSecure = function() {};
/**
 * @record
 * @struct
 */
function HandlerTiming() {}
 /** @type {string} */
HandlerTiming.prototype.name;
 /** @type {!Array<?>} */
HandlerTiming.prototype.time;
/**
 * @record
 * @struct
 */
function Response() {}
 /** @type {number} */
Response.prototype.code;
 /** @type {number} */
Response.prototype.contentLength;
 /** @type {string} */
Response.prototype.contentType;
 /** @type {?} */
Response.prototype.headers;
 /** @type {string} */
Response.prototype.id;

/**
 * @param {string} key
 * @param {?=} value
 * @return {?}
 */
Response.prototype.header = function(key, value) {};

/**
 * @param {?=} type
 * @param {?=} options
 * @return {?}
 */
Response.prototype.cache = function(type, options) {};

/**
 * @return {?}
 */
Response.prototype.noCache = function() {};

/**
 * @param {number} code
 * @return {?}
 */
Response.prototype.status = function(code) {};

/**
 * @param {?=} status
 * @param {?=} body
 * @param {?=} headers
 * @return {?}
 */
Response.prototype.send = function(status, body, headers) {};

/**
 * @param {?=} status
 * @param {?=} body
 * @param {?=} headers
 * @return {?}
 */
Response.prototype.json = function(status, body, headers) {};

/**
 * @param {string} value
 * @return {void}
 */
Response.prototype.charSet = function(value) {};
/**
 * @record
 * @struct
 */
function RouteSpec() {}
 /** @type {string} */
RouteSpec.prototype.method;
 /** @type {string} */
RouteSpec.prototype.name;
 /** @type {(string|!RegExp)} */
RouteSpec.prototype.path;
 /** @type {!Array<string>} */
RouteSpec.prototype.versions;
/**
 * @record
 * @struct
 */
function Route() {}
 /** @type {string} */
Route.prototype.name;
 /** @type {string} */
Route.prototype.method;
 /** @type {?} */
Route.prototype.path;
 /** @type {?} */
Route.prototype.spec;
 /** @type {!Array<string>} */
Route.prototype.types;
 /** @type {!Array<string>} */
Route.prototype.versions;
/**
 * @record
 * @struct
 */
function RouteOptions() {}
 /** @type {string} */
RouteOptions.prototype.name;
 /** @type {string} */
RouteOptions.prototype.method;
 /** @type {(string|!RegExp)} */
RouteOptions.prototype.path;
 /** @type {(string|!RegExp)} */
RouteOptions.prototype.url;
 /** @type {!RegExp} */
RouteOptions.prototype.urlParamPattern;
 /** @type {(string|!Array<string>)} */
RouteOptions.prototype.contentType;
 /** @type {(string|!Array<string>)} */
RouteOptions.prototype.versions;
/**
 * @record
 * @struct
 */
function RoutePathRegex() {}
 /** @type {!Array<string>} */
RoutePathRegex.prototype.restifyParams;
/**
 * @record
 * @struct
 */
function Router() {}
 /** @type {string} */
Router.prototype.name;
 /** @type {?} */
Router.prototype.mounts;
 /** @type {!Array<string>} */
Router.prototype.versions;
 /** @type {!Array<string>} */
Router.prototype.contentType;
 /** @type {?} */
Router.prototype.routes;
 /** @type {?} */
Router.prototype.log;

/**
 * @return {string}
 */
Router.prototype.toString = function() {};

/**
 * Takes an object of route params and query params, and 'renders' a URL
 * @param {string} routeName
 * @param {?} params
 * @param {?=} query
 * @return {string}
 */
Router.prototype.render = function(routeName, params, query) {};

/**
 * adds a route.
 * @param {?} options
 * @return {(string|boolean)}
 */
Router.prototype.mount = function(options) {};

/**
 * unmounts a route.
 * @param {string} name
 * @return {(string|boolean)}
 */
Router.prototype.unmount = function(name) {};

/**
 * finds the route for a given request and response.
 * @param {?} req
 * @param {?} res
 * @param {?} callback
 * @return {void}
 */
Router.prototype.find = function(req, res, callback) {};
/**
 * @record
 * @struct
 */
function Server() {}
 /** @type {string} */
Server.prototype.name;
 /** @type {string} */
Server.prototype.version;
 /** @type {?} */
Server.prototype.log;
 /** @type {!Array<string>} */
Server.prototype.acceptable;
 /** @type {string} */
Server.prototype.url;
 /** @type {!Server} */
Server.prototype.server;
 /** @type {?} */
Server.prototype.router;
 /** @type {!Array<?>} */
Server.prototype.routes;

/**
 * @param {(?|!Array<?>)} handler
 * @param {...?|!Array<?>} handlers
 * @return {?}
 */
Server.prototype.use = function(handler, handlers) {};

/**
 * @param {?} route
 * @param {(?|!Array<?>)} routeCallBack
 * @param {...?|!Array<?>} routeCallBacks
 * @return {string}
 */
Server.prototype.post = function(route, routeCallBack, routeCallBacks) {};

/**
 * @param {?} route
 * @param {(?|!Array<?>)} routeCallBack
 * @param {...?|!Array<?>} routeCallBacks
 * @return {string}
 */
Server.prototype.patch = function(route, routeCallBack, routeCallBacks) {};

/**
 * @param {?} route
 * @param {(?|!Array<?>)} routeCallBack
 * @param {...?|!Array<?>} routeCallBacks
 * @return {string}
 */
Server.prototype.put = function(route, routeCallBack, routeCallBacks) {};

/**
 * @param {?} route
 * @param {(?|!Array<?>)} routeCallBack
 * @param {...?|!Array<?>} routeCallBacks
 * @return {string}
 */
Server.prototype.del = function(route, routeCallBack, routeCallBacks) {};

/**
 * @param {?} route
 * @param {(?|!Array<?>)} routeCallBack
 * @param {...?|!Array<?>} routeCallBacks
 * @return {string}
 */
Server.prototype.get = function(route, routeCallBack, routeCallBacks) {};

/**
 * @param {?} route
 * @param {(?|!Array<?>)} routeCallBack
 * @param {...?|!Array<?>} routeCallBacks
 * @return {string}
 */
Server.prototype.head = function(route, routeCallBack, routeCallBacks) {};

/**
 * @param {?} route
 * @param {(?|!Array<?>)} routeCallBack
 * @param {...?|!Array<?>} routeCallBacks
 * @return {string}
 */
Server.prototype.opts = function(route, routeCallBack, routeCallBacks) {};

/**
 * @return {?}
 */
Server.prototype.address = function() {};

/**
 * @param {...?} args
 * @return {?}
 */
Server.prototype.listen = function(args) {};

/**
 * @param {...?} args
 * @return {?}
 */
Server.prototype.close = function(args) {};

/**
 * @param {?} routeCallBack
 * @return {?}
 */
Server.prototype.pre = function(routeCallBack) {};

/**
 * @return {string}
 */
Server.prototype.toString = function() {};
/**
 * @record
 * @struct
 */
function ServerOptions() {}
 /** @type {string} */
ServerOptions.prototype.ca;
 /** @type {(string|!Array<string>|?|!Array<?>)} */
ServerOptions.prototype.certificate;
 /** @type {(string|!Array<string>|?|!Array<?>)} */
ServerOptions.prototype.key;
 /** @type {?} */
ServerOptions.prototype.formatters;
 /** @type {?} */
ServerOptions.prototype.log;
 /** @type {string} */
ServerOptions.prototype.name;
 /** @type {?} */
ServerOptions.prototype.spdy;
 /** @type {string} */
ServerOptions.prototype.version;
 /** @type {string} */
ServerOptions.prototype.responseTimeHeader;
 /** @type {boolean} */
ServerOptions.prototype.handleUpgrades;
 /** @type {?} */
ServerOptions.prototype.router;
 /** @type {?} */
ServerOptions.prototype.httpsServerOptions;
 /** @type {boolean} */
ServerOptions.prototype.socketio;

/**
 * @param {number} durationInMilliseconds
 * @return {?}
 */
ServerOptions.prototype.responseTimeFormatter = function(durationInMilliseconds) {};
/**
 * @record
 * @struct
 */
function ClientOptions() {}
 /** @type {string} */
ClientOptions.prototype.accept;
 /** @type {number} */
ClientOptions.prototype.connectTimeout;
 /** @type {number} */
ClientOptions.prototype.requestTimeout;
 /** @type {?} */
ClientOptions.prototype.dtrace;
 /** @type {?} */
ClientOptions.prototype.gzip;
 /** @type {?} */
ClientOptions.prototype.headers;
 /** @type {?} */
ClientOptions.prototype.log;
 /** @type {?} */
ClientOptions.prototype.retry;
 /** @type {string} */
ClientOptions.prototype.url;
 /** @type {string} */
ClientOptions.prototype.userAgent;
 /** @type {string} */
ClientOptions.prototype.version;

/**
 * @return {void}
 */
ClientOptions.prototype.signRequest = function() {};
/**
 * @record
 * @struct
 */
function Client() {}

/**
 * @param {(string|?)} opts
 * @param {?=} callback
 * @return {?}
 */
Client.prototype.get = function(opts, callback) {};

/**
 * @param {(string|?)} opts
 * @param {?=} callback
 * @return {?}
 */
Client.prototype.head = function(opts, callback) {};

/**
 * @param {(string|?)} opts
 * @param {?} object
 * @param {?=} callback
 * @return {?}
 */
Client.prototype.post = function(opts, object, callback) {};

/**
 * @param {(string|?)} opts
 * @param {?} object
 * @param {?=} callback
 * @return {?}
 */
Client.prototype.put = function(opts, object, callback) {};

/**
 * @param {(string|?)} opts
 * @param {?} object
 * @param {?=} callback
 * @return {?}
 */
Client.prototype.patch = function(opts, object, callback) {};

/**
 * @param {(string|?)} opts
 * @param {?=} callback
 * @return {?}
 */
Client.prototype.del = function(opts, callback) {};

/**
 * @param {string} username
 * @param {string} password
 * @return {?}
 */
Client.prototype.basicAuth = function(username, password) {};
/**
 * @record
 * @struct
 */
function HttpClient() {}

/**
 * @param {(string|?)=} opts
 * @param {?=} callback
 * @return {?}
 */
HttpClient.prototype.get = function(opts, callback) {};

/**
 * @param {(string|?)=} opts
 * @param {?=} callback
 * @return {?}
 */
HttpClient.prototype.head = function(opts, callback) {};

/**
 * @param {(string|?)=} opts
 * @param {?=} callback
 * @return {?}
 */
HttpClient.prototype.post = function(opts, callback) {};

/**
 * @param {(string|?)=} opts
 * @param {?=} callback
 * @return {?}
 */
HttpClient.prototype.put = function(opts, callback) {};

/**
 * @param {(string|?)=} opts
 * @param {?=} callback
 * @return {?}
 */
HttpClient.prototype.patch = function(opts, callback) {};

/**
 * @param {(string|?)=} opts
 * @param {?=} callback
 * @return {?}
 */
HttpClient.prototype.del = function(opts, callback) {};

/**
 * @param {string} username
 * @param {string} password
 * @return {?}
 */
HttpClient.prototype.basicAuth = function(username, password) {};
/**
 * @record
 * @struct
 */
function ThrottleOptions() {}
 /** @type {number} */
ThrottleOptions.prototype.burst;
 /** @type {number} */
ThrottleOptions.prototype.rate;
 /** @type {boolean} */
ThrottleOptions.prototype.ip;
 /** @type {boolean} */
ThrottleOptions.prototype.xff;
 /** @type {boolean} */
ThrottleOptions.prototype.username;
 /** @type {?} */
ThrottleOptions.prototype.tokensTable;
 /** @type {number} */
ThrottleOptions.prototype.maxKeys;
 /** @type {?} */
ThrottleOptions.prototype.overrides;
/**
 * @record
 * @struct
 */
function Next() {}

/* TODO: CallSignature:  */

/**
 * @param {?=} err
 * @return {?}
 */
Next.prototype.ifError = function(err) {};

/** @typedef {?} */
var RequestHandler;

/**
 * @param {?=} options
 * @return {?}
 */
function createServer(options) {}

/**
 * @param {?=} options
 * @return {?}
 */
function createJsonClient(options) {}

/**
 * @param {?=} options
 * @return {?}
 */
function createStringClient(options) {}

/**
 * @param {?=} options
 * @return {?}
 */
function createClient(options) {}

/**
 * @constructor
 * @struct
 * @param {?} cause
 * @param {?=} message
 */
function HttpError(cause, message) {}

/**
 * @constructor
 * @struct
 * @param {?=} message_or_cause
 * @param {?=} message
 */
function DefiniteHttpError(message_or_cause, message) {}
/**
 * @constructor
 * @struct
 */
function BadRequestError() {}
/**
 * @constructor
 * @struct
 */
function UnauthorizedError() {}
/**
 * @constructor
 * @struct
 */
function PaymentRequiredError() {}
/**
 * @constructor
 * @struct
 */
function ForbiddenError() {}
/**
 * @constructor
 * @struct
 */
function NotFoundError() {}
/**
 * @constructor
 * @struct
 */
function MethodNotAllowedError() {}
/**
 * @constructor
 * @struct
 */
function NotAcceptableError() {}
/**
 * @constructor
 * @struct
 */
function ProxyAuthenticationRequiredError() {}
/**
 * @constructor
 * @struct
 */
function RequestTimeoutError() {}
/**
 * @constructor
 * @struct
 */
function ConflictError() {}
/**
 * @constructor
 * @struct
 */
function GoneError() {}
/**
 * @constructor
 * @struct
 */
function LengthRequiredError() {}
/**
 * @constructor
 * @struct
 */
function RequestEntityTooLargeError() {}
/**
 * @constructor
 * @struct
 */
function RequesturiTooLargeError() {}
/**
 * @constructor
 * @struct
 */
function UnsupportedMediaTypeError() {}
/**
 * @constructor
 * @struct
 */
function RequestedRangeNotSatisfiableError() {}
/**
 * @constructor
 * @struct
 */
function ExpectationFailedError() {}
/**
 * @constructor
 * @struct
 */
function ImATeapotError() {}
/**
 * @constructor
 * @struct
 */
function UnprocessableEntityError() {}
/**
 * @constructor
 * @struct
 */
function LockedError() {}
/**
 * @constructor
 * @struct
 */
function FailedDependencyError() {}
/**
 * @constructor
 * @struct
 */
function UnorderedCollectionError() {}
/**
 * @constructor
 * @struct
 */
function UpgradeRequiredError() {}
/**
 * @constructor
 * @struct
 */
function PreconditionRequiredError() {}
/**
 * @constructor
 * @struct
 */
function TooManyRequestsError() {}
/**
 * @constructor
 * @struct
 */
function RequestHeaderFieldsTooLargeError() {}
/**
 * @constructor
 * @struct
 */
function InternalServerError() {}
/**
 * @constructor
 * @struct
 */
function NotImplementedError() {}
/**
 * @constructor
 * @struct
 */
function BadGatewayError() {}
/**
 * @constructor
 * @struct
 */
function ServiceUnavailableError() {}
/**
 * @constructor
 * @struct
 */
function GatewayTimeoutError() {}
/**
 * @constructor
 * @struct
 */
function HttpVersionNotSupportedError() {}
/**
 * @constructor
 * @struct
 */
function VariantAlsoNegotiatesError() {}
/**
 * @constructor
 * @struct
 */
function InsufficientStorageError() {}
/**
 * @constructor
 * @struct
 */
function BandwidthLimitExceededError() {}
/**
 * @constructor
 * @struct
 */
function NotExtendedError() {}
/**
 * @constructor
 * @struct
 */
function NetworkAuthenticationRequiredError() {}
/**
 * @constructor
 * @struct
 */
function RestError() {}
/**
 * @constructor
 * @struct
 */
function PreconditionFailedError() {}
/**
 * @constructor
 * @struct
 */
function BadDigestError() {}
/**
 * @constructor
 * @struct
 */
function BadMethodError() {}
/**
 * @constructor
 * @struct
 */
function InternalError() {}
/**
 * @constructor
 * @struct
 */
function InvalidArgumentError() {}
/**
 * @constructor
 * @struct
 */
function InvalidContentError() {}
/**
 * @constructor
 * @struct
 */
function InvalidCredentialsError() {}
/**
 * @constructor
 * @struct
 */
function InvalidHeaderError() {}
/**
 * @constructor
 * @struct
 */
function InvalidVersionError() {}
/**
 * @constructor
 * @struct
 */
function MissingParameterError() {}
/**
 * @constructor
 * @struct
 */
function NotAuthorizedError() {}
/**
 * @constructor
 * @struct
 */
function RequestExpiredError() {}
/**
 * @constructor
 * @struct
 */
function RequestThrottledError() {}
/**
 * @constructor
 * @struct
 */
function ResourceNotFoundError() {}
/**
 * @constructor
 * @struct
 */
function WrongAcceptError() {}

/**
 * @param {?} parser
 * @return {?}
 */
function acceptParser(parser) {}

/**
 * @return {?}
 */
function authorizationParser() {}

/**
 * @param {number=} skew
 * @return {?}
 */
function dateParser(skew) {}

/**
 * @param {?=} options
 * @return {?}
 */
function queryParser(options) {}

/**
 * @param {?=} options
 * @return {!Array<?>}
 */
function urlEncodedBodyParser(options) {}

/**
 * @return {?}
 */
function jsonp() {}

/**
 * @param {?=} options
 * @return {?}
 */
function gzipResponse(options) {}

/**
 * @param {?=} options
 * @return {!Array<?>}
 */
function bodyParser(options) {}

/**
 * @param {?=} options
 * @return {?}
 */
function requestLogger(options) {}

/**
 * @param {?=} options
 * @return {?}
 */
function serveStatic(options) {}

/**
 * @param {?=} options
 * @return {?}
 */
function throttle(options) {}

/**
 * @return {!Array<?>}
 */
function conditionalRequest() {}

/**
 * @param {?} options
 * @return {?}
 */
function auditLogger(options) {}

/**
 * @return {?}
 */
function fullResponse() {}
 /** @type {?} */
var defaultResponseHeaders;

/**
 * @param {?=} options
 * @return {?}
 */
function CORS(options) {}
/**
 * @record
 * @struct
 */
function CORSOptions() {}
 /** @type {!Array<string>} */
CORSOptions.prototype.origins;
 /** @type {boolean} */
CORSOptions.prototype.credentials;
 /** @type {!Array<string>} */
CORSOptions.prototype.headers;
 /** @type {?} */
var pre;
