/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/tinymce/index.d.ts:
 /** @type {?} */
var DOM;
 /** @type {?} */
var PluginManager;
 /** @type {?} */
var ScriptLoader;
 /** @type {?} */
var ThemeManager;
 /** @type {?} */
var EditorManager;
 /** @type {string} */
var baseURL;
 /** @type {?} */
var activeEditor;

/**
 * @param {string} s
 * @param {!Object} p
 * @param {!Object=} root
 * @return {void}
 */
function create(s, p, root) {}

/**
 * @param {string} n
 * @param {!Object} o
 * @return {!Object}
 */
function createNS(n, o) {}

/**
 * @param {!Object} o
 * @param {?} cb
 * @param {!Object=} s
 * @return {void}
 */
function each(o, cb, s) {}

/**
 * @param {string} s
 * @param {string} d
 * @return {void}
 */
function explode(s, d) {}

/**
 * @param {!Array<?>} a
 * @param {?} f
 * @return {!Array<?>}
 */
function grep(a, f) {}

/**
 * @param {?} item
 * @param {!Array<?>} arr
 * @return {number}
 */
function inArray(item, arr) {}

/**
 * @param {!Object} obj
 * @param {string=} type
 * @return {boolean}
 */
function is(obj, type) {}

/**
 * @param {!Object} obj
 * @return {boolean}
 */
function isArray(obj) {}

/**
 * @param {!Array<?>} items
 * @param {string=} delim
 * @param {!Object=} map
 * @return {!Object}
 */
function makeMap(items, delim, map) {}

/**
 * @param {!Array<?>} array
 * @param {?} callback
 * @return {!Array<?>}
 */
function map(array, callback) {}

/**
 * @param {string} n
 * @param {!Object=} o
 * @return {!Object}
 */
function resolve(n, o) {}

/**
 * @param {!Object} obj
 * @return {!Array<?>}
 */
function toArray(obj) {}

/**
 * @param {string} s
 * @return {string}
 */
function trim(s) {}

/**
 * @param {!Object} o
 * @param {?} f
 * @param {string=} n
 * @param {string=} s
 * @return {void}
 */
function walk(o, f, n, s) {}

/**
 * @param {?} settings
 * @return {void}
 */
function init(settings) {}
/**
 * @record
 * @struct
 */
function Settings() {}
 /** @type {boolean} */
Settings.prototype.table_toolbar;
 /** @type {string} */
Settings.prototype.auto_focus;
 /** @type {string} */
Settings.prototype.cache_suffix;
 /** @type {string} */
Settings.prototype.content_security_policy;
 /** @type {!Object} */
Settings.prototype.external_plugins;
 /** @type {boolean} */
Settings.prototype.hidden_input;
 /** @type {(string|!Array<string>)} */
Settings.prototype.plugins;
 /** @type {string} */
Settings.prototype.selector;
 /** @type {!Element} */
Settings.prototype.target;
 /** @type {boolean} */
Settings.prototype.branding;
 /** @type {string} */
Settings.prototype.custom_ui_selector;
 /** @type {boolean} */
Settings.prototype.elementpath;
 /** @type {boolean} */
Settings.prototype.event_root;
 /** @type {string} */
Settings.prototype.fixed_toolbar_container;
 /** @type {(string|number)} */
Settings.prototype.height;
 /** @type {boolean} */
Settings.prototype.inline;
 /** @type {string} */
Settings.prototype.insert_button_items;
 /** @type {string} */
Settings.prototype.insert_toolbar;
 /** @type {number} */
Settings.prototype.max_height;
 /** @type {number} */
Settings.prototype.max_width;
 /** @type {?} */
Settings.prototype.menu;
 /** @type {(string|boolean)} */
Settings.prototype.menubar;
 /** @type {(string|number)} */
Settings.prototype.min_height;
 /** @type {(string|number)} */
Settings.prototype.min_width;
 /** @type {(string|boolean)} */
Settings.prototype.preview_styles;
 /** @type {string} */
Settings.prototype.removed_menuitems;
 /** @type {(string|boolean)} */
Settings.prototype.resize;
 /** @type {string} */
Settings.prototype.selection_toolbar;
 /** @type {string} */
Settings.prototype.skin_url;
 /** @type {string} */
Settings.prototype.skin;
 /** @type {boolean} */
Settings.prototype.statusbar;
 /** @type {string} */
Settings.prototype.theme_url;
 /** @type {string} */
Settings.prototype.theme;
 /** @type {(string|boolean|!Array<string>)} */
Settings.prototype.toolbar;
 /** @type {(string|number)} */
Settings.prototype.width;
 /** @type {string} */
Settings.prototype.body_class;
 /** @type {string} */
Settings.prototype.body_id;
 /** @type {(string|!Array<string>)} */
Settings.prototype.content_css;
 /** @type {string} */
Settings.prototype.content_style;
 /** @type {boolean} */
Settings.prototype.inline_boundaries;
 /** @type {string} */
Settings.prototype.visual_anchor_class;
 /** @type {string} */
Settings.prototype.visual_table_class;
 /** @type {boolean} */
Settings.prototype.visual;
 /** @type {boolean} */
Settings.prototype.allow_conditional_comments;
 /** @type {boolean} */
Settings.prototype.allow_html_in_named_anchor;
 /** @type {boolean} */
Settings.prototype.allow_unsafe_link_target;
 /** @type {boolean} */
Settings.prototype.convert_fonts_to_spans;
 /** @type {string} */
Settings.prototype.custom_elements;
 /** @type {string} */
Settings.prototype.doctype;
 /** @type {string} */
Settings.prototype.element_format;
 /** @type {string} */
Settings.prototype.encoding;
 /** @type {string} */
Settings.prototype.entities;
 /** @type {string} */
Settings.prototype.entity_encoding;
 /** @type {string} */
Settings.prototype.extended_valid_elements;
 /** @type {boolean} */
Settings.prototype.fix_list_elements;
 /** @type {boolean} */
Settings.prototype.force_hex_style_colors;
 /** @type {string} */
Settings.prototype.forced_root_block;
 /** @type {!Object} */
Settings.prototype.forced_root_block_attrs;
 /** @type {string} */
Settings.prototype.invalid_elements;
 /** @type {(string|!Object)} */
Settings.prototype.invalid_styles;
 /** @type {boolean} */
Settings.prototype.keep_styles;
 /** @type {!Array<!RegExp>} */
Settings.prototype.protect;
 /** @type {boolean} */
Settings.prototype.remove_trailing_brs;
 /** @type {string} */
Settings.prototype.schema;
 /** @type {string} */
Settings.prototype.valid_children;
 /** @type {(string|!Object)} */
Settings.prototype.valid_classes;
 /** @type {string} */
Settings.prototype.valid_elements;
 /** @type {!Object} */
Settings.prototype.valid_styles;
 /** @type {string} */
Settings.prototype.block_formats;
 /** @type {string} */
Settings.prototype.font_formats;
 /** @type {string} */
Settings.prototype.fontsize_formats;
 /** @type {!Object} */
Settings.prototype.formats;
 /** @type {!Array<!Object>} */
Settings.prototype.removeFormat;
 /** @type {string} */
Settings.prototype.indentation;
 /** @type {!Array<!Object>} */
Settings.prototype.style_formats;
 /** @type {boolean} */
Settings.prototype.style_formats_autohide;
 /** @type {boolean} */
Settings.prototype.style_formats_merge;
 /** @type {boolean} */
Settings.prototype.browser_spellcheck;
 /** @type {boolean} */
Settings.prototype.gecko_spellcheck;
 /** @type {boolean} */
Settings.prototype.automatic_uploads;
 /** @type {string} */
Settings.prototype.file_browser_callback_types;
 /** @type {string} */
Settings.prototype.file_picker_types;
 /** @type {boolean} */
Settings.prototype.images_reuse_filename;
 /** @type {string} */
Settings.prototype.images_upload_base_path;
 /** @type {boolean} */
Settings.prototype.images_upload_credentials;
 /** @type {string} */
Settings.prototype.images_upload_url;
 /** @type {string} */
Settings.prototype.directionality;
 /** @type {string} */
Settings.prototype.language;
 /** @type {string} */
Settings.prototype.language_url;
 /** @type {boolean} */
Settings.prototype.allow_script_urls;
 /** @type {boolean} */
Settings.prototype.convert_urls;
 /** @type {string} */
Settings.prototype.document_base_url;
 /** @type {boolean} */
Settings.prototype.relative_urls;
 /** @type {boolean} */
Settings.prototype.remove_script_host;
 /** @type {string} */
Settings.prototype.anchor_bottom;
 /** @type {string} */
Settings.prototype.anchor_top;
 /** @type {boolean} */
Settings.prototype.br_in_pre;
 /** @type {number} */
Settings.prototype.custom_undo_redo_levels;
 /** @type {boolean} */
Settings.prototype.end_container_on_empty_block;
 /** @type {boolean} */
Settings.prototype.nowrap;
 /** @type {(string|boolean)} */
Settings.prototype.object_resizing;
 /** @type {boolean} */
Settings.prototype.type_ahead_urls;
 /** @type {boolean} */
Settings.prototype.autosave_ask_before_unload;
 /** @type {string} */
Settings.prototype.autosave_interval;
 /** @type {string} */
Settings.prototype.autosave_prefix;
 /** @type {boolean} */
Settings.prototype.autosave_restore_when_empty;
 /** @type {string} */
Settings.prototype.autosave_retention;
 /** @type {!Array<string>} */
Settings.prototype.imagetools_cors_hosts;
 /** @type {string} */
Settings.prototype.imagetools_proxy;
 /** @type {string} */
Settings.prototype.imagetools_toolbar;
 /** @type {string} */
Settings.prototype.imagetools_api_key;

/**
 * @param {?} editor
 * @return {void}
 */
Settings.prototype.init_instance_callback = function(editor) {};

/**
 * @param {?} edtor
 * @return {void}
 */
Settings.prototype.setup = function(edtor) {};

/**
 * @param {?} callback
 * @param {string} value
 * @return {void}
 */
Settings.prototype.color_picker_callback = function(callback, value) {};

/**
 * @param {string} field_name
 * @param {string} url
 * @param {string} type
 * @param {!Window} win
 * @return {void}
 */
Settings.prototype.file_browser_callback = function(field_name, url, type, win) {};

/**
 * @param {?} callback
 * @param {string} valud
 * @param {!Object} meta
 * @return {void}
 */
Settings.prototype.file_picker_callback = function(callback, valud, meta) {};

/**
 * @param {?} img
 * @return {void}
 */
Settings.prototype.images_dataimg_filter = function(img) {};

/**
 * @param {?} blobInfo
 * @param {?} success
 * @param {?} failure
 * @return {void}
 */
Settings.prototype.images_upload_handler = function(blobInfo, success, failure) {};

/**
 * @param {string} url
 * @param {!HTMLElement} node
 * @param {boolean} on_save
 * @param {string} name
 * @return {void}
 */
Settings.prototype.urlconverter_callback = function(url, node, on_save, name) {};
/** @const */
var settings = {};
/**
 * @record
 * @struct
 */
settings.Menu = function() {};
 /** @type {?} */
settings.Menu.prototype.file;
 /** @type {?} */
settings.Menu.prototype.edit;
 /** @type {?} */
settings.Menu.prototype.insert;
 /** @type {?} */
settings.Menu.prototype.view;
 /** @type {?} */
settings.Menu.prototype.format;
 /** @type {?} */
settings.Menu.prototype.table;
 /** @type {?} */
settings.Menu.prototype.tools;
/**
 * @record
 * @struct
 */
settings.MenuItem = function() {};
 /** @type {string} */
settings.MenuItem.prototype.title;
 /** @type {string} */
settings.MenuItem.prototype.items;
/**
 * @record
 * @struct
 */
function AddOnManager() {}

/**
 * @param {string} id
 * @param {?} addOn
 * @return {(?|!Plugin)}
 */
AddOnManager.prototype.add = function(id, addOn) {};

/**
 * @param {string} pluginName
 * @param {!Array<string>} scripts
 * @return {void}
 */
AddOnManager.prototype.addComponents = function(pluginName, scripts) {};

/**
 * @param {string} name
 * @return {(?|!Plugin)}
 */
AddOnManager.prototype.get = function(name) {};

/**
 * @param {string} name
 * @param {string} addOnUrl
 * @param {?=} success
 * @param {!Object=} scope
 * @param {?=} failure
 * @return {void}
 */
AddOnManager.prototype.load = function(name, addOnUrl, success, scope, failure) {};

/**
 * @param {string} name
 * @param {string=} languages
 * @return {void}
 */
AddOnManager.prototype.requireLangPack = function(name, languages) {};

/**
 * @constructor
 * @struct
 * @param {string} id
 * @param {?} settings
 * @param {?} editorManager
 */
function Editor(id, settings, editorManager) {}
 /** @type {?} */
Editor.prototype.$;
 /** @type {?} */
Editor.prototype.baseURI;
 /** @type {!Array<string>} */
Editor.prototype.contentCSS;
 /** @type {!Array<string>} */
Editor.prototype.contentStyles;
 /** @type {?} */
Editor.prototype.documentBaseURI;
 /** @type {?} */
Editor.prototype.dom;
 /** @type {?} */
Editor.prototype.formatter;
 /** @type {string} */
Editor.prototype.id;
 /** @type {boolean} */
Editor.prototype.initialized;
 /** @type {?} */
Editor.prototype.notificationManager;
 /** @type {?} */
Editor.prototype.parser;
 /** @type {?} */
Editor.prototype.schema;
 /** @type {?} */
Editor.prototype.selection;
 /** @type {?} */
Editor.prototype.serializer;
 /** @type {?} */
Editor.prototype.settings;
 /** @type {?} */
Editor.prototype.theme;
 /** @type {?} */
Editor.prototype.undoManager;
 /** @type {?} */
Editor.prototype.windowManager;

/**
 * @param {string} name
 * @param {!Object} settings
 * @return {void}
 */
Editor.prototype.addButton = function(name, settings) {};

/**
 * @param {string} name
 * @param {?} callback
 * @param {!Object=} scope
 * @return {void}
 */
Editor.prototype.addCommand = function(name, callback, scope) {};

/**
 * @param {?} predicate
 * @param {string} items
 * @return {void}
 */
Editor.prototype.addContextToolbar = function(predicate, items) {};

/**
 * @param {string} name
 * @param {!Object} settings
 * @return {void}
 */
Editor.prototype.addMenuItem = function(name, settings) {};

/**
 * @param {string} name
 * @param {?} callback
 * @param {!Object=} scope
 * @return {void}
 */
Editor.prototype.addQueryStateHandler = function(name, callback, scope) {};

/**
 * @param {string} name
 * @param {?} callback
 * @param {!Object=} scope
 * @return {void}
 */
Editor.prototype.addQueryValueHandler = function(name, callback, scope) {};

/**
 * @param {string} pattern
 * @param {string} desc
 * @param {string} cmdFunc
 * @param {!Object=} sc
 * @return {boolean}
 */
Editor.prototype.addShortcut = function(pattern, desc, cmdFunc, sc) {};

/**
 * @param {string} name
 * @param {!Object} settings
 * @return {void}
 */
Editor.prototype.addSidebar = function(name, settings) {};

/**
 * @param {!Element=} elm
 * @return {void}
 */
Editor.prototype.addVisual = function(elm) {};

/**
 * @param {string} url
 * @param {string} name
 * @param {string} elm
 * @return {string}
 */
Editor.prototype.convertURL = function(url, name, elm) {};

/**
 * @param {boolean=} automatic
 * @return {void}
 */
Editor.prototype.destroy = function(automatic) {};

/**
 * @param {string} name
 * @return {!Object}
 */
Editor.prototype.execCallback = function(name) {};

/**
 * @param {string} cmd
 * @param {boolean} ui
 * @param {?=} value
 * @param {!Object=} args
 * @return {void}
 */
Editor.prototype.execCommand = function(cmd, ui, value, args) {};

/**
 * @param {boolean} skipFocus
 * @return {void}
 */
Editor.prototype.focus = function(skipFocus) {};

/**
 * @return {!HTMLBodyElement}
 */
Editor.prototype.getBody = function() {};

/**
 * @return {!Element}
 */
Editor.prototype.getContainer = function() {};

/**
 * @param {!Object=} args
 * @return {string}
 */
Editor.prototype.getContent = function(args) {};

/**
 * @return {!Element}
 */
Editor.prototype.getContentAreaContainer = function() {};

/**
 * @return {!Document}
 */
Editor.prototype.getDoc = function() {};

/**
 * @return {!Element}
 */
Editor.prototype.getElement = function() {};

/**
 * @param {string} name
 * @param {string=} defaultVal
 * @return {void}
 */
Editor.prototype.getLang = function(name, defaultVal) {};

/**
 * @param {string} name
 * @param {string=} defaultVal
 * @param {string=} type
 * @return {string}
 */
Editor.prototype.getParam = function(name, defaultVal, type) {};

/**
 * @return {!Window}
 */
Editor.prototype.getWin = function() {};

/**
 * @param {string} name
 * @return {boolean}
 */
Editor.prototype.hasEventListeners = function(name) {};

/**
 * @return {void}
 */
Editor.prototype.hide = function() {};

/**
 * @return {void}
 */
Editor.prototype.init = function() {};

/**
 * @param {string} content
 * @param {!Object=} args
 * @return {void}
 */
Editor.prototype.insertContent = function(content, args) {};

/**
 * @return {boolean}
 */
Editor.prototype.isDirty = function() {};

/**
 * @return {boolean}
 */
Editor.prototype.isHidden = function() {};

/**
 * @param {!Object=} args
 * @return {string}
 */
Editor.prototype.load = function(args) {};

/**
 * @param {!Object=} args
 * @return {void}
 */
Editor.prototype.nodeChanged = function(args) {};

/**
 * @param {string} cmd
 * @return {boolean}
 */
Editor.prototype.queryCommandState = function(cmd) {};

/**
 * @param {string} cmd
 * @return {boolean}
 */
Editor.prototype.queryCommandSupported = function(cmd) {};

/**
 * @param {string} cmd
 * @return {!Object}
 */
Editor.prototype.queryCommandValue = function(cmd) {};

/**
 * @return {void}
 */
Editor.prototype.remove = function() {};

/**
 * @return {void}
 */
Editor.prototype.render = function() {};

/**
 * @param {!Object} args
 * @return {string}
 */
Editor.prototype.save = function(args) {};

/**
 * @param {string} content
 * @param {!Object=} args
 * @return {string}
 */
Editor.prototype.setContent = function(content, args) {};

/**
 * @param {boolean} state
 * @return {void}
 */
Editor.prototype.setDirty = function(state) {};

/**
 * @param {string} mode
 * @return {void}
 */
Editor.prototype.setMode = function(mode) {};

/**
 * @param {boolean} state
 * @param {number} time
 * @return {boolean}
 */
Editor.prototype.setProgressState = function(state, time) {};

/**
 * @return {void}
 */
Editor.prototype.show = function() {};

/**
 * @param {string} text
 * @return {string}
 */
Editor.prototype.translate = function(text) {};

/**
 * @param {?} callback
 * @return {!Promise<?>}
 */
Editor.prototype.uploadImages = function(callback) {};
/**
 * @record
 * @struct
 */
function EditorCommands() {}

/**
 * @param {!Object} command_list
 * @param {string=} type
 * @return {void}
 */
EditorCommands.prototype.addCommands = function(command_list, type) {};

/**
 * @param {string} command
 * @param {boolean=} ui
 * @param {!Object=} value
 * @param {!Object=} args
 * @return {boolean}
 */
EditorCommands.prototype.execCommand = function(command, ui, value, args) {};

/**
 * @param {string} command
 * @return {(number|boolean)}
 */
EditorCommands.prototype.queryCommandState = function(command) {};

/**
 * @param {string} command
 * @return {boolean}
 */
EditorCommands.prototype.queryCommandSupported = function(command) {};

/**
 * @param {string} command
 * @return {!Object}
 */
EditorCommands.prototype.queryCommandValue = function(command) {};
 /** @type {?} */
EditorManager.prototype.$;
 /** @type {?} */
EditorManager.prototype.activeEditor;
 /** @type {?} */
EditorManager.prototype.baseURI;
 /** @type {string} */
EditorManager.prototype.baseURL;
 /** @type {string} */
EditorManager.prototype.documentBaseURL;
 /** @type {!Array<?>} */
EditorManager.prototype.editors;
 /** @type {!Object} */
EditorManager.prototype.i18n;
 /** @type {string} */
EditorManager.prototype.majorVersion;
 /** @type {string} */
EditorManager.prototype.minorVersion;
 /** @type {string} */
EditorManager.prototype.releaseDate;
 /** @type {string} */
EditorManager.prototype.suffix;

/**
 * @param {?} editor
 * @return {?}
 */
EditorManager.prototype.add = function(editor) {};

/**
 * @param {string} code
 * @param {!Object} items
 * @return {void}
 */
EditorManager.prototype.addI18n = function(code, items) {};

/**
 * @param {string} id
 * @param {!Object} settings
 * @return {?}
 */
EditorManager.prototype.createEditor = function(id, settings) {};

/**
 * @param {string} cmd
 * @param {boolean=} ui
 * @param {string=} value
 * @return {boolean}
 */
EditorManager.prototype.execCommand = function(cmd, ui, value) {};

/**
 * @param {string} id
 * @return {?}
 */
EditorManager.prototype.get = function(id) {};

/**
 * @param {?} settings
 * @return {!Promise<?>}
 */
EditorManager.prototype.init = function(settings) {};

/**
 * @param {!Object} defaultSettings
 * @return {void}
 */
EditorManager.prototype.overrideDefaults = function(defaultSettings) {};

/**
 * @param {?} selector
 * @return {?}
 */
EditorManager.prototype.remove = function(selector) {};

/**
 * @param {?} editor
 * @return {void}
 */
EditorManager.prototype.setActive = function(editor) {};

/**
 * @param {string} text
 * @return {string}
 */
EditorManager.prototype.translate = function(text) {};

/**
 * @return {void}
 */
EditorManager.prototype.triggerSave = function() {};
/**
 * @record
 * @struct
 */
function Env() {}
 /** @type {boolean} */
Env.prototype.android;
 /** @type {boolean} */
Env.prototype.ceFalse;
 /** @type {boolean} */
Env.prototype.contentEditable;
 /** @type {boolean} */
Env.prototype.documentMode;
 /** @type {boolean} */
Env.prototype.fileApi;
 /** @type {boolean} */
Env.prototype.gecko;
 /** @type {boolean} */
Env.prototype.iOS;
 /** @type {boolean} */
Env.prototype.ie;
 /** @type {boolean} */
Env.prototype.mac;
 /** @type {boolean} */
Env.prototype.noCaretAfter;
 /** @type {boolean} */
Env.prototype.opera;
 /** @type {boolean} */
Env.prototype.range;
 /** @type {boolean} */
Env.prototype.transparentSrc;
 /** @type {boolean} */
Env.prototype.webKit;
/** @const */
var Events = {};
/**
 * @record
 * @struct
 */
Events.Event = function() {};
 /** @type {string} */
Events.Event.prototype.type;
 /** @type {string} */
Events.Event.prototype.target;

/**
 * @return {boolean}
 */
Events.Event.prototype.isDefaultPrevented = function() {};

/**
 * @return {boolean}
 */
Events.Event.prototype.isImmediatePropagationStopped = function() {};

/**
 * @return {boolean}
 */
Events.Event.prototype.isPropagationStopped = function() {};

/**
 * @return {void}
 */
Events.Event.prototype.preventDefault = function() {};

/**
 * @return {void}
 */
Events.Event.prototype.stopImmediatePropagation = function() {};

/**
 * @return {void}
 */
Events.Event.prototype.stopPropagation = function() {};
/**
 * @extends {Events.Event}
 * @record
 * @struct
 */
Events.FocusBlurEvent = function() {};
 /** @type {?} */
Events.FocusBlurEvent.prototype.blurredEditor;
/**
 * @extends {Events.Event}
 * @record
 * @struct
 */
Events.ContentEvent = function() {};
 /** @type {string} */
Events.ContentEvent.prototype.format;
 /** @type {boolean} */
Events.ContentEvent.prototype.set;
 /** @type {string} */
Events.ContentEvent.prototype.content;
/**
 * @extends {Events.Event}
 * @record
 * @struct
 */
Events.ProcessEvent = function() {};
 /** @type {string} */
Events.ProcessEvent.prototype.content;
 /** @type {string} */
Events.ProcessEvent.prototype.forced_root_block;
 /** @type {string} */
Events.ProcessEvent.prototype.format;
 /** @type {boolean} */
Events.ProcessEvent.prototype.get;
 /** @type {boolean} */
Events.ProcessEvent.prototype.get_inner;
 /** @type {!Node} */
Events.ProcessEvent.prototype.node;
 /** @type {boolean} */
Events.ProcessEvent.prototype.selection;
/**
 * @extends {Events.Event}
 * @record
 * @struct
 */
Events.NodeChangeEvent = function() {};
 /** @type {!Node} */
Events.NodeChangeEvent.prototype.element;
 /** @type {!Array<!Node>} */
Events.NodeChangeEvent.prototype.parents;
 /** @type {boolean} */
Events.NodeChangeEvent.prototype.selectionChange;
/**
 * @extends {Events.Event}
 * @record
 * @struct
 */
Events.UndoRedoEvent = function() {};
 /** @type {!Object} */
Events.UndoRedoEvent.prototype.level;
/**
 * @extends {Events.Event}
 * @record
 * @struct
 */
Events.ChangeEvent = function() {};
 /** @type {!Object} */
Events.ChangeEvent.prototype.lastLevel;
 /** @type {!Object} */
Events.ChangeEvent.prototype.level;
/**
 * @extends {Events.Event}
 * @record
 * @struct
 */
Events.CommandEvent = function() {};
 /** @type {string} */
Events.CommandEvent.prototype.command;
 /** @type {boolean} */
Events.CommandEvent.prototype.ui;
 /** @type {string} */
Events.CommandEvent.prototype.value;

/**
 * @constructor
 * @struct
 */
function FocusManager() {}

/**
 * @param {!Element} elm
 * @return {boolean}
 */
FocusManager.isEditorUIElement = function(elm) {};
/**
 * @record
 * @struct
 */
function Formatter() {}

/**
 * @param {string} name
 * @param {!Object=} vars
 * @param {?=} node
 * @return {void}
 */
Formatter.prototype.apply = function(name, vars, node) {};

/**
 * @param {string} name
 * @return {boolean}
 */
Formatter.prototype.canApply = function(name) {};

/**
 * @param {string} formats
 * @param {?} callback
 * @param {boolean} similar
 * @return {void}
 */
Formatter.prototype.formatChanged = function(formats, callback, similar) {};

/**
 * @param {string=} name
 * @return {(!Object|!Array<?>)}
 */
Formatter.prototype.get = function(name) {};

/**
 * @param {string} format
 * @return {string}
 */
Formatter.prototype.getCssText = function(format) {};

/**
 * @param {string} name
 * @param {!Object=} vars
 * @param {?=} node
 * @return {boolean}
 */
Formatter.prototype.match = function(name, vars, node) {};

/**
 * @param {!Array<?>} names
 * @param {!Object=} vars
 * @return {!Array<?>}
 */
Formatter.prototype.matchAll = function(names, vars) {};

/**
 * @param {?} node
 * @param {string} name
 * @param {!Object} vars
 * @param {boolean} similar
 * @return {!Object}
 */
Formatter.prototype.matchNode = function(node, name, vars, similar) {};

/**
 * @param {!Object} name
 * @param {!Object=} format
 * @return {void}
 */
Formatter.prototype.register = function(name, format) {};

/**
 * @param {string} name
 * @param {!Object=} vars
 * @param {?=} node
 * @return {void}
 */
Formatter.prototype.remove = function(name, vars, node) {};

/**
 * @param {string} name
 * @param {!Object=} vars
 * @param {?=} node
 * @return {void}
 */
Formatter.prototype.toggle = function(name, vars, node) {};

/**
 * @param {string} name
 * @return {void}
 */
Formatter.prototype.unregister = function(name) {};
/**
 * @record
 * @struct
 */
function Shortcuts() {}

/**
 * @param {string} pattern
 * @param {string} desc
 * @param {?} cmdFunc
 * @param {!Object=} scope
 * @return {boolean}
 */
Shortcuts.prototype.add = function(pattern, desc, cmdFunc, scope) {};

/**
 * @param {string} pattern
 * @return {boolean}
 */
Shortcuts.prototype.remove = function(pattern) {};
/**
 * @record
 * @struct
 */
function Theme() {}

/**
 * @param {!Object} obj
 * @return {!Object}
 */
Theme.prototype.renderUI = function(obj) {};
/**
 * @record
 * @struct
 */
function UndoManager() {}

/**
 * @param {!Object=} level
 * @param {!DocumentEvent=} event
 * @return {!Object}
 */
UndoManager.prototype.add = function(level, event) {};

/**
 * @return {void}
 */
UndoManager.prototype.beforeChange = function() {};

/**
 * @return {void}
 */
UndoManager.prototype.clear = function() {};

/**
 * @param {?} callback1
 * @param {?} callback2
 * @return {void}
 */
UndoManager.prototype.extra = function(callback1, callback2) {};

/**
 * @return {boolean}
 */
UndoManager.prototype.hasRedo = function() {};

/**
 * @return {boolean}
 */
UndoManager.prototype.hasUndo = function() {};

/**
 * @param {?} callback
 * @return {void}
 */
UndoManager.prototype.ignore = function(callback) {};

/**
 * @return {!Object}
 */
UndoManager.prototype.redo = function() {};

/**
 * @param {?} callback
 * @return {!Object}
 */
UndoManager.prototype.transact = function(callback) {};

/**
 * @return {!Object}
 */
UndoManager.prototype.undo = function() {};
/**
 * @record
 * @struct
 */
function WindowManager() {}

/**
 * @param {string} message
 * @param {?} callback
 * @param {!Object=} scope
 * @return {void}
 */
WindowManager.prototype.alert = function(message, callback, scope) {};

/**
 * @return {void}
 */
WindowManager.prototype.close = function() {};

/**
 * @param {string} message
 * @param {?} callback
 * @param {!Object=} scope
 * @return {void}
 */
WindowManager.prototype.confirm = function(message, callback, scope) {};

/**
 * @return {!Object}
 */
WindowManager.prototype.getParams = function() {};

/**
 * @return {!Array<!Window>}
 */
WindowManager.prototype.getWindows = function() {};

/**
 * @param {!Object} args
 * @param {!Object} params
 * @return {void}
 */
WindowManager.prototype.open = function(args, params) {};

/**
 * @param {!Object} params
 * @return {void}
 */
WindowManager.prototype.setParams = function(params) {};
/**
 * @record
 * @struct
 */
function notificationManager() {}

/**
 * @return {void}
 */
notificationManager.prototype.close = function() {};

/**
 * @return {!Array<!Object>}
 */
notificationManager.prototype.getNotifications = function() {};

/**
 * @param {!Object=} args
 * @return {void}
 */
notificationManager.prototype.open = function(args) {};
/** @const */
var ui = {};
/**
 * @record
 * @struct
 */
ui.ControlSettings = function() {};
 /** @type {?} */
ui.ControlSettings.prototype.menu;
/**
 * @record
 * @struct
 */
ui.Collection = function() {};
/**
 * @record
 * @struct
 */
ui.Container = function() {};

/**
 * @param {?} items
 * @return {?}
 */
ui.Container.prototype.add = function(items) {};

/**
 * @return {?}
 */
ui.Container.prototype.items = function() {};
/**
 * @record
 * @struct
 */
ui.Moveable = function() {};

/**
 * @param {!Node} elm
 * @param {string} rel
 * @return {?}
 */
ui.Moveable.prototype.moveRel = function(elm, rel) {};
/**
 * @extends {ui.Moveable}
 * @record
 * @struct
 */
ui.FloatPanel = function() {};
/**
 * @extends {ui.FloatPanel}
 * @extends {ui.Container}
 * @record
 * @struct
 */
ui.Menu = function() {};
/**
 * @record
 * @struct
 */
ui.Factory = function() {};

/**
 * @param {?} settings
 * @return {?}
 */
ui.Factory.prototype.create = function(settings) {};

/**
 * @constructor
 * @struct
 */
ui.Control = function() {};
 /** @type {?<!HTMLElement>} */
ui.Control.prototype.$el;
 /** @type {?} */
ui.Control.prototype.settings;

/**
 * @param {string} name
 * @param {string} callback
 * @return {?}
 */
ui.Control.prototype.on = function(name, callback) {};

/**
 * @return {?}
 */
ui.Control.prototype.tooltip = function() {};

/**
 * @param {boolean} state
 * @return {void}
 */
ui.Control.prototype.disabled = function(state) {};

/**
 * @param {boolean} state
 * @return {void}
 */
ui.Control.prototype.active = function(state) {};
/** @const */
var dom = {};
/**
 * @record
 * @struct
 */
dom.BookmarkManager = function() {};

/**
 * @param {number=} type
 * @param {boolean=} normalized
 * @return {!Object}
 */
dom.BookmarkManager.prototype.getBookmark = function(type, normalized) {};

/**
 * @param {!HTMLElement} node
 * @return {boolean}
 */
dom.BookmarkManager.prototype.isBookmarkNode = function(node) {};

/**
 * @param {!Object} bookmark
 * @return {boolean}
 */
dom.BookmarkManager.prototype.moveToBookmark = function(bookmark) {};
/**
 * @record
 * @struct
 */
dom.DOMUtils = function() {};

/**
 * @template T
 * @param {string} parentElm
 * @param {string} name
 * @param {!Object=} attrs
 * @param {string=} html
 * @param {boolean=} create
 * @return {(!Element|!Array<?>)}
 */
dom.DOMUtils.prototype.add = function(parentElm, name, attrs, html, create) {};

/**
 * @template T
 * @param {string} elm
 * @param {string} cls
 * @return {(string|!Array<?>)}
 */
dom.DOMUtils.prototype.addClass = function(elm, cls) {};

/**
 * @param {string} cssText
 * @return {void}
 */
dom.DOMUtils.prototype.addStyle = function(cssText) {};

/**
 * @param {!Element} target
 * @param {string} name
 * @param {?} func
 * @param {!Object=} scope
 * @return {?}
 */
dom.DOMUtils.prototype.bind = function(target, name, func, scope) {};

/**
 * @param {string} name
 * @param {!Object=} attrs
 * @param {string=} html
 * @return {!Element}
 */
dom.DOMUtils.prototype.create = function(name, attrs, html) {};

/**
 * @param {string} html
 * @return {!DocumentFragment}
 */
dom.DOMUtils.prototype.createFragment = function(html) {};

/**
 * @param {string} name
 * @param {!Object=} attrs
 * @param {string=} html
 * @return {string}
 */
dom.DOMUtils.prototype.createHTML = function(name, attrs, html) {};

/**
 * @return {!Range}
 */
dom.DOMUtils.prototype.createRng = function() {};

/**
 * @param {string} s
 * @return {string}
 */
dom.DOMUtils.prototype.decode = function(s) {};

/**
 * @return {void}
 */
dom.DOMUtils.prototype.destroy = function() {};

/**
 * @param {string} text
 * @return {string}
 */
dom.DOMUtils.prototype.encode = function(text) {};

/**
 * @param {!Element} a
 * @param {!Element} b
 * @return {!Element}
 */
dom.DOMUtils.prototype.findCommonAncestor = function(a, b) {};

/**
 * @param {!Node} target
 * @param {string} name
 * @param {!Object} evt
 * @return {!Event}
 */
dom.DOMUtils.prototype.fire = function(target, name, evt) {};

/**
 * @param {string} n
 * @return {!Element}
 */
dom.DOMUtils.prototype.get = function(n) {};

/**
 * @param {string} elm
 * @param {string} name
 * @param {string} defaultVal
 * @return {string}
 */
dom.DOMUtils.prototype.getAttrib = function(elm, name, defaultVal) {};

/**
 * @param {!HTMLElement=} elm
 * @return {!NodeList}
 */
dom.DOMUtils.prototype.getAttribs = function(elm) {};

/**
 * @param {!Node} node
 * @param {string} selector
 * @return {!Node}
 */
dom.DOMUtils.prototype.getNext = function(node, selector) {};

/**
 * @param {string} elm
 * @return {string}
 */
dom.DOMUtils.prototype.getOuterHTML = function(elm) {};

/**
 * @param {!Node} node
 * @param {?} selector
 * @param {!Node=} root
 * @return {!Node}
 */
dom.DOMUtils.prototype.getParent = function(node, selector, root) {};

/**
 * @template T
 * @param {!Node} node
 * @param {?} selector
 * @param {!Node=} root
 * @return {!Array<?>}
 */
dom.DOMUtils.prototype.getParents = function(node, selector, root) {};

/**
 * @param {!Element} elm
 * @param {!Element=} rootElm
 * @return {!Object}
 */
dom.DOMUtils.prototype.getPos = function(elm, rootElm) {};

/**
 * @param {!Node} node
 * @param {string} selector
 * @return {!Node}
 */
dom.DOMUtils.prototype.getPrev = function(node, selector) {};

/**
 * @param {!Element} elm
 * @return {!Object}
 */
dom.DOMUtils.prototype.getRect = function(elm) {};

/**
 * @return {!Element}
 */
dom.DOMUtils.prototype.getRoot = function() {};

/**
 * @param {!Element} elm
 * @return {!Object}
 */
dom.DOMUtils.prototype.getSize = function(elm) {};

/**
 * @param {string} elm
 * @param {string} name
 * @param {boolean} computed
 * @return {string}
 */
dom.DOMUtils.prototype.getStyle = function(elm, name, computed) {};

/**
 * @param {!Window=} win
 * @return {!Object}
 */
dom.DOMUtils.prototype.getViewPort = function(win) {};

/**
 * @param {string} elm
 * @param {string} cls
 * @return {boolean}
 */
dom.DOMUtils.prototype.hasClass = function(elm, cls) {};

/**
 * @param {string} elm
 * @return {void}
 */
dom.DOMUtils.prototype.hide = function(elm) {};

/**
 * @template T
 * @param {!Element} node
 * @param {!Element} referenceNode
 * @return {(!Element|!Array<?>)}
 */
dom.DOMUtils.prototype.insertAfter = function(node, referenceNode) {};

/**
 * @param {!Node} elm
 * @param {string} selector
 * @return {void}
 */
dom.DOMUtils.prototype.is = function(elm, selector) {};

/**
 * @param {!Node} node
 * @return {boolean}
 */
dom.DOMUtils.prototype.isBlock = function(node) {};

/**
 * @param {!Object=} elements
 * @return {boolean}
 */
dom.DOMUtils.prototype.isEmpty = function(elements) {};

/**
 * @param {string} elm
 * @return {boolean}
 */
dom.DOMUtils.prototype.isHidden = function(elm) {};

/**
 * @param {string} url
 * @return {void}
 */
dom.DOMUtils.prototype.loadCSS = function(url) {};

/**
 * @param {!Node} node
 * @param {boolean=} normalized
 * @return {number}
 */
dom.DOMUtils.prototype.nodeIndex = function(node, normalized) {};

/**
 * @param {string} cssText
 * @return {!Object}
 */
dom.DOMUtils.prototype.parseStyle = function(cssText) {};

/**
 * @template T
 * @param {string} node
 * @param {boolean=} keepChildren
 * @return {(!Element|!Array<?>)}
 */
dom.DOMUtils.prototype.remove = function(node, keepChildren) {};

/**
 * @param {!Element} e
 * @return {void}
 */
dom.DOMUtils.prototype.removeAllAttribs = function(e) {};

/**
 * @template T
 * @param {string} elm
 * @param {string} cls
 * @return {(string|!Array<?>)}
 */
dom.DOMUtils.prototype.removeClass = function(elm, cls) {};

/**
 * @param {!Element} elm
 * @param {string} name
 * @return {!Element}
 */
dom.DOMUtils.prototype.rename = function(elm, name) {};

/**
 * @param {!Element} newElm
 * @param {!Element} oldElm
 * @param {boolean=} keepChildren
 * @return {void}
 */
dom.DOMUtils.prototype.replace = function(newElm, oldElm, keepChildren) {};

/**
 * @template T
 * @param {string} elm
 * @param {?} func
 * @param {!Object=} scope
 * @return {(!Object|!Array<?>)}
 */
dom.DOMUtils.prototype.run = function(elm, func, scope) {};

/**
 * @template T
 * @param {string} selector
 * @param {!Object=} scope
 * @return {!Array<?>}
 */
dom.DOMUtils.prototype.select = function(selector, scope) {};

/**
 * @param {!Object} styles
 * @param {string=} name
 * @return {string}
 */
dom.DOMUtils.prototype.serializeStyle = function(styles, name) {};

/**
 * @param {!Element} elm
 * @param {string} name
 * @param {string} value
 * @return {void}
 */
dom.DOMUtils.prototype.setAttrib = function(elm, name, value) {};

/**
 * @param {!Element} elm
 * @param {!Object} attrs
 * @return {void}
 */
dom.DOMUtils.prototype.setAttribs = function(elm, attrs) {};

/**
 * @param {!Element} elm
 * @param {string} html
 * @return {void}
 */
dom.DOMUtils.prototype.setHTML = function(elm, html) {};

/**
 * @param {!Element} elm
 * @param {!Object} html
 * @return {void}
 */
dom.DOMUtils.prototype.setOuterHTML = function(elm, html) {};

/**
 * @param {string} elm
 * @param {string} name
 * @param {string} value
 * @return {void}
 */
dom.DOMUtils.prototype.setStyle = function(elm, name, value) {};

/**
 * @param {!Element} elm
 * @param {!Object} styles
 * @return {void}
 */
dom.DOMUtils.prototype.setStyles = function(elm, styles) {};

/**
 * @param {string} elm
 * @return {void}
 */
dom.DOMUtils.prototype.show = function(elm) {};

/**
 * @param {!Element} parentElm
 * @param {!Element} splitElm
 * @param {!Element=} replacementElm
 * @return {!Element}
 */
dom.DOMUtils.prototype.split = function(parentElm, splitElm, replacementElm) {};

/**
 * @param {string} rgbVal
 * @return {string}
 */
dom.DOMUtils.prototype.toHex = function(rgbVal) {};

/**
 * @param {!Element} elm
 * @param {string} cls
 * @param {string=} state
 * @return {void}
 */
dom.DOMUtils.prototype.toggleClass = function(elm, cls, state) {};

/**
 * @template T
 * @param {!Element} target
 * @param {string} name
 * @param {?} func
 * @return {(boolean|!Array<?>)}
 */
dom.DOMUtils.prototype.unbind = function(target, name, func) {};

/**
 * @param {string=} prefix
 * @return {string}
 */
dom.DOMUtils.prototype.uniqueId = function(prefix) {};
/**
 * @record
 * @struct
 */
dom.DomQuery = function() {};

/**
 * @template T
 * @param {!Array<?>} items
 * @param {boolean=} sort
 * @return {?}
 */
dom.DomQuery.prototype.add = function(items, sort) {};

/**
 * @param {string} className
 * @return {?}
 */
dom.DomQuery.prototype.addClass = function(className) {};

/**
 * @param {string} content
 * @return {?}
 */
dom.DomQuery.prototype.after = function(content) {};

/**
 * @param {string} content
 * @return {?}
 */
dom.DomQuery.prototype.append = function(content) {};

/**
 * @param {string} val
 * @return {?}
 */
dom.DomQuery.prototype.appendTo = function(val) {};

/**
 * @param {string} name
 * @param {string=} value
 * @return {(string|?)}
 */
dom.DomQuery.prototype.attr = function(name, value) {};

/**
 * @param {string} content
 * @return {?}
 */
dom.DomQuery.prototype.before = function(content) {};

/**
 * @param {(string|!Element)} node
 * @return {?}
 */
dom.DomQuery.prototype.children = function(node) {};

/**
 * @return {?}
 */
dom.DomQuery.prototype.clone = function() {};

/**
 * @param {string} selector
 * @return {?}
 */
dom.DomQuery.prototype.closest = function(selector) {};

/**
 * @param {(string|!Element)} node
 * @return {?}
 */
dom.DomQuery.prototype.contents = function(node) {};

/**
 * @param {string} name
 * @param {string=} value
 * @return {(string|?)}
 */
dom.DomQuery.prototype.css = function(name, value) {};

/**
 * @param {?|!Object} callback_or_obj
 * @param {?=} callback
 * @return {?|void}
 */
dom.DomQuery.prototype.each = function(callback_or_obj, callback) {};

/**
 * @return {?}
 */
dom.DomQuery.prototype.empty = function() {};

/**
 * @param {number} index
 * @return {?}
 */
dom.DomQuery.prototype.eq = function(index) {};

/**
 * @param {!Object} target
 * @param {!Object} object
 * @return {!Object}
 */
dom.DomQuery.prototype.extend = function(target, object) {};

/**
 * @param {string} selector
 * @return {?}
 */
dom.DomQuery.prototype.filter = function(selector) {};

/**
 * @param {string} selector
 * @return {?}
 */
dom.DomQuery.prototype.find = function(selector) {};

/**
 * @return {?}
 */
dom.DomQuery.prototype.first = function() {};

/**
 * @template T
 * @param {!Array<?>} array
 * @param {?} callback
 * @return {!Array<?>}
 */
dom.DomQuery.prototype.grep = function(array, callback) {};

/**
 * @param {string} className
 * @return {boolean}
 */
dom.DomQuery.prototype.hasClass = function(className) {};

/**
 * @return {?}
 */
dom.DomQuery.prototype.hide = function() {};

/**
 * @param {string=} value
 * @return {(string|?)}
 */
dom.DomQuery.prototype.html = function(value) {};

/**
 * @template T
 * @param {!Object} item
 * @param {!Array<?>} array
 * @return {number}
 */
dom.DomQuery.prototype.inArray = function(item, array) {};

/**
 * @param {string} selector
 * @return {boolean}
 */
dom.DomQuery.prototype.is = function(selector) {};

/**
 * @param {!Object} array
 * @return {boolean}
 */
dom.DomQuery.prototype.isArray = function(array) {};

/**
 * @return {?}
 */
dom.DomQuery.prototype.last = function() {};

/**
 * @template T
 * @param {!Object} object
 * @return {!Array<?>}
 */
dom.DomQuery.prototype.makeArray = function(object) {};

/**
 * @param {(string|!Element)} node
 * @return {?}
 */
dom.DomQuery.prototype.next = function(node) {};

/**
 * @param {(string|!Element)} node
 * @param {string} until
 * @return {?}
 */
dom.DomQuery.prototype.nextUntil = function(node, until) {};

/**
 * @param {string=} name
 * @param {?=} callback
 * @return {?}
 */
dom.DomQuery.prototype.off = function(name, callback) {};

/**
 * @param {!Object=} offset
 * @return {(!Object|?)}
 */
dom.DomQuery.prototype.offset = function(offset) {};

/**
 * @param {string} name
 * @param {?} callback
 * @return {?}
 */
dom.DomQuery.prototype.on = function(name, callback) {};

/**
 * @param {(string|!Element)} node
 * @return {?}
 */
dom.DomQuery.prototype.parent = function(node) {};

/**
 * @param {(string|!Element)} node
 * @return {?}
 */
dom.DomQuery.prototype.parents = function(node) {};

/**
 * @param {(string|!Element)} node
 * @param {string} until
 * @return {?}
 */
dom.DomQuery.prototype.parentsUntil = function(node, until) {};

/**
 * @param {string} content
 * @return {?}
 */
dom.DomQuery.prototype.prepend = function(content) {};

/**
 * @param {string} val
 * @return {?}
 */
dom.DomQuery.prototype.prependTo = function(val) {};

/**
 * @param {(string|!Element)} node
 * @return {?}
 */
dom.DomQuery.prototype.prev = function(node) {};

/**
 * @param {(string|!Element)} node
 * @param {string} until
 * @return {?}
 */
dom.DomQuery.prototype.prevUntil = function(node, until) {};

/**
 * @return {?}
 */
dom.DomQuery.prototype.remove = function() {};

/**
 * @param {string} name
 * @return {(string|?)}
 */
dom.DomQuery.prototype.removeAttr = function(name) {};

/**
 * @param {string} className
 * @return {?}
 */
dom.DomQuery.prototype.removeClass = function(className) {};

/**
 * @param {string} content
 * @return {?}
 */
dom.DomQuery.prototype.replaceWith = function(content) {};

/**
 * @return {?}
 */
dom.DomQuery.prototype.show = function() {};

/**
 * @param {number} start
 * @param {number=} end
 * @return {?}
 */
dom.DomQuery.prototype.slice = function(start, end) {};

/**
 * @param {string=} value
 * @return {(string|?)}
 */
dom.DomQuery.prototype.text = function(value) {};

/**
 * @template T
 * @return {!Array<?>}
 */
dom.DomQuery.prototype.toArray = function() {};

/**
 * @param {string} className
 * @param {boolean=} state
 * @return {?}
 */
dom.DomQuery.prototype.toggleClass = function(className, state) {};

/**
 * @param {string} name
 * @return {?}
 */
dom.DomQuery.prototype.trigger = function(name) {};

/**
 * @param {string} str
 * @return {string}
 */
dom.DomQuery.prototype.trim = function(str) {};

/**
 * @return {?}
 */
dom.DomQuery.prototype.unwrap = function() {};

/**
 * @param {string} content
 * @return {?}
 */
dom.DomQuery.prototype.wrap = function(content) {};

/**
 * @param {string} content
 * @return {?}
 */
dom.DomQuery.prototype.wrapAll = function(content) {};

/**
 * @param {string} content
 * @return {?}
 */
dom.DomQuery.prototype.wrapInner = function(content) {};
/**
 * @record
 * @struct
 */
dom.EventUtils = function() {};

/**
 * @param {!Object} target
 * @param {string} names
 * @param {?} callback
 * @param {!Object} scope
 * @return {?}
 */
dom.EventUtils.prototype.bind = function(target, names, callback, scope) {};

/**
 * @param {!Object} target
 * @return {?}
 */
dom.EventUtils.prototype.clean = function(target) {};

/**
 * @param {!Object} target
 * @param {string} name
 * @param {!Object=} args
 * @return {?}
 */
dom.EventUtils.prototype.fire = function(target, name, args) {};

/**
 * @param {!Object} target
 * @param {string=} names
 * @param {?=} callback
 * @return {?}
 */
dom.EventUtils.prototype.unbind = function(target, names, callback) {};
/**
 * @record
 * @struct
 */
dom.RangeUtils = function() {};

/**
 * @param {!Range} rng1
 * @param {!Range} rng2
 * @return {boolean}
 */
dom.RangeUtils.prototype.compareRanges = function(rng1, rng2) {};

/**
 * @param {number} clientX
 * @param {number} clientY
 * @param {!Document} doc
 * @return {!Range}
 */
dom.RangeUtils.prototype.getCaretRangeFromPoint = function(clientX, clientY, doc) {};
/**
 * @record
 * @struct
 */
dom.ScriptLoader = function() {};

/**
 * @param {string} url
 * @param {?=} success
 * @param {!Object=} scope
 * @param {?=} failure
 * @return {void}
 */
dom.ScriptLoader.prototype.add = function(url, success, scope, failure) {};

/**
 * @param {string} url
 * @return {boolean}
 */
dom.ScriptLoader.prototype.isDone = function(url) {};

/**
 * @param {string} url
 * @param {?=} callback1
 * @param {?=} callback2
 * @return {void}
 */
dom.ScriptLoader.prototype.load = function(url, callback1, callback2) {};

/**
 * @param {?=} success
 * @param {?=} failure
 * @param {!Object=} scope
 * @return {void}
 */
dom.ScriptLoader.prototype.loadQueue = function(success, failure, scope) {};

/**
 * @param {!Array<string>} scripts
 * @param {?=} callback1
 * @param {!Object=} scope
 * @param {?=} callback2
 * @return {void}
 */
dom.ScriptLoader.prototype.loadScripts = function(scripts, callback1, scope, callback2) {};

/**
 * @param {string} url
 * @return {void}
 */
dom.ScriptLoader.prototype.markDone = function(url) {};
/**
 * @record
 * @struct
 */
dom.Selection = function() {};

/**
 * @param {boolean=} toStart
 * @return {void}
 */
dom.Selection.prototype.collapse = function(toStart) {};

/**
 * @param {number=} type
 * @param {boolean=} normalized
 * @return {!Object}
 */
dom.Selection.prototype.getBookmark = function(type, normalized) {};

/**
 * @param {!Object=} args
 * @return {string}
 */
dom.Selection.prototype.getContent = function(args) {};

/**
 * @param {boolean=} real
 * @return {!Element}
 */
dom.Selection.prototype.getEnd = function(real) {};

/**
 * @return {!Element}
 */
dom.Selection.prototype.getNode = function() {};

/**
 * @param {boolean} w3c
 * @return {!Range}
 */
dom.Selection.prototype.getRng = function(w3c) {};

/**
 * @return {?}
 */
dom.Selection.prototype.getSel = function() {};

/**
 * @param {boolean=} real
 * @return {!Element}
 */
dom.Selection.prototype.getStart = function(real) {};

/**
 * @return {boolean}
 */
dom.Selection.prototype.isCollapsed = function() {};

/**
 * @param {!Object} bookmark
 * @return {boolean}
 */
dom.Selection.prototype.moveToBookmark = function(bookmark) {};

/**
 * @param {!Element} node
 * @param {boolean=} content
 * @return {!Element}
 */
dom.Selection.prototype.select = function(node, content) {};

/**
 * @param {string} selector
 * @param {?} callback
 * @return {void}
 */
dom.Selection.prototype.selectorChanged = function(selector, callback) {};

/**
 * @param {string} content
 * @param {!Object=} args
 * @return {void}
 */
dom.Selection.prototype.setContent = function(content, args) {};

/**
 * @param {?=} node
 * @param {number=} offset
 * @return {void}
 */
dom.Selection.prototype.setCursorLocation = function(node, offset) {};

/**
 * @param {!Element} elm
 * @return {!Element}
 */
dom.Selection.prototype.setNode = function(elm) {};

/**
 * @param {!Range} rng
 * @param {boolean=} forward
 * @return {void}
 */
dom.Selection.prototype.setRng = function(rng, forward) {};
/**
 * @record
 * @struct
 */
dom.Serializer = function() {};

/**
 * @param {?} callback
 * @return {void}
 */
dom.Serializer.prototype.addAttributeFilter = function(callback) {};

/**
 * @param {?} callback
 * @return {void}
 */
dom.Serializer.prototype.addNodeFilter = function(callback) {};

/**
 * @param {string} rules
 * @return {void}
 */
dom.Serializer.prototype.addRules = function(rules) {};

/**
 * @param {string} name
 * @return {void}
 */
dom.Serializer.prototype.addTempAttr = function(name) {};

/**
 * @param {!HTMLElement} node
 * @param {!Object} args
 * @return {void}
 */
dom.Serializer.prototype.serialize = function(node, args) {};

/**
 * @param {string} rules
 * @return {void}
 */
dom.Serializer.prototype.setRules = function(rules) {};
/**
 * @record
 * @struct
 */
dom.TreeWalker = function() {};

/**
 * @return {?}
 */
dom.TreeWalker.prototype.current = function() {};

/**
 * @return {?}
 */
dom.TreeWalker.prototype.next = function() {};

/**
 * @return {?}
 */
dom.TreeWalker.prototype.prev = function() {};

/**
 * @constructor
 * @struct
 * @param {?} startNode
 * @param {?} rootNode
 */
function TreeWalker(startNode, rootNode) {}
/** @const */
var geom = {};
/**
 * @record
 * @struct
 */
geom.Rect = function() {};

/**
 * @param {?} rect
 * @param {?} clampRect
 * @param {boolean} fixedSize
 * @return {?}
 */
geom.Rect.prototype.clamp = function(rect, clampRect, fixedSize) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @return {?}
 */
geom.Rect.prototype.create = function(x, y, w, h) {};

/**
 * @param {?} rect
 * @param {?} targetRect
 * @param {?} constrainRect
 * @param {!Array<?>} rels
 * @return {void}
 */
geom.Rect.prototype.findBestRelativePosition = function(rect, targetRect, constrainRect, rels) {};

/**
 * @param {!ClientRect} clientRect
 * @return {?}
 */
geom.Rect.prototype.fromClientRect = function(clientRect) {};

/**
 * @param {?} rect
 * @param {number} w
 * @param {number} h
 * @return {?}
 */
geom.Rect.prototype.inflate = function(rect, w, h) {};

/**
 * @param {?} rect
 * @param {?} cropRect
 * @return {?}
 */
geom.Rect.prototype.intersect = function(rect, cropRect) {};

/**
 * @param {?} rect
 * @param {?} targetRect
 * @param {string} rel
 * @return {void}
 */
geom.Rect.prototype.relativePosition = function(rect, targetRect, rel) {};
/** @const */
var html = {};
/**
 * @record
 * @struct
 */
html.DomParser = function() {};

/**
 * @param {string} attributes
 * @param {?} callback
 * @return {void}
 */
html.DomParser.prototype.addAttributeFilter = function(attributes, callback) {};

/**
 * @param {string} attributes
 * @param {?} callback
 * @return {void}
 */
html.DomParser.prototype.addNodeFilter = function(attributes, callback) {};

/**
 * @param {?} node
 * @return {?}
 */
html.DomParser.prototype.filterNode = function(node) {};

/**
 * @param {string} html
 * @param {!Object=} args
 * @return {?}
 */
html.DomParser.prototype.parse = function(html, args) {};
/**
 * @record
 * @struct
 */
html.Entities = function() {};

/**
 * @param {string} text
 * @return {string}
 */
html.Entities.prototype.decode = function(text) {};

/**
 * @param {string} text
 * @return {string}
 */
html.Entities.prototype.encodeAllRaw = function(text) {};

/**
 * @param {string} text
 * @param {boolean=} attr
 * @param {!Object=} entities
 * @return {string}
 */
html.Entities.prototype.encodeNamed = function(text, attr, entities) {};

/**
 * @param {string} text
 * @param {boolean=} attr
 * @return {string}
 */
html.Entities.prototype.encodeNumeric = function(text, attr) {};

/**
 * @param {string} text
 * @param {boolean=} attr
 * @return {string}
 */
html.Entities.prototype.encodeRaw = function(text, attr) {};

/**
 * @param {string} name
 * @param {string=} entities
 * @return {?}
 */
html.Entities.prototype.getEncodeFunc = function(name, entities) {};
/**
 * @record
 * @struct
 */
html.Node = function() {};

/**
 * @param {?} node
 * @return {?}
 */
html.Node.prototype.append = function(node) {};

/**
 * @param {string} name
 * @param {string=} value
 * @return {(string|?)}
 */
html.Node.prototype.attr = function(name, value) {};

/**
 * @return {?}
 */
html.Node.prototype.clone = function() {};

/**
 * @param {string} name
 * @param {!Object} attrs
 * @return {void}
 */
html.Node.prototype.create = function(name, attrs) {};

/**
 * @return {?}
 */
html.Node.prototype.empty = function() {};

/**
 * @param {string} name
 * @return {!Array<?>}
 */
html.Node.prototype.getAll = function(name) {};

/**
 * @param {?} node
 * @param {?} ref_node
 * @param {boolean=} before
 * @return {?}
 */
html.Node.prototype.insert = function(node, ref_node, before) {};

/**
 * @param {!Object} elements
 * @return {boolean}
 */
html.Node.prototype.isEmpty = function(elements) {};

/**
 * @return {?}
 */
html.Node.prototype.remove = function() {};

/**
 * @param {?} node
 * @return {?}
 */
html.Node.prototype.replace = function(node) {};

/**
 * @return {void}
 */
html.Node.prototype.unwrap = function() {};

/**
 * @param {boolean=} prev
 * @return {?}
 */
html.Node.prototype.walk = function(prev) {};

/**
 * @param {?} wrapperNode
 * @return {?}
 */
html.Node.prototype.wrap = function(wrapperNode) {};
/**
 * @record
 * @struct
 */
html.SaxParser = function() {};

/**
 * @param {string} html
 * @return {void}
 */
html.SaxParser.prototype.parse = function(html) {};
/**
 * @record
 * @struct
 */
html.Schema = function() {};

/**
 * @param {string} custom_elements
 * @return {void}
 */
html.Schema.prototype.addCustomElements = function(custom_elements) {};

/**
 * @param {string} valid_children
 * @return {void}
 */
html.Schema.prototype.addValidChildren = function(valid_children) {};

/**
 * @param {string} valid_elements
 * @return {void}
 */
html.Schema.prototype.addValidElements = function(valid_elements) {};

/**
 * @return {!Object}
 */
html.Schema.prototype.getBlockElements = function() {};

/**
 * @return {!Object}
 */
html.Schema.prototype.getBoolAttrs = function() {};

/**
 * @return {!Object}
 */
html.Schema.prototype.getCustomElements = function() {};

/**
 * @param {string} name
 * @return {!Object}
 */
html.Schema.prototype.getElementRule = function(name) {};

/**
 * @return {void}
 */
html.Schema.prototype.getInvalidStyles = function() {};

/**
 * @return {!Object}
 */
html.Schema.prototype.getMoveCaretBeforeOnEnterElements = function() {};

/**
 * @return {!Object}
 */
html.Schema.prototype.getNonEmptyElements = function() {};

/**
 * @return {!Object}
 */
html.Schema.prototype.getSelfClosingElements = function() {};

/**
 * @return {!Object}
 */
html.Schema.prototype.getShortEndedElements = function() {};

/**
 * @return {!Object}
 */
html.Schema.prototype.getSpecialElements = function() {};

/**
 * @return {!Object}
 */
html.Schema.prototype.getTextBlockElements = function() {};

/**
 * @return {!Object}
 */
html.Schema.prototype.getTextInlineElements = function() {};

/**
 * @return {void}
 */
html.Schema.prototype.getValidClasses = function() {};

/**
 * @return {void}
 */
html.Schema.prototype.getValidStyles = function() {};

/**
 * @return {!Object}
 */
html.Schema.prototype.getWhiteSpaceElements = function() {};

/**
 * @param {string} name
 * @param {string=} attr
 * @return {boolean}
 */
html.Schema.prototype.isValid = function(name, attr) {};

/**
 * @param {string} name
 * @param {string} child
 * @return {boolean}
 */
html.Schema.prototype.isValidChild = function(name, child) {};

/**
 * @param {string} valid_elements
 * @return {void}
 */
html.Schema.prototype.setValidElements = function(valid_elements) {};
/**
 * @record
 * @struct
 */
html.Serializer = function() {};

/**
 * @param {?} node
 * @return {string}
 */
html.Serializer.prototype.serialize = function(node) {};
/**
 * @record
 * @struct
 */
html.Styles = function() {};

/**
 * @param {string} css
 * @return {!Object}
 */
html.Styles.prototype.parse = function(css) {};

/**
 * @param {!Object} styles
 * @param {string} elementName
 * @return {string}
 */
html.Styles.prototype.serialize = function(styles, elementName) {};

/**
 * @param {string} color
 * @return {string}
 */
html.Styles.prototype.toHex = function(color) {};
/**
 * @record
 * @struct
 */
html.Writer = function() {};

/**
 * @param {string} text
 * @return {void}
 */
html.Writer.prototype.cdata = function(text) {};

/**
 * @param {string} text
 * @return {void}
 */
html.Writer.prototype.doctype = function(text) {};

/**
 * @param {string} name
 * @return {void}
 */
html.Writer.prototype.end = function(name) {};

/**
 * @return {string}
 */
html.Writer.prototype.getContent = function() {};

/**
 * @param {string} name
 * @param {string} text
 * @return {void}
 */
html.Writer.prototype.pi = function(name, text) {};

/**
 * @return {void}
 */
html.Writer.prototype.reset = function() {};

/**
 * @param {string} name
 * @param {!Array<?>=} attrs
 * @param {boolean=} empty
 * @return {void}
 */
html.Writer.prototype.start = function(name, attrs, empty) {};

/**
 * @param {string} text
 * @param {boolean} raw
 * @return {void}
 */
html.Writer.prototype.text = function(text, raw) {};

/**
 * @constructor
 * @struct
 * @param {!Object} settings
 */
function Writer(settings) {}
/** @const */
var util = {};
/**
 * @record
 * @struct
 */
util.Color = function() {};

/**
 * @param {!Object} value
 * @return {?}
 */
util.Color.prototype.parse = function(value) {};

/**
 * @return {string}
 */
util.Color.prototype.toHex = function() {};

/**
 * @return {!Object}
 */
util.Color.prototype.toHsv = function() {};

/**
 * @return {!Object}
 */
util.Color.prototype.toRgb = function() {};
/**
 * @record
 * @struct
 */
util.Delay = function() {};

/**
 * @param {number} interval
 * @return {void}
 */
util.Delay.prototype.clearInterval = function(interval) {};

/**
 * @param {number} timeout
 * @return {void}
 */
util.Delay.prototype.clearTimeout = function(timeout) {};

/**
 * @param {?} callback
 * @param {number} time
 * @return {?}
 */
util.Delay.prototype.debounce = function(callback, time) {};

/**
 * @param {?} callback
 * @param {!HTMLElement=} element
 * @return {void}
 */
util.Delay.prototype.requestAnimationFrame = function(callback, element) {};

/**
 * @param {?} callback
 * @param {number} time
 * @return {number}
 */
util.Delay.prototype.setEditorInterval = function(callback, time) {};

/**
 * @param {?} editor
 * @param {?} callback
 * @param {number} time
 * @return {number}
 */
util.Delay.prototype.setEditorTimeout = function(editor, callback, time) {};

/**
 * @param {?} callback
 * @param {number} time
 * @return {number}
 */
util.Delay.prototype.setInterval = function(callback, time) {};

/**
 * @param {?} callback
 * @param {number} time
 * @return {number}
 */
util.Delay.prototype.setTimeout = function(callback, time) {};
/**
 * @record
 * @struct
 */
util.EventDispatcher = function() {};

/**
 * @param {string} name
 * @param {!Object=} args
 * @return {!Object}
 */
util.EventDispatcher.prototype.fire = function(name, args) {};

/**
 * @param {string} name
 * @return {boolean}
 */
util.EventDispatcher.prototype.has = function(name) {};

/**
 * @param {string} name
 * @return {boolean}
 */
util.EventDispatcher.prototype.isNative = function(name) {};

/**
 * @param {string} name
 * @param {?=} callback
 * @return {!Object}
 */
util.EventDispatcher.prototype.off = function(name, callback) {};

/**
 * @param {string} name
 * @param {?} callback
 * @param {boolean=} first
 * @return {!Object}
 */
util.EventDispatcher.prototype.on = function(name, callback, first) {};

/**
 * @param {string} name
 * @param {?} callback
 * @param {boolean} first
 * @return {!Object}
 */
util.EventDispatcher.prototype.once = function(name, callback, first) {};
/**
 * @record
 * @struct
 */
util.i18n = function() {};
 /** @type {boolean} */
util.i18n.prototype.rtl;

/**
 * @param {string} code
 * @param {!Array<!Object>} items
 * @return {void}
 */
util.i18n.prototype.add = function(code, items) {};

/**
 * @return {string}
 */
util.i18n.prototype.getCode = function() {};

/**
 * @param {string} newCode
 * @return {void}
 */
util.i18n.prototype.setCode = function(newCode) {};

/**
 * @param {string} text
 * @return {string}
 */
util.i18n.prototype.translate = function(text) {};
/**
 * @record
 * @struct
 */
util.JSON = function() {};

/**
 * @param {string} s
 * @return {!Object}
 */
util.JSON.prototype.parse = function(s) {};

/**
 * @param {!Object} obj
 * @param {string=} quote
 * @return {string}
 */
util.JSON.prototype.serialize = function(obj, quote) {};
/**
 * @record
 * @struct
 */
util.JSONRequest = function() {};

/**
 * @param {!Object} args
 * @return {void}
 */
util.JSONRequest.prototype.send = function(args) {};

/**
 * @param {!Object} o
 * @return {void}
 */
util.JSONRequest.prototype.sendRPC = function(o) {};
/**
 * @record
 * @struct
 */
util.LocalStorage = function() {};
 /** @type {number} */
util.LocalStorage.prototype.length;

/**
 * @return {void}
 */
util.LocalStorage.prototype.clear = function() {};

/**
 * @param {string} key
 * @return {string}
 */
util.LocalStorage.prototype.getItem = function(key) {};

/**
 * @param {number} index
 * @return {string}
 */
util.LocalStorage.prototype.key = function(index) {};

/**
 * @param {string} key
 * @return {void}
 */
util.LocalStorage.prototype.removeItem = function(key) {};

/**
 * @param {string} key
 * @param {string} value
 * @return {void}
 */
util.LocalStorage.prototype.setItem = function(key, value) {};
/**
 * @constructor
 * @struct
 */
util.Observable = function() {};

/**
 * @param {string} name
 * @param {!Object=} args
 * @param {boolean=} bubble
 * @return {!Object}
 */
util.Observable.prototype.fire = function(name, args, bubble) {};

/**
 * @param {string} name
 * @return {boolean}
 */
util.Observable.prototype.hasEventListeners = function(name) {};

/**
 * @param {string=} name
 * @param {?=} callback
 * @return {!Object}
 */
util.Observable.prototype.off = function(name, callback) {};

/**
 * @param {string} name
 * @param {?} callback
 * @param {boolean=} first
 * @return {!Object}
 */
util.Observable.prototype.on = function(name, callback, first) {};

/**
 * @param {string} name
 * @param {?} callback
 * @return {!Object}
 */
util.Observable.prototype.once = function(name, callback) {};
/**
 * @record
 * @struct
 */
util.Tools = function() {};

/**
 * @param {string} s
 * @param {!Object} p
 * @param {!Object=} root
 * @return {void}
 */
util.Tools.prototype.create = function(s, p, root) {};

/**
 * @param {string} n
 * @param {!Object=} o
 * @return {!Object}
 */
util.Tools.prototype.createNS = function(n, o) {};

/**
 * @param {!Object} o
 * @param {?} cb
 * @param {!Object=} s
 * @return {void}
 */
util.Tools.prototype.each = function(o, cb, s) {};

/**
 * @param {string} s
 * @param {string} d
 * @return {void}
 */
util.Tools.prototype.explode = function(s, d) {};

/**
 * @template T
 * @param {!Array<?>} a
 * @param {?} f
 * @return {!Array<?>}
 */
util.Tools.prototype.grep = function(a, f) {};

/**
 * @template T
 * @param {?} item
 * @param {!Array<?>} arr
 * @return {number}
 */
util.Tools.prototype.inArray = function(item, arr) {};

/**
 * @param {!Object} obj
 * @param {string} type
 * @return {boolean}
 */
util.Tools.prototype.is = function(obj, type) {};

/**
 * @param {!Object} obj
 * @return {boolean}
 */
util.Tools.prototype.isArray = function(obj) {};

/**
 * @template T
 * @param {!Array<?>} items
 * @param {string=} delim
 * @param {!Object=} map
 * @return {!Object}
 */
util.Tools.prototype.makeMap = function(items, delim, map) {};

/**
 * @template T, S
 * @param {!Array<?>} array
 * @param {?} callback
 * @return {!Array<?>}
 */
util.Tools.prototype.map = function(array, callback) {};

/**
 * @param {string} n
 * @param {!Object=} o
 * @return {!Object}
 */
util.Tools.prototype.resolve = function(n, o) {};

/**
 * @template T
 * @param {!Object} obj
 * @return {!Array<?>}
 */
util.Tools.prototype.toArray = function(obj) {};

/**
 * @param {string} s
 * @return {string}
 */
util.Tools.prototype.trim = function(s) {};

/**
 * @param {!Object} o
 * @param {?} f
 * @param {string=} n
 * @param {string=} s
 * @return {void}
 */
util.Tools.prototype.walk = function(o, f, n, s) {};
/**
 * @record
 * @struct
 */
util.URI = function() {};

/**
 * @param {boolean} noProtoHost
 * @return {?}
 */
util.URI.prototype.getURI = function(noProtoHost) {};

/**
 * @param {?} uri
 * @return {boolean}
 */
util.URI.prototype.isSameOrigin = function(uri) {};

/**
 * @param {string} path
 * @return {void}
 */
util.URI.prototype.setPath = function(path) {};

/**
 * @param {string} base
 * @param {string} path
 * @return {void}
 */
util.URI.prototype.toAbsPath = function(base, path) {};

/**
 * @param {string} uri
 * @param {boolean} noHost
 * @return {string}
 */
util.URI.prototype.toAbsolute = function(uri, noHost) {};

/**
 * @param {string} base
 * @param {string} path
 * @return {void}
 */
util.URI.prototype.toRelPath = function(base, path) {};

/**
 * @param {string} uri
 * @return {string}
 */
util.URI.prototype.toRelative = function(uri) {};
/**
 * @record
 * @struct
 */
util.XHR = function() {};

/**
 * @param {string} name
 * @param {!Object=} args
 * @param {boolean=} bubble
 * @return {!Object}
 */
util.XHR.prototype.fire = function(name, args, bubble) {};

/**
 * @param {string} name
 * @return {boolean}
 */
util.XHR.prototype.hasEventListeners = function(name) {};

/**
 * @param {string=} name
 * @param {?=} callback
 * @return {!Object}
 */
util.XHR.prototype.off = function(name, callback) {};

/**
 * @param {string} name
 * @param {?} callback
 * @param {boolean=} first
 * @return {!Object}
 */
util.XHR.prototype.on = function(name, callback, first) {};

/**
 * @param {string} name
 * @param {?} callback
 * @return {!Object}
 */
util.XHR.prototype.once = function(name, callback) {};

/**
 * @param {!Object} settings
 * @return {void}
 */
util.XHR.prototype.send = function(settings) {};
