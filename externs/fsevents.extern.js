/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/fsevents/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ExportAssignment in  */

/**
 * @param {string} path
 * @return {!fsevents.Watcher}
 */
function fsevents(path) {}

/**
 * @param {string} path
 * @param {number} flags
 * @return {!fsevents.BaseEventInfo<string>}
 */
fsevents.getInfo = function(path, flags) {};

/**
 * @constructor
 * @struct
 * @param {string} path
 * @param {function(string, number, number): void} handler
 */
fsevents.FSEvents = function(path, handler) {};

/**
 * @return {FSEvents}
 */
fsevents.FSEvents.prototype.start = function() {};

/**
 * @return {FSEvents}
 */
fsevents.FSEvents.prototype.stop = function() {};
 /** @type {{kFSEventStreamEventFlagNone: number, kFSEventStreamEventFlagMustScanSubDirs: number, kFSEventStreamEventFlagUserDropped: number, kFSEventStreamEventFlagKernelDropped: number, kFSEventStreamEventFlagEventIdsWrapped: number, kFSEventStreamEventFlagHistoryDone: number, kFSEventStreamEventFlagRootChanged: number, kFSEventStreamEventFlagMount: number, kFSEventStreamEventFlagUnmount: number, kFSEventStreamEventFlagItemCreated: number, kFSEventStreamEventFlagItemRemoved: number, kFSEventStreamEventFlagItemInodeMetaMod: number, kFSEventStreamEventFlagItemRenamed: number, kFSEventStreamEventFlagItemModified: number, kFSEventStreamEventFlagItemFinderInfoMod: number, kFSEventStreamEventFlagItemChangeOwner: number, kFSEventStreamEventFlagItemXattrMod: number, kFSEventStreamEventFlagItemIsFile: number, kFSEventStreamEventFlagItemIsDir: number, kFSEventStreamEventFlagItemIsSymlink: number}} */
fsevents.Constants;
/**
 * @record
 * @struct
 */
fsevents.Watcher = function() {};

/**
 * @return {Watcher}
 */
fsevents.Watcher.prototype.start = function() {};

/**
 * @return {Watcher}
 */
fsevents.Watcher.prototype.stop = function() {};

/**
 * @param {string} event
 * @param {function(string, number, number): void|function(string, !fsevents.EventInfo): void} listener
 * @return {Watcher}
 */
fsevents.Watcher.prototype.addListener = function(event, listener) {};

/**
 * @param {string} event
 * @param {function(string, number, number): void|function(string, !fsevents.EventInfo): void} listener
 * @return {Watcher}
 */
fsevents.Watcher.prototype.on = function(event, listener) {};

/**
 * @param {string} event
 * @param {function(string, number, number): void|function(string, !fsevents.EventInfo): void} listener
 * @return {Watcher}
 */
fsevents.Watcher.prototype.once = function(event, listener) {};

/**
 * @param {string} event
 * @param {function(string, number, number): void|function(string, !fsevents.EventInfo): void} listener
 * @return {Watcher}
 */
fsevents.Watcher.prototype.prependListener = function(event, listener) {};

/**
 * @param {string} event
 * @param {function(string, number, number): void|function(string, !fsevents.EventInfo): void} listener
 * @return {Watcher}
 */
fsevents.Watcher.prototype.prependOnceListener = function(event, listener) {};

/**
 * @param {string} event
 * @param {function(string, number, number): void|function(string, !fsevents.EventInfo): void} listener
 * @return {Watcher}
 */
fsevents.Watcher.prototype.removeListener = function(event, listener) {};

/**
 * @param {string=} event
 * @return {Watcher}
 */
fsevents.Watcher.prototype.removeAllListeners = function(event) {};

/**
 * @param {string} event
 * @return {!Array<!Function>}
 */
fsevents.Watcher.prototype.listeners = function(event) {};

/**
 * @param {string} event
 * @param {string} path
 * @param {number|!fsevents.EventInfo} flags_or_info
 * @param {number=} id
 * @return {boolean}
 */
fsevents.Watcher.prototype.emit = function(event, path, flags_or_info, id) {};

/**
 * @return {!Array<string>}
 */
fsevents.Watcher.prototype.eventNames = function() {};

/**
 * @param {string} type
 * @return {number}
 */
fsevents.Watcher.prototype.listenerCount = function(type) {};

/** @typedef {string} */
fsevents.EventType;
/**
 * @extends {fsevents.BaseEventInfo}
 * @record
 * @struct
 */
fsevents.EventInfo = function() {};
 /** @type {number} */
fsevents.EventInfo.prototype.id;

/** @typedef {string} */
fsevents.BaseEventType;
/**
 * @record
 * @struct
 */
fsevents.BaseEventInfo = function() {};
 /** @type {E} */
fsevents.BaseEventInfo.prototype.event;
 /** @type {string} */
fsevents.BaseEventInfo.prototype.path;
 /** @type {string} */
fsevents.BaseEventInfo.prototype.type;
 /** @type {{inode: boolean, finder: boolean, access: boolean, xattrs: boolean}} */
fsevents.BaseEventInfo.prototype.changes;
 /** @type {number} */
fsevents.BaseEventInfo.prototype.flags;
