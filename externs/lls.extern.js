/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/lls/index.d.ts:
/** @const */
var LargeLocalStorageInterfaces = {};
/**
 * @record
 * @struct
 */
LargeLocalStorageInterfaces.LargeLocalStorageService = function() {};

/* TODO: ConstructSignature: LargeLocalStorageInterfaces */
 /** @type {!LargeLocalStorageInterfaces.Promise<number>} */
LargeLocalStorageInterfaces.LargeLocalStorageService.prototype.initialized;

/**
 * Gets all of the attachments for a document.
 * @param {string=} docKey
 * @return {!LargeLocalStorageInterfaces.Promise<!Array<!LargeLocalStorageInterfaces.Entry>>}
 */
LargeLocalStorageInterfaces.LargeLocalStorageService.prototype.getAllAttachments = function(docKey) {};

/**
 * Gets all attachments URLs for a document.
 * @param {string=} docKey
 * @return {!LargeLocalStorageInterfaces.Promise<!Array<!LargeLocalStorageInterfaces.Entry>>}
 */
LargeLocalStorageInterfaces.LargeLocalStorageService.prototype.getAllAttachmentURLs = function(docKey) {};

/**
 * Get the attachment identified by attachKey
 * Get the attachment identified by docKey and attachKey
 * @param {string} attachKey_or_docKey
 * @param {string=} attachKey
 * @return {!LargeLocalStorageInterfaces.Promise<?>}
 */
LargeLocalStorageInterfaces.LargeLocalStorageService.prototype.getAttachment = function(attachKey_or_docKey, attachKey) {};

/**
 * Get the URL for a given attachment.
 * Get the URL for a given attachment.
 * @param {string} attachKey_or_docKey
 * @param {string=} attachKey
 * @return {!LargeLocalStorageInterfaces.Promise<string>}
 */
LargeLocalStorageInterfaces.LargeLocalStorageService.prototype.getAttachmentURL = function(attachKey_or_docKey, attachKey) {};

/**
 * Returns the actual capacity of the storage or -1 if it is unknown.
 * @return {number}
 */
LargeLocalStorageInterfaces.LargeLocalStorageService.prototype.getCapacity = function() {};

/**
 * Get the contents of a document identified by docKey
 * @param {string} docKey
 * @return {!LargeLocalStorageInterfaces.Promise<?>}
 */
LargeLocalStorageInterfaces.LargeLocalStorageService.prototype.getContents = function(docKey) {};

/**
 * List all attachments under a given key. List all documents if no key is provided.
 * @param {string=} docKey
 * @return {!LargeLocalStorageInterfaces.Promise<!Array<string>>}
 */
LargeLocalStorageInterfaces.LargeLocalStorageService.prototype.ls = function(docKey) {};

/**
 * Whether or not LLS is ready to store data. The initialized property can be used to await initialization.
 * @return {boolean}
 */
LargeLocalStorageInterfaces.LargeLocalStorageService.prototype.ready = function() {};

/**
 * Revoke the attachment URL as required by the underlying storage system.
 * @param {string} url
 * @return {void}
 */
LargeLocalStorageInterfaces.LargeLocalStorageService.prototype.revokeAttachmentURL = function(url) {};

/**
 * Remove the specified document and all of its attachments.
 * @param {string=} docKey
 * @return {!LargeLocalStorageInterfaces.Promise<?>}
 */
LargeLocalStorageInterfaces.LargeLocalStorageService.prototype.rm = function(docKey) {};

/**
 * Remove an attachment from a document.
 * @param {string} docKey
 * @param {string} attachKey
 * @return {!LargeLocalStorageInterfaces.Promise<void>}
 */
LargeLocalStorageInterfaces.LargeLocalStorageService.prototype.rmAttachment = function(docKey, attachKey) {};

/**
 * Set an attachment for a given document. Identified by attachKey.
 * Set an attachment for a given document. Identified by docKey and attachKey.
 * @param {string} attachKey_or_docKey
 * @param {?|string} attachment_or_attachKey
 * @param {?=} attachment
 * @return {!LargeLocalStorageInterfaces.Promise<void>}
 */
LargeLocalStorageInterfaces.LargeLocalStorageService.prototype.setAttachment = function(attachKey_or_docKey, attachment_or_attachKey, attachment) {};

/**
 * Set the contents identified by docKey to data. The document will be created if it does not exist.
 * @param {string} docKey
 * @param {?} data
 * @return {!LargeLocalStorageInterfaces.Promise<void>}
 */
LargeLocalStorageInterfaces.LargeLocalStorageService.prototype.setContents = function(docKey, data) {};
/**
 * @record
 * @struct
 */
LargeLocalStorageInterfaces.Options = function() {};
 /** @type {number} */
LargeLocalStorageInterfaces.Options.prototype.size;
 /** @type {string} */
LargeLocalStorageInterfaces.Options.prototype.name;
 /** @type {string} */
LargeLocalStorageInterfaces.Options.prototype.forceProvider;
/**
 * @record
 * @struct
 */
LargeLocalStorageInterfaces.Entry = function() {};
 /** @type {?} */
LargeLocalStorageInterfaces.Entry.prototype.data;
 /** @type {string} */
LargeLocalStorageInterfaces.Entry.prototype.docKey;
 /** @type {string} */
LargeLocalStorageInterfaces.Entry.prototype.attachKey;
 /** @type {string} */
LargeLocalStorageInterfaces.Entry.prototype.url;
/**
 * @record
 * @struct
 */
LargeLocalStorageInterfaces.Promise = function() {};

/**
 * @template U
 * @param {function(T): (U|!LargeLocalStorageInterfaces.Promise<U>)=} onFulfilled
 * @param {function(?): (U|!LargeLocalStorageInterfaces.Promise<U>)|function(?): void=} onRejected
 * @return {!LargeLocalStorageInterfaces.Promise<U>}
 */
LargeLocalStorageInterfaces.Promise.prototype.then = function(onFulfilled, onRejected) {};

/**
 * @template U
 * @param {function(?): (U|!LargeLocalStorageInterfaces.Promise<U>)=} onRejected
 * @return {!LargeLocalStorageInterfaces.Promise<U>}
 */
LargeLocalStorageInterfaces.Promise.prototype.catch = function(onRejected) {};
 /** @type {!LargeLocalStorageInterfaces.LargeLocalStorageService} */
var LargeLocalStorage;

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
