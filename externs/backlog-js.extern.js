/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/backlog-js/index.d.ts:

/**
 * @constructor
 * @struct
 * @param {{host: string, apiKey: string, accessToken: string, timeout: number}} configure
 */
function Request(configure) {}
 /** @type {?} */
Request.prototype.configure;
 /** @type {string} */
Request.prototype.webAppBaseURL;
 /** @type {string} */
Request.prototype.restBaseURL;

/**
 * @template T
 * @param {string} path
 * @param {?=} params
 * @return {!Promise<T>}
 */
Request.prototype.get = function(path, params) {};

/**
 * @template T
 * @param {string} path
 * @param {?=} params
 * @return {!Promise<T>}
 */
Request.prototype.post = function(path, params) {};

/**
 * @template T
 * @param {string} path
 * @param {?} params
 * @return {!Promise<T>}
 */
Request.prototype.put = function(path, params) {};

/**
 * @template T
 * @param {string} path
 * @param {?} params
 * @return {!Promise<T>}
 */
Request.prototype.patch = function(path, params) {};

/**
 * @template T
 * @param {string} path
 * @param {?=} params
 * @return {!Promise<T>}
 */
Request.prototype.delete = function(path, params) {};

/**
 * @param {{method: string, path: string, params: (?|!FormData)}} options
 * @return {!Promise<!Response>}
 */
Request.prototype.request = function(options) {};

/**
 * @param {!Response} response
 * @return {!Promise<!Response>}
 */
Request.prototype.checkStatus = function(response) {};

/**
 * @template T
 * @param {!Response} response
 * @return {!Promise<T>}
 */
Request.prototype.parseJSON = function(response) {};

/**
 * @param {?} params
 * @return {?}
 */
Request.prototype.toFormData = function(params) {};

/**
 * @param {?} params
 * @return {?}
 */
Request.prototype.toQueryString = function(params) {};

/** @typedef {?} */
var Params;

/**
 * @constructor
 * @struct
 * @param {?} configure
 */
function Backlog(configure) {}

/**
 * @return {!Promise<?>}
 */
Backlog.prototype.getSpace = function() {};

/**
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.getSpaceActivities = function(params) {};

/**
 * @return {!Promise<?>}
 */
Backlog.prototype.getSpaceNotification = function() {};

/**
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.putSpaceNotification = function(params) {};

/**
 * @return {!Promise<?>}
 */
Backlog.prototype.getSpaceDiskUsage = function() {};

/**
 * @return {!Promise<?>}
 */
Backlog.prototype.getSpaceIcon = function() {};

/**
 * @param {!FormData} form
 * @return {!Promise<!Response>}
 */
Backlog.prototype.postSpaceAttachment = function(form) {};

/**
 * @return {!Promise<?>}
 */
Backlog.prototype.getUsers = function() {};

/**
 * @param {number} userId
 * @return {!Promise<?>}
 */
Backlog.prototype.getUser = function(userId) {};

/**
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.postUser = function(params) {};

/**
 * @param {number} userId
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.patchUser = function(userId, params) {};

/**
 * @param {number} userId
 * @return {!Promise<?>}
 */
Backlog.prototype.deleteUser = function(userId) {};

/**
 * @return {!Promise<?>}
 */
Backlog.prototype.getMyself = function() {};

/**
 * @param {number} userId
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.getUserActivities = function(userId, params) {};

/**
 * @param {number} userId
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.getUserStars = function(userId, params) {};

/**
 * @param {number} userId
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.getUserStarsCount = function(userId, params) {};

/**
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.getRecentlyViewedIssues = function(params) {};

/**
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.getRecentlyViewedProjects = function(params) {};

/**
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.getRecentlyViewedWikis = function(params) {};

/**
 * @param {number} userId
 * @return {!Promise<?>}
 */
Backlog.prototype.getUserIcon = function(userId) {};

/**
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.getGroups = function(params) {};

/**
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.postGroups = function(params) {};

/**
 * @param {number} groupId
 * @return {!Promise<?>}
 */
Backlog.prototype.getGroup = function(groupId) {};

/**
 * @param {number} groupId
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.patchGroup = function(groupId, params) {};

/**
 * @param {number} groupId
 * @return {!Promise<?>}
 */
Backlog.prototype.deleteGroup = function(groupId) {};

/**
 * @return {!Promise<?>}
 */
Backlog.prototype.getStatuses = function() {};

/**
 * @return {!Promise<?>}
 */
Backlog.prototype.getResolutions = function() {};

/**
 * @return {!Promise<?>}
 */
Backlog.prototype.getPriorities = function() {};

/**
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.postProject = function(params) {};

/**
 * @param {?=} params
 * @return {!Promise<?>}
 */
Backlog.prototype.getProjects = function(params) {};

/**
 * @param {string} projectIdOrKey
 * @return {!Promise<?>}
 */
Backlog.prototype.getProject = function(projectIdOrKey) {};

/**
 * @param {string} projectIdOrKey
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.patchProject = function(projectIdOrKey, params) {};

/**
 * @param {string} projectIdOrKey
 * @return {!Promise<?>}
 */
Backlog.prototype.deleteProject = function(projectIdOrKey) {};

/**
 * @param {string} projectIdOrKey
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.getProjectActivities = function(projectIdOrKey, params) {};

/**
 * @param {string} projectIdOrKey
 * @return {!Promise<?>}
 */
Backlog.prototype.getProjectUsers = function(projectIdOrKey) {};

/**
 * @param {string} projectIdOrKey
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.deleteProjectUsers = function(projectIdOrKey, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.postProjectAdministrators = function(projectIdOrKey, params) {};

/**
 * @param {string} projectIdOrKey
 * @return {!Promise<?>}
 */
Backlog.prototype.getProjectAdministrators = function(projectIdOrKey) {};

/**
 * @param {string} projectIdOrKey
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.deleteProjectAdministrators = function(projectIdOrKey, params) {};

/**
 * @param {string} projectIdOrKey
 * @return {!Promise<?>}
 */
Backlog.prototype.getIssueTypes = function(projectIdOrKey) {};

/**
 * @param {string} projectIdOrKey
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.postIssueType = function(projectIdOrKey, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {number} id
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.patchIssueType = function(projectIdOrKey, id, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {number} id
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.deleteIssueType = function(projectIdOrKey, id, params) {};

/**
 * @param {string} projectIdOrKey
 * @return {!Promise<?>}
 */
Backlog.prototype.getCategories = function(projectIdOrKey) {};

/**
 * @param {string} projectIdOrKey
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.postCategories = function(projectIdOrKey, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {number} id
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.patchCategories = function(projectIdOrKey, id, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {number} id
 * @return {!Promise<?>}
 */
Backlog.prototype.deleteCategories = function(projectIdOrKey, id) {};

/**
 * @param {string} projectIdOrKey
 * @return {!Promise<?>}
 */
Backlog.prototype.getVersions = function(projectIdOrKey) {};

/**
 * @param {string} projectIdOrKey
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.postVersions = function(projectIdOrKey, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {number} id
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.patchVersions = function(projectIdOrKey, id, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {number} id
 * @return {!Promise<?>}
 */
Backlog.prototype.deleteVersions = function(projectIdOrKey, id) {};

/**
 * @param {string} projectIdOrKey
 * @return {!Promise<?>}
 */
Backlog.prototype.getCustomFields = function(projectIdOrKey) {};

/**
 * @param {string} projectIdOrKey
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.postCustomField = function(projectIdOrKey, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {number} id
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.patchCustomField = function(projectIdOrKey, id, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {number} id
 * @return {!Promise<?>}
 */
Backlog.prototype.deleteCustomField = function(projectIdOrKey, id) {};

/**
 * @param {string} projectIdOrKey
 * @param {number} id
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.postCustomFieldItem = function(projectIdOrKey, id, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {number} id
 * @param {number} itemId
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.patchCustomFieldItem = function(projectIdOrKey, id, itemId, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {number} id
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.deleteCustomFieldItem = function(projectIdOrKey, id, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {string} path
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.getSharedFiles = function(projectIdOrKey, path, params) {};

/**
 * @param {string} projectIdOrKey
 * @return {!Promise<?>}
 */
Backlog.prototype.getProjectsDiskUsage = function(projectIdOrKey) {};

/**
 * @param {string} projectIdOrKey
 * @return {!Promise<?>}
 */
Backlog.prototype.getWebhooks = function(projectIdOrKey) {};

/**
 * @param {string} projectIdOrKey
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.postWebhook = function(projectIdOrKey, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {string} webhookId
 * @return {!Promise<?>}
 */
Backlog.prototype.getWebhook = function(projectIdOrKey, webhookId) {};

/**
 * @param {string} projectIdOrKey
 * @param {string} webhookId
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.patchWebhook = function(projectIdOrKey, webhookId, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {string} webhookId
 * @return {!Promise<?>}
 */
Backlog.prototype.deleteWebhook = function(projectIdOrKey, webhookId) {};

/**
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.postIssue = function(params) {};

/**
 * @param {string} issueIdOrKey
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.patchIssue = function(issueIdOrKey, params) {};

/**
 * @param {?=} params
 * @return {!Promise<?>}
 */
Backlog.prototype.getIssues = function(params) {};

/**
 * @param {string} issueIdOrKey
 * @return {!Promise<?>}
 */
Backlog.prototype.getIssue = function(issueIdOrKey) {};

/**
 * @param {?=} params
 * @return {!Promise<?>}
 */
Backlog.prototype.getIssuesCount = function(params) {};

/**
 * @param {string} issueIdOrKey
 * @return {!Promise<?>}
 */
Backlog.prototype.deleteIssuesCount = function(issueIdOrKey) {};

/**
 * @param {string} issueIdOrKey
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.getIssueComments = function(issueIdOrKey, params) {};

/**
 * @param {string} issueIdOrKey
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.postIssueComments = function(issueIdOrKey, params) {};

/**
 * @param {string} issueIdOrKey
 * @return {!Promise<?>}
 */
Backlog.prototype.getIssueCommentsCount = function(issueIdOrKey) {};

/**
 * @param {string} issueIdOrKey
 * @param {number} commentId
 * @return {!Promise<?>}
 */
Backlog.prototype.getIssueComment = function(issueIdOrKey, commentId) {};

/**
 * @param {string} issueIdOrKey
 * @param {number} commentId
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.patchIssueComment = function(issueIdOrKey, commentId, params) {};

/**
 * @param {string} issueIdOrKey
 * @param {number} commentId
 * @return {!Promise<?>}
 */
Backlog.prototype.getIssueCommentNotifications = function(issueIdOrKey, commentId) {};

/**
 * @param {string} issueIdOrKey
 * @param {number} commentId
 * @param {?} prams
 * @return {!Promise<?>}
 */
Backlog.prototype.postIssueCommentNotifications = function(issueIdOrKey, commentId, prams) {};

/**
 * @param {string} issueIdOrKey
 * @return {!Promise<?>}
 */
Backlog.prototype.getIssueAttachments = function(issueIdOrKey) {};

/**
 * @param {string} issueIdOrKey
 * @param {string} attachmentId
 * @return {!Promise<?>}
 */
Backlog.prototype.deleteIssueAttachment = function(issueIdOrKey, attachmentId) {};

/**
 * @param {string} issueIdOrKey
 * @return {!Promise<?>}
 */
Backlog.prototype.getIssueSharedFiles = function(issueIdOrKey) {};

/**
 * @param {string} issueIdOrKey
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.linkIssueSharedFiles = function(issueIdOrKey, params) {};

/**
 * @param {string} issueIdOrKey
 * @param {number} id
 * @return {!Promise<?>}
 */
Backlog.prototype.unlinkIssueSharedFile = function(issueIdOrKey, id) {};

/**
 * @param {number} projectIdOrKey
 * @return {!Promise<?>}
 */
Backlog.prototype.getWikis = function(projectIdOrKey) {};

/**
 * @param {number} projectIdOrKey
 * @return {!Promise<?>}
 */
Backlog.prototype.getWikisCount = function(projectIdOrKey) {};

/**
 * @param {number} projectIdOrKey
 * @return {!Promise<?>}
 */
Backlog.prototype.getWikisTags = function(projectIdOrKey) {};

/**
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.postWiki = function(params) {};

/**
 * @param {number} wikiId
 * @return {!Promise<?>}
 */
Backlog.prototype.getWiki = function(wikiId) {};

/**
 * @param {number} wikiId
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.patchWiki = function(wikiId, params) {};

/**
 * @param {number} wikiId
 * @param {boolean} mailNotify
 * @return {!Promise<?>}
 */
Backlog.prototype.deleteWiki = function(wikiId, mailNotify) {};

/**
 * @param {number} wikiId
 * @return {!Promise<?>}
 */
Backlog.prototype.getWikisAttachments = function(wikiId) {};

/**
 * @param {number} wikiId
 * @param {!Array<number>} attachmentId
 * @return {!Promise<?>}
 */
Backlog.prototype.postWikisAttachments = function(wikiId, attachmentId) {};

/**
 * @param {number} wikiId
 * @param {number} attachmentId
 * @return {!Promise<?>}
 */
Backlog.prototype.deleteWikisAttachments = function(wikiId, attachmentId) {};

/**
 * @param {number} wikiId
 * @return {!Promise<?>}
 */
Backlog.prototype.getWikisSharedFiles = function(wikiId) {};

/**
 * @param {number} wikiId
 * @param {!Array<number>} fileId
 * @return {!Promise<?>}
 */
Backlog.prototype.linkWikisSharedFiles = function(wikiId, fileId) {};

/**
 * @param {number} wikiId
 * @param {number} id
 * @return {!Promise<?>}
 */
Backlog.prototype.unlinkWikisSharedFiles = function(wikiId, id) {};

/**
 * @param {number} wikiId
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.getWikisHistory = function(wikiId, params) {};

/**
 * @param {number} wikiId
 * @return {!Promise<?>}
 */
Backlog.prototype.getWikisStars = function(wikiId) {};

/**
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.postStar = function(params) {};

/**
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.getNotifications = function(params) {};

/**
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.getNotificationsCount = function(params) {};

/**
 * @return {!Promise<?>}
 */
Backlog.prototype.resetNotificationsMarkAsRead = function() {};

/**
 * @param {number} id
 * @return {!Promise<?>}
 */
Backlog.prototype.markAsReadNotification = function(id) {};

/**
 * @param {string} projectIdOrKey
 * @return {!Promise<?>}
 */
Backlog.prototype.getGitRepositories = function(projectIdOrKey) {};

/**
 * @param {string} projectIdOrKey
 * @param {string} repoIdOrName
 * @return {!Promise<?>}
 */
Backlog.prototype.getGitRepository = function(projectIdOrKey, repoIdOrName) {};

/**
 * @param {string} projectIdOrKey
 * @param {string} repoIdOrName
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.getPullRequests = function(projectIdOrKey, repoIdOrName, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {string} repoIdOrName
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.getPullRequestsCount = function(projectIdOrKey, repoIdOrName, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {string} repoIdOrName
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.postPullRequest = function(projectIdOrKey, repoIdOrName, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {string} repoIdOrName
 * @param {number} number
 * @return {!Promise<?>}
 */
Backlog.prototype.getPullRequest = function(projectIdOrKey, repoIdOrName, number) {};

/**
 * @param {string} projectIdOrKey
 * @param {string} repoIdOrName
 * @param {number} number
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.patchPullRequest = function(projectIdOrKey, repoIdOrName, number, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {string} repoIdOrName
 * @param {number} number
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.getPullRequestComments = function(projectIdOrKey, repoIdOrName, number, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {string} repoIdOrName
 * @param {number} number
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.postPullRequestComments = function(projectIdOrKey, repoIdOrName, number, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {string} repoIdOrName
 * @param {number} number
 * @return {!Promise<?>}
 */
Backlog.prototype.getPullRequestCommentsCount = function(projectIdOrKey, repoIdOrName, number) {};

/**
 * @param {string} projectIdOrKey
 * @param {string} repoIdOrName
 * @param {number} number
 * @param {number} commentId
 * @param {?} params
 * @return {!Promise<?>}
 */
Backlog.prototype.patchPullRequestComments = function(projectIdOrKey, repoIdOrName, number, commentId, params) {};

/**
 * @param {string} projectIdOrKey
 * @param {string} repoIdOrName
 * @param {number} number
 * @return {!Promise<?>}
 */
Backlog.prototype.getPullRequestAttachments = function(projectIdOrKey, repoIdOrName, number) {};

/**
 * @param {string} projectIdOrKey
 * @param {string} repoIdOrName
 * @param {number} number
 * @param {number} attachmentId
 * @return {!Promise<?>}
 */
Backlog.prototype.deletePullRequestAttachment = function(projectIdOrKey, repoIdOrName, number, attachmentId) {};

/**
 * @param {string} projectIdOrKey
 * @return {!Promise<?>}
 */
Backlog.prototype.getProjectIcon = function(projectIdOrKey) {};

/**
 * @param {string} projectIdOrKey
 * @param {number} sharedFileId
 * @return {!Promise<?>}
 */
Backlog.prototype.getSharedFile = function(projectIdOrKey, sharedFileId) {};

/**
 * @param {string} issueIdOrKey
 * @param {number} attachmentId
 * @return {!Promise<?>}
 */
Backlog.prototype.getIssueAttachment = function(issueIdOrKey, attachmentId) {};

/**
 * @param {number} wikiId
 * @param {number} attachmentId
 * @return {!Promise<?>}
 */
Backlog.prototype.getWikiAttachment = function(wikiId, attachmentId) {};

/**
 * @param {string} projectIdOrKey
 * @param {string} repoIdOrName
 * @param {number} number
 * @param {number} attachmentId
 * @return {!Promise<?>}
 */
Backlog.prototype.getPullRequestAttachment = function(projectIdOrKey, repoIdOrName, number, attachmentId) {};

/**
 * @param {?} path
 * @return {?}
 */
Backlog.prototype.download = function(path) {};

/**
 * @param {?} path
 * @param {?} params
 * @return {?}
 */
Backlog.prototype.upload = function(path, params) {};

/**
 * @param {?} response
 * @return {?}
 */
Backlog.prototype.parseFileData = function(response) {};

/**
 * @constructor
 * @struct
 * @param {?} credentials
 * @param {number=} timeout
 */
function OAuth2(credentials, timeout) {}
 /** @type {?} */
OAuth2.prototype.credentials;
 /** @type {?} */
OAuth2.prototype.timeout;

/**
 * @param {?} options
 * @return {string}
 */
OAuth2.prototype.getAuthorizationURL = function(options) {};

/**
 * @param {?} options
 * @return {!Promise<?>}
 */
OAuth2.prototype.getAccessToken = function(options) {};

/**
 * @param {?} options
 * @return {!Promise<?>}
 */
OAuth2.prototype.refreshAccessToken = function(options) {};

/* TODO: ImportDeclaration in  */
/** @const */
var Entity = {};
/** @const */
Entity.File = {};

/** @typedef {?} */
Entity.File.FileData;
/**
 * @record
 * @struct
 */
Entity.File.NodeFileData = function() {};
 /** @type {!internal.PassThrough} */
Entity.File.NodeFileData.prototype.body;
 /** @type {string} */
Entity.File.NodeFileData.prototype.url;
 /** @type {string} */
Entity.File.NodeFileData.prototype.filename;
/**
 * @record
 * @struct
 */
Entity.File.BrowserFileData = function() {};
 /** @type {?} */
Entity.File.BrowserFileData.prototype.body;
 /** @type {string} */
Entity.File.BrowserFileData.prototype.url;
 /** @type {?} */
Entity.File.BrowserFileData.prototype.blob;
/** @const */
Entity.OAuth2 = {};
/**
 * @record
 * @struct
 */
Entity.OAuth2.AccessToken = function() {};
 /** @type {string} */
Entity.OAuth2.AccessToken.prototype.access_token;
 /** @type {string} */
Entity.OAuth2.AccessToken.prototype.token_type;
 /** @type {number} */
Entity.OAuth2.AccessToken.prototype.expires_in;
 /** @type {string} */
Entity.OAuth2.AccessToken.prototype.refresh_token;
/** @const */
var Option = {};

/** @typedef {string} */
Option.Order;

/** @const */
Option.ActivityType = {};
/** @const {number} */
Option.ActivityType.Undefined;
/** @const {number} */
Option.ActivityType.IssueCreated;
/** @const {number} */
Option.ActivityType.IssueUpdated;
/** @const {number} */
Option.ActivityType.IssueCommented;
/** @const {number} */
Option.ActivityType.IssueDeleted;
/** @const {number} */
Option.ActivityType.WikiCreated;
/** @const {number} */
Option.ActivityType.WikiUpdated;
/** @const {number} */
Option.ActivityType.WikiDeleted;
/** @const {number} */
Option.ActivityType.FileAdded;
/** @const {number} */
Option.ActivityType.FileUpdated;
/** @const {number} */
Option.ActivityType.FileDeleted;
/** @const {number} */
Option.ActivityType.SvnCommitted;
/** @const {number} */
Option.ActivityType.GitPushed;
/** @const {number} */
Option.ActivityType.GitRepositoryCreated;
/** @const {number} */
Option.ActivityType.IssueMultiUpdated;
/** @const {number} */
Option.ActivityType.ProjectUserAdded;
/** @const {number} */
Option.ActivityType.ProjectUserRemoved;
/** @const {number} */
Option.ActivityType.NotifyAdded;
/** @const {number} */
Option.ActivityType.PullRequestAdded;
/** @const {number} */
Option.ActivityType.PullRequestUpdated;
/** @const {number} */
Option.ActivityType.PullRequestCommented;
/** @const {number} */
Option.ActivityType.PullRequestMerged;
/** @const */
Option.Notification = {};
/**
 * @record
 * @struct
 */
Option.Notification.GetNotificationsParams = function() {};
 /** @type {number} */
Option.Notification.GetNotificationsParams.prototype.minId;
 /** @type {number} */
Option.Notification.GetNotificationsParams.prototype.maxId;
 /** @type {number} */
Option.Notification.GetNotificationsParams.prototype.count;
 /** @type {string} */
Option.Notification.GetNotificationsParams.prototype.order;
/**
 * @record
 * @struct
 */
Option.Notification.GetNotificationsCountParams = function() {};
 /** @type {boolean} */
Option.Notification.GetNotificationsCountParams.prototype.alreadyRead;
 /** @type {boolean} */
Option.Notification.GetNotificationsCountParams.prototype.resourceAlreadyRead;
/** @const */
Option.Space = {};
/**
 * @record
 * @struct
 */
Option.Space.GetActivitiesParams = function() {};
 /** @type {!Array<?>} */
Option.Space.GetActivitiesParams.prototype.activityTypeId;
 /** @type {number} */
Option.Space.GetActivitiesParams.prototype.minId;
 /** @type {number} */
Option.Space.GetActivitiesParams.prototype.maxId;
 /** @type {number} */
Option.Space.GetActivitiesParams.prototype.count;
 /** @type {string} */
Option.Space.GetActivitiesParams.prototype.order;
/**
 * @record
 * @struct
 */
Option.Space.PutSpaceNotificationParams = function() {};
 /** @type {string} */
Option.Space.PutSpaceNotificationParams.prototype.content;
/** @const */
Option.User = {};
/**
 * @record
 * @struct
 */
Option.User.PostUserParams = function() {};
 /** @type {string} */
Option.User.PostUserParams.prototype.userId;
 /** @type {string} */
Option.User.PostUserParams.prototype.password;
 /** @type {string} */
Option.User.PostUserParams.prototype.name;
 /** @type {string} */
Option.User.PostUserParams.prototype.mailAddress;
 /** @type {?} */
Option.User.PostUserParams.prototype.roleType;
/**
 * @record
 * @struct
 */
Option.User.PatchUserParams = function() {};
 /** @type {string} */
Option.User.PatchUserParams.prototype.password;
 /** @type {string} */
Option.User.PatchUserParams.prototype.name;
 /** @type {string} */
Option.User.PatchUserParams.prototype.mailAddress;
 /** @type {?} */
Option.User.PatchUserParams.prototype.roleType;

/** @const */
Option.User.RoleType = {};
/** @const {number} */
Option.User.RoleType.Admin;
/** @const {number} */
Option.User.RoleType.User;
/** @const {number} */
Option.User.RoleType.Reporter;
/** @const {number} */
Option.User.RoleType.Viewer;
/** @const {number} */
Option.User.RoleType.GuestReporter;
/** @const {number} */
Option.User.RoleType.GuestViewer;
/**
 * @record
 * @struct
 */
Option.User.GetUserActivitiesParams = function() {};
 /** @type {!Array<?>} */
Option.User.GetUserActivitiesParams.prototype.activityTypeId;
 /** @type {number} */
Option.User.GetUserActivitiesParams.prototype.minId;
 /** @type {number} */
Option.User.GetUserActivitiesParams.prototype.maxId;
 /** @type {number} */
Option.User.GetUserActivitiesParams.prototype.count;
 /** @type {string} */
Option.User.GetUserActivitiesParams.prototype.order;
/**
 * @record
 * @struct
 */
Option.User.GetUserStarsParams = function() {};
 /** @type {number} */
Option.User.GetUserStarsParams.prototype.minId;
 /** @type {number} */
Option.User.GetUserStarsParams.prototype.maxId;
 /** @type {number} */
Option.User.GetUserStarsParams.prototype.count;
 /** @type {string} */
Option.User.GetUserStarsParams.prototype.order;
/**
 * @record
 * @struct
 */
Option.User.GetUserStarsCountParams = function() {};
 /** @type {string} */
Option.User.GetUserStarsCountParams.prototype.since;
 /** @type {string} */
Option.User.GetUserStarsCountParams.prototype.until;
/**
 * @record
 * @struct
 */
Option.User.GetRecentlyViewedParams = function() {};
 /** @type {string} */
Option.User.GetRecentlyViewedParams.prototype.order;
 /** @type {number} */
Option.User.GetRecentlyViewedParams.prototype.offset;
 /** @type {number} */
Option.User.GetRecentlyViewedParams.prototype.count;
/** @const */
Option.Group = {};
/**
 * @record
 * @struct
 */
Option.Group.GetGroupsParams = function() {};
 /** @type {string} */
Option.Group.GetGroupsParams.prototype.order;
 /** @type {number} */
Option.Group.GetGroupsParams.prototype.offset;
 /** @type {number} */
Option.Group.GetGroupsParams.prototype.count;
/**
 * @record
 * @struct
 */
Option.Group.PostGroupsParams = function() {};
 /** @type {string} */
Option.Group.PostGroupsParams.prototype.name;
 /** @type {!Array<string>} */
Option.Group.PostGroupsParams.prototype.members;
/**
 * @record
 * @struct
 */
Option.Group.PatchGroupParams = function() {};
 /** @type {string} */
Option.Group.PatchGroupParams.prototype.name;
 /** @type {!Array<string>} */
Option.Group.PatchGroupParams.prototype.members;
/** @const */
Option.Project = {};

/** @typedef {string} */
Option.Project.TextFormattingRule;
/**
 * @record
 * @struct
 */
Option.Project.PostProjectParams = function() {};
 /** @type {string} */
Option.Project.PostProjectParams.prototype.name;
 /** @type {string} */
Option.Project.PostProjectParams.prototype.key;
 /** @type {boolean} */
Option.Project.PostProjectParams.prototype.chartEnabled;
 /** @type {boolean} */
Option.Project.PostProjectParams.prototype.projectLeaderCanEditProjectLeader;
 /** @type {boolean} */
Option.Project.PostProjectParams.prototype.subtaskingEnabled;
 /** @type {string} */
Option.Project.PostProjectParams.prototype.textFormattingRule;
/**
 * @record
 * @struct
 */
Option.Project.PatchProjectParams = function() {};
 /** @type {string} */
Option.Project.PatchProjectParams.prototype.name;
 /** @type {string} */
Option.Project.PatchProjectParams.prototype.key;
 /** @type {boolean} */
Option.Project.PatchProjectParams.prototype.chartEnabled;
 /** @type {boolean} */
Option.Project.PatchProjectParams.prototype.subtaskingEnabled;
 /** @type {boolean} */
Option.Project.PatchProjectParams.prototype.projectLeaderCanEditProjectLeader;
 /** @type {string} */
Option.Project.PatchProjectParams.prototype.textFormattingRule;
 /** @type {boolean} */
Option.Project.PatchProjectParams.prototype.archived;
/**
 * @record
 * @struct
 */
Option.Project.GetProjectsParams = function() {};
 /** @type {boolean} */
Option.Project.GetProjectsParams.prototype.archived;
 /** @type {boolean} */
Option.Project.GetProjectsParams.prototype.all;
/**
 * @record
 * @struct
 */
Option.Project.DeleteProjectUsersParams = function() {};
 /** @type {number} */
Option.Project.DeleteProjectUsersParams.prototype.userId;
/**
 * @record
 * @struct
 */
Option.Project.PostProjectAdministrators = function() {};
 /** @type {number} */
Option.Project.PostProjectAdministrators.prototype.userId;
/**
 * @record
 * @struct
 */
Option.Project.DeleteProjectAdministrators = function() {};
 /** @type {number} */
Option.Project.DeleteProjectAdministrators.prototype.userId;

/** @typedef {string} */
Option.Project.IssueTypeColor;
/**
 * @record
 * @struct
 */
Option.Project.PostIssueTypeParams = function() {};
 /** @type {string} */
Option.Project.PostIssueTypeParams.prototype.name;
 /** @type {string} */
Option.Project.PostIssueTypeParams.prototype.color;
/**
 * @record
 * @struct
 */
Option.Project.PatchIssueTypeParams = function() {};
 /** @type {string} */
Option.Project.PatchIssueTypeParams.prototype.name;
 /** @type {string} */
Option.Project.PatchIssueTypeParams.prototype.color;
/**
 * @record
 * @struct
 */
Option.Project.DeleteIssueTypeParams = function() {};
 /** @type {number} */
Option.Project.DeleteIssueTypeParams.prototype.substituteIssueTypeId;
/**
 * @record
 * @struct
 */
Option.Project.PostCategoriesParams = function() {};
 /** @type {string} */
Option.Project.PostCategoriesParams.prototype.name;
/**
 * @record
 * @struct
 */
Option.Project.PatchCategoriesParams = function() {};
 /** @type {string} */
Option.Project.PatchCategoriesParams.prototype.name;
/**
 * @record
 * @struct
 */
Option.Project.PostVersionsParams = function() {};
 /** @type {string} */
Option.Project.PostVersionsParams.prototype.name;
 /** @type {string} */
Option.Project.PostVersionsParams.prototype.description;
 /** @type {string} */
Option.Project.PostVersionsParams.prototype.startDate;
 /** @type {string} */
Option.Project.PostVersionsParams.prototype.releaseDueDate;
/**
 * @record
 * @struct
 */
Option.Project.PatchVersionsParams = function() {};
 /** @type {string} */
Option.Project.PatchVersionsParams.prototype.name;
 /** @type {string} */
Option.Project.PatchVersionsParams.prototype.description;
 /** @type {string} */
Option.Project.PatchVersionsParams.prototype.startDate;
 /** @type {string} */
Option.Project.PatchVersionsParams.prototype.releaseDueDate;
 /** @type {boolean} */
Option.Project.PatchVersionsParams.prototype.archived;
/**
 * @record
 * @struct
 */
Option.Project.PostCustomFieldParams = function() {};
 /** @type {?} */
Option.Project.PostCustomFieldParams.prototype.typeId;
 /** @type {string} */
Option.Project.PostCustomFieldParams.prototype.name;
 /** @type {!Array<number>} */
Option.Project.PostCustomFieldParams.prototype.applicableIssueTypes;
 /** @type {string} */
Option.Project.PostCustomFieldParams.prototype.description;
 /** @type {boolean} */
Option.Project.PostCustomFieldParams.prototype.required;
/**
 * @extends {Option.Project.PostCustomFieldParams}
 * @record
 * @struct
 */
Option.Project.PostCustomFieldWithNumericParams = function() {};
 /** @type {number} */
Option.Project.PostCustomFieldWithNumericParams.prototype.min;
 /** @type {number} */
Option.Project.PostCustomFieldWithNumericParams.prototype.max;
 /** @type {number} */
Option.Project.PostCustomFieldWithNumericParams.prototype.initialValue;
 /** @type {string} */
Option.Project.PostCustomFieldWithNumericParams.prototype.unit;
/**
 * @extends {Option.Project.PostCustomFieldParams}
 * @record
 * @struct
 */
Option.Project.PostCustomFieldWithDateParams = function() {};
 /** @type {string} */
Option.Project.PostCustomFieldWithDateParams.prototype.min;
 /** @type {string} */
Option.Project.PostCustomFieldWithDateParams.prototype.max;
 /** @type {number} */
Option.Project.PostCustomFieldWithDateParams.prototype.initialValueType;
 /** @type {string} */
Option.Project.PostCustomFieldWithDateParams.prototype.initialDate;
 /** @type {number} */
Option.Project.PostCustomFieldWithDateParams.prototype.initialShift;
/**
 * @extends {Option.Project.PostCustomFieldParams}
 * @record
 * @struct
 */
Option.Project.PostCustomFieldWithListParams = function() {};
 /** @type {!Array<string>} */
Option.Project.PostCustomFieldWithListParams.prototype.items;
 /** @type {boolean} */
Option.Project.PostCustomFieldWithListParams.prototype.allowInput;
 /** @type {boolean} */
Option.Project.PostCustomFieldWithListParams.prototype.allowAddItem;
/**
 * @record
 * @struct
 */
Option.Project.PatchCustomFieldParams = function() {};
 /** @type {string} */
Option.Project.PatchCustomFieldParams.prototype.name;
 /** @type {!Array<number>} */
Option.Project.PatchCustomFieldParams.prototype.applicableIssueTypes;
 /** @type {string} */
Option.Project.PatchCustomFieldParams.prototype.description;
 /** @type {boolean} */
Option.Project.PatchCustomFieldParams.prototype.required;
/**
 * @extends {Option.Project.PatchCustomFieldParams}
 * @record
 * @struct
 */
Option.Project.PatchCustomFieldWithNumericParams = function() {};
 /** @type {number} */
Option.Project.PatchCustomFieldWithNumericParams.prototype.min;
 /** @type {number} */
Option.Project.PatchCustomFieldWithNumericParams.prototype.max;
 /** @type {number} */
Option.Project.PatchCustomFieldWithNumericParams.prototype.initialValue;
 /** @type {string} */
Option.Project.PatchCustomFieldWithNumericParams.prototype.unit;
/**
 * @extends {Option.Project.PatchCustomFieldParams}
 * @record
 * @struct
 */
Option.Project.PatchCustomFieldWithDateParams = function() {};
 /** @type {string} */
Option.Project.PatchCustomFieldWithDateParams.prototype.min;
 /** @type {string} */
Option.Project.PatchCustomFieldWithDateParams.prototype.max;
 /** @type {number} */
Option.Project.PatchCustomFieldWithDateParams.prototype.initialValueType;
 /** @type {string} */
Option.Project.PatchCustomFieldWithDateParams.prototype.initialDate;
 /** @type {number} */
Option.Project.PatchCustomFieldWithDateParams.prototype.initialShift;
/**
 * @extends {Option.Project.PatchCustomFieldParams}
 * @record
 * @struct
 */
Option.Project.PatchCustomFieldWithListParams = function() {};
 /** @type {!Array<string>} */
Option.Project.PatchCustomFieldWithListParams.prototype.items;
 /** @type {boolean} */
Option.Project.PatchCustomFieldWithListParams.prototype.allowInput;
 /** @type {boolean} */
Option.Project.PatchCustomFieldWithListParams.prototype.allowAddItem;
/**
 * @record
 * @struct
 */
Option.Project.PostCustomFieldItemParams = function() {};
 /** @type {string} */
Option.Project.PostCustomFieldItemParams.prototype.name;
/**
 * @record
 * @struct
 */
Option.Project.PatchCustomFieldItemParams = function() {};
 /** @type {string} */
Option.Project.PatchCustomFieldItemParams.prototype.name;
/**
 * @record
 * @struct
 */
Option.Project.GetSharedFilesParams = function() {};
 /** @type {string} */
Option.Project.GetSharedFilesParams.prototype.order;
 /** @type {number} */
Option.Project.GetSharedFilesParams.prototype.offset;
 /** @type {number} */
Option.Project.GetSharedFilesParams.prototype.count;
/**
 * @record
 * @struct
 */
Option.Project.PostWebhookParams = function() {};
 /** @type {string} */
Option.Project.PostWebhookParams.prototype.name;
 /** @type {string} */
Option.Project.PostWebhookParams.prototype.description;
 /** @type {string} */
Option.Project.PostWebhookParams.prototype.hookUrl;
 /** @type {boolean} */
Option.Project.PostWebhookParams.prototype.allEvent;
 /** @type {!Array<number>} */
Option.Project.PostWebhookParams.prototype.activityTypeIds;
/**
 * @record
 * @struct
 */
Option.Project.PatchWebhookParams = function() {};
 /** @type {string} */
Option.Project.PatchWebhookParams.prototype.name;
 /** @type {string} */
Option.Project.PatchWebhookParams.prototype.description;
 /** @type {string} */
Option.Project.PatchWebhookParams.prototype.hookUrl;
 /** @type {boolean} */
Option.Project.PatchWebhookParams.prototype.allEvent;
 /** @type {!Array<number>} */
Option.Project.PatchWebhookParams.prototype.activityTypeIds;

/** @const */
Option.Project.FieldType = {};
/** @const {number} */
Option.Project.FieldType.Text;
/** @const {number} */
Option.Project.FieldType.TextArea;
/** @const {number} */
Option.Project.FieldType.Numeric;
/** @const {number} */
Option.Project.FieldType.Date;
/** @const {number} */
Option.Project.FieldType.SingleList;
/** @const {number} */
Option.Project.FieldType.MultipleList;
/** @const {number} */
Option.Project.FieldType.CheckBox;
/** @const {number} */
Option.Project.FieldType.Radio;
/**
 * @record
 * @struct
 */
Option.Project.PostStarParams = function() {};
 /** @type {number} */
Option.Project.PostStarParams.prototype.issueId;
 /** @type {number} */
Option.Project.PostStarParams.prototype.commentId;
 /** @type {number} */
Option.Project.PostStarParams.prototype.wikiId;
 /** @type {number} */
Option.Project.PostStarParams.prototype.pullRequestId;
 /** @type {number} */
Option.Project.PostStarParams.prototype.pullRequestCommentId;
/** @const */
Option.Issue = {};
/**
 * @record
 * @struct
 */
Option.Issue.PostIssueParams = function() {};
 /** @type {number} */
Option.Issue.PostIssueParams.prototype.projectId;
 /** @type {string} */
Option.Issue.PostIssueParams.prototype.summary;
 /** @type {number} */
Option.Issue.PostIssueParams.prototype.priorityId;
 /** @type {number} */
Option.Issue.PostIssueParams.prototype.issueTypeId;
 /** @type {number} */
Option.Issue.PostIssueParams.prototype.parentIssueId;
 /** @type {string} */
Option.Issue.PostIssueParams.prototype.description;
 /** @type {string} */
Option.Issue.PostIssueParams.prototype.startDate;
 /** @type {string} */
Option.Issue.PostIssueParams.prototype.dueDate;
 /** @type {number} */
Option.Issue.PostIssueParams.prototype.estimatedHours;
 /** @type {number} */
Option.Issue.PostIssueParams.prototype.actualHours;
 /** @type {!Array<number>} */
Option.Issue.PostIssueParams.prototype.categoryId;
 /** @type {!Array<number>} */
Option.Issue.PostIssueParams.prototype.versionId;
 /** @type {!Array<number>} */
Option.Issue.PostIssueParams.prototype.milestoneId;
 /** @type {number} */
Option.Issue.PostIssueParams.prototype.assigneeId;
 /** @type {!Array<number>} */
Option.Issue.PostIssueParams.prototype.notifiedUserId;
 /** @type {!Array<number>} */
Option.Issue.PostIssueParams.prototype.attachmentId;

/* TODO: IndexSignature: Option.Issue */
/**
 * @record
 * @struct
 */
Option.Issue.PatchIssueParams = function() {};
 /** @type {string} */
Option.Issue.PatchIssueParams.prototype.summary;
 /** @type {number} */
Option.Issue.PatchIssueParams.prototype.parentIssueId;
 /** @type {string} */
Option.Issue.PatchIssueParams.prototype.description;
 /** @type {number} */
Option.Issue.PatchIssueParams.prototype.statusId;
 /** @type {number} */
Option.Issue.PatchIssueParams.prototype.resolutionId;
 /** @type {string} */
Option.Issue.PatchIssueParams.prototype.startDate;
 /** @type {string} */
Option.Issue.PatchIssueParams.prototype.dueDate;
 /** @type {number} */
Option.Issue.PatchIssueParams.prototype.estimatedHours;
 /** @type {number} */
Option.Issue.PatchIssueParams.prototype.actualHours;
 /** @type {number} */
Option.Issue.PatchIssueParams.prototype.issueTypeId;
 /** @type {!Array<number>} */
Option.Issue.PatchIssueParams.prototype.categoryId;
 /** @type {!Array<number>} */
Option.Issue.PatchIssueParams.prototype.versionId;
 /** @type {!Array<number>} */
Option.Issue.PatchIssueParams.prototype.milestoneId;
 /** @type {number} */
Option.Issue.PatchIssueParams.prototype.priorityId;
 /** @type {number} */
Option.Issue.PatchIssueParams.prototype.assigneeId;
 /** @type {!Array<number>} */
Option.Issue.PatchIssueParams.prototype.notifiedUserId;
 /** @type {!Array<number>} */
Option.Issue.PatchIssueParams.prototype.attachmentId;
 /** @type {string} */
Option.Issue.PatchIssueParams.prototype.comment;

/* TODO: IndexSignature: Option.Issue */
/**
 * @record
 * @struct
 */
Option.Issue.GetIssuesParams = function() {};
 /** @type {!Array<number>} */
Option.Issue.GetIssuesParams.prototype.projectId;
 /** @type {!Array<number>} */
Option.Issue.GetIssuesParams.prototype.issueTypeId;
 /** @type {!Array<number>} */
Option.Issue.GetIssuesParams.prototype.categoryId;
 /** @type {!Array<number>} */
Option.Issue.GetIssuesParams.prototype.versionId;
 /** @type {!Array<number>} */
Option.Issue.GetIssuesParams.prototype.milestoneId;
 /** @type {!Array<number>} */
Option.Issue.GetIssuesParams.prototype.statusId;
 /** @type {!Array<number>} */
Option.Issue.GetIssuesParams.prototype.priorityId;
 /** @type {!Array<number>} */
Option.Issue.GetIssuesParams.prototype.assigneeId;
 /** @type {!Array<number>} */
Option.Issue.GetIssuesParams.prototype.createdUserId;
 /** @type {!Array<number>} */
Option.Issue.GetIssuesParams.prototype.resolutionId;
 /** @type {?} */
Option.Issue.GetIssuesParams.prototype.parentChild;
 /** @type {boolean} */
Option.Issue.GetIssuesParams.prototype.attachment;
 /** @type {boolean} */
Option.Issue.GetIssuesParams.prototype.sharedFile;
 /** @type {string} */
Option.Issue.GetIssuesParams.prototype.sort;
 /** @type {string} */
Option.Issue.GetIssuesParams.prototype.order;
 /** @type {number} */
Option.Issue.GetIssuesParams.prototype.offset;
 /** @type {number} */
Option.Issue.GetIssuesParams.prototype.count;
 /** @type {string} */
Option.Issue.GetIssuesParams.prototype.createdSince;
 /** @type {string} */
Option.Issue.GetIssuesParams.prototype.createdUntil;
 /** @type {string} */
Option.Issue.GetIssuesParams.prototype.updatedSince;
 /** @type {string} */
Option.Issue.GetIssuesParams.prototype.updatedUntil;
 /** @type {string} */
Option.Issue.GetIssuesParams.prototype.startDateSince;
 /** @type {string} */
Option.Issue.GetIssuesParams.prototype.startDateUntil;
 /** @type {string} */
Option.Issue.GetIssuesParams.prototype.dueDateSince;
 /** @type {string} */
Option.Issue.GetIssuesParams.prototype.dueDateUntil;
 /** @type {!Array<number>} */
Option.Issue.GetIssuesParams.prototype.id;
 /** @type {!Array<number>} */
Option.Issue.GetIssuesParams.prototype.parentIssueId;
 /** @type {string} */
Option.Issue.GetIssuesParams.prototype.keyword;

/* TODO: IndexSignature: Option.Issue */

/** @const */
Option.Issue.ParentChildType = {};
/** @const {number} */
Option.Issue.ParentChildType.All;
/** @const {number} */
Option.Issue.ParentChildType.NotChild;
/** @const {number} */
Option.Issue.ParentChildType.Child;
/** @const {number} */
Option.Issue.ParentChildType.NotChildNotParent;
/** @const {number} */
Option.Issue.ParentChildType.Parent;

/** @typedef {string} */
Option.Issue.SortKey;
/**
 * @record
 * @struct
 */
Option.Issue.GetIssueCommentsParams = function() {};
 /** @type {number} */
Option.Issue.GetIssueCommentsParams.prototype.minId;
 /** @type {number} */
Option.Issue.GetIssueCommentsParams.prototype.maxId;
 /** @type {number} */
Option.Issue.GetIssueCommentsParams.prototype.count;
 /** @type {string} */
Option.Issue.GetIssueCommentsParams.prototype.order;
/**
 * @record
 * @struct
 */
Option.Issue.PostIssueCommentsParams = function() {};
 /** @type {string} */
Option.Issue.PostIssueCommentsParams.prototype.content;
 /** @type {!Array<number>} */
Option.Issue.PostIssueCommentsParams.prototype.notifiedUserId;
 /** @type {!Array<number>} */
Option.Issue.PostIssueCommentsParams.prototype.attachmentId;
/**
 * @record
 * @struct
 */
Option.Issue.PatchIssueCommentParams = function() {};
 /** @type {string} */
Option.Issue.PatchIssueCommentParams.prototype.content;
/**
 * @record
 * @struct
 */
Option.Issue.IssueCommentNotifications = function() {};
 /** @type {!Array<number>} */
Option.Issue.IssueCommentNotifications.prototype.notifiedUserId;
/**
 * @record
 * @struct
 */
Option.Issue.LinkIssueSharedFilesParams = function() {};
 /** @type {!Array<number>} */
Option.Issue.LinkIssueSharedFilesParams.prototype.fileId;
/** @const */
Option.PullRequest = {};
/**
 * @record
 * @struct
 */
Option.PullRequest.GetPullRequestsParams = function() {};
 /** @type {!Array<number>} */
Option.PullRequest.GetPullRequestsParams.prototype.statusId;
 /** @type {!Array<number>} */
Option.PullRequest.GetPullRequestsParams.prototype.assigneeId;
 /** @type {!Array<number>} */
Option.PullRequest.GetPullRequestsParams.prototype.issueId;
 /** @type {!Array<number>} */
Option.PullRequest.GetPullRequestsParams.prototype.createdUserId;
 /** @type {number} */
Option.PullRequest.GetPullRequestsParams.prototype.offset;
 /** @type {number} */
Option.PullRequest.GetPullRequestsParams.prototype.count;
/**
 * @record
 * @struct
 */
Option.PullRequest.PostPullRequestParams = function() {};
 /** @type {string} */
Option.PullRequest.PostPullRequestParams.prototype.summary;
 /** @type {string} */
Option.PullRequest.PostPullRequestParams.prototype.description;
 /** @type {string} */
Option.PullRequest.PostPullRequestParams.prototype.base;
 /** @type {string} */
Option.PullRequest.PostPullRequestParams.prototype.branch;
 /** @type {number} */
Option.PullRequest.PostPullRequestParams.prototype.issueId;
 /** @type {number} */
Option.PullRequest.PostPullRequestParams.prototype.assigneeId;
 /** @type {!Array<number>} */
Option.PullRequest.PostPullRequestParams.prototype.notifiedUserId;
 /** @type {!Array<number>} */
Option.PullRequest.PostPullRequestParams.prototype.attachmentId;
/**
 * @record
 * @struct
 */
Option.PullRequest.PatchPullRequestParams = function() {};
 /** @type {string} */
Option.PullRequest.PatchPullRequestParams.prototype.summary;
 /** @type {string} */
Option.PullRequest.PatchPullRequestParams.prototype.description;
 /** @type {number} */
Option.PullRequest.PatchPullRequestParams.prototype.issueId;
 /** @type {number} */
Option.PullRequest.PatchPullRequestParams.prototype.assigneeId;
 /** @type {!Array<number>} */
Option.PullRequest.PatchPullRequestParams.prototype.notifiedUserId;
 /** @type {!Array<string>} */
Option.PullRequest.PatchPullRequestParams.prototype.comment;
/**
 * @record
 * @struct
 */
Option.PullRequest.GetPullRequestCommentsParams = function() {};
 /** @type {number} */
Option.PullRequest.GetPullRequestCommentsParams.prototype.minId;
 /** @type {number} */
Option.PullRequest.GetPullRequestCommentsParams.prototype.maxId;
 /** @type {number} */
Option.PullRequest.GetPullRequestCommentsParams.prototype.count;
 /** @type {string} */
Option.PullRequest.GetPullRequestCommentsParams.prototype.order;
/**
 * @record
 * @struct
 */
Option.PullRequest.PostPullRequestCommentsParams = function() {};
 /** @type {string} */
Option.PullRequest.PostPullRequestCommentsParams.prototype.content;
 /** @type {!Array<number>} */
Option.PullRequest.PostPullRequestCommentsParams.prototype.notifiedUserId;
/**
 * @record
 * @struct
 */
Option.PullRequest.PatchPullRequestCommentsParams = function() {};
 /** @type {string} */
Option.PullRequest.PatchPullRequestCommentsParams.prototype.content;
/** @const */
Option.Wiki = {};
/**
 * @record
 * @struct
 */
Option.Wiki.PostWikiParams = function() {};
 /** @type {number} */
Option.Wiki.PostWikiParams.prototype.projectId;
 /** @type {string} */
Option.Wiki.PostWikiParams.prototype.name;
 /** @type {string} */
Option.Wiki.PostWikiParams.prototype.content;
 /** @type {boolean} */
Option.Wiki.PostWikiParams.prototype.mailNotify;
/**
 * @record
 * @struct
 */
Option.Wiki.PatchWikiParams = function() {};
 /** @type {string} */
Option.Wiki.PatchWikiParams.prototype.name;
 /** @type {string} */
Option.Wiki.PatchWikiParams.prototype.content;
 /** @type {boolean} */
Option.Wiki.PatchWikiParams.prototype.mailNotify;
/**
 * @record
 * @struct
 */
Option.Wiki.GetWikisHistoryParams = function() {};
 /** @type {number} */
Option.Wiki.GetWikisHistoryParams.prototype.minId;
 /** @type {number} */
Option.Wiki.GetWikisHistoryParams.prototype.maxId;
 /** @type {number} */
Option.Wiki.GetWikisHistoryParams.prototype.count;
 /** @type {string} */
Option.Wiki.GetWikisHistoryParams.prototype.order;
/** @const */
Option.OAuth2 = {};
/**
 * @record
 * @struct
 */
Option.OAuth2.Credentials = function() {};
 /** @type {string} */
Option.OAuth2.Credentials.prototype.clientId;
 /** @type {string} */
Option.OAuth2.Credentials.prototype.clientSecret;
/** @const */
var Error = {};

/**
 * @constructor
 * @struct
 * @param {string} name
 * @param {!Response} response
 * @param {?=} body
 */
Error.BacklogError = function(name, response, body) {};
 /** @type {?} */
Error.BacklogError.prototype._name;
 /** @type {?} */
Error.BacklogError.prototype._url;
 /** @type {?} */
Error.BacklogError.prototype._status;
 /** @type {?} */
Error.BacklogError.prototype._body;
 /** @type {?} */
Error.BacklogError.prototype._response;
 /** @type {string} */
Error.BacklogError.prototype.name;
 /** @type {string} */
Error.BacklogError.prototype.url;
 /** @type {number} */
Error.BacklogError.prototype.status;
 /** @type {?} */
Error.BacklogError.prototype.body;
 /** @type {!Response} */
Error.BacklogError.prototype.response;

/**
 * @constructor
 * @struct
 * @param {!Response} response
 * @param {?=} body
 */
Error.BacklogApiError = function(response, body) {};

/**
 * @constructor
 * @struct
 * @param {!Response} response
 * @param {?=} body
 */
Error.BacklogAuthError = function(response, body) {};

/**
 * @constructor
 * @struct
 * @param {!Response} response
 */
Error.UnexpectedError = function(response) {};
/**
 * @record
 * @struct
 */
Error.BacklogErrorMessage = function() {};
 /** @type {string} */
Error.BacklogErrorMessage.prototype.message;
 /** @type {number} */
Error.BacklogErrorMessage.prototype.code;
 /** @type {string} */
Error.BacklogErrorMessage.prototype.errorInfo;
 /** @type {string} */
Error.BacklogErrorMessage.prototype.moreInfo;

/** @typedef {string} */
Error.BacklogErrorNameType;
