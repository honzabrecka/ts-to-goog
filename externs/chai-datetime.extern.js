/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/chai-datetime/index.d.ts:

/**
 * @param {?} chai
 * @param {?} utils
 * @return {void}
 */
function chaiDateTime(chai, utils) {}

/* TODO: ExportAssignment in  */

/**
 * @param {!Date} date
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.afterDate = function(date) {};

/**
 * @param {!Date} date
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.beforeDate = function(date) {};

/**
 * @param {!Date} date
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.equalDate = function(date) {};

/**
 * @param {!Date} date
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.afterTime = function(date) {};

/**
 * @param {!Date} date
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.beforeTime = function(date) {};

/**
 * @param {!Date} date
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.equalTime = function(date) {};

/**
 * @param {!Date} val
 * @param {!Date} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.equalTime = function(val, exp, msg) {};

/**
 * @param {!Date} val
 * @param {!Date} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notEqualTime = function(val, exp, msg) {};

/**
 * @param {!Date} val
 * @param {!Date} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.beforeTime = function(val, exp, msg) {};

/**
 * @param {!Date} val
 * @param {!Date} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notBeforeTime = function(val, exp, msg) {};

/**
 * @param {!Date} val
 * @param {!Date} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.afterTime = function(val, exp, msg) {};

/**
 * @param {!Date} val
 * @param {!Date} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notAfterTime = function(val, exp, msg) {};

/**
 * @param {!Date} val
 * @param {!Date} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.equalDate = function(val, exp, msg) {};

/**
 * @param {!Date} val
 * @param {!Date} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notEqualDate = function(val, exp, msg) {};

/**
 * @param {!Date} val
 * @param {!Date} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.beforeDate = function(val, exp, msg) {};

/**
 * @param {!Date} val
 * @param {!Date} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notBeforeDate = function(val, exp, msg) {};

/**
 * @param {!Date} val
 * @param {!Date} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.afterDate = function(val, exp, msg) {};

/**
 * @param {!Date} val
 * @param {!Date} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notAfterDate = function(val, exp, msg) {};
 /** @type {!Chai.Assertion} */
Date.prototype.should;
