/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/quill/index.d.ts:

/** @typedef {?} */
var DeltaOperation;

/** @typedef {string} */
var Sources;
/**
 * @record
 * @struct
 */
function Key() {}
 /** @type {string} */
Key.prototype.key;
 /** @type {boolean} */
Key.prototype.shortKey;
/**
 * @record
 * @struct
 */
function StringMap() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function OptionalAttributes() {}
 /** @type {?} */
OptionalAttributes.prototype.attributes;

/** @typedef {?} */
var TextChangeHandler;

/** @typedef {?} */
var SelectionChangeHandler;

/** @typedef {?} */
var EditorChangeHandler;
/**
 * @record
 * @struct
 */
function KeyboardStatic() {}

/**
 * @param {?} key
 * @param {?} callback_or_context
 * @param {?=} callback
 * @return {void}
 */
KeyboardStatic.prototype.addBinding = function(key, callback_or_context, callback) {};
/**
 * @record
 * @struct
 */
function ClipboardStatic() {}

/**
 * @param {(string|number)} selectorOrNodeType
 * @param {?} callback
 * @return {void}
 */
ClipboardStatic.prototype.addMatcher = function(selectorOrNodeType, callback) {};

/**
 * @param {string|number} html_or_index
 * @param {string=} source_or_html
 * @param {string=} source
 * @return {void}
 */
ClipboardStatic.prototype.dangerouslyPasteHTML = function(html_or_index, source_or_html, source) {};
/**
 * @record
 * @struct
 */
function QuillOptionsStatic() {}
 /** @type {string} */
QuillOptionsStatic.prototype.debug;
 /** @type {?} */
QuillOptionsStatic.prototype.modules;
 /** @type {string} */
QuillOptionsStatic.prototype.placeholder;
 /** @type {boolean} */
QuillOptionsStatic.prototype.readOnly;
 /** @type {string} */
QuillOptionsStatic.prototype.theme;
 /** @type {!Array<string>} */
QuillOptionsStatic.prototype.formats;
 /** @type {(string|!HTMLElement)} */
QuillOptionsStatic.prototype.bounds;
/**
 * @record
 * @struct
 */
function BoundsStatic() {}
 /** @type {number} */
BoundsStatic.prototype.left;
 /** @type {number} */
BoundsStatic.prototype.top;
 /** @type {number} */
BoundsStatic.prototype.height;
 /** @type {number} */
BoundsStatic.prototype.width;
/**
 * @record
 * @struct
 */
function DeltaStatic() {}
 /** @type {!Array<?>} */
DeltaStatic.prototype.ops;

/**
 * @param {number} length
 * @param {?=} attributes
 * @return {?}
 */
DeltaStatic.prototype.retain = function(length, attributes) {};

/**
 * @param {number} length
 * @return {?}
 */
DeltaStatic.prototype.delete = function(length) {};

/**
 * @param {?} predicate
 * @return {!Array<?>}
 */
DeltaStatic.prototype.filter = function(predicate) {};

/**
 * @param {?} predicate
 * @return {void}
 */
DeltaStatic.prototype.forEach = function(predicate) {};

/**
 * @param {?} text
 * @param {?=} attributes
 * @return {?}
 */
DeltaStatic.prototype.insert = function(text, attributes) {};

/**
 * @template T
 * @param {?} predicate
 * @return {!Array<?>}
 */
DeltaStatic.prototype.map = function(predicate) {};

/**
 * @param {?} predicate
 * @return {!Array<?>}
 */
DeltaStatic.prototype.partition = function(predicate) {};

/**
 * @template T
 * @param {?} predicate
 * @param {?} initial
 * @return {?}
 */
DeltaStatic.prototype.reduce = function(predicate, initial) {};

/**
 * @return {?}
 */
DeltaStatic.prototype.chop = function() {};

/**
 * @return {number}
 */
DeltaStatic.prototype.length = function() {};

/**
 * @param {number=} start
 * @param {number=} end
 * @return {?}
 */
DeltaStatic.prototype.slice = function(start, end) {};

/**
 * @param {?} other
 * @return {?}
 */
DeltaStatic.prototype.compose = function(other) {};

/**
 * @param {?} other
 * @return {?}
 */
DeltaStatic.prototype.concat = function(other) {};

/**
 * @param {?} other
 * @param {number=} index
 * @return {?}
 */
DeltaStatic.prototype.diff = function(other, index) {};

/**
 * @param {?} predicate
 * @param {string=} newline
 * @return {?}
 */
DeltaStatic.prototype.eachLine = function(predicate, newline) {};

/**
 * @param {number|?} index_or_other
 * @param {boolean=} priority
 * @return {number|?}
 */
DeltaStatic.prototype.transform = function(index_or_other, priority) {};

/**
 * @param {number} index
 * @return {number}
 */
DeltaStatic.prototype.transformPosition = function(index) {};

/**
 * @constructor
 * @struct
 * @param {(!Array<?>|?)=} ops
 */
function Delta(ops) {}
 /** @type {!Array<?>} */
Delta.prototype.ops;

/**
 * @param {number} length
 * @param {?=} attributes
 * @return {?}
 */
Delta.prototype.retain = function(length, attributes) {};

/**
 * @param {number} length
 * @return {?}
 */
Delta.prototype.delete = function(length) {};

/**
 * @param {?} predicate
 * @return {!Array<?>}
 */
Delta.prototype.filter = function(predicate) {};

/**
 * @param {?} predicate
 * @return {void}
 */
Delta.prototype.forEach = function(predicate) {};

/**
 * @param {?} text
 * @param {?=} attributes
 * @return {?}
 */
Delta.prototype.insert = function(text, attributes) {};

/**
 * @template T
 * @param {?} predicate
 * @return {!Array<?>}
 */
Delta.prototype.map = function(predicate) {};

/**
 * @param {?} predicate
 * @return {!Array<?>}
 */
Delta.prototype.partition = function(predicate) {};

/**
 * @template T
 * @param {?} predicate
 * @param {?} initial
 * @return {?}
 */
Delta.prototype.reduce = function(predicate, initial) {};

/**
 * @return {?}
 */
Delta.prototype.chop = function() {};

/**
 * @return {number}
 */
Delta.prototype.length = function() {};

/**
 * @param {number=} start
 * @param {number=} end
 * @return {?}
 */
Delta.prototype.slice = function(start, end) {};

/**
 * @param {?} other
 * @return {?}
 */
Delta.prototype.compose = function(other) {};

/**
 * @param {?} other
 * @return {?}
 */
Delta.prototype.concat = function(other) {};

/**
 * @param {?} other
 * @param {number=} index
 * @return {?}
 */
Delta.prototype.diff = function(other, index) {};

/**
 * @param {?} predicate
 * @param {string=} newline
 * @return {?}
 */
Delta.prototype.eachLine = function(predicate, newline) {};

/**
 * @param {number|?} index_or_other
 * @param {boolean=} priority
 * @return {number|?}
 */
Delta.prototype.transform = function(index_or_other, priority) {};

/**
 * @param {number} index
 * @return {number}
 */
Delta.prototype.transformPosition = function(index) {};
/**
 * @record
 * @struct
 */
function RangeStatic() {}
 /** @type {number} */
RangeStatic.prototype.index;
 /** @type {number} */
RangeStatic.prototype.length;
 /** @type {number} */
RangeStatic.prototype.index;
 /** @type {number} */
RangeStatic.prototype.length;
/**
 * @record
 * @struct
 */
function EventEmitter() {}

/**
 * @param {string} eventName
 * @param {?} handler
 * @return {?}
 */
EventEmitter.prototype.on = function(eventName, handler) {};

/**
 * @param {string} eventName
 * @param {?} handler
 * @return {?}
 */
EventEmitter.prototype.once = function(eventName, handler) {};

/**
 * @param {string} eventName
 * @param {?} handler
 * @return {?}
 */
EventEmitter.prototype.off = function(eventName, handler) {};

/**
 * @constructor
 * @struct
 * @param {(string|!Element)} container
 * @param {?=} options
 */
function Quill(container, options) {}
 /** @type {!HTMLDivElement} */
Quill.prototype.root;
 /** @type {?} */
Quill.prototype.clipboard;

/**
 * @param {number} index
 * @param {number} length
 * @param {string=} source
 * @return {?}
 */
Quill.prototype.deleteText = function(index, length, source) {};

/**
 * @return {void}
 */
Quill.prototype.disable = function() {};

/**
 * @param {boolean=} enabled
 * @return {void}
 */
Quill.prototype.enable = function(enabled) {};

/**
 * @param {number=} index
 * @param {number=} length
 * @return {?}
 */
Quill.prototype.getContents = function(index, length) {};

/**
 * @return {number}
 */
Quill.prototype.getLength = function() {};

/**
 * @param {number=} index
 * @param {number=} length
 * @return {string}
 */
Quill.prototype.getText = function(index, length) {};

/**
 * @param {number} index
 * @param {string} type
 * @param {?} value
 * @param {string=} source
 * @return {?}
 */
Quill.prototype.insertEmbed = function(index, type, value, source) {};

/**
 * @param {number} index
 * @param {string} text
 * @param {string|?=} source_or_format_or_formats
 * @param {?|string=} value_or_source
 * @param {string=} source
 * @return {?}
 */
Quill.prototype.insertText = function(index, text, source_or_format_or_formats, value_or_source, source) {};

/**
 * @deprecated Remove in 2.0. Use clipboard.dangerouslyPasteHTML(index: number, html: string, source: Sources)
 * @param {number|string} index_or_html
 * @param {string=} html_or_source
 * @param {string=} source
 * @return {string}
 */
Quill.prototype.pasteHTML = function(index_or_html, html_or_source, source) {};

/**
 * @param {?} delta
 * @param {string=} source
 * @return {?}
 */
Quill.prototype.setContents = function(delta, source) {};

/**
 * @param {string} text
 * @param {string=} source
 * @return {?}
 */
Quill.prototype.setText = function(text, source) {};

/**
 * @param {string=} source
 * @return {void}
 */
Quill.prototype.update = function(source) {};

/**
 * @param {?} delta
 * @param {string=} source
 * @return {?}
 */
Quill.prototype.updateContents = function(delta, source) {};

/**
 * @param {string} name
 * @param {?} value
 * @param {string=} source
 * @return {?}
 */
Quill.prototype.format = function(name, value, source) {};

/**
 * @param {number} index
 * @param {number} length
 * @param {string|?=} source_or_format_or_formats
 * @param {?|string=} value_or_source
 * @param {string=} source
 * @return {?}
 */
Quill.prototype.formatLine = function(index, length, source_or_format_or_formats, value_or_source, source) {};

/**
 * @param {number} index
 * @param {number} length
 * @param {string|?=} source_or_format_or_formats
 * @param {?|string=} value_or_source
 * @param {string=} source
 * @return {?}
 */
Quill.prototype.formatText = function(index, length, source_or_format_or_formats, value_or_source, source) {};

/**
 * @param {?|number=} range_or_index
 * @param {number=} length
 * @return {?}
 */
Quill.prototype.getFormat = function(range_or_index, length) {};

/**
 * @param {number} index
 * @param {number} length
 * @param {string=} source
 * @return {?}
 */
Quill.prototype.removeFormat = function(index, length, source) {};

/**
 * @return {void}
 */
Quill.prototype.blur = function() {};

/**
 * @return {void}
 */
Quill.prototype.focus = function() {};

/**
 * @param {number} index
 * @param {number=} length
 * @return {?}
 */
Quill.prototype.getBounds = function(index, length) {};

/**
 * @param {boolean=} focus
 * @return {?}
 */
Quill.prototype.getSelection = function(focus) {};

/**
 * @return {boolean}
 */
Quill.prototype.hasFocus = function() {};

/**
 * @param {number|?} index_or_range
 * @param {number|string=} length_or_source
 * @param {string=} source
 * @return {void}
 */
Quill.prototype.setSelection = function(index_or_range, length_or_source, source) {};

/**
 * @param {(string|boolean)} level
 * @return {void}
 */
Quill.debug = function(level) {};

/**
 * @param {string} path
 * @return {?}
 */
Quill.import = function(path) {};

/**
 * @param {string|?} path_or_defs
 * @param {?|boolean=} def_or_suppressWarning
 * @param {boolean=} suppressWarning
 * @return {void}
 */
Quill.register = function(path_or_defs, def_or_suppressWarning, suppressWarning) {};

/**
 * @param {!Node} domNode
 * @param {boolean=} bubble
 * @return {?}
 */
Quill.find = function(domNode, bubble) {};

/**
 * @param {(string|!Node)} classNameOrDomNode
 * @param {!Node=} refNode
 * @return {?}
 */
Quill.prototype.addContainer = function(classNameOrDomNode, refNode) {};

/**
 * @param {string} name
 * @return {?}
 */
Quill.prototype.getModule = function(name) {};

/**
 * @param {?} blot
 * @return {number}
 */
Quill.prototype.getIndex = function(blot) {};

/**
 * @param {number} index
 * @return {?}
 */
Quill.prototype.getLeaf = function(index) {};

/**
 * @param {number} index
 * @return {!Array<?>}
 */
Quill.prototype.getLine = function(index) {};

/**
 * @param {number|?=} index_or_range
 * @param {number=} length
 * @return {!Array<?>}
 */
Quill.prototype.getLines = function(index_or_range, length) {};

/**
 * @param {string} eventName
 * @param {?} handler
 * @return {?}
 */
Quill.prototype.on = function(eventName, handler) {};

/**
 * @param {string} eventName
 * @param {?} handler
 * @return {?}
 */
Quill.prototype.once = function(eventName, handler) {};

/**
 * @param {string} eventName
 * @param {?} handler
 * @return {?}
 */
Quill.prototype.off = function(eventName, handler) {};

/* TODO: ExportAssignment in  */
