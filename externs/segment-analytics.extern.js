/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/segment-analytics/index.d.ts:
/**
 * @record
 * @struct
 */
function JQuery() {}
/** @const */
var SegmentAnalytics = {};
/**
 * @record
 * @struct
 */
SegmentAnalytics.SegmentOpts = function() {};
 /** @type {?} */
SegmentAnalytics.SegmentOpts.prototype.integrations;
 /** @type {string} */
SegmentAnalytics.SegmentOpts.prototype.anonymousId;
/**
 * @record
 * @struct
 */
SegmentAnalytics.AnalyticsJS = function() {};

/**
 * @param {string} writeKey
 * @return {void}
 */
SegmentAnalytics.AnalyticsJS.prototype.load = function(writeKey) {};

/**
 * @param {string|!Object|function(): void=} userId_or_traits_or_callback
 * @param {!Object|function(): void|!SegmentAnalytics.SegmentOpts=} traits_or_callback_or_options
 * @param {!SegmentAnalytics.SegmentOpts|function(): void=} options_or_callback
 * @param {function(): void=} callback
 * @return {void}
 */
SegmentAnalytics.AnalyticsJS.prototype.identify = function(userId_or_traits_or_callback, traits_or_callback_or_options, options_or_callback, callback) {};

/**
 * @param {string} event
 * @param {!Object|function(): void=} properties_or_callback
 * @param {!SegmentAnalytics.SegmentOpts|function(): void=} options_or_callback
 * @param {function(): void=} callback
 * @return {void}
 */
SegmentAnalytics.AnalyticsJS.prototype.track = function(event, properties_or_callback, options_or_callback, callback) {};

/**
 * @param {string|!Object|function(): void=} category_or_name_or_properties_or_callback
 * @param {string|!Object|function(): void|!SegmentAnalytics.SegmentOpts=} name_or_properties_or_callback_or_options
 * @param {!Object|!SegmentAnalytics.SegmentOpts|function(): void=} properties_or_options_or_callback
 * @param {!SegmentAnalytics.SegmentOpts|function(): void=} options_or_callback
 * @param {function(): void=} callback
 * @return {void}
 */
SegmentAnalytics.AnalyticsJS.prototype.page = function(category_or_name_or_properties_or_callback, name_or_properties_or_callback_or_options, properties_or_options_or_callback, options_or_callback, callback) {};

/**
 * @param {string=} groupId
 * @param {!Object|function(): void=} traits_or_callback
 * @param {!SegmentAnalytics.SegmentOpts|function(): void=} options_or_callback
 * @param {function(): void=} callback
 * @return {void|{id: function(): string, traits: function(!Object): void}}
 */
SegmentAnalytics.AnalyticsJS.prototype.group = function(groupId, traits_or_callback, options_or_callback, callback) {};

/**
 * @param {string} userId
 * @param {string|function(): void|!SegmentAnalytics.SegmentOpts=} previousId_or_callback_or_options
 * @param {!SegmentAnalytics.SegmentOpts|function(): void=} options_or_callback
 * @param {function(): void=} callback
 * @return {void}
 */
SegmentAnalytics.AnalyticsJS.prototype.alias = function(userId, previousId_or_callback_or_options, options_or_callback, callback) {};

/**
 * @param {(!JQuery|!Element|!Array<!Element>)} elements
 * @param {(string|function(!Element): string)} event
 * @param {(!Object|function(!Element): !Object)=} properties
 * @return {void}
 */
SegmentAnalytics.AnalyticsJS.prototype.trackLink = function(elements, event, properties) {};

/**
 * @param {(!JQuery|!Element|!Array<!Element>)} elements
 * @param {(string|function(!Element): string)} event
 * @param {(!Object|function(!Element): !Object)=} properties
 * @return {void}
 */
SegmentAnalytics.AnalyticsJS.prototype.trackForm = function(elements, event, properties) {};

/**
 * @param {function(): void} callback
 * @return {void}
 */
SegmentAnalytics.AnalyticsJS.prototype.ready = function(callback) {};

/**
 * @return {void}
 */
SegmentAnalytics.AnalyticsJS.prototype.reset = function() {};

/**
 * @return {{id: function(): string, logout: function(): void, reset: function(): void, anonymousId: function(string): string, traits: function(!Object): void}}
 */
SegmentAnalytics.AnalyticsJS.prototype.user = function() {};

/**
 * @param {boolean=} state
 * @return {void}
 */
SegmentAnalytics.AnalyticsJS.prototype.debug = function(state) {};

/**
 * @param {string} event
 * @param {function(string, !Object, !SegmentAnalytics.SegmentOpts): void} callback
 * @return {void}
 */
SegmentAnalytics.AnalyticsJS.prototype.on = function(event, callback) {};

/**
 * @param {number} milliseconds
 * @return {void}
 */
SegmentAnalytics.AnalyticsJS.prototype.timeout = function(milliseconds) {};
 /** @type {!SegmentAnalytics.AnalyticsJS} */
var analytics;
