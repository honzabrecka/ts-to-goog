/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cucumber/index.d.ts:
/**
 * @record
 * @struct
 */
function CallbackStepDefinition() {}

/* TODO: CallSignature:  */

/**
 * @return {!PromiseLike<?>}
 */
CallbackStepDefinition.prototype.pending = function() {};
/**
 * @record
 * @struct
 */
function TableDefinition() {}

/**
 * @return {!Array<!Array<string>>}
 */
TableDefinition.prototype.raw = function() {};

/**
 * @return {!Array<!Array<string>>}
 */
TableDefinition.prototype.rows = function() {};

/**
 * @return {?}
 */
TableDefinition.prototype.rowsHash = function() {};

/**
 * @return {!Array<?>}
 */
TableDefinition.prototype.hashes = function() {};

/** @typedef {(string|number|?)} */
var StepDefinitionParam;

/** @typedef {?} */
var StepDefinitionCode;
/**
 * @record
 * @struct
 */
function StepDefinitionOptions() {}
 /** @type {number} */
StepDefinitionOptions.prototype.timeout;
/**
 * @record
 * @struct
 */
function StepDefinitions() {}

/**
 * @param {(string|!RegExp)} pattern
 * @param {?} options_or_code
 * @param {?=} code
 * @return {void}
 */
StepDefinitions.prototype.Given = function(pattern, options_or_code, code) {};

/**
 * @param {(string|!RegExp)} pattern
 * @param {?} options_or_code
 * @param {?=} code
 * @return {void}
 */
StepDefinitions.prototype.When = function(pattern, options_or_code, code) {};

/**
 * @param {(string|!RegExp)} pattern
 * @param {?} options_or_code
 * @param {?=} code
 * @return {void}
 */
StepDefinitions.prototype.Then = function(pattern, options_or_code, code) {};

/**
 * @param {number} time
 * @return {void}
 */
StepDefinitions.prototype.setDefaultTimeout = function(time) {};
/**
 * @record
 * @struct
 */
function HookScenarioResult() {}
 /** @type {number} */
HookScenarioResult.prototype.duration;
 /** @type {!Error} */
HookScenarioResult.prototype.failureException;
 /** @type {?} */
HookScenarioResult.prototype.scenario;
 /** @type {string} */
HookScenarioResult.prototype.status;
 /** @type {?} */
HookScenarioResult.prototype.stepsResults;

/** @typedef {?} */
var HookCode;

/** @typedef {?} */
var AroundCode;
/**
 * @record
 * @struct
 */
function Transform() {}
 /** @type {!RegExp} */
Transform.prototype.regexp;
 /** @type {string} */
Transform.prototype.typeName;

/**
 * @param {string} arg
 * @return {?}
 */
Transform.prototype.transformer = function(arg) {};
/**
 * @record
 * @struct
 */
function HookOptions() {}
 /** @type {number} */
HookOptions.prototype.timeout;
 /** @type {?} */
HookOptions.prototype.tags;
/**
 * @record
 * @struct
 */
function Hooks() {}

/**
 * @param {?} code_or_options
 * @param {?=} code
 * @return {void}
 */
Hooks.prototype.Before = function(code_or_options, code) {};

/**
 * @param {?} code_or_options
 * @param {?=} code
 * @return {void}
 */
Hooks.prototype.After = function(code_or_options, code) {};

/**
 * @param {?} code
 * @return {void}
 */
Hooks.prototype.Around = function(code) {};

/**
 * @param {number} time
 * @return {void}
 */
Hooks.prototype.setDefaultTimeout = function(time) {};

/**
 * @param {(!Object|?)} world
 * @return {void}
 */
Hooks.prototype.setWorldConstructor = function(world) {};

/**
 * @param {string} handlerOption
 * @param {?} code
 * @return {void}
 */
Hooks.prototype.registerHandler = function(handlerOption, code) {};

/**
 * @param {?} listener
 * @return {void}
 */
Hooks.prototype.registerListener = function(listener) {};

/**
 * @param {?} transform
 * @return {void}
 */
Hooks.prototype.defineParameterType = function(transform) {};
/**
 * @constructor
 * @struct
 */
function EventListener() {}

/**
 * @param {?} event
 * @param {?} callback
 * @return {void}
 */
EventListener.prototype.hear = function(event, callback) {};

/**
 * @param {?} event
 * @return {boolean}
 */
EventListener.prototype.hasHandlerForEvent = function(event) {};

/**
 * @param {?} event
 * @return {string}
 */
EventListener.prototype.buildHandlerNameForEvent = function(event) {};

/**
 * @param {?} event
 * @return {?}
 */
EventListener.prototype.getHandlerForEvent = function(event) {};

/**
 * @param {string} shortName
 * @return {string}
 */
EventListener.prototype.buildHandlerName = function(shortName) {};

/**
 * @param {string} shortName
 * @param {?} handler
 * @return {void}
 */
EventListener.prototype.setHandlerForEvent = function(shortName, handler) {};

/**
 * @return {?}
 */
function Listener() {}
/** @const */
var events = {};
/**
 * @record
 * @struct
 */
events.Event = function() {};
 /** @type {string} */
events.Event.prototype.name;
 /** @type {?} */
events.Event.prototype.data;
/**
 * @record
 * @struct
 */
events.EventPayload = function() {};
/**
 * @extends {events.EventPayload}
 * @record
 * @struct
 */
events.FeaturesPayload = function() {};

/**
 * @return {!Array<?>}
 */
events.FeaturesPayload.prototype.getFeatures = function() {};
/**
 * @extends {events.EventPayload}
 * @record
 * @struct
 */
events.FeaturesResultPayload = function() {};
 /** @type {number} */
events.FeaturesResultPayload.prototype.duration;
 /** @type {!Array<?>} */
events.FeaturesResultPayload.prototype.scenarioResults;
 /** @type {boolean} */
events.FeaturesResultPayload.prototype.success;
 /** @type {!Array<?>} */
events.FeaturesResultPayload.prototype.stepsResults;
 /** @type {boolean} */
events.FeaturesResultPayload.prototype.strict;
/**
 * @extends {events.EventPayload}
 * @record
 * @struct
 */
events.FeaturePayload = function() {};
 /** @type {string} */
events.FeaturePayload.prototype.description;
 /** @type {string} */
events.FeaturePayload.prototype.keyword;
 /** @type {number} */
events.FeaturePayload.prototype.line;
 /** @type {string} */
events.FeaturePayload.prototype.name;
 /** @type {!Array<?>} */
events.FeaturePayload.prototype.tags;
 /** @type {string} */
events.FeaturePayload.prototype.uri;
 /** @type {!Array<?>} */
events.FeaturePayload.prototype.scenarios;
/**
 * @extends {events.EventPayload}
 * @record
 * @struct
 */
events.ScenarioPayload = function() {};
 /** @type {?} */
events.ScenarioPayload.prototype.feature;
 /** @type {!Error} */
events.ScenarioPayload.prototype.exception;
 /** @type {string} */
events.ScenarioPayload.prototype.keyword;
 /** @type {!Array<number>} */
events.ScenarioPayload.prototype.lines;
 /** @type {string} */
events.ScenarioPayload.prototype.name;
 /** @type {!Array<?>} */
events.ScenarioPayload.prototype.tags;
 /** @type {string} */
events.ScenarioPayload.prototype.uri;
 /** @type {number} */
events.ScenarioPayload.prototype.line;
 /** @type {string} */
events.ScenarioPayload.prototype.description;
 /** @type {!Array<?>} */
events.ScenarioPayload.prototype.steps;
/**
 * @extends {events.EventPayload}
 * @record
 * @struct
 */
events.ScenarioResultPayload = function() {};
 /** @type {?} */
events.ScenarioResultPayload.prototype.duration;
 /** @type {!Error} */
events.ScenarioResultPayload.prototype.failureException;
 /** @type {?} */
events.ScenarioResultPayload.prototype.scenario;
 /** @type {string} */
events.ScenarioResultPayload.prototype.status;
 /** @type {!Array<?>} */
events.ScenarioResultPayload.prototype.stepResults;
/**
 * @extends {events.EventPayload}
 * @record
 * @struct
 */
events.StepPayload = function() {};
 /** @type {?} */
events.StepPayload.prototype.arguments;
 /** @type {number} */
events.StepPayload.prototype.line;
 /** @type {string} */
events.StepPayload.prototype.name;
 /** @type {?} */
events.StepPayload.prototype.scenario;
 /** @type {string} */
events.StepPayload.prototype.uri;
 /** @type {boolean} */
events.StepPayload.prototype.isBackground;
 /** @type {string} */
events.StepPayload.prototype.keyword;
 /** @type {string} */
events.StepPayload.prototype.keywordType;
/**
 * @extends {events.EventPayload}
 * @record
 * @struct
 */
events.StepResultPayload = function() {};
 /** @type {?} */
events.StepResultPayload.prototype.ambiguousStepDefinitions;
 /** @type {!Array<?>} */
events.StepResultPayload.prototype.attachments;
 /** @type {?} */
events.StepResultPayload.prototype.duration;
 /** @type {!Error} */
events.StepResultPayload.prototype.failureException;
 /** @type {?} */
events.StepResultPayload.prototype.step;
 /** @type {?} */
events.StepResultPayload.prototype.stepDefinition;
 /** @type {string} */
events.StepResultPayload.prototype.status;
/**
 * @record
 * @struct
 */
function StepDefinition() {}
 /** @type {!Function} */
StepDefinition.prototype.code;
 /** @type {number} */
StepDefinition.prototype.line;
 /** @type {!Object} */
StepDefinition.prototype.options;
 /** @type {?} */
StepDefinition.prototype.pattern;
 /** @type {string} */
StepDefinition.prototype.uri;
/**
 * @record
 * @struct
 */
function Tag() {}
 /** @type {string} */
Tag.prototype.name;
 /** @type {number} */
Tag.prototype.line;
/**
 * @record
 * @struct
 */
function Step() {}
 /** @type {?} */
Step.prototype.arguments;
 /** @type {number} */
Step.prototype.line;
 /** @type {string} */
Step.prototype.name;
 /** @type {?} */
Step.prototype.scenario;
 /** @type {string} */
Step.prototype.uri;
 /** @type {boolean} */
Step.prototype.isBackground;
 /** @type {string} */
Step.prototype.keyword;
 /** @type {string} */
Step.prototype.keywordType;
/**
 * @record
 * @struct
 */
function Scenario() {}
 /** @type {?} */
Scenario.prototype.feature;
 /** @type {!Error} */
Scenario.prototype.exception;
 /** @type {string} */
Scenario.prototype.keyword;
 /** @type {!Array<number>} */
Scenario.prototype.lines;
 /** @type {string} */
Scenario.prototype.name;
 /** @type {!Array<?>} */
Scenario.prototype.tags;
 /** @type {string} */
Scenario.prototype.uri;
 /** @type {number} */
Scenario.prototype.line;
 /** @type {string} */
Scenario.prototype.description;
 /** @type {!Array<?>} */
Scenario.prototype.steps;
/**
 * @record
 * @struct
 */
function Feature() {}
 /** @type {string} */
Feature.prototype.description;
 /** @type {string} */
Feature.prototype.keyword;
 /** @type {number} */
Feature.prototype.line;
 /** @type {string} */
Feature.prototype.name;
 /** @type {!Array<?>} */
Feature.prototype.tags;
 /** @type {string} */
Feature.prototype.uri;
 /** @type {!Array<?>} */
Feature.prototype.scenarios;

/** @typedef {?} */
var EventHook;

/** @typedef {?} */
var SupportCodeConsumer;

/**
 * @param {?} consumer
 * @return {void}
 */
function defineSupportCode(consumer) {}

/**
 * @return {!Array<?>}
 */
function getSupportCodeFns() {}

/**
 * @return {void}
 */
function clearSupportCodeFns() {}

/**
 * @constructor
 * @struct
 * @param {?=} options
 */
function Formatter(options) {}

/**
 * @param {?} data
 * @return {void}
 */
Formatter.prototype.log = function(data) {};
/**
 * @constructor
 * @struct
 */
function SummaryFormatter() {}

/**
 * @param {string} text
 * @param {number} numberOfSpaces
 * @return {?}
 */
SummaryFormatter.prototype.indent = function(text, numberOfSpaces) {};
/**
 * @constructor
 * @struct
 */
function PrettyFormatter() {}

/**
 * @param {!Array<?>} tags
 * @return {?}
 */
PrettyFormatter.prototype.formatTags = function(tags) {};

/**
 * @param {string} text
 * @param {number} level
 * @return {void}
 */
PrettyFormatter.prototype.logIndented = function(text, level) {};

/**
 * @param {?} stepResult
 * @return {void}
 */
PrettyFormatter.prototype.logStepResult = function(stepResult) {};
/**
 * @constructor
 * @struct
 */
function ProgressFormatter() {}
/**
 * @constructor
 * @struct
 */
function RerunFormatter() {}
/**
 * @constructor
 * @struct
 */
function SnippetsFormatter() {}
/**
 * @constructor
 * @struct
 */
function UsageFormatter() {}
/**
 * @constructor
 * @struct
 */
function UsageJsonFormatter() {}
/**
 * @constructor
 * @struct
 */
function JsonFormatter() {}
