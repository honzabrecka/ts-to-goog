/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jasmine_dom_matchers/index.d.ts:

/**
 * Checks if element has visibility `hidden` or `height` or `width = 0`.
 * 
 * The reverse of {\@link toBeVisible}.
 * 
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeHidden = function() {};

/**
 * Checks if element has visibility style not `hidden` and both `height` and `width > 0`.
 * 
 * The reverse of {\@link toBeHidden}.
 * 
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeVisible = function() {};

/**
 * Checks element attributes.
 * `attributeValue` is optional, if omitted, will check that the attribute exists.
 * 
 * @param {string} attributeName
 * @param {(string|number|!RegExp)=} attributeValue
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveAttr = function(attributeName, attributeValue) {};

/**
 * Checks element properties.
 * `propertyValue` is optional, if omitted, will check that the property exists.
 * 
 * @param {string} propertyName
 * @param {(string|number|!RegExp)=} propertyValue
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveProp = function(propertyName, propertyValue) {};

/**
 * Checks if all styles are present.
 * `styles` is an object, all styles given in that object will be checked.
 * 
 * @param {!Object<string,(string|number|!RegExp)>} styles
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveCss = function(styles) {};

/**
 * Checks the `value` of eligible elements (like inputs).
 * 
 * @param {(string|number|!RegExp)} value
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveValue = function(value) {};

/**
 * Checks if element has a `checked` property, only useful for checkbox inputs.
 * 
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeChecked = function() {};

/**
 * Checks if element is focused.
 * 
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeFocused = function() {};

/**
 * Checks if element has a `selected` property, only useful for options.
 * 
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeSelected = function() {};

/**
 * Checks if element has a disabled property.
 * 
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeDisabled = function() {};

/**
 * Checks for presence of classes on the element.
 * If `className` is an Array, checks for all classes in the array.
 * 
 * @param {(string|!Array<string>)} className
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveClass = function(className) {};

/**
 * Checks for exact match with text, after trimming whitespace.
 * 
 * @param {(string|number|!RegExp)} text
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveText = function(text) {};

/**
 * Checks if text substring is contained within element.
 * 
 * @param {(string|number|!RegExp)} text
 * @return {boolean}
 */
jasmine.Matchers.prototype.toContainText = function(text) {};

/**
 * Checks for length number of html elements.
 * Also works for plain Arrays.
 * 
 * @param {number} length
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveLength = function(length) {};

/**
 * True if the element exists, does not have to be in the DOM.
 * 
 * @return {boolean}
 */
jasmine.Matchers.prototype.toExist = function() {};
