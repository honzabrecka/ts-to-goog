/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/chai-jquery/index.d.ts:
 /** @type {function(string, string): !Chai.Assertion} */
Chai.Assertion.prototype.attr;
 /** @type {function(string, ?): !Chai.Assertion} */
Chai.Assertion.prototype.prop;
 /** @type {function(string, string): !Chai.Assertion} */
Chai.Assertion.prototype.css;
 /** @type {function(string, string): !Chai.Assertion} */
Chai.Assertion.prototype.data;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.visible;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.hidden;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.selected;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.checked;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.disabled;

/* TODO: CallSignature: Chai */

/**
 * @param {string} className
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.class = function(className) {};

/**
 * @param {string} id
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.id = function(id) {};

/**
 * @param {string} html
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.html = function(html) {};

/**
 * @param {string} text
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.text = function(text) {};

/**
 * @param {string} text
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.value = function(text) {};

/**
 * @param {string} selector
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.descendants = function(selector) {};
/**
 * @record
 * @struct
 */
function ChaiJQueryStatic() {}
 /** @type {!JQueryAjaxSettings} */
ChaiJQueryStatic.prototype.ajaxSettings;
 /** @type {!JQueryParam} */
ChaiJQueryStatic.prototype.param;

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */
 /** @type {!Object<string,?>} */
ChaiJQueryStatic.prototype.cssHooks;
 /** @type {?} */
ChaiJQueryStatic.prototype.cssNumber;
 /** @type {{tick: function(): void, interval: number, stop: function(): void, speeds: {slow: number, fast: number}, off: boolean, step: ?}} */
ChaiJQueryStatic.prototype.fx;
 /** @type {!JQueryEventConstructor} */
ChaiJQueryStatic.prototype.Event;
 /** @type {?} */
ChaiJQueryStatic.prototype.expr;
 /** @type {?} */
ChaiJQueryStatic.prototype.fn;
 /** @type {boolean} */
ChaiJQueryStatic.prototype.isReady;
 /** @type {!JQuerySupport} */
ChaiJQueryStatic.prototype.support;

/**
 * Perform an asynchronous HTTP (Ajax) request.
 * 
 * Perform an asynchronous HTTP (Ajax) request.
 * 
 * @param {!JQueryAjaxSettings|string} settings_or_url A set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). / A string containing the URL to which the request is sent.
 * @param {!JQueryAjaxSettings=} settings A set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup().
 * @return {!JQueryXHR}
 */
ChaiJQueryStatic.prototype.ajax = function(settings_or_url, settings) {};

/**
 * Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().
 * 
 * Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().
 * 
 * @param {string|function(?, !JQueryAjaxSettings, !JQueryXHR): ?} dataTypes_or_handler An optional string containing one or more space-separated dataTypes / A handler to set default values for future Ajax requests.
 * @param {function(?, !JQueryAjaxSettings, !JQueryXHR): ?=} handler A handler to set default values for future Ajax requests.
 * @return {void}
 */
ChaiJQueryStatic.prototype.ajaxPrefilter = function(dataTypes_or_handler, handler) {};

/**
 * Set default values for future Ajax requests. Its use is not recommended.
 * 
 * @param {!JQueryAjaxSettings} options A set of key/value pairs that configure the default Ajax request. All options are optional.
 * @return {void}
 */
ChaiJQueryStatic.prototype.ajaxSetup = function(options) {};

/**
 * Load data from the server using a HTTP GET request.
 * 
 * Load data from the server using a HTTP GET request.
 * 
 * @param {string} url A string containing the URL to which the request is sent.
 * @param {function(?, string, !JQueryXHR): ?|(string|!Object)=} success_or_data A callback function that is executed if the request succeeds. / A plain object or string that is sent to the server with the request.
 * @param {string|function(?, string, !JQueryXHR): ?=} dataType_or_success The type of data expected from the server. Default: Intelligent Guess (xml, json, script, or html). / A callback function that is executed if the request succeeds.
 * @param {string=} dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, or html).
 * @return {!JQueryXHR}
 */
ChaiJQueryStatic.prototype.get = function(url, success_or_data, dataType_or_success, dataType) {};

/**
 * Load JSON-encoded data from the server using a GET HTTP request.
 * 
 * Load JSON-encoded data from the server using a GET HTTP request.
 * 
 * @param {string} url A string containing the URL to which the request is sent.
 * @param {function(?, string, !JQueryXHR): ?|(string|!Object)=} success_or_data A callback function that is executed if the request succeeds. / A plain object or string that is sent to the server with the request.
 * @param {function(?, string, !JQueryXHR): ?=} success A callback function that is executed if the request succeeds.
 * @return {!JQueryXHR}
 */
ChaiJQueryStatic.prototype.getJSON = function(url, success_or_data, success) {};

/**
 * Load a JavaScript file from the server using a GET HTTP request, then execute it.
 * 
 * @param {string} url A string containing the URL to which the request is sent.
 * @param {function(string, string, !JQueryXHR): ?=} success A callback function that is executed if the request succeeds.
 * @return {!JQueryXHR}
 */
ChaiJQueryStatic.prototype.getScript = function(url, success) {};

/**
 * Load data from the server using a HTTP POST request.
 * 
 * Load data from the server using a HTTP POST request.
 * 
 * @param {string} url A string containing the URL to which the request is sent.
 * @param {function(?, string, !JQueryXHR): ?|(string|!Object)=} success_or_data A callback function that is executed if the request succeeds. Required if dataType is provided, but can be null in that case. / A plain object or string that is sent to the server with the request.
 * @param {string|function(?, string, !JQueryXHR): ?=} dataType_or_success The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html). / A callback function that is executed if the request succeeds. Required if dataType is provided, but can be null in that case.
 * @param {string=} dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
 * @return {!JQueryXHR}
 */
ChaiJQueryStatic.prototype.post = function(url, success_or_data, dataType_or_success, dataType) {};

/**
 * A multi-purpose callbacks list object that provides a powerful way to manage callback lists.
 * 
 * @param {string=} flags An optional list of space-separated flags that change how the callback list behaves.
 * @return {!JQueryCallback}
 */
ChaiJQueryStatic.prototype.Callbacks = function(flags) {};

/**
 * Holds or releases the execution of jQuery's ready event.
 * 
 * @param {boolean} hold Indicates whether the ready hold is being requested or released
 * @return {void}
 */
ChaiJQueryStatic.prototype.holdReady = function(hold) {};

/**
 * Relinquish jQuery's control of the $ variable.
 * 
 * @param {boolean=} removeAll A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).
 * @return {!Object}
 */
ChaiJQueryStatic.prototype.noConflict = function(removeAll) {};

/**
 * Provides a way to execute callback functions based on one or more objects, usually Deferred objects that represent asynchronous events.
 * 
 * @template T
 * @param {...(T|!JQueryPromise<T>)} deferreds One or more Deferred objects, or plain JavaScript objects.
 * @return {!JQueryPromise<T>}
 */
ChaiJQueryStatic.prototype.when = function(deferreds) {};

/**
 * Store arbitrary data associated with the specified element. Returns the value that was set.
 * 
 * Returns value at named data store for the element, as set by jQuery.data(element, name, value), or the full data store for the element.
 * 
 * Returns value at named data store for the element, as set by jQuery.data(element, name, value), or the full data store for the element.
 * 
 * @template T
 * @param {!Element} element The DOM element to associate with the data.
 * @param {string=} key A string naming the piece of data to set.
 * @param {T=} value The new data value.
 * @return {T|?}
 */
ChaiJQueryStatic.prototype.data = function(element, key, value) {};

/**
 * Execute the next function on the queue for the matched element.
 * 
 * @param {!Element} element A DOM element from which to remove and execute a queued function.
 * @param {string=} queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
 * @return {void}
 */
ChaiJQueryStatic.prototype.dequeue = function(element, queueName) {};

/**
 * Determine whether an element has any jQuery data associated with it.
 * 
 * @param {!Element} element A DOM element to be checked for data.
 * @return {boolean}
 */
ChaiJQueryStatic.prototype.hasData = function(element) {};

/**
 * Show the queue of functions to be executed on the matched element.
 * 
 * Manipulate the queue of functions to be executed on the matched element.
 * 
 * Manipulate the queue of functions to be executed on the matched element.
 * 
 * @param {!Element} element A DOM element to inspect for an attached queue. / A DOM element where the array of queued functions is attached. / A DOM element on which to add a queued function.
 * @param {string=} queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
 * @param {!Array<!Function>|!Function=} newQueue_or_callback An array of functions to replace the current queue contents. / The new function to add to the queue.
 * @return {!Array<?>|!ChaiJQuery}
 */
ChaiJQueryStatic.prototype.queue = function(element, queueName, newQueue_or_callback) {};

/**
 * Remove a previously-stored piece of data.
 * 
 * @param {!Element} element A DOM element from which to remove data.
 * @param {string=} name A string naming the piece of data to remove.
 * @return {!ChaiJQuery}
 */
ChaiJQueryStatic.prototype.removeData = function(element, name) {};

/**
 * A constructor function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.
 * 
 * @template T
 * @param {function(!JQueryDeferred<T>): ?=} beforeStart A function that is called just before the constructor returns.
 * @return {!JQueryDeferred<T>}
 */
ChaiJQueryStatic.prototype.Deferred = function(beforeStart) {};

/**
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @param {function(!Array<?>): ?|!Object} fnction_or_context The function whose context will be changed. / The object to which the context (this) of the function should be set.
 * @param {!Object|string} context_or_name The object to which the context (this) of the function should be set. / The name of the function whose context will be changed (should be a property of the context object).
 * @param {...?} additionalArguments Any number of arguments to be passed to the function referenced in the function argument. / Any number of arguments to be passed to the function named in the name argument.
 * @return {?}
 */
ChaiJQueryStatic.prototype.proxy = function(fnction_or_context, context_or_name, additionalArguments) {};

/**
 * Takes a string and throws an exception containing it.
 * 
 * @param {?} message The message to send out.
 * @return {!ChaiJQuery}
 */
ChaiJQueryStatic.prototype.error = function(message) {};

/**
 * Check to see if a DOM element is a descendant of another DOM element.
 * 
 * @param {!Element} container The DOM element that may contain the other element.
 * @param {!Element} contained The DOM element that may be contained by (a descendant of) the other element.
 * @return {boolean}
 */
ChaiJQueryStatic.prototype.contains = function(container, contained) {};

/**
 * A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.
 * 
 * A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.
 * 
 * @template T
 * @param {!Array<T>|?} collection The object or array to iterate over.
 * @param {function(number, T): ?|function(?, ?): ?} callback The function that will be executed on every object.
 * @return {?}
 */
ChaiJQueryStatic.prototype.each = function(collection, callback) {};

/**
 * Merge the contents of two or more objects together into the first object.
 * 
 * Merge the contents of two or more objects together into the first object.
 * 
 * @param {?|boolean} target_or_deep An object that will receive the new properties if additional objects are passed in or that will extend the jQuery namespace if it is the sole argument. / If true, the merge becomes recursive (aka. deep copy).
 * @param {?=} object1_or_target An object containing additional properties to merge in. / The object to extend. It will receive the new properties.
 * @param {...?=} objectN_or_object1 Additional objects containing properties to merge in. / An object containing additional properties to merge in.
 * @return {?}
 */
ChaiJQueryStatic.prototype.extend = function(target_or_deep, object1_or_target, objectN_or_object1) {};

/**
 * Execute some JavaScript code globally.
 * 
 * @param {string} code The JavaScript code to execute.
 * @return {?}
 */
ChaiJQueryStatic.prototype.globalEval = function(code) {};

/**
 * Finds the elements of an array which satisfy a filter function. The original array is not affected.
 * 
 * @template T
 * @param {!Array<T>} array The array to search through.
 * @param {function(T, number): boolean} func The function to process each item against. The first argument to the function is the item, and the second argument is the index. The function should return a Boolean value.  this will be the global window object.
 * @param {boolean=} invert If "invert" is false, or not provided, then the function returns an array consisting of all elements for which "callback" returns true. If "invert" is true, then the function returns an array consisting of all elements for which "callback" returns false.
 * @return {!Array<T>}
 */
ChaiJQueryStatic.prototype.grep = function(array, func, invert) {};

/**
 * Search for a specified value within an array and return its index (or -1 if not found).
 * 
 * @template T
 * @param {T} value The value to search for.
 * @param {!Array<T>} array An array through which to search.
 * @param {number=} fromIndex he index of the array at which to begin the search. The default is 0, which will search the whole array.
 * @return {number}
 */
ChaiJQueryStatic.prototype.inArray = function(value, array, fromIndex) {};

/**
 * Determine whether the argument is an array.
 * 
 * @param {?} obj Object to test whether or not it is an array.
 * @return {boolean}
 */
ChaiJQueryStatic.prototype.isArray = function(obj) {};

/**
 * Check to see if an object is empty (contains no enumerable properties).
 * 
 * @param {?} obj The object that will be checked to see if it's empty.
 * @return {boolean}
 */
ChaiJQueryStatic.prototype.isEmptyObject = function(obj) {};

/**
 * Determine if the argument passed is a Javascript function object.
 * 
 * @param {?} obj Object to test whether or not it is a function.
 * @return {boolean}
 */
ChaiJQueryStatic.prototype.isFunction = function(obj) {};

/**
 * Determines whether its argument is a number.
 * 
 * @param {?} value
 * @return {boolean}
 */
ChaiJQueryStatic.prototype.isNumeric = function(value) {};

/**
 * Check to see if an object is a plain object (created using "{}" or "new Object").
 * 
 * @param {?} obj The object that will be checked to see if it's a plain object.
 * @return {boolean}
 */
ChaiJQueryStatic.prototype.isPlainObject = function(obj) {};

/**
 * Determine whether the argument is a window.
 * 
 * @param {?} obj Object to test whether or not it is a window.
 * @return {boolean}
 */
ChaiJQueryStatic.prototype.isWindow = function(obj) {};

/**
 * Check to see if a DOM node is within an XML document (or is an XML document).
 * 
 * @param {!Node} node he DOM node that will be checked to see if it's in an XML document.
 * @return {boolean}
 */
ChaiJQueryStatic.prototype.isXMLDoc = function(node) {};

/**
 * Convert an array-like object into a true JavaScript array.
 * 
 * @param {?} obj Any object to turn into a native Array.
 * @return {!Array<?>}
 */
ChaiJQueryStatic.prototype.makeArray = function(obj) {};

/**
 * Translate all items in an array or object to new array of items.
 * 
 * Translate all items in an array or object to new array of items.
 * 
 * @template T, U
 * @param {!Array<T>|?} array_or_arrayOrObject The Array to translate. / The Array or Object to translate.
 * @param {function(T, number): U|function(?, ?): ?} callback The function to process each item against. The first argument to the function is the array item, the second argument is the index in array The function can return any value. Within the function, this refers to the global (window) object. / The function to process each item against. The first argument to the function is the value; the second argument is the index or key of the array or object property. The function can return any value to add to the array. A returned array will be flattened into the resulting array. Within the function, this refers to the global (window) object.
 * @return {!Array<U>|?}
 */
ChaiJQueryStatic.prototype.map = function(array_or_arrayOrObject, callback) {};

/**
 * Merge the contents of two arrays together into the first array.
 * 
 * @template T
 * @param {!Array<T>} first The first array to merge, the elements of second added.
 * @param {!Array<T>} second The second array to merge into the first, unaltered.
 * @return {!Array<T>}
 */
ChaiJQueryStatic.prototype.merge = function(first, second) {};

/**
 * An empty function.
 * @return {?}
 */
ChaiJQueryStatic.prototype.noop = function() {};

/**
 * Return a number representing the current time.
 * @return {number}
 */
ChaiJQueryStatic.prototype.now = function() {};

/**
 * Takes a well-formed JSON string and returns the resulting JavaScript object.
 * 
 * @param {string} json The JSON string to parse.
 * @return {?}
 */
ChaiJQueryStatic.prototype.parseJSON = function(json) {};

/**
 * Parses a string into an XML document.
 * 
 * @param {string} data a well-formed XML string to be parsed
 * @return {!XMLDocument}
 */
ChaiJQueryStatic.prototype.parseXML = function(data) {};

/**
 * Remove the whitespace from the beginning and end of a string.
 * 
 * @param {string} str Remove the whitespace from the beginning and end of a string.
 * @return {string}
 */
ChaiJQueryStatic.prototype.trim = function(str) {};

/**
 * Determine the internal JavaScript [[Class]] of an object.
 * 
 * @param {?} obj Object to get the internal JavaScript [[Class]] of.
 * @return {string}
 */
ChaiJQueryStatic.prototype.type = function(obj) {};

/**
 * Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.
 * 
 * @param {!Array<!Element>} array The Array of DOM elements.
 * @return {!Array<!Element>}
 */
ChaiJQueryStatic.prototype.unique = function(array) {};

/**
 * Parses a string into an array of DOM nodes.
 * 
 * Parses a string into an array of DOM nodes.
 * 
 * @param {string} data HTML string to be parsed
 * @param {!HTMLElement|!Document=} context DOM element to serve as the context in which the HTML fragment will be created
 * @param {boolean=} keepScripts A Boolean indicating whether to include scripts passed in the HTML string
 * @return {!Array<?>}
 */
ChaiJQueryStatic.prototype.parseHTML = function(data, context, keepScripts) {};
/**
 * @record
 * @struct
 */
function ChaiJQuery() {}
 /** @type {!Element} */
ChaiJQuery.prototype.context;
 /** @type {string} */
ChaiJQuery.prototype.jquery;
 /** @type {number} */
ChaiJQuery.prototype.length;
 /** @type {string} */
ChaiJQuery.prototype.selector;

/* TODO: IndexSignature:  */

/* TODO: IndexSignature:  */
 /** @type {!Chai.Assertion} */
ChaiJQuery.prototype.should;

/**
 * Register a handler to be called when Ajax requests complete. This is an AjaxEvent.
 * 
 * @param {function(!JQueryEventObject, !XMLHttpRequest, ?): ?} handler The function to be invoked.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.ajaxComplete = function(handler) {};

/**
 * Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event.
 * 
 * @param {function(!JQueryEventObject, !JQueryXHR, !JQueryAjaxSettings, ?): ?} handler The function to be invoked.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.ajaxError = function(handler) {};

/**
 * Attach a function to be executed before an Ajax request is sent. This is an Ajax Event.
 * 
 * @param {function(!JQueryEventObject, !JQueryXHR, !JQueryAjaxSettings): ?} handler The function to be invoked.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.ajaxSend = function(handler) {};

/**
 * Register a handler to be called when the first Ajax request begins. This is an Ajax Event.
 * 
 * @param {function(): ?} handler The function to be invoked.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.ajaxStart = function(handler) {};

/**
 * Register a handler to be called when all Ajax requests have completed. This is an Ajax Event.
 * 
 * @param {function(): ?} handler The function to be invoked.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.ajaxStop = function(handler) {};

/**
 * Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event.
 * 
 * @param {function(!JQueryEventObject, !XMLHttpRequest, !JQueryAjaxSettings): ?} handler The function to be invoked.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.ajaxSuccess = function(handler) {};

/**
 * Load data from the server and place the returned HTML into the matched element.
 * 
 * Bind an event handler to the "load" JavaScript event.
 * 
 * Bind an event handler to the "load" JavaScript event.
 * 
 * @param {string|function(!JQueryEventObject): ?|?=} url_or_handler_or_eventData A string containing the URL to which the request is sent. / A function to execute when the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {(string|!Object)|function(!JQueryEventObject): ?=} data_or_handler A plain object or string that is sent to the server with the request. / A function to execute when the event is triggered.
 * @param {function(string, string, !XMLHttpRequest): ?=} complete A callback function that is executed when the request completes.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.load = function(url_or_handler_or_eventData, data_or_handler, complete) {};

/**
 * Encode a set of form elements as a string for submission.
 * @return {string}
 */
ChaiJQuery.prototype.serialize = function() {};

/**
 * Encode a set of form elements as an array of names and values.
 * @return {!Array<!JQuerySerializeArrayElement>}
 */
ChaiJQuery.prototype.serializeArray = function() {};

/**
 * Adds the specified class(es) to each of the set of matched elements.
 * 
 * Adds the specified class(es) to each of the set of matched elements.
 * 
 * @param {string|function(number, string): string} className_or_func One or more space-separated classes to be added to the class attribute of each matched element.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.addClass = function(className_or_func) {};

/**
 * Add the previous set of elements on the stack to the current set, optionally filtered by a selector.
 * @param {string=} selector
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.addBack = function(selector) {};

/**
 * Get the value of an attribute for the first element in the set of matched elements.
 * 
 * Set one or more attributes for the set of matched elements.
 * 
 * Set one or more attributes for the set of matched elements.
 * 
 * Set one or more attributes for the set of matched elements.
 * 
 * @param {string|!Object} attributeName_or_attributes The name of the attribute to get. / The name of the attribute to set. / An object of attribute-value pairs to set.
 * @param {(string|number)|function(number, string): (string|number)=} value_or_func A value to set for the attribute. / A function returning the value to set. this is the current element. Receives the index position of the element in the set and the old attribute value as arguments.
 * @return {string|!ChaiJQuery}
 */
ChaiJQuery.prototype.attr = function(attributeName_or_attributes, value_or_func) {};

/**
 * Determine whether any of the matched elements are assigned the given class.
 * 
 * @param {string} className The class name to search for.
 * @return {boolean}
 */
ChaiJQuery.prototype.hasClass = function(className) {};

/**
 * Get the HTML contents of the first element in the set of matched elements.
 * Set the HTML contents of each element in the set of matched elements.
 * 
 * Set the HTML contents of each element in the set of matched elements.
 * 
 * @param {string|function(number, string): string=} htmlString_or_func A string of HTML to set as the content of each matched element. / A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set.
 * @return {string|!ChaiJQuery}
 */
ChaiJQuery.prototype.html = function(htmlString_or_func) {};

/**
 * Get the value of a property for the first element in the set of matched elements.
 * 
 * Set one or more properties for the set of matched elements.
 * 
 * Set one or more properties for the set of matched elements.
 * 
 * Set one or more properties for the set of matched elements.
 * 
 * @param {string|!Object} propertyName_or_properties The name of the property to get. / The name of the property to set. / An object of property-value pairs to set.
 * @param {(string|number|boolean)|function(number, ?): ?=} value_or_func A value to set for the property. / A function returning the value to set. Receives the index position of the element in the set and the old property value as arguments. Within the function, the keyword this refers to the current element.
 * @return {?|!ChaiJQuery}
 */
ChaiJQuery.prototype.prop = function(propertyName_or_properties, value_or_func) {};

/**
 * Remove an attribute from each element in the set of matched elements.
 * 
 * @param {string} attributeName An attribute to remove; as of version 1.7, it can be a space-separated list of attributes.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.removeAttr = function(attributeName) {};

/**
 * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.
 * 
 * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.
 * 
 * @param {string|function(number, string): string=} className_or_func One or more space-separated classes to be removed from the class attribute of each matched element.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.removeClass = function(className_or_func) {};

/**
 * Remove a property for the set of matched elements.
 * 
 * @param {string} propertyName The name of the property to remove.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.removeProp = function(propertyName) {};

/**
 * Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.
 * 
 * Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.
 * 
 * Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.
 * 
 * @param {string|boolean|function(number, string, boolean): string=} className_or_swtch_or_func One or more class names (separated by spaces) to be toggled for each element in the matched set. / A boolean value to determine whether the class should be added or removed. / A function that returns class names to be toggled in the class attribute of each element in the matched set. Receives the index position of the element in the set, the old class value, and the switch as arguments.
 * @param {boolean=} swtch A Boolean (not just truthy/falsy) value to determine whether the class should be added or removed. / A boolean value to determine whether the class should be added or removed.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.toggleClass = function(className_or_swtch_or_func, swtch) {};

/**
 * Get the current value of the first element in the set of matched elements.
 * Set the value of each element in the set of matched elements.
 * 
 * Set the value of each element in the set of matched elements.
 * 
 * @param {(string|!Array<string>)|function(number, string): string=} value_or_func A string of text or an array of strings corresponding to the value of each matched element to set as selected/checked. / A function returning the value to set. this is the current element. Receives the index position of the element in the set and the old value as arguments.
 * @return {?|!ChaiJQuery}
 */
ChaiJQuery.prototype.val = function(value_or_func) {};

/**
 * Get the value of style properties for the first element in the set of matched elements.
 * 
 * Set one or more CSS properties for the set of matched elements.
 * 
 * Set one or more CSS properties for the set of matched elements.
 * 
 * Set one or more CSS properties for the set of matched elements.
 * 
 * @param {string|!Object} propertyName_or_properties A CSS property. / A CSS property name. / An object of property-value pairs to set.
 * @param {(string|number)|function(number, string): (string|number)=} value A value to set for the property. / A function returning the value to set. this is the current element. Receives the index position of the element in the set and the old value as arguments.
 * @return {string|!ChaiJQuery}
 */
ChaiJQuery.prototype.css = function(propertyName_or_properties, value) {};

/**
 * Get the current computed height for the first element in the set of matched elements.
 * Set the CSS height of every matched element.
 * 
 * Set the CSS height of every matched element.
 * 
 * @param {(string|number)|function(number, number): (string|number)=} value_or_func An integer representing the number of pixels, or an integer with an optional unit of measure appended (as a string). / A function returning the height to set. Receives the index position of the element in the set and the old height as arguments. Within the function, this refers to the current element in the set.
 * @return {number|!ChaiJQuery}
 */
ChaiJQuery.prototype.height = function(value_or_func) {};

/**
 * Get the current computed height for the first element in the set of matched elements, including padding but not border.
 * Sets the inner height on elements in the set of matched elements, including padding but not border.
 * 
 * @param {(string|number)=} height
 * @return {number|!ChaiJQuery}
 */
ChaiJQuery.prototype.innerHeight = function(height) {};

/**
 * Get the current computed width for the first element in the set of matched elements, including padding but not border.
 * Sets the inner width on elements in the set of matched elements, including padding but not border.
 * 
 * @param {(string|number)=} width
 * @return {number|!ChaiJQuery}
 */
ChaiJQuery.prototype.innerWidth = function(width) {};

/**
 * Get the current coordinates of the first element in the set of matched elements, relative to the document.
 * An object containing the properties top and left, which are integers indicating the new top and left coordinates for the elements.
 * 
 * An object containing the properties top and left, which are integers indicating the new top and left coordinates for the elements.
 * 
 * @param {!JQueryCoordinates|function(number, !JQueryCoordinates): !JQueryCoordinates=} coordinates_or_func An object containing the properties top and left, which are integers indicating the new top and left coordinates for the elements. / A function to return the coordinates to set. Receives the index of the element in the collection as the first argument and the current coordinates as the second argument. The function should return an object with the new top and left properties.
 * @return {!JQueryCoordinates|!ChaiJQuery}
 */
ChaiJQuery.prototype.offset = function(coordinates_or_func) {};

/**
 * Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin. Returns an integer (without "px") representation of the value or null if called on an empty set of elements.
 * 
 * Sets the outer height on elements in the set of matched elements, including padding and border.
 * 
 * @param {boolean|(string|number)=} includeMargin_or_height A Boolean indicating whether to include the element's margin in the calculation.
 * @return {number|!ChaiJQuery}
 */
ChaiJQuery.prototype.outerHeight = function(includeMargin_or_height) {};

/**
 * Get the current computed width for the first element in the set of matched elements, including padding and border.
 * 
 * Sets the outer width on elements in the set of matched elements, including padding and border.
 * 
 * @param {boolean|(string|number)=} includeMargin_or_width A Boolean indicating whether to include the element's margin in the calculation.
 * @return {number|!ChaiJQuery}
 */
ChaiJQuery.prototype.outerWidth = function(includeMargin_or_width) {};

/**
 * Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.
 * @return {!JQueryCoordinates}
 */
ChaiJQuery.prototype.position = function() {};

/**
 * Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element.
 * Set the current horizontal position of the scroll bar for each of the set of matched elements.
 * 
 * @param {number=} value An integer indicating the new position to set the scroll bar to.
 * @return {number|!ChaiJQuery}
 */
ChaiJQuery.prototype.scrollLeft = function(value) {};

/**
 * Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element.
 * Set the current vertical position of the scroll bar for each of the set of matched elements.
 * 
 * @param {number=} value An integer indicating the new position to set the scroll bar to.
 * @return {number|!ChaiJQuery}
 */
ChaiJQuery.prototype.scrollTop = function(value) {};

/**
 * Get the current computed width for the first element in the set of matched elements.
 * Set the CSS width of each element in the set of matched elements.
 * 
 * Set the CSS width of each element in the set of matched elements.
 * 
 * @param {(string|number)|function(number, number): (string|number)=} value_or_func An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string). / A function returning the width to set. Receives the index position of the element in the set and the old width as arguments. Within the function, this refers to the current element in the set.
 * @return {number|!ChaiJQuery}
 */
ChaiJQuery.prototype.width = function(value_or_func) {};

/**
 * Remove from the queue all items that have not yet been run.
 * 
 * @param {string=} queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.clearQueue = function(queueName) {};

/**
 * Store arbitrary data associated with the matched elements.
 * 
 * Store arbitrary data associated with the matched elements.
 * 
 * Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.
 * 
 * Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.
 * @param {string|!Object<string,?>=} key_or_obj A string naming the piece of data to set. / An object of key-value pairs of data to update. / Name of the data stored.
 * @param {?=} value The new data value; it can be any Javascript type including Array or Object.
 * @return {!ChaiJQuery|?}
 */
ChaiJQuery.prototype.data = function(key_or_obj, value) {};

/**
 * Execute the next function on the queue for the matched elements.
 * 
 * @param {string=} queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.dequeue = function(queueName) {};

/**
 * Remove a previously-stored piece of data.
 * 
 * Remove a previously-stored piece of data.
 * 
 * @param {string|!Array<string>} name_or_list A string naming the piece of data to delete or space-separated string naming the pieces of data to delete. / An array of strings naming the pieces of data to delete.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.removeData = function(name_or_list) {};

/**
 * Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.
 * 
 * @param {string=} type The type of queue that needs to be observed. (default: fx)
 * @param {!Object=} target Object onto which the promise methods have to be attached
 * @return {!JQueryPromise<?>}
 */
ChaiJQuery.prototype.promise = function(type, target) {};

/**
 * Perform a custom animation of a set of CSS properties.
 * 
 * Perform a custom animation of a set of CSS properties.
 * 
 * Perform a custom animation of a set of CSS properties.
 * 
 * @param {!Object} properties An object of CSS properties and values that the animation will move toward.
 * @param {(string|number)|!JQueryAnimationOptions=} duration_or_options A string or number determining how long the animation will run. / A map of additional options to pass to the method.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition. (default: swing)
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.animate = function(properties, duration_or_options, complete_or_easing, complete) {};

/**
 * Set a timer to delay execution of subsequent items in the queue.
 * 
 * @param {number} duration An integer indicating the number of milliseconds to delay execution of the next item in the queue.
 * @param {string=} queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.delay = function(duration, queueName) {};

/**
 * Display the matched elements by fading them to opaque.
 * 
 * Display the matched elements by fading them to opaque.
 * 
 * Display the matched elements by fading them to opaque.
 * 
 * @param {(string|number)|!JQueryAnimationOptions=} duration_or_options A string or number determining how long the animation will run. / A map of additional options to pass to the method.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition.
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.fadeIn = function(duration_or_options, complete_or_easing, complete) {};

/**
 * Hide the matched elements by fading them to transparent.
 * 
 * Hide the matched elements by fading them to transparent.
 * 
 * Hide the matched elements by fading them to transparent.
 * 
 * @param {(string|number)|!JQueryAnimationOptions=} duration_or_options A string or number determining how long the animation will run. / A map of additional options to pass to the method.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition.
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.fadeOut = function(duration_or_options, complete_or_easing, complete) {};

/**
 * Adjust the opacity of the matched elements.
 * 
 * Adjust the opacity of the matched elements.
 * 
 * @param {(string|number)} duration A string or number determining how long the animation will run.
 * @param {number} opacity A number between 0 and 1 denoting the target opacity.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition.
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.fadeTo = function(duration, opacity, complete_or_easing, complete) {};

/**
 * Display or hide the matched elements by animating their opacity.
 * 
 * Display or hide the matched elements by animating their opacity.
 * 
 * Display or hide the matched elements by animating their opacity.
 * 
 * @param {(string|number)|!JQueryAnimationOptions=} duration_or_options A string or number determining how long the animation will run. / A map of additional options to pass to the method.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition.
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.fadeToggle = function(duration_or_options, complete_or_easing, complete) {};

/**
 * Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements.
 * 
 * @param {string=} queue The name of the queue in which to stop animations.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.finish = function(queue) {};

/**
 * Hide the matched elements.
 * 
 * Hide the matched elements.
 * 
 * Hide the matched elements.
 * 
 * @param {(string|number)|!JQueryAnimationOptions=} duration_or_options A string or number determining how long the animation will run. / A map of additional options to pass to the method.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition.
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.hide = function(duration_or_options, complete_or_easing, complete) {};

/**
 * Display the matched elements.
 * 
 * Display the matched elements.
 * 
 * Display the matched elements.
 * 
 * @param {(string|number)|!JQueryAnimationOptions=} duration_or_options A string or number determining how long the animation will run. / A map of additional options to pass to the method.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition.
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.show = function(duration_or_options, complete_or_easing, complete) {};

/**
 * Display the matched elements with a sliding motion.
 * 
 * Display the matched elements with a sliding motion.
 * 
 * Display the matched elements with a sliding motion.
 * 
 * @param {(string|number)|!JQueryAnimationOptions=} duration_or_options A string or number determining how long the animation will run. / A map of additional options to pass to the method.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition.
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.slideDown = function(duration_or_options, complete_or_easing, complete) {};

/**
 * Display or hide the matched elements with a sliding motion.
 * 
 * Display or hide the matched elements with a sliding motion.
 * 
 * Display or hide the matched elements with a sliding motion.
 * 
 * @param {(string|number)|!JQueryAnimationOptions=} duration_or_options A string or number determining how long the animation will run. / A map of additional options to pass to the method.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition.
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.slideToggle = function(duration_or_options, complete_or_easing, complete) {};

/**
 * Hide the matched elements with a sliding motion.
 * 
 * Hide the matched elements with a sliding motion.
 * 
 * Hide the matched elements with a sliding motion.
 * 
 * @param {(string|number)|!JQueryAnimationOptions=} duration_or_options A string or number determining how long the animation will run. / A map of additional options to pass to the method.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition.
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.slideUp = function(duration_or_options, complete_or_easing, complete) {};

/**
 * Stop the currently-running animation on the matched elements.
 * 
 * Stop the currently-running animation on the matched elements.
 * 
 * @param {boolean|string=} clearQueue_or_queue A Boolean indicating whether to remove queued animation as well. Defaults to false. / The name of the queue in which to stop animations.
 * @param {boolean=} jumpToEnd_or_clearQueue A Boolean indicating whether to complete the current animation immediately. Defaults to false. / A Boolean indicating whether to remove queued animation as well. Defaults to false.
 * @param {boolean=} jumpToEnd A Boolean indicating whether to complete the current animation immediately. Defaults to false.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.stop = function(clearQueue_or_queue, jumpToEnd_or_clearQueue, jumpToEnd) {};

/**
 * Display or hide the matched elements.
 * 
 * Display or hide the matched elements.
 * 
 * Display or hide the matched elements.
 * 
 * Display or hide the matched elements.
 * 
 * @param {(string|number)|!JQueryAnimationOptions|boolean=} duration_or_options_or_showOrHide A string or number determining how long the animation will run. / A map of additional options to pass to the method. / A Boolean indicating whether to show or hide the elements.
 * @param {!Function|string=} complete_or_easing A function to call once the animation is complete. / A string indicating which easing function to use for the transition.
 * @param {!Function=} complete A function to call once the animation is complete.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.toggle = function(duration_or_options_or_showOrHide, complete_or_easing, complete) {};

/**
 * Attach a handler to an event for the elements.
 * 
 * Attach a handler to an event for the elements.
 * 
 * Attach a handler to an event for the elements.
 * 
 * Attach a handler to an event for the elements.
 * 
 * Attach a handler to an event for the elements.
 * 
 * @param {string|?} eventType_or_events A string containing one or more DOM event types, such as "click" or "submit," or custom event names. / An object containing one or more DOM event types and functions to execute for them.
 * @param {?|function(!JQueryEventObject): ?|boolean=} eventData_or_handler_or_preventBubble An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered. / Setting the third argument to false will attach a function that prevents the default action from occurring and stops the event from bubbling. The default is true.
 * @param {function(!JQueryEventObject): ?|boolean=} handler_or_preventBubble A function to execute each time the event is triggered. / Setting the third argument to false will attach a function that prevents the default action from occurring and stops the event from bubbling. The default is true.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.bind = function(eventType_or_events, eventData_or_handler_or_preventBubble, handler_or_preventBubble) {};

/**
 * Trigger the "blur" event on an element
 * Bind an event handler to the "blur" JavaScript event
 * 
 * Bind an event handler to the "blur" JavaScript event
 * 
 * @param {function(!JQueryEventObject): ?|?=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.blur = function(handler_or_eventData, handler) {};

/**
 * Trigger the "change" event on an element.
 * Bind an event handler to the "change" JavaScript event
 * 
 * Bind an event handler to the "change" JavaScript event
 * 
 * @param {function(!JQueryEventObject): ?|?=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.change = function(handler_or_eventData, handler) {};

/**
 * Trigger the "click" event on an element.
 * Bind an event handler to the "click" JavaScript event
 * 
 * Bind an event handler to the "click" JavaScript event
 * 
 * @param {function(!JQueryEventObject): ?|?=} handler_or_eventData An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.click = function(handler_or_eventData, handler) {};

/**
 * Trigger the "dblclick" event on an element.
 * Bind an event handler to the "dblclick" JavaScript event
 * 
 * Bind an event handler to the "dblclick" JavaScript event
 * 
 * @param {function(!JQueryEventObject): ?|?=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.dblclick = function(handler_or_eventData, handler) {};

/**
 * @param {?} selector
 * @param {string} eventType
 * @param {function(!JQueryEventObject): ?|?} handler_or_eventData
 * @param {function(!JQueryEventObject): ?=} handler
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.delegate = function(selector, eventType, handler_or_eventData, handler) {};

/**
 * Trigger the "focus" event on an element.
 * Bind an event handler to the "focus" JavaScript event
 * 
 * Bind an event handler to the "focus" JavaScript event
 * 
 * @param {function(!JQueryEventObject): ?|?=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.focus = function(handler_or_eventData, handler) {};

/**
 * Bind an event handler to the "focusin" JavaScript event
 * 
 * Bind an event handler to the "focusin" JavaScript event
 * 
 * @param {function(!JQueryEventObject): ?|!Object} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.focusin = function(handler_or_eventData, handler) {};

/**
 * Bind an event handler to the "focusout" JavaScript event
 * 
 * Bind an event handler to the "focusout" JavaScript event
 * 
 * @param {function(!JQueryEventObject): ?|!Object} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.focusout = function(handler_or_eventData, handler) {};

/**
 * Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.
 * 
 * Bind a single handler to the matched elements, to be executed when the mouse pointer enters or leaves the elements.
 * 
 * @param {function(!JQueryEventObject): ?} handlerIn_or_handlerInOut A function to execute when the mouse pointer enters the element. / A function to execute when the mouse pointer enters or leaves the element.
 * @param {function(!JQueryEventObject): ?=} handlerOut A function to execute when the mouse pointer leaves the element.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.hover = function(handlerIn_or_handlerInOut, handlerOut) {};

/**
 * Trigger the "keydown" event on an element.
 * Bind an event handler to the "keydown" JavaScript event
 * 
 * Bind an event handler to the "keydown" JavaScript event
 * 
 * @param {function(!JQueryKeyEventObject): ?|?=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryKeyEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.keydown = function(handler_or_eventData, handler) {};

/**
 * Trigger the "keypress" event on an element.
 * Bind an event handler to the "keypress" JavaScript event
 * 
 * Bind an event handler to the "keypress" JavaScript event
 * 
 * @param {function(!JQueryKeyEventObject): ?|?=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryKeyEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.keypress = function(handler_or_eventData, handler) {};

/**
 * Trigger the "keyup" event on an element.
 * Bind an event handler to the "keyup" JavaScript event
 * 
 * Bind an event handler to the "keyup" JavaScript event
 * 
 * @param {function(!JQueryKeyEventObject): ?|?=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryKeyEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.keyup = function(handler_or_eventData, handler) {};

/**
 * Trigger the "mousedown" event on an element.
 * Bind an event handler to the "mousedown" JavaScript event.
 * 
 * Bind an event handler to the "mousedown" JavaScript event.
 * 
 * @param {function(!JQueryMouseEventObject): ?|!Object=} handler_or_eventData A function to execute when the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryMouseEventObject): ?=} handler A function to execute when the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.mousedown = function(handler_or_eventData, handler) {};

/**
 * Trigger the "mouseenter" event on an element.
 * Bind an event handler to be fired when the mouse enters an element.
 * 
 * Bind an event handler to be fired when the mouse enters an element.
 * 
 * @param {function(!JQueryMouseEventObject): ?|!Object=} handler_or_eventData A function to execute when the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryMouseEventObject): ?=} handler A function to execute when the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.mouseenter = function(handler_or_eventData, handler) {};

/**
 * Trigger the "mouseleave" event on an element.
 * Bind an event handler to be fired when the mouse leaves an element.
 * 
 * Bind an event handler to be fired when the mouse leaves an element.
 * 
 * @param {function(!JQueryMouseEventObject): ?|!Object=} handler_or_eventData A function to execute when the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryMouseEventObject): ?=} handler A function to execute when the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.mouseleave = function(handler_or_eventData, handler) {};

/**
 * Trigger the "mousemove" event on an element.
 * Bind an event handler to the "mousemove" JavaScript event.
 * 
 * Bind an event handler to the "mousemove" JavaScript event.
 * 
 * @param {function(!JQueryMouseEventObject): ?|!Object=} handler_or_eventData A function to execute when the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryMouseEventObject): ?=} handler A function to execute when the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.mousemove = function(handler_or_eventData, handler) {};

/**
 * Trigger the "mouseout" event on an element.
 * Bind an event handler to the "mouseout" JavaScript event.
 * 
 * Bind an event handler to the "mouseout" JavaScript event.
 * 
 * @param {function(!JQueryMouseEventObject): ?|!Object=} handler_or_eventData A function to execute when the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryMouseEventObject): ?=} handler A function to execute when the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.mouseout = function(handler_or_eventData, handler) {};

/**
 * Trigger the "mouseover" event on an element.
 * Bind an event handler to the "mouseover" JavaScript event.
 * 
 * Bind an event handler to the "mouseover" JavaScript event.
 * 
 * @param {function(!JQueryMouseEventObject): ?|!Object=} handler_or_eventData A function to execute when the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryMouseEventObject): ?=} handler A function to execute when the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.mouseover = function(handler_or_eventData, handler) {};

/**
 * Trigger the "mouseup" event on an element.
 * Bind an event handler to the "mouseup" JavaScript event.
 * 
 * Bind an event handler to the "mouseup" JavaScript event.
 * 
 * @param {function(!JQueryMouseEventObject): ?|!Object=} handler_or_eventData A function to execute when the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryMouseEventObject): ?=} handler A function to execute when the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.mouseup = function(handler_or_eventData, handler) {};

/**
 * Remove an event handler.
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * @param {string|!Object<string,?>=} events One or more space-separated event types and optional namespaces, or just namespaces, such as "click", "keydown.myPlugin", or ".myPlugin". / An object where the string keys represent one or more space-separated event types and optional namespaces, and the values represent handler functions previously attached for the event(s).
 * @param {string|function(!JQueryEventObject): ?=} selector_or_handler A selector which should match the one originally passed to .on() when attaching event handlers. / A handler function previously attached for the event(s), or the special value false.
 * @param {function(!JQueryEventObject): ?=} handler A handler function previously attached for the event(s), or the special value false.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.off = function(events, selector_or_handler, handler) {};

/**
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * @param {string|!Object<string,?>} events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin". / An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).
 * @param {function(!JQueryEventObject, !Array<?>): ?|?|string=} handler_or_data_or_selector A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false. Rest parameter args is for optional parameters passed to jQuery.trigger(). Note that the actual parameters on the event handler function must be marked as optional (? syntax). / Data to be passed to the handler in event.data when an event is triggered. / A selector string to filter the descendants of the selected elements that trigger the event. If the selector is null or omitted, the event is always triggered when it reaches the selected element. / A selector string to filter the descendants of the selected elements that will call the handler. If the selector is null or omitted, the handler is always called when it reaches the selected element. / Data to be passed to the handler in event.data when an event occurs.
 * @param {function(!JQueryEventObject, !Array<?>): ?|?=} handler_or_data A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false. / Data to be passed to the handler in event.data when an event is triggered. / Data to be passed to the handler in event.data when an event occurs.
 * @param {function(!JQueryEventObject, !Array<?>): ?=} handler A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.on = function(events, handler_or_data_or_selector, handler_or_data, handler) {};

/**
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * @param {string|!Object<string,?>} events A string containing one or more JavaScript event types, such as "click" or "submit," or custom event names. / One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin". / An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).
 * @param {function(!JQueryEventObject): ?|!Object|string|?=} handler_or_data_or_selector A function to execute at the time the event is triggered. / An object containing data that will be passed to the event handler. / A selector string to filter the descendants of the selected elements that trigger the event. If the selector is null or omitted, the event is always triggered when it reaches the selected element. / A selector string to filter the descendants of the selected elements that will call the handler. If the selector is null or omitted, the handler is always called when it reaches the selected element. / Data to be passed to the handler in event.data when an event occurs.
 * @param {function(!JQueryEventObject): ?|?=} handler_or_data A function to execute at the time the event is triggered. / A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false. / Data to be passed to the handler in event.data when an event is triggered. / Data to be passed to the handler in event.data when an event occurs.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.one = function(events, handler_or_data_or_selector, handler_or_data, handler) {};

/**
 * Specify a function to execute when the DOM is fully loaded.
 * 
 * @param {!Function} handler A function to execute after the DOM is ready.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.ready = function(handler) {};

/**
 * Trigger the "resize" event on an element.
 * Bind an event handler to the "resize" JavaScript event.
 * 
 * Bind an event handler to the "resize" JavaScript event.
 * 
 * @param {function(!JQueryEventObject): ?|!Object=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.resize = function(handler_or_eventData, handler) {};

/**
 * Trigger the "scroll" event on an element.
 * Bind an event handler to the "scroll" JavaScript event.
 * 
 * Bind an event handler to the "scroll" JavaScript event.
 * 
 * @param {function(!JQueryEventObject): ?|!Object=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.scroll = function(handler_or_eventData, handler) {};

/**
 * Trigger the "select" event on an element.
 * Bind an event handler to the "select" JavaScript event.
 * 
 * Bind an event handler to the "select" JavaScript event.
 * 
 * @param {function(!JQueryEventObject): ?|!Object=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.select = function(handler_or_eventData, handler) {};

/**
 * Trigger the "submit" event on an element.
 * Bind an event handler to the "submit" JavaScript event
 * 
 * Bind an event handler to the "submit" JavaScript event
 * 
 * @param {function(!JQueryEventObject): ?|?=} handler_or_eventData A function to execute each time the event is triggered. / An object containing data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute each time the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.submit = function(handler_or_eventData, handler) {};

/**
 * Execute all handlers and behaviors attached to the matched elements for the given event type.
 * 
 * Execute all handlers and behaviors attached to the matched elements for the given event type.
 * 
 * @param {string|!JQueryEventObject} eventType_or_event A string containing a JavaScript event type, such as click or submit. / A jQuery.Event object.
 * @param {(!Object|!Array<?>)=} extraParameters Additional parameters to pass along to the event handler.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.trigger = function(eventType_or_event, extraParameters) {};

/**
 * Execute all handlers attached to an element for an event.
 * 
 * @param {string} eventType A string containing a JavaScript event type, such as click or submit.
 * @param {...?} extraParameters An array of additional parameters to pass along to the event handler.
 * @return {!Object}
 */
ChaiJQuery.prototype.triggerHandler = function(eventType, extraParameters) {};

/**
 * Remove a previously-attached event handler from the elements.
 * 
 * Remove a previously-attached event handler from the elements.
 * 
 * Remove a previously-attached event handler from the elements.
 * 
 * @param {string|?=} eventType_or_evt A string containing a JavaScript event type, such as click or submit. / A JavaScript event object as passed to an event handler.
 * @param {function(!JQueryEventObject): ?|boolean=} handler_or_fls The function that is to be no longer executed. / Unbinds the corresponding 'return false' function that was bound using .bind( eventType, false ).
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.unbind = function(eventType_or_evt, handler_or_fls) {};

/**
 * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
 * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
 * 
 * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
 * 
 * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
 * 
 * @param {string=} selector_or_namespace A selector which will be used to filter the event results. / A string containing a namespace to unbind all events from.
 * @param {string|!Object=} eventType_or_events A string containing a JavaScript event type, such as "click" or "keydown" / An object of one or more event types and previously bound functions to unbind from them.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute at the time the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.undelegate = function(selector_or_namespace, eventType_or_events, handler) {};

/**
 * Bind an event handler to the "unload" JavaScript event. (DEPRECATED from v1.8)
 * 
 * Bind an event handler to the "unload" JavaScript event. (DEPRECATED from v1.8)
 * 
 * @param {function(!JQueryEventObject): ?|?=} handler_or_eventData A function to execute when the event is triggered. / A plain object of data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute when the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.unload = function(handler_or_eventData, handler) {};

/**
 * Bind an event handler to the "error" JavaScript event. (DEPRECATED from v1.8)
 * 
 * Bind an event handler to the "error" JavaScript event. (DEPRECATED from v1.8)
 * 
 * @param {function(!JQueryEventObject): ?|?} handler_or_eventData A function to execute when the event is triggered. / A plain object of data that will be passed to the event handler.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute when the event is triggered.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.error = function(handler_or_eventData, handler) {};

/**
 * Add a collection of DOM elements onto the jQuery stack.
 * 
 * Add a collection of DOM elements onto the jQuery stack.
 * 
 * @param {!Array<?>} elements An array of elements to push onto the stack and make into a new jQuery object.
 * @param {string=} name The name of a jQuery method that generated the array of elements.
 * @param {!Array<?>=} tsickle_arguments
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.pushStack = function(elements, name, tsickle_arguments) {};

/**
 * Insert content, specified by the parameter, after each element in the set of matched elements.
 * 
 * param content1 HTML string, DOM element, array of elements, or jQuery object to insert after each element in the set of matched elements.
 * param content2 One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert after each element in the set of matched elements.
 * Insert content, specified by the parameter, after each element in the set of matched elements.
 * 
 * param func A function that returns an HTML string, DOM element(s), or jQuery object to insert after each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.
 * @param {(string|!Array<?>|!Element|?<!HTMLElement>|!Text)|function(number, string): (string|!Element|?<!HTMLElement>)} content1_or_func
 * @param {...?} content2
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.after = function(content1_or_func, content2) {};

/**
 * Insert content, specified by the parameter, to the end of each element in the set of matched elements.
 * 
 * param content1 DOM element, array of elements, HTML string, or jQuery object to insert at the end of each element in the set of matched elements.
 * param content2 One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert at the end of each element in the set of matched elements.
 * Insert content, specified by the parameter, to the end of each element in the set of matched elements.
 * 
 * param func A function that returns an HTML string, DOM element(s), or jQuery object to insert at the end of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.
 * @param {(string|!Array<?>|!Element|?<!HTMLElement>|!Text)|function(number, string): (string|!Element|?<!HTMLElement>)} content1_or_func
 * @param {...?} content2
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.append = function(content1_or_func, content2) {};

/**
 * Insert every element in the set of matched elements to the end of the target.
 * 
 * @param {(string|!Array<?>|!Element|?<!HTMLElement>)} target A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the end of the element(s) specified by this parameter.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.appendTo = function(target) {};

/**
 * Insert content, specified by the parameter, before each element in the set of matched elements.
 * 
 * param content1 HTML string, DOM element, array of elements, or jQuery object to insert before each element in the set of matched elements.
 * param content2 One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert before each element in the set of matched elements.
 * Insert content, specified by the parameter, before each element in the set of matched elements.
 * 
 * param func A function that returns an HTML string, DOM element(s), or jQuery object to insert before each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.
 * @param {(string|!Array<?>|!Element|?<!HTMLElement>|!Text)|function(number, string): (string|!Element|?<!HTMLElement>)} content1_or_func
 * @param {...?} content2
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.before = function(content1_or_func, content2) {};

/**
 * Create a deep copy of the set of matched elements.
 * 
 * param withDataAndEvents A Boolean indicating whether event handlers and data should be copied along with the elements. The default value is false.
 * param deepWithDataAndEvents A Boolean indicating whether event handlers and data for all children of the cloned element should be copied. By default its value matches the first argument's value (which defaults to false).
 * @param {boolean=} withDataAndEvents
 * @param {boolean=} deepWithDataAndEvents
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.clone = function(withDataAndEvents, deepWithDataAndEvents) {};

/**
 * Remove the set of matched elements from the DOM.
 * 
 * param selector A selector expression that filters the set of matched elements to be removed.
 * @param {string=} selector
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.detach = function(selector) {};

/**
 * Remove all child nodes of the set of matched elements from the DOM.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.empty = function() {};

/**
 * Insert every element in the set of matched elements after the target.
 * 
 * param target A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted after the element(s) specified by this parameter.
 * @param {(string|!Array<?>|!Element|?<!HTMLElement>|!Text)} target
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.insertAfter = function(target) {};

/**
 * Insert every element in the set of matched elements before the target.
 * 
 * param target A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted before the element(s) specified by this parameter.
 * @param {(string|!Array<?>|!Element|?<!HTMLElement>|!Text)} target
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.insertBefore = function(target) {};

/**
 * Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
 * 
 * param content1 DOM element, array of elements, HTML string, or jQuery object to insert at the beginning of each element in the set of matched elements.
 * param content2 One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert at the beginning of each element in the set of matched elements.
 * Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
 * 
 * param func A function that returns an HTML string, DOM element(s), or jQuery object to insert at the beginning of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.
 * @param {(string|!Array<?>|!Element|?<!HTMLElement>|!Text)|function(number, string): (string|!Element|?<!HTMLElement>)} content1_or_func
 * @param {...?} content2
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.prepend = function(content1_or_func, content2) {};

/**
 * Insert every element in the set of matched elements to the beginning of the target.
 * 
 * @param {(string|!Array<?>|!Element|?<!HTMLElement>)} target A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the beginning of the element(s) specified by this parameter.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.prependTo = function(target) {};

/**
 * Remove the set of matched elements from the DOM.
 * 
 * @param {string=} selector A selector expression that filters the set of matched elements to be removed.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.remove = function(selector) {};

/**
 * Replace each target element with the set of matched elements.
 * 
 * @param {(string|!Array<?>|!Element|?<!HTMLElement>)} target A selector string, jQuery object, DOM element, or array of elements indicating which element(s) to replace.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.replaceAll = function(target) {};

/**
 * Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.
 * 
 * param newContent The content to insert. May be an HTML string, DOM element, array of DOM elements, or jQuery object.
 * Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.
 * 
 * param func A function that returns content with which to replace the set of matched elements.
 * @param {(string|!Array<?>|!Element|?<!HTMLElement>|!Text)|function(): (!Element|?<!HTMLElement>)} newContent_or_func
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.replaceWith = function(newContent_or_func) {};

/**
 * Get the combined text contents of each element in the set of matched elements, including their descendants.
 * Set the content of each element in the set of matched elements to the specified text.
 * 
 * Set the content of each element in the set of matched elements to the specified text.
 * 
 * @param {(string|number|boolean)|function(number, string): string=} text_or_func The text to set as the content of each matched element. When Number or Boolean is supplied, it will be converted to a String representation. / A function returning the text content to set. Receives the index position of the element in the set and the old text value as arguments.
 * @return {string|!ChaiJQuery}
 */
ChaiJQuery.prototype.text = function(text_or_func) {};

/**
 * Retrieve all the elements contained in the jQuery set, as an array.
 * @return {!Array<?>}
 */
ChaiJQuery.prototype.toArray = function() {};

/**
 * Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.unwrap = function() {};

/**
 * Wrap an HTML structure around each element in the set of matched elements.
 * 
 * Wrap an HTML structure around each element in the set of matched elements.
 * 
 * @param {(string|!Element|?<!HTMLElement>)|function(number): (string|?<!HTMLElement>)} wrappingElement_or_func A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements. / A callback function returning the HTML content or jQuery object to wrap around the matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.wrap = function(wrappingElement_or_func) {};

/**
 * Wrap an HTML structure around all elements in the set of matched elements.
 * 
 * @param {(string|!Element|?<!HTMLElement>)|function(number): string} wrappingElement_or_func A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.wrapAll = function(wrappingElement_or_func) {};

/**
 * Wrap an HTML structure around the content of each element in the set of matched elements.
 * 
 * Wrap an HTML structure around the content of each element in the set of matched elements.
 * 
 * @param {(string|!Element|?<!HTMLElement>)|function(number): string} wrappingElement_or_func An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the content of the matched elements. / A callback function which generates a structure to wrap around the content of the matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.wrapInner = function(wrappingElement_or_func) {};

/**
 * Iterate over a jQuery object, executing a function for each matched element.
 * 
 * @param {function(number, !Element): ?} func A function to execute for each matched element.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.each = function(func) {};

/**
 * Retrieve one of the elements matched by the jQuery object.
 * 
 * Retrieve the elements matched by the jQuery object.
 * @param {number=} index A zero-based integer indicating which element to retrieve.
 * @return {!HTMLElement|!Array<?>}
 */
ChaiJQuery.prototype.get = function(index) {};

/**
 * Search for a given element from among the matched elements.
 * Search for a given element from among the matched elements.
 * 
 * @param {(string|!Element|?<!HTMLElement>)=} selector A selector representing a jQuery collection in which to look for an element.
 * @return {number}
 */
ChaiJQuery.prototype.index = function(selector) {};

/**
 * Add elements to the set of matched elements.
 * 
 * Add elements to the set of matched elements.
 * 
 * Add elements to the set of matched elements.
 * 
 * Add elements to the set of matched elements.
 * 
 * @param {...string|!Element|?<!HTMLElement>} selector_or_elements_or_html_or_obj A string representing a selector expression to find additional elements to add to the set of matched elements. / One or more elements to add to the set of matched elements. / An HTML fragment to add to the set of matched elements. / An existing jQuery object to add to the set of matched elements.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.add = function(selector_or_elements_or_html_or_obj) {};

/**
 * Get the children of each element in the set of matched elements, optionally filtered by a selector.
 * 
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.children = function(selector) {};

/**
 * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
 * 
 * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
 * 
 * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
 * 
 * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
 * 
 * Get an array of all the elements and selectors matched against the current element up through the DOM tree.
 * 
 * @param {string|?<!HTMLElement>|!Element|?} selector_or_obj_or_element_or_selectors A string containing a selector expression to match elements against. / A jQuery object to match elements against. / An element to match elements against. / An array or string containing a selector expression to match elements against (can also be a jQuery object).
 * @param {!Element=} context A DOM element within which a matching element may be found. If no context is passed in then the context of the jQuery set will be used instead.
 * @return {!ChaiJQuery|!Array<?>}
 */
ChaiJQuery.prototype.closest = function(selector_or_obj_or_element_or_selectors, context) {};

/**
 * Get the children of each element in the set of matched elements, including text and comment nodes.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.contents = function() {};

/**
 * End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.end = function() {};

/**
 * Reduce the set of matched elements to the one at the specified index.
 * 
 * @param {number} index An integer indicating the 0-based position of the element. OR An integer indicating the position of the element, counting backwards from the last element in the set.
 * 
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.eq = function(index) {};

/**
 * Reduce the set of matched elements to those that match the selector or pass the function's test.
 * 
 * Reduce the set of matched elements to those that match the selector or pass the function's test.
 * 
 * Reduce the set of matched elements to those that match the selector or pass the function's test.
 * 
 * Reduce the set of matched elements to those that match the selector or pass the function's test.
 * 
 * @param {string|function(number, !Element): ?|!Element|?<!HTMLElement>} selector_or_func_or_element_or_obj A string containing a selector expression to match the current set of elements against. / A function used as a test for each element in the set. this is the current DOM element. / An element to match the current set of elements against. / An existing jQuery object to match the current set of elements against.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.filter = function(selector_or_func_or_element_or_obj) {};

/**
 * Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.
 * 
 * Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.
 * 
 * Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.
 * 
 * @param {string|!Element|?<!HTMLElement>} selector_or_element_or_obj A string containing a selector expression to match elements against. / An element to match elements against. / A jQuery object to match elements against.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.find = function(selector_or_element_or_obj) {};

/**
 * Reduce the set of matched elements to the first in the set.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.first = function() {};

/**
 * Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.
 * 
 * Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.
 * 
 * @param {string|!Element} selector_or_contained A string containing a selector expression to match elements against. / A DOM element to match elements against.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.has = function(selector_or_contained) {};

/**
 * Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.
 * 
 * Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.
 * 
 * Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.
 * 
 * Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.
 * 
 * @param {string|function(number, !Element): boolean|?<!HTMLElement>|?} selector_or_func_or_obj_or_elements A string containing a selector expression to match elements against. / A function used as a test for the set of elements. It accepts one argument, index, which is the element's index in the jQuery collection.Within the function, this refers to the current DOM element. / An existing jQuery object to match the current set of elements against. / One or more elements to match the current set of elements against.
 * @return {boolean}
 */
ChaiJQuery.prototype.is = function(selector_or_func_or_obj_or_elements) {};

/**
 * Reduce the set of matched elements to the final one in the set.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.last = function() {};

/**
 * Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.
 * 
 * @param {function(number, !Element): ?} callback A function object that will be invoked for each element in the current set.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.map = function(callback) {};

/**
 * Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.
 * 
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.next = function(selector) {};

/**
 * Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.
 * 
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.nextAll = function(selector) {};

/**
 * Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.
 * 
 * Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.
 * 
 * Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.
 * 
 * @param {string|!Element|?<!HTMLElement>=} selector_or_element_or_obj A string containing a selector expression to indicate where to stop matching following sibling elements. / A DOM node or jQuery object indicating where to stop matching following sibling elements.
 * @param {string=} filter A string containing a selector expression to match elements against.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.nextUntil = function(selector_or_element_or_obj, filter) {};

/**
 * Remove elements from the set of matched elements.
 * 
 * Remove elements from the set of matched elements.
 * 
 * Remove elements from the set of matched elements.
 * 
 * Remove elements from the set of matched elements.
 * 
 * @param {...string|function(number, !Element): boolean|!Element|?<!HTMLElement>} selector_or_func_or_elements_or_obj A string containing a selector expression to match elements against. / A function used as a test for each element in the set. this is the current DOM element. / One or more DOM elements to remove from the matched set. / An existing jQuery object to match the current set of elements against.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.not = function(selector_or_func_or_elements_or_obj) {};

/**
 * Get the closest ancestor element that is positioned.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.offsetParent = function() {};

/**
 * Get the parent of each element in the current set of matched elements, optionally filtered by a selector.
 * 
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.parent = function(selector) {};

/**
 * Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.
 * 
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.parents = function(selector) {};

/**
 * Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.
 * 
 * Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.
 * 
 * Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.
 * 
 * @param {string|!Element|?<!HTMLElement>=} selector_or_element_or_obj A string containing a selector expression to indicate where to stop matching ancestor elements. / A DOM node or jQuery object indicating where to stop matching ancestor elements.
 * @param {string=} filter A string containing a selector expression to match elements against.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.parentsUntil = function(selector_or_element_or_obj, filter) {};

/**
 * Get the immediately preceding sibling of each element in the set of matched elements, optionally filtered by a selector.
 * 
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.prev = function(selector) {};

/**
 * Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.
 * 
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.prevAll = function(selector) {};

/**
 * Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.
 * 
 * Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.
 * 
 * Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.
 * 
 * @param {string|!Element|?<!HTMLElement>=} selector_or_element_or_obj A string containing a selector expression to indicate where to stop matching preceding sibling elements. / A DOM node or jQuery object indicating where to stop matching preceding sibling elements.
 * @param {string=} filter A string containing a selector expression to match elements against.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.prevUntil = function(selector_or_element_or_obj, filter) {};

/**
 * Get the siblings of each element in the set of matched elements, optionally filtered by a selector.
 * 
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.siblings = function(selector) {};

/**
 * Reduce the set of matched elements to a subset specified by a range of indices.
 * 
 * @param {number} start An integer indicating the 0-based position at which the elements begin to be selected. If negative, it indicates an offset from the end of the set.
 * @param {number=} end An integer indicating the 0-based position at which the elements stop being selected. If negative, it indicates an offset from the end of the set. If omitted, the range continues until the end of the set.
 * @return {!ChaiJQuery}
 */
ChaiJQuery.prototype.slice = function(start, end) {};

/**
 * Show the queue of functions to be executed on the matched elements.
 * 
 * Manipulate the queue of functions to be executed, once for each matched element.
 * 
 * Manipulate the queue of functions to be executed, once for each matched element.
 * 
 * Manipulate the queue of functions to be executed, once for each matched element.
 * 
 * Manipulate the queue of functions to be executed, once for each matched element.
 * 
 * @param {string|!Array<!Function>|!Function=} queueName_or_newQueue_or_callback A string containing the name of the queue. Defaults to fx, the standard effects queue. / An array of functions to replace the current queue contents. / The new function to add to the queue, with a function to call that will dequeue the next item.
 * @param {!Array<!Function>|!Function=} newQueue_or_callback An array of functions to replace the current queue contents. / The new function to add to the queue, with a function to call that will dequeue the next item.
 * @return {!Array<?>|!ChaiJQuery}
 */
ChaiJQuery.prototype.queue = function(queueName_or_newQueue_or_callback, newQueue_or_callback) {};
