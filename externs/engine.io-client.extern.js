/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/engine.io-client/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */
/** @const */
var client = {};

/** @typedef {string} */
client.Transport;

/** @typedef {(string|!ArrayBuffer|!ArrayBufferView|!Blob)} */
client.Message;
/**
 * @record
 * @struct
 */
client.MessageOptions = function() {};
 /** @type {boolean} */
client.MessageOptions.prototype.compress;
/**
 * @record
 * @struct
 */
client.SocketOptions = function() {};
 /** @type {(boolean|!Agent)} */
client.SocketOptions.prototype.agent;
 /** @type {boolean} */
client.SocketOptions.prototype.upgrade;
 /** @type {boolean} */
client.SocketOptions.prototype.forceJSONP;
 /** @type {boolean} */
client.SocketOptions.prototype.jsonp;
 /** @type {boolean} */
client.SocketOptions.prototype.forceBase64;
 /** @type {boolean} */
client.SocketOptions.prototype.enablesXDR;
 /** @type {boolean} */
client.SocketOptions.prototype.timestampRequests;
 /** @type {string} */
client.SocketOptions.prototype.timestampParam;
 /** @type {number} */
client.SocketOptions.prototype.policyPort;
 /** @type {string} */
client.SocketOptions.prototype.path;
 /** @type {!Array<string>} */
client.SocketOptions.prototype.transports;
 /** @type {!Object<string,!client.SocketOptions>} */
client.SocketOptions.prototype.transportOptions;
 /** @type {boolean} */
client.SocketOptions.prototype.rememberUpgrade;
 /** @type {string} */
client.SocketOptions.prototype.pfx;
 /** @type {string} */
client.SocketOptions.prototype.key;
 /** @type {string} */
client.SocketOptions.prototype.passphrase;
 /** @type {string} */
client.SocketOptions.prototype.cert;
 /** @type {(string|!Array<string>)} */
client.SocketOptions.prototype.ca;
 /** @type {string} */
client.SocketOptions.prototype.ciphers;
 /** @type {boolean} */
client.SocketOptions.prototype.rejectUnauthorized;
 /** @type {?} */
client.SocketOptions.prototype.perMessageDeflate;
 /** @type {!Object<string,string>} */
client.SocketOptions.prototype.extraHeaders;
 /** @type {boolean} */
client.SocketOptions.prototype.onlyBinaryUpgrades;
 /** @type {boolean} */
client.SocketOptions.prototype.forceNode;
 /** @type {string} */
client.SocketOptions.prototype.localAddress;
/**
 * @record
 * @struct
 */
client.UpgradeError = function() {};
 /** @type {string} */
client.UpgradeError.prototype.transport;
/**
 * @constructor
 * @struct
 */
client.Socket = function() {};
 /** @type {number} */
client.Socket.prototype.protocol;
 /** @type {string} */
client.Socket.prototype.binaryType;

/**
 * @param {string} ev
 * @param {function(): void|function((string|!ArrayBuffer)): void|function(string, !Error): void|function(!Error): void|function(!client.UpgradeError): void|function(?): void} cb
 * @return {Socket}
 */
client.Socket.prototype.on = function(ev, cb) {};

/**
 * Sends a message to the server
 * @param {(string|!ArrayBuffer|!ArrayBufferView|!Blob)} message
 * @param {!client.MessageOptions=} opts
 * @param {function(): void=} cb
 * @return {Socket}
 */
client.Socket.prototype.send = function(message, opts, cb) {};

/**
 * Disconnects the client.
 * @return {Socket}
 */
client.Socket.prototype.close = function() {};

/**
 * @param {string=} url
 * @param {!client.SocketOptions=} opts
 * @return {!client.Socket}
 */
function client(url, opts) {}

/* TODO: ExportAssignment in  */
