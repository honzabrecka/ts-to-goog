/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/umzug/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */
/** @const */
var umzug = {};
/**
 * @record
 * @struct
 */
umzug.MigrationOptions = function() {};
 /** @type {!Array<?>} */
umzug.MigrationOptions.prototype.params;
 /** @type {string} */
umzug.MigrationOptions.prototype.path;
 /** @type {!RegExp} */
umzug.MigrationOptions.prototype.pattern;
 /** @type {function(T): T} */
umzug.MigrationOptions.prototype.wrap;
/**
 * @record
 * @struct
 */
umzug.JSONStorageOptions = function() {};
 /** @type {string} */
umzug.JSONStorageOptions.prototype.path;
/**
 * @record
 * @struct
 */
umzug.SequelizeStorageOptions = function() {};
 /** @type {!sequelize.Sequelize} */
umzug.SequelizeStorageOptions.prototype.sequelize;
 /** @type {!sequelize.Model<?, ?>} */
umzug.SequelizeStorageOptions.prototype.model;
 /** @type {string} */
umzug.SequelizeStorageOptions.prototype.modelName;
 /** @type {string} */
umzug.SequelizeStorageOptions.prototype.tableName;
 /** @type {string} */
umzug.SequelizeStorageOptions.prototype.columnName;
 /** @type {!sequelize.DataTypeAbstract} */
umzug.SequelizeStorageOptions.prototype.columnType;
/**
 * @record
 * @struct
 */
umzug.ExecuteOptions = function() {};
 /** @type {!Array<string>} */
umzug.ExecuteOptions.prototype.migrations;
 /** @type {string} */
umzug.ExecuteOptions.prototype.method;
/**
 * @record
 * @struct
 */
umzug.UmzugOptions = function() {};
 /** @type {string} */
umzug.UmzugOptions.prototype.storage;
 /** @type {(!Object|!umzug.JSONStorageOptions|!umzug.SequelizeStorageOptions)} */
umzug.UmzugOptions.prototype.storageOptions;
 /** @type {(boolean|!Function)} */
umzug.UmzugOptions.prototype.logging;
 /** @type {string} */
umzug.UmzugOptions.prototype.upName;
 /** @type {string} */
umzug.UmzugOptions.prototype.downName;
 /** @type {!umzug.MigrationOptions} */
umzug.UmzugOptions.prototype.migrations;
/**
 * @record
 * @struct
 */
umzug.UpDownToOptions = function() {};
 /** @type {string} */
umzug.UpDownToOptions.prototype.to;
/**
 * @record
 * @struct
 */
umzug.UpDownMigrationsOptions = function() {};
 /** @type {!Array<string>} */
umzug.UpDownMigrationsOptions.prototype.migrations;
/**
 * @record
 * @struct
 */
umzug.Migration = function() {};
 /** @type {string} */
umzug.Migration.prototype.path;
 /** @type {string} */
umzug.Migration.prototype.file;
/**
 * @record
 * @struct
 */
umzug.Umzug = function() {};

/**
 * The execute method is a general purpose function that runs for
 * every specified migrations the respective function.
 * @param {!umzug.ExecuteOptions=} options
 * @return {!Promise<!Array<!umzug.Migration>>}
 */
umzug.Umzug.prototype.execute = function(options) {};

/**
 * You can get a list of pending/not yet executed migrations like this:
 * @return {!Promise<!Array<!umzug.Migration>>}
 */
umzug.Umzug.prototype.pending = function() {};

/**
 * You can get a list of already executed migrations like this:
 * @return {!Promise<!Array<!umzug.Migration>>}
 */
umzug.Umzug.prototype.executed = function() {};

/**
 * The up method can be used to execute all pending migrations.
 * @param {string|!Array<string>|(!umzug.UpDownToOptions|!umzug.UpDownMigrationsOptions)=} migration_or_migrations_or_options
 * @return {!Promise<!Array<!umzug.Migration>>}
 */
umzug.Umzug.prototype.up = function(migration_or_migrations_or_options) {};

/**
 * The down method can be used to revert the last executed migration.
 * @param {string|!Array<string>|(!umzug.UpDownToOptions|!umzug.UpDownMigrationsOptions)=} migration_or_migrations_or_options
 * @return {!Promise<!Array<!umzug.Migration>>}
 */
umzug.Umzug.prototype.down = function(migration_or_migrations_or_options) {};
/**
 * @record
 * @struct
 */
umzug.UmzugStatic = function() {};

/* TODO: ConstructSignature: umzug */
 /** @type {!umzug.UmzugStatic} */
var umzug;

/* TODO: ExportAssignment in  */
