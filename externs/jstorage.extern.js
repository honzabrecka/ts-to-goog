/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jstorage/index.d.ts:
/**
 * @record
 * @struct
 */
function JStorageOptions() {}
 /** @type {number} */
JStorageOptions.prototype.TTL;
/**
 * @record
 * @struct
 */
function JStorageReadonlyStore() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function JStorageStatic() {}

/**
 * Sets a key's value.
 * 
 * @template TValue
 * @param {string} key Key to set. If this value is not set or not
 *              a string an exception is raised.
 * @param {TValue} value Value to set. This can be any value that is JSON
 *              compatible (Numbers, Strings, Objects etc.).
 * @param {!JStorageOptions=} options
 * @return {TValue} the used value
 */
JStorageStatic.prototype.set = function(key, value, options) {};

/**
 * Looks up a key in cache
 * 
 * @template TValue
 * @param {string} key - Key to look up.
 * @param {TValue=} defaultIfNotFound - Default value to return, if key didn't exist.
 * @return {TValue} the key value, default value or null
 */
JStorageStatic.prototype.get = function(key, defaultIfNotFound) {};

/**
 * Deletes a key from cache.
 * 
 * @param {string} key - Key to delete.
 * @return {boolean} true if key existed or false if it didn't
 */
JStorageStatic.prototype.deleteKey = function(key) {};

/**
 * Sets a TTL for a key, or remove it if ttl value is 0 or below
 * 
 * @param {string} key - key to set the TTL for
 * @param {number} ttl - TTL timeout in milliseconds
 * @return {boolean} true if key existed or false if it didn't
 */
JStorageStatic.prototype.setTTL = function(key, ttl) {};

/**
 * Gets remaining TTL (in milliseconds) for a key or 0 when no TTL has been set
 * 
 * @param {string} key Key to check
 * @return {number} Remaining TTL in milliseconds
 */
JStorageStatic.prototype.getTTL = function(key) {};

/**
 * Deletes everything in cache.
 * 
 * @return {boolean} Always true
 */
JStorageStatic.prototype.flush = function() {};

/**
 * Returns a read-only copy of _storage
 * 
 * @return {!JStorageReadonlyStore} Read-only copy of _storage
 */
JStorageStatic.prototype.storageObj = function() {};

/**
 * Returns an index of all used keys as an array
 * ['key1', 'key2',..'keyN']
 * 
 * @return {!Array<string>} Used keys
 */
JStorageStatic.prototype.index = function() {};

/**
 * How much space in bytes does the storage take?
 * 
 * @return {number} Storage size in chars (not the same as in bytes,
 *                  since some chars may take several bytes)
 */
JStorageStatic.prototype.storageSize = function() {};

/**
 * Which backend is currently in use?
 * 
 * @return {!Storage} Backend name
 */
JStorageStatic.prototype.currentBackend = function() {};

/**
 * Test if storage is available
 * 
 * @return {boolean} True if storage can be used
 */
JStorageStatic.prototype.storageAvailable = function() {};

/**
 * Register change listeners
 * 
 * Register change listeners
 * 
 * @template TValue
 * @param {string} key Key name
 * @param {function(string, ?): void|function(string, TValue): void} callback Function to run when the key changes
 * @return {void}
 */
JStorageStatic.prototype.listenKeyChange = function(key, callback) {};

/**
 * Remove change listeners
 * 
 * @param {string} key Key name to unregister listeners against
 * @param {!Function=} callback
 * @return {void}
 */
JStorageStatic.prototype.stopListening = function(key, callback) {};

/**
 * Subscribe to a Publish/Subscribe event stream
 * 
 * Subscribe to a Publish/Subscribe event stream
 * 
 * @template TValue
 * @param {string} channel Channel name
 * @param {function(string, ?): void|function(string, TValue): void} callback Function to run when the something is published to the channel
 * @return {void}
 */
JStorageStatic.prototype.subscribe = function(channel, callback) {};

/**
 * Publish data to an event stream
 * 
 * @param {string} channel Channel name
 * @param {?} payload Payload to deliver
 * @return {void}
 */
JStorageStatic.prototype.publish = function(channel, payload) {};

/**
 * Reloads the data from browser storage
 * @return {void}
 */
JStorageStatic.prototype.reInit = function() {};
/**
 * @record
 * @struct
 */
function JQueryStatic() {}
 /** @type {!JStorageStatic} */
JQueryStatic.prototype.jStorage;
