/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/object-path/index.d.ts:
 /** @type {!ObjectPathGlobal.IObjectPathStatic} */
var objectPath;
/** @const */
var ObjectPathGlobal = {};

/** @typedef {(string|number|!Array<(string|number)>)} */
ObjectPathGlobal.IPath;

/** @typedef {!Array<(string|number|!Array<(string|number)>)>} */
ObjectPathGlobal.IMultiArray;
/**
 * @record
 * @struct
 */
ObjectPathGlobal.IObjectPathStatic = function() {};

/* TODO: CallSignature: ObjectPathGlobal */

/**
 * Deletes a member from object or array
 * @see objectPath.del
 * @see objectPath.del
 * @template T
 * @param {T=} object
 * @param {(string|number|!Array<(string|number)>)=} path
 * @return {T|void} object
 */
ObjectPathGlobal.IObjectPathStatic.prototype.del = function(object, path) {};

/**
 * Tests path existence
 * @see objectPath.has
 * @see objectPath.has
 * @template T
 * @param {T=} object
 * @param {(string|number|!Array<(string|number)>)=} path
 * @return {boolean} object
 */
ObjectPathGlobal.IObjectPathStatic.prototype.has = function(object, path) {};

/**
 * Get a path from an object
 * @see objectPath.get
 * @see objectPath.get
 * @template T, TResult
 * @param {T=} object
 * @param {(string|number|!Array<(string|number)>)=} path
 * @param {TResult=} defaultValue
 * @return {TResult|T|void}
 */
ObjectPathGlobal.IObjectPathStatic.prototype.get = function(object, path, defaultValue) {};

/**
 * Set a path to a value
 * @see objectPath.set
 * @see objectPath.set
 * @template T, TExisting
 * @param {T=} object
 * @param {(string|number|!Array<(string|number)>)=} path
 * @param {?=} value
 * @param {boolean=} doNotReplace
 * @return {TExisting|T|void} Any existing value on the path if any
 */
ObjectPathGlobal.IObjectPathStatic.prototype.set = function(object, path, value, doNotReplace) {};

/**
 * Create (if path isn't an array) and push the value to it. Can push unlimited number of values
 * @see objectPath.push
 * @template T
 * @param {T=} object
 * @param {(string|number|!Array<(string|number)>)=} path
 * @param {...?} args
 * @return {void}
 */
ObjectPathGlobal.IObjectPathStatic.prototype.push = function(object, path, args) {};

/**
 * Get the first non undefined property
 * @template T, TResult
 * @param {T} object
 * @param {!Array<(string|number|!Array<(string|number)>)>} paths
 * @param {TResult=} defaultValue
 * @return {TResult}
 */
ObjectPathGlobal.IObjectPathStatic.prototype.coalesce = function(object, paths, defaultValue) {};

/**
 * Empty a path. Arrays are set to length 0, objects have all elements deleted, strings
 * are set to empty, numbers to 0, everything else is set to null
 * @see objectPath.empty
 * @see objectPath.empty
 * @template T, TResult
 * @param {T=} object
 * @param {(string|number|!Array<(string|number)>)=} path
 * @return {TResult|T|void}
 */
ObjectPathGlobal.IObjectPathStatic.prototype.empty = function(object, path) {};

/**
 * Set a value if it doesn't exist, do nothing if it does
 * @see objectPath.ensureExists
 * @see objectPath.ensureExists
 * @template T, TExisting
 * @param {T=} object
 * @param {(string|number|!Array<(string|number)>)=} path
 * @param {?=} value
 * @return {TExisting|T|void}
 */
ObjectPathGlobal.IObjectPathStatic.prototype.ensureExists = function(object, path, value) {};

/**
 * Insert an item in an array path
 * @template T
 * @param {T} object
 * @param {(string|number|!Array<(string|number)>)} path
 * @param {?} value
 * @param {number=} at
 * @return {void}
 */
ObjectPathGlobal.IObjectPathStatic.prototype.insert = function(object, path, value, at) {};
/**
 * @record
 * @struct
 */
ObjectPathGlobal.IObjectPathBound = function() {};

/**
 * @see objectPath.ensureExists
 * @see objectPath.del
 * @param {(string|number|!Array<(string|number)>)=} path
 * @return {T}
 */
ObjectPathGlobal.IObjectPathBound.prototype.del = function(path) {};

/**
 * @see objectPath.ensureExists
 * @see objectPath.has
 * @param {(string|number|!Array<(string|number)>)=} path
 * @return {boolean}
 */
ObjectPathGlobal.IObjectPathBound.prototype.has = function(path) {};

/**
 * @see objectPath.ensureExists
 * @see objectPath.get
 * @template TResult
 * @param {(string|number|!Array<(string|number)>)=} path
 * @param {TResult=} defaultValue
 * @return {TResult|T}
 */
ObjectPathGlobal.IObjectPathBound.prototype.get = function(path, defaultValue) {};

/**
 * @see objectPath.ensureExists
 * @see objectPath.set
 * @template TExisting
 * @param {(string|number|!Array<(string|number)>)=} path
 * @param {?=} value
 * @param {boolean=} doNotReplace
 * @return {TExisting|T}
 */
ObjectPathGlobal.IObjectPathBound.prototype.set = function(path, value, doNotReplace) {};

/**
 * @see objectPath.ensureExists
 * @see objectPath.push
 * @param {(string|number|!Array<(string|number)>)=} path
 * @param {...?} args
 * @return {void}
 */
ObjectPathGlobal.IObjectPathBound.prototype.push = function(path, args) {};

/**
 * @see objectPath.ensureExists
 * @template TResult
 * @param {!Array<(string|number|!Array<(string|number)>)>} paths
 * @param {TResult=} defaultValue
 * @return {TResult}
 */
ObjectPathGlobal.IObjectPathBound.prototype.coalesce = function(paths, defaultValue) {};

/**
 * @see objectPath.ensureExists
 * @see objectPath.empty
 * @param {(string|number|!Array<(string|number)>)=} path
 * @return {T}
 */
ObjectPathGlobal.IObjectPathBound.prototype.empty = function(path) {};

/**
 * @see objectPath.ensureExists
 * @see objectPath.ensureExists
 * @template TExisting
 * @param {(string|number|!Array<(string|number)>)=} path
 * @param {?=} value
 * @return {TExisting|T}
 */
ObjectPathGlobal.IObjectPathBound.prototype.ensureExists = function(path, value) {};

/**
 * @see objectPath.insert
 * @param {(string|number|!Array<(string|number)>)} path
 * @param {?} value
 * @param {number=} at
 * @return {void}
 */
ObjectPathGlobal.IObjectPathBound.prototype.insert = function(path, value, at) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "objectPath"
/** @const */
tsickle_declare_module.objectPath = {};

/* TODO: ExportAssignment in tsickle_declare_module.objectPath */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "object-path"
/** @const */
tsickle_declare_module.object_path = {};

/* TODO: ExportAssignment in tsickle_declare_module.object_path */
