/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/magicsuggest/index.d.ts:

/**
 * Initialize MagicSuggest on this selector
 * @param {!MagicSuggest.Configuration=} configurationObject
 * @return {!MagicSuggest.Instance}
 */
JQuery.prototype.magicSuggest = function(configurationObject) {};
/** @const */
var MagicSuggest = {};
/**
 * @record
 * @struct
 */
MagicSuggest.Configuration = function() {};
 /** @type {boolean} */
MagicSuggest.Configuration.prototype.allowFreeEntries;
 /** @type {boolean} */
MagicSuggest.Configuration.prototype.allowDuplicates;
 /** @type {!JQueryAjaxSettings} */
MagicSuggest.Configuration.prototype.ajaxConfig;
 /** @type {boolean} */
MagicSuggest.Configuration.prototype.autoSelect;
 /** @type {boolean} */
MagicSuggest.Configuration.prototype.selectFirst;
 /** @type {string} */
MagicSuggest.Configuration.prototype.queryParam;
 /** @type {function(): void} */
MagicSuggest.Configuration.prototype.beforeSend;
 /** @type {string} */
MagicSuggest.Configuration.prototype.cls;
 /** @type {?} */
MagicSuggest.Configuration.prototype.data;
 /** @type {!Object} */
MagicSuggest.Configuration.prototype.dataUrlParams;
 /** @type {boolean} */
MagicSuggest.Configuration.prototype.disabled;
 /** @type {string} */
MagicSuggest.Configuration.prototype.disabledField;
 /** @type {string} */
MagicSuggest.Configuration.prototype.displayField;
 /** @type {boolean} */
MagicSuggest.Configuration.prototype.editable;
 /** @type {boolean} */
MagicSuggest.Configuration.prototype.expanded;
 /** @type {boolean} */
MagicSuggest.Configuration.prototype.expandOnFocus;
 /** @type {string} */
MagicSuggest.Configuration.prototype.groupBy;
 /** @type {boolean} */
MagicSuggest.Configuration.prototype.hideTrigger;
 /** @type {boolean} */
MagicSuggest.Configuration.prototype.highlight;
 /** @type {string} */
MagicSuggest.Configuration.prototype.id;
 /** @type {string} */
MagicSuggest.Configuration.prototype.infoMsgCls;
 /** @type {?} */
MagicSuggest.Configuration.prototype.inputCfg;
 /** @type {string} */
MagicSuggest.Configuration.prototype.invalidCls;
 /** @type {boolean} */
MagicSuggest.Configuration.prototype.matchCase;
 /** @type {number} */
MagicSuggest.Configuration.prototype.maxDropHeight;
 /** @type {number} */
MagicSuggest.Configuration.prototype.maxEntryLength;
 /** @type {function(number): void} */
MagicSuggest.Configuration.prototype.maxEntryRenderer;
 /** @type {number} */
MagicSuggest.Configuration.prototype.maxSuggestions;
 /** @type {number} */
MagicSuggest.Configuration.prototype.maxSelection;
 /** @type {function(number): void} */
MagicSuggest.Configuration.prototype.maxSelectionRenderer;
 /** @type {string} */
MagicSuggest.Configuration.prototype.method;
 /** @type {number} */
MagicSuggest.Configuration.prototype.minChars;
 /** @type {function(number): void} */
MagicSuggest.Configuration.prototype.minCharsRenderer;
 /** @type {string} */
MagicSuggest.Configuration.prototype.mode;
 /** @type {string} */
MagicSuggest.Configuration.prototype.name;
 /** @type {string} */
MagicSuggest.Configuration.prototype.noSuggestionText;
 /** @type {string} */
MagicSuggest.Configuration.prototype.placeholder;
 /** @type {function(?): void} */
MagicSuggest.Configuration.prototype.renderer;
 /** @type {boolean} */
MagicSuggest.Configuration.prototype.required;
 /** @type {boolean} */
MagicSuggest.Configuration.prototype.resultAsString;
 /** @type {string} */
MagicSuggest.Configuration.prototype.resultAsStringDelimiter;
 /** @type {string} */
MagicSuggest.Configuration.prototype.resultsField;
 /** @type {string} */
MagicSuggest.Configuration.prototype.selectionCls;
 /** @type {?<!HTMLElement>} */
MagicSuggest.Configuration.prototype.selectionContainer;
 /** @type {string} */
MagicSuggest.Configuration.prototype.selectionPosition;
 /** @type {function(?): void} */
MagicSuggest.Configuration.prototype.selectionRenderer;
 /** @type {boolean} */
MagicSuggest.Configuration.prototype.selectionStacked;
 /** @type {string} */
MagicSuggest.Configuration.prototype.sortDir;
 /** @type {string} */
MagicSuggest.Configuration.prototype.sortOrder;
 /** @type {boolean} */
MagicSuggest.Configuration.prototype.strictSuggest;
 /** @type {string} */
MagicSuggest.Configuration.prototype.style;
 /** @type {boolean} */
MagicSuggest.Configuration.prototype.toggleOnClick;
 /** @type {number} */
MagicSuggest.Configuration.prototype.typeDelay;
 /** @type {boolean} */
MagicSuggest.Configuration.prototype.useTabKey;
 /** @type {boolean} */
MagicSuggest.Configuration.prototype.useCommaKey;
 /** @type {boolean} */
MagicSuggest.Configuration.prototype.useZebraStyle;
 /** @type {?} */
MagicSuggest.Configuration.prototype.value;
 /** @type {string} */
MagicSuggest.Configuration.prototype.valueField;
 /** @type {?} */
MagicSuggest.Configuration.prototype.vregex;
 /** @type {?} */
MagicSuggest.Configuration.prototype.vtype;
/**
 * @record
 * @struct
 */
MagicSuggest.Instance = function() {};

/**
 * Add one or multiple json items to the current selection
 * @param {!Array<?>} objs
 * @param {boolean=} isSilent - (optional) set to true to suppress 'selectionchange' event from being triggered
 * @return {void}
 */
MagicSuggest.Instance.prototype.addToSelection = function(objs, isSilent) {};

/**
 * Clears the current selection
 * @param {boolean=} isSilent - (optional) set to true to suppress 'selectionchange' event from being triggered
 * @return {void}
 */
MagicSuggest.Instance.prototype.clear = function(isSilent) {};

/**
 * Collapse the drop down part of the combo
 * @return {void}
 */
MagicSuggest.Instance.prototype.collapse = function() {};

/**
 * Set the component in a disabled state.
 * @return {void}
 */
MagicSuggest.Instance.prototype.disable = function() {};

/**
 * Empties out the combo user text
 * @return {void}
 */
MagicSuggest.Instance.prototype.empty = function() {};

/**
 * Set the component in a enable state.
 * @return {void}
 */
MagicSuggest.Instance.prototype.enable = function() {};

/**
 * Retrieve component enabled status
 * @return {boolean}
 */
MagicSuggest.Instance.prototype.isDisabled = function() {};

/**
 * Checks whether the field is valid or not
 * @return {boolean}
 */
MagicSuggest.Instance.prototype.isValid = function() {};

/**
 * Gets the data params for current ajax request
 * @return {!Object}
 */
MagicSuggest.Instance.prototype.getDataUrlParams = function() {};

/**
 * Gets the name given to the form input
 * @return {string}
 */
MagicSuggest.Instance.prototype.getName = function() {};

/**
 * Retrieve an array of selected json objects
 * @return {!Array<?>}
 */
MagicSuggest.Instance.prototype.getSelection = function() {};

/**
 * Retrieve the current text entered by the user
 * @return {string}
 */
MagicSuggest.Instance.prototype.getRawValue = function() {};

/**
 * Retrieve an array of selected values
 * @return {!Array<?>}
 */
MagicSuggest.Instance.prototype.getValue = function() {};

/**
 * Remove one or multiples json items from the current selection
 * @param {?} items - json object or array of json objects
 * @param {boolean} isSilent - (optional) set to true to suppress 'selectionchange' event from being triggered
 * @return {void}
 */
MagicSuggest.Instance.prototype.removeFromSelection = function(items, isSilent) {};

/**
 * Set up some combo data after it has been rendered
 * @param {?} data
 * @return {void}
 */
MagicSuggest.Instance.prototype.setData = function(data) {};

/**
 * Get current data
 * @return {?}
 */
MagicSuggest.Instance.prototype.getData = function() {};

/**
 * Sets the name for the input field so it can be fetched in the form
 * @param {string} name
 * @return {void}
 */
MagicSuggest.Instance.prototype.setName = function(name) {};

/**
 * Sets the current selection with the JSON items provided
 * @param {!Array<?>} items
 * @param {boolean=} isSilet
 * @return {void}
 */
MagicSuggest.Instance.prototype.setSelection = function(items, isSilet) {};

/**
 * Sets a value for the combo box. Value must be an array of values with data type matching valueField one.
 * @param {!Array<?>} values
 * @return {void}
 */
MagicSuggest.Instance.prototype.setValue = function(values) {};

/**
 * Sets data params for subsequent ajax requests
 * @param {?} params
 * @return {void}
 */
MagicSuggest.Instance.prototype.setDataUrlParams = function(params) {};
