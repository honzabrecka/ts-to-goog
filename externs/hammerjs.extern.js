/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/hammerjs/index.d.ts:
 /** @type {!HammerStatic} */
var Hammer;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "hammerjs"
/** @const */
tsickle_declare_module.hammerjs = {};

/* TODO: ExportAssignment in tsickle_declare_module.hammerjs */
/**
 * @record
 * @struct
 */
function HammerStatic() {}

/* TODO: ConstructSignature:  */
 /** @type {!HammerDefaults} */
HammerStatic.prototype.defaults;
 /** @type {number} */
HammerStatic.prototype.VERSION;
 /** @type {number} */
HammerStatic.prototype.INPUT_START;
 /** @type {number} */
HammerStatic.prototype.INPUT_MOVE;
 /** @type {number} */
HammerStatic.prototype.INPUT_END;
 /** @type {number} */
HammerStatic.prototype.INPUT_CANCEL;
 /** @type {number} */
HammerStatic.prototype.STATE_POSSIBLE;
 /** @type {number} */
HammerStatic.prototype.STATE_BEGAN;
 /** @type {number} */
HammerStatic.prototype.STATE_CHANGED;
 /** @type {number} */
HammerStatic.prototype.STATE_ENDED;
 /** @type {number} */
HammerStatic.prototype.STATE_RECOGNIZED;
 /** @type {number} */
HammerStatic.prototype.STATE_CANCELLED;
 /** @type {number} */
HammerStatic.prototype.STATE_FAILED;
 /** @type {number} */
HammerStatic.prototype.DIRECTION_NONE;
 /** @type {number} */
HammerStatic.prototype.DIRECTION_LEFT;
 /** @type {number} */
HammerStatic.prototype.DIRECTION_RIGHT;
 /** @type {number} */
HammerStatic.prototype.DIRECTION_UP;
 /** @type {number} */
HammerStatic.prototype.DIRECTION_DOWN;
 /** @type {number} */
HammerStatic.prototype.DIRECTION_HORIZONTAL;
 /** @type {number} */
HammerStatic.prototype.DIRECTION_VERTICAL;
 /** @type {number} */
HammerStatic.prototype.DIRECTION_ALL;
 /** @type {!HammerManagerConstructor} */
HammerStatic.prototype.Manager;
 /** @type {!HammerInput} */
HammerStatic.prototype.Input;
 /** @type {!TouchAction} */
HammerStatic.prototype.TouchAction;
 /** @type {!TouchInput} */
HammerStatic.prototype.TouchInput;
 /** @type {!MouseInput} */
HammerStatic.prototype.MouseInput;
 /** @type {!PointerEventInput} */
HammerStatic.prototype.PointerEventInput;
 /** @type {!TouchMouseInput} */
HammerStatic.prototype.TouchMouseInput;
 /** @type {!SingleTouchInput} */
HammerStatic.prototype.SingleTouchInput;
 /** @type {!RecognizerStatic} */
HammerStatic.prototype.Recognizer;
 /** @type {!AttrRecognizerStatic} */
HammerStatic.prototype.AttrRecognizer;
 /** @type {!TapRecognizerStatic} */
HammerStatic.prototype.Tap;
 /** @type {!PanRecognizerStatic} */
HammerStatic.prototype.Pan;
 /** @type {!SwipeRecognizerStatic} */
HammerStatic.prototype.Swipe;
 /** @type {!PinchRecognizerStatic} */
HammerStatic.prototype.Pinch;
 /** @type {!RotateRecognizerStatic} */
HammerStatic.prototype.Rotate;
 /** @type {!PressRecognizerStatic} */
HammerStatic.prototype.Press;

/**
 * @param {!EventTarget} target
 * @param {string} types
 * @param {!Function} handler
 * @return {void}
 */
HammerStatic.prototype.on = function(target, types, handler) {};

/**
 * @param {!EventTarget} target
 * @param {string} types
 * @param {!Function} handler
 * @return {void}
 */
HammerStatic.prototype.off = function(target, types, handler) {};

/**
 * @param {?} obj
 * @param {!Function} iterator
 * @param {?} context
 * @return {void}
 */
HammerStatic.prototype.each = function(obj, iterator, context) {};

/**
 * @param {?} dest
 * @param {?} src
 * @return {?}
 */
HammerStatic.prototype.merge = function(dest, src) {};

/**
 * @param {?} dest
 * @param {?} src
 * @param {boolean} merge
 * @return {?}
 */
HammerStatic.prototype.extend = function(dest, src, merge) {};

/**
 * @param {!Function} child
 * @param {!Function} base
 * @param {?} properties
 * @return {?}
 */
HammerStatic.prototype.inherit = function(child, base, properties) {};

/**
 * @param {!Function} fn
 * @param {?} context
 * @return {!Function}
 */
HammerStatic.prototype.bindFn = function(fn, context) {};

/**
 * @param {?} obj
 * @param {string} property
 * @return {string}
 */
HammerStatic.prototype.prefixed = function(obj, property) {};

/** @typedef {!Array<?>} */
var RecognizerTuple;
/**
 * @extends {HammerOptions}
 * @record
 * @struct
 */
function HammerDefaults() {}
 /** @type {boolean} */
HammerDefaults.prototype.domEvents;
 /** @type {boolean} */
HammerDefaults.prototype.enable;
 /** @type {!Array<!Array<?>>} */
HammerDefaults.prototype.preset;
 /** @type {string} */
HammerDefaults.prototype.touchAction;
 /** @type {!CssProps} */
HammerDefaults.prototype.cssProps;
 /** @type {!HammerInput} */
HammerDefaults.prototype.inputClass;
 /** @type {!EventTarget} */
HammerDefaults.prototype.inputTarget;
/**
 * @record
 * @struct
 */
function CssProps() {}
 /** @type {string} */
CssProps.prototype.contentZooming;
 /** @type {string} */
CssProps.prototype.tapHighlightColor;
 /** @type {string} */
CssProps.prototype.touchCallout;
 /** @type {string} */
CssProps.prototype.touchSelect;
 /** @type {string} */
CssProps.prototype.userDrag;
 /** @type {string} */
CssProps.prototype.userSelect;
/**
 * @record
 * @struct
 */
function HammerOptions() {}
 /** @type {!CssProps} */
HammerOptions.prototype.cssProps;
 /** @type {boolean} */
HammerOptions.prototype.domEvents;
 /** @type {(boolean|function(!HammerManager): boolean)} */
HammerOptions.prototype.enable;
 /** @type {!Array<!Array<?>>} */
HammerOptions.prototype.preset;
 /** @type {string} */
HammerOptions.prototype.touchAction;
 /** @type {!Array<!Array<?>>} */
HammerOptions.prototype.recognizers;
 /** @type {!HammerInput} */
HammerOptions.prototype.inputClass;
 /** @type {!EventTarget} */
HammerOptions.prototype.inputTarget;
/**
 * @record
 * @struct
 */
function HammerManagerConstructor() {}

/* TODO: ConstructSignature:  */
/**
 * @record
 * @struct
 */
function HammerListener() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function HammerManager() {}

/**
 * @param {!Recognizer|!Array<!Recognizer>} recogniser
 * @return {!Recognizer|!HammerManager}
 */
HammerManager.prototype.add = function(recogniser) {};

/**
 * @return {void}
 */
HammerManager.prototype.destroy = function() {};

/**
 * @param {string} event
 * @param {?} data
 * @return {void}
 */
HammerManager.prototype.emit = function(event, data) {};

/**
 * @param {!Recognizer|string} recogniser
 * @return {!Recognizer}
 */
HammerManager.prototype.get = function(recogniser) {};

/**
 * @param {string} events
 * @param {!HammerListener=} handler
 * @return {void}
 */
HammerManager.prototype.off = function(events, handler) {};

/**
 * @param {string} events
 * @param {!HammerListener} handler
 * @return {void}
 */
HammerManager.prototype.on = function(events, handler) {};

/**
 * @param {?} inputData
 * @return {void}
 */
HammerManager.prototype.recognize = function(inputData) {};

/**
 * @param {!Recognizer|string} recogniser
 * @return {!HammerManager}
 */
HammerManager.prototype.remove = function(recogniser) {};

/**
 * @param {!HammerOptions} options
 * @return {!HammerManager}
 */
HammerManager.prototype.set = function(options) {};

/**
 * @param {boolean} force
 * @return {void}
 */
HammerManager.prototype.stop = function(force) {};

/**
 * @constructor
 * @struct
 * @param {!HammerManager} manager
 * @param {!Function} callback
 */
function HammerInput(manager, callback) {}
 /** @type {string} */
HammerInput.prototype.type;
 /** @type {number} */
HammerInput.prototype.deltaX;
 /** @type {number} */
HammerInput.prototype.deltaY;
 /** @type {number} */
HammerInput.prototype.deltaTime;
 /** @type {number} */
HammerInput.prototype.distance;
 /** @type {number} */
HammerInput.prototype.angle;
 /** @type {number} */
HammerInput.prototype.velocityX;
 /** @type {number} */
HammerInput.prototype.velocityY;
 /** @type {number} */
HammerInput.prototype.velocity;
 /** @type {number} */
HammerInput.prototype.direction;
 /** @type {number} */
HammerInput.prototype.offsetDirection;
 /** @type {number} */
HammerInput.prototype.scale;
 /** @type {number} */
HammerInput.prototype.rotation;
 /** @type {!HammerPoint} */
HammerInput.prototype.center;
 /** @type {(!TouchEvent|!MouseEvent|!PointerEvent)} */
HammerInput.prototype.srcEvent;
 /** @type {!HTMLElement} */
HammerInput.prototype.target;
 /** @type {string} */
HammerInput.prototype.pointerType;
 /** @type {number} */
HammerInput.prototype.eventType;
 /** @type {boolean} */
HammerInput.prototype.isFirst;
 /** @type {boolean} */
HammerInput.prototype.isFinal;
 /** @type {!Array<?>} */
HammerInput.prototype.pointers;
 /** @type {!Array<?>} */
HammerInput.prototype.changedPointers;
 /** @type {!Function} */
HammerInput.prototype.preventDefault;

/**
 * @return {void}
 */
HammerInput.prototype.destroy = function() {};

/**
 * @return {void}
 */
HammerInput.prototype.handler = function() {};

/**
 * @return {void}
 */
HammerInput.prototype.init = function() {};

/**
 * @constructor
 * @struct
 * @param {!HammerManager} manager
 * @param {!Function} callback
 */
function MouseInput(manager, callback) {}

/**
 * @constructor
 * @struct
 * @param {!HammerManager} manager
 * @param {!Function} callback
 */
function PointerEventInput(manager, callback) {}

/**
 * @constructor
 * @struct
 * @param {!HammerManager} manager
 * @param {!Function} callback
 */
function SingleTouchInput(manager, callback) {}

/**
 * @constructor
 * @struct
 * @param {!HammerManager} manager
 * @param {!Function} callback
 */
function TouchInput(manager, callback) {}

/**
 * @constructor
 * @struct
 * @param {!HammerManager} manager
 * @param {!Function} callback
 */
function TouchMouseInput(manager, callback) {}
/**
 * @record
 * @struct
 */
function RecognizerOptions() {}
 /** @type {number} */
RecognizerOptions.prototype.direction;
 /** @type {(boolean|function(!Recognizer, !HammerInput): boolean)} */
RecognizerOptions.prototype.enable;
 /** @type {string} */
RecognizerOptions.prototype.event;
 /** @type {number} */
RecognizerOptions.prototype.interval;
 /** @type {number} */
RecognizerOptions.prototype.pointers;
 /** @type {number} */
RecognizerOptions.prototype.posThreshold;
 /** @type {number} */
RecognizerOptions.prototype.taps;
 /** @type {number} */
RecognizerOptions.prototype.threshold;
 /** @type {number} */
RecognizerOptions.prototype.time;
 /** @type {number} */
RecognizerOptions.prototype.velocity;
/**
 * @record
 * @struct
 */
function RecognizerStatic() {}

/* TODO: ConstructSignature:  */
/**
 * @record
 * @struct
 */
function Recognizer() {}
 /** @type {?} */
Recognizer.prototype.defaults;

/**
 * @return {boolean}
 */
Recognizer.prototype.canEmit = function() {};

/**
 * @param {!Recognizer} otherRecognizer
 * @return {boolean}
 */
Recognizer.prototype.canRecognizeWith = function(otherRecognizer) {};

/**
 * @param {!Recognizer|string} otherRecognizer
 * @return {!Recognizer}
 */
Recognizer.prototype.dropRecognizeWith = function(otherRecognizer) {};

/**
 * @param {!Recognizer|string} otherRecognizer
 * @return {!Recognizer}
 */
Recognizer.prototype.dropRequireFailure = function(otherRecognizer) {};

/**
 * @param {!HammerInput} input
 * @return {void}
 */
Recognizer.prototype.emit = function(input) {};

/**
 * @return {!Array<?>}
 */
Recognizer.prototype.getTouchAction = function() {};

/**
 * @return {boolean}
 */
Recognizer.prototype.hasRequireFailures = function() {};

/**
 * @param {!HammerInput} inputData
 * @return {string}
 */
Recognizer.prototype.process = function(inputData) {};

/**
 * @param {!HammerInput} inputData
 * @return {void}
 */
Recognizer.prototype.recognize = function(inputData) {};

/**
 * @param {!Recognizer|string} otherRecognizer
 * @return {!Recognizer}
 */
Recognizer.prototype.recognizeWith = function(otherRecognizer) {};

/**
 * @param {!Recognizer|string} otherRecognizer
 * @return {!Recognizer}
 */
Recognizer.prototype.requireFailure = function(otherRecognizer) {};

/**
 * @return {void}
 */
Recognizer.prototype.reset = function() {};

/**
 * @param {!RecognizerOptions=} options
 * @return {!Recognizer}
 */
Recognizer.prototype.set = function(options) {};

/**
 * @param {!HammerInput} input
 * @return {void}
 */
Recognizer.prototype.tryEmit = function(input) {};
/**
 * @record
 * @struct
 */
function AttrRecognizerStatic() {}

/**
 * @param {!HammerInput} input
 * @return {boolean}
 */
AttrRecognizerStatic.prototype.attrTest = function(input) {};

/**
 * @param {!HammerInput} input
 * @return {?}
 */
AttrRecognizerStatic.prototype.process = function(input) {};
/**
 * @extends {Recognizer}
 * @record
 * @struct
 */
function AttrRecognizer() {}

/* TODO: ConstructSignature:  */
/**
 * @record
 * @struct
 */
function PanRecognizerStatic() {}

/* TODO: ConstructSignature:  */
/**
 * @extends {AttrRecognizer}
 * @record
 * @struct
 */
function PanRecognizer() {}
/**
 * @record
 * @struct
 */
function PinchRecognizerStatic() {}

/* TODO: ConstructSignature:  */
/**
 * @extends {AttrRecognizer}
 * @record
 * @struct
 */
function PinchRecognizer() {}
/**
 * @record
 * @struct
 */
function PressRecognizerStatic() {}

/* TODO: ConstructSignature:  */
/**
 * @extends {AttrRecognizer}
 * @record
 * @struct
 */
function PressRecognizer() {}
/**
 * @record
 * @struct
 */
function RotateRecognizerStatic() {}

/* TODO: ConstructSignature:  */
/**
 * @extends {AttrRecognizer}
 * @record
 * @struct
 */
function RotateRecognizer() {}
/**
 * @record
 * @struct
 */
function SwipeRecognizerStatic() {}

/* TODO: ConstructSignature:  */
/**
 * @extends {AttrRecognizer}
 * @record
 * @struct
 */
function SwipeRecognizer() {}
/**
 * @record
 * @struct
 */
function TapRecognizerStatic() {}

/* TODO: ConstructSignature:  */
/**
 * @extends {AttrRecognizer}
 * @record
 * @struct
 */
function TapRecognizer() {}

/**
 * @constructor
 * @struct
 * @param {!HammerManager} manager
 * @param {string} value
 */
function TouchAction(manager, value) {}

/**
 * @return {string}
 */
TouchAction.prototype.compute = function() {};

/**
 * @param {!HammerInput} input
 * @return {void}
 */
TouchAction.prototype.preventDefaults = function(input) {};

/**
 * @param {?} srcEvent
 * @return {void}
 */
TouchAction.prototype.preventSrc = function(srcEvent) {};

/**
 * @param {string} value
 * @return {void}
 */
TouchAction.prototype.set = function(value) {};

/**
 * @return {void}
 */
TouchAction.prototype.update = function() {};
/**
 * @record
 * @struct
 */
function HammerPoint() {}
 /** @type {number} */
HammerPoint.prototype.x;
 /** @type {number} */
HammerPoint.prototype.y;
