/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/angular-storage/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "angular"
/** @const */
tsickle_declare_module.angular.a0 = {};
/** @const */
tsickle_declare_module.angular.a0.storage = {};
/**
 * @extends {a0.storage.INamespacedStoreService}
 * @record
 * @struct
 */
tsickle_declare_module.angular.a0.storage.IStoreService = function() {};

/**
 * Returns a namespaced store
 * 
 * @param {string} namespace
 * @param {string=} storage
 * @param {string=} delimiter
 * @return {!a0.storage.INamespacedStoreService}
 */
tsickle_declare_module.angular.a0.storage.IStoreService.prototype.getNamespacedStore = function(namespace, storage, delimiter) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.a0.storage.INamespacedStoreService = function() {};

/**
 * Sets a new value to the storage with the key name. It can be any object.
 * 
 * @param {string} name
 * @param {?} value - The value to store
 * @return {void}
 */
tsickle_declare_module.angular.a0.storage.INamespacedStoreService.prototype.set = function(name, value) {};

/**
 * Returns the saved value with they key name.
 * 
 * @param {string} name
 * @return {?} The saved value; if you saved an object, you get an object
 */
tsickle_declare_module.angular.a0.storage.INamespacedStoreService.prototype.get = function(name) {};

/**
 * Deletes the saved value with the key name
 * 
 * @param {string} name
 * @return {void}
 */
tsickle_declare_module.angular.a0.storage.INamespacedStoreService.prototype.remove = function(name) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.a0.storage.IStoreProvider = function() {};

/**
 * Sets the storage.
 * 
 * @param {string} storage
 * @return {void}
 */
tsickle_declare_module.angular.a0.storage.IStoreProvider.prototype.setStore = function(storage) {};
