/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/mongoose v3/index.d.ts:
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "mongoose"
/** @const */
tsickle_declare_module.mongoose = {};

/**
 * @param {string} uri
 * @param {!ConnectionOptions=} options
 * @param {function(?): void=} callback
 * @return {!Mongoose}
 */
tsickle_declare_module.mongoose.connect = function(uri, options, callback) {};

/**
 * @param {string=} uri_or_host
 * @param {!ConnectionOptions|string=} options_or_database_name
 * @param {number=} port
 * @param {!ConnectionOptions=} options
 * @return {!Connection}
 */
tsickle_declare_module.mongoose.createConnection = function(uri_or_host, options_or_database_name, port, options) {};

/**
 * @param {function(?): void=} callback
 * @return {!Mongoose}
 */
tsickle_declare_module.mongoose.disconnect = function(callback) {};

/**
 * @template T
 * @param {string} name
 * @param {!Schema=} schema
 * @param {string=} collection
 * @param {boolean=} skipInit
 * @return {!Model<T>}
 */
tsickle_declare_module.mongoose.model = function(name, schema, collection, skipInit) {};

/**
 * @return {!Array<string>}
 */
tsickle_declare_module.mongoose.modelNames = function() {};

/**
 * @param {function(!Schema, !Object): void} plugin
 * @param {!Object=} options
 * @return {!Mongoose}
 */
tsickle_declare_module.mongoose.plugin = function(plugin, options) {};

/**
 * @param {string} key
 * @return {?}
 */
tsickle_declare_module.mongoose.get = function(key) {};

/**
 * @param {string} key
 * @param {?} value
 * @return {void}
 */
tsickle_declare_module.mongoose.set = function(key, value) {};
 /** @type {?} */
tsickle_declare_module.mongoose.mongo;
 /** @type {?} */
tsickle_declare_module.mongoose.mquery;
 /** @type {string} */
tsickle_declare_module.mongoose.version;
 /** @type {!Connection} */
tsickle_declare_module.mongoose.connection;
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.mongoose.Mongoose = function() {};
 /** @type {?} */
tsickle_declare_module.mongoose.Mongoose.prototype.mongo;
 /** @type {?} */
tsickle_declare_module.mongoose.Mongoose.prototype.mquery;
 /** @type {string} */
tsickle_declare_module.mongoose.Mongoose.prototype.version;
 /** @type {!Connection} */
tsickle_declare_module.mongoose.Mongoose.prototype.connection;
 /** @type {?} */
tsickle_declare_module.mongoose.Mongoose.prototype.Promise;

/**
 * @param {string} uri
 * @param {!ConnectOpenOptionsBase=} options
 * @param {function(?): void=} callback
 * @return {!Mongoose}
 */
tsickle_declare_module.mongoose.Mongoose.prototype.connect = function(uri, options, callback) {};

/**
 * @param {string=} uri_or_host
 * @param {!Object|string=} options_or_database_name
 * @param {number=} port
 * @param {!ConnectOpenOptionsBase=} options
 * @return {!Connection}
 */
tsickle_declare_module.mongoose.Mongoose.prototype.createConnection = function(uri_or_host, options_or_database_name, port, options) {};

/**
 * @param {function(?): void=} callback
 * @return {!Mongoose}
 */
tsickle_declare_module.mongoose.Mongoose.prototype.disconnect = function(callback) {};

/**
 * @param {string} key
 * @return {?}
 */
tsickle_declare_module.mongoose.Mongoose.prototype.get = function(key) {};

/**
 * @template T
 * @param {string} name
 * @param {!Schema=} schema
 * @param {string=} collection
 * @param {boolean=} skipInit
 * @return {!Model<T>}
 */
tsickle_declare_module.mongoose.Mongoose.prototype.model = function(name, schema, collection, skipInit) {};

/**
 * @return {!Array<string>}
 */
tsickle_declare_module.mongoose.Mongoose.prototype.modelNames = function() {};

/**
 * @param {function(!Schema, !Object): void} plugin
 * @param {!Object=} options
 * @return {!Mongoose}
 */
tsickle_declare_module.mongoose.Mongoose.prototype.plugin = function(plugin, options) {};

/**
 * @param {string} key
 * @param {?} value
 * @return {void}
 */
tsickle_declare_module.mongoose.Mongoose.prototype.set = function(key, value) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.Connection = function() {};
 /** @type {?} */
tsickle_declare_module.mongoose.Connection.prototype.db;
 /** @type {!Object<string,!Collection>} */
tsickle_declare_module.mongoose.Connection.prototype.collections;
 /** @type {number} */
tsickle_declare_module.mongoose.Connection.prototype.readyState;

/**
 * @param {!Mongoose} base
 * @return {!Connection}
 */
tsickle_declare_module.mongoose.Connection.prototype.constructor = function(base) {};

/**
 * @param {function(?): void=} callback
 * @return {!Connection}
 */
tsickle_declare_module.mongoose.Connection.prototype.close = function(callback) {};

/**
 * @param {string} name
 * @param {!Object=} options
 * @return {!Collection}
 */
tsickle_declare_module.mongoose.Connection.prototype.collection = function(name, options) {};

/**
 * @template T
 * @param {string} name
 * @param {!Schema=} schema
 * @param {string=} collection
 * @return {!Model<T>}
 */
tsickle_declare_module.mongoose.Connection.prototype.model = function(name, schema, collection) {};

/**
 * @return {!Array<string>}
 */
tsickle_declare_module.mongoose.Connection.prototype.modelNames = function() {};

/**
 * @param {string} host
 * @param {string=} database
 * @param {number=} port
 * @param {!OpenSetConnectionOptions=} options
 * @param {function(?): void=} callback
 * @return {!Connection}
 */
tsickle_declare_module.mongoose.Connection.prototype.open = function(host, database, port, options, callback) {};

/**
 * @param {string} uris
 * @param {string=} database
 * @param {!OpenSetConnectionOptions=} options
 * @param {function(?): void=} callback
 * @return {!Connection}
 */
tsickle_declare_module.mongoose.Connection.prototype.openSet = function(uris, database, options, callback) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.ConnectOpenOptionsBase = function() {};
 /** @type {?} */
tsickle_declare_module.mongoose.ConnectOpenOptionsBase.prototype.db;
 /** @type {?} */
tsickle_declare_module.mongoose.ConnectOpenOptionsBase.prototype.server;
 /** @type {?} */
tsickle_declare_module.mongoose.ConnectOpenOptionsBase.prototype.replset;
 /** @type {string} */
tsickle_declare_module.mongoose.ConnectOpenOptionsBase.prototype.user;
 /** @type {string} */
tsickle_declare_module.mongoose.ConnectOpenOptionsBase.prototype.pass;
 /** @type {?} */
tsickle_declare_module.mongoose.ConnectOpenOptionsBase.prototype.auth;
 /** @type {boolean} */
tsickle_declare_module.mongoose.ConnectOpenOptionsBase.prototype.useMongoClient;
/**
 * @extends {ConnectOpenOptionsBase}
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.ConnectionOptions = function() {};
 /** @type {!MongosOptions} */
tsickle_declare_module.mongoose.ConnectionOptions.prototype.mongos;
/**
 * @extends {ConnectOpenOptionsBase}
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.OpenSetConnectionOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.mongoose.OpenSetConnectionOptions.prototype.mongos;
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.MongosOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.mongoose.MongosOptions.prototype.ha;
 /** @type {number} */
tsickle_declare_module.mongoose.MongosOptions.prototype.haInterval;
 /** @type {number} */
tsickle_declare_module.mongoose.MongosOptions.prototype.poolSize;
 /** @type {boolean} */
tsickle_declare_module.mongoose.MongosOptions.prototype.ssl;
 /** @type {boolean} */
tsickle_declare_module.mongoose.MongosOptions.prototype.sslValidate;
 /** @type {!Array<(string|?)>} */
tsickle_declare_module.mongoose.MongosOptions.prototype.sslCA;
 /** @type {(string|?)} */
tsickle_declare_module.mongoose.MongosOptions.prototype.sslKey;
 /** @type {(string|?)} */
tsickle_declare_module.mongoose.MongosOptions.prototype.sslPass;
 /** @type {{noDelay: boolean, keepAlive: number, connectionTimeoutMS: number, socketTimeoutMS: number}} */
tsickle_declare_module.mongoose.MongosOptions.prototype.socketOptions;
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.Collection = function() {};

/**
 * @param {!CollectionOptions=} options
 * @return {!OrderedBulkOperation}
 */
tsickle_declare_module.mongoose.Collection.prototype.initializeOrderedBulkOp = function(options) {};

/**
 * @param {!CollectionOptions=} options
 * @return {!UnorderedBulkOperation}
 */
tsickle_declare_module.mongoose.Collection.prototype.initializeUnorderedBulkOp = function(options) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.CollectionOptions = function() {};
 /** @type {(string|number)} */
tsickle_declare_module.mongoose.CollectionOptions.prototype.w;
 /** @type {number} */
tsickle_declare_module.mongoose.CollectionOptions.prototype.wtimeout;
 /** @type {boolean} */
tsickle_declare_module.mongoose.CollectionOptions.prototype.j;
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.OrderedBulkOperation = function() {};
 /** @type {number} */
tsickle_declare_module.mongoose.OrderedBulkOperation.prototype.length;

/**
 * @param {!MongoCallback<!BulkWriteResult>|!FSyncOptions=} callback_or_options
 * @param {!MongoCallback<!BulkWriteResult>=} callback
 * @return {void|!Promise<!BulkWriteResult>}
 */
tsickle_declare_module.mongoose.OrderedBulkOperation.prototype.execute = function(callback_or_options, callback) {};

/**
 * @param {!Object} selector
 * @return {!FindOperatorsOrdered}
 */
tsickle_declare_module.mongoose.OrderedBulkOperation.prototype.find = function(selector) {};

/**
 * @param {!Object} doc
 * @return {!OrderedBulkOperation}
 */
tsickle_declare_module.mongoose.OrderedBulkOperation.prototype.insert = function(doc) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.UnorderedBulkOperation = function() {};

/**
 * @param {!MongoCallback<!BulkWriteResult>|!FSyncOptions=} callback_or_options
 * @param {!MongoCallback<!BulkWriteResult>=} callback
 * @return {void|!Promise<!BulkWriteResult>}
 */
tsickle_declare_module.mongoose.UnorderedBulkOperation.prototype.execute = function(callback_or_options, callback) {};

/**
 * @param {!Object} selector
 * @return {!FindOperatorsUnordered}
 */
tsickle_declare_module.mongoose.UnorderedBulkOperation.prototype.find = function(selector) {};

/**
 * @param {!Object} doc
 * @return {!UnorderedBulkOperation}
 */
tsickle_declare_module.mongoose.UnorderedBulkOperation.prototype.insert = function(doc) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.MongoCallback = function() {};

/* TODO: CallSignature: tsickle_declare_module.mongoose */

/**
 * @constructor
 * @struct
 * @param {string} message
 */
tsickle_declare_module.mongoose.MongoError = function(message) {};

/**
 * @param {!Object} options
 * @return {!MongoError}
 */
tsickle_declare_module.mongoose.MongoError.create = function(options) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.BulkWriteResult = function() {};
 /** @type {number} */
tsickle_declare_module.mongoose.BulkWriteResult.prototype.ok;
 /** @type {number} */
tsickle_declare_module.mongoose.BulkWriteResult.prototype.nInserted;
 /** @type {number} */
tsickle_declare_module.mongoose.BulkWriteResult.prototype.nUpdated;
 /** @type {number} */
tsickle_declare_module.mongoose.BulkWriteResult.prototype.nUpserted;
 /** @type {number} */
tsickle_declare_module.mongoose.BulkWriteResult.prototype.nModified;
 /** @type {number} */
tsickle_declare_module.mongoose.BulkWriteResult.prototype.nRemoved;

/**
 * @return {!Array<!Object>}
 */
tsickle_declare_module.mongoose.BulkWriteResult.prototype.getInsertedIds = function() {};

/**
 * @return {!Object}
 */
tsickle_declare_module.mongoose.BulkWriteResult.prototype.getLastOp = function() {};

/**
 * @return {!Object}
 */
tsickle_declare_module.mongoose.BulkWriteResult.prototype.getRawResponse = function() {};

/**
 * @param {number} index
 * @return {!Object}
 */
tsickle_declare_module.mongoose.BulkWriteResult.prototype.getUpsertedIdAt = function(index) {};

/**
 * @return {!Array<!Object>}
 */
tsickle_declare_module.mongoose.BulkWriteResult.prototype.getUpsertedIds = function() {};

/**
 * @return {!WriteConcernError}
 */
tsickle_declare_module.mongoose.BulkWriteResult.prototype.getWriteConcernError = function() {};

/**
 * @param {number} index
 * @return {!WriteError}
 */
tsickle_declare_module.mongoose.BulkWriteResult.prototype.getWriteErrorAt = function(index) {};

/**
 * @return {number}
 */
tsickle_declare_module.mongoose.BulkWriteResult.prototype.getWriteErrorCount = function() {};

/**
 * @return {!Array<!Object>}
 */
tsickle_declare_module.mongoose.BulkWriteResult.prototype.getWriteErrors = function() {};

/**
 * @return {boolean}
 */
tsickle_declare_module.mongoose.BulkWriteResult.prototype.hasWriteErrors = function() {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.WriteError = function() {};
 /** @type {number} */
tsickle_declare_module.mongoose.WriteError.prototype.code;
 /** @type {number} */
tsickle_declare_module.mongoose.WriteError.prototype.index;
 /** @type {string} */
tsickle_declare_module.mongoose.WriteError.prototype.errmsg;
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.WriteConcernError = function() {};
 /** @type {number} */
tsickle_declare_module.mongoose.WriteConcernError.prototype.code;
 /** @type {string} */
tsickle_declare_module.mongoose.WriteConcernError.prototype.errmsg;
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.FSyncOptions = function() {};
 /** @type {(string|number)} */
tsickle_declare_module.mongoose.FSyncOptions.prototype.w;
 /** @type {number} */
tsickle_declare_module.mongoose.FSyncOptions.prototype.wtimeout;
 /** @type {boolean} */
tsickle_declare_module.mongoose.FSyncOptions.prototype.j;
 /** @type {boolean} */
tsickle_declare_module.mongoose.FSyncOptions.prototype.fsync;
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.FindOperatorsOrdered = function() {};

/**
 * @return {!OrderedBulkOperation}
 */
tsickle_declare_module.mongoose.FindOperatorsOrdered.prototype.delete = function() {};

/**
 * @return {!OrderedBulkOperation}
 */
tsickle_declare_module.mongoose.FindOperatorsOrdered.prototype.deleteOne = function() {};

/**
 * @param {!Object} doc
 * @return {!OrderedBulkOperation}
 */
tsickle_declare_module.mongoose.FindOperatorsOrdered.prototype.replaceOne = function(doc) {};

/**
 * @param {!Object} doc
 * @return {!OrderedBulkOperation}
 */
tsickle_declare_module.mongoose.FindOperatorsOrdered.prototype.update = function(doc) {};

/**
 * @param {!Object} doc
 * @return {!OrderedBulkOperation}
 */
tsickle_declare_module.mongoose.FindOperatorsOrdered.prototype.updateOne = function(doc) {};

/**
 * @return {!FindOperatorsOrdered}
 */
tsickle_declare_module.mongoose.FindOperatorsOrdered.prototype.upsert = function() {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.FindOperatorsUnordered = function() {};
 /** @type {number} */
tsickle_declare_module.mongoose.FindOperatorsUnordered.prototype.length;

/**
 * @return {!UnorderedBulkOperation}
 */
tsickle_declare_module.mongoose.FindOperatorsUnordered.prototype.remove = function() {};

/**
 * @return {!UnorderedBulkOperation}
 */
tsickle_declare_module.mongoose.FindOperatorsUnordered.prototype.removeOne = function() {};

/**
 * @param {!Object} doc
 * @return {!UnorderedBulkOperation}
 */
tsickle_declare_module.mongoose.FindOperatorsUnordered.prototype.replaceOne = function(doc) {};

/**
 * @param {!Object} doc
 * @return {!UnorderedBulkOperation}
 */
tsickle_declare_module.mongoose.FindOperatorsUnordered.prototype.update = function(doc) {};

/**
 * @param {!Object} doc
 * @return {!UnorderedBulkOperation}
 */
tsickle_declare_module.mongoose.FindOperatorsUnordered.prototype.updateOne = function(doc) {};

/**
 * @return {!FindOperatorsUnordered}
 */
tsickle_declare_module.mongoose.FindOperatorsUnordered.prototype.upsert = function() {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.mongoose.SchemaType = function() {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.mongoose.VirtualType = function() {};

/**
 * @param {!Function} fn
 * @return {!VirtualType}
 */
tsickle_declare_module.mongoose.VirtualType.prototype.get = function(fn) {};

/**
 * @param {!Function} fn
 * @return {!VirtualType}
 */
tsickle_declare_module.mongoose.VirtualType.prototype.set = function(fn) {};
/** @const */
tsickle_declare_module.mongoose.Types = {};

/**
 * @constructor
 * @struct
 * @param {(string|number)=} id
 */
tsickle_declare_module.mongoose.Types.ObjectId = function(id) {};

/**
 * @return {string}
 */
tsickle_declare_module.mongoose.Types.ObjectId.prototype.toHexString = function() {};

/**
 * @param {!Types.ObjectId} other
 * @return {boolean}
 */
tsickle_declare_module.mongoose.Types.ObjectId.prototype.equals = function(other) {};

/**
 * @return {!Date}
 */
tsickle_declare_module.mongoose.Types.ObjectId.prototype.getTimestamp = function() {};

/**
 * @return {boolean}
 */
tsickle_declare_module.mongoose.Types.ObjectId.prototype.isValid = function() {};

/**
 * @param {number} time
 * @return {!Types.ObjectId}
 */
tsickle_declare_module.mongoose.Types.ObjectId.createFromTime = function(time) {};

/**
 * @param {string} hexString
 * @return {!Types.ObjectId}
 */
tsickle_declare_module.mongoose.Types.ObjectId.createFromHexString = function(hexString) {};

/**
 * @param {(string|number)=} id
 * @return {boolean}
 */
tsickle_declare_module.mongoose.Types.ObjectId.isValid = function(id) {};

/**
 * @constructor
 * @struct
 * @param {!Object=} schema
 * @param {!Object=} options
 */
tsickle_declare_module.mongoose.Schema = function(schema, options) {};
 /** @type {{String: !String, ObjectId: !Types.ObjectId, OId: !Types.ObjectId, Mixed: ?}} */
tsickle_declare_module.mongoose.Schema.Types;
 /** @type {?} */
tsickle_declare_module.mongoose.Schema.prototype.methods;
 /** @type {?} */
tsickle_declare_module.mongoose.Schema.prototype.statics;

/**
 * @param {!Object} obj
 * @param {string=} prefix
 * @return {void}
 */
tsickle_declare_module.mongoose.Schema.prototype.add = function(obj, prefix) {};

/**
 * @param {function(string, ?): void} fn
 * @return {!Schema}
 */
tsickle_declare_module.mongoose.Schema.prototype.eachPath = function(fn) {};

/**
 * @param {string} key
 * @return {?}
 */
tsickle_declare_module.mongoose.Schema.prototype.get = function(key) {};

/**
 * @param {!Object} fields
 * @param {!Object=} options
 * @return {!Schema}
 */
tsickle_declare_module.mongoose.Schema.prototype.index = function(fields, options) {};

/**
 * @return {void}
 */
tsickle_declare_module.mongoose.Schema.prototype.indexes = function() {};

/**
 * @param {string|!Object} name_or_method
 * @param {!Function=} fn
 * @return {!Schema}
 */
tsickle_declare_module.mongoose.Schema.prototype.method = function(name_or_method, fn) {};

/**
 * @param {string} path
 * @param {?=} constructor
 * @return {?|!Schema}
 */
tsickle_declare_module.mongoose.Schema.prototype.path = function(path, constructor) {};

/**
 * @param {string} path
 * @return {string}
 */
tsickle_declare_module.mongoose.Schema.prototype.pathType = function(path) {};

/**
 * @param {function(!Schema, !Object): void} plugin
 * @param {!Object=} options
 * @return {!Schema}
 */
tsickle_declare_module.mongoose.Schema.prototype.plugin = function(plugin, options) {};

/**
 * @param {string} method
 * @param {!HookSyncCallback|boolean} fn_or_isAsync
 * @param {!HookErrorCallback|!HookAsyncCallback=} errorCb_or_fn
 * @param {!HookErrorCallback=} errorCb
 * @return {!Schema}
 */
tsickle_declare_module.mongoose.Schema.prototype.pre = function(method, fn_or_isAsync, errorCb_or_fn, errorCb) {};

/**
 * @param {string} method
 * @param {function(!Document, !HookNextFunction): ?} fn
 * @return {!Schema}
 */
tsickle_declare_module.mongoose.Schema.prototype.post = function(method, fn) {};

/**
 * @return {!Array<string>}
 */
tsickle_declare_module.mongoose.Schema.prototype.requiredPaths = function() {};

/**
 * @param {string} key
 * @param {?} value
 * @return {void}
 */
tsickle_declare_module.mongoose.Schema.prototype.set = function(key, value) {};

/**
 * @param {string} name
 * @param {!Function} fn
 * @return {!Schema}
 */
tsickle_declare_module.mongoose.Schema.prototype.static = function(name, fn) {};

/**
 * @param {string} name
 * @param {!Object=} options
 * @return {!VirtualType}
 */
tsickle_declare_module.mongoose.Schema.prototype.virtual = function(name, options) {};

/**
 * @param {string} name
 * @return {!VirtualType}
 */
tsickle_declare_module.mongoose.Schema.prototype.virtualpath = function(name) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.HookSyncCallback = function() {};

/* TODO: CallSignature: tsickle_declare_module.mongoose */
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.HookAsyncCallback = function() {};

/* TODO: CallSignature: tsickle_declare_module.mongoose */
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.HookErrorCallback = function() {};

/* TODO: CallSignature: tsickle_declare_module.mongoose */
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.HookNextFunction = function() {};

/* TODO: CallSignature: tsickle_declare_module.mongoose */

/* TODO: CallSignature: tsickle_declare_module.mongoose */
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.HookDoneFunction = function() {};

/* TODO: CallSignature: tsickle_declare_module.mongoose */

/* TODO: CallSignature: tsickle_declare_module.mongoose */
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.CappedOptions = function() {};
 /** @type {number} */
tsickle_declare_module.mongoose.CappedOptions.prototype.size;
 /** @type {number} */
tsickle_declare_module.mongoose.CappedOptions.prototype.max;
 /** @type {boolean} */
tsickle_declare_module.mongoose.CappedOptions.prototype.autoIndexId;
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.SchemaOption = function() {};
 /** @type {boolean} */
tsickle_declare_module.mongoose.SchemaOption.prototype.autoIndex;
 /** @type {boolean} */
tsickle_declare_module.mongoose.SchemaOption.prototype.bufferCommands;
 /** @type {(number|boolean|!CappedOptions)} */
tsickle_declare_module.mongoose.SchemaOption.prototype.capped;
 /** @type {string} */
tsickle_declare_module.mongoose.SchemaOption.prototype.collection;
 /** @type {boolean} */
tsickle_declare_module.mongoose.SchemaOption.prototype.id;
 /** @type {boolean} */
tsickle_declare_module.mongoose.SchemaOption.prototype._id;
 /** @type {boolean} */
tsickle_declare_module.mongoose.SchemaOption.prototype.minimize;
 /** @type {string} */
tsickle_declare_module.mongoose.SchemaOption.prototype.read;
 /** @type {boolean} */
tsickle_declare_module.mongoose.SchemaOption.prototype.safe;
 /** @type {boolean} */
tsickle_declare_module.mongoose.SchemaOption.prototype.shardKey;
 /** @type {boolean} */
tsickle_declare_module.mongoose.SchemaOption.prototype.strict;
 /** @type {!Object} */
tsickle_declare_module.mongoose.SchemaOption.prototype.toJSON;
 /** @type {!Object} */
tsickle_declare_module.mongoose.SchemaOption.prototype.toObject;
 /** @type {boolean} */
tsickle_declare_module.mongoose.SchemaOption.prototype.versionKey;
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.Model = function() {};

/* TODO: ConstructSignature: tsickle_declare_module.mongoose */
 /** @type {!Mongoose} */
tsickle_declare_module.mongoose.Model.prototype.base;
 /** @type {!Collection} */
tsickle_declare_module.mongoose.Model.prototype.collection;
 /** @type {?} */
tsickle_declare_module.mongoose.Model.prototype.db;
 /** @type {?} */
tsickle_declare_module.mongoose.Model.prototype.discriminators;
 /** @type {string} */
tsickle_declare_module.mongoose.Model.prototype.modelName;
 /** @type {!Schema} */
tsickle_declare_module.mongoose.Model.prototype.schema;

/**
 * @param {...!Object} aggregations_or_aggregation_or_aggregation1
 * @return {!Aggregate<!Array<T>>|!Promise<!Array<T>>}
 */
tsickle_declare_module.mongoose.Model.prototype.aggregate = function(aggregations_or_aggregation_or_aggregation1) {};

/**
 * @param {!Object} conditions
 * @param {function(?, number): void=} callback
 * @return {!Query<number>}
 */
tsickle_declare_module.mongoose.Model.prototype.count = function(conditions, callback) {};

/**
 * @param {!Object} doc_or_doc1
 * @param {function(?, T): void|!Object=} fn_or_doc2
 * @param {function(?, T, T): void|!Object=} fn_or_doc3
 * @param {function(?, T, T, T): void=} fn
 * @return {!Promise<T>|!Promise<!Array<T>>}
 */
tsickle_declare_module.mongoose.Model.prototype.create = function(doc_or_doc1, fn_or_doc2, fn_or_doc3, fn) {};

/**
 * @template U
 * @param {string} name
 * @param {!Schema} schema
 * @return {!Model<U>}
 */
tsickle_declare_module.mongoose.Model.prototype.discriminator = function(name, schema) {};

/**
 * @param {string} field
 * @param {function(?, !Array<T>): void|!Object=} callback_or_conditions
 * @param {function(?, !Array<T>): void=} callback
 * @return {!Query<!Array<T>>}
 */
tsickle_declare_module.mongoose.Model.prototype.distinct = function(field, callback_or_conditions, callback) {};

/**
 * @param {function(?): void} callback
 * @return {!Promise<T>}
 */
tsickle_declare_module.mongoose.Model.prototype.ensureIndexes = function(callback) {};

/**
 * @param {!Object=} cond
 * @param {function(?, !Array<T>): void|!Object=} callback_or_fields
 * @param {function(?, !Array<T>): void|!Object=} callback_or_options
 * @param {function(?, !Array<T>): void=} callback
 * @return {!Query<!Array<T>>}
 */
tsickle_declare_module.mongoose.Model.prototype.find = function(cond, callback_or_fields, callback_or_options, callback) {};

/**
 * @param {string} id
 * @param {function(?, T): void|!Object=} callback_or_fields
 * @param {function(?, T): void|!Object=} callback_or_options
 * @param {function(?, T): void=} callback
 * @return {!Query<T>}
 */
tsickle_declare_module.mongoose.Model.prototype.findById = function(id, callback_or_fields, callback_or_options, callback) {};

/**
 * @param {string} id
 * @param {function(?, T): void|!Object=} callback_or_options
 * @param {function(?, T): void=} callback
 * @return {!Query<T>}
 */
tsickle_declare_module.mongoose.Model.prototype.findByIdAndRemove = function(id, callback_or_options, callback) {};

/**
 * @param {string} id
 * @param {!Object} update
 * @param {function(?, T): void|!FindAndUpdateOption=} callback_or_options
 * @param {function(?, T): void=} callback
 * @return {!Query<T>}
 */
tsickle_declare_module.mongoose.Model.prototype.findByIdAndUpdate = function(id, update, callback_or_options, callback) {};

/**
 * @param {!Object=} cond
 * @param {function(?, T): void|!Object=} callback_or_fields
 * @param {function(?, T): void|!Object=} callback_or_options
 * @param {function(?, T): void=} callback
 * @return {!Query<T>}
 */
tsickle_declare_module.mongoose.Model.prototype.findOne = function(cond, callback_or_fields, callback_or_options, callback) {};

/**
 * @param {!Object} cond
 * @param {function(?, T): void|!Object=} callback_or_options
 * @param {function(?, T): void=} callback
 * @return {!Query<T>}
 */
tsickle_declare_module.mongoose.Model.prototype.findOneAndRemove = function(cond, callback_or_options, callback) {};

/**
 * @param {!Object} cond
 * @param {!Object} update
 * @param {function(?, T): void|!FindAndUpdateOption=} callback_or_options
 * @param {function(?, T): void=} callback
 * @return {!Query<T>}
 */
tsickle_declare_module.mongoose.Model.prototype.findOneAndUpdate = function(cond, update, callback_or_options, callback) {};

/**
 * @param {{type: string, coordinates: !Array<number>}|!Array<number>} point
 * @param {!Object} options
 * @param {function(?, !Array<T>, ?): void=} callback
 * @return {!Query<!Array<T>>}
 */
tsickle_declare_module.mongoose.Model.prototype.geoNear = function(point, options, callback) {};

/**
 * @param {!Object} cond
 * @param {!GeoSearchOption} options
 * @param {function(?, !Array<T>): void=} callback
 * @return {!Query<!Array<T>>}
 */
tsickle_declare_module.mongoose.Model.prototype.geoSearch = function(cond, options, callback) {};

/**
 * @return {T}
 */
tsickle_declare_module.mongoose.Model.prototype.increment = function() {};

/**
 * @template K, V
 * @param {!MapReduceOption<T, K, V>|!MapReduceOption2<T, K, V>} options
 * @param {function(?, !Array<!MapReduceResult<K, V>>): void=} callback
 * @return {!Promise<!Array<!MapReduceResult<K, V>>>}
 */
tsickle_declare_module.mongoose.Model.prototype.mapReduce = function(options, callback) {};

/**
 * @template U
 * @param {string} name
 * @return {!Model<U>}
 */
tsickle_declare_module.mongoose.Model.prototype.model = function(name) {};

/**
 * @template U
 * @param {U|!Array<U>} doc
 * @param {!Object} options
 * @param {function(?, U): void|function(?, !Array<U>): void=} callback
 * @return {!Promise<U>|!Promise<!Array<U>>}
 */
tsickle_declare_module.mongoose.Model.prototype.populate = function(doc, options, callback) {};

/**
 * @param {!Object} cond
 * @param {!Object} update
 * @param {function(?, number, ?): void|!Object=} callback_or_options
 * @param {function(?, number, ?): void=} callback
 * @return {!Query<T>}
 */
tsickle_declare_module.mongoose.Model.prototype.update = function(cond, update, callback_or_options, callback) {};

/**
 * @param {!Object} cond
 * @param {function(?): void=} callback
 * @return {!Query<!Object>}
 */
tsickle_declare_module.mongoose.Model.prototype.remove = function(cond, callback) {};

/**
 * @param {function(?, T, number): void=} callback
 * @return {!Query<T>}
 */
tsickle_declare_module.mongoose.Model.prototype.save = function(callback) {};

/**
 * @param {string} path
 * @param {!Object=} val
 * @return {!Query<!Array<T>>}
 */
tsickle_declare_module.mongoose.Model.prototype.where = function(path, val) {};

/**
 * @param {string|!Function} argument
 * @return {!Query<T>}
 */
tsickle_declare_module.mongoose.Model.prototype.$where = function(argument) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.FindAndUpdateOption = function() {};
 /** @type {boolean} */
tsickle_declare_module.mongoose.FindAndUpdateOption.prototype.new;
 /** @type {boolean} */
tsickle_declare_module.mongoose.FindAndUpdateOption.prototype.upsert;
 /** @type {!Object} */
tsickle_declare_module.mongoose.FindAndUpdateOption.prototype.sort;
 /** @type {!Object} */
tsickle_declare_module.mongoose.FindAndUpdateOption.prototype.select;
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.GeoSearchOption = function() {};
 /** @type {!Array<number>} */
tsickle_declare_module.mongoose.GeoSearchOption.prototype.near;
 /** @type {number} */
tsickle_declare_module.mongoose.GeoSearchOption.prototype.maxDistance;
 /** @type {number} */
tsickle_declare_module.mongoose.GeoSearchOption.prototype.limit;
 /** @type {boolean} */
tsickle_declare_module.mongoose.GeoSearchOption.prototype.lean;
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.MapReduceOption = function() {};
 /** @type {function(): void} */
tsickle_declare_module.mongoose.MapReduceOption.prototype.map;
 /** @type {function(Key, !Array<T>): Val} */
tsickle_declare_module.mongoose.MapReduceOption.prototype.reduce;
 /** @type {!Object} */
tsickle_declare_module.mongoose.MapReduceOption.prototype.query;
 /** @type {number} */
tsickle_declare_module.mongoose.MapReduceOption.prototype.limit;
 /** @type {boolean} */
tsickle_declare_module.mongoose.MapReduceOption.prototype.keeptemp;
 /** @type {function(Key, Val): Val} */
tsickle_declare_module.mongoose.MapReduceOption.prototype.finalize;
 /** @type {!Object} */
tsickle_declare_module.mongoose.MapReduceOption.prototype.scope;
 /** @type {boolean} */
tsickle_declare_module.mongoose.MapReduceOption.prototype.jsMode;
 /** @type {boolean} */
tsickle_declare_module.mongoose.MapReduceOption.prototype.verbose;
 /** @type {{inline: number, replace: string, reduce: string, merge: string}} */
tsickle_declare_module.mongoose.MapReduceOption.prototype.out;
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.MapReduceOption2 = function() {};
 /** @type {string} */
tsickle_declare_module.mongoose.MapReduceOption2.prototype.map;
 /** @type {function(Key, !Array<T>): Val} */
tsickle_declare_module.mongoose.MapReduceOption2.prototype.reduce;
 /** @type {!Object} */
tsickle_declare_module.mongoose.MapReduceOption2.prototype.query;
 /** @type {number} */
tsickle_declare_module.mongoose.MapReduceOption2.prototype.limit;
 /** @type {boolean} */
tsickle_declare_module.mongoose.MapReduceOption2.prototype.keeptemp;
 /** @type {function(Key, Val): Val} */
tsickle_declare_module.mongoose.MapReduceOption2.prototype.finalize;
 /** @type {!Object} */
tsickle_declare_module.mongoose.MapReduceOption2.prototype.scope;
 /** @type {boolean} */
tsickle_declare_module.mongoose.MapReduceOption2.prototype.jsMode;
 /** @type {boolean} */
tsickle_declare_module.mongoose.MapReduceOption2.prototype.verbose;
 /** @type {{inline: number, replace: string, reduce: string, merge: string}} */
tsickle_declare_module.mongoose.MapReduceOption2.prototype.out;
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.MapReduceResult = function() {};
 /** @type {Key} */
tsickle_declare_module.mongoose.MapReduceResult.prototype._id;
 /** @type {Val} */
tsickle_declare_module.mongoose.MapReduceResult.prototype.value;
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.mongoose.Query = function() {};
 /** @type {boolean} */
tsickle_declare_module.mongoose.Query.use$geoWithin;

/**
 * @param {function(?, T): void|string|!Function=} callback_or_operation
 * @param {function(?, T): void=} callback
 * @return {!Promise<T>}
 */
tsickle_declare_module.mongoose.Query.prototype.exec = function(callback_or_operation, callback) {};

/**
 * @param {number|string} val_or_path
 * @param {number=} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.all = function(val_or_path, val) {};

/**
 * @param {!Array<!Object>} array
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.and = function(array) {};

/**
 * @param {!Object|!Array<number>} val_or_a
 * @param {!Array<number>=} b
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.box = function(val_or_a, b) {};

/**
 * @param {number} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.batchSize = function(val) {};

/**
 * @template U
 * @param {!Model<U>} model
 * @param {!Object} obj
 * @return {U}
 */
tsickle_declare_module.mongoose.Query.prototype.cast = function(model, obj) {};

/**
 * @param {!Object|string} area_or_path
 * @param {!Object=} area
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.circle = function(area_or_path, area) {};

/**
 * @param {?} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.comment = function(val) {};

/**
 * @param {function(?, number): void|!Object=} callback_or_criteria
 * @param {function(?, number): void=} callback
 * @return {!Query<number>}
 */
tsickle_declare_module.mongoose.Query.prototype.count = function(callback_or_criteria, callback) {};

/**
 * @param {function(?, T): void|string|!Object|!Query=} callback_or_field_or_criteria
 * @param {function(?, T): void|string=} callback_or_field
 * @param {function(?, T): void=} callback
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.distinct = function(callback_or_field_or_criteria, callback_or_field, callback) {};

/**
 * @param {!Object|function(!Query): void|string} criteria_or_path
 * @param {!Object|function(!Query): void=} criteria
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.elemMatch = function(criteria_or_path, criteria) {};

/**
 * @param {!Object} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.equals = function(val) {};

/**
 * @param {boolean|string=} val_or_path
 * @param {boolean=} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.exists = function(val_or_path, val) {};

/**
 * @param {function(?, T): void|!Object=} callback_or_criteria
 * @param {function(?, T): void=} callback
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.find = function(callback_or_criteria, callback) {};

/**
 * @param {function(?, T): void|!Object=} callback_or_criteria
 * @param {function(?, T): void=} callback
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.findOne = function(callback_or_criteria, callback) {};

/**
 * @param {function(?, T): void|!Object=} callback_or_cond
 * @param {function(?, T): void|!Object=} callback_or_options
 * @param {function(?, T): void=} callback
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.findOneAndRemove = function(callback_or_cond, callback_or_options, callback) {};

/**
 * @param {function(?, T): void|!Object=} callback_or_update_or_cond
 * @param {function(?, T): void|!Object=} callback_or_update
 * @param {function(?, T): void|!FindAndUpdateOption=} callback_or_options
 * @param {function(?, T): void=} callback
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.findOneAndUpdate = function(callback_or_update_or_cond, callback_or_update, callback_or_options, callback) {};

/**
 * @param {!Object} object
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.geometry = function(object) {};

/**
 * @param {number|string} val_or_path
 * @param {number=} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.gt = function(val_or_path, val) {};

/**
 * @param {number|string} val_or_path
 * @param {number=} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.gte = function(val_or_path, val) {};

/**
 * @param {!Object} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.hint = function(val) {};

/**
 * @param {!Array<?>|string} val_or_path
 * @param {!Array<?>=} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.in = function(val_or_path, val) {};

/**
 * @param {!Object=} arg
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.intersects = function(arg) {};

/**
 * @param {boolean=} bool
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.lean = function(bool) {};

/**
 * @param {number} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.limit = function(val) {};

/**
 * @param {number|string} val_or_path
 * @param {number=} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.lt = function(val_or_path, val) {};

/**
 * @param {number|string} val_or_path
 * @param {number=} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.lte = function(val_or_path, val) {};

/**
 * @param {number|string} val_or_path
 * @param {number=} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.maxDistance = function(val_or_path, val) {};

/**
 * @param {number} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.maxScan = function(val) {};

/**
 * @param {!Query|!Object} source
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.merge = function(source) {};

/**
 * @param {!Array<number>|string} val_or_path
 * @param {!Array<number>=} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.mod = function(val_or_path, val) {};

/**
 * @param {?|string} val_or_path
 * @param {?=} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.ne = function(val_or_path, val) {};

/**
 * @param {!Object|string} val_or_path
 * @param {!Object=} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.near = function(val_or_path, val) {};

/**
 * @param {!Object|string} val_or_path
 * @param {!Object=} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.nearSphere = function(val_or_path, val) {};

/**
 * @param {!Array<?>|string} val_or_path
 * @param {!Array<?>=} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.nin = function(val_or_path, val) {};

/**
 * @param {!Array<!Object>} array
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.nor = function(array) {};

/**
 * @param {!Array<!Object>} array
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.or = function(array) {};

/**
 * @param {...!Array<number>|string} coordinatePairs_or_path
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.polygon = function(coordinatePairs_or_path) {};

/**
 * @param {string|!PopulateOption} path_or_opt
 * @param {string=} select
 * @param {!Object|string=} match_or_model
 * @param {!Object=} options_or_match
 * @param {!Object=} options
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.populate = function(path_or_opt, select, match_or_model, options_or_match, options) {};

/**
 * @param {string} pref
 * @param {!Array<!Object>=} tags
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.read = function(pref, tags) {};

/**
 * @param {!RegExp|string} val_or_path
 * @param {!RegExp=} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.regex = function(val_or_path, val) {};

/**
 * @param {function(?, T): void|!Object=} callback_or_criteria
 * @param {function(?, T): void=} callback
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.remove = function(callback_or_criteria, callback) {};

/**
 * @param {string|!Object} arg
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.select = function(arg) {};

/**
 * @param {!Object} options
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.setOptions = function(options) {};

/**
 * @param {number|string} val_or_path
 * @param {number=} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.size = function(val_or_path, val) {};

/**
 * @param {number} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.skip = function(val) {};

/**
 * @param {boolean=} v
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.slaveOk = function(v) {};

/**
 * @param {number|!Array<number>|string} val_or_path
 * @param {number|!Array<number>=} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.slice = function(val_or_path, val) {};

/**
 * @param {boolean=} v
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.snapshot = function(v) {};

/**
 * @param {!Object|string} arg
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.sort = function(arg) {};

/**
 * @param {{transform: !Function}=} options
 * @return {!QueryStream}
 */
tsickle_declare_module.mongoose.Query.prototype.stream = function(options) {};

/**
 * @param {boolean=} v
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.tailable = function(v) {};

/**
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.toConstructor = function() {};

/**
 * @param {function(?, number, T): void|!Object=} callback_or_doc_or_criteria
 * @param {function(?, number, T): void|!Object=} callback_or_doc
 * @param {function(?, number, T): void|!Object=} callback_or_options
 * @param {function(?, number, T): void=} callback
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.update = function(callback_or_doc_or_criteria, callback_or_doc, callback_or_options, callback) {};

/**
 * @param {string|!Object=} path
 * @param {?=} val
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.where = function(path, val) {};

/**
 * @param {!Object|!Array<number>=} val_or_coordinate
 * @param {...!Array<number>} coordinatePairs
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.within = function(val_or_coordinate, coordinatePairs) {};

/**
 * @param {string|!Function} argument
 * @return {!Query}
 */
tsickle_declare_module.mongoose.Query.prototype.$where = function(argument) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.PopulateOption = function() {};
 /** @type {string} */
tsickle_declare_module.mongoose.PopulateOption.prototype.path;
 /** @type {string} */
tsickle_declare_module.mongoose.PopulateOption.prototype.select;
 /** @type {string} */
tsickle_declare_module.mongoose.PopulateOption.prototype.model;
 /** @type {!Object} */
tsickle_declare_module.mongoose.PopulateOption.prototype.match;
 /** @type {!Object} */
tsickle_declare_module.mongoose.PopulateOption.prototype.options;
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.QueryStream = function() {};
 /** @type {number} */
tsickle_declare_module.mongoose.QueryStream.prototype.paused;
 /** @type {boolean} */
tsickle_declare_module.mongoose.QueryStream.prototype.readable;

/**
 * @param {?=} err
 * @return {void}
 */
tsickle_declare_module.mongoose.QueryStream.prototype.destory = function(err) {};

/**
 * @return {void}
 */
tsickle_declare_module.mongoose.QueryStream.prototype.pause = function() {};

/**
 * @return {void}
 */
tsickle_declare_module.mongoose.QueryStream.prototype.resume = function() {};

/**
 * @template T
 * @param {T} destination
 * @param {{end: boolean}=} options
 * @return {T}
 */
tsickle_declare_module.mongoose.QueryStream.prototype.pipe = function(destination, options) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.mongoose.Document = function() {};
 /** @type {string} */
tsickle_declare_module.mongoose.Document.prototype.id;
 /** @type {?} */
tsickle_declare_module.mongoose.Document.prototype._id;
 /** @type {boolean} */
tsickle_declare_module.mongoose.Document.prototype.isNew;
 /** @type {!Object} */
tsickle_declare_module.mongoose.Document.prototype.errors;
 /** @type {!Object} */
tsickle_declare_module.mongoose.Document.prototype.schema;

/**
 * @param {!Document} doc
 * @return {boolean}
 */
tsickle_declare_module.mongoose.Document.prototype.equals = function(doc) {};

/**
 * @param {string} path
 * @param {function(new: (?), !Array<?>): ?=} type
 * @return {?}
 */
tsickle_declare_module.mongoose.Document.prototype.get = function(path, type) {};

/**
 * @param {!Object=} options
 * @return {string}
 */
tsickle_declare_module.mongoose.Document.prototype.inspect = function(options) {};

/**
 * @param {string} path
 * @param {string|!Error} errorMsg_or_error
 * @param {?} value
 * @return {void}
 */
tsickle_declare_module.mongoose.Document.prototype.invalidate = function(path, errorMsg_or_error, value) {};

/**
 * @param {string} path
 * @return {boolean}
 */
tsickle_declare_module.mongoose.Document.prototype.isDirectModified = function(path) {};

/**
 * @param {string} path
 * @return {boolean}
 */
tsickle_declare_module.mongoose.Document.prototype.isInit = function(path) {};

/**
 * @param {string=} path
 * @return {boolean}
 */
tsickle_declare_module.mongoose.Document.prototype.isModified = function(path) {};

/**
 * @param {string} path
 * @return {boolean}
 */
tsickle_declare_module.mongoose.Document.prototype.isSelected = function(path) {};

/**
 * @param {string} path
 * @return {void}
 */
tsickle_declare_module.mongoose.Document.prototype.markModified = function(path) {};

/**
 * @return {!Array<string>}
 */
tsickle_declare_module.mongoose.Document.prototype.modifiedPaths = function() {};

/**
 * @template T
 * @param {function(?, T): void|string|!PopulateOption=} callback_or_path_or_opt
 * @param {function(?, T): void=} callback
 * @return {!Document}
 */
tsickle_declare_module.mongoose.Document.prototype.populate = function(callback_or_path_or_opt, callback) {};

/**
 * @param {string} path
 * @return {?}
 */
tsickle_declare_module.mongoose.Document.prototype.populated = function(path) {};

/**
 * @template T
 * @param {function(?): void=} callback
 * @return {!Query<T>}
 */
tsickle_declare_module.mongoose.Document.prototype.remove = function(callback) {};

/**
 * @template T
 * @param {function(?, T): void=} callback
 * @return {void}
 */
tsickle_declare_module.mongoose.Document.prototype.save = function(callback) {};

/**
 * @param {string|!Object} path_or_value
 * @param {?=} val
 * @param {function(new: (?), !Array<?>): ?|!Object=} type_or_options
 * @param {!Object=} options
 * @return {void}
 */
tsickle_declare_module.mongoose.Document.prototype.set = function(path_or_value, val, type_or_options, options) {};

/**
 * @param {!Object=} options
 * @return {!Object}
 */
tsickle_declare_module.mongoose.Document.prototype.toJSON = function(options) {};

/**
 * @param {!Object=} options
 * @return {!Object}
 */
tsickle_declare_module.mongoose.Document.prototype.toObject = function(options) {};

/**
 * @return {string}
 */
tsickle_declare_module.mongoose.Document.prototype.toString = function() {};

/**
 * @template T
 * @param {!Object} doc
 * @param {!Object} options
 * @param {function(?, number, ?): void} callback
 * @return {!Query<T>}
 */
tsickle_declare_module.mongoose.Document.prototype.update = function(doc, options, callback) {};

/**
 * @param {function(?): void} cb
 * @return {void}
 */
tsickle_declare_module.mongoose.Document.prototype.validate = function(cb) {};

/**
 * @constructor
 * @struct
 * @param {...!Object} options
 */
tsickle_declare_module.mongoose.Aggregate = function(options) {};

/**
 * @param {...!Object} options
 * @return {!Aggregate}
 */
tsickle_declare_module.mongoose.Aggregate.prototype.append = function(options) {};

/**
 * @param {!Object} arg
 * @return {!Aggregate}
 */
tsickle_declare_module.mongoose.Aggregate.prototype.group = function(arg) {};

/**
 * @param {number} num
 * @return {!Aggregate}
 */
tsickle_declare_module.mongoose.Aggregate.prototype.limit = function(num) {};

/**
 * @param {!Object} arg
 * @return {!Aggregate}
 */
tsickle_declare_module.mongoose.Aggregate.prototype.match = function(arg) {};

/**
 * @param {!Object} parameters
 * @return {!Aggregate}
 */
tsickle_declare_module.mongoose.Aggregate.prototype.near = function(parameters) {};

/**
 * @param {string|!Object} arg
 * @return {!Aggregate}
 */
tsickle_declare_module.mongoose.Aggregate.prototype.project = function(arg) {};

/**
 * @param {string} filter
 * @return {!Aggregate}
 */
tsickle_declare_module.mongoose.Aggregate.prototype.select = function(filter) {};

/**
 * @param {number} num
 * @return {!Aggregate}
 */
tsickle_declare_module.mongoose.Aggregate.prototype.skip = function(num) {};

/**
 * @param {string|!Object} arg
 * @return {!Aggregate}
 */
tsickle_declare_module.mongoose.Aggregate.prototype.sort = function(arg) {};

/**
 * @param {string} fiels
 * @param {...string} rest
 * @return {!Aggregate}
 */
tsickle_declare_module.mongoose.Aggregate.prototype.unwind = function(fiels, rest) {};

/**
 * @param {function(?, T): void=} callback
 * @return {!Promise<T>}
 */
tsickle_declare_module.mongoose.Aggregate.prototype.exec = function(callback) {};

/**
 * @param {string} pref
 * @param {...!Object} tags
 * @return {!Aggregate}
 */
tsickle_declare_module.mongoose.Aggregate.prototype.read = function(pref, tags) {};

/**
 * @constructor
 * @struct
 * @param {function(?, T): void=} fn
 */
tsickle_declare_module.mongoose.Promise = function(fn) {};

/**
 * @template U
 * @param {function(T): (void|U|!Promise<U>)} onFulFill
 * @param {function(?): (void|U|!Promise<U>)=} onReject
 * @return {!Promise<U>}
 */
tsickle_declare_module.mongoose.Promise.prototype.then = function(onFulFill, onReject) {};

/**
 * @return {void}
 */
tsickle_declare_module.mongoose.Promise.prototype.end = function() {};

/**
 * @param {T} result
 * @return {!Promise}
 */
tsickle_declare_module.mongoose.Promise.prototype.fulfill = function(result) {};

/**
 * @param {?} err
 * @return {!Promise}
 */
tsickle_declare_module.mongoose.Promise.prototype.reject = function(err) {};

/**
 * @param {?} err
 * @param {T} result
 * @return {!Promise}
 */
tsickle_declare_module.mongoose.Promise.prototype.resolve = function(err, result) {};

/**
 * @param {function(T): void} listener
 * @return {!Promise}
 */
tsickle_declare_module.mongoose.Promise.prototype.onFulfill = function(listener) {};

/**
 * @param {function(?): void} listener
 * @return {!Promise}
 */
tsickle_declare_module.mongoose.Promise.prototype.onReject = function(listener) {};

/**
 * @param {function(?, T): void} listener
 * @return {!Promise}
 */
tsickle_declare_module.mongoose.Promise.prototype.onResolve = function(listener) {};

/**
 * @param {string} event
 * @param {!Function} listener
 * @return {!Promise}
 */
tsickle_declare_module.mongoose.Promise.prototype.on = function(event, listener) {};

/**
 * @param {function(?, T): void} listener
 * @return {!Promise}
 */
tsickle_declare_module.mongoose.Promise.prototype.addBack = function(listener) {};

/**
 * @param {function(T): void} listener
 * @return {!Promise}
 */
tsickle_declare_module.mongoose.Promise.prototype.addCallback = function(listener) {};

/**
 * @param {function(?): void} listener
 * @return {!Promise}
 */
tsickle_declare_module.mongoose.Promise.prototype.addErrback = function(listener) {};

/**
 * @param {T} result
 * @return {!Promise}
 */
tsickle_declare_module.mongoose.Promise.prototype.complete = function(result) {};

/**
 * @param {?} err
 * @return {!Promise}
 */
tsickle_declare_module.mongoose.Promise.prototype.error = function(err) {};
