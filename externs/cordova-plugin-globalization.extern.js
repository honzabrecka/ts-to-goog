/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cordova-plugin-globalization/index.d.ts:
 /** @type {!Globalization} */
Navigator.prototype.globalization;
/**
 * @record
 * @struct
 */
function Globalization() {}

/**
 * Get the string identifier for the client's current language.
 * @param {function({value: string}): void} onSuccess Called on success getting the language with a properties object,
 *                  that should have a value property with a String value.
 * @param {function(?): void} onError   Called on error getting the language with a GlobalizationError object.
 *                  The error's expected code is GlobalizationError.UNKNOWN_ERROR.
 * @return {void}
 */
Globalization.prototype.getPreferredLanguage = function(onSuccess, onError) {};

/**
 * Get the string identifier for the client's current locale setting.
 * @param {function({value: string}): void} onSuccess Called on success getting the locale identifier with a properties object,
 *                  that should have a value property with a String value.
 * @param {function(?): void} onError   Called on error getting the locale identifier with a GlobalizationError object.
 *                  The error's expected code is GlobalizationError.UNKNOWN\_ERROR.
 * @return {void}
 */
Globalization.prototype.getLocaleName = function(onSuccess, onError) {};

/**
 * Returns a date formatted as a string according to the client's locale and timezone.
 * @param {!Date} date      Date to format.
 * @param {function({value: string}): void} onSuccess Called on success with a properties object,
 *                  that should have a value property with a String value.
 * @param {function(?): void} onError   Called on error with a GlobalizationError object.
 *                  The error's expected code is GlobalizationError.FORMATTING_ERROR.
 * @param {{formatLength: string, selector: string}=} options   Optional format parameters. Default {formatLength:'short', selector:'date and time'}
 *                      - 'formatLength' can be "short", "medium", "long", or "full".
 *                      - 'selector' can be "date", "time", or "date and time".
 * @return {void}
 */
Globalization.prototype.dateToString = function(date, onSuccess, onError, options) {};

/**
 * Parses a date formatted as a string, according to the client's user preferences
 * and calendar using the time zone of the client, and returns the corresponding date object.
 * @param {string} dateString  String to parse
 * @param {function(!GlobalizationDate): void} onSuccess   Called on success with GlobalizationDate object
 * @param {function(?): void} onError     Called on error getting the language with a GlobalizationError object.
 *                    The error's expected code is GlobalizationError.PARSING_ERROR.
 * @param {{type: string, item: string}=} options     Optional parse parameters. Default {formatLength:'short', selector:'date and time'}
 * @return {void}
 */
Globalization.prototype.stringToDate = function(dateString, onSuccess, onError, options) {};

/**
 * Returns a pattern string to format and parse dates according to the client's user preferences.
 * @param {function(!GlobalizationDatePattern): void} onSuccess Called on success getting pattern with a GlobalizationDatePattern object
 * @param {function(?): void} onError   Called on error getting pattern with a GlobalizationError object.
 *                  The error's expected code is GlobalizationError.PATTERN_ERROR.
 * @param {{type: string, item: string}=} options   Optional format parameters. Default {formatLength:'short', selector:'date and time'}
 * @return {void}
 */
Globalization.prototype.getDatePattern = function(onSuccess, onError, options) {};

/**
 * Returns an array of the names of the months or days of the week, depending on the client's user preferences and calendar.
 * @param {function({value: !Array<string>}): void} onSuccess Called on success getting names with a properties object,
 *                  that should have a value property with a String[] value.
 * @param {function(?): void} onError   Called on error getting the language with a GlobalizationError object.
 *                  The error's expected code is GlobalizationError.UNKNOWN_ERROR.
 * @param {{type: string, item: string}=} options   Optional parameters. Default: {type:'wide', item:'months'}
 * @return {void}
 */
Globalization.prototype.getDateNames = function(onSuccess, onError, options) {};

/**
 * Indicates whether daylight savings time is in effect for a given date using the client's time zone and calendar.
 * @param {!Date} date
 * @param {function({dst: boolean}): void} onSuccess Called on success with a properties object,
 *                  that should have a dst property with a boolean value.
 * @param {function(?): void} onError   Called on error with a GlobalizationError object.
 *                  The error's expected code is GlobalizationError.UNKNOWN_ERROR.
 * @return {void}
 */
Globalization.prototype.isDaylightSavingsTime = function(date, onSuccess, onError) {};

/**
 * Returns the first day of the week according to the client's user preferences and calendar.
 * @param {function({value: number}): void} onSuccess Called on success with a day object,
 *                  that should have a value property with a number value.
 * @param {function(?): void} onError   Called on error with a GlobalizationError object.
 *                  The error's expected code is GlobalizationError.UNKNOWN_ERROR.
 * @return {void}
 */
Globalization.prototype.getFirstDayOfWeek = function(onSuccess, onError) {};

/**
 * Returns a number formatted as a string according to the client's user preferences.
 * @param {number} value     Number to format
 * @param {function({value: string}): void} onSuccess Called on success with a result object,
 *                  that should have a value property with a String value.
 * @param {function(?): void} onError   Called on error with a GlobalizationError object.
 *                  The error's expected code is GlobalizationError.FORMATTING_ERROR.
 * @param {{type: string}=} format    Optional format parameters. Default: {type:'decimal'}
 * @return {void}
 */
Globalization.prototype.nubmerToString = function(value, onSuccess, onError, format) {};

/**
 * Parses a number formatted as a string according to the client's user preferences and returns the corresponding number.
 * @param {string} value     String to parse
 * @param {function({value: number}): void} onSuccess Called on success with a result object,
 *                  that should have a value property with a number value.
 * @param {function(?): void} onError   Called on error with a GlobalizationError object.
 *                  The error's expected code is GlobalizationError.FORMATTING_ERROR.
 * @param {{type: string}=} format    Optional format parameters. Default: {type:'decimal'}
 * @return {void}
 */
Globalization.prototype.stringToNumber = function(value, onSuccess, onError, format) {};

/**
 * Returns a pattern string to format and parse numbers according to the client's user preferences.
 * @param {function(!GlobalizationNumberPattern): void} onSuccess Called on success getting pattern with a GlobalizationNumberPattern object
 * @param {function(?): void} onError   Called on error getting the language with a GlobalizationError object.
 *                  The error's expected code is GlobalizationError.PATTERN_ERROR.
 * @param {{type: string}=} format
 * @return {void}
 */
Globalization.prototype.getNumberPattern = function(onSuccess, onError, format) {};

/**
 * Returns a pattern string to format and parse currency values according to the client's user preferences and ISO 4217 currency code.
 * @param {string} currencyCode Should be a String of one of the ISO 4217 currency codes, for example 'USD'.
 * @param {function(!GlobalizationCurrencyPattern): void} onSuccess     Called on success getting pattern with a GlobalizatioCurrencyPattern object
 * @param {function(?): void} onError       Called on error getting pattern with a GlobalizationError object.
 *                      The error's expected code is GlobalizationError.FORMATTING_ERROR.
 * @return {void}
 */
Globalization.prototype.getCurrencyPattern = function(currencyCode, onSuccess, onError) {};
/**
 * @record
 * @struct
 */
function GlobalizationDate() {}
 /** @type {number} */
GlobalizationDate.prototype.year;
 /** @type {number} */
GlobalizationDate.prototype.month;
 /** @type {number} */
GlobalizationDate.prototype.day;
 /** @type {number} */
GlobalizationDate.prototype.hour;
 /** @type {number} */
GlobalizationDate.prototype.minute;
 /** @type {number} */
GlobalizationDate.prototype.second;
 /** @type {number} */
GlobalizationDate.prototype.millisecond;
/**
 * @record
 * @struct
 */
function GlobalizationDatePattern() {}
 /** @type {string} */
GlobalizationDatePattern.prototype.pattern;
 /** @type {string} */
GlobalizationDatePattern.prototype.timezone;
 /** @type {number} */
GlobalizationDatePattern.prototype.utc_offset;
 /** @type {number} */
GlobalizationDatePattern.prototype.dst_offset;
/**
 * @record
 * @struct
 */
function GlobalizationDateNameOptions() {}
 /** @type {string} */
GlobalizationDateNameOptions.prototype.type;
 /** @type {string} */
GlobalizationDateNameOptions.prototype.item;
/**
 * @record
 * @struct
 */
function GlobalizationNumberPattern() {}
 /** @type {string} */
GlobalizationNumberPattern.prototype.pattern;
 /** @type {string} */
GlobalizationNumberPattern.prototype.symbol;
 /** @type {number} */
GlobalizationNumberPattern.prototype.fraction;
 /** @type {number} */
GlobalizationNumberPattern.prototype.rounding;
 /** @type {string} */
GlobalizationNumberPattern.prototype.positive;
 /** @type {string} */
GlobalizationNumberPattern.prototype.negative;
 /** @type {string} */
GlobalizationNumberPattern.prototype.decimal;
 /** @type {string} */
GlobalizationNumberPattern.prototype.grouping;
/**
 * @record
 * @struct
 */
function GlobalizationCurrencyPattern() {}
 /** @type {string} */
GlobalizationCurrencyPattern.prototype.pattern;
 /** @type {string} */
GlobalizationCurrencyPattern.prototype.code;
 /** @type {number} */
GlobalizationCurrencyPattern.prototype.fraction;
 /** @type {number} */
GlobalizationCurrencyPattern.prototype.rounding;
 /** @type {string} */
GlobalizationCurrencyPattern.prototype.decimal;
 /** @type {string} */
GlobalizationCurrencyPattern.prototype.grouping;
/**
 * @record
 * @struct
 */
function GlobalizationError() {}
 /** @type {number} */
GlobalizationError.prototype.code;
 /** @type {string} */
GlobalizationError.prototype.message;
 /** @type {{UNKNOWN_ERROR: number, FORMATTING_ERROR: number, PARSING_ERROR: number, PATTERN_ERROR: number}} */
var GlobalizationError;
