/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/weapp-api/index.d.ts:
/** @const */
var wx = {};

/** @typedef {function(): void} */
wx.NoneParamCallback;

/** @typedef {function(?): void} */
wx.OneParamCallback;

/** @typedef {function(?): void} */
wx.ResponseCallback;

/** @typedef {function(!wx.DataResponse): void} */
wx.DataResponseCallback;

/** @typedef {function(!wx.TempFileResponse): void} */
wx.TempFileResponseCallback;

/** @typedef {function(?): void} */
wx.ErrorCallback;

/** @typedef {function(?): void} */
wx.EventCallback;
/**
 * @record
 * @struct
 */
wx.DataResponse = function() {};
 /** @type {?} */
wx.DataResponse.prototype.data;
/**
 * @record
 * @struct
 */
wx.TempFileResponse = function() {};
 /** @type {string} */
wx.TempFileResponse.prototype.tempFilePath;
/**
 * @record
 * @struct
 */
wx.PageOptions = function() {};
 /** @type {?} */
wx.PageOptions.prototype.data;
 /** @type {function(?): void} */
wx.PageOptions.prototype.onLoad;
 /** @type {function(): void} */
wx.PageOptions.prototype.onReady;
 /** @type {function(): void} */
wx.PageOptions.prototype.onShow;
 /** @type {function(): void} */
wx.PageOptions.prototype.onHide;
 /** @type {function(): void} */
wx.PageOptions.prototype.onUnload;

/* TODO: IndexSignature: wx */
/**
 * @record
 * @struct
 */
wx.AppOptions = function() {};
 /** @type {function(): void} */
wx.AppOptions.prototype.onLaunch;
 /** @type {function(): void} */
wx.AppOptions.prototype.onShow;
 /** @type {function(): void} */
wx.AppOptions.prototype.onHide;

/* TODO: IndexSignature: wx */
/**
 * @record
 * @struct
 */
wx.RequestHeader = function() {};

/* TODO: IndexSignature: wx */
/**
 * @record
 * @struct
 */
wx.RequestOptions = function() {};
 /** @type {string} */
wx.RequestOptions.prototype.url;
 /** @type {?} */
wx.RequestOptions.prototype.data;
 /** @type {!wx.RequestHeader} */
wx.RequestOptions.prototype.header;
 /** @type {string} */
wx.RequestOptions.prototype.method;
 /** @type {function(!wx.DataResponse): void} */
wx.RequestOptions.prototype.success;
 /** @type {function(?): void} */
wx.RequestOptions.prototype.fail;
 /** @type {function(?): void} */
wx.RequestOptions.prototype.complete;

/**
 * wx.request发起的是https请求。一个微信小程序，同时只能有5个网络请求连接。
 * @param {!wx.RequestOptions} options
 * @return {void}
 */
wx.request = function(options) {};
/**
 * @record
 * @struct
 */
wx.UploadFileOptions = function() {};
 /** @type {string} */
wx.UploadFileOptions.prototype.url;
 /** @type {string} */
wx.UploadFileOptions.prototype.filePath;
 /** @type {string} */
wx.UploadFileOptions.prototype.name;
 /** @type {!wx.RequestHeader} */
wx.UploadFileOptions.prototype.header;
 /** @type {?} */
wx.UploadFileOptions.prototype.formData;
 /** @type {function(?): void} */
wx.UploadFileOptions.prototype.success;
 /** @type {function(?): void} */
wx.UploadFileOptions.prototype.fail;
 /** @type {function(?): void} */
wx.UploadFileOptions.prototype.complete;

/**
 * 将本地资源上传到开发者服务器。
 * 如页面通过 wx.chooseImage 等接口获取到一个本地资源的临时文件路径后，
 * 可通过此接口将本地资源上传到指定服务器。
 * 客户端发起一个 HTTPS POST 请求，
 * 其中 Content-Type 为 multipart/form-data 。
 * @param {!wx.UploadFileOptions} options
 * @return {void}
 */
wx.uploadFile = function(options) {};
/**
 * @record
 * @struct
 */
wx.DownloadFileOptions = function() {};
 /** @type {string} */
wx.DownloadFileOptions.prototype.url;
 /** @type {string} */
wx.DownloadFileOptions.prototype.type;
 /** @type {!wx.RequestHeader} */
wx.DownloadFileOptions.prototype.header;
 /** @type {function(!wx.TempFileResponse): void} */
wx.DownloadFileOptions.prototype.success;
 /** @type {function(?): void} */
wx.DownloadFileOptions.prototype.fail;
 /** @type {function(?): void} */
wx.DownloadFileOptions.prototype.complete;

/**
 * 下载文件资源到本地。客户端直接发起一个 HTTP GET 请求，
 * 把下载到的资源根据 type 进行处理，并返回文件的本地临时路径。
 * @param {!wx.DownloadFileOptions} options
 * @return {void}
 */
wx.downloadFile = function(options) {};
/**
 * @record
 * @struct
 */
wx.ConnectSocketOptions = function() {};
 /** @type {string} */
wx.ConnectSocketOptions.prototype.url;
 /** @type {?} */
wx.ConnectSocketOptions.prototype.data;
 /** @type {!wx.RequestHeader} */
wx.ConnectSocketOptions.prototype.header;
 /** @type {string} */
wx.ConnectSocketOptions.prototype.method;
 /** @type {function(?): void} */
wx.ConnectSocketOptions.prototype.success;
 /** @type {function(?): void} */
wx.ConnectSocketOptions.prototype.fail;
 /** @type {function(?): void} */
wx.ConnectSocketOptions.prototype.complete;

/**
 * 创建一个 WebSocket 连接；
 * 一个微信小程序同时只能有一个 WebSocket 连接，
 * 如果当前已存在一个 WebSocket 连接，
 * 会自动关闭该连接，并重新创建一个 WebSocket 连接。
 * @param {!wx.ConnectSocketOptions} options
 * @return {void}
 */
wx.connectSocket = function(options) {};

/**
 * 监听WebSocket连接打开事件。
 * @param {function(?): void} callback
 * @return {void}
 */
wx.onSocketOpen = function(callback) {};

/**
 * 监听WebSocket错误。
 * @param {function(?): void} callback
 * @return {void}
 */
wx.onSocketError = function(callback) {};
/**
 * @record
 * @struct
 */
wx.SendSocketMessageOptions = function() {};
 /** @type {string} */
wx.SendSocketMessageOptions.prototype.data;
 /** @type {function(?): void} */
wx.SendSocketMessageOptions.prototype.success;
 /** @type {function(?): void} */
wx.SendSocketMessageOptions.prototype.fail;
 /** @type {function(?): void} */
wx.SendSocketMessageOptions.prototype.complete;

/**
 * 通过 WebSocket 连接发送数据，需要先 wx.connectSocket，
 * 并在 wx.onSocketOpen 回调之后才能发送。
 * @param {!wx.SendSocketMessageOptions} options
 * @return {void}
 */
wx.sendSocketMessage = function(options) {};

/**
 * 监听WebSocket接受到服务器的消息事件。
 * @param {function(!wx.DataResponse): void} callback
 * @return {void}
 */
wx.onSocketMessage = function(callback) {};

/**
 * 关闭WebSocket连接。
 * @return {void}
 */
wx.closeSocket = function() {};

/**
 * 监听WebSocket关闭。
 * @param {function(?): void} callback
 * @return {void}
 */
wx.onSocketClose = function(callback) {};

/** @typedef {string} */
wx.ImageSizeType;

/** @typedef {string} */
wx.ImageSourceType;

/** @typedef {string} */
wx.VideoSourceType;

/** @typedef {string} */
wx.CameraDevice;
/**
 * @record
 * @struct
 */
wx.TempFilesData = function() {};
 /** @type {string} */
wx.TempFilesData.prototype.tempFilePaths;
/**
 * @record
 * @struct
 */
wx.ChooseImageOptions = function() {};
 /** @type {number} */
wx.ChooseImageOptions.prototype.count;
 /** @type {!Array<string>} */
wx.ChooseImageOptions.prototype.sizeType;
 /** @type {!Array<string>} */
wx.ChooseImageOptions.prototype.sourceType;
 /** @type {function(!wx.TempFilesData): void} */
wx.ChooseImageOptions.prototype.success;
 /** @type {function(?): void} */
wx.ChooseImageOptions.prototype.fail;
 /** @type {function(?): void} */
wx.ChooseImageOptions.prototype.complete;

/**
 * 从本地相册选择图片或使用相机拍照。
 * @param {!wx.ChooseImageOptions} options
 * @return {void}
 */
wx.chooseImage = function(options) {};
/**
 * @record
 * @struct
 */
wx.PreviewImageOptions = function() {};
 /** @type {string} */
wx.PreviewImageOptions.prototype.current;
 /** @type {!Array<string>} */
wx.PreviewImageOptions.prototype.urls;
 /** @type {function(?): void} */
wx.PreviewImageOptions.prototype.success;
 /** @type {function(?): void} */
wx.PreviewImageOptions.prototype.fail;
 /** @type {function(?): void} */
wx.PreviewImageOptions.prototype.complete;

/**
 * 预览图片。
 * @param {!wx.PreviewImageOptions} options
 * @return {void}
 */
wx.previewImage = function(options) {};
/**
 * @record
 * @struct
 */
wx.StartRecordOptions = function() {};
 /** @type {function(!wx.TempFileResponse): void} */
wx.StartRecordOptions.prototype.success;
 /** @type {function(?): void} */
wx.StartRecordOptions.prototype.fail;
 /** @type {function(?): void} */
wx.StartRecordOptions.prototype.complete;

/**
 * 开始录音。当主动调用wx.stopRecord，
 * 或者录音超过1分钟时自动结束录音，返回录音文件的临时文件路径。
 * 注：文件的临时路径，在小程序本次启动期间可以正常使用，
 * 如需持久保存，需在主动调用wx.saveFile，在小程序下次启动时才能访问得到。
 * @param {!wx.StartRecordOptions} options
 * @return {void}
 */
wx.startRecord = function(options) {};

/**
 * ​ 主动调用停止录音。
 * @return {void}
 */
wx.stopRecord = function() {};
/**
 * @record
 * @struct
 */
wx.PlayVoiceOptions = function() {};
 /** @type {string} */
wx.PlayVoiceOptions.prototype.filePath;
 /** @type {function(?): void} */
wx.PlayVoiceOptions.prototype.success;
 /** @type {function(?): void} */
wx.PlayVoiceOptions.prototype.fail;
 /** @type {function(?): void} */
wx.PlayVoiceOptions.prototype.complete;

/**
 * 开始播放语音，同时只允许一个语音文件正在播放，
 * 如果前一个语音文件还没播放完，将中断前一个语音播放。
 * @param {!wx.PlayVoiceOptions} options
 * @return {void}
 */
wx.playVoice = function(options) {};

/**
 * 暂停正在播放的语音。
 * 再次调用wx.playVoice播放同一个文件时，会从暂停处开始播放。
 * 如果想从头开始播放，需要先调用 wx.stopVoice。
 * @return {void}
 */
wx.pauseVoice = function() {};

/**
 * 结束播放语音。
 * @return {void}
 */
wx.stopVoice = function() {};
/**
 * @record
 * @struct
 */
wx.BackgroundAudioPlayerState = function() {};
 /** @type {number} */
wx.BackgroundAudioPlayerState.prototype.duration;
 /** @type {number} */
wx.BackgroundAudioPlayerState.prototype.currentPosition;
 /** @type {number} */
wx.BackgroundAudioPlayerState.prototype.status;
 /** @type {number} */
wx.BackgroundAudioPlayerState.prototype.downloadPercent;
 /** @type {string} */
wx.BackgroundAudioPlayerState.prototype.dataUrl;

/** @typedef {function(!wx.BackgroundAudioPlayerState): void} */
wx.GetBackgroundAudioPlayerStateSuccessCallback;
/**
 * @record
 * @struct
 */
wx.GetBackgroundAudioPlayerStateOptions = function() {};
 /** @type {function(!wx.BackgroundAudioPlayerState): void} */
wx.GetBackgroundAudioPlayerStateOptions.prototype.success;
 /** @type {function(): void} */
wx.GetBackgroundAudioPlayerStateOptions.prototype.fail;
 /** @type {function(): void} */
wx.GetBackgroundAudioPlayerStateOptions.prototype.complete;

/**
 * 获取音乐播放状态。
 * @param {!wx.GetBackgroundAudioPlayerStateOptions} options
 * @return {void}
 */
wx.getBackgroundAudioPlayerState = function(options) {};
/**
 * @record
 * @struct
 */
wx.PlayBackgroundAudioOptions = function() {};
 /** @type {string} */
wx.PlayBackgroundAudioOptions.prototype.dataUrl;
 /** @type {string} */
wx.PlayBackgroundAudioOptions.prototype.title;
 /** @type {string} */
wx.PlayBackgroundAudioOptions.prototype.coverImgUrl;
 /** @type {function(?): void} */
wx.PlayBackgroundAudioOptions.prototype.success;
 /** @type {function(?): void} */
wx.PlayBackgroundAudioOptions.prototype.fail;
 /** @type {function(?): void} */
wx.PlayBackgroundAudioOptions.prototype.complete;

/**
 * 播放音乐，同时只能有一首音乐正在播放。
 * @param {!wx.PlayBackgroundAudioOptions} options
 * @return {void}
 */
wx.playBackgroundAudio = function(options) {};

/**
 * 暂停播放音乐。
 * @return {void}
 */
wx.pauseBackgroundAudio = function() {};
/**
 * @record
 * @struct
 */
wx.SeekBackgroundAudioOptions = function() {};
 /** @type {number} */
wx.SeekBackgroundAudioOptions.prototype.position;
 /** @type {function(?): void} */
wx.SeekBackgroundAudioOptions.prototype.success;
 /** @type {function(?): void} */
wx.SeekBackgroundAudioOptions.prototype.fail;
 /** @type {function(?): void} */
wx.SeekBackgroundAudioOptions.prototype.complete;

/**
 * 控制音乐播放进度。
 * @param {!wx.SeekBackgroundAudioOptions} options
 * @return {void}
 */
wx.seekBackgroundAudio = function(options) {};

/**
 * 停止播放音乐。
 * @return {void}
 */
wx.stopBackgroundAudio = function() {};

/**
 * 监听音乐播放。
 * @param {function(): void} callback
 * @return {void}
 */
wx.onBackgroundAudioPlay = function(callback) {};

/**
 * 监听音乐暂停。
 * @param {function(): void} callback
 * @return {void}
 */
wx.onBackgroundAudioPause = function(callback) {};

/**
 * 监听音乐停止。
 * @param {function(): void} callback
 * @return {void}
 */
wx.onBackgroundAudioStop = function(callback) {};
/**
 * @record
 * @struct
 */
wx.SavedFileData = function() {};
 /** @type {string} */
wx.SavedFileData.prototype.savedFilePath;
/**
 * @record
 * @struct
 */
wx.SaveFileOptions = function() {};
 /** @type {string} */
wx.SaveFileOptions.prototype.tempFilePath;
 /** @type {function(!wx.SavedFileData): void} */
wx.SaveFileOptions.prototype.success;
 /** @type {function(?): void} */
wx.SaveFileOptions.prototype.fail;
 /** @type {function(?): void} */
wx.SaveFileOptions.prototype.complete;

/**
 * 保存文件到本地。
 * @param {!wx.SaveFileOptions} options
 * @return {void}
 */
wx.saveFile = function(options) {};
/**
 * @record
 * @struct
 */
wx.VideoData = function() {};
 /** @type {string} */
wx.VideoData.prototype.tempFilePath;
 /** @type {number} */
wx.VideoData.prototype.duration;
 /** @type {number} */
wx.VideoData.prototype.size;
 /** @type {number} */
wx.VideoData.prototype.height;
 /** @type {number} */
wx.VideoData.prototype.width;
/**
 * @record
 * @struct
 */
wx.ChooseVideoOptions = function() {};
 /** @type {!Array<string>} */
wx.ChooseVideoOptions.prototype.sourceType;
 /** @type {number} */
wx.ChooseVideoOptions.prototype.maxDuration;
 /** @type {!Array<string>} */
wx.ChooseVideoOptions.prototype.camera;
 /** @type {function(!wx.VideoData): void} */
wx.ChooseVideoOptions.prototype.success;
 /** @type {function(?): void} */
wx.ChooseVideoOptions.prototype.fail;
 /** @type {function(?): void} */
wx.ChooseVideoOptions.prototype.complete;

/**
 * 拍摄视频或从手机相册中选视频，返回视频的临时文件路径。
 * @param {!wx.ChooseVideoOptions} options
 * @return {void}
 */
wx.chooseVideo = function(options) {};
/**
 * @record
 * @struct
 */
wx.SetStorageOptions = function() {};
 /** @type {string} */
wx.SetStorageOptions.prototype.key;
 /** @type {?} */
wx.SetStorageOptions.prototype.data;
 /** @type {function(?): void} */
wx.SetStorageOptions.prototype.success;
 /** @type {function(?): void} */
wx.SetStorageOptions.prototype.fail;
 /** @type {function(?): void} */
wx.SetStorageOptions.prototype.complete;

/**
 * 将数据存储在本地缓存中指定的 key 中，
 * 会覆盖掉原来该 key 对应的内容，这是一个异步接口。
 * @param {!wx.SetStorageOptions} options
 * @return {void}
 */
wx.setStorage = function(options) {};

/**
 * 将 data 存储在本地缓存中指定的 key 中，
 * 会覆盖掉原来该 key 对应的内容，这是一个同步接口。
 * 
 * @param {string} key
 * @param {?} data
 * @return {void}
 */
wx.setStorageSync = function(key, data) {};
/**
 * @record
 * @struct
 */
wx.GetStorageOptions = function() {};
 /** @type {string} */
wx.GetStorageOptions.prototype.key;
 /** @type {function(!wx.DataResponse): void} */
wx.GetStorageOptions.prototype.success;
 /** @type {function(?): void} */
wx.GetStorageOptions.prototype.fail;
 /** @type {function(?): void} */
wx.GetStorageOptions.prototype.complete;

/**
 * 从本地缓存中异步获取指定 key 对应的内容。
 * @param {!wx.GetStorageOptions} options
 * @return {void}
 */
wx.getStorage = function(options) {};

/**
 * 从本地缓存中同步获取指定 key 对应的内容。
 * 
 * @param {string} key
 * @return {?}
 */
wx.getStorageSync = function(key) {};

/**
 * 清理本地数据缓存。
 * @return {void}
 */
wx.clearStorage = function() {};

/**
 * 同步清理本地数据缓存
 * @return {void}
 */
wx.clearStorageSync = function() {};
/**
 * @record
 * @struct
 */
wx.LocationData = function() {};
 /** @type {number} */
wx.LocationData.prototype.latitude;
 /** @type {number} */
wx.LocationData.prototype.longitude;
 /** @type {number} */
wx.LocationData.prototype.speed;
 /** @type {number} */
wx.LocationData.prototype.accuracy;
/**
 * @record
 * @struct
 */
wx.GetLocationOptions = function() {};
 /** @type {string} */
wx.GetLocationOptions.prototype.type;
 /** @type {function(!wx.LocationData): void} */
wx.GetLocationOptions.prototype.success;
 /** @type {function(?): void} */
wx.GetLocationOptions.prototype.fail;
 /** @type {function(?): void} */
wx.GetLocationOptions.prototype.complete;

/**
 * 获取当前的地理位置、速度。
 * @param {!wx.GetLocationOptions} options
 * @return {void}
 */
wx.getLocation = function(options) {};
/**
 * @record
 * @struct
 */
wx.OpenLocationOptions = function() {};
 /** @type {number} */
wx.OpenLocationOptions.prototype.latitude;
 /** @type {number} */
wx.OpenLocationOptions.prototype.longitude;
 /** @type {number} */
wx.OpenLocationOptions.prototype.scale;
 /** @type {string} */
wx.OpenLocationOptions.prototype.name;
 /** @type {string} */
wx.OpenLocationOptions.prototype.address;
 /** @type {function(?): void} */
wx.OpenLocationOptions.prototype.success;
 /** @type {function(?): void} */
wx.OpenLocationOptions.prototype.fail;
 /** @type {function(?): void} */
wx.OpenLocationOptions.prototype.complete;

/**
 * 使用微信内置地图查看位置
 * @param {!wx.OpenLocationOptions} options
 * @return {void}
 */
wx.openLocation = function(options) {};
/**
 * @record
 * @struct
 */
wx.NetworkTypeData = function() {};
 /** @type {string} */
wx.NetworkTypeData.prototype.networkType;
/**
 * @record
 * @struct
 */
wx.GetNetworkTypeOptions = function() {};
 /** @type {function(!wx.NetworkTypeData): void} */
wx.GetNetworkTypeOptions.prototype.success;
 /** @type {function(?): void} */
wx.GetNetworkTypeOptions.prototype.fail;
 /** @type {function(?): void} */
wx.GetNetworkTypeOptions.prototype.complete;

/**
 * 获取网络类型。
 * @param {!wx.GetNetworkTypeOptions} options
 * @return {void}
 */
wx.getNetworkType = function(options) {};
/**
 * @record
 * @struct
 */
wx.SystemInfo = function() {};
 /** @type {string} */
wx.SystemInfo.prototype.model;
 /** @type {number} */
wx.SystemInfo.prototype.pixelRatio;
 /** @type {number} */
wx.SystemInfo.prototype.windowWidth;
 /** @type {number} */
wx.SystemInfo.prototype.windowHeight;
 /** @type {string} */
wx.SystemInfo.prototype.language;
 /** @type {string} */
wx.SystemInfo.prototype.version;
/**
 * @record
 * @struct
 */
wx.GetSystemInfoOptions = function() {};
 /** @type {function(!wx.SystemInfo): void} */
wx.GetSystemInfoOptions.prototype.success;
 /** @type {function(?): void} */
wx.GetSystemInfoOptions.prototype.fail;
 /** @type {function(?): void} */
wx.GetSystemInfoOptions.prototype.complete;

/**
 * 获取系统信息。
 * @param {!wx.GetSystemInfoOptions} options
 * @return {void}
 */
wx.getSystemInfo = function(options) {};
/**
 * @record
 * @struct
 */
wx.AccelerometerData = function() {};
 /** @type {number} */
wx.AccelerometerData.prototype.x;
 /** @type {number} */
wx.AccelerometerData.prototype.y;
 /** @type {number} */
wx.AccelerometerData.prototype.z;

/** @typedef {function(!wx.AccelerometerData): void} */
wx.AccelerometerChangeCallback;

/**
 * 监听重力感应数据，频率：5次/秒
 * @param {function(!wx.AccelerometerData): void} callback
 * @return {void}
 */
wx.onAccelerometerChange = function(callback) {};
/**
 * @record
 * @struct
 */
wx.CompassData = function() {};
 /** @type {number} */
wx.CompassData.prototype.direction;

/** @typedef {function(!wx.CompassData): void} */
wx.CompassChangeCallback;

/**
 * @param {function(!wx.CompassData): void} callback
 * @return {void}
 */
wx.onCompassChange = function(callback) {};
/**
 * @record
 * @struct
 */
wx.SetNavigationBarTitleOptions = function() {};
 /** @type {string} */
wx.SetNavigationBarTitleOptions.prototype.title;
 /** @type {function(?): void} */
wx.SetNavigationBarTitleOptions.prototype.success;
 /** @type {function(?): void} */
wx.SetNavigationBarTitleOptions.prototype.fail;
 /** @type {function(?): void} */
wx.SetNavigationBarTitleOptions.prototype.complete;

/**
 * 动态设置当前页面的标题。
 * @param {!wx.SetNavigationBarTitleOptions} options
 * @return {void}
 */
wx.setNavigationBarTitle = function(options) {};

/**
 * 在当前页面显示导航条加载动画。
 * @return {void}
 */
wx.showNavigationBarLoading = function() {};

/**
 * 隐藏导航条加载动画。
 * @return {void}
 */
wx.hideNavigationBarLoading = function() {};
/**
 * @record
 * @struct
 */
wx.NavigateToOptions = function() {};
 /** @type {string} */
wx.NavigateToOptions.prototype.url;
 /** @type {function(?): void} */
wx.NavigateToOptions.prototype.success;
 /** @type {function(?): void} */
wx.NavigateToOptions.prototype.fail;
 /** @type {function(?): void} */
wx.NavigateToOptions.prototype.complete;

/**
 * 保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面。
 * 
 * 注意：为了不让用户在使用小程序时造成困扰，
 * 我们规定页面路径只能是五层，请尽量避免多层级的交互方式。
 * @param {!wx.NavigateToOptions} options
 * @return {void}
 */
wx.navigateTo = function(options) {};
/**
 * @record
 * @struct
 */
wx.RedirectToOptions = function() {};
 /** @type {string} */
wx.RedirectToOptions.prototype.url;
 /** @type {function(?): void} */
wx.RedirectToOptions.prototype.success;
 /** @type {function(?): void} */
wx.RedirectToOptions.prototype.fail;
 /** @type {function(?): void} */
wx.RedirectToOptions.prototype.complete;

/**
 * 关闭当前页面，跳转到应用内的某个页面。
 * @param {!wx.RedirectToOptions} options
 * @return {void}
 */
wx.redirectTo = function(options) {};

/**
 * 关闭当前页面，回退前一页面。
 * @return {void}
 */
wx.navigateBack = function() {};

/** @typedef {string} */
wx.TimingFunction;
/**
 * @record
 * @struct
 */
wx.CreateAnimationOptions = function() {};
 /** @type {number} */
wx.CreateAnimationOptions.prototype.duration;
 /** @type {string} */
wx.CreateAnimationOptions.prototype.timingFunction;
 /** @type {number} */
wx.CreateAnimationOptions.prototype.delay;
 /** @type {string} */
wx.CreateAnimationOptions.prototype.transformOrigin;
/**
 * @record
 * @struct
 */
wx.Animator = function() {};
 /** @type {!Array<!wx.AnimationAction>} */
wx.Animator.prototype.actions;
/**
 * @record
 * @struct
 */
wx.AnimationAction = function() {};
 /** @type {!Array<!wx.Animate>} */
wx.AnimationAction.prototype.animates;
 /** @type {!wx.AnimationActionOption} */
wx.AnimationAction.prototype.option;
/**
 * @record
 * @struct
 */
wx.AnimationActionOption = function() {};
 /** @type {string} */
wx.AnimationActionOption.prototype.transformOrigin;
 /** @type {!wx.AnimationTransition} */
wx.AnimationActionOption.prototype.transition;
/**
 * @record
 * @struct
 */
wx.AnimationTransition = function() {};
 /** @type {number} */
wx.AnimationTransition.prototype.delay;
 /** @type {number} */
wx.AnimationTransition.prototype.duration;
 /** @type {string} */
wx.AnimationTransition.prototype.timingFunction;
/**
 * @record
 * @struct
 */
wx.Animate = function() {};
 /** @type {string} */
wx.Animate.prototype.type;
 /** @type {!Array<?>} */
wx.Animate.prototype.args;

/**
 * 创建一个动画实例animation。调用实例的方法来描述动画。
 * 最后通过动画实例的export方法导出动画数据传递给组件的animation属性。
 * 
 * 注意: export 方法每次调用后会清掉之前的动画操作
 * @param {!wx.CreateAnimationOptions=} options
 * @return {!wx.Animation}
 */
wx.createAnimation = function(options) {};
/**
 * @record
 * @struct
 */
wx.Animation = function() {};

/**
 * 调用动画操作方法后要调用 step() 来表示一组动画完成，
 * 可以在一组动画中调用任意多个动画方法，
 * 一组动画中的所有动画会同时开始，
 * 一组动画完成后才会进行下一组动画。
 * @param {!wx.CreateAnimationOptions=} options
 * @return {void}
 */
wx.Animation.prototype.step = function(options) {};

/**
 * 导出动画操作
 * 
 * 注意: export 方法每次调用后会清掉之前的动画操作
 * @return {!wx.Animator}
 */
wx.Animation.prototype.export = function() {};

/**
 * 透明度，参数范围 0~1
 * @param {number} value
 * @return {!wx.Animation}
 */
wx.Animation.prototype.opacity = function(value) {};

/**
 * 颜色值
 * @param {string} color
 * @return {!wx.Animation}
 */
wx.Animation.prototype.backgroundColor = function(color) {};

/**
 * 长度值，如果传入 Number 则默认使用 px，可传入其他自定义单位的长度值
 * @param {number} length
 * @return {!wx.Animation}
 */
wx.Animation.prototype.width = function(length) {};

/**
 * 长度值，如果传入 Number 则默认使用 px，可传入其他自定义单位的长度值
 * @param {number} length
 * @return {!wx.Animation}
 */
wx.Animation.prototype.height = function(length) {};

/**
 * 长度值，如果传入 Number 则默认使用 px，可传入其他自定义单位的长度值
 * @param {number} length
 * @return {!wx.Animation}
 */
wx.Animation.prototype.top = function(length) {};

/**
 * 长度值，如果传入 Number 则默认使用 px，可传入其他自定义单位的长度值
 * @param {number} length
 * @return {!wx.Animation}
 */
wx.Animation.prototype.left = function(length) {};

/**
 * 长度值，如果传入 Number 则默认使用 px，可传入其他自定义单位的长度值
 * @param {number} length
 * @return {!wx.Animation}
 */
wx.Animation.prototype.bottom = function(length) {};

/**
 * 长度值，如果传入 Number 则默认使用 px，可传入其他自定义单位的长度值
 * @param {number} length
 * @return {!wx.Animation}
 */
wx.Animation.prototype.right = function(length) {};

/**
 * deg的范围-180~180，从原点顺时针旋转一个deg角度
 * @param {number} deg
 * @return {!wx.Animation}
 */
wx.Animation.prototype.rotate = function(deg) {};

/**
 * deg的范围-180~180，在X轴旋转一个deg角度
 * @param {number} deg
 * @return {!wx.Animation}
 */
wx.Animation.prototype.rotateX = function(deg) {};

/**
 * deg的范围-180~180，在Y轴旋转一个deg角度
 * @param {number} deg
 * @return {!wx.Animation}
 */
wx.Animation.prototype.rotateY = function(deg) {};

/**
 * deg的范围-180~180，在Z轴旋转一个deg角度
 * @param {number} deg
 * @return {!wx.Animation}
 */
wx.Animation.prototype.rotateZ = function(deg) {};

/**
 * 同transform-function rotate3d
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @param {number} deg
 * @return {!wx.Animation}
 */
wx.Animation.prototype.rotate3d = function(x, y, z, deg) {};

/**
 * 一个参数时，表示在X轴、Y轴同时缩放sx倍数；
 * 两个参数时表示在X轴缩放sx倍数，在Y轴缩放sy倍数
 * @param {number} sx
 * @param {number=} sy
 * @return {!wx.Animation}
 */
wx.Animation.prototype.scale = function(sx, sy) {};

/**
 * 在X轴缩放sx倍数
 * @param {number} sx
 * @return {!wx.Animation}
 */
wx.Animation.prototype.scaleX = function(sx) {};

/**
 * 在Y轴缩放sy倍数
 * @param {number} sy
 * @return {!wx.Animation}
 */
wx.Animation.prototype.scaleY = function(sy) {};

/**
 * 在Z轴缩放sy倍数
 * @param {number} sz
 * @return {!wx.Animation}
 */
wx.Animation.prototype.scaleZ = function(sz) {};

/**
 * 在X轴缩放sx倍数，在Y轴缩放sy倍数，在Z轴缩放sz倍数
 * @param {number} sx
 * @param {number} sy
 * @param {number} sz
 * @return {!wx.Animation}
 */
wx.Animation.prototype.scale3d = function(sx, sy, sz) {};

/**
 * 一个参数时，表示在X轴偏移tx，单位px；
 * 两个参数时，表示在X轴偏移tx，在Y轴偏移ty，单位px。
 * @param {number} tx
 * @param {number=} ty
 * @return {!wx.Animation}
 */
wx.Animation.prototype.translate = function(tx, ty) {};

/**
 * 在X轴偏移tx，单位px
 * @param {number} tx
 * @return {!wx.Animation}
 */
wx.Animation.prototype.translateX = function(tx) {};

/**
 * 在Y轴偏移tx，单位px
 * @param {number} ty
 * @return {!wx.Animation}
 */
wx.Animation.prototype.translateY = function(ty) {};

/**
 * 在Z轴偏移tx，单位px
 * @param {number} tz
 * @return {!wx.Animation}
 */
wx.Animation.prototype.translateZ = function(tz) {};

/**
 * 在X轴偏移tx，在Y轴偏移ty，在Z轴偏移tz，单位px
 * @param {number} tx
 * @param {number} ty
 * @param {number} tz
 * @return {!wx.Animation}
 */
wx.Animation.prototype.translate3d = function(tx, ty, tz) {};

/**
 * 参数范围-180~180；
 * 一个参数时，Y轴坐标不变，X轴坐标延顺时针倾斜ax度；
 * 两个参数时，分别在X轴倾斜ax度，在Y轴倾斜ay度
 * @param {number} ax
 * @param {number=} ay
 * @return {!wx.Animation}
 */
wx.Animation.prototype.skew = function(ax, ay) {};

/**
 * 参数范围-180~180；Y轴坐标不变，X轴坐标延顺时针倾斜ax度
 * @param {number} ax
 * @return {!wx.Animation}
 */
wx.Animation.prototype.skewX = function(ax) {};

/**
 * 参数范围-180~180；X轴坐标不变，Y轴坐标延顺时针倾斜ay度
 * @param {number} ay
 * @return {!wx.Animation}
 */
wx.Animation.prototype.skewY = function(ay) {};

/**
 * 同transform-function matrix
 * @param {number} a
 * @param {number} b
 * @param {number} c
 * @param {number} d
 * @param {number} tx
 * @param {number} ty
 * @return {!wx.Animation}
 */
wx.Animation.prototype.matrix = function(a, b, c, d, tx, ty) {};

/**
 * 同transform-function matrix3d
 * @param {number} a1
 * @param {number} b1
 * @param {number} c1
 * @param {number} d1
 * @param {number} a2
 * @param {number} b2
 * @param {number} c2
 * @param {number} d2
 * @param {number} a3
 * @param {number} b3
 * @param {number} c3
 * @param {number} d3
 * @param {number} a4
 * @param {number} b4
 * @param {number} c4
 * @param {number} d4
 * @return {!wx.Animation}
 */
wx.Animation.prototype.matrix3d = function(a1, b1, c1, d1, a2, b2, c2, d2, a3, b3, c3, d3, a4, b4, c4, d4) {};
/**
 * @record
 * @struct
 */
wx.CanvasAction = function() {};
 /** @type {string} */
wx.CanvasAction.prototype.method;
 /** @type {(!Array<!wx.CanvasAction>|!Array<(string|number)>)} */
wx.CanvasAction.prototype.data;

/** @typedef {string} */
wx.LineCapType;

/** @typedef {string} */
wx.LineJoinType;
/**
 * @record
 * @struct
 */
wx.CanvasContext = function() {};

/**
 * 获取当前context上存储的绘图动作
 * @return {!Array<!wx.CanvasAction>}
 */
wx.CanvasContext.prototype.getActions = function() {};

/**
 * 清空当前的存储绘图动作
 * @return {void}
 */
wx.CanvasContext.prototype.clearActions = function() {};

/**
 * 对横纵坐标进行缩放
 * 在调用scale方法后，之后创建的路径其横纵坐标会被缩放。
 * 多次调用scale，倍数会相乘。
 * 
 * @param {number} scaleWidth
 * @param {number=} scaleHeight
 * @return {void}
 */
wx.CanvasContext.prototype.scale = function(scaleWidth, scaleHeight) {};

/**
 * 对坐标轴进行顺时针旋转
 * 以原点为中心，原点可以用 translate方法修改。
 * 顺时针旋转当前坐标轴。多次调用rotate，旋转的角度会叠加。
 * 
 * @param {number} rotate
 * @return {void}
 */
wx.CanvasContext.prototype.rotate = function(rotate) {};

/**
 * 对坐标原点进行缩放
 * 对当前坐标系的原点(0, 0)进行变换，默认的坐标系原点为页面左上角。
 * 
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
wx.CanvasContext.prototype.translate = function(x, y) {};

/**
 * 保存当前坐标轴的缩放、旋转、平移信息
 * @return {void}
 */
wx.CanvasContext.prototype.save = function() {};

/**
 * 恢复之前保存过的坐标轴的缩放、旋转、平移信息
 * @return {void}
 */
wx.CanvasContext.prototype.restore = function() {};

/**
 * 在给定的矩形区域内，清除画布上的像素
 * 清除画布上在该矩形区域内的内容。
 * 
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
wx.CanvasContext.prototype.clearRect = function(x, y, width, height) {};

/**
 * 在画布上绘制被填充的文本
 * 
 * @param {string} text
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
wx.CanvasContext.prototype.fillText = function(text, x, y) {};

/**
 * 在画布上绘制图像
 * 绘制图像，图像保持原始尺寸。
 * 
 * @param {string} imageResource
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
wx.CanvasContext.prototype.drawImage = function(imageResource, x, y) {};

/**
 * 对当前路径进行填充
 * @return {void}
 */
wx.CanvasContext.prototype.fill = function() {};

/**
 * 对当前路径进行描边
 * @return {void}
 */
wx.CanvasContext.prototype.stroke = function() {};

/**
 * 开始一个路径
 * 开始创建一个路径，需要调用fill或者stroke才会使用路径进行填充或描边。
 * 同一个路径内的多次setFillStyle、setStrokeStyle、setLineWidth等设置，
 * 以最后一次设置为准。
 * @return {void}
 */
wx.CanvasContext.prototype.beginPath = function() {};

/**
 * 关闭一个路径
 * @return {void}
 */
wx.CanvasContext.prototype.closePath = function() {};

/**
 * 把路径移动到画布中的指定点，但不创建线条。
 * 
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
wx.CanvasContext.prototype.moveTo = function(x, y) {};

/**
 * 在当前位置添加一个新点，然后在画布中创建从该点到最后指定点的路径。
 * 
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
wx.CanvasContext.prototype.lineTo = function(x, y) {};

/**
 * 添加一个矩形路径到当前路径。
 * 
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
wx.CanvasContext.prototype.rect = function(x, y, width, height) {};

/**
 * 添加一个弧形路径到当前路径，顺时针绘制。
 * 
 * @param {number} x
 * @param {number} y
 * @param {number} radius
 * @param {number} startAngle
 * @param {number} endAngle
 * @param {boolean} sweepAngle
 * @return {void}
 */
wx.CanvasContext.prototype.arc = function(x, y, radius, startAngle, endAngle, sweepAngle) {};

/**
 * 创建二次方贝塞尔曲线
 * 
 * @param {number} cpx
 * @param {number} cpy
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
wx.CanvasContext.prototype.quadraticCurveTo = function(cpx, cpy, x, y) {};

/**
 * 创建三次方贝塞尔曲线
 * 
 * @param {number} cp1x
 * @param {number} cp1y
 * @param {number} cp2x
 * @param {number} cp2y
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
wx.CanvasContext.prototype.bezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {};

/**
 * 设置填充样式
 * 
 * @param {string} color
 * @return {void}
 */
wx.CanvasContext.prototype.setFillStyle = function(color) {};

/**
 * 设置线条样式
 * 
 * @param {string} color
 * @return {void}
 */
wx.CanvasContext.prototype.setStrokeStyle = function(color) {};

/**
 * 设置阴影
 * 
 * @param {number} offsetX
 * @param {number} offsetY
 * @param {number} blur
 * @param {string} color
 * @return {void}
 */
wx.CanvasContext.prototype.setShadow = function(offsetX, offsetY, blur, color) {};

/**
 * 设置字体大小
 * 
 * @param {number} fontSize
 * @return {void}
 */
wx.CanvasContext.prototype.setFontSize = function(fontSize) {};

/**
 * 设置线条端点的样式
 * 
 * @param {string} lineCap
 * @return {void}
 */
wx.CanvasContext.prototype.setLineCap = function(lineCap) {};

/**
 * 设置两线相交处的样式
 *  \@param {LineJoinType} lineJoin 两条线相交时，所创建的拐角类型
 * @param {string} lineJoin
 * @return {void}
 */
wx.CanvasContext.prototype.setLineJoin = function(lineJoin) {};

/**
 * 设置线条宽度
 * 
 * @param {number} lineWidth
 * @return {void}
 */
wx.CanvasContext.prototype.setLineWidth = function(lineWidth) {};

/**
 * 设置最大斜接长度，斜接长度指的是在两条线交汇处内角和外角之间的距离。
 * 当 setLineJoin为 miter 时才有效。
 * 超过最大倾斜长度的，连接处将以 lineJoin 为 bevel 来显示
 * 
 * @param {number} miterLimit
 * @return {void}
 */
wx.CanvasContext.prototype.setMiterLimit = function(miterLimit) {};

/**
 * 创建并返回绘图上下文context对象。
 * context只是一个记录方法调用的容器，
 * 用于生成记录绘制行为的actions数组。c
 * ontext跟<canvas/>不存在对应关系，
 * 一个context生成画布的绘制动作数组可以应用于多个<canvas/>。
 * @return {!wx.CanvasContext}
 */
wx.createContext = function() {};
/**
 * @record
 * @struct
 */
wx.DrawCanvasOptions = function() {};
 /** @type {(string|number)} */
wx.DrawCanvasOptions.prototype.canvasId;
 /** @type {!Array<!wx.CanvasAction>} */
wx.DrawCanvasOptions.prototype.actions;

/**
 * 绘制画布
 * @param {!wx.DrawCanvasOptions} options
 * @return {void}
 */
wx.drawCanvas = function(options) {};

/**
 * 收起键盘。
 * @return {void}
 */
wx.hideKeyboard = function() {};
/**
 * @record
 * @struct
 */
wx.LoginResponse = function() {};
 /** @type {string} */
wx.LoginResponse.prototype.errMsg;
 /** @type {string} */
wx.LoginResponse.prototype.code;
/**
 * @record
 * @struct
 */
wx.LoginOptions = function() {};
 /** @type {function(!wx.LoginResponse): void} */
wx.LoginOptions.prototype.success;
 /** @type {function(?): void} */
wx.LoginOptions.prototype.fail;
 /** @type {function(?): void} */
wx.LoginOptions.prototype.complete;

/**
 * 调用接口获取登录凭证（code）进而换取用户登录态信息，
 * 包括用户的唯一标识（openid） 及本次登录的 会话密钥（session_key）。
 * 用户数据的加解密通讯需要依赖会话密钥完成。
 * @param {!wx.LoginOptions} option
 * @return {void}
 */
wx.login = function(option) {};
/**
 * @record
 * @struct
 */
wx.UserInfo = function() {};
 /** @type {string} */
wx.UserInfo.prototype.nickName;
 /** @type {string} */
wx.UserInfo.prototype.avatarUrl;
 /** @type {number} */
wx.UserInfo.prototype.gender;
 /** @type {string} */
wx.UserInfo.prototype.province;
 /** @type {string} */
wx.UserInfo.prototype.city;
 /** @type {string} */
wx.UserInfo.prototype.country;
/**
 * @record
 * @struct
 */
wx.UserInfoResponse = function() {};
 /** @type {!wx.UserInfo} */
wx.UserInfoResponse.prototype.userInfo;
 /** @type {string} */
wx.UserInfoResponse.prototype.rawData;
 /** @type {string} */
wx.UserInfoResponse.prototype.signature;
 /** @type {string} */
wx.UserInfoResponse.prototype.encryptData;
/**
 * @record
 * @struct
 */
wx.GetUserInfoOptions = function() {};
 /** @type {function(!wx.UserInfoResponse): void} */
wx.GetUserInfoOptions.prototype.success;
 /** @type {function(?): void} */
wx.GetUserInfoOptions.prototype.fail;
 /** @type {function(?): void} */
wx.GetUserInfoOptions.prototype.complete;

/**
 * 获取用户信息，需要先调用 wx.login 接口。
 * @param {!wx.GetUserInfoOptions} options
 * @return {void}
 */
wx.getUserInfo = function(options) {};

/** @typedef {string} */
wx.PaymentSignType;
/**
 * @record
 * @struct
 */
wx.RequestPaymentOptions = function() {};
 /** @type {(string|number)} */
wx.RequestPaymentOptions.prototype.timeStamp;
 /** @type {string} */
wx.RequestPaymentOptions.prototype.nonceStr;
 /** @type {string} */
wx.RequestPaymentOptions.prototype.package;
 /** @type {string} */
wx.RequestPaymentOptions.prototype.signType;
 /** @type {string} */
wx.RequestPaymentOptions.prototype.paySign;
 /** @type {function(?): void} */
wx.RequestPaymentOptions.prototype.success;
 /** @type {function(?): void} */
wx.RequestPaymentOptions.prototype.fail;
 /** @type {function(?): void} */
wx.RequestPaymentOptions.prototype.complete;

/**
 * 发起微信支付。
 * @param {!wx.RequestPaymentOptions} options
 * @return {void}
 */
wx.requestPayment = function(options) {};
/**
 * @record
 * @struct
 */
function Page() {}

/**
 * setData 函数用于将数据从逻辑层发送到视图层，
 * 同时改变对应的 this.data 的值。
 * 注意：
 *    1. 直接修改 this.data 无效，无法改变页面的状态，还会造成数据不一致。
 *    2. 单次设置的数据不能超过1024kB，请尽量避免一次设置过多的数据。
 * @param {?} data
 * @return {void}
 */
Page.prototype.setData = function(data) {};
/**
 * @record
 * @struct
 */
function PageConstructor() {}

/* TODO: CallSignature:  */
 /** @type {!PageConstructor} */
var Page;
/**
 * @record
 * @struct
 */
function App() {}

/**
 * getCurrentPage() 函数用户获取当前页面的实例。
 * @return {?}
 */
App.prototype.getCurrentPage = function() {};
/**
 * @record
 * @struct
 */
function AppConstructor() {}

/* TODO: CallSignature:  */
 /** @type {!AppConstructor} */
var App;

/**
 * 我们提供了全局的 getApp() 函数，可以获取到小程序实例。
 * @return {?}
 */
function getApp() {}
