/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/browser-sync/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */
/** @const */
var browserSync = {};
/**
 * @record
 * @struct
 */
browserSync.Options = function() {};
 /** @type {(boolean|!browserSync.UIOptions)} */
browserSync.Options.prototype.ui;
 /** @type {(string|!Array<(string|!browserSync.FileCallback)>)} */
browserSync.Options.prototype.files;
 /** @type {?} */
browserSync.Options.prototype.watchOptions;
 /** @type {!browserSync.ServerOptions} */
browserSync.Options.prototype.server;
 /** @type {(string|boolean|!browserSync.ProxyOptions)} */
browserSync.Options.prototype.proxy;
 /** @type {number} */
browserSync.Options.prototype.port;
 /** @type {!Array<string>} */
browserSync.Options.prototype.serveStatic;
 /** @type {boolean} */
browserSync.Options.prototype.https;
 /** @type {(boolean|!browserSync.GhostOptions)} */
browserSync.Options.prototype.ghostMode;
 /** @type {string} */
browserSync.Options.prototype.logLevel;
 /** @type {string} */
browserSync.Options.prototype.logPrefix;
 /** @type {boolean} */
browserSync.Options.prototype.logConnections;
 /** @type {boolean} */
browserSync.Options.prototype.logFileChanges;
 /** @type {boolean} */
browserSync.Options.prototype.logSnippet;
 /** @type {!browserSync.SnippetOptions} */
browserSync.Options.prototype.snippetOptions;
 /** @type {(boolean|!Array<!browserSync.RewriteRules>)} */
browserSync.Options.prototype.rewriteRules;
 /** @type {(string|boolean)} */
browserSync.Options.prototype.tunnel;
 /** @type {boolean} */
browserSync.Options.prototype.online;
 /** @type {(string|boolean)} */
browserSync.Options.prototype.open;
 /** @type {(string|!Array<string>)} */
browserSync.Options.prototype.browser;
 /** @type {boolean} */
browserSync.Options.prototype.cors;
 /** @type {boolean} */
browserSync.Options.prototype.xip;
 /** @type {boolean} */
browserSync.Options.prototype.reloadOnRestart;
 /** @type {boolean} */
browserSync.Options.prototype.notify;
 /** @type {boolean} */
browserSync.Options.prototype.scrollProportionally;
 /** @type {number} */
browserSync.Options.prototype.scrollThrottle;
 /** @type {string} */
browserSync.Options.prototype.scrollRestoreTechnique;
 /** @type {!Array<string>} */
browserSync.Options.prototype.scrollElements;
 /** @type {!Array<string>} */
browserSync.Options.prototype.scrollElementMapping;
 /** @type {number} */
browserSync.Options.prototype.reloadDelay;
 /** @type {number} */
browserSync.Options.prototype.reloadDebounce;
 /** @type {!Array<?>} */
browserSync.Options.prototype.plugins;
 /** @type {boolean} */
browserSync.Options.prototype.injectChanges;
 /** @type {string} */
browserSync.Options.prototype.startPath;
 /** @type {boolean} */
browserSync.Options.prototype.minify;
 /** @type {string} */
browserSync.Options.prototype.host;
 /** @type {boolean} */
browserSync.Options.prototype.codeSync;
 /** @type {boolean} */
browserSync.Options.prototype.timestamps;
 /** @type {function(string): string} */
browserSync.Options.prototype.scriptPath;
 /** @type {!browserSync.SocketOptions} */
browserSync.Options.prototype.socket;
 /** @type {(!browserSync.MiddlewareHandler|!browserSync.PerRouteMiddleware|!Array<(!browserSync.MiddlewareHandler|!browserSync.PerRouteMiddleware)>)} */
browserSync.Options.prototype.middleware;
/**
 * @record
 * @struct
 */
browserSync.Hash = function() {};

/* TODO: IndexSignature: browserSync */
/**
 * @record
 * @struct
 */
browserSync.UIOptions = function() {};
 /** @type {number} */
browserSync.UIOptions.prototype.port;
 /** @type {{port: number}} */
browserSync.UIOptions.prototype.weinre;
/**
 * @record
 * @struct
 */
browserSync.FileCallback = function() {};
 /** @type {(string|!Array<string>)} */
browserSync.FileCallback.prototype.match;
 /** @type {function(string, string): ?} */
browserSync.FileCallback.prototype.fn;
 /** @type {?} */
browserSync.FileCallback.prototype.options;
/**
 * @record
 * @struct
 */
browserSync.ServerOptions = function() {};
 /** @type {(string|!Array<string>)} */
browserSync.ServerOptions.prototype.baseDir;
 /** @type {boolean} */
browserSync.ServerOptions.prototype.directory;
 /** @type {string} */
browserSync.ServerOptions.prototype.index;
 /** @type {!browserSync.Hash<string>} */
browserSync.ServerOptions.prototype.routes;
 /** @type {!Array<(!browserSync.MiddlewareHandler|!browserSync.PerRouteMiddleware)>} */
browserSync.ServerOptions.prototype.middleware;
/**
 * @record
 * @struct
 */
browserSync.ProxyOptions = function() {};
 /** @type {string} */
browserSync.ProxyOptions.prototype.target;
 /** @type {!browserSync.MiddlewareHandler} */
browserSync.ProxyOptions.prototype.middleware;
 /** @type {boolean} */
browserSync.ProxyOptions.prototype.ws;
 /** @type {function(?): !browserSync.Hash<?>} */
browserSync.ProxyOptions.prototype.reqHeaders;
 /** @type {function(!ServerResponse, !IncomingMessage, !Function): ?} */
browserSync.ProxyOptions.prototype.proxyRes;
/**
 * @record
 * @struct
 */
browserSync.MiddlewareHandler = function() {};

/* TODO: CallSignature: browserSync */
/**
 * @record
 * @struct
 */
browserSync.PerRouteMiddleware = function() {};
 /** @type {string} */
browserSync.PerRouteMiddleware.prototype.route;
 /** @type {!browserSync.MiddlewareHandler} */
browserSync.PerRouteMiddleware.prototype.handle;
/**
 * @record
 * @struct
 */
browserSync.GhostOptions = function() {};
 /** @type {boolean} */
browserSync.GhostOptions.prototype.clicks;
 /** @type {boolean} */
browserSync.GhostOptions.prototype.scroll;
 /** @type {boolean} */
browserSync.GhostOptions.prototype.forms;
/**
 * @record
 * @struct
 */
browserSync.SnippetOptions = function() {};
 /** @type {string} */
browserSync.SnippetOptions.prototype.ignorePaths;
 /** @type {{match: !RegExp, fn: function(string, string): ?}} */
browserSync.SnippetOptions.prototype.rule;
/**
 * @record
 * @struct
 */
browserSync.SocketOptions = function() {};
 /** @type {string} */
browserSync.SocketOptions.prototype.path;
 /** @type {string} */
browserSync.SocketOptions.prototype.clientPath;
 /** @type {string} */
browserSync.SocketOptions.prototype.namespace;
 /** @type {string} */
browserSync.SocketOptions.prototype.domain;
 /** @type {number} */
browserSync.SocketOptions.prototype.port;
 /** @type {{heartbeatTimeout: number}} */
browserSync.SocketOptions.prototype.clients;
/**
 * @record
 * @struct
 */
browserSync.RewriteRules = function() {};
 /** @type {!RegExp} */
browserSync.RewriteRules.prototype.match;
 /** @type {function(string): string} */
browserSync.RewriteRules.prototype.fn;
/**
 * @record
 * @struct
 */
browserSync.StreamOptions = function() {};
 /** @type {boolean} */
browserSync.StreamOptions.prototype.once;
 /** @type {(string|!RegExp|function(string): boolean|!Array<(string|!RegExp|?)>)} */
browserSync.StreamOptions.prototype.match;
/**
 * @extends {browserSync.BrowserSyncInstance}
 * @record
 * @struct
 */
browserSync.BrowserSyncStatic = function() {};

/* TODO: CallSignature: browserSync */

/**
 * Create a Browsersync instance
 * @param {string=} name an identifier that can used for retrieval later
 * @return {!browserSync.BrowserSyncInstance}
 */
browserSync.BrowserSyncStatic.prototype.create = function(name) {};

/**
 * Get a single instance by name. This is useful if you have your build scripts in separate files
 * @param {string} name the identifier used for retrieval
 * @return {!browserSync.BrowserSyncInstance}
 */
browserSync.BrowserSyncStatic.prototype.get = function(name) {};

/**
 * Check if an instance has been created.
 * @param {string} name the name of the instance
 * @return {boolean}
 */
browserSync.BrowserSyncStatic.prototype.has = function(name) {};
/**
 * @record
 * @struct
 */
browserSync.BrowserSyncInstance = function() {};
 /** @type {string} */
browserSync.BrowserSyncInstance.prototype.name;
 /** @type {!NodeJS.EventEmitter} */
browserSync.BrowserSyncInstance.prototype.emitter;
 /** @type {boolean} */
browserSync.BrowserSyncInstance.prototype.active;
 /** @type {boolean} */
browserSync.BrowserSyncInstance.prototype.paused;

/**
 * Start the Browsersync service. This will launch a server, proxy or start the snippet mode
 * depending on your use-case.
 * @param {!browserSync.Options=} config
 * @param {function(!Error, !Object): ?=} callback
 * @return {!browserSync.BrowserSyncInstance}
 */
browserSync.BrowserSyncInstance.prototype.init = function(config, callback) {};

/**
 * Reload the browser
 * The reload method will inform all browsers about changed files and will either cause the browser
 * to refresh, or inject the files where possible.
 * Reload a single file
 * The reload method will inform all browsers about changed files and will either cause the browser
 * to refresh, or inject the files where possible.
 * Reload multiple files
 * The reload method will inform all browsers about changed files and will either cause the browser
 * to refresh, or inject the files where possible.
 * The reload method will inform all browsers about changed files and will either cause the browser
 * to refresh, or inject the files where possible.
 * @param {string|!Array<string>|{stream: boolean}=} file_or_files_or_options
 * @return {void|!NodeJS.ReadWriteStream}
 */
browserSync.BrowserSyncInstance.prototype.reload = function(file_or_files_or_options) {};

/**
 * The stream method returns a transform stream and can act once or on many files.
 * @param {!browserSync.StreamOptions=} opts Configuration for the stream method
 * @return {!NodeJS.ReadWriteStream}
 */
browserSync.BrowserSyncInstance.prototype.stream = function(opts) {};

/**
 * Helper method for browser notifications
 * @param {string} message Can be a simple message such as 'Connected' or HTML
 * @param {number=} timeout How long the message will remain in the browser. \@since 1.3.0
 * @return {void}
 */
browserSync.BrowserSyncInstance.prototype.notify = function(message, timeout) {};

/**
 * This method will close any running server, stop file watching & exit the current process.
 * @return {void}
 */
browserSync.BrowserSyncInstance.prototype.exit = function() {};

/**
 * Stand alone file-watcher. Use this along with Browsersync to create your own, minimal build system
 * @param {string} patterns
 * @param {?=} opts
 * @param {function(string, !Stats): ?=} fn
 * @return {!NodeJS.EventEmitter}
 */
browserSync.BrowserSyncInstance.prototype.watch = function(patterns, opts, fn) {};

/**
 * Method to pause file change events
 * @return {void}
 */
browserSync.BrowserSyncInstance.prototype.pause = function() {};

/**
 * Method to resume paused watchers
 * @return {void}
 */
browserSync.BrowserSyncInstance.prototype.resume = function() {};
 /** @type {!browserSync.BrowserSyncStatic} */
var browserSync;

/* TODO: ExportAssignment in  */
