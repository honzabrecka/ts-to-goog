/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/hubot/index.d.ts:
/** @const */
var Hubot = {};
/**
 * @constructor
 * @struct
 */
Hubot.Brain = function() {};

/**
 * @param {?} id
 * @return {?}
 */
Hubot.Brain.prototype.userForId = function(id) {};

/**
 * @param {string} name
 * @return {?}
 */
Hubot.Brain.prototype.userForName = function(name) {};
/**
 * @constructor
 * @struct
 */
Hubot.User = function() {};
 /** @type {?} */
Hubot.User.prototype.id;
 /** @type {string} */
Hubot.User.prototype.name;
/**
 * @constructor
 * @struct
 */
Hubot.Message = function() {};
 /** @type {!Hubot.User} */
Hubot.Message.prototype.user;
 /** @type {string} */
Hubot.Message.prototype.text;
 /** @type {string} */
Hubot.Message.prototype.id;

/**
 * @constructor
 * @struct
 * @param {!Hubot.Robot} robot
 * @param {!Hubot.Message} message
 * @param {!RegExpMatchArray} match
 */
Hubot.Response = function(robot, message, match) {};
 /** @type {!RegExpMatchArray} */
Hubot.Response.prototype.match;
 /** @type {!Hubot.Message} */
Hubot.Response.prototype.message;

/**
 * @param {...string} strings
 * @return {void}
 */
Hubot.Response.prototype.send = function(strings) {};

/**
 * @param {...string} strings
 * @return {void}
 */
Hubot.Response.prototype.reply = function(strings) {};

/**
 * @template T
 * @param {!Array<T>} items
 * @return {T}
 */
Hubot.Response.prototype.random = function(items) {};

/** @typedef {function(!Hubot.Response): void} */
Hubot.ListenerCallback;

/**
 * @constructor
 * @struct
 * @param {string} adapterPath
 * @param {string} adapter
 * @param {boolean} httpd
 * @param {string} name
 * @param {string=} alias
 */
Hubot.Robot = function(adapterPath, adapter, httpd, name, alias) {};
 /** @type {!Hubot.Brain} */
Hubot.Robot.prototype.brain;

/**
 * @param {!RegExp} regex
 * @param {function(!Hubot.Response): void|?} callback_or_options
 * @param {function(!Hubot.Response): void=} callback
 * @return {void}
 */
Hubot.Robot.prototype.hear = function(regex, callback_or_options, callback) {};

/**
 * @param {!RegExp} regex
 * @param {function(!Hubot.Response): void|?} callback_or_options
 * @param {function(!Hubot.Response): void=} callback
 * @return {void}
 */
Hubot.Robot.prototype.respond = function(regex, callback_or_options, callback) {};

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
