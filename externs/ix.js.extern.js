/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/ix.js/index.d.ts:
/**
 * @record
 * @struct
 */
Ix.Observer = function() {};

/**
 * @param {T} value
 * @return {void}
 */
Ix.Observer.prototype.onNext = function(value) {};

/**
 * @param {!Error} error
 * @return {void}
 */
Ix.Observer.prototype.onError = function(error) {};

/**
 * @return {void}
 */
Ix.Observer.prototype.onCompleted = function() {};

/**
 * @return {boolean}
 */
Ix.Enumerable.prototype.isEmpty = function() {};

/**
 * @template TKey
 * @param {function(T): TKey|function(T): number} keySelector
 * @param {!Ix.Comparer<TKey, TKey>=} comparer
 * @return {?}
 */
Ix.Enumerable.prototype.minBy = function(keySelector, comparer) {};

/**
 * @template TKey
 * @param {function(T): TKey|function(T): number} keySelector
 * @param {!Ix.Comparer<TKey, TKey>=} comparer
 * @return {?}
 */
Ix.Enumerable.prototype.maxBy = function(keySelector, comparer) {};

/**
 * @template TResult
 * @param {function(?): ?<TResult>=} selector
 * @return {?<TResult>|?}
 */
Ix.Enumerable.prototype.share = function(selector) {};

/**
 * @template TResult
 * @param {function(?): ?<TResult>=} selector
 * @return {?<TResult>|?}
 */
Ix.Enumerable.prototype.publish = function(selector) {};

/**
 * @return {?}
 */
Ix.Enumerable.prototype.memoize = function() {};

/**
 * @param {function(T): void|!Ix.Observer<T>} onNext_or_onbserver
 * @param {function(!Error): void=} onError
 * @param {function(): void=} onCompleted
 * @return {?}
 */
Ix.Enumerable.prototype.do = function(onNext_or_onbserver, onError, onCompleted) {};

/**
 * @param {function(T): void|!Ix.Observer<T>} onNext_or_onbserver
 * @param {function(!Error): void=} onError
 * @param {function(): void=} onCompleted
 * @return {?}
 */
Ix.Enumerable.prototype.doAction = function(onNext_or_onbserver, onError, onCompleted) {};

/**
 * @param {number} count
 * @param {number=} skip
 * @return {?}
 */
Ix.Enumerable.prototype.bufferWithCount = function(count, skip) {};

/**
 * @return {?}
 */
Ix.Enumerable.prototype.ignoreElements = function() {};

/**
 * @template TKey
 * @param {function(T): TKey} keySelector
 * @param {!Ix.EqualityComparer<TKey, TKey>=} comparer
 * @return {?}
 */
Ix.Enumerable.prototype.distinctBy = function(keySelector, comparer) {};

/**
 * @template TKey
 * @param {function(T): TKey|boolean=} keySelector_or__
 * @param {!Ix.EqualityComparer<TKey, TKey>|!Ix.EqualityComparer<T, T>=} comparer
 * @return {?}
 */
Ix.Enumerable.prototype.distinctUntilChanged = function(keySelector_or__, comparer) {};

/**
 * @param {function(T): ?} selector
 * @return {?}
 */
Ix.Enumerable.prototype.expand = function(selector) {};

/**
 * @param {...T} values
 * @return {?}
 */
Ix.Enumerable.prototype.startWith = function(values) {};

/**
 * @template TAccumulate
 * @param {TAccumulate|function(T, T): T} seed_or_accumulate
 * @param {function(TAccumulate, T): TAccumulate=} accumulate
 * @return {?<TAccumulate>|?}
 */
Ix.Enumerable.prototype.scan = function(seed_or_accumulate, accumulate) {};

/**
 * @param {number} count
 * @return {?}
 */
Ix.Enumerable.prototype.takeLast = function(count) {};

/**
 * @param {number} count
 * @return {?}
 */
Ix.Enumerable.prototype.skipLast = function(count) {};

/**
 * @param {number=} count
 * @return {?}
 */
Ix.Enumerable.prototype.repeat = function(count) {};

/**
 * @param {function(!Error): ?|?} handler_or_second
 * @param {...?} other
 * @return {?}
 */
Ix.Enumerable.prototype.catch = function(handler_or_second, other) {};

/**
 * @param {function(!Error): ?|?} handler_or_second
 * @param {...?} other
 * @return {?}
 */
Ix.Enumerable.prototype.catchException = function(handler_or_second, other) {};

/**
 * @param {function(): void} finallyAction
 * @return {?}
 */
Ix.Enumerable.prototype.finally = function(finallyAction) {};

/**
 * @param {function(): void} finallyAction
 * @return {?}
 */
Ix.Enumerable.prototype.finallyDo = function(finallyAction) {};

/**
 * @param {?} second
 * @return {?}
 */
Ix.Enumerable.prototype.onErrorResumeNext = function(second) {};

/**
 * @param {number=} retryCount
 * @return {?}
 */
Ix.Enumerable.prototype.retry = function(retryCount) {};

/**
 * @template T
 * @param {!Error} error
 * @return {?<T>}
 */
Ix.EnumerableStatic.prototype.throw = function(error) {};

/**
 * @template T
 * @param {!Error} error
 * @return {?<T>}
 */
Ix.EnumerableStatic.prototype.throwException = function(error) {};

/**
 * @template T
 * @param {function(): ?<T>} enumerableFactory
 * @return {?<T>}
 */
Ix.EnumerableStatic.prototype.defer = function(enumerableFactory) {};

/**
 * @template TState, TResult
 * @param {TState} initialState
 * @param {!Ix.Predicate<TState>} condition
 * @param {function(TState): TState} iterate
 * @param {function(TState): TResult} resultSelector
 * @return {?<TResult>}
 */
Ix.EnumerableStatic.prototype.generate = function(initialState, condition, iterate, resultSelector) {};

/**
 * @template TResource, T
 * @param {function(): TResource} resourceFactory
 * @param {function(TResource): ?<T>} enumerableFactory
 * @return {?<T>}
 */
Ix.EnumerableStatic.prototype.using = function(resourceFactory, enumerableFactory) {};

/**
 * @template T
 * @param {...?<T>} sources
 * @return {?<T>}
 */
Ix.EnumerableStatic.prototype.catch = function(sources) {};

/**
 * @template T
 * @param {...?<T>} sources
 * @return {?<T>}
 */
Ix.EnumerableStatic.prototype.catchException = function(sources) {};

/**
 * @template T
 * @param {...?<T>} sources
 * @return {?<T>}
 */
Ix.EnumerableStatic.prototype.onErrorResumeNext = function(sources) {};

/**
 * @template T
 * @param {!Ix.EnumerablePredicate<?<T>>} condition
 * @param {?<T>} source
 * @return {?<T>}
 */
Ix.EnumerableStatic.prototype.while = function(condition, source) {};

/**
 * @template T
 * @param {!Ix.EnumerablePredicate<?<T>>} condition
 * @param {?<T>} source
 * @return {?<T>}
 */
Ix.EnumerableStatic.prototype.whileDo = function(condition, source) {};

/**
 * @template T
 * @param {function(): boolean} condition
 * @param {?<T>} thenSource
 * @param {?<T>=} elseSource
 * @return {?<T>}
 */
Ix.EnumerableStatic.prototype.if = function(condition, thenSource, elseSource) {};

/**
 * @template T
 * @param {function(): boolean} condition
 * @param {?<T>} thenSource
 * @param {?<T>=} elseSource
 * @return {?<T>}
 */
Ix.EnumerableStatic.prototype.ifThen = function(condition, thenSource, elseSource) {};

/**
 * @template T
 * @param {?<T>} source
 * @param {!Ix.EnumerablePredicate<?<T>>} condition
 * @return {?<T>}
 */
Ix.EnumerableStatic.prototype.doWhile = function(source, condition) {};

/**
 * @template T
 * @param {function(): number|function(): string} selector
 * @param {!Object<number,?<T>>|!Object<string,?<T>>} sources
 * @param {?<T>=} defaultSource
 * @return {?<T>}
 */
Ix.EnumerableStatic.prototype.case = function(selector, sources, defaultSource) {};

/**
 * @template T
 * @param {function(): number|function(): string} selector
 * @param {!Object<number,?<T>>|!Object<string,?<T>>} sources
 * @param {?<T>=} defaultSource
 * @return {?<T>}
 */
Ix.EnumerableStatic.prototype.switchCase = function(selector, sources, defaultSource) {};

/**
 * @template T, TResult
 * @param {?<T>} source
 * @param {!Ix.EnumerableFunc<T, TResult>} resultSelector
 * @return {?<TResult>}
 */
Ix.EnumerableStatic.prototype.for = function(source, resultSelector) {};

/**
 * @template T, TResult
 * @param {?<T>} source
 * @param {!Ix.EnumerableFunc<T, TResult>} resultSelector
 * @return {?<TResult>}
 */
Ix.EnumerableStatic.prototype.forIn = function(source, resultSelector) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "ix"
/** @const */
tsickle_declare_module.ix = {};

/* TODO: ExportAssignment in tsickle_declare_module.ix */
