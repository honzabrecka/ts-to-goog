/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cordova-sqlite-storage/index.d.ts:
 /** @type {!SQLitePlugin.SQLite} */
Window.prototype.sqlitePlugin;
 /** @type {!SQLitePlugin.SQLite} */
var sqlitePlugin;
/** @const */
var SQLitePlugin = {};

/** @typedef {function(!SQLitePlugin.Transaction): void} */
SQLitePlugin.TransactionFunction;

/** @typedef {function(): void} */
SQLitePlugin.SuccessCallback;

/** @typedef {function(!SQLitePlugin.Database): void} */
SQLitePlugin.DatabaseSuccessCallback;

/** @typedef {function(!SQLitePlugin.Results): void} */
SQLitePlugin.StatementSuccessCallback;

/** @typedef {function(!SQLitePlugin.Transaction, !SQLitePlugin.Results): void} */
SQLitePlugin.TransactionStatementSuccessCallback;

/** @typedef {function(!Error): void} */
SQLitePlugin.ErrorCallback;

/** @typedef {function(!SQLitePlugin.Transaction, !Error): (boolean|void)} */
SQLitePlugin.TransactionStatementErrorCallback;
/**
 * @record
 * @struct
 */
SQLitePlugin.OpenArgs = function() {};
 /** @type {string} */
SQLitePlugin.OpenArgs.prototype.name;
 /** @type {string} */
SQLitePlugin.OpenArgs.prototype.location;
 /** @type {string} */
SQLitePlugin.OpenArgs.prototype.iosDatabaseLocation;
 /** @type {number} */
SQLitePlugin.OpenArgs.prototype.androidDatabaseImplementation;
 /** @type {number} */
SQLitePlugin.OpenArgs.prototype.androidLockWorkaround;
 /** @type {number} */
SQLitePlugin.OpenArgs.prototype.createFromLocation;

/* TODO: IndexSignature: SQLitePlugin */
/**
 * @record
 * @struct
 */
SQLitePlugin.DeleteArgs = function() {};
 /** @type {string} */
SQLitePlugin.DeleteArgs.prototype.name;
 /** @type {string} */
SQLitePlugin.DeleteArgs.prototype.location;
 /** @type {string} */
SQLitePlugin.DeleteArgs.prototype.iosDatabaseLocation;
/**
 * @record
 * @struct
 */
SQLitePlugin.Results = function() {};
 /** @type {number} */
SQLitePlugin.Results.prototype.rowsAffected;
 /** @type {number} */
SQLitePlugin.Results.prototype.insertId;
 /** @type {{length: number, item: function(number): ?}} */
SQLitePlugin.Results.prototype.rows;
/**
 * @record
 * @struct
 */
SQLitePlugin.Transaction = function() {};

/**
 * @param {string} statement
 * @param {!Array<?>=} params
 * @param {function(!SQLitePlugin.Transaction, !SQLitePlugin.Results): void=} success
 * @param {function(!SQLitePlugin.Transaction, !Error): (boolean|void)=} error
 * @return {void}
 */
SQLitePlugin.Transaction.prototype.executeSql = function(statement, params, success, error) {};
/**
 * @record
 * @struct
 */
SQLitePlugin.Database = function() {};

/**
 * @param {function(!SQLitePlugin.Transaction): void} fn
 * @param {function(!Error): void=} error
 * @param {function(): void=} success
 * @return {void}
 */
SQLitePlugin.Database.prototype.transaction = function(fn, error, success) {};

/**
 * @param {function(!SQLitePlugin.Transaction): void} fn
 * @param {function(!Error): void=} error
 * @param {function(): void=} success
 * @return {void}
 */
SQLitePlugin.Database.prototype.readTransaction = function(fn, error, success) {};

/**
 * @param {string} statement
 * @param {!Array<?>=} params
 * @param {function(!SQLitePlugin.Results): void=} success
 * @param {function(!Error): void=} error
 * @return {void}
 */
SQLitePlugin.Database.prototype.executeSql = function(statement, params, success, error) {};

/**
 * @param {!Array<(string|!Array<?>)>} sqlStatements
 * @param {function(): void=} success
 * @param {function(!Error): void=} error
 * @return {void}
 */
SQLitePlugin.Database.prototype.sqlBatch = function(sqlStatements, success, error) {};

/**
 * @param {function(): void=} success
 * @param {function(!Error): void=} error
 * @return {void}
 */
SQLitePlugin.Database.prototype.close = function(success, error) {};
/**
 * @record
 * @struct
 */
SQLitePlugin.SQLite = function() {};

/**
 * @param {!SQLitePlugin.OpenArgs} args
 * @param {function(!SQLitePlugin.Database): void=} success
 * @param {function(!Error): void=} error
 * @return {!SQLitePlugin.Database}
 */
SQLitePlugin.SQLite.prototype.openDatabase = function(args, success, error) {};

/**
 * @param {!SQLitePlugin.DeleteArgs} args
 * @param {function(): void=} success
 * @param {function(!Error): void=} error
 * @return {void}
 */
SQLitePlugin.SQLite.prototype.deleteDatabase = function(args, success, error) {};

/**
 * @param {function(): void=} success
 * @param {function(!Error): void=} error
 * @return {void}
 */
SQLitePlugin.SQLite.prototype.selfTest = function(success, error) {};

/**
 * @param {function(string): void=} ok
 * @param {function(string): void=} error
 * @return {void}
 */
SQLitePlugin.SQLite.prototype.echoTest = function(ok, error) {};
