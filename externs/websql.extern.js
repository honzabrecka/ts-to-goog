/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/websql/index.d.ts:
/**
 * @extends {WorkerUtilsDatabase}
 * @record
 * @struct
 */
function WorkerUtils() {}
/**
 * @record
 * @struct
 */
function DOMString() {}
/**
 * @record
 * @struct
 */
function ObjectArray() {}
/**
 * @record
 * @struct
 */
function WindowDatabase() {}

/**
 * @param {!DOMString} name
 * @param {!DOMString} version
 * @param {!DOMString} displayName
 * @param {number} estimatedSize
 * @param {!DatabaseCallback=} creationCallback
 * @return {!Database}
 */
WindowDatabase.prototype.openDatabase = function(name, version, displayName, estimatedSize, creationCallback) {};
/**
 * @record
 * @struct
 */
function WorkerUtilsDatabase() {}

/**
 * @param {!DOMString} name
 * @param {!DOMString} version
 * @param {!DOMString} displayName
 * @param {number} estimatedSize
 * @param {!DatabaseCallback=} creationCallback
 * @return {!Database}
 */
WorkerUtilsDatabase.prototype.openDatabase = function(name, version, displayName, estimatedSize, creationCallback) {};

/**
 * @param {!DOMString} name
 * @param {!DOMString} version
 * @param {!DOMString} displayName
 * @param {number} estimatedSize
 * @param {!DatabaseCallback=} creationCallback
 * @return {!DatabaseSync}
 */
WorkerUtilsDatabase.prototype.openDatabaseSync = function(name, version, displayName, estimatedSize, creationCallback) {};
/**
 * @record
 * @struct
 */
function DatabaseCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function Database() {}
 /** @type {!DOMString} */
Database.prototype.version;

/**
 * @param {!SQLTransactionCallback} callback
 * @param {!SQLTransactionErrorCallback=} errorCallback
 * @param {!SQLVoidCallback=} successCallback
 * @return {void}
 */
Database.prototype.transaction = function(callback, errorCallback, successCallback) {};

/**
 * @param {!SQLTransactionCallback} callback
 * @param {!SQLTransactionErrorCallback=} errorCallback
 * @param {!SQLVoidCallback=} successCallback
 * @return {void}
 */
Database.prototype.readTransaction = function(callback, errorCallback, successCallback) {};

/**
 * The changeVersion() method allows scripts to atomically verify the version number and change
 * it at the same time as doing a schema update. When the method is invoked, it must immediately
 * return, and then asynchronously run the transaction steps with the transaction callback being
 * the third argument, the error callback being the fourth argument, the success callback being
 * the fifth argument
 * @param {!DOMString} oldVersion
 * @param {!DOMString} newVersion
 * @param {!SQLTransactionCallback=} callback
 * @param {!SQLTransactionErrorCallback=} errorCallback
 * @param {!SQLVoidCallback=} successCallback
 * @return {void}
 */
Database.prototype.changeVersion = function(oldVersion, newVersion, callback, errorCallback, successCallback) {};
/**
 * @record
 * @struct
 */
function SQLVoidCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SQLTransactionCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SQLTransactionErrorCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SQLTransaction() {}

/**
 * @param {!DOMString} sqlStatement
 * @param {!ObjectArray=} tsickle_arguments
 * @param {!SQLStatementCallback=} callback
 * @param {!SQLStatementErrorCallback=} errorCallback
 * @return {void}
 */
SQLTransaction.prototype.executeSql = function(sqlStatement, tsickle_arguments, callback, errorCallback) {};
/**
 * @record
 * @struct
 */
function SQLStatementCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SQLStatementErrorCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DatabaseSync() {}
 /** @type {!DOMString} */
DatabaseSync.prototype.version;

/**
 * @param {!SQLTransactionSyncCallback} callback
 * @return {void}
 */
DatabaseSync.prototype.transaction = function(callback) {};

/**
 * @param {!SQLTransactionSyncCallback} callback
 * @return {void}
 */
DatabaseSync.prototype.readTransaction = function(callback) {};

/**
 * @param {!DOMString} oldVersion
 * @param {!DOMString} newVersion
 * @param {!SQLTransactionSyncCallback} callback
 * @return {void}
 */
DatabaseSync.prototype.changeVersion = function(oldVersion, newVersion, callback) {};
/**
 * @record
 * @struct
 */
function SQLTransactionSyncCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SQLTransactionSync() {}

/**
 * @param {!DOMString} sqlStatement
 * @param {!ObjectArray=} tsickle_arguments
 * @return {!SQLResultSet}
 */
SQLTransactionSync.prototype.executeSql = function(sqlStatement, tsickle_arguments) {};
/**
 * @record
 * @struct
 */
function SQLResultSet() {}
 /** @type {number} */
SQLResultSet.prototype.insertId;
 /** @type {number} */
SQLResultSet.prototype.rowsAffected;
 /** @type {!SQLResultSetRowList} */
SQLResultSet.prototype.rows;
/**
 * @record
 * @struct
 */
function SQLResultSetRowList() {}
 /** @type {number} */
SQLResultSetRowList.prototype.length;

/**
 * @param {number} index
 * @return {?}
 */
SQLResultSetRowList.prototype.item = function(index) {};
/**
 * @constructor
 * @struct
 */
function SQLError() {}
 /** @type {number} */
SQLError.UNKNOWN_ERR;
 /** @type {number} */
SQLError.DATABASE_ERR;
 /** @type {number} */
SQLError.VERSION_ERR;
 /** @type {number} */
SQLError.TOO_LARGE_ERR;
 /** @type {number} */
SQLError.QUOTA_ERR;
 /** @type {number} */
SQLError.SYNTAX_ERR;
 /** @type {number} */
SQLError.CONSTRAINT_ERR;
 /** @type {number} */
SQLError.TIMEOUT_ERR;
 /** @type {number} */
SQLError.prototype.code;
 /** @type {!DOMString} */
SQLError.prototype.message;
/**
 * @constructor
 * @struct
 */
function SQLException() {}
 /** @type {number} */
SQLException.UNKNOWN_ERR;
 /** @type {number} */
SQLException.DATABASE_ERR;
 /** @type {number} */
SQLException.VERSION_ERR;
 /** @type {number} */
SQLException.TOO_LARGE_ERR;
 /** @type {number} */
SQLException.QUOTA_ERR;
 /** @type {number} */
SQLException.SYNTAX_ERR;
 /** @type {number} */
SQLException.CONSTRAINT_ERR;
 /** @type {number} */
SQLException.TIMEOUT_ERR;
 /** @type {number} */
SQLException.prototype.code;
 /** @type {!DOMString} */
SQLException.prototype.message;
