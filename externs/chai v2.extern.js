/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/chai v2/index.d.ts:
/** @const */
var Chai = {};
/**
 * @record
 * @struct
 */
Chai.ChaiStatic = function() {};
 /** @type {!Chai.ExpectStatic} */
Chai.ChaiStatic.prototype.expect;
 /** @type {!Chai.AssertStatic} */
Chai.ChaiStatic.prototype.assert;
 /** @type {!Chai.Config} */
Chai.ChaiStatic.prototype.config;

/**
 * @return {!Chai.Should}
 */
Chai.ChaiStatic.prototype.should = function() {};

/**
 * Provides a way to extend the internals of Chai
 * @param {function(?, ?): void} fn
 * @return {?}
 */
Chai.ChaiStatic.prototype.use = function(fn) {};
/**
 * @extends {Chai.AssertionStatic}
 * @record
 * @struct
 */
Chai.ExpectStatic = function() {};
/**
 * @extends {Chai.Assert}
 * @record
 * @struct
 */
Chai.AssertStatic = function() {};
/**
 * @record
 * @struct
 */
Chai.AssertionStatic = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.ShouldAssertion = function() {};
 /** @type {!Chai.ShouldThrow} */
Chai.ShouldAssertion.prototype.Throw;
 /** @type {!Chai.ShouldThrow} */
Chai.ShouldAssertion.prototype.throw;

/**
 * @param {?} value1
 * @param {?} value2
 * @param {string=} message
 * @return {void}
 */
Chai.ShouldAssertion.prototype.equal = function(value1, value2, message) {};

/**
 * @param {?} value
 * @param {string=} message
 * @return {void}
 */
Chai.ShouldAssertion.prototype.exist = function(value, message) {};
/**
 * @extends {Chai.ShouldAssertion}
 * @record
 * @struct
 */
Chai.Should = function() {};
 /** @type {!Chai.ShouldAssertion} */
Chai.Should.prototype.not;

/**
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @param {string=} operator
 * @return {void}
 */
Chai.Should.prototype.fail = function(actual, expected, message, operator) {};
/**
 * @record
 * @struct
 */
Chai.ShouldThrow = function() {};

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */
/**
 * @extends {Chai.LanguageChains}
 * @extends {Chai.NumericComparison}
 * @extends {Chai.TypeComparison}
 * @record
 * @struct
 */
Chai.Assertion = function() {};
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.not;
 /** @type {!Chai.Deep} */
Chai.Assertion.prototype.deep;
 /** @type {!Chai.TypeComparison} */
Chai.Assertion.prototype.a;
 /** @type {!Chai.TypeComparison} */
Chai.Assertion.prototype.an;
 /** @type {!Chai.Include} */
Chai.Assertion.prototype.include;
 /** @type {!Chai.Include} */
Chai.Assertion.prototype.contain;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.ok;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.true;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.false;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.null;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.undefined;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.exist;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.empty;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.arguments;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.Arguments;
 /** @type {!Chai.Equal} */
Chai.Assertion.prototype.equal;
 /** @type {!Chai.Equal} */
Chai.Assertion.prototype.equals;
 /** @type {!Chai.Equal} */
Chai.Assertion.prototype.eq;
 /** @type {!Chai.Equal} */
Chai.Assertion.prototype.eql;
 /** @type {!Chai.Equal} */
Chai.Assertion.prototype.eqls;
 /** @type {!Chai.Property} */
Chai.Assertion.prototype.property;
 /** @type {!Chai.OwnProperty} */
Chai.Assertion.prototype.ownProperty;
 /** @type {!Chai.OwnProperty} */
Chai.Assertion.prototype.haveOwnProperty;
 /** @type {!Chai.Length} */
Chai.Assertion.prototype.length;
 /** @type {!Chai.Length} */
Chai.Assertion.prototype.lengthOf;
 /** @type {!Chai.Keys} */
Chai.Assertion.prototype.keys;
 /** @type {!Chai.Throw} */
Chai.Assertion.prototype.throw;
 /** @type {!Chai.Throw} */
Chai.Assertion.prototype.throws;
 /** @type {!Chai.Throw} */
Chai.Assertion.prototype.Throw;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.itself;
 /** @type {!Chai.Members} */
Chai.Assertion.prototype.members;

/**
 * @param {(string|!RegExp)} regexp
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.match = function(regexp, message) {};

/**
 * @param {string} string
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.string = function(string, message) {};

/**
 * @param {string} string
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.key = function(string) {};

/**
 * @param {string} method
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.respondTo = function(method, message) {};

/**
 * @param {!Function} matcher
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.satisfy = function(matcher, message) {};

/**
 * @param {number} expected
 * @param {number} delta
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.closeTo = function(expected, delta, message) {};
/**
 * @record
 * @struct
 */
Chai.LanguageChains = function() {};
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.to;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.be;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.been;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.is;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.that;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.which;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.and;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.has;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.have;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.with;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.at;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.of;
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.same;
/**
 * @record
 * @struct
 */
Chai.NumericComparison = function() {};
 /** @type {!Chai.NumberComparer} */
Chai.NumericComparison.prototype.above;
 /** @type {!Chai.NumberComparer} */
Chai.NumericComparison.prototype.gt;
 /** @type {!Chai.NumberComparer} */
Chai.NumericComparison.prototype.greaterThan;
 /** @type {!Chai.NumberComparer} */
Chai.NumericComparison.prototype.least;
 /** @type {!Chai.NumberComparer} */
Chai.NumericComparison.prototype.gte;
 /** @type {!Chai.NumberComparer} */
Chai.NumericComparison.prototype.below;
 /** @type {!Chai.NumberComparer} */
Chai.NumericComparison.prototype.lt;
 /** @type {!Chai.NumberComparer} */
Chai.NumericComparison.prototype.lessThan;
 /** @type {!Chai.NumberComparer} */
Chai.NumericComparison.prototype.most;
 /** @type {!Chai.NumberComparer} */
Chai.NumericComparison.prototype.lte;

/**
 * @param {number} start
 * @param {number} finish
 * @param {string=} message
 * @return {!Chai.Assertion}
 */
Chai.NumericComparison.prototype.within = function(start, finish, message) {};
/**
 * @record
 * @struct
 */
Chai.NumberComparer = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.TypeComparison = function() {};

/* TODO: CallSignature: Chai */
 /** @type {!Chai.InstanceOf} */
Chai.TypeComparison.prototype.instanceof;
 /** @type {!Chai.InstanceOf} */
Chai.TypeComparison.prototype.instanceOf;
/**
 * @record
 * @struct
 */
Chai.InstanceOf = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.Deep = function() {};
 /** @type {!Chai.Equal} */
Chai.Deep.prototype.equal;
 /** @type {!Chai.Include} */
Chai.Deep.prototype.include;
 /** @type {!Chai.Property} */
Chai.Deep.prototype.property;
/**
 * @record
 * @struct
 */
Chai.Equal = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.Property = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.OwnProperty = function() {};

/* TODO: CallSignature: Chai */
/**
 * @extends {Chai.LanguageChains}
 * @extends {Chai.NumericComparison}
 * @record
 * @struct
 */
Chai.Length = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.Include = function() {};

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */
 /** @type {!Chai.Keys} */
Chai.Include.prototype.keys;
 /** @type {!Chai.Members} */
Chai.Include.prototype.members;
/**
 * @record
 * @struct
 */
Chai.Keys = function() {};

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.Throw = function() {};

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.Members = function() {};

/* TODO: CallSignature: Chai */
/**
 * @record
 * @struct
 */
Chai.Assert = function() {};

/* TODO: CallSignature: Chai */

/**
 * @param {?=} actual
 * @param {?=} expected
 * @param {string=} msg
 * @param {string=} operator
 * @return {void}
 */
Chai.Assert.prototype.fail = function(actual, expected, msg, operator) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.ok = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notOk = function(val, msg) {};

/**
 * @param {?} act
 * @param {?} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.equal = function(act, exp, msg) {};

/**
 * @param {?} act
 * @param {?} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notEqual = function(act, exp, msg) {};

/**
 * @param {?} act
 * @param {?} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.strictEqual = function(act, exp, msg) {};

/**
 * @param {?} act
 * @param {?} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notStrictEqual = function(act, exp, msg) {};

/**
 * @param {?} act
 * @param {?} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.deepEqual = function(act, exp, msg) {};

/**
 * @param {?} act
 * @param {?} exp
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notDeepEqual = function(act, exp, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.isTrue = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.isFalse = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.isNull = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.isNotNull = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.isUndefined = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.isDefined = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.isFunction = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.isNotFunction = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.isObject = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.isNotObject = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.isArray = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.isNotArray = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.isString = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.isNotString = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.isNumber = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.isNotNumber = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.isBoolean = function(val, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.isNotBoolean = function(val, msg) {};

/**
 * @param {?} val
 * @param {string} type
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.typeOf = function(val, type, msg) {};

/**
 * @param {?} val
 * @param {string} type
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notTypeOf = function(val, type, msg) {};

/**
 * @param {?} val
 * @param {!Function} type
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.instanceOf = function(val, type, msg) {};

/**
 * @param {?} val
 * @param {!Function} type
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notInstanceOf = function(val, type, msg) {};

/**
 * @param {string|!Array<?>} exp
 * @param {?} inc
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.include = function(exp, inc, msg) {};

/**
 * @param {string|!Array<?>} exp
 * @param {?} inc
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notInclude = function(exp, inc, msg) {};

/**
 * @param {?} exp
 * @param {!RegExp} re
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.match = function(exp, re, msg) {};

/**
 * @param {?} exp
 * @param {!RegExp} re
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notMatch = function(exp, re, msg) {};

/**
 * @param {!Object} obj
 * @param {string} prop
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.property = function(obj, prop, msg) {};

/**
 * @param {!Object} obj
 * @param {string} prop
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notProperty = function(obj, prop, msg) {};

/**
 * @param {!Object} obj
 * @param {string} prop
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.deepProperty = function(obj, prop, msg) {};

/**
 * @param {!Object} obj
 * @param {string} prop
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.notDeepProperty = function(obj, prop, msg) {};

/**
 * @param {!Object} obj
 * @param {string} prop
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.propertyVal = function(obj, prop, val, msg) {};

/**
 * @param {!Object} obj
 * @param {string} prop
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.propertyNotVal = function(obj, prop, val, msg) {};

/**
 * @param {!Object} obj
 * @param {string} prop
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.deepPropertyVal = function(obj, prop, val, msg) {};

/**
 * @param {!Object} obj
 * @param {string} prop
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.deepPropertyNotVal = function(obj, prop, val, msg) {};

/**
 * @param {?} exp
 * @param {number} len
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.lengthOf = function(exp, len, msg) {};

/**
 * @param {!Function} fn
 * @param {string|!RegExp|!Function=} msg_or_regExp_or_errType
 * @param {string|!RegExp=} msg_or_regExp
 * @return {void}
 */
Chai.Assert.prototype.throw = function(fn, msg_or_regExp_or_errType, msg_or_regExp) {};

/**
 * @param {!Function} fn
 * @param {string|!RegExp|!Function=} msg_or_regExp_or_errType
 * @param {string|!RegExp=} msg_or_regExp
 * @return {void}
 */
Chai.Assert.prototype.throws = function(fn, msg_or_regExp_or_errType, msg_or_regExp) {};

/**
 * @param {!Function} fn
 * @param {string|!RegExp|!Function=} msg_or_regExp_or_errType
 * @param {string|!RegExp=} msg_or_regExp
 * @return {void}
 */
Chai.Assert.prototype.Throw = function(fn, msg_or_regExp_or_errType, msg_or_regExp) {};

/**
 * @param {!Function} fn
 * @param {string|!RegExp|!Function=} msg_or_regExp_or_errType
 * @param {string|!RegExp=} msg_or_regExp
 * @return {void}
 */
Chai.Assert.prototype.doesNotThrow = function(fn, msg_or_regExp_or_errType, msg_or_regExp) {};

/**
 * @param {?} val
 * @param {string} operator
 * @param {?} val2
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.operator = function(val, operator, val2, msg) {};

/**
 * @param {number} act
 * @param {number} exp
 * @param {number} delta
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.closeTo = function(act, exp, delta, msg) {};

/**
 * @param {!Array<?>} set1
 * @param {!Array<?>} set2
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.sameMembers = function(set1, set2, msg) {};

/**
 * @param {!Array<?>} set1
 * @param {!Array<?>} set2
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.includeMembers = function(set1, set2, msg) {};

/**
 * @param {?} val
 * @param {string=} msg
 * @return {void}
 */
Chai.Assert.prototype.ifError = function(val, msg) {};
/**
 * @record
 * @struct
 */
Chai.Config = function() {};
 /** @type {boolean} */
Chai.Config.prototype.includeStack;

/**
 * @constructor
 * @struct
 * @param {string} message
 * @param {?=} _props
 * @param {!Function=} ssf
 */
Chai.AssertionError = function(message, _props, ssf) {};
 /** @type {string} */
Chai.AssertionError.prototype.name;
 /** @type {string} */
Chai.AssertionError.prototype.message;
 /** @type {boolean} */
Chai.AssertionError.prototype.showDiff;
 /** @type {string} */
Chai.AssertionError.prototype.stack;
 /** @type {!Chai.ChaiStatic} */
var chai;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "chai"
/** @const */
tsickle_declare_module.chai = {};

/* TODO: ExportAssignment in tsickle_declare_module.chai */
 /** @type {!Chai.Assertion} */
Object.prototype.should;
