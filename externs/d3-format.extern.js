/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/d3-format/index.d.ts:
/**
 * @record
 * @struct
 */
function FormatLocaleDefinition() {}
 /** @type {string} */
FormatLocaleDefinition.prototype.decimal;
 /** @type {string} */
FormatLocaleDefinition.prototype.thousands;
 /** @type {!Array<number>} */
FormatLocaleDefinition.prototype.grouping;
 /** @type {!Array<?>} */
FormatLocaleDefinition.prototype.currency;
 /** @type {!Array<string>} */
FormatLocaleDefinition.prototype.numerals;
 /** @type {string} */
FormatLocaleDefinition.prototype.percent;
/**
 * @record
 * @struct
 */
function FormatLocaleObject() {}

/**
 * Returns a new format function for the given string specifier. The returned function
 * takes a number as the only argument, and returns a string representing the formatted number.
 * 
 * @param {string} specifier A Specifier string
 * @return {?}
 */
FormatLocaleObject.prototype.format = function(specifier) {};

/**
 * Returns a new format function for the given string specifier. The returned function
 * takes a number as the only argument, and returns a string representing the formatted number.
 * The returned function will convert values to the units of the appropriate SI prefix for the
 * specified numeric reference value before formatting in fixed point notation.
 * 
 * @param {string} specifier A Specifier string
 * @param {number} value The reference value to determine the appropriate SI prefix.
 * @return {?}
 */
FormatLocaleObject.prototype.formatPrefix = function(specifier, value) {};
/**
 * @record
 * @struct
 */
function FormatSpecifier() {}
 /** @type {string} */
FormatSpecifier.prototype.fill;
 /** @type {string} */
FormatSpecifier.prototype.align;
 /** @type {string} */
FormatSpecifier.prototype.sign;
 /** @type {string} */
FormatSpecifier.prototype.symbol;
 /** @type {boolean} */
FormatSpecifier.prototype.zero;
 /** @type {number} */
FormatSpecifier.prototype.width;
 /** @type {boolean} */
FormatSpecifier.prototype.comma;
 /** @type {number} */
FormatSpecifier.prototype.precision;
 /** @type {string} */
FormatSpecifier.prototype.type;

/**
 * Return the object as a specifier string.
 * @return {string}
 */
FormatSpecifier.prototype.toString = function() {};

/**
 * Create a new locale-based object which exposes format(...) and formatPrefix(...)
 * methods for the specified locale.
 * 
 * @param {?} locale A Format locale definition.
 * @return {?}
 */
function formatLocale(locale) {}

/**
 * Create a new locale-based object which exposes format(...) and formatPrefix(...)
 * methods for the specified locale definition. The specified locale definition will be
 * set as the new default locale definition.
 * 
 * @param {?} defaultLocale A Format locale definition to be used as default.
 * @return {?}
 */
function formatDefaultLocale(defaultLocale) {}

/**
 * Returns a new format function for the given string specifier. The returned function
 * takes a number as the only argument, and returns a string representing the formatted number.
 * 
 * Uses the current default locale.
 * 
 * The general form of a specifier is [​[fill]align][sign][symbol][0][width][,][.precision][type].
 * For reference, an explanation of the segments of the specifier string, refer to the FormatSpecifier interface properties.
 * 
 * @param {string} specifier A Specifier string
 * @return {?}
 */
function format(specifier) {}

/**
 * Returns a new format function for the given string specifier. The returned function
 * takes a number as the only argument, and returns a string representing the formatted number.
 * The returned function will convert values to the units of the appropriate SI prefix for the
 * specified numeric reference value before formatting in fixed point notation.
 * 
 *  Uses the current default locale.
 * 
 * The general form of a specifier is [​[fill]align][sign][symbol][0][width][,][.precision][type].
 * For reference, an explanation of the segments of the specifier string, refer to the FormatSpecifier interface properties.
 * 
 * @param {string} specifier A Specifier string
 * @param {number} value The reference value to determine the appropriate SI prefix.
 * @return {?}
 */
function formatPrefix(specifier, value) {}

/**
 * Parses the specified specifier, returning an object with exposed fields that correspond to the
 * format specification mini-language and a toString method that reconstructs the specifier.
 * 
 * The general form of a specifier is [​[fill]align][sign][symbol][0][width][,][.precision][type].
 * For reference, an explanation of the segments of the specifier string, refer to the FormatSpecifier interface properties.
 * 
 * @param {string} specifier A specifier string.
 * @return {?}
 */
function formatSpecifier(specifier) {}

/**
 * Returns a suggested decimal precision for fixed point notation given the specified numeric step value.
 * 
 * @param {number} step The step represents the minimum absolute difference between values that will be formatted.
 * (This assumes that the values to be formatted are also multiples of step.)
 * @return {number}
 */
function precisionFixed(step) {}

/**
 * Returns a suggested decimal precision for use with locale.formatPrefix given the specified
 * numeric step and reference value.
 * 
 * @param {number} step The step represents the minimum absolute difference between values that will be formatted.
 * (This assumes that the values to be formatted are also multiples of step.)
 * @param {number} value Reference value determines which SI prefix will be used.
 * @return {number}
 */
function precisionPrefix(step, value) {}

/**
 * Returns a suggested decimal precision for format types that round to significant digits
 * given the specified numeric step and max values.
 * 
 * @param {number} step The step represents the minimum absolute difference between values that will be formatted.
 * (This assumes that the values to be formatted are also multiples of step.)
 * @param {number} max max represents the largest absolute value that will be formatted.
 * @return {number}
 */
function precisionRound(step, max) {}
