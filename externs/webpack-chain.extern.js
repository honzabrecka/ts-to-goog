/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/webpack-chain/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ExportAssignment in  */
/**
 * @constructor
 * @struct
 */
function Config() {}
 /** @type {!Config.DevServer} */
Config.prototype.devServer;
 /** @type {!Config.EntryPoints} */
Config.prototype.entryPoints;
 /** @type {!Config.Module} */
Config.prototype.module;
 /** @type {!Config.ChainedMap<Config>} */
Config.prototype.node;
 /** @type {!Config.Output} */
Config.prototype.output;
 /** @type {!Config.Performance} */
Config.prototype.performance;
 /** @type {!Config.Plugins<Config>} */
Config.prototype.plugins;
 /** @type {!Config.Resolve} */
Config.prototype.resolve;
 /** @type {!Config.ResolveLoader} */
Config.prototype.resolveLoader;

/**
 * @param {!Object<string,boolean>} value
 * @return {Config}
 */
Config.prototype.amd = function(value) {};

/**
 * @param {boolean} value
 * @return {Config}
 */
Config.prototype.bail = function(value) {};

/**
 * @param {?} value
 * @return {Config}
 */
Config.prototype.cache = function(value) {};

/**
 * @param {(boolean|string)} value
 * @return {Config}
 */
Config.prototype.devtool = function(value) {};

/**
 * @param {string} value
 * @return {Config}
 */
Config.prototype.context = function(value) {};

/**
 * @param {(string|!RegExp|!webpack.ExternalsObjectElement|function(?, ?, function(?, ?): void): ?|!Array<(string|!RegExp|!webpack.ExternalsObjectElement|?)>)} value
 * @return {Config}
 */
Config.prototype.externals = function(value) {};

/**
 * @param {?} value
 * @return {Config}
 */
Config.prototype.loader = function(value) {};

/**
 * @param {boolean} value
 * @return {Config}
 */
Config.prototype.profile = function(value) {};

/**
 * @param {string} value
 * @return {Config}
 */
Config.prototype.recordsPath = function(value) {};

/**
 * @param {string} value
 * @return {Config}
 */
Config.prototype.recordsInputPath = function(value) {};

/**
 * @param {string} value
 * @return {Config}
 */
Config.prototype.recordsOutputPath = function(value) {};

/**
 * @param {(boolean|string|!webpack.Stats.ToStringOptionsObject)} value
 * @return {Config}
 */
Config.prototype.stats = function(value) {};

/**
 * @param {string} value
 * @return {Config}
 */
Config.prototype.target = function(value) {};

/**
 * @param {boolean} value
 * @return {Config}
 */
Config.prototype.watch = function(value) {};

/**
 * @param {!webpack.ICompiler.WatchOptions} value
 * @return {Config}
 */
Config.prototype.watchOptions = function(value) {};

/**
 * @param {string} name
 * @return {!Config.ChainedSet<Config>}
 */
Config.prototype.entry = function(name) {};

/**
 * @param {string} name
 * @return {!Config.Plugin<Config>}
 */
Config.prototype.plugin = function(name) {};

/**
 * @return {!webpack.Configuration}
 */
Config.prototype.toConfig = function() {};

/**
 * @param {?} obj
 * @return {Config}
 */
Config.prototype.merge = function(obj) {};
/**
 * @constructor
 * @struct
 */
Config.Chained = function() {};

/**
 * @return {Parent}
 */
Config.Chained.prototype.end = function() {};
/**
 * @extends {Config.Chained}
 * @constructor
 * @struct
 */
Config.TypedChainedMap = function() {};

/**
 * @return {TypedChainedMap}
 */
Config.TypedChainedMap.prototype.clear = function() {};

/**
 * @param {string} key
 * @return {TypedChainedMap}
 */
Config.TypedChainedMap.prototype.delete = function(key) {};

/**
 * @param {string} key
 * @return {boolean}
 */
Config.TypedChainedMap.prototype.has = function(key) {};

/**
 * @param {string} key
 * @return {Value}
 */
Config.TypedChainedMap.prototype.get = function(key) {};

/**
 * @param {string} key
 * @param {Value} value
 * @return {TypedChainedMap}
 */
Config.TypedChainedMap.prototype.set = function(key, value) {};

/**
 * @param {!Object<string,Value>} obj
 * @return {TypedChainedMap}
 */
Config.TypedChainedMap.prototype.merge = function(obj) {};

/**
 * @return {!Object<string,Value>}
 */
Config.TypedChainedMap.prototype.entries = function() {};

/**
 * @return {!Array<Value>}
 */
Config.TypedChainedMap.prototype.values = function() {};
/**
 * @extends {Config.TypedChainedMap}
 * @constructor
 * @struct
 */
Config.ChainedMap = function() {};
/**
 * @extends {Config.Chained}
 * @constructor
 * @struct
 */
Config.TypedChainedSet = function() {};

/**
 * @param {Value} value
 * @return {TypedChainedSet}
 */
Config.TypedChainedSet.prototype.add = function(value) {};

/**
 * @param {Value} value
 * @return {TypedChainedSet}
 */
Config.TypedChainedSet.prototype.prepend = function(value) {};

/**
 * @return {TypedChainedSet}
 */
Config.TypedChainedSet.prototype.clear = function() {};

/**
 * @param {string} key
 * @return {TypedChainedSet}
 */
Config.TypedChainedSet.prototype.delete = function(key) {};

/**
 * @param {string} key
 * @return {boolean}
 */
Config.TypedChainedSet.prototype.has = function(key) {};

/**
 * @param {!Array<Value>} arr
 * @return {TypedChainedSet}
 */
Config.TypedChainedSet.prototype.merge = function(arr) {};

/**
 * @return {!Array<Value>}
 */
Config.TypedChainedSet.prototype.values = function() {};
/**
 * @extends {Config.TypedChainedSet}
 * @constructor
 * @struct
 */
Config.ChainedSet = function() {};
/**
 * @extends {Config.TypedChainedMap}
 * @constructor
 * @struct
 */
Config.Plugins = function() {};
/**
 * @extends {Config.ChainedMap}
 * @constructor
 * @struct
 */
Config.Plugin = function() {};

/**
 * @param {function(!Config.PluginClass, !Array<?>): !webpack.Plugin} value
 * @return {Plugin}
 */
Config.Plugin.prototype.init = function(value) {};

/**
 * @param {!Config.PluginClass} plugin
 * @param {!Array<?>=} args
 * @return {Plugin}
 */
Config.Plugin.prototype.use = function(plugin, args) {};

/**
 * @param {function(!Array<?>): !Array<?>} f
 * @return {Plugin}
 */
Config.Plugin.prototype.tap = function(f) {};
/**
 * @extends {Config.ChainedMap}
 * @constructor
 * @struct
 */
Config.Module = function() {};
 /** @type {!Config.TypedChainedMap<Module, !Config.Rule>} */
Config.Module.prototype.rules;
 /** @type {!Config.TypedChainedSet<Module, !RegExp>} */
Config.Module.prototype.noParse;

/**
 * @param {string} name
 * @return {!Config.Rule}
 */
Config.Module.prototype.rule = function(name) {};
/**
 * @extends {Config.ChainedMap}
 * @constructor
 * @struct
 */
Config.Output = function() {};

/**
 * @param {string} value
 * @return {Output}
 */
Config.Output.prototype.chunkFilename = function(value) {};

/**
 * @param {(string|boolean)} value
 * @return {Output}
 */
Config.Output.prototype.crossOriginLoading = function(value) {};

/**
 * @param {string} value
 * @return {Output}
 */
Config.Output.prototype.filename = function(value) {};

/**
 * @param {string} value
 * @return {Output}
 */
Config.Output.prototype.library = function(value) {};

/**
 * @param {string} value
 * @return {Output}
 */
Config.Output.prototype.libraryTarget = function(value) {};

/**
 * @param {?} value
 * @return {Output}
 */
Config.Output.prototype.devtoolFallbackModuleFilenameTemplate = function(value) {};

/**
 * @param {?} value
 * @return {Output}
 */
Config.Output.prototype.devtoolLineToLine = function(value) {};

/**
 * @param {?} value
 * @return {Output}
 */
Config.Output.prototype.devtoolModuleFilenameTemplate = function(value) {};

/**
 * @param {string} value
 * @return {Output}
 */
Config.Output.prototype.hashFunction = function(value) {};

/**
 * @param {string} value
 * @return {Output}
 */
Config.Output.prototype.hashDigest = function(value) {};

/**
 * @param {number} value
 * @return {Output}
 */
Config.Output.prototype.hashDigestLength = function(value) {};

/**
 * @param {?} value
 * @return {Output}
 */
Config.Output.prototype.hashSalt = function(value) {};

/**
 * @param {string} value
 * @return {Output}
 */
Config.Output.prototype.hotUpdateChunkFilename = function(value) {};

/**
 * @param {?} value
 * @return {Output}
 */
Config.Output.prototype.hotUpdateFunction = function(value) {};

/**
 * @param {string} value
 * @return {Output}
 */
Config.Output.prototype.hotUpdateMainFilename = function(value) {};

/**
 * @param {string} value
 * @return {Output}
 */
Config.Output.prototype.jsonpFunction = function(value) {};

/**
 * @param {string} value
 * @return {Output}
 */
Config.Output.prototype.path = function(value) {};

/**
 * @param {boolean} value
 * @return {Output}
 */
Config.Output.prototype.pathinfo = function(value) {};

/**
 * @param {string} value
 * @return {Output}
 */
Config.Output.prototype.publicPath = function(value) {};

/**
 * @param {string} value
 * @return {Output}
 */
Config.Output.prototype.sourceMapFilename = function(value) {};

/**
 * @param {string} value
 * @return {Output}
 */
Config.Output.prototype.sourcePrefix = function(value) {};

/**
 * @param {boolean} value
 * @return {Output}
 */
Config.Output.prototype.strictModuleExceptionHandling = function(value) {};

/**
 * @param {boolean} value
 * @return {Output}
 */
Config.Output.prototype.umdNamedDefine = function(value) {};
/**
 * @extends {Config.ChainedMap}
 * @constructor
 * @struct
 */
Config.DevServer = function() {};

/**
 * @param {string} value
 * @return {DevServer}
 */
Config.DevServer.prototype.clientLogLevel = function(value) {};

/**
 * @param {boolean} value
 * @return {DevServer}
 */
Config.DevServer.prototype.compress = function(value) {};

/**
 * @param {(string|boolean|!Array<string>)} value
 * @return {DevServer}
 */
Config.DevServer.prototype.contentBase = function(value) {};

/**
 * @param {string} value
 * @return {DevServer}
 */
Config.DevServer.prototype.filename = function(value) {};

/**
 * @param {!Object<string,string>} value
 * @return {DevServer}
 */
Config.DevServer.prototype.headers = function(value) {};

/**
 * @param {?} value
 * @return {DevServer}
 */
Config.DevServer.prototype.historyApiFallback = function(value) {};

/**
 * @param {string} value
 * @return {DevServer}
 */
Config.DevServer.prototype.host = function(value) {};

/**
 * @param {boolean} value
 * @return {DevServer}
 */
Config.DevServer.prototype.hot = function(value) {};

/**
 * @param {boolean} value
 * @return {DevServer}
 */
Config.DevServer.prototype.hotOnly = function(value) {};

/**
 * @param {(boolean|!ServerOptions)} value
 * @return {DevServer}
 */
Config.DevServer.prototype.https = function(value) {};

/**
 * @param {boolean} value
 * @return {DevServer}
 */
Config.DevServer.prototype.inline = function(value) {};

/**
 * @param {boolean} value
 * @return {DevServer}
 */
Config.DevServer.prototype.lazy = function(value) {};

/**
 * @param {boolean} value
 * @return {DevServer}
 */
Config.DevServer.prototype.noInfo = function(value) {};

/**
 * @param {(boolean|{warnings: boolean, errors: boolean})} value
 * @return {DevServer}
 */
Config.DevServer.prototype.overlay = function(value) {};

/**
 * @param {number} value
 * @return {DevServer}
 */
Config.DevServer.prototype.port = function(value) {};

/**
 * @param {?} value
 * @return {DevServer}
 */
Config.DevServer.prototype.proxy = function(value) {};

/**
 * @param {boolean} value
 * @return {DevServer}
 */
Config.DevServer.prototype.quiet = function(value) {};

/**
 * @param {function(?): void} value
 * @return {DevServer}
 */
Config.DevServer.prototype.setup = function(value) {};

/**
 * @param {(boolean|string|!webpack.Stats.ToStringOptionsObject)} value
 * @return {DevServer}
 */
Config.DevServer.prototype.stats = function(value) {};

/**
 * @param {boolean} value
 * @return {DevServer}
 */
Config.DevServer.prototype.watchContentBase = function(value) {};
/**
 * @extends {Config.ChainedMap}
 * @constructor
 * @struct
 */
Config.Performance = function() {};

/**
 * @param {(boolean|string)} value
 * @return {Performance}
 */
Config.Performance.prototype.hints = function(value) {};

/**
 * @param {number} value
 * @return {Performance}
 */
Config.Performance.prototype.maxEntrypointSize = function(value) {};

/**
 * @param {number} value
 * @return {Performance}
 */
Config.Performance.prototype.maxAssetSize = function(value) {};

/**
 * @param {function(string): boolean} value
 * @return {Performance}
 */
Config.Performance.prototype.assetFilter = function(value) {};
/**
 * @extends {Config.TypedChainedMap}
 * @constructor
 * @struct
 */
Config.EntryPoints = function() {};
/**
 * @extends {Config.ChainedMap}
 * @constructor
 * @struct
 */
Config.Resolve = function() {};
 /** @type {!Config.TypedChainedMap<Resolve, string>} */
Config.Resolve.prototype.alias;
 /** @type {!Config.TypedChainedSet<Resolve, string>} */
Config.Resolve.prototype.aliasFields;
 /** @type {!Config.TypedChainedSet<Resolve, string>} */
Config.Resolve.prototype.descriptionFiles;
 /** @type {!Config.TypedChainedSet<Resolve, string>} */
Config.Resolve.prototype.extensions;
 /** @type {!Config.TypedChainedSet<Resolve, string>} */
Config.Resolve.prototype.mainFields;
 /** @type {!Config.TypedChainedSet<Resolve, string>} */
Config.Resolve.prototype.mainFiles;
 /** @type {!Config.TypedChainedSet<Resolve, string>} */
Config.Resolve.prototype.modules;
 /** @type {!Config.TypedChainedMap<Resolve, !Config.Plugin<Resolve>>} */
Config.Resolve.prototype.plugins;

/**
 * @param {boolean} value
 * @return {Resolve}
 */
Config.Resolve.prototype.enforceExtension = function(value) {};

/**
 * @param {boolean} value
 * @return {Resolve}
 */
Config.Resolve.prototype.enforceModuleExtension = function(value) {};

/**
 * @param {(boolean|!RegExp|!Array<!RegExp>)} value
 * @return {Resolve}
 */
Config.Resolve.prototype.unsafeCache = function(value) {};

/**
 * @param {boolean} value
 * @return {Resolve}
 */
Config.Resolve.prototype.symlinks = function(value) {};

/**
 * @param {function({path: string, request: string}): boolean} value
 * @return {Resolve}
 */
Config.Resolve.prototype.cachePredicate = function(value) {};

/**
 * @param {string} name
 * @return {!Config.Plugin<Resolve>}
 */
Config.Resolve.prototype.plugin = function(name) {};
/**
 * @extends {Config.ChainedMap}
 * @constructor
 * @struct
 */
Config.ResolveLoader = function() {};
 /** @type {!Config.TypedChainedSet<ResolveLoader, string>} */
Config.ResolveLoader.prototype.extensions;
 /** @type {!Config.TypedChainedSet<ResolveLoader, string>} */
Config.ResolveLoader.prototype.modules;
 /** @type {!Config.TypedChainedSet<ResolveLoader, string>} */
Config.ResolveLoader.prototype.moduleExtensions;
 /** @type {!Config.TypedChainedSet<ResolveLoader, string>} */
Config.ResolveLoader.prototype.packageMains;
/**
 * @extends {Config.ChainedMap}
 * @constructor
 * @struct
 */
Config.Rule = function() {};
 /** @type {!Config.TypedChainedMap<Rule, !Config.Use>} */
Config.Rule.prototype.uses;
 /** @type {!Config.TypedChainedSet<Rule, (string|!RegExp|function(string): boolean|!webpack.TestConditionSpec|!webpack.OrConditionSpec|!webpack.AndConditionSpec|!webpack.NotConditionSpec|!webpack.ConditionArray)>} */
Config.Rule.prototype.include;
 /** @type {!Config.TypedChainedSet<Rule, (string|!RegExp|function(string): boolean|!webpack.TestConditionSpec|!webpack.OrConditionSpec|!webpack.AndConditionSpec|!webpack.NotConditionSpec|!webpack.ConditionArray)>} */
Config.Rule.prototype.exclude;

/**
 * @param {!Object<string,?>} value
 * @return {Rule}
 */
Config.Rule.prototype.parser = function(value) {};

/**
 * @param {(string|!RegExp|function(string): boolean|!webpack.TestConditionSpec|!webpack.OrConditionSpec|!webpack.AndConditionSpec|!webpack.NotConditionSpec|!webpack.ConditionArray|!Array<(string|!RegExp|?|!webpack.TestConditionSpec|!webpack.OrConditionSpec|!webpack.AndConditionSpec|!webpack.NotConditionSpec|!webpack.ConditionArray)>)} value
 * @return {Rule}
 */
Config.Rule.prototype.test = function(value) {};

/**
 * @param {string} value
 * @return {Rule}
 */
Config.Rule.prototype.enforce = function(value) {};

/**
 * @param {string} name
 * @return {!Config.Use}
 */
Config.Rule.prototype.use = function(name) {};

/**
 * @return {Rule}
 */
Config.Rule.prototype.pre = function() {};

/**
 * @return {Rule}
 */
Config.Rule.prototype.post = function() {};
/**
 * @record
 * @struct
 */
Config.LoaderOptions = function() {};

/* TODO: IndexSignature: Config */
/**
 * @extends {Config.ChainedMap}
 * @constructor
 * @struct
 */
Config.Use = function() {};

/**
 * @param {string} value
 * @return {Use}
 */
Config.Use.prototype.loader = function(value) {};

/**
 * @param {!Config.LoaderOptions} value
 * @return {Use}
 */
Config.Use.prototype.options = function(value) {};

/**
 * @param {function(!Config.LoaderOptions): !Config.LoaderOptions} f
 * @return {Use}
 */
Config.Use.prototype.tap = function(f) {};

/** @typedef {(boolean|string)} */
Config.DevTool;
/**
 * @record
 * @struct
 */
Config.PluginClass = function() {};

/* TODO: ConstructSignature: Config */
