/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/prettier/index.d.ts:

/* TODO: ImportDeclaration in  */

/** @typedef {?} */
var AST;

/** @typedef {?} */
var BuiltInParser;

/** @typedef {string} */
var BuiltInParserName;

/** @typedef {?} */
var CustomParser;
/**
 * @record
 * @struct
 */
function Options() {}
 /** @type {number} */
Options.prototype.printWidth;
 /** @type {number} */
Options.prototype.tabWidth;
 /** @type {boolean} */
Options.prototype.useTabs;
 /** @type {boolean} */
Options.prototype.semi;
 /** @type {boolean} */
Options.prototype.singleQuote;
 /** @type {string} */
Options.prototype.trailingComma;
 /** @type {boolean} */
Options.prototype.bracketSpacing;
 /** @type {boolean} */
Options.prototype.jsxBracketSameLine;
 /** @type {number} */
Options.prototype.rangeStart;
 /** @type {number} */
Options.prototype.rangeEnd;
 /** @type {(string|?)} */
Options.prototype.parser;
 /** @type {string} */
Options.prototype.filepath;
/**
 * @extends {Options}
 * @record
 * @struct
 */
function CursorOptions() {}
 /** @type {number} */
CursorOptions.prototype.cursorOffset;
 /** @type {?} */
CursorOptions.prototype.rangeStart;
 /** @type {?} */
CursorOptions.prototype.rangeEnd;
/**
 * @record
 * @struct
 */
function CursorResult() {}
 /** @type {string} */
CursorResult.prototype.formatted;
 /** @type {number} */
CursorResult.prototype.cursorOffset;

/**
 * `format` is used to format text using Prettier. [Options](https://github.com/prettier/prettier#options) may be provided to override the defaults.
 * @param {string} source
 * @param {?=} options
 * @return {string}
 */
function format(source, options) {}

/**
 * `check` checks to see if the file has been formatted with Prettier given those options and returns a `Boolean`.
 * This is similar to the `--list-different` parameter in the CLI and is useful for running Prettier in CI scenarios.
 * @param {string} source
 * @param {?=} options
 * @return {boolean}
 */
function check(source, options) {}

/**
 * `formatWithCursor` both formats the code, and translates a cursor position from unformatted code to formatted code.
 * This is useful for editor integrations, to prevent the cursor from moving when code is formatted.
 * 
 * The `cursorOffset` option should be provided, to specify where the cursor is. This option cannot be used with `rangeStart` and `rangeEnd`.
 * @param {string} source
 * @param {?} options
 * @return {?}
 */
function formatWithCursor(source, options) {}
 /** @type {string} */
var version;
