/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/crypto-js/index.d.ts:

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
 /** @type {!CryptoJS.Hashes} */
var CryptoJS;

/** @typedef {function(string, string, !Array<?>): string} */
CryptoJS.Hash;
/**
 * @record
 * @struct
 */
CryptoJS.Cipher = function() {};

/**
 * @param {string} message
 * @param {string} secretPassphrase
 * @param {!CryptoJS.CipherOption=} option
 * @return {!CryptoJS.WordArray}
 */
CryptoJS.Cipher.prototype.encrypt = function(message, secretPassphrase, option) {};

/**
 * @param {(string|!CryptoJS.WordArray)} encryptedMessage
 * @param {string} secretPassphrase
 * @param {!CryptoJS.CipherOption=} option
 * @return {{toString: function(!CryptoJS.Encoder): string}}
 */
CryptoJS.Cipher.prototype.decrypt = function(encryptedMessage, secretPassphrase, option) {};
/**
 * @record
 * @struct
 */
CryptoJS.CipherAlgorythm = function() {};

/**
 * @param {string} secretPassphrase
 * @param {!CryptoJS.CipherOption=} option
 * @return {!CryptoJS.Encriptor}
 */
CryptoJS.CipherAlgorythm.prototype.createEncryptor = function(secretPassphrase, option) {};

/**
 * @param {string} secretPassphrase
 * @param {!CryptoJS.CipherOption=} option
 * @return {!CryptoJS.Decryptor}
 */
CryptoJS.CipherAlgorythm.prototype.createDecryptor = function(secretPassphrase, option) {};
/**
 * @record
 * @struct
 */
CryptoJS.Encriptor = function() {};

/**
 * @param {string} messagePart
 * @return {string}
 */
CryptoJS.Encriptor.prototype.process = function(messagePart) {};

/**
 * @return {string}
 */
CryptoJS.Encriptor.prototype.finalize = function() {};
/**
 * @record
 * @struct
 */
CryptoJS.Decryptor = function() {};

/**
 * @param {string} messagePart
 * @return {string}
 */
CryptoJS.Decryptor.prototype.process = function(messagePart) {};

/**
 * @return {string}
 */
CryptoJS.Decryptor.prototype.finalize = function() {};
/**
 * @record
 * @struct
 */
CryptoJS.WordArray = function() {};
 /** @type {string} */
CryptoJS.WordArray.prototype.iv;
 /** @type {string} */
CryptoJS.WordArray.prototype.salt;
 /** @type {string} */
CryptoJS.WordArray.prototype.ciphertext;
 /** @type {string} */
CryptoJS.WordArray.prototype.key;

/** @typedef {{toString: function(!CryptoJS.Encoder): string}} */
CryptoJS.DecryptedMessage;
/**
 * @record
 * @struct
 */
CryptoJS.CipherOption = function() {};
 /** @type {string} */
CryptoJS.CipherOption.prototype.iv;
 /** @type {!CryptoJS.Mode} */
CryptoJS.CipherOption.prototype.mode;
 /** @type {!CryptoJS.Padding} */
CryptoJS.CipherOption.prototype.padding;

/* TODO: IndexSignature: CryptoJS */
/**
 * @record
 * @struct
 */
CryptoJS.Encoder = function() {};

/**
 * @param {string} encodedMessage
 * @return {?}
 */
CryptoJS.Encoder.prototype.parse = function(encodedMessage) {};

/**
 * @param {?} words
 * @return {string}
 */
CryptoJS.Encoder.prototype.stringify = function(words) {};
/**
 * @record
 * @struct
 */
CryptoJS.Mode = function() {};
/**
 * @record
 * @struct
 */
CryptoJS.Padding = function() {};
/**
 * @record
 * @struct
 */
CryptoJS.Hashes = function() {};
 /** @type {function(string, string, !Array<?>): string} */
CryptoJS.Hashes.prototype.MD5;
 /** @type {function(string, string, !Array<?>): string} */
CryptoJS.Hashes.prototype.SHA1;
 /** @type {function(string, string, !Array<?>): string} */
CryptoJS.Hashes.prototype.SHA256;
 /** @type {function(string, string, !Array<?>): string} */
CryptoJS.Hashes.prototype.SHA224;
 /** @type {function(string, string, !Array<?>): string} */
CryptoJS.Hashes.prototype.SHA512;
 /** @type {function(string, string, !Array<?>): string} */
CryptoJS.Hashes.prototype.SHA384;
 /** @type {function(string, string, !Array<?>): string} */
CryptoJS.Hashes.prototype.SHA3;
 /** @type {function(string, string, !Array<?>): string} */
CryptoJS.Hashes.prototype.RIPEMD160;
 /** @type {function(string, string, !Array<?>): string} */
CryptoJS.Hashes.prototype.HmacMD5;
 /** @type {function(string, string, !Array<?>): string} */
CryptoJS.Hashes.prototype.HmacSHA1;
 /** @type {function(string, string, !Array<?>): string} */
CryptoJS.Hashes.prototype.HmacSHA256;
 /** @type {function(string, string, !Array<?>): string} */
CryptoJS.Hashes.prototype.HmacSHA224;
 /** @type {function(string, string, !Array<?>): string} */
CryptoJS.Hashes.prototype.HmacSHA512;
 /** @type {function(string, string, !Array<?>): string} */
CryptoJS.Hashes.prototype.HmacSHA384;
 /** @type {function(string, string, !Array<?>): string} */
CryptoJS.Hashes.prototype.HmacSHA3;
 /** @type {function(string, string, !Array<?>): string} */
CryptoJS.Hashes.prototype.HmacRIPEMD160;
 /** @type {function(string, string, !Array<?>): string} */
CryptoJS.Hashes.prototype.PBKDF2;
 /** @type {!CryptoJS.Cipher} */
CryptoJS.Hashes.prototype.AES;
 /** @type {!CryptoJS.Cipher} */
CryptoJS.Hashes.prototype.DES;
 /** @type {!CryptoJS.Cipher} */
CryptoJS.Hashes.prototype.TripleDES;
 /** @type {!CryptoJS.Cipher} */
CryptoJS.Hashes.prototype.RC4;
 /** @type {!CryptoJS.Cipher} */
CryptoJS.Hashes.prototype.RC4Drop;
 /** @type {!CryptoJS.Cipher} */
CryptoJS.Hashes.prototype.Rabbit;
 /** @type {!CryptoJS.Cipher} */
CryptoJS.Hashes.prototype.RabbitLegacy;
 /** @type {!CryptoJS.Cipher} */
CryptoJS.Hashes.prototype.EvpKDF;
 /** @type {{AES: !CryptoJS.CipherAlgorythm, DES: !CryptoJS.CipherAlgorythm, TrippleDES: !CryptoJS.CipherAlgorythm, RC4: !CryptoJS.CipherAlgorythm, RC4Drop: !CryptoJS.CipherAlgorythm, Rabbit: !CryptoJS.CipherAlgorythm, RabbitLegacy: !CryptoJS.CipherAlgorythm, EvpKDF: !CryptoJS.CipherAlgorythm}} */
CryptoJS.Hashes.prototype.algo;
 /** @type {{OpenSSL: ?, Hex: ?}} */
CryptoJS.Hashes.prototype.format;
 /** @type {{Latin1: !CryptoJS.Encoder, Utf8: !CryptoJS.Encoder, Hex: !CryptoJS.Encoder, Utf16: !CryptoJS.Encoder, Utf16LE: !CryptoJS.Encoder, Base64: !CryptoJS.Encoder}} */
CryptoJS.Hashes.prototype.enc;
 /** @type {{CBC: !CryptoJS.Mode, CFB: !CryptoJS.Mode, CTR: !CryptoJS.Mode, CTRGladman: !CryptoJS.Mode, OFB: !CryptoJS.Mode, ECB: !CryptoJS.Mode}} */
CryptoJS.Hashes.prototype.mode;
 /** @type {{Pkcs7: !CryptoJS.Padding, AnsiX923: !CryptoJS.Padding, Iso10126: !CryptoJS.Padding, Iso97971: !CryptoJS.Padding, ZeroPadding: !CryptoJS.Padding, NoPadding: !CryptoJS.Padding}} */
CryptoJS.Hashes.prototype.pad;
