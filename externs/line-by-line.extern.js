/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/line-by-line/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ExportAssignment in  */
/**
 * @record
 * @struct
 */
function LineByLineReader() {}

/**
 * subscribe to an event emitted by reader
 * @param {string} event {\@link LineByLineReaderEvent}
 * @param {?} listener A void function with one param
 * @return {LineByLineReader}
 */
LineByLineReader.prototype.on = function(event, listener) {};

/**
 * Pauses the reader
 * @return {void}
 */
LineByLineReader.prototype.pause = function() {};

/**
 * Resumes the reader
 * @return {void}
 */
LineByLineReader.prototype.resume = function() {};

/**
 * Finishes the reader
 * @return {void}
 */
LineByLineReader.prototype.end = function() {};

/**
 * Closes the file stream
 * @return {void}
 */
LineByLineReader.prototype.close = function() {};
/**
 * @record
 * @struct
 */
function LineByLineReaderOptions() {}
 /** @type {string} */
LineByLineReaderOptions.prototype.encoding;
 /** @type {boolean} */
LineByLineReaderOptions.prototype.skipEmptyLines;
 /** @type {number} */
LineByLineReaderOptions.prototype.start;
/**
 * @record
 * @struct
 */
function LineByLineReaderConstructor() {}

/* TODO: ConstructSignature:  */
 /** @type {?} */
LineByLineReaderConstructor.prototype.prototype;

/** @typedef {string} */
var LineByLineReaderEvent;
 /** @type {?} */
var LineByLineReader;
