/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/passport-strategy/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */
/**
 * @implements {passport.Strategy}
 * @constructor
 * @struct
 */
function Strategy() {}

/**
 * Performs authentication for the request.
 * Note: Virtual function - re-implement in the strategy.
 * @param {!e.Request} req The request to authenticate.
 * @param {?=} options Options passed to the strategy.
 * @return {void}
 */
Strategy.prototype.authenticate = function(req, options) {};

/**
 * Authenticate `user`, with optional `info`.
 * 
 * Strategies should call this function to successfully authenticate a
 * user.  `user` should be an object supplied by the application after it
 * has been given an opportunity to verify credentials.  `info` is an
 * optional argument containing additional user information.  This is
 * useful for third-party authentication strategies to pass profile
 * details.
 * 
 * \@api public
 * @param {?} user
 * @param {?} info
 * @return {void}
 */
Strategy.prototype.success = function(user, info) {};

/**
 * Fail authentication, with optional `challenge` and `status`, defaulting
 * to 401.
 * 
 * Strategies should call this function to fail an authentication attempt.
 * 
 * \@api public
 * @param {?|number} challenge_or_status
 * @param {number=} status
 * @return {void}
 */
Strategy.prototype.fail = function(challenge_or_status, status) {};

/**
 * Redirect to `url` with optional `status`, defaulting to 302.
 * 
 * Strategies should call this function to redirect the user (via their
 * user agent) to a third-party website for authentication.
 * 
 * \@api public
 * @param {string} url
 * @param {number=} status
 * @return {void}
 */
Strategy.prototype.redirect = function(url, status) {};

/**
 * Pass without making a success or fail decision.
 * 
 * Under most circumstances, Strategies should not need to call this
 * function.  It exists primarily to allow previous authentication state
 * to be restored, for example from an HTTP session.
 * 
 * \@api public
 * @return {void}
 */
Strategy.prototype.pass = function() {};

/**
 * Internal error while performing authentication.
 * 
 * Strategies should call this function when an internal error occurs
 * during the process of performing authentication; for example, if the
 * user directory is not available.
 * 
 * \@api public
 * @param {!Error} err
 * @return {void}
 */
Strategy.prototype.error = function(err) {};
