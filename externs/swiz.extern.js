/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/swiz/index.d.ts:

/**
 * @constructor
 * @struct
 * @param {string} x
 * @param {string=} y
 */
function Cidr(x, y) {}

/**
 * @param {?} x
 * @return {boolean}
 */
Cidr.prototype.isInCIDR = function(x) {};

/**
 * @constructor
 * @struct
 * @param {?} schema
 * @param {?=} baton
 */
function Valve(schema, baton) {}

/**
 * @param {?} schema
 * @return {!Valve}
 */
Valve.prototype.setSchema = function(schema) {};

/**
 * @param {function(?, function(!Error, ?): void): void} func
 * @return {!Valve}
 */
Valve.prototype.addFinalValidator = function(func) {};

/**
 * @param {string} name
 * @param {string} description
 * @param {function(?, function(!Error, ?): void): void} func
 * @return {void}
 */
Valve.prototype.addChainValidator = function(name, description, func) {};

/**
 * @param {?} obj
 * @param {?|function(?, ?): void} options_or_callback
 * @param {function(?, ?): void=} callback
 * @return {void}
 */
Valve.prototype.check = function(obj, options_or_callback, callback) {};

/**
 * @param {?} existing
 * @param {?} obj
 * @param {function(?, ?): void} callback
 * @return {void}
 */
Valve.prototype.checkUpdate = function(existing, obj, callback) {};

/**
 * @param {?} schema
 * @return {?}
 */
Valve.prototype.help = function(schema) {};
/**
 * @record
 * @struct
 */
function ICheckOptions() {}
 /** @type {boolean} */
ICheckOptions.prototype.strict;
/**
 * @record
 * @struct
 */
function IValveSchema() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IValveSchemaMember() {}
/**
 * @extends {IValveSchemaMember}
 * @record
 * @struct
 */
function IValveSchemaMemberArray() {}

/* TODO: IndexSignature:  */

/**
 * @return {?}
 */
function Chain() {}

/**
 * @return {?}
 */
function chain() {}
/**
 * @extends {IValveSchemaMember}
 * @record
 * @struct
 */
function IChain() {}

/**
 * @param {string} name
 * @return {number}
 */
IChain.prototype.getValidatorPos = function(name) {};

/**
 * @param {string} name
 * @return {number}
 */
IChain.prototype.hasValidator = function(name) {};

/**
 * @param {number} pos
 * @return {?}
 */
IChain.prototype.getValidatorAtPos = function(pos) {};

/**
 * @return {?}
 */
IChain.prototype.isUnique = function() {};

/**
 * @return {?}
 */
IChain.prototype.toUnique = function() {};

/**
 * @return {?}
 */
IChain.prototype.notIPBlacklisted = function() {};

/**
 * @return {?}
 */
IChain.prototype.isCIDR = function() {};

/**
 * @return {?}
 */
IChain.prototype.isEmail = function() {};

/**
 * @return {?}
 */
IChain.prototype.isUrl = function() {};

/**
 * @return {?}
 */
IChain.prototype.isAddressPair = function() {};

/**
 * @return {?}
 */
IChain.prototype.isIP = function() {};

/**
 * @return {?}
 */
IChain.prototype.isIPv4 = function() {};

/**
 * @return {?}
 */
IChain.prototype.isIPv6 = function() {};

/**
 * @return {?}
 */
IChain.prototype.isHostnameOrIp = function() {};

/**
 * @param {!Array<string>=} blacklist
 * @return {?}
 */
IChain.prototype.isAllowedFQDNOrIP = function(blacklist) {};

/**
 * @return {?}
 */
IChain.prototype.isHostname = function() {};

/**
 * @return {?}
 */
IChain.prototype.isAlpha = function() {};

/**
 * @return {?}
 */
IChain.prototype.isAlphanumeric = function() {};

/**
 * @return {?}
 */
IChain.prototype.isNumeric = function() {};

/**
 * @return {?}
 */
IChain.prototype.isInt = function() {};

/**
 * @return {?}
 */
IChain.prototype.isLowercase = function() {};

/**
 * @return {?}
 */
IChain.prototype.isUppercase = function() {};

/**
 * @return {?}
 */
IChain.prototype.isDecimal = function() {};

/**
 * @return {?}
 */
IChain.prototype.isFloat = function() {};

/**
 * @return {?}
 */
IChain.prototype.notNull = function() {};

/**
 * @return {?}
 */
IChain.prototype.isNull = function() {};

/**
 * @return {?}
 */
IChain.prototype.notEmpty = function() {};

/**
 * @param {?} arg
 * @return {?}
 */
IChain.prototype.equals = function(arg) {};

/**
 * @param {?} arg
 * @return {?}
 */
IChain.prototype.contains = function(arg) {};

/**
 * @param {?} arg
 * @return {?}
 */
IChain.prototype.notContains = function(arg) {};

/**
 * @param {!Array<?>} values
 * @param {boolean=} caseSensitive
 * @return {?}
 */
IChain.prototype.notIn = function(values, caseSensitive) {};

/**
 * @param {!RegExp|string} pattern
 * @param {string=} modifiers
 * @return {?}
 */
IChain.prototype.regex = function(pattern, modifiers) {};

/**
 * @param {string} pattern
 * @param {string=} modifiers
 * @return {?}
 */
IChain.prototype.is = function(pattern, modifiers) {};

/**
 * @param {!RegExp|string} pattern
 * @param {string=} modifiers
 * @return {?}
 */
IChain.prototype.notRegex = function(pattern, modifiers) {};

/**
 * @param {string} pattern
 * @param {string} modifiers
 * @return {?}
 */
IChain.prototype.not = function(pattern, modifiers) {};

/**
 * @param {number} min
 * @param {number=} max
 * @return {?}
 */
IChain.prototype.len = function(min, max) {};

/**
 * @param {number} min
 * @param {number} max
 * @return {?}
 */
IChain.prototype.numItems = function(min, max) {};

/**
 * @return {?}
 */
IChain.prototype.toFloat = function() {};

/**
 * @return {?}
 */
IChain.prototype.toInt = function() {};

/**
 * @return {?}
 */
IChain.prototype.toBoolean = function() {};

/**
 * @return {?}
 */
IChain.prototype.toBooleanStrict = function() {};

/**
 * @return {?}
 */
IChain.prototype.entityDecode = function() {};

/**
 * @return {?}
 */
IChain.prototype.entityEncode = function() {};

/**
 * @param {string=} chars
 * @return {?}
 */
IChain.prototype.trim = function(chars) {};

/**
 * @param {string=} chars
 * @return {?}
 */
IChain.prototype.ltrim = function(chars) {};

/**
 * @param {string} chars
 * @return {?}
 */
IChain.prototype.rtrim = function(chars) {};

/**
 * @param {string} replace
 * @return {?}
 */
IChain.prototype.ifNull = function(replace) {};

/**
 * @param {boolean=} is_image
 * @return {?}
 */
IChain.prototype.xss = function(is_image) {};

/**
 * @param {?} map
 * @return {?}
 */
IChain.prototype.enumerated = function(map) {};

/**
 * @param {!Array<?>} array
 * @return {?}
 */
IChain.prototype.inArray = function(array) {};

/**
 * @return {?}
 */
IChain.prototype.isString = function() {};

/**
 * @return {?}
 */
IChain.prototype.isBoolean = function() {};

/**
 * @param {?} min
 * @param {?} max
 * @return {?}
 */
IChain.prototype.range = function(min, max) {};

/**
 * @return {?}
 */
IChain.prototype.optional = function() {};

/**
 * @return {?}
 */
IChain.prototype.isPort = function() {};

/**
 * @return {?}
 */
IChain.prototype.isV1UUID = function() {};

/**
 * @return {?}
 */
IChain.prototype.immutable = function() {};

/**
 * @return {?}
 */
IChain.prototype.updateRequired = function() {};

/**
 * @param {?} chain
 * @return {?}
 */
IChain.prototype.isArray = function(chain) {};

/**
 * @param {?} keyChain
 * @param {?} valueChain
 * @return {?}
 */
IChain.prototype.isHash = function(keyChain, valueChain) {};

/**
 * @param {string} target
 * @return {?}
 */
IChain.prototype.rename = function(target) {};

/**
 * @param {string} name
 * @return {?}
 */
IChain.prototype.custom = function(name) {};

/**
 * @param {!Array<!struct.IObj>} def
 * @return {!Array<?>}
 */
function defToValve(def) {}

/**
 * @constructor
 * @struct
 * @param {!Array<!struct.IObj>} defs
 * @param {?=} options
 */
function Swiz(defs, options) {}

/**
 * @param {?} obj
 * @param {function(?, ?): void} callback
 * @return {void}
 */
Swiz.prototype.buildObject = function(obj, callback) {};

/**
 * @param {?} obj
 * @return {?}
 */
Swiz.prototype.buildObjectSync = function(obj) {};

/**
 * @param {?} obj
 * @return {string}
 */
Swiz.prototype.serializeJson = function(obj) {};

/**
 * @param {?} obj
 * @return {string}
 */
Swiz.prototype.serializeXml = function(obj) {};

/**
 * @param {string} xml
 * @return {?}
 */
Swiz.prototype.deserializeXml = function(xml) {};

/**
 * @param {SERIALIZATION} mode
 * @param {number} version
 * @param {?} obj
 * @param {function(?, string): void} callback
 * @return {void}
 */
Swiz.prototype.serialize = function(mode, version, obj, callback) {};

/**
 * @param {SERIALIZATION} mode
 * @param {!Array<?>} array
 * @param {?} metadata
 * @param {function(?, string): void} callback
 * @return {void}
 */
Swiz.prototype.serializeForPagination = function(mode, array, metadata, callback) {};

/**
 * @param {SERIALIZATION} mode
 * @param {number} version
 * @param {string} raw
 * @param {function(?, ?): void} callback
 * @return {void}
 */
Swiz.prototype.deserialize = function(mode, version, raw, callback) {};

/**
 * @param {string} stype
 * @param {string} name
 * @return {!struct.IField}
 */
Swiz.prototype.getFieldDefinition = function(stype, name) {};
/**
 * @record
 * @struct
 */
function ISerializable() {}

/**
 * @return {string}
 */
ISerializable.prototype.getSerializerType = function() {};
/**
 * @record
 * @struct
 */
function ISwizOptions() {}
 /** @type {boolean} */
ISwizOptions.prototype.stripNulls;
 /** @type {boolean} */
ISwizOptions.prototype.stripSerializerType;
 /** @type {string} */
ISwizOptions.prototype.for;
/**
 * @record
 * @struct
 */
function IValidator() {}
 /** @type {string} */
IValidator.prototype.name;
 /** @type {string} */
IValidator.prototype.help;

/**
 * @param {?} value
 * @param {?} baton
 * @param {!Function} callback
 * @return {void}
 */
IValidator.prototype.func = function(value, baton, callback) {};

/**
 * @param {?} obj
 * @return {?}
 */
function stripSerializerTypes(obj) {}
/** @const */
var struct = {};

/**
 * @param {string} name
 * @param {!struct.IObjOptions=} options
 * @return {!struct.IObj}
 */
struct.Obj = function(name, options) {};

/**
 * @param {string} name
 * @param {!struct.IFieldOptions=} options
 * @return {!struct.IField}
 */
struct.Field = function(name, options) {};

/**
 * @param {?} value
 * @param {string} coerceTo
 * @return {?}
 */
struct.coerce = function(value, coerceTo) {};
/**
 * @record
 * @struct
 */
struct.IObj = function() {};
 /** @type {string} */
struct.IObj.prototype.name;
 /** @type {!struct.IObjOptions} */
struct.IObj.prototype.options;
 /** @type {string} */
struct.IObj.prototype.singular;
 /** @type {string} */
struct.IObj.prototype.plural;
 /** @type {!Array<!struct.IField>} */
struct.IObj.prototype.fields;
/**
 * @record
 * @struct
 */
struct.IField = function() {};
 /** @type {string} */
struct.IField.prototype.name;
 /** @type {!struct.IFieldOptions} */
struct.IField.prototype.options;
 /** @type {string} */
struct.IField.prototype.src;
 /** @type {string} */
struct.IField.prototype.singular;
 /** @type {string} */
struct.IField.prototype.plural;
 /** @type {string} */
struct.IField.prototype.desc;
 /** @type {?} */
struct.IField.prototype.val;
 /** @type {boolean} */
struct.IField.prototype.attribute;
 /** @type {boolean} */
struct.IField.prototype.enumerated;
 /** @type {boolean} */
struct.IField.prototype.ignorePublic;
 /** @type {!Array<string>} */
struct.IField.prototype.filterFrom;
 /** @type {?} */
struct.IField.prototype.coerceTo;
/**
 * @record
 * @struct
 */
struct.IObjOptions = function() {};
 /** @type {string} */
struct.IObjOptions.prototype.singular;
 /** @type {string} */
struct.IObjOptions.prototype.plural;
 /** @type {!Array<!struct.IField>} */
struct.IObjOptions.prototype.fields;
/**
 * @record
 * @struct
 */
struct.IFieldOptions = function() {};
 /** @type {string} */
struct.IFieldOptions.prototype.src;
 /** @type {string} */
struct.IFieldOptions.prototype.singular;
 /** @type {string} */
struct.IFieldOptions.prototype.plural;
 /** @type {string} */
struct.IFieldOptions.prototype.desc;
 /** @type {?} */
struct.IFieldOptions.prototype.val;
 /** @type {boolean} */
struct.IFieldOptions.prototype.attribute;
 /** @type {?} */
struct.IFieldOptions.prototype.enumerated;
 /** @type {boolean} */
struct.IFieldOptions.prototype.ignorePublic;
 /** @type {!Array<string>} */
struct.IFieldOptions.prototype.filterFrom;
 /** @type {string} */
struct.IFieldOptions.prototype.coerceTo;

/** @const */
var SERIALIZATION = {};
/** @const {number} */
SERIALIZATION.SERIALIZATION_JSON;
/** @const {number} */
SERIALIZATION.SERIALIZATION_XML;
