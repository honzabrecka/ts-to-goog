/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/hopscotch/index.d.ts:

/** @typedef {(string|!Array<string>|function(): void)} */
var CallbackNameNamesOrDefinition;
/**
 * @record
 * @struct
 */
function HopscotchConfiguration() {}
 /** @type {number} */
HopscotchConfiguration.prototype.bubbleWidth;
 /** @type {number} */
HopscotchConfiguration.prototype.buddleHeight;
 /** @type {boolean} */
HopscotchConfiguration.prototype.smoothScroll;
 /** @type {number} */
HopscotchConfiguration.prototype.scrollDuration;
 /** @type {number} */
HopscotchConfiguration.prototype.scrollTopMargin;
 /** @type {boolean} */
HopscotchConfiguration.prototype.showCloseButton;
 /** @type {boolean} */
HopscotchConfiguration.prototype.showNextButton;
 /** @type {boolean} */
HopscotchConfiguration.prototype.showPrevButton;
 /** @type {number} */
HopscotchConfiguration.prototype.arrowWidth;
 /** @type {boolean} */
HopscotchConfiguration.prototype.skipIfNoElement;
 /** @type {boolean} */
HopscotchConfiguration.prototype.nextOnTargetClick;
 /** @type {(string|!Array<string>|function(): void)} */
HopscotchConfiguration.prototype.onNext;
 /** @type {(string|!Array<string>|function(): void)} */
HopscotchConfiguration.prototype.onPrev;
 /** @type {(string|!Array<string>|function(): void)} */
HopscotchConfiguration.prototype.onStart;
 /** @type {(string|!Array<string>|function(): void)} */
HopscotchConfiguration.prototype.onEnd;
 /** @type {(string|!Array<string>|function(): void)} */
HopscotchConfiguration.prototype.onClose;
 /** @type {(string|!Array<string>|function(): void)} */
HopscotchConfiguration.prototype.onError;
 /** @type {{nextBtn: string, prevBtn: string, doneBtn: string, skipBtn: string, closeTooltip: string, stepNums: !Array<string>}} */
HopscotchConfiguration.prototype.i18n;
/**
 * @extends {HopscotchConfiguration}
 * @record
 * @struct
 */
function TourDefinition() {}
 /** @type {string} */
TourDefinition.prototype.id;
 /** @type {!Array<!StepDefinition>} */
TourDefinition.prototype.steps;
/**
 * @record
 * @struct
 */
function StepDefinition() {}
 /** @type {string} */
StepDefinition.prototype.placement;
 /** @type {(string|!HTMLElement|!Array<(string|!HTMLElement)>)} */
StepDefinition.prototype.target;
 /** @type {string} */
StepDefinition.prototype.title;
 /** @type {string} */
StepDefinition.prototype.content;
 /** @type {number} */
StepDefinition.prototype.width;
 /** @type {number} */
StepDefinition.prototype.padding;
 /** @type {number} */
StepDefinition.prototype.xOffset;
 /** @type {number} */
StepDefinition.prototype.yOffset;
 /** @type {number} */
StepDefinition.prototype.arrowOffset;
 /** @type {number} */
StepDefinition.prototype.delay;
 /** @type {number} */
StepDefinition.prototype.zIndex;
 /** @type {boolean} */
StepDefinition.prototype.showNextButton;
 /** @type {boolean} */
StepDefinition.prototype.showPrevButton;
 /** @type {boolean} */
StepDefinition.prototype.showCTAButton;
 /** @type {string} */
StepDefinition.prototype.ctaLabel;
 /** @type {boolean} */
StepDefinition.prototype.multipage;
 /** @type {boolean} */
StepDefinition.prototype.showSkip;
 /** @type {boolean} */
StepDefinition.prototype.fixedElement;
 /** @type {boolean} */
StepDefinition.prototype.nextOnTargetClick;
 /** @type {(string|!Array<string>|function(): void)} */
StepDefinition.prototype.onPrev;
 /** @type {(string|!Array<string>|function(): void)} */
StepDefinition.prototype.onNext;
 /** @type {(string|!Array<string>|function(): void)} */
StepDefinition.prototype.onShow;
 /** @type {(string|!Array<string>|function(): void)} */
StepDefinition.prototype.onCTA;
/**
 * @record
 * @struct
 */
function HopscotchStatic() {}

/**
 * Actually starts the tour. Optional stepNum argument specifies what step to start at.
 * @param {!TourDefinition} tour
 * @param {number=} stepNum
 * @return {void}
 */
HopscotchStatic.prototype.startTour = function(tour, stepNum) {};

/**
 * Skips to a given step in the tour
 * @param {number} id
 * @return {void}
 */
HopscotchStatic.prototype.showStep = function(id) {};

/**
 * Goes back one step in the tour
 * @return {void}
 */
HopscotchStatic.prototype.prevStep = function() {};

/**
 * Goes forward one step in the tour
 * @return {void}
 */
HopscotchStatic.prototype.nextStep = function() {};

/**
 * Ends the current tour. If clearCookie is set to false, the tour state is preserved.
 * Otherwise, if clearCookie is set to true or is not provided, the tour state is cleared.
 * @param {boolean} clearCookie
 * @return {void}
 */
HopscotchStatic.prototype.endTour = function(clearCookie) {};

/**
 * Sets options for running the tour.
 * @param {!HopscotchConfiguration} options
 * @return {void}
 */
HopscotchStatic.prototype.configure = function(options) {};

/**
 * Returns the currently running tour.
 * @return {!TourDefinition}
 */
HopscotchStatic.prototype.getCurrTour = function() {};

/**
 * Returns the currently running tour.
 * @return {number}
 */
HopscotchStatic.prototype.getCurrStepNum = function() {};

/**
 * Checks for tour state saved in sessionStorage/cookies and returns the state if
 * it exists. Use this method to determine whether or not you should resume a tour.
 * @return {string}
 */
HopscotchStatic.prototype.getState = function() {};

/**
 * Adds a callback for one of the event types. Valid event types are:
 * *start*, *end*, *next*, *prev*, *show*, *close*, *error*
 * @param {string} eventName
 * @param {function(): void} callback
 * @return {void}
 */
HopscotchStatic.prototype.listen = function(eventName, callback) {};

/**
 * Removes a callback for one of the event types.
 * @param {string} eventName
 * @param {function(): void} callback
 * @return {void}
 */
HopscotchStatic.prototype.unlisten = function(eventName, callback) {};

/**
 * Remove callbacks for hopscotch events. If tourOnly is set to true, only removes
 * callbacks specified by a tour (callbacks set by hopscotch.configure or hopscotch.listen
 * will remain). If eventName is null or undefined, callbacks for all events will be removed.
 * @param {string=} eventName
 * @param {boolean=} tourOnly
 * @return {void}
 */
HopscotchStatic.prototype.removeCallbacks = function(eventName, tourOnly) {};

/**
 * Registers a callback helper. See the section about Helpers below.
 * @param {string} id
 * @param {function(!Array<?>): void} helper
 * @return {void}
 */
HopscotchStatic.prototype.registerHelper = function(id, helper) {};

/**
 * Resets i18n strings to original default values.
 * @return {void}
 */
HopscotchStatic.prototype.resetDefaultI18N = function() {};

/**
 * Resets all config options to original values.
 * @return {void}
 */
HopscotchStatic.prototype.resetDefaultOptions = function() {};
 /** @type {!HopscotchStatic} */
var hopscotch;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "hopscotch"
/** @const */
tsickle_declare_module.hopscotch = {};

/* TODO: ExportAssignment in tsickle_declare_module.hopscotch */
