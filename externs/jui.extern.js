/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jui/index.d.ts:

/* TODO: ImportDeclaration in  */
/**
 * @extends {UIEvent}
 * @record
 * @struct
 */
function UIAccordion() {}

/* TODO: CallSignature:  */

/**
 * \@method activeIndex
 * Gets the index of the currently enabled node
 * 
 * @return {number}
 */
UIAccordion.prototype.activeIndex = function() {};
/**
 * @record
 * @struct
 */
function UIAutoComplete() {}

/* TODO: CallSignature:  */

/**
 * \@method update
 * Updates words subject to autofill
 * 
 * 
 * @param {!Array<string>} newWords
 * @return {void}
 */
UIAutoComplete.prototype.update = function(newWords) {};

/**
 * \@method close
 * Close the active drop-down
 * 
 * @return {void}
 */
UIAutoComplete.prototype.close = function() {};

/**
 * \@method list
 * Gets filtered words subject to autofill
 * 
 * @return {!Array<string>}
 */
UIAutoComplete.prototype.list = function() {};
/**
 * @record
 * @struct
 */
function UIColorPicker() {}

/* TODO: CallSignature:  */

/**
 * @param {string} type
 * @return {(string|!Object)}
 */
UIColorPicker.prototype.getColor = function(type) {};

/**
 * @param {(string|!Object)} value
 * @return {void}
 */
UIColorPicker.prototype.setColor = function(value) {};
/**
 * @record
 * @struct
 */
function UICombo() {}

/* TODO: CallSignature:  */

/**
 * \@method setIndex
 * Selects a button of a specified index
 * 
 * @param {number} index
 * @return {void}
 */
UICombo.prototype.setIndex = function(index) {};

/**
 * \@method setValue
 * Selects a button having a specified value
 * 
 * @param {?} value
 * @return {void}
 */
UICombo.prototype.setValue = function(value) {};

/**
 * \@method getData
 * Gets the data of the button currently selected
 * 
 * @return {!Object}
 */
UICombo.prototype.getData = function() {};

/**
 * \@method getValue
 * Gets the value of the button currently selected
 * 
 * @return {?}
 */
UICombo.prototype.getValue = function() {};

/**
 * \@method getText
 * Gets the markup text of the button currently selected
 * 
 * @return {string}
 */
UICombo.prototype.getText = function() {};

/**
 * \@method open
 * Shows the element list of a combo box
 * @param {?} e
 * @return {void}
 */
UICombo.prototype.open = function(e) {};

/**
 * \@method fold
 * Hides the element list of a combo box
 * @return {void}
 */
UICombo.prototype.fold = function() {};

/**
 * \@method reload
 * Re-defines a combo box
 * @return {void}
 */
UICombo.prototype.reload = function() {};
/**
 * @record
 * @struct
 */
function UIDatePicker() {}

/* TODO: CallSignature:  */

/**
 * \@method page
 * Outputs a calendar that fits the year/month entered
 * 
 * @param {number} y
 * @param {number} m
 * @return {void}
 */
UIDatePicker.prototype.page = function(y, m) {};

/**
 * \@method prev
 * Outputs a calendar that fits the previous year/month
 * 
 * @param {?} e
 * @param {boolean=} moveYear
 * @return {void}
 */
UIDatePicker.prototype.prev = function(e, moveYear) {};

/**
 * \@method next
 * Outputs a calendar that fits the next year/month
 * 
 * @param {?} e
 * @param {boolean=} moveYear
 * @return {void}
 */
UIDatePicker.prototype.next = function(e, moveYear) {};

/**
 * \@method select
 * Selects today if there is no value, or selects a date applicable to a timestamp or year/month/date
 * 
 * @param {...?} args
 * @return {void}
 */
UIDatePicker.prototype.select = function(args) {};

/**
 * \@method addTime
 * Selects a date corresponding to the time added to the currently selected date
 * 
 * @param {(number|!Date)} time
 * @return {void}
 */
UIDatePicker.prototype.addTime = function(time) {};

/**
 * \@method getDate
 * Gets the value of the date currently selected
 * 
 * @return {!Date}
 */
UIDatePicker.prototype.getDate = function() {};

/**
 * \@method getTime
 * Gets the timestamp value of the date currently selected
 * 
 * @return {number}
 */
UIDatePicker.prototype.getTime = function() {};

/**
 * \@method getFormat
 * Gets a date string that fits the format entered
 * 
 * @param {string} format
 * @return {string}
 */
UIDatePicker.prototype.getFormat = function(format) {};

/**
 * \@method reload
 * Reloads the datepicker
 * @return {void}
 */
UIDatePicker.prototype.reload = function() {};
/**
 * @record
 * @struct
 */
function UIDropdown() {}

/* TODO: CallSignature:  */

/**
 * \@method update
 * Changes the dropdown list
 * 
 * @param {!Array<?>} nodes
 * @return {void}
 */
UIDropdown.prototype.update = function(nodes) {};

/**
 * \@method hide
 * Hides the dropdown
 * @return {void}
 */
UIDropdown.prototype.hide = function() {};

/**
 * \@method show
 * Shows a dropdown at the specified coordinates
 * 
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
UIDropdown.prototype.show = function(x, y) {};

/**
 * \@method move
 * Moves a dropdown to the specified coordinates
 * 
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
UIDropdown.prototype.move = function(x, y) {};

/**
 * \@method reload
 * Reloads the dropdown list
 * @return {void}
 */
UIDropdown.prototype.reload = function() {};
/**
 * @record
 * @struct
 */
function UIModal() {}

/* TODO: CallSignature:  */

/**
 * \@method hide
 * Hides a modal
 * @return {void}
 */
UIModal.prototype.hide = function() {};

/**
 * \@method show
 * Shows a modal
 * @return {void}
 */
UIModal.prototype.show = function() {};

/**
 * \@method resize
 * Re-adjust the location of a modal
 * @return {void}
 */
UIModal.prototype.resize = function() {};
/**
 * @record
 * @struct
 */
function UINotify() {}

/* TODO: CallSignature:  */

/**
 * \@method add
 * Adds a notice message. The value passed is the data object shown by the notice template
 * 
 * @param {!Object} data
 * @param {number} timeout
 * @return {void}
 */
UINotify.prototype.add = function(data, timeout) {};

/**
 * \@method reset
 * Removes all notice messages that are enabled
 * @return {void}
 */
UINotify.prototype.reset = function() {};
/**
 * @record
 * @struct
 */
function UIPaging() {}

/* TODO: CallSignature:  */

/**
 * \@method reload
 * Reloads the number of specified data records, or reloads the initially configured number of data records if there is no parameter
 * 
 * @param {number} count
 * @return {void}
 */
UIPaging.prototype.reload = function(count) {};

/**
 * \@method page
 * Changes to a specified page number, and gets the currently enabled page number if there is no parameter
 * 
 * @param {number} pNo
 * @return {void}
 */
UIPaging.prototype.page = function(pNo) {};

/**
 * \@method next
 * Changes to the next page
 * @return {void}
 */
UIPaging.prototype.next = function() {};

/**
 * \@method prev
 * Changes to the previous page
 * @return {void}
 */
UIPaging.prototype.prev = function() {};

/**
 * \@method first
 * Changes to the first page
 * @return {void}
 */
UIPaging.prototype.first = function() {};

/**
 * \@method last
 * Changes to the last page
 * @return {void}
 */
UIPaging.prototype.last = function() {};
/**
 * @record
 * @struct
 */
function UIProgress() {}

/* TODO: CallSignature:  */

/**
 * @param {boolean} isAnimated
 * @return {void}
 */
UIProgress.prototype.setAnimated = function(isAnimated) {};

/**
 * @param {boolean} isStriped
 * @return {void}
 */
UIProgress.prototype.setStriped = function(isStriped) {};

/**
 * @param {number} v
 * @return {void}
 */
UIProgress.prototype.setValue = function(v) {};

/**
 * @return {number}
 */
UIProgress.prototype.getValue = function() {};
/**
 * @record
 * @struct
 */
function UIProperty() {}

/* TODO: CallSignature:  */

/**
 * @param {!Array<?>} newItems
 * @return {void}
 */
UIProperty.prototype.loadItems = function(newItems) {};

/**
 * @param {(!Object|!Array<?>)} item
 * @return {void}
 */
UIProperty.prototype.addItem = function(item) {};

/**
 * @param {!Object} item
 * @return {void}
 */
UIProperty.prototype.removeItem = function(item) {};

/**
 * \@method getGroupList
 * 
 * get a list of  group's title.
 * @return {!Array<?>}
 */
UIProperty.prototype.getGroupList = function() {};

/**
 * \@method collapsed
 * 
 * collapse group's children
 * 
 * @param {string} id
 * @return {void}
 */
UIProperty.prototype.collapsed = function(id) {};

/**
 * \@method expanded
 * 
 * expand group's children
 * 
 * @param {string} id
 * @return {void}
 */
UIProperty.prototype.expanded = function(id) {};

/**
 * \@method getValue
 * 
 * get a list of property's value
 * 
 * @param {string=} key
 * @return {(!Object|!Array<?>)}
 */
UIProperty.prototype.getValue = function(key) {};

/**
 * @return {!Array<?>}
 */
UIProperty.prototype.getDefaultValue = function() {};

/**
 * @param {!Object} obj
 * @return {void}
 */
UIProperty.prototype.initValue = function(obj) {};

/**
 * \@method getValue
 * 
 * set a list of property's value
 * 
 * @param {!Object} obj
 * @return {void}
 */
UIProperty.prototype.setValue = function(obj) {};

/**
 * @param {string} key
 * @return {?}
 */
UIProperty.prototype.findRender = function(key) {};

/**
 * @param {string} key
 * @return {?}
 */
UIProperty.prototype.findItem = function(key) {};

/**
 * @param {string} key
 * @param {?} value
 * @return {void}
 */
UIProperty.prototype.updateValue = function(key, value) {};

/**
 * @param {string} key
 * @return {?}
 */
UIProperty.prototype.getAllValue = function(key) {};

/**
 * @param {?} $dom
 * @param {?} newValue
 * @return {void}
 */
UIProperty.prototype.refreshValue = function($dom, newValue) {};
/**
 * @record
 * @struct
 */
function UISelect() {}

/* TODO: CallSignature:  */

/**
 * @param {?} value
 * @return {void}
 */
UISelect.prototype.setValue = function(value) {};

/**
 * @return {?}
 */
UISelect.prototype.getValue = function() {};

/**
 * @param {number} index
 * @return {void}
 */
UISelect.prototype.setSelectedIndex = function(index) {};

/**
 * @return {number}
 */
UISelect.prototype.getSelectedIndex = function() {};

/**
 * @param {!Array<?>} data
 * @return {void}
 */
UISelect.prototype.update = function(data) {};
/**
 * @record
 * @struct
 */
function UISlider() {}

/* TODO: CallSignature:  */

/**
 * \@method setFromValue
 * set FromHandle's value
 * 
 * @param {number} value
 * @return {void}
 */
UISlider.prototype.setFromValue = function(value) {};

/**
 * \@method setToValue
 * set ToHandle's value
 * 
 * @param {number} value
 * @return {void}
 */
UISlider.prototype.setToValue = function(value) {};

/**
 * \@method getFromValue
 * get FromHandle's value
 * 
 * @return {number}
 */
UISlider.prototype.getFromValue = function() {};

/**
 * \@method getToValue
 * get ToHandle's value
 * 
 * @return {number}
 */
UISlider.prototype.getToValue = function() {};
/**
 * @record
 * @struct
 */
function UISplitter() {}

/* TODO: CallSignature:  */

/**
 * @param {string} d
 * @return {void}
 */
UISplitter.prototype.setDirection = function(d) {};

/**
 * @param {number} size
 * @return {void}
 */
UISplitter.prototype.setInitSize = function(size) {};

/**
 * @param {number} index
 * @return {void}
 */
UISplitter.prototype.setHide = function(index) {};

/**
 * @param {number} index
 * @return {void}
 */
UISplitter.prototype.setShow = function(index) {};

/**
 * @param {number} index
 * @return {void}
 */
UISplitter.prototype.toggle = function(index) {};
/**
 * @record
 * @struct
 */
function UISwitch() {}

/* TODO: CallSignature:  */

/**
 * @return {boolean}
 */
UISwitch.prototype.getValue = function() {};

/**
 * @param {boolean} value
 * @return {void}
 */
UISwitch.prototype.setValue = function(value) {};

/**
 * @return {void}
 */
UISwitch.prototype.toggle = function() {};
/**
 * @record
 * @struct
 */
function UITab() {}

/* TODO: CallSignature:  */

/**
 * \@method update
 * Changes the tab list
 * 
 * @param {!Array<?>} nodes
 * @return {void}
 */
UITab.prototype.update = function(nodes) {};

/**
 * \@method insert
 * Adds a tab at a specified index
 * 
 * @param {number} index
 * @param {!Object} node
 * @return {void}
 */
UITab.prototype.insert = function(index, node) {};

/**
 * \@method append
 * Adds a tab to the last node
 * 
 * @param {!Object} node
 * @return {void}
 */
UITab.prototype.append = function(node) {};

/**
 * \@method prepend
 * Adds a tab to the first node
 * 
 * @param {!Object} node
 * @return {void}
 */
UITab.prototype.prepend = function(node) {};

/**
 * \@method remove
 * Removes a tab at a specified index
 * 
 * @param {number} index
 * @return {void}
 */
UITab.prototype.remove = function(index) {};

/**
 * \@method move
 * Changes a specified tab to a tab at a target index
 * 
 * @param {number} index
 * @param {number} targetIndex
 * @return {void}
 */
UITab.prototype.move = function(index, targetIndex) {};

/**
 * \@method show
 * Enables the tab at a specified index
 * 
 * @param {number} index
 * @return {void}
 */
UITab.prototype.show = function(index) {};

/**
 * \@method enable
 * Enables the tab at a specified index
 * 
 * @param {number} index
 * @return {void}
 */
UITab.prototype.enable = function(index) {};

/**
 * \@method disable
 * Disables the tab at a specified index
 * 
 * @param {number} index
 * @return {void}
 */
UITab.prototype.disable = function(index) {};

/**
 * \@method activeIndex
 * Gets the index of the currently enabled tab
 * 
 * @return {number}
 */
UITab.prototype.activeIndex = function() {};
/**
 * @record
 * @struct
 */
function UITooltip() {}

/* TODO: CallSignature:  */

/**
 * \@method update
 * Changes the content of a tooltip
 * 
 * @param {string} newTitle
 * @return {void}
 */
UITooltip.prototype.update = function(newTitle) {};
/**
 * @record
 * @struct
 */
function UITreeNode() {}
 /** @type {!Array<?>} */
UITreeNode.prototype.data;
 /** @type {?} */
UITreeNode.prototype.element;
 /** @type {number} */
UITreeNode.prototype.index;
 /** @type {number} */
UITreeNode.prototype.nodenum;
 /** @type {?} */
UITreeNode.prototype.parent;
 /** @type {!Array<?>} */
UITreeNode.prototype.children;
 /** @type {number} */
UITreeNode.prototype.depth;
 /** @type {string} */
UITreeNode.prototype.type;
/**
 * @record
 * @struct
 */
function UITreeBase() {}

/**
 * @param {...?} args
 * @return {?}
 */
UITreeBase.prototype.appendNode = function(args) {};

/**
 * @param {string} index
 * @param {?} data
 * @return {?}
 */
UITreeBase.prototype.insertNode = function(index, data) {};

/**
 * @param {string} index
 * @param {?} data
 * @return {?}
 */
UITreeBase.prototype.updateNode = function(index, data) {};

/**
 * @param {string} index
 * @return {void}
 */
UITreeBase.prototype.removeNode = function(index) {};

/**
 * @return {void}
 */
UITreeBase.prototype.removeNodes = function() {};

/**
 * @param {string} index
 * @return {void}
 */
UITreeBase.prototype.openNode = function(index) {};

/**
 * @param {string} index
 * @return {void}
 */
UITreeBase.prototype.foldNode = function(index) {};

/**
 * @param {string} index
 * @return {void}
 */
UITreeBase.prototype.openNodeAll = function(index) {};

/**
 * @param {string} index
 * @return {void}
 */
UITreeBase.prototype.foldNodeAll = function(index) {};

/**
 * @param {string} index
 * @param {number} targetIndex
 * @return {void}
 */
UITreeBase.prototype.moveNode = function(index, targetIndex) {};

/**
 * @param {string} index
 * @return {?}
 */
UITreeBase.prototype.getNode = function(index) {};

/**
 * @param {string} index
 * @return {!Array<?>}
 */
UITreeBase.prototype.getNodeAll = function(index) {};

/**
 * @param {string} index
 * @return {?}
 */
UITreeBase.prototype.getNodeParent = function(index) {};

/**
 * @return {?}
 */
UITreeBase.prototype.getRoot = function() {};
/**
 * @record
 * @struct
 */
function UITree() {}

/* TODO: CallSignature:  */

/**
 * \@method update
 * Changes to the node at a specified index.
 * 
 * @param {string} index
 * @param {!Array<?>} data
 * @return {void}
 */
UITree.prototype.update = function(index, data) {};

/**
 * \@method append
 * Adds to a child node at a specified index.
 * 
 * @param {...?} args
 * @return {void}
 */
UITree.prototype.append = function(args) {};

/**
 * \@method insert
 * Adds a node at a specified index.
 * 
 * @param {string} index
 * @param {!Array<?>} data
 * @return {void}
 */
UITree.prototype.insert = function(index, data) {};

/**
 * \@method select
 * Adds a node at a specified index.
 * 
 * @param {string} index
 * @return {?}
 */
UITree.prototype.select = function(index) {};

/**
 * \@method unselect
 * Removes the 'active' class from a selected node and gets an instance of the specified node.
 * @return {void}
 */
UITree.prototype.unselect = function() {};

/**
 * \@method remove
 * Deletes a node at a specified index.
 * 
 * @param {string} index
 * @return {void}
 */
UITree.prototype.remove = function(index) {};

/**
 * \@method reset
 * Deletes all child nodes except for a root.
 * @return {void}
 */
UITree.prototype.reset = function() {};

/**
 * \@method move
 * Moves a node at a specified index to the target index.
 * 
 * @param {string} index
 * @param {string} targetIndex
 * @return {void}
 */
UITree.prototype.move = function(index, targetIndex) {};

/**
 * \@method open
 * Shows a child node at a specified index.
 * 
 * @param {string} index
 * @param {?} e
 * @return {void}
 */
UITree.prototype.open = function(index, e) {};

/**
 * \@method fold
 * Folds up a child node at a specified index.
 * 
 * @param {string} index
 * @param {?} e
 * @return {void}
 */
UITree.prototype.fold = function(index, e) {};

/**
 * \@method openAll
 * Shows all child nodes at a specified index.
 * 
 * @param {string} index
 * @return {void}
 */
UITree.prototype.openAll = function(index) {};

/**
 * \@method foldAll
 * Folds up all child nodes at a specified index.
 * 
 * @param {string} index
 * @return {void}
 */
UITree.prototype.foldAll = function(index) {};

/**
 * \@method list
 * Return all nodes of the root.
 * 
 * @return {!Array<?>}
 */
UITree.prototype.list = function() {};

/**
 * \@method listAll
 * Returns all child nodes.
 * 
 * @return {!Array<?>}
 */
UITree.prototype.listAll = function() {};

/**
 * \@method listParent
 * Returns all parent nodes at a specified index.
 * 
 * @param {string} index
 * @return {!Array<?>}
 */
UITree.prototype.listParents = function(index) {};

/**
 * \@method get
 * Gets a node at a specified index
 * 
 * @param {string} index
 * @return {?}
 */
UITree.prototype.get = function(index) {};

/**
 * \@method getAll
 * Gets all nodes at a specified index including child nodes.
 * 
 * @param {string} index
 * @return {!Array<?>}
 */
UITree.prototype.getAll = function(index) {};

/**
 * \@method activeIndex
 * Gets the index of a node that is activated in an active state.
 * 
 * @return {number}
 */
UITree.prototype.activeIndex = function() {};
/**
 * @record
 * @struct
 */
function UIWindow() {}

/* TODO: CallSignature:  */

/**
 * \@method hide
 * Hides a window
 * @return {void}
 */
UIWindow.prototype.hide = function() {};

/**
 * \@method show
 * Shows a window at specified coordinates
 * 
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
UIWindow.prototype.show = function(x, y) {};

/**
 * \@method move
 * Moves a window at specified coordinates
 * 
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
UIWindow.prototype.move = function(x, y) {};

/**
 * \@method update
 * Changes the markup in the body area of a window
 * 
 * @param {string} html
 * @return {void}
 */
UIWindow.prototype.update = function(html) {};

/**
 * \@method setTitle
 * Changes the markup of the title tag in the head area of a window
 * 
 * @param {string} html
 * @return {void}
 */
UIWindow.prototype.setTitle = function(html) {};

/**
 * \@method setSize
 * Changes the horizontal/vertical size of a window
 * 
 * @param {number} w
 * @param {number} h
 * @return {void}
 */
UIWindow.prototype.setSize = function(w, h) {};

/**
 * \@method resize
 * Designates a scroll area if there is a lot of content in the window body area
 * @return {void}
 */
UIWindow.prototype.resize = function() {};

/**
 * \@method resizeModal
 * Re-adjust the location of a modal window
 * @return {void}
 */
UIWindow.prototype.resizeModal = function() {};
