/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/rx-lite-aggregates/index.d.ts:

/**
 * @return {?}
 */
Rx.Observable.prototype.finalValue = function() {};

/**
 * @template TAcc
 * @param {function(T, T): T|TAcc} accumulator_or_seed
 * @param {function(TAcc, T): TAcc=} accumulator
 * @return {?|?<TAcc>}
 */
Rx.Observable.prototype.aggregate = function(accumulator_or_seed, accumulator) {};

/**
 * @template TAcc
 * @param {function(T, T): T|function(TAcc, T): TAcc} accumulator
 * @param {TAcc=} seed
 * @return {?|?<TAcc>}
 */
Rx.Observable.prototype.reduce = function(accumulator, seed) {};

/**
 * @param {function(T, number, ?): boolean=} predicate
 * @param {?=} thisArg
 * @return {?<boolean>}
 */
Rx.Observable.prototype.any = function(predicate, thisArg) {};

/**
 * @param {function(T, number, ?): boolean=} predicate
 * @param {?=} thisArg
 * @return {?<boolean>}
 */
Rx.Observable.prototype.some = function(predicate, thisArg) {};

/**
 * @return {?<boolean>}
 */
Rx.Observable.prototype.isEmpty = function() {};

/**
 * @param {function(T): boolean=} predicate
 * @param {?=} thisArg
 * @return {?<boolean>}
 */
Rx.Observable.prototype.all = function(predicate, thisArg) {};

/**
 * @param {function(T): boolean=} predicate
 * @param {?=} thisArg
 * @return {?<boolean>}
 */
Rx.Observable.prototype.every = function(predicate, thisArg) {};

/**
 * @template TOther
 * @param {T|TOther} value
 * @param {function(T, TOther): boolean=} comparer
 * @return {?<boolean>}
 */
Rx.Observable.prototype.contains = function(value, comparer) {};

/**
 * @param {function(T, number, ?): boolean=} predicate
 * @param {?=} thisArg
 * @return {?<number>}
 */
Rx.Observable.prototype.count = function(predicate, thisArg) {};

/**
 * @param {function(T, number, ?): number=} keySelector
 * @param {?=} thisArg
 * @return {?<number>}
 */
Rx.Observable.prototype.sum = function(keySelector, thisArg) {};

/**
 * @template TKey
 * @param {function(T): TKey|function(T): number} keySelector
 * @param {function(TKey, TKey): number=} comparer
 * @return {?}
 */
Rx.Observable.prototype.minBy = function(keySelector, comparer) {};

/**
 * @param {function(T, T): number=} comparer
 * @return {?}
 */
Rx.Observable.prototype.min = function(comparer) {};

/**
 * @template TKey
 * @param {function(T): TKey|function(T): number} keySelector
 * @param {function(TKey, TKey): number=} comparer
 * @return {?}
 */
Rx.Observable.prototype.maxBy = function(keySelector, comparer) {};

/**
 * @param {function(T, T): number=} comparer
 * @return {?<number>}
 */
Rx.Observable.prototype.max = function(comparer) {};

/**
 * @param {function(T, number, ?): number=} keySelector
 * @param {?=} thisArg
 * @return {?<number>}
 */
Rx.Observable.prototype.average = function(keySelector, thisArg) {};

/**
 * @template TOther
 * @param {?<TOther>|!Rx.IPromise<TOther>|?|!Rx.IPromise<T>|!Array<TOther>|!Array<T>} second
 * @param {function(T, TOther): number=} comparer
 * @return {?<boolean>}
 */
Rx.Observable.prototype.sequenceEqual = function(second, comparer) {};

/**
 * @param {number} index
 * @return {?}
 */
Rx.Observable.prototype.elementAt = function(index) {};

/**
 * @param {function(T, number, ?): boolean=} predicate
 * @param {?=} thisArg
 * @return {?}
 */
Rx.Observable.prototype.single = function(predicate, thisArg) {};

/**
 * @param {function(T, number, ?): boolean=} predicate
 * @param {?=} thisArg
 * @return {?}
 */
Rx.Observable.prototype.first = function(predicate, thisArg) {};

/**
 * @param {function(T, number, ?): boolean=} predicate
 * @param {?=} thisArg
 * @return {?}
 */
Rx.Observable.prototype.last = function(predicate, thisArg) {};

/**
 * @param {function(T, number, ?): boolean} predicate
 * @param {?=} thisArg
 * @return {?}
 */
Rx.Observable.prototype.find = function(predicate, thisArg) {};

/**
 * @param {function(T, number, ?): boolean} predicate
 * @param {?=} thisArg
 * @return {?<number>}
 */
Rx.Observable.prototype.findIndex = function(predicate, thisArg) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "rx-lite-aggregates"
/** @const */
tsickle_declare_module.rx_lite_aggregates = {};

/* TODO: ExportAssignment in tsickle_declare_module.rx_lite_aggregates */
