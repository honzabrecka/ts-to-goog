/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/graphene-pk11/index.d.ts:

/* TODO: ImportDeclaration in  */

/** @typedef {?} */
var Handle;

/** @typedef {(string|?)} */
var CryptoData;

/**
 * @constructor
 * @struct
 * @param {number} code
 * @param {string} func
 */
function Pkcs11Error(code, func) {}
 /** @type {number} */
Pkcs11Error.prototype.code;
 /** @type {string} */
Pkcs11Error.prototype.func;

/**
 * @constructor
 * @struct
 * @param {!Pkcs11Js.PKCS11=} lib
 */
function BaseObject(lib) {}
 /** @type {!Pkcs11Js.PKCS11} */
BaseObject.prototype.lib;

/**
 * @constructor
 * @struct
 * @param {?} handle
 * @param {!Pkcs11Js.PKCS11} lib
 */
function HandleObject(handle, lib) {}
 /** @type {?} */
HandleObject.prototype.handle;

/**
 * @return {void}
 */
HandleObject.prototype.getInfo = function() {};

/**
 * @constructor
 * @struct
 * @param {!Array<?>} items
 * @param {!Pkcs11Js.PKCS11} lib
 * @param {?} classType
 */
function Collection(items, lib, classType) {}
 /** @type {!Array<?>} */
Collection.prototype.items_;
 /** @type {?} */
Collection.prototype.classType;
 /** @type {number} */
Collection.prototype.length;

/**
 * returns item from collection by index
 * @param {number} index
 * @return {T}
 */
Collection.prototype.items = function(index) {};

/**
 * @param {?} v
 * @return {boolean}
 */
function isString(v) {}

/**
 * @param {?} v
 * @return {boolean}
 */
function isNumber(v) {}

/**
 * @param {?} v
 * @return {boolean}
 */
function isBoolean(v) {}

/**
 * @param {?} v
 * @return {boolean}
 */
function isUndefined(v) {}

/**
 * @param {?} v
 * @return {boolean}
 */
function isNull(v) {}

/**
 * @param {?} v
 * @return {boolean}
 */
function isEmpty(v) {}

/**
 * @param {?} v
 * @return {boolean}
 */
function isFunction(v) {}

/**
 * @param {?} v
 * @return {boolean}
 */
function isObject(v) {}

/**
 * @param {?} v
 * @return {boolean}
 */
function isArray(v) {}

/**
 * @param {?} v
 * @param {number} fv
 * @return {boolean}
 */
function isFlag(v, fv) {}

/**
 * @param {string} text
 * @return {!Date}
 */
function dateFromString(text) {}

/**
 * @constructor
 * @struct
 * @param {!Session} session
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} alg
 * @param {!Key} key
 * @param {!Pkcs11Js.PKCS11} lib
 */
function Cipher(session, alg, key, lib) {}
 /** @type {!Session} */
Cipher.prototype.session;

/**
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} alg
 * @param {!Key} key
 * @return {void}
 */
Cipher.prototype.init = function(alg, key) {};

/**
 * @param {(string|?)} data
 * @return {?}
 */
Cipher.prototype.update = function(data) {};

/**
 * @return {?}
 */
Cipher.prototype.final = function() {};

/**
 * @param {(string|?)} data
 * @param {?} enc
 * @param {function(!Error, ?): void=} cb
 * @return {?|void}
 */
Cipher.prototype.once = function(data, enc, cb) {};

/**
 * @constructor
 * @struct
 * @param {!Session} session
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} alg
 * @param {!Key} key
 * @param {number} blockSize
 * @param {!Pkcs11Js.PKCS11} lib
 */
function Decipher(session, alg, key, blockSize, lib) {}
 /** @type {!Session} */
Decipher.prototype.session;
 /** @type {number} */
Decipher.prototype.blockSize;

/**
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} alg
 * @param {!Key} key
 * @return {void}
 */
Decipher.prototype.init = function(alg, key) {};

/**
 * @param {?} data
 * @return {?}
 */
Decipher.prototype.update = function(data) {};

/**
 * @return {?}
 */
Decipher.prototype.final = function() {};

/**
 * @param {?} data
 * @param {?} dec
 * @param {function(!Error, ?): void=} cb
 * @return {?|void}
 */
Decipher.prototype.once = function(data, dec, cb) {};

/**
 * @constructor
 * @struct
 * @param {!Session} session
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} alg
 * @param {!Pkcs11Js.PKCS11} lib
 */
function Digest(session, alg, lib) {}
 /** @type {!Session} */
Digest.prototype.session;

/**
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} alg
 * @return {void}
 */
Digest.prototype.init = function(alg) {};

/**
 * @param {(string|?)} data
 * @return {void}
 */
Digest.prototype.update = function(data) {};

/**
 * @return {?}
 */
Digest.prototype.final = function() {};

/**
 * @param {(string|?)} data
 * @param {function(!Error, ?): void=} cb
 * @return {?|void}
 */
Digest.prototype.once = function(data, cb) {};

/**
 * @constructor
 * @struct
 * @param {!Session} session
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} alg
 * @param {!Key} key
 * @param {!Pkcs11Js.PKCS11} lib
 */
function Sign(session, alg, key, lib) {}
 /** @type {!Session} */
Sign.prototype.session;

/**
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} alg
 * @param {!Key} key
 * @return {void}
 */
Sign.prototype.init = function(alg, key) {};

/**
 * @param {(string|?)} data
 * @return {void}
 */
Sign.prototype.update = function(data) {};

/**
 * @return {?}
 */
Sign.prototype.final = function() {};

/**
 * @param {(string|?)} data
 * @param {function(!Error, ?): void=} cb
 * @return {?|void}
 */
Sign.prototype.once = function(data, cb) {};

/**
 * @constructor
 * @struct
 * @param {!Session} session
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} alg
 * @param {!Key} key
 * @param {!Pkcs11Js.PKCS11} lib
 */
function Verify(session, alg, key, lib) {}
 /** @type {!Session} */
Verify.prototype.session;

/**
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} alg
 * @param {!Key} key
 * @return {void}
 */
Verify.prototype.init = function(alg, key) {};

/**
 * @param {(string|?)} data
 * @return {void}
 */
Verify.prototype.update = function(data) {};

/**
 * @param {?} signature
 * @return {boolean}
 */
Verify.prototype.final = function(signature) {};

/**
 * @param {(string|?)} data
 * @param {?} signature
 * @param {function(!Error, boolean): void=} cb
 * @return {boolean|void}
 */
Verify.prototype.once = function(data, signature, cb) {};
/**
 * @record
 * @struct
 */
function IParams() {}

/**
 * @return {?}
 */
IParams.prototype.toCKI = function() {};

/** @const */
var MechParams = {};
/** @const {number} */
MechParams.AesCBC;
/** @const {number} */
MechParams.AesCCM;
/** @const {number} */
MechParams.AesGCM;
/** @const {number} */
MechParams.RsaOAEP;
/** @const {number} */
MechParams.RsaPSS;
/** @const {number} */
MechParams.EcDH;

/**
 * @constructor
 * @struct
 * @param {?} iv
 * @param {?=} data
 */
function AesCbcParams(iv, data) {}
 /** @type {?} */
AesCbcParams.prototype.iv;
 /** @type {?} */
AesCbcParams.prototype.data;
 /** @type {MechParams} */
AesCbcParams.prototype.type;

/**
 * @return {?}
 */
AesCbcParams.prototype.toCKI = function() {};

/**
 * @constructor
 * @struct
 * @param {number} dataLength
 * @param {?} nonce
 * @param {?=} aad
 * @param {number=} macLength
 */
function AesCcmParams(dataLength, nonce, aad, macLength) {}
 /** @type {number} */
AesCcmParams.prototype.dataLength;
 /** @type {?} */
AesCcmParams.prototype.nonce;
 /** @type {?} */
AesCcmParams.prototype.aad;
 /** @type {number} */
AesCcmParams.prototype.macLength;
 /** @type {MechParams} */
AesCcmParams.prototype.type;

/**
 * @return {!Pkcs11Js.AesCCM}
 */
AesCcmParams.prototype.toCKI = function() {};

/**
 * @constructor
 * @struct
 * @param {?} iv
 * @param {?=} aad
 * @param {number=} tagBits
 */
function AesGcmParams(iv, aad, tagBits) {}
 /** @type {?} */
AesGcmParams.prototype.iv;
 /** @type {?} */
AesGcmParams.prototype.aad;
 /** @type {number} */
AesGcmParams.prototype.tagBits;
 /** @type {MechParams} */
AesGcmParams.prototype.type;

/**
 * @return {!Pkcs11Js.AesGCM}
 */
AesGcmParams.prototype.toCKI = function() {};
/**
 * @record
 * @struct
 */
function INamedCurve() {}
 /** @type {string} */
INamedCurve.prototype.name;
 /** @type {string} */
INamedCurve.prototype.oid;
 /** @type {?} */
INamedCurve.prototype.value;
 /** @type {number} */
INamedCurve.prototype.size;
/**
 * @constructor
 * @struct
 */
function NamedCurve() {}

/**
 * @param {string} name
 * @return {?}
 */
NamedCurve.getByName = function(name) {};

/**
 * @param {string} oid
 * @return {?}
 */
NamedCurve.getByOid = function(oid) {};

/** @const */
var EcKdf = {};
/** @const {number} */
EcKdf.NULL;
/** @const {number} */
EcKdf.SHA1;
/** @const {number} */
EcKdf.SHA224;
/** @const {number} */
EcKdf.SHA256;
/** @const {number} */
EcKdf.SHA384;
/** @const {number} */
EcKdf.SHA512;

/**
 * @constructor
 * @struct
 * Creates an instance of EcdhParams.
 * 
 * @param {EcKdf} kdf
 * @param {?=} sharedData
 * @param {?=} publicData
 */
function EcdhParams(kdf, sharedData, publicData) {}
 /** @type {EcKdf} */
EcdhParams.prototype.kdf;
 /** @type {?} */
EcdhParams.prototype.sharedData;
 /** @type {?} */
EcdhParams.prototype.publicData;
 /** @type {MechParams} */
EcdhParams.prototype.type;

/**
 * @return {!Pkcs11Js.ECDH1}
 */
EcdhParams.prototype.toCKI = function() {};

/** @const */
var RsaMgf = {};
/** @const {number} */
RsaMgf.MGF1_SHA1;
/** @const {number} */
RsaMgf.MGF1_SHA224;
/** @const {number} */
RsaMgf.MGF1_SHA256;
/** @const {number} */
RsaMgf.MGF1_SHA384;
/** @const {number} */
RsaMgf.MGF1_SHA512;

/**
 * @constructor
 * @struct
 * @param {MechanismEnum=} hashAlg
 * @param {RsaMgf=} mgf
 * @param {?=} sourceData
 */
function RsaOaepParams(hashAlg, mgf, sourceData) {}
 /** @type {MechanismEnum} */
RsaOaepParams.prototype.hashAlgorithm;
 /** @type {RsaMgf} */
RsaOaepParams.prototype.mgf;
 /** @type {number} */
RsaOaepParams.prototype.source;
 /** @type {?} */
RsaOaepParams.prototype.sourceData;
 /** @type {MechParams} */
RsaOaepParams.prototype.type;

/**
 * @return {!Pkcs11Js.RsaOAEP}
 */
RsaOaepParams.prototype.toCKI = function() {};

/**
 * @constructor
 * @struct
 * @param {MechanismEnum=} hashAlg
 * @param {RsaMgf=} mgf
 * @param {number=} saltLen
 */
function RsaPssParams(hashAlg, mgf, saltLen) {}
 /** @type {MechanismEnum} */
RsaPssParams.prototype.hashAlgorithm;
 /** @type {RsaMgf} */
RsaPssParams.prototype.mgf;
 /** @type {number} */
RsaPssParams.prototype.saltLength;
 /** @type {MechParams} */
RsaPssParams.prototype.type;

/**
 * @return {!Pkcs11Js.RsaPSS}
 */
RsaPssParams.prototype.toCKI = function() {};

/** @const */
var ObjectClass = {};
/** @const {number} */
ObjectClass.DATA;
/** @const {number} */
ObjectClass.CERTIFICATE;
/** @const {number} */
ObjectClass.PUBLIC_KEY;
/** @const {number} */
ObjectClass.PRIVATE_KEY;
/** @const {number} */
ObjectClass.SECRET_KEY;
/** @const {number} */
ObjectClass.HW_FEATURE;
/** @const {number} */
ObjectClass.DOMAIN_PARAMETERS;
/** @const {number} */
ObjectClass.MECHANISM;
/** @const {number} */
ObjectClass.OTP_KEY;

/**
 * @constructor
 * @struct
 * Creates an instance of SessionObject.
 * 
 * Creates an instance of SessionObject.
 * 
 * @param {!SessionObject|?} object_or_handle
 * @param {!Session=} session
 * @param {!Pkcs11Js.PKCS11=} lib
 */
function SessionObject(object_or_handle, session, lib) {}
 /** @type {!Session} */
SessionObject.prototype.session;
 /** @type {number} */
SessionObject.prototype.size;
 /** @type {ObjectClass} */
SessionObject.prototype.class;

/**
 * copies an object, creating a new object for the copy
 * 
 * @param {?} template
 * @return {!SessionObject}
 */
SessionObject.prototype.copy = function(template) {};

/**
 * destroys an object
 * @return {void}
 */
SessionObject.prototype.destroy = function() {};

/**
 * @param {string|?} attr_or_attrs
 * @return {?}
 */
SessionObject.prototype.getAttribute = function(attr_or_attrs) {};

/**
 * @param {string|?} attrs
 * @param {?=} value
 * @return {void}
 */
SessionObject.prototype.setAttribute = function(attrs, value) {};

/**
 * @param {string} name
 * @return {?}
 */
SessionObject.prototype.get = function(name) {};

/**
 * @param {string} name
 * @param {?} value
 * @return {void}
 */
SessionObject.prototype.set = function(name, value) {};

/**
 * @template T
 * @return {T}
 */
SessionObject.prototype.toType = function() {};

/**
 * @constructor
 * @struct
 * @param {!Array<?>} items
 * @param {!Session} session
 * @param {!Pkcs11Js.PKCS11} lib
 * @param {?=} classType
 */
function SessionObjectCollection(items, session, lib, classType) {}
 /** @type {!Session} */
SessionObjectCollection.prototype.session;

/**
 * @param {number} index
 * @return {!SessionObject}
 */
SessionObjectCollection.prototype.items = function(index) {};
/**
 * @extends {SessionObject}
 * @constructor
 * @struct
 */
function Storage() {}
 /** @type {boolean} */
Storage.prototype.token;
 /** @type {boolean} */
Storage.prototype.private;
 /** @type {boolean} */
Storage.prototype.modifiable;
 /** @type {string} */
Storage.prototype.label;
/**
 * @extends {Storage}
 * @constructor
 * @struct
 */
function Data() {}
 /** @type {string} */
Data.prototype.application;
 /** @type {?} */
Data.prototype.objectId;
 /** @type {?} */
Data.prototype.value;
/**
 * @extends {Storage}
 * @constructor
 * @struct
 */
function DomainParameters() {}
 /** @type {KeyType} */
DomainParameters.prototype.keyType;
 /** @type {boolean} */
DomainParameters.prototype.local;

/** @const */
var KeyType = {};
/** @const {number} */
KeyType.RSA;
/** @const {number} */
KeyType.DSA;
/** @const {number} */
KeyType.DH;
/** @const {number} */
KeyType.ECDSA;
/** @const {number} */
KeyType.EC;
/** @const {number} */
KeyType.X9_42_DH;
/** @const {number} */
KeyType.KEA;
/** @const {number} */
KeyType.GENERIC_SECRET;
/** @const {number} */
KeyType.RC2;
/** @const {number} */
KeyType.RC4;
/** @const {number} */
KeyType.DES;
/** @const {number} */
KeyType.DES2;
/** @const {number} */
KeyType.DES3;
/** @const {number} */
KeyType.CAST;
/** @const {number} */
KeyType.CAST3;
/** @const {number} */
KeyType.CAST5;
/** @const {number} */
KeyType.CAST128;
/** @const {number} */
KeyType.RC5;
/** @const {number} */
KeyType.IDEA;
/** @const {number} */
KeyType.SKIPJACK;
/** @const {number} */
KeyType.BATON;
/** @const {number} */
KeyType.JUNIPER;
/** @const {number} */
KeyType.CDMF;
/** @const {number} */
KeyType.AES;
/** @const {number} */
KeyType.GOSTR3410;
/** @const {number} */
KeyType.GOSTR3411;
/** @const {number} */
KeyType.GOST28147;
/** @const {number} */
KeyType.BLOWFISH;
/** @const {number} */
KeyType.TWOFISH;
/** @const {number} */
KeyType.SECURID;
/** @const {number} */
KeyType.HOTP;
/** @const {number} */
KeyType.ACTI;
/** @const {number} */
KeyType.CAMELLIA;
/** @const {number} */
KeyType.ARIA;

/** @const */
var KeyGenMechanism = {};
/** @const {number} */
KeyGenMechanism.AES;
/** @const {number} */
KeyGenMechanism.RSA;
/** @const {number} */
KeyGenMechanism.RSA_X9_31;
/** @const {number} */
KeyGenMechanism.DSA;
/** @const {number} */
KeyGenMechanism.DH_PKCS;
/** @const {number} */
KeyGenMechanism.DH_X9_42;
/** @const {number} */
KeyGenMechanism.GOSTR3410;
/** @const {number} */
KeyGenMechanism.GOST28147;
/** @const {number} */
KeyGenMechanism.RC2;
/** @const {number} */
KeyGenMechanism.RC4;
/** @const {number} */
KeyGenMechanism.DES;
/** @const {number} */
KeyGenMechanism.DES2;
/** @const {number} */
KeyGenMechanism.SECURID;
/** @const {number} */
KeyGenMechanism.ACTI;
/** @const {number} */
KeyGenMechanism.CAST;
/** @const {number} */
KeyGenMechanism.CAST3;
/** @const {number} */
KeyGenMechanism.CAST5;
/** @const {number} */
KeyGenMechanism.CAST128;
/** @const {number} */
KeyGenMechanism.RC5;
/** @const {number} */
KeyGenMechanism.IDEA;
/** @const {number} */
KeyGenMechanism.GENERIC_SECRET;
/** @const {number} */
KeyGenMechanism.SSL3_PRE_MASTER;
/** @const {number} */
KeyGenMechanism.CAMELLIA;
/** @const {number} */
KeyGenMechanism.ARIA;
/** @const {number} */
KeyGenMechanism.SKIPJACK;
/** @const {number} */
KeyGenMechanism.KEA;
/** @const {number} */
KeyGenMechanism.BATON;
/** @const {number} */
KeyGenMechanism.ECDSA;
/** @const {number} */
KeyGenMechanism.EC;
/** @const {number} */
KeyGenMechanism.JUNIPER;
/** @const {number} */
KeyGenMechanism.TWOFISH;
/**
 * @extends {Storage}
 * @constructor
 * @struct
 */
function Key() {}
 /** @type {KeyType} */
Key.prototype.type;
 /** @type {?} */
Key.prototype.id;
 /** @type {!Date} */
Key.prototype.startDate;
 /** @type {!Date} */
Key.prototype.endDate;
 /** @type {boolean} */
Key.prototype.derive;
 /** @type {boolean} */
Key.prototype.local;
 /** @type {KeyGenMechanism} */
Key.prototype.mechanism;
 /** @type {void} */
Key.prototype.allowedMechanisms;
/**
 * @extends {Key}
 * @constructor
 * @struct
 */
function PrivateKey() {}
 /** @type {?} */
PrivateKey.prototype.subject;
 /** @type {boolean} */
PrivateKey.prototype.sensitive;
 /** @type {boolean} */
PrivateKey.prototype.decrypt;
 /** @type {boolean} */
PrivateKey.prototype.sign;
 /** @type {boolean} */
PrivateKey.prototype.signRecover;
 /** @type {boolean} */
PrivateKey.prototype.unwrap;
 /** @type {boolean} */
PrivateKey.prototype.extractable;
 /** @type {boolean} */
PrivateKey.prototype.alwaysSensitive;
 /** @type {boolean} */
PrivateKey.prototype.neverExtractable;
 /** @type {boolean} */
PrivateKey.prototype.wrapTrusted;
 /** @type {void} */
PrivateKey.prototype.template;
 /** @type {boolean} */
PrivateKey.prototype.alwaysAuthenticate;
/**
 * @extends {Key}
 * @constructor
 * @struct
 */
function PublicKey() {}
 /** @type {?} */
PublicKey.prototype.subject;
 /** @type {boolean} */
PublicKey.prototype.encrypt;
 /** @type {boolean} */
PublicKey.prototype.verify;
 /** @type {boolean} */
PublicKey.prototype.verifyRecover;
 /** @type {boolean} */
PublicKey.prototype.wrap;
 /** @type {boolean} */
PublicKey.prototype.trusted;
 /** @type {void} */
PublicKey.prototype.template;
/**
 * @extends {Key}
 * @constructor
 * @struct
 */
function SecretKey() {}
 /** @type {boolean} */
SecretKey.prototype.sensitive;
 /** @type {boolean} */
SecretKey.prototype.encrypt;
 /** @type {boolean} */
SecretKey.prototype.decrypt;
 /** @type {boolean} */
SecretKey.prototype.verify;
 /** @type {boolean} */
SecretKey.prototype.sign;
 /** @type {boolean} */
SecretKey.prototype.wrap;
 /** @type {boolean} */
SecretKey.prototype.unwrap;
 /** @type {boolean} */
SecretKey.prototype.extractable;
 /** @type {boolean} */
SecretKey.prototype.alwaysSensitive;
 /** @type {boolean} */
SecretKey.prototype.neverExtractable;
 /** @type {?} */
SecretKey.prototype.checkValue;
 /** @type {boolean} */
SecretKey.prototype.wrapTrusted;
 /** @type {boolean} */
SecretKey.prototype.trusted;
 /** @type {void} */
SecretKey.prototype.wrapTemplate;
 /** @type {void} */
SecretKey.prototype.unwrapTemplate;

/** @const */
var CertificateType = {};
/** @const {number} */
CertificateType.X_509;
/** @const {number} */
CertificateType.X_509_ATTR_CERT;
/** @const {number} */
CertificateType.WTLS;

/** @const */
var CertificateCategory = {};
/** @const {number} */
CertificateCategory.Unspecified;
/** @const {number} */
CertificateCategory.TokenUser;
/** @const {number} */
CertificateCategory.Authority;
/** @const {number} */
CertificateCategory.OtherEntity;
/**
 * @extends {Storage}
 * @constructor
 * @struct
 */
function Certificate() {}
 /** @type {CertificateType} */
Certificate.prototype.type;
 /** @type {boolean} */
Certificate.prototype.trusted;
 /** @type {CertificateCategory} */
Certificate.prototype.category;
 /** @type {?} */
Certificate.prototype.checkValue;
 /** @type {!Date} */
Certificate.prototype.startDate;
 /** @type {!Date} */
Certificate.prototype.endDate;
/**
 * @extends {Certificate}
 * @constructor
 * @struct
 */
function AttributeCertificate() {}
 /** @type {?} */
AttributeCertificate.prototype.owner;
 /** @type {?} */
AttributeCertificate.prototype.issuer;
 /** @type {?} */
AttributeCertificate.prototype.serialNumber;
 /** @type {?} */
AttributeCertificate.prototype.types;
 /** @type {?} */
AttributeCertificate.prototype.value;
/**
 * @extends {Certificate}
 * @constructor
 * @struct
 */
function WtlsCertificate() {}
 /** @type {?} */
WtlsCertificate.prototype.subject;
 /** @type {?} */
WtlsCertificate.prototype.issuer;
 /** @type {?} */
WtlsCertificate.prototype.id;
 /** @type {?} */
WtlsCertificate.prototype.value;
 /** @type {string} */
WtlsCertificate.prototype.url;
 /** @type {?} */
WtlsCertificate.prototype.serialNumber;
 /** @type {?} */
WtlsCertificate.prototype.subjetcKeyIdentifier;
 /** @type {?} */
WtlsCertificate.prototype.authorityKeyIdentifier;

/** @const */
var JavaMIDP = {};
/** @const {number} */
JavaMIDP.Unspecified;
/** @const {number} */
JavaMIDP.Manufacturer;
/** @const {number} */
JavaMIDP.Operator;
/** @const {number} */
JavaMIDP.ThirdParty;
/**
 * @extends {Certificate}
 * @constructor
 * @struct
 */
function X509Certificate() {}
 /** @type {?} */
X509Certificate.prototype.subject;
 /** @type {?} */
X509Certificate.prototype.id;
 /** @type {?} */
X509Certificate.prototype.issuer;
 /** @type {string} */
X509Certificate.prototype.serialNumber;
 /** @type {?} */
X509Certificate.prototype.value;
 /** @type {string} */
X509Certificate.prototype.url;
 /** @type {?} */
X509Certificate.prototype.subjetcKeyIdentifier;
 /** @type {?} */
X509Certificate.prototype.authorityKeyIdentifier;
 /** @type {JavaMIDP} */
X509Certificate.prototype.java;
/**
 * @record
 * @struct
 */
function IAlgorithm() {}
 /** @type {string} */
IAlgorithm.prototype.name;
 /** @type {?} */
IAlgorithm.prototype.params;

/** @typedef {(string|MechanismEnum|KeyGenMechanism|?)} */
var MechanismType;

/** @const */
var MechanismFlag = {};
/** @const {number} */
MechanismFlag.HW;
/** @const {number} */
MechanismFlag.ENCRYPT;
/** @const {number} */
MechanismFlag.DECRYPT;
/** @const {number} */
MechanismFlag.DIGEST;
/** @const {number} */
MechanismFlag.SIGN;
/** @const {number} */
MechanismFlag.SIGN_RECOVER;
/** @const {number} */
MechanismFlag.VERIFY;
/** @const {number} */
MechanismFlag.VERIFY_RECOVER;
/** @const {number} */
MechanismFlag.GENERATE;
/** @const {number} */
MechanismFlag.GENERATE_KEY_PAIR;
/** @const {number} */
MechanismFlag.WRAP;
/** @const {number} */
MechanismFlag.UNWRAP;
/** @const {number} */
MechanismFlag.DERIVE;

/**
 * @constructor
 * @struct
 * @param {number} handle
 * @param {?} slotHandle
 * @param {!Pkcs11Js.PKCS11} lib
 */
function Mechanism(handle, slotHandle, lib) {}
 /** @type {number} */
Mechanism.prototype.handle;
 /** @type {?} */
Mechanism.prototype.slotHandle;
 /** @type {number} */
Mechanism.prototype.minKeySize;
 /** @type {number} */
Mechanism.prototype.maxKeySize;
 /** @type {number} */
Mechanism.prototype.flags;
 /** @type {string} */
Mechanism.prototype.name;

/**
 * @return {void}
 */
Mechanism.prototype.getInfo = function() {};

/**
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} alg
 * @return {!Pkcs11Js.Mechanism}
 */
Mechanism.create = function(alg) {};

/**
 * @param {string} jsonFile_or_name
 * @param {number=} value
 * @return {void}
 */
Mechanism.vendor = function(jsonFile_or_name, value) {};

/**
 * @constructor
 * @struct
 * @param {!Array<number>} items
 * @param {?} slotHandle
 * @param {!Pkcs11Js.PKCS11} lib
 * @param {?=} classType
 */
function MechanismCollection(items, slotHandle, lib, classType) {}
 /** @type {?} */
MechanismCollection.prototype.slotHandle;

/**
 * returns item from collection by index
 * @param {number} index
 * @return {!Mechanism}
 */
MechanismCollection.prototype.items = function(index) {};

/** @const */
var MechanismEnum = {};
/** @const {number} */
MechanismEnum.RSA_PKCS_KEY_PAIR_GEN;
/** @const {number} */
MechanismEnum.RSA_PKCS;
/** @const {number} */
MechanismEnum.RSA_9796;
/** @const {number} */
MechanismEnum.RSA_X_509;
/** @const {number} */
MechanismEnum.MD2_RSA_PKCS;
/** @const {number} */
MechanismEnum.MD5_RSA_PKCS;
/** @const {number} */
MechanismEnum.SHA1_RSA_PKCS;
/** @const {number} */
MechanismEnum.RIPEMD128_RSA_PKCS;
/** @const {number} */
MechanismEnum.RIPEMD160_RSA_PKCS;
/** @const {number} */
MechanismEnum.RSA_PKCS_OAEP;
/** @const {number} */
MechanismEnum.RSA_X9_31_KEY_PAIR_GEN;
/** @const {number} */
MechanismEnum.RSA_X9_31;
/** @const {number} */
MechanismEnum.SHA1_RSA_X9_31;
/** @const {number} */
MechanismEnum.RSA_PKCS_PSS;
/** @const {number} */
MechanismEnum.SHA1_RSA_PKCS_PSS;
/** @const {number} */
MechanismEnum.DSA_KEY_PAIR_GEN;
/** @const {number} */
MechanismEnum.DSA;
/** @const {number} */
MechanismEnum.DSA_SHA1;
/** @const {number} */
MechanismEnum.DSA_SHA224;
/** @const {number} */
MechanismEnum.DSA_SHA256;
/** @const {number} */
MechanismEnum.DSA_SHA384;
/** @const {number} */
MechanismEnum.DSA_SHA512;
/** @const {number} */
MechanismEnum.DH_PKCS_KEY_PAIR_GEN;
/** @const {number} */
MechanismEnum.DH_PKCS_DERIVE;
/** @const {number} */
MechanismEnum.X9_42_DH_KEY_PAIR_GEN;
/** @const {number} */
MechanismEnum.X9_42_DH_DERIVE;
/** @const {number} */
MechanismEnum.X9_42_DH_HYBRID_DERIVE;
/** @const {number} */
MechanismEnum.X9_42_MQV_DERIVE;
/** @const {number} */
MechanismEnum.SHA256_RSA_PKCS;
/** @const {number} */
MechanismEnum.SHA384_RSA_PKCS;
/** @const {number} */
MechanismEnum.SHA512_RSA_PKCS;
/** @const {number} */
MechanismEnum.SHA256_RSA_PKCS_PSS;
/** @const {number} */
MechanismEnum.SHA384_RSA_PKCS_PSS;
/** @const {number} */
MechanismEnum.SHA512_RSA_PKCS_PSS;
/** @const {number} */
MechanismEnum.SHA224_RSA_PKCS;
/** @const {number} */
MechanismEnum.SHA224_RSA_PKCS_PSS;
/** @const {number} */
MechanismEnum.RC2_KEY_GEN;
/** @const {number} */
MechanismEnum.RC2_ECB;
/** @const {number} */
MechanismEnum.RC2_CBC;
/** @const {number} */
MechanismEnum.RC2_MAC;
/** @const {number} */
MechanismEnum.RC2_MAC_GENERAL;
/** @const {number} */
MechanismEnum.RC2_CBC_PAD;
/** @const {number} */
MechanismEnum.RC4_KEY_GEN;
/** @const {number} */
MechanismEnum.RC4;
/** @const {number} */
MechanismEnum.DES_KEY_GEN;
/** @const {number} */
MechanismEnum.DES_ECB;
/** @const {number} */
MechanismEnum.DES_CBC;
/** @const {number} */
MechanismEnum.DES_MAC;
/** @const {number} */
MechanismEnum.DES_MAC_GENERAL;
/** @const {number} */
MechanismEnum.DES_CBC_PAD;
/** @const {number} */
MechanismEnum.DES2_KEY_GEN;
/** @const {number} */
MechanismEnum.DES3_KEY_GEN;
/** @const {number} */
MechanismEnum.DES3_ECB;
/** @const {number} */
MechanismEnum.DES3_CBC;
/** @const {number} */
MechanismEnum.DES3_MAC;
/** @const {number} */
MechanismEnum.DES3_MAC_GENERAL;
/** @const {number} */
MechanismEnum.DES3_CBC_PAD;
/** @const {number} */
MechanismEnum.CDMF_KEY_GEN;
/** @const {number} */
MechanismEnum.CDMF_ECB;
/** @const {number} */
MechanismEnum.CDMF_CBC;
/** @const {number} */
MechanismEnum.CDMF_MAC;
/** @const {number} */
MechanismEnum.CDMF_MAC_GENERAL;
/** @const {number} */
MechanismEnum.CDMF_CBC_PAD;
/** @const {number} */
MechanismEnum.DES_OFB64;
/** @const {number} */
MechanismEnum.DES_OFB8;
/** @const {number} */
MechanismEnum.DES_CFB64;
/** @const {number} */
MechanismEnum.DES_CFB8;
/** @const {number} */
MechanismEnum.MD2;
/** @const {number} */
MechanismEnum.MD2_HMAC;
/** @const {number} */
MechanismEnum.MD2_HMAC_GENERAL;
/** @const {number} */
MechanismEnum.MD5;
/** @const {number} */
MechanismEnum.MD5_HMAC;
/** @const {number} */
MechanismEnum.MD5_HMAC_GENERAL;
/** @const {number} */
MechanismEnum.SHA1;
/** @const {number} */
MechanismEnum.SHA;
/** @const {number} */
MechanismEnum.SHA_1;
/** @const {number} */
MechanismEnum.SHA_1_HMAC;
/** @const {number} */
MechanismEnum.SHA_1_HMAC_GENERAL;
/** @const {number} */
MechanismEnum.RIPEMD128;
/** @const {number} */
MechanismEnum.RIPEMD128_HMAC;
/** @const {number} */
MechanismEnum.RIPEMD128_HMAC_GENERAL;
/** @const {number} */
MechanismEnum.RIPEMD160;
/** @const {number} */
MechanismEnum.RIPEMD160_HMAC;
/** @const {number} */
MechanismEnum.RIPEMD160_HMAC_GENERAL;
/** @const {number} */
MechanismEnum.SHA256;
/** @const {number} */
MechanismEnum.SHA256_HMAC;
/** @const {number} */
MechanismEnum.SHA256_HMAC_GENERAL;
/** @const {number} */
MechanismEnum.SHA224;
/** @const {number} */
MechanismEnum.SHA224_HMAC;
/** @const {number} */
MechanismEnum.SHA224_HMAC_GENERAL;
/** @const {number} */
MechanismEnum.SHA384;
/** @const {number} */
MechanismEnum.SHA384_HMAC;
/** @const {number} */
MechanismEnum.SHA384_HMAC_GENERAL;
/** @const {number} */
MechanismEnum.SHA512;
/** @const {number} */
MechanismEnum.SHA512_HMAC;
/** @const {number} */
MechanismEnum.SHA512_HMAC_GENERAL;
/** @const {number} */
MechanismEnum.SECURID_KEY_GEN;
/** @const {number} */
MechanismEnum.SECURID;
/** @const {number} */
MechanismEnum.HOTP_KEY_GEN;
/** @const {number} */
MechanismEnum.HOTP;
/** @const {number} */
MechanismEnum.ACTI;
/** @const {number} */
MechanismEnum.ACTI_KEY_GEN;
/** @const {number} */
MechanismEnum.CAST_KEY_GEN;
/** @const {number} */
MechanismEnum.CAST_ECB;
/** @const {number} */
MechanismEnum.CAST_CBC;
/** @const {number} */
MechanismEnum.CAST_MAC;
/** @const {number} */
MechanismEnum.CAST_MAC_GENERAL;
/** @const {number} */
MechanismEnum.CAST_CBC_PAD;
/** @const {number} */
MechanismEnum.CAST3_KEY_GEN;
/** @const {number} */
MechanismEnum.CAST3_ECB;
/** @const {number} */
MechanismEnum.CAST3_CBC;
/** @const {number} */
MechanismEnum.CAST3_MAC;
/** @const {number} */
MechanismEnum.CAST3_MAC_GENERAL;
/** @const {number} */
MechanismEnum.CAST3_CBC_PAD;
/** @const {number} */
MechanismEnum.CAST5_KEY_GEN;
/** @const {number} */
MechanismEnum.CAST128_KEY_GEN;
/** @const {number} */
MechanismEnum.CAST5_ECB;
/** @const {number} */
MechanismEnum.CAST128_ECB;
/** @const {number} */
MechanismEnum.CAST5_CBC;
/** @const {number} */
MechanismEnum.CAST128_CBC;
/** @const {number} */
MechanismEnum.CAST5_MAC;
/** @const {number} */
MechanismEnum.CAST128_MAC;
/** @const {number} */
MechanismEnum.CAST5_MAC_GENERAL;
/** @const {number} */
MechanismEnum.CAST128_MAC_GENERAL;
/** @const {number} */
MechanismEnum.CAST5_CBC_PAD;
/** @const {number} */
MechanismEnum.CAST128_CBC_PAD;
/** @const {number} */
MechanismEnum.RC5_KEY_GEN;
/** @const {number} */
MechanismEnum.RC5_ECB;
/** @const {number} */
MechanismEnum.RC5_CBC;
/** @const {number} */
MechanismEnum.RC5_MAC;
/** @const {number} */
MechanismEnum.RC5_MAC_GENERAL;
/** @const {number} */
MechanismEnum.RC5_CBC_PAD;
/** @const {number} */
MechanismEnum.IDEA_KEY_GEN;
/** @const {number} */
MechanismEnum.IDEA_ECB;
/** @const {number} */
MechanismEnum.IDEA_CBC;
/** @const {number} */
MechanismEnum.IDEA_MAC;
/** @const {number} */
MechanismEnum.IDEA_MAC_GENERAL;
/** @const {number} */
MechanismEnum.IDEA_CBC_PAD;
/** @const {number} */
MechanismEnum.GENERIC_SECRET_KEY_GEN;
/** @const {number} */
MechanismEnum.CONCATENATE_BASE_AND_KEY;
/** @const {number} */
MechanismEnum.CONCATENATE_BASE_AND_DATA;
/** @const {number} */
MechanismEnum.CONCATENATE_DATA_AND_BASE;
/** @const {number} */
MechanismEnum.XOR_BASE_AND_DATA;
/** @const {number} */
MechanismEnum.EXTRACT_KEY_FROM_KEY;
/** @const {number} */
MechanismEnum.SSL3_PRE_MASTER_KEY_GEN;
/** @const {number} */
MechanismEnum.SSL3_MASTER_KEY_DERIVE;
/** @const {number} */
MechanismEnum.SSL3_KEY_AND_MAC_DERIVE;
/** @const {number} */
MechanismEnum.SSL3_MASTER_KEY_DERIVE_DH;
/** @const {number} */
MechanismEnum.TLS_PRE_MASTER_KEY_GEN;
/** @const {number} */
MechanismEnum.TLS_MASTER_KEY_DERIVE;
/** @const {number} */
MechanismEnum.TLS_KEY_AND_MAC_DERIVE;
/** @const {number} */
MechanismEnum.TLS_MASTER_KEY_DERIVE_DH;
/** @const {number} */
MechanismEnum.TLS_PRF;
/** @const {number} */
MechanismEnum.SSL3_MD5_MAC;
/** @const {number} */
MechanismEnum.SSL3_SHA1_MAC;
/** @const {number} */
MechanismEnum.MD5_KEY_DERIVATION;
/** @const {number} */
MechanismEnum.MD2_KEY_DERIVATION;
/** @const {number} */
MechanismEnum.SHA1_KEY_DERIVATION;
/** @const {number} */
MechanismEnum.SHA256_KEY_DERIVATION;
/** @const {number} */
MechanismEnum.SHA384_KEY_DERIVATION;
/** @const {number} */
MechanismEnum.SHA512_KEY_DERIVATION;
/** @const {number} */
MechanismEnum.SHA224_KEY_DERIVATION;
/** @const {number} */
MechanismEnum.PBE_MD2_DES_CBC;
/** @const {number} */
MechanismEnum.PBE_MD5_DES_CBC;
/** @const {number} */
MechanismEnum.PBE_MD5_CAST_CBC;
/** @const {number} */
MechanismEnum.PBE_MD5_CAST3_CBC;
/** @const {number} */
MechanismEnum.PBE_MD5_CAST5_CBC;
/** @const {number} */
MechanismEnum.PBE_MD5_CAST128_CBC;
/** @const {number} */
MechanismEnum.PBE_SHA1_CAST5_CBC;
/** @const {number} */
MechanismEnum.PBE_SHA1_CAST128_CBC;
/** @const {number} */
MechanismEnum.PBE_SHA1_RC4_128;
/** @const {number} */
MechanismEnum.PBE_SHA1_RC4_40;
/** @const {number} */
MechanismEnum.PBE_SHA1_DES3_EDE_CBC;
/** @const {number} */
MechanismEnum.PBE_SHA1_DES2_EDE_CBC;
/** @const {number} */
MechanismEnum.PBE_SHA1_RC2_128_CBC;
/** @const {number} */
MechanismEnum.PBE_SHA1_RC2_40_CBC;
/** @const {number} */
MechanismEnum.PKCS5_PBKD2;
/** @const {number} */
MechanismEnum.PBA_SHA1_WITH_SHA1_HMAC;
/** @const {number} */
MechanismEnum.WTLS_PRE_MASTER_KEY_GEN;
/** @const {number} */
MechanismEnum.WTLS_MASTER_KEY_DERIVE;
/** @const {number} */
MechanismEnum.WTLS_MASTER_KEY_DERIVE_DH_ECC;
/** @const {number} */
MechanismEnum.WTLS_PRF;
/** @const {number} */
MechanismEnum.WTLS_SERVER_KEY_AND_MAC_DERIVE;
/** @const {number} */
MechanismEnum.WTLS_CLIENT_KEY_AND_MAC_DERIVE;
/** @const {number} */
MechanismEnum.KEY_WRAP_LYNKS;
/** @const {number} */
MechanismEnum.KEY_WRAP_SET_OAEP;
/** @const {number} */
MechanismEnum.CAMELLIA_KEY_GEN;
/** @const {number} */
MechanismEnum.CAMELLIA_ECB;
/** @const {number} */
MechanismEnum.CAMELLIA_CBC;
/** @const {number} */
MechanismEnum.CAMELLIA_MAC;
/** @const {number} */
MechanismEnum.CAMELLIA_MAC_GENERAL;
/** @const {number} */
MechanismEnum.CAMELLIA_CBC_PAD;
/** @const {number} */
MechanismEnum.CAMELLIA_ECB_ENCRYPT_DATA;
/** @const {number} */
MechanismEnum.CAMELLIA_CBC_ENCRYPT_DATA;
/** @const {number} */
MechanismEnum.CAMELLIA_CTR;
/** @const {number} */
MechanismEnum.ARIA_KEY_GEN;
/** @const {number} */
MechanismEnum.ARIA_ECB;
/** @const {number} */
MechanismEnum.ARIA_CBC;
/** @const {number} */
MechanismEnum.ARIA_MAC;
/** @const {number} */
MechanismEnum.ARIA_MAC_GENERAL;
/** @const {number} */
MechanismEnum.ARIA_CBC_PAD;
/** @const {number} */
MechanismEnum.ARIA_ECB_ENCRYPT_DATA;
/** @const {number} */
MechanismEnum.ARIA_CBC_ENCRYPT_DATA;
/** @const {number} */
MechanismEnum.SKIPJACK_KEY_GEN;
/** @const {number} */
MechanismEnum.SKIPJACK_ECB64;
/** @const {number} */
MechanismEnum.SKIPJACK_CBC64;
/** @const {number} */
MechanismEnum.SKIPJACK_OFB64;
/** @const {number} */
MechanismEnum.SKIPJACK_CFB64;
/** @const {number} */
MechanismEnum.SKIPJACK_CFB32;
/** @const {number} */
MechanismEnum.SKIPJACK_CFB16;
/** @const {number} */
MechanismEnum.SKIPJACK_CFB8;
/** @const {number} */
MechanismEnum.SKIPJACK_WRAP;
/** @const {number} */
MechanismEnum.SKIPJACK_PRIVATE_WRAP;
/** @const {number} */
MechanismEnum.SKIPJACK_RELAYX;
/** @const {number} */
MechanismEnum.KEA_KEY_PAIR_GEN;
/** @const {number} */
MechanismEnum.KEA_KEY_DERIVE;
/** @const {number} */
MechanismEnum.FORTEZZA_TIMESTAMP;
/** @const {number} */
MechanismEnum.BATON_KEY_GEN;
/** @const {number} */
MechanismEnum.BATON_ECB128;
/** @const {number} */
MechanismEnum.BATON_ECB96;
/** @const {number} */
MechanismEnum.BATON_CBC128;
/** @const {number} */
MechanismEnum.BATON_COUNTER;
/** @const {number} */
MechanismEnum.BATON_SHUFFLE;
/** @const {number} */
MechanismEnum.BATON_WRAP;
/** @const {number} */
MechanismEnum.ECDSA_KEY_PAIR_GEN;
/** @const {number} */
MechanismEnum.EC_KEY_PAIR_GEN;
/** @const {number} */
MechanismEnum.ECDSA;
/** @const {number} */
MechanismEnum.ECDSA_SHA1;
/** @const {number} */
MechanismEnum.ECDSA_SHA224;
/** @const {number} */
MechanismEnum.ECDSA_SHA256;
/** @const {number} */
MechanismEnum.ECDSA_SHA384;
/** @const {number} */
MechanismEnum.ECDSA_SHA512;
/** @const {number} */
MechanismEnum.ECDH1_DERIVE;
/** @const {number} */
MechanismEnum.ECDH1_COFACTOR_DERIVE;
/** @const {number} */
MechanismEnum.ECMQV_DERIVE;
/** @const {number} */
MechanismEnum.JUNIPER_KEY_GEN;
/** @const {number} */
MechanismEnum.JUNIPER_ECB128;
/** @const {number} */
MechanismEnum.JUNIPER_CBC128;
/** @const {number} */
MechanismEnum.JUNIPER_COUNTER;
/** @const {number} */
MechanismEnum.JUNIPER_SHUFFLE;
/** @const {number} */
MechanismEnum.JUNIPER_WRAP;
/** @const {number} */
MechanismEnum.FASTHASH;
/** @const {number} */
MechanismEnum.AES_KEY_GEN;
/** @const {number} */
MechanismEnum.AES_ECB;
/** @const {number} */
MechanismEnum.AES_CBC;
/** @const {number} */
MechanismEnum.AES_MAC;
/** @const {number} */
MechanismEnum.AES_MAC_GENERAL;
/** @const {number} */
MechanismEnum.AES_CBC_PAD;
/** @const {number} */
MechanismEnum.AES_CTR;
/** @const {number} */
MechanismEnum.AES_CMAC;
/** @const {number} */
MechanismEnum.AES_CMAC_GENERAL;
/** @const {number} */
MechanismEnum.BLOWFISH_KEY_GEN;
/** @const {number} */
MechanismEnum.BLOWFISH_CBC;
/** @const {number} */
MechanismEnum.TWOFISH_KEY_GEN;
/** @const {number} */
MechanismEnum.TWOFISH_CBC;
/** @const {number} */
MechanismEnum.AES_GCM;
/** @const {number} */
MechanismEnum.AES_CCM;
/** @const {number} */
MechanismEnum.AES_KEY_WRAP;
/** @const {number} */
MechanismEnum.AES_KEY_WRAP_PAD;
/** @const {number} */
MechanismEnum.DES_ECB_ENCRYPT_DATA;
/** @const {number} */
MechanismEnum.DES_CBC_ENCRYPT_DATA;
/** @const {number} */
MechanismEnum.DES3_ECB_ENCRYPT_DATA;
/** @const {number} */
MechanismEnum.DES3_CBC_ENCRYPT_DATA;
/** @const {number} */
MechanismEnum.AES_ECB_ENCRYPT_DATA;
/** @const {number} */
MechanismEnum.AES_CBC_ENCRYPT_DATA;
/** @const {number} */
MechanismEnum.GOSTR3410_KEY_PAIR_GEN;
/** @const {number} */
MechanismEnum.GOSTR3410;
/** @const {number} */
MechanismEnum.GOSTR3410_WITH_GOSTR3411;
/** @const {number} */
MechanismEnum.GOSTR3410_KEY_WRAP;
/** @const {number} */
MechanismEnum.GOSTR3410_DERIVE;
/** @const {number} */
MechanismEnum.GOSTR3411;
/** @const {number} */
MechanismEnum.GOSTR3411_HMAC;
/** @const {number} */
MechanismEnum.GOST28147_KEY_GEN;
/** @const {number} */
MechanismEnum.GOST28147_ECB;
/** @const {number} */
MechanismEnum.GOST28147;
/** @const {number} */
MechanismEnum.GOST28147_MAC;
/** @const {number} */
MechanismEnum.GOST28147_KEY_WRAP;
/** @const {number} */
MechanismEnum.DSA_PARAMETER_GEN;
/** @const {number} */
MechanismEnum.DH_PKCS_PARAMETER_GEN;
/** @const {number} */
MechanismEnum.X9_42_DH_PARAMETER_GEN;
/** @const {number} */
MechanismEnum.VENDOR_DEFINED;

/** @const */
var SessionFlag = {};
/** @const {number} */
SessionFlag.RW_SESSION;
/** @const {number} */
SessionFlag.SERIAL_SESSION;

/** @const */
var UserType = {};
/** @const {number} */
UserType.SO;
/** @const {number} */
UserType.USER;
/** @const {number} */
UserType.CONTEXT_SPECIFIC;
/**
 * @record
 * @struct
 */
function IKeyPair() {}
 /** @type {!PrivateKey} */
IKeyPair.prototype.privateKey;
 /** @type {!PublicKey} */
IKeyPair.prototype.publicKey;

/**
 * @constructor
 * @struct
 * @param {?} handle
 * @param {!Slot} slot
 * @param {!Pkcs11Js.PKCS11} lib
 */
function Session(handle, slot, lib) {}
 /** @type {!Slot} */
Session.prototype.slot;
 /** @type {number} */
Session.prototype.state;
 /** @type {number} */
Session.prototype.flags;
 /** @type {number} */
Session.prototype.deviceError;

/**
 * @return {void}
 */
Session.prototype.getInfo = function() {};

/**
 * closes a session between an application and a token
 * @return {void}
 */
Session.prototype.close = function() {};

/**
 * initializes the normal user's PIN
 * @param {string} pin
 * @return {void}
 */
Session.prototype.initPin = function(pin) {};

/**
 * modifies the PIN of the user who is logged in
 * @param {string} oldPin
 * @param {string} newPin
 * @return {void}
 */
Session.prototype.setPin = function(oldPin, newPin) {};

/**
 * obtains a copy of the cryptographic operations state of a session, encoded as a string of bytes
 * @return {?}
 */
Session.prototype.getOperationState = function() {};

/**
 * restores the cryptographic operations state of a session
 * from a string of bytes obtained with getOperationState
 * or decryption operation in the restored session
 * (or 0 if no encryption or decryption key is needed,
 * either because no such operation is ongoing in the stored session
 * or because all the necessary key information is present in the saved state)
 * MACing, or verification operation in the restored session
 * (or 0 if no such key is needed, either because no such operation is ongoing in the stored session
 * or because all the necessary key information is present in the saved state)
 * @param {?} state
 * @param {number=} encryptionKey
 * @param {number=} authenticationKey
 * @return {void}
 */
Session.prototype.setOperationState = function(state, encryptionKey, authenticationKey) {};

/**
 * logs a user into a token
 * - This standard allows PIN values to contain any valid `UTF8` character,
 * but the token may impose subset restrictions
 * @param {string} pin
 * @param {UserType=} userType
 * @return {void}
 */
Session.prototype.login = function(pin, userType) {};

/**
 * logs a user out from a token
 * @return {void}
 */
Session.prototype.logout = function() {};

/**
 * creates a new object
 * - Only session objects can be created during a read-only session.
 * - Only public objects can be created unless the normal user is logged in.
 * @param {?} template
 * @return {!SessionObject}
 */
Session.prototype.create = function(template) {};

/**
 * Copies an object, creating a new object for the copy
 * @param {!SessionObject} object
 * @param {?} template
 * @return {!SessionObject}
 */
Session.prototype.copy = function(object, template) {};

/**
 * removes all session objects matched to template
 * - if template is null, removes all session objects
 * - returns a number of destroied session objects
 * @param {?|!SessionObject=} template_or_object
 * @return {number}
 */
Session.prototype.destroy = function(template_or_object) {};

/**
 * removes all session objects
 * - returns a number of destroied session objects
 * @return {number}
 */
Session.prototype.clear = function() {};

/**
 * returns a collection of session objects mached to template
 * @param {function(!SessionObject): ?|?=} callback_or_template optional callback function wich is called for each founded object
 * - if callback function returns false, it breaks find function.
 * @param {function(!SessionObject, number): ?=} callback
 * @return {!SessionObjectCollection}
 */
Session.prototype.find = function(callback_or_template, callback) {};

/**
 * Returns object from session by handle
 * @template T
 * @param {?} handle
 * @return {T} T
 */
Session.prototype.getObject = function(handle) {};

/**
 * generates a secret key or set of domain parameters, creating a new object.
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} mechanism generation mechanism
 * @param {?=} template template for the new key or set of domain parameters
 * @param {function(!Error, !SecretKey): void=} callback
 * @return {!SecretKey|void}
 */
Session.prototype.generateKey = function(mechanism, template, callback) {};

/**
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} mechanism
 * @param {?} publicTemplate
 * @param {?} privateTemplate
 * @param {function(!Error, ?): void=} callback
 * @return {?|void}
 */
Session.prototype.generateKeyPair = function(mechanism, publicTemplate, privateTemplate, callback) {};

/**
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} alg
 * @param {!Key} key
 * @return {!Sign}
 */
Session.prototype.createSign = function(alg, key) {};

/**
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} alg
 * @param {!Key} key
 * @return {!Verify}
 */
Session.prototype.createVerify = function(alg, key) {};

/**
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} alg
 * @param {!Key} key
 * @return {!Cipher}
 */
Session.prototype.createCipher = function(alg, key) {};

/**
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} alg
 * @param {!Key} key
 * @param {number=} blockSize
 * @return {!Decipher}
 */
Session.prototype.createDecipher = function(alg, key, blockSize) {};

/**
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} alg
 * @return {!Digest}
 */
Session.prototype.createDigest = function(alg) {};

/**
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} alg
 * @param {!Key} wrappingKey
 * @param {!Key} key
 * @param {function(!Error, ?): void=} callback
 * @return {?|void}
 */
Session.prototype.wrapKey = function(alg, wrappingKey, key, callback) {};

/**
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} alg
 * @param {!Key} unwrappingKey
 * @param {?} wrappedKey
 * @param {?} template
 * @param {function(!Error, !Key): void=} callback
 * @return {!Key|void}
 */
Session.prototype.unwrapKey = function(alg, unwrappingKey, wrappedKey, template, callback) {};

/**
 * derives a key from a base key, creating a new key object
 * @param {(string|MechanismEnum|KeyGenMechanism|?)} alg
 * @param {!Key} baseKey
 * @param {?} template
 * @param {function(!Error, !Key): void=} callback
 * @return {!SecretKey|void}
 */
Session.prototype.deriveKey = function(alg, baseKey, template, callback) {};

/**
 * generates random data
 * @param {number} size
 * @return {?}
 */
Session.prototype.generateRandom = function(size) {};
/**
 * @record
 * @struct
 */
function ITemplate() {}
 /** @type {number} */
ITemplate.prototype.class;
 /** @type {boolean} */
ITemplate.prototype.token;
 /** @type {boolean} */
ITemplate.prototype.private;
 /** @type {string} */
ITemplate.prototype.label;
 /** @type {string} */
ITemplate.prototype.application;
 /** @type {?} */
ITemplate.prototype.value;
 /** @type {?} */
ITemplate.prototype.objectId;
 /** @type {number} */
ITemplate.prototype.certType;
 /** @type {?} */
ITemplate.prototype.issuer;
 /** @type {?} */
ITemplate.prototype.serial;
 /** @type {?} */
ITemplate.prototype.issuerAC;
 /** @type {?} */
ITemplate.prototype.owner;
 /** @type {?} */
ITemplate.prototype.attrTypes;
 /** @type {boolean} */
ITemplate.prototype.trusted;
 /** @type {number} */
ITemplate.prototype.certCategory;
 /** @type {number} */
ITemplate.prototype.javaDomain;
 /** @type {string} */
ITemplate.prototype.url;
 /** @type {?} */
ITemplate.prototype.ski;
 /** @type {?} */
ITemplate.prototype.aki;
 /** @type {number} */
ITemplate.prototype.digestName;
 /** @type {?} */
ITemplate.prototype.checkValue;
 /** @type {number} */
ITemplate.prototype.keyType;
 /** @type {?} */
ITemplate.prototype.subject;
 /** @type {?} */
ITemplate.prototype.id;
 /** @type {boolean} */
ITemplate.prototype.sensitive;
 /** @type {boolean} */
ITemplate.prototype.encrypt;
 /** @type {boolean} */
ITemplate.prototype.decrypt;
 /** @type {boolean} */
ITemplate.prototype.wrap;
 /** @type {boolean} */
ITemplate.prototype.unwrap;
 /** @type {boolean} */
ITemplate.prototype.sign;
 /** @type {boolean} */
ITemplate.prototype.signRecover;
 /** @type {boolean} */
ITemplate.prototype.verify;
 /** @type {boolean} */
ITemplate.prototype.verifyRecover;
 /** @type {boolean} */
ITemplate.prototype.derive;
 /** @type {!Date} */
ITemplate.prototype.startDate;
 /** @type {!Date} */
ITemplate.prototype.endDate;
 /** @type {?} */
ITemplate.prototype.modulus;
 /** @type {number} */
ITemplate.prototype.modulusBits;
 /** @type {?} */
ITemplate.prototype.publicExponent;
 /** @type {?} */
ITemplate.prototype.privateExponent;
 /** @type {?} */
ITemplate.prototype.prime1;
 /** @type {?} */
ITemplate.prototype.prime2;
 /** @type {?} */
ITemplate.prototype.exp1;
 /** @type {?} */
ITemplate.prototype.exp2;
 /** @type {?} */
ITemplate.prototype.coefficient;
 /** @type {?} */
ITemplate.prototype.prime;
 /** @type {?} */
ITemplate.prototype.subprime;
 /** @type {?} */
ITemplate.prototype.base;
 /** @type {number} */
ITemplate.prototype.primeBits;
 /** @type {number} */
ITemplate.prototype.subprimeBits;
 /** @type {number} */
ITemplate.prototype.valueBits;
 /** @type {number} */
ITemplate.prototype.valueLen;
 /** @type {boolean} */
ITemplate.prototype.extractable;
 /** @type {boolean} */
ITemplate.prototype.local;
 /** @type {boolean} */
ITemplate.prototype.neverExtractable;
 /** @type {boolean} */
ITemplate.prototype.alwaysSensitive;
 /** @type {number} */
ITemplate.prototype.keyGenMechanism;
 /** @type {boolean} */
ITemplate.prototype.modifiable;
 /** @type {boolean} */
ITemplate.prototype.copyable;
 /** @type {?} */
ITemplate.prototype.paramsECDSA;
 /** @type {?} */
ITemplate.prototype.paramsEC;
 /** @type {?} */
ITemplate.prototype.pointEC;
 /** @type {boolean} */
ITemplate.prototype.secondaryAuth;
 /** @type {?} */
ITemplate.prototype.authPinFlags;
 /** @type {boolean} */
ITemplate.prototype.alwaysAuth;
 /** @type {boolean} */
ITemplate.prototype.wrapWithTrusted;
 /** @type {?} */
ITemplate.prototype.wrapTemplate;
 /** @type {?} */
ITemplate.prototype.unwrapTemplate;
 /** @type {?} */
ITemplate.prototype.otpFormat;
 /** @type {?} */
ITemplate.prototype.otpLength;
 /** @type {?} */
ITemplate.prototype.otpTimeInterval;
 /** @type {?} */
ITemplate.prototype.otpUserFriendlyMode;
 /** @type {?} */
ITemplate.prototype.otpChallengeReq;
 /** @type {?} */
ITemplate.prototype.otpTimeReq;
 /** @type {?} */
ITemplate.prototype.otpCounterReq;
 /** @type {?} */
ITemplate.prototype.otppinReq;
 /** @type {?} */
ITemplate.prototype.otpCounter;
 /** @type {?} */
ITemplate.prototype.otpTime;
 /** @type {?} */
ITemplate.prototype.otpUserId;
 /** @type {?} */
ITemplate.prototype.otpServiceId;
 /** @type {?} */
ITemplate.prototype.otpServiceLogo;
 /** @type {?} */
ITemplate.prototype.otpServiceLogoType;
 /** @type {?} */
ITemplate.prototype.hwFeatureType;
 /** @type {?} */
ITemplate.prototype.resetOnInit;
 /** @type {?} */
ITemplate.prototype.hasReset;
 /** @type {?} */
ITemplate.prototype.pixelX;
 /** @type {?} */
ITemplate.prototype.pixelY;
 /** @type {?} */
ITemplate.prototype.resolution;
 /** @type {?} */
ITemplate.prototype.charRows;
 /** @type {?} */
ITemplate.prototype.charCols;
 /** @type {?} */
ITemplate.prototype.color;
 /** @type {?} */
ITemplate.prototype.bitsPerPixel;
 /** @type {?} */
ITemplate.prototype.charSets;
 /** @type {?} */
ITemplate.prototype.encMethod;
 /** @type {?} */
ITemplate.prototype.mimeTypes;
 /** @type {?} */
ITemplate.prototype.mechanismType;
 /** @type {?} */
ITemplate.prototype.requiredCmsAttrs;
 /** @type {?} */
ITemplate.prototype.defaultCmsAttrs;
 /** @type {?} */
ITemplate.prototype.suportedCmsAttrs;
 /** @type {?} */
ITemplate.prototype.allowedMechanisms;
/**
 * @constructor
 * @struct
 */
function Template() {}

/**
 * @param {?} tmpl
 * @return {!Array<!Pkcs11Js.Attribute>}
 */
Template.toPkcs11 = function(tmpl) {};

/**
 * @param {!Array<!Pkcs11Js.Attribute>} tmpl
 * @return {?}
 */
Template.fromPkcs11 = function(tmpl) {};

/** @const */
var SlotFlag = {};
/** @const {number} */
SlotFlag.TOKEN_PRESENT;
/** @const {number} */
SlotFlag.REMOVABLE_DEVICE;
/** @const {number} */
SlotFlag.HW_SLOT;

/**
 * @constructor
 * @struct
 * @param {?} handle
 * @param {!Module} module
 * @param {!Pkcs11Js.PKCS11} lib
 */
function Slot(handle, module, lib) {}
 /** @type {string} */
Slot.prototype.slotDescription;
 /** @type {string} */
Slot.prototype.manufacturerID;
 /** @type {number} */
Slot.prototype.flags;
 /** @type {!Pkcs11Js.Version} */
Slot.prototype.hardwareVersion;
 /** @type {!Pkcs11Js.Version} */
Slot.prototype.firmwareVersion;
 /** @type {!Module} */
Slot.prototype.module;

/**
 * Recieve information about Slot
 * 
 * @protected
 * @return {void}
 */
Slot.prototype.getInfo = function() {};

/**
 * Returns information about token
 * 
 * @return {!Token}
 */
Slot.prototype.getToken = function() {};

/**
 * returns list of `MechanismInfo`
 * 
 * @return {!MechanismCollection}
 */
Slot.prototype.getMechanisms = function() {};

/**
 * initializes a token
 * 
 * @param {string} pin
 * @return {string}
 */
Slot.prototype.initToken = function(pin) {};

/**
 * opens a session between an application and a token in a particular slot
 * 
 * @param {SessionFlag=} flags
 * @return {!Session}
 */
Slot.prototype.open = function(flags) {};

/**
 * closes all sessions an application has with a token
 * @return {void}
 */
Slot.prototype.closeAll = function() {};

/**
 * @constructor
 * @struct
 * @param {!Array<?>} items
 * @param {!Module} module
 * @param {!Pkcs11Js.PKCS11} lib
 * @param {?=} classType
 */
function SlotCollection(items, module, lib, classType) {}
 /** @type {!Module} */
SlotCollection.prototype.module;

/**
 * @param {number} index
 * @return {!Slot}
 */
SlotCollection.prototype.items = function(index) {};

/** @const */
var TokenFlag = {};
/** @const {number} */
TokenFlag.RNG;
/** @const {number} */
TokenFlag.WRITE_PROTECTED;
/** @const {number} */
TokenFlag.LOGIN_REQUIRED;
/** @const {number} */
TokenFlag.USER_PIN_INITIALIZED;
/** @const {number} */
TokenFlag.RESTORE_KEY_NOT_NEEDED;
/** @const {number} */
TokenFlag.CLOCK_ON_TOKEN;
/** @const {number} */
TokenFlag.PROTECTED_AUTHENTICATION_PATH;
/** @const {number} */
TokenFlag.DUAL_CRYPTO_OPERATIONS;
/** @const {number} */
TokenFlag.TOKEN_INITIALIZED;
/** @const {number} */
TokenFlag.SECONDARY_AUTHENTICATION;
/** @const {number} */
TokenFlag.USER_PIN_COUNT_LOW;
/** @const {number} */
TokenFlag.USER_PIN_FINAL_TRY;
/** @const {number} */
TokenFlag.USER_PIN_LOCKED;
/** @const {number} */
TokenFlag.USER_PIN_TO_BE_CHANGED;
/** @const {number} */
TokenFlag.SO_PIN_COUNT_LOW;
/** @const {number} */
TokenFlag.SO_PIN_FINAL_TRY;
/** @const {number} */
TokenFlag.SO_PIN_LOCKED;
/** @const {number} */
TokenFlag.SO_PIN_TO_BE_CHANGED;
/** @const {number} */
TokenFlag.ERROR_STATE;

/**
 * @constructor
 * @struct
 * @param {?} handle
 * @param {!Pkcs11Js.PKCS11} lib
 */
function Token(handle, lib) {}
 /** @type {string} */
Token.prototype.label;
 /** @type {string} */
Token.prototype.manufacturerID;
 /** @type {string} */
Token.prototype.model;
 /** @type {string} */
Token.prototype.serialNumber;
 /** @type {number} */
Token.prototype.flags;
 /** @type {number} */
Token.prototype.maxSessionCount;
 /** @type {number} */
Token.prototype.sessionCount;
 /** @type {number} */
Token.prototype.maxRwSessionCount;
 /** @type {number} */
Token.prototype.rwSessionCount;
 /** @type {number} */
Token.prototype.maxPinLen;
 /** @type {number} */
Token.prototype.minPinLen;
 /** @type {number} */
Token.prototype.totalPublicMemory;
 /** @type {number} */
Token.prototype.freePublicMemory;
 /** @type {number} */
Token.prototype.totalPrivateMemory;
 /** @type {number} */
Token.prototype.freePrivateMemory;
 /** @type {!Pkcs11Js.Version} */
Token.prototype.hardwareVersion;
 /** @type {!Pkcs11Js.Version} */
Token.prototype.firmwareVersion;
 /** @type {!Date} */
Token.prototype.utcTime;

/**
 * @return {void}
 */
Token.prototype.getInfo = function() {};

/**
 * @constructor
 * @struct
 * @param {!Pkcs11Js.PKCS11} lib
 */
function Module(lib) {}
 /** @type {string} */
Module.prototype.libFile;
 /** @type {string} */
Module.prototype.libName;
 /** @type {!Pkcs11Js.Version} */
Module.prototype.cryptokiVersion;
 /** @type {string} */
Module.prototype.manufacturerID;
 /** @type {number} */
Module.prototype.flags;
 /** @type {string} */
Module.prototype.libraryDescription;
 /** @type {!Pkcs11Js.Version} */
Module.prototype.libraryVersion;

/**
 * @return {void}
 */
Module.prototype.getInfo = function() {};

/**
 * initializes the Cryptoki library
 * @return {void}
 */
Module.prototype.initialize = function() {};

/**
 * indicates that an application is done with the Cryptoki library
 * @return {void}
 */
Module.prototype.finalize = function() {};

/**
 * obtains a list of slots in the system
 * @param {number|boolean=} index_or_tokenPresent
 * @param {boolean=} tokenPresent
 * @return {!Slot|!SlotCollection}
 */
Module.prototype.getSlots = function(index_or_tokenPresent, tokenPresent) {};

/**
 * loads pkcs11 lib
 * @param {string} libFile path to PKCS11 library
 * @param {string=} libName name of PKCS11 library
 * @return {!Module}
 */
Module.load = function(libFile, libName) {};
