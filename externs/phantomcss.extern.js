/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/phantomcss/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var PhantomCSS = {};
/**
 * @record
 * @struct
 */
PhantomCSS.PhantomCSS = function() {};

/**
 * @param {!PhantomCSS.PhantomCSSOptions} options
 * @return {void}
 */
PhantomCSS.PhantomCSS.prototype.init = function(options) {};

/**
 * @param {!PhantomCSS.PhantomCSSOptions} options
 * @return {void}
 */
PhantomCSS.PhantomCSS.prototype.update = function(options) {};

/**
 * Take a screenshot of the targeted HTML element
 * FileName is required if addIteratorToImage option is set to false
 * Take a screenshot of the targeted HTML element
 * FileName is required if addIteratorToImage option is set to false
 * Take a screenshot of the targeted HTML element
 * FileName is required if addIteratorToImage option is set to false
 * @param {string|!ClipRect} target
 * @param {string|number=} fileName_or_timeToWait
 * @param {string=} hideSelector
 * @param {string=} fileName
 * @return {void}
 */
PhantomCSS.PhantomCSS.prototype.screenshot = function(target, fileName_or_timeToWait, hideSelector, fileName) {};

/**
 * @param {string} exclude
 * @param {!Array<string>=} diffList
 * @param {string=} include
 * @return {void}
 */
PhantomCSS.PhantomCSS.prototype.compareAll = function(exclude, diffList, include) {};

/**
 * @param {string|!RegExp} match
 * @param {string|!RegExp} exclude
 * @return {void}
 */
PhantomCSS.PhantomCSS.prototype.compareMatched = function(match, exclude) {};

/**
 * Explicitly define what files you want to compare
 * @param {!Array<string>} list
 * @return {void}
 */
PhantomCSS.PhantomCSS.prototype.compareExplicit = function(list) {};

/**
 * Compare image diffs generated in this test run only
 * @param {!Array<?>=} list
 * @return {void}
 */
PhantomCSS.PhantomCSS.prototype.compareSession = function(list) {};

/**
 * @param {string} baseFile
 * @param {string} diffFiles
 * @return {!PhantomCSS.PhantomCSSTest}
 */
PhantomCSS.PhantomCSS.prototype.compareFiles = function(baseFile, diffFiles) {};

/**
 * @param {!Array<!PhantomCSS.PhantomCSSTest>} tests
 * @return {void}
 */
PhantomCSS.PhantomCSS.prototype.waitForTests = function(tests) {};

/**
 * @return {void}
 */
PhantomCSS.PhantomCSS.prototype.done = function() {};

/**
 * Turn off CSS transitions and jQuery animations
 * @return {void}
 */
PhantomCSS.PhantomCSS.prototype.turnOffAnimations = function() {};

/**
 * @return {number}
 */
PhantomCSS.PhantomCSS.prototype.getExitStatus = function() {};

/**
 * Get a list of image diffs generated in this test run
 * @return {!Array<string>}
 */
PhantomCSS.PhantomCSS.prototype.getCreatedDiffFiles = function() {};
/**
 * @record
 * @struct
 */
PhantomCSS.PhantomCSSTest = function() {};
 /** @type {string} */
PhantomCSS.PhantomCSSTest.prototype.filename;
 /** @type {boolean} */
PhantomCSS.PhantomCSSTest.prototype.error;
 /** @type {boolean} */
PhantomCSS.PhantomCSSTest.prototype.fail;
 /** @type {boolean} */
PhantomCSS.PhantomCSSTest.prototype.success;
 /** @type {string} */
PhantomCSS.PhantomCSSTest.prototype.failFile;
 /** @type {?} */
PhantomCSS.PhantomCSSTest.prototype.mismatch;
/**
 * @record
 * @struct
 */
PhantomCSS.PhantomCSSOptions = function() {};
 /** @type {?} */
PhantomCSS.PhantomCSSOptions.prototype.rebase;
 /** @type {?} */
PhantomCSS.PhantomCSSOptions.prototype.casper;
 /** @type {string} */
PhantomCSS.PhantomCSSOptions.prototype.libraryRoot;
 /** @type {string} */
PhantomCSS.PhantomCSSOptions.prototype.screenshotRoot;
 /** @type {string} */
PhantomCSS.PhantomCSSOptions.prototype.failedComparisonsRoot;
 /** @type {string} */
PhantomCSS.PhantomCSSOptions.prototype.comparisonResultRoot;
 /** @type {boolean} */
PhantomCSS.PhantomCSSOptions.prototype.addIteratorToImage;
 /** @type {boolean} */
PhantomCSS.PhantomCSSOptions.prototype.cleanupComparisonImages;
 /** @type {boolean} */
PhantomCSS.PhantomCSSOptions.prototype.addLabelToFailedImage;
 /** @type {function(string, string): string} */
PhantomCSS.PhantomCSSOptions.prototype.fileNameGetter;
 /** @type {number} */
PhantomCSS.PhantomCSSOptions.prototype.mismatchTolerance;
 /** @type {function(!PhantomCSS.PhantomCSSTest): void} */
PhantomCSS.PhantomCSSOptions.prototype.onPass;
 /** @type {function(!PhantomCSS.PhantomCSSTest): void} */
PhantomCSS.PhantomCSSOptions.prototype.onFail;
 /** @type {function(!PhantomCSS.PhantomCSSTest): void} */
PhantomCSS.PhantomCSSOptions.prototype.onTimeout;
 /** @type {function(!Array<!PhantomCSS.PhantomCSSTest>, number, number): void} */
PhantomCSS.PhantomCSSOptions.prototype.onComplete;
 /** @type {function(!PhantomCSS.PhantomCSSTest): void} */
PhantomCSS.PhantomCSSOptions.prototype.onNewImage;
 /** @type {boolean} */
PhantomCSS.PhantomCSSOptions.prototype.prefixCount;
 /** @type {string} */
PhantomCSS.PhantomCSSOptions.prototype.hideElements;
 /** @type {!Resemble.OutputSettings} */
PhantomCSS.PhantomCSSOptions.prototype.outputSettings;
