/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/d3-contour/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */
/**
 * @extends {MultiPolygon}
 * @record
 * @struct
 */
function ContourMultiPolygon() {}
 /** @type {number} */
ContourMultiPolygon.prototype.value;
/**
 * @record
 * @struct
 */
function Contours() {}

/* TODO: CallSignature:  */

/**
 * Return the expected size of the input values grid, which defaults to [1,1].
 * Sets the expected size of the input values grid to the contour generator and returns the contour generator.
 * 
 * @param {!Array<?>=} size Size of the input values grid specified as an array [n, m]
 * where n is the number of columns in the grid and m is the number of rows; n and m must be positive integers.
 * @return {!Array<?>|?}
 */
Contours.prototype.size = function(size) {};

/**
 * Returns the current smoothing flag, which defaults to true.
 * Sets whether or not the generated contour polygons are smoothed using linear interpolation and returns the contour generator.
 * 
 * @param {boolean=} smooth Flag to enable linear interpolation. The default is "true".
 * @return {boolean|?}
 */
Contours.prototype.smooth = function(smooth) {};

/**
 * Returns the current threshold generator, which by default implements Sturges’ formula.
 * Sets the threshold generator to use the specified count and returns this contour generator.
 * The input values’ extent will be uniformly divided into approximately count bins.
 * 
 * Sets the threshold generator to the specified array and returns this contour generator.
 * 
 * Thresholds are defined as an array of values [x0, x1, …].
 * The first generated contour corresponds to the area where the input values are greater than or equal to x0;
 * the second contour corresponds to the area where the input values are greater than or equal to x1, and so on.
 * Thus, there is exactly one generated MultiPolygon geometry object for each specified threshold value;
 * the threshold value is exposed as geometry.value.
 * 
 * Sets the threshold generator to the specified function and returns this contour generator.
 * 
 * Thresholds are defined as an array of values [x0, x1, …].
 * The first generated contour corresponds to the area where the input values are greater than or equal to x0;
 * the second contour corresponds to the area where the input values are greater than or equal to x1, and so on.
 * Thus, there is exactly one generated MultiPolygon geometry object for each specified threshold value;
 * the threshold value is exposed as geometry.value.
 * 
 * @param {number|!Array<number>|?=} count_or_thresholds Expected number of threshold bins. / Array of thresholds to use. / A threshold generator function. The threshold generator function is passed the array of input values
 * as its argument and returns either an array of calculated thresholds, or the count of thresholds to use.
 * @return {?}
 */
Contours.prototype.thresholds = function(count_or_thresholds) {};

/**
 * Construct a new contour generator with the default settings.
 * @return {?}
 */
function contours() {}
/**
 * @record
 * @struct
 */
function ContourDensity() {}

/* TODO: CallSignature:  */

/**
 * Returns the current x-coordinate accessor.
 * The default x-coordinate accessor is a functions which accepts as input a two-element array of numbers
 * and returns the element at index 0.
 * Sets the x-coordinate accessor and returns the density contour estimator.
 * 
 * @param {?=} x An x-coordinate accessor function, which accepts as input an element of the input data array and returns the
 * x-coordinate.
 * @return {?}
 */
ContourDensity.prototype.x = function(x) {};

/**
 * Returns the current y-coordinate accessor.
 * The default y-coordinate accessor is a functions which accepts as input a two-element array of numbers
 * and returns the element at index 1.
 * Sets the y-coordinate accessor and returns the density contour estimator.
 * 
 * @param {?=} y An y-coordinate accessor function, which accepts as input an element of the input data array and returns the
 * y-coordinate.
 * @return {?}
 */
ContourDensity.prototype.y = function(y) {};

/**
 * Returns the current size, which defaults to [960, 500].
 * Sets the size of the density estimator to the specified bounds and returns the density contour estimator.
 * 
 * @param {!Array<?>=} size The size is specified as an array [width, height], where width is the maximum x-value and height is the maximum y-value.
 * @return {!Array<?>|?}
 */
ContourDensity.prototype.size = function(size) {};

/**
 * Returns the current cell size, which defaults to 4.
 * Sets the size of individual cells in the underlying bin grid to the specified positive integer and returns the density contour estimator.
 * 
 * The cell size is rounded down to the nearest power of two. Smaller cells produce more detailed contour polygons, but are more expensive to compute.
 * 
 * @param {number=} cellSize Cell size, a positive integer.
 * @return {number|?}
 */
ContourDensity.prototype.cellSize = function(cellSize) {};

/**
 * Returns the current threshold generator, which by default generates about twenty nicely-rounded density thresholds.
 * Sets the threshold generator to use the specified count and returns this density contour estimator.
 * Approximately count uniformly-spaced nicely-rounded thresholds will be generated.
 * 
 * Sets the threshold generator to the specified array and returns this density contour estimator.
 * 
 * Thresholds are defined as an array of values [x0, x1, …]. The first generated density contour corresponds to the area
 * where the estimated density is greater than or equal to x0; the second contour corresponds to the area
 * where the estimated density is greater than or equal to x1, and so on.
 * Thus, there is exactly one generated MultiPolygon geometry object for each specified threshold value;
 *  the threshold value is exposed as geometry.value. The first value x0 should typically be greater than zero.
 * 
 * Sets the threshold generator to the specified function and returns this density contour estimator.
 * 
 * Thresholds are defined as an array of values [x0, x1, …]. The first generated density contour corresponds to the area
 * where the estimated density is greater than or equal to x0; the second contour corresponds to the area
 * where the estimated density is greater than or equal to x1, and so on.
 * Thus, there is exactly one generated MultiPolygon geometry object for each specified threshold value;
 *  the threshold value is exposed as geometry.value. The first value x0 should typically be greater than zero.
 * 
 * @param {number|!Array<number>|?=} count_or_thresholds Expected number of thresholds. / Array of thresholds to use. / A threshold generator function. The threshold generator function is passed the array of input values
 * as its argument and returns either an array of calculated thresholds, or the count of thresholds to use.
 * @return {?}
 */
ContourDensity.prototype.thresholds = function(count_or_thresholds) {};

/**
 * Returns the current bandwidth, which defaults to 20.4939….
 * Sets the bandwidth (the standard deviation) of the Gaussian kernel and returns the density contour estimator.
 * 
 * @param {number=} bandwidth Bandwidth (the standard deviation) of the Gaussian kernel.
 * The specified bandwidth is currently rounded to the nearest supported value by this implementation, and must be nonnegative.
 * @return {number|?}
 */
ContourDensity.prototype.bandwidth = function(bandwidth) {};

/**
 * Construct a new contour generator for density estimates with the default settings.
 * 
 * The default settings assume that, the elements of the data array used
 * with the density contour generator are two-element arrays. The first element
 * corresponds to the x-dimension, the second to the y-dimension.
 * Construct a new contour generator for density estimates.
 * 
 * The generic refers to the data type of an element in the data array
 * used with the density contour generator.
 * 
 * Important: ensure that the x- and y-accessor functions are configured to
 * match the data type used for the generic Datum.
 * @template Datum
 * @return {?}
 */
function contourDensity() {}
