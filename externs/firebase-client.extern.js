/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/firebase-client/index.d.ts:

/* TODO: ImportDeclaration in  */
/**
 * @record
 * @struct
 */
function PushResponse() {}
 /** @type {string} */
PushResponse.prototype.name;
/**
 * @record
 * @struct
 */
function FirebaseConfig() {}
 /** @type {string} */
FirebaseConfig.prototype.url;
 /** @type {string} */
FirebaseConfig.prototype.auth;
/**
 * @record
 * @struct
 */
function FirebaseClient() {}

/* TODO: ConstructSignature:  */

/**
 * Retrieves all objects at the base path
 * Retrieves an object
 * @template T
 * @param {string=} path Relative path from the base for the resource
 * @return {?<?>}
 */
FirebaseClient.prototype.get = function(path) {};

/**
 * Returns a promise of the HTTP response from setting the value at the given path
 * @template T
 * @param {string} path Relative path from the base for the resource
 * @param {?} data Data to be set as the value for the given path
 * @return {?<?>}
 */
FirebaseClient.prototype.set = function(path, data) {};

/**
 * Update a node at a given path
 * @template T
 * @param {string} path Relative path from the base for the resource
 * @param {?} value Value of the response
 * @return {?<?>}
 */
FirebaseClient.prototype.update = function(path, value) {};

/**
 * Deletes the resource at a given path
 * @param {string} path Relative path from the base for the resource
 * @return {?<void>}
 */
FirebaseClient.prototype.delete = function(path) {};

/**
 * @template T
 * @param {string} path Relative path from the base for the resource
 * @param {?} value Object to push to the path
 * @return {?<?>}
 */
FirebaseClient.prototype.push = function(path, value) {};
 /** @type {?} */
var FirebaseClient;

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
