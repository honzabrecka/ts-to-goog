/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/rabbit.js/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/**
 * @param {string=} url
 * @return {!Context}
 */
function createContext(url) {}
/**
 * @extends {internal.EventEmitter}
 * @constructor
 * @struct
 */
function Context() {}

/**
 * @template T
 * @param {string} type
 * @param {?=} options
 * @return {T}
 */
Context.prototype.socket = function(type, options) {};

/**
 * @param {!Function} callback
 * @return {?}
 */
Context.prototype.close = function(callback) {};
/**
 * @record
 * @struct
 */
function SocketOptions() {}
 /** @type {?} */
SocketOptions.prototype.prefetch;
 /** @type {?} */
SocketOptions.prototype.expiration;
 /** @type {?} */
SocketOptions.prototype.persistent;
 /** @type {?} */
SocketOptions.prototype.topic;
 /** @type {?} */
SocketOptions.prototype.task;
 /** @type {?} */
SocketOptions.prototype.routing;
/**
 * @record
 * @struct
 */
function Socket() {}

/**
 * @param {string} destination
 * @param {!Function=} callback
 * @return {?}
 */
Socket.prototype.connect = function(destination, callback) {};

/**
 * @param {string} opt
 * @param {string} value
 * @return {?}
 */
Socket.prototype.setsockopt = function(opt, value) {};

/**
 * @return {?}
 */
Socket.prototype.close = function() {};

/**
 * @constructor
 * @struct
 * @param {string} channel
 * @param {?} opts
 */
function PubSocket(channel, opts) {}

/**
 * @param {string} destination
 * @param {!Function=} callback
 * @return {?}
 */
PubSocket.prototype.connect = function(destination, callback) {};

/**
 * @param {string} opt
 * @param {string} value
 * @return {?}
 */
PubSocket.prototype.setsockopt = function(opt, value) {};

/**
 * @return {?}
 */
PubSocket.prototype.close = function() {};

/**
 * @param {string} topic
 * @param {string|?} chunk
 * @param {string=} encoding
 * @return {?}
 */
PubSocket.prototype.publish = function(topic, chunk, encoding) {};

/**
 * @constructor
 * @struct
 * @param {string} channel
 * @param {?} opts
 */
function SubSocket(channel, opts) {}

/**
 * @param {string} source
 * @param {!Function|string=} callback_or_topic
 * @param {!Function=} callback
 * @return {?}
 */
SubSocket.prototype.connect = function(source, callback_or_topic, callback) {};

/**
 * @param {string} opt
 * @param {string} value
 * @return {?}
 */
SubSocket.prototype.setsockopt = function(opt, value) {};

/**
 * @return {?}
 */
SubSocket.prototype.close = function() {};

/**
 * @constructor
 * @struct
 * @param {string} channel
 * @param {?} opts
 */
function PushSocket(channel, opts) {}

/**
 * @param {string} destination
 * @param {!Function=} callback
 * @return {?}
 */
PushSocket.prototype.connect = function(destination, callback) {};

/**
 * @param {string} opt
 * @param {string} value
 * @return {?}
 */
PushSocket.prototype.setsockopt = function(opt, value) {};

/**
 * @return {?}
 */
PushSocket.prototype.close = function() {};

/**
 * @constructor
 * @struct
 * @param {string} channel
 * @param {?} opts
 */
function PullSocket(channel, opts) {}

/**
 * @param {string} source
 * @param {!Function=} callback
 * @return {?}
 */
PullSocket.prototype.connect = function(source, callback) {};

/**
 * @param {string} opt
 * @param {string} value
 * @return {?}
 */
PullSocket.prototype.setsockopt = function(opt, value) {};

/**
 * @return {?}
 */
PullSocket.prototype.close = function() {};

/**
 * @constructor
 * @struct
 * @param {string} channel
 * @param {?} opts
 */
function WorkerSocket(channel, opts) {}

/**
 * @param {string} source
 * @param {!Function=} callback
 * @return {?}
 */
WorkerSocket.prototype.connect = function(source, callback) {};

/**
 * @param {string} opt
 * @param {string} value
 * @return {?}
 */
WorkerSocket.prototype.setsockopt = function(opt, value) {};

/**
 * @return {?}
 */
WorkerSocket.prototype.close = function() {};

/**
 * @return {?}
 */
WorkerSocket.prototype.ack = function() {};

/**
 * @return {?}
 */
WorkerSocket.prototype.requeue = function() {};

/**
 * @return {?}
 */
WorkerSocket.prototype.discard = function() {};
/**
 * @record
 * @struct
 */
function RequestMessage() {}
 /** @type {?} */
RequestMessage.prototype.properties;
 /** @type {?} */
RequestMessage.prototype.content;

/**
 * @constructor
 * @struct
 * @param {string} channel
 * @param {?} opts
 */
function ReqSocket(channel, opts) {}

/**
 * @param {string} destination
 * @param {!Function=} callback
 * @return {?}
 */
ReqSocket.prototype.connect = function(destination, callback) {};

/**
 * @param {string} opt
 * @param {string} value
 * @return {?}
 */
ReqSocket.prototype.setsockopt = function(opt, value) {};

/**
 * @return {?}
 */
ReqSocket.prototype.close = function() {};

/**
 * @param {?} msg
 * @return {?}
 */
ReqSocket.prototype.handleReply = function(msg) {};

/**
 * @constructor
 * @struct
 * @param {string} channel
 * @param {?} opts
 */
function RepSocket(channel, opts) {}

/**
 * @param {string} source
 * @param {!Function=} callback
 * @return {?}
 */
RepSocket.prototype.connect = function(source, callback) {};

/**
 * @param {string} opt
 * @param {string} value
 * @return {?}
 */
RepSocket.prototype.setsockopt = function(opt, value) {};

/**
 * @return {?}
 */
RepSocket.prototype.close = function() {};

/**
 * @return {?}
 */
RepSocket.prototype.requeue = function() {};

/**
 * @return {?}
 */
RepSocket.prototype.discard = function() {};

/**
 * @constructor
 * @struct
 * @param {string} channel
 * @param {?} opts
 */
function TaskSocket(channel, opts) {}

/**
 * @param {string} destination
 * @param {!Function=} callback
 * @return {?}
 */
TaskSocket.prototype.connect = function(destination, callback) {};

/**
 * @param {string} opt
 * @param {string} value
 * @return {?}
 */
TaskSocket.prototype.setsockopt = function(opt, value) {};

/**
 * @return {?}
 */
TaskSocket.prototype.close = function() {};

/**
 * @param {string} task
 * @param {string|?} chunk
 * @param {string=} encoding
 * @return {?}
 */
TaskSocket.prototype.post = function(task, chunk, encoding) {};
