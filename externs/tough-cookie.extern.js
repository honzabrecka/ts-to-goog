/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/tough-cookie/index.d.ts:

/**
 * Parse a cookie date string into a Date.
 * Parses according to RFC6265 Section 5.1.1, not Date.parse().
 * @param {string} string
 * @return {!Date}
 */
function parseDate(string) {}

/**
 * Format a Date into a RFC1123 string (the RFC6265-recommended format).
 * @param {!Date} date
 * @return {string}
 */
function formatDate(date) {}

/**
 * Transforms a domain-name into a canonical domain-name.
 * The canonical domain-name is a trimmed, lowercased, stripped-of-leading-dot
 * and optionally punycode-encoded domain-name (Section 5.1.2 of RFC6265).
 * For the most part, this function is idempotent (can be run again on its output without ill effects).
 * @param {string} str
 * @return {string}
 */
function canonicalDomain(str) {}

/**
 * Answers "does this real domain match the domain in a cookie?".
 * The str is the "current" domain-name and the domStr is the "cookie" domain-name.
 * Matches according to RFC6265 Section 5.1.3, but it helps to think of it as a "suffix match".
 * 
 * The canonicalize parameter will run the other two paramters through canonicalDomain or not.
 * @param {string} str
 * @param {string} domStr
 * @param {boolean=} canonicalize
 * @return {boolean}
 */
function domainMatch(str, domStr, canonicalize) {}

/**
 * Given a current request/response path, gives the Path apropriate for storing in a cookie.
 * This is basically the "directory" of a "file" in the path, but is specified by Section 5.1.4 of the RFC.
 * 
 * The path parameter MUST be only the pathname part of a URI (i.e. excludes the hostname, query, fragment, etc.).
 * This is the .pathname property of node's uri.parse() output.
 * @param {string} path
 * @return {string}
 */
function defaultPath(path) {}

/**
 * Answers "does the request-path path-match a given cookie-path?" as per RFC6265 Section 5.1.4.
 * Returns a boolean.
 * 
 * This is essentially a prefix-match where cookiePath is a prefix of reqPath.
 * @param {string} reqPath
 * @param {string} cookiePath
 * @return {boolean}
 */
function pathMatch(reqPath, cookiePath) {}

/**
 * alias for Cookie.fromJSON(string)
 * @param {string} string
 * @return {?}
 */
function fromJSON(string) {}

/**
 * @param {string} hostname
 * @return {string}
 */
function getPublicSuffix(hostname) {}

/**
 * @param {?} a
 * @param {?} b
 * @return {number}
 */
function cookieCompare(a, b) {}

/**
 * @param {string} domain
 * @return {!Array<string>}
 */
function permuteDomain(domain) {}

/**
 * @param {string} path
 * @return {!Array<string>}
 */
function permutePath(path) {}

/**
 * @constructor
 * @struct
 * @param {?=} properties
 */
function Cookie(properties) {}
 /** @type {string} */
Cookie.prototype.key;
 /** @type {string} */
Cookie.prototype.value;
 /** @type {!Date} */
Cookie.prototype.expires;
 /** @type {(number|string)} */
Cookie.prototype.maxAge;
 /** @type {string} */
Cookie.prototype.domain;
 /** @type {string} */
Cookie.prototype.path;
 /** @type {boolean} */
Cookie.prototype.secure;
 /** @type {boolean} */
Cookie.prototype.httpOnly;
 /** @type {!Array<string>} */
Cookie.prototype.extensions;
 /** @type {!Date} */
Cookie.prototype.creation;
 /** @type {number} */
Cookie.prototype.creationIndex;
 /** @type {boolean} */
Cookie.prototype.hostOnly;
 /** @type {boolean} */
Cookie.prototype.pathIsDefault;
 /** @type {!Date} */
Cookie.prototype.lastAccessed;

/**
 * @param {string} cookieString
 * @param {?=} options
 * @return {?}
 */
Cookie.parse = function(cookieString, options) {};

/**
 * @param {(string|!Object)} strOrObj
 * @return {?}
 */
Cookie.fromJSON = function(strOrObj) {};

/**
 * @return {string}
 */
Cookie.prototype.toString = function() {};

/**
 * @return {string}
 */
Cookie.prototype.cookieString = function() {};

/**
 * @param {string} String
 * @return {void}
 */
Cookie.prototype.setExpires = function(String) {};

/**
 * @param {number} number
 * @return {void}
 */
Cookie.prototype.setMaxAge = function(number) {};

/**
 * @param {number=} now
 * @return {number}
 */
Cookie.prototype.expiryTime = function(now) {};

/**
 * @param {number=} now
 * @return {!Date}
 */
Cookie.prototype.expiryDate = function(now) {};

/**
 * @param {!Date=} now
 * @return {number}
 */
Cookie.prototype.TTL = function(now) {};

/**
 * @return {string}
 */
Cookie.prototype.canonicalizedDomain = function() {};

/**
 * @return {string}
 */
Cookie.prototype.cdomain = function() {};

/**
 * @return {?}
 */
Cookie.prototype.toJSON = function() {};

/**
 * @return {?}
 */
Cookie.prototype.clone = function() {};

/**
 * @return {(string|boolean)}
 */
Cookie.prototype.validate = function() {};
/**
 * @record
 * @struct
 */
Cookie.ParseOptions = function() {};
 /** @type {boolean} */
Cookie.ParseOptions.prototype.loose;
/**
 * @record
 * @struct
 */
Cookie.Properties = function() {};
 /** @type {string} */
Cookie.Properties.prototype.key;
 /** @type {string} */
Cookie.Properties.prototype.value;
 /** @type {!Date} */
Cookie.Properties.prototype.expires;
 /** @type {(number|string)} */
Cookie.Properties.prototype.maxAge;
 /** @type {string} */
Cookie.Properties.prototype.domain;
 /** @type {string} */
Cookie.Properties.prototype.path;
 /** @type {boolean} */
Cookie.Properties.prototype.secure;
 /** @type {boolean} */
Cookie.Properties.prototype.httpOnly;
 /** @type {!Array<string>} */
Cookie.Properties.prototype.extensions;
 /** @type {!Date} */
Cookie.Properties.prototype.creation;
 /** @type {number} */
Cookie.Properties.prototype.creationIndex;
 /** @type {boolean} */
Cookie.Properties.prototype.hostOnly;
 /** @type {boolean} */
Cookie.Properties.prototype.pathIsDefault;
 /** @type {!Date} */
Cookie.Properties.prototype.lastAccessed;
/**
 * @record
 * @struct
 */
Cookie.Serialized = function() {};

/* TODO: IndexSignature: Cookie */

/**
 * @constructor
 * @struct
 * @param {?=} store
 * @param {?=} options
 */
function CookieJar(store, options) {}

/**
 * @param {(string|?)} serialized
 * @param {?} store_or_cb
 * @param {?=} cb
 * @return {void}
 */
CookieJar.deserialize = function(serialized, store_or_cb, cb) {};

/**
 * @param {(string|?)} serialized
 * @return {?}
 */
CookieJar.deserializeSync = function(serialized) {};

/**
 * @param {string} string
 * @return {?}
 */
CookieJar.fromJSON = function(string) {};

/**
 * @param {(string|?)} cookieOrString
 * @param {string} currentUrl
 * @param {?} options_or_cb
 * @param {?=} cb
 * @return {void}
 */
CookieJar.prototype.setCookie = function(cookieOrString, currentUrl, options_or_cb, cb) {};

/**
 * @param {(string|?)} cookieOrString
 * @param {string} currentUrl
 * @param {?} options
 * @return {void}
 */
CookieJar.prototype.setCookieSync = function(cookieOrString, currentUrl, options) {};

/**
 * @param {string} currentUrl
 * @param {?} options_or_cb
 * @param {?=} cb
 * @return {void}
 */
CookieJar.prototype.getCookies = function(currentUrl, options_or_cb, cb) {};

/**
 * @param {string} currentUrl
 * @param {?=} options
 * @return {!Array<?>}
 */
CookieJar.prototype.getCookiesSync = function(currentUrl, options) {};

/**
 * @param {string} currentUrl
 * @param {?} options_or_cb
 * @param {?=} cb
 * @return {void}
 */
CookieJar.prototype.getCookieString = function(currentUrl, options_or_cb, cb) {};

/**
 * @param {string} currentUrl
 * @param {?=} options
 * @return {string}
 */
CookieJar.prototype.getCookieStringSync = function(currentUrl, options) {};

/**
 * @param {string} currentUrl
 * @param {?} options_or_cb
 * @param {?=} cb
 * @return {void}
 */
CookieJar.prototype.getSetCookieStrings = function(currentUrl, options_or_cb, cb) {};

/**
 * @param {string} currentUrl
 * @param {?=} options
 * @return {string}
 */
CookieJar.prototype.getSetCookieStringsSync = function(currentUrl, options) {};

/**
 * @param {?} cb
 * @return {void}
 */
CookieJar.prototype.serialize = function(cb) {};

/**
 * @return {?}
 */
CookieJar.prototype.serializeSync = function() {};

/**
 * @return {?}
 */
CookieJar.prototype.toJSON = function() {};

/**
 * @param {?} store_or_cb
 * @param {?=} cb
 * @return {void}
 */
CookieJar.prototype.clone = function(store_or_cb, cb) {};

/**
 * @param {?} store
 * @return {?}
 */
CookieJar.prototype.cloneSync = function(store) {};
/**
 * @record
 * @struct
 */
CookieJar.Options = function() {};
 /** @type {boolean} */
CookieJar.Options.prototype.rejectPublicSuffixes;
 /** @type {boolean} */
CookieJar.Options.prototype.looseMode;
/**
 * @record
 * @struct
 */
CookieJar.SetCookieOptions = function() {};
 /** @type {boolean} */
CookieJar.SetCookieOptions.prototype.http;
 /** @type {boolean} */
CookieJar.SetCookieOptions.prototype.secure;
 /** @type {!Date} */
CookieJar.SetCookieOptions.prototype.now;
 /** @type {boolean} */
CookieJar.SetCookieOptions.prototype.ignoreError;
/**
 * @record
 * @struct
 */
CookieJar.GetCookiesOptions = function() {};
 /** @type {boolean} */
CookieJar.GetCookiesOptions.prototype.http;
 /** @type {boolean} */
CookieJar.GetCookiesOptions.prototype.secure;
 /** @type {!Date} */
CookieJar.GetCookiesOptions.prototype.date;
 /** @type {boolean} */
CookieJar.GetCookiesOptions.prototype.expire;
 /** @type {boolean} */
CookieJar.GetCookiesOptions.prototype.allPoints;
/**
 * @record
 * @struct
 */
CookieJar.Serialized = function() {};
 /** @type {string} */
CookieJar.Serialized.prototype.version;
 /** @type {string} */
CookieJar.Serialized.prototype.storeType;
 /** @type {boolean} */
CookieJar.Serialized.prototype.rejectPublicSuffixes;
 /** @type {!Array<?>} */
CookieJar.Serialized.prototype.cookies;
/**
 * @constructor
 * @struct
 */
function Store() {}

/**
 * @param {string} domain
 * @param {string} path
 * @param {string} key
 * @param {?} cb
 * @return {void}
 */
Store.prototype.findCookie = function(domain, path, key, cb) {};

/**
 * @param {string} domain
 * @param {string} path
 * @param {?} cb
 * @return {void}
 */
Store.prototype.findCookies = function(domain, path, cb) {};

/**
 * @param {?} cookie
 * @param {?} cb
 * @return {void}
 */
Store.prototype.putCookie = function(cookie, cb) {};

/**
 * @param {?} oldCookie
 * @param {?} newCookie
 * @param {?} cb
 * @return {void}
 */
Store.prototype.updateCookie = function(oldCookie, newCookie, cb) {};

/**
 * @param {string} domain
 * @param {string} path
 * @param {string} key
 * @param {?} cb
 * @return {void}
 */
Store.prototype.removeCookie = function(domain, path, key, cb) {};

/**
 * @param {string} domain
 * @param {string} path
 * @param {?} cb
 * @return {void}
 */
Store.prototype.removeCookies = function(domain, path, cb) {};

/**
 * @param {?} cb
 * @return {void}
 */
Store.prototype.getAllCookies = function(cb) {};
/**
 * @constructor
 * @struct
 */
function MemoryCookieStore() {}
