/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/vinyl v0/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {{cwd: string, base: string, path: string, history: !Array<string>, stat: !Stats, contents: (?|!NodeJS.ReadWriteStream)}=} options
 */
function File(options) {}
 /** @type {string} */
File.prototype.cwd;
 /** @type {string} */
File.prototype.base;
 /** @type {string} */
File.prototype.path;
 /** @type {!Stats} */
File.prototype.stat;
 /** @type {(?|!NodeJS.ReadableStream)} */
File.prototype.contents;
 /** @type {string} */
File.prototype.relative;

/**
 * @return {boolean}
 */
File.prototype.isBuffer = function() {};

/**
 * @return {boolean}
 */
File.prototype.isStream = function() {};

/**
 * @return {boolean}
 */
File.prototype.isNull = function() {};

/**
 * @return {boolean}
 */
File.prototype.isDirectory = function() {};

/**
 * Returns a new File object with all attributes cloned. Custom attributes are deep-cloned.
 * @param {{contents: boolean}=} opts
 * @return {!File}
 */
File.prototype.clone = function(opts) {};

/**
 * If file.contents is a Buffer, it will write it to the stream.
 * If file.contents is a Stream, it will pipe it to the stream.
 * If file.contents is null, it will do nothing.
 * @template T
 * @param {T} stream
 * @param {{end: boolean}=} opts
 * @return {T}
 */
File.prototype.pipe = function(stream, opts) {};

/**
 * Returns a pretty String interpretation of the File. Useful for console.log.
 * @return {string}
 */
File.prototype.inspect = function() {};

/* TODO: ExportAssignment in  */
