/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/vitalsigns/index.d.ts:
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "vitalsigns"
/** @const */
tsickle_declare_module.vitalsigns = {};

/* TODO: ImportDeclaration in tsickle_declare_module.vitalsigns */
/** @const */
tsickle_declare_module.vitalsigns.vitalsigns = {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.vitalsigns.vitalsigns.Constraint = function() {};
 /** @type {string} */
tsickle_declare_module.vitalsigns.vitalsigns.Constraint.prototype.comparator;
 /** @type {string} */
tsickle_declare_module.vitalsigns.vitalsigns.Constraint.prototype.field;
 /** @type {string} */
tsickle_declare_module.vitalsigns.vitalsigns.Constraint.prototype.monitor;
 /** @type {boolean} */
tsickle_declare_module.vitalsigns.vitalsigns.Constraint.prototype.negate;
 /** @type {?} */
tsickle_declare_module.vitalsigns.vitalsigns.Constraint.prototype.value;
/**
 * @record
 * @struct
 */
tsickle_declare_module.vitalsigns.vitalsigns.ConstraintWrapper = function() {};
 /** @type {function(number): !vitalsigns.ConstraintWrapper} */
tsickle_declare_module.vitalsigns.vitalsigns.ConstraintWrapper.prototype.equals;
 /** @type {function(number): !vitalsigns.ConstraintWrapper} */
tsickle_declare_module.vitalsigns.vitalsigns.ConstraintWrapper.prototype.greaterThan;
 /** @type {function(number): !vitalsigns.ConstraintWrapper} */
tsickle_declare_module.vitalsigns.vitalsigns.ConstraintWrapper.prototype.lessThan;
 /** @type {!vitalsigns.ConstraintWrapper} */
tsickle_declare_module.vitalsigns.vitalsigns.ConstraintWrapper.prototype.not;
/**
 * @record
 * @struct
 */
tsickle_declare_module.vitalsigns.vitalsigns.Options = function() {};
 /** @type {(number|boolean)} */
tsickle_declare_module.vitalsigns.vitalsigns.Options.prototype.autoCheck;
 /** @type {number} */
tsickle_declare_module.vitalsigns.vitalsigns.Options.prototype.httpHealthy;
 /** @type {number} */
tsickle_declare_module.vitalsigns.vitalsigns.Options.prototype.httpUnhealthy;
/**
 * @record
 * @struct
 */
tsickle_declare_module.vitalsigns.vitalsigns.Monitor = function() {};
 /** @type {?} */
tsickle_declare_module.vitalsigns.vitalsigns.Monitor.prototype.connections;
/**
 * @record
 * @struct
 */
tsickle_declare_module.vitalsigns.vitalsigns.MonitorField = function() {};
 /** @type {string} */
tsickle_declare_module.vitalsigns.vitalsigns.MonitorField.prototype.name;
 /** @type {string} */
tsickle_declare_module.vitalsigns.vitalsigns.MonitorField.prototype.units;
/**
 * @record
 * @struct
 */
tsickle_declare_module.vitalsigns.vitalsigns.ReportOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.vitalsigns.vitalsigns.ReportOptions.prototype.flatten;
 /** @type {string} */
tsickle_declare_module.vitalsigns.vitalsigns.ReportOptions.prototype.separator;

/**
 * @constructor
 * @struct
 * Constructor.
 * \@constructors
 * @param {!vitalsigns.Options=} options
 */
tsickle_declare_module.vitalsigns.VitalSigns = function(options) {};
 /** @type {!e.RequestHandler} */
tsickle_declare_module.vitalsigns.VitalSigns.prototype.express;
 /** @type {function(string, string): !vitalsigns.ConstraintWrapper} */
tsickle_declare_module.vitalsigns.VitalSigns.prototype.unhealthyWhen;

/**
 * Pushes a health constraint onto this instance's constraint array.
 * Health constraints define scenarios in which VitalSigns will consider the application to be in an unhealthy state.
 * @return {void}
 */
tsickle_declare_module.vitalsigns.VitalSigns.prototype.addConstraint = function() {};

/**
 * Destroys this VitalSigns instance.
 * @return {void}
 */
tsickle_declare_module.vitalsigns.VitalSigns.prototype.destroy = function() {};

/**
 * Retrieves an array of human-readable messages that define the specific health constraints that failed when running the last health check.
 * @return {!Array<string>}
 */
tsickle_declare_module.vitalsigns.VitalSigns.prototype.getFailed = function() {};

/**
 * Gets a report of all monitors, their fields, and the values of those fields, compiled into Javascript object form.  Additionally, a 'healthy' field is
 * attached. This field will be boolean true if all health constraints passed; false otherwise.
 * @param {!vitalsigns.ReportOptions=} options
 * @return {!Object}
 */
tsickle_declare_module.vitalsigns.VitalSigns.prototype.getReport = function(options) {};

/**
 * Generates a health report and checks each health constraint against it. Any constraints that fail will be added to the 'failed' array in the form of
 * a human-readable failure message, which can be retrieved with {\@link #getFailed}.
 * @param {!Object=} report
 * @return {boolean}
 */
tsickle_declare_module.vitalsigns.VitalSigns.prototype.isHealthy = function(report) {};

/**
 * Registers monitor.
 * @param {(string|!Object|!vitalsigns.Monitor)} monitor
 * @param {!vitalsigns.MonitorField=} field
 * @return {void}
 */
tsickle_declare_module.vitalsigns.VitalSigns.prototype.monitor = function(monitor, field) {};

/* TODO: ExportAssignment in tsickle_declare_module.vitalsigns */
