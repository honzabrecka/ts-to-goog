/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/d3-random/index.d.ts:
/**
 * @record
 * @struct
 */
function RandomNumberGenerationSource() {}

/**
 * Returns the same type of function for generating random numbers but where the given random number
 * generator source is used as the source of randomness instead of Math.random.
 * This is useful when a seeded random number generator is preferable to Math.random.
 * 
 * @param {?} source Source (pseudo-)random number generator implementing the Math.random interface.
 * The given random number generator must implement the same interface as Math.random and
 * only return values in the range [0, 1).
 * @return {?}
 */
RandomNumberGenerationSource.prototype.source = function(source) {};
/**
 * @extends {RandomNumberGenerationSource}
 * @record
 * @struct
 */
function RandomUniform() {}

/* TODO: CallSignature:  */
 /** @type {?} */
var randomUniform;
/**
 * @extends {RandomNumberGenerationSource}
 * @record
 * @struct
 */
function RandomNormal() {}

/* TODO: CallSignature:  */
 /** @type {?} */
var randomNormal;
/**
 * @extends {RandomNumberGenerationSource}
 * @record
 * @struct
 */
function RandomLogNormal() {}

/* TODO: CallSignature:  */
 /** @type {?} */
var randomLogNormal;
/**
 * @extends {RandomNumberGenerationSource}
 * @record
 * @struct
 */
function RandomBates() {}

/* TODO: CallSignature:  */
 /** @type {?} */
var randomBates;
/**
 * @extends {RandomNumberGenerationSource}
 * @record
 * @struct
 */
function RandomIrwinHall() {}

/* TODO: CallSignature:  */
 /** @type {?} */
var randomIrwinHall;
/**
 * @extends {RandomNumberGenerationSource}
 * @record
 * @struct
 */
function RandomExponential() {}

/* TODO: CallSignature:  */
 /** @type {?} */
var randomExponential;
