/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/rc-select/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ExportAssignment in  */

/* TODO: ExportDeclaration in  */
/** @const */
var RcSelect = {};
/**
 * @record
 * @struct
 */
RcSelect.SelectProps = function() {};
 /** @type {string} */
RcSelect.SelectProps.prototype.className;
 /** @type {string} */
RcSelect.SelectProps.prototype.prefixCls;
 /** @type {string} */
RcSelect.SelectProps.prototype.animation;
 /** @type {string} */
RcSelect.SelectProps.prototype.transitionName;
 /** @type {string} */
RcSelect.SelectProps.prototype.choiceTransitionName;
 /** @type {boolean} */
RcSelect.SelectProps.prototype.dropdownMatchSelectWidth;
 /** @type {string} */
RcSelect.SelectProps.prototype.dropdownClassName;
 /** @type {!Object<string,string>} */
RcSelect.SelectProps.prototype.dropdownStyle;
 /** @type {!Object<string,string>} */
RcSelect.SelectProps.prototype.dropdownMenuStyle;
 /** @type {string} */
RcSelect.SelectProps.prototype.notFoundContent;
 /** @type {boolean} */
RcSelect.SelectProps.prototype.showSearch;
 /** @type {boolean} */
RcSelect.SelectProps.prototype.allowClear;
 /** @type {boolean} */
RcSelect.SelectProps.prototype.tags;
 /** @type {number} */
RcSelect.SelectProps.prototype.maxTagTextLength;
 /** @type {boolean} */
RcSelect.SelectProps.prototype.combobox;
 /** @type {boolean} */
RcSelect.SelectProps.prototype.multiple;
 /** @type {boolean} */
RcSelect.SelectProps.prototype.disabled;
 /** @type {boolean} */
RcSelect.SelectProps.prototype.filterOption;
 /** @type {string} */
RcSelect.SelectProps.prototype.optionFilterProp;
 /** @type {string} */
RcSelect.SelectProps.prototype.optionLabelProp;
 /** @type {(string|!Array<string>)} */
RcSelect.SelectProps.prototype.defaultValue;
 /** @type {(string|!Array<string>)} */
RcSelect.SelectProps.prototype.value;
 /** @type {function(string, string): void} */
RcSelect.SelectProps.prototype.onChange;
 /** @type {!Function} */
RcSelect.SelectProps.prototype.onSearch;
 /** @type {function(string, !RcSelect.Option): void} */
RcSelect.SelectProps.prototype.onSelect;
 /** @type {!Function} */
RcSelect.SelectProps.prototype.onDeselect;
 /** @type {(string|!Array<string>)} */
RcSelect.SelectProps.prototype.defaultLabel;
 /** @type {boolean} */
RcSelect.SelectProps.prototype.defaultActiveFirstOption;
 /** @type {function(!Node): !Node} */
RcSelect.SelectProps.prototype.getPopupContainer;
/**
 * @extends {React.Component}
 * @constructor
 * @struct
 */
RcSelect.Select = function() {};
/**
 * @record
 * @struct
 */
RcSelect.OptionProps = function() {};
 /** @type {string} */
RcSelect.OptionProps.prototype.className;
 /** @type {boolean} */
RcSelect.OptionProps.prototype.disabled;
 /** @type {string} */
RcSelect.OptionProps.prototype.key;
 /** @type {string} */
RcSelect.OptionProps.prototype.value;
/**
 * @extends {React.Component}
 * @constructor
 * @struct
 */
RcSelect.Option = function() {};
/**
 * @record
 * @struct
 */
RcSelect.OptGroupProps = function() {};
 /** @type {(string|!React.ReactElement<?>)} */
RcSelect.OptGroupProps.prototype.label;
 /** @type {string} */
RcSelect.OptGroupProps.prototype.key;
 /** @type {string} */
RcSelect.OptGroupProps.prototype.value;
/**
 * @extends {React.Component}
 * @constructor
 * @struct
 */
RcSelect.OptGroup = function() {};
