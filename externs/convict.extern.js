/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/convict/index.d.ts:
/** @const */
var convict = {};

/** @typedef {string} */
convict.ValidationMethod;
/**
 * @record
 * @struct
 */
convict.ValidateOptions = function() {};
 /** @type {string} */
convict.ValidateOptions.prototype.allowed;
 /** @type {boolean} */
convict.ValidateOptions.prototype.strict;
/**
 * @record
 * @struct
 */
convict.Format = function() {};
 /** @type {string} */
convict.Format.prototype.name;

/**
 * @param {?} val
 * @return {void}
 */
convict.Format.prototype.validate = function(val) {};

/**
 * @param {?} val
 * @return {?}
 */
convict.Format.prototype.coerce = function(val) {};
/**
 * @record
 * @struct
 */
convict.Schema = function() {};

/* TODO: IndexSignature: convict */
/**
 * @record
 * @struct
 */
convict.Config = function() {};

/**
 * @param {string=} name
 * @return {?} the current value of the name property. name can use dot
 * notation to reference nested values
 */
convict.Config.prototype.get = function(name) {};

/**
 * @param {string} name
 * @return {?} the default value of the name property. name can use dot
 * notation to reference nested values
 */
convict.Config.prototype.default = function(name) {};

/**
 * @param {string} name
 * @return {boolean} true if the property name is defined, or false otherwise
 */
convict.Config.prototype.has = function(name) {};

/**
 * Sets the value of name to value. name can use dot notation to reference
 * nested values, e.g. "database.port". If objects in the chain don't yet
 * exist, they will be initialized to empty objects
 * 
 * @param {string} name
 * @param {?} value
 * @return {!convict.Config}
 */
convict.Config.prototype.set = function(name, value) {};

/**
 * Loads and merges a JavaScript object into config
 * 
 * @param {!Object} conf
 * @return {!convict.Config}
 */
convict.Config.prototype.load = function(conf) {};

/**
 * Loads and merges JSON configuration file(s) into config
 * 
 * @param {(string|!Array<string>)} files
 * @return {!convict.Config}
 */
convict.Config.prototype.loadFile = function(files) {};

/**
 * Validates config against the schema used to initialize it
 * 
 * @param {!convict.ValidateOptions=} options
 * @return {!convict.Config}
 */
convict.Config.prototype.validate = function(options) {};

/**
 * Exports all the properties (that is the keys and their current values) as a {JSON} {Object}
 * @return {!Object}
 */
convict.Config.prototype.getProperties = function() {};

/**
 * Exports the schema as a {JSON} {Object}
 * @return {!Object}
 */
convict.Config.prototype.getSchema = function() {};

/**
 * Exports all the properties (that is the keys and their current values) as a JSON string.
 * @return {string}
 */
convict.Config.prototype.toString = function() {};

/**
 * Exports the schema as a JSON string.
 * @return {string}
 */
convict.Config.prototype.getSchemaString = function() {};

/* TODO: CallSignature:  */

/**
 * @param {!convict.Format} format
 * @return {void}
 */
convict.prototype.addFormat = function(format) {};

/**
 * @param {?} formats
 * @return {void}
 */
convict.prototype.addFormats = function(formats) {};
 /** @type {?} */
var convict;

/* TODO: ExportAssignment in  */
