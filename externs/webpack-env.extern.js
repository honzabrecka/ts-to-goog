/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/webpack-env/index.d.ts:
/** @const */
var __WebpackModuleApi = {};
/**
 * @record
 * @struct
 */
__WebpackModuleApi.RequireContext = function() {};

/* TODO: CallSignature: __WebpackModuleApi */

/**
 * @return {!Array<string>}
 */
__WebpackModuleApi.RequireContext.prototype.keys = function() {};

/**
 * @param {string} id
 * @return {string}
 */
__WebpackModuleApi.RequireContext.prototype.resolve = function(id) {};
/**
 * @record
 * @struct
 */
__WebpackModuleApi.RequireFunction = function() {};

/* TODO: CallSignature: __WebpackModuleApi */

/* TODO: CallSignature: __WebpackModuleApi */
 /** @type {function(!Array<string>, function(function(string): T): void, string): void} */
__WebpackModuleApi.RequireFunction.prototype.ensure;
 /** @type {function(string, boolean, !RegExp): !__WebpackModuleApi.RequireContext} */
__WebpackModuleApi.RequireFunction.prototype.context;
 /** @type {!Object<string,?>} */
__WebpackModuleApi.RequireFunction.prototype.cache;

/**
 * Returns the module id of a dependency. The call is sync. No request to the server is fired. The compiler ensures that the dependency is available.
 * 
 * The module id is a number in webpack (in contrast to node.js where it is a string, the filename).
 * @param {string} path
 * @return {(string|number)}
 */
__WebpackModuleApi.RequireFunction.prototype.resolve = function(path) {};

/**
 * Like require.resolve, but doesn’t include the module into the bundle. It’s a weak dependency.
 * @param {string} path
 * @return {number}
 */
__WebpackModuleApi.RequireFunction.prototype.resolveWeak = function(path) {};

/**
 * Ensures that the dependency is available, but don’t execute it. This can be use for optimizing the position of a module in the chunks.
 * @param {string} path
 * @return {void}
 */
__WebpackModuleApi.RequireFunction.prototype.include = function(path) {};
/**
 * @record
 * @struct
 */
__WebpackModuleApi.Module = function() {};
 /** @type {?} */
__WebpackModuleApi.Module.prototype.exports;
 /** @type {string} */
__WebpackModuleApi.Module.prototype.id;
 /** @type {string} */
__WebpackModuleApi.Module.prototype.filename;
 /** @type {boolean} */
__WebpackModuleApi.Module.prototype.loaded;
 /** @type {?} */
__WebpackModuleApi.Module.prototype.parent;
 /** @type {!Array<?>} */
__WebpackModuleApi.Module.prototype.children;
 /** @type {!__WebpackModuleApi.Hot} */
__WebpackModuleApi.Module.prototype.hot;

/**
 * @param {string} id
 * @return {?}
 */
__WebpackModuleApi.Module.prototype.require = function(id) {};

/** @typedef {(string|number)} */
__WebpackModuleApi.ModuleId;
/**
 * @record
 * @struct
 */
__WebpackModuleApi.Hot = function() {};
 /** @type {boolean} */
__WebpackModuleApi.Hot.prototype.active;
 /** @type {!Object} */
__WebpackModuleApi.Hot.prototype.data;

/**
 * Accept code updates for the specified dependencies. The callback is called when dependencies were replaced.
 * Accept code updates for the specified dependencies. The callback is called when dependencies were replaced.
 * Accept code updates for this module without notification of parents.
 * This should only be used if the module doesn’t export anything.
 * The errHandler can be used to handle errors that occur while loading the updated module.
 * @param {!Array<string>|string|function(!Error): void=} dependencies_or_dependency_or_errHandler
 * @param {function(!Array<(string|number)>): void|function(): void=} callback
 * @return {void}
 */
__WebpackModuleApi.Hot.prototype.accept = function(dependencies_or_dependency_or_errHandler, callback) {};

/**
 * Do not accept updates for the specified dependencies. If any dependencies is updated, the code update fails with code "decline".
 * Do not accept updates for the specified dependencies. If any dependencies is updated, the code update fails with code "decline".
 * Flag the current module as not update-able. If updated the update code would fail with code "decline".
 * @param {!Array<string>|string=} dependencies_or_dependency
 * @return {void}
 */
__WebpackModuleApi.Hot.prototype.decline = function(dependencies_or_dependency) {};

/**
 * Add a one time handler, which is executed when the current module code is replaced.
 * Here you should destroy/remove any persistent resource you have claimed/created.
 * If you want to transfer state to the new module, add it to data object.
 * The data will be available at module.hot.data on the new module.
 * @template T
 * @param {function(T): void} callback
 * @return {void}
 */
__WebpackModuleApi.Hot.prototype.dispose = function(callback) {};

/**
 * Add a one time handler, which is executed when the current module code is replaced.
 * Here you should destroy/remove any persistent resource you have claimed/created.
 * If you want to transfer state to the new module, add it to data object.
 * The data will be available at module.hot.data on the new module.
 * @template T
 * @param {function(T): void} callback
 * @return {void}
 */
__WebpackModuleApi.Hot.prototype.addDisposeHandler = function(callback) {};

/**
 * Remove a handler.
 * This can useful to add a temporary dispose handler. You could i. e. replace code while in the middle of a multi-step async function.
 * @template T
 * @param {function(T): void} callback
 * @return {void}
 */
__WebpackModuleApi.Hot.prototype.removeDisposeHandler = function(callback) {};

/**
 * Throws an exceptions if status() is not idle.
 * Check all currently loaded modules for updates and apply updates if found.
 * If no update was found, the callback is called with null.
 * If autoApply is truthy the callback will be called with all modules that were disposed.
 * apply() is automatically called with autoApply as options parameter.
 * If autoApply is not set the callback will be called with all modules that will be disposed on apply().
 * Throws an exceptions if status() is not idle.
 * Check all currently loaded modules for updates and apply updates if found.
 * If no update was found, the callback is called with null.
 * The callback will be called with all modules that will be disposed on apply().
 * @param {boolean|function(!Error, !Array<(string|number)>): void} autoApply_or_callback
 * @param {function(!Error, !Array<(string|number)>): void=} callback
 * @return {void}
 */
__WebpackModuleApi.Hot.prototype.check = function(autoApply_or_callback, callback) {};

/**
 * If status() != "ready" it throws an error.
 * Continue the update process.
 * If status() != "ready" it throws an error.
 * Continue the update process.
 * @param {!__WebpackModuleApi.AcceptOptions|function(!Error, !Array<(string|number)>): void} options_or_callback
 * @param {function(!Error, !Array<(string|number)>): void=} callback
 * @return {void}
 */
__WebpackModuleApi.Hot.prototype.apply = function(options_or_callback, callback) {};

/**
 * Return one of idle, check, watch, watch-delay, prepare, ready, dispose, apply, abort or fail.
 * Register a callback on status change.
 * @param {function(string): void=} callback
 * @return {string|void}
 */
__WebpackModuleApi.Hot.prototype.status = function(callback) {};

/**
 * Register a callback on status change.
 * @param {function(string): void} callback
 * @return {void}
 */
__WebpackModuleApi.Hot.prototype.addStatusHandler = function(callback) {};

/**
 * Remove a registered status change handler.
 * @param {function(string): void} callback
 * @return {void}
 */
__WebpackModuleApi.Hot.prototype.removeStatusHandler = function(callback) {};
/**
 * @record
 * @struct
 */
__WebpackModuleApi.AcceptOptions = function() {};
 /** @type {boolean} */
__WebpackModuleApi.AcceptOptions.prototype.ignoreUnaccepted;
 /** @type {boolean} */
__WebpackModuleApi.AcceptOptions.prototype.autoApply;
/**
 * @extends {__WebpackModuleApi.RequireFunction}
 * @record
 * @struct
 */
function NodeRequire() {}
 /** @type {!NodeRequire} */
var require;
 /** @type {string} */
var __resourceQuery;
 /** @type {string} */
var __webpack_public_path__;
 /** @type {?} */
var __webpack_require__;
 /** @type {function(?, function(function(string): ?): void): void} */
var __webpack_chunk_load__;
 /** @type {!Array<?>} */
var __webpack_modules__;
 /** @type {?} */
var __webpack_hash__;
 /** @type {?} */
var __non_webpack_require__;
 /** @type {boolean} */
var DEBUG;
/**
 * @extends {__WebpackModuleApi.Module}
 * @record
 * @struct
 */
function NodeModule() {}
