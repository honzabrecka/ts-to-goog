/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/ace/index.d.ts:
/** @const */
var AceAjax = {};
/**
 * @record
 * @struct
 */
AceAjax.Delta = function() {};
 /** @type {string} */
AceAjax.Delta.prototype.action;
 /** @type {?} */
AceAjax.Delta.prototype.range;
 /** @type {string} */
AceAjax.Delta.prototype.text;
 /** @type {!Array<string>} */
AceAjax.Delta.prototype.lines;
/**
 * @record
 * @struct
 */
AceAjax.EditorCommand = function() {};
 /** @type {string} */
AceAjax.EditorCommand.prototype.name;
 /** @type {?} */
AceAjax.EditorCommand.prototype.bindKey;
 /** @type {!Function} */
AceAjax.EditorCommand.prototype.exec;
 /** @type {boolean} */
AceAjax.EditorCommand.prototype.readOnly;
/**
 * @record
 * @struct
 */
AceAjax.CommandManager = function() {};
 /** @type {?} */
AceAjax.CommandManager.prototype.byName;
 /** @type {?} */
AceAjax.CommandManager.prototype.commands;
 /** @type {string} */
AceAjax.CommandManager.prototype.platform;

/**
 * @param {!Array<!AceAjax.EditorCommand>} commands
 * @return {void}
 */
AceAjax.CommandManager.prototype.addCommands = function(commands) {};

/**
 * @param {!AceAjax.EditorCommand} command
 * @return {void}
 */
AceAjax.CommandManager.prototype.addCommand = function(command) {};

/**
 * @param {string} name
 * @param {?} editor
 * @param {?} args
 * @return {void}
 */
AceAjax.CommandManager.prototype.exec = function(name, editor, args) {};
/**
 * @record
 * @struct
 */
AceAjax.Annotation = function() {};
 /** @type {number} */
AceAjax.Annotation.prototype.row;
 /** @type {number} */
AceAjax.Annotation.prototype.column;
 /** @type {string} */
AceAjax.Annotation.prototype.text;
 /** @type {string} */
AceAjax.Annotation.prototype.type;
/**
 * @record
 * @struct
 */
AceAjax.TokenInfo = function() {};
 /** @type {string} */
AceAjax.TokenInfo.prototype.value;
/**
 * @record
 * @struct
 */
AceAjax.Position = function() {};
 /** @type {number} */
AceAjax.Position.prototype.row;
 /** @type {number} */
AceAjax.Position.prototype.column;
/**
 * @record
 * @struct
 */
AceAjax.KeyBinding = function() {};

/**
 * @param {?} kb
 * @return {void}
 */
AceAjax.KeyBinding.prototype.setDefaultHandler = function(kb) {};

/**
 * @param {?} kb
 * @return {void}
 */
AceAjax.KeyBinding.prototype.setKeyboardHandler = function(kb) {};

/**
 * @param {?} kb
 * @param {?} pos
 * @return {void}
 */
AceAjax.KeyBinding.prototype.addKeyboardHandler = function(kb, pos) {};

/**
 * @param {?} kb
 * @return {boolean}
 */
AceAjax.KeyBinding.prototype.removeKeyboardHandler = function(kb) {};

/**
 * @return {?}
 */
AceAjax.KeyBinding.prototype.getKeyboardHandler = function() {};

/**
 * @param {?} e
 * @param {?} hashId
 * @param {?} keyCode
 * @return {void}
 */
AceAjax.KeyBinding.prototype.onCommandKey = function(e, hashId, keyCode) {};

/**
 * @param {?} text
 * @return {void}
 */
AceAjax.KeyBinding.prototype.onTextInput = function(text) {};
/**
 * @record
 * @struct
 */
AceAjax.TextMode = function() {};

/**
 * @return {?}
 */
AceAjax.TextMode.prototype.getTokenizer = function() {};

/**
 * @param {?} state
 * @param {?} doc
 * @param {?} startRow
 * @param {?} endRow
 * @return {void}
 */
AceAjax.TextMode.prototype.toggleCommentLines = function(state, doc, startRow, endRow) {};

/**
 * @param {?} state
 * @param {?} line
 * @param {?} tab
 * @return {string}
 */
AceAjax.TextMode.prototype.getNextLineIndent = function(state, line, tab) {};

/**
 * @param {?} state
 * @param {?} line
 * @param {?} input
 * @return {boolean}
 */
AceAjax.TextMode.prototype.checkOutdent = function(state, line, input) {};

/**
 * @param {?} state
 * @param {?} doc
 * @param {?} row
 * @return {void}
 */
AceAjax.TextMode.prototype.autoOutdent = function(state, doc, row) {};

/**
 * @param {?} session
 * @return {?}
 */
AceAjax.TextMode.prototype.createWorker = function(session) {};

/**
 * @param {?} mapping
 * @return {void}
 */
AceAjax.TextMode.prototype.createModeDelegates = function(mapping) {};

/**
 * @param {?} state
 * @param {?} action
 * @param {?} editor
 * @param {?} session
 * @param {?} param
 * @return {?}
 */
AceAjax.TextMode.prototype.transformAction = function(state, action, editor, session, param) {};
/**
 * @record
 * @struct
 */
AceAjax.Ace = function() {};

/**
 * Provides access to require in packed noconflict mode
 * @param {string} moduleName 
 * 
 * @return {?}
 */
AceAjax.Ace.prototype.require = function(moduleName) {};

/**
 * Embeds the Ace editor into the DOM, at the element provided by `el`.
 * Embeds the Ace editor into the DOM, at the element provided by `el`.
 * @param {string|!HTMLElement} el Either the id of an element, or the element itself
 * 
 * @return {?}
 */
AceAjax.Ace.prototype.edit = function(el) {};

/**
 * Creates a new [[EditSession]], and returns the associated [[Document]].
 * Creates a new [[EditSession]], and returns the associated [[Document]].
 * @param {?|string} text {:textParam}
 * @param {!AceAjax.TextMode} mode {:modeParam}
 * 
 * @return {!AceAjax.IEditSession}
 */
AceAjax.Ace.prototype.createEditSession = function(text, mode) {};
/**
 * @record
 * @struct
 */
AceAjax.Anchor = function() {};

/**
 * @param {string} event
 * @param {function(?): ?} fn
 * @return {void}
 */
AceAjax.Anchor.prototype.on = function(event, fn) {};

/**
 * Returns an object identifying the `row` and `column` position of the current anchor.
 * 
 * @return {!AceAjax.Position}
 */
AceAjax.Anchor.prototype.getPosition = function() {};

/**
 * Returns the current document.
 * 
 * @return {?}
 */
AceAjax.Anchor.prototype.getDocument = function() {};

/**
 * Fires whenever the anchor position changes.
 * Both of these objects have a `row` and `column` property corresponding to the position.
 * Events that can trigger this function include [[Anchor.setPosition `setPosition()`]].
 * @param {?} e An object containing information about the anchor position. It has two properties:
 * - `old`: An object describing the old Anchor position
 * - `value`: An object describing the new Anchor position
 * 
 * @return {void}
 */
AceAjax.Anchor.prototype.onChange = function(e) {};

/**
 * Sets the anchor position to the specified row and column. If `noClip` is `true`, the position is not clipped.
 * @param {number} row The row index to move the anchor to
 * @param {number} column The column index to move the anchor to
 * @param {boolean} noClip Identifies if you want the position to be clipped
 * 
 * @return {void}
 */
AceAjax.Anchor.prototype.setPosition = function(row, column, noClip) {};

/**
 * When called, the `'change'` event listener is removed.
 * 
 * @return {void}
 */
AceAjax.Anchor.prototype.detach = function() {};
 /** @type {function(new: (?), ?, number, number): ?} */
AceAjax.Anchor;
/**
 * @record
 * @struct
 */
AceAjax.BackgroundTokenizer = function() {};
 /** @type {!Array<?>} */
AceAjax.BackgroundTokenizer.prototype.states;

/**
 * Sets a new tokenizer for this object.
 * @param {?} tokenizer The new tokenizer to use
 * 
 * @return {void}
 */
AceAjax.BackgroundTokenizer.prototype.setTokenizer = function(tokenizer) {};

/**
 * Sets a new document to associate with this object.
 * @param {?} doc The new document to associate with
 * 
 * @return {void}
 */
AceAjax.BackgroundTokenizer.prototype.setDocument = function(doc) {};

/**
 * Emits the `'update'` event. `firstRow` and `lastRow` are used to define the boundaries of the region to be updated.
 * @param {number} firstRow The starting row region
 * @param {number} lastRow The final row region
 * 
 * @return {void}
 */
AceAjax.BackgroundTokenizer.prototype.fireUpdateEvent = function(firstRow, lastRow) {};

/**
 * Starts tokenizing at the row indicated.
 * @param {number} startRow The row to start at
 * 
 * @return {void}
 */
AceAjax.BackgroundTokenizer.prototype.start = function(startRow) {};

/**
 * Stops tokenizing.
 * 
 * @return {void}
 */
AceAjax.BackgroundTokenizer.prototype.stop = function() {};

/**
 * Gives list of tokens of the row. (tokens are cached)
 * @param {number} row The row to get tokens at
 * 
 * @return {!Array<!AceAjax.TokenInfo>}
 */
AceAjax.BackgroundTokenizer.prototype.getTokens = function(row) {};

/**
 * [Returns the state of tokenization at the end of a row.]{: #BackgroundTokenizer.getState}
 * @param {number} row The row to get state at
 * 
 * @return {string}
 */
AceAjax.BackgroundTokenizer.prototype.getState = function(row) {};
 /** @type {function(new: (?), ?, ?): ?} */
AceAjax.BackgroundTokenizer;
/**
 * @record
 * @struct
 */
AceAjax.Document = function() {};

/**
 * @param {string} event
 * @param {function(?): ?} fn
 * @return {void}
 */
AceAjax.Document.prototype.on = function(event, fn) {};

/**
 * Replaces all the lines in the current `Document` with the value of `text`.
 * @param {string} text The text to use
 * 
 * @return {void}
 */
AceAjax.Document.prototype.setValue = function(text) {};

/**
 * Returns all the lines in the document as a single string, split by the new line character.
 * 
 * @return {string}
 */
AceAjax.Document.prototype.getValue = function() {};

/**
 * Creates a new `Anchor` to define a floating point in the document.
 * @param {number} row The row number to use
 * @param {number} column The column number to use
 * 
 * @return {void}
 */
AceAjax.Document.prototype.createAnchor = function(row, column) {};

/**
 * Returns the newline character that's being used, depending on the value of `newLineMode`.
 * 
 * @return {string}
 */
AceAjax.Document.prototype.getNewLineCharacter = function() {};

/**
 * [Sets the new line mode.]{: #Document.setNewLineMode.desc}
 * @param {string} newLineMode [The newline mode to use; can be either `windows`, `unix`, or `auto`]{: #Document.setNewLineMode.param}
 * 
 * @return {void}
 */
AceAjax.Document.prototype.setNewLineMode = function(newLineMode) {};

/**
 * [Returns the type of newlines being used; either `windows`, `unix`, or `auto`]{: #Document.getNewLineMode}
 * 
 * @return {string}
 */
AceAjax.Document.prototype.getNewLineMode = function() {};

/**
 * Returns `true` if `text` is a newline character (either `\r\n`, `\r`, or `\n`).
 * @param {string} text The text to check
 * 
 * @return {boolean}
 */
AceAjax.Document.prototype.isNewLine = function(text) {};

/**
 * Returns a verbatim copy of the given line as it is in the document
 * @param {number} row The row index to retrieve
 * 
 * @return {string}
 */
AceAjax.Document.prototype.getLine = function(row) {};

/**
 * Returns an array of strings of the rows between `firstRow` and `lastRow`. This function is inclusive of `lastRow`.
 * @param {number} firstRow The first row index to retrieve
 * @param {number} lastRow The final row index to retrieve
 * 
 * @return {!Array<string>}
 */
AceAjax.Document.prototype.getLines = function(firstRow, lastRow) {};

/**
 * Returns all lines in the document as string array. Warning: The caller should not modify this array!
 * 
 * @return {!Array<string>}
 */
AceAjax.Document.prototype.getAllLines = function() {};

/**
 * Returns the number of rows in the document.
 * 
 * @return {number}
 */
AceAjax.Document.prototype.getLength = function() {};

/**
 * [Given a range within the document, this function returns all the text within that range as a single string.]{: #Document.getTextRange.desc}
 * @param {?} range The range to work with
 * 
 * @return {string}
 */
AceAjax.Document.prototype.getTextRange = function(range) {};

/**
 * Inserts a block of `text` and the indicated `position`.
 * @param {!AceAjax.Position} position The position to start inserting at
 * @param {string} text A chunk of text to insert
 * 
 * @return {?}
 */
AceAjax.Document.prototype.insert = function(position, text) {};

/**
 * Inserts the elements in `lines` into the document, starting at the row index given by `row`. This method also triggers the `'change'` event.
 * @param {number} row The index of the row to insert at
 * @param {!Array<string>} lines An array of strings
 * 
 * @return {?}
 */
AceAjax.Document.prototype.insertLines = function(row, lines) {};

/**
 * Inserts a new line into the document at the current row's `position`. This method also triggers the `'change'` event.
 * @param {!AceAjax.Position} position The position to insert at
 * 
 * @return {?}
 */
AceAjax.Document.prototype.insertNewLine = function(position) {};

/**
 * Inserts `text` into the `position` at the current row. This method also triggers the `'change'` event.
 * @param {?} position The position to insert at
 * @param {string} text A chunk of text
 * 
 * @return {?}
 */
AceAjax.Document.prototype.insertInLine = function(position, text) {};

/**
 * Removes the `range` from the document.
 * @param {?} range A specified Range to remove
 * 
 * @return {?}
 */
AceAjax.Document.prototype.remove = function(range) {};

/**
 * Removes the specified columns from the `row`. This method also triggers the `'change'` event.
 * @param {number} row The row to remove from
 * @param {number} startColumn The column to start removing at
 * @param {number} endColumn The column to stop removing at
 * 
 * @return {?}
 */
AceAjax.Document.prototype.removeInLine = function(row, startColumn, endColumn) {};

/**
 * Removes a range of full lines. This method also triggers the `'change'` event.
 * @param {number} firstRow The first row to be removed
 * @param {number} lastRow The last row to be removed
 * 
 * @return {!Array<string>}
 */
AceAjax.Document.prototype.removeLines = function(firstRow, lastRow) {};

/**
 * Removes the new line between `row` and the row immediately following it. This method also triggers the `'change'` event.
 * @param {number} row The row to check
 * 
 * @return {void}
 */
AceAjax.Document.prototype.removeNewLine = function(row) {};

/**
 * Replaces a range in the document with the new `text`.
 * @param {?} range A specified Range to replace
 * @param {string} text The new text to use as a replacement
 * 
 * @return {?}
 */
AceAjax.Document.prototype.replace = function(range, text) {};

/**
 * Applies all the changes previously accumulated. These can be either `'includeText'`, `'insertLines'`, `'removeText'`, and `'removeLines'`.
 * 
 * @param {!Array<!AceAjax.Delta>} deltas
 * @return {void}
 */
AceAjax.Document.prototype.applyDeltas = function(deltas) {};

/**
 * Reverts any changes previously applied. These can be either `'includeText'`, `'insertLines'`, `'removeText'`, and `'removeLines'`.
 * 
 * @param {!Array<!AceAjax.Delta>} deltas
 * @return {void}
 */
AceAjax.Document.prototype.revertDeltas = function(deltas) {};

/**
 * Converts an index position in a document to a `{row, column}` object.
 * Index refers to the "absolute position" of a character in the document. For example:
 * ```javascript
 * var x = 0; // 10 characters, plus one for newline
 * var y = -1;
 * ```
 * Here, `y` is an index 15: 11 characters for the first row, and 5 characters until `y` in the second.
 * @param {number} index An index to convert
 * @param {number} startRow
 * @return {!AceAjax.Position}
 */
AceAjax.Document.prototype.indexToPosition = function(index, startRow) {};

/**
 * Converts the `{row, column}` position in a document to the character's index.
 * Index refers to the "absolute position" of a character in the document. For example:
 * ```javascript
 * var x = 0; // 10 characters, plus one for newline
 * var y = -1;
 * ```
 * Here, `y` is an index 15: 11 characters for the first row, and 5 characters until `y` in the second.
 * @param {!AceAjax.Position} pos The `{row, column}` to convert
 * @param {number} startRow
 * @return {number}
 */
AceAjax.Document.prototype.positionToIndex = function(pos, startRow) {};
 /** @type {function(new: (?), string): ?} */
AceAjax.Document;
/**
 * @record
 * @struct
 */
AceAjax.IEditSession = function() {};
 /** @type {?} */
AceAjax.IEditSession.prototype.selection;
 /** @type {?} */
AceAjax.IEditSession.prototype.bgTokenizer;
 /** @type {?} */
AceAjax.IEditSession.prototype.doc;

/**
 * @param {string} event
 * @param {function(?): ?} fn
 * @return {void}
 */
AceAjax.IEditSession.prototype.on = function(event, fn) {};

/**
 * @param {!AceAjax.Position} position
 * @return {void}
 */
AceAjax.IEditSession.prototype.findMatchingBracket = function(position) {};

/**
 * @param {string} text
 * @param {?} range
 * @return {void}
 */
AceAjax.IEditSession.prototype.addFold = function(text, range) {};

/**
 * @param {number} row
 * @param {number} column
 * @return {?}
 */
AceAjax.IEditSession.prototype.getFoldAt = function(row, column) {};

/**
 * @param {?} arg
 * @return {void}
 */
AceAjax.IEditSession.prototype.removeFold = function(arg) {};

/**
 * @param {?} arg
 * @return {void}
 */
AceAjax.IEditSession.prototype.expandFold = function(arg) {};

/**
 * @param {number=} startRow
 * @param {number=} endRow
 * @param {number=} depth
 * @return {void}
 */
AceAjax.IEditSession.prototype.foldAll = function(startRow, endRow, depth) {};

/**
 * @param {?} arg1
 * @param {boolean} arg2
 * @return {void}
 */
AceAjax.IEditSession.prototype.unfold = function(arg1, arg2) {};

/**
 * @param {number} row
 * @param {number} column
 * @return {void}
 */
AceAjax.IEditSession.prototype.screenToDocumentColumn = function(row, column) {};

/**
 * @param {?} foldLine
 * @param {number} docRow
 * @param {number} docColumn
 * @return {?}
 */
AceAjax.IEditSession.prototype.getFoldDisplayLine = function(foldLine, docRow, docColumn) {};

/**
 * @param {?} range
 * @return {?}
 */
AceAjax.IEditSession.prototype.getFoldsInRange = function(range) {};

/**
 * @param {string} text
 * @return {void}
 */
AceAjax.IEditSession.prototype.highlight = function(text) {};

/**
 * Sets the `EditSession` to point to a new `Document`. If a `BackgroundTokenizer` exists, it also points to `doc`.
 * @param {?} doc The new `Document` to use
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.setDocument = function(doc) {};

/**
 * Returns the `Document` associated with this session.
 * 
 * @return {?}
 */
AceAjax.IEditSession.prototype.getDocument = function() {};

/**
 * undefined
 * @param {number} row The row to work with
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.$resetRowCache = function(row) {};

/**
 * Sets the session text.
 * @param {string} text The new text to place
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.setValue = function(text) {};

/**
 * @param {string} mode
 * @return {void}
 */
AceAjax.IEditSession.prototype.setMode = function(mode) {};

/**
 * Returns the current [[Document `Document`]] as a string.
 * 
 * @return {string}
 */
AceAjax.IEditSession.prototype.getValue = function() {};

/**
 * Returns the string of the current selection.
 * 
 * @return {?}
 */
AceAjax.IEditSession.prototype.getSelection = function() {};

/**
 * {:BackgroundTokenizer.getState}
 * @param {number} row The row to start at
 * 
 * @return {string}
 */
AceAjax.IEditSession.prototype.getState = function(row) {};

/**
 * Starts tokenizing at the row indicated. Returns a list of objects of the tokenized rows.
 * @param {number} row The row to start at
 * 
 * @return {!Array<!AceAjax.TokenInfo>}
 */
AceAjax.IEditSession.prototype.getTokens = function(row) {};

/**
 * Returns an object indicating the token at the current row. The object has two properties: `index` and `start`.
 * @param {number} row The row number to retrieve from
 * @param {number} column The column number to retrieve from
 * 
 * @return {!AceAjax.TokenInfo}
 */
AceAjax.IEditSession.prototype.getTokenAt = function(row, column) {};

/**
 * Sets the undo manager.
 * @param {?} undoManager The new undo manager
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.setUndoManager = function(undoManager) {};

/**
 * Returns the current undo manager.
 * 
 * @return {?}
 */
AceAjax.IEditSession.prototype.getUndoManager = function() {};

/**
 * Returns the current value for tabs. If the user is using soft tabs, this will be a series of spaces (defined by [[EditSession.getTabSize `getTabSize()`]]): void; otherwise it's simply `'\t'`.
 * 
 * @return {string}
 */
AceAjax.IEditSession.prototype.getTabString = function() {};

/**
 * Pass `true` to enable the use of soft tabs. Soft tabs means you're using spaces instead of the tab character (`'\t'`).
 * @param {boolean} useSoftTabs Value indicating whether or not to use soft tabs
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.setUseSoftTabs = function(useSoftTabs) {};

/**
 * Returns `true` if soft tabs are being used, `false` otherwise.
 * 
 * @return {boolean}
 */
AceAjax.IEditSession.prototype.getUseSoftTabs = function() {};

/**
 * Set the number of spaces that define a soft tab; for example, passing in `4` transforms the soft tabs to be equivalent to four spaces. This function also emits the `changeTabSize` event.
 * @param {number} tabSize The new tab size
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.setTabSize = function(tabSize) {};

/**
 * Returns the current tab size.
 * 
 * @return {number}
 */
AceAjax.IEditSession.prototype.getTabSize = function() {};

/**
 * Returns `true` if the character at the position is a soft tab.
 * @param {?} position The position to check
 * 
 * @return {boolean}
 */
AceAjax.IEditSession.prototype.isTabStop = function(position) {};

/**
 * Pass in `true` to enable overwrites in your session, or `false` to disable.
 * If overwrites is enabled, any text you enter will type over any text after it. If the value of `overwrite` changes, this function also emites the `changeOverwrite` event.
 * @param {boolean} overwrite Defines wheter or not to set overwrites
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.setOverwrite = function(overwrite) {};

/**
 * Returns `true` if overwrites are enabled; `false` otherwise.
 * 
 * @return {boolean}
 */
AceAjax.IEditSession.prototype.getOverwrite = function() {};

/**
 * Sets the value of overwrite to the opposite of whatever it currently is.
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.toggleOverwrite = function() {};

/**
 * Adds `className` to the `row`, to be used for CSS stylings and whatnot.
 * @param {number} row The row number
 * @param {string} className The class to add
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.addGutterDecoration = function(row, className) {};

/**
 * Removes `className` from the `row`.
 * @param {number} row The row number
 * @param {string} className The class to add
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.removeGutterDecoration = function(row, className) {};

/**
 * Returns an array of numbers, indicating which rows have breakpoints.
 * 
 * @return {!Array<number>}
 */
AceAjax.IEditSession.prototype.getBreakpoints = function() {};

/**
 * Sets a breakpoint on every row number given by `rows`. This function also emites the `'changeBreakpoint'` event.
 * @param {!Array<?>} rows An array of row indices
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.setBreakpoints = function(rows) {};

/**
 * Removes all breakpoints on the rows. This function also emites the `'changeBreakpoint'` event.
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.clearBreakpoints = function() {};

/**
 * Sets a breakpoint on the row number given by `rows`. This function also emites the `'changeBreakpoint'` event.
 * @param {number} row A row index
 * @param {string} className Class of the breakpoint
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.setBreakpoint = function(row, className) {};

/**
 * Removes a breakpoint on the row number given by `rows`. This function also emites the `'changeBreakpoint'` event.
 * @param {number} row A row index
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.clearBreakpoint = function(row) {};

/**
 * Adds a new marker to the given `Range`. If `inFront` is `true`, a front marker is defined, and the `'changeFrontMarker'` event fires; otherwise, the `'changeBackMarker'` event fires.
 * Adds a new marker to the given `Range`. If `inFront` is `true`, a front marker is defined, and the `'changeFrontMarker'` event fires; otherwise, the `'changeBackMarker'` event fires.
 * @param {?} range Define the range of the marker
 * @param {string} clazz Set the CSS class for the marker
 * @param {!Function|string} type Identify the type of the marker
 * @param {boolean} inFront Set to `true` to establish a front marker
 * 
 * @return {number}
 */
AceAjax.IEditSession.prototype.addMarker = function(range, clazz, type, inFront) {};

/**
 * Adds a dynamic marker to the session.
 * @param {?} marker object with update method
 * @param {boolean} inFront Set to `true` to establish a front marker
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.addDynamicMarker = function(marker, inFront) {};

/**
 * Removes the marker with the specified ID. If this marker was in front, the `'changeFrontMarker'` event is emitted. If the marker was in the back, the `'changeBackMarker'` event is emitted.
 * @param {number} markerId A number representing a marker
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.removeMarker = function(markerId) {};

/**
 * Returns an array containing the IDs of all the markers, either front or back.
 * @param {boolean} inFront If `true`, indicates you only want front markers; `false` indicates only back markers
 * 
 * @return {!Array<?>}
 */
AceAjax.IEditSession.prototype.getMarkers = function(inFront) {};

/**
 * Sets annotations for the `EditSession`. This functions emits the `'changeAnnotation'` event.
 * @param {!Array<!AceAjax.Annotation>} annotations A list of annotations
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.setAnnotations = function(annotations) {};

/**
 * Returns the annotations for the `EditSession`.
 * 
 * @return {?}
 */
AceAjax.IEditSession.prototype.getAnnotations = function() {};

/**
 * Clears all the annotations for this session. This function also triggers the `'changeAnnotation'` event.
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.clearAnnotations = function() {};

/**
 * If `text` contains either the newline (`\n`) or carriage-return ('\r') characters, `$autoNewLine` stores that value.
 * @param {string} text A block of text
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.$detectNewLine = function(text) {};

/**
 * Given a starting row and column, this method returns the `Range` of the first word boundary it finds.
 * @param {number} row The row to start at
 * @param {number} column The column to start at
 * 
 * @return {?}
 */
AceAjax.IEditSession.prototype.getWordRange = function(row, column) {};

/**
 * Gets the range of a word, including its right whitespace.
 * @param {number} row The row number to start from
 * @param {number} column The column number to start from
 * 
 * @return {?}
 */
AceAjax.IEditSession.prototype.getAWordRange = function(row, column) {};

/**
 * {:Document.setNewLineMode.desc}
 * @param {string} newLineMode {:Document.setNewLineMode.param}
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.setNewLineMode = function(newLineMode) {};

/**
 * Returns the current new line mode.
 * 
 * @return {string}
 */
AceAjax.IEditSession.prototype.getNewLineMode = function() {};

/**
 * Identifies if you want to use a worker for the `EditSession`.
 * @param {boolean} useWorker Set to `true` to use a worker
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.setUseWorker = function(useWorker) {};

/**
 * Returns `true` if workers are being used.
 * 
 * @return {boolean}
 */
AceAjax.IEditSession.prototype.getUseWorker = function() {};

/**
 * Reloads all the tokens on the current session. This function calls [[BackgroundTokenizer.start `BackgroundTokenizer.start ()`]] to all the rows; it also emits the `'tokenizerUpdate'` event.
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.onReloadTokenizer = function() {};

/**
 * Sets a new text mode for the `EditSession`. This method also emits the `'changeMode'` event. If a [[BackgroundTokenizer `BackgroundTokenizer`]] is set, the `'tokenizerUpdate'` event is also emitted.
 * @param {!AceAjax.TextMode} mode Set a new text mode
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.$mode = function(mode) {};

/**
 * Returns the current text mode.
 * 
 * @return {!AceAjax.TextMode}
 */
AceAjax.IEditSession.prototype.getMode = function() {};

/**
 * This function sets the scroll top value. It also emits the `'changeScrollTop'` event.
 * @param {number} scrollTop The new scroll top value
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.setScrollTop = function(scrollTop) {};

/**
 * [Returns the value of the distance between the top of the editor and the topmost part of the visible content.]{: #EditSession.getScrollTop}
 * 
 * @return {number}
 */
AceAjax.IEditSession.prototype.getScrollTop = function() {};

/**
 * [Sets the value of the distance between the left of the editor and the leftmost part of the visible content.]{: #EditSession.setScrollLeft}
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.setScrollLeft = function() {};

/**
 * [Returns the value of the distance between the left of the editor and the leftmost part of the visible content.]{: #EditSession.getScrollLeft}
 * 
 * @return {number}
 */
AceAjax.IEditSession.prototype.getScrollLeft = function() {};

/**
 * Returns the width of the screen.
 * 
 * @return {number}
 */
AceAjax.IEditSession.prototype.getScreenWidth = function() {};

/**
 * Returns a verbatim copy of the given line as it is in the document
 * @param {number} row The row to retrieve from
 * 
 * @return {string}
 */
AceAjax.IEditSession.prototype.getLine = function(row) {};

/**
 * Returns an array of strings of the rows between `firstRow` and `lastRow`. This function is inclusive of `lastRow`.
 * @param {number} firstRow The first row index to retrieve
 * @param {number} lastRow The final row index to retrieve
 * 
 * @return {!Array<string>}
 */
AceAjax.IEditSession.prototype.getLines = function(firstRow, lastRow) {};

/**
 * Returns the number of rows in the document.
 * 
 * @return {number}
 */
AceAjax.IEditSession.prototype.getLength = function() {};

/**
 * {:Document.getTextRange.desc}
 * @param {?} range The range to work with
 * 
 * @return {string}
 */
AceAjax.IEditSession.prototype.getTextRange = function(range) {};

/**
 * Inserts a block of `text` and the indicated `position`.
 * @param {!AceAjax.Position} position The position {row, column} to start inserting at
 * @param {string} text A chunk of text to insert
 * 
 * @return {?}
 */
AceAjax.IEditSession.prototype.insert = function(position, text) {};

/**
 * Removes the `range` from the document.
 * @param {?} range A specified Range to remove
 * 
 * @return {?}
 */
AceAjax.IEditSession.prototype.remove = function(range) {};

/**
 * Reverts previous changes to your document.
 * @param {!Array<?>} deltas An array of previous changes
 * @param {boolean} dontSelect [If `true`, doesn't select the range of where the change occured]{: #dontSelect}
 * 
 * @return {?}
 */
AceAjax.IEditSession.prototype.undoChanges = function(deltas, dontSelect) {};

/**
 * Re-implements a previously undone change to your document.
 * @param {!Array<?>} deltas An array of previous changes
 * @param {boolean} dontSelect {:dontSelect}
 * 
 * @return {?}
 */
AceAjax.IEditSession.prototype.redoChanges = function(deltas, dontSelect) {};

/**
 * Enables or disables highlighting of the range where an undo occured.
 * @param {boolean} enable If `true`, selects the range of the reinserted change
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.setUndoSelect = function(enable) {};

/**
 * Replaces a range in the document with the new `text`.
 * @param {?} range A specified Range to replace
 * @param {string} text The new text to use as a replacement
 * 
 * @return {?}
 */
AceAjax.IEditSession.prototype.replace = function(range, text) {};

/**
 * Moves a range of text from the given range to the given position. `toPosition` is an object that looks like this:
 * ```json
 * { row: newRowLocation, column: newColumnLocation }
 * ```
 * @param {?} fromRange The range of text you want moved within the document
 * @param {?} toPosition The location (row and column) where you want to move the text to
 * 
 * @return {?}
 */
AceAjax.IEditSession.prototype.moveText = function(fromRange, toPosition) {};

/**
 * Indents all the rows, from `startRow` to `endRow` (inclusive), by prefixing each row with the token in `indentString`.
 * If `indentString` contains the `'\t'` character, it's replaced by whatever is defined by [[EditSession.getTabString `getTabString()`]].
 * @param {number} startRow Starting row
 * @param {number} endRow Ending row
 * @param {string} indentString The indent token
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.indentRows = function(startRow, endRow, indentString) {};

/**
 * Outdents all the rows defined by the `start` and `end` properties of `range`.
 * @param {?} range A range of rows
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.outdentRows = function(range) {};

/**
 * Shifts all the lines in the document up one, starting from `firstRow` and ending at `lastRow`.
 * @param {number} firstRow The starting row to move up
 * @param {number} lastRow The final row to move up
 * 
 * @return {number}
 */
AceAjax.IEditSession.prototype.moveLinesUp = function(firstRow, lastRow) {};

/**
 * Shifts all the lines in the document down one, starting from `firstRow` and ending at `lastRow`.
 * @param {number} firstRow The starting row to move down
 * @param {number} lastRow The final row to move down
 * 
 * @return {number}
 */
AceAjax.IEditSession.prototype.moveLinesDown = function(firstRow, lastRow) {};

/**
 * Duplicates all the text between `firstRow` and `lastRow`.
 * @param {number} firstRow The starting row to duplicate
 * @param {number} lastRow The final row to duplicate
 * 
 * @return {number}
 */
AceAjax.IEditSession.prototype.duplicateLines = function(firstRow, lastRow) {};

/**
 * Sets whether or not line wrapping is enabled. If `useWrapMode` is different than the current value, the `'changeWrapMode'` event is emitted.
 * @param {boolean} useWrapMode Enable (or disable) wrap mode
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.setUseWrapMode = function(useWrapMode) {};

/**
 * Returns `true` if wrap mode is being used; `false` otherwise.
 * 
 * @return {boolean}
 */
AceAjax.IEditSession.prototype.getUseWrapMode = function() {};

/**
 * Sets the boundaries of wrap. Either value can be `null` to have an unconstrained wrap, or, they can be the same number to pin the limit. If the wrap limits for `min` or `max` are different, this method also emits the `'changeWrapMode'` event.
 * @param {number} min The minimum wrap value (the left side wrap)
 * @param {number} max The maximum wrap value (the right side wrap)
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.setWrapLimitRange = function(min, max) {};

/**
 * This should generally only be called by the renderer when a resize is detected.
 * @param {number} desiredLimit The new wrap limit
 * 
 * @return {boolean}
 */
AceAjax.IEditSession.prototype.adjustWrapLimit = function(desiredLimit) {};

/**
 * Returns the value of wrap limit.
 * 
 * @return {number}
 */
AceAjax.IEditSession.prototype.getWrapLimit = function() {};

/**
 * Returns an object that defines the minimum and maximum of the wrap limit; it looks something like this:
 * { min: wrapLimitRange_min, max: wrapLimitRange_max }
 * 
 * @return {?}
 */
AceAjax.IEditSession.prototype.getWrapLimitRange = function() {};

/**
 * Given a string, returns an array of the display characters, including tabs and spaces.
 * @param {string} str The string to check
 * @param {number} offset The value to start at
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.$getDisplayTokens = function(str, offset) {};

/**
 * Calculates the width of the string `str` on the screen while assuming that the string starts at the first column on the screen.
 * @param {string} str The string to calculate the screen width of
 * @param {number} maxScreenColumn
 * @param {number} screenColumn 
 * 
 * @return {!Array<number>}
 */
AceAjax.IEditSession.prototype.$getStringScreenWidth = function(str, maxScreenColumn, screenColumn) {};

/**
 * Returns number of screenrows in a wrapped line.
 * @param {number} row The row number to check
 * 
 * @return {number}
 */
AceAjax.IEditSession.prototype.getRowLength = function(row) {};

/**
 * Returns the position (on screen) for the last character in the provided screen row.
 * @param {number} screenRow The screen row to check
 * 
 * @return {number}
 */
AceAjax.IEditSession.prototype.getScreenLastRowColumn = function(screenRow) {};

/**
 * For the given document row and column, this returns the column position of the last screen row.
 * @param {number} docRow
 * @param {number} docColumn 
 * 
 * @return {number}
 */
AceAjax.IEditSession.prototype.getDocumentLastRowColumn = function(docRow, docColumn) {};

/**
 * For the given document row and column, this returns the document position of the last row.
 * @param {number} docRow
 * @param {number} docColumn 
 * 
 * @return {number}
 */
AceAjax.IEditSession.prototype.getDocumentLastRowColumnPosition = function(docRow, docColumn) {};

/**
 * For the given row, this returns the split data.
 * 
 * @return {string}
 */
AceAjax.IEditSession.prototype.getRowSplitData = function() {};

/**
 * The distance to the next tab stop at the specified screen column.
 * @param {number} screenColumn The screen column to check
 * 
 * @return {number}
 */
AceAjax.IEditSession.prototype.getScreenTabSize = function(screenColumn) {};

/**
 * Converts characters coordinates on the screen to characters coordinates within the document. [This takes into account code folding, word wrap, tab size, and any other visual modifications.]{: #conversionConsiderations}
 * @param {number} screenRow The screen row to check
 * @param {number} screenColumn The screen column to check
 * 
 * @return {?}
 */
AceAjax.IEditSession.prototype.screenToDocumentPosition = function(screenRow, screenColumn) {};

/**
 * Converts document coordinates to screen coordinates. {:conversionConsiderations}
 * @param {number} docRow The document row to check
 * @param {number} docColumn The document column to check
 * 
 * @return {?}
 */
AceAjax.IEditSession.prototype.documentToScreenPosition = function(docRow, docColumn) {};

/**
 * For the given document row and column, returns the screen column.
 * @param {number} row
 * @param {number} docColumn 
 * 
 * @return {number}
 */
AceAjax.IEditSession.prototype.documentToScreenColumn = function(row, docColumn) {};

/**
 * For the given document row and column, returns the screen row.
 * @param {number} docRow
 * @param {number} docColumn 
 * 
 * @return {void}
 */
AceAjax.IEditSession.prototype.documentToScreenRow = function(docRow, docColumn) {};

/**
 * Returns the length of the screen.
 * 
 * @return {number}
 */
AceAjax.IEditSession.prototype.getScreenLength = function() {};
 /** @type {function(new: (!AceAjax.IEditSession), string, !AceAjax.TextMode): ?} */
AceAjax.EditSession;
/**
 * @record
 * @struct
 */
AceAjax.Editor = function() {};
 /** @type {boolean} */
AceAjax.Editor.prototype.inMultiSelectMode;
 /** @type {!AceAjax.CommandManager} */
AceAjax.Editor.prototype.commands;
 /** @type {!AceAjax.IEditSession} */
AceAjax.Editor.prototype.session;
 /** @type {?} */
AceAjax.Editor.prototype.selection;
 /** @type {?} */
AceAjax.Editor.prototype.renderer;
 /** @type {!AceAjax.KeyBinding} */
AceAjax.Editor.prototype.keyBinding;
 /** @type {!HTMLElement} */
AceAjax.Editor.prototype.container;
 /** @type {number} */
AceAjax.Editor.prototype.$blockScrolling;

/**
 * @param {string} ev
 * @param {function(?): ?} callback
 * @return {void}
 */
AceAjax.Editor.prototype.on = function(ev, callback) {};

/**
 * @param {string} ev
 * @param {function(!AceAjax.EditorChangeEvent): ?|!Function} callback
 * @return {void}
 */
AceAjax.Editor.prototype.addEventListener = function(ev, callback) {};

/**
 * @param {string} ev
 * @param {!Function} callback
 * @return {void}
 */
AceAjax.Editor.prototype.off = function(ev, callback) {};

/**
 * @param {string} ev
 * @param {!Function} callback
 * @return {void}
 */
AceAjax.Editor.prototype.removeListener = function(ev, callback) {};

/**
 * @param {string} ev
 * @param {!Function} callback
 * @return {void}
 */
AceAjax.Editor.prototype.removeEventListener = function(ev, callback) {};

/**
 * @param {number} n
 * @return {void}
 */
AceAjax.Editor.prototype.selectMoreLines = function(n) {};

/**
 * @param {string} text
 * @return {void}
 */
AceAjax.Editor.prototype.onTextInput = function(text) {};

/**
 * @param {?} e
 * @param {?} hashId
 * @param {?} keyCode
 * @return {void}
 */
AceAjax.Editor.prototype.onCommandKey = function(e, hashId, keyCode) {};

/**
 * @param {?} e
 * @return {void}
 */
AceAjax.Editor.prototype.onSelectionChange = function(e) {};

/**
 * @param {?=} e
 * @return {void}
 */
AceAjax.Editor.prototype.onChangeMode = function(e) {};

/**
 * @param {string} command
 * @param {?=} args
 * @return {void}
 */
AceAjax.Editor.prototype.execCommand = function(command, args) {};

/**
 * Sets a Configuration Option
 * 
 * @param {?} optionName
 * @param {?} optionValue
 * @return {void}
 */
AceAjax.Editor.prototype.setOption = function(optionName, optionValue) {};

/**
 * Sets Configuration Options
 * 
 * @param {?} keyValueTuples
 * @return {void}
 */
AceAjax.Editor.prototype.setOptions = function(keyValueTuples) {};

/**
 * Get a Configuration Option
 * 
 * @param {?} name
 * @return {?}
 */
AceAjax.Editor.prototype.getOption = function(name) {};

/**
 * Get Configuration Options
 * 
 * @return {?}
 */
AceAjax.Editor.prototype.getOptions = function() {};

/**
 * Sets a new key handler, such as "vim" or "windows".
 * @param {string} keyboardHandler The new key handler
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.setKeyboardHandler = function(keyboardHandler) {};

/**
 * Returns the keyboard handler, such as "vim" or "windows".
 * 
 * @return {string}
 */
AceAjax.Editor.prototype.getKeyboardHandler = function() {};

/**
 * Sets a new editsession to use. This method also emits the `'changeSession'` event.
 * @param {!AceAjax.IEditSession} session The new session to use
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.setSession = function(session) {};

/**
 * Returns the current session being used.
 * 
 * @return {!AceAjax.IEditSession}
 */
AceAjax.Editor.prototype.getSession = function() {};

/**
 * Sets the current document to `val`.
 * @param {string} val The new value to set for the document
 * @param {number=} cursorPos Where to set the new value. `undefined` or 0 is selectAll, -1 is at the document start, and 1 is at the end
 * 
 * @return {string}
 */
AceAjax.Editor.prototype.setValue = function(val, cursorPos) {};

/**
 * Returns the current session's content.
 * 
 * @return {string}
 */
AceAjax.Editor.prototype.getValue = function() {};

/**
 * Returns the currently highlighted selection.
 * 
 * @return {?}
 */
AceAjax.Editor.prototype.getSelection = function() {};

/**
 * {:VirtualRenderer.onResize}
 * @param {boolean=} force If `true`, recomputes the size, even if the height and width haven't changed
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.resize = function(force) {};

/**
 * {:VirtualRenderer.setTheme}
 * @param {string} theme The path to a theme
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.setTheme = function(theme) {};

/**
 * {:VirtualRenderer.getTheme}
 * 
 * @return {string}
 */
AceAjax.Editor.prototype.getTheme = function() {};

/**
 * {:VirtualRenderer.setStyle}
 * @param {string} style A class name
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.setStyle = function(style) {};

/**
 * {:VirtualRenderer.unsetStyle}
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.unsetStyle = function() {};

/**
 * Set a new font size (in pixels) for the editor text.
 * @param {string} size A font size ( _e.g._ "12px")
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.setFontSize = function(size) {};

/**
 * Brings the current `textInput` into focus.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.focus = function() {};

/**
 * Returns `true` if the current `textInput` is in focus.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.isFocused = function() {};

/**
 * Blurs the current `textInput`.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.blur = function() {};

/**
 * Emitted once the editor comes into focus.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.onFocus = function() {};

/**
 * Emitted once the editor has been blurred.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.onBlur = function() {};

/**
 * Emitted whenever the document is changed.
 * @param {?} e Contains a single property, `data`, which has the delta of changes
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.onDocumentChange = function(e) {};

/**
 * Emitted when the selection changes.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.onCursorChange = function() {};

/**
 * Returns the string of text currently highlighted.
 * 
 * @return {string}
 */
AceAjax.Editor.prototype.getCopyText = function() {};

/**
 * Called whenever a text "copy" happens.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.onCopy = function() {};

/**
 * Called whenever a text "cut" happens.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.onCut = function() {};

/**
 * Called whenever a text "paste" happens.
 * @param {string} text The pasted text
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.onPaste = function(text) {};

/**
 * Inserts `text` into wherever the cursor is pointing.
 * @param {string} text The new text to add
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.insert = function(text) {};

/**
 * Pass in `true` to enable overwrites in your session, or `false` to disable. If overwrites is enabled, any text you enter will type over any text after it. If the value of `overwrite` changes, this function also emites the `changeOverwrite` event.
 * @param {boolean} overwrite Defines wheter or not to set overwrites
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.setOverwrite = function(overwrite) {};

/**
 * Returns `true` if overwrites are enabled; `false` otherwise.
 * 
 * @return {boolean}
 */
AceAjax.Editor.prototype.getOverwrite = function() {};

/**
 * Sets the value of overwrite to the opposite of whatever it currently is.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.toggleOverwrite = function() {};

/**
 * Sets how fast the mouse scrolling should do.
 * @param {number} speed A value indicating the new speed (in milliseconds)
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.setScrollSpeed = function(speed) {};

/**
 * Returns the value indicating how fast the mouse scroll speed is (in milliseconds).
 * 
 * @return {number}
 */
AceAjax.Editor.prototype.getScrollSpeed = function() {};

/**
 * Sets the delay (in milliseconds) of the mouse drag.
 * @param {number} dragDelay A value indicating the new delay
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.setDragDelay = function(dragDelay) {};

/**
 * Returns the current mouse drag delay.
 * 
 * @return {number}
 */
AceAjax.Editor.prototype.getDragDelay = function() {};

/**
 * Indicates how selections should occur.
 * By default, selections are set to "line". There are no other styles at the moment,
 * although this code change in the future.
 * This function also emits the `'changeSelectionStyle'` event.
 * @param {string} style The new selection style
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.setSelectionStyle = function(style) {};

/**
 * Returns the current selection style.
 * 
 * @return {string}
 */
AceAjax.Editor.prototype.getSelectionStyle = function() {};

/**
 * Determines whether or not the current line should be highlighted.
 * @param {boolean} shouldHighlight Set to `true` to highlight the current line
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.setHighlightActiveLine = function(shouldHighlight) {};

/**
 * Returns `true` if current lines are always highlighted.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.getHighlightActiveLine = function() {};

/**
 * Determines if the currently selected word should be highlighted.
 * @param {boolean} shouldHighlight Set to `true` to highlight the currently selected word
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.setHighlightSelectedWord = function(shouldHighlight) {};

/**
 * Returns `true` if currently highlighted words are to be highlighted.
 * 
 * @return {boolean}
 */
AceAjax.Editor.prototype.getHighlightSelectedWord = function() {};

/**
 * If `showInvisibiles` is set to `true`, invisible characters&mdash;like spaces or new lines&mdash;are show in the editor.
 * @param {boolean} showInvisibles Specifies whether or not to show invisible characters
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.setShowInvisibles = function(showInvisibles) {};

/**
 * Returns `true` if invisible characters are being shown.
 * 
 * @return {boolean}
 */
AceAjax.Editor.prototype.getShowInvisibles = function() {};

/**
 * If `showPrintMargin` is set to `true`, the print margin is shown in the editor.
 * @param {boolean} showPrintMargin Specifies whether or not to show the print margin
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.setShowPrintMargin = function(showPrintMargin) {};

/**
 * Returns `true` if the print margin is being shown.
 * 
 * @return {boolean}
 */
AceAjax.Editor.prototype.getShowPrintMargin = function() {};

/**
 * Sets the column defining where the print margin should be.
 * @param {number} showPrintMargin Specifies the new print margin
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.setPrintMarginColumn = function(showPrintMargin) {};

/**
 * Returns the column number of where the print margin is.
 * 
 * @return {number}
 */
AceAjax.Editor.prototype.getPrintMarginColumn = function() {};

/**
 * If `readOnly` is true, then the editor is set to read-only mode, and none of the content can change.
 * @param {boolean} readOnly Specifies whether the editor can be modified or not
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.setReadOnly = function(readOnly) {};

/**
 * Returns `true` if the editor is set to read-only mode.
 * 
 * @return {boolean}
 */
AceAjax.Editor.prototype.getReadOnly = function() {};

/**
 * Specifies whether to use behaviors or not. ["Behaviors" in this case is the auto-pairing of special characters, like quotation marks, parenthesis, or brackets.]{: #BehaviorsDef}
 * @param {boolean} enabled Enables or disables behaviors
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.setBehavioursEnabled = function(enabled) {};

/**
 * Returns `true` if the behaviors are currently enabled. {:BehaviorsDef}
 * 
 * @return {boolean}
 */
AceAjax.Editor.prototype.getBehavioursEnabled = function() {};

/**
 * Specifies whether to use wrapping behaviors or not, i.e. automatically wrapping the selection with characters such as brackets
 * when such a character is typed in.
 * @param {boolean} enabled Enables or disables wrapping behaviors
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.setWrapBehavioursEnabled = function(enabled) {};

/**
 * Returns `true` if the wrapping behaviors are currently enabled.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.getWrapBehavioursEnabled = function() {};

/**
 * Indicates whether the fold widgets are shown or not.
 * @param {boolean} show Specifies whether the fold widgets are shown
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.setShowFoldWidgets = function(show) {};

/**
 * Returns `true` if the fold widgets are shown.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.getShowFoldWidgets = function() {};

/**
 * Removes words of text from the editor. A "word" is defined as a string of characters bookended by whitespace.
 * @param {string} dir The direction of the deletion to occur, either "left" or "right"
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.remove = function(dir) {};

/**
 * Removes the word directly to the right of the current selection.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.removeWordRight = function() {};

/**
 * Removes the word directly to the left of the current selection.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.removeWordLeft = function() {};

/**
 * Removes all the words to the left of the current selection, until the start of the line.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.removeToLineStart = function() {};

/**
 * Removes all the words to the right of the current selection, until the end of the line.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.removeToLineEnd = function() {};

/**
 * Splits the line at the current selection (by inserting an `'\n'`).
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.splitLine = function() {};

/**
 * Transposes current line.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.transposeLetters = function() {};

/**
 * Converts the current selection entirely into lowercase.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.toLowerCase = function() {};

/**
 * Converts the current selection entirely into uppercase.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.toUpperCase = function() {};

/**
 * Inserts an indentation into the current cursor position or indents the selected lines.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.indent = function() {};

/**
 * Indents the current line.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.blockIndent = function() {};

/**
 * Outdents the current line.
 * 
 * @param {string=} arg
 * @return {void}
 */
AceAjax.Editor.prototype.blockOutdent = function(arg) {};

/**
 * Given the currently selected range, this function either comments all the lines, or uncomments all of them.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.toggleCommentLines = function() {};

/**
 * Works like [[EditSession.getTokenAt]], except it returns a number.
 * 
 * @return {number}
 */
AceAjax.Editor.prototype.getNumberAt = function() {};

/**
 * If the character before the cursor is a number, this functions changes its value by `amount`.
 * @param {number} amount The value to change the numeral by (can be negative to decrease value)
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.modifyNumber = function(amount) {};

/**
 * Removes all the lines in the current selection
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.removeLines = function() {};

/**
 * Shifts all the selected lines down one row.
 * 
 * @return {number}
 */
AceAjax.Editor.prototype.moveLinesDown = function() {};

/**
 * Shifts all the selected lines up one row.
 * 
 * @return {number}
 */
AceAjax.Editor.prototype.moveLinesUp = function() {};

/**
 * Moves a range of text from the given range to the given position. `toPosition` is an object that looks like this:
 * ```json
 * { row: newRowLocation, column: newColumnLocation }
 * ```
 * @param {?} fromRange The range of text you want moved within the document
 * @param {?} toPosition The location (row and column) where you want to move the text to
 * 
 * @return {?}
 */
AceAjax.Editor.prototype.moveText = function(fromRange, toPosition) {};

/**
 * Copies all the selected lines up one row.
 * 
 * @return {number}
 */
AceAjax.Editor.prototype.copyLinesUp = function() {};

/**
 * Copies all the selected lines down one row.
 * 
 * @return {number}
 */
AceAjax.Editor.prototype.copyLinesDown = function() {};

/**
 * {:VirtualRenderer.getFirstVisibleRow}
 * 
 * @return {number}
 */
AceAjax.Editor.prototype.getFirstVisibleRow = function() {};

/**
 * {:VirtualRenderer.getLastVisibleRow}
 * 
 * @return {number}
 */
AceAjax.Editor.prototype.getLastVisibleRow = function() {};

/**
 * Indicates if the row is currently visible on the screen.
 * @param {number} row The row to check
 * 
 * @return {boolean}
 */
AceAjax.Editor.prototype.isRowVisible = function(row) {};

/**
 * Indicates if the entire row is currently visible on the screen.
 * @param {number} row The row to check
 * 
 * @return {boolean}
 */
AceAjax.Editor.prototype.isRowFullyVisible = function(row) {};

/**
 * Selects the text from the current position of the document until where a "page down" finishes.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.selectPageDown = function() {};

/**
 * Selects the text from the current position of the document until where a "page up" finishes.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.selectPageUp = function() {};

/**
 * Shifts the document to wherever "page down" is, as well as moving the cursor position.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.gotoPageDown = function() {};

/**
 * Shifts the document to wherever "page up" is, as well as moving the cursor position.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.gotoPageUp = function() {};

/**
 * Scrolls the document to wherever "page down" is, without changing the cursor position.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.scrollPageDown = function() {};

/**
 * Scrolls the document to wherever "page up" is, without changing the cursor position.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.scrollPageUp = function() {};

/**
 * Moves the editor to the specified row.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.scrollToRow = function() {};

/**
 * Scrolls to a line. If `center` is `true`, it puts the line in middle of screen (or attempts to).
 * @param {number} line The line to scroll to
 * @param {boolean} center If `true`
 * @param {boolean} animate If `true` animates scrolling
 * @param {!Function} callback Function to be called when the animation has finished
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.scrollToLine = function(line, center, animate, callback) {};

/**
 * Attempts to center the current selection on the screen.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.centerSelection = function() {};

/**
 * Gets the current position of the cursor.
 * 
 * @return {!AceAjax.Position}
 */
AceAjax.Editor.prototype.getCursorPosition = function() {};

/**
 * Returns the screen position of the cursor.
 * 
 * @return {number}
 */
AceAjax.Editor.prototype.getCursorPositionScreen = function() {};

/**
 * {:Selection.getRange}
 * 
 * @return {?}
 */
AceAjax.Editor.prototype.getSelectionRange = function() {};

/**
 * Selects all the text in editor.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.selectAll = function() {};

/**
 * {:Selection.clearSelection}
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.clearSelection = function() {};

/**
 * Moves the cursor to the specified row and column. Note that this does not de-select the current selection.
 * @param {number} row The new row number
 * @param {number=} column The new column number
 * 
 * @param {boolean=} animate
 * @return {void}
 */
AceAjax.Editor.prototype.moveCursorTo = function(row, column, animate) {};

/**
 * Moves the cursor to the position indicated by `pos.row` and `pos.column`.
 * @param {!AceAjax.Position} position An object with two properties, row and column
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.moveCursorToPosition = function(position) {};

/**
 * Moves the cursor's row and column to the next matching bracket.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.jumpToMatching = function() {};

/**
 * Moves the cursor to the specified line number, and also into the indiciated column.
 * @param {number} lineNumber The line number to go to
 * @param {number=} column A column number to go to
 * @param {boolean=} animate If `true` animates scolling
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.gotoLine = function(lineNumber, column, animate) {};

/**
 * Moves the cursor to the specified row and column. Note that this does de-select the current selection.
 * @param {number} row The new row number
 * @param {number} column The new column number
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.navigateTo = function(row, column) {};

/**
 * Moves the cursor up in the document the specified number of times. Note that this does de-select the current selection.
 * @param {number=} times The number of times to change navigation
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.navigateUp = function(times) {};

/**
 * Moves the cursor down in the document the specified number of times. Note that this does de-select the current selection.
 * @param {number=} times The number of times to change navigation
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.navigateDown = function(times) {};

/**
 * Moves the cursor left in the document the specified number of times. Note that this does de-select the current selection.
 * @param {number=} times The number of times to change navigation
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.navigateLeft = function(times) {};

/**
 * Moves the cursor right in the document the specified number of times. Note that this does de-select the current selection.
 * @param {number} times The number of times to change navigation
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.navigateRight = function(times) {};

/**
 * Moves the cursor to the start of the current line. Note that this does de-select the current selection.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.navigateLineStart = function() {};

/**
 * Moves the cursor to the end of the current line. Note that this does de-select the current selection.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.navigateLineEnd = function() {};

/**
 * Moves the cursor to the end of the current file. Note that this does de-select the current selection.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.navigateFileEnd = function() {};

/**
 * Moves the cursor to the start of the current file. Note that this does de-select the current selection.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.navigateFileStart = function() {};

/**
 * Moves the cursor to the word immediately to the right of the current position. Note that this does de-select the current selection.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.navigateWordRight = function() {};

/**
 * Moves the cursor to the word immediately to the left of the current position. Note that this does de-select the current selection.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.navigateWordLeft = function() {};

/**
 * Replaces the first occurance of `options.needle` with the value in `replacement`.
 * @param {string} replacement The text to replace with
 * @param {?=} options The [[Search `Search`]] options to use
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.replace = function(replacement, options) {};

/**
 * Replaces all occurances of `options.needle` with the value in `replacement`.
 * @param {string} replacement The text to replace with
 * @param {?=} options The [[Search `Search`]] options to use
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.replaceAll = function(replacement, options) {};

/**
 * {:Search.getOptions} For more information on `options`, see [[Search `Search`]].
 * 
 * @return {?}
 */
AceAjax.Editor.prototype.getLastSearchOptions = function() {};

/**
 * Attempts to find `needle` within the document. For more information on `options`, see [[Search `Search`]].
 * @param {string} needle The text to search for (optional)
 * @param {?=} options An object defining various search properties
 * @param {boolean=} animate If `true` animate scrolling
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.find = function(needle, options, animate) {};

/**
 * Performs another search for `needle` in the document. For more information on `options`, see [[Search `Search`]].
 * @param {?=} options search options
 * @param {boolean=} animate If `true` animate scrolling
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.findNext = function(options, animate) {};

/**
 * Performs a search for `needle` backwards. For more information on `options`, see [[Search `Search`]].
 * @param {?=} options search options
 * @param {boolean=} animate If `true` animate scrolling
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.findPrevious = function(options, animate) {};

/**
 * {:UndoManager.undo}
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.undo = function() {};

/**
 * {:UndoManager.redo}
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.redo = function() {};

/**
 * Cleans up the entire editor.
 * 
 * @return {void}
 */
AceAjax.Editor.prototype.destroy = function() {};
 /** @type {function(new: (?), ?, !AceAjax.IEditSession): ?} */
AceAjax.Editor;
/**
 * @record
 * @struct
 */
AceAjax.EditorChangeEvent = function() {};
 /** @type {!AceAjax.Position} */
AceAjax.EditorChangeEvent.prototype.start;
 /** @type {!AceAjax.Position} */
AceAjax.EditorChangeEvent.prototype.end;
 /** @type {string} */
AceAjax.EditorChangeEvent.prototype.action;
 /** @type {!Array<?>} */
AceAjax.EditorChangeEvent.prototype.lines;
/**
 * @record
 * @struct
 */
AceAjax.PlaceHolder = function() {};

/**
 * @param {string} event
 * @param {function(?): ?} fn
 * @return {void}
 */
AceAjax.PlaceHolder.prototype.on = function(event, fn) {};

/**
 * PlaceHolder.setup()
 * TODO
 * 
 * @return {void}
 */
AceAjax.PlaceHolder.prototype.setup = function() {};

/**
 * PlaceHolder.showOtherMarkers()
 * TODO
 * 
 * @return {void}
 */
AceAjax.PlaceHolder.prototype.showOtherMarkers = function() {};

/**
 * PlaceHolder.hideOtherMarkers()
 * Hides all over markers in the [[EditSession `EditSession`]] that are not the currently selected one.
 * 
 * @return {void}
 */
AceAjax.PlaceHolder.prototype.hideOtherMarkers = function() {};

/**
 * PlaceHolder\@onUpdate(e)
 * Emitted when the place holder updates.
 * 
 * @return {void}
 */
AceAjax.PlaceHolder.prototype.onUpdate = function() {};

/**
 * PlaceHolder\@onCursorChange(e)
 * Emitted when the cursor changes.
 * 
 * @return {void}
 */
AceAjax.PlaceHolder.prototype.onCursorChange = function() {};

/**
 * PlaceHolder.detach()
 * TODO
 * 
 * @return {void}
 */
AceAjax.PlaceHolder.prototype.detach = function() {};

/**
 * PlaceHolder.cancel()
 * TODO
 * 
 * @return {void}
 */
AceAjax.PlaceHolder.prototype.cancel = function() {};
 /** @type {function(new: (?), ?, number, number, string, string, string): ?} */
AceAjax.PlaceHolder;
/**
 * @record
 * @struct
 */
AceAjax.IRangeList = function() {};
 /** @type {!Array<?>} */
AceAjax.IRangeList.prototype.ranges;

/**
 * @param {!AceAjax.Position} pos
 * @param {number=} startIndex
 * @return {void}
 */
AceAjax.IRangeList.prototype.pointIndex = function(pos, startIndex) {};

/**
 * @param {!Array<?>} ranges
 * @return {void}
 */
AceAjax.IRangeList.prototype.addList = function(ranges) {};

/**
 * @param {?} ranges
 * @return {void}
 */
AceAjax.IRangeList.prototype.add = function(ranges) {};

/**
 * @return {!Array<?>}
 */
AceAjax.IRangeList.prototype.merge = function() {};

/**
 * @param {!AceAjax.Position} pos
 * @return {void}
 */
AceAjax.IRangeList.prototype.substractPoint = function(pos) {};
 /** @type {function(new: (!AceAjax.IRangeList)): ?} */
AceAjax.RangeList;
/**
 * @record
 * @struct
 */
AceAjax.Range = function() {};
 /** @type {number} */
AceAjax.Range.prototype.startRow;
 /** @type {number} */
AceAjax.Range.prototype.startColumn;
 /** @type {number} */
AceAjax.Range.prototype.endRow;
 /** @type {number} */
AceAjax.Range.prototype.endColumn;
 /** @type {!AceAjax.Position} */
AceAjax.Range.prototype.start;
 /** @type {!AceAjax.Position} */
AceAjax.Range.prototype.end;

/**
 * @return {boolean}
 */
AceAjax.Range.prototype.isEmpty = function() {};

/**
 * Returns `true` if and only if the starting row and column, and ending row and column, are equivalent to those given by `range`.
 * @param {?} range A range to check against
 * 
 * @return {void}
 */
AceAjax.Range.prototype.isEqual = function(range) {};

/**
 * Returns a string containing the range's row and column information, given like this:
 * ```
 * [start.row/start.column] -> [end.row/end.column]
 * ```
 * 
 * @return {void}
 */
AceAjax.Range.prototype.toString = function() {};

/**
 * Returns `true` if the `row` and `column` provided are within the given range. This can better be expressed as returning `true` if:
 * ```javascript
 * this.start.row <= row <= this.end.row &&
 * this.start.column <= column <= this.end.column
 * ```
 * @param {number} row A row to check for
 * @param {number} column A column to check for
 * 
 * @return {boolean}
 */
AceAjax.Range.prototype.contains = function(row, column) {};

/**
 * Compares `this` range (A) with another range (B).
 * @param {?} range A range to compare with
 * 
 * @return {number}
 */
AceAjax.Range.prototype.compareRange = function(range) {};

/**
 * Checks the row and column points of `p` with the row and column points of the calling range.
 * @param {?} p A point to compare with
 * 
 * @return {number}
 */
AceAjax.Range.prototype.comparePoint = function(p) {};

/**
 * Checks the start and end points of `range` and compares them to the calling range. Returns `true` if the `range` is contained within the caller's range.
 * @param {?} range A range to compare with
 * 
 * @return {boolean}
 */
AceAjax.Range.prototype.containsRange = function(range) {};

/**
 * Returns `true` if passed in `range` intersects with the one calling this method.
 * @param {?} range A range to compare with
 * 
 * @return {boolean}
 */
AceAjax.Range.prototype.intersects = function(range) {};

/**
 * Returns `true` if the caller's ending row point is the same as `row`, and if the caller's ending column is the same as `column`.
 * @param {number} row A row point to compare with
 * @param {number} column A column point to compare with
 * 
 * @return {boolean}
 */
AceAjax.Range.prototype.isEnd = function(row, column) {};

/**
 * Returns `true` if the caller's starting row point is the same as `row`, and if the caller's starting column is the same as `column`.
 * @param {number} row A row point to compare with
 * @param {number} column A column point to compare with
 * 
 * @return {boolean}
 */
AceAjax.Range.prototype.isStart = function(row, column) {};

/**
 * Sets the starting row and column for the range.
 * @param {number} row A row point to set
 * @param {number} column A column point to set
 * 
 * @return {void}
 */
AceAjax.Range.prototype.setStart = function(row, column) {};

/**
 * Sets the starting row and column for the range.
 * @param {number} row A row point to set
 * @param {number} column A column point to set
 * 
 * @return {void}
 */
AceAjax.Range.prototype.setEnd = function(row, column) {};

/**
 * Returns `true` if the `row` and `column` are within the given range.
 * @param {number} row A row point to compare with
 * @param {number} column A column point to compare with
 * 
 * @return {boolean}
 */
AceAjax.Range.prototype.inside = function(row, column) {};

/**
 * Returns `true` if the `row` and `column` are within the given range's starting points.
 * @param {number} row A row point to compare with
 * @param {number} column A column point to compare with
 * 
 * @return {boolean}
 */
AceAjax.Range.prototype.insideStart = function(row, column) {};

/**
 * Returns `true` if the `row` and `column` are within the given range's ending points.
 * @param {number} row A row point to compare with
 * @param {number} column A column point to compare with
 * 
 * @return {boolean}
 */
AceAjax.Range.prototype.insideEnd = function(row, column) {};

/**
 * Checks the row and column points with the row and column points of the calling range.
 * @param {number} row A row point to compare with
 * @param {number} column A column point to compare with
 * 
 * @return {number}
 */
AceAjax.Range.prototype.compare = function(row, column) {};

/**
 * Checks the row and column points with the row and column points of the calling range.
 * @param {number} row A row point to compare with
 * @param {number} column A column point to compare with
 * 
 * @return {number}
 */
AceAjax.Range.prototype.compareStart = function(row, column) {};

/**
 * Checks the row and column points with the row and column points of the calling range.
 * @param {number} row A row point to compare with
 * @param {number} column A column point to compare with
 * 
 * @return {number}
 */
AceAjax.Range.prototype.compareEnd = function(row, column) {};

/**
 * Checks the row and column points with the row and column points of the calling range.
 * @param {number} row A row point to compare with
 * @param {number} column A column point to compare with
 * 
 * @return {number}
 */
AceAjax.Range.prototype.compareInside = function(row, column) {};

/**
 * Returns the part of the current `Range` that occurs within the boundaries of `firstRow` and `lastRow` as a new `Range` object.
 * @param {number} firstRow The starting row
 * @param {number} lastRow The ending row
 * 
 * @return {?}
 */
AceAjax.Range.prototype.clipRows = function(firstRow, lastRow) {};

/**
 * Changes the row and column points for the calling range for both the starting and ending points.
 * @param {number} row A new row to extend to
 * @param {number} column A new column to extend to
 * 
 * @return {?}
 */
AceAjax.Range.prototype.extend = function(row, column) {};

/**
 * Returns `true` if the range spans across multiple lines.
 * 
 * @return {boolean}
 */
AceAjax.Range.prototype.isMultiLine = function() {};

/**
 * Returns a duplicate of the calling range.
 * 
 * @return {?}
 */
AceAjax.Range.prototype.clone = function() {};

/**
 * Returns a range containing the starting and ending rows of the original range, but with a column value of `0`.
 * 
 * @return {?}
 */
AceAjax.Range.prototype.collapseRows = function() {};

/**
 * Given the current `Range`, this function converts those starting and ending points into screen positions, and then returns a new `Range` object.
 * @param {!AceAjax.IEditSession} session The `EditSession` to retrieve coordinates from
 * 
 * @return {?}
 */
AceAjax.Range.prototype.toScreenRange = function(session) {};

/**
 * Creates and returns a new `Range` based on the row and column of the given parameters.
 * @param {?} start A starting point to use
 * @param {?} end An ending point to use
 * 
 * @return {?}
 */
AceAjax.Range.prototype.fromPoints = function(start, end) {};
 /** @type {function(new: (?), number, number, number, number): ?} */
AceAjax.Range;
/**
 * @record
 * @struct
 */
AceAjax.RenderLoop = function() {};
 /** @type {function(new: (?)): ?} */
AceAjax.RenderLoop;
/**
 * @record
 * @struct
 */
AceAjax.ScrollBar = function() {};

/**
 * Emitted when the scroll bar, well, scrolls.
 * @param {?} e Contains one property, `"data"`, which indicates the current scroll top position
 * 
 * @return {void}
 */
AceAjax.ScrollBar.prototype.onScroll = function(e) {};

/**
 * Returns the width of the scroll bar.
 * 
 * @return {number}
 */
AceAjax.ScrollBar.prototype.getWidth = function() {};

/**
 * Sets the height of the scroll bar, in pixels.
 * @param {number} height The new height
 * 
 * @return {void}
 */
AceAjax.ScrollBar.prototype.setHeight = function(height) {};

/**
 * Sets the inner height of the scroll bar, in pixels.
 * @param {number} height The new inner height
 * 
 * @return {void}
 */
AceAjax.ScrollBar.prototype.setInnerHeight = function(height) {};

/**
 * Sets the scroll top of the scroll bar.
 * @param {number} scrollTop The new scroll top
 * 
 * @return {void}
 */
AceAjax.ScrollBar.prototype.setScrollTop = function(scrollTop) {};
 /** @type {function(new: (?), !HTMLElement): ?} */
AceAjax.ScrollBar;
/**
 * @record
 * @struct
 */
AceAjax.Search = function() {};

/**
 * Sets the search options via the `options` parameter.
 * @param {?} options An object containing all the new search properties
 * 
 * @return {?}
 */
AceAjax.Search.prototype.set = function(options) {};

/**
 * [Returns an object containing all the search options.]{: #Search.getOptions}
 * 
 * @return {?}
 */
AceAjax.Search.prototype.getOptions = function() {};

/**
 * Sets the search options via the `options` parameter.
 * @param {?} An object containing all the search propertie
 * 
 * @return {void}
 */
AceAjax.Search.prototype.setOptions = function(An) {};

/**
 * Searches for `options.needle`. If found, this method returns the [[Range `Range`]] where the text first occurs. If `options.backwards` is `true`, the search goes backwards in the session.
 * @param {!AceAjax.IEditSession} session The session to search with
 * 
 * @return {?}
 */
AceAjax.Search.prototype.find = function(session) {};

/**
 * Searches for all occurances `options.needle`. If found, this method returns an array of [[Range `Range`s]] where the text first occurs. If `options.backwards` is `true`, the search goes backwards in the session.
 * @param {!AceAjax.IEditSession} session The session to search with
 * 
 * @return {!Array<?>}
 */
AceAjax.Search.prototype.findAll = function(session) {};

/**
 * Searches for `options.needle` in `input`, and, if found, replaces it with `replacement`.
 * @param {string} input The text to search in
 * @param {string} replacement The replacing text
 * + (String): If `options.regExp` is `true`, this function returns `input` with the replacement already made. Otherwise, this function just returns `replacement`.<br/>
 * If `options.needle` was not found, this function returns `null`.
 * 
 * @return {string}
 */
AceAjax.Search.prototype.replace = function(input, replacement) {};
 /** @type {function(new: (?)): ?} */
AceAjax.Search;
/**
 * @record
 * @struct
 */
AceAjax.Selection = function() {};

/**
 * @param {string} ev_or_event
 * @param {!Function|function(?): ?} callback_or_fn
 * @return {void}
 */
AceAjax.Selection.prototype.on = function(ev_or_event, callback_or_fn) {};

/**
 * @param {string} ev
 * @param {!Function} callback
 * @return {void}
 */
AceAjax.Selection.prototype.addEventListener = function(ev, callback) {};

/**
 * @param {string} ev
 * @param {!Function} callback
 * @return {void}
 */
AceAjax.Selection.prototype.off = function(ev, callback) {};

/**
 * @param {string} ev
 * @param {!Function} callback
 * @return {void}
 */
AceAjax.Selection.prototype.removeListener = function(ev, callback) {};

/**
 * @param {string} ev
 * @param {!Function} callback
 * @return {void}
 */
AceAjax.Selection.prototype.removeEventListener = function(ev, callback) {};

/**
 * @return {void}
 */
AceAjax.Selection.prototype.moveCursorWordLeft = function() {};

/**
 * @return {void}
 */
AceAjax.Selection.prototype.moveCursorWordRight = function() {};

/**
 * @param {?} range
 * @return {void}
 */
AceAjax.Selection.prototype.fromOrientedRange = function(range) {};

/**
 * @param {?} match
 * @return {void}
 */
AceAjax.Selection.prototype.setSelectionRange = function(match) {};

/**
 * @return {!Array<?>}
 */
AceAjax.Selection.prototype.getAllRanges = function() {};

/**
 * @param {?} range
 * @return {void}
 */
AceAjax.Selection.prototype.addRange = function(range) {};

/**
 * Returns `true` if the selection is empty.
 * 
 * @return {boolean}
 */
AceAjax.Selection.prototype.isEmpty = function() {};

/**
 * Returns `true` if the selection is a multi-line.
 * 
 * @return {boolean}
 */
AceAjax.Selection.prototype.isMultiLine = function() {};

/**
 * Gets the current position of the cursor.
 * 
 * @return {!AceAjax.Position}
 */
AceAjax.Selection.prototype.getCursor = function() {};

/**
 * Sets the row and column position of the anchor. This function also emits the `'changeSelection'` event.
 * @param {number} row The new row
 * @param {number} column The new column
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.setSelectionAnchor = function(row, column) {};

/**
 * Returns an object containing the `row` and `column` of the calling selection anchor.
 * 
 * @return {?}
 */
AceAjax.Selection.prototype.getSelectionAnchor = function() {};

/**
 * Returns an object containing the `row` and `column` of the calling selection lead.
 * 
 * @return {?}
 */
AceAjax.Selection.prototype.getSelectionLead = function() {};

/**
 * Shifts the selection up (or down, if [[Selection.isBackwards `isBackwards()`]] is true) the given number of columns.
 * @param {number} columns The number of columns to shift by
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.shiftSelection = function(columns) {};

/**
 * Returns `true` if the selection is going backwards in the document.
 * 
 * @return {boolean}
 */
AceAjax.Selection.prototype.isBackwards = function() {};

/**
 * [Returns the [[Range]] for the selected text.]{: #Selection.getRange}
 * 
 * @return {?}
 */
AceAjax.Selection.prototype.getRange = function() {};

/**
 * [Empties the selection (by de-selecting it). This function also emits the `'changeSelection'` event.]{: #Selection.clearSelection}
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.clearSelection = function() {};

/**
 * Selects all the text in the document.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.selectAll = function() {};

/**
 * Sets the selection to the provided range.
 * @param {?} range The range of text to select
 * @param {boolean} reverse Indicates if the range should go backwards (`true`) or not
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.setRange = function(range, reverse) {};

/**
 * Moves the selection cursor to the indicated row and column.
 * @param {number} row The row to select to
 * @param {number} column The column to select to
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.selectTo = function(row, column) {};

/**
 * Moves the selection cursor to the row and column indicated by `pos`.
 * @param {?} pos An object containing the row and column
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.selectToPosition = function(pos) {};

/**
 * Moves the selection up one row.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.selectUp = function() {};

/**
 * Moves the selection down one row.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.selectDown = function() {};

/**
 * Moves the selection right one column.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.selectRight = function() {};

/**
 * Moves the selection left one column.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.selectLeft = function() {};

/**
 * Moves the selection to the beginning of the current line.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.selectLineStart = function() {};

/**
 * Moves the selection to the end of the current line.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.selectLineEnd = function() {};

/**
 * Moves the selection to the end of the file.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.selectFileEnd = function() {};

/**
 * Moves the selection to the start of the file.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.selectFileStart = function() {};

/**
 * Moves the selection to the first word on the right.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.selectWordRight = function() {};

/**
 * Moves the selection to the first word on the left.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.selectWordLeft = function() {};

/**
 * Moves the selection to highlight the entire word.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.getWordRange = function() {};

/**
 * Selects an entire word boundary.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.selectWord = function() {};

/**
 * Selects a word, including its right whitespace.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.selectAWord = function() {};

/**
 * Selects the entire line.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.selectLine = function() {};

/**
 * Moves the cursor up one row.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.moveCursorUp = function() {};

/**
 * Moves the cursor down one row.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.moveCursorDown = function() {};

/**
 * Moves the cursor left one column.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.moveCursorLeft = function() {};

/**
 * Moves the cursor right one column.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.moveCursorRight = function() {};

/**
 * Moves the cursor to the start of the line.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.moveCursorLineStart = function() {};

/**
 * Moves the cursor to the end of the line.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.moveCursorLineEnd = function() {};

/**
 * Moves the cursor to the end of the file.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.moveCursorFileEnd = function() {};

/**
 * Moves the cursor to the start of the file.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.moveCursorFileStart = function() {};

/**
 * Moves the cursor to the word on the right.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.moveCursorLongWordRight = function() {};

/**
 * Moves the cursor to the word on the left.
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.moveCursorLongWordLeft = function() {};

/**
 * Moves the cursor to position indicated by the parameters. Negative numbers move the cursor backwards in the document.
 * @param {number} rows The number of rows to move by
 * @param {number} chars The number of characters to move by
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.moveCursorBy = function(rows, chars) {};

/**
 * Moves the selection to the position indicated by its `row` and `column`.
 * @param {?} position The position to move to
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.moveCursorToPosition = function(position) {};

/**
 * Moves the cursor to the row and column provided. [If `preventUpdateDesiredColumn` is `true`, then the cursor stays in the same column position as its original point.]{: #preventUpdateBoolDesc}
 * @param {number} row The row to move to
 * @param {number} column The column to move to
 * @param {boolean=} keepDesiredColumn [If `true`, the cursor move does not respect the previous column]{: #preventUpdateBool}
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.moveCursorTo = function(row, column, keepDesiredColumn) {};

/**
 * Moves the cursor to the screen position indicated by row and column. {:preventUpdateBoolDesc}
 * @param {number} row The row to move to
 * @param {number} column The column to move to
 * @param {boolean} keepDesiredColumn {:preventUpdateBool}
 * 
 * @return {void}
 */
AceAjax.Selection.prototype.moveCursorToScreen = function(row, column, keepDesiredColumn) {};
 /** @type {function(new: (?), !AceAjax.IEditSession): ?} */
AceAjax.Selection;
/**
 * @record
 * @struct
 */
AceAjax.Split = function() {};

/**
 * Returns the number of splits.
 * 
 * @return {number}
 */
AceAjax.Split.prototype.getSplits = function() {};

/**
 * Returns the editor identified by the index `idx`.
 * @param {number} idx The index of the editor you want
 * 
 * @return {void}
 */
AceAjax.Split.prototype.getEditor = function(idx) {};

/**
 * Returns the current editor.
 * 
 * @return {?}
 */
AceAjax.Split.prototype.getCurrentEditor = function() {};

/**
 * Focuses the current editor.
 * 
 * @return {void}
 */
AceAjax.Split.prototype.focus = function() {};

/**
 * Blurs the current editor.
 * 
 * @return {void}
 */
AceAjax.Split.prototype.blur = function() {};

/**
 * Sets a theme for each of the available editors.
 * @param {string} theme The name of the theme to set
 * 
 * @return {void}
 */
AceAjax.Split.prototype.setTheme = function(theme) {};

/**
 * Sets the keyboard handler for the editor.
 * @param {string} keybinding 
 * 
 * @return {void}
 */
AceAjax.Split.prototype.setKeyboardHandler = function(keybinding) {};

/**
 * Executes `callback` on all of the available editors.
 * @param {!Function} callback A callback function to execute
 * @param {string} scope The default scope for the callback
 * 
 * @return {void}
 */
AceAjax.Split.prototype.forEach = function(callback, scope) {};

/**
 * Sets the font size, in pixels, for all the available editors.
 * @param {number} size The new font size
 * 
 * @return {void}
 */
AceAjax.Split.prototype.setFontSize = function(size) {};

/**
 * Sets a new [[EditSession `EditSession`]] for the indicated editor.
 * @param {!AceAjax.IEditSession} session The new edit session
 * @param {number} idx The editor's index you're interested in
 * 
 * @return {void}
 */
AceAjax.Split.prototype.setSession = function(session, idx) {};

/**
 * Returns the orientation.
 * 
 * @return {number}
 */
AceAjax.Split.prototype.getOrientation = function() {};

/**
 * Sets the orientation.
 * @param {number} orientation The new orientation value
 * 
 * @return {void}
 */
AceAjax.Split.prototype.setOrientation = function(orientation) {};

/**
 * Resizes the editor.
 * 
 * @return {void}
 */
AceAjax.Split.prototype.resize = function() {};
 /** @type {function(new: (?)): ?} */
AceAjax.Split;
/**
 * @record
 * @struct
 */
AceAjax.TokenIterator = function() {};

/**
 * Tokenizes all the items from the current point to the row prior in the document.
 * 
 * @return {!Array<string>}
 */
AceAjax.TokenIterator.prototype.stepBackward = function() {};

/**
 * Tokenizes all the items from the current point until the next row in the document. If the current point is at the end of the file, this function returns `null`. Otherwise, it returns the tokenized string.
 * 
 * @return {string}
 */
AceAjax.TokenIterator.prototype.stepForward = function() {};

/**
 * Returns the current tokenized string.
 * 
 * @return {!AceAjax.TokenInfo}
 */
AceAjax.TokenIterator.prototype.getCurrentToken = function() {};

/**
 * Returns the current row.
 * 
 * @return {number}
 */
AceAjax.TokenIterator.prototype.getCurrentTokenRow = function() {};

/**
 * Returns the current column.
 * 
 * @return {number}
 */
AceAjax.TokenIterator.prototype.getCurrentTokenColumn = function() {};
 /** @type {function(new: (?), !AceAjax.IEditSession, number, number): ?} */
AceAjax.TokenIterator;
/**
 * @record
 * @struct
 */
AceAjax.Tokenizer = function() {};

/**
 * Returns an object containing two properties: `tokens`, which contains all the tokens; and `state`, the current state.
 * 
 * @return {?}
 */
AceAjax.Tokenizer.prototype.getLineTokens = function() {};
 /** @type {function(new: (?), ?, string): ?} */
AceAjax.Tokenizer;
/**
 * @record
 * @struct
 */
AceAjax.UndoManager = function() {};

/**
 * Provides a means for implementing your own undo manager. `options` has one property, `args`, an [[Array `Array`]], with two elements:
 * - `args[0]` is an array of deltas
 * - `args[1]` is the document to associate with
 * @param {?} options Contains additional properties
 * 
 * @return {void}
 */
AceAjax.UndoManager.prototype.execute = function(options) {};

/**
 * [Perform an undo operation on the document, reverting the last change.]{: #UndoManager.undo}
 * @param {boolean=} dontSelect {:dontSelect}
 * 
 * @return {?}
 */
AceAjax.UndoManager.prototype.undo = function(dontSelect) {};

/**
 * [Perform a redo operation on the document, reimplementing the last change.]{: #UndoManager.redo}
 * @param {boolean} dontSelect {:dontSelect}
 * 
 * @return {void}
 */
AceAjax.UndoManager.prototype.redo = function(dontSelect) {};

/**
 * Destroys the stack of undo and redo redo operations.
 * 
 * @return {void}
 */
AceAjax.UndoManager.prototype.reset = function() {};

/**
 * Returns `true` if there are undo operations left to perform.
 * 
 * @return {boolean}
 */
AceAjax.UndoManager.prototype.hasUndo = function() {};

/**
 * Returns `true` if there are redo operations left to perform.
 * 
 * @return {boolean}
 */
AceAjax.UndoManager.prototype.hasRedo = function() {};

/**
 * Returns `true` if the dirty counter is 0
 * 
 * @return {boolean}
 */
AceAjax.UndoManager.prototype.isClean = function() {};

/**
 * Sets dirty counter to 0
 * 
 * @return {void}
 */
AceAjax.UndoManager.prototype.markClean = function() {};
 /** @type {function(new: (?)): ?} */
AceAjax.UndoManager;
/**
 * @record
 * @struct
 */
AceAjax.VirtualRenderer = function() {};
 /** @type {?} */
AceAjax.VirtualRenderer.prototype.scroller;
 /** @type {number} */
AceAjax.VirtualRenderer.prototype.characterWidth;
 /** @type {number} */
AceAjax.VirtualRenderer.prototype.lineHeight;

/**
 * @param {number} top
 * @param {number} bottom
 * @param {number} left
 * @param {number} right
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.setScrollMargin = function(top, bottom, left, right) {};

/**
 * @param {number} left
 * @param {number} top
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.screenToTextCoordinates = function(left, top) {};

/**
 * Associates the renderer with an [[EditSession `EditSession`]].
 * 
 * @param {!AceAjax.IEditSession} session
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.setSession = function(session) {};

/**
 * Triggers a partial update of the text, from the range given by the two parameters.
 * @param {number} firstRow The first row to update
 * @param {number} lastRow The last row to update
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.updateLines = function(firstRow, lastRow) {};

/**
 * Triggers a full update of the text, for all the rows.
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.updateText = function() {};

/**
 * Triggers a full update of all the layers, for all the rows.
 * @param {boolean} force If `true`, forces the changes through
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.updateFull = function(force) {};

/**
 * Updates the font size.
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.updateFontSize = function() {};

/**
 * [Triggers a resize of the editor.]{: #VirtualRenderer.onResize}
 * @param {boolean} force If `true`, recomputes the size, even if the height and width haven't changed
 * @param {number} gutterWidth The width of the gutter in pixels
 * @param {number} width The width of the editor in pixels
 * @param {number} height The hiehgt of the editor, in pixels
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.onResize = function(force, gutterWidth, width, height) {};

/**
 * Adjusts the wrap limit, which is the number of characters that can fit within the width of the edit area on screen.
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.adjustWrapLimit = function() {};

/**
 * Identifies whether you want to have an animated scroll or not.
 * @param {boolean} shouldAnimate Set to `true` to show animated scrolls
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.setAnimatedScroll = function(shouldAnimate) {};

/**
 * Returns whether an animated scroll happens or not.
 * 
 * @return {boolean}
 */
AceAjax.VirtualRenderer.prototype.getAnimatedScroll = function() {};

/**
 * Identifies whether you want to show invisible characters or not.
 * @param {boolean} showInvisibles Set to `true` to show invisibles
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.setShowInvisibles = function(showInvisibles) {};

/**
 * Returns whether invisible characters are being shown or not.
 * 
 * @return {boolean}
 */
AceAjax.VirtualRenderer.prototype.getShowInvisibles = function() {};

/**
 * Identifies whether you want to show the print margin or not.
 * @param {boolean} showPrintMargin Set to `true` to show the print margin
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.setShowPrintMargin = function(showPrintMargin) {};

/**
 * Returns whether the print margin is being shown or not.
 * 
 * @return {boolean}
 */
AceAjax.VirtualRenderer.prototype.getShowPrintMargin = function() {};

/**
 * Identifies whether you want to show the print margin column or not.
 * @param {boolean} showPrintMargin Set to `true` to show the print margin column
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.setPrintMarginColumn = function(showPrintMargin) {};

/**
 * Returns whether the print margin column is being shown or not.
 * 
 * @return {boolean}
 */
AceAjax.VirtualRenderer.prototype.getPrintMarginColumn = function() {};

/**
 * Returns `true` if the gutter is being shown.
 * 
 * @return {boolean}
 */
AceAjax.VirtualRenderer.prototype.getShowGutter = function() {};

/**
 * Identifies whether you want to show the gutter or not.
 * @param {boolean} show Set to `true` to show the gutter
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.setShowGutter = function(show) {};

/**
 * Returns the root element containing this renderer.
 * 
 * @return {!HTMLElement}
 */
AceAjax.VirtualRenderer.prototype.getContainerElement = function() {};

/**
 * Returns the element that the mouse events are attached to
 * 
 * @return {!HTMLElement}
 */
AceAjax.VirtualRenderer.prototype.getMouseEventTarget = function() {};

/**
 * Returns the element to which the hidden text area is added.
 * 
 * @return {!HTMLElement}
 */
AceAjax.VirtualRenderer.prototype.getTextAreaContainer = function() {};

/**
 * [Returns the index of the first visible row.]{: #VirtualRenderer.getFirstVisibleRow}
 * 
 * @return {number}
 */
AceAjax.VirtualRenderer.prototype.getFirstVisibleRow = function() {};

/**
 * Returns the index of the first fully visible row. "Fully" here means that the characters in the row are not truncated; that the top and the bottom of the row are on the screen.
 * 
 * @return {number}
 */
AceAjax.VirtualRenderer.prototype.getFirstFullyVisibleRow = function() {};

/**
 * Returns the index of the last fully visible row. "Fully" here means that the characters in the row are not truncated; that the top and the bottom of the row are on the screen.
 * 
 * @return {number}
 */
AceAjax.VirtualRenderer.prototype.getLastFullyVisibleRow = function() {};

/**
 * [Returns the index of the last visible row.]{: #VirtualRenderer.getLastVisibleRow}
 * 
 * @return {number}
 */
AceAjax.VirtualRenderer.prototype.getLastVisibleRow = function() {};

/**
 * Sets the padding for all the layers.
 * @param {number} padding A new padding value (in pixels)
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.setPadding = function(padding) {};

/**
 * Returns whether the horizontal scrollbar is set to be always visible.
 * 
 * @return {boolean}
 */
AceAjax.VirtualRenderer.prototype.getHScrollBarAlwaysVisible = function() {};

/**
 * Identifies whether you want to show the horizontal scrollbar or not.
 * @param {boolean} alwaysVisible Set to `true` to make the horizontal scroll bar visible
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.setHScrollBarAlwaysVisible = function(alwaysVisible) {};

/**
 * Schedules an update to all the front markers in the document.
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.updateFrontMarkers = function() {};

/**
 * Schedules an update to all the back markers in the document.
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.updateBackMarkers = function() {};

/**
 * Deprecated; (moved to [[EditSession]])
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.addGutterDecoration = function() {};

/**
 * Deprecated; (moved to [[EditSession]])
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.removeGutterDecoration = function() {};

/**
 * Redraw breakpoints.
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.updateBreakpoints = function() {};

/**
 * Sets annotations for the gutter.
 * @param {!Array<?>} annotations An array containing annotations
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.setAnnotations = function(annotations) {};

/**
 * Updates the cursor icon.
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.updateCursor = function() {};

/**
 * Hides the cursor icon.
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.hideCursor = function() {};

/**
 * Shows the cursor icon.
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.showCursor = function() {};

/**
 * Scrolls the cursor into the first visibile area of the editor
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.scrollCursorIntoView = function() {};

/**
 * {:EditSession.getScrollTop}
 * 
 * @return {number}
 */
AceAjax.VirtualRenderer.prototype.getScrollTop = function() {};

/**
 * {:EditSession.getScrollLeft}
 * 
 * @return {number}
 */
AceAjax.VirtualRenderer.prototype.getScrollLeft = function() {};

/**
 * Returns the first visible row, regardless of whether it's fully visible or not.
 * 
 * @return {number}
 */
AceAjax.VirtualRenderer.prototype.getScrollTopRow = function() {};

/**
 * Returns the last visible row, regardless of whether it's fully visible or not.
 * 
 * @return {number}
 */
AceAjax.VirtualRenderer.prototype.getScrollBottomRow = function() {};

/**
 * Gracefully scrolls from the top of the editor to the row indicated.
 * @param {number} row A row id
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.scrollToRow = function(row) {};

/**
 * Gracefully scrolls the editor to the row indicated.
 * @param {number} line A line number
 * @param {boolean} center If `true`, centers the editor the to indicated line
 * @param {boolean} animate If `true` animates scrolling
 * @param {!Function} callback Function to be called after the animation has finished
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.scrollToLine = function(line, center, animate, callback) {};

/**
 * Scrolls the editor to the y pixel indicated.
 * @param {number} scrollTop The position to scroll to
 * 
 * @return {number}
 */
AceAjax.VirtualRenderer.prototype.scrollToY = function(scrollTop) {};

/**
 * Scrolls the editor across the x-axis to the pixel indicated.
 * @param {number} scrollLeft The position to scroll to
 * 
 * @return {number}
 */
AceAjax.VirtualRenderer.prototype.scrollToX = function(scrollLeft) {};

/**
 * Scrolls the editor across both x- and y-axes.
 * @param {number} deltaX The x value to scroll by
 * @param {number} deltaY The y value to scroll by
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.scrollBy = function(deltaX, deltaY) {};

/**
 * Returns `true` if you can still scroll by either parameter; in other words, you haven't reached the end of the file or line.
 * @param {number} deltaX The x value to scroll by
 * @param {number} deltaY The y value to scroll by
 * 
 * @return {boolean}
 */
AceAjax.VirtualRenderer.prototype.isScrollableBy = function(deltaX, deltaY) {};

/**
 * Returns an object containing the `pageX` and `pageY` coordinates of the document position.
 * @param {number} row The document row position
 * @param {number} column The document column position
 * 
 * @return {?}
 */
AceAjax.VirtualRenderer.prototype.textToScreenCoordinates = function(row, column) {};

/**
 * Focuses the current container.
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.visualizeFocus = function() {};

/**
 * Blurs the current container.
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.visualizeBlur = function() {};

/**
 * undefined
 * @param {number} position 
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.showComposition = function(position) {};

/**
 * Sets the inner text of the current composition to `text`.
 * @param {string} text A string of text to use
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.setCompositionText = function(text) {};

/**
 * Hides the current composition.
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.hideComposition = function() {};

/**
 * [Sets a new theme for the editor. `theme` should exist, and be a directory path, like `ace/theme/textmate`.]{: #VirtualRenderer.setTheme}
 * @param {string} theme The path to a theme
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.setTheme = function(theme) {};

/**
 * [Returns the path of the current theme.]{: #VirtualRenderer.getTheme}
 * 
 * @return {string}
 */
AceAjax.VirtualRenderer.prototype.getTheme = function() {};

/**
 * [Adds a new class, `style`, to the editor.]{: #VirtualRenderer.setStyle}
 * @param {string} style A class name
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.setStyle = function(style) {};

/**
 * [Removes the class `style` from the editor.]{: #VirtualRenderer.unsetStyle}
 * @param {string} style A class name
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.unsetStyle = function(style) {};

/**
 * Destroys the text and cursor layers for this renderer.
 * 
 * @return {void}
 */
AceAjax.VirtualRenderer.prototype.destroy = function() {};
 /** @type {function(new: (?), !HTMLElement, string): ?} */
AceAjax.VirtualRenderer;
 /** @type {!AceAjax.Ace} */
var ace;
