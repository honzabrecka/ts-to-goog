/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/request/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportDeclaration in  */
/** @const */
var request = {};
/**
 * @record
 * @struct
 */
request.RequestAPI = function() {};

/* TODO: CallSignature: request */

/* TODO: CallSignature: request */

/* TODO: CallSignature: request */
 /** @type {?} */
request.RequestAPI.prototype.initParams;
 /** @type {boolean} */
request.RequestAPI.prototype.debug;

/**
 * @param {TOptions|?} options
 * @return {!request.RequestAPI<TRequest, TOptions, (!request.UriOptions|!request.UrlOptions)>|!request.DefaultUriUrlRequestApi<TRequest, TOptions, (!Object|!request.UriOptions|!request.UrlOptions)>}
 */
request.RequestAPI.prototype.defaults = function(options) {};

/**
 * @param {string|?} uri_or_options
 * @param {TOptions|!request.RequestCallback=} options_or_callback
 * @param {!request.RequestCallback=} callback
 * @return {TRequest}
 */
request.RequestAPI.prototype.get = function(uri_or_options, options_or_callback, callback) {};

/**
 * @param {string|?} uri_or_options
 * @param {TOptions|!request.RequestCallback=} options_or_callback
 * @param {!request.RequestCallback=} callback
 * @return {TRequest}
 */
request.RequestAPI.prototype.post = function(uri_or_options, options_or_callback, callback) {};

/**
 * @param {string|?} uri_or_options
 * @param {TOptions|!request.RequestCallback=} options_or_callback
 * @param {!request.RequestCallback=} callback
 * @return {TRequest}
 */
request.RequestAPI.prototype.put = function(uri_or_options, options_or_callback, callback) {};

/**
 * @param {string|?} uri_or_options
 * @param {TOptions|!request.RequestCallback=} options_or_callback
 * @param {!request.RequestCallback=} callback
 * @return {TRequest}
 */
request.RequestAPI.prototype.head = function(uri_or_options, options_or_callback, callback) {};

/**
 * @param {string|?} uri_or_options
 * @param {TOptions|!request.RequestCallback=} options_or_callback
 * @param {!request.RequestCallback=} callback
 * @return {TRequest}
 */
request.RequestAPI.prototype.patch = function(uri_or_options, options_or_callback, callback) {};

/**
 * @param {string|?} uri_or_options
 * @param {TOptions|!request.RequestCallback=} options_or_callback
 * @param {!request.RequestCallback=} callback
 * @return {TRequest}
 */
request.RequestAPI.prototype.del = function(uri_or_options, options_or_callback, callback) {};

/**
 * @param {string|?} uri_or_options
 * @param {TOptions|!request.RequestCallback=} options_or_callback
 * @param {!request.RequestCallback=} callback
 * @return {TRequest}
 */
request.RequestAPI.prototype.delete = function(uri_or_options, options_or_callback, callback) {};

/**
 * @param {?} agentOptions
 * @param {?} optionsArg
 * @return {TRequest}
 */
request.RequestAPI.prototype.forever = function(agentOptions, optionsArg) {};

/**
 * @param {?=} store
 * @return {!request.CookieJar}
 */
request.RequestAPI.prototype.jar = function(store) {};

/**
 * @param {string} str
 * @return {!request.Cookie}
 */
request.RequestAPI.prototype.cookie = function(str) {};
/**
 * @extends {request.RequestAPI}
 * @record
 * @struct
 */
request.DefaultUriUrlRequestApi = function() {};

/* TODO: CallSignature: request */

/**
 * @param {TOptions} options
 * @return {!request.DefaultUriUrlRequestApi<TRequest, TOptions, (!Object|!request.UriOptions|!request.UrlOptions)>}
 */
request.DefaultUriUrlRequestApi.prototype.defaults = function(options) {};

/**
 * @param {string|?|!request.RequestCallback=} uri_or_options_or_callback
 * @param {TOptions|!request.RequestCallback=} options_or_callback
 * @param {!request.RequestCallback=} callback
 * @return {TRequest}
 */
request.DefaultUriUrlRequestApi.prototype.get = function(uri_or_options_or_callback, options_or_callback, callback) {};

/**
 * @param {string|?|!request.RequestCallback=} uri_or_options_or_callback
 * @param {TOptions|!request.RequestCallback=} options_or_callback
 * @param {!request.RequestCallback=} callback
 * @return {TRequest}
 */
request.DefaultUriUrlRequestApi.prototype.post = function(uri_or_options_or_callback, options_or_callback, callback) {};

/**
 * @param {string|?|!request.RequestCallback=} uri_or_options_or_callback
 * @param {TOptions|!request.RequestCallback=} options_or_callback
 * @param {!request.RequestCallback=} callback
 * @return {TRequest}
 */
request.DefaultUriUrlRequestApi.prototype.put = function(uri_or_options_or_callback, options_or_callback, callback) {};

/**
 * @param {string|?|!request.RequestCallback=} uri_or_options_or_callback
 * @param {TOptions|!request.RequestCallback=} options_or_callback
 * @param {!request.RequestCallback=} callback
 * @return {TRequest}
 */
request.DefaultUriUrlRequestApi.prototype.head = function(uri_or_options_or_callback, options_or_callback, callback) {};

/**
 * @param {string|?|!request.RequestCallback=} uri_or_options_or_callback
 * @param {TOptions|!request.RequestCallback=} options_or_callback
 * @param {!request.RequestCallback=} callback
 * @return {TRequest}
 */
request.DefaultUriUrlRequestApi.prototype.patch = function(uri_or_options_or_callback, options_or_callback, callback) {};

/**
 * @param {string|?|!request.RequestCallback=} uri_or_options_or_callback
 * @param {TOptions|!request.RequestCallback=} options_or_callback
 * @param {!request.RequestCallback=} callback
 * @return {TRequest}
 */
request.DefaultUriUrlRequestApi.prototype.del = function(uri_or_options_or_callback, options_or_callback, callback) {};

/**
 * @param {string|?|!request.RequestCallback=} uri_or_options_or_callback
 * @param {TOptions|!request.RequestCallback=} options_or_callback
 * @param {!request.RequestCallback=} callback
 * @return {TRequest}
 */
request.DefaultUriUrlRequestApi.prototype.delete = function(uri_or_options_or_callback, options_or_callback, callback) {};
/**
 * @record
 * @struct
 */
request.CoreOptions = function() {};
 /** @type {string} */
request.CoreOptions.prototype.baseUrl;
 /** @type {function(?, !request.RequestResponse, ?): void} */
request.CoreOptions.prototype.callback;
 /** @type {?} */
request.CoreOptions.prototype.jar;
 /** @type {?} */
request.CoreOptions.prototype.formData;
 /** @type {?} */
request.CoreOptions.prototype.form;
 /** @type {!request.AuthOptions} */
request.CoreOptions.prototype.auth;
 /** @type {!request.OAuthOptions} */
request.CoreOptions.prototype.oauth;
 /** @type {!request.AWSOptions} */
request.CoreOptions.prototype.aws;
 /** @type {!request.HawkOptions} */
request.CoreOptions.prototype.hawk;
 /** @type {?} */
request.CoreOptions.prototype.qs;
 /** @type {?} */
request.CoreOptions.prototype.qsStringifyOptions;
 /** @type {?} */
request.CoreOptions.prototype.qsParseOptions;
 /** @type {?} */
request.CoreOptions.prototype.json;
 /** @type {function(string, ?): ?} */
request.CoreOptions.prototype.jsonReviver;
 /** @type {function(string, ?): ?} */
request.CoreOptions.prototype.jsonReplacer;
 /** @type {(!Array<!request.RequestPart>|!request.Multipart)} */
request.CoreOptions.prototype.multipart;
 /** @type {(!Agent|?)} */
request.CoreOptions.prototype.agent;
 /** @type {?} */
request.CoreOptions.prototype.agentOptions;
 /** @type {?} */
request.CoreOptions.prototype.agentClass;
 /** @type {?} */
request.CoreOptions.prototype.forever;
 /** @type {string} */
request.CoreOptions.prototype.host;
 /** @type {number} */
request.CoreOptions.prototype.port;
 /** @type {string} */
request.CoreOptions.prototype.method;
 /** @type {!request.Headers} */
request.CoreOptions.prototype.headers;
 /** @type {?} */
request.CoreOptions.prototype.body;
 /** @type {(boolean|function(!IncomingMessage): boolean)} */
request.CoreOptions.prototype.followRedirect;
 /** @type {boolean} */
request.CoreOptions.prototype.followAllRedirects;
 /** @type {boolean} */
request.CoreOptions.prototype.followOriginalHttpMethod;
 /** @type {number} */
request.CoreOptions.prototype.maxRedirects;
 /** @type {boolean} */
request.CoreOptions.prototype.removeRefererHeader;
 /** @type {string} */
request.CoreOptions.prototype.encoding;
 /** @type {?} */
request.CoreOptions.prototype.pool;
 /** @type {number} */
request.CoreOptions.prototype.timeout;
 /** @type {string} */
request.CoreOptions.prototype.localAddress;
 /** @type {?} */
request.CoreOptions.prototype.proxy;
 /** @type {boolean} */
request.CoreOptions.prototype.strictSSL;
 /** @type {boolean} */
request.CoreOptions.prototype.rejectUnauthorized;
 /** @type {boolean} */
request.CoreOptions.prototype.time;
 /** @type {boolean} */
request.CoreOptions.prototype.gzip;
 /** @type {boolean} */
request.CoreOptions.prototype.preambleCRLF;
 /** @type {boolean} */
request.CoreOptions.prototype.postambleCRLF;
 /** @type {boolean} */
request.CoreOptions.prototype.withCredentials;
 /** @type {?} */
request.CoreOptions.prototype.key;
 /** @type {?} */
request.CoreOptions.prototype.cert;
 /** @type {string} */
request.CoreOptions.prototype.passphrase;
 /** @type {(string|?|!Array<string>|!Array<?>)} */
request.CoreOptions.prototype.ca;
 /** @type {!request.HttpArchiveRequest} */
request.CoreOptions.prototype.har;
 /** @type {boolean} */
request.CoreOptions.prototype.useQuerystring;
/**
 * @record
 * @struct
 */
request.UriOptions = function() {};
 /** @type {(string|!Url)} */
request.UriOptions.prototype.uri;
/**
 * @record
 * @struct
 */
request.UrlOptions = function() {};
 /** @type {(string|!Url)} */
request.UrlOptions.prototype.url;

/** @typedef {(!request.UriOptions|!request.UrlOptions)} */
request.RequiredUriUrl;

/** @typedef {(!Object|!request.UriOptions|!request.UrlOptions)} */
request.OptionalUriUrl;

/** @typedef {?} */
request.OptionsWithUri;

/** @typedef {?} */
request.OptionsWithUrl;

/** @typedef {?} */
request.Options;
/**
 * @record
 * @struct
 */
request.RequestCallback = function() {};

/* TODO: CallSignature: request */
/**
 * @record
 * @struct
 */
request.RequestResponse = function() {};
 /** @type {?} */
request.RequestResponse.prototype.request;
 /** @type {?} */
request.RequestResponse.prototype.body;
 /** @type {number} */
request.RequestResponse.prototype.timingStart;
 /** @type {{socket: number, lookup: number, connect: number, response: number, end: number}} */
request.RequestResponse.prototype.timings;
 /** @type {{wait: number, dns: number, tcp: number, firstByte: number, download: number, total: number}} */
request.RequestResponse.prototype.timingPhases;
/**
 * @record
 * @struct
 */
request.HttpArchiveRequest = function() {};
 /** @type {string} */
request.HttpArchiveRequest.prototype.url;
 /** @type {string} */
request.HttpArchiveRequest.prototype.method;
 /** @type {!Array<!request.NameValuePair>} */
request.HttpArchiveRequest.prototype.headers;
 /** @type {{mimeType: string, params: !Array<!request.NameValuePair>}} */
request.HttpArchiveRequest.prototype.postData;
/**
 * @record
 * @struct
 */
request.NameValuePair = function() {};
 /** @type {string} */
request.NameValuePair.prototype.name;
 /** @type {string} */
request.NameValuePair.prototype.value;
/**
 * @record
 * @struct
 */
request.Multipart = function() {};
 /** @type {boolean} */
request.Multipart.prototype.chunked;
 /** @type {!Array<{content-type: string, body: string}>} */
request.Multipart.prototype.data;
/**
 * @record
 * @struct
 */
request.RequestPart = function() {};
 /** @type {!request.Headers} */
request.RequestPart.prototype.headers;
 /** @type {?} */
request.RequestPart.prototype.body;
/**
 * @record
 * @struct
 */
request.Request = function() {};
 /** @type {boolean} */
request.Request.prototype.readable;
 /** @type {boolean} */
request.Request.prototype.writable;

/**
 * @return {!Agent}
 */
request.Request.prototype.getAgent = function() {};

/**
 * @param {?} dest
 * @return {void}
 */
request.Request.prototype.pipeDest = function(dest) {};

/**
 * @param {string} name
 * @param {string} value
 * @param {boolean=} clobber
 * @return {!request.Request}
 */
request.Request.prototype.setHeader = function(name, value, clobber) {};

/**
 * @param {!request.Headers} headers
 * @return {!request.Request}
 */
request.Request.prototype.setHeaders = function(headers) {};

/**
 * @param {!Object} q
 * @param {boolean=} clobber
 * @return {!request.Request}
 */
request.Request.prototype.qs = function(q, clobber) {};

/**
 * @param {?=} form
 * @return {!FormData|!request.Request}
 */
request.Request.prototype.form = function(form) {};

/**
 * @param {!Array<!request.RequestPart>} multipart
 * @return {!request.Request}
 */
request.Request.prototype.multipart = function(multipart) {};

/**
 * @param {?} val
 * @return {!request.Request}
 */
request.Request.prototype.json = function(val) {};

/**
 * @param {!request.AWSOptions} opts
 * @param {boolean=} now
 * @return {!request.Request}
 */
request.Request.prototype.aws = function(opts, now) {};

/**
 * @param {string} username
 * @param {string} password
 * @param {boolean=} sendInmediately
 * @param {string=} bearer
 * @return {!request.Request}
 */
request.Request.prototype.auth = function(username, password, sendInmediately, bearer) {};

/**
 * @param {!request.OAuthOptions} oauth
 * @return {!request.Request}
 */
request.Request.prototype.oauth = function(oauth) {};

/**
 * @param {!request.CookieJar} jar
 * @return {!request.Request}
 */
request.Request.prototype.jar = function(jar) {};

/**
 * @param {string} event
 * @param {!Function|function(!ClientRequest): void|function(!IncomingMessage): void|function((string|?)): void|function(!Error): void|function(!IncomingMessage, (string|?)): void} listener
 * @return {Request}
 */
request.Request.prototype.on = function(event, listener) {};

/**
 * @param {?|string} buffer_or_str
 * @param {!Function|string=} cb_or_encoding
 * @param {!Function|string=} cb_or_fd
 * @return {boolean}
 */
request.Request.prototype.write = function(buffer_or_str, cb_or_encoding, cb_or_fd) {};

/**
 * @param {?|string=} chunk
 * @param {!Function|string=} cb_or_encoding
 * @param {!Function=} cb
 * @return {void}
 */
request.Request.prototype.end = function(chunk, cb_or_encoding, cb) {};

/**
 * @return {void}
 */
request.Request.prototype.pause = function() {};

/**
 * @return {void}
 */
request.Request.prototype.resume = function() {};

/**
 * @return {void}
 */
request.Request.prototype.abort = function() {};

/**
 * @return {void}
 */
request.Request.prototype.destroy = function() {};

/**
 * @return {!Object}
 */
request.Request.prototype.toJSON = function() {};
/**
 * @record
 * @struct
 */
request.Headers = function() {};

/* TODO: IndexSignature: request */
/**
 * @record
 * @struct
 */
request.AuthOptions = function() {};
 /** @type {string} */
request.AuthOptions.prototype.user;
 /** @type {string} */
request.AuthOptions.prototype.username;
 /** @type {string} */
request.AuthOptions.prototype.pass;
 /** @type {string} */
request.AuthOptions.prototype.password;
 /** @type {boolean} */
request.AuthOptions.prototype.sendImmediately;
 /** @type {(string|function(): string)} */
request.AuthOptions.prototype.bearer;
/**
 * @record
 * @struct
 */
request.OAuthOptions = function() {};
 /** @type {string} */
request.OAuthOptions.prototype.callback;
 /** @type {string} */
request.OAuthOptions.prototype.consumer_key;
 /** @type {string} */
request.OAuthOptions.prototype.consumer_secret;
 /** @type {string} */
request.OAuthOptions.prototype.token;
 /** @type {string} */
request.OAuthOptions.prototype.token_secret;
 /** @type {string} */
request.OAuthOptions.prototype.transport_method;
 /** @type {string} */
request.OAuthOptions.prototype.verifier;
/**
 * @record
 * @struct
 */
request.HawkOptions = function() {};
 /** @type {?} */
request.HawkOptions.prototype.credentials;
/**
 * @record
 * @struct
 */
request.AWSOptions = function() {};
 /** @type {string} */
request.AWSOptions.prototype.secret;
 /** @type {string} */
request.AWSOptions.prototype.bucket;
/**
 * @record
 * @struct
 */
request.CookieJar = function() {};

/**
 * @param {!request.Cookie} cookie
 * @param {(string|!Url)} uri
 * @param {?=} options
 * @return {void}
 */
request.CookieJar.prototype.setCookie = function(cookie, uri, options) {};

/**
 * @param {(string|!Url)} uri
 * @return {string}
 */
request.CookieJar.prototype.getCookieString = function(uri) {};

/**
 * @param {(string|!Url)} uri
 * @return {!Array<!request.Cookie>}
 */
request.CookieJar.prototype.getCookies = function(uri) {};
/**
 * @record
 * @struct
 */
request.CookieValue = function() {};
 /** @type {string} */
request.CookieValue.prototype.name;
 /** @type {?} */
request.CookieValue.prototype.value;
 /** @type {boolean} */
request.CookieValue.prototype.httpOnly;
/**
 * @record
 * @struct
 */
request.Cookie = function() {};
 /** @type {string} */
request.Cookie.prototype.str;
 /** @type {!Date} */
request.Cookie.prototype.expires;
 /** @type {string} */
request.Cookie.prototype.path;

/**
 * @param {string} name
 * @param {!request.Request} req
 * @return {void}
 */
request.Cookie.prototype.constructor = function(name, req) {};

/**
 * @return {string}
 */
request.Cookie.prototype.toString = function() {};
 /** @type {!request.RequestAPI<!request.Request, !request.CoreOptions, (!request.UriOptions|!request.UrlOptions)>} */
var request;

/* TODO: ExportAssignment in  */
