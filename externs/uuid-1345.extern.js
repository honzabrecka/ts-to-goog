/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/uuid-1345/index.d.ts:
/**
 * @record
 * @struct
 */
function UUID() {}
 /** @type {string} */
UUID.prototype.version;
 /** @type {string} */
UUID.prototype.variant;

/**
 * @return {string}
 */
UUID.prototype.toString = function() {};

/**
 * @return {?}
 */
UUID.prototype.toBuffer = function() {};

/** @typedef {(string|?)} */
var UuidTypes;
/**
 * @record
 * @struct
 */
function ASCIICallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function BinaryCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ObjectCallback() {}

/* TODO: CallSignature:  */
 /** @type {{dns: ?, url: ?, oid: ?, x500: ?}} */
var namespace;

/**
 * @param {(string|?)} uuid
 * @return {{version: number, variant: string, format: string}}
 */
function check(uuid) {}

/**
 * @param {string} uuid
 * @return {?}
 */
function parse(uuid) {}

/**
 * @param {?} uuid
 * @return {string}
 */
function stringify(uuid) {}

/**
 * @param {{mac: boolean}|{encoding: string, mac: boolean}|?=} options_or_callback
 * @param {?=} callback
 * @return {string|?|void}
 */
function v1(options_or_callback, callback) {}

/**
 * @param {{namespace: (string|?), name: string}|{encoding: string, namespace: (string|?), name: string}} options
 * @param {?=} callback
 * @return {string|?|void}
 */
function v3(options, callback) {}

/**
 * @param {{encoding: string}|?=} options_or_callback
 * @param {?=} callback
 * @return {string|?|void}
 */
function v4(options_or_callback, callback) {}

/**
 * @param {{encoding: string}|?=} options_or_callback
 * @param {?=} callback
 * @return {string|?|void}
 */
function v4fast(options_or_callback, callback) {}

/**
 * @param {{namespace: (string|?), name: string}|{encoding: string, namespace: (string|?), name: string}} options
 * @param {?=} callback
 * @return {string|?|void}
 */
function v5(options, callback) {}
