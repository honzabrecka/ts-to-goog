/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/amcharts/index.d.ts:
/** @const */
var AmCharts = {};
 /** @type {boolean} */
AmCharts.baseHref;
 /** @type {!Array<string>} */
AmCharts.dayNames;
 /** @type {!Array<string>} */
AmCharts.monthNames;
 /** @type {!Array<string>} */
AmCharts.shortDayNames;
 /** @type {!Array<string>} */
AmCharts.shortMonthNames;
 /** @type {boolean} */
AmCharts.useUTC;
 /** @type {?} */
AmCharts.themes;

/**
 * Clears all the charts on page, removes listeners and intervals.
 * @return {void}
 */
AmCharts.clear = function() {};

/**
 * Handle ready event
 * @param {!Function} f
 * @return {void}
 */
AmCharts.ready = function(f) {};

/**
 * Create chart by params.
 * @param {string} selector
 * @param {?} params
 * @param {number=} delay
 * @return {!AmCharts.AmChart}
 */
AmCharts.makeChart = function(selector, params, delay) {};

/**
 * Set a method to be called before initializing the chart.
 * When the method is called, the chart instance is passed as an attribute.
 * You can use this feature to preprocess chart data or do some other things you need
 * before initializing the chart.
 * if none is passed.
 * @param {!Function} handler
 * @param {!Array<string>} types
 * @return {?}
 */
AmCharts.addInitHandler = function(handler, types) {};
/**
 * @extends {AmCharts.AmChart}
 * @constructor
 * @struct
 */
AmCharts.AmPieChart = function() {};
 /** @type {string} */
AmCharts.AmPieChart.prototype.alphaField;
 /** @type {number} */
AmCharts.AmPieChart.prototype.angle;
 /** @type {string} */
AmCharts.AmPieChart.prototype.balloonText;
 /** @type {!Array<?>} */
AmCharts.AmPieChart.prototype.chartData;
 /** @type {string} */
AmCharts.AmPieChart.prototype.colorField;
 /** @type {!Array<?>} */
AmCharts.AmPieChart.prototype.colors;
 /** @type {number} */
AmCharts.AmPieChart.prototype.depth3D;
 /** @type {string} */
AmCharts.AmPieChart.prototype.descriptionField;
 /** @type {!Array<number>} */
AmCharts.AmPieChart.prototype.gradientRatio;
 /** @type {number} */
AmCharts.AmPieChart.prototype.groupedAlpha;
 /** @type {string} */
AmCharts.AmPieChart.prototype.groupedColor;
 /** @type {string} */
AmCharts.AmPieChart.prototype.groupedDescription;
 /** @type {boolean} */
AmCharts.AmPieChart.prototype.groupedPulled;
 /** @type {string} */
AmCharts.AmPieChart.prototype.groupedTitle;
 /** @type {number} */
AmCharts.AmPieChart.prototype.groupPercent;
 /** @type {number} */
AmCharts.AmPieChart.prototype.hideLabelsPercent;
 /** @type {number} */
AmCharts.AmPieChart.prototype.hoverAlpha;
 /** @type {?} */
AmCharts.AmPieChart.prototype.innerRadius;
 /** @type {number} */
AmCharts.AmPieChart.prototype.labelRadius;
 /** @type {string} */
AmCharts.AmPieChart.prototype.labelRadiusField;
 /** @type {boolean} */
AmCharts.AmPieChart.prototype.labelsEnabled;
 /** @type {string} */
AmCharts.AmPieChart.prototype.labelText;
 /** @type {number} */
AmCharts.AmPieChart.prototype.labelTickAlpha;
 /** @type {string} */
AmCharts.AmPieChart.prototype.labelTickColor;
 /** @type {number} */
AmCharts.AmPieChart.prototype.marginBottom;
 /** @type {number} */
AmCharts.AmPieChart.prototype.marginLeft;
 /** @type {number} */
AmCharts.AmPieChart.prototype.marginRight;
 /** @type {number} */
AmCharts.AmPieChart.prototype.marginTop;
 /** @type {number} */
AmCharts.AmPieChart.prototype.minRadius;
 /** @type {number} */
AmCharts.AmPieChart.prototype.outlineAlpha;
 /** @type {string} */
AmCharts.AmPieChart.prototype.outlineColor;
 /** @type {number} */
AmCharts.AmPieChart.prototype.outlineThickness;
 /** @type {number} */
AmCharts.AmPieChart.prototype.pieAlpha;
 /** @type {string} */
AmCharts.AmPieChart.prototype.pieBaseColor;
 /** @type {number} */
AmCharts.AmPieChart.prototype.pieBrightnessStep;
 /** @type {?} */
AmCharts.AmPieChart.prototype.pieX;
 /** @type {?} */
AmCharts.AmPieChart.prototype.pieY;
 /** @type {string} */
AmCharts.AmPieChart.prototype.pulledField;
 /** @type {number} */
AmCharts.AmPieChart.prototype.pullOutDuration;
 /** @type {string} */
AmCharts.AmPieChart.prototype.pullOutEffect;
 /** @type {boolean} */
AmCharts.AmPieChart.prototype.pullOutOnlyOne;
 /** @type {?} */
AmCharts.AmPieChart.prototype.pullOutRadius;
 /** @type {?} */
AmCharts.AmPieChart.prototype.radius;
 /** @type {boolean} */
AmCharts.AmPieChart.prototype.sequencedAnimation;
 /** @type {number} */
AmCharts.AmPieChart.prototype.startAlpha;
 /** @type {number} */
AmCharts.AmPieChart.prototype.startAngle;
 /** @type {number} */
AmCharts.AmPieChart.prototype.startDuration;
 /** @type {string} */
AmCharts.AmPieChart.prototype.startEffect;
 /** @type {?} */
AmCharts.AmPieChart.prototype.startRadius;
 /** @type {string} */
AmCharts.AmPieChart.prototype.titleField;
 /** @type {string} */
AmCharts.AmPieChart.prototype.urlField;
 /** @type {string} */
AmCharts.AmPieChart.prototype.urlTarget;
 /** @type {string} */
AmCharts.AmPieChart.prototype.valueField;
 /** @type {string} */
AmCharts.AmPieChart.prototype.visibleInLegendField;

/**
 * You can trigger the animation of the pie chart.
 * @return {void}
 */
AmCharts.AmPieChart.prototype.animateAgain = function() {};

/**
 * You can trigger the click on a slice from outside. index - the number of a slice or Slice object.
 * @param {number} index
 * @return {void}
 */
AmCharts.AmPieChart.prototype.clickSlice = function(index) {};

/**
 * Hides slice. index - the number of a slice or Slice object.
 * @param {number} index
 * @return {void}
 */
AmCharts.AmPieChart.prototype.hideSlice = function(index) {};

/**
 * You can simulate roll-out of a slice from outside. index - the number of a slice or Slice object.
 * @param {number} index
 * @return {void}
 */
AmCharts.AmPieChart.prototype.rollOutSlice = function(index) {};

/**
 * You can simulate roll-over a slice from outside. index - the number of a slice or Slice object.
 * @param {number} index
 * @return {void}
 */
AmCharts.AmPieChart.prototype.rollOverSlice = function(index) {};

/**
 * Shows slice. index - the number of a slice or Slice object.
 * @param {number} index
 * @return {void}
 */
AmCharts.AmPieChart.prototype.showSlice = function(index) {};

/**
 * Adds event listener of the type "clickSlice" or "pullInSlice" or "pullOutSlice" to the object.
 * @param {string} type Always "clickSlice" or "pullInSlice" or "pullOutSlice".
 * @param {function({type: string, dataItem: !AmCharts.Slice, chart: !AmCharts.AmChart}): void} handler 
 * If the type is "clickSlice", dispatched when user clicks on a slice.
 * If the type is "pullInSlice", dispatched when user clicks on a slice and the slice is pulled-in.
 * If the type is "pullOutSlice", dispatched when user clicks on a slice and the slice is pulled-out.
 * If the type is "rollOutSlice", dispatched when user rolls-out of the slice.
 * If the type is "rollOverSlice", dispatched when user rolls-over the slice.
 * @return {void}
 */
AmCharts.AmPieChart.prototype.addListener = function(type, handler) {};
/**
 * @extends {AmCharts.AmCoordinateChart}
 * @constructor
 * @struct
 */
AmCharts.AmRadarChart = function() {};
 /** @type {number} */
AmCharts.AmRadarChart.prototype.marginBottom;
 /** @type {number} */
AmCharts.AmRadarChart.prototype.marginLeft;
 /** @type {number} */
AmCharts.AmRadarChart.prototype.marginRight;
 /** @type {number} */
AmCharts.AmRadarChart.prototype.marginTop;
 /** @type {?} */
AmCharts.AmRadarChart.prototype.radius;
/**
 * @extends {AmCharts.AmRectangularChart}
 * @constructor
 * @struct
 */
AmCharts.AmXYChart = function() {};
 /** @type {boolean} */
AmCharts.AmXYChart.prototype.hideXScrollbar;
 /** @type {boolean} */
AmCharts.AmXYChart.prototype.hideYScrollbar;
 /** @type {number} */
AmCharts.AmXYChart.prototype.maxZoomFactor;

/**
 * Zooms out, charts shows all available data.
 * @return {void}
 */
AmCharts.AmXYChart.prototype.zoomOut = function() {};
/**
 * @constructor
 * @struct
 */
AmCharts.Guide = function() {};
 /** @type {boolean} */
AmCharts.Guide.prototype.above;
 /** @type {number} */
AmCharts.Guide.prototype.angle;
 /** @type {string} */
AmCharts.Guide.prototype.balloonColor;
 /** @type {string} */
AmCharts.Guide.prototype.balloonText;
 /** @type {boolean} */
AmCharts.Guide.prototype.boldLabel;
 /** @type {string} */
AmCharts.Guide.prototype.category;
 /** @type {number} */
AmCharts.Guide.prototype.dashLength;
 /** @type {!Date} */
AmCharts.Guide.prototype.date;
 /** @type {boolean} */
AmCharts.Guide.prototype.expand;
 /** @type {number} */
AmCharts.Guide.prototype.fillAlpha;
 /** @type {string} */
AmCharts.Guide.prototype.fillColor;
 /** @type {string} */
AmCharts.Guide.prototype.fontSize;
 /** @type {string} */
AmCharts.Guide.prototype.id;
 /** @type {boolean} */
AmCharts.Guide.prototype.inside;
 /** @type {string} */
AmCharts.Guide.prototype.label;
 /** @type {number} */
AmCharts.Guide.prototype.labelRotation;
 /** @type {number} */
AmCharts.Guide.prototype.lineAlpha;
 /** @type {string} */
AmCharts.Guide.prototype.lineColor;
 /** @type {number} */
AmCharts.Guide.prototype.lineThickness;
 /** @type {string} */
AmCharts.Guide.prototype.position;
 /** @type {number} */
AmCharts.Guide.prototype.tickLength;
 /** @type {number} */
AmCharts.Guide.prototype.toAngle;
 /** @type {string} */
AmCharts.Guide.prototype.toCategory;
 /** @type {!Date} */
AmCharts.Guide.prototype.toDate;
 /** @type {number} */
AmCharts.Guide.prototype.toValue;
 /** @type {number} */
AmCharts.Guide.prototype.value;
 /** @type {!AmCharts.ValueAxis} */
AmCharts.Guide.prototype.valueAxis;
/**
 * @constructor
 * @struct
 */
AmCharts.ImagesSettings = function() {};
 /** @type {number} */
AmCharts.ImagesSettings.prototype.alpha;
 /** @type {string} */
AmCharts.ImagesSettings.prototype.balloonText;
 /** @type {boolean} */
AmCharts.ImagesSettings.prototype.centered;
 /** @type {string} */
AmCharts.ImagesSettings.prototype.color;
 /** @type {number} */
AmCharts.ImagesSettings.prototype.descriptionWindowHeight;
 /** @type {number} */
AmCharts.ImagesSettings.prototype.descriptionWindowWidth;
 /** @type {number} */
AmCharts.ImagesSettings.prototype.descriptionWindowX;
 /** @type {number} */
AmCharts.ImagesSettings.prototype.descriptionWindowY;
 /** @type {string} */
AmCharts.ImagesSettings.prototype.labelColor;
 /** @type {string} */
AmCharts.ImagesSettings.prototype.labelfontSize;
 /** @type {string} */
AmCharts.ImagesSettings.prototype.labelPosition;
 /** @type {string} */
AmCharts.ImagesSettings.prototype.labelRollOverColor;
 /** @type {number} */
AmCharts.ImagesSettings.prototype.outlineAlpha;
 /** @type {string} */
AmCharts.ImagesSettings.prototype.outlineColor;
 /** @type {number} */
AmCharts.ImagesSettings.prototype.outlineThickness;
 /** @type {string} */
AmCharts.ImagesSettings.prototype.rollOverColor;
 /** @type {number} */
AmCharts.ImagesSettings.prototype.rollOverScale;
 /** @type {number} */
AmCharts.ImagesSettings.prototype.selectedScale;
/**
 * @constructor
 * @struct
 */
AmCharts.AreasSettings = function() {};
 /** @type {number} */
AmCharts.AreasSettings.prototype.alpha;
 /** @type {boolean} */
AmCharts.AreasSettings.prototype.autoZoom;
 /** @type {string} */
AmCharts.AreasSettings.prototype.balloonText;
 /** @type {string} */
AmCharts.AreasSettings.prototype.color;
 /** @type {string} */
AmCharts.AreasSettings.prototype.colorSolid;
 /** @type {number} */
AmCharts.AreasSettings.prototype.descriptionWindowHeight;
 /** @type {number} */
AmCharts.AreasSettings.prototype.descriptionWindowWidth;
 /** @type {number} */
AmCharts.AreasSettings.prototype.descriptionWindowX;
 /** @type {number} */
AmCharts.AreasSettings.prototype.descriptionWindowY;
 /** @type {number} */
AmCharts.AreasSettings.prototype.outlineAlpha;
 /** @type {string} */
AmCharts.AreasSettings.prototype.outlineColor;
 /** @type {number} */
AmCharts.AreasSettings.prototype.outlineThickness;
 /** @type {string} */
AmCharts.AreasSettings.prototype.rollOverColor;
 /** @type {string} */
AmCharts.AreasSettings.prototype.rollOverOutlineColor;
 /** @type {string} */
AmCharts.AreasSettings.prototype.selectedColor;
 /** @type {number} */
AmCharts.AreasSettings.prototype.unlistedAreasAlpha;
 /** @type {string} */
AmCharts.AreasSettings.prototype.unlistedAreasColor;
 /** @type {number} */
AmCharts.AreasSettings.prototype.unlistedAreasOutlineAlpha;
 /** @type {string} */
AmCharts.AreasSettings.prototype.unlistedAreasOutlineColor;
/**
 * @constructor
 * @struct
 */
AmCharts.Slice = function() {};
 /** @type {number} */
AmCharts.Slice.prototype.alpha;
 /** @type {string} */
AmCharts.Slice.prototype.color;
 /** @type {!Object} */
AmCharts.Slice.prototype.dataContext;
 /** @type {string} */
AmCharts.Slice.prototype.description;
 /** @type {boolean} */
AmCharts.Slice.prototype.hidden;
 /** @type {number} */
AmCharts.Slice.prototype.percents;
 /** @type {boolean} */
AmCharts.Slice.prototype.pulled;
 /** @type {string} */
AmCharts.Slice.prototype.title;
 /** @type {string} */
AmCharts.Slice.prototype.url;
 /** @type {number} */
AmCharts.Slice.prototype.value;
 /** @type {boolean} */
AmCharts.Slice.prototype.visibleInLegend;
/**
 * @constructor
 * @struct
 */
AmCharts.AmStockChart = function() {};
 /** @type {boolean} */
AmCharts.AmStockChart.prototype.animationPlayed;
 /** @type {!AmCharts.AmBalloon} */
AmCharts.AmStockChart.prototype.balloon;
 /** @type {!AmCharts.CategoryAxesSettings} */
AmCharts.AmStockChart.prototype.categoryAxesSettings;
 /** @type {boolean} */
AmCharts.AmStockChart.prototype.chartCreated;
 /** @type {!AmCharts.ChartCursorSettings} */
AmCharts.AmStockChart.prototype.chartCursorSettings;
 /** @type {!AmCharts.ChartScrollbarSettings} */
AmCharts.AmStockChart.prototype.chartScrollbarSettings;
 /** @type {!Array<?>} */
AmCharts.AmStockChart.prototype.colors;
 /** @type {!Array<?>} */
AmCharts.AmStockChart.prototype.comparedDataSets;
 /** @type {!Array<?>} */
AmCharts.AmStockChart.prototype.dataSets;
 /** @type {!AmCharts.DataSetSelector} */
AmCharts.AmStockChart.prototype.dataSetSelector;
 /** @type {!Date} */
AmCharts.AmStockChart.prototype.endDate;
 /** @type {number} */
AmCharts.AmStockChart.prototype.firstDayOfWeek;
 /** @type {boolean} */
AmCharts.AmStockChart.prototype.glueToTheEnd;
 /** @type {!AmCharts.LegendSettings} */
AmCharts.AmStockChart.prototype.legendSettings;
 /** @type {!AmCharts.DataSet} */
AmCharts.AmStockChart.prototype.mainDataSet;
 /** @type {!Array<?>} */
AmCharts.AmStockChart.prototype.panels;
 /** @type {!AmCharts.PanelsSettings} */
AmCharts.AmStockChart.prototype.panelsSettings;
 /** @type {!AmCharts.PeriodSelector} */
AmCharts.AmStockChart.prototype.periodSelector;
 /** @type {!AmCharts.AmSerialChart} */
AmCharts.AmStockChart.prototype.scrollbarChart;
 /** @type {!Date} */
AmCharts.AmStockChart.prototype.startDate;
 /** @type {?} */
AmCharts.AmStockChart.prototype.stockEventsSettings;
 /** @type {!AmCharts.ValueAxesSettings} */
AmCharts.AmStockChart.prototype.valueAxesSettings;
 /** @type {string} */
AmCharts.AmStockChart.prototype.version;
 /** @type {boolean} */
AmCharts.AmStockChart.prototype.zoomOutOnDataSetChange;

/**
 * Adds panel to the stock chart. Requires stockChart.validateNow() method to be called after this action.
 * @param {!AmCharts.StockPanel} panel
 * @return {void}
 */
AmCharts.AmStockChart.prototype.addPanel = function(panel) {};

/**
 * Adds panel to the stock chart at a specified index. Requires stockChart.validateNow() method to be called after this action.
 * @param {!AmCharts.StockPanel} panel
 * @param {number} index
 * @return {void}
 */
AmCharts.AmStockChart.prototype.addPanelAt = function(panel, index) {};

/**
 * Destroys chart, all timeouts and listeners.
 * @return {void}
 */
AmCharts.AmStockChart.prototype.clear = function() {};

/**
 * Hides event bullets.
 * @return {void}
 */
AmCharts.AmStockChart.prototype.hideStockEvents = function() {};

/**
 * Removes event listener from the object.
 * Removes event listener from chart object.
 * @param {?|!AmCharts.AmChart} obj_or_chart
 * @param {string} type
 * @param {?} handler
 * @return {void}
 */
AmCharts.AmStockChart.prototype.removeListener = function(obj_or_chart, type, handler) {};

/**
 * Removes panel from the stock chart. Requires stockChart.validateNow() method to be called after this action.
 * @param {!AmCharts.StockPanel} panel
 * @return {void}
 */
AmCharts.AmStockChart.prototype.removePanel = function(panel) {};

/**
 * Shows event bullets.
 * @return {void}
 */
AmCharts.AmStockChart.prototype.showStockEvents = function() {};

/**
 * Method which should be called after data was changed.
 * @return {void}
 */
AmCharts.AmStockChart.prototype.validateData = function() {};

/**
 * Method which forces the stock chart to rebuild. Should be called after properties are changed.
 * @return {void}
 */
AmCharts.AmStockChart.prototype.validateNow = function() {};

/**
 * Zooms chart to specified dates. startDate, endDate - Date objects.
 * @param {!Date} startDate
 * @param {!Date} endDate
 * @return {void}
 */
AmCharts.AmStockChart.prototype.zoom = function(startDate, endDate) {};

/**
 * Zooms out the chart.
 * @return {void}
 */
AmCharts.AmStockChart.prototype.zoomOut = function() {};

/**
 * Adds event listener of the type "dataUpdated" or "init" or "rendered" to the object.
 * Adds event listener of the type "rollOutStockEvent" or "rollOverStockEvent" or "clickStockEvent" to the object.
 * Adds event listener of the type "zoomed" to the object.
 * Adds event listener of the type "panelRemoved" to the object.
 * @param {string} type Always "dataUpdated" or "init" or "rendered". /     // Either "rollOutStockEvent" or "rollOverStockEvent" or "clickStockEvent". / Always "zoomed". / Always "panelRemoved".
 * @param {function({type: string, chart: !AmCharts.AmStockChart}): void|function({type: string, eventObject: ?, graph: !AmCharts.AmGraph, date: !Date, chart: !AmCharts.AmStockChart}): void|function({type: string, startDate: !Date, endDate: !Date, period: string, chart: !AmCharts.AmStockChart}): void|function({type: string, panel: !AmCharts.StockPanel, chart: !AmCharts.AmStockChart}): void} handler 
 * If the type is "dataUpdated", dispatched when the chart was updated with new data.
 * If the type is "init", dispatched when the chart is initialized for the first time. In case you want it to fire again after validateNow() method is called, set chart.chartCreated = false.
 * If the type is "rendered", dispatched each when chart is rendered. / 
 * If the type is "rollOutStockEvent", dispatched when the user rolls-out of the Stock event (bullet).
 * If the type is "rollOverStockEvent", dispatched when the user rolls-over of the Stock event (bullet).
 * If the type is "clickStockEvent", dispatched when the user clicks on the Stock event (bullet). / Dispatched when the chart is zoomed (even for the first time, when chart is initialized). / Dispatched when the StockPanel is removed.
 * @return {void}
 */
AmCharts.AmStockChart.prototype.addListener = function(type, handler) {};
/**
 * @constructor
 * @struct
 */
AmCharts.ValueAxesSettings = function() {};
 /** @type {boolean} */
AmCharts.ValueAxesSettings.prototype.autoGridCount;
 /** @type {number} */
AmCharts.ValueAxesSettings.prototype.axisAlpha;
 /** @type {string} */
AmCharts.ValueAxesSettings.prototype.axisColor;
 /** @type {number} */
AmCharts.ValueAxesSettings.prototype.axisThickness;
 /** @type {string} */
AmCharts.ValueAxesSettings.prototype.color;
 /** @type {number} */
AmCharts.ValueAxesSettings.prototype.dashLength;
 /** @type {number} */
AmCharts.ValueAxesSettings.prototype.fillAlpha;
 /** @type {string} */
AmCharts.ValueAxesSettings.prototype.fillColor;
 /** @type {number} */
AmCharts.ValueAxesSettings.prototype.gridAlpha;
 /** @type {string} */
AmCharts.ValueAxesSettings.prototype.gridColor;
 /** @type {number} */
AmCharts.ValueAxesSettings.prototype.gridCount;
 /** @type {number} */
AmCharts.ValueAxesSettings.prototype.gridThickness;
 /** @type {boolean} */
AmCharts.ValueAxesSettings.prototype.includeGuidesInMinMax;
 /** @type {boolean} */
AmCharts.ValueAxesSettings.prototype.includeHidden;
 /** @type {boolean} */
AmCharts.ValueAxesSettings.prototype.inside;
 /** @type {boolean} */
AmCharts.ValueAxesSettings.prototype.integersOnly;
 /** @type {number} */
AmCharts.ValueAxesSettings.prototype.labelFrequency;
 /** @type {boolean} */
AmCharts.ValueAxesSettings.prototype.labelsEnabled;
 /** @type {boolean} */
AmCharts.ValueAxesSettings.prototype.logarithmic;
 /** @type {number} */
AmCharts.ValueAxesSettings.prototype.offset;
 /** @type {string} */
AmCharts.ValueAxesSettings.prototype.position;
 /** @type {boolean} */
AmCharts.ValueAxesSettings.prototype.reversed;
 /** @type {boolean} */
AmCharts.ValueAxesSettings.prototype.showFirstLabel;
 /** @type {boolean} */
AmCharts.ValueAxesSettings.prototype.showLastLabel;
 /** @type {string} */
AmCharts.ValueAxesSettings.prototype.stackType;
 /** @type {number} */
AmCharts.ValueAxesSettings.prototype.tickLength;
 /** @type {string} */
AmCharts.ValueAxesSettings.prototype.unit;
 /** @type {string} */
AmCharts.ValueAxesSettings.prototype.unitPosition;
/**
 * @constructor
 * @struct
 */
AmCharts.AmLegend = function() {};
 /** @type {string} */
AmCharts.AmLegend.prototype.align;
 /** @type {boolean} */
AmCharts.AmLegend.prototype.autoMargins;
 /** @type {number} */
AmCharts.AmLegend.prototype.backgroundAlpha;
 /** @type {string} */
AmCharts.AmLegend.prototype.backgroundColor;
 /** @type {number} */
AmCharts.AmLegend.prototype.borderAlpha;
 /** @type {string} */
AmCharts.AmLegend.prototype.borderColor;
 /** @type {number} */
AmCharts.AmLegend.prototype.bottom;
 /** @type {string} */
AmCharts.AmLegend.prototype.color;
 /** @type {!Array<?>} */
AmCharts.AmLegend.prototype.data;
 /** @type {boolean} */
AmCharts.AmLegend.prototype.equalWidths;
 /** @type {string} */
AmCharts.AmLegend.prototype.fontSize;
 /** @type {number} */
AmCharts.AmLegend.prototype.horizontalGap;
 /** @type {string} */
AmCharts.AmLegend.prototype.labelText;
 /** @type {number} */
AmCharts.AmLegend.prototype.left;
 /** @type {number} */
AmCharts.AmLegend.prototype.marginBottom;
 /** @type {number} */
AmCharts.AmLegend.prototype.marginLeft;
 /** @type {number} */
AmCharts.AmLegend.prototype.marginRight;
 /** @type {number} */
AmCharts.AmLegend.prototype.marginTop;
 /** @type {number} */
AmCharts.AmLegend.prototype.markerBorderAlpha;
 /** @type {string} */
AmCharts.AmLegend.prototype.markerBorderColor;
 /** @type {number} */
AmCharts.AmLegend.prototype.markerBorderThickness;
 /** @type {string} */
AmCharts.AmLegend.prototype.markerDisabledColor;
 /** @type {number} */
AmCharts.AmLegend.prototype.markerLabelGap;
 /** @type {number} */
AmCharts.AmLegend.prototype.markerSize;
 /** @type {string} */
AmCharts.AmLegend.prototype.markerType;
 /** @type {number} */
AmCharts.AmLegend.prototype.maxColumns;
 /** @type {string} */
AmCharts.AmLegend.prototype.position;
 /** @type {boolean} */
AmCharts.AmLegend.prototype.reversedOrder;
 /** @type {number} */
AmCharts.AmLegend.prototype.right;
 /** @type {string} */
AmCharts.AmLegend.prototype.rollOverColor;
 /** @type {number} */
AmCharts.AmLegend.prototype.rollOverGraphAlpha;
 /** @type {boolean} */
AmCharts.AmLegend.prototype.showEntries;
 /** @type {number} */
AmCharts.AmLegend.prototype.spacing;
 /** @type {boolean} */
AmCharts.AmLegend.prototype.switchable;
 /** @type {string} */
AmCharts.AmLegend.prototype.switchColor;
 /** @type {string} */
AmCharts.AmLegend.prototype.switchType;
 /** @type {boolean} */
AmCharts.AmLegend.prototype.textClickEnabled;
 /** @type {number} */
AmCharts.AmLegend.prototype.top;
 /** @type {boolean} */
AmCharts.AmLegend.prototype.useGraphSettings;
 /** @type {boolean} */
AmCharts.AmLegend.prototype.useMarkerColorForLabels;
 /** @type {string} */
AmCharts.AmLegend.prototype.valueAlign;
 /** @type {string} */
AmCharts.AmLegend.prototype.valueText;
 /** @type {number} */
AmCharts.AmLegend.prototype.valueWidth;
 /** @type {number} */
AmCharts.AmLegend.prototype.verticalGap;

/**
 * Adds event listener of the type "showItem" to the object.
 * @param {string} type Always "showItem".
 * @param {function({type: string, dataItem: !Object, chart: !AmCharts.AmChart}): void} handler
 * @return {void}
 */
AmCharts.AmLegend.prototype.addListener = function(type, handler) {};

/**
 * Removes event listener from chart object.
 * @param {!AmCharts.AmChart} chart
 * @param {string} type
 * @param {?} handler
 * @return {void}
 */
AmCharts.AmLegend.prototype.removeListener = function(chart, type, handler) {};
/**
 * @extends {AmCharts.AmLegend}
 * @constructor
 * @struct
 */
AmCharts.StockLegend = function() {};
 /** @type {string} */
AmCharts.StockLegend.prototype.valueTextComparing;
 /** @type {string} */
AmCharts.StockLegend.prototype.valueTextRegular;
/**
 * @extends {AmCharts.AmSerialChart}
 * @constructor
 * @struct
 */
AmCharts.StockPanel = function() {};
 /** @type {boolean} */
AmCharts.StockPanel.prototype.allowTurningOff;
 /** @type {boolean} */
AmCharts.StockPanel.prototype.drawingIconsEnabled;
 /** @type {!AmCharts.ValueAxis} */
AmCharts.StockPanel.prototype.drawOnAxis;
 /** @type {boolean} */
AmCharts.StockPanel.prototype.eraseAll;
 /** @type {number} */
AmCharts.StockPanel.prototype.iconSize;
 /** @type {number} */
AmCharts.StockPanel.prototype.percentHeight;
 /** @type {string} */
AmCharts.StockPanel.prototype.recalculateToPercents;
 /** @type {boolean} */
AmCharts.StockPanel.prototype.showCategoryAxis;
 /** @type {!Array<!AmCharts.StockGraph>} */
AmCharts.StockPanel.prototype.stockGraphs;
 /** @type {!AmCharts.StockLegend} */
AmCharts.StockPanel.prototype.stockLegend;
 /** @type {string} */
AmCharts.StockPanel.prototype.title;
 /** @type {number} */
AmCharts.StockPanel.prototype.trendLineAlpha;
 /** @type {string} */
AmCharts.StockPanel.prototype.trendLineColor;
 /** @type {number} */
AmCharts.StockPanel.prototype.trendLineDashLength;
 /** @type {number} */
AmCharts.StockPanel.prototype.trendLineThickness;

/**
 * Adds a graph to the panel.
 * @param {!AmCharts.StockGraph} graph
 * @return {void}
 */
AmCharts.StockPanel.prototype.addStockGraph = function(graph) {};

/**
 * Removes graph from the panel.
 * @param {!AmCharts.StockGraph} graph
 * @return {void}
 */
AmCharts.StockPanel.prototype.removeStockGraph = function(graph) {};

/**
 * @constructor
 * @struct
 * used when constructing a chart with a theme
 * @param {?=} theme
 */
AmCharts.AmChart = function(theme) {};
 /** @type {boolean} */
AmCharts.AmChart.prototype.addClassNames;
 /** @type {!Array<!AmCharts.Label>} */
AmCharts.AmChart.prototype.allLabels;
 /** @type {boolean} */
AmCharts.AmChart.prototype.autoResize;
 /** @type {number} */
AmCharts.AmChart.prototype.backgroundAlpha;
 /** @type {string} */
AmCharts.AmChart.prototype.backgroundColor;
 /** @type {!AmCharts.AmBalloon} */
AmCharts.AmChart.prototype.balloon;
 /** @type {number} */
AmCharts.AmChart.prototype.borderAlpha;
 /** @type {string} */
AmCharts.AmChart.prototype.borderColor;
 /** @type {string} */
AmCharts.AmChart.prototype.classNamePrefix;
 /** @type {string} */
AmCharts.AmChart.prototype.color;
 /** @type {string} */
AmCharts.AmChart.prototype.creditsPosition;
 /** @type {!Array<?>} */
AmCharts.AmChart.prototype.dataProvider;
 /** @type {string} */
AmCharts.AmChart.prototype.decimalSeparator;
 /** @type {?} */
AmCharts.AmChart.prototype.defs;
 /** @type {!AmCharts.ExportSettings} */
AmCharts.AmChart.prototype.export;
 /** @type {string} */
AmCharts.AmChart.prototype.fontFamily;
 /** @type {string} */
AmCharts.AmChart.prototype.fontSize;
 /** @type {boolean} */
AmCharts.AmChart.prototype.handDrawn;
 /** @type {number} */
AmCharts.AmChart.prototype.handDrawScatter;
 /** @type {number} */
AmCharts.AmChart.prototype.handDrawThickness;
 /** @type {number} */
AmCharts.AmChart.prototype.hideBalloonTime;
 /** @type {!AmCharts.AmLegend} */
AmCharts.AmChart.prototype.legend;
 /** @type {!HTMLElement} */
AmCharts.AmChart.prototype.legendDiv;
 /** @type {!Array<!Object>} */
AmCharts.AmChart.prototype.listerns;
 /** @type {boolean} */
AmCharts.AmChart.prototype.panEventsEnabled;
 /** @type {string} */
AmCharts.AmChart.prototype.path;
 /** @type {string} */
AmCharts.AmChart.prototype.pathToImages;
 /** @type {number} */
AmCharts.AmChart.prototype.percentPrecision;
 /** @type {number} */
AmCharts.AmChart.prototype.precision;
 /** @type {!Array<?>} */
AmCharts.AmChart.prototype.prefixesOfBigNumbers;
 /** @type {!Array<?>} */
AmCharts.AmChart.prototype.prefixesOfSmallNumbers;
 /** @type {string} */
AmCharts.AmChart.prototype.theme;
 /** @type {string} */
AmCharts.AmChart.prototype.thousandsSeparator;
 /** @type {!Array<!AmCharts.Title>} */
AmCharts.AmChart.prototype.titles;
 /** @type {string} */
AmCharts.AmChart.prototype.type;
 /** @type {boolean} */
AmCharts.AmChart.prototype.usePrefixes;
 /** @type {string} */
AmCharts.AmChart.prototype.version;

/**
 * Adds a label on a chart.
 * You can use it for labeling axes, adding chart title, etc. x and y coordinates can be set in number, percent, or a number with ! in front of it - coordinate will be calculated from right or bottom instead of left or top.
 * x - horizontal coordinate
 * y - vertical coordinate
 * text - label's text
 * align - alignment (left/right/center)
 * size - text size
 * color - text color
 * rotation - angle of rotation
 * alpha - label alpha
 * bold - specifies if text is bold (true/false),
 * url - url
 * @param {(string|number)} x
 * @param {(string|number)} y
 * @param {string} text
 * @param {string} align
 * @param {number=} size
 * @param {string=} color
 * @param {number=} rotation
 * @param {number=} alpha
 * @param {boolean=} bold
 * @param {string=} url
 * @return {?}
 */
AmCharts.AmChart.prototype.addLabel = function(x, y, text, align, size, color, rotation, alpha, bold, url) {};

/**
 * Adds a legend to the chart.
 * By default, you don't need to create div for your legend, however if you want it to be positioned in some different way, you can create div anywhere you want and pass id or reference to your div as a second parameter.
 * (NOTE: This method will not work on StockPanel.)
 * Adds a legend to the chart.
 * By default, you don't need to create div for your legend, however if you want it to be positioned in some different way, you can create div anywhere you want and pass id or reference to your div as a second parameter.
 * (NOTE: This method will not work on StockPanel.)
 * @param {!AmCharts.AmLegend} legend
 * @param {string|!HTMLElement=} legendDivId_or_legendDiv - Id of the legend div (optional). / - Legend div (optional).
 * @return {void}
 */
AmCharts.AmChart.prototype.addLegend = function(legend, legendDivId_or_legendDiv) {};

/**
 * Adds title to the top of the chart. Pie, Radar positions are updated so that they won't overlap. Plot area of Serial/XY chart is also updated unless autoMargins property is set to false. You can add any number of titles - each of them will be placed in a new line. To remove titles, simply clear titles array: chart.titles = []; and call chart.validateNow() method. text - text of a title size - font size color - title color alpha - title opacity bold - boolean value indicating if title should be bold.
 * @param {string} text
 * @param {number} size
 * @param {string} color
 * @param {number} alpha
 * @param {boolean} bold
 * @return {void}
 */
AmCharts.AmChart.prototype.addTitle = function(text, size, color, alpha, bold) {};

/**
 * Clears the chart area, intervals, etc.
 * @return {void}
 */
AmCharts.AmChart.prototype.clear = function() {};

/**
 * Removes all labels added to the chart.
 * @return {void}
 */
AmCharts.AmChart.prototype.clearLabels = function() {};

/**
 * Use this method to force the chart to resize to it's current container size.
 * @return {void}
 */
AmCharts.AmChart.prototype.invalidateSize = function() {};

/**
 * Removes chart's legend.
 * @return {void}
 */
AmCharts.AmChart.prototype.removeLegend = function() {};

/**
 * This method should be called after data in your data provider changed or a new array was set to dataProvider. After calling this method the chart will parse data and redraw.
 * @return {void}
 */
AmCharts.AmChart.prototype.validateData = function() {};

/**
 * This method should be called after you changed one or more properties of any class. The chart will redraw after this method is called.
 * @return {void}
 */
AmCharts.AmChart.prototype.validateNow = function() {};

/**
 * Adds chart to the specified DIV.
 * Adds chart to the specified DIV.
 * @param {!HTMLElement|string} container DIV object which will hold the chart. / Id of a DIV which will hold the chart.
 * @return {void}
 */
AmCharts.AmChart.prototype.write = function(container) {};

/**
 * Adds event listener of the type "dataUpdated" or "init" to the object.
 * @param {string} type "dataUpdated" or "init".
 * @param {function({type: string, chart: !AmCharts.AmChart}): void} handler 
 * If the type is "dataUpdated".
 * Dispatched when chart is build for the first time or after validateData() method was called.
 * If the type is "init".
 * Dispatched when chart is build for the first time.
 * @return {void}
 */
AmCharts.AmChart.prototype.addListener = function(type, handler) {};

/**
 * Removes event listener from chart object.
 * @param {!AmCharts.AmChart} chart
 * @param {string} type
 * @param {?} handler
 * @return {void}
 */
AmCharts.AmChart.prototype.removeListener = function(chart, type, handler) {};
/**
 * @extends {AmCharts.AmChart}
 * @constructor
 * @struct
 */
AmCharts.AmCoordinateChart = function() {};
 /** @type {!Array<!Object>} */
AmCharts.AmCoordinateChart.prototype.chartData;
 /** @type {!Array<string>} */
AmCharts.AmCoordinateChart.prototype.colors;
 /** @type {!Array<!AmCharts.AmGraph>} */
AmCharts.AmCoordinateChart.prototype.graphs;
 /** @type {boolean} */
AmCharts.AmCoordinateChart.prototype.gridAboveGraphs;
 /** @type {!Array<!AmCharts.Guide>} */
AmCharts.AmCoordinateChart.prototype.guides;
 /** @type {boolean} */
AmCharts.AmCoordinateChart.prototype.sequencedAnimation;
 /** @type {number} */
AmCharts.AmCoordinateChart.prototype.startAlpha;
 /** @type {number} */
AmCharts.AmCoordinateChart.prototype.startDuration;
 /** @type {string} */
AmCharts.AmCoordinateChart.prototype.startEffect;
 /** @type {?} */
AmCharts.AmCoordinateChart.prototype.urlTarget;
 /** @type {!Array<?>} */
AmCharts.AmCoordinateChart.prototype.valueAxes;

/**
 * Adds a graph to the chart.
 * @param {!AmCharts.AmGraph} graph
 * @return {void}
 */
AmCharts.AmCoordinateChart.prototype.addGraph = function(graph) {};

/**
 * Adds value axis to the chart.
 * One value axis is created automatically, so if you don't want to change anything or add more value axes, you don't need to add it.
 * @param {!AmCharts.ValueAxis} axis
 * @return {void}
 */
AmCharts.AmCoordinateChart.prototype.addValueAxis = function(axis) {};

/**
 * You can trigger the animation of the chart.
 * @return {void}
 */
AmCharts.AmCoordinateChart.prototype.animateAgain = function() {};

/**
 * AmGraph Returns graph by id.
 * @param {string} graphId
 * @return {!AmCharts.AmGraph}
 */
AmCharts.AmCoordinateChart.prototype.getGraphById = function(graphId) {};

/**
 * Returns value axis by id.
 * @param {string} axisId
 * @return {!AmCharts.ValueAxis}
 */
AmCharts.AmCoordinateChart.prototype.getValueAxisById = function(axisId) {};

/**
 * Hide the graph (if it is visible). Usually this method is called from the Legend, when you click on the legend marker.
 * @param {!AmCharts.AmGraph} graph
 * @return {void}
 */
AmCharts.AmCoordinateChart.prototype.hideGraph = function(graph) {};

/**
 * Hide value balloon of a graph. Usually this method is called from the Legend, when you click on the legend text.
 * @param {!AmCharts.AmGraph} graph
 * @return {void}
 */
AmCharts.AmCoordinateChart.prototype.hideGraphsBalloon = function(graph) {};

/**
 * Highlight the graph. Usually this method is called from the Legend, when you roll-over the legend entry.
 * @param {!AmCharts.AmGraph} graph
 * @return {void}
 */
AmCharts.AmCoordinateChart.prototype.highlightGraph = function(graph) {};

/**
 * Removes graph from the chart.
 * @param {!AmCharts.AmGraph} graph
 * @return {void}
 */
AmCharts.AmCoordinateChart.prototype.removeGraph = function(graph) {};

/**
 * Removes value axis from the chart. When you remove value axis, all graphs assigned to this axis are also removed.
 * @param {!AmCharts.ValueAxis} axis
 * @return {void}
 */
AmCharts.AmCoordinateChart.prototype.removeValueAxis = function(axis) {};

/**
 * Show the graph (if it is hidden). Usually this method is called from the Legend, when you click on the legend marker.
 * @param {!AmCharts.AmGraph} graph
 * @return {void}
 */
AmCharts.AmCoordinateChart.prototype.showGraph = function(graph) {};

/**
 * Show value balloon of a graph. Usually this method is called from the Legend, when you click on the legend text.
 * @param {!AmCharts.AmGraph} graph
 * @return {void}
 */
AmCharts.AmCoordinateChart.prototype.showGraphsBalloon = function(graph) {};

/**
 * UnhighlightGraph the graph. Usually this method is called from the Legend, when you roll-out the legend entry.
 * @param {!AmCharts.AmGraph} graph
 * @return {void}
 */
AmCharts.AmCoordinateChart.prototype.unhighlightGraph = function(graph) {};

/**
 * Adds event listener of the type "clickGraphItem" or "doubleClickGraphItem" or "rightClickGraphItem" or "rollOutGraphItem" or "rollOverGraphItem" to the object.
 * @param {string} type Either "clickGraphItem" or "doubleClickGraphItem" or "rightClickGraphItem" or "rollOutGraphItem" or "rollOverGraphItem".
 * @param {function({type: string, graph: !AmCharts.AmGraph, item: !AmCharts.GraphDataItem, index: number, chart: !AmCharts.AmChart}): void} handler Dispatched when user clicks on the data item (column/bullet)
 * @return {void}
 */
AmCharts.AmCoordinateChart.prototype.addListener = function(type, handler) {};
/**
 * @constructor
 * @struct
 */
AmCharts.GraphDataItem = function() {};
 /** @type {number} */
AmCharts.GraphDataItem.prototype.alpha;
 /** @type {string} */
AmCharts.GraphDataItem.prototype.bullet;
 /** @type {number} */
AmCharts.GraphDataItem.prototype.bulletSize;
 /** @type {string} */
AmCharts.GraphDataItem.prototype.category;
 /** @type {string} */
AmCharts.GraphDataItem.prototype.color;
 /** @type {string} */
AmCharts.GraphDataItem.prototype.customBullet;
 /** @type {!Object} */
AmCharts.GraphDataItem.prototype.dataContext;
 /** @type {string} */
AmCharts.GraphDataItem.prototype.description;
 /** @type {!Array<?>} */
AmCharts.GraphDataItem.prototype.fillColors;
 /** @type {!Object} */
AmCharts.GraphDataItem.prototype.percents;
 /** @type {!AmCharts.SerialDataItem} */
AmCharts.GraphDataItem.prototype.serialDataItem;
 /** @type {string} */
AmCharts.GraphDataItem.prototype.url;
 /** @type {!Object} */
AmCharts.GraphDataItem.prototype.values;
 /** @type {number} */
AmCharts.GraphDataItem.prototype.x;
 /** @type {number} */
AmCharts.GraphDataItem.prototype.y;
/**
 * @constructor
 * @struct
 */
AmCharts.SerialDataItem = function() {};
 /** @type {!Object} */
AmCharts.SerialDataItem.prototype.axes;
 /** @type {?} */
AmCharts.SerialDataItem.prototype.category;
 /** @type {number} */
AmCharts.SerialDataItem.prototype.time;
 /** @type {number} */
AmCharts.SerialDataItem.prototype.x;
/**
 * @extends {AmCharts.AxisBase}
 * @constructor
 * @struct
 */
AmCharts.CategoryAxis = function() {};
 /** @type {boolean} */
AmCharts.CategoryAxis.prototype.boldPeriodBeginning;
 /** @type {!Array<?>} */
AmCharts.CategoryAxis.prototype.dateFormats;
 /** @type {boolean} */
AmCharts.CategoryAxis.prototype.equalSpacing;
 /** @type {string} */
AmCharts.CategoryAxis.prototype.forceShowField;
 /** @type {string} */
AmCharts.CategoryAxis.prototype.gridPosition;
 /** @type {boolean} */
AmCharts.CategoryAxis.prototype.minorGridEnabled;
 /** @type {string} */
AmCharts.CategoryAxis.prototype.minPeriod;
 /** @type {boolean} */
AmCharts.CategoryAxis.prototype.parseDates;
 /** @type {boolean} */
AmCharts.CategoryAxis.prototype.startOnAxis;
 /** @type {boolean} */
AmCharts.CategoryAxis.prototype.twoLineMode;
 /** @type {boolean} */
AmCharts.CategoryAxis.prototype.useLineColorForBulletBorder;

/**
 * Number returns coordinate of a category. Works only if parseDates is false. If parseDates is true, use dateToCoordinate method. category - String
 * @param {string} category
 * @return {void}
 */
AmCharts.CategoryAxis.prototype.categoryToCoordinate = function(category) {};

/**
 * date - Date object Returns Date of the coordinate, in case parseDates is set to true and equalSpacing is set to false.  coordinate - Number
 * @param {number} coordinate
 * @return {void}
 */
AmCharts.CategoryAxis.prototype.coordinateToDate = function(coordinate) {};

/**
 * Number Returns coordinate of the date, in case parseDates is set to true. if parseDates is false, use categoryToCoordinate method. date - Date object
 * @param {!Date} date
 * @return {void}
 */
AmCharts.CategoryAxis.prototype.dateToCoordinate = function(date) {};

/**
 * Number Returns index of the category which is most close to specified coordinate. x - coordinate
 * @param {number} x
 * @return {void}
 */
AmCharts.CategoryAxis.prototype.xToIndex = function(x) {};
/**
 * @constructor
 * @struct
 */
AmCharts.ChartScrollbar = function() {};
 /** @type {boolean} */
AmCharts.ChartScrollbar.prototype.autoGridCount;
 /** @type {number} */
AmCharts.ChartScrollbar.prototype.backgroundAlpha;
 /** @type {string} */
AmCharts.ChartScrollbar.prototype.backgroundColor;
 /** @type {!AmCharts.CategoryAxis} */
AmCharts.ChartScrollbar.prototype.categoryAxis;
 /** @type {string} */
AmCharts.ChartScrollbar.prototype.color;
 /** @type {!AmCharts.AmGraph} */
AmCharts.ChartScrollbar.prototype.graph;
 /** @type {number} */
AmCharts.ChartScrollbar.prototype.graphFillAlpha;
 /** @type {string} */
AmCharts.ChartScrollbar.prototype.graphFillColor;
 /** @type {number} */
AmCharts.ChartScrollbar.prototype.graphLineAlpha;
 /** @type {string} */
AmCharts.ChartScrollbar.prototype.graphLineColor;
 /** @type {string} */
AmCharts.ChartScrollbar.prototype.graphType;
 /** @type {number} */
AmCharts.ChartScrollbar.prototype.gridAlpha;
 /** @type {string} */
AmCharts.ChartScrollbar.prototype.gridColor;
 /** @type {number} */
AmCharts.ChartScrollbar.prototype.gridCount;
 /** @type {boolean} */
AmCharts.ChartScrollbar.prototype.hideResizeGrips;
 /** @type {boolean} */
AmCharts.ChartScrollbar.prototype.resizeEnabled;
 /** @type {number} */
AmCharts.ChartScrollbar.prototype.scrollbarHeight;
 /** @type {number} */
AmCharts.ChartScrollbar.prototype.scrollDuration;
 /** @type {number} */
AmCharts.ChartScrollbar.prototype.selectedBackgroundAlpha;
 /** @type {string} */
AmCharts.ChartScrollbar.prototype.selectedBackgroundColor;
 /** @type {number} */
AmCharts.ChartScrollbar.prototype.selectedGraphFillAlpha;
 /** @type {string} */
AmCharts.ChartScrollbar.prototype.selectedGraphFillColor;
 /** @type {number} */
AmCharts.ChartScrollbar.prototype.selectedGraphLineAlpha;
 /** @type {string} */
AmCharts.ChartScrollbar.prototype.selectedGraphLineColor;
 /** @type {boolean} */
AmCharts.ChartScrollbar.prototype.updateOnReleaseOnly;
/**
 * @extends {AmCharts.AmCoordinateChart}
 * @constructor
 * @struct
 */
AmCharts.AmRectangularChart = function() {};
 /** @type {number} */
AmCharts.AmRectangularChart.prototype.angle;
 /** @type {number} */
AmCharts.AmRectangularChart.prototype.autoMarginOffset;
 /** @type {boolean} */
AmCharts.AmRectangularChart.prototype.autoMargins;
 /** @type {!AmCharts.ChartCursor} */
AmCharts.AmRectangularChart.prototype.chartCursor;
 /** @type {!AmCharts.ChartScrollbar} */
AmCharts.AmRectangularChart.prototype.chartScrollbar;
 /** @type {number} */
AmCharts.AmRectangularChart.prototype.depth3D;
 /** @type {number} */
AmCharts.AmRectangularChart.prototype.marginBottom;
 /** @type {number} */
AmCharts.AmRectangularChart.prototype.marginLeft;
 /** @type {number} */
AmCharts.AmRectangularChart.prototype.marginRight;
 /** @type {boolean} */
AmCharts.AmRectangularChart.prototype.marginsUpdated;
 /** @type {number} */
AmCharts.AmRectangularChart.prototype.marginTop;
 /** @type {number} */
AmCharts.AmRectangularChart.prototype.plotAreaBorderAlpha;
 /** @type {string} */
AmCharts.AmRectangularChart.prototype.plotAreaBorderColor;
 /** @type {number} */
AmCharts.AmRectangularChart.prototype.plotAreaFillAlphas;
 /** @type {?} */
AmCharts.AmRectangularChart.prototype.plotAreaFillColors;
 /** @type {number} */
AmCharts.AmRectangularChart.prototype.plotAreaGradientAngle;
 /** @type {!Array<!AmCharts.TrendLine>} */
AmCharts.AmRectangularChart.prototype.trendLines;
 /** @type {number} */
AmCharts.AmRectangularChart.prototype.zoomOutButtonAlpha;
 /** @type {string} */
AmCharts.AmRectangularChart.prototype.zoomOutButtonColor;
 /** @type {string} */
AmCharts.AmRectangularChart.prototype.zoomOutButtonImage;
 /** @type {number} */
AmCharts.AmRectangularChart.prototype.zoomOutButtonImageSize;
 /** @type {number} */
AmCharts.AmRectangularChart.prototype.zoomOutButtonPadding;
 /** @type {number} */
AmCharts.AmRectangularChart.prototype.zoomOutButtonRollOverAlpha;
 /** @type {string} */
AmCharts.AmRectangularChart.prototype.zoomOutText;

/**
 * Adds a ChartCursor object to a chart
 * @param {!AmCharts.ChartCursor} cursor
 * @return {void}
 */
AmCharts.AmRectangularChart.prototype.addChartCursor = function(cursor) {};

/**
 * Adds a ChartScrollbar to a chart
 * @param {!AmCharts.ChartScrollbar} scrollbar
 * @return {void}
 */
AmCharts.AmRectangularChart.prototype.addChartScrollbar = function(scrollbar) {};

/**
 * Adds a TrendLine to a chart.
 * You should call chart.validateNow() after this method is called in order the trend line to be visible.
 * @param {!AmCharts.TrendLine} trendLine
 * @return {void}
 */
AmCharts.AmRectangularChart.prototype.addTrendLine = function(trendLine) {};

/**
 * Removes cursor from the chart
 * @return {void}
 */
AmCharts.AmRectangularChart.prototype.removeChartCursor = function() {};

/**
 * Removes scrollbar from the chart
 * @return {void}
 */
AmCharts.AmRectangularChart.prototype.removeChartScrollbar = function() {};

/**
 * Removes a trend line from a chart.
 * You should call chart.validateNow() in order the changes to be visible.
 * @param {!AmCharts.TrendLine} trendLine
 * @return {void}
 */
AmCharts.AmRectangularChart.prototype.removeTrendLine = function(trendLine) {};
/**
 * @constructor
 * @struct
 */
AmCharts.TrendLine = function() {};
/**
 * @constructor
 * @struct
 */
AmCharts.ChartCursor = function() {};
 /** @type {boolean} */
AmCharts.ChartCursor.prototype.bulletsEnabled;
 /** @type {number} */
AmCharts.ChartCursor.prototype.bulletSize;
 /** @type {number} */
AmCharts.ChartCursor.prototype.categoryBalloonAlpha;
 /** @type {string} */
AmCharts.ChartCursor.prototype.categoryBalloonColor;
 /** @type {string} */
AmCharts.ChartCursor.prototype.categoryBalloonDateFormat;
 /** @type {boolean} */
AmCharts.ChartCursor.prototype.categoryBalloonEnabled;
 /** @type {string} */
AmCharts.ChartCursor.prototype.color;
 /** @type {number} */
AmCharts.ChartCursor.prototype.cursorAlpha;
 /** @type {string} */
AmCharts.ChartCursor.prototype.cursorColor;
 /** @type {string} */
AmCharts.ChartCursor.prototype.cursorPosition;
 /** @type {boolean} */
AmCharts.ChartCursor.prototype.enabled;
 /** @type {boolean} */
AmCharts.ChartCursor.prototype.fullWidth;
 /** @type {boolean} */
AmCharts.ChartCursor.prototype.oneBalloonOnly;
 /** @type {boolean} */
AmCharts.ChartCursor.prototype.pan;
 /** @type {number} */
AmCharts.ChartCursor.prototype.selectionAlpha;
 /** @type {boolean} */
AmCharts.ChartCursor.prototype.selectWithoutZooming;
 /** @type {boolean} */
AmCharts.ChartCursor.prototype.valueBalloonsEnabled;
 /** @type {boolean} */
AmCharts.ChartCursor.prototype.zoomable;
 /** @type {boolean} */
AmCharts.ChartCursor.prototype.zooming;

/**
 * Hides cursor.
 * @return {void}
 */
AmCharts.ChartCursor.prototype.hideCursor = function() {};

/**
 * You can force cursor to appear at specified cateogry or date.
 * @param {string} category
 * @return {void}
 */
AmCharts.ChartCursor.prototype.showCursorAt = function(category) {};

/**
 * Adds event listener of the type "changed" to the object.
 * Adds event listener of the type "onHideCursor" to the object.
 * Adds event listener of the type "selected" or "zoomed" to the object.
 * @param {string} type Always "changed". / Always "onHideCursor". / "selected" or "zoomed".
 * @param {function({type: string, index: number, zooming: boolean, mostCloseGraph: !AmCharts.AmGraph, chart: !AmCharts.AmChart}): void|function({type: string, chart: !AmCharts.AmChart}): void|function({type: string, index: number, zooming: boolean, chart: !AmCharts.AmChart}): void} handler Dispatched when cursor position is changed. "index" is a series index over which chart cursors currently is. "zooming" specifies if user is currently zooming (is selecting) the chart. mostCloseGraph property is set only when oneBalloonOnly is set to true. / Dispatched when cursor is hidden. / 
 * If the type is "selected". Dispatched if selectWithoutZooming is set to true and when user selects some period. start and end are indices or timestamp (when categoryAxis.parseDates is true) of selection start/end.
 * If the type is "zoomed". Dispatched when user zooms to some period. start and end are indices or timestamp (when categoryAxis.parseDates is true) of selection start/end.
 * @return {void}
 */
AmCharts.ChartCursor.prototype.addListener = function(type, handler) {};

/**
 * Removes event listener from chart object.
 * @param {!AmCharts.AmChart} chart
 * @param {string} type
 * @param {?} handler
 * @return {void}
 */
AmCharts.ChartCursor.prototype.removeListener = function(chart, type, handler) {};
/**
 * @extends {AmCharts.AmRectangularChart}
 * @constructor
 * @struct
 */
AmCharts.AmSerialChart = function() {};
 /** @type {string} */
AmCharts.AmSerialChart.prototype.balloonDateFormat;
 /** @type {!AmCharts.CategoryAxis} */
AmCharts.AmSerialChart.prototype.categoryAxis;
 /** @type {string} */
AmCharts.AmSerialChart.prototype.categoryField;
 /** @type {number} */
AmCharts.AmSerialChart.prototype.columnSpacing;
 /** @type {number} */
AmCharts.AmSerialChart.prototype.columnSpacing3D;
 /** @type {number} */
AmCharts.AmSerialChart.prototype.columnWidth;
 /** @type {!Date} */
AmCharts.AmSerialChart.prototype.endDate;
 /** @type {number} */
AmCharts.AmSerialChart.prototype.endIndex;
 /** @type {number} */
AmCharts.AmSerialChart.prototype.maxSelectedSeries;
 /** @type {number} */
AmCharts.AmSerialChart.prototype.maxSelectedTime;
 /** @type {number} */
AmCharts.AmSerialChart.prototype.minSelectedTime;
 /** @type {boolean} */
AmCharts.AmSerialChart.prototype.mouseWheelScrollEnabled;
 /** @type {boolean} */
AmCharts.AmSerialChart.prototype.mouseWheelZoomEnabled;
 /** @type {boolean} */
AmCharts.AmSerialChart.prototype.rotate;
 /** @type {!Date} */
AmCharts.AmSerialChart.prototype.startDate;
 /** @type {number} */
AmCharts.AmSerialChart.prototype.startIndex;
 /** @type {boolean} */
AmCharts.AmSerialChart.prototype.zoomOutOnDataUpdate;

/**
 * Number Returns index of the specified category value. value - series (category value) which index you want to find.
 * @param {number} value
 * @return {void}
 */
AmCharts.AmSerialChart.prototype.getCategoryIndexByValue = function(value) {};

/**
 * Zooms out, charts shows all available data.
 * @return {void}
 */
AmCharts.AmSerialChart.prototype.zoomOut = function() {};

/**
 * Zooms the chart by the value of the category axis. start - category value, String \\ end - category value, String
 * @param {!Date} start
 * @param {!Date} end
 * @return {void}
 */
AmCharts.AmSerialChart.prototype.zoomToCategoryValues = function(start, end) {};

/**
 * Zooms the chart from one date to another. start - start date, Date object \\ end - end date, Date object
 * @param {!Date} start
 * @param {!Date} end
 * @return {void}
 */
AmCharts.AmSerialChart.prototype.zoomToDates = function(start, end) {};

/**
 * Zooms the chart by the index of the category. start - start index, Number \\ end - end index, Number
 * @param {!Date} start
 * @param {!Date} end
 * @return {void}
 */
AmCharts.AmSerialChart.prototype.zoomToIndexes = function(start, end) {};
/**
 * @constructor
 * @struct
 */
AmCharts.PeriodSelector = function() {};
 /** @type {string} */
AmCharts.PeriodSelector.prototype.dateFormat;
 /** @type {string} */
AmCharts.PeriodSelector.prototype.fromText;
 /** @type {boolean} */
AmCharts.PeriodSelector.prototype.hideOutOfScopePeriods;
 /** @type {boolean} */
AmCharts.PeriodSelector.prototype.inputFieldsEnabled;
 /** @type {number} */
AmCharts.PeriodSelector.prototype.inputFieldWidth;
 /** @type {!Array<?>} */
AmCharts.PeriodSelector.prototype.periods;
 /** @type {string} */
AmCharts.PeriodSelector.prototype.periodsText;
 /** @type {string} */
AmCharts.PeriodSelector.prototype.position;
 /** @type {boolean} */
AmCharts.PeriodSelector.prototype.selectFromStart;
 /** @type {string} */
AmCharts.PeriodSelector.prototype.toText;
 /** @type {number} */
AmCharts.PeriodSelector.prototype.width;

/**
 * Adds event listener to the object.
 * .
 * @param {string} type
 * @param {function({type: string, startDate: !Date, endDate: !Date, predefinedPeriod: string, count: number}): void} handler - Dispatched when dates in period selector input fields are changed or user clicks on one of the predefined period buttons.
 * @return {void}
 */
AmCharts.PeriodSelector.prototype.addListener = function(type, handler) {};

/**
 * Removes event listener from chart object.
 * @param {!AmCharts.AmChart} chart
 * @param {string} type
 * @param {?} handler
 * @return {void}
 */
AmCharts.PeriodSelector.prototype.removeListener = function(chart, type, handler) {};
/**
 * @constructor
 * @struct
 */
AmCharts.PanelsSettings = function() {};
 /** @type {number} */
AmCharts.PanelsSettings.prototype.angle;
 /** @type {number} */
AmCharts.PanelsSettings.prototype.backgroundAlpha;
 /** @type {string} */
AmCharts.PanelsSettings.prototype.backgroundColor;
 /** @type {number} */
AmCharts.PanelsSettings.prototype.columnSpacing;
 /** @type {number} */
AmCharts.PanelsSettings.prototype.columnWidth;
 /** @type {number} */
AmCharts.PanelsSettings.prototype.depth3D;
 /** @type {string} */
AmCharts.PanelsSettings.prototype.fontFamily;
 /** @type {string} */
AmCharts.PanelsSettings.prototype.fontSize;
 /** @type {number} */
AmCharts.PanelsSettings.prototype.marginBottom;
 /** @type {number} */
AmCharts.PanelsSettings.prototype.marginLeft;
 /** @type {number} */
AmCharts.PanelsSettings.prototype.marginRight;
 /** @type {number} */
AmCharts.PanelsSettings.prototype.marginTop;
 /** @type {number} */
AmCharts.PanelsSettings.prototype.panelSpacing;
 /** @type {boolean} */
AmCharts.PanelsSettings.prototype.panEventsEnabled;
 /** @type {number} */
AmCharts.PanelsSettings.prototype.plotAreaBorderAlpha;
 /** @type {string} */
AmCharts.PanelsSettings.prototype.plotAreaBorderColor;
 /** @type {number} */
AmCharts.PanelsSettings.prototype.plotAreaFillAlphas;
 /** @type {?} */
AmCharts.PanelsSettings.prototype.plotAreaFillColors;
 /** @type {!Array<?>} */
AmCharts.PanelsSettings.prototype.prefixesOfBigNumbers;
 /** @type {!Array<?>} */
AmCharts.PanelsSettings.prototype.prefixesOfSmallNumbers;
 /** @type {boolean} */
AmCharts.PanelsSettings.prototype.sequencedAnimation;
 /** @type {number} */
AmCharts.PanelsSettings.prototype.startAlpha;
 /** @type {number} */
AmCharts.PanelsSettings.prototype.startDuration;
 /** @type {string} */
AmCharts.PanelsSettings.prototype.startEffect;
 /** @type {boolean} */
AmCharts.PanelsSettings.prototype.usePrefixes;
/**
 * @constructor
 * @struct
 */
AmCharts.DataSet = function() {};
 /** @type {string} */
AmCharts.DataSet.prototype.categoryField;
 /** @type {string} */
AmCharts.DataSet.prototype.color;
 /** @type {boolean} */
AmCharts.DataSet.prototype.compared;
 /** @type {!Array<?>} */
AmCharts.DataSet.prototype.dataProvider;
 /** @type {!Array<?>} */
AmCharts.DataSet.prototype.fieldMappings;
 /** @type {boolean} */
AmCharts.DataSet.prototype.showInCompare;
 /** @type {boolean} */
AmCharts.DataSet.prototype.showInSelect;
 /** @type {!Array<!AmCharts.StockEvent>} */
AmCharts.DataSet.prototype.stockEvents;
 /** @type {string} */
AmCharts.DataSet.prototype.title;
/**
 * @extends {AmCharts.AmGraph}
 * @constructor
 * @struct
 */
AmCharts.StockGraph = function() {};
 /** @type {boolean} */
AmCharts.StockGraph.prototype.comparable;
 /** @type {string} */
AmCharts.StockGraph.prototype.compareField;
 /** @type {string} */
AmCharts.StockGraph.prototype.compareGraphBalloonColor;
 /** @type {string} */
AmCharts.StockGraph.prototype.compareGraphBalloonText;
 /** @type {string} */
AmCharts.StockGraph.prototype.compareGraphBullet;
 /** @type {number} */
AmCharts.StockGraph.prototype.compareGraphBulletSize;
 /** @type {number} */
AmCharts.StockGraph.prototype.compareGraphCornerRadiusTop;
 /** @type {number} */
AmCharts.StockGraph.prototype.compareGraphDashLength;
 /** @type {number} */
AmCharts.StockGraph.prototype.compareGraphFillAlphas;
 /** @type {string} */
AmCharts.StockGraph.prototype.compareGraphFillColors;
 /** @type {number} */
AmCharts.StockGraph.prototype.compareGraphLineAlpha;
 /** @type {number} */
AmCharts.StockGraph.prototype.compareGraphLineThickness;
 /** @type {string} */
AmCharts.StockGraph.prototype.compareGraphType;
 /** @type {boolean} */
AmCharts.StockGraph.prototype.compareGraphVisibleInLegend;
 /** @type {string} */
AmCharts.StockGraph.prototype.periodValue;
 /** @type {boolean} */
AmCharts.StockGraph.prototype.useDataSetColors;
/**
 * @constructor
 * @struct
 */
AmCharts.StockEvent = function() {};
 /** @type {number} */
AmCharts.StockEvent.prototype.backgroundAlpha;
 /** @type {string} */
AmCharts.StockEvent.prototype.backgroundColor;
 /** @type {number} */
AmCharts.StockEvent.prototype.borderAlpha;
 /** @type {string} */
AmCharts.StockEvent.prototype.borderColor;
 /** @type {string} */
AmCharts.StockEvent.prototype.color;
 /** @type {!Date} */
AmCharts.StockEvent.prototype.date;
 /** @type {!AmCharts.StockGraph} */
AmCharts.StockEvent.prototype.graph;
 /** @type {string} */
AmCharts.StockEvent.prototype.rollOverColor;
 /** @type {boolean} */
AmCharts.StockEvent.prototype.showOnAxis;
 /** @type {string} */
AmCharts.StockEvent.prototype.text;
 /** @type {string} */
AmCharts.StockEvent.prototype.type;
 /** @type {string} */
AmCharts.StockEvent.prototype.url;
 /** @type {string} */
AmCharts.StockEvent.prototype.urlTarget;
/**
 * @constructor
 * @struct
 */
AmCharts.Label = function() {};
 /** @type {string} */
AmCharts.Label.prototype.align;
 /** @type {number} */
AmCharts.Label.prototype.alpha;
 /** @type {boolean} */
AmCharts.Label.prototype.bold;
 /** @type {string} */
AmCharts.Label.prototype.color;
 /** @type {string} */
AmCharts.Label.prototype.id;
 /** @type {number} */
AmCharts.Label.prototype.rotation;
 /** @type {number} */
AmCharts.Label.prototype.size;
 /** @type {string} */
AmCharts.Label.prototype.text;
 /** @type {string} */
AmCharts.Label.prototype.url;
 /** @type {(string|number)} */
AmCharts.Label.prototype.x;
 /** @type {(string|number)} */
AmCharts.Label.prototype.y;
/**
 * @constructor
 * @struct
 */
AmCharts.LegendSettings = function() {};
 /** @type {string} */
AmCharts.LegendSettings.prototype.align;
 /** @type {boolean} */
AmCharts.LegendSettings.prototype.equalWidths;
 /** @type {number} */
AmCharts.LegendSettings.prototype.horizontalGap;
 /** @type {string} */
AmCharts.LegendSettings.prototype.labelText;
 /** @type {number} */
AmCharts.LegendSettings.prototype.marginBottom;
 /** @type {number} */
AmCharts.LegendSettings.prototype.marginTop;
 /** @type {number} */
AmCharts.LegendSettings.prototype.markerBorderAlpha;
 /** @type {string} */
AmCharts.LegendSettings.prototype.markerBorderColor;
 /** @type {number} */
AmCharts.LegendSettings.prototype.markerBorderThickness;
 /** @type {string} */
AmCharts.LegendSettings.prototype.markerDisabledColor;
 /** @type {number} */
AmCharts.LegendSettings.prototype.markerLabelGap;
 /** @type {number} */
AmCharts.LegendSettings.prototype.markerSize;
 /** @type {string} */
AmCharts.LegendSettings.prototype.markerType;
 /** @type {boolean} */
AmCharts.LegendSettings.prototype.reversedOrder;
 /** @type {string} */
AmCharts.LegendSettings.prototype.rollOverColor;
 /** @type {number} */
AmCharts.LegendSettings.prototype.rollOverGraphAlpha;
 /** @type {boolean} */
AmCharts.LegendSettings.prototype.switchable;
 /** @type {string} */
AmCharts.LegendSettings.prototype.switchColor;
 /** @type {string} */
AmCharts.LegendSettings.prototype.switchType;
 /** @type {boolean} */
AmCharts.LegendSettings.prototype.textClickEnabled;
 /** @type {boolean} */
AmCharts.LegendSettings.prototype.useMarkerColorForLabels;
 /** @type {string} */
AmCharts.LegendSettings.prototype.valueTextComparing;
 /** @type {string} */
AmCharts.LegendSettings.prototype.valueTextRegular;
 /** @type {number} */
AmCharts.LegendSettings.prototype.valueWidth;
 /** @type {number} */
AmCharts.LegendSettings.prototype.verticalGap;
/**
 * @constructor
 * @struct
 */
AmCharts.DataSetSelector = function() {};
 /** @type {string} */
AmCharts.DataSetSelector.prototype.comboBoxSelectText;
 /** @type {string} */
AmCharts.DataSetSelector.prototype.compareText;
 /** @type {number} */
AmCharts.DataSetSelector.prototype.listHeight;
 /** @type {string} */
AmCharts.DataSetSelector.prototype.position;
 /** @type {string} */
AmCharts.DataSetSelector.prototype.selectText;
 /** @type {number} */
AmCharts.DataSetSelector.prototype.width;
/**
 * @constructor
 * @struct
 */
AmCharts.AmBalloon = function() {};
 /** @type {boolean} */
AmCharts.AmBalloon.prototype.adjustBorderColor;
 /** @type {number} */
AmCharts.AmBalloon.prototype.borderAlpha;
 /** @type {string} */
AmCharts.AmBalloon.prototype.borderColor;
 /** @type {number} */
AmCharts.AmBalloon.prototype.borderThickness;
 /** @type {string} */
AmCharts.AmBalloon.prototype.color;
 /** @type {number} */
AmCharts.AmBalloon.prototype.cornerRadius;
 /** @type {number} */
AmCharts.AmBalloon.prototype.fillAlpha;
 /** @type {string} */
AmCharts.AmBalloon.prototype.fillColor;
 /** @type {string} */
AmCharts.AmBalloon.prototype.fontSize;
 /** @type {number} */
AmCharts.AmBalloon.prototype.horizontalPadding;
 /** @type {number} */
AmCharts.AmBalloon.prototype.pointerWidth;
 /** @type {boolean} */
AmCharts.AmBalloon.prototype.showBullet;
 /** @type {string} */
AmCharts.AmBalloon.prototype.textAlign;
 /** @type {string} */
AmCharts.AmBalloon.prototype.textShadowColor;
 /** @type {number} */
AmCharts.AmBalloon.prototype.verticalPadding;

/**
 * Hides balloon.
 * @return {void}
 */
AmCharts.AmBalloon.prototype.hide = function() {};

/**
 * Defines a square within which the balloon should appear. Bounds are set by chart class, you don't need to call this method yourself.
 * @param {number} left
 * @param {number} top
 * @param {number} right
 * @param {number} bottom
 * @return {void}
 */
AmCharts.AmBalloon.prototype.setBounds = function(left, top, right, bottom) {};

/**
 * Sets coordinates the balloon should point to.
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
AmCharts.AmBalloon.prototype.setPosition = function(x, y) {};

/**
 * Specifies the text which should be displayed.
 * @param {string} value
 * @return {void}
 */
AmCharts.AmBalloon.prototype.show = function(value) {};
/**
 * @constructor
 * @struct
 */
AmCharts.CategoryAxesSettings = function() {};
 /** @type {boolean} */
AmCharts.CategoryAxesSettings.prototype.autoGridCount;
 /** @type {number} */
AmCharts.CategoryAxesSettings.prototype.axisAlpha;
 /** @type {string} */
AmCharts.CategoryAxesSettings.prototype.axisColor;
 /** @type {number} */
AmCharts.CategoryAxesSettings.prototype.axisHeight;
 /** @type {number} */
AmCharts.CategoryAxesSettings.prototype.axisThickness;
 /** @type {string} */
AmCharts.CategoryAxesSettings.prototype.color;
 /** @type {number} */
AmCharts.CategoryAxesSettings.prototype.dashLength;
 /** @type {!Array<?>} */
AmCharts.CategoryAxesSettings.prototype.dateFormats;
 /** @type {boolean} */
AmCharts.CategoryAxesSettings.prototype.equalSpacing;
 /** @type {number} */
AmCharts.CategoryAxesSettings.prototype.fillAlpha;
 /** @type {string} */
AmCharts.CategoryAxesSettings.prototype.fillColor;
 /** @type {string} */
AmCharts.CategoryAxesSettings.prototype.fontSize;
 /** @type {number} */
AmCharts.CategoryAxesSettings.prototype.gridAlpha;
 /** @type {string} */
AmCharts.CategoryAxesSettings.prototype.gridColor;
 /** @type {number} */
AmCharts.CategoryAxesSettings.prototype.gridCount;
 /** @type {number} */
AmCharts.CategoryAxesSettings.prototype.gridThickness;
 /** @type {!Array<?>} */
AmCharts.CategoryAxesSettings.prototype.groupToPeriods;
 /** @type {boolean} */
AmCharts.CategoryAxesSettings.prototype.inside;
 /** @type {number} */
AmCharts.CategoryAxesSettings.prototype.labelRotation;
 /** @type {number} */
AmCharts.CategoryAxesSettings.prototype.maxSeries;
 /** @type {string} */
AmCharts.CategoryAxesSettings.prototype.minPeriod;
 /** @type {string} */
AmCharts.CategoryAxesSettings.prototype.position;
 /** @type {boolean} */
AmCharts.CategoryAxesSettings.prototype.startOnAxis;
 /** @type {number} */
AmCharts.CategoryAxesSettings.prototype.tickLength;
/**
 * @constructor
 * @struct
 */
AmCharts.ChartCursorSettings = function() {};
 /** @type {boolean} */
AmCharts.ChartCursorSettings.prototype.bulletsEnabled;
 /** @type {number} */
AmCharts.ChartCursorSettings.prototype.bulletSize;
 /** @type {number} */
AmCharts.ChartCursorSettings.prototype.categoryBalloonAlpha;
 /** @type {string} */
AmCharts.ChartCursorSettings.prototype.categoryBalloonColor;
 /** @type {!Array<?>} */
AmCharts.ChartCursorSettings.prototype.categoryBalloonDateFormats;
 /** @type {boolean} */
AmCharts.ChartCursorSettings.prototype.categoryBalloonEnabled;
 /** @type {number} */
AmCharts.ChartCursorSettings.prototype.cursorAlpha;
 /** @type {string} */
AmCharts.ChartCursorSettings.prototype.cursorColor;
 /** @type {string} */
AmCharts.ChartCursorSettings.prototype.cursorPosition;
 /** @type {boolean} */
AmCharts.ChartCursorSettings.prototype.enabled;
 /** @type {boolean} */
AmCharts.ChartCursorSettings.prototype.pan;
 /** @type {boolean} */
AmCharts.ChartCursorSettings.prototype.valueBalloonsEnabled;
 /** @type {boolean} */
AmCharts.ChartCursorSettings.prototype.zoomable;
/**
 * @constructor
 * @struct
 */
AmCharts.ChartScrollbarSettings = function() {};
 /** @type {boolean} */
AmCharts.ChartScrollbarSettings.prototype.autoGridCount;
 /** @type {number} */
AmCharts.ChartScrollbarSettings.prototype.backgroundAlpha;
 /** @type {string} */
AmCharts.ChartScrollbarSettings.prototype.backgroundColor;
 /** @type {string} */
AmCharts.ChartScrollbarSettings.prototype.color;
 /** @type {boolean} */
AmCharts.ChartScrollbarSettings.prototype.enabled;
 /** @type {string} */
AmCharts.ChartScrollbarSettings.prototype.fontSize;
 /** @type {!AmCharts.AmGraph} */
AmCharts.ChartScrollbarSettings.prototype.graph;
 /** @type {number} */
AmCharts.ChartScrollbarSettings.prototype.graphFillAlpha;
 /** @type {string} */
AmCharts.ChartScrollbarSettings.prototype.graphFillColor;
 /** @type {number} */
AmCharts.ChartScrollbarSettings.prototype.graphLineAlpha;
 /** @type {string} */
AmCharts.ChartScrollbarSettings.prototype.graphLineColor;
 /** @type {string} */
AmCharts.ChartScrollbarSettings.prototype.graphType;
 /** @type {number} */
AmCharts.ChartScrollbarSettings.prototype.gridAlpha;
 /** @type {string} */
AmCharts.ChartScrollbarSettings.prototype.gridColor;
 /** @type {number} */
AmCharts.ChartScrollbarSettings.prototype.gridCount;
 /** @type {number} */
AmCharts.ChartScrollbarSettings.prototype.height;
 /** @type {boolean} */
AmCharts.ChartScrollbarSettings.prototype.hideResizeGrips;
 /** @type {number} */
AmCharts.ChartScrollbarSettings.prototype.scrollDuration;
 /** @type {number} */
AmCharts.ChartScrollbarSettings.prototype.selectedBackgroundAlpha;
 /** @type {string} */
AmCharts.ChartScrollbarSettings.prototype.selectedBackgroundColor;
 /** @type {number} */
AmCharts.ChartScrollbarSettings.prototype.selectedGraphFillAlpha;
 /** @type {string} */
AmCharts.ChartScrollbarSettings.prototype.selectedGraphFillColor;
 /** @type {number} */
AmCharts.ChartScrollbarSettings.prototype.selectedGraphLineAlpha;
 /** @type {string} */
AmCharts.ChartScrollbarSettings.prototype.selectedGraphLineColor;
 /** @type {boolean} */
AmCharts.ChartScrollbarSettings.prototype.updateOnReleaseOnly;
/**
 * @constructor
 * @struct
 */
AmCharts.AmGraph = function() {};
 /** @type {string} */
AmCharts.AmGraph.prototype.alphaField;
 /** @type {string} */
AmCharts.AmGraph.prototype.balloonColor;
 /** @type {string} */
AmCharts.AmGraph.prototype.balloonText;
 /** @type {boolean} */
AmCharts.AmGraph.prototype.behindColumns;
 /** @type {string} */
AmCharts.AmGraph.prototype.bullet;
 /** @type {number} */
AmCharts.AmGraph.prototype.bulletAlpha;
 /** @type {number} */
AmCharts.AmGraph.prototype.bulletBorderAlpha;
 /** @type {string} */
AmCharts.AmGraph.prototype.bulletBorderColor;
 /** @type {number} */
AmCharts.AmGraph.prototype.bulletBorderThickness;
 /** @type {string} */
AmCharts.AmGraph.prototype.bulletColor;
 /** @type {string} */
AmCharts.AmGraph.prototype.bulletField;
 /** @type {number} */
AmCharts.AmGraph.prototype.bulletOffset;
 /** @type {number} */
AmCharts.AmGraph.prototype.bulletSize;
 /** @type {string} */
AmCharts.AmGraph.prototype.bulletSizeField;
 /** @type {string} */
AmCharts.AmGraph.prototype.closeField;
 /** @type {string} */
AmCharts.AmGraph.prototype.color;
 /** @type {string} */
AmCharts.AmGraph.prototype.colorField;
 /** @type {boolean} */
AmCharts.AmGraph.prototype.connect;
 /** @type {number} */
AmCharts.AmGraph.prototype.cornerRadiusTop;
 /** @type {number} */
AmCharts.AmGraph.prototype.cursorBulletAlpha;
 /** @type {string} */
AmCharts.AmGraph.prototype.customBullet;
 /** @type {string} */
AmCharts.AmGraph.prototype.customBulletField;
 /** @type {number} */
AmCharts.AmGraph.prototype.dashLength;
 /** @type {string} */
AmCharts.AmGraph.prototype.descriptionField;
 /** @type {number} */
AmCharts.AmGraph.prototype.fillAlphas;
 /** @type {?} */
AmCharts.AmGraph.prototype.fillColors;
 /** @type {string} */
AmCharts.AmGraph.prototype.fillColorsField;
 /** @type {!AmCharts.AmGraph} */
AmCharts.AmGraph.prototype.fillToGraph;
 /** @type {string} */
AmCharts.AmGraph.prototype.fontSize;
 /** @type {string} */
AmCharts.AmGraph.prototype.gradientOrientation;
 /** @type {boolean} */
AmCharts.AmGraph.prototype.hidden;
 /** @type {number} */
AmCharts.AmGraph.prototype.hideBulletsCount;
 /** @type {string} */
AmCharts.AmGraph.prototype.highField;
 /** @type {string} */
AmCharts.AmGraph.prototype.id;
 /** @type {boolean} */
AmCharts.AmGraph.prototype.includeInMinMax;
 /** @type {string} */
AmCharts.AmGraph.prototype.labelColorField;
 /** @type {string} */
AmCharts.AmGraph.prototype.labelPosition;
 /** @type {string} */
AmCharts.AmGraph.prototype.labelText;
 /** @type {number} */
AmCharts.AmGraph.prototype.legendAlpha;
 /** @type {string} */
AmCharts.AmGraph.prototype.legendColor;
 /** @type {string} */
AmCharts.AmGraph.prototype.legendValueText;
 /** @type {number} */
AmCharts.AmGraph.prototype.lineAlpha;
 /** @type {string} */
AmCharts.AmGraph.prototype.lineColor;
 /** @type {string} */
AmCharts.AmGraph.prototype.lineColorField;
 /** @type {number} */
AmCharts.AmGraph.prototype.lineThickness;
 /** @type {string} */
AmCharts.AmGraph.prototype.lowField;
 /** @type {string} */
AmCharts.AmGraph.prototype.markerType;
 /** @type {number} */
AmCharts.AmGraph.prototype.maxBulletSize;
 /** @type {number} */
AmCharts.AmGraph.prototype.minBulletSize;
 /** @type {number} */
AmCharts.AmGraph.prototype.negativeBase;
 /** @type {number} */
AmCharts.AmGraph.prototype.negativeFillAlphas;
 /** @type {?} */
AmCharts.AmGraph.prototype.negativeFillColors;
 /** @type {string} */
AmCharts.AmGraph.prototype.negativeLineColor;
 /** @type {!Object} */
AmCharts.AmGraph.prototype.numberFormatter;
 /** @type {string} */
AmCharts.AmGraph.prototype.openField;
 /** @type {number} */
AmCharts.AmGraph.prototype.precision;
 /** @type {string} */
AmCharts.AmGraph.prototype.pointPosition;
 /** @type {boolean} */
AmCharts.AmGraph.prototype.showAllValueLabels;
 /** @type {boolean} */
AmCharts.AmGraph.prototype.showBalloon;
 /** @type {string} */
AmCharts.AmGraph.prototype.showBalloonAt;
 /** @type {boolean} */
AmCharts.AmGraph.prototype.stackable;
 /** @type {string} */
AmCharts.AmGraph.prototype.title;
 /** @type {string} */
AmCharts.AmGraph.prototype.type;
 /** @type {string} */
AmCharts.AmGraph.prototype.urlField;
 /** @type {string} */
AmCharts.AmGraph.prototype.urlTarget;
 /** @type {!AmCharts.ValueAxis} */
AmCharts.AmGraph.prototype.valueAxis;
 /** @type {string} */
AmCharts.AmGraph.prototype.valueField;
 /** @type {boolean} */
AmCharts.AmGraph.prototype.visibleInLegend;
 /** @type {!AmCharts.ValueAxis} */
AmCharts.AmGraph.prototype.xAxis;
 /** @type {string} */
AmCharts.AmGraph.prototype.xField;
 /** @type {!AmCharts.ValueAxis} */
AmCharts.AmGraph.prototype.yAxis;
 /** @type {string} */
AmCharts.AmGraph.prototype.yField;

/**
 * If you set some function, the graph will call it and pass GraphDataItem and AmGraph object to it. This function should return a string which will be displayed in a balloon.
 * @param {!AmCharts.GraphDataItem} graphDataItem
 * @param {!AmCharts.AmGraph} amGraph
 * @return {string}
 */
AmCharts.AmGraph.prototype.balloonFunction = function(graphDataItem, amGraph) {};
/**
 * @constructor
 * @struct
 */
AmCharts.AxisBase = function() {};
 /** @type {boolean} */
AmCharts.AxisBase.prototype.autoGridCount;
 /** @type {number} */
AmCharts.AxisBase.prototype.axisAlpha;
 /** @type {string} */
AmCharts.AxisBase.prototype.axisColor;
 /** @type {number} */
AmCharts.AxisBase.prototype.axisThickness;
 /** @type {string} */
AmCharts.AxisBase.prototype.color;
 /** @type {number} */
AmCharts.AxisBase.prototype.dashLength;
 /** @type {number} */
AmCharts.AxisBase.prototype.fillAlpha;
 /** @type {string} */
AmCharts.AxisBase.prototype.fillColor;
 /** @type {string} */
AmCharts.AxisBase.prototype.fontSize;
 /** @type {number} */
AmCharts.AxisBase.prototype.gridAlpha;
 /** @type {string} */
AmCharts.AxisBase.prototype.gridColor;
 /** @type {number} */
AmCharts.AxisBase.prototype.gridCount;
 /** @type {number} */
AmCharts.AxisBase.prototype.gridThickness;
 /** @type {!Array<?>} */
AmCharts.AxisBase.prototype.guides;
 /** @type {boolean} */
AmCharts.AxisBase.prototype.ignoreAxisWidth;
 /** @type {boolean} */
AmCharts.AxisBase.prototype.inside;
 /** @type {number} */
AmCharts.AxisBase.prototype.labelFrequency;
 /** @type {number} */
AmCharts.AxisBase.prototype.labelRotation;
 /** @type {boolean} */
AmCharts.AxisBase.prototype.labelsEnabled;
 /** @type {number} */
AmCharts.AxisBase.prototype.offset;
 /** @type {string} */
AmCharts.AxisBase.prototype.position;
 /** @type {boolean} */
AmCharts.AxisBase.prototype.showFirstLabel;
 /** @type {boolean} */
AmCharts.AxisBase.prototype.showLastLabel;
 /** @type {number} */
AmCharts.AxisBase.prototype.tickLength;
 /** @type {string} */
AmCharts.AxisBase.prototype.title;
 /** @type {boolean} */
AmCharts.AxisBase.prototype.titleBold;
 /** @type {string} */
AmCharts.AxisBase.prototype.titleColor;
 /** @type {string} */
AmCharts.AxisBase.prototype.titlefontSize;

/**
 * Adds guide to the axis.
 * @param {!AmCharts.Guide} guide
 * @return {void}
 */
AmCharts.AxisBase.prototype.addGuide = function(guide) {};

/**
 * Removes guide from the axis.
 * @param {!AmCharts.Guide} guide
 * @return {void}
 */
AmCharts.AxisBase.prototype.removeGuide = function(guide) {};
/**
 * @extends {AmCharts.AxisBase}
 * @constructor
 * @struct
 */
AmCharts.ValueAxis = function() {};
 /** @type {number} */
AmCharts.ValueAxis.prototype.axisTitleOffset;
 /** @type {number} */
AmCharts.ValueAxis.prototype.baseCoord;
 /** @type {number} */
AmCharts.ValueAxis.prototype.baseValue;
 /** @type {string} */
AmCharts.ValueAxis.prototype.duration;
 /** @type {!Object} */
AmCharts.ValueAxis.prototype.durationUnits;
 /** @type {string} */
AmCharts.ValueAxis.prototype.gridType;
 /** @type {string} */
AmCharts.ValueAxis.prototype.id;
 /** @type {boolean} */
AmCharts.ValueAxis.prototype.includeGuidesInMinMax;
 /** @type {boolean} */
AmCharts.ValueAxis.prototype.includeHidden;
 /** @type {boolean} */
AmCharts.ValueAxis.prototype.integersOnly;
 /** @type {boolean} */
AmCharts.ValueAxis.prototype.logarithmic;
 /** @type {number} */
AmCharts.ValueAxis.prototype.max;
 /** @type {number} */
AmCharts.ValueAxis.prototype.maximum;
 /** @type {!Date} */
AmCharts.ValueAxis.prototype.maximumData;
 /** @type {number} */
AmCharts.ValueAxis.prototype.min;
 /** @type {number} */
AmCharts.ValueAxis.prototype.minimum;
 /** @type {!Date} */
AmCharts.ValueAxis.prototype.minimumDate;
 /** @type {number} */
AmCharts.ValueAxis.prototype.minMaxMultiplier;
 /** @type {string} */
AmCharts.ValueAxis.prototype.pointPosition;
 /** @type {string} */
AmCharts.ValueAxis.prototype.position;
 /** @type {number} */
AmCharts.ValueAxis.prototype.precision;
 /** @type {boolean} */
AmCharts.ValueAxis.prototype.radarCategoriesEnabled;
 /** @type {boolean} */
AmCharts.ValueAxis.prototype.recalculateToPercents;
 /** @type {boolean} */
AmCharts.ValueAxis.prototype.reversed;
 /** @type {string} */
AmCharts.ValueAxis.prototype.stackType;
 /** @type {number} */
AmCharts.ValueAxis.prototype.step;
 /** @type {boolean} */
AmCharts.ValueAxis.prototype.strictMinMax;
 /** @type {number} */
AmCharts.ValueAxis.prototype.synchronizationMultiplier;
 /** @type {!AmCharts.ValueAxis} */
AmCharts.ValueAxis.prototype.synchronizeWith;
 /** @type {string} */
AmCharts.ValueAxis.prototype.totalText;
 /** @type {string} */
AmCharts.ValueAxis.prototype.totalTextColor;
 /** @type {number} */
AmCharts.ValueAxis.prototype.totalTextOffset;
 /** @type {number} */
AmCharts.ValueAxis.prototype.treatZeroAs;
 /** @type {string} */
AmCharts.ValueAxis.prototype.type;
 /** @type {string} */
AmCharts.ValueAxis.prototype.unit;
 /** @type {string} */
AmCharts.ValueAxis.prototype.unitPosition;
 /** @type {boolean} */
AmCharts.ValueAxis.prototype.usePrefixes;
 /** @type {boolean} */
AmCharts.ValueAxis.prototype.useScientificNotation;

/**
 * You can use this function to format Value axis labels. This function is called and these parameters are passed: labelFunction(value, valueText, valueAxis);
 * Where value is numeric value, valueText is formatted string and valueAxis is a reference to valueAxis object.
 * If axis type is "date", labelFunction will pass different arguments:
 * labelFunction(valueText, date, valueAxis)
 * Your function should return string.
 * @param {number|string} value_or_valueText
 * @param {string|!Date} valueText_or_data
 * @param {!AmCharts.ValueAxis} valueAxis
 * @return {string}
 */
AmCharts.ValueAxis.prototype.labelFunction = function(value_or_valueText, valueText_or_data, valueAxis) {};

/**
 * Adds guide to the axis.
 * @param {!AmCharts.Guide} guide
 * @return {void}
 */
AmCharts.ValueAxis.prototype.addGuide = function(guide) {};

/**
 * Adds event listener to the object.  type - string like 'axisChanged' (should be listed in 'events' section of this class or classes which extend this class). handler - function which is called when event happens
 * Adds event listener of the type "axisZoomed" to the object.
 * Adds event listener of the type "logarithmicAxisFailed" to the object.
 * @param {string} type Always "axisZoomed". / Always "logarithmicAxisFailed".
 * @param {?|function({type: string, startValue: !Date, endValue: !Date, chart: !AmCharts.AmChart}): void|function({type: string, chart: !AmCharts.AmChart}): void} handler XY chart only. Dispatched when axis is zoomed. / Dispatched when valueAxis is logarithmic and values equal or less then zero were found in data.
 * @return {void}
 */
AmCharts.ValueAxis.prototype.addListener = function(type, handler) {};

/**
 * Number, - value of coordinate. Returns value of the coordinate.  coordinate - y or x coordinate, in pixels.
 * @param {number} coordinate
 * @return {void}
 */
AmCharts.ValueAxis.prototype.coordinateToValue = function(coordinate) {};

/**
 * Number - coordinate Returns coordinate of the value in pixels. value - Number
 * @param {number} value
 * @return {void}
 */
AmCharts.ValueAxis.prototype.getCoordinate = function(value) {};

/**
 * Removes guide from the axis.
 * @param {!AmCharts.Guide} guide
 * @return {void}
 */
AmCharts.ValueAxis.prototype.removeGuide = function(guide) {};

/**
 * Removes event listener from the object.
 * Removes event listener from chart object.
 * @param {?|!AmCharts.AmChart} obj_or_chart
 * @param {string} type
 * @param {?} handler
 * @return {void}
 */
AmCharts.ValueAxis.prototype.removeListener = function(obj_or_chart, type, handler) {};

/**
 * One value axis can be synchronized with another value axis. You should set synchronizationMultiplyer in order for this to work.
 * @param {!AmCharts.ValueAxis} axis
 * @return {void}
 */
AmCharts.ValueAxis.prototype.synchronizeWithAxis = function(axis) {};

/**
 * XY Chart only. Zooms-in the axis to the provided values.
 * @param {number} startValue
 * @param {number} endValue
 * @return {void}
 */
AmCharts.ValueAxis.prototype.zoomToValues = function(startValue, endValue) {};
/**
 * @constructor
 * @struct
 */
AmCharts.Title = function() {};
 /** @type {number} */
AmCharts.Title.prototype.alpha;
 /** @type {boolean} */
AmCharts.Title.prototype.bold;
 /** @type {string} */
AmCharts.Title.prototype.color;
 /** @type {string} */
AmCharts.Title.prototype.id;
 /** @type {number} */
AmCharts.Title.prototype.size;
 /** @type {string} */
AmCharts.Title.prototype.text;
/**
 * @constructor
 * @struct
 */
AmCharts.ExportSettings = function() {};
 /** @type {boolean} */
AmCharts.ExportSettings.prototype.enabled;
 /** @type {!Object} */
AmCharts.ExportSettings.prototype.libs;
 /** @type {!Object} */
AmCharts.ExportSettings.prototype.menu;
 /** @type {?} */
AmCharts.ExportSettings.prototype.config;

/**
 * @param {?} config
 * @param {function(): void} callback
 * @return {?}
 */
AmCharts.ExportSettings.prototype.capture = function(config, callback) {};

/**
 * @param {?} config
 * @param {function(?): void} callback
 * @return {?}
 */
AmCharts.ExportSettings.prototype.toJPG = function(config, callback) {};
