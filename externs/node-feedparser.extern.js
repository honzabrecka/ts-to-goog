/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/node-feedparser/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ExportAssignment in  */

/**
 * @constructor
 * @struct
 * @param {!FeedParser.Options} options
 */
function FeedParser(options) {}
 /** @type {!FeedParser.Options} */
FeedParser.prototype.options;
 /** @type {!SAXStream} */
FeedParser.prototype.stream;
 /** @type {!Object<string,?>} */
FeedParser.prototype.meta;
 /** @type {boolean} */
FeedParser.prototype._emitted_meta;
 /** @type {!Array<?>} */
FeedParser.prototype.stack;
 /** @type {!Array<?>} */
FeedParser.prototype.xmlbase;
 /** @type {boolean} */
FeedParser.prototype.in_xhtml;
 /** @type {!Object<string,?>} */
FeedParser.prototype.xhtml;
 /** @type {!Array<!Error>} */
FeedParser.prototype.errors;

/**
 * @param {?} ev
 * @param {?} fn
 * @return {?}
 */
FeedParser.prototype.addListener = function(ev, fn) {};

/**
 * @return {void}
 */
FeedParser.prototype.cork = function() {};

/**
 * @return {?}
 */
FeedParser.prototype.eventNames = function() {};

/**
 * @return {?}
 */
FeedParser.prototype.getMaxListeners = function() {};

/**
 * @param {!FeedParser.Attrs} attrs
 * @param {string} el
 * @return {?}
 */
FeedParser.prototype.handleAttributes = function(attrs, el) {};

/**
 * @param {string} el
 * @return {void}
 */
FeedParser.prototype.handleCloseTag = function(el) {};

/**
 * @return {?}
 */
FeedParser.prototype.handleEnd = function() {};

/**
 * @param {!Error} e
 * @return {void}
 */
FeedParser.prototype.handleError = function(e) {};

/**
 * @param {!FeedParser.Node} node
 * @param {string} type
 * @param {!FeedParser.Options} options
 * @return {!FeedParser.Item}
 */
FeedParser.prototype.handleItem = function(node, type, options) {};

/**
 * @param {!FeedParser.Node} node
 * @param {string} type
 * @param {!FeedParser.Options} options
 * @return {!FeedParser.Meta}
 */
FeedParser.prototype.handleMeta = function(node, type, options) {};

/**
 * @param {!FeedParser.Node} node
 * @return {void}
 */
FeedParser.prototype.handleOpenTag = function(node) {};

/**
 * @param {!FeedParser.Node} node
 * @return {void}
 */
FeedParser.prototype.handleProcessingInstruction = function(node) {};

/**
 * @param {!Error} e
 * @return {void}
 */
FeedParser.prototype.handleSaxError = function(e) {};

/**
 * @param {string} text
 * @return {void}
 */
FeedParser.prototype.handleText = function(text) {};

/**
 * @return {void}
 */
FeedParser.prototype.init = function() {};

/**
 * @return {?}
 */
FeedParser.prototype.isPaused = function() {};

/**
 * @param {string} type
 * @return {?}
 */
FeedParser.prototype.listenerCount = function(type) {};

/**
 * @param {string} type
 * @return {?}
 */
FeedParser.prototype.listeners = function(type) {};

/**
 * @param {?} ev
 * @param {?} fn
 * @return {?}
 */
FeedParser.prototype.on = function(ev, fn) {};

/**
 * @return {?}
 */
FeedParser.prototype.pause = function() {};

/**
 * @param {?} dest
 * @param {?} pipeOpts
 * @return {?}
 */
FeedParser.prototype.pipe = function(dest, pipeOpts) {};

/**
 * @param {?} chunk
 * @param {?} encoding
 * @return {?}
 */
FeedParser.prototype.push = function(chunk, encoding) {};

/**
 * @param {number=} n
 * @return {!FeedParser.Item}
 */
FeedParser.prototype.read = function(n) {};

/**
 * @param {string} type
 * @param {...?} args
 * @return {?}
 */
FeedParser.prototype.removeAllListeners = function(type, args) {};

/**
 * @return {?}
 */
FeedParser.prototype.resume = function() {};

/**
 * @return {void}
 */
FeedParser.prototype.resumeSaxError = function() {};

/**
 * @param {?} encoding
 * @return {?}
 */
FeedParser.prototype.setDefaultEncoding = function(encoding) {};

/**
 * @param {?} enc
 * @return {?}
 */
FeedParser.prototype.setEncoding = function(enc) {};

/**
 * @param {?} n
 * @return {?}
 */
FeedParser.prototype.setMaxListeners = function(n) {};

/**
 * @return {void}
 */
FeedParser.prototype.uncork = function() {};

/**
 * @param {?} dest
 * @return {?}
 */
FeedParser.prototype.unpipe = function(dest) {};

/**
 * @param {?} chunk
 * @return {?}
 */
FeedParser.prototype.unshift = function(chunk) {};

/**
 * @param {!SAXStream} stream
 * @param {...?} args
 * @return {?}
 */
FeedParser.prototype.wrap = function(stream, args) {};

/**
 * @param {?} data
 * @param {string} encoding
 * @param {function(): ?} done
 * @return {void}
 */
FeedParser.prototype._transform = function(data, encoding, done) {};

/**
 * @param {function(): ?} done
 * @return {void}
 */
FeedParser.prototype._flush = function(done) {};

/** @typedef {string} */
FeedParser.Type;
/**
 * @record
 * @struct
 */
FeedParser.Options = function() {};
 /** @type {boolean} */
FeedParser.Options.prototype.normalize;
 /** @type {boolean} */
FeedParser.Options.prototype.addmeta;
 /** @type {string} */
FeedParser.Options.prototype.feedurl;
 /** @type {boolean} */
FeedParser.Options.prototype.resume_saxerror;
 /** @type {number} */
FeedParser.Options.prototype.MAX_BUFFER_LENGTH;
/**
 * @record
 * @struct
 */
FeedParser.Node = function() {};

/* TODO: IndexSignature: FeedParser */
/**
 * @record
 * @struct
 */
FeedParser.Attrs = function() {};
 /** @type {string} */
FeedParser.Attrs.prototype.name;
 /** @type {?} */
FeedParser.Attrs.prototype.value;
 /** @type {string} */
FeedParser.Attrs.prototype.prefix;
 /** @type {string} */
FeedParser.Attrs.prototype.local;
 /** @type {string} */
FeedParser.Attrs.prototype.uri;
/**
 * @record
 * @struct
 */
FeedParser.NS = function() {};

/* TODO: IndexSignature: FeedParser */
/**
 * @record
 * @struct
 */
FeedParser.Image = function() {};
 /** @type {string} */
FeedParser.Image.prototype.url;
 /** @type {string} */
FeedParser.Image.prototype.title;
/**
 * @record
 * @struct
 */
FeedParser.Meta = function() {};

/* TODO: PropertySignature: FeedParser."#ns" */

/* TODO: PropertySignature: FeedParser."#type" */

/* TODO: PropertySignature: FeedParser."#version" */
 /** @type {string} */
FeedParser.Meta.prototype.title;
 /** @type {string} */
FeedParser.Meta.prototype.description;
 /** @type {!Date} */
FeedParser.Meta.prototype.date;
 /** @type {!Date} */
FeedParser.Meta.prototype.pubdate;
 /** @type {string} */
FeedParser.Meta.prototype.link;
 /** @type {string} */
FeedParser.Meta.prototype.xmlurl;
 /** @type {string} */
FeedParser.Meta.prototype.author;
 /** @type {string} */
FeedParser.Meta.prototype.language;
 /** @type {!FeedParser.Image} */
FeedParser.Meta.prototype.image;
 /** @type {string} */
FeedParser.Meta.prototype.favicon;
 /** @type {string} */
FeedParser.Meta.prototype.copyright;
 /** @type {string} */
FeedParser.Meta.prototype.generator;
 /** @type {!Array<string>} */
FeedParser.Meta.prototype.categories;
/**
 * @record
 * @struct
 */
FeedParser.Item = function() {};
 /** @type {string} */
FeedParser.Item.prototype.title;
 /** @type {string} */
FeedParser.Item.prototype.description;
 /** @type {string} */
FeedParser.Item.prototype.summary;
 /** @type {!Date} */
FeedParser.Item.prototype.date;
 /** @type {!Date} */
FeedParser.Item.prototype.pubdate;
 /** @type {string} */
FeedParser.Item.prototype.link;
 /** @type {string} */
FeedParser.Item.prototype.origlink;
 /** @type {string} */
FeedParser.Item.prototype.author;
 /** @type {string} */
FeedParser.Item.prototype.guid;
 /** @type {string} */
FeedParser.Item.prototype.comments;
 /** @type {!FeedParser.Image} */
FeedParser.Item.prototype.image;
 /** @type {!Array<string>} */
FeedParser.Item.prototype.categories;
 /** @type {!Array<string>} */
FeedParser.Item.prototype.enclosures;
 /** @type {!FeedParser.Meta} */
FeedParser.Item.prototype.meta;
