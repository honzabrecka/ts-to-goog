/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/gulp-nodemon/index.d.ts:
/** @const */
var nodemon = {};
/**
 * @record
 * @struct
 */
nodemon.Nodemon = function() {};

/* TODO: CallSignature: nodemon */
/**
 * @extends {nodemon._Option}
 * @record
 * @struct
 */
nodemon.Option = function() {};
 /** @type {(!Array<string>|function(!Array<string>): !Array<string>)} */
nodemon.Option.prototype.tasks;
/**
 * @record
 * @struct
 */
nodemon._Option = function() {};
 /** @type {!Object<string,(string|number|boolean)>} */
nodemon._Option.prototype.env;
 /** @type {string} */
nodemon._Option.prototype.script;
 /** @type {string} */
nodemon._Option.prototype.ext;
 /** @type {string} */
nodemon._Option.prototype.exec;
 /** @type {!Array<string>} */
nodemon._Option.prototype.watch;
 /** @type {!Array<string>} */
nodemon._Option.prototype.ignore;
 /** @type {boolean} */
nodemon._Option.prototype.quiet;
 /** @type {boolean} */
nodemon._Option.prototype.verbose;
 /** @type {boolean} */
nodemon._Option.prototype.stdin;
 /** @type {boolean} */
nodemon._Option.prototype.stdout;
 /** @type {boolean} */
nodemon._Option.prototype.runOnChangeOnly;
 /** @type {number} */
nodemon._Option.prototype.delay;
 /** @type {boolean} */
nodemon._Option.prototype.legacyWatch;
 /** @type {boolean} */
nodemon._Option.prototype.exitcrash;
 /** @type {!Object<string,(string|number|boolean)>} */
nodemon._Option.prototype.execMap;
 /** @type {!Object<string,string>} */
nodemon._Option.prototype.events;
 /** @type {string} */
nodemon._Option.prototype.restartable;
/**
 * @record
 * @struct
 */
nodemon.EventEmitter = function() {};

/**
 * @param {string} event
 * @param {!Function|!Array<string>} listener_or_tasks
 * @return {EventEmitter}
 */
nodemon.EventEmitter.prototype.addListener = function(event, listener_or_tasks) {};

/**
 * @param {string} event
 * @param {!Function|!Array<string>} listener_or_tasks
 * @return {EventEmitter}
 */
nodemon.EventEmitter.prototype.on = function(event, listener_or_tasks) {};

/**
 * @param {string} event
 * @param {!Function|!Array<string>} listener_or_tasks
 * @return {EventEmitter}
 */
nodemon.EventEmitter.prototype.once = function(event, listener_or_tasks) {};
 /** @type {!nodemon.Nodemon} */
var nodemon;

/* TODO: ExportAssignment in  */
