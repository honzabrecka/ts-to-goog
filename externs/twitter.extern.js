/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/twitter/index.d.ts:
/**
 * @record
 * @struct
 */
function Twitter() {}
 /** @type {!TwitterWidgets} */
Twitter.prototype.widgets;
 /** @type {!TwitterEvents} */
Twitter.prototype.events;

/**
 * All JavaScript code depending on widgets.js should execute on or after this function.
 * 
 * @param {function(!Twitter): void} callback A callback function which will be invoked when widgets.js is ready.
 * @return {void}
 */
Twitter.prototype.ready = function(callback) {};
/**
 * @record
 * @struct
 */
function TwitterWidgets() {}

/**
 * Initialize Twitter for Websites widgets contained within a page.
 * Initialize Twitter for Websites widgets contained within children of the element.
 * Initialize Twitter for Websites widgets contained within children of the elements.
 * @param {!HTMLElement|!Array<!HTMLElement>=} element_or_elements
 * @return {void}
 */
TwitterWidgets.prototype.load = function(element_or_elements) {};

/**
 * Create a share button for a URL.
 * 
 * @param {string} url The URL to be shared.
 * @param {!HTMLElement} target The element in which to render the widget.
 * @param {!TwitterButtonWidgetOptions=} options An object hash of additional options to configure the widget.
 * @return {!Promise<!HTMLElement>}
 */
TwitterWidgets.prototype.createShareButton = function(url, target, options) {};

/**
 * Create a follow button for a user.
 * 
 * @param {string} screen_name The screen_name of a user to be followed.
 * @param {!HTMLElement} target The element in which to render the widget.
 * @param {!TwitterButtonWidgetOptions=} options An object hash of additional options to configure the widget.
 * @return {!Promise<!HTMLElement>}
 */
TwitterWidgets.prototype.createFollowButton = function(screen_name, target, options) {};

/**
 * Create a hashtag button for a hashtag.
 * 
 * @param {string} hashtag Hashtag to be Tweeted and displayed on the button.
 * @param {!HTMLElement} target The element in which to render the widget.
 * @param {!TwitterButtonWidgetOptions=} options An object hash of additional options to configure the widget.
 * @return {!Promise<!HTMLElement>}
 */
TwitterWidgets.prototype.createHashtagButton = function(hashtag, target, options) {};

/**
 * Create a mention button for a user.
 * 
 * @param {string} screen_name The screen_name of a user to be mentioned.
 * @param {!HTMLElement} target The element in which to render the widget.
 * @param {!TwitterButtonWidgetOptions=} options An object hash of additional options to configure the widget.
 * @return {!Promise<!HTMLElement>}
 */
TwitterWidgets.prototype.createMentionButton = function(screen_name, target, options) {};

/**
 * Create a timeline widget.
 * 
 * @param {string} widgetId The ID of a timeline widget to be rendered.
 * @param {!HTMLElement} target The element in which to render the widget.
 * @param {!TwitterTimelineWidgetOptions=} options An object hash of additional options to configure the widget.
 * @return {!Promise<!HTMLElement>}
 */
TwitterWidgets.prototype.createTimeline = function(widgetId, target, options) {};

/**
 * Create an embedded Tweet for a Tweet.
 * 
 * @param {string} tweetId The ID of a Tweet to be rendered.
 * @param {!HTMLElement} target The element in which to render the widget.
 * @param {!TwitterTweetWidgetOptions=} options An object hash of additional options to configure the widget.
 * @return {!Promise<!HTMLElement>}
 */
TwitterWidgets.prototype.createTweet = function(tweetId, target, options) {};
/**
 * @record
 * @struct
 */
function TwitterWidgetOptions() {}
 /** @type {boolean} */
TwitterWidgetOptions.prototype.dnt;
 /** @type {string} */
TwitterWidgetOptions.prototype.hashtags;
 /** @type {string} */
TwitterWidgetOptions.prototype.lang;
 /** @type {string} */
TwitterWidgetOptions.prototype.related;
 /** @type {string} */
TwitterWidgetOptions.prototype.via;
/**
 * @extends {TwitterWidgetOptions}
 * @record
 * @struct
 */
function TwitterButtonWidgetOptions() {}
 /** @type {string} */
TwitterButtonWidgetOptions.prototype.align;
 /** @type {string} */
TwitterButtonWidgetOptions.prototype.count;
 /** @type {string} */
TwitterButtonWidgetOptions.prototype.counturl;
 /** @type {string} */
TwitterButtonWidgetOptions.prototype.size;
 /** @type {string} */
TwitterButtonWidgetOptions.prototype.text;
/**
 * @extends {TwitterWidgetOptions}
 * @record
 * @struct
 */
function TwitterTweetWidgetOptions() {}
 /** @type {string} */
TwitterTweetWidgetOptions.prototype.align;
 /** @type {string} */
TwitterTweetWidgetOptions.prototype.conversation;
 /** @type {string} */
TwitterTweetWidgetOptions.prototype.cards;
 /** @type {(string|number)} */
TwitterTweetWidgetOptions.prototype.width;
 /** @type {string} */
TwitterTweetWidgetOptions.prototype.linkColor;
 /** @type {string} */
TwitterTweetWidgetOptions.prototype.theme;
/**
 * @extends {TwitterWidgetOptions}
 * @extends {TwitterButtonWidgetOptions}
 * @extends {TwitterTweetWidgetOptions}
 * @record
 * @struct
 */
function TwitterTimelineWidgetOptions() {}
 /** @type {string} */
TwitterTimelineWidgetOptions.prototype.ariaPolite;
 /** @type {(string|number)} */
TwitterTimelineWidgetOptions.prototype.height;
 /** @type {string} */
TwitterTimelineWidgetOptions.prototype.borderColor;
 /** @type {string} */
TwitterTimelineWidgetOptions.prototype.chrome;
 /** @type {number} */
TwitterTimelineWidgetOptions.prototype.tweetLimit;
 /** @type {string} */
TwitterTimelineWidgetOptions.prototype.screenName;
 /** @type {string} */
TwitterTimelineWidgetOptions.prototype.userId;
 /** @type {boolean} */
TwitterTimelineWidgetOptions.prototype.showReplies;
 /** @type {string} */
TwitterTimelineWidgetOptions.prototype.favoritesScreenName;
 /** @type {string} */
TwitterTimelineWidgetOptions.prototype.favoritesUserId;
 /** @type {string} */
TwitterTimelineWidgetOptions.prototype.listOwnerScreenName;
 /** @type {string} */
TwitterTimelineWidgetOptions.prototype.listOwnerId;
 /** @type {string} */
TwitterTimelineWidgetOptions.prototype.listId;
 /** @type {string} */
TwitterTimelineWidgetOptions.prototype.listSlug;
/**
 * @record
 * @struct
 */
function TwitterEvents() {}

/**
 * Occurs after twttr.widgets.load has initialized widgets in a page, from an embed code. Includes an array of references to the newly created widget nodes.
 * 
 * Bind an event occurs after an individual widget in a page is rendered. Includes a of reference to the newly created widget node. Occurs at the same time as loaded, but for each individual widget. Also triggered when creating a widget with a factory function.
 * 
 * Bind an event which will be triggered when the user publishes a Tweet (either new, or a reply) through the Tweet Web Intent.
 * 
 * Bind an event which will populate the followed user_id in the event object’s data argument.
 * 
 * Bind an event which will populate the original Tweet that was retweeted’s source_tweet_id in the event object’s data argument.
 * 
 * Bind an event which will populate the favorited tweet_id in the event object’s data argument.
 * 
 * Bind an event occurs when the user invokes a Web Intent from within an embedded widget.
 * 
 * Bind an event.
 * 
 * @param {string} name The name of an event.
 * @param {function(?): void|function(!TwitterIntentEvent): void} callback A callback function which will be invoked.
 * @return {void}
 */
TwitterEvents.prototype.bind = function(name, callback) {};
/**
 * @record
 * @struct
 */
function TwitterIntentEvent() {}
 /** @type {!HTMLElement} */
TwitterIntentEvent.prototype.target;
 /** @type {string} */
TwitterIntentEvent.prototype.region;
 /** @type {!TwitterIntentEventData} */
TwitterIntentEvent.prototype.data;
 /** @type {string} */
TwitterIntentEvent.prototype.type;
/**
 * @record
 * @struct
 */
function TwitterIntentEventData() {}
 /** @type {string} */
TwitterIntentEventData.prototype.tweet_id;
 /** @type {string} */
TwitterIntentEventData.prototype.source_tweet_id;
 /** @type {string} */
TwitterIntentEventData.prototype.screen_name;
 /** @type {string} */
TwitterIntentEventData.prototype.user_id;
 /** @type {!Twitter} */
var twttr;
