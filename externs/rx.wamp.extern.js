/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/rx.wamp/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportDeclaration in  */
/**
 * @record
 * @struct
 */
function IWampEvent() {}
 /** @type {!Array<?>} */
IWampEvent.prototype.args;
 /** @type {?} */
IWampEvent.prototype.kwargs;
 /** @type {!autobahn.IEvent} */
IWampEvent.prototype.details;
/**
 * @record
 * @struct
 */
function IObservableWampStatic() {}

/**
 * @param {!autobahn.IConnectionOptions} options
 * @param {boolean=} keepReconnecting
 * @param {?=} factory
 * @return {?<!autobahn.Session>}
 */
IObservableWampStatic.prototype.fromConnection = function(options, keepReconnecting, factory) {};

/**
 * @param {!autobahn.Session} session
 * @param {string} topic
 * @param {!autobahn.ISubscribeOptions} options
 * @param {!Rx.IObserver<!autobahn.ISubscription>=} openObserver
 * @return {?}
 */
IObservableWampStatic.prototype.fromPubSubPattern = function(session, topic, options, openObserver) {};

/**
 * @param {(!autobahn.Session|?<?>)} sessionOrObservable
 * @return {!Subscriber}
 */
IObservableWampStatic.prototype.subscriber = function(sessionOrObservable) {};

/**
 * @param {(!autobahn.Session|?<!autobahn.Session>)} sessionOrObservable
 * @param {string} topic
 * @param {!autobahn.ISubscribeOptions=} options
 * @param {!Rx.IObserver<!autobahn.ISubscription>=} openObserver
 * @return {?<?>}
 */
IObservableWampStatic.prototype.subscribeAsObservable = function(sessionOrObservable, topic, options, openObserver) {};

/**
 * @param {!autobahn.Session} session
 * @param {string} topic
 * @param {!Array<?>=} args
 * @param {?=} kwargs
 * @param {!autobahn.IPublishOptions=} options
 * @return {?<!autobahn.IPublication>}
 */
IObservableWampStatic.prototype.publishAsObservable = function(session, topic, args, kwargs, options) {};

/**
 * @param {(!autobahn.Session|?<!autobahn.Session>)} sessionOrObservable
 * @param {string} procedure
 * @param {function(!Array<?>, ?, !autobahn.IInvocation): void} endpoint
 * @param {!autobahn.IRegisterOptions} options
 * @return {?<!autobahn.IRegistration>}
 */
IObservableWampStatic.prototype.registerAsObservable = function(sessionOrObservable, procedure, endpoint, options) {};

/**
 * @template TResult
 * @param {!autobahn.Session} session
 * @param {string} procedure
 * @param {!autobahn.ICallOptions=} options
 * @return {?}
 */
IObservableWampStatic.prototype.callAsObservable = function(session, procedure, options) {};
/**
 * @constructor
 * @struct
 */
function Subscriber() {}

/**
 * @param {string} topic
 * @param {!autobahn.ISubscribeOptions} options
 * @param {(!Rx.IObserver<?>|function(?): void)=} observerOrOnNext
 * @param {function(?): void=} onError
 * @param {function(): void=} onCompleted
 * @return {!Subscriber}
 */
Subscriber.prototype.to = function(topic, options, observerOrOnNext, onError, onCompleted) {};

/**
 * @return {void}
 */
Subscriber.prototype.dispose = function() {};
/**
 * @record
 * @struct
 */
function IPubSubSubject() {}
 /** @type {?<?>} */
IPubSubSubject.prototype.observable;
 /** @type {?<?>} */
IPubSubSubject.prototype.observer;
 /** @type {!Rx.IObservable<!autobahn.IError>} */
IPubSubSubject.prototype.errors;
 /** @type {!Rx.IObservable<!autobahn.ISubscription>} */
IPubSubSubject.prototype.opened;

/* TODO: NamespaceExportDeclaration in  */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "rx"
