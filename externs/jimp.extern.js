/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jimp/index.d.ts:
/** @const */
var jimp = {};

/** @typedef {function(!Error, T): void} */
jimp.Callback;

/** @typedef {string} */
jimp.ResizeMode;

/** @typedef {string} */
jimp.PresetFont;

/** @typedef {string} */
jimp.FileMINE;

/** @typedef {number} */
jimp.AlignMode;

/** @typedef {number} */
jimp.FilterType;

/** @typedef {number} */
jimp.FontBoolean;
/**
 * @record
 * @struct
 */
jimp.FontChar = function() {};
 /** @type {number} */
jimp.FontChar.prototype.id;
 /** @type {number} */
jimp.FontChar.prototype.x;
 /** @type {number} */
jimp.FontChar.prototype.y;
 /** @type {number} */
jimp.FontChar.prototype.weight;
 /** @type {number} */
jimp.FontChar.prototype.height;
 /** @type {number} */
jimp.FontChar.prototype.xoffset;
 /** @type {number} */
jimp.FontChar.prototype.yoffset;
 /** @type {number} */
jimp.FontChar.prototype.xadvance;
 /** @type {number} */
jimp.FontChar.prototype.page;
 /** @type {number} */
jimp.FontChar.prototype.chnl;

/** @typedef {(string|{common: {lineHeight: number, base: number, scaleW: number, scaleH: number, pages: number, packed: number}, info: {face: string, size: number, bold: number, italic: number, charset: string, unicode: number, stretchH: number, smooth: number, aa: number, padding: !Array<?>, spacing: !Array<?>}, kernings: ?, pages: !Array<!jimp.JIMP>, chars: !Object<string,!jimp.FontChar>})} */
jimp.Font;

/**
 * @constructor
 * @struct
 * @param {number} width
 * @param {number} height
 * @param {function(!Error, !jimp.JimpImage): void|number=} callback_or_initialColor
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 */
jimp.JimpImage = function(width, height, callback_or_initialColor, callback) {};
 /** @type {{data: ?, width: number, height: number}} */
jimp.JimpImage.prototype.bitmap;
 /** @type {string} */
jimp.JimpImage.prototype._originalMime;

/**
 * @param {number=} n
 * @return {string}
 */
jimp.JimpImage.prototype.hash = function(n) {};

/**
 * @return {string}
 */
jimp.JimpImage.prototype.getExtension = function() {};

/**
 * @return {string}
 */
jimp.JimpImage.prototype.getMIME = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @return {number}
 */
jimp.JimpImage.prototype.getPixelColor = function(x, y) {};

/**
 * @param {number} hex
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
jimp.JimpImage.prototype.setPixelColor = function(hex, x, y) {};

/**
 * @param {string} path
 * @param {function(!Error, undefined): void=} callback
 * @return {void}
 */
jimp.JimpImage.prototype.write = function(path, callback) {};

/**
 * @param {string} mine
 * @param {function(!Error, string): void=} callback
 * @return {void}
 */
jimp.JimpImage.prototype.getBase64 = function(mine, callback) {};

/**
 * @param {string} mine
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
jimp.JimpImage.prototype.getBuffer = function(mine, callback) {};

/**
 * @param {number} n
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.quality = function(n) {};

/**
 * @param {boolean} is
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.rgba = function(is) {};

/**
 * @param {number} type
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.filterType = function(type) {};

/**
 * @param {number} level
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.deflateLevel = function(level) {};

/**
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.clone = function() {};

/**
 * @param {(string|{common: {lineHeight: number, base: number, scaleW: number, scaleH: number, pages: number, packed: number}, info: {face: string, size: number, bold: number, italic: number, charset: string, unicode: number, stretchH: number, smooth: number, aa: number, padding: !Array<?>, spacing: !Array<?>}, kernings: ?, pages: !Array<!jimp.JIMP>, chars: !Object<string,!jimp.FontChar>})} font
 * @param {number} x
 * @param {number} y
 * @param {string} text
 * @param {number=} width
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.print = function(font, x, y, text, width) {};

/**
 * @param {!Array<{apply: string, params: !Array<?>}>} params
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.color = function(params) {};

/**
 * @param {!Array<!Array<number>>} matrix
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.convolution = function(matrix) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {function(number, number, number): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.scan = function(x, y, width, height, callback) {};

/**
 * @param {number} width
 * @param {number} height
 * @param {function(!Error, !jimp.JimpImage): void|(string|number)|number=} callback_or_alignBitsOrMode_or_alignBits
 * @param {function(!Error, !jimp.JimpImage): void|string=} callback_or_mode
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.contain = function(width, height, callback_or_alignBitsOrMode_or_alignBits, callback_or_mode, callback) {};

/**
 * @param {number} width
 * @param {number} height
 * @param {function(!Error, !jimp.JimpImage): void|(string|number)|number=} callback_or_alignBitsOrmode_or_alignBits
 * @param {function(!Error, !jimp.JimpImage): void|string=} callback_or_mode
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.cover = function(width, height, callback_or_alignBitsOrmode_or_alignBits, callback_or_mode, callback) {};

/**
 * @param {number} width
 * @param {number} height
 * @param {function(!Error, !jimp.JimpImage): void|string=} callback_or_mode
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.resize = function(width, height, callback_or_mode, callback) {};

/**
 * @param {?} factor
 * @param {function(!Error, !jimp.JimpImage): void|string=} callback_or_mode
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.scale = function(factor, callback_or_mode, callback) {};

/**
 * @param {number} width
 * @param {number} height
 * @param {function(!Error, !jimp.JimpImage): void|string=} callback_or_mode
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.scaleToFit = function(width, height, callback_or_mode, callback) {};

/**
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.autocrop = function(callback) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.crop = function(x, y, width, height, callback) {};

/**
 * @param {string} scr
 * @param {number} x
 * @param {number} y
 * @param {function(!Error, !jimp.JimpImage): void|number=} callback_or_srcx
 * @param {number=} srcy
 * @param {function(!Error, !jimp.JimpImage): void|number=} callback_or_srcw
 * @param {number=} srch
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.blit = function(scr, x, y, callback_or_srcx, srcy, callback_or_srcw, srch, callback) {};

/**
 * @param {string} scr
 * @param {number} x
 * @param {number} y
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.composite = function(scr, x, y, callback) {};

/**
 * @param {string} scr
 * @param {number} x
 * @param {number} y
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.mask = function(scr, x, y, callback) {};

/**
 * @param {?} horz
 * @param {?} vert
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.flip = function(horz, vert, callback) {};

/**
 * @param {?} horz
 * @param {?} vert
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.mirror = function(horz, vert, callback) {};

/**
 * @param {number} deg
 * @param {function(!Error, !jimp.JimpImage): void|?=} callback_or_mode
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.rotate = function(deg, callback_or_mode, callback) {};

/**
 * @param {number} val
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.brightness = function(val, callback) {};

/**
 * @param {number} val
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.contrast = function(val, callback) {};

/**
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.dither565 = function(callback) {};

/**
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.greyscale = function(callback) {};

/**
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.invert = function(callback) {};

/**
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.normalize = function(callback) {};

/**
 * @param {number} val
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.fade = function(val, callback) {};

/**
 * @param {number} val
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.opacity = function(val, callback) {};

/**
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.opaque = function(callback) {};

/**
 * @param {number} hex
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.background = function(hex, callback) {};

/**
 * @param {number} pixel
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.gaussian = function(pixel, callback) {};

/**
 * @param {number} pixel
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.blur = function(pixel, callback) {};

/**
 * @param {number} level
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.posterize = function(level, callback) {};

/**
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!jimp.JimpImage}
 */
jimp.JimpImage.prototype.sepia = function(callback) {};
/**
 * @extends {jimp.JimpImage}
 * @constructor
 * @struct
 */
jimp.JIMP = function() {};
 /** @type {string} */
jimp.JIMP.RESIZE_NEAREST_NEIGHBOR;
 /** @type {string} */
jimp.JIMP.RESIZE_BILINEAR;
 /** @type {string} */
jimp.JIMP.RESIZE_BICUBIC;
 /** @type {string} */
jimp.JIMP.RESIZE_HERMITE;
 /** @type {string} */
jimp.JIMP.RESIZE_BEZIER;
 /** @type {string} */
jimp.JIMP.FONT_SANS_8_BLACK;
 /** @type {string} */
jimp.JIMP.FONT_SANS_16_BLACK;
 /** @type {string} */
jimp.JIMP.FONT_SANS_32_BLACK;
 /** @type {string} */
jimp.JIMP.FONT_SANS_64_BLACK;
 /** @type {string} */
jimp.JIMP.FONT_SANS_128_BLACK;
 /** @type {string} */
jimp.JIMP.FONT_SANS_8_WHITE;
 /** @type {string} */
jimp.JIMP.FONT_SANS_16_WHITE;
 /** @type {string} */
jimp.JIMP.FONT_SANS_32_WHITE;
 /** @type {string} */
jimp.JIMP.FONT_SANS_64_WHITE;
 /** @type {string} */
jimp.JIMP.FONT_SANS_128_WHITE;
 /** @type {string} */
jimp.JIMP.MIME_PNG;
 /** @type {string} */
jimp.JIMP.MIME_JPEG;
 /** @type {string} */
jimp.JIMP.MIME_BMP;
 /** @type {number} */
jimp.JIMP.AUTO;
 /** @type {number} */
jimp.JIMP.HORIZONTAL_ALIGN_LEFT;
 /** @type {number} */
jimp.JIMP.HORIZONTAL_ALIGN_CENTER;
 /** @type {number} */
jimp.JIMP.HORIZONTAL_ALIGN_RIGHT;
 /** @type {number} */
jimp.JIMP.VERTICAL_ALIGN_TOP;
 /** @type {number} */
jimp.JIMP.VERTICAL_ALIGN_MIDDLE;
 /** @type {number} */
jimp.JIMP.VERTICAL_ALIGN_BOTTOM;
 /** @type {number} */
jimp.JIMP.PNG_FILTER_AUTO;
 /** @type {number} */
jimp.JIMP.PNG_FILTER_NONE;
 /** @type {number} */
jimp.JIMP.PNG_FILTER_SUB;
 /** @type {number} */
jimp.JIMP.PNG_FILTER_UP;
 /** @type {number} */
jimp.JIMP.PNG_FILTER_AVERAGE;
 /** @type {number} */
jimp.JIMP.PNG_FILTER_PAETH;

/**
 * @param {(string|?)} path
 * @param {function(!Error, !jimp.JimpImage): void=} callback
 * @return {!Promise<!jimp.JimpImage>}
 */
jimp.JIMP.read = function(path, callback) {};

/**
 * @param {string} path
 * @param {function(!Error, (string|{common: {lineHeight: number, base: number, scaleW: number, scaleH: number, pages: number, packed: number}, info: {face: string, size: number, bold: number, italic: number, charset: string, unicode: number, stretchH: number, smooth: number, aa: number, padding: !Array<?>, spacing: !Array<?>}, kernings: ?, pages: !Array<!jimp.JIMP>, chars: !Object<string,!jimp.FontChar>})): void=} callback
 * @return {!Promise<(string|{common: {lineHeight: number, base: number, scaleW: number, scaleH: number, pages: number, packed: number}, info: {face: string, size: number, bold: number, italic: number, charset: string, unicode: number, stretchH: number, smooth: number, aa: number, padding: !Array<?>, spacing: !Array<?>}, kernings: ?, pages: !Array<!jimp.JIMP>, chars: !Object<string,!jimp.FontChar>})>}
 */
jimp.JIMP.loadFont = function(path, callback) {};

/**
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @param {number} alpha
 * @return {number}
 */
jimp.JIMP.rgbaToInt = function(r, g, b, alpha) {};

/**
 * @param {number} hex
 * @return {{r: number, g: number, b: number, a: number}}
 */
jimp.JIMP.intToRGBA = function(hex) {};

/**
 * @param {!jimp.JimpImage} image
 * @param {!jimp.JimpImage} image2
 * @return {number}
 */
jimp.JIMP.distance = function(image, image2) {};

/**
 * @param {!jimp.JimpImage} image1
 * @param {!jimp.JimpImage} image2
 * @param {number=} threshold
 * @return {{image: !jimp.JimpImage, percent: number}}
 */
jimp.JIMP.diff = function(image1, image2, threshold) {};

/**
 * @param {number} deflate
 * @return {void}
 */
jimp.JIMP.deflateStrategy = function(deflate) {};

/* TODO: ExportAssignment in  */
