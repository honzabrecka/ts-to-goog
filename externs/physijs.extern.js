/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/physijs/index.d.ts:
/** @const */
var Physijs = {};

/**
 * @return {!Object}
 */
Physijs.noConflict = function() {};

/**
 * @param {?} material
 * @param {number=} friction
 * @param {number=} restitution
 * @return {!Physijs.Material}
 */
Physijs.createMaterial = function(material, friction, restitution) {};
/**
 * @record
 * @struct
 */
Physijs.Material = function() {};
 /** @type {{id: number, friction: number, restriction: number}} */
Physijs.Material.prototype._physijs;
/**
 * @record
 * @struct
 */
Physijs.Constraint = function() {};

/**
 * @return {?}
 */
Physijs.Constraint.prototype.getDefinition = function() {};
/**
 * @record
 * @struct
 */
Physijs.PointConstraintDefinition = function() {};
 /** @type {string} */
Physijs.PointConstraintDefinition.prototype.type;
 /** @type {number} */
Physijs.PointConstraintDefinition.prototype.id;
 /** @type {?} */
Physijs.PointConstraintDefinition.prototype.objecta;
 /** @type {?} */
Physijs.PointConstraintDefinition.prototype.objectb;
 /** @type {?} */
Physijs.PointConstraintDefinition.prototype.positiona;
 /** @type {?} */
Physijs.PointConstraintDefinition.prototype.positionb;

/**
 * @constructor
 * @struct
 * @param {?} objecta
 * @param {?} objectb
 * @param {?=} position
 */
Physijs.PointConstraint = function(objecta, objectb, position) {};

/**
 * @return {!Physijs.PointConstraintDefinition}
 */
Physijs.PointConstraint.prototype.getDefinition = function() {};
/**
 * @record
 * @struct
 */
Physijs.HingeConstraintDefinition = function() {};
 /** @type {string} */
Physijs.HingeConstraintDefinition.prototype.type;
 /** @type {number} */
Physijs.HingeConstraintDefinition.prototype.id;
 /** @type {?} */
Physijs.HingeConstraintDefinition.prototype.objecta;
 /** @type {?} */
Physijs.HingeConstraintDefinition.prototype.objectb;
 /** @type {?} */
Physijs.HingeConstraintDefinition.prototype.positiona;
 /** @type {?} */
Physijs.HingeConstraintDefinition.prototype.positionb;
 /** @type {?} */
Physijs.HingeConstraintDefinition.prototype.axis;

/**
 * @constructor
 * @struct
 * @param {?} objecta
 * @param {?} objectb
 * @param {?} position
 * @param {?=} axis
 */
Physijs.HingeConstraint = function(objecta, objectb, position, axis) {};

/**
 * @return {!Physijs.HingeConstraintDefinition}
 */
Physijs.HingeConstraint.prototype.getDefinition = function() {};

/**
 * @param {number} low
 * @param {number} high
 * @param {number} bias_factor
 * @param {number} relaxation_factor
 * @return {void}
 */
Physijs.HingeConstraint.prototype.setLimits = function(low, high, bias_factor, relaxation_factor) {};

/**
 * @param {number} velocity
 * @param {number} acceleration
 * @return {void}
 */
Physijs.HingeConstraint.prototype.enableAngularMotor = function(velocity, acceleration) {};

/**
 * @return {void}
 */
Physijs.HingeConstraint.prototype.disableMotor = function() {};
/**
 * @record
 * @struct
 */
Physijs.SliderConstraintDefinition = function() {};
 /** @type {string} */
Physijs.SliderConstraintDefinition.prototype.type;
 /** @type {number} */
Physijs.SliderConstraintDefinition.prototype.id;
 /** @type {?} */
Physijs.SliderConstraintDefinition.prototype.objecta;
 /** @type {?} */
Physijs.SliderConstraintDefinition.prototype.objectb;
 /** @type {?} */
Physijs.SliderConstraintDefinition.prototype.positiona;
 /** @type {?} */
Physijs.SliderConstraintDefinition.prototype.positionb;
 /** @type {?} */
Physijs.SliderConstraintDefinition.prototype.axis;

/**
 * @constructor
 * @struct
 * @param {?} objecta
 * @param {?} objectb
 * @param {?} position
 * @param {?=} axis
 */
Physijs.SliderConstraint = function(objecta, objectb, position, axis) {};

/**
 * @return {!Physijs.SliderConstraintDefinition}
 */
Physijs.SliderConstraint.prototype.getDefinition = function() {};

/**
 * @param {number} lin_lower
 * @param {number} lin_upper
 * @param {number} ang_lower
 * @param {number} ang_upper
 * @return {void}
 */
Physijs.SliderConstraint.prototype.setLimits = function(lin_lower, lin_upper, ang_lower, ang_upper) {};

/**
 * @param {number} linear
 * @param {number} angular
 * @return {void}
 */
Physijs.SliderConstraint.prototype.setRestitution = function(linear, angular) {};

/**
 * @param {number} velocity
 * @param {number} acceleration
 * @return {void}
 */
Physijs.SliderConstraint.prototype.enableLinearMotor = function(velocity, acceleration) {};

/**
 * @return {void}
 */
Physijs.SliderConstraint.prototype.disableLinearMotor = function() {};

/**
 * @param {number} velocity
 * @param {number} acceleration
 * @return {void}
 */
Physijs.SliderConstraint.prototype.enableAngularMotor = function(velocity, acceleration) {};

/**
 * @return {void}
 */
Physijs.SliderConstraint.prototype.disableAngularMotor = function() {};
/**
 * @record
 * @struct
 */
Physijs.ConeTwistConstraintDefinition = function() {};
 /** @type {string} */
Physijs.ConeTwistConstraintDefinition.prototype.type;
 /** @type {number} */
Physijs.ConeTwistConstraintDefinition.prototype.id;
 /** @type {?} */
Physijs.ConeTwistConstraintDefinition.prototype.objecta;
 /** @type {?} */
Physijs.ConeTwistConstraintDefinition.prototype.objectb;
 /** @type {?} */
Physijs.ConeTwistConstraintDefinition.prototype.positiona;
 /** @type {?} */
Physijs.ConeTwistConstraintDefinition.prototype.positionb;
 /** @type {?} */
Physijs.ConeTwistConstraintDefinition.prototype.axisa;
 /** @type {?} */
Physijs.ConeTwistConstraintDefinition.prototype.axisb;

/**
 * @constructor
 * @struct
 * @param {?} objecta
 * @param {?} objectb
 * @param {?} position
 */
Physijs.ConeTwistConstraint = function(objecta, objectb, position) {};

/**
 * @return {!Physijs.ConeTwistConstraintDefinition}
 */
Physijs.ConeTwistConstraint.prototype.getDefinition = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @return {void}
 */
Physijs.ConeTwistConstraint.prototype.setLimit = function(x, y, z) {};

/**
 * @return {void}
 */
Physijs.ConeTwistConstraint.prototype.enableMotor = function() {};

/**
 * @param {number} max_impulse
 * @return {void}
 */
Physijs.ConeTwistConstraint.prototype.setMaxMotorImpulse = function(max_impulse) {};

/**
 * @param {?} target
 * @return {void}
 */
Physijs.ConeTwistConstraint.prototype.setMotorTarget = function(target) {};

/**
 * @return {void}
 */
Physijs.ConeTwistConstraint.prototype.disableMotor = function() {};
/**
 * @record
 * @struct
 */
Physijs.DOFConstraintDefinition = function() {};
 /** @type {string} */
Physijs.DOFConstraintDefinition.prototype.type;
 /** @type {number} */
Physijs.DOFConstraintDefinition.prototype.id;
 /** @type {?} */
Physijs.DOFConstraintDefinition.prototype.objecta;
 /** @type {?} */
Physijs.DOFConstraintDefinition.prototype.objectb;
 /** @type {?} */
Physijs.DOFConstraintDefinition.prototype.positiona;
 /** @type {?} */
Physijs.DOFConstraintDefinition.prototype.positionb;
 /** @type {?} */
Physijs.DOFConstraintDefinition.prototype.axisa;
 /** @type {?} */
Physijs.DOFConstraintDefinition.prototype.axisb;

/**
 * @constructor
 * @struct
 * @param {?} objecta
 * @param {?} objectb
 * @param {?=} position
 */
Physijs.DOFConstraint = function(objecta, objectb, position) {};

/**
 * @return {!Physijs.DOFConstraintDefinition}
 */
Physijs.DOFConstraint.prototype.getDefinition = function() {};

/**
 * @param {?} limit
 * @return {void}
 */
Physijs.DOFConstraint.prototype.setLinearLowerLimit = function(limit) {};

/**
 * @param {?} limit
 * @return {void}
 */
Physijs.DOFConstraint.prototype.setLinearUpperLimit = function(limit) {};

/**
 * @param {?} limit
 * @return {void}
 */
Physijs.DOFConstraint.prototype.setAngularLowerLimit = function(limit) {};

/**
 * @param {?} limit
 * @return {void}
 */
Physijs.DOFConstraint.prototype.setAngularUpperLimit = function(limit) {};

/**
 * @param {number} which
 * @return {void}
 */
Physijs.DOFConstraint.prototype.enableAngularMotor = function(which) {};

/**
 * @param {number} which
 * @param {number} low_angle
 * @param {number} high_angle
 * @param {number} velocity
 * @param {number} max_force
 * @return {void}
 */
Physijs.DOFConstraint.prototype.configureAngularMotor = function(which, low_angle, high_angle, velocity, max_force) {};

/**
 * @param {number} which
 * @return {void}
 */
Physijs.DOFConstraint.prototype.disableAngularMotor = function(which) {};
 /** @type {{worker: string, ammo: string}} */
Physijs.scripts;
/**
 * @record
 * @struct
 */
Physijs.SceneParameters = function() {};
 /** @type {string} */
Physijs.SceneParameters.prototype.ammo;
 /** @type {number} */
Physijs.SceneParameters.prototype.fixedTimeStep;
 /** @type {boolean} */
Physijs.SceneParameters.prototype.rateLimit;

/**
 * @constructor
 * @struct
 * @param {!Physijs.SceneParameters=} param
 */
Physijs.Scene = function(param) {};

/**
 * @param {!Physijs.Constraint} constraint
 * @param {boolean=} show_marker
 * @return {void}
 */
Physijs.Scene.prototype.addConstraint = function(constraint, show_marker) {};

/**
 * @return {void}
 */
Physijs.Scene.prototype.onSimulationResume = function() {};

/**
 * @param {!Physijs.Constraint} constraint
 * @return {void}
 */
Physijs.Scene.prototype.removeConstraint = function(constraint) {};

/**
 * @param {string} cmd
 * @param {?} params
 * @return {void}
 */
Physijs.Scene.prototype.execute = function(cmd, params) {};

/**
 * @param {?} object
 * @return {void}
 */
Physijs.Scene.prototype.add = function(object) {};

/**
 * @param {?} object
 * @return {void}
 */
Physijs.Scene.prototype.remove = function(object) {};

/**
 * @param {number} fixedTimeStep
 * @return {void}
 */
Physijs.Scene.prototype.setFixedTimeStep = function(fixedTimeStep) {};

/**
 * @param {?} gravity
 * @return {void}
 */
Physijs.Scene.prototype.setGravity = function(gravity) {};

/**
 * @param {number=} timeStep
 * @param {number=} maxSubSteps
 * @return {boolean}
 */
Physijs.Scene.prototype.simulate = function(timeStep, maxSubSteps) {};

/**
 * @param {string} event_name
 * @param {function(?): void} callback
 * @return {void}
 */
Physijs.Scene.prototype.addEventListener = function(event_name, callback) {};

/**
 * @param {string} event_name
 * @param {function(?): void} callback
 * @return {void}
 */
Physijs.Scene.prototype.removeEventListener = function(event_name, callback) {};

/**
 * @param {string|{type: string, target: ?}} event_name_or_event
 * @return {void}
 */
Physijs.Scene.prototype.dispatchEvent = function(event_name_or_event) {};

/**
 * @constructor
 * @struct
 * @param {?} geometry
 * @param {?=} material
 * @param {number=} mass
 */
Physijs.Mesh = function(geometry, material, mass) {};

/**
 * @param {?} force
 * @return {void}
 */
Physijs.Mesh.prototype.applyCentralImpulse = function(force) {};

/**
 * @param {?} force
 * @param {?} offset
 * @return {void}
 */
Physijs.Mesh.prototype.applyImpulse = function(force, offset) {};

/**
 * @param {?} force
 * @return {void}
 */
Physijs.Mesh.prototype.applyCentralForce = function(force) {};

/**
 * @param {?} force
 * @param {?} offset
 * @return {void}
 */
Physijs.Mesh.prototype.applyForce = function(force, offset) {};

/**
 * @return {?}
 */
Physijs.Mesh.prototype.getAngularVelocity = function() {};

/**
 * @param {?} velocity
 * @return {void}
 */
Physijs.Mesh.prototype.setAngularVelocity = function(velocity) {};

/**
 * @return {?}
 */
Physijs.Mesh.prototype.getLinearVelocity = function() {};

/**
 * @param {?} velocity
 * @return {void}
 */
Physijs.Mesh.prototype.setLinearVelocity = function(velocity) {};

/**
 * @param {?} factor
 * @return {void}
 */
Physijs.Mesh.prototype.setAngularFactor = function(factor) {};

/**
 * @param {?} factor
 * @return {void}
 */
Physijs.Mesh.prototype.setLinearFactor = function(factor) {};

/**
 * @param {number} linear
 * @param {number} angular
 * @return {void}
 */
Physijs.Mesh.prototype.setDamping = function(linear, angular) {};

/**
 * @param {number} threshold
 * @return {void}
 */
Physijs.Mesh.prototype.setCcdMotionThreshold = function(threshold) {};

/**
 * @param {number} radius
 * @return {void}
 */
Physijs.Mesh.prototype.setCcdSweptSphereRadius = function(radius) {};

/**
 * @param {string} event_name
 * @param {function(?): void} callback
 * @return {void}
 */
Physijs.Mesh.prototype.addEventListener = function(event_name, callback) {};

/**
 * @param {string} event_name
 * @param {function(?): void} callback
 * @return {void}
 */
Physijs.Mesh.prototype.removeEventListener = function(event_name, callback) {};

/**
 * @param {string|{type: string, target: ?}} event_name_or_event
 * @return {void}
 */
Physijs.Mesh.prototype.dispatchEvent = function(event_name_or_event) {};

/**
 * @constructor
 * @struct
 * @param {?} geometry
 * @param {?} material
 * @param {number=} mass
 */
Physijs.PlaneMesh = function(geometry, material, mass) {};

/**
 * @constructor
 * @struct
 * @param {?} geometry
 * @param {?} material
 * @param {number=} mass
 * @param {number=} xdiv
 * @param {number=} ydiv
 */
Physijs.HeightfieldMesh = function(geometry, material, mass, xdiv, ydiv) {};

/**
 * @constructor
 * @struct
 * @param {?} geometry
 * @param {?} material
 * @param {number=} mass
 */
Physijs.BoxMesh = function(geometry, material, mass) {};

/**
 * @constructor
 * @struct
 * @param {?} geometry
 * @param {?} material
 * @param {number=} mass
 */
Physijs.SphereMesh = function(geometry, material, mass) {};

/**
 * @constructor
 * @struct
 * @param {?} geometry
 * @param {?} material
 * @param {number=} mass
 */
Physijs.CylinderMesh = function(geometry, material, mass) {};

/**
 * @constructor
 * @struct
 * @param {?} geometry
 * @param {?} material
 * @param {number=} mass
 */
Physijs.CapsuleMesh = function(geometry, material, mass) {};

/**
 * @constructor
 * @struct
 * @param {?} geometry
 * @param {?} material
 * @param {number=} mass
 */
Physijs.ConeMesh = function(geometry, material, mass) {};

/**
 * @constructor
 * @struct
 * @param {?} geometry
 * @param {?} material
 * @param {number=} mass
 */
Physijs.ConcaveMesh = function(geometry, material, mass) {};

/**
 * @constructor
 * @struct
 * @param {?} geometry
 * @param {?} material
 * @param {number=} mass
 */
Physijs.ConvexMesh = function(geometry, material, mass) {};

/**
 * @constructor
 * @struct
 * @param {!Physijs.Mesh} mesh
 * @param {!Physijs.VehicleTuning=} tuning
 */
Physijs.Vehicle = function(mesh, tuning) {};
 /** @type {?} */
Physijs.Vehicle.prototype.mesh;
 /** @type {!Array<?>} */
Physijs.Vehicle.prototype.wheels;

/**
 * @param {?} wheel_geometry
 * @param {?} wheel_material
 * @param {?} connection_point
 * @param {?} wheel_direction
 * @param {?} wheel_axle
 * @param {number} suspension_rest_length
 * @param {number} wheel_radius
 * @param {boolean} is_front_wheel
 * @param {!Physijs.VehicleTuning=} tuning
 * @return {void}
 */
Physijs.Vehicle.prototype.addWheel = function(wheel_geometry, wheel_material, connection_point, wheel_direction, wheel_axle, suspension_rest_length, wheel_radius, is_front_wheel, tuning) {};

/**
 * @param {number} amount
 * @param {?=} wheel
 * @return {void}
 */
Physijs.Vehicle.prototype.setSteering = function(amount, wheel) {};

/**
 * @param {number} amount
 * @param {?=} wheel
 * @return {void}
 */
Physijs.Vehicle.prototype.setBrake = function(amount, wheel) {};

/**
 * @param {number} amount
 * @param {?=} wheel
 * @return {void}
 */
Physijs.Vehicle.prototype.applyEngineForce = function(amount, wheel) {};

/**
 * @constructor
 * @struct
 * @param {number=} suspension_stiffness
 * @param {number=} suspension_compression
 * @param {number=} suspension_damping
 * @param {number=} max_suspension_travel
 * @param {number=} friction_slip
 * @param {number=} max_suspension_force
 */
Physijs.VehicleTuning = function(suspension_stiffness, suspension_compression, suspension_damping, max_suspension_travel, friction_slip, max_suspension_force) {};
 /** @type {number} */
Physijs.VehicleTuning.prototype.suspension_stiffness;
 /** @type {number} */
Physijs.VehicleTuning.prototype.suspension_compression;
 /** @type {number} */
Physijs.VehicleTuning.prototype.suspension_damping;
 /** @type {number} */
Physijs.VehicleTuning.prototype.max_suspension_travel;
 /** @type {number} */
Physijs.VehicleTuning.prototype.friction_slip;
 /** @type {number} */
Physijs.VehicleTuning.prototype.max_suspension_force;
