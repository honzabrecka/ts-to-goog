/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/datatables.net/index.d.ts:

/**
 * @param {!DataTables.Settings=} opts
 * @return {!DataTables.Api}
 */
JQuery.prototype.DataTable = function(opts) {};
/** @const */
var DataTables = {};
/**
 * @extends {DataTables.CoreMethods}
 * @record
 * @struct
 */
DataTables.Api = function() {};
 /** @type {!DataTables.OrderMethods} */
DataTables.Api.prototype.order;
 /** @type {!DataTables.ColumnMethodsModel} */
DataTables.Api.prototype.column;
 /** @type {!DataTables.ColumnsMethodsModel} */
DataTables.Api.prototype.columns;
 /** @type {!DataTables.RowMethodsModel} */
DataTables.Api.prototype.row;
 /** @type {!DataTables.RowsMethodsModel} */
DataTables.Api.prototype.rows;

/**
 * Get the data for the whole table.
 * @return {!DataTables.Api}
 */
DataTables.Api.prototype.data = function() {};

/**
 * Select the cell found by a cell selector
 * 
 * Select the cell found by a cell selector
 * 
 * @param {(string|!Object|!Function|!Node|?<!HTMLElement>|!Array<(string|!Object|!Function|!Node|?<!HTMLElement>)>)} cellSelector_or_rowSelector Cell selector. / Row selector.
 * @param {!DataTables.ObjectSelectorModifier|(string|!Object|!Function|!Node|?<!HTMLElement>|!Array<(string|!Object|!Function|!Node|?<!HTMLElement>)>)=} modifier_or_cellSelector Cell selector.
 * @param {!DataTables.ObjectSelectorModifier=} modifier
 * @return {!DataTables.CellMethods}
 */
DataTables.Api.prototype.cell = function(cellSelector_or_rowSelector, modifier_or_cellSelector, modifier) {};

/**
 * Select all cells
 * 
 * Select cells found by a cell selector
 * 
 * Select cells found by both row and column selectors
 * 
 * @param {!DataTables.ObjectSelectorModifier|(string|!Object|!Function|!Node|?<!HTMLElement>|!Array<(string|!Object|!Function|!Node|?<!HTMLElement>)>)=} modifier_or_cellSelector_or_rowSelector Cell selector. / Row selector.
 * @param {!DataTables.ObjectSelectorModifier|(string|!Object|!Function|!Node|?<!HTMLElement>|!Array<(string|!Object|!Function|!Node|?<!HTMLElement>)>)=} modifier_or_cellSelector Cell selector.
 * @param {!DataTables.ObjectSelectorModifier=} modifier
 * @return {!DataTables.CellsMethods}
 */
DataTables.Api.prototype.cells = function(modifier_or_cellSelector_or_rowSelector, modifier_or_cellSelector, modifier) {};

/**
 * Select a table based on a selector from the API's context
 * 
 * @param {(string|!Object|!Function|!Node|?<!HTMLElement>|!Array<(string|!Object|!Function|!Node|?<!HTMLElement>)>)} tableSelector Table selector.
 * @return {!DataTables.TableMethods}
 */
DataTables.Api.prototype.table = function(tableSelector) {};

/**
 * Select all tables
 * Select tables based on the given selector
 * 
 * @param {(string|!Object|!Function|!Node|?<!HTMLElement>|!Array<(string|!Object|!Function|!Node|?<!HTMLElement>)>)=} tableSelector Table selector.
 * @return {!DataTables.TablesMethods}
 */
DataTables.Api.prototype.tables = function(tableSelector) {};
/**
 * @extends {DataTables.CoreMethods}
 * @record
 * @struct
 */
DataTables.DataTables = function() {};

/* TODO: IndexSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.ObjectSelectorModifier = function() {};
 /** @type {string} */
DataTables.ObjectSelectorModifier.prototype.order;
 /** @type {string} */
DataTables.ObjectSelectorModifier.prototype.search;
 /** @type {string} */
DataTables.ObjectSelectorModifier.prototype.searchPlaceholder;
 /** @type {string} */
DataTables.ObjectSelectorModifier.prototype.page;
/**
 * @extends {DataTables.UtilityMethods}
 * @record
 * @struct
 */
DataTables.CoreMethods = function() {};
 /** @type {!DataTables.AjaxMethodModel} */
DataTables.CoreMethods.prototype.ajax;
 /** @type {!DataTables.PageMethods} */
DataTables.CoreMethods.prototype.page;
 /** @type {!DataTables.StateMethods} */
DataTables.CoreMethods.prototype.state;

/**
 * Get jquery object
 * @param {(string|!Node|?<!HTMLElement>|!Array<!Node>)} selector
 * @param {!DataTables.ObjectSelectorModifier=} modifier
 * @return {?<!HTMLElement>}
 */
DataTables.CoreMethods.prototype.$ = function(selector, modifier) {};

/**
 * Clear the table of all data.
 * @return {!DataTables.Api}
 */
DataTables.CoreMethods.prototype.clear = function() {};

/**
 * Destroy the DataTables in the current context.
 * 
 * @param {boolean=} remove Completely remove the table from the DOM (true) or leave it in the DOM in its original plain un-enhanced HTML state (default, false).
 * @return {!DataTables.Api}
 */
DataTables.CoreMethods.prototype.destroy = function(remove) {};

/**
 * Redraw the DataTables in the current context, optionally updating ordering, searching and paging as required.
 * 
 * @param {(string|boolean)=} paging This parameter is used to determine what kind of draw DataTables will perform.
 * @return {!DataTables.Api}
 */
DataTables.CoreMethods.prototype.draw = function(paging) {};

/**
 * @param {string} token
 * @param {?} def
 * @param {number=} numeric
 * @return {string}
 */
DataTables.CoreMethods.prototype.i18n = function(token, def, numeric) {};

/**
 * @return {!DataTables.Settings}
 */
DataTables.CoreMethods.prototype.init = function() {};

/**
 * Table events removal.
 * 
 * @param {string} event Event name to remove.
 * @param {!Function=} callback Specific callback function to remove if you want to unbind a single event listener.
 * @return {!DataTables.Api}
 */
DataTables.CoreMethods.prototype.off = function(event, callback) {};

/**
 * Table events listener.
 * 
 * @param {string} event Event to listen for.
 * @param {!Function} callback Specific callback function to remove if you want to unbind a single event listener.
 * @return {!DataTables.Api}
 */
DataTables.CoreMethods.prototype.on = function(event, callback) {};

/**
 * Listen for a table event once and then remove the listener.
 * 
 * @param {string} event Event to listen for.
 * @param {!Function} callback Specific callback function to remove if you want to unbind a single event listener.
 * @return {!DataTables.Api}
 */
DataTables.CoreMethods.prototype.one = function(event, callback) {};

/**
 * Get current search
 * Search for data in the table.
 * 
 * @param {string=} input Search string to apply to the table.
 * @param {boolean=} regex Treat as a regular expression (true) or not (default, false).
 * @param {boolean=} smart Perform smart search.
 * @param {boolean=} caseInsen Do case-insensitive matching (default, true) or not (false).
 * @return {string|!DataTables.Api}
 */
DataTables.CoreMethods.prototype.search = function(input, regex, smart, caseInsen) {};

/**
 * Obtain the table's settings object
 * @return {!DataTables.Api}
 */
DataTables.CoreMethods.prototype.settings = function() {};
/**
 * @extends {DataTables.Api}
 * @record
 * @struct
 */
DataTables.AjaxMethods = function() {};

/**
 * Reload the table data from the Ajax data source.
 * 
 * @param {!Function=} callback Function which is executed when the data as been reloaded and the table fully redrawn.
 * @param {boolean=} resetPaging Reset (default action or true) or hold the current paging position (false).
 * @return {!DataTables.Api}
 */
DataTables.AjaxMethods.prototype.load = function(callback, resetPaging) {};
/**
 * @record
 * @struct
 */
DataTables.AjaxMethodModel = function() {};

/**
 * Get the latest JSON data obtained from the last Ajax request DataTables made
 * @return {!Object}
 */
DataTables.AjaxMethodModel.prototype.json = function() {};

/**
 * Get the data submitted by DataTables to the server in the last Ajax request
 * @return {!Object}
 */
DataTables.AjaxMethodModel.prototype.params = function() {};

/**
 * Reload the table data from the Ajax data source.
 * 
 * @param {!Function=} callback Function which is executed when the data as been reloaded and the table fully redrawn.
 * @param {boolean=} resetPaging Reset (default action or true) or hold the current paging position (false).
 * @return {!DataTables.Api}
 */
DataTables.AjaxMethodModel.prototype.reload = function(callback, resetPaging) {};

/**
 * Reload the table data from the Ajax data source
 * Reload the table data from the Ajax data source
 * 
 * @param {string=} url URL to set to be the Ajax data source for the table.
 * @return {string|!DataTables.AjaxMethods}
 */
DataTables.AjaxMethodModel.prototype.url = function(url) {};
/**
 * @record
 * @struct
 */
DataTables.OrderMethods = function() {};

/* TODO: CallSignature: DataTables */

/* TODO: CallSignature: DataTables */

/* TODO: CallSignature: DataTables */

/* TODO: CallSignature: DataTables */

/**
 * Add an ordering listener to an element, for a given column.
 * 
 * @param {(string|!Node|?<!HTMLElement>)} node Selector
 * @param {number} column Column index
 * @param {!Function} callback Callback function
 * @return {!DataTables.Api}
 */
DataTables.OrderMethods.prototype.listener = function(node, column, callback) {};
/**
 * @record
 * @struct
 */
DataTables.PageMethods = function() {};

/* TODO: CallSignature: DataTables */

/* TODO: CallSignature: DataTables */

/**
 * Get paging information about the table
 * @return {!DataTables.PageMethodeModelInfoReturn}
 */
DataTables.PageMethods.prototype.info = function() {};

/**
 * Get the table's page length.
 * Set the table's page length.
 * 
 * @param {number=} length Page length to set. use -1 to show all records.
 * @return {number|!DataTables.Api}
 */
DataTables.PageMethods.prototype.len = function(length) {};
/**
 * @record
 * @struct
 */
DataTables.PageMethodeModelInfoReturn = function() {};
 /** @type {number} */
DataTables.PageMethodeModelInfoReturn.prototype.page;
 /** @type {number} */
DataTables.PageMethodeModelInfoReturn.prototype.pages;
 /** @type {number} */
DataTables.PageMethodeModelInfoReturn.prototype.start;
 /** @type {number} */
DataTables.PageMethodeModelInfoReturn.prototype.end;
 /** @type {number} */
DataTables.PageMethodeModelInfoReturn.prototype.length;
 /** @type {number} */
DataTables.PageMethodeModelInfoReturn.prototype.recordsTotal;
 /** @type {number} */
DataTables.PageMethodeModelInfoReturn.prototype.recordsDisplay;
 /** @type {boolean} */
DataTables.PageMethodeModelInfoReturn.prototype.serverSide;
/**
 * @record
 * @struct
 */
DataTables.StateMethods = function() {};

/* TODO: CallSignature: DataTables */

/**
 * Clear the saved state of the table.
 * @return {!DataTables.Api}
 */
DataTables.StateMethods.prototype.clear = function() {};

/**
 * Get the table state that was loaded during initialisation.
 * @return {!DataTables.StateReturnModel}
 */
DataTables.StateMethods.prototype.loaded = function() {};

/**
 * Trigger a state save.
 * @return {!DataTables.Api}
 */
DataTables.StateMethods.prototype.save = function() {};
/**
 * @record
 * @struct
 */
DataTables.StateReturnModel = function() {};
 /** @type {number} */
DataTables.StateReturnModel.prototype.time;
 /** @type {number} */
DataTables.StateReturnModel.prototype.start;
 /** @type {number} */
DataTables.StateReturnModel.prototype.length;
 /** @type {!Array<!Array<(string|number)>>} */
DataTables.StateReturnModel.prototype.order;
 /** @type {!DataTables.SearchSettings} */
DataTables.StateReturnModel.prototype.search;
 /** @type {!Array<!DataTables.StateReturnModelColumns>} */
DataTables.StateReturnModel.prototype.columns;
/**
 * @record
 * @struct
 */
DataTables.StateReturnModelColumns = function() {};
 /** @type {!DataTables.SearchSettings} */
DataTables.StateReturnModelColumns.prototype.search;
 /** @type {boolean} */
DataTables.StateReturnModelColumns.prototype.visible;
/**
 * @record
 * @struct
 */
DataTables.UtilityMethods = function() {};
 /** @type {number} */
DataTables.UtilityMethods.prototype.length;

/**
 * @return {boolean}
 */
DataTables.UtilityMethods.prototype.any = function() {};

/**
 * Concatenate two or more API instances together
 * 
 * @param {!Object} a API instance to concatenate to the initial instance.
 * @param {...!Object} b Additional API instance(s) to concatenate to the initial instance.
 * @return {!DataTables.Api}
 */
DataTables.UtilityMethods.prototype.concat = function(a, b) {};

/**
 * Get the number of entries in an API instance's result set, regardless of multi-table grouping (e.g. any data, selected rows, etc). Since: 1.10.8
 * @return {number}
 */
DataTables.UtilityMethods.prototype.count = function() {};

/**
 * Iterate over the contents of the API result set.
 * 
 * @param {!Function} fn Callback function which is called for each item in the API instance result set. The callback is called with three parameters
 * @return {!DataTables.Api}
 */
DataTables.UtilityMethods.prototype.each = function(fn) {};

/**
 * Reduce an Api instance to a single context and result set.
 * 
 * @param {number} idx Index to select
 * @return {!DataTables.Api}
 */
DataTables.UtilityMethods.prototype.eq = function(idx) {};

/**
 * Iterate over the result set of an API instance and test each item, creating a new instance from those items which pass.
 * 
 * @param {!Function} fn Callback function which is called for each item in the API instance result set. The callback is called with three parameters.
 * @return {!DataTables.Api}
 */
DataTables.UtilityMethods.prototype.filter = function(fn) {};

/**
 * Flatten a 2D array structured API instance to a 1D array structure.
 * @return {!DataTables.Api}
 */
DataTables.UtilityMethods.prototype.flatten = function() {};

/**
 * Find the first instance of a value in the API instance's result set.
 * 
 * @param {?} value Value to find in the instance's result set.
 * @return {number}
 */
DataTables.UtilityMethods.prototype.indexOf = function(value) {};

/**
 * Join the elements in the result set into a string.
 * 
 * @param {string} separator The string that will be used to separate each element of the result set.
 * @return {string}
 */
DataTables.UtilityMethods.prototype.join = function(separator) {};

/**
 * Find the last instance of a value in the API instance's result set.
 * 
 * @param {?} value Value to find in the instance's result set.
 * @return {number}
 */
DataTables.UtilityMethods.prototype.lastIndexOf = function(value) {};

/**
 * Iterate over the result set of an API instance, creating a new API instance from the values returned by the callback.
 * 
 * @param {!Function} fn Callback function which is called for each item in the API instance result set. The callback is called with three parameters.
 * @return {!DataTables.Api}
 */
DataTables.UtilityMethods.prototype.map = function(fn) {};

/**
 * Iterate over the result set of an API instance, creating a new API instance from the values retrieved from the original elements.
 * 
 * @param {(string|number)} property Object property name to use from the element in the original result set for the new result set.
 * @return {!DataTables.Api}
 */
DataTables.UtilityMethods.prototype.pluck = function(property) {};

/**
 * Remove the last item from an API instance's result set.
 * @return {?}
 */
DataTables.UtilityMethods.prototype.pop = function() {};

/**
 * Add one or more items to the end of an API instance's result set.
 * 
 * @param {?} value_1 Item to add to the API instance's result set.
 * @param {...?} value_2
 * @return {number}
 */
DataTables.UtilityMethods.prototype.push = function(value_1, value_2) {};

/**
 * Apply a callback function against and accumulator and each element in the Api's result set (left-to-right).
 * 
 * @param {!Function} fn Callback function which is called for each item in the API instance result set. The callback is called with four parameters.
 * @param {?=} initialValue Value to use as the first argument of the first call to the fn callback.
 * @return {?}
 */
DataTables.UtilityMethods.prototype.reduce = function(fn, initialValue) {};

/**
 * Apply a callback function against and accumulator and each element in the Api's result set (right-to-left).
 * 
 * @param {!Function} fn Callback function which is called for each item in the API instance result set. The callback is called with four parameters.
 * @param {?=} initialValue Value to use as the first argument of the first call to the fn callback.
 * @return {?}
 */
DataTables.UtilityMethods.prototype.reduceRight = function(fn, initialValue) {};

/**
 * Reverse the result set of the API instance and return the original array.
 * @return {!DataTables.Api}
 */
DataTables.UtilityMethods.prototype.reverse = function() {};

/**
 * Remove the first item from an API instance's result set.
 * @return {?}
 */
DataTables.UtilityMethods.prototype.shift = function() {};

/**
 * Sort the elements of the API instance's result set.
 * 
 * @param {!Function=} fn This is a standard Javascript sort comparison function. It accepts two parameters.
 * @return {!DataTables.Api}
 */
DataTables.UtilityMethods.prototype.sort = function(fn) {};

/**
 * Modify the contents of an Api instance's result set, adding or removing items from it as required.
 * 
 * @param {number} index Index at which to start modifying the Api instance's result set.
 * @param {number} howMany Number of elements to remove from the result set.
 * @param {?=} value_1 Item to add to the result set at the index specified by the first parameter.
 * @param {...?} value_2
 * @return {!Array<?>}
 */
DataTables.UtilityMethods.prototype.splice = function(index, howMany, value_1, value_2) {};

/**
 * Convert the API instance to a jQuery object, with the objects from the instance's result set in the jQuery result set.
 * @return {?<!HTMLElement>}
 */
DataTables.UtilityMethods.prototype.to$ = function() {};

/**
 * Create a native Javascript array object from an API instance.
 * @return {!Array<?>}
 */
DataTables.UtilityMethods.prototype.toArray = function() {};

/**
 * Convert the API instance to a jQuery object, with the objects from the instance's result set in the jQuery result set.
 * @return {?<!HTMLElement>}
 */
DataTables.UtilityMethods.prototype.toJQuery = function() {};

/**
 * Create a new API instance containing only the unique items from a the elements in an instance's result set.
 * @return {!DataTables.Api}
 */
DataTables.UtilityMethods.prototype.unique = function() {};

/**
 * Add one or more items to the start of an API instance's result set.
 * 
 * @param {?} value_1 Item to add to the API instance's result set.
 * @param {...?} value_2
 * @return {number}
 */
DataTables.UtilityMethods.prototype.unshift = function(value_1, value_2) {};
/**
 * @record
 * @struct
 */
DataTables.CommonSubMethods = function() {};

/**
 * Get the DataTables cached data for the selected cell
 * 
 * @param {string} t Specify which cache the data should be read from. Can take one of two values: search or order
 * @return {!DataTables.Api}
 */
DataTables.CommonSubMethods.prototype.cache = function(t) {};
/**
 * @extends {DataTables.CommonSubMethods}
 * @record
 * @struct
 */
DataTables.CommonCellMethods = function() {};

/**
 * Invalidate the data held in DataTables for the selected cells
 * 
 * @param {string=} source Data source to read the new data from.
 * @return {!DataTables.Api}
 */
DataTables.CommonCellMethods.prototype.invalidate = function(source) {};

/**
 * Get data for the selected cell
 * 
 * @param {string} t
 * @return {?}
 */
DataTables.CommonCellMethods.prototype.render = function(t) {};
/**
 * @extends {DataTables.CoreMethods}
 * @extends {DataTables.CommonCellMethods}
 * @record
 * @struct
 */
DataTables.CellMethods = function() {};

/**
 * Get data for the selected cell
 * Get data for the selected cell
 * 
 * @param {?=} data Value to assign to the data for the cell
 * @return {?|!DataTables.Api}
 */
DataTables.CellMethods.prototype.data = function(data) {};

/**
 * Get index information about the selected cell
 * @return {!DataTables.CellIndexReturn}
 */
DataTables.CellMethods.prototype.index = function() {};

/**
 * Get the DOM element for the selected cell
 * @return {!Node}
 */
DataTables.CellMethods.prototype.node = function() {};
/**
 * @record
 * @struct
 */
DataTables.CellIndexReturn = function() {};
 /** @type {number} */
DataTables.CellIndexReturn.prototype.row;
 /** @type {number} */
DataTables.CellIndexReturn.prototype.column;
 /** @type {number} */
DataTables.CellIndexReturn.prototype.columnVisible;
/**
 * @extends {DataTables.CoreMethods}
 * @extends {DataTables.CommonCellMethods}
 * @record
 * @struct
 */
DataTables.CellsMethods = function() {};

/**
 * Get data for the selected cells
 * @return {!DataTables.Api}
 */
DataTables.CellsMethods.prototype.data = function() {};

/**
 * Iterate over each selected cell, with the function context set to be the cell in question. Since: DataTables 1.10.6
 * 
 * @param {function(number, number, number, number): void} fn Function to execute for every cell selected.
 * @return {!DataTables.Api}
 */
DataTables.CellsMethods.prototype.every = function(fn) {};

/**
 * Get index information about the selected cells
 * @return {!DataTables.Api}
 */
DataTables.CellsMethods.prototype.indexes = function() {};

/**
 * Get the DOM elements for the selected cells
 * @return {!DataTables.Api}
 */
DataTables.CellsMethods.prototype.nodes = function() {};
/**
 * @extends {DataTables.CommonSubMethods}
 * @record
 * @struct
 */
DataTables.CommonColumnMethod = function() {};

/**
 * Get the footer th / td cell for the selected column.
 * @return {?}
 */
DataTables.CommonColumnMethod.prototype.footer = function() {};

/**
 * Get the header th / td cell for a column.
 * @return {!Node}
 */
DataTables.CommonColumnMethod.prototype.header = function() {};

/**
 * Order the table, in the direction specified, by the column selected by the column()DT selector.
 * 
 * @param {string} direction Direction of sort to apply to the selected column - desc (descending) or asc (ascending).
 * @return {!DataTables.Api}
 */
DataTables.CommonColumnMethod.prototype.order = function(direction) {};

/**
 * Get the visibility of the selected column.
 * Set the visibility of the selected column.
 * 
 * @param {boolean=} show Specify if the column should be visible (true) or not (false).
 * @param {boolean=} redrawCalculations Indicate if DataTables should recalculate the column layout (true - default) or not (false). Typically this would be left as the default value, but it can be useful to disable when using the method in a loop - so the calculations are performed on every call as they can hamper performance.
 * @return {boolean|!DataTables.Api}
 */
DataTables.CommonColumnMethod.prototype.visible = function(show, redrawCalculations) {};
/**
 * @record
 * @struct
 */
DataTables.ColumnMethodsModel = function() {};

/* TODO: CallSignature: DataTables */

/**
 * Convert from the input column index type to that required.
 * 
 * @param {string} t The type on conversion that should take place: 'fromVisible', 'toData', 'fromData', 'toVisible'
 * @param {number} index The index to be converted
 * @return {number}
 */
DataTables.ColumnMethodsModel.prototype.index = function(t, index) {};
/**
 * @extends {DataTables.CoreMethods}
 * @extends {DataTables.CommonColumnMethod}
 * @record
 * @struct
 */
DataTables.ColumnMethods = function() {};

/**
 * Get the data for the cells in the selected column.
 * @return {!DataTables.Api}
 */
DataTables.ColumnMethods.prototype.data = function() {};

/**
 * Get the data source property for the selected column
 * @return {(string|number|!Function)}
 */
DataTables.ColumnMethods.prototype.dataSrc = function() {};

/**
 * Get index information about the selected cell
 * 
 * @param {string=} t Specify if you want to get the column data index (default) or the visible index (visible).
 * @return {!DataTables.Api}
 */
DataTables.ColumnMethods.prototype.index = function(t) {};

/**
 * Obtain the th / td nodes for the selected column
 * @return {!Array<!DataTables.Api>}
 */
DataTables.ColumnMethods.prototype.nodes = function() {};
/**
 * @record
 * @struct
 */
DataTables.ColumnsMethodsModel = function() {};

/* TODO: CallSignature: DataTables */

/* TODO: CallSignature: DataTables */

/**
 * Recalculate the column widths for layout.
 * @return {!DataTables.Api}
 */
DataTables.ColumnsMethodsModel.prototype.adjust = function() {};
/**
 * @extends {DataTables.CoreMethods}
 * @extends {DataTables.CommonColumnMethod}
 * @record
 * @struct
 */
DataTables.ColumnsMethods = function() {};

/**
 * Obtain the data for the columns from the selector
 * @return {!DataTables.Api}
 */
DataTables.ColumnsMethods.prototype.data = function() {};

/**
 * Get the data source property for the selected columns.
 * @return {!DataTables.Api}
 */
DataTables.ColumnsMethods.prototype.dataSrc = function() {};

/**
 * Iterate over each selected column, with the function context set to be the column in question. Since: DataTables 1.10.6
 * 
 * @param {function(number, number, number): void} fn Function to execute for every column selected.
 * @return {!DataTables.Api}
 */
DataTables.ColumnsMethods.prototype.every = function(fn) {};

/**
 * Get the column indexes of the selected columns.
 * 
 * @param {string=} t Specify if you want to get the column data index (default) or the visible index (visible).
 * @return {!DataTables.Api}
 */
DataTables.ColumnsMethods.prototype.indexes = function(t) {};

/**
 * Obtain the th / td nodes for the selected columns
 * @return {!Array<!Array<!DataTables.Api>>}
 */
DataTables.ColumnsMethods.prototype.nodes = function() {};
/**
 * @extends {DataTables.CommonSubMethods}
 * @record
 * @struct
 */
DataTables.CommonRowMethod = function() {};

/**
 * Obtain the th / td nodes for the selected column
 * 
 * @param {string=} source Data source to read the new data from. Values: 'auto', 'data', 'dom'
 * @return {!DataTables.Api}
 */
DataTables.CommonRowMethod.prototype.invalidate = function(source) {};
/**
 * @record
 * @struct
 */
DataTables.RowChildMethodModel = function() {};

/* TODO: CallSignature: DataTables */

/* TODO: CallSignature: DataTables */

/* TODO: CallSignature: DataTables */

/**
 * Hide the child row(s) of a parent row
 * @return {!DataTables.Api}
 */
DataTables.RowChildMethodModel.prototype.hide = function() {};

/**
 * Check if the child rows of a parent row are visible
 * @return {!DataTables.Api}
 */
DataTables.RowChildMethodModel.prototype.isShown = function() {};

/**
 * Remove child row(s) from display and release any allocated memory
 * @return {!DataTables.Api}
 */
DataTables.RowChildMethodModel.prototype.remove = function() {};

/**
 * Show the child row(s) of a parent row
 * @return {!DataTables.Api}
 */
DataTables.RowChildMethodModel.prototype.show = function() {};
/**
 * @extends {DataTables.CoreMethods}
 * @record
 * @struct
 */
DataTables.RowChildMethods = function() {};

/**
 * Hide the child row(s) of a parent row
 * @return {!DataTables.Api}
 */
DataTables.RowChildMethods.prototype.hide = function() {};

/**
 * Remove child row(s) from display and release any allocated memory
 * @return {!DataTables.Api}
 */
DataTables.RowChildMethods.prototype.remove = function() {};

/**
 * Make newly defined child rows visible
 * @return {!DataTables.Api}
 */
DataTables.RowChildMethods.prototype.show = function() {};
/**
 * @record
 * @struct
 */
DataTables.RowMethodsModel = function() {};

/* TODO: CallSignature: DataTables */

/**
 * Add a new row to the table using the given data
 * 
 * @param {(!Object|!Array<?>)} data Data to use for the new row. This may be an array, object or Javascript object instance, but must be in the same format as the other data in the table
 * @return {!DataTables.Api}
 */
DataTables.RowMethodsModel.prototype.add = function(data) {};
/**
 * @extends {DataTables.CoreMethods}
 * @extends {DataTables.CommonRowMethod}
 * @record
 * @struct
 */
DataTables.RowMethods = function() {};
 /** @type {!DataTables.RowChildMethodModel} */
DataTables.RowMethods.prototype.child;

/**
 * Get the data for the selected row
 * Set the data for the selected row
 * 
 * @param {(!Object|!Array<?>)=} d Data to use for the row.
 * @return {(!Object|!Array<?>)|!DataTables.Api}
 */
DataTables.RowMethods.prototype.data = function(d) {};

/**
 * Get the id of the selected row. Since: 1.10.8
 * 
 * @param {boolean=} hash true - Append a hash (#) to the start of the row id. This can be useful for then using the id as a selector
 * false - Do not modify the id value.
 * @return {string} Row id. If the row does not have an id available 'undefined' will be returned.
 */
DataTables.RowMethods.prototype.id = function(hash) {};

/**
 * Get the row index of the row column.
 * @return {number}
 */
DataTables.RowMethods.prototype.index = function() {};

/**
 * Obtain the tr node for the selected row
 * @return {!Node}
 */
DataTables.RowMethods.prototype.node = function() {};

/**
 * Delete the selected row from the DataTable.
 * @return {!Node}
 */
DataTables.RowMethods.prototype.remove = function() {};
/**
 * @record
 * @struct
 */
DataTables.RowsMethodsModel = function() {};

/* TODO: CallSignature: DataTables */

/* TODO: CallSignature: DataTables */

/**
 * Add new rows to the table using the data given
 * 
 * @param {!Array<?>} data Array of data elements, with each one describing a new row to be added to the table
 * @return {!DataTables.Api}
 */
DataTables.RowsMethodsModel.prototype.add = function(data) {};
/**
 * @extends {DataTables.CoreMethods}
 * @extends {DataTables.CommonRowMethod}
 * @record
 * @struct
 */
DataTables.RowsMethods = function() {};

/**
 * Get the data for the rows from the selector
 * Set the data for the selected row
 * 
 * @param {(!Object|!Array<?>)=} d Data to use for the row.
 * @return {!DataTables.Api}
 */
DataTables.RowsMethods.prototype.data = function(d) {};

/**
 * Iterate over each selected row, with the function context set to be the row in question. Since: DataTables 1.10.6
 * 
 * @param {function(number, number, number): void} fn Function to execute for every row selected.
 * @return {!DataTables.Api}
 */
DataTables.RowsMethods.prototype.every = function(fn) {};

/**
 * Get the ids of the selected rows. Since: 1.10.8
 * 
 * @param {boolean=} hash true - Append a hash (#) to the start of each row id. This can be useful for then using the ids as selectors
 * false - Do not modify the id value.
 * @return {!DataTables.Api} Api instance with the selected rows in its result set. If a row does not have an id available 'undefined' will be returned as the value.
 */
DataTables.RowsMethods.prototype.ids = function(hash) {};

/**
 * Get the row indexes of the selected rows.
 * @return {!DataTables.Api}
 */
DataTables.RowsMethods.prototype.indexes = function() {};

/**
 * Obtain the tr nodes for the selected rows
 * @return {!DataTables.Api}
 */
DataTables.RowsMethods.prototype.nodes = function() {};

/**
 * Delete the selected rows from the DataTable.
 * @return {!DataTables.Api}
 */
DataTables.RowsMethods.prototype.remove = function() {};
/**
 * @extends {DataTables.CoreMethods}
 * @record
 * @struct
 */
DataTables.TableMethods = function() {};

/**
 * Get the tfoot node for the table in the API's context
 * @return {!Node}
 */
DataTables.TableMethods.prototype.footer = function() {};

/**
 * Get the thead node for the table in the API's context
 * @return {!Node}
 */
DataTables.TableMethods.prototype.header = function() {};

/**
 * Get the tbody node for the table in the API's context
 * @return {!Node}
 */
DataTables.TableMethods.prototype.body = function() {};

/**
 * Get the div container node for the table in the API's context
 * @return {!Node}
 */
DataTables.TableMethods.prototype.container = function() {};

/**
 * Get the table node for the table in the API's context
 * @return {!Node}
 */
DataTables.TableMethods.prototype.node = function() {};
/**
 * @extends {DataTables.CoreMethods}
 * @record
 * @struct
 */
DataTables.TablesMethods = function() {};

/**
 * Get the tfoot nodes for the tables in the API's context
 * @return {!DataTables.Api}
 */
DataTables.TablesMethods.prototype.footer = function() {};

/**
 * Get the thead nodes for the tables in the API's context
 * @return {!DataTables.Api}
 */
DataTables.TablesMethods.prototype.header = function() {};

/**
 * Get the tbody nodes for the tables in the API's context
 * @return {!DataTables.Api}
 */
DataTables.TablesMethods.prototype.body = function() {};

/**
 * Get the div container nodes for the tables in the API's context
 * @return {!DataTables.Api}
 */
DataTables.TablesMethods.prototype.containers = function() {};

/**
 * Get the table nodes for the tables in the API's context
 * @return {!DataTables.Api}
 */
DataTables.TablesMethods.prototype.nodes = function() {};
/**
 * @record
 * @struct
 */
DataTables.StaticFunctions = function() {};
 /** @type {!DataTables.StaticUtilFunctions} */
DataTables.StaticFunctions.prototype.util;

/**
 * Check is a table node is a DataTable or not
 * 
 * @param {string} table Selector string for table
 * @return {boolean}
 */
DataTables.StaticFunctions.prototype.isDataTable = function(table) {};

/**
 * Get all DataTable tables that have been initialised - optionally you can select to get only currently visible tables and / or retrieve the tables as API instances.
 * 
 * @param {(boolean|!DataTables.ObjectTablesStatic)=} visible As a boolean value this options is used to indicate if you want all tables on the page should be returned (false), or visible tables only (true).
 * Since 1.10.8 this option can also be given as an object.
 * @return {(!DataTables.Api|!Array<!DataTables.Api>)}
 */
DataTables.StaticFunctions.prototype.tables = function(visible) {};

/**
 * Version number compatibility check function
 * 
 * @param {string} version Version string
 * @return {boolean}
 */
DataTables.StaticFunctions.prototype.versionCheck = function(version) {};

/**
 * Check is a table node is a DataTable or not
 * 
 * @param {(string|!Node|?<!HTMLElement>|!Array<!Node>)} selector
 * @return {!DataTables.Api}
 */
DataTables.StaticFunctions.prototype.Api = function(selector) {};
/**
 * @record
 * @struct
 */
DataTables.StaticUtilFunctions = function() {};

/**
 * Escape special characters in a regular expression string. Since: 1.10.4
 * 
 * @param {string} str String to escape
 * @return {string}
 */
DataTables.StaticUtilFunctions.prototype.escapeRegex = function(str) {};

/**
 * Throttle the calls to a method to reduce call frequency. Since: 1.10.3
 * 
 * @param {!Function} fn Function
 * @param {number=} period ms
 * @return {!Function}
 */
DataTables.StaticUtilFunctions.prototype.throttle = function(fn, period) {};
/**
 * @record
 * @struct
 */
DataTables.ObjectTablesStatic = function() {};
 /** @type {boolean} */
DataTables.ObjectTablesStatic.prototype.visible;
 /** @type {boolean} */
DataTables.ObjectTablesStatic.prototype.api;
/**
 * @record
 * @struct
 */
DataTables.Settings = function() {};
 /** @type {boolean} */
DataTables.Settings.prototype.autoWidth;
 /** @type {boolean} */
DataTables.Settings.prototype.deferRender;
 /** @type {boolean} */
DataTables.Settings.prototype.info;
 /** @type {boolean} */
DataTables.Settings.prototype.jQueryUI;
 /** @type {boolean} */
DataTables.Settings.prototype.lengthChange;
 /** @type {boolean} */
DataTables.Settings.prototype.ordering;
 /** @type {boolean} */
DataTables.Settings.prototype.paging;
 /** @type {boolean} */
DataTables.Settings.prototype.processing;
 /** @type {boolean} */
DataTables.Settings.prototype.scrollX;
 /** @type {string} */
DataTables.Settings.prototype.scrollY;
 /** @type {boolean} */
DataTables.Settings.prototype.searching;
 /** @type {boolean} */
DataTables.Settings.prototype.serverSide;
 /** @type {boolean} */
DataTables.Settings.prototype.stateSave;
 /** @type {(string|!DataTables.AjaxSettings|!DataTables.FunctionAjax)} */
DataTables.Settings.prototype.ajax;
 /** @type {!Object} */
DataTables.Settings.prototype.data;
 /** @type {!Array<!DataTables.ColumnSettings>} */
DataTables.Settings.prototype.columns;
 /** @type {!Array<!DataTables.ColumnDefsSettings>} */
DataTables.Settings.prototype.columnDefs;
 /** @type {(number|!Array<number>)} */
DataTables.Settings.prototype.deferLoading;
 /** @type {boolean} */
DataTables.Settings.prototype.destroy;
 /** @type {number} */
DataTables.Settings.prototype.displayStart;
 /** @type {string} */
DataTables.Settings.prototype.dom;
 /** @type {(!Array<(string|number)>|!Array<!Array<(string|number)>>)} */
DataTables.Settings.prototype.lengthMenu;
 /** @type {boolean} */
DataTables.Settings.prototype.orderCellsTop;
 /** @type {boolean} */
DataTables.Settings.prototype.orderClasses;
 /** @type {(!Array<(string|number)>|!Array<!Array<(string|number)>>)} */
DataTables.Settings.prototype.order;
 /** @type {(!Object|!Array<(string|number)>|!Array<!Array<(string|number)>>)} */
DataTables.Settings.prototype.orderFixed;
 /** @type {boolean} */
DataTables.Settings.prototype.orderMulti;
 /** @type {number} */
DataTables.Settings.prototype.pageLength;
 /** @type {string} */
DataTables.Settings.prototype.pagingType;
 /** @type {boolean} */
DataTables.Settings.prototype.retrieve;
 /** @type {(string|!DataTables.RendererSettings)} */
DataTables.Settings.prototype.renderer;
 /** @type {string} */
DataTables.Settings.prototype.rowId;
 /** @type {boolean} */
DataTables.Settings.prototype.scrollCollapse;
 /** @type {!DataTables.SearchSettings} */
DataTables.Settings.prototype.search;
 /** @type {!DataTables.SearchSettings} */
DataTables.Settings.prototype.searchPlaceholder;
 /** @type {!Array<!DataTables.SearchSettings>} */
DataTables.Settings.prototype.searchCols;
 /** @type {number} */
DataTables.Settings.prototype.searchDelay;
 /** @type {number} */
DataTables.Settings.prototype.stateDuration;
 /** @type {!Array<string>} */
DataTables.Settings.prototype.stripeClasses;
 /** @type {number} */
DataTables.Settings.prototype.tabIndex;
 /** @type {!DataTables.FunctionCreateRow} */
DataTables.Settings.prototype.createdRow;
 /** @type {!DataTables.FunctionDrawCallback} */
DataTables.Settings.prototype.drawCallback;
 /** @type {!DataTables.FunctionFooterCallback} */
DataTables.Settings.prototype.footerCallback;
 /** @type {!DataTables.FunctionFormatNumber} */
DataTables.Settings.prototype.formatNumber;
 /** @type {!DataTables.FunctionHeaderCallback} */
DataTables.Settings.prototype.headerCallback;
 /** @type {!DataTables.FunctionInfoCallback} */
DataTables.Settings.prototype.infoCallback;
 /** @type {!DataTables.FunctionInitComplete} */
DataTables.Settings.prototype.initComplete;
 /** @type {!DataTables.FunctionPreDrawCallback} */
DataTables.Settings.prototype.preDrawCallback;
 /** @type {!DataTables.FunctionRowCallback} */
DataTables.Settings.prototype.rowCallback;
 /** @type {!DataTables.FunctionStateLoadCallback} */
DataTables.Settings.prototype.stateLoadCallback;
 /** @type {!DataTables.FunctionStateLoaded} */
DataTables.Settings.prototype.stateLoaded;
 /** @type {!DataTables.FunctionStateLoadParams} */
DataTables.Settings.prototype.stateLoadParams;
 /** @type {!DataTables.FunctionStateSaveCallback} */
DataTables.Settings.prototype.stateSaveCallback;
 /** @type {!DataTables.FunctionStateSaveParams} */
DataTables.Settings.prototype.stateSaveParams;
 /** @type {!DataTables.LanguageSettings} */
DataTables.Settings.prototype.language;
/**
 * @record
 * @struct
 */
DataTables.AjaxDataRequest = function() {};
 /** @type {number} */
DataTables.AjaxDataRequest.prototype.draw;
 /** @type {number} */
DataTables.AjaxDataRequest.prototype.start;
 /** @type {number} */
DataTables.AjaxDataRequest.prototype.length;
 /** @type {?} */
DataTables.AjaxDataRequest.prototype.data;
 /** @type {!Array<!DataTables.AjaxDataRequestOrder>} */
DataTables.AjaxDataRequest.prototype.order;
 /** @type {!Array<!DataTables.AjaxDataRequestColumn>} */
DataTables.AjaxDataRequest.prototype.columns;
 /** @type {!DataTables.AjaxDataRequestSearch} */
DataTables.AjaxDataRequest.prototype.search;
/**
 * @record
 * @struct
 */
DataTables.AjaxDataRequestSearch = function() {};
 /** @type {string} */
DataTables.AjaxDataRequestSearch.prototype.value;
 /** @type {boolean} */
DataTables.AjaxDataRequestSearch.prototype.regex;
/**
 * @record
 * @struct
 */
DataTables.AjaxDataRequestOrder = function() {};
 /** @type {number} */
DataTables.AjaxDataRequestOrder.prototype.column;
 /** @type {string} */
DataTables.AjaxDataRequestOrder.prototype.dir;
/**
 * @record
 * @struct
 */
DataTables.AjaxDataRequestColumn = function() {};
 /** @type {(string|number)} */
DataTables.AjaxDataRequestColumn.prototype.data;
 /** @type {string} */
DataTables.AjaxDataRequestColumn.prototype.name;
 /** @type {boolean} */
DataTables.AjaxDataRequestColumn.prototype.searchable;
 /** @type {boolean} */
DataTables.AjaxDataRequestColumn.prototype.orderable;
 /** @type {!DataTables.AjaxDataRequestSearch} */
DataTables.AjaxDataRequestColumn.prototype.search;
/**
 * @record
 * @struct
 */
DataTables.AjaxData = function() {};
 /** @type {number} */
DataTables.AjaxData.prototype.draw;
 /** @type {number} */
DataTables.AjaxData.prototype.recordsTotal;
 /** @type {number} */
DataTables.AjaxData.prototype.recordsFiltered;
 /** @type {?} */
DataTables.AjaxData.prototype.data;
 /** @type {string} */
DataTables.AjaxData.prototype.error;
/**
 * @extends {JQueryAjaxSettings}
 * @record
 * @struct
 */
DataTables.AjaxSettings = function() {};
 /** @type {(!Object|!DataTables.FunctionAjaxData)} */
DataTables.AjaxSettings.prototype.data;
 /** @type {(string|!Function)} */
DataTables.AjaxSettings.prototype.dataSrc;
/**
 * @record
 * @struct
 */
DataTables.FunctionAjax = function() {};

/* TODO: CallSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.FunctionAjaxData = function() {};

/* TODO: CallSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.ColumnSettings = function() {};
 /** @type {string} */
DataTables.ColumnSettings.prototype.cellType;
 /** @type {string} */
DataTables.ColumnSettings.prototype.className;
 /** @type {string} */
DataTables.ColumnSettings.prototype.contentPadding;
 /** @type {!DataTables.FunctionColumnCreatedCell} */
DataTables.ColumnSettings.prototype.createdCell;
 /** @type {(string|number|!DataTables.ObjectColumnData|!DataTables.FunctionColumnData)} */
DataTables.ColumnSettings.prototype.data;
 /** @type {string} */
DataTables.ColumnSettings.prototype.defaultContent;
 /** @type {string} */
DataTables.ColumnSettings.prototype.name;
 /** @type {boolean} */
DataTables.ColumnSettings.prototype.orderable;
 /** @type {(number|!Array<number>)} */
DataTables.ColumnSettings.prototype.orderData;
 /** @type {string} */
DataTables.ColumnSettings.prototype.orderDataType;
 /** @type {!Array<string>} */
DataTables.ColumnSettings.prototype.orderSequence;
 /** @type {(string|number|!DataTables.ObjectColumnRender|!DataTables.FunctionColumnRender)} */
DataTables.ColumnSettings.prototype.render;
 /** @type {boolean} */
DataTables.ColumnSettings.prototype.searchable;
 /** @type {string} */
DataTables.ColumnSettings.prototype.title;
 /** @type {string} */
DataTables.ColumnSettings.prototype.type;
 /** @type {boolean} */
DataTables.ColumnSettings.prototype.visible;
 /** @type {string} */
DataTables.ColumnSettings.prototype.width;
/**
 * @extends {DataTables.ColumnSettings}
 * @record
 * @struct
 */
DataTables.ColumnDefsSettings = function() {};
 /** @type {(string|number|!Array<(string|number)>)} */
DataTables.ColumnDefsSettings.prototype.targets;
/**
 * @record
 * @struct
 */
DataTables.FunctionColumnCreatedCell = function() {};

/* TODO: CallSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.FunctionColumnData = function() {};

/* TODO: CallSignature: DataTables */

/* TODO: CallSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.ObjectColumnData = function() {};
 /** @type {string} */
DataTables.ObjectColumnData.prototype._;
 /** @type {string} */
DataTables.ObjectColumnData.prototype.filter;
 /** @type {string} */
DataTables.ObjectColumnData.prototype.display;
 /** @type {string} */
DataTables.ObjectColumnData.prototype.type;
 /** @type {string} */
DataTables.ObjectColumnData.prototype.sort;
/**
 * @extends {DataTables.ObjectColumnData}
 * @record
 * @struct
 */
DataTables.ObjectColumnRender = function() {};
/**
 * @record
 * @struct
 */
DataTables.FunctionColumnRender = function() {};

/* TODO: CallSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.CellMetaSettings = function() {};
 /** @type {number} */
DataTables.CellMetaSettings.prototype.row;
 /** @type {number} */
DataTables.CellMetaSettings.prototype.col;
 /** @type {!DataTables.Settings} */
DataTables.CellMetaSettings.prototype.settings;
/**
 * @record
 * @struct
 */
DataTables.RendererSettings = function() {};
 /** @type {string} */
DataTables.RendererSettings.prototype.header;
 /** @type {string} */
DataTables.RendererSettings.prototype.pageButton;
/**
 * @record
 * @struct
 */
DataTables.SearchSettings = function() {};
 /** @type {boolean} */
DataTables.SearchSettings.prototype.caseInsensitive;
 /** @type {boolean} */
DataTables.SearchSettings.prototype.regex;
 /** @type {boolean} */
DataTables.SearchSettings.prototype.smart;
 /** @type {string} */
DataTables.SearchSettings.prototype.search;
 /** @type {string} */
DataTables.SearchSettings.prototype.searchPlaceholder;
/**
 * @record
 * @struct
 */
DataTables.FunctionCreateRow = function() {};

/* TODO: CallSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.FunctionDrawCallback = function() {};

/* TODO: CallSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.FunctionFooterCallback = function() {};

/* TODO: CallSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.FunctionFormatNumber = function() {};

/* TODO: CallSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.FunctionHeaderCallback = function() {};

/* TODO: CallSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.FunctionInfoCallback = function() {};

/* TODO: CallSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.FunctionInitComplete = function() {};

/* TODO: CallSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.FunctionPreDrawCallback = function() {};

/* TODO: CallSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.FunctionRowCallback = function() {};

/* TODO: CallSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.FunctionStateLoadCallback = function() {};

/* TODO: CallSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.FunctionStateLoaded = function() {};

/* TODO: CallSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.FunctionStateLoadParams = function() {};

/* TODO: CallSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.FunctionStateSaveCallback = function() {};

/* TODO: CallSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.FunctionStateSaveParams = function() {};

/* TODO: CallSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.LanguageSettings = function() {};
 /** @type {string} */
DataTables.LanguageSettings.prototype.emptyTable;
 /** @type {string} */
DataTables.LanguageSettings.prototype.info;
 /** @type {string} */
DataTables.LanguageSettings.prototype.infoEmpty;
 /** @type {string} */
DataTables.LanguageSettings.prototype.infoFiltered;
 /** @type {string} */
DataTables.LanguageSettings.prototype.infoPostFix;
 /** @type {string} */
DataTables.LanguageSettings.prototype.thousands;
 /** @type {string} */
DataTables.LanguageSettings.prototype.lengthMenu;
 /** @type {string} */
DataTables.LanguageSettings.prototype.loadingRecords;
 /** @type {string} */
DataTables.LanguageSettings.prototype.processing;
 /** @type {string} */
DataTables.LanguageSettings.prototype.search;
 /** @type {string} */
DataTables.LanguageSettings.prototype.searchPlaceholder;
 /** @type {string} */
DataTables.LanguageSettings.prototype.zeroRecords;
 /** @type {!DataTables.LanguagePaginateSettings} */
DataTables.LanguageSettings.prototype.paginate;
 /** @type {!DataTables.LanguageAriaSettings} */
DataTables.LanguageSettings.prototype.aria;
 /** @type {string} */
DataTables.LanguageSettings.prototype.url;
/**
 * @record
 * @struct
 */
DataTables.LanguagePaginateSettings = function() {};
 /** @type {string} */
DataTables.LanguagePaginateSettings.prototype.first;
 /** @type {string} */
DataTables.LanguagePaginateSettings.prototype.last;
 /** @type {string} */
DataTables.LanguagePaginateSettings.prototype.next;
 /** @type {string} */
DataTables.LanguagePaginateSettings.prototype.previous;
/**
 * @record
 * @struct
 */
DataTables.LanguageAriaSettings = function() {};
 /** @type {string} */
DataTables.LanguageAriaSettings.prototype.sortAscending;
 /** @type {string} */
DataTables.LanguageAriaSettings.prototype.sortDescending;
/**
 * @record
 * @struct
 */
DataTables.ArrayStringNode = function() {};

/* TODO: IndexSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.SettingsLegacy = function() {};
 /** @type {?} */
DataTables.SettingsLegacy.prototype.ajax;
 /** @type {?} */
DataTables.SettingsLegacy.prototype.oApi;
 /** @type {!DataTables.FeaturesLegacy} */
DataTables.SettingsLegacy.prototype.oFeatures;
 /** @type {!DataTables.ScrollingLegacy} */
DataTables.SettingsLegacy.prototype.oScroll;
 /** @type {!DataTables.LanguageLegacy} */
DataTables.SettingsLegacy.prototype.oLanguage;
 /** @type {!DataTables.BrowserLegacy} */
DataTables.SettingsLegacy.prototype.oBrowser;
 /** @type {!Array<!Array<!DataTables.ArrayStringNode>>} */
DataTables.SettingsLegacy.prototype.aanFeatures;
 /** @type {!Array<!DataTables.RowLegacy>} */
DataTables.SettingsLegacy.prototype.aoData;
 /** @type {?} */
DataTables.SettingsLegacy.prototype.aIds;
 /** @type {!Array<number>} */
DataTables.SettingsLegacy.prototype.aiDisplay;
 /** @type {!Array<number>} */
DataTables.SettingsLegacy.prototype.aiDisplayMaster;
 /** @type {!Array<!DataTables.ColumnLegacy>} */
DataTables.SettingsLegacy.prototype.aoColumns;
 /** @type {!Array<?>} */
DataTables.SettingsLegacy.prototype.aoHeader;
 /** @type {!Array<?>} */
DataTables.SettingsLegacy.prototype.aoFooter;
 /** @type {!Array<string>} */
DataTables.SettingsLegacy.prototype.asDataSearch;
 /** @type {?} */
DataTables.SettingsLegacy.prototype.oPreviousSearch;
 /** @type {!Array<?>} */
DataTables.SettingsLegacy.prototype.aoPreSearchCols;
 /** @type {!Array<!Array<?>>} */
DataTables.SettingsLegacy.prototype.aaSorting;
 /** @type {!Array<!Array<?>>} */
DataTables.SettingsLegacy.prototype.aaSortingFixed;
 /** @type {!Array<string>} */
DataTables.SettingsLegacy.prototype.asStripeClasses;
 /** @type {!Array<string>} */
DataTables.SettingsLegacy.prototype.asDestroyStripes;
 /** @type {number} */
DataTables.SettingsLegacy.prototype.sDestroyWidth;
 /** @type {!Array<!DataTables.FunctionRowCallback>} */
DataTables.SettingsLegacy.prototype.aoRowCallback;
 /** @type {!Array<!DataTables.FunctionHeaderCallback>} */
DataTables.SettingsLegacy.prototype.aoHeaderCallback;
 /** @type {!Array<!DataTables.FunctionFooterCallback>} */
DataTables.SettingsLegacy.prototype.aoFooterCallback;
 /** @type {!Array<!DataTables.FunctionDrawCallback>} */
DataTables.SettingsLegacy.prototype.aoDrawCallback;
 /** @type {!Array<!DataTables.FunctionCreateRow>} */
DataTables.SettingsLegacy.prototype.aoRowCreatedCallback;
 /** @type {!Array<!DataTables.FunctionPreDrawCallback>} */
DataTables.SettingsLegacy.prototype.aoPreDrawCallback;
 /** @type {!Array<!DataTables.FunctionInitComplete>} */
DataTables.SettingsLegacy.prototype.aoInitComplete;
 /** @type {!Array<!DataTables.FunctionStateSaveParams>} */
DataTables.SettingsLegacy.prototype.aoStateSaveParams;
 /** @type {!Array<!DataTables.FunctionStateLoadParams>} */
DataTables.SettingsLegacy.prototype.aoStateLoadParams;
 /** @type {!Array<!DataTables.FunctionStateLoaded>} */
DataTables.SettingsLegacy.prototype.aoStateLoaded;
 /** @type {string} */
DataTables.SettingsLegacy.prototype.sTableId;
 /** @type {!Node} */
DataTables.SettingsLegacy.prototype.nTable;
 /** @type {!Node} */
DataTables.SettingsLegacy.prototype.nTHead;
 /** @type {!Node} */
DataTables.SettingsLegacy.prototype.nTFoot;
 /** @type {!Node} */
DataTables.SettingsLegacy.prototype.nTBody;
 /** @type {!Node} */
DataTables.SettingsLegacy.prototype.nTableWrapper;
 /** @type {boolean} */
DataTables.SettingsLegacy.prototype.bDeferLoading;
 /** @type {boolean} */
DataTables.SettingsLegacy.prototype.bInitialized;
 /** @type {!Array<?>} */
DataTables.SettingsLegacy.prototype.aoOpenRows;
 /** @type {string} */
DataTables.SettingsLegacy.prototype.sDom;
 /** @type {string} */
DataTables.SettingsLegacy.prototype.sPaginationType;
 /** @type {number} */
DataTables.SettingsLegacy.prototype.iCookieDuration;
 /** @type {string} */
DataTables.SettingsLegacy.prototype.sCookiePrefix;
 /** @type {!DataTables.CookieCallbackLegacy} */
DataTables.SettingsLegacy.prototype.fnCookieCallback;
 /** @type {!Array<!DataTables.FunctionStateSaveCallback>} */
DataTables.SettingsLegacy.prototype.aoStateSave;
 /** @type {!Array<!DataTables.FunctionStateLoadCallback>} */
DataTables.SettingsLegacy.prototype.aoStateLoad;
 /** @type {?} */
DataTables.SettingsLegacy.prototype.oLoadedState;
 /** @type {string} */
DataTables.SettingsLegacy.prototype.sAjaxSource;
 /** @type {string} */
DataTables.SettingsLegacy.prototype.sAjaxDataProp;
 /** @type {boolean} */
DataTables.SettingsLegacy.prototype.bAjaxDataGet;
 /** @type {?} */
DataTables.SettingsLegacy.prototype.jqXHR;
 /** @type {?} */
DataTables.SettingsLegacy.prototype.fnServerData;
 /** @type {!Array<?>} */
DataTables.SettingsLegacy.prototype.aoServerParams;
 /** @type {string} */
DataTables.SettingsLegacy.prototype.sServerMethod;
 /** @type {!DataTables.FunctionFormatNumber} */
DataTables.SettingsLegacy.prototype.fnFormatNumber;
 /** @type {!Array<?>} */
DataTables.SettingsLegacy.prototype.aLengthMenu;
 /** @type {number} */
DataTables.SettingsLegacy.prototype.iDraw;
 /** @type {boolean} */
DataTables.SettingsLegacy.prototype.bDrawing;
 /** @type {number} */
DataTables.SettingsLegacy.prototype.iDrawError;
 /** @type {number} */
DataTables.SettingsLegacy.prototype._iDisplayLength;
 /** @type {number} */
DataTables.SettingsLegacy.prototype._iDisplayStart;
 /** @type {number} */
DataTables.SettingsLegacy.prototype._iDisplayEnd;
 /** @type {number} */
DataTables.SettingsLegacy.prototype._iRecordsTotal;
 /** @type {number} */
DataTables.SettingsLegacy.prototype._iRecordsDisplay;
 /** @type {boolean} */
DataTables.SettingsLegacy.prototype.bJUI;
 /** @type {?} */
DataTables.SettingsLegacy.prototype.oClasses;
 /** @type {boolean} */
DataTables.SettingsLegacy.prototype.bFiltered;
 /** @type {boolean} */
DataTables.SettingsLegacy.prototype.bSorted;
 /** @type {boolean} */
DataTables.SettingsLegacy.prototype.bSortCellsTop;
 /** @type {?} */
DataTables.SettingsLegacy.prototype.oInit;
 /** @type {!Array<?>} */
DataTables.SettingsLegacy.prototype.aoDestroyCallback;
 /** @type {function(): number} */
DataTables.SettingsLegacy.prototype.fnRecordsTotal;
 /** @type {function(): number} */
DataTables.SettingsLegacy.prototype.fnRecordsDisplay;
 /** @type {function(): number} */
DataTables.SettingsLegacy.prototype.fnDisplayEnd;
 /** @type {?} */
DataTables.SettingsLegacy.prototype.oInstance;
 /** @type {string} */
DataTables.SettingsLegacy.prototype.sInstance;
 /** @type {number} */
DataTables.SettingsLegacy.prototype.iTabIndex;
 /** @type {!Node} */
DataTables.SettingsLegacy.prototype.nScrollHead;
 /** @type {!Node} */
DataTables.SettingsLegacy.prototype.nScrollFoot;
 /** @type {function((string|number|!Function)): !Function} */
DataTables.SettingsLegacy.prototype.rowIdFn;
/**
 * @record
 * @struct
 */
DataTables.BrowserLegacy = function() {};
 /** @type {number} */
DataTables.BrowserLegacy.prototype.barWidth;
 /** @type {boolean} */
DataTables.BrowserLegacy.prototype.bBounding;
 /** @type {boolean} */
DataTables.BrowserLegacy.prototype.bScrollbarLeft;
 /** @type {boolean} */
DataTables.BrowserLegacy.prototype.bScrollOversize;
/**
 * @record
 * @struct
 */
DataTables.FeaturesLegacy = function() {};
 /** @type {boolean} */
DataTables.FeaturesLegacy.prototype.bAutoWidth;
 /** @type {boolean} */
DataTables.FeaturesLegacy.prototype.bDeferRender;
 /** @type {boolean} */
DataTables.FeaturesLegacy.prototype.bFilter;
 /** @type {boolean} */
DataTables.FeaturesLegacy.prototype.bInfo;
 /** @type {boolean} */
DataTables.FeaturesLegacy.prototype.bLengthChange;
 /** @type {boolean} */
DataTables.FeaturesLegacy.prototype.bPaginate;
 /** @type {boolean} */
DataTables.FeaturesLegacy.prototype.bProcessing;
 /** @type {boolean} */
DataTables.FeaturesLegacy.prototype.bServerSide;
 /** @type {boolean} */
DataTables.FeaturesLegacy.prototype.bSort;
 /** @type {boolean} */
DataTables.FeaturesLegacy.prototype.bSortClasses;
 /** @type {boolean} */
DataTables.FeaturesLegacy.prototype.bStateSave;
/**
 * @record
 * @struct
 */
DataTables.ScrollingLegacy = function() {};
 /** @type {boolean} */
DataTables.ScrollingLegacy.prototype.bAutoCss;
 /** @type {boolean} */
DataTables.ScrollingLegacy.prototype.bCollapse;
 /** @type {boolean} */
DataTables.ScrollingLegacy.prototype.bInfinite;
 /** @type {number} */
DataTables.ScrollingLegacy.prototype.iBarWidth;
 /** @type {number} */
DataTables.ScrollingLegacy.prototype.iLoadGap;
 /** @type {string} */
DataTables.ScrollingLegacy.prototype.sX;
 /** @type {string} */
DataTables.ScrollingLegacy.prototype.sY;
/**
 * @record
 * @struct
 */
DataTables.RowLegacy = function() {};
 /** @type {!Node} */
DataTables.RowLegacy.prototype.nTr;
 /** @type {?} */
DataTables.RowLegacy.prototype._aData;
 /** @type {!Array<?>} */
DataTables.RowLegacy.prototype._aSortData;
 /** @type {!Array<!Node>} */
DataTables.RowLegacy.prototype._anHidden;
 /** @type {string} */
DataTables.RowLegacy.prototype._sRowStripe;
/**
 * @record
 * @struct
 */
DataTables.ColumnLegacy = function() {};
 /** @type {?} */
DataTables.ColumnLegacy.prototype.aDataSort;
 /** @type {!Array<string>} */
DataTables.ColumnLegacy.prototype.asSorting;
 /** @type {boolean} */
DataTables.ColumnLegacy.prototype.bSearchable;
 /** @type {boolean} */
DataTables.ColumnLegacy.prototype.bSortable;
 /** @type {boolean} */
DataTables.ColumnLegacy.prototype.bVisible;
 /** @type {boolean} */
DataTables.ColumnLegacy.prototype._bAutoType;
 /** @type {!DataTables.FunctionColumnCreatedCell} */
DataTables.ColumnLegacy.prototype.fnCreatedCell;
 /** @type {function(?, string): ?} */
DataTables.ColumnLegacy.prototype.fnGetData;
 /** @type {function(?, ?): void} */
DataTables.ColumnLegacy.prototype.fnSetData;
 /** @type {?} */
DataTables.ColumnLegacy.prototype.mData;
 /** @type {?} */
DataTables.ColumnLegacy.prototype.mRender;
 /** @type {!Node} */
DataTables.ColumnLegacy.prototype.nTh;
 /** @type {!Node} */
DataTables.ColumnLegacy.prototype.nIf;
 /** @type {string} */
DataTables.ColumnLegacy.prototype.sClass;
 /** @type {string} */
DataTables.ColumnLegacy.prototype.sContentPadding;
 /** @type {string} */
DataTables.ColumnLegacy.prototype.sDefaultContent;
 /** @type {string} */
DataTables.ColumnLegacy.prototype.sName;
 /** @type {string} */
DataTables.ColumnLegacy.prototype.sSortDataType;
 /** @type {string} */
DataTables.ColumnLegacy.prototype.sSortingClass;
 /** @type {string} */
DataTables.ColumnLegacy.prototype.sSortingClassJUI;
 /** @type {string} */
DataTables.ColumnLegacy.prototype.sTitle;
 /** @type {string} */
DataTables.ColumnLegacy.prototype.sType;
 /** @type {string} */
DataTables.ColumnLegacy.prototype.sWidth;
 /** @type {string} */
DataTables.ColumnLegacy.prototype.sWidthOrig;
/**
 * @record
 * @struct
 */
DataTables.CookieCallbackLegacy = function() {};

/* TODO: CallSignature: DataTables */
/**
 * @record
 * @struct
 */
DataTables.LanguageLegacy = function() {};
 /** @type {!DataTables.LanguageAriaLegacy} */
DataTables.LanguageLegacy.prototype.oAria;
 /** @type {!DataTables.LanguagePaginateLegacy} */
DataTables.LanguageLegacy.prototype.oPaginate;
 /** @type {string} */
DataTables.LanguageLegacy.prototype.sEmptyTable;
 /** @type {string} */
DataTables.LanguageLegacy.prototype.sInfo;
 /** @type {string} */
DataTables.LanguageLegacy.prototype.sInfoEmpty;
 /** @type {string} */
DataTables.LanguageLegacy.prototype.sInfoFiltered;
 /** @type {string} */
DataTables.LanguageLegacy.prototype.sInfoPostFix;
 /** @type {string} */
DataTables.LanguageLegacy.prototype.sInfoThousands;
 /** @type {string} */
DataTables.LanguageLegacy.prototype.sLengthMenu;
 /** @type {string} */
DataTables.LanguageLegacy.prototype.sLoadingRecords;
 /** @type {string} */
DataTables.LanguageLegacy.prototype.sProcessing;
 /** @type {string} */
DataTables.LanguageLegacy.prototype.sSearch;
 /** @type {string} */
DataTables.LanguageLegacy.prototype.sUrl;
 /** @type {string} */
DataTables.LanguageLegacy.prototype.sZeroRecords;
/**
 * @record
 * @struct
 */
DataTables.LanguageAriaLegacy = function() {};
 /** @type {string} */
DataTables.LanguageAriaLegacy.prototype.sSortAscending;
 /** @type {string} */
DataTables.LanguageAriaLegacy.prototype.sSortDescending;
/**
 * @record
 * @struct
 */
DataTables.LanguagePaginateLegacy = function() {};
 /** @type {string} */
DataTables.LanguagePaginateLegacy.prototype.sFirst;
 /** @type {string} */
DataTables.LanguagePaginateLegacy.prototype.sLast;
 /** @type {string} */
DataTables.LanguagePaginateLegacy.prototype.sNext;
 /** @type {string} */
DataTables.LanguagePaginateLegacy.prototype.sPrevious;
