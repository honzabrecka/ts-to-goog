/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/freedom/index.d.ts:
/** @const */
var freedom = {};
/**
 * @record
 * @struct
 */
freedom.EventDispatchFn = function() {};

/* TODO: CallSignature: freedom */
/**
 * @record
 * @struct
 */
freedom.EventHandlerFn = function() {};

/* TODO: CallSignature: freedom */
/**
 * @record
 * @struct
 */
freedom.Error = function() {};
 /** @type {string} */
freedom.Error.prototype.errcode;
 /** @type {string} */
freedom.Error.prototype.message;
/**
 * @record
 * @struct
 */
freedom.OnAndEmit = function() {};
 /** @type {!freedom.EventHandlerFn<T>} */
freedom.OnAndEmit.prototype.on;
 /** @type {!freedom.EventDispatchFn<T2>} */
freedom.OnAndEmit.prototype.emit;
/**
 * @record
 * @struct
 */
freedom.EventHandler = function() {};

/**
 * @param {string} t
 * @param {!Function} f
 * @return {void}
 */
freedom.EventHandler.prototype.on = function(t, f) {};

/**
 * @param {string} t
 * @param {!Function} f
 * @return {void}
 */
freedom.EventHandler.prototype.once = function(t, f) {};

/**
 * @param {string} t
 * @param {!Function} f
 * @return {void}
 */
freedom.EventHandler.prototype.off = function(t, f) {};
/**
 * @extends {freedom.OnAndEmit}
 * @record
 * @struct
 */
freedom.PortModule = function() {};
 /** @type {string} */
freedom.PortModule.prototype.controlChannel;
/**
 * @record
 * @struct
 */
freedom.ModuleSelfConstructor = function() {};
 /** @type {function(!Function): void} */
freedom.ModuleSelfConstructor.prototype.provideSynchronous;
 /** @type {function(!Function): void} */
freedom.ModuleSelfConstructor.prototype.provideAsynchronous;
 /** @type {function(!Function): void} */
freedom.ModuleSelfConstructor.prototype.providePromises;
/**
 * @extends {freedom.ModuleSelfConstructor}
 * @extends {freedom.OnAndEmit}
 * @record
 * @struct
 */
freedom.ParentModuleThing = function() {};
/**
 * @record
 * @struct
 */
freedom.Logger = function() {};

/**
 * @param {...?} args
 * @return {void}
 */
freedom.Logger.prototype.debug = function(args) {};

/**
 * @param {...?} args
 * @return {void}
 */
freedom.Logger.prototype.info = function(args) {};

/**
 * @param {...?} args
 * @return {void}
 */
freedom.Logger.prototype.log = function(args) {};

/**
 * @param {...?} args
 * @return {void}
 */
freedom.Logger.prototype.warn = function(args) {};

/**
 * @param {...?} args
 * @return {void}
 */
freedom.Logger.prototype.error = function(args) {};
/**
 * @record
 * @struct
 */
freedom.Core = function() {};

/**
 * @return {!Promise<!freedom.ChannelSpecifier>}
 */
freedom.Core.prototype.createChannel = function() {};

/**
 * @param {string} channelIdentifier
 * @return {!Promise<!freedom.Channel>}
 */
freedom.Core.prototype.bindChannel = function(channelIdentifier) {};

/**
 * @return {!Promise<!Array<string>>}
 */
freedom.Core.prototype.getId = function() {};

/**
 * @param {string} tag
 * @return {!Promise<!freedom.Logger>}
 */
freedom.Core.prototype.getLogger = function(tag) {};
/**
 * @extends {freedom.OnAndEmit}
 * @record
 * @struct
 */
freedom.Channel = function() {};

/**
 * @return {void}
 */
freedom.Channel.prototype.close = function() {};
/**
 * @record
 * @struct
 */
freedom.ChannelSpecifier = function() {};
 /** @type {!freedom.Channel} */
freedom.ChannelSpecifier.prototype.channel;
 /** @type {string} */
freedom.ChannelSpecifier.prototype.identifier;
/**
 * @record
 * @struct
 */
freedom.CoreProviderParentApp = function() {};
 /** @type {string} */
freedom.CoreProviderParentApp.prototype.manifestId;
 /** @type {{views: !Object<string,!Object>}} */
freedom.CoreProviderParentApp.prototype.config;
 /** @type {{removeEventListener: function(string, !Function, boolean): void}} */
freedom.CoreProviderParentApp.prototype.global;
/**
 * @record
 * @struct
 */
freedom.FreedomModuleFactoryManager = function() {};

/* TODO: CallSignature: freedom */
 /** @type {function(T): !Promise<void>} */
freedom.FreedomModuleFactoryManager.prototype.close;
 /** @type {string} */
freedom.FreedomModuleFactoryManager.prototype.api;
/**
 * @record
 * @struct
 */
freedom.FreedomInCoreEnvOptions = function() {};
 /** @type {string} */
freedom.FreedomInCoreEnvOptions.prototype.debug;
 /** @type {string} */
freedom.FreedomInCoreEnvOptions.prototype.logger;
/**
 * @extends {freedom.OnAndEmit}
 * @record
 * @struct
 */
freedom.FreedomInCoreEnv = function() {};

/* TODO: CallSignature: freedom */
/**
 * @record
 * @struct
 */
freedom.FreedomInModuleEnv = function() {};

/* TODO: CallSignature: freedom */

/* TODO: PropertySignature: freedom.'core' */

/* TODO: PropertySignature: freedom.'core.console' */

/* TODO: PropertySignature: freedom.'core.rtcdatachannel' */

/* TODO: PropertySignature: freedom.'core.rtcpeerconnection' */

/* TODO: PropertySignature: freedom.'core.storage' */

/* TODO: PropertySignature: freedom.'core.tcpsocket' */

/* TODO: PropertySignature: freedom.'core.udpsocket' */

/* TODO: PropertySignature: freedom.'pgp' */

/* TODO: PropertySignature: freedom.'portControl' */

/* TODO: IndexSignature: freedom */
/**
 * @record
 * @struct
 */
freedom.Method0 = function() {};

/* TODO: CallSignature: freedom */
 /** @type {function(): void} */
freedom.Method0.prototype.reckless;
/**
 * @record
 * @struct
 */
freedom.Method1 = function() {};

/* TODO: CallSignature: freedom */
 /** @type {function(T): void} */
freedom.Method1.prototype.reckless;
/**
 * @record
 * @struct
 */
freedom.Method2 = function() {};

/* TODO: CallSignature: freedom */
 /** @type {function(T, U): void} */
freedom.Method2.prototype.reckless;
/**
 * @record
 * @struct
 */
freedom.Method3 = function() {};

/* TODO: CallSignature: freedom */
 /** @type {function(T, U, V): void} */
freedom.Method3.prototype.reckless;
/** @const */
freedom.Console = {};
/**
 * @record
 * @struct
 */
freedom.Console.Console = function() {};

/**
 * @param {string} source
 * @param {string} message
 * @return {!Promise<void>}
 */
freedom.Console.Console.prototype.log = function(source, message) {};

/**
 * @param {string} source
 * @param {string} message
 * @return {!Promise<void>}
 */
freedom.Console.Console.prototype.debug = function(source, message) {};

/**
 * @param {string} source
 * @param {string} message
 * @return {!Promise<void>}
 */
freedom.Console.Console.prototype.info = function(source, message) {};

/**
 * @param {string} source
 * @param {string} message
 * @return {!Promise<void>}
 */
freedom.Console.Console.prototype.warn = function(source, message) {};

/**
 * @param {string} source
 * @param {string} message
 * @return {!Promise<void>}
 */
freedom.Console.Console.prototype.error = function(source, message) {};
/** @const */
freedom.RTCDataChannel = {};
/**
 * @record
 * @struct
 */
freedom.RTCDataChannel.Message = function() {};
 /** @type {string} */
freedom.RTCDataChannel.Message.prototype.text;
 /** @type {!ArrayBuffer} */
freedom.RTCDataChannel.Message.prototype.buffer;
 /** @type {!Blob} */
freedom.RTCDataChannel.Message.prototype.binary;
/**
 * @record
 * @struct
 */
freedom.RTCDataChannel.RTCDataChannel = function() {};
 /** @type {!freedom.Method1<string, void>} */
freedom.RTCDataChannel.RTCDataChannel.prototype.send;
 /** @type {!freedom.Method1<!ArrayBuffer, void>} */
freedom.RTCDataChannel.RTCDataChannel.prototype.sendBuffer;

/**
 * @return {!Promise<string>}
 */
freedom.RTCDataChannel.RTCDataChannel.prototype.getLabel = function() {};

/**
 * @return {!Promise<boolean>}
 */
freedom.RTCDataChannel.RTCDataChannel.prototype.getOrdered = function() {};

/**
 * @return {!Promise<number>}
 */
freedom.RTCDataChannel.RTCDataChannel.prototype.getMaxPacketLifeTime = function() {};

/**
 * @return {!Promise<number>}
 */
freedom.RTCDataChannel.RTCDataChannel.prototype.getMaxRetransmits = function() {};

/**
 * @return {!Promise<string>}
 */
freedom.RTCDataChannel.RTCDataChannel.prototype.getProtocol = function() {};

/**
 * @return {!Promise<boolean>}
 */
freedom.RTCDataChannel.RTCDataChannel.prototype.getNegotiated = function() {};

/**
 * @return {!Promise<number>}
 */
freedom.RTCDataChannel.RTCDataChannel.prototype.getId = function() {};

/**
 * @return {!Promise<string>}
 */
freedom.RTCDataChannel.RTCDataChannel.prototype.getReadyState = function() {};

/**
 * @return {!Promise<number>}
 */
freedom.RTCDataChannel.RTCDataChannel.prototype.getBufferedAmount = function() {};

/**
 * @param {string} t
 * @param {function(): void|function(!freedom.RTCDataChannel.Message): void|!Function} f
 * @return {void}
 */
freedom.RTCDataChannel.RTCDataChannel.prototype.on = function(t, f) {};

/**
 * @return {!Promise<void>}
 */
freedom.RTCDataChannel.RTCDataChannel.prototype.close = function() {};

/**
 * @return {!Promise<string>}
 */
freedom.RTCDataChannel.RTCDataChannel.prototype.getBinaryType = function() {};

/**
 * @param {string} type
 * @return {!Promise<void>}
 */
freedom.RTCDataChannel.RTCDataChannel.prototype.setBinaryType = function(type) {};
/** @const */
freedom.RTCPeerConnection = {};
/**
 * @record
 * @struct
 */
freedom.RTCPeerConnection.RTCIceServer = function() {};
 /** @type {!Array<string>} */
freedom.RTCPeerConnection.RTCIceServer.prototype.urls;
 /** @type {string} */
freedom.RTCPeerConnection.RTCIceServer.prototype.username;
 /** @type {string} */
freedom.RTCPeerConnection.RTCIceServer.prototype.credential;
/**
 * @record
 * @struct
 */
freedom.RTCPeerConnection.RTCConfiguration = function() {};
 /** @type {!Array<!freedom.RTCPeerConnection.RTCIceServer>} */
freedom.RTCPeerConnection.RTCConfiguration.prototype.iceServers;
 /** @type {string} */
freedom.RTCPeerConnection.RTCConfiguration.prototype.iceTransports;
 /** @type {string} */
freedom.RTCPeerConnection.RTCConfiguration.prototype.peerIdentity;
/**
 * @record
 * @struct
 */
freedom.RTCPeerConnection.RTCOfferOptions = function() {};
 /** @type {number} */
freedom.RTCPeerConnection.RTCOfferOptions.prototype.offerToReceiveVideo;
 /** @type {number} */
freedom.RTCPeerConnection.RTCOfferOptions.prototype.offerToReceiveAudio;
 /** @type {boolean} */
freedom.RTCPeerConnection.RTCOfferOptions.prototype.voiceActivityDetection;
 /** @type {boolean} */
freedom.RTCPeerConnection.RTCOfferOptions.prototype.iceRestart;
/**
 * @record
 * @struct
 */
freedom.RTCPeerConnection.RTCSessionDescription = function() {};
 /** @type {string} */
freedom.RTCPeerConnection.RTCSessionDescription.prototype.type;
 /** @type {string} */
freedom.RTCPeerConnection.RTCSessionDescription.prototype.sdp;
/**
 * @record
 * @struct
 */
freedom.RTCPeerConnection.RTCIceCandidate = function() {};
 /** @type {string} */
freedom.RTCPeerConnection.RTCIceCandidate.prototype.candidate;
 /** @type {string} */
freedom.RTCPeerConnection.RTCIceCandidate.prototype.sdpMid;
 /** @type {number} */
freedom.RTCPeerConnection.RTCIceCandidate.prototype.sdpMLineIndex;
/**
 * @record
 * @struct
 */
freedom.RTCPeerConnection.OnIceCandidateEvent = function() {};
 /** @type {!freedom.RTCPeerConnection.RTCIceCandidate} */
freedom.RTCPeerConnection.OnIceCandidateEvent.prototype.candidate;
/**
 * @record
 * @struct
 */
freedom.RTCPeerConnection.RTCDataChannelInit = function() {};
 /** @type {boolean} */
freedom.RTCPeerConnection.RTCDataChannelInit.prototype.ordered;
 /** @type {number} */
freedom.RTCPeerConnection.RTCDataChannelInit.prototype.maxPacketLifeTime;
 /** @type {number} */
freedom.RTCPeerConnection.RTCDataChannelInit.prototype.maxRetransmits;
 /** @type {string} */
freedom.RTCPeerConnection.RTCDataChannelInit.prototype.protocol;
 /** @type {boolean} */
freedom.RTCPeerConnection.RTCDataChannelInit.prototype.negotiated;
 /** @type {number} */
freedom.RTCPeerConnection.RTCDataChannelInit.prototype.id;
/**
 * @record
 * @struct
 */
freedom.RTCPeerConnection.RTCPeerConnection = function() {};

/**
 * @param {!freedom.RTCPeerConnection.RTCOfferOptions=} options
 * @return {!Promise<!freedom.RTCPeerConnection.RTCSessionDescription>}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.createOffer = function(options) {};

/**
 * @return {!Promise<!freedom.RTCPeerConnection.RTCSessionDescription>}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.createAnswer = function() {};

/**
 * @param {!freedom.RTCPeerConnection.RTCSessionDescription} desc
 * @return {!Promise<void>}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.setLocalDescription = function(desc) {};

/**
 * @return {!Promise<!freedom.RTCPeerConnection.RTCSessionDescription>}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.getLocalDescription = function() {};

/**
 * @param {!freedom.RTCPeerConnection.RTCSessionDescription} desc
 * @return {!Promise<void>}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.setRemoteDescription = function(desc) {};

/**
 * @return {!Promise<!freedom.RTCPeerConnection.RTCSessionDescription>}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.getRemoteDescription = function() {};

/**
 * @return {!Promise<string>}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.getSignalingState = function() {};

/**
 * @param {!freedom.RTCPeerConnection.RTCConfiguration} configuration
 * @return {!Promise<void>}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.updateIce = function(configuration) {};

/**
 * @param {!freedom.RTCPeerConnection.RTCIceCandidate} candidate
 * @return {!Promise<void>}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.addIceCandidate = function(candidate) {};

/**
 * @return {!Promise<string>}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.getIceGatheringState = function() {};

/**
 * @return {!Promise<string>}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.getIceConnectionState = function() {};

/**
 * @return {!Promise<!freedom.RTCPeerConnection.RTCConfiguration>}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.getConfiguration = function() {};

/**
 * @return {!Promise<!Array<string>>}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.getLocalStreams = function() {};

/**
 * @return {!Promise<!Array<string>>}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.getRemoteStreams = function() {};

/**
 * @param {string} id
 * @return {!Promise<string>}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.getStreamById = function(id) {};

/**
 * @param {string} ref
 * @return {!Promise<void>}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.addStream = function(ref) {};

/**
 * @param {string} ref
 * @return {!Promise<void>}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.removeStream = function(ref) {};

/**
 * @return {!Promise<void>}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.close = function() {};

/**
 * @param {string} label
 * @param {!freedom.RTCPeerConnection.RTCDataChannelInit} init
 * @return {!Promise<string>}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.createDataChannel = function(label, init) {};

/**
 * @param {string=} selector
 * @return {!Promise<?>}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.getStats = function(selector) {};

/**
 * @param {string} t
 * @param {function({channel: string}): void|function(): void|function(!freedom.RTCPeerConnection.OnIceCandidateEvent): void|function({stream: number}): void|!Function} f
 * @return {void}
 */
freedom.RTCPeerConnection.RTCPeerConnection.prototype.on = function(t, f) {};
/** @const */
freedom.Storage = {};
/**
 * @record
 * @struct
 */
freedom.Storage.Storage = function() {};

/**
 * @return {!Promise<!Array<string>>}
 */
freedom.Storage.Storage.prototype.keys = function() {};

/**
 * @param {string} key
 * @return {!Promise<string>}
 */
freedom.Storage.Storage.prototype.get = function(key) {};

/**
 * @param {string} key
 * @param {string} value
 * @return {!Promise<string>}
 */
freedom.Storage.Storage.prototype.set = function(key, value) {};

/**
 * @param {string} key
 * @return {!Promise<string>}
 */
freedom.Storage.Storage.prototype.remove = function(key) {};

/**
 * @return {!Promise<void>}
 */
freedom.Storage.Storage.prototype.clear = function() {};
/** @const */
freedom.TcpSocket = {};
/**
 * @record
 * @struct
 */
freedom.TcpSocket.DisconnectInfo = function() {};
 /** @type {string} */
freedom.TcpSocket.DisconnectInfo.prototype.errcode;
 /** @type {string} */
freedom.TcpSocket.DisconnectInfo.prototype.message;
/**
 * @record
 * @struct
 */
freedom.TcpSocket.ReadInfo = function() {};
 /** @type {!ArrayBuffer} */
freedom.TcpSocket.ReadInfo.prototype.data;
/**
 * @record
 * @struct
 */
freedom.TcpSocket.WriteInfo = function() {};
 /** @type {number} */
freedom.TcpSocket.WriteInfo.prototype.bytesWritten;
/**
 * @record
 * @struct
 */
freedom.TcpSocket.SocketInfo = function() {};
 /** @type {boolean} */
freedom.TcpSocket.SocketInfo.prototype.connected;
 /** @type {string} */
freedom.TcpSocket.SocketInfo.prototype.localAddress;
 /** @type {number} */
freedom.TcpSocket.SocketInfo.prototype.localPort;
 /** @type {string} */
freedom.TcpSocket.SocketInfo.prototype.peerAddress;
 /** @type {number} */
freedom.TcpSocket.SocketInfo.prototype.peerPort;
/**
 * @record
 * @struct
 */
freedom.TcpSocket.ConnectInfo = function() {};
 /** @type {number} */
freedom.TcpSocket.ConnectInfo.prototype.socket;
 /** @type {string} */
freedom.TcpSocket.ConnectInfo.prototype.host;
 /** @type {number} */
freedom.TcpSocket.ConnectInfo.prototype.port;
/**
 * @record
 * @struct
 */
freedom.TcpSocket.Socket = function() {};
 /** @type {!freedom.Method1<!ArrayBuffer, !freedom.TcpSocket.WriteInfo>} */
freedom.TcpSocket.Socket.prototype.write;
 /** @type {!freedom.Method0<void>} */
freedom.TcpSocket.Socket.prototype.pause;
 /** @type {!freedom.Method0<void>} */
freedom.TcpSocket.Socket.prototype.resume;

/**
 * @param {string} address
 * @param {number} port
 * @return {!Promise<void>}
 */
freedom.TcpSocket.Socket.prototype.listen = function(address, port) {};

/**
 * @param {string} hostname
 * @param {number} port
 * @return {!Promise<void>}
 */
freedom.TcpSocket.Socket.prototype.connect = function(hostname, port) {};

/**
 * @return {!Promise<void>}
 */
freedom.TcpSocket.Socket.prototype.secure = function() {};

/**
 * @return {!Promise<!freedom.TcpSocket.SocketInfo>}
 */
freedom.TcpSocket.Socket.prototype.getInfo = function() {};

/**
 * @return {!Promise<void>}
 */
freedom.TcpSocket.Socket.prototype.close = function() {};

/**
 * @param {string} type_or_eventType
 * @param {function(!freedom.TcpSocket.ConnectInfo): void|function(!freedom.TcpSocket.ReadInfo): void|function(!freedom.TcpSocket.DisconnectInfo): void|function(!Object): void} f
 * @return {void}
 */
freedom.TcpSocket.Socket.prototype.on = function(type_or_eventType, f) {};

/**
 * @param {string} type_or_eventType
 * @param {function(!freedom.TcpSocket.ReadInfo): void|function(!Object): void} f
 * @return {void}
 */
freedom.TcpSocket.Socket.prototype.off = function(type_or_eventType, f) {};
/** @const */
freedom.UdpSocket = {};
/**
 * @record
 * @struct
 */
freedom.UdpSocket.SocketInfo = function() {};
 /** @type {string} */
freedom.UdpSocket.SocketInfo.prototype.localAddress;
 /** @type {number} */
freedom.UdpSocket.SocketInfo.prototype.localPort;
/**
 * @record
 * @struct
 */
freedom.UdpSocket.RecvFromInfo = function() {};
 /** @type {number} */
freedom.UdpSocket.RecvFromInfo.prototype.resultCode;
 /** @type {string} */
freedom.UdpSocket.RecvFromInfo.prototype.address;
 /** @type {number} */
freedom.UdpSocket.RecvFromInfo.prototype.port;
 /** @type {!ArrayBuffer} */
freedom.UdpSocket.RecvFromInfo.prototype.data;
/**
 * @record
 * @struct
 */
freedom.UdpSocket.Implementation = function() {};

/**
 * @param {string} address
 * @param {number} port
 * @param {function(): void} continuation
 * @return {void}
 */
freedom.UdpSocket.Implementation.prototype.bind = function(address, port, continuation) {};

/**
 * @param {!ArrayBuffer} data
 * @param {string} address
 * @param {number} port
 * @param {function(number): void} continuation
 * @return {void}
 */
freedom.UdpSocket.Implementation.prototype.sendTo = function(data, address, port, continuation) {};

/**
 * @param {function(): void} continuation
 * @return {void}
 */
freedom.UdpSocket.Implementation.prototype.destroy = function(continuation) {};

/**
 * @param {function(!freedom.UdpSocket.SocketInfo): void} continuation
 * @return {void}
 */
freedom.UdpSocket.Implementation.prototype.getInfo = function(continuation) {};
/**
 * @record
 * @struct
 */
freedom.UdpSocket.Socket = function() {};
 /** @type {function(string, number): !Promise<void>} */
freedom.UdpSocket.Socket.prototype.bind;
 /** @type {!freedom.Method3<!ArrayBuffer, string, number, number>} */
freedom.UdpSocket.Socket.prototype.sendTo;
 /** @type {function(): !Promise<void>} */
freedom.UdpSocket.Socket.prototype.destroy;
 /** @type {function(string, !Function): void} */
freedom.UdpSocket.Socket.prototype.on;
 /** @type {function(): !Promise<!freedom.UdpSocket.SocketInfo>} */
freedom.UdpSocket.Socket.prototype.getInfo;
/** @const */
freedom.PgpProvider = {};
/**
 * @record
 * @struct
 */
freedom.PgpProvider.PublicKey = function() {};
 /** @type {string} */
freedom.PgpProvider.PublicKey.prototype.key;
 /** @type {string} */
freedom.PgpProvider.PublicKey.prototype.fingerprint;
 /** @type {!Array<string>} */
freedom.PgpProvider.PublicKey.prototype.words;
/**
 * @record
 * @struct
 */
freedom.PgpProvider.KeyFingerprint = function() {};
 /** @type {string} */
freedom.PgpProvider.KeyFingerprint.prototype.fingerprint;
 /** @type {!Array<string>} */
freedom.PgpProvider.KeyFingerprint.prototype.words;
/**
 * @record
 * @struct
 */
freedom.PgpProvider.VerifyDecryptResult = function() {};
 /** @type {!ArrayBuffer} */
freedom.PgpProvider.VerifyDecryptResult.prototype.data;
 /** @type {!Array<string>} */
freedom.PgpProvider.VerifyDecryptResult.prototype.signedBy;
/**
 * @record
 * @struct
 */
freedom.PgpProvider.PgpProvider = function() {};

/**
 * @param {string} passphrase
 * @param {string} userid
 * @return {!Promise<void>}
 */
freedom.PgpProvider.PgpProvider.prototype.setup = function(passphrase, userid) {};

/**
 * @return {!Promise<void>}
 */
freedom.PgpProvider.PgpProvider.prototype.clear = function() {};

/**
 * @return {!Promise<!freedom.PgpProvider.PublicKey>}
 */
freedom.PgpProvider.PgpProvider.prototype.exportKey = function() {};

/**
 * @param {string} publicKey
 * @return {!Promise<!freedom.PgpProvider.KeyFingerprint>}
 */
freedom.PgpProvider.PgpProvider.prototype.getFingerprint = function(publicKey) {};

/**
 * @param {string} curve
 * @param {string} pubKey
 * @return {!Promise<!ArrayBuffer>}
 */
freedom.PgpProvider.PgpProvider.prototype.ecdhBob = function(curve, pubKey) {};

/**
 * @param {!ArrayBuffer} data
 * @param {string=} encryptKey
 * @param {boolean=} sign
 * @return {!Promise<!ArrayBuffer>}
 */
freedom.PgpProvider.PgpProvider.prototype.signEncrypt = function(data, encryptKey, sign) {};

/**
 * @param {!ArrayBuffer} data
 * @param {string=} verifyKey
 * @return {!Promise<!freedom.PgpProvider.VerifyDecryptResult>}
 */
freedom.PgpProvider.PgpProvider.prototype.verifyDecrypt = function(data, verifyKey) {};

/**
 * @param {!ArrayBuffer} data
 * @param {string=} type
 * @return {!Promise<string>}
 */
freedom.PgpProvider.PgpProvider.prototype.armor = function(data, type) {};

/**
 * @param {string} data
 * @return {!Promise<!ArrayBuffer>}
 */
freedom.PgpProvider.PgpProvider.prototype.dearmor = function(data) {};
/** @const */
freedom.PortControl = {};
/**
 * @record
 * @struct
 */
freedom.PortControl.Mapping = function() {};
 /** @type {string} */
freedom.PortControl.Mapping.prototype.internalIp;
 /** @type {number} */
freedom.PortControl.Mapping.prototype.internalPort;
 /** @type {string} */
freedom.PortControl.Mapping.prototype.externalIp;
 /** @type {number} */
freedom.PortControl.Mapping.prototype.externalPort;
 /** @type {number} */
freedom.PortControl.Mapping.prototype.lifetime;
 /** @type {string} */
freedom.PortControl.Mapping.prototype.protocol;
 /** @type {number} */
freedom.PortControl.Mapping.prototype.timeoutId;
 /** @type {!Array<number>} */
freedom.PortControl.Mapping.prototype.nonce;
 /** @type {string} */
freedom.PortControl.Mapping.prototype.errInfo;
/**
 * @record
 * @struct
 */
freedom.PortControl.ActiveMappings = function() {};

/* TODO: IndexSignature: freedom.PortControl */
/**
 * @record
 * @struct
 */
freedom.PortControl.ProtocolSupport = function() {};
 /** @type {boolean} */
freedom.PortControl.ProtocolSupport.prototype.natPmp;
 /** @type {boolean} */
freedom.PortControl.ProtocolSupport.prototype.pcp;
 /** @type {boolean} */
freedom.PortControl.ProtocolSupport.prototype.upnp;
/**
 * @record
 * @struct
 */
freedom.PortControl.PortControl = function() {};

/**
 * @param {number} intPort
 * @param {number} extPort
 * @param {number} lifetime
 * @return {!Promise<!freedom.PortControl.Mapping>}
 */
freedom.PortControl.PortControl.prototype.addMapping = function(intPort, extPort, lifetime) {};

/**
 * @param {number} extPort
 * @return {!Promise<boolean>}
 */
freedom.PortControl.PortControl.prototype.deleteMapping = function(extPort) {};

/**
 * @return {!Promise<!freedom.PortControl.ProtocolSupport>}
 */
freedom.PortControl.PortControl.prototype.probeProtocolSupport = function() {};

/**
 * @return {!Promise<boolean>}
 */
freedom.PortControl.PortControl.prototype.probePmpSupport = function() {};

/**
 * @param {number} intPort
 * @param {number} extPort
 * @param {number} lifetime
 * @return {!Promise<!freedom.PortControl.Mapping>}
 */
freedom.PortControl.PortControl.prototype.addMappingPmp = function(intPort, extPort, lifetime) {};

/**
 * @param {number} extPort
 * @return {!Promise<boolean>}
 */
freedom.PortControl.PortControl.prototype.deleteMappingPmp = function(extPort) {};

/**
 * @return {!Promise<boolean>}
 */
freedom.PortControl.PortControl.prototype.probePcpSupport = function() {};

/**
 * @param {number} intPort
 * @param {number} extPort
 * @param {number} lifetime
 * @return {!Promise<!freedom.PortControl.Mapping>}
 */
freedom.PortControl.PortControl.prototype.addMappingPcp = function(intPort, extPort, lifetime) {};

/**
 * @param {number} extPort
 * @return {!Promise<boolean>}
 */
freedom.PortControl.PortControl.prototype.deleteMappingPcp = function(extPort) {};

/**
 * @return {!Promise<boolean>}
 */
freedom.PortControl.PortControl.prototype.probeUpnpSupport = function() {};

/**
 * @param {number} intPort
 * @param {number} extPort
 * @param {number} lifetime
 * @param {string=} controlUrl
 * @return {!Promise<!freedom.PortControl.Mapping>}
 */
freedom.PortControl.PortControl.prototype.addMappingUpnp = function(intPort, extPort, lifetime, controlUrl) {};

/**
 * @param {number} extPort
 * @return {!Promise<boolean>}
 */
freedom.PortControl.PortControl.prototype.deleteMappingUpnp = function(extPort) {};

/**
 * @return {!Promise<!freedom.PortControl.ActiveMappings>}
 */
freedom.PortControl.PortControl.prototype.getActiveMappings = function() {};

/**
 * @return {!Promise<!Array<string>>}
 */
freedom.PortControl.PortControl.prototype.getPrivateIps = function() {};

/**
 * @return {!Promise<void>}
 */
freedom.PortControl.PortControl.prototype.close = function() {};
/** @const */
freedom.Social = {};
/**
 * @record
 * @struct
 */
freedom.Social.ClientState = function() {};
 /** @type {string} */
freedom.Social.ClientState.prototype.userId;
 /** @type {string} */
freedom.Social.ClientState.prototype.clientId;
 /** @type {string} */
freedom.Social.ClientState.prototype.status;
 /** @type {number} */
freedom.Social.ClientState.prototype.timestamp;
/**
 * @record
 * @struct
 */
freedom.Social.UserProfile = function() {};
 /** @type {string} */
freedom.Social.UserProfile.prototype.userId;
 /** @type {string} */
freedom.Social.UserProfile.prototype.name;
 /** @type {number} */
freedom.Social.UserProfile.prototype.status;
 /** @type {string} */
freedom.Social.UserProfile.prototype.url;
 /** @type {string} */
freedom.Social.UserProfile.prototype.imageData;
 /** @type {number} */
freedom.Social.UserProfile.prototype.timestamp;
/**
 * @record
 * @struct
 */
freedom.Social.Users = function() {};

/* TODO: IndexSignature: freedom.Social */
/**
 * @record
 * @struct
 */
freedom.Social.Clients = function() {};

/* TODO: IndexSignature: freedom.Social */
/**
 * @record
 * @struct
 */
freedom.Social.IncomingMessage = function() {};
 /** @type {!freedom.Social.ClientState} */
freedom.Social.IncomingMessage.prototype.from;
 /** @type {string} */
freedom.Social.IncomingMessage.prototype.message;
/**
 * @record
 * @struct
 */
freedom.Social.LoginRequest = function() {};
 /** @type {string} */
freedom.Social.LoginRequest.prototype.agent;
 /** @type {string} */
freedom.Social.LoginRequest.prototype.version;
 /** @type {string} */
freedom.Social.LoginRequest.prototype.url;
 /** @type {boolean} */
freedom.Social.LoginRequest.prototype.interactive;
 /** @type {boolean} */
freedom.Social.LoginRequest.prototype.rememberLogin;
/**
 * @record
 * @struct
 */
freedom.Social.Social = function() {};

/**
 * @param {string} eventType
 * @param {!Function|function(!freedom.Social.IncomingMessage): void|function(!freedom.Social.UserProfile): void|function(!freedom.Social.ClientState): void} f
 * @return {void}
 */
freedom.Social.Social.prototype.on = function(eventType, f) {};

/**
 * @param {string} eventType
 * @param {!Function} f
 * @return {void}
 */
freedom.Social.Social.prototype.once = function(eventType, f) {};

/**
 * @param {!freedom.Social.LoginRequest} loginRequest
 * @return {!Promise<!freedom.Social.ClientState>}
 */
freedom.Social.Social.prototype.login = function(loginRequest) {};

/**
 * @return {!Promise<!freedom.Social.Users>}
 */
freedom.Social.Social.prototype.getUsers = function() {};

/**
 * @return {!Promise<!freedom.Social.Clients>}
 */
freedom.Social.Social.prototype.getClients = function() {};

/**
 * @param {string} destinationId
 * @param {string} message
 * @return {!Promise<void>}
 */
freedom.Social.Social.prototype.sendMessage = function(destinationId, message) {};

/**
 * @return {!Promise<void>}
 */
freedom.Social.Social.prototype.logout = function() {};

/**
 * @return {!Promise<void>}
 */
freedom.Social.Social.prototype.clearCachedCredentials = function() {};
