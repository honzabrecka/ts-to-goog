/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cldrjs/index.d.ts:

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
 /** @type {!self.CldrFactory} */
var self;
/**
 * @record
 * @struct
 */
self.Attributes = function() {};
 /** @type {?} */
self.Attributes.prototype.language;
 /** @type {?} */
self.Attributes.prototype.script;
 /** @type {?} */
self.Attributes.prototype.region;
 /** @type {?} */
self.Attributes.prototype.territory;
 /** @type {?} */
self.Attributes.prototype.languageId;
 /** @type {?} */
self.Attributes.prototype.maxLanguageId;
 /** @type {?} */
self.Attributes.prototype.minLanguageId;
/**
 * @record
 * @struct
 */
self.CldrStatic = function() {};
 /** @type {string} */
self.CldrStatic.prototype.locale;
 /** @type {!self.Attributes} */
self.CldrStatic.prototype.attributes;

/**
 * \@name get
 * \@memberof cldr.CldrStatic
 * \@kind function
 * \@access public
 * 
 * \@description 
 * Get the item data given its path, or 'undefined' if missing.
 * 
 * 
 * \@name get
 * \@memberof cldr.CldrStatic
 * \@kind function
 * \@access public
 * 
 * \@description 
 * Get the item data given its path, or 'undefined' if missing.
 * 
 * 
 * @param {string|!Array<string>} path_or_paths
 * @return {?}
 */
self.CldrStatic.prototype.get = function(path_or_paths) {};

/**
 * \@name main
 * \@memberof cldr.CldrStatic
 * \@kind function
 * \@access public
 * 
 * \@description 
 * It's an alias for .get(["main/{languageId}, ...])"
 * 
 * 
 * \@name main
 * \@memberof cldr.CldrStatic
 * \@kind function
 * \@access public
 * 
 * \@declaration 
 * It's an alias for .get(["main/{languageId}, ...])"
 * 
 * 
 * @param {string|!Array<string>} path_or_paths
 * @return {?}
 */
self.CldrStatic.prototype.main = function(path_or_paths) {};
/**
 * @record
 * @struct
 */
self.CldrFactory = function() {};

/* TODO: ConstructSignature: self */
 /** @type {string} */
self.CldrFactory.prototype.localeSep;

/**
 * \@name load
 * \@memberof cldr.CldrFactory
 * \@kind function
 * \@access public
 * 
 * \@description 
 * Load the CLDR content in the form of JSON.
 * 
 * 
 * @param {?} json
 * @param {...?} otherJson
 * @return {void}
 */
self.CldrFactory.prototype.load = function(json, otherJson) {};

/**
 * @param {string} event
 * @param {function(string, ?): void} listener
 * @return {void}
 */
self.CldrStatic.prototype.on = function(event, listener) {};

/**
 * @param {string} event
 * @param {function(string, ?): void} listener
 * @return {void}
 */
self.CldrStatic.prototype.once = function(event, listener) {};

/**
 * @param {string} event
 * @param {function(string, ?): void} listener
 * @return {void}
 */
self.CldrStatic.prototype.off = function(event, listener) {};

/**
 * @param {string} event
 * @param {function(string, ?): void} listener
 * @return {void}
 */
self.CldrFactory.prototype.on = function(event, listener) {};

/**
 * @param {string} event
 * @param {function(string, ?): void} listener
 * @return {void}
 */
self.CldrFactory.prototype.once = function(event, listener) {};

/**
 * @param {string} event
 * @param {function(string, ?): void} listener
 * @return {void}
 */
self.CldrFactory.prototype.off = function(event, listener) {};
