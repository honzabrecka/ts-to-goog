/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/escodegen/index.d.ts:
/**
 * @record
 * @struct
 */
function FormatOptions() {}
 /** @type {?} */
FormatOptions.prototype.indent;
 /** @type {string} */
FormatOptions.prototype.newline;
 /** @type {string} */
FormatOptions.prototype.space;
 /** @type {boolean} */
FormatOptions.prototype.json;
 /** @type {boolean} */
FormatOptions.prototype.renumber;
 /** @type {boolean} */
FormatOptions.prototype.hexadecimal;
 /** @type {string} */
FormatOptions.prototype.quotes;
 /** @type {boolean} */
FormatOptions.prototype.escapeless;
 /** @type {boolean} */
FormatOptions.prototype.compact;
 /** @type {boolean} */
FormatOptions.prototype.parentheses;
 /** @type {boolean} */
FormatOptions.prototype.semicolons;
 /** @type {boolean} */
FormatOptions.prototype.safeConcatenation;
 /** @type {boolean} */
FormatOptions.prototype.preserveBlankLines;
/**
 * @record
 * @struct
 */
function IndentOptions() {}
 /** @type {string} */
IndentOptions.prototype.style;
 /** @type {number} */
IndentOptions.prototype.base;
 /** @type {boolean} */
IndentOptions.prototype.adjustMultilineComment;
/**
 * @record
 * @struct
 */
function MozillaOptions() {}
 /** @type {boolean} */
MozillaOptions.prototype.starlessGenerator;
 /** @type {boolean} */
MozillaOptions.prototype.parenthesizedComprehensionBlock;
 /** @type {boolean} */
MozillaOptions.prototype.comprehensionExpressionStartsWithAssignment;
/**
 * @record
 * @struct
 */
function GenerateOptions() {}
 /** @type {?} */
GenerateOptions.prototype.format;
 /** @type {?} */
GenerateOptions.prototype.moz;
 /** @type {!Function} */
GenerateOptions.prototype.parse;
 /** @type {boolean} */
GenerateOptions.prototype.comment;
 /** @type {string} */
GenerateOptions.prototype.sourceMap;
 /** @type {boolean} */
GenerateOptions.prototype.sourceMapWithCode;
 /** @type {string} */
GenerateOptions.prototype.sourceContent;
 /** @type {string} */
GenerateOptions.prototype.sourceCode;
 /** @type {string} */
GenerateOptions.prototype.sourceMapRoot;
 /** @type {boolean} */
GenerateOptions.prototype.directive;
 /** @type {string} */
GenerateOptions.prototype.file;
 /** @type {string} */
GenerateOptions.prototype.verbatim;

/** @const */
var Precedence = {};
/** @const {number} */
Precedence.Sequence;
/** @const {number} */
Precedence.Yield;
/** @const {number} */
Precedence.Await;
/** @const {number} */
Precedence.Assignment;
/** @const {number} */
Precedence.Conditional;
/** @const {number} */
Precedence.ArrowFunction;
/** @const {number} */
Precedence.LogicalOR;
/** @const {number} */
Precedence.LogicalAND;
/** @const {number} */
Precedence.BitwiseOR;
/** @const {number} */
Precedence.BitwiseXOR;
/** @const {number} */
Precedence.BitwiseAND;
/** @const {number} */
Precedence.Equality;
/** @const {number} */
Precedence.Relational;
/** @const {number} */
Precedence.BitwiseSHIFT;
/** @const {number} */
Precedence.Additive;
/** @const {number} */
Precedence.Multiplicative;
/** @const {number} */
Precedence.Unary;
/** @const {number} */
Precedence.Postfix;
/** @const {number} */
Precedence.Call;
/** @const {number} */
Precedence.New;
/** @const {number} */
Precedence.TaggedTemplate;
/** @const {number} */
Precedence.Member;
/** @const {number} */
Precedence.Primary;

/**
 * Produces given Abstract Syntax Tree as javascript code
 * @param {?} ast The Abstract Syntax Tree to generate code from
 * @param {?=} options The generation options
 * @return {string}
 */
function generate(ast, options) {}

/**
 * Attaching the comments is needed to keep the comments and to allow blank lines to be preserved.
 * @param {?} ast
 * @param {?} comments
 * @param {?} tokens
 * @return {?}
 */
function attachComments(ast, comments, tokens) {}
