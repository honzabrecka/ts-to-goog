/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/gaussian/index.d.ts:

/**
 * @param {number} mean
 * @param {number} variance
 * @return {!gaussian.Gaussian}
 */
function gaussian(mean, variance) {}

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
/**
 * @record
 * @struct
 */
gaussian.Gaussian = function() {};
 /** @type {number} */
gaussian.Gaussian.prototype.mean;
 /** @type {number} */
gaussian.Gaussian.prototype.variance;
 /** @type {number} */
gaussian.Gaussian.prototype.standardDeviation;

/**
 * the probability density function, which describes the
 * probability of a random variable taking on the value x
 * @param {number} x
 * @return {number}
 */
gaussian.Gaussian.prototype.pdf = function(x) {};

/**
 * the cumulative distribution function, which describes the
 * probability of a random variable falling in the interval (−∞, x]
 * @param {number} x
 * @return {number}
 */
gaussian.Gaussian.prototype.cdf = function(x) {};

/**
 * the percent point function, the inverse of cdf
 * @param {number} x
 * @return {number}
 */
gaussian.Gaussian.prototype.ppf = function(x) {};

/**
 * returns the product distribution of this and the given
 * distribution; equivalent to scale(d) when d is a constant
 * @param {(number|!gaussian.Gaussian)} x
 * @return {number}
 */
gaussian.Gaussian.prototype.mul = function(x) {};

/**
 * returns the quotient distribution of this and the given
 * distribution; equivalent to scale(1/d) when d is a constant
 * @param {(number|!gaussian.Gaussian)} x
 * @return {number}
 */
gaussian.Gaussian.prototype.div = function(x) {};

/**
 * returns the result of adding this and the given
 * distribution's means and variances
 * @param {!gaussian.Gaussian} x
 * @return {number}
 */
gaussian.Gaussian.prototype.add = function(x) {};

/**
 * returns the result of subtracting this and the given
 * distribution's means and variances
 * @param {!gaussian.Gaussian} x
 * @return {number}
 */
gaussian.Gaussian.prototype.sub = function(x) {};

/**
 * returns the result of scaling this distribution by the
 * given constant
 * @param {number} x
 * @return {number}
 */
gaussian.Gaussian.prototype.scale = function(x) {};
