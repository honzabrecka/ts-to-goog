/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/progress/index.d.ts:
/**
 * @record
 * @struct
 */
function ProgressBarOptions() {}
 /** @type {number} */
ProgressBarOptions.prototype.total;
 /** @type {number} */
ProgressBarOptions.prototype.curr;
 /** @type {string} */
ProgressBarOptions.prototype.head;
 /** @type {number} */
ProgressBarOptions.prototype.width;
 /** @type {number} */
ProgressBarOptions.prototype.renderThrottle;
 /** @type {!NodeJS.WritableStream} */
ProgressBarOptions.prototype.stream;
 /** @type {string} */
ProgressBarOptions.prototype.complete;
 /** @type {string} */
ProgressBarOptions.prototype.incomplete;
 /** @type {boolean} */
ProgressBarOptions.prototype.clear;
 /** @type {!Function} */
ProgressBarOptions.prototype.callback;

/**
 * @constructor
 * @struct
 * Initialize a `ProgressBar` with the given `fmt` string and `options` or
 * `total`.
 * 
 * Options:
 *   - `total` total number of ticks to complete
 *   - `width` the displayed width of the progress bar defaulting to total
 *   - `stream` the output stream defaulting to stderr
 *   - `complete` completion character defaulting to "="
 *   - `incomplete` incomplete character defaulting to "-"
 *   - `renderThrottle` minimum time between updates in milliseconds defaulting to 16
 *   - `callback` optional function to call when the progress bar completes
 *   - `clear` will clear the progress bar upon termination
 * 
 * Tokens:
 *   - `:bar` the progress bar itself
 *   - `:current` current tick number
 *   - `:total` total ticks
 *   - `:elapsed` time elapsed in seconds
 *   - `:percent` completion percentage
 *   - `:eta` eta in seconds
 * @param {string} format
 * @param {number|?} total_or_options
 */
function ProgressBar(format, total_or_options) {}
 /** @type {boolean} */
ProgressBar.prototype.complete;

/**
 * "tick" the progress bar with optional `len` and optional `tokens`.
 * @param {?|number=} tokens_or_count
 * @param {?=} tokens
 * @return {void}
 */
ProgressBar.prototype.tick = function(tokens_or_count, tokens) {};

/**
 * Method to render the progress bar with optional `tokens` to place in the
 * progress bar's `fmt` field.
 * @param {?=} tokens
 * @return {void}
 */
ProgressBar.prototype.render = function(tokens) {};

/**
 * "update" the progress bar to represent an exact percentage.
 * The ratio (between 0 and 1) specified will be multiplied by `total` and
 * floored, representing the closest available "tick." For example, if a
 * progress bar has a length of 3 and `update(0.5)` is called, the progress
 * will be set to 1.
 * 
 * A ratio of 0.5 will attempt to set the progress to halfway.
 * 
 * @param {number} ratio The ratio (between 0 and 1 inclusive) to set the
 *   overall completion to.
 * @param {?=} tokens
 * @return {void}
 */
ProgressBar.prototype.update = function(ratio, tokens) {};

/**
 * Terminates a progress bar.
 * @return {void}
 */
ProgressBar.prototype.terminate = function() {};

/* TODO: ExportAssignment in  */
