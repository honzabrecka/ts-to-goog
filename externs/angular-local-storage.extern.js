/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/angular-local-storage/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "angular"
/** @const */
tsickle_declare_module.angular.local = {};
/** @const */
tsickle_declare_module.angular.local.storage = {};
/**
 * @extends {angular.IServiceProvider}
 * @record
 * @struct
 */
tsickle_declare_module.angular.local.storage.ILocalStorageServiceProvider = function() {};

/**
 * Setter for the prefix
 * You should set a prefix to avoid overwriting any local storage variables from the rest of your app
 * e.g. localStorageServiceProvider.setPrefix('youAppName');
 * With provider you can use config as this:
 * myApp.config(function (localStorageServiceProvider) {
 *  localStorageServiceProvider.prefix = 'yourAppName';
 * });
 * @param {string} prefix default: ls.<your-key>
 * @return {!local.storage.ILocalStorageServiceProvider}
 */
tsickle_declare_module.angular.local.storage.ILocalStorageServiceProvider.prototype.setPrefix = function(prefix) {};

/**
 * Setter for the storageType
 * @param {string} storageType localstorage or sessionStorage. default: localStorage
 * @return {!local.storage.ILocalStorageServiceProvider}
 */
tsickle_declare_module.angular.local.storage.ILocalStorageServiceProvider.prototype.setStorageType = function(storageType) {};

/**
 * If localStorage is not supported, the library will default to cookies instead. This behavior can be disabled
 * @param {boolean} shouldDefault default: true
 * @return {!local.storage.ILocalStorageServiceProvider}
 */
tsickle_declare_module.angular.local.storage.ILocalStorageServiceProvider.prototype.setDefaultToCookie = function(shouldDefault) {};

/**
 * Setter for cookie config
 * @param {number} exp number of days before cookies expire (0 = does not expire). default: 30
 * @param {string} path the web path the cookie represents. default: '/'
 * @param {boolean} secure to store cookies as secure. default: false
 * @return {!local.storage.ILocalStorageServiceProvider}
 */
tsickle_declare_module.angular.local.storage.ILocalStorageServiceProvider.prototype.setStorageCookie = function(exp, path, secure) {};

/**
 * Set the cookie domain, since this runs inside a the config() block, only providers and constants can be injected. As a result, $location service can't be used here, use a hardcoded string or window.location.
 * No default value
 * @param {string} domain
 * @return {!local.storage.ILocalStorageServiceProvider}
 */
tsickle_declare_module.angular.local.storage.ILocalStorageServiceProvider.prototype.setStorageCookieDomain = function(domain) {};

/**
 * Send signals for each of the following actions:
 * @param {boolean} setItem default: true
 * @param {boolean} removeItem default: false
 * @return {!local.storage.ILocalStorageServiceProvider}
 */
tsickle_declare_module.angular.local.storage.ILocalStorageServiceProvider.prototype.setNotify = function(setItem, removeItem) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.local.storage.ICookie = function() {};
 /** @type {boolean} */
tsickle_declare_module.angular.local.storage.ICookie.prototype.isSupported;

/**
 * Directly adds a value to cookies.
 * Note: Typically used as a fallback if local storage is not supported.
 * Returns: Boolean
 * Directly adds a value to cookies with an expiration.
 * Note: Typically used as a fallback if local storage is not supported.
 * Returns: Boolean
 * @param {string} key
 * @param {string} val
 * @param {number=} daysToExpiry
 * @return {boolean}
 */
tsickle_declare_module.angular.local.storage.ICookie.prototype.set = function(key, val, daysToExpiry) {};

/**
 * Directly get a value from a cookie.
 * Returns: value from local storage
 * @param {string} key
 * @return {string}
 */
tsickle_declare_module.angular.local.storage.ICookie.prototype.get = function(key) {};

/**
 * Remove directly value from a cookie.
 * Returns: Boolean
 * @param {string} key
 * @return {boolean}
 */
tsickle_declare_module.angular.local.storage.ICookie.prototype.remove = function(key) {};

/**
 * Remove all data for this app from cookie.
 * @return {?}
 */
tsickle_declare_module.angular.local.storage.ICookie.prototype.clearAll = function() {};

/** @typedef {string} */
tsickle_declare_module.angular.local.storage.StorageType;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.local.storage.ILocalStorageService = function() {};
 /** @type {boolean} */
tsickle_declare_module.angular.local.storage.ILocalStorageService.prototype.isSupported;
 /** @type {!local.storage.ICookie} */
tsickle_declare_module.angular.local.storage.ILocalStorageService.prototype.cookie;

/**
 * Returns: String
 * @return {string}
 */
tsickle_declare_module.angular.local.storage.ILocalStorageService.prototype.getStorageType = function() {};

/**
 * Directly adds a value to local storage.
 * If local storage is not supported, use cookies instead.
 * Returns: Boolean
 * @template T
 * @param {string} key
 * @param {T} value
 * @param {string=} storageType
 * @return {boolean}
 */
tsickle_declare_module.angular.local.storage.ILocalStorageService.prototype.set = function(key, value, storageType) {};

/**
 * Directly get a value from local storage.
 * If local storage is not supported, use cookies instead.
 * Returns: value from local storage
 * @template T
 * @param {string} key
 * @param {string=} storageType
 * @return {T}
 */
tsickle_declare_module.angular.local.storage.ILocalStorageService.prototype.get = function(key, storageType) {};

/**
 * Return array of keys for local storage, ignore keys that not owned.
 * Returns: value from local storage
 * @param {string=} storageType
 * @return {!Array<string>}
 */
tsickle_declare_module.angular.local.storage.ILocalStorageService.prototype.keys = function(storageType) {};

/**
 * Remove an item from local storage by key.
 * If local storage is not supported, use cookies instead.
 * Returns: Boolean
 * @param {string} key
 * @return {boolean}
 */
tsickle_declare_module.angular.local.storage.ILocalStorageService.prototype.remove = function(key) {};

/**
 * Remove all data for this app from local storage.
 * If local storage is not supported, use cookies instead.
 * Note: Optionally takes a regular expression string and removes matching.
 * Returns: Boolean
 * @param {!RegExp=} regularExpression
 * @param {string=} storageType
 * @return {boolean}
 */
tsickle_declare_module.angular.local.storage.ILocalStorageService.prototype.clearAll = function(regularExpression, storageType) {};

/**
 * Bind $scope key to localStorageService.
 * Usage: localStorageService.bind(scope, property, value[optional], key[optional])
 * Returns: deregistration function for this listener.
 * @param {!angular.IScope} scope
 * @param {string} property
 * @param {?=} value optional
 * @param {string=} key The corresponding key used in local storage
 * @param {string=} storageType
 * @return {!Function}
 */
tsickle_declare_module.angular.local.storage.ILocalStorageService.prototype.bind = function(scope, property, value, key, storageType) {};

/**
 * Return the derive key
 * Returns String
 * @param {string} key
 * @return {string}
 */
tsickle_declare_module.angular.local.storage.ILocalStorageService.prototype.deriveKey = function(key) {};

/**
 * Return localStorageService.length, ignore keys that not owned.
 * Returns Number
 * @param {string=} storageType
 * @return {number}
 */
tsickle_declare_module.angular.local.storage.ILocalStorageService.prototype.length = function(storageType) {};
