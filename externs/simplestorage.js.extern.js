/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/simplestorage.js/index.d.ts:

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
 /** @type {!simplestoragejs.SimpleStorage} */
var simpleStorage;
/** @const */
var simplestoragejs = {};
/**
 * @record
 * @struct
 */
simplestoragejs.SimpleStorage = function() {};
 /** @type {string} */
simplestoragejs.SimpleStorage.prototype.version;

/**
 * Check if local storage can be used.
 * Returns <code>true</code> if storage is available.
 * @see https://github.com/andris9/simpleStorage#canuse
 * @return {boolean}
 */
simplestoragejs.SimpleStorage.prototype.canUse = function() {};

/**
 * Store or update a value in local storage.
 * Returns <code>true</code> if value was stored, <code>false</code> if value was not stored or <code>{\@link Error}</code> object if value was not stored because of an error.
 * @see https://github.com/andris9/simpleStorage#setkey-value-options
 * @param {string} key The key for the value.
 * @param {?} value Value to be stored (can be any JSONeable value).
 * @param {!simplestoragejs.SetOptions=} options
 * @return {(boolean|!Error)}
 */
simplestoragejs.SimpleStorage.prototype.set = function(key, value, options) {};

/**
 * Retrieve a value from local storage.
 * Returns the value for a key or undefined if the key was not found.
 * @see https://github.com/andris9/simpleStorage#getkey
 * @param {string} key The key to be retrieved.
 * @return {?}
 */
simplestoragejs.SimpleStorage.prototype.get = function(key) {};

/**
 * Checks if there's a value with the given key in the local storage.
 * Returns <code>true</code> if the given key exists, <code>false</code> otherwise.
 * @see https://github.com/andris9/simpleStorage#haskeykey
 * @param {string} key The key to be checked.
 * @return {boolean}
 */
simplestoragejs.SimpleStorage.prototype.hasKey = function(key) {};

/**
 * Removes a value from local storage.
 * Returns <code>true</code> if the value was deleted, <code>false</code> if the value was not found or <code>{\@link Error}</code> object if value was not deleted because of an error.
 * @see https://github.com/andris9/simpleStorage#deletekeykey
 * @param {string} key The key to be deleted.
 * @return {(boolean|!Error)}
 */
simplestoragejs.SimpleStorage.prototype.deleteKey = function(key) {};

/**
 * Set a millisecond timeout. When the timeout is reached, the key is removed automatically from local storage.
 * Returns <code>true</code> if ttl was set, <code>false</code> if value was not found or <code>{\@link Error}</code> object if ttl was not set because of an error.
 * @see https://github.com/andris9/simpleStorage#setttlkey-ttl
 * @param {string} key The key to be updated.
 * @param {number} ttl Timeout in milliseconds. If the value is 0, timeout is cleared from the key.
 * @return {(boolean|!Error)}
 */
simplestoragejs.SimpleStorage.prototype.setTTL = function(key, ttl) {};

/**
 * Retrieve remaining milliseconds for a key with TTL.
 * Returns the finite number of remaining milliseconds, <code>Infinity</code> if TTL is not set for the selected key or <code>false</code> if the selected key does not exist or is expired.
 * @see https://github.com/andris9/simpleStorage#getttlkey
 * @param {string} key The key to be checked.
 * @return {(number|boolean)}
 */
simplestoragejs.SimpleStorage.prototype.getTTL = function(key) {};

/**
 * Clear all values.
 * Returns <code>true</code> if storage was flushed or <code>{\@link Error}</code> object if storage was not flushed because of an error.
 * @see https://github.com/andris9/simpleStorage#flush
 * @return {(boolean|!Error)}
 */
simplestoragejs.SimpleStorage.prototype.flush = function() {};

/**
 * Retrieve all used keys as an array.
 * Returns an array of keys.
 * @see https://github.com/andris9/simpleStorage#index
 * @return {(boolean|!Array<?>)}
 */
simplestoragejs.SimpleStorage.prototype.index = function() {};

/**
 * Get used storage in symbol count.
 * @see https://github.com/andris9/simpleStorage#storagesize
 * @return {number}
 */
simplestoragejs.SimpleStorage.prototype.storageSize = function() {};
/**
 * @record
 * @struct
 */
simplestoragejs.SetOptions = function() {};
 /** @type {number} */
simplestoragejs.SetOptions.prototype.TTL;
