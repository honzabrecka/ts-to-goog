/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/smoothie/index.d.ts:
/**
 * @record
 * @struct
 */
function ITimeSeriesOptions() {}
 /** @type {boolean} */
ITimeSeriesOptions.prototype.resetBounds;
 /** @type {number} */
ITimeSeriesOptions.prototype.resetBoundsInterval;
/**
 * @record
 * @struct
 */
function ITimeSeriesPresentationOptions() {}
 /** @type {string} */
ITimeSeriesPresentationOptions.prototype.strokeStyle;
 /** @type {string} */
ITimeSeriesPresentationOptions.prototype.fillStyle;
 /** @type {number} */
ITimeSeriesPresentationOptions.prototype.lineWidth;

/**
 * @constructor
 * @struct
 * Initialises a new <code>TimeSeries</code> with optional data options.
 * 
 * Options are of the form (defaults shown):
 * 
 * <pre>
 * {
 *   resetBounds: true,        // enables/disables automatic scaling of the y-axis
 *   resetBoundsInterval: 3000 // the period between scaling calculations, in millis
 * }
 * </pre>
 * 
 * Presentation options for TimeSeries are specified as an argument to <code>SmoothieChart.addTimeSeries</code>.
 * @param {?=} options
 */
function TimeSeries(options) {}

/**
 * Clears all data and state from this TimeSeries object.
 * @return {void}
 */
TimeSeries.prototype.clear = function() {};

/**
 * Recalculate the min/max values for this <code>TimeSeries</code> object.
 * 
 * This causes the graph to scale itself in the y-axis.
 * @return {void}
 */
TimeSeries.prototype.resetBounds = function() {};

/**
 * Adds a new data point to the <code>TimeSeries</code>, preserving chronological order.
 * 
 * @param {number} timestamp the position, in time, of this data point
 * @param {number} value the value of this data point
 * @param {boolean=} sumRepeatedTimeStampValues if <code>timestamp</code> has an exact match in the series, this flag controls
 * whether it is replaced, or the values summed (defaults to false.)
 * @return {void}
 */
TimeSeries.prototype.append = function(timestamp, value, sumRepeatedTimeStampValues) {};

/**
 * @param {number} oldestValidTime
 * @param {number} maxDataSetLength
 * @return {void}
 */
TimeSeries.prototype.dropOldData = function(oldestValidTime, maxDataSetLength) {};
/**
 * @record
 * @struct
 */
function IGridOptions() {}
 /** @type {string} */
IGridOptions.prototype.fillStyle;
 /** @type {number} */
IGridOptions.prototype.lineWidth;
 /** @type {string} */
IGridOptions.prototype.strokeStyle;
 /** @type {number} */
IGridOptions.prototype.millisPerLine;
 /** @type {boolean} */
IGridOptions.prototype.sharpLines;
 /** @type {number} */
IGridOptions.prototype.verticalSections;
 /** @type {boolean} */
IGridOptions.prototype.borderVisible;
/**
 * @record
 * @struct
 */
function ILabelOptions() {}
 /** @type {boolean} */
ILabelOptions.prototype.disabled;
 /** @type {string} */
ILabelOptions.prototype.fillStyle;
 /** @type {number} */
ILabelOptions.prototype.fontSize;
 /** @type {string} */
ILabelOptions.prototype.fontFamily;
 /** @type {number} */
ILabelOptions.prototype.precision;
/**
 * @record
 * @struct
 */
function IRange() {}
 /** @type {number} */
IRange.prototype.min;
 /** @type {number} */
IRange.prototype.max;
/**
 * @record
 * @struct
 */
function IHorizontalLine() {}
 /** @type {number} */
IHorizontalLine.prototype.value;
 /** @type {string} */
IHorizontalLine.prototype.color;
 /** @type {number} */
IHorizontalLine.prototype.lineWidth;
/**
 * @record
 * @struct
 */
function IChartOptions() {}
 /** @type {number} */
IChartOptions.prototype.minValue;
 /** @type {number} */
IChartOptions.prototype.maxValue;
 /** @type {number} */
IChartOptions.prototype.maxValueScale;
 /** @type {?} */
IChartOptions.prototype.yRangeFunction;
 /** @type {number} */
IChartOptions.prototype.scaleSmoothing;
 /** @type {number} */
IChartOptions.prototype.millisPerPixel;
 /** @type {boolean} */
IChartOptions.prototype.enableDpiScaling;
 /** @type {?} */
IChartOptions.prototype.yMinFormatter;
 /** @type {?} */
IChartOptions.prototype.yMaxFormatter;
 /** @type {number} */
IChartOptions.prototype.maxDataSetLength;
 /** @type {string} */
IChartOptions.prototype.interpolation;
 /** @type {?} */
IChartOptions.prototype.timestampFormatter;
 /** @type {!Array<?>} */
IChartOptions.prototype.horizontalLines;
 /** @type {?} */
IChartOptions.prototype.grid;
 /** @type {?} */
IChartOptions.prototype.labels;

/**
 * @constructor
 * @struct
 * @param {?=} chartOptions
 */
function SmoothieChart(chartOptions) {}
 /** @type {?} */
SmoothieChart.prototype.options;

/**
 * Adds a <code>TimeSeries</code> to this chart, with optional presentation options.
 * @param {!TimeSeries} series
 * @param {?=} seriesOptions
 * @return {void}
 */
SmoothieChart.prototype.addTimeSeries = function(series, seriesOptions) {};

/**
 * Removes the specified <code>TimeSeries</code> from the chart.
 * @param {!TimeSeries} series
 * @return {void}
 */
SmoothieChart.prototype.removeTimeSeries = function(series) {};

/**
 * Gets render options for the specified <code>TimeSeries</code>.
 * 
 * As you may use a single <code>TimeSeries</code> in multiple charts with different formatting in each usage,
 * these settings are stored in the chart.
 * @param {!TimeSeries} timeSeries
 * @return {?}
 */
SmoothieChart.prototype.getTimeSeriesOptions = function(timeSeries) {};

/**
 * Brings the specified <code>TimeSeries</code> to the top of the chart. It will be rendered last.
 * @param {!TimeSeries} timeSeries
 * @return {void}
 */
SmoothieChart.prototype.bringToFront = function(timeSeries) {};

/**
 * Instructs the <code>SmoothieChart</code> to start rendering to the provided canvas, with specified delay.
 * 
 * @param {!HTMLCanvasElement} canvas the target canvas element
 * @param {number=} delayMillis an amount of time to wait before a data point is shown. This can prevent the end of the series
 * from appearing on screen, with new values flashing into view, at the expense of some latency.
 * @return {void}
 */
SmoothieChart.prototype.streamTo = function(canvas, delayMillis) {};

/**
 * Starts the animation of this chart. Called by <code>streamTo</code>.
 * @return {void}
 */
SmoothieChart.prototype.start = function() {};

/**
 * Stops the animation of this chart.
 * @return {void}
 */
SmoothieChart.prototype.stop = function() {};

/**
 * @return {void}
 */
SmoothieChart.prototype.updateValueRange = function() {};

/**
 * @param {!HTMLCanvasElement=} canvas
 * @param {number=} time
 * @return {void}
 */
SmoothieChart.prototype.render = function(canvas, time) {};

/**
 * @param {!Date} date
 * @return {string}
 */
SmoothieChart.timeFormatter = function(date) {};
