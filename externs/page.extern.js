/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/page/index.d.ts:
/** @const */
var PageJS = {};
/**
 * @record
 * @struct
 */
PageJS.Static = function() {};
 /** @type {!PageJS.Route} */
PageJS.Static.prototype.Route;
 /** @type {!PageJS.Context} */
PageJS.Static.prototype.Context;

/* TODO: CallSignature: PageJS */

/* TODO: CallSignature: PageJS */

/* TODO: CallSignature: PageJS */

/* TODO: CallSignature: PageJS */

/* TODO: CallSignature: PageJS */

/* TODO: CallSignature: PageJS */

/* TODO: CallSignature: PageJS */

/**
 * Identical to page(fromPath, toPath)
 *  Calling page.redirect with only a string as the first parameter redirects to another route. Waits for the current route to push state and after replaces it with the new one leaving the browser history clean.
 * 
 *      page('/default', function(){
 *        // some logic to decide which route to redirect to
 *        if(admin) {
 *          page.redirect('/admin');
 *        } else {
 *          page.redirect('/guest');
 *        }
 *      });
 * 
 *      page('/default');
 * 
 * @param {string} fromPath_or_page
 * @param {string=} toPath
 * @return {void}
 */
PageJS.Static.prototype.redirect = function(fromPath_or_page, toPath) {};

/**
 * Replace `path` with optional `state` object.
 * 
 * @param {string} path
 * @param {?=} state
 * @param {boolean=} init
 * @param {boolean=} dispatch
 * @return {!PageJS.Context}
 */
PageJS.Static.prototype.replace = function(path, state, init, dispatch) {};

/**
 *  Navigate to the given path.
 * 
 *      $('.view').click(function(e){
 *        page('/user/12')
 *        e.preventDefault()
 *      })
 * 
 * Identical to page(path).
 * @param {string} path
 * @return {void}
 */
PageJS.Static.prototype.show = function(path) {};

/**
 * Register page's popstate / click bindings. If you're doing selective binding you'll like want to pass { click: false } to specify this yourself. The following options are available:
 * 
 *     - click bind to click events [true]
 *     - popstate bind to popstate[true]
 *     - dispatch perform initial dispatch[true]
 *     - hashbang add #!before urls[false]
 * 
 * If you wish to load serve initial content from the server you likely will want to set dispatch to false.
 * 
 * Identical to page([options]).
 * Register page's popstate / click bindings. If you're doing selective binding you'll like want to pass { click: false } to specify this yourself. The following options are available:
 * 
 *     - click bind to click events [true]
 *     - popstate bind to popstate[true]
 *     - dispatch perform initial dispatch[true]
 *     - hashbang add #!before urls[false]
 * 
 * If you wish to load serve initial content from the server you likely will want to set dispatch to false.
 * @param {!PageJS.Options=} options
 * @return {void}
 */
PageJS.Static.prototype.start = function(options) {};

/**
 * Unbind both the popstate and click handlers.
 * @return {void}
 */
PageJS.Static.prototype.stop = function() {};

/**
 * Get or set the base path. For example if page.js is operating within /blog/* set the base path to "/blog".
 * @param {string=} path
 * @return {void}
 */
PageJS.Static.prototype.base = function(path) {};

/**
 * Defines an exit route mapping path to the given callback(s).
 * 
 * Exit routes are called when a page changes, using the context from the previous change. For example:
 * 
 *     page('/sidebar', function(ctx, next) {
 *       sidebar.open = true
 *       next()
 *     })
 * 
 *     page.exit('/sidebar', function(next) {
 *       sidebar.open = false
 *       next()
 *     })
 * Equivalent to page.exit('*', callback).
 * @param {string|!PageJS.Callback} path_or_callback
 * @param {!PageJS.Callback=} callback
 * @param {!Array<!PageJS.Callback>=} moreCallbacks
 * @return {void}
 */
PageJS.Static.prototype.exit = function(path_or_callback, callback, moreCallbacks) {};
/**
 * @record
 * @struct
 */
PageJS.Route = function() {};

/* TODO: ConstructSignature: PageJS */

/**
 * Return route middleware with the given callback `fn()`.
 * @param {!PageJS.Callback} fn
 * @return {!PageJS.Callback}
 */
PageJS.Route.prototype.middleware = function(fn) {};

/**
 * Check if this route matches `path`, if so populate `params`.
 * @param {string} path
 * @param {!Object=} params
 * @return {boolean}
 */
PageJS.Route.prototype.match = function(path, params) {};
/**
 * @record
 * @struct
 */
PageJS.RouteOptions = function() {};
 /** @type {boolean} */
PageJS.RouteOptions.prototype.sensitive;
 /** @type {boolean} */
PageJS.RouteOptions.prototype.strict;
/**
 * @record
 * @struct
 */
PageJS.Options = function() {};
 /** @type {boolean} */
PageJS.Options.prototype.click;
 /** @type {boolean} */
PageJS.Options.prototype.popstate;
 /** @type {boolean} */
PageJS.Options.prototype.dispatch;
 /** @type {boolean} */
PageJS.Options.prototype.hashbang;
/**
 * @record
 * @struct
 */
PageJS.Callback = function() {};

/* TODO: CallSignature: PageJS */
/**
 * @record
 * @struct
 */
PageJS.Context = function() {};

/* TODO: ConstructSignature: PageJS */

/* TODO: IndexSignature: PageJS */
 /** @type {function(): void} */
PageJS.Context.prototype.save;
 /** @type {function(): void} */
PageJS.Context.prototype.pushState;
 /** @type {boolean} */
PageJS.Context.prototype.handled;
 /** @type {string} */
PageJS.Context.prototype.canonicalPath;
 /** @type {string} */
PageJS.Context.prototype.path;
 /** @type {string} */
PageJS.Context.prototype.querystring;
 /** @type {string} */
PageJS.Context.prototype.pathname;
 /** @type {?} */
PageJS.Context.prototype.state;
 /** @type {string} */
PageJS.Context.prototype.title;
 /** @type {?} */
PageJS.Context.prototype.params;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "page"
/** @const */
tsickle_declare_module.page = {};
 /** @type {!PageJS.Static} */
tsickle_declare_module.page.page;

/* TODO: ExportAssignment in tsickle_declare_module.page */
 /** @type {!PageJS.Static} */
var page;
