/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/valerie/index.d.ts:

/**
 * @param {!Valerie.ValidationOptions=} validationOptions
 * @return {!Valerie.PropertyValidationState<!KnockoutObservable>}
 */
KnockoutObservable.prototype.validate = function(validationOptions) {};

/**
 * @param {!Valerie.ValidationOptions=} validationOptions
 * @return {!Valerie.PropertyValidationState<!KnockoutComputed>}
 */
KnockoutComputed.prototype.validate = function(validationOptions) {};

/**
 * @param {!Valerie.ValidationOptions=} validationOptions
 * @return {!Valerie.PropertyValidationState<!KnockoutObservableArray>}
 */
KnockoutObservableArray.prototype.validate = function(validationOptions) {};

/**
 * Creates and sets a model validation state on a Knockout observable array.<br/>
 * <i>[fluent]</i>
 * \@name ko.observableArray#validateAsModel
 * \@method
 * \@fluent 
 * validation state
 * @return {!Valerie.ValidatableModel<!KnockoutObservableArray<T>>}
 */
KnockoutObservableArrayFunctions.prototype.validateAsModel = function() {};
 /** @type {!KnockoutBindingHandler} */
KnockoutBindingHandlers.prototype.validatedChecked;
 /** @type {!KnockoutBindingHandler} */
KnockoutBindingHandlers.prototype.validatedSelectedOptions;
 /** @type {!KnockoutBindingHandler} */
KnockoutBindingHandlers.prototype.validatedValue;
 /** @type {!KnockoutBindingHandler} */
KnockoutBindingHandlers.prototype.disabledWhenNotValid;
 /** @type {!KnockoutBindingHandler} */
KnockoutBindingHandlers.prototype.disabledWhenTouchedAndNotValid;
 /** @type {!KnockoutBindingHandler} */
KnockoutBindingHandlers.prototype.enabledWhenApplicable;
 /** @type {!KnockoutBindingHandler} */
KnockoutBindingHandlers.prototype.formattedText;
 /** @type {!KnockoutBindingHandler} */
KnockoutBindingHandlers.prototype.validationCss;
 /** @type {!KnockoutBindingHandler} */
KnockoutBindingHandlers.prototype.validationMessage;
 /** @type {!KnockoutBindingHandler} */
KnockoutBindingHandlers.prototype.validationMessageText;
 /** @type {!KnockoutBindingHandler} */
KnockoutBindingHandlers.prototype.validationName;
 /** @type {!KnockoutBindingHandler} */
KnockoutBindingHandlers.prototype.visibleWhenApplicable;
 /** @type {!KnockoutBindingHandler} */
KnockoutBindingHandlers.prototype.visibleWhenFocused;
 /** @type {!KnockoutBindingHandler} */
KnockoutBindingHandlers.prototype.visibleWhenInvalid;
 /** @type {!KnockoutBindingHandler} */
KnockoutBindingHandlers.prototype.visibleWhenSummaryNotEmpty;
 /** @type {!KnockoutBindingHandler} */
KnockoutBindingHandlers.prototype.visibleWhenTouched;
 /** @type {!KnockoutBindingHandler} */
KnockoutBindingHandlers.prototype.visibleWhenUntouched;
 /** @type {!KnockoutBindingHandler} */
KnockoutBindingHandlers.prototype.visibleWhenValid;
 /** @type {!Valerie.Static} */
var valerie;
/** @const */
var Valerie = {};
/**
 * @record
 * @struct
 */
Valerie.Static = function() {};
 /** @type {!Valerie.ValidationResultStatic} */
Valerie.Static.prototype.ValidationResult;
 /** @type {!Valerie.ConvertersStatic} */
Valerie.Static.prototype.converters;
 /** @type {!Valerie.UtilsStatic} */
Valerie.Static.prototype.utils;
 /** @type {!Valerie.ValidationState} */
Valerie.Static.prototype.validationState;

/**
 * Maps a source model to a destination model, including only applicable properties
 * @param {?} sourceModel
 * @return {?}
 */
Valerie.Static.prototype.mapApplicableModel = function(sourceModel) {};

/**
 * Maps a source model to a destination model.
 * property is unwrapped, the result of which determines if the property is included in the destination model
 * model property is unwrapped, the result of which determines if the property is included in the destination model
 * @param {?} sourceModel
 * @param {!Valerie.IncludePropertyCallback=} includeWrappedFunction
 * @param {!Valerie.IncludePropertyCallback=} includeUnwrappedFunction
 * @return {?}
 */
Valerie.Static.prototype.mapModel = function(sourceModel, includeWrappedFunction, includeUnwrappedFunction) {};

/**
 * Makes the passed-in model validatable. After invocation the model will have a validation state.
 * <br/><b>fluent</b>
 * state
 * @param {?} model
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.ModelValidationState}
 */
Valerie.Static.prototype.validatableModel = function(model, options) {};

/**
 * @template T
 * @param {T} value
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState<T>}
 */
Valerie.Static.prototype.validatableProperty = function(value, options) {};
/**
 * @record
 * @struct
 */
Valerie.ValidationResultStatic = function() {};
 /** @type {!Valerie.ValidationResult} */
Valerie.ValidationResultStatic.prototype.passedInstance;

/**
 * @param {string} message
 * @return {!Valerie.ValidationResult}
 */
Valerie.ValidationResultStatic.prototype.createFailedResult = function(message) {};
/**
 * @record
 * @struct
 */
Valerie.ConvertersStatic = function() {};
 /** @type {!Valerie.IConverter} */
Valerie.ConvertersStatic.prototype.passThrough;
/**
 * @record
 * @struct
 */
Valerie.UtilsStatic = function() {};

/**
 * @template T
 * @param {?} value
 * @return {!Array<?>}
 */
Valerie.UtilsStatic.prototype.asArray = function(value) {};

/**
 * @template T
 * @param {T|function(): T} value_or_fn
 * @return {function(): T}
 */
Valerie.UtilsStatic.prototype.asFunction = function(value_or_fn) {};

/**
 * @param {?} value
 * @return {boolean}
 */
Valerie.UtilsStatic.prototype.isArray = function(value) {};

/**
 * @param {?} value
 * @return {boolean}
 */
Valerie.UtilsStatic.prototype.isArrayOrObject = function(value) {};

/**
 * @param {?} value
 * @return {boolean}
 */
Valerie.UtilsStatic.prototype.isFunction = function(value) {};

/**
 * @param {?} value
 * @return {boolean}
 */
Valerie.UtilsStatic.prototype.isMissing = function(value) {};

/**
 * @param {?} value
 * @return {boolean}
 */
Valerie.UtilsStatic.prototype.isObject = function(value) {};

/**
 * @param {?} value
 * @return {boolean}
 */
Valerie.UtilsStatic.prototype.isString = function(value) {};

/**
 * @param {!Valerie.ValidationOptions} defaultOptions
 * @param {?} options
 * @return {!Valerie.ValidationOptions}
 */
Valerie.UtilsStatic.prototype.mergeOptions = function(defaultOptions, options) {};
/**
 * @record
 * @struct
 */
Valerie.IncludePropertyCallback = function() {};

/* TODO: CallSignature: Valerie */
/**
 * @record
 * @struct
 */
Valerie.ModelValidationState = function() {};
 /** @type {function(?, !Valerie.ModelValidationStateOptions): !Valerie.ModelValidationState} */
Valerie.ModelValidationState.prototype.new;
 /** @type {?} */
Valerie.ModelValidationState.prototype.model;
 /** @type {!Valerie.ModelValidationStateOptions} */
Valerie.ModelValidationState.prototype.options;

/**
 * Adds validation states to this validation state.<br/>
 * <i>[fluent]</i>
 * \@name valerie.ModelValidationState#addValidationStates
 * \@fluent
 * @param {?} validationStateOrStates
 * @return {!Valerie.ModelValidationState}
 */
Valerie.ModelValidationState.prototype.addValidationStates = function(validationStateOrStates) {};

/**
 * Sets the value or function used to determine if the model is applicable.<br/>
 * <i>[fluent]</i>
 * \@name valerie.ModelValidationState#applicable
 * \@fluent
 * @param {?} valueOrFunction
 * @return {!Valerie.ModelValidationState}
 */
Valerie.ModelValidationState.prototype.applicable = function(valueOrFunction) {};

/**
 * Clears the static summary of validation states that are in a failure state.<br/>
 * <i>[fluent]</i>
 * \@name valerie.ModelValidationState#clearSummary
 * \@fluent
 * @param {?} valueOrFunction
 * @return {!Valerie.ModelValidationState}
 */
Valerie.ModelValidationState.prototype.clearSummary = function(valueOrFunction) {};

/**
 * 
 * Gets whether the model has failed validation.
 * @return {boolean}
 */
Valerie.ModelValidationState.prototype.failed = function() {};

/**
 * 
 * Gets the validation states that belong to the model that are in a failure state.
 * @return {!Array<!Valerie.IValidationState>}
 */
Valerie.ModelValidationState.prototype.failedStates = function() {};

/**
 * 
 * Gets the name of the model.
 * @return {string}
 */
Valerie.ModelValidationState.prototype.getName = function() {};

/**
 * @return {boolean}
 */
Valerie.ModelValidationState.prototype.isApplicable = function() {};

/**
 * @return {string}
 */
Valerie.ModelValidationState.prototype.message = function() {};

/**
 * @return {boolean}
 */
Valerie.ModelValidationState.prototype.passed = function() {};

/**
 * 
 * Gets or sets whether the computation that updates the validation result has been paused.
 * @param {boolean} value
 * @return {boolean}
 */
Valerie.ModelValidationState.prototype.paused = function(value) {};

/**
 * @return {boolean}
 */
Valerie.ModelValidationState.prototype.pending = function() {};

/**
 * @return {!Array<!Valerie.IValidationState>}
 */
Valerie.ModelValidationState.prototype.pendingStates = function() {};

/**
 * @return {void}
 */
Valerie.ModelValidationState.prototype.refresh = function() {};

/**
 * @return {!Valerie.ValidationResult}
 */
Valerie.ModelValidationState.prototype.result = function() {};

/**
 * @return {!Array<!Valerie.summaryItem>}
 */
Valerie.ModelValidationState.prototype.summary = function() {};

/**
 * 
 * Gets or sets whether the model has been 'touched' by user action
 * @param {boolean} value
 * @return {boolean}
 */
Valerie.ModelValidationState.prototype.touched = function(value) {};

/**
 * @return {!Array<!Valerie.IValidationState>}
 */
Valerie.ModelValidationState.prototype.validationStates = function() {};

/**
 * Includes any validation failures for this model in a validation summary.<br/>
 * <i>[fluent]</i>
 * \@fluent
 * @return {!Valerie.ModelValidationState}
 */
Valerie.ModelValidationState.prototype.includeInSummary = function() {};

/**
 * Sets the value or function used to determine the name of the model.<br/>
 * <i>[fluent]</i>
 * \@fluent
 * @param {?} valueOrFunction
 * @return {!Valerie.ModelValidationState}
 */
Valerie.ModelValidationState.prototype.name = function(valueOrFunction) {};

/**
 * Removes validation states.<br/>
 * <i>[fluent]</i>
 * \@fluent
 * @param {?} validationStateOrStates
 * @return {!Valerie.ModelValidationState}
 */
Valerie.ModelValidationState.prototype.removeValidationStates = function(validationStateOrStates) {};

/**
 * Stops validating the given sub-model by adding the validation state that belongs to it.
 * @param {?} validatableSubModel
 * @return {!Valerie.ModelValidationState}
 */
Valerie.ModelValidationState.prototype.startValidatingSubModel = function(validatableSubModel) {};

/**
 * Stops validating the given sub-model by removing the validation state that belongs to it.
 * @param {?} validatableSubModel
 * @return {!Valerie.ModelValidationState}
 */
Valerie.ModelValidationState.prototype.stopValidatingSubModel = function(validatableSubModel) {};

/**
 * Updates the static summary of validation states that are in a failure state.<br/>
 * <i>[fluent]</i>
 * \@fluent
 * @param {boolean} updateSubModelSummaries
 * @return {!Valerie.ModelValidationState}
 */
Valerie.ModelValidationState.prototype.updateSummary = function(updateSubModelSummaries) {};

/**
 * Adds the validation states for all the descendant properties and sub-models that belong to the model.<br/>
 * <i>[fluent]</i>
 * \@fluent
 * @return {!Valerie.ModelValidationState}
 */
Valerie.ModelValidationState.prototype.validateAll = function() {};

/**
 * Adds the validation states for all the descendant properties that belong to the model.<br/>
 * <i>[fluent]</i>
 * \@fluent
 * @return {!Valerie.ModelValidationState}
 */
Valerie.ModelValidationState.prototype.validateAllProperties = function() {};

/**
 * Adds the validation states for all the child properties that belong to the model.<br/>
 * <i>[fluent]</i>
 * \@fluent
 * @return {!Valerie.ModelValidationState}
 */
Valerie.ModelValidationState.prototype.validateChildProperties = function() {};

/**
 * Adds the validation states for all the child properties and sub-models that belong to the model.<br/>
 * <i>[fluent]</i>
 * \@fluent
 * @return {!Valerie.ModelValidationState}
 */
Valerie.ModelValidationState.prototype.validateChildPropertiesAndSubModels = function() {};

/**
 * Ends a chain of fluent method calls on this model validation state.
 * @return {?}
 */
Valerie.ModelValidationState.prototype.end = function() {};
/**
 * @record
 * @struct
 */
Valerie.ModelValidationStateOptions = function() {};
 /** @type {boolean} */
Valerie.ModelValidationStateOptions.prototype.excludeFromSummary;
 /** @type {string} */
Valerie.ModelValidationStateOptions.prototype.failureMessage;

/**
 * @return {boolean}
 */
Valerie.ModelValidationStateOptions.prototype.applicable = function() {};

/**
 * @return {string}
 */
Valerie.ModelValidationStateOptions.prototype.name = function() {};

/**
 * @return {boolean}
 */
Valerie.ModelValidationStateOptions.prototype.paused = function() {};
/**
 * @record
 * @struct
 */
Valerie.PropertyValidationState = function() {};
 /** @type {T} */
Valerie.PropertyValidationState.prototype.observableOrComputed;
 /** @type {!Valerie.ValidationOptions} */
Valerie.PropertyValidationState.prototype.options;

/**
 * Adds a rule to the chain of rules used to validate the property's value.<br/>
 * <i>[fluent]</i>
 * \@fluent
 * @param {!Valerie.IRule} rule
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.addRule = function(rule) {};

/**
 * @param {boolean|function(): boolean} value_or_fn
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.applicable = function(value_or_fn) {};

/**
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.currencyMajor = function(options) {};

/**
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.currencyMajorMinor = function(options) {};

/**
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.date = function() {};

/**
 * @param {!Date|function(): !Date} earliest
 * @param {!Date|function(): !Date} latest
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.during = function(earliest, latest, options) {};

/**
 * @param {!Date|function(): !Date} earliest
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.earliest = function(earliest, options) {};

/**
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.email = function() {};

/**
 * @param {string} format
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.entryFormat = function(format) {};

/**
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.excludeFromSummary = function() {};

/**
 * @param {!RegExp|string} regularExpression_or_regularExpressionString
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.expression = function(regularExpression_or_regularExpressionString, options) {};

/**
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.float = function(options) {};

/**
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.integer = function(options) {};

/**
 * @param {!Date|function(): !Date} latestValueOrFunction
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.latest = function(latestValueOrFunction, options) {};

/**
 * @param {number|function(): number} shortest
 * @param {number|function(): number} longest
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.lengthBetween = function(shortest, longest, options) {};

/**
 * @param {?|function(): ?} permitted
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.matches = function(permitted, options) {};

/**
 * @param {?|function(): ?} maximum
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.maximum = function(maximum, options) {};

/**
 * @param {number|function(): number} longest
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.maximumLength = function(longest, options) {};

/**
 * @param {number|function(): number} maximum
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.maximumNumberOfItems = function(maximum, options) {};

/**
 * @param {?} minimumValueOrFunction
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.minimum = function(minimumValueOrFunction, options) {};

/**
 * @param {number|function(): number} shortest
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.minimumLength = function(shortest, options) {};

/**
 * @param {number|function(): number} minimum
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.minimumNumberOfItems = function(minimum, options) {};

/**
 * @param {string|function(): string} value
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.name = function(value) {};

/**
 * @param {!Array<?>|function(): !Array<?>} forbiddenValues
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.noneOf = function(forbiddenValues, options) {};

/**
 * @param {?} forbiddenValueOrFunction
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.not = function(forbiddenValueOrFunction, options) {};

/**
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.number = function() {};

/**
 * @param {?} minimumValueOrFunction
 * @param {?} maximumValueOrFunction
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.numberOfItems = function(minimumValueOrFunction, maximumValueOrFunction, options) {};

/**
 * @param {!Array<?>|function(): !Array<?>} permittedValues
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.oneOf = function(permittedValues, options) {};

/**
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.postcode = function() {};

/**
 * @param {?} minimumValueOrFunction
 * @param {?} maximumValueOrFunction
 * @param {!Valerie.ValidationOptions=} options
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.range = function(minimumValueOrFunction, maximumValueOrFunction, options) {};

/**
 * @param {?=} valueOrFunction
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.required = function(valueOrFunction) {};

/**
 * @param {function(): ?} testFunction
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.rule = function(testFunction) {};

/**
 * @param {string} failureMessageFormat
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.ruleMessage = function(failureMessageFormat) {};

/**
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.string = function() {};

/**
 * @param {string} format
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.valueFormat = function(format) {};

/**
 * @return {!Valerie.PropertyValidationState}
 */
Valerie.PropertyValidationState.prototype.validateChildProperties = function() {};

/**
 * @return {T}
 */
Valerie.PropertyValidationState.prototype.end = function() {};

/**
 * @return {boolean}
 */
Valerie.PropertyValidationState.prototype.failed = function() {};

/**
 * @return {string}
 */
Valerie.PropertyValidationState.prototype.getName = function() {};

/**
 * @return {boolean}
 */
Valerie.PropertyValidationState.prototype.isApplicable = function() {};

/**
 * @return {boolean}
 */
Valerie.PropertyValidationState.prototype.isRequired = function() {};

/**
 * @return {string}
 */
Valerie.PropertyValidationState.prototype.message = function() {};

/**
 * @return {boolean}
 */
Valerie.PropertyValidationState.prototype.passed = function() {};

/**
 * @return {boolean}
 */
Valerie.PropertyValidationState.prototype.pending = function() {};

/**
 * @return {boolean}
 */
Valerie.PropertyValidationState.prototype.showMessage = function() {};

/**
 * @param {boolean=} value
 * @return {boolean}
 */
Valerie.PropertyValidationState.prototype.touched = function(value) {};

/**
 * @return {!Valerie.ValidationResult}
 */
Valerie.PropertyValidationState.prototype.result = function() {};
/**
 * @record
 * @struct
 */
Valerie.ValidationResult = function() {};
 /** @type {?} */
Valerie.ValidationResult.prototype.state;
 /** @type {boolean} */
Valerie.ValidationResult.prototype.failed;
 /** @type {boolean} */
Valerie.ValidationResult.prototype.passed;
 /** @type {boolean} */
Valerie.ValidationResult.prototype.pending;
 /** @type {string} */
Valerie.ValidationResult.prototype.message;
 /** @type {function(?, string): !Valerie.ValidationResult} */
Valerie.ValidationResult.prototype.new;
/**
 * @record
 * @struct
 */
Valerie.IRule = function() {};
 /** @type {!Valerie.ValidationOptions} */
Valerie.IRule.prototype.defaultOptions;

/**
 * @param {?} value
 * @return {!Valerie.ValidationResult}
 */
Valerie.IRule.prototype.test = function(value) {};
/**
 * @record
 * @struct
 */
Valerie.IValidationState = function() {};

/**
 * @return {boolean}
 */
Valerie.IValidationState.prototype.failed = function() {};

/**
 * @return {string}
 */
Valerie.IValidationState.prototype.getName = function() {};

/**
 * @return {boolean}
 */
Valerie.IValidationState.prototype.isApplicable = function() {};

/**
 * @return {string}
 */
Valerie.IValidationState.prototype.message = function() {};

/**
 * @return {boolean}
 */
Valerie.IValidationState.prototype.passed = function() {};

/**
 * @return {boolean}
 */
Valerie.IValidationState.prototype.pending = function() {};

/**
 * @return {!Valerie.ValidationResult}
 */
Valerie.IValidationState.prototype.result = function() {};

/**
 * @param {boolean=} value
 * @return {boolean}
 */
Valerie.IValidationState.prototype.touched = function(value) {};
/**
 * @record
 * @struct
 */
Valerie.ValidatableModel = function() {};
 /** @type {function(string): !Valerie.PropertyValidationState<T>} */
Valerie.ValidatableModel.prototype.name;
 /** @type {function(): T} */
Valerie.ValidatableModel.prototype.end;
/**
 * @record
 * @struct
 */
Valerie.ValidationOptions = function() {};
 /** @type {!Valerie.IConverter} */
Valerie.ValidationOptions.prototype.converter;
 /** @type {string} */
Valerie.ValidationOptions.prototype.entryFormat;
 /** @type {boolean} */
Valerie.ValidationOptions.prototype.excludeFromSummary;
 /** @type {string} */
Valerie.ValidationOptions.prototype.invalidFailureMessage;
 /** @type {string} */
Valerie.ValidationOptions.prototype.missingFailureMessage;
 /** @type {function(): ?} */
Valerie.ValidationOptions.prototype.name;
 /** @type {function(): ?} */
Valerie.ValidationOptions.prototype.required;
 /** @type {?} */
Valerie.ValidationOptions.prototype.rules;
 /** @type {string} */
Valerie.ValidationOptions.prototype.valueFormat;

/**
 * @return {?}
 */
Valerie.ValidationOptions.prototype.applicable = function() {};
/**
 * @record
 * @struct
 */
Valerie.IConverter = function() {};
 /** @type {function(?, string): string} */
Valerie.IConverter.prototype.format;
 /** @type {function(string): ?} */
Valerie.IConverter.prototype.parse;
/**
 * @record
 * @struct
 */
Valerie.NumericHelper = function() {};

/**
 * @param {string} numericString
 * @return {string}
 */
Valerie.NumericHelper.prototype.addThousandsSeparator = function(numericString) {};

/**
 * @param {number} value
 * @param {string} format
 * @return {string}
 */
Valerie.NumericHelper.prototype.format = function(value, format) {};

/**
 * @param {string} decimalSeparator
 * @param {string} thousandsSeparator
 * @param {string} currencySign
 * @param {number} currencyMinorUnitPlaces
 * @return {!Valerie.NumericHelper}
 */
Valerie.NumericHelper.prototype.init = function(decimalSeparator, thousandsSeparator, currencySign, currencyMinorUnitPlaces) {};

/**
 * @param {string} numericString
 * @return {boolean}
 */
Valerie.NumericHelper.prototype.isCurrencyMajor = function(numericString) {};

/**
 * @param {string} numericString
 * @return {boolean}
 */
Valerie.NumericHelper.prototype.isCurrencyMajorMinor = function(numericString) {};

/**
 * @param {string} numericString
 * @return {boolean}
 */
Valerie.NumericHelper.prototype.isFloat = function(numericString) {};

/**
 * @param {string} numericString
 * @return {boolean}
 */
Valerie.NumericHelper.prototype.isInteger = function(numericString) {};

/**
 * @param {string} numericString
 * @return {number}
 */
Valerie.NumericHelper.prototype.parse = function(numericString) {};

/**
 * @param {string} numericString
 * @return {string}
 */
Valerie.NumericHelper.prototype.unformat = function(numericString) {};
/**
 * @record
 * @struct
 */
Valerie.ValidationState = function() {};

/**
 * @param {?} model
 * @param {boolean=} includeSubModels
 * @param {boolean=} recurse
 * @param {!Array<!Valerie.IValidationState>=} validationStates
 * @return {!Array<!Valerie.IValidationState>}
 */
Valerie.ValidationState.prototype.findIn = function(model, includeSubModels, recurse, validationStates) {};

/**
 * @param {?} modelOrObservableOrComputed
 * @return {!Valerie.IValidationState}
 */
Valerie.ValidationState.prototype.getFor = function(modelOrObservableOrComputed) {};

/**
 * @param {?} modelOrObservableOrComputed
 * @return {boolean}
 */
Valerie.ValidationState.prototype.has = function(modelOrObservableOrComputed) {};

/**
 * @param {?} modelOrObservableOrComputed
 * @param {!Valerie.IValidationState} state
 * @return {void}
 */
Valerie.ValidationState.prototype.setFor = function(modelOrObservableOrComputed, state) {};
/**
 * @record
 * @struct
 */
Valerie.summaryItem = function() {};
 /** @type {string} */
Valerie.summaryItem.prototype.name;
 /** @type {string} */
Valerie.summaryItem.prototype.message;
/** @const */
Valerie.Rules = {};
