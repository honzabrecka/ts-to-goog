/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cordova-plugin-file-transfer/index.d.ts:
/**
 * @record
 * @struct
 */
function FileTransfer() {}
 /** @type {function(!ProgressEvent): void} */
FileTransfer.prototype.onprogress;

/**
 * Sends a file to a server.
 * @param {string} fileURL           Filesystem URL representing the file on the device. For backwards compatibility,
 *                                this can also be the full path of the file on the device.
 * @param {string} server            URL of the server to receive the file, as encoded by encodeURI().
 * @param {function(!FileUploadResult): void} successCallback   A callback that is passed a FileUploadResult object.
 * @param {function(?): void} errorCallback     A callback that executes if an error occurs retrieving the FileUploadResult.
 *                               Invoked with a FileTransferError object.
 * @param {!FileUploadOptions=} options           Optional parameters.
 * @param {boolean=} trustAllHosts     Optional parameter, defaults to false. If set to true, it accepts all security certificates.
 *                               This is useful since Android rejects self-signed security certificates.
 *                               Not recommended for production use. Supported on Android and iOS.
 * @return {void}
 */
FileTransfer.prototype.upload = function(fileURL, server, successCallback, errorCallback, options, trustAllHosts) {};

/**
 * downloads a file from server.
 * @param {string} source            URL of the server to download the file, as encoded by encodeURI().
 * @param {string} target            Filesystem url representing the file on the device. For backwards compatibility,
 *                               this can also be the full path of the file on the device.
 * @param {function(!FileEntry): void} successCallback   A callback that is passed a FileEntry object. (Function)
 * @param {function(?): void} errorCallback     A callback that executes if an error occurs when retrieving the fileEntry.
 *                               Invoked with a FileTransferError object.
 * @param {boolean=} trustAllHosts     Optional parameter, defaults to false. If set to true, it accepts all security certificates.
 *                               This is useful since Android rejects self-signed security certificates.
 *                               Not recommended for production use. Supported on Android and iOS.
 * @param {!FileDownloadOptions=} options           Optional parameters.
 * @return {void}
 */
FileTransfer.prototype.download = function(source, target, successCallback, errorCallback, trustAllHosts, options) {};

/**
 * Aborts an in-progress transfer. The onerror callback is passed a FileTransferError object
 * which has an error code of FileTransferError.ABORT_ERR.
 * @return {void}
 */
FileTransfer.prototype.abort = function() {};
 /** @type {function(new: (?)): ?} */
var FileTransfer;
/**
 * @record
 * @struct
 */
function FileUploadResult() {}
 /** @type {number} */
FileUploadResult.prototype.bytesSent;
 /** @type {number} */
FileUploadResult.prototype.responseCode;
 /** @type {string} */
FileUploadResult.prototype.response;
 /** @type {?} */
FileUploadResult.prototype.headers;
/**
 * @record
 * @struct
 */
function FileUploadOptions() {}
 /** @type {string} */
FileUploadOptions.prototype.fileKey;
 /** @type {string} */
FileUploadOptions.prototype.fileName;
 /** @type {string} */
FileUploadOptions.prototype.httpMethod;
 /** @type {string} */
FileUploadOptions.prototype.mimeType;
 /** @type {!Object} */
FileUploadOptions.prototype.params;
 /** @type {boolean} */
FileUploadOptions.prototype.chunkedMode;
 /** @type {!Object} */
FileUploadOptions.prototype.headers;
/**
 * @record
 * @struct
 */
function FileDownloadOptions() {}
 /** @type {!Object} */
FileDownloadOptions.prototype.headers;
/**
 * @record
 * @struct
 */
function FileTransferError() {}
 /** @type {number} */
FileTransferError.prototype.code;
 /** @type {string} */
FileTransferError.prototype.source;
 /** @type {string} */
FileTransferError.prototype.target;
 /** @type {number} */
FileTransferError.prototype.http_status;
 /** @type {string} */
FileTransferError.prototype.body;
 /** @type {?} */
FileTransferError.prototype.exception;
 /** @type {function(new: (?), number, string, string, number, ?, ?): ?} */
var FileTransferError;
