/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/moo/index.d.ts:

/* TODO: NamespaceExportDeclaration in  */
 /** @type {?} */
var error;

/**
 * @param {?} rules
 * @return {?}
 */
function compile(rules) {}

/**
 * @param {?} states
 * @param {string=} start
 * @return {?}
 */
function states(states, start) {}
/**
 * @record
 * @struct
 */
function Rules() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function Lexer() {}

/**
 * Returns a string with a pretty error message.
 * @param {?} token
 * @param {string=} message
 * @return {string}
 */
Lexer.prototype.formatError = function(token, message) {};

/**
 * Can be used by parsers like nearley to check whether a given token type can be parsed by this lexer.
 * @param {string} tokenType
 * @return {boolean}
 */
Lexer.prototype.has = function(tokenType) {};

/**
 * When you reach the end of Moo's internal buffer, next() will return undefined.
 * You can always reset() it and feed it more data when that happens.
 * @return {?}
 */
Lexer.prototype.next = function() {};

/**
 * Empty the internal buffer of the lexer, and set the line, column, and offset counts back to their initial value.
 * @param {string} chunk
 * @param {?=} state
 * @return {void}
 */
Lexer.prototype.reset = function(chunk, state) {};

/**
 * Returns current state, which you can later pass it as the second argument
 * to reset() to explicitly control the internal state of the lexer.
 * @return {?}
 */
Lexer.prototype.save = function() {};
/**
 * @record
 * @struct
 */
function Token() {}
 /** @type {string} */
Token.prototype.type;
 /** @type {string} */
Token.prototype.value;
 /** @type {number} */
Token.prototype.offset;
 /** @type {number} */
Token.prototype.size;
 /** @type {boolean} */
Token.prototype.lineBreaks;
 /** @type {number} */
Token.prototype.line;
 /** @type {number} */
Token.prototype.col;

/**
 * Returns value of the token, or its type if value isn't available.
 * @return {string}
 */
Token.prototype.toString = function() {};
/**
 * @record
 * @struct
 */
function LexerState() {}
 /** @type {number} */
LexerState.prototype.line;
 /** @type {number} */
LexerState.prototype.col;
 /** @type {string} */
LexerState.prototype.state;
