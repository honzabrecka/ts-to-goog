/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/get-stream/index.d.ts:

/* TODO: ImportDeclaration in  */
/**
 * @record
 * @struct
 */
function Options() {}
 /** @type {string} */
Options.prototype.encoding;
 /** @type {number} */
Options.prototype.maxBuffer;

/**
 * Get the stream as a string.
 * The methods returns a promise that resolves when the end event fires on the
 * stream, indicating that there is no more data to be read.
 * The stream is switched to flowing mode.
 * @param {!internal.Stream} stream
 * @param {?=} options
 * @return {!Promise<string>}
 */
function getStream(stream, options) {}

/**
 * Get the `stream` as an array of values.
 * 
 * It honors both the `maxBuffer` and `encoding` options.
 * The behavior changes slightly based on the encoding chosen:
 * 
 * - When `encoding` is unset, it assumes an [object mode stream](https://nodesource.com/blog/understanding-object-streams/)
 *   and collects values emitted from `stream` unmodified.
 *   In this case `maxBuffer` refers to the number of items in the array
 *   (not the sum of their sizes).
 * 
 * - When `encoding` is set to `buffer`, it collects an array of buffers.
 *   `maxBuffer` refers to the summed byte lengths of every buffer in the array.
 * 
 * - When `encoding` is set to anything else, it collects an array of strings.
 *   `maxBuffer` refers to the summed character lengths of every string in the array.
 * 
 * @template T
 * @param {!internal.Stream} stream
 * @param {?=} options
 * @return {!Promise<!Array<T>>}
 */
getStream.array = function(stream, options) {};

/**
 * Get the stream as a buffer.
 * 
 * It honors the maxBuffer option as above, but it refers to byte length
 * rather than string length.
 * @param {!internal.Stream} stream
 * @param {?=} options
 * @return {!Promise<?>}
 */
getStream.buffer = function(stream, options) {};

/* TODO: ExportAssignment in  */
