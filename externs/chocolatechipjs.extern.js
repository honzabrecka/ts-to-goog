/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/chocolatechipjs/index.d.ts:
/**
 * @record
 * @struct
 */
function ChocolateChipStatic() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */
 /** @type {{extend: function(!Object): !Array<!HTMLElement>}} */
ChocolateChipStatic.prototype.fn;
 /** @type {string} */
ChocolateChipStatic.prototype.version;
 /** @type {string} */
ChocolateChipStatic.prototype.libraryName;
 /** @type {number} */
ChocolateChipStatic.prototype.uuid;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isiPhone;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isiPad;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isiPod;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isiOS;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isAndroid;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isWebOS;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isBlackberry;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isTouchEnabled;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isOnline;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isStandalone;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isiOS6;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isiOS7;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isWin;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isWinPhone;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isIE10;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isIE11;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isWebkit;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isMobile;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isDesktop;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isSafari;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isChrome;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isNativeAndroid;
 /** @type {!Object} */
ChocolateChipStatic.prototype.templates;
 /** @type {?} */
ChocolateChipStatic.prototype.template;
 /** @type {{data: !Object, events: {keys: !Array<?>, values: !Array<?>, set: !Function, hasKey: !Function, _delete: !Function}}} */
ChocolateChipStatic.prototype.chch_cache;

/**
 * Extend the ChocolateChipJS object itself with the provided object.
 * 
 * Extend a target object with another object.
 * 
 * @param {!Object} object_or_target The object to add to ChocolateChipJS. / An object to extend.
 * @param {!Object=} object The object to add to the target.
 * @return {!Object} The ChocolateChipJS object. / The extended object.
 */
ChocolateChipStatic.prototype.extend = function(object_or_target, object) {};

/**
 * An empty function.
 * 
 * @return {void} void.
 */
ChocolateChipStatic.prototype.noop = function() {};

/**
 * Create a random number to use as a uuid.
 * 
 * @return {number} number.
 */
ChocolateChipStatic.prototype.uuidNum = function() {};

/**
 * Creates a uuid using uuidNum().
 * 
 * @return {string} A string.
 */
ChocolateChipStatic.prototype.makeUuid = function() {};

/**
 * Create a ChocolateChip collection object by creating elements from an HTML string.
 * 
 * @param {string} selector
 * @return {!ChocolateChipElementArray} any
 */
ChocolateChipStatic.prototype.make = function(selector) {};

/**
 * Create a ChocolateChip collection object by creating elements from an HTML string. This is an alias for $.make.
 * 
 * @param {string} selector
 * @return {!ChocolateChipElementArray} any
 */
ChocolateChipStatic.prototype.html = function(selector) {};

/**
 * Replace one element with another.
 * 
 * @param {!ChocolateChipElementArray} newElement
 * @param {!ChocolateChipElementArray} oldElement
 * @return {void} HTMLElement[]
 */
ChocolateChipStatic.prototype.replace = function(newElement, oldElement) {};

/**
 * Load a JavaScript file from a url, then execute it.
 * 
 * @param {string} url A string containing the URL where the script resides.
 * @param {!Function} callback A callback function that is executed after the script loads.
 * @return {!Function} void
 */
ChocolateChipStatic.prototype.require = function(url, callback) {};

/**
 * Process JavaScript returned by Ajax request. An optional name can be used to create a custom variable name by which the data is exposed, otherwise it is exposed with the variable "data".
 * 
 * @param {string} json
 * @param {string=} name
 * @return {?} Function
 */
ChocolateChipStatic.prototype.processJSON = function(json, name) {};

/**
 * This method takes a referenced form and serializes its element names and values, which it returns as a string. This is required if you want to send form data.
 * 
 * Serialize
 * @param {?|(!ChocolateChipElementArray|!HTMLFormElement)} element_or_form A string, HTML element or ChocolateChipElementArray containing a reference to a from.
 * @return {string} An encode string form element names and values.
 */
ChocolateChipStatic.prototype.serialize = function(element_or_form) {};

/**
 * Parse the data in a Promise response as JSON.
 * 
 * \@result
 * @param {!Response} reponse
 * @return {!JSON}
 */
ChocolateChipStatic.prototype.json = function(reponse) {};

/**
 * This method will defer the execution of a function until the call stack is clear.
 * 
 * @param {!Function} callback A function to execute.
 * @param {number=} duration The number of milliseconds to delay execution.
 * @return {?} any
 */
ChocolateChipStatic.prototype.delay = function(callback, duration) {};

/**
 * The method will defer the execution of its callback until the call stack is clear.
 * 
 * @param {!Function} callback A callback to execute after a delay.
 * @return {!Function} Function.
 */
ChocolateChipStatic.prototype.defer = function(callback) {};

/**
 * This method makes sure a method always returns an array.
 * If no values are available to return, it returns and empty array.
 * This is to make sure that methods that expect a chainable array will not throw and exception.
 * 
 * @param {!Array<!HTMLElement>} result The result of a method to test if it can be returned in an array.
 * @return {!Array<?>} An array holding the results of a method, otherwise an empty array.
 */
ChocolateChipStatic.prototype.returnResult = function(result) {};

/**
 * This method allows you to execute a callback on each item in an array of elements.
 * 
 * @template T
 * @param {!Array<T>} array An array of elements.
 * @param {function(T, number): ?} callback A callback to execute on each element. This has two parameters: the context, followed by the index of the current iteration.
 * @return {?}
 */
ChocolateChipStatic.prototype.each = function(array, callback) {};

/**
 * This method will concatenate strings or values as a cleaner alternative to using the '+' operator.
 * 
 * @param {...string} string or number A comma separated series of strings to concatenate.
 * @return {string} string
 */
ChocolateChipStatic.prototype.concat = function(string) {};

/**
 * This method takes a space-delimited string of words and returns it as an array where the individual words are indices.
 * 
 * @param {string} string Any string with values separated by spaces.
 * @return {!Array<string>} string[]
 */
ChocolateChipStatic.prototype.w = function(string) {};

/**
 * This method converts a string of hyphenated tokens into a camel cased string.
 * 
 * @param {string} string A string of hyphenated tokens.
 * @return {string} string
 */
ChocolateChipStatic.prototype.camelize = function(string) {};

/**
 * This method converts a camel case string into lowercase with hyphens.
 * 
 * @param {string} string A camel case string.
 * @return {string} string
 */
ChocolateChipStatic.prototype.deCamelize = function(string) {};

/**
 * This method capitalizes the first letter of a string.
 * 
 * @param {string} string A string.
 * @param {boolean=} boolean A boolean value.
 * @return {string} string
 */
ChocolateChipStatic.prototype.capitalize = function(string, boolean) {};

/**
 * Determine whether the argument is a string.
 * 
 * @param {?} obj Object to test whether or not it is a string.
 * @return {boolean} boolean
 */
ChocolateChipStatic.prototype.isString = function(obj) {};

/**
 * Determine whether the argument is an array.
 * 
 * @param {?} obj Object to test whether or not it is an array.
 * @return {boolean} boolean
 */
ChocolateChipStatic.prototype.isArray = function(obj) {};

/**
 * Determine whether the argument is a function.
 * 
 * @param {?} obj Object to test whether or not it is an function.
 * @return {boolean} boolean
 */
ChocolateChipStatic.prototype.isFunction = function(obj) {};

/**
 * Determine whether the argument is an object.
 * 
 * @param {?} obj Object to test whether or not it is an object.
 * @return {boolean} boolean
 */
ChocolateChipStatic.prototype.isObject = function(obj) {};

/**
 * Determine whether the argument is an empty object.
 * 
 * Determine whether the argument is an empty object.
 * 
 * @param {?} obj Object to test whether or not it is an empty object.
 * @return {boolean} boolean
 */
ChocolateChipStatic.prototype.isEmptyObject = function(obj) {};

/**
 * Determine whether the argument is a number.
 * 
 * @param {?} obj Object to test whether or not it is a number.
 * @return {boolean} boolean
 */
ChocolateChipStatic.prototype.isNumber = function(obj) {};

/**
 * Determine whether the argument is an integer.
 * 
 * @param {?} obj Object to test whether or not it is an integer.
 * @return {boolean} boolean
 */
ChocolateChipStatic.prototype.isInteger = function(obj) {};

/**
 * Determine whether the argument is a float.
 * 
 * @param {?} obj Object to test whether or not it is a float.
 * @return {boolean} boolean
 */
ChocolateChipStatic.prototype.isFloat = function(obj) {};

/**
 * Grabs values from a form and converts them into a JSON object.
 * 
 * @param {(string|!HTMLElement)} rootNode
 * @param {string} delimiter string A delimiter to namespace your form values. The default is "."
 * You use the form input's name to set up the namespace structure for your JSON, e.g. name="newUser.name.first".
 * @return {!Object}
 */
ChocolateChipStatic.prototype.form2JSON = function(rootNode, delimiter) {};

/**
 * Subscribe to a publication. You provide the topic you want to subscribe to, as well as a callback to execute when a publication occurs.
 * Any data passed by the publisher is exposed to the callback as its second parameter. The callback's first parameter is the published topic.
 * 
 * \@data any You can receive any type: string, number, array, object, etc.
 * @param {string} topic string A topic to subscribe to. This can be a single term, or any type of namespaced term with delimiters.
 * @param {function(string, ?): ?} callback
 * @return {boolean} any
 */
ChocolateChipStatic.prototype.subscribe = function(topic, callback) {};

/**
 * Unsubscribe from a topic. Pass this the topic you wish to unsubscribe from. The subscription will be terminated immediately.
 * 
 * @param {string} topic string The name of the topic to unsubscribe from.
 * @return {void} void
 */
ChocolateChipStatic.prototype.unsubscribe = function(topic) {};

/**
 *    Publish a topic with data for the topic's subscribers to receive.
 * 
 * @param {string} topic string The topic you wish to publish.
 * @param {?} data The data to send with the publication. This can be of any type: string, number, array, object, etc.
 * @return {string} void
 */
ChocolateChipStatic.prototype.publish = function(topic, data) {};
/**
 * @record
 * @struct
 */
function ChocolateChipElementArray() {}

/**
 * Iterate over an Array object, executing a function for each matched element.
 * 
 * @param {function(?, number): void} func
 * @return {void} void
 */
ChocolateChipElementArray.prototype.each = function(func) {};

/**
 * Sorts an array and removes duplicates before returning it.
 * 
 * @return {!ChocolateChipElementArray} Array
 */
ChocolateChipElementArray.prototype.unique = function() {};

/**
 * This method returns the element at the position in the array indicated by the argument. This is a zero-based number.
 * When dealing with document nodes, this allows you to cherry pick a node from its collection based on its
 * position amongst its siblings.
 * 
 * @param {number} index
 * @return {!ChocolateChipElementArray} HTMLElement
 */
ChocolateChipElementArray.prototype.eq = function(index) {};

/**
 * Search for a given element from among the matched elements on a collection.
 * This method returns the index value as an integer.
 * 
 * Search for a given element from among the matched elements on a collection.
 * This method returns the index value as an integer.
 * 
 * @param {(string|!Array<!HTMLElement>)=} selector A selector representing an element to look for in a collection of elements.
 * @return {number} number
 */
ChocolateChipElementArray.prototype.index = function(selector) {};

/**
 * Check the current matched set of elements against a selector or element and return it
 * if it matches the given arguments.
 * 
 * Check the current matched set of elements against a selector or element and return it
 * if it matches the given arguments.
 * 
 * @param {string|?} selector_or_element A string containing a selector expression to match elements against.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.is = function(selector_or_element) {};

/**
 * Check the current matched set of elements against a selector or element and return it
 * if it does not match the given arguments.
 * 
 * Check the current matched set of elements against a selector or element and return it
 * if it does not match the given arguments.
 * 
 * @param {string|?} selector_or_element A string containing a selector expression to match elements against.
 * \@ return HTMLElement[]
 * @return {!ChocolateChipElementArray}
 */
ChocolateChipElementArray.prototype.isnt = function(selector_or_element) {};

/**
 * Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.
 * 
 * Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.
 * 
 * @param {string|!HTMLElement} selector_or_contained A string containing a selector expression to match elements against.
 * \@ return HTMLElement[] / A DOM element to match elements against.
 * \@ return HTMLElement[]
 * @return {!ChocolateChipElementArray}
 */
ChocolateChipElementArray.prototype.has = function(selector_or_contained) {};

/**
 * Reduce the set of matched elements to those that have a descendant that does not match the selector or DOM element.
 * 
 * Reduce the set of matched elements to those that have a descendant that does not match the selector or DOM element.
 * 
 * @param {string|!HTMLElement} selector_or_contained A string containing a selector expression to match elements against.
 * \@ return HTMLElement[] / A DOM element to match elements against.
 * \@ return HTMLElement[]
 * @return {!ChocolateChipElementArray}
 */
ChocolateChipElementArray.prototype.hasnt = function(selector_or_contained) {};

/**
 * Same overload as is present in the base type
 * Get the descendants of each element in the current set of matched elements, filtered by a selector or element.
 * 
 * Get the descendants of each element in the current set of matched elements, filtered by a selector or element.
 * 
 * @param {function(!HTMLElement, number, !Array<!HTMLElement>): boolean|string|!HTMLElement} predicate_or_selector_or_element A string containing a selector expression to match elements against.
 * \@ return HTMLElement[] / An element to match elements against.
 * \@ return HTMLElement[]
 * @param {?=} thisArg
 * @return {!HTMLElement|!ChocolateChipElementArray}
 */
ChocolateChipElementArray.prototype.find = function(predicate_or_selector_or_element, thisArg) {};

/**
 * Get the immediately preceding sibling of each element in the set of matched elements.
 * 
 * \@ return HTMLElement[]
 * @return {!ChocolateChipElementArray}
 */
ChocolateChipElementArray.prototype.prev = function() {};

/**
 * Get the immediately following sibling of each element in the set of matched elements.
 * 
 * \@ return HTMLElement[]
 * @return {!ChocolateChipElementArray}
 */
ChocolateChipElementArray.prototype.next = function() {};

/**
 * Reduce the set of matched elements to the first in the set.
 * @return {!ChocolateChipElementArray}
 */
ChocolateChipElementArray.prototype.first = function() {};

/**
 * Reduce the set of matched elements to the last in the set.
 * 
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.last = function() {};

/**
 * Get the children of each element in the set of matched elements, optionally filtered by a selector.
 * 
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.children = function(selector) {};

/**
 * Get the parent of each element in the current set of matched elements, optionally filtered by a selector.
 * If multiple elements have the same parent, only one instance of the parent is returned.
 * 
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.parent = function(selector) {};

/**
 * For each element in the set, get the first element that matches the selector by testing the element
 * itself and traversing up through its ancestors in the DOM tree, or, if a number is provided,
 * retrieving that ancestor based on its distance from the element.
 * 
 * @param {(string|number)} selector A string containing a selector expression to match elements against.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.ancestor = function(selector) {};

/**
 * For each element in the set, get the first element that matches the selector by testing the element
 * itself and traversing up through its ancestors in the DOM tree.
 * 
 * @param {(string|number)} selector A string containing a selector expression to match elements against.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.closest = function(selector) {};

/**
 * Get the siblings of each element in the set of matched elements, optionally filtered by a selector.
 * 
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.siblings = function(selector) {};

/**
 * Get the HTML contents of the first element in the set of matched elements.
 * 
 * Set the HTML contents of each element in the set of matched elements.
 * 
 * @param {string=} htmlString A string of HTML to set as the content of each matched element.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.html = function(htmlString) {};

/**
 * Get the value of style properties for the first element in the set of matched elements.
 * 
 * Set one or more CSS properties for the set of matched elements using a quoted string.
 * 
 * Set one or more CSS properties for the set of matched elements.
 * 
 * @param {string|!Object} propertyName_or_properties A CSS property. / A CSS property name. / An object of property-value pairs to set.
 * @param {string=} value A value to set for the property.
 * @return {string|!ChocolateChipElementArray} string / HTMLElement[]
 */
ChocolateChipElementArray.prototype.css = function(propertyName_or_properties, value) {};

/**
 * Get the value of an attribute for the first element in the set of matched elements.
 * 
 * Set an attribute for the set of matched elements.
 * 
 * @param {string} attributeName The name of the attribute to get. / A string indicating the attribute to set.
 * @param {string=} value A string indicating the value to set the attribute to.
 * @return {string|!ChocolateChipElementArray} string / HTMLElement[]
 */
ChocolateChipElementArray.prototype.attr = function(attributeName, value) {};

/**
 * Remove an attribute from a node.
 * 
 * @param {string} attributeName A string indicating the attribute to remove.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.removeAttr = function(attributeName) {};

/**
 * Return any of the matched elements that have the given attribute.
 * 
 * @param {string} attributeName
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.hasAttr = function(attributeName) {};

/**
 * Test whether an attribute exists on the first element in the set of matched elements. The value returned is a boolean.
 * 
 * Set an property for the set of matched elements.
 * 
 * @param {string} propertyName A string indicating the property to set.
 * @param {?=} value A string indicating the value to set the property to.
 * @return {boolean|!ChocolateChipElementArray} boolean / HTMLElement[]
 */
ChocolateChipElementArray.prototype.prop = function(propertyName, value) {};

/**
 * Remove an element property.
 * 
 * @param {string} property The property to remove.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.removeProp = function(property) {};

/**
 * Adds the specified class(es) to each of the set of matched elements.
 * 
 * @param {string} className One or more space-separated classes to be added to the class attribute of each matched element.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.addClass = function(className) {};

/**
 * Remove a single class or multiple classes from each element in the set of matched elements.
 * 
 * @param {string=} className One or more space-separated classes to be removed from the class attribute of each matched element.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.removeClass = function(className) {};

/**
 * Add or remove a classe from each element in the set of matched elements, depending on whether the class is present or not.
 * 
 * @param {string} className One or more class names (separated by spaces) to be toggled for each element in the matched set.
 * @param {boolean=} swtch
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.toggleClass = function(className, swtch) {};

/**
 * Return any of the matched elements that have the given class.
 * 
 * @param {string} className The class name to search for.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.hasClass = function(className) {};

/**
 * Store arbitrary data associated with the matched elements.
 * 
 * Return the value at the named data store for the first element in the element collection, as set by
 * data(name).
 * 
 * Return the value at the named data store for the first element in the element collection, as set by data(name, value).
 * 
 * Store arbitrary data associated with the matched element.
 * 
 * @param {string} key A string naming the piece of data to set. / Name of the data stored.
 * @param {?=} value The new data value; it can be any Javascript type including Array or Object.
 * @return {!ChocolateChipElementArray|?} HTMLElement[] / any
 */
ChocolateChipElementArray.prototype.data = function(key, value) {};

/**
 * Remove the value at the named data store for the first element in the element collection, as set by data(name, value).
 * 
 * @param {string=} key Name of the data stored.
 * @return {?} any
 */
ChocolateChipElementArray.prototype.removeData = function(key) {};

/**
 * Store string data associated with the matched elements.
 * 
 * Retrieve a dataset key's value for the first element in the element collection.
 * 
 * @param {string} key A string naming the piece of data to set.
 * @param {?=} value The new data value; it must be a string. You can convert JSON into a string to use with this.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.dataset = function(key, value) {};

/**
 * Get the current value of the first element in the set of matched elements.
 * Set the value of each element in the set of matched elements.
 * 
 * @param {string=} value A string of text or an array of strings corresponding to the value of each matched element
 * to set as selected/checked.
 * @return {?|!ChocolateChipElementArray} any
 */
ChocolateChipElementArray.prototype.val = function(value) {};

/**
 * Set the property of an element to enabled by removing the "disabled" attribute.
 * 
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.enable = function() {};

/**
 * Set the property of an element to "disabled".
 * 
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.disable = function() {};

/**
 * Display the matched elements.
 * 
 * @param {(string|number)=} duration
 * @param {!Function=} callback A function to call once the animation is complete.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.show = function(duration, callback) {};

/**
 * Hide the matched elements.
 * 
 * @param {(string|number)=} duration A string or number determining how long the animation will run.
 * @param {!Function=} callback A function to call once the animation is complete.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.hide = function(duration, callback) {};

/**
 * Insert content, specified by the parameter, before each element in the set of matched elements.
 * 
 * @param {(string|!HTMLElement|!ChocolateChipElementArray)} content HTML string, DOM element, array of elements to insert before each element in the set of matched elements.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.before = function(content) {};

/**
 * Insert content, specified by the parameter, after each element in the set of matched elements.
 * 
 * @param {(string|!HTMLElement|!ChocolateChipElementArray)} content HTML string, DOM element, array of elements to insert after each element in the set of matched elements.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.after = function(content) {};

/**
 * Insert content, specified by the parameter, to the end of each element in the set of matched elements.
 * 
 * @param {(string|!HTMLElement|!ChocolateChipElementArray|!Text)} content DOM element, array of elements, or HTML string to insert at the end of each element in the set
 * of matched elements.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.append = function(content) {};

/**
 * Insert content, specified by the parameter, at the beginning of each element in the set of matched elements.
 * 
 * @param {(string|!HTMLElement|!ChocolateChipElementArray|!Text)} content DOM element, array of elements, or HTML string to insert at the beginning of each element in the set of matched elements.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.prepend = function(content) {};

/**
 * Insert every element in the set of matched elements to the beginning of the target.
 * 
 * @param {(string|!Array<?>|!HTMLElement)} target A selector, element, or HTML string. The matched set of elements will be inserted at the beginning of the element specified by this parameter.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.prependTo = function(target) {};

/**
 * Insert every element in the set of matched elements to the end of the target.
 * 
 * @param {(string|!Array<?>|!HTMLElement)} target A selector, element, or HTML string. The matched set of elements will be inserted at the end of the element specified by this parameter.
 * If no position value is provided it will simply append the content to the target.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.appendTo = function(target) {};

/**
 * Insert element(s) into the target element.
 * 
 * @param {string} content
 * @param {(string|number)=} position
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.insert = function(content, position) {};

/**
 * Create a copy of the set of matched elements.
 * 
 * @param {boolean=} value A Boolean indicating whether to copy the element(s) with their children. A true value copies the children.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.clone = function(value) {};

/**
 * Wrap an HTML structure around each element in the set of matched elements.
 * 
 * @param {string} wrappingElement A selector or HTML string specifying the structure to wrap around the matched elements.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.wrap = function(wrappingElement) {};

/**
 * Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.
 * 
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.unwrap = function() {};

/**
 * Remove the set of matched elements from the DOM. If there are any attached events, this will remove them to prevent memory leaks.
 * 
 * @param {string=} selector A selector expression that filters the set of matched elements to be removed.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.remove = function(selector) {};

/**
 * Remove all child nodes of the set of matched elements from the DOM.
 * 
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.empty = function() {};

/**
 * Get an object of the current coordinates of the first element in the set of matched elements, relative to the document.
 * These are: top, left, bottom and right. The values are numbers representing pixel values.
 * @return {{top: number, bottom: number, left: number, right: number}} Object
 */
ChocolateChipElementArray.prototype.offset = function() {};

/**
 * Get the current computed width for the first element in the set of matched elements,
 * including padding but excluding borders.
 * 
 * @return {number} number
 */
ChocolateChipElementArray.prototype.width = function() {};

/**
 * Get the current computed height for the first element in the set of matched elements,
 * including padding but excluding borders.
 * 
 * @return {number} number
 */
ChocolateChipElementArray.prototype.height = function() {};

/**
 * Get the combined text contents of each element in the set of matched elements, including their descendants.
 * 
 * Set the content of each element in the set of matched elements to the specified text.
 * 
 * @param {(string|number)=} text 
 *        The text to set as the content of each matched element.
 *        When Number is supplied, it will be converted to a String representation.
 *        To delete text, use ChocolateChipElementArray.empty() or ChocolateChipElementArray.remove().
 * @return {string|!HTMLElement} string / HTMLElement
 */
ChocolateChipElementArray.prototype.text = function(text) {};

/**
 * A method to animate DOM nodes using CSS. This uses CSS transitions.
 * 
 * @param {!Object} options And object of key value pairs define the CSS properties and values to animate.
 * @param {string=} duration A string representing the time. Should have a time identifier: "200s", "200ms", etc.
 * @param {string=} easing A string indicating the easing for the animation, such as "ease-out", "ease-in", "ease-in-out".
 * @return {void} void
 */
ChocolateChipElementArray.prototype.animate = function(options, duration, easing) {};

/**
 * Attach a handler to an event for the elements.
 * 
 * @param {string} eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
 * @param {function(!Event): ?} handler A function to execute each time the event is triggered.
 * @param {boolean=} useCapture Setting the third argument to true will trigger event bubbling. The default is false.
 * @return {!ChocolateChipStatic} ChocolateChipStatic
 */
ChocolateChipElementArray.prototype.bind = function(eventType, handler, useCapture) {};

/**
 * Remove a handler for an event from the elements.
 * 
 * @param {string=} eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
 * @param {function(!Event): ?=} handler A function to execute each time the event is triggered.
 * @param {boolean=} useCapture Setting the third argument to true will trigger event bubbling. The default is false.
 * @return {!ChocolateChipStatic} ChocolateChipStatic
 */
ChocolateChipElementArray.prototype.unbind = function(eventType, handler, useCapture) {};

/**
 * Add a delegated event to listen for the provided event on the descendant elements.
 * 
 * @param {?} selector A string defining the descendant elements to listen on for the designated event.
 * @param {string} eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
 * @param {function(!Event): ?} handler A function to execute each time the event is triggered. The keyword "this" will refer
 * to the element receiving the event.
 * @param {boolean=} useCapture Setting the third argument to true will trigger event bubbling. The default is false.
 * @return {!ChocolateChipStatic} ChocolateChipStatic
 */
ChocolateChipElementArray.prototype.delegate = function(selector, eventType, handler, useCapture) {};

/**
 * Add a delegated event to listen for the provided event on the descendant elements.
 * 
 * @param {?=} selector A string defining the descendant elements are listening for the event.
 * @param {string=} eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
 * @param {function(!Event): ?=} handler A function handler assigned to this event.
 * @param {boolean=} useCapture Setting the third argument to true will trigger event bubbling. The default is false.
 * @return {!ChocolateChipStatic} ChocolateChipStatic
 */
ChocolateChipElementArray.prototype.undelegate = function(selector, eventType, handler, useCapture) {};

/**
 * Add a handler to an event for elements. If a selector is provided as the second argument, this implements a delegated event.
 * 
 * @param {string} eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
 * @param {?} selector A string defining the descendant elements are listening for the event.
 * @param {function(!Event): ?=} handler A function handler assigned to this event.
 * @param {boolean=} capturePhase
 * @return {!ChocolateChipStatic} ChocolateChipStatic
 */
ChocolateChipElementArray.prototype.on = function(eventType, selector, handler, capturePhase) {};

/**
 * Remove a handler for an event from the elements. If the second argument is a selector, it tries to undelegate the event.
 * If no arugments are provided, it removes all events from the element(s).
 * 
 * @param {string=} eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
 * @param {?=} selector A string defining the descendant elements are listening for the event.
 * @param {function(!Event): ?=} handler A function handler assigned to this event.
 * @param {boolean=} capturePhase
 * @return {!ChocolateChipStatic} ChocolateChipStatic
 */
ChocolateChipElementArray.prototype.off = function(eventType, selector, handler, capturePhase) {};

/**
 * Trigger an event on an element.
 * 
 * @param {string} eventType The event to trigger.
 * @return {void} void
 */
ChocolateChipElementArray.prototype.trigger = function(eventType) {};

/** @typedef {string} */
var DOMString;

/** @typedef {!Object} */
var OpenEndedDictionary;

/* TODO: CallSignature:  */

/**
 * @param {string} name
 * @param {string} value
 * @return {void}
 */
Headers.prototype.append = function(name, value) {};

/**
 * @param {string} name
 * @return {?}
 */
Headers.prototype.delete = function(name) {};

/**
 * @param {string} name
 * @return {?}
 */
Headers.prototype.get = function(name) {};

/**
 * @param {string} name
 * @return {?}
 */
Headers.prototype.getAll = function(name) {};

/**
 * @param {string} name
 * @return {?}
 */
Headers.prototype.has = function(name) {};

/**
 * @param {string} name
 * @param {string} value
 * @return {?}
 */
Headers.prototype.set = function(name, value) {};

/**
 * @param {!Function} callback
 * @param {?} thisArg
 * @return {?}
 */
Headers.prototype.forEach = function(callback, thisArg) {};
 /** @type {number} */
RequestInit.prototype.timeout;
 /** @type {!Array<string>} */
ChocolateChipStatic.prototype.JSONPCallbacks;

/**
 * Method to perform JSONP request.
 * 
 * @param {string} url A string defining the url to target.
 * @param {{timeout: number, callbackName: string, clear: boolean}=} options And object literal of properties: {timeout? number, callbackName?: string, clear?: boolean}
 * @return {?}
 */
ChocolateChipStatic.prototype.jsonp = function(url, options) {};
 /** @type {!ChocolateChipStatic} */
Window.prototype.chocolatechipjs;
 /** @type {!ChocolateChipStatic} */
Window.prototype.$;
 /** @type {?} */
Window.prototype.jsonp;
 /** @type {!ChocolateChipStatic} */
var $;
 /** @type {!ChocolateChipStatic} */
var chocolatechipjs;
