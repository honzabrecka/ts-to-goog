/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/wiring-pi/index.d.ts:
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "wiring-pi"
/** @const */
tsickle_declare_module.wiring_pi = {};

/**
 * @return {number}
 */
tsickle_declare_module.wiring_pi.wiringPiSetup = function() {};

/**
 * @return {number}
 */
tsickle_declare_module.wiring_pi.wiringPiSetupGpio = function() {};

/**
 * @return {number}
 */
tsickle_declare_module.wiring_pi.wiringPiSetupPhys = function() {};

/**
 * @return {number}
 */
tsickle_declare_module.wiring_pi.wiringPiSetupSys = function() {};

/**
 * @param {string} mode
 * @return {number}
 */
tsickle_declare_module.wiring_pi.setup = function(mode) {};

/**
 * @param {number} pin
 * @param {number} mode
 * @return {void}
 */
tsickle_declare_module.wiring_pi.pinModeAlt = function(pin, mode) {};

/**
 * @param {number} pin
 * @param {number} mode
 * @return {void}
 */
tsickle_declare_module.wiring_pi.pinMode = function(pin, mode) {};

/**
 * @param {number} pin
 * @param {number} pud
 * @return {void}
 */
tsickle_declare_module.wiring_pi.pullUpDnControl = function(pin, pud) {};

/**
 * @param {number} pin
 * @return {number}
 */
tsickle_declare_module.wiring_pi.digitalRead = function(pin) {};

/**
 * @param {number} pin
 * @param {number} state
 * @return {void}
 */
tsickle_declare_module.wiring_pi.digitalWrite = function(pin, state) {};

/**
 * @param {number} pin
 * @param {number} value
 * @return {void}
 */
tsickle_declare_module.wiring_pi.pwmWrite = function(pin, value) {};

/**
 * @param {number} pin
 * @return {number}
 */
tsickle_declare_module.wiring_pi.analogRead = function(pin) {};

/**
 * @param {number} pin
 * @param {number} value
 * @return {void}
 */
tsickle_declare_module.wiring_pi.analogWrite = function(pin, value) {};

/**
 * @param {number} pin
 * @param {number} state
 * @return {number}
 */
tsickle_declare_module.wiring_pi.pulseIn = function(pin, state) {};

/**
 * @param {number} ms
 * @return {void}
 */
tsickle_declare_module.wiring_pi.delay = function(ms) {};

/**
 * @param {number} us
 * @return {void}
 */
tsickle_declare_module.wiring_pi.delayMicroseconds = function(us) {};

/**
 * @return {number}
 */
tsickle_declare_module.wiring_pi.millis = function() {};

/**
 * @return {number}
 */
tsickle_declare_module.wiring_pi.micros = function() {};

/**
 * @param {number} pin
 * @param {number} edgeType
 * @param {function(number): void} callback
 * @return {void}
 */
tsickle_declare_module.wiring_pi.wiringPiISR = function(pin, edgeType, callback) {};

/**
 * @param {number} pin
 * @return {void}
 */
tsickle_declare_module.wiring_pi.wiringPiISRCancel = function(pin) {};
 /** @type {number} */
tsickle_declare_module.wiring_pi.INT_EDGE_FALLING;
 /** @type {number} */
tsickle_declare_module.wiring_pi.INT_EDGE_RISING;
 /** @type {number} */
tsickle_declare_module.wiring_pi.INT_EDGE_BOTH;
 /** @type {number} */
tsickle_declare_module.wiring_pi.INT_EDGE_SETUP;

/**
 * @return {number}
 */
tsickle_declare_module.wiring_pi.piBoardRev = function() {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.wiring_pi.PiBoardId = function() {};
 /** @type {number} */
tsickle_declare_module.wiring_pi.PiBoardId.prototype.model;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PiBoardId.prototype.rev;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PiBoardId.prototype.mem;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PiBoardId.prototype.maker;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PiBoardId.prototype.overvolted;

/**
 * @return {!PiBoardId}
 */
tsickle_declare_module.wiring_pi.piBoardId = function() {};

/**
 * @param {number} pin
 * @return {number}
 */
tsickle_declare_module.wiring_pi.wpiPinToGpio = function(pin) {};

/**
 * @param {number} pin
 * @return {number}
 */
tsickle_declare_module.wiring_pi.physPinToGpio = function(pin) {};

/**
 * @param {number} group
 * @param {number} value
 * @return {void}
 */
tsickle_declare_module.wiring_pi.setPadDrive = function(group, value) {};

/**
 * @param {number} pin
 * @return {number}
 */
tsickle_declare_module.wiring_pi.getAlt = function(pin) {};

/**
 * @param {number} byte
 * @return {void}
 */
tsickle_declare_module.wiring_pi.digitalWriteByte = function(byte) {};

/**
 * @param {number} mode
 * @return {void}
 */
tsickle_declare_module.wiring_pi.pwmSetMode = function(mode) {};

/**
 * @param {number} range
 * @return {void}
 */
tsickle_declare_module.wiring_pi.pwmSetRange = function(range) {};

/**
 * @param {number} divisor
 * @return {void}
 */
tsickle_declare_module.wiring_pi.pwmSetClock = function(divisor) {};

/**
 * @param {number} pin
 * @param {number} frequency
 * @return {void}
 */
tsickle_declare_module.wiring_pi.pwmToneWrite = function(pin, frequency) {};

/**
 * @param {number} pin
 * @param {number} frequency
 * @return {void}
 */
tsickle_declare_module.wiring_pi.gpioClockSet = function(pin, frequency) {};
 /** @type {number} */
tsickle_declare_module.wiring_pi.WPI_MODE_PINS;
 /** @type {number} */
tsickle_declare_module.wiring_pi.WPI_MODE_PHYS;
 /** @type {number} */
tsickle_declare_module.wiring_pi.WPI_MODE_GPIO;
 /** @type {number} */
tsickle_declare_module.wiring_pi.WPI_MODE_GPIO_SYS;
 /** @type {number} */
tsickle_declare_module.wiring_pi.WPI_MODE_PIFACE;
 /** @type {number} */
tsickle_declare_module.wiring_pi.WPI_MODE_UNINITIALISED;
 /** @type {number} */
tsickle_declare_module.wiring_pi.INPUT;
 /** @type {number} */
tsickle_declare_module.wiring_pi.OUTPUT;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PWM_OUTPUT;
 /** @type {number} */
tsickle_declare_module.wiring_pi.GPIO_CLOCK;
 /** @type {number} */
tsickle_declare_module.wiring_pi.SOFT_PWM_OUTPUT;
 /** @type {number} */
tsickle_declare_module.wiring_pi.SOFT_TONE_OUTPUT;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PUD_OFF;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PUD_DOWN;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PUD_UP;
 /** @type {number} */
tsickle_declare_module.wiring_pi.HIGH;
 /** @type {number} */
tsickle_declare_module.wiring_pi.LOW;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PWM_MODE_BAL;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PWM_MODE_MS;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PI_MODEL_UNKNOWN;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PI_MODEL_A;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PI_MODEL_B;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PI_MODEL_BP;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PI_MODEL_CM;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PI_MODEL_AP;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PI_MODEL_2;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PI_VERSION_UNKNOWN;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PI_VERSION_1;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PI_VERSION_1_1;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PI_VERSION_1_2;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PI_VERSION_2;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PI_MAKER_UNKNOWN;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PI_MAKER_EGOMAN;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PI_MAKER_SONY;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PI_MAKER_QISDA;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PI_MAKER_MBEST;
 /** @type {!Array<string>} */
tsickle_declare_module.wiring_pi.PI_MODEL_NAMES;
 /** @type {!Array<string>} */
tsickle_declare_module.wiring_pi.PI_REVISION_NAMES;
 /** @type {!Array<string>} */
tsickle_declare_module.wiring_pi.PI_MAKER_NAMES;
 /** @type {number} */
tsickle_declare_module.wiring_pi.FSEL_INPT;
 /** @type {number} */
tsickle_declare_module.wiring_pi.FSEL_OUTP;
 /** @type {number} */
tsickle_declare_module.wiring_pi.FSEL_ALT0;
 /** @type {number} */
tsickle_declare_module.wiring_pi.FSEL_ALT1;
 /** @type {number} */
tsickle_declare_module.wiring_pi.FSEL_ALT2;
 /** @type {number} */
tsickle_declare_module.wiring_pi.FSEL_ALT3;
 /** @type {number} */
tsickle_declare_module.wiring_pi.FSEL_ALT4;
 /** @type {number} */
tsickle_declare_module.wiring_pi.FSEL_ALT5;

/**
 * @param {number} devId
 * @return {number}
 */
tsickle_declare_module.wiring_pi.wiringPiI2CSetup = function(devId) {};

/**
 * @param {string} device
 * @param {number} devId
 * @return {number}
 */
tsickle_declare_module.wiring_pi.wiringPiI2CSetupInterface = function(device, devId) {};

/**
 * @param {number} fd
 * @return {void}
 */
tsickle_declare_module.wiring_pi.wiringPiI2CClose = function(fd) {};

/**
 * @param {number} fd
 * @return {number}
 */
tsickle_declare_module.wiring_pi.wiringPiI2CRead = function(fd) {};

/**
 * @param {number} fd
 * @param {number} reg
 * @return {number}
 */
tsickle_declare_module.wiring_pi.wiringPiI2CReadReg8 = function(fd, reg) {};

/**
 * @param {number} fd
 * @param {number} reg
 * @return {number}
 */
tsickle_declare_module.wiring_pi.wiringPiI2CReadReg16 = function(fd, reg) {};

/**
 * @param {number} fd
 * @param {number} data
 * @return {number}
 */
tsickle_declare_module.wiring_pi.wiringPiI2CWrite = function(fd, data) {};

/**
 * @param {number} fd
 * @param {number} reg
 * @param {number} data
 * @return {number}
 */
tsickle_declare_module.wiring_pi.wiringPiI2CWriteReg8 = function(fd, reg, data) {};

/**
 * @param {number} fd
 * @param {number} reg
 * @param {number} data
 * @return {number}
 */
tsickle_declare_module.wiring_pi.wiringPiI2CWriteReg16 = function(fd, reg, data) {};

/**
 * @param {number} channel
 * @return {number}
 */
tsickle_declare_module.wiring_pi.wiringPiSPIGetFd = function(channel) {};

/**
 * @param {number} channel
 * @param {?} data
 * @return {number}
 */
tsickle_declare_module.wiring_pi.wiringPiSPIDataRW = function(channel, data) {};

/**
 * @param {number} channel
 * @param {number} speed
 * @return {number}
 */
tsickle_declare_module.wiring_pi.wiringPiSPISetup = function(channel, speed) {};

/**
 * @param {number} channel
 * @param {number} speed
 * @param {number} mode
 * @return {number}
 */
tsickle_declare_module.wiring_pi.wiringPiSPISetupMode = function(channel, speed, mode) {};

/**
 * @param {number} fd
 * @return {void}
 */
tsickle_declare_module.wiring_pi.wiringPiSPIClose = function(fd) {};

/**
 * @param {string} device
 * @param {number} baudrate
 * @return {number}
 */
tsickle_declare_module.wiring_pi.serialOpen = function(device, baudrate) {};

/**
 * @param {number} fd
 * @return {void}
 */
tsickle_declare_module.wiring_pi.serialClose = function(fd) {};

/**
 * @param {number} fd
 * @return {void}
 */
tsickle_declare_module.wiring_pi.serialFlush = function(fd) {};

/**
 * @param {number} fd
 * @param {number} character
 * @return {void}
 */
tsickle_declare_module.wiring_pi.serialPutChar = function(fd, character) {};

/**
 * @param {number} fd
 * @param {string} data
 * @return {void}
 */
tsickle_declare_module.wiring_pi.serialPuts = function(fd, data) {};

/**
 * @param {number} fd
 * @param {string} data
 * @return {void}
 */
tsickle_declare_module.wiring_pi.serialPrintf = function(fd, data) {};

/**
 * @param {number} fd
 * @return {number}
 */
tsickle_declare_module.wiring_pi.serialDataAvail = function(fd) {};

/**
 * @param {number} fd
 * @return {number}
 */
tsickle_declare_module.wiring_pi.serialGetchar = function(fd) {};

/**
 * @param {number} dPin
 * @param {number} cPin
 * @param {number} order
 * @return {number}
 */
tsickle_declare_module.wiring_pi.shiftIn = function(dPin, cPin, order) {};

/**
 * @param {number} dPin
 * @param {number} cPin
 * @param {number} order
 * @param {number} value
 * @return {void}
 */
tsickle_declare_module.wiring_pi.shiftOut = function(dPin, cPin, order, value) {};
 /** @type {number} */
tsickle_declare_module.wiring_pi.LSBFIRST;
 /** @type {number} */
tsickle_declare_module.wiring_pi.MSBFIRST;

/**
 * @param {number} pin
 * @param {number} value
 * @param {number} range
 * @return {number}
 */
tsickle_declare_module.wiring_pi.softPwmCreate = function(pin, value, range) {};

/**
 * @param {number} pin
 * @param {number} value
 * @return {void}
 */
tsickle_declare_module.wiring_pi.softPwmWrite = function(pin, value) {};

/**
 * @param {number} pin
 * @return {void}
 */
tsickle_declare_module.wiring_pi.softPwmStop = function(pin) {};

/**
 * @param {number} pin
 * @param {number} value
 * @return {void}
 */
tsickle_declare_module.wiring_pi.softServoWrite = function(pin, value) {};

/**
 * @param {number} p0
 * @param {number} p1
 * @param {number} p2
 * @param {number} p3
 * @param {number} p4
 * @param {number} p5
 * @param {number} p6
 * @param {number} p7
 * @return {number}
 */
tsickle_declare_module.wiring_pi.softServoSetup = function(p0, p1, p2, p3, p4, p5, p6, p7) {};

/**
 * @param {number} pin
 * @return {number}
 */
tsickle_declare_module.wiring_pi.softToneCreate = function(pin) {};

/**
 * @param {number} pin
 * @param {number} frequency
 * @return {void}
 */
tsickle_declare_module.wiring_pi.softToneWrite = function(pin, frequency) {};

/**
 * @param {number} pin
 * @return {void}
 */
tsickle_declare_module.wiring_pi.softToneStop = function(pin) {};

/**
 * @param {number} pinBase
 * @param {number} i2cAddress
 * @param {number} vrefMode
 * @return {number}
 */
tsickle_declare_module.wiring_pi.dac7678Setup = function(pinBase, i2cAddress, vrefMode) {};
 /** @type {number} */
tsickle_declare_module.wiring_pi.DAC7678_VREF_MODE_STATIC_ON;
 /** @type {number} */
tsickle_declare_module.wiring_pi.DAC7678_VREF_MODE_STATIC_OFF;
 /** @type {number} */
tsickle_declare_module.wiring_pi.DAC7678_VREF_MODE_FLEXIBLE_ON;
 /** @type {number} */
tsickle_declare_module.wiring_pi.DAC7678_VREF_MODE_FLEXIBLE_ALWAYS_ON;
 /** @type {number} */
tsickle_declare_module.wiring_pi.DAC7678_VREF_MODE_FLEXIBLE_ALWAYS_OFF;

/**
 * @param {number} pinBase
 * @param {number} numPins
 * @param {string} device
 * @param {number} baudrate
 * @return {number}
 */
tsickle_declare_module.wiring_pi.drcSerialSetup = function(pinBase, numPins, device, baudrate) {};

/**
 * @param {number} pinBase
 * @param {number} spiChannel
 * @return {number}
 */
tsickle_declare_module.wiring_pi.max31855Setup = function(pinBase, spiChannel) {};

/**
 * @param {number} pinBase
 * @param {number} spiChannel
 * @return {number}
 */
tsickle_declare_module.wiring_pi.max5322Setup = function(pinBase, spiChannel) {};

/**
 * @param {number} pinBase
 * @param {number} i2cAddress
 * @return {number}
 */
tsickle_declare_module.wiring_pi.mcp23008Setup = function(pinBase, i2cAddress) {};

/**
 * @param {number} pinBase
 * @param {number} i2cAddress
 * @return {number}
 */
tsickle_declare_module.wiring_pi.mpc23016Setup = function(pinBase, i2cAddress) {};

/**
 * @param {number} pinBase
 * @param {number} i2cAddress
 * @return {number}
 */
tsickle_declare_module.wiring_pi.mpc23017Setup = function(pinBase, i2cAddress) {};

/**
 * @param {number} pinBase
 * @param {number} spiChannel
 * @param {number} devId
 * @return {number}
 */
tsickle_declare_module.wiring_pi.mcp23s08Setup = function(pinBase, spiChannel, devId) {};

/**
 * @param {number} pinBase
 * @param {number} spiChannel
 * @param {number} devId
 * @return {number}
 */
tsickle_declare_module.wiring_pi.mcp23s17Setup = function(pinBase, spiChannel, devId) {};

/**
 * @param {number} pinBase
 * @param {number} spiChannel
 * @return {number}
 */
tsickle_declare_module.wiring_pi.mcp3002Setup = function(pinBase, spiChannel) {};

/**
 * @param {number} pinBase
 * @param {number} spiChannel
 * @return {number}
 */
tsickle_declare_module.wiring_pi.mcp3004Setup = function(pinBase, spiChannel) {};

/**
 * @param {number} pinBase
 * @param {number} i2cAddress
 * @param {number} sampleRate
 * @param {number} gain
 * @return {number}
 */
tsickle_declare_module.wiring_pi.mcp3422Setup = function(pinBase, i2cAddress, sampleRate, gain) {};
 /** @type {number} */
tsickle_declare_module.wiring_pi.MCP3422_SR_3_75;
 /** @type {number} */
tsickle_declare_module.wiring_pi.MCP3422_SR_15;
 /** @type {number} */
tsickle_declare_module.wiring_pi.MCP3422_SR_60;
 /** @type {number} */
tsickle_declare_module.wiring_pi.MCP3422_SR_240;
 /** @type {number} */
tsickle_declare_module.wiring_pi.MCP3422_GAIN_1;
 /** @type {number} */
tsickle_declare_module.wiring_pi.MCP3422_GAIN_2;
 /** @type {number} */
tsickle_declare_module.wiring_pi.MCP3422_GAIN_4;
 /** @type {number} */
tsickle_declare_module.wiring_pi.MCP3422_GAIN_8;

/**
 * @param {number} pinBase
 * @param {number} spiChannel
 * @return {number}
 */
tsickle_declare_module.wiring_pi.mcp4802Setup = function(pinBase, spiChannel) {};

/**
 * @param {number} pinBase
 * @param {number} i2cAddress
 * @param {number} frequency
 * @return {number}
 */
tsickle_declare_module.wiring_pi.pca9685Setuo = function(pinBase, i2cAddress, frequency) {};

/**
 * @param {number} pinBase
 * @param {number} i2cAddress
 * @return {number}
 */
tsickle_declare_module.wiring_pi.pcf8574Setup = function(pinBase, i2cAddress) {};

/**
 * @param {number} pinBase
 * @param {number} i2cAddress
 * @return {number}
 */
tsickle_declare_module.wiring_pi.pcf8591Setup = function(pinBase, i2cAddress) {};

/**
 * @param {number} pinBase
 * @return {number}
 */
tsickle_declare_module.wiring_pi.sn3218Setup = function(pinBase) {};

/**
 * @param {number} pinBase
 * @param {number} numPins
 * @param {number} dataPin
 * @param {number} clockPin
 * @param {number} latchPin
 * @return {number}
 */
tsickle_declare_module.wiring_pi.sr595Setup = function(pinBase, numPins, dataPin, clockPin, latchPin) {};

/**
 * @param {number} clockPin
 * @param {number} dataPin
 * @param {number} csPin
 * @return {void}
 */
tsickle_declare_module.wiring_pi.ds1302setup = function(clockPin, dataPin, csPin) {};

/**
 * @param {number} reg
 * @return {number}
 */
tsickle_declare_module.wiring_pi.ds1302rtcRead = function(reg) {};

/**
 * @param {number} reg
 * @param {number} data
 * @return {void}
 */
tsickle_declare_module.wiring_pi.ds1302rtcWrite = function(reg, data) {};

/**
 * @param {number} address
 * @return {number}
 */
tsickle_declare_module.wiring_pi.ds1302ramRead = function(address) {};

/**
 * @param {number} address
 * @param {number} data
 * @return {void}
 */
tsickle_declare_module.wiring_pi.ds1302ramWrite = function(address, data) {};

/**
 * @return {!Array<number>}
 */
tsickle_declare_module.wiring_pi.ds1302clockRead = function() {};

/**
 * @param {!Array<number>} clcokData
 * @return {void}
 */
tsickle_declare_module.wiring_pi.ds1302clockWrite = function(clcokData) {};

/**
 * @param {number} diodes
 * @param {number} resistors
 * @return {void}
 */
tsickle_declare_module.wiring_pi.ds1302trickleCharge = function(diodes, resistors) {};

/**
 * @param {number} pinBase
 * @return {number}
 */
tsickle_declare_module.wiring_pi.gertboardAnalogSetup = function(pinBase) {};

/**
 * @param {number} rows
 * @param {number} cols
 * @param {number} bits
 * @param {number} rs
 * @param {number} strb
 * @param {number} d0
 * @param {number} d1
 * @param {number} d2
 * @param {number} d3
 * @param {number} d4
 * @param {number} d5
 * @param {number} d6
 * @param {number} d7
 * @return {number}
 */
tsickle_declare_module.wiring_pi.lcdInit = function(rows, cols, bits, rs, strb, d0, d1, d2, d3, d4, d5, d6, d7) {};

/**
 * @param {number} fd
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcdHome = function(fd) {};

/**
 * @param {number} fd
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcdClear = function(fd) {};

/**
 * @param {number} fd
 * @param {number} state
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcdDisplay = function(fd, state) {};

/**
 * @param {number} fd
 * @param {number} state
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcdCursor = function(fd, state) {};

/**
 * @param {number} fd
 * @param {number} state
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcdCursorBlink = function(fd, state) {};

/**
 * @param {number} fd
 * @param {number} command
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcdSendCommand = function(fd, command) {};

/**
 * @param {number} fd
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcdPosition = function(fd, x, y) {};

/**
 * @param {number} fd
 * @param {number} index
 * @param {!Array<number>} data
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcdCharDef = function(fd, index, data) {};

/**
 * @param {number} fd
 * @param {number} data
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcdPutchar = function(fd, data) {};

/**
 * @param {number} fd
 * @param {string} data
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcdPuts = function(fd, data) {};

/**
 * @param {number} fd
 * @param {string} data
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcdPrintf = function(fd, data) {};
 /** @type {number} */
tsickle_declare_module.wiring_pi.MAX_LCDS;

/**
 * @return {number}
 */
tsickle_declare_module.wiring_pi.lcd128x64setup = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcd128x64setOrigin = function(x, y) {};

/**
 * @param {number} orientation
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcd128x64setOrientation = function(orientation) {};

/**
 * @return {!Array<number>}
 */
tsickle_declare_module.wiring_pi.lcd128x64orientCoordinates = function() {};

/**
 * @return {!Array<number>}
 */
tsickle_declare_module.wiring_pi.lcd128x64getScreenSize = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} color
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcd128x64point = function(x, y, color) {};

/**
 * @param {number} x0
 * @param {number} y0
 * @param {number} x1
 * @param {number} y1
 * @param {number} color
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcd128x64line = function(x0, y0, x1, y1, color) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} color
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcd128x64lineTo = function(x, y, color) {};

/**
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @param {number} color
 * @param {number} filled
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcd128x64rectangle = function(x1, y1, x2, y2, color, filled) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} r
 * @param {number} color
 * @param {number} filled
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcd128x64circle = function(x, y, r, color, filled) {};

/**
 * @param {number} cx
 * @param {number} cy
 * @param {number} xRadius
 * @param {number} yRadius
 * @param {number} color
 * @param {number} filled
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcd128x64ellipse = function(cx, cy, xRadius, yRadius, color, filled) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} c
 * @param {number} bgColor
 * @param {number} fgColor
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcd128x64putchar = function(x, y, c, bgColor, fgColor) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {string} data
 * @param {number} bgColor
 * @param {number} fgColor
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcd128x64puts = function(x, y, data, bgColor, fgColor) {};

/**
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcd128x64update = function() {};

/**
 * @param {number} color
 * @return {void}
 */
tsickle_declare_module.wiring_pi.lcd128x64clear = function(color) {};

/**
 * @param {number} pin
 * @return {!Array<number>}
 */
tsickle_declare_module.wiring_pi.maxDetectRead = function(pin) {};

/**
 * @param {number} pin
 * @return {!Array<number>}
 */
tsickle_declare_module.wiring_pi.readRHT03 = function(pin) {};

/**
 * @param {number} pinBase
 * @return {number}
 */
tsickle_declare_module.wiring_pi.piFaceSetup = function(pinBase) {};

/**
 * @param {number} clear
 * @return {void}
 */
tsickle_declare_module.wiring_pi.piGlowSetup = function(clear) {};

/**
 * @param {number} leg
 * @param {number} ring
 * @param {number} intensity
 * @return {void}
 */
tsickle_declare_module.wiring_pi.piGlow1 = function(leg, ring, intensity) {};

/**
 * @param {number} leg
 * @param {number} intensity
 * @return {void}
 */
tsickle_declare_module.wiring_pi.piGlowLeg = function(leg, intensity) {};

/**
 * @param {number} ring
 * @param {number} intensity
 * @return {void}
 */
tsickle_declare_module.wiring_pi.piGlowRing = function(ring, intensity) {};
 /** @type {number} */
tsickle_declare_module.wiring_pi.PIGLOW_RED;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PIGLOW_YELLOW;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PIGLOW_ORANGE;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PIGLOW_GREEN;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PIGLOW_BLUE;
 /** @type {number} */
tsickle_declare_module.wiring_pi.PIGLOW_WHITE;

/**
 * @param {number} dPin
 * @param {number} cPin
 * @param {number} lPin
 * @return {number}
 */
tsickle_declare_module.wiring_pi.setupNesJoystick = function(dPin, cPin, lPin) {};

/**
 * @param {number} joystick
 * @return {number}
 */
tsickle_declare_module.wiring_pi.readNesJoystick = function(joystick) {};
 /** @type {number} */
tsickle_declare_module.wiring_pi.MAX_NES_JOYSTICKS;
 /** @type {number} */
tsickle_declare_module.wiring_pi.NES_RIGHT;
 /** @type {number} */
tsickle_declare_module.wiring_pi.NES_LEFT;
 /** @type {number} */
tsickle_declare_module.wiring_pi.NES_DOWN;
 /** @type {number} */
tsickle_declare_module.wiring_pi.NES_UP;
 /** @type {number} */
tsickle_declare_module.wiring_pi.NES_START;
 /** @type {number} */
tsickle_declare_module.wiring_pi.NES_SELECT;
 /** @type {number} */
tsickle_declare_module.wiring_pi.NES_A;
 /** @type {number} */
tsickle_declare_module.wiring_pi.NES_B;

/**
 * @param {number} i2cAddress
 * @param {number} integrationTime
 * @param {number} gain
 * @return {number}
 */
tsickle_declare_module.wiring_pi.tcs34725Setup = function(i2cAddress, integrationTime, gain) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.wiring_pi.tcs34725RGBC = function() {};
 /** @type {number} */
tsickle_declare_module.wiring_pi.tcs34725RGBC.prototype.r;
 /** @type {number} */
tsickle_declare_module.wiring_pi.tcs34725RGBC.prototype.g;
 /** @type {number} */
tsickle_declare_module.wiring_pi.tcs34725RGBC.prototype.b;
 /** @type {number} */
tsickle_declare_module.wiring_pi.tcs34725RGBC.prototype.c;

/**
 * @param {number} id
 * @return {!tcs34725RGBC}
 */
tsickle_declare_module.wiring_pi.tcs34725ReadRGBC = function(id) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.wiring_pi.tcs34725HSV = function() {};
 /** @type {number} */
tsickle_declare_module.wiring_pi.tcs34725HSV.prototype.h;
 /** @type {number} */
tsickle_declare_module.wiring_pi.tcs34725HSV.prototype.s;
 /** @type {number} */
tsickle_declare_module.wiring_pi.tcs34725HSV.prototype.v;

/**
 * @param {number} id
 * @return {!tcs34725HSV}
 */
tsickle_declare_module.wiring_pi.tcs34725ReadHSV = function(id) {};

/**
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @return {void}
 */
tsickle_declare_module.wiring_pi.tcs34725GetCorrelatedColorTemperature = function(r, g, b) {};

/**
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @return {void}
 */
tsickle_declare_module.wiring_pi.tcs34725GetIlluminance = function(r, g, b) {};

/**
 * @param {number} id
 * @param {number} aien
 * @return {void}
 */
tsickle_declare_module.wiring_pi.tcs34725SetInterrupt = function(id, aien) {};

/**
 * @param {number} id
 * @return {void}
 */
tsickle_declare_module.wiring_pi.tcs34725ClearInterrupt = function(id) {};

/**
 * @param {number} id
 * @param {number} low
 * @param {number} high
 * @return {void}
 */
tsickle_declare_module.wiring_pi.tcs34725SetInterruptLimits = function(id, low, high) {};

/**
 * @param {number} id
 * @return {void}
 */
tsickle_declare_module.wiring_pi.tcs34725Enable = function(id) {};

/**
 * @param {number} id
 * @return {void}
 */
tsickle_declare_module.wiring_pi.tcs34725Disable = function(id) {};
 /** @type {number} */
tsickle_declare_module.wiring_pi.TCS34725_ATIME_2_4MS;
 /** @type {number} */
tsickle_declare_module.wiring_pi.TCS34725_ATIME_24MS;
 /** @type {number} */
tsickle_declare_module.wiring_pi.TCS34725_ATIME_50MS;
 /** @type {number} */
tsickle_declare_module.wiring_pi.TCS34725_ATIME_101MS;
 /** @type {number} */
tsickle_declare_module.wiring_pi.TCS34725_ATIME_154MS;
 /** @type {number} */
tsickle_declare_module.wiring_pi.TCS34725_ATIME_700MS;
 /** @type {number} */
tsickle_declare_module.wiring_pi.TCS34725_GAIN_1;
 /** @type {number} */
tsickle_declare_module.wiring_pi.TCS34725_GAIN_4;
 /** @type {number} */
tsickle_declare_module.wiring_pi.TCS34725_GAIN_16;
 /** @type {number} */
tsickle_declare_module.wiring_pi.TCS34725_GAIN_60;
 /** @type {number} */
tsickle_declare_module.wiring_pi.TCS34725_MAX_TCS34725;
 /** @type {string} */
tsickle_declare_module.wiring_pi.VERSION;
