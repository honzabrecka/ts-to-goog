/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/weixin-app/index.d.ts:
/** @const */
var wx = {};
/**
 * @record
 * @struct
 */
wx.DataResponse = function() {};
 /** @type {?} */
wx.DataResponse.prototype.data;
/**
 * @record
 * @struct
 */
wx.ErrMsgResponse = function() {};
 /** @type {string} */
wx.ErrMsgResponse.prototype.errMsg;
/**
 * @record
 * @struct
 */
wx.TempFileResponse = function() {};
 /** @type {string} */
wx.TempFileResponse.prototype.tempFilePath;
/**
 * @record
 * @struct
 */
wx.PageOptions = function() {};
 /** @type {?} */
wx.PageOptions.prototype.data;

/* TODO: IndexSignature: wx */

/**
 * 生命周期函数--监听页面加载
 * @this {!wx.Page}
 * @param {?} options
 * @return {void}
 */
wx.PageOptions.prototype.onLoad = function(options) {};

/**
 * 生命周期函数--监听页面渲染完成
 * @this {!wx.Page}
 * @return {void}
 */
wx.PageOptions.prototype.onReady = function() {};

/**
 * 生命周期函数--监听页面显示
 * @this {!wx.Page}
 * @return {void}
 */
wx.PageOptions.prototype.onShow = function() {};

/**
 * 生命周期函数--监听页面隐藏
 * @this {!wx.Page}
 * @return {void}
 */
wx.PageOptions.prototype.onHide = function() {};

/**
 * 生命周期函数--监听页面卸载
 * @this {!wx.Page}
 * @return {void}
 */
wx.PageOptions.prototype.onUnload = function() {};
/**
 * @record
 * @struct
 */
wx.AppOptions = function() {};

/* TODO: IndexSignature: wx */

/**
 * 生命周期函数--监听小程序初始化
 * 当小程序初始化完成时，会触发 onLaunch（全局只触发一次）
 * @this {!wx.App}
 * @return {void}
 */
wx.AppOptions.prototype.onLaunch = function() {};

/**
 * 生命周期函数--监听小程序显示
 * 当小程序启动，或从后台进入前台显示，会触发 onShow
 * @this {!wx.App}
 * @return {void}
 */
wx.AppOptions.prototype.onShow = function() {};

/**
 * 生命周期函数--监听小程序隐藏
 * 当小程序从前台进入后台，会触发 onHide
 * @this {!wx.App}
 * @return {void}
 */
wx.AppOptions.prototype.onHide = function() {};
/**
 * @record
 * @struct
 */
wx.BaseOptions = function() {};

/**
 * 接口调用成功的回调函数
 * @param {?} res
 * @return {void}
 */
wx.BaseOptions.prototype.success = function(res) {};

/**
 * 接口调用失败的回调函数
 * @param {?} res
 * @return {void}
 */
wx.BaseOptions.prototype.fail = function(res) {};

/**
 * 接口调用结束的回调函数（调用成功、失败都会执行）
 * @param {?} res
 * @return {void}
 */
wx.BaseOptions.prototype.complete = function(res) {};
/**
 * @record
 * @struct
 */
wx.RequestHeader = function() {};

/* TODO: IndexSignature: wx */
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.RequestOptions = function() {};
 /** @type {string} */
wx.RequestOptions.prototype.url;
 /** @type {?} */
wx.RequestOptions.prototype.data;
 /** @type {!wx.RequestHeader} */
wx.RequestOptions.prototype.header;
 /** @type {string} */
wx.RequestOptions.prototype.method;

/**
 * 收到开发者服务成功返回的回调函数，res = {data: '开发者服务器返回的内容'}
 * @param {!wx.DataResponse} res
 * @return {void}
 */
wx.RequestOptions.prototype.success = function(res) {};

/**
 * wx.request发起的是https请求。一个微信小程序，同时只能有5个网络请求连接。
 * @param {!wx.RequestOptions} options
 * @return {void}
 */
wx.request = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.UploadFileOptions = function() {};
 /** @type {string} */
wx.UploadFileOptions.prototype.url;
 /** @type {string} */
wx.UploadFileOptions.prototype.filePath;
 /** @type {string} */
wx.UploadFileOptions.prototype.name;
 /** @type {!wx.RequestHeader} */
wx.UploadFileOptions.prototype.header;
 /** @type {?} */
wx.UploadFileOptions.prototype.formData;

/**
 * 将本地资源上传到开发者服务器。
 * 如页面通过 wx.chooseImage 等接口获取到一个本地资源的临时文件路径后，
 * 可通过此接口将本地资源上传到指定服务器。
 * 客户端发起一个 HTTPS POST 请求，
 * 其中 Content-Type 为 multipart/form-data 。
 * @param {!wx.UploadFileOptions} options
 * @return {void}
 */
wx.uploadFile = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.DownloadFileOptions = function() {};
 /** @type {string} */
wx.DownloadFileOptions.prototype.url;
 /** @type {string} */
wx.DownloadFileOptions.prototype.type;
 /** @type {!wx.RequestHeader} */
wx.DownloadFileOptions.prototype.header;

/**
 * 下载成功后以 tempFilePath 的形式传给页面，res = {tempFilePath: '文件的临时路径'}
 * @param {!wx.TempFileResponse} res
 * @return {void}
 */
wx.DownloadFileOptions.prototype.success = function(res) {};

/**
 * 下载文件资源到本地。客户端直接发起一个 HTTP GET 请求，
 * 把下载到的资源根据 type 进行处理，并返回文件的本地临时路径。
 * @param {!wx.DownloadFileOptions} options
 * @return {void}
 */
wx.downloadFile = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.ConnectSocketOptions = function() {};
 /** @type {string} */
wx.ConnectSocketOptions.prototype.url;
 /** @type {?} */
wx.ConnectSocketOptions.prototype.data;
 /** @type {!wx.RequestHeader} */
wx.ConnectSocketOptions.prototype.header;
 /** @type {string} */
wx.ConnectSocketOptions.prototype.method;

/**
 * 创建一个 WebSocket 连接；
 * 一个微信小程序同时只能有一个 WebSocket 连接，
 * 如果当前已存在一个 WebSocket 连接，
 * 会自动关闭该连接，并重新创建一个 WebSocket 连接。
 * @param {!wx.ConnectSocketOptions} options
 * @return {void}
 */
wx.connectSocket = function(options) {};

/**
 * 监听WebSocket连接打开事件。
 * @param {function(): void} callback
 * @return {void}
 */
wx.onSocketOpen = function(callback) {};

/**
 * 监听WebSocket错误。
 * @param {function(?): void} callback
 * @return {void}
 */
wx.onSocketError = function(callback) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.SendSocketMessageOptions = function() {};
 /** @type {string} */
wx.SendSocketMessageOptions.prototype.data;

/**
 * 通过 WebSocket 连接发送数据，需要先 wx.connectSocket，
 * 并在 wx.onSocketOpen 回调之后才能发送。
 * @param {!wx.SendSocketMessageOptions} options
 * @return {void}
 */
wx.sendSocketMessage = function(options) {};

/**
 * 监听WebSocket接受到服务器的消息事件。
 * @param {function(!wx.DataResponse): void} callback
 * @return {void}
 */
wx.onSocketMessage = function(callback) {};

/**
 * 关闭WebSocket连接。
 * @return {void}
 */
wx.closeSocket = function() {};

/**
 * 监听WebSocket关闭。
 * @param {function(): void} callback
 * @return {void}
 */
wx.onSocketClose = function(callback) {};

/** @typedef {string} */
wx.ImageSizeType;

/** @typedef {string} */
wx.ImageSourceType;

/** @typedef {string} */
wx.VideoSourceType;

/** @typedef {string} */
wx.CameraDevice;
/**
 * @record
 * @struct
 */
wx.TempFilesData = function() {};
 /** @type {string} */
wx.TempFilesData.prototype.tempFilePaths;
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.ChooseImageOptions = function() {};
 /** @type {number} */
wx.ChooseImageOptions.prototype.count;
 /** @type {!Array<string>} */
wx.ChooseImageOptions.prototype.sizeType;
 /** @type {!Array<string>} */
wx.ChooseImageOptions.prototype.sourceType;

/**
 * 成功则返回图片的本地文件路径列表 tempFilePaths
 * @param {!wx.TempFilesData} res
 * @return {void}
 */
wx.ChooseImageOptions.prototype.success = function(res) {};

/**
 * 从本地相册选择图片或使用相机拍照。
 * @param {!wx.ChooseImageOptions} options
 * @return {void}
 */
wx.chooseImage = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.PreviewImageOptions = function() {};
 /** @type {string} */
wx.PreviewImageOptions.prototype.current;
 /** @type {!Array<string>} */
wx.PreviewImageOptions.prototype.urls;

/**
 * 预览图片。
 * @param {!wx.PreviewImageOptions} options
 * @return {void}
 */
wx.previewImage = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.GetImageInfoOptions = function() {};
 /** @type {string} */
wx.GetImageInfoOptions.prototype.src;

/**
 * 获取图片信息
 * @param {!wx.GetImageInfoOptions} options
 * @return {void}
 */
wx.getImageInfo = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.StartRecordOptions = function() {};

/**
 * 录音成功后调用，返回录音文件的临时文件路径，res = {tempFilePath: '录音文件的临时路径'}
 * @param {!wx.TempFileResponse} res
 * @return {void}
 */
wx.StartRecordOptions.prototype.success = function(res) {};

/**
 * 开始录音。当主动调用wx.stopRecord，
 * 或者录音超过1分钟时自动结束录音，返回录音文件的临时文件路径。
 * 注：文件的临时路径，在小程序本次启动期间可以正常使用，
 * 如需持久保存，需在主动调用wx.saveFile，在小程序下次启动时才能访问得到。
 * @param {!wx.StartRecordOptions} options
 * @return {void}
 */
wx.startRecord = function(options) {};

/**
 * ​ 主动调用停止录音。
 * @return {void}
 */
wx.stopRecord = function() {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.PlayVoiceOptions = function() {};
 /** @type {string} */
wx.PlayVoiceOptions.prototype.filePath;

/**
 * 开始播放语音，同时只允许一个语音文件正在播放，
 * 如果前一个语音文件还没播放完，将中断前一个语音播放。
 * @param {!wx.PlayVoiceOptions} options
 * @return {void}
 */
wx.playVoice = function(options) {};

/**
 * 暂停正在播放的语音。
 * 再次调用wx.playVoice播放同一个文件时，会从暂停处开始播放。
 * 如果想从头开始播放，需要先调用 wx.stopVoice。
 * @return {void}
 */
wx.pauseVoice = function() {};

/**
 * 结束播放语音。
 * @return {void}
 */
wx.stopVoice = function() {};
/**
 * @record
 * @struct
 */
wx.BackgroundAudioPlayerState = function() {};
 /** @type {number} */
wx.BackgroundAudioPlayerState.prototype.duration;
 /** @type {number} */
wx.BackgroundAudioPlayerState.prototype.currentPosition;
 /** @type {number} */
wx.BackgroundAudioPlayerState.prototype.status;
 /** @type {number} */
wx.BackgroundAudioPlayerState.prototype.downloadPercent;
 /** @type {string} */
wx.BackgroundAudioPlayerState.prototype.dataUrl;

/** @typedef {function(!wx.BackgroundAudioPlayerState): void} */
wx.GetBackgroundAudioPlayerStateSuccessCallback;
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.GetBackgroundAudioPlayerStateOptions = function() {};
 /** @type {function(!wx.BackgroundAudioPlayerState): void} */
wx.GetBackgroundAudioPlayerStateOptions.prototype.success;

/**
 * 接口调用失败的回调函数
 * @return {void}
 */
wx.GetBackgroundAudioPlayerStateOptions.prototype.fail = function() {};

/**
 * 接口调用结束的回调函数（调用成功、失败都会执行）
 * @return {void}
 */
wx.GetBackgroundAudioPlayerStateOptions.prototype.complete = function() {};

/**
 * 获取音乐播放状态。
 * @param {!wx.GetBackgroundAudioPlayerStateOptions} options
 * @return {void}
 */
wx.getBackgroundAudioPlayerState = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.PlayBackgroundAudioOptions = function() {};
 /** @type {string} */
wx.PlayBackgroundAudioOptions.prototype.dataUrl;
 /** @type {string} */
wx.PlayBackgroundAudioOptions.prototype.title;
 /** @type {string} */
wx.PlayBackgroundAudioOptions.prototype.coverImgUrl;

/**
 * 播放音乐，同时只能有一首音乐正在播放。
 * @param {!wx.PlayBackgroundAudioOptions} options
 * @return {void}
 */
wx.playBackgroundAudio = function(options) {};

/**
 * 暂停播放音乐。
 * @return {void}
 */
wx.pauseBackgroundAudio = function() {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.SeekBackgroundAudioOptions = function() {};
 /** @type {number} */
wx.SeekBackgroundAudioOptions.prototype.position;

/**
 * 控制音乐播放进度。
 * @param {!wx.SeekBackgroundAudioOptions} options
 * @return {void}
 */
wx.seekBackgroundAudio = function(options) {};

/**
 * 停止播放音乐。
 * @return {void}
 */
wx.stopBackgroundAudio = function() {};

/**
 * 监听音乐播放。
 * @param {function(): void} callback
 * @return {void}
 */
wx.onBackgroundAudioPlay = function(callback) {};

/**
 * 监听音乐暂停。
 * @param {function(): void} callback
 * @return {void}
 */
wx.onBackgroundAudioPause = function(callback) {};

/**
 * 监听音乐停止。
 * @param {function(): void} callback
 * @return {void}
 */
wx.onBackgroundAudioStop = function(callback) {};
/**
 * @record
 * @struct
 */
wx.AudioContext = function() {};

/**
 * 音频的地址
 * @param {string} src
 * @return {void}
 */
wx.AudioContext.prototype.setSrc = function(src) {};

/**
 * 播放
 * @return {void}
 */
wx.AudioContext.prototype.play = function() {};

/**
 * 暂停
 * @return {void}
 */
wx.AudioContext.prototype.pause = function() {};

/**
 * 跳转到指定位置，单位 s
 * @param {number} position
 * @return {void}
 */
wx.AudioContext.prototype.seek = function(position) {};

/**
 * 创建并返回 audio 上下文 audioContext 对象
 * \@example 
 * <!-- audio.wxml -->
 * <audio  src="{{src}}" id="myAudio" ></audio>
 * <button type="primary" bindtap="audioPlay">播放</button>
 * <button type="primary" bindtap="audioPause">暂停</button>
 * <button type="primary" bindtap="audio14">设置当前播放时间为14秒</button>
 * <button type="primary" bindtap="audioStart">回到开头</button>
 * // audio.js
 * Page({
 * onReady: function (e) {
 * 	// 使用 wx.createAudioContext 获取 audio 上下文 context
 * 	this.audioCtx = wx.createAudioContext('myAudio')
 * 	this.audioCtx.setSrc('http://ws.stream.qqmusic.qq.com/
 * M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&
 * uin=346897220&vkey=6292F51E1E384E06DCBDC9AB7C49FD713D632D313AC4858BACB8DDD29067D3C601481D36E62053BF8DFEAF74C0A5CCFADD6471160CAF3E6A&
 * fromtag=46')
 * 	this.audioCtx.play()
 * },
 * data: {
 * 	src: ''
 * },
 * audioPlay: function () {
 * 	this.audioCtx.play()
 * },
 * audioPause: function () {
 * 	this.audioCtx.pause()
 * },
 * audio14: function () {
 * 	this.audioCtx.seek(14)
 * },
 * audioStart: function () {
 * 	this.audioCtx.seek(0)
 * }
 * })
 * @param {string} audioId audio标签id <audio  src="{{src}}" id="myAudio" ></audio>
 * @return {!wx.AudioContext}
 */
wx.createAudioContext = function(audioId) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.ChooseVideoOptions = function() {};
 /** @type {!Array<string>} */
wx.ChooseVideoOptions.prototype.sourceType;
 /** @type {number} */
wx.ChooseVideoOptions.prototype.maxDuration;
 /** @type {!Array<string>} */
wx.ChooseVideoOptions.prototype.camera;

/**
 * 接口调用成功，返回视频文件的临时文件路径，详见返回参数说明
 * @param {!wx.VideoData} res
 * @return {void}
 */
wx.ChooseVideoOptions.prototype.success = function(res) {};

/**
 * 拍摄视频或从手机相册中选视频，返回视频的临时文件路径。
 * @param {!wx.ChooseVideoOptions} options
 * @return {void}
 */
wx.chooseVideo = function(options) {};
/**
 * @record
 * @struct
 */
wx.VideoContext = function() {};

/**
 * 播放
 * @return {void}
 */
wx.VideoContext.prototype.play = function() {};

/**
 * 暂停
 * @return {void}
 */
wx.VideoContext.prototype.pause = function() {};

/**
 * 跳转到指定位置，单位 s
 * @param {number} position
 * @return {void}
 */
wx.VideoContext.prototype.seek = function(position) {};

/**
 * 发送弹幕，danmu 包含两个属性 text, color。
 * @param {{text: string, color: (string|number)}} danmu
 * @return {void}
 */
wx.VideoContext.prototype.sendDanmu = function(danmu) {};
/**
 * @record
 * @struct
 */
wx.VideoData = function() {};
 /** @type {string} */
wx.VideoData.prototype.tempFilePath;
 /** @type {number} */
wx.VideoData.prototype.duration;
 /** @type {number} */
wx.VideoData.prototype.size;
 /** @type {number} */
wx.VideoData.prototype.height;
 /** @type {number} */
wx.VideoData.prototype.width;

/**
 * 创建并返回 video 上下文 videoContext 对象
 * @param {string} videoId video标签id <video  src="{{src}}" id="myVideo" ></video>
 * @return {!wx.VideoContext}
 */
wx.createVideoContext = function(videoId) {};
/**
 * @record
 * @struct
 */
wx.SavedFileData = function() {};
 /** @type {string} */
wx.SavedFileData.prototype.savedFilePath;
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.SaveFileOptions = function() {};
 /** @type {string} */
wx.SaveFileOptions.prototype.tempFilePath;

/**
 * 返回文件的保存路径，res = {savedFilePath: '文件的保存路径'}
 * @param {!wx.SavedFileData} res
 * @return {void}
 */
wx.SaveFileOptions.prototype.success = function(res) {};

/**
 * 保存文件到本地。
 * 本地文件存储的大小限制为 10M
 * @param {!wx.SaveFileOptions} options
 * @return {void}
 */
wx.saveFile = function(options) {};
/**
 * @record
 * @struct
 */
wx.File = function() {};
 /** @type {string} */
wx.File.prototype.filePath;
 /** @type {number} */
wx.File.prototype.createTime;
 /** @type {number} */
wx.File.prototype.size;
/**
 * @record
 * @struct
 */
wx.GetSavedFileListData = function() {};
 /** @type {string} */
wx.GetSavedFileListData.prototype.errMsg;
 /** @type {!Array<!wx.File>} */
wx.GetSavedFileListData.prototype.fileList;
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.GetSavedFileListOptions = function() {};

/**
 * 接口调用成功的回调函数
 * @param {!wx.GetSavedFileListData} res
 * @return {void}
 */
wx.GetSavedFileListOptions.prototype.success = function(res) {};

/**
 * 获取本地已保存的文件列表
 * @param {!wx.GetSavedFileListOptions} options
 * @return {void}
 */
wx.getSavedFileList = function(options) {};
/**
 * @record
 * @struct
 */
wx.SavedFileInfoData = function() {};
 /** @type {string} */
wx.SavedFileInfoData.prototype.errMsg;
 /** @type {number} */
wx.SavedFileInfoData.prototype.size;
 /** @type {number} */
wx.SavedFileInfoData.prototype.createTime;
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.GetSavedFileInfoOptions = function() {};
 /** @type {string} */
wx.GetSavedFileInfoOptions.prototype.filePath;

/**
 * 接口调用成功的回调函数
 * @param {!wx.SavedFileInfoData} res
 * @return {void}
 */
wx.GetSavedFileInfoOptions.prototype.success = function(res) {};

/**
 * 获取本地文件的文件信息
 * @param {!wx.GetSavedFileInfoOptions} options
 * @return {void}
 */
wx.getSavedFileInfo = function(options) {};

/** @typedef {!wx.BaseOptions} */
wx.RemoveSavedFileOptions;

/**
 * 删除本地存储的文件
 * @param {!wx.BaseOptions} options
 * @return {void}
 */
wx.removeSavedFile = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.OpenDocumentOptions = function() {};
 /** @type {string} */
wx.OpenDocumentOptions.prototype.filePath;

/**
 * 新开页面打开文档，支持格式：doc, xls, ppt, pdf, docx, xlsx, pptx
 * @param {!wx.OpenDocumentOptions} options
 * @return {void}
 */
wx.openDocument = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.SetStorageOptions = function() {};
 /** @type {string} */
wx.SetStorageOptions.prototype.key;
 /** @type {?} */
wx.SetStorageOptions.prototype.data;

/**
 * 将数据存储在本地缓存中指定的 key 中，
 * 会覆盖掉原来该 key 对应的内容，这是一个异步接口。
 * @param {!wx.SetStorageOptions} options
 * @return {void}
 */
wx.setStorage = function(options) {};

/**
 * 将 data 存储在本地缓存中指定的 key 中，
 * 会覆盖掉原来该 key 对应的内容，这是一个同步接口。
 * 
 * @param {string} key
 * @param {?} data
 * @return {void}
 */
wx.setStorageSync = function(key, data) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.GetStorageOptions = function() {};
 /** @type {string} */
wx.GetStorageOptions.prototype.key;

/**
 * 接口调用的回调函数,res = {data: key对应的内容}
 * @param {!wx.DataResponse} res
 * @return {void}
 */
wx.GetStorageOptions.prototype.success = function(res) {};

/**
 * 从本地缓存中异步获取指定 key 对应的内容。
 * @param {!wx.GetStorageOptions} options
 * @return {void}
 */
wx.getStorage = function(options) {};

/**
 * 从本地缓存中同步获取指定 key 对应的内容。
 * 
 * @param {string} key
 * @return {?}
 */
wx.getStorageSync = function(key) {};
/**
 * @record
 * @struct
 */
wx.StorageInfo = function() {};
 /** @type {!Array<string>} */
wx.StorageInfo.prototype.keys;
 /** @type {number} */
wx.StorageInfo.prototype.currentSize;
 /** @type {number} */
wx.StorageInfo.prototype.limitSize;
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.GetStorageInfoOptions = function() {};

/**
 * @param {!wx.StorageInfo} res
 * @return {void}
 */
wx.GetStorageInfoOptions.prototype.success = function(res) {};

/**
 * 异步获取当前storage的相关信息
 * @param {!wx.GetStorageInfoOptions} options
 * @return {void}
 */
wx.getStorageInfo = function(options) {};

/**
 * @return {!wx.GetStorageInfoOptions}
 */
wx.getStorageInfoSync = function() {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.RemoveStorageOptions = function() {};
 /** @type {string} */
wx.RemoveStorageOptions.prototype.key;

/**
 * @param {!wx.DataResponse} res
 * @return {void}
 */
wx.RemoveStorageOptions.prototype.success = function(res) {};

/**
 * @param {!wx.RemoveStorageOptions} options
 * @return {void}
 */
wx.removeStorage = function(options) {};

/**
 * @param {string} key
 * @return {!wx.DataResponse}
 */
wx.removeStorageSync = function(key) {};

/**
 * 清理本地数据缓存。
 * @return {void}
 */
wx.clearStorage = function() {};

/**
 * 同步清理本地数据缓存
 * @return {void}
 */
wx.clearStorageSync = function() {};
/**
 * @record
 * @struct
 */
wx.LocationData = function() {};
 /** @type {number} */
wx.LocationData.prototype.latitude;
 /** @type {number} */
wx.LocationData.prototype.longitude;
 /** @type {number} */
wx.LocationData.prototype.speed;
 /** @type {number} */
wx.LocationData.prototype.accuracy;
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.GetLocationOptions = function() {};
 /** @type {string} */
wx.GetLocationOptions.prototype.type;

/**
 * 接口调用成功的回调函数，返回内容详见返回参数说明。
 * @param {!wx.LocationData} res
 * @return {void}
 */
wx.GetLocationOptions.prototype.success = function(res) {};

/**
 * 获取当前的地理位置、速度。
 * @param {!wx.GetLocationOptions} options
 * @return {void}
 */
wx.getLocation = function(options) {};
/**
 * @record
 * @struct
 */
wx.ChooseLocationData = function() {};
 /** @type {string} */
wx.ChooseLocationData.prototype.name;
 /** @type {string} */
wx.ChooseLocationData.prototype.address;
 /** @type {number} */
wx.ChooseLocationData.prototype.latitude;
 /** @type {number} */
wx.ChooseLocationData.prototype.longitude;
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.ChooseLocationOptions = function() {};

/**
 * @param {!wx.ChooseLocationData} res
 * @return {void}
 */
wx.ChooseLocationOptions.prototype.success = function(res) {};

/**
 * 打开地图选择位置
 * @param {!wx.ChooseLocationOptions} options
 * @return {void}
 */
wx.chooseLocation = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.OpenLocationOptions = function() {};
 /** @type {number} */
wx.OpenLocationOptions.prototype.latitude;
 /** @type {number} */
wx.OpenLocationOptions.prototype.longitude;
 /** @type {number} */
wx.OpenLocationOptions.prototype.scale;
 /** @type {string} */
wx.OpenLocationOptions.prototype.name;
 /** @type {string} */
wx.OpenLocationOptions.prototype.address;

/**
 * 使用微信内置地图查看位置
 * @param {!wx.OpenLocationOptions} options
 * @return {void}
 */
wx.openLocation = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.GetCenterLocationOptions = function() {};

/**
 * @param {{longitude: number, latitude: number}} res
 * @return {void}
 */
wx.GetCenterLocationOptions.prototype.success = function(res) {};
/**
 * @record
 * @struct
 */
wx.MapContext = function() {};

/**
 * 获取当前地图中心的经纬度，返回的是 gcj02 坐标系，可以用于 wx.openLocation
 * @param {!wx.GetCenterLocationOptions} options
 * @return {!wx.OpenLocationOptions}
 */
wx.MapContext.prototype.getCenterLocation = function(options) {};

/**
 * 将地图中心移动到当前定位点，需要配合map组件的show-location使用
 * @return {void}
 */
wx.MapContext.prototype.moveToLocation = function() {};

/**
 * 创建并返回 map 上下文 mapContext 对象
 * @param {string} mapId
 * @return {!wx.MapContext}
 */
wx.createMapContext = function(mapId) {};
/**
 * @record
 * @struct
 */
wx.SystemInfo = function() {};
 /** @type {string} */
wx.SystemInfo.prototype.model;
 /** @type {number} */
wx.SystemInfo.prototype.pixelRatio;
 /** @type {number} */
wx.SystemInfo.prototype.windowWidth;
 /** @type {number} */
wx.SystemInfo.prototype.windowHeight;
 /** @type {string} */
wx.SystemInfo.prototype.language;
 /** @type {string} */
wx.SystemInfo.prototype.version;
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.GetSystemInfoOptions = function() {};

/**
 * 成功获取系统信息的回调
 * @param {!wx.SystemInfo} res
 * @return {void}
 */
wx.GetSystemInfoOptions.prototype.success = function(res) {};

/**
 * 获取系统信息。
 * @param {!wx.GetSystemInfoOptions} options
 * @return {void}
 */
wx.getSystemInfo = function(options) {};

/**
 * @return {!wx.SystemInfo}
 */
wx.getSystemInfoSync = function() {};

/** @typedef {string} */
wx.networkType;
/**
 * @record
 * @struct
 */
wx.NetworkTypeData = function() {};
 /** @type {string} */
wx.NetworkTypeData.prototype.networkType;
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.GetNetworkTypeOptions = function() {};

/**
 * 接口调用成功，返回网络类型 networkType
 * @param {!wx.NetworkTypeData} res
 * @return {void}
 */
wx.GetNetworkTypeOptions.prototype.success = function(res) {};

/**
 * 获取网络类型。
 * @param {!wx.GetNetworkTypeOptions} options
 * @return {void}
 */
wx.getNetworkType = function(options) {};

/**
 * 监听网络状态变化。
 * 基础库版本 1.1.0 开始支持，低版本需做兼容处理
 * 微信客户端 6.5.6 版本开始支持
 * @param {function({isConnected: boolean, networkType: string}): void} callback
 * @return {void}
 */
wx.onNetworkStatusChange = function(callback) {};
/**
 * @record
 * @struct
 */
wx.AccelerometerData = function() {};
 /** @type {number} */
wx.AccelerometerData.prototype.x;
 /** @type {number} */
wx.AccelerometerData.prototype.y;
 /** @type {number} */
wx.AccelerometerData.prototype.z;

/** @typedef {function(!wx.AccelerometerData): void} */
wx.AccelerometerChangeCallback;

/**
 * 监听重力感应数据，频率：5次/秒
 * @param {function(!wx.AccelerometerData): void} callback
 * @return {void}
 */
wx.onAccelerometerChange = function(callback) {};

/** @typedef {!wx.BaseOptions} */
wx.AccelerometerOptions;

/**
 * 开始监听加速度数据。
 * 基础库版本 1.1.0 开始支持，低版本需做兼容处理
 * 微信客户端 6.5.6 版本开始支持
 * @param {!wx.BaseOptions} options
 * @return {void}
 */
wx.startAccelerometer = function(options) {};

/**
 * 停止监听加速度数据。
 * 基础库版本 1.1.0 开始支持，低版本需做兼容处理
 * 微信客户端 6.5.6 版本开始支持
 * @param {!wx.BaseOptions} options
 * @return {void}
 */
wx.stopAccelerometer = function(options) {};
/**
 * @record
 * @struct
 */
wx.CompassData = function() {};
 /** @type {number} */
wx.CompassData.prototype.direction;

/** @typedef {function(!wx.CompassData): void} */
wx.CompassChangeCallback;

/**
 * 监听罗盘数据，频率：5次/秒，接口调用后会自动开始监听，可使用wx.stopCompass停止监听。
 * @param {function(!wx.CompassData): void} callback
 * @return {void}
 */
wx.onCompassChange = function(callback) {};

/** @typedef {!wx.BaseOptions} */
wx.CompassOptions;

/**
 * 开始监听罗盘数据。
 * 基础库版本 1.1.0 开始支持，低版本需做兼容处理
 * 微信客户端 6.5.6 版本开始支持
 * @param {!wx.BaseOptions} options
 * @return {void}
 */
wx.startCompass = function(options) {};

/**
 * @param {!wx.BaseOptions} options
 * @return {void}
 */
wx.stopCompass = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.MakePhoneCallOptions = function() {};
 /** @type {string} */
wx.MakePhoneCallOptions.prototype.phoneNumber;

/**
 * 拨打电话
 * @param {!wx.MakePhoneCallOptions} options
 * @return {void}
 */
wx.makePhoneCall = function(options) {};

/** @typedef {string} */
wx.scanType;
/**
 * @record
 * @struct
 */
wx.ScanCodeData = function() {};
 /** @type {string} */
wx.ScanCodeData.prototype.result;
 /** @type {string} */
wx.ScanCodeData.prototype.scanType;
 /** @type {string} */
wx.ScanCodeData.prototype.charSet;
 /** @type {string} */
wx.ScanCodeData.prototype.path;
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.ScanCodeOptions = function() {};

/**
 * @param {!wx.ScanCodeData} res
 * @return {void}
 */
wx.ScanCodeOptions.prototype.success = function(res) {};

/**
 * 调起客户端扫码界面，扫码成功后返回对应的结果
 * @param {!wx.ScanCodeOptions} options
 * @return {void}
 */
wx.scanCode = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.ClipboardDataOptions = function() {};
 /** @type {string} */
wx.ClipboardDataOptions.prototype.data;

/**
 * @param {!wx.DataResponse} res
 * @return {void}
 */
wx.ClipboardDataOptions.prototype.success = function(res) {};

/**
 * 设置系统剪贴板的内容
 * 基础库版本 1.1.0 开始支持，低版本需做兼容处理
 * 微信客户端 6.5.6 版本开始支持
 * @param {!wx.ClipboardDataOptions} options
 * @return {void}
 */
wx.setClipboardData = function(options) {};

/**
 * 获取系统剪贴板内容
 * 基础库版本 1.1.0 开始支持，低版本需做兼容处理
 * 微信客户端 6.5.6 版本开始支持
 * @param {!wx.ClipboardDataOptions} options
 * @return {void}
 */
wx.getClipboardData = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.OpenBluetoothAdapterOptions = function() {};

/**
 * @param {?} res
 * @return {void}
 */
wx.OpenBluetoothAdapterOptions.prototype.success = function(res) {};

/**
 * 初始化蓝牙适配器
 * @param {!wx.OpenBluetoothAdapterOptions} options
 * @return {void}
 */
wx.openBluetoothAdapter = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.CloseBluetoothAdapterOptions = function() {};

/**
 * @param {?} res
 * @return {void}
 */
wx.CloseBluetoothAdapterOptions.prototype.success = function(res) {};

/**
 * 关闭蓝牙模块。调用该方法将断开所有已建立的链接并释放系统资源
 * @param {!wx.CloseBluetoothAdapterOptions} options
 * @return {void}
 */
wx.closeBluetoothAdapter = function(options) {};
/**
 * @record
 * @struct
 */
wx.BluetoothAdapterState = function() {};
 /** @type {boolean} */
wx.BluetoothAdapterState.prototype.available;
 /** @type {boolean} */
wx.BluetoothAdapterState.prototype.discovering;
/**
 * @extends {wx.ErrMsgResponse}
 * @record
 * @struct
 */
wx.BluetoothAdapterStateData = function() {};
 /** @type {!wx.BluetoothAdapterState} */
wx.BluetoothAdapterStateData.prototype.adapterState;
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.GetBluetoothAdapterStateOptions = function() {};

/**
 * @param {!wx.BluetoothAdapterStateData} res
 * @return {void}
 */
wx.GetBluetoothAdapterStateOptions.prototype.success = function(res) {};

/**
 * 获取本机蓝牙适配器状态
 * @param {!wx.GetBluetoothAdapterStateOptions} options
 * @return {void}
 */
wx.getBluetoothAdapterState = function(options) {};

/**
 * 监听蓝牙适配器状态变化事件
 * @param {function(!wx.BluetoothAdapterState): void} callback
 * @return {void}
 */
wx.onBluetoothAdapterStateChange = function(callback) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.StartBluetoothDevicesDiscoveryOptions = function() {};
 /** @type {!Array<string>} */
wx.StartBluetoothDevicesDiscoveryOptions.prototype.services;

/**
 * @param {!wx.ErrMsgResponse} res
 * @return {void}
 */
wx.StartBluetoothDevicesDiscoveryOptions.prototype.success = function(res) {};

/**
 * 开始搜寻附近的蓝牙外围设备。注意，该操作比较耗费系统资源，请在搜索并连接到设备后调用 stop 方法停止搜索。
 * \@example 
 * // 以微信硬件平台的蓝牙智能灯为例，主服务的 UUID 是 FEE7。传入这个参数，只搜索主服务 UUID 为 FEE7 的设备
 * wx.startBluetoothDevicesDiscovery({
 * 	services: ['FEE7'],
 * 	success: function (res) {
 * 		console.log(res)
 * 	}
 * });
 * @param {!wx.StartBluetoothDevicesDiscoveryOptions} options
 * @return {void}
 */
wx.startBluetoothDevicesDiscovery = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.StopBluetoothDevicesDiscoveryOptions = function() {};

/**
 * @param {!wx.ErrMsgResponse} res
 * @return {void}
 */
wx.StopBluetoothDevicesDiscoveryOptions.prototype.success = function(res) {};

/**
 * 停止搜寻附近的蓝牙外围设备。请在确保找到需要连接的设备后调用该方法停止搜索。
 * @param {!wx.StopBluetoothDevicesDiscoveryOptions} options
 * @return {void}
 */
wx.stopBluetoothDevicesDiscovery = function(options) {};
/**
 * @record
 * @struct
 */
wx.BluetoothDevice = function() {};
 /** @type {string} */
wx.BluetoothDevice.prototype.name;
 /** @type {string} */
wx.BluetoothDevice.prototype.deviceId;
 /** @type {number} */
wx.BluetoothDevice.prototype.RSSI;
 /** @type {!ArrayBuffer} */
wx.BluetoothDevice.prototype.advertisData;
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.GetBluetoothDevicesOptions = function() {};

/**
 * @param {?} res
 * @return {void}
 */
wx.GetBluetoothDevicesOptions.prototype.success = function(res) {};

/**
 * 获取所有已发现的蓝牙设备，包括已经和本机处于连接状态的设备
 * @param {!wx.GetBluetoothDevicesOptions} options
 * @return {void}
 */
wx.getBluetoothDevices = function(options) {};

/**
 * 监听寻找到新设备的事件
 * @param {function({devices: !Array<!wx.BluetoothDevice>}): void} callback
 * @return {void}
 */
wx.onBluetoothDeviceFound = function(callback) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.GetConnectedBluetoothDevicesOptions = function() {};
 /** @type {!Array<string>} */
wx.GetConnectedBluetoothDevicesOptions.prototype.services;

/**
 * @param {?} res
 * @return {void}
 */
wx.GetConnectedBluetoothDevicesOptions.prototype.success = function(res) {};

/**
 * 根据 uuid 获取处于已连接状态的设备
 * @param {!wx.GetConnectedBluetoothDevicesOptions} options
 * @return {void}
 */
wx.getConnectedBluetoothDevices = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.CreateBLEConnectionOptions = function() {};

/**
 * @param {!wx.ErrMsgResponse} res
 * @return {void}
 */
wx.CreateBLEConnectionOptions.prototype.success = function(res) {};

/**
 * 低功耗蓝牙接口
 * @param {!wx.CreateBLEConnectionOptions} options
 * @return {void}
 */
wx.createBLEConnection = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.CloseBLEConnectionOptions = function() {};
 /** @type {string} */
wx.CloseBLEConnectionOptions.prototype.deviceId;

/**
 * @param {!wx.ErrMsgResponse} res
 * @return {void}
 */
wx.CloseBLEConnectionOptions.prototype.success = function(res) {};

/**
 * 断开与低功耗蓝牙设备的连接
 * @param {!wx.CloseBLEConnectionOptions} options
 * @return {void}
 */
wx.closeBLEConnection = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.GetBLEDeviceServicesOptions = function() {};
 /** @type {string} */
wx.GetBLEDeviceServicesOptions.prototype.deviceId;

/**
 * 成功则返回本机蓝牙适配器状态
 * @param {?} res
 * @return {void}
 */
wx.GetBLEDeviceServicesOptions.prototype.success = function(res) {};

/**
 * 获取蓝牙设备所有 service（服务）
 * @param {!wx.GetBLEDeviceServicesOptions} options
 * @return {void}
 */
wx.getBLEDeviceServices = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.GetBLEDeviceCharacteristicsOptions = function() {};
 /** @type {string} */
wx.GetBLEDeviceCharacteristicsOptions.prototype.deviceId;
 /** @type {string} */
wx.GetBLEDeviceCharacteristicsOptions.prototype.serviceId;

/**
 * 成功则返回本机蓝牙适配器状态
 * @param {?} res
 * @return {void}
 */
wx.GetBLEDeviceCharacteristicsOptions.prototype.success = function(res) {};

/**
 * 获取蓝牙设备所有 characteristic（特征值）
 * @param {!wx.GetBLEDeviceCharacteristicsOptions} options
 * @return {void}
 */
wx.getBLEDeviceCharacteristics = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.BLECharacteristicValueOptions = function() {};
 /** @type {string} */
wx.BLECharacteristicValueOptions.prototype.deviceId;
 /** @type {string} */
wx.BLECharacteristicValueOptions.prototype.serviceId;
 /** @type {string} */
wx.BLECharacteristicValueOptions.prototype.characteristicId;

/**
 * @param {?} res
 * @return {void}
 */
wx.BLECharacteristicValueOptions.prototype.success = function(res) {};

/**
 * 读取低功耗蓝牙设备的特征值的二进制数据值。
 * 注意：必须设备的特征值支持read才可以成功调用，具体参照 characteristic 的 properties 属性
 * @param {!wx.BLECharacteristicValueOptions} options
 * @return {void}
 */
wx.readBLECharacteristicValue = function(options) {};

/**
 * 向低功耗蓝牙设备特征值中写入二进制数据。
 * 注意：必须设备的特征值支持write才可以成功调用，具体参照 characteristic 的 properties 属性
 * tips: 并行调用多次读写接口存在读写失败的可能性
 * @param {!wx.BLECharacteristicValueOptions} options
 * @return {void}
 */
wx.writeBLECharacteristicValue = function(options) {};

/**
 * 启用低功耗蓝牙设备特征值变化时的 notify 功能。
 * 注意：必须设备的特征值支持notify才可以成功调用，具体参照 characteristic 的 properties 属性
 * 另外，必须先启用notify才能监听到设备 characteristicValueChange 事件
 * @param {!wx.BLECharacteristicValueOptions} options
 * @return {void}
 */
wx.notifyBLECharacteristicValueChanged = function(options) {};

/**
 * 监听低功耗蓝牙连接的错误事件，包括设备丢失，连接异常断开等等。
 * @param {function({deviceId: string, connected: boolean}): void} callback
 * @return {void}
 */
wx.onBLEConnectionStateChanged = function(callback) {};

/**
 * 监听低功耗蓝牙设备的特征值变化。必须先启用notify接口才能接收到设备推送的notification。
 * @param {function({deviceId: string, serviceId: string, characteristicId: string, value: !ArrayBuffer}): void} callback
 * @return {void}
 */
wx.onBLECharacteristicValueChange = function(callback) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.ToastOptions = function() {};
 /** @type {string} */
wx.ToastOptions.prototype.title;
 /** @type {string} */
wx.ToastOptions.prototype.icon;
 /** @type {string} */
wx.ToastOptions.prototype.image;
 /** @type {number} */
wx.ToastOptions.prototype.duration;
 /** @type {boolean} */
wx.ToastOptions.prototype.mask;

/**
 * 显示消息提示框
 * @param {!wx.ToastOptions} options
 * @return {void}
 */
wx.showToast = function(options) {};

/**
 * @return {void}
 */
wx.hideToast = function() {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.LoadingOptions = function() {};
 /** @type {string} */
wx.LoadingOptions.prototype.title;
 /** @type {boolean} */
wx.LoadingOptions.prototype.mask;

/**
 * 显示 loading 提示框, 需主动调用 wx.hideLoading 才能关闭提示框
 * @param {!wx.LoadingOptions} options
 * @return {void}
 */
wx.showLoading = function(options) {};

/**
 * 隐藏消息提示框
 * @return {void}
 */
wx.hideLoading = function() {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.ModalOptions = function() {};
 /** @type {string} */
wx.ModalOptions.prototype.title;
 /** @type {string} */
wx.ModalOptions.prototype.content;
 /** @type {boolean} */
wx.ModalOptions.prototype.showCancel;
 /** @type {string} */
wx.ModalOptions.prototype.cancelText;
 /** @type {string} */
wx.ModalOptions.prototype.cancelColor;
 /** @type {string} */
wx.ModalOptions.prototype.confirmText;
 /** @type {string} */
wx.ModalOptions.prototype.confirmColor;

/**
 * @param {{confirm: boolean, cancel: boolean}} res
 * @return {void}
 */
wx.ModalOptions.prototype.success = function(res) {};

/**
 * 显示模态弹窗
 * @param {!wx.ModalOptions} options
 * @return {void}
 */
wx.showModal = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.ActionSheetOptions = function() {};
 /** @type {!Array<string>} */
wx.ActionSheetOptions.prototype.itemList;
 /** @type {string} */
wx.ActionSheetOptions.prototype.itemColor;

/**
 * 接口调用成功的回调函数
 * @param {{tapIndex: number}} res
 * @return {void}
 */
wx.ActionSheetOptions.prototype.success = function(res) {};

/**
 * 显示操作菜单
 * @param {!wx.ActionSheetOptions} options
 * @return {void}
 */
wx.showActionSheet = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.SetNavigationBarTitleOptions = function() {};
 /** @type {string} */
wx.SetNavigationBarTitleOptions.prototype.title;

/**
 * 动态设置当前页面的标题。
 * @param {!wx.SetNavigationBarTitleOptions} options
 * @return {void}
 */
wx.setNavigationBarTitle = function(options) {};

/**
 * 在当前页面显示导航条加载动画。
 * @return {void}
 */
wx.showNavigationBarLoading = function() {};

/**
 * 隐藏导航条加载动画。
 * @return {void}
 */
wx.hideNavigationBarLoading = function() {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.NavigateToOptions = function() {};
 /** @type {string} */
wx.NavigateToOptions.prototype.url;

/**
 * 保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面。
 * 
 * 注意：为了不让用户在使用小程序时造成困扰，
 * 我们规定页面路径只能是五层，请尽量避免多层级的交互方式。
 * @param {!wx.NavigateToOptions} options
 * @return {void}
 */
wx.navigateTo = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.RedirectToOptions = function() {};
 /** @type {string} */
wx.RedirectToOptions.prototype.url;

/**
 * 关闭当前页面，跳转到应用内的某个页面。
 * @param {!wx.RedirectToOptions} options
 * @return {void}
 */
wx.redirectTo = function(options) {};

/**
 * 关闭当前页面，回退前一页面。
 * @return {void}
 */
wx.navigateBack = function() {};

/** @typedef {string} */
wx.TimingFunction;
/**
 * @record
 * @struct
 */
wx.CreateAnimationOptions = function() {};
 /** @type {number} */
wx.CreateAnimationOptions.prototype.duration;
 /** @type {string} */
wx.CreateAnimationOptions.prototype.timingFunction;
 /** @type {number} */
wx.CreateAnimationOptions.prototype.delay;
 /** @type {string} */
wx.CreateAnimationOptions.prototype.transformOrigin;
/**
 * @record
 * @struct
 */
wx.Animator = function() {};
 /** @type {!Array<!wx.AnimationAction>} */
wx.Animator.prototype.actions;
/**
 * @record
 * @struct
 */
wx.AnimationAction = function() {};
 /** @type {!Array<!wx.Animate>} */
wx.AnimationAction.prototype.animates;
 /** @type {!wx.AnimationActionOption} */
wx.AnimationAction.prototype.option;
/**
 * @record
 * @struct
 */
wx.AnimationActionOption = function() {};
 /** @type {string} */
wx.AnimationActionOption.prototype.transformOrigin;
 /** @type {!wx.AnimationTransition} */
wx.AnimationActionOption.prototype.transition;
/**
 * @record
 * @struct
 */
wx.AnimationTransition = function() {};
 /** @type {number} */
wx.AnimationTransition.prototype.delay;
 /** @type {number} */
wx.AnimationTransition.prototype.duration;
 /** @type {string} */
wx.AnimationTransition.prototype.timingFunction;
/**
 * @record
 * @struct
 */
wx.Animate = function() {};
 /** @type {string} */
wx.Animate.prototype.type;
 /** @type {!Array<?>} */
wx.Animate.prototype.args;

/**
 * 创建一个动画实例animation。调用实例的方法来描述动画。
 * 最后通过动画实例的export方法导出动画数据传递给组件的animation属性。
 * 
 * 注意: export 方法每次调用后会清掉之前的动画操作
 * @param {!wx.CreateAnimationOptions=} options
 * @return {!wx.Animation}
 */
wx.createAnimation = function(options) {};
/**
 * @record
 * @struct
 */
wx.Animation = function() {};

/**
 * 调用动画操作方法后要调用 step() 来表示一组动画完成，
 * 可以在一组动画中调用任意多个动画方法，
 * 一组动画中的所有动画会同时开始，
 * 一组动画完成后才会进行下一组动画。
 * @param {!wx.CreateAnimationOptions=} options
 * @return {void}
 */
wx.Animation.prototype.step = function(options) {};

/**
 * 导出动画操作
 * 
 * 注意: export 方法每次调用后会清掉之前的动画操作
 * @return {!wx.Animator}
 */
wx.Animation.prototype.export = function() {};

/**
 * 透明度，参数范围 0~1
 * @param {number} value
 * @return {!wx.Animation}
 */
wx.Animation.prototype.opacity = function(value) {};

/**
 * 颜色值
 * @param {string} color
 * @return {!wx.Animation}
 */
wx.Animation.prototype.backgroundColor = function(color) {};

/**
 * 长度值，如果传入 Number 则默认使用 px，可传入其他自定义单位的长度值
 * @param {number} length
 * @return {!wx.Animation}
 */
wx.Animation.prototype.width = function(length) {};

/**
 * 长度值，如果传入 Number 则默认使用 px，可传入其他自定义单位的长度值
 * @param {number} length
 * @return {!wx.Animation}
 */
wx.Animation.prototype.height = function(length) {};

/**
 * 长度值，如果传入 Number 则默认使用 px，可传入其他自定义单位的长度值
 * @param {number} length
 * @return {!wx.Animation}
 */
wx.Animation.prototype.top = function(length) {};

/**
 * 长度值，如果传入 Number 则默认使用 px，可传入其他自定义单位的长度值
 * @param {number} length
 * @return {!wx.Animation}
 */
wx.Animation.prototype.left = function(length) {};

/**
 * 长度值，如果传入 Number 则默认使用 px，可传入其他自定义单位的长度值
 * @param {number} length
 * @return {!wx.Animation}
 */
wx.Animation.prototype.bottom = function(length) {};

/**
 * 长度值，如果传入 Number 则默认使用 px，可传入其他自定义单位的长度值
 * @param {number} length
 * @return {!wx.Animation}
 */
wx.Animation.prototype.right = function(length) {};

/**
 * deg的范围-180~180，从原点顺时针旋转一个deg角度
 * @param {number} deg
 * @return {!wx.Animation}
 */
wx.Animation.prototype.rotate = function(deg) {};

/**
 * deg的范围-180~180，在X轴旋转一个deg角度
 * @param {number} deg
 * @return {!wx.Animation}
 */
wx.Animation.prototype.rotateX = function(deg) {};

/**
 * deg的范围-180~180，在Y轴旋转一个deg角度
 * @param {number} deg
 * @return {!wx.Animation}
 */
wx.Animation.prototype.rotateY = function(deg) {};

/**
 * deg的范围-180~180，在Z轴旋转一个deg角度
 * @param {number} deg
 * @return {!wx.Animation}
 */
wx.Animation.prototype.rotateZ = function(deg) {};

/**
 * 同transform-function rotate3d
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @param {number} deg
 * @return {!wx.Animation}
 */
wx.Animation.prototype.rotate3d = function(x, y, z, deg) {};

/**
 * 一个参数时，表示在X轴、Y轴同时缩放sx倍数；
 * 两个参数时表示在X轴缩放sx倍数，在Y轴缩放sy倍数
 * @param {number} sx
 * @param {number=} sy
 * @return {!wx.Animation}
 */
wx.Animation.prototype.scale = function(sx, sy) {};

/**
 * 在X轴缩放sx倍数
 * @param {number} sx
 * @return {!wx.Animation}
 */
wx.Animation.prototype.scaleX = function(sx) {};

/**
 * 在Y轴缩放sy倍数
 * @param {number} sy
 * @return {!wx.Animation}
 */
wx.Animation.prototype.scaleY = function(sy) {};

/**
 * 在Z轴缩放sy倍数
 * @param {number} sz
 * @return {!wx.Animation}
 */
wx.Animation.prototype.scaleZ = function(sz) {};

/**
 * 在X轴缩放sx倍数，在Y轴缩放sy倍数，在Z轴缩放sz倍数
 * @param {number} sx
 * @param {number} sy
 * @param {number} sz
 * @return {!wx.Animation}
 */
wx.Animation.prototype.scale3d = function(sx, sy, sz) {};

/**
 * 一个参数时，表示在X轴偏移tx，单位px；
 * 两个参数时，表示在X轴偏移tx，在Y轴偏移ty，单位px。
 * @param {number} tx
 * @param {number=} ty
 * @return {!wx.Animation}
 */
wx.Animation.prototype.translate = function(tx, ty) {};

/**
 * 在X轴偏移tx，单位px
 * @param {number} tx
 * @return {!wx.Animation}
 */
wx.Animation.prototype.translateX = function(tx) {};

/**
 * 在Y轴偏移tx，单位px
 * @param {number} ty
 * @return {!wx.Animation}
 */
wx.Animation.prototype.translateY = function(ty) {};

/**
 * 在Z轴偏移tx，单位px
 * @param {number} tz
 * @return {!wx.Animation}
 */
wx.Animation.prototype.translateZ = function(tz) {};

/**
 * 在X轴偏移tx，在Y轴偏移ty，在Z轴偏移tz，单位px
 * @param {number} tx
 * @param {number} ty
 * @param {number} tz
 * @return {!wx.Animation}
 */
wx.Animation.prototype.translate3d = function(tx, ty, tz) {};

/**
 * 参数范围-180~180；
 * 一个参数时，Y轴坐标不变，X轴坐标延顺时针倾斜ax度；
 * 两个参数时，分别在X轴倾斜ax度，在Y轴倾斜ay度
 * @param {number} ax
 * @param {number=} ay
 * @return {!wx.Animation}
 */
wx.Animation.prototype.skew = function(ax, ay) {};

/**
 * 参数范围-180~180；Y轴坐标不变，X轴坐标延顺时针倾斜ax度
 * @param {number} ax
 * @return {!wx.Animation}
 */
wx.Animation.prototype.skewX = function(ax) {};

/**
 * 参数范围-180~180；X轴坐标不变，Y轴坐标延顺时针倾斜ay度
 * @param {number} ay
 * @return {!wx.Animation}
 */
wx.Animation.prototype.skewY = function(ay) {};

/**
 * 同transform-function matrix
 * @param {number} a
 * @param {number} b
 * @param {number} c
 * @param {number} d
 * @param {number} tx
 * @param {number} ty
 * @return {!wx.Animation}
 */
wx.Animation.prototype.matrix = function(a, b, c, d, tx, ty) {};

/**
 * 同transform-function matrix3d
 * @param {number} a1
 * @param {number} b1
 * @param {number} c1
 * @param {number} d1
 * @param {number} a2
 * @param {number} b2
 * @param {number} c2
 * @param {number} d2
 * @param {number} a3
 * @param {number} b3
 * @param {number} c3
 * @param {number} d3
 * @param {number} a4
 * @param {number} b4
 * @param {number} c4
 * @param {number} d4
 * @return {!wx.Animation}
 */
wx.Animation.prototype.matrix3d = function(a1, b1, c1, d1, a2, b2, c2, d2, a3, b3, c3, d3, a4, b4, c4, d4) {};
/**
 * @record
 * @struct
 */
wx.CanvasAction = function() {};
 /** @type {string} */
wx.CanvasAction.prototype.method;
 /** @type {(!Array<!wx.CanvasAction>|!Array<(string|number)>)} */
wx.CanvasAction.prototype.data;

/** @typedef {string} */
wx.LineCapType;

/** @typedef {string} */
wx.LineJoinType;
/**
 * @record
 * @struct
 */
wx.CanvasContext = function() {};

/**
 * 获取当前context上存储的绘图动作(不推荐使用)
 * @return {!Array<!wx.CanvasAction>}
 */
wx.CanvasContext.prototype.getActions = function() {};

/**
 * 清空当前的存储绘图动作(不推荐使用)
 * @return {void}
 */
wx.CanvasContext.prototype.clearActions = function() {};

/**
 * 对横纵坐标进行缩放
 * 在调用scale方法后，之后创建的路径其横纵坐标会被缩放。
 * 多次调用scale，倍数会相乘。
 * 
 * @param {number} scaleWidth
 * @param {number=} scaleHeight
 * @return {void}
 */
wx.CanvasContext.prototype.scale = function(scaleWidth, scaleHeight) {};

/**
 * 对坐标轴进行顺时针旋转
 * 以原点为中心，原点可以用 translate方法修改。
 * 顺时针旋转当前坐标轴。多次调用rotate，旋转的角度会叠加。
 * 
 * @param {number} rotate
 * @return {void}
 */
wx.CanvasContext.prototype.rotate = function(rotate) {};

/**
 * 对坐标原点进行缩放
 * 对当前坐标系的原点(0, 0)进行变换，默认的坐标系原点为页面左上角。
 * 
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
wx.CanvasContext.prototype.translate = function(x, y) {};

/**
 * 保存当前的绘图上下文。
 * @return {void}
 */
wx.CanvasContext.prototype.save = function() {};

/**
 * 恢复之前保存的绘图上下文。
 * @return {void}
 */
wx.CanvasContext.prototype.restore = function() {};

/**
 * 在给定的矩形区域内，清除画布上的像素
 * 清除画布上在该矩形区域内的内容。
 * 
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
wx.CanvasContext.prototype.clearRect = function(x, y, width, height) {};

/**
 * 在画布上绘制被填充的文本
 * 
 * @param {string} text
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
wx.CanvasContext.prototype.fillText = function(text, x, y) {};

/**
 * 用于设置文字的对齐
 * 
 * 
 * \@memberOf CanvasContext
 * @param {string} align
 * @return {void}
 */
wx.CanvasContext.prototype.setTextAlign = function(align) {};

/**
 * 绘制图像，图像保持原始尺寸。
 * 
 * 
 * \@memberOf CanvasContext
 * @param {string} imageResource
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
wx.CanvasContext.prototype.drawImage = function(imageResource, x, y, width, height) {};

/**
 * 设置全局画笔透明度。
 * 
 * 
 * \@memberOf CanvasContext
 * @param {number} alpha
 * @return {void}
 */
wx.CanvasContext.prototype.setGlobalAlpha = function(alpha) {};

/**
 * 对当前路径进行填充
 * @return {void}
 */
wx.CanvasContext.prototype.fill = function() {};

/**
 * 对当前路径进行描边
 * @return {void}
 */
wx.CanvasContext.prototype.stroke = function() {};

/**
 * 开始创建一个路径，需要调用fill或者stroke才会使用路径进行填充或描边。
 * Tip: 在最开始的时候相当于调用了一次 beginPath()。
 * Tip: 同一个路径内的多次setFillStyle、setStrokeStyle、setLineWidth等设置，
 * 以最后一次设置为准。
 * @return {void}
 */
wx.CanvasContext.prototype.beginPath = function() {};

/**
 * 关闭一个路径
 * Tip: 关闭路径会连接起点和终点。
 * Tip: 如果关闭路径后没有调用 fill() 或者 stroke() 并开启了新的路径，那之前的路径将不会被渲染。
 * @return {void}
 */
wx.CanvasContext.prototype.closePath = function() {};

/**
 * 把路径移动到画布中的指定点，但不创建线条。
 * 
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
wx.CanvasContext.prototype.moveTo = function(x, y) {};

/**
 * 在当前位置添加一个新点，然后在画布中创建从该点到最后指定点的路径。
 * 
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
wx.CanvasContext.prototype.lineTo = function(x, y) {};

/**
 * 添加一个矩形路径到当前路径。
 * 
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
wx.CanvasContext.prototype.rect = function(x, y, width, height) {};

/**
 * 填充一个矩形。
 * Tip: 用 setFillStyle() 设置矩形的填充色，如果没设置默认是黑色。
 * 
 * \@memberOf CanvasContext
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
wx.CanvasContext.prototype.fillRect = function(x, y, width, height) {};

/**
 * 画一个矩形(非填充)。
 * Tip: 用 setFillStroke() 设置矩形线条的颜色，如果没设置默认是黑色。
 * 
 * \@memberOf CanvasContext
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
wx.CanvasContext.prototype.strokeRect = function(x, y, width, height) {};

/**
 * 添加一个弧形路径到当前路径，顺时针绘制。
 * 
 * @param {number} x
 * @param {number} y
 * @param {number} radius
 * @param {number} startAngle
 * @param {number} endAngle
 * @param {boolean=} counterclockwise
 * @return {void}
 */
wx.CanvasContext.prototype.arc = function(x, y, radius, startAngle, endAngle, counterclockwise) {};

/**
 * 创建二次方贝塞尔曲线
 * 
 * @param {number} cpx
 * @param {number} cpy
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
wx.CanvasContext.prototype.quadraticCurveTo = function(cpx, cpy, x, y) {};

/**
 * 创建三次方贝塞尔曲线
 * 
 * @param {number} cp1x
 * @param {number} cp1y
 * @param {number} cp2x
 * @param {number} cp2y
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
wx.CanvasContext.prototype.bezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {};

/**
 * 设置填充样式
 * 
 * @param {string} color
 * @return {void}
 */
wx.CanvasContext.prototype.setFillStyle = function(color) {};

/**
 * 设置线条样式
 * 
 * @param {string} color
 * @return {void}
 */
wx.CanvasContext.prototype.setStrokeStyle = function(color) {};

/**
 * 设置阴影
 * 
 * @param {number} offsetX
 * @param {number} offsetY
 * @param {number} blur
 * @param {string} color
 * @return {void}
 */
wx.CanvasContext.prototype.setShadow = function(offsetX, offsetY, blur, color) {};

/**
 * 创建一个线性的渐变颜色。
 * Tip: 需要使用 addColorStop() 来指定渐变点，至少要两个。
 * 
 * \@memberOf CanvasContext
 * @param {number} x0
 * @param {number} y0
 * @param {number} x1
 * @param {number} y1
 * @return {void}
 */
wx.CanvasContext.prototype.createLinearGradient = function(x0, y0, x1, y1) {};

/**
 * 创建一个颜色的渐变点。
 * Tip: 小于最小 stop 的部分会按最小 stop 的 color 来渲染，大于最大 stop 的部分会按最大 stop 的 color 来渲染。
 * Tip: 需要使用 addColorStop() 来指定渐变点，至少要两个。
 * 
 * \@memberOf CanvasContext
 * @param {number} stop
 * @param {string} color
 * @return {void}
 */
wx.CanvasContext.prototype.addColorStop = function(stop, color) {};

/**
 * 创建一个圆形的渐变颜色。
 * 
 * 
 * \@memberOf CanvasContext
 * @param {number} x
 * @param {number} y
 * @param {number} r
 * @return {void}
 */
wx.CanvasContext.prototype.createCircularGradient = function(x, y, r) {};

/**
 * 设置字体大小
 * 
 * @param {number} fontSize
 * @return {void}
 */
wx.CanvasContext.prototype.setFontSize = function(fontSize) {};

/**
 * 设置线条端点的样式
 * 
 * @param {string} lineCap
 * @return {void}
 */
wx.CanvasContext.prototype.setLineCap = function(lineCap) {};

/**
 * 设置两线相交处的样式
 *  \@param {LineJoinType} lineJoin 两条线相交时，所创建的拐角类型
 * @param {string} lineJoin
 * @return {void}
 */
wx.CanvasContext.prototype.setLineJoin = function(lineJoin) {};

/**
 * 设置线条宽度
 * 
 * @param {number} lineWidth
 * @return {void}
 */
wx.CanvasContext.prototype.setLineWidth = function(lineWidth) {};

/**
 * 设置最大斜接长度，斜接长度指的是在两条线交汇处内角和外角之间的距离。
 * 当 setLineJoin为 miter 时才有效。
 * 超过最大倾斜长度的，连接处将以 lineJoin 为 bevel 来显示
 * 
 * @param {number} miterLimit
 * @return {void}
 */
wx.CanvasContext.prototype.setMiterLimit = function(miterLimit) {};

/**
 * 将之前在绘图上下文中的描述（路径、变形、样式）画到 canvas 中。
 * Tip: 绘图上下文需要由 wx.createCanvasContext(canvasId) 来创建。
 * 
 * \@memberOf CanvasContext
 * @param {boolean=} reserve
 * @return {void}
 */
wx.CanvasContext.prototype.draw = function(reserve) {};

/**
 * 创建并返回绘图上下文context对象。
 * context只是一个记录方法调用的容器，
 * 用于生成记录绘制行为的actions数组。c
 * ontext跟<canvas/>不存在对应关系，
 * 一个context生成画布的绘制动作数组可以应用于多个<canvas/>。
 * @return {!wx.CanvasContext}
 */
wx.createContext = function() {};
/**
 * @record
 * @struct
 */
wx.DrawCanvasOptions = function() {};
 /** @type {(string|number)} */
wx.DrawCanvasOptions.prototype.canvasId;
 /** @type {!Array<!wx.CanvasAction>} */
wx.DrawCanvasOptions.prototype.actions;

/**
 * 绘制画布
 * @param {!wx.DrawCanvasOptions} options
 * @return {void}
 */
wx.drawCanvas = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.CanvasToTempFilePathOptions = function() {};
 /** @type {string} */
wx.CanvasToTempFilePathOptions.prototype.canvasId;

/**
 * 把当前画布的内容导出生成图片，并返回文件路径
 * @param {!wx.CanvasToTempFilePathOptions} options
 * @return {void}
 */
wx.canvasToTempFilePath = function(options) {};
/**
 * @record
 * @struct
 */
wx.Page = function() {};

/**
 * 在 Page 中定义 onPullDownRefresh 处理函数，监听该页面用户下拉刷新事件。
 * 需要在 config 的window选项中开启 enablePullDownRefresh。
 * 当处理完数据刷新后，wx.stopPullDownRefresh可以停止当前页面的下拉刷新。
 * @return {void}
 */
wx.Page.prototype.onPullDownRefresh = function() {};

/**
 * 停止当前页面下拉刷新。
 * 
 * @return {void}
 */
wx.stopPullDownRefresh = function() {};
/**
 * @record
 * @struct
 */
wx.LoginResponse = function() {};
 /** @type {string} */
wx.LoginResponse.prototype.errMsg;
 /** @type {string} */
wx.LoginResponse.prototype.code;
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.LoginOptions = function() {};

/**
 * 接口调用成功的回调函数
 * @param {!wx.LoginResponse} res
 * @return {void}
 */
wx.LoginOptions.prototype.success = function(res) {};

/**
 * 调用接口获取登录凭证（code）进而换取用户登录态信息，
 * 包括用户的唯一标识（openid） 及本次登录的 会话密钥（session_key）。
 * 用户数据的加解密通讯需要依赖会话密钥完成。
 * @param {!wx.LoginOptions} option
 * @return {void}
 */
wx.login = function(option) {};

/** @typedef {!wx.BaseOptions} */
wx.CheckSessionOption;

/**
 * 检测当前用户登录态是否有效。
 * 通过wx.login获得的用户登录态拥有一定的时效性。用户越久未使用小程序，用户登录态越有可能失效。反之如果用户一直在使用小程序，则用户登录态一直保持有效。具体时效逻辑由微信维护，对开发者透明。开发者只需要调用wx.checkSession接口检测当前用户登录态是否有效。登录态过期后开发者可以再调用wx.login获取新的用户登录态。
 * 
 * @param {!wx.BaseOptions} options
 * @return {void}
 */
wx.checkSession = function(options) {};
/**
 * @record
 * @struct
 */
wx.UserInfo = function() {};
 /** @type {string} */
wx.UserInfo.prototype.nickName;
 /** @type {string} */
wx.UserInfo.prototype.avatarUrl;
 /** @type {number} */
wx.UserInfo.prototype.gender;
 /** @type {string} */
wx.UserInfo.prototype.province;
 /** @type {string} */
wx.UserInfo.prototype.city;
 /** @type {string} */
wx.UserInfo.prototype.country;
/**
 * @record
 * @struct
 */
wx.UserInfoResponse = function() {};
 /** @type {!wx.UserInfo} */
wx.UserInfoResponse.prototype.userInfo;
 /** @type {string} */
wx.UserInfoResponse.prototype.rawData;
 /** @type {string} */
wx.UserInfoResponse.prototype.signature;
 /** @type {string} */
wx.UserInfoResponse.prototype.encryptData;
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.GetUserInfoOptions = function() {};

/**
 * 接口调用成功的回调函数
 * @param {!wx.UserInfoResponse} res
 * @return {void}
 */
wx.GetUserInfoOptions.prototype.success = function(res) {};

/**
 * 获取用户信息，需要先调用 wx.login 接口。
 * @param {!wx.GetUserInfoOptions} options
 * @return {void}
 */
wx.getUserInfo = function(options) {};

/** @typedef {string} */
wx.PaymentSignType;
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.RequestPaymentOptions = function() {};
 /** @type {(string|number)} */
wx.RequestPaymentOptions.prototype.timeStamp;
 /** @type {string} */
wx.RequestPaymentOptions.prototype.nonceStr;
 /** @type {string} */
wx.RequestPaymentOptions.prototype.package;
 /** @type {string} */
wx.RequestPaymentOptions.prototype.signType;
 /** @type {string} */
wx.RequestPaymentOptions.prototype.paySign;

/**
 * 发起微信支付。
 * @param {!wx.RequestPaymentOptions} options
 * @return {void}
 */
wx.requestPayment = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.ShareAppMessage = function() {};
 /** @type {string} */
wx.ShareAppMessage.prototype.title;
 /** @type {string} */
wx.ShareAppMessage.prototype.path;

/**
 * @return {!wx.ShareAppMessage}
 */
wx.Page.prototype.onShareAppMessage = function() {};

/** @typedef {!wx.BaseOptions} */
wx.ShareMenuOptions;

/**
 * 显示分享按钮
 * 
 * @param {!wx.BaseOptions=} options
 * @return {void}
 */
wx.showShareMenu = function(options) {};

/**
 * 隐藏分享按钮
 * 
 * @param {!wx.BaseOptions=} options
 * @return {void}
 */
wx.hideShareMenu = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.ChooseAddressOptions = function() {};

/**
 * @param {{errMsg: string, userName: string, postalCode: string, provinceName: string, cityName: string, countyName: string, detailInfo: string, nationalCode: string, telNumber: string}} res
 * @return {void}
 */
wx.ChooseAddressOptions.prototype.success = function(res) {};

/**
 * @param {!wx.ChooseAddressOptions} options
 * @return {void}
 */
wx.chooseAddress = function(options) {};
/**
 * @record
 * @struct
 */
wx.Card = function() {};
 /** @type {string} */
wx.Card.prototype.cardId;
 /** @type {string} */
wx.Card.prototype.cardExt;
 /** @type {string} */
wx.Card.prototype.code;
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.CardOptions = function() {};
 /** @type {!Array<!wx.Card>} */
wx.CardOptions.prototype.cardList;

/**
 * 批量添加卡券。
 * 
 * @param {!wx.ChooseAddressOptions} options
 * @return {void}
 */
wx.addCard = function(options) {};
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.OpenCardOptions = function() {};
 /** @type {!Array<!wx.Card>} */
wx.OpenCardOptions.prototype.cardList;

/**
 * 查看微信卡包中的卡券。
 * 
 * @param {!wx.OpenCardOptions} options
 * @return {void}
 */
wx.openCard = function(options) {};
/**
 * @record
 * @struct
 */
wx.AuthSetting = function() {};

/* TODO: PropertySignature: wx.'scope.userInfo' */

/* TODO: PropertySignature: wx.'scope.userLocation' */

/* TODO: PropertySignature: wx.'scope.address' */

/* TODO: PropertySignature: wx.'scope.record' */
/**
 * @extends {wx.BaseOptions}
 * @record
 * @struct
 */
wx.OpenSettingOptions = function() {};

/**
 * @param {{authSetting: !wx.AuthSetting}} res
 * @return {void}
 */
wx.OpenSettingOptions.prototype.success = function(res) {};

/**
 * @param {!wx.OpenSettingOptions} options
 * @return {void}
 */
wx.openSetting = function(options) {};

/**
 * 将 ArrayBuffer 数据转成 Base64 字符串
 * 
 * @param {!ArrayBuffer} arrayBuffer
 * @return {string}
 */
wx.arrayBufferToBase64 = function(arrayBuffer) {};

/**
 * 将 Base64 字符串转成 ArrayBuffer 数据
 * 
 * @param {string} base64
 * @return {!ArrayBuffer}
 */
wx.base64ToArrayBuffer = function(base64) {};

/**
 * 收起键盘。
 * @return {void}
 */
wx.hideKeyboard = function() {};

/**
 * setData 函数用于将数据从逻辑层发送到视图层，
 * 同时改变对应的 this.data 的值。
 * 注意：
 *    1. 直接修改 this.data 无效，无法改变页面的状态，还会造成数据不一致。
 *    2. 单次设置的数据不能超过1024kB，请尽量避免一次设置过多的数据。
 * @param {?} data
 * @return {void}
 */
wx.Page.prototype.setData = function(data) {};

/** @typedef {function(!wx.PageOptions): void} */
wx.PageConstructor;
 /** @type {function(!wx.PageOptions): void} */
var Page;
/**
 * @record
 * @struct
 */
wx.App = function() {};

/**
 * getCurrentPage() 函数用户获取当前页面的实例。
 * @deprecated
 * @return {!wx.Page}
 */
wx.App.prototype.getCurrentPage = function() {};

/** @typedef {function(!wx.AppOptions): void} */
wx.AppConstructor;
/**
 * @record
 * @struct
 */
wx.EventTarget = function() {};
 /** @type {string} */
wx.EventTarget.prototype.id;
 /** @type {string} */
wx.EventTarget.prototype.tagName;
 /** @type {!Object<string,string>} */
wx.EventTarget.prototype.dataset;
/**
 * @record
 * @struct
 */
wx.BaseEvent = function() {};
 /** @type {string} */
wx.BaseEvent.prototype.type;
 /** @type {number} */
wx.BaseEvent.prototype.timeStamp;
 /** @type {!wx.EventTarget} */
wx.BaseEvent.prototype.currentTarget;
 /** @type {!wx.EventTarget} */
wx.BaseEvent.prototype.target;
/**
 * @extends {wx.BaseEvent}
 * @record
 * @struct
 */
wx.InputEvent = function() {};
 /** @type {{target: !wx.EventTarget, value: string}} */
wx.InputEvent.prototype.detail;
/**
 * @extends {wx.BaseEvent}
 * @record
 * @struct
 */
wx.FormEvent = function() {};
 /** @type {{target: !wx.EventTarget, value: !Object<string,(string|number|boolean)>}} */
wx.FormEvent.prototype.detail;
/**
 * @record
 * @struct
 */
wx.Touch = function() {};
 /** @type {number} */
wx.Touch.prototype.identifier;
 /** @type {number} */
wx.Touch.prototype.pageX;
 /** @type {number} */
wx.Touch.prototype.pageY;
 /** @type {number} */
wx.Touch.prototype.clientX;
 /** @type {number} */
wx.Touch.prototype.clientY;
/**
 * @extends {wx.BaseEvent}
 * @record
 * @struct
 */
wx.TouchEvent = function() {};
 /** @type {{x: number, y: number}} */
wx.TouchEvent.prototype.detail;
 /** @type {!Array<!wx.Touch>} */
wx.TouchEvent.prototype.touches;
 /** @type {!Array<!wx.Touch>} */
wx.TouchEvent.prototype.changedTouches;
 /** @type {function(!wx.AppOptions): void} */
var App;

/**
 * 我们提供了全局的 getApp() 函数，可以获取到小程序实例。
 * @return {!wx.App}
 */
function getApp() {}

/**
 * @return {!Array<!wx.Page>}
 */
function getCurrentPages() {}
