/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/typeahead/index.d.ts:

/**
 * For a given input[type="text"], enables typeahead functionality.
 * 
 * For a given input[type="text"], enables typeahead functionality.
 * 
 * Returns the current value of the typeahead.
 * The value is the text the user has entered into the input element.
 * 
 * Accommodates the val overload.
 * 
 * Sets the value of the typeahead. This should be used in place of jQuery#val.
 * 
 * Accommodates the set val overload.
 * 
 * Opens the suggestion menu.
 * 
 * Closes the suggestion menu.
 * 
 * Removes typeahead functionality and reverts the input element back to its original state.
 * 
 * @template T
 * @param {!Twitter.Typeahead.Options|string} options_or_methodName Options hash that's used for configuration / Method 'val' / Method 'open' / Method 'close' / Method 'destroy'
 * @param {!Array<!Twitter.Typeahead.Dataset<T>>|!Twitter.Typeahead.Dataset<T>|string=} datasets_or_dataset_or_val Array of datasets / At least one dataset is required / The value to be set
 * @param {...!Twitter.Typeahead.Dataset<T>} datasets Rest of the datasets.
 * @return {?<!HTMLElement>|string}
 */
JQuery.prototype.typeahead = function(options_or_methodName, datasets_or_dataset_or_val, datasets) {};

/**
 * Attach an event handler function for typeahead:active event to the selected elements.
 * 
 * Attach an event handler function for typeahead:active event to the selected elements.
 * 
 * Attach an event handler function for typeahead:active event to the selected elements.
 * 
 * Attach an event handler function for typeahead:active event to the selected elements.
 * 
 * Attach an event handler function for typeahead:idle event to the selected elements.
 * 
 * Attach an event handler function for typeahead:idle event to the selected elements.
 * 
 * Attach an event handler function for typeahead:idle event to the selected elements.
 * 
 * Attach an event handler function for typeahead:idle event to the selected elements.
 * 
 * Attach an event handler function for typeahead:open event to the selected elements.
 * 
 * Attach an event handler function for typeahead:open event to the selected elements.
 * 
 * Attach an event handler function for typeahead:open event to the selected elements.
 * 
 * Attach an event handler function for typeahead:open event to the selected elements.
 * 
 * Attach an event handler function for typeahead:close event to the selected elements.
 * 
 * Attach an event handler function for typeahead:close event to the selected elements.
 * 
 * Attach an event handler function for typeahead:close event to the selected elements.
 * 
 * Attach an event handler function for typeahead:close event to the selected elements.
 * 
 * Attach an event handler function for typeahead:change event to the selected elements.
 * 
 * Attach an event handler function for typeahead:change event to the selected elements.
 * 
 * Attach an event handler function for typeahead:change event to the selected elements.
 * 
 * Attach an event handler function for typeahead:change event to the selected elements.
 * 
 * Attach an event handler function for typeahead:render event to the selected elements.
 * 
 * Attach an event handler function for typeahead:render event to the selected elements.
 * 
 * Attach an event handler function for typeahead:render event to the selected elements.
 * 
 * Attach an event handler function for typeahead:render event to the selected elements.
 * 
 * Attach an event handler function for typeahead:select event to the selected elements.
 * 
 * Attach an event handler function for typeahead:select event to the selected elements.
 * 
 * Attach an event handler function for typeahead:select event to the selected elements.
 * 
 * Attach an event handler function for typeahead:select event to the selected elements.
 * 
 * Attach an event handler function for typeahead:autocomplete event to the selected elements.
 * 
 * Attach an event handler function for typeahead:autocomplete event to the selected elements.
 * 
 * Attach an event handler function for typeahead:autocomplete event to the selected elements.
 * 
 * Attach an event handler function for typeahead:autocomplete event to the selected elements.
 * 
 * Attach an event handler function for typeahead:cursorchange event to the selected elements.
 * 
 * Attach an event handler function for typeahead:cursorchange event to the selected elements.
 * 
 * Attach an event handler function for typeahead:cursorchange event to the selected elements.
 * 
 * Attach an event handler function for typeahead:cursorchange event to the selected elements.
 * 
 * Attach an event handler function for typeahead:asyncrequest event to the selected elements.
 * 
 * Attach an event handler function for typeahead:asyncrequest event to the selected elements.
 * 
 * Attach an event handler function for typeahead:asyncrequest event to the selected elements.
 * 
 * Attach an event handler function for typeahead:asyncrequest event to the selected elements.
 * 
 * Attach an event handler function for typeahead:asynccancel event to the selected elements.
 * 
 * Attach an event handler function for typeahead:asynccancel event to the selected elements.
 * 
 * Attach an event handler function for typeahead:asynccancel event to the selected elements.
 * 
 * Attach an event handler function for typeahead:asynccancel event to the selected elements.
 * 
 * Attach an event handler function for typeahead:asyncreceive event to the selected elements.
 * 
 * Attach an event handler function for typeahead:asyncreceive event to the selected elements.
 * 
 * Attach an event handler function for typeahead:asyncreceive event to the selected elements.
 * 
 * Attach an event handler function for typeahead:asyncreceive event to the selected elements.
 * 
 * @param {string} events typeahead:active event fired when the typeahead moves to active state. / typeahead:idle event fired when the typeahead moves to active state. / typeahead:open event fired when the typeahead moves to active state. / typeahead:close event fired when the typeahead moves to active state. / typeahead:change event fired when the typeahead moves to active state. / typeahead:render event fired when the typeahead moves to active state. / typeahead:select event fired when the typeahead moves to active state. / typeahead:autocomplete event fired when the typeahead moves to active state. / typeahead:cursorchange event fired when the typeahead moves to active state. / typeahead:asyncrequest event fired when the typeahead moves to active state. / typeahead:asynccancel event fired when the typeahead moves to active state. / typeahead:asyncreceive event fired when the typeahead moves to active state.
 * @param {function(!JQueryEventObject, !Array<?>): ?|?|string} handler_or_data_or_selector A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false. Rest parameter args is for optional parameters passed to jQuery.trigger(). Note that the actual parameters on the event handler function must be marked as optional (? syntax). / Data to be passed to the handler in event.data when an event is triggered. / A selector string to filter the descendants of the selected elements that trigger the event. If the selector is null or omitted, the event is always triggered when it reaches the selected element.
 * @param {function(!JQueryEventObject, !Array<?>): ?|?=} handler_or_data A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false. / Data to be passed to the handler in event.data when an event is triggered.
 * @param {function(!JQueryEventObject, !Array<?>): ?=} handler A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false.
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.on = function(events, handler_or_data_or_selector, handler_or_data, handler) {};

/**
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * @param {string} events typeahead:active event. / typeahead:idle event. / typeahead:open event. / typeahead:close event. / typeahead:change event. / typeahead:render event. / typeahead:select event. / typeahead:autocomplete event. / typeahead:cursorchange event. / typeahead:asyncrequest event. / typeahead:asynccancel event. / typeahead:asyncreceive event.
 * @param {string|function(!JQueryEventObject): ?=} selector_or_handler A handler function previously attached for the event(s), or the special value false.
 * @param {function(!JQueryEventObject): ?=} handler A handler function previously attached for the event(s), or the special value false.
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.off = function(events, selector_or_handler, handler) {};
/** @const */
var Twitter = {};
/** @const */
Twitter.Typeahead = {};
/**
 * @record
 * @struct
 */
Twitter.Typeahead.Options = function() {};
 /** @type {boolean} */
Twitter.Typeahead.Options.prototype.highlight;
 /** @type {boolean} */
Twitter.Typeahead.Options.prototype.hint;
 /** @type {number} */
Twitter.Typeahead.Options.prototype.minLength;
 /** @type {!Twitter.Typeahead.ClassNames} */
Twitter.Typeahead.Options.prototype.classNames;
/**
 * @record
 * @struct
 */
Twitter.Typeahead.Dataset = function() {};
 /** @type {(!Bloodhound<T>|function(string, function(!Array<T>): void, function(!Array<T>): void): void)} */
Twitter.Typeahead.Dataset.prototype.source;
 /** @type {boolean} */
Twitter.Typeahead.Dataset.prototype.async;
 /** @type {string} */
Twitter.Typeahead.Dataset.prototype.name;
 /** @type {number} */
Twitter.Typeahead.Dataset.prototype.limit;
 /** @type {(string|function(T): string)} */
Twitter.Typeahead.Dataset.prototype.display;
 /** @type {!Twitter.Typeahead.Templates<T>} */
Twitter.Typeahead.Dataset.prototype.templates;
/**
 * @record
 * @struct
 */
Twitter.Typeahead.Templates = function() {};
 /** @type {(string|function(string): string)} */
Twitter.Typeahead.Templates.prototype.notFound;
 /** @type {(string|function(string): string)} */
Twitter.Typeahead.Templates.prototype.pending;
 /** @type {(string|function(string, !Array<T>): string)} */
Twitter.Typeahead.Templates.prototype.header;
 /** @type {(string|function(string, !Array<T>): string)} */
Twitter.Typeahead.Templates.prototype.footer;
 /** @type {function(T): string} */
Twitter.Typeahead.Templates.prototype.suggestion;
/**
 * @record
 * @struct
 */
Twitter.Typeahead.ClassNames = function() {};
 /** @type {string} */
Twitter.Typeahead.ClassNames.prototype.input;
 /** @type {string} */
Twitter.Typeahead.ClassNames.prototype.hint;
 /** @type {string} */
Twitter.Typeahead.ClassNames.prototype.menu;
 /** @type {string} */
Twitter.Typeahead.ClassNames.prototype.dataset;
 /** @type {string} */
Twitter.Typeahead.ClassNames.prototype.suggestion;
 /** @type {string} */
Twitter.Typeahead.ClassNames.prototype.empty;
 /** @type {string} */
Twitter.Typeahead.ClassNames.prototype.open;
 /** @type {string} */
Twitter.Typeahead.ClassNames.prototype.cursor;
 /** @type {string} */
Twitter.Typeahead.ClassNames.prototype.highlight;
/** @const */
var Bloodhound = {};
/**
 * @record
 * @struct
 */
Bloodhound.BloodhoundOptions = function() {};
 /** @type {function(T): !Array<string>} */
Bloodhound.BloodhoundOptions.prototype.datumTokenizer;
 /** @type {function(string): !Array<string>} */
Bloodhound.BloodhoundOptions.prototype.queryTokenizer;
 /** @type {boolean} */
Bloodhound.BloodhoundOptions.prototype.initialize;
 /** @type {function(T): number} */
Bloodhound.BloodhoundOptions.prototype.identify;
 /** @type {number} */
Bloodhound.BloodhoundOptions.prototype.sufficient;
 /** @type {function(T, T): number} */
Bloodhound.BloodhoundOptions.prototype.sorter;
 /** @type {(!Array<T>|function(): !Array<T>)} */
Bloodhound.BloodhoundOptions.prototype.local;
 /** @type {(string|!Bloodhound.PrefetchOptions<T>)} */
Bloodhound.BloodhoundOptions.prototype.prefetch;
 /** @type {(string|!Bloodhound.RemoteOptions<T>)} */
Bloodhound.BloodhoundOptions.prototype.remote;
/**
 * @record
 * @struct
 */
Bloodhound.PrefetchOptions = function() {};
 /** @type {string} */
Bloodhound.PrefetchOptions.prototype.url;
 /** @type {boolean} */
Bloodhound.PrefetchOptions.prototype.cache;
 /** @type {number} */
Bloodhound.PrefetchOptions.prototype.ttl;
 /** @type {string} */
Bloodhound.PrefetchOptions.prototype.cacheKey;
 /** @type {string} */
Bloodhound.PrefetchOptions.prototype.thumbprint;
 /** @type {function(!JQueryAjaxSettings): !JQueryAjaxSettings} */
Bloodhound.PrefetchOptions.prototype.prepare;
 /** @type {function(T): T} */
Bloodhound.PrefetchOptions.prototype.transform;
/**
 * @record
 * @struct
 */
Bloodhound.RemoteOptions = function() {};
 /** @type {string} */
Bloodhound.RemoteOptions.prototype.url;
 /** @type {function(string, !JQueryAjaxSettings): !JQueryAjaxSettings} */
Bloodhound.RemoteOptions.prototype.prepare;
 /** @type {string} */
Bloodhound.RemoteOptions.prototype.wildcard;
 /** @type {string} */
Bloodhound.RemoteOptions.prototype.rateLimitby;
 /** @type {number} */
Bloodhound.RemoteOptions.prototype.rateLimitWait;
 /** @type {function(T): T} */
Bloodhound.RemoteOptions.prototype.transform;
 /** @type {function(T): T} */
Bloodhound.RemoteOptions.prototype.filter;
/**
 * @record
 * @struct
 */
Bloodhound.Tokenizers = function() {};
 /** @type {!Bloodhound.ObjTokenizer} */
Bloodhound.Tokenizers.prototype.obj;

/**
 * Split a given string on whitespace characters.
 * @param {string} str
 * @return {!Array<string>}
 */
Bloodhound.Tokenizers.prototype.whitespace = function(str) {};

/**
 * Split a given string on non-word characters.
 * @param {string} str
 * @return {!Array<string>}
 */
Bloodhound.Tokenizers.prototype.nonword = function(str) {};
/**
 * @record
 * @struct
 */
Bloodhound.ObjTokenizer = function() {};

/**
 * Split the string content of the given object attribute(s) on
 * whitespace characters.
 * @param {(string|!Array<string>)} key
 * @return {function(?): !Array<string>}
 */
Bloodhound.ObjTokenizer.prototype.whitespace = function(key) {};

/**
 * Split the string content of the given object attribute(s) on non-word
 * characters.
 * @param {(string|!Array<string>)} key
 * @return {function(?): !Array<string>}
 */
Bloodhound.ObjTokenizer.prototype.nonword = function(key) {};
 /** @type {!Bloodhound.Tokenizers} */
Bloodhound.tokenizers;

/**
 * Returns a reference to Bloodhound and reverts window.Bloodhound to its
 * previous value. Can be used to avoid naming collisions.
 * @return {!Bloodhound<?>}
 */
Bloodhound.noConflict = function() {};

/**
 * Kicks off the initialization of the suggestion engine. Initialization
 * entails adding the data provided by local and prefetch to the internal
 * search index as well as setting up transport mechanism used by remote.
 * Before #initialize is called, the #get and #search methods will effectively be no-ops.
 * 
 * Note, unless the initialize option is false, this method is implicitly called by the constructor.
 * 
 * After initialization, how subsequent invocations of #initialize behave depends on
 * the reinitialize argument. If reinitialize is falsy, the method will not execute the
 * initialization logic and will just return the same jQuery promise returned
 * by the initial invocation. If reinitialize is truthy, the method will behave
 * as if it were being called for the first time.
 * 
 * @param {boolean=} reinitialize How subsequent invocations of #initialize will behave.
 * @return {!JQueryPromise<T>} jQuery promise.
 */
Bloodhound.prototype.initialize = function(reinitialize) {};

/**
 * Takes one argument, data, which is expected to be an array.
 * The data passed in will get added to the internal search index.
 * 
 * @param {!Array<T>} data Data to be added to the internal search index.
 * @return {void}
 */
Bloodhound.prototype.add = function(data) {};

/**
 * Returns the data in the local search index corresponding to ids.
 * 
 * @param {!Array<number>} ids Data ids.
 * @return {!Array<T>} The corresponding data.
 */
Bloodhound.prototype.get = function(ids) {};

/**
 * Returns the data that matches query. Matches found in the local search
 * index will be passed to the sync callback. If the data passed to sync
 * doesn't contain at least sufficient number of datums, remote data will
 * be requested and then passed to the async callback.
 * 
 * @param {string} query Query.
 * @param {function(!Array<T>): void} sync Sync callback
 * @param {function(!Array<T>): void} async Async callback.
 * @return {!Array<T>} The data that matches query.
 */
Bloodhound.prototype.search = function(query, sync, async) {};

/**
 * Returns all items from the internal search index.
 * @return {!Array<T>}
 */
Bloodhound.prototype.all = function() {};

/**
 * Clears the internal search index that's powered by local, prefetch, and #add.
 * @return {!Bloodhound}
 */
Bloodhound.prototype.clear = function() {};

/**
 * If you're using prefetch, data gets cached in local storage in an effort to cut down on unnecessary network requests.
 * clearPrefetchCache offers a way to programmatically clear said cache.
 * @return {!Bloodhound}
 */
Bloodhound.prototype.clearPrefetchCache = function() {};

/**
 * If you're using remote, Bloodhound will cache the 10 most recent responses in an effort to provide a better user experience.
 * clearRemoteCache offers a way to programmatically clear said cache.
 * @return {!Bloodhound}
 */
Bloodhound.prototype.clearRemoteCache = function() {};

/**
 * @return {?}
 */
Bloodhound.prototype.ttAdapter = function() {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "bloodhound"
/** @const */
tsickle_declare_module.bloodhound = {};

/* TODO: ExportAssignment in tsickle_declare_module.bloodhound */
