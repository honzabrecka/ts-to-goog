/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jquery-mask-plugin/index.d.ts:
/** @const */
var jQueryMask = {};
/**
 * @record
 * @struct
 */
jQueryMask.Invalid = function() {};
 /** @type {number} */
jQueryMask.Invalid.prototype.p;
 /** @type {string} */
jQueryMask.Invalid.prototype.v;
 /** @type {string} */
jQueryMask.Invalid.prototype.e;
/**
 * @record
 * @struct
 */
jQueryMask.Options = function() {};
 /** @type {string} */
jQueryMask.Options.prototype.maskElements;
 /** @type {string} */
jQueryMask.Options.prototype.dataMaskAttr;
 /** @type {boolean} */
jQueryMask.Options.prototype.dataMask;
 /** @type {number} */
jQueryMask.Options.prototype.watchInterval;
 /** @type {boolean} */
jQueryMask.Options.prototype.watchInputs;
 /** @type {boolean} */
jQueryMask.Options.prototype.watchDataMask;
 /** @type {!Array<number>} */
jQueryMask.Options.prototype.byPassKeys;
 /** @type {!jQueryMask.Translation} */
jQueryMask.Options.prototype.translation;
 /** @type {boolean} */
jQueryMask.Options.prototype.selectOnFocus;
 /** @type {boolean} */
jQueryMask.Options.prototype.reverse;
 /** @type {boolean} */
jQueryMask.Options.prototype.clearIfNotMatch;

/**
 * @param {string} value
 * @param {!Event} e
 * @param {?<!HTMLElement>} $element
 * @param {!jQueryMask.Options} options
 * @return {void}
 */
jQueryMask.Options.prototype.onComplete = function(value, e, $element, options) {};

/**
 * @param {string} value
 * @param {!Event} e
 * @param {?<!HTMLElement>} $element
 * @param {!jQueryMask.Options} options
 * @return {void}
 */
jQueryMask.Options.prototype.onKeyPress = function(value, e, $element, options) {};

/**
 * @param {string} value
 * @param {!Event} e
 * @param {?<!HTMLElement>} $element
 * @param {!jQueryMask.Options} options
 * @return {void}
 */
jQueryMask.Options.prototype.onChange = function(value, e, $element, options) {};

/**
 * @param {string} value
 * @param {!Event} e
 * @param {?<!HTMLElement>} $element
 * @param {!Array<!jQueryMask.Invalid>} invalid
 * @param {!jQueryMask.Options} options
 * @return {void}
 */
jQueryMask.Options.prototype.onInvalid = function(value, e, $element, invalid, options) {};
/**
 * @record
 * @struct
 */
jQueryMask.Pattern = function() {};
 /** @type {!RegExp} */
jQueryMask.Pattern.prototype.pattern;
 /** @type {boolean} */
jQueryMask.Pattern.prototype.recursive;
 /** @type {boolean} */
jQueryMask.Pattern.prototype.optional;
 /** @type {string} */
jQueryMask.Pattern.prototype.fallback;
/**
 * @record
 * @struct
 */
jQueryMask.Translation = function() {};

/* TODO: IndexSignature: jQueryMask */
 /** @type {string} */
jQueryMask.Translation.prototype.placeholder;

/**
 * Applies the mask to the matching selector elements.
 * @param {(string|function(string): string)} mask should be a string or a function.
 * @param {!jQueryMask.Options=} options should be an options object.
 * @return {?<!HTMLElement>} The element.
 */
JQuery.prototype.mask = function(mask, options) {};

/**
 * Seek and destroy.
 * @return {?<!HTMLElement>} The element.
 */
JQuery.prototype.unmask = function() {};

/**
 * Gets the value of the field without the mask.
 * @return {string} Value without the mask.
 */
JQuery.prototype.cleanVal = function() {};

/**
 * Gets masked value programmatically
 * @param {string} value
 * @return {string} Masked value.
 */
JQuery.prototype.masked = function(value) {};
