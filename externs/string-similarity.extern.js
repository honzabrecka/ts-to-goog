/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/string-similarity/index.d.ts:

/**
 * Returns a fraction between 0 and 1, which indicates the degree of similarity between the two strings.
 * 0 indicates completely different strings, 1 indicates identical strings. The comparison is case-insensitive.
 * 
 * @param {string} string1 The first string
 * @param {string} string2 The second string
 * @return {number} A fraction from 0 to 1, both inclusive. Higher number indicates more similarity.
 */
function compareTwoStrings(string1, string2) {}

/**
 * Compares mainString against each string in targetStrings.
 * 
 * @argument mainString: The string to match each target string against.
 * @argument targetStrings: Each string in this array will be matched against the main string.
 * @param {string} mainString
 * @param {!Array<string>} targetStrings
 * @return {?} An object with a ratings property, which gives a similarity rating for each target string, and a bestMatch property,
 *          which specifies which target string was most similar to the main string.
 */
function findBestMatch(mainString, targetStrings) {}
/**
 * @record
 * @struct
 */
function Rating() {}
 /** @type {string} */
Rating.prototype.target;
 /** @type {number} */
Rating.prototype.rating;
/**
 * @record
 * @struct
 */
function BestMatch() {}
 /** @type {!Array<?>} */
BestMatch.prototype.ratings;
 /** @type {?} */
BestMatch.prototype.bestMatch;
