/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/gulp v3/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */
/** @const */
var gulp = {};
/**
 * @record
 * @struct
 */
gulp.Gulp = function() {};
 /** @type {!gulp.SrcMethod} */
gulp.Gulp.prototype.src;
 /** @type {!gulp.DestMethod} */
gulp.Gulp.prototype.dest;
 /** @type {!gulp.WatchMethod} */
gulp.Gulp.prototype.watch;

/**
 * Define a task
 * Define a task
 * @param {string} name The name of the task.
 * @param {function(function(?): void): ?|!Array<string>=} fn_or_deps The function that performs the task's operations. For asynchronous tasks, you need to provide a hint when the task is complete:
 * <ul>
 *     <li>Take in a callback</li>
 *     <li>Return a stream or a promise</li>
 * </ul> / An array of task names to be executed and completed before your task will run.
 * @param {function(function(?): void): ?=} fn The function that performs the task's operations. For asynchronous tasks, you need to provide a hint when the task is complete:
 * <ul>
 *     <li>Take in a callback</li>
 *     <li>Return a stream or a promise</li>
 * </ul>
 * @return {?|!gulp.Gulp}
 */
gulp.Gulp.prototype.task = function(name, fn_or_deps, fn) {};
/**
 * @record
 * @struct
 */
gulp.GulpPlugin = function() {};

/* TODO: CallSignature: gulp */
/**
 * @record
 * @struct
 */
gulp.WatchMethod = function() {};

/* TODO: CallSignature: gulp */

/* TODO: CallSignature: gulp */

/* TODO: CallSignature: gulp */

/* TODO: CallSignature: gulp */
/**
 * @record
 * @struct
 */
gulp.DestMethod = function() {};

/* TODO: CallSignature: gulp */
/**
 * @record
 * @struct
 */
gulp.SrcMethod = function() {};

/* TODO: CallSignature: gulp */
/**
 * @record
 * @struct
 */
gulp.SrcOptions = function() {};
 /** @type {boolean} */
gulp.SrcOptions.prototype.read;
 /** @type {boolean} */
gulp.SrcOptions.prototype.buffer;
 /** @type {string} */
gulp.SrcOptions.prototype.base;
 /** @type {string} */
gulp.SrcOptions.prototype.cwd;
 /** @type {string} */
gulp.SrcOptions.prototype.root;
 /** @type {boolean} */
gulp.SrcOptions.prototype.dot;
 /** @type {boolean} */
gulp.SrcOptions.prototype.nodir;
 /** @type {boolean} */
gulp.SrcOptions.prototype.nomount;
 /** @type {boolean} */
gulp.SrcOptions.prototype.mark;
 /** @type {boolean} */
gulp.SrcOptions.prototype.nosort;
 /** @type {boolean} */
gulp.SrcOptions.prototype.stat;
 /** @type {boolean} */
gulp.SrcOptions.prototype.silent;
 /** @type {boolean} */
gulp.SrcOptions.prototype.strict;
 /** @type {boolean} */
gulp.SrcOptions.prototype.cache;
 /** @type {boolean} */
gulp.SrcOptions.prototype.statCache;
 /** @type {boolean} */
gulp.SrcOptions.prototype.sync;
 /** @type {boolean} */
gulp.SrcOptions.prototype.nounique;
 /** @type {boolean} */
gulp.SrcOptions.prototype.nonull;
 /** @type {boolean} */
gulp.SrcOptions.prototype.nocase;
 /** @type {boolean} */
gulp.SrcOptions.prototype.debug;
 /** @type {boolean} */
gulp.SrcOptions.prototype.globDebug;
/**
 * @record
 * @struct
 */
gulp.DestOptions = function() {};
 /** @type {string} */
gulp.DestOptions.prototype.cwd;
 /** @type {string} */
gulp.DestOptions.prototype.mode;
/**
 * @record
 * @struct
 */
gulp.WatchOptions = function() {};
 /** @type {number} */
gulp.WatchOptions.prototype.interval;
 /** @type {number} */
gulp.WatchOptions.prototype.debounceDelay;
 /** @type {string} */
gulp.WatchOptions.prototype.mode;
 /** @type {string} */
gulp.WatchOptions.prototype.cwd;
/**
 * @record
 * @struct
 */
gulp.WatchEvent = function() {};
 /** @type {string} */
gulp.WatchEvent.prototype.type;
 /** @type {string} */
gulp.WatchEvent.prototype.path;
/**
 * @record
 * @struct
 */
gulp.WatchCallback = function() {};

/* TODO: CallSignature: gulp */
/**
 * @record
 * @struct
 */
gulp.TaskCallback = function() {};

/* TODO: CallSignature: gulp */
 /** @type {!gulp.Gulp} */
var gulp;

/* TODO: ExportAssignment in  */
