/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/firebase/index.d.ts:
/**
 * @record
 * @struct
 */
function FirebaseAuthResult() {}
 /** @type {?} */
FirebaseAuthResult.prototype.auth;
 /** @type {number} */
FirebaseAuthResult.prototype.expires;
/**
 * @record
 * @struct
 */
function FirebaseDataSnapshot() {}

/**
 * Returns true if this DataSnapshot contains any data.
 * It is slightly more efficient than using snapshot.val() !== null.
 * @return {boolean}
 */
FirebaseDataSnapshot.prototype.exists = function() {};

/**
 * Gets the JavaScript object representation of the DataSnapshot.
 * @return {?}
 */
FirebaseDataSnapshot.prototype.val = function() {};

/**
 * Gets a DataSnapshot for the location at the specified relative path.
 * @param {string} childPath
 * @return {!FirebaseDataSnapshot}
 */
FirebaseDataSnapshot.prototype.child = function(childPath) {};

/**
 * Enumerates through the DataSnapshotâ€™s children (in the default order).
 * @param {function(!FirebaseDataSnapshot): void|function(!FirebaseDataSnapshot): boolean} childAction
 * @return {boolean}
 */
FirebaseDataSnapshot.prototype.forEach = function(childAction) {};

/**
 * Returns true if the specified child exists.
 * @param {string} childPath
 * @return {boolean}
 */
FirebaseDataSnapshot.prototype.hasChild = function(childPath) {};

/**
 * Returns true if the DataSnapshot has any children.
 * @return {boolean}
 */
FirebaseDataSnapshot.prototype.hasChildren = function() {};

/**
 * Gets the key name of the location that generated this DataSnapshot.
 * @return {string}
 */
FirebaseDataSnapshot.prototype.key = function() {};

/**
 * @deprecated Use key() instead.
 * Gets the key name of the location that generated this DataSnapshot.
 * @return {string}
 */
FirebaseDataSnapshot.prototype.name = function() {};

/**
 * Gets the number of children for this DataSnapshot.
 * @return {number}
 */
FirebaseDataSnapshot.prototype.numChildren = function() {};

/**
 * Gets the Firebase reference for the location that generated this DataSnapshot.
 * @return {?}
 */
FirebaseDataSnapshot.prototype.ref = function() {};

/**
 * Gets the priority of the data in this DataSnapshot.
 * @return {?}
 */
FirebaseDataSnapshot.prototype.getPriority = function() {};

/**
 * Exports the entire contents of the DataSnapshot as a JavaScript object.
 * @return {!Object}
 */
FirebaseDataSnapshot.prototype.exportVal = function() {};
/**
 * @record
 * @struct
 */
function FirebaseOnDisconnect() {}

/**
 * Ensures the data at this location is set to the specified value when the client is disconnected
 * (due to closing the browser, navigating to a new page, or network issues).
 * @param {?} value
 * @param {function(?): void=} onComplete
 * @return {void|!Promise<void>}
 */
FirebaseOnDisconnect.prototype.set = function(value, onComplete) {};

/**
 * Ensures the data at this location is set to the specified value and priority when the client is disconnected
 * (due to closing the browser, navigating to a new page, or network issues).
 * @param {?} value
 * @param {(string|number)} priority
 * @param {function(?): void=} onComplete
 * @return {void|!Promise<void>}
 */
FirebaseOnDisconnect.prototype.setWithPriority = function(value, priority, onComplete) {};

/**
 * Writes the enumerated children at this Firebase location when the client is disconnected
 * (due to closing the browser, navigating to a new page, or network issues).
 * @param {!Object} value
 * @param {function(?): void=} onComplete
 * @return {void|!Promise<void>}
 */
FirebaseOnDisconnect.prototype.update = function(value, onComplete) {};

/**
 * Ensures the data at this location is deleted when the client is disconnected
 * (due to closing the browser, navigating to a new page, or network issues).
 * @param {function(?): void=} onComplete
 * @return {void|!Promise<void>}
 */
FirebaseOnDisconnect.prototype.remove = function(onComplete) {};

/**
 * Cancels all previously queued onDisconnect() set or update events for this location and all children.
 * @param {function(?): void=} onComplete
 * @return {void|!Promise<void>}
 */
FirebaseOnDisconnect.prototype.cancel = function(onComplete) {};
/**
 * @record
 * @struct
 */
function FirebaseQuery() {}

/**
 * Listens for data changes at a particular location.
 * @param {string} eventType
 * @param {function(!FirebaseDataSnapshot, string): void} callback
 * @param {function(?): void=} cancelCallback
 * @param {!Object=} context
 * @return {function(!FirebaseDataSnapshot, string): void}
 */
FirebaseQuery.prototype.on = function(eventType, callback, cancelCallback, context) {};

/**
 * Detaches a callback previously attached with on().
 * @param {string=} eventType
 * @param {function(!FirebaseDataSnapshot, string): void=} callback
 * @param {!Object=} context
 * @return {void}
 */
FirebaseQuery.prototype.off = function(eventType, callback, context) {};

/**
 * Listens for exactly one event of the specified event type, and then stops listening.
 * @param {string} eventType
 * @param {function(!FirebaseDataSnapshot): void=} successCallback
 * @param {!Object|function(?): void=} context_or_failureCallback
 * @param {!Object=} context
 * @return {void|!Promise<!FirebaseDataSnapshot>}
 */
FirebaseQuery.prototype.once = function(eventType, successCallback, context_or_failureCallback, context) {};

/**
 * Generates a new Query object ordered by the specified child key.
 * @param {string} key
 * @return {!FirebaseQuery}
 */
FirebaseQuery.prototype.orderByChild = function(key) {};

/**
 * Generates a new Query object ordered by key name.
 * @return {!FirebaseQuery}
 */
FirebaseQuery.prototype.orderByKey = function() {};

/**
 * Generates a new Query object ordered by child values.
 * @return {!FirebaseQuery}
 */
FirebaseQuery.prototype.orderByValue = function() {};

/**
 * Generates a new Query object ordered by priority.
 * @return {!FirebaseQuery}
 */
FirebaseQuery.prototype.orderByPriority = function() {};

/**
 * @deprecated Use limitToFirst() and limitToLast() instead.
 * Generates a new Query object limited to the specified number of children.
 * @param {number} limit
 * @return {!FirebaseQuery}
 */
FirebaseQuery.prototype.limit = function(limit) {};

/**
 * Creates a Query with the specified starting point.
 * The generated Query includes children which match the specified starting point.
 * @param {string|number} value
 * @param {string=} key
 * @return {!FirebaseQuery}
 */
FirebaseQuery.prototype.startAt = function(value, key) {};

/**
 * Creates a Query with the specified ending point.
 * The generated Query includes children which match the specified ending point.
 * @param {string|number} value
 * @param {string=} key
 * @return {!FirebaseQuery}
 */
FirebaseQuery.prototype.endAt = function(value, key) {};

/**
 * Creates a Query which includes children which match the specified value.
 * @param {(string|number|boolean)} value
 * @param {string=} key
 * @return {!FirebaseQuery}
 */
FirebaseQuery.prototype.equalTo = function(value, key) {};

/**
 * Generates a new Query object limited to the first certain number of children.
 * @param {number} limit
 * @return {!FirebaseQuery}
 */
FirebaseQuery.prototype.limitToFirst = function(limit) {};

/**
 * Generates a new Query object limited to the last certain number of children.
 * @param {number} limit
 * @return {!FirebaseQuery}
 */
FirebaseQuery.prototype.limitToLast = function(limit) {};

/**
 * Gets a Firebase reference to the Query's location.
 * @return {?}
 */
FirebaseQuery.prototype.ref = function() {};
/**
 * @extends {FirebaseQuery}
 * @record
 * @struct
 */
function Firebase() {}

/**
 * @deprecated Use authWithCustomToken() instead.
 * Authenticates a Firebase client using the provided authentication token or Firebase Secret.
 * @param {string} authToken
 * @param {function(?, !FirebaseAuthResult): void=} onComplete
 * @param {function(?): void=} onCancel
 * @return {void|!Promise<!FirebaseAuthResult>}
 */
Firebase.prototype.auth = function(authToken, onComplete, onCancel) {};

/**
 * Authenticates a Firebase client using an authentication token or Firebase Secret.
 * @param {string} autoToken
 * @param {function(?, !FirebaseAuthData): void|!Object=} onComplete_or_options
 * @param {!Object=} options
 * @return {void|!Promise<!FirebaseAuthData>}
 */
Firebase.prototype.authWithCustomToken = function(autoToken, onComplete_or_options, options) {};

/**
 * Authenticates a Firebase client using a new, temporary guest account.
 * @param {function(?, !FirebaseAuthData): void|!Object=} onComplete_or_options
 * @param {!Object=} options
 * @return {void|!Promise<!FirebaseAuthData>}
 */
Firebase.prototype.authAnonymously = function(onComplete_or_options, options) {};

/**
 * Authenticates a Firebase client using an email / password combination.
 * @param {!FirebaseCredentials} credentials
 * @param {function(?, !FirebaseAuthData): void|!Object=} onComplete_or_options
 * @param {!Object=} options
 * @return {void|!Promise<!FirebaseAuthData>}
 */
Firebase.prototype.authWithPassword = function(credentials, onComplete_or_options, options) {};

/**
 * Authenticates a Firebase client using a popup-based OAuth flow.
 * @param {string} provider
 * @param {function(?, !FirebaseAuthData): void|!Object=} onComplete_or_options
 * @param {!Object=} options
 * @return {void|!Promise<!FirebaseAuthData>}
 */
Firebase.prototype.authWithOAuthPopup = function(provider, onComplete_or_options, options) {};

/**
 * Authenticates a Firebase client using a redirect-based OAuth flow.
 * @param {string} provider
 * @param {function(?): void|!Object=} onComplete_or_options
 * @param {!Object=} options
 * @return {void|!Promise<void>}
 */
Firebase.prototype.authWithOAuthRedirect = function(provider, onComplete_or_options, options) {};

/**
 * Authenticates a Firebase client using OAuth access tokens or credentials.
 * @param {string} provider
 * @param {(string|!Object)} credentials
 * @param {function(?, !FirebaseAuthData): void|!Object=} onComplete_or_options
 * @param {!Object=} options
 * @return {void|!Promise<!FirebaseAuthData>}
 */
Firebase.prototype.authWithOAuthToken = function(provider, credentials, onComplete_or_options, options) {};

/**
 * Synchronously access the current authentication state of the client.
 * @return {!FirebaseAuthData}
 */
Firebase.prototype.getAuth = function() {};

/**
 * Listen for changes to the client's authentication state.
 * @param {function(!FirebaseAuthData): void} onComplete
 * @param {!Object=} context
 * @return {void}
 */
Firebase.prototype.onAuth = function(onComplete, context) {};

/**
 * Detaches a callback previously attached with onAuth().
 * @param {function(!FirebaseAuthData): void} onComplete
 * @param {!Object=} context
 * @return {void}
 */
Firebase.prototype.offAuth = function(onComplete, context) {};

/**
 * Unauthenticates a Firebase client.
 * @return {void}
 */
Firebase.prototype.unauth = function() {};

/**
 * Gets a Firebase reference for the location at the specified relative path.
 * @param {string} childPath
 * @return {?}
 */
Firebase.prototype.child = function(childPath) {};

/**
 * Gets a Firebase reference to the parent location.
 * @return {?}
 */
Firebase.prototype.parent = function() {};

/**
 * Gets a Firebase reference to the root of the Firebase.
 * @return {?}
 */
Firebase.prototype.root = function() {};

/**
 * Returns the last token in a Firebase location.
 * @return {string}
 */
Firebase.prototype.key = function() {};

/**
 * @deprecated Use key() instead.
 * Returns the last token in a Firebase location.
 * @return {string}
 */
Firebase.prototype.name = function() {};

/**
 * Gets the absolute URL corresponding to this Firebase reference's location.
 * @return {string}
 */
Firebase.prototype.toString = function() {};

/**
 * Writes data to this Firebase location.
 * @param {?} value
 * @param {function(?): void=} onComplete
 * @return {void|!Promise<void>}
 */
Firebase.prototype.set = function(value, onComplete) {};

/**
 * Writes the enumerated children to this Firebase location.
 * @param {!Object} value
 * @param {function(?): void=} onComplete
 * @return {void|!Promise<void>}
 */
Firebase.prototype.update = function(value, onComplete) {};

/**
 * Removes the data at this Firebase location.
 * @param {function(?): void=} onComplete
 * @return {void|!Promise<void>}
 */
Firebase.prototype.remove = function(onComplete) {};

/**
 * Generates a new child location using a unique name and returns a Firebase reference to it.
 * @param {?=} value
 * @param {function(?): void=} onComplete
 * @return {!FirebaseWithPromise<void>}
 */
Firebase.prototype.push = function(value, onComplete) {};

/**
 * Writes data to this Firebase location. Like set() but also specifies the priority for that data.
 * @param {?} value
 * @param {(string|number)} priority
 * @param {function(?): void=} onComplete
 * @return {void|!Promise<void>}
 */
Firebase.prototype.setWithPriority = function(value, priority, onComplete) {};

/**
 * Sets a priority for the data at this Firebase location.
 * @param {(string|number)} priority
 * @param {function(?): void=} onComplete
 * @return {void|!Promise<void>}
 */
Firebase.prototype.setPriority = function(priority, onComplete) {};

/**
 * Atomically modifies the data at this location.
 * @param {function(?): ?} updateFunction
 * @param {function(?, boolean, !FirebaseDataSnapshot): void=} onComplete
 * @param {boolean=} applyLocally
 * @return {void}
 */
Firebase.prototype.transaction = function(updateFunction, onComplete, applyLocally) {};

/**
 * Creates a new user account using an email / password combination.
 * @param {!FirebaseCredentials} credentials
 * @param {function(?, ?): void} onComplete
 * @return {void}
 */
Firebase.prototype.createUser = function(credentials, onComplete) {};

/**
 * Updates the email associated with an email / password user account.
 * @param {!FirebaseChangeEmailCredentials} credentials
 * @param {function(?): void} onComplete
 * @return {void}
 */
Firebase.prototype.changeEmail = function(credentials, onComplete) {};

/**
 * Change the password of an existing user using an email / password combination.
 * @param {!FirebaseChangePasswordCredentials} credentials
 * @param {function(?): void} onComplete
 * @return {void}
 */
Firebase.prototype.changePassword = function(credentials, onComplete) {};

/**
 * Removes an existing user account using an email / password combination.
 * @param {!FirebaseCredentials} credentials
 * @param {function(?): void} onComplete
 * @return {void}
 */
Firebase.prototype.removeUser = function(credentials, onComplete) {};

/**
 * Sends a password-reset email to the owner of the account, containing a token that may be used to authenticate and change the user password.
 * @param {!FirebaseResetPasswordCredentials} credentials
 * @param {function(?): void} onComplete
 * @return {void}
 */
Firebase.prototype.resetPassword = function(credentials, onComplete) {};

/**
 * @return {!FirebaseOnDisconnect}
 */
Firebase.prototype.onDisconnect = function() {};
/**
 * @record
 * @struct
 */
function FirebaseWithPromise() {}
/**
 * @record
 * @struct
 */
function FirebaseStatic() {}

/* TODO: ConstructSignature:  */
 /** @type {{TIMESTAMP: ?}} */
FirebaseStatic.prototype.ServerValue;

/**
 * Manually disconnects the Firebase client from the server and disables automatic reconnection.
 * @return {void}
 */
FirebaseStatic.prototype.goOffline = function() {};

/**
 * Manually reestablishes a connection to the Firebase server and enables automatic reconnection.
 * @return {void}
 */
FirebaseStatic.prototype.goOnline = function() {};
 /** @type {!FirebaseStatic} */
var Firebase;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "firebase"
/** @const */
tsickle_declare_module.firebase = {};

/* TODO: ExportAssignment in tsickle_declare_module.firebase */
/**
 * @record
 * @struct
 */
function FirebaseAuthData() {}
 /** @type {string} */
FirebaseAuthData.prototype.uid;
 /** @type {string} */
FirebaseAuthData.prototype.provider;
 /** @type {string} */
FirebaseAuthData.prototype.token;
 /** @type {number} */
FirebaseAuthData.prototype.expires;
 /** @type {!Object} */
FirebaseAuthData.prototype.auth;
 /** @type {!FirebaseAuthDataGoogle} */
FirebaseAuthData.prototype.google;
 /** @type {!FirebaseAuthDataTwitter} */
FirebaseAuthData.prototype.twitter;
 /** @type {!FirebaseAuthDataGithub} */
FirebaseAuthData.prototype.github;
 /** @type {!FirebaseAuthDataFacebook} */
FirebaseAuthData.prototype.facebook;
 /** @type {!FirebaseAuthDataPassword} */
FirebaseAuthData.prototype.password;
 /** @type {?} */
FirebaseAuthData.prototype.anonymous;
/**
 * @record
 * @struct
 */
function FirebaseAuthDataPassword() {}
 /** @type {string} */
FirebaseAuthDataPassword.prototype.email;
 /** @type {boolean} */
FirebaseAuthDataPassword.prototype.isTemporaryPassword;
 /** @type {string} */
FirebaseAuthDataPassword.prototype.profileImageURL;
/**
 * @record
 * @struct
 */
function FirebaseAuthDataTwitter() {}
 /** @type {string} */
FirebaseAuthDataTwitter.prototype.id;
 /** @type {string} */
FirebaseAuthDataTwitter.prototype.accessToken;
 /** @type {string} */
FirebaseAuthDataTwitter.prototype.accessTokenSecret;
 /** @type {string} */
FirebaseAuthDataTwitter.prototype.displayName;
 /** @type {string} */
FirebaseAuthDataTwitter.prototype.username;
 /** @type {string} */
FirebaseAuthDataTwitter.prototype.profileImageURL;
 /** @type {?} */
FirebaseAuthDataTwitter.prototype.cachedUserProfile;
/**
 * @record
 * @struct
 */
function FirebaseAuthDataGithub() {}
 /** @type {string} */
FirebaseAuthDataGithub.prototype.id;
 /** @type {string} */
FirebaseAuthDataGithub.prototype.accessToken;
 /** @type {string} */
FirebaseAuthDataGithub.prototype.displayName;
 /** @type {string} */
FirebaseAuthDataGithub.prototype.email;
 /** @type {string} */
FirebaseAuthDataGithub.prototype.username;
 /** @type {string} */
FirebaseAuthDataGithub.prototype.profileImageURL;
 /** @type {?} */
FirebaseAuthDataGithub.prototype.cachedUserProfile;
/**
 * @record
 * @struct
 */
function FirebaseAuthDataFacebook() {}
 /** @type {string} */
FirebaseAuthDataFacebook.prototype.id;
 /** @type {string} */
FirebaseAuthDataFacebook.prototype.accessToken;
 /** @type {string} */
FirebaseAuthDataFacebook.prototype.displayName;
 /** @type {string} */
FirebaseAuthDataFacebook.prototype.email;
 /** @type {string} */
FirebaseAuthDataFacebook.prototype.profileImageURL;
 /** @type {?} */
FirebaseAuthDataFacebook.prototype.cachedUserProfile;
/**
 * @record
 * @struct
 */
function FirebaseAuthDataGoogle() {}
 /** @type {string} */
FirebaseAuthDataGoogle.prototype.accessToken;
 /** @type {!FirebaseAuthDataGoogleCachedUserProfile} */
FirebaseAuthDataGoogle.prototype.cachedUserProfile;
 /** @type {string} */
FirebaseAuthDataGoogle.prototype.displayName;
 /** @type {string} */
FirebaseAuthDataGoogle.prototype.email;
 /** @type {string} */
FirebaseAuthDataGoogle.prototype.id;
 /** @type {string} */
FirebaseAuthDataGoogle.prototype.profileImageURL;
/**
 * @record
 * @struct
 */
function FirebaseAuthDataGoogleCachedUserProfile() {}

/* TODO: PropertySignature: "family name" */
 /** @type {string} */
FirebaseAuthDataGoogleCachedUserProfile.prototype.gender;

/* TODO: PropertySignature: "given name" */
 /** @type {string} */
FirebaseAuthDataGoogleCachedUserProfile.prototype.id;
 /** @type {string} */
FirebaseAuthDataGoogleCachedUserProfile.prototype.link;
 /** @type {string} */
FirebaseAuthDataGoogleCachedUserProfile.prototype.locale;
 /** @type {string} */
FirebaseAuthDataGoogleCachedUserProfile.prototype.name;
 /** @type {string} */
FirebaseAuthDataGoogleCachedUserProfile.prototype.picture;
/**
 * @record
 * @struct
 */
function FirebaseCredentials() {}
 /** @type {string} */
FirebaseCredentials.prototype.email;
 /** @type {string} */
FirebaseCredentials.prototype.password;
/**
 * @record
 * @struct
 */
function FirebaseChangePasswordCredentials() {}
 /** @type {string} */
FirebaseChangePasswordCredentials.prototype.email;
 /** @type {string} */
FirebaseChangePasswordCredentials.prototype.oldPassword;
 /** @type {string} */
FirebaseChangePasswordCredentials.prototype.newPassword;
/**
 * @record
 * @struct
 */
function FirebaseChangeEmailCredentials() {}
 /** @type {string} */
FirebaseChangeEmailCredentials.prototype.oldEmail;
 /** @type {string} */
FirebaseChangeEmailCredentials.prototype.newEmail;
 /** @type {string} */
FirebaseChangeEmailCredentials.prototype.password;
/**
 * @record
 * @struct
 */
function FirebaseResetPasswordCredentials() {}
 /** @type {string} */
FirebaseResetPasswordCredentials.prototype.email;
