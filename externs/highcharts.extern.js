/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/highcharts/index.d.ts:
/** @const */
var Highcharts = {};
/**
 * @record
 * @struct
 */
Highcharts.Position = function() {};
 /** @type {string} */
Highcharts.Position.prototype.align;
 /** @type {string} */
Highcharts.Position.prototype.verticalAlign;
 /** @type {number} */
Highcharts.Position.prototype.x;
 /** @type {number} */
Highcharts.Position.prototype.y;
/**
 * @record
 * @struct
 */
Highcharts.DateTimeFormats = function() {};
 /** @type {string} */
Highcharts.DateTimeFormats.prototype.millisecond;
 /** @type {string} */
Highcharts.DateTimeFormats.prototype.second;
 /** @type {string} */
Highcharts.DateTimeFormats.prototype.minute;
 /** @type {string} */
Highcharts.DateTimeFormats.prototype.hour;
 /** @type {string} */
Highcharts.DateTimeFormats.prototype.day;
 /** @type {string} */
Highcharts.DateTimeFormats.prototype.week;
 /** @type {string} */
Highcharts.DateTimeFormats.prototype.month;
 /** @type {string} */
Highcharts.DateTimeFormats.prototype.year;
/**
 * @record
 * @struct
 */
Highcharts.AxisEvent = function() {};
 /** @type {number} */
Highcharts.AxisEvent.prototype.min;
 /** @type {number} */
Highcharts.AxisEvent.prototype.max;
/**
 * @record
 * @struct
 */
Highcharts.AxisLabels = function() {};
 /** @type {string} */
Highcharts.AxisLabels.prototype.align;
 /** @type {!Array<number>} */
Highcharts.AxisLabels.prototype.autoRotation;
 /** @type {number} */
Highcharts.AxisLabels.prototype.autoRotationLimit;
 /** @type {number} */
Highcharts.AxisLabels.prototype.distance;
 /** @type {boolean} */
Highcharts.AxisLabels.prototype.enabled;
 /** @type {string} */
Highcharts.AxisLabels.prototype.format;
 /** @type {number} */
Highcharts.AxisLabels.prototype.maxStaggerLines;
 /** @type {(string|boolean)} */
Highcharts.AxisLabels.prototype.overflow;
 /** @type {number} */
Highcharts.AxisLabels.prototype.padding;
 /** @type {boolean} */
Highcharts.AxisLabels.prototype.reserveSpace;
 /** @type {number} */
Highcharts.AxisLabels.prototype.rotation;
 /** @type {number} */
Highcharts.AxisLabels.prototype.staggerLines;
 /** @type {number} */
Highcharts.AxisLabels.prototype.step;
 /** @type {!Highcharts.CSSObject} */
Highcharts.AxisLabels.prototype.style;
 /** @type {boolean} */
Highcharts.AxisLabels.prototype.useHTML;
 /** @type {number} */
Highcharts.AxisLabels.prototype.x;
 /** @type {number} */
Highcharts.AxisLabels.prototype.y;
 /** @type {number} */
Highcharts.AxisLabels.prototype.zIndex;

/**
 * Callback JavaScript function to format the label. The value is given by this.value. Additional properties for
 * this are axis, chart, isFirst and isLast.
 * \@default function() {return this.value;}
 * @return {string}
 */
Highcharts.AxisLabels.prototype.formatter = function() {};
/**
 * @record
 * @struct
 */
Highcharts.MousePlotEvents = function() {};

/**
 * @param {!Event} event
 * @return {void}
 */
Highcharts.MousePlotEvents.prototype.click = function(event) {};

/**
 * @param {!Event} event
 * @return {void}
 */
Highcharts.MousePlotEvents.prototype.mouseover = function(event) {};

/**
 * @param {!Event} event
 * @return {void}
 */
Highcharts.MousePlotEvents.prototype.mouseout = function(event) {};

/**
 * @param {!Event} event
 * @return {void}
 */
Highcharts.MousePlotEvents.prototype.mousemove = function(event) {};
/**
 * @record
 * @struct
 */
Highcharts.PlotLabel = function() {};
 /** @type {string} */
Highcharts.PlotLabel.prototype.align;
 /** @type {number} */
Highcharts.PlotLabel.prototype.rotation;
 /** @type {!Highcharts.CSSObject} */
Highcharts.PlotLabel.prototype.style;
 /** @type {string} */
Highcharts.PlotLabel.prototype.text;
 /** @type {string} */
Highcharts.PlotLabel.prototype.textAlign;
 /** @type {boolean} */
Highcharts.PlotLabel.prototype.useHTML;
 /** @type {string} */
Highcharts.PlotLabel.prototype.verticalAlign;
 /** @type {number} */
Highcharts.PlotLabel.prototype.x;
 /** @type {number} */
Highcharts.PlotLabel.prototype.y;
/**
 * @record
 * @struct
 */
Highcharts.PlotBands = function() {};
 /** @type {string} */
Highcharts.PlotBands.prototype.className;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.PlotBands.prototype.borderColor;
 /** @type {number} */
Highcharts.PlotBands.prototype.borderWidth;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.PlotBands.prototype.color;
 /** @type {!Highcharts.MousePlotEvents} */
Highcharts.PlotBands.prototype.events;
 /** @type {number} */
Highcharts.PlotBands.prototype.from;
 /** @type {string} */
Highcharts.PlotBands.prototype.id;
 /** @type {(string|number)} */
Highcharts.PlotBands.prototype.innerRadius;
 /** @type {!Highcharts.PlotLabel} */
Highcharts.PlotBands.prototype.label;
 /** @type {(string|number)} */
Highcharts.PlotBands.prototype.outerRadius;
 /** @type {(string|number)} */
Highcharts.PlotBands.prototype.thickness;
 /** @type {number} */
Highcharts.PlotBands.prototype.to;
 /** @type {number} */
Highcharts.PlotBands.prototype.zIndex;
/**
 * @record
 * @struct
 */
Highcharts.PlotLines = function() {};
 /** @type {string} */
Highcharts.PlotLines.prototype.className;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.PlotLines.prototype.color;
 /** @type {string} */
Highcharts.PlotLines.prototype.dashStyle;
 /** @type {!Highcharts.MousePlotEvents} */
Highcharts.PlotLines.prototype.events;
 /** @type {string} */
Highcharts.PlotLines.prototype.id;
 /** @type {!Highcharts.PlotLabel} */
Highcharts.PlotLines.prototype.label;
 /** @type {number} */
Highcharts.PlotLines.prototype.value;
 /** @type {number} */
Highcharts.PlotLines.prototype.width;
 /** @type {number} */
Highcharts.PlotLines.prototype.zIndex;
/**
 * @record
 * @struct
 */
Highcharts.AccessibilityOptions = function() {};
 /** @type {boolean} */
Highcharts.AccessibilityOptions.prototype.describeSingleSeries;
 /** @type {boolean} */
Highcharts.AccessibilityOptions.prototype.enabled;
 /** @type {!Highcharts.KeyboardNavigationOptions} */
Highcharts.AccessibilityOptions.prototype.keyboardNavigation;
 /** @type {!Function} */
Highcharts.AccessibilityOptions.prototype.onTableAnchorClick;
 /** @type {string} */
Highcharts.AccessibilityOptions.prototype.pointDateFormat;
 /** @type {!Function} */
Highcharts.AccessibilityOptions.prototype.pointDateFormatter;
 /** @type {!Function} */
Highcharts.AccessibilityOptions.prototype.pointDescriptionFormatter;
 /** @type {(number|boolean)} */
Highcharts.AccessibilityOptions.prototype.pointDescriptionThreshold;
 /** @type {!Function} */
Highcharts.AccessibilityOptions.prototype.screenReaderSectionFormatter;
 /** @type {!Function} */
Highcharts.AccessibilityOptions.prototype.seriesDescriptionFormatter;
/**
 * @record
 * @struct
 */
Highcharts.KeyboardNavigationOptions = function() {};
 /** @type {boolean} */
Highcharts.KeyboardNavigationOptions.prototype.enabled;
 /** @type {boolean} */
Highcharts.KeyboardNavigationOptions.prototype.skipNullPoints;
/**
 * @record
 * @struct
 */
Highcharts.AxisTitle = function() {};
 /** @type {string} */
Highcharts.AxisTitle.prototype.align;
 /** @type {string} */
Highcharts.AxisTitle.prototype.enabled;
 /** @type {number} */
Highcharts.AxisTitle.prototype.margin;
 /** @type {number} */
Highcharts.AxisTitle.prototype.offset;
 /** @type {number} */
Highcharts.AxisTitle.prototype.rotation;
 /** @type {!Highcharts.CSSObject} */
Highcharts.AxisTitle.prototype.style;
 /** @type {string} */
Highcharts.AxisTitle.prototype.text;
 /** @type {number} */
Highcharts.AxisTitle.prototype.x;
 /** @type {number} */
Highcharts.AxisTitle.prototype.y;
/**
 * @record
 * @struct
 */
Highcharts.AxisBreak = function() {};
 /** @type {number} */
Highcharts.AxisBreak.prototype.breakSize;
 /** @type {number} */
Highcharts.AxisBreak.prototype.from;
 /** @type {number} */
Highcharts.AxisBreak.prototype.repeat;
 /** @type {number} */
Highcharts.AxisBreak.prototype.to;
/**
 * @record
 * @struct
 */
Highcharts.AxisOptions = function() {};
 /** @type {boolean} */
Highcharts.AxisOptions.prototype.allowDecimals;
 /** @type {string} */
Highcharts.AxisOptions.prototype.alternateGridColor;
 /** @type {!Array<!Highcharts.AxisBreak>} */
Highcharts.AxisOptions.prototype.breaks;
 /** @type {!Array<string>} */
Highcharts.AxisOptions.prototype.categories;
 /** @type {number} */
Highcharts.AxisOptions.prototype.ceiling;
 /** @type {string} */
Highcharts.AxisOptions.prototype.className;
 /** @type {(boolean|!Highcharts.CrosshairObject)} */
Highcharts.AxisOptions.prototype.crosshair;
 /** @type {!Highcharts.DateTimeFormats} */
Highcharts.AxisOptions.prototype.dateTimeLabelFormats;
 /** @type {string} */
Highcharts.AxisOptions.prototype.description;
 /** @type {boolean} */
Highcharts.AxisOptions.prototype.endOnTick;
 /** @type {{afterBreaks: function(!Event): void, afterSetExtremes: function(!Highcharts.AxisEvent): void, pointBreak: function(!Event): void, setExtremes: function(!Highcharts.AxisEvent): void}} */
Highcharts.AxisOptions.prototype.events;
 /** @type {number} */
Highcharts.AxisOptions.prototype.floor;
 /** @type {string} */
Highcharts.AxisOptions.prototype.gridLineColor;
 /** @type {string} */
Highcharts.AxisOptions.prototype.gridLineDashStyle;
 /** @type {number} */
Highcharts.AxisOptions.prototype.gridLineWidth;
 /** @type {number} */
Highcharts.AxisOptions.prototype.gridZIndex;
 /** @type {string} */
Highcharts.AxisOptions.prototype.id;
 /** @type {!Highcharts.AxisLabels} */
Highcharts.AxisOptions.prototype.labels;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.AxisOptions.prototype.lineColor;
 /** @type {number} */
Highcharts.AxisOptions.prototype.lineWidth;
 /** @type {number} */
Highcharts.AxisOptions.prototype.linkedTo;
 /** @type {number} */
Highcharts.AxisOptions.prototype.max;
 /** @type {number} */
Highcharts.AxisOptions.prototype.maxPadding;
 /** @type {number} */
Highcharts.AxisOptions.prototype.maxZoom;
 /** @type {number} */
Highcharts.AxisOptions.prototype.min;
 /** @type {number} */
Highcharts.AxisOptions.prototype.minPadding;
 /** @type {number} */
Highcharts.AxisOptions.prototype.minRange;
 /** @type {number} */
Highcharts.AxisOptions.prototype.minTickInterval;
 /** @type {string} */
Highcharts.AxisOptions.prototype.minorGridLineColor;
 /** @type {string} */
Highcharts.AxisOptions.prototype.minorGridLineDashStyle;
 /** @type {number} */
Highcharts.AxisOptions.prototype.minorGridLineWidth;
 /** @type {string} */
Highcharts.AxisOptions.prototype.minorTickColor;
 /** @type {(string|number)} */
Highcharts.AxisOptions.prototype.minorTickInterval;
 /** @type {number} */
Highcharts.AxisOptions.prototype.minorTickLength;
 /** @type {string} */
Highcharts.AxisOptions.prototype.minorTickPosition;
 /** @type {number} */
Highcharts.AxisOptions.prototype.minorTickWidth;
 /** @type {number} */
Highcharts.AxisOptions.prototype.offset;
 /** @type {boolean} */
Highcharts.AxisOptions.prototype.opposite;
 /** @type {!Array<!Highcharts.PlotBands>} */
Highcharts.AxisOptions.prototype.plotBands;
 /** @type {!Array<!Highcharts.PlotLines>} */
Highcharts.AxisOptions.prototype.plotLines;
 /** @type {boolean} */
Highcharts.AxisOptions.prototype.reversed;
 /** @type {boolean} */
Highcharts.AxisOptions.prototype.reversedStacks;
 /** @type {boolean} */
Highcharts.AxisOptions.prototype.showEmpty;
 /** @type {boolean} */
Highcharts.AxisOptions.prototype.showFirstLabel;
 /** @type {boolean} */
Highcharts.AxisOptions.prototype.showLastLabel;
 /** @type {number} */
Highcharts.AxisOptions.prototype.softMax;
 /** @type {number} */
Highcharts.AxisOptions.prototype.softMin;
 /** @type {{align: string, enabled: boolean, format: string, formatter: !Function, rotation: number, style: !Highcharts.CSSObject, textAlign: string, useHTML: boolean, verticalAlign: string, x: number, y: number}} */
Highcharts.AxisOptions.prototype.stackLabels;
 /** @type {number} */
Highcharts.AxisOptions.prototype.startOfWeek;
 /** @type {boolean} */
Highcharts.AxisOptions.prototype.startOnTick;
 /** @type {!Array<!Array<?>>} */
Highcharts.AxisOptions.prototype.stops;
 /** @type {number} */
Highcharts.AxisOptions.prototype.tickAmount;
 /** @type {string} */
Highcharts.AxisOptions.prototype.tickColor;
 /** @type {number} */
Highcharts.AxisOptions.prototype.tickInterval;
 /** @type {number} */
Highcharts.AxisOptions.prototype.tickLength;
 /** @type {number} */
Highcharts.AxisOptions.prototype.tickPixelInterval;
 /** @type {string} */
Highcharts.AxisOptions.prototype.tickPosition;
 /** @type {!Array<number>} */
Highcharts.AxisOptions.prototype.tickPositions;
 /** @type {number} */
Highcharts.AxisOptions.prototype.tickWidth;
 /** @type {string} */
Highcharts.AxisOptions.prototype.tickmarkPlacement;
 /** @type {!Highcharts.AxisTitle} */
Highcharts.AxisOptions.prototype.title;
 /** @type {string} */
Highcharts.AxisOptions.prototype.type;
 /** @type {!Array<?>} */
Highcharts.AxisOptions.prototype.units;
 /** @type {boolean} */
Highcharts.AxisOptions.prototype.visible;

/**
 * A callback function returning array defining where the ticks are laid out on the axis. This overrides the default
 * behaviour of tickPixelInterval and tickInterval. The automatic tick positions are accessible through
 * this.tickPositions and can be modified by the callback.
 * @param {number} min
 * @param {number} max
 * @return {void}
 */
Highcharts.AxisOptions.prototype.tickPositioner = function(min, max) {};
/**
 * @record
 * @struct
 */
Highcharts.ColorAxisDataClass = function() {};
 /** @type {number} */
Highcharts.ColorAxisDataClass.prototype.from;
 /** @type {number} */
Highcharts.ColorAxisDataClass.prototype.to;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.ColorAxisDataClass.prototype.color;
 /** @type {string} */
Highcharts.ColorAxisDataClass.prototype.name;
/**
 * @record
 * @struct
 */
Highcharts.ColorAxisOptions = function() {};
 /** @type {string} */
Highcharts.ColorAxisOptions.prototype.dataClassColor;
 /** @type {!Array<!Highcharts.ColorAxisDataClass>} */
Highcharts.ColorAxisOptions.prototype.dataClasses;
 /** @type {boolean} */
Highcharts.ColorAxisOptions.prototype.endOnTick;
 /** @type {{afterSetExtremes: function(!Highcharts.AxisEvent): void, setExtremes: function(!Highcharts.AxisEvent): void}} */
Highcharts.ColorAxisOptions.prototype.events;
 /** @type {string} */
Highcharts.ColorAxisOptions.prototype.gridLineColor;
 /** @type {string} */
Highcharts.ColorAxisOptions.prototype.gridLineDashStyle;
 /** @type {number} */
Highcharts.ColorAxisOptions.prototype.gridLineWidth;
 /** @type {string} */
Highcharts.ColorAxisOptions.prototype.id;
 /** @type {!Highcharts.AxisLabels} */
Highcharts.ColorAxisOptions.prototype.labels;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.ColorAxisOptions.prototype.lineColor;
 /** @type {number} */
Highcharts.ColorAxisOptions.prototype.lineWidth;
 /** @type {{animation: (boolean|!Highcharts.Animation), color: (string|!Highcharts.Gradient)}} */
Highcharts.ColorAxisOptions.prototype.marker;
 /** @type {number} */
Highcharts.ColorAxisOptions.prototype.max;
 /** @type {string} */
Highcharts.ColorAxisOptions.prototype.maxColor;
 /** @type {number} */
Highcharts.ColorAxisOptions.prototype.maxPadding;
 /** @type {number} */
Highcharts.ColorAxisOptions.prototype.min;
 /** @type {string} */
Highcharts.ColorAxisOptions.prototype.minColor;
 /** @type {number} */
Highcharts.ColorAxisOptions.prototype.minPadding;
 /** @type {string} */
Highcharts.ColorAxisOptions.prototype.minorGridLineColor;
 /** @type {string} */
Highcharts.ColorAxisOptions.prototype.minorGridLineDashStyle;
 /** @type {number} */
Highcharts.ColorAxisOptions.prototype.minorGridLineWidth;
 /** @type {string} */
Highcharts.ColorAxisOptions.prototype.minorTickColor;
 /** @type {(string|number)} */
Highcharts.ColorAxisOptions.prototype.minorTickInterval;
 /** @type {number} */
Highcharts.ColorAxisOptions.prototype.minorTickLength;
 /** @type {string} */
Highcharts.ColorAxisOptions.prototype.minorTickPosition;
 /** @type {number} */
Highcharts.ColorAxisOptions.prototype.minorTickWidth;
 /** @type {boolean} */
Highcharts.ColorAxisOptions.prototype.reversed;
 /** @type {boolean} */
Highcharts.ColorAxisOptions.prototype.showFirstLabel;
 /** @type {boolean} */
Highcharts.ColorAxisOptions.prototype.showLastLabel;
 /** @type {boolean} */
Highcharts.ColorAxisOptions.prototype.startOnTick;
 /** @type {!Array<!Array<?>>} */
Highcharts.ColorAxisOptions.prototype.stops;
 /** @type {string} */
Highcharts.ColorAxisOptions.prototype.tickColor;
 /** @type {number} */
Highcharts.ColorAxisOptions.prototype.tickInterval;
 /** @type {number} */
Highcharts.ColorAxisOptions.prototype.tickLength;
 /** @type {number} */
Highcharts.ColorAxisOptions.prototype.tickPixelInterval;
 /** @type {string} */
Highcharts.ColorAxisOptions.prototype.tickPosition;
 /** @type {!Array<number>} */
Highcharts.ColorAxisOptions.prototype.tickPositions;
 /** @type {number} */
Highcharts.ColorAxisOptions.prototype.tickWidth;
 /** @type {string} */
Highcharts.ColorAxisOptions.prototype.type;

/**
 * A callback function returning array defining where the ticks are laid out on the axis. This overrides the default
 * behaviour of tickPixelInterval and tickInterval.
 * @param {number} min
 * @param {number} max
 * @return {void}
 */
Highcharts.ColorAxisOptions.prototype.tickPositioner = function(min, max) {};
/**
 * @record
 * @struct
 */
Highcharts.Extremes = function() {};
 /** @type {number} */
Highcharts.Extremes.prototype.dataMax;
 /** @type {number} */
Highcharts.Extremes.prototype.dataMin;
 /** @type {number} */
Highcharts.Extremes.prototype.max;
 /** @type {number} */
Highcharts.Extremes.prototype.min;
/**
 * @record
 * @struct
 */
Highcharts.Animation = function() {};
 /** @type {number} */
Highcharts.Animation.prototype.duration;
 /** @type {string} */
Highcharts.Animation.prototype.easing;
/**
 * @record
 * @struct
 */
Highcharts.AddSeriesEvent = function() {};
 /** @type {!Highcharts.ChartOptions} */
Highcharts.AddSeriesEvent.prototype.options;
/**
 * @extends {Highcharts.AxisOptions}
 * @record
 * @struct
 */
Highcharts.AxisValueOptions = function() {};
 /** @type {number} */
Highcharts.AxisValueOptions.prototype.value;
/**
 * @record
 * @struct
 */
Highcharts.ChartClickEvent = function() {};
 /** @type {!Array<!Highcharts.AxisValueOptions>} */
Highcharts.ChartClickEvent.prototype.xAxis;
 /** @type {!Array<!Highcharts.AxisValueOptions>} */
Highcharts.ChartClickEvent.prototype.yAxis;
/**
 * @record
 * @struct
 */
Highcharts.ChartDrilldownEvent = function() {};
 /** @type {number} */
Highcharts.ChartDrilldownEvent.prototype.category;
 /** @type {!Highcharts.PointObject} */
Highcharts.ChartDrilldownEvent.prototype.point;
 /** @type {!Array<!Highcharts.PointObject>} */
Highcharts.ChartDrilldownEvent.prototype.points;
 /** @type {!Highcharts.IndividualSeriesOptions} */
Highcharts.ChartDrilldownEvent.prototype.seriesOptions;
/**
 * @record
 * @struct
 */
Highcharts.ChartSelectionEvent = function() {};
 /** @type {!Array<!Highcharts.AxisOptions>} */
Highcharts.ChartSelectionEvent.prototype.xAxis;
 /** @type {!Array<!Highcharts.AxisOptions>} */
Highcharts.ChartSelectionEvent.prototype.yAxis;
/**
 * @record
 * @struct
 */
Highcharts.ChartEvents = function() {};

/**
 * Fires when a series is added to the chart after load time, using the addSeries method. One parameter, event, is
 * passed to the function. This contains common event information based on jQuery or MooTools depending on which
 * library is used as the base for Highcharts. Through event.options you can access the series options that was
 * passed to the addSeries method. Returning false prevents the series from being added.
 * 
 * The this keyword refers to the Chart object.
 * \@since 1.2.0
 * @param {!Highcharts.AddSeriesEvent} event
 * @return {(boolean|void)}
 */
Highcharts.ChartEvents.prototype.addSeries = function(event) {};

/**
 * Fires after a chart is printed through the context menu item or the Chart.print method. Requires the exporting
 * module.
 * \@since 4.1.0
 * @param {!Event} event
 * @return {void}
 */
Highcharts.ChartEvents.prototype.afterPrint = function(event) {};

/**
 * Fires before a chart is printed through the context menu item or the Chart.print method. Requires the exporting
 * module.
 * \@since 4.1.0
 * @param {!Event} event
 * @return {void}
 */
Highcharts.ChartEvents.prototype.beforePrint = function(event) {};

/**
 * Fires when clicking on the plot background. One parameter, event, is passed to the function. This contains common
 * event information based on jQuery or MooTools depending on which library is used as the base for Highcharts.
 * 
 * Information on the clicked spot can be found through event.xAxis and event.yAxis, which are arrays containing the
 * axes of each dimension and each axis' value at the clicked spot. The primary axes are event.xAxis[0] and
 * event.yAxis[0]. Remember the unit of a datetime axis is milliseconds since 1970-01-01 00:00:00.
 * 
 * click: function(e) {
 *      console.log(Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', e.xAxis[0].value), e.yAxis[0].value);
 * }
 * 
 * The this keyword refers to the Chart object.
 * \@since 1.2.0
 * @param {!Highcharts.ChartClickEvent} event
 * @return {void}
 */
Highcharts.ChartEvents.prototype.click = function(event) {};

/**
 * Fires when a drilldown point is clicked, before the new series is added.
 * \@since 3.0.8
 * @param {!Highcharts.ChartDrilldownEvent} event
 * @return {void}
 */
Highcharts.ChartEvents.prototype.drilldown = function(event) {};

/**
 * Fires when drilling up from a drilldown series.
 * \@since 3.0.8
 * @param {!Event} event
 * @return {void}
 */
Highcharts.ChartEvents.prototype.drillup = function(event) {};

/**
 * Fires after drilling up from all drilldown series.
 * \@since 4.2.4
 * @param {!Event} event
 * @return {void}
 */
Highcharts.ChartEvents.prototype.drillupall = function(event) {};

/**
 * Fires when the chart is finished loading. One parameter, event, is passed to the function. This contains common
 * event information based on jQuery or MooTools depending on which library is used as the base for Highcharts.
 * 
 * From version 2.0.4, there is also a second parameter to Highcharts.Chart where a callback function can be passed
 * to be executed on chart.load.
 * 
 * The this keyword refers to the Chart object.
 * @param {!Event} event
 * @return {void}
 */
Highcharts.ChartEvents.prototype.load = function(event) {};

/**
 * Fires when the chart is redrawn, either after a call to chart.redraw() or after an axis, series or point is
 * modified with the redraw option set to true. One parameter, event, is passed to the function. This contains
 * common event information based on jQuery or MooTools depending on which library is used as the base for
 * Highcharts.
 * 
 * The this keyword refers to the Chart object.
 * \@since 1.2.0
 * @param {!Event} event
 * @return {void}
 */
Highcharts.ChartEvents.prototype.redraw = function(event) {};

/**
 * Fires when an area of the chart has been selected. Selection is enabled by setting the chart's zoomType. One
 * parameter, event, is passed to the function. This contains common event information based on jQuery or MooTools
 * depending on which library is used as the base for Highcharts. The default action for the selection event is to
 * zoom the chart to the selected area. It can be prevented by calling event.preventDefault().
 * 
 * Information on the selected area can be found through event.xAxis and event.yAxis, which are arrays containing
 * the axes of each dimension and each axis' min and max values. The primary axes are event.xAxis[0] and
 * event.yAxis[0]. Remember the unit of a datetime axis is milliseconds since 1970-01-01 00:00:00.
 * 
 * selection: function(event) {
 *      // log the min and max of the primary, datetime x-axis
 *      console.log(
 *          Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', event.xAxis[0].min),
 *          Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', event.xAxis[0].max)
 *      );
 *      // log the min and max of the y axis
 *      console.log(event.yAxis[0].min, event.yAxis[0].max);
 * }
 * @param {!Highcharts.ChartSelectionEvent} event
 * @return {void}
 */
Highcharts.ChartEvents.prototype.selection = function(event) {};
/**
 * @record
 * @struct
 */
Highcharts.LinearGradient = function() {};
 /** @type {number} */
Highcharts.LinearGradient.prototype.x1;
 /** @type {number} */
Highcharts.LinearGradient.prototype.y1;
 /** @type {number} */
Highcharts.LinearGradient.prototype.x2;
 /** @type {number} */
Highcharts.LinearGradient.prototype.y2;
/**
 * @record
 * @struct
 */
Highcharts.Gradient = function() {};
 /** @type {(!Array<number>|!Highcharts.LinearGradient)} */
Highcharts.Gradient.prototype.linearGradient;
 /** @type {{cx: number, cy: number, r: number}} */
Highcharts.Gradient.prototype.radialGradient;
 /** @type {!Array<!Array<?>>} */
Highcharts.Gradient.prototype.stops;
 /** @type {string} */
Highcharts.Gradient.prototype.raw;
 /** @type {!Array<number>} */
Highcharts.Gradient.prototype.rgba;

/**
 * Brighten the color
 * @param {number} alpha
 * @return {!Highcharts.Gradient}
 */
Highcharts.Gradient.prototype.brighten = function(alpha) {};

/**
 * Return the color a specified format
 * @param {string} format
 * @return {string}
 */
Highcharts.Gradient.prototype.get = function(format) {};

/**
 * Set the color's opacity to a given alpha value
 * @param {number} alpha
 * @return {!Highcharts.Gradient}
 */
Highcharts.Gradient.prototype.setOpacity = function(alpha) {};

/** @typedef {(string|!Highcharts.Gradient)} */
Highcharts.Color;
/**
 * @record
 * @struct
 */
Highcharts.ChartOptions3dFrame = function() {};
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.ChartOptions3dFrame.prototype.color;
 /** @type {number} */
Highcharts.ChartOptions3dFrame.prototype.size;
/**
 * @record
 * @struct
 */
Highcharts.ChartOptions3d = function() {};
 /** @type {number} */
Highcharts.ChartOptions3d.prototype.alpha;
 /** @type {number} */
Highcharts.ChartOptions3d.prototype.beta;
 /** @type {number} */
Highcharts.ChartOptions3d.prototype.depth;
 /** @type {boolean} */
Highcharts.ChartOptions3d.prototype.enabled;
 /** @type {{back: !Highcharts.ChartOptions3dFrame, bottom: !Highcharts.ChartOptions3dFrame, side: !Highcharts.ChartOptions3dFrame}} */
Highcharts.ChartOptions3d.prototype.frame;
 /** @type {number} */
Highcharts.ChartOptions3d.prototype.viewDistance;
/**
 * @record
 * @struct
 */
Highcharts.Shadow = function() {};
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.Shadow.prototype.color;
 /** @type {number} */
Highcharts.Shadow.prototype.offsetX;
 /** @type {number} */
Highcharts.Shadow.prototype.offsetY;
 /** @type {number} */
Highcharts.Shadow.prototype.opacity;
 /** @type {number} */
Highcharts.Shadow.prototype.width;
/**
 * @record
 * @struct
 */
Highcharts.ChartResetZoomButton = function() {};
 /** @type {!Highcharts.Position} */
Highcharts.ChartResetZoomButton.prototype.position;
 /** @type {string} */
Highcharts.ChartResetZoomButton.prototype.relativeTo;
 /** @type {!Highcharts.ButtonStatesTheme} */
Highcharts.ChartResetZoomButton.prototype.theme;
/**
 * @record
 * @struct
 */
Highcharts.ButtonTheme = function() {};
 /** @type {string} */
Highcharts.ButtonTheme.prototype.display;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.ButtonTheme.prototype.fill;
 /** @type {string} */
Highcharts.ButtonTheme.prototype.stroke;

/* TODO: PropertySignature: Highcharts.'stroke-width' */
 /** @type {number} */
Highcharts.ButtonTheme.prototype.r;
 /** @type {!Object} */
Highcharts.ButtonTheme.prototype.style;
/**
 * @extends {Highcharts.ButtonTheme}
 * @record
 * @struct
 */
Highcharts.ButtonStatesTheme = function() {};
 /** @type {{hover: !Highcharts.ButtonTheme, select: !Highcharts.ButtonTheme}} */
Highcharts.ButtonStatesTheme.prototype.states;
/**
 * @record
 * @struct
 */
Highcharts.ChartOptions = function() {};
 /** @type {boolean} */
Highcharts.ChartOptions.prototype.alignTicks;
 /** @type {(boolean|!Highcharts.Animation)} */
Highcharts.ChartOptions.prototype.animation;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.ChartOptions.prototype.backgroundColor;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.ChartOptions.prototype.borderColor;
 /** @type {number} */
Highcharts.ChartOptions.prototype.borderRadius;
 /** @type {number} */
Highcharts.ChartOptions.prototype.borderWidth;
 /** @type {string} */
Highcharts.ChartOptions.prototype.className;
 /** @type {number} */
Highcharts.ChartOptions.prototype.colorCount;
 /** @type {string} */
Highcharts.ChartOptions.prototype.defaultSeriesType;
 /** @type {string} */
Highcharts.ChartOptions.prototype.description;
 /** @type {!Highcharts.ChartEvents} */
Highcharts.ChartOptions.prototype.events;
 /** @type {(string|number)} */
Highcharts.ChartOptions.prototype.height;
 /** @type {boolean} */
Highcharts.ChartOptions.prototype.ignoreHiddenSeries;
 /** @type {boolean} */
Highcharts.ChartOptions.prototype.inverted;
 /** @type {(number|!Array<number>)} */
Highcharts.ChartOptions.prototype.margin;
 /** @type {number} */
Highcharts.ChartOptions.prototype.marginBottom;
 /** @type {number} */
Highcharts.ChartOptions.prototype.marginLeft;
 /** @type {number} */
Highcharts.ChartOptions.prototype.marginRight;
 /** @type {number} */
Highcharts.ChartOptions.prototype.marginTop;
 /** @type {!Highcharts.ChartOptions3d} */
Highcharts.ChartOptions.prototype.options3d;
 /** @type {string} */
Highcharts.ChartOptions.prototype.panKey;
 /** @type {boolean} */
Highcharts.ChartOptions.prototype.panning;
 /** @type {string} */
Highcharts.ChartOptions.prototype.pinchType;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.ChartOptions.prototype.plotBackgroundColor;
 /** @type {string} */
Highcharts.ChartOptions.prototype.plotBackgroundImage;
 /** @type {string} */
Highcharts.ChartOptions.prototype.plotBorderColor;
 /** @type {number} */
Highcharts.ChartOptions.prototype.plotBorderWidth;
 /** @type {(boolean|!Highcharts.Shadow)} */
Highcharts.ChartOptions.prototype.plotShadow;
 /** @type {boolean} */
Highcharts.ChartOptions.prototype.polar;
 /** @type {boolean} */
Highcharts.ChartOptions.prototype.reflow;
 /** @type {(string|!HTMLElement)} */
Highcharts.ChartOptions.prototype.renderTo;
 /** @type {!Highcharts.ChartResetZoomButton} */
Highcharts.ChartOptions.prototype.resetZoomButton;
 /** @type {string} */
Highcharts.ChartOptions.prototype.selectionMarkerFill;
 /** @type {(boolean|!Highcharts.Shadow)} */
Highcharts.ChartOptions.prototype.shadow;
 /** @type {boolean} */
Highcharts.ChartOptions.prototype.showAxes;
 /** @type {!Array<number>} */
Highcharts.ChartOptions.prototype.spacing;
 /** @type {number} */
Highcharts.ChartOptions.prototype.spacingBottom;
 /** @type {number} */
Highcharts.ChartOptions.prototype.spacingLeft;
 /** @type {number} */
Highcharts.ChartOptions.prototype.spacingRight;
 /** @type {number} */
Highcharts.ChartOptions.prototype.spacingTop;
 /** @type {!Highcharts.CSSObject} */
Highcharts.ChartOptions.prototype.style;
 /** @type {string} */
Highcharts.ChartOptions.prototype.type;
 /** @type {string} */
Highcharts.ChartOptions.prototype.typeDescription;
 /** @type {number} */
Highcharts.ChartOptions.prototype.width;
 /** @type {string} */
Highcharts.ChartOptions.prototype.zoomType;
/**
 * @record
 * @struct
 */
Highcharts.CSSObject = function() {};
 /** @type {string} */
Highcharts.CSSObject.prototype.background;
 /** @type {string} */
Highcharts.CSSObject.prototype.border;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.CSSObject.prototype.color;
 /** @type {string} */
Highcharts.CSSObject.prototype.cursor;
 /** @type {string} */
Highcharts.CSSObject.prototype.font;
 /** @type {string} */
Highcharts.CSSObject.prototype.fontFamily;
 /** @type {string} */
Highcharts.CSSObject.prototype.fontSize;
 /** @type {string} */
Highcharts.CSSObject.prototype.fontWeight;
 /** @type {string} */
Highcharts.CSSObject.prototype.left;
 /** @type {number} */
Highcharts.CSSObject.prototype.opacity;
 /** @type {(string|number)} */
Highcharts.CSSObject.prototype.padding;
 /** @type {string} */
Highcharts.CSSObject.prototype.position;
 /** @type {string} */
Highcharts.CSSObject.prototype.top;
 /** @type {string} */
Highcharts.CSSObject.prototype.textOutline;
/**
 * @record
 * @struct
 */
Highcharts.CreditsOptions = function() {};
 /** @type {boolean} */
Highcharts.CreditsOptions.prototype.enabled;
 /** @type {string} */
Highcharts.CreditsOptions.prototype.href;
 /** @type {!Highcharts.Position} */
Highcharts.CreditsOptions.prototype.position;
 /** @type {!Object} */
Highcharts.CreditsOptions.prototype.style;
 /** @type {string} */
Highcharts.CreditsOptions.prototype.text;
/**
 * @extends {Highcharts.CreditsOptions}
 * @record
 * @struct
 */
Highcharts.CreditsObject = function() {};

/**
 * @param {!Highcharts.CreditsOptions} options
 * @return {void}
 */
Highcharts.CreditsObject.prototype.update = function(options) {};
/**
 * @record
 * @struct
 */
Highcharts.DataSeriesMapping = function() {};

/* TODO: IndexSignature: Highcharts */
/**
 * @record
 * @struct
 */
Highcharts.DataOptions = function() {};
 /** @type {!Array<!Array<?>>} */
Highcharts.DataOptions.prototype.columns;
 /** @type {string} */
Highcharts.DataOptions.prototype.csv;
 /** @type {string} */
Highcharts.DataOptions.prototype.dateFormat;
 /** @type {string} */
Highcharts.DataOptions.prototype.decimalPoint;
 /** @type {number} */
Highcharts.DataOptions.prototype.endColumn;
 /** @type {number} */
Highcharts.DataOptions.prototype.endRow;
 /** @type {boolean} */
Highcharts.DataOptions.prototype.firstRowAsNames;
 /** @type {string} */
Highcharts.DataOptions.prototype.googleSpreadsheetKey;
 /** @type {string} */
Highcharts.DataOptions.prototype.googleSpreadsheetWorksheet;
 /** @type {string} */
Highcharts.DataOptions.prototype.itemDelimiter;
 /** @type {string} */
Highcharts.DataOptions.prototype.lineDelimiter;
 /** @type {!Array<!Array<?>>} */
Highcharts.DataOptions.prototype.rows;
 /** @type {!Array<!Highcharts.DataSeriesMapping>} */
Highcharts.DataOptions.prototype.seriesMapping;
 /** @type {number} */
Highcharts.DataOptions.prototype.startColumn;
 /** @type {number} */
Highcharts.DataOptions.prototype.startRow;
 /** @type {boolean} */
Highcharts.DataOptions.prototype.switchRowsAndColumns;
 /** @type {(string|!HTMLElement)} */
Highcharts.DataOptions.prototype.table;

/**
 * The callback that is evaluated when the data is finished loading, optionally from an external source, and parsed.
 * The first argument passed is a finished chart options object, containing the series. These options can be
 * extended with additional options and passed directly to the chart constructor.
 * \@since 4.0
 * @param {!Highcharts.Options} options
 * @return {void}
 */
Highcharts.DataOptions.prototype.complete = function(options) {};

/**
 * A callback function to parse string representations of dates into JavaScript timestamps. Should return an integer
 * timestamp on success.
 * \@since 4.0
 * @param {?} val
 * @return {number}
 */
Highcharts.DataOptions.prototype.parseDate = function(val) {};

/**
 * A callback function to access the parsed columns, the two-dimentional input data array directly, before they are
 * interpreted into series data and categories. Return false to stop completion, or call this.complete() to continue
 * async.
 * \@since 4.0
 * @param {!Array<!Array<?>>} columns
 * @return {(boolean|void)}
 */
Highcharts.DataOptions.prototype.parsed = function(columns) {};
/**
 * @record
 * @struct
 */
Highcharts.DrilldownOptions = function() {};
 /** @type {!Object} */
Highcharts.DrilldownOptions.prototype.activeAxisLabelStyle;
 /** @type {!Object} */
Highcharts.DrilldownOptions.prototype.activeDataLabelStyle;
 /** @type {boolean} */
Highcharts.DrilldownOptions.prototype.allowPointDrilldown;
 /** @type {(boolean|!Highcharts.Animation)} */
Highcharts.DrilldownOptions.prototype.animation;
 /** @type {{position: !Highcharts.Position, relativeTo: string, theme: !Highcharts.ButtonStatesTheme}} */
Highcharts.DrilldownOptions.prototype.drillUpButton;
 /** @type {!Array<!Highcharts.IndividualSeriesOptions>} */
Highcharts.DrilldownOptions.prototype.series;
/**
 * @record
 * @struct
 */
Highcharts.MenuItem = function() {};
 /** @type {string} */
Highcharts.MenuItem.prototype.text;

/**
 * Callback function to run on click.
 * @return {void}
 */
Highcharts.MenuItem.prototype.onclick = function() {};
/**
 * @record
 * @struct
 */
Highcharts.Button = function() {};
 /** @type {string} */
Highcharts.Button.prototype.align;
 /** @type {boolean} */
Highcharts.Button.prototype.enabled;
 /** @type {number} */
Highcharts.Button.prototype.height;
 /** @type {string} */
Highcharts.Button.prototype.symbolFill;
 /** @type {number} */
Highcharts.Button.prototype.symbolSize;
 /** @type {string} */
Highcharts.Button.prototype.symbolStroke;
 /** @type {number} */
Highcharts.Button.prototype.symbolStrokeWidth;
 /** @type {number} */
Highcharts.Button.prototype.symbolX;
 /** @type {number} */
Highcharts.Button.prototype.symbolY;
 /** @type {string} */
Highcharts.Button.prototype.text;
 /** @type {!Highcharts.ButtonStatesTheme} */
Highcharts.Button.prototype.theme;
 /** @type {string} */
Highcharts.Button.prototype.verticalAlign;
 /** @type {number} */
Highcharts.Button.prototype.width;
 /** @type {number} */
Highcharts.Button.prototype.y;
/**
 * @extends {Highcharts.Button}
 * @record
 * @struct
 */
Highcharts.ExportingContextButton = function() {};
 /** @type {!Array<!Highcharts.MenuItem>} */
Highcharts.ExportingContextButton.prototype.menuItems;
 /** @type {string} */
Highcharts.ExportingContextButton.prototype.symbol;
 /** @type {number} */
Highcharts.ExportingContextButton.prototype.x;

/**
 * A click handler callback to use on the button directly instead of the popup menu.
 * \@since 2.0
 * @return {void}
 */
Highcharts.ExportingContextButton.prototype.onclick = function() {};
/**
 * @record
 * @struct
 */
Highcharts.ExportingOptions = function() {};
 /** @type {boolean} */
Highcharts.ExportingOptions.prototype.allowHTML;
 /** @type {{contextButton: !Highcharts.ExportingContextButton}} */
Highcharts.ExportingOptions.prototype.buttons;
 /** @type {!Highcharts.Options} */
Highcharts.ExportingOptions.prototype.chartOptions;
 /** @type {boolean} */
Highcharts.ExportingOptions.prototype.enabled;
 /** @type {!Function} */
Highcharts.ExportingOptions.prototype.error;
 /** @type {boolean} */
Highcharts.ExportingOptions.prototype.fallbackToExportServer;
 /** @type {string} */
Highcharts.ExportingOptions.prototype.filename;
 /** @type {?} */
Highcharts.ExportingOptions.prototype.formAttributes;
 /** @type {string} */
Highcharts.ExportingOptions.prototype.libUrl;
 /** @type {number} */
Highcharts.ExportingOptions.prototype.printMaxWidth;
 /** @type {number} */
Highcharts.ExportingOptions.prototype.scale;
 /** @type {number} */
Highcharts.ExportingOptions.prototype.sourceHeight;
 /** @type {number} */
Highcharts.ExportingOptions.prototype.sourceWidth;
 /** @type {string} */
Highcharts.ExportingOptions.prototype.type;
 /** @type {string} */
Highcharts.ExportingOptions.prototype.url;
 /** @type {number} */
Highcharts.ExportingOptions.prototype.width;
/**
 * @record
 * @struct
 */
Highcharts.GlobalObject = function() {};
 /** @type {?} */
Highcharts.GlobalObject.prototype.Date;
 /** @type {string} */
Highcharts.GlobalObject.prototype.VMLRadialGradientURL;
 /** @type {string} */
Highcharts.GlobalObject.prototype.canvasToolsURL;
 /** @type {string} */
Highcharts.GlobalObject.prototype.timezone;
 /** @type {number} */
Highcharts.GlobalObject.prototype.timezoneOffset;
 /** @type {boolean} */
Highcharts.GlobalObject.prototype.useUTC;

/**
 * A callback to return the time zone offset for a given datetime. It takes the timestamp in terms of milliseconds
 * since January 1 1970, and returns the timezone offset in minutes. This provides a hook for drawing time based
 * charts in specific time zones using their local DST crossover dates, with the help of external libraries.
 * \@since 4.1.0
 * @param {number} timestamp
 * @return {number}
 */
Highcharts.GlobalObject.prototype.getTimezoneOffset = function(timestamp) {};
/**
 * @record
 * @struct
 */
Highcharts.LabelItem = function() {};
 /** @type {string} */
Highcharts.LabelItem.prototype.html;
 /** @type {!Highcharts.CSSObject} */
Highcharts.LabelItem.prototype.style;
/**
 * @record
 * @struct
 */
Highcharts.LabelsOptions = function() {};
 /** @type {!Array<!Highcharts.LabelItem>} */
Highcharts.LabelsOptions.prototype.items;
 /** @type {!Highcharts.CSSObject} */
Highcharts.LabelsOptions.prototype.style;
/**
 * @record
 * @struct
 */
Highcharts.LangObject = function() {};
 /** @type {string} */
Highcharts.LangObject.prototype.contextButtonTitle;
 /** @type {string} */
Highcharts.LangObject.prototype.decimalPoint;
 /** @type {string} */
Highcharts.LangObject.prototype.downloadJPEG;
 /** @type {string} */
Highcharts.LangObject.prototype.downloadPDF;
 /** @type {string} */
Highcharts.LangObject.prototype.downloadPNG;
 /** @type {string} */
Highcharts.LangObject.prototype.downloadSVG;
 /** @type {string} */
Highcharts.LangObject.prototype.drillUpText;
 /** @type {string} */
Highcharts.LangObject.prototype.invalidDate;
 /** @type {string} */
Highcharts.LangObject.prototype.loading;
 /** @type {!Array<string>} */
Highcharts.LangObject.prototype.months;
 /** @type {string} */
Highcharts.LangObject.prototype.noData;
 /** @type {number} */
Highcharts.LangObject.prototype.numericSymbolMagnitude;
 /** @type {!Array<string>} */
Highcharts.LangObject.prototype.numericSymbols;
 /** @type {string} */
Highcharts.LangObject.prototype.printChart;
 /** @type {string} */
Highcharts.LangObject.prototype.resetZoom;
 /** @type {string} */
Highcharts.LangObject.prototype.resetZoomTitle;
 /** @type {!Array<string>} */
Highcharts.LangObject.prototype.shortMonths;
 /** @type {string} */
Highcharts.LangObject.prototype.thousandsSep;
 /** @type {!Array<string>} */
Highcharts.LangObject.prototype.weekdays;
/**
 * @record
 * @struct
 */
Highcharts.LegendNavigationOptions = function() {};
 /** @type {string} */
Highcharts.LegendNavigationOptions.prototype.activeColor;
 /** @type {(boolean|!Highcharts.Animation)} */
Highcharts.LegendNavigationOptions.prototype.animation;
 /** @type {number} */
Highcharts.LegendNavigationOptions.prototype.arrowSize;
 /** @type {string} */
Highcharts.LegendNavigationOptions.prototype.inactiveColor;
 /** @type {!Highcharts.CSSObject} */
Highcharts.LegendNavigationOptions.prototype.style;
/**
 * @record
 * @struct
 */
Highcharts.LegendTitleOptions = function() {};
 /** @type {!Highcharts.CSSObject} */
Highcharts.LegendTitleOptions.prototype.style;
 /** @type {string} */
Highcharts.LegendTitleOptions.prototype.text;
/**
 * @record
 * @struct
 */
Highcharts.LegendOptions = function() {};
 /** @type {string} */
Highcharts.LegendOptions.prototype.align;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.LegendOptions.prototype.backgroundColor;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.LegendOptions.prototype.borderColor;
 /** @type {number} */
Highcharts.LegendOptions.prototype.borderRadius;
 /** @type {number} */
Highcharts.LegendOptions.prototype.borderWidth;
 /** @type {boolean} */
Highcharts.LegendOptions.prototype.enabled;
 /** @type {boolean} */
Highcharts.LegendOptions.prototype.floating;
 /** @type {number} */
Highcharts.LegendOptions.prototype.itemDistance;
 /** @type {!Highcharts.CSSObject} */
Highcharts.LegendOptions.prototype.itemHiddenStyle;
 /** @type {!Highcharts.CSSObject} */
Highcharts.LegendOptions.prototype.itemHoverStyle;
 /** @type {number} */
Highcharts.LegendOptions.prototype.itemMarginBottom;
 /** @type {number} */
Highcharts.LegendOptions.prototype.itemMarginTop;
 /** @type {!Highcharts.CSSObject} */
Highcharts.LegendOptions.prototype.itemStyle;
 /** @type {number} */
Highcharts.LegendOptions.prototype.itemWidth;
 /** @type {string} */
Highcharts.LegendOptions.prototype.labelFormat;
 /** @type {string} */
Highcharts.LegendOptions.prototype.layout;
 /** @type {number} */
Highcharts.LegendOptions.prototype.lineHeight;
 /** @type {number} */
Highcharts.LegendOptions.prototype.margin;
 /** @type {number} */
Highcharts.LegendOptions.prototype.maxHeight;
 /** @type {!Highcharts.LegendNavigationOptions} */
Highcharts.LegendOptions.prototype.navigation;
 /** @type {number} */
Highcharts.LegendOptions.prototype.padding;
 /** @type {boolean} */
Highcharts.LegendOptions.prototype.reversed;
 /** @type {boolean} */
Highcharts.LegendOptions.prototype.rtl;
 /** @type {(boolean|!Highcharts.Shadow)} */
Highcharts.LegendOptions.prototype.shadow;
 /** @type {!Highcharts.CSSObject} */
Highcharts.LegendOptions.prototype.style;
 /** @type {number} */
Highcharts.LegendOptions.prototype.symbolHeight;
 /** @type {number} */
Highcharts.LegendOptions.prototype.symbolPadding;
 /** @type {number} */
Highcharts.LegendOptions.prototype.symbolRadius;
 /** @type {number} */
Highcharts.LegendOptions.prototype.symbolWidth;
 /** @type {!Highcharts.LegendTitleOptions} */
Highcharts.LegendOptions.prototype.title;
 /** @type {boolean} */
Highcharts.LegendOptions.prototype.useHTML;
 /** @type {string} */
Highcharts.LegendOptions.prototype.verticalAlign;
 /** @type {number} */
Highcharts.LegendOptions.prototype.width;
 /** @type {number} */
Highcharts.LegendOptions.prototype.x;
 /** @type {number} */
Highcharts.LegendOptions.prototype.y;

/**
 * Callback function to format each of the series' labels. The this keyword refers to the series object, or the
 * point object in case of pie charts. By default the series or point name is printed.
 * @return {string}
 */
Highcharts.LegendOptions.prototype.labelFormatter = function() {};
/**
 * @record
 * @struct
 */
Highcharts.LoadingOptions = function() {};
 /** @type {number} */
Highcharts.LoadingOptions.prototype.hideDuration;
 /** @type {!Highcharts.CSSObject} */
Highcharts.LoadingOptions.prototype.labelStyle;
 /** @type {number} */
Highcharts.LoadingOptions.prototype.showDuration;
 /** @type {!Object} */
Highcharts.LoadingOptions.prototype.style;
/**
 * @record
 * @struct
 */
Highcharts.NavigationOptions = function() {};
 /** @type {!Highcharts.Button} */
Highcharts.NavigationOptions.prototype.buttonOptions;
 /** @type {!Object} */
Highcharts.NavigationOptions.prototype.menuItemHoverStyle;
 /** @type {!Object} */
Highcharts.NavigationOptions.prototype.menuItemStyle;
 /** @type {!Object} */
Highcharts.NavigationOptions.prototype.menuStyle;
/**
 * @record
 * @struct
 */
Highcharts.NoDataOptions = function() {};
 /** @type {!Object} */
Highcharts.NoDataOptions.prototype.attr;
 /** @type {!Highcharts.Position} */
Highcharts.NoDataOptions.prototype.position;
 /** @type {!Highcharts.CSSObject} */
Highcharts.NoDataOptions.prototype.style;
/**
 * @record
 * @struct
 */
Highcharts.PaneBackground = function() {};
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.PaneBackground.prototype.backgroundColor;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.PaneBackground.prototype.borderColor;
 /** @type {number} */
Highcharts.PaneBackground.prototype.borderWidth;
 /** @type {string} */
Highcharts.PaneBackground.prototype.className;
 /** @type {(string|number)} */
Highcharts.PaneBackground.prototype.innerRadius;
 /** @type {(string|number)} */
Highcharts.PaneBackground.prototype.outerRadius;
 /** @type {string} */
Highcharts.PaneBackground.prototype.shape;
/**
 * @record
 * @struct
 */
Highcharts.PaneOptions = function() {};
 /** @type {(!Highcharts.PaneBackground|!Array<!Highcharts.PaneBackground>)} */
Highcharts.PaneOptions.prototype.background;
 /** @type {!Array<?>} */
Highcharts.PaneOptions.prototype.center;
 /** @type {number} */
Highcharts.PaneOptions.prototype.endAngle;
 /** @type {(string|number)} */
Highcharts.PaneOptions.prototype.size;
 /** @type {number} */
Highcharts.PaneOptions.prototype.startAngle;
/**
 * @record
 * @struct
 */
Highcharts.ResponsiveOptions = function() {};
 /** @type {!Array<!Highcharts.RulesOptions>} */
Highcharts.ResponsiveOptions.prototype.rules;
/**
 * @record
 * @struct
 */
Highcharts.RulesOptions = function() {};
 /** @type {!Highcharts.ChartOptions} */
Highcharts.RulesOptions.prototype.chartOptions;
 /** @type {!Highcharts.ConditionOptions} */
Highcharts.RulesOptions.prototype.condition;
/**
 * @extends {Highcharts.TitleOptions}
 * @record
 * @struct
 */
Highcharts.TitleObject = function() {};

/**
 * Update method that points back to Chart.setTitle.
 * \@since 5.0.0
 * @param {!Highcharts.TitleOptions} options
 * @return {void}
 */
Highcharts.TitleObject.prototype.update = function(options) {};
/**
 * @record
 * @struct
 */
Highcharts.ConditionOptions = function() {};
 /** @type {!Function} */
Highcharts.ConditionOptions.prototype.callback;
 /** @type {number} */
Highcharts.ConditionOptions.prototype.maxHeight;
 /** @type {number} */
Highcharts.ConditionOptions.prototype.maxWidth;
 /** @type {number} */
Highcharts.ConditionOptions.prototype.minHeight;
 /** @type {number} */
Highcharts.ConditionOptions.prototype.minWidth;
/**
 * @record
 * @struct
 */
Highcharts.DataLabels = function() {};
 /** @type {string} */
Highcharts.DataLabels.prototype.align;
 /** @type {boolean} */
Highcharts.DataLabels.prototype.allowOverlap;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.DataLabels.prototype.backgroundColor;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.DataLabels.prototype.borderColor;
 /** @type {number} */
Highcharts.DataLabels.prototype.borderRadius;
 /** @type {number} */
Highcharts.DataLabels.prototype.borderWidth;
 /** @type {string} */
Highcharts.DataLabels.prototype.className;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.DataLabels.prototype.color;
 /** @type {boolean} */
Highcharts.DataLabels.prototype.crop;
 /** @type {boolean} */
Highcharts.DataLabels.prototype.defer;
 /** @type {boolean} */
Highcharts.DataLabels.prototype.enabled;
 /** @type {string} */
Highcharts.DataLabels.prototype.format;
 /** @type {boolean} */
Highcharts.DataLabels.prototype.inside;
 /** @type {string} */
Highcharts.DataLabels.prototype.overflow;
 /** @type {number} */
Highcharts.DataLabels.prototype.padding;
 /** @type {boolean} */
Highcharts.DataLabels.prototype.reserveSpace;
 /** @type {number} */
Highcharts.DataLabels.prototype.rotation;
 /** @type {(boolean|!Highcharts.Shadow)} */
Highcharts.DataLabels.prototype.shadow;
 /** @type {string} */
Highcharts.DataLabels.prototype.shape;
 /** @type {!Highcharts.CSSObject} */
Highcharts.DataLabels.prototype.style;
 /** @type {boolean} */
Highcharts.DataLabels.prototype.useHTML;
 /** @type {string} */
Highcharts.DataLabels.prototype.verticalAlign;
 /** @type {number} */
Highcharts.DataLabels.prototype.x;
 /** @type {number} */
Highcharts.DataLabels.prototype.y;
 /** @type {number} */
Highcharts.DataLabels.prototype.zIndex;

/**
 * Callback JavaScript function to format the data label. Note that if a format is defined, the format takes
 * precedence and the formatter is ignored.
 * Available data are:
 * - this.percentage Stacked series and pies only. The point's percentage of the total.
 * - this.point      The point object. The point name, if defined, is available through this.point.name.
 * - this.series     The series object. The series name is available through this.series.name.
 * - this.total      Stacked series only. The total value at this point's x value.
 * - this.x:         The x value.
 * - this.y:         The y value.
 * @return {string}
 */
Highcharts.DataLabels.prototype.formatter = function() {};
/**
 * @extends {Highcharts.DataLabels}
 * @record
 * @struct
 */
Highcharts.PieDataLabels = function() {};
 /** @type {string} */
Highcharts.PieDataLabels.prototype.connectorColor;
 /** @type {number} */
Highcharts.PieDataLabels.prototype.connectorPadding;
 /** @type {number} */
Highcharts.PieDataLabels.prototype.connectorWidth;
 /** @type {number} */
Highcharts.PieDataLabels.prototype.distance;
 /** @type {boolean} */
Highcharts.PieDataLabels.prototype.softConnector;
/**
 * @record
 * @struct
 */
Highcharts.AreaCheckboxEvent = function() {};
 /** @type {boolean} */
Highcharts.AreaCheckboxEvent.prototype.checked;
 /** @type {(!Highcharts.PointObject|!Highcharts.SeriesObject)} */
Highcharts.AreaCheckboxEvent.prototype.item;
/**
 * @record
 * @struct
 */
Highcharts.AreaClickEvent = function() {};
 /** @type {!Highcharts.PointObject} */
Highcharts.AreaClickEvent.prototype.point;
/**
 * @record
 * @struct
 */
Highcharts.PlotEvents = function() {};

/**
 * Fires after the series has finished its initial animation, or in case animation is disabled, immediately as the
 * series is displayed.
 * 
 * The this keyword refers to the Series object.
 * \@since 4.0
 * @param {!Event} event
 * @return {void}
 */
Highcharts.PlotEvents.prototype.afterAnimate = function(event) {};

/**
 * Fires when the checkbox next to the series' name in the legend is clicked. One parameter, event, is passed to the
 * function. The state of the checkbox is found by event.checked. The checked item is found by event.item. Return
 * false to prevent the default action which is to toggle the select state of the series.
 * 
 * The this keyword refers to the Series object.
 * \@since 1.2.0
 * @param {!Highcharts.AreaCheckboxEvent} event
 * @return {(boolean|void)}
 */
Highcharts.PlotEvents.prototype.checkboxClick = function(event) {};

/**
 * Fires when the series is clicked. One parameter, event, is passed to the function. This contains common event
 * information based on jQuery or MooTools depending on which library is used as the base for Highcharts.
 * Additionally, event.point holds a pointer to the nearest point on the graph.
 * 
 * The this keyword refers to the Series object.
 * @param {!Highcharts.AreaClickEvent} event
 * @return {void}
 */
Highcharts.PlotEvents.prototype.click = function(event) {};

/**
 * Fires when the series is hidden after chart generation time, either by clicking the legend item or by calling
 * .hide().
 * 
 * The this keyword refers to the Series object.
 * @return {void}
 */
Highcharts.PlotEvents.prototype.hide = function() {};

/**
 * Fires when the legend item belonging to the series is clicked. One parameter, event, is passed to the function.
 * This contains common event information based on jQuery or MooTools depending on which library is used as the base
 * for Highcharts. The default action is to toggle the visibility of the series. This can be prevented by returning
 * false or calling event.preventDefault().
 * 
 * The this keyword refers to the Series object.
 * @param {!Event} event
 * @return {(boolean|void)}
 */
Highcharts.PlotEvents.prototype.legendItemClick = function(event) {};

/**
 * Fires when the mouse leaves the graph. One parameter, event, is passed to the function. This contains common
 * event information based on jQuery or MooTools depending on which library is used as the base for Highcharts. If
 * the stickyTracking option is true, mouseOut doesn't happen before the mouse enters another graph or leaves the
 * plot area.
 * 
 * The this keyword refers to the Series object.
 * @param {!Event} event
 * @return {void}
 */
Highcharts.PlotEvents.prototype.mouseOut = function(event) {};

/**
 * Fires when the mouse enters the graph. One parameter, event, is passed to the function. This contains common
 * event information based on jQuery or MooTools depending on which library is used as the base for Highcharts.
 * 
 * The this keyword refers to the Series object.
 * @param {!Event} event
 * @return {void}
 */
Highcharts.PlotEvents.prototype.mouseOver = function(event) {};

/**
 * Fires when the series is shown after chart generation time, either by clicking the legend item or by calling
 * .show().
 * 
 * The this keyword refers to the Series object.
 * \@since 1.2.0
 * @return {void}
 */
Highcharts.PlotEvents.prototype.show = function() {};
/**
 * @record
 * @struct
 */
Highcharts.MarkerState = function() {};
 /** @type {boolean} */
Highcharts.MarkerState.prototype.enabled;
 /** @type {string} */
Highcharts.MarkerState.prototype.fillColor;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.MarkerState.prototype.lineColor;
 /** @type {number} */
Highcharts.MarkerState.prototype.lineWidth;
 /** @type {number} */
Highcharts.MarkerState.prototype.radius;
/**
 * @extends {Highcharts.MarkerState}
 * @record
 * @struct
 */
Highcharts.MarkerHoverState = function() {};
 /** @type {number} */
Highcharts.MarkerHoverState.prototype.lineWidthPlus;
 /** @type {number} */
Highcharts.MarkerHoverState.prototype.radiusPlus;
/**
 * @extends {Highcharts.MarkerState}
 * @record
 * @struct
 */
Highcharts.Marker = function() {};
 /** @type {number} */
Highcharts.Marker.prototype.height;
 /** @type {{hover: !Highcharts.MarkerHoverState, select: !Highcharts.MarkerState}} */
Highcharts.Marker.prototype.states;
 /** @type {string} */
Highcharts.Marker.prototype.symbol;
 /** @type {number} */
Highcharts.Marker.prototype.width;
/**
 * @record
 * @struct
 */
Highcharts.PointEvents = function() {};

/**
 * Fires when a point is clicked. One parameter, event, is passed to the function. This contains common event
 * information based on jQuery or MooTools depending on which library is used as the base for Highcharts.
 * 
 * If the series.allowPointSelect option is true, the default action for the point's click event is to toggle the
 * point's select state. Returning false cancels this action.
 * 
 * The this keyword refers to the Point object.
 * @param {!Event} event
 * @return {boolean}
 */
Highcharts.PointEvents.prototype.click = function(event) {};

/**
 * Fires when the mouse leaves the area close to the point. One parameter, event, is passed to the function. This
 * contains common event information based on jQuery or MooTools depending on which library is used as the base for
 * Highcharts.
 * 
 * The this keyword refers to the Point object.
 * @param {!Event} event
 * @return {void}
 */
Highcharts.PointEvents.prototype.mouseOut = function(event) {};

/**
 * Fires when the mouse enters the area close to the point. One parameter, event, is passed to the function. This
 * contains common event information based on jQuery or MooTools depending on which library is used as the base for
 * Highcharts.
 * 
 * The this keyword refers to the Point object.
 * @param {!Event} event
 * @return {void}
 */
Highcharts.PointEvents.prototype.mouseOver = function(event) {};

/**
 * Fires when the point is removed using the .remove() method. One parameter, event, is passed to the function.
 * Returning false cancels the operation.
 * 
 * The this keyword refers to the Point object.
 * \@since 1.2.0
 * @param {!Event} event
 * @return {(boolean|void)}
 */
Highcharts.PointEvents.prototype.remove = function(event) {};

/**
 * Fires when the point is selected either programmatically or following a click on the point. One parameter, event,
 * is passed to the function. Returning false cancels the operation.
 * 
 * The this keyword refers to the Point object.
 * \@since 1.2.0
 * @param {!Event} event
 * @return {(boolean|void)}
 */
Highcharts.PointEvents.prototype.select = function(event) {};

/**
 * Fires when the point is unselected either programmatically or following a click on the point. One parameter,
 * event, is passed to the function. Returning false cancels the operation.
 * 
 * The this keyword refers to the Point object.
 * \@since 1.2.0
 * @param {!Event} event
 * @return {(boolean|void)}
 */
Highcharts.PointEvents.prototype.unselect = function(event) {};

/**
 * Fires when the point is updated programmatically through the .update() method. One parameter, event, is passed to
 * the function. The new point options can be accessed through event.options. Returning false cancels the operation.
 * 
 * The this keyword refers to the Point object.
 * \@since 1.2.0
 * @param {!Event} event
 * @return {(boolean|void)}
 */
Highcharts.PointEvents.prototype.update = function(event) {};

/**
 * Fires when the legend item belonging to the pie point (slice) is clicked.
 * The this keyword refers to the point itself. One parameter, event, is passed to the function.
 * This contains common event information based on jQuery or MooTools depending on which library is used as the base for Highcharts.
 * The default action is to toggle the visibility of the point. This can be prevented by calling event.preventDefault().
 * @param {!Event} event
 * @return {(boolean|void)}
 */
Highcharts.PointEvents.prototype.legendItemClick = function(event) {};
/**
 * @record
 * @struct
 */
Highcharts.Halo = function() {};
 /** @type {!Object} */
Highcharts.Halo.prototype.attributes;
 /** @type {number} */
Highcharts.Halo.prototype.opacity;
 /** @type {number} */
Highcharts.Halo.prototype.size;
/**
 * @record
 * @struct
 */
Highcharts.LineStates = function() {};
 /** @type {(boolean|!Highcharts.Animation)} */
Highcharts.LineStates.prototype.animation;
 /** @type {boolean} */
Highcharts.LineStates.prototype.enabled;
 /** @type {(boolean|!Highcharts.Halo)} */
Highcharts.LineStates.prototype.halo;
 /** @type {number} */
Highcharts.LineStates.prototype.lineWidth;
 /** @type {number} */
Highcharts.LineStates.prototype.lineWidthPlus;
 /** @type {!Highcharts.Marker} */
Highcharts.LineStates.prototype.marker;
/**
 * @record
 * @struct
 */
Highcharts.BarStates = function() {};
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.BarStates.prototype.borderColor;
 /** @type {number} */
Highcharts.BarStates.prototype.brightness;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.BarStates.prototype.color;
 /** @type {boolean} */
Highcharts.BarStates.prototype.enabled;
 /** @type {(boolean|!Highcharts.Halo)} */
Highcharts.BarStates.prototype.halo;
/**
 * @extends {Highcharts.BarStates}
 * @extends {Highcharts.LineStates}
 * @record
 * @struct
 */
Highcharts.PieStates = function() {};
/**
 * @record
 * @struct
 */
Highcharts.AreaZone = function() {};
 /** @type {string} */
Highcharts.AreaZone.prototype.className;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.AreaZone.prototype.color;
 /** @type {string} */
Highcharts.AreaZone.prototype.dashStyle;
 /** @type {string} */
Highcharts.AreaZone.prototype.fillColor;
 /** @type {number} */
Highcharts.AreaZone.prototype.value;
/**
 * @record
 * @struct
 */
Highcharts.RangeDataLabels = function() {};
 /** @type {string} */
Highcharts.RangeDataLabels.prototype.align;
 /** @type {boolean} */
Highcharts.RangeDataLabels.prototype.allowOverlap;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.RangeDataLabels.prototype.backgroundColor;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.RangeDataLabels.prototype.borderColor;
 /** @type {number} */
Highcharts.RangeDataLabels.prototype.borderRadius;
 /** @type {number} */
Highcharts.RangeDataLabels.prototype.borderWidth;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.RangeDataLabels.prototype.color;
 /** @type {boolean} */
Highcharts.RangeDataLabels.prototype.crop;
 /** @type {boolean} */
Highcharts.RangeDataLabels.prototype.defer;
 /** @type {boolean} */
Highcharts.RangeDataLabels.prototype.enabled;
 /** @type {string} */
Highcharts.RangeDataLabels.prototype.format;
 /** @type {boolean} */
Highcharts.RangeDataLabels.prototype.inside;
 /** @type {string} */
Highcharts.RangeDataLabels.prototype.overflow;
 /** @type {number} */
Highcharts.RangeDataLabels.prototype.padding;
 /** @type {number} */
Highcharts.RangeDataLabels.prototype.rotation;
 /** @type {(boolean|!Highcharts.Shadow)} */
Highcharts.RangeDataLabels.prototype.shadow;
 /** @type {string} */
Highcharts.RangeDataLabels.prototype.shape;
 /** @type {!Highcharts.CSSObject} */
Highcharts.RangeDataLabels.prototype.style;
 /** @type {boolean} */
Highcharts.RangeDataLabels.prototype.useHTML;
 /** @type {string} */
Highcharts.RangeDataLabels.prototype.verticalAlign;
 /** @type {number} */
Highcharts.RangeDataLabels.prototype.xHigh;
 /** @type {number} */
Highcharts.RangeDataLabels.prototype.xLow;
 /** @type {number} */
Highcharts.RangeDataLabels.prototype.yHigh;
 /** @type {number} */
Highcharts.RangeDataLabels.prototype.yLow;
 /** @type {number} */
Highcharts.RangeDataLabels.prototype.zIndex;

/**
 * Callback JavaScript function to format the data label. Note that if a format is defined, the format takes
 * precedence and the formatter is ignored.
 * Available data are:
 * - this.percentage Stacked series and pies only. The point's percentage of the total.
 * - this.point      The point object. The point name, if defined, is available through this.point.name.
 * - this.series     The series object. The series name is available through this.series.name.
 * - this.total      Stacked series only. The total value at this point's x value.
 * - this.x:         The x value.
 * - this.y:         The y value.
 * @return {string}
 */
Highcharts.RangeDataLabels.prototype.formatter = function() {};
/**
 * @record
 * @struct
 */
Highcharts.Dial = function() {};
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.Dial.prototype.backgroundColor;
 /** @type {string} */
Highcharts.Dial.prototype.baseLength;
 /** @type {number} */
Highcharts.Dial.prototype.baseWidth;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.Dial.prototype.borderColor;
 /** @type {number} */
Highcharts.Dial.prototype.borderWidth;
 /** @type {string} */
Highcharts.Dial.prototype.radius;
 /** @type {string} */
Highcharts.Dial.prototype.rearLength;
 /** @type {number} */
Highcharts.Dial.prototype.topWidth;
/**
 * @record
 * @struct
 */
Highcharts.Pivot = function() {};
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.Pivot.prototype.backgroundColor;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.Pivot.prototype.borderColor;
 /** @type {number} */
Highcharts.Pivot.prototype.borderWidth;
 /** @type {number} */
Highcharts.Pivot.prototype.radius;
/**
 * @record
 * @struct
 */
Highcharts.TreeMapLevel = function() {};
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.TreeMapLevel.prototype.borderColor;
 /** @type {string} */
Highcharts.TreeMapLevel.prototype.borderDashStyle;
 /** @type {number} */
Highcharts.TreeMapLevel.prototype.borderWidth;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.TreeMapLevel.prototype.color;
 /** @type {!Highcharts.DataLabels} */
Highcharts.TreeMapLevel.prototype.dataLabels;
 /** @type {string} */
Highcharts.TreeMapLevel.prototype.layoutAlgorithm;
 /** @type {string} */
Highcharts.TreeMapLevel.prototype.layoutStartingDirection;
 /** @type {number} */
Highcharts.TreeMapLevel.prototype.level;
/**
 * @record
 * @struct
 */
Highcharts.SeriesChart = function() {};
 /** @type {boolean} */
Highcharts.SeriesChart.prototype.allowPointSelect;
 /** @type {(boolean|!Highcharts.Animation)} */
Highcharts.SeriesChart.prototype.animation;
 /** @type {string} */
Highcharts.SeriesChart.prototype.className;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.SeriesChart.prototype.color;
 /** @type {boolean} */
Highcharts.SeriesChart.prototype.connectEnds;
 /** @type {boolean} */
Highcharts.SeriesChart.prototype.connectNulls;
 /** @type {number} */
Highcharts.SeriesChart.prototype.cropThreshold;
 /** @type {string} */
Highcharts.SeriesChart.prototype.cursor;
 /** @type {string} */
Highcharts.SeriesChart.prototype.dashStyle;
 /** @type {!Highcharts.DataLabels} */
Highcharts.SeriesChart.prototype.dataLabels;
 /** @type {boolean} */
Highcharts.SeriesChart.prototype.enableMouseTracking;
 /** @type {!Highcharts.PlotEvents} */
Highcharts.SeriesChart.prototype.events;
 /** @type {string} */
Highcharts.SeriesChart.prototype.findNearestPointBy;
 /** @type {boolean} */
Highcharts.SeriesChart.prototype.getExtremesFromAll;
 /** @type {!Array<string>} */
Highcharts.SeriesChart.prototype.keys;
 /** @type {number} */
Highcharts.SeriesChart.prototype.lineWidth;
 /** @type {string} */
Highcharts.SeriesChart.prototype.linecap;
 /** @type {string} */
Highcharts.SeriesChart.prototype.linkedTo;
 /** @type {!Highcharts.Marker} */
Highcharts.SeriesChart.prototype.marker;
 /** @type {string} */
Highcharts.SeriesChart.prototype.negativeColor;
 /** @type {{events: !Highcharts.PointEvents}} */
Highcharts.SeriesChart.prototype.point;
 /** @type {number} */
Highcharts.SeriesChart.prototype.pointInterval;
 /** @type {string} */
Highcharts.SeriesChart.prototype.pointIntervalUnit;
 /** @type {(string|number)} */
Highcharts.SeriesChart.prototype.pointPlacement;
 /** @type {number} */
Highcharts.SeriesChart.prototype.pointStart;
 /** @type {boolean} */
Highcharts.SeriesChart.prototype.selected;
 /** @type {(boolean|!Highcharts.Shadow)} */
Highcharts.SeriesChart.prototype.shadow;
 /** @type {boolean} */
Highcharts.SeriesChart.prototype.showCheckbox;
 /** @type {boolean} */
Highcharts.SeriesChart.prototype.showInLegend;
 /** @type {boolean} */
Highcharts.SeriesChart.prototype.softTreshold;
 /** @type {string} */
Highcharts.SeriesChart.prototype.stacking;
 /** @type {{hover: !Highcharts.LineStates}} */
Highcharts.SeriesChart.prototype.states;
 /** @type {boolean} */
Highcharts.SeriesChart.prototype.stickyTracking;
 /** @type {number} */
Highcharts.SeriesChart.prototype.threshold;
 /** @type {!Highcharts.SeriesTooltipOptions} */
Highcharts.SeriesChart.prototype.tooltip;
 /** @type {number} */
Highcharts.SeriesChart.prototype.turboThreshold;
 /** @type {boolean} */
Highcharts.SeriesChart.prototype.visible;
 /** @type {string} */
Highcharts.SeriesChart.prototype.zoneAxis;
 /** @type {!Array<!Highcharts.AreaZone>} */
Highcharts.SeriesChart.prototype.zones;
/**
 * @extends {Highcharts.SeriesChart}
 * @record
 * @struct
 */
Highcharts.AreaChart = function() {};
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.AreaChart.prototype.fillColor;
 /** @type {number} */
Highcharts.AreaChart.prototype.fillOpacity;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.AreaChart.prototype.lineColor;
 /** @type {string} */
Highcharts.AreaChart.prototype.negativeFillColor;
 /** @type {string} */
Highcharts.AreaChart.prototype.step;
 /** @type {boolean} */
Highcharts.AreaChart.prototype.trackByArea;
/**
 * @extends {Highcharts.AreaChart}
 * @record
 * @struct
 */
Highcharts.AreaRangeChart = function() {};
 /** @type {!Highcharts.RangeDataLabels} */
Highcharts.AreaRangeChart.prototype.dataLabels;
/**
 * @extends {Highcharts.AreaChart}
 * @record
 * @struct
 */
Highcharts.AreaSplineChart = function() {};
/**
 * @extends {Highcharts.AreaRangeChart}
 * @record
 * @struct
 */
Highcharts.AreaSplineRangeChart = function() {};
/**
 * @extends {Highcharts.SeriesChart}
 * @record
 * @struct
 */
Highcharts.BarChart = function() {};
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.BarChart.prototype.borderColor;
 /** @type {number} */
Highcharts.BarChart.prototype.borderRadius;
 /** @type {number} */
Highcharts.BarChart.prototype.borderWidth;
 /** @type {boolean} */
Highcharts.BarChart.prototype.colorByPoint;
 /** @type {!Array<(string|!Highcharts.Gradient)>} */
Highcharts.BarChart.prototype.colors;
 /** @type {number} */
Highcharts.BarChart.prototype.depth;
 /** @type {string} */
Highcharts.BarChart.prototype.edgeColor;
 /** @type {number} */
Highcharts.BarChart.prototype.edgeWidth;
 /** @type {number} */
Highcharts.BarChart.prototype.groupPadding;
 /** @type {number} */
Highcharts.BarChart.prototype.groupZPadding;
 /** @type {boolean} */
Highcharts.BarChart.prototype.grouping;
 /** @type {number} */
Highcharts.BarChart.prototype.maxPointWidth;
 /** @type {number} */
Highcharts.BarChart.prototype.minPointLength;
 /** @type {(string|number)} */
Highcharts.BarChart.prototype.pointPadding;
 /** @type {number} */
Highcharts.BarChart.prototype.pointRange;
 /** @type {number} */
Highcharts.BarChart.prototype.pointWidth;
 /** @type {{hover: !Highcharts.BarStates}} */
Highcharts.BarChart.prototype.states;
/**
 * @extends {Highcharts.ErrorBarChart}
 * @record
 * @struct
 */
Highcharts.BoxPlotChart = function() {};
 /** @type {string} */
Highcharts.BoxPlotChart.prototype.fillColor;
 /** @type {number} */
Highcharts.BoxPlotChart.prototype.groupPadding;
 /** @type {boolean} */
Highcharts.BoxPlotChart.prototype.grouping;
 /** @type {string} */
Highcharts.BoxPlotChart.prototype.linkedTo;
 /** @type {string} */
Highcharts.BoxPlotChart.prototype.medianColor;
 /** @type {number} */
Highcharts.BoxPlotChart.prototype.medianWidth;
/**
 * @extends {Highcharts.SeriesChart}
 * @record
 * @struct
 */
Highcharts.BubbleChart = function() {};
 /** @type {boolean} */
Highcharts.BubbleChart.prototype.displayNegative;
 /** @type {(string|number)} */
Highcharts.BubbleChart.prototype.maxSize;
 /** @type {(string|number)} */
Highcharts.BubbleChart.prototype.minSize;
 /** @type {string} */
Highcharts.BubbleChart.prototype.negativeColor;
 /** @type {string} */
Highcharts.BubbleChart.prototype.sizeBy;
 /** @type {boolean} */
Highcharts.BubbleChart.prototype.sizeByAbsoluteValues;
 /** @type {number} */
Highcharts.BubbleChart.prototype.zMax;
 /** @type {number} */
Highcharts.BubbleChart.prototype.zMin;
 /** @type {number} */
Highcharts.BubbleChart.prototype.zThreshold;
/**
 * @extends {Highcharts.BarChart}
 * @record
 * @struct
 */
Highcharts.ColumnChart = function() {};
/**
 * @extends {Highcharts.ColumnChart}
 * @record
 * @struct
 */
Highcharts.ColumnRangeChart = function() {};
 /** @type {!Highcharts.RangeDataLabels} */
Highcharts.ColumnRangeChart.prototype.dataLabels;
/**
 * @extends {Highcharts.SeriesChart}
 * @record
 * @struct
 */
Highcharts.ErrorBarChart = function() {};
 /** @type {boolean} */
Highcharts.ErrorBarChart.prototype.colorByPoint;
 /** @type {!Array<(string|!Highcharts.Gradient)>} */
Highcharts.ErrorBarChart.prototype.colors;
 /** @type {number} */
Highcharts.ErrorBarChart.prototype.depth;
 /** @type {string} */
Highcharts.ErrorBarChart.prototype.edgeColor;
 /** @type {number} */
Highcharts.ErrorBarChart.prototype.edgeWidth;
 /** @type {number} */
Highcharts.ErrorBarChart.prototype.groupZPadding;
 /** @type {string} */
Highcharts.ErrorBarChart.prototype.linkedTo;
 /** @type {number} */
Highcharts.ErrorBarChart.prototype.maxPointWidth;
 /** @type {number} */
Highcharts.ErrorBarChart.prototype.pointPadding;
 /** @type {number} */
Highcharts.ErrorBarChart.prototype.pointRange;
 /** @type {number} */
Highcharts.ErrorBarChart.prototype.pointWidth;
 /** @type {{hover: !Highcharts.BarStates}} */
Highcharts.ErrorBarChart.prototype.states;
 /** @type {string} */
Highcharts.ErrorBarChart.prototype.stemColor;
 /** @type {string} */
Highcharts.ErrorBarChart.prototype.stemDashStyle;
 /** @type {number} */
Highcharts.ErrorBarChart.prototype.stemWidth;
 /** @type {string} */
Highcharts.ErrorBarChart.prototype.whiskerColor;
 /** @type {(string|number)} */
Highcharts.ErrorBarChart.prototype.whiskerLength;
 /** @type {number} */
Highcharts.ErrorBarChart.prototype.whiskerWidth;
/**
 * @extends {Highcharts.SeriesChart}
 * @record
 * @struct
 */
Highcharts.FunnelChart = function() {};
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.FunnelChart.prototype.borderColor;
 /** @type {number} */
Highcharts.FunnelChart.prototype.borderWidth;
 /** @type {!Array<?>} */
Highcharts.FunnelChart.prototype.center;
 /** @type {!Array<(string|!Highcharts.Gradient)>} */
Highcharts.FunnelChart.prototype.colors;
 /** @type {!Highcharts.PieDataLabels} */
Highcharts.FunnelChart.prototype.dataLabels;
 /** @type {number} */
Highcharts.FunnelChart.prototype.depth;
 /** @type {(string|number)} */
Highcharts.FunnelChart.prototype.height;
 /** @type {number} */
Highcharts.FunnelChart.prototype.minSize;
 /** @type {(string|number)} */
Highcharts.FunnelChart.prototype.neckHeight;
 /** @type {(string|number)} */
Highcharts.FunnelChart.prototype.neckWidth;
 /** @type {boolean} */
Highcharts.FunnelChart.prototype.reversed;
 /** @type {number} */
Highcharts.FunnelChart.prototype.slicedOffset;
 /** @type {{hover: !Highcharts.PieStates}} */
Highcharts.FunnelChart.prototype.states;
 /** @type {(string|number)} */
Highcharts.FunnelChart.prototype.width;
/**
 * @extends {Highcharts.SeriesChart}
 * @record
 * @struct
 */
Highcharts.GaugeChart = function() {};
 /** @type {!Highcharts.DataLabels} */
Highcharts.GaugeChart.prototype.datalabels;
 /** @type {!Highcharts.Dial} */
Highcharts.GaugeChart.prototype.dial;
 /** @type {number} */
Highcharts.GaugeChart.prototype.overshoot;
 /** @type {!Highcharts.Pivot} */
Highcharts.GaugeChart.prototype.pivot;
 /** @type {boolean} */
Highcharts.GaugeChart.prototype.wrap;
/**
 * @extends {Highcharts.SeriesChart}
 * @record
 * @struct
 */
Highcharts.HeatMapChart = function() {};
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.HeatMapChart.prototype.borderColor;
 /** @type {number} */
Highcharts.HeatMapChart.prototype.borderRadius;
 /** @type {number} */
Highcharts.HeatMapChart.prototype.borderWidth;
 /** @type {boolean} */
Highcharts.HeatMapChart.prototype.colorByPoint;
 /** @type {!Array<(string|!Highcharts.Gradient)>} */
Highcharts.HeatMapChart.prototype.colors;
 /** @type {number} */
Highcharts.HeatMapChart.prototype.colsize;
 /** @type {number} */
Highcharts.HeatMapChart.prototype.cropTreshold;
 /** @type {number} */
Highcharts.HeatMapChart.prototype.maxPointWidth;
 /** @type {number} */
Highcharts.HeatMapChart.prototype.rowsize;
 /** @type {{hover: !Highcharts.BarStates}} */
Highcharts.HeatMapChart.prototype.states;
/**
 * @extends {Highcharts.SeriesChart}
 * @record
 * @struct
 */
Highcharts.LineChart = function() {};
 /** @type {(string|boolean)} */
Highcharts.LineChart.prototype.step;
/**
 * @extends {Highcharts.SeriesChart}
 * @record
 * @struct
 */
Highcharts.PieChart = function() {};
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.PieChart.prototype.borderColor;
 /** @type {number} */
Highcharts.PieChart.prototype.borderWidth;
 /** @type {!Array<?>} */
Highcharts.PieChart.prototype.center;
 /** @type {!Array<(string|!Highcharts.Gradient)>} */
Highcharts.PieChart.prototype.colors;
 /** @type {!Highcharts.PieDataLabels} */
Highcharts.PieChart.prototype.dataLabels;
 /** @type {number} */
Highcharts.PieChart.prototype.depth;
 /** @type {number} */
Highcharts.PieChart.prototype.endAngle;
 /** @type {boolean} */
Highcharts.PieChart.prototype.ignoreHiddenPoint;
 /** @type {(string|number)} */
Highcharts.PieChart.prototype.innerSize;
 /** @type {number} */
Highcharts.PieChart.prototype.minSize;
 /** @type {(string|number)} */
Highcharts.PieChart.prototype.size;
 /** @type {number} */
Highcharts.PieChart.prototype.slicedOffset;
 /** @type {number} */
Highcharts.PieChart.prototype.startAngle;
 /** @type {{hover: !Highcharts.PieStates}} */
Highcharts.PieChart.prototype.states;
/**
 * @extends {Highcharts.SeriesChart}
 * @record
 * @struct
 */
Highcharts.PolygonChart = function() {};
 /** @type {number} */
Highcharts.PolygonChart.prototype.lineWidth;
/**
 * @extends {Highcharts.SeriesChart}
 * @record
 * @struct
 */
Highcharts.PyramidChart = function() {};
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.PyramidChart.prototype.borderColor;
 /** @type {number} */
Highcharts.PyramidChart.prototype.borderWidth;
 /** @type {!Array<?>} */
Highcharts.PyramidChart.prototype.center;
 /** @type {!Array<(string|!Highcharts.Gradient)>} */
Highcharts.PyramidChart.prototype.colors;
 /** @type {!Highcharts.PieDataLabels} */
Highcharts.PyramidChart.prototype.dataLabels;
 /** @type {number} */
Highcharts.PyramidChart.prototype.depth;
 /** @type {(string|number)} */
Highcharts.PyramidChart.prototype.height;
 /** @type {number} */
Highcharts.PyramidChart.prototype.minSize;
 /** @type {boolean} */
Highcharts.PyramidChart.prototype.reversed;
 /** @type {number} */
Highcharts.PyramidChart.prototype.slicedOffset;
 /** @type {{hover: !Highcharts.PieStates}} */
Highcharts.PyramidChart.prototype.states;
 /** @type {(string|number)} */
Highcharts.PyramidChart.prototype.width;
/**
 * @extends {Highcharts.SeriesChart}
 * @record
 * @struct
 */
Highcharts.ScatterChart = function() {};
/**
 * @extends {Highcharts.SeriesChart}
 * @record
 * @struct
 */
Highcharts.SolidGaugeChart = function() {};
 /** @type {number} */
Highcharts.SolidGaugeChart.prototype.overshoot;
 /** @type {boolean} */
Highcharts.SolidGaugeChart.prototype.rounded;
 /** @type {number} */
Highcharts.SolidGaugeChart.prototype.threshold;
 /** @type {boolean} */
Highcharts.SolidGaugeChart.prototype.wrap;
/**
 * @extends {Highcharts.SeriesChart}
 * @record
 * @struct
 */
Highcharts.SplineChart = function() {};
/**
 * @extends {Highcharts.SeriesChart}
 * @record
 * @struct
 */
Highcharts.TreeMapChart = function() {};
 /** @type {boolean} */
Highcharts.TreeMapChart.prototype.allowDrillToNode;
 /** @type {boolean} */
Highcharts.TreeMapChart.prototype.alternateStartingDirection;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.TreeMapChart.prototype.borderColor;
 /** @type {number} */
Highcharts.TreeMapChart.prototype.borderWidth;
 /** @type {boolean} */
Highcharts.TreeMapChart.prototype.colorByPoint;
 /** @type {!Array<(string|!Highcharts.Gradient)>} */
Highcharts.TreeMapChart.prototype.colors;
 /** @type {boolean} */
Highcharts.TreeMapChart.prototype.interactByLeaf;
 /** @type {string} */
Highcharts.TreeMapChart.prototype.layoutAlgorithm;
 /** @type {string} */
Highcharts.TreeMapChart.prototype.layoutStartingDirection;
 /** @type {boolean} */
Highcharts.TreeMapChart.prototype.levelIsConstant;
 /** @type {!Array<!Highcharts.TreeMapLevel>} */
Highcharts.TreeMapChart.prototype.levels;
 /** @type {number} */
Highcharts.TreeMapChart.prototype.maxPointWidth;
 /** @type {number} */
Highcharts.TreeMapChart.prototype.sortIndex;
 /** @type {{hover: !Highcharts.BarStates}} */
Highcharts.TreeMapChart.prototype.states;
/**
 * @extends {Highcharts.BarChart}
 * @record
 * @struct
 */
Highcharts.WaterFallChart = function() {};
 /** @type {string} */
Highcharts.WaterFallChart.prototype.dashStyle;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.WaterFallChart.prototype.lineColor;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.WaterFallChart.prototype.upColor;
/**
 * @record
 * @struct
 */
Highcharts.PlotOptions = function() {};
 /** @type {!Highcharts.AreaChart} */
Highcharts.PlotOptions.prototype.area;
 /** @type {!Highcharts.AreaRangeChart} */
Highcharts.PlotOptions.prototype.arearange;
 /** @type {!Highcharts.AreaSplineChart} */
Highcharts.PlotOptions.prototype.areaspline;
 /** @type {!Highcharts.AreaSplineRangeChart} */
Highcharts.PlotOptions.prototype.areasplinerange;
 /** @type {!Highcharts.BarChart} */
Highcharts.PlotOptions.prototype.bar;
 /** @type {!Highcharts.BoxPlotChart} */
Highcharts.PlotOptions.prototype.boxplot;
 /** @type {!Highcharts.BubbleChart} */
Highcharts.PlotOptions.prototype.bubble;
 /** @type {!Highcharts.ColumnChart} */
Highcharts.PlotOptions.prototype.column;
 /** @type {!Highcharts.ColumnRangeChart} */
Highcharts.PlotOptions.prototype.columnrange;
 /** @type {!Highcharts.ErrorBarChart} */
Highcharts.PlotOptions.prototype.errorbar;
 /** @type {!Highcharts.FunnelChart} */
Highcharts.PlotOptions.prototype.funnel;
 /** @type {!Highcharts.GaugeChart} */
Highcharts.PlotOptions.prototype.gauge;
 /** @type {!Highcharts.HeatMapChart} */
Highcharts.PlotOptions.prototype.heatmap;
 /** @type {!Highcharts.LineChart} */
Highcharts.PlotOptions.prototype.line;
 /** @type {!Highcharts.PieChart} */
Highcharts.PlotOptions.prototype.pie;
 /** @type {!Highcharts.PolygonChart} */
Highcharts.PlotOptions.prototype.polygon;
 /** @type {!Highcharts.PyramidChart} */
Highcharts.PlotOptions.prototype.pyramid;
 /** @type {!Highcharts.ScatterChart} */
Highcharts.PlotOptions.prototype.scatter;
 /** @type {!Highcharts.SeriesChart} */
Highcharts.PlotOptions.prototype.series;
 /** @type {!Highcharts.SolidGaugeChart} */
Highcharts.PlotOptions.prototype.solidgauge;
 /** @type {!Highcharts.SplineChart} */
Highcharts.PlotOptions.prototype.spline;
 /** @type {!Highcharts.TreeMapChart} */
Highcharts.PlotOptions.prototype.treemap;
 /** @type {!Highcharts.WaterFallChart} */
Highcharts.PlotOptions.prototype.waterfall;
/**
 * @record
 * @struct
 */
Highcharts.IndividualSeriesOptions = function() {};
 /** @type {string} */
Highcharts.IndividualSeriesOptions.prototype.type;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.IndividualSeriesOptions.prototype.color;
 /** @type {number} */
Highcharts.IndividualSeriesOptions.prototype.colorIndex;
 /** @type {boolean} */
Highcharts.IndividualSeriesOptions.prototype.crisp;
 /** @type {string} */
Highcharts.IndividualSeriesOptions.prototype.cursor;
 /** @type {!Array<(number|!Array<?>|!Highcharts.DataPoint)>} */
Highcharts.IndividualSeriesOptions.prototype.data;
 /** @type {string} */
Highcharts.IndividualSeriesOptions.prototype.description;
 /** @type {string} */
Highcharts.IndividualSeriesOptions.prototype.id;
 /** @type {number} */
Highcharts.IndividualSeriesOptions.prototype.index;
 /** @type {number} */
Highcharts.IndividualSeriesOptions.prototype.legendIndex;
 /** @type {string} */
Highcharts.IndividualSeriesOptions.prototype.name;
 /** @type {number} */
Highcharts.IndividualSeriesOptions.prototype.pointWidth;
 /** @type {?} */
Highcharts.IndividualSeriesOptions.prototype.stack;
 /** @type {(string|number)} */
Highcharts.IndividualSeriesOptions.prototype.xAxis;
 /** @type {(string|number)} */
Highcharts.IndividualSeriesOptions.prototype.yAxis;
 /** @type {number} */
Highcharts.IndividualSeriesOptions.prototype.zIndex;
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.SeriesChart}
 * @record
 * @struct
 */
Highcharts.SeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.AreaChart}
 * @record
 * @struct
 */
Highcharts.AreaChartSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.AreaRangeChart}
 * @record
 * @struct
 */
Highcharts.AreaRangeChartSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.AreaSplineChart}
 * @record
 * @struct
 */
Highcharts.AreaSplineChartSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.AreaSplineRangeChart}
 * @record
 * @struct
 */
Highcharts.AreaSplineRangeChartSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.BarChart}
 * @record
 * @struct
 */
Highcharts.BarChartSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.BoxPlotChart}
 * @record
 * @struct
 */
Highcharts.BoxPlotChartSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.BubbleChart}
 * @record
 * @struct
 */
Highcharts.BubbleChartSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.ColumnChart}
 * @record
 * @struct
 */
Highcharts.ColumnChartSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.ColumnRangeChart}
 * @record
 * @struct
 */
Highcharts.ColumnRangeChartSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.ErrorBarChart}
 * @record
 * @struct
 */
Highcharts.ErrorBarChartSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.FunnelChart}
 * @record
 * @struct
 */
Highcharts.FunnelChartSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.GaugeChart}
 * @record
 * @struct
 */
Highcharts.GaugeChartSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.HeatMapChart}
 * @record
 * @struct
 */
Highcharts.HeatMapSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.LineChart}
 * @record
 * @struct
 */
Highcharts.LineChartSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.PieChart}
 * @record
 * @struct
 */
Highcharts.PieChartSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.PolygonChart}
 * @record
 * @struct
 */
Highcharts.PolygonChartSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.PyramidChart}
 * @record
 * @struct
 */
Highcharts.PyramidChartSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.ScatterChart}
 * @record
 * @struct
 */
Highcharts.ScatterChartSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.SolidGaugeChart}
 * @record
 * @struct
 */
Highcharts.SolidGaugeChartSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.SplineChart}
 * @record
 * @struct
 */
Highcharts.SplineChartSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.TreeMapChart}
 * @record
 * @struct
 */
Highcharts.TreeMapChartSeriesOptions = function() {};
/**
 * @extends {Highcharts.IndividualSeriesOptions}
 * @extends {Highcharts.WaterFallChart}
 * @record
 * @struct
 */
Highcharts.WaterFallChartSeriesOptions = function() {};
/**
 * @record
 * @struct
 */
Highcharts.DataPoint = function() {};
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.DataPoint.prototype.color;
 /** @type {number} */
Highcharts.DataPoint.prototype.colorValue;
 /** @type {!Highcharts.DataLabels} */
Highcharts.DataPoint.prototype.dataLabels;
 /** @type {string} */
Highcharts.DataPoint.prototype.drilldown;
 /** @type {!Highcharts.PointEvents} */
Highcharts.DataPoint.prototype.events;
 /** @type {number} */
Highcharts.DataPoint.prototype.high;
 /** @type {string} */
Highcharts.DataPoint.prototype.id;
 /** @type {(string|number)} */
Highcharts.DataPoint.prototype.innerRadius;
 /** @type {boolean} */
Highcharts.DataPoint.prototype.isIntermediateSum;
 /** @type {boolean} */
Highcharts.DataPoint.prototype.isSum;
 /** @type {number} */
Highcharts.DataPoint.prototype.legendIndex;
 /** @type {number} */
Highcharts.DataPoint.prototype.low;
 /** @type {!Highcharts.Marker} */
Highcharts.DataPoint.prototype.marker;
 /** @type {number} */
Highcharts.DataPoint.prototype.median;
 /** @type {string} */
Highcharts.DataPoint.prototype.name;
 /** @type {string} */
Highcharts.DataPoint.prototype.parent;
 /** @type {number} */
Highcharts.DataPoint.prototype.q1;
 /** @type {number} */
Highcharts.DataPoint.prototype.q3;
 /** @type {(string|number)} */
Highcharts.DataPoint.prototype.radius;
 /** @type {boolean} */
Highcharts.DataPoint.prototype.selected;
 /** @type {boolean} */
Highcharts.DataPoint.prototype.sliced;
 /** @type {number} */
Highcharts.DataPoint.prototype.value;
 /** @type {number} */
Highcharts.DataPoint.prototype.x;
 /** @type {number} */
Highcharts.DataPoint.prototype.y;
 /** @type {number} */
Highcharts.DataPoint.prototype.z;
/**
 * @record
 * @struct
 */
Highcharts.SubtitleOptions = function() {};
 /** @type {string} */
Highcharts.SubtitleOptions.prototype.align;
 /** @type {boolean} */
Highcharts.SubtitleOptions.prototype.floating;
 /** @type {!Object} */
Highcharts.SubtitleOptions.prototype.style;
 /** @type {string} */
Highcharts.SubtitleOptions.prototype.text;
 /** @type {boolean} */
Highcharts.SubtitleOptions.prototype.useHTML;
 /** @type {string} */
Highcharts.SubtitleOptions.prototype.verticalAlign;
 /** @type {number} */
Highcharts.SubtitleOptions.prototype.x;
 /** @type {number} */
Highcharts.SubtitleOptions.prototype.y;
/**
 * @record
 * @struct
 */
Highcharts.TitleOptions = function() {};
 /** @type {string} */
Highcharts.TitleOptions.prototype.align;
 /** @type {boolean} */
Highcharts.TitleOptions.prototype.floating;
 /** @type {number} */
Highcharts.TitleOptions.prototype.margin;
 /** @type {!Object} */
Highcharts.TitleOptions.prototype.style;
 /** @type {string} */
Highcharts.TitleOptions.prototype.text;
 /** @type {boolean} */
Highcharts.TitleOptions.prototype.useHTML;
 /** @type {string} */
Highcharts.TitleOptions.prototype.verticalAlign;
 /** @type {number} */
Highcharts.TitleOptions.prototype.x;
 /** @type {number} */
Highcharts.TitleOptions.prototype.y;
/**
 * @record
 * @struct
 */
Highcharts.CrosshairObject = function() {};
 /** @type {string} */
Highcharts.CrosshairObject.prototype.className;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.CrosshairObject.prototype.color;
 /** @type {string} */
Highcharts.CrosshairObject.prototype.dashStyle;
 /** @type {number} */
Highcharts.CrosshairObject.prototype.zIndex;
 /** @type {number} */
Highcharts.CrosshairObject.prototype.width;
/**
 * @record
 * @struct
 */
Highcharts.PlotPoint = function() {};
 /** @type {number} */
Highcharts.PlotPoint.prototype.plotX;
 /** @type {number} */
Highcharts.PlotPoint.prototype.plotY;
/**
 * @extends {Highcharts.SeriesTooltipOptions}
 * @record
 * @struct
 */
Highcharts.TooltipOptions = function() {};
 /** @type {boolean} */
Highcharts.TooltipOptions.prototype.animation;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.TooltipOptions.prototype.backgroundColor;
 /** @type {(string|!Highcharts.Gradient)} */
Highcharts.TooltipOptions.prototype.borderColor;
 /** @type {number} */
Highcharts.TooltipOptions.prototype.borderRadius;
 /** @type {number} */
Highcharts.TooltipOptions.prototype.borderWidth;
 /** @type {(boolean|!Highcharts.CrosshairObject|!Array<?>)} */
Highcharts.TooltipOptions.prototype.crosshairs;
 /** @type {boolean} */
Highcharts.TooltipOptions.prototype.enabled;
 /** @type {number} */
Highcharts.TooltipOptions.prototype.padding;
 /** @type {boolean} */
Highcharts.TooltipOptions.prototype.shadow;
 /** @type {string} */
Highcharts.TooltipOptions.prototype.shape;
 /** @type {boolean} */
Highcharts.TooltipOptions.prototype.shared;
 /** @type {number} */
Highcharts.TooltipOptions.prototype.snap;
 /** @type {boolean} */
Highcharts.TooltipOptions.prototype.split;
 /** @type {!Object} */
Highcharts.TooltipOptions.prototype.style;
 /** @type {boolean} */
Highcharts.TooltipOptions.prototype.useHTML;

/**
 * Callback function to format the text of the tooltip. Return false to disable tooltip for a specific point on
 * series.
 * 
 * A subset of HTML is supported. The HTML of the tooltip is parsed and converted to SVG, therefore this isn't a
 * complete HTML renderer. The following tabs are supported: <b>, <strong>, <i>, <em>, <br/>, <span>. Spans can be
 * styled with a style attribute, but only text-related CSS that is shared with SVG is handled.
 * 
 * Since version 2.1 the tooltip can be shared between multiple series through the shared option. The available data
 * in the formatter differ a bit depending on whether the tooltip is shared or not. In a shared tooltip, all
 * properties except x, which is common for all points, are kept in an array, this.points.
 * 
 * Available data are:
 * this.percentage (not shared) / this.points[i].percentage (shared)
 *   Stacked series and pies only. The point's percentage of the total.
 * this.point (not shared) / this.points[i].point (shared)
 *   The point object. The point name, if defined, is available through this.point.name.
 * this.points
 *   In a shared tooltip, this is an array containing all other properties for each point.
 * this.series (not shared) / this.points[i].series (shared)
 *   The series object. The series name is available through this.series.name.
 * this.total (not shared) / this.points[i].total (shared)
 *   Stacked series only. The total value at this point's x value.
 * this.x
 *   The x value. This property is the same regardless of the tooltip being shared or not.
 * this.y (not shared) / this.points[i].y (shared)
 *   The y value.
 * @return {(string|boolean)}
 */
Highcharts.TooltipOptions.prototype.formatter = function() {};

/**
 * A callback function to place the tooltip in a default position. The callback receives three parameters:
 * labelWidth, labelHeight and point, where point contains values for plotX and plotY telling where the reference
 * point is in the plot area. Add chart.plotLeft and chart.plotTop to get the full coordinates.
 * 
 * The return should be an object containing x and y values, for example { x: 100, y: 100 }.
 * \@since 2.2.4
 * @param {number} labelWidth
 * @param {number} labelHeight
 * @param {!Highcharts.PlotPoint} point
 * @return {{x: number, y: number}}
 */
Highcharts.TooltipOptions.prototype.positioner = function(labelWidth, labelHeight, point) {};
/**
 * @record
 * @struct
 */
Highcharts.SeriesTooltipOptions = function() {};
 /** @type {!Highcharts.DateTimeFormats} */
Highcharts.SeriesTooltipOptions.prototype.dateTimeLabelFormats;
 /** @type {boolean} */
Highcharts.SeriesTooltipOptions.prototype.followPointer;
 /** @type {boolean} */
Highcharts.SeriesTooltipOptions.prototype.followTouchMove;
 /** @type {string} */
Highcharts.SeriesTooltipOptions.prototype.footerFormat;
 /** @type {string} */
Highcharts.SeriesTooltipOptions.prototype.headerFormat;
 /** @type {number} */
Highcharts.SeriesTooltipOptions.prototype.hideDelay;
 /** @type {string} */
Highcharts.SeriesTooltipOptions.prototype.pointFormat;
 /** @type {number} */
Highcharts.SeriesTooltipOptions.prototype.valueDecimals;
 /** @type {string} */
Highcharts.SeriesTooltipOptions.prototype.valuePrefix;
 /** @type {string} */
Highcharts.SeriesTooltipOptions.prototype.valueSuffix;
 /** @type {string} */
Highcharts.SeriesTooltipOptions.prototype.xDateFormat;

/**
 * A callback function for formatting the HTML output for a single point in the tooltip. Like the pointFormat
 * string, but with more flexibility.
 * 
 * The this keyword refers to the Point object.
 * \@since 4.1.0
 * @return {string}
 */
Highcharts.SeriesTooltipOptions.prototype.pointFormatter = function() {};
/**
 * @record
 * @struct
 */
Highcharts.Options = function() {};
 /** @type {!Highcharts.AccessibilityOptions} */
Highcharts.Options.prototype.accessibility;
 /** @type {!Highcharts.ChartOptions} */
Highcharts.Options.prototype.chart;
 /** @type {(!Highcharts.ColorAxisOptions|!Array<!Highcharts.ColorAxisOptions>)} */
Highcharts.Options.prototype.colorAxis;
 /** @type {!Array<(string|!Highcharts.Gradient)>} */
Highcharts.Options.prototype.colors;
 /** @type {!Highcharts.CreditsOptions} */
Highcharts.Options.prototype.credits;
 /** @type {!Highcharts.DataOptions} */
Highcharts.Options.prototype.data;
 /** @type {?} */
Highcharts.Options.prototype.defs;
 /** @type {!Highcharts.DrilldownOptions} */
Highcharts.Options.prototype.drilldown;
 /** @type {!Highcharts.ExportingOptions} */
Highcharts.Options.prototype.exporting;
 /** @type {!Highcharts.LabelsOptions} */
Highcharts.Options.prototype.labels;
 /** @type {!Highcharts.LangObject} */
Highcharts.Options.prototype.lang;
 /** @type {!Highcharts.LegendOptions} */
Highcharts.Options.prototype.legend;
 /** @type {!Highcharts.LoadingOptions} */
Highcharts.Options.prototype.loading;
 /** @type {!Highcharts.NavigationOptions} */
Highcharts.Options.prototype.navigation;
 /** @type {!Highcharts.NoDataOptions} */
Highcharts.Options.prototype.noData;
 /** @type {!Highcharts.PaneOptions} */
Highcharts.Options.prototype.pane;
 /** @type {!Highcharts.PlotOptions} */
Highcharts.Options.prototype.plotOptions;
 /** @type {!Array<!Highcharts.ResponsiveOptions>} */
Highcharts.Options.prototype.responsive;
 /** @type {!Array<!Highcharts.IndividualSeriesOptions>} */
Highcharts.Options.prototype.series;
 /** @type {!Highcharts.SubtitleOptions} */
Highcharts.Options.prototype.subtitle;
 /** @type {!Highcharts.TitleOptions} */
Highcharts.Options.prototype.title;
 /** @type {!Highcharts.TooltipOptions} */
Highcharts.Options.prototype.tooltip;
 /** @type {(!Highcharts.AxisOptions|!Array<!Highcharts.AxisOptions>)} */
Highcharts.Options.prototype.xAxis;
 /** @type {(!Highcharts.AxisOptions|!Array<!Highcharts.AxisOptions>)} */
Highcharts.Options.prototype.yAxis;
/**
 * @extends {Highcharts.Options}
 * @record
 * @struct
 */
Highcharts.GlobalOptions = function() {};
 /** @type {!Highcharts.GlobalObject} */
Highcharts.GlobalOptions.prototype.global;
 /** @type {!Highcharts.LangObject} */
Highcharts.GlobalOptions.prototype.lang;
/**
 * @record
 * @struct
 */
Highcharts.DateFormatSpecifiers = function() {};

/* TODO: IndexSignature: Highcharts */
/**
 * @record
 * @struct
 */
Highcharts.AxisObject = function() {};

/**
 * Add a plot band after render time.
 * \@since 1.2.0
 * @param {!Highcharts.PlotBands} options
 * @return {void}
 */
Highcharts.AxisObject.prototype.addPlotBand = function(options) {};

/**
 * Add a plot line after render time.
 * \@since 1.2.0
 * @param {!Highcharts.PlotLines} options
 * @return {void}
 */
Highcharts.AxisObject.prototype.addPlotLine = function(options) {};

/**
 * Get the current extremes for the axis.
 * \@since 1.2.0
 * @return {!Highcharts.Extremes}
 */
Highcharts.AxisObject.prototype.getExtremes = function() {};

/**
 * Remove an axis from the chart.
 * \@since 3.0
 * @param {boolean=} redraw
 * @return {void}
 */
Highcharts.AxisObject.prototype.remove = function(redraw) {};

/**
 * Remove a plot band by its id.
 * \@since 1.2.0
 * @param {string} id
 * @return {void}
 */
Highcharts.AxisObject.prototype.removePlotBand = function(id) {};

/**
 * Remove a plot line by its id.
 * \@since 1.2.0
 * @param {string} id
 * @return {void}
 */
Highcharts.AxisObject.prototype.removePlotLine = function(id) {};

/**
 * Set new categories for the axis. Redraws.
 * \@since 1.2.0
 * Set new categories for the axis.
 * \@since 1.2.0
 * @param {!Array<string>} categories
 * @param {boolean=} redraw
 * @return {void}
 */
Highcharts.AxisObject.prototype.setCategories = function(categories, redraw) {};

/**
 * Set the minimum and maximum of the axes after render time. If the startOnTick and endOnTick options are true, the
 * minimum and maximum values are rounded off to the nearest tick. To prevent this, these options can be set to
 * false before calling setExtremes. Also, setExtremes will not allow a range lower than the minRange option, which
 * by default is the range of five points.
 * The animation can also be a configuration object with properties duration and easing.
 * \@since 1.2.0
 * @param {number=} min
 * @param {number=} max
 * @param {boolean=} redraw
 * @param {(boolean|!Highcharts.Animation)=} animation
 * @param {?=} eventArguments
 * @return {void}
 */
Highcharts.AxisObject.prototype.setExtremes = function(min, max, redraw, animation, eventArguments) {};

/**
 * Update the title of the axis after render time.
 * \@since 2.2
 * @param {!Highcharts.AxisTitle} title
 * @param {boolean=} redraw
 * @return {void}
 */
Highcharts.AxisObject.prototype.setTitle = function(title, redraw) {};

/**
 * Translates a value in terms of axis units in to pixels within the chart.
 * \@since 3.0
 * @param {number} value
 * @param {boolean=} paneCoordinates
 * @return {number}
 */
Highcharts.AxisObject.prototype.toPixels = function(value, paneCoordinates) {};

/**
 * Translate a pixel position along the axis to a value in terms of axis units.
 * \@since 3.0
 * @param {number} pixel
 * @param {boolean=} paneCoordinates
 * @return {number}
 */
Highcharts.AxisObject.prototype.toValue = function(pixel, paneCoordinates) {};

/**
 * Update an axis object with a new set of options. The options are merged with the existing options, so only new or
 * altered options need to be specified.
 * \@since 3.0
 * @param {!Highcharts.AxisOptions} options
 * @param {boolean=} redraw
 * @return {void}
 */
Highcharts.AxisObject.prototype.update = function(options, redraw) {};
/**
 * @record
 * @struct
 */
Highcharts.ChartObject = function() {};
 /** @type {!HTMLElement} */
Highcharts.ChartObject.prototype.container;
 /** @type {!Highcharts.CreditsObject} */
Highcharts.ChartObject.prototype.credits;
 /** @type {!Highcharts.Options} */
Highcharts.ChartObject.prototype.options;
 /** @type {!Array<!Highcharts.SeriesObject>} */
Highcharts.ChartObject.prototype.series;
 /** @type {!Highcharts.TitleObject} */
Highcharts.ChartObject.prototype.subtitle;
 /** @type {!Highcharts.TitleObject} */
Highcharts.ChartObject.prototype.title;
 /** @type {!Array<!Highcharts.AxisObject>} */
Highcharts.ChartObject.prototype.xAxis;
 /** @type {!Array<!Highcharts.AxisObject>} */
Highcharts.ChartObject.prototype.yAxis;
 /** @type {!Highcharts.RendererObject} */
Highcharts.ChartObject.prototype.renderer;
 /** @type {!Highcharts.LegendObject} */
Highcharts.ChartObject.prototype.legend;

/**
 * Add an axis to the chart after render time. Note that this method should never be used when adding data
 * synchronously at chart render time, as it adds expense to the calculations and rendering. When adding data at the
 * same time as the chart is initiated, add the axis as a configuration option instead.
 * \@since 3.0
 * @param {!Highcharts.AxisOptions} options
 * @param {boolean=} isX
 * @param {boolean=} redraw
 * @param {(boolean|!Highcharts.Animation)=} animation
 * @return {!Highcharts.AxisObject}
 */
Highcharts.ChartObject.prototype.addAxis = function(options, isX, redraw, animation) {};

/**
 * Set a new credits label for the chart.
 * \@since 5.0.0
 * @param {!Highcharts.CreditsOptions} options
 * @return {void}
 */
Highcharts.ChartObject.prototype.addCredits = function(options) {};

/**
 * Add a series to the chart after render time. Note that this method should never be used when adding data
 * synchronously at chart render time, as it adds expense to the calculations and rendering. When adding data at the
 * same time as the chart is initiated, add the series as a configuration option instead.
 * \@since 1.2.0
 * @template T
 * @param {T} options
 * @param {boolean=} redraw
 * @param {(boolean|!Highcharts.Animation)=} animation
 * @return {!Highcharts.SeriesObject}
 */
Highcharts.ChartObject.prototype.addSeries = function(options, redraw, animation) {};

/**
 * Add a series to the chart as drilldown from a specific point in the parent series. This method is used for async
 * drilldown, when clicking a point in a series should result in loading and displaying a more high-resolution
 * series. When not async, the setup is simpler using the drilldown.series options structure.
 * \@since 3.0.8
 * @param {!Highcharts.PointObject} point
 * @param {!Highcharts.IndividualSeriesOptions} seriesOptions
 * @return {void}
 */
Highcharts.ChartObject.prototype.addSeriesAsDrilldown = function(point, seriesOptions) {};

/**
 * Removes the chart and purges memory. This method should be called before writing a new chart into the same
 * container. It is called internally on window unload to prevent leaks.
 * \@since 1.2.2
 * @return {void}
 */
Highcharts.ChartObject.prototype.destroy = function() {};

/**
 * When the chart is drilled down to a child series, calling chart.drillUp() will drill up to the parent series.
 * \@since 3.0.8
 * @return {void}
 */
Highcharts.ChartObject.prototype.drillUp = function() {};

/**
 * Exporting module required. Submit an SVG version of the chart to a server along with some parameters for
 * conversion.
 * \@since 2.0
 * Exporting module required. Submit an SVG version of the chart to a server along with some parameters for
 * conversion.
 * All options default to the values given in the exporting config options. filename: the filename for the export without extension,
 * url: the URL for the server module to do the conversion, width: the width of the PNG or JPEG image generated on the server,
 * type: the MIME type of the converted image, sourceWidth: the width of the source (in-page) chart, sourceHeight: the height of the source chart.
 * \@since 2.0
 * Exporting module required. Submit an SVG version of the chart to a server along with some parameters for
 * conversion.
 * All options default to the values given in the exporting config options. filename: the filename for the export without extension,
 * url: the URL for the server module to do the conversion, width: the width of the PNG or JPEG image generated on the server,
 * type: the MIME type of the converted image, sourceWidth: the width of the source (in-page) chart, sourceHeight: the height of the source chart.
 * \@since 2.0
 * @param {!Highcharts.ExportingOptions=} options
 * @param {!Highcharts.Options=} chartOptions
 * @return {void}
 */
Highcharts.ChartObject.prototype.exportChart = function(options, chartOptions) {};

/**
 * Export the chart to a PNG or SVG without sending it to a server. Requires
 * modules/exporting.js and modules/offline-exporting.js.
 * \@since 2.0
 * Export the chart to a PNG or SVG without sending it to a server. Requires
 * modules/exporting.js and modules/offline-exporting.js.
 * the exportChart params.
 * \@since 2.0
 * Export the chart to a PNG or SVG without sending it to a server.
 * Requires modules/exporting.js and modules/offline-exporting.js.
 * the exportChart params.
 * exported chart. Same as the exportChart params.
 * \@since 2.0
 * @param {!Highcharts.ExportingOptions=} options
 * @param {!Highcharts.Options=} chartOptions
 * @return {void}
 */
Highcharts.ChartObject.prototype.exportChartLocal = function(options, chartOptions) {};

/**
 * Get an axis, series or point by its id as given in the configuration options.
 * \@since 1.2.0
 * @param {string} id
 * @return {(!Highcharts.PointObject|!Highcharts.SeriesObject|!Highcharts.AxisObject)}
 */
Highcharts.ChartObject.prototype.get = function(id) {};

/**
 * Exporting module required. Get an SVG string representing the chart.
 * For example if series.lineWidth should be greater in the exported chart than in the original, or the chart should have a different background color, this is added here.
 * \@since 2.0
 * @param {!Highcharts.Options=} additionalOptions
 * @return {string}
 */
Highcharts.ChartObject.prototype.getSVG = function(additionalOptions) {};

/**
 * Returns an array of all currently selected points in the chart. Points can be selected either programmatically by
 * the point.select() method or by clicking.
 * \@since 1.2.0
 * @return {!Array<!Highcharts.PointObject>}
 */
Highcharts.ChartObject.prototype.getSelectedPoints = function() {};

/**
 * Returns an array of all currently selected series in the chart. Series can be selected either programmatically by
 * the series.select() method or by checking the checkbox next to the legend item if series.showCheckBox is true.
 * \@since 1.2.0
 * @return {!Array<!Highcharts.SeriesObject>}
 */
Highcharts.ChartObject.prototype.getSelectedSeries = function() {};

/**
 * Hide the loading screen. Options for the loading screen are defined at options.loading.
 * \@since 1.2.0
 * @return {void}
 */
Highcharts.ChartObject.prototype.hideLoading = function() {};

/**
 * Exporting module required. Clears away other elements in the page and prints the chart as it is displayed. By
 * default, when the exporting module is enabled, a button at the upper left calls this method.
 * \@since 2.0
 * @return {void}
 */
Highcharts.ChartObject.prototype.print = function() {};

/**
 * Redraw the chart after changes have been done to the data or axis extremes. All methods for updating axes, series
 * or points have a parameter for redrawing the chart. This is true by default. But in many cases you want to do
 * more than one operation on the chart before redrawing, for example add a number of points. In those cases it is a
 * waste of resources to redraw the chart for each new point added. So you add the points and call chart.redraw()
 * after.
 * \@since 1.2.0
 * @param {(boolean|!Highcharts.Animation)=} animation
 * @return {void}
 */
Highcharts.ChartObject.prototype.redraw = function(animation) {};

/**
 * Reflows the chart to its container. By default, the chart reflows automatically to its container following a
 * window.resize event, as per the chart.reflow option. However, there are no reliable events for div resize, so if
 * the container is resized without a window resize event, this must be called explicitly.
 * @return {void}
 */
Highcharts.ChartObject.prototype.reflow = function() {};

/**
 * Resize the chart to a given width and height.
 *  The animation can also be a configuration object with properties duration and easing.
 * @param {number} width
 * @param {number} height
 * @param {(boolean|!Highcharts.Animation)=} animation
 * @return {void}
 */
Highcharts.ChartObject.prototype.setSize = function(width, height, animation) {};

/**
 * Set a new title or subtitle for the chart
 * \@since 2.1.0
 * @param {!Highcharts.TitleOptions} title
 * @param {!Highcharts.SubtitleOptions=} subtitle
 * @param {boolean=} redraw
 * @return {void}
 */
Highcharts.ChartObject.prototype.setTitle = function(title, subtitle, redraw) {};

/**
 * Dim the chart's plot area and show a loading label text. Options for the loading screen are defined at
 * options.loading. A custom text can be given as a parameter for loading.
 * \@since 2.0.5
 * @param {string=} str
 * @return {void}
 */
Highcharts.ChartObject.prototype.showLoading = function(str) {};

/**
 * A generic function to update any element of the chart. Elements can be enabled and disabled, moved, re-styled,
 * re-formatted etc.
 * A special case is configuration objects that take arrays, for example xAxis, yAxis or series. For these collections,
 * an id option is used to map the new option set to an existing object. If an existing object of the same id is not
 * found, the first item is updated. So for example, running chart.update with a series item without an id, will cause
 * the existing chart's first series to be updated.
 * See also the responsive option set. Switching between responsive.rules basically runs chart.update under the hood.
 * \@since 5.0.0
 * @param {!Highcharts.ChartOptions} options
 * @param {boolean=} redraw
 * @return {void}
 */
Highcharts.ChartObject.prototype.update = function(options, redraw) {};

/**
 * This method is deprecated as of 2.0.1. Updating the chart position after a move operation is no longer necessary.
 * \@since 1.2.5
 * @deprecated
 * @return {void}
 */
Highcharts.ChartObject.prototype.updatePosition = function() {};
/**
 * @record
 * @struct
 */
Highcharts.Chart = function() {};

/* TODO: ConstructSignature: Highcharts */

/* TODO: ConstructSignature: Highcharts */

/* TODO: ConstructSignature: Highcharts */

/* TODO: ConstructSignature: Highcharts */
/**
 * @record
 * @struct
 */
Highcharts.ElementObject = function() {};

/**
 * Add the element to the renderer canvas.
 * \@since 2.0
 * @param {!Highcharts.ElementObject=} parent
 * @return {!Highcharts.ElementObject}
 */
Highcharts.ElementObject.prototype.add = function(parent) {};

/**
 * Apply numeric attributes to the SVG/VML element by animation. See Element.attr() for more information on setting
 * attributes.
 * Valid properties depend on the library, but options like duration, easing and complete are supported by jQuery.
 * \@since 2.0
 * @param {?} attributes
 * @param {?=} animation
 * @return {!Highcharts.ElementObject}
 */
Highcharts.ElementObject.prototype.animate = function(attributes, animation) {};

/**
 * Apply attributes to the SVG/VML elements. These attributes for the most parts correspond to SVG, but some are
 * specific to Highcharts, like zIndex and rotation.
 * 
 * In order to set the rotation center for rotation, set x and y to 0 and use translateX and translateY attributes
 * to position the element instead.
 * 
 * Attributes frequently used in Highcharts are fill, stroke, stroke-width.
 * \@since 2.0
 * @param {?} hash
 * @return {!Highcharts.ElementObject}
 */
Highcharts.ElementObject.prototype.attr = function(hash) {};

/**
 * Apply some CSS properties to the element
 * \@since 2.0
 * @param {!Object} hash
 * @return {!Highcharts.ElementObject}
 */
Highcharts.ElementObject.prototype.css = function(hash) {};

/**
 * Destroy the element and free up memory
 * \@since 2.0
 * @return {void}
 */
Highcharts.ElementObject.prototype.destroy = function() {};

/**
 * @param {number=} duration
 * @return {void}
 */
Highcharts.ElementObject.prototype.fadeOut = function(duration) {};

/**
 * Get the bounding box of the element
 * \@since 2.0
 * @return {{x: number, y: number, height: number, width: number}} An object containing x, y, width and height values for the element.
 */
Highcharts.ElementObject.prototype.getBBox = function() {};

/**
 * Apply an event handler to the element
 * \@since 2.0
 * @param {string} eventType
 * @param {function(): void} handler The event handler function.
 * @return {!Highcharts.ElementObject}
 */
Highcharts.ElementObject.prototype.on = function(eventType, handler) {};

/**
 * Bring the element to the front. Alternatively, a zIndex attribute can be given.
 * \@since 2.0
 * @return {!Highcharts.ElementObject}
 */
Highcharts.ElementObject.prototype.toFront = function() {};
/**
 * @record
 * @struct
 */
Highcharts.RendererObject = function() {};

/**
 * Draw an arc on the renderer canvas.
 * \@since 2.0
 * @param {number} centerX
 * @param {number} centerY
 * @param {number} outerRadius
 * @param {number} innerRadius
 * @param {number} start
 * @param {number} end
 * @return {!Highcharts.ElementObject}
 */
Highcharts.RendererObject.prototype.arc = function(centerX, centerY, outerRadius, innerRadius, start, end) {};

/**
 * Draw circle on the renderer canvas.
 * \@since 2.0
 * @param {number} centerX
 * @param {number} centerY
 * @param {number} radius
 * @return {!Highcharts.ElementObject}
 */
Highcharts.RendererObject.prototype.circle = function(centerX, centerY, radius) {};

/**
 * Styled mode only. A hook for adding general definitions to the SVG's defs tag. Definitions can be referenced from
 * the CSS by its id. Read more in Gradients, shadows and patterns.
 * The definitions can also be added as configuration options, see defs.
 * \@since 5.0.0
 * @param {!Object} def
 * @return {!Highcharts.ElementObject}
 */
Highcharts.RendererObject.prototype.definition = function(def) {};

/**
 * Add an SVG/VML group.
 * \@since 2.0
 * @param {string=} name
 * @return {!Highcharts.ElementObject}
 */
Highcharts.RendererObject.prototype.g = function(name) {};

/**
 * Add an image from an external resource.
 * \@since 2.0
 * @param {string} source
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @return {!Highcharts.ElementObject}
 */
Highcharts.RendererObject.prototype.image = function(source, x, y, width, height) {};

/**
 * Draw a label, which is an extended text element with support for border and background. Highcharts creates a g
 * element with a text and a path or rect inside, to make it behave somewhat like a HTML div. Border and background
 * are set through stroke, stroke-width and fill attributes using the attr method. This must be done before calling
 * add.
 * \@since 2.0
 * @param {string} str
 * @param {number} x
 * @param {number} y
 * @param {string=} shape
 * @param {number=} anchorX
 * @param {number=} anchorY
 * @param {boolean=} useHTML
 * @param {boolean=} baseline
 * @param {string=} className
 * @return {!Highcharts.ElementObject}
 */
Highcharts.RendererObject.prototype.label = function(str, x, y, shape, anchorX, anchorY, useHTML, baseline, className) {};

/**
 * Add a path based on SVG's path commands. In SVG capable browsers all path commands are supported, but in VML only
 * a subset is supported: absolute moveTo (M), absolute lineTo (L), absolute curveTo (C) and close (Z).
 * @param {!Array<?>} path
 * @return {!Highcharts.ElementObject}
 */
Highcharts.RendererObject.prototype.path = function(path) {};

/**
 * Add a rectangle.
 * \@since 2.0
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {number} cornerRadius
 * @return {!Highcharts.ElementObject}
 */
Highcharts.RendererObject.prototype.rect = function(x, y, width, height, cornerRadius) {};

/**
 * Draw text. The text can contain a subset of HTML, like spans and anchors and some basic text styling of these.
 * For more advanced features like border and background, use label instead.
 * \@since 2.0
 * @param {string} str
 * @param {number} x
 * @param {number} y
 * @return {!Highcharts.ElementObject}
 */
Highcharts.RendererObject.prototype.text = function(str, x, y) {};
/**
 * @record
 * @struct
 */
Highcharts.Renderer = function() {};

/* TODO: ConstructSignature: Highcharts */
/**
 * @record
 * @struct
 */
Highcharts.Static = function() {};
 /** @type {!Highcharts.Chart} */
Highcharts.Static.prototype.Chart;
 /** @type {!Highcharts.Renderer} */
Highcharts.Static.prototype.Renderer;
 /** @type {!Array<!Highcharts.ChartObject>} */
Highcharts.Static.prototype.charts;
 /** @type {!Highcharts.DateFormatSpecifiers} */
Highcharts.Static.prototype.dateFormats;

/**
 * @param {(string|!Highcharts.Gradient)} color
 * @return {(string|!Highcharts.Gradient)}
 */
Highcharts.Static.prototype.Color = function(color) {};

/**
 * As Highcharts.Chart, but without need for the new keyword.
 * \@since 4.2.0
 * As Highcharts.Chart, but without need for the new keyword.
 * \@since 4.2.0
 * @param {!Highcharts.Options|(string|!HTMLElement)} options_or_renderTo
 * @param {function(!Highcharts.ChartObject): void|!Highcharts.Options=} callback_or_options
 * @param {function(!Highcharts.ChartObject): void=} callback
 * @return {!Highcharts.ChartObject}
 */
Highcharts.Static.prototype.chart = function(options_or_renderTo, callback_or_options, callback) {};

/**
 * Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970) into a human readable date string. The
 * format is a subset of the formats for PHP's strftime function. Additional formats can be given in the
 * Highcharts.dateFormats hook, see below.
 * @param {string} format
 * @param {number=} time
 * @param {boolean=} capitalize
 * @return {string}
 */
Highcharts.Static.prototype.dateFormat = function(format, time, capitalize) {};

/**
 * The error handler function. By default is provides error messages for debugging, with links to the descriptions on Highcharts website.
 * This function can be redefined to catch errors in client applications.
 * description according to error definition file. If it's a string, the description is printed in the console.
 * \@since 5.0.6
 * @param {(string|number)} code
 * @param {boolean} fatal
 * @return {!Function}
 */
Highcharts.Static.prototype.error = function(code, fatal) {};

/**
 * Formats a JavaScript number with grouped thousands, a fixed amount of decimals and an optional decimal point. It
 * is a port of PHP's function with the same name. See PHP number_format for a full explanation of the parameters.
 * @param {number} value
 * @param {number=} decimals
 * @param {string=} decimalPoint
 * @param {string=} thousandsSep
 * @return {string}
 */
Highcharts.Static.prototype.numberFormat = function(value, decimals, decimalPoint, thousandsSep) {};

/**
 * Sets the options globally for all charts created after this has been called. Takes an options JavaScript object
 * structure as the argument. These options are merged with the default options and the result is returned.
 * @param {!Highcharts.GlobalOptions} options The chart configuration object.
 * @return {!Highcharts.Options}
 */
Highcharts.Static.prototype.setOptions = function(options) {};

/**
 * Get the updated default options. Until 3.0.7, merely exposing defaultOptions for outside modules
 * wasn't enough because the setOptions method created a new object.
 * @return {!Highcharts.Options}
 */
Highcharts.Static.prototype.getOptions = function() {};

/**
 * @param {!Array<?>} array
 * @param {!Function} fn
 * @return {!Array<?>}
 */
Highcharts.Static.prototype.map = function(array, fn) {};

/**
 * @param {?} prototype
 * @param {string} type
 * @param {function(!Function, !Array<?>): void} cb
 * @return {void}
 */
Highcharts.Static.prototype.wrap = function(prototype, type, cb) {};
/**
 * @record
 * @struct
 */
Highcharts.PointObject = function() {};
 /** @type {(string|number)} */
Highcharts.PointObject.prototype.category;
 /** @type {string} */
Highcharts.PointObject.prototype.name;
 /** @type {number} */
Highcharts.PointObject.prototype.index;
 /** @type {number} */
Highcharts.PointObject.prototype.percentage;
 /** @type {boolean} */
Highcharts.PointObject.prototype.selected;
 /** @type {!Highcharts.SeriesObject} */
Highcharts.PointObject.prototype.series;
 /** @type {number} */
Highcharts.PointObject.prototype.total;
 /** @type {number} */
Highcharts.PointObject.prototype.x;
 /** @type {number} */
Highcharts.PointObject.prototype.y;

/**
 * Remove the point from the series.
 * \@since 1.2.0
 * @param {boolean=} redraw
 * @param {(boolean|!Highcharts.Animation)=} animation
 * @return {void}
 */
Highcharts.PointObject.prototype.remove = function(redraw, animation) {};

/**
 * Select or unselect the point.
 * \@since 1.2.0
 * @param {boolean=} select
 * @param {boolean=} accumulate
 * @return {void}
 */
Highcharts.PointObject.prototype.select = function(select, accumulate) {};

/**
 * Slice out or set back in a pie chart slice. This is the default way of Highcharts to visualize that a pie point
 * is selected.
 * \@since 1.2.0
 * @param {boolean=} sliced
 * @param {boolean=} redraw
 * @param {(boolean|!Highcharts.Animation)=} animation
 * @return {void}
 */
Highcharts.PointObject.prototype.slice = function(sliced, redraw, animation) {};

/**
 * Update the point with new values.
 * For example for a line series, if options is a single number, the point will be given that number as the main y value. If it is an array,
 * it will be interpreted as x and y values respectively. If it is an object, advanced options are applied.
 * \@since 1.2.0
 * @param {(number|!Array<?>|!Highcharts.DataPoint)} options
 * @param {boolean=} redraw
 * @param {(boolean|!Highcharts.Animation)=} animation
 * @return {void}
 */
Highcharts.PointObject.prototype.update = function(options, redraw, animation) {};
/**
 * @record
 * @struct
 */
Highcharts.SeriesObject = function() {};
 /** @type {!Highcharts.ChartObject} */
Highcharts.SeriesObject.prototype.chart;
 /** @type {!Array<!Highcharts.PointObject>} */
Highcharts.SeriesObject.prototype.data;
 /** @type {string} */
Highcharts.SeriesObject.prototype.name;
 /** @type {!Highcharts.IndividualSeriesOptions} */
Highcharts.SeriesObject.prototype.options;
 /** @type {boolean} */
Highcharts.SeriesObject.prototype.selected;
 /** @type {string} */
Highcharts.SeriesObject.prototype.type;
 /** @type {boolean} */
Highcharts.SeriesObject.prototype.visible;
 /** @type {!Highcharts.AxisObject} */
Highcharts.SeriesObject.prototype.xAxis;
 /** @type {!Highcharts.AxisObject} */
Highcharts.SeriesObject.prototype.yAxis;

/**
 * Add a point to the series after render time. The point can be added at the end, or by giving it an X value, to
 * the start or in the middle of the series.
 * If it is an array, it will be interpreted as x and y values respectively. If it is an object, advanced options as outlined under series.data are applied.
 * \@since 1.2.0
 * @param {(number|!Array<?>|!Highcharts.DataPoint)} options
 * @param {boolean=} redraw
 * @param {boolean=} shift
 * @param {(boolean|!Highcharts.Animation)=} animation
 * @return {void}
 */
Highcharts.SeriesObject.prototype.addPoint = function(options, redraw, shift, animation) {};

/**
 * Hides the series if visible. If the chart.ignoreHiddenSeries option is true,the chart is redrawn without this
 * series.
 * \@since 1.2.0
 * @return {void}
 */
Highcharts.SeriesObject.prototype.hide = function() {};

/**
 * Remove the series from the chart.
 * \@since 1.2.0
 * @param {boolean=} redraw
 * @return {void}
 */
Highcharts.SeriesObject.prototype.remove = function(redraw) {};

/**
 * Remove a point from the series. Unlike the Point.remove method, this can also be done on a point that is not
 * instanciated because it is outside the view or subject to data grouping.
 * \@since 4.1.0
 * @param {number} index
 * @param {boolean=} redraw
 * @param {(boolean|!Highcharts.Animation)=} animation
 * @return {void}
 */
Highcharts.SeriesObject.prototype.removePoint = function(index, redraw, animation) {};

/**
 * Select or unselect the series. This means its selected property is set,the checkbox in the legend is toggled and
 * when selected, the series is returned in the chart.getSelectedSeries() method.
 * \@since 1.2.0
 * @param {boolean=} selected
 * @return {void}
 */
Highcharts.SeriesObject.prototype.select = function(selected) {};

/**
 * Apply a new set of data to the series and optionally redraw it. Note that this method throws away all points and
 * creates new ones. For updating the values of existing points, use Point.update() instead.
 * \@since 1.2.0
 * @param {(!Array<number>|!Array<!Array<number>>|!Array<!Highcharts.DataPoint>)} data
 * @param {boolean=} redraw
 * @param {(boolean|!Highcharts.Animation)=} animation
 * @param {boolean=} updatePoints
 * @return {void}
 */
Highcharts.SeriesObject.prototype.setData = function(data, redraw, animation, updatePoints) {};

/**
 * A utility function to show or hide the series with an optional redraw.
 * \@since 1.2.0
 * @param {boolean=} visible
 * @param {boolean=} redraw
 * @return {void}
 */
Highcharts.SeriesObject.prototype.setVisible = function(visible, redraw) {};

/**
 * Shows the series if hidden.
 * \@since 1.2.0
 * @return {void}
 */
Highcharts.SeriesObject.prototype.show = function() {};

/**
 * Update the series with a new set of options. For a clean and precise handling of new options, all methods and
 * elements from the series is removed, and it is initiated from scratch. Therefore, this method is more performance
 * expensive than some other utility methods like setData or setVisible.
 * \@since 1.2.0
 * @param {!Highcharts.IndividualSeriesOptions} options
 * @param {boolean=} redraw
 * @return {void}
 */
Highcharts.SeriesObject.prototype.update = function(options, redraw) {};
/**
 * @record
 * @struct
 */
Highcharts.LegendObject = function() {};

/**
 * Update the legend with new options.
 * \@since 5.0.0
 * @param {!Highcharts.LegendOptions} options
 * @param {boolean=} redraw
 * @return {void}
 */
Highcharts.LegendObject.prototype.update = function(options, redraw) {};
/**
 * @record
 * @struct
 */
function JQuery() {}

/**
 * Creates a new Highcharts.Chart for the current JQuery selector; usually
 * a div selected by $('#container')
 * Creates a new Highcharts.Chart for the current JQuery selector; usually
 * a div selected by $('#container')
 * @param {!Highcharts.Options=} options
 * @param {function(!Highcharts.ChartObject): void=} callback Callback function used to manipulate the constructed chart instance
 * @return {!Highcharts.ChartObject|!JQuery} current {JQuery} selector the current JQuery selector
 */
JQuery.prototype.highcharts = function(options, callback) {};
 /** @type {!Highcharts.Static} */
var Highcharts;

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
