/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/power-assert/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */

/**
 * @param {?} value
 * @param {string=} message
 * @return {void}
 */
function assert(value, message) {}

/**
 * @constructor
 * @struct
 * @param {{message: string, actual: ?, expected: ?, operator: string, stackStartFunction: !Function}=} options
 */
assert.AssertionError = function(options) {};
 /** @type {string} */
assert.AssertionError.prototype.name;
 /** @type {string} */
assert.AssertionError.prototype.message;
 /** @type {?} */
assert.AssertionError.prototype.actual;
 /** @type {?} */
assert.AssertionError.prototype.expected;
 /** @type {string} */
assert.AssertionError.prototype.operator;
 /** @type {boolean} */
assert.AssertionError.prototype.generatedMessage;

/**
 * @param {?=} actual
 * @param {?=} expected
 * @param {string=} message
 * @param {string=} operator
 * @return {void}
 */
assert.fail = function(actual, expected, message, operator) {};

/**
 * @param {?} value
 * @param {string=} message
 * @return {void}
 */
assert.ok = function(value, message) {};

/**
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @return {void}
 */
assert.equal = function(actual, expected, message) {};

/**
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @return {void}
 */
assert.notEqual = function(actual, expected, message) {};

/**
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @return {void}
 */
assert.deepEqual = function(actual, expected, message) {};

/**
 * @param {?} acutal
 * @param {?} expected
 * @param {string=} message
 * @return {void}
 */
assert.notDeepEqual = function(acutal, expected, message) {};

/**
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @return {void}
 */
assert.strictEqual = function(actual, expected, message) {};

/**
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @return {void}
 */
assert.notStrictEqual = function(actual, expected, message) {};

/**
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @return {void}
 */
assert.deepStrictEqual = function(actual, expected, message) {};

/**
 * @param {?} actual
 * @param {?} expected
 * @param {string=} message
 * @return {void}
 */
assert.notDeepStrictEqual = function(actual, expected, message) {};
 /** @type {?} */
assert.throws;
 /** @type {?} */
assert.doesNotThrow;

/**
 * @param {?} value
 * @return {void}
 */
assert.ifError = function(value) {};
/**
 * @record
 * @struct
 */
assert.Options = function() {};
 /** @type {!empower.Options} */
assert.Options.prototype.assertion;
 /** @type {!powerAssertFormatter.Options} */
assert.Options.prototype.output;

/**
 * @param {!assert.Options} options
 * @return {function(?, string): void}
 */
assert.customize = function(options) {};
