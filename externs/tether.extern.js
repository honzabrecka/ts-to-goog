/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/tether/index.d.ts:

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {!Tether.ITetherOptions} options
 */
function Tether(options) {}

/**
 * @param {!Tether.ITetherOptions} options
 * @return {void}
 */
Tether.prototype.setOptions = function(options) {};

/**
 * @return {void}
 */
Tether.prototype.disable = function() {};

/**
 * @return {void}
 */
Tether.prototype.enable = function() {};

/**
 * @return {void}
 */
Tether.prototype.destroy = function() {};

/**
 * @return {void}
 */
Tether.prototype.position = function() {};

/**
 * @return {void}
 */
Tether.position = function() {};
/**
 * @record
 * @struct
 */
Tether.ITetherOptions = function() {};
 /** @type {string} */
Tether.ITetherOptions.prototype.attachment;
 /** @type {!HTMLElement} */
Tether.ITetherOptions.prototype.bodyElement;
 /** @type {!Object<string,boolean>} */
Tether.ITetherOptions.prototype.classes;
 /** @type {string} */
Tether.ITetherOptions.prototype.classPrefix;
 /** @type {!Array<!Tether.ITetherConstraint>} */
Tether.ITetherOptions.prototype.constraints;
 /** @type {?} */
Tether.ITetherOptions.prototype.element;
 /** @type {boolean} */
Tether.ITetherOptions.prototype.enabled;
 /** @type {string} */
Tether.ITetherOptions.prototype.offset;
 /** @type {?} */
Tether.ITetherOptions.prototype.optimizations;
 /** @type {?} */
Tether.ITetherOptions.prototype.target;
 /** @type {string} */
Tether.ITetherOptions.prototype.targetAttachment;
 /** @type {string} */
Tether.ITetherOptions.prototype.targetOffset;
 /** @type {string} */
Tether.ITetherOptions.prototype.targetModifier;
/**
 * @record
 * @struct
 */
Tether.ITetherConstraint = function() {};
 /** @type {string} */
Tether.ITetherConstraint.prototype.attachment;
 /** @type {string} */
Tether.ITetherConstraint.prototype.outOfBoundsClass;
 /** @type {(boolean|!Array<string>)} */
Tether.ITetherConstraint.prototype.pin;
 /** @type {string} */
Tether.ITetherConstraint.prototype.pinnedClass;
 /** @type {(string|!HTMLElement|!Array<number>)} */
Tether.ITetherConstraint.prototype.to;
