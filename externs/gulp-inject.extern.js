/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/gulp-inject/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/**
 * @param {!NodeJS.ReadableStream} sources
 * @param {!inject.IOptions=} options
 * @return {!NodeJS.ReadWriteStream}
 */
function inject(sources, options) {}
/**
 * @record
 * @struct
 */
inject.ITagFunction = function() {};

/* TODO: CallSignature: inject */
/**
 * @record
 * @struct
 */
inject.ITransformFunction = function() {};

/* TODO: CallSignature: inject */
/**
 * @record
 * @struct
 */
inject.IOptions = function() {};
 /** @type {(string|!Array<string>)} */
inject.IOptions.prototype.ignorePath;
 /** @type {boolean} */
inject.IOptions.prototype.relative;
 /** @type {string} */
inject.IOptions.prototype.addPrefix;
 /** @type {string} */
inject.IOptions.prototype.addSuffix;
 /** @type {boolean} */
inject.IOptions.prototype.addRootSlash;
 /** @type {string} */
inject.IOptions.prototype.name;
 /** @type {boolean} */
inject.IOptions.prototype.removeTags;
 /** @type {boolean} */
inject.IOptions.prototype.empty;
 /** @type {(string|!inject.ITagFunction)} */
inject.IOptions.prototype.starttag;
 /** @type {(string|!inject.ITagFunction)} */
inject.IOptions.prototype.endtag;
 /** @type {!inject.ITransformFunction} */
inject.IOptions.prototype.transform;
 /** @type {boolean} */
inject.IOptions.prototype.selfClosingTag;

/* TODO: ExportAssignment in  */
