/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/voximplant-websdk/index.d.ts:

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
/** @const */
var VoxImplant = {};

/** @const */
VoxImplant.Events = {};
/** @const {number} */
VoxImplant.Events.AuthResult;
/** @const {number} */
VoxImplant.Events.ConnectionClosed;
/** @const {number} */
VoxImplant.Events.ConnectionEstablished;
/** @const {number} */
VoxImplant.Events.ConnectionFailed;
/** @const {number} */
VoxImplant.Events.IncomingCall;
/** @const {number} */
VoxImplant.Events.MicAccessResult;
/** @const {number} */
VoxImplant.Events.NetStatsReceived;
/** @const {number} */
VoxImplant.Events.PlaybackFinished;
/** @const {number} */
VoxImplant.Events.SDKReady;
/** @const {number} */
VoxImplant.Events.SourcesInfoUpdated;

/** @const */
VoxImplant.IMEvents = {};
/** @const {number} */
VoxImplant.IMEvents.ChatHistoryReceived;
/** @const {number} */
VoxImplant.IMEvents.ChatRoomBanList;
/** @const {number} */
VoxImplant.IMEvents.ChatRoomCreated;
/** @const {number} */
VoxImplant.IMEvents.ChatRoomError;
/** @const {number} */
VoxImplant.IMEvents.ChatRoomHistoryReceived;
/** @const {number} */
VoxImplant.IMEvents.ChatRoomInfo;
/** @const {number} */
VoxImplant.IMEvents.ChatRoomInvitation;
/** @const {number} */
VoxImplant.IMEvents.ChatRoomInviteDeclined;
/** @const {number} */
VoxImplant.IMEvents.ChatRoomMessageModified;
/** @const {number} */
VoxImplant.IMEvents.ChatRoomMessageNotModified;
/** @const {number} */
VoxImplant.IMEvents.ChatRoomMessageReceived;
/** @const {number} */
VoxImplant.IMEvents.ChatRoomMessageRemoved;
/** @const {number} */
VoxImplant.IMEvents.ChatRoomNewParticipant;
/** @const {number} */
VoxImplant.IMEvents.ChatRoomOperation;
/** @const {number} */
VoxImplant.IMEvents.ChatRoomParticipantExit;
/** @const {number} */
VoxImplant.IMEvents.ChatRoomParticipants;
/** @const {number} */
VoxImplant.IMEvents.ChatRoomPresenceUpdate;
/** @const {number} */
VoxImplant.IMEvents.ChatRoomStateUpdate;
/** @const {number} */
VoxImplant.IMEvents.ChatRoomSubjectChange;
/** @const {number} */
VoxImplant.IMEvents.ChatRoomsDataReceived;
/** @const {number} */
VoxImplant.IMEvents.ChatStateUpdate;
/** @const {number} */
VoxImplant.IMEvents.MessageModified;
/** @const {number} */
VoxImplant.IMEvents.MessageNotModified;
/** @const {number} */
VoxImplant.IMEvents.MessageReceived;
/** @const {number} */
VoxImplant.IMEvents.MessageRemoved;
/** @const {number} */
VoxImplant.IMEvents.MessageStatus;
/** @const {number} */
VoxImplant.IMEvents.PresenceUpdate;
/** @const {number} */
VoxImplant.IMEvents.RosterItemChange;
/** @const {number} */
VoxImplant.IMEvents.RosterPresenceUpdate;
/** @const {number} */
VoxImplant.IMEvents.RosterReceived;
/** @const {number} */
VoxImplant.IMEvents.SubscriptionRequest;
/** @const {number} */
VoxImplant.IMEvents.SystemError;
/** @const {number} */
VoxImplant.IMEvents.UCConnected;
/** @const {number} */
VoxImplant.IMEvents.UCDisconnected;

/** @const */
VoxImplant.CallEvents = {};
/** @const {number} */
VoxImplant.CallEvents.Connected;
/** @const {number} */
VoxImplant.CallEvents.Disconnected;
/** @const {number} */
VoxImplant.CallEvents.Failed;
/** @const {number} */
VoxImplant.CallEvents.ICETimeout;
/** @const {number} */
VoxImplant.CallEvents.InfoReceived;
/** @const {number} */
VoxImplant.CallEvents.MessageReceived;
/** @const {number} */
VoxImplant.CallEvents.ProgressToneStart;
/** @const {number} */
VoxImplant.CallEvents.ProgressToneStop;
/** @const {number} */
VoxImplant.CallEvents.TransferComplete;
/** @const {number} */
VoxImplant.CallEvents.TransferFailed;
/** @const */
VoxImplant.EventTypes = {};
/**
 * @record
 * @struct
 */
VoxImplant.EventTypes.AuthResult = function() {};
 /** @type {number} */
VoxImplant.EventTypes.AuthResult.prototype.code;
 /** @type {string} */
VoxImplant.EventTypes.AuthResult.prototype.displayName;
 /** @type {string} */
VoxImplant.EventTypes.AuthResult.prototype.key;
 /** @type {!Object} */
VoxImplant.EventTypes.AuthResult.prototype.options;
 /** @type {boolean} */
VoxImplant.EventTypes.AuthResult.prototype.result;
/**
 * @record
 * @struct
 */
VoxImplant.EventTypes.ConnectionClosed = function() {};
/**
 * @record
 * @struct
 */
VoxImplant.EventTypes.ConnectionEstablished = function() {};
/**
 * @record
 * @struct
 */
VoxImplant.EventTypes.ConnectionFailed = function() {};
 /** @type {string} */
VoxImplant.EventTypes.ConnectionFailed.prototype.message;
/**
 * @record
 * @struct
 */
VoxImplant.EventTypes.IncomingCall = function() {};
 /** @type {!VoxImplant.Call} */
VoxImplant.EventTypes.IncomingCall.prototype.call;
 /** @type {!Object} */
VoxImplant.EventTypes.IncomingCall.prototype.headers;
/**
 * @record
 * @struct
 */
VoxImplant.EventTypes.MicAccessResult = function() {};
 /** @type {boolean} */
VoxImplant.EventTypes.MicAccessResult.prototype.result;
/**
 * @record
 * @struct
 */
VoxImplant.EventTypes.NetStatsReceived = function() {};
 /** @type {!VoxImplant.NetworkInfo} */
VoxImplant.EventTypes.NetStatsReceived.prototype.stats;
/**
 * @record
 * @struct
 */
VoxImplant.EventTypes.PlaybackFinished = function() {};
/**
 * @record
 * @struct
 */
VoxImplant.EventTypes.SDKReady = function() {};
 /** @type {string} */
VoxImplant.EventTypes.SDKReady.prototype.version;
/**
 * @record
 * @struct
 */
VoxImplant.EventTypes.SourcesInfoUpdated = function() {};
/** @const */
VoxImplant.CallEventTypes = {};
/**
 * @record
 * @struct
 */
VoxImplant.CallEventTypes.Connected = function() {};
 /** @type {!VoxImplant.Call} */
VoxImplant.CallEventTypes.Connected.prototype.call;
 /** @type {!Object} */
VoxImplant.CallEventTypes.Connected.prototype.headers;
/**
 * @record
 * @struct
 */
VoxImplant.CallEventTypes.Disconnected = function() {};
 /** @type {!VoxImplant.Call} */
VoxImplant.CallEventTypes.Disconnected.prototype.call;
 /** @type {!Object} */
VoxImplant.CallEventTypes.Disconnected.prototype.headers;
/**
 * @record
 * @struct
 */
VoxImplant.CallEventTypes.Failed = function() {};
 /** @type {!VoxImplant.Call} */
VoxImplant.CallEventTypes.Failed.prototype.call;
 /** @type {number} */
VoxImplant.CallEventTypes.Failed.prototype.code;
 /** @type {!Object} */
VoxImplant.CallEventTypes.Failed.prototype.headers;
 /** @type {string} */
VoxImplant.CallEventTypes.Failed.prototype.reason;
/**
 * @record
 * @struct
 */
VoxImplant.CallEventTypes.ICETimeout = function() {};
 /** @type {!VoxImplant.Call} */
VoxImplant.CallEventTypes.ICETimeout.prototype.call;
/**
 * @record
 * @struct
 */
VoxImplant.CallEventTypes.InfoReceived = function() {};
 /** @type {string} */
VoxImplant.CallEventTypes.InfoReceived.prototype.body;
 /** @type {!VoxImplant.Call} */
VoxImplant.CallEventTypes.InfoReceived.prototype.call;
 /** @type {!Object} */
VoxImplant.CallEventTypes.InfoReceived.prototype.headers;
 /** @type {string} */
VoxImplant.CallEventTypes.InfoReceived.prototype.mimeType;
/**
 * @record
 * @struct
 */
VoxImplant.CallEventTypes.MessageReceived = function() {};
 /** @type {!VoxImplant.Call} */
VoxImplant.CallEventTypes.MessageReceived.prototype.call;
 /** @type {string} */
VoxImplant.CallEventTypes.MessageReceived.prototype.text;
/**
 * @record
 * @struct
 */
VoxImplant.CallEventTypes.ProgressToneStart = function() {};
 /** @type {!VoxImplant.Call} */
VoxImplant.CallEventTypes.ProgressToneStart.prototype.call;
/**
 * @record
 * @struct
 */
VoxImplant.CallEventTypes.ProgressToneStop = function() {};
 /** @type {!VoxImplant.Call} */
VoxImplant.CallEventTypes.ProgressToneStop.prototype.call;
/**
 * @record
 * @struct
 */
VoxImplant.CallEventTypes.TransferComplete = function() {};
 /** @type {!VoxImplant.Call} */
VoxImplant.CallEventTypes.TransferComplete.prototype.call;
/**
 * @record
 * @struct
 */
VoxImplant.CallEventTypes.TransferFailed = function() {};
 /** @type {!VoxImplant.Call} */
VoxImplant.CallEventTypes.TransferFailed.prototype.call;
/** @const */
VoxImplant.IMEventTypes = {};
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatHistoryReceived = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.ChatHistoryReceived.prototype.id;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatHistoryReceived.prototype.message_id;
 /** @type {!Array<!VoxImplant.IMHistoryMessage>} */
VoxImplant.IMEventTypes.ChatHistoryReceived.prototype.messages;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatRoomBanList = function() {};
 /** @type {!Array<!VoxImplant.ChatRoomParticipant>} */
VoxImplant.IMEventTypes.ChatRoomBanList.prototype.participants;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomBanList.prototype.room;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatRoomCreated = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomCreated.prototype.room;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatRoomError = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomError.prototype.code;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomError.prototype.operation;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomError.prototype.room;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomError.prototype.text;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatRoomHistoryReceived = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomHistoryReceived.prototype.message_id;
 /** @type {!Array<!VoxImplant.IMHistoryMessage>} */
VoxImplant.IMEventTypes.ChatRoomHistoryReceived.prototype.messages;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomHistoryReceived.prototype.room;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatRoomInfo = function() {};
 /** @type {number} */
VoxImplant.IMEventTypes.ChatRoomInfo.prototype.features;
 /** @type {!VoxImplant.IMEventTypes.ChatRoomInfo} */
VoxImplant.IMEventTypes.ChatRoomInfo.prototype.info;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomInfo.prototype.room;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomInfo.prototype.room_name;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatRoomInvitation = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomInvitation.prototype.body;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomInvitation.prototype.from;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomInvitation.prototype.password;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomInvitation.prototype.reason;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomInvitation.prototype.room;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatRoomInviteDeclined = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomInviteDeclined.prototype.invitee;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomInviteDeclined.prototype.reason;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomInviteDeclined.prototype.room;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatRoomMessageModified = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageModified.prototype.content;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageModified.prototype.from;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageModified.prototype.message_id;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageModified.prototype.private_message;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageModified.prototype.resource;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageModified.prototype.room;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageModified.prototype.timestamp;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatRoomMessageNotModified = function() {};
 /** @type {number} */
VoxImplant.IMEventTypes.ChatRoomMessageNotModified.prototype.code;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageNotModified.prototype.message_id;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageNotModified.prototype.private_message;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageNotModified.prototype.room;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatRoomMessageReceived = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageReceived.prototype.content;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageReceived.prototype.from;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageReceived.prototype.message_id;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageReceived.prototype.private_message;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageReceived.prototype.resource;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageReceived.prototype.room;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageReceived.prototype.timestamp;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatRoomMessageRemoved = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageRemoved.prototype.from;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageRemoved.prototype.message_id;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageRemoved.prototype.private_message;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageRemoved.prototype.resource;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageRemoved.prototype.room;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomMessageRemoved.prototype.timestamp;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatRoomNewParticipant = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomNewParticipant.prototype.displayName;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomNewParticipant.prototype.participant;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomNewParticipant.prototype.room;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatRoomOperation = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomOperation.prototype.room;
 /** @type {VoxImplant.ChatRoomOperationType} */
VoxImplant.IMEventTypes.ChatRoomOperation.prototype.operation;
 /** @type {boolean} */
VoxImplant.IMEventTypes.ChatRoomOperation.prototype.result;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatRoomParticipantExit = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomParticipantExit.prototype.participant;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomParticipantExit.prototype.room;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatRoomParticipants = function() {};
 /** @type {!Array<!VoxImplant.ChatRoomParticipant>} */
VoxImplant.IMEventTypes.ChatRoomParticipants.prototype.participants;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomParticipants.prototype.room;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatRoomPresenceUpdate = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomPresenceUpdate.prototype.message;
 /** @type {!VoxImplant.ParticipantInfo} */
VoxImplant.IMEventTypes.ChatRoomPresenceUpdate.prototype.participant;
 /** @type {VoxImplant.UserStatuses} */
VoxImplant.IMEventTypes.ChatRoomPresenceUpdate.prototype.presence;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomPresenceUpdate.prototype.room;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatRoomStateUpdate = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomStateUpdate.prototype.from;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomStateUpdate.prototype.resource;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomStateUpdate.prototype.room;
 /** @type {VoxImplant.ChatStateType} */
VoxImplant.IMEventTypes.ChatRoomStateUpdate.prototype.state;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatRoomSubjectChange = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomSubjectChange.prototype.id;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomSubjectChange.prototype.resource;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomSubjectChange.prototype.room;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatRoomSubjectChange.prototype.subject;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatRoomsDataReceived = function() {};
 /** @type {!Array<!VoxImplant.ChatRoom>} */
VoxImplant.IMEventTypes.ChatRoomsDataReceived.prototype.rooms;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.ChatStateUpdate = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.ChatStateUpdate.prototype.id;
 /** @type {string} */
VoxImplant.IMEventTypes.ChatStateUpdate.prototype.resource;
 /** @type {VoxImplant.ChatStateType} */
VoxImplant.IMEventTypes.ChatStateUpdate.prototype.state;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.MessageModified = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.MessageModified.prototype.content;
 /** @type {string} */
VoxImplant.IMEventTypes.MessageModified.prototype.id;
 /** @type {string} */
VoxImplant.IMEventTypes.MessageModified.prototype.message_id;
 /** @type {string} */
VoxImplant.IMEventTypes.MessageModified.prototype.to;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.MessageNotModified = function() {};
 /** @type {number} */
VoxImplant.IMEventTypes.MessageNotModified.prototype.code;
 /** @type {string} */
VoxImplant.IMEventTypes.MessageNotModified.prototype.message_id;
 /** @type {string} */
VoxImplant.IMEventTypes.MessageNotModified.prototype.to;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.MessageReceived = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.MessageReceived.prototype.content;
 /** @type {string} */
VoxImplant.IMEventTypes.MessageReceived.prototype.id;
 /** @type {string} */
VoxImplant.IMEventTypes.MessageReceived.prototype.message_id;
 /** @type {string} */
VoxImplant.IMEventTypes.MessageReceived.prototype.resource;
 /** @type {string} */
VoxImplant.IMEventTypes.MessageReceived.prototype.to;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.MessageRemoved = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.MessageRemoved.prototype.id;
 /** @type {string} */
VoxImplant.IMEventTypes.MessageRemoved.prototype.message_id;
 /** @type {string} */
VoxImplant.IMEventTypes.MessageRemoved.prototype.to;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.MessageStatus = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.MessageStatus.prototype.id;
 /** @type {string} */
VoxImplant.IMEventTypes.MessageStatus.prototype.message_id;
 /** @type {string} */
VoxImplant.IMEventTypes.MessageStatus.prototype.resource;
 /** @type {VoxImplant.MessageEventType} */
VoxImplant.IMEventTypes.MessageStatus.prototype.type;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.PresenceUpdate = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.PresenceUpdate.prototype.id;
 /** @type {string} */
VoxImplant.IMEventTypes.PresenceUpdate.prototype.message;
 /** @type {VoxImplant.UserStatuses} */
VoxImplant.IMEventTypes.PresenceUpdate.prototype.presence;
 /** @type {string} */
VoxImplant.IMEventTypes.PresenceUpdate.prototype.resource;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.RosterItemChange = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.RosterItemChange.prototype.displayName;
 /** @type {!Array<string>} */
VoxImplant.IMEventTypes.RosterItemChange.prototype.groups;
 /** @type {string} */
VoxImplant.IMEventTypes.RosterItemChange.prototype.id;
 /** @type {string} */
VoxImplant.IMEventTypes.RosterItemChange.prototype.resource;
 /** @type {VoxImplant.RosterItemEvent} */
VoxImplant.IMEventTypes.RosterItemChange.prototype.type;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.RosterPresenceUpdate = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.RosterPresenceUpdate.prototype.id;
 /** @type {string} */
VoxImplant.IMEventTypes.RosterPresenceUpdate.prototype.message;
 /** @type {VoxImplant.UserStatuses} */
VoxImplant.IMEventTypes.RosterPresenceUpdate.prototype.presence;
 /** @type {string} */
VoxImplant.IMEventTypes.RosterPresenceUpdate.prototype.resource;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.RosterReceived = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.RosterReceived.prototype.id;
 /** @type {!Array<!VoxImplant.RosterItem>} */
VoxImplant.IMEventTypes.RosterReceived.prototype.roster;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.SubscriptionRequest = function() {};
 /** @type {string} */
VoxImplant.IMEventTypes.SubscriptionRequest.prototype.id;
 /** @type {string} */
VoxImplant.IMEventTypes.SubscriptionRequest.prototype.message;
 /** @type {string} */
VoxImplant.IMEventTypes.SubscriptionRequest.prototype.resource;
 /** @type {VoxImplant.SubscriptionRequestType} */
VoxImplant.IMEventTypes.SubscriptionRequest.prototype.type;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.SystemError = function() {};
 /** @type {!Object} */
VoxImplant.IMEventTypes.SystemError.prototype.errorData;
 /** @type {VoxImplant.IMErrorType} */
VoxImplant.IMEventTypes.SystemError.prototype.errorType;
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.UCConnected = function() {};
/**
 * @record
 * @struct
 */
VoxImplant.IMEventTypes.UCDisconnected = function() {};

/** @typedef {(!VoxImplant.EventTypes.AuthResult|!VoxImplant.EventTypes.ConnectionClosed|!VoxImplant.EventTypes.ConnectionEstablished|!VoxImplant.EventTypes.ConnectionFailed|!VoxImplant.EventTypes.IncomingCall|!VoxImplant.EventTypes.MicAccessResult|!VoxImplant.EventTypes.NetStatsReceived|!VoxImplant.EventTypes.PlaybackFinished|!VoxImplant.EventTypes.SDKReady|!VoxImplant.EventTypes.SourcesInfoUpdated)} */
VoxImplant.VoxImplantEvent;

/** @typedef {(!VoxImplant.CallEventTypes.Connected|!VoxImplant.CallEventTypes.Disconnected|!VoxImplant.CallEventTypes.Failed|!VoxImplant.CallEventTypes.InfoReceived|!VoxImplant.CallEventTypes.MessageReceived|!VoxImplant.CallEventTypes.ProgressToneStart|!VoxImplant.CallEventTypes.ProgressToneStop|!VoxImplant.CallEventTypes.TransferComplete|!VoxImplant.CallEventTypes.TransferFailed)} */
VoxImplant.VoxImplantCallEvent;

/** @typedef {(!VoxImplant.IMEventTypes.ChatRoomInfo|!VoxImplant.IMEventTypes.ChatHistoryReceived|!VoxImplant.IMEventTypes.ChatRoomBanList|!VoxImplant.IMEventTypes.ChatRoomCreated|!VoxImplant.IMEventTypes.ChatRoomError|!VoxImplant.IMEventTypes.ChatRoomHistoryReceived|!VoxImplant.IMEventTypes.ChatRoomInvitation|!VoxImplant.IMEventTypes.ChatRoomInviteDeclined|!VoxImplant.IMEventTypes.ChatRoomMessageModified|!VoxImplant.IMEventTypes.ChatRoomMessageNotModified|!VoxImplant.IMEventTypes.ChatRoomMessageReceived|!VoxImplant.IMEventTypes.ChatRoomMessageRemoved|!VoxImplant.IMEventTypes.ChatRoomNewParticipant|!VoxImplant.IMEventTypes.ChatRoomOperation|!VoxImplant.IMEventTypes.ChatRoomParticipantExit|!VoxImplant.IMEventTypes.ChatRoomParticipants|!VoxImplant.IMEventTypes.ChatRoomPresenceUpdate|!VoxImplant.IMEventTypes.ChatRoomStateUpdate|!VoxImplant.IMEventTypes.ChatRoomSubjectChange|!VoxImplant.IMEventTypes.ChatRoomsDataReceived|!VoxImplant.IMEventTypes.ChatStateUpdate|!VoxImplant.IMEventTypes.MessageModified|!VoxImplant.IMEventTypes.MessageNotModified|!VoxImplant.IMEventTypes.MessageReceived|!VoxImplant.IMEventTypes.MessageRemoved|!VoxImplant.IMEventTypes.MessageStatus|!VoxImplant.IMEventTypes.PresenceUpdate|!VoxImplant.IMEventTypes.RosterItemChange|!VoxImplant.IMEventTypes.RosterPresenceUpdate|!VoxImplant.IMEventTypes.RosterReceived|!VoxImplant.IMEventTypes.SubscriptionRequest|!VoxImplant.IMEventTypes.SystemError|!VoxImplant.IMEventTypes.UCConnected|!VoxImplant.IMEventTypes.UCDisconnected)} */
VoxImplant.VoxImplantIMEvent;
/**
 * @record
 * @struct
 */
VoxImplant.Config = function() {};
 /** @type {boolean} */
VoxImplant.Config.prototype.imXSSprotection;
 /** @type {boolean} */
VoxImplant.Config.prototype.micRequired;
 /** @type {boolean} */
VoxImplant.Config.prototype.progressTone;
 /** @type {string} */
VoxImplant.Config.prototype.progressToneCountry;
 /** @type {boolean} */
VoxImplant.Config.prototype.showDebugInfo;
 /** @type {boolean} */
VoxImplant.Config.prototype.showFlashSettings;
 /** @type {string} */
VoxImplant.Config.prototype.swfContainer;
 /** @type {boolean} */
VoxImplant.Config.prototype.useFlashOnly;
 /** @type {boolean} */
VoxImplant.Config.prototype.useRTCOnly;
 /** @type {(boolean|!VoxImplant.VideoSettings)} */
VoxImplant.Config.prototype.videoConstraints;
 /** @type {boolean} */
VoxImplant.Config.prototype.videoSupport;
/**
 * @record
 * @struct
 */
VoxImplant.LoginOptions = function() {};
 /** @type {boolean} */
VoxImplant.LoginOptions.prototype.receiveCalls;
 /** @type {boolean} */
VoxImplant.LoginOptions.prototype.serverPresenceControl;
/**
 * @record
 * @struct
 */
VoxImplant.AudioOutputInfo = function() {};
 /** @type {(string|number)} */
VoxImplant.AudioOutputInfo.prototype.id;
 /** @type {string} */
VoxImplant.AudioOutputInfo.prototype.name;
/**
 * @record
 * @struct
 */
VoxImplant.AudioSourceInfo = function() {};
 /** @type {(string|number)} */
VoxImplant.AudioSourceInfo.prototype.id;
 /** @type {string} */
VoxImplant.AudioSourceInfo.prototype.name;
/**
 * @record
 * @struct
 */
VoxImplant.VideoSourceInfo = function() {};
 /** @type {(string|number)} */
VoxImplant.VideoSourceInfo.prototype.id;
 /** @type {string} */
VoxImplant.VideoSourceInfo.prototype.name;

/** @const */
VoxImplant.ChatStateType = {};
/** @const {number} */
VoxImplant.ChatStateType.Active;
/** @const {number} */
VoxImplant.ChatStateType.Composing;
/** @const {number} */
VoxImplant.ChatStateType.Gone;
/** @const {number} */
VoxImplant.ChatStateType.Inactive;
/** @const {number} */
VoxImplant.ChatStateType.Invalid;
/** @const {number} */
VoxImplant.ChatStateType.Paused;

/** @const */
VoxImplant.IMErrorType = {};
/** @const {number} */
VoxImplant.IMErrorType.RemoteFunctionError;
/** @const {number} */
VoxImplant.IMErrorType.Error;
/** @const {number} */
VoxImplant.IMErrorType.RosterError;

/** @const */
VoxImplant.MessageEventType = {};
/** @const {number} */
VoxImplant.MessageEventType.Cancel;
/** @const {number} */
VoxImplant.MessageEventType.Composing;
/** @const {number} */
VoxImplant.MessageEventType.Delivered;
/** @const {number} */
VoxImplant.MessageEventType.Displayed;
/** @const {number} */
VoxImplant.MessageEventType.Invalid;
/** @const {number} */
VoxImplant.MessageEventType.Offline;

/** @const */
VoxImplant.OperatorACDStatuses = {};
/** @const {number} */
VoxImplant.OperatorACDStatuses.AfterService;
/** @const {number} */
VoxImplant.OperatorACDStatuses.DND;
/** @const {number} */
VoxImplant.OperatorACDStatuses.InService;
/** @const {number} */
VoxImplant.OperatorACDStatuses.Offline;
/** @const {number} */
VoxImplant.OperatorACDStatuses.Online;
/** @const {number} */
VoxImplant.OperatorACDStatuses.Ready;
/** @const {number} */
VoxImplant.OperatorACDStatuses.Timeout;

/** @const */
VoxImplant.RosterItemEvent = {};
/** @const {number} */
VoxImplant.RosterItemEvent.Added;
/** @const {number} */
VoxImplant.RosterItemEvent.Removed;
/** @const {number} */
VoxImplant.RosterItemEvent.Subscribed;
/** @const {number} */
VoxImplant.RosterItemEvent.Unsubscribed;
/** @const {number} */
VoxImplant.RosterItemEvent.Updated;

/** @const */
VoxImplant.SubscriptionRequestType = {};
/** @const {number} */
VoxImplant.SubscriptionRequestType.Subscribe;
/** @const {number} */
VoxImplant.SubscriptionRequestType.Unsubscribe;

/** @const */
VoxImplant.UserStatuses = {};
/** @const {number} */
VoxImplant.UserStatuses.Away;
/** @const {number} */
VoxImplant.UserStatuses.Chat;
/** @const {number} */
VoxImplant.UserStatuses.DND;
/** @const {number} */
VoxImplant.UserStatuses.Offline;
/** @const {number} */
VoxImplant.UserStatuses.Online;
/** @const {number} */
VoxImplant.UserStatuses.XA;

/** @const */
VoxImplant.ChatRoomOperationType = {};
/** @const {number} */
VoxImplant.ChatRoomOperationType.Ban;
/** @const {number} */
VoxImplant.ChatRoomOperationType.Unban;
/**
 * @record
 * @struct
 */
VoxImplant.ChatRoom = function() {};
 /** @type {string} */
VoxImplant.ChatRoom.prototype.id;
 /** @type {string} */
VoxImplant.ChatRoom.prototype.pass;
/**
 * @record
 * @struct
 */
VoxImplant.ChatRoomInfo = function() {};
 /** @type {string} */
VoxImplant.ChatRoomInfo.prototype.creationdate;
 /** @type {string} */
VoxImplant.ChatRoomInfo.prototype.description;
 /** @type {number} */
VoxImplant.ChatRoomInfo.prototype.occupants;
 /** @type {string} */
VoxImplant.ChatRoomInfo.prototype.subject;
/**
 * @record
 * @struct
 */
VoxImplant.ChatRoomParticipant = function() {};
 /** @type {string} */
VoxImplant.ChatRoomParticipant.prototype.id;
 /** @type {string} */
VoxImplant.ChatRoomParticipant.prototype.name;
 /** @type {boolean} */
VoxImplant.ChatRoomParticipant.prototype.owner;
/**
 * @record
 * @struct
 */
VoxImplant.IMHistoryMessage = function() {};
 /** @type {string} */
VoxImplant.IMHistoryMessage.prototype.body;
 /** @type {string} */
VoxImplant.IMHistoryMessage.prototype.from;
 /** @type {string} */
VoxImplant.IMHistoryMessage.prototype.id;
 /** @type {string} */
VoxImplant.IMHistoryMessage.prototype.time;
/**
 * @record
 * @struct
 */
VoxImplant.ParticipantInfo = function() {};
 /** @type {number} */
VoxImplant.ParticipantInfo.prototype.affiliation;
 /** @type {number} */
VoxImplant.ParticipantInfo.prototype.flags;
 /** @type {string} */
VoxImplant.ParticipantInfo.prototype.id;
 /** @type {string} */
VoxImplant.ParticipantInfo.prototype.reason;
 /** @type {string} */
VoxImplant.ParticipantInfo.prototype.resource;
 /** @type {number} */
VoxImplant.ParticipantInfo.prototype.role;
/**
 * @record
 * @struct
 */
VoxImplant.Client = function() {};

/**
 * 	Register handler for specified event
 * 
 * 	\@param eventName Event name
 * 	\@param eventHandler Handler function. A single parameter is passed - object with the event information
 * @param {(VoxImplant.Events|VoxImplant.IMEvents)} eventName
 * @param {function((!VoxImplant.IMEventTypes.ChatRoomInfo|!VoxImplant.EventTypes.AuthResult|!VoxImplant.EventTypes.ConnectionClosed|!VoxImplant.EventTypes.ConnectionEstablished|!VoxImplant.EventTypes.ConnectionFailed|!VoxImplant.EventTypes.IncomingCall|!VoxImplant.EventTypes.MicAccessResult|!VoxImplant.EventTypes.NetStatsReceived|!VoxImplant.EventTypes.PlaybackFinished|!VoxImplant.EventTypes.SDKReady|!VoxImplant.EventTypes.SourcesInfoUpdated|!VoxImplant.IMEventTypes.ChatHistoryReceived|!VoxImplant.IMEventTypes.ChatRoomBanList|!VoxImplant.IMEventTypes.ChatRoomCreated|!VoxImplant.IMEventTypes.ChatRoomError|!VoxImplant.IMEventTypes.ChatRoomHistoryReceived|!VoxImplant.IMEventTypes.ChatRoomInvitation|!VoxImplant.IMEventTypes.ChatRoomInviteDeclined|!VoxImplant.IMEventTypes.ChatRoomMessageModified|!VoxImplant.IMEventTypes.ChatRoomMessageNotModified|!VoxImplant.IMEventTypes.ChatRoomMessageReceived|!VoxImplant.IMEventTypes.ChatRoomMessageRemoved|!VoxImplant.IMEventTypes.ChatRoomNewParticipant|!VoxImplant.IMEventTypes.ChatRoomOperation|!VoxImplant.IMEventTypes.ChatRoomParticipantExit|!VoxImplant.IMEventTypes.ChatRoomParticipants|!VoxImplant.IMEventTypes.ChatRoomPresenceUpdate|!VoxImplant.IMEventTypes.ChatRoomStateUpdate|!VoxImplant.IMEventTypes.ChatRoomSubjectChange|!VoxImplant.IMEventTypes.ChatRoomsDataReceived|!VoxImplant.IMEventTypes.ChatStateUpdate|!VoxImplant.IMEventTypes.MessageModified|!VoxImplant.IMEventTypes.MessageNotModified|!VoxImplant.IMEventTypes.MessageReceived|!VoxImplant.IMEventTypes.MessageRemoved|!VoxImplant.IMEventTypes.MessageStatus|!VoxImplant.IMEventTypes.PresenceUpdate|!VoxImplant.IMEventTypes.RosterItemChange|!VoxImplant.IMEventTypes.RosterPresenceUpdate|!VoxImplant.IMEventTypes.RosterReceived|!VoxImplant.IMEventTypes.SubscriptionRequest|!VoxImplant.IMEventTypes.SystemError|!VoxImplant.IMEventTypes.UCConnected|!VoxImplant.IMEventTypes.UCDisconnected)): ?} eventHandler
 * @return {void}
 */
VoxImplant.Client.prototype.addEventListener = function(eventName, eventHandler) {};

/**
 * 	Add roster item (IM)
 * 
 * 	\@param user_id User id
 * 	\@param name Display name
 * 	\@param group User group
 * @param {string} user_id
 * @param {string} name
 * @param {string=} group
 * @return {void}
 */
VoxImplant.Client.prototype.addRosterItem = function(user_id, name, group) {};

/**
 * 	Add roster item group (IM)
 * 
 * 	\@param user_id User id
 * 	\@param group Group name
 * @param {string} user_id
 * @param {string} group
 * @return {void}
 */
VoxImplant.Client.prototype.addRosterItemGroup = function(user_id, group) {};

/**
 * 	Enable microphone/camera if micRequired in VoxImplant.Config was set to false (WebRTC mode only)
 * 
 * 	\@param successCallback A function called in case of successful audio recording device change
 * 	\@param failedCallback A function called in case of problems while changing audio recording device
 * @param {function(): ?=} successCallback
 * @param {function(): ?=} failedCallback
 * @return {void}
 */
VoxImplant.Client.prototype.attachRecordingDevice = function(successCallback, failedCallback) {};

/**
 * 	Get a list of all currently available audio playback devices
 * @return {!Array<!VoxImplant.AudioOutputInfo>}
 */
VoxImplant.Client.prototype.audioOutputs = function() {};

/**
 * 	Get a list of all currently available audio sources / microphones
 * @return {!Array<!VoxImplant.AudioSourceInfo>}
 */
VoxImplant.Client.prototype.audioSources = function() {};

/**
 * 	Ban user from the chat room
 * 
 * 	\@param room Room id
 * 	\@param user_id User id
 * 	\@param reason Ban reason
 * @param {string} room
 * @param {string} user_id
 * @param {string=} reason
 * @return {void}
 */
VoxImplant.Client.prototype.banChatRoomUser = function(room, user_id, reason) {};

/**
 * 	Create call
 * 
 * 	\@param number The number to call
 * 	\@param useVideo Tells if video should be supported for the call
 * 	\@param customData Custom string associated with the call session. It can be later obtained from Call History using HTTP API
 * 	\@param extraHeaders Optional custom parameters (SIP headers) that should be passed with call (INVITE) message. Parameter names must start with "X-" to be processed by application. IMPORTANT: Headers size limit is 200 bytes
 * @param {string} number
 * @param {boolean=} useVideo
 * @param {string=} customData
 * @param {!Object=} extraHeaders
 * @return {!VoxImplant.Call}
 */
VoxImplant.Client.prototype.call = function(number, useVideo, customData, extraHeaders) {};

/**
 * 	Get current config
 * @return {!VoxImplant.Config}
 */
VoxImplant.Client.prototype.config = function() {};

/**
 * 	Connect to VoxImplant Cloud
 * @return {void}
 */
VoxImplant.Client.prototype.connect = function() {};

/**
 * 	Check if connected to VoxImplant Cloud
 * @return {boolean}
 */
VoxImplant.Client.prototype.connected = function() {};

/**
 * 	Create multi-user chat room and join it
 * 
 * 	\@param pass Password for room access
 * 	\@param users User ids of the invited users to the chat room
 * @param {string=} pass
 * @param {!Array<string>=} users
 * @return {string}
 */
VoxImplant.Client.prototype.createChatRoom = function(pass, users) {};

/**
 * 	Decline invitation to join chat room
 * 
 * 	\@param room Room id
 * 	\@param user_id User id (inviter)
 * 	\@param reason User-supplied decline reason
 * @param {string} room
 * @param {string} user_id
 * @param {string=} reason
 * @return {void}
 */
VoxImplant.Client.prototype.declineChatRoomInvite = function(room, user_id, reason) {};

/**
 * 	Disable microphone/camera if micRequired in VoxImplant.Config was set to false (WebRTC mode only)
 * @return {void}
 */
VoxImplant.Client.prototype.detachRecordingDevice = function() {};

/**
 * 	Disconnect from VoxImplant Cloud
 * @return {void}
 */
VoxImplant.Client.prototype.disconnect = function() {};

/**
 * 	Edit message in the chat room
 * 
 * 	\@param room Room id
 * 	\@param message_id Message id
 * 	\@param msg New message content
 * @param {string} room
 * @param {string} message_id
 * @param {string} msg
 * @return {void}
 */
VoxImplant.Client.prototype.editChatRoomMessage = function(room, message_id, msg) {};

/**
 * 	Edit message sent to user
 * 
 * 	\@param room Room id
 * 	\@param message_id Message id
 * 	\@param msg New message content
 * @param {string} room
 * @param {string} message_id
 * @param {string} msg
 * @return {void}
 */
VoxImplant.Client.prototype.editInstantMessage = function(room, message_id, msg) {};

/**
 * 	Get chat room history
 * 
 * 	\@param room Room id
 * 	\@param message_id Message id (to get messages sent before/after the message)
 * 	\@param direction False/true to get messages older/newer than the message with specified id
 * 	\@param count Number of messages
 * @param {string} room
 * @param {string=} message_id
 * @param {boolean=} direction
 * @param {number=} count
 * @return {void}
 */
VoxImplant.Client.prototype.getChatRoomHistory = function(room, message_id, direction, count) {};

/**
 * 	Get messages in a conversation with particular use
 * 
 * 	\@param user_id User id
 * 	\@param message_id Message id (to get messages sent before/after the message)
 * 	\@param direction False/true to get messages older/newer than the message with specified id
 * 	\@param count Number of messages
 * @param {string} user_id
 * @param {string=} message_id
 * @param {boolean=} direction
 * @param {number=} count
 * @return {void}
 */
VoxImplant.Client.prototype.getInstantMessagingHistory = function(user_id, message_id, direction, count) {};

/**
 * 	Initialize SDK. SDKReady event will be dispatched after succesful SDK initialization. SDK can't be used until it's initialized
 * 
 * 	\@param config Client configuration options
 * @param {!VoxImplant.Config=} config
 * @return {void}
 */
VoxImplant.Client.prototype.init = function(config) {};

/**
 * 	Invite user to join chat room
 * 
 * 	\@param room Room id
 * 	\@param user_id User id (invitee)
 * 	\@param reason User-supplied reason for the invitation
 * @param {string} room
 * @param {string} user_id
 * @param {string=} reason
 * @return {void}
 */
VoxImplant.Client.prototype.inviteToChatRoom = function(room, user_id, reason) {};

/**
 * 	Check if WebRTC support is available
 * @return {boolean}
 */
VoxImplant.Client.prototype.isRTCsupported = function() {};

/**
 * 	Join multi-user chat room
 * 
 * 	\@param room Room id
 * 	\@param pass Password for room access
 * @param {string} room
 * @param {string=} pass
 * @return {void}
 */
VoxImplant.Client.prototype.joinChatRoom = function(room, pass) {};

/**
 * 	Leave multi-user chat room
 * 
 * 	\@param room Room id
 * 	\@param msg Message for other participants
 * @param {string} room
 * @param {string=} msg
 * @return {void}
 */
VoxImplant.Client.prototype.leaveChatRoom = function(room, msg) {};

/**
 * 	Login into application
 * 
 * 	\@param username
 * 	\@param password
 * 	\@param options Login options
 * @param {string} username
 * @param {string} password
 * @param {!VoxImplant.LoginOptions=} options
 * @return {void}
 */
VoxImplant.Client.prototype.login = function(username, password, options) {};

/**
 * 	Login into application using 'code' auth method
 * 
 * 	\@param username
 * 	\@param code
 * 	\@param options Login options
 * @param {string} username
 * @param {string} code
 * @param {!VoxImplant.LoginOptions=} options
 * @return {void}
 */
VoxImplant.Client.prototype.loginWithCode = function(username, code, options) {};

/**
 * 	Login into application using 'onetimekey' auth method
 * 
 * 	\@param username
 * 	\@param hash
 * 	\@param options Login options
 * @param {string} username
 * @param {string} hash
 * @param {!VoxImplant.LoginOptions=} options
 * @return {void}
 */
VoxImplant.Client.prototype.loginWithOneTimeKey = function(username, hash, options) {};

/**
 * 	Move roster item group (IM)
 * 
 * 	\@param user_id User id
 * 	\@param groupSrc Group name (source)
 * 	\@param groupDst Group name (destination)
 * @param {string} user_id
 * @param {string} groupSrc
 * @param {string} groupDst
 * @return {void}
 */
VoxImplant.Client.prototype.moveRosterItemGroup = function(user_id, groupSrc, groupDst) {};

/**
 * 	Play ToneScript using WebAudio API
 * 
 * 	\@param script Tonescript string
 * 	\@param loop Loop playback if true
 * @param {string} script
 * @param {boolean=} loop
 * @return {void}
 */
VoxImplant.Client.prototype.playToneScript = function(script, loop) {};

/**
 * 	Remove message in the chat room
 * 
 * 	\@param room Room id
 * 	\@param message_id Message id
 * @param {string} room
 * @param {string} message_id
 * @return {void}
 */
VoxImplant.Client.prototype.removeChatRoomMessage = function(room, message_id) {};

/**
 * 	Remove user from the chat room
 * 
 * 	\@param room Room id
 * 	\@param user_id User id
 * 	\@param reason Reason
 * @param {string} room
 * @param {string} user_id
 * @param {string=} reason
 * @return {void}
 */
VoxImplant.Client.prototype.removeChatRoomUser = function(room, user_id, reason) {};

/**
 * 	Remove handler for specified event
 * 
 * 	\@param eventName Event name
 * 	\@param eventHandler Handler function
 * @param {(VoxImplant.Events|VoxImplant.IMEvents)} eventName
 * @param {function(): ?} eventHandler
 * @return {void}
 */
VoxImplant.Client.prototype.removeEventListener = function(eventName, eventHandler) {};

/**
 * 	Remove message sent to user
 * 
 * 	\@param user_id User id
 * 	\@param message_id Message id
 * @param {string} user_id
 * @param {string} message_id
 * @return {void}
 */
VoxImplant.Client.prototype.removeInstantMessage = function(user_id, message_id) {};

/**
 * 	Remove roster item (IM)
 * 
 * 	\@param user_id User id
 * @param {string} user_id
 * @return {void}
 */
VoxImplant.Client.prototype.removeRosterItem = function(user_id) {};

/**
 * 	Remove roster item group (IM)
 * 
 * 	\@param user_id User id
 * 	\@param group Group name
 * @param {string} user_id
 * @param {string} group
 * @return {void}
 */
VoxImplant.Client.prototype.remoteRosterItemGroup = function(user_id, group) {};

/**
 * 	Rename roster item (IM)
 * 
 * 	\@param user_id User id
 * 	\@param name New display name
 * @param {string} user_id
 * @param {string} name
 * @return {void}
 */
VoxImplant.Client.prototype.renameRosterItem = function(user_id, name) {};

/**
 * 	Request a key for 'onetimekey' auth method. Server will send the key in AuthResult event with code 302
 * 
 * 	\@param username
 * @param {string} username
 * @return {void}
 */
VoxImplant.Client.prototype.requestOneTimeLoginKey = function(username) {};

/**
 * 	Send message to chat room
 * 
 * 	\@param room Room id
 * 	\@param msg Message for other participants
 * @param {string} room
 * @param {string} msg
 * @return {string}
 */
VoxImplant.Client.prototype.sendChatRoomMessage = function(room, msg) {};

/**
 * 	Send message to user (IM)
 * 
 * 	\@param user_id User id
 * 	\@param content Message content
 * @param {string} user_id
 * @param {string} content
 * @return {string}
 */
VoxImplant.Client.prototype.sendInstantMessage = function(user_id, content) {};

/**
 * 	Start/stop sending local video to remote party/parties
 * 
 * 	\@param flag Start/stop - true/false
 * @param {boolean} flag
 * @return {void}
 */
VoxImplant.Client.prototype.sendVideo = function(flag) {};

/**
 * 	Set active call
 * 
 * 	\@param call VoxImplant call instance
 * 	\@param active If true make call active, otherwise make call inactive
 * @param {!VoxImplant.Call} call
 * @param {boolean} active
 * @return {void}
 */
VoxImplant.Client.prototype.setCallActive = function(call, active) {};

/**
 * 	Set chat room session state info
 * 
 * 	\@param room Room id
 * 	\@param status Chat session status
 * @param {string} room
 * @param {VoxImplant.ChatStateType} status
 * @return {void}
 */
VoxImplant.Client.prototype.setChatRoomState = function(room, status) {};

/**
 * 	Set new chat room subject
 * 
 * 	\@param room Room id
 * 	\@param subject New subject
 * @param {string} room
 * @param {string} subject
 * @return {void}
 */
VoxImplant.Client.prototype.setChatRoomSubject = function(room, subject) {};

/**
 * 	Set chat session state info
 * 
 * 	\@param user_id User id
 * 	\@param status Chat session status. See VoxImplant.ChatStateType enum
 * @param {string} user_id
 * @param {VoxImplant.ChatStateType} status
 * @return {void}
 */
VoxImplant.Client.prototype.setChatState = function(user_id, status) {};

/**
 * 	Set local video position
 * 
 * 	\@param x Horizontal position (px)
 * 	\@param y Vertical position (px)
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
VoxImplant.Client.prototype.setLocalVideoPosition = function(x, y) {};

/**
 * 	Set local video size
 * 
 * 	\@param width Width in pixels
 * 	\@param height Height in pixels
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
VoxImplant.Client.prototype.setLocalVideoSize = function(width, height) {};

/**
 * 	Set local video size
 * 
 * 	\@param user_id User id
 * 	\@param type Message event type: VoxImplant.MessageEventType.Delivered or VoxImplant.MessageEventType.Displayed. See VoxImplant.MessageEventType enum
 * 	\@param message_id Message id(s)
 * @param {string} user_id
 * @param {VoxImplant.MessageEventType} type
 * @param {!Array<string>} message_id
 * @return {void}
 */
VoxImplant.Client.prototype.setMessageStatus = function(user_id, type, message_id) {};

/**
 * 	Set ACD status
 * 
 * 	\@param status Presence status string, see VoxImplant.OperatorACDStatuses
 * @param {VoxImplant.OperatorACDStatuses} status
 * @return {void}
 */
VoxImplant.Client.prototype.setOperatorACDStatus = function(status) {};

/**
 * 	Set presence
 * 
 * 	\@param status Presence status from VoxImplant.UserStatuses
 * 	\@param msg Presence text message
 * @param {VoxImplant.UserStatuses} status
 * @param {string} msg
 * @return {void}
 */
VoxImplant.Client.prototype.setPresenceStatus = function(status, msg) {};

/**
 * 	Set background color of flash app (only for Flash mode)
 * 
 * 	\@param color Color in web format (i.e. #000000 for black)
 * @param {string} color
 * @return {void}
 */
VoxImplant.Client.prototype.setSwfColor = function(color) {};

/**
 * 	Set bandwidth limit for video calls. Currently supported by Chrome/Chromium. The limit will be applied for the next call. (WebRTC mode only)
 * 
 * 	\@param bandwidth Bandwidth limit in kilobits per second (kbps)
 * @param {number} bandwidth
 * @return {void}
 */
VoxImplant.Client.prototype.setVideoBandwidth = function(bandwidth) {};

/**
 * 	Set video settings globally. This settings will be used for the next call.
 * 
 * 	\@param settings Video settings
 * 	\@param successCallback Success callback function
 * 	\@param failedCallback Failed callback function
 * @param {(!VoxImplant.VideoSettings|!VoxImplant.FlashVideoSettings)} settings
 * @param {function(): ?=} successCallback
 * @param {function(): ?=} failedCallback
 * @return {void}
 */
VoxImplant.Client.prototype.setVideoSettings = function(settings, successCallback, failedCallback) {};

/**
 * 	Show flash settings panel
 * 
 * 	\@param panel Settings type - default/microphone/camera/etc as described in SecurityPanel class
 * @param {string=} panel
 * @return {void}
 */
VoxImplant.Client.prototype.showFlashSettingsPanel = function(panel) {};

/**
 * 	Show/hide local video
 * 
 * 	\@param flag Show/hide - true/false
 * @param {boolean} flag
 * @return {void}
 */
VoxImplant.Client.prototype.showLocalVideo = function(flag) {};

/**
 * 	Stop playing ToneScript using WebAudio API
 * @return {void}
 */
VoxImplant.Client.prototype.stopPlayback = function() {};

/**
 * 	Transfer call, depending on the result VoxImplant.CallEvents.TransferComplete or VoxImplant.CallEvents.TransferFailed event will be dispatched
 * 
 * 	\@param call1 Call which will be transferred
 * 	\@param call2 Call where call1 will be transferred
 * @param {!VoxImplant.Call} call1
 * @param {!VoxImplant.Call} call2
 * @return {void}
 */
VoxImplant.Client.prototype.transferCall = function(call1, call2) {};

/**
 * 	Remove a ban on a user in the chat room
 * 
 * 	\@param room Room id
 * 	\@param user_id User id
 * 	\@param reason Reason
 * @param {string} room
 * @param {string} user_id
 * @param {string=} reason
 * @return {void}
 */
VoxImplant.Client.prototype.unbanChatRoomUser = function(room, user_id, reason) {};

/**
 * 	Use specified audio source , use audioSources to get the list of available audio sources
 * 
 * 	\@param id Id of the audio source
 * 	\@param successCallback Called in WebRTC mode if audio source changed successfully
 * 	\@param failedCallback Called in WebRTC mode if audio source couldn't be changed successfully
 * @param {(string|number)} id
 * @param {function(): ?=} successCallback
 * @param {function(): ?=} failedCallback
 * @return {void}
 */
VoxImplant.Client.prototype.useAudioSource = function(id, successCallback, failedCallback) {};

/**
 * 	Use specified audio source , use audioSources to get the list of available audio sources
 * 
 * 	\@param id Id of the video source
 * 	\@param successCallback Called in WebRTC mode if video source changed successfully
 * 	\@param failedCallback Called in WebRTC mode if video source couldn't be changed successfully
 * @param {(string|number)} id
 * @param {function(): ?=} successCallback
 * @param {function(): ?=} failedCallback
 * @return {void}
 */
VoxImplant.Client.prototype.useVideoSource = function(id, successCallback, failedCallback) {};

/**
 * 	Get a list of all currently available video sources / cameras
 * @return {!Array<!VoxImplant.VideoSourceInfo>}
 */
VoxImplant.Client.prototype.videoSources = function() {};
/**
 * @record
 * @struct
 */
VoxImplant.Call = function() {};

/**
 * 	Returns information about the call's media state (active/inactive)
 * @return {boolean}
 */
VoxImplant.Call.prototype.active = function() {};

/**
 * 	Register handler for specified event
 * 
 * 	\@param eventName Event name
 * 	\@param eventHandler Handler function. A single parameter is passed - object with the event information
 * @param {VoxImplant.CallEvents} eventName
 * @param {function((!VoxImplant.CallEventTypes.Connected|!VoxImplant.CallEventTypes.Disconnected|!VoxImplant.CallEventTypes.Failed|!VoxImplant.CallEventTypes.InfoReceived|!VoxImplant.CallEventTypes.MessageReceived|!VoxImplant.CallEventTypes.ProgressToneStart|!VoxImplant.CallEventTypes.ProgressToneStop|!VoxImplant.CallEventTypes.TransferComplete|!VoxImplant.CallEventTypes.TransferFailed)): ?} eventHandler
 * @return {void}
 */
VoxImplant.Call.prototype.addEventListener = function(eventName, eventHandler) {};

/**
 * 	Answer on incoming call
 * 
 * 	\@param customData Set custom string associated with call session. It can be later obtained from Call History using HTTP API
 * 	\@param extraHeaders Optional custom parameters (SIP headers) that should be sent after accepting incoming call. Parameter names must start with "X-" to be processed by application
 * @param {string=} customData
 * @param {!Object=} extraHeaders
 * @return {void}
 */
VoxImplant.Call.prototype.answer = function(customData, extraHeaders) {};

/**
 * 	Reject incoming call
 * 
 * 	\@param extraHeaders Optional custom parameters (SIP headers) that should be sent after accepting incoming call. Parameter names must start with "X-" to be processed by application
 * @param {!Object=} extraHeaders
 * @return {void}
 */
VoxImplant.Call.prototype.decline = function(extraHeaders) {};

/**
 * 	Returns display name
 * @return {string}
 */
VoxImplant.Call.prototype.displayName = function() {};

/**
 * 	Returns HTML video element's id for the call (WebRTC mode)
 * @return {string}
 */
VoxImplant.Call.prototype.getVideoElementId = function() {};

/**
 * 	Hangup call
 * 
 * 	\@param extraHeaders Optional custom parameters (SIP headers) that should be sent after disconnecting/cancelling call. Parameter names must start with "X-" to be processed by application
 * @param {!Object=} extraHeaders
 * @return {void}
 */
VoxImplant.Call.prototype.hangup = function(extraHeaders) {};

/**
 * 	Returns headers object
 * @return {!Object}
 */
VoxImplant.Call.prototype.headers = function() {};

/**
 * 	Returns call id
 * @return {string}
 */
VoxImplant.Call.prototype.id = function() {};

/**
 * 	Mute microphone
 * @return {void}
 */
VoxImplant.Call.prototype.muteMicrophone = function() {};

/**
 * 	Mute sound
 * @return {void}
 */
VoxImplant.Call.prototype.mutePlayback = function() {};

/**
 * 	Returns dialed number or caller id
 * @return {string}
 */
VoxImplant.Call.prototype.number = function() {};

/**
 * 	Reject incoming call
 * 
 * 	\@param extraHeaders Optional custom parameters (SIP headers) that should be sent after disconnecting/cancelling call. Parameter names must start with "X-" to be processed by application
 * @param {!Object=} extraHeaders
 * @return {void}
 */
VoxImplant.Call.prototype.reject = function(extraHeaders) {};

/**
 * 	Remove handler for specified event
 * 
 * 	\@param eventName Event name
 * 	\@param eventHandler Handler function
 * @param {VoxImplant.CallEvents} eventName
 * @param {function(): ?} eventHandler
 * @return {void}
 */
VoxImplant.Call.prototype.removeEventListener = function(eventName, eventHandler) {};

/**
 * 	Send Info (SIP INFO) message inside the call
 * 
 * 	\@param mimeType MIME type of the message
 * 	\@param body Message content
 * 	\@param extraHeaders Optional headers to be passed with the message
 * @param {string} mimeType
 * @param {string} body
 * @param {!Object=} extraHeaders
 * @return {void}
 */
VoxImplant.Call.prototype.sendInfo = function(mimeType, body, extraHeaders) {};

/**
 * 	Send text message
 * 
 * 	\@param msg Message text
 * @param {string} msg
 * @return {void}
 */
VoxImplant.Call.prototype.sendMessage = function(msg) {};

/**
 * 	Send tone (DTMF)
 * 
 * 	\@param key Send tone according to pressed key: 0-9 , * , #
 * @param {string} key
 * @return {void}
 */
VoxImplant.Call.prototype.sendTone = function(key) {};

/**
 * 	Set remote video position
 * 
 * 	\@param x Horizontal position (px)
 * 	\@param y Vertical position (px)
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
VoxImplant.Call.prototype.setRemoteVideoPosition = function(x, y) {};

/**
 * 	Set remote video size
 * 
 * 	\@param width Width in pixels
 * 	\@param height Height in pixels
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
VoxImplant.Call.prototype.setRemoteVideoSize = function(width, height) {};

/**
 * 	Set video settings
 * 
 * 	\@param settings Video settings for current call
 * 	\@param successCallback Called in WebRTC mode if video settings were applied successfully
 * 	\@param failedCallback Called in WebRTC mode if video settings couldn't be applied
 * @param {(!VoxImplant.VideoSettings|!VoxImplant.FlashVideoSettings)} settings
 * @param {function(): ?=} successCallback
 * @param {function(): ?=} failedCallback
 * @return {void}
 */
VoxImplant.Call.prototype.setVideoSettings = function(settings, successCallback, failedCallback) {};

/**
 * 	Show/hide remote party video
 * 
 * 	\@param flag Show/hide - true/false
 * @param {boolean} flag
 * @return {void}
 */
VoxImplant.Call.prototype.showRemoteVideo = function(flag) {};

/**
 * 	Get call's current state
 * @return {string}
 */
VoxImplant.Call.prototype.state = function() {};

/**
 * 	Unmute microphone
 * @return {void}
 */
VoxImplant.Call.prototype.unmuteMicrophone = function() {};

/**
 * 	Unmute sound
 * @return {void}
 */
VoxImplant.Call.prototype.unmutePlayback = function() {};
/**
 * @record
 * @struct
 */
VoxImplant.VideoSettings = function() {};
 /** @type {?} */
VoxImplant.VideoSettings.prototype.width;
 /** @type {?} */
VoxImplant.VideoSettings.prototype.height;
 /** @type {?} */
VoxImplant.VideoSettings.prototype.aspectRatio;
 /** @type {?} */
VoxImplant.VideoSettings.prototype.frameRate;
 /** @type {?} */
VoxImplant.VideoSettings.prototype.facingMode;
 /** @type {string} */
VoxImplant.VideoSettings.prototype.deviceId;
 /** @type {string} */
VoxImplant.VideoSettings.prototype.groupId;
 /** @type {!Object} */
VoxImplant.VideoSettings.prototype.mandatory;
 /** @type {!Object} */
VoxImplant.VideoSettings.prototype.optional;
/**
 * @record
 * @struct
 */
VoxImplant.FlashVideoSettings = function() {};
 /** @type {number} */
VoxImplant.FlashVideoSettings.prototype.bandwidth;
 /** @type {number} */
VoxImplant.FlashVideoSettings.prototype.fps;
 /** @type {number} */
VoxImplant.FlashVideoSettings.prototype.height;
 /** @type {number} */
VoxImplant.FlashVideoSettings.prototype.width;
 /** @type {number} */
VoxImplant.FlashVideoSettings.prototype.keyframeInterval;
 /** @type {string} */
VoxImplant.FlashVideoSettings.prototype.level;
 /** @type {string} */
VoxImplant.FlashVideoSettings.prototype.profile;
 /** @type {number} */
VoxImplant.FlashVideoSettings.prototype.quality;
/**
 * @record
 * @struct
 */
VoxImplant.NetworkInfo = function() {};
 /** @type {number} */
VoxImplant.NetworkInfo.prototype.packetLoss;
/**
 * @record
 * @struct
 */
VoxImplant.RosterItem = function() {};
 /** @type {!Array<string>} */
VoxImplant.RosterItem.prototype.groups;
 /** @type {string} */
VoxImplant.RosterItem.prototype.id;
 /** @type {string} */
VoxImplant.RosterItem.prototype.name;
 /** @type {!Array<string>} */
VoxImplant.RosterItem.prototype.resources;
 /** @type {number} */
VoxImplant.RosterItem.prototype.subscription_type;

/**
 * 	Get Client instance to use platform functions
 * @return {!VoxImplant.Client}
 */
VoxImplant.getInstance = function() {};

/**
 * 	VoxImplant Web SDK lib version
 * @return {!String}
 */
VoxImplant.version = function() {};
