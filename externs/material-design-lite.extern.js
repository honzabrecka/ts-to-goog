/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/material-design-lite/index.d.ts:
/** @const */
var MaterialDesignLite = {};
/**
 * @record
 * @struct
 */
MaterialDesignLite.ComponentHandler = function() {};

/**
 * Searches existing DOM for elements of our component type and upgrades them
 * if they have not already been upgraded.
 * Searches existing DOM for elements of our component type and upgrades them
 * if they have not already been upgraded.
 * 
 * need to create a new instance of.
 * Searches existing DOM for elements of our component type and upgrades them
 * if they have not already been upgraded.
 * 
 * need to create a new instance of.
 * type will have.
 * @param {string=} jsClass
 * @param {string=} cssClass
 * @return {void}
 */
MaterialDesignLite.ComponentHandler.prototype.upgradeDom = function(jsClass, cssClass) {};

/**
 * Upgrades a specific element rather than all in the DOM.
 * 
 * Upgrades a specific element rather than all in the DOM.
 * 
 * the element to.
 * @param {!HTMLElement} element
 * @param {string=} jsClass
 * @return {void}
 */
MaterialDesignLite.ComponentHandler.prototype.upgradeElement = function(element, jsClass) {};

/**
 * Upgrades a specific list of elements rather than all in the DOM.
 * 
 * The elements we wish to upgrade.
 * Upgrades a specific list of elements rather than all in the DOM.
 * 
 * The elements we wish to upgrade.
 * Upgrades a specific list of elements rather than all in the DOM.
 * 
 * The elements we wish to upgrade.
 * Upgrades a specific list of elements rather than all in the DOM.
 * 
 * The elements we wish to upgrade.
 * @param {!HTMLElement|!Array<!HTMLElement>|!NodeList|!HTMLCollection} elements
 * @return {void}
 */
MaterialDesignLite.ComponentHandler.prototype.upgradeElements = function(elements) {};

/**
 * Upgrades all registered components found in the current DOM. This is
 * automatically called on window load.
 * @return {void}
 */
MaterialDesignLite.ComponentHandler.prototype.upgradeAllRegistered = function() {};

/**
 * Allows user to be alerted to any upgrades that are performed for a given
 * component type
 * 
 * to hook into for any upgrades performed.
 * upgrade. This function should expect 1 parameter - the HTMLElement which
 * got upgraded.
 * @param {string} jsClass
 * @param {function(!HTMLElement): ?} callback
 * @return {void}
 */
MaterialDesignLite.ComponentHandler.prototype.registerUpgradedCallback = function(jsClass, callback) {};

/**
 * Registers a class for future use and attempts to upgrade existing DOM.
 * 
 * @param {!MaterialDesignLite.ComponentConfigPublic} config
 * @return {void}
 */
MaterialDesignLite.ComponentHandler.prototype.register = function(config) {};

/**
 * Downgrade either a given node, an array of nodes, or a NodeList.
 * 
 * Downgrade either a given node, an array of nodes, or a NodeList.
 * 
 * Downgrade either a given node, an array of nodes, or a NodeList.
 * 
 * @param {!Node|!Array<!Node>|!NodeList} nodes
 * @return {void}
 */
MaterialDesignLite.ComponentHandler.prototype.downgradeElements = function(nodes) {};
/**
 * @record
 * @struct
 */
MaterialDesignLite.ComponentConfigPublic = function() {};
 /** @type {string} */
MaterialDesignLite.ComponentConfigPublic.prototype.classAsString;
 /** @type {string} */
MaterialDesignLite.ComponentConfigPublic.prototype.cssClass;
 /** @type {(string|boolean)} */
MaterialDesignLite.ComponentConfigPublic.prototype.widget;

/**
 * @param {!HTMLElement} element
 * @return {void}
 */
MaterialDesignLite.ComponentConfigPublic.prototype.constructor = function(element) {};
 /** @type {!MaterialDesignLite.ComponentHandler} */
var componentHandler;
