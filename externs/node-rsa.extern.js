/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/node-rsa/index.d.ts:

/**
 * @constructor
 * @struct
 * Generate new key with length specified.
 * Load key from string/buffer/components.
 * @param {!NodeRSA.KeyBits|(string|?|!NodeRSA.KeyComponents)=} key
 * @param {string=} format
 * @param {!NodeRSA.Options=} options
 */
function NodeRSA(key, format, options) {}

/**
 * @param {number=} bits Key size in bits. 2048 by default.
 * @param {number=} exponent public exponent. 65537 by default.
 * @return {void}
 */
NodeRSA.prototype.generateKeyPair = function(bits, exponent) {};

/**
 * Import key from PEM string, PEM/DER Buffer or components.
 * @param {(string|?|!NodeRSA.KeyComponents)} key
 * @param {string=} format
 * @return {void}
 */
NodeRSA.prototype.importKey = function(key, format) {};

/**
 * Export key to PEM string, PEM/DER Buffer or components.
 * @param {string=} format
 * @return {(string|?|!NodeRSA.KeyComponents)}
 */
NodeRSA.prototype.exportKey = function(format) {};

/**
 * @return {boolean}
 */
NodeRSA.prototype.isPrivate = function() {};

/**
 * @param {boolean=} strict if true method will return false if key pair have private exponent. Default false.
 * @return {boolean}
 */
NodeRSA.prototype.isPublic = function(strict) {};

/**
 * Return true if key pair doesn't have any data.
 * @return {boolean}
 */
NodeRSA.prototype.isEmpty = function() {};

/**
 * Return key size in bits.
 * @return {number}
 */
NodeRSA.prototype.getKeySize = function() {};

/**
 * Return max data size for encrypt in bytes.
 * @return {number}
 */
NodeRSA.prototype.getMaxMessageSize = function() {};

/**
 * @param {(string|!Object|!Array<?>)|?} data
 * @param {string=} encoding
 * @param {string=} sourceEncoding
 * @return {?|string}
 */
NodeRSA.prototype.encrypt = function(data, encoding, sourceEncoding) {};

/**
 * @param {(string|!Object|!Array<?>)|?} data
 * @param {string=} encoding
 * @param {string=} sourceEncoding
 * @return {?|string}
 */
NodeRSA.prototype.encryptPrivate = function(data, encoding, sourceEncoding) {};

/**
 * @template T
 * @param {(string|?)} data
 * @param {string=} encoding
 * @return {?|string|T}
 */
NodeRSA.prototype.decrypt = function(data, encoding) {};

/**
 * @template T
 * @param {(string|?)} data
 * @param {string=} encoding
 * @return {?|string|T}
 */
NodeRSA.prototype.decryptPublic = function(data, encoding) {};

/**
 * @param {(string|!Object|!Array<?>)|?} data
 * @param {string=} encoding
 * @param {string=} sourceEncoding
 * @return {?|string}
 */
NodeRSA.prototype.sign = function(data, encoding, sourceEncoding) {};

/**
 * @param {(string|!Object|!Array<?>)|?} data
 * @param {?|string} signature
 * @param {string|undefined=} sourceEncoding
 * @param {string=} signatureEncoding
 * @return {boolean}
 */
NodeRSA.prototype.verify = function(data, signature, sourceEncoding, signatureEncoding) {};

/** @typedef {(string|?|!NodeRSA.KeyComponents)} */
NodeRSA.Key;

/** @typedef {(string|!Object|!Array<?>)} */
NodeRSA.Data;

/** @typedef {string} */
NodeRSA.Format;

/** @typedef {string} */
NodeRSA.EncryptionScheme;

/** @typedef {string} */
NodeRSA.HashingAlgorithm;

/** @typedef {string} */
NodeRSA.SigningScheme;

/** @typedef {string} */
NodeRSA.SigningSchemeHash;

/** @typedef {string} */
NodeRSA.Encoding;
/**
 * @record
 * @struct
 */
NodeRSA.KeyComponents = function() {};
 /** @type {?} */
NodeRSA.KeyComponents.prototype.n;
 /** @type {(number|?)} */
NodeRSA.KeyComponents.prototype.e;
 /** @type {?} */
NodeRSA.KeyComponents.prototype.d;
 /** @type {?} */
NodeRSA.KeyComponents.prototype.p;
 /** @type {?} */
NodeRSA.KeyComponents.prototype.q;
 /** @type {?} */
NodeRSA.KeyComponents.prototype.dmp1;
 /** @type {?} */
NodeRSA.KeyComponents.prototype.dmq1;
 /** @type {?} */
NodeRSA.KeyComponents.prototype.coeff;
/**
 * @record
 * @struct
 */
NodeRSA.KeyBits = function() {};
 /** @type {number} */
NodeRSA.KeyBits.prototype.b;
/**
 * @record
 * @struct
 */
NodeRSA.AdvancedEncryptionSchemePKCS1 = function() {};
 /** @type {string} */
NodeRSA.AdvancedEncryptionSchemePKCS1.prototype.scheme;
 /** @type {number} */
NodeRSA.AdvancedEncryptionSchemePKCS1.prototype.padding;
/**
 * @record
 * @struct
 */
NodeRSA.AdvancedEncryptionSchemePKCS1OAEP = function() {};
 /** @type {string} */
NodeRSA.AdvancedEncryptionSchemePKCS1OAEP.prototype.scheme;
 /** @type {string} */
NodeRSA.AdvancedEncryptionSchemePKCS1OAEP.prototype.hash;

/**
 * Mask generation function.
 * @param {?} data
 * @param {number} length
 * @param {string} hash
 * @return {?}
 */
NodeRSA.AdvancedEncryptionSchemePKCS1OAEP.prototype.mgf = function(data, length, hash) {};

/** @typedef {(!NodeRSA.AdvancedEncryptionSchemePKCS1|!NodeRSA.AdvancedEncryptionSchemePKCS1OAEP)} */
NodeRSA.AdvancedEncryptionScheme;
/**
 * @record
 * @struct
 */
NodeRSA.AdvancedSigningSchemePSS = function() {};
 /** @type {string} */
NodeRSA.AdvancedSigningSchemePSS.prototype.scheme;
 /** @type {string} */
NodeRSA.AdvancedSigningSchemePSS.prototype.hash;
 /** @type {number} */
NodeRSA.AdvancedSigningSchemePSS.prototype.saltLength;
/**
 * @record
 * @struct
 */
NodeRSA.AdvancedSigningSchemePKCS1 = function() {};
 /** @type {string} */
NodeRSA.AdvancedSigningSchemePKCS1.prototype.scheme;
 /** @type {string} */
NodeRSA.AdvancedSigningSchemePKCS1.prototype.hash;

/** @typedef {(!NodeRSA.AdvancedSigningSchemePSS|!NodeRSA.AdvancedSigningSchemePKCS1)} */
NodeRSA.AdvancedSigningScheme;
/**
 * @record
 * @struct
 */
NodeRSA.Options = function() {};
 /** @type {string} */
NodeRSA.Options.prototype.environment;
 /** @type {(string|!NodeRSA.AdvancedEncryptionSchemePKCS1|!NodeRSA.AdvancedEncryptionSchemePKCS1OAEP)} */
NodeRSA.Options.prototype.encryptionScheme;
 /** @type {(string|!NodeRSA.AdvancedSigningSchemePSS|!NodeRSA.AdvancedSigningSchemePKCS1)} */
NodeRSA.Options.prototype.signingScheme;

/* TODO: ExportAssignment in  */
