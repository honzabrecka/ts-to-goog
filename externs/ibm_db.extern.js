/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/ibm_db/index.d.ts:
/**
 * @record
 * @struct
 */
function ConnStr() {}
 /** @type {string} */
ConnStr.prototype.DATABASE;
 /** @type {string} */
ConnStr.prototype.HOSTNAME;
 /** @type {(string|number)} */
ConnStr.prototype.PORT;
 /** @type {string} */
ConnStr.prototype.PROTOCOL;
 /** @type {string} */
ConnStr.prototype.UID;
 /** @type {string} */
ConnStr.prototype.PWD;
/**
 * @record
 * @struct
 */
function Options() {}
 /** @type {?} */
Options.prototype.odbc;
 /** @type {(!Array<?>|!SimpleQueue)} */
Options.prototype.queue;
 /** @type {number} */
Options.prototype.fetchMode;
 /** @type {boolean} */
Options.prototype.conected;
 /** @type {number} */
Options.prototype.connectTimeout;
 /** @type {boolean} */
Options.prototype.systemNaming;
/**
 * @record
 * @struct
 */
function DescribeObject() {}
 /** @type {string} */
DescribeObject.prototype.database;
 /** @type {string} */
DescribeObject.prototype.schema;
 /** @type {string} */
DescribeObject.prototype.type;
 /** @type {string} */
DescribeObject.prototype.table;
 /** @type {string} */
DescribeObject.prototype.column;
/**
 * @record
 * @struct
 */
function PoolOptions() {}
 /** @type {number} */
PoolOptions.prototype.idleTimeout;
 /** @type {boolean} */
PoolOptions.prototype.autoCleanIdle;
 /** @type {number} */
PoolOptions.prototype.maxPoolSize;
 /** @type {number} */
PoolOptions.prototype.connectTimeout;
 /** @type {?} */
PoolOptions.prototype.systemNaming;
/**
 * @constructor
 * @struct
 */
function SimpleQueue() {}
 /** @type {!Array<?>} */
SimpleQueue.prototype.fifo;
 /** @type {boolean} */
SimpleQueue.prototype.executing;

/**
 * @param {function(?, ?): void} fn
 * @return {void}
 */
SimpleQueue.prototype.push = function(fn) {};

/**
 * @return {void}
 */
SimpleQueue.prototype.maybeNext = function() {};

/**
 * @return {void}
 */
SimpleQueue.prototype.next = function() {};

/* TODO: ExportAssignment in  */

/**
 * @constructor
 * @struct
 * @param {?=} options
 */
function Database(options) {}
 /** @type {?} */
Database.prototype.odbc;
 /** @type {(!Array<?>|!SimpleQueue)} */
Database.prototype.queue;
 /** @type {number} */
Database.prototype.fetchMode;
 /** @type {boolean} */
Database.prototype.connected;
 /** @type {number} */
Database.prototype.connectTimeout;
 /** @type {?} */
Database.prototype.conn;

/**
 * @param {(string|?)} connStr
 * @param {?=} cb
 * @return {!Promise<?>|void}
 */
Database.prototype.open = function(connStr, cb) {};

/**
 * @param {(string|?)} connStr
 * @return {boolean}
 */
Database.prototype.openSync = function(connStr) {};

/**
 * @param {?=} cb
 * @return {void|!Promise<void>}
 */
Database.prototype.close = function(cb) {};

/**
 * @return {boolean}
 */
Database.prototype.closeSync = function() {};

/**
 * @param {string|(string|?)} query
 * @param {!Array<?>|?=} params_or_cb
 * @param {?=} cb
 * @return {void|!Promise<!Array<?>>}
 */
Database.prototype.query = function(query, params_or_cb, cb) {};

/**
 * @param {string|(string|?)} query
 * @param {!Array<?>|?=} params_or_cb
 * @param {?=} cb
 * @return {void|!Promise<?>}
 */
Database.prototype.queryResult = function(query, params_or_cb, cb) {};

/**
 * @param {(string|?)} query
 * @param {!Array<?>=} params
 * @return {?}
 */
Database.prototype.queryResultSync = function(query, params) {};

/**
 * @param {(string|?)} query
 * @param {!Array<?>=} params
 * @return {!Array<?>}
 */
Database.prototype.querySync = function(query, params) {};

/**
 * @param {string} sql
 * @param {!Array<?>} params
 * @return {?}
 */
Database.prototype.queryStream = function(sql, params) {};

/**
 * @param {?} results
 * @param {?} stream
 * @return {?}
 */
Database.prototype.fetchStreamingResults = function(results, stream) {};

/**
 * @param {?=} cb
 * @return {void|!Promise<void>}
 */
Database.prototype.beginTransaction = function(cb) {};

/**
 * @param {boolean=} rollback
 * @param {?=} cb
 * @return {?|!Promise<void>}
 */
Database.prototype.endTransaction = function(rollback, cb) {};

/**
 * @param {?=} cb
 * @return {void|!Promise<void>}
 */
Database.prototype.commitTransaction = function(cb) {};

/**
 * @param {?=} cb
 * @return {void|!Promise<void>}
 */
Database.prototype.rollbackTransaction = function(cb) {};

/**
 * @return {?}
 */
Database.prototype.beginTransactionSync = function() {};

/**
 * @param {boolean} rollback
 * @return {?}
 */
Database.prototype.endTransactionSync = function(rollback) {};

/**
 * @return {?}
 */
Database.prototype.commitTransactionSync = function() {};

/**
 * @return {?}
 */
Database.prototype.rollbackTransactionSync = function() {};

/**
 * @param {string} catalog
 * @param {string} schema
 * @param {string} table
 * @param {string} column
 * @param {?} cb
 * @return {void}
 */
Database.prototype.columns = function(catalog, schema, table, column, cb) {};

/**
 * @param {string} catalog
 * @param {string} schema
 * @param {string} table
 * @param {string} type
 * @param {?} cb
 * @return {void}
 */
Database.prototype.tables = function(catalog, schema, table, type, cb) {};

/**
 * @param {?} obj
 * @param {?} cb
 * @return {void}
 */
Database.prototype.describe = function(obj, cb) {};

/**
 * @param {string} sql
 * @param {?=} cb
 * @return {void|!Promise<?>}
 */
Database.prototype.prepare = function(sql, cb) {};

/**
 * @param {string} sql
 * @return {?}
 */
Database.prototype.prepareSync = function(sql) {};

/**
 * @param {number} isolationLevel
 * @return {boolean}
 */
Database.prototype.setIsolationLevel = function(isolationLevel) {};
/**
 * @constructor
 * @struct
 */
function ODBC() {}
 /** @type {string} */
ODBC.prototype.SQSQL_CLOSE;
 /** @type {string} */
ODBC.prototype.SQL_DROP;
 /** @type {string} */
ODBC.prototype.SQL_UNBIND;
 /** @type {string} */
ODBC.prototype.SQL_RESET_PARAMS;
 /** @type {string} */
ODBC.prototype.SQL_DESTROY;
 /** @type {string} */
ODBC.prototype.FETCH_ARRAY;
 /** @type {string} */
ODBC.prototype.FETCH_OBJECT;
 /** @type {string} */
var SQSQL_CLOSE;
 /** @type {string} */
var SQL_DROP;
 /** @type {string} */
var SQL_UNBIND;
 /** @type {string} */
var SQL_RESET_PARAMS;
 /** @type {string} */
var SQL_DESTROY;
 /** @type {string} */
var FETCH_ARRAY;
 /** @type {string} */
var FETCH_OBJECT;
/**
 * @constructor
 * @struct
 */
function ODBCConnection() {}
 /** @type {number} */
ODBCConnection.prototype.loginTimeout;
 /** @type {number} */
ODBCConnection.prototype.connectTimeout;
 /** @type {boolean} */
ODBCConnection.prototype.connected;
 /** @type {boolean} */
ODBCConnection.prototype.systemNaming;
/**
 * @constructor
 * @struct
 */
function ODBCStatement() {}
 /** @type {!SimpleQueue} */
ODBCStatement.prototype.queue;
 /** @type {!SimpleQueue} */
ODBCStatement.prototype.bindQueue;

/**
 * @param {?} cb
 * @return {void}
 */
ODBCStatement.prototype._execute = function(cb) {};

/**
 * @param {!Array<?>} params
 * @return {?}
 */
ODBCStatement.prototype._executeSync = function(params) {};

/**
 * @param {string} sql
 * @param {?} cb
 * @return {void}
 */
ODBCStatement.prototype._executeDirect = function(sql, cb) {};

/**
 * @param {?} cb
 * @return {void}
 */
ODBCStatement.prototype._executeNonQuery = function(cb) {};

/**
 * @param {string} sql
 * @param {?} cb
 * @return {void}
 */
ODBCStatement.prototype._prepare = function(sql, cb) {};

/**
 * @param {!Array<?>} params
 * @param {?} cb
 * @return {void}
 */
ODBCStatement.prototype._bind = function(params, cb) {};

/**
 * @param {!Array<?>} ary
 * @return {void}
 */
ODBCStatement.prototype._bindSync = function(ary) {};

/**
 * @param {!Array<?>|?} params_or_cb
 * @param {?=} cb
 * @return {void|!Promise<?>}
 */
ODBCStatement.prototype.execute = function(params_or_cb, cb) {};

/**
 * @param {!Array<?>} params
 * @return {?}
 */
ODBCStatement.prototype.executeSync = function(params) {};

/**
 * @param {string} sql
 * @param {?} cb
 * @return {void}
 */
ODBCStatement.prototype.executeDirect = function(sql, cb) {};

/**
 * @param {!Array<?>|?=} params_or_cb
 * @param {?=} cb
 * @return {void|!Promise<void>}
 */
ODBCStatement.prototype.executeNonQuery = function(params_or_cb, cb) {};

/**
 * @param {string} sql
 * @param {?} cb
 * @return {void}
 */
ODBCStatement.prototype.prepare = function(sql, cb) {};

/**
 * @param {!Array<?>} ary
 * @param {?} cb
 * @return {void}
 */
ODBCStatement.prototype.bind = function(ary, cb) {};

/**
 * @param {!Array<?>} ary
 * @return {void}
 */
ODBCStatement.prototype.bindSync = function(ary) {};
/**
 * @constructor
 * @struct
 */
function ODBCResult() {}
 /** @type {number} */
ODBCResult.prototype.fetchMode;

/**
 * @return {string}
 */
function getElapsedTime() {}

/**
 * @param {boolean} x
 * @return {void}
 */
function debug(x) {}

/**
 * @param {(string|?)} connStr
 * @param {?=} options_or_cb
 * @param {?=} cb
 * @return {void|!Promise<?>}
 */
function open(connStr, options_or_cb, cb) {}

/**
 * @param {(string|?)} connStr
 * @param {?=} options
 * @return {?}
 */
function openSync(connStr, options) {}

/**
 * @param {?} db
 * @return {void}
 */
function close(db) {}

/**
 * @constructor
 * @struct
 * @param {?=} options
 */
function Pool(options) {}
 /** @type {number} */
Pool.prototype.idleTimeout;
 /** @type {boolean} */
Pool.prototype.autoCleanIdle;
 /** @type {number} */
Pool.prototype.maxPoolSize;
 /** @type {number} */
Pool.prototype.connectTimeout;
 /** @type {?} */
Pool.prototype.systemNaming;
 /** @type {?} */
Pool.prototype.options;
 /** @type {number} */
Pool.prototype.index;
 /** @type {!Object} */
Pool.prototype.availablePool;
 /** @type {!Object} */
Pool.prototype.usedPool;
 /** @type {number} */
Pool.prototype.poolsize;
 /** @type {?} */
Pool.prototype.odbc;

/**
 * @param {string} connStr
 * @param {?} cb
 * @return {void}
 */
Pool.prototype.open = function(connStr, cb) {};

/**
 * @param {number} count
 * @param {string} connStr
 * @return {boolean}
 */
Pool.prototype.init = function(count, connStr) {};

/**
 * @param {number} count
 * @return {boolean}
 */
Pool.prototype.setMaxPoolSize = function(count) {};

/**
 * @param {number} timeout
 * @return {boolean}
 */
Pool.prototype.setConnectTimeout = function(timeout) {};

/**
 * @param {string} connStr
 * @return {boolean}
 */
Pool.prototype.cleanup = function(connStr) {};

/**
 * @param {?} cb
 * @return {void}
 */
Pool.prototype.close = function(cb) {};
