/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/pusher-js/index.d.ts:
/** @const */
var pusher = {};
/**
 * @record
 * @struct
 */
pusher.PusherStatic = function() {};

/* TODO: ConstructSignature: pusher */
/**
 * @record
 * @struct
 */
pusher.Pusher = function() {};
 /** @type {string} */
pusher.Pusher.prototype.key;
 /** @type {!pusher.Config} */
pusher.Pusher.prototype.config;
 /** @type {?} */
pusher.Pusher.prototype.channels;
 /** @type {!pusher.EventsDispatcher} */
pusher.Pusher.prototype.global_emitter;
 /** @type {number} */
pusher.Pusher.prototype.sessionID;
 /** @type {?} */
pusher.Pusher.prototype.timeline;
 /** @type {!pusher.ConnectionManager} */
pusher.Pusher.prototype.connection;

/**
 * @param {string} name
 * @return {!pusher.Channel}
 */
pusher.Pusher.prototype.subscribe = function(name) {};

/**
 * @return {void}
 */
pusher.Pusher.prototype.subscribeAll = function() {};

/**
 * @param {string} name
 * @return {void}
 */
pusher.Pusher.prototype.unsubscribe = function(name) {};

/**
 * @param {string} name
 * @return {!pusher.Channel}
 */
pusher.Pusher.prototype.channel = function(name) {};

/**
 * @return {!Array<!pusher.Channel>}
 */
pusher.Pusher.prototype.allChannels = function() {};

/**
 * @param {string} eventName
 * @param {!Function} callback
 * @return {!pusher.Pusher}
 */
pusher.Pusher.prototype.bind = function(eventName, callback) {};

/**
 * @param {!Function} callback
 * @return {!pusher.Pusher}
 */
pusher.Pusher.prototype.bind_all = function(callback) {};

/**
 * @return {void}
 */
pusher.Pusher.prototype.disconnect = function() {};
/**
 * @record
 * @struct
 */
pusher.Config = function() {};
 /** @type {boolean} */
pusher.Config.prototype.encrypted;
 /** @type {string} */
pusher.Config.prototype.authEndpoint;
 /** @type {string} */
pusher.Config.prototype.authTransport;
 /** @type {!pusher.AuthConfig} */
pusher.Config.prototype.auth;
 /** @type {string} */
pusher.Config.prototype.cluster;
 /** @type {boolean} */
pusher.Config.prototype.disableStats;
 /** @type {!Array<string>} */
pusher.Config.prototype.enabledTransports;
 /** @type {!Array<string>} */
pusher.Config.prototype.disabledTransports;
 /** @type {boolean} */
pusher.Config.prototype.ignoreNullOrigin;
 /** @type {number} */
pusher.Config.prototype.activityTimeout;
 /** @type {number} */
pusher.Config.prototype.pongTimeout;
 /** @type {string} */
pusher.Config.prototype.wsHost;
 /** @type {number} */
pusher.Config.prototype.wsPort;
 /** @type {number} */
pusher.Config.prototype.wssPort;
 /** @type {string} */
pusher.Config.prototype.httpHost;
 /** @type {number} */
pusher.Config.prototype.httpPort;
 /** @type {number} */
pusher.Config.prototype.httpsPort;
/**
 * @record
 * @struct
 */
pusher.AuthConfig = function() {};
 /** @type {!Object<string,?>} */
pusher.AuthConfig.prototype.params;
 /** @type {!Object<string,?>} */
pusher.AuthConfig.prototype.headers;
/**
 * @extends {pusher.EventsDispatcher}
 * @record
 * @struct
 */
pusher.GenericEventsDispatcher = function() {};

/**
 * @param {string} eventName
 * @param {!Function} callback
 * @param {?=} context
 * @return {Self}
 */
pusher.GenericEventsDispatcher.prototype.bind = function(eventName, callback, context) {};

/**
 * @param {!Function} callback
 * @return {Self}
 */
pusher.GenericEventsDispatcher.prototype.bind_all = function(callback) {};

/**
 * @param {string=} eventName
 * @param {!Function=} callback
 * @param {?=} context
 * @return {Self}
 */
pusher.GenericEventsDispatcher.prototype.unbind = function(eventName, callback, context) {};

/**
 * @param {string=} eventName
 * @param {!Function=} callback
 * @return {Self}
 */
pusher.GenericEventsDispatcher.prototype.unbind_all = function(eventName, callback) {};

/**
 * @param {string} eventName
 * @param {?=} data
 * @return {Self}
 */
pusher.GenericEventsDispatcher.prototype.emit = function(eventName, data) {};
/**
 * @extends {pusher.GenericEventsDispatcher}
 * @record
 * @struct
 */
pusher.Channel = function() {};
 /** @type {!pusher.Pusher} */
pusher.Channel.prototype.pusher;
 /** @type {string} */
pusher.Channel.prototype.name;
 /** @type {boolean} */
pusher.Channel.prototype.subscribed;

/**
 * Triggers an event
 * @param {string} eventName
 * @param {?=} data
 * @return {boolean}
 */
pusher.Channel.prototype.trigger = function(eventName, data) {};

/**
 * Authenticates the connection as a member of the channel.
 * @param {string} socketId
 * @param {function(?): void} callback
 * @return {void}
 */
pusher.Channel.prototype.authorize = function(socketId, callback) {};
/**
 * @record
 * @struct
 */
pusher.EventsDispatcher = function() {};

/**
 * @param {string} eventName
 * @param {!Function} callback
 * @param {?=} context
 * @return {!pusher.EventsDispatcher}
 */
pusher.EventsDispatcher.prototype.bind = function(eventName, callback, context) {};

/**
 * @param {!Function} callback
 * @return {!pusher.EventsDispatcher}
 */
pusher.EventsDispatcher.prototype.bind_all = function(callback) {};

/**
 * @param {string=} eventName
 * @param {!Function=} callback
 * @param {?=} context
 * @return {!pusher.EventsDispatcher}
 */
pusher.EventsDispatcher.prototype.unbind = function(eventName, callback, context) {};

/**
 * @param {string=} eventName
 * @param {!Function=} callback
 * @return {!pusher.EventsDispatcher}
 */
pusher.EventsDispatcher.prototype.unbind_all = function(eventName, callback) {};

/**
 * @param {string} eventName
 * @param {?=} data
 * @return {!pusher.EventsDispatcher}
 */
pusher.EventsDispatcher.prototype.emit = function(eventName, data) {};
/**
 * @extends {pusher.GenericEventsDispatcher}
 * @record
 * @struct
 */
pusher.ConnectionManager = function() {};
 /** @type {string} */
pusher.ConnectionManager.prototype.key;
 /** @type {?} */
pusher.ConnectionManager.prototype.options;
 /** @type {string} */
pusher.ConnectionManager.prototype.state;
 /** @type {string} */
pusher.ConnectionManager.prototype.socket_id;
 /** @type {?} */
pusher.ConnectionManager.prototype.connection;
 /** @type {boolean} */
pusher.ConnectionManager.prototype.encrypted;
 /** @type {?} */
pusher.ConnectionManager.prototype.timeline;
 /** @type {{message: function(string): void, ping: function(): void, activity: function(): void, error: function(?): void, closed: function(): void}} */
pusher.ConnectionManager.prototype.connectionCallbacks;
 /** @type {{ssl_only: function(): void, refused: function(): void, backoff: function(): void, retry: function(): void}} */
pusher.ConnectionManager.prototype.errorCallbacks;
 /** @type {{ssl_only: function(): void, refused: function(): void, backoff: function(): void, retry: function(): void, connected: function(?): void}} */
pusher.ConnectionManager.prototype.handshakeCallbacks;

/**
 * Establishes a connection to Pusher.
 * 
 * Does nothing when connection is already established. See top-level doc
 * to find events emitted on connection attempts.
 * @return {void}
 */
pusher.ConnectionManager.prototype.connect = function() {};

/**
 * Sends raw data.
 * @param {string} data
 * @return {boolean}
 */
pusher.ConnectionManager.prototype.send = function(data) {};

/**
 * Sends an event.
 * 
 * @param {string} name
 * @param {string} data
 * @param {string} channel
 * @return {boolean}
 */
pusher.ConnectionManager.prototype.send_event = function(name, data, channel) {};

/**
 * Closes the connection.
 * @return {void}
 */
pusher.ConnectionManager.prototype.disconnect = function() {};

/**
 * @return {boolean}
 */
pusher.ConnectionManager.prototype.isEncrypted = function() {};
/**
 * @extends {pusher.Channel}
 * @record
 * @struct
 */
pusher.PresenceChannel = function() {};
 /** @type {!pusher.Members<T>} */
pusher.PresenceChannel.prototype.members;
/**
 * @record
 * @struct
 */
pusher.Members = function() {};
 /** @type {!Object<number,!pusher.UserInfo<T>>} */
pusher.Members.prototype.members;
 /** @type {number} */
pusher.Members.prototype.count;
 /** @type {number} */
pusher.Members.prototype.myID;
 /** @type {!pusher.UserInfo<T>} */
pusher.Members.prototype.me;

/**
 * Returns member's info for given id.
 * 
 * Resulting object containts two fields - id and info.
 * 
 * @param {number} id
 * @return {T}
 */
pusher.Members.prototype.get = function(id) {};

/**
 * Calls back for each member in unspecified order.
 * 
 * @param {function(?): void} callback
 * @return {void}
 */
pusher.Members.prototype.each = function(callback) {};
/**
 * @record
 * @struct
 */
pusher.UserInfo = function() {};
 /** @type {number} */
pusher.UserInfo.prototype.id;
 /** @type {T} */
pusher.UserInfo.prototype.info;
 /** @type {!pusher.PusherStatic} */
var pusher;

/* TODO: ExportAssignment in  */
