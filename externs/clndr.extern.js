/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/clndr/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: NamespaceExportDeclaration in  */
/**
 * @record
 * @struct
 */
function ClndrInstance() {}
 /** @type {?} */
ClndrInstance.prototype.options;

/**
 * Go to the next month
 * @return {?}
 */
ClndrInstance.prototype.forward = function() {};

/**
 * Go to the previous month
 * @return {?}
 */
ClndrInstance.prototype.back = function() {};

/**
 * Set the month using a number from 0-11 or a month name
 * @param {(string|number)} month
 * @return {?}
 */
ClndrInstance.prototype.setMonth = function(month) {};

/**
 * Go to the next year
 * @return {?}
 */
ClndrInstance.prototype.nextYear = function() {};

/**
 * Go to the previous year
 * @return {?}
 */
ClndrInstance.prototype.previousYear = function() {};

/**
 * Set the year
 * @param {number} year
 * @return {?}
 */
ClndrInstance.prototype.setYear = function(year) {};

/**
 * Go to today
 * @return {?}
 */
ClndrInstance.prototype.today = function() {};

/**
 * Change the events. Note that this triggers a re-render of the calendar.
 * @param {!Array<?>} events
 * @return {?}
 */
ClndrInstance.prototype.setEvents = function(events) {};

/**
 * Add events. Note that this triggers a re-render of the calendar.
 * @param {!Array<?>} events
 * @return {?}
 */
ClndrInstance.prototype.addEvents = function(events) {};

/**
 * Remove events.  All events for which the passed in function returns true will
 * be removed from the calendar. Note that this triggers a re-render of the
 * calendar.
 * @param {?} filter
 * @return {?}
 */
ClndrInstance.prototype.removeEvents = function(filter) {};

/**
 * Re-render of the calendar.
 * @return {void}
 */
ClndrInstance.prototype.render = function() {};

/**
 * Destroy the clndr instance. This will empty the DOM node containing the
 * calendar.
 * @return {void}
 */
ClndrInstance.prototype.destroy = function() {};
/**
 * @record
 * @struct
 */
function ClndrOptions() {}
 /** @type {string} */
ClndrOptions.prototype.template;
 /** @type {(string|!moment.Moment)} */
ClndrOptions.prototype.startWithMonth;
 /** @type {number} */
ClndrOptions.prototype.weekOffset;
 /** @type {!Array<string>} */
ClndrOptions.prototype.daysOfTheWeek;
 /** @type {?} */
ClndrOptions.prototype.targets;
 /** @type {?} */
ClndrOptions.prototype.classes;
 /** @type {?} */
ClndrOptions.prototype.clickEvents;
 /** @type {boolean} */
ClndrOptions.prototype.useTouchEvents;
 /** @type {!Array<?>} */
ClndrOptions.prototype.events;
 /** @type {string} */
ClndrOptions.prototype.dateParameter;
 /** @type {?} */
ClndrOptions.prototype.multiDayEvents;
 /** @type {boolean} */
ClndrOptions.prototype.showAdjacentMonths;
 /** @type {boolean} */
ClndrOptions.prototype.adjacentDaysChangeMonth;
 /** @type {boolean} */
ClndrOptions.prototype.forceSixRows;
 /** @type {boolean} */
ClndrOptions.prototype.trackSelectedDate;
 /** @type {?} */
ClndrOptions.prototype.selectedDate;
 /** @type {boolean} */
ClndrOptions.prototype.ignoreInactiveDaysInSelection;
 /** @type {?} */
ClndrOptions.prototype.lengthOfTime;
 /** @type {?} */
ClndrOptions.prototype.extras;
 /** @type {?} */
ClndrOptions.prototype.constraints;
 /** @type {!moment.Moment} */
ClndrOptions.prototype.moment;

/**
 * This is called only once after clndr has been initialized and rendered.
 * use this to bind custom event handlers that don't need to be re-attached
 * every time the month changes (most event handlers fall in this category).
 * Hint: this.element refers to the parent element that holds the clndr,
 * and is a great place to attach handlers that don't get tossed out every
 * time the clndr is re-rendered.
 * @return {void}
 */
ClndrOptions.prototype.ready = function() {};

/**
 * A callback when the calendar is done rendering. This is a good place
 * to bind custom event handlers (also see the 'ready' option above).
 * @return {void}
 */
ClndrOptions.prototype.doneRendering = function() {};

/**
 * If you want to use a different templating language, here's your ticket.
 * Precompile your template (before you call clndr), pass the data from the
 * render function into your template, and return the result. The result
 * must be a string containing valid markup. The keyword 'this' is set to
 * the clndr instance in case you need access to any other properties.
 * More under 'Template Rendering Engine' below.
 * @param {?} data
 * @return {void}
 */
ClndrOptions.prototype.render = function(data) {};
/**
 * @record
 * @struct
 */
function ClickEvents() {}

/**
 * Fired whenever a calendar box is clicked. Returns a 'target' object
 * containing the DOM element, any events, and the date as a moment.js
 * object.
 * @param {?} target
 * @return {void}
 */
ClickEvents.prototype.click = function(target) {};

/**
 * Fired when a user goes to the current month and year. Returns a
 * moment.js object set to the correct month.
 * @param {!moment.Moment} month
 * @return {void}
 */
ClickEvents.prototype.today = function(month) {};

/**
 * Fired when a user goes forward a month. Returns a moment.js object
 * set to the correct month.
 * @param {!moment.Moment} month
 * @return {void}
 */
ClickEvents.prototype.nextMonth = function(month) {};

/**
 * Fired when a user goes back a month. Returns a moment.js object set
 * to the correct month.
 * 
 * @param {!moment.Moment} month
 * @return {void}
 */
ClickEvents.prototype.previousMonth = function(month) {};

/**
 * Fires any time the month changes as a result of a click action.
 * Returns a moment.js object set to the correct month.
 * @param {!moment.Moment} month
 * @return {void}
 */
ClickEvents.prototype.onMonthChange = function(month) {};

/**
 * Fired when the next year button is clicked. Returns a moment.js
 * object set to the correct month and year.
 * @param {!moment.Moment} month
 * @return {void}
 */
ClickEvents.prototype.nextYear = function(month) {};

/**
 * Fired when the previous year button is clicked. Returns a moment.js
 * object set to the correct month and year.
 * @param {!moment.Moment} month
 * @return {void}
 */
ClickEvents.prototype.previousYear = function(month) {};

/**
 * Fires any time the year changes as a result of a click action. If
 * onMonthChange is also set, it is fired BEFORE onYearChange. Returns
 * a moment.js object set to the correct month and year.
 * @param {!moment.Moment} month
 * @return {void}
 */
ClickEvents.prototype.onYearChange = function(month) {};

/**
 * Fired when a user goes forward a period. Returns moment.js objects
 * for the updated start and end date.
 * @param {!moment.Moment} start
 * @param {!moment.Moment} end
 * @return {void}
 */
ClickEvents.prototype.nextInterval = function(start, end) {};

/**
 * Fired when a user goes back an interval. Returns moment.js objects for
 * the updated start and end date.
 * @param {!moment.Moment} start
 * @param {!moment.Moment} end
 * @return {void}
 */
ClickEvents.prototype.previousInterval = function(start, end) {};

/**
 * Fired whenever the time period changes as configured in lengthOfTime.
 * Returns moment.js objects for the updated start and end date.
 * @param {!moment.Moment} start
 * @param {!moment.Moment} end
 * @return {void}
 */
ClickEvents.prototype.onIntervalChange = function(start, end) {};
/**
 * @record
 * @struct
 */
function Target() {}
 /** @type {!moment.Moment} */
Target.prototype.date;
 /** @type {!Element} */
Target.prototype.element;
 /** @type {!Array<?>} */
Target.prototype.events;
/**
 * @record
 * @struct
 */
function Targets() {}
 /** @type {string} */
Targets.prototype.day;
 /** @type {string} */
Targets.prototype.empty;
 /** @type {string} */
Targets.prototype.nextButton;
 /** @type {string} */
Targets.prototype.todayButton;
 /** @type {string} */
Targets.prototype.previousButton;
 /** @type {string} */
Targets.prototype.nextYearButton;
 /** @type {string} */
Targets.prototype.previousYearButton;
/**
 * @record
 * @struct
 */
function Classes() {}
 /** @type {string} */
Classes.prototype.past;
 /** @type {string} */
Classes.prototype.today;
 /** @type {string} */
Classes.prototype.event;
 /** @type {string} */
Classes.prototype.selected;
 /** @type {string} */
Classes.prototype.inactive;
 /** @type {string} */
Classes.prototype.lastMonth;
 /** @type {string} */
Classes.prototype.nextMonth;
 /** @type {string} */
Classes.prototype.adjacentMonth;
/**
 * @record
 * @struct
 */
function MultiDayEvents() {}
 /** @type {string} */
MultiDayEvents.prototype.endDate;
 /** @type {string} */
MultiDayEvents.prototype.startDate;
 /** @type {string} */
MultiDayEvents.prototype.singleDay;
/**
 * @record
 * @struct
 */
function LengthOfTime() {}
 /** @type {number} */
LengthOfTime.prototype.months;
 /** @type {number} */
LengthOfTime.prototype.days;
 /** @type {number} */
LengthOfTime.prototype.interval;
/**
 * @record
 * @struct
 */
function RenderData() {}
 /** @type {!Array<?>} */
RenderData.prototype.days;
 /** @type {!Array<string>} */
RenderData.prototype.daysOfTheWeek;
 /** @type {!Array<?>} */
RenderData.prototype.eventsLastMonth;
 /** @type {!Array<?>} */
RenderData.prototype.eventsNextMonth;
 /** @type {!Array<?>} */
RenderData.prototype.eventsThisInterval;
 /** @type {!Array<?>} */
RenderData.prototype.eventsThisMonth;
 /** @type {?} */
RenderData.prototype.extras;
 /** @type {!moment.Moment} */
RenderData.prototype.intervalEnd;
 /** @type {!moment.Moment} */
RenderData.prototype.intervalStart;
 /** @type {string} */
RenderData.prototype.month;
 /** @type {!Array<?>} */
RenderData.prototype.months;
 /** @type {number} */
RenderData.prototype.numberOfRows;
 /** @type {number} */
RenderData.prototype.year;
/**
 * @record
 * @struct
 */
function Month() {}
 /** @type {!Array<?>} */
Month.prototype.days;
 /** @type {!moment.Moment} */
Month.prototype.month;
/**
 * @record
 * @struct
 */
function CalendarDay() {}
 /** @type {string} */
CalendarDay.prototype.classes;
 /** @type {!moment.Moment} */
CalendarDay.prototype.date;
 /** @type {number} */
CalendarDay.prototype.day;
 /** @type {!Array<?>} */
CalendarDay.prototype.events;
 /** @type {?} */
CalendarDay.prototype.properties;
/**
 * @record
 * @struct
 */
function CalendarDayProperties() {}
 /** @type {boolean} */
CalendarDayProperties.prototype.isToday;
 /** @type {boolean} */
CalendarDayProperties.prototype.isInactive;
 /** @type {boolean} */
CalendarDayProperties.prototype.isAdjacentMonth;
/**
 * @record
 * @struct
 */
function Constraints() {}
 /** @type {string} */
Constraints.prototype.startDate;
 /** @type {string} */
Constraints.prototype.endDate;

/**
 * @param {?=} options
 * @return {?}
 */
JQuery.prototype.clndr = function(options) {};
