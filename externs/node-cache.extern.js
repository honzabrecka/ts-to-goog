/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/node-cache/index.d.ts:

/** @typedef {(string|number)} */
var Key;
/** @const */
var NodeCache = {};
/**
 * @record
 * @struct
 */
NodeCache.NodeCache = function() {};
 /** @type {!NodeCache.Data} */
NodeCache.NodeCache.prototype.data;
 /** @type {!NodeCache.Options} */
NodeCache.NodeCache.prototype.options;
 /** @type {!NodeCache.Stats} */
NodeCache.NodeCache.prototype.stats;

/**
 * get a cached key and change the stats
 * 
 * @template T
 * @param {(string|number)} key cache key or an array of keys
 * @param {function(?, T): void=} cb Callback function
 * @return {T}
 */
NodeCache.NodeCache.prototype.get = function(key, cb) {};

/**
 * get multiple cached keys at once and change the stats
 * 
 * @template T
 * @param {!Array<(string|number)>} keys an array of keys
 * @param {function(?, !Object<string,T>): void=} cb Callback function
 * @return {!Object<string,T>}
 */
NodeCache.NodeCache.prototype.mget = function(keys, cb) {};

/**
 * set a cached key and change the stats
 * 
 * @template T
 * @param {(string|number)} key cache key
 * @param {T} value A element to cache. If the option `option.forceString` is `true` the module trys to translate
 * it to a serialized JSON
 * @param {(string|number)|function(?, boolean): void=} ttl_or_cb The time to live in seconds.
 * @param {function(?, boolean): void=} cb Callback function
 * @return {boolean}
 */
NodeCache.NodeCache.prototype.set = function(key, value, ttl_or_cb, cb) {};

/**
 * remove keys
 * @param {(string|number|!Array<(string|number)>)} keys cache key to delete or a array of cache keys
 * @param {function(?, number): void=} cb Callback function
 * @return {number} Number of deleted keys
 */
NodeCache.NodeCache.prototype.del = function(keys, cb) {};

/**
 * reset or redefine the ttl of a key. If `ttl` is not passed or set to 0 it's similar to `.del()`
 * @param {(string|number)} key
 * @param {number|function(?, boolean): void=} ttl_or_cb
 * @param {function(?, boolean): void|number=} cb_or_ttl
 * @return {boolean}
 */
NodeCache.NodeCache.prototype.ttl = function(key, ttl_or_cb, cb_or_ttl) {};

/**
 * list all keys within this cache
 * @param {function(?, !Array<string>): void=} cb Callback function
 * @return {!Array<string>} An array of all keys
 */
NodeCache.NodeCache.prototype.keys = function(cb) {};

/**
 * get the stats
 * 
 * @return {!NodeCache.Stats} Stats data
 */
NodeCache.NodeCache.prototype.getStats = function() {};

/**
 * flush the hole data and reset the stats
 * @return {void}
 */
NodeCache.NodeCache.prototype.flushAll = function() {};

/**
 * This will clear the interval timeout which is set on checkperiod option.
 * @return {void}
 */
NodeCache.NodeCache.prototype.close = function() {};
/**
 * @record
 * @struct
 */
NodeCache.Data = function() {};

/* TODO: IndexSignature: NodeCache */
/**
 * @record
 * @struct
 */
NodeCache.Options = function() {};
 /** @type {boolean} */
NodeCache.Options.prototype.forceString;
 /** @type {number} */
NodeCache.Options.prototype.objectValueSize;
 /** @type {number} */
NodeCache.Options.prototype.arrayValueSize;
 /** @type {number} */
NodeCache.Options.prototype.stdTTL;
 /** @type {number} */
NodeCache.Options.prototype.checkperiod;
 /** @type {boolean} */
NodeCache.Options.prototype.useClones;
 /** @type {boolean} */
NodeCache.Options.prototype.errorOnMissing;
/**
 * @record
 * @struct
 */
NodeCache.Stats = function() {};
 /** @type {number} */
NodeCache.Stats.prototype.hits;
 /** @type {number} */
NodeCache.Stats.prototype.misses;
 /** @type {number} */
NodeCache.Stats.prototype.keys;
 /** @type {number} */
NodeCache.Stats.prototype.ksize;
 /** @type {number} */
NodeCache.Stats.prototype.vsize;
/**
 * @record
 * @struct
 */
NodeCache.WrappedValue = function() {};
 /** @type {number} */
NodeCache.WrappedValue.prototype.t;
 /** @type {T} */
NodeCache.WrappedValue.prototype.v;

/** @typedef {function(?, T): void} */
NodeCache.Callback;

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */
 /** @type {!NodeCache.Data} */
NodeCache.prototype.data;
 /** @type {!NodeCache.Options} */
NodeCache.prototype.options;
 /** @type {!NodeCache.Stats} */
NodeCache.prototype.stats;

/**
 * get a cached key and change the stats
 * 
 * @template T
 * @param {(string|number)} key cache key or an array of keys
 * @param {function(?, T): void=} cb Callback function
 * @return {T}
 */
NodeCache.prototype.get = function(key, cb) {};

/**
 * get multiple cached keys at once and change the stats
 * 
 * @template T
 * @param {!Array<(string|number)>} keys an array of keys
 * @param {function(?, !Object<string,T>): void=} cb Callback function
 * @return {!Object<string,T>}
 */
NodeCache.prototype.mget = function(keys, cb) {};

/**
 * set a cached key and change the stats
 * 
 * @template T
 * @param {(string|number)} key cache key
 * @param {T} value A element to cache. If the option `option.forceString` is `true` the module trys to translate
 * it to a serialized JSON
 * @param {(string|number)|function(?, boolean): void=} ttl_or_cb The time to live in seconds.
 * @param {function(?, boolean): void=} cb Callback function
 * @return {boolean}
 */
NodeCache.prototype.set = function(key, value, ttl_or_cb, cb) {};

/**
 * remove keys
 * @param {(string|number|!Array<(string|number)>)} keys cache key to delete or a array of cache keys
 * @param {function(?, number): void=} cb Callback function
 * @return {number} Number of deleted keys
 */
NodeCache.prototype.del = function(keys, cb) {};

/**
 * reset or redefine the ttl of a key. If `ttl` is not passed or set to 0 it's similar to `.del()`
 * @param {(string|number)} key
 * @param {number|function(?, boolean): void=} ttl_or_cb
 * @param {function(?, boolean): void|number=} cb_or_ttl
 * @return {boolean}
 */
NodeCache.prototype.ttl = function(key, ttl_or_cb, cb_or_ttl) {};

/**
 * list all keys within this cache
 * @param {function(?, !Array<string>): void=} cb Callback function
 * @return {!Array<string>} An array of all keys
 */
NodeCache.prototype.keys = function(cb) {};

/**
 * get the stats
 * 
 * @return {!NodeCache.Stats} Stats data
 */
NodeCache.prototype.getStats = function() {};

/**
 * flush the hole data and reset the stats
 * @return {void}
 */
NodeCache.prototype.flushAll = function() {};

/**
 * This will clear the interval timeout which is set on checkperiod option.
 * @return {void}
 */
NodeCache.prototype.close = function() {};

/* TODO: ExportAssignment in  */
