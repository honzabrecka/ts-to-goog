/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/http-proxy-middleware/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/**
 * @param {!proxy.Config|(string|!Array<string>|function(string, !IncomingMessage): boolean)} config_or_contextOrUri
 * @param {!proxy.Config=} config
 * @return {function(!IncomingMessage, !ServerResponse, !Function): void}
 */
function proxy(config_or_contextOrUri, config) {}

/** @typedef {function(string, !IncomingMessage): boolean} */
proxy.Filter;

/** @typedef {function(!Array<?>): void} */
proxy.Logger;
/**
 * @record
 * @struct
 */
proxy.LogProvider = function() {};
 /** @type {function(!Array<?>): void} */
proxy.LogProvider.prototype.log;
 /** @type {function(!Array<?>): void} */
proxy.LogProvider.prototype.debug;
 /** @type {function(!Array<?>): void} */
proxy.LogProvider.prototype.info;
 /** @type {function(!Array<?>): void} */
proxy.LogProvider.prototype.warn;
 /** @type {function(!Array<?>): void} */
proxy.LogProvider.prototype.error;
/**
 * @record
 * @struct
 */
proxy.Config = function() {};
 /** @type {(!Object<string,string>|function(string, !IncomingMessage): string)} */
proxy.Config.prototype.pathRewrite;
 /** @type {(!Object<string,string>|function(!IncomingMessage): string)} */
proxy.Config.prototype.router;
 /** @type {string} */
proxy.Config.prototype.logLevel;
 /** @type {string} */
proxy.Config.prototype.target;
 /** @type {string} */
proxy.Config.prototype.forward;
 /** @type {!Agent} */
proxy.Config.prototype.agent;
 /** @type {!TlsOptions} */
proxy.Config.prototype.ssl;
 /** @type {boolean} */
proxy.Config.prototype.ws;
 /** @type {boolean} */
proxy.Config.prototype.xfwd;
 /** @type {boolean} */
proxy.Config.prototype.secure;
 /** @type {boolean} */
proxy.Config.prototype.toProxy;
 /** @type {boolean} */
proxy.Config.prototype.prependPath;
 /** @type {boolean} */
proxy.Config.prototype.ignorePath;
 /** @type {string} */
proxy.Config.prototype.localAddress;
 /** @type {boolean} */
proxy.Config.prototype.changeOrigin;
 /** @type {string} */
proxy.Config.prototype.auth;
 /** @type {string} */
proxy.Config.prototype.hostRewrite;
 /** @type {boolean} */
proxy.Config.prototype.autoRewrite;
 /** @type {string} */
proxy.Config.prototype.protocolRewrite;
 /** @type {(string|boolean|!Object<string,string>)} */
proxy.Config.prototype.cookieDomainRewrite;
 /** @type {!Object<string,string>} */
proxy.Config.prototype.headers;
 /** @type {number} */
proxy.Config.prototype.proxyTimeout;
 /** @type {?} */
proxy.Config.prototype.proxyHost;
 /** @type {?} */
proxy.Config.prototype.proxyTable;

/**
 * @param {!proxy.LogProvider} provider
 * @return {!proxy.LogProvider}
 */
proxy.Config.prototype.logProvider = function(provider) {};

/**
 * @param {!Error} err
 * @param {!IncomingMessage} req
 * @param {!ServerResponse} res
 * @return {void}
 */
proxy.Config.prototype.onError = function(err, req, res) {};

/**
 * @param {!IncomingMessage} proxyRes
 * @param {!IncomingMessage} req
 * @param {!ServerResponse} res
 * @return {void}
 */
proxy.Config.prototype.onProxyRes = function(proxyRes, req, res) {};

/**
 * @param {!ClientRequest} proxyReq
 * @param {!IncomingMessage} req
 * @param {!ServerResponse} res
 * @return {void}
 */
proxy.Config.prototype.onProxyReq = function(proxyReq, req, res) {};

/**
 * @param {!ClientRequest} proxyReq
 * @param {!IncomingMessage} req
 * @param {?} socket
 * @param {!Server.ServerOptions} options
 * @param {?} head
 * @return {void}
 */
proxy.Config.prototype.onProxyReqWs = function(proxyReq, req, socket, options, head) {};

/**
 * @param {?} proxySocket
 * @return {void}
 */
proxy.Config.prototype.onOpen = function(proxySocket) {};

/**
 * @param {!IncomingMessage} res
 * @param {?} socket
 * @param {?} head
 * @return {void}
 */
proxy.Config.prototype.onClose = function(res, socket, head) {};

/** @typedef {function(!IncomingMessage, !ServerResponse, !Function): void} */
proxy.Proxy;

/* TODO: ExportAssignment in  */
