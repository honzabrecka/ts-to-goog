/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/breeze/index.d.ts:
/** @const */
var breeze = {};
/** @const */
breeze.core = {};
/**
 * @record
 * @struct
 */
breeze.core.ErrorCallback = function() {};

/* TODO: CallSignature: breeze.core */
/**
 * @record
 * @struct
 */
breeze.core.IEnum = function() {};

/**
 * @param {?} object
 * @return {boolean}
 */
breeze.core.IEnum.prototype.contains = function(object) {};

/**
 * @param {string} name
 * @return {!breeze.core.EnumSymbol}
 */
breeze.core.IEnum.prototype.fromName = function(name) {};

/**
 * @return {!Array<string>}
 */
breeze.core.IEnum.prototype.getNames = function() {};

/**
 * @return {!Array<!breeze.core.EnumSymbol>}
 */
breeze.core.IEnum.prototype.getSymbols = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 * @param {?=} methodObj
 */
breeze.core.Enum = function(name, methodObj) {};

/**
 * @param {?=} propertiesObj
 * @return {!breeze.core.EnumSymbol}
 */
breeze.core.Enum.prototype.addSymbol = function(propertiesObj) {};

/**
 * @param {?} object
 * @return {boolean}
 */
breeze.core.Enum.prototype.contains = function(object) {};

/**
 * @param {string} name
 * @return {!breeze.core.EnumSymbol}
 */
breeze.core.Enum.prototype.fromName = function(name) {};

/**
 * @return {!Array<string>}
 */
breeze.core.Enum.prototype.getNames = function() {};

/**
 * @return {!Array<!breeze.core.EnumSymbol>}
 */
breeze.core.Enum.prototype.getSymbols = function() {};

/**
 * @param {?} object
 * @return {boolean}
 */
breeze.core.Enum.isSymbol = function(object) {};

/**
 * @return {void}
 */
breeze.core.Enum.prototype.resolveSymbols = function() {};
/**
 * @constructor
 * @struct
 */
breeze.core.EnumSymbol = function() {};
 /** @type {!breeze.core.IEnum} */
breeze.core.EnumSymbol.prototype.parentEnum;

/**
 * @return {string}
 */
breeze.core.EnumSymbol.prototype.getName = function() {};

/**
 * @return {string}
 */
breeze.core.EnumSymbol.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 * @param {?} publisher
 * @param {!breeze.core.ErrorCallback=} defaultErrorCallback
 */
breeze.core.Event = function(name, publisher, defaultErrorCallback) {};

/**
 * @param {string} eventName
 * @param {?} target
 * @param {boolean|!Function=} isEnabled
 * @return {void}
 */
breeze.core.Event.enable = function(eventName, target, isEnabled) {};

/**
 * @param {string} eventName
 * @param {?} target
 * @return {boolean}
 */
breeze.core.Event.isEnabled = function(eventName, target) {};

/**
 * @param {?} data
 * @param {boolean=} publishAsync
 * @param {!breeze.core.ErrorCallback=} errorCallback
 * @return {void}
 */
breeze.core.Event.prototype.publish = function(data, publishAsync, errorCallback) {};

/**
 * @param {?} data
 * @param {!breeze.core.ErrorCallback=} errorCallback
 * @return {void}
 */
breeze.core.Event.prototype.publishAsync = function(data, errorCallback) {};

/**
 * @param {function(?): void=} callback
 * @return {number}
 */
breeze.core.Event.prototype.subscribe = function(callback) {};

/**
 * @param {number} unsubKey
 * @return {boolean}
 */
breeze.core.Event.prototype.unsubscribe = function(unsubKey) {};

/**
 * @return {void}
 */
breeze.core.Event.prototype.clear = function() {};

/**
 * @param {!Object} obj
 * @param {function(string, ?): void} kvfn
 * @return {void}
 */
breeze.core.objectForEach = function(obj, kvfn) {};

/**
 * @param {!Object} target
 * @param {!Object} source
 * @return {!Object}
 */
breeze.core.extend = function(target, source) {};

/**
 * @param {string} propertyName
 * @param {?} value
 * @return {function(!Object): boolean}
 */
breeze.core.propEq = function(propertyName, value) {};

/**
 * @param {string} propertyName
 * @return {function(!Object): ?}
 */
breeze.core.pluck = function(propertyName) {};

/**
 * @param {!Array<?>} a1
 * @param {!Array<?>} a2
 * @param {function(?, ?): boolean} equalsFn
 * @return {boolean}
 */
breeze.core.arrayEquals = function(a1, a2, equalsFn) {};

/**
 * @param {!Array<?>} a1
 * @param {function(?): boolean} predicate
 * @return {?}
 */
breeze.core.arrayFirst = function(a1, predicate) {};

/**
 * @param {!Array<?>} a1
 * @param {function(?): boolean} predicate
 * @return {number}
 */
breeze.core.arrayIndexOf = function(a1, predicate) {};

/**
 * @param {!Array<?>} array
 * @param {?|function(?): boolean} item_or_predicate
 * @param {boolean} shouldRemoveMultiple
 * @return {?}
 */
breeze.core.arrayRemoveItem = function(array, item_or_predicate, shouldRemoveMultiple) {};

/**
 * @param {!Array<?>} a1
 * @param {!Array<?>} a2
 * @param {function(?, ?): ?} callback
 * @return {!Array<?>}
 */
breeze.core.arrayZip = function(a1, a2, callback) {};

/**
 * @param {string} libnames
 * @param {string} errMessage
 * @return {!Object}
 */
breeze.core.requireLib = function(libnames, errMessage) {};

/**
 * @param {!Object} obj
 * @param {string} property
 * @param {?} tempValue
 * @param {function(): ?} fn
 * @return {?}
 */
breeze.core.using = function(obj, property, tempValue, fn) {};

/**
 * @param {function(!Array<?>): ?} fn
 * @return {?}
 */
breeze.core.memoize = function(fn) {};

/**
 * @return {string}
 */
breeze.core.getUuid = function() {};

/**
 * @param {string} duration
 * @return {number}
 */
breeze.core.durationToSeconds = function(duration) {};

/**
 * @param {?} o
 * @return {boolean}
 */
breeze.core.isDate = function(o) {};

/**
 * @param {?} o
 * @return {boolean}
 */
breeze.core.isGuid = function(o) {};

/**
 * @param {?} o
 * @return {boolean}
 */
breeze.core.isDuration = function(o) {};

/**
 * @param {?} o
 * @return {boolean}
 */
breeze.core.isFunction = function(o) {};

/**
 * @param {?} o
 * @return {boolean}
 */
breeze.core.isEmpty = function(o) {};

/**
 * @param {?} o
 * @return {boolean}
 */
breeze.core.isNumeric = function(o) {};

/**
 * @param {string} str
 * @param {string} prefix
 * @return {boolean}
 */
breeze.core.stringStartsWith = function(str, prefix) {};

/**
 * @param {string} str
 * @param {string} suffix
 * @return {boolean}
 */
breeze.core.stringEndsWith = function(str, suffix) {};

/**
 * @param {string} format
 * @param {...?} args
 * @return {string}
 */
breeze.core.formatString = function(format, args) {};

/**
 * Change text to title case with spaces, e.g. 'myPropertyName12' to 'My Property Name 12'
 * @param {string} str
 * @return {string}
 */
breeze.core.titleCase = function(str) {};

/**
 * Return the ES5 property descriptor for the property, which may be on a prototype of the object
 * @param {?} obj
 * @param {string} propertyName
 * @return {!PropertyDescriptor}
 */
breeze.core.getPropertyDescriptor = function(obj, propertyName) {};

/**
 * safely perform toJSON logic on objects with cycles.  Replacer function can map or exclude properties.
 * @param {?} obj
 * @param {function(string, ?): ?} replacer
 * @return {?}
 */
breeze.core.toJSONSafe = function(obj, replacer) {};

/**
 * Default value replacer for toJSONSafe.  Replaces entityAspect and other internal properties with undefined.
 * @param {string} prop
 * @param {?} val
 * @return {?}
 */
breeze.core.toJSONSafeReplacer = function(prop, val) {};
/**
 * @record
 * @struct
 */
breeze.Entity = function() {};
 /** @type {!breeze.EntityAspect} */
breeze.Entity.prototype.entityAspect;
 /** @type {!breeze.EntityType} */
breeze.Entity.prototype.entityType;
/**
 * @record
 * @struct
 */
breeze.ComplexObject = function() {};
 /** @type {!breeze.ComplexAspect} */
breeze.ComplexObject.prototype.complexAspect;
 /** @type {!breeze.ComplexType} */
breeze.ComplexObject.prototype.complexType;
/**
 * @record
 * @struct
 */
breeze.IProperty = function() {};
 /** @type {string} */
breeze.IProperty.prototype.name;
 /** @type {string} */
breeze.IProperty.prototype.nameOnServer;
 /** @type {string} */
breeze.IProperty.prototype.displayName;
 /** @type {!breeze.IStructuralType} */
breeze.IProperty.prototype.parentType;
 /** @type {!Array<!breeze.Validator>} */
breeze.IProperty.prototype.validators;
 /** @type {boolean} */
breeze.IProperty.prototype.isDataProperty;
 /** @type {boolean} */
breeze.IProperty.prototype.isNavigationProperty;
/**
 * @record
 * @struct
 */
breeze.IStructuralType = function() {};
 /** @type {!Array<!breeze.DataProperty>} */
breeze.IStructuralType.prototype.complexProperties;
 /** @type {!Array<!breeze.DataProperty>} */
breeze.IStructuralType.prototype.dataProperties;
 /** @type {string} */
breeze.IStructuralType.prototype.name;
 /** @type {string} */
breeze.IStructuralType.prototype.namespace;
 /** @type {string} */
breeze.IStructuralType.prototype.shortName;
 /** @type {!Array<!breeze.DataProperty>} */
breeze.IStructuralType.prototype.unmappedProperties;
 /** @type {!Array<!breeze.Validator>} */
breeze.IStructuralType.prototype.validators;
/**
 * @constructor
 * @struct
 */
breeze.AutoGeneratedKeyType = function() {};
 /** @type {!breeze.AutoGeneratedKeyType} */
breeze.AutoGeneratedKeyType.Identity;
 /** @type {!breeze.AutoGeneratedKeyType} */
breeze.AutoGeneratedKeyType.KeyGenerator;
 /** @type {!breeze.AutoGeneratedKeyType} */
breeze.AutoGeneratedKeyType.None;
/**
 * @constructor
 * @struct
 */
breeze.ComplexAspect = function() {};
 /** @type {!breeze.ComplexObject} */
breeze.ComplexAspect.prototype.complexObject;
 /** @type {!Object} */
breeze.ComplexAspect.prototype.parent;
 /** @type {!breeze.DataProperty} */
breeze.ComplexAspect.prototype.parentProperty;
 /** @type {!Object} */
breeze.ComplexAspect.prototype.originalValues;

/**
 * @return {!breeze.EntityAspect}
 */
breeze.ComplexAspect.prototype.getEntityAspect = function() {};

/**
 * @param {string} propName
 * @return {string}
 */
breeze.ComplexAspect.prototype.getPropertyPath = function(propName) {};
/**
 * @implements {breeze.IStructuralType}
 * @constructor
 * @struct
 */
breeze.ComplexType = function() {};
 /** @type {!Array<!breeze.DataProperty>} */
breeze.ComplexType.prototype.complexProperties;
 /** @type {!Array<!breeze.DataProperty>} */
breeze.ComplexType.prototype.dataProperties;
 /** @type {string} */
breeze.ComplexType.prototype.name;
 /** @type {string} */
breeze.ComplexType.prototype.namespace;
 /** @type {string} */
breeze.ComplexType.prototype.shortName;
 /** @type {!Array<!breeze.DataProperty>} */
breeze.ComplexType.prototype.unmappedProperties;
 /** @type {!Array<!breeze.Validator>} */
breeze.ComplexType.prototype.validators;

/**
 * @param {!breeze.DataProperty} dataProperty
 * @return {!breeze.ComplexType}
 */
breeze.ComplexType.prototype.addProperty = function(dataProperty) {};

/**
 * @return {!Array<!breeze.DataProperty>}
 */
breeze.ComplexType.prototype.getProperties = function() {};

/**
 * @constructor
 * @struct
 * @param {!breeze.DataPropertyOptions} config
 */
breeze.DataProperty = function(config) {};
 /** @type {string} */
breeze.DataProperty.prototype.complexTypeName;
 /** @type {string} */
breeze.DataProperty.prototype.concurrencyMode;
 /** @type {!breeze.DataTypeSymbol} */
breeze.DataProperty.prototype.dataType;
 /** @type {?} */
breeze.DataProperty.prototype.defaultValue;
 /** @type {boolean} */
breeze.DataProperty.prototype.isComplexProperty;
 /** @type {boolean} */
breeze.DataProperty.prototype.isDataProperty;
 /** @type {boolean} */
breeze.DataProperty.prototype.isInherited;
 /** @type {boolean} */
breeze.DataProperty.prototype.isNavigationProperty;
 /** @type {boolean} */
breeze.DataProperty.prototype.isNullable;
 /** @type {boolean} */
breeze.DataProperty.prototype.isPartOfKey;
 /** @type {boolean} */
breeze.DataProperty.prototype.isUnmapped;
 /** @type {number} */
breeze.DataProperty.prototype.maxLength;
 /** @type {string} */
breeze.DataProperty.prototype.name;
 /** @type {string} */
breeze.DataProperty.prototype.nameOnServer;
 /** @type {string} */
breeze.DataProperty.prototype.displayName;
 /** @type {!breeze.IStructuralType} */
breeze.DataProperty.prototype.parentType;
 /** @type {!breeze.NavigationProperty} */
breeze.DataProperty.prototype.relatedNavigationProperty;
 /** @type {!Array<!breeze.Validator>} */
breeze.DataProperty.prototype.validators;
/**
 * @record
 * @struct
 */
breeze.DataPropertyOptions = function() {};
 /** @type {string} */
breeze.DataPropertyOptions.prototype.complexTypeName;
 /** @type {string} */
breeze.DataPropertyOptions.prototype.concurrencyMode;
 /** @type {?} */
breeze.DataPropertyOptions.prototype.custom;
 /** @type {!breeze.DataTypeSymbol} */
breeze.DataPropertyOptions.prototype.dataType;
 /** @type {?} */
breeze.DataPropertyOptions.prototype.defaultValue;
 /** @type {string} */
breeze.DataPropertyOptions.prototype.displayName;
 /** @type {boolean} */
breeze.DataPropertyOptions.prototype.isNullable;
 /** @type {boolean} */
breeze.DataPropertyOptions.prototype.isPartOfKey;
 /** @type {boolean} */
breeze.DataPropertyOptions.prototype.isScalar;
 /** @type {boolean} */
breeze.DataPropertyOptions.prototype.isUnmapped;
 /** @type {number} */
breeze.DataPropertyOptions.prototype.maxLength;
 /** @type {string} */
breeze.DataPropertyOptions.prototype.name;
 /** @type {string} */
breeze.DataPropertyOptions.prototype.nameOnServer;
 /** @type {!Array<!breeze.Validator>} */
breeze.DataPropertyOptions.prototype.validators;

/**
 * @constructor
 * @struct
 * @param {!breeze.DataServiceOptions} config
 */
breeze.DataService = function(config) {};
 /** @type {!breeze.DataServiceAdapter} */
breeze.DataService.prototype.adapterInstance;
 /** @type {string} */
breeze.DataService.prototype.adapterName;
 /** @type {boolean} */
breeze.DataService.prototype.hasServerMetadata;
 /** @type {string} */
breeze.DataService.prototype.serviceName;
 /** @type {string} */
breeze.DataService.prototype.uriBuilderName;
 /** @type {!breeze.JsonResultsAdapter} */
breeze.DataService.prototype.jsonResultsAdapter;
 /** @type {boolean} */
breeze.DataService.prototype.useJsonp;

/**
 * @param {!breeze.DataServiceOptions} config
 * @return {!breeze.DataService}
 */
breeze.DataService.prototype.using = function(config) {};
/**
 * @record
 * @struct
 */
breeze.DataServiceOptions = function() {};
 /** @type {string} */
breeze.DataServiceOptions.prototype.serviceName;
 /** @type {string} */
breeze.DataServiceOptions.prototype.adapterName;
 /** @type {string} */
breeze.DataServiceOptions.prototype.uriBuilderName;
 /** @type {boolean} */
breeze.DataServiceOptions.prototype.hasServerMetadata;
 /** @type {!breeze.JsonResultsAdapter} */
breeze.DataServiceOptions.prototype.jsonResultsAdapter;
 /** @type {boolean} */
breeze.DataServiceOptions.prototype.useJsonp;
/**
 * @constructor
 * @struct
 */
breeze.DataServiceAdapter = function() {};
 /** @type {!breeze.JsonResultsAdapter} */
breeze.DataServiceAdapter.prototype.JsonResultsAdapter;

/**
 * @param {{interfaceName: string, isDefault: boolean}} interfaceInitializedArgs
 * @return {void}
 */
breeze.DataServiceAdapter.prototype.checkForRecomposition = function(interfaceInitializedArgs) {};

/**
 * @return {void}
 */
breeze.DataServiceAdapter.prototype.initialize = function() {};

/**
 * @param {!breeze.MetadataStore} metadataStore
 * @param {!breeze.DataService} dataService
 * @return {!Promise<?>}
 */
breeze.DataServiceAdapter.prototype.fetchMetadata = function(metadataStore, dataService) {};

/**
 * @param {{getUrl: function(): string, query: !breeze.EntityQuery, dataService: !breeze.DataService}} mappingContext
 * @return {!Promise<?>}
 */
breeze.DataServiceAdapter.prototype.executeQuery = function(mappingContext) {};

/**
 * @param {{resourceName: string, dataService: !breeze.DataService}} saveContext
 * @param {!Object} saveBundle
 * @return {!Promise<!breeze.SaveResult>}
 */
breeze.DataServiceAdapter.prototype.saveChanges = function(saveContext, saveBundle) {};

/**
 * @constructor
 * @struct
 * @param {{name: string, extractResults: function(!Object): ?, extractSaveResults: function(?): !Array<?>, extractKeyMappings: function(?): !Array<!breeze.KeyMapping>, visitNode: function(?, !breeze.QueryContext, !breeze.NodeContext): {entityType: !breeze.EntityType, nodeId: ?, nodeRefId: ?, ignore: boolean}}} config
 */
breeze.JsonResultsAdapter = function(config) {};
 /** @type {string} */
breeze.JsonResultsAdapter.prototype.name;
 /** @type {function(!Object): ?} */
breeze.JsonResultsAdapter.prototype.extractResults;
 /** @type {function(!Object): !Array<?>} */
breeze.JsonResultsAdapter.prototype.extractSaveResults;
 /** @type {function(!Object): !Array<!breeze.KeyMapping>} */
breeze.JsonResultsAdapter.prototype.extractKeyMappings;
 /** @type {function(!Object, !breeze.QueryContext, !breeze.NodeContext): {entityType: !breeze.EntityType, nodeId: ?, nodeRefId: ?, ignore: boolean}} */
breeze.JsonResultsAdapter.prototype.visitNode;
/**
 * @record
 * @struct
 */
breeze.QueryContext = function() {};
 /** @type {string} */
breeze.QueryContext.prototype.url;
 /** @type {(string|!breeze.EntityQuery)} */
breeze.QueryContext.prototype.query;
 /** @type {!breeze.EntityManager} */
breeze.QueryContext.prototype.entityManager;
 /** @type {!breeze.DataService} */
breeze.QueryContext.prototype.dataService;
 /** @type {!breeze.QueryOptions} */
breeze.QueryContext.prototype.queryOptions;
/**
 * @record
 * @struct
 */
breeze.NodeContext = function() {};
 /** @type {string} */
breeze.NodeContext.prototype.nodeType;
 /** @type {string} */
breeze.NodeContext.prototype.propertyName;
/**
 * @extends {breeze.core.EnumSymbol}
 * @constructor
 * @struct
 */
breeze.DataTypeSymbol = function() {};
 /** @type {?} */
breeze.DataTypeSymbol.prototype.defaultValue;
 /** @type {boolean} */
breeze.DataTypeSymbol.prototype.isDate;
 /** @type {boolean} */
breeze.DataTypeSymbol.prototype.isFloat;
 /** @type {boolean} */
breeze.DataTypeSymbol.prototype.isInteger;
 /** @type {boolean} */
breeze.DataTypeSymbol.prototype.isNumeric;
 /** @type {boolean} */
breeze.DataTypeSymbol.prototype.quoteJsonOData;
 /** @type {function(?): !breeze.Validator} */
breeze.DataTypeSymbol.prototype.validatorCtor;
 /** @type {function(?, string): ?} */
breeze.DataTypeSymbol.prototype.parse;
 /** @type {function(?): ?} */
breeze.DataTypeSymbol.prototype.fmtOData;
 /** @type {function(): ?} */
breeze.DataTypeSymbol.prototype.getNext;
 /** @type {function(?): ?} */
breeze.DataTypeSymbol.prototype.normalize;
 /** @type {function(?): ?} */
breeze.DataTypeSymbol.prototype.getConcurrencyValue;
 /** @type {function(?): ?} */
breeze.DataTypeSymbol.prototype.parseRawValue;
/**
 * @extends {breeze.core.IEnum}
 * @record
 * @struct
 */
breeze.DataType = function() {};
 /** @type {!breeze.DataTypeSymbol} */
breeze.DataType.prototype.Binary;
 /** @type {!breeze.DataTypeSymbol} */
breeze.DataType.prototype.Boolean;
 /** @type {!breeze.DataTypeSymbol} */
breeze.DataType.prototype.Byte;
 /** @type {!breeze.DataTypeSymbol} */
breeze.DataType.prototype.DateTime;
 /** @type {!breeze.DataTypeSymbol} */
breeze.DataType.prototype.DateTimeOffset;
 /** @type {!breeze.DataTypeSymbol} */
breeze.DataType.prototype.Decimal;
 /** @type {!breeze.DataTypeSymbol} */
breeze.DataType.prototype.Double;
 /** @type {!breeze.DataTypeSymbol} */
breeze.DataType.prototype.Guid;
 /** @type {!breeze.DataTypeSymbol} */
breeze.DataType.prototype.Int16;
 /** @type {!breeze.DataTypeSymbol} */
breeze.DataType.prototype.Int32;
 /** @type {!breeze.DataTypeSymbol} */
breeze.DataType.prototype.Int64;
 /** @type {!breeze.DataTypeSymbol} */
breeze.DataType.prototype.Single;
 /** @type {!breeze.DataTypeSymbol} */
breeze.DataType.prototype.String;
 /** @type {!breeze.DataTypeSymbol} */
breeze.DataType.prototype.Time;
 /** @type {!breeze.DataTypeSymbol} */
breeze.DataType.prototype.Undefined;
 /** @type {{nextNumber: number, nextNumberIncrement: number, stringPrefix: string}} */
breeze.DataType.prototype.constants;

/**
 * @param {string} typeName
 * @return {!breeze.DataTypeSymbol}
 */
breeze.DataType.prototype.fromEdmDataType = function(typeName) {};

/**
 * @param {?} val
 * @return {!breeze.DataTypeSymbol}
 */
breeze.DataType.prototype.fromValue = function(val) {};

/**
 * @param {!breeze.DataTypeSymbol} dataType
 * @return {function(?): ?}
 */
breeze.DataType.prototype.getComparableFn = function(dataType) {};

/**
 * @param {?} source
 * @return {!Date}
 */
breeze.DataType.prototype.parseDateAsUTC = function(source) {};

/**
 * @param {?} date
 * @return {!Date}
 */
breeze.DataType.prototype.parseDateFromServer = function(date) {};

/**
 * @param {?} val
 * @param {!breeze.DataTypeSymbol=} dataType
 * @return {?}
 */
breeze.DataType.prototype.parseRawValue = function(val, dataType) {};

/**
 * @param {?} source
 * @return {string}
 */
breeze.DataType.prototype.parseTimeFromServer = function(source) {};
 /** @type {?} */
breeze.DataType;
/**
 * @extends {breeze.core.EnumSymbol}
 * @constructor
 * @struct
 */
breeze.EntityActionSymbol = function() {};
/**
 * @extends {breeze.core.IEnum}
 * @record
 * @struct
 */
breeze.EntityAction = function() {};
 /** @type {!breeze.EntityActionSymbol} */
breeze.EntityAction.prototype.AcceptChanges;
 /** @type {!breeze.EntityActionSymbol} */
breeze.EntityAction.prototype.Attach;
 /** @type {!breeze.EntityActionSymbol} */
breeze.EntityAction.prototype.AttachOnImport;
 /** @type {!breeze.EntityActionSymbol} */
breeze.EntityAction.prototype.AttachOnQuery;
 /** @type {!breeze.EntityActionSymbol} */
breeze.EntityAction.prototype.Clear;
 /** @type {!breeze.EntityActionSymbol} */
breeze.EntityAction.prototype.Detach;
 /** @type {!breeze.EntityActionSymbol} */
breeze.EntityAction.prototype.EntityStateChange;
 /** @type {!breeze.EntityActionSymbol} */
breeze.EntityAction.prototype.MergeOnImport;
 /** @type {!breeze.EntityActionSymbol} */
breeze.EntityAction.prototype.MergeOnSave;
 /** @type {!breeze.EntityActionSymbol} */
breeze.EntityAction.prototype.MergeOnQuery;
 /** @type {!breeze.EntityActionSymbol} */
breeze.EntityAction.prototype.PropertyChange;
 /** @type {!breeze.EntityActionSymbol} */
breeze.EntityAction.prototype.RejectChanges;
 /** @type {?} */
breeze.EntityAction;
/**
 * @constructor
 * @struct
 */
breeze.EntityAspect = function() {};
 /** @type {!breeze.Entity} */
breeze.EntityAspect.prototype.entity;
 /** @type {!breeze.EntityManager} */
breeze.EntityAspect.prototype.entityManager;
 /** @type {!breeze.EntityStateSymbol} */
breeze.EntityAspect.prototype.entityState;
 /** @type {boolean} */
breeze.EntityAspect.prototype.isBeingSaved;
 /** @type {!Object} */
breeze.EntityAspect.prototype.originalValues;
 /** @type {!Object} */
breeze.EntityAspect.prototype.extraMetadata;
 /** @type {!breeze.PropertyChangedEvent} */
breeze.EntityAspect.prototype.propertyChanged;
 /** @type {!breeze.ValidationErrorsChangedEvent} */
breeze.EntityAspect.prototype.validationErrorsChanged;
 /** @type {boolean} */
breeze.EntityAspect.prototype.hasValidationErrors;

/**
 * @return {void}
 */
breeze.EntityAspect.prototype.acceptChanges = function() {};

/**
 * @param {!breeze.ValidationError} validationError
 * @return {void}
 */
breeze.EntityAspect.prototype.addValidationError = function(validationError) {};

/**
 * @return {void}
 */
breeze.EntityAspect.prototype.clearValidationErrors = function() {};

/**
 * @param {boolean=} forceRefresh
 * @return {!breeze.EntityKey}
 */
breeze.EntityAspect.prototype.getKey = function(forceRefresh) {};

/**
 * @param {string|!breeze.IProperty=} property
 * @return {!Array<!breeze.ValidationError>}
 */
breeze.EntityAspect.prototype.getValidationErrors = function(property) {};

/**
 * @param {string|!breeze.NavigationProperty} navigationProperty
 * @return {boolean}
 */
breeze.EntityAspect.prototype.isNavigationPropertyLoaded = function(navigationProperty) {};

/**
 * @param {string|!breeze.NavigationProperty} navigationProperty
 * @param {!Function=} callback
 * @param {!Function=} errorCallback
 * @return {!Promise<!breeze.QueryResult>}
 */
breeze.EntityAspect.prototype.loadNavigationProperty = function(navigationProperty, callback, errorCallback) {};

/**
 * @return {void}
 */
breeze.EntityAspect.prototype.rejectChanges = function() {};

/**
 * @param {!breeze.Validator|!breeze.ValidationError} validator_or_validationError
 * @param {!breeze.DataProperty|!breeze.NavigationProperty=} property
 * @return {void}
 */
breeze.EntityAspect.prototype.removeValidationError = function(validator_or_validationError, property) {};

/**
 * @return {void}
 */
breeze.EntityAspect.prototype.setAdded = function() {};

/**
 * @return {void}
 */
breeze.EntityAspect.prototype.setDeleted = function() {};

/**
 * @return {void}
 */
breeze.EntityAspect.prototype.setDetached = function() {};

/**
 * @return {void}
 */
breeze.EntityAspect.prototype.setModified = function() {};

/**
 * @return {void}
 */
breeze.EntityAspect.prototype.setUnchanged = function() {};

/**
 * @param {!breeze.EntityStateSymbol} entityState
 * @return {void}
 */
breeze.EntityAspect.prototype.setEntityState = function(entityState) {};

/**
 * @return {boolean}
 */
breeze.EntityAspect.prototype.validateEntity = function() {};

/**
 * @param {string|!breeze.DataProperty|!breeze.NavigationProperty} property
 * @param {?=} context
 * @return {boolean}
 */
breeze.EntityAspect.prototype.validateProperty = function(property, context) {};
/**
 * @constructor
 * @struct
 */
breeze.PropertyChangedEventArgs = function() {};
 /** @type {!breeze.Entity} */
breeze.PropertyChangedEventArgs.prototype.entity;
 /** @type {!breeze.IProperty} */
breeze.PropertyChangedEventArgs.prototype.property;
 /** @type {string} */
breeze.PropertyChangedEventArgs.prototype.propertyName;
 /** @type {?} */
breeze.PropertyChangedEventArgs.prototype.oldValue;
 /** @type {?} */
breeze.PropertyChangedEventArgs.prototype.newValue;
 /** @type {?} */
breeze.PropertyChangedEventArgs.prototype.parent;
/**
 * @extends {breeze.core.Event}
 * @constructor
 * @struct
 */
breeze.PropertyChangedEvent = function() {};

/**
 * @param {function(!breeze.PropertyChangedEventArgs): void=} callback
 * @return {number}
 */
breeze.PropertyChangedEvent.prototype.subscribe = function(callback) {};
/**
 * @constructor
 * @struct
 */
breeze.ValidationErrorsChangedEventArgs = function() {};
 /** @type {!breeze.Entity} */
breeze.ValidationErrorsChangedEventArgs.prototype.entity;
 /** @type {!Array<!breeze.ValidationError>} */
breeze.ValidationErrorsChangedEventArgs.prototype.added;
 /** @type {!Array<!breeze.ValidationError>} */
breeze.ValidationErrorsChangedEventArgs.prototype.removed;
/**
 * @extends {breeze.core.Event}
 * @constructor
 * @struct
 */
breeze.ValidationErrorsChangedEvent = function() {};

/**
 * @param {function(!breeze.ValidationErrorsChangedEventArgs): void=} callback
 * @return {number}
 */
breeze.ValidationErrorsChangedEvent.prototype.subscribe = function(callback) {};

/**
 * @constructor
 * @struct
 * @param {!breeze.EntityType} entityType
 * @param {?|!Array<?>} keyValue_or_keyValues
 */
breeze.EntityKey = function(entityType, keyValue_or_keyValues) {};
 /** @type {!breeze.EntityType} */
breeze.EntityKey.prototype.entityType;
 /** @type {!Array<?>} */
breeze.EntityKey.prototype.values;

/**
 * @param {!breeze.EntityKey} entityKey
 * @return {boolean}
 */
breeze.EntityKey.prototype.equals = function(entityKey) {};

/**
 * @param {!breeze.EntityKey} k1
 * @param {!breeze.EntityKey} k2
 * @return {boolean}
 */
breeze.EntityKey.equals = function(k1, k2) {};
/**
 * @record
 * @struct
 */
breeze.EntityByKeyResult = function() {};
 /** @type {!breeze.Entity} */
breeze.EntityByKeyResult.prototype.entity;
 /** @type {!breeze.EntityKey} */
breeze.EntityByKeyResult.prototype.entityKey;
 /** @type {boolean} */
breeze.EntityByKeyResult.prototype.fromCache;
/**
 * @record
 * @struct
 */
breeze.ExportEntitiesOptions = function() {};
 /** @type {boolean} */
breeze.ExportEntitiesOptions.prototype.asString;
 /** @type {boolean} */
breeze.ExportEntitiesOptions.prototype.includeMetadata;

/**
 * @constructor
 * @struct
 * @param {!breeze.EntityManagerOptions|string=} config
 */
breeze.EntityManager = function(config) {};
 /** @type {!breeze.DataService} */
breeze.EntityManager.prototype.dataService;
 /** @type {!Function} */
breeze.EntityManager.prototype.keyGeneratorCtor;
 /** @type {!breeze.MetadataStore} */
breeze.EntityManager.prototype.metadataStore;
 /** @type {!breeze.QueryOptions} */
breeze.EntityManager.prototype.queryOptions;
 /** @type {!breeze.SaveOptions} */
breeze.EntityManager.prototype.saveOptions;
 /** @type {string} */
breeze.EntityManager.prototype.serviceName;
 /** @type {!breeze.ValidationOptions} */
breeze.EntityManager.prototype.validationOptions;
 /** @type {!breeze.EntityChangedEvent} */
breeze.EntityManager.prototype.entityChanged;
 /** @type {!breeze.HasChangesChangedEvent} */
breeze.EntityManager.prototype.hasChangesChanged;
 /** @type {!breeze.ValidationErrorsChangedEvent} */
breeze.EntityManager.prototype.validationErrorsChanged;

/**
 * @return {void}
 */
breeze.EntityManager.prototype.acceptChanges = function() {};

/**
 * @param {!breeze.Entity} entity
 * @return {!breeze.Entity}
 */
breeze.EntityManager.prototype.addEntity = function(entity) {};

/**
 * @param {!breeze.Entity} entity
 * @param {!breeze.EntityStateSymbol=} entityState
 * @param {!breeze.MergeStrategySymbol=} mergeStrategy
 * @return {!breeze.Entity}
 */
breeze.EntityManager.prototype.attachEntity = function(entity, entityState, mergeStrategy) {};

/**
 * @return {void}
 */
breeze.EntityManager.prototype.clear = function() {};

/**
 * @return {!breeze.EntityManager}
 */
breeze.EntityManager.prototype.createEmptyCopy = function() {};

/**
 * @param {string|!breeze.EntityType} typeName_or_entityType
 * @param {!Object=} config
 * @param {!breeze.EntityStateSymbol=} entityState
 * @param {!breeze.MergeStrategySymbol=} mergeStrategy
 * @return {!breeze.Entity}
 */
breeze.EntityManager.prototype.createEntity = function(typeName_or_entityType, config, entityState, mergeStrategy) {};

/**
 * @param {!breeze.Entity} entity
 * @return {boolean}
 */
breeze.EntityManager.prototype.detachEntity = function(entity) {};

/**
 * @param {string|!breeze.EntityQuery} query
 * @param {!breeze.ExecuteQuerySuccessCallback=} callback
 * @param {!breeze.ExecuteQueryErrorCallback=} errorCallback
 * @return {!Promise<!breeze.QueryResult>}
 */
breeze.EntityManager.prototype.executeQuery = function(query, callback, errorCallback) {};

/**
 * @param {!breeze.EntityQuery} query
 * @return {!Array<!breeze.Entity>}
 */
breeze.EntityManager.prototype.executeQueryLocally = function(query) {};

/**
 * @param {!Array<!breeze.Entity>=} entities
 * @param {boolean|!breeze.ExportEntitiesOptions=} includeMetadata_or_options
 * @return {string|?}
 */
breeze.EntityManager.prototype.exportEntities = function(entities, includeMetadata_or_options) {};

/**
 * @param {string|!breeze.EntityKey} typeName_or_entityKey
 * @param {?|!Array<?>=} keyValue_or_keyValues
 * @param {boolean=} checkLocalCacheFirst
 * @return {!Promise<!breeze.EntityByKeyResult>}
 */
breeze.EntityManager.prototype.fetchEntityByKey = function(typeName_or_entityKey, keyValue_or_keyValues, checkLocalCacheFirst) {};

/**
 * @param {function(?): void=} callback
 * @param {!breeze.core.ErrorCallback=} errorCallback
 * @return {!Promise<?>}
 */
breeze.EntityManager.prototype.fetchMetadata = function(callback, errorCallback) {};

/**
 * @param {!breeze.Entity} entity
 * @return {?}
 */
breeze.EntityManager.prototype.generateTempKeyValue = function(entity) {};

/**
 * @param {string|!Array<string>|!breeze.EntityType|!Array<!breeze.EntityType>=} entityTypeName_or_entityTypeNames_or_entityType_or_entityTypes
 * @return {!Array<!breeze.Entity>}
 */
breeze.EntityManager.prototype.getChanges = function(entityTypeName_or_entityTypeNames_or_entityType_or_entityTypes) {};

/**
 * @param {string|!Array<string>|!breeze.EntityType|!Array<!breeze.EntityType>=} entityTypeName_or_entityTypeNames_or_entityType_or_entityTypes
 * @param {!breeze.EntityStateSymbol|!Array<!breeze.EntityStateSymbol>=} entityState_or_entityStates
 * @return {!Array<!breeze.Entity>}
 */
breeze.EntityManager.prototype.getEntities = function(entityTypeName_or_entityTypeNames_or_entityType_or_entityTypes, entityState_or_entityStates) {};

/**
 * @param {string|!breeze.EntityKey} typeName_or_entityKey
 * @param {?|!Array<?>=} keyValue_or_keyValues
 * @return {!breeze.Entity}
 */
breeze.EntityManager.prototype.getEntityByKey = function(typeName_or_entityKey, keyValue_or_keyValues) {};

/**
 * @param {string|!Array<string>|!breeze.EntityType|!Array<!breeze.EntityType>=} entityTypeName_or_entityTypeNames_or_entityType_or_entityTypes
 * @return {boolean}
 */
breeze.EntityManager.prototype.hasChanges = function(entityTypeName_or_entityTypeNames_or_entityType_or_entityTypes) {};

/**
 * @param {string|!Object} exportedString_or_exportedData
 * @param {{mergeStrategy: !breeze.MergeStrategySymbol, metadataVersionFn: function(?): void}=} config
 * @return {!breeze.EntityManager}
 */
breeze.EntityManager.importEntities = function(exportedString_or_exportedData, config) {};

/**
 * @param {string|!Object} exportedString_or_exportedData
 * @param {{mergeStrategy: !breeze.MergeStrategySymbol, metadataVersionFn: function(?): void}=} config
 * @return {{entities: !Array<!breeze.Entity>, tempKeyMapping: !Object<string,!breeze.EntityKey>}}
 */
breeze.EntityManager.prototype.importEntities = function(exportedString_or_exportedData, config) {};

/**
 * @return {!Array<!breeze.Entity>}
 */
breeze.EntityManager.prototype.rejectChanges = function() {};

/**
 * @param {!Array<!breeze.Entity>=} entities
 * @param {!breeze.SaveOptions=} saveOptions
 * @param {!breeze.SaveChangesSuccessCallback=} callback
 * @param {!breeze.SaveChangesErrorCallback=} errorCallback
 * @return {!Promise<!breeze.SaveResult>}
 */
breeze.EntityManager.prototype.saveChanges = function(entities, saveOptions, callback, errorCallback) {};

/**
 * @param {!breeze.EntityManagerProperties} config
 * @return {void}
 */
breeze.EntityManager.prototype.setProperties = function(config) {};
/**
 * @record
 * @struct
 */
breeze.EntityManagerOptions = function() {};
 /** @type {string} */
breeze.EntityManagerOptions.prototype.serviceName;
 /** @type {!breeze.DataService} */
breeze.EntityManagerOptions.prototype.dataService;
 /** @type {!breeze.MetadataStore} */
breeze.EntityManagerOptions.prototype.metadataStore;
 /** @type {!breeze.QueryOptions} */
breeze.EntityManagerOptions.prototype.queryOptions;
 /** @type {!breeze.SaveOptions} */
breeze.EntityManagerOptions.prototype.saveOptions;
 /** @type {!breeze.ValidationOptions} */
breeze.EntityManagerOptions.prototype.validationOptions;
 /** @type {!Function} */
breeze.EntityManagerOptions.prototype.keyGeneratorCtor;
/**
 * @record
 * @struct
 */
breeze.EntityManagerProperties = function() {};
 /** @type {string} */
breeze.EntityManagerProperties.prototype.serviceName;
 /** @type {!breeze.DataService} */
breeze.EntityManagerProperties.prototype.dataService;
 /** @type {!breeze.MetadataStore} */
breeze.EntityManagerProperties.prototype.metadataStore;
 /** @type {!breeze.QueryOptions} */
breeze.EntityManagerProperties.prototype.queryOptions;
 /** @type {!breeze.SaveOptions} */
breeze.EntityManagerProperties.prototype.saveOptions;
 /** @type {!breeze.ValidationOptions} */
breeze.EntityManagerProperties.prototype.validationOptions;
 /** @type {!Function} */
breeze.EntityManagerProperties.prototype.keyGeneratorCtor;
/**
 * @record
 * @struct
 */
breeze.ExecuteQuerySuccessCallback = function() {};

/* TODO: CallSignature: breeze */
/**
 * @record
 * @struct
 */
breeze.ExecuteQueryErrorCallback = function() {};

/* TODO: CallSignature: breeze */
/**
 * @record
 * @struct
 */
breeze.SaveChangesSuccessCallback = function() {};

/* TODO: CallSignature: breeze */
/**
 * @record
 * @struct
 */
breeze.EntityError = function() {};
 /** @type {!breeze.Entity} */
breeze.EntityError.prototype.entity;
 /** @type {string} */
breeze.EntityError.prototype.errorMessage;
 /** @type {string} */
breeze.EntityError.prototype.errorName;
 /** @type {boolean} */
breeze.EntityError.prototype.isServerError;
 /** @type {string} */
breeze.EntityError.prototype.propertyName;
/**
 * @record
 * @struct
 */
breeze.SaveChangesErrorCallback = function() {};

/* TODO: CallSignature: breeze */
/**
 * @constructor
 * @struct
 */
breeze.EntityChangedEventArgs = function() {};
 /** @type {!breeze.Entity} */
breeze.EntityChangedEventArgs.prototype.entity;
 /** @type {!breeze.EntityActionSymbol} */
breeze.EntityChangedEventArgs.prototype.entityAction;
 /** @type {!Object} */
breeze.EntityChangedEventArgs.prototype.args;
/**
 * @extends {breeze.core.Event}
 * @constructor
 * @struct
 */
breeze.EntityChangedEvent = function() {};

/**
 * @param {function(!breeze.EntityChangedEventArgs): void=} callback
 * @return {number}
 */
breeze.EntityChangedEvent.prototype.subscribe = function(callback) {};
/**
 * @constructor
 * @struct
 */
breeze.HasChangesChangedEventArgs = function() {};
 /** @type {!breeze.EntityManager} */
breeze.HasChangesChangedEventArgs.prototype.entityManager;
 /** @type {boolean} */
breeze.HasChangesChangedEventArgs.prototype.hasChanges;
/**
 * @extends {breeze.core.Event}
 * @constructor
 * @struct
 */
breeze.HasChangesChangedEvent = function() {};

/**
 * @param {function(!breeze.HasChangesChangedEventArgs): void=} callback
 * @return {number}
 */
breeze.HasChangesChangedEvent.prototype.subscribe = function(callback) {};

/**
 * @constructor
 * @struct
 * Create query from an expression tree
 * @param {string|!Object=} resourceName_or_tree
 */
breeze.EntityQuery = function(resourceName_or_tree) {};
 /** @type {!breeze.EntityManager} */
breeze.EntityQuery.prototype.entityManager;
 /** @type {!breeze.OrderByClause} */
breeze.EntityQuery.prototype.orderByClause;
 /** @type {!Object} */
breeze.EntityQuery.prototype.parameters;
 /** @type {!breeze.QueryOptions} */
breeze.EntityQuery.prototype.queryOptions;
 /** @type {string} */
breeze.EntityQuery.prototype.resourceName;
 /** @type {!breeze.EntityType} */
breeze.EntityQuery.prototype.resultEntityType;
 /** @type {number} */
breeze.EntityQuery.prototype.skipCount;
 /** @type {number} */
breeze.EntityQuery.prototype.takeCount;
 /** @type {!breeze.Predicate} */
breeze.EntityQuery.prototype.wherePredicate;

/**
 * @param {!breeze.ExecuteQuerySuccessCallback=} callback
 * @param {!breeze.ExecuteQueryErrorCallback=} errorCallback
 * @return {!Promise<!breeze.QueryResult>}
 */
breeze.EntityQuery.prototype.execute = function(callback, errorCallback) {};

/**
 * @return {!Array<!breeze.Entity>}
 */
breeze.EntityQuery.prototype.executeLocally = function() {};

/**
 * @param {!Array<string>|string} propertyPaths
 * @return {!breeze.EntityQuery}
 */
breeze.EntityQuery.prototype.expand = function(propertyPaths) {};

/**
 * @param {string} resourceName
 * @return {!breeze.EntityQuery}
 */
breeze.EntityQuery.from = function(resourceName) {};

/**
 * @param {string} resourceName
 * @return {!breeze.EntityQuery}
 */
breeze.EntityQuery.prototype.from = function(resourceName) {};

/**
 * @param {!breeze.Entity|!Array<!breeze.Entity>} entity_or_entities
 * @return {!breeze.EntityQuery}
 */
breeze.EntityQuery.fromEntities = function(entity_or_entities) {};

/**
 * @param {!breeze.EntityKey} entityKey
 * @return {!breeze.EntityQuery}
 */
breeze.EntityQuery.fromEntityKey = function(entityKey) {};

/**
 * @param {!breeze.Entity} entity
 * @param {!breeze.NavigationProperty} navigationProperty
 * @return {!breeze.EntityQuery}
 */
breeze.EntityQuery.fromEntityNavigation = function(entity, navigationProperty) {};

/**
 * @param {boolean=} enabled
 * @return {!breeze.EntityQuery}
 */
breeze.EntityQuery.prototype.inlineCount = function(enabled) {};

/**
 * @param {boolean=} enabled
 * @return {!breeze.EntityQuery}
 */
breeze.EntityQuery.prototype.noTracking = function(enabled) {};

/**
 * @param {string|!Array<string>} propertyPaths
 * @param {boolean=} isDescending
 * @return {!breeze.EntityQuery}
 */
breeze.EntityQuery.prototype.orderBy = function(propertyPaths, isDescending) {};

/**
 * @param {string|!Array<string>} propertyPaths
 * @return {!breeze.EntityQuery}
 */
breeze.EntityQuery.prototype.orderByDesc = function(propertyPaths) {};

/**
 * @param {string|!Array<string>} propertyPaths
 * @return {!breeze.EntityQuery}
 */
breeze.EntityQuery.prototype.select = function(propertyPaths) {};

/**
 * @param {number} count
 * @return {!breeze.EntityQuery}
 */
breeze.EntityQuery.prototype.skip = function(count) {};

/**
 * @param {number} count
 * @return {!breeze.EntityQuery}
 */
breeze.EntityQuery.prototype.take = function(count) {};

/**
 * @param {number} count
 * @return {!breeze.EntityQuery}
 */
breeze.EntityQuery.prototype.top = function(count) {};

/**
 * @param {string|!breeze.EntityType} typeName_or_type
 * @return {!breeze.EntityQuery}
 */
breeze.EntityQuery.prototype.toType = function(typeName_or_type) {};

/**
 * @param {!breeze.EntityManager|!breeze.DataService|!breeze.JsonResultsAdapter|!breeze.QueryOptions|!breeze.MergeStrategySymbol|!breeze.FetchStrategySymbol} obj
 * @return {!breeze.EntityQuery}
 */
breeze.EntityQuery.prototype.using = function(obj) {};

/**
 * @param {!breeze.Predicate|string|!breeze.FilterQueryOpSymbol|!breeze.IRecursiveArray<(string|number|!breeze.Predicate|!breeze.FilterQueryOpSymbol)>} predicate_or_property_or_anArray
 * @param {string|!breeze.FilterQueryOpSymbol=} operator_or_filterop
 * @param {?|string=} value_or_property2
 * @param {!breeze.FilterQueryOpSymbol|string=} filterop2
 * @param {?=} value
 * @return {!breeze.EntityQuery}
 */
breeze.EntityQuery.prototype.where = function(predicate_or_property_or_anArray, operator_or_filterop, value_or_property2, filterop2, value) {};

/**
 * @param {!Object} params
 * @return {!breeze.EntityQuery}
 */
breeze.EntityQuery.prototype.withParameters = function(params) {};

/**
 * @return {string}
 */
breeze.EntityQuery.prototype.toJSON = function() {};
/**
 * @record
 * @struct
 */
breeze.OrderByClause = function() {};
/**
 * @extends {breeze.core.EnumSymbol}
 * @constructor
 * @struct
 */
breeze.EntityStateSymbol = function() {};

/**
 * @return {boolean}
 */
breeze.EntityStateSymbol.prototype.isAdded = function() {};

/**
 * @return {boolean}
 */
breeze.EntityStateSymbol.prototype.isAddedModifiedOrDeleted = function() {};

/**
 * @return {boolean}
 */
breeze.EntityStateSymbol.prototype.isDeleted = function() {};

/**
 * @return {boolean}
 */
breeze.EntityStateSymbol.prototype.isDetached = function() {};

/**
 * @return {boolean}
 */
breeze.EntityStateSymbol.prototype.isModified = function() {};

/**
 * @return {boolean}
 */
breeze.EntityStateSymbol.prototype.isUnchanged = function() {};

/**
 * @return {boolean}
 */
breeze.EntityStateSymbol.prototype.isUnchangedOrModified = function() {};
/**
 * @extends {breeze.core.IEnum}
 * @record
 * @struct
 */
breeze.EntityState = function() {};
 /** @type {!breeze.EntityStateSymbol} */
breeze.EntityState.prototype.Added;
 /** @type {!breeze.EntityStateSymbol} */
breeze.EntityState.prototype.Deleted;
 /** @type {!breeze.EntityStateSymbol} */
breeze.EntityState.prototype.Detached;
 /** @type {!breeze.EntityStateSymbol} */
breeze.EntityState.prototype.Modified;
 /** @type {!breeze.EntityStateSymbol} */
breeze.EntityState.prototype.Unchanged;
 /** @type {?} */
breeze.EntityState;

/**
 * @constructor
 * @struct
 * @param {!breeze.MetadataStore|!breeze.EntityTypeOptions} config
 */
breeze.EntityType = function(config) {};
 /** @type {!breeze.AutoGeneratedKeyType} */
breeze.EntityType.prototype.autoGeneratedKeyType;
 /** @type {!breeze.EntityType} */
breeze.EntityType.prototype.baseEntityType;
 /** @type {!Array<!breeze.DataProperty>} */
breeze.EntityType.prototype.complexProperties;
 /** @type {!Array<!breeze.DataProperty>} */
breeze.EntityType.prototype.concurrencyProperties;
 /** @type {!Array<!breeze.DataProperty>} */
breeze.EntityType.prototype.dataProperties;
 /** @type {string} */
breeze.EntityType.prototype.defaultResourceName;
 /** @type {!Array<!breeze.DataProperty>} */
breeze.EntityType.prototype.foreignKeyProperties;
 /** @type {boolean} */
breeze.EntityType.prototype.isAbstract;
 /** @type {!Array<!breeze.DataProperty>} */
breeze.EntityType.prototype.keyProperties;
 /** @type {!breeze.MetadataStore} */
breeze.EntityType.prototype.metadataStore;
 /** @type {string} */
breeze.EntityType.prototype.name;
 /** @type {string} */
breeze.EntityType.prototype.namespace;
 /** @type {!Array<!breeze.NavigationProperty>} */
breeze.EntityType.prototype.navigationProperties;
 /** @type {string} */
breeze.EntityType.prototype.shortName;
 /** @type {!Array<!breeze.DataProperty>} */
breeze.EntityType.prototype.unmappedProperties;
 /** @type {!Array<!breeze.Validator>} */
breeze.EntityType.prototype.validators;

/**
 * @param {!breeze.IProperty} property
 * @return {void}
 */
breeze.EntityType.prototype.addProperty = function(property) {};

/**
 * @param {!breeze.Validator} validator
 * @param {!breeze.IProperty=} property
 * @return {void}
 */
breeze.EntityType.prototype.addValidator = function(validator, property) {};

/**
 * @param {!Object=} initialValues
 * @return {!breeze.Entity}
 */
breeze.EntityType.prototype.createEntity = function(initialValues) {};

/**
 * @return {!Function}
 */
breeze.EntityType.prototype.getCtor = function() {};

/**
 * @param {string} propertyName
 * @return {!breeze.DataProperty}
 */
breeze.EntityType.prototype.getDataProperty = function(propertyName) {};

/**
 * @param {string} propertyName
 * @return {!breeze.NavigationProperty}
 */
breeze.EntityType.prototype.getNavigationProperty = function(propertyName) {};

/**
 * @return {!Array<!breeze.IProperty>}
 */
breeze.EntityType.prototype.getProperties = function() {};

/**
 * @param {string} propertyPath
 * @param {boolean=} throwIfNotFound
 * @return {!breeze.IProperty}
 */
breeze.EntityType.prototype.getProperty = function(propertyPath, throwIfNotFound) {};

/**
 * @return {!Array<string>}
 */
breeze.EntityType.prototype.getPropertyNames = function() {};

/**
 * @return {!Array<!breeze.EntityType>}
 */
breeze.EntityType.prototype.getSelfAndSubtypes = function() {};

/**
 * @param {!breeze.EntityType} entityType
 * @return {boolean}
 */
breeze.EntityType.prototype.isSubtypeOf = function(entityType) {};

/**
 * @param {!breeze.EntityTypeProperties} config
 * @return {void}
 */
breeze.EntityType.prototype.setProperties = function(config) {};

/**
 * @return {string}
 */
breeze.EntityType.prototype.toString = function() {};
/**
 * @record
 * @struct
 */
breeze.EntityTypeOptions = function() {};
 /** @type {string} */
breeze.EntityTypeOptions.prototype.shortName;
 /** @type {string} */
breeze.EntityTypeOptions.prototype.namespace;
 /** @type {!breeze.AutoGeneratedKeyType} */
breeze.EntityTypeOptions.prototype.autoGeneratedKeyType;
 /** @type {string} */
breeze.EntityTypeOptions.prototype.defaultResourceName;
 /** @type {!Array<!breeze.DataProperty>} */
breeze.EntityTypeOptions.prototype.dataProperties;
 /** @type {!Array<!breeze.NavigationProperty>} */
breeze.EntityTypeOptions.prototype.navigationProperties;
/**
 * @record
 * @struct
 */
breeze.EntityTypeProperties = function() {};
 /** @type {!breeze.AutoGeneratedKeyType} */
breeze.EntityTypeProperties.prototype.autoGeneratedKeyType;
 /** @type {string} */
breeze.EntityTypeProperties.prototype.defaultResourceName;
 /** @type {function(!breeze.DataProperty, ?): ?} */
breeze.EntityTypeProperties.prototype.serializerFn;
/**
 * @extends {breeze.core.EnumSymbol}
 * @constructor
 * @struct
 */
breeze.FetchStrategySymbol = function() {};
 /** @type {?} */
breeze.FetchStrategySymbol.prototype.foo;
/**
 * @extends {breeze.core.IEnum}
 * @record
 * @struct
 */
breeze.FetchStrategy = function() {};
 /** @type {!breeze.FetchStrategySymbol} */
breeze.FetchStrategy.prototype.FromLocalCache;
 /** @type {!breeze.FetchStrategySymbol} */
breeze.FetchStrategy.prototype.FromServer;
 /** @type {?} */
breeze.FetchStrategy;
/**
 * @extends {breeze.core.EnumSymbol}
 * @constructor
 * @struct
 */
breeze.FilterQueryOpSymbol = function() {};
/**
 * @extends {breeze.core.IEnum}
 * @record
 * @struct
 */
breeze.FilterQueryOp = function() {};
 /** @type {!breeze.FilterQueryOpSymbol} */
breeze.FilterQueryOp.prototype.Contains;
 /** @type {!breeze.FilterQueryOpSymbol} */
breeze.FilterQueryOp.prototype.EndsWith;
 /** @type {!breeze.FilterQueryOpSymbol} */
breeze.FilterQueryOp.prototype.Equals;
 /** @type {!breeze.FilterQueryOpSymbol} */
breeze.FilterQueryOp.prototype.GreaterThan;
 /** @type {!breeze.FilterQueryOpSymbol} */
breeze.FilterQueryOp.prototype.GreaterThanOrEqual;
 /** @type {!breeze.FilterQueryOpSymbol} */
breeze.FilterQueryOp.prototype.IsTypeOf;
 /** @type {!breeze.FilterQueryOpSymbol} */
breeze.FilterQueryOp.prototype.LessThan;
 /** @type {!breeze.FilterQueryOpSymbol} */
breeze.FilterQueryOp.prototype.LessThanOrEqual;
 /** @type {!breeze.FilterQueryOpSymbol} */
breeze.FilterQueryOp.prototype.NotEquals;
 /** @type {!breeze.FilterQueryOpSymbol} */
breeze.FilterQueryOp.prototype.StartsWith;
 /** @type {!breeze.FilterQueryOpSymbol} */
breeze.FilterQueryOp.prototype.Any;
 /** @type {!breeze.FilterQueryOpSymbol} */
breeze.FilterQueryOp.prototype.All;
 /** @type {?} */
breeze.FilterQueryOp;

/**
 * @constructor
 * @struct
 * @param {{name: string, isCaseSensitive: boolean, usesSql92CompliantStringComparison: boolean}} config
 */
breeze.LocalQueryComparisonOptions = function(config) {};
 /** @type {!breeze.LocalQueryComparisonOptions} */
breeze.LocalQueryComparisonOptions.caseInsensitiveSQL;
 /** @type {!breeze.LocalQueryComparisonOptions} */
breeze.LocalQueryComparisonOptions.defaultInstance;

/**
 * @return {void}
 */
breeze.LocalQueryComparisonOptions.prototype.setAsDefault = function() {};
/**
 * @extends {breeze.core.EnumSymbol}
 * @constructor
 * @struct
 */
breeze.MergeStrategySymbol = function() {};
/**
 * @extends {breeze.core.IEnum}
 * @record
 * @struct
 */
breeze.MergeStrategy = function() {};
 /** @type {!breeze.MergeStrategySymbol} */
breeze.MergeStrategy.prototype.OverwriteChanges;
 /** @type {!breeze.MergeStrategySymbol} */
breeze.MergeStrategy.prototype.PreserveChanges;
 /** @type {!breeze.MergeStrategySymbol} */
breeze.MergeStrategy.prototype.SkipMerge;
 /** @type {!breeze.MergeStrategySymbol} */
breeze.MergeStrategy.prototype.Disallowed;
 /** @type {?} */
breeze.MergeStrategy;

/**
 * @constructor
 * @struct
 * @param {!breeze.MetadataStoreOptions=} config
 */
breeze.MetadataStore = function(config) {};
 /** @type {!breeze.NamingConvention} */
breeze.MetadataStore.prototype.namingConvention;

/**
 * @param {!breeze.DataService} dataService
 * @param {boolean=} shouldOverwrite
 * @return {void}
 */
breeze.MetadataStore.prototype.addDataService = function(dataService, shouldOverwrite) {};

/**
 * @param {!breeze.IStructuralType} structuralType
 * @return {void}
 */
breeze.MetadataStore.prototype.addEntityType = function(structuralType) {};

/**
 * @return {string}
 */
breeze.MetadataStore.prototype.exportMetadata = function() {};

/**
 * @param {string|!breeze.DataService} dataService
 * @param {function(?): void=} callback
 * @param {!breeze.core.ErrorCallback=} errorCallback
 * @return {!Promise<?>}
 */
breeze.MetadataStore.prototype.fetchMetadata = function(dataService, callback, errorCallback) {};

/**
 * @param {string} serviceName
 * @return {!breeze.DataService}
 */
breeze.MetadataStore.prototype.getDataService = function(serviceName) {};

/**
 * @param {string} entityTypeName
 * @param {boolean=} okIfNotFound
 * @return {!breeze.IStructuralType}
 */
breeze.MetadataStore.prototype.getEntityType = function(entityTypeName, okIfNotFound) {};

/**
 * @return {!Array<!breeze.IStructuralType>}
 */
breeze.MetadataStore.prototype.getEntityTypes = function() {};

/**
 * @param {string} serviceName
 * @return {boolean}
 */
breeze.MetadataStore.prototype.hasMetadataFor = function(serviceName) {};

/**
 * @param {string} exportedString
 * @return {!breeze.MetadataStore}
 */
breeze.MetadataStore.importMetadata = function(exportedString) {};

/**
 * @param {string} typeName
 * @return {string}
 */
breeze.MetadataStore.normalizeTypeName = function(typeName) {};

/**
 * @param {string} exportedString
 * @param {boolean=} allowMerge
 * @return {!breeze.MetadataStore}
 */
breeze.MetadataStore.prototype.importMetadata = function(exportedString, allowMerge) {};

/**
 * @return {boolean}
 */
breeze.MetadataStore.prototype.isEmpty = function() {};

/**
 * @param {string} entityTypeName
 * @param {!Function} entityCtor
 * @param {function(!breeze.Entity): void=} initializationFn
 * @param {function(!Object, !breeze.EntityType): !Object=} noTrackingFn
 * @return {void}
 */
breeze.MetadataStore.prototype.registerEntityTypeCtor = function(entityTypeName, entityCtor, initializationFn, noTrackingFn) {};

/**
 * @param {!Function} entityCtor
 * @param {!Function=} interceptor
 * @return {void}
 */
breeze.MetadataStore.prototype.trackUnmappedType = function(entityCtor, interceptor) {};

/**
 * @param {string} resourceName
 * @param {!breeze.EntityType|string} entityType_or_entityTypeName
 * @return {void}
 */
breeze.MetadataStore.prototype.setEntityTypeForResourceName = function(resourceName, entityType_or_entityTypeName) {};

/**
 * @param {string} resourceName
 * @return {string}
 */
breeze.MetadataStore.prototype.getEntityTypeNameForResourceName = function(resourceName) {};

/**
 * @param {{name: string, serializerFn: !Function}} config
 * @return {void}
 */
breeze.MetadataStore.prototype.setProperties = function(config) {};
/**
 * @record
 * @struct
 */
breeze.MetadataStoreOptions = function() {};
 /** @type {!breeze.NamingConvention} */
breeze.MetadataStoreOptions.prototype.namingConvention;
 /** @type {!breeze.LocalQueryComparisonOptions} */
breeze.MetadataStoreOptions.prototype.localQueryComparisonOptions;

/**
 * @constructor
 * @struct
 * @param {!breeze.NamingConventionOptions} config
 */
breeze.NamingConvention = function(config) {};
 /** @type {!breeze.NamingConvention} */
breeze.NamingConvention.camelCase;
 /** @type {!breeze.NamingConvention} */
breeze.NamingConvention.defaultInstance;
 /** @type {!breeze.NamingConvention} */
breeze.NamingConvention.none;

/**
 * @param {string} clientPropertyName
 * @param {!breeze.IProperty=} property
 * @return {string}
 */
breeze.NamingConvention.prototype.clientPropertyNameToServer = function(clientPropertyName, property) {};

/**
 * @param {string} serverPropertyName
 * @param {!breeze.IProperty=} property
 * @return {string}
 */
breeze.NamingConvention.prototype.serverPropertyNameToClient = function(serverPropertyName, property) {};

/**
 * @return {!breeze.NamingConvention}
 */
breeze.NamingConvention.prototype.setAsDefault = function() {};
/**
 * @record
 * @struct
 */
breeze.NamingConventionOptions = function() {};
 /** @type {function(string): string} */
breeze.NamingConventionOptions.prototype.serverPropertyNameToClient;
 /** @type {function(string): string} */
breeze.NamingConventionOptions.prototype.clientPropertyNameToServer;

/**
 * @constructor
 * @struct
 * @param {!breeze.NavigationPropertyOptions} config
 */
breeze.NavigationProperty = function(config) {};
 /** @type {string} */
breeze.NavigationProperty.prototype.associationName;
 /** @type {!breeze.EntityType} */
breeze.NavigationProperty.prototype.entityType;
 /** @type {!Array<string>} */
breeze.NavigationProperty.prototype.foreignKeyNames;
 /** @type {!breeze.NavigationProperty} */
breeze.NavigationProperty.prototype.inverse;
 /** @type {boolean} */
breeze.NavigationProperty.prototype.isDataProperty;
 /** @type {boolean} */
breeze.NavigationProperty.prototype.isNavigationProperty;
 /** @type {boolean} */
breeze.NavigationProperty.prototype.isScalar;
 /** @type {string} */
breeze.NavigationProperty.prototype.name;
 /** @type {string} */
breeze.NavigationProperty.prototype.nameOnServer;
 /** @type {string} */
breeze.NavigationProperty.prototype.displayName;
 /** @type {!breeze.IStructuralType} */
breeze.NavigationProperty.prototype.parentType;
 /** @type {!Array<!breeze.DataProperty>} */
breeze.NavigationProperty.prototype.relatedDataProperties;
 /** @type {!Array<!breeze.Validator>} */
breeze.NavigationProperty.prototype.validators;
/**
 * @record
 * @struct
 */
breeze.NavigationPropertyOptions = function() {};
 /** @type {string} */
breeze.NavigationPropertyOptions.prototype.name;
 /** @type {string} */
breeze.NavigationPropertyOptions.prototype.nameOnServer;
 /** @type {string} */
breeze.NavigationPropertyOptions.prototype.entityTypeName;
 /** @type {boolean} */
breeze.NavigationPropertyOptions.prototype.isScalar;
 /** @type {string} */
breeze.NavigationPropertyOptions.prototype.associationName;
 /** @type {!Array<string>} */
breeze.NavigationPropertyOptions.prototype.foreignKeyNames;
 /** @type {!Array<string>} */
breeze.NavigationPropertyOptions.prototype.foreignKeyNamesOnServer;
 /** @type {!Array<!breeze.Validator>} */
breeze.NavigationPropertyOptions.prototype.validators;
/**
 * @record
 * @struct
 */
breeze.IRecursiveArray = function() {};

/* TODO: IndexSignature: breeze */

/**
 * @constructor
 * @struct
 * @param {string|!breeze.Predicate|!breeze.IRecursiveArray<(string|number|!breeze.Predicate|!breeze.FilterQueryOpSymbol)>=} property_or_passthru_or_predicate_or_anArray
 * @param {string|!breeze.FilterQueryOpSymbol=} operator_or_filterop
 * @param {?|{value: ?, isLiteral: boolean, dataType: ?}|string=} value_or_property2
 * @param {!breeze.FilterQueryOpSymbol|string=} filterop2
 * @param {?=} value
 */
breeze.Predicate = function(property_or_passthru_or_predicate_or_anArray, operator_or_filterop, value_or_property2, filterop2, value) {};
 /** @type {!breeze.PredicateMethod} */
breeze.Predicate.prototype.and;
 /** @type {!breeze.PredicateMethod} */
breeze.Predicate.and;
 /** @type {!breeze.PredicateMethod} */
breeze.Predicate.create;
 /** @type {!breeze.PredicateMethod} */
breeze.Predicate.or;
 /** @type {!breeze.PredicateMethod} */
breeze.Predicate.prototype.or;

/**
 * @param {?} o
 * @return {boolean}
 */
breeze.Predicate.isPredicate = function(o) {};

/**
 * @param {!breeze.Predicate} predicate
 * @return {!breeze.Predicate}
 */
breeze.Predicate.not = function(predicate) {};

/**
 * @return {!breeze.Predicate}
 */
breeze.Predicate.prototype.not = function() {};

/**
 * @return {!Function}
 */
breeze.Predicate.prototype.toFunction = function() {};

/**
 * @return {string}
 */
breeze.Predicate.prototype.toString = function() {};

/**
 * @param {!breeze.EntityType} entityType
 * @return {void}
 */
breeze.Predicate.prototype.validate = function(entityType) {};

/**
 * @return {string}
 */
breeze.Predicate.prototype.toJSON = function() {};
/**
 * @record
 * @struct
 */
breeze.PredicateMethod = function() {};

/* TODO: CallSignature: breeze */

/* TODO: CallSignature: breeze */

/* TODO: CallSignature: breeze */

/* TODO: CallSignature: breeze */

/* TODO: CallSignature: breeze */

/* TODO: CallSignature: breeze */

/**
 * @constructor
 * @struct
 * @param {!breeze.QueryOptionsConfiguration=} config
 */
breeze.QueryOptions = function(config) {};
 /** @type {!breeze.QueryOptions} */
breeze.QueryOptions.defaultInstance;
 /** @type {!breeze.FetchStrategySymbol} */
breeze.QueryOptions.prototype.fetchStrategy;
 /** @type {!breeze.MergeStrategySymbol} */
breeze.QueryOptions.prototype.mergeStrategy;
 /** @type {boolean} */
breeze.QueryOptions.prototype.includeDeleted;

/**
 * @return {void}
 */
breeze.QueryOptions.prototype.setAsDefault = function() {};

/**
 * @param {!breeze.QueryOptionsConfiguration|!breeze.MergeStrategySymbol|!breeze.FetchStrategySymbol} config
 * @return {!breeze.QueryOptions}
 */
breeze.QueryOptions.prototype.using = function(config) {};
/**
 * @record
 * @struct
 */
breeze.QueryOptionsConfiguration = function() {};
 /** @type {!breeze.FetchStrategySymbol} */
breeze.QueryOptionsConfiguration.prototype.fetchStrategy;
 /** @type {!breeze.MergeStrategySymbol} */
breeze.QueryOptionsConfiguration.prototype.mergeStrategy;
/**
 * @record
 * @struct
 */
breeze.HttpResponse = function() {};
 /** @type {?} */
breeze.HttpResponse.prototype.config;
 /** @type {!Array<!breeze.Entity>} */
breeze.HttpResponse.prototype.data;
 /** @type {?} */
breeze.HttpResponse.prototype.error;
 /** @type {?} */
breeze.HttpResponse.prototype.saveContext;
 /** @type {number} */
breeze.HttpResponse.prototype.status;

/**
 * @param {string} headerName
 * @return {string}
 */
breeze.HttpResponse.prototype.getHeaders = function(headerName) {};
/**
 * @record
 * @struct
 */
breeze.QueryResult = function() {};
 /** @type {!Array<!breeze.Entity>} */
breeze.QueryResult.prototype.results;
 /** @type {!breeze.EntityQuery} */
breeze.QueryResult.prototype.query;
 /** @type {!breeze.HttpResponse} */
breeze.QueryResult.prototype.httpResponse;
 /** @type {!breeze.EntityManager} */
breeze.QueryResult.prototype.entityManager;
 /** @type {number} */
breeze.QueryResult.prototype.inlineCount;
 /** @type {!Array<!breeze.Entity>} */
breeze.QueryResult.prototype.retrievedEntities;

/**
 * @constructor
 * @struct
 * @param {{allowConcurrentSaves: boolean, resourceName: string, dataService: !breeze.DataService, tag: ?}=} config
 */
breeze.SaveOptions = function(config) {};
 /** @type {boolean} */
breeze.SaveOptions.prototype.allowConcurrentSaves;
 /** @type {string} */
breeze.SaveOptions.prototype.resourceName;
 /** @type {!breeze.DataService} */
breeze.SaveOptions.prototype.dataService;
 /** @type {!Object} */
breeze.SaveOptions.prototype.tag;
 /** @type {!breeze.SaveOptions} */
breeze.SaveOptions.defaultInstance;

/**
 * @return {!breeze.SaveOptions}
 */
breeze.SaveOptions.prototype.setAsDefault = function() {};

/**
 * @param {!breeze.SaveOptionsConfiguration} config
 * @return {!breeze.SaveOptions}
 */
breeze.SaveOptions.prototype.using = function(config) {};
/**
 * @record
 * @struct
 */
breeze.SaveOptionsConfiguration = function() {};
 /** @type {boolean} */
breeze.SaveOptionsConfiguration.prototype.allowConcurrentSaves;
 /** @type {string} */
breeze.SaveOptionsConfiguration.prototype.resourceName;
 /** @type {!breeze.DataService} */
breeze.SaveOptionsConfiguration.prototype.dataService;
 /** @type {!Object} */
breeze.SaveOptionsConfiguration.prototype.tag;
/**
 * @record
 * @struct
 */
breeze.SaveResult = function() {};
 /** @type {!Array<!breeze.Entity>} */
breeze.SaveResult.prototype.entities;
 /** @type {!Array<!breeze.KeyMapping>} */
breeze.SaveResult.prototype.keyMappings;
 /** @type {!XMLHttpRequest} */
breeze.SaveResult.prototype.XHR;
/**
 * @record
 * @struct
 */
breeze.KeyMapping = function() {};
 /** @type {string} */
breeze.KeyMapping.prototype.entityTypeName;
 /** @type {?} */
breeze.KeyMapping.prototype.tempValue;
 /** @type {?} */
breeze.KeyMapping.prototype.realValue;

/**
 * @constructor
 * @struct
 * @param {!breeze.Validator} validator
 * @param {?} context
 * @param {string} errorMessage
 * @param {string} key
 */
breeze.ValidationError = function(validator, context, errorMessage, key) {};
 /** @type {string} */
breeze.ValidationError.prototype.key;
 /** @type {?} */
breeze.ValidationError.prototype.context;
 /** @type {string} */
breeze.ValidationError.prototype.errorMessage;
 /** @type {!breeze.IProperty} */
breeze.ValidationError.prototype.property;
 /** @type {string} */
breeze.ValidationError.prototype.propertyName;
 /** @type {!breeze.Validator} */
breeze.ValidationError.prototype.validator;
 /** @type {function(!breeze.Validator, string): string} */
breeze.ValidationError.prototype.getKey;

/**
 * @constructor
 * @struct
 * @param {!breeze.ValidationOptionsConfiguration=} config
 */
breeze.ValidationOptions = function(config) {};
 /** @type {!breeze.ValidationOptions} */
breeze.ValidationOptions.defaultInstance;
 /** @type {boolean} */
breeze.ValidationOptions.prototype.validateOnAttach;
 /** @type {boolean} */
breeze.ValidationOptions.prototype.validateOnPropertyChange;
 /** @type {boolean} */
breeze.ValidationOptions.prototype.validateOnQuery;
 /** @type {boolean} */
breeze.ValidationOptions.prototype.validateOnSave;

/**
 * @return {!breeze.ValidationOptions}
 */
breeze.ValidationOptions.prototype.setAsDefault = function() {};

/**
 * @param {!breeze.ValidationOptionsConfiguration} config
 * @return {!breeze.ValidationOptions}
 */
breeze.ValidationOptions.prototype.using = function(config) {};
/**
 * @record
 * @struct
 */
breeze.ValidationOptionsConfiguration = function() {};
 /** @type {boolean} */
breeze.ValidationOptionsConfiguration.prototype.validateOnAttach;
 /** @type {boolean} */
breeze.ValidationOptionsConfiguration.prototype.validateOnSave;
 /** @type {boolean} */
breeze.ValidationOptionsConfiguration.prototype.validateOnQuery;
 /** @type {boolean} */
breeze.ValidationOptionsConfiguration.prototype.validateOnPropertyChange;

/**
 * @constructor
 * @struct
 * @param {string} name
 * @param {!breeze.ValidatorFunction} validatorFn
 * @param {?=} context
 */
breeze.Validator = function(name, validatorFn, context) {};
 /** @type {?} */
breeze.Validator.messageTemplates;
 /** @type {?} */
breeze.Validator.prototype.context;
 /** @type {string} */
breeze.Validator.prototype.name;

/**
 * @return {!breeze.Validator}
 */
breeze.Validator.bool = function() {};

/**
 * integer between 0 and 255 inclusive
 * @param {{messageTemplate: string}=} context
 * @return {!breeze.Validator}
 */
breeze.Validator.byte = function(context) {};

/**
 * @return {!breeze.Validator}
 */
breeze.Validator.date = function() {};

/**
 * Returns a ISO 8601 duration string Validator.
 * @return {!breeze.Validator}
 */
breeze.Validator.duration = function() {};

/**
 * Validators number, double, and single are all the same
 * @param {{messageTemplate: string}=} context
 * @return {!breeze.Validator}
 */
breeze.Validator.number = function(context) {};

/**
 * Validators number, double, and single are all the same
 * @param {{messageTemplate: string}=} context
 * @return {!breeze.Validator}
 */
breeze.Validator.double = function(context) {};

/**
 * Validators number, double, and single are all the same
 * @param {{messageTemplate: string}=} context
 * @return {!breeze.Validator}
 */
breeze.Validator.single = function(context) {};

/**
 * @return {!breeze.Validator}
 */
breeze.Validator.guid = function() {};

/**
 * @param {{messageTemplate: string}=} context
 * @return {!breeze.Validator}
 */
breeze.Validator.int16 = function(context) {};

/**
 * @param {{messageTemplate: string}=} context
 * @return {!breeze.Validator}
 */
breeze.Validator.int32 = function(context) {};

/**
 * @param {{messageTemplate: string}=} context
 * @return {!breeze.Validator}
 */
breeze.Validator.int64 = function(context) {};

/**
 * Same as int64
 * @param {{messageTemplate: string}=} context
 * @return {!breeze.Validator}
 */
breeze.Validator.integer = function(context) {};

/**
 * @param {{maxLength: number, messageTemplate: string}} context
 * @return {!breeze.Validator}
 */
breeze.Validator.maxLength = function(context) {};

/**
 * @param {{messageTemplate: string}=} context
 * @return {!breeze.Validator}
 */
breeze.Validator.required = function(context) {};

/**
 * @return {!breeze.Validator}
 */
breeze.Validator.string = function() {};

/**
 * @param {{maxLength: number, minLength: number, messageTemplate: string}} context
 * @return {!breeze.Validator}
 */
breeze.Validator.stringLength = function(context) {};

/**
 * Returns a credit card number validator that performs a Luhn algorithm checksum test for plausability
 * @param {{messageTemplate: string}=} context
 * @return {!breeze.Validator}
 */
breeze.Validator.creditCard = function(context) {};

/**
 * Returns a regular expression validator; the expression must be specified in the context parameter
 * @param {{expression: !RegExp, messageTemplate: string}} context
 * @return {!breeze.Validator}
 */
breeze.Validator.regularExpression = function(context) {};

/**
 * Returns the email address validator
 * @param {{messageTemplate: string}=} context
 * @return {!breeze.Validator}
 */
breeze.Validator.emailAddress = function(context) {};

/**
 * Returns the phone validator, which handles prefix, country code, area code, and local number, with [-/. ] break characters.
 * @param {{messageTemplate: string}=} context
 * @return {!breeze.Validator}
 */
breeze.Validator.phone = function(context) {};

/**
 * Returns the URL (protocol required) validator
 * @param {{messageTemplate: string}=} context
 * @return {!breeze.Validator}
 */
breeze.Validator.url = function(context) {};

/**
 * Always returns true
 * @return {!breeze.Validator}
 */
breeze.Validator.none = function() {};

/**
 * Creates a validator instance from a JSON object or an array of instances from an array of JSON objects.
 * @param {string} json
 * @return {!breeze.Validator}
 */
breeze.Validator.fromJSON = function(json) {};

/**
 * Register a validator instance so that any deserialized metadata can reference it.
 * @param {!breeze.Validator} validator
 * @return {void}
 */
breeze.Validator.register = function(validator) {};

/**
 * Register a validator factory so that any deserialized metadata can reference it.
 * @param {function(): !breeze.Validator} fn
 * @param {string} name
 * @return {void}
 */
breeze.Validator.registerFactory = function(fn, name) {};

/**
 * Creates a regular expression validator with a fixed expression.
 * @param {string} validatorName
 * @param {!RegExp} expression
 * @param {string} defaultMessage
 * @param {?=} context
 * @return {!breeze.Validator}
 */
breeze.Validator.makeRegExpValidator = function(validatorName, expression, defaultMessage, context) {};

/**
 * Run this validator against the specified value.
 * @param {?} value {Object} Value to validate
 * @param {?=} context
 * @return {!breeze.ValidationError}
 */
breeze.Validator.prototype.validate = function(value, context) {};

/**
 * Returns the message generated by the most recent execution of this Validator.
 * @return {string}
 */
breeze.Validator.prototype.getMessage = function() {};
/**
 * @record
 * @struct
 */
breeze.ValidatorFunction = function() {};

/* TODO: CallSignature: breeze */
/**
 * @record
 * @struct
 */
breeze.ValidatorFunctionContext = function() {};
 /** @type {?} */
breeze.ValidatorFunctionContext.prototype.value;
 /** @type {string} */
breeze.ValidatorFunctionContext.prototype.validatorName;
 /** @type {string} */
breeze.ValidatorFunctionContext.prototype.displayName;
 /** @type {string} */
breeze.ValidatorFunctionContext.prototype.messageTemplate;
 /** @type {string} */
breeze.ValidatorFunctionContext.prototype.message;
 /** @type {string} */
breeze.metadataVersion;
 /** @type {string} */
breeze.remoteAccess_odata;
 /** @type {string} */
breeze.remoteAccess_webApi;
 /** @type {string} */
breeze.version;
/** @const */
breeze.config = {};
 /** @type {string} */
breeze.config.ajax;
 /** @type {string} */
breeze.config.dataService;
 /** @type {!Object} */
breeze.config.functionRegistry;

/**
 * Returns the ctor function used to implement a specific interface with a specific adapter name.
 * @param {string} interfaceName {String} One of the following interface names "ajax", "dataService" or "modelLibrary"
 * @param {string=} adapterName {String} The name of any previously registered adapter. If this parameter is omitted then
 * this method returns the "default" adapter for this interface. If there is no default adapter, then a null is returned.
 * 
 * @return {!Function}
 */
breeze.config.getAdapter = function(interfaceName, adapterName) {};

/**
 * Returns the adapter instance corresponding to the specified interface and adapter names.
 * @param {string} interfaceName {String} The name of the interface.
 * @param {string=} adapterName {String} - The name of a previously registered adapter.  If this parameter is
 * omitted then the default implementation of the specified interface is returned. If there is
 * no defaultInstance of this interface, then the first registered instance of this interface is returned.
 * 
 * @return {!Object}
 */
breeze.config.getAdapterInstance = function(interfaceName, adapterName) {};

/**
 * Initializes a single adapter implementation. Initialization means either newing a instance of the
 * specified interface and then calling "initialize" on it or simply calling "initialize" on the instance
 * if it already exists.
 * @param {string} interfaceName {String} The name of the interface to which the adapter to initialize belongs.
 * @param {string} adapterName {String} - The name of a previously registered adapter to initialize.
 * @param {boolean=} isDefault
 * @return {!Object}
 */
breeze.config.initializeAdapterInstance = function(interfaceName, adapterName, isDefault) {};
/**
 * @record
 * @struct
 */
breeze.config.AdapterInstancesConfig = function() {};
 /** @type {string} */
breeze.config.AdapterInstancesConfig.prototype.ajax;
 /** @type {string} */
breeze.config.AdapterInstancesConfig.prototype.dataService;
 /** @type {string} */
breeze.config.AdapterInstancesConfig.prototype.modelLibary;
 /** @type {string} */
breeze.config.AdapterInstancesConfig.prototype.uriBuilder;

/**
 * Initializes a collection of adapter implementations and makes each one the default for its corresponding interface.
 * @param {!breeze.config.AdapterInstancesConfig} config {AdapterInstancesConfig}
 * @return {!Array<!Object>} [array of instances]
 * 
 */
breeze.config.initializeAdapterInstances = function(config) {};
 /** @type {!Event} */
breeze.config.interfaceInitialized;
 /** @type {!Object} */
breeze.config.interfaceRegistry;
 /** @type {!Object} */
breeze.config.objectRegistry;

/**
 * Method use to register implementations of standard breeze interfaces.  Calls to this method are usually
 * made as the last step within an adapter implementation.
 * @param {string} interfaceName {String} - one of the following interface names "ajax", "dataService" or "modelLibrary"
 * @param {!Function} adapterCtor {Function} - an ctor function that returns an instance of the specified interface.
 * 
 * @return {void}
 */
breeze.config.registerAdapter = function(interfaceName, adapterCtor) {};

/**
 * @param {!Function} fn
 * @param {string} fnName
 * @return {void}
 */
breeze.config.registerFunction = function(fn, fnName) {};

/**
 * @param {!Function} ctor
 * @param {string} typeName
 * @return {void}
 */
breeze.config.registerType = function(ctor, typeName) {};

/**
 * Set the promise implementation, if Q.js is not found.
 * @param {!breeze.promises.IPromiseService} q - implementation of promise.  \@see http://wiki.commonjs.org/wiki/Promises/A
 * @return {void}
 */
breeze.config.setQ = function(q) {};
 /** @type {string} */
breeze.config.stringifyPad;
 /** @type {!Object} */
breeze.config.typeRegistry;
/** @const */
breeze.promises = {};
/**
 * @record
 * @struct
 */
breeze.promises.IDeferred = function() {};
 /** @type {!Promise<T>} */
breeze.promises.IDeferred.prototype.promise;

/**
 * @param {T} value
 * @return {void}
 */
breeze.promises.IDeferred.prototype.resolve = function(value) {};

/**
 * @param {?} reason
 * @return {void}
 */
breeze.promises.IDeferred.prototype.reject = function(reason) {};
/**
 * @record
 * @struct
 */
breeze.promises.IPromiseService = function() {};

/**
 * @template T
 * @return {!breeze.promises.IDeferred<T>}
 */
breeze.promises.IPromiseService.prototype.defer = function() {};

/**
 * @param {?=} reason
 * @return {!Promise<?>}
 */
breeze.promises.IPromiseService.prototype.reject = function(reason) {};

/**
 * @template T
 * @param {T|!Promise<T>} object
 * @return {!Promise<T>}
 */
breeze.promises.IPromiseService.prototype.resolve = function(object) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "breeze"
/** @const */
tsickle_declare_module.breeze = {};

/* TODO: ExportAssignment in tsickle_declare_module.breeze */
