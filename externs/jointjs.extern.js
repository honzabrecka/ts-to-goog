/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jointjs/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: NamespaceExportDeclaration in  */
 /** @type {?} */
var g;
 /** @type {?} */
var V;
/** @const */
var dia = {};
/**
 * @record
 * @struct
 */
dia.Size = function() {};
 /** @type {number} */
dia.Size.prototype.width;
 /** @type {number} */
dia.Size.prototype.height;
/**
 * @record
 * @struct
 */
dia.Point = function() {};
 /** @type {number} */
dia.Point.prototype.x;
 /** @type {number} */
dia.Point.prototype.y;
/**
 * @extends {dia.Point}
 * @extends {dia.Size}
 * @record
 * @struct
 */
dia.BBox = function() {};
/**
 * @record
 * @struct
 */
dia.TranslateOptions = function() {};
 /** @type {?} */
dia.TranslateOptions.prototype.restrictedArea;
 /** @type {?} */
dia.TranslateOptions.prototype.transition;
/**
 * @record
 * @struct
 */
dia.TransitionOptions = function() {};
 /** @type {number} */
dia.TransitionOptions.prototype.delay;
 /** @type {number} */
dia.TransitionOptions.prototype.duration;
 /** @type {?} */
dia.TransitionOptions.prototype.timingFunction;
 /** @type {?} */
dia.TransitionOptions.prototype.valueFunction;
/**
 * @record
 * @struct
 */
dia.DfsBfsOptions = function() {};
 /** @type {boolean} */
dia.DfsBfsOptions.prototype.inbound;
 /** @type {boolean} */
dia.DfsBfsOptions.prototype.outbound;
 /** @type {boolean} */
dia.DfsBfsOptions.prototype.deep;
/**
 * @record
 * @struct
 */
dia.ExploreOptions = function() {};
 /** @type {boolean} */
dia.ExploreOptions.prototype.breadthFirst;
 /** @type {boolean} */
dia.ExploreOptions.prototype.deep;

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {?=} options
 */
dia.Graph = function(attributes, options) {};

/**
 * @param {(?|!Array<?>)} cell
 * @return {?}
 */
dia.Graph.prototype.addCell = function(cell) {};

/**
 * @param {!Array<?>} cells
 * @return {?}
 */
dia.Graph.prototype.addCells = function(cells) {};

/**
 * @param {!Array<?>} cells
 * @param {?=} options
 * @return {?}
 */
dia.Graph.prototype.resetCells = function(cells, options) {};

/**
 * @param {string} id
 * @return {?}
 */
dia.Graph.prototype.getCell = function(id) {};

/**
 * @return {!Array<?>}
 */
dia.Graph.prototype.getElements = function() {};

/**
 * @return {!Array<?>}
 */
dia.Graph.prototype.getLinks = function() {};

/**
 * @return {!Array<?>}
 */
dia.Graph.prototype.getCells = function() {};

/**
 * @return {?}
 */
dia.Graph.prototype.getFirstCell = function() {};

/**
 * @return {?}
 */
dia.Graph.prototype.getLastCell = function() {};

/**
 * @param {?} element
 * @param {?=} options
 * @return {!Array<?>}
 */
dia.Graph.prototype.getConnectedLinks = function(element, options) {};

/**
 * @param {?} cell
 * @param {?=} options
 * @return {void}
 */
dia.Graph.prototype.disconnectLinks = function(cell, options) {};

/**
 * @param {?} cell
 * @param {?=} options
 * @return {void}
 */
dia.Graph.prototype.removeLinks = function(cell, options) {};

/**
 * @param {number} tx
 * @param {number=} ty
 * @param {?=} options
 * @return {void}
 */
dia.Graph.prototype.translate = function(tx, ty, options) {};

/**
 * @param {!Array<?>} cells
 * @return {?}
 */
dia.Graph.prototype.cloneCells = function(cells) {};

/**
 * @param {!Array<?>} cells
 * @param {?=} options
 * @return {!Array<?>}
 */
dia.Graph.prototype.getSubgraph = function(cells, options) {};

/**
 * @param {!Array<?>} cells
 * @param {?=} options
 * @return {?}
 */
dia.Graph.prototype.cloneSubgraph = function(cells, options) {};

/**
 * @param {?} element
 * @param {?} iteratee
 * @param {?=} options
 * @param {!Object=} visited
 * @param {number=} distance
 * @return {void}
 */
dia.Graph.prototype.dfs = function(element, iteratee, options, visited, distance) {};

/**
 * @param {?} element
 * @param {?} iteratee
 * @param {?=} options
 * @return {void}
 */
dia.Graph.prototype.bfs = function(element, iteratee, options) {};

/**
 * @param {?} element
 * @param {?} iteratee
 * @param {?=} options
 * @return {void}
 */
dia.Graph.prototype.search = function(element, iteratee, options) {};

/**
 * @param {?} element
 * @param {?=} options
 * @return {!Array<?>}
 */
dia.Graph.prototype.getSuccessors = function(element, options) {};

/**
 * @param {?} element
 * @param {?=} options
 * @return {!Array<?>}
 */
dia.Graph.prototype.getPredecessors = function(element, options) {};

/**
 * @param {?} elementA
 * @param {?} elementB
 * @return {boolean}
 */
dia.Graph.prototype.isSuccessor = function(elementA, elementB) {};

/**
 * @param {?} elementA
 * @param {?} elementB
 * @return {boolean}
 */
dia.Graph.prototype.isPredecessor = function(elementA, elementB) {};

/**
 * @param {?} element
 * @return {boolean}
 */
dia.Graph.prototype.isSource = function(element) {};

/**
 * @param {?} element
 * @return {boolean}
 */
dia.Graph.prototype.isSink = function(element) {};

/**
 * @return {!Array<?>}
 */
dia.Graph.prototype.getSources = function() {};

/**
 * @return {!Array<?>}
 */
dia.Graph.prototype.getSinks = function() {};

/**
 * @param {?} element
 * @param {?=} options
 * @return {!Array<?>}
 */
dia.Graph.prototype.getNeighbors = function(element, options) {};

/**
 * @param {?} elementA
 * @param {?} elementB
 * @param {?=} options
 * @return {boolean}
 */
dia.Graph.prototype.isNeighbor = function(elementA, elementB, options) {};

/**
 * @param {...?} cells
 * @return {?}
 */
dia.Graph.prototype.getCommonAncestor = function(cells) {};

/**
 * @return {?}
 */
dia.Graph.prototype.toJSON = function() {};

/**
 * @param {?} json
 * @param {?=} options
 * @return {?}
 */
dia.Graph.prototype.fromJSON = function(json, options) {};

/**
 * @param {?=} options
 * @return {?}
 */
dia.Graph.prototype.clear = function(options) {};

/**
 * @param {?} rect
 * @return {!Array<?>}
 */
dia.Graph.prototype.findModelsFromPoint = function(rect) {};

/**
 * @param {?} element
 * @param {?=} options
 * @return {!Array<?>}
 */
dia.Graph.prototype.findModelsUnderElement = function(element, options) {};

/**
 * @param {!Array<?>} elements
 * @param {?=} options
 * @return {?}
 */
dia.Graph.prototype.getBBox = function(elements, options) {};

/**
 * @return {?}
 */
dia.Graph.prototype.toGraphLib = function() {};

/**
 * @param {?} rect
 * @param {?=} options
 * @return {(boolean|?)}
 */
dia.Graph.prototype.findModelsInArea = function(rect, options) {};

/**
 * @param {!Array<?>} cells
 * @param {?=} options
 * @return {?}
 */
dia.Graph.prototype.getCellsBBox = function(cells, options) {};

/**
 * @param {string} node
 * @return {!Object}
 */
dia.Graph.prototype.getInboundEdges = function(node) {};

/**
 * @param {string} node
 * @return {!Object}
 */
dia.Graph.prototype.getOutboundEdges = function(node) {};

/**
 * @param {string=} name
 * @return {(number|boolean)}
 */
dia.Graph.prototype.hasActiveBatch = function(name) {};

/**
 * @return {number}
 */
dia.Graph.prototype.maxZIndex = function() {};

/**
 * @param {!Array<?>} cells
 * @param {?=} options
 * @return {?}
 */
dia.Graph.prototype.removeCells = function(cells, options) {};

/**
 * @param {number} width
 * @param {number} height
 * @param {number=} options
 * @return {?}
 */
dia.Graph.prototype.resize = function(width, height, options) {};

/**
 * @param {number} width
 * @param {number} height
 * @param {!Array<?>} cells
 * @param {number=} options
 * @return {?}
 */
dia.Graph.prototype.resizeCells = function(width, height, cells, options) {};

/**
 * @param {(string|!Object)} key
 * @param {?} value
 * @param {?=} options
 * @return {?}
 */
dia.Graph.prototype.set = function(key, value, options) {};

/**
 * @param {string} name
 * @param {!Object=} data
 * @return {?}
 */
dia.Graph.prototype.startBatch = function(name, data) {};

/**
 * @param {string} name
 * @param {!Object=} data
 * @return {?}
 */
dia.Graph.prototype.stopBatch = function(name, data) {};
/**
 * @constructor
 * @struct
 */
dia.Cell = function() {};
 /** @type {string} */
dia.Cell.prototype.id;

/**
 * @return {?}
 */
dia.Cell.prototype.toJSON = function() {};

/**
 * @param {?=} options
 * @return {?}
 */
dia.Cell.prototype.remove = function(options) {};

/**
 * @param {?=} options
 * @return {?}
 */
dia.Cell.prototype.toFront = function(options) {};

/**
 * @param {?=} options
 * @return {?}
 */
dia.Cell.prototype.toBack = function(options) {};

/**
 * @return {!Array<?>}
 */
dia.Cell.prototype.getAncestors = function() {};

/**
 * @param {?} element
 * @param {?=} options
 * @return {boolean}
 */
dia.Cell.prototype.isEmbeddedIn = function(element, options) {};

/**
 * @param {string|?} key_or_object
 * @param {?=} value
 * @param {?=} options
 * @return {?}
 */
dia.Cell.prototype.prop = function(key_or_object, value, options) {};

/**
 * @param {string} path
 * @param {?=} options
 * @return {?}
 */
dia.Cell.prototype.removeProp = function(path, options) {};

/**
 * @param {string|?} key_or_object
 * @param {?=} value
 * @return {?}
 */
dia.Cell.prototype.attr = function(key_or_object, value) {};

/**
 * @param {?=} opt
 * @return {?|(?|!Array<?>)}
 */
dia.Cell.prototype.clone = function(opt) {};

/**
 * @param {(string|!Array<string>)} path
 * @param {?=} options
 * @return {?}
 */
dia.Cell.prototype.removeAttr = function(path, options) {};

/**
 * @param {string} path
 * @param {?=} value
 * @param {?=} options
 * @param {string=} delim
 * @return {number}
 */
dia.Cell.prototype.transition = function(path, value, options, delim) {};

/**
 * @return {!Array<string>}
 */
dia.Cell.prototype.getTransitions = function() {};

/**
 * @param {string=} path
 * @param {string=} delim
 * @return {?}
 */
dia.Cell.prototype.stopTransitions = function(path, delim) {};

/**
 * @param {?} graph
 * @param {?=} options
 * @return {?}
 */
dia.Cell.prototype.addTo = function(graph, options) {};

/**
 * @return {boolean}
 */
dia.Cell.prototype.isLink = function() {};

/**
 * @param {?} cell
 * @param {?=} options
 * @return {?}
 */
dia.Cell.prototype.embed = function(cell, options) {};

/**
 * @param {?} paper
 * @return {?}
 */
dia.Cell.prototype.findView = function(paper) {};

/**
 * @param {?=} options
 * @return {!Array<?>}
 */
dia.Cell.prototype.getEmbeddedCells = function(options) {};

/**
 * @param {?=} options
 * @return {void}
 */
dia.Cell.prototype.initialize = function(options) {};

/**
 * @return {boolean}
 */
dia.Cell.prototype.isElement = function() {};

/**
 * @return {boolean}
 */
dia.Cell.prototype.isEmbedded = function() {};

/**
 * @return {void}
 */
dia.Cell.prototype.processPorts = function() {};

/**
 * @param {string} name
 * @param {?=} options
 * @return {?}
 */
dia.Cell.prototype.startBatch = function(name, options) {};

/**
 * @param {string} name
 * @param {?=} options
 * @return {?}
 */
dia.Cell.prototype.stopBatch = function(name, options) {};

/**
 * @param {?} cell
 * @param {?=} options
 * @return {?}
 */
dia.Cell.prototype.unembed = function(cell, options) {};

/** @typedef {(number|?)} */
dia.Padding;
/**
 * @constructor
 * @struct
 */
dia.Element = function() {};

/**
 * @param {number} tx
 * @param {number=} ty
 * @param {?=} options
 * @return {?}
 */
dia.Element.prototype.translate = function(tx, ty, options) {};

/**
 * @param {?|number=} options_or_x
 * @param {number=} y
 * @param {?=} options
 * @return {?}
 */
dia.Element.prototype.position = function(options_or_x, y, options) {};

/**
 * @param {number} width
 * @param {number} height
 * @param {?=} options
 * @return {?}
 */
dia.Element.prototype.resize = function(width, height, options) {};

/**
 * @param {number} deg
 * @param {boolean=} absolute
 * @param {?=} origin
 * @return {?}
 */
dia.Element.prototype.rotate = function(deg, absolute, origin) {};

/**
 * @param {?} cell
 * @return {?}
 */
dia.Element.prototype.embed = function(cell) {};

/**
 * @param {?} cell
 * @return {?}
 */
dia.Element.prototype.unembed = function(cell) {};

/**
 * @param {?=} options
 * @return {!Array<?>}
 */
dia.Element.prototype.getEmbeddedCells = function(options) {};

/**
 * @param {?=} options
 * @return {?}
 */
dia.Element.prototype.fitEmbeds = function(options) {};

/**
 * @param {?=} options
 * @return {?}
 */
dia.Element.prototype.getBBox = function(options) {};

/**
 * @param {?} paper
 * @return {?}
 */
dia.Element.prototype.findView = function(paper) {};

/**
 * @return {boolean}
 */
dia.Element.prototype.isElement = function() {};

/**
 * @param {number} scaleX
 * @param {number} scaleY
 * @param {?=} origin
 * @param {?=} options
 * @return {?}
 */
dia.Element.prototype.scale = function(scaleX, scaleY, origin, options) {};

/**
 * @param {?} port
 * @param {?=} opt
 * @return {?}
 */
dia.Element.prototype.addPort = function(port, opt) {};

/**
 * @param {!Array<?>} ports
 * @param {?=} opt
 * @return {?}
 */
dia.Element.prototype.addPorts = function(ports, opt) {};

/**
 * @param {?} port
 * @param {?=} opt
 * @return {?}
 */
dia.Element.prototype.removePort = function(port, opt) {};

/**
 * @return {boolean}
 */
dia.Element.prototype.hasPorts = function() {};

/**
 * @param {string} id
 * @return {boolean}
 */
dia.Element.prototype.hasPort = function(id) {};

/**
 * @return {!Array<?>}
 */
dia.Element.prototype.getPorts = function() {};

/**
 * @param {string} id
 * @return {?}
 */
dia.Element.prototype.getPort = function(id) {};

/**
 * @param {?} port
 * @return {number}
 */
dia.Element.prototype.getPortIndex = function(port) {};

/**
 * @param {string} portId
 * @param {?} path
 * @param {?=} value
 * @param {?=} opt
 * @return {?}
 */
dia.Element.prototype.portProp = function(portId, path, value, opt) {};
/**
 * @record
 * @struct
 */
dia.CSSSelector = function() {};

/* TODO: IndexSignature: dia */
/**
 * @record
 * @struct
 */
dia.SVGAttributes = function() {};

/* TODO: IndexSignature: dia */
/**
 * @record
 * @struct
 */
dia.CellAttributes = function() {};

/* TODO: IndexSignature: dia */
/**
 * @extends {dia.SVGAttributes}
 * @record
 * @struct
 */
dia.TextAttrs = function() {};
 /** @type {?} */
dia.TextAttrs.prototype.text;
/**
 * @record
 * @struct
 */
dia.Label = function() {};
 /** @type {number} */
dia.Label.prototype.position;
 /** @type {?} */
dia.Label.prototype.attrs;
/**
 * @extends {dia.CellAttributes}
 * @record
 * @struct
 */
dia.LinkAttributes = function() {};
 /** @type {?} */
dia.LinkAttributes.prototype.source;
 /** @type {?} */
dia.LinkAttributes.prototype.target;
 /** @type {!Array<?>} */
dia.LinkAttributes.prototype.labels;
 /** @type {!Array<?>} */
dia.LinkAttributes.prototype.vertices;
 /** @type {boolean} */
dia.LinkAttributes.prototype.smooth;
 /** @type {?} */
dia.LinkAttributes.prototype.attrs;
 /** @type {number} */
dia.LinkAttributes.prototype.z;

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
dia.Link = function(attributes, options) {};
 /** @type {string} */
dia.Link.prototype.markup;
 /** @type {string} */
dia.Link.prototype.labelMarkup;
 /** @type {string} */
dia.Link.prototype.toolMakup;
 /** @type {string} */
dia.Link.prototype.vertexMarkup;
 /** @type {string} */
dia.Link.prototype.arrowHeadMarkup;

/**
 * @return {?}
 */
dia.Link.prototype.disconnect = function() {};

/**
 * @param {number=} index
 * @param {?=} value
 * @return {?}
 */
dia.Link.prototype.label = function(index, value) {};

/**
 * @param {?=} options
 * @return {?}
 */
dia.Link.prototype.reparent = function(options) {};

/**
 * @param {?} paper
 * @return {?}
 */
dia.Link.prototype.findView = function(paper) {};

/**
 * @return {?}
 */
dia.Link.prototype.getSourceElement = function() {};

/**
 * @return {?}
 */
dia.Link.prototype.getTargetElement = function() {};

/**
 * @param {?=} options
 * @return {boolean}
 */
dia.Link.prototype.hasLoop = function(options) {};

/**
 * @param {!Function} fn
 * @param {?=} options
 * @return {?}
 */
dia.Link.prototype.applyToPoints = function(fn, options) {};

/**
 * @return {?}
 */
dia.Link.prototype.getRelationshipAncestor = function() {};

/**
 * @return {boolean}
 */
dia.Link.prototype.isLink = function() {};

/**
 * @param {?} element
 * @return {boolean}
 */
dia.Link.prototype.isRelationshipEmbeddedIn = function(element) {};

/**
 * @param {number} sx
 * @param {number} sy
 * @param {?} origin
 * @param {?=} optionts
 * @return {?}
 */
dia.Link.prototype.scale = function(sx, sy, origin, optionts) {};

/**
 * @param {number} tx
 * @param {number} ty
 * @param {?=} options
 * @return {?}
 */
dia.Link.prototype.translate = function(tx, ty, options) {};
/**
 * @record
 * @struct
 */
dia.ManhattanRouterArgs = function() {};
 /** @type {!Array<string>} */
dia.ManhattanRouterArgs.prototype.excludeTypes;
 /** @type {string} */
dia.ManhattanRouterArgs.prototype.excludeEnds;
 /** @type {!Array<?>} */
dia.ManhattanRouterArgs.prototype.startDirections;
 /** @type {!Array<?>} */
dia.ManhattanRouterArgs.prototype.endDirections;
/**
 * @extends {Backbone.ViewOptions}
 * @record
 * @struct
 */
dia.PaperOptions = function() {};
 /** @type {(string|!HTMLElement|?<!HTMLElement>)} */
dia.PaperOptions.prototype.el;
 /** @type {number} */
dia.PaperOptions.prototype.width;
 /** @type {number} */
dia.PaperOptions.prototype.height;
 /** @type {?} */
dia.PaperOptions.prototype.origin;
 /** @type {number} */
dia.PaperOptions.prototype.gridSize;
 /** @type {boolean} */
dia.PaperOptions.prototype.perpendicularLinks;
 /** @type {?} */
dia.PaperOptions.prototype.elementView;
 /** @type {?} */
dia.PaperOptions.prototype.linkView;
 /** @type {?} */
dia.PaperOptions.prototype.defaultLink;
 /** @type {?} */
dia.PaperOptions.prototype.defaultRouter;
 /** @type {?} */
dia.PaperOptions.prototype.defaultConnector;
 /** @type {(boolean|?)} */
dia.PaperOptions.prototype.interactive;
 /** @type {?} */
dia.PaperOptions.prototype.validateMagnet;
 /** @type {?} */
dia.PaperOptions.prototype.validateConnection;
 /** @type {?} */
dia.PaperOptions.prototype.linkConnectionPoint;
 /** @type {(boolean|?)} */
dia.PaperOptions.prototype.snapLinks;
 /** @type {boolean} */
dia.PaperOptions.prototype.linkPinning;
 /** @type {boolean} */
dia.PaperOptions.prototype.markAvailable;
 /** @type {(boolean|?)} */
dia.PaperOptions.prototype.async;
 /** @type {boolean} */
dia.PaperOptions.prototype.embeddingMode;
 /** @type {?} */
dia.PaperOptions.prototype.validateEmbedding;
 /** @type {(boolean|?)} */
dia.PaperOptions.prototype.restrictTranslate;
 /** @type {?} */
dia.PaperOptions.prototype.guard;
 /** @type {boolean} */
dia.PaperOptions.prototype.multiLinks;
 /** @type {!Object} */
dia.PaperOptions.prototype.cellViewNamespace;
 /** @type {number} */
dia.PaperOptions.prototype.clickThreshold;
 /** @type {?} */
dia.PaperOptions.prototype.highlighting;
/**
 * @record
 * @struct
 */
dia.ScaleContentOptions = function() {};
 /** @type {number} */
dia.ScaleContentOptions.prototype.padding;
 /** @type {boolean} */
dia.ScaleContentOptions.prototype.preserveAspectRatio;
 /** @type {number} */
dia.ScaleContentOptions.prototype.minScale;
 /** @type {number} */
dia.ScaleContentOptions.prototype.minScaleX;
 /** @type {number} */
dia.ScaleContentOptions.prototype.minScaleY;
 /** @type {number} */
dia.ScaleContentOptions.prototype.maxScale;
 /** @type {number} */
dia.ScaleContentOptions.prototype.maxScaleX;
 /** @type {number} */
dia.ScaleContentOptions.prototype.maxScaleY;
 /** @type {number} */
dia.ScaleContentOptions.prototype.scaleGrid;
 /** @type {?} */
dia.ScaleContentOptions.prototype.fittingBBox;
/**
 * @record
 * @struct
 */
dia.FitToContentOptions = function() {};
 /** @type {number} */
dia.FitToContentOptions.prototype.gridWidth;
 /** @type {number} */
dia.FitToContentOptions.prototype.gridHeight;
 /** @type {(number|?)} */
dia.FitToContentOptions.prototype.padding;
 /** @type {string} */
dia.FitToContentOptions.prototype.allowNewOrigin;
 /** @type {number} */
dia.FitToContentOptions.prototype.minWidth;
 /** @type {number} */
dia.FitToContentOptions.prototype.minHeight;
 /** @type {number} */
dia.FitToContentOptions.prototype.maxWidth;
 /** @type {number} */
dia.FitToContentOptions.prototype.maxHeight;

/**
 * @constructor
 * @struct
 * @param {?=} options
 */
dia.Paper = function(options) {};
 /** @type {?} */
dia.Paper.prototype.options;
 /** @type {!SVGElement} */
dia.Paper.prototype.svg;
 /** @type {!SVGGElement} */
dia.Paper.prototype.viewport;
 /** @type {!SVGDefsElement} */
dia.Paper.prototype.defs;

/**
 * @param {number} width
 * @param {number} height
 * @return {void}
 */
dia.Paper.prototype.setDimensions = function(width, height) {};

/**
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
dia.Paper.prototype.setOrigin = function(x, y) {};

/**
 * @param {number} sx
 * @param {number=} sy
 * @param {number=} ox
 * @param {number=} oy
 * @return {?}
 */
dia.Paper.prototype.scale = function(sx, sy, ox, oy) {};

/**
 * @param {?} element
 * @return {?}
 */
dia.Paper.prototype.findView = function(element) {};

/**
 * @param {(string|?)} model
 * @return {?}
 */
dia.Paper.prototype.findViewByModel = function(model) {};

/**
 * @param {?} point
 * @return {!Array<?>}
 */
dia.Paper.prototype.findViewsFromPoint = function(point) {};

/**
 * @param {?} rect
 * @param {?=} options
 * @return {!Array<?>}
 */
dia.Paper.prototype.findViewsInArea = function(rect, options) {};

/**
 * @param {?|number=} options_or_gridWidth
 * @param {number=} gridHeight
 * @param {number=} padding
 * @param {?=} options
 * @return {void}
 */
dia.Paper.prototype.fitToContent = function(options_or_gridWidth, gridHeight, padding, options) {};

/**
 * @param {?=} options
 * @return {void}
 */
dia.Paper.prototype.scaleContentToFit = function(options) {};

/**
 * @return {?}
 */
dia.Paper.prototype.getContentBBox = function() {};

/**
 * @param {?} p
 * @return {?}
 */
dia.Paper.prototype.clientToLocalPoint = function(p) {};

/**
 * @param {number} deg
 * @param {number=} ox
 * @param {number=} oy
 * @return {?}
 */
dia.Paper.prototype.rotate = function(deg, ox, oy) {};

/**
 * @return {void}
 */
dia.Paper.prototype.afterRenderViews = function() {};

/**
 * @param {!Array<?>} cells
 * @param {?=} options
 * @return {void}
 */
dia.Paper.prototype.asyncRenderViews = function(cells, options) {};

/**
 * @param {!Array<?>} cells
 * @return {!Array<?>}
 */
dia.Paper.prototype.beforeRenderViews = function(cells) {};

/**
 * @param {!Event} evt
 * @return {void}
 */
dia.Paper.prototype.cellMouseout = function(evt) {};

/**
 * @param {!Event} evt
 * @return {void}
 */
dia.Paper.prototype.cellMouseover = function(evt) {};

/**
 * @return {?}
 */
dia.Paper.prototype.clearGrid = function() {};

/**
 * @param {!Event} evt
 * @return {void}
 */
dia.Paper.prototype.contextmenu = function(evt) {};

/**
 * @param {?} cell
 * @return {?}
 */
dia.Paper.prototype.createViewForModel = function(cell) {};

/**
 * @param {?=} options
 * @return {?}
 */
dia.Paper.prototype.drawGrid = function(options) {};

/**
 * @return {?}
 */
dia.Paper.prototype.getArea = function() {};

/**
 * @param {?} cellView
 * @param {!HTMLElement} magnet
 * @return {?}
 */
dia.Paper.prototype.getDefaultLink = function(cellView, magnet) {};

/**
 * @param {string} id
 * @return {?}
 */
dia.Paper.prototype.getModelById = function(id) {};

/**
 * @return {?}
 */
dia.Paper.prototype.getRestrictedArea = function() {};

/**
 * @param {!Event} evt
 * @param {?} view
 * @return {boolean}
 */
dia.Paper.prototype.guard = function(evt, view) {};

/**
 * @param {?} linkViewOrModel
 * @return {boolean}
 */
dia.Paper.prototype.linkAllowed = function(linkViewOrModel) {};

/**
 * @param {!Event} evt
 * @return {void}
 */
dia.Paper.prototype.mouseclick = function(evt) {};

/**
 * @param {!Event} evt
 * @return {void}
 */
dia.Paper.prototype.mousedblclick = function(evt) {};

/**
 * @param {!Event} evt
 * @return {void}
 */
dia.Paper.prototype.mousewheel = function(evt) {};

/**
 * @param {?} cell
 * @param {?} graph
 * @param {!Object} options
 * @return {void}
 */
dia.Paper.prototype.onCellAdded = function(cell, graph, options) {};

/**
 * @param {?} cellView
 * @param {!HTMLElement} magnetEl
 * @param {?=} options
 * @return {void}
 */
dia.Paper.prototype.onCellHighlight = function(cellView, magnetEl, options) {};

/**
 * @param {?} cellView
 * @param {!HTMLElement} magnetEl
 * @param {?=} options
 * @return {void}
 */
dia.Paper.prototype.onCellUnhighlight = function(cellView, magnetEl, options) {};

/**
 * @return {void}
 */
dia.Paper.prototype.onRemove = function() {};

/**
 * @param {!Event} evt
 * @return {void}
 */
dia.Paper.prototype.pointerdown = function(evt) {};

/**
 * @param {!Event} evt
 * @return {void}
 */
dia.Paper.prototype.pointermove = function(evt) {};

/**
 * @param {!Event} evt
 * @return {void}
 */
dia.Paper.prototype.pointerup = function(evt) {};

/**
 * @return {?}
 */
dia.Paper.prototype.remove = function() {};

/**
 * @param {?} cell
 * @return {?}
 */
dia.Paper.prototype.removeView = function(cell) {};

/**
 * @return {void}
 */
dia.Paper.prototype.removeViews = function() {};

/**
 * @param {?} cell
 * @return {?}
 */
dia.Paper.prototype.renderView = function(cell) {};

/**
 * @param {!Array<?>} cellsCollection
 * @param {?} options
 * @return {void}
 */
dia.Paper.prototype.resetViews = function(cellsCollection, options) {};

/**
 * @param {?=} options
 * @return {(boolean|!Object)}
 */
dia.Paper.prototype.resolveHighlighter = function(options) {};

/**
 * @param {number} gridSize
 * @return {?}
 */
dia.Paper.prototype.setGridSize = function(gridSize) {};

/**
 * @param {?} value
 * @return {void}
 */
dia.Paper.prototype.setInteractivity = function(value) {};

/**
 * @param {?} p
 * @return {?}
 */
dia.Paper.prototype.snapToGrid = function(p) {};

/**
 * @return {void}
 */
dia.Paper.prototype.sortViews = function() {};
/**
 * @record
 * @struct
 */
dia.GradientOptions = function() {};
 /** @type {string} */
dia.GradientOptions.prototype.type;
 /** @type {!Array<?>} */
dia.GradientOptions.prototype.stops;
/**
 * @constructor
 * @struct
 */
dia.CellViewGeneric = function() {};

/**
 * @param {?=} options
 * @return {?}
 */
dia.CellViewGeneric.prototype.getBBox = function(options) {};

/**
 * @param {?=} el
 * @param {?=} options
 * @return {?}
 */
dia.CellViewGeneric.prototype.highlight = function(el, options) {};

/**
 * @param {?=} el
 * @param {?=} options
 * @return {?}
 */
dia.CellViewGeneric.prototype.unhighlight = function(el, options) {};

/**
 * @param {(string|!HTMLElement)} selector
 * @param {!Object} filter
 * @return {void}
 */
dia.CellViewGeneric.prototype.applyFilter = function(selector, filter) {};

/**
 * @param {(string|!HTMLElement)} selector
 * @param {string} attr
 * @param {?} gradient
 * @return {void}
 */
dia.CellViewGeneric.prototype.applyGradient = function(selector, attr, gradient) {};

/**
 * @param {string} feature
 * @return {boolean}
 */
dia.CellViewGeneric.prototype.can = function(feature) {};

/**
 * @param {string} selector
 * @return {?<!HTMLElement>}
 */
dia.CellViewGeneric.prototype.findBySelector = function(selector) {};

/**
 * @param {?} el
 * @return {!HTMLElement}
 */
dia.CellViewGeneric.prototype.findMagnet = function(el) {};

/**
 * @param {!HTMLElement} el
 * @param {string} prevSelector
 * @return {string}
 */
dia.CellViewGeneric.prototype.getSelector = function(el, prevSelector) {};

/**
 * @param {?} el
 * @return {?}
 */
dia.CellViewGeneric.prototype.getStrokeBBox = function(el) {};

/**
 * @param {!Event} evt
 * @return {void}
 */
dia.CellViewGeneric.prototype.mouseout = function(evt) {};

/**
 * @param {!Event} evt
 * @return {void}
 */
dia.CellViewGeneric.prototype.mouseover = function(evt) {};

/**
 * @param {!Event} evt
 * @param {number} x
 * @param {number} y
 * @param {number} delta
 * @return {void}
 */
dia.CellViewGeneric.prototype.mousewheel = function(evt, x, y, delta) {};

/**
 * @param {string} eventName
 * @return {void}
 */
dia.CellViewGeneric.prototype.notify = function(eventName) {};

/**
 * @param {?} cell
 * @param {!Backbone.ViewOptions<?>} attrs
 * @param {?=} options
 * @return {?}
 */
dia.CellViewGeneric.prototype.onChangeAttrs = function(cell, attrs, options) {};

/**
 * @param {string} oldTheme
 * @param {string} newTheme
 * @return {void}
 */
dia.CellViewGeneric.prototype.onSetTheme = function(oldTheme, newTheme) {};

/**
 * @param {!Event} evt
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
dia.CellViewGeneric.prototype.pointerclick = function(evt, x, y) {};

/**
 * @param {!Event} evt
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
dia.CellViewGeneric.prototype.pointerdblclick = function(evt, x, y) {};

/**
 * @param {!Event} evt
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
dia.CellViewGeneric.prototype.pointerdown = function(evt, x, y) {};

/**
 * @param {!Event} evt
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
dia.CellViewGeneric.prototype.pointermove = function(evt, x, y) {};

/**
 * @param {!Event} evt
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
dia.CellViewGeneric.prototype.pointerup = function(evt, x, y) {};

/**
 * @return {?}
 */
dia.CellViewGeneric.prototype.remove = function() {};

/**
 * @param {?} value
 * @return {void}
 */
dia.CellViewGeneric.prototype.setInteractivity = function(value) {};

/**
 * @param {string} theme
 * @param {?=} options
 * @return {?}
 */
dia.CellViewGeneric.prototype.setTheme = function(theme, options) {};
/**
 * @constructor
 * @struct
 */
dia.CellView = function() {};
/**
 * @record
 * @struct
 */
dia.ElementViewAttributes = function() {};
 /** @type {string} */
dia.ElementViewAttributes.prototype.style;
 /** @type {string} */
dia.ElementViewAttributes.prototype.text;
 /** @type {string} */
dia.ElementViewAttributes.prototype.html;

/* TODO: PropertySignature: dia."ref-x" */

/* TODO: PropertySignature: dia."ref-y" */

/* TODO: PropertySignature: dia."ref-dx" */

/* TODO: PropertySignature: dia."ref-dy" */

/* TODO: PropertySignature: dia."ref-width" */

/* TODO: PropertySignature: dia."ref-height" */
 /** @type {string} */
dia.ElementViewAttributes.prototype.ref;

/* TODO: PropertySignature: dia."x-alignment" */

/* TODO: PropertySignature: dia."y-alignment" */
 /** @type {string} */
dia.ElementViewAttributes.prototype.port;
/**
 * @constructor
 * @struct
 */
dia.ElementView = function() {};

/**
 * @param {number} sx
 * @param {number} sy
 * @return {void}
 */
dia.ElementView.prototype.scale = function(sx, sy) {};

/**
 * @param {?=} options
 * @return {void}
 */
dia.ElementView.prototype.finalizeEmbedding = function(options) {};

/**
 * @param {?=} options
 * @return {?}
 */
dia.ElementView.prototype.getBBox = function(options) {};

/**
 * @param {!Event} evt
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
dia.ElementView.prototype.pointerdown = function(evt, x, y) {};

/**
 * @param {!Event} evt
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
dia.ElementView.prototype.pointermove = function(evt, x, y) {};

/**
 * @param {!Event} evt
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
dia.ElementView.prototype.pointerup = function(evt, x, y) {};

/**
 * @param {?} vel
 * @param {?} bbox
 * @param {?} attributes
 * @param {!Object=} nodesBySelector
 * @return {void}
 */
dia.ElementView.prototype.positionRelative = function(vel, bbox, attributes, nodesBySelector) {};

/**
 * @param {?=} options
 * @return {void}
 */
dia.ElementView.prototype.prepareEmbedding = function(options) {};

/**
 * @param {?=} options
 * @return {void}
 */
dia.ElementView.prototype.processEmbedding = function(options) {};

/**
 * @return {?}
 */
dia.ElementView.prototype.render = function() {};

/**
 * @return {void}
 */
dia.ElementView.prototype.renderMarkup = function() {};

/**
 * @return {void}
 */
dia.ElementView.prototype.resize = function() {};

/**
 * @return {void}
 */
dia.ElementView.prototype.rotate = function() {};

/**
 * @param {!Backbone.Model} model
 * @param {?=} changes
 * @param {?=} options
 * @return {void}
 */
dia.ElementView.prototype.translate = function(model, changes, options) {};

/**
 * @param {?} cell
 * @param {!Object=} renderingOnlyAttrs
 * @return {void}
 */
dia.ElementView.prototype.update = function(cell, renderingOnlyAttrs) {};
/**
 * @constructor
 * @struct
 */
dia.LinkView = function() {};
 /** @type {?} */
dia.LinkView.prototype.options;

/**
 * @return {number}
 */
dia.LinkView.prototype.getConnectionLength = function() {};

/**
 * @param {!SVGElement} token
 * @param {number=} duration
 * @param {?=} callback
 * @return {void}
 */
dia.LinkView.prototype.sendToken = function(token, duration, callback) {};

/**
 * @param {?} vertex
 * @return {number}
 */
dia.LinkView.prototype.addVertex = function(vertex) {};

/**
 * @param {number} length
 * @return {?}
 */
dia.LinkView.prototype.getPointAtLength = function(length) {};

/**
 * @param {?} endType
 * @return {!Function}
 */
dia.LinkView.prototype.createWatcher = function(endType) {};

/**
 * @param {!Array<?>} oldVertices
 * @return {!Array<?>}
 */
dia.LinkView.prototype.findRoute = function(oldVertices) {};

/**
 * @param {string} end
 * @param {?} selectorOrPoint
 * @param {?} referenceSelectorOrPoint
 * @return {?}
 */
dia.LinkView.prototype.getConnectionPoint = function(end, selectorOrPoint, referenceSelectorOrPoint) {};

/**
 * @param {!Array<?>} vertices
 * @return {?}
 */
dia.LinkView.prototype.getPathData = function(vertices) {};

/**
 * @param {string} endType
 * @param {?=} endModel
 * @param {?=} opt
 * @return {void}
 */
dia.LinkView.prototype.onEndModelChange = function(endType, endModel, opt) {};

/**
 * @return {void}
 */
dia.LinkView.prototype.onLabelsChange = function() {};

/**
 * @param {?} cell
 * @param {?} sourceEnd
 * @param {?} options
 * @return {void}
 */
dia.LinkView.prototype.onSourceChange = function(cell, sourceEnd, options) {};

/**
 * @param {?} cell
 * @param {?} targetEnd
 * @param {?} options
 * @return {void}
 */
dia.LinkView.prototype.onTargetChange = function(cell, targetEnd, options) {};

/**
 * @return {void}
 */
dia.LinkView.prototype.onToolsChange = function() {};

/**
 * @param {?} cell
 * @param {?} changed
 * @param {?} options
 * @return {void}
 */
dia.LinkView.prototype.onVerticesChange = function(cell, changed, options) {};

/**
 * @param {!Event} evt
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
dia.LinkView.prototype.pointerdown = function(evt, x, y) {};

/**
 * @param {!Event} evt
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
dia.LinkView.prototype.pointermove = function(evt, x, y) {};

/**
 * @param {!Event} evt
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
dia.LinkView.prototype.pointerup = function(evt, x, y) {};

/**
 * @param {number} idx
 * @return {?}
 */
dia.LinkView.prototype.removeVertex = function(idx) {};

/**
 * @return {?}
 */
dia.LinkView.prototype.render = function() {};

/**
 * @return {?}
 */
dia.LinkView.prototype.renderArrowheadMarkers = function() {};

/**
 * @return {?}
 */
dia.LinkView.prototype.renderLabels = function() {};

/**
 * @return {?}
 */
dia.LinkView.prototype.renderTools = function() {};

/**
 * @return {?}
 */
dia.LinkView.prototype.renderVertexMarkers = function() {};

/**
 * @param {string} end
 * @param {?=} options
 * @return {void}
 */
dia.LinkView.prototype.startArrowheadMove = function(end, options) {};

/**
 * @return {void}
 */
dia.LinkView.prototype.startListening = function() {};

/**
 * @param {?} model
 * @param {?} attributes
 * @param {?=} options
 * @return {?}
 */
dia.LinkView.prototype.update = function(model, attributes, options) {};

/**
 * @return {?}
 */
dia.LinkView.prototype.updateArrowheadMarkers = function() {};

/**
 * @return {void}
 */
dia.LinkView.prototype.updateAttributes = function() {};

/**
 * @param {?=} options
 * @return {void}
 */
dia.LinkView.prototype.updateConnection = function(options) {};

/**
 * @return {?}
 */
dia.LinkView.prototype.updateLabelPositions = function() {};

/**
 * @return {?}
 */
dia.LinkView.prototype.updateToolsPosition = function() {};
/** @const */
var ui = {};
/** @const */
var shapes = {};
/**
 * @extends {dia.CellAttributes}
 * @record
 * @struct
 */
shapes.GenericAttributes = function() {};
 /** @type {?} */
shapes.GenericAttributes.prototype.position;
 /** @type {?} */
shapes.GenericAttributes.prototype.size;
 /** @type {number} */
shapes.GenericAttributes.prototype.angle;
 /** @type {?} */
shapes.GenericAttributes.prototype.attrs;
/**
 * @extends {dia.CSSSelector}
 * @record
 * @struct
 */
shapes.ShapeAttrs = function() {};
 /** @type {string} */
shapes.ShapeAttrs.prototype.fill;
 /** @type {string} */
shapes.ShapeAttrs.prototype.stroke;
 /** @type {(string|number)} */
shapes.ShapeAttrs.prototype.r;
 /** @type {(string|number)} */
shapes.ShapeAttrs.prototype.rx;
 /** @type {(string|number)} */
shapes.ShapeAttrs.prototype.ry;
 /** @type {(string|number)} */
shapes.ShapeAttrs.prototype.cx;
 /** @type {(string|number)} */
shapes.ShapeAttrs.prototype.cy;
 /** @type {(string|number)} */
shapes.ShapeAttrs.prototype.height;
 /** @type {(string|number)} */
shapes.ShapeAttrs.prototype.width;
 /** @type {string} */
shapes.ShapeAttrs.prototype.transform;
 /** @type {string} */
shapes.ShapeAttrs.prototype.points;

/* TODO: PropertySignature: shapes.'stroke-width' */

/* TODO: PropertySignature: shapes.'ref-x' */

/* TODO: PropertySignature: shapes.'ref-y' */
 /** @type {string} */
shapes.ShapeAttrs.prototype.ref;
/** @const */
shapes.basic = {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.basic.Generic = function(attributes, options) {};
/**
 * @extends {dia.TextAttrs}
 * @record
 * @struct
 */
shapes.basic.RectAttrs = function() {};
 /** @type {?} */
shapes.basic.RectAttrs.prototype.rect;

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.basic.Rect = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.basic.Text = function(attributes, options) {};
/**
 * @extends {dia.TextAttrs}
 * @record
 * @struct
 */
shapes.basic.CircleAttrs = function() {};
 /** @type {?} */
shapes.basic.CircleAttrs.prototype.circle;

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.basic.Circle = function(attributes, options) {};
/**
 * @extends {dia.TextAttrs}
 * @record
 * @struct
 */
shapes.basic.EllipseAttrs = function() {};
 /** @type {?} */
shapes.basic.EllipseAttrs.prototype.ellipse;

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.basic.Ellipse = function(attributes, options) {};
/**
 * @extends {dia.TextAttrs}
 * @record
 * @struct
 */
shapes.basic.PolygonAttrs = function() {};
 /** @type {?} */
shapes.basic.PolygonAttrs.prototype.polygon;

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.basic.Polygon = function(attributes, options) {};
/**
 * @extends {dia.TextAttrs}
 * @record
 * @struct
 */
shapes.basic.PolylineAttrs = function() {};
 /** @type {?} */
shapes.basic.PolylineAttrs.prototype.polyline;

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.basic.Polyline = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.basic.Image = function(attributes, options) {};
/**
 * @extends {dia.TextAttrs}
 * @record
 * @struct
 */
shapes.basic.PathAttrs = function() {};
 /** @type {?} */
shapes.basic.PathAttrs.prototype.path;

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.basic.Path = function(attributes, options) {};
/**
 * @extends {dia.TextAttrs}
 * @record
 * @struct
 */
shapes.basic.RhombusAttrs = function() {};
 /** @type {?} */
shapes.basic.RhombusAttrs.prototype.path;

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.basic.Rhombus = function(attributes, options) {};
/**
 * @extends {dia.TextAttrs}
 * @record
 * @struct
 */
shapes.basic.TextBlockAttrs = function() {};
 /** @type {?} */
shapes.basic.TextBlockAttrs.prototype.rect;

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.basic.TextBlock = function(attributes, options) {};

/**
 * @param {?} cell
 * @param {?} size
 * @return {void}
 */
shapes.basic.TextBlock.prototype.updateSize = function(cell, size) {};

/**
 * @param {?} cell
 * @param {string} content
 * @return {void}
 */
shapes.basic.TextBlock.prototype.updateContent = function(cell, content) {};
/** @const */
shapes.chess = {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.chess.KingWhite = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.chess.KingBlack = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.chess.QueenWhite = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.chess.QueenBlack = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.chess.RookWhite = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.chess.RookBlack = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.chess.BishopWhite = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.chess.BishopBlack = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.chess.KnightWhite = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.chess.KnightBlack = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.chess.PawnWhite = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.chess.PawnBlack = function(attributes, options) {};
/** @const */
shapes.devs = {};
/**
 * @extends {shapes.GenericAttributes}
 * @record
 * @struct
 */
shapes.devs.ModelAttributes = function() {};
 /** @type {!Array<string>} */
shapes.devs.ModelAttributes.prototype.inPorts;
 /** @type {!Array<string>} */
shapes.devs.ModelAttributes.prototype.outPorts;
 /** @type {!Object} */
shapes.devs.ModelAttributes.prototype.ports;

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.devs.Model = function(attributes, options) {};

/**
 * @param {?} properties
 * @param {?=} opt
 * @return {boolean}
 */
shapes.devs.Model.prototype.changeInGroup = function(properties, opt) {};

/**
 * @param {?} properties
 * @param {?=} opt
 * @return {boolean}
 */
shapes.devs.Model.prototype.changeOutGroup = function(properties, opt) {};

/**
 * @param {string} group
 * @param {string} port
 * @return {?}
 */
shapes.devs.Model.prototype.createPortItem = function(group, port) {};

/**
 * @param {string} group
 * @param {!Array<string>} ports
 * @return {!Array<?>}
 */
shapes.devs.Model.prototype.createPortItems = function(group, ports) {};

/**
 * @param {string} port
 * @param {?=} opt
 * @return {?}
 */
shapes.devs.Model.prototype.addOutPort = function(port, opt) {};

/**
 * @param {string} port
 * @param {?=} opt
 * @return {?}
 */
shapes.devs.Model.prototype.addInPort = function(port, opt) {};

/**
 * @param {string} port
 * @param {?=} opt
 * @return {?}
 */
shapes.devs.Model.prototype.removeOutPort = function(port, opt) {};

/**
 * @param {string} port
 * @param {?=} opt
 * @return {?}
 */
shapes.devs.Model.prototype.removeInPort = function(port, opt) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.devs.Coupled = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.devs.Atomic = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.devs.Link = function(attributes, options) {};
/** @const */
shapes.erd = {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.erd.Entity = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.erd.WeakEntity = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.erd.Relationship = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.erd.IdentifyingRelationship = function(attributes, options) {};
/**
 * @extends {dia.TextAttrs}
 * @record
 * @struct
 */
shapes.erd.AttributeAttrs = function() {};
 /** @type {?} */
shapes.erd.AttributeAttrs.prototype.ellipse;

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.erd.Attribute = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.erd.Multivalued = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.erd.Derived = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.erd.Key = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.erd.Normal = function(attributes, options) {};
/**
 * @record
 * @struct
 */
shapes.erd.ISAAttrs = function() {};
 /** @type {?} */
shapes.erd.ISAAttrs.prototype.polygon;

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.erd.ISA = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.erd.Line = function(attributes, options) {};

/**
 * @param {(string|number)} value
 * @return {void}
 */
shapes.erd.Line.prototype.cardinality = function(value) {};
/** @const */
shapes.fsa = {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.fsa.State = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.fsa.StartState = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.fsa.EndState = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.fsa.Arrow = function(attributes, options) {};
/** @const */
shapes.logic = {};
/**
 * @extends {shapes.ShapeAttrs}
 * @record
 * @struct
 */
shapes.logic.LogicAttrs = function() {};
 /** @type {string} */
shapes.logic.LogicAttrs.prototype.ref;

/* TODO: PropertySignature: shapes.logic.'ref-x' */

/* TODO: PropertySignature: shapes.logic.'ref-dx' */

/* TODO: PropertySignature: shapes.logic.'ref-y' */

/* TODO: PropertySignature: shapes.logic.'ref-dy' */
 /** @type {boolean} */
shapes.logic.LogicAttrs.prototype.magnet;

/* TODO: PropertySignature: shapes.logic.'class' */
 /** @type {string} */
shapes.logic.LogicAttrs.prototype.port;
/**
 * @extends {dia.TextAttrs}
 * @record
 * @struct
 */
shapes.logic.IOAttrs = function() {};
 /** @type {?} */
shapes.logic.IOAttrs.prototype.circle;

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.logic.Gate = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.logic.IO = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.logic.Input = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.logic.Output = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.logic.Gate11 = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.logic.Gate21 = function(attributes, options) {};
/**
 * @record
 * @struct
 */
shapes.logic.Image = function() {};

/* TODO: PropertySignature: shapes.logic.'xlink:href' */
/**
 * @extends {shapes.logic.LogicAttrs}
 * @record
 * @struct
 */
shapes.logic.ImageAttrs = function() {};
 /** @type {?} */
shapes.logic.ImageAttrs.prototype.image;

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.logic.Repeater = function(attributes, options) {};

/**
 * @param {?} input
 * @return {?}
 */
shapes.logic.Repeater.prototype.operation = function(input) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.logic.Note = function(attributes, options) {};

/**
 * @param {?} input
 * @return {boolean}
 */
shapes.logic.Note.prototype.operation = function(input) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.logic.Or = function(attributes, options) {};

/**
 * @param {?} input1
 * @param {?} input2
 * @return {boolean}
 */
shapes.logic.Or.prototype.operation = function(input1, input2) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.logic.And = function(attributes, options) {};

/**
 * @param {?} input1
 * @param {?} input2
 * @return {boolean}
 */
shapes.logic.And.prototype.operation = function(input1, input2) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.logic.Nor = function(attributes, options) {};

/**
 * @param {?} input1
 * @param {?} input2
 * @return {boolean}
 */
shapes.logic.Nor.prototype.operation = function(input1, input2) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.logic.Nand = function(attributes, options) {};

/**
 * @param {?} input1
 * @param {?} input2
 * @return {boolean}
 */
shapes.logic.Nand.prototype.operation = function(input1, input2) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.logic.Xor = function(attributes, options) {};

/**
 * @param {?} input1
 * @param {?} input2
 * @return {boolean}
 */
shapes.logic.Xor.prototype.operation = function(input1, input2) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.logic.Xnor = function(attributes, options) {};

/**
 * @param {?} input1
 * @param {?} input2
 * @return {boolean}
 */
shapes.logic.Xnor.prototype.operation = function(input1, input2) {};
/**
 * @extends {dia.LinkAttributes}
 * @record
 * @struct
 */
shapes.logic.WireArgs = function() {};
 /** @type {!Object} */
shapes.logic.WireArgs.prototype.router;
 /** @type {!Object} */
shapes.logic.WireArgs.prototype.connector;

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.logic.Wire = function(attributes, options) {};
/** @const */
shapes.org = {};
/**
 * @record
 * @struct
 */
shapes.org.MemberAttrs = function() {};
 /** @type {?} */
shapes.org.MemberAttrs.prototype.rect;
 /** @type {?} */
shapes.org.MemberAttrs.prototype.image;

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.org.Member = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.org.Arrow = function(attributes, options) {};
/** @const */
shapes.pn = {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.pn.Place = function(attributes, options) {};
/**
 * @constructor
 * @struct
 */
shapes.pn.PlaceView = function() {};

/**
 * @return {void}
 */
shapes.pn.PlaceView.prototype.renderTokens = function() {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.pn.Transition = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.pn.Link = function(attributes, options) {};
/** @const */
shapes.uml = {};
/**
 * @extends {shapes.GenericAttributes}
 * @record
 * @struct
 */
shapes.uml.ClassAttributes = function() {};
 /** @type {!Array<string>} */
shapes.uml.ClassAttributes.prototype.name;
 /** @type {!Array<string>} */
shapes.uml.ClassAttributes.prototype.attributes;
 /** @type {!Array<string>} */
shapes.uml.ClassAttributes.prototype.methods;

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.uml.Class = function(attributes, options) {};

/**
 * @return {!Array<string>}
 */
shapes.uml.Class.prototype.getClassName = function() {};

/**
 * @return {void}
 */
shapes.uml.Class.prototype.updateRectangles = function() {};
/**
 * @constructor
 * @struct
 */
shapes.uml.ClassView = function() {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.uml.Abstract = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.uml.AbstractView = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.uml.Interface = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.uml.InterfaceView = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.uml.Generalization = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.uml.Implementation = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.uml.Aggregation = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.uml.Composition = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.uml.Association = function(attributes, options) {};
/**
 * @extends {shapes.GenericAttributes}
 * @record
 * @struct
 */
shapes.uml.StateAttributes = function() {};
 /** @type {!Array<string>} */
shapes.uml.StateAttributes.prototype.events;

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.uml.State = function(attributes, options) {};

/**
 * @return {void}
 */
shapes.uml.State.prototype.updateName = function() {};

/**
 * @return {void}
 */
shapes.uml.State.prototype.updateEvents = function() {};

/**
 * @return {void}
 */
shapes.uml.State.prototype.updatePath = function() {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.uml.StartState = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.uml.EndState = function(attributes, options) {};

/**
 * @constructor
 * @struct
 * @param {?=} attributes
 * @param {!Object=} options
 */
shapes.uml.Transition = function(attributes, options) {};
/** @const */
var util = {};
/** @const */
util.format = {};

/**
 * @param {string} specifier
 * @param {number} value
 * @return {string}
 */
util.format.number = function(specifier, value) {};

/**
 * @return {string}
 */
util.uuid = function() {};

/**
 * @param {!Object=} obj
 * @return {string}
 */
util.guid = function(obj) {};

/**
 * @param {?} callback
 * @param {!Object=} context
 * @return {number}
 */
util.nextFrame = function(callback, context) {};

/**
 * @param {number} requestId
 * @return {void}
 */
util.cancelFrame = function(requestId) {};

/**
 * @param {!Object} object
 * @param {string} delim
 * @param {?} stop
 * @return {?}
 */
util.flattenObject = function(object, delim, stop) {};

/**
 * @param {!Object} object
 * @param {string} path
 * @param {string} delim
 * @return {?}
 */
util.getByPath = function(object, path, delim) {};

/**
 * @param {!Object} object
 * @param {string} path
 * @param {!Object} value
 * @param {string} delim
 * @return {?}
 */
util.setByPath = function(object, path, value, delim) {};

/**
 * @param {!Object} object
 * @param {string} path
 * @param {string} delim
 * @return {?}
 */
util.unsetByPath = function(object, path, delim) {};

/**
 * @param {string} text
 * @param {?} size
 * @param {?=} attrs
 * @param {?=} options
 * @return {string}
 */
util.breakText = function(text, size, attrs, options) {};

/**
 * @param {(number|?)} box
 * @return {?}
 */
util.normalizeSides = function(box) {};

/**
 * @param {!Element} el
 * @return {?}
 */
util.getElementBBox = function(el) {};

/**
 * @param {!Element} el
 * @param {?} attrs
 * @return {void}
 */
util.setAttributesBySelector = function(el, attrs) {};

/**
 * @param {(string|?<!HTMLElement>|!Array<!Element>)} elements
 * @param {?} comparator
 * @return {!Array<!Element>}
 */
util.sortElements = function(elements, comparator) {};

/**
 * @param {?} linkView
 * @param {?} view
 * @param {!SVGElement} magnet
 * @param {?} ref
 * @return {?}
 */
util.shapePerimeterConnectionPoint = function(linkView, view, magnet, ref) {};

/**
 * @param {string} url
 * @param {?} callback
 * @return {void}
 */
util.imageToDataUri = function(url, callback) {};

/**
 * @deprecated use lodash _.defaultsDeep
 * @param {?} objects
 * @param {?=} defaultIndicator
 * @return {?}
 */
util.deepSupplement = function(objects, defaultIndicator) {};

/**
 * @deprecated use lodash _.assign
 * @param {!Array<?>} objects
 * @return {?}
 */
util.mixin = function(objects) {};

/**
 * @deprecated use lodash _.defaults
 * @param {!Array<?>} objects
 * @return {?}
 */
util.supplement = function(objects) {};

/**
 * @deprecated use lodash _.mixin
 * @param {!Array<?>} objects
 * @return {?}
 */
util.deepMixin = function(objects) {};
/** @const */
var layout = {};
/**
 * @record
 * @struct
 */
layout.LayoutOptions = function() {};
 /** @type {number} */
layout.LayoutOptions.prototype.nodeSep;
 /** @type {number} */
layout.LayoutOptions.prototype.edgeSep;
 /** @type {number} */
layout.LayoutOptions.prototype.rankSep;
 /** @type {string} */
layout.LayoutOptions.prototype.rankDir;
 /** @type {number} */
layout.LayoutOptions.prototype.marginX;
 /** @type {number} */
layout.LayoutOptions.prototype.marginY;
 /** @type {boolean} */
layout.LayoutOptions.prototype.resizeCluster;
 /** @type {?} */
layout.LayoutOptions.prototype.setPosition;
 /** @type {?} */
layout.LayoutOptions.prototype.setLinkVertices;
/**
 * @constructor
 * @struct
 */
layout.DirectedGraph = function() {};

/**
 * @param {(?|!Array<?>)} graph
 * @param {?=} options
 * @return {?}
 */
layout.DirectedGraph.layout = function(graph, options) {};
