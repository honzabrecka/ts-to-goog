/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/documentdb/index.d.ts:
/**
 * @extends {RequestOptions}
 * @record
 * @struct
 */
function FeedOptions() {}
 /** @type {number} */
FeedOptions.prototype.maxItemCount;
 /** @type {string} */
FeedOptions.prototype.continuation;
 /** @type {string} */
FeedOptions.prototype.sessionToken;
 /** @type {boolean} */
FeedOptions.prototype.enableScanInQuery;
/**
 * @record
 * @struct
 */
function RequestOptions() {}
 /** @type {string} */
RequestOptions.prototype.preTriggerInclude;
 /** @type {string} */
RequestOptions.prototype.postTriggerInclude;
 /** @type {?} */
RequestOptions.prototype.accessCondition;
 /** @type {string} */
RequestOptions.prototype.indexingDirective;
 /** @type {string} */
RequestOptions.prototype.consistencyLevel;
 /** @type {string} */
RequestOptions.prototype.sessionToken;
 /** @type {number} */
RequestOptions.prototype.resourceTokenExpirySeconds;
 /** @type {string} */
RequestOptions.prototype.offerType;
 /** @type {number} */
RequestOptions.prototype.offerThroughput;
 /** @type {(string|!Array<string>)} */
RequestOptions.prototype.partitionKey;
 /** @type {boolean} */
RequestOptions.prototype.enableCrossPartitionQuery;
 /** @type {boolean} */
RequestOptions.prototype.maxDegreeOfParallelism;
 /** @type {boolean} */
RequestOptions.prototype.populateQuotaInfo;
/**
 * @extends {RequestOptions}
 * @record
 * @struct
 */
function DocumentOptions() {}
 /** @type {boolean} */
DocumentOptions.prototype.disableAutomaticIdGeneration;
/**
 * @record
 * @struct
 */
function SqlParameter() {}
 /** @type {string} */
SqlParameter.prototype.name;
 /** @type {?} */
SqlParameter.prototype.value;
/**
 * @record
 * @struct
 */
function SqlQuerySpec() {}
 /** @type {string} */
SqlQuerySpec.prototype.query;
 /** @type {!Array<?>} */
SqlQuerySpec.prototype.parameters;
/**
 * @record
 * @struct
 */
function QueryError() {}
 /** @type {number} */
QueryError.prototype.code;
 /** @type {string} */
QueryError.prototype.body;

/** @typedef {?} */
var RequestCallback;
/**
 * @record
 * @struct
 */
function UniqueId() {}
 /** @type {string} */
UniqueId.prototype.id;
/**
 * @extends {UniqueId}
 * @record
 * @struct
 */
function AbstractMeta() {}
 /** @type {string} */
AbstractMeta.prototype._self;
 /** @type {string} */
AbstractMeta.prototype._ts;
 /** @type {string} */
AbstractMeta.prototype._rid;
 /** @type {string} */
AbstractMeta.prototype._etag;
 /** @type {string} */
AbstractMeta.prototype._attachments;
/**
 * @extends {UniqueId}
 * @record
 * @struct
 */
function NewDocument() {}
 /** @type {number} */
NewDocument.prototype.ttl;

/* TODO: IndexSignature:  */
/**
 * @extends {NewDocument}
 * @extends {AbstractMeta}
 * @record
 * @struct
 */
function RetrievedDocument() {}
/**
 * @extends {AbstractMeta}
 * @record
 * @struct
 */
function DatabaseMeta() {}
/**
 * @extends {Collection}
 * @extends {AbstractMeta}
 * @record
 * @struct
 */
function CollectionMeta() {}
/**
 * @extends {AbstractMeta}
 * @record
 * @struct
 */
function ProcedureMeta() {}
 /** @type {string} */
ProcedureMeta.prototype.body;
/**
 * @extends {AbstractMeta}
 * @record
 * @struct
 */
function UserDefinedFunctionMeta() {}
/**
 * @extends {AbstractMeta}
 * @record
 * @struct
 */
function TriggerMeta() {}
 /** @type {string} */
TriggerMeta.prototype.body;
 /** @type {string} */
TriggerMeta.prototype.triggerType;
 /** @type {string} */
TriggerMeta.prototype.triggerOperation;

/** @typedef {(string|?)} */
var UserFunction;
/**
 * @extends {UniqueId}
 * @record
 * @struct
 */
function UserScriptable() {}
 /** @type {(string|?)} */
UserScriptable.prototype.body;
 /** @type {(string|?)} */
UserScriptable.prototype.serverScript;
/**
 * @record
 * @struct
 */
function AuthOptions() {}
 /** @type {string} */
AuthOptions.prototype.masterKey;
 /** @type {?} */
AuthOptions.prototype.resourceTokens;
 /** @type {!Array<?>} */
AuthOptions.prototype.permissionFeed;
/**
 * @extends {UserScriptable}
 * @record
 * @struct
 */
function Procedure() {}
/**
 * @extends {UserScriptable}
 * @record
 * @struct
 */
function UserDefinedFunction() {}
 /** @type {string} */
UserDefinedFunction.prototype.userDefinedFunctionType;
/**
 * @extends {UserScriptable}
 * @record
 * @struct
 */
function Trigger() {}
 /** @type {string} */
Trigger.prototype.triggerType;
 /** @type {string} */
Trigger.prototype.triggerOperation;
/**
 * @extends {UniqueId}
 * @record
 * @struct
 */
function Collection() {}
 /** @type {?} */
Collection.prototype.indexingPolicy;
 /** @type {number} */
Collection.prototype.defaultTtl;
 /** @type {?} */
Collection.prototype.partitionKey;
/**
 * @record
 * @struct
 */
function Attachment() {}
 /** @type {string} */
Attachment.prototype.contentType;
 /** @type {string} */
Attachment.prototype.media;

/* TODO: IndexSignature:  */
/**
 * @extends {Attachment}
 * @extends {AbstractMeta}
 * @record
 * @struct
 */
function AttachmentMeta() {}
/**
 * @extends {UniqueId}
 * @record
 * @struct
 */
function Permission() {}
 /** @type {string} */
Permission.prototype.permissionMode;
 /** @type {string} */
Permission.prototype.resource;
/**
 * @extends {Permission}
 * @extends {AbstractMeta}
 * @record
 * @struct
 */
function PermissionMeta() {}
/**
 * @record
 * @struct
 */
function IndexingPolicy() {}
 /** @type {boolean} */
IndexingPolicy.prototype.automatic;
 /** @type {string} */
IndexingPolicy.prototype.indexingMode;
 /** @type {!Array<?>} */
IndexingPolicy.prototype.IncludedPaths;
 /** @type {!Array<?>} */
IndexingPolicy.prototype.ExcludedPaths;
/**
 * @record
 * @struct
 */
function ExcludedPath() {}
 /** @type {string} */
ExcludedPath.prototype.Path;
/**
 * @record
 * @struct
 */
function IncludedPath() {}
 /** @type {string} */
IncludedPath.prototype.Path;
 /** @type {!Array<?>} */
IncludedPath.prototype.Indexes;
/**
 * @record
 * @struct
 */
function Index() {}
 /** @type {string} */
Index.prototype.Kind;
 /** @type {string} */
Index.prototype.DataType;
 /** @type {number} */
Index.prototype.Precision;
/**
 * @record
 * @struct
 */
function ConnectionPolicy() {}
 /** @type {string} */
ConnectionPolicy.prototype.MediaReadMode;
 /** @type {number} */
ConnectionPolicy.prototype.MediaRequestTimeout;
 /** @type {number} */
ConnectionPolicy.prototype.RequestTimeout;
 /** @type {boolean} */
ConnectionPolicy.prototype.EnableEndpointDiscovery;
 /** @type {!Array<?>} */
ConnectionPolicy.prototype.PreferredLocations;
 /** @type {?} */
ConnectionPolicy.prototype.RetryOptions;
 /** @type {boolean} */
ConnectionPolicy.prototype.DisableSSLVerification;
/**
 * @record
 * @struct
 */
function RetryOptions() {}
 /** @type {number} */
RetryOptions.prototype.MaxRetryAttemptCount;
 /** @type {number} */
RetryOptions.prototype.FixedRetryIntervalInMilliseconds;
 /** @type {number} */
RetryOptions.prototype.MaxWaitTimeInSeconds;
/**
 * @extends {RequestOptions}
 * @record
 * @struct
 */
function MediaOptions() {}
 /** @type {string} */
MediaOptions.prototype.slug;
 /** @type {string} */
MediaOptions.prototype.contentType;
/**
 * @extends {RequestOptions}
 * @record
 * @struct
 */
function DatabaseAccountRequestOptions() {}
 /** @type {string} */
DatabaseAccountRequestOptions.prototype.urlConnection;
/**
 * @record
 * @struct
 */
function DatabaseAccount() {}
 /** @type {string} */
DatabaseAccount.prototype.DatabasesLink;
 /** @type {string} */
DatabaseAccount.prototype.MediaLink;
 /** @type {number} */
DatabaseAccount.prototype.MaxMediaStorageUsageInMB;
 /** @type {number} */
DatabaseAccount.prototype.CurrentMediaStorageUsageInMB;
 /** @type {?} */
DatabaseAccount.prototype.ConsistencyPolicy;
 /** @type {!Array<string>} */
DatabaseAccount.prototype.WritableLocations;
 /** @type {!Array<string>} */
DatabaseAccount.prototype.ReadableLocations;
/**
 * @record
 * @struct
 */
function ConsistencyPolicy() {}
 /** @type {string} */
ConsistencyPolicy.prototype.defaultConsistencyLevel;
 /** @type {number} */
ConsistencyPolicy.prototype.maxStalenessPrefix;
 /** @type {number} */
ConsistencyPolicy.prototype.maxStalenessIntervalInSeconds;
/**
 * @record
 * @struct
 */
function RangeOptions() {}
 /** @type {?} */
RangeOptions.prototype.low;
 /** @type {?} */
RangeOptions.prototype.high;
/**
 * @record
 * @struct
 */
function PartitionKeyMap() {}
 /** @type {string} */
PartitionKeyMap.prototype.link;
 /** @type {?} */
PartitionKeyMap.prototype.range;
/**
 * @record
 * @struct
 */
function CollectionPartitionKey() {}
 /** @type {!Array<string>} */
CollectionPartitionKey.prototype.paths;
 /** @type {string} */
CollectionPartitionKey.prototype.kind;

/** @typedef {(string|?)} */
var DocumentQuery;
/**
 * @record
 * @struct
 */
function PartitionResolver() {}

/**
 * Extracts the partition key from the specified document using the partitionKeyExtractor
 * @param {?} document - The document from which to extract the partition key.
 * @return {string}
 */
PartitionResolver.prototype.getPartitionKey = function(document) {};

/**
 * Given a partition key, returns the correct collection link for creating a document.
 * @param {string} partitionKey - The partition key used to determine the target collection for create
 * @return {string}
 */
PartitionResolver.prototype.resolveForCreate = function(partitionKey) {};

/**
 * Given a partition key, returns a list of collection links to read from.
 * @param {?} partitionKey - The partition key used to determine the target collection for query
 * @return {!Array<string>}
 */
PartitionResolver.prototype.resolveForRead = function(partitionKey) {};
/**
 * @record
 * @struct
 */
function ConsistentHashRingOptions() {}
 /** @type {number} */
ConsistentHashRingOptions.prototype.numberOfVirtualNodesPerCollection;

/**
 * Function to compute the hash for a given link or partition key
 * @param {(string|number)} key
 * @param {number} seed
 * @return {number}
 */
ConsistentHashRingOptions.prototype.computeHash = function(key, seed) {};

/**
 * @constructor
 * @struct
 * Constructs a QueryIterator object
 * @param {?} documentclient    - The documentclient object.
 * @param {(string|?)} query             - A SQL query.
 * @param {?} options           - Represents the feed options.
 * @param {(?|!Array<?>)} fetchFunctions    - A function to retrieve each page of data. An array of functions may be used to query more than one partition.
 * @param {string=} resourceLinkopt   - An optional parameter that represents the resourceLink (will be used in orderby/top/parallel query)
 */
function QueryIterator(documentclient, query, options, fetchFunctions, resourceLinkopt) {}

/**
 * Retrieve the current element on the QueryIterator.
 * @param {?} callback Function to execute for the current element.
 * @return {void}
 */
QueryIterator.prototype.current = function(callback) {};

/**
 * Retrieve the next batch of the feed and pass them as an array to a function
 * @param {?} callback Function execute on the feed response.
 * @return {void}
 */
QueryIterator.prototype.executeNext = function(callback) {};

/**
 * Execute a provided function once per feed element.
 * @param {?} callback Function to execute for each element. the function takes two parameters error, element. Note: the last element the callback
 *        will be called on will be undefined. If the callback explicitly returned false, the loop gets stopped.
 * @return {void}
 */
QueryIterator.prototype.forEach = function(callback) {};

/**
 * DEPRECATED
 * 
 * Instead check if callback(undefined, undefined) is invoked by nextItem(callback) or current(callback)
 * 
 * Determine if there are still remaining resources to processs based on the value of the continuation token
 * or the elements remaining on the current batch in the QueryIterator.
 * @deprecated
 * @return {boolean}
 */
QueryIterator.prototype.hasMoreResults = function() {};

/**
 * Execute a provided function on the next element in the QueryIterator.
 * @param {?} callback Function to execute for each element.
 * @return {void}
 */
QueryIterator.prototype.nextItem = function(callback) {};

/**
 * Reset the QueryIterator to the beginning and clear all the resources inside it
 * @return {void}
 */
QueryIterator.prototype.reset = function() {};

/**
 * Retrieve all the elements of the feed and pass them as an array to a function
 * @param {?} callback Function execute on the feed response.
 * @return {void}
 */
QueryIterator.prototype.toArray = function(callback) {};

/**
 * @constructor
 * @struct
 * DEPRECATED
 * 
 * Support for IPartitionResolver is now obsolete.
 * It's recommended that you use Partitioned Collections for higher storage and throughput.
 * 
 * @deprecated
 * @param {(string|?)} partitionKeyExtractor - If partitionKeyExtractor is a string, it should be the name of the property in the document to execute the hashing on.
 *        If partitionKeyExtractor is a function, it should be a function to extract the partition key from an object.
 * @param {!Array<string>} collectionLinks
 * @param {?=} options               - Options forr the ConsistentHashRing (MurmurHash)
 */
function HashPartitionResolver(partitionKeyExtractor, collectionLinks, options) {}

/**
 * Extracts the partition key from the specified document using the partitionKeyExtractor
 * @param {?} document - The document from which to extract the partition key.
 * @return {string}
 */
HashPartitionResolver.prototype.getPartitionKey = function(document) {};

/**
 * Given a partition key, returns the correct collection link for creating a document.
 * @param {string} partitionKey - The partition key used to determine the target collection for create
 * @return {string}
 */
HashPartitionResolver.prototype.resolveForCreate = function(partitionKey) {};

/**
 * Given a partition key, returns a list of collection links to read from.
 * @param {string} partitionKey - The partition key used to determine the target collection for query
 * @return {!Array<string>}
 */
HashPartitionResolver.prototype.resolveForRead = function(partitionKey) {};

/**
 * @constructor
 * @struct
 * DEPRECATED
 * 
 * Support for IPartitionResolver is now obsolete.
 * It's recommended that you use Partitioned Collections for higher storage and throughput.
 * 
 * @deprecated
 * @param {?} options -  The Range constructor options.
 */
function Range(options) {}

/**
 * @constructor
 * @struct
 * DEPRECATED
 * 
 * Support for IPartitionResolver is now obsolete.
 * It's recommended that you use Partitioned Collections for higher storage and throughput.
 * 
 * @deprecated
 * @param {(string|?)} partitionKeyExtractor - If partitionKeyExtractor is a string, it should be the name of the property in the document to execute the
 *        hashing on. If partitionKeyExtractor is a function, it should be a function to extract the partition key from an object.
 * @param {!Array<?>} partitionKeyMap       - The map from Range to collection link that is used for partitioning requests.
 * @param {?=} compareFunction
 */
function RangePartitionResolver(partitionKeyExtractor, partitionKeyMap, compareFunction) {}

/**
 * Extracts the partition key from the specified document using the partitionKeyExtractor
 * @param {?} document - The document from which to extract the partition key.
 * @return {string}
 */
RangePartitionResolver.prototype.getPartitionKey = function(document) {};

/**
 * Given a partition key, returns the correct collection link for creating a document.
 * @param {string} partitionKey - The partition key used to determine the target collection for create
 * @return {string}
 */
RangePartitionResolver.prototype.resolveForCreate = function(partitionKey) {};

/**
 * Given a partition key, returns a list of collection links to read from.
 * @param {string} partitionKey - The partition key used to determine the target collection for query
 * @return {!Array<string>}
 */
RangePartitionResolver.prototype.resolveForRead = function(partitionKey) {};

/**
 * @constructor
 * @struct
 * Constructs a DocumentClient.
 * @param {string} urlConnection           - The service endpoint to use to create the client.
 * @param {?} auth                    - An object that is used for authenticating requests and must contains one of the options.
 * @param {?=} connectionPolicy
 * @param {string=} consistencyLevel
 */
function DocumentClient(urlConnection, auth, connectionPolicy, consistencyLevel) {}

/**
 * Create an attachment for the document object.
 * <p>
 *  Each document may contain zero or more attachments. Attachments can be of any MIME type - text, image, binary data. <br>
 *  These are stored externally in Azure Blob storage. Attachments are automatically deleted when the parent document is deleted.
 * </p>
 * @param {string} documentLink  - The self-link of the document.
 * @param {?} body          - The metadata the defines the attachment media like media, contentType. It can include any other properties as part of the metedata
 * @param {?} options_or_callback
 * @param {?=} callback      - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.createAttachment = function(documentLink, body, options_or_callback, callback) {};

/**
 * Create an attachment with media file for the document object.
 * @param {string} documentLink      - The self-link of the document.
 * @param {!NodeJS.ReadableStream} readableStream    - The stream that represents the media itself that needs to be uploaded.
 * @param {?} options_or_callback
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.createAttachmentAndUploadMedia = function(documentLink, readableStream, options_or_callback, callback) {};

/**
 * Send a request for creating a database.
 *  A database manages users, permissions and a set of collections.
 *  Each Azure DocumentDB Database Account is able to support multiple independent named databases, with the database being the logical container for data.
 *  Each Database consists of one or more collections, each of which in turn contain one or more documents. Since databases are an an administrative
 *  resource, the Service Master Key will be required in order to access and successfully complete any action using the User APIs.
 * @param {?} body      - A json object that represents The database to be created.
 * @param {?} options_or_callback
 * @param {?=} callback  - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.createDatabase = function(body, options_or_callback, callback) {};

/**
 * Creates a collection.
 * <p>
 * A collection is a named logical container for documents. <br>
 * A database may contain zero or more named collections and each collection consists of zero or more JSON documents. <br>
 * Being schema-free, the documents in a collection do not need to share the same structure or fields. <br>
 * Since collections are application resources, they can be authorized using either the master key or resource keys. <br>
 * </p>
 * @param {string} databaseLink  - The self-link of the database.
 * @param {?} body          - Represents the body of the collection.
 * @param {?} options_or_callback
 * @param {?=} callback      - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.createCollection = function(databaseLink, body, options_or_callback, callback) {};

/**
 * Create a StoredProcedure.
 * <p>
 * DocumentDB allows stored procedures to be executed in the storage tier, directly against a document collection. The script <br>
 * gets executed under ACID transactions on the primary storage partition of the specified collection. For additional details, <br>
 * refer to the server-side JavaScript API documentation.
 * </p>
 * @param {string} collectionLink    - The self-link of the collection.
 * @param {?} procedure         - Represents the body of the stored procedure.
 * @param {?} options_or_callback
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.createStoredProcedure = function(collectionLink, procedure, options_or_callback, callback) {};

/**
 * Create a UserDefinedFunction.
 * <p>
 * DocumentDB supports JavaScript UDFs which can be used inside queries, stored procedures and triggers. <br>
 * For additional details, refer to the server-side JavaScript API documentation.
 * </p>
 * @param {string} collectionLink    - The self-link of the collection.
 * @param {?} udf               - Represents the body of the userDefinedFunction.
 * @param {?} options_or_callback
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.createUserDefinedFunction = function(collectionLink, udf, options_or_callback, callback) {};

/**
 * Create a trigger.
 * <p>
 * DocumentDB supports pre and post triggers defined in JavaScript to be executed on creates, updates and deletes. <br>
 * For additional details, refer to the server-side JavaScript API documentation.
 * </p>
 * @param {string} collectionLink  - The self-link of the collection.
 * @param {?} trigger         - Represents the body of the trigger.
 * @param {?} options_or_callback
 * @param {?=} callback        - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.createTrigger = function(collectionLink, trigger, options_or_callback, callback) {};

/**
 * Create a document.
 * <p>
 * There is no set schema for JSON documents. They may contain any number of custom properties as well as an optional list of attachments. <br>
 * A Document is an application resource and can be authorized using the master key or resource keys
 * </p>
 * @template TDocument
 * @param {string} documentsFeedOrDatabaseLink    - The self-link of the collection.
 * @param {?} document          - Represents the body of the document. Can contain any number of user defined properties.
 * @param {?} options_or_callback
 * @param {?=} callback 			- The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.createDocument = function(documentsFeedOrDatabaseLink, document, options_or_callback, callback) {};

/**
 * Create a permission. A permission represents a per-User Permission to access a specific resource e.g. Document or Collection.
 * @param {string} userLink      - Self-link of the user.
 * @param {?} body          - Permission body
 * @param {?} options_or_callback       - Request options
 * @param {?=} callback      - Callback for the request
 * @return {void}
 */
DocumentClient.prototype.createPermission = function(userLink, body, options_or_callback, callback) {};

/**
 * Create a user
 * @param {string} databaseLink  - The self-link of the database.
 * @param {?} body          - Represents the body of the user.
 * @param {?} options_or_callback       - The request options.
 * @param {?=} callback      - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.createUser = function(databaseLink, body, options_or_callback, callback) {};

/**
 * Execute the StoredProcedure represented by the object.
 * @template TResult
 * @param {string} procedureLink - The self-link of the stored procedure.
 * @param {!Array<?>|(!Array<?>|?)} params_or_paramsOrOptions
 * @param {?} options_or_callback       - The request options
 * @param {?=} callback      - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.executeStoredProcedure = function(procedureLink, params_or_paramsOrOptions, options_or_callback, callback) {};

/**
 * Lists all databases that satisfy a query.
 * @param {(string|?)} query     - A SQL query string.
 * @param {?=} options
 * @return {?} - An instance of QueryIterator to handle reading feed.
 */
DocumentClient.prototype.queryDatabases = function(query, options) {};

/**
 * Query the collections for the database.
 * @param {string} databaseLink  - The self-link of the database.
 * @param {(string|?)} query         - A SQL query string.
 * @param {?=} options
 * @return {?} - An instance of queryIterator to handle reading feed.
 */
DocumentClient.prototype.queryCollections = function(databaseLink, query, options) {};

/**
 * Query the storedProcedures for the collection.
 * @param {string} collectionLink    - The self-link of the collection.
 * @param {(string|?)} query             - A SQL query string.
 * @param {?=} options
 * @return {?} - An instance of queryIterator to handle reading feed.
 */
DocumentClient.prototype.queryStoredProcedures = function(collectionLink, query, options) {};

/**
 * Query the user-defined functions for the collection.
 * @param {string} collectionLink    - The self-link of the collection.
 * @param {(string|?)} query             - A SQL query string.
 * @param {?=} options
 * @return {?} - An instance of queryIterator to handle reading feed.
 */
DocumentClient.prototype.queryUserDefinedFunctions = function(collectionLink, query, options) {};

/**
 * Query the documents for the collection.
 * @template TDocument
 * @param {string} collectionLink - The self-link of the collection.
 * @param {(string|?)} query          - A SQL query string.
 * @param {?=} options
 * @return {?} - An instance of queryIterator to handle reading feed.
 */
DocumentClient.prototype.queryDocuments = function(collectionLink, query, options) {};

/**
 * Query the triggers for the collection.
 * @param {string} collectionLink
 * @param {(string|?)} query
 * @param {?=} options
 * @return {?}
 */
DocumentClient.prototype.queryTriggers = function(collectionLink, query, options) {};

/**
 * Query the attachments for the document.
 * @template T
 * @param {string} documentLink      - The self-link of the document.
 * @param {(string|?)} query             - A SQL query.
 * @param {?=} options
 * @return {?}
 */
DocumentClient.prototype.queryAttachments = function(documentLink, query, options) {};

/**
 * Query the conflicts for the collection.
 * @param {string} collectionLink    - The self-link of the collection.
 * @param {(string|?)} query             - A SQL query.
 * @param {?=} options
 * @return {?}
 */
DocumentClient.prototype.queryConflicts = function(collectionLink, query, options) {};

/**
 * Lists all offers that satisfy a query.
 * @param {(string|?)} query     - A SQL query.
 * @param {?=} options   - The feed options.
 * @return {?}
 */
DocumentClient.prototype.queryOffers = function(query, options) {};

/**
 * Query the permission for the user.
 * @param {string} userLink  - The self-link of the user.
 * @param {(string|?)} query     - A SQL query.
 * @param {?=} options   - Feed options.
 * @return {?}
 */
DocumentClient.prototype.queryPermissions = function(userLink, query, options) {};

/**
 * Query the users for the database.
 * @param {string} databaseLink  - The self-link of the database.
 * @param {(string|?)} query         - A SQL query.
 * @param {?=} options       - Represents the feed options.
 * @return {?}
 */
DocumentClient.prototype.queryUsers = function(databaseLink, query, options) {};

/**
 * Delete the document object.
 * @param {string} documentLink  - The self-link of the document.
 * @param {?} options_or_callback
 * @param {?=} callback      - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.deleteDocument = function(documentLink, options_or_callback, callback) {};

/**
 * Delete the database object.
 * @param {string} databaseLink  - The self-link of the database.
 * @param {?} options_or_callback
 * @param {?=} callback      - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.deleteDatabase = function(databaseLink, options_or_callback, callback) {};

/**
 * Delete the collection object.
 * @param {string} collectionLink    - The self-link of the collection.
 * @param {?} options_or_callback
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.deleteCollection = function(collectionLink, options_or_callback, callback) {};

/**
 * Delete the StoredProcedure object.
 * @param {string} procedureLink - The self-link of the stored procedure.
 * @param {?} options_or_callback
 * @param {?=} callback      - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.deleteStoredProcedure = function(procedureLink, options_or_callback, callback) {};

/**
 * Delete an attachment
 * @param {string} attachmentLink    - The self-link of the attachment.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.deleteAttachment = function(attachmentLink, options_or_callback, callback) {};

/**
 * Delete a conflict
 * @param {string} conflictLink      - The self-link of the conflict.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.deleteConflict = function(conflictLink, options_or_callback, callback) {};

/**
 * Delete a permission
 * @param {string} permissionLink    - The self-link of the permission.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.deletePermission = function(permissionLink, options_or_callback, callback) {};

/**
 * Delete a trigger
 * @param {string} triggerLink       - The self-link of the trigger.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.deleteTrigger = function(triggerLink, options_or_callback, callback) {};

/**
 * Delete a user
 * @param {string} userLink          - The self-link of the user.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.deleteUser = function(userLink, options_or_callback, callback) {};

/**
 * Delete a user-defined function
 * @param {string} udfLink           - The self-link of the user defined function.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.deleteUserDefinedFunction = function(udfLink, options_or_callback, callback) {};

/**
 * Replace the document object.
 * @template TDocument
 * @param {string} documentLink
 * @param {?} document
 * @param {?} options_or_callback
 * @param {?=} callback
 * @return {void}
 */
DocumentClient.prototype.replaceDocument = function(documentLink, document, options_or_callback, callback) {};

/**
 * Replace the StoredProcedure object.
 * @param {string} procedureLink - The self-link of the stored procedure.
 * @param {?} procedure     - Represent the new procedure body.
 * @param {?} options_or_callback
 * @param {?=} callback      - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.replaceStoredProcedure = function(procedureLink, procedure, options_or_callback, callback) {};

/**
 * Replace the attachment object.
 * @param {string} attachmentLink    - The self-link of the attachment.
 * @param {?} attachment        - Represent the new attachment body.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.replaceAttachment = function(attachmentLink, attachment, options_or_callback, callback) {};

/**
 * Replace the document collection.
 * @param {string} collectionLink    - The self-link of the document collection.
 * @param {?} collection        - Represent the new document collection body.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.replaceCollection = function(collectionLink, collection, options_or_callback, callback) {};

/**
 * Replace the offer object.
 * @param {string} offerLink     - The self-link of the offer.
 * @param {?} offer         - Represent the new offer body.
 * @param {?} callback      - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.replaceOffer = function(offerLink, offer, callback) {};

/**
 * Replace the permission object.
 * @param {string} permissionLink    - The self-link of the permission.
 * @param {?} permission        - Represent the new permission body.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.replacePermission = function(permissionLink, permission, options_or_callback, callback) {};

/**
 * Replace the trigger object.
 * @param {string} triggerLink   - The self-link of the trigger.
 * @param {?} trigger       - Represent the new trigger body.
 * @param {?} options_or_callback       - The request options.
 * @param {?=} callback      - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.replaceTrigger = function(triggerLink, trigger, options_or_callback, callback) {};

/**
 * Replace the user object.
 * @param {string} userLink      - The self-link of the user.
 * @param {?} user          - Represent the new user body.
 * @param {?} options_or_callback       - The request options.
 * @param {?=} callback      - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.replaceUser = function(userLink, user, options_or_callback, callback) {};

/**
 * Replace the UserDefinedFunction object.
 * @param {string} udfLink       - The self-link of the user defined function.
 * @param {?} udf           - Represent the new udf body.
 * @param {?} options_or_callback       - The request options.
 * @param {?=} callback      - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.replaceUserDefinedFunction = function(udfLink, udf, options_or_callback, callback) {};

/**
 * Read an Attachment object.
 * @param {string} attachmentLink    - The self-link of the attachment.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.readAttachment = function(attachmentLink, options_or_callback, callback) {};

/**
 * Get all attachments for this document.
 * @param {string} documentLink      - The self-link of the document.
 * @param {?=} options           - The feed options.
 * @return {?}
 */
DocumentClient.prototype.readAttachments = function(documentLink, options) {};

/**
 * Read a collection.
 * @param {string} collectionLink    - The self-link of the collection.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.readCollection = function(collectionLink, options_or_callback, callback) {};

/**
 * Get all collections in this database.
 * @param {string} databaseLink      - The self-link of the database.
 * @param {?=} options           - The feed options.
 * @return {?}
 */
DocumentClient.prototype.readCollections = function(databaseLink, options) {};

/**
 * Read a conflict.
 * @param {string} conflictLink      - The self-link of the conflict.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.readConflict = function(conflictLink, options_or_callback, callback) {};

/**
 * Get all conflicts in this collection.
 * @param {string} collectionLink    - The self-link of the collection.
 * @param {?=} options           - The feed options.
 * @return {?}
 */
DocumentClient.prototype.readConflicts = function(collectionLink, options) {};

/**
 * Read a database.
 * @param {string} databaseLink      - The self-link of the database.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.readDatabase = function(databaseLink, options_or_callback, callback) {};

/**
 * List all databases.
 * @param {?=} options       - The request options.
 * @return {?}
 */
DocumentClient.prototype.readDatabases = function(options) {};

/**
 * Read a document.
 * @param {string} documentLink      - The self-link of the document.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.readDocument = function(documentLink, options_or_callback, callback) {};

/**
 * Get all documents in this collection.
 * @param {string} collectionLink    - The self-link of the collection.
 * @param {?=} options           - The feed options.
 * @return {?}
 */
DocumentClient.prototype.readDocuments = function(collectionLink, options) {};

/**
 * Read the media for the attachment object.
 * @param {string} mediaLink     - The media link of the media in the attachment.
 * @param {?} callback      - The callback for the request, the result parameter can be a buffer or a stream depending on the value of MediaReadMode
 * @return {void}
 */
DocumentClient.prototype.readMedia = function(mediaLink, callback) {};

/**
 * Read an offer.
 * @param {string} offerLink     - The self-link of the offer.
 * @param {?} callback      - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.readOffer = function(offerLink, callback) {};

/**
 * List all offers
 * @param {?=} options       - The feed options.
 * @return {?}
 */
DocumentClient.prototype.readOffers = function(options) {};

/**
 * Read a permission.
 * @param {string} permissionLink    - The self-link of the permission.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.readPermission = function(permissionLink, options_or_callback, callback) {};

/**
 * Get all permissions for this user.
 * @param {string} userLink          - The self-link of the user.
 * @param {?=} feedOptions       - The feed options
 * @return {?}
 */
DocumentClient.prototype.readPermissions = function(userLink, feedOptions) {};

/**
 * Read a stored procedure
 * @param {string} sprocLink         - The self-link of the stored procedure.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.readStoredProcedure = function(sprocLink, options_or_callback, callback) {};

/**
 * Get all StoredProcedures in this collection.
 * @param {string} collectionLink    - The self-link of the collection.
 * @param {?=} options           - The feed options.
 * @return {?}
 */
DocumentClient.prototype.readStoredProcedures = function(collectionLink, options) {};

/**
 * Reads a trigger object.
 * @param {string} triggerLink       - The self-link of the trigger.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.readTrigger = function(triggerLink, options_or_callback, callback) {};

/**
 * Get all triggers in this collection.
 * @param {string} collectionLink    - The self-link of the collection.
 * @param {?=} options           - The feed options.
 * @return {?}
 */
DocumentClient.prototype.readTriggers = function(collectionLink, options) {};

/**
 * Reads a user.
 * @param {string} userLink  - The self-link of the user.
 * @param {?} options_or_callback   - The request options.
 * @param {?=} callback  - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.readUser = function(userLink, options_or_callback, callback) {};

/**
 * Reads a udf object.
 * @param {string} udfLink   - The self-link of the user defined function.
 * @param {?} options_or_callback   - The request options.
 * @param {?=} callback  - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.readUserDefinedFunction = function(udfLink, options_or_callback, callback) {};

/**
 * Get all UserDefinedFunctions in this collection.
 * @param {string} collectionLink    - The self-link of the collection.
 * @param {?=} options           - The feed options.
 * @return {?}
 */
DocumentClient.prototype.readUserDefinedFunctions = function(collectionLink, options) {};

/**
 * Get all users in this database.
 * @param {string} databaseLink      - The self-link of the database.
 * @param {?=} feedOptions       - The feed options.
 * @return {?}
 */
DocumentClient.prototype.readUsers = function(databaseLink, feedOptions) {};

/**
 * Update media for the attachment
 * @param {string} mediaLink         - The media link of the media in the attachment.
 * @param {!NodeJS.ReadableStream} readableStream    - The stream that represents the media itself that needs to be uploaded.
 * @param {?} options_or_callback           - options for the media
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.updateMedia = function(mediaLink, readableStream, options_or_callback, callback) {};

/**
 * Upsert an attachment for the document object.
 * <p>
 *  Each document may contain zero or more attachments. Attachments can be of any MIME type - text, image, binary data.
 *  These are stored externally in Azure Blob storage. Attachments are automatically deleted when the parent document is deleted.
 * </p>
 * @param {string} documentLink  - The self-link of the document.
 * @param {?} body          - The metadata the defines the attachment media like media, contentType. It can include any other properties as part of the metedata.
 * @param {?} options_or_callback       - The request options.
 * @param {?=} callback      - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.upsertAttachment = function(documentLink, body, options_or_callback, callback) {};

/**
 * Upsert an attachment for the document object.
 * @param {string} documentLink      - The self-link of the document.
 * @param {!NodeJS.ReadableStream} readableStream    - the stream that represents the media itself that needs to be uploaded.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.upsertAttachmentAndUploadMedia = function(documentLink, readableStream, options_or_callback, callback) {};

/**
 * Upsert a document.
 * <p>
 *  There is no set schema for JSON documents. They may contain any number of custom properties as well as an optional list of attachments.
 *  A Document is an application resource and can be authorized using the master key or resource keys
 * </p>
 * @template T
 * @param {string} documentsFeedOrDatabaseLink   - The collection link or database link if using a partition resolver
 * @param {?} body          - Represents the body of the document. Can contain any number of user defined properties.
 * @param {?} options_or_callback       - The request options.
 * @param {?=} callback      - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.upsertDocument = function(documentsFeedOrDatabaseLink, body, options_or_callback, callback) {};

/**
 * Upsert a permission.
 * <p>
 *  A permission represents a per-User Permission to access a specific resource e.g. Document or Collection.
 * </p>
 * @param {string} userLink  - The self-link of the user.
 * @param {?} body      - Represents the body of the permission.
 * @param {?} options_or_callback   - The request options.
 * @param {?=} callback  - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.upsertPermission = function(userLink, body, options_or_callback, callback) {};

/**
 * Upsert a StoredProcedure.
 * <p>
 *  DocumentDB allows stored procedures to be executed in the storage tier, directly against a document collection. The script
 *  gets executed under ACID transactions on the primary storage partition of the specified collection. For additional details,
 *  refer to the server-side JavaScript API documentation.
 * </p>
 * @param {string} collectionLink    - The self-link of the collection.
 * @param {?} sproc             - Represents the body of the stored procedure.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.upsertStoredProcedure = function(collectionLink, sproc, options_or_callback, callback) {};

/**
 * Upsert a trigger.
 * <p>
 *  DocumentDB supports pre and post triggers defined in JavaScript to be executed on creates, updates and deletes.
 *  For additional details, refer to the server-side JavaScript API documentation.
 * </p>
 * @param {string} collectionLink    - The self-link of the collection.
 * @param {?} trigger           - Represents the body of the trigger.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.upsertTrigger = function(collectionLink, trigger, options_or_callback, callback) {};

/**
 * Upsert a database user.
 * @param {string} databaseLink  - The self-link of the database.
 * @param {?} body          - Represents the body of the user.
 * @param {?} options_or_callback       - The request options.
 * @param {?=} callback      - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.upsertUser = function(databaseLink, body, options_or_callback, callback) {};

/**
 * Upsert a UserDefinedFunction.
 * <p>
 *  DocumentDB supports JavaScript UDFs which can be used inside queries, stored procedures and triggers.
 *  For additional details, refer to the server-side JavaScript API documentation.
 * </p>
 * @param {string} collectionLink    - The self-link of the collection.
 * @param {?} udf               - Represents the body of the userDefinedFunction.
 * @param {?} options_or_callback           - The request options.
 * @param {?=} callback          - The callback for the request.
 * @return {void}
 */
DocumentClient.prototype.upsertUserDefinedFunction = function(collectionLink, udf, options_or_callback, callback) {};

/**
 * Gets the Database account information.
 * @param {?} options_or_callback       - The request options
 * @param {?=} callback      - The callback for the request
 * @return {void}
 */
DocumentClient.prototype.getDatabaseAccount = function(options_or_callback, callback) {};

/**
 * Gets the curent read endpoint for a geo-replicated database account.
 * @param {?} callback      - The callback for the request
 * @return {void}
 */
DocumentClient.prototype.getReadEndpoint = function(callback) {};

/**
 * Gets the curent write endpoint for a geo-replicated database account.
 * @param {?} callback      - The callback for the request
 * @return {void}
 */
DocumentClient.prototype.getWriteEndpoint = function(callback) {};
/**
 * @constructor
 * @struct
 */
function UriFactory() {}

/**
 * Given a database id, this creates a database link.
 * \@description Would be used when creating or deleting a DocumentCollection or a User in Azure DocumentDB database service
 * @param {string} databaseId
 * @return {string}
 */
UriFactory.createDatabaseUri = function(databaseId) {};

/**
 * Given a database and collection id, this creates a collection link.
 * \@description Would be used when updating or deleting a DocumentCollection, creating a Document, a StoredProcedure, a
 *              Trigger, a UserDefinedFunction, or when executing a query with CreateDocumentQuery in Azure DocumentDB database service.
 * @param {string} databaseId
 * @param {string} collectionId
 * @return {string}
 */
UriFactory.createDocumentCollectionUri = function(databaseId, collectionId) {};

/**
 * Given a database and collection id, this creates a collection link.
 *                                    being a Uri escaped version of the databaseId, {1} being collectionId and {2} being the documentId
 * \@description Would be used when creating an Attachment, or when replacing or deleting a Document in Azure DocumentDB database service
 * @param {string} databaseId
 * @param {string} collectionId
 * @param {string} documentId
 * @return {string}
 */
UriFactory.createDocumentUri = function(databaseId, collectionId, documentId) {};

/**
 * Given a database, collection and document id, this creates a document link.
 * \@description Would be used when replacing or deleting a Permission in Azure DocumentDB database service.
 * @param {string} databaseId
 * @param {string} userId
 * @param {string} permissionId
 * @return {string}
 */
UriFactory.createPermissionUri = function(databaseId, userId, permissionId) {};

/**
 * Given a database, collection and stored proc id, this creates a stored proc link.
 *                                    with {0} being a Uri escaped version of the databaseId,
 *                                    {1} being collectionId and {2} being the storedProcedureId
 * \@description Would be used when replacing, executing, or deleting a StoredProcedure in Azure DocumentDB database service.
 * @param {string} databaseId
 * @param {string} collectionId
 * @param {string} storedProcedureId
 * @return {string}
 */
UriFactory.createStoredProcedureUri = function(databaseId, collectionId, storedProcedureId) {};

/**
 * \@summary Given a database, collection and trigger id, this creates a trigger link.
 *                                    with {0} being a Uri escaped version of the databaseId,
 *                                    {1} being collectionId and {2} being the triggerId
 * \@description Would be used when replacing, executing, or deleting a Trigger in Azure DocumentDB database service
 * @param {string} databaseId
 * @param {string} collectionId
 * @param {string} triggerId
 * @return {string}
 */
UriFactory.createTriggerUri = function(databaseId, collectionId, triggerId) {};

/**
 * \@summary Given a database, collection and udf id, this creates a udf link.
 * \@description Would be used when replacing, executing, or deleting a UserDefinedFunction in Azure DocumentDB database service
 * @param {string} databaseId
 * @param {string} collectionId
 * @param {string} udfId
 * @return {string}
 */
UriFactory.createUserDefinedFunctionUri = function(databaseId, collectionId, udfId) {};

/**
 * \@summary 
 *                                    with {0} being a Uri escaped version of the databaseId, {1} being collectionId and {2} being the conflictId
 * \@description Would be used when creating a Conflict in Azure DocumentDB database service.
 * @param {string} databaseId
 * @param {string} collectionId
 * @param {string} conflictId
 * @return {string}
 */
UriFactory.createConflictUri = function(databaseId, collectionId, conflictId) {};

/**
 * \@summary Given a database, collection and conflict id, this creates a conflict link.
 *                                    {1} being collectionId and {2} being the conflictId
 * \@description Would be used when creating a Conflict in Azure DocumentDB database service.
 * @param {string} databaseId
 * @param {string} collectionId
 * @param {string} documentId
 * @param {string} attachmentId
 * @return {string}
 */
UriFactory.createAttachmentUri = function(databaseId, collectionId, documentId, attachmentId) {};

/**
 * \@summary Given a database and collection, this creates a partition key ranges link in the Azure DocumentDB database service.
 * @param {string} databaseId
 * @param {string} collectionId
 * @return {string}
 */
UriFactory.createPartitionKeyRangesUri = function(databaseId, collectionId) {};

/** @typedef {string} */
var MediaReadMode;

/** @typedef {string} */
var ConsistencyLevel;

/** @typedef {string} */
var IndexingMode;

/** @typedef {string} */
var IndexKind;

/** @typedef {string} */
var PermissionMode;

/** @typedef {string} */
var TriggerType;

/** @typedef {string} */
var TriggerOperation;

/** @typedef {string} */
var UserDefinedFunctionType;

/** @typedef {string} */
var PartitionKind;
