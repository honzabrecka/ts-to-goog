/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/simple-oauth2/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/**
 * Creates a new simple-oauth2 client with the passed configuration
 * @param {?} options
 * @return {?}
 */
function create(options) {}
/**
 * @record
 * @struct
 */
function ModuleOptions() {}
 /** @type {?} */
ModuleOptions.prototype.client;
 /** @type {?} */
ModuleOptions.prototype.auth;
 /** @type {!Object} */
ModuleOptions.prototype.http;
 /** @type {?} */
ModuleOptions.prototype.options;

/** @typedef {string} */
var TokenType;
/**
 * @record
 * @struct
 */
function AccessToken() {}
 /** @type {!Object} */
AccessToken.prototype.token;

/**
 * Check if the access token is expired or not
 * @return {boolean}
 */
AccessToken.prototype.expired = function() {};

/**
 * Refresh the access token
 * @param {!Object|?=} params_or_callback
 * @param {?=} callback
 * @return {!Bluebird<?>}
 */
AccessToken.prototype.refresh = function(params_or_callback, callback) {};

/**
 * Revoke access or refresh token
 * @param {string} tokenType
 * @param {?=} callback
 * @return {!Bluebird<void>}
 */
AccessToken.prototype.revoke = function(tokenType, callback) {};
/**
 * @record
 * @struct
 */
function Token() {}

/* TODO: IndexSignature:  */

/** @typedef {string} */
var AuthorizationCode;
/**
 * @record
 * @struct
 */
function AuthorizationTokenConfig() {}
 /** @type {string} */
AuthorizationTokenConfig.prototype.code;
 /** @type {string} */
AuthorizationTokenConfig.prototype.redirect_uri;
/**
 * @record
 * @struct
 */
function PasswordTokenConfig() {}
 /** @type {string} */
PasswordTokenConfig.prototype.username;
 /** @type {string} */
PasswordTokenConfig.prototype.password;
 /** @type {string} */
PasswordTokenConfig.prototype.scope;
/**
 * @record
 * @struct
 */
function ClientCredentialTokenConfig() {}
 /** @type {string} */
ClientCredentialTokenConfig.prototype.scope;
/**
 * @record
 * @struct
 */
function OAuthClient() {}
 /** @type {?} */
OAuthClient.prototype.authorizationCode;
 /** @type {?} */
OAuthClient.prototype.ownerPassword;
 /** @type {?} */
OAuthClient.prototype.clientCredentials;
 /** @type {?} */
OAuthClient.prototype.accessToken;
