/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/bunnymq/index.d.ts:

/**
 * @param {!bunnymq.Options=} options
 * @return {!bunnymq.Instance}
 */
function bunnymq(options) {}

/** @typedef {function(!Array<?>): T} */
bunnymq.ConsumerCallback;

/** @typedef {function(?, !Array<?>): void} */
bunnymq.LoggerOutput;
/**
 * @record
 * @struct
 */
bunnymq.Connection = function() {};

/* TODO: IndexSignature: bunnymq */
 /** @type {string} */
bunnymq.Connection.prototype.startedAt;
/**
 * @record
 * @struct
 */
bunnymq.Consumer = function() {};

/**
 * Handle messages from a named queue.
 * 
 * @template T
 * @param {string} queue
 * @param {function(!Array<?>): T} callback
 * @return {void}
 */
bunnymq.Consumer.prototype.consume = function(queue, callback) {};
/**
 * @record
 * @struct
 */
bunnymq.Instance = function() {};
 /** @type {!bunnymq.Connection} */
bunnymq.Instance.prototype.connection;
 /** @type {!bunnymq.Consumer} */
bunnymq.Instance.prototype.consumer;
 /** @type {!bunnymq.Producer} */
bunnymq.Instance.prototype.producer;

/**
 * Subscriber to handle messages from a named queue.
 * 
 * @template T
 * @param {string} queueName
 * @param {function(!Array<?>): T} callback
 * @return {void}
 */
bunnymq.Instance.prototype.subscribe = function(queueName, callback) {};

/**
 * Publisher to send messages to a named queue.
 * 
 * @template T
 * @param {string} queueName
 * @param {?} message
 * @param {!bunnymq.ProducerOptions=} options
 * @return {!Promise<T>}
 */
bunnymq.Instance.prototype.publish = function(queueName, message, options) {};
/**
 * @record
 * @struct
 */
bunnymq.Logger = function() {};
 /** @type {function(?, !Array<?>): void} */
bunnymq.Logger.prototype.debug;
 /** @type {function(?, !Array<?>): void} */
bunnymq.Logger.prototype.error;
 /** @type {function(?, !Array<?>): void} */
bunnymq.Logger.prototype.info;
 /** @type {function(?, !Array<?>): void} */
bunnymq.Logger.prototype.log;
 /** @type {function(?, !Array<?>): void} */
bunnymq.Logger.prototype.warn;
/**
 * @record
 * @struct
 */
bunnymq.Options = function() {};
 /** @type {string} */
bunnymq.Options.prototype.consumerSuffix;
 /** @type {string} */
bunnymq.Options.prototype.host;
 /** @type {string} */
bunnymq.Options.prototype.hostname;
 /** @type {number} */
bunnymq.Options.prototype.prefetch;
 /** @type {boolean} */
bunnymq.Options.prototype.requeue;
 /** @type {number} */
bunnymq.Options.prototype.rpcTimeout;
 /** @type {number} */
bunnymq.Options.prototype.timeout;
 /** @type {?} */
bunnymq.Options.prototype.transport;
/**
 * @record
 * @struct
 */
bunnymq.Producer = function() {};

/**
 * Send messages to a named queue.
 * 
 * @template T
 * @param {string} queue
 * @param {?} message
 * @param {!bunnymq.ProducerOptions=} options
 * @return {!Promise<T>}
 */
bunnymq.Producer.prototype.produce = function(queue, message, options) {};
/**
 * @record
 * @struct
 */
bunnymq.ProducerOptions = function() {};
 /** @type {string} */
bunnymq.ProducerOptions.prototype.routingKey;
 /** @type {boolean} */
bunnymq.ProducerOptions.prototype.rpc;
 /** @type {number} */
bunnymq.ProducerOptions.prototype.timeout;

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
