/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/microsoft-live-connect/index.d.ts:
/** @const */
var Microsoft = {};
/** @const */
Microsoft.Live = {};
/**
 * @record
 * @struct
 */
Microsoft.Live.IUserInfo = function() {};
 /** @type {string} */
Microsoft.Live.IUserInfo.prototype.name;
 /** @type {string} */
Microsoft.Live.IUserInfo.prototype.id;
/**
 * @record
 * @struct
 */
Microsoft.Live.ISharedWith = function() {};
 /** @type {string} */
Microsoft.Live.ISharedWith.prototype.access;
/**
 * @record
 * @struct
 */
Microsoft.Live.IObject = function() {};
 /** @type {string} */
Microsoft.Live.IObject.prototype.type;
/**
 * @record
 * @struct
 */
Microsoft.Live.IObjectCollection = function() {};
 /** @type {!Array<T>} */
Microsoft.Live.IObjectCollection.prototype.data;
/**
 * @record
 * @struct
 */
Microsoft.Live.IAlbum = function() {};
 /** @type {string} */
Microsoft.Live.IAlbum.prototype.id;
 /** @type {!Microsoft.Live.IUserInfo} */
Microsoft.Live.IAlbum.prototype.from;
 /** @type {string} */
Microsoft.Live.IAlbum.prototype.name;
 /** @type {string} */
Microsoft.Live.IAlbum.prototype.description;
 /** @type {string} */
Microsoft.Live.IAlbum.prototype.parent_id;
 /** @type {string} */
Microsoft.Live.IAlbum.prototype.upload_location;
 /** @type {boolean} */
Microsoft.Live.IAlbum.prototype.is_embeddable;
 /** @type {number} */
Microsoft.Live.IAlbum.prototype.count;
 /** @type {string} */
Microsoft.Live.IAlbum.prototype.link;
 /** @type {string} */
Microsoft.Live.IAlbum.prototype.type;
 /** @type {!Microsoft.Live.ISharedWith} */
Microsoft.Live.IAlbum.prototype.shared_with;
 /** @type {string} */
Microsoft.Live.IAlbum.prototype.created_time;
 /** @type {string} */
Microsoft.Live.IAlbum.prototype.updated_time;
 /** @type {string} */
Microsoft.Live.IAlbum.prototype.client_updated_time;
/**
 * @record
 * @struct
 */
Microsoft.Live.INewAlbum = function() {};
 /** @type {string} */
Microsoft.Live.INewAlbum.prototype.name;
 /** @type {string} */
Microsoft.Live.INewAlbum.prototype.description;
/**
 * @record
 * @struct
 */
Microsoft.Live.IAudio = function() {};
 /** @type {string} */
Microsoft.Live.IAudio.prototype.id;
 /** @type {!Microsoft.Live.IUserInfo} */
Microsoft.Live.IAudio.prototype.from;
 /** @type {string} */
Microsoft.Live.IAudio.prototype.name;
 /** @type {string} */
Microsoft.Live.IAudio.prototype.description;
 /** @type {string} */
Microsoft.Live.IAudio.prototype.parent_id;
 /** @type {number} */
Microsoft.Live.IAudio.prototype.size;
 /** @type {string} */
Microsoft.Live.IAudio.prototype.upload_location;
 /** @type {number} */
Microsoft.Live.IAudio.prototype.comments_count;
 /** @type {boolean} */
Microsoft.Live.IAudio.prototype.comments_enabled;
 /** @type {boolean} */
Microsoft.Live.IAudio.prototype.is_embeddable;
 /** @type {string} */
Microsoft.Live.IAudio.prototype.source;
 /** @type {string} */
Microsoft.Live.IAudio.prototype.link;
 /** @type {string} */
Microsoft.Live.IAudio.prototype.type;
 /** @type {string} */
Microsoft.Live.IAudio.prototype.title;
 /** @type {string} */
Microsoft.Live.IAudio.prototype.artist;
 /** @type {string} */
Microsoft.Live.IAudio.prototype.album;
 /** @type {string} */
Microsoft.Live.IAudio.prototype.album_artist;
 /** @type {string} */
Microsoft.Live.IAudio.prototype.genre;
 /** @type {number} */
Microsoft.Live.IAudio.prototype.duration;
 /** @type {string} */
Microsoft.Live.IAudio.prototype.picture;
 /** @type {!Microsoft.Live.ISharedWith} */
Microsoft.Live.IAudio.prototype.shared_with;
 /** @type {string} */
Microsoft.Live.IAudio.prototype.created_time;
 /** @type {string} */
Microsoft.Live.IAudio.prototype.updated_time;
/**
 * @record
 * @struct
 */
Microsoft.Live.INewAudio = function() {};
 /** @type {string} */
Microsoft.Live.INewAudio.prototype.name;
 /** @type {string} */
Microsoft.Live.INewAudio.prototype.description;
 /** @type {string} */
Microsoft.Live.INewAudio.prototype.title;
 /** @type {string} */
Microsoft.Live.INewAudio.prototype.artist;
 /** @type {string} */
Microsoft.Live.INewAudio.prototype.album;
 /** @type {string} */
Microsoft.Live.INewAudio.prototype.album_artist;
 /** @type {string} */
Microsoft.Live.INewAudio.prototype.genre;
/**
 * @record
 * @struct
 */
Microsoft.Live.ICalendar = function() {};
 /** @type {string} */
Microsoft.Live.ICalendar.prototype.id;
 /** @type {string} */
Microsoft.Live.ICalendar.prototype.name;
 /** @type {string} */
Microsoft.Live.ICalendar.prototype.description;
 /** @type {string} */
Microsoft.Live.ICalendar.prototype.created_time;
 /** @type {string} */
Microsoft.Live.ICalendar.prototype.updated_time;
 /** @type {!Microsoft.Live.IUserInfo} */
Microsoft.Live.ICalendar.prototype.from;
 /** @type {boolean} */
Microsoft.Live.ICalendar.prototype.is_default;
 /** @type {string} */
Microsoft.Live.ICalendar.prototype.subscription_location;
 /** @type {string} */
Microsoft.Live.ICalendar.prototype.permissions;
/**
 * @record
 * @struct
 */
Microsoft.Live.INewCalendar = function() {};
 /** @type {string} */
Microsoft.Live.INewCalendar.prototype.name;
 /** @type {string} */
Microsoft.Live.INewCalendar.prototype.description;
/**
 * @record
 * @struct
 */
Microsoft.Live.INewCalendarSubscription = function() {};
 /** @type {string} */
Microsoft.Live.INewCalendarSubscription.prototype.name;
 /** @type {string} */
Microsoft.Live.INewCalendarSubscription.prototype.subscription_location;
/**
 * @record
 * @struct
 */
Microsoft.Live.IComment = function() {};
 /** @type {string} */
Microsoft.Live.IComment.prototype.id;
 /** @type {!Microsoft.Live.IUserInfo} */
Microsoft.Live.IComment.prototype.from;
 /** @type {string} */
Microsoft.Live.IComment.prototype.message;
 /** @type {string} */
Microsoft.Live.IComment.prototype.created_time;
/**
 * @record
 * @struct
 */
Microsoft.Live.INewComment = function() {};
 /** @type {string} */
Microsoft.Live.INewComment.prototype.message;
/**
 * @record
 * @struct
 */
Microsoft.Live.IContact = function() {};
 /** @type {string} */
Microsoft.Live.IContact.prototype.id;
 /** @type {string} */
Microsoft.Live.IContact.prototype.first_name;
 /** @type {string} */
Microsoft.Live.IContact.prototype.last_name;
 /** @type {string} */
Microsoft.Live.IContact.prototype.name;
 /** @type {boolean} */
Microsoft.Live.IContact.prototype.is_friend;
 /** @type {boolean} */
Microsoft.Live.IContact.prototype.is_favorite;
 /** @type {string} */
Microsoft.Live.IContact.prototype.user_id;
 /** @type {!Array<string>} */
Microsoft.Live.IContact.prototype.email_hashes;
 /** @type {string} */
Microsoft.Live.IContact.prototype.updated_time;
 /** @type {number} */
Microsoft.Live.IContact.prototype.birth_day;
 /** @type {number} */
Microsoft.Live.IContact.prototype.birth_month;
/**
 * @record
 * @struct
 */
Microsoft.Live.INewContact = function() {};
 /** @type {string} */
Microsoft.Live.INewContact.prototype.first_name;
 /** @type {string} */
Microsoft.Live.INewContact.prototype.last_name;
 /** @type {!Array<{employer: {name: string}}>} */
Microsoft.Live.INewContact.prototype.work;
 /** @type {{preferred: string, personal: string, business: string, other: string}} */
Microsoft.Live.INewContact.prototype.emails;
/**
 * @record
 * @struct
 */
Microsoft.Live.IError = function() {};
 /** @type {{code: string, message: string}} */
Microsoft.Live.IError.prototype.error;
/**
 * @record
 * @struct
 */
Microsoft.Live.IEvent = function() {};
 /** @type {string} */
Microsoft.Live.IEvent.prototype.id;
 /** @type {string} */
Microsoft.Live.IEvent.prototype.name;
 /** @type {string} */
Microsoft.Live.IEvent.prototype.created_time;
 /** @type {string} */
Microsoft.Live.IEvent.prototype.updated_time;
 /** @type {string} */
Microsoft.Live.IEvent.prototype.description;
 /** @type {string} */
Microsoft.Live.IEvent.prototype.calendar_id;
 /** @type {!Microsoft.Live.IUserInfo} */
Microsoft.Live.IEvent.prototype.from;
 /** @type {string} */
Microsoft.Live.IEvent.prototype.start_time;
 /** @type {string} */
Microsoft.Live.IEvent.prototype.end_time;
 /** @type {string} */
Microsoft.Live.IEvent.prototype.location;
 /** @type {boolean} */
Microsoft.Live.IEvent.prototype.is_all_day_event;
 /** @type {boolean} */
Microsoft.Live.IEvent.prototype.is_recurrent;
 /** @type {string} */
Microsoft.Live.IEvent.prototype.recurrence;
 /** @type {number} */
Microsoft.Live.IEvent.prototype.reminder_time;
 /** @type {string} */
Microsoft.Live.IEvent.prototype.availability;
 /** @type {string} */
Microsoft.Live.IEvent.prototype.visibility;
/**
 * @record
 * @struct
 */
Microsoft.Live.INewEvent = function() {};
 /** @type {string} */
Microsoft.Live.INewEvent.prototype.name;
 /** @type {string} */
Microsoft.Live.INewEvent.prototype.description;
 /** @type {?} */
Microsoft.Live.INewEvent.prototype.start_time;
 /** @type {?} */
Microsoft.Live.INewEvent.prototype.end_time;
 /** @type {string} */
Microsoft.Live.INewEvent.prototype.location;
 /** @type {boolean} */
Microsoft.Live.INewEvent.prototype.is_all_day_event;
 /** @type {number} */
Microsoft.Live.INewEvent.prototype.reminder_time;
 /** @type {string} */
Microsoft.Live.INewEvent.prototype.availability;
 /** @type {string} */
Microsoft.Live.INewEvent.prototype.visibility;
/**
 * @record
 * @struct
 */
Microsoft.Live.INewEventResponse = function() {};
 /** @type {string} */
Microsoft.Live.INewEventResponse.prototype.name;
 /** @type {string} */
Microsoft.Live.INewEventResponse.prototype.description;
 /** @type {string} */
Microsoft.Live.INewEventResponse.prototype.start_time;
 /** @type {string} */
Microsoft.Live.INewEventResponse.prototype.end_time;
 /** @type {string} */
Microsoft.Live.INewEventResponse.prototype.location;
 /** @type {boolean} */
Microsoft.Live.INewEventResponse.prototype.is_all_day_event;
 /** @type {boolean} */
Microsoft.Live.INewEventResponse.prototype.is_recurrent;
 /** @type {string} */
Microsoft.Live.INewEventResponse.prototype.recurrence;
 /** @type {number} */
Microsoft.Live.INewEventResponse.prototype.reminder_time;
 /** @type {string} */
Microsoft.Live.INewEventResponse.prototype.availability;
 /** @type {string} */
Microsoft.Live.INewEventResponse.prototype.visibility;
 /** @type {string} */
Microsoft.Live.INewEventResponse.prototype.updated_time;
/**
 * @record
 * @struct
 */
Microsoft.Live.IFile = function() {};
 /** @type {string} */
Microsoft.Live.IFile.prototype.id;
 /** @type {!Microsoft.Live.IUserInfo} */
Microsoft.Live.IFile.prototype.from;
 /** @type {string} */
Microsoft.Live.IFile.prototype.name;
 /** @type {string} */
Microsoft.Live.IFile.prototype.description;
 /** @type {string} */
Microsoft.Live.IFile.prototype.parent_id;
 /** @type {number} */
Microsoft.Live.IFile.prototype.size;
 /** @type {string} */
Microsoft.Live.IFile.prototype.upload_location;
 /** @type {number} */
Microsoft.Live.IFile.prototype.comments_count;
 /** @type {boolean} */
Microsoft.Live.IFile.prototype.comments_enabled;
 /** @type {boolean} */
Microsoft.Live.IFile.prototype.is_embeddable;
 /** @type {string} */
Microsoft.Live.IFile.prototype.source;
 /** @type {string} */
Microsoft.Live.IFile.prototype.link;
 /** @type {string} */
Microsoft.Live.IFile.prototype.type;
 /** @type {!Microsoft.Live.ISharedWith} */
Microsoft.Live.IFile.prototype.shared_with;
 /** @type {string} */
Microsoft.Live.IFile.prototype.created_time;
 /** @type {string} */
Microsoft.Live.IFile.prototype.updated_time;
 /** @type {string} */
Microsoft.Live.IFile.prototype.client_updated_time;
 /** @type {string} */
Microsoft.Live.IFile.prototype.sort_by;
/**
 * @record
 * @struct
 */
Microsoft.Live.INewFileResponse = function() {};
 /** @type {string} */
Microsoft.Live.INewFileResponse.prototype.id;
 /** @type {string} */
Microsoft.Live.INewFileResponse.prototype.name;
 /** @type {string} */
Microsoft.Live.INewFileResponse.prototype.source;
/**
 * @record
 * @struct
 */
Microsoft.Live.IFileDownloadLink = function() {};
 /** @type {string} */
Microsoft.Live.IFileDownloadLink.prototype.location;
/**
 * @record
 * @struct
 */
Microsoft.Live.IFolder = function() {};
 /** @type {string} */
Microsoft.Live.IFolder.prototype.id;
 /** @type {!Microsoft.Live.IUserInfo} */
Microsoft.Live.IFolder.prototype.from;
 /** @type {string} */
Microsoft.Live.IFolder.prototype.name;
 /** @type {string} */
Microsoft.Live.IFolder.prototype.description;
 /** @type {number} */
Microsoft.Live.IFolder.prototype.count;
 /** @type {string} */
Microsoft.Live.IFolder.prototype.link;
 /** @type {string} */
Microsoft.Live.IFolder.prototype.parent_id;
 /** @type {string} */
Microsoft.Live.IFolder.prototype.upload_location;
 /** @type {boolean} */
Microsoft.Live.IFolder.prototype.is_embeddable;
 /** @type {string} */
Microsoft.Live.IFolder.prototype.type;
 /** @type {string} */
Microsoft.Live.IFolder.prototype.created_time;
 /** @type {string} */
Microsoft.Live.IFolder.prototype.updated_time;
 /** @type {string} */
Microsoft.Live.IFolder.prototype.client_updated_time;
 /** @type {!Microsoft.Live.ISharedWith} */
Microsoft.Live.IFolder.prototype.shared_with;
 /** @type {string} */
Microsoft.Live.IFolder.prototype.sort_by;
/**
 * @record
 * @struct
 */
Microsoft.Live.INewFolder = function() {};
 /** @type {string} */
Microsoft.Live.INewFolder.prototype.name;
 /** @type {string} */
Microsoft.Live.INewFolder.prototype.description;
 /** @type {string} */
Microsoft.Live.INewFolder.prototype.sort_by;
/**
 * @record
 * @struct
 */
Microsoft.Live.IFriend = function() {};
 /** @type {string} */
Microsoft.Live.IFriend.prototype.id;
 /** @type {string} */
Microsoft.Live.IFriend.prototype.name;
/**
 * @record
 * @struct
 */
Microsoft.Live.IPermissions = function() {};

/* TODO: IndexSignature: Microsoft.Live */
/**
 * @record
 * @struct
 */
Microsoft.Live.IImageInfo = function() {};
 /** @type {number} */
Microsoft.Live.IImageInfo.prototype.height;
 /** @type {number} */
Microsoft.Live.IImageInfo.prototype.width;
 /** @type {string} */
Microsoft.Live.IImageInfo.prototype.source;
 /** @type {string} */
Microsoft.Live.IImageInfo.prototype.type;
/**
 * @record
 * @struct
 */
Microsoft.Live.ILocation = function() {};
 /** @type {number} */
Microsoft.Live.ILocation.prototype.latitude;
 /** @type {number} */
Microsoft.Live.ILocation.prototype.longitude;
 /** @type {number} */
Microsoft.Live.ILocation.prototype.altitude;
/**
 * @record
 * @struct
 */
Microsoft.Live.IPhoto = function() {};
 /** @type {string} */
Microsoft.Live.IPhoto.prototype.id;
 /** @type {!Microsoft.Live.IUserInfo} */
Microsoft.Live.IPhoto.prototype.from;
 /** @type {string} */
Microsoft.Live.IPhoto.prototype.name;
 /** @type {string} */
Microsoft.Live.IPhoto.prototype.description;
 /** @type {string} */
Microsoft.Live.IPhoto.prototype.parent_id;
 /** @type {number} */
Microsoft.Live.IPhoto.prototype.size;
 /** @type {number} */
Microsoft.Live.IPhoto.prototype.comments_count;
 /** @type {boolean} */
Microsoft.Live.IPhoto.prototype.comments_enabled;
 /** @type {number} */
Microsoft.Live.IPhoto.prototype.tags_count;
 /** @type {boolean} */
Microsoft.Live.IPhoto.prototype.tags_enabled;
 /** @type {boolean} */
Microsoft.Live.IPhoto.prototype.is_embeddable;
 /** @type {string} */
Microsoft.Live.IPhoto.prototype.picture;
 /** @type {string} */
Microsoft.Live.IPhoto.prototype.source;
 /** @type {string} */
Microsoft.Live.IPhoto.prototype.upload_location;
 /** @type {!Array<!Microsoft.Live.IImageInfo>} */
Microsoft.Live.IPhoto.prototype.images;
 /** @type {string} */
Microsoft.Live.IPhoto.prototype.link;
 /** @type {string} */
Microsoft.Live.IPhoto.prototype.when_taken;
 /** @type {number} */
Microsoft.Live.IPhoto.prototype.height;
 /** @type {number} */
Microsoft.Live.IPhoto.prototype.width;
 /** @type {string} */
Microsoft.Live.IPhoto.prototype.type;
 /** @type {!Microsoft.Live.ILocation} */
Microsoft.Live.IPhoto.prototype.location;
 /** @type {string} */
Microsoft.Live.IPhoto.prototype.camera_make;
 /** @type {string} */
Microsoft.Live.IPhoto.prototype.camera_model;
 /** @type {number} */
Microsoft.Live.IPhoto.prototype.focal_ratio;
 /** @type {number} */
Microsoft.Live.IPhoto.prototype.focal_length;
 /** @type {number} */
Microsoft.Live.IPhoto.prototype.exposure_numerator;
 /** @type {number} */
Microsoft.Live.IPhoto.prototype.exposure_denominator;
 /** @type {!Microsoft.Live.ISharedWith} */
Microsoft.Live.IPhoto.prototype.shared_with;
 /** @type {string} */
Microsoft.Live.IPhoto.prototype.created_time;
 /** @type {string} */
Microsoft.Live.IPhoto.prototype.updated_time;
/**
 * @record
 * @struct
 */
Microsoft.Live.ISearch = function() {};
 /** @type {!Array<!Microsoft.Live.IObject>} */
Microsoft.Live.ISearch.prototype.data;
 /** @type {{next: string, previous: string}} */
Microsoft.Live.ISearch.prototype.paging;
/**
 * @record
 * @struct
 */
Microsoft.Live.ITag = function() {};
 /** @type {string} */
Microsoft.Live.ITag.prototype.id;
 /** @type {!Microsoft.Live.IUserInfo} */
Microsoft.Live.ITag.prototype.user;
 /** @type {number} */
Microsoft.Live.ITag.prototype.x;
 /** @type {number} */
Microsoft.Live.ITag.prototype.y;
 /** @type {string} */
Microsoft.Live.ITag.prototype.created_time;
/**
 * @record
 * @struct
 */
Microsoft.Live.IWorkInfo = function() {};
 /** @type {{name: string}} */
Microsoft.Live.IWorkInfo.prototype.employer;
 /** @type {{name: string}} */
Microsoft.Live.IWorkInfo.prototype.position;
/**
 * @record
 * @struct
 */
Microsoft.Live.IPostalAddress = function() {};
 /** @type {string} */
Microsoft.Live.IPostalAddress.prototype.street;
 /** @type {string} */
Microsoft.Live.IPostalAddress.prototype.street_2;
 /** @type {string} */
Microsoft.Live.IPostalAddress.prototype.city;
 /** @type {string} */
Microsoft.Live.IPostalAddress.prototype.state;
 /** @type {string} */
Microsoft.Live.IPostalAddress.prototype.postal_code;
 /** @type {string} */
Microsoft.Live.IPostalAddress.prototype.region;
/**
 * @record
 * @struct
 */
Microsoft.Live.IUser = function() {};
 /** @type {string} */
Microsoft.Live.IUser.prototype.id;
 /** @type {string} */
Microsoft.Live.IUser.prototype.name;
 /** @type {string} */
Microsoft.Live.IUser.prototype.first_name;
 /** @type {string} */
Microsoft.Live.IUser.prototype.last_name;
 /** @type {string} */
Microsoft.Live.IUser.prototype.gender;
 /** @type {string} */
Microsoft.Live.IUser.prototype.link;
 /** @type {number} */
Microsoft.Live.IUser.prototype.birth_day;
 /** @type {number} */
Microsoft.Live.IUser.prototype.birth_month;
 /** @type {number} */
Microsoft.Live.IUser.prototype.birth_year;
 /** @type {!Array<!Microsoft.Live.IWorkInfo>} */
Microsoft.Live.IUser.prototype.work;
 /** @type {{preferred: string, account: string, personal: string, business: string, other: string}} */
Microsoft.Live.IUser.prototype.emails;
 /** @type {{personal: !Microsoft.Live.IPostalAddress, business: !Microsoft.Live.IPostalAddress}} */
Microsoft.Live.IUser.prototype.addresses;
 /** @type {{personal: string, business: string, mobile: string}} */
Microsoft.Live.IUser.prototype.phones;
 /** @type {string} */
Microsoft.Live.IUser.prototype.locale;
 /** @type {string} */
Microsoft.Live.IUser.prototype.updated_time;
/**
 * @record
 * @struct
 */
Microsoft.Live.IVideo = function() {};
 /** @type {string} */
Microsoft.Live.IVideo.prototype.id;
 /** @type {!Microsoft.Live.IUserInfo} */
Microsoft.Live.IVideo.prototype.from;
 /** @type {string} */
Microsoft.Live.IVideo.prototype.name;
 /** @type {string} */
Microsoft.Live.IVideo.prototype.description;
 /** @type {string} */
Microsoft.Live.IVideo.prototype.parent_id;
 /** @type {number} */
Microsoft.Live.IVideo.prototype.size;
 /** @type {number} */
Microsoft.Live.IVideo.prototype.comments_count;
 /** @type {boolean} */
Microsoft.Live.IVideo.prototype.comments_enabled;
 /** @type {number} */
Microsoft.Live.IVideo.prototype.tags_count;
 /** @type {boolean} */
Microsoft.Live.IVideo.prototype.tags_enabled;
 /** @type {boolean} */
Microsoft.Live.IVideo.prototype.is_embeddable;
 /** @type {string} */
Microsoft.Live.IVideo.prototype.picture;
 /** @type {string} */
Microsoft.Live.IVideo.prototype.source;
 /** @type {string} */
Microsoft.Live.IVideo.prototype.upload_location;
 /** @type {string} */
Microsoft.Live.IVideo.prototype.link;
 /** @type {number} */
Microsoft.Live.IVideo.prototype.height;
 /** @type {number} */
Microsoft.Live.IVideo.prototype.width;
 /** @type {number} */
Microsoft.Live.IVideo.prototype.duration;
 /** @type {number} */
Microsoft.Live.IVideo.prototype.bitrate;
 /** @type {string} */
Microsoft.Live.IVideo.prototype.type;
 /** @type {!Microsoft.Live.ISharedWith} */
Microsoft.Live.IVideo.prototype.shared_with;
 /** @type {string} */
Microsoft.Live.IVideo.prototype.created_time;
 /** @type {string} */
Microsoft.Live.IVideo.prototype.updated_time;
/**
 * @record
 * @struct
 */
Microsoft.Live.IAPIProperties = function() {};
 /** @type {string} */
Microsoft.Live.IAPIProperties.prototype.path;
 /** @type {string} */
Microsoft.Live.IAPIProperties.prototype.method;
 /** @type {?} */
Microsoft.Live.IAPIProperties.prototype.body;
/**
 * @record
 * @struct
 */
Microsoft.Live.IBackgroundDownloadProperties = function() {};
 /** @type {string} */
Microsoft.Live.IBackgroundDownloadProperties.prototype.path;
 /** @type {!Windows.Storage.StorageFile} */
Microsoft.Live.IBackgroundDownloadProperties.prototype.file_output;
/**
 * @record
 * @struct
 */
Microsoft.Live.IBackgroundUploadProperties = function() {};
 /** @type {string} */
Microsoft.Live.IBackgroundUploadProperties.prototype.path;
 /** @type {string} */
Microsoft.Live.IBackgroundUploadProperties.prototype.file_name;
 /** @type {?} */
Microsoft.Live.IBackgroundUploadProperties.prototype.file_input;
 /** @type {!Windows.Storage.Streams.IInputStream} */
Microsoft.Live.IBackgroundUploadProperties.prototype.stream_input;
 /** @type {string} */
Microsoft.Live.IBackgroundUploadProperties.prototype.overwrite;
/**
 * @record
 * @struct
 */
Microsoft.Live.IDownloadProperties = function() {};
 /** @type {string} */
Microsoft.Live.IDownloadProperties.prototype.path;
/**
 * @record
 * @struct
 */
Microsoft.Live.IFileDialogProperties = function() {};
 /** @type {string} */
Microsoft.Live.IFileDialogProperties.prototype.mode;
 /** @type {string} */
Microsoft.Live.IFileDialogProperties.prototype.select;
 /** @type {string} */
Microsoft.Live.IFileDialogProperties.prototype.lightbox;
/**
 * @record
 * @struct
 */
Microsoft.Live.IInitProperties = function() {};
 /** @type {string} */
Microsoft.Live.IInitProperties.prototype.client_id;
 /** @type {string} */
Microsoft.Live.IInitProperties.prototype.redirect_uri;
 /** @type {?} */
Microsoft.Live.IInitProperties.prototype.scope;
 /** @type {boolean} */
Microsoft.Live.IInitProperties.prototype.logging;
 /** @type {boolean} */
Microsoft.Live.IInitProperties.prototype.status;
 /** @type {string} */
Microsoft.Live.IInitProperties.prototype.response_type;
 /** @type {string} */
Microsoft.Live.IInitProperties.prototype.secure_cookie;
/**
 * @record
 * @struct
 */
Microsoft.Live.ILoginProperties = function() {};
 /** @type {string} */
Microsoft.Live.ILoginProperties.prototype.redirect_uri;
 /** @type {?} */
Microsoft.Live.ILoginProperties.prototype.scope;
 /** @type {string} */
Microsoft.Live.ILoginProperties.prototype.state;
/**
 * @record
 * @struct
 */
Microsoft.Live.IUIProperties = function() {};
 /** @type {string} */
Microsoft.Live.IUIProperties.prototype.name;
 /** @type {string} */
Microsoft.Live.IUIProperties.prototype.element;
 /** @type {string} */
Microsoft.Live.IUIProperties.prototype.state;
/**
 * @extends {Microsoft.Live.IUIProperties}
 * @record
 * @struct
 */
Microsoft.Live.ISkyDrivePickerProperies = function() {};
 /** @type {string} */
Microsoft.Live.ISkyDrivePickerProperies.prototype.mode;
 /** @type {string} */
Microsoft.Live.ISkyDrivePickerProperies.prototype.select;
 /** @type {string} */
Microsoft.Live.ISkyDrivePickerProperies.prototype.theme;
 /** @type {string} */
Microsoft.Live.ISkyDrivePickerProperies.prototype.lightbox;
 /** @type {!Function} */
Microsoft.Live.ISkyDrivePickerProperies.prototype.onselected;
 /** @type {!Function} */
Microsoft.Live.ISkyDrivePickerProperies.prototype.onerror;
/**
 * @extends {Microsoft.Live.IUIProperties}
 * @record
 * @struct
 */
Microsoft.Live.ISignInProperties = function() {};
 /** @type {string} */
Microsoft.Live.ISignInProperties.prototype.brand;
 /** @type {string} */
Microsoft.Live.ISignInProperties.prototype.theme;
 /** @type {string} */
Microsoft.Live.ISignInProperties.prototype.type;
 /** @type {string} */
Microsoft.Live.ISignInProperties.prototype.sign_in_text;
 /** @type {string} */
Microsoft.Live.ISignInProperties.prototype.sign_out_text;
 /** @type {!Function} */
Microsoft.Live.ISignInProperties.prototype.onloggedin;
 /** @type {!Function} */
Microsoft.Live.ISignInProperties.prototype.onloggedout;
 /** @type {!Function} */
Microsoft.Live.ISignInProperties.prototype.onerror;
/**
 * @record
 * @struct
 */
Microsoft.Live.IUploadProperties = function() {};
 /** @type {string} */
Microsoft.Live.IUploadProperties.prototype.path;
 /** @type {string} */
Microsoft.Live.IUploadProperties.prototype.element;
 /** @type {string} */
Microsoft.Live.IUploadProperties.prototype.overwrite;
/**
 * @record
 * @struct
 */
Microsoft.Live.ISession = function() {};
 /** @type {string} */
Microsoft.Live.ISession.prototype.access_token;
 /** @type {string} */
Microsoft.Live.ISession.prototype.authentication_token;
 /** @type {!Array<string>} */
Microsoft.Live.ISession.prototype.scope;
 /** @type {number} */
Microsoft.Live.ISession.prototype.expires_in;
 /** @type {number} */
Microsoft.Live.ISession.prototype.expires;
/**
 * @record
 * @struct
 */
Microsoft.Live.ILoginStatus = function() {};
 /** @type {string} */
Microsoft.Live.ILoginStatus.prototype.status;
 /** @type {!Microsoft.Live.ISession} */
Microsoft.Live.ILoginStatus.prototype.session;
/**
 * @record
 * @struct
 */
Microsoft.Live.IEventAPI = function() {};

/**
 * Adds a handler to an event.
 * @param {string} event Required. The name of the event to which to add a
 *   handler.
 * @param {!Function} callback Required. Specifies the name of the callback function
 *   to handle the event.
 * @return {void} This function can return the following errors:
 *   WL.Event.subscribe: The input parameter/property 'callback' must be
 *   included.
 *   WL.Event.subscribe: The input value for parameter/property 'event'
 *   is not valid.
 */
Microsoft.Live.IEventAPI.prototype.subscribe = function(event, callback) {};

/**
 * Removes a handler from an event.
 * @param {string} event Required. The name of the event from which to remove a
 *   handler.
 * @param {!Function=} callback Optional. Removes the callback function from the
 *   event. If this parameter is omitted or is null, all callback
 *   functions that are registered to the event are removed. Removes the
 *   callback function from the specified event.
 * @return {void}
 */
Microsoft.Live.IEventAPI.prototype.unsubscribe = function(event, callback) {};
/**
 * @record
 * @struct
 */
Microsoft.Live.IFilePickerResult = function() {};
 /** @type {{files: !Array<!Microsoft.Live.IFile>, folders: !Array<!Microsoft.Live.IFolder>}} */
Microsoft.Live.IFilePickerResult.prototype.data;
/**
 * @record
 * @struct
 */
Microsoft.Live.IPromise = function() {};

/**
 * Adds event listeners for particular events.
 * @param {function(T): void} onSuccess Called when the promised event successfully occurs.
 * @param {function(?): void=} onError Called when the promised event fails to occur. Could
 *   be an IError or an IJSError.
 * @param {function(?): void=} onProgress Called to indicate that the promised event is
 *   making progress toward completion.
 * @return {!Microsoft.Live.IPromise}
 */
Microsoft.Live.IPromise.prototype.then = function(onSuccess, onError, onProgress) {};

/**
 * Cancels the pending request represented by the Promise, and triggers
 * the error callback if the promised event has not yet occurred.
 * @return {void}
 */
Microsoft.Live.IPromise.prototype.cancel = function() {};
/**
 * @record
 * @struct
 */
Microsoft.Live.IJSError = function() {};
 /** @type {string} */
Microsoft.Live.IJSError.prototype.error;
 /** @type {string} */
Microsoft.Live.IJSError.prototype.error_description;
/**
 * @record
 * @struct
 */
Microsoft.Live.API = function() {};
 /** @type {!Microsoft.Live.IEventAPI} */
Microsoft.Live.API.prototype.Event;

/**
 * Makes a call to the Live Connect Representational State Transfer
 * (REST) API. This method encapsulates a REST API request, and then
 * calls a callback function to process the response.
 * @template T
 * @param {!Microsoft.Live.IAPIProperties} properties Required. A JSON object that contains properties
 *   that are necessary to make the REST API call.
 * @param {function(?): void=} callback Specifies a callback function that is executed when
 *   the REST API call is complete. The callback function takes the API
 *   response object as a parameter. The response object exposes the
 *   data returned from Live Connect, or, if an error occurs, an error
 *   property that contains the error code.
 * @return {!Microsoft.Live.IPromise<T>} Returns a Promise object. This object's then method provides
 *   the onSuccess, onError, and onProgress parameters to enable your
 *   code to handle a successful, failed, and in-progress call to the
 *   corresponding WL.api method, respectively.
 */
Microsoft.Live.API.prototype.api = function(properties, callback) {};

/**
 * Makes a call to download a file from Microsoft SkyDrive.
 * 
 * **Important**:  WL.backgroundDownload is supported only for use with
 * Windows Store apps using JavaScript. If you are writing a web app,
 * use WL.download instead.
 * @template T
 * @param {!Microsoft.Live.IBackgroundDownloadProperties} properties Required. A JSON object that contains properties
 *   that are necessary to make the REST API call.
 * @param {function(?): void=} callback
 * @return {!Microsoft.Live.IPromise<T>} Returns a Promise object. This object's then method accepts
 *   callback functions for onSuccess, onError, and onProgress to enable
 *   your code to handle a successful, failed, and in-progress call to
 *   the corresponding WL.download method, respectively.
 *   The onSuccess callback is passed a response object that contains
 *   content_type and stream properties, representing the downloaded
 *   file's content type and file stream, respectively.
 */
Microsoft.Live.API.prototype.backgroundDownload = function(properties, callback) {};

/**
 * Makes a call to upload a file to Microsoft SkyDrive.
 * 
 * **Important**: WL.backgroundUpload is supported only for use with
 * Windows Store apps using JavaScript. If you are writing a web app,
 * use WL.upload instead.
 * @template T
 * @param {!Microsoft.Live.IBackgroundUploadProperties} properties Required. A JSON object that contains properties
 *   that are necessary to make the REST API call.
 * @param {function(?): void=} callback Optional. Specifies a callback function that is
 *   executed when the REST API call is complete. The callback function
 *   takes the API response object as a parameter. The response object
 *   exposes the data returned from Live Connect, or if an error occurs,
 *   an error property that contains the error code.
 * @return {!Microsoft.Live.IPromise<T>} Returns a Promise object. For Windows Store apps using
 *   JavaScript, this object's then method accepts callback functions
 *   for onSuccess, onError, and onProgress to enable your code to
 *   handle a successful, failed, and in-progress call to the
 *   corresponding WL.backgroudUpload method, respectively.
 */
Microsoft.Live.API.prototype.backgroundUpload = function(properties, callback) {};

/**
 * Specifies whether the current user can be signed out of his or her
 * Microsoft account.
 * 
 * For Windows Store apps using JavaScript, you can use this function to
 * determine whether you should display a control to the user to enable
 * him or her to sign out of his or her Microsoft account. If this
 * function returns true, you should display the control. However, if
 * this function returns false, you should not display this control, as
 * attempting to sign out the user in this case will have no effect.
 * 
 * For web apps, this function always returns true.
 * @return {boolean} Returns true if the user can be signed out; otherwise,
 *   returns false if the user can't be signed out.
 */
Microsoft.Live.API.prototype.canLogout = function() {};

/**
 * Makes a call to download a file from Microsoft SkyDrive.
 * 
 * **Important**: WL.download is supported only for use with web apps.
 * If you are writing a Windows Store app using JavaScript, use
 * WL.backgroundDownload instead.
 * @param {!Microsoft.Live.IDownloadProperties} properties Required. A JSON object that contains properties
 *   that are necessary to make the REST API call.
 * @param {function(?): void=} callback Specifies a callback function that is executed when
 *   the REST API call is complete. The callback function takes the API
 *   response object as a parameter. The response object exposes the
 *   data that is returned from Live Connect, or, if an error occurs, an
 *   error property that contains the error code.
 * @return {!Microsoft.Live.IPromise<void>} Returns a Promise object. This object's then method provides
 *   the onError parameter to enable your code to handle a failed call
 *   to the corresponding WL.download method.
 */
Microsoft.Live.API.prototype.download = function(properties, callback) {};

/**
 * Displays the Microsoft SkyDrive file picker, which enables
 * JavaScript-based web apps to display a pre-built, consistent user
 * interface that enables a user to select files to upload and download
 * to and from his or her SkyDrive storage location.
 * @param {!Microsoft.Live.IFileDialogProperties} properties Required. A JSON object containing properties for
 *   displaying the button.
 * @param {function(?): void=} callback Optional. A callback function that is executed after
 *   the user finishes interacting with the SkyDrive file picker.
 * @return {!Microsoft.Live.IPromise<!Microsoft.Live.IFilePickerResult>} Returns a Promise object. This object's then method provides
 *   the onSuccess and onError parameters to enable your code to handle
 *   a successful and failed call to the corresponding WL.fileDialog
 *   method, respectively.
 */
Microsoft.Live.API.prototype.fileDialog = function(properties, callback) {};

/**
 * Returns the sign-in status of the current user. If the user is signed
 * in and connected to your app, this function returns the session
 * object. This is an asynchronous function that returns the user's
 * status by contacting the Live Connect authentication web service.
 * @param {function(!Microsoft.Live.ILoginStatus): void=} callback Returns the sign-in status of the current user. If
 *   the user is signed in and connected to your app, this function
 *   returns the session object. This is an asynchronous function that
 *   returns the user's status by contacting the Live Connect
 *   authentication web service.
 * @param {boolean=} force Optional. If set to "true", the function contacts the
 *   Live Connect authentication web service to determine the user's
 *   status. If set to "false" (the default), the function can return
 *   the user status that is currently in memory, if there is one. If
 *   the user's status has already been retrieved, the library can
 *   return the cached value. However, you can force the library to
 *   retrieve current status by setting the force parameter to "true".
 * @return {!Microsoft.Live.IPromise<!Microsoft.Live.ILoginStatus>} Returns a Promise object. This object's then method provides
 *   the onSuccess and onError parameters to enable your code to handle
 *   a successful and failed call to the corresponding WL.getLoginStatus
 *   method, respectively.
 *   In the body of the onSuccess function, a status object is returned,
 *   which contains the user's sign-in status and the session object.
 */
Microsoft.Live.API.prototype.getLoginStatus = function(callback, force) {};

/**
 * Retrieves the current session object synchronously, if a session
 * object exists. For situations in which performance is critical, such
 * as page loads, use the asynchronous WL.getLoginStatus method instead.
 * @return {!Microsoft.Live.ISession} Returns the current session as a session object instance.
 */
Microsoft.Live.API.prototype.getSession = function() {};

/**
 * Initializes the JavaScript library. An app must call this function on
 * every page before making other function calls in the library. The app
 * should call this function before making function calls that subscribe
 * to events. If the JavaScript library has already been initialized on
 * the page, calling this function succeeds silently; the client_id and
 * redirect_uri parameters are not validated.
 * @param {!Microsoft.Live.IInitProperties} properties Required. A JSON object with initialization
 *   properties.
 * @return {!Microsoft.Live.IPromise<!Microsoft.Live.ILoginStatus>} Returns a Promise object. This object's then method provides
 *   the onSuccess and onError parameters to enable your code to handle
 *   a successful and failed call to the corresponding WL.init method,
 *   respectively.
 *   When the onSuccess callback is invoked, a login status object is
 *   passed in as parameter that indicates the current user's login
 *   status.
 */
Microsoft.Live.API.prototype.init = function(properties) {};

/**
 * Signs in the user or expands the user's list of scopes. Because this
 * function can result in launching the consent page prompt, you should
 * call it only in response to a user action, such as clicking a button.
 * Otherwise, the user's web browser might block the popup.
 * 
 * Typically, this function is used by apps that define their own
 * sign-in controls, or by apps that ask users to grant additional
 * permissions during an activity. For example, to enable a user to post
 * his or her status to Live Connect, your app may have to prompt the
 * user for permission and call this function with an expanded scope.
 * 
 * If you call this function when the user has already consented to the
 * requested scope and is already signed in, the callback function is
 * invoked immediately with the current session.
 * This function logs errors to the web browser console.
 * @param {!Microsoft.Live.ILoginProperties} properties Required. A JSON object with login properties.
 * @param {function(?): void=} callback Optional. Specifies a callback function to execute
 *   when sign-in is complete. The callback function takes the status
 *   object as a parameter. For a description of the status object, see
 *   WL.getLoginStatus. If you do not specify a callback function, your
 *   app can still get the sign-in callback info by listening for an
 *   auth.sessionChange or auth.statusChange event.
 * @return {!Microsoft.Live.IPromise<!Microsoft.Live.ILoginStatus>} Returns a Promise object. This object's then method provides
 *   the onSuccess, onError, and onProgress parameters to enable your
 *   code to handle a successful, failed, and in-progress call to the
 *   corresponding WL.login method, respectively.
 */
Microsoft.Live.API.prototype.login = function(properties, callback) {};

/**
 * Signs the user out of Live Connect and clears any user state that is
 * maintained by the JavaScript library, such as cookies. If the user
 * account is connected, this function logs out the user from the app,
 * but not from the PC. This function is useful primarily for websites
 * that do not use the sign-in control.
 * @param {function(!Microsoft.Live.ILoginStatus): void=} callback Optional. Specifies a callback function that is
 *   executed when sign-out is complete. The callback function takes the
 *   status object as a parameter. For a description of the status
 *   object, see WL.getLoginStatus. If you do not specify a callback
 *   function, your app can still get the sign-out callback info by
 *   listening for an auth.sessionChange or auth.statusChange event.
 * @return {!Microsoft.Live.IPromise<!Microsoft.Live.ILoginStatus>} Returns a Promise object. This object's then method provides
 *   the onSuccess, onError, and onProgress parameters to enable your
 *   code to handle a successful, failed, and in-progress call to the
 *   corresponding WL.logout method, respectively.
 */
Microsoft.Live.API.prototype.logout = function(callback) {};

/**
 * Displays either the Live Connect sign-in button or the Microsoft
 * SkyDrive file picker button. The sign-in button either prompts the
 * user for his or her Microsoft account credentials if he or she is not
 * signed in or else signs out the user if he or she is signed in. The
 * file picker button displays the SkyDrive file picker to help the user
 * select files to upload or download to or from his or her SkyDrive
 * storage location.
 * @param {!Microsoft.Live.IUIProperties} properties Required. A JSON object containing properties for
 *   displaying the button.
 * @param {function(): void=} callback Optional. A callback function that is executed after
 *   the sign-in button or file picker button is displayed.
 *   Note: Do not use the callback parameter to run code after the user
 *   finishes interacting with the sign-in button or file picker. Use a
 *   combination of the onselected, onloggedin, onloggedout, and onerror
 *   properties as previously described.
 * @return {void}
 */
Microsoft.Live.API.prototype.ui = function(properties, callback) {};

/**
 * Makes a call to upload a file to Microsoft SkyDrive.
 * 
 * **Important**: WL.upload is supported only for use with web apps. If
 * you are writing a Windows Store app using JavaScript, use
 * WL.backgroundUpload instead.
 * @template T
 * @param {!Microsoft.Live.IUploadProperties} properties Required. A JSON object that contains properties
 *   that are necessary to make the REST API call.
 * @param {function(?): void=} callback Optional. Specifies a callback function that is
 *   executed when the REST API call is complete. The callback function
 *   takes the API response object as a parameter. The response object
 *   exposes the data returned from Live Connect, or if an error occurs,
 *   an error property that contains the error code.
 * @return {!Microsoft.Live.IPromise<T>} Returns a Promise object. This object's then method provides
 *   the onSuccess, onError, and onProgress parameters to enable your
 *   code to handle a successful, failed, and in-progress call to the
 *   corresponding WL.upload method, respectively; however, the
 *   onProgress parameter applies to newer web browsers such as Internet
 *   Explorer 10 only.
 */
Microsoft.Live.API.prototype.upload = function(properties, callback) {};
 /** @type {!Microsoft.Live.API} */
var WL;
