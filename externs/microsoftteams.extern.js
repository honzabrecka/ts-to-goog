/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/microsoftteams/index.d.ts:
 /** @type {!MessageEvent} */
MessageEvent.prototype.originalEvent;
/** @const */
var microsoftTeams = {};

/**
 * Initializes the library. This must be called before any other SDK calls.
 * The caller should only call this once the frame is loaded successfully.
 * @return {void}
 */
microsoftTeams.initialize = function() {};

/**
 * Retrieves the current context the frame is running in.
 * @param {function(!microsoftTeams.Context): void} callback The callback to invoke when the {\@link Context} object is retrieved.
 * @return {void}
 */
microsoftTeams.getContext = function(callback) {};

/**
 * Registers a handler for when the user changes their theme.
 * Only one handler may be registered at a time. Subsequent registrations will override the first.
 * @param {function(string): void} handler The handler to invoke when the user changes their theme.
 * @return {void}
 */
microsoftTeams.registerOnThemeChangeHandler = function(handler) {};

/**
 * Navigates the frame to a new cross-domain URL. The domain of this URL must match at least one of the
 * valid domains specified in the tab manifest; otherwise, an exception will be thrown. This function only
 * needs to be used when navigating the frame to a URL in a different domain than the current one in
 * a way that keeps the app informed of the change and allows the SDK to continue working.
 * @param {string} url The url to navigate the frame to.
 * @return {void}
 */
microsoftTeams.navigateCrossDomain = function(url) {};

/**
 * Shares a deep link a user can use to navigate back to a specific state in this page.
 * @param {!microsoftTeams.DeepLinkParameters} deepLinkParameters
 * @return {void}
 */
microsoftTeams.shareDeepLink = function(deepLinkParameters) {};
/** @const */
microsoftTeams.settings = {};

/**
 * Sets the validity state for the settings.
 * The inital value is false so the user will not be able to save the settings until this is called with true.
 * @param {boolean} validityState A value indicating whether the save or remove button is enabled for the user.
 * @return {void}
 */
microsoftTeams.settings.setValidityState = function(validityState) {};

/**
 * Gets the settings for the current instance.
 * @param {function(!microsoftTeams.settings.Settings): void} callback The callback to invoke when the {\@link Settings} object is retrieved.
 * @return {void}
 */
microsoftTeams.settings.getSettings = function(callback) {};

/**
 * Sets the settings for the current instance.
 * Note that this is an asynchronous operation so there are no guarentees as to when calls
 * to getSettings will reflect the changed state.
 * @param {!microsoftTeams.settings.Settings} settings The desired settings for this current instance.
 * @return {void}
 */
microsoftTeams.settings.setSettings = function(settings) {};

/**
 * Registers a handler for when the user attempts to save the settings. This handler should be used
 * to create or update the underlying resource powering the content.
 * The object passed to the handler must be used to notify whether to proceed with the save.
 * Only one handler may be registered at a time. Subsequent registrations will override the first.
 * @param {function(!microsoftTeams.settings.SaveEvent): void} handler The handler to invoke when the user selects the save button.
 * @return {void}
 */
microsoftTeams.settings.registerOnSaveHandler = function(handler) {};

/**
 * Registers a handler for when the user attempts to remove the content. This handler should be used
 * to remove the underlying resource powering the content.
 * The object passed to the handler must be used to notify whether to proceed with the remove
 * Only one handler may be registered at a time. Subsequent registrations will override the first.
 * @param {function(!microsoftTeams.settings.RemoveEvent): void} handler The handler to invoke when the user selects the remove button.
 * @return {void}
 */
microsoftTeams.settings.registerOnRemoveHandler = function(handler) {};
/**
 * @record
 * @struct
 */
microsoftTeams.settings.Settings = function() {};
 /** @type {string} */
microsoftTeams.settings.Settings.prototype.suggestedDisplayName;
 /** @type {string} */
microsoftTeams.settings.Settings.prototype.contentUrl;
 /** @type {string} */
microsoftTeams.settings.Settings.prototype.removeUrl;
 /** @type {string} */
microsoftTeams.settings.Settings.prototype.websiteUrl;
 /** @type {string} */
microsoftTeams.settings.Settings.prototype.entityId;
/**
 * @record
 * @struct
 */
microsoftTeams.settings.SaveEvent = function() {};

/**
 * Notifies that the underlying resource has been created and the settings may be saved.
 * @return {void}
 */
microsoftTeams.settings.SaveEvent.prototype.notifySuccess = function() {};

/**
 * Notifies that the underlying resource creation failed and that the settings may not be saved.
 * @param {string=} reason Specifies a reason for the failure. If provided, this string is displayed to the user. Otherwise a generic error is displayed.
 * @return {void}
 */
microsoftTeams.settings.SaveEvent.prototype.notifyFailure = function(reason) {};
/**
 * @record
 * @struct
 */
microsoftTeams.settings.RemoveEvent = function() {};

/**
 * Notifies that the underlying resource has been removed and the content may be removed.
 * @return {void}
 */
microsoftTeams.settings.RemoveEvent.prototype.notifySuccess = function() {};

/**
 * Notifies that the underlying resource removal failed and that the content may not be removed.
 * @param {string=} reason Specifies a reason for the failure. If provided, this string is displayed to the user. Otherwise a generic error is displayed.
 * @return {void}
 */
microsoftTeams.settings.RemoveEvent.prototype.notifyFailure = function(reason) {};
/** @const */
microsoftTeams.authentication = {};

/**
 * Initiates an authentication request which pops up a new windows with the specified settings.
 * @param {!microsoftTeams.authentication.AuthenticateParameters} authenticateParameters A set of values that configure the authentication popup.
 * @return {void}
 */
microsoftTeams.authentication.authenticate = function(authenticateParameters) {};

/**
 * Requests an AAD token to be issued on behalf of the app. The token is acquired from the cache
 * if it is not expired. Otherwise a request will be sent to AAD to obtain a new token.
 * @param {!microsoftTeams.authentication.AuthTokenRequest} authTokenRequest A set of values that configure the token request.
 * @return {void}
 */
microsoftTeams.authentication.getAuthToken = function(authTokenRequest) {};

/**
 * Requests the decoded AAD user identity on behalf of the app.
 * @param {!microsoftTeams.authentication.UserRequest} userRequest
 * @return {void}
 */
microsoftTeams.authentication.getUser = function(userRequest) {};

/**
 * Notifies the frame that initiated this authentication request that the request was successful.
 * This function is only usable on the authentication window.
 * This call causes the authentication window to be closed.
 * @param {string=} result Specifies a result for the authentication. If specified, the frame which initiated the authentication popup will recieve this value in their callback.
 * @return {void}
 */
microsoftTeams.authentication.notifySuccess = function(result) {};

/**
 * Notifies the frame that initiated this authentication request that the request failed.
 * This function is only usable on the authentication window.
 * This call causes the authentication window to be closed.
 * @param {string=} reason Specifies a reason for the authentication failure. If specified, the frame which initiated the authentication popup will recieve this value in their callback.
 * @return {void}
 */
microsoftTeams.authentication.notifyFailure = function(reason) {};
/**
 * @record
 * @struct
 */
microsoftTeams.authentication.AuthenticateParameters = function() {};
 /** @type {string} */
microsoftTeams.authentication.AuthenticateParameters.prototype.url;
 /** @type {number} */
microsoftTeams.authentication.AuthenticateParameters.prototype.width;
 /** @type {number} */
microsoftTeams.authentication.AuthenticateParameters.prototype.height;
 /** @type {function(string): void} */
microsoftTeams.authentication.AuthenticateParameters.prototype.successCallback;
 /** @type {function(string): void} */
microsoftTeams.authentication.AuthenticateParameters.prototype.failureCallback;
/**
 * @record
 * @struct
 */
microsoftTeams.authentication.AuthTokenRequest = function() {};
 /** @type {!Array<string>} */
microsoftTeams.authentication.AuthTokenRequest.prototype.resources;
 /** @type {function(string): void} */
microsoftTeams.authentication.AuthTokenRequest.prototype.successCallback;
 /** @type {function(string): void} */
microsoftTeams.authentication.AuthTokenRequest.prototype.failureCallback;
/**
 * @record
 * @struct
 */
microsoftTeams.authentication.UserRequest = function() {};
 /** @type {function(!microsoftTeams.authentication.UserProfile): void} */
microsoftTeams.authentication.UserRequest.prototype.successCallback;
 /** @type {function(string): void} */
microsoftTeams.authentication.UserRequest.prototype.failureCallback;
/**
 * @record
 * @struct
 */
microsoftTeams.authentication.UserProfile = function() {};
 /** @type {string} */
microsoftTeams.authentication.UserProfile.prototype.aud;
 /** @type {!Array<string>} */
microsoftTeams.authentication.UserProfile.prototype.amr;
 /** @type {number} */
microsoftTeams.authentication.UserProfile.prototype.iat;
 /** @type {string} */
microsoftTeams.authentication.UserProfile.prototype.iss;
 /** @type {string} */
microsoftTeams.authentication.UserProfile.prototype.family_name;
 /** @type {string} */
microsoftTeams.authentication.UserProfile.prototype.given_name;
 /** @type {string} */
microsoftTeams.authentication.UserProfile.prototype.unique_name;
 /** @type {string} */
microsoftTeams.authentication.UserProfile.prototype.oid;
 /** @type {string} */
microsoftTeams.authentication.UserProfile.prototype.sub;
 /** @type {string} */
microsoftTeams.authentication.UserProfile.prototype.tid;
 /** @type {number} */
microsoftTeams.authentication.UserProfile.prototype.exp;
 /** @type {number} */
microsoftTeams.authentication.UserProfile.prototype.nbf;
 /** @type {string} */
microsoftTeams.authentication.UserProfile.prototype.upn;
 /** @type {string} */
microsoftTeams.authentication.UserProfile.prototype.ver;
/**
 * @record
 * @struct
 */
microsoftTeams.Context = function() {};
 /** @type {string} */
microsoftTeams.Context.prototype.groupId;
 /** @type {string} */
microsoftTeams.Context.prototype.teamId;
 /** @type {string} */
microsoftTeams.Context.prototype.channelId;
 /** @type {string} */
microsoftTeams.Context.prototype.entityId;
 /** @type {string} */
microsoftTeams.Context.prototype.subEntityId;
 /** @type {string} */
microsoftTeams.Context.prototype.locale;
 /** @type {string} */
microsoftTeams.Context.prototype.upn;
 /** @type {string} */
microsoftTeams.Context.prototype.tid;
 /** @type {string} */
microsoftTeams.Context.prototype.theme;
/**
 * @record
 * @struct
 */
microsoftTeams.DeepLinkParameters = function() {};
 /** @type {string} */
microsoftTeams.DeepLinkParameters.prototype.subEntityId;
 /** @type {string} */
microsoftTeams.DeepLinkParameters.prototype.subEntityLabel;
 /** @type {string} */
microsoftTeams.DeepLinkParameters.prototype.subEntityWebUrl;
