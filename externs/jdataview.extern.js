/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jdataview/index.d.ts:

/**
 * @constructor
 * @struct
 * @param {number|string|!jDataView.Bytes} byteCount_or_buffer
 * @param {number=} offset
 * @param {number=} length
 * @param {boolean=} littleEndian
 */
function jDataView(byteCount_or_buffer, offset, length, littleEndian) {}
 /** @type {?} */
jDataView.prototype.buffer;
 /** @type {number} */
jDataView.prototype.byteOffset;
 /** @type {number} */
jDataView.prototype.byteLength;

/**
 * @param {number=} byteOffset
 * @param {boolean=} littleEndian
 * @return {!jDataView.Int64}
 */
jDataView.prototype.getInt64 = function(byteOffset, littleEndian) {};

/**
 * @param {number} byteOffset
 * @param {!jDataView.Int64} value
 * @param {boolean=} littleEndian
 * @return {void}
 */
jDataView.prototype.setInt64 = function(byteOffset, value, littleEndian) {};

/**
 * @param {!jDataView.Int64} value
 * @param {boolean=} littleEndian
 * @return {void}
 */
jDataView.prototype.writeInt64 = function(value, littleEndian) {};

/**
 * @param {number=} byteOffset
 * @param {boolean=} littleEndian
 * @return {!jDataView.Uint64}
 */
jDataView.prototype.getUint64 = function(byteOffset, littleEndian) {};

/**
 * @param {number} byteOffset
 * @param {!jDataView.Uint64} value
 * @param {boolean=} littleEndian
 * @return {void}
 */
jDataView.prototype.setUint64 = function(byteOffset, value, littleEndian) {};

/**
 * @param {!jDataView.Uint64} value
 * @param {boolean=} littleEndian
 * @return {void}
 */
jDataView.prototype.writeUint64 = function(value, littleEndian) {};

/**
 * @param {number} bitLength
 * @param {number=} byteOffset
 * @return {number}
 */
jDataView.prototype.getSigned = function(bitLength, byteOffset) {};

/**
 * @param {number} byteOffset
 * @param {number} value
 * @param {number} bitLength
 * @return {void}
 */
jDataView.prototype.setSigned = function(byteOffset, value, bitLength) {};

/**
 * @param {number} value
 * @param {number} bitLength
 * @return {void}
 */
jDataView.prototype.writeSigned = function(value, bitLength) {};

/**
 * @param {number} bitLength
 * @param {number=} byteOffset
 * @return {number}
 */
jDataView.prototype.getUnsigned = function(bitLength, byteOffset) {};

/**
 * @param {number} byteOffset
 * @param {number} value
 * @param {number} bitLength
 * @return {void}
 */
jDataView.prototype.setUnsigned = function(byteOffset, value, bitLength) {};

/**
 * @param {number} value
 * @param {number} bitLength
 * @return {void}
 */
jDataView.prototype.writeUnsigned = function(value, bitLength) {};

/**
 * @param {string|!jDataView.Bytes|number} string_or_bytes_or_byteCount
 * @return {!jDataView.Buffer}
 */
jDataView.prototype.wrapBuffer = function(string_or_bytes_or_byteCount) {};

/**
 * @param {...number} bytes
 * @return {!jDataView.Buffer}
 */
jDataView.prototype.createBuffer = function(bytes) {};

/**
 * @param {number} byteOffset
 * @return {number}
 */
jDataView.prototype.seek = function(byteOffset) {};

/**
 * @return {number}
 */
jDataView.prototype.tell = function() {};

/**
 * @param {number} byteLength
 * @return {number}
 */
jDataView.prototype.skip = function(byteLength) {};

/**
 * @param {number} start
 * @param {number=} end
 * @param {boolean=} forceCopy
 * @return {!jDataView}
 */
jDataView.prototype.slice = function(start, end, forceCopy) {};

/**
 * @param {number=} byteOffset
 * @return {number}
 */
jDataView.prototype.getInt8 = function(byteOffset) {};

/**
 * @param {number=} byteOffset
 * @return {number}
 */
jDataView.prototype.getUint8 = function(byteOffset) {};

/**
 * @param {number=} byteOffset
 * @param {boolean=} littleEndian
 * @return {number}
 */
jDataView.prototype.getInt16 = function(byteOffset, littleEndian) {};

/**
 * @param {number=} byteOffset
 * @param {boolean=} littleEndian
 * @return {number}
 */
jDataView.prototype.getUint16 = function(byteOffset, littleEndian) {};

/**
 * @param {number=} byteOffset
 * @param {boolean=} littleEndian
 * @return {number}
 */
jDataView.prototype.getInt32 = function(byteOffset, littleEndian) {};

/**
 * @param {number=} byteOffset
 * @param {boolean=} littleEndian
 * @return {number}
 */
jDataView.prototype.getUint32 = function(byteOffset, littleEndian) {};

/**
 * @param {number=} byteOffset
 * @param {boolean=} littleEndian
 * @return {number}
 */
jDataView.prototype.getFloat32 = function(byteOffset, littleEndian) {};

/**
 * @param {number=} byteOffset
 * @param {boolean=} littleEndian
 * @return {number}
 */
jDataView.prototype.getFloat64 = function(byteOffset, littleEndian) {};

/**
 * @param {number} byteOffset
 * @param {number} value
 * @return {void}
 */
jDataView.prototype.setInt8 = function(byteOffset, value) {};

/**
 * @param {number} byteOffset
 * @param {number} value
 * @return {void}
 */
jDataView.prototype.setUint8 = function(byteOffset, value) {};

/**
 * @param {number} byteOffset
 * @param {number} value
 * @param {boolean=} littleEndian
 * @return {void}
 */
jDataView.prototype.setInt16 = function(byteOffset, value, littleEndian) {};

/**
 * @param {number} byteOffset
 * @param {number} value
 * @param {boolean=} littleEndian
 * @return {void}
 */
jDataView.prototype.setUint16 = function(byteOffset, value, littleEndian) {};

/**
 * @param {number} byteOffset
 * @param {number} value
 * @param {boolean=} littleEndian
 * @return {void}
 */
jDataView.prototype.setInt32 = function(byteOffset, value, littleEndian) {};

/**
 * @param {number} byteOffset
 * @param {number} value
 * @param {boolean=} littleEndian
 * @return {void}
 */
jDataView.prototype.setUint32 = function(byteOffset, value, littleEndian) {};

/**
 * @param {number} byteOffset
 * @param {number} value
 * @param {boolean=} littleEndian
 * @return {void}
 */
jDataView.prototype.setFloat32 = function(byteOffset, value, littleEndian) {};

/**
 * @param {number} byteOffset
 * @param {number} value
 * @param {boolean=} littleEndian
 * @return {void}
 */
jDataView.prototype.setFloat64 = function(byteOffset, value, littleEndian) {};

/**
 * @param {number=} byteOffset
 * @return {string}
 */
jDataView.prototype.getChar = function(byteOffset) {};

/**
 * @param {number} byteOffset
 * @param {string} char
 * @return {void}
 */
jDataView.prototype.setChar = function(byteOffset, char) {};

/**
 * @param {string} char
 * @return {void}
 */
jDataView.prototype.writeChar = function(char) {};

/**
 * @param {number} byteLength
 * @param {number=} byteOffset
 * @param {string=} encoding
 * @return {string}
 */
jDataView.prototype.getString = function(byteLength, byteOffset, encoding) {};

/**
 * @param {number} byteOffset
 * @param {string} chars
 * @param {string=} encoding
 * @return {void}
 */
jDataView.prototype.setString = function(byteOffset, chars, encoding) {};

/**
 * @param {string} chars
 * @param {string=} encoding
 * @return {void}
 */
jDataView.prototype.writeString = function(chars, encoding) {};

/**
 * @param {number} length
 * @param {number=} byteOffset
 * @param {boolean=} littleEndian
 * @param {boolean=} toArray
 * @return {!Array<number>}
 */
jDataView.prototype.getBytes = function(length, byteOffset, littleEndian, toArray) {};

/**
 * @param {number} byteOffset
 * @param {!Array<number>} bytes
 * @param {boolean=} littleEndian
 * @return {void}
 */
jDataView.prototype.setBytes = function(byteOffset, bytes, littleEndian) {};

/**
 * @param {!Array<number>} bytes
 * @param {boolean=} littleEndian
 * @return {void}
 */
jDataView.prototype.writeBytes = function(bytes, littleEndian) {};

/**
 * @param {number} value
 * @return {void}
 */
jDataView.prototype.writeInt8 = function(value) {};

/**
 * @param {number} value
 * @return {void}
 */
jDataView.prototype.writeUint8 = function(value) {};

/**
 * @param {number} value
 * @param {boolean=} littleEndian
 * @return {void}
 */
jDataView.prototype.writeInt16 = function(value, littleEndian) {};

/**
 * @param {number} value
 * @param {boolean=} littleEndian
 * @return {void}
 */
jDataView.prototype.writeUint16 = function(value, littleEndian) {};

/**
 * @param {number} value
 * @param {boolean=} littleEndian
 * @return {void}
 */
jDataView.prototype.writeInt32 = function(value, littleEndian) {};

/**
 * @param {number} value
 * @param {boolean=} littleEndian
 * @return {void}
 */
jDataView.prototype.writeUint32 = function(value, littleEndian) {};

/**
 * @param {number} value
 * @param {boolean=} littleEndian
 * @return {void}
 */
jDataView.prototype.writeFloat32 = function(value, littleEndian) {};

/**
 * @param {number} value
 * @param {boolean=} littleEndian
 * @return {void}
 */
jDataView.prototype.writeFloat64 = function(value, littleEndian) {};
/**
 * @record
 * @struct
 */
jDataView.Bytes = function() {};
 /** @type {number} */
jDataView.Bytes.prototype.length;

/* TODO: IndexSignature: jDataView */
/**
 * @extends {jDataView.Bytes}
 * @record
 * @struct
 */
jDataView.Buffer = function() {};
 /** @type {number} */
jDataView.Buffer.prototype.byteLength;

/**
 * @constructor
 * @struct
 * @param {number} lo
 * @param {number} hi
 */
jDataView.Uint64 = function(lo, hi) {};
 /** @type {number} */
jDataView.Uint64.prototype.lo;
 /** @type {number} */
jDataView.Uint64.prototype.hi;

/**
 * @return {number}
 */
jDataView.Uint64.prototype.valueOf = function() {};

/**
 * @param {number} number
 * @return {!jDataView.Uint64}
 */
jDataView.Uint64.fromNumber = function(number) {};
/**
 * @extends {jDataView.Uint64}
 * @constructor
 * @struct
 */
jDataView.Int64 = function() {};

/**
 * @param {number} number
 * @return {!jDataView.Int64}
 */
jDataView.Int64.fromNumber = function(number) {};
