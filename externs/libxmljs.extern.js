/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/libxmljs/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/**
 * @param {string} source
 * @return {!XMLDocument}
 */
function parseXml(source) {}

/**
 * @param {string} source
 * @return {!HTMLDocument}
 */
function parseHtml(source) {}

/**
 * @param {string} source
 * @return {!XMLDocument}
 */
function parseXmlString(source) {}

/**
 * @param {string} source
 * @return {!HTMLDocument}
 */
function parseHtmlString(source) {}

/**
 * @constructor
 * @struct
 * @param {number} version
 * @param {string} encoding
 */
function XMLDocument(version, encoding) {}
 /** @type {!Array<?>} */
XMLDocument.prototype.validationErrors;

/**
 * @param {number} idx
 * @return {!Element}
 */
XMLDocument.prototype.child = function(idx) {};

/**
 * @return {!Array<!Element>}
 */
XMLDocument.prototype.childNodes = function() {};

/**
 * @return {!Array<!SyntaxError>}
 */
XMLDocument.prototype.errors = function() {};

/**
 * @param {string=} enc
 * @return {string|void}
 */
XMLDocument.prototype.encoding = function(enc) {};

/**
 * @param {string} xpath
 * @return {!Array<!Element>}
 */
XMLDocument.prototype.find = function(xpath) {};

/**
 * @param {string} xpath
 * @return {!Element}
 */
XMLDocument.prototype.get = function(xpath) {};

/**
 * @param {string} name
 * @param {string} content
 * @return {!Element}
 */
XMLDocument.prototype.node = function(name, content) {};

/**
 * @return {!Element}
 */
XMLDocument.prototype.root = function() {};

/**
 * @return {string}
 */
XMLDocument.prototype.toString = function() {};

/**
 * @param {!XMLDocument} xsdDoc
 * @return {boolean}
 */
XMLDocument.prototype.validate = function(xsdDoc) {};

/**
 * @return {!Number}
 */
XMLDocument.prototype.version = function() {};
/**
 * @extends {XMLDocument}
 * @constructor
 * @struct
 */
function HTMLDocument() {}

/**
 * @constructor
 * @struct
 * @param {!XMLDocument} doc
 * @param {string} name
 * @param {string=} content
 */
function Element(doc, name, content) {}

/**
 * @param {string=} newName
 * @return {string|void}
 */
Element.prototype.name = function(newName) {};

/**
 * @return {string}
 */
Element.prototype.text = function() {};

/**
 * @param {string|!Attribute|!Object<string,string>} name_or_attr_or_attrObject
 * @return {!Attribute|void}
 */
Element.prototype.attr = function(name_or_attr_or_attrObject) {};

/**
 * @return {!Array<!Attribute>}
 */
Element.prototype.attrs = function() {};

/**
 * @return {!Element}
 */
Element.prototype.parent = function() {};

/**
 * @return {!XMLDocument}
 */
Element.prototype.doc = function() {};

/**
 * @param {number} idx
 * @return {!Element}
 */
Element.prototype.child = function(idx) {};

/**
 * @return {!Array<!Element>}
 */
Element.prototype.childNodes = function() {};

/**
 * @param {!Element} child
 * @return {!Element}
 */
Element.prototype.addChild = function(child) {};

/**
 * @return {!Element}
 */
Element.prototype.nextSibling = function() {};

/**
 * @return {!Element}
 */
Element.prototype.nextElement = function() {};

/**
 * @param {!Element} siblingNode
 * @return {!Element}
 */
Element.prototype.addNextSibling = function(siblingNode) {};

/**
 * @return {!Element}
 */
Element.prototype.prevSibling = function() {};

/**
 * @return {!Element}
 */
Element.prototype.prevElement = function() {};

/**
 * @param {!Element} siblingNode
 * @return {!Element}
 */
Element.prototype.addPrevSibling = function(siblingNode) {};

/**
 * @param {string} xpath
 * @param {string|!Object<string,string>=} ns_uri_or_namespaces
 * @return {!Array<!Element>}
 */
Element.prototype.find = function(xpath, ns_uri_or_namespaces) {};

/**
 * @param {string} xpath
 * @param {string|!Object<string,string>=} ns_uri
 * @return {!Element}
 */
Element.prototype.get = function(xpath, ns_uri) {};

/**
 * @param {string} href_or_prefix
 * @param {string=} href
 * @return {!Namespace}
 */
Element.prototype.defineNamespace = function(href_or_prefix, href) {};

/**
 * @param {!Namespace|string=} ns_or_href_or_prefix
 * @param {string=} href
 * @return {!Namespace|void}
 */
Element.prototype.namespace = function(ns_or_href_or_prefix, href) {};

/**
 * @return {void}
 */
Element.prototype.remove = function() {};

/**
 * @return {string}
 */
Element.prototype.path = function() {};

/**
 * @return {string}
 */
Element.prototype.type = function() {};

/**
 * @constructor
 * @struct
 * @param {!Element} node
 * @param {string} name
 * @param {string} value
 * @param {!Namespace=} ns
 */
function Attribute(node, name, value, ns) {}

/**
 * @return {string}
 */
Attribute.prototype.name = function() {};

/**
 * @param {!Namespace=} ns
 * @return {!Namespace}
 */
Attribute.prototype.namespace = function(ns) {};

/**
 * @return {!Attribute}
 */
Attribute.prototype.nextSibling = function() {};

/**
 * @return {!Element}
 */
Attribute.prototype.node = function() {};

/**
 * @return {!Attribute}
 */
Attribute.prototype.prevSibling = function() {};

/**
 * @return {void}
 */
Attribute.prototype.remove = function() {};

/**
 * @return {string}
 */
Attribute.prototype.value = function() {};

/**
 * @constructor
 * @struct
 * @param {!Element} node
 * @param {string} prefix
 * @param {string} href
 */
function Namespace(node, prefix, href) {}

/**
 * @return {string}
 */
Namespace.prototype.href = function() {};

/**
 * @return {string}
 */
Namespace.prototype.prefix = function() {};
/**
 * @extends {internal.EventEmitter}
 * @constructor
 * @struct
 */
function SaxParser() {}

/**
 * @param {string} source
 * @return {boolean}
 */
SaxParser.prototype.parseString = function(source) {};
/**
 * @extends {internal.EventEmitter}
 * @constructor
 * @struct
 */
function SaxPushParser() {}

/**
 * @param {string} source
 * @return {boolean}
 */
SaxPushParser.prototype.push = function(source) {};
/**
 * @record
 * @struct
 */
function XmlError() {}
 /** @type {number} */
XmlError.prototype.domain;
 /** @type {number} */
XmlError.prototype.code;
 /** @type {string} */
XmlError.prototype.message;
 /** @type {number} */
XmlError.prototype.level;
 /** @type {string} */
XmlError.prototype.file;
 /** @type {number} */
XmlError.prototype.column;
 /** @type {number} */
XmlError.prototype.line;
