/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/pty.js/index.d.ts:
/**
 * @record
 * @struct
 */
function TerminalOptions() {}
 /** @type {string} */
TerminalOptions.prototype.name;
 /** @type {number} */
TerminalOptions.prototype.cols;
 /** @type {number} */
TerminalOptions.prototype.rows;
 /** @type {string} */
TerminalOptions.prototype.cwd;
 /** @type {?} */
TerminalOptions.prototype.env;
 /** @type {number} */
TerminalOptions.prototype.uid;
 /** @type {number} */
TerminalOptions.prototype.gid;

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/**
 * @constructor
 * @struct
 * Creates a new pseudo-terminal, spawns a child process, and associates it with the slave
 * end of the pseudo-terminal.
 * @param {string=} file
 * @param {!Array<string>=} args
 * @param {?=} opt
 */
function Terminal(file, args, opt) {}
 /** @type {string} */
Terminal.prototype.name;
 /** @type {number} */
Terminal.prototype.cols;
 /** @type {number} */
Terminal.prototype.rows;
 /** @type {number} */
Terminal.prototype.pid;
 /** @type {number} */
Terminal.prototype.fd;
 /** @type {string} */
Terminal.prototype.pty;
 /** @type {string} */
Terminal.prototype.file;
 /** @type {string} */
Terminal.prototype.process;
 /** @type {!Terminal} */
Terminal.prototype.stdout;
 /** @type {!Terminal} */
Terminal.prototype.stderr;
 /** @type {!Terminal} */
Terminal.prototype.stdin;
 /** @type {?} */
Terminal.prototype.socket;

/**
 * @param {number=} cols
 * @param {number=} rows
 * @return {void}
 */
Terminal.prototype.resize = function(cols, rows) {};

/**
 * Sends a signal to the spawned process associated with the slave end of the
 * pseudo-terminal (this only works if [[pid]] is not null).
 * @param {string=} signal
 * @return {void}
 */
Terminal.prototype.kill = function(signal) {};

/**
 * @return {void}
 */
Terminal.prototype.redraw = function() {};

/**
 * @param {?} data
 * @return {boolean}
 */
Terminal.prototype.write = function(data) {};

/**
 * @param {?} data
 * @return {void}
 */
Terminal.prototype.end = function(data) {};

/**
 * @return {void}
 */
Terminal.prototype.pause = function() {};

/**
 * @return {void}
 */
Terminal.prototype.resume = function() {};

/**
 * @param {string} encoding
 * @return {void}
 */
Terminal.prototype.setEncoding = function(encoding) {};

/**
 * Closes the master end of the pseudo-terminal, and attempts to kill the spawned process
 * associated with the slave end of the pseudo-terminal (but only if [[pid]] is not null).
 * @return {void}
 */
Terminal.prototype.destroy = function() {};

/**
 * @template T
 * @param {T} destination
 * @param {{end: boolean}=} options
 * @return {T}
 */
Terminal.prototype.pipe = function(destination, options) {};

/**
 * @param {string} event
 * @param {!Function} listener
 * @return {Terminal}
 */
Terminal.prototype.addListener = function(event, listener) {};

/**
 * @param {string} event
 * @param {!Function} listener
 * @return {Terminal}
 */
Terminal.prototype.on = function(event, listener) {};

/**
 * @param {string} event
 * @param {!Function} listener
 * @return {Terminal}
 */
Terminal.prototype.once = function(event, listener) {};

/**
 * @param {string} event
 * @param {!Function} listener
 * @return {Terminal}
 */
Terminal.prototype.removeListener = function(event, listener) {};

/**
 * @param {string=} event
 * @return {Terminal}
 */
Terminal.prototype.removeAllListeners = function(event) {};

/**
 * @param {number} n
 * @return {Terminal}
 */
Terminal.prototype.setMaxListeners = function(n) {};

/**
 * @return {number}
 */
Terminal.prototype.getMaxListeners = function() {};

/**
 * @param {string} event
 * @return {!Array<!Function>}
 */
Terminal.prototype.listeners = function(event) {};

/**
 * @param {string} event
 * @param {...?} args
 * @return {boolean}
 */
Terminal.prototype.emit = function(event, args) {};

/**
 * @param {string} type
 * @return {number}
 */
Terminal.prototype.listenerCount = function(type) {};

/**
 * @param {string} event
 * @param {!Function} listener
 * @return {Terminal}
 */
Terminal.prototype.prependListener = function(event, listener) {};

/**
 * @param {string} event
 * @param {!Function} listener
 * @return {Terminal}
 */
Terminal.prototype.prependOnceListener = function(event, listener) {};

/**
 * @return {!Array<string>}
 */
Terminal.prototype.eventNames = function() {};

/**
 * Creates a new pseudo-terminal, spawns a child process, and associates it with the slave
 * end of the pseudo-terminal.
 * @param {string=} file
 * @param {!Array<string>=} args
 * @param {?=} opt
 * @return {!Terminal}
 */
function createTerminal(file, args, opt) {}

/**
 * Alias for [[createTerminal]].
 * @param {string=} file
 * @param {!Array<string>=} args
 * @param {?=} opt
 * @return {!Terminal}
 */
function fork(file, args, opt) {}

/**
 * Alias for [[createTerminal]].
 * @param {string=} file
 * @param {!Array<string>=} args
 * @param {?=} opt
 * @return {!Terminal}
 */
function spawn(file, args, opt) {}

/**
 * Creates a new pseudo-terminal.
 * This function is not available on Windows, use [[fork]] there instead.
 * @param {{cols: number, rows: number}=} opt
 * @return {!Terminal}
 */
function open(opt) {}
/** @const */
var native = {};

/**
 * Unix-only.
 * @param {string} file
 * @param {!Array<string>} args
 * @param {?} env
 * @param {string} cwd
 * @param {number} cols
 * @param {number} rows
 * @param {number=} uid
 * @param {number=} gid
 * @return {{fd: number, pid: number, pty: string}}
 */
native.fork = function(file, args, env, cwd, cols, rows, uid, gid) {};

/**
 * Unix-only.
 * Windows-only.
 * @param {number|string} cols_or_dataPipe
 * @param {number} rows_or_cols
 * @param {number=} rows
 * @param {boolean=} debug
 * @return {{master: number, slave: number, pty: string}|{pid: number, pty: number, fd: number}}
 */
native.open = function(cols_or_dataPipe, rows_or_cols, rows, debug) {};

/**
 * Unix-only.
 * @param {number} fd
 * @param {string} tty
 * @return {string}
 */
native.process = function(fd, tty) {};

/**
 * Windows-only.
 * @param {number} pid
 * @param {string} file
 * @param {string} cmdline
 * @param {!Array<string>} env
 * @param {string} cwd
 * @return {void}
 */
native.startProcess = function(pid, file, cmdline, env, cwd) {};

/**
 * Windows-only.
 * @param {number} pid
 * @return {void}
 */
native.kill = function(pid) {};

/**
 * @param {number} fd
 * @param {number} cols
 * @param {number} rows
 * @return {void}
 */
native.resize = function(fd, cols, rows) {};
