/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/d3-ease/index.d.ts:

/**
 * Linear easing; the identity function; linear(t) returns t.
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeLinear(normalizedTime) {}

/**
 * Symmetric quadratic easing; scales quadIn for t in [0, 0.5] and quadOut for t in [0.5, 1]. Also equivalent to poly.exponent(2).
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeQuad(normalizedTime) {}

/**
 * Quadratic easing; equivalent to polyIn.exponent(2).
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeQuadIn(normalizedTime) {}

/**
 * Reverse quadratic easing; equivalent to 1 - quadIn(1 - t). Also equivalent to polyOut.exponent(2).
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeQuadOut(normalizedTime) {}

/**
 * Symmetric quadratic easing; scales quadIn for t in [0, 0.5] and quadOut for t in [0.5, 1]. Also equivalent to poly.exponent(2).
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeQuadInOut(normalizedTime) {}

/**
 * Symmetric cubic easing; scales cubicIn for t in [0, 0.5] and cubicOut for t in [0.5, 1]. Also equivalent to poly.exponent(3).
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeCubic(normalizedTime) {}

/**
 * Cubic easing; equivalent to polyIn.exponent(3).
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeCubicIn(normalizedTime) {}

/**
 * Reverse cubic easing; equivalent to 1 - cubicIn(1 - t). Also equivalent to polyOut.exponent(3).
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeCubicOut(normalizedTime) {}

/**
 * Symmetric cubic easing; scales cubicIn for t in [0, 0.5] and cubicOut for t in [0.5, 1]. Also equivalent to poly.exponent(3).
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeCubicInOut(normalizedTime) {}
/**
 * @record
 * @struct
 */
function PolynomialEasingFactory() {}

/* TODO: CallSignature:  */

/**
 * Returns a new polynomial easing with the specified exponent e.
 * If the exponent is not specified, it defaults to 3, equivalent to cubic.
 * 
 * @param {number} e Exponent for polynomial easing.
 * @return {?}
 */
PolynomialEasingFactory.prototype.exponent = function(e) {};
 /** @type {?} */
var easePoly;
 /** @type {?} */
var easePolyIn;
 /** @type {?} */
var easePolyOut;
 /** @type {?} */
var easePolyInOut;

/**
 * Symmetric sinusoidal easing; scales sinIn for t in [0, 0.5] and sinOut for t in [0.5, 1].
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeSin(normalizedTime) {}

/**
 * Sinusoidal easing; returns sin(t).
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeSinIn(normalizedTime) {}

/**
 * Reverse sinusoidal easing; equivalent to 1 - sinIn(1 - t).
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeSinOut(normalizedTime) {}

/**
 * Symmetric sinusoidal easing; scales sinIn for t in [0, 0.5] and sinOut for t in [0.5, 1].
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeSinInOut(normalizedTime) {}

/**
 * Symmetric exponential easing; scales expIn for t in [0, 0.5] and expOut for t in [0.5, 1].
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeExp(normalizedTime) {}

/**
 * Exponential easing; raises 2 to the exponent 10 * (t - 1).
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeExpIn(normalizedTime) {}

/**
 * Reverse exponential easing; equivalent to 1 - expIn(1 - t).
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeExpOut(normalizedTime) {}

/**
 * Symmetric exponential easing; scales expIn for t in [0, 0.5] and expOut for t in [0.5, 1].
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeExpInOut(normalizedTime) {}

/**
 * Symmetric circular easing; scales circleIn for t in [0, 0.5] and circleOut for t in [0.5, 1].
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeCircle(normalizedTime) {}

/**
 * Circular easing.
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeCircleIn(normalizedTime) {}

/**
 * Reverse circular easing; equivalent to 1 - circleIn(1 - t).
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeCircleOut(normalizedTime) {}

/**
 * Symmetric circular easing; scales circleIn for t in [0, 0.5] and circleOut for t in [0.5, 1].
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeCircleInOut(normalizedTime) {}

/**
 * Reverse bounce easing; equivalent to 1 - bounceIn(1 - t).
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeBounce(normalizedTime) {}

/**
 * Bounce easing, like a rubber ball.
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeBounceIn(normalizedTime) {}

/**
 * Reverse bounce easing; equivalent to 1 - bounceIn(1 - t).
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeBounceOut(normalizedTime) {}

/**
 * Symmetric bounce easing; scales bounceIn for t in [0, 0.5] and bounceOut for t in [0.5, 1].
 * 
 * @param {number} normalizedTime Normalized time typically in the range [0, 1]
 * @return {number}
 */
function easeBounceInOut(normalizedTime) {}
/**
 * @record
 * @struct
 */
function BackEasingFactory() {}

/* TODO: CallSignature:  */

/**
 * Returns a new back easing with the specified overshoot s.
 * The degree of overshoot is configurable; if not specified, it defaults to 1.70158.
 * 
 * @param {number} s Overshoot parameter
 * @return {?}
 */
BackEasingFactory.prototype.overshoot = function(s) {};
 /** @type {?} */
var easeBack;
 /** @type {?} */
var easeBackIn;
 /** @type {?} */
var easeBackOut;
 /** @type {?} */
var easeBackInOut;
/**
 * @record
 * @struct
 */
function ElasticEasingFactory() {}

/* TODO: CallSignature:  */

/**
 * Returns a new elastic easing with the specified amplitude a.
 * Defaults to 1,if not specified.
 * 
 * @param {number} a Amplitude for elastic easing.
 * @return {?}
 */
ElasticEasingFactory.prototype.amplitude = function(a) {};

/**
 * Returns a new elastic easing with the specified amplitude a.
 * Defaults to 0.3,if not specified.
 * 
 * @param {number} p Period for elastic easing.
 * @return {?}
 */
ElasticEasingFactory.prototype.period = function(p) {};
 /** @type {?} */
var easeElastic;
 /** @type {?} */
var easeElasticIn;
 /** @type {?} */
var easeElasticOut;
 /** @type {?} */
var easeElasticInOut;
