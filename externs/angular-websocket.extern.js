/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/angular-websocket/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "angular"
/** @const */
tsickle_declare_module.angular.websocket = {};

/** @typedef {{scope: !angular.IScope, rootScopeFailOver: boolean, useApplyAsync: boolean, initialTimeout: number, maxTimeout: number, binaryType: string, reconnectIfNotNormalClose: boolean}} */
tsickle_declare_module.angular.websocket.IWebSocketConfigOptions;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.websocket.IWebSocketProvider = function() {};

/* TODO: CallSignature: tsickle_declare_module.angular.websocket */

/** @typedef {{filter: (string|!RegExp), autoApply: boolean}} */
tsickle_declare_module.angular.websocket.IWebSocketMessageOptions;

/** @typedef {{fn: function(!MessageEvent): void, pattern: (string|!RegExp), autoApply: boolean}} */
tsickle_declare_module.angular.websocket.IWebSocketMessageHandler;

/** @typedef {{message: ?, defered: !angular.IPromise<void>}} */
tsickle_declare_module.angular.websocket.IWebSocketQueueItem;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.websocket.IWebSocket = function() {};
 /** @type {!WebSocket} */
tsickle_declare_module.angular.websocket.IWebSocket.prototype.socket;
 /** @type {!Array<{message: ?, defered: !angular.IPromise<void>}>} */
tsickle_declare_module.angular.websocket.IWebSocket.prototype.sendQueue;
 /** @type {!Array<function(!Event): void>} */
tsickle_declare_module.angular.websocket.IWebSocket.prototype.onOpenCallbacks;
 /** @type {!Array<{fn: function(!MessageEvent): void, pattern: (string|!RegExp), autoApply: boolean}>} */
tsickle_declare_module.angular.websocket.IWebSocket.prototype.onMessageCallbacks;
 /** @type {!Array<function(!Event): void>} */
tsickle_declare_module.angular.websocket.IWebSocket.prototype.onErrorCallbacks;
 /** @type {!Array<function(!CloseEvent): void>} */
tsickle_declare_module.angular.websocket.IWebSocket.prototype.onCloseCallbacks;
 /** @type {number} */
tsickle_declare_module.angular.websocket.IWebSocket.prototype.readyState;
 /** @type {number} */
tsickle_declare_module.angular.websocket.IWebSocket.prototype.initialTimeout;
 /** @type {number} */
tsickle_declare_module.angular.websocket.IWebSocket.prototype.maxTimeout;

/**
 * Adds a callback to be executed each time a socket connection is opened for
 * this instance.
 * 
 * @param {function(!Event): void} callback
 * @return {!websocket.IWebSocket} this instance, for method chaining
 */
tsickle_declare_module.angular.websocket.IWebSocket.prototype.onOpen = function(callback) {};

/**
 * Adds a callback to be executed each time a socket connection is closed for
 * this instance.
 * 
 * @param {function(!CloseEvent): void} callback
 * @return {!websocket.IWebSocket} this instance, for method chaining
 */
tsickle_declare_module.angular.websocket.IWebSocket.prototype.onClose = function(callback) {};

/**
 * Adds a callback to be executed each time a socket connection is closed for
 * this instance.
 * 
 * @param {function(!Event): void} callback
 * @return {!websocket.IWebSocket} this instance, for method chaining
 */
tsickle_declare_module.angular.websocket.IWebSocket.prototype.onError = function(callback) {};

/**
 * Adds a callback to be executed each time a socket connection has an error for
 * this instance.
 * 
 * @param {function(!MessageEvent): void} callback
 * @param {{filter: (string|!RegExp), autoApply: boolean}=} options
 * @return {!websocket.IWebSocket} this instance, for method chaining
 */
tsickle_declare_module.angular.websocket.IWebSocket.prototype.onMessage = function(callback, options) {};

/**
 * Closes the underlying socket, as long as no data is still being sent from the client.
 * 
 * @param {boolean=} force if `true`, force close even if data is still being sent
 * @return {!websocket.IWebSocket} this instance, for method chaining
 */
tsickle_declare_module.angular.websocket.IWebSocket.prototype.close = function(force) {};

/**
 * Adds data to a queue, and attempts to send if the socket is ready.
 * 
 * @param {(string|!Object)} data data to send, if this is an object, it will be stringified before sending
 * @return {!angular.IPromise<?>}
 */
tsickle_declare_module.angular.websocket.IWebSocket.prototype.send = function(data) {};
