/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/tether-drop/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {!Drop.IDropOptions} options
 */
function Drop(options) {}
 /** @type {!HTMLElement} */
Drop.prototype.content;
 /** @type {!Tether} */
Drop.prototype.tether;

/**
 * @return {void}
 */
Drop.prototype.open = function() {};

/**
 * @return {void}
 */
Drop.prototype.close = function() {};

/**
 * @return {void}
 */
Drop.prototype.remove = function() {};

/**
 * @return {void}
 */
Drop.prototype.toggle = function() {};

/**
 * @return {boolean}
 */
Drop.prototype.isOpened = function() {};

/**
 * @return {void}
 */
Drop.prototype.position = function() {};

/**
 * @return {void}
 */
Drop.prototype.destroy = function() {};

/**
 * @param {string} event
 * @param {!Function} handler
 * @param {?=} context
 * @return {void}
 */
Drop.prototype.on = function(event, handler, context) {};

/**
 * @param {string} event
 * @param {!Function} handler
 * @param {?=} context
 * @return {void}
 */
Drop.prototype.once = function(event, handler, context) {};

/**
 * @param {string} event
 * @param {!Function=} handler
 * @return {void}
 */
Drop.prototype.off = function(event, handler) {};

/**
 * @param {!Drop.IDropContextOptions} options
 * @return {?}
 */
Drop.createContext = function(options) {};
/**
 * @record
 * @struct
 */
Drop.IDropContextOptions = function() {};
 /** @type {string} */
Drop.IDropContextOptions.prototype.classPrefix;
 /** @type {!Drop.IDropOptions} */
Drop.IDropContextOptions.prototype.defaults;
/**
 * @record
 * @struct
 */
Drop.IDropOptions = function() {};
 /** @type {!Element} */
Drop.IDropOptions.prototype.target;
 /** @type {(string|!Element|function(!Drop): string|function(!Drop): !Element)} */
Drop.IDropOptions.prototype.content;
 /** @type {string} */
Drop.IDropOptions.prototype.position;
 /** @type {string} */
Drop.IDropOptions.prototype.openOn;
 /** @type {string} */
Drop.IDropOptions.prototype.classes;
 /** @type {boolean} */
Drop.IDropOptions.prototype.constrainToWindow;
 /** @type {boolean} */
Drop.IDropOptions.prototype.constrainToScrollParent;
 /** @type {boolean} */
Drop.IDropOptions.prototype.remove;
 /** @type {function(!Event, !Drop): boolean} */
Drop.IDropOptions.prototype.beforeClose;
 /** @type {number} */
Drop.IDropOptions.prototype.openDelay;
 /** @type {number} */
Drop.IDropOptions.prototype.closeDelay;
 /** @type {number} */
Drop.IDropOptions.prototype.focusDelay;
 /** @type {number} */
Drop.IDropOptions.prototype.blurDelay;
 /** @type {number} */
Drop.IDropOptions.prototype.hoverOpenDelay;
 /** @type {number} */
Drop.IDropOptions.prototype.hoverCloseDelay;
 /** @type {!Tether.ITetherOptions} */
Drop.IDropOptions.prototype.tetherOptions;
