/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/bcrypt/index.d.ts:

/**
 * @param {number=} rounds  The cost of processing the data. Default 10.
 * @return {string}
 */
function genSaltSync(rounds) {}

/**
 * @param {number|function(!Error, string): void=} rounds_or_callback    The cost of processing the data. Default 10. /  A callback to be fire once the sald has been generated. Uses eio making it asynchronous.
 * @param {function(!Error, string): void=} callback  A callback to be fire once the sald has been generated. Uses eio making it asynchronous.
 * @return {!Promise<string>} A promise to be either resolved with the generated salt or rejected with an Error
 */
function genSalt(rounds_or_callback, callback) {}

/**
 * @param {?} data  The data to be encrypted.
 * @param {(string|number)} saltOrRounds
 * @return {string}
 */
function hashSync(data, saltOrRounds) {}

/**
 * @param {?} data      The data to be encrypted.
 * @param {(string|number)} saltOrRounds
 * @param {function(!Error, string): void=} callback  A callback to be fired once the data has been encrypted. Uses eio making it asynchronous.
 * @return {!Promise<string>} A promise to be either resolved with the encrypted data salt or rejected with an Error
 */
function hash(data, saltOrRounds, callback) {}

/**
 * @param {?} data      The data to be encrypted.
 * @param {string} encrypted The data to be compared against.
 * @return {boolean}
 */
function compareSync(data, encrypted) {}

/**
 * @param {?} data      The data to be encrypted.
 * @param {string} encrypted The data to be compared against.
 * @param {function(!Error, boolean): void=} callback  A callback to be fire once the data has been compared. Uses eio making it asynchronous.
 * @return {!Promise<boolean>} A promise to be either resolved with the comparision result salt or rejected with an Error
 */
function compare(data, encrypted, callback) {}

/**
 * Return the number of rounds used to encrypt a given hash
 * 
 * @param {string} encrypted Hash from which the number of rounds used should be extracted.
 * @return {number}
 */
function getRounds(encrypted) {}
