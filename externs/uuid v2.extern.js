/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/uuid v2/index.d.ts:
/** @const */
var uuid = {};
/**
 * @record
 * @struct
 */
uuid.V1Options = function() {};
 /** @type {!Array<number>} */
uuid.V1Options.prototype.node;
 /** @type {number} */
uuid.V1Options.prototype.clockseq;
 /** @type {(number|!Date)} */
uuid.V1Options.prototype.msecs;
 /** @type {number} */
uuid.V1Options.prototype.nsecs;

/** @typedef {({random: !Array<number>}|{rng: function(): !Array<number>})} */
uuid.V4Options;
/**
 * @record
 * @struct
 */
uuid.UuidStatic = function() {};

/* TODO: CallSignature: uuid */

/* TODO: CallSignature: uuid */

/* TODO: CallSignature: uuid */
 /** @type {!uuid.UuidStatic} */
uuid.UuidStatic.prototype.v4;

/**
 * @param {!uuid.V1Options=} options
 * @param {!Array<number>|?=} buffer
 * @param {number=} offset
 * @return {string|!Array<number>|?}
 */
uuid.UuidStatic.prototype.v1 = function(options, buffer, offset) {};

/**
 * @param {string} id
 * @param {!Array<number>|?=} buffer
 * @param {number=} offset
 * @return {!Array<number>|?}
 */
uuid.UuidStatic.prototype.parse = function(id, buffer, offset) {};

/**
 * @param {(!Array<number>|?)} buffer
 * @param {number=} offset
 * @return {string}
 */
uuid.UuidStatic.prototype.unparse = function(buffer, offset) {};
 /** @type {!uuid.UuidStatic} */
var uuid;

/* TODO: ExportAssignment in  */
