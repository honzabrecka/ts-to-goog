/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/phonon/index.d.ts:
/** @const */
var Phonon = {};
/**
 * @record
 * @struct
 */
Phonon.Phonon = function() {};
 /** @type {!Phonon.PhononDeviceObject} */
Phonon.Phonon.prototype.device;
 /** @type {!Phonon.PhononBrowserObject} */
Phonon.Phonon.prototype.browser;
 /** @type {!Phonon.PhononEventObject} */
Phonon.Phonon.prototype.event;

/**
 * @param {!Phonon.PhononOptions} options
 * @return {void}
 */
Phonon.Phonon.prototype.options = function(options) {};

/**
 * @return {!Phonon.PhononNavigator}
 */
Phonon.Phonon.prototype.navigator = function() {};

/**
 * @return {!Phonon.PhononI18n}
 */
Phonon.Phonon.prototype.i18n = function() {};

/**
 * @param {string} language
 * @return {void}
 */
Phonon.Phonon.prototype.updateLocale = function(language) {};

/**
 * @param {!Phonon.PhononAjaxObject} request
 * @return {!Phonon.PhononAjaxReturnObject}
 */
Phonon.Phonon.prototype.ajax = function(request) {};

/**
 * @param {function(): void} callback
 * @return {void}
 */
Phonon.Phonon.prototype.onReady = function(callback) {};

/**
 * @param {string} id
 * @return {!Phonon.PhononPanelComponent}
 */
Phonon.Phonon.prototype.panel = function(id) {};

/**
 * @param {string} id
 * @return {!Phonon.PhononSidePanelComponent}
 */
Phonon.Phonon.prototype.sidePanel = function(id) {};

/**
 * @param {string} text
 * @param {string=} title
 * @param {boolean=} cancelable
 * @param {string=} textOk
 * @return {!Phonon.PhononDialogComponent}
 */
Phonon.Phonon.prototype.alert = function(text, title, cancelable, textOk) {};

/**
 * @param {string} text
 * @param {string=} title
 * @param {boolean=} cancelable
 * @param {string=} textOk
 * @param {string=} textCancel
 * @return {!Phonon.PhononDialogComponent}
 */
Phonon.Phonon.prototype.confirm = function(text, title, cancelable, textOk, textCancel) {};

/**
 * @param {string} text
 * @param {string=} title
 * @param {boolean=} cancelable
 * @param {string=} textOk
 * @param {string=} textCancel
 * @return {!Phonon.PhononDialogComponent}
 */
Phonon.Phonon.prototype.prompt = function(text, title, cancelable, textOk, textCancel) {};

/**
 * @param {string} title
 * @param {boolean=} cancelable
 * @return {!Phonon.PhononIndicatorComponent}
 */
Phonon.Phonon.prototype.indicator = function(title, cancelable) {};

/**
 * @param {string} id
 * @return {!Phonon.PhononCustomDialogComponent}
 */
Phonon.Phonon.prototype.dialog = function(id) {};

/**
 * @param {string} textOrId
 * @param {number=} timeout
 * @param {boolean=} showButton
 * @param {string=} textButton
 * @return {!Phonon.PhononNotifComponent}
 */
Phonon.Phonon.prototype.notif = function(textOrId, timeout, showButton, textButton) {};

/**
 * @param {string=} id
 * @return {!Phonon.PhononPopoverComponent}
 */
Phonon.Phonon.prototype.popover = function(id) {};

/**
 * @param {(string|!Element)} element
 * @return {!Phonon.PhononPreloaderComponent}
 */
Phonon.Phonon.prototype.preloader = function(element) {};

/**
 * @return {!Phonon.PhononTabComponent}
 */
Phonon.Phonon.prototype.tab = function() {};

/**
 * @param {(string|!Element|!HTMLElement)} input
 * @param {!Awesomplete.Options=} o
 * @return {!Awesomplete}
 */
Phonon.Phonon.prototype.autocomplete = function(input, o) {};
/**
 * @record
 * @struct
 */
Phonon.PhononDeviceObject = function() {};
 /** @type {string} */
Phonon.PhononDeviceObject.prototype.os;
 /** @type {string} */
Phonon.PhononDeviceObject.prototype.osVersion;
 /** @type {string} */
Phonon.PhononDeviceObject.prototype.ANDROID;
 /** @type {string} */
Phonon.PhononDeviceObject.prototype.IOS;
/**
 * @record
 * @struct
 */
Phonon.PhononBrowserObject = function() {};
 /** @type {string} */
Phonon.PhononBrowserObject.prototype.name;
 /** @type {string} */
Phonon.PhononBrowserObject.prototype.version;
/**
 * @record
 * @struct
 */
Phonon.PhononEventObject = function() {};
 /** @type {string} */
Phonon.PhononEventObject.prototype.animationEnd;
 /** @type {string} */
Phonon.PhononEventObject.prototype.transitionEnd;
/**
 * @record
 * @struct
 */
Phonon.PhononCustomWindowEvent = function() {};
 /** @type {!Phonon.PhononDetail} */
Phonon.PhononCustomWindowEvent.prototype.detail;
/**
 * @record
 * @struct
 */
Phonon.PhononDetail = function() {};
 /** @type {string} */
Phonon.PhononDetail.prototype.page;
 /** @type {!Array<string>} */
Phonon.PhononDetail.prototype.req;
/**
 * @record
 * @struct
 */
Phonon.PhononOptions = function() {};
 /** @type {!Phonon.PhononNavigatorOptions} */
Phonon.PhononOptions.prototype.navigator;
 /** @type {!Phonon.PhononI18nOptions} */
Phonon.PhononOptions.prototype.i18n;
/**
 * @record
 * @struct
 */
Phonon.PhononNavigatorOptions = function() {};
 /** @type {string} */
Phonon.PhononNavigatorOptions.prototype.defaultPage;
 /** @type {string} */
Phonon.PhononNavigatorOptions.prototype.hashPrefix;
 /** @type {boolean} */
Phonon.PhononNavigatorOptions.prototype.animatePages;
 /** @type {boolean} */
Phonon.PhononNavigatorOptions.prototype.enableBrowserBackButton;
 /** @type {string} */
Phonon.PhononNavigatorOptions.prototype.templateRootDirectory;
 /** @type {string} */
Phonon.PhononNavigatorOptions.prototype.defaultTemplateExtension;
 /** @type {boolean} */
Phonon.PhononNavigatorOptions.prototype.useHash;
/**
 * @record
 * @struct
 */
Phonon.PhononI18nOptions = function() {};
 /** @type {string} */
Phonon.PhononI18nOptions.prototype.directory;
 /** @type {string} */
Phonon.PhononI18nOptions.prototype.localeFallback;
 /** @type {string} */
Phonon.PhononI18nOptions.prototype.localePreferred;
/**
 * @record
 * @struct
 */
Phonon.PhononNavigator = function() {};
 /** @type {string} */
Phonon.PhononNavigator.prototype.currentPage;
 /** @type {string} */
Phonon.PhononNavigator.prototype.previousPage;

/**
 * @param {string} pageName
 * @param {string=} parameter
 * @return {void}
 */
Phonon.PhononNavigator.prototype.changePage = function(pageName, parameter) {};

/**
 * @param {!Phonon.PhononPageObject} page
 * @param {function(!Phonon.PhononActivity): void=} callback
 * @return {void}
 */
Phonon.PhononNavigator.prototype.on = function(page, callback) {};

/**
 * @param {string} page
 * @return {!Phonon.PhononPageEventObject}
 */
Phonon.PhononNavigator.prototype.onPage = function(page) {};

/**
 * @return {void}
 */
Phonon.PhononNavigator.prototype.start = function() {};
/**
 * @record
 * @struct
 */
Phonon.PhononActivity = function() {};

/**
 * @param {function(): void=} callback
 * @return {void}
 */
Phonon.PhononActivity.prototype.onCreate = function(callback) {};

/**
 * @param {function(): void=} callback
 * @return {void}
 */
Phonon.PhononActivity.prototype.onReady = function(callback) {};

/**
 * @param {function(!Phonon.PhononOnCloseObject): void=} callback
 * @return {void}
 */
Phonon.PhononActivity.prototype.onClose = function(callback) {};

/**
 * @param {function(): void=} callback
 * @return {void}
 */
Phonon.PhononActivity.prototype.onHidden = function(callback) {};

/**
 * @param {function(): void=} callback
 * @return {void}
 */
Phonon.PhononActivity.prototype.onTransitionEnd = function(callback) {};

/**
 * @param {function(!Array<string>): void=} callback
 * @return {void}
 */
Phonon.PhononActivity.prototype.onHashChanged = function(callback) {};

/**
 * @param {function(number): void=} callback
 * @return {void}
 */
Phonon.PhononActivity.prototype.onTabChanged = function(callback) {};
/**
 * @record
 * @struct
 */
Phonon.PhononPageObject = function() {};
 /** @type {string} */
Phonon.PhononPageObject.prototype.page;
 /** @type {string} */
Phonon.PhononPageObject.prototype.content;
 /** @type {boolean} */
Phonon.PhononPageObject.prototype.preventClose;
 /** @type {number} */
Phonon.PhononPageObject.prototype.readyDelay;
/**
 * @record
 * @struct
 */
Phonon.PhononOnCloseObject = function() {};

/**
 * @return {void}
 */
Phonon.PhononOnCloseObject.prototype.close = function() {};
/**
 * @record
 * @struct
 */
Phonon.PhononPageEventObject = function() {};

/**
 * @param {string} event
 * @param {function(?): void} callback
 * @return {void}
 */
Phonon.PhononPageEventObject.prototype.addEvent = function(event, callback) {};
/**
 * @record
 * @struct
 */
Phonon.PhononI18n = function() {};

/**
 * @param {!Element|function(): void=} element_or_callback
 * @param {function(): void=} callback
 * @return {void}
 */
Phonon.PhononI18n.prototype.bind = function(element_or_callback, callback) {};

/**
 * @param {function(?): void} callback
 * @return {void}
 */
Phonon.PhononI18n.prototype.getAll = function(callback) {};

/**
 * @param {string|!Array<string>} key
 * @param {function(?): void} callback
 * @return {void}
 */
Phonon.PhononI18n.prototype.get = function(key, callback) {};

/**
 * @return {string}
 */
Phonon.PhononI18n.prototype.getPreference = function() {};

/**
 * @param {string} newLanguage
 * @return {void}
 */
Phonon.PhononI18n.prototype.setPreference = function(newLanguage) {};

/**
 * @return {string}
 */
Phonon.PhononI18n.prototype.getLocale = function() {};

/** @typedef {string} */
Phonon.PhononAjaxErrorFlag;
/**
 * @record
 * @struct
 */
Phonon.PhononAjaxObject = function() {};
 /** @type {string} */
Phonon.PhononAjaxObject.prototype.method;
 /** @type {string} */
Phonon.PhononAjaxObject.prototype.url;
 /** @type {boolean} */
Phonon.PhononAjaxObject.prototype.crossDomain;
 /** @type {string} */
Phonon.PhononAjaxObject.prototype.dataType;
 /** @type {string} */
Phonon.PhononAjaxObject.prototype.contentType;
 /** @type {?} */
Phonon.PhononAjaxObject.prototype.data;
 /** @type {number} */
Phonon.PhononAjaxObject.prototype.timeout;
 /** @type {?} */
Phonon.PhononAjaxObject.prototype.headers;

/**
 * @param {?} res
 * @param {!XMLHttpRequest} xhr
 * @return {void}
 */
Phonon.PhononAjaxObject.prototype.success = function(res, xhr) {};

/**
 * @param {?} res
 * @param {string} flagError
 * @param {!XMLHttpRequest} xhr
 * @return {void}
 */
Phonon.PhononAjaxObject.prototype.error = function(res, flagError, xhr) {};
/**
 * @record
 * @struct
 */
Phonon.PhononAjaxReturnObject = function() {};

/**
 * @return {void}
 */
Phonon.PhononAjaxReturnObject.prototype.cancel = function() {};

/** @typedef {string} */
Phonon.PhononColor;

/** @typedef {string} */
Phonon.PhononPopoverDirection;
/**
 * @record
 * @struct
 */
Phonon.PhononPanelComponent = function() {};

/**
 * @return {void}
 */
Phonon.PhononPanelComponent.prototype.open = function() {};

/**
 * @return {void}
 */
Phonon.PhononPanelComponent.prototype.close = function() {};
/**
 * @record
 * @struct
 */
Phonon.PhononSidePanelComponent = function() {};

/**
 * @return {void}
 */
Phonon.PhononSidePanelComponent.prototype.open = function() {};

/**
 * @return {void}
 */
Phonon.PhononSidePanelComponent.prototype.close = function() {};
/**
 * @record
 * @struct
 */
Phonon.PhononDialogComponent = function() {};

/**
 * @param {string} event
 * @param {function(?): void} callback
 * @return {!Phonon.PhononDialogComponent}
 */
Phonon.PhononDialogComponent.prototype.on = function(event, callback) {};
/**
 * @extends {Phonon.PhononDialogComponent}
 * @record
 * @struct
 */
Phonon.PhononCustomDialogComponent = function() {};

/**
 * @return {void}
 */
Phonon.PhononCustomDialogComponent.prototype.open = function() {};

/**
 * @return {void}
 */
Phonon.PhononCustomDialogComponent.prototype.close = function() {};
/**
 * @extends {Phonon.PhononDialogComponent}
 * @record
 * @struct
 */
Phonon.PhononIndicatorComponent = function() {};

/**
 * @return {void}
 */
Phonon.PhononIndicatorComponent.prototype.open = function() {};

/**
 * @return {void}
 */
Phonon.PhononIndicatorComponent.prototype.close = function() {};
/**
 * @record
 * @struct
 */
Phonon.PhononNotifComponent = function() {};

/**
 * @param {string} color
 * @return {!Phonon.PhononNotifComponent}
 */
Phonon.PhononNotifComponent.prototype.setColor = function(color) {};

/**
 * @return {!Phonon.PhononNotifComponent}
 */
Phonon.PhononNotifComponent.prototype.show = function() {};

/**
 * @return {!Phonon.PhononNotifComponent}
 */
Phonon.PhononNotifComponent.prototype.hide = function() {};
/**
 * @record
 * @struct
 */
Phonon.PhononPopoverItem = function() {};
 /** @type {string} */
Phonon.PhononPopoverItem.prototype.text;
 /** @type {string} */
Phonon.PhononPopoverItem.prototype.value;
/**
 * @record
 * @struct
 */
Phonon.PhononPopoverComponent = function() {};

/**
 * @param {(!Array<string>|!Array<!Phonon.PhononPopoverItem>)|!Array<?>} list
 * @param {function(?): void=} itemBuilder
 * @return {!Phonon.PhononPopoverComponent}
 */
Phonon.PhononPopoverComponent.prototype.setList = function(list, itemBuilder) {};

/**
 * @param {(string|!Element)} element
 * @param {boolean=} autoBind
 * @return {!Phonon.PhononPopoverComponent}
 */
Phonon.PhononPopoverComponent.prototype.attachButton = function(element, autoBind) {};

/**
 * @param {string} direction
 * @return {!Phonon.PhononPopoverComponent}
 */
Phonon.PhononPopoverComponent.prototype.open = function(direction) {};

/**
 * @param {(string|!Element)} element
 * @return {!Phonon.PhononPopoverComponent}
 */
Phonon.PhononPopoverComponent.prototype.openFrom = function(element) {};

/**
 * @return {void}
 */
Phonon.PhononPopoverComponent.prototype.close = function() {};

/**
 * @param {function(!Phonon.PhononPopoverItem): void} callback
 * @return {!Phonon.PhononPopoverComponent}
 */
Phonon.PhononPopoverComponent.prototype.onItemChanged = function(callback) {};
/**
 * @record
 * @struct
 */
Phonon.PhononPreloaderComponent = function() {};

/**
 * @return {void}
 */
Phonon.PhononPreloaderComponent.prototype.show = function() {};

/**
 * @return {void}
 */
Phonon.PhononPreloaderComponent.prototype.hide = function() {};
/**
 * @record
 * @struct
 */
Phonon.PhononTabComponent = function() {};

/**
 * @param {string} pageName
 * @param {number} tabNumber
 * @return {void}
 */
Phonon.PhononTabComponent.prototype.setCurrentTab = function(pageName, tabNumber) {};

/**
 * @param {string=} page
 * @return {void}
 */
Phonon.PhononTabComponent.prototype.init = function(page) {};

/**
 * @param {string} event
 * @param {function(!Phonon.PhononCustomWindowEvent): void} callback
 * @param {boolean=} useCapture
 * @return {void}
 */
Document.prototype.on = function(event, callback, useCapture) {};

/**
 * @param {string} event
 * @param {function(!Phonon.PhononCustomWindowEvent): void} callback
 * @param {boolean=} useCapture
 * @return {void}
 */
Document.prototype.off = function(event, callback, useCapture) {};
 /** @type {!Phonon.Phonon} */
Window.prototype.phonon;

/**
 * @param {string} event
 * @param {function(!Phonon.PhononCustomWindowEvent): void} callback
 * @param {boolean=} useCapture
 * @return {void}
 */
Window.prototype.on = function(event, callback, useCapture) {};

/**
 * @param {string} event
 * @param {function(!Phonon.PhononCustomWindowEvent): void} callback
 * @param {boolean=} useCapture
 * @return {void}
 */
Window.prototype.off = function(event, callback, useCapture) {};

/**
 * @param {string} event
 * @param {function(?): void} callback
 * @param {boolean=} useCapture
 * @return {void}
 */
Element.prototype.on = function(event, callback, useCapture) {};

/**
 * @param {string} event
 * @param {function(?): void} callback
 * @param {boolean=} useCapture
 * @return {void}
 */
Element.prototype.off = function(event, callback, useCapture) {};

/**
 * @param {string} event
 * @param {function(?): void} callback
 * @param {boolean=} useCapture
 * @return {void}
 */
NodeList.prototype.on = function(event, callback, useCapture) {};

/**
 * @param {string} event
 * @param {function(?): void} callback
 * @param {boolean=} useCapture
 * @return {void}
 */
NodeList.prototype.off = function(event, callback, useCapture) {};
 /** @type {!Phonon.Phonon} */
var phonon;
