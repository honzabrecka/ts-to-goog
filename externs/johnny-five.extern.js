/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/johnny-five/index.d.ts:
/**
 * @record
 * @struct
 */
function AccelerometerOption() {}
 /** @type {string} */
AccelerometerOption.prototype.controller;
/**
 * @record
 * @struct
 */
function AccelerometerGeneralOption() {}
 /** @type {string} */
AccelerometerGeneralOption.prototype.controller;
/**
 * @extends {AccelerometerGeneralOption}
 * @record
 * @struct
 */
function AccelerometerAnalogOption() {}
 /** @type {!Array<string>} */
AccelerometerAnalogOption.prototype.pins;
 /** @type {number} */
AccelerometerAnalogOption.prototype.sensitivity;
 /** @type {number} */
AccelerometerAnalogOption.prototype.aref;
 /** @type {(number|!Array<number>)} */
AccelerometerAnalogOption.prototype.zeroV;
 /** @type {boolean} */
AccelerometerAnalogOption.prototype.autoCalibrate;
/**
 * @extends {AccelerometerGeneralOption}
 * @record
 * @struct
 */
function AccelerometerMPU6050Option() {}
 /** @type {number} */
AccelerometerMPU6050Option.prototype.sensitivity;
/**
 * @extends {AccelerometerGeneralOption}
 * @record
 * @struct
 */
function AccelerometerMMA7361Option() {}
 /** @type {(string|number)} */
AccelerometerMMA7361Option.prototype.sleepPin;

/**
 * @constructor
 * @struct
 * @param {?} option
 */
function Accelerometer(option) {}

/**
 * @param {string} event
 * @param {function(): void|function(?): void} cb
 * @return {Accelerometer}
 */
Accelerometer.prototype.on = function(event, cb) {};

/**
 * @param {string} name
 * @return {void}
 */
Accelerometer.prototype.hasAxis = function(name) {};

/**
 * @return {void}
 */
Accelerometer.prototype.enable = function() {};

/**
 * @return {void}
 */
Accelerometer.prototype.disable = function() {};

/**
 * @constructor
 * @struct
 * @param {(!Servo|!Array<!Servo>)} option
 */
function Animation(option) {}
 /** @type {number} */
Animation.prototype.target;
 /** @type {number} */
Animation.prototype.duration;
 /** @type {!Array<number>} */
Animation.prototype.cuePoints;
 /** @type {number} */
Animation.prototype.keyFrames;
 /** @type {string} */
Animation.prototype.easing;
 /** @type {boolean} */
Animation.prototype.loop;
 /** @type {number} */
Animation.prototype.loopback;
 /** @type {boolean} */
Animation.prototype.metronomic;
 /** @type {number} */
Animation.prototype.progress;
 /** @type {number} */
Animation.prototype.currentSpeed;
 /** @type {number} */
Animation.prototype.fps;

/**
 * @param {?} segment
 * @return {void}
 */
Animation.prototype.enqueue = function(segment) {};

/**
 * @return {void}
 */
Animation.prototype.play = function() {};

/**
 * @return {void}
 */
Animation.prototype.pause = function() {};

/**
 * @return {void}
 */
Animation.prototype.stop = function() {};

/**
 * @return {void}
 */
Animation.prototype.next = function() {};

/**
 * @param {!Array<number>} speed
 * @return {void}
 */
Animation.prototype.speed = function(speed) {};
/**
 * @record
 * @struct
 */
function ButtonOptions() {}
 /** @type {(string|number)} */
ButtonOptions.prototype.pin;
 /** @type {boolean} */
ButtonOptions.prototype.invert;
 /** @type {boolean} */
ButtonOptions.prototype.isPullup;
 /** @type {number} */
ButtonOptions.prototype.holdtime;

/**
 * @constructor
 * @struct
 * @param {(string|number|?)} pin
 */
function Button(pin) {}

/**
 * @param {string} event
 * @param {function(): void|function(number): void} cb
 * @return {Button}
 */
Button.prototype.on = function(event, cb) {};
/**
 * @record
 * @struct
 */
function BoardOptions() {}
 /** @type {(string|number)} */
BoardOptions.prototype.id;
 /** @type {?} */
BoardOptions.prototype.port;
 /** @type {boolean} */
BoardOptions.prototype.repl;
/**
 * @record
 * @struct
 */
function Repl() {}

/**
 * @param {?} object
 * @return {void}
 */
Repl.prototype.inject = function(object) {};

/**
 * @constructor
 * @struct
 * @param {?=} option
 */
function Board(option) {}
 /** @type {boolean} */
Board.prototype.isReady;
 /** @type {?} */
Board.prototype.io;
 /** @type {string} */
Board.prototype.id;
 /** @type {!Array<!Pin>} */
Board.prototype.pins;
 /** @type {string} */
Board.prototype.port;
 /** @type {?} */
Board.prototype.inject;

/**
 * @param {string} event
 * @param {function(): void} cb
 * @return {Board}
 */
Board.prototype.on = function(event, cb) {};

/**
 * @param {number} pin
 * @param {number} mode
 * @return {void}
 */
Board.prototype.pinMode = function(pin, mode) {};

/**
 * @param {number} pin
 * @param {number} value
 * @return {void}
 */
Board.prototype.analogWrite = function(pin, value) {};

/**
 * @param {number} pin
 * @param {function(number): void} cb
 * @return {void}
 */
Board.prototype.analogRead = function(pin, cb) {};

/**
 * @param {number} pin
 * @param {number} value
 * @return {void}
 */
Board.prototype.digitalWrite = function(pin, value) {};

/**
 * @param {number} pin
 * @param {function(number): void} cb
 * @return {void}
 */
Board.prototype.digitalRead = function(pin, cb) {};

/**
 * @param {!Pin} dataPin
 * @param {!Pin} clockPin
 * @param {boolean} isBigEndian
 * @param {number} value
 * @return {void}
 */
Board.prototype.shiftOut = function(dataPin, clockPin, isBigEndian, value) {};

/**
 * @param {number} ms
 * @param {function(): void} cb
 * @return {void}
 */
Board.prototype.wait = function(ms, cb) {};

/**
 * @param {number} ms
 * @param {function(): void} cb
 * @return {void}
 */
Board.prototype.loop = function(ms, cb) {};
/**
 * @record
 * @struct
 */
function CompassOptions() {}
 /** @type {string} */
CompassOptions.prototype.controller;
 /** @type {number} */
CompassOptions.prototype.gauss;

/**
 * @constructor
 * @struct
 * @param {?} option
 */
function Compass(option) {}

/**
 * @param {string} event
 * @param {function(): void|function(?): void} cb
 * @return {Compass}
 */
Compass.prototype.on = function(event, cb) {};
/**
 * @record
 * @struct
 */
function ESCOption() {}
 /** @type {(string|number)} */
ESCOption.prototype.pin;
 /** @type {!Array<number>} */
ESCOption.prototype.range;
 /** @type {number} */
ESCOption.prototype.startAt;

/**
 * @constructor
 * @struct
 * @param {(string|number|?)} option
 */
function ESC(option) {}

/**
 * @param {number} value
 * @return {void}
 */
ESC.prototype.speed = function(value) {};

/**
 * @return {void}
 */
ESC.prototype.min = function() {};

/**
 * @return {void}
 */
ESC.prototype.max = function() {};

/**
 * @return {void}
 */
ESC.prototype.stop = function() {};
/**
 * @record
 * @struct
 */
function GyroGeneralOption() {}
 /** @type {string} */
GyroGeneralOption.prototype.controller;
/**
 * @extends {GyroGeneralOption}
 * @record
 * @struct
 */
function GyroAnalogOption() {}
 /** @type {!Array<string>} */
GyroAnalogOption.prototype.pins;
 /** @type {number} */
GyroAnalogOption.prototype.sensitivity;
 /** @type {number} */
GyroAnalogOption.prototype.resolution;
/**
 * @extends {GyroGeneralOption}
 * @record
 * @struct
 */
function GyroMPU6050Option() {}
 /** @type {number} */
GyroMPU6050Option.prototype.sensitivity;

/**
 * @constructor
 * @struct
 * @param {?} option
 */
function Gyro(option) {}

/**
 * @param {string} event
 * @param {function(): void|function(?): void} cb
 * @return {Gyro}
 */
Gyro.prototype.on = function(event, cb) {};

/**
 * @return {void}
 */
Gyro.prototype.recalibrate = function() {};
/**
 * @record
 * @struct
 */
function IMUGeneralOption() {}
 /** @type {string} */
IMUGeneralOption.prototype.controller;
 /** @type {number} */
IMUGeneralOption.prototype.freq;
/**
 * @extends {IMUGeneralOption}
 * @record
 * @struct
 */
function IMUMPU6050Option() {}
 /** @type {number} */
IMUMPU6050Option.prototype.address;

/**
 * @constructor
 * @struct
 * @param {?} option
 */
function IMU(option) {}

/**
 * @param {string} event
 * @param {function(): void|function(?): void} cb
 * @return {IMU}
 */
IMU.prototype.on = function(event, cb) {};
/** @const */
var IR = {};
/**
 * @record
 * @struct
 */
IR.MotionOption = function() {};
 /** @type {(string|number)} */
IR.MotionOption.prototype.pin;

/**
 * @constructor
 * @struct
 * @param {(number|!IR.MotionOption)} option
 */
IR.Motion = function(option) {};

/**
 * @param {string} event
 * @param {function(): void|function(?): void} cb
 * @return {Motion}
 */
IR.Motion.prototype.on = function(event, cb) {};
/**
 * @record
 * @struct
 */
IR.PloximityOption = function() {};
 /** @type {(string|number)} */
IR.PloximityOption.prototype.pin;
 /** @type {string} */
IR.PloximityOption.prototype.controller;

/**
 * @constructor
 * @struct
 * @param {(number|!IR.PloximityOption)} option
 */
IR.Proximity = function(option) {};

/**
 * @param {string} event
 * @param {function(): void|function(?): void} cb
 * @return {Proximity}
 */
IR.Proximity.prototype.on = function(event, cb) {};
/**
 * @record
 * @struct
 */
IR.ArrayOption = function() {};
 /** @type {(!Array<string>|!Array<number>)} */
IR.ArrayOption.prototype.pins;
 /** @type {(string|number)} */
IR.ArrayOption.prototype.emitter;
 /** @type {number} */
IR.ArrayOption.prototype.freq;
/**
 * @record
 * @struct
 */
IR.LoadCalibrationOption = function() {};
 /** @type {!Array<number>} */
IR.LoadCalibrationOption.prototype.min;
 /** @type {!Array<number>} */
IR.LoadCalibrationOption.prototype.max;
/** @const */
IR.Reflect = {};

/**
 * @constructor
 * @struct
 * @param {!IR.ArrayOption} option
 */
IR.Reflect.Array = function(option) {};

/**
 * @return {void}
 */
IR.Reflect.Array.prototype.enable = function() {};

/**
 * @return {void}
 */
IR.Reflect.Array.prototype.disable = function() {};

/**
 * @return {void}
 */
IR.Reflect.Array.prototype.calibrate = function() {};

/**
 * @param {function(): void} predicate
 * @return {void}
 */
IR.Reflect.Array.prototype.calibrateUntil = function(predicate) {};

/**
 * @param {!IR.LoadCalibrationOption} option
 * @return {void}
 */
IR.Reflect.Array.prototype.loadCalibration = function(option) {};

/**
 * @param {string} event
 * @param {function(): void|function(?): void} cb
 * @return {Array}
 */
IR.Reflect.Array.prototype.on = function(event, cb) {};
/**
 * @record
 * @struct
 */
function JoystickOption() {}
 /** @type {!Array<string>} */
JoystickOption.prototype.pins;

/**
 * @constructor
 * @struct
 * @param {?} option
 */
function Joystick(option) {}
 /** @type {!Array<number>} */
Joystick.prototype.axis;
 /** @type {!Array<number>} */
Joystick.prototype.raw;

/**
 * @param {string} event
 * @param {function(): void|function(?): void|function(!Error, !Date): void} cb
 * @return {Joystick}
 */
Joystick.prototype.on = function(event, cb) {};
/**
 * @record
 * @struct
 */
function LCDGeneralOption() {}
 /** @type {number} */
LCDGeneralOption.prototype.rows;
 /** @type {number} */
LCDGeneralOption.prototype.cols;
/**
 * @extends {LCDGeneralOption}
 * @record
 * @struct
 */
function LCDI2COption() {}
 /** @type {string} */
LCDI2COption.prototype.controller;
 /** @type {number} */
LCDI2COption.prototype.backlight;
/**
 * @extends {LCDGeneralOption}
 * @record
 * @struct
 */
function LCDParallelOption() {}
 /** @type {!Array<?>} */
LCDParallelOption.prototype.pins;
 /** @type {number} */
LCDParallelOption.prototype.backlight;

/**
 * @constructor
 * @struct
 * @param {?} option
 */
function LCD(option) {}

/**
 * @param {string} message
 * @return {void}
 */
LCD.prototype.print = function(message) {};

/**
 * @param {string} char
 * @return {void}
 */
LCD.prototype.useChar = function(char) {};

/**
 * @return {void}
 */
LCD.prototype.clear = function() {};

/**
 * @param {number} row
 * @param {number} col
 * @return {void}
 */
LCD.prototype.cursor = function(row, col) {};

/**
 * @return {void}
 */
LCD.prototype.home = function() {};

/**
 * @return {void}
 */
LCD.prototype.display = function() {};

/**
 * @return {void}
 */
LCD.prototype.noDisplay = function() {};

/**
 * @return {void}
 */
LCD.prototype.blink = function() {};

/**
 * @return {void}
 */
LCD.prototype.noBlink = function() {};

/**
 * @return {void}
 */
LCD.prototype.autoscroll = function() {};

/**
 * @return {void}
 */
LCD.prototype.noAutoscroll = function() {};
/**
 * @record
 * @struct
 */
function LedOption() {}
 /** @type {number} */
LedOption.prototype.pin;
 /** @type {string} */
LedOption.prototype.type;
 /** @type {string} */
LedOption.prototype.controller;
 /** @type {number} */
LedOption.prototype.address;
 /** @type {boolean} */
LedOption.prototype.isAnode;

/**
 * @constructor
 * @struct
 * @param {(number|?)} option
 */
function Led(option) {}

/**
 * @return {void}
 */
Led.prototype.on = function() {};

/**
 * @return {void}
 */
Led.prototype.off = function() {};

/**
 * @return {void}
 */
Led.prototype.toggle = function() {};

/**
 * @param {number} ms
 * @return {void}
 */
Led.prototype.strobe = function(ms) {};

/**
 * @param {number=} ms
 * @return {void}
 */
Led.prototype.blink = function(ms) {};

/**
 * @param {number} val
 * @return {void}
 */
Led.prototype.brightness = function(val) {};

/**
 * @param {number} brightness
 * @param {number} ms
 * @return {void}
 */
Led.prototype.fade = function(brightness, ms) {};

/**
 * @param {number} ms
 * @return {void}
 */
Led.prototype.fadeIn = function(ms) {};

/**
 * @param {number} ms
 * @return {void}
 */
Led.prototype.fadeOut = function(ms) {};

/**
 * @param {number} ms
 * @return {void}
 */
Led.prototype.pulse = function(ms) {};

/**
 * @param {number} ms
 * @return {void}
 */
Led.prototype.stop = function(ms) {};
/**
 * @record
 * @struct
 */
Led.DigitsOption = function() {};
 /** @type {?} */
Led.DigitsOption.prototype.pins;
 /** @type {number} */
Led.DigitsOption.prototype.devices;

/**
 * @constructor
 * @struct
 * @param {!Led.DigitsOption} option
 */
Led.Digits = function(option) {};

/**
 * @param {number=} index
 * @return {void}
 */
Led.Digits.prototype.on = function(index) {};

/**
 * @param {number=} index
 * @return {void}
 */
Led.Digits.prototype.off = function(index) {};

/**
 * @param {number=} index
 * @return {void}
 */
Led.Digits.prototype.clear = function(index) {};

/**
 * @param {number} value_or_index
 * @param {number=} value
 * @return {void}
 */
Led.Digits.prototype.brightness = function(value_or_index, value) {};

/**
 * @param {number} position_or_index
 * @param {number} character_or_position
 * @param {number=} character
 * @return {void}
 */
Led.Digits.prototype.draw = function(position_or_index, character_or_position, character) {};
/**
 * @record
 * @struct
 */
Led.MatrixOption = function() {};
 /** @type {?} */
Led.MatrixOption.prototype.pins;
 /** @type {number} */
Led.MatrixOption.prototype.devices;
/**
 * @record
 * @struct
 */
Led.MatrixIC2Option = function() {};
 /** @type {string} */
Led.MatrixIC2Option.prototype.controller;
 /** @type {!Array<?>} */
Led.MatrixIC2Option.prototype.addresses;
 /** @type {boolean} */
Led.MatrixIC2Option.prototype.isBicolor;
 /** @type {?} */
Led.MatrixIC2Option.prototype.dims;
 /** @type {number} */
Led.MatrixIC2Option.prototype.rotation;

/**
 * @constructor
 * @struct
 * @param {(!Led.MatrixOption|!Led.MatrixIC2Option)} option
 */
Led.Matrix = function(option) {};

/**
 * @param {number=} index
 * @return {void}
 */
Led.Matrix.prototype.on = function(index) {};

/**
 * @param {number=} index
 * @return {void}
 */
Led.Matrix.prototype.off = function(index) {};

/**
 * @param {number=} index
 * @return {void}
 */
Led.Matrix.prototype.clear = function(index) {};

/**
 * @param {number} value_or_index
 * @param {number=} value
 * @return {void}
 */
Led.Matrix.prototype.brightness = function(value_or_index, value) {};

/**
 * @param {number} row_or_index
 * @param {number} col_or_row
 * @param {?|number} state_or_col
 * @param {?=} state
 * @return {void}
 */
Led.Matrix.prototype.led = function(row_or_index, col_or_row, state_or_col, state) {};

/**
 * @param {number} row_or_index
 * @param {number} val_or_row
 * @param {number=} val
 * @return {void}
 */
Led.Matrix.prototype.row = function(row_or_index, val_or_row, val) {};

/**
 * @param {number} row_or_index
 * @param {number} val_or_row
 * @param {number=} val
 * @return {void}
 */
Led.Matrix.prototype.column = function(row_or_index, val_or_row, val) {};

/**
 * @param {number} position_or_index
 * @param {number} character_or_position
 * @param {number=} character
 * @return {void}
 */
Led.Matrix.prototype.draw = function(position_or_index, character_or_position, character) {};
/**
 * @record
 * @struct
 */
Led.RGBOption = function() {};
 /** @type {!Array<number>} */
Led.RGBOption.prototype.pins;
 /** @type {boolean} */
Led.RGBOption.prototype.isAnode;
 /** @type {string} */
Led.RGBOption.prototype.controller;

/**
 * @constructor
 * @struct
 * @param {!Led.RGBOption} option
 */
Led.RGB = function(option) {};

/**
 * @return {void}
 */
Led.RGB.prototype.on = function() {};

/**
 * @return {void}
 */
Led.RGB.prototype.off = function() {};

/**
 * @param {number} value
 * @return {void}
 */
Led.RGB.prototype.color = function(value) {};

/**
 * @return {void}
 */
Led.RGB.prototype.toggle = function() {};

/**
 * @param {number} ms
 * @return {void}
 */
Led.RGB.prototype.strobe = function(ms) {};

/**
 * @param {number} value
 * @return {void}
 */
Led.RGB.prototype.brightness = function(value) {};

/**
 * @param {number} ms
 * @return {void}
 */
Led.RGB.prototype.fadeIn = function(ms) {};

/**
 * @param {number} ms
 * @return {void}
 */
Led.RGB.prototype.fadeOut = function(ms) {};

/**
 * @param {number} ms
 * @return {void}
 */
Led.RGB.prototype.pulse = function(ms) {};

/**
 * @param {number} ms
 * @return {void}
 */
Led.RGB.prototype.stop = function(ms) {};
/**
 * @record
 * @struct
 */
function MotorOption() {}
 /** @type {?} */
MotorOption.prototype.pins;
 /** @type {?} */
MotorOption.prototype.current;
 /** @type {boolean} */
MotorOption.prototype.invertPWM;
 /** @type {number} */
MotorOption.prototype.address;
 /** @type {string} */
MotorOption.prototype.controller;
 /** @type {?} */
MotorOption.prototype.register;
 /** @type {?} */
MotorOption.prototype.bits;

/**
 * @constructor
 * @struct
 * @param {(!Array<number>|?)} option
 */
function Motor(option) {}

/**
 * @param {number} speed
 * @return {void}
 */
Motor.prototype.forward = function(speed) {};

/**
 * @param {number} speed
 * @return {void}
 */
Motor.prototype.fwd = function(speed) {};

/**
 * @param {number} speed
 * @return {void}
 */
Motor.prototype.reverse = function(speed) {};

/**
 * @param {number} speed
 * @return {void}
 */
Motor.prototype.rev = function(speed) {};

/**
 * @param {number=} speed
 * @return {void}
 */
Motor.prototype.start = function(speed) {};

/**
 * @return {void}
 */
Motor.prototype.stop = function() {};

/**
 * @return {void}
 */
Motor.prototype.brake = function() {};

/**
 * @return {void}
 */
Motor.prototype.release = function() {};
/**
 * @record
 * @struct
 */
function PiezoOption() {}
 /** @type {number} */
PiezoOption.prototype.pin;

/**
 * @constructor
 * @struct
 * @param {(number|?)} option
 */
function Piezo(option) {}

/**
 * @param {number} frequency
 * @param {number} duration
 * @return {void}
 */
Piezo.prototype.frequency = function(frequency, duration) {};

/**
 * @param {?} tune
 * @param {function(): void=} cb
 * @return {void}
 */
Piezo.prototype.play = function(tune, cb) {};

/**
 * @param {number} frequency
 * @param {number} duration
 * @return {void}
 */
Piezo.prototype.tone = function(frequency, duration) {};

/**
 * @return {void}
 */
Piezo.prototype.noTone = function() {};

/**
 * @return {void}
 */
Piezo.prototype.off = function() {};
/**
 * @record
 * @struct
 */
function PinOption() {}
 /** @type {(string|number)} */
PinOption.prototype.id;
 /** @type {(string|number)} */
PinOption.prototype.pin;
 /** @type {string} */
PinOption.prototype.type;
/**
 * @record
 * @struct
 */
function PinState() {}
 /** @type {!Array<number>} */
PinState.prototype.supportedModes;
 /** @type {number} */
PinState.prototype.mode;
 /** @type {number} */
PinState.prototype.value;
 /** @type {number} */
PinState.prototype.report;
 /** @type {number} */
PinState.prototype.analogChannel;

/**
 * @constructor
 * @struct
 * @param {(string|number|?)} option
 */
function Pin(option) {}

/**
 * @param {function(?): void} cb
 * @return {void}
 */
Pin.prototype.query = function(cb) {};

/**
 * @return {void}
 */
Pin.prototype.high = function() {};

/**
 * @return {void}
 */
Pin.prototype.low = function() {};

/**
 * @param {number} value
 * @return {void}
 */
Pin.prototype.write = function(value) {};

/**
 * @param {function(number): void} cb
 * @return {void}
 */
Pin.prototype.read = function(cb) {};

/**
 * @param {number} pin
 * @param {number} value
 * @return {void}
 */
Pin.write = function(pin, value) {};

/**
 * @param {number} pin
 * @param {function(number): void} cb
 * @return {void}
 */
Pin.read = function(pin, cb) {};
/**
 * @record
 * @struct
 */
function PingOption() {}
 /** @type {(string|number)} */
PingOption.prototype.pin;
 /** @type {number} */
PingOption.prototype.freq;
 /** @type {number} */
PingOption.prototype.pulse;

/**
 * @constructor
 * @struct
 * @param {(number|?)} option
 */
function Ping(option) {}
/**
 * @record
 * @struct
 */
function RelayOption() {}
 /** @type {(string|number)} */
RelayOption.prototype.pin;
 /** @type {string} */
RelayOption.prototype.type;

/**
 * @constructor
 * @struct
 * @param {(number|?)} option
 */
function Relay(option) {}

/**
 * @return {void}
 */
Relay.prototype.open = function() {};

/**
 * @return {void}
 */
Relay.prototype.close = function() {};

/**
 * @return {void}
 */
Relay.prototype.toggle = function() {};
/**
 * @record
 * @struct
 */
function SensorOption() {}
 /** @type {(string|number)} */
SensorOption.prototype.pin;
 /** @type {boolean} */
SensorOption.prototype.freq;
 /** @type {number} */
SensorOption.prototype.threshold;

/**
 * @constructor
 * @struct
 * @param {(string|number|?)} option
 */
function Sensor(option) {}

/**
 * @param {number|!Array<number>=} low_or_range
 * @param {number=} high
 * @return {!Sensor}
 */
Sensor.prototype.scale = function(low_or_range, high) {};

/**
 * @param {number} barrier
 * @return {boolean}
 */
Sensor.prototype.booleanAt = function(barrier) {};

/**
 * @param {!Array<number>} range
 * @param {function(): void} cb
 * @return {void}
 */
Sensor.prototype.within = function(range, cb) {};

/**
 * @param {string} event
 * @param {function(): void|function(?): void} cb
 * @return {Sensor}
 */
Sensor.prototype.on = function(event, cb) {};
/**
 * @record
 * @struct
 */
function ServoGeneralOption() {}
 /** @type {(string|number)} */
ServoGeneralOption.prototype.pin;
 /** @type {!Array<number>} */
ServoGeneralOption.prototype.range;
 /** @type {string} */
ServoGeneralOption.prototype.type;
 /** @type {number} */
ServoGeneralOption.prototype.startAt;
 /** @type {boolean} */
ServoGeneralOption.prototype.isInverted;
 /** @type {boolean} */
ServoGeneralOption.prototype.center;
 /** @type {string} */
ServoGeneralOption.prototype.controller;
/**
 * @extends {ServoGeneralOption}
 * @record
 * @struct
 */
function ServoPCA9685Option() {}
 /** @type {number} */
ServoPCA9685Option.prototype.address;
/**
 * @record
 * @struct
 */
function ServoSweepOpts() {}
 /** @type {!Array<number>} */
ServoSweepOpts.prototype.range;
 /** @type {number} */
ServoSweepOpts.prototype.interval;
 /** @type {number} */
ServoSweepOpts.prototype.step;

/**
 * @constructor
 * @struct
 * @param {(string|number|?)} option
 */
function Servo(option) {}

/**
 * @param {number} degrees
 * @param {number=} ms
 * @param {number=} rage
 * @return {void}
 */
Servo.prototype.to = function(degrees, ms, rage) {};

/**
 * @return {void}
 */
Servo.prototype.min = function() {};

/**
 * @return {void}
 */
Servo.prototype.max = function() {};

/**
 * @return {void}
 */
Servo.prototype.center = function() {};

/**
 * @param {!Array<number>|?=} range_or_opt
 * @return {void}
 */
Servo.prototype.sweep = function(range_or_opt) {};

/**
 * @return {void}
 */
Servo.prototype.stop = function() {};

/**
 * @param {number} speed
 * @return {void}
 */
Servo.prototype.cw = function(speed) {};

/**
 * @param {number} speed
 * @return {void}
 */
Servo.prototype.ccw = function(speed) {};

/**
 * @param {string} event
 * @param {function(): void} cb
 * @return {Servo}
 */
Servo.prototype.on = function(event, cb) {};
/**
 * @record
 * @struct
 */
function ShiftRegisterOption() {}
 /** @type {?} */
ShiftRegisterOption.prototype.pins;

/**
 * @constructor
 * @struct
 * @param {?} option
 */
function ShiftRegister(option) {}

/**
 * @param {...number} value
 * @return {void}
 */
ShiftRegister.prototype.send = function(value) {};
/**
 * @record
 * @struct
 */
function SonarOption() {}
 /** @type {(string|number)} */
SonarOption.prototype.pin;
 /** @type {string} */
SonarOption.prototype.device;
 /** @type {number} */
SonarOption.prototype.freq;
 /** @type {number} */
SonarOption.prototype.threshold;

/**
 * @constructor
 * @struct
 * @param {(string|number|?)} option
 */
function Sonar(option) {}

/**
 * @param {!Array<number>} range
 * @param {function(): void|string} cb_or_unit
 * @param {function(): void=} cb
 * @return {void}
 */
Sonar.prototype.within = function(range, cb_or_unit, cb) {};

/**
 * @param {string} event
 * @param {function(): void|function(?): void} cb
 * @return {Sonar}
 */
Sonar.prototype.on = function(event, cb) {};
/**
 * @record
 * @struct
 */
function StepperOption() {}
 /** @type {?} */
StepperOption.prototype.pins;
 /** @type {number} */
StepperOption.prototype.stepsPerRev;
 /** @type {number} */
StepperOption.prototype.type;
 /** @type {number} */
StepperOption.prototype.rpm;
 /** @type {number} */
StepperOption.prototype.direction;
/** @const */
var Stepper = {};
/**
 * @constructor
 * @struct
 */
Stepper.TYPE = function() {};
 /** @type {number} */
Stepper.TYPE.DRIVER;
 /** @type {number} */
Stepper.TYPE.TWO_WIRE;
 /** @type {number} */
Stepper.TYPE.FOUR_WIRE;

/**
 * @param {?} stepsOrOpts
 * @param {function(): void} cb
 * @return {void}
 */
Stepper.prototype.step = function(stepsOrOpts, cb) {};

/**
 * @param {number=} value
 * @return {!Stepper}
 */
Stepper.prototype.rpm = function(value) {};

/**
 * @param {number=} value
 * @return {!Stepper}
 */
Stepper.prototype.speed = function(value) {};

/**
 * @param {number=} value
 * @return {!Stepper}
 */
Stepper.prototype.direction = function(value) {};

/**
 * @param {number=} value
 * @return {!Stepper}
 */
Stepper.prototype.accel = function(value) {};

/**
 * @param {number=} value
 * @return {!Stepper}
 */
Stepper.prototype.decel = function(value) {};

/**
 * @return {!Stepper}
 */
Stepper.prototype.cw = function() {};

/**
 * @return {!Stepper}
 */
Stepper.prototype.ccw = function() {};

/**
 * @param {!Array<number>} range
 * @param {function(): void|string} cb_or_unit
 * @param {function(): void=} cb
 * @return {void}
 */
Stepper.prototype.within = function(range, cb_or_unit, cb) {};

/**
 * @param {string} event
 * @param {function(): void|function(?): void} cb
 * @return {Stepper}
 */
Stepper.prototype.on = function(event, cb) {};
/**
 * @record
 * @struct
 */
function TemperatureOption() {}
 /** @type {string} */
TemperatureOption.prototype.controller;
 /** @type {(string|number)} */
TemperatureOption.prototype.pin;
 /** @type {?} */
TemperatureOption.prototype.toCelsius;
 /** @type {number} */
TemperatureOption.prototype.freq;

/**
 * @constructor
 * @struct
 * @param {?} option
 */
function Temperature(option) {}

/**
 * @param {string} event
 * @param {function(): void|function(?): void} cb
 * @return {Temperature}
 */
Temperature.prototype.on = function(event, cb) {};
