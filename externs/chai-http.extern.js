/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/chai-http/index.d.ts:
 /** @type {!Chai.ChaiHttpRequest} */
Chai.ChaiStatic.prototype.request;
/**
 * @record
 * @struct
 */
Chai.ChaiHttpRequest = function() {};

/* TODO: CallSignature: Chai */

/**
 * @param {?} server
 * @return {!ChaiHttp.Agent}
 */
Chai.ChaiHttpRequest.prototype.agent = function(server) {};

/**
 * @param {?} promiseConstructor
 * @return {void}
 */
Chai.ChaiHttpRequest.prototype.addPromises = function(promiseConstructor) {};
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.headers;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.json;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.text;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.html;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.redirect;

/**
 * @param {number} code
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.status = function(code) {};

/**
 * @param {string} key
 * @param {(string|!RegExp)=} value
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.header = function(key, value) {};

/**
 * @param {string} location
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.redirectTo = function(location) {};

/**
 * @param {string} key
 * @param {string=} value
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.param = function(key, value) {};

/**
 * @param {string} key
 * @param {string=} value
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.cookie = function(key, value) {};
 /** @type {!Chai.Assertion} */
Chai.TypeComparison.prototype.ip;
/** @const */
var ChaiHttp = {};
/**
 * @record
 * @struct
 */
ChaiHttp.Promise = function() {};

/**
 * @template U
 * @param {function(T): U} onFulfilled
 * @param {function(?): U=} onRejected
 * @return {!ChaiHttp.Promise<U>}
 */
ChaiHttp.Promise.prototype.then = function(onFulfilled, onRejected) {};
/**
 * @record
 * @struct
 */
ChaiHttp.Response = function() {};
 /** @type {?} */
ChaiHttp.Response.prototype.body;
 /** @type {string} */
ChaiHttp.Response.prototype.type;
 /** @type {number} */
ChaiHttp.Response.prototype.status;
 /** @type {string} */
ChaiHttp.Response.prototype.text;
/**
 * @extends {ChaiHttp.FinishedRequest}
 * @record
 * @struct
 */
ChaiHttp.Request = function() {};

/**
 * @param {string} field
 * @param {(string|?)} file
 * @param {string} filename
 * @return {!ChaiHttp.Request}
 */
ChaiHttp.Request.prototype.attach = function(field, file, filename) {};

/**
 * @param {string} field
 * @param {string} val
 * @return {!ChaiHttp.Request}
 */
ChaiHttp.Request.prototype.set = function(field, val) {};

/**
 * @param {?} params
 * @return {!ChaiHttp.Request}
 */
ChaiHttp.Request.prototype.query = function(params) {};

/**
 * @param {?} data
 * @return {!ChaiHttp.Request}
 */
ChaiHttp.Request.prototype.send = function(data) {};

/**
 * @param {string} user
 * @param {string} name
 * @return {!ChaiHttp.Request}
 */
ChaiHttp.Request.prototype.auth = function(user, name) {};

/**
 * @param {string} name
 * @param {string} val
 * @return {!ChaiHttp.Request}
 */
ChaiHttp.Request.prototype.field = function(name, val) {};

/**
 * @return {!ChaiHttp.Request}
 */
ChaiHttp.Request.prototype.buffer = function() {};

/**
 * @param {function(?, !ChaiHttp.Response): void=} callback
 * @return {!ChaiHttp.FinishedRequest<!ChaiHttp.Response>}
 */
ChaiHttp.Request.prototype.end = function(callback) {};
/**
 * @record
 * @struct
 */
ChaiHttp.FinishedRequest = function() {};

/**
 * @template TR1, TR2
 * @param {function(T): (TR1|!PromiseLike<TR1>)=} success
 * @param {function(?): (TR2|!PromiseLike<TR2>)=} failure
 * @return {!ChaiHttp.FinishedRequest<TR1>}
 */
ChaiHttp.FinishedRequest.prototype.then = function(success, failure) {};

/**
 * @param {function(?): void=} failure
 * @return {!ChaiHttp.FinishedRequest}
 */
ChaiHttp.FinishedRequest.prototype.catch = function(failure) {};
/**
 * @record
 * @struct
 */
ChaiHttp.Agent = function() {};

/**
 * @param {string} url
 * @param {function(?, !ChaiHttp.Response): void=} callback
 * @return {!ChaiHttp.Request}
 */
ChaiHttp.Agent.prototype.get = function(url, callback) {};

/**
 * @param {string} url
 * @param {function(?, !ChaiHttp.Response): void=} callback
 * @return {!ChaiHttp.Request}
 */
ChaiHttp.Agent.prototype.post = function(url, callback) {};

/**
 * @param {string} url
 * @param {function(?, !ChaiHttp.Response): void=} callback
 * @return {!ChaiHttp.Request}
 */
ChaiHttp.Agent.prototype.put = function(url, callback) {};

/**
 * @param {string} url
 * @param {function(?, !ChaiHttp.Response): void=} callback
 * @return {!ChaiHttp.Request}
 */
ChaiHttp.Agent.prototype.head = function(url, callback) {};

/**
 * @param {string} url
 * @param {function(?, !ChaiHttp.Response): void=} callback
 * @return {!ChaiHttp.Request}
 */
ChaiHttp.Agent.prototype.del = function(url, callback) {};

/**
 * @param {string} url
 * @param {function(?, !ChaiHttp.Response): void=} callback
 * @return {!ChaiHttp.Request}
 */
ChaiHttp.Agent.prototype.options = function(url, callback) {};

/**
 * @param {string} url
 * @param {function(?, !ChaiHttp.Response): void=} callback
 * @return {!ChaiHttp.Request}
 */
ChaiHttp.Agent.prototype.patch = function(url, callback) {};
/**
 * @record
 * @struct
 */
ChaiHttp.TypeComparison = function() {};
 /** @type {?} */
ChaiHttp.TypeComparison.prototype.ip;

/**
 * @param {?} chai
 * @param {?} utils
 * @return {void}
 */
function chaiHttp(chai, utils) {}

/* TODO: ExportAssignment in  */
