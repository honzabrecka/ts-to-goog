/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/easy-table/index.d.ts:

/**
 * @constructor
 * @struct
 */
function EasyTable() {}
 /** @type {string} */
EasyTable.prototype.separator;
 /** @type {?} */
EasyTable.padLeft;
 /** @type {?} */
EasyTable.aggr;

/**
 * Default printer
 * @param {?} value
 * @return {string}
 */
EasyTable.string = function(value) {};

/**
 * Create a printer which right aligns the content by padding with `ch` on the left
 * 
 * @template T
 * @param {string} ch
 * @return {?}
 */
EasyTable.leftPadder = function(ch) {};

/**
 * Create a printer which pads with `ch` on the right
 * 
 * @template T
 * @param {string} ch
 * @return {?}
 */
EasyTable.rightPadder = function(ch) {};

/**
 * Create a printer for numbers
 * 
 * Will do right alignment and optionally fix the number of digits after decimal point
 * 
 * @param {number=} digits
 * @return {?}
 */
EasyTable.number = function(digits) {};

/**
 * Push the current row to the table and start a new one
 * 
 * @return {!EasyTable}
 */
EasyTable.prototype.newRow = function() {};

/**
 * Write cell in the current row
 * 
 * @template T
 * @param {string} col
 * @param {T} val
 * @param {?=} printer
 * @return {!EasyTable}
 */
EasyTable.prototype.cell = function(col, val, printer) {};

/**
 * Get list of columns in printing order
 * 
 * @return {!Array<string>}
 */
EasyTable.prototype.columns = function() {};

/**
 * Format just rows, i.e. print the table without headers and totals
 * 
 * @return {string}
 */
EasyTable.prototype.print = function() {};

/**
 * Format the table
 * 
 * @return {string}
 */
EasyTable.prototype.toString = function() {};

/**
 * Push delimeter row to the table (with each cell filled with dashs during printing)
 * 
 * @param {!Array<string>=} cols
 * @return {!EasyTable}
 */
EasyTable.prototype.pushDelimeter = function(cols) {};

/**
 * Compute all totals and yield the results to `cb`
 * 
 * @template T
 * @param {function(string, T, ?): void} cb
 * @return {void}
 */
EasyTable.prototype.forEachTotal = function(cb) {};

/**
 * Format the table so that each row represents column and each column represents row
 * 
 * @template T
 * @param {?=} opts
 * @return {string}
 */
EasyTable.prototype.printTransposed = function(opts) {};

/**
 * Sort the table
 * 
 * Sort the table
 * 
 * @template T
 * @param {!Array<string>|?=} cmp
 * @return {!EasyTable}
 */
EasyTable.prototype.sort = function(cmp) {};

/**
 * Add a total for the column
 * 
 * @template T
 * @param {string} col
 * @param {?=} opts
 * @return {!EasyTable}
 */
EasyTable.prototype.total = function(col, opts) {};

/**
 * Print the array or object
 * 
 * @template T
 * @param {(T|!Array<T>)} obj
 * @param {?=} format
 * @param {?=} cb
 * @return {string}
 */
EasyTable.print = function(obj, format, cb) {};

/**
 * Same as `Table.print()` but yields the result to `console.log()`
 * @template T
 * @param {(T|!Array<T>)} obj
 * @param {?=} format
 * @param {?=} cb
 * @return {void}
 */
EasyTable.log = function(obj, format, cb) {};

/**
 * Same as `.toString()` but yields the result to `console.log()`
 * @return {void}
 */
EasyTable.prototype.log = function() {};

/** @typedef {?} */
var CellPrinter;

/** @typedef {?} */
var CompareFunction;

/** @typedef {?} */
var ReduceFunction;

/** @typedef {?} */
var FormatFunction;

/** @typedef {?} */
var TablePostProcessing;
/**
 * @record
 * @struct
 */
function PrintColumnOptions() {}
 /** @type {string} */
PrintColumnOptions.prototype.separator;
 /** @type {?} */
PrintColumnOptions.prototype.namePrinter;
/**
 * @record
 * @struct
 */
function Aggregators() {}
 /** @type {?} */
Aggregators.prototype.sum;
 /** @type {?} */
Aggregators.prototype.avg;

/**
 * Create a printer which formats the value with `printer`,
 * adds the `prefix` to it and right aligns the whole thing
 * 
 * @template T
 * @param {string} prefix
 * @param {?} printer
 * @return {?}
 */
Aggregators.prototype.printer = function(prefix, printer) {};
/**
 * @record
 * @struct
 */
function TotalOptions() {}
 /** @type {?} */
TotalOptions.prototype.reduce;
 /** @type {?} */
TotalOptions.prototype.printer;
 /** @type {?} */
TotalOptions.prototype.init;
/**
 * @record
 * @struct
 */
function FormatObject() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function ColumnFormat() {}
 /** @type {string} */
ColumnFormat.prototype.name;
 /** @type {?} */
ColumnFormat.prototype.printer;

/* TODO: ExportAssignment in  */
