/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/pleasejs/index.d.ts:
 /** @type {!PleaseJS.Please} */
var Please;
/** @const */
var PleaseJS = {};
/**
 * @record
 * @struct
 */
PleaseJS.Please = function() {};

/**
 * 
 * generate and return a random hex string
 * @param {!PleaseJS.MakeColorOption=} options
 * @return {!Array<string>|!Array<!PleaseJS.RGB>|!Array<!PleaseJS.HSV>}
 */
PleaseJS.Please.prototype.make_color = function(options) {};

/**
 * 
 * make a color scheme
 * @param {!PleaseJS.HSV} base_color
 * @param {!PleaseJS.MakeSchemeOption=} options
 * @return {!Array<string>|!Array<!PleaseJS.RGB>|!Array<!PleaseJS.HSV>}
 */
PleaseJS.Please.prototype.make_scheme = function(base_color, options) {};

/**
 * 
 * convert color name into hex string
 * @param {string} name
 * @return {string}
 */
PleaseJS.Please.prototype.NAME_to_HEX = function(name) {};

/**
 * 
 * convert color name into RGB
 * @param {string} name
 * @return {!PleaseJS.RGB}
 */
PleaseJS.Please.prototype.NAME_to_RGB = function(name) {};

/**
 * 
 * convert color name into RGB
 * @param {string} name
 * @return {!PleaseJS.HSV}
 */
PleaseJS.Please.prototype.NAME_to_HSV = function(name) {};

/**
 * 
 * convert HEX into RGB
 * @param {string} hex
 * @return {!PleaseJS.RGB}
 */
PleaseJS.Please.prototype.HEX_to_RGB = function(hex) {};

/**
 * 
 * convert RGB into HEX
 * @param {!PleaseJS.RGB} rgb
 * @return {string}
 */
PleaseJS.Please.prototype.RGB_to_HEX = function(rgb) {};

/**
 * 
 * convert HSV into RGB
 * @param {!PleaseJS.HSV} hsv
 * @return {!PleaseJS.RGB}
 */
PleaseJS.Please.prototype.HSV_to_RGB = function(hsv) {};

/**
 * 
 * convert RGB into HSV
 * @param {!PleaseJS.RGB} rgb
 * @return {!PleaseJS.HSV}
 */
PleaseJS.Please.prototype.RGB_to_HSV = function(rgb) {};

/**
 * 
 * convert HSV into HEX
 * @param {!PleaseJS.HSV} hsv
 * @return {string}
 */
PleaseJS.Please.prototype.HSV_to_HEX = function(hsv) {};

/**
 * 
 * convert HEX into HSV
 * @param {string} hex
 * @return {!PleaseJS.HSV}
 */
PleaseJS.Please.prototype.HEX_to_HSV = function(hex) {};
/**
 * @record
 * @struct
 */
PleaseJS.MakeColorOption = function() {};
 /** @type {number} */
PleaseJS.MakeColorOption.prototype.hue;
 /** @type {number} */
PleaseJS.MakeColorOption.prototype.saturation;
 /** @type {number} */
PleaseJS.MakeColorOption.prototype.value;
 /** @type {string} */
PleaseJS.MakeColorOption.prototype.base_color;
 /** @type {boolean} */
PleaseJS.MakeColorOption.prototype.greyscale;
 /** @type {boolean} */
PleaseJS.MakeColorOption.prototype.grayscale;
 /** @type {boolean} */
PleaseJS.MakeColorOption.prototype.golden;
 /** @type {boolean} */
PleaseJS.MakeColorOption.prototype.full_random;
 /** @type {number} */
PleaseJS.MakeColorOption.prototype.colors_returned;
 /** @type {string} */
PleaseJS.MakeColorOption.prototype.format;
/**
 * @record
 * @struct
 */
PleaseJS.MakeSchemeOption = function() {};
 /** @type {string} */
PleaseJS.MakeSchemeOption.prototype.scheme_type;
 /** @type {string} */
PleaseJS.MakeSchemeOption.prototype.format;
/**
 * @record
 * @struct
 */
PleaseJS.RGB = function() {};
 /** @type {number} */
PleaseJS.RGB.prototype.r;
 /** @type {number} */
PleaseJS.RGB.prototype.g;
 /** @type {number} */
PleaseJS.RGB.prototype.b;
/**
 * @record
 * @struct
 */
PleaseJS.HSV = function() {};
 /** @type {number} */
PleaseJS.HSV.prototype.h;
 /** @type {number} */
PleaseJS.HSV.prototype.s;
 /** @type {number} */
PleaseJS.HSV.prototype.v;
