/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/signalr v1/index.d.ts:
/**
 * @record
 * @struct
 */
function HubMethod() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SignalREvents() {}
 /** @type {string} */
SignalREvents.prototype.onStart;
 /** @type {string} */
SignalREvents.prototype.onStarting;
 /** @type {string} */
SignalREvents.prototype.onReceived;
 /** @type {string} */
SignalREvents.prototype.onError;
 /** @type {string} */
SignalREvents.prototype.onConnectionSlow;
 /** @type {string} */
SignalREvents.prototype.onReconnect;
 /** @type {string} */
SignalREvents.prototype.onStateChanged;
 /** @type {string} */
SignalREvents.prototype.onDisconnect;
/**
 * @record
 * @struct
 */
function SignalRStateChange() {}
 /** @type {number} */
SignalRStateChange.prototype.oldState;
 /** @type {number} */
SignalRStateChange.prototype.newState;
/**
 * @record
 * @struct
 */
function SignalR() {}
 /** @type {!SignalREvents} */
SignalR.prototype.events;
 /** @type {?} */
SignalR.prototype.connectionState;
 /** @type {?} */
SignalR.prototype.transports;
 /** @type {!HubConnection} */
SignalR.prototype.hub;
 /** @type {string} */
SignalR.prototype.id;
 /** @type {boolean} */
SignalR.prototype.logging;
 /** @type {string} */
SignalR.prototype.messageId;
 /** @type {string} */
SignalR.prototype.url;
 /** @type {?} */
SignalR.prototype.qs;
 /** @type {number} */
SignalR.prototype.state;

/* TODO: CallSignature:  */

/**
 * @param {string=} url
 * @return {!SignalR}
 */
SignalR.prototype.hubConnection = function(url) {};

/**
 * @param {string} msg
 * @param {boolean} logging
 * @return {void}
 */
SignalR.prototype.log = function(msg, logging) {};

/**
 * @param {string} url
 * @return {boolean}
 */
SignalR.prototype.isCrossDomain = function(url) {};

/**
 * @param {!SignalR} connection
 * @param {number} expectedState
 * @param {number} newState
 * @return {boolean}
 */
SignalR.prototype.changeState = function(connection, expectedState, newState) {};

/**
 * @param {!SignalR} connection
 * @return {boolean}
 */
SignalR.prototype.isDisconnecting = function(connection) {};

/**
 * @param {function(): void|!ConnectionSettings=} callback_or_settings
 * @param {function(): void=} callback
 * @return {!JQueryPromise<?>}
 */
SignalR.prototype.start = function(callback_or_settings, callback) {};

/**
 * @param {string} data
 * @return {void}
 */
SignalR.prototype.send = function(data) {};

/**
 * @param {boolean=} async
 * @param {boolean=} notifyServer
 * @return {void}
 */
SignalR.prototype.stop = function(async, notifyServer) {};

/**
 * @param {function(): void} handler
 * @return {!SignalR}
 */
SignalR.prototype.starting = function(handler) {};

/**
 * @param {function(?): void} handler
 * @return {!SignalR}
 */
SignalR.prototype.received = function(handler) {};

/**
 * @param {function(!Error): void} handler
 * @return {!SignalR}
 */
SignalR.prototype.error = function(handler) {};

/**
 * @param {function(!SignalRStateChange): void} handler
 * @return {!SignalR}
 */
SignalR.prototype.stateChanged = function(handler) {};

/**
 * @param {function(): void} handler
 * @return {!SignalR}
 */
SignalR.prototype.disconnected = function(handler) {};

/**
 * @param {function(): void} handler
 * @return {!SignalR}
 */
SignalR.prototype.connectionSlow = function(handler) {};

/**
 * @param {function(): void} handler
 * @return {!SignalR}
 */
SignalR.prototype.sending = function(handler) {};

/**
 * @param {function(): void} handler
 * @return {!SignalR}
 */
SignalR.prototype.reconnecting = function(handler) {};

/**
 * @param {function(): void} handler
 * @return {!SignalR}
 */
SignalR.prototype.reconnected = function(handler) {};
/**
 * @record
 * @struct
 */
function HubProxy() {}

/* TODO: CallSignature:  */
 /** @type {?} */
HubProxy.prototype.state;
 /** @type {!HubConnection} */
HubProxy.prototype.connection;
 /** @type {string} */
HubProxy.prototype.hubName;

/**
 * @param {!HubConnection} connection
 * @param {string} hubName
 * @return {void}
 */
HubProxy.prototype.init = function(connection, hubName) {};

/**
 * @return {boolean}
 */
HubProxy.prototype.hasSubscriptions = function() {};

/**
 * @param {string} eventName
 * @param {function(!Array<?>): void} callback
 * @return {!HubProxy}
 */
HubProxy.prototype.on = function(eventName, callback) {};

/**
 * @param {string} eventName
 * @param {function(!Array<?>): void} callback
 * @return {!HubProxy}
 */
HubProxy.prototype.off = function(eventName, callback) {};

/**
 * @param {string} methodName
 * @param {...?} args
 * @return {!JQueryDeferred<?>}
 */
HubProxy.prototype.invoke = function(methodName, args) {};
/**
 * @record
 * @struct
 */
function HubConnectionSettings() {}
 /** @type {string} */
HubConnectionSettings.prototype.queryString;
 /** @type {boolean} */
HubConnectionSettings.prototype.logging;
 /** @type {boolean} */
HubConnectionSettings.prototype.useDefaultPath;
/**
 * @extends {SignalR}
 * @record
 * @struct
 */
function HubConnection() {}
 /** @type {?} */
HubConnection.prototype.proxies;
 /** @type {{name: string, supportsKeepAlive: function(): boolean}} */
HubConnection.prototype.transport;

/**
 * @param {function({Id: ?, Method: ?, Hub: ?, State: ?, Args: ?}): void} callback
 * @return {!HubConnection}
 */
HubConnection.prototype.received = function(callback) {};

/**
 * @param {string} hubName
 * @return {!HubProxy}
 */
HubConnection.prototype.createHubProxy = function(hubName) {};
/**
 * @record
 * @struct
 */
function SignalRfn() {}

/**
 * @param {?} url
 * @param {?} qs
 * @param {?} logging
 * @return {?}
 */
SignalRfn.prototype.init = function(url, qs, logging) {};
/**
 * @record
 * @struct
 */
function ConnectionSettings() {}
 /** @type {?} */
ConnectionSettings.prototype.transport;
 /** @type {?} */
ConnectionSettings.prototype.callback;
 /** @type {boolean} */
ConnectionSettings.prototype.waitForPageLoad;
 /** @type {boolean} */
ConnectionSettings.prototype.jsonp;
 /** @type {!SignalR} */
JQueryStatic.prototype.signalR;
 /** @type {!SignalR} */
JQueryStatic.prototype.connection;

/**
 * @param {string=} url
 * @param {!HubConnectionSettings=} options
 * @return {!HubConnection}
 */
JQueryStatic.prototype.hubConnection = function(url, options) {};
