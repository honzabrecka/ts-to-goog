/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/electron-settings v2/index.d.ts:

/* TODO: ImportDeclaration in  */
 /** @type {!Settings} */
var SettingsInstance;

/* TODO: ExportAssignment in  */
/**
 * @extends {EventEmitter}
 * @constructor
 * @struct
 */
function Settings() {}

/**
 * Globally configures default options.
 * 
 * @throws if options is not an object.
 * @param {!ElectronSettings.Options} options
 * @return {void}
 */
Settings.prototype.configure = function(options) {};

/**
 * Globally configures default settings.
 * 
 * If the settings file has not been created yet, these defaults will be applied,
 * but only if settings.defaults is called before making any other calls that
 * interact with the file system, such as has(), get(), or set().
 * 
 * @throws if defaults is not an object.
 * @param {?} defaults The defaults object.
 * @return {void}
 */
Settings.prototype.defaults = function(defaults) {};

/**
 * Returns a promise whose first argument is a boolean indicating if the key path exists within the settings object.
 * For synchronous operation, use hasSync().
 * 
 * @throws if key path is not a string.
 * @see hasSync
 * @param {string} keyPath The path to the key that we wish to check exists within the settings object.
 * @return {!Promise<boolean>}
 */
Settings.prototype.has = function(keyPath) {};

/**
 * The synchronous version of has().
 * 
 * @see has
 * @param {string} keyPath
 * @return {boolean}
 */
Settings.prototype.hasSync = function(keyPath) {};

/**
 * Returns a promise whose first argument is the value at the chosen key path.
 * If no key path is chosen, the entire settings object will be returned instead.
 * For synchronous operation, use getSync().
 * 
 * @see getSync
 * @param {string=} keyPath The path to the key that we wish to get the value of.
 * @return {!Promise<?>}
 */
Settings.prototype.get = function(keyPath) {};

/**
 * The synchronous version of get().
 * 
 * @see get
 * @param {string=} keyPath
 * @return {?}
 */
Settings.prototype.getSync = function(keyPath) {};

/**
 * Sets the value of the key at the chosen key path.
 * For synchronous operation, use setSync().
 * 
 * @throws if key path is not a string.
 * @throws if options is not an object.
 * @see setSync
 * @param {string} keyPath The path to the key whose value we wish to set. This key need not already exist.
 * @param {?} value The value to set the key at the chosen key path to. This must be a data type supported by JSON: object, array, string, number, boolean, or null.
 * @param {!ElectronSettings.Options=} options
 * @return {!Promise<void>}
 */
Settings.prototype.set = function(keyPath, value, options) {};

/**
 * The synchronous version of set().
 * 
 * @see set
 * @param {string} keyPath
 * @param {?} value
 * @param {!ElectronSettings.Options=} options
 * @return {void}
 */
Settings.prototype.setSync = function(keyPath, value, options) {};

/**
 * Deletes the key and value at the chosen key path.
 * 
 * @throws if keyPath is not a string.
 * @throws if options is not an object.
 * @see deleteSync
 * @param {string} keyPath The path to the key we wish to unset.
 * @param {!ElectronSettings.Options=} options
 * @return {!Promise<void>}
 */
Settings.prototype.delete = function(keyPath, options) {};

/**
 * The synchronous version of delete().
 * 
 * @see delete
 * @param {string} keyPath
 * @param {!ElectronSettings.Options=} options
 * @return {void}
 */
Settings.prototype.deleteSync = function(keyPath, options) {};

/**
 * Clears the entire settings object.
 * For synchronous operation, use clearSync().
 * 
 * @throws if options is not an object.
 * @see clearSync
 * @param {!ElectronSettings.Options=} options
 * @return {!Promise<void>}
 */
Settings.prototype.clear = function(options) {};

/**
 * The synchronous version of clear().
 * 
 * @see clear
 * @param {!ElectronSettings.Options=} options
 * @return {void}
 */
Settings.prototype.clearSync = function(options) {};

/**
 * Applies defaults to the current settings object (deep).
 * Settings that already exist will not be overwritten, but keys that exist within the defaults
 * that don't exist within the setting object will be added.
 * To configure defaults, use defaults().
 * For synchronous operation, use applyDefaultsSync().
 * 
 * @throws if options is not an object.
 * @see defaults
 * @see applyDefaultsSync
 * @param {!ElectronSettings.ApplyDefaultsOptions=} options
 * @return {!Promise<void>}
 */
Settings.prototype.applyDefaults = function(options) {};

/**
 * The synchronous version of applyDefaults().
 * 
 * @see applyDefaults
 * @param {!ElectronSettings.ApplyDefaultsOptions=} options
 * @return {void}
 */
Settings.prototype.applyDefaultsSync = function(options) {};

/**
 * Resets all settings to defaults.
 * To configure defaults, use defaults().
 * For synchronous operation, use resetToDefaultsSync().
 * 
 * @throws if options is not an object.
 * @see defaults
 * @see resetToDefaultsSync
 * @param {!ElectronSettings.Options=} options
 * @return {!Promise<void>}
 */
Settings.prototype.resetToDefaults = function(options) {};

/**
 * The synchronous version of resetToDefaults().
 * 
 * @see resetToDefaults
 * @param {!ElectronSettings.Options=} options
 * @return {void}
 */
Settings.prototype.resetToDefaultsSync = function(options) {};

/**
 * Observes the chosen key path for changes and calls the handler if the value changes.
 * Returns an Observer instance which has a dispose method.
 * To unsubscribe, simply call dispose() on the returned key path observer.
 * 
 * @throws if key path is not a string.
 * @throws if handler is not a function.
 * @param {string} keyPath The path to the key that we wish to observe.
 * @param {function(!ElectronSettings.ChangeEvent): void} handler The callback that will be invoked if the value at the chosen key path changes.
 * @return {!ElectronSettings.Observer}
 */
Settings.prototype.observe = function(keyPath, handler) {};

/**
 * Returns the path to the config file. Typically found in your application's user data directory:
 * ~/Library/Application Support/YourApp on MacOS.
 * %APPDATA%/YourApp on Windows.
 * $XDG_CONFIG_HOME/YourApp or ~/.config/YourApp on Linux.
 * @return {string}
 */
Settings.prototype.getSettingsFilePath = function() {};

/**
 * Emitted when the settings file has been created.
 * Emitted when the settings have been written to disk.
 * @param {string} event
 * @param {function(string): void|function(): void} listener
 * @return {Settings}
 */
Settings.prototype.on = function(event, listener) {};

/** @typedef {!ElectronSettings.Observer} */
SettingsInstance.Observer;

/** @typedef {!ElectronSettings.Options} */
SettingsInstance.Options;

/** @typedef {!ElectronSettings.ApplyDefaultsOptions} */
SettingsInstance.ApplyDefaultsOptions;

/** @typedef {!ElectronSettings.ChangeEvent} */
SettingsInstance.ChangeEvent;
/** @const */
var ElectronSettings = {};
/**
 * @constructor
 * @struct
 */
ElectronSettings.Observer = function() {};

/**
 * Disposes of the key path observer by unbinding the event listener and
 * nullifying all internal references.
 * @return {void}
 */
ElectronSettings.Observer.prototype.dispose = function() {};
/**
 * @record
 * @struct
 */
ElectronSettings.Options = function() {};
 /** @type {boolean} */
ElectronSettings.Options.prototype.atomicSaving;
 /** @type {boolean} */
ElectronSettings.Options.prototype.prettify;
/**
 * @extends {ElectronSettings.Options}
 * @record
 * @struct
 */
ElectronSettings.ApplyDefaultsOptions = function() {};
 /** @type {boolean} */
ElectronSettings.ApplyDefaultsOptions.prototype.overwrite;
/**
 * @record
 * @struct
 */
ElectronSettings.ChangeEvent = function() {};
 /** @type {?} */
ElectronSettings.ChangeEvent.prototype.oldValue;
 /** @type {?} */
ElectronSettings.ChangeEvent.prototype.newValue;
