/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/lazy.js/index.d.ts:
/** @const */
var LazyJS = {};
/**
 * @record
 * @struct
 */
LazyJS.LazyStatic = function() {};

/* TODO: CallSignature: LazyJS */

/* TODO: CallSignature: LazyJS */

/* TODO: CallSignature: LazyJS */

/* TODO: CallSignature: LazyJS */

/* TODO: CallSignature: LazyJS */

/**
 * @return {!LazyJS.LazyStatic}
 */
LazyJS.LazyStatic.prototype.strict = function() {};

/**
 * @template T
 * @param {!LazyJS.GeneratorCallback<T>} generatorFn
 * @param {number=} length
 * @return {!LazyJS.GeneratedSequence<T>}
 */
LazyJS.LazyStatic.prototype.generate = function(generatorFn, length) {};

/**
 * @param {number} to_or_from
 * @param {number=} to
 * @param {number=} step
 * @return {!LazyJS.GeneratedSequence<number>}
 */
LazyJS.LazyStatic.prototype.range = function(to_or_from, to, step) {};

/**
 * @template T
 * @param {T} value
 * @param {number=} count
 * @return {!LazyJS.GeneratedSequence<T>}
 */
LazyJS.LazyStatic.prototype.repeat = function(value, count) {};

/**
 * @template T
 * @param {string} eventType
 * @return {?<T>}
 */
LazyJS.LazyStatic.prototype.on = function(eventType) {};

/**
 * @param {string} path
 * @return {?}
 */
LazyJS.LazyStatic.prototype.readFile = function(path) {};

/**
 * @param {string} path
 * @return {?}
 */
LazyJS.LazyStatic.prototype.makeHttpRequest = function(path) {};
/**
 * @record
 * @struct
 */
LazyJS.ArrayLike = function() {};
 /** @type {number} */
LazyJS.ArrayLike.prototype.length;

/* TODO: IndexSignature: LazyJS */
/**
 * @record
 * @struct
 */
LazyJS.Callback = function() {};

/* TODO: CallSignature: LazyJS */
/**
 * @record
 * @struct
 */
LazyJS.ErrorCallback = function() {};

/* TODO: CallSignature: LazyJS */
/**
 * @record
 * @struct
 */
LazyJS.ValueCallback = function() {};

/* TODO: CallSignature: LazyJS */
/**
 * @record
 * @struct
 */
LazyJS.GetKeyCallback = function() {};

/* TODO: CallSignature: LazyJS */
/**
 * @record
 * @struct
 */
LazyJS.TestCallback = function() {};

/* TODO: CallSignature: LazyJS */
/**
 * @record
 * @struct
 */
LazyJS.MapCallback = function() {};

/* TODO: CallSignature: LazyJS */
/**
 * @record
 * @struct
 */
LazyJS.MapStringCallback = function() {};

/* TODO: CallSignature: LazyJS */
/**
 * @record
 * @struct
 */
LazyJS.NumberCallback = function() {};

/* TODO: CallSignature: LazyJS */
/**
 * @record
 * @struct
 */
LazyJS.MemoCallback = function() {};

/* TODO: CallSignature: LazyJS */
/**
 * @record
 * @struct
 */
LazyJS.GeneratorCallback = function() {};

/* TODO: CallSignature: LazyJS */
/**
 * @record
 * @struct
 */
LazyJS.CompareCallback = function() {};

/* TODO: CallSignature: LazyJS */
/**
 * @record
 * @struct
 */
LazyJS.Iterator = function() {};

/* TODO: ConstructSignature: LazyJS */

/**
 * @return {T}
 */
LazyJS.Iterator.prototype.current = function() {};

/**
 * @return {boolean}
 */
LazyJS.Iterator.prototype.moveNext = function() {};
/**
 * @record
 * @struct
 */
LazyJS.GeneratedSequence = function() {};

/* TODO: ConstructSignature: LazyJS */

/**
 * @return {number}
 */
LazyJS.GeneratedSequence.prototype.length = function() {};
/**
 * @extends {LazyJS.SequenceBase}
 * @record
 * @struct
 */
LazyJS.AsyncSequence = function() {};

/**
 * @param {!LazyJS.ValueCallback<T>} callback
 * @return {!LazyJS.AsyncHandle<T>}
 */
LazyJS.AsyncSequence.prototype.each = function(callback) {};
/**
 * @record
 * @struct
 */
LazyJS.AsyncHandle = function() {};

/**
 * @return {void}
 */
LazyJS.AsyncHandle.prototype.cancel = function() {};

/**
 * @param {!LazyJS.Callback} callback
 * @return {void}
 */
LazyJS.AsyncHandle.prototype.onComplete = function(callback) {};

/**
 * @param {!LazyJS.ErrorCallback} callback
 * @return {void}
 */
LazyJS.AsyncHandle.prototype.onError = function(callback) {};
/** @const */
LazyJS.Sequence = {};

/**
 * @param {!Array<string>} methodName
 * @param {!Object} overrides
 * @return {!Function}
 */
LazyJS.Sequence.define = function(methodName, overrides) {};

/**
 * @param {!LazyJS.ValueCallback<T>} eachFn
 * @return {?}
 */
LazyJS.Sequence.prototype.each = function(eachFn) {};
/**
 * @extends {LazyJS.SequenceBaser}
 * @record
 * @struct
 */
LazyJS.SequenceBase = function() {};

/**
 * @param {number=} count
 * @return {?|?<T>}
 */
LazyJS.SequenceBase.prototype.first = function(count) {};

/**
 * @param {?} value
 * @param {number=} startIndex
 * @return {?<T>}
 */
LazyJS.SequenceBase.prototype.indexOf = function(value, startIndex) {};

/**
 * @param {number=} count
 * @return {?|?<T>}
 */
LazyJS.SequenceBase.prototype.last = function(count) {};

/**
 * @param {?} value
 * @return {?<T>}
 */
LazyJS.SequenceBase.prototype.lastIndexOf = function(value) {};

/**
 * @return {?<T>}
 */
LazyJS.SequenceBase.prototype.reverse = function() {};
/**
 * @record
 * @struct
 */
LazyJS.SequenceBaser = function() {};

/**
 * @param {number} interval
 * @return {!LazyJS.AsyncSequence<T>}
 */
LazyJS.SequenceBaser.prototype.async = function(interval) {};

/**
 * @param {number} size
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.chunk = function(size) {};

/**
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.compact = function() {};

/**
 * @param {!Array<T>} var_args
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.concat = function(var_args) {};

/**
 * @param {number} length
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.consecutive = function(length) {};

/**
 * @param {T} value
 * @return {boolean}
 */
LazyJS.SequenceBaser.prototype.contains = function(value) {};

/**
 * @param {!LazyJS.GetKeyCallback<T>|string} keyFn_or_propertyName
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.countBy = function(keyFn_or_propertyName) {};

/**
 * @param {!LazyJS.TestCallback<T>} predicateFn
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.dropWhile = function(predicateFn) {};

/**
 * @param {!LazyJS.TestCallback<T>} predicateFn
 * @return {boolean}
 */
LazyJS.SequenceBaser.prototype.every = function(predicateFn) {};

/**
 * @param {!LazyJS.TestCallback<T>} predicateFn
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.filter = function(predicateFn) {};

/**
 * @param {!LazyJS.TestCallback<T>} predicateFn
 * @return {T}
 */
LazyJS.SequenceBaser.prototype.find = function(predicateFn) {};

/**
 * @param {!Object} properties
 * @return {T}
 */
LazyJS.SequenceBaser.prototype.findWhere = function(properties) {};

/**
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.flatten = function() {};

/**
 * @param {!LazyJS.GetKeyCallback<T>} keyFn
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.groupBy = function(keyFn) {};

/**
 * @param {number=} count
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.initial = function(count) {};

/**
 * @param {!Array<T>} var_args
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.intersection = function(var_args) {};

/**
 * @param {string} methodName
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.invoke = function(methodName) {};

/**
 * @return {boolean}
 */
LazyJS.SequenceBaser.prototype.isEmpty = function() {};

/**
 * @param {string=} delimiter
 * @return {string}
 */
LazyJS.SequenceBaser.prototype.join = function(delimiter) {};

/**
 * @template U
 * @param {!LazyJS.MapCallback<T, U>} mapFn
 * @return {?<U>}
 */
LazyJS.SequenceBaser.prototype.map = function(mapFn) {};

/**
 * @param {!LazyJS.NumberCallback<T>=} valueFn
 * @return {T}
 */
LazyJS.SequenceBaser.prototype.max = function(valueFn) {};

/**
 * @param {!LazyJS.NumberCallback<T>=} valueFn
 * @return {T}
 */
LazyJS.SequenceBaser.prototype.min = function(valueFn) {};

/**
 * @param {!LazyJS.TestCallback<T>=} valueFn
 * @return {boolean}
 */
LazyJS.SequenceBaser.prototype.none = function(valueFn) {};

/**
 * @param {string} propertyName
 * @return {?<?>}
 */
LazyJS.SequenceBaser.prototype.pluck = function(propertyName) {};

/**
 * @template U
 * @param {!LazyJS.MemoCallback<T, U>} aggregatorFn
 * @param {U=} memo
 * @return {U}
 */
LazyJS.SequenceBaser.prototype.reduce = function(aggregatorFn, memo) {};

/**
 * @template U
 * @param {!LazyJS.MemoCallback<T, U>} aggregatorFn
 * @param {U} memo
 * @return {U}
 */
LazyJS.SequenceBaser.prototype.reduceRight = function(aggregatorFn, memo) {};

/**
 * @param {!LazyJS.TestCallback<T>} predicateFn
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.reject = function(predicateFn) {};

/**
 * @param {number=} count
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.rest = function(count) {};

/**
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.shuffle = function() {};

/**
 * @param {!LazyJS.TestCallback<T>=} predicateFn
 * @return {boolean}
 */
LazyJS.SequenceBaser.prototype.some = function(predicateFn) {};

/**
 * @param {!LazyJS.CompareCallback=} sortFn
 * @param {boolean=} descending
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.sort = function(sortFn, descending) {};

/**
 * @param {string|!LazyJS.NumberCallback<T>} sortFn
 * @param {boolean=} descending
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.sortBy = function(sortFn, descending) {};

/**
 * @param {T} value
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.sortedIndex = function(value) {};

/**
 * @return {number}
 */
LazyJS.SequenceBaser.prototype.size = function() {};

/**
 * @param {!LazyJS.NumberCallback<T>=} valueFn
 * @return {T}
 */
LazyJS.SequenceBaser.prototype.sum = function(valueFn) {};

/**
 * @param {!LazyJS.TestCallback<T>} predicateFn
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.takeWhile = function(predicateFn) {};

/**
 * @param {!Array<T>} var_args
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.union = function(var_args) {};

/**
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.uniq = function() {};

/**
 * @param {!Object} properties
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.where = function(properties) {};

/**
 * @param {...T|!Array<T>} var_args
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.without = function(var_args) {};

/**
 * @param {!Array<T>} var_args
 * @return {?<T>}
 */
LazyJS.SequenceBaser.prototype.zip = function(var_args) {};

/**
 * @return {!Array<T>}
 */
LazyJS.SequenceBaser.prototype.toArray = function() {};

/**
 * @return {!Object}
 */
LazyJS.SequenceBaser.prototype.toObject = function() {};
/** @const */
LazyJS.ArrayLikeSequence = {};

/**
 * @param {!Array<string>} methodName
 * @param {!Object} overrides
 * @return {!Function}
 */
LazyJS.ArrayLikeSequence.define = function(methodName, overrides) {};

/**
 * @param {!Array<T>} var_args
 * @return {?}
 */
LazyJS.ArrayLikeSequence.prototype.concat = function(var_args) {};

/**
 * @param {number=} count
 * @return {?}
 */
LazyJS.ArrayLikeSequence.prototype.first = function(count) {};

/**
 * @param {number} index
 * @return {T}
 */
LazyJS.ArrayLikeSequence.prototype.get = function(index) {};

/**
 * @return {number}
 */
LazyJS.ArrayLikeSequence.prototype.length = function() {};

/**
 * @template U
 * @param {!LazyJS.MapCallback<T, U>} mapFn
 * @return {?<U>}
 */
LazyJS.ArrayLikeSequence.prototype.map = function(mapFn) {};

/**
 * @return {?}
 */
LazyJS.ArrayLikeSequence.prototype.pop = function() {};

/**
 * @param {number=} count
 * @return {?}
 */
LazyJS.ArrayLikeSequence.prototype.rest = function(count) {};

/**
 * @return {?}
 */
LazyJS.ArrayLikeSequence.prototype.reverse = function() {};

/**
 * @return {?}
 */
LazyJS.ArrayLikeSequence.prototype.shift = function() {};

/**
 * @param {number} begin
 * @param {number=} end
 * @return {?}
 */
LazyJS.ArrayLikeSequence.prototype.slice = function(begin, end) {};
/** @const */
LazyJS.ObjectLikeSequence = {};

/**
 * @param {!Array<string>} methodName
 * @param {!Object} overrides
 * @return {!Function}
 */
LazyJS.ObjectLikeSequence.define = function(methodName, overrides) {};

/**
 * @param {!Object} other
 * @return {?}
 */
LazyJS.ObjectLikeSequence.prototype.assign = function(other) {};

/**
 * @param {!Object} defaults
 * @return {?}
 */
LazyJS.ObjectLikeSequence.prototype.defaults = function(defaults) {};

/**
 * @return {?<T>}
 */
LazyJS.ObjectLikeSequence.prototype.functions = function() {};

/**
 * @param {string} property
 * @return {?}
 */
LazyJS.ObjectLikeSequence.prototype.get = function(property) {};

/**
 * @return {?}
 */
LazyJS.ObjectLikeSequence.prototype.invert = function() {};

/**
 * @return {?<string>}
 */
LazyJS.ObjectLikeSequence.prototype.keys = function() {};

/**
 * @param {!Array<string>} properties
 * @return {?}
 */
LazyJS.ObjectLikeSequence.prototype.omit = function(properties) {};

/**
 * @return {?<T>}
 */
LazyJS.ObjectLikeSequence.prototype.pairs = function() {};

/**
 * @param {!Array<string>} properties
 * @return {?}
 */
LazyJS.ObjectLikeSequence.prototype.pick = function(properties) {};

/**
 * @return {!Array<T>}
 */
LazyJS.ObjectLikeSequence.prototype.toArray = function() {};

/**
 * @return {!Object}
 */
LazyJS.ObjectLikeSequence.prototype.toObject = function() {};

/**
 * @return {?<T>}
 */
LazyJS.ObjectLikeSequence.prototype.values = function() {};
/** @const */
LazyJS.StringLikeSequence = {};

/**
 * @param {!Array<string>} methodName
 * @param {!Object} overrides
 * @return {!Function}
 */
LazyJS.StringLikeSequence.define = function(methodName, overrides) {};

/**
 * @param {number} index
 * @return {string}
 */
LazyJS.StringLikeSequence.prototype.charAt = function(index) {};

/**
 * @param {number} index
 * @return {number}
 */
LazyJS.StringLikeSequence.prototype.charCodeAt = function(index) {};

/**
 * @param {string} value
 * @return {boolean}
 */
LazyJS.StringLikeSequence.prototype.contains = function(value) {};

/**
 * @param {string} suffix
 * @return {boolean}
 */
LazyJS.StringLikeSequence.prototype.endsWith = function(suffix) {};

/**
 * @param {number=} count
 * @return {string|?}
 */
LazyJS.StringLikeSequence.prototype.first = function(count) {};

/**
 * @param {string} substring
 * @param {number=} startIndex
 * @return {number}
 */
LazyJS.StringLikeSequence.prototype.indexOf = function(substring, startIndex) {};

/**
 * @param {number=} count
 * @return {string|?}
 */
LazyJS.StringLikeSequence.prototype.last = function(count) {};

/**
 * @param {string} substring
 * @param {number=} startIndex
 * @return {number}
 */
LazyJS.StringLikeSequence.prototype.lastIndexOf = function(substring, startIndex) {};

/**
 * @param {!LazyJS.MapStringCallback} mapFn
 * @return {?}
 */
LazyJS.StringLikeSequence.prototype.mapString = function(mapFn) {};

/**
 * @param {!RegExp} pattern
 * @return {?}
 */
LazyJS.StringLikeSequence.prototype.match = function(pattern) {};

/**
 * @return {?}
 */
LazyJS.StringLikeSequence.prototype.reverse = function() {};

/**
 * @param {string|!RegExp} delimiter
 * @return {?}
 */
LazyJS.StringLikeSequence.prototype.split = function(delimiter) {};

/**
 * @param {string} prefix
 * @return {boolean}
 */
LazyJS.StringLikeSequence.prototype.startsWith = function(prefix) {};

/**
 * @param {number} start
 * @param {number=} stop
 * @return {?}
 */
LazyJS.StringLikeSequence.prototype.substring = function(start, stop) {};

/**
 * @return {?}
 */
LazyJS.StringLikeSequence.prototype.toLowerCase = function() {};

/**
 * @return {?}
 */
LazyJS.StringLikeSequence.prototype.toUpperCase = function() {};
 /** @type {!LazyJS.LazyStatic} */
var Lazy;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "lazy.js"
/** @const */
tsickle_declare_module.lazy_js = {};

/* TODO: ExportAssignment in tsickle_declare_module.lazy_js */
