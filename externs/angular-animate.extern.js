/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/angular-animate/index.d.ts:
 /** @type {string} */
var _;

/* TODO: ExportAssignment in  */

/* TODO: ImportDeclaration in  */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "angular"
/** @const */
tsickle_declare_module.angular.animate = {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.animate.IAnimateFactory = function() {};

/* TODO: CallSignature: tsickle_declare_module.angular.animate */
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.animate.IAnimateCallbackObject = function() {};
 /** @type {function(!JQuery, !Function, !animate.IAnimationOptions): ?} */
tsickle_declare_module.angular.animate.IAnimateCallbackObject.prototype.eventFn;
 /** @type {function(!JQuery, string, string, !Function, !animate.IAnimationOptions): ?} */
tsickle_declare_module.angular.animate.IAnimateCallbackObject.prototype.setClass;
 /** @type {function(!JQuery, string, !Function, !animate.IAnimationOptions): ?} */
tsickle_declare_module.angular.animate.IAnimateCallbackObject.prototype.addClass;
 /** @type {function(!JQuery, string, !Function, !animate.IAnimationOptions): ?} */
tsickle_declare_module.angular.animate.IAnimateCallbackObject.prototype.removeClass;
 /** @type {function(!JQuery, !Function, !animate.IAnimationOptions): ?} */
tsickle_declare_module.angular.animate.IAnimateCallbackObject.prototype.enter;
 /** @type {function(!JQuery, !Function, !animate.IAnimationOptions): ?} */
tsickle_declare_module.angular.animate.IAnimateCallbackObject.prototype.leave;
 /** @type {function(!JQuery, !Function, !animate.IAnimationOptions): ?} */
tsickle_declare_module.angular.animate.IAnimateCallbackObject.prototype.move;
 /** @type {function(!JQuery, string, string, !Function, !animate.IAnimationOptions): ?} */
tsickle_declare_module.angular.animate.IAnimateCallbackObject.prototype.animate;
/**
 * @extends {angular.IPromise}
 * @record
 * @struct
 */
tsickle_declare_module.angular.animate.IAnimationPromise = function() {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.animate.IAnimateService = function() {};

/**
 * Sets up an event listener to fire whenever the animation event has fired on the given element or among any of its children.
 * 
 * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
 * @param {!JQuery} container the container element that will capture each of the animation events that are fired on itself as well as among its children
 * @param {function(!JQuery, string): ?} callback the callback function that will be fired when the listener is triggered
 * @return {void}
 */
tsickle_declare_module.angular.animate.IAnimateService.prototype.on = function(event, container, callback) {};

/**
 * Deregisters an event listener based on the event which has been associated with the provided element.
 * 
 * @param {string} event the animation event (e.g. enter, leave, move, addClass, removeClass, etc...)
 * @param {!JQuery=} container the container element the event listener was placed on
 * @param {function(!JQuery, string): ?=} callback the callback function that was registered as the listener
 * @return {void}
 */
tsickle_declare_module.angular.animate.IAnimateService.prototype.off = function(event, container, callback) {};

/**
 * Associates the provided element with a host parent element to allow the element to be animated even if it exists outside of the DOM structure of the Angular application.
 * 
 * @param {!JQuery} element the external element that will be pinned
 * @param {!JQuery} parentElement the host parent element that will be associated with the external element
 * @return {void}
 */
tsickle_declare_module.angular.animate.IAnimateService.prototype.pin = function(element, parentElement) {};

/**
 * Globally enables / disables animations.
 * 
 * @param {!JQuery|boolean=} element_or_value If provided then the element will be used to represent the enable/disable operation.
 * @param {boolean=} value If provided then set the animation on or off.
 * @return {boolean} current animation state
 */
tsickle_declare_module.angular.animate.IAnimateService.prototype.enabled = function(element_or_value, value) {};

/**
 * Cancels the provided animation.
 * @param {!animate.IAnimationPromise} animationPromise
 * @return {void}
 */
tsickle_declare_module.angular.animate.IAnimateService.prototype.cancel = function(animationPromise) {};

/**
 * Performs an inline animation on the element.
 * 
 * @param {!JQuery} element the element that will be the focus of the animation
 * @param {?} from a collection of CSS styles that will be applied to the element at the start of the animation
 * @param {?} to a collection of CSS styles that the element will animate towards
 * @param {string=} className an optional CSS class that will be added to the element for the duration of the animation (the default class is 'ng-inline-animate')
 * @param {!animate.IAnimationOptions=} options an optional collection of styles that will be picked up by the CSS transition/animation
 * @return {!animate.IAnimationPromise} the animation callback promise
 */
tsickle_declare_module.angular.animate.IAnimateService.prototype.animate = function(element, from, to, className, options) {};

/**
 * Appends the element to the parentElement element that resides in the document and then runs the enter animation.
 * 
 * @param {!JQuery} element the element that will be the focus of the enter animation
 * @param {!JQuery} parentElement the parent element of the element that will be the focus of the enter animation
 * @param {!JQuery=} afterElement the sibling element (which is the previous element) of the element that will be the focus of the enter animation
 * @param {!animate.IAnimationOptions=} options an optional collection of styles that will be picked up by the CSS transition/animation
 * @return {!animate.IAnimationPromise} the animation callback promise
 */
tsickle_declare_module.angular.animate.IAnimateService.prototype.enter = function(element, parentElement, afterElement, options) {};

/**
 * Runs the leave animation operation and, upon completion, removes the element from the DOM.
 * 
 * @param {!JQuery} element the element that will be the focus of the leave animation
 * @param {!animate.IAnimationOptions=} options an optional collection of styles that will be picked up by the CSS transition/animation
 * @return {!animate.IAnimationPromise} the animation callback promise
 */
tsickle_declare_module.angular.animate.IAnimateService.prototype.leave = function(element, options) {};

/**
 * Fires the move DOM operation. Just before the animation starts, the animate service will either append
 * it into the parentElement container or add the element directly after the afterElement element if present.
 * Then the move animation will be run.
 * 
 * @param {!JQuery} element the element that will be the focus of the move animation
 * @param {!JQuery} parentElement the parent element of the element that will be the focus of the move animation
 * @param {!JQuery=} afterElement the sibling element (which is the previous element) of the element that will be the focus of the move animation
 * @return {!animate.IAnimationPromise} the animation callback promise
 */
tsickle_declare_module.angular.animate.IAnimateService.prototype.move = function(element, parentElement, afterElement) {};

/**
 * Triggers a custom animation event based off the className variable and then attaches the className
 * value to the element as a CSS class.
 * 
 * @param {!JQuery} element the element that will be animated
 * @param {string} className the CSS class that will be added to the element and then animated
 * @param {!animate.IAnimationOptions=} options an optional collection of styles that will be picked up by the CSS transition/animation
 * @return {!animate.IAnimationPromise} the animation callback promise
 */
tsickle_declare_module.angular.animate.IAnimateService.prototype.addClass = function(element, className, options) {};

/**
 * Triggers a custom animation event based off the className variable and then removes the CSS class
 * provided by the className value from the element.
 * 
 * @param {!JQuery} element the element that will be animated
 * @param {string} className the CSS class that will be animated and then removed from the element
 * @param {!animate.IAnimationOptions=} options an optional collection of styles that will be picked up by the CSS transition/animation
 * @return {!animate.IAnimationPromise} the animation callback promise
 */
tsickle_declare_module.angular.animate.IAnimateService.prototype.removeClass = function(element, className, options) {};

/**
 * Adds and/or removes the given CSS classes to and from the element. Once complete, the done() callback
 * will be fired (if provided).
 * 
 * @param {!JQuery} element the element which will have its CSS classes changed removed from it
 * @param {string} add the CSS classes which will be added to the element
 * @param {string} remove the CSS class which will be removed from the element CSS classes have been set on the element
 * @param {!animate.IAnimationOptions=} options an optional collection of styles that will be picked up by the CSS transition/animation
 * @return {!animate.IAnimationPromise} the animation callback promise
 */
tsickle_declare_module.angular.animate.IAnimateService.prototype.setClass = function(element, add, remove, options) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.animate.IAnimateProvider = function() {};

/**
 * Registers a new injectable animation factory function.
 * 
 * @param {string} name The name of the animation.
 * @param {!animate.IAnimateFactory} factory The factory function that will be executed to return the animation object.
 * @return {void}
 */
tsickle_declare_module.angular.animate.IAnimateProvider.prototype.register = function(name, factory) {};

/**
 * Gets and/or sets the CSS class expression that is checked when performing an animation.
 * 
 * @param {!RegExp=} expression The className expression which will be checked against all animations.
 * @return {!RegExp} The current CSS className expression value. If null then there is no expression value.
 */
tsickle_declare_module.angular.animate.IAnimateProvider.prototype.classNameFilter = function(expression) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.animate.IAnimationOptions = function() {};
 /** @type {string} */
tsickle_declare_module.angular.animate.IAnimationOptions.prototype.event;
 /** @type {boolean} */
tsickle_declare_module.angular.animate.IAnimationOptions.prototype.structural;
 /** @type {string} */
tsickle_declare_module.angular.animate.IAnimationOptions.prototype.easing;
 /** @type {string} */
tsickle_declare_module.angular.animate.IAnimationOptions.prototype.transitionStyle;
 /** @type {string} */
tsickle_declare_module.angular.animate.IAnimationOptions.prototype.keyframeStyle;
 /** @type {!Object} */
tsickle_declare_module.angular.animate.IAnimationOptions.prototype.from;
 /** @type {!Object} */
tsickle_declare_module.angular.animate.IAnimationOptions.prototype.to;
 /** @type {string} */
tsickle_declare_module.angular.animate.IAnimationOptions.prototype.addClass;
 /** @type {string} */
tsickle_declare_module.angular.animate.IAnimationOptions.prototype.removeClass;
 /** @type {number} */
tsickle_declare_module.angular.animate.IAnimationOptions.prototype.duration;
 /** @type {number} */
tsickle_declare_module.angular.animate.IAnimationOptions.prototype.delay;
 /** @type {number} */
tsickle_declare_module.angular.animate.IAnimationOptions.prototype.stagger;
 /** @type {number} */
tsickle_declare_module.angular.animate.IAnimationOptions.prototype.staggerIndex;
 /** @type {boolean} */
tsickle_declare_module.angular.animate.IAnimationOptions.prototype.cleanupStyles;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.animate.IAnimateCssRunner = function() {};

/**
 * Starts the animation
 * 
 * @return {!animate.IAnimateCssRunnerStart} The animation runner with a done function for supplying a callback.
 */
tsickle_declare_module.angular.animate.IAnimateCssRunner.prototype.start = function() {};

/**
 * Ends (aborts) the animation
 * @return {void}
 */
tsickle_declare_module.angular.animate.IAnimateCssRunner.prototype.end = function() {};
/**
 * @extends {angular.IPromise}
 * @record
 * @struct
 */
tsickle_declare_module.angular.animate.IAnimateCssRunnerStart = function() {};

/**
 * Allows you to add done callbacks to the running animation
 * 
 * @param {function(boolean): void} callbackFn
 * @return {void}
 */
tsickle_declare_module.angular.animate.IAnimateCssRunnerStart.prototype.done = function(callbackFn) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.animate.IAnimateCssService = function() {};

/* TODO: CallSignature: tsickle_declare_module.angular.animate */

/**
 * @param {string|!Object} name_or_object
 * @param {!animate.IAnimateFactory|!Array<?>=} animationFactory_or_inlineAnnotatedFunction
 * @return {!angular.IModule}
 */
tsickle_declare_module.angular.IModule.prototype.animation = function(name_or_object, animationFactory_or_inlineAnnotatedFunction) {};
