/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/resolve/index.d.ts:

/** @typedef {?} */
var resolveCallback;

/** @typedef {?} */
var isFileCallback;

/** @typedef {?} */
var readFileCallback;

/**
 * Asynchronously resolve the module path string id into cb(err, res [, pkg]), where pkg (if defined) is the data from package.json
 * 
 * Asynchronously resolve the module path string id into cb(err, res [, pkg]), where pkg (if defined) is the data from package.json
 * 
 * @param {string} id Identifier to resolve
 * @param {?|!resolve.AsyncOpts} cb_or_opts
 * @param {?=} cb
 * @return {void}
 */
function resolve(id, cb_or_opts, cb) {}

/**
 * Synchronously resolve the module path string id, returning the result and throwing an error when id can't be resolved.
 * 
 * @param {string} id Identifier to resolve
 * @param {!resolve.SyncOpts=} opts
 * @return {string}
 */
function resolveSync(id, opts) {}

/**
 * Return whether a package is in core
 * 
 * @param {string} id
 * @return {boolean}
 */
function resolveIsCore(id) {}
/**
 * @record
 * @struct
 */
resolve.Opts = function() {};
 /** @type {string} */
resolve.Opts.prototype.basedir;
 /** @type {?} */
resolve.Opts.prototype.package;
 /** @type {(string|!Array<string>)} */
resolve.Opts.prototype.extensions;
 /** @type {function(?, string): ?} */
resolve.Opts.prototype.packageFilter;
 /** @type {function(?, string, string): string} */
resolve.Opts.prototype.pathFilter;
 /** @type {(string|!Array<string>)} */
resolve.Opts.prototype.paths;
 /** @type {(string|!Array<string>)} */
resolve.Opts.prototype.moduleDirectory;
/**
 * @extends {resolve.Opts}
 * @record
 * @struct
 */
resolve.AsyncOpts = function() {};
 /** @type {function(string, ?): void} */
resolve.AsyncOpts.prototype.readFile;
 /** @type {function(string, ?): void} */
resolve.AsyncOpts.prototype.isFile;
/**
 * @extends {resolve.Opts}
 * @record
 * @struct
 */
resolve.SyncOpts = function() {};
 /** @type {function(string): ?} */
resolve.SyncOpts.prototype.readFileSync;
 /** @type {function(string): boolean} */
resolve.SyncOpts.prototype.isFile;
 /** @type {function(string, !resolve.SyncOpts): string} */
resolve.sync;
 /** @type {function(string): boolean} */
resolve.isCore;

/* TODO: ExportAssignment in  */
