/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/event-kit/index.d.ts:

/* TODO: ExportAssignment in  */
/** @const */
var AtomEventKit = {};
/**
 * @record
 * @struct
 */
AtomEventKit.IDisposable = function() {};

/**
 * @return {void}
 */
AtomEventKit.IDisposable.prototype.dispose = function() {};
/**
 * @record
 * @struct
 */
AtomEventKit.DisposableStatic = function() {};
 /** @type {?} */
AtomEventKit.DisposableStatic.prototype.prototype;

/* TODO: ConstructSignature: AtomEventKit */

/**
 * Ensure that Object correctly implements the Disposable.
 * @param {!Object} object
 * @return {boolean}
 */
AtomEventKit.DisposableStatic.prototype.isDisposable = function(object) {};
/**
 * @extends {AtomEventKit.IDisposable}
 * @record
 * @struct
 */
AtomEventKit.Disposable = function() {};
 /** @type {boolean} */
AtomEventKit.Disposable.prototype.disposed;
 /** @type {!AtomEventKit.DisposableStatic} */
AtomEventKit.Disposable.prototype.constructor;
 /** @type {!AtomEventKit.DisposableStatic} */
AtomEventKit.Disposable;
/**
 * @record
 * @struct
 */
AtomEventKit.CompositeDisposableStatic = function() {};
 /** @type {?} */
AtomEventKit.CompositeDisposableStatic.prototype.prototype;

/* TODO: ConstructSignature: AtomEventKit */
/**
 * @extends {AtomEventKit.IDisposable}
 * @record
 * @struct
 */
AtomEventKit.CompositeDisposable = function() {};
 /** @type {boolean} */
AtomEventKit.CompositeDisposable.prototype.disposed;
 /** @type {!AtomEventKit.CompositeDisposableStatic} */
AtomEventKit.CompositeDisposable.prototype.constructor;

/**
 * @param {...!AtomEventKit.IDisposable} disposables
 * @return {void}
 */
AtomEventKit.CompositeDisposable.prototype.add = function(disposables) {};

/**
 * @param {!AtomEventKit.IDisposable} disposable
 * @return {void}
 */
AtomEventKit.CompositeDisposable.prototype.remove = function(disposable) {};

/**
 * @return {void}
 */
AtomEventKit.CompositeDisposable.prototype.clear = function() {};
 /** @type {!AtomEventKit.CompositeDisposableStatic} */
AtomEventKit.CompositeDisposable;
/**
 * @record
 * @struct
 */
AtomEventKit.EmitterStatic = function() {};
 /** @type {?} */
AtomEventKit.EmitterStatic.prototype.prototype;

/* TODO: ConstructSignature: AtomEventKit */
/**
 * @record
 * @struct
 */
AtomEventKit.Emitter = function() {};
 /** @type {boolean} */
AtomEventKit.Emitter.prototype.isDisposed;
 /** @type {!AtomEventKit.EmitterStatic} */
AtomEventKit.Emitter.prototype.constructor;

/**
 * Clear out any existing subscribers.
 * @return {void}
 */
AtomEventKit.Emitter.prototype.clear = function() {};

/**
 * Unsubscribe all handlers.
 * @return {void}
 */
AtomEventKit.Emitter.prototype.dispose = function() {};

/**
 * Registers a handler to be invoked whenever the given event is emitted.
 * @param {string} eventName
 * @param {function(?): void} handler
 * @param {boolean=} unshift
 * @return {?} An object that will unregister the handler when disposed.
 */
AtomEventKit.Emitter.prototype.on = function(eventName, handler, unshift) {};

/**
 * Registers a handler to be invoked *before* all previously registered handlers for
 * the given event.
 * @param {string} eventName
 * @param {function(?): void} handler
 * @return {?} An object that will unregister the handler when disposed.
 */
AtomEventKit.Emitter.prototype.preempt = function(eventName, handler) {};

/**
 * Invokes any registered handlers for the given event.
 * @param {string} eventName
 * @param {?} value
 * @return {void}
 */
AtomEventKit.Emitter.prototype.emit = function(eventName, value) {};
 /** @type {!AtomEventKit.EmitterStatic} */
AtomEventKit.Emitter;
