/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/transducers.js/index.d.ts:

/** @typedef {?} */
var Reducer;

/** @typedef {?} */
var Transducer;
/**
 * @record
 * @struct
 */
function CompletingTransformer() {}

/**
 * @return {(void|?)}
 */
CompletingTransformer.prototype["@@transducer/init"] = function() {};

/**
 * @param {?} result
 * @return {?}
 */
CompletingTransformer.prototype["@@transducer/result"] = function(result) {};

/**
 * @param {?} result
 * @param {?} input
 * @return {?}
 */
CompletingTransformer.prototype["@@transducer/step"] = function(result, input) {};

/** @typedef {?} */
var Transformer;
/**
 * @record
 * @struct
 */
function Reduced() {}

/* TODO: PropertySignature: ["@@transducer/reduced"] */

/* TODO: PropertySignature: ["@@transducer/value"] */

/**
 * @template TResult, TInput, TCompleteResult
 * @param {!Iterable<?>|?} coll
 * @param {?} xf
 * @param {?} init
 * @return {?}
 */
function reduce(coll, xf, init) {}

/**
 * @template TResult, TInput
 * @param {?} reducer
 * @return {?}
 */
function transformer(reducer) {}
/**
 * @record
 * @struct
 */
function ReducedConstructor() {}

/* TODO: ConstructSignature:  */
 /** @type {?} */
var Reduced;

/**
 * @param {?} x
 * @return {boolean}
 */
function isReduced(x) {}

/**
 * @template T
 * @param {!Iterable<?>} coll
 * @return {!IterableIterator<?>}
 */
function iterator(coll) {}

/**
 * @template T
 * @param {!Array<?>} arr
 * @param {?} x
 * @return {!Array<?>}
 */
function push(arr, x) {}

/**
 * @template TResult, TInput, TOutput, TCompleteResult
 * @param {!Iterable<?>|?} coll
 * @param {?} xf
 * @param {?} f
 * @param {?=} init
 * @return {?}
 */
function transduce(coll, xf, f, init) {}

/**
 * @template TInput, TOutput
 * @param {!Array<?>|!Iterable<?>|?} coll
 * @param {?} xf
 * @return {!Array<?>|!IterableIterator<?>|?}
 */
function seq(coll, xf) {}

/**
 * @template TInput, TOutput
 * @param {!Iterable<?>|?} coll
 * @param {?=} xf
 * @return {!Array<?>}
 */
function toArray(coll, xf) {}

/**
 * @template TInput, TOutput
 * @param {!Iterable<?>|?} coll
 * @param {?=} xf
 * @return {!IterableIterator<?>}
 */
function toIter(coll, xf) {}

/**
 * @template TInput, TOutput
 * @param {!Iterable<?>|?} coll
 * @param {?=} xf
 * @return {?}
 */
function toObj(coll, xf) {}

/**
 * @template TInput, TOutput
 * @param {!Array<?>|string|?} to
 * @param {?} xf
 * @param {!Iterable<?>} from
 * @return {!Array<?>|string|?}
 */
function into(to, xf, from) {}

/**
 * @param {...?} fs
 * @return {?}
 */
function compose(fs) {}

/**
 * @template TInput, TOutput
 * @param {?} f
 * @return {?}
 */
function map(f) {}

/**
 * @template TInput
 * @param {?} pred
 * @return {?}
 */
function filter(pred) {}

/**
 * @template TInput
 * @param {?} pred
 * @return {?}
 */
function remove(pred) {}

/**
 * @template TResult, TInput
 * @param {?} f
 * @return {?}
 */
function cat(f) {}

/**
 * @template TInput, TOutput
 * @param {?} f
 * @return {?}
 */
function mapcat(f) {}

/**
 * @template TInput
 * @return {?}
 */
function keep() {}

/**
 * @template TInput
 * @return {?}
 */
function dedupe() {}

/**
 * @template TInput
 * @param {number} n
 * @return {?}
 */
function take(n) {}

/**
 * @template TInput
 * @param {?} pred
 * @return {?}
 */
function takeWhile(pred) {}

/**
 * @template TInput
 * @param {number} n
 * @return {?}
 */
function takeNth(n) {}

/**
 * @template TInput
 * @param {number} n
 * @return {?}
 */
function drop(n) {}

/**
 * @template TInput
 * @param {?} pred
 * @return {?}
 */
function dropWhile(pred) {}

/**
 * @template TInput
 * @param {number} n
 * @return {?}
 */
function partition(n) {}

/**
 * @template TInput
 * @param {?} f
 * @return {?}
 */
function partitionBy(f) {}

/**
 * @template TInput
 * @param {?} sep
 * @return {?}
 */
function interpose(sep) {}

/**
 * @template TInput
 * @param {number} n
 * @return {?}
 */
function repeat(n) {}

/**
 * @param {number} n
 * @return {!Array<number>}
 */
function range(n) {}
/**
 * @record
 * @struct
 */
function LazyTransformerConstructor() {}

/* TODO: ConstructSignature:  */
 /** @type {?} */
var LazyTransformer;
