/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/gapi/index.d.ts:
/**
 * @record
 * @struct
 */
function GoogleApiOAuth2TokenObject() {}
 /** @type {string} */
GoogleApiOAuth2TokenObject.prototype.access_token;
 /** @type {string} */
GoogleApiOAuth2TokenObject.prototype.error;
 /** @type {string} */
GoogleApiOAuth2TokenObject.prototype.expires_in;
 /** @type {string} */
GoogleApiOAuth2TokenObject.prototype.state;
/** @const */
var gapi = {};

/** @typedef {function(!Array<?>): void} */
gapi.LoadCallback;

/** @typedef {{callback: function(!Array<?>): void, onerror: !Function, timeout: number, ontimeout: !Function}} */
gapi.LoadConfig;

/** @typedef {(function(!Array<?>): void|{callback: ?, onerror: !Function, timeout: number, ontimeout: !Function})} */
gapi.CallbackOrConfig;

/**
 * Pragmatically initialize gapi class member.
 * Reference: https://developers.google.com/api-client-library/javascript/reference/referencedocs#gapiloadlibraries-callbackorconfig
 * @param {string} apiName
 * @param {(function(!Array<?>): void|{callback: ?, onerror: !Function, timeout: number, ontimeout: !Function})} callback
 * @return {void}
 */
gapi.load = function(apiName, callback) {};
/** @const */
gapi.auth = {};

/**
 * Initiates the OAuth 2.0 authorization process. The browser displays a popup window prompting the user authenticate and authorize. After the user authorizes, the popup closes and the callback function fires.
 * @param {{client_id: string, immediate: boolean, response_type: string, scope: ?, authuser: number}} params A key/value map of parameters for the request. If the key is not one of the expected OAuth 2.0 parameters, it is added to the URI as a query parameter.
 * @param {function(!GoogleApiOAuth2TokenObject): ?} callback The function to call once the login process is complete. The function takes an OAuth 2.0 token object as its only parameter.
 * @return {void}
 */
gapi.auth.authorize = function(params, callback) {};

/**
 * Initializes the authorization feature. Call this when the client loads to prevent popup blockers from blocking the auth window on gapi.auth.authorize calls.
 * @param {function(): ?} callback A callback to execute when the auth feature is ready to make authorization calls.
 * @return {void}
 */
gapi.auth.init = function(callback) {};

/**
 * Retrieves the OAuth 2.0 token for the application.
 * @return {!GoogleApiOAuth2TokenObject} The OAuth 2.0 token.
 */
gapi.auth.getToken = function() {};

/**
 * Sets the OAuth 2.0 token for the application.
 * @param {!GoogleApiOAuth2TokenObject} token The token to set.
 * @return {void}
 */
gapi.auth.setToken = function(token) {};

/**
 * Initiates the client-side Google+ Sign-In OAuth 2.0 flow.
 * When the method is called, the OAuth 2.0 authorization dialog is displayed to the user and when they accept, the callback function is called.
 * @param {{clientid: string, cookiepolicy: string, callback: function(): void, includegrantedscopes: boolean, requestvisibleactions: ?, scope: ?, apppackagename: string}} params
 * @return {void}
 */
gapi.auth.signIn = function(params) {};

/**
 * Signs a user out of your app without logging the user out of Google. This method will only work when the user is signed in with Google+ Sign-In.
 * @return {void}
 */
gapi.auth.signOut = function() {};
/** @const */
gapi.client = {};

/**
 * Initializes the JavaScript client with API key, OAuth client ID, scope, and API discovery document(s).
 * If OAuth client ID and scope are provided, this function will load the gapi.auth2 module to perform OAuth.
 * The gapi.client.init function can be run multiple times, such as to set up more APIs, to change API key, or initialize OAuth lazily.
 * @param {{apiKey: string, discoveryDocs: !Array<string>, clientId: string, scope: string, hosted_domain: string}} args
 * @return {!Promise<void>}
 */
gapi.client.init = function(args) {};
/**
 * @record
 * @struct
 */
gapi.client.RequestOptions = function() {};
 /** @type {string} */
gapi.client.RequestOptions.prototype.path;
 /** @type {string} */
gapi.client.RequestOptions.prototype.method;
 /** @type {?} */
gapi.client.RequestOptions.prototype.params;
 /** @type {?} */
gapi.client.RequestOptions.prototype.headers;
 /** @type {?} */
gapi.client.RequestOptions.prototype.body;
 /** @type {function(): ?} */
gapi.client.RequestOptions.prototype.callback;
/**
 * @record
 * @struct
 */
gapi.client.TokenObject = function() {};
 /** @type {string} */
gapi.client.TokenObject.prototype.access_token;

/**
 * Loads the client library interface to a particular API. If a callback is not provided, a promise is returned.
 * Loads the client library interface to a particular API. The new API interface will be in the form gapi.client.api.collection.method.
 * @param {string} name The name of the API to load.
 * @param {string} version The version of the API to load. / The version of the API to load
 * @param {function(): ?=} callback the function that is called once the API interface is loaded
 * @param {string=} url optional, the url of your app - if using Google's APIs, don't set it
 * @return {!Promise<void>|void} promise The promise that get's resolved after the request is finished.
 */
gapi.client.load = function(name, version, callback, url) {};

/**
 * Creates a HTTP request for making RESTful requests.
 * An object encapsulating the various arguments for this method.
 * @param {!gapi.client.RequestOptions} args
 * @return {!gapi.client.HttpRequest<?>}
 */
gapi.client.request = function(args) {};

/**
 * Creates an RPC Request directly. The method name and version identify the method to be executed and the RPC params are provided upon RPC creation.
 * @param {string} method The method to be executed.
 * @param {string=} version The version of the API which defines the method to be executed. Defaults to v1
 * @param {?=} rpcParams A key-value pair of the params to supply to this RPC
 * @return {!gapi.client.RpcRequest}
 */
gapi.client.rpcRequest = function(method, version, rpcParams) {};

/**
 * Sets the API key for the application.
 * @param {string} apiKey The API key to set
 * @return {void}
 */
gapi.client.setApiKey = function(apiKey) {};

/**
 * Sets the authentication token to use in requests.
 * @param {!gapi.client.TokenObject} token The token to set.
 * 
 * Reference: https://developers.google.com/api-client-library/javascript/reference/referencedocs#gapiclientsettokentokenobject
 * @return {void}
 */
gapi.client.setToken = function(token) {};
/**
 * @record
 * @struct
 */
gapi.client.HttpRequestFulfilled = function() {};
 /** @type {T} */
gapi.client.HttpRequestFulfilled.prototype.result;
 /** @type {string} */
gapi.client.HttpRequestFulfilled.prototype.body;
 /** @type {!Array<?>} */
gapi.client.HttpRequestFulfilled.prototype.headers;
 /** @type {number} */
gapi.client.HttpRequestFulfilled.prototype.status;
 /** @type {string} */
gapi.client.HttpRequestFulfilled.prototype.statusText;
/**
 * @record
 * @struct
 */
gapi.client.HttpRequestRejected = function() {};
 /** @type {{error: {message: string}}} */
gapi.client.HttpRequestRejected.prototype.result;
 /** @type {string} */
gapi.client.HttpRequestRejected.prototype.body;
 /** @type {!Array<?>} */
gapi.client.HttpRequestRejected.prototype.headers;
 /** @type {number} */
gapi.client.HttpRequestRejected.prototype.status;
 /** @type {string} */
gapi.client.HttpRequestRejected.prototype.statusText;
/**
 * @constructor
 * @struct
 */
gapi.client.HttpRequestPromise = function() {};

/**
 * @template TResult1, TResult2
 * @param {function(!gapi.client.HttpRequestFulfilled<T>): (TResult1|!PromiseLike<TResult1>)=} onfulfilled
 * @param {function(!gapi.client.HttpRequestRejected): (TResult2|!PromiseLike<TResult2>)=} onrejected
 * @param {?=} opt_context
 * @return {!Promise<(TResult1|TResult2)>}
 */
gapi.client.HttpRequestPromise.prototype.then = function(onfulfilled, onrejected, opt_context) {};
/**
 * @extends {gapi.client.HttpRequestPromise}
 * @constructor
 * @struct
 */
gapi.client.HttpRequest = function() {};

/**
 * Executes the request and runs the supplied callback on response.
 * @param {function(T, {body: string, headers: !Array<?>, status: number, statusText: string}): ?} callback The callback function which executes when the request succeeds or fails.
 * @return {void}
 */
gapi.client.HttpRequest.prototype.execute = function(callback) {};
/**
 * @constructor
 * @struct
 */
gapi.client.HttpBatch = function() {};

/**
 * Adds a gapi.client.HttpRequest to the batch.
 * @param {!gapi.client.HttpRequest<?>} httpRequest The HTTP request to add to this batch.
 * @param {{id: string, callback: function(?, ?): ?}=} opt_params extra parameters for this batch entry.
 * @return {void}
 */
gapi.client.HttpBatch.prototype.add = function(httpRequest, opt_params) {};

/**
 * Executes all requests in the batch. The supplied callback is executed on success or failure.
 * @param {function(?, string): ?} callback The callback to execute when the batch returns.
 * @return {void}
 */
gapi.client.HttpBatch.prototype.execute = function(callback) {};
/**
 * @constructor
 * @struct
 */
gapi.client.RpcRequest = function() {};

/**
 * Executes the request and runs the supplied callback with the response.
 * @param {function(?, string): void} callback The callback function which executes when the request succeeds or fails.
 * @return {void}
 */
gapi.client.RpcRequest.prototype.callback = function(callback) {};
