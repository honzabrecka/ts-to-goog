/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/discontinuous-range/index.d.ts:

/**
 * @constructor
 * @struct
 * Creates a discontinuous range at rangeStart, and ending at
 * rangeEnd. If rangeEnd is not specified, a range containing
 * only rangeStart is created.
 * @param {number} rangeStart The start of the range to create.
 * @param {number=} rangeEnd   The end of the range to create. Defaults to rangeStart.
 */
function DiscontinuousRange(rangeStart, rangeEnd) {}

/**
 * Adds the numbers from rangeStart to rangeEnd to the current range.
 * If rangeEnd is not defined, only rangeStart is added to the current range.
 * Adds a range to the current range.
 * @param {number|!DiscontinuousRange} rangeStart_or_rangeToAdd The first number to add to the range. / The range to union with the current range.
 * @param {number=} rangeEnd   The last number to add to the range. Defaults to rangeStart.
 * @return {!DiscontinuousRange} The range on which add was called. It contains the numbers from rangeStart to rangeEnd. / The range on which add was called. It contains the numbers in rangeToAdd.
 */
DiscontinuousRange.prototype.add = function(rangeStart_or_rangeToAdd, rangeEnd) {};

/**
 * Removes the numbers from rangeStart to rangeEnd to the current range.
 * If rangeEnd is not defined, only rangeStart is removed from the current range.
 * Removes rangeToRemove from the current range.
 * @param {number|!DiscontinuousRange} rangeStart_or_rangeToRemove The first number to remove from the range. / The range to exclude from the current range.
 * @param {number=} rangeEnd   The last number to remove from the range. Defaults to rangeStart.
 * @return {!DiscontinuousRange} The range on which subtract was called. It does not contain the numbers from rangeStart to rangeEnd. / The range on which subtract was called. It contains the numbers in rangeToRemove.
 */
DiscontinuousRange.prototype.subtract = function(rangeStart_or_rangeToRemove, rangeEnd) {};

/**
 * Returns the number in the discontinuous range at the specified index.
 * @param {number} index The index to lookup a number.
 * @return {number} A number in the range. null if index is greater than the number of elements in the range.
 */
DiscontinuousRange.prototype.index = function(index) {};

/**
 * Returns a string representation of this discontinuous range in the format
 * "[ rangeOneLow-rangeOneHigh, ... , rangeNLow-rangeNHigh ]"
 * @return {string} A string representation of this discontinuous range.
 */
DiscontinuousRange.prototype.toString = function() {};

/**
 * Returns a copy of this discontinuous range.
 * @return {!DiscontinuousRange} A deep clone of the current discontinuous range.
 */
DiscontinuousRange.prototype.clone = function() {};

/* TODO: ExportAssignment in  */
