/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/mssql/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */
/**
 * @record
 * @struct
 */
function ISqlType() {}
 /** @type {?} */
ISqlType.prototype.type;
/**
 * @extends {ISqlType}
 * @record
 * @struct
 */
function ISqlTypeWithNoParams() {}
 /** @type {?} */
ISqlTypeWithNoParams.prototype.type;
/**
 * @extends {ISqlType}
 * @record
 * @struct
 */
function ISqlTypeWithLength() {}
 /** @type {?} */
ISqlTypeWithLength.prototype.type;
 /** @type {number} */
ISqlTypeWithLength.prototype.length;
/**
 * @extends {ISqlType}
 * @record
 * @struct
 */
function ISqlTypeWithScale() {}
 /** @type {?} */
ISqlTypeWithScale.prototype.type;
 /** @type {number} */
ISqlTypeWithScale.prototype.scale;
/**
 * @extends {ISqlType}
 * @record
 * @struct
 */
function ISqlTypeWithPrecisionScale() {}
 /** @type {?} */
ISqlTypeWithPrecisionScale.prototype.type;
 /** @type {number} */
ISqlTypeWithPrecisionScale.prototype.precision;
 /** @type {number} */
ISqlTypeWithPrecisionScale.prototype.scale;
/**
 * @extends {ISqlType}
 * @record
 * @struct
 */
function ISqlTypeWithTvpType() {}
 /** @type {?} */
ISqlTypeWithTvpType.prototype.type;
 /** @type {?} */
ISqlTypeWithTvpType.prototype.tvpType;
/**
 * @record
 * @struct
 */
function ISqlTypeFactory() {}
/**
 * @extends {ISqlTypeFactory}
 * @record
 * @struct
 */
function ISqlTypeFactoryWithNoParams() {}

/* TODO: CallSignature:  */
/**
 * @extends {ISqlTypeFactory}
 * @record
 * @struct
 */
function ISqlTypeFactoryWithLength() {}

/* TODO: CallSignature:  */
/**
 * @extends {ISqlTypeFactory}
 * @record
 * @struct
 */
function ISqlTypeFactoryWithScale() {}

/* TODO: CallSignature:  */
/**
 * @extends {ISqlTypeFactory}
 * @record
 * @struct
 */
function ISqlTypeFactoryWithPrecisionScale() {}

/* TODO: CallSignature:  */
/**
 * @extends {ISqlTypeFactory}
 * @record
 * @struct
 */
function ISqlTypeFactoryWithTvpType() {}

/* TODO: CallSignature:  */
 /** @type {?} */
var VarChar;
 /** @type {?} */
var NVarChar;
 /** @type {?} */
var Text;
 /** @type {?} */
var Int;
 /** @type {?} */
var BigInt;
 /** @type {?} */
var TinyInt;
 /** @type {?} */
var SmallInt;
 /** @type {?} */
var Bit;
 /** @type {?} */
var Float;
 /** @type {?} */
var Numeric;
 /** @type {?} */
var Decimal;
 /** @type {?} */
var Real;
 /** @type {?} */
var Date;
 /** @type {?} */
var DateTime;
 /** @type {?} */
var DateTime2;
 /** @type {?} */
var DateTimeOffset;
 /** @type {?} */
var SmallDateTime;
 /** @type {?} */
var Time;
 /** @type {?} */
var UniqueIdentifier;
 /** @type {?} */
var SmallMoney;
 /** @type {?} */
var Money;
 /** @type {?} */
var Binary;
 /** @type {?} */
var VarBinary;
 /** @type {?} */
var Image;
 /** @type {?} */
var Xml;
 /** @type {?} */
var Char;
 /** @type {?} */
var NChar;
 /** @type {?} */
var NText;
 /** @type {?} */
var TVP;
 /** @type {?} */
var UDT;
 /** @type {?} */
var Geography;
 /** @type {?} */
var Geometry;
 /** @type {?} */
var Variant;
 /** @type {{VarChar: ?, NVarChar: ?, Text: ?, Int: ?, BigInt: ?, TinyInt: ?, SmallInt: ?, Bit: ?, Float: ?, Numeric: ?, Decimal: ?, Real: ?, Date: ?, DateTime: ?, DateTime2: ?, DateTimeOffset: ?, SmallDateTime: ?, Time: ?, UniqueIdentifier: ?, SmallMoney: ?, Money: ?, Binary: ?, VarBinary: ?, Image: ?, Xml: ?, Char: ?, NChar: ?, NText: ?, TVP: ?, UDT: ?, Geography: ?, Geometry: ?, Variant: ?}} */
var TYPES;
 /** @type {number} */
var MAX;
 /** @type {boolean} */
var fix;
 /** @type {?} */
var Promise;
/**
 * @record
 * @struct
 */
function IMap() {}

/**
 * @param {?} jstype
 * @param {?} sql
 * @return {void}
 */
IMap.prototype.register = function(jstype, sql) {};
 /** @type {?} */
var map;
 /** @type {!Array<string>} */
var DRIVERS;
/**
 * @record
 * @struct
 */
function IColumnMetadata() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IResult() {}
 /** @type {!Array<?>} */
IResult.prototype.recordsets;
 /** @type {?} */
IResult.prototype.recordset;
 /** @type {!Array<number>} */
IResult.prototype.rowsAffected;
 /** @type {?} */
IResult.prototype.output;
/**
 * @extends {IResult}
 * @record
 * @struct
 */
function IProcedureResult() {}
 /** @type {?} */
IProcedureResult.prototype.returnValue;
/**
 * @record
 * @struct
 */
function IRecordSet() {}
 /** @type {?} */
IRecordSet.prototype.columns;

/**
 * @return {!Table}
 */
IRecordSet.prototype.toTable = function() {};

/** @typedef {number} */
var IIsolationLevel;
 /** @type {{READ_UNCOMMITTED: number, READ_COMMITTED: number, REPEATABLE_READ: number, SERIALIZABLE: number, SNAPSHOT: number}} */
var ISOLATION_LEVEL;
/**
 * @record
 * @struct
 */
function IOptions() {}
 /** @type {boolean} */
IOptions.prototype.encrypt;
 /** @type {string} */
IOptions.prototype.instanceName;
 /** @type {boolean} */
IOptions.prototype.useUTC;
 /** @type {string} */
IOptions.prototype.tdsVersion;
 /** @type {string} */
IOptions.prototype.appName;
 /** @type {boolean} */
IOptions.prototype.abortTransactionOnError;
 /** @type {boolean} */
IOptions.prototype.trustedConnection;
/**
 * @record
 * @struct
 */
function IPool() {}
 /** @type {number} */
IPool.prototype.min;
 /** @type {number} */
IPool.prototype.max;
 /** @type {number} */
IPool.prototype.idleTimeoutMillis;
 /** @type {number} */
IPool.prototype.maxWaitingClients;
 /** @type {boolean} */
IPool.prototype.testOnBorrow;
 /** @type {number} */
IPool.prototype.acquireTimeoutMillis;
 /** @type {boolean} */
IPool.prototype.fifo;
 /** @type {number} */
IPool.prototype.priorityRange;
 /** @type {boolean} */
IPool.prototype.autostart;
 /** @type {number} */
IPool.prototype.evictionRunIntervalMillis;
 /** @type {number} */
IPool.prototype.numTestsPerRun;
 /** @type {number} */
IPool.prototype.softIdleTimeoutMillis;
 /** @type {?} */
IPool.prototype.Promise;
 /** @type {?} */
var pool;
/**
 * @record
 * @struct
 */
function config() {}
 /** @type {string} */
config.prototype.driver;
 /** @type {string} */
config.prototype.user;
 /** @type {string} */
config.prototype.password;
 /** @type {string} */
config.prototype.server;
 /** @type {number} */
config.prototype.port;
 /** @type {string} */
config.prototype.domain;
 /** @type {string} */
config.prototype.database;
 /** @type {number} */
config.prototype.connectionTimeout;
 /** @type {number} */
config.prototype.requestTimeout;
 /** @type {boolean} */
config.prototype.stream;
 /** @type {boolean} */
config.prototype.parseJSON;
 /** @type {?} */
config.prototype.options;
 /** @type {?} */
config.prototype.pool;

/**
 * @constructor
 * @struct
 * @param {?|string} config_or_connectionString
 * @param {function(?): void=} callback
 */
function ConnectionPool(config_or_connectionString, callback) {}
 /** @type {boolean} */
ConnectionPool.prototype.connected;
 /** @type {boolean} */
ConnectionPool.prototype.connecting;
 /** @type {string} */
ConnectionPool.prototype.driver;

/**
 * @param {!TemplateStringsArray} strings
 * @param {...?} interpolations
 * @return {!Promise<?>}
 */
ConnectionPool.prototype.query = function(strings, interpolations) {};

/**
 * @param {function(?): void=} callback
 * @return {!Promise<!ConnectionPool>|void}
 */
ConnectionPool.prototype.connect = function(callback) {};

/**
 * @param {function(?): void=} callback
 * @return {!Promise<void>|void}
 */
ConnectionPool.prototype.close = function(callback) {};

/**
 * @return {!Request}
 */
ConnectionPool.prototype.request = function() {};

/**
 * @constructor
 * @struct
 * @param {string} message
 * @param {?=} code
 */
function ConnectionError(message, code) {}
 /** @type {string} */
ConnectionError.prototype.name;
 /** @type {string} */
ConnectionError.prototype.message;
 /** @type {string} */
ConnectionError.prototype.code;
/**
 * @record
 * @struct
 */
function IColumnOptions() {}
 /** @type {boolean} */
IColumnOptions.prototype.nullable;
 /** @type {boolean} */
IColumnOptions.prototype.primary;
/**
 * @extends {ISqlType}
 * @record
 * @struct
 */
function IColumn() {}
 /** @type {string} */
IColumn.prototype.name;
 /** @type {boolean} */
IColumn.prototype.nullable;
 /** @type {boolean} */
IColumn.prototype.primary;
/**
 * @constructor
 * @struct
 */
function columns() {}

/**
 * @param {string} name
 * @param {(function(): ?|?)} type
 * @param {?=} options
 * @return {number}
 */
columns.prototype.add = function(name, type, options) {};

/** @typedef {!Array<(string|number|boolean|!Date|?)>} */
var IRow;
/**
 * @constructor
 * @struct
 */
function rows() {}

/**
 * @param {...(string|number|boolean|!Date|?)} row
 * @return {number}
 */
rows.prototype.add = function(row) {};

/**
 * @constructor
 * @struct
 * @param {string=} tableName
 */
function Table(tableName) {}
 /** @type {boolean} */
Table.prototype.create;
 /** @type {!columns} */
Table.prototype.columns;
 /** @type {!rows} */
Table.prototype.rows;
/**
 * @record
 * @struct
 */
function IRequestParameters() {}

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!ConnectionPool|!Transaction|!PreparedStatement=} connection_or_transaction_or_preparedStatement
 */
function Request(connection_or_transaction_or_preparedStatement) {}
 /** @type {!Transaction} */
Request.prototype.transaction;
 /** @type {!PreparedStatement} */
Request.prototype.pstatement;
 /** @type {?} */
Request.prototype.parameters;
 /** @type {boolean} */
Request.prototype.verbose;
 /** @type {boolean} */
Request.prototype.canceled;
 /** @type {?} */
Request.prototype.stream;

/**
 * @template Entity
 * @param {string} procedure
 * @param {function(?, ?, ?): void=} callback
 * @return {!Promise<?>|void}
 */
Request.prototype.execute = function(procedure, callback) {};

/**
 * @param {string} name
 * @param {?|(?|function(): ?)} value_or_type
 * @param {?=} value
 * @return {!Request}
 */
Request.prototype.input = function(name, value_or_type, value) {};

/**
 * @param {string} name
 * @param {(?|function(): ?)} type
 * @param {?=} value
 * @return {!Request}
 */
Request.prototype.output = function(name, type, value) {};

/**
 * @param {!NodeJS.WritableStream} stream
 * @return {!NodeJS.WritableStream}
 */
Request.prototype.pipe = function(stream) {};

/**
 * @template Entity
 * @param {string} command
 * @param {function(!Error, ?): void=} callback
 * @return {!Promise<?>|void}
 */
Request.prototype.query = function(command, callback) {};

/**
 * @template Entity
 * @param {string} batch
 * @param {function(!Error, ?): void|function(?, ?): void=} callback
 * @return {!Promise<?>|void}
 */
Request.prototype.batch = function(batch, callback) {};

/**
 * @param {!Table} table
 * @param {function(!Error, ?): void=} callback
 * @return {!Promise<number>|void}
 */
Request.prototype.bulk = function(table, callback) {};

/**
 * @return {void}
 */
Request.prototype.cancel = function() {};

/**
 * @constructor
 * @struct
 * @param {string} message
 * @param {?=} code
 */
function RequestError(message, code) {}
 /** @type {string} */
RequestError.prototype.name;
 /** @type {string} */
RequestError.prototype.message;
 /** @type {string} */
RequestError.prototype.code;

/**
 * @constructor
 * @struct
 * @param {!ConnectionPool=} connection
 */
function Transaction(connection) {}
 /** @type {number} */
Transaction.prototype.isolationLevel;

/**
 * @param {number=} isolationLevel
 * @param {function(?): void=} callback
 * @return {!Promise<void>|void}
 */
Transaction.prototype.begin = function(isolationLevel, callback) {};

/**
 * @param {function(?): void=} callback
 * @return {!Promise<void>|void}
 */
Transaction.prototype.commit = function(callback) {};

/**
 * @param {function(?): void=} callback
 * @return {!Promise<void>|void}
 */
Transaction.prototype.rollback = function(callback) {};

/**
 * @constructor
 * @struct
 * @param {string} message
 * @param {?=} code
 */
function TransactionError(message, code) {}
 /** @type {string} */
TransactionError.prototype.name;
 /** @type {string} */
TransactionError.prototype.message;
 /** @type {string} */
TransactionError.prototype.code;

/**
 * @constructor
 * @struct
 * @param {!ConnectionPool=} connection
 */
function PreparedStatement(connection) {}
 /** @type {!Transaction} */
PreparedStatement.prototype.transaction;
 /** @type {boolean} */
PreparedStatement.prototype.prepared;
 /** @type {string} */
PreparedStatement.prototype.statement;
 /** @type {?} */
PreparedStatement.prototype.parameters;
 /** @type {?} */
PreparedStatement.prototype.stream;

/**
 * @param {string} name
 * @param {(?|function(): ?)} type
 * @return {!PreparedStatement}
 */
PreparedStatement.prototype.input = function(name, type) {};

/**
 * @param {string} name
 * @param {(?|function(): ?)} type
 * @return {!PreparedStatement}
 */
PreparedStatement.prototype.output = function(name, type) {};

/**
 * @param {string=} statement
 * @param {function(!Error): void=} callback
 * @return {!Promise<void>|!PreparedStatement}
 */
PreparedStatement.prototype.prepare = function(statement, callback) {};

/**
 * @param {!Object} values
 * @param {function(!Error): void=} callback
 * @return {!Promise<void>|!Request}
 */
PreparedStatement.prototype.execute = function(values, callback) {};

/**
 * @param {function(!Error): void=} callback
 * @return {!Promise<void>|!PreparedStatement}
 */
PreparedStatement.prototype.unprepare = function(callback) {};

/**
 * @constructor
 * @struct
 * @param {string} message
 * @param {?=} code
 */
function PreparedStatementError(message, code) {}
 /** @type {string} */
PreparedStatementError.prototype.name;
 /** @type {string} */
PreparedStatementError.prototype.message;
 /** @type {string} */
PreparedStatementError.prototype.code;
