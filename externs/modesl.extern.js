/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/modesl/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {...?} args
 */
function Connection(args) {}

/**
 * @param {?} command
 * @param {!Array<string>} args
 * @param {?=} cb
 * @return {void}
 */
Connection.prototype.api = function(command, args, cb) {};

/**
 * @param {?} cb
 * @return {void}
 */
Connection.prototype.auth = function(cb) {};

/**
 * @param {?} command
 * @param {!Array<string>} args
 * @param {?=} jobid
 * @param {?=} cb
 * @return {void}
 */
Connection.prototype.bgapi = function(command, args, jobid, cb) {};

/**
 * @return {?}
 */
Connection.prototype.connected = function() {};

/**
 * @return {void}
 */
Connection.prototype.disconnect = function() {};

/**
 * @param {string} type
 * @param {string} events
 * @param {?=} cb
 * @return {void}
 */
Connection.prototype.events = function(type, events, cb) {};

/**
 * @param {?} app
 * @param {string=} arg
 * @param {string=} uuid
 * @param {?=} cb
 * @return {?}
 */
Connection.prototype.execute = function(app, arg, uuid, cb) {};

/**
 * @param {?} app
 * @param {string=} arg
 * @param {string=} uuid
 * @param {?=} cb
 * @return {?}
 */
Connection.prototype.executeAsync = function(app, arg, uuid, cb) {};

/**
 * @param {?} header
 * @param {?} value
 * @param {?=} cb
 * @return {void}
 */
Connection.prototype.filter = function(header, value, cb) {};

/**
 * @param {?} header
 * @param {?} value
 * @param {?=} cb
 * @return {void}
 */
Connection.prototype.filterDelete = function(header, value, cb) {};

/**
 * @return {?}
 */
Connection.prototype.getInfo = function() {};

/**
 * @param {?} options
 * @param {?=} cb
 * @return {void}
 */
Connection.prototype.message = function(options, cb) {};

/**
 * @param {?} options
 * @param {?=} cb
 * @return {void}
 */
Connection.prototype.originate = function(options, cb) {};

/**
 * @param {?=} cb
 * @return {void}
 */
Connection.prototype.recvEvent = function(cb) {};

/**
 * @param {?} ms
 * @param {?=} cb
 * @return {void}
 */
Connection.prototype.recvEventTimed = function(ms, cb) {};

/**
 * @param {?} command
 * @param {?} args
 * @return {void}
 */
Connection.prototype.send = function(command, args) {};

/**
 * @param {?} event
 * @param {?=} cb
 * @return {void}
 */
Connection.prototype.sendEvent = function(event, cb) {};

/**
 * @param {?} command
 * @param {?} args
 * @param {?=} cb
 * @return {void}
 */
Connection.prototype.sendRecv = function(command, args, cb) {};

/**
 * @param {?} value
 * @return {void}
 */
Connection.prototype.setAsyncExecute = function(value) {};

/**
 * @param {?} value
 * @return {void}
 */
Connection.prototype.setEventLock = function(value) {};

/**
 * @param {?} item
 * @param {?} format
 * @param {?=} cb
 * @return {void}
 */
Connection.prototype.show = function(item, format, cb) {};

/**
 * @return {?}
 */
Connection.prototype.socketDescriptor = function() {};

/**
 * @param {?} events
 * @param {?=} cb
 * @return {void}
 */
Connection.prototype.subscribe = function(events, cb) {};
/**
 * @record
 * @struct
 */
function Header() {}
 /** @type {string} */
Header.prototype.name;
 /** @type {string} */
Header.prototype.value;

/**
 * @constructor
 * @struct
 * @param {?} type
 * @param {?} subclass
 */
function Event(type, subclass) {}
 /** @type {!Array<?>} */
Event.prototype.headers;
 /** @type {?} */
Event.PRIORITY;

/**
 * @param {?} value
 * @return {?}
 */
Event.prototype.addBody = function(value) {};

/**
 * @param {?} name
 * @param {?} value
 * @return {?}
 */
Event.prototype.addHeader = function(name, value) {};

/**
 * @param {?} name
 * @return {?}
 */
Event.prototype.delHeader = function(name) {};

/**
 * @return {?}
 */
Event.prototype.firstHeader = function() {};

/**
 * @return {?}
 */
Event.prototype.getBody = function() {};

/**
 * @param {?} name
 * @return {string}
 */
Event.prototype.getHeader = function(name) {};

/**
 * @return {?}
 */
Event.prototype.getType = function() {};

/**
 * @return {?}
 */
Event.prototype.nextHeader = function() {};

/**
 * @param {?} format
 * @return {?}
 */
Event.prototype.serialize = function(format) {};

/**
 * @param {?} priority
 * @return {void}
 */
Event.prototype.setPriority = function(priority) {};

/**
 * @constructor
 * @struct
 * @param {?} socket
 */
function Parser(socket) {}

/**
 * @constructor
 * @struct
 * @param {?} opts
 * @param {?=} readycb
 */
function Server(opts, readycb) {}

/**
 * @param {?} callback
 * @return {void}
 */
Server.prototype.close = function(callback) {};

/**
 * @param {?} level
 * @return {void}
 */
function eslSetLogLevel(level) {}

/**
 * @param {?} level
 * @return {void}
 */
function setLogLevel(level) {}
