/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/lscache/index.d.ts:
/**
 * @record
 * @struct
 */
function LSCache() {}

/**
 * Stores the value in localStorage. Expires after specified number of minutes.
 * @param {string} key
 * @param {?} value
 * @param {number=} time
 * @return {void}
 */
LSCache.prototype.set = function(key, value, time) {};

/**
 * Retrieves specified value from localStorage, if not expired.
 * @param {string} key
 * @return {?}
 */
LSCache.prototype.get = function(key) {};

/**
 * Removes a value from localStorage.
 * Equivalent to 'delete' in memcache, but that's a keyword in JS.
 * @param {string} key
 * @return {void}
 */
LSCache.prototype.remove = function(key) {};

/**
 * Flushes all lscache items and expiry markers without affecting rest of localStorage
 * @return {void}
 */
LSCache.prototype.flush = function() {};

/**
 * Flushes expired lscache items and expiry markers without affecting rest of localStorage
 * @return {void}
 */
LSCache.prototype.flushExpired = function() {};

/**
 * Appends CACHE_PREFIX so lscache will partition data in to different buckets.
 * @param {string} bucket
 * @return {void}
 */
LSCache.prototype.setBucket = function(bucket) {};

/**
 * Resets the string being appended to CACHE_PREFIX so lscache will use the default storage behavior.
 * @return {void}
 */
LSCache.prototype.resetBucket = function() {};

/**
 * Test if the current browser supports localStorage
 * @return {boolean}
 */
LSCache.prototype.supported = function() {};

/**
 * Enable/Disable warning if set fails
 * @param {boolean} enabled
 * @return {void}
 */
LSCache.prototype.enableWarnings = function(enabled) {};
 /** @type {!LSCache} */
var lscache;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "lscache"
/** @const */
tsickle_declare_module.lscache = {};
 /** @type {!LSCache} */
tsickle_declare_module.lscache.lscache;

/* TODO: ExportAssignment in tsickle_declare_module.lscache */
