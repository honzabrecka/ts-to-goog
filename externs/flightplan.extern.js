/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/flightplan/index.d.ts:
 /** @type {!FlightplanInterfaces.Flightplan} */
var flightplan;
/** @const */
var FlightplanInterfaces = {};
/**
 * @record
 * @struct
 */
FlightplanInterfaces.CommandOptions = function() {};
 /** @type {boolean} */
FlightplanInterfaces.CommandOptions.prototype.silent;
 /** @type {boolean} */
FlightplanInterfaces.CommandOptions.prototype.failsafe;
/**
 * @extends {FlightplanInterfaces.CommandOptions}
 * @record
 * @struct
 */
FlightplanInterfaces.SudoOptions = function() {};
 /** @type {string} */
FlightplanInterfaces.SudoOptions.prototype.user;
/**
 * @record
 * @struct
 */
FlightplanInterfaces.PromptOptions = function() {};
 /** @type {boolean} */
FlightplanInterfaces.PromptOptions.prototype.hidden;
 /** @type {boolean} */
FlightplanInterfaces.PromptOptions.prototype.required;
/**
 * @record
 * @struct
 */
FlightplanInterfaces.CommandResult = function() {};
 /** @type {number} */
FlightplanInterfaces.CommandResult.prototype.code;
 /** @type {string} */
FlightplanInterfaces.CommandResult.prototype.stdout;
 /** @type {string} */
FlightplanInterfaces.CommandResult.prototype.stderr;
/**
 * @record
 * @struct
 */
FlightplanInterfaces.Transport = function() {};
 /** @type {!FlightplanInterfaces.Host} */
FlightplanInterfaces.Transport.prototype.runtime;

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.exec = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.SudoOptions=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.sudo = function(command, options) {};

/**
 * @param {!FlightplanInterfaces.CommandResult|!Array<!FlightplanInterfaces.CommandResult>|!Array<string>} files
 * @param {string} remoteDir
 * @param {!FlightplanInterfaces.CommandOptions=} options
 * @return {!Array<!FlightplanInterfaces.CommandResult>}
 */
FlightplanInterfaces.Transport.prototype.transfer = function(files, remoteDir, options) {};

/**
 * @param {string} message
 * @param {!FlightplanInterfaces.PromptOptions=} options
 * @return {string}
 */
FlightplanInterfaces.Transport.prototype.prompt = function(message, options) {};

/**
 * @param {function(function(?): void): void} fn
 * @return {?}
 */
FlightplanInterfaces.Transport.prototype.waitFor = function(fn) {};

/**
 * @param {string|!FlightplanInterfaces.CommandOptions} command_or_options
 * @param {function(): void|!FlightplanInterfaces.CommandOptions} fn_or_options
 * @param {function(): void=} fn
 * @return {void}
 */
FlightplanInterfaces.Transport.prototype.with = function(command_or_options, fn_or_options, fn) {};

/**
 * @return {void}
 */
FlightplanInterfaces.Transport.prototype.silent = function() {};

/**
 * @return {void}
 */
FlightplanInterfaces.Transport.prototype.verbose = function() {};

/**
 * @return {void}
 */
FlightplanInterfaces.Transport.prototype.failsafe = function() {};

/**
 * @param {string} message
 * @return {void}
 */
FlightplanInterfaces.Transport.prototype.log = function(message) {};

/**
 * @param {string} message
 * @return {void}
 */
FlightplanInterfaces.Transport.prototype.debug = function(message) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.awk = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.cat = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.cd = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.chgrp = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.chmod = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.chown = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.cp = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.echo = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.find = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.ftp = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.grep = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.groups = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.hostname = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.kill = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.ln = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.ls = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.mkdir = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.mv = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.ps = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.pwd = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.rm = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.rmdir = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.scp = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.sed = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.tail = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.tar = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.touch = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.unzip = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.whoami = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.zip = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.git = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.hg = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.node = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.npm = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.rsync = function(command, options) {};

/**
 * @param {string} command
 * @param {!FlightplanInterfaces.CommandOptions|{exec: ?}=} options
 * @return {!FlightplanInterfaces.CommandResult}
 */
FlightplanInterfaces.Transport.prototype.svn = function(command, options) {};
/**
 * @record
 * @struct
 */
FlightplanInterfaces.TargetOptions = function() {};
 /** @type {string} */
FlightplanInterfaces.TargetOptions.prototype.host;
 /** @type {string} */
FlightplanInterfaces.TargetOptions.prototype.username;
 /** @type {string} */
FlightplanInterfaces.TargetOptions.prototype.agent;
 /** @type {boolean} */
FlightplanInterfaces.TargetOptions.prototype.failsafe;
/**
 * @record
 * @struct
 */
FlightplanInterfaces.Runtime = function() {};
 /** @type {string} */
FlightplanInterfaces.Runtime.prototype.task;
 /** @type {string} */
FlightplanInterfaces.Runtime.prototype.target;
 /** @type {!Array<!FlightplanInterfaces.Host>} */
FlightplanInterfaces.Runtime.prototype.hosts;
 /** @type {?} */
FlightplanInterfaces.Runtime.prototype.options;
/**
 * @record
 * @struct
 */
FlightplanInterfaces.Host = function() {};
 /** @type {string} */
FlightplanInterfaces.Host.prototype.host;
 /** @type {number} */
FlightplanInterfaces.Host.prototype.port;
/**
 * @record
 * @struct
 */
FlightplanInterfaces.Flightplan = function() {};
 /** @type {!FlightplanInterfaces.Runtime} */
FlightplanInterfaces.Flightplan.prototype.runtime;

/**
 * @param {function(!FlightplanInterfaces.Transport): void|string|!Array<string>} fn_or_task
 * @param {function(!FlightplanInterfaces.Transport): void=} fn
 * @return {!FlightplanInterfaces.Flightplan}
 */
FlightplanInterfaces.Flightplan.prototype.local = function(fn_or_task, fn) {};

/**
 * @param {function(!FlightplanInterfaces.Transport): void|string|!Array<string>} fn_or_task
 * @param {function(!FlightplanInterfaces.Transport): void=} fn
 * @return {!FlightplanInterfaces.Flightplan}
 */
FlightplanInterfaces.Flightplan.prototype.remote = function(fn_or_task, fn) {};

/**
 * @param {string} name
 * @param {!FlightplanInterfaces.TargetOptions|!Array<!FlightplanInterfaces.TargetOptions>|function(function(?): void): void} options_or_fn
 * @return {!FlightplanInterfaces.Flightplan}
 */
FlightplanInterfaces.Flightplan.prototype.target = function(name, options_or_fn) {};

/**
 * @param {string=} message
 * @return {void}
 */
FlightplanInterfaces.Flightplan.prototype.abort = function(message) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "flightplan"
/** @const */
tsickle_declare_module.flightplan = {};

/* TODO: ExportAssignment in tsickle_declare_module.flightplan */
