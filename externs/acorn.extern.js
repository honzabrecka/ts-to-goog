/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/acorn/index.d.ts:

/* TODO: NamespaceExportDeclaration in  */

/* TODO: ExportAssignment in  */

/* TODO: ImportDeclaration in  */
/** @const */
var acorn = {};
/**
 * @record
 * @struct
 */
acorn.PlainObject = function() {};

/* TODO: IndexSignature: acorn */
/**
 * @record
 * @struct
 */
acorn.PluginsObject = function() {};

/* TODO: IndexSignature: acorn */
/**
 * @record
 * @struct
 */
acorn.Options = function() {};
 /** @type {number} */
acorn.Options.prototype.ecmaVersion;
 /** @type {string} */
acorn.Options.prototype.sourceType;
 /** @type {function(number, ?): void} */
acorn.Options.prototype.onInsertedSemicolon;
 /** @type {function(number, ?): void} */
acorn.Options.prototype.onTrailingComma;
 /** @type {boolean} */
acorn.Options.prototype.allowReserved;
 /** @type {boolean} */
acorn.Options.prototype.allowReturnOutsideFunction;
 /** @type {boolean} */
acorn.Options.prototype.allowImportExportEverywhere;
 /** @type {boolean} */
acorn.Options.prototype.allowHashBang;
 /** @type {boolean} */
acorn.Options.prototype.locations;
 /** @type {(function(!acorn.Token): ?|!Array<!acorn.Token>)} */
acorn.Options.prototype.onToken;
 /** @type {(function(boolean, string, number, number, ?, ?): void|!Array<!acorn.Comment>)} */
acorn.Options.prototype.onComment;
 /** @type {boolean} */
acorn.Options.prototype.ranges;
 /** @type {?} */
acorn.Options.prototype.program;
 /** @type {string} */
acorn.Options.prototype.sourceFile;
 /** @type {string} */
acorn.Options.prototype.directSourceFile;
 /** @type {boolean} */
acorn.Options.prototype.preserveParens;
 /** @type {!acorn.PlainObject} */
acorn.Options.prototype.plugins;

/**
 * @constructor
 * @struct
 * @param {!acorn.Options} options
 * @param {string} input
 * @param {number=} startPos
 */
acorn.Parser = function(options, input, startPos) {};

/**
 * @return {?}
 */
acorn.Parser.prototype.parse = function() {};
 /** @type {!acorn.PluginsObject} */
acorn.plugins;
 /** @type {!acorn.Options} */
acorn.defaultOptions;

/**
 * @constructor
 * @struct
 * @param {number} line
 * @param {number} col
 */
acorn.Position = function(line, col) {};
 /** @type {number} */
acorn.Position.prototype.line;
 /** @type {number} */
acorn.Position.prototype.column;

/**
 * @param {number} n
 * @return {!acorn.Position}
 */
acorn.Position.prototype.offset = function(n) {};

/**
 * @constructor
 * @struct
 * @param {!acorn.Parser} p
 * @param {!acorn.Position} start
 * @param {!acorn.Position} end
 */
acorn.SourceLocation = function(p, start, end) {};
 /** @type {!acorn.Position} */
acorn.SourceLocation.prototype.start;
 /** @type {!acorn.Position} */
acorn.SourceLocation.prototype.end;
 /** @type {string} */
acorn.SourceLocation.prototype.source;

/**
 * @param {string} input
 * @param {number} offset
 * @return {?}
 */
acorn.getLineInfo = function(input, offset) {};

/**
 * @constructor
 * @struct
 * @param {!acorn.Parser} parser
 * @param {number} pos
 * @param {number} loc
 */
acorn.Node = function(parser, pos, loc) {};
 /** @type {string} */
acorn.Node.prototype.type;
 /** @type {number} */
acorn.Node.prototype.start;
 /** @type {number} */
acorn.Node.prototype.end;
 /** @type {?} */
acorn.Node.prototype.loc;
 /** @type {string} */
acorn.Node.prototype.sourceFile;
 /** @type {!Array<?>} */
acorn.Node.prototype.range;
/**
 * @record
 * @struct
 */
acorn.TokeTypeConfig = function() {};
 /** @type {string} */
acorn.TokeTypeConfig.prototype.keyword;
 /** @type {boolean} */
acorn.TokeTypeConfig.prototype.beforeExpr;
 /** @type {boolean} */
acorn.TokeTypeConfig.prototype.startsExpr;
 /** @type {boolean} */
acorn.TokeTypeConfig.prototype.isLoop;
 /** @type {boolean} */
acorn.TokeTypeConfig.prototype.isAssign;
 /** @type {boolean} */
acorn.TokeTypeConfig.prototype.prefix;
 /** @type {boolean} */
acorn.TokeTypeConfig.prototype.postfix;
 /** @type {number} */
acorn.TokeTypeConfig.prototype.binop;

/**
 * @constructor
 * @struct
 * @param {string} label
 * @param {!acorn.TokeTypeConfig=} conf
 */
acorn.TokenType = function(label, conf) {};
 /** @type {string} */
acorn.TokenType.prototype.label;
 /** @type {string} */
acorn.TokenType.prototype.keyword;
 /** @type {boolean} */
acorn.TokenType.prototype.beforeExpr;
 /** @type {boolean} */
acorn.TokenType.prototype.startsExpr;
 /** @type {boolean} */
acorn.TokenType.prototype.isLoop;
 /** @type {boolean} */
acorn.TokenType.prototype.isAssign;
 /** @type {boolean} */
acorn.TokenType.prototype.prefix;
 /** @type {boolean} */
acorn.TokenType.prototype.postfix;
 /** @type {number} */
acorn.TokenType.prototype.binop;
 /** @type {function(!acorn.TokenType): void} */
acorn.TokenType.prototype.updateContext;
 /** @type {{num: !acorn.TokenType, regexp: !acorn.TokenType, string: !acorn.TokenType, name: !acorn.TokenType, eof: !acorn.TokenType, bracketL: !acorn.TokenType, bracketR: !acorn.TokenType, braceL: !acorn.TokenType, braceR: !acorn.TokenType, parenL: !acorn.TokenType, parenR: !acorn.TokenType, comma: !acorn.TokenType, semi: !acorn.TokenType, colon: !acorn.TokenType, dot: !acorn.TokenType, question: !acorn.TokenType, arrow: !acorn.TokenType, template: !acorn.TokenType, ellipsis: !acorn.TokenType, backQuote: !acorn.TokenType, dollarBraceL: !acorn.TokenType, eq: !acorn.TokenType, assign: !acorn.TokenType, incDec: !acorn.TokenType, prefix: !acorn.TokenType, logicalOR: !acorn.TokenType, logicalAND: !acorn.TokenType, bitwiseOR: !acorn.TokenType, bitwiseXOR: !acorn.TokenType, bitwiseAND: !acorn.TokenType, equality: !acorn.TokenType, relational: !acorn.TokenType, bitShift: !acorn.TokenType, plusMin: !acorn.TokenType, modulo: !acorn.TokenType, star: !acorn.TokenType, slash: !acorn.TokenType, starstar: !acorn.TokenType, _break: !acorn.TokenType, _case: !acorn.TokenType, _catch: !acorn.TokenType, _continue: !acorn.TokenType, _debugger: !acorn.TokenType, _default: !acorn.TokenType, _do: !acorn.TokenType, _else: !acorn.TokenType, _finally: !acorn.TokenType, _for: !acorn.TokenType, _function: !acorn.TokenType, _if: !acorn.TokenType, _return: !acorn.TokenType, _switch: !acorn.TokenType, _throw: !acorn.TokenType, _try: !acorn.TokenType, _var: !acorn.TokenType, _const: !acorn.TokenType, _while: !acorn.TokenType, _with: !acorn.TokenType, _new: !acorn.TokenType, _this: !acorn.TokenType, _super: !acorn.TokenType, _class: !acorn.TokenType, _extends: !acorn.TokenType, _export: !acorn.TokenType, _import: !acorn.TokenType, _null: !acorn.TokenType, _true: !acorn.TokenType, _false: !acorn.TokenType, _in: !acorn.TokenType, _instanceof: !acorn.TokenType, _typeof: !acorn.TokenType, _void: !acorn.TokenType, _delete: !acorn.TokenType}} */
acorn.tokTypes;

/**
 * @constructor
 * @struct
 * @param {string} token
 * @param {boolean} isExpr
 * @param {boolean} preserveSpace
 * @param {function(!acorn.Parser): void} override
 */
acorn.TokContext = function(token, isExpr, preserveSpace, override) {};
 /** @type {{b_stat: !acorn.TokContext, b_expr: !acorn.TokContext, b_tmpl: !acorn.TokContext, p_stat: !acorn.TokContext, p_expr: !acorn.TokContext, q_tmpl: !acorn.TokContext, f_expr: !acorn.TokContext}} */
acorn.tokContexts;

/**
 * @param {number} code
 * @param {boolean=} astral
 * @return {boolean}
 */
acorn.isIdentifierStart = function(code, astral) {};

/**
 * @param {number} code
 * @param {boolean=} astral
 * @return {boolean}
 */
acorn.isIdentifierChar = function(code, astral) {};
/**
 * @record
 * @struct
 */
acorn.AbstractToken = function() {};
 /** @type {number} */
acorn.AbstractToken.prototype.start;
 /** @type {number} */
acorn.AbstractToken.prototype.end;
 /** @type {!acorn.SourceLocation} */
acorn.AbstractToken.prototype.loc;
 /** @type {!Array<?>} */
acorn.AbstractToken.prototype.range;
/**
 * @extends {acorn.AbstractToken}
 * @record
 * @struct
 */
acorn.Comment = function() {};
 /** @type {string} */
acorn.Comment.prototype.type;
 /** @type {string} */
acorn.Comment.prototype.value;

/**
 * @constructor
 * @struct
 * @param {!acorn.Parser} p
 */
acorn.Token = function(p) {};
 /** @type {!acorn.TokenType} */
acorn.Token.prototype.type;
 /** @type {?} */
acorn.Token.prototype.value;

/**
 * @param {number} code
 * @return {boolean}
 */
acorn.isNewLine = function(code) {};
 /** @type {!RegExp} */
acorn.lineBreak;
 /** @type {!RegExp} */
acorn.lineBreakG;
 /** @type {string} */
acorn.version;
/**
 * @record
 * @struct
 */
acorn.IParse = function() {};

/* TODO: CallSignature: acorn */
 /** @type {!acorn.IParse} */
acorn.parse;

/**
 * @param {string} input
 * @param {number=} pos
 * @param {!acorn.Options=} options
 * @return {?}
 */
acorn.parseExpressionAt = function(input, pos, options) {};
/**
 * @record
 * @struct
 */
acorn.ITokenizer = function() {};

/**
 * @return {!acorn.Token}
 */
acorn.ITokenizer.prototype.getToken = function() {};

/**
 * @return {!Iterator<!acorn.Token>}
 */
acorn.ITokenizer.prototype[Symbol.iterator] = function() {};

/**
 * @param {string} input
 * @param {!acorn.Options} options
 * @return {!acorn.ITokenizer}
 */
acorn.tokenizer = function(input, options) {};
 /** @type {!acorn.IParse} */
acorn.parse_dammit;
 /** @type {!acorn.ILooseParserClass} */
acorn.LooseParser;
 /** @type {!acorn.PluginsObject} */
acorn.pluginsLoose;
/**
 * @record
 * @struct
 */
acorn.ILooseParserClass = function() {};

/* TODO: ConstructSignature: acorn */
/**
 * @record
 * @struct
 */
acorn.ILooseParser = function() {};

/**
 * @param {!acorn.IParse} parse
 * @param {!acorn.ILooseParserClass} parser
 * @param {!acorn.PluginsObject} plugins
 * @return {void}
 */
acorn.addLooseExports = function(parse, parser, plugins) {};
