/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/node-common-errors/index.d.ts:

/* TODO: ImportDeclaration in  */

/** @typedef {?} */
var GenerateMessageMethod;

/**
 * Modifies an error's stack to include the current stack and logs it to
 * stderr. Useful for logging errors received by a callback.
 * 
 * @param {?} err     any error or error message received from a callback
 * @param {string=} message any message you'd like to prepend
 * @return {?} err
 */
function log(err, message) {}

/**
 * @param {?} err
 * @param {?} cb
 * @return {void}
 */
function logError(err, cb) {}

/**
 * Modifies an error's stack to include the current stack without logging
 * it. Useful for logging errors received by a callback.
 * 
 * @param {?} err any error or error message received from a callback
 * @return {?} err
 */
function prependCurrentStack(err) {}
/** @const */
var helpers = {};

/**
 * Simple interface for generating a new Error class type.
 * @param {string} name The full name of the new Error class
 * @param {?=} options
 * @return {?}
 */
helpers.generateClass = function(name, options) {};
/** @const */
var middleware = {};

/**
 * Express middleware for preventing the web server from crashing when
 * an error is thrown from an asynchronous context. Any error that would
 * have caused a crash is logged to stderr.
 * @param {?} errorHandler
 * @return {void}
 */
middleware.crashProtector = function(errorHandler) {};

/**
 * Express middleware that translates common errors into HTTP status
 * codes and messages.
 * @param {?} err
 * @param {!e.Request} req
 * @param {!e.Response} res
 * @param {!e.NextFunction} next
 * @return {void}
 */
middleware.errorHandler = function(err, req, res, next) {};

/**
 * @constructor
 * @struct
 * @param {string} entityName
 * @param {?=} inner_error the Error instance that caused the current error.
 *                    Stack trace will be appended.
 */
function Error(entityName, inner_error) {}

/**
 * @constructor
 * @struct
 * @param {string} entityName the entity that owns the protected resource
 * @param {...string} args       the fields or attributes that are already in use
 */
function AlreadyInUseError(entityName, args) {}

/**
 * @constructor
 * @struct
 * @param {string} argumentName the name of the argument that has a problem
 * @param {?=} inner_error  the Error instance that caused the current error.
 *                     Stack trace will be appended.
 */
function ArgumentError(argumentName, inner_error) {}

/**
 * @constructor
 * @struct
 * @param {string} argumentName the name of the argument that is null
 * @param {?=} inner_error  the Error instance that caused the current error.
 *                     Stack trace will be appended.
 */
function ArgumentNullError(argumentName, inner_error) {}

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current error.
 *                    Stack trace will be appended.
 */
function AuthenticationRequiredError(message, inner_error) {}

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current error.
 *                    Stack trace will be appended.
 */
function ConnectionError(message, inner_error) {}

/**
 * @constructor
 * @struct
 * Figure out a proper status code and message from a given error. To
 * change the mappings, modify HttpStatusError.message_map and
 * HttpStatusError.code_map
 * 
 * @param {number|?} status_code_or_err any HTTP status code integer / any instanceof Error
 * @param {string|!e.Request=} message_or_req     any message / the request object
 */
function HttpStatusError(status_code_or_err, message_or_req) {}

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current error.
 *                    Stack trace will be appended.
 */
function InvalidOperationError(message, inner_error) {}

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current error.
 *                    Stack trace will be appended.
 */
function SocketError(message, inner_error) {}

/**
 * @constructor
 * @struct
 * @param {string} entity_name a description for what was not found
 * @param {?=} inner_error the Error instance that caused the current error.
 *                    Stack trace will be appended.
 */
function NotFoundError(entity_name, inner_error) {}

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current error.
 *                    Stack trace will be appended.
 */
function NotImplementedError(message, inner_error) {}

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current error.
 *                    Stack trace will be appended.
 */
function NotPermittedError(message, inner_error) {}

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current error.
 *                    Stack trace will be appended.
 */
function NotSupportedError(message, inner_error) {}

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current error.
 *                    Stack trace will be appended.
 */
function OutOfMemoryError(message, inner_error) {}

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current error.
 *                    Stack trace will be appended.
 */
function RangeError(message, inner_error) {}

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current error.
 *                    Stack trace will be appended.
 */
function ReferenceError(message, inner_error) {}

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current error.
 *                    Stack trace will be appended.
 */
function StackOverflowError(message, inner_error) {}

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current error.
 *                    Stack trace will be appended.
 */
function SyntaxError(message, inner_error) {}

/**
 * @constructor
 * @struct
 * @param {string} time        a time duration
 * @param {?=} inner_error the Error instance that caused the current error.
 *                    Stack trace will be appended.
 */
function TimeoutError(time, inner_error) {}

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current error.
 *                    Stack trace will be appended.
 */
function TypeError(message, inner_error) {}

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current error.
 *                    Stack trace will be appended.
 */
function URIError(message, inner_error) {}

/**
 * @constructor
 * @struct
 * @param {string} message any message
 * @param {string=} code    an optional error code
 * @param {string=} field   an optional description of the data
 */
function ValidationError(message, code, field) {}

/**
 * add an error object to the errors array
 * @param {?} error
 * @return {?}
 */
ValidationError.prototype.addError = function(error) {};

/**
 * append an array of error objects to the errors array
 * @param {!Array<?>} errors
 * @return {?}
 */
ValidationError.prototype.addErrors = function(errors) {};
/** @const */
var data = {};

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current
 *                    error. Stack trace will be appended.
 */
data.DataError = function(message, inner_error) {};

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current
 *                    error. Stack trace will be appended.
 */
data.MemcachedError = function(message, inner_error) {};

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current
 *                    error. Stack trace will be appended.
 */
data.MongoDBError = function(message, inner_error) {};

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current
 *                    error. Stack trace will be appended.
 */
data.RedisError = function(message, inner_error) {};

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current
 *                    error. Stack trace will be appended.
 */
data.RollbackError = function(message, inner_error) {};

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current
 *                    error. Stack trace will be appended.
 */
data.SQLError = function(message, inner_error) {};

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current
 *                    error. Stack trace will be appended.
 */
data.TransactionError = function(message, inner_error) {};
/** @const */
var io = {};

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current
 *                    error. Stack trace will be appended.
 */
io.IOError = function(message, inner_error) {};

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current
 *                    error. Stack trace will be appended.
 */
io.DirectoryNotFoundError = function(message, inner_error) {};

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current
 *                    error. Stack trace will be appended.
 */
io.DriveNotFoundError = function(message, inner_error) {};

/**
 * @constructor
 * @struct
 * @param {string} message     any message
 * @param {?=} inner_error the Error instance that caused the current
 *                    error. Stack trace will be appended.
 */
io.EndOfStreamError = function(message, inner_error) {};

/**
 * @constructor
 * @struct
 * @param {string} file_name   any message
 * @param {?=} inner_error the Error instance that caused the current
 *                    error. Stack trace will be appended.
 */
io.FileLoadError = function(file_name, inner_error) {};

/**
 * @constructor
 * @struct
 * @param {string} file_name   any message
 * @param {?=} inner_error the Error instance that caused the current
 *                    error. Stack trace will be appended.
 */
io.FileNotFoundError = function(file_name, inner_error) {};
