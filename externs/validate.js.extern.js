/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/validate.js/index.d.ts:
/** @const */
var ValidateJS = {};
/**
 * @record
 * @struct
 */
ValidateJS.Validator = function() {};
 /** @type {(string|function(?, ?, ?, ?, ?): string)} */
ValidateJS.Validator.prototype.message;
/**
 * @extends {ValidateJS.Validator}
 * @record
 * @struct
 */
ValidateJS.Validator.Date = function() {};
 /** @type {string} */
ValidateJS.Validator.Date.prototype.earliest;
 /** @type {string} */
ValidateJS.Validator.Date.prototype.latest;
 /** @type {string} */
ValidateJS.Validator.Date.prototype.notValid;
 /** @type {string} */
ValidateJS.Validator.Date.prototype.tooEarly;
 /** @type {string} */
ValidateJS.Validator.Date.prototype.tooLate;
/**
 * @extends {ValidateJS.Validator.Date}
 * @record
 * @struct
 */
ValidateJS.Validator.DateTime = function() {};
 /** @type {boolean} */
ValidateJS.Validator.DateTime.prototype.dateOnly;
/**
 * @extends {ValidateJS.Validator}
 * @record
 * @struct
 */
ValidateJS.Validator.Email = function() {};
/**
 * @extends {ValidateJS.Validator}
 * @record
 * @struct
 */
ValidateJS.Validator.Equality = function() {};
 /** @type {string} */
ValidateJS.Validator.Equality.prototype.attribute;
 /** @type {function(?, ?): boolean} */
ValidateJS.Validator.Equality.prototype.comparator;
/**
 * @extends {ValidateJS.Validator}
 * @record
 * @struct
 */
ValidateJS.Validator.Exclusion = function() {};
 /** @type {(!Array<?>|!Object<string,?>)} */
ValidateJS.Validator.Exclusion.prototype.within;
/**
 * @extends {ValidateJS.Validator}
 * @record
 * @struct
 */
ValidateJS.Validator.Format = function() {};
 /** @type {(string|!RegExp)} */
ValidateJS.Validator.Format.prototype.pattern;
 /** @type {string} */
ValidateJS.Validator.Format.prototype.flags;
/**
 * @extends {ValidateJS.Validator}
 * @record
 * @struct
 */
ValidateJS.Validator.Inclusion = function() {};
 /** @type {(!Array<?>|!Object<string,?>)} */
ValidateJS.Validator.Inclusion.prototype.within;
/**
 * @extends {ValidateJS.Validator}
 * @record
 * @struct
 */
ValidateJS.Validator.Length = function() {};
 /** @type {number} */
ValidateJS.Validator.Length.prototype.is;
 /** @type {number} */
ValidateJS.Validator.Length.prototype.minimum;
 /** @type {number} */
ValidateJS.Validator.Length.prototype.maximum;
 /** @type {string} */
ValidateJS.Validator.Length.prototype.notValid;
 /** @type {string} */
ValidateJS.Validator.Length.prototype.tooLong;
 /** @type {string} */
ValidateJS.Validator.Length.prototype.tooShort;
 /** @type {string} */
ValidateJS.Validator.Length.prototype.wrongLength;
 /** @type {function((string|!Array<?>)): (string|!Array<?>)} */
ValidateJS.Validator.Length.prototype.tokenizer;
/**
 * @extends {ValidateJS.Validator}
 * @record
 * @struct
 */
ValidateJS.Validator.Numericality = function() {};
 /** @type {boolean} */
ValidateJS.Validator.Numericality.prototype.onlyInteger;
 /** @type {boolean} */
ValidateJS.Validator.Numericality.prototype.strict;
 /** @type {number} */
ValidateJS.Validator.Numericality.prototype.greaterThan;
 /** @type {number} */
ValidateJS.Validator.Numericality.prototype.greaterThanOrEqualTo;
 /** @type {number} */
ValidateJS.Validator.Numericality.prototype.equalTo;
 /** @type {number} */
ValidateJS.Validator.Numericality.prototype.lessThanOrEqualTo;
 /** @type {number} */
ValidateJS.Validator.Numericality.prototype.lessThan;
 /** @type {number} */
ValidateJS.Validator.Numericality.prototype.divisibleBy;
 /** @type {boolean} */
ValidateJS.Validator.Numericality.prototype.odd;
 /** @type {boolean} */
ValidateJS.Validator.Numericality.prototype.even;
 /** @type {string} */
ValidateJS.Validator.Numericality.prototype.notValid;
 /** @type {string} */
ValidateJS.Validator.Numericality.prototype.notInteger;
 /** @type {string} */
ValidateJS.Validator.Numericality.prototype.notGreaterThan;
 /** @type {string} */
ValidateJS.Validator.Numericality.prototype.notGreaterThanOrEqualTo;
 /** @type {string} */
ValidateJS.Validator.Numericality.prototype.notEqualTo;
 /** @type {string} */
ValidateJS.Validator.Numericality.prototype.notLessThanOrEqualTo;
 /** @type {string} */
ValidateJS.Validator.Numericality.prototype.notLessThan;
 /** @type {string} */
ValidateJS.Validator.Numericality.prototype.notDivisibleBy;
 /** @type {string} */
ValidateJS.Validator.Numericality.prototype.notOdd;
 /** @type {string} */
ValidateJS.Validator.Numericality.prototype.notEven;
/**
 * @extends {ValidateJS.Validator}
 * @record
 * @struct
 */
ValidateJS.Validator.Presence = function() {};
/**
 * @extends {ValidateJS.Validator}
 * @record
 * @struct
 */
ValidateJS.Validator.Url = function() {};
 /** @type {!Array<?>} */
ValidateJS.Validator.Url.prototype.schemes;
 /** @type {boolean} */
ValidateJS.Validator.Url.prototype.allowLocal;
/**
 * @record
 * @struct
 */
ValidateJS.Field = function() {};
 /** @type {(boolean|!ValidateJS.Validator.Date|function(?, ?, ?, ?, ?): !ValidateJS.Validator.Date)} */
ValidateJS.Field.prototype.date;
 /** @type {(boolean|!ValidateJS.Validator.DateTime|function(?, ?, ?, ?, ?): !ValidateJS.Validator.DateTime)} */
ValidateJS.Field.prototype.datetime;
 /** @type {(boolean|!ValidateJS.Validator.Email|function(?, ?, ?, ?, ?): !ValidateJS.Validator.Email)} */
ValidateJS.Field.prototype.email;
 /** @type {(string|!ValidateJS.Validator.Equality|function(?, ?, ?, ?, ?): !ValidateJS.Validator.Equality)} */
ValidateJS.Field.prototype.equality;
 /** @type {(!Array<?>|!ValidateJS.Validator.Exclusion|!Object<string,?>|function(?, ?, ?, ?, ?): !ValidateJS.Validator.Exclusion)} */
ValidateJS.Field.prototype.exclusion;
 /** @type {(string|!RegExp|!ValidateJS.Validator.Format|function(?, ?, ?, ?, ?): !ValidateJS.Validator.Format)} */
ValidateJS.Field.prototype.format;
 /** @type {(!Array<?>|!ValidateJS.Validator.Inclusion|!Object<string,?>|function(?, ?, ?, ?, ?): !ValidateJS.Validator.Inclusion)} */
ValidateJS.Field.prototype.inclusion;
 /** @type {(!ValidateJS.Validator.Length|function(?, ?, ?, ?, ?): !ValidateJS.Validator.Length)} */
ValidateJS.Field.prototype.length;
 /** @type {(boolean|!ValidateJS.Validator.Numericality|function(?, ?, ?, ?, ?): !ValidateJS.Validator.Numericality)} */
ValidateJS.Field.prototype.numericality;
 /** @type {(boolean|!ValidateJS.Validator.Presence|function(?, ?, ?, ?, ?): !ValidateJS.Validator.Presence)} */
ValidateJS.Field.prototype.presence;
 /** @type {(boolean|!ValidateJS.Validator.Url|function(?, ?, ?, ?, ?): !ValidateJS.Validator.Url)} */
ValidateJS.Field.prototype.url;
/**
 * @record
 * @struct
 */
ValidateJS.Constraints = function() {};

/* TODO: IndexSignature: ValidateJS */
