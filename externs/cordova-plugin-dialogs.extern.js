/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cordova-plugin-dialogs/index.d.ts:
 /** @type {!Notification} */
Navigator.prototype.notification;

/**
 * Shows a custom alert or dialog box. Most Cordova implementations use a native dialog box for this feature,
 * but some platforms use the browser's alert function, which is typically less customizable.
 * @param {string} message       Dialog message.
 * @param {function(): void} alertCallback Callback to invoke when alert dialog is dismissed.
 * @param {string=} title         Dialog title, defaults to 'Alert'.
 * @param {string=} buttonName    Button name, defaults to OK.
 * @return {void}
 */
Notification.prototype.alert = function(message, alertCallback, title, buttonName) {};

/**
 * The device plays a beep sound.
 * @param {number} times The number of times to repeat the beep.
 * @return {void}
 */
Notification.prototype.beep = function(times) {};

/**
 * Displays a customizable confirmation dialog box.
 * @param {string} message           Dialog message.
 * @param {function(number): void} confirmCallback   Callback to invoke with index of button pressed (1, 2, or 3)
 *                                   or when the dialog is dismissed without a button press (0).
 * @param {string=} title             Dialog title, defaults to Confirm.
 * @param {!Array<string>=} buttonLabels      Array of strings specifying button labels, defaults to [OK,Cancel].
 * @return {void}
 */
Notification.prototype.confirm = function(message, confirmCallback, title, buttonLabels) {};

/**
 * Displays a native dialog box that is more customizable than the browser's prompt function.
 * @param {string} message           Dialog message.
 * @param {function(!NotificationPromptResult): void} promptCallback    Callback to invoke when a button is pressed.
 * @param {string=} title             Dialog title, defaults to "Prompt".
 * @param {!Array<string>=} buttonLabels      Array of strings specifying button labels, defaults to ["OK","Cancel"].
 * @param {string=} defaultText       Default textbox input value, default: "".
 * @return {void}
 */
Notification.prototype.prompt = function(message, promptCallback, title, buttonLabels, defaultText) {};
/**
 * @record
 * @struct
 */
function NotificationPromptResult() {}
 /** @type {number} */
NotificationPromptResult.prototype.buttonIndex;
 /** @type {string} */
NotificationPromptResult.prototype.input1;
