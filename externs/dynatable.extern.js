/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/dynatable/index.d.ts:
 /** @type {!JQueryDynatable.Dynatable} */
JQuery.prototype.dynatable;

/**
 * Global dynatable plugin setting defaults
 * 
 * @param {!JQueryDynatable.Options} options The configuration options to be set globally
 * @return {void}
 */
JQueryStatic.prototype.dynatableSetup = function(options) {};
/** @const */
var JQueryDynatable = {};
/**
 * @record
 * @struct
 */
JQueryDynatable.Features = function() {};
 /** @type {boolean} */
JQueryDynatable.Features.prototype.paginate;
 /** @type {boolean} */
JQueryDynatable.Features.prototype.sort;
 /** @type {boolean} */
JQueryDynatable.Features.prototype.pushState;
 /** @type {boolean} */
JQueryDynatable.Features.prototype.search;
 /** @type {boolean} */
JQueryDynatable.Features.prototype.recordCount;
 /** @type {boolean} */
JQueryDynatable.Features.prototype.perPageSelect;
/**
 * @record
 * @struct
 */
JQueryDynatable.Column = function() {};
 /** @type {number} */
JQueryDynatable.Column.prototype.index;
 /** @type {string} */
JQueryDynatable.Column.prototype.label;
 /** @type {string} */
JQueryDynatable.Column.prototype.id;
 /** @type {function(?): ?} */
JQueryDynatable.Column.prototype.attributeWriter;
 /** @type {function(!Element, ?): string} */
JQueryDynatable.Column.prototype.attributeReader;
 /** @type {!Array<string>} */
JQueryDynatable.Column.prototype.sorts;
 /** @type {boolean} */
JQueryDynatable.Column.prototype.hidden;
 /** @type {string} */
JQueryDynatable.Column.prototype.textAlign;
/**
 * @record
 * @struct
 */
JQueryDynatable.Table = function() {};
 /** @type {string} */
JQueryDynatable.Table.prototype.defaultColumnIdStyle;
 /** @type {!Array<!JQueryDynatable.Column>} */
JQueryDynatable.Table.prototype.columns;
 /** @type {string} */
JQueryDynatable.Table.prototype.headRowSelector;
 /** @type {string} */
JQueryDynatable.Table.prototype.bodyRowSelector;
 /** @type {string} */
JQueryDynatable.Table.prototype.headRowClass;
/**
 * @record
 * @struct
 */
JQueryDynatable.Inputs = function() {};
 /** @type {?<!HTMLElement>} */
JQueryDynatable.Inputs.prototype.queries;
 /** @type {?} */
JQueryDynatable.Inputs.prototype.sorts;
 /** @type {!Array<string>} */
JQueryDynatable.Inputs.prototype.multisort;
 /** @type {?} */
JQueryDynatable.Inputs.prototype.page;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.queryEvent;
 /** @type {?<!HTMLElement>} */
JQueryDynatable.Inputs.prototype.recordCountTarget;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.recordCountPlacement;
 /** @type {(string|!Element|?<!HTMLElement>)} */
JQueryDynatable.Inputs.prototype.paginationLinkTarget;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.paginationLinkPlacement;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.paginationClass;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.paginationLinkClass;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.paginationPrevClass;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.paginationNextClass;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.paginationActiveClass;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.paginationDisabledClass;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.paginationPrev;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.paginationNext;
 /** @type {!Array<number>} */
JQueryDynatable.Inputs.prototype.paginationGap;
 /** @type {(string|!Element|?<!HTMLElement>)} */
JQueryDynatable.Inputs.prototype.searchTarget;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.searchPlacement;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.searchText;
 /** @type {(string|!Element|?<!HTMLElement>)} */
JQueryDynatable.Inputs.prototype.perPageTarget;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.perPagePlacement;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.perPageText;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.pageText;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.recordCountPageBoundTemplate;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.recordCountPageUnboundedTemplate;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.recordCountTotalTemplate;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.recordCountFilteredTemplate;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.recordCountText;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.recordCountTextTemplate;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.recordCountTemplate;
 /** @type {string} */
JQueryDynatable.Inputs.prototype.processingText;
/**
 * @record
 * @struct
 */
JQueryDynatable.Dataset = function() {};
 /** @type {boolean} */
JQueryDynatable.Dataset.prototype.ajax;
 /** @type {string} */
JQueryDynatable.Dataset.prototype.ajaxUrl;
 /** @type {boolean} */
JQueryDynatable.Dataset.prototype.ajaxCache;
 /** @type {boolean} */
JQueryDynatable.Dataset.prototype.ajaxOnLoad;
 /** @type {string} */
JQueryDynatable.Dataset.prototype.ajaxMethod;
 /** @type {string} */
JQueryDynatable.Dataset.prototype.ajaxDataType;
 /** @type {string} */
JQueryDynatable.Dataset.prototype.totalRecordCount;
 /** @type {!Object} */
JQueryDynatable.Dataset.prototype.queries;
 /** @type {string} */
JQueryDynatable.Dataset.prototype.queryRecordCount;
 /** @type {number} */
JQueryDynatable.Dataset.prototype.page;
 /** @type {number} */
JQueryDynatable.Dataset.prototype.perPageDefault;
 /** @type {!Array<number>} */
JQueryDynatable.Dataset.prototype.perPageOptions;
 /** @type {!Object} */
JQueryDynatable.Dataset.prototype.sorts;
 /** @type {!Array<string>} */
JQueryDynatable.Dataset.prototype.sortsKeys;
 /** @type {!Object} */
JQueryDynatable.Dataset.prototype.sortTypes;
 /** @type {?} */
JQueryDynatable.Dataset.prototype.records;
/**
 * @record
 * @struct
 */
JQueryDynatable.Writers = function() {};
 /** @type {function(number, ?, !Array<!JQueryDynatable.Column>, !Function): string} */
JQueryDynatable.Writers.prototype._rowWriter;
 /** @type {function(!JQueryDynatable.Column, ?): string} */
JQueryDynatable.Writers.prototype._cellWriter;
 /** @type {function(?): ?} */
JQueryDynatable.Writers.prototype._attributeWriter;
/**
 * @record
 * @struct
 */
JQueryDynatable.Readers = function() {};
 /** @type {function(number, ?, ?): ?} */
JQueryDynatable.Readers.prototype._rowReader;
 /** @type {function(!Element, ?): ?} */
JQueryDynatable.Readers.prototype._attributeReader;
/**
 * @record
 * @struct
 */
JQueryDynatable.Params = function() {};
 /** @type {string} */
JQueryDynatable.Params.prototype.dynatable;
 /** @type {string} */
JQueryDynatable.Params.prototype.queries;
 /** @type {string} */
JQueryDynatable.Params.prototype.sorts;
 /** @type {string} */
JQueryDynatable.Params.prototype.page;
 /** @type {string} */
JQueryDynatable.Params.prototype.perPage;
 /** @type {string} */
JQueryDynatable.Params.prototype.offset;
 /** @type {string} */
JQueryDynatable.Params.prototype.records;
 /** @type {!Object} */
JQueryDynatable.Params.prototype.record;
 /** @type {string} */
JQueryDynatable.Params.prototype.queryRecordCount;
 /** @type {string} */
JQueryDynatable.Params.prototype.totalRecordCount;
/**
 * @record
 * @struct
 */
JQueryDynatable.Options = function() {};
 /** @type {!JQueryDynatable.Features} */
JQueryDynatable.Options.prototype.features;
 /** @type {!JQueryDynatable.Table} */
JQueryDynatable.Options.prototype.table;
 /** @type {!JQueryDynatable.Inputs} */
JQueryDynatable.Options.prototype.inputs;
 /** @type {!JQueryDynatable.Dataset} */
JQueryDynatable.Options.prototype.dataset;
 /** @type {!JQueryDynatable.Writers} */
JQueryDynatable.Options.prototype.writers;
 /** @type {!JQueryDynatable.Readers} */
JQueryDynatable.Options.prototype.readers;
 /** @type {!JQueryDynatable.Params} */
JQueryDynatable.Options.prototype.params;
/**
 * @record
 * @struct
 */
JQueryDynatable.DOM = function() {};

/**
 * Manually update the dom with the current record set...
 * This can be useful after multiple calls to `domcolumns.add()` with `skipUpdate` set to true.
 * This way we improve performance by generating the DOM only once.
 * @return {void}
 */
JQueryDynatable.DOM.prototype.update = function() {};
/**
 * @record
 * @struct
 */
JQueryDynatable.DOMColumns = function() {};

/**
 * Add a new column at runtime
 * 
 * @param {?<!HTMLElement>} $column A jQuery object containing the html markup for the `th`
 * @param {number} position The position index indicating where we want to insert the new column
 * @param {boolean=} skipAppend A boolean allowing to skip the appending of the column header to table
 * @param {boolean=} skipUpdate A boolean allowing to skip the call to `dom.update()`
 * @return {void}
 */
JQueryDynatable.DOMColumns.prototype.add = function($column, position, skipAppend, skipUpdate) {};

/**
 * Add several `data-` attributes on the provided `$cell`
 * 
 * @param {?<!HTMLElement>} $cell A jQuery object pointing to the target cell
 * @return {?<!HTMLElement>} the modified jQuery object `$cell`
 */
JQueryDynatable.DOMColumns.prototype.attachGeneratedAttributes = function($cell) {};

/**
 * Generate a jQuery object if none is provided and decorate it by calling `attachGeneratedAttributes`
 * 
 * @param {?<!HTMLElement>=} $cell An optional jQuery object pointing to the target cell
 * @return {?<!HTMLElement>}
 */
JQueryDynatable.DOMColumns.prototype.generate = function($cell) {};

/**
 * Parse the table header row, analyse its cells and save the columns.
 * 
 * @return {(void|?<!HTMLElement>)} Could return an `$.error()` if nothing is found.
 */
JQueryDynatable.DOMColumns.prototype.getFromTable = function() {};

/**
 * Initializes `settings.table.columns` array and calls `getFromTable()`
 * @return {void}
 */
JQueryDynatable.DOMColumns.prototype.init = function() {};

/**
 * Check if the `$element` is valid (if it is a `table`)
 * 
 * @return {boolean} A boolean
 */
JQueryDynatable.DOMColumns.prototype.initOnLoad = function() {};

/**
 * Generate a jQuery object  if none is provided and decorate it by calling `attachGeneratedAttributes`
 * 
 * @param {(string|number)} columnIndexOrId A number (the column index) or a string (the column id)
 * @return {void}
 */
JQueryDynatable.DOMColumns.prototype.remove = function(columnIndexOrId) {};

/**
 * Remove the column from `settings.table.columns`
 * 
 * @param {number} index A number (the column index)
 * @return {void}
 */
JQueryDynatable.DOMColumns.prototype.removeFromArray = function(index) {};

/**
 * Remove the column from the DOM
 * 
 * @param {string} columnId A string matching the id used in `data-dynatable-column` attribute
 * @return {void}
 */
JQueryDynatable.DOMColumns.prototype.removeFromTable = function(columnId) {};
/**
 * @record
 * @struct
 */
JQueryDynatable.InputsSearch = function() {};

/**
 * Inject the search form at the target location
 * @return {void}
 */
JQueryDynatable.InputsSearch.prototype.attach = function() {};

/**
 * Build the html markup for the search form
 * 
 * @return {?<!HTMLElement>} The jQuery object for the search form
 */
JQueryDynatable.InputsSearch.prototype.create = function() {};

/**
 * Call the `attach()` method
 * @return {void}
 */
JQueryDynatable.InputsSearch.prototype.init = function() {};

/**
 * Check if the search feature is enabled in `settings.features`
 * 
 * @return {boolean} A boolean
 */
JQueryDynatable.InputsSearch.prototype.initOnLoad = function() {};
/**
 * @record
 * @struct
 */
JQueryDynatable.PaginationLinks = function() {};

/**
 * Insert the pagination links inside the page
 * @return {void}
 */
JQueryDynatable.PaginationLinks.prototype.attach = function() {};

/**
 * Generate a string containing the html of a pagination link
 * 
 * @param {number} page The page number
 * @param {(string|number)} label The text of the link (could be Previous, Next or a number)
 * @param {string} linkClass The classname for the `<a>`
 * @param {boolean} conditional Do we want to use the conditionalClass
 * @param {string} conditionalClass The classname for both the `<li>` and its `<a>`
 * @return {string} A string containing html markup
 */
JQueryDynatable.PaginationLinks.prototype.buildLink = function(page, label, linkClass, conditional, conditionalClass) {};

/**
 * Build the `<ul>` and creates the event listeners
 * 
 * @return {string} A string containing html markup
 */
JQueryDynatable.PaginationLinks.prototype.create = function() {};

/**
 * Call the attach method
 * @return {void}
 */
JQueryDynatable.PaginationLinks.prototype.init = function() {};

/**
 * Check if the paginate feature is enabled in `settings.features`
 * 
 * @return {boolean} A boolean
 */
JQueryDynatable.PaginationLinks.prototype.initOnLoad = function() {};
/**
 * @record
 * @struct
 */
JQueryDynatable.PaginationPage = function() {};

/**
 * Parse the current window.location in order to determine the target page
 * @return {void}
 */
JQueryDynatable.PaginationPage.prototype.init = function() {};

/**
 * Check if the paginate feature is enabled in `settings.features`
 * 
 * @return {boolean} A boolean
 */
JQueryDynatable.PaginationPage.prototype.initOnLoad = function() {};

/**
 * Set the page in the dataset
 * 
 * @param {number} page The new page number
 * @return {void}
 */
JQueryDynatable.PaginationPage.prototype.set = function(page) {};
/**
 * @record
 * @struct
 */
JQueryDynatable.PaginationPerPage = function() {};

/**
 * Insert the pagination per page inside the page
 * @return {void}
 */
JQueryDynatable.PaginationPerPage.prototype.attach = function() {};

/**
 * Generate the html markup for the pagination per page
 * 
 * @return {?<!HTMLElement>} A jQuery object containing the `<label>` and the `<select>`
 */
JQueryDynatable.PaginationPerPage.prototype.create = function() {};

/**
 * Set up the pagination per page
 * @return {void}
 */
JQueryDynatable.PaginationPerPage.prototype.init = function() {};

/**
 * Check if the paginate feature is enabled in `settings.features`
 * 
 * @return {boolean} A boolean
 */
JQueryDynatable.PaginationPerPage.prototype.initOnLoad = function() {};

/**
 * Set the new value for the pagination per page
 * 
 * @param {number} number The new number of items visible per page
 * @param {boolean=} skipResetPage By default (false) it sends you to page 1
 * @return {void}
 */
JQueryDynatable.PaginationPerPage.prototype.set = function(number, skipResetPage) {};
/**
 * @record
 * @struct
 */
JQueryDynatable.ProcessingIndicator = function() {};

/**
 * Insert the processing indicator inside the page
 * @return {void}
 */
JQueryDynatable.ProcessingIndicator.prototype.attach = function() {};

/**
 * Generate the html markup for the processing indicator
 * 
 * @return {?<!HTMLElement>} A jQuery object containing the generated html
 */
JQueryDynatable.ProcessingIndicator.prototype.create = function() {};

/**
 * Hide the processing indicator
 * @return {void}
 */
JQueryDynatable.ProcessingIndicator.prototype.hide = function() {};

/**
 * Set up the processing indicator
 * @return {void}
 */
JQueryDynatable.ProcessingIndicator.prototype.init = function() {};

/**
 * Position the processing indicator at the center
 * 
 * @return {?<!HTMLElement>} A jQuery object containing the processing indicator
 */
JQueryDynatable.ProcessingIndicator.prototype.position = function() {};

/**
 * Show the processing indicator
 * @return {void}
 */
JQueryDynatable.ProcessingIndicator.prototype.show = function() {};
/**
 * @record
 * @struct
 */
JQueryDynatable.Queries = function() {};
 /** @type {!JQueryDynatable.QueriesFunctions} */
JQueryDynatable.Queries.prototype.functions;

/**
 * Add a new condition in the queries
 * 
 * @param {string} name The key for for the query
 * @param {?} value The value we wish to find
 * @return {!JQueryDynatable.Dynatable} A reference to the related Dynatable object
 */
JQueryDynatable.Queries.prototype.add = function(name, value) {};

/**
 * Set up the initial search parameters
 * @return {void}
 */
JQueryDynatable.Queries.prototype.init = function() {};

/**
 * Check if search feature is enabled
 * 
 * @return {boolean} A boolean if search feature is enabled
 */
JQueryDynatable.Queries.prototype.initOnLoad = function() {};

/**
 * Remove the query from the dataset
 * 
 * @param {string} name The key for for the query to be removed
 * @return {!JQueryDynatable.Dynatable} A reference to the related Dynatable object
 */
JQueryDynatable.Queries.prototype.remove = function(name) {};

/**
 * Run a search with all the saved queries
 * @return {?}
 */
JQueryDynatable.Queries.prototype.run = function() {};

/**
 * Shortcut for performing simple query from built-in search
 * 
 * @param {?} q The value that will be searched for
 * @return {void}
 */
JQueryDynatable.Queries.prototype.runSearch = function(q) {};

/**
 * Set up the input fields for creating queries
 * @return {void}
 */
JQueryDynatable.Queries.prototype.setupInputs = function() {};
/**
 * @record
 * @struct
 */
JQueryDynatable.QueriesFunctions = function() {};

/**
 * Search in all of the properties of the provided single record
 * 
 * @param {?} record A data object with all the properties of the current line
 * @param {string} queryValue The researched value
 * @return {boolean} A boolean indicating if a match was found
 */
JQueryDynatable.QueriesFunctions.prototype.search = function(record, queryValue) {};
/**
 * @record
 * @struct
 */
JQueryDynatable.Records = function() {};

/**
 * Count records from table
 * 
 * @return {number} The length of the records Array
 */
JQueryDynatable.Records.prototype.count = function() {};

/**
 * Get initial recordset to populate table
 * if ajax, call ajaxUrl
 * otherwise, initialize from in-table records
 * 
 * @return {!Array<!Object>} An Array with the records
 */
JQueryDynatable.Records.prototype.getFromTable = function() {};

/**
 * Create and init the records
 * @return {void}
 */
JQueryDynatable.Records.prototype.init = function() {};

/**
 * Check if ajax feature is enabled
 * 
 * @return {boolean} A boolean if ajax feature is enabled
 */
JQueryDynatable.Records.prototype.initOnLoad = function() {};

/**
 * Get the first and the last indexes based on current page and number of items per page
 * 
 * @return {!Array<number>} An Array with the first index ([0]) and the last index ([1])
 */
JQueryDynatable.Records.prototype.pageBounds = function() {};

/**
 * Update the records with the new page
 * @return {void}
 */
JQueryDynatable.Records.prototype.paginate = function() {};

/**
 * Reset the records
 * @return {void}
 */
JQueryDynatable.Records.prototype.resetOriginal = function() {};

/**
 * Call the appropriated sort function
 * 
 * @return {number} The number (-1, 0 or +1) representing the comparison
 */
JQueryDynatable.Records.prototype.sort = function() {};

/**
 * Merge ajax response json with cached data including (meta-data and records)
 * 
 * @param {?} data The new data
 * @return {void}
 */
JQueryDynatable.Records.prototype.updateFromJson = function(data) {};
/**
 * @record
 * @struct
 */
JQueryDynatable.RecordsCount = function() {};

/**
 * Insert the record count inside the page
 * @return {void}
 */
JQueryDynatable.RecordsCount.prototype.attach = function() {};

/**
 * Generate the html markup for the record count
 * 
 * @return {?<!HTMLElement>} A jQuery object containing the generated html
 */
JQueryDynatable.RecordsCount.prototype.create = function() {};

/**
 * Create and init the records count
 * @return {void}
 */
JQueryDynatable.RecordsCount.prototype.init = function() {};

/**
 * Check if recordCount feature is enabled
 * 
 * @return {boolean} A boolean if recordCount feature is enabled
 */
JQueryDynatable.RecordsCount.prototype.initOnLoad = function() {};
/**
 * @record
 * @struct
 */
JQueryDynatable.Settings = function() {};
 /** @type {!JQueryDynatable.Dataset} */
JQueryDynatable.Settings.prototype.dataset;
 /** @type {!JQueryDynatable.Features} */
JQueryDynatable.Settings.prototype.features;
 /** @type {!JQueryDynatable.Inputs} */
JQueryDynatable.Settings.prototype.inputs;
 /** @type {!JQueryDynatable.Params} */
JQueryDynatable.Settings.prototype.params;
 /** @type {!JQueryDynatable.Readers} */
JQueryDynatable.Settings.prototype.readers;
 /** @type {!JQueryDynatable.Table} */
JQueryDynatable.Settings.prototype.table;
 /** @type {!JQueryDynatable.Writers} */
JQueryDynatable.Settings.prototype.writers;
/**
 * @record
 * @struct
 */
JQueryDynatable.Sorts = function() {};
 /** @type {!JQueryDynatable.SortsFunctions} */
JQueryDynatable.Sorts.prototype.functions;

/**
 * Add a new sort in sortKeys
 * 
 * @param {string} attr The key for for the sorting
 * @param {number} direction The sorting direction (-1 or +1)
 * @return {!JQueryDynatable.Dynatable} A reference to the related Dynatable object
 */
JQueryDynatable.Sorts.prototype.add = function(attr, direction) {};

/**
 * Remove all the sortKeys
 * @return {void}
 */
JQueryDynatable.Sorts.prototype.clear = function() {};

/**
 * Try to intelligently guess which sort function to use based on the type of attribute values.
 * 
 * @param {?} a The first record
 * @param {?} b The second record
 * @param {string} attr The key of the property
 * @return {string} A string containing one of the types ('string' or 'number')
 */
JQueryDynatable.Sorts.prototype.guessType = function(a, b, attr) {};

/**
 * Create and init the sorts
 * @return {void}
 */
JQueryDynatable.Sorts.prototype.init = function() {};

/**
 * Check if sort feature is enabled
 * 
 * @return {boolean} A boolean if sort feature is enabled
 */
JQueryDynatable.Sorts.prototype.initOnLoad = function() {};

/**
 * Remove a sort attribute from the sortKeys
 * 
 * @param {string} attr The key to be removed from the sorting
 * @return {!JQueryDynatable.Dynatable} A reference to the related Dynatable object
 */
JQueryDynatable.Sorts.prototype.remove = function(attr) {};
/**
 * @record
 * @struct
 */
JQueryDynatable.SortsFunctions = function() {};

/**
 * Sorting between 2 numbers
 * 
 * @param {?} a The first record
 * @param {?} b The second record
 * @param {string} attr The key of the property
 * @param {number} direction The number describingthe order: ASC (+1), DESC (-1) or none (0)
 * @return {number} The number (-1, 0 or +1) representing the comparison
 */
JQueryDynatable.SortsFunctions.prototype.number = function(a, b, attr, direction) {};

/**
 * Restores the original order we had...
 * 
 * @param {?} a The first record
 * @param {?} b The second record
 * @return {number} The number (-1, 0 or +1) representing the comparison
 */
JQueryDynatable.SortsFunctions.prototype.originalPlacement = function(a, b) {};

/**
 * Sorting between 2 strings
 * 
 * @param {?} a The first record
 * @param {?} b The second record
 * @param {string} attr The key of the property
 * @param {number} direction The number describingthe order: ASC (+1), DESC (-1) or none (0)
 * @return {number} The number (-1, 0 or +1) representing the comparison
 */
JQueryDynatable.SortsFunctions.prototype.string = function(a, b, attr, direction) {};
/**
 * @record
 * @struct
 */
JQueryDynatable.SortsHeaders = function() {};

/**
 * Inject the arrow down inside the $link
 * 
 * @param {?<!HTMLElement>} $link The jQuery object to be used
 * @return {void}
 */
JQueryDynatable.SortsHeaders.prototype.appendArrowDown = function($link) {};

/**
 * Inject the arrow up inside the $link
 * 
 * @param {?<!HTMLElement>} $link The jQuery object to be used
 * @return {void}
 */
JQueryDynatable.SortsHeaders.prototype.appendArrowUp = function($link) {};

/**
 * Go through each cell and call `attachOne`
 * @return {void}
 */
JQueryDynatable.SortsHeaders.prototype.attach = function() {};

/**
 * If sorting is allowed for the provided cell, it injects the hml generated by `create`
 * 
 * @param {!Element} cell The cell Element to be parsed
 * @return {void}
 */
JQueryDynatable.SortsHeaders.prototype.attachOne = function(cell) {};

/**
 * Generate the html markup to be inserted inside the header of the sortable column
 * 
 * @param {!Element} cell An Element which point to the cell in the header row
 * @return {?<!HTMLElement>} A jQuery object containing the markup of the link
 */
JQueryDynatable.SortsHeaders.prototype.create = function(cell) {};

/**
 * Create and init the sorts
 * @return {void}
 */
JQueryDynatable.SortsHeaders.prototype.init = function() {};

/**
 * Check if sort feature is enabled
 * 
 * @return {boolean} A boolean if sort feature is enabled
 */
JQueryDynatable.SortsHeaders.prototype.initOnLoad = function() {};

/**
 * Remove all the sort headers from the table
 * @return {void}
 */
JQueryDynatable.SortsHeaders.prototype.removeAll = function() {};

/**
 * Remove all arrows Elements from the table
 * @return {void}
 */
JQueryDynatable.SortsHeaders.prototype.removeAllArrows = function() {};

/**
 * Remove the arrow found inside the provided $link
 * 
 * @param {?<!HTMLElement>} $link The jQuery object containing the `<a>` markup in the sortable headers
 * @return {void}
 */
JQueryDynatable.SortsHeaders.prototype.removeArrow = function($link) {};

/**
 * Remove the link generated by dynatable inside the sortable header
 * and restore its original html content
 * 
 * @param {!Element} cell The cell Element that will be parsed
 * @return {void}
 */
JQueryDynatable.SortsHeaders.prototype.removeOne = function(cell) {};

/**
 * \@todo learn more about this method and document it
 * 
 * @param {?<!HTMLElement>} $link The jQuery object to be used
 * @param {!JQueryDynatable.Column} column The Column object that will be used
 * @return {boolean} A boolean which is true if supplied test function passes for ALL items in an array
 */
JQueryDynatable.SortsHeaders.prototype.sortedByColumn = function($link, column) {};

/**
 * Inspect the settings to determine the order to use
 * 
 * @param {!JQueryDynatable.Column} column The Column object that will be used
 * @return {number} A number (-1 or +1) describing the order to use (DESC or ASC)
 */
JQueryDynatable.SortsHeaders.prototype.sortedByColumnValue = function(column) {};

/**
 * Refresh the [multi] sorting of the dataset
 * 
 * @param {!Event} e
 * @param {?<!HTMLElement>} $link The header link
 * @param {!JQueryDynatable.Column} column The Column object to be sorted
 * @return {void}
 */
JQueryDynatable.SortsHeaders.prototype.toggleSort = function(e, $link, column) {};
/**
 * @record
 * @struct
 */
JQueryDynatable.State = function() {};

/**
 * Set up a listener for popstate event on window
 * @return {void}
 */
JQueryDynatable.State.prototype.init = function() {};

/**
 * Check if pushState option is true, and if browser supports it
 * 
 * @return {boolean} A boolean
 */
JQueryDynatable.State.prototype.initOnLoad = function() {};

/**
 * Handler for the popstate event
 * 
 * @param {!Event} event The native popstate event
 * @return {void}
 */
JQueryDynatable.State.prototype.pop = function(event) {};

/**
 * Update the URL data using pushState
 * 
 * @param {!Object} data An object with the parameters we want to push
 * @return {void}
 */
JQueryDynatable.State.prototype.push = function(data) {};
/**
 * @record
 * @struct
 */
JQueryDynatable.Dynatable = function() {};

/* TODO: CallSignature: JQueryDynatable */
 /** @type {?<!HTMLElement>} */
JQueryDynatable.Dynatable.prototype.$element;
 /** @type {!JQueryDynatable.DOM} */
JQueryDynatable.Dynatable.prototype.dom;
 /** @type {!JQueryDynatable.DOMColumns} */
JQueryDynatable.Dynatable.prototype.domColumns;
 /** @type {!Element} */
JQueryDynatable.Dynatable.prototype.element;
 /** @type {!JQueryDynatable.InputsSearch} */
JQueryDynatable.Dynatable.prototype.inputsSearch;
 /** @type {!JQueryDynatable.PaginationLinks} */
JQueryDynatable.Dynatable.prototype.paginationLinks;
 /** @type {!JQueryDynatable.PaginationPage} */
JQueryDynatable.Dynatable.prototype.paginationPage;
 /** @type {!JQueryDynatable.PaginationPerPage} */
JQueryDynatable.Dynatable.prototype.paginationPerPage;
 /** @type {!JQueryDynatable.ProcessingIndicator} */
JQueryDynatable.Dynatable.prototype.processingIndicator;
 /** @type {!JQueryDynatable.Queries} */
JQueryDynatable.Dynatable.prototype.queries;
 /** @type {!JQueryDynatable.Records} */
JQueryDynatable.Dynatable.prototype.records;
 /** @type {!JQueryDynatable.RecordsCount} */
JQueryDynatable.Dynatable.prototype.recordsCount;
 /** @type {!JQueryDynatable.Settings} */
JQueryDynatable.Dynatable.prototype.settings;
 /** @type {!JQueryDynatable.Sorts} */
JQueryDynatable.Dynatable.prototype.sorts;
 /** @type {!JQueryDynatable.SortsHeaders} */
JQueryDynatable.Dynatable.prototype.sortsHeaders;
 /** @type {!JQueryDynatable.State} */
JQueryDynatable.Dynatable.prototype.state;

/**
 * Each dynatable instance inherits from this,
 * set properties specific to instance
 * 
 * @param {!Element} element The html node to be used by dynatable
 * @param {!JQueryDynatable.Options} options The JQueryDynatable.Options object which contains all the settings
 * @return {!JQueryDynatable.Dynatable} A reference to the current and brand new dynatable object
 */
JQueryDynatable.Dynatable.prototype.init = function(element, options) {};

/**
 * Call the process method on all the components of this dynatable
 * 
 * @param {boolean=} skipPushState A boolean allowing to skip the update the query string in the URL
 * @return {void}
 */
JQueryDynatable.Dynatable.prototype.process = function(skipPushState) {};
