/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/lokijs/index.d.ts:
/**
 * @extends {LokiEventEmitter}
 * @record
 * @struct
 */
function Loki() {}
 /** @type {boolean} */
Loki.prototype.autosave;
 /** @type {number} */
Loki.prototype.autosaveInterval;
 /** @type {number} */
Loki.prototype.autosaveHandle;
 /** @type {!Array<!LokiCollection<?>>} */
Loki.prototype.collections;
 /** @type {number} */
Loki.prototype.databaseVersion;
 /** @type {number} */
Loki.prototype.engineVersion;
 /** @type {string} */
Loki.prototype.ENV;
 /** @type {!Object<string,!Array<function(!Array<?>): void>>} */
Loki.prototype.events;
 /** @type {string} */
Loki.prototype.filename;
 /** @type {!LokiConfigureOptions} */
Loki.prototype.options;
 /** @type {!LokiPersistenceInterface} */
Loki.prototype.persistenceAdapter;
 /** @type {string} */
Loki.prototype.persistenceMethod;
 /** @type {boolean} */
Loki.prototype.verbose;

/* TODO: ConstructSignature:  */

/**
 * @return {!LokiPersistenceInterface}
 */
Loki.prototype.getIndexedAdapter = function() {};

/**
 * configureOptions - allows reconfiguring database options
 * 
 * @param {!LokiConfigureOptions} options
 * @param {boolean=} initialConfig
 * @return {void}
 */
Loki.prototype.configureOptions = function(options, initialConfig) {};

/**
 * anonym() - shorthand method for quickly creating and populating an anonymous collection.
 *    This collection is not referenced internally so upon losing scope it will be garbage collected.
 * 
 *    Example : var results = new loki().anonym(myDocArray).find({'age': {'$gt': 30} });
 * 
 * @template T
 * @param {(T|!Array<T>)} docs
 * @param {!LokiCollectionOptions=} indexesArray
 * @return {!LokiCollection<T>}
 */
Loki.prototype.anonym = function(docs, indexesArray) {};

/**
 * @template T
 * @param {string} name
 * @param {!LokiCollectionOptions=} options
 * @return {!LokiCollection<T>}
 */
Loki.prototype.addCollection = function(name, options) {};

/**
 * @param {!LokiCollection<?>} collection
 * @return {void}
 */
Loki.prototype.loadCollection = function(collection) {};

/**
 * @template T
 * @param {string} collectionName
 * @return {!LokiCollection<T>}
 */
Loki.prototype.getCollection = function(collectionName) {};

/**
 * @return {!Array<{name: string, type: string, count: number}>}
 */
Loki.prototype.listCollections = function() {};

/**
 * @param {string} collectionName
 * @return {void}
 */
Loki.prototype.removeCollection = function(collectionName) {};

/**
 * @return {string}
 */
Loki.prototype.getName = function() {};

/**
 * serializeReplacer - used to prevent certain properties from being serialized
 * @template T
 * @param {string} key
 * @param {T} value
 * @return {T}
 */
Loki.prototype.serializeReplacer = function(key, value) {};

/**
 * @return {string}
 */
Loki.prototype.serialize = function() {};

/**
 * @return {string}
 */
Loki.prototype.toJson = function() {};

/**
 * loadJSON - inflates a loki database from a serialized JSON string
 * 
 * @param {string} serializedDb
 * @param {!Object<string,{inflate: function(?, ?): void, proto: ?}>=} options
 * @return {void}
 */
Loki.prototype.loadJSON = function(serializedDb, options) {};

/**
 * loadJSONObject - inflates a loki database from a JS object
 * 
 * @param {!Loki} dbObject
 * @param {!Object<string,{inflate: function(?, ?): void, proto: ?}>=} options
 * @return {void}
 */
Loki.prototype.loadJSONObject = function(dbObject, options) {};

/**
 * close(callback) - emits the close event with an optional callback. Does not actually destroy the db
 * but useful from an API perspective
 * @param {function(!Array<?>): void=} callback
 * @return {void}
 */
Loki.prototype.close = function(callback) {};

/**
 * generateChangesNotification() - takes all the changes stored in each
 * collection and creates a single array for the entire database. If an array of names
 * of collections is passed then only the included collections will be tracked.
 * 
 * @see private method createChange() in Collection
 * @param {!Array<string>=} arrayOfCollectionNames
 * @return {!Array<!LokiCollectionChange>}
 */
Loki.prototype.generateChangesNotification = function(arrayOfCollectionNames) {};

/**
 * serializeChanges() - stringify changes for network transmission
 * @param {!Array<string>=} collectionNamesArray
 * @return {string}
 */
Loki.prototype.serializeChanges = function(collectionNamesArray) {};

/**
 * clearChanges() - clears all the changes in all collections.
 * @return {void}
 */
Loki.prototype.clearChanges = function() {};

/**
 * loadDatabase - Handles loading from file system, local storage, or adapter (indexeddb)
 *    This method utilizes loki configuration options (if provided) to determine which
 *    persistence method to use, or environment detection (if configuration was not provided).
 * 
 * @param {!Object<string,{inflate: function(?, ?): void, proto: ?}>} options
 * @param {function(?, ?): void=} callback
 * @return {void}
 */
Loki.prototype.loadDatabase = function(options, callback) {};

/**
 * saveDatabase - Handles saving to file system, local storage, or adapter (indexeddb)
 *    This method utilizes loki configuration options (if provided) to determine which
 *    persistence method to use, or environment detection (if configuration was not provided).
 * 
 * @param {function(?): void=} callback
 * @return {void}
 */
Loki.prototype.saveDatabase = function(callback) {};

/**
 * @param {function(?): void=} callback
 * @return {void}
 */
Loki.prototype.save = function(callback) {};

/**
 * deleteDatabase - Handles deleting a database from file system, local
 *    storage, or adapter (indexeddb)
 *    This method utilizes loki configuration options (if provided) to determine which
 *    persistence method to use, or environment detection (if configuration was not provided).
 * 
 * @param {?} options
 * @param {function(?, ?): void} callback
 * @return {void}
 */
Loki.prototype.deleteDatabase = function(options, callback) {};

/**
 * autosaveDirty - check whether any collections are 'dirty' meaning we need to save (entire) database
 * @return {boolean}
 */
Loki.prototype.autosaveDirty = function() {};

/**
 * autosaveClearFlags - resets dirty flags on all collections.
 *    Called from saveDatabase() after db is saved.
 * @return {void}
 */
Loki.prototype.autosaveClearFlags = function() {};

/**
 * autosaveEnable - begin a javascript interval to periodically save the database.
 * 
 * @param {!LokiConfigureOptions=} options
 * @param {function(?): void=} callback
 * @return {void}
 */
Loki.prototype.autosaveEnable = function(options, callback) {};

/**
 * autosaveDisable - stop the autosave interval timer.
 * @return {void}
 */
Loki.prototype.autosaveDisable = function() {};
/**
 * @record
 * @struct
 */
function LokiEventEmitter() {}
 /** @type {!Object<string,!Array<function(!Array<?>): void>>} */
LokiEventEmitter.prototype.events;

/* TODO: ConstructSignature:  */
 /** @type {boolean} */
LokiEventEmitter.prototype.asyncListeners;

/**
 * \@prop on(eventName, listener) - adds a listener to the queue of callbacks associated to an event
 * @template U
 * @param {string} eventName
 * @param {U} listener
 * @return {U}
 */
LokiEventEmitter.prototype.on = function(eventName, listener) {};

/**
 * \@propt emit(eventName, data) - emits a particular event
 * with the option of passing optional parameters which are going to be processed by the callback
 * provided signatures match (i.e. if passing emit(event, arg0, arg1) the listener should take two parameters)
 * @param {string} eventName
 * @param {?=} data
 * @return {void}
 */
LokiEventEmitter.prototype.emit = function(eventName, data) {};

/**
 * \@prop remove() - removes the listener at position 'index' from the event 'eventName'
 * @param {string} eventName
 * @param {function(!Array<?>): void} listener
 * @return {void}
 */
LokiEventEmitter.prototype.removeListener = function(eventName, listener) {};
/**
 * @record
 * @struct
 */
function LokiPersistenceInterface() {}
 /** @type {string} */
LokiPersistenceInterface.prototype.mode;

/**
 * @param {string} dbname
 * @param {function((string|!Error)): void} callback
 * @return {void}
 */
LokiPersistenceInterface.prototype.loadDatabase = function(dbname, callback) {};

/**
 * @param {string} dbname
 * @param {string} dbstring
 * @param {function((void|!Error)): void} callback
 * @return {void}
 */
LokiPersistenceInterface.prototype.saveDatabase = function(dbname, dbstring, callback) {};

/**
 * @param {string} dbname
 * @param {function((void|!Error)): void=} callback
 * @return {void}
 */
LokiPersistenceInterface.prototype.deleteDatabase = function(dbname, callback) {};

/**
 * @param {string} filename
 * @param {?} param
 * @param {function(?): void=} callback
 * @return {void}
 */
LokiPersistenceInterface.prototype.exportDatabase = function(filename, param, callback) {};
/**
 * @extends {LokiPersistenceInterface}
 * @record
 * @struct
 */
function LokiFsAdapter() {}
 /** @type {?} */
LokiFsAdapter.prototype.fs;

/**
 * loadDatabase() - Load data from file, will throw an error if the file does not exist
 * @param {string} dbname
 * @param {function(!Error, string): void} callback
 * @return {void}
 */
LokiFsAdapter.prototype.loadDatabase = function(dbname, callback) {};

/**
 * saveDatabase() - save data to file, will throw an error if the file can't be saved
 * might want to expand this to avoid dataloss on partial save
 * @param {string} dbname
 * @param {string} dbstring
 * @param {function(?): void} callback
 * @return {void}
 */
LokiFsAdapter.prototype.saveDatabase = function(dbname, dbstring, callback) {};

/**
 * deleteDatabase() - delete the database file, will throw an error if the
 * file can't be deleted
 * @param {string} dbname
 * @param {function((void|!Error)): void} callback
 * @return {void}
 */
LokiFsAdapter.prototype.deleteDatabase = function(dbname, callback) {};
/**
 * @extends {LokiPersistenceInterface}
 * @record
 * @struct
 */
function LokiLocalStorageAdapter() {}

/**
 * loadDatabase() - Load data from localstorage
 * @param {string} dbname
 * @param {function((string|!Error)): void} callback
 * @return {void}
 */
LokiLocalStorageAdapter.prototype.loadDatabase = function(dbname, callback) {};

/**
 * saveDatabase() - save data to localstorage, will throw an error if the file can't be saved
 * might want to expand this to avoid dataloss on partial save
 * @param {string} dbname
 * @param {string} dbstring
 * @param {function((void|!Error)): void} callback
 * @return {void}
 */
LokiLocalStorageAdapter.prototype.saveDatabase = function(dbname, dbstring, callback) {};

/**
 * deleteDatabase() - delete the database from localstorage, will throw an error if it
 * can't be deleted
 * @param {string} dbname
 * @param {function((void|!Error)): void} callback
 * @return {void}
 */
LokiLocalStorageAdapter.prototype.deleteDatabase = function(dbname, callback) {};
/**
 * @record
 * @struct
 */
function LokiResultset() {}
 /** @type {!LokiCollection<E>} */
LokiResultset.prototype.collection;
 /** @type {boolean} */
LokiResultset.prototype.filterInitialized;
 /** @type {!Array<string>} */
LokiResultset.prototype.filteredrows;
 /** @type {!LokiResultsetOptions<E>} */
LokiResultset.prototype.options;
 /** @type {boolean} */
LokiResultset.prototype.searchIsChained;

/* TODO: ConstructSignature:  */

/**
 * reset() - Reset the resultset to its initial state.
 * 
 * @return {!LokiResultset}
 */
LokiResultset.prototype.reset = function() {};

/**
 * toJSON() - Override of toJSON to avoid circular references
 * @return {!LokiResultset}
 */
LokiResultset.prototype.toJSON = function() {};

/**
 * limit() - Allows you to limit the number of documents passed to next chain operation.
 *    A resultset copy() is made to avoid altering original resultset.
 * 
 * @param {number} qty
 * @return {!LokiResultset}
 */
LokiResultset.prototype.limit = function(qty) {};

/**
 * offset() - Used for skipping 'pos' number of documents in the resultset.
 * 
 * @param {number} pos
 * @return {!LokiResultset}
 */
LokiResultset.prototype.offset = function(pos) {};

/**
 * copy() - To support reuse of resultset in branched query situations.
 * 
 * @return {!LokiResultset}
 */
LokiResultset.prototype.copy = function() {};

/**
 * @return {!LokiResultset}
 */
LokiResultset.prototype.branch = function() {};

/**
 * transform() - executes a named collection transform or raw array of transform steps against the resultset.
 * 
 * @param {(string|!Array<?>)=} transform {string|array} : (Optional) name of collection transform or raw transform array
 * @param {?=} parameters {object} : (Optional) object property hash of parameters, if the transform requires them.
 * @return {!LokiResultset}
 */
LokiResultset.prototype.transform = function(transform, parameters) {};

/**
 * sort() - User supplied compare function is provided two documents to compare. (chainable)
 *    Example:
 *    rslt.sort(function(obj1, obj2) {
 *      if (obj1.name === obj2.name) return 0;
 *      if (obj1.name > obj2.name) return 1;
 *      if (obj1.name < obj2.name) return -1;
 *    });
 * 
 * @param {function(E, E): number} comparefun
 * @return {!LokiResultset}
 */
LokiResultset.prototype.sort = function(comparefun) {};

/**
 * simplesort() - Simpler, loose evaluation for user to sort based on a property name. (chainable)
 * 
 * @param {string} propname
 * @param {boolean=} isdesc
 * @return {!LokiResultset}
 */
LokiResultset.prototype.simplesort = function(propname, isdesc) {};

/**
 * compoundsort() - Allows sorting a resultset based on multiple columns.
 *    Example : rs.compoundsort(['age', 'name']); to sort by age and then name (both ascending)
 *    Example : rs.compoundsort(['age', ['name', true]); to sort by age (ascending) and then by name (descending)
 * 
 * @param {!Array<!Array<?>>} properties
 * @return {!LokiResultset}
 */
LokiResultset.prototype.compoundsort = function(properties) {};

/**
 * calculateRange() - Binary Search utility method to find range/segment of values matching criteria.
 *    this is used for collection.find() and first find filter of resultset/dynview
 *    slightly different than get() binary search in that get() hones in on 1 value,
 *    but we have to hone in on many (range)
 * @param {string} op
 * @param {string} prop
 * @param {?} val
 * @return {!Array<?>}
 */
LokiResultset.prototype.calculateRange = function(op, prop, val) {};

/**
 * findOr() - oversee the operation of OR'ed query expressions.
 *    OR'ed expression evaluation runs each expression individually against the full collection,
 *    and finally does a set OR on each expression's results.
 *    Each evaluation can utilize a binary index to prevent multiple linear array scans.
 * 
 * @param {!Array<!LokiQuery>} expressionArray
 * @return {!LokiResultset}
 */
LokiResultset.prototype.findOr = function(expressionArray) {};

/**
 * @param {!Array<!LokiQuery>} expressionArray
 * @return {!LokiResultset}
 */
LokiResultset.prototype.$or = function(expressionArray) {};

/**
 * findAnd() - oversee the operation of AND'ed query expressions.
 *    AND'ed expression evaluation runs each expression progressively against the full collection,
 *    internally utilizing existing chained resultset functionality.
 *    Only the first filter can utilize a binary index.
 * 
 * @param {!Array<!LokiQuery>} expressionArray
 * @return {!LokiResultset}
 */
LokiResultset.prototype.findAnd = function(expressionArray) {};

/**
 * @param {!Array<!LokiQuery>} expressionArray
 * @return {!LokiResultset}
 */
LokiResultset.prototype.$and = function(expressionArray) {};

/**
 * @param {!LokiQuery} query
 * @param {boolean=} firstOnly
 * @return {!LokiResultset}
 */
LokiResultset.prototype.find = function(query, firstOnly) {};

/**
 * where() - Used for filtering via a javascript filter function.
 * 
 * @param {function(E): boolean} fun
 * @return {!LokiResultset}
 */
LokiResultset.prototype.where = function(fun) {};

/**
 * count() - returns the number of documents in the resultset.
 * 
 * @return {number}
 */
LokiResultset.prototype.count = function() {};

/**
 * data() - Terminates the chain and returns array of filtered documents
 * 
 * @param {{forceClones: string, forceCloneMethod: string}=} options {object} : allows specifying 'forceClones' and 'forceCloneMethod' options.
 *    options :
 *      forceClones {boolean} : Allows forcing the return of cloned objects even when
 *        the collection is not configured for clone object.
 *      forceCloneMethod {string} : Allows overriding the default or collection specified cloning method.
 *        Possible values include 'parse-stringify', 'jquery-extend-deep', and 'shallow'
 * 
 * @return {!Array<E>}
 */
LokiResultset.prototype.data = function(options) {};

/**
 * update() - used to run an update operation on all documents currently in the resultset.
 * 
 * @param {function(E): void} updateFunction
 * @return {!LokiResultset}
 */
LokiResultset.prototype.update = function(updateFunction) {};

/**
 * remove() - removes all document objects which are currently in resultset from collection (as well as resultset)
 * 
 * @return {!LokiResultset}
 */
LokiResultset.prototype.remove = function() {};

/**
 * mapReduce() - data transformation via user supplied functions
 * 
 * @template T, U
 * @param {function(E, number, !Array<E>): T} mapFunction
 * @param {function(!Array<T>): U} reduceFunction
 * @return {U} The output of your reduceFunction
 */
LokiResultset.prototype.mapReduce = function(mapFunction, reduceFunction) {};

/**
 * eqJoin() - Left joining two sets of data. Join keys can be defined or calculated properties
 * eqJoin expects the right join key values to be unique.  Otherwise left data will be joined on the last joinData object with that key
 * @template T, U
 * @param {(!Array<T>|!LokiResultset<T>)} joinData
 * @param {(string|function(E): string)} leftJoinKey
 * @param {(string|function(T): string)} rightJoinKey
 * @param {function(E, T): U=} mapFun
 * @return {!LokiResultset<{left: E, right: T}>|!LokiResultset<U>}
 */
LokiResultset.prototype.eqJoin = function(joinData, leftJoinKey, rightJoinKey, mapFun) {};

/**
 * @template T
 * @param {function(E, number, !Array<E>): T} mapFun
 * @return {!LokiResultset<T>}
 */
LokiResultset.prototype.map = function(mapFun) {};
/**
 * @extends {LokiEventEmitter}
 * @record
 * @struct
 */
function LokiDynamicView() {}
 /** @type {!LokiResultset<E>} */
LokiDynamicView.prototype.cachedresultset;
 /** @type {!LokiCollection<E>} */
LokiDynamicView.prototype.collection;
 /** @type {!Object<string,!Array<function(!Array<?>): void>>} */
LokiDynamicView.prototype.events;
 /** @type {!Array<!LokiFilter<E>>} */
LokiDynamicView.prototype.filterPipeline;
 /** @type {number} */
LokiDynamicView.prototype.minRebuildInterval;
 /** @type {string} */
LokiDynamicView.prototype.name;
 /** @type {!LokiDynamicViewOptions} */
LokiDynamicView.prototype.options;
 /** @type {boolean} */
LokiDynamicView.prototype.persistent;
 /** @type {boolean} */
LokiDynamicView.prototype.rebuildPending;
 /** @type {!LokiResultset<E>} */
LokiDynamicView.prototype.resultset;
 /** @type {!Array<E>} */
LokiDynamicView.prototype.resultdata;
 /** @type {boolean} */
LokiDynamicView.prototype.resultsdirty;
 /** @type {function(E, E): number} */
LokiDynamicView.prototype.sortFunction;
 /** @type {!Array<!Array<?>>} */
LokiDynamicView.prototype.sortCriteria;
 /** @type {boolean} */
LokiDynamicView.prototype.sortDirty;
 /** @type {string} */
LokiDynamicView.prototype.sortPriority;

/* TODO: ConstructSignature:  */

/**
 * rematerialize() - intended for use immediately after deserialization (loading)
 *    This will clear out and reapply filterPipeline ops, recreating the view.
 *    Since where filters do not persist correctly, this method allows
 *    restoring the view to state where user can re-apply those where filters.
 * 
 * @param {{removeWhereFilters: boolean}=} options
 * @return {!LokiDynamicView}
 */
LokiDynamicView.prototype.rematerialize = function(options) {};

/**
 * branchResultset() - Makes a copy of the internal resultset for branched queries.
 *    Unlike this dynamic view, the branched resultset will not be 'live' updated,
 *    so your branched query should be immediately resolved and not held for future evaluation.
 * 
 * @param {(string|!Array<?>)=} transform
 * @param {?=} parameters
 * @return {!LokiResultset<E>}
 */
LokiDynamicView.prototype.branchResultset = function(transform, parameters) {};

/**
 * toJSON() - Override of toJSON to avoid circular references
 * @return {!LokiDynamicView}
 */
LokiDynamicView.prototype.toJSON = function() {};

/**
 * removeFilters() - Used to clear pipeline and reset dynamic view to initial state.
 *     Existing options should be retained.
 * @return {void}
 */
LokiDynamicView.prototype.removeFilters = function() {};

/**
 * applySort() - Used to apply a sort to the dynamic view
 * 
 * @param {function(E, E): number} comparefun
 * @return {!LokiDynamicView}
 */
LokiDynamicView.prototype.applySort = function(comparefun) {};

/**
 * applySimpleSort() - Used to specify a property used for view translation.
 * 
 * @param {string} propname
 * @param {boolean=} isdesc
 * @return {!LokiDynamicView}
 */
LokiDynamicView.prototype.applySimpleSort = function(propname, isdesc) {};

/**
 * applySortCriteria() - Allows sorting a resultset based on multiple columns.
 *    Example : dv.applySortCriteria(['age', 'name']); to sort by age and then name (both ascending)
 *    Example : dv.applySortCriteria(['age', ['name', true]); to sort by age (ascending) and then by name (descending)
 *    Example : dv.applySortCriteria(['age', true], ['name', true]); to sort by age (descending) and then by name (descending)
 * 
 * @param {!Array<!Array<?>>} criteria
 * @return {!LokiDynamicView}
 */
LokiDynamicView.prototype.applySortCriteria = function(criteria) {};

/**
 * startTransaction() - marks the beginning of a transaction.
 * 
 * @return {!LokiDynamicView}
 */
LokiDynamicView.prototype.startTransaction = function() {};

/**
 * commit() - commits a transaction.
 * 
 * @return {!LokiDynamicView}
 */
LokiDynamicView.prototype.commit = function() {};

/**
 * rollback() - rolls back a transaction.
 * 
 * @return {!LokiDynamicView}
 */
LokiDynamicView.prototype.rollback = function() {};

/**
 * Implementation detail.
 * _indexOfFilterWithId() - Find the index of a filter in the pipeline, by that filter's ID.
 * 
 * @param {(string|number)} uid
 * @return {number}
 */
LokiDynamicView.prototype._indexOfFilterWithId = function(uid) {};

/**
 * Implementation detail.
 * _addFilter() - Add the filter object to the end of view's filter pipeline and apply the filter to the resultset.
 * 
 * @param {!LokiFilter<E>} filter
 * @return {void}
 */
LokiDynamicView.prototype._addFilter = function(filter) {};

/**
 * reapplyFilters() - Reapply all the filters in the current pipeline.
 * 
 * @return {!LokiDynamicView}
 */
LokiDynamicView.prototype.reapplyFilters = function() {};

/**
 * applyFilter() - Adds or updates a filter in the DynamicView filter pipeline
 * 
 *    The object is in the format { 'type': filter_type, 'val', filter_param, 'uid', optional_filter_id }
 * @param {!LokiFilter<E>} filter
 * @return {!LokiDynamicView}
 */
LokiDynamicView.prototype.applyFilter = function(filter) {};

/**
 * applyFind() - Adds or updates a mongo-style query option in the DynamicView filter pipeline
 * 
 * @param {!LokiQuery} query
 * @param {(string|number)=} uid
 * @return {!LokiDynamicView}
 */
LokiDynamicView.prototype.applyFind = function(query, uid) {};

/**
 * applyWhere() - Adds or updates a javascript filter function in the DynamicView filter pipeline
 * 
 * @param {function(E): boolean} fun
 * @param {(string|number)=} uid
 * @return {!LokiDynamicView}
 */
LokiDynamicView.prototype.applyWhere = function(fun, uid) {};

/**
 * removeFilter() - Remove the specified filter from the DynamicView filter pipeline
 * 
 * @param {(string|number)} uid
 * @return {!LokiDynamicView}
 */
LokiDynamicView.prototype.removeFilter = function(uid) {};

/**
 * count() - returns the number of documents representing the current DynamicView contents.
 * 
 * @return {number}
 */
LokiDynamicView.prototype.count = function() {};

/**
 * data() - resolves and pending filtering and sorting, then returns document array as result.
 * 
 * @return {!Array<E>}
 */
LokiDynamicView.prototype.data = function() {};

/**
 * queueRebuildEvent() - When the view is not sorted we may still wish to be notified of rebuild events.
 *     This event will throttle and queue a single rebuild event when batches of updates affect the view.
 * @return {void}
 */
LokiDynamicView.prototype.queueRebuildEvent = function() {};

/**
 * queueSortPhase : If the view is sorted we will throttle sorting to either :
 *    (1) passive - when the user calls data(), or
 *    (2) active - once they stop updating and yield js thread control
 * @return {void}
 */
LokiDynamicView.prototype.queueSortPhase = function() {};

/**
 * performSortPhase() - invoked synchronously or asynchronously to perform final sort phase (if needed)
 * @param {{suppressRebuildEvent: boolean}=} options
 * @return {void}
 */
LokiDynamicView.prototype.performSortPhase = function(options) {};

/**
 * evaluateDocument() - internal method for (re)evaluating document inclusion.
 *    Called by : collection.insert() and collection.update().
 * 
 * @param {number} objIndex
 * @param {boolean=} isNew
 * @return {void}
 */
LokiDynamicView.prototype.evaluateDocument = function(objIndex, isNew) {};

/**
 * removeDocument() - internal function called on collection.delete()
 * @param {number} objIndex
 * @return {void}
 */
LokiDynamicView.prototype.removeDocument = function(objIndex) {};

/**
 * mapReduce() - data transformation via user supplied functions
 * 
 * @template T, U
 * @param {function(E, number, !Array<E>): T} mapFunction
 * @param {function(!Array<T>): U} reduceFunction
 * @return {U} The output of your reduceFunction
 */
LokiDynamicView.prototype.mapReduce = function(mapFunction, reduceFunction) {};
/**
 * @extends {LokiEventEmitter}
 * @record
 * @struct
 */
function LokiCollection() {}
 /** @type {boolean} */
LokiCollection.prototype.autoupdate;
 /** @type {boolean} */
LokiCollection.prototype.asyncListeners;
 /** @type {!Object<string,{name: string, dirty: boolean, values: !Array<number>}>} */
LokiCollection.prototype.binaryIndices;
 /** @type {!Array<number>} */
LokiCollection.prototype.cachedIndex;
 /** @type {!Object<string,{name: string, dirty: boolean, values: !Array<number>}>} */
LokiCollection.prototype.cachedBinaryIndex;
 /** @type {!Array<E>} */
LokiCollection.prototype.cachedData;
 /** @type {!Array<!LokiCollectionChange>} */
LokiCollection.prototype.changes;
 /** @type {string} */
LokiCollection.prototype.cloneMethod;
 /** @type {boolean} */
LokiCollection.prototype.cloneObjects;
 /** @type {{log: function(): void, warn: function(): void, error: function(): void}} */
LokiCollection.prototype.console;
 /** @type {{unique: !Object<string,!LokiUniqueIndex<E>>, exact: !Object<string,!LokiExactIndex<E>>}} */
LokiCollection.prototype.constraints;
 /** @type {!Array<E>} */
LokiCollection.prototype.data;
 /** @type {boolean} */
LokiCollection.prototype.dirty;
 /** @type {boolean} */
LokiCollection.prototype.disableChangesApi;
 /** @type {!Array<!LokiDynamicView<E>>} */
LokiCollection.prototype.DynamicViews;
 /** @type {!Object<string,!Array<function(!Array<?>): void>>} */
LokiCollection.prototype.events;
 /** @type {!Array<number>} */
LokiCollection.prototype.idIndex;
 /** @type {number} */
LokiCollection.prototype.maxId;
 /** @type {string} */
LokiCollection.prototype.name;
 /** @type {boolean} */
LokiCollection.prototype.transactional;
 /** @type {string} */
LokiCollection.prototype.objType;
 /** @type {!Object<string,?>} */
LokiCollection.prototype.transforms;
 /** @type {!Array<string>} */
LokiCollection.prototype.uniqueNames;
 /** @type {!LokiCollectionOptions} */
LokiCollection.prototype.options;
 /** @type {{age: number, ttlInterval: number, daemon: number}} */
LokiCollection.prototype.ttl;

/* TODO: ConstructSignature:  */
 /** @type {function(!Array<{object: ?}>): void} */
LokiCollection.prototype.observerCallback;
 /** @type {!Object<string,?>} */
LokiCollection.prototype.stages;
 /** @type {!Array<{timestamp: number, message: ?, data: E}>} */
LokiCollection.prototype.commitLog;

/**
 * @return {!Array<!LokiCollectionChange>}
 */
LokiCollection.prototype.getChanges = function() {};

/**
 * @param {boolean} enabled
 * @return {void}
 */
LokiCollection.prototype.setChangesApi = function(enabled) {};

/**
 * @return {void}
 */
LokiCollection.prototype.flushChanges = function() {};

/**
 * @param {?} object
 * @return {void}
 */
LokiCollection.prototype.addAutoUpdateObserver = function(object) {};

/**
 * @param {?} object
 * @return {void}
 */
LokiCollection.prototype.removeAutoUpdateObserver = function(object) {};

/**
 * @param {string} name
 * @param {?} transform
 * @return {void}
 */
LokiCollection.prototype.addTransform = function(name, transform) {};

/**
 * @param {string} name
 * @param {?} transform
 * @return {void}
 */
LokiCollection.prototype.setTransform = function(name, transform) {};

/**
 * @param {string} name
 * @return {void}
 */
LokiCollection.prototype.removeTransform = function(name) {};

/**
 * @param {?} template
 * @return {{$and: !Array<?>}}
 */
LokiCollection.prototype.byExample = function(template) {};

/**
 * @param {?} template
 * @return {E}
 */
LokiCollection.prototype.findObject = function(template) {};

/**
 * @param {?} template
 * @return {!Array<E>}
 */
LokiCollection.prototype.findObjects = function(template) {};

/**
 * @return {function(): void}
 */
LokiCollection.prototype.ttlDaemonFuncGen = function() {};

/**
 * @param {number} age
 * @param {number} interval
 * @return {void}
 */
LokiCollection.prototype.setTTL = function(age, interval) {};

/**
 * create a row filter that covers all documents in the collection
 * @return {!Array<number>}
 */
LokiCollection.prototype.prepareFullDocIndex = function() {};

/**
 * Ensure binary index on a certain field
 * @param {string} property
 * @param {boolean=} force
 * @return {void}
 */
LokiCollection.prototype.ensureIndex = function(property, force) {};

/**
 * @param {string} field
 * @return {!LokiUniqueIndex<E>}
 */
LokiCollection.prototype.ensureUniqueIndex = function(field) {};

/**
 * Ensure all binary indices
 * @param {boolean=} force
 * @return {void}
 */
LokiCollection.prototype.ensureAllIndexes = function(force) {};

/**
 * @return {void}
 */
LokiCollection.prototype.flagBinaryIndexesDirty = function() {};

/**
 * @param {string} index
 * @return {void}
 */
LokiCollection.prototype.flagBinaryIndexDirty = function(index) {};

/**
 * @param {!LokiQuery=} query
 * @return {number}
 */
LokiCollection.prototype.count = function(query) {};

/**
 * Rebuild idIndex
 * @return {void}
 */
LokiCollection.prototype.ensureId = function() {};

/**
 * Rebuild idIndex async with callback - useful for background syncing with a remote server
 * @param {function(): void} callback
 * @return {void}
 */
LokiCollection.prototype.ensureIdAsync = function(callback) {};

/**
 * Each collection maintains a list of DynamicViews associated with it
 * 
 * @param {string} name
 * @param {!LokiDynamicViewOptions=} options
 * @return {!LokiDynamicView<E>}
 */
LokiCollection.prototype.addDynamicView = function(name, options) {};

/**
 * @param {string} name
 * @return {void}
 */
LokiCollection.prototype.removeDynamicView = function(name) {};

/**
 * @param {string} name
 * @return {!LokiDynamicView<E>}
 */
LokiCollection.prototype.getDynamicView = function(name) {};

/**
 * find and update: pass a filtering function to select elements to be updated
 * and apply the updatefunctino to those elements iteratively
 * @param {function(E): boolean} filterFunction
 * @param {function(E): E} updateFunction
 * @return {void}
 */
LokiCollection.prototype.findAndUpdate = function(filterFunction, updateFunction) {};

/**
 * generate document method - ensure object(s) have meta properties, clone it if necessary, etc.
 * @param {E|!Array<E>} doc
 * @return {E|!Array<E>} document or documents (if passed an array of objects)
 */
LokiCollection.prototype.insert = function(doc) {};

/**
 * generate document method - ensure object has meta properties, clone it if necessary, etc.
 * @param {E} doc
 * @return {E} document or 'undefined' if there was a problem inserting it
 */
LokiCollection.prototype.insertOne = function(doc) {};

/**
 * @return {void}
 */
LokiCollection.prototype.clear = function() {};

/**
 * Update method
 * @param {E|!Array<E>} doc
 * @return {E|void}
 */
LokiCollection.prototype.update = function(doc) {};

/**
 * Add object to collection
 * @param {E} obj
 * @return {E}
 */
LokiCollection.prototype.add = function(obj) {};

/**
 * @param {(!LokiQuery|function(E): boolean)} query
 * @return {void}
 */
LokiCollection.prototype.removeWhere = function(query) {};

/**
 * @return {void}
 */
LokiCollection.prototype.removeDataOnly = function() {};

/**
 * delete wrapped
 * @param {E|number|!Array<number>|!Array<E>} doc
 * @return {E|void}
 */
LokiCollection.prototype.remove = function(doc) {};

/**
 * Get by Id - faster than other methods because of the searching algorithm
 * @param {(string|number)} id
 * @param {boolean=} returnPosition
 * @return {E|(E|!Array<?>)}
 */
LokiCollection.prototype.get = function(id, returnPosition) {};

/**
 * @param {string} field
 * @param {string=} value
 * @return {function(?): E|E}
 */
LokiCollection.prototype.by = function(field, value) {};

/**
 * Find one object by index property, by property equal to value
 * @param {!LokiQuery} query
 * @return {E}
 */
LokiCollection.prototype.findOne = function(query) {};

/**
 * Chain method, used for beginning a series of chained find() and/or view() operations
 * on a collection.
 * 
 * @param {(string|!Array<?>)=} transform
 * @param {?=} parameters
 * @return {!LokiResultset<E>}
 */
LokiCollection.prototype.chain = function(transform, parameters) {};

/**
 * Find method, api is similar to mongodb except for now it only supports one search parameter.
 * for more complex queries use view() and storeView()
 * @param {!LokiQuery=} query
 * @return {!Array<E>|!LokiResultset<E>}
 */
LokiCollection.prototype.find = function(query) {};

/**
 * Find object by unindexed field by property equal to value,
 * simply iterates and returns the first element matching the query
 * @param {string} prop
 * @param {?} value
 * @return {E}
 */
LokiCollection.prototype.findOneUnindexed = function(prop, value) {};

/**
 * start the transation
 * @return {void}
 */
LokiCollection.prototype.startTransaction = function() {};

/**
 * commit the transation
 * @return {void}
 */
LokiCollection.prototype.commit = function() {};

/**
 * roll back the transation
 * @return {void}
 */
LokiCollection.prototype.rollback = function() {};

/**
 * @param {function(): void} fun
 * @param {function(): void} callback
 * @return {void}
 */
LokiCollection.prototype.async = function(fun, callback) {};

/**
 * Create view function - filter
 * @param {function(E): boolean} fun
 * @return {!LokiResultset<E>}
 */
LokiCollection.prototype.where = function(fun) {};

/**
 * Map Reduce
 * @template U, V
 * @param {function(E, number, !Array<E>): U} mapFunction
 * @param {function(!Array<U>): V} reduceFunction
 * @return {V}
 */
LokiCollection.prototype.mapReduce = function(mapFunction, reduceFunction) {};

/**
 * eqJoin - Join two collections on specified properties
 * @template T, U
 * @param {(!Array<T>|!LokiResultset<T>)} joinData
 * @param {(string|function(E): string)} leftJoinProp
 * @param {(string|function(T): string)} rightJoinProp
 * @param {function(E, T): U=} mapFun
 * @return {!LokiResultset<{left: E, right: T}>|!LokiResultset<U>}
 */
LokiCollection.prototype.eqJoin = function(joinData, leftJoinProp, rightJoinProp, mapFun) {};

/**
 * create a stage and/or retrieve it
 * @param {string} name
 * @return {!Array<E>}
 */
LokiCollection.prototype.getStage = function(name) {};

/**
 * create a copy of an object and insert it into a stage
 * @param {string} stageName
 * @param {E} obj
 * @return {E}
 */
LokiCollection.prototype.stage = function(stageName, obj) {};

/**
 * re-attach all objects to the original collection, so indexes and views can be rebuilt
 * then create a message to be inserted in the commitlog
 * @param {string} stageName
 * @param {?} message
 * @return {void}
 */
LokiCollection.prototype.commitStage = function(stageName, message) {};

/**
 * @return {void}
 */
LokiCollection.prototype.no_op = function() {};

/**
 * @param {string} field
 * @return {!Array<?>}
 */
LokiCollection.prototype.extract = function(field) {};

/**
 * @param {string} field
 * @return {number}
 */
LokiCollection.prototype.max = function(field) {};

/**
 * @param {string} field
 * @return {number}
 */
LokiCollection.prototype.min = function(field) {};

/**
 * @param {string} field
 * @return {{index: number, value: ?}}
 */
LokiCollection.prototype.maxRecord = function(field) {};

/**
 * @param {string} field
 * @return {{index: number, value: ?}}
 */
LokiCollection.prototype.minRecord = function(field) {};

/**
 * @param {string} field
 * @return {!Array<number>}
 */
LokiCollection.prototype.extractNumerical = function(field) {};

/**
 * @param {string} field
 * @return {number}
 */
LokiCollection.prototype.avg = function(field) {};

/**
 * @param {string} field
 * @return {number}
 */
LokiCollection.prototype.stdDev = function(field) {};

/**
 * @param {string} field
 * @return {(string|number)}
 */
LokiCollection.prototype.mode = function(field) {};

/**
 * @param {string} field
 * @return {number}
 */
LokiCollection.prototype.median = function(field) {};
/**
 * @record
 * @struct
 */
function LokiOps() {}

/**
 * @param {?} a
 * @param {?} b
 * @return {boolean}
 */
LokiOps.prototype.$eq = function(a, b) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {boolean}
 */
LokiOps.prototype.$ne = function(a, b) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {boolean}
 */
LokiOps.prototype.$dteq = function(a, b) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {boolean}
 */
LokiOps.prototype.$gt = function(a, b) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {boolean}
 */
LokiOps.prototype.$gte = function(a, b) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {boolean}
 */
LokiOps.prototype.$lt = function(a, b) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {boolean}
 */
LokiOps.prototype.$lte = function(a, b) {};

/**
 * @param {?} a
 * @param {{indexOf: function(?): boolean}} b
 * @return {boolean}
 */
LokiOps.prototype.$in = function(a, b) {};

/**
 * @param {?} a
 * @param {{indexOf: function(?): boolean}} b
 * @return {boolean}
 */
LokiOps.prototype.$nin = function(a, b) {};

/**
 * @param {string} a
 * @param {?} b
 * @return {boolean}
 */
LokiOps.prototype.$keyin = function(a, b) {};

/**
 * @param {string} a
 * @param {?} b
 * @return {boolean}
 */
LokiOps.prototype.$nkeyin = function(a, b) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {boolean}
 */
LokiOps.prototype.$definedin = function(a, b) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {boolean}
 */
LokiOps.prototype.$undefinedin = function(a, b) {};

/**
 * @param {?} a
 * @param {(!RegExp|{test: function(string): boolean})} b
 * @return {boolean}
 */
LokiOps.prototype.$regex = function(a, b) {};

/**
 * @param {?} a
 * @param {string} b
 * @return {boolean}
 */
LokiOps.prototype.$containsString = function(a, b) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {boolean}
 */
LokiOps.prototype.$containsNone = function(a, b) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {boolean}
 */
LokiOps.prototype.$containsAny = function(a, b) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {boolean}
 */
LokiOps.prototype.$contains = function(a, b) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {boolean}
 */
LokiOps.prototype.$type = function(a, b) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {boolean}
 */
LokiOps.prototype.$size = function(a, b) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {boolean}
 */
LokiOps.prototype.$len = function(a, b) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {boolean}
 */
LokiOps.prototype.$not = function(a, b) {};

/**
 * @param {?} a
 * @param {!Array<?>} b
 * @return {boolean}
 */
LokiOps.prototype.$and = function(a, b) {};

/**
 * @param {?} a
 * @param {!Array<?>} b
 * @return {boolean}
 */
LokiOps.prototype.$or = function(a, b) {};
/**
 * @record
 * @struct
 */
function LokiKeyValueStore() {}
 /** @type {!Array<K>} */
LokiKeyValueStore.prototype.keys;
 /** @type {!Array<V>} */
LokiKeyValueStore.prototype.values;

/**
 * @param {?} a
 * @param {?} b
 * @return {number}
 */
LokiKeyValueStore.prototype.sort = function(a, b) {};

/**
 * @param {function(K, K): number} fun
 * @return {void}
 */
LokiKeyValueStore.prototype.setSort = function(fun) {};

/**
 * @return {!LokiBSonSort<K>}
 */
LokiKeyValueStore.prototype.bs = function() {};

/**
 * @param {K} key
 * @param {V} value
 * @return {void}
 */
LokiKeyValueStore.prototype.set = function(key, value) {};

/**
 * @param {K} key
 * @return {V}
 */
LokiKeyValueStore.prototype.get = function(key) {};
/**
 * @record
 * @struct
 */
function LokiUniqueIndex() {}
 /** @type {string} */
LokiUniqueIndex.prototype.field;
 /** @type {!Object<string,E>} */
LokiUniqueIndex.prototype.keyMap;
 /** @type {!Object<number,?>} */
LokiUniqueIndex.prototype.lokiMap;

/* TODO: ConstructSignature:  */

/**
 * @param {E} obj
 * @return {void}
 */
LokiUniqueIndex.prototype.set = function(obj) {};

/**
 * @param {string} key
 * @return {E}
 */
LokiUniqueIndex.prototype.get = function(key) {};

/**
 * @param {number} id
 * @return {E}
 */
LokiUniqueIndex.prototype.byId = function(id) {};

/**
 * @param {E} obj
 * @return {void}
 */
LokiUniqueIndex.prototype.update = function(obj) {};

/**
 * @param {string} key
 * @return {void}
 */
LokiUniqueIndex.prototype.remove = function(key) {};

/**
 * @return {void}
 */
LokiUniqueIndex.prototype.clear = function() {};
/**
 * @record
 * @struct
 */
function LokiExactIndex() {}
 /** @type {!Object<string,!Array<E>>} */
LokiExactIndex.prototype.index;
 /** @type {string} */
LokiExactIndex.prototype.field;

/* TODO: ConstructSignature:  */

/**
 * add the value you want returned to the key in the index
 * @param {string} key
 * @param {E} val
 * @return {void}
 */
LokiExactIndex.prototype.set = function(key, val) {};

/**
 * remove the value from the index, if the value was the last one, remove the key
 * @param {string} key
 * @param {E} val
 * @return {void}
 */
LokiExactIndex.prototype.remove = function(key, val) {};

/**
 * get the values related to the key, could be more than one
 * @param {string} key
 * @return {!Array<E>}
 */
LokiExactIndex.prototype.get = function(key) {};

/**
 * clear will zap the index
 * @param {?=} key
 * @return {void}
 */
LokiExactIndex.prototype.clear = function(key) {};
/**
 * @record
 * @struct
 */
function LokiSortedIndex() {}
 /** @type {string} */
LokiSortedIndex.prototype.field;
 /** @type {!Array<K>} */
LokiSortedIndex.prototype.keys;
 /** @type {!Array<!Array<V>>} */
LokiSortedIndex.prototype.values;

/* TODO: ConstructSignature:  */

/**
 * @param {?} a
 * @param {?} b
 * @return {number}
 */
LokiSortedIndex.prototype.sort = function(a, b) {};

/**
 * @return {!LokiBSonSort<?>}
 */
LokiSortedIndex.prototype.bs = function() {};

/**
 * @param {function(?, ?): number} fun
 * @return {void}
 */
LokiSortedIndex.prototype.setSort = function(fun) {};

/**
 * @param {K} key
 * @param {V} value
 * @return {void}
 */
LokiSortedIndex.prototype.set = function(key, value) {};

/**
 * @param {K} key
 * @return {!Array<V>}
 */
LokiSortedIndex.prototype.get = function(key) {};

/**
 * @param {K} key
 * @return {!Array<V>}
 */
LokiSortedIndex.prototype.getLt = function(key) {};

/**
 * @param {K} key
 * @return {!Array<V>}
 */
LokiSortedIndex.prototype.getGt = function(key) {};

/**
 * @param {K} key
 * @param {number} start
 * @param {number} end
 * @return {!Array<V>}
 */
LokiSortedIndex.prototype.getAll = function(key, start, end) {};

/**
 * @param {K} key
 * @return {{found: boolean, index: number}}
 */
LokiSortedIndex.prototype.getPos = function(key) {};

/**
 * @param {K} key
 * @param {V} value
 * @return {void}
 */
LokiSortedIndex.prototype.remove = function(key, value) {};

/**
 * @return {void}
 */
LokiSortedIndex.prototype.clear = function() {};
/**
 * @record
 * @struct
 */
function LokiConfigureOptions() {}
 /** @type {!LokiPersistenceInterface} */
LokiConfigureOptions.prototype.adapter;
 /** @type {boolean} */
LokiConfigureOptions.prototype.autoload;
 /** @type {function(?): void} */
LokiConfigureOptions.prototype.autoloadCallback;
 /** @type {boolean} */
LokiConfigureOptions.prototype.autosave;
 /** @type {function(?): void} */
LokiConfigureOptions.prototype.autosaveCallback;
 /** @type {number} */
LokiConfigureOptions.prototype.autosaveInterval;
 /** @type {string} */
LokiConfigureOptions.prototype.env;
 /** @type {string} */
LokiConfigureOptions.prototype.persistenceMethod;
 /** @type {boolean} */
LokiConfigureOptions.prototype.verbose;
/**
 * @record
 * @struct
 */
function LokiCollectionOptions() {}
 /** @type {boolean} */
LokiCollectionOptions.prototype.asyncListeners;
 /** @type {boolean} */
LokiCollectionOptions.prototype.autoupdate;
 /** @type {boolean} */
LokiCollectionOptions.prototype.clone;
 /** @type {string} */
LokiCollectionOptions.prototype.cloneMethod;
 /** @type {boolean} */
LokiCollectionOptions.prototype.disableChangesApi;
 /** @type {!Array<string>} */
LokiCollectionOptions.prototype.exact;
 /** @type {(string|!Array<string>)} */
LokiCollectionOptions.prototype.indices;
 /** @type {boolean} */
LokiCollectionOptions.prototype.transactional;
 /** @type {(string|!Array<string>)} */
LokiCollectionOptions.prototype.unique;
/**
 * @record
 * @struct
 */
function LokiDynamicViewOptions() {}
 /** @type {number} */
LokiDynamicViewOptions.prototype.minRebuildInterval;
 /** @type {boolean} */
LokiDynamicViewOptions.prototype.persistent;
 /** @type {string} */
LokiDynamicViewOptions.prototype.sortPriority;
/**
 * @record
 * @struct
 */
function LokiResultsetOptions() {}
 /** @type {boolean} */
LokiResultsetOptions.prototype.firstOnly;
 /** @type {!LokiQuery} */
LokiResultsetOptions.prototype.queryObj;
 /** @type {function(E): boolean} */
LokiResultsetOptions.prototype.queryFunc;
/**
 * @record
 * @struct
 */
function LokiQuery() {}
/**
 * @record
 * @struct
 */
function LokiFilter() {}
 /** @type {string} */
LokiFilter.prototype.type;
 /** @type {(!LokiQuery|function(E, number, !Array<E>): boolean)} */
LokiFilter.prototype.val;
 /** @type {(string|number)} */
LokiFilter.prototype.uid;
/**
 * @record
 * @struct
 */
function LokiElementMetaData() {}
 /** @type {number} */
LokiElementMetaData.prototype.created;
 /** @type {number} */
LokiElementMetaData.prototype.revision;
/**
 * @record
 * @struct
 */
function LokiCollectionChange() {}
 /** @type {string} */
LokiCollectionChange.prototype.name;
 /** @type {string} */
LokiCollectionChange.prototype.operation;
 /** @type {?} */
LokiCollectionChange.prototype.obj;
/**
 * @record
 * @struct
 */
function LokiBSonSort() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function LokiIndexedAdapter() {}
 /** @type {string} */
LokiIndexedAdapter.prototype.app;
 /** @type {!LokiCatalog} */
LokiIndexedAdapter.prototype.catalog;

/* TODO: ConstructSignature:  */

/**
 * checkAvailability - used to check if adapter is available
 * @return {boolean}
 */
LokiIndexedAdapter.prototype.checkAvailability = function() {};

/**
 * loadDatabase() - Retrieves a serialized db string from the catalog.
 * @param {string} dbname
 * @param {function(?): void=} callback
 * @return {void}
 */
LokiIndexedAdapter.prototype.loadDatabase = function(dbname, callback) {};

/**
 * @param {string} dbname
 * @param {function(?): void=} callback
 * @return {void}
 */
LokiIndexedAdapter.prototype.loadKey = function(dbname, callback) {};

/**
 * saveDatabase() - Saves a serialized db to the catalog.
 * @param {string} dbname
 * @param {string} dbstring
 * @param {function((void|!Error)): void=} callback
 * @return {void}
 */
LokiIndexedAdapter.prototype.saveDatabase = function(dbname, dbstring, callback) {};

/**
 * @param {string} dbname
 * @param {string} dbstring
 * @param {function((void|!Error)): void=} callback
 * @return {void}
 */
LokiIndexedAdapter.prototype.saveKey = function(dbname, dbstring, callback) {};

/**
 * deleteDatabase() - Deletes a serialized db from the catalog.
 * @param {string} dbname
 * @return {void}
 */
LokiIndexedAdapter.prototype.deleteDatabase = function(dbname) {};

/**
 * @param {string} dbname
 * @return {void}
 */
LokiIndexedAdapter.prototype.deleteKey = function(dbname) {};

/**
 * getDatabaseList() - Retrieves object array of catalog entries for current app.
 * @param {function(!Array<string>): void} callback
 * @return {void}
 */
LokiIndexedAdapter.prototype.getDatabaseList = function(callback) {};

/**
 * @param {function(!Array<string>): void} callback
 * @return {void}
 */
LokiIndexedAdapter.prototype.getKeyList = function(callback) {};

/**
 * getCatalogSummary - allows retrieval of list of all keys in catalog along with size
 * @param {function({app: string, key: string, size: number}): void} callback
 * @return {void}
 */
LokiIndexedAdapter.prototype.getCatalogSummary = function(callback) {};
/**
 * @record
 * @struct
 */
function LokiCatalog() {}
 /** @type {!IDBDatabase} */
LokiCatalog.prototype.db;

/* TODO: ConstructSignature:  */

/**
 * @param {function(!LokiCatalog): void} callback
 * @return {void}
 */
LokiCatalog.prototype.initializeLokiCatalog = function(callback) {};

/**
 * @param {string} app
 * @param {string} key
 * @param {function(?): void} callback
 * @return {void}
 */
LokiCatalog.prototype.getAppKey = function(app, key, callback) {};

/**
 * @template T
 * @param {?} id
 * @param {function(?, T): void} callback
 * @param {T} data
 * @return {void}
 */
LokiCatalog.prototype.getAppKeyById = function(id, callback, data) {};

/**
 * @param {string} app
 * @param {string} key
 * @param {?} val
 * @param {function({success: boolean}): void} callback
 * @return {void}
 */
LokiCatalog.prototype.setAppKey = function(app, key, val, callback) {};

/**
 * @param {?} id
 * @param {function({success: boolean}): void} callback
 * @return {void}
 */
LokiCatalog.prototype.deleteAppKey = function(id, callback) {};

/**
 * @param {string} app
 * @param {function(!Array<?>): void} callback
 * @return {void}
 */
LokiCatalog.prototype.getAppKeys = function(app, callback) {};

/**
 * @param {function(!Array<?>): void} callback
 * @return {void}
 */
LokiCatalog.prototype.getAllKeys = function(callback) {};
/**
 * @record
 * @struct
 */
function LokiCryptedFileAdapter() {}
 /** @type {string} */
LokiCryptedFileAdapter.prototype.secret;

/* TODO: ConstructSignature:  */

/**
 * setSecret() - set the secret to be used during encryption and decryption
 * 
 * @param {string} secret
 * @return {void}
 */
LokiCryptedFileAdapter.prototype.setSecret = function(secret) {};

/**
 * loadDatabase() - Retrieves a serialized db string from the catalog.
 * 
 *  \@example
 * // LOAD
 * var cryptedFileAdapter = require('./lokiCryptedFileAdapter');
 * cryptedFileAdapter.setSecret('mySecret'); // you should change 'mySecret' to something supplied by the user
 * var db = new loki('test.crypted', { adapter: cryptedFileAdapter }); //you can use any name, not just '*.crypted'
 * db.loadDatabase(function(result) {
 * console.log('done');
 * });
 * 
 * @param {string} dbname
 * @param {function(?): void} callback
 * @return {void}
 */
LokiCryptedFileAdapter.prototype.loadDatabase = function(dbname, callback) {};

/**
 *
 * \@example 
 * // SAVE : will save database in 'test.crypted'
 * var cryptedFileAdapter = require('./lokiCryptedFileAdapter');
 * cryptedFileAdapter.setSecret('mySecret'); // you should change 'mySecret' to something supplied by the user
 * var loki=require('lokijs');
 * var db = new loki('test.crypted',{ adapter: cryptedFileAdapter }); //you can use any name, not just '*.crypted'
 * var coll = db.addCollection('testColl');
 * coll.insert({test: 'val'});
 * db.saveDatabase();  // could pass callback if needed for async complete
 * \@example 
 * // if you have the krypt module installed you can use:
 * krypt --decrypt test.crypted --secret mySecret
 * to view the contents of the database
 * saveDatabase() - Saves a serialized db to the catalog.
 * 
 * @param {string} dbname
 * @param {string} dbstring
 * @param {function(?): void} callback
 * @return {void}
 */
LokiCryptedFileAdapter.prototype.saveDatabase = function(dbname, dbstring, callback) {};
/**
 * @record
 * @struct
 */
function LokiCryptedFileAdapterEncryptResult() {}
 /** @type {string} */
LokiCryptedFileAdapterEncryptResult.prototype.cipher;
 /** @type {string} */
LokiCryptedFileAdapterEncryptResult.prototype.keyDerivation;
 /** @type {number} */
LokiCryptedFileAdapterEncryptResult.prototype.keyLength;
 /** @type {number} */
LokiCryptedFileAdapterEncryptResult.prototype.iterations;
 /** @type {string} */
LokiCryptedFileAdapterEncryptResult.prototype.iv;
 /** @type {string} */
LokiCryptedFileAdapterEncryptResult.prototype.salt;
 /** @type {string} */
LokiCryptedFileAdapterEncryptResult.prototype.value;
/**
 * @record
 * @struct
 */
function LokiJquerySyncAdapter() {}
 /** @type {!LokiJquerySyncAdapterOptions} */
LokiJquerySyncAdapter.prototype.options;

/* TODO: ConstructSignature:  */

/**
 * @param {string} name
 * @param {?} data
 * @param {function(?, string, !XMLHttpRequest): ?=} callback
 * @return {void}
 */
LokiJquerySyncAdapter.prototype.saveDatabase = function(name, data, callback) {};

/**
 * @param {string} name
 * @param {function(?, string, !XMLHttpRequest): ?=} callback
 * @return {void}
 */
LokiJquerySyncAdapter.prototype.loadDatabase = function(name, callback) {};
/**
 * @record
 * @struct
 */
function LokiJquerySyncAdapterOptions() {}
 /** @type {{ajax: function(?): ?}} */
LokiJquerySyncAdapterOptions.prototype.ajaxLib;
 /** @type {{url: ?, type: string, dataType: string}} */
LokiJquerySyncAdapterOptions.prototype.save;
 /** @type {{url: ?, type: string, dataType: string}} */
LokiJquerySyncAdapterOptions.prototype.load;
/**
 * @record
 * @struct
 */
function LokiJquerySyncAdapterError() {}
 /** @type {string} */
LokiJquerySyncAdapterError.prototype.name;
 /** @type {?} */
LokiJquerySyncAdapterError.prototype.message;

/* TODO: ConstructSignature:  */
 /** @type {function(new: (!LokiCryptedFileAdapter)): ?} */
var LokiCryptedFileAdapterConstructor;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "lokiCryptedFileAdapter"
/** @const */
tsickle_declare_module.lokiCryptedFileAdapter = {};

/* TODO: ExportAssignment in tsickle_declare_module.lokiCryptedFileAdapter */
 /** @type {function(new: (!LokiIndexedAdapter), string): ?} */
var LokiIndexedAdapterConstructor;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "loki-indexed-adapter"
/** @const */
tsickle_declare_module.loki_indexed_adapter = {};

/* TODO: ExportAssignment in tsickle_declare_module.loki_indexed_adapter */
 /** @type {function(new: (!Loki), string, !LokiConfigureOptions): ?} */
var LokiConstructor;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "lokijs"
/** @const */
tsickle_declare_module.lokijs = {};

/* TODO: ExportAssignment in tsickle_declare_module.lokijs */
