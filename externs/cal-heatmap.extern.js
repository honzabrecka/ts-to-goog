/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cal-heatmap/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var CalHeatMap = {};
/**
 * @record
 * @struct
 */
CalHeatMap.CalHeatMapStatic = function() {};

/* TODO: ConstructSignature: CalHeatMap */
/**
 * @record
 * @struct
 */
CalHeatMap.CalHeatMap = function() {};
 /** @type {!CalHeatMap.RuntimeOptions} */
CalHeatMap.CalHeatMap.prototype.options;
 /** @type {number} */
CalHeatMap.CalHeatMap.prototype.RESET_ALL_ON_UPDATE;
 /** @type {number} */
CalHeatMap.CalHeatMap.prototype.RESET_SINGLE_ON_UPDATE;
 /** @type {number} */
CalHeatMap.CalHeatMap.prototype.APPEND_ON_UPDATE;

/**
 * Initialise the CalHeatMap with the specified options
 * @param {!CalHeatMap.InitOptions=} options
 * @return {void}
 */
CalHeatMap.CalHeatMap.prototype.init = function(options) {};

/**
 * Shift the calendar n domains back
 * @param {number=} n
 * @return {void}
 */
CalHeatMap.CalHeatMap.prototype.previous = function(n) {};

/**
 * Shift the calendar n domains forward
 * @param {number=} n
 * @return {void}
 */
CalHeatMap.CalHeatMap.prototype.next = function(n) {};

/**
 * Jump the calendar to the specified date
 * This method will shift the calendar backward or forward, until the domain containing the specified date is visible.
 * @param {!Date} date
 * @param {boolean=} reset
 * @return {void}
 */
CalHeatMap.CalHeatMap.prototype.jumpTo = function(date, reset) {};

/**
 * Reset the calendar back to the start date
 * @return {void}
 */
CalHeatMap.CalHeatMap.prototype.rewind = function() {};

/**
 * Update the calendar with new data
 * Use update() when you want to refresh the calendar with a new set of data.
 * Particularly useful if you're filling the calendar in realtime, or if you want to display a subset of the current data.
 *                     It can also directly takes a function, in case your data can not be converted with the afterLoad() function you defined.
 *                      Accepted values are:
 *                        Instance.RESET_ALL_ON_UPDATE  (default) Reset the whole calendar data before inserting the new data.
 *                        Instance.RESET_SINGLE_ON_UPDATE  Update only the dates (subDomain) you pass in the data argument,
 *                                                         replace their value by the new ones. All other dates are leaved untouched.
 *                        Instance.APPEND_ON_UPDATE  Instead of replacing a date's value by a new one, increment it by the new value.
 *                                                   All other dates are leaved untouched. That's the one you want to use of you're
 *                                                   populating the calendar in realtime!
 * @param {(string|!Object)} data
 * @param {(boolean|!Function)=} afterLoad
 * @param {number=} updateMode
 * @return {void}
 */
CalHeatMap.CalHeatMap.prototype.update = function(data, afterLoad, updateMode) {};

/**
 * Change the highlighted dates.
 * Takes an array of Date object. Can also accepts the now string, equivalent to Date.now().
 * @param {(string|!Date|!Array<!Date>)} dates
 * @return {void}
 */
CalHeatMap.CalHeatMap.prototype.highlight = function(dates) {};

/**
 * Return the SVG source code with the appropriate CSS
 * The returned string code is valid and ready to be placed in a .svg file.
 * @return {string} SVG source code with the appropriate CSS.
 */
CalHeatMap.CalHeatMap.prototype.getSVG = function() {};

/**
 * Change the legend settings and/or threshold
 * When called without arguments, setLegend() will just redraw the legend.
 * @param {!Array<number>=} legend
 * @param {(!CalHeatMap.LegendColor|!Array<string>)=} legendColors
 * @return {void}
 */
CalHeatMap.CalHeatMap.prototype.setLegend = function(legend, legendColors) {};

/**
 * Remove the legend from the calendar
 * Settings are kept and you can re-add the legend with the same settings using showLegend().
 * @return {void}
 */
CalHeatMap.CalHeatMap.prototype.removeLegend = function() {};

/**
 * Display the legend, if not already shown.
 * @return {void}
 */
CalHeatMap.CalHeatMap.prototype.showLegend = function() {};

/**
 * Remove the calendar from the DOM
 * Remember to self-assign the result of destroy() to your calendar instance, or it'll lead to a memory leak.
 * @param {!Function=} callback
 * @return {!CalHeatMap.CalHeatMap} always returns null.
 */
CalHeatMap.CalHeatMap.prototype.destroy = function(callback) {};
/**
 * @record
 * @struct
 */
CalHeatMap.LegendColor = function() {};
 /** @type {string} */
CalHeatMap.LegendColor.prototype.min;
 /** @type {string} */
CalHeatMap.LegendColor.prototype.max;
 /** @type {string} */
CalHeatMap.LegendColor.prototype.empty;
 /** @type {string} */
CalHeatMap.LegendColor.prototype.base;
 /** @type {string} */
CalHeatMap.LegendColor.prototype.overflow;
/**
 * @record
 * @struct
 */
CalHeatMap.InitOptions = function() {};
 /** @type {(string|!HTMLElement|!Element|!EventTarget)} */
CalHeatMap.InitOptions.prototype.itemSelector;
 /** @type {string} */
CalHeatMap.InitOptions.prototype.domain;
 /** @type {string} */
CalHeatMap.InitOptions.prototype.subDomain;
 /** @type {number} */
CalHeatMap.InitOptions.prototype.range;
 /** @type {number} */
CalHeatMap.InitOptions.prototype.cellSize;
 /** @type {number} */
CalHeatMap.InitOptions.prototype.cellPadding;
 /** @type {number} */
CalHeatMap.InitOptions.prototype.cellRadius;
 /** @type {number} */
CalHeatMap.InitOptions.prototype.domainGutter;
 /** @type {(number|!Array<number>)} */
CalHeatMap.InitOptions.prototype.domainMargin;
 /** @type {boolean} */
CalHeatMap.InitOptions.prototype.domainDynamicDimension;
 /** @type {boolean} */
CalHeatMap.InitOptions.prototype.verticalOrientation;
 /** @type {!CalHeatMap.Label} */
CalHeatMap.InitOptions.prototype.label;
 /** @type {number} */
CalHeatMap.InitOptions.prototype.colLimit;
 /** @type {number} */
CalHeatMap.InitOptions.prototype.rowLimit;
 /** @type {boolean} */
CalHeatMap.InitOptions.prototype.tooltip;
 /** @type {!Date} */
CalHeatMap.InitOptions.prototype.start;
 /** @type {(string|!Object)} */
CalHeatMap.InitOptions.prototype.data;
 /** @type {string} */
CalHeatMap.InitOptions.prototype.dataType;
 /** @type {(string|!Array<?>|!Array<!Date>|!Array<string>)} */
CalHeatMap.InitOptions.prototype.highlight;
 /** @type {boolean} */
CalHeatMap.InitOptions.prototype.weekStartOnMonday;
 /** @type {!Date} */
CalHeatMap.InitOptions.prototype.minDate;
 /** @type {!Date} */
CalHeatMap.InitOptions.prototype.maxDate;
 /** @type {boolean} */
CalHeatMap.InitOptions.prototype.considerMissingDataAsZero;
 /** @type {!Array<number>} */
CalHeatMap.InitOptions.prototype.legend;
 /** @type {boolean} */
CalHeatMap.InitOptions.prototype.displayLegend;
 /** @type {number} */
CalHeatMap.InitOptions.prototype.legendCellSize;
 /** @type {number} */
CalHeatMap.InitOptions.prototype.legendCellPadding;
 /** @type {(number|!Array<number>)} */
CalHeatMap.InitOptions.prototype.legendMargin;
 /** @type {string} */
CalHeatMap.InitOptions.prototype.legendVerticalPosition;
 /** @type {string} */
CalHeatMap.InitOptions.prototype.legendHorizontalPosition;
 /** @type {string} */
CalHeatMap.InitOptions.prototype.legendOrientation;
 /** @type {(!CalHeatMap.LegendColor|!Array<string>)} */
CalHeatMap.InitOptions.prototype.legendColors;
 /** @type {(string|!Array<string>)} */
CalHeatMap.InitOptions.prototype.itemName;
 /** @type {!CalHeatMap.SubDomainFormatTemplates} */
CalHeatMap.InitOptions.prototype.subDomainTitleFormat;
 /** @type {(string|!Function)} */
CalHeatMap.InitOptions.prototype.subDomainDateFormat;
 /** @type {(string|!Function)} */
CalHeatMap.InitOptions.prototype.subDomainTextFormat;
 /** @type {(string|!Function)} */
CalHeatMap.InitOptions.prototype.domainLabelFormat;
 /** @type {!CalHeatMap.LegendTitleTemplates} */
CalHeatMap.InitOptions.prototype.legendTitleFormat;
 /** @type {number} */
CalHeatMap.InitOptions.prototype.animationDuration;
 /** @type {(string|!HTMLElement)} */
CalHeatMap.InitOptions.prototype.previousSelector;
 /** @type {(string|!HTMLElement)} */
CalHeatMap.InitOptions.prototype.nextSelector;
 /** @type {string} */
CalHeatMap.InitOptions.prototype.itemNamespace;
 /** @type {function(!Date, number): void} */
CalHeatMap.InitOptions.prototype.onClick;
 /** @type {function(): void} */
CalHeatMap.InitOptions.prototype.afterLoad;
 /** @type {function(!Date): void} */
CalHeatMap.InitOptions.prototype.afterLoadPreviousDomain;
 /** @type {function(!Date): void} */
CalHeatMap.InitOptions.prototype.afterLoadNextDomain;
 /** @type {function(): void} */
CalHeatMap.InitOptions.prototype.onComplete;
 /** @type {function(?): !CalHeatMap.DataFormat} */
CalHeatMap.InitOptions.prototype.afterLoadData;
 /** @type {function(boolean): void} */
CalHeatMap.InitOptions.prototype.onMinDomainReached;
 /** @type {function(boolean): void} */
CalHeatMap.InitOptions.prototype.onMaxDomainReached;
/**
 * @extends {CalHeatMap.InitOptions}
 * @record
 * @struct
 */
CalHeatMap.RuntimeOptions = function() {};
 /** @type {!Array<number>} */
CalHeatMap.RuntimeOptions.prototype.domainMargin;
 /** @type {!Array<number>} */
CalHeatMap.RuntimeOptions.prototype.legendMargin;
 /** @type {!Array<!Date>} */
CalHeatMap.RuntimeOptions.prototype.highlight;
 /** @type {!Array<string>} */
CalHeatMap.RuntimeOptions.prototype.itemName;
/**
 * @record
 * @struct
 */
CalHeatMap.LegendTitleTemplates = function() {};
 /** @type {string} */
CalHeatMap.LegendTitleTemplates.prototype.lower;
 /** @type {string} */
CalHeatMap.LegendTitleTemplates.prototype.inner;
 /** @type {string} */
CalHeatMap.LegendTitleTemplates.prototype.upper;
/**
 * @record
 * @struct
 */
CalHeatMap.SubDomainFormatTemplates = function() {};
 /** @type {string} */
CalHeatMap.SubDomainFormatTemplates.prototype.empty;
 /** @type {string} */
CalHeatMap.SubDomainFormatTemplates.prototype.filled;
/**
 * @record
 * @struct
 */
CalHeatMap.DataFormat = function() {};

/* TODO: IndexSignature: CalHeatMap */
/**
 * @record
 * @struct
 */
CalHeatMap.LabelOffset = function() {};
 /** @type {number} */
CalHeatMap.LabelOffset.prototype.x;
 /** @type {number} */
CalHeatMap.LabelOffset.prototype.y;
/**
 * @record
 * @struct
 */
CalHeatMap.Label = function() {};
 /** @type {string} */
CalHeatMap.Label.prototype.position;
 /** @type {string} */
CalHeatMap.Label.prototype.align;
 /** @type {string} */
CalHeatMap.Label.prototype.rotate;
 /** @type {number} */
CalHeatMap.Label.prototype.width;
 /** @type {!CalHeatMap.LabelOffset} */
CalHeatMap.Label.prototype.offset;
 /** @type {number} */
CalHeatMap.Label.prototype.height;
 /** @type {!CalHeatMap.CalHeatMapStatic} */
var CalHeatMap;
