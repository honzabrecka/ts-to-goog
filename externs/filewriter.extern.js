/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/filewriter/index.d.ts:
/**
 * @record
 * @struct
 */
function FileSaver() {}
 /** @type {number} */
FileSaver.prototype.INIT;
 /** @type {number} */
FileSaver.prototype.WRITING;
 /** @type {number} */
FileSaver.prototype.DONE;
 /** @type {number} */
FileSaver.prototype.readyState;
 /** @type {!Error} */
FileSaver.prototype.error;
 /** @type {function(!ProgressEvent): void} */
FileSaver.prototype.onwritestart;
 /** @type {function(!ProgressEvent): void} */
FileSaver.prototype.onprogress;
 /** @type {function(!ProgressEvent): void} */
FileSaver.prototype.onwrite;
 /** @type {function(!ProgressEvent): void} */
FileSaver.prototype.onabort;
 /** @type {function(!ProgressEvent): void} */
FileSaver.prototype.onerror;
 /** @type {function(!ProgressEvent): void} */
FileSaver.prototype.onwriteend;

/**
 * When the abort method is called, user agents must run the steps below:
 * <ol>
 * <li> If readyState == DONE or readyState == INIT, terminate this overall series of steps without doing anything else. </li>
 * <li> Set readyState to DONE. </li>
 * <li> If there are any tasks from the object's FileSaver task source in one of the task queues, then remove those tasks. </li>
 * <li> Terminate the write algorithm being processed. </li>
 * <li> Set the error attribute to a DOMError object of type "AbortError". </li>
 * <li> Fire a progress event called abort </li>
 * <li> Fire a progress event called writeend </li>
 * <li> Terminate this algorithm. </li>
 * </ol>
 * @return {void}
 */
FileSaver.prototype.abort = function() {};
 /** @type {function(new: (?), !Blob): ?} */
var FileSaver;
/**
 * @record
 * @struct
 */
function FileWriter() {}
 /** @type {number} */
FileWriter.prototype.position;
 /** @type {number} */
FileWriter.prototype.length;

/**
 * Write the supplied data to the file at position.
 * @param {!Blob} data The blob to write.
 * @return {void}
 */
FileWriter.prototype.write = function(data) {};

/**
 * Seek sets the file position at which the next write will occur.
 * @param {number} offset If nonnegative, an absolute byte offset into the file. If negative, an offset back from the end of the file.
 * @return {void}
 */
FileWriter.prototype.seek = function(offset) {};

/**
 * Changes the length of the file to that specified. If shortening the file, data beyond the new length must be discarded. If extending the file, the existing data must be zero-padded up to the new length.
 * @param {number} size The size to which the length of the file is to be adjusted, measured in bytes.
 * @return {void}
 */
FileWriter.prototype.truncate = function(size) {};
/**
 * @record
 * @struct
 */
function FileWriterSync() {}
 /** @type {number} */
FileWriterSync.prototype.position;
 /** @type {number} */
FileWriterSync.prototype.length;

/**
 * Write the supplied data to the file at position. Upon completion, position will increase by data.size.
 * @param {!Blob} data The blob to write.
 * @return {void}
 */
FileWriterSync.prototype.write = function(data) {};

/**
 * Seek sets the file position at which the next write will occur.
 * @param {number} offset An absolute byte offset into the file. If offset is greater than length, length is used instead. If offset is less than zero, length is added to it, so that it is treated as an offset back from the end of the file. If it is still less than zero, zero is used.
 * @return {void}
 */
FileWriterSync.prototype.seek = function(offset) {};

/**
 * Changes the length of the file to that specified. If shortening the file, data beyond the new length must be discarded. If extending the file, the existing data must be zero-padded up to the new length.
 * Upon successful completion:
 * <ul>
 *     <li>length must be equal to size.</li>
 *     <li>position must be the lesser of
 *          <ul>
 *              <li>its pre-truncate value,</li>
 *              <li>size.</li>
 *          </ul>
 *      </li>
 *  </ul>
 * @param {number} size The size to which the length of the file is to be adjusted, measured in bytes.
 * @return {void}
 */
FileWriterSync.prototype.truncate = function(size) {};
