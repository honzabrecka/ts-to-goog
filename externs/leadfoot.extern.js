/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/leadfoot/index.d.ts:
/** @const */
var leadfoot = {};
/**
 * @record
 * @struct
 */
leadfoot.WebDriverError = function() {};
 /** @type {string} */
leadfoot.WebDriverError.prototype.name;
 /** @type {string} */
leadfoot.WebDriverError.prototype.message;
 /** @type {number} */
leadfoot.WebDriverError.prototype.status;
 /** @type {?} */
leadfoot.WebDriverError.prototype.detail;
 /** @type {{url: string, method: string, requestData: !Object}} */
leadfoot.WebDriverError.prototype.request;
 /** @type {?} */
leadfoot.WebDriverError.prototype.response;
 /** @type {string} */
leadfoot.WebDriverError.prototype.stack;
/**
 * @record
 * @struct
 */
leadfoot.WebDriverCookie = function() {};
 /** @type {string} */
leadfoot.WebDriverCookie.prototype.name;
 /** @type {string} */
leadfoot.WebDriverCookie.prototype.value;
 /** @type {string} */
leadfoot.WebDriverCookie.prototype.path;
 /** @type {string} */
leadfoot.WebDriverCookie.prototype.domain;
 /** @type {boolean} */
leadfoot.WebDriverCookie.prototype.secure;
 /** @type {boolean} */
leadfoot.WebDriverCookie.prototype.httpOnly;
 /** @type {!Date} */
leadfoot.WebDriverCookie.prototype.expiry;
/**
 * @record
 * @struct
 */
leadfoot.Geolocation = function() {};
 /** @type {number} */
leadfoot.Geolocation.prototype.latitude;
 /** @type {number} */
leadfoot.Geolocation.prototype.longitude;
 /** @type {number} */
leadfoot.Geolocation.prototype.altitude;
/**
 * @record
 * @struct
 */
leadfoot.LogEntry = function() {};
 /** @type {number} */
leadfoot.LogEntry.prototype.timestamp;
 /** @type {string} */
leadfoot.LogEntry.prototype.level;
 /** @type {string} */
leadfoot.LogEntry.prototype.message;
/**
 * @record
 * @struct
 */
leadfoot.Capabilities = function() {};
 /** @type {boolean} */
leadfoot.Capabilities.prototype.applicationCacheEnabled;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenCookies;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenCssTransformedSize;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenDeleteCookie;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenDoubleClick;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenExecuteElementReturn;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenElementDisplayedOpacity;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenElementDisplayedOffscreen;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenElementPosition;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenFlickFinger;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenHtmlTagName;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenLongTap;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenMouseEvents;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenMoveFinger;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenNavigation;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenNullGetSpecAttribute;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenRefresh;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenSendKeys;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenSubmitElement;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenTouchScroll;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenWindowSwitch;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.brokenWindowPosition;
 /** @type {string} */
leadfoot.Capabilities.prototype.browserName;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.cssSelectorsEnabled;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.dynamicViewport;
 /** @type {(boolean|!Array<string>)} */
leadfoot.Capabilities.prototype.fixedLogTypes;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.javascriptEnabled;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.locationContextEnabled;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.mouseEnabled;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.nativeEvents;
 /** @type {string} */
leadfoot.Capabilities.prototype.platform;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.remoteFiles;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.rotatable;
 /** @type {string} */
leadfoot.Capabilities.prototype.shortcutKey;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.supportsCssTransforms;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.supportsExecuteAsync;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.supportsNavigationDataUris;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.takesScreenshot;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.touchEnabled;
 /** @type {string} */
leadfoot.Capabilities.prototype.version;
 /** @type {boolean} */
leadfoot.Capabilities.prototype.webStorageEnabled;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "leadfoot/helpers/pollUntil"
/** @const */
tsickle_declare_module.leadfoot_helpers_pollUntil = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.leadfoot_helpers_pollUntil */
/** @const */
tsickle_declare_module.leadfoot_helpers_pollUntil.pollUntil = {};

/**
 * A {\@link module:leadfoot/Command} helper that polls for a value within the client environment until the value exists
 * or a timeout is reached.
 * 
 * \@example 
 * var Command = require('leadfoot/Command');
 * var pollUntil = require('leadfoot/helpers/pollUntil');
 * 
 * new Command(session)
 *     .get('http://example.com')
 *     .then(pollUntil('return document.getElementById("a");', 1000))
 *     .then(function (elementA) {
 *         // element was found
 *     }, function (error) {
 *         // element was not found
 *     });
 * 
 * \@example 
 * var Command = require('leadfoot/Command');
 * var pollUntil = require('leadfoot/helpers/pollUntil');
 * 
 * new Command(session)
 *     .get('http://example.com')
 *     .then(pollUntil(function (value) {
 *         var element = document.getElementById('a');
 *         return element && element.value === value ? true : null;
 *     }, [ 'foo' ], 1000))
 *     .then(function () {
 *         // value was set to 'foo'
 *     }, function (error) {
 *         // value was never set
 *     });
 * @template T
 * @param {(string|!Function)} poller 
 * The poller function to execute on an interval. The function should return `null` or `undefined` if there is not a
 * result. If the poller function throws, polling will halt.
 * 
 * @param {!Array<?>|number=} args_or_timeout 
 * An array of arguments to pass to the poller function when it is invoked. Only values that can be serialised to JSON,
 * plus {\@link module:leadfoot/Element} objects, can be specified as arguments.
 * 
 * @param {number=} timeout_or_pollInterval 
 * The maximum amount of time to wait for a successful result, in milliseconds. If not specified, the current
 * `executeAsync` maximum timeout for the session will be used.
 * 
 * @param {number=} pollInterval 
 * The amount of time to wait between calls to the poller function, in milliseconds. If not specified, defaults to 67ms.
 * 
 * @return {function(?): !Promise<T>} 
 * A {\@link module:leadfoot/Command#then} callback function that, when called, returns a promise that resolves to the
 * value returned by the poller function on success and rejects on failure.
 * 
 */
tsickle_declare_module.leadfoot_helpers_pollUntil.pollUntil = function(poller, args_or_timeout, timeout_or_pollInterval, pollInterval) {};

/* TODO: ExportAssignment in tsickle_declare_module.leadfoot_helpers_pollUntil */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "leadfoot/Command"
/** @const */
tsickle_declare_module.leadfoot_Command = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.leadfoot_Command */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.leadfoot_Command */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.leadfoot_Command */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.leadfoot_Command */

/**
 * @constructor
 * @struct
 * The parent command that this command is chained to, or a {\@link module:leadfoot/Session} object if this is the
 * first command in a command chain.
 * 
 * A function that will be executed when all parent commands have completed execution. This function can create a
 * new context for this command by calling the passed `setContext` function any time prior to resolving the Promise
 * that it returns. If no context is explicitly provided, the context from the parent command will be used.
 * 
 * A function that will be executed if any parent commands failed to complete successfully. This function can create
 * a new context for the current command by calling the passed `setContext` function any time prior to resolving the
 * Promise that it returns. If no context is explicitly provided, the context from the parent command will be used.
 * @param {(!Command<?>|!Session)} parent
 * @param {function(!Command.ContextSetter, ?): (T|!Thenable<T>)=} initialiser
 * @param {function(!Command.ContextSetter, !Error): (T|!Thenable<T>)=} errback
 */
tsickle_declare_module.leadfoot_Command.Command = function(parent, initialiser, errback) {};
 /** @type {!Command<?>} */
tsickle_declare_module.leadfoot_Command.Command.prototype.parent;
 /** @type {!Session} */
tsickle_declare_module.leadfoot_Command.Command.prototype.session;
 /** @type {!Command.Context} */
tsickle_declare_module.leadfoot_Command.Command.prototype.context;
 /** @type {!Promise<T>} */
tsickle_declare_module.leadfoot_Command.Command.prototype.promise;

/**
 * Pauses execution of the next command in the chain for `ms` milliseconds.
 * 
 * @param {number} ms
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.sleep = function(ms) {};

/**
 * Ends the most recent filtering operation in the current Command chain and returns the set of matched elements
 * to the previous state. This is equivalent to the `jQuery#end` method.
 * 
 * \@example 
 * command
 *   .findById('parent') // sets filter to #parent
 *     .findByClassName('child') // sets filter to all .child inside #parent
 *       .getVisibleText()
 *       .then(function (visibleTexts) {
 *         // all the visible texts from the children
 *       })
 *       .end() // resets filter to #parent
 *     .end(); // resets filter to nothing (the whole document)
 * 
 * @param {number=} numCommandsToPop The number of element contexts to pop. Defaults to 1.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.end = function(numCommandsToPop) {};

/**
 * Adds a callback to be invoked once the previously chained operation has completed.
 * 
 * This method is compatible with the `Promise#then` API, with two important differences:
 * 
 * 1. The context (`this`) of the callback is set to the Command object, rather than being `undefined`. This allows
 *    promise helpers to be created that can retrieve the appropriate session and element contexts for execution.
 * 2. A second non-standard `setContext` argument is passed to the callback. This `setContext` function can be
 *    called at any time before the callback fulfills its return value and expects either a single
 *    {\@link module:leadfoot/Element} or an array of Elements to be provided as its only argument. The provided
 *    element(s) will be used as the context for subsequent element method invocations (`click`, etc.). If
 *    the `setContext` method is not called, the element context from the parent will be passed through unmodified.
 * 
 * @template U
 * @param {function(T, !Command.ContextSetter): (U|!Thenable<U>)} callback
 * @param {function(!Error, !Command.ContextSetter): (U|!Thenable<U>)=} errback
 * @return {!Command<U>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.then = function(callback, errback) {};

/**
 * Adds a callback to be invoked when any of the previously chained operations have failed.
 * @template U
 * @param {function(!Error, !Command.ContextSetter): (U|!Thenable<U>)} errback
 * @return {!Command<U>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.catch = function(errback) {};

/**
 * Adds a callback to be invoked once the previously chained operations have resolved.
 * @template U
 * @param {function((T|!Error), !Command.ContextSetter): (U|!Thenable<U>)} callback
 * @return {!Command<U>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.finally = function(callback) {};

/**
 * Cancels all outstanding chained operations of the Command. Calling this method will cause this command and all
 * subsequent chained commands to fail with a CancelError.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.cancel = function() {};

/**
 * Gets the current value of a timeout for the session.
 * 
 * @param {string} type The type of timeout to retrieve. One of 'script', 'implicit', or 'page load'.
 * @return {!Command<number>} The timeout, in milliseconds.
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getTimeout = function(type) {};

/**
 * Sets the value of a timeout for the session.
 * 
 * @param {string} type 
 * The type of timeout to set. One of 'script', 'implicit', or 'page load'.
 * 
 * @param {number} ms 
 * The length of time to use for the timeout, in milliseconds. A value of 0 will cause operations to time out
 * immediately.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.setTimeout = function(type, ms) {};

/**
 * Gets the identifier for the window that is currently focused.
 * 
 * @return {!Command<string>} A window handle identifier that can be used with other window handling functions.
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getCurrentWindowHandle = function() {};

/**
 * Gets a list of identifiers for all currently open windows.
 * @return {!Command<!Array<string>>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getAllWindowHandles = function() {};

/**
 * Gets the URL that is loaded in the focused window/frame.
 * @return {!Command<string>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getCurrentUrl = function() {};

/**
 * Navigates the focused window/frame to a new URL.
 * @param {string} url
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.get = function(url) {};

/**
 * Navigates the focused window/frame forward one page using the browser’s navigation history.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.goForward = function() {};

/**
 * Navigates the focused window/frame back one page using the browser’s navigation history.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.goBack = function() {};

/**
 * Reloads the current browser window/frame.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.refresh = function() {};

/**
 * Executes JavaScript code within the focused window/frame. The code should return a value synchronously.
 * 
 * @see {\@link module:leadfoot/Session#executeAsync} to execute code that returns values asynchronously.
 * 
 * @template T
 * @param {(string|!Function)} script 
 * The code to execute. If a string value is passed, it will be converted to a function on the remote end.
 * 
 * @param {!Array<?>} args 
 * An array of arguments that will be passed to the executed code. Only values that can be serialised to JSON, plus
 * {\@link module:leadfoot/Element} objects, can be specified as arguments.
 * 
 * @return {!Command<T>} 
 * The value returned by the remote code. Only values that can be serialised to JSON, plus DOM elements, can be
 * returned.
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.execute = function(script, args) {};

/**
 * Executes JavaScript code within the focused window/frame. The code must invoke the provided callback in
 * order to signal that it has completed execution.
 * 
 * @see {\@link module:leadfoot/Session#execute} to execute code that returns values synchronously.
 * @see {\@link module:leadfoot/Session#setExecuteAsyncTimeout} to set the time until an asynchronous script is
 * considered timed out.
 * 
 * @template T
 * @param {(string|!Function)} script 
 * The code to execute. If a string value is passed, it will be converted to a function on the remote end.
 * 
 * @param {!Array<?>} args 
 * An array of arguments that will be passed to the executed code. Only values that can be serialised to JSON, plus
 * {\@link module:leadfoot/Element} objects, can be specified as arguments. In addition to these arguments, a
 * callback function will always be passed as the final argument to the script. This callback function must be
 * invoked in order to signal that execution has completed. The return value of the script, if any, should be passed
 * to this callback function.
 * 
 * @return {!Command<T>} 
 * The value returned by the remote code. Only values that can be serialised to JSON, plus DOM elements, can be
 * returned.
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.executeAsync = function(script, args) {};

/**
 * Gets a screenshot of the focused window and returns it in PNG format.
 * 
 * @return {!Command<?>} A buffer containing a PNG image.
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.takeScreenshot = function() {};

/**
 * Gets a list of input method editor engines available to the remote environment.
 * As of April 2014, no known remote environments support IME functions.
 * @return {!Command<!Array<string>>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getAvailableImeEngines = function() {};

/**
 * Gets the currently active input method editor for the remote environment.
 * As of April 2014, no known remote environments support IME functions.
 * @return {!Command<string>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getActiveImeEngine = function() {};

/**
 * Returns whether or not an input method editor is currently active in the remote environment.
 * As of April 2014, no known remote environments support IME functions.
 * @return {!Command<boolean>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.isImeActivated = function() {};

/**
 * Deactivates any active input method editor in the remote environment.
 * As of April 2014, no known remote environments support IME functions.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.deactivateIme = function() {};

/**
 * Activates an input method editor in the remote environment.
 * As of April 2014, no known remote environments support IME functions.
 * 
 * @param {string} engine The type of IME to activate.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.activateIme = function(engine) {};

/**
 * Switches the currently focused frame to a new frame.
 * 
 * @param {(string|number|!Element)} id 
 * The frame to switch to. In most environments, a number or string value corresponds to a key in the
 * `window.frames` object of the currently active frame. If `null`, the topmost (default) frame will be used.
 * If an Element is provided, it must correspond to a `<frame>` or `<iframe>` element.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.switchToFrame = function(id) {};

/**
 * Switches the currently focused window to a new window.
 * 
 * @param {string} name 
 * The name of the window to switch to. In most environments, this value corresponds to the `window.name`
 * property of a window; however, this is not the case in mobile environments. In mobile environments, use
 * {\@link module:leadfoot/Session#getAllWindowHandles} to learn what window names can be used.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.switchToWindow = function(name) {};

/**
 * Switches the currently focused frame to the parent of the currently focused frame.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.switchToParentFrame = function() {};

/**
 * Closes the currently focused window. In most environments, after the window has been closed, it is necessary
 * to explicitly switch to whatever window is now focused.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.closeCurrentWindow = function() {};

/**
 * Sets the dimensions of a window.
 * 
 * @param {string|number} windowHandle_or_width 
 * The name of the window to resize. See {\@link module:leadfoot/Session#switchToWindow} to learn about valid
 * window names. Omit this argument to resize the currently focused window.
 * 
 * @param {number} width_or_height 
 * The new width of the window, in CSS pixels.
 * 
 * @param {number=} height 
 * The new height of the window, in CSS pixels.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.setWindowSize = function(windowHandle_or_width, width_or_height, height) {};

/**
 * Gets the dimensions of a window.
 * 
 * @param {string=} windowHandle 
 * The name of the window to query. See {\@link module:leadfoot/Session#switchToWindow} to learn about valid
 * window names. Omit this argument to query the currently focused window.
 * 
 * @return {!Command<{width: number, height: number}>} 
 * An object describing the width and height of the window, in CSS pixels.
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getWindowSize = function(windowHandle) {};

/**
 * Sets the position of a window.
 * 
 * @param {string|number} windowHandle_or_x 
 * The name of the window to move. See {\@link module:leadfoot/Session#switchToWindow} to learn about valid
 * window names. Omit this argument to move the currently focused window.
 * 
 * @param {number} x_or_y 
 * The screen x-coordinate to move to, in CSS pixels, relative to the left edge of the primary monitor.
 * 
 * @param {number=} y 
 * The screen y-coordinate to move to, in CSS pixels, relative to the top edge of the primary monitor.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.setWindowPosition = function(windowHandle_or_x, x_or_y, y) {};

/**
 * Gets the position of a window.
 * 
 * @param {string=} windowHandle 
 * The name of the window to query. See {\@link module:leadfoot/Session#switchToWindow} to learn about valid
 * window names. Omit this argument to query the currently focused window.
 * 
 * @return {!Command<{x: number, y: number}>} 
 * An object describing the position of the window, in CSS pixels, relative to the top-left corner of the
 * primary monitor. If a secondary monitor exists above or to the left of the primary monitor, these values
 * will be negative.
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getWindowPosition = function(windowHandle) {};

/**
 * Maximises a window according to the platform’s window system behaviour.
 * 
 * @param {string=} windowHandle 
 * The name of the window to resize. See {\@link module:leadfoot/Session#switchToWindow} to learn about valid
 * window names. Omit this argument to resize the currently focused window.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.maximizeWindow = function(windowHandle) {};

/**
 * Gets all cookies set on the current page.
 * @return {!Command<!Array<!leadfoot.WebDriverCookie>>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getCookies = function() {};

/**
 * Sets a cookie on the current page.
 * 
 * @param {!leadfoot.WebDriverCookie} cookie
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.setCookie = function(cookie) {};

/**
 * Clears all cookies for the current page.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.clearCookies = function() {};

/**
 * Deletes a cookie on the current page.
 * 
 * @param {string} name The name of the cookie to delete.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.deleteCookie = function(name) {};

/**
 * Gets the HTML loaded in the focused window/frame. This markup is serialised by the remote environment so
 * may not exactly match the HTML provided by the Web server.
 * @return {!Command<string>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getPageSource = function() {};

/**
 * Gets the title of the focused window/frame.
 * @return {!Command<string>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getPageTitle = function() {};

/**
 * Gets the first element from the elements in the Command's context that matches the given query.
 * 
 * @see {\@link module:leadfoot/Session#setFindTimeout} to set the amount of time it the remote environment
 * should spend waiting for an element that does not exist at the time of the `find` call before timing
 * out.
 * 
 * @param {string} using 
 * The element retrieval strategy to use. See {\@link module:leadfoot/Session#find} for options.
 * 
 * @param {string} value 
 * The strategy-specific value to search for. See {\@link module:leadfoot/Session#find} for details.
 * @return {!Command<!Element>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.find = function(using, value) {};

/**
 * Gets all elements from the elements in the Command's context that match the given query.
 * 
 * @param {string} using 
 * The element retrieval strategy to use. See {\@link module:leadfoot/Session#find} for options.
 * 
 * @param {string} value 
 * The strategy-specific value to search for. See {\@link module:leadfoot/Session#find} for details.
 * @return {!Command<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.findAll = function(using, value) {};

/**
 * Gets the currently focused element from the focused window/frame.
 * @return {!Command<!Element>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getActiveElement = function() {};

/**
 * Types into the focused window/frame/element.
 * 
 * @param {(string|!Array<string>)} keys 
 * The text to type in the remote environment. It is possible to type keys that do not have normal character
 * representations (modifier keys, function keys, etc.) as well as keys that have two different representations
 * on a typical US-ASCII keyboard (numpad keys); use the values from {\@link module:leadfoot/keys} to type these
 * special characters. Any modifier keys that are activated by this call will persist until they are
 * deactivated. To deactivate a modifier key, type the same modifier key a second time, or send `\uE000`
 * ('NULL') to deactivate all currently active modifier keys.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.pressKeys = function(keys) {};

/**
 * Gets the current screen orientation.
 * 
 * @return {!Command<string>} Either 'portrait' or 'landscape'.
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getOrientation = function() {};

/**
 * Sets the screen orientation.
 * 
 * @param {string} orientation Either 'portrait' or 'landscape'.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.setOrientation = function(orientation) {};

/**
 * Gets the text displayed in the currently active alert pop-up.
 * @return {!Command<string>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getAlertText = function() {};

/**
 * Types into the currently active prompt pop-up.
 * 
 * @param {(string|!Array<string>)} text The text to type into the pop-up’s input box.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.typeInPrompt = function(text) {};

/**
 * Accepts an alert, prompt, or confirmation pop-up. Equivalent to clicking the 'OK' button.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.acceptAlert = function() {};

/**
 * Dismisses an alert, prompt, or confirmation pop-up. Equivalent to clicking the 'OK' button of an alert pop-up
 * or the 'Cancel' button of a prompt or confirmation pop-up.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.dismissAlert = function() {};

/**
 * Moves the remote environment’s mouse cursor to the specified element or relative position. If the element is
 * outside of the viewport, the remote driver will attempt to scroll it into view automatically.
 * 
 * @param {!Element|number} element_or_xOffset 
 * The element to move the mouse to. If x-offset and y-offset are not specified, the mouse will be moved to the
 * centre of the element.
 * 
 * @param {number=} xOffset_or_yOffset 
 * The x-offset of the cursor, maybe in CSS pixels, relative to the left edge of the specified element’s
 * bounding client rectangle. If no element is specified, the offset is relative to the previous position of the
 * mouse, or to the left edge of the page’s root element if the mouse was never moved before.
 * 
 * @param {number=} yOffset 
 * The y-offset of the cursor, maybe in CSS pixels, relative to the top edge of the specified element’s bounding
 * client rectangle. If no element is specified, the offset is relative to the previous position of the mouse,
 * or to the top edge of the page’s root element if the mouse was never moved before.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.moveMouseTo = function(element_or_xOffset, xOffset_or_yOffset, yOffset) {};

/**
 * Clicks a mouse button at the point where the mouse cursor is currently positioned. This method may fail to
 * execute with an error if the mouse has not been moved anywhere since the page was loaded.
 * 
 * @param {number=} button 
 * The button to click. 0 corresponds to the primary mouse button, 1 to the middle mouse button, 2 to the
 * secondary mouse button. Numbers above 2 correspond to any additional buttons a mouse might provide.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.clickMouseButton = function(button) {};

/**
 * Depresses a mouse button without releasing it.
 * 
 * @param {number=} button The button to press. See {\@link module:leadfoot/Session#click} for available options.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.pressMouseButton = function(button) {};

/**
 * Releases a previously depressed mouse button.
 * 
 * @param {number=} button The button to press. See {\@link module:leadfoot/Session#click} for available options.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.releaseMouseButton = function(button) {};

/**
 * Double-clicks the primary mouse button.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.doubleClick = function() {};

/**
 * Taps an element on a touch screen device. If the element is outside of the viewport, the remote driver will
 * attempt to scroll it into view automatically.
 * 
 * @param {!Element} element The element to tap.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.tap = function(element) {};

/**
 * Depresses a new finger at the given point on a touch screen device without releasing it.
 * 
 * @param {number} x The screen x-coordinate to press, maybe in device pixels.
 * @param {number} y The screen y-coordinate to press, maybe in device pixels.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.pressFinger = function(x, y) {};

/**
 * Releases whatever finger exists at the given point on a touch screen device.
 * 
 * @param {number} x The screen x-coordinate where a finger is pressed, maybe in device pixels.
 * @param {number} y The screen y-coordinate where a finger is pressed, maybe in device pixels.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.releaseFinger = function(x, y) {};

/**
 * Moves the last depressed finger to a new point on the touch screen.
 * 
 * @param {number} x The screen x-coordinate to move to, maybe in device pixels.
 * @param {number} y The screen y-coordinate to move to, maybe in device pixels.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.moveFinger = function(x, y) {};

/**
 * Scrolls the currently focused window on a touch screen device.
 * 
 * @param {!Element|number} element_or_xOffset 
 * An element to scroll to. The window will be scrolled so the element is as close to the top-left corner of the
 * window as possible.
 * 
 * @param {number} xOffset_or_yOffset 
 * An optional x-offset, relative to the left edge of the element, in CSS pixels. If no element is specified,
 * the offset is relative to the previous scroll position of the window.
 * 
 * @param {number=} yOffset 
 * An optional y-offset, relative to the top edge of the element, in CSS pixels. If no element is specified,
 * the offset is relative to the previous scroll position of the window.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.touchScroll = function(element_or_xOffset, xOffset_or_yOffset, yOffset) {};

/**
 * Performs a double-tap gesture on an element.
 * 
 * @param {!Element} element The element to double-tap.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.doubleTap = function(element) {};

/**
 * Performs a long-tap gesture on an element.
 * 
 * @param {!Element} element The element to long-tap.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.longTap = function(element) {};

/**
 * Flicks a finger. Note that this method is currently badly specified and highly dysfunctional and is only
 * provided for the sake of completeness.
 * 
 * @param {!Element} element The element where the flick should start.
 * @param {number} xOffset The x-offset in pixels to flick by.
 * @param {number} yOffset The x-offset in pixels to flick by.
 * @param {number} speed The speed of the flick, in pixels per *second*. Most human flicks are 100–200ms, so
 * this value will be higher than expected.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.flickFinger = function(element, xOffset, yOffset, speed) {};

/**
 * Gets the current geographical location of the remote environment.
 * 
 * @return {!Command<!leadfoot.Geolocation>} 
 * Latitude and longitude are specified using standard WGS84 decimal latitude/longitude. Altitude is specified
 * as meters above the WGS84 ellipsoid. Not all environments support altitude.
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getGeolocation = function() {};

/**
 * Sets the geographical location of the remote environment.
 * 
 * @param {!leadfoot.Geolocation} location 
 * Latitude and longitude are specified using standard WGS84 decimal latitude/longitude. Altitude is specified
 * as meters above the WGS84 ellipsoid. Not all environments support altitude.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.setGeolocation = function(location) {};

/**
 * Gets all logs from the remote environment of the given type. The logs in the remote environment are cleared
 * once they have been retrieved.
 * 
 * @param {string} type 
 * The type of log entries to retrieve. Available log types differ between remote environments. Use
 * {\@link module:leadfoot/Session#getAvailableLogTypes} to learn what log types are currently available. Not all
 * environments support all possible log types.
 * 
 * @return {!Command<!Array<!leadfoot.LogEntry>>} 
 * An array of log entry objects. Timestamps in log entries are Unix timestamps, in seconds.
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getLogsFor = function(type) {};

/**
 * Gets the types of logs that are currently available for retrieval from the remote environment.
 * @return {!Command<!Array<string>>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getAvailableLogTypes = function() {};

/**
 * Gets the current state of the HTML5 application cache for the current page.
 * 
 * @return {!Command<number>} 
 * The cache status. One of 0 (uncached), 1 (cached/idle), 2 (checking), 3 (downloading), 4 (update ready), 5
 * (obsolete).
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getApplicationCacheStatus = function() {};

/**
 * Terminates the session. No more commands will be accepted by the remote after this point.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.quit = function() {};

/**
 * Gets the list of keys set in local storage for the focused window/frame.
 * @return {!Command<!Array<string>>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getLocalStorageKeys = function() {};

/**
 * Sets a value in local storage for the focused window/frame.
 * 
 * @param {string} key The key to set.
 * @param {string} value The value to set.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.setLocalStorageItem = function(key, value) {};

/**
 * Clears all data in local storage for the focused window/frame.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.clearLocalStorage = function() {};

/**
 * Gets a value from local storage for the focused window/frame.
 * 
 * @param {string} key The key of the data to get.
 * @return {!Command<string>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getLocalStorageItem = function(key) {};

/**
 * Deletes a value from local storage for the focused window/frame.
 * 
 * @param {string} key The key of the data to delete.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.deleteLocalStorageItem = function(key) {};

/**
 * Gets the number of keys set in local storage for the focused window/frame.
 * @return {!Command<number>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getLocalStorageLength = function() {};

/**
 * Gets the list of keys set in session storage for the focused window/frame.
 * @return {!Command<!Array<string>>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getSessionStorageKeys = function() {};

/**
 * Sets a value in session storage for the focused window/frame.
 * 
 * @param {string} key The key to set.
 * @param {string} value The value to set.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.setSessionStorageItem = function(key, value) {};

/**
 * Clears all data in session storage for the focused window/frame.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.clearSessionStorage = function() {};

/**
 * Gets a value from session storage for the focused window/frame.
 * 
 * @param {string} key The key of the data to get.
 * @return {!Command<string>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getSessionStorageItem = function(key) {};

/**
 * Deletes a value from session storage for the focused window/frame.
 * 
 * @param {string} key The key of the data to delete.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.deleteSessionStorageItem = function(key) {};

/**
 * Gets the number of keys set in session storage for the focused window/frame.
 * @return {!Command<number>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getSessionStorageLength = function() {};

/**
 * Gets the first element within the elements in the Command's context matching the given CSS class name.
 * 
 * @param {string} className The CSS class name to search for.
 * @return {!Command<!Element>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.findByClassName = function(className) {};

/**
 * Gets the first element within the elements in the Command's context matching the given CSS selector.
 * 
 * @param {string} selector The CSS selector to search for.
 * @return {!Command<!Element>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.findByCssSelector = function(selector) {};

/**
 * Gets the first element within the elements in the Command's context matching the given ID.
 * 
 * @param {string} id The ID of the element.
 * @return {!Command<!Element>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.findById = function(id) {};

/**
 * Gets the first element within the elements in the Command's context matching the given name attribute.
 * 
 * @param {string} name The name of the element.
 * @return {!Command<!Element>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.findByName = function(name) {};

/**
 * Gets the first element within the elements in the Command's context matching the given case-insensitive link text.
 * 
 * @param {string} text The link text of the element.
 * @return {!Command<!Element>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.findByLinkText = function(text) {};

/**
 * Gets the first element within the elements in the Command's context partially matching the given case-insensitive link text.
 * 
 * @param {string} text The partial link text of the element.
 * @return {!Command<!Element>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.findByPartialLinkText = function(text) {};

/**
 * Gets the first element within the elements in the Command's context matching the given HTML tag name.
 * 
 * @param {string} tagName The tag name of the element.
 * @return {!Command<!Element>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.findByTagName = function(tagName) {};

/**
 * Gets the first element within the elements in the Command's context matching the given XPath selector.
 * 
 * @param {string} path The XPath selector to search for.
 * @return {!Command<!Element>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.findByXpath = function(path) {};

/**
 * Gets all elements within the elements in the Command's context matching the given CSS class name.
 * 
 * @param {string} className The CSS class name to search for.
 * @return {!Command<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.findAllByClassName = function(className) {};

/**
 * Gets all elements within the elements in the Command's context matching the given CSS selector.
 * 
 * @param {string} selector The CSS selector to search for.
 * @return {!Command<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.findAllByCssSelector = function(selector) {};

/**
 * Gets all elements within the elements in the Command's context matching the given name attribute.
 * 
 * @param {string} name The name of the element.
 * @return {!Command<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.findAllByName = function(name) {};

/**
 * Gets all elements within the elements in the Command's context matching the given case-insensitive link text.
 * 
 * @param {string} text The link text of the element.
 * @return {!Command<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.findAllByLinkText = function(text) {};

/**
 * Gets all elements within the elements in the Command's context partially matching the given case-insensitive link text.
 * 
 * @param {string} text The partial link text of the element.
 * @return {!Command<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.findAllByPartialLinkText = function(text) {};

/**
 * Gets all elements within the elements in the Command's context matching the given HTML tag name.
 * 
 * @param {string} tagName The tag name of the element.
 * @return {!Command<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.findAllByTagName = function(tagName) {};

/**
 * Gets all elements within the elements in the Command's context matching the given XPath selector.
 * 
 * @param {string} path The XPath selector to search for.
 * @return {!Command<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.findAllByXpath = function(path) {};

/**
 * Waits for all elements within the elements in the Command's context that match the given query to be destroyed.
 * 
 * @param {string} using 
 * The element retrieval strategy to use. See {\@link module:leadfoot/Session#find} for options.
 * 
 * @param {string} value 
 * The strategy-specific value to search for. See {\@link module:leadfoot/Session#find} for details.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.waitForDeleted = function(using, value) {};

/**
 * Waits for all elements within the elements in the Command's context matching the given CSS class name to be destroyed.
 * 
 * @param {string} className The CSS class name to search for.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.waitForDeletedByClassName = function(className) {};

/**
 * Waits for all elements within the elements in the Command's context matching the given CSS selector to be destroyed.
 * 
 * @param {string} className
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.waitForDeletedByCssSelector = function(className) {};

/**
 * Waits for all elements within the elements in the Command's context matching the given ID to be destroyed.
 * 
 * @param {string} id The ID of the element.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.waitForDeletedById = function(id) {};

/**
 * Waits for all elements within the elements in the Command's context matching the given name attribute to be destroyed.
 * 
 * @param {string} name The name of the element.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.waitForDeletedByName = function(name) {};

/**
 * Waits for all elements within the elements in the Command's context matching the given case-insensitive link text to be destroyed.
 * 
 * @param {string} text The link text of the element.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.waitForDeletedByLinkText = function(text) {};

/**
 * Waits for all elements within the elements in the Command's context partially matching the given case-insensitive link text to be
 * destroyed.
 * 
 * @param {string} text The partial link text of the element.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.waitForDeletedByPartialLinkText = function(text) {};

/**
 * Waits for all elements within the elements in the Command's context matching the given HTML tag name to be destroyed.
 * 
 * @param {string} tagName The tag name of the element.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.waitForDeletedByTagName = function(tagName) {};

/**
 * Waits for all elements within the elements in the Command's context matching the given XPath selector to be destroyed.
 * 
 * @param {string} path The XPath selector to search for.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.waitForDeletedByXpath = function(path) {};

/**
 * Gets the timeout for {\@link module:leadfoot/Session#executeAsync} calls.
 * @return {!Command<number>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getExecuteAsyncTimeout = function() {};

/**
 * Sets the timeout for {\@link module:leadfoot/Session#executeAsync} calls.
 * 
 * @param {number} ms The length of the timeout, in milliseconds.
 * @return {!Command<number>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.setExecuteAsyncTimeout = function(ms) {};

/**
 * Gets the timeout for {\@link module:leadfoot/Session#find} calls.
 * @return {!Command<number>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getFindTimeout = function() {};

/**
 * Sets the timeout for {\@link module:leadfoot/Session#find} calls.
 * 
 * @param {number} ms The length of the timeout, in milliseconds.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.setFindTimeout = function(ms) {};

/**
 * Gets the timeout for {\@link module:leadfoot/Session#get} calls.
 * @return {!Command<number>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getPageLoadTimeout = function() {};

/**
 * Sets the timeout for {\@link module:leadfoot/Session#get} calls.
 * 
 * @param {number} ms The length of the timeout, in milliseconds.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.setPageLoadTimeout = function(ms) {};

/**
 * Clicks the element. This method works on both mouse and touch platforms.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.click = function() {};

/**
 * Submits the element, if it is a form, or the form belonging to the element, if it is a form element.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.submit = function() {};

/**
 * Gets the visible text within the element. `<br>` elements are converted to line breaks in the returned
 * text, and whitespace is normalised per the usual XML/HTML whitespace normalisation rules.
 * @return {!Command<(string|!Array<string>)>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getVisibleText = function() {};

/**
 * Types into the element. This method works the same as the {\@link module:leadfoot/Session#pressKeys} method
 * except that any modifier keys are automatically released at the end of the command.
 * 
 * @param {(string|!Array<string>)} value 
 * The text to type in the remote environment. See {\@link module:leadfoot/Session#pressKeys} for more information.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.type = function(value) {};

/**
 * Gets the tag name of the element. For HTML documents, the value is always lowercase.
 * @return {!Command<string>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getTagName = function() {};

/**
 * Clears the value of a form element.
 * @return {!Command<void>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.clearValue = function() {};

/**
 * Returns whether or not a form element is currently selected (for drop-down options and radio buttons), or
 * whether or not the element is currently checked (for checkboxes).
 * @return {!Command<boolean>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.isSelected = function() {};

/**
 * Returns whether or not a form element can be interacted with.
 * @return {!Command<boolean>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.isEnabled = function() {};

/**
 * Gets a property or attribute of the element according to the WebDriver specification algorithm. Use of this
 * method is not recommended; instead, use {\@link module:leadfoot/Element#getAttribute} to retrieve DOM attributes
 * and {\@link module:leadfoot/Element#getProperty} to retrieve DOM properties.
 * 
 * This method uses the following algorithm on the server to determine what value to return:
 * 
 * 1. If `name` is 'style', returns the `style.cssText` property of the element.
 * 2. If the attribute exists and is a boolean attribute, returns 'true' if the attribute is true, or null
 *    otherwise.
 * 3. If the element is an `<option>` element and `name` is 'value', returns the `value` attribute if it exists,
 *    otherwise returns the visible text content of the option.
 * 4. If the element is a checkbox or radio button and `name` is 'selected', returns 'true' if the element is
 *    checked, or null otherwise.
 * 5. If the returned value is expected to be a URL (e.g. element is `<a>` and attribute is `href`), returns the
 *    fully resolved URL from the `href`/`src` property of the element, not the attribute.
 * 6. If `name` is 'class', returns the `className` property of the element.
 * 7. If `name` is 'readonly', returns 'true' if the `readOnly` property is true, or null otherwise.
 * 8. If `name` corresponds to a property of the element, and the property is not an Object, return the property
 *    value coerced to a string.
 * 9. If `name` corresponds to an attribute of the element, return the attribute value.
 * 
 * @param {string} name The property or attribute name.
 * @return {!Command<string>} The value of the attribute as a string, or `null` if no such property or
 * attribute exists.
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getSpecAttribute = function(name) {};

/**
 * Gets an attribute of the element.
 * 
 * @see Element#getProperty to retrieve an element property.
 * @param {string} name The name of the attribute.
 * @return {!Command<string>} The value of the attribute, or `null` if no such attribute exists.
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getAttribute = function(name) {};

/**
 * Gets a property of the element.
 * 
 * @see Element#getAttribute to retrieve an element attribute.
 * @template T
 * @param {string} name The name of the property.
 * @return {!Command<T>} The value of the property.
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getProperty = function(name) {};

/**
 * Determines if this element is equal to another element.
 * 
 * @param {!Element} other The other element.
 * @return {!Command<boolean>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.equals = function(other) {};

/**
 * Returns whether or not the element would be visible to an actual user. This means that the following types
 * of elements are considered to be not displayed:
 * 
 * 1. Elements with `display: none`
 * 2. Elements with `visibility: hidden`
 * 3. Elements positioned outside of the viewport that cannot be scrolled into view
 * 4. Elements with `opacity: 0`
 * 5. Elements with no `offsetWidth` or `offsetHeight`
 * @return {!Command<boolean>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.isDisplayed = function() {};

/**
 * Gets the position of the element relative to the top-left corner of the document, taking into account
 * scrolling and CSS transformations (if they are supported).
 * @return {!Command<{x: number, y: number}>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getPosition = function() {};

/**
 * Gets the size of the element, taking into account CSS transformations (if they are supported).
 * @return {!Command<{width: number, height: number}>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getSize = function() {};

/**
 * Gets a CSS computed property value for the element.
 * 
 * @param {string} propertyName 
 * The CSS property to retrieve. This argument must be camel-case, *not* hyphenated.
 * @return {!Command<string>}
 */
tsickle_declare_module.leadfoot_Command.Command.prototype.getComputedStyle = function(propertyName) {};

/**
 * Augments `target` with a conversion of the `originalFn` method that enables its use with a Command object.
 * This can be used to easily add new methods from any custom object that implements the Session API to any target
 * object that implements the Command API.
 * 
 * Functions that are copied may have the following extra properties in order to change the way that Command works
 * with these functions:
 * 
 * - `createsContext` (boolean): If this property is specified, the return value from the function will be used as
 *   the new context for the returned Command.
 * - `usesElement` (boolean): If this property is specified, element(s) from the current context will be used as
 *   the first argument to the function, if the explicitly specified first argument is not already an element.
 * @param {!Command<?>} target
 * @param {string} key
 * @param {!Function} originalFn
 * @return {void}
 */
tsickle_declare_module.leadfoot_Command.Command.addSessionMethod = function(target, key, originalFn) {};

/**
 * Augments `target` with a method that will call `key` on all context elements stored within `target`.
 * This can be used to easily add new methods from any custom object that implements the Element API to any target
 * object that implements the Command API.
 * 
 * Functions that are copied may have the following extra properties in order to change the way that Command works
 * with these functions:
 * 
 * - `createsContext` (boolean): If this property is specified, the return value from the function will be used as
 *   the new context for the returned Command.
 * @param {!Command<?>} target
 * @param {string} key
 * @return {void}
 */
tsickle_declare_module.leadfoot_Command.Command.addElementMethod = function(target, key) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.leadfoot_Command.Command.Context = function() {};
 /** @type {boolean} */
tsickle_declare_module.leadfoot_Command.Command.Context.prototype.isSingle;
 /** @type {number} */
tsickle_declare_module.leadfoot_Command.Command.Context.prototype.depth;
/**
 * @record
 * @struct
 */
tsickle_declare_module.leadfoot_Command.Command.ContextSetter = function() {};

/* TODO: CallSignature: tsickle_declare_module.leadfoot_Command.Command */

/* TODO: ExportAssignment in tsickle_declare_module.leadfoot_Command */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "leadfoot/Element"
/** @const */
tsickle_declare_module.leadfoot_Element = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.leadfoot_Element */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.leadfoot_Element */

/**
 * @constructor
 * @struct
 * @param {(string|!Element|{ELEMENT: string})} elementId
 * @param {!Session} session
 */
tsickle_declare_module.leadfoot_Element.Element = function(elementId, session) {};
 /** @type {string} */
tsickle_declare_module.leadfoot_Element.Element.prototype.elementId;
 /** @type {!Session} */
tsickle_declare_module.leadfoot_Element.Element.prototype.session;

/**
 * A function that performs an HTTP request to a JsonWireProtocol endpoint and normalises response status and
 * data.
 * 
 * @param {string} path 
 * The path-part of the JsonWireProtocol URL. May contain placeholders in the form `/\$\d/` that will be
 * replaced by entries in the `pathParts` argument.
 * 
 * @param {!Object} requestData 
 * The payload for the request.
 * 
 * @param {!Array<string>=} pathParts Optional placeholder values to inject into the path of the URL.
 * @return {!Promise<!Object>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype._get = function(path, requestData, pathParts) {};

/**
 * A function that performs an HTTP request to a JsonWireProtocol endpoint and normalises response status and
 * data.
 * 
 * @param {string} path 
 * The path-part of the JsonWireProtocol URL. May contain placeholders in the form `/\$\d/` that will be
 * replaced by entries in the `pathParts` argument.
 * 
 * @param {!Object} requestData 
 * The payload for the request.
 * 
 * @param {!Array<string>=} pathParts Optional placeholder values to inject into the path of the URL.
 * @return {!Promise<!Object>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype._post = function(path, requestData, pathParts) {};

/**
 * @return {{ELEMENT: string}}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.toJSON = function() {};

/**
 * Gets the first element within this element that matches the given query.
 * 
 * @see {\@link module:leadfoot/Session#setFindTimeout} to set the amount of time it the remote environment
 * should spend waiting for an element that does not exist at the time of the `find` call before timing
 * out.
 * 
 * @param {string} using 
 * The element retrieval strategy to use. See {\@link module:leadfoot/Session#find} for options.
 * 
 * @param {string} value 
 * The strategy-specific value to search for. See {\@link module:leadfoot/Session#find} for details.
 * @return {!Promise<!Element>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.find = function(using, value) {};

/**
 * Gets all elements within this element that match the given query.
 * 
 * @param {string} using 
 * The element retrieval strategy to use. See {\@link module:leadfoot/Session#find} for options.
 * 
 * @param {string} value 
 * The strategy-specific value to search for. See {\@link module:leadfoot/Session#find} for details.
 * @return {!Promise<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.findAll = function(using, value) {};

/**
 * Clicks the element. This method works on both mouse and touch platforms.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.click = function() {};

/**
 * Submits the element, if it is a form, or the form belonging to the element, if it is a form element.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.submit = function() {};

/**
 * Gets the visible text within the element. `<br>` elements are converted to line breaks in the returned
 * text, and whitespace is normalised per the usual XML/HTML whitespace normalisation rules.
 * @return {!Promise<string>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.getVisibleText = function() {};

/**
 * Types into the element. This method works the same as the {\@link module:leadfoot/Session#pressKeys} method
 * except that any modifier keys are automatically released at the end of the command.
 * 
 * @param {(string|!Array<string>)} value 
 * The text to type in the remote environment. See {\@link module:leadfoot/Session#pressKeys} for more information.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.type = function(value) {};

/**
 * Gets the tag name of the element. For HTML documents, the value is always lowercase.
 * @return {!Promise<string>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.getTagName = function() {};

/**
 * Clears the value of a form element.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.clearValue = function() {};

/**
 * Returns whether or not a form element is currently selected (for drop-down options and radio buttons), or
 * whether or not the element is currently checked (for checkboxes).
 * @return {!Promise<boolean>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.isSelected = function() {};

/**
 * Returns whether or not a form element can be interacted with.
 * @return {!Promise<boolean>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.isEnabled = function() {};

/**
 * Gets a property or attribute of the element according to the WebDriver specification algorithm. Use of this
 * method is not recommended; instead, use {\@link module:leadfoot/Element#getAttribute} to retrieve DOM attributes
 * and {\@link module:leadfoot/Element#getProperty} to retrieve DOM properties.
 * 
 * This method uses the following algorithm on the server to determine what value to return:
 * 
 * 1. If `name` is 'style', returns the `style.cssText` property of the element.
 * 2. If the attribute exists and is a boolean attribute, returns 'true' if the attribute is true, or null
 *    otherwise.
 * 3. If the element is an `<option>` element and `name` is 'value', returns the `value` attribute if it exists,
 *    otherwise returns the visible text content of the option.
 * 4. If the element is a checkbox or radio button and `name` is 'selected', returns 'true' if the element is
 *    checked, or null otherwise.
 * 5. If the returned value is expected to be a URL (e.g. element is `<a>` and attribute is `href`), returns the
 *    fully resolved URL from the `href`/`src` property of the element, not the attribute.
 * 6. If `name` is 'class', returns the `className` property of the element.
 * 7. If `name` is 'readonly', returns 'true' if the `readOnly` property is true, or null otherwise.
 * 8. If `name` corresponds to a property of the element, and the property is not an Object, return the property
 *    value coerced to a string.
 * 9. If `name` corresponds to an attribute of the element, return the attribute value.
 * 
 * @param {string} name The property or attribute name.
 * @return {!Promise<string>} The value of the attribute as a string, or `null` if no such property or
 * attribute exists.
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.getSpecAttribute = function(name) {};

/**
 * Gets an attribute of the element.
 * 
 * @see Element#getProperty to retrieve an element property.
 * @param {string} name The name of the attribute.
 * @return {!Promise<string>} The value of the attribute, or `null` if no such attribute exists.
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.getAttribute = function(name) {};

/**
 * Gets a property of the element.
 * 
 * @see Element#getAttribute to retrieve an element attribute.
 * @template T
 * @param {string} name The name of the property.
 * @return {!Promise<T>} The value of the property.
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.getProperty = function(name) {};

/**
 * Determines if this element is equal to another element.
 * 
 * @param {!Element} other The other element.
 * @return {!Promise<boolean>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.equals = function(other) {};

/**
 * Returns whether or not the element would be visible to an actual user. This means that the following types
 * of elements are considered to be not displayed:
 * 
 * 1. Elements with `display: none`
 * 2. Elements with `visibility: hidden`
 * 3. Elements positioned outside of the viewport that cannot be scrolled into view
 * 4. Elements with `opacity: 0`
 * 5. Elements with no `offsetWidth` or `offsetHeight`
 * @return {!Promise<boolean>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.isDisplayed = function() {};

/**
 * Gets the position of the element relative to the top-left corner of the document, taking into account
 * scrolling and CSS transformations (if they are supported).
 * @return {!Promise<{x: number, y: number}>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.getPosition = function() {};

/**
 * Gets the size of the element, taking into account CSS transformations (if they are supported).
 * @return {!Promise<{width: number, height: number}>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.getSize = function() {};

/**
 * Gets a CSS computed property value for the element.
 * 
 * @param {string} propertyName 
 * The CSS property to retrieve. This argument must be camel-case, *not* hyphenated.
 * @return {!Promise<string>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.getComputedStyle = function(propertyName) {};

/**
 * Gets the first element inside this element matching the given CSS class name.
 * 
 * @param {string} className The CSS class name to search for.
 * @return {!Promise<!Element>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.findByClassName = function(className) {};

/**
 * Gets the first element inside this element matching the given CSS selector.
 * 
 * @param {string} selector The CSS selector to search for.
 * @return {!Promise<!Element>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.findByCssSelector = function(selector) {};

/**
 * Gets the first element inside this element matching the given ID.
 * 
 * @param {string} id The ID of the element.
 * @return {!Promise<!Element>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.findById = function(id) {};

/**
 * Gets the first element inside this element matching the given name attribute.
 * 
 * @param {string} name The name of the element.
 * @return {!Promise<!Element>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.findByName = function(name) {};

/**
 * Gets the first element inside this element matching the given case-insensitive link text.
 * 
 * @param {string} text The link text of the element.
 * @return {!Promise<!Element>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.findByLinkText = function(text) {};

/**
 * Gets the first element inside this element partially matching the given case-insensitive link text.
 * 
 * @param {string} text The partial link text of the element.
 * @return {!Promise<!Element>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.findByPartialLinkText = function(text) {};

/**
 * Gets the first element inside this element matching the given HTML tag name.
 * 
 * @param {string} tagName The tag name of the element.
 * @return {!Promise<!Element>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.findByTagName = function(tagName) {};

/**
 * Gets the first element inside this element matching the given XPath selector.
 * 
 * @param {string} path The XPath selector to search for.
 * @return {!Promise<!Element>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.findByXpath = function(path) {};

/**
 * Gets all elements inside this element matching the given CSS class name.
 * 
 * @param {string} className The CSS class name to search for.
 * @return {!Promise<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.findAllByClassName = function(className) {};

/**
 * Gets all elements inside this element matching the given CSS selector.
 * 
 * @param {string} selector The CSS selector to search for.
 * @return {!Promise<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.findAllByCssSelector = function(selector) {};

/**
 * Gets all elements inside this element matching the given name attribute.
 * 
 * @param {string} name The name of the element.
 * @return {!Promise<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.findAllByName = function(name) {};

/**
 * Gets all elements inside this element matching the given case-insensitive link text.
 * 
 * @param {string} text The link text of the element.
 * @return {!Promise<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.findAllByLinkText = function(text) {};

/**
 * Gets all elements inside this element partially matching the given case-insensitive link text.
 * 
 * @param {string} text The partial link text of the element.
 * @return {!Promise<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.findAllByPartialLinkText = function(text) {};

/**
 * Gets all elements inside this element matching the given HTML tag name.
 * 
 * @param {string} tagName The tag name of the element.
 * @return {!Promise<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.findAllByTagName = function(tagName) {};

/**
 * Gets all elements inside this element matching the given XPath selector.
 * 
 * @param {string} path The XPath selector to search for.
 * @return {!Promise<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.findAllByXpath = function(path) {};

/**
 * Waits for all elements inside this element that match the given query to be destroyed.
 * 
 * @param {string} using 
 * The element retrieval strategy to use. See {\@link module:leadfoot/Session#find} for options.
 * 
 * @param {string} value 
 * The strategy-specific value to search for. See {\@link module:leadfoot/Session#find} for details.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.waitForDeleted = function(using, value) {};

/**
 * Waits for all elements inside this element matching the given CSS class name to be destroyed.
 * 
 * @param {string} className The CSS class name to search for.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.waitForDeletedByClassName = function(className) {};

/**
 * Waits for all elements inside this element matching the given CSS selector to be destroyed.
 * 
 * @param {string} className
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.waitForDeletedByCssSelector = function(className) {};

/**
 * Waits for all elements inside this element matching the given ID to be destroyed.
 * 
 * @param {string} id The ID of the element.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.waitForDeletedById = function(id) {};

/**
 * Waits for all elements inside this element matching the given name attribute to be destroyed.
 * 
 * @param {string} name The name of the element.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.waitForDeletedByName = function(name) {};

/**
 * Waits for all elements inside this element matching the given case-insensitive link text to be destroyed.
 * 
 * @param {string} text The link text of the element.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.waitForDeletedByLinkText = function(text) {};

/**
 * Waits for all elements inside this element partially matching the given case-insensitive link text to be
 * destroyed.
 * 
 * @param {string} text The partial link text of the element.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.waitForDeletedByPartialLinkText = function(text) {};

/**
 * Waits for all elements inside this element matching the given HTML tag name to be destroyed.
 * 
 * @param {string} tagName The tag name of the element.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.waitForDeletedByTagName = function(tagName) {};

/**
 * Waits for all elements inside this element matching the given XPath selector to be destroyed.
 * 
 * @param {string} path The XPath selector to search for.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Element.Element.prototype.waitForDeletedByXpath = function(path) {};

/* TODO: ExportAssignment in tsickle_declare_module.leadfoot_Element */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "leadfoot/keys"
/** @const */
tsickle_declare_module.leadfoot_keys = {};
 /** @type {{NULL: string, CANCEL: string, HELP: string, BACKSPACE: string, TAB: string, CLEAR: string, RETURN: string, ENTER: string, SHIFT: string, CONTROL: string, ALT: string, PAUSE: string, ESCAPE: string, SPACE: string, PAGE_UP: string, PAGE_DOWN: string, END: string, HOME: string, ARROW_LEFT: string, ARROW_UP: string, ARROW_RIGHT: string, ARROW_DOWN: string, INSERT: string, DELETE: string, SEMICOLON: string, EQUALS: string, NUMPAD0: string, NUMPAD1: string, NUMPAD2: string, NUMPAD3: string, NUMPAD4: string, NUMPAD5: string, NUMPAD6: string, NUMPAD7: string, NUMPAD8: string, NUMPAD9: string, MULTIPLY: string, ADD: string, SEPARATOR: string, SUBTRACT: string, DECIMAL: string, DIVIDE: string, F1: string, F2: string, F3: string, F4: string, F5: string, F6: string, F7: string, F8: string, F9: string, F10: string, F11: string, F12: string, META: string, COMMAND: string, ZENKAKU_HANKAKU: string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string, : string}} */
tsickle_declare_module.leadfoot_keys.keys;

/* TODO: ExportAssignment in tsickle_declare_module.leadfoot_keys */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "leadfoot/Server"
/** @const */
tsickle_declare_module.leadfoot_Server = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.leadfoot_Server */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.leadfoot_Server */

/**
 * @constructor
 * @struct
 * @param {(string|!Object)} url 
 * The fully qualified URL to the JsonWireProtocol endpoint on the server. The default endpoint for a
 * JsonWireProtocol HTTP server is http://localhost:4444/wd/hub. You may also pass a parsed URL object which will
 * be converted to a string.
 */
tsickle_declare_module.leadfoot_Server.Server = function(url) {};
 /** @type {?} */
tsickle_declare_module.leadfoot_Server.Server.prototype.sessionConstructor;
 /** @type {boolean} */
tsickle_declare_module.leadfoot_Server.Server.prototype.fixSessionCapabilities;

/**
 * A function that performs an HTTP request to a JsonWireProtocol endpoint and normalises response status and
 * data.
 * 
 * @param {string} path 
 * The path-part of the JsonWireProtocol URL. May contain placeholders in the form `/\$\d/` that will be
 * replaced by entries in the `pathParts` argument.
 * 
 * @param {!Object} requestData 
 * The payload for the request.
 * 
 * @param {!Array<string>=} pathParts Optional placeholder values to inject into the path of the URL.
 * @return {!Promise<!Object>}
 */
tsickle_declare_module.leadfoot_Server.Server.prototype._get = function(path, requestData, pathParts) {};

/**
 * A function that performs an HTTP request to a JsonWireProtocol endpoint and normalises response status and
 * data.
 * 
 * @param {string} path 
 * The path-part of the JsonWireProtocol URL. May contain placeholders in the form `/\$\d/` that will be
 * replaced by entries in the `pathParts` argument.
 * 
 * @param {!Object} requestData 
 * The payload for the request.
 * 
 * @param {!Array<string>=} pathParts Optional placeholder values to inject into the path of the URL.
 * @return {!Promise<!Object>}
 */
tsickle_declare_module.leadfoot_Server.Server.prototype._post = function(path, requestData, pathParts) {};

/**
 * A function that performs an HTTP request to a JsonWireProtocol endpoint and normalises response status and
 * data.
 * 
 * @param {string} path 
 * The path-part of the JsonWireProtocol URL. May contain placeholders in the form `/\$\d/` that will be
 * replaced by entries in the `pathParts` argument.
 * 
 * @param {!Object} requestData 
 * The payload for the request.
 * 
 * @param {!Array<string>=} pathParts Optional placeholder values to inject into the path of the URL.
 * @return {!Promise<!Object>}
 */
tsickle_declare_module.leadfoot_Server.Server.prototype._delete = function(path, requestData, pathParts) {};

/**
 * Gets the status of the remote server.
 * 
 * @return {!Promise<!Object>} An object containing arbitrary properties describing the status of the remote
 * server.
 */
tsickle_declare_module.leadfoot_Server.Server.prototype.getStatus = function() {};

/**
 * Creates a new remote control session on the remote server.
 * 
 * @param {!leadfoot.Capabilities} desiredCapabilities 
 * A hash map of desired capabilities of the remote environment. The server may return an environment that does
 * not match all the desired capabilities if one is not available.
 * 
 * @param {!leadfoot.Capabilities=} requiredCapabilities 
 * A hash map of required capabilities of the remote environment. The server will not return an environment that
 * does not match all the required capabilities if one is not available.
 * @return {!Promise<!Session>}
 */
tsickle_declare_module.leadfoot_Server.Server.prototype.createSession = function(desiredCapabilities, requiredCapabilities) {};

/**
 * Adds additional capabilities data on the `capabilities` key of the passed session.
 * @param {!Session} session
 * @return {!Session}
 */
tsickle_declare_module.leadfoot_Server.Server.prototype._fillCapabilities = function(session) {};

/**
 * Gets a list of all currently active remote control sessions on this server.
 * 
 * @return {!Promise<!Array<!Object>>}
 */
tsickle_declare_module.leadfoot_Server.Server.prototype.getSessions = function() {};

/**
 * Gets information on the capabilities of a given session from the server. The list of capabilities returned
 * by this command will not include any of the extra session capabilities detected by Leadfoot and may be
 * inaccurate.
 * 
 * @param {string} sessionId
 * @return {!Promise<!leadfoot.Capabilities>}
 */
tsickle_declare_module.leadfoot_Server.Server.prototype.getSessionCapabilities = function(sessionId) {};

/**
 * Terminates a session on the server.
 * 
 * @param {string} sessionId
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Server.Server.prototype.deleteSession = function(sessionId) {};

/* TODO: ExportAssignment in tsickle_declare_module.leadfoot_Server */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "leadfoot/Session"
/** @const */
tsickle_declare_module.leadfoot_Session = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.leadfoot_Session */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.leadfoot_Session */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.leadfoot_Session */

/**
 * @constructor
 * @struct
 * @param {string} sessionId The ID of the session, as provided by the remote.
 * @param {!Server} server The server that the session belongs to.
 * @param {!leadfoot.Capabilities} capabilities A map of bugs and features that the remote environment exposes.
 */
tsickle_declare_module.leadfoot_Session.Session = function(sessionId, server, capabilities) {};
 /** @type {!leadfoot.Capabilities} */
tsickle_declare_module.leadfoot_Session.Session.prototype.capabilities;
 /** @type {string} */
tsickle_declare_module.leadfoot_Session.Session.prototype.sessionId;
 /** @type {!Server} */
tsickle_declare_module.leadfoot_Session.Session.prototype.server;

/**
 * A function that performs an HTTP request to a JsonWireProtocol endpoint and normalises response status and
 * data.
 * 
 * @param {string} path 
 * The path-part of the JsonWireProtocol URL. May contain placeholders in the form `/\$\d/` that will be
 * replaced by entries in the `pathParts` argument.
 * 
 * @param {!Object} requestData 
 * The payload for the request.
 * 
 * @param {!Array<string>=} pathParts Optional placeholder values to inject into the path of the URL.
 * @return {!Promise<!Object>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype._get = function(path, requestData, pathParts) {};

/**
 * A function that performs an HTTP request to a JsonWireProtocol endpoint and normalises response status and
 * data.
 * 
 * @param {string} path 
 * The path-part of the JsonWireProtocol URL. May contain placeholders in the form `/\$\d/` that will be
 * replaced by entries in the `pathParts` argument.
 * 
 * @param {!Object} requestData 
 * The payload for the request.
 * 
 * @param {!Array<string>=} pathParts Optional placeholder values to inject into the path of the URL.
 * @return {!Promise<!Object>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype._post = function(path, requestData, pathParts) {};

/**
 * A function that performs an HTTP request to a JsonWireProtocol endpoint and normalises response status and
 * data.
 * 
 * @param {string} path 
 * The path-part of the JsonWireProtocol URL. May contain placeholders in the form `/\$\d/` that will be
 * replaced by entries in the `pathParts` argument.
 * 
 * @param {!Object} requestData 
 * The payload for the request.
 * 
 * @param {!Array<string>=} pathParts Optional placeholder values to inject into the path of the URL.
 * @return {!Promise<!Object>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype._delete = function(path, requestData, pathParts) {};

/**
 * Gets the current value of a timeout for the session.
 * 
 * @param {string} type The type of timeout to retrieve. One of 'script', 'implicit', or 'page load'.
 * @return {!Promise<number>} The timeout, in milliseconds.
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getTimeout = function(type) {};

/**
 * Sets the value of a timeout for the session.
 * 
 * @param {string} type 
 * The type of timeout to set. One of 'script', 'implicit', or 'page load'.
 * 
 * @param {number} ms 
 * The length of time to use for the timeout, in milliseconds. A value of 0 will cause operations to time out
 * immediately.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.setTimeout = function(type, ms) {};

/**
 * Gets the identifier for the window that is currently focused.
 * 
 * @return {!Promise<string>} A window handle identifier that can be used with other window handling functions.
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getCurrentWindowHandle = function() {};

/**
 * Gets a list of identifiers for all currently open windows.
 * @return {!Promise<!Array<string>>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getAllWindowHandles = function() {};

/**
 * Gets the URL that is loaded in the focused window/frame.
 * @return {!Promise<string>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getCurrentUrl = function() {};

/**
 * Navigates the focused window/frame to a new URL.
 * @param {string} url
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.get = function(url) {};

/**
 * Navigates the focused window/frame forward one page using the browser’s navigation history.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.goForward = function() {};

/**
 * Navigates the focused window/frame back one page using the browser’s navigation history.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.goBack = function() {};

/**
 * Reloads the current browser window/frame.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.refresh = function() {};

/**
 * Executes JavaScript code within the focused window/frame. The code should return a value synchronously.
 * 
 * @see {\@link module:leadfoot/Session#executeAsync} to execute code that returns values asynchronously.
 * 
 * @template T
 * @param {(string|!Function)} script 
 * The code to execute. If a string value is passed, it will be converted to a function on the remote end.
 * 
 * @param {!Array<?>} args 
 * An array of arguments that will be passed to the executed code. Only values that can be serialised to JSON, plus
 * {\@link module:leadfoot/Element} objects, can be specified as arguments.
 * 
 * @return {!Promise<T>} 
 * The value returned by the remote code. Only values that can be serialised to JSON, plus DOM elements, can be
 * returned.
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.execute = function(script, args) {};

/**
 * Executes JavaScript code within the focused window/frame. The code must invoke the provided callback in
 * order to signal that it has completed execution.
 * 
 * @see {\@link module:leadfoot/Session#execute} to execute code that returns values synchronously.
 * @see {\@link module:leadfoot/Session#setExecuteAsyncTimeout} to set the time until an asynchronous script is
 * considered timed out.
 * 
 * @template T
 * @param {(string|!Function)} script 
 * The code to execute. If a string value is passed, it will be converted to a function on the remote end.
 * 
 * @param {!Array<?>} args 
 * An array of arguments that will be passed to the executed code. Only values that can be serialised to JSON, plus
 * {\@link module:leadfoot/Element} objects, can be specified as arguments. In addition to these arguments, a
 * callback function will always be passed as the final argument to the script. This callback function must be
 * invoked in order to signal that execution has completed. The return value of the script, if any, should be passed
 * to this callback function.
 * 
 * @return {!Promise<T>} 
 * The value returned by the remote code. Only values that can be serialised to JSON, plus DOM elements, can be
 * returned.
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.executeAsync = function(script, args) {};

/**
 * Gets a screenshot of the focused window and returns it in PNG format.
 * 
 * @return {!Promise<?>} A buffer containing a PNG image.
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.takeScreenshot = function() {};

/**
 * Gets a list of input method editor engines available to the remote environment.
 * As of April 2014, no known remote environments support IME functions.
 * @return {!Promise<!Array<string>>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getAvailableImeEngines = function() {};

/**
 * Gets the currently active input method editor for the remote environment.
 * As of April 2014, no known remote environments support IME functions.
 * @return {!Promise<string>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getActiveImeEngine = function() {};

/**
 * Returns whether or not an input method editor is currently active in the remote environment.
 * As of April 2014, no known remote environments support IME functions.
 * @return {!Promise<boolean>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.isImeActivated = function() {};

/**
 * Deactivates any active input method editor in the remote environment.
 * As of April 2014, no known remote environments support IME functions.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.deactivateIme = function() {};

/**
 * Activates an input method editor in the remote environment.
 * As of April 2014, no known remote environments support IME functions.
 * 
 * @param {string} engine The type of IME to activate.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.activateIme = function(engine) {};

/**
 * Switches the currently focused frame to a new frame.
 * 
 * @param {(string|number|!Element)} id 
 * The frame to switch to. In most environments, a number or string value corresponds to a key in the
 * `window.frames` object of the currently active frame. If `null`, the topmost (default) frame will be used.
 * If an Element is provided, it must correspond to a `<frame>` or `<iframe>` element.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.switchToFrame = function(id) {};

/**
 * Switches the currently focused window to a new window.
 * 
 * @param {string} name 
 * The name of the window to switch to. In most environments, this value corresponds to the `window.name`
 * property of a window; however, this is not the case in mobile environments. In mobile environments, use
 * {\@link module:leadfoot/Session#getAllWindowHandles} to learn what window names can be used.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.switchToWindow = function(name) {};

/**
 * Switches the currently focused frame to the parent of the currently focused frame.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.switchToParentFrame = function() {};

/**
 * Closes the currently focused window. In most environments, after the window has been closed, it is necessary
 * to explicitly switch to whatever window is now focused.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.closeCurrentWindow = function() {};

/**
 * Sets the dimensions of a window.
 * 
 * @param {string|number} windowHandle_or_width 
 * The name of the window to resize. See {\@link module:leadfoot/Session#switchToWindow} to learn about valid
 * window names. Omit this argument to resize the currently focused window.
 * 
 * @param {number} width_or_height 
 * The new width of the window, in CSS pixels.
 * 
 * @param {number=} height 
 * The new height of the window, in CSS pixels.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.setWindowSize = function(windowHandle_or_width, width_or_height, height) {};

/**
 * Gets the dimensions of a window.
 * 
 * @param {string=} windowHandle 
 * The name of the window to query. See {\@link module:leadfoot/Session#switchToWindow} to learn about valid
 * window names. Omit this argument to query the currently focused window.
 * 
 * @return {!Promise<{width: number, height: number}>} 
 * An object describing the width and height of the window, in CSS pixels.
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getWindowSize = function(windowHandle) {};

/**
 * Sets the position of a window.
 * 
 * @param {string|number} windowHandle_or_x 
 * The name of the window to move. See {\@link module:leadfoot/Session#switchToWindow} to learn about valid
 * window names. Omit this argument to move the currently focused window.
 * 
 * @param {number} x_or_y 
 * The screen x-coordinate to move to, in CSS pixels, relative to the left edge of the primary monitor.
 * 
 * @param {number=} y 
 * The screen y-coordinate to move to, in CSS pixels, relative to the top edge of the primary monitor.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.setWindowPosition = function(windowHandle_or_x, x_or_y, y) {};

/**
 * Gets the position of a window.
 * 
 * @param {string=} windowHandle 
 * The name of the window to query. See {\@link module:leadfoot/Session#switchToWindow} to learn about valid
 * window names. Omit this argument to query the currently focused window.
 * 
 * @return {!Promise<{x: number, y: number}>} 
 * An object describing the position of the window, in CSS pixels, relative to the top-left corner of the
 * primary monitor. If a secondary monitor exists above or to the left of the primary monitor, these values
 * will be negative.
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getWindowPosition = function(windowHandle) {};

/**
 * Maximises a window according to the platform’s window system behaviour.
 * 
 * @param {string=} windowHandle 
 * The name of the window to resize. See {\@link module:leadfoot/Session#switchToWindow} to learn about valid
 * window names. Omit this argument to resize the currently focused window.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.maximizeWindow = function(windowHandle) {};

/**
 * Gets all cookies set on the current page.
 * @return {!Promise<!Array<!leadfoot.WebDriverCookie>>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getCookies = function() {};

/**
 * Sets a cookie on the current page.
 * 
 * @param {!leadfoot.WebDriverCookie} cookie
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.setCookie = function(cookie) {};

/**
 * Clears all cookies for the current page.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.clearCookies = function() {};

/**
 * Deletes a cookie on the current page.
 * 
 * @param {string} name The name of the cookie to delete.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.deleteCookie = function(name) {};

/**
 * Gets the HTML loaded in the focused window/frame. This markup is serialised by the remote environment so
 * may not exactly match the HTML provided by the Web server.
 * @return {!Promise<string>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getPageSource = function() {};

/**
 * Gets the title of the focused window/frame.
 * @return {!Promise<string>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getPageTitle = function() {};

/**
 * Gets the first element from the focused window/frame that matches the given query.
 * 
 * @see {\@link module:leadfoot/Session#setFindTimeout} to set the amount of time it the remote environment
 * should spend waiting for an element that does not exist at the time of the `find` call before timing
 * out.
 * 
 * @param {string} using 
 * The element retrieval strategy to use. See {\@link module:leadfoot/Session#find} for options.
 * 
 * @param {string} value 
 * The strategy-specific value to search for. See {\@link module:leadfoot/Session#find} for details.
 * @return {!Promise<!Element>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.find = function(using, value) {};

/**
 * Gets all elements from the focused window/frame that match the given query.
 * 
 * @param {string} using 
 * The element retrieval strategy to use. See {\@link module:leadfoot/Session#find} for options.
 * 
 * @param {string} value 
 * The strategy-specific value to search for. See {\@link module:leadfoot/Session#find} for details.
 * @return {!Promise<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.findAll = function(using, value) {};

/**
 * Gets the currently focused element from the focused window/frame.
 * @return {!Promise<!Element>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getActiveElement = function() {};

/**
 * Types into the focused window/frame/element.
 * 
 * @param {(string|!Array<string>)} keys 
 * The text to type in the remote environment. It is possible to type keys that do not have normal character
 * representations (modifier keys, function keys, etc.) as well as keys that have two different representations
 * on a typical US-ASCII keyboard (numpad keys); use the values from {\@link module:leadfoot/keys} to type these
 * special characters. Any modifier keys that are activated by this call will persist until they are
 * deactivated. To deactivate a modifier key, type the same modifier key a second time, or send `\uE000`
 * ('NULL') to deactivate all currently active modifier keys.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.pressKeys = function(keys) {};

/**
 * Gets the current screen orientation.
 * 
 * @return {!Promise<string>} Either 'portrait' or 'landscape'.
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getOrientation = function() {};

/**
 * Sets the screen orientation.
 * 
 * @param {string} orientation Either 'portrait' or 'landscape'.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.setOrientation = function(orientation) {};

/**
 * Gets the text displayed in the currently active alert pop-up.
 * @return {!Promise<string>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getAlertText = function() {};

/**
 * Types into the currently active prompt pop-up.
 * 
 * @param {(string|!Array<string>)} text The text to type into the pop-up’s input box.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.typeInPrompt = function(text) {};

/**
 * Accepts an alert, prompt, or confirmation pop-up. Equivalent to clicking the 'OK' button.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.acceptAlert = function() {};

/**
 * Dismisses an alert, prompt, or confirmation pop-up. Equivalent to clicking the 'OK' button of an alert pop-up
 * or the 'Cancel' button of a prompt or confirmation pop-up.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.dismissAlert = function() {};

/**
 * Moves the remote environment’s mouse cursor to the specified element or relative position. If the element is
 * outside of the viewport, the remote driver will attempt to scroll it into view automatically.
 * 
 * @param {!Element|number} element_or_xOffset 
 * The element to move the mouse to. If x-offset and y-offset are not specified, the mouse will be moved to the
 * centre of the element.
 * 
 * @param {number=} xOffset_or_yOffset 
 * The x-offset of the cursor, maybe in CSS pixels, relative to the left edge of the specified element’s
 * bounding client rectangle. If no element is specified, the offset is relative to the previous position of the
 * mouse, or to the left edge of the page’s root element if the mouse was never moved before.
 * 
 * @param {number=} yOffset 
 * The y-offset of the cursor, maybe in CSS pixels, relative to the top edge of the specified element’s bounding
 * client rectangle. If no element is specified, the offset is relative to the previous position of the mouse,
 * or to the top edge of the page’s root element if the mouse was never moved before.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.moveMouseTo = function(element_or_xOffset, xOffset_or_yOffset, yOffset) {};

/**
 * Clicks a mouse button at the point where the mouse cursor is currently positioned. This method may fail to
 * execute with an error if the mouse has not been moved anywhere since the page was loaded.
 * 
 * @param {number=} button 
 * The button to click. 0 corresponds to the primary mouse button, 1 to the middle mouse button, 2 to the
 * secondary mouse button. Numbers above 2 correspond to any additional buttons a mouse might provide.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.clickMouseButton = function(button) {};

/**
 * Depresses a mouse button without releasing it.
 * 
 * @param {number=} button The button to press. See {\@link module:leadfoot/Session#click} for available options.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.pressMouseButton = function(button) {};

/**
 * Releases a previously depressed mouse button.
 * 
 * @param {number=} button The button to press. See {\@link module:leadfoot/Session#click} for available options.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.releaseMouseButton = function(button) {};

/**
 * Double-clicks the primary mouse button.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.doubleClick = function() {};

/**
 * Taps an element on a touch screen device. If the element is outside of the viewport, the remote driver will
 * attempt to scroll it into view automatically.
 * 
 * @param {!Element} element The element to tap.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.tap = function(element) {};

/**
 * Depresses a new finger at the given point on a touch screen device without releasing it.
 * 
 * @param {number} x The screen x-coordinate to press, maybe in device pixels.
 * @param {number} y The screen y-coordinate to press, maybe in device pixels.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.pressFinger = function(x, y) {};

/**
 * Releases whatever finger exists at the given point on a touch screen device.
 * 
 * @param {number} x The screen x-coordinate where a finger is pressed, maybe in device pixels.
 * @param {number} y The screen y-coordinate where a finger is pressed, maybe in device pixels.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.releaseFinger = function(x, y) {};

/**
 * Moves the last depressed finger to a new point on the touch screen.
 * 
 * @param {number} x The screen x-coordinate to move to, maybe in device pixels.
 * @param {number} y The screen y-coordinate to move to, maybe in device pixels.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.moveFinger = function(x, y) {};

/**
 * Scrolls the currently focused window on a touch screen device.
 * 
 * @param {!Element|number} element_or_xOffset 
 * An element to scroll to. The window will be scrolled so the element is as close to the top-left corner of the
 * window as possible.
 * 
 * @param {number} xOffset_or_yOffset 
 * An optional x-offset, relative to the left edge of the element, in CSS pixels. If no element is specified,
 * the offset is relative to the previous scroll position of the window.
 * 
 * @param {number=} yOffset 
 * An optional y-offset, relative to the top edge of the element, in CSS pixels. If no element is specified,
 * the offset is relative to the previous scroll position of the window.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.touchScroll = function(element_or_xOffset, xOffset_or_yOffset, yOffset) {};

/**
 * Performs a double-tap gesture on an element.
 * 
 * @param {!Element} element The element to double-tap.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.doubleTap = function(element) {};

/**
 * Performs a long-tap gesture on an element.
 * 
 * @param {!Element} element The element to long-tap.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.longTap = function(element) {};

/**
 * Flicks a finger. Note that this method is currently badly specified and highly dysfunctional and is only
 * provided for the sake of completeness.
 * 
 * @param {!Element} element The element where the flick should start.
 * @param {number} xOffset The x-offset in pixels to flick by.
 * @param {number} yOffset The x-offset in pixels to flick by.
 * @param {number} speed The speed of the flick, in pixels per *second*. Most human flicks are 100–200ms, so
 * this value will be higher than expected.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.flickFinger = function(element, xOffset, yOffset, speed) {};

/**
 * Gets the current geographical location of the remote environment.
 * 
 * @return {!Promise<!leadfoot.Geolocation>} 
 * Latitude and longitude are specified using standard WGS84 decimal latitude/longitude. Altitude is specified
 * as meters above the WGS84 ellipsoid. Not all environments support altitude.
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getGeolocation = function() {};

/**
 * Sets the geographical location of the remote environment.
 * 
 * @param {!leadfoot.Geolocation} location 
 * Latitude and longitude are specified using standard WGS84 decimal latitude/longitude. Altitude is specified
 * as meters above the WGS84 ellipsoid. Not all environments support altitude.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.setGeolocation = function(location) {};

/**
 * Gets all logs from the remote environment of the given type. The logs in the remote environment are cleared
 * once they have been retrieved.
 * 
 * @param {string} type 
 * The type of log entries to retrieve. Available log types differ between remote environments. Use
 * {\@link module:leadfoot/Session#getAvailableLogTypes} to learn what log types are currently available. Not all
 * environments support all possible log types.
 * 
 * @return {!Promise<!Array<!leadfoot.LogEntry>>} 
 * An array of log entry objects. Timestamps in log entries are Unix timestamps, in seconds.
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getLogsFor = function(type) {};

/**
 * Gets the types of logs that are currently available for retrieval from the remote environment.
 * @return {!Promise<!Array<string>>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getAvailableLogTypes = function() {};

/**
 * Gets the current state of the HTML5 application cache for the current page.
 * 
 * @return {!Promise<number>} 
 * The cache status. One of 0 (uncached), 1 (cached/idle), 2 (checking), 3 (downloading), 4 (update ready), 5
 * (obsolete).
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getApplicationCacheStatus = function() {};

/**
 * Terminates the session. No more commands will be accepted by the remote after this point.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.quit = function() {};

/**
 * Gets the list of keys set in local storage for the focused window/frame.
 * @return {!Promise<!Array<string>>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getLocalStorageKeys = function() {};

/**
 * Sets a value in local storage for the focused window/frame.
 * 
 * @param {string} key The key to set.
 * @param {string} value The value to set.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.setLocalStorageItem = function(key, value) {};

/**
 * Clears all data in local storage for the focused window/frame.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.clearLocalStorage = function() {};

/**
 * Gets a value from local storage for the focused window/frame.
 * 
 * @param {string} key The key of the data to get.
 * @return {!Promise<string>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getLocalStorageItem = function(key) {};

/**
 * Deletes a value from local storage for the focused window/frame.
 * 
 * @param {string} key The key of the data to delete.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.deleteLocalStorageItem = function(key) {};

/**
 * Gets the number of keys set in local storage for the focused window/frame.
 * @return {!Promise<number>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getLocalStorageLength = function() {};

/**
 * Gets the list of keys set in session storage for the focused window/frame.
 * @return {!Promise<!Array<string>>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getSessionStorageKeys = function() {};

/**
 * Sets a value in session storage for the focused window/frame.
 * 
 * @param {string} key The key to set.
 * @param {string} value The value to set.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.setSessionStorageItem = function(key, value) {};

/**
 * Clears all data in session storage for the focused window/frame.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.clearSessionStorage = function() {};

/**
 * Gets a value from session storage for the focused window/frame.
 * 
 * @param {string} key The key of the data to get.
 * @return {!Promise<string>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getSessionStorageItem = function(key) {};

/**
 * Deletes a value from session storage for the focused window/frame.
 * 
 * @param {string} key The key of the data to delete.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.deleteSessionStorageItem = function(key) {};

/**
 * Gets the number of keys set in session storage for the focused window/frame.
 * @return {!Promise<number>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getSessionStorageLength = function() {};

/**
 * Gets the first element in the currently active window/frame matching the given CSS class name.
 * 
 * @param {string} className The CSS class name to search for.
 * @return {!Promise<!Element>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.findByClassName = function(className) {};

/**
 * Gets the first element in the currently active window/frame matching the given CSS selector.
 * 
 * @param {string} selector The CSS selector to search for.
 * @return {!Promise<!Element>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.findByCssSelector = function(selector) {};

/**
 * Gets the first element in the currently active window/frame matching the given ID.
 * 
 * @param {string} id The ID of the element.
 * @return {!Promise<!Element>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.findById = function(id) {};

/**
 * Gets the first element in the currently active window/frame matching the given name attribute.
 * 
 * @param {string} name The name of the element.
 * @return {!Promise<!Element>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.findByName = function(name) {};

/**
 * Gets the first element in the currently active window/frame matching the given case-insensitive link text.
 * 
 * @param {string} text The link text of the element.
 * @return {!Promise<!Element>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.findByLinkText = function(text) {};

/**
 * Gets the first element in the currently active window/frame partially matching the given case-insensitive link text.
 * 
 * @param {string} text The partial link text of the element.
 * @return {!Promise<!Element>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.findByPartialLinkText = function(text) {};

/**
 * Gets the first element in the currently active window/frame matching the given HTML tag name.
 * 
 * @param {string} tagName The tag name of the element.
 * @return {!Promise<!Element>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.findByTagName = function(tagName) {};

/**
 * Gets the first element in the currently active window/frame matching the given XPath selector.
 * 
 * @param {string} path The XPath selector to search for.
 * @return {!Promise<!Element>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.findByXpath = function(path) {};

/**
 * Gets all elements in the currently active window/frame matching the given CSS class name.
 * 
 * @param {string} className The CSS class name to search for.
 * @return {!Promise<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.findAllByClassName = function(className) {};

/**
 * Gets all elements in the currently active window/frame matching the given CSS selector.
 * 
 * @param {string} selector The CSS selector to search for.
 * @return {!Promise<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.findAllByCssSelector = function(selector) {};

/**
 * Gets all elements in the currently active window/frame matching the given name attribute.
 * 
 * @param {string} name The name of the element.
 * @return {!Promise<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.findAllByName = function(name) {};

/**
 * Gets all elements in the currently active window/frame matching the given case-insensitive link text.
 * 
 * @param {string} text The link text of the element.
 * @return {!Promise<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.findAllByLinkText = function(text) {};

/**
 * Gets all elements in the currently active window/frame partially matching the given case-insensitive link text.
 * 
 * @param {string} text The partial link text of the element.
 * @return {!Promise<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.findAllByPartialLinkText = function(text) {};

/**
 * Gets all elements in the currently active window/frame matching the given HTML tag name.
 * 
 * @param {string} tagName The tag name of the element.
 * @return {!Promise<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.findAllByTagName = function(tagName) {};

/**
 * Gets all elements in the currently active window/frame matching the given XPath selector.
 * 
 * @param {string} path The XPath selector to search for.
 * @return {!Promise<!Array<!Element>>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.findAllByXpath = function(path) {};

/**
 * Waits for all elements in the currently active window/frame that match the given query to be destroyed.
 * 
 * @param {string} using 
 * The element retrieval strategy to use. See {\@link module:leadfoot/Session#find} for options.
 * 
 * @param {string} value 
 * The strategy-specific value to search for. See {\@link module:leadfoot/Session#find} for details.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.waitForDeleted = function(using, value) {};

/**
 * Waits for all elements in the currently active window/frame matching the given CSS class name to be destroyed.
 * 
 * @param {string} className The CSS class name to search for.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.waitForDeletedByClassName = function(className) {};

/**
 * Waits for all elements in the currently active window/frame matching the given CSS selector to be destroyed.
 * 
 * @param {string} className
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.waitForDeletedByCssSelector = function(className) {};

/**
 * Waits for all elements in the currently active window/frame matching the given ID to be destroyed.
 * 
 * @param {string} id The ID of the element.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.waitForDeletedById = function(id) {};

/**
 * Waits for all elements in the currently active window/frame matching the given name attribute to be destroyed.
 * 
 * @param {string} name The name of the element.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.waitForDeletedByName = function(name) {};

/**
 * Waits for all elements in the currently active window/frame matching the given case-insensitive link text to be destroyed.
 * 
 * @param {string} text The link text of the element.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.waitForDeletedByLinkText = function(text) {};

/**
 * Waits for all elements in the currently active window/frame partially matching the given case-insensitive link text to be
 * destroyed.
 * 
 * @param {string} text The partial link text of the element.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.waitForDeletedByPartialLinkText = function(text) {};

/**
 * Waits for all elements in the currently active window/frame matching the given HTML tag name to be destroyed.
 * 
 * @param {string} tagName The tag name of the element.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.waitForDeletedByTagName = function(tagName) {};

/**
 * Waits for all elements in the currently active window/frame matching the given XPath selector to be destroyed.
 * 
 * @param {string} path The XPath selector to search for.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.waitForDeletedByXpath = function(path) {};

/**
 * Gets the timeout for {\@link module:leadfoot/Session#executeAsync} calls.
 * @return {!Promise<number>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getExecuteAsyncTimeout = function() {};

/**
 * Sets the timeout for {\@link module:leadfoot/Session#executeAsync} calls.
 * 
 * @param {number} ms The length of the timeout, in milliseconds.
 * @return {!Promise<number>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.setExecuteAsyncTimeout = function(ms) {};

/**
 * Gets the timeout for {\@link module:leadfoot/Session#find} calls.
 * @return {!Promise<number>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getFindTimeout = function() {};

/**
 * Sets the timeout for {\@link module:leadfoot/Session#find} calls.
 * 
 * @param {number} ms The length of the timeout, in milliseconds.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.setFindTimeout = function(ms) {};

/**
 * Gets the timeout for {\@link module:leadfoot/Session#get} calls.
 * @return {!Promise<number>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.getPageLoadTimeout = function() {};

/**
 * Sets the timeout for {\@link module:leadfoot/Session#get} calls.
 * 
 * @param {number} ms The length of the timeout, in milliseconds.
 * @return {!Promise<void>}
 */
tsickle_declare_module.leadfoot_Session.Session.prototype.setPageLoadTimeout = function(ms) {};

/* TODO: ExportAssignment in tsickle_declare_module.leadfoot_Session */
