/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/xregexp/index.d.ts:

/**
 * @param {string|!RegExp} pattern
 * @param {string=} flags
 * @return {!RegExp}
 */
function OuterXRegExp(pattern, flags) {}
/**
 * @record
 * @struct
 */
OuterXRegExp.TokenOpts = function() {};
 /** @type {string} */
OuterXRegExp.TokenOpts.prototype.scope;
 /** @type {function(): boolean} */
OuterXRegExp.TokenOpts.prototype.trigger;
 /** @type {string} */
OuterXRegExp.TokenOpts.prototype.customFlags;

/**
 * @param {string|!RegExp} pattern
 * @param {string=} flags
 * @return {!RegExp}
 */
OuterXRegExp.XRegExp = function(pattern, flags) {};

/**
 * @param {!RegExp} regex
 * @param {function(!RegExpExecArray, string): string} handler
 * @param {!OuterXRegExp.TokenOpts=} options
 * @return {void}
 */
OuterXRegExp.addToken = function(regex, handler, options) {};

/**
 * @param {string} pattern
 * @param {!Array<string>} subs
 * @param {string=} flags
 * @return {!RegExp}
 */
OuterXRegExp.build = function(pattern, subs, flags) {};

/**
 * @param {string} pattern
 * @param {string=} flags
 * @return {!RegExp}
 */
OuterXRegExp.cache = function(pattern, flags) {};

/**
 * @param {string} str
 * @return {string}
 */
OuterXRegExp.escape = function(str) {};

/**
 * @param {string} str
 * @param {!RegExp} regex
 * @param {number=} pos
 * @param {boolean=} sticky
 * @return {!RegExpExecArray}
 */
OuterXRegExp.exec = function(str, regex, pos, sticky) {};

/**
 * @param {string} str
 * @param {!RegExp} regex
 * @param {function(!RegExpExecArray, number, string, !RegExp): void} callback
 * @return {?}
 */
OuterXRegExp.forEach = function(str, regex, callback) {};

/**
 * @param {!RegExp} regex
 * @return {!RegExp}
 */
OuterXRegExp.globalize = function(regex) {};

/**
 * @param {string|!Object} options
 * @return {void}
 */
OuterXRegExp.install = function(options) {};

/**
 * @param {string} feature
 * @return {boolean}
 */
OuterXRegExp.isInstalled = function(feature) {};

/**
 * @param {?} value
 * @return {boolean}
 */
OuterXRegExp.isRegExp = function(value) {};

/**
 * @param {string} str
 * @param {!RegExp} regex
 * @param {string=} scope
 * @return {?|string|!Array<string>}
 */
OuterXRegExp.match = function(str, regex, scope) {};

/**
 * @param {string} str
 * @param {!Array<!RegExp>|!Array<{regex: !RegExp, backref: string}>|!Array<{regex: !RegExp, backref: number}>} chain
 * @return {!Array<string>}
 */
OuterXRegExp.matchChain = function(str, chain) {};

/**
 * @param {string} str
 * @param {string} left
 * @param {string} right
 * @param {string=} flags
 * @param {!Object=} options
 * @return {!Array<string>}
 */
OuterXRegExp.matchRecursive = function(str, left, right, flags, options) {};

/**
 * @param {string} str
 * @param {string|!RegExp} search
 * @param {string|!Function} replacement
 * @param {string=} scope
 * @return {string}
 */
OuterXRegExp.replace = function(str, search, replacement, scope) {};

/**
 * @param {string} str
 * @param {!Array<!Array<(string|!RegExp)>>} replacements
 * @return {string}
 */
OuterXRegExp.replaceEach = function(str, replacements) {};

/**
 * @param {string} str
 * @param {string|!RegExp} separator
 * @param {number=} limit
 * @return {!Array<string>}
 */
OuterXRegExp.split = function(str, separator, limit) {};

/**
 * @param {string} str
 * @param {!RegExp} regex
 * @param {number=} pos
 * @param {boolean=} sticky
 * @return {boolean}
 */
OuterXRegExp.test = function(str, regex, pos, sticky) {};

/**
 * @param {!Object|string} options
 * @return {void}
 */
OuterXRegExp.uninstall = function(options) {};

/**
 * @param {!Array<(string|!RegExp)>} patterns
 * @param {string=} flags
 * @return {!RegExp}
 */
OuterXRegExp.union = function(patterns, flags) {};
 /** @type {string} */
OuterXRegExp.version;

/**
 * @param {!RegExp} regex
 * @param {function(!RegExpExecArray, string): string} handler
 * @param {!OuterXRegExp.TokenOpts=} options
 * @return {void}
 */
OuterXRegExp.XRegExp.addToken = function(regex, handler, options) {};

/**
 * @param {string} pattern
 * @param {!Array<string>} subs
 * @param {string=} flags
 * @return {!RegExp}
 */
OuterXRegExp.XRegExp.build = function(pattern, subs, flags) {};

/**
 * @param {string} pattern
 * @param {string=} flags
 * @return {!RegExp}
 */
OuterXRegExp.XRegExp.cache = function(pattern, flags) {};

/**
 * @param {string} str
 * @return {string}
 */
OuterXRegExp.XRegExp.escape = function(str) {};

/**
 * @param {string} str
 * @param {!RegExp} regex
 * @param {number=} pos
 * @param {boolean=} sticky
 * @return {!RegExpExecArray}
 */
OuterXRegExp.XRegExp.exec = function(str, regex, pos, sticky) {};

/**
 * @param {string} str
 * @param {!RegExp} regex
 * @param {function(!RegExpExecArray, number, string, !RegExp): void} callback
 * @return {?}
 */
OuterXRegExp.XRegExp.forEach = function(str, regex, callback) {};

/**
 * @param {!RegExp} regex
 * @return {!RegExp}
 */
OuterXRegExp.XRegExp.globalize = function(regex) {};

/**
 * @param {string|!Object} options
 * @return {void}
 */
OuterXRegExp.XRegExp.install = function(options) {};

/**
 * @param {string} feature
 * @return {boolean}
 */
OuterXRegExp.XRegExp.isInstalled = function(feature) {};

/**
 * @param {?} value
 * @return {boolean}
 */
OuterXRegExp.XRegExp.isRegExp = function(value) {};

/**
 * @param {string} str
 * @param {!RegExp} regex
 * @param {string=} scope
 * @return {?|string|!Array<string>}
 */
OuterXRegExp.XRegExp.match = function(str, regex, scope) {};

/**
 * @param {string} str
 * @param {!Array<!RegExp>|!Array<{regex: !RegExp, backref: string}>|!Array<{regex: !RegExp, backref: number}>} chain
 * @return {!Array<string>}
 */
OuterXRegExp.XRegExp.matchChain = function(str, chain) {};

/**
 * @param {string} str
 * @param {string} left
 * @param {string} right
 * @param {string=} flags
 * @param {!Object=} options
 * @return {!Array<string>}
 */
OuterXRegExp.XRegExp.matchRecursive = function(str, left, right, flags, options) {};

/**
 * @param {string} str
 * @param {string|!RegExp} search
 * @param {string|!Function} replacement
 * @param {string=} scope
 * @return {string}
 */
OuterXRegExp.XRegExp.replace = function(str, search, replacement, scope) {};

/**
 * @param {string} str
 * @param {!Array<!Array<(string|!RegExp)>>} replacements
 * @return {string}
 */
OuterXRegExp.XRegExp.replaceEach = function(str, replacements) {};

/**
 * @param {string} str
 * @param {string|!RegExp} separator
 * @param {number=} limit
 * @return {!Array<string>}
 */
OuterXRegExp.XRegExp.split = function(str, separator, limit) {};

/**
 * @param {string} str
 * @param {!RegExp} regex
 * @param {number=} pos
 * @param {boolean=} sticky
 * @return {boolean}
 */
OuterXRegExp.XRegExp.test = function(str, regex, pos, sticky) {};

/**
 * @param {!Object|string} options
 * @return {void}
 */
OuterXRegExp.XRegExp.uninstall = function(options) {};

/**
 * @param {!Array<(string|!RegExp)>} patterns
 * @param {string=} flags
 * @return {!RegExp}
 */
OuterXRegExp.XRegExp.union = function(patterns, flags) {};
 /** @type {string} */
OuterXRegExp.XRegExp.version;

/* TODO: ExportAssignment in  */
