/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/braintree-web/index.d.ts:
/** @const */
var braintree = {};
/**
 * @record
 * @struct
 */
braintree.AmericanExpress = function() {};
 /** @type {function({client: !braintree.Client}, function(!braintree.BraintreeError, ?): void): void} */
braintree.AmericanExpress.prototype.create;
 /** @type {string} */
braintree.AmericanExpress.prototype.VERSION;

/**
 * Gets the rewards balance associated with a Braintree nonce.
 * \@example 
 * var americanExpress = require('braintree-web/american-express');
 * 
 * americanExpress.create({client: clientInstance}, function (createErr, americanExpressInstance) {
 *   var options = {nonce: existingBraintreeNonce};
 *   americanExpressInstance.getRewardsBalance(options, function (getErr, payload) {
 *     if (getErr || payload.error) {
 *       // Handle error
 *       return;
 *     }
 * 
 *     console.log('Rewards amount: ' + payload.rewardsAmount);
 *   });
 * });
 * @param {{nonce: string}} options
 * @param {function(!braintree.BraintreeError, ?): void} callback
 * @return {void}
 */
braintree.AmericanExpress.prototype.getRewardsBalance = function(options, callback) {};

/**
 * Gets the Express Checkout nonce profile given a nonce from American Express.
 * \@example 
 * var americanExpress = require('braintree-web/american-express');
 * 
 * americanExpress.create({client: clientInstance}, function (createErr, americanExpressInstance) {
 *   var options = {nonce: existingAmericanExpressNonce};
 *   americanExpressInstance.getExpressCheckoutProfile(options, function (getErr, payload) {
 *     if (getErr) {
 *       // Handle error
 *       return;
 *     }
 * 
 *     console.log('Number of cards: ' + payload.amexExpressCheckoutCards.length);
 *   });
 * });
 * @param {{nonce: string}} options
 * @param {function(!braintree.BraintreeError, ?): void} callback
 * @return {void}
 */
braintree.AmericanExpress.prototype.getExpressCheckoutProfile = function(options, callback) {};
/**
 * @record
 * @struct
 */
braintree.ApplePayPaymentRequest = function() {};
 /** @type {{label: string, amount: string}} */
braintree.ApplePayPaymentRequest.prototype.total;
 /** @type {string} */
braintree.ApplePayPaymentRequest.prototype.countryCode;
 /** @type {string} */
braintree.ApplePayPaymentRequest.prototype.currencyCode;
 /** @type {!Array<string>} */
braintree.ApplePayPaymentRequest.prototype.supportedNetworks;
 /** @type {!Array<string>} */
braintree.ApplePayPaymentRequest.prototype.merchantCapabilities;
 /** @type {?} */
braintree.ApplePayPaymentRequest.prototype.billingContact;
 /** @type {?} */
braintree.ApplePayPaymentRequest.prototype.shippingContact;
 /** @type {?} */
braintree.ApplePayPaymentRequest.prototype.shippingMethods;
 /** @type {?} */
braintree.ApplePayPaymentRequest.prototype.shippingType;
 /** @type {?} */
braintree.ApplePayPaymentRequest.prototype.requiredBillingContactFields;
 /** @type {?} */
braintree.ApplePayPaymentRequest.prototype.requiredShippingContactFields;

/** @const */
braintree.ApplePayStatusCodes = {};
/** @const {number} */
braintree.ApplePayStatusCodes.STATUS_SUCCESS;
/** @const {number} */
braintree.ApplePayStatusCodes.STATUS_FAILURE;
/** @const {number} */
braintree.ApplePayStatusCodes.STATUS_INVALID_BILLING_POSTAL_ADDRESS;
/** @const {number} */
braintree.ApplePayStatusCodes.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS;
/** @const {number} */
braintree.ApplePayStatusCodes.STATUS_INVALID_SHIPPING_CONTACT;
/** @const {number} */
braintree.ApplePayStatusCodes.STATUS_PIN_REQUIRED;
/** @const {number} */
braintree.ApplePayStatusCodes.STATUS_PIN_INCORRECT;
/** @const {number} */
braintree.ApplePayStatusCodes.STATUS_PIN_LOCKOUT;
/**
 * @record
 * @struct
 */
braintree.ApplePayPayload = function() {};
 /** @type {string} */
braintree.ApplePayPayload.prototype.merchantIdentifier;
 /** @type {string} */
braintree.ApplePayPayload.prototype.domainName;
 /** @type {string} */
braintree.ApplePayPayload.prototype.displayName;

/**
 * @constructor
 * @struct
 * @param {number} version
 * @param {!braintree.ApplePayPaymentRequest} request
 */
braintree.ApplePaySession = function(version, request) {};
 /** @type {function(?): void} */
braintree.ApplePaySession.prototype.oncancel;
 /** @type {function(?): void} */
braintree.ApplePaySession.prototype.onpaymentauthorized;
 /** @type {function(?): void} */
braintree.ApplePaySession.prototype.onpaymentmethodselected;
 /** @type {function(?): void} */
braintree.ApplePaySession.prototype.onshippingcontactselected;
 /** @type {function(?): void} */
braintree.ApplePaySession.prototype.onshippingmethodselected;
 /** @type {function(?): void} */
braintree.ApplePaySession.prototype.onvalidatemerchant;

/**
 * @return {boolean}
 */
braintree.ApplePaySession.prototype.canMakePayments = function() {};

/**
 * @param {string} merchantIdentifier
 * @return {boolean}
 */
braintree.ApplePaySession.prototype.canMakePaymentsWithActiveCard = function(merchantIdentifier) {};

/**
 * @param {?} merchantSession
 * @return {void}
 */
braintree.ApplePaySession.prototype.completeMerchantValidation = function(merchantSession) {};

/**
 * @return {void}
 */
braintree.ApplePaySession.prototype.abort = function() {};

/**
 * @return {void}
 */
braintree.ApplePaySession.prototype.begin = function() {};

/**
 * @param {braintree.ApplePayStatusCodes} status
 * @return {void}
 */
braintree.ApplePaySession.prototype.completePayment = function(status) {};

/**
 * @param {?} newTotal
 * @param {?} newLineItems
 * @return {void}
 */
braintree.ApplePaySession.prototype.completePaymentMethodSelection = function(newTotal, newLineItems) {};

/**
 * @param {braintree.ApplePayStatusCodes} status
 * @param {?} newShippingMethods
 * @param {?} newTotal
 * @param {?} newLineItems
 * @return {void}
 */
braintree.ApplePaySession.prototype.completeShippingContactSelection = function(status, newShippingMethods, newTotal, newLineItems) {};

/**
 * @param {braintree.ApplePayStatusCodes} status
 * @param {?} newTotal
 * @param {?} newLineItems
 * @return {void}
 */
braintree.ApplePaySession.prototype.completeShippingMethodSelection = function(status, newTotal, newLineItems) {};

/**
 * @param {number} version
 * @return {boolean}
 */
braintree.ApplePaySession.prototype.supportsVersion = function(version) {};
/**
 * @record
 * @struct
 */
braintree.ApplePay = function() {};
 /** @type {function({client: !braintree.Client}, function(!braintree.BraintreeError, ?): void): void} */
braintree.ApplePay.prototype.create;
 /** @type {string} */
braintree.ApplePay.prototype.VERSION;

/**
 * Merges a payment request with Braintree defaults
 * The following properties are assigned to `paymentRequest` if not already defined
 * - countryCode
 * - currencyCode
 * - merchantCapabilities
 * - supportedNetworks
 * \@example 
 * var applePay = require('braintree-web/apple-pay');
 * 
 * applePay.create({client: clientInstance}, function (createErr, applePayInstance) {
 *   // ...
 *   var paymentRequest = applePay.createPaymentRequest({
 *    total: {
 *      label: 'My Company',
 *      amount: '19.99'
 *   });
 * 
 *   console.log(paymentRequest);
 *   // { total: { }, countryCode: 'US', currencyCode: 'USD', merchantCapabilities: [ ], supportedNetworks: [ ] }
 * 
 * @param {!braintree.ApplePayPaymentRequest} paymentRequest
 * @return {!braintree.ApplePayPaymentRequest}
 */
braintree.ApplePay.prototype.createPaymentRequest = function(paymentRequest) {};

/**
 * Validates the merchant website, as required by ApplePaySession before payment can be authorized.
 * - The canonical name for your store.
 * - The system may display this name to the user.
 * - Use a 128-character or less, UTF-8 string.
 * - Do not localize the name.
 * Your Apple merchant identifier. This is the Apple Merchant ID created on the Apple Developer Portal.
 * Defaults to the merchant identifier specified in the Braintree Control Panel.
 * You can use this field to override the merchant identifier for this transaction.
 * Pass the merchant session to your Apple Pay session's completeMerchantValidation method.
 * \@example 
 * var applePay = require('braintree-web/apple-pay');
 * 
 * applePay.create({client: clientInstance}, function (createErr, applePayInstance) {
 *   var session = new ApplePaySession(1, {
 *     // This should be the payment request object that
 *     // contains the information needed to display the payment sheet.
 *   });
 * 
 *   session.onvalidatemerchant = function (event) {
 *     applePay.performValidation({
 *       validationURL: event.validationURL
 *     }, function(err, validationData) {
 *       if (err) {
 *         console.error(err);
 *         session.abort();
 *         return;
 *       }
 *       session.completeMerchantValidation(validationData);
 *     });
 *   };
 * });
 * @param {{validationURL: string, displayName: string, merchantIdentifier: string}} options
 * @param {function(!braintree.BraintreeError, ?): void} callback
 * @return {void}
 */
braintree.ApplePay.prototype.performValidation = function(options, callback) {};

/**
 * Tokenizes an Apple Pay payment.
 * \@example 
 * var applePay = require('braintree-web/apple-pay');
 * 
 * applePay.create({client: clientInstance}, function (createErr, applePayInstance) {
 *   var session = new ApplePaySession(1, { });
 * 
 *   session.onpaymentauthorized = function (event) {
 *     applePay.tokenize({
 *       token: event.payment.token
 *     }, function (err, tokenizedPayload) {
 *       if (err) {
 *         session.completePayment(ApplePaySession.STATUS_FAILURE);
 *         return;
 *       }
 *       session.completePayment(ApplePaySession.STATUS_SUCCESS);
 * 
 *       // Send the tokenizedPayload to your server.
 *     });
 *  };
 * });
 * @param {{token: ?}} options
 * @param {function(!braintree.BraintreeError, ?): void} callback
 * @return {void}
 */
braintree.ApplePay.prototype.tokenize = function(options, callback) {};
/**
 * @record
 * @struct
 */
braintree.ClientAnalyticsMetadata = function() {};
 /** @type {string} */
braintree.ClientAnalyticsMetadata.prototype.sessionId;
 /** @type {string} */
braintree.ClientAnalyticsMetadata.prototype.sdkVersion;
 /** @type {string} */
braintree.ClientAnalyticsMetadata.prototype.merchantAppId;
/**
 * @record
 * @struct
 */
braintree.Configuration = function() {};
 /** @type {!braintree.Client} */
braintree.Configuration.prototype.client;
 /** @type {?} */
braintree.Configuration.prototype.gatewayConfiguration;
 /** @type {!braintree.ClientAnalyticsMetadata} */
braintree.Configuration.prototype.analyticsMetadata;
/**
 * @record
 * @struct
 */
braintree.CreditCardInfo = function() {};
 /** @type {string} */
braintree.CreditCardInfo.prototype.number;
 /** @type {string} */
braintree.CreditCardInfo.prototype.cvv;
 /** @type {string} */
braintree.CreditCardInfo.prototype.expirationDate;
 /** @type {{postalCode: string}} */
braintree.CreditCardInfo.prototype.billingAddress;
/**
 * @record
 * @struct
 */
braintree.Client = function() {};
 /** @type {string} */
braintree.Client.prototype.authorization;
 /** @type {function({authorization: string}, function(!braintree.BraintreeError, ?): void): void} */
braintree.Client.prototype.create;
 /** @type {string} */
braintree.Client.prototype.VERSION;

/**
 * Returns a copy of the configuration values.
 * @return {!braintree.Configuration}
 */
braintree.Client.prototype.getConfiguration = function() {};

/**
 * Used by other modules to formulate all network requests to the Braintree gateway. It is also capable of being used directly from your own form to tokenize credit card information. However, be sure to satisfy PCI compliance if you use direct card tokenization.
 * \@example 
 * <caption>Direct Credit Card Tokenization</caption>
 * var createClient = require('braintree-web/client').create;
 * 
 * createClient({
 *   authorization: CLIENT_AUTHORIZATION
 * }, function (createErr, clientInstance) {
 *   var form = document.getElementById('my-form-id');
 *   var data = {
 *     creditCard: {
 *       number: form['cc-number'].value,
 *       cvv: form['cc-cvv'].value,
 *       expirationDate: form['cc-date'].value,
 *       billingAddress: {
 *         postalCode: form['cc-postal'].value
 *       },
 *       options: {
 *         validate: false
 *       }
 *     }
 *   };
 * 
 *   // Warning: For a merchant to be eligible for the easiest level of PCI compliance (SAQ A),
 *   // payment fields cannot be hosted on your checkout page.
 *   // For an alternative to the following, use Hosted Fields.
 *   clientInstance.request({
 *     endpoint: 'payment_methods/credit_cards',
 *     method: 'post',
 *     data: data
 *   }, function (requestErr, response) {
 *  // More detailed example of handling API errors: https://codepen.io/braintree/pen/MbwjdM
 *     if (requestErr) { throw new Error(requestErr); }
 * 
 *     console.log('Got nonce:', response.creditCards[0].nonce);
 *   });
 * });
 * @param {{method: string, endpoint: string, data: ?, timeout: number}} options
 * @param {function(!braintree.BraintreeError, ?): void} callback
 * @return {void}
 */
braintree.Client.prototype.request = function(options, callback) {};
/**
 * @record
 * @struct
 */
braintree.DataCollector = function() {};
 /** @type {function({client: !braintree.Client, kount: boolean, paypal: boolean}, function(!braintree.BraintreeError, ?): void): void} */
braintree.DataCollector.prototype.create;
 /** @type {string} */
braintree.DataCollector.prototype.VERSION;
 /** @type {string} */
braintree.DataCollector.prototype.deviceData;

/**
 * \@memberof DataCollector
 * \@name teardown
 * \@description Cleanly remove all event handlers and DOM nodes that were added.
 * \@instance
 * @param {function(!braintree.BraintreeError, ?): void=} callback
 * @return {void}
 */
braintree.DataCollector.prototype.teardown = function(callback) {};
/**
 * @record
 * @struct
 */
braintree.HostedFieldsField = function() {};
 /** @type {string} */
braintree.HostedFieldsField.prototype.selector;
 /** @type {string} */
braintree.HostedFieldsField.prototype.placeholder;
 /** @type {string} */
braintree.HostedFieldsField.prototype.type;
 /** @type {boolean} */
braintree.HostedFieldsField.prototype.formatInput;
 /** @type {(boolean|{options: !Array<string>})} */
braintree.HostedFieldsField.prototype.select;
/**
 * @record
 * @struct
 */
braintree.HostedFieldFieldOptions = function() {};
 /** @type {!braintree.HostedFieldsField} */
braintree.HostedFieldFieldOptions.prototype.number;
 /** @type {!braintree.HostedFieldsField} */
braintree.HostedFieldFieldOptions.prototype.expirationDate;
 /** @type {!braintree.HostedFieldsField} */
braintree.HostedFieldFieldOptions.prototype.expirationMonth;
 /** @type {!braintree.HostedFieldsField} */
braintree.HostedFieldFieldOptions.prototype.expirationYear;
 /** @type {!braintree.HostedFieldsField} */
braintree.HostedFieldFieldOptions.prototype.cvv;
 /** @type {!braintree.HostedFieldsField} */
braintree.HostedFieldFieldOptions.prototype.postalCode;
/**
 * @record
 * @struct
 */
braintree.HostedFieldsCardCode = function() {};
 /** @type {string} */
braintree.HostedFieldsCardCode.prototype.name;
 /** @type {number} */
braintree.HostedFieldsCardCode.prototype.size;
/**
 * @record
 * @struct
 */
braintree.HostedFieldsHostedFieldsCard = function() {};
 /** @type {string} */
braintree.HostedFieldsHostedFieldsCard.prototype.type;
 /** @type {string} */
braintree.HostedFieldsHostedFieldsCard.prototype.niceType;
 /** @type {!braintree.HostedFieldsCardCode} */
braintree.HostedFieldsHostedFieldsCard.prototype.code;
/**
 * @record
 * @struct
 */
braintree.HostedFieldsHostedFieldsFieldData = function() {};
 /** @type {!HTMLElement} */
braintree.HostedFieldsHostedFieldsFieldData.prototype.container;
 /** @type {boolean} */
braintree.HostedFieldsHostedFieldsFieldData.prototype.isFocused;
 /** @type {boolean} */
braintree.HostedFieldsHostedFieldsFieldData.prototype.isEmpty;
 /** @type {boolean} */
braintree.HostedFieldsHostedFieldsFieldData.prototype.isPotentiallyValid;
 /** @type {boolean} */
braintree.HostedFieldsHostedFieldsFieldData.prototype.isValid;
/**
 * @record
 * @struct
 */
braintree.HostedFieldsFieldDataFields = function() {};
 /** @type {!braintree.HostedFieldsHostedFieldsFieldData} */
braintree.HostedFieldsFieldDataFields.prototype.number;
 /** @type {!braintree.HostedFieldsHostedFieldsFieldData} */
braintree.HostedFieldsFieldDataFields.prototype.cvv;
 /** @type {!braintree.HostedFieldsHostedFieldsFieldData} */
braintree.HostedFieldsFieldDataFields.prototype.expirationDate;
 /** @type {!braintree.HostedFieldsHostedFieldsFieldData} */
braintree.HostedFieldsFieldDataFields.prototype.expirationMonth;
 /** @type {!braintree.HostedFieldsHostedFieldsFieldData} */
braintree.HostedFieldsFieldDataFields.prototype.expirationYear;
 /** @type {!braintree.HostedFieldsHostedFieldsFieldData} */
braintree.HostedFieldsFieldDataFields.prototype.postalCode;
/**
 * @record
 * @struct
 */
braintree.HostedFieldsStateObject = function() {};
 /** @type {!Array<!braintree.HostedFieldsHostedFieldsCard>} */
braintree.HostedFieldsStateObject.prototype.cards;
 /** @type {string} */
braintree.HostedFieldsStateObject.prototype.emittedBy;
 /** @type {!braintree.HostedFieldsFieldDataFields} */
braintree.HostedFieldsStateObject.prototype.fields;
/**
 * @record
 * @struct
 */
braintree.HostedFieldsAccountDetails = function() {};
 /** @type {string} */
braintree.HostedFieldsAccountDetails.prototype.cardType;
 /** @type {string} */
braintree.HostedFieldsAccountDetails.prototype.lastTwo;
/**
 * @record
 * @struct
 */
braintree.HostedFieldsTokenizePayload = function() {};
 /** @type {string} */
braintree.HostedFieldsTokenizePayload.prototype.nonce;
 /** @type {!braintree.HostedFieldsAccountDetails} */
braintree.HostedFieldsTokenizePayload.prototype.details;
 /** @type {string} */
braintree.HostedFieldsTokenizePayload.prototype.type;
 /** @type {string} */
braintree.HostedFieldsTokenizePayload.prototype.description;
/**
 * @record
 * @struct
 */
braintree.HostedFields = function() {};
 /** @type {function({client: !braintree.Client, fields: !braintree.HostedFieldFieldOptions, styles: ?}, function(!braintree.BraintreeError, ?): void): void} */
braintree.HostedFields.prototype.create;
 /** @type {?} */
braintree.HostedFields.prototype.styleOptions;
 /** @type {string} */
braintree.HostedFields.prototype.VERSION;

/**
 * \@name HostedFields#on
 * \@description Subscribes a handler function to a named event. `event` should be {\@link HostedFields#event:blur|blur}, {\@link HostedFields#event:focus|focus}, {\@link HostedFields#event:empty|empty}, {\@link HostedFields#event:notEmpty|notEmpty}, {\@link HostedFields#event:cardTypeChange|cardTypeChange}, or {\@link HostedFields#event:validityChange|validityChange}. Events will emit a {\@link HostedFields~stateObject|stateObject}.
 * \@example 
 * <caption>Listening to a Hosted Field event, in this case 'focus'</caption>
 * hostedFields.create({ ... }, function (createErr, hostedFieldsInstance) {
 *   hostedFieldsInstance.on('focus', function (event) {
 *     console.log(event.emittedBy, 'has been focused');
 *   });
 * });
 * @param {string} event
 * @param {function(?): ?} handler
 * @return {void}
 */
braintree.HostedFields.prototype.on = function(event, handler) {};

/**
 * Cleanly tear down anything set up by {\@link module:braintree-web/hosted-fields.create|create}
 * \@example 
 * hostedFieldsInstance.teardown(function (teardownErr) {
 *   if (teardownErr) {
 *     console.error('Could not tear down Hosted Fields!');
 *   } else {
 *     console.info('Hosted Fields has been torn down!');
 *   }
 * });
 * @param {function(!braintree.BraintreeError, ?): void=} callback
 * @return {void}
 */
braintree.HostedFields.prototype.teardown = function(callback) {};

/**
 * Tokenizes fields and returns a nonce payload.
 * \@example <caption>Tokenize a card</caption>
 * hostedFieldsInstance.tokenize(function (tokenizeErr, payload) {
 *   if (tokenizeErr) {
 *     switch (tokenizeErr.code) {
 *       case 'HOSTED_FIELDS_FIELDS_EMPTY':
 *         console.error('All fields are empty! Please fill out the form.');
 *         break;
 *       case 'HOSTED_FIELDS_FIELDS_INVALID':
 *         console.error('Some fields are invalid:', tokenizeErr.details.invalidFieldKeys);
 *         break;
 *       case 'HOSTED_FIELDS_FAILED_TOKENIZATION':
 *         console.error('Tokenization failed server side. Is the card valid?');
 *         break;
 *       case 'HOSTED_FIELDS_TOKENIZATION_NETWORK_ERROR':
 *         console.error('Network error occurred when tokenizing.');
 *         break;
 *       default:
 *         console.error('Something bad happened!', tokenizeErr);
 *     }
 *   } else {
 *     console.log('Got nonce:', payload.nonce);
 *   }
 * });
 * \@example <caption>Tokenize and vault a card</caption>
 * hostedFieldsInstance.tokenize({
 *   vault: true
 * }, function (tokenizeErr, payload) {
 *   if (tokenizeErr) {
 *     console.error(tokenizeErr);
 *   } else {
 *     console.log('Got nonce:', payload.nonce);
 *   }
 * });
 * @param {{vault: boolean}=} options
 * @param {function(!braintree.BraintreeError, ?): void=} callback
 * @return {void}
 */
braintree.HostedFields.prototype.tokenize = function(options, callback) {};

/**
 * Add a class to a {\@link module:braintree-web/hosted-fields~field field}. Useful for updating field styles when events occur elsewhere in your checkout.
 * 
 * \@example 
 * hostedFieldsInstance.addClass('number', 'custom-class', function (addClassErr) {
 *   if (addClassErr) {
 *     console.error(addClassErr);
 *   }
 * });
 * @param {string} field
 * @param {string} classname
 * @param {function(!braintree.BraintreeError, ?): void=} callback
 * @return {void}
 */
braintree.HostedFields.prototype.addClass = function(field, classname, callback) {};

/**
 * Removes a class to a {\@link module:braintree-web/hosted-fields~field field}. Useful for updating field styles when events occur elsewhere in your checkout.
 * 
 * \@example 
 * hostedFieldsInstance.addClass('number', 'custom-class', function (addClassErr) {
 *   if (addClassErr) {
 *     console.error(addClassErr);
 *     return;
 *   }
 * 
 *   // some time later...
 *   hostedFieldsInstance.removeClass('number', 'custom-class');
 * });
 * @param {string} field
 * @param {string} classname
 * @param {function(!braintree.BraintreeError, ?): void=} callback
 * @return {void}
 */
braintree.HostedFields.prototype.removeClass = function(field, classname, callback) {};

/**
 * Sets the placeholder of a {\@link module:braintree-web/hosted-fields~field field}.
 * 
 * \@example 
 * hostedFieldsInstance.setPlaceholder('number', '4111 1111 1111 1111', function (placeholderErr) {
 *   if (placeholderErr) {
 *     console.error(placeholderErr);
 *   }
 * });
 * 
 * \@example <caption>Update CVV field on card type change</caption>
 * hostedFieldsInstance.on('cardTypeChange', function (event) {
 *   // Update the placeholder value if there is only one possible card type
 *   if (event.cards.length === 1) {
 *     hostedFields.setPlaceholder('cvv', event.cards[0].code.name, function (placeholderErr) {
 *       if (placeholderErr) {
 *         // Handle errors, such as invalid field name
 *         console.error(placeholderErr);
 *       }
 *     });
 *   }
 * });
 * @param {string} field
 * @param {string} placeholder
 * @param {function(!braintree.BraintreeError, ?): void=} callback
 * @return {void}
 */
braintree.HostedFields.prototype.setPlaceholder = function(field, placeholder, callback) {};

/**
 * Clear the value of a {\@link module:braintree-web/hosted-fields~field field}.
 * \@example 
 * hostedFieldsInstance.clear('number', function (clearErr) {
 *   if (clearErr) {
 *     console.error(clearErr);
 *   }
 * });
 * 
 * \@example <caption>Clear several fields</caption>
 * hostedFieldsInstance.clear('number');
 * hostedFieldsInstance.clear('cvv');
 * hostedFieldsInstance.clear('expirationDate');
 * @param {string} field
 * @param {function(!braintree.BraintreeError, ?): void=} callback
 * @return {void}
 */
braintree.HostedFields.prototype.clear = function(field, callback) {};

/**
 * Returns an {\@link HostedFields~stateObject|object} that includes the state of all fields and possible card types.
 * \@example <caption>Check if all fields are valid</caption>
 * var state = hostedFields.getState();
 * 
 * var formValid = Object.keys(state.fields).every(function (key) {
 *   return state.fields[key].isValid;
 * });
 * @return {?}
 */
braintree.HostedFields.prototype.getState = function() {};
/**
 * @record
 * @struct
 */
braintree.PayPalTokenizeReturn = function() {};
 /** @type {function(): ?} */
braintree.PayPalTokenizeReturn.prototype.close;
/**
 * @record
 * @struct
 */
braintree.PayPalShippingAddress = function() {};
 /** @type {string} */
braintree.PayPalShippingAddress.prototype.recipientName;
 /** @type {string} */
braintree.PayPalShippingAddress.prototype.line1;
 /** @type {string} */
braintree.PayPalShippingAddress.prototype.line2;
 /** @type {string} */
braintree.PayPalShippingAddress.prototype.city;
 /** @type {string} */
braintree.PayPalShippingAddress.prototype.state;
 /** @type {string} */
braintree.PayPalShippingAddress.prototype.postalCode;
 /** @type {string} */
braintree.PayPalShippingAddress.prototype.countryCode;
/**
 * @record
 * @struct
 */
braintree.PayPalBillingAddress = function() {};
 /** @type {string} */
braintree.PayPalBillingAddress.prototype.line1;
 /** @type {string} */
braintree.PayPalBillingAddress.prototype.line2;
 /** @type {string} */
braintree.PayPalBillingAddress.prototype.city;
 /** @type {string} */
braintree.PayPalBillingAddress.prototype.state;
 /** @type {string} */
braintree.PayPalBillingAddress.prototype.postalCode;
 /** @type {string} */
braintree.PayPalBillingAddress.prototype.countryCode;
/**
 * @record
 * @struct
 */
braintree.PayPalAccountDetails = function() {};
 /** @type {string} */
braintree.PayPalAccountDetails.prototype.email;
 /** @type {string} */
braintree.PayPalAccountDetails.prototype.payerId;
 /** @type {string} */
braintree.PayPalAccountDetails.prototype.firstName;
 /** @type {string} */
braintree.PayPalAccountDetails.prototype.lastName;
 /** @type {string} */
braintree.PayPalAccountDetails.prototype.countryCode;
 /** @type {string} */
braintree.PayPalAccountDetails.prototype.phone;
 /** @type {!braintree.PayPalShippingAddress} */
braintree.PayPalAccountDetails.prototype.shippingAddress;
 /** @type {!braintree.PayPalBillingAddress} */
braintree.PayPalAccountDetails.prototype.billingAddress;
/**
 * @record
 * @struct
 */
braintree.PayPalTokenizePayload = function() {};
 /** @type {string} */
braintree.PayPalTokenizePayload.prototype.nonce;
 /** @type {string} */
braintree.PayPalTokenizePayload.prototype.type;
 /** @type {!braintree.PayPalAccountDetails} */
braintree.PayPalTokenizePayload.prototype.details;
/**
 * @record
 * @struct
 */
braintree.PayPal = function() {};
 /** @type {function({client: !braintree.Client}, function(!braintree.BraintreeError, ?): void): void} */
braintree.PayPal.prototype.create;
 /** @type {string} */
braintree.PayPal.prototype.VERSION;

/**
 * Launches the PayPal login flow and returns a nonce payload. Only one PayPal login flow should be active at a time. One way to achieve this is to disable your PayPal button while the flow is open.
 * Checkout flows only.
 * * `authorize` - Submits the transaction for authorization but not settlement.
 * * `sale` - Payment will be immediately submitted for settlement upon creating a transaction.
 * Changes the call-to-action in the PayPal flow. By default the final button will show the localized
 * word for "Continue" and implies that the final amount billed is not yet known.
 * 
 * Setting this option to `commit` changes the button text to "Pay Now" and page text will convey to
 * the user that billing will take place immediately.
 * 
 * Supported locales are:
 * `da_DK`,
 * `de_DE`,
 * `en_AU`,
 * `en_GB`,
 * `en_US`,
 * `es_ES`,
 * `fr_CA`,
 * `fr_FR`,
 * `id_ID`,
 * `it_IT`,
 * `ja_JP`,
 * `ko_KR`,
 * `nl_NL`,
 * `no_NO`,
 * `pl_PL`,
 * `pt_BR`,
 * `pt_PT`,
 * `ru_RU`,
 * `sv_SE`,
 * `th_TH`,
 * `zh_CN`,
 * `zh_HK`,
 * and `zh_TW`.
 * 
 * \@example 
 * button.addEventListener('click', function () {
 *   // Disable the button so that we don't attempt to open multiple popups.
 *   button.setAttribute('disabled', 'disabled');
 * 
 *   // Because PayPal tokenization opens a popup, this must be called
 *   // as a result of a user action, such as a button click.
 *   paypalInstance.tokenize({
 *     flow: 'vault' // Required
 *     // Any other tokenization options
 *   }, function (tokenizeErr, payload) {
 *     button.removeAttribute('disabled');
 * 
 *     if (tokenizeErr) {
 *       // Handle tokenization errors or premature flow closure
 * 
 *       switch (tokenizeErr.code) {
 *         case 'PAYPAL_POPUP_CLOSED':
 *           console.error('Customer closed PayPal popup.');
 *           break;
 *         case 'PAYPAL_ACCOUNT_TOKENIZATION_FAILED':
 *           console.error('PayPal tokenization failed. See details:', tokenizeErr.details);
 *           break;
 *         case 'PAYPAL_FLOW_FAILED':
 *           console.error('Unable to initialize PayPal flow. Are your options correct?', tokenizeErr.details);
 *           break;
 *         default:
 *           console.error('Error!', tokenizeErr);
 *       }
 *     } else {
 *       // Submit payload.nonce to your server
 *     }
 *   });
 * });
 * @param {{flow: string, intent: string, offerCredit: boolean, useraction: string, amount: (string|number), currency: string, displayName: string, locale: string, enableShippingAddress: boolean, shippingAddressOverride: !braintree.PayPalShippingAddress, shippingAddressEditable: boolean, billingAgreementDescription: string}} options
 * @param {function(!braintree.BraintreeError, ?): void} callback
 * @return {!braintree.PayPalTokenizeReturn}
 */
braintree.PayPal.prototype.tokenize = function(options, callback) {};

/**
 * Cleanly tear down anything set up by {\@link module:braintree-web/paypal.create|create}.
 * @param {function(): void=} callback
 * @return {void}
 */
braintree.PayPal.prototype.teardown = function(callback) {};
/**
 * @record
 * @struct
 */
braintree.ThreeDSecureAccountDetails = function() {};
 /** @type {string} */
braintree.ThreeDSecureAccountDetails.prototype.cardType;
 /** @type {string} */
braintree.ThreeDSecureAccountDetails.prototype.lastTwo;
/**
 * @record
 * @struct
 */
braintree.ThreeDSecureVerifyPayload = function() {};
 /** @type {string} */
braintree.ThreeDSecureVerifyPayload.prototype.nonce;
 /** @type {!braintree.ThreeDSecureAccountDetails} */
braintree.ThreeDSecureVerifyPayload.prototype.details;
 /** @type {string} */
braintree.ThreeDSecureVerifyPayload.prototype.description;
 /** @type {boolean} */
braintree.ThreeDSecureVerifyPayload.prototype.liabilityShiftPossible;
 /** @type {boolean} */
braintree.ThreeDSecureVerifyPayload.prototype.liabilityShifted;
/**
 * @record
 * @struct
 */
braintree.ThreeDSecure = function() {};
 /** @type {function({client: !braintree.Client}, function(!braintree.BraintreeError, ?): void): void} */
braintree.ThreeDSecure.prototype.create;
 /** @type {string} */
braintree.ThreeDSecure.prototype.VERSION;
 /** @type {function(!braintree.BraintreeError, !HTMLIFrameElement): void} */
braintree.ThreeDSecure.prototype.addFrameCallback;
 /** @type {function(): void} */
braintree.ThreeDSecure.prototype.removeFrameCallback;

/**
 * Launch the 3D Secure login flow, returning a nonce payload.
 * \@example 
 * <caption>Verifying an existing nonce with 3DS</caption>
 * var my3DSContainer;
 * 
 * threeDSecure.verifyCard({
 *   nonce: existingNonce,
 *   amount: 123.45,
 *   addFrame: function (err, iframe) {
 *     // Set up your UI and add the iframe.
 *     my3DSContainer = document.createElement('div');
 *     my3DSContainer.appendChild(iframe);
 *     document.body.appendChild(my3DSContainer);
 *   },
 *   removeFrame: function () {
 *     // Remove UI that you added in addFrame.
 *     document.body.removeChild(my3DSContainer);
 *   }
 * }, function (err, payload) {
 *   if (err) {
 *     console.error(err);
 *     return;
 *   }
 * 
 *   if (payload.liabilityShifted) {
 *     // Liablity has shifted
 *     submitNonceToServer(payload.nonce);
 *   } else if (payload.liabilityShiftPossible) {
 *     // Liablity may still be shifted
 *     // Decide if you want to submit the nonce
 *   } else {
 *     // Liablity has not shifted and will not shift
 *     // Decide if you want to submit the nonce
 *   }
 * });
 * @param {{nonce: string, amount: number, addFrame: function(!braintree.BraintreeError, !HTMLIFrameElement): void, removeFrame: function(): void}} options
 * @param {function(!braintree.BraintreeError, ?): void} callback
 * @return {void}
 */
braintree.ThreeDSecure.prototype.verifyCard = function(options, callback) {};

/**
 * Cancel the 3DS flow and return the verification payload if available.
 * \@example 
 * threeDSecure.cancelVerifyCard(function (err, verifyPayload) {
 *   if (err) {
 *     // Handle error
 *     console.log(err.message); // No verification payload available
 *     return;
 *   }
 * 
 *   verifyPayload.nonce; // The nonce returned from the 3ds lookup call
 *   verifyPayload.liabilityShifted; // boolean
 *   verifyPayload.liabilityShiftPossible; // boolean
 * });
 * @param {function(!braintree.BraintreeError, ?): void} callback
 * @return {void}
 */
braintree.ThreeDSecure.prototype.cancelVerifyCard = function(callback) {};

/**
 * Cleanly tear down anything set up by {\@link module:braintree-web/three-d-secure.create|create}
 * @param {function(!braintree.BraintreeError, ?): void=} callback
 * @return {void}
 */
braintree.ThreeDSecure.prototype.teardown = function(callback) {};
/**
 * @record
 * @struct
 */
braintree.UnionPayAccountDetails = function() {};
 /** @type {string} */
braintree.UnionPayAccountDetails.prototype.cardType;
 /** @type {string} */
braintree.UnionPayAccountDetails.prototype.lastTwo;
 /** @type {string} */
braintree.UnionPayAccountDetails.prototype.description;
/**
 * @record
 * @struct
 */
braintree.UnionPayTokenizePayload = function() {};
 /** @type {string} */
braintree.UnionPayTokenizePayload.prototype.nonce;
 /** @type {string} */
braintree.UnionPayTokenizePayload.prototype.type;
 /** @type {!braintree.UnionPayAccountDetails} */
braintree.UnionPayTokenizePayload.prototype.details;
/**
 * @record
 * @struct
 */
braintree.UnionPayEnrollPayload = function() {};
 /** @type {string} */
braintree.UnionPayEnrollPayload.prototype.enrollmentId;
 /** @type {boolean} */
braintree.UnionPayEnrollPayload.prototype.smsCodeRequired;
/**
 * @record
 * @struct
 */
braintree.UnionPayProperties = function() {};
 /** @type {boolean} */
braintree.UnionPayProperties.prototype.supportsTwoStepAuthAndCapture;
 /** @type {boolean} */
braintree.UnionPayProperties.prototype.isSupported;
/**
 * @record
 * @struct
 */
braintree.UnionPayFetchCapabilitiesPayload = function() {};
 /** @type {boolean} */
braintree.UnionPayFetchCapabilitiesPayload.prototype.isUnionPay;
 /** @type {boolean} */
braintree.UnionPayFetchCapabilitiesPayload.prototype.isDebit;
 /** @type {!braintree.UnionPayProperties} */
braintree.UnionPayFetchCapabilitiesPayload.prototype.unionPay;
/**
 * @record
 * @struct
 */
braintree.UnionPay = function() {};
 /** @type {function({client: !braintree.Client}, function(!braintree.BraintreeError, ?): void): void} */
braintree.UnionPay.prototype.create;
 /** @type {string} */
braintree.UnionPay.prototype.VERSION;

/**
 * Fetches the capabilities of a card, including whether or not the SMS enrollment process is required.
 * \@example <caption>With raw card data</caption>
 * unionpayInstance.fetchCapabilities({
 *   card: {
 *     number: '4111111111111111'
 *   }
 * }, function (fetchErr, cardCapabilities) {
 *   if (fetchErr) {
 *     console.error(fetchErr);
 *     return;
 *   }
 * 
 *   if (cardCapabilities.isUnionPay) {
 *     if (cardCapabilities.unionPay && !cardCapabilities.unionPay.isSupported) {
 *       // Braintree cannot process this UnionPay card.
 *       // Ask the user for a different card.
 *       return;
 *     }
 * 
 *     if (cardCapabilities.isDebit) {
 *       // CVV and expiration date are not required
 *     } else {
 *       // CVV and expiration date are required
 *     }
 * 
 *     // Show mobile phone number field for enrollment
 *   }
 * });
 * \@example <caption>With Hosted Fields</caption>
 * // Fetch capabilities on `blur` inside of the Hosted Fields `create` callback
 * hostedFieldsInstance.on('blur', function (event) {
 *   // Only attempt to fetch capabilities when a valid card number has been entered
 *   if (event.emittedBy === 'number' && event.fields.number.isValid) {
 *     unionpayInstance.fetchCapabilities({
 *       hostedFields: hostedFieldsInstance
 *     }, function (fetchErr, cardCapabilities) {
 *       if (fetchErr) {
 *         console.error(fetchErr);
 *         return;
 *       }
 * 
 *       if (cardCapabilities.isUnionPay) {
 *         if (cardCapabilities.unionPay && !cardCapabilities.unionPay.isSupported) {
 *           // Braintree cannot process this UnionPay card.
 *           // Ask the user for a different card.
 *           return;
 *         }
 *         if (cardCapabilities.isDebit) {
 *           // CVV and expiration date are not required
 *           // Hide the containers with your `cvv` and `expirationDate` fields
 *         } else {
 *           // CVV and expiration date are required
 *         }
 *       } else {
 *         // Not a UnionPay card
 *         // When form is complete, tokenize using your Hosted Fields instance
 *       }
 * 
 *       // Show your own mobile country code and phone number inputs for enrollment
 *     });
 *   });
 * });
 * @param {{card: ?, hostedFields: !braintree.HostedFields}} options
 * @param {function(!braintree.BraintreeError, ?): void} callback
 * @return {void}
 */
braintree.UnionPay.prototype.fetchCapabilities = function(options, callback) {};

/**
 * Enrolls a UnionPay card. Use {\@link UnionPay#fetchCapabilities|fetchCapabilities} to determine if the SMS enrollment process is required.
 * \@example <caption>With raw card data</caption>
 * unionpayInstance.enroll({
 *   card: {
 *     number: '4111111111111111',
 *     expirationMonth: '12',
 *     expirationYear: '2038'
 *   },
 *   mobile: {
 *     countryCode: '62',
 *     number: '111111111111'
 *   }
 * }, function (enrollErr, response) {
 *   if (enrollErr) {
 *      console.error(enrollErr);
 *      return;
 *   }
 * 
 *   if (response.smsCodeRequired) {
 *     // If smsCodeRequired, wait for SMS auth code from customer
 *     // Then use response.enrollmentId during {\@link UnionPay#tokenize}
 *   } else {
 *     // SMS code is not required from the user.
 *     // {\@link UnionPay#tokenize} can be called immediately
 * });
 * \@example <caption>With Hosted Fields</caption>
 * unionpayInstance.enroll({
 *   hostedFields: hostedFields,
 *   mobile: {
 *     countryCode: '62',
 *     number: '111111111111'
 *   }
 * }, function (enrollErr, response) {
 *   if (enrollErr) {
 *     console.error(enrollErr);
 *     return;
 *   }
 * 
 *   if (response.smsCodeRequired) {
 *     // If smsCodeRequired, wait for SMS auth code from customer
 *     // Then use response.enrollmentId during {\@link UnionPay#tokenize}
 *   } else {
 *     // SMS code is not required from the user.
 *     // {\@link UnionPay#tokenize} can be called immediately
 *   }
 * });
 * @param {{card: ?, hostedFields: !braintree.HostedFields, mobile: ?}} options
 * @param {function(!braintree.BraintreeError, ?): void} callback
 * @return {void}
 */
braintree.UnionPay.prototype.enroll = function(options, callback) {};

/**
 * Tokenizes a UnionPay card and returns a nonce payload.
 * \@example <caption>With raw card data</caption>
 * unionpayInstance.tokenize({
 *   card: {
 *     number: '4111111111111111',
 *     expirationMonth: '12',
 *     expirationYear: '2038',
 *     cvv: '123'
 *   },
 *   enrollmentId: enrollResponse.enrollmentId, // Returned from enroll
 *   smsCode: '11111' // Received by customer's phone, if SMS enrollment was required. Otherwise it should be omitted
 * }, function (tokenizeErr, response) {
 *   if (tokenizeErr) {
 *     console.error(tokenizeErr);
 *     return;
 *   }
 * 
 *   // Send response.nonce to your server
 * });
 * \@example <caption>With Hosted Fields</caption>
 * unionpayInstance.tokenize({
 *   hostedFields: hostedFieldsInstance,
 *   enrollmentId: enrollResponse.enrollmentId, // Returned from enroll
 *   smsCode: '11111' // Received by customer's phone, if SMS enrollment was required. Otherwise it should be omitted
 * }, function (tokenizeErr, response) {
 *   if (tokenizeErr) {
 *     console.error(tokenizeErr);
 *     return;
 *   }
 * 
 *   // Send response.nonce to your server
 * });
 * @param {{card: ?, hostedFields: !braintree.HostedFields, enrollmentId: string, smsCode: string}} options
 * @param {function(!braintree.BraintreeError, ?): void} callback
 * @return {void}
 */
braintree.UnionPay.prototype.tokenize = function(options, callback) {};

/**
 * Cleanly tear down anything set up by {\@link module:braintree-web/unionpay.create|create}. This only needs to be called when using UnionPay with Hosted Fields.
 * \@example 
 * unionpayInstance.teardown(function (teardownErr) {
 *   if (teardownErr) {
 *     console.error('Could not tear down UnionPay.');
 *   } else {
 *     console.log('UnionPay has been torn down.');
 *   }
 * });
 * @param {function(!braintree.BraintreeError, ?): void=} callback
 * @return {void}
 */
braintree.UnionPay.prototype.teardown = function(callback) {};
/**
 * @record
 * @struct
 */
braintree.USBankAccount = function() {};
 /** @type {function({client: !braintree.Client}, function(!braintree.BraintreeError, ?): void): void} */
braintree.USBankAccount.prototype.create;
 /** @type {string} */
braintree.USBankAccount.prototype.VERSION;

/**
 * Tokenizes bank information to return a payment method nonce. You can tokenize bank details by providing information like account and routing numbers. You can also tokenize with a bank login UI that prompts the customer to log into their bank account.
 * \@example 
 * <caption>Tokenizing raw bank details</caption>
 * submitButton.addEventListener('click', function (event) {
 *   var routingNumberInput = document.querySelector('input#routing-number');
 *   var accountNumberInput = document.querySelector('input#account-number');
 *   var accountHolderNameInput = document.querySelector('input#account-holder-name');
 *   var accountTypeInput = document.querySelector('input[name="account-type"]:checked');
 *   var billingAddressStreetInput = document.querySelector('input#street-address');
 *   var billingAddressExtendedInput = document.querySelector('input#extended-address');
 *   var billingAddressLocalityInput = document.querySelector('input#locality');
 *   var billingAddressRegionSelect = document.querySelector('select#region');
 *   var billingAddressPostalInput = document.querySelector('input#postal-code');
 * 
 *   event.preventDefault();
 * 
 *   usBankAccountInstance.tokenize({
 *     bankDetails: {
 *       routingNumber: routingNumberInput.value,
 *       accountNumber: accountNumberInput.value,
 *       accountHolderName: accountHolderNameInput.value,
 *       accountType: accountTypeInput.value,
 *       billingAddress: {
 *         streetAddress: billingAddressStreetInput.value,
 *         extendedAddress: billingAddressExtendedInput.value,
 *         locality: billingAddressLocalityInput.value,
 *         region: billingAddressRegionSelect.value,
 *         postalCode: billingAddressPostalInput.value
 *       }
 *     },
 *     mandateText: 'I authorize Braintree to debit my bank account on behalf of My Online Store.'
 *   }, function (tokenizeErr, tokenizedPayload) {
 *     if (tokenizeErr) {
 *       console.error('There was an error tokenizing the bank details.');
 *       return;
 *     }
 * 
 *     // Send tokenizePayload.nonce to your server here!
 *   });
 * });
 * \@example 
 * <caption>Tokenizing with bank login UI</caption>
 * bankLoginButton.addEventListener('click', function (event) {
 *   event.preventDefault();
 * 
 *   usBankAccountInstance.tokenize({
 *     bankLogin: {
 *       displayName: 'My Online Store'
 *     },
 *     mandateText: 'I authorize Braintree to debit my bank account on behalf of My Online Store.'
 *   }, function (tokenizeErr, tokenizedPayload) {
 *     if (tokenizeErr) {
 *       console.error('There was an error tokenizing the bank details.');
 *       return;
 *     }
 * 
 *     // Send tokenizePayload.nonce to your server here!
 *   });
 * });
 * @param {{mandateText: string, bankDetails: ?, bankLogin: ?}} options
 * @param {function(!braintree.BraintreeError, ?): void} callback
 * @return {void}
 */
braintree.USBankAccount.prototype.tokenize = function(options, callback) {};

/**
 * Cleanly tear down anything set up by {\@link module:braintree-web/us-bank-account.create|create}.
 * @param {function(!braintree.BraintreeError, ?): void=} callback
 * @return {void}
 */
braintree.USBankAccount.prototype.teardown = function(callback) {};
/** @const */
braintree.BraintreeError = {};

/** @typedef {string} */
braintree.BraintreeError.Types;
 /** @type {string} */
braintree.BraintreeError.prototype.code;
 /** @type {string} */
braintree.BraintreeError.prototype.message;
 /** @type {string} */
braintree.BraintreeError.prototype.type;
 /** @type {?} */
braintree.BraintreeError.prototype.details;

/** @typedef {function(!braintree.BraintreeError, ?): void} */
braintree.callback;
 /** @type {!braintree.Client} */
braintree.client;
 /** @type {!braintree.PayPal} */
braintree.paypal;
 /** @type {!braintree.HostedFields} */
braintree.hostedFields;
 /** @type {!braintree.ThreeDSecure} */
braintree.threeDSecure;
 /** @type {!braintree.DataCollector} */
braintree.dataCollector;
 /** @type {!braintree.AmericanExpress} */
braintree.americanExpress;
 /** @type {!braintree.UnionPay} */
braintree.unionpay;
 /** @type {!braintree.ApplePay} */
braintree.applePay;
 /** @type {!braintree.USBankAccount} */
braintree.usBankAccount;
 /** @type {string} */
braintree.VERSION;

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
