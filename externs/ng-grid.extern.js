/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/ng-grid/index.d.ts:

/**
 * @constructor
 * @struct
 */
function ngGridReorderable() {}
 /** @type {!ngGrid.IStyleProviderStatic} */
var ngStyleProvider;
 /** @type {!ngGrid.ISearchProviderStatic} */
var ngSearchProvider;
 /** @type {!ngGrid.ISelectionProviderStatic} */
var ngSelectionProvider;
 /** @type {!ngGrid.IEventProviderStatic} */
var ngEventProvider;
 /** @type {!ngGrid.IAggregateStatic} */
var ngAggregate;
 /** @type {!ngGrid.IRenderedRangeStatic} */
var ngRenderedRange;
 /** @type {!ngGrid.IDimensionStatic} */
var ngDimension;
 /** @type {!ngGrid.IRowStatic} */
var ngRow;
 /** @type {!ngGrid.IColumnStatic} */
var ngColumn;
 /** @type {!ngGrid.IFooterStatic} */
var ngFooter;
/** @const */
var ngGrid = {};
/**
 * @record
 * @struct
 */
ngGrid.IDomAccessProvider = function() {};
 /** @type {!ngGrid.IColumn} */
ngGrid.IDomAccessProvider.prototype.previousColumn;
 /** @type {!ngGrid.IGridInstance} */
ngGrid.IDomAccessProvider.prototype.grid;

/**
 * @param {!angular.IAugmentedJQuery} elm
 * @param {string} value
 * @return {void}
 */
ngGrid.IDomAccessProvider.prototype.changeUserSelect = function(elm, value) {};

/**
 * @param {!ngGrid.IGridScope} $scope
 * @param {number} index
 * @return {void}
 */
ngGrid.IDomAccessProvider.prototype.focusCellElement = function($scope, index) {};

/**
 * @param {!ngGrid.IGridScope} $scope
 * @param {!angular.IAugmentedJQuery} elm
 * @return {void}
 */
ngGrid.IDomAccessProvider.prototype.selectionHandlers = function($scope, elm) {};
/**
 * @record
 * @struct
 */
ngGrid.IStyleProviderStatic = function() {};

/* TODO: ConstructSignature: ngGrid */
/**
 * @record
 * @struct
 */
ngGrid.IStyleProvider = function() {};
/**
 * @record
 * @struct
 */
ngGrid.ISearchProviderStatic = function() {};

/* TODO: ConstructSignature: ngGrid */
/**
 * @record
 * @struct
 */
ngGrid.ISearchProvider = function() {};
 /** @type {?} */
ngGrid.ISearchProvider.prototype.fieldMap;
 /** @type {boolean} */
ngGrid.ISearchProvider.prototype.extFilter;

/**
 * @return {void}
 */
ngGrid.ISearchProvider.prototype.evalFilter = function() {};
/**
 * @record
 * @struct
 */
ngGrid.ISelectionProviderStatic = function() {};

/* TODO: ConstructSignature: ngGrid */
/**
 * @record
 * @struct
 */
ngGrid.ISelectionProvider = function() {};
 /** @type {boolean} */
ngGrid.ISelectionProvider.prototype.multi;
 /** @type {!Array<?>} */
ngGrid.ISelectionProvider.prototype.selectedItems;
 /** @type {number} */
ngGrid.ISelectionProvider.prototype.selectedIndex;
 /** @type {?} */
ngGrid.ISelectionProvider.prototype.lastClickedRow;
 /** @type {boolean} */
ngGrid.ISelectionProvider.prototype.ignoreSelectedItemChanges;
 /** @type {!angular.ICompiledExpression} */
ngGrid.ISelectionProvider.prototype.pKeyParser;

/**
 * @param {?} rowItem
 * @param {?} event
 * @return {void}
 */
ngGrid.ISelectionProvider.prototype.ChangeSelection = function(rowItem, event) {};

/**
 * @param {?} entity
 * @return {number}
 */
ngGrid.ISelectionProvider.prototype.getSelection = function(entity) {};

/**
 * @param {?} entity
 * @return {number}
 */
ngGrid.ISelectionProvider.prototype.getSelectionIndex = function(entity) {};

/**
 * @param {!ngGrid.IRow} rowItem
 * @param {boolean} isSelected
 * @return {void}
 */
ngGrid.ISelectionProvider.prototype.setSelection = function(rowItem, isSelected) {};

/**
 * @param {boolean} checkAll
 * @param {boolean} bypass
 * @param {boolean} selectFiltered
 * @return {void}
 */
ngGrid.ISelectionProvider.prototype.toggleSelectAll = function(checkAll, bypass, selectFiltered) {};
/**
 * @record
 * @struct
 */
ngGrid.IEventProviderStatic = function() {};

/* TODO: ConstructSignature: ngGrid */
/**
 * @record
 * @struct
 */
ngGrid.IEventProvider = function() {};
 /** @type {!ngGrid.IColumn} */
ngGrid.IEventProvider.prototype.colToMove;
 /** @type {?} */
ngGrid.IEventProvider.prototype.groupToMove;

/**
 * @return {void}
 */
ngGrid.IEventProvider.prototype.assignEvents = function() {};

/**
 * @return {void}
 */
ngGrid.IEventProvider.prototype.assignGridEventHandlers = function() {};

/**
 * @param {?} event
 * @return {void}
 */
ngGrid.IEventProvider.prototype.dragStart = function(event) {};

/**
 * @param {?} event
 * @return {void}
 */
ngGrid.IEventProvider.prototype.dragOver = function(event) {};

/**
 * @return {void}
 */
ngGrid.IEventProvider.prototype.setDraggables = function() {};

/**
 * @param {?} event
 * @return {void}
 */
ngGrid.IEventProvider.prototype.onGroupMouseDown = function(event) {};

/**
 * @param {?} event
 * @return {void}
 */
ngGrid.IEventProvider.prototype.onGroupDrop = function(event) {};

/**
 * @param {?} event
 * @return {void}
 */
ngGrid.IEventProvider.prototype.onHeaderMouseDown = function(event) {};

/**
 * @param {?} event
 * @return {void}
 */
ngGrid.IEventProvider.prototype.onHeaderDrop = function(event) {};
/**
 * @record
 * @struct
 */
ngGrid.IAggregateStatic = function() {};

/* TODO: ConstructSignature: ngGrid */
/**
 * @record
 * @struct
 */
ngGrid.IAggregate = function() {};
 /** @type {number} */
ngGrid.IAggregate.prototype.rowIndex;
 /** @type {number} */
ngGrid.IAggregate.prototype.offsetTop;
 /** @type {?} */
ngGrid.IAggregate.prototype.entity;
 /** @type {string} */
ngGrid.IAggregate.prototype.label;
 /** @type {string} */
ngGrid.IAggregate.prototype.field;
 /** @type {number} */
ngGrid.IAggregate.prototype.depth;
 /** @type {?} */
ngGrid.IAggregate.prototype.parent;
 /** @type {!Array<?>} */
ngGrid.IAggregate.prototype.children;
 /** @type {!Array<?>} */
ngGrid.IAggregate.prototype.aggChildren;
 /** @type {number} */
ngGrid.IAggregate.prototype.aggIndex;
 /** @type {boolean} */
ngGrid.IAggregate.prototype.collapsed;
 /** @type {boolean} */
ngGrid.IAggregate.prototype.groupInitState;
 /** @type {!ngGrid.IRowFactory} */
ngGrid.IAggregate.prototype.rowFactory;
 /** @type {number} */
ngGrid.IAggregate.prototype.rowHeight;
 /** @type {boolean} */
ngGrid.IAggregate.prototype.isAggRow;
 /** @type {number} */
ngGrid.IAggregate.prototype.offsetLeft;
 /** @type {?} */
ngGrid.IAggregate.prototype.aggLabelFilter;
/**
 * @record
 * @struct
 */
ngGrid.IRowConfig = function() {};
 /** @type {boolean} */
ngGrid.IRowConfig.prototype.enableCellSelection;
 /** @type {boolean} */
ngGrid.IRowConfig.prototype.enableRowSelection;
 /** @type {boolean} */
ngGrid.IRowConfig.prototype.jqueryUITheme;
 /** @type {!Array<string>} */
ngGrid.IRowConfig.prototype.rowClasses;
 /** @type {number} */
ngGrid.IRowConfig.prototype.rowHeight;
 /** @type {boolean} */
ngGrid.IRowConfig.prototype.selectWithCheckboxOnly;
 /** @type {!Array<?>} */
ngGrid.IRowConfig.prototype.selectedItems;

/**
 * @return {void}
 */
ngGrid.IRowConfig.prototype.afterSelectionChangeCallback = function() {};

/**
 * @return {void}
 */
ngGrid.IRowConfig.prototype.beforeSelectionChangeCallback = function() {};
/**
 * @record
 * @struct
 */
ngGrid.IRenderedRangeStatic = function() {};

/* TODO: ConstructSignature: ngGrid */
/**
 * @record
 * @struct
 */
ngGrid.IRenderedRange = function() {};
 /** @type {number} */
ngGrid.IRenderedRange.prototype.bottomRow;
 /** @type {number} */
ngGrid.IRenderedRange.prototype.topRow;
/**
 * @record
 * @struct
 */
ngGrid.IRowFactory = function() {};
 /** @type {?} */
ngGrid.IRowFactory.prototype.aggCache;
 /** @type {boolean} */
ngGrid.IRowFactory.prototype.dataChanged;
 /** @type {?} */
ngGrid.IRowFactory.prototype.groupedData;
 /** @type {number} */
ngGrid.IRowFactory.prototype.numberOfAggregates;
 /** @type {!Array<?>} */
ngGrid.IRowFactory.prototype.parentCache;
 /** @type {!Array<?>} */
ngGrid.IRowFactory.prototype.parsedData;
 /** @type {!ngGrid.IRenderedRange} */
ngGrid.IRowFactory.prototype.renderedRange;
 /** @type {!ngGrid.IRowConfig} */
ngGrid.IRowFactory.prototype.rowConfig;
 /** @type {number} */
ngGrid.IRowFactory.prototype.rowHeight;
 /** @type {!ngGrid.ISelectionProvider} */
ngGrid.IRowFactory.prototype.selectionProvider;

/**
 * @param {!ngGrid.IRenderedRange} newRange
 * @return {void}
 */
ngGrid.IRowFactory.prototype.UpdateViewableRange = function(newRange) {};

/**
 * @param {?} aggEntity
 * @param {number} rowIndex
 * @return {!ngGrid.IAggregate}
 */
ngGrid.IRowFactory.prototype.buildAggregateRow = function(aggEntity, rowIndex) {};

/**
 * @param {?} entity
 * @param {number} rowIndex
 * @return {!ngGrid.IRow}
 */
ngGrid.IRowFactory.prototype.buildEntityRow = function(entity, rowIndex) {};

/**
 * @return {void}
 */
ngGrid.IRowFactory.prototype.filteredRowsChanged = function() {};

/**
 * @return {void}
 */
ngGrid.IRowFactory.prototype.fixRowCache = function() {};

/**
 * @param {?} groups
 * @return {void}
 */
ngGrid.IRowFactory.prototype.getGrouping = function(groups) {};

/**
 * @param {?} groupData
 * @return {void}
 */
ngGrid.IRowFactory.prototype.parseGroupData = function(groupData) {};

/**
 * @return {void}
 */
ngGrid.IRowFactory.prototype.renderedChange = function() {};

/**
 * @return {void}
 */
ngGrid.IRowFactory.prototype.renderedChangeNoGroups = function() {};
/**
 * @record
 * @struct
 */
ngGrid.IDimensionStatic = function() {};

/* TODO: ConstructSignature: ngGrid */
/**
 * @record
 * @struct
 */
ngGrid.IDimension = function() {};
 /** @type {number} */
ngGrid.IDimension.prototype.outerHeight;
 /** @type {number} */
ngGrid.IDimension.prototype.outerWidth;
 /** @type {boolean} */
ngGrid.IDimension.prototype.autoFitHeight;
/**
 * @record
 * @struct
 */
ngGrid.IElementDimension = function() {};
 /** @type {number} */
ngGrid.IElementDimension.prototype.rootMaxH;
 /** @type {number} */
ngGrid.IElementDimension.prototype.rootMaxW;
 /** @type {number} */
ngGrid.IElementDimension.prototype.rowIndexCellW;
 /** @type {number} */
ngGrid.IElementDimension.prototype.rowSelectedCellW;
 /** @type {number} */
ngGrid.IElementDimension.prototype.scrollH;
 /** @type {number} */
ngGrid.IElementDimension.prototype.scrollW;
/**
 * @record
 * @struct
 */
ngGrid.IRowStatic = function() {};

/* TODO: ConstructSignature: ngGrid */
/**
 * @record
 * @struct
 */
ngGrid.IRow = function() {};
 /** @type {?} */
ngGrid.IRow.prototype.entity;
 /** @type {!ngGrid.IRowConfig} */
ngGrid.IRow.prototype.config;
 /** @type {!ngGrid.ISelectionProvider} */
ngGrid.IRow.prototype.selectionProvider;
 /** @type {number} */
ngGrid.IRow.prototype.rowIndex;
 /** @type {?} */
ngGrid.IRow.prototype.utils;
 /** @type {boolean} */
ngGrid.IRow.prototype.selected;
 /** @type {string} */
ngGrid.IRow.prototype.cursor;
 /** @type {number} */
ngGrid.IRow.prototype.offsetTop;
 /** @type {number} */
ngGrid.IRow.prototype.rowDisplayIndex;

/**
 * @return {void}
 */
ngGrid.IRow.prototype.afterSelectionChange = function() {};

/**
 * @return {void}
 */
ngGrid.IRow.prototype.beforeSelectionChange = function() {};

/**
 * @param {boolean} isSelected
 * @return {void}
 */
ngGrid.IRow.prototype.setSelection = function(isSelected) {};

/**
 * @param {?} event
 * @return {void}
 */
ngGrid.IRow.prototype.continueSelection = function(event) {};

/**
 * @param {?} expected
 * @return {void}
 */
ngGrid.IRow.prototype.ensureEntity = function(expected) {};

/**
 * @param {?} event
 * @return {boolean}
 */
ngGrid.IRow.prototype.toggleSelected = function(event) {};

/**
 * @return {void}
 */
ngGrid.IRow.prototype.alternatingRowClass = function() {};

/**
 * @param {string} path
 * @return {?}
 */
ngGrid.IRow.prototype.getProperty = function(path) {};

/**
 * @return {!ngGrid.IRow}
 */
ngGrid.IRow.prototype.copy = function() {};

/**
 * @param {!ngGrid.IRow} fromRow
 * @return {void}
 */
ngGrid.IRow.prototype.setVars = function(fromRow) {};
/**
 * @record
 * @struct
 */
ngGrid.IColumnStatic = function() {};

/* TODO: ConstructSignature: ngGrid */
/**
 * @record
 * @struct
 */
ngGrid.IColumn = function() {};
 /** @type {!ngGrid.IColumnDef} */
ngGrid.IColumn.prototype.colDef;
 /** @type {number} */
ngGrid.IColumn.prototype.width;
 /** @type {number} */
ngGrid.IColumn.prototype.groupIndex;
 /** @type {boolean} */
ngGrid.IColumn.prototype.isGroupedBy;
 /** @type {number} */
ngGrid.IColumn.prototype.minWidth;
 /** @type {number} */
ngGrid.IColumn.prototype.maxWidth;
 /** @type {boolean} */
ngGrid.IColumn.prototype.enableCellEdit;
 /** @type {?} */
ngGrid.IColumn.prototype.cellEditableCondition;
 /** @type {number} */
ngGrid.IColumn.prototype.headerRowHeight;
 /** @type {string} */
ngGrid.IColumn.prototype.displayName;
 /** @type {number} */
ngGrid.IColumn.prototype.index;
 /** @type {boolean} */
ngGrid.IColumn.prototype.isAggCol;
 /** @type {string} */
ngGrid.IColumn.prototype.cellClass;
 /** @type {number} */
ngGrid.IColumn.prototype.sortPriority;
 /** @type {?} */
ngGrid.IColumn.prototype.cellFilter;
 /** @type {string} */
ngGrid.IColumn.prototype.field;
 /** @type {?} */
ngGrid.IColumn.prototype.aggLabelFilter;
 /** @type {boolean} */
ngGrid.IColumn.prototype.visible;
 /** @type {boolean} */
ngGrid.IColumn.prototype.sortable;
 /** @type {boolean} */
ngGrid.IColumn.prototype.resizable;
 /** @type {boolean} */
ngGrid.IColumn.prototype.pinnable;
 /** @type {boolean} */
ngGrid.IColumn.prototype.pinned;
 /** @type {number} */
ngGrid.IColumn.prototype.originalIndex;
 /** @type {boolean} */
ngGrid.IColumn.prototype.groupable;
 /** @type {string} */
ngGrid.IColumn.prototype.sortDirection;
 /** @type {!Function} */
ngGrid.IColumn.prototype.sortingAlgorithm;
 /** @type {string} */
ngGrid.IColumn.prototype.headerClass;
 /** @type {string} */
ngGrid.IColumn.prototype.cursor;
 /** @type {string} */
ngGrid.IColumn.prototype.headerCellTemplate;
 /** @type {string} */
ngGrid.IColumn.prototype.cellTemplate;

/**
 * @return {string}
 */
ngGrid.IColumn.prototype.groupedByClass = function() {};

/**
 * @return {void}
 */
ngGrid.IColumn.prototype.toggleVisible = function() {};

/**
 * @return {boolean}
 */
ngGrid.IColumn.prototype.showSortButtonUp = function() {};

/**
 * @return {boolean}
 */
ngGrid.IColumn.prototype.showSortButtonDown = function() {};

/**
 * @return {boolean}
 */
ngGrid.IColumn.prototype.noSortVisible = function() {};

/**
 * @param {?} event
 * @return {boolean}
 */
ngGrid.IColumn.prototype.sort = function(event) {};

/**
 * @return {?}
 */
ngGrid.IColumn.prototype.gripClick = function() {};

/**
 * @param {?} event
 * @return {?}
 */
ngGrid.IColumn.prototype.gripOnMouseDown = function(event) {};

/**
 * @param {?} event
 * @return {void}
 */
ngGrid.IColumn.prototype.onMouseMove = function(event) {};

/**
 * @param {?} event
 * @return {void}
 */
ngGrid.IColumn.prototype.gripOnMouseUp = function(event) {};

/**
 * @return {!ngGrid.IColumn}
 */
ngGrid.IColumn.prototype.copy = function() {};

/**
 * @param {!ngGrid.IColumn} fromCol
 * @return {void}
 */
ngGrid.IColumn.prototype.setVars = function(fromCol) {};
/**
 * @extends {angular.IScope}
 * @record
 * @struct
 */
ngGrid.IGridScope = function() {};
 /** @type {boolean} */
ngGrid.IGridScope.prototype.elementsNeedMeasuring;
 /** @type {!Array<?>} */
ngGrid.IGridScope.prototype.columns;
 /** @type {!Array<?>} */
ngGrid.IGridScope.prototype.renderedRows;
 /** @type {!Array<?>} */
ngGrid.IGridScope.prototype.renderedColumns;
 /** @type {?} */
ngGrid.IGridScope.prototype.headerRow;
 /** @type {number} */
ngGrid.IGridScope.prototype.rowHeight;
 /** @type {?} */
ngGrid.IGridScope.prototype.jqueryUITheme;
 /** @type {boolean} */
ngGrid.IGridScope.prototype.showSelectionCheckbox;
 /** @type {boolean} */
ngGrid.IGridScope.prototype.enableCellSelection;
 /** @type {boolean} */
ngGrid.IGridScope.prototype.enableCellEditOnFocus;
 /** @type {!ngGrid.IFooter} */
ngGrid.IGridScope.prototype.footer;
 /** @type {!Array<?>} */
ngGrid.IGridScope.prototype.selectedItems;
 /** @type {boolean} */
ngGrid.IGridScope.prototype.multiSelect;
 /** @type {boolean} */
ngGrid.IGridScope.prototype.showFooter;
 /** @type {number} */
ngGrid.IGridScope.prototype.footerRowHeight;
 /** @type {boolean} */
ngGrid.IGridScope.prototype.showColumnMenu;
 /** @type {boolean} */
ngGrid.IGridScope.prototype.forceSyncScrolling;
 /** @type {boolean} */
ngGrid.IGridScope.prototype.showMenu;
 /** @type {!Array<?>} */
ngGrid.IGridScope.prototype.configGroups;
 /** @type {string} */
ngGrid.IGridScope.prototype.gridId;
 /** @type {boolean} */
ngGrid.IGridScope.prototype.enablePaging;
 /** @type {!ngGrid.IPagingOptions} */
ngGrid.IGridScope.prototype.pagingOptions;
 /** @type {?} */
ngGrid.IGridScope.prototype.i18n;
 /** @type {!ngGrid.ISelectionProvider} */
ngGrid.IGridScope.prototype.selectionProvider;

/**
 * @param {number} scrollLeft
 * @return {void}
 */
ngGrid.IGridScope.prototype.adjustScrollLeft = function(scrollLeft) {};

/**
 * @param {number} scrollTop
 * @param {boolean} force
 * @return {void}
 */
ngGrid.IGridScope.prototype.adjustScrollTop = function(scrollTop, force) {};

/**
 * @return {void}
 */
ngGrid.IGridScope.prototype.toggleShowMenu = function() {};

/**
 * @return {void}
 */
ngGrid.IGridScope.prototype.toggleSelectAll = function() {};

/**
 * @return {number}
 */
ngGrid.IGridScope.prototype.totalFilteredItemsLength = function() {};

/**
 * @return {?}
 */
ngGrid.IGridScope.prototype.showGroupPanel = function() {};

/**
 * @return {number}
 */
ngGrid.IGridScope.prototype.topPanelHeight = function() {};

/**
 * @return {number}
 */
ngGrid.IGridScope.prototype.viewportDimHeight = function() {};

/**
 * @param {!ngGrid.IColumn} col
 * @return {void}
 */
ngGrid.IGridScope.prototype.groupBy = function(col) {};

/**
 * @param {number} index
 * @return {void}
 */
ngGrid.IGridScope.prototype.removeGroup = function(index) {};

/**
 * @param {!ngGrid.IColumn} col
 * @return {void}
 */
ngGrid.IGridScope.prototype.togglePin = function(col) {};

/**
 * @return {number}
 */
ngGrid.IGridScope.prototype.totalRowWidth = function() {};

/**
 * @return {?}
 */
ngGrid.IGridScope.prototype.headerScrollerDim = function() {};
/**
 * @record
 * @struct
 */
ngGrid.IGridInstance = function() {};
 /** @type {!angular.IAugmentedJQuery} */
ngGrid.IGridInstance.prototype.$canvas;
 /** @type {!angular.IAugmentedJQuery} */
ngGrid.IGridInstance.prototype.$viewport;
 /** @type {!angular.IAugmentedJQuery} */
ngGrid.IGridInstance.prototype.$groupPanel;
 /** @type {!angular.IAugmentedJQuery} */
ngGrid.IGridInstance.prototype.$footerPanel;
 /** @type {!angular.IAugmentedJQuery} */
ngGrid.IGridInstance.prototype.$headerScroller;
 /** @type {!angular.IAugmentedJQuery} */
ngGrid.IGridInstance.prototype.$headerContainer;
 /** @type {!angular.IAugmentedJQuery} */
ngGrid.IGridInstance.prototype.$headers;
 /** @type {!angular.IAugmentedJQuery} */
ngGrid.IGridInstance.prototype.$topPanel;
 /** @type {!angular.IAugmentedJQuery} */
ngGrid.IGridInstance.prototype.$root;
 /** @type {!ngGrid.IGridOptions} */
ngGrid.IGridInstance.prototype.config;
 /** @type {?} */
ngGrid.IGridInstance.prototype.data;
 /** @type {!ngGrid.IElementDimension} */
ngGrid.IGridInstance.prototype.elementDims;
 /** @type {!ngGrid.IEventProvider} */
ngGrid.IGridInstance.prototype.eventProvider;
 /** @type {!Array<!ngGrid.IRow>} */
ngGrid.IGridInstance.prototype.filteredRows;
 /** @type {?} */
ngGrid.IGridInstance.prototype.footerController;
 /** @type {string} */
ngGrid.IGridInstance.prototype.gridId;
 /** @type {!Array<!ngGrid.IColumn>} */
ngGrid.IGridInstance.prototype.lastSortedColumns;
 /** @type {boolean} */
ngGrid.IGridInstance.prototype.lateBindColumns;
 /** @type {number} */
ngGrid.IGridInstance.prototype.maxCanvasHt;
 /** @type {number} */
ngGrid.IGridInstance.prototype.prevScrollIndex;
 /** @type {number} */
ngGrid.IGridInstance.prototype.prevScrollTop;
 /** @type {!ngGrid.IDimension} */
ngGrid.IGridInstance.prototype.rootDim;
 /** @type {!Array<!ngGrid.IRow>} */
ngGrid.IGridInstance.prototype.rowCache;
 /** @type {!ngGrid.IRowFactory} */
ngGrid.IGridInstance.prototype.rowFactory;
 /** @type {!Array<!ngGrid.IRow>} */
ngGrid.IGridInstance.prototype.rowMap;
 /** @type {!ngGrid.ISearchProvider} */
ngGrid.IGridInstance.prototype.searchProvider;
 /** @type {!ngGrid.IStyleProvider} */
ngGrid.IGridInstance.prototype.styleProvider;

/**
 * @return {void}
 */
ngGrid.IGridInstance.prototype.buildColumnDefsFromData = function() {};

/**
 * @return {void}
 */
ngGrid.IGridInstance.prototype.buildColumns = function() {};

/**
 * @return {void}
 */
ngGrid.IGridInstance.prototype.calcMaxCanvasHeight = function() {};

/**
 * @return {void}
 */
ngGrid.IGridInstance.prototype.clearSortingData = function() {};

/**
 * @return {void}
 */
ngGrid.IGridInstance.prototype.configureColumnWidths = function() {};

/**
 * @return {void}
 */
ngGrid.IGridInstance.prototype.fixColumnIndexes = function() {};

/**
 * @return {void}
 */
ngGrid.IGridInstance.prototype.fixGroupIndexes = function() {};

/**
 * @param {string} key
 * @return {!angular.IPromise<?>}
 */
ngGrid.IGridInstance.prototype.getTemplate = function(key) {};

/**
 * @return {!angular.IPromise<?>}
 */
ngGrid.IGridInstance.prototype.init = function() {};

/**
 * @return {!angular.IPromise<?>}
 */
ngGrid.IGridInstance.prototype.initTemplates = function() {};

/**
 * @return {void}
 */
ngGrid.IGridInstance.prototype.minRowsToRender = function() {};

/**
 * @return {void}
 */
ngGrid.IGridInstance.prototype.refreshDomSizes = function() {};

/**
 * @param {!ngGrid.IColumn} col
 * @return {void}
 */
ngGrid.IGridInstance.prototype.resizeOnData = function(col) {};

/**
 * @param {!Array<!ngGrid.IRow>} newRows
 * @return {void}
 */
ngGrid.IGridInstance.prototype.setRenderedRows = function(newRows) {};

/**
 * @return {void}
 */
ngGrid.IGridInstance.prototype.sortActual = function() {};

/**
 * @return {void}
 */
ngGrid.IGridInstance.prototype.sortColumnsInit = function() {};

/**
 * @param {!ngGrid.IColumn} col
 * @param {?} event
 * @return {void}
 */
ngGrid.IGridInstance.prototype.sortData = function(col, event) {};
/**
 * @record
 * @struct
 */
ngGrid.IFooterStatic = function() {};

/* TODO: ConstructSignature: ngGrid */
/**
 * @record
 * @struct
 */
ngGrid.IFooter = function() {};
/**
 * @record
 * @struct
 */
ngGrid.IGridOptions = function() {};
 /** @type {string} */
ngGrid.IGridOptions.prototype.aggregateTemplate;
 /** @type {function(!ngGrid.IRow, ?): void} */
ngGrid.IGridOptions.prototype.afterSelectionChange;
 /** @type {function(!ngGrid.IRow, ?): boolean} */
ngGrid.IGridOptions.prototype.beforeSelectionChange;
 /** @type {string} */
ngGrid.IGridOptions.prototype.checkboxCellTemplate;
 /** @type {string} */
ngGrid.IGridOptions.prototype.checkboxHeaderTemplate;
 /** @type {!Array<!ngGrid.IColumnDef>} */
ngGrid.IGridOptions.prototype.columnDefs;
 /** @type {?} */
ngGrid.IGridOptions.prototype.data;
 /** @type {!Function} */
ngGrid.IGridOptions.prototype.dataUpdated;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.enableCellEdit;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.enableCellSelection;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.enableColumnResize;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.enableColumnReordering;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.enableColumnHeavyVirt;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.enablePaging;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.enablePinning;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.enableRowReordering;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.enableRowSelection;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.enableSorting;
 /** @type {?} */
ngGrid.IGridOptions.prototype.excludeProperties;
 /** @type {!ngGrid.IFilterOptions} */
ngGrid.IGridOptions.prototype.filterOptions;
 /** @type {number} */
ngGrid.IGridOptions.prototype.footerRowHeight;
 /** @type {!Array<string>} */
ngGrid.IGridOptions.prototype.groups;
 /** @type {number} */
ngGrid.IGridOptions.prototype.headerRowHeight;
 /** @type {string} */
ngGrid.IGridOptions.prototype.headerRowTemplate;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.jqueryUIDraggable;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.jqueryUITheme;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.keepLastSelected;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.maintainColumnRatios;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.multiSelect;
 /** @type {!ngGrid.IPagingOptions} */
ngGrid.IGridOptions.prototype.pagingOptions;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.pinSelectionCheckbox;
 /** @type {!Array<?>} */
ngGrid.IGridOptions.prototype.plugins;
 /** @type {number} */
ngGrid.IGridOptions.prototype.rowHeight;
 /** @type {string} */
ngGrid.IGridOptions.prototype.rowTemplate;
 /** @type {!Array<?>} */
ngGrid.IGridOptions.prototype.selectedItems;
 /** @type {function(number, boolean): ?} */
ngGrid.IGridOptions.prototype.selectItem;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.selectWithCheckboxOnly;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.showColumnMenu;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.showFilter;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.showFooter;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.showGroupPanel;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.showSelectionCheckbox;
 /** @type {?} */
ngGrid.IGridOptions.prototype.sortInfo;
 /** @type {number} */
ngGrid.IGridOptions.prototype.tabIndex;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.useExternalSorting;
 /** @type {string} */
ngGrid.IGridOptions.prototype.i18n;
 /** @type {number} */
ngGrid.IGridOptions.prototype.virtualizationThreshold;
 /** @type {boolean} */
ngGrid.IGridOptions.prototype.enableHighlighting;
/**
 * @record
 * @struct
 */
ngGrid.IColumnDef = function() {};
 /** @type {?} */
ngGrid.IColumnDef.prototype.width;
 /** @type {?} */
ngGrid.IColumnDef.prototype.minWidth;
 /** @type {boolean} */
ngGrid.IColumnDef.prototype.visible;
 /** @type {string} */
ngGrid.IColumnDef.prototype.field;
 /** @type {string} */
ngGrid.IColumnDef.prototype.displayName;
 /** @type {boolean} */
ngGrid.IColumnDef.prototype.sortable;
 /** @type {boolean} */
ngGrid.IColumnDef.prototype.resizable;
 /** @type {boolean} */
ngGrid.IColumnDef.prototype.groupable;
 /** @type {boolean} */
ngGrid.IColumnDef.prototype.pinnable;
 /** @type {string} */
ngGrid.IColumnDef.prototype.editableCellTemplate;
 /** @type {boolean} */
ngGrid.IColumnDef.prototype.enableCellEdit;
 /** @type {string} */
ngGrid.IColumnDef.prototype.cellEditableCondition;
 /** @type {function(?, ?): number} */
ngGrid.IColumnDef.prototype.sortFn;
 /** @type {string} */
ngGrid.IColumnDef.prototype.cellTemplate;
 /** @type {string} */
ngGrid.IColumnDef.prototype.cellClass;
 /** @type {string} */
ngGrid.IColumnDef.prototype.headerClass;
 /** @type {string} */
ngGrid.IColumnDef.prototype.headerCellTemplate;
 /** @type {string} */
ngGrid.IColumnDef.prototype.cellFilter;
 /** @type {string} */
ngGrid.IColumnDef.prototype.aggLabelFilter;
 /** @type {boolean} */
ngGrid.IColumnDef.prototype.pinned;
/**
 * @record
 * @struct
 */
ngGrid.IFilterOptions = function() {};
 /** @type {string} */
ngGrid.IFilterOptions.prototype.filterText;
 /** @type {boolean} */
ngGrid.IFilterOptions.prototype.useExternalFilter;
/**
 * @record
 * @struct
 */
ngGrid.IPagingOptions = function() {};
 /** @type {!Array<number>} */
ngGrid.IPagingOptions.prototype.pageSizes;
 /** @type {number} */
ngGrid.IPagingOptions.prototype.pageSize;
 /** @type {number} */
ngGrid.IPagingOptions.prototype.totalServerItems;
 /** @type {number} */
ngGrid.IPagingOptions.prototype.currentPage;
/**
 * @record
 * @struct
 */
ngGrid.IPlugin = function() {};

/**
 * @param {!ngGrid.IGridScope} childScope
 * @param {!ngGrid.IGridInstance} gridInstance
 * @param {?} services
 * @return {void}
 */
ngGrid.IPlugin.prototype.init = function(childScope, gridInstance, services) {};
/** @const */
ngGrid.service = {};
/**
 * @record
 * @struct
 */
ngGrid.service.IDomUtilityService = function() {};
 /** @type {?} */
ngGrid.service.IDomUtilityService.prototype.eventStorage;
 /** @type {number} */
ngGrid.service.IDomUtilityService.prototype.numberOfGrids;
 /** @type {number} */
ngGrid.service.IDomUtilityService.prototype.immediate;
 /** @type {number} */
ngGrid.service.IDomUtilityService.prototype.ScrollH;
 /** @type {number} */
ngGrid.service.IDomUtilityService.prototype.ScrollW;
 /** @type {number} */
ngGrid.service.IDomUtilityService.prototype.LetterW;

/**
 * @param {!ngGrid.IGridScope} $scope
 * @param {!angular.IAugmentedJQuery} rootel
 * @param {!ngGrid.IGridInstance} grid
 * @return {void}
 */
ngGrid.service.IDomUtilityService.prototype.AssignGridContainers = function($scope, rootel, grid) {};

/**
 * @param {!ngGrid.IDimension} obj
 * @return {number}
 */
ngGrid.service.IDomUtilityService.prototype.getRealWidth = function(obj) {};

/**
 * @param {!ngGrid.IGridScope} $scope
 * @param {!ngGrid.IGridInstance} grid
 * @return {void}
 */
ngGrid.service.IDomUtilityService.prototype.UpdateGridLayout = function($scope, grid) {};

/**
 * @param {!ngGrid.IGridInstance} grid
 * @param {string} css
 * @return {void}
 */
ngGrid.service.IDomUtilityService.prototype.setStyleText = function(grid, css) {};

/**
 * @param {!ngGrid.IGridScope} $scope
 * @param {!ngGrid.IGridInstance} grid
 * @param {boolean} digest
 * @return {void}
 */
ngGrid.service.IDomUtilityService.prototype.BuildStyles = function($scope, grid, digest) {};

/**
 * @param {!ngGrid.IColumn} col
 * @param {number} colLeft
 * @param {!ngGrid.IGridInstance} grid
 * @return {void}
 */
ngGrid.service.IDomUtilityService.prototype.setColLeft = function(col, colLeft, grid) {};

/**
 * @param {!ngGrid.IGridScope} $scope
 * @param {!ngGrid.IGridInstance} grid
 * @return {void}
 */
ngGrid.service.IDomUtilityService.prototype.RebuildGrid = function($scope, grid) {};

/**
 * @param {!ngGrid.IGridScope} $scope
 * @return {void}
 */
ngGrid.service.IDomUtilityService.prototype.digest = function($scope) {};
/**
 * @record
 * @struct
 */
ngGrid.service.ISortInfo = function() {};
 /** @type {!Array<string>} */
ngGrid.service.ISortInfo.prototype.fields;
/**
 * @record
 * @struct
 */
ngGrid.service.ISortService = function() {};
 /** @type {?} */
ngGrid.service.ISortService.prototype.colSortFnCache;
 /** @type {boolean} */
ngGrid.service.ISortService.prototype.isCustomSort;
 /** @type {boolean} */
ngGrid.service.ISortService.prototype.isSorting;

/**
 * @param {?} item
 * @return {function(?, ?): number}
 */
ngGrid.service.ISortService.prototype.guessSortFn = function(item) {};

/**
 * @param {?} a
 * @param {?} b
 * @return {number}
 */
ngGrid.service.ISortService.prototype.basicSort = function(a, b) {};

/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
ngGrid.service.ISortService.prototype.sortNumber = function(a, b) {};

/**
 * @param {string} a
 * @param {string} b
 * @return {number}
 */
ngGrid.service.ISortService.prototype.sortNumberStr = function(a, b) {};

/**
 * @param {string} a
 * @param {string} b
 * @return {number}
 */
ngGrid.service.ISortService.prototype.sortAlpha = function(a, b) {};

/**
 * @param {!Date} a
 * @param {!Date} b
 * @return {number}
 */
ngGrid.service.ISortService.prototype.sortDate = function(a, b) {};

/**
 * @param {boolean} a
 * @param {boolean} b
 * @return {number}
 */
ngGrid.service.ISortService.prototype.sortBool = function(a, b) {};

/**
 * @param {!ngGrid.service.ISortInfo} sortInfo
 * @param {?} data
 * @return {void}
 */
ngGrid.service.ISortService.prototype.sortData = function(sortInfo, data) {};

/**
 * @param {!ngGrid.service.ISortInfo} sortInfo
 * @param {?} data
 * @return {void}
 */
ngGrid.service.ISortService.prototype.Sort = function(sortInfo, data) {};

/**
 * @param {!ngGrid.IColumn} col
 * @param {?} data
 * @return {function(?, ?): number}
 */
ngGrid.service.ISortService.prototype.getSortFn = function(col, data) {};
/**
 * @record
 * @struct
 */
ngGrid.service.IUtilityService = function() {};

/**
 * @param {?} node
 * @return {number}
 */
ngGrid.service.IUtilityService.prototype.visualLength = function(node) {};

/**
 * @param {?} obj
 * @param {function(?, string): !Object} action
 * @return {void}
 */
ngGrid.service.IUtilityService.prototype.forIn = function(obj, action) {};

/**
 * @param {?} entity
 * @param {string} path
 * @return {?}
 */
ngGrid.service.IUtilityService.prototype.evalProperty = function(entity, path) {};

/**
 * @param {string} str
 * @param {string} suffix
 * @return {boolean}
 */
ngGrid.service.IUtilityService.prototype.endsWith = function(str, suffix) {};

/**
 * @param {?} obj
 * @return {boolean}
 */
ngGrid.service.IUtilityService.prototype.isNullOrUndefined = function(obj) {};

/**
 * @param {string} cl
 * @return {!Array<?>}
 */
ngGrid.service.IUtilityService.prototype.getElementsByClassName = function(cl) {};

/**
 * @return {string}
 */
ngGrid.service.IUtilityService.prototype.newId = function() {};

/**
 * @param {!ngGrid.IGridScope} $scope
 * @param {string} language
 * @return {void}
 */
ngGrid.service.IUtilityService.prototype.seti18n = function($scope, language) {};

/**
 * @param {?} o
 * @return {string}
 */
ngGrid.service.IUtilityService.prototype.getInstanceType = function(o) {};
