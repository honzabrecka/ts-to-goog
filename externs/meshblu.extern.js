/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/meshblu/index.d.ts:
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "meshblu"
/** @const */
tsickle_declare_module.meshblu = {};
 /** @type {!MeshbluStatic} */
tsickle_declare_module.meshblu.Meshblu;

/* TODO: ExportAssignment in tsickle_declare_module.meshblu */
/**
 * @record
 * @struct
 */
function MeshbluStatic() {}

/**
 * Establish a secure socket.io connection to Meshblu.
 * @param {!Meshblu.ConnectionOptions} opt
 * @return {!Meshblu.Connection} A Meshblu Connection.
 */
MeshbluStatic.prototype.createConnection = function(opt) {};
/** @const */
var Meshblu = {};
/**
 * @record
 * @struct
 */
Meshblu.Connection = function() {};

/**
 * Authenticate with Meshblu.
 * @return {!Meshblu.Connection} This Connection.
 */
Meshblu.Connection.prototype.identify = function() {};

/**
 * @param {?} data {string|number|object|array|Buffer} - data for signing.
 * @return {string}
 */
Meshblu.Connection.prototype.sign = function(data) {};

/**
 * @param {?} message {string|number|object|array|Buffer} - signed data.
 * @param {?} signature
 * @return {?}
 */
Meshblu.Connection.prototype.verify = function(message, signature) {};

/**
 * @param {string} uuid
 * @param {?} message {string|number|object|array|Buffer} - data for encrypting.
 * @param {!Meshblu.ConnectionOptions} options
 * @param {function(?): void} fn The callback to be called. It should take one parameter, result,
 * 	which is an object containing a property "error".
 * @return {!Meshblu.Connection} This Connection.
 */
Meshblu.Connection.prototype.encryptMessage = function(uuid, message, options, fn) {};

/**
 * Send a meshblu message.
 * @param {!Meshblu.MessagePayload} payload An array of devices UUIDs.
 * @param {function(?): void} fn The callback to be called. It should take one parameter, result,
 * 	which is an object containing a property "error".
 * @return {!Meshblu.Connection} This Connection.
 */
Meshblu.Connection.prototype.message = function(payload, fn) {};

/**
 * Update a device record.
 * @param {!Meshblu.UpdateData} data
 * @param {function(!Meshblu.UpdateSuccess): void} fn The callback to be called. It should take one parameter, result.
 * @return {!Meshblu.Connection} This Connection.
 */
Meshblu.Connection.prototype.update = function(data, fn) {};

/**
 * Register a new device record.
 * @param {!Meshblu.RegisterData} data
 * @param {function(!Meshblu.RegisterResponse): void} fn The callback to be called. It should take one parameter, result.
 * @return {!Meshblu.Connection} This Connection.
 */
Meshblu.Connection.prototype.register = function(data, fn) {};

/**
 * Removes a device record.
 * @param {!Meshblu.Device} data
 * @param {function(!Meshblu.Device): void} fn The callback to be called. It should take one parameter, result.
 * @return {!Meshblu.Connection} This Connection.
 */
Meshblu.Connection.prototype.unregister = function(data, fn) {};

/**
 * Get my device info.
 * @param {?} data
 * @param {function(!Meshblu.DeviceResponse): void} fn The callback to be called. It should take one parameter, result.
 * @return {!Meshblu.Connection} This Connection.
 */
Meshblu.Connection.prototype.whoami = function(data, fn) {};

/**
 * Find a Meshblu device.
 * @param {!Meshblu.Device} data
 * @param {function(!Meshblu.DeviceResponse): void} fn The callback to be called. It should take one parameter, result.
 * @return {!Meshblu.Connection} This Connection.
 */
Meshblu.Connection.prototype.device = function(data, fn) {};

/**
 * Find Meshblu devices.
 * @param {!Meshblu.Color} data
 * @param {function(!Array<!Meshblu.DeviceResponse>): void} fn The callback to be called. It should take one parameter, result.
 * @return {!Meshblu.Connection} This Connection.
 */
Meshblu.Connection.prototype.devices = function(data, fn) {};

/**
 * Returns device messages as they are sent and received.
 * @param {!Meshblu.SubscribeData} data
 * @param {function(?): void} fn The callback to be called. It should take one parameter, result.
 * @return {!Meshblu.Connection} This Connection.
 */
Meshblu.Connection.prototype.subscribe = function(data, fn) {};

/**
 * Cancels device subscription.
 * @param {!Meshblu.UnsubscribeData} data
 * @param {function(?): void} fn The callback to be called. It should take one parameter, result.
 * @return {!Meshblu.Connection} This Connection.
 */
Meshblu.Connection.prototype.unsubscribe = function(data, fn) {};

/**
 * Send a meshblu data message.
 * @param {!Meshblu.DataInput} data
 * @param {function(?): void} fn The callback to be called. It should take one parameter, result.
 * @return {!Meshblu.Connection} This Connection.
 */
Meshblu.Connection.prototype.data = function(data, fn) {};

/**
 * Get a meshblu data for a device.
 * @param {!Meshblu.GetDataInput} data
 * @param {function(?): void} fn The callback to be called. It should take one parameter, result.
 * @return {!Meshblu.Connection} This Connection.
 */
Meshblu.Connection.prototype.getdata = function(data, fn) {};

/**
 * Generate a new session token for a device.
 * @param {!Meshblu.Device} data
 * @param {function(!Meshblu.ConnectionOptions): void} fn The callback to be called. It should take one parameter, result.
 * @return {void}
 */
Meshblu.Connection.prototype.generateAndStoreToken = function(data, fn) {};

/**
 * Remove a session token from a device.
 * @param {!Meshblu.ConnectionOptions} data
 * @param {function(!Meshblu.Device): void} fn The callback to be called. It should take one parameter, result.
 * @return {void}
 */
Meshblu.Connection.prototype.revokeToken = function(data, fn) {};

/**
 *
 * @param {string} uuid
 * @param {function(!Error, ?): void} fn The callback to be called. It should take one parameter, err,
 * 	which will be null if there was no problem, and one parameter, publicKey,
 * 	of type NodeRSA.
 * @return {void}
 */
Meshblu.Connection.prototype.getPublicKey = function(uuid, fn) {};

/**
 * @param {string} text
 * @return {!Meshblu.Connection}
 */
Meshblu.Connection.prototype.send = function(text) {};

/**
 * @return {void}
 */
Meshblu.Connection.prototype.bufferedSocketEmit = function() {};

/**
 * @param {string} serverUrl
 * @param {string} port
 * @return {string}
 */
Meshblu.Connection.prototype.parseUrl = function(serverUrl, port) {};

/**
 * @return {!Meshblu.KeyPair}
 */
Meshblu.Connection.prototype.generateKeyPair = function() {};

/**
 * @param {string} privateKey
 * @return {void}
 */
Meshblu.Connection.prototype.setPrivateKey = function(privateKey) {};

/**
 * @return {!Meshblu.Connection}
 */
Meshblu.Connection.prototype.setup = function() {};

/**
 * @return {void}
 */
Meshblu.Connection.prototype.connect = function() {};

/**
 * @return {void}
 */
Meshblu.Connection.prototype.reconnect = function() {};

/**
 * @param {!Meshblu.Device} data
 * @param {function(!Meshblu.Device): void} fn
 * @return {!Meshblu.Connection}
 */
Meshblu.Connection.prototype.claimdevice = function(data, fn) {};

/**
 * @param {?} data
 * @param {function(?): void} fn
 * @return {!Meshblu.Connection}
 */
Meshblu.Connection.prototype.mydevices = function(data, fn) {};

/**
 * @param {?} data
 * @return {!Meshblu.Connection}
 */
Meshblu.Connection.prototype.status = function(data) {};

/**
 * @param {?} data
 * @param {function(?): void} fn
 * @return {!Meshblu.Connection}
 */
Meshblu.Connection.prototype.authenticate = function(data, fn) {};

/**
 * @param {?} data
 * @param {function(?): void} fn
 * @return {!Meshblu.Connection}
 */
Meshblu.Connection.prototype.events = function(data, fn) {};

/**
 * @param {function(?): void} fn
 * @return {!Meshblu.Connection}
 */
Meshblu.Connection.prototype.localdevices = function(fn) {};

/**
 * @param {?} data
 * @param {function(?): void} fn
 * @return {!Meshblu.Connection}
 */
Meshblu.Connection.prototype.unclaimeddevices = function(data, fn) {};

/**
 * @param {?} data
 * @return {!Meshblu.Connection}
 */
Meshblu.Connection.prototype.textBroadcast = function(data) {};

/**
 * @param {?} data
 * @return {!Meshblu.Connection}
 */
Meshblu.Connection.prototype.directText = function(data) {};

/**
 * @param {?} data
 * @param {function(?): void} fn
 * @return {!Meshblu.Connection}
 */
Meshblu.Connection.prototype.subscribeText = function(data, fn) {};

/**
 * @param {?} data
 * @param {function(?): void} fn
 * @return {!Meshblu.Connection}
 */
Meshblu.Connection.prototype.unsubscribeText = function(data, fn) {};

/**
 * @param {function(?): void} fn
 * @return {!Meshblu.Connection}
 */
Meshblu.Connection.prototype.close = function(fn) {};

/**
 * @param {?} data
 * @param {function(?): void} fn
 * @return {void}
 */
Meshblu.Connection.prototype.resetToken = function(data, fn) {};
/**
 * @record
 * @struct
 */
Meshblu.ConnectionOptions = function() {};
 /** @type {string} */
Meshblu.ConnectionOptions.prototype.uuid;
 /** @type {string} */
Meshblu.ConnectionOptions.prototype.token;
/**
 * @record
 * @struct
 */
Meshblu.KeyPair = function() {};
 /** @type {string} */
Meshblu.KeyPair.prototype.privateKey;
 /** @type {string} */
Meshblu.KeyPair.prototype.publicKey;
/**
 * @record
 * @struct
 */
Meshblu.MessagePayload = function() {};
 /** @type {!Array<string>} */
Meshblu.MessagePayload.prototype.devices;
 /** @type {string} */
Meshblu.MessagePayload.prototype.topic;
 /** @type {?} */
Meshblu.MessagePayload.prototype.payload;
 /** @type {number} */
Meshblu.MessagePayload.prototype.qos;
/**
 * @record
 * @struct
 */
Meshblu.UpdateData = function() {};
 /** @type {string} */
Meshblu.UpdateData.prototype.uuid;
 /** @type {string} */
Meshblu.UpdateData.prototype.color;
/**
 * @record
 * @struct
 */
Meshblu.UpdateSuccess = function() {};
 /** @type {string} */
Meshblu.UpdateSuccess.prototype.uuid;
 /** @type {string} */
Meshblu.UpdateSuccess.prototype.token;
 /** @type {string} */
Meshblu.UpdateSuccess.prototype.status;
/**
 * @record
 * @struct
 */
Meshblu.RegisterData = function() {};
 /** @type {string} */
Meshblu.RegisterData.prototype.type;
/**
 * @record
 * @struct
 */
Meshblu.RegisterResponse = function() {};
 /** @type {string} */
Meshblu.RegisterResponse.prototype.uuid;
 /** @type {string} */
Meshblu.RegisterResponse.prototype.token;
 /** @type {string} */
Meshblu.RegisterResponse.prototype.type;
/**
 * @record
 * @struct
 */
Meshblu.Device = function() {};
 /** @type {string} */
Meshblu.Device.prototype.uuid;
/**
 * @record
 * @struct
 */
Meshblu.DeviceResponse = function() {};
 /** @type {string} */
Meshblu.DeviceResponse.prototype.uuid;
 /** @type {boolean} */
Meshblu.DeviceResponse.prototype.online;
 /** @type {string} */
Meshblu.DeviceResponse.prototype.color;
/**
 * @record
 * @struct
 */
Meshblu.Color = function() {};
 /** @type {string} */
Meshblu.Color.prototype.color;
/**
 * @record
 * @struct
 */
Meshblu.SubscribeData = function() {};
 /** @type {string} */
Meshblu.SubscribeData.prototype.uuid;
 /** @type {!Array<string>} */
Meshblu.SubscribeData.prototype.types;
 /** @type {!Array<string>} */
Meshblu.SubscribeData.prototype.topics;
/**
 * @record
 * @struct
 */
Meshblu.UnsubscribeData = function() {};
 /** @type {string} */
Meshblu.UnsubscribeData.prototype.uuid;
 /** @type {!Array<string>} */
Meshblu.UnsubscribeData.prototype.types;
/**
 * @record
 * @struct
 */
Meshblu.DataInput = function() {};
 /** @type {string} */
Meshblu.DataInput.prototype.uuid;
 /** @type {boolean} */
Meshblu.DataInput.prototype.online;
 /** @type {number} */
Meshblu.DataInput.prototype.x;
 /** @type {number} */
Meshblu.DataInput.prototype.y;
/**
 * @record
 * @struct
 */
Meshblu.GetDataInput = function() {};
 /** @type {string} */
Meshblu.GetDataInput.prototype.uuid;
 /** @type {string} */
Meshblu.GetDataInput.prototype.start;
 /** @type {string} */
Meshblu.GetDataInput.prototype.finish;
 /** @type {number} */
Meshblu.GetDataInput.prototype.limit;
/**
 * @record
 * @struct
 */
Meshblu.IdentifySuccess = function() {};
 /** @type {string} */
Meshblu.IdentifySuccess.prototype.uuid;
 /** @type {string} */
Meshblu.IdentifySuccess.prototype.token;
 /** @type {string} */
Meshblu.IdentifySuccess.prototype.status;
