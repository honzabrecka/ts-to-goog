/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/pouchdb-replication/index.d.ts:
/** @const */
PouchDB.Replication = {};
/**
 * @record
 * @struct
 */
PouchDB.Replication.ReplicateOptions = function() {};
 /** @type {boolean} */
PouchDB.Replication.ReplicateOptions.prototype.live;
 /** @type {boolean} */
PouchDB.Replication.ReplicateOptions.prototype.retry;
 /** @type {(string|function(?, ?): ?)} */
PouchDB.Replication.ReplicateOptions.prototype.filter;
 /** @type {!Array<string>} */
PouchDB.Replication.ReplicateOptions.prototype.doc_ids;
 /** @type {!Object<string,?>} */
PouchDB.Replication.ReplicateOptions.prototype.query_params;
 /** @type {string} */
PouchDB.Replication.ReplicateOptions.prototype.view;
 /** @type {?} */
PouchDB.Replication.ReplicateOptions.prototype.since;
 /** @type {?} */
PouchDB.Replication.ReplicateOptions.prototype.heartbeat;
 /** @type {(number|boolean)} */
PouchDB.Replication.ReplicateOptions.prototype.timeout;
 /** @type {number} */
PouchDB.Replication.ReplicateOptions.prototype.batch_size;
 /** @type {number} */
PouchDB.Replication.ReplicateOptions.prototype.batches_limit;

/**
 * Backoff function to be used in retry replication. This is a function that takes the current
 * backoff as input (or 0 the first time) and returns a new backoff in milliseconds.
 * You can use this to tweak when and how replication will try to reconnect to a remote database when the user goes offline.
 * Defaults to a function that chooses a random backoff between 0 and 2 seconds and doubles every time it fails to connect.
 * The default delay will never exceed 10 minutes.
 * @param {number} delay
 * @return {number}
 */
PouchDB.Replication.ReplicateOptions.prototype.back_off_function = function(delay) {};
/**
 * @extends {EventEmitter}
 * @record
 * @struct
 */
PouchDB.Replication.ReplicationEventEmitter = function() {};

/**
 * @param {string} event
 * @param {function(C): ?|function(!Object): ?|function(): ?|function(F): ?} listener
 * @return {ReplicationEventEmitter}
 */
PouchDB.Replication.ReplicationEventEmitter.prototype.on = function(event, listener) {};

/**
 * @return {void}
 */
PouchDB.Replication.ReplicationEventEmitter.prototype.cancel = function() {};
/**
 * @extends {PouchDB.Replication.ReplicationEventEmitter}
 * @record
 * @struct
 */
PouchDB.Replication.Replication = function() {};
/**
 * @record
 * @struct
 */
PouchDB.Replication.ReplicationResult = function() {};
 /** @type {number} */
PouchDB.Replication.ReplicationResult.prototype.doc_write_failures;
 /** @type {number} */
PouchDB.Replication.ReplicationResult.prototype.docs_read;
 /** @type {number} */
PouchDB.Replication.ReplicationResult.prototype.docs_written;
 /** @type {number} */
PouchDB.Replication.ReplicationResult.prototype.last_seq;
 /** @type {!Date} */
PouchDB.Replication.ReplicationResult.prototype.start_time;
 /** @type {boolean} */
PouchDB.Replication.ReplicationResult.prototype.ok;
 /** @type {!Array<?>} */
PouchDB.Replication.ReplicationResult.prototype.errors;
 /** @type {!Array<?>} */
PouchDB.Replication.ReplicationResult.prototype.docs;
/**
 * @extends {PouchDB.Replication.ReplicationResult}
 * @record
 * @struct
 */
PouchDB.Replication.ReplicationResultComplete = function() {};
 /** @type {!Date} */
PouchDB.Replication.ReplicationResultComplete.prototype.end_time;
 /** @type {string} */
PouchDB.Replication.ReplicationResultComplete.prototype.status;
/**
 * @extends {PouchDB.Replication.ReplicateOptions}
 * @record
 * @struct
 */
PouchDB.Replication.SyncOptions = function() {};
 /** @type {!PouchDB.Replication.ReplicateOptions} */
PouchDB.Replication.SyncOptions.prototype.push;
 /** @type {!PouchDB.Replication.ReplicateOptions} */
PouchDB.Replication.SyncOptions.prototype.pull;
/**
 * @extends {PouchDB.Replication.ReplicationEventEmitter}
 * @record
 * @struct
 */
PouchDB.Replication.Sync = function() {};
/**
 * @record
 * @struct
 */
PouchDB.Replication.SyncResult = function() {};
 /** @type {string} */
PouchDB.Replication.SyncResult.prototype.direction;
 /** @type {!PouchDB.Replication.ReplicationResult<Content>} */
PouchDB.Replication.SyncResult.prototype.change;
/**
 * @record
 * @struct
 */
PouchDB.Replication.SyncResultComplete = function() {};
 /** @type {!PouchDB.Replication.ReplicationResultComplete<Content>} */
PouchDB.Replication.SyncResultComplete.prototype.push;
 /** @type {!PouchDB.Replication.ReplicationResultComplete<Content>} */
PouchDB.Replication.SyncResultComplete.prototype.pull;

/**
 * Replicate data from source to target. Both the source and target can be a PouchDB instance or a string
 * representing a CouchDB database URL or the name of a local PouchDB database. If options.live is true,
 * then this will track future changes and also replicate them automatically.
 * This method returns an object with the method cancel(), which you call if you want to cancel live replication.
 * @template Content
 * @param {(string|!PouchDB.Database<Content>)} source
 * @param {(string|!PouchDB.Database<Content>)} target
 * @param {!PouchDB.Replication.ReplicateOptions=} options
 * @param {function(!PouchDB.Core.Error, !PouchDB.Replication.ReplicationResultComplete<Content>): void=} callback
 * @return {!PouchDB.Replication.Replication<Content>}
 */
PouchDB.Static.prototype.replicate = function(source, target, options, callback) {};

/**
 * Sync data from src to target and target to src. This is a convenience method for bidirectional data replication.
 * 
 * In other words, this code:
 * `PouchDB.replicate('mydb', 'http://localhost:5984/mydb')`;
 * `PouchDB.replicate('http://localhost:5984/mydb', 'mydb')`;
 * is equivalent to this code:
 * `PouchDB.sync('mydb', 'http://localhost:5984/mydb')`;
 * @template Content
 * @param {(string|!PouchDB.Database<Content>)} source
 * @param {(string|!PouchDB.Database<Content>)} target
 * @param {!PouchDB.Replication.SyncOptions=} options
 * @param {function(!PouchDB.Core.Error, !PouchDB.Replication.SyncResultComplete<Content>): void=} callback
 * @return {!PouchDB.Replication.Sync<Content>}
 */
PouchDB.Static.prototype.sync = function(source, target, options, callback) {};
 /** @type {{to: function((string|!PouchDB.Database<Content>), !PouchDB.Replication.ReplicateOptions, function(!PouchDB.Core.Error, !PouchDB.Replication.ReplicationResultComplete<Content>): void): !PouchDB.Replication.Replication<Content>, from: function((string|!PouchDB.Database<Content>), !PouchDB.Replication.ReplicateOptions, function(!PouchDB.Core.Error, !PouchDB.Replication.ReplicationResultComplete<Content>): void): !PouchDB.Replication.Replication<Content>}} */
PouchDB.Database.prototype.replicate;

/**
 * Sync data from src to target and target to src. This is a convenience method for bidirectional data replication.
 * 
 * In other words, this code:
 * `PouchDB.replicate('mydb', 'http://localhost:5984/mydb')`;
 * `PouchDB.replicate('http://localhost:5984/mydb', 'mydb')`;
 * is equivalent to this code:
 * `PouchDB.sync('mydb', 'http://localhost:5984/mydb')`;
 * @template Content
 * @param {(string|!PouchDB.Database<Content>)} remote
 * @param {!PouchDB.Replication.SyncOptions=} options
 * @param {function(!PouchDB.Core.Error, !PouchDB.Replication.SyncResultComplete<Content>): void=} callback
 * @return {!PouchDB.Replication.Sync<Content>}
 */
PouchDB.Database.prototype.sync = function(remote, options, callback) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "pouchdb-replication"
/** @const */
tsickle_declare_module.pouchdb_replication = {};
 /** @type {string} */
tsickle_declare_module.pouchdb_replication.plugin;

/* TODO: ExportAssignment in tsickle_declare_module.pouchdb_replication */
