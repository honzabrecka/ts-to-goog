/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/dustjs-linkedin/index.d.ts:
/**
 * @record
 * @struct
 */
function Template() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function Chunk() {}

/**
 * Writes data to this chunk's buffer.
 * @param {string} data
 * @return {?}
 */
Chunk.prototype.write = function(data) {};

/**
 * Writes data to this chunk's buffer and marks it as flushable. This method must be called on any chunks created via chunk.map. Do not call this method on a handler's main chunk -- dust.render and dust.stream take care of this for you.
 * @param {string} data
 * @return {?}
 */
Chunk.prototype.end = function(data) {};

/**
 * Creates a new chunk and passes it to callback. Use map to wrap asynchronous functions and to partition the template for streaming.
 * @param {?} callback
 * @return {?}
 */
Chunk.prototype.map = function(callback) {};

/**
 * Convenience method to apply filters to a stream.
 * @param {?} callback
 * @return {?}
 */
Chunk.prototype.tap = function(callback) {};

/**
 * Removes the head tap function from the list.
 * @return {?}
 */
Chunk.prototype.untap = function() {};

/**
 * Renders a template block, such as a default block or an else block.
 * @param {?} body
 * @param {?} context
 * @return {?}
 */
Chunk.prototype.render = function(body, context) {};

/**
 * Sets an error on this chunk and immediately flushes the output.
 * @param {?} err
 * @return {?}
 */
Chunk.prototype.setError = function(err) {};
/**
 * @record
 * @struct
 */
function Context() {}

/**
 * Retrieves the value at key from the context stack.
 * @param {string} key
 * @return {?}
 */
Context.prototype.get = function(key) {};

/**
 * Pushes an arbitrary value onto the context stack and returns a new context instance. Specify index and/or length to enable enumeration helpers.
 * @param {?} head
 * @param {number=} idx
 * @param {number=} len
 * @return {?}
 */
Context.prototype.push = function(head, idx, len) {};

/**
 * Returns a new context instance consisting only of the value at head, plus any previously defined global object.
 * @param {?} head
 * @return {?}
 */
Context.prototype.rebase = function(head) {};

/**
 * Returns the head of the context stack.
 * @return {?}
 */
Context.prototype.current = function() {};
/**
 * @record
 * @struct
 */
function Stream() {}

/**
 * @return {void}
 */
Stream.prototype.flush = function() {};

/**
 * @param {string} evt
 * @param {?} data
 * @return {void}
 */
Stream.prototype.emit = function(evt, data) {};

/**
 * @param {string} evt
 * @param {?} callback
 * @return {?}
 */
Stream.prototype.on = function(evt, callback) {};

/**
 * @param {?} stream
 * @return {?}
 */
Stream.prototype.pipe = function(stream) {};

/**
 * register a template into the cache.
 * @param {string} name the unique template name. 
 * @param {?} tmpl the template function.
 * @return {void}
 */
function register(name, tmpl) {}

/**
 * compile a template body into a string of JavaScript source code
 * \@strip strip whitespaces from the output. Defaults to false.
 * @param {string} source the template string
 * @param {string} name the name used to register the compiled template into the internal cache. See render().
 * @param {boolean=} strip
 * @return {string}
 */
function compile(source, name, strip) {}

/**
 * Compiles source directly into a JavaScript function that takes a context and an optional callback (see dust.renderSource). Registers the template under [name] if this argument is supplied.
 * @param {string} source the template string
 * @param {string=} name the template name (optional).
 * @return {?}
 */
function compileFn(source, name) {}

/**
 * Evaluates a compiled source string.
 * @param {string} compiled
 * @return {?}
 */
function loadSource(compiled) {}

/**
 * Renders the named template and calls callback on completion.context may be a plain object or an instance of dust.Context.
 * @param {string} name the template name.
 * @param {?} context a plain object or an instance of dust.Context.
 * @param {function(?, string): ?} callback
 * @return {void}
 */
function render(name, context, callback) {}

/**
 * Compiles and renders source, invoking callback on completion. If no callback is supplied this function returns a Stream object. Use this function when precompilation is not required.
 * @param {string} source the template string.
 * @param {?} context a plain object or an instance of dust.Context.
 * @param {function(?, string): ?=} callback
 * @return {?|void}
 */
function renderSource(source, context, callback) {}

/**
 * Streams the named template. context may be a plain object or an instance of dust.Context. Returns an instance of dust.Stream.
 * @param {string} name the template name.
 * @param {?} context a plain object or an instance of dust.Context.
 * @return {?}
 */
function stream(name, context) {}

/**
 * Manufactures a dust.Context instance with its global object set to object.
 * @param {?} global a plain object or an instance of dust.Context.
 * @return {?}
 */
function makeBase(global) {}

/**
 * @param {string} html
 * @return {string}
 */
function escapeHtml(html) {}

/**
 * @param {string} js
 * @return {string}
 */
function escapeJs(js) {}
 /** @type {!Object<string,function(?, ?, ?, ?): ?>} */
var helpers;
 /** @type {!Object<string,function(string): string>} */
var filters;
