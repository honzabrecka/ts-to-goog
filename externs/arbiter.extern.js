/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/arbiter/index.d.ts:
/** @const */
var ArbiterDef = {};
/**
 * @record
 * @struct
 */
ArbiterDef.SubscribeHandler = function() {};

/* TODO: CallSignature: ArbiterDef */
/**
 * @record
 * @struct
 */
ArbiterDef.SubscribeOptions = function() {};
 /** @type {number} */
ArbiterDef.SubscribeOptions.prototype.priority;
 /** @type {boolean} */
ArbiterDef.SubscribeOptions.prototype.async;
 /** @type {boolean} */
ArbiterDef.SubscribeOptions.prototype.persist;
/**
 * @record
 * @struct
 */
ArbiterDef.PublishOptions = function() {};
 /** @type {boolean} */
ArbiterDef.PublishOptions.prototype.cancelable;
 /** @type {boolean} */
ArbiterDef.PublishOptions.prototype.persist;
 /** @type {boolean} */
ArbiterDef.PublishOptions.prototype.async;
/**
 * @record
 * @struct
 */
ArbiterDef.ArbiterStatic = function() {};
 /** @type {string} */
ArbiterDef.ArbiterStatic.prototype.version;
 /** @type {string} */
ArbiterDef.ArbiterStatic.prototype.updated_on;

/**
 * Creates a separate Arbiter instance.
 * @return {!ArbiterDef.ArbiterStatic}
 */
ArbiterDef.ArbiterStatic.prototype.create = function() {};

/**
 * Publishes a message to all subscribers.
 * Returns: true on success, false if any subscriber has thrown a js exception.
 * 
 * @param {string} msg Message may be in any format, but may not contain [ ,*]. A structure like a/b/c is recommended by convention, to allow messages to be categorized.
 * @param {?=} data Pass data to subscribers that contains details about the message.
 * @param {!ArbiterDef.PublishOptions=} options
 * @return {boolean}
 */
ArbiterDef.ArbiterStatic.prototype.publish = function(msg, data, options) {};

/**
 * Subscribes to messages.
 * Returns: subscription id or [id1,id2] if subscribing to multiple messages
 * 
 * Subscribes to messages.
 * Returns: subscription id or [id1,id2] if subscribing to multiple messages
 * 
 * Subscribes to messages. Can use comma separated or wildcards in message.
 * Returns: subscription id or [id1,id2] if subscribing to multiple messages
 * Subscribes to messages.
 * Returns: subscription id or [id1,id2] if subscribing to multiple messages
 * 
 * Subscribes to messages.
 * Returns: subscription id or [id1,id2] if subscribing to multiple messages
 * 
 * Subscribes to messages.
 * Returns: subscription id or [id1,id2] if subscribing to multiple messages
 * 
 * @param {string|!Array<string>} msg comma separated messages or use wildcard like a/b/*
 * @param {!ArbiterDef.SubscribeHandler|!ArbiterDef.SubscribeOptions} func_or_options
 * @param {!ArbiterDef.SubscribeHandler|?=} func_or_context
 * @param {!ArbiterDef.SubscribeHandler=} func
 * @return {?}
 */
ArbiterDef.ArbiterStatic.prototype.subscribe = function(msg, func_or_options, func_or_context, func) {};

/**
 * Unsubscribing simply sets a flag which prevents the subscriber from executing, in case you want to re-subscribe later.
 * @param {number} subscription_id
 * @return {boolean}
 */
ArbiterDef.ArbiterStatic.prototype.unsubscribe = function(subscription_id) {};

/**
 * After unsubscribing, you can later re-subscribe to begin receiving messages again.
 * @param {number} subscription_id
 * @return {boolean}
 */
ArbiterDef.ArbiterStatic.prototype.resubscribe = function(subscription_id) {};
 /** @type {!ArbiterDef.ArbiterStatic} */
var Arbiter;
