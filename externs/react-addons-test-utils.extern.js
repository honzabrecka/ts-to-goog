/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/react-addons-test-utils/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ExportAssignment in  */
/** @const */
var TestUtils = {};
/**
 * @record
 * @struct
 */
TestUtils.OptionalEventProperties = function() {};
 /** @type {boolean} */
TestUtils.OptionalEventProperties.prototype.bubbles;
 /** @type {boolean} */
TestUtils.OptionalEventProperties.prototype.cancelable;
 /** @type {!EventTarget} */
TestUtils.OptionalEventProperties.prototype.currentTarget;
 /** @type {boolean} */
TestUtils.OptionalEventProperties.prototype.defaultPrevented;
 /** @type {number} */
TestUtils.OptionalEventProperties.prototype.eventPhase;
 /** @type {boolean} */
TestUtils.OptionalEventProperties.prototype.isTrusted;
 /** @type {!Event} */
TestUtils.OptionalEventProperties.prototype.nativeEvent;
 /** @type {!EventTarget} */
TestUtils.OptionalEventProperties.prototype.target;
 /** @type {!Date} */
TestUtils.OptionalEventProperties.prototype.timeStamp;
 /** @type {string} */
TestUtils.OptionalEventProperties.prototype.type;

/**
 * @return {void}
 */
TestUtils.OptionalEventProperties.prototype.preventDefault = function() {};

/**
 * @return {void}
 */
TestUtils.OptionalEventProperties.prototype.stopPropagation = function() {};
/**
 * @extends {TestUtils.OptionalEventProperties}
 * @record
 * @struct
 */
TestUtils.SyntheticEventData = function() {};
 /** @type {boolean} */
TestUtils.SyntheticEventData.prototype.altKey;
 /** @type {number} */
TestUtils.SyntheticEventData.prototype.button;
 /** @type {number} */
TestUtils.SyntheticEventData.prototype.buttons;
 /** @type {number} */
TestUtils.SyntheticEventData.prototype.clientX;
 /** @type {number} */
TestUtils.SyntheticEventData.prototype.clientY;
 /** @type {!TouchList} */
TestUtils.SyntheticEventData.prototype.changedTouches;
 /** @type {boolean} */
TestUtils.SyntheticEventData.prototype.charCode;
 /** @type {!DataTransfer} */
TestUtils.SyntheticEventData.prototype.clipboardData;
 /** @type {boolean} */
TestUtils.SyntheticEventData.prototype.ctrlKey;
 /** @type {number} */
TestUtils.SyntheticEventData.prototype.deltaMode;
 /** @type {number} */
TestUtils.SyntheticEventData.prototype.deltaX;
 /** @type {number} */
TestUtils.SyntheticEventData.prototype.deltaY;
 /** @type {number} */
TestUtils.SyntheticEventData.prototype.deltaZ;
 /** @type {number} */
TestUtils.SyntheticEventData.prototype.detail;
 /** @type {string} */
TestUtils.SyntheticEventData.prototype.key;
 /** @type {number} */
TestUtils.SyntheticEventData.prototype.keyCode;
 /** @type {string} */
TestUtils.SyntheticEventData.prototype.locale;
 /** @type {number} */
TestUtils.SyntheticEventData.prototype.location;
 /** @type {boolean} */
TestUtils.SyntheticEventData.prototype.metaKey;
 /** @type {number} */
TestUtils.SyntheticEventData.prototype.pageX;
 /** @type {number} */
TestUtils.SyntheticEventData.prototype.pageY;
 /** @type {!EventTarget} */
TestUtils.SyntheticEventData.prototype.relatedTarget;
 /** @type {boolean} */
TestUtils.SyntheticEventData.prototype.repeat;
 /** @type {number} */
TestUtils.SyntheticEventData.prototype.screenX;
 /** @type {number} */
TestUtils.SyntheticEventData.prototype.screenY;
 /** @type {boolean} */
TestUtils.SyntheticEventData.prototype.shiftKey;
 /** @type {!TouchList} */
TestUtils.SyntheticEventData.prototype.targetTouches;
 /** @type {!TouchList} */
TestUtils.SyntheticEventData.prototype.touches;
 /** @type {!React.AbstractView} */
TestUtils.SyntheticEventData.prototype.view;
 /** @type {number} */
TestUtils.SyntheticEventData.prototype.which;

/**
 * @param {string} key
 * @return {boolean}
 */
TestUtils.SyntheticEventData.prototype.getModifierState = function(key) {};
/**
 * @record
 * @struct
 */
TestUtils.EventSimulator = function() {};

/* TODO: CallSignature: TestUtils */
/**
 * @record
 * @struct
 */
TestUtils.MockedComponentClass = function() {};

/* TODO: ConstructSignature: TestUtils */
/**
 * @record
 * @struct
 */
TestUtils.ShallowRenderer = function() {};

/**
 * @template E
 * @return {E|!React.ReactElement<?>}
 */
TestUtils.ShallowRenderer.prototype.getRenderOutput = function() {};

/**
 * @param {!React.ReactElement<?>} element
 * @param {?=} context
 * @return {void}
 */
TestUtils.ShallowRenderer.prototype.render = function(element, context) {};

/**
 * @return {void}
 */
TestUtils.ShallowRenderer.prototype.unmount = function() {};
/** @const */
TestUtils.Simulate = {};
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.blur;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.change;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.click;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.copy;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.cut;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.doubleClick;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.drag;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.dragEnd;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.dragEnter;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.dragExit;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.dragLeave;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.dragOver;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.dragStart;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.drop;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.error;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.focus;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.input;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.keyDown;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.keyPress;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.keyUp;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.load;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.mouseDown;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.mouseEnter;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.mouseLeave;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.mouseMove;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.mouseOut;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.mouseOver;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.mouseUp;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.paste;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.scroll;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.submit;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.touchCancel;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.touchEnd;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.touchMove;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.touchStart;
 /** @type {!TestUtils.EventSimulator} */
TestUtils.Simulate.wheel;

/**
 * @template T, P
 * @param {!React.DOMElement<?, T>|!React.SFCElement<?>|!React.ComponentElement<?, T>|!React.ReactElement<P>} element
 * @return {T|void|(void|!React.Component<P, !Object>|!Element)}
 */
TestUtils.renderIntoDocument = function(element) {};

/**
 * @param {!TestUtils.MockedComponentClass} mocked
 * @param {string=} mockTagName
 * @return {?}
 */
TestUtils.mockComponent = function(mocked, mockTagName) {};

/**
 * @template T, P, C
 * @param {!React.ReactElement<?>} element
 * @param {string|!React.StatelessComponent<P>|?} type
 * @return {boolean}
 */
TestUtils.isElementOfType = function(element, type) {};

/**
 * @param {(!Element|!React.Component<?, !Object>)} instance
 * @return {boolean}
 */
TestUtils.isDOMComponent = function(instance) {};

/**
 * @param {(!Element|!React.Component<?, !Object>)} instance
 * @return {boolean}
 */
TestUtils.isCompositeComponent = function(instance) {};

/**
 * @template T, C
 * @param {(!Element|!React.Component<?, !Object>)} instance
 * @param {?} type
 * @return {T}
 */
TestUtils.isCompositeComponentWithType = function(instance, type) {};

/**
 * @param {!React.Component<?, !Object>} root
 * @param {function((!Element|!React.Component<?, !Object>)): boolean} fn
 * @return {!Array<(!Element|!React.Component<?, !Object>)>}
 */
TestUtils.findAllInRenderedTree = function(root, fn) {};

/**
 * @param {!React.Component<?, !Object>} root
 * @param {string} className
 * @return {!Array<!Element>}
 */
TestUtils.scryRenderedDOMComponentsWithClass = function(root, className) {};

/**
 * @param {!React.Component<?, !Object>} root
 * @param {string} className
 * @return {!Element}
 */
TestUtils.findRenderedDOMComponentWithClass = function(root, className) {};

/**
 * @param {!React.Component<?, !Object>} root
 * @param {string} tagName
 * @return {!Array<!Element>}
 */
TestUtils.scryRenderedDOMComponentsWithTag = function(root, tagName) {};

/**
 * @param {!React.Component<?, !Object>} root
 * @param {string} tagName
 * @return {!Element}
 */
TestUtils.findRenderedDOMComponentWithTag = function(root, tagName) {};

/**
 * @template T, C
 * @param {!React.Component<?, !Object>} root
 * @param {?} type
 * @return {!Array<T>}
 */
TestUtils.scryRenderedComponentsWithType = function(root, type) {};

/**
 * @template T, C
 * @param {!React.Component<?, !Object>} root
 * @param {?} type
 * @return {T}
 */
TestUtils.findRenderedComponentWithType = function(root, type) {};

/**
 * @return {!TestUtils.ShallowRenderer}
 */
TestUtils.createRenderer = function() {};
