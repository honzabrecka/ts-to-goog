/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/serve-static/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/**
 * Create a new middleware function to serve files from within a given root directory.
 * The file to serve will be determined by combining req.url with the provided root directory.
 * When a file is not found, instead of sending a 404 response, this module will instead call next() to move on to the next middleware, allowing for stacking and fall-backs.
 * @param {string} root
 * @param {!serveStatic.ServeStaticOptions=} options
 * @return {?}
 */
function serveStatic(root, options) {}
 /** @type {?} */
serveStatic.mime;
/**
 * @record
 * @struct
 */
serveStatic.ServeStaticOptions = function() {};
 /** @type {string} */
serveStatic.ServeStaticOptions.prototype.dotfiles;
 /** @type {boolean} */
serveStatic.ServeStaticOptions.prototype.etag;
 /** @type {!Array<string>} */
serveStatic.ServeStaticOptions.prototype.extensions;
 /** @type {boolean} */
serveStatic.ServeStaticOptions.prototype.fallthrough;
 /** @type {(string|boolean|!Array<string>)} */
serveStatic.ServeStaticOptions.prototype.index;
 /** @type {boolean} */
serveStatic.ServeStaticOptions.prototype.lastModified;
 /** @type {(string|number)} */
serveStatic.ServeStaticOptions.prototype.maxAge;
 /** @type {boolean} */
serveStatic.ServeStaticOptions.prototype.redirect;
 /** @type {function(?, string, ?): ?} */
serveStatic.ServeStaticOptions.prototype.setHeaders;

/**
 * @param {string} root
 * @param {!serveStatic.ServeStaticOptions=} options
 * @return {?}
 */
serveStatic.serveStatic = function(root, options) {};

/* TODO: ExportAssignment in  */
