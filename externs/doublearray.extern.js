/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/doublearray/index.d.ts:
/** @const */
var doublearray = {};
/**
 * @record
 * @struct
 */
doublearray.KeyValue = function() {};
 /** @type {string} */
doublearray.KeyValue.prototype.k;
 /** @type {number} */
doublearray.KeyValue.prototype.v;
/**
 * @record
 * @struct
 */
doublearray.BaseAndCheck = function() {};

/**
 * @return {?}
 */
doublearray.BaseAndCheck.prototype.getBaseBuffer = function() {};

/**
 * @return {?}
 */
doublearray.BaseAndCheck.prototype.getCheckBuffer = function() {};

/**
 * @param {!Int8Array|!Int16Array|!Int32Array|!Uint8Array|!Uint16Array|!Uint32Array} base_buffer
 * @return {!doublearray.BaseAndCheck}
 */
doublearray.BaseAndCheck.prototype.loadBaseBuffer = function(base_buffer) {};

/**
 * @param {!Int8Array|!Int16Array|!Int32Array|!Uint8Array|!Uint16Array|!Uint32Array} check_buffer
 * @return {!doublearray.BaseAndCheck}
 */
doublearray.BaseAndCheck.prototype.loadCheckBuffer = function(check_buffer) {};

/**
 * @return {number}
 */
doublearray.BaseAndCheck.prototype.size = function() {};

/**
 * @return {number}
 */
doublearray.BaseAndCheck.prototype.getBase = function() {};

/**
 * @return {number}
 */
doublearray.BaseAndCheck.prototype.getCheck = function() {};

/**
 * @param {number} index
 * @param {number} base_value
 * @return {void}
 */
doublearray.BaseAndCheck.prototype.setBase = function(index, base_value) {};

/**
 * @param {number} index
 * @param {number} check_value
 * @return {void}
 */
doublearray.BaseAndCheck.prototype.setCheck = function(index, check_value) {};

/**
 * @param {number} index
 * @return {void}
 */
doublearray.BaseAndCheck.prototype.setFirstUnusedNode = function(index) {};

/**
 * @return {number}
 */
doublearray.BaseAndCheck.prototype.getFirstUnusedNode = function() {};

/**
 * @return {void}
 */
doublearray.BaseAndCheck.prototype.shrink = function() {};

/**
 * @return {{all: number, unused: number, efficiency: number}}
 */
doublearray.BaseAndCheck.prototype.calc = function() {};

/**
 * @return {string}
 */
doublearray.BaseAndCheck.prototype.dump = function() {};
/**
 * @record
 * @struct
 */
doublearray.DoubleArrayBuilder = function() {};
 /** @type {!doublearray.BaseAndCheck} */
doublearray.DoubleArrayBuilder.prototype.bc;
 /** @type {!Array<!doublearray.KeyValue>} */
doublearray.DoubleArrayBuilder.prototype.keys;

/**
 * @param {string} key
 * @param {number} record
 * @return {!doublearray.DoubleArrayBuilder}
 */
doublearray.DoubleArrayBuilder.prototype.append = function(key, record) {};

/**
 * @param {!Array<!doublearray.KeyValue>=} keys
 * @param {boolean=} sorted
 * @return {!doublearray.DoubleArray}
 */
doublearray.DoubleArrayBuilder.prototype.build = function(keys, sorted) {};

/**
 * @param {number} position
 * @param {number} start
 * @param {number} length
 * @return {!Int32Array}
 */
doublearray.DoubleArrayBuilder.prototype.getChildrenInfo = function(position, start, length) {};

/**
 * @param {number} parent_id
 * @param {!Int32Array} children_info
 * @param {number} _base
 * @return {void}
 */
doublearray.DoubleArrayBuilder.prototype.setBC = function(parent_id, children_info, _base) {};

/**
 * @param {!Int32Array} children_info
 * @return {number}
 */
doublearray.DoubleArrayBuilder.prototype.findAllocatableBase = function(children_info) {};

/**
 * @param {number} index
 * @return {boolean}
 */
doublearray.DoubleArrayBuilder.prototype.isUnusedNode = function(index) {};
/**
 * @record
 * @struct
 */
doublearray.DoubleArray = function() {};
 /** @type {!doublearray.BaseAndCheck} */
doublearray.DoubleArray.prototype.bc;

/**
 * @param {string} key
 * @return {boolean}
 */
doublearray.DoubleArray.prototype.contain = function(key) {};

/**
 * @param {string} key
 * @return {number}
 */
doublearray.DoubleArray.prototype.lookup = function(key) {};

/**
 * @param {string} key
 * @return {!doublearray.KeyValue}
 */
doublearray.DoubleArray.prototype.commonPrefixSearch = function(key) {};

/**
 * @param {number} parent
 * @param {number} code
 * @return {number}
 */
doublearray.DoubleArray.prototype.traverse = function(parent, code) {};

/**
 * @return {number}
 */
doublearray.DoubleArray.prototype.size = function() {};

/**
 * @return {{all: number, unused: number, efficiency: number}}
 */
doublearray.DoubleArray.prototype.calc = function() {};

/**
 * @return {string}
 */
doublearray.DoubleArray.prototype.dump = function() {};

/**
 * @param {number=} initial_size
 * @return {!doublearray.DoubleArrayBuilder}
 */
doublearray.builder = function(initial_size) {};

/**
 * @param {!Int8Array|!Int16Array|!Int32Array|!Uint8Array|!Uint16Array|!Uint32Array} base_buffer
 * @param {!Int8Array|!Int16Array|!Int32Array|!Uint8Array|!Uint16Array|!Uint32Array} check_buffer
 * @return {!doublearray.DoubleArray}
 */
doublearray.load = function(base_buffer, check_buffer) {};
