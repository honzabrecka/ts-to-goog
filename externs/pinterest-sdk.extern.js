/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/pinterest-sdk/index.d.ts:

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
/** @const */
var PDK = {};

/** @const */
PDK.OAuthScopes = {};
/** @const {number} */
PDK.OAuthScopes.read_public;
/** @const {number} */
PDK.OAuthScopes.write_public;
/** @const {number} */
PDK.OAuthScopes.read_relationships;
/** @const {number} */
PDK.OAuthScopes.write_relationships;

/** @const */
PDK.HttpMethod = {};
/** @const {number} */
PDK.HttpMethod.get;
/** @const {number} */
PDK.HttpMethod.put;
/** @const {number} */
PDK.HttpMethod.post;
/** @const {number} */
PDK.HttpMethod.delete;

/** @typedef {{accessToken: string, scope: string, error: string}} */
PDK.OauthSession;
/**
 * @record
 * @struct
 */
PDK.LoginOptions = function() {};
 /** @type {(string|PDK.OAuthScopes)} */
PDK.LoginOptions.prototype.scope;
 /** @type {string} */
PDK.LoginOptions.prototype.method;
 /** @type {string} */
PDK.LoginOptions.prototype.appId;
 /** @type {boolean} */
PDK.LoginOptions.prototype.cookie;
 /** @type {boolean} */
PDK.LoginOptions.prototype.logging;
 /** @type {{accessToken: string, scope: string, error: string}} */
PDK.LoginOptions.prototype.session;
/**
 * @record
 * @struct
 */
PDK.OAuthRequestParams = function() {};
 /** @type {string} */
PDK.OAuthRequestParams.prototype.accessToken;
 /** @type {?} */
PDK.OAuthRequestParams.prototype.data;
/**
 * @record
 * @struct
 */
PDK.InitOptions = function() {};
 /** @type {string} */
PDK.InitOptions.prototype.appId;
 /** @type {boolean} */
PDK.InitOptions.prototype.cookie;
 /** @type {boolean} */
PDK.InitOptions.prototype.logging;
 /** @type {{accessToken: string, scope: string, error: string}} */
PDK.InitOptions.prototype.session;
/**
 * @record
 * @struct
 */
PDK.PinData = function() {};
 /** @type {string} */
PDK.PinData.prototype.board;
 /** @type {string} */
PDK.PinData.prototype.note;
 /** @type {string} */
PDK.PinData.prototype.link;
 /** @type {string} */
PDK.PinData.prototype.image_url;

/**
 * Get information on the currently authenticated user
 * Get information on the currently authenticated user
 * Get information on the currently authenticated user
 * @param {!Function|string} callback_or_path   the url path
 * @param {!Function|!Object=} callback_or_params the parameters for the request
 * @param {!Function=} callback
 * @return {void}
 */
PDK.me = function(callback_or_path, callback_or_params, callback) {};

/**
 * Make an API call to the server
 * 
 * The path is the only required argument.
 * 
 * @param {string} path   URL path
 * @param {(string|PDK.HttpMethod)=} httpMethod HTTP verb
 * @param {!PDK.PinData=} data
 * @param {!Function=} callback
 * @return {void}
 */
PDK.request = function(path, httpMethod, data, callback) {};

/**
 * Show user login dialog, and save access token
 * @param {!PDK.LoginOptions} options
 * @param {!Function} callback
 * @return {void}
 */
PDK.login = function(options, callback) {};

/**
 * Remove the session of the current user.
 * 
 * Need to call login to re-connect, unless session is saved on server.
 * @param {function({accessToken: string, scope: string, error: string}): ?=} callback
 * @return {void}
 */
PDK.logout = function(callback) {};

/**
 * Get the active session for the current user
 * @return {{accessToken: string, scope: string, error: string}}
 */
PDK.getSession = function() {};

/**
 * Save the user specified session
 * @param {{accessToken: string, scope: string, error: string}} session
 * @param {function({accessToken: string, scope: string, error: string}): ?=} callback
 * @return {void}
 */
PDK.setSession = function(session, callback) {};

/**
 * Initialize the library.
 * 
 * Typical initialization enabling all optional features:
 * ```
 *      <script src="pin-sdk.js"></script>
 *      <script>
 *        PDK.init({
 *          appId  : 'YOUR APP ID',
 *          cookie : true // enable cookies to allow the server to access the session
 *        });
 *      </script>
 * ```
 * The best place to put this code is right before the closing
 * `</body>` tag.
 * 
 * - Asynchronous Loading -
 * 
 * The library makes non-blocking loading of the script easy to use by
 * providing the `pAsyncInit` hook. If this global export function is defined, it
 * will be executed when the library is loaded:
 * ```
 *     <div id="p-root"></div>
 *     <script>
 *       window.pAsyncInit = function() {
 *         PDK.init({
 *           appId  : 'YOUR APP ID',
 *           cookie : true // enable cookies to allow the server to access the session
 *         });
 *       };
 * 
 *       (function() {
 *         var e = document.createElement('script');
 *         e.src = 'pin-sdk.js';
 *         e.async = true;
 *         document.getElementById('p-root').appendChild(e);
 *       }());
 *     </script>
 * ```
 * @param {!PDK.InitOptions} options
 * @return {void}
 */
PDK.init = function(options) {};

/**
 * Allow an unauthenticated user to pin using a popup
 * 
 * @param {string} imageUrl URL for image that you want to Pin.
 * @param {string} note     The Pin's description.
 * @param {string} url      The URL the Pin will link to when you click through.
 * @param {!Function} callback
 * @return {void}
 */
PDK.pin = function(imageUrl, note, url, callback) {};
