/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/prosemirror-commands/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/**
 * @param {?} state
 * @param {?=} dispatch
 * @return {boolean}
 */
function deleteSelection(state, dispatch) {}

/**
 * @param {?} state
 * @param {?=} dispatch
 * @param {?=} view
 * @return {boolean}
 */
function joinBackward(state, dispatch, view) {}

/**
 * @param {?} state
 * @param {?=} dispatch
 * @param {?=} view
 * @return {boolean}
 */
function joinForward(state, dispatch, view) {}

/**
 * @param {?} state
 * @param {?=} dispatch
 * @return {boolean}
 */
function joinUp(state, dispatch) {}

/**
 * @param {?} state
 * @param {?=} dispatch
 * @return {boolean}
 */
function joinDown(state, dispatch) {}

/**
 * @param {?} state
 * @param {?=} dispatch
 * @return {boolean}
 */
function lift(state, dispatch) {}

/**
 * @param {?} state
 * @param {?=} dispatch
 * @return {boolean}
 */
function newlineInCode(state, dispatch) {}

/**
 * @param {?} state
 * @param {?=} dispatch
 * @return {boolean}
 */
function exitCode(state, dispatch) {}

/**
 * @param {?} state
 * @param {?=} dispatch
 * @return {boolean}
 */
function createParagraphNear(state, dispatch) {}

/**
 * @param {?} state
 * @param {?=} dispatch
 * @return {boolean}
 */
function liftEmptyBlock(state, dispatch) {}

/**
 * @param {?} state
 * @param {?=} dispatch
 * @return {boolean}
 */
function splitBlock(state, dispatch) {}

/**
 * @param {?} state
 * @param {?=} dispatch
 * @return {boolean}
 */
function splitBlockKeepMarks(state, dispatch) {}

/**
 * @param {?} state
 * @param {?=} dispatch
 * @return {boolean}
 */
function selectParentNode(state, dispatch) {}

/**
 * @param {?} state
 * @param {?=} dispatch
 * @return {boolean}
 */
function selectAll(state, dispatch) {}

/**
 * @param {?} nodeType
 * @param {!Object=} attrs
 * @return {?}
 */
function wrapIn(nodeType, attrs) {}

/**
 * @param {?} nodeType
 * @param {!Object=} attrs
 * @return {?}
 */
function setBlockType(nodeType, attrs) {}

/**
 * @param {?} markType
 * @param {!Object=} attrs
 * @return {?}
 */
function toggleMark(markType, attrs) {}

/**
 * @param {?} command
 * @param {(?|!Array<string>)} isJoinable
 * @return {?}
 */
function autoJoin(command, isJoinable) {}

/**
 * @param {...?} commands
 * @return {?}
 */
function chainCommands(commands) {}
 /** @type {?} */
var baseKeymap;
