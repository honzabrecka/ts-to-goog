/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/urbanairship-cordova/index.d.ts:
/** @const */
var UrbanAirshipPlugin = {};
/**
 * @record
 * @struct
 */
UrbanAirshipPlugin.UrbanAirshipStatic = function() {};
 /** @type {{none: number, badge: number, sound: number, alert: number}} */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.notificationType;

/**
 * Enables or disables user notifications on the device.
 * This will prompt users to opt-in to notifications on iOS.
 * 
 * @param {boolean} enabled Set to true to enable notifications, false to disable.
 * @param {function(string): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.setUserNotificationsEnabled = function(enabled, callback) {};

/**
 * Checks if user notifications are enabled or not.
 * 
 * @param {function(boolean): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.isUserNotificationsEnabled = function(callback) {};

/**
 * Get the push identifier for the device. The channel ID is used to send
 * messages to the device for testing, and is the canonical identifier for
 * the device in Urban Airship.
 * 
 * @param {function(string): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.getChannelID = function(callback) {};

/**
 * Returns the push message object that contains the data associated with a
 * push notification. The extras dictionary can contain arbitrary key/value
 * data that you use in your application.
 * 
 * @param {boolean} clear Set to true to clear the notification.
 * @param {function(!UrbanAirshipPlugin.PushEvent): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.getLaunchNotification = function(clear, callback) {};

/**
 * Enables or disables quiet time.
 * 
 * @param {boolean} enabled Set to true to enable quiet time, false to disable.
 * @param {function(): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.setQuietTimeEnabled = function(enabled, callback) {};

/**
 * Checks if quiet time is enabled or not.
 * 
 * @param {function(boolean): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.isQuietTimeEnabled = function(callback) {};

/**
 * Set the quiet time for the device.
 * 
 * @param {number} startHour The start hour for quiet time.
 * @param {number} startMinute The start minute for quiet time.
 * @param {number} endHour The end hour for quiet time.
 * @param {number} endMinute the end minute for quiet time.
 * @param {function(): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.setQuietTime = function(startHour, startMinute, endHour, endMinute, callback) {};

/**
 * Get the current quiet time. The quietTime object represents a timespan
 * during which notifications should be silenced. The typical use case is
 * to expose a preference to your users so that they can enable this setting
 * and specify an interval during which they do not wish to be disturbed.
 * 
 * @param {function(!UrbanAirshipPlugin.QuietTimeTimeSpan): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.getQuietTime = function(callback) {};

/**
 * Checks if quiet time is currently in effect.
 * 
 * @param {function(boolean): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.isInQuietTime = function(callback) {};

/**
 * (iOS Only)
 * 
 * On iOS, registration for push requires specifying what
 * combination of badges, sound and alerts are desired. This function
 * must be explicitly called in order to begin the registration process.
 * 
 * For example:
 * 
 * UAirship.setNotificationTypes(UAirship.notificationType.sound |
 *                                  UAirship.notificationType.alert);
 * 
 * @param {number} bitmask The notification types to set.
 * @param {function(): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.setNotificationTypes = function(bitmask, callback) {};

/**
 * (iOS Only)
 * 
 * Set whether the UA Autobadge feature is enabled.
 * 
 * @param {boolean} enabled Set to true to enable Autobadge, false to disable.
 * @param {function(): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.setAutobadgeEnabled = function(enabled, callback) {};

/**
 * (iOS Only)
 * 
 * Set the current application badge number.
 * 
 * @param {number} badge The number to use for the badge.
 * @param {function(): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.setBadgeNumber = function(badge, callback) {};

/**
 * (iOS Only)
 * 
 * Gets the current application badge number.
 * 
 * @param {function(number): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.getBadgeNumber = function(callback) {};

/**
 * (iOS Only)
 * 
 * Reset the badge number to zero.
 * 
 * @param {function(): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.resetBadge = function(callback) {};

/**
 * (Android Only)
 * 
 * Clears the notifications posted by the application.
 * 
 * @param {function(): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.clearNotifications = function(callback) {};

/**
 * (Android only, iOS sound settings come in the push)
 * 
 * Set whether the device makes sound on push.
 * 
 * @param {boolean} enabled Set to true to enable sound, false to disable.
 * @param {function(): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.setSoundEnabled = function(enabled, callback) {};

/**
 * (Android Only)
 * 
 * Checks if sound is enabled or not.
 * 
 * @param {function(boolean): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.isSoundEnabled = function(callback) {};

/**
 * (Android Only)
 * 
 * Set whether the device vibrates on push.
 * 
 * @param {boolean} enabled Set to true to enable vibration, false to disable.
 * @param {function(): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.setVibrateEnabled = function(enabled, callback) {};

/**
 * (Android Only)
 * 
 * Checks if vibration is enabled or not.
 * 
 * @param {function(boolean): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.isVibrateEnabled = function(callback) {};

/**
 * Sets tags for the device.
 * 
 * @param {!Array<string>} tags An array of tags.
 * @param {function(): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.setTags = function(tags, callback) {};

/**
 * Returns the tags for the device.
 * 
 * @param {function(!Array<string>): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.getTags = function(callback) {};

/**
 * Set alias for the device.
 * 
 * @param {string} alias The alias to set for this device.
 * @param {function(): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.setAlias = function(alias, callback) {};

/**
 * Gets the alias for this device.
 * 
 * @param {function(string): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.getAlias = function(callback) {};

/**
 * Set the named user ID for this device.
 * 
 * @param {string} namedUserId
 * @param {function(): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.setNamedUser = function(namedUserId, callback) {};

/**
 * Gets the named user ID for this device.
 * 
 * @param {function(string): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.getNamedUser = function(callback) {};

/**
 * Fluent API to edit the named user tag groups by adding or removing
 * tags, then applying the changes.
 * 
 * For example:
 * 
 * UAirship.editNamedUserTagGroups()
 *      .addTags("loyalty", ["platinum-member", "gold-member"])
 *      .removeTags("loyalty", ["silver-member", "bronze-member"])
 *      .apply()
 * 
 * @return {!UrbanAirshipPlugin.EditNamedUserTagGroupsApi} The chainable API instance.
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.editNamedUserTagGroups = function() {};

/**
 * Fluent API to edit the channel tag groups by adding or removing tags,
 * then applying the changes.
 * 
 * For exmaple:
 * 
 * UAirship.editChannelTagGroups()
 *      .addTags("loyalty", ["platinum-member", "gold-member"])
 *      .removeTags("loyalty", ["silver-member", "bronze-member"])
 *      .apply()
 * @return {!UrbanAirshipPlugin.EditChannelTagGroupsApi}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.editChannelTagGroups = function() {};

/**
 * Enables or disables analytics. Disabling analytics will delete any
 * locally stored events and prevent any events from uploading. Features
 * that depend on analytics being enabled may not work properly if itâ€™s
 * disabled (reports, region triggers, location segmentation, push to
 * local time).
 * 
 * @param {boolean} enabled Set to true to enable analytics, false to disable.
 * @param {function(): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.setAnalyticsEnabled = function(enabled, callback) {};

/**
 * Checks if analytics is enabled or not.
 * 
 * @param {function(boolean): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.isAnalyticsEnabled = function(callback) {};

/**
 * Runs an Urban Airship action.
 * 
 * @param {string} actionName The name of the action to run.
 * @param {string} actionValue The value for the action.
 * @param {function(!UrbanAirshipPlugin.RunActionResult): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.runAction = function(actionName, actionValue, callback) {};

/**
 * Enables or disables Urban Airship location services on the device.
 * 
 * @param {boolean} enabled Set to true to enable location, false to disable.
 * @param {function(): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.setLocationEnabled = function(enabled, callback) {};

/**
 * Checks if location is enabled or not.
 * 
 * @param {function(boolean): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.isLocationEnabled = function(callback) {};

/**
 * Enables or disables background location on the device.
 * 
 * @param {boolean} enabled Set to true to enable background location, false to disable.
 * @param {function(): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.setBackgroundLocationEnabled = function(enabled, callback) {};

/**
 * Checks if background location updates are enabled or not.
 * 
 * @param {function(): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.isBackgroundLocationEnabled = function(callback) {};

/**
 * Records the current location of the device.
 * 
 * @param {function(): void} callback The function to call on completion.
 * @return {void}
 */
UrbanAirshipPlugin.UrbanAirshipStatic.prototype.recordCurrentLocation = function(callback) {};
/**
 * @record
 * @struct
 */
UrbanAirshipPlugin.EditNamedUserTagGroupsApi = function() {};
 /** @type {function(string, !Array<string>): !UrbanAirshipPlugin.EditNamedUserTagGroupsApi} */
UrbanAirshipPlugin.EditNamedUserTagGroupsApi.prototype.addTags;
 /** @type {function(string, !Array<string>): !UrbanAirshipPlugin.EditNamedUserTagGroupsApi} */
UrbanAirshipPlugin.EditNamedUserTagGroupsApi.prototype.removeTags;
 /** @type {function(function(): void): void} */
UrbanAirshipPlugin.EditNamedUserTagGroupsApi.prototype.apply;
/**
 * @record
 * @struct
 */
UrbanAirshipPlugin.EditChannelTagGroupsApi = function() {};
 /** @type {function(string, !Array<string>): !UrbanAirshipPlugin.EditChannelTagGroupsApi} */
UrbanAirshipPlugin.EditChannelTagGroupsApi.prototype.addTags;
 /** @type {function(string, !Array<string>): !UrbanAirshipPlugin.EditChannelTagGroupsApi} */
UrbanAirshipPlugin.EditChannelTagGroupsApi.prototype.removeTags;
 /** @type {function(function(): void): void} */
UrbanAirshipPlugin.EditChannelTagGroupsApi.prototype.apply;
/**
 * @record
 * @struct
 */
UrbanAirshipPlugin.PushEvent = function() {};
 /** @type {string} */
UrbanAirshipPlugin.PushEvent.prototype.message;
 /** @type {!Object<string,?>} */
UrbanAirshipPlugin.PushEvent.prototype.extras;
/**
 * @record
 * @struct
 */
UrbanAirshipPlugin.RegistrationEvent = function() {};
 /** @type {string} */
UrbanAirshipPlugin.RegistrationEvent.prototype.error;
 /** @type {string} */
UrbanAirshipPlugin.RegistrationEvent.prototype.channelID;
 /** @type {string} */
UrbanAirshipPlugin.RegistrationEvent.prototype.deviceToken;
/**
 * @record
 * @struct
 */
UrbanAirshipPlugin.QuietTimeTimeSpan = function() {};
 /** @type {number} */
UrbanAirshipPlugin.QuietTimeTimeSpan.prototype.startHour;
 /** @type {number} */
UrbanAirshipPlugin.QuietTimeTimeSpan.prototype.startMinute;
 /** @type {number} */
UrbanAirshipPlugin.QuietTimeTimeSpan.prototype.endHour;
 /** @type {number} */
UrbanAirshipPlugin.QuietTimeTimeSpan.prototype.endMinute;
/**
 * @record
 * @struct
 */
UrbanAirshipPlugin.RunActionResult = function() {};
 /** @type {string} */
UrbanAirshipPlugin.RunActionResult.prototype.error;
 /** @type {?} */
UrbanAirshipPlugin.RunActionResult.prototype.value;
 /** @type {!UrbanAirshipPlugin.UrbanAirshipStatic} */
var UAirship;

/**
 * @param {string} type
 * @param {function(!UrbanAirshipPlugin.PushEvent): void|function(!UrbanAirshipPlugin.RegistrationEvent): void} listener
 * @param {boolean=} useCapture
 * @return {void}
 */
Document.prototype.addEventListener = function(type, listener, useCapture) {};
