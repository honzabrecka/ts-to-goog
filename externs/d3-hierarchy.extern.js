/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/d3-hierarchy/index.d.ts:
/**
 * @record
 * @struct
 */
function HierarchyLink() {}
 /** @type {?} */
HierarchyLink.prototype.source;
 /** @type {?} */
HierarchyLink.prototype.target;
/**
 * @record
 * @struct
 */
function HierarchyNode() {}
 /** @type {?} */
HierarchyNode.prototype.data;
 /** @type {number} */
HierarchyNode.prototype.depth;
 /** @type {number} */
HierarchyNode.prototype.height;
 /** @type {?} */
HierarchyNode.prototype.parent;
 /** @type {!Array<?>} */
HierarchyNode.prototype.children;
 /** @type {number} */
HierarchyNode.prototype.value;
 /** @type {string} */
HierarchyNode.prototype.id;

/**
 * @return {!Array<?>}
 */
HierarchyNode.prototype.ancestors = function() {};

/**
 * @return {!Array<?>}
 */
HierarchyNode.prototype.descendants = function() {};

/**
 * @return {!Array<?>}
 */
HierarchyNode.prototype.leaves = function() {};

/**
 * @param {?} target
 * @return {!Array<?>}
 */
HierarchyNode.prototype.path = function(target) {};

/**
 * @return {!Array<?>}
 */
HierarchyNode.prototype.links = function() {};

/**
 * @param {?} value
 * @return {?}
 */
HierarchyNode.prototype.sum = function(value) {};

/**
 * @return {?}
 */
HierarchyNode.prototype.count = function() {};

/**
 * @param {?} compare
 * @return {?}
 */
HierarchyNode.prototype.sort = function(compare) {};

/**
 * @param {?} func
 * @return {?}
 */
HierarchyNode.prototype.each = function(func) {};

/**
 * @param {?} func
 * @return {?}
 */
HierarchyNode.prototype.eachAfter = function(func) {};

/**
 * @param {?} func
 * @return {?}
 */
HierarchyNode.prototype.eachBefore = function(func) {};

/**
 * @return {?}
 */
HierarchyNode.prototype.copy = function() {};

/**
 * @template Datum
 * @param {?} data
 * @param {?=} children
 * @return {?}
 */
function hierarchy(data, children) {}
/**
 * @record
 * @struct
 */
function StratifyOperator() {}

/* TODO: CallSignature:  */

/**
 * @param {?=} id
 * @return {?}
 */
StratifyOperator.prototype.id = function(id) {};

/**
 * @param {?=} parentId
 * @return {?}
 */
StratifyOperator.prototype.parentId = function(parentId) {};

/**
 * @template Datum
 * @return {?}
 */
function stratify() {}
/**
 * @record
 * @struct
 */
function HierarchyPointLink() {}
 /** @type {?} */
HierarchyPointLink.prototype.source;
 /** @type {?} */
HierarchyPointLink.prototype.target;
/**
 * @record
 * @struct
 */
function HierarchyPointNode() {}
 /** @type {number} */
HierarchyPointNode.prototype.x;
 /** @type {number} */
HierarchyPointNode.prototype.y;
 /** @type {?} */
HierarchyPointNode.prototype.data;
 /** @type {number} */
HierarchyPointNode.prototype.depth;
 /** @type {number} */
HierarchyPointNode.prototype.height;
 /** @type {?} */
HierarchyPointNode.prototype.parent;
 /** @type {!Array<?>} */
HierarchyPointNode.prototype.children;
 /** @type {number} */
HierarchyPointNode.prototype.value;
 /** @type {string} */
HierarchyPointNode.prototype.id;

/**
 * @return {!Array<?>}
 */
HierarchyPointNode.prototype.ancestors = function() {};

/**
 * @return {!Array<?>}
 */
HierarchyPointNode.prototype.descendants = function() {};

/**
 * @return {!Array<?>}
 */
HierarchyPointNode.prototype.leaves = function() {};

/**
 * @param {?} target
 * @return {!Array<?>}
 */
HierarchyPointNode.prototype.path = function(target) {};

/**
 * @return {!Array<?>}
 */
HierarchyPointNode.prototype.links = function() {};

/**
 * @param {?} value
 * @return {?}
 */
HierarchyPointNode.prototype.sum = function(value) {};

/**
 * @return {?}
 */
HierarchyPointNode.prototype.count = function() {};

/**
 * @param {?} compare
 * @return {?}
 */
HierarchyPointNode.prototype.sort = function(compare) {};

/**
 * @param {?} func
 * @return {?}
 */
HierarchyPointNode.prototype.each = function(func) {};

/**
 * @param {?} func
 * @return {?}
 */
HierarchyPointNode.prototype.eachAfter = function(func) {};

/**
 * @param {?} func
 * @return {?}
 */
HierarchyPointNode.prototype.eachBefore = function(func) {};

/**
 * @return {?}
 */
HierarchyPointNode.prototype.copy = function() {};
/**
 * @record
 * @struct
 */
function ClusterLayout() {}

/* TODO: CallSignature:  */

/**
 * @param {!Array<?>=} size
 * @return {!Array<?>|?}
 */
ClusterLayout.prototype.size = function(size) {};

/**
 * @param {!Array<?>=} size
 * @return {!Array<?>|?}
 */
ClusterLayout.prototype.nodeSize = function(size) {};

/**
 * @param {?=} separation
 * @return {?}
 */
ClusterLayout.prototype.separation = function(separation) {};

/**
 * @template Datum
 * @return {?}
 */
function cluster() {}
/**
 * @record
 * @struct
 */
function TreeLayout() {}

/* TODO: CallSignature:  */

/**
 * @param {!Array<?>=} size
 * @return {!Array<?>|?}
 */
TreeLayout.prototype.size = function(size) {};

/**
 * @param {!Array<?>=} size
 * @return {!Array<?>|?}
 */
TreeLayout.prototype.nodeSize = function(size) {};

/**
 * @param {?=} separation
 * @return {?}
 */
TreeLayout.prototype.separation = function(separation) {};

/**
 * @template Datum
 * @return {?}
 */
function tree() {}
/**
 * @record
 * @struct
 */
function HierarchyRectangularLink() {}
 /** @type {?} */
HierarchyRectangularLink.prototype.source;
 /** @type {?} */
HierarchyRectangularLink.prototype.target;
/**
 * @record
 * @struct
 */
function HierarchyRectangularNode() {}
 /** @type {number} */
HierarchyRectangularNode.prototype.x0;
 /** @type {number} */
HierarchyRectangularNode.prototype.y0;
 /** @type {number} */
HierarchyRectangularNode.prototype.x1;
 /** @type {number} */
HierarchyRectangularNode.prototype.y1;
 /** @type {?} */
HierarchyRectangularNode.prototype.data;
 /** @type {number} */
HierarchyRectangularNode.prototype.depth;
 /** @type {number} */
HierarchyRectangularNode.prototype.height;
 /** @type {?} */
HierarchyRectangularNode.prototype.parent;
 /** @type {!Array<?>} */
HierarchyRectangularNode.prototype.children;
 /** @type {number} */
HierarchyRectangularNode.prototype.value;
 /** @type {string} */
HierarchyRectangularNode.prototype.id;

/**
 * @return {!Array<?>}
 */
HierarchyRectangularNode.prototype.ancestors = function() {};

/**
 * @return {!Array<?>}
 */
HierarchyRectangularNode.prototype.descendants = function() {};

/**
 * @return {!Array<?>}
 */
HierarchyRectangularNode.prototype.leaves = function() {};

/**
 * @param {?} target
 * @return {!Array<?>}
 */
HierarchyRectangularNode.prototype.path = function(target) {};

/**
 * @return {!Array<?>}
 */
HierarchyRectangularNode.prototype.links = function() {};

/**
 * @param {?} value
 * @return {?}
 */
HierarchyRectangularNode.prototype.sum = function(value) {};

/**
 * @return {?}
 */
HierarchyRectangularNode.prototype.count = function() {};

/**
 * @param {?} compare
 * @return {?}
 */
HierarchyRectangularNode.prototype.sort = function(compare) {};

/**
 * @param {?} func
 * @return {?}
 */
HierarchyRectangularNode.prototype.each = function(func) {};

/**
 * @param {?} func
 * @return {?}
 */
HierarchyRectangularNode.prototype.eachAfter = function(func) {};

/**
 * @param {?} func
 * @return {?}
 */
HierarchyRectangularNode.prototype.eachBefore = function(func) {};

/**
 * @return {?}
 */
HierarchyRectangularNode.prototype.copy = function() {};
/**
 * @record
 * @struct
 */
function TreemapLayout() {}

/* TODO: CallSignature:  */

/**
 * @param {?=} tile
 * @return {?}
 */
TreemapLayout.prototype.tile = function(tile) {};

/**
 * @param {!Array<?>=} size
 * @return {!Array<?>|?}
 */
TreemapLayout.prototype.size = function(size) {};

/**
 * @param {boolean=} round
 * @return {boolean|?}
 */
TreemapLayout.prototype.round = function(round) {};

/**
 * @param {number|?=} padding
 * @return {?}
 */
TreemapLayout.prototype.padding = function(padding) {};

/**
 * @param {number|?=} padding
 * @return {?}
 */
TreemapLayout.prototype.paddingInner = function(padding) {};

/**
 * @param {number|?=} padding
 * @return {?}
 */
TreemapLayout.prototype.paddingOuter = function(padding) {};

/**
 * @param {number|?=} padding
 * @return {?}
 */
TreemapLayout.prototype.paddingTop = function(padding) {};

/**
 * @param {number|?=} padding
 * @return {?}
 */
TreemapLayout.prototype.paddingRight = function(padding) {};

/**
 * @param {number|?=} padding
 * @return {?}
 */
TreemapLayout.prototype.paddingBottom = function(padding) {};

/**
 * @param {number|?=} padding
 * @return {?}
 */
TreemapLayout.prototype.paddingLeft = function(padding) {};

/**
 * @template Datum
 * @return {?}
 */
function treemap() {}

/**
 * @param {?} node
 * @param {number} x0
 * @param {number} y0
 * @param {number} x1
 * @param {number} y1
 * @return {void}
 */
function treemapBinary(node, x0, y0, x1, y1) {}

/**
 * @param {?} node
 * @param {number} x0
 * @param {number} y0
 * @param {number} x1
 * @param {number} y1
 * @return {void}
 */
function treemapDice(node, x0, y0, x1, y1) {}

/**
 * @param {?} node
 * @param {number} x0
 * @param {number} y0
 * @param {number} x1
 * @param {number} y1
 * @return {void}
 */
function treemapSlice(node, x0, y0, x1, y1) {}

/**
 * @param {?} node
 * @param {number} x0
 * @param {number} y0
 * @param {number} x1
 * @param {number} y1
 * @return {void}
 */
function treemapSliceDice(node, x0, y0, x1, y1) {}
/**
 * @record
 * @struct
 */
function RatioSquarifyTilingFactory() {}

/* TODO: CallSignature:  */

/**
 * @param {number} ratio
 * @return {?}
 */
RatioSquarifyTilingFactory.prototype.ratio = function(ratio) {};
 /** @type {?} */
var treemapSquarify;
 /** @type {?} */
var treemapResquarify;
/**
 * @record
 * @struct
 */
function PartitionLayout() {}

/* TODO: CallSignature:  */

/**
 * @param {!Array<?>=} size
 * @return {!Array<?>|?}
 */
PartitionLayout.prototype.size = function(size) {};

/**
 * @param {boolean=} round
 * @return {boolean|?}
 */
PartitionLayout.prototype.round = function(round) {};

/**
 * @param {number=} padding
 * @return {number|?}
 */
PartitionLayout.prototype.padding = function(padding) {};

/**
 * @template Datum
 * @return {?}
 */
function partition() {}
/**
 * @record
 * @struct
 */
function HierarchyCircularLink() {}
 /** @type {?} */
HierarchyCircularLink.prototype.source;
 /** @type {?} */
HierarchyCircularLink.prototype.target;
/**
 * @record
 * @struct
 */
function HierarchyCircularNode() {}
 /** @type {number} */
HierarchyCircularNode.prototype.x;
 /** @type {number} */
HierarchyCircularNode.prototype.y;
 /** @type {number} */
HierarchyCircularNode.prototype.r;
 /** @type {?} */
HierarchyCircularNode.prototype.data;
 /** @type {number} */
HierarchyCircularNode.prototype.depth;
 /** @type {number} */
HierarchyCircularNode.prototype.height;
 /** @type {?} */
HierarchyCircularNode.prototype.parent;
 /** @type {!Array<?>} */
HierarchyCircularNode.prototype.children;
 /** @type {number} */
HierarchyCircularNode.prototype.value;
 /** @type {string} */
HierarchyCircularNode.prototype.id;

/**
 * @return {!Array<?>}
 */
HierarchyCircularNode.prototype.ancestors = function() {};

/**
 * @return {!Array<?>}
 */
HierarchyCircularNode.prototype.descendants = function() {};

/**
 * @return {!Array<?>}
 */
HierarchyCircularNode.prototype.leaves = function() {};

/**
 * @param {?} target
 * @return {!Array<?>}
 */
HierarchyCircularNode.prototype.path = function(target) {};

/**
 * @return {!Array<?>}
 */
HierarchyCircularNode.prototype.links = function() {};

/**
 * @param {?} value
 * @return {?}
 */
HierarchyCircularNode.prototype.sum = function(value) {};

/**
 * @return {?}
 */
HierarchyCircularNode.prototype.count = function() {};

/**
 * @param {?} compare
 * @return {?}
 */
HierarchyCircularNode.prototype.sort = function(compare) {};

/**
 * @param {?} func
 * @return {?}
 */
HierarchyCircularNode.prototype.each = function(func) {};

/**
 * @param {?} func
 * @return {?}
 */
HierarchyCircularNode.prototype.eachAfter = function(func) {};

/**
 * @param {?} func
 * @return {?}
 */
HierarchyCircularNode.prototype.eachBefore = function(func) {};

/**
 * @return {?}
 */
HierarchyCircularNode.prototype.copy = function() {};
/**
 * @record
 * @struct
 */
function PackLayout() {}

/* TODO: CallSignature:  */

/**
 * @param {?=} radius
 * @return {?}
 */
PackLayout.prototype.radius = function(radius) {};

/**
 * @param {!Array<?>=} size
 * @return {!Array<?>|?}
 */
PackLayout.prototype.size = function(size) {};

/**
 * @param {number|?=} padding
 * @return {?}
 */
PackLayout.prototype.padding = function(padding) {};

/**
 * @template Datum
 * @return {?}
 */
function pack() {}
/**
 * @record
 * @struct
 */
function PackCircle() {}
 /** @type {number} */
PackCircle.prototype.r;
 /** @type {number} */
PackCircle.prototype.x;
 /** @type {number} */
PackCircle.prototype.y;

/**
 * @template Datum
 * @param {!Array<?>} circles
 * @return {!Array<?>}
 */
function packSiblings(circles) {}

/**
 * @template Datum
 * @param {!Array<?>} circles
 * @return {?}
 */
function packEnclose(circles) {}
