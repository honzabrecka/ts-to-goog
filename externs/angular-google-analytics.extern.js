/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/angular-google-analytics/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "angular"
/** @const */
tsickle_declare_module.angular.google = {};
/** @const */
tsickle_declare_module.angular.google.analytics = {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.google.analytics.AnalyticsService = function() {};
 /** @type {!Array<!Object>} */
tsickle_declare_module.angular.google.analytics.AnalyticsService.prototype.log;
 /** @type {!Array<!Object>} */
tsickle_declare_module.angular.google.analytics.AnalyticsService.prototype.offlineQueue;
 /** @type {function(): string} */
tsickle_declare_module.angular.google.analytics.AnalyticsService.prototype.getUrl;
 /** @type {function(): void} */
tsickle_declare_module.angular.google.analytics.AnalyticsService.prototype.createScriptTag;
 /** @type {function(): void} */
tsickle_declare_module.angular.google.analytics.AnalyticsService.prototype.createAnalyticsScriptTag;
 /** @type {function(string, ?, string): void} */
tsickle_declare_module.angular.google.analytics.AnalyticsService.prototype.set;
 /** @type {function(string, string, !Object<string,?>): void} */
tsickle_declare_module.angular.google.analytics.AnalyticsService.prototype.trackPage;
 /** @type {function(string, string, string, ?, boolean, !Object<string,?>): void} */
tsickle_declare_module.angular.google.analytics.AnalyticsService.prototype.trackEvent;
 /** @type {function(string, boolean): void} */
tsickle_declare_module.angular.google.analytics.AnalyticsService.prototype.trackException;
 /** @type {function(boolean): void} */
tsickle_declare_module.angular.google.analytics.AnalyticsService.prototype.offline;

/**
 * \@summary If delayScriptTag(true) was set during configuration then manual script tag injection is required. 
 * @return {boolean}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsService.prototype.registerScriptTags = function() {};

/**
 * \@summary If delayScriptTag(true) was set during configuration then manual tracker setup is required.
 * @return {boolean}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsService.prototype.registerTrackers = function() {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider = function() {};

/**
 * \@summary Use Delay Script Tag Insertion.
 * @param {boolean} val
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.delayScriptTag = function(val) {};

/**
 * \@summary Activates the test mode.
 * @return {void}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.enterTestMode = function() {};

/**
 * \@summary Gets the global cookie configuration.
 * @return {!Object}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.getCookieConfig = function() {};

/**
 * \@summary Ignore first page view.
 * @param {boolean} val
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.ignoreFirstPageLoad = function(val) {};

/**
 * \@summary Enable Service Logging.
 * @param {boolean} val
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.logAllCalls = function(val) {};

/**
 * \@summary Set Google Analytics Accounts.
 * @param {(string|!Object|!Array<!Object>)} tracker
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.setAccount = function(tracker) {};

/**
 * \@summary Set Cookie Configuration.
 * @deprecated
 * @param {!Object} config
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.setCookieConfig = function(config) {};

/**
 * \@summary Set cross-linked domains.
 * @param {!Array<string>} domains
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.setCrossLinkDomains = function(domains) {};

/**
 * \@summary Set currency.
 * @param {string} currencyCode
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.setCurrency = function(currencyCode) {};

/**
 * \@summary Set Domain Name.
 * @param {string} domain
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.setDomainName = function(domain) {};

/**
 * \@summary Enable Experiment (universal analytics only).
 * @param {string} id
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.setExperimentId = function(id) {};

/**
 * \@summary Support Hybrid Mobile Applications.
 * @param {boolean} val
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.setHybridMobileSupport = function(val) {};

/**
 * \@summary Set the default page event name.
 * @param {string} name
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.setPageEvent = function(name) {};

/**
 * \@summary Sets the regex to scrub location before sending to analytics.
 * @param {!RegExp} regex
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.setRemoveRegExp = function(regex) {};

/**
 * \@summary Activate reading custom tracking urls from $routeProvider config (default is false)
 * This is more flexible than using RegExp and easier to maintain for multiple parameters.
 * It also reduces tracked pages to routes (only those with a templateUrl) defined in the
 * $routeProvider and therefore reduces bounce rate created by redirects.
 * See https://github.com/revolunet/angular-google-analytics#set-route-tracking-behaviors for details
 * $routeProvider config.
 * @param {boolean} useRoute
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.readFromRoute = function(useRoute) {};

/**
 * \@summary Starts the offline mode.
 * @param {boolean} val
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.startOffline = function(val) {};

/**
 * \@summary Track all routes.
 * @param {boolean} doTrack
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.trackPages = function(doTrack) {};

/**
 * \@summary Sets the URL prefix.
 * @param {string} prefix
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.trackPrefix = function(prefix) {};

/**
 * \@summary Track all URL query parameters.
 * @param {boolean} val
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.trackUrlParams = function(val) {};

/**
 * \@summary Use Classic Analytics.
 * @param {boolean} val
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.useAnalytics = function(val) {};

/**
 * \@summary Use Cross Domain Linking.
 * @param {boolean} val
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.useCrossDomainLinker = function(val) {};

/**
 * \@summary Use Display Features.
 * @param {boolean} val
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.useDisplayFeatures = function(val) {};

/**
 * \@summary Enable enhanced e-commerce module.
 * @param {boolean} val
 * @param {boolean} enhanced
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.useECommerce = function(val, enhanced) {};

/**
 * \@summary Use Enhanced Link Attribution.
 * @param {boolean} val
 * @return {!google.analytics.AnalyticsProvider}
 */
tsickle_declare_module.angular.google.analytics.AnalyticsProvider.prototype.useEnhancedLinkAttribution = function(val) {};
