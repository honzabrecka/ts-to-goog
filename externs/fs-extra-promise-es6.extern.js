/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/fs-extra-promise-es6/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/** @typedef {!Stats} */
var Stats;
/**
 * @record
 * @struct
 */
function FSWatcher() {}

/**
 * @return {void}
 */
FSWatcher.prototype.close = function() {};
/**
 * @constructor
 * @struct
 */
function ReadStream() {}
/**
 * @constructor
 * @struct
 */
function WriteStream() {}

/**
 * @param {string} src
 * @param {string} dest
 * @param {?=} callback_or_filter
 * @param {?=} callback
 * @return {void}
 */
function copy(src, dest, callback_or_filter, callback) {}

/**
 * @param {string} src
 * @param {string} dest
 * @param {?=} filter
 * @return {void}
 */
function copySync(src, dest, filter) {}

/**
 * @param {string} file
 * @param {?=} callback
 * @return {void}
 */
function createFile(file, callback) {}

/**
 * @param {string} file
 * @return {void}
 */
function createFileSync(file) {}

/**
 * @param {string} dir
 * @param {?=} callback
 * @return {void}
 */
function mkdirs(dir, callback) {}

/**
 * @param {string} dir
 * @param {?=} callback
 * @return {void}
 */
function mkdirp(dir, callback) {}

/**
 * @param {string} dir
 * @return {void}
 */
function mkdirsSync(dir) {}

/**
 * @param {string} dir
 * @return {void}
 */
function mkdirpSync(dir) {}

/**
 * @param {string} file
 * @param {?} data
 * @param {?=} callback
 * @return {void}
 */
function outputFile(file, data, callback) {}

/**
 * @param {string} file
 * @param {?} data
 * @return {void}
 */
function outputFileSync(file, data) {}

/**
 * @param {string} file
 * @param {?} data
 * @param {?=} callback
 * @return {void}
 */
function outputJson(file, data, callback) {}

/**
 * @param {string} file
 * @param {?} data
 * @param {?=} callback
 * @return {void}
 */
function outputJSON(file, data, callback) {}

/**
 * @param {string} file
 * @param {?} data
 * @return {void}
 */
function outputJsonSync(file, data) {}

/**
 * @param {string} file
 * @param {?} data
 * @return {void}
 */
function outputJSONSync(file, data) {}

/**
 * @param {string} file
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
function readJson(file, callback_or_options, callback) {}

/**
 * @param {string} file
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
function readJSON(file, callback_or_options, callback) {}

/**
 * @param {string} file
 * @param {?=} options
 * @return {void}
 */
function readJsonSync(file, options) {}

/**
 * @param {string} file
 * @param {?=} options
 * @return {void}
 */
function readJSONSync(file, options) {}

/**
 * @param {string} dir
 * @param {?=} callback
 * @return {void}
 */
function remove(dir, callback) {}

/**
 * @param {string} dir
 * @return {void}
 */
function removeSync(dir) {}

/**
 * @param {string} file
 * @param {?} object
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
function writeJson(file, object, callback_or_options, callback) {}

/**
 * @param {string} file
 * @param {?} object
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
function writeJSON(file, object, callback_or_options, callback) {}

/**
 * @param {string} file
 * @param {?} object
 * @param {?=} options
 * @return {void}
 */
function writeJsonSync(file, object, options) {}

/**
 * @param {string} file
 * @param {?} object
 * @param {?=} options
 * @return {void}
 */
function writeJSONSync(file, object, options) {}

/**
 * @param {string} oldPath
 * @param {string} newPath
 * @param {?=} callback
 * @return {void}
 */
function rename(oldPath, newPath, callback) {}

/**
 * @param {string} oldPath
 * @param {string} newPath
 * @return {void}
 */
function renameSync(oldPath, newPath) {}

/**
 * @param {number} fd
 * @param {number} len
 * @param {?=} callback
 * @return {void}
 */
function truncate(fd, len, callback) {}

/**
 * @param {number} fd
 * @param {number} len
 * @return {void}
 */
function truncateSync(fd, len) {}

/**
 * @param {string} path
 * @param {number} uid
 * @param {number} gid
 * @param {?=} callback
 * @return {void}
 */
function chown(path, uid, gid, callback) {}

/**
 * @param {string} path
 * @param {number} uid
 * @param {number} gid
 * @return {void}
 */
function chownSync(path, uid, gid) {}

/**
 * @param {number} fd
 * @param {number} uid
 * @param {number} gid
 * @param {?=} callback
 * @return {void}
 */
function fchown(fd, uid, gid, callback) {}

/**
 * @param {number} fd
 * @param {number} uid
 * @param {number} gid
 * @return {void}
 */
function fchownSync(fd, uid, gid) {}

/**
 * @param {string} path
 * @param {number} uid
 * @param {number} gid
 * @param {?=} callback
 * @return {void}
 */
function lchown(path, uid, gid, callback) {}

/**
 * @param {string} path
 * @param {number} uid
 * @param {number} gid
 * @return {void}
 */
function lchownSync(path, uid, gid) {}

/**
 * @param {string} path
 * @param {(string|number)} mode
 * @param {?=} callback
 * @return {void}
 */
function chmod(path, mode, callback) {}

/**
 * @param {string} path
 * @param {(string|number)} mode
 * @return {void}
 */
function chmodSync(path, mode) {}

/**
 * @param {number} fd
 * @param {(string|number)} mode
 * @param {?=} callback
 * @return {void}
 */
function fchmod(fd, mode, callback) {}

/**
 * @param {number} fd
 * @param {(string|number)} mode
 * @return {void}
 */
function fchmodSync(fd, mode) {}

/**
 * @param {string} path
 * @param {(string|number)} mode
 * @param {?=} callback
 * @return {void}
 */
function lchmod(path, mode, callback) {}

/**
 * @param {string} path
 * @param {(string|number)} mode
 * @return {void}
 */
function lchmodSync(path, mode) {}

/**
 * @param {string} path
 * @param {?=} callback
 * @return {void}
 */
function stat(path, callback) {}

/**
 * @param {string} path
 * @param {?=} callback
 * @return {void}
 */
function lstat(path, callback) {}

/**
 * @param {number} fd
 * @param {?=} callback
 * @return {void}
 */
function fstat(fd, callback) {}

/**
 * @param {string} path
 * @return {!Stats}
 */
function statSync(path) {}

/**
 * @param {string} path
 * @return {!Stats}
 */
function lstatSync(path) {}

/**
 * @param {number} fd
 * @return {!Stats}
 */
function fstatSync(fd) {}

/**
 * @param {string} srcpath
 * @param {string} dstpath
 * @param {?=} callback
 * @return {void}
 */
function link(srcpath, dstpath, callback) {}

/**
 * @param {string} srcpath
 * @param {string} dstpath
 * @return {void}
 */
function linkSync(srcpath, dstpath) {}

/**
 * @param {string} srcpath
 * @param {string} dstpath
 * @param {string=} type
 * @param {?=} callback
 * @return {void}
 */
function symlink(srcpath, dstpath, type, callback) {}

/**
 * @param {string} srcpath
 * @param {string} dstpath
 * @param {string=} type
 * @return {void}
 */
function symlinkSync(srcpath, dstpath, type) {}

/**
 * @param {string} path
 * @param {?=} callback
 * @return {void}
 */
function readlink(path, callback) {}

/**
 * @param {string} path
 * @param {?|string=} callback_or_cache
 * @param {?=} callback
 * @return {void}
 */
function realpath(path, callback_or_cache, callback) {}

/**
 * @param {string} path
 * @param {boolean=} cache
 * @return {string}
 */
function realpathSync(path, cache) {}

/**
 * @param {string} path
 * @param {?=} callback
 * @return {void}
 */
function unlink(path, callback) {}

/**
 * @param {string} path
 * @return {void}
 */
function unlinkSync(path) {}

/**
 * @param {string} path
 * @param {?=} callback
 * @return {void}
 */
function rmdir(path, callback) {}

/**
 * @param {string} path
 * @return {void}
 */
function rmdirSync(path) {}

/**
 * @param {string} path
 * @param {(string|number)=} mode
 * @param {?=} callback
 * @return {void}
 */
function mkdir(path, mode, callback) {}

/**
 * @param {string} path
 * @param {(string|number)=} mode
 * @return {void}
 */
function mkdirSync(path, mode) {}

/**
 * @param {string} path
 * @param {?=} callback
 * @return {void}
 */
function readdir(path, callback) {}

/**
 * @param {string} path
 * @return {!Array<string>}
 */
function readdirSync(path) {}

/**
 * @param {number} fd
 * @param {?=} callback
 * @return {void}
 */
function close(fd, callback) {}

/**
 * @param {number} fd
 * @return {void}
 */
function closeSync(fd) {}

/**
 * @param {string} path
 * @param {string} flags
 * @param {string=} mode
 * @param {?=} callback
 * @return {void}
 */
function open(path, flags, mode, callback) {}

/**
 * @param {string} path
 * @param {string} flags
 * @param {string=} mode
 * @return {number}
 */
function openSync(path, flags, mode) {}

/**
 * @param {string} path
 * @param {number} atime
 * @param {number} mtime
 * @param {?=} callback
 * @return {void}
 */
function utimes(path, atime, mtime, callback) {}

/**
 * @param {string} path
 * @param {number} atime
 * @param {number} mtime
 * @return {void}
 */
function utimesSync(path, atime, mtime) {}

/**
 * @param {number} fd
 * @param {number} atime
 * @param {number} mtime
 * @param {?=} callback
 * @return {void}
 */
function futimes(fd, atime, mtime, callback) {}

/**
 * @param {number} fd
 * @param {number} atime
 * @param {number} mtime
 * @return {void}
 */
function futimesSync(fd, atime, mtime) {}

/**
 * @param {number} fd
 * @param {?=} callback
 * @return {void}
 */
function fsync(fd, callback) {}

/**
 * @param {number} fd
 * @return {void}
 */
function fsyncSync(fd) {}

/**
 * @param {number} fd
 * @param {!NodeBuffer} buffer
 * @param {number} offset
 * @param {number} length
 * @param {number} position
 * @param {?=} callback
 * @return {void}
 */
function write(fd, buffer, offset, length, position, callback) {}

/**
 * @param {number} fd
 * @param {!NodeBuffer} buffer
 * @param {number} offset
 * @param {number} length
 * @param {number} position
 * @return {number}
 */
function writeSync(fd, buffer, offset, length, position) {}

/**
 * @param {number} fd
 * @param {!NodeBuffer} buffer
 * @param {number} offset
 * @param {number} length
 * @param {number} position
 * @param {?=} callback
 * @return {void}
 */
function read(fd, buffer, offset, length, position, callback) {}

/**
 * @param {number} fd
 * @param {!NodeBuffer} buffer
 * @param {number} offset
 * @param {number} length
 * @param {number} position
 * @return {number}
 */
function readSync(fd, buffer, offset, length, position) {}

/**
 * readFile
 * @param {string} filename
 * @param {(string|?)|?} options_or_callback 
 *          string: encoding
 *          OpenOptions: options
 * @param {?=} callback
 * @return {void}
 */
function readFile(filename, options_or_callback, callback) {}

/**
 * readFileSync
 * @param {string} filename
 * @param {(string|?)=} options 
 *          string: encoding
 *          OpenOptions: options
 * @return {!NodeBuffer|string}
 */
function readFileSync(filename, options) {}

/**
 * writeFile
 * @param {string} filename
 * @param {?} data
 * @param {(string|?)=} options 
 *          string: encoding
 *          OpenOptions: options
 * @param {?=} callback
 * @return {void}
 */
function writeFile(filename, data, options, callback) {}

/**
 * writeFileSync
 * @param {string} filename
 * @param {?} data
 * @param {(string|?)=} option 
 *          string: encoding
 *          OpenOptions: options
 * @return {void}
 */
function writeFileSync(filename, data, option) {}

/**
 * appendFile
 * @param {string} filename
 * @param {?} data
 * @param {(string|?)=} option
 * @param {?=} callback
 * @return {void}
 */
function appendFile(filename, data, option, callback) {}

/**
 * appendFileSync
 * @param {string} filename
 * @param {?} data
 * @param {(string|?)=} option 
 *          string: encoding
 *          OpenOptions: options
 * @return {void}
 */
function appendFileSync(filename, data, option) {}

/**
 * @param {string} filename
 * @param {?} listener_or_options
 * @param {?=} listener
 * @return {void}
 */
function watchFile(filename, listener_or_options, listener) {}

/**
 * @param {string} filename
 * @param {!Stats=} listener
 * @return {void}
 */
function unwatchFile(filename, listener) {}

/**
 * @param {string} filename
 * @param {?=} options
 * @param {?=} listener
 * @return {?}
 */
function watch(filename, options, listener) {}

/**
 * @param {string} path
 * @param {?=} callback
 * @return {void}
 */
function exists(path, callback) {}

/**
 * @param {string} path
 * @return {boolean}
 */
function existsSync(path) {}

/**
 * @param {string} path
 * @param {?} cb
 * @return {void}
 */
function ensureDir(path, cb) {}

/**
 * @param {string} path
 * @return {void}
 */
function ensureDirSync(path) {}
/**
 * @record
 * @struct
 */
function OpenOptions() {}
 /** @type {string} */
OpenOptions.prototype.encoding;
 /** @type {string} */
OpenOptions.prototype.flag;

/**
 * @param {(string|?)} path
 * @param {?=} options
 * @return {?}
 */
function createReadStream(path, options) {}

/**
 * @param {(string|?)} path
 * @param {?=} options
 * @return {?}
 */
function createWriteStream(path, options) {}

/**
 * @param {string} src
 * @param {string} dest
 * @param {?=} filter
 * @return {!Promise<void>}
 */
function copyAsync(src, dest, filter) {}

/**
 * @param {string} file
 * @return {!Promise<void>}
 */
function createFileAsync(file) {}

/**
 * @param {string} dir
 * @return {!Promise<void>}
 */
function mkdirsAsync(dir) {}

/**
 * @param {string} dir
 * @return {!Promise<void>}
 */
function mkdirpAsync(dir) {}

/**
 * @param {string} file
 * @param {?} data
 * @return {!Promise<void>}
 */
function outputFileAsync(file, data) {}

/**
 * @param {string} file
 * @param {?} data
 * @return {!Promise<void>}
 */
function outputJSONAsync(file, data) {}

/**
 * @param {string} file
 * @param {?=} options
 * @return {!Promise<void>}
 */
function readJSONAsync(file, options) {}

/**
 * @param {string} dir
 * @return {!Promise<void>}
 */
function removeAsync(dir) {}

/**
 * @param {string} file
 * @param {?} object
 * @param {?=} options
 * @return {!Promise<void>}
 */
function writeJsonAsync(file, object, options) {}

/**
 * @param {string} file
 * @param {?} object
 * @param {?=} options
 * @return {!Promise<void>}
 */
function writeJSONAsync(file, object, options) {}

/**
 * @param {string} oldPath
 * @param {string} newPath
 * @return {!Promise<void>}
 */
function renameAsync(oldPath, newPath) {}

/**
 * @param {number} fd
 * @param {number} len
 * @return {!Promise<void>}
 */
function truncateAsync(fd, len) {}

/**
 * @param {string} path
 * @param {number} uid
 * @param {number} gid
 * @return {!Promise<void>}
 */
function chownAsync(path, uid, gid) {}

/**
 * @param {number} fd
 * @param {number} uid
 * @param {number} gid
 * @return {!Promise<void>}
 */
function fchownAsync(fd, uid, gid) {}

/**
 * @param {string} path
 * @param {number} uid
 * @param {number} gid
 * @return {!Promise<void>}
 */
function lchownAsync(path, uid, gid) {}

/**
 * @param {string} path
 * @param {(string|number)} mode
 * @return {!Promise<void>}
 */
function chmodAsync(path, mode) {}

/**
 * @param {number} fd
 * @param {(string|number)} mode
 * @return {!Promise<void>}
 */
function fchmodAsync(fd, mode) {}

/**
 * @param {string} path
 * @param {(string|number)} mode
 * @return {!Promise<void>}
 */
function lchmodAsync(path, mode) {}

/**
 * @param {string} path
 * @return {!Promise<!Stats>}
 */
function statAsync(path) {}

/**
 * @param {string} path
 * @return {!Promise<!Stats>}
 */
function lstatAsync(path) {}

/**
 * @param {number} fd
 * @return {!Promise<!Stats>}
 */
function fstatAsync(fd) {}

/**
 * @param {string} srcpath
 * @param {string} dstpath
 * @return {!Promise<void>}
 */
function linkAsync(srcpath, dstpath) {}

/**
 * @param {string} srcpath
 * @param {string} dstpath
 * @param {string=} type
 * @return {!Promise<void>}
 */
function symlinkAsync(srcpath, dstpath, type) {}

/**
 * @param {string} path
 * @return {!Promise<string>}
 */
function readlinkAsync(path) {}

/**
 * @param {string} path
 * @param {string=} cache
 * @return {!Promise<string>}
 */
function realpathAsync(path, cache) {}

/**
 * @param {string} path
 * @return {!Promise<void>}
 */
function unlinkAsync(path) {}

/**
 * @param {string} path
 * @return {!Promise<void>}
 */
function rmdirAsync(path) {}

/**
 * @param {string} path
 * @param {(string|number)=} mode
 * @return {!Promise<void>}
 */
function mkdirAsync(path, mode) {}

/**
 * @param {string} path
 * @return {!Promise<!Array<string>>}
 */
function readdirAsync(path) {}

/**
 * @param {number} fd
 * @return {!Promise<void>}
 */
function closeAsync(fd) {}

/**
 * @param {string} path
 * @param {string} flags
 * @param {string=} mode
 * @return {!Promise<number>}
 */
function openAsync(path, flags, mode) {}

/**
 * @param {string} path
 * @param {number} atime
 * @param {number} mtime
 * @return {!Promise<void>}
 */
function utimesAsync(path, atime, mtime) {}

/**
 * @param {number} fd
 * @param {number} atime
 * @param {number} mtime
 * @return {!Promise<void>}
 */
function futimesAsync(fd, atime, mtime) {}

/**
 * @param {number} fd
 * @return {!Promise<void>}
 */
function fsyncAsync(fd) {}

/**
 * @param {number} fd
 * @param {!NodeBuffer} buffer
 * @param {number} offset
 * @param {number} length
 * @param {number} position
 * @return {!Promise<!Array<?>>}
 */
function writeAsync(fd, buffer, offset, length, position) {}

/**
 * @param {number} fd
 * @param {!NodeBuffer} buffer
 * @param {number} offset
 * @param {number} length
 * @param {number} position
 * @return {!Promise<!Array<?>>}
 */
function readAsync(fd, buffer, offset, length, position) {}

/**
 * readFileAsync
 * @param {string} filename
 * @param {(string|?)=} options
 * @return {!Promise<string>|!Promise<!NodeBuffer>}
 */
function readFileAsync(filename, options) {}

/**
 * writeFileAsync
 * @param {string} filename
 * @param {?} data
 * @param {(string|?)=} options
 * @return {!Promise<void>}
 */
function writeFileAsync(filename, data, options) {}

/**
 * appendFileAsync
 * @param {string} filename
 * @param {?} data
 * @param {(string|?)=} option
 * @return {!Promise<void>}
 */
function appendFileAsync(filename, data, option) {}

/**
 * @param {string} path
 * @return {!Promise<boolean>}
 */
function existsAsync(path) {}

/**
 * @param {string} path
 * @return {!Promise<void>}
 */
function ensureDirAsync(path) {}

/**
 * @param {string} path
 * @param {?=} callback
 * @return {void}
 */
function isDirectory(path, callback) {}

/**
 * @param {string} path
 * @return {boolean}
 */
function isDirectorySync(path) {}

/**
 * @param {string} path
 * @return {!Promise<boolean>}
 */
function isDirectoryAsync(path) {}
