/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/ydn-db/index.d.ts:
/**
 * @record
 * @struct
 */
function FullTextSource() {}
 /** @type {string} */
FullTextSource.prototype.storeName;
 /** @type {string} */
FullTextSource.prototype.keyPath;
 /** @type {number} */
FullTextSource.prototype.weight;
/**
 * @record
 * @struct
 */
function FullTextCatalog() {}
 /** @type {string} */
FullTextCatalog.prototype.name;
 /** @type {string} */
FullTextCatalog.prototype.lang;
 /** @type {!Array<!FullTextSource>} */
FullTextCatalog.prototype.sources;
/**
 * @record
 * @struct
 */
function IndexSchemaJson() {}
 /** @type {string} */
IndexSchemaJson.prototype.name;
 /** @type {(string|!Array<string>)} */
IndexSchemaJson.prototype.keyPath;
 /** @type {string} */
IndexSchemaJson.prototype.type;
 /** @type {boolean} */
IndexSchemaJson.prototype.unique;
 /** @type {boolean} */
IndexSchemaJson.prototype.multiEntry;
/**
 * @record
 * @struct
 */
function StoreSchemaJson() {}
 /** @type {boolean} */
StoreSchemaJson.prototype.autoIncrement;
 /** @type {boolean} */
StoreSchemaJson.prototype.dispatchEvents;
 /** @type {string} */
StoreSchemaJson.prototype.name;
 /** @type {!Array<!IndexSchemaJson>} */
StoreSchemaJson.prototype.indexes;
 /** @type {string} */
StoreSchemaJson.prototype.keyPath;
 /** @type {string} */
StoreSchemaJson.prototype.type;
/**
 * @record
 * @struct
 */
function DatabaseSchemaJson() {}
 /** @type {number} */
DatabaseSchemaJson.prototype.version;
 /** @type {!Array<!StoreSchemaJson>} */
DatabaseSchemaJson.prototype.stores;
 /** @type {!Array<!FullTextCatalog>} */
DatabaseSchemaJson.prototype.fullTextCatalogs;
/**
 * @record
 * @struct
 */
function StorageOptions() {}
 /** @type {!Array<string>} */
StorageOptions.prototype.mechanisms;
 /** @type {number} */
StorageOptions.prototype.size;
 /** @type {boolean} */
StorageOptions.prototype.autoSchema;
 /** @type {boolean} */
StorageOptions.prototype.isSerial;
 /** @type {string} */
StorageOptions.prototype.requestType;
/** @const */
var ydn = {};
/** @const */
ydn.db = {};
/**
 * @constructor
 * @struct
 */
ydn.db.Request = function() {};

/**
 * @return {?}
 */
ydn.db.Request.prototype.abort = function() {};

/**
 * @param {function(?): void} callback
 * @return {?}
 */
ydn.db.Request.prototype.always = function(callback) {};

/**
 * @param {function(?): void} callback
 * @return {?}
 */
ydn.db.Request.prototype.done = function(callback) {};

/**
 * @param {function(?): void} callback
 * @return {?}
 */
ydn.db.Request.prototype.fail = function(callback) {};

/**
 * @param {function(?): ?} success_callback
 * @param {function(!Error): ?} error_callback
 * @return {?}
 */
ydn.db.Request.prototype.then = function(success_callback, error_callback) {};

/**
 * @return {boolean}
 */
ydn.db.Request.prototype.canAbort = function() {};

/**
 * @param {?} first
 * @param {?} second
 * @return {number}
 */
ydn.db.cmp = function(first, second) {};

/**
 * @param {string} db_name
 * @param {string=} type
 * @return {void}
 */
ydn.db.deleteDatabase = function(db_name, type) {};

/**
 * @constructor
 * @struct
 * @param {!Object|string} json_or_key_string_or_store_name
 * @param {?=} id
 * @param {!ydn.db.Key=} parent_key
 */
ydn.db.Key = function(json_or_key_string_or_store_name, id, parent_key) {};
/**
 * @constructor
 * @struct
 */
ydn.db.Iterator = function() {};

/**
 * @param {string} peer_store_name
 * @param {string=} peer_field_name
 * @param {?=} value
 * @return {?}
 */
ydn.db.Iterator.prototype.join = function(peer_store_name, peer_field_name, value) {};

/**
 * @return {?}
 */
ydn.db.Iterator.prototype.getKey = function() {};

/**
 * @return {?}
 */
ydn.db.Iterator.prototype.getPrimaryKey = function() {};

/**
 * @return {!ydn.db.Iterator}
 */
ydn.db.Iterator.prototype.reset = function() {};

/**
 * @param {string} peer_field_name
 * @param {?} value
 * @return {?}
 */
ydn.db.Iterator.prototype.restrict = function(peer_field_name, value) {};

/**
 * @param {?} key
 * @param {?} index_key
 * @return {!ydn.db.Iterator}
 */
ydn.db.Iterator.prototype.resume = function(key, index_key) {};

/**
 * @param {?} key
 * @param {?} index_key
 * @return {!ydn.db.Iterator}
 */
ydn.db.Iterator.prototype.reverse = function(key, index_key) {};

/** @const */
ydn.db.EventType = {};
/** @const {number} */
ydn.db.EventType.created;
/** @const {number} */
ydn.db.EventType.deleted;
/** @const {number} */
ydn.db.EventType.error;
/** @const {number} */
ydn.db.EventType.fail;
/** @const {number} */
ydn.db.EventType.ready;
/** @const {number} */
ydn.db.EventType.updated;

/** @const */
ydn.db.Policy = {};
/** @const {number} */
ydn.db.Policy.all;
/** @const {number} */
ydn.db.Policy.atomic;
/** @const {number} */
ydn.db.Policy.multi;
/** @const {number} */
ydn.db.Policy.repeat;
/** @const {number} */
ydn.db.Policy.single;

/** @const */
ydn.db.TransactionMode = {};
/** @const {number} */
ydn.db.TransactionMode.readonly;
/** @const {number} */
ydn.db.TransactionMode.readwrite;

/** @const */
ydn.db.Op = {};

/* TODO: StringLiteral: ">" */

/* TODO: StringLiteral: "<" */

/* TODO: StringLiteral: "=" */

/* TODO: StringLiteral: ">=" */

/* TODO: StringLiteral: "<=" */

/* TODO: StringLiteral: "^" */

/**
 * @constructor
 * @struct
 * @param {string} store_name
 * @param {string} index_name
 * @param {?=} key_range
 * @param {boolean=} reverse
 */
ydn.db.IndexKeyIterator = function(store_name, index_name, key_range, reverse) {};

/**
 * @param {string} store_name
 * @param {string} index_name
 * @param {ydn.db.Op} op
 * @param {?} value
 * @param {ydn.db.Op} op2
 * @param {?} value2
 * @return {?}
 */
ydn.db.IndexKeyIterator.where = function(store_name, index_name, op, value, op2, value2) {};

/**
 * @constructor
 * @struct
 * @param {string} store_name
 * @param {?=} key_range
 * @param {boolean=} reverse
 */
ydn.db.KeyIterator = function(store_name, key_range, reverse) {};

/**
 * @param {string} store_name
 * @param {ydn.db.Op} op
 * @param {?} value
 * @param {ydn.db.Op} op2
 * @param {?} value2
 * @return {?}
 */
ydn.db.KeyIterator.where = function(store_name, op, value, op2, value2) {};

/**
 * @constructor
 * @struct
 * @param {string} store_name
 * @param {?=} key_range
 * @param {boolean=} reverse
 */
ydn.db.ValueIterator = function(store_name, key_range, reverse) {};

/**
 * @param {string} store_name
 * @param {ydn.db.Op} op
 * @param {?} value
 * @param {ydn.db.Op} op2
 * @param {?} value2
 * @return {?}
 */
ydn.db.ValueIterator.where = function(store_name, op, value, op2, value2) {};

/**
 * @constructor
 * @struct
 * @param {string} store_name
 * @param {string} index_name
 * @param {?=} key_range
 * @param {boolean=} reverse
 */
ydn.db.IndexValueIterator = function(store_name, index_name, key_range, reverse) {};

/**
 * @param {string} store_name
 * @param {string} index_name
 * @param {ydn.db.Op} op
 * @param {?} value
 * @param {ydn.db.Op} op2
 * @param {?} value2
 * @return {?}
 */
ydn.db.IndexValueIterator.where = function(store_name, index_name, op, value, op2, value2) {};

/**
 * @constructor
 * @struct
 * @param {!ydn.db.Storage} storage
 * @param {string} store_name
 * @param {string=} opt_field_name
 */
ydn.db.Streamer = function(storage, store_name, opt_field_name) {};

/**
 * @param {?} key
 * @param {?=} value
 * @return {?}
 */
ydn.db.Streamer.prototype.push = function(key, value) {};

/**
 * @param {function(!Array<?>): void} callback
 * @return {?}
 */
ydn.db.Streamer.prototype.collect = function(callback) {};

/**
 * @param {function(?, ?, function(): boolean): void} callback
 * @return {?}
 */
ydn.db.Streamer.prototype.setSink = function(callback) {};
/**
 * @constructor
 * @struct
 */
ydn.db.ICursor = function() {};

/**
 * @param {number=} i
 * @return {?}
 */
ydn.db.ICursor.prototype.getKey = function(i) {};

/**
 * @param {number=} i
 * @return {?}
 */
ydn.db.ICursor.prototype.getPrimaryKey = function(i) {};

/**
 * @param {number=} i
 * @return {?}
 */
ydn.db.ICursor.prototype.getValue = function(i) {};

/**
 * @param {number=} i
 * @return {!ydn.db.Request}
 */
ydn.db.ICursor.prototype.clear = function(i) {};

/**
 * @param {!Object} value
 * @param {number=} i
 * @return {!ydn.db.Request}
 */
ydn.db.ICursor.prototype.update = function(value, i) {};
/**
 * @constructor
 * @struct
 */
ydn.db.Query = function() {};

/**
 * @return {!ydn.db.Request}
 */
ydn.db.Query.prototype.count = function() {};

/**
 * @param {function(?): void} callback
 * @param {?} Iterator
 * @param {?} TransactionMode
 * @return {!ydn.db.Request}
 */
ydn.db.Query.prototype.open = function(callback, Iterator, TransactionMode) {};

/**
 * @param {?|string|!Array<string>} Object_or_field_name_or_field_names
 * @param {?|!Array<?>=} value
 * @return {!ydn.db.Request}
 */
ydn.db.Query.prototype.patch = function(Object_or_field_name_or_field_names, value) {};

/**
 * @param {string|!Array<string>} field_name_or_field_names
 * @param {boolean=} descending
 * @return {!ydn.db.Query}
 */
ydn.db.Query.prototype.order = function(field_name_or_field_names, descending) {};

/**
 * @return {!ydn.db.Query}
 */
ydn.db.Query.prototype.reverse = function() {};

/**
 * @param {number=} limit
 * @return {!ydn.db.Request}
 */
ydn.db.Query.prototype.list = function(limit) {};

/**
 * @param {string} field_name
 * @param {ydn.db.Op} op
 * @param {?} value
 * @param {ydn.db.Op=} op2
 * @param {?=} value2
 * @return {?}
 */
ydn.db.Query.prototype.where = function(field_name, op, value, op2, value2) {};
/**
 * @constructor
 * @struct
 */
ydn.db.DbOperator = function() {};

/**
 * @param {string} store_name
 * @param {?} value
 * @param {?=} key
 * @return {!ydn.db.Request}
 */
ydn.db.DbOperator.prototype.add = function(store_name, value, key) {};

/**
 * @param {string|!Array<string>} store_name_or_store_names
 * @param {?=} key_or_key_range
 * @return {!ydn.db.Request}
 */
ydn.db.DbOperator.prototype.clear = function(store_name_or_store_names, key_or_key_range) {};

/**
 * @param {string|!Array<string>} store_name_or_store_names
 * @param {?|string=} key_range_or_index_name
 * @param {?=} key_range
 * @return {!ydn.db.Request}
 */
ydn.db.DbOperator.prototype.count = function(store_name_or_store_names, key_range_or_index_name, key_range) {};

/**
 * @param {string} sql
 * @param {!Array<?>=} params
 * @return {!ydn.db.Request}
 */
ydn.db.DbOperator.prototype.executeSql = function(sql, params) {};

/**
 * @param {string} store_name
 * @param {ydn.db.Op=} op
 * @param {?=} value
 * @param {ydn.db.Op=} op2
 * @param {?=} value2
 * @return {!ydn.db.Query}
 */
ydn.db.DbOperator.prototype.from = function(store_name, op, value, op2, value2) {};

/**
 * @param {string} store_name
 * @param {?} key
 * @return {!ydn.db.Request}
 */
ydn.db.DbOperator.prototype.get = function(store_name, key) {};

/**
 * @param {!ydn.db.Iterator|string} iter_or_store_name
 * @param {number|!Object|string|boolean=} limit_or_key_range_or_index_name
 * @param {number|!Object=} limit_or_key_range_or_offset
 * @param {number=} offset_or_limit
 * @param {boolean|number=} reverse_or_offset
 * @param {boolean=} reverse
 * @return {!ydn.db.Request}
 */
ydn.db.DbOperator.prototype.keys = function(iter_or_store_name, limit_or_key_range_or_index_name, limit_or_key_range_or_offset, offset_or_limit, reverse_or_offset, reverse) {};

/**
 * @param {function(!ydn.db.ICursor): ?} next_callback
 * @param {!ydn.db.Iterator} iterator
 * @param {ydn.db.TransactionMode} mode
 * @return {!ydn.db.Request}
 */
ydn.db.DbOperator.prototype.open = function(next_callback, iterator, mode) {};

/**
 * @param {string} store_name
 * @param {?|!Array<?>} value
 * @param {?|!Array<?>=} key
 * @return {!ydn.db.Request}
 */
ydn.db.DbOperator.prototype.put = function(store_name, value, key) {};

/**
 * @param {string} store_name
 * @param {?|string} id_or_key_range_or_index_name
 * @param {?=} id_or_key_range
 * @return {!ydn.db.Request}
 */
ydn.db.DbOperator.prototype.remove = function(store_name, id_or_key_range_or_index_name, id_or_key_range) {};

/**
 * @param {function(!Array<?>, !Array<?>): ?} solver
 * @param {!Array<!ydn.db.Iterator>} iterators
 * @return {!ydn.db.Request}
 */
ydn.db.DbOperator.prototype.scan = function(solver, iterators) {};

/**
 * @param {!ydn.db.Iterator|string|!Array<?>=} iter_or_store_name_or_keys
 * @param {number|!Object|string|!Array<?>=} limit_or_key_range_or_index_name_or_ids
 * @param {number|!Object=} limit_or_key_range
 * @param {number=} offset_or_limit
 * @param {boolean|number=} reverse_or_offset
 * @param {boolean=} reverse
 * @return {!ydn.db.Request}
 */
ydn.db.DbOperator.prototype.values = function(iter_or_store_name_or_keys, limit_or_key_range_or_index_name_or_ids, limit_or_key_range, offset_or_limit, reverse_or_offset, reverse) {};

/**
 * @constructor
 * @struct
 * @param {string=} db_name
 * @param {!DatabaseSchemaJson=} schema
 * @param {!StorageOptions=} options
 */
ydn.db.Storage = function(db_name, schema, options) {};

/**
 * @param {ydn.db.EventType|!Array<ydn.db.EventType>} type
 * @param {function(?): void} handler
 * @param {boolean=} capture
 * @return {?}
 */
ydn.db.Storage.prototype.addEventListener = function(type, handler, capture) {};

/**
 * @param {ydn.db.Policy} thread
 * @param {boolean} isSerial
 * @param {!Array<string>} scope
 * @param {ydn.db.TransactionMode} mode
 * @param {number} maxRequest
 * @return {!ydn.db.DbOperator}
 */
ydn.db.Storage.prototype.branch = function(thread, isSerial, scope, mode, maxRequest) {};

/**
 * @return {?}
 */
ydn.db.Storage.prototype.close = function() {};

/**
 * @param {string} store_name
 * @param {?} key
 * @return {!ydn.db.Request}
 */
ydn.db.Storage.prototype.get = function(store_name, key) {};

/**
 * @param {?} callback
 * @return {string}
 */
ydn.db.Storage.prototype.getName = function(callback) {};

/**
 * @param {?} callback
 * @return {!DatabaseSchemaJson}
 */
ydn.db.Storage.prototype.getSchema = function(callback) {};

/**
 * @return {string}
 */
ydn.db.Storage.prototype.getType = function() {};

/**
 * @param {?=} Error
 * @return {?}
 */
ydn.db.Storage.prototype.onReady = function(Error) {};

/**
 * @param {ydn.db.EventType|!Array<ydn.db.EventType>} type
 * @param {function(?): void} handler
 * @param {boolean=} capture
 * @return {?}
 */
ydn.db.Storage.prototype.removeEventListener = function(type, handler, capture) {};

/**
 * @param {function(!ydn.db.Storage): void} callback
 * @param {!Array<string>} store_names
 * @param {ydn.db.TransactionMode} mode
 * @return {!ydn.db.Request}
 */
ydn.db.Storage.prototype.run = function(callback, store_names, mode) {};

/**
 * @param {string} catalog_name
 * @param {string} query
 * @param {number=} limit
 * @param {number=} threshold
 * @return {!ydn.db.Request}
 */
ydn.db.Storage.prototype.search = function(catalog_name, query, limit, threshold) {};

/**
 * @param {string} name
 * @return {?}
 */
ydn.db.Storage.prototype.setName = function(name) {};

/**
 * @param {function(?): void} callback
 * @param {!Array<string>} store_names
 * @param {ydn.db.TransactionMode} mode
 * @param {function(string, !Error): void} completed_handler
 * @return {?}
 */
ydn.db.Storage.prototype.transaction = function(callback, store_names, mode, completed_handler) {};
/** @const */
var ydb = {};
/** @const */
ydb.db = {};
/** @const */
ydb.db.algo = {};
/**
 * @constructor
 * @struct
 */
ydb.db.algo.Solver = function() {};

/**
 * @constructor
 * @struct
 * @param {{push: function(?): void}} out
 * @param {number=} limit
 */
ydb.db.algo.NestedLoop = function(out, limit) {};

/**
 * @constructor
 * @struct
 * @param {{push: function(?): void}} out
 * @param {number=} limit
 */
ydb.db.algo.SortedMerge = function(out, limit) {};

/**
 * @constructor
 * @struct
 * @param {{push: function(?): void}} out
 * @param {number=} limit
 */
ydb.db.algo.ZigzagMerge = function(out, limit) {};
/** @const */
ydn.db.events = {};
/**
 * @constructor
 * @struct
 */
ydn.db.events.Event = function() {};
 /** @type {string} */
ydn.db.events.Event.prototype.name;
 /** @type {ydn.db.EventType} */
ydn.db.events.Event.prototype.type;
/**
 * @extends {ydn.db.events.Event}
 * @constructor
 * @struct
 */
ydn.db.events.RecordEvent = function() {};

/**
 * @return {string}
 */
ydn.db.events.RecordEvent.prototype.getStoreName = function() {};

/**
 * @return {?}
 */
ydn.db.events.RecordEvent.prototype.getKey = function() {};

/**
 * @return {?}
 */
ydn.db.events.RecordEvent.prototype.getValue = function() {};
/**
 * @extends {ydn.db.events.Event}
 * @constructor
 * @struct
 */
ydn.db.events.StorageEvent = function() {};

/**
 * @return {!Error}
 */
ydn.db.events.StorageEvent.prototype.getError = function() {};

/**
 * @return {number}
 */
ydn.db.events.StorageEvent.prototype.getVersion = function() {};

/**
 * @return {number}
 */
ydn.db.events.StorageEvent.prototype.getOldVersion = function() {};
/**
 * @extends {ydn.db.events.Event}
 * @constructor
 * @struct
 */
ydn.db.events.StoreEvent = function() {};

/**
 * @return {string}
 */
ydn.db.events.StoreEvent.prototype.getStoreName = function() {};

/**
 * @return {!Array<?>}
 */
ydn.db.events.StoreEvent.prototype.getKeys = function() {};

/**
 * @return {!Array<?>}
 */
ydn.db.events.StoreEvent.prototype.getValues = function() {};
