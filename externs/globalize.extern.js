/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/globalize/index.d.ts:
/**
 * @record
 * @struct
 */
function DateFormatterOptions() {}
 /** @type {string} */
DateFormatterOptions.prototype.skeleton;
 /** @type {string} */
DateFormatterOptions.prototype.date;
 /** @type {string} */
DateFormatterOptions.prototype.time;
 /** @type {string} */
DateFormatterOptions.prototype.datetime;
 /** @type {string} */
DateFormatterOptions.prototype.raw;
/**
 * @record
 * @struct
 */
function CommonNumberFormatterOptions() {}
 /** @type {number} */
CommonNumberFormatterOptions.prototype.minimumIntegerDigits;
 /** @type {number} */
CommonNumberFormatterOptions.prototype.minimumFractionDigits;
 /** @type {number} */
CommonNumberFormatterOptions.prototype.maximumFractionDigits;
 /** @type {number} */
CommonNumberFormatterOptions.prototype.minimumSignificantDigits;
 /** @type {number} */
CommonNumberFormatterOptions.prototype.maximumSignificantDigits;
 /** @type {string} */
CommonNumberFormatterOptions.prototype.round;
 /** @type {boolean} */
CommonNumberFormatterOptions.prototype.useGrouping;
/**
 * @extends {CommonNumberFormatterOptions}
 * @record
 * @struct
 */
function NumberFormatterOptions() {}
 /** @type {string} */
NumberFormatterOptions.prototype.style;
/**
 * @extends {CommonNumberFormatterOptions}
 * @record
 * @struct
 */
function CurrencyFormatterOptions() {}
 /** @type {string} */
CurrencyFormatterOptions.prototype.style;
/**
 * @record
 * @struct
 */
function NumberParserOptions() {}
 /** @type {string} */
NumberParserOptions.prototype.style;
/**
 * @record
 * @struct
 */
function PluralGeneratorOptions() {}
 /** @type {string} */
PluralGeneratorOptions.prototype.type;
/**
 * @record
 * @struct
 */
function RelativeTimeFormatterOptions() {}
 /** @type {string} */
RelativeTimeFormatterOptions.prototype.form;
/**
 * @record
 * @struct
 */
function UnitFormatterOptions() {}
 /** @type {string} */
UnitFormatterOptions.prototype.form;
 /** @type {!NumberFormatterOptions} */
UnitFormatterOptions.prototype.numberFormatter;
/**
 * @record
 * @struct
 */
function GlobalizeStatic() {}
 /** @type {!self.CldrStatic} */
GlobalizeStatic.prototype.cldr;

/* TODO: ConstructSignature:  */

/* TODO: ConstructSignature:  */

/**
 * Globalize.load( json, ... )
 * Load resolved or unresolved cldr data.
 * Somewhat equivalent to previous Globalize.addCultureInfo(...).
 * @param {!Object} json
 * @return {void}
 */
GlobalizeStatic.prototype.load = function(json) {};

/**
 * Globalize.locale()
 * Return the default Cldr instance.
 * Globalize.locale( [locale] )
 * Set default Cldr instance
 * Return the default Cldr instance.
 * Globalize.locale( cldr )
 * Set default Cldr instance
 * Return the default Cldr instance.
 * @param {string|!self.CldrStatic=} locale_or_cldr
 * @return {!self.CldrStatic}
 */
GlobalizeStatic.prototype.locale = function(locale_or_cldr) {};

/**
 * .dateFormatter( options )
 * @param {!DateFormatterOptions=} options
 * @return {function(!Date): string}
 */
GlobalizeStatic.prototype.dateFormatter = function(options) {};

/**
 * @param {!DateFormatterOptions=} options
 * @return {function(string): !Date}
 */
GlobalizeStatic.prototype.dateParser = function(options) {};

/**
 * @param {!Date} value
 * @param {!DateFormatterOptions=} options
 * @return {string}
 */
GlobalizeStatic.prototype.formatDate = function(value, options) {};

/**
 * Alias for .dateParser( [options] )( value ).
 * @param {string} value
 * @param {!DateFormatterOptions=} options
 * @return {!Date}
 */
GlobalizeStatic.prototype.parseDate = function(value, options) {};

/**
 * Load messages data.
 * @param {!Object} json
 * @return {void}
 */
GlobalizeStatic.prototype.loadMessages = function(json) {};

/**
 * Return a function that formats a message (using ICU message format pattern) given its path and a set of variables into a user-readable string. It supports pluralization and gender inflections.
 * @param {(string|!Array<string>)} path String or Array containing the path of the message content, eg. "greetings/bye", or [ "greetings", "bye" ].
 * @return {function((string|!Object|!Array<string>)): string}
 */
GlobalizeStatic.prototype.messageFormatter = function(path) {};

/**
 * Formats a message (using ICU message format pattern) given its path and a set of variables into a user-readable string
 * @param {(string|!Array<string>)} path String or Array containing the path of the message content, eg. "greetings/bye", or [ "greetings", "bye" ].
 * @param {(string|!Object|!Array<string>)=} variables Variables can be Objects, where each property can be referenced by name inside a message; or Arrays, where each entry of the Array can be used inside a message, using numeric indices. When passing one or more arguments of other types, they're converted to an Array and used as such.
 * @return {string}
 */
GlobalizeStatic.prototype.formatMessage = function(path, variables) {};

/**
 * Return a function that formats a number according to the given options or locale's defaults.
 * style Optional String decimal (default), or percent.
 * minimumIntegerDigits Optional Non-negative integer Number value indicating the minimum integer digits to be used. Numbers will be padded with leading zeroes if necessary.
 * minimumFractionDigits and maximumFractionDigits Optional Non-negative integer Number values indicating the minimum and maximum fraction digits to be used. Numbers will be rounded or padded with trailing zeroes if necessary. Either one or both of these properties must be present. If they are, they will override minimum and maximum fraction digits derived from the CLDR patterns.
 * minimumSignificantDigits and maximumSignificantDigits Optional Positive integer Number values indicating the minimum and maximum fraction digits to be shown. Either none or both of these properties are present. If they are, they override minimum and maximum integer and fraction digits. The formatter uses however many integer and fraction digits are required to display the specified number of significant digits.
 * round Optional String with rounding method ceil, floor, round (default), or truncate.
 * useGrouping Optional Boolean (default is true) value indicating whether a grouping separator should be used.
 * @param {!NumberFormatterOptions=} options
 * @return {function(number): string}
 */
GlobalizeStatic.prototype.numberFormatter = function(options) {};

/**
 * Return a function that parses a string representing a number according to the given options or locale's defaults.
 * style Optional String decimal (default), or percent.
 * @param {!NumberParserOptions=} options
 * @return {function(string): number}
 */
GlobalizeStatic.prototype.numberParser = function(options) {};

/**
 * Return a number formatted according to the given options or locale's defaults.
 * style Optional String decimal (default), or percent.
 * minimumIntegerDigits Optional Non-negative integer Number value indicating the minimum integer digits to be used. Numbers will be padded with leading zeroes if necessary.
 * minimumFractionDigits and maximumFractionDigits Optional Non-negative integer Number values indicating the minimum and maximum fraction digits to be used. Numbers will be rounded or padded with trailing zeroes if necessary. Either one or both of these properties must be present. If they are, they will override minimum and maximum fraction digits derived from the CLDR patterns.
 * minimumSignificantDigits and maximumSignificantDigits Optional Positive integer Number values indicating the minimum and maximum fraction digits to be shown. Either none or both of these properties are present. If they are, they override minimum and maximum integer and fraction digits. The formatter uses however many integer and fraction digits are required to display the specified number of significant digits.
 * round Optional String with rounding method ceil, floor, round (default), or truncate.
 * useGrouping Optional Boolean (default is true) value indicating whether a grouping separator should be used.
 * @param {number} value
 * @param {!NumberFormatterOptions=} options
 * @return {string}
 */
GlobalizeStatic.prototype.formatNumber = function(value, options) {};

/**
 * A function that parses a string representing a number according to the given options or locale's defaults.
 * style Optional String decimal (default), or percent.
 * @param {string} value
 * @param {!NumberParserOptions=} options
 * @return {number}
 */
GlobalizeStatic.prototype.parseNumber = function(value, options) {};

/**
 * Return a function that formats a currency according to the given options or locale's defaults.
 * The returned function is invoked with one argument: the Number value to be formatted.
 * @param {string} currency
 * @param {!CurrencyFormatterOptions=} options
 * @return {function(number): string}
 */
GlobalizeStatic.prototype.currencyFormatter = function(currency, options) {};

/**
 * Return a currency formatted according to the given options or locale's defaults.
 * @param {number} value
 * @param {string} currency
 * @param {!CurrencyFormatterOptions=} options
 * @return {string}
 */
GlobalizeStatic.prototype.formatCurrency = function(value, currency, options) {};

/**
 * Return a function that returns the value's corresponding plural group: zero, one, two, few, many, or other.
 * The returned function is invoked with one argument: the Number value for which to return the plural group.
 * type Optional String cardinal (default), or ordinal.
 * @param {!PluralGeneratorOptions=} options
 * @return {function(number): string}
 */
GlobalizeStatic.prototype.pluralGenerator = function(options) {};

/**
 * Returns the value's corresponding plural group: zero, one, two, few, many, or other.
 * type Optional String cardinal (default), or ordinal.
 * @param {number} value
 * @param {!PluralGeneratorOptions=} options
 * @return {string}
 */
GlobalizeStatic.prototype.plural = function(value, options) {};

/**
 * Returns a function that formats a relative time according to the given unit, options, and the default/instance locale.
 * The returned function is invoked with one argument: the number value to be formatted.
 * @param {string} unit String value indicating the unit to be formatted. eg. "day", "week", "month", etc.
 * @param {!RelativeTimeFormatterOptions=} options form: [String] eg. "short" or "narrow". Or falsy for default long form.
 * @return {function(number): string}
 */
GlobalizeStatic.prototype.relativeTimeFormatter = function(unit, options) {};

/**
 * Return a relative time according to the given unit
 * @param {number} value
 * @param {string} unit
 * @param {!RelativeTimeFormatterOptions=} options form: [String] eg. "short" or "narrow". Or falsy for default long form.
 * @return {string}
 */
GlobalizeStatic.prototype.formatRelativeTime = function(value, unit, options) {};

/**
 * Returns a function that formats a unit according to the given unit, options, and the default/instance locale.
 * The returned function is invoked with one argument: the number value to be formatted.
 * @param {string} unit String value indicating the unit to be formatted. eg. "day", "week", "month", etc. Could also be a compound unit, eg. "mile-per-hour" or "mile/hour"
 * @param {!UnitFormatterOptions=} options form: [String] eg. "long", "short" or "narrow".
 * @return {function(number): string}
 */
GlobalizeStatic.prototype.unitFormatter = function(unit, options) {};

/**
 * Alias for .unitFormatter( unit, options )( value ).
 * @param {number} value
 * @param {string} unit
 * @param {!UnitFormatterOptions=} options
 * @return {string}
 */
GlobalizeStatic.prototype.formatUnit = function(value, unit, options) {};
 /** @type {!GlobalizeStatic} */
var Globalize;
