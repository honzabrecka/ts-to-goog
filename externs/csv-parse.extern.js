/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/csv-parse/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ExportAssignment in  */

/**
 * @param {string|!parse.Options|function(?, ?): void=} input_or_options_or_callback
 * @param {!parse.Options|function(?, ?): void=} options_or_callback
 * @param {function(?, ?): void=} callback
 * @return {?}
 */
function parse(input_or_options_or_callback, options_or_callback, callback) {}

/** @typedef {function(?, ?): void} */
parse.Callback;
/**
 * @record
 * @struct
 */
parse.Parser = function() {};

/**
 * @param {?} line
 * @return {?}
 */
parse.Parser.prototype.__push = function(line) {};

/**
 * @param {?} chars
 * @param {?} end
 * @param {?} callback
 * @return {?}
 */
parse.Parser.prototype.__write = function(chars, end, callback) {};
/**
 * @record
 * @struct
 */
parse.Options = function() {};
 /** @type {string} */
parse.Options.prototype.delimiter;
 /** @type {string} */
parse.Options.prototype.rowDelimiter;
 /** @type {string} */
parse.Options.prototype.quote;
 /** @type {string} */
parse.Options.prototype.escape;
 /** @type {(boolean|!Array<?>|function(!Array<?>): (boolean|!Array<string>))} */
parse.Options.prototype.columns;
 /** @type {string} */
parse.Options.prototype.comment;
 /** @type {string} */
parse.Options.prototype.objname;
 /** @type {boolean} */
parse.Options.prototype.relax;
 /** @type {boolean} */
parse.Options.prototype.relax_column_count;
 /** @type {boolean} */
parse.Options.prototype.skip_empty_lines;
 /** @type {number} */
parse.Options.prototype.max_limit_on_data_read;
 /** @type {boolean} */
parse.Options.prototype.trim;
 /** @type {boolean} */
parse.Options.prototype.ltrim;
 /** @type {boolean} */
parse.Options.prototype.rtrim;
 /** @type {boolean} */
parse.Options.prototype.auto_parse;
 /** @type {boolean} */
parse.Options.prototype.auto_parse_date;
 /** @type {number} */
parse.Options.prototype.from;
 /** @type {number} */
parse.Options.prototype.to;
/**
 * @extends {NodeJS.ReadWriteStream}
 * @record
 * @struct
 */
parse.ParserStream = function() {};

/**
 * @param {number=} size
 * @return {?}
 */
parse.ParserStream.prototype.read = function(size) {};
