/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cote/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {?} advertisement
 * @param {?=} discoveryOptions
 */
function Component(advertisement, discoveryOptions) {}

/**
 * Closes socket and stops discovery.
 * @return {void}
 */
Component.prototype.close = function() {};

/**
 * @constructor
 * @struct
 * @param {?} advertisement
 * @param {?=} discoveryOptions
 */
function Requester(advertisement, discoveryOptions) {}

/**
 * Queues a request until a Responder is available, and once so, delivers
 * the request. Requests are dispatched to Responders in a round-robin way.
 * 
 * Queues a request until a Responder is available, and once so, delivers
 * the request. Requests are dispatched to Responders in a round-robin way.
 * 
 * @template T
 * @param {?} event Request.
 * @param {?=} callback Function to execute after getting a result.
 * @return {!Promise<?>|void}
 */
Requester.prototype.send = function(event, callback) {};
/**
 * @extends {Advertisement}
 * @record
 * @struct
 */
function RequesterAdvertisement() {}
 /** @type {!Array<string>} */
RequesterAdvertisement.prototype.requests;

/**
 * @constructor
 * @struct
 * @param {?} advertisement
 * @param {?=} discoveryOptions
 */
function Responder(advertisement, discoveryOptions) {}

/**
 * Listens to internal `cote:added` and `cote:removed` events.
 * 
 * Responds to certain requests from a Requester.
 * 
 * @template T
 * @param {string|(string|!Array<string>)} type Type. May be wildcarded or namespaced like in EventEmitter2.
 * @param {?} listener Callback. / Callback. Should return a result.
 * @return {?}
 */
Responder.prototype.on = function(type, listener) {};
/**
 * @extends {Advertisement}
 * @record
 * @struct
 */
function ResponderAdvertisement() {}
 /** @type {!Array<string>} */
ResponderAdvertisement.prototype.respondsTo;

/**
 * @constructor
 * @struct
 * @param {?} advertisement
 * @param {?=} discoveryOptions
 */
function Publisher(advertisement, discoveryOptions) {}

/**
 * Publishes an event to all Subscribers. Does not wait for results. If
 * there are no Subscribers listening, the event is lost.
 * 
 * @template T
 * @param {string} type EventEmitter-compatible type.
 * @param {?} event Request.
 * @return {void}
 */
Publisher.prototype.publish = function(type, event) {};
/**
 * @extends {Advertisement}
 * @record
 * @struct
 */
function PublisherAdvertisement() {}
 /** @type {!Array<string>} */
PublisherAdvertisement.prototype.broadcasts;

/**
 * @constructor
 * @struct
 * @param {?} advertisement
 * @param {?=} discoveryOptions
 */
function Subscriber(advertisement, discoveryOptions) {}

/**
 * Subscribes to events emitted from a Publisher.
 * 
 * @template T
 * @param {(string|!Array<string>)} type Type. May be wildcarded or namespaced like in EventEmitter2.
 * @param {?} listener Callback. Returns nothing.
 * @return {?}
 */
Subscriber.prototype.on = function(type, listener) {};
/**
 * @extends {Advertisement}
 * @record
 * @struct
 */
function SubscriberAdvertisement() {}
 /** @type {!Array<string>} */
SubscriberAdvertisement.prototype.subscribesTo;

/**
 * @constructor
 * @struct
 * Exposes APIs directly to front-end. Make sure to use namespaces.
 * @param {!SocketIO.Server} io
 * @param {?} advertisement
 * @param {?=} discoveryOptions
 */
function Sockend(io, advertisement, discoveryOptions) {}
/**
 * @extends {ResponderAdvertisement}
 * @extends {PublisherAdvertisement}
 * @record
 * @struct
 */
function SockendAdvertisement() {}

/**
 * @constructor
 * @struct
 * @param {?} advertisement
 * @param {?=} discoveryOptions
 * @param {!internal.Stream=} stream
 */
function Monitor(advertisement, discoveryOptions, stream) {}
/**
 * @extends {Advertisement}
 * @record
 * @struct
 */
function MonitorAdvertisement() {}
 /** @type {(string|number)} */
MonitorAdvertisement.prototype.port;

/**
 * Displays the cote ecosystem running in your environment in a nice graph.
 * 
 * @param {number} port Open in browser to see network graph in action.
 * @return {?}
 */
function MonitoringTool(port) {}
/**
 * @constructor
 * @struct
 */
function TimeBalancedRequester() {}
 /** @type {number} */
TimeBalancedRequester.prototype.CALCULATION_TIMEOUT;
 /** @type {number} */
TimeBalancedRequester.prototype.MAX_REQUESTS;
 /** @type {number} */
TimeBalancedRequester.prototype.SAMPLE_INTERVAL;
/**
 * @constructor
 * @struct
 */
function PendingBalancedRequester() {}
/**
 * @record
 * @struct
 */
function Event() {}
 /** @type {string} */
Event.prototype.type;
/**
 * @extends {Event}
 * @record
 * @struct
 */
function Status() {}
 /** @type {?} */
Status.prototype.advertisement;
/**
 * @extends {RequesterAdvertisement}
 * @extends {ResponderAdvertisement}
 * @extends {PublisherAdvertisement}
 * @extends {SubscriberAdvertisement}
 * @record
 * @struct
 */
function StatusAdvertisement() {}
/**
 * @record
 * @struct
 */
function Advertisement() {}
 /** @type {string} */
Advertisement.prototype.name;
 /** @type {string} */
Advertisement.prototype.namespace;
 /** @type {string} */
Advertisement.prototype.key;
/**
 * @record
 * @struct
 */
function DiscoveryOptions() {}
 /** @type {string} */
DiscoveryOptions.prototype.multicast;
 /** @type {string} */
DiscoveryOptions.prototype.broadcast;
 /** @type {string} */
DiscoveryOptions.prototype.address;
 /** @type {number} */
DiscoveryOptions.prototype.helloInterval;
 /** @type {number} */
DiscoveryOptions.prototype.checkInterval;
 /** @type {number} */
DiscoveryOptions.prototype.nodeTimeout;
 /** @type {number} */
DiscoveryOptions.prototype.masterTimeout;
 /** @type {boolean} */
DiscoveryOptions.prototype.monitor;
 /** @type {boolean} */
DiscoveryOptions.prototype.log;
 /** @type {boolean} */
DiscoveryOptions.prototype.helloLogsEnabled;
 /** @type {boolean} */
DiscoveryOptions.prototype.statusLogsEnabled;
 /** @type {boolean} */
DiscoveryOptions.prototype.ignoreProcess;
 /** @type {boolean} */
DiscoveryOptions.prototype.disableScreen;
 /** @type {number} */
DiscoveryOptions.prototype.statusInterval;
