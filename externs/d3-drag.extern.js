/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/d3-drag/index.d.ts:

/* TODO: ImportDeclaration in  */

/** @typedef {!Element} */
var DraggedElementBaseType;

/** @typedef {(!HTMLElement|!SVGSVGElement|!SVGGElement)} */
var DragContainerElement;
/**
 * @record
 * @struct
 */
function SubjectPosition() {}
 /** @type {number} */
SubjectPosition.prototype.x;
 /** @type {number} */
SubjectPosition.prototype.y;
/**
 * @record
 * @struct
 */
function DragBehavior() {}

/* TODO: CallSignature:  */

/**
 * Returns the current container accessor function.
 * Sets the container accessor to the specified function and returns the drag behavior.
 * 
 * The container of a drag gesture determines the coordinate system of subsequent drag events,
 * affecting event.x and event.y. The element returned by the container accessor is subsequently
 * passed to d3.mouse or d3.touch, as appropriate, to determine the local coordinates of the pointer.
 * 
 * The default container accessor returns the parent node of the element in the originating selection (see drag)
 * that received the initiating input event. This is often appropriate when dragging SVG or HTML elements,
 * since those elements are typically positioned relative to a parent. For dragging graphical elements with a Canvas,
 * however, you may want to redefine the container as the initiating element itself, using "this" in the accessor
 * function.
 * 
 * Sets the container accessor to the specified object and returns the drag behavior.
 * 
 * The container of a drag gesture determines the coordinate system of subsequent drag events,
 * affecting event.x and event.y. The element returned by the container accessor is subsequently
 * passed to d3.mouse or d3.touch, as appropriate, to determine the local coordinates of the pointer.
 * 
 * The default container accessor returns the parent node of the element in the originating selection (see drag)
 * that received the initiating input event. This is often appropriate when dragging SVG or HTML elements,
 * since those elements are typically positioned relative to a parent. For dragging graphical elements with a Canvas,
 * however, you may want to redefine the container as the initiating element itself, such as drag.container(canvas).
 * 
 * @param {?|(!HTMLElement|!SVGSVGElement|!SVGGElement)=} accessor_or_container A container accessor function which is evaluated for each selected element,
 * in order, being passed the current datum (d), the current index (i), and the current group (nodes),
 * with this as the current DOM element. The function returns the container element. / Container element for the drag gesture.
 * @return {?}
 */
DragBehavior.prototype.container = function(accessor_or_container) {};

/**
 * Returns the current filter function.
 * Sets the filter to the specified filter function and returns the drag behavior.
 * 
 * If the filter returns falsey, the initiating event is ignored and no drag gesture is started.
 * Thus, the filter determines which input events are ignored. The default filter ignores mousedown events on secondary buttons,
 * since those buttons are typically intended for other purposes, such as the context menu.
 * 
 * @param {?=} filterFn A filter function which is evaluated for each selected element,
 * in order, being passed the current datum (d), the current index (i), and the current group (nodes),
 * with this as the current DOM element. The function returns a boolean value.
 * @return {?}
 */
DragBehavior.prototype.filter = function(filterFn) {};

/**
 *  Returns the current subject accessor functions.
 * Sets the subject accessor to the specified function and returns the drag behavior.
 * 
 * The subject of a drag gesture represents the thing being dragged.
 * It is computed when an initiating input event is received,
 * such as a mousedown or touchstart, immediately before the drag gesture starts.
 * The subject is then exposed as event.subject on subsequent drag events for this gesture.
 * 
 * The default subject is the datum of the element in the originating selection (see drag)
 * that received the initiating input event; if this datum is undefined,
 * an object representing the coordinates of the pointer is created.
 * When dragging circle elements in SVG, the default subject is thus the datum of the circle being dragged.
 * With Canvas, the default subject is the canvas elementâ€™s datum (regardless of where on the canvas you click).
 * In this case, a custom subject accessor would be more appropriate,
 * such as one that picks the closest circle to the mouse within a given search radius.
 * 
 * 
 * 
 * The subject of a drag gesture may not be changed after the gesture starts.
 * 
 * During the evaluation of the subject accessor, d3.event is a beforestart drag event.
 * Use event.sourceEvent to access the initiating input event and event.identifier to
 * access the touch identifier. The event.x and event.y are relative to the container,
 * and are computed using d3.mouse or d3.touch as appropriate.
 * 
 * @param {?=} accessor An extent accessor function which is evaluated for each selected element,
 * in order, being passed the current datum (d), the current index (i), and the current group (nodes),
 * with this as the current DOM element.The returned subject should be an object that exposes x and y properties,
 * so that the relative position of the subject and the pointer can be preserved during the drag gesture.
 * If the subject is null or undefined, no drag gesture is started for this pointer;
 * however, other starting touches may yet start drag gestures.
 * @return {?}
 */
DragBehavior.prototype.subject = function(accessor) {};

/**
 * Return the current click distance threshold, which defaults to zero.
 * Set the maximum distance that the mouse can move between mousedown and mouseup that will trigger
 * a subsequent click event. If at any point between mousedown and mouseup the mouse is greater than or equal to
 * distance from its position on mousedown, the click event follwing mouseup will be suppressed.
 * 
 * @param {number=} distance The distance threshold between mousedown and mouseup measured in client coordinates (event.clientX and event.clientY).
 * The default is zero.
 * @return {number|?}
 */
DragBehavior.prototype.clickDistance = function(distance) {};

/**
 * Return the first currently-assigned listener matching the specified typenames, if any.
 * 
 * Remove the current event listeners for the specified typenames, if any, return the drag behavior.
 * 
 * Set the event listener for the specified typenames and return the drag behavior.
 * If an event listener was already registered for the same type and name,
 * the existing listener is removed before the new listener is added.
 * When a specified event is dispatched, each listener will be invoked with the same context and arguments as selection.on listeners.
 * 
 * Changes to registered listeners via drag.on during a drag gesture do not affect the current drag gesture.
 * Instead, you must use event.on, which also allows you to register temporary event listeners for the current drag gesture.
 * Separate events are dispatched for each active pointer during a drag gesture.
 * For example, if simultaneously dragging multiple subjects with multiple fingers, a start event is dispatched for each finger,
 * even if both fingers start touching simultaneously.
 * 
 * @param {string} typenames The typenames is a string containing one or more typename separated by whitespace.
 * Each typename is a type, optionally followed by a period (.) and a name, such as "drag.foo"" and "drag.bar";
 * the name allows multiple listeners to be registered for the same type. The type must be one of the following:
 * start (after a new pointer becomes active [on mousedown or touchstart]), drag (after an active pointer moves [on mousemove or touchmove], or
 * end (after an active pointer becomes inactive [on mouseup, touchend or touchcancel].)
 * @param {null|?=} listener Use null to remove the listener. / An event listener function which is evaluated for each selected element,
 * in order, being passed the current datum (d), the current index (i), and the current group (nodes),
 * with this as the current DOM element.
 * @return {?}
 */
DragBehavior.prototype.on = function(typenames, listener) {};

/**
 * Creates a new drag behavior. The returned behavior, drag, is both an object and a function, and is
 * typically applied to selected elements via selection.call.
 * 
 * Use this signature when using the default subject accessor.
 * 
 * The first generic refers to the type of element to be dragged.
 * The second generic refers to the type of the datum of the dragged element.
 * Creates a new drag behavior. The returned behavior, drag, is both an object and a function, and is
 * typically applied to selected elements via selection.call.
 * 
 * Use this signature when using a custom subject accessor.
 * 
 * The first generic refers to the type of element to be dragged.
 * The second generic refers to the type of the datum of the dragged element.
 * The third generic refers to the type of the drag behavior subject.
 * @template GElement, Datum, Subject
 * @return {?}
 */
function drag() {}
/**
 * @record
 * @struct
 */
function D3DragEvent() {}
 /** @type {?} */
D3DragEvent.prototype.target;
 /** @type {string} */
D3DragEvent.prototype.type;
 /** @type {?} */
D3DragEvent.prototype.subject;
 /** @type {number} */
D3DragEvent.prototype.x;
 /** @type {number} */
D3DragEvent.prototype.y;
 /** @type {number} */
D3DragEvent.prototype.dx;
 /** @type {number} */
D3DragEvent.prototype.dy;
 /** @type {(number|string)} */
D3DragEvent.prototype.identifier;
 /** @type {number} */
D3DragEvent.prototype.active;
 /** @type {?} */
D3DragEvent.prototype.sourceEvent;

/**
 * Return the first currently-assigned listener matching the specified typenames, if any.
 * 
 * Equivalent to drag.on, but only applies to the current drag gesture. Before the drag gesture starts,
 * a copy of the current drag event listeners is made. This copy is bound to the current drag gesture
 * and modified by event.on. This is useful for temporary listeners that only receive events for the current drag gesture.
 * 
 * Remove the current event listeners for the specified typenames, if any, return the drag behavior.
 * 
 * Equivalent to drag.on, but only applies to the current drag gesture. Before the drag gesture starts,
 * a copy of the current drag event listeners is made. This copy is bound to the current drag gesture
 * and modified by event.on. This is useful for temporary listeners that only receive events for the current drag gesture.
 * 
 * Set the event listener for the specified typenames and return the drag behavior.
 * If an event listener was already registered for the same type and name,
 * the existing listener is removed before the new listener is added.
 * When a specified event is dispatched, each listener will be invoked with the same context and arguments as selection.on listeners.
 * 
 * Equivalent to drag.on, but only applies to the current drag gesture. Before the drag gesture starts,
 * a copy of the current drag event listeners is made. This copy is bound to the current drag gesture
 * and modified by event.on. This is useful for temporary listeners that only receive events for the current drag gesture.
 * 
 * @param {string} typenames The typenames is a string containing one or more typename separated by whitespace.
 * Each typename is a type, optionally followed by a period (.) and a name, such as "drag.foo"" and "drag.bar";
 * the name allows multiple listeners to be registered for the same type. The type must be one of the following:
 * start (after a new pointer becomes active [on mousedown or touchstart]), drag (after an active pointer moves [on mousemove or touchmove], or
 * end (after an active pointer becomes inactive [on mouseup, touchend or touchcancel].)
 * @param {null|?=} listener Use null to remove the listener. / An event listener function which is evaluated for each selected element,
 * in order, being passed the current datum (d), the current index (i), and the current group (nodes),
 * with this as the current DOM element.
 * @return {?}
 */
D3DragEvent.prototype.on = function(typenames, listener) {};

/**
 * Prevents native drag-and-drop and text selection on the specified window.
 * As an alternative to preventing the default action of mousedown events,
 * this method prevents undesirable default actions following mousedown. In supported browsers,
 * this means capturing dragstart and selectstart events, preventing the associated default actions,
 * and immediately stopping their propagation. In browsers that do not support selection events,
 * the user-select CSS property is set to none on the document element.
 * This method is intended to be called on mousedown, followed by d3.dragEnable on mouseup.
 * 
 * @param {!Window} window The window for which drag should be disabled.
 * @return {void}
 */
function dragDisable(window) {}

/**
 * Allows native drag-and-drop and text selection on the specified window; undoes the effect of d3.dragDisable.
 * This method is intended to be called on mouseup, preceded by d3.dragDisable on mousedown.
 * If noclick is true, this method also temporarily suppresses click events.
 * The suppression of click events expires after a zero-millisecond timeout,
 * such that it only suppress the click event that would immediately follow the current mouseup event, if any.
 * 
 * @param {!Window} window The window for which drag should be (re-)enabled.
 * @param {boolean=} noClick An optional flag. If noclick is true, this method also temporarily suppresses click events.
 * @return {void}
 */
function dragEnable(window, noClick) {}
