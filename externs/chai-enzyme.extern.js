/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/chai-enzyme/index.d.ts:

/** @typedef {(string|!React.StatelessComponent<?>|!React.ComponentClass<?>|!Object<string,?>)} */
Chai.EnzymeSelector;

/* TODO: CallSignature: Chai */

/* TODO: CallSignature: Chai */

/**
 * Assert that the given wrapper is checked:
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.checked = function() {};

/**
 * Assert that the wrapper has a given class:
 * @param {string} name
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.className = function(name) {};

/**
 * Assert that the wrapper contains a certain element:
 * @param {(string|!React.StatelessComponent<?>|!React.ComponentClass<?>|!Object<string,?>)} selector
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.containMatchingElement = function(selector) {};

/**
 * Assert that the wrapper contains a descendant matching the given selector:
 * @param {(string|!React.StatelessComponent<?>|!React.ComponentClass<?>|!Object<string,?>)=} selector
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.descendants = function(selector) {};

/**
 * Assert that the wrapper contains an exact amount of descendants matching the given selector:
 * @param {number=} count
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.exactly = function(count) {};

/**
 * Assert that the given wrapper is disabled:
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.disabled = function() {};

/**
 * Assert that the given wrapper is empty:
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.blank = function() {};

/**
 * Assert that the given wrapper exists:
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.present = function() {};

/**
 * Assert that the wrapper has given html:
 * @param {string=} str
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.html = function(str) {};

/**
 * Assert that the wrapper has given ID attribute:
 * @param {string} str
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.id = function(str) {};

/**
 * Assert that the wrapper has a given ref
 * @param {string} key
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.ref = function(key) {};

/**
 * Assert that the given wrapper is selected:
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.selected = function() {};

/**
 * Assert that the given wrapper has the tag name:
 * @param {string} str
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.tagName = function(str) {};

/**
 * Assert that the given wrapper has the supplied text:
 * @param {string=} str
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.text = function(str) {};

/**
 * Assert that the given wrapper has a given type:
 * @param {(string|!React.StatelessComponent<?>|!React.ComponentClass<?>|!Object<string,?>)} func
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.type = function(func) {};

/**
 * Assert that the given wrapper has given value:
 * @param {string} str
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.value = function(str) {};

/**
 * Assert that the wrapper has given attribute [with value]:
 * @param {string} key
 * @param {string=} val
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.attr = function(key, val) {};

/**
 * Assert that the wrapper has a given data attribute [with value]:
 * @param {string} key
 * @param {string=} val
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.data = function(key, val) {};

/**
 * Assert that the wrapper has given style:
 * @param {string} key
 * @param {string=} val
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.style = function(key, val) {};

/**
 * Assert that the wrapper has given state [with value]:
 * @param {string} key
 * @param {?=} val
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.state = function(key, val) {};

/**
 * Assert that the wrapper has given prop [with value]:
 * @param {string} key
 * @param {?=} val
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.prop = function(key, val) {};

/**
 * Assert that the wrapper has given props [with values]:
 * Assert that the wrapper has given props [with values]:
 * @param {!Array<string>|(string|!React.StatelessComponent<?>|!React.ComponentClass<?>|!Object<string,?>)} keys_or_props
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.props = function(keys_or_props) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "chai-enzyme"
/** @const */
tsickle_declare_module.chai_enzyme = {};

/* TODO: ImportDeclaration in tsickle_declare_module.chai_enzyme */

/** @typedef {(?|!Cheerio)} */
tsickle_declare_module.chai_enzyme.DebugWrapper;

/**
 * @param {function((?|!Cheerio)): string=} wrapper
 * @return {function(?): void}
 */
tsickle_declare_module.chai_enzyme.chaiEnzyMe = function(wrapper) {};

/* TODO: ExportAssignment in tsickle_declare_module.chai_enzyme */
