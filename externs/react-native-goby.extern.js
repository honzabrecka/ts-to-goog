/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/react-native-goby/index.d.ts:

/** @typedef {?} */
var DownloadProgressCallback;

/** @typedef {?} */
var SyncStatusChangedCallback;
/**
 * @extends {SyncOptions}
 * @record
 * @struct
 */
function GobyOptions() {}
 /** @type {Goby.CheckFrequency} */
GobyOptions.prototype.checkFrequency;
/**
 * @record
 * @struct
 */
function DownloadProgress() {}
 /** @type {number} */
DownloadProgress.prototype.totalBytes;
 /** @type {number} */
DownloadProgress.prototype.receivedBytes;
/**
 * @extends {Package}
 * @record
 * @struct
 */
function LocalPackage() {}

/**
 * Installs the update by saving it to the location on disk where the runtime expects to find the latest version of the app.
 * 
 * @param {Goby.InstallMode} installMode Indicates when you would like the update changes to take affect for the end-user.
 * @param {number=} minimumBackgroundDuration For resume-based installs, this specifies the number of seconds the app needs to be in the background before forcing a restart. Defaults to 0 if unspecified.
 * @return {!Promise<void>}
 */
LocalPackage.prototype.install = function(installMode, minimumBackgroundDuration) {};
/**
 * @record
 * @struct
 */
function Package() {}
 /** @type {string} */
Package.prototype.appVersion;
 /** @type {string} */
Package.prototype.deploymentKey;
 /** @type {string} */
Package.prototype.description;
 /** @type {boolean} */
Package.prototype.failedInstall;
 /** @type {boolean} */
Package.prototype.isFirstRun;
 /** @type {boolean} */
Package.prototype.isMandatory;
 /** @type {boolean} */
Package.prototype.isPending;
 /** @type {string} */
Package.prototype.label;
 /** @type {string} */
Package.prototype.packageHash;
 /** @type {number} */
Package.prototype.packageSize;
/**
 * @extends {Package}
 * @record
 * @struct
 */
function RemotePackage() {}
 /** @type {string} */
RemotePackage.prototype.downloadUrl;

/**
 * Downloads the available update from the Goby service.
 * 
 * @param {?=} downloadProgressCallback An optional callback that allows tracking the progress of the update while it is being downloaded.
 * @return {!Promise<?>}
 */
RemotePackage.prototype.download = function(downloadProgressCallback) {};
/**
 * @record
 * @struct
 */
function SyncOptions() {}
 /** @type {string} */
SyncOptions.prototype.deploymentKey;
 /** @type {Goby.InstallMode} */
SyncOptions.prototype.installMode;
 /** @type {Goby.InstallMode} */
SyncOptions.prototype.mandatoryInstallMode;
 /** @type {number} */
SyncOptions.prototype.minimumBackgroundDuration;
 /** @type {?} */
SyncOptions.prototype.updateDialog;
/**
 * @record
 * @struct
 */
function UpdateDialog() {}
 /** @type {boolean} */
UpdateDialog.prototype.appendReleaseDescription;
 /** @type {string} */
UpdateDialog.prototype.descriptionPrefix;
 /** @type {string} */
UpdateDialog.prototype.mandatoryContinueButtonLabel;
 /** @type {string} */
UpdateDialog.prototype.mandatoryUpdateMessage;
 /** @type {string} */
UpdateDialog.prototype.optionalIgnoreButtonLabel;
 /** @type {string} */
UpdateDialog.prototype.optionalInstallButtonLabel;
 /** @type {string} */
UpdateDialog.prototype.optionalUpdateMessage;
 /** @type {string} */
UpdateDialog.prototype.title;
/**
 * @record
 * @struct
 */
function StatusReport() {}
 /** @type {Goby.DeploymentStatus} */
StatusReport.prototype.status;
 /** @type {string} */
StatusReport.prototype.appVersion;
 /** @type {?} */
StatusReport.prototype.package;
 /** @type {string} */
StatusReport.prototype.previousDeploymentKey;
 /** @type {string} */
StatusReport.prototype.previousLabelOrAppVersion;

/**
 * Decorates a React Component configuring it to sync for updates with the Goby server.
 * 
 * @param {?=} options Options used to configure the end-user sync and update experience (e.g. when to check for updates?, show an prompt?, install the update immediately?).
 * @return {!Function}
 */
function Goby(options) {}
 /** @type {?} */
Goby.DEFAULT_UPDATE_DIALOG;

/**
 * Asks the Goby service whether the configured app deployment has an update available.
 * 
 * @param {string=} deploymentKey The deployment key to use to query the Goby server for an update.
 * @return {!Promise<?>}
 */
Goby.checkForUpdate = function(deploymentKey) {};

/**
 * Retrieves the metadata for an installed update (e.g. description, mandatory).
 * 
 * @param {Goby.UpdateState=} updateState The state of the update you want to retrieve the metadata for. Defaults to UpdateState.RUNNING.
 * @return {!Promise<?>}
 */
Goby.getUpdateMetadata = function(updateState) {};

/**
 * Notifies the Goby runtime that an installed update is considered successful.
 * @return {!Promise<?>}
 */
Goby.notifyAppReady = function() {};

/**
 * Allow Goby to restart the app.
 * @return {void}
 */
Goby.allowRestart = function() {};

/**
 * Forbid Goby to restart the app.
 * @return {void}
 */
Goby.disallowRestart = function() {};

/**
 * Immediately restarts the app.
 * 
 * @param {boolean=} onlyIfUpdateIsPending Indicates whether you want the restart to no-op if there isn't currently a pending update.
 * @return {void}
 */
Goby.restartApp = function(onlyIfUpdateIsPending) {};

/**
 * Allows checking for an update, downloading it and installing it, all with a single call.
 * 
 * @param {?=} options Options used to configure the end-user update experience (e.g. show an prompt?, install the update immediately?).
 * @param {?=} syncStatusChangedCallback An optional callback that allows tracking the status of the sync operation, as opposed to simply checking the resolved state via the returned Promise.
 * @param {?=} downloadProgressCallback An optional callback that allows tracking the progress of an update while it is being downloaded.
 * @return {!Promise<Goby.SyncStatus>}
 */
Goby.sync = function(options, syncStatusChangedCallback, downloadProgressCallback) {};

/** @const */
Goby.InstallMode = {};
/** @const {number} */
Goby.InstallMode.IMMEDIATE;
/** @const {number} */
Goby.InstallMode.ON_NEXT_RESTART;
/** @const {number} */
Goby.InstallMode.ON_NEXT_RESUME;

/** @const */
Goby.SyncStatus = {};
/** @const {number} */
Goby.SyncStatus.CHECKING_FOR_UPDATE;
/** @const {number} */
Goby.SyncStatus.AWAITING_USER_ACTION;
/** @const {number} */
Goby.SyncStatus.DOWNLOADING_PACKAGE;
/** @const {number} */
Goby.SyncStatus.INSTALLING_UPDATE;
/** @const {number} */
Goby.SyncStatus.UP_TO_DATE;
/** @const {number} */
Goby.SyncStatus.UPDATE_IGNORED;
/** @const {number} */
Goby.SyncStatus.UPDATE_INSTALLED;
/** @const {number} */
Goby.SyncStatus.SYNC_IN_PROGRESS;
/** @const {number} */
Goby.SyncStatus.UNKNOWN_ERROR;

/** @const */
Goby.UpdateState = {};
/** @const {number} */
Goby.UpdateState.RUNNING;
/** @const {number} */
Goby.UpdateState.PENDING;
/** @const {number} */
Goby.UpdateState.LATEST;

/** @const */
Goby.DeploymentStatus = {};
/** @const {number} */
Goby.DeploymentStatus.FAILED;
/** @const {number} */
Goby.DeploymentStatus.SUCCEEDED;

/** @const */
Goby.CheckFrequency = {};
/** @const {number} */
Goby.CheckFrequency.ON_APP_START;
/** @const {number} */
Goby.CheckFrequency.ON_APP_RESUME;
/** @const {number} */
Goby.CheckFrequency.MANUAL;

/* TODO: ExportAssignment in  */
