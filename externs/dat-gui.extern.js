/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/dat-gui/index.d.ts:

/* TODO: NamespaceExportDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {?=} option
 */
function GUI(option) {}
 /** @type {!Array<?>} */
GUI.prototype.__controllers;
 /** @type {!Array<?>} */
GUI.prototype.__folders;
 /** @type {!HTMLElement} */
GUI.prototype.domElement;
 /** @type {?} */
GUI.prototype.parent;
 /** @type {boolean} */
GUI.prototype.scrollable;
 /** @type {boolean} */
GUI.prototype.autoPlace;
 /** @type {string} */
GUI.prototype.preset;
 /** @type {number} */
GUI.prototype.width;
 /** @type {string} */
GUI.prototype.name;
 /** @type {boolean} */
GUI.prototype.closed;
 /** @type {!Object} */
GUI.prototype.load;
 /** @type {boolean} */
GUI.prototype.useLocalStorage;

/**
 * @param {!Object} target
 * @param {string} propName
 * @param {number|boolean|!Array<string>|!Array<number>|!Object=} min_or_status_or_items
 * @param {number=} max
 * @return {?}
 */
GUI.prototype.add = function(target, propName, min_or_status_or_items, max) {};

/**
 * @param {!Object} target
 * @param {string} propName
 * @param {string|!Array<number>|?=} color_or_rgba_or_hsv
 * @return {?}
 */
GUI.prototype.addColor = function(target, propName, color_or_rgba_or_hsv) {};

/**
 * @param {?} controller
 * @return {void}
 */
GUI.prototype.remove = function(controller) {};

/**
 * @return {void}
 */
GUI.prototype.destroy = function() {};

/**
 * @param {string} propName
 * @return {?}
 */
GUI.prototype.addFolder = function(propName) {};

/**
 * @return {void}
 */
GUI.prototype.open = function() {};

/**
 * @return {void}
 */
GUI.prototype.close = function() {};

/**
 * @param {!Object} target
 * @param {...!Object} additionalTargets
 * @return {void}
 */
GUI.prototype.remember = function(target, additionalTargets) {};

/**
 * @return {?}
 */
GUI.prototype.getRoot = function() {};

/**
 * @return {!Object}
 */
GUI.prototype.getSaveObject = function() {};

/**
 * @return {void}
 */
GUI.prototype.save = function() {};

/**
 * @param {string} presetName
 * @return {void}
 */
GUI.prototype.saveAs = function(presetName) {};

/**
 * @param {?} gui
 * @return {void}
 */
GUI.prototype.revert = function(gui) {};

/**
 * @param {?} controller
 * @return {void}
 */
GUI.prototype.listen = function(controller) {};

/**
 * @return {void}
 */
GUI.prototype.updateDisplay = function() {};
/**
 * @record
 * @struct
 */
function GUIParams() {}
 /** @type {boolean} */
GUIParams.prototype.autoPlace;
 /** @type {boolean} */
GUIParams.prototype.closed;
 /** @type {boolean} */
GUIParams.prototype.closeOnTop;
 /** @type {?} */
GUIParams.prototype.load;
 /** @type {string} */
GUIParams.prototype.name;
 /** @type {string} */
GUIParams.prototype.preset;
 /** @type {number} */
GUIParams.prototype.width;
/**
 * @constructor
 * @struct
 */
function GUIController() {}
 /** @type {?} */
GUIController.prototype.onChange;
 /** @type {?} */
GUIController.prototype.onFinishChange;

/**
 * @return {void}
 */
GUIController.prototype.destroy = function() {};

/**
 * @param {?} value
 * @return {?}
 */
GUIController.prototype.setValue = function(value) {};

/**
 * @return {?}
 */
GUIController.prototype.getValue = function() {};

/**
 * @return {void}
 */
GUIController.prototype.updateDisplay = function() {};

/**
 * @return {boolean}
 */
GUIController.prototype.isModified = function() {};

/**
 * @param {number} n
 * @return {?}
 */
GUIController.prototype.min = function(n) {};

/**
 * @param {number} n
 * @return {?}
 */
GUIController.prototype.max = function(n) {};

/**
 * @param {number} n
 * @return {?}
 */
GUIController.prototype.step = function(n) {};

/**
 * @return {?}
 */
GUIController.prototype.fire = function() {};

/**
 * @param {?} option
 * @return {?}
 */
GUIController.prototype.options = function(option) {};

/**
 * @param {string} s
 * @return {?}
 */
GUIController.prototype.name = function(s) {};

/**
 * @return {?}
 */
GUIController.prototype.listen = function() {};

/**
 * @return {?}
 */
GUIController.prototype.remove = function() {};
