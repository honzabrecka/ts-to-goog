/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/react-svg-pan-zoom/index.d.ts:

/* TODO: ImportDeclaration in  */
 /** @type {string} */
var MODE_IDLE;
 /** @type {string} */
var MODE_PANNING;
 /** @type {string} */
var MODE_ZOOMING;
 /** @type {string} */
var TOOL_AUTO;
 /** @type {string} */
var TOOL_NONE;
 /** @type {string} */
var TOOL_PAN;
 /** @type {string} */
var TOOL_ZOOM_IN;
 /** @type {string} */
var TOOL_ZOOM_OUT;
 /** @type {string} */
var POSITION_NONE;
 /** @type {string} */
var POSITION_TOP;
 /** @type {string} */
var POSITION_RIGHT;
 /** @type {string} */
var POSITION_BOTTOM;
 /** @type {string} */
var POSITION_LEFT;

/** @typedef {string} */
var Mode;
/**
 * @record
 * @struct
 */
function Value() {}
 /** @type {number} */
Value.prototype.version;
 /** @type {string} */
Value.prototype.mode;
 /** @type {boolean} */
Value.prototype.focus;
 /** @type {number} */
Value.prototype.a;
 /** @type {number} */
Value.prototype.b;
 /** @type {number} */
Value.prototype.c;
 /** @type {number} */
Value.prototype.d;
 /** @type {number} */
Value.prototype.e;
 /** @type {number} */
Value.prototype.f;
 /** @type {number} */
Value.prototype.viewerWidth;
 /** @type {number} */
Value.prototype.viewerHeight;
 /** @type {number} */
Value.prototype.SVGWidth;
 /** @type {number} */
Value.prototype.SVGHeight;
 /** @type {number} */
Value.prototype.startX;
 /** @type {number} */
Value.prototype.startY;
 /** @type {number} */
Value.prototype.endX;
 /** @type {number} */
Value.prototype.endY;

/** @typedef {string} */
var Tool;

/** @typedef {string} */
var ToolbarPosition;
/**
 * @record
 * @struct
 */
function OptionalProps() {}
 /** @type {string} */
OptionalProps.prototype.background;
 /** @type {string} */
OptionalProps.prototype.SVGBackground;
 /** @type {?} */
OptionalProps.prototype.value;
 /** @type {!Object} */
OptionalProps.prototype.style;
 /** @type {string} */
OptionalProps.prototype.className;
 /** @type {boolean} */
OptionalProps.prototype.detectWheel;
 /** @type {boolean} */
OptionalProps.prototype.detectAutoPan;
 /** @type {string} */
OptionalProps.prototype.toolbarPosition;
 /** @type {boolean} */
OptionalProps.prototype.preventPanOutside;
 /** @type {number} */
OptionalProps.prototype.scaleFactor;
 /** @type {string} */
OptionalProps.prototype.tool;
 /** @type {!Array<string>} */
OptionalProps.prototype.modifierKeys;
 /** @type {(!React.Component<?, !Object>|!React.StatelessComponent<?>)} */
OptionalProps.prototype.customToolbar;

/**
 * @param {?} value
 * @return {void}
 */
OptionalProps.prototype.onChangeValue = function(value) {};

/**
 * @param {string} tool
 * @return {void}
 */
OptionalProps.prototype.onChangeTool = function(tool) {};

/**
 * @template T
 * @param {?} event
 * @return {void}
 */
OptionalProps.prototype.onClick = function(event) {};

/**
 * @template T
 * @param {?} event
 * @return {void}
 */
OptionalProps.prototype.onDoubleClick = function(event) {};

/**
 * @template T
 * @param {?} event
 * @return {void}
 */
OptionalProps.prototype.onMouseUp = function(event) {};

/**
 * @template T
 * @param {?} event
 * @return {void}
 */
OptionalProps.prototype.onMouseMove = function(event) {};

/**
 * @template T
 * @param {?} event
 * @return {void}
 */
OptionalProps.prototype.onMouseDown = function(event) {};
/**
 * @record
 * @struct
 */
function RequiredProps() {}
 /** @type {number} */
RequiredProps.prototype.width;
 /** @type {number} */
RequiredProps.prototype.height;

/** @typedef {?} */
var Props;
/**
 * @constructor
 * @struct
 */
function ReactSVGPanZoom() {}

/**
 * @param {number} SVGDeltaX
 * @param {number} SVGDeltaY
 * @return {void}
 */
ReactSVGPanZoom.prototype.pan = function(SVGDeltaX, SVGDeltaY) {};

/**
 * @param {number} SVGPointX
 * @param {number} SVGPointY
 * @param {number} scaleFactor
 * @return {void}
 */
ReactSVGPanZoom.prototype.zoom = function(SVGPointX, SVGPointY, scaleFactor) {};

/**
 * @param {number} selectionSVGPointX
 * @param {number} selectionSVGPointY
 * @param {number} selectionWidth
 * @param {number} selectionHeight
 * @return {void}
 */
ReactSVGPanZoom.prototype.fitSelection = function(selectionSVGPointX, selectionSVGPointY, selectionWidth, selectionHeight) {};

/**
 * @return {void}
 */
ReactSVGPanZoom.prototype.fitToViewer = function() {};

/**
 * @param {number} SVGPointX
 * @param {number} SVGPointY
 * @param {number} zoomLevel
 * @return {void}
 */
ReactSVGPanZoom.prototype.setPointOnViewerCenter = function(SVGPointX, SVGPointY, zoomLevel) {};

/**
 * @return {void}
 */
ReactSVGPanZoom.prototype.reset = function() {};

/**
 * @param {number} scaleFactor
 * @return {void}
 */
ReactSVGPanZoom.prototype.zoomOnViewerCenter = function(scaleFactor) {};

/**
 * @return {?}
 */
ReactSVGPanZoom.prototype.getValue = function() {};

/**
 * @param {?} value
 * @return {void}
 */
ReactSVGPanZoom.prototype.setValue = function(value) {};

/**
 * @return {string}
 */
ReactSVGPanZoom.prototype.getTool = function() {};

/**
 * @param {string} tool
 * @return {void}
 */
ReactSVGPanZoom.prototype.setTool = function(tool) {};
/**
 * @record
 * @struct
 */
function Point() {}
 /** @type {number} */
Point.prototype.x;
 /** @type {number} */
Point.prototype.y;
/**
 * @record
 * @struct
 */
function ViewerMouseEvent() {}
 /** @type {!React.MouseEvent<?>} */
ViewerMouseEvent.prototype.originalEvent;
 /** @type {!SVGSVGElement} */
ViewerMouseEvent.prototype.SVGViewer;
 /** @type {?} */
ViewerMouseEvent.prototype.point;
 /** @type {number} */
ViewerMouseEvent.prototype.x;
 /** @type {number} */
ViewerMouseEvent.prototype.y;
 /** @type {number} */
ViewerMouseEvent.prototype.scaleFactor;
 /** @type {number} */
ViewerMouseEvent.prototype.translationX;
 /** @type {number} */
ViewerMouseEvent.prototype.translationY;

/**
 * @return {void}
 */
ViewerMouseEvent.prototype.preventDefault = function() {};

/**
 * @return {void}
 */
ViewerMouseEvent.prototype.stopPropagation = function() {};
/**
 * @record
 * @struct
 */
function ViewerTouchEvent() {}
 /** @type {!React.TouchEvent<?>} */
ViewerTouchEvent.prototype.originalEvent;
 /** @type {!SVGSVGElement} */
ViewerTouchEvent.prototype.SVGViewer;
 /** @type {!Array<?>} */
ViewerTouchEvent.prototype.points;
 /** @type {!Array<?>} */
ViewerTouchEvent.prototype.changedPoints;
 /** @type {number} */
ViewerTouchEvent.prototype.scaleFactor;
 /** @type {number} */
ViewerTouchEvent.prototype.translationX;
 /** @type {number} */
ViewerTouchEvent.prototype.translationY;

/**
 * @return {void}
 */
ViewerTouchEvent.prototype.preventDefault = function() {};

/**
 * @return {void}
 */
ViewerTouchEvent.prototype.stopPropagation = function() {};

/**
 * @param {?} value
 * @param {number} SVGDeltaX
 * @param {number} SVGDeltaY
 * @param {number=} panLimit
 * @return {?}
 */
function pan(value, SVGDeltaX, SVGDeltaY, panLimit) {}

/**
 * @param {?} value
 * @param {number} SVGPointX
 * @param {number} SVGPointY
 * @param {number} scaleFactor
 * @return {?}
 */
function zoom(value, SVGPointX, SVGPointY, scaleFactor) {}

/**
 * @param {?} value
 * @param {number} selectionSVGPointX
 * @param {number} selectionSVGPointY
 * @param {number} selectionWidth
 * @param {number} selectionHeight
 * @return {?}
 */
function fitSelection(value, selectionSVGPointX, selectionSVGPointY, selectionWidth, selectionHeight) {}

/**
 * @param {?} value
 * @return {?}
 */
function fitToViewer(value) {}

/**
 * @param {?} value
 * @param {number} scaleFactor
 * @return {?}
 */
function zoomOnViewerCenter(value, scaleFactor) {}

/**
 * @param {?} value
 * @param {number} SVGPointX
 * @param {number} SVGPointY
 * @param {number} zoomLevel
 * @return {?}
 */
function setPointOnViewerCenter(value, SVGPointX, SVGPointY, zoomLevel) {}

/**
 * @param {?} value
 * @return {?}
 */
function reset(value) {}
