/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/screenfull/index.d.ts:
 /** @type {?} */
var screenfull;
/**
 * @record
 * @struct
 */
function IScreenfullRaw() {}
 /** @type {string} */
IScreenfullRaw.prototype.requestFullscreen;
 /** @type {string} */
IScreenfullRaw.prototype.exitFullscreen;
 /** @type {string} */
IScreenfullRaw.prototype.fullscreenElement;
 /** @type {string} */
IScreenfullRaw.prototype.fullscreenEnabled;
 /** @type {string} */
IScreenfullRaw.prototype.fullscreenchange;
 /** @type {string} */
IScreenfullRaw.prototype.fullscreenerror;
/**
 * @record
 * @struct
 */
function IScreenfull() {}
 /** @type {boolean} */
IScreenfull.prototype.isFullscreen;
 /** @type {!Element} */
IScreenfull.prototype.element;
 /** @type {boolean} */
IScreenfull.prototype.enabled;
 /** @type {?} */
IScreenfull.prototype.raw;

/**
 * @param {!Element=} elem
 * @return {void}
 */
IScreenfull.prototype.request = function(elem) {};

/**
 * @param {!Element=} elem
 * @return {void}
 */
IScreenfull.prototype.toggle = function(elem) {};

/**
 * @return {void}
 */
IScreenfull.prototype.exit = function() {};

/**
 * @param {?} handler
 * @return {void}
 */
IScreenfull.prototype.onchange = function(handler) {};

/**
 * @param {?} handler
 * @return {void}
 */
IScreenfull.prototype.onerror = function(handler) {};

/**
 * @param {string} name
 * @param {?} handler
 * @return {void}
 */
IScreenfull.prototype.on = function(name, handler) {};

/**
 * @param {string} name
 * @param {?} handler
 * @return {void}
 */
IScreenfull.prototype.off = function(name, handler) {};

/** @typedef {string} */
var EventNameMap;

/* TODO: ExportAssignment in  */
