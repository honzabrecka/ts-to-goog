/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/notifyjs/index.d.ts:
 /** @type {function(new: (!notifyjs.INotify), string, !notifyjs.INotifyOption): ?} */
var Notify;
/** @const */
var notifyjs = {};
/**
 * @record
 * @struct
 */
notifyjs.INotify = function() {};

/**
 * Show the notification.
 * @return {void}
 */
notifyjs.INotify.prototype.show = function() {};

/**
 * Remove all event listener.
 * @return {void}
 */
notifyjs.INotify.prototype.destroy = function() {};

/**
 * Close the notification.
 * @return {void}
 */
notifyjs.INotify.prototype.close = function() {};

/**
 * @param {!Event} e
 * @return {void}
 */
notifyjs.INotify.prototype.onShowNotification = function(e) {};

/**
 * @return {void}
 */
notifyjs.INotify.prototype.onCloseNotification = function() {};

/**
 * @return {void}
 */
notifyjs.INotify.prototype.onClickNotification = function() {};

/**
 * @return {void}
 */
notifyjs.INotify.prototype.onErrorNotification = function() {};

/**
 * @param {!Event} e
 * @return {void}
 */
notifyjs.INotify.prototype.handleEvent = function(e) {};
/**
 * @record
 * @struct
 */
notifyjs.INotifyOption = function() {};
 /** @type {string} */
notifyjs.INotifyOption.prototype.body;
 /** @type {string} */
notifyjs.INotifyOption.prototype.icon;
 /** @type {string} */
notifyjs.INotifyOption.prototype.tag;
 /** @type {number} */
notifyjs.INotifyOption.prototype.timeout;
 /** @type {!Function} */
notifyjs.INotifyOption.prototype.notifyClose;
 /** @type {!Function} */
notifyjs.INotifyOption.prototype.notifyClick;
 /** @type {!Function} */
notifyjs.INotifyOption.prototype.notifyError;
 /** @type {!Function} */
notifyjs.INotifyOption.prototype.permissionGranted;
 /** @type {!Function} */
notifyjs.INotifyOption.prototype.permissionDenied;
 /** @type {boolean} */
notifyjs.INotifyOption.prototype.requireInteraction;

/**
 * callback when notification is shown
 * @param {!Event} e
 * @return {?}
 */
notifyjs.INotifyOption.prototype.notifyShow = function(e) {};
