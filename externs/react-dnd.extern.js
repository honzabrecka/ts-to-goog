/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/react-dnd/index.d.ts:
/** @const */
var __ReactDnd = {};
/**
 * @extends {React.Component}
 * @constructor
 * @struct
 */
__ReactDnd.ContextComponent = function() {};

/**
 * @return {!React.Component<P, S>}
 */
__ReactDnd.ContextComponent.prototype.getDecoratedComponentInstance = function() {};

/**
 * @return {?}
 */
__ReactDnd.ContextComponent.prototype.getManager = function() {};
/**
 * @extends {React.Component}
 * @constructor
 * @struct
 */
__ReactDnd.DndComponent = function() {};

/**
 * @return {!React.Component<P, S>}
 */
__ReactDnd.DndComponent.prototype.getDecoratedComponentInstance = function() {};

/**
 * @return {string}
 */
__ReactDnd.DndComponent.prototype.getHandlerId = function() {};
/**
 * @extends {React.ComponentClass}
 * @record
 * @struct
 */
__ReactDnd.ContextComponentClass = function() {};

/* TODO: ConstructSignature: __ReactDnd */
 /** @type {!React.ComponentClass<P>} */
__ReactDnd.ContextComponentClass.prototype.DecoratedComponent;
/**
 * @extends {React.ComponentClass}
 * @record
 * @struct
 */
__ReactDnd.DndComponentClass = function() {};

/* TODO: ConstructSignature: __ReactDnd */
 /** @type {!React.ComponentClass<P>} */
__ReactDnd.DndComponentClass.prototype.DecoratedComponent;

/**
 * @template P
 * @param {(string|function(P): string)} type
 * @param {!__ReactDnd.DragSourceSpec<P>} spec
 * @param {function(!__ReactDnd.DragSourceConnector, !__ReactDnd.DragSourceMonitor): !Object} collect
 * @param {!__ReactDnd.DndOptions<P>=} options
 * @return {function((!React.ComponentClass<P>|!React.StatelessComponent<P>)): !__ReactDnd.DndComponentClass<P>}
 */
__ReactDnd.DragSource = function(type, spec, collect, options) {};

/**
 * @template P
 * @param {(string|!Array<string>|function(P): (string|!Array<string>))} types
 * @param {!__ReactDnd.DropTargetSpec<P>} spec
 * @param {function(!__ReactDnd.DropTargetConnector, !__ReactDnd.DropTargetMonitor): !Object} collect
 * @param {!__ReactDnd.DndOptions<P>=} options
 * @return {function((!React.ComponentClass<P>|!React.StatelessComponent<P>)): !__ReactDnd.DndComponentClass<P>}
 */
__ReactDnd.DropTarget = function(types, spec, collect, options) {};

/**
 * @template P
 * @param {!__ReactDnd.Backend} backend
 * @return {function((!React.ComponentClass<P>|!React.StatelessComponent<P>)): !__ReactDnd.ContextComponentClass<P>}
 */
__ReactDnd.DragDropContext = function(backend) {};

/**
 * @template P
 * @param {function(!__ReactDnd.DragLayerMonitor): !Object} collect
 * @param {!__ReactDnd.DndOptions<P>=} options
 * @return {function((!React.ComponentClass<P>|!React.StatelessComponent<P>)): !__ReactDnd.DndComponentClass<P>}
 */
__ReactDnd.DragLayer = function(collect, options) {};

/** @typedef {function(!__ReactDnd.DragSourceConnector, !__ReactDnd.DragSourceMonitor): !Object} */
__ReactDnd.DragSourceCollector;

/** @typedef {function(!__ReactDnd.DropTargetConnector, !__ReactDnd.DropTargetMonitor): !Object} */
__ReactDnd.DropTargetCollector;

/** @typedef {function(!__ReactDnd.DragLayerMonitor): !Object} */
__ReactDnd.DragLayerCollector;

/** @typedef {string} */
__ReactDnd.Identifier;
/**
 * @record
 * @struct
 */
__ReactDnd.ClientOffset = function() {};
 /** @type {number} */
__ReactDnd.ClientOffset.prototype.x;
 /** @type {number} */
__ReactDnd.ClientOffset.prototype.y;
/**
 * @record
 * @struct
 */
__ReactDnd.DndOptions = function() {};

/**
 * @param {P} props
 * @param {P} otherProps
 * @return {boolean}
 */
__ReactDnd.DndOptions.prototype.arePropsEqual = function(props, otherProps) {};
/**
 * @record
 * @struct
 */
__ReactDnd.DragSourceSpec = function() {};

/**
 * @param {P} props
 * @param {!__ReactDnd.DragSourceMonitor=} monitor
 * @param {!React.Component<P, !Object>=} component
 * @return {!Object}
 */
__ReactDnd.DragSourceSpec.prototype.beginDrag = function(props, monitor, component) {};

/**
 * @param {P} props
 * @param {!__ReactDnd.DragSourceMonitor=} monitor
 * @param {!React.Component<P, !Object>=} component
 * @return {void}
 */
__ReactDnd.DragSourceSpec.prototype.endDrag = function(props, monitor, component) {};

/**
 * @param {P} props
 * @param {!__ReactDnd.DragSourceMonitor=} monitor
 * @return {boolean}
 */
__ReactDnd.DragSourceSpec.prototype.canDrag = function(props, monitor) {};

/**
 * @param {P} props
 * @param {!__ReactDnd.DragSourceMonitor=} monitor
 * @return {boolean}
 */
__ReactDnd.DragSourceSpec.prototype.isDragging = function(props, monitor) {};
/**
 * @constructor
 * @struct
 */
__ReactDnd.DragSourceMonitor = function() {};

/**
 * @return {boolean}
 */
__ReactDnd.DragSourceMonitor.prototype.canDrag = function() {};

/**
 * @return {boolean}
 */
__ReactDnd.DragSourceMonitor.prototype.isDragging = function() {};

/**
 * @return {string}
 */
__ReactDnd.DragSourceMonitor.prototype.getItemType = function() {};

/**
 * @return {!Object}
 */
__ReactDnd.DragSourceMonitor.prototype.getItem = function() {};

/**
 * @return {!Object}
 */
__ReactDnd.DragSourceMonitor.prototype.getDropResult = function() {};

/**
 * @return {boolean}
 */
__ReactDnd.DragSourceMonitor.prototype.didDrop = function() {};

/**
 * @return {!__ReactDnd.ClientOffset}
 */
__ReactDnd.DragSourceMonitor.prototype.getInitialClientOffset = function() {};

/**
 * @return {!__ReactDnd.ClientOffset}
 */
__ReactDnd.DragSourceMonitor.prototype.getInitialSourceClientOffset = function() {};

/**
 * @return {!__ReactDnd.ClientOffset}
 */
__ReactDnd.DragSourceMonitor.prototype.getClientOffset = function() {};

/**
 * @return {!__ReactDnd.ClientOffset}
 */
__ReactDnd.DragSourceMonitor.prototype.getDifferenceFromInitialOffset = function() {};

/**
 * @return {!__ReactDnd.ClientOffset}
 */
__ReactDnd.DragSourceMonitor.prototype.getSourceClientOffset = function() {};
/**
 * @constructor
 * @struct
 */
__ReactDnd.DragSourceConnector = function() {};

/**
 * @return {!__ReactDnd.DragElementWrapper<!__ReactDnd.DragSourceOptions>}
 */
__ReactDnd.DragSourceConnector.prototype.dragSource = function() {};

/**
 * @return {!__ReactDnd.DragElementWrapper<!__ReactDnd.DragPreviewOptions>}
 */
__ReactDnd.DragSourceConnector.prototype.dragPreview = function() {};
/**
 * @record
 * @struct
 */
__ReactDnd.DragElementWrapper = function() {};

/* TODO: CallSignature: __ReactDnd */
/**
 * @record
 * @struct
 */
__ReactDnd.DragSourceOptions = function() {};
 /** @type {string} */
__ReactDnd.DragSourceOptions.prototype.dropEffect;
/**
 * @record
 * @struct
 */
__ReactDnd.DragPreviewOptions = function() {};
 /** @type {boolean} */
__ReactDnd.DragPreviewOptions.prototype.captureDraggingState;
 /** @type {number} */
__ReactDnd.DragPreviewOptions.prototype.anchorX;
 /** @type {number} */
__ReactDnd.DragPreviewOptions.prototype.anchorY;

/** @typedef {!__ReactDnd.DragElementWrapper<!__ReactDnd.DragSourceOptions>} */
__ReactDnd.ConnectDragSource;

/** @typedef {!__ReactDnd.DragElementWrapper<!__ReactDnd.DragPreviewOptions>} */
__ReactDnd.ConnectDragPreview;
/**
 * @record
 * @struct
 */
__ReactDnd.DropTargetSpec = function() {};

/**
 * @param {P} props
 * @param {!__ReactDnd.DropTargetMonitor=} monitor
 * @param {!React.Component<P, !Object>=} component
 * @return {(void|!Object)}
 */
__ReactDnd.DropTargetSpec.prototype.drop = function(props, monitor, component) {};

/**
 * @param {P} props
 * @param {!__ReactDnd.DropTargetMonitor=} monitor
 * @param {!React.Component<P, !Object>=} component
 * @return {void}
 */
__ReactDnd.DropTargetSpec.prototype.hover = function(props, monitor, component) {};

/**
 * @param {P} props
 * @param {!__ReactDnd.DropTargetMonitor=} monitor
 * @return {boolean}
 */
__ReactDnd.DropTargetSpec.prototype.canDrop = function(props, monitor) {};
/**
 * @constructor
 * @struct
 */
__ReactDnd.DropTargetMonitor = function() {};

/**
 * @return {boolean}
 */
__ReactDnd.DropTargetMonitor.prototype.canDrop = function() {};

/**
 * @param {{shallow: boolean}=} options
 * @return {boolean}
 */
__ReactDnd.DropTargetMonitor.prototype.isOver = function(options) {};

/**
 * @return {string}
 */
__ReactDnd.DropTargetMonitor.prototype.getItemType = function() {};

/**
 * @return {!Object}
 */
__ReactDnd.DropTargetMonitor.prototype.getItem = function() {};

/**
 * @return {!Object}
 */
__ReactDnd.DropTargetMonitor.prototype.getDropResult = function() {};

/**
 * @return {boolean}
 */
__ReactDnd.DropTargetMonitor.prototype.didDrop = function() {};

/**
 * @return {!__ReactDnd.ClientOffset}
 */
__ReactDnd.DropTargetMonitor.prototype.getInitialClientOffset = function() {};

/**
 * @return {!__ReactDnd.ClientOffset}
 */
__ReactDnd.DropTargetMonitor.prototype.getInitialSourceClientOffset = function() {};

/**
 * @return {!__ReactDnd.ClientOffset}
 */
__ReactDnd.DropTargetMonitor.prototype.getClientOffset = function() {};

/**
 * @return {!__ReactDnd.ClientOffset}
 */
__ReactDnd.DropTargetMonitor.prototype.getDifferenceFromInitialOffset = function() {};

/**
 * @return {!__ReactDnd.ClientOffset}
 */
__ReactDnd.DropTargetMonitor.prototype.getSourceClientOffset = function() {};
/**
 * @constructor
 * @struct
 */
__ReactDnd.DropTargetConnector = function() {};

/**
 * @return {function(!React.ReactElement<P>): !React.ReactElement<P>}
 */
__ReactDnd.DropTargetConnector.prototype.dropTarget = function() {};

/** @typedef {function(!React.ReactElement<P>): !React.ReactElement<P>} */
__ReactDnd.ConnectDropTarget;
/**
 * @constructor
 * @struct
 */
__ReactDnd.DragLayerMonitor = function() {};

/**
 * @return {boolean}
 */
__ReactDnd.DragLayerMonitor.prototype.isDragging = function() {};

/**
 * @return {string}
 */
__ReactDnd.DragLayerMonitor.prototype.getItemType = function() {};

/**
 * @return {!Object}
 */
__ReactDnd.DragLayerMonitor.prototype.getItem = function() {};

/**
 * @return {!__ReactDnd.ClientOffset}
 */
__ReactDnd.DragLayerMonitor.prototype.getInitialClientOffset = function() {};

/**
 * @return {!__ReactDnd.ClientOffset}
 */
__ReactDnd.DragLayerMonitor.prototype.getInitialSourceClientOffset = function() {};

/**
 * @return {!__ReactDnd.ClientOffset}
 */
__ReactDnd.DragLayerMonitor.prototype.getClientOffset = function() {};

/**
 * @return {!__ReactDnd.ClientOffset}
 */
__ReactDnd.DragLayerMonitor.prototype.getDifferenceFromInitialOffset = function() {};

/**
 * @return {!__ReactDnd.ClientOffset}
 */
__ReactDnd.DragLayerMonitor.prototype.getSourceClientOffset = function() {};
/**
 * @record
 * @struct
 */
__ReactDnd.Backend = function() {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "react-dnd"
/** @const */
tsickle_declare_module.react_dnd = {};

/* TODO: ExportAssignment in tsickle_declare_module.react_dnd */
