/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/handsontable/index.d.ts:
/** @const */
var __Handsontable = {};

/**
 * @constructor
 * @struct
 * @param {!Element} element
 * @param {!Handsontable.Options} options
 */
__Handsontable.Core = function(element, options) {};

/**
 * @param {string} key
 * @param {(!Function|!Array<?>)} callback
 * @return {void}
 */
__Handsontable.Core.prototype.addHook = function(key, callback) {};

/**
 * @param {string} key
 * @param {(!Function|!Array<?>)} callback
 * @return {void}
 */
__Handsontable.Core.prototype.addHookOnce = function(key, callback) {};

/**
 * @param {string} action
 * @param {number} index
 * @param {number=} amount
 * @param {string=} source
 * @param {boolean=} keepEmptyRows
 * @return {void}
 */
__Handsontable.Core.prototype.alter = function(action, index, amount, source, keepEmptyRows) {};

/**
 * @return {void}
 */
__Handsontable.Core.prototype.clear = function() {};

/**
 * @return {number}
 */
__Handsontable.Core.prototype.colOffset = function() {};

/**
 * @param {number} col
 * @return {(string|number)}
 */
__Handsontable.Core.prototype.colToProp = function(col) {};

/**
 * @return {number}
 */
__Handsontable.Core.prototype.countCols = function() {};

/**
 * @param {boolean=} ending
 * @return {number}
 */
__Handsontable.Core.prototype.countEmptyCols = function(ending) {};

/**
 * @param {boolean=} ending
 * @return {number}
 */
__Handsontable.Core.prototype.countEmptyRows = function(ending) {};

/**
 * @return {number}
 */
__Handsontable.Core.prototype.countRenderedCols = function() {};

/**
 * @return {number}
 */
__Handsontable.Core.prototype.countRenderedRows = function() {};

/**
 * @return {number}
 */
__Handsontable.Core.prototype.countRows = function() {};

/**
 * @return {number}
 */
__Handsontable.Core.prototype.countSourceRows = function() {};

/**
 * @return {number}
 */
__Handsontable.Core.prototype.countVisibleCols = function() {};

/**
 * @return {number}
 */
__Handsontable.Core.prototype.countVisibleRows = function() {};

/**
 * @return {void}
 */
__Handsontable.Core.prototype.deselectCell = function() {};

/**
 * @return {void}
 */
__Handsontable.Core.prototype.destroy = function() {};

/**
 * @param {boolean=} revertOriginal
 * @return {void}
 */
__Handsontable.Core.prototype.destroyEditor = function(revertOriginal) {};

/**
 * @return {!Object}
 */
__Handsontable.Core.prototype.getActiveEditor = function() {};

/**
 * @param {number} row
 * @param {number} col
 * @param {boolean=} topmost
 * @return {!Element}
 */
__Handsontable.Core.prototype.getCell = function(row, col, topmost) {};

/**
 * @param {number} row
 * @param {number} col
 * @return {!Object}
 */
__Handsontable.Core.prototype.getCellEditor = function(row, col) {};

/**
 * @param {number} row
 * @param {number} col
 * @return {!Object}
 */
__Handsontable.Core.prototype.getCellMeta = function(row, col) {};

/**
 * @param {number} row
 * @param {number} col
 * @return {!Function}
 */
__Handsontable.Core.prototype.getCellRenderer = function(row, col) {};

/**
 * @param {number} row
 * @param {number} col
 * @return {?}
 */
__Handsontable.Core.prototype.getCellValidator = function(row, col) {};

/**
 * @param {number=} col
 * @return {(string|!Array<?>)}
 */
__Handsontable.Core.prototype.getColHeader = function(col) {};

/**
 * @param {number} col
 * @return {number}
 */
__Handsontable.Core.prototype.getColWidth = function(col) {};

/**
 * @param {!Element} elem
 * @return {!Object}
 */
__Handsontable.Core.prototype.getCoords = function(elem) {};

/**
 * @param {number} row
 * @param {number} column
 * @return {string}
 */
__Handsontable.Core.prototype.getCopyableData = function(row, column) {};

/**
 * @param {number} startRow
 * @param {number} startCol
 * @param {number} endRow
 * @param {number} endCol
 * @return {string}
 */
__Handsontable.Core.prototype.getCopyableText = function(startRow, startCol, endRow, endCol) {};

/**
 * @param {number=} r
 * @param {number=} c
 * @param {number=} r2
 * @param {number=} c2
 * @return {!Array<?>}
 */
__Handsontable.Core.prototype.getData = function(r, c, r2, c2) {};

/**
 * @param {number} row
 * @param {number} col
 * @return {?}
 */
__Handsontable.Core.prototype.getDataAtCell = function(row, col) {};

/**
 * @param {number} col
 * @return {!Array<?>}
 */
__Handsontable.Core.prototype.getDataAtCol = function(col) {};

/**
 * @param {(string|number)} prop
 * @return {!Array<?>}
 */
__Handsontable.Core.prototype.getDataAtProp = function(prop) {};

/**
 * @param {number} row
 * @return {!Array<?>}
 */
__Handsontable.Core.prototype.getDataAtRow = function(row) {};

/**
 * @param {number} row
 * @param {string} prop
 * @return {?}
 */
__Handsontable.Core.prototype.getDataAtRowProp = function(row, prop) {};

/**
 * @param {number} rowFrom
 * @param {number} columnFrom
 * @param {number} rowTo
 * @param {number} columnTo
 * @return {string}
 */
__Handsontable.Core.prototype.getDataType = function(rowFrom, columnFrom, rowTo, columnTo) {};

/**
 * @return {?}
 */
__Handsontable.Core.prototype.getInstance = function() {};

/**
 * @param {string} pluginName
 * @return {?}
 */
__Handsontable.Core.prototype.getPlugin = function(pluginName) {};

/**
 * @param {number=} row
 * @return {(string|!Array<?>)}
 */
__Handsontable.Core.prototype.getRowHeader = function(row) {};

/**
 * @param {number} row
 * @return {number}
 */
__Handsontable.Core.prototype.getRowHeight = function(row) {};

/**
 * @return {!Object}
 */
__Handsontable.Core.prototype.getSchema = function() {};

/**
 * @return {!Array<?>}
 */
__Handsontable.Core.prototype.getSelected = function() {};

/**
 * @return {!Handsontable.Range}
 */
__Handsontable.Core.prototype.getSelectedRange = function() {};

/**
 * @return {!Handsontable.Options}
 */
__Handsontable.Core.prototype.getSettings = function() {};

/**
 * @param {number=} r
 * @param {number=} c
 * @param {number=} r2
 * @param {number=} c2
 * @return {!Array<?>}
 */
__Handsontable.Core.prototype.getSourceData = function(r, c, r2, c2) {};

/**
 * @param {number} row
 * @param {number} column
 * @return {?}
 */
__Handsontable.Core.prototype.getSourceDataAtCell = function(row, column) {};

/**
 * @param {number} column
 * @return {!Array<?>}
 */
__Handsontable.Core.prototype.getSourceDataAtCol = function(column) {};

/**
 * @param {number} row
 * @return {(!Object|!Array<?>)}
 */
__Handsontable.Core.prototype.getSourceDataAtRow = function(row) {};

/**
 * @return {?}
 */
__Handsontable.Core.prototype.getValue = function() {};

/**
 * @return {boolean}
 */
__Handsontable.Core.prototype.hasColHeaders = function() {};

/**
 * @param {string} key
 * @return {boolean}
 */
__Handsontable.Core.prototype.hasHook = function(key) {};

/**
 * @return {boolean}
 */
__Handsontable.Core.prototype.hasRowHeaders = function() {};

/**
 * @param {number} col
 * @return {boolean}
 */
__Handsontable.Core.prototype.isEmptyCol = function(col) {};

/**
 * @param {number} row
 * @return {boolean}
 */
__Handsontable.Core.prototype.isEmptyRow = function(row) {};

/**
 * @return {boolean}
 */
__Handsontable.Core.prototype.isListening = function() {};

/**
 * @return {void}
 */
__Handsontable.Core.prototype.listen = function() {};

/**
 * @param {!Array<?>} data
 * @return {void}
 */
__Handsontable.Core.prototype.loadData = function(data) {};

/**
 * @param {number} row
 * @param {number} col
 * @param {!Array<?>} input
 * @param {number=} endRow
 * @param {number=} endCol
 * @param {string=} source
 * @param {string=} method
 * @param {string=} direction
 * @param {!Array<?>=} deltas
 * @return {?}
 */
__Handsontable.Core.prototype.populateFromArray = function(row, col, input, endRow, endCol, source, method, direction, deltas) {};

/**
 * @param {(string|number)} prop
 * @return {number}
 */
__Handsontable.Core.prototype.propToCol = function(prop) {};

/**
 * @param {number} row
 * @param {number} col
 * @param {string} key
 * @return {void}
 */
__Handsontable.Core.prototype.removeCellMeta = function(row, col, key) {};

/**
 * @param {string} key
 * @param {!Function} callback
 * @return {void}
 */
__Handsontable.Core.prototype.removeHook = function(key, callback) {};

/**
 * @return {void}
 */
__Handsontable.Core.prototype.render = function() {};

/**
 * @return {number}
 */
__Handsontable.Core.prototype.rowOffset = function() {};

/**
 * @param {string} key
 * @param {?=} p1
 * @param {?=} p2
 * @param {?=} p3
 * @param {?=} p4
 * @param {?=} p5
 * @param {?=} p6
 * @return {?}
 */
__Handsontable.Core.prototype.runHooks = function(key, p1, p2, p3, p4, p5, p6) {};

/**
 * @param {number} row
 * @param {number} col
 * @param {number=} endRow
 * @param {number=} endCol
 * @param {boolean=} scrollToCell
 * @param {boolean=} changeListener
 * @return {boolean}
 */
__Handsontable.Core.prototype.selectCell = function(row, col, endRow, endCol, scrollToCell, changeListener) {};

/**
 * @param {number} row
 * @param {string} prop
 * @param {number=} endRow
 * @param {string=} endProp
 * @param {boolean=} scrollToCell
 * @return {boolean}
 */
__Handsontable.Core.prototype.selectCellByProp = function(row, prop, endRow, endProp, scrollToCell) {};

/**
 * @param {number} row
 * @param {number} col
 * @param {string} key
 * @param {string} val
 * @return {void}
 */
__Handsontable.Core.prototype.setCellMeta = function(row, col, key, val) {};

/**
 * @param {number} row
 * @param {number} col
 * @param {!Object} prop
 * @return {void}
 */
__Handsontable.Core.prototype.setCellMetaObject = function(row, col, prop) {};

/**
 * @param {number|!Array<!Array<?>>} row_or_changes
 * @param {number=} col
 * @param {string=} value
 * @param {string=} source
 * @return {void}
 */
__Handsontable.Core.prototype.setDataAtCell = function(row_or_changes, col, value, source) {};

/**
 * @param {(number|!Array<?>)} row
 * @param {string} prop
 * @param {string} value
 * @param {string=} source
 * @return {void}
 */
__Handsontable.Core.prototype.setDataAtRowProp = function(row, prop, value, source) {};

/**
 * @param {number} col
 * @param {number} index
 * @param {number} amount
 * @param {?=} elements
 * @return {void}
 */
__Handsontable.Core.prototype.spliceCol = function(col, index, amount, elements) {};

/**
 * @param {number} row
 * @param {number} index
 * @param {number} amount
 * @param {?=} elements
 * @return {void}
 */
__Handsontable.Core.prototype.spliceRow = function(row, index, amount, elements) {};

/**
 * @param {number} row
 * @return {number}
 */
__Handsontable.Core.prototype.toPhysicalRow = function(row) {};

/**
 * @param {number} column
 * @return {number}
 */
__Handsontable.Core.prototype.toPhysicalColumn = function(column) {};

/**
 * @param {number} row
 * @return {number}
 */
__Handsontable.Core.prototype.toVisualRow = function(row) {};

/**
 * @param {number} column
 * @return {number}
 */
__Handsontable.Core.prototype.toVisualColumn = function(column) {};

/**
 * @return {void}
 */
__Handsontable.Core.prototype.unlisten = function() {};

/**
 * @param {!Object} settings
 * @param {boolean=} init
 * @return {void}
 */
__Handsontable.Core.prototype.updateSettings = function(settings, init) {};

/**
 * @param {!Function} callback
 * @return {void}
 */
__Handsontable.Core.prototype.validateCells = function(callback) {};
/** @const */
var Handsontable = {};
/**
 * @record
 * @struct
 */
Handsontable.Options = function() {};
 /** @type {boolean} */
Handsontable.Options.prototype.allowEmpty;
 /** @type {boolean} */
Handsontable.Options.prototype.allowInsertColumn;
 /** @type {boolean} */
Handsontable.Options.prototype.allowInsertRow;
 /** @type {boolean} */
Handsontable.Options.prototype.allowInvalid;
 /** @type {boolean} */
Handsontable.Options.prototype.allowRemoveColumn;
 /** @type {boolean} */
Handsontable.Options.prototype.allowRemoveRow;
 /** @type {(boolean|!Object)} */
Handsontable.Options.prototype.autoColumnSize;
 /** @type {!Array<?>} */
Handsontable.Options.prototype.autoComplete;
 /** @type {(boolean|!Object)} */
Handsontable.Options.prototype.autoRowSize;
 /** @type {boolean} */
Handsontable.Options.prototype.autoWrapCol;
 /** @type {boolean} */
Handsontable.Options.prototype.autoWrapRow;
 /** @type {(string|boolean)} */
Handsontable.Options.prototype.bindRowsWithHeaders;
 /** @type {!Array<?>} */
Handsontable.Options.prototype.cell;
 /** @type {!Function} */
Handsontable.Options.prototype.cells;
 /** @type {(string|boolean)} */
Handsontable.Options.prototype.checkedTemplate;
 /** @type {(string|!Array<?>)} */
Handsontable.Options.prototype.className;
 /** @type {(boolean|!Function|!Array<?>)} */
Handsontable.Options.prototype.colHeaders;
 /** @type {(boolean|!Array<?>)} */
Handsontable.Options.prototype.collapsibleColumns;
 /** @type {(number|!Array<?>)} */
Handsontable.Options.prototype.columnHeaderHeight;
 /** @type {!Array<?>} */
Handsontable.Options.prototype.columns;
 /** @type {(boolean|!Object)} */
Handsontable.Options.prototype.columnSorting;
 /** @type {!Object} */
Handsontable.Options.prototype.columnSummary;
 /** @type {(string|number|!Function|!Array<?>)} */
Handsontable.Options.prototype.colWidths;
 /** @type {string} */
Handsontable.Options.prototype.commentedCellClassName;
 /** @type {(boolean|!Array<?>)} */
Handsontable.Options.prototype.comments;
 /** @type {(boolean|!Object|!Array<?>)} */
Handsontable.Options.prototype.contextMenu;
 /** @type {!Object} */
Handsontable.Options.prototype.contextMenuCopyPaste;
 /** @type {boolean} */
Handsontable.Options.prototype.copyable;
 /** @type {number} */
Handsontable.Options.prototype.copyColsLimit;
 /** @type {boolean} */
Handsontable.Options.prototype.copyPaste;
 /** @type {number} */
Handsontable.Options.prototype.copyRowsLimit;
 /** @type {boolean} */
Handsontable.Options.prototype.correctFormat;
 /** @type {string} */
Handsontable.Options.prototype.currentColClassName;
 /** @type {string} */
Handsontable.Options.prototype.currentRowClassName;
 /** @type {(boolean|!Array<?>)} */
Handsontable.Options.prototype.customBorders;
 /** @type {(!Function|!Array<?>)} */
Handsontable.Options.prototype.data;
 /** @type {!Object} */
Handsontable.Options.prototype.dataSchema;
 /** @type {string} */
Handsontable.Options.prototype.dateFormat;
 /** @type {boolean} */
Handsontable.Options.prototype.debug;
 /** @type {string} */
Handsontable.Options.prototype.defaultDate;
 /** @type {(string|boolean|!Array<?>)} */
Handsontable.Options.prototype.disableVisualSelection;
 /** @type {(boolean|!Object|!Array<?>)} */
Handsontable.Options.prototype.dropdownMenu;
 /** @type {(string|boolean|!Function)} */
Handsontable.Options.prototype.editor;
 /** @type {boolean} */
Handsontable.Options.prototype.enterBeginsEditing;
 /** @type {(!Object|!Function)} */
Handsontable.Options.prototype.enterMoves;
 /** @type {(string|boolean|!Object)} */
Handsontable.Options.prototype.fillHandle;
 /** @type {boolean} */
Handsontable.Options.prototype.filter;
 /** @type {boolean} */
Handsontable.Options.prototype.filteringCaseSensitive;
 /** @type {boolean} */
Handsontable.Options.prototype.filters;
 /** @type {number} */
Handsontable.Options.prototype.fixedColumnsLeft;
 /** @type {number} */
Handsontable.Options.prototype.fixedRowsBottom;
 /** @type {number} */
Handsontable.Options.prototype.fixedRowsTop;
 /** @type {string} */
Handsontable.Options.prototype.format;
 /** @type {(string|boolean)} */
Handsontable.Options.prototype.fragmentSelection;
 /** @type {!Object} */
Handsontable.Options.prototype.ganttChart;
 /** @type {(boolean|!Object)} */
Handsontable.Options.prototype.headerTooltips;
 /** @type {(number|!Function)} */
Handsontable.Options.prototype.height;
 /** @type {(boolean|!Object)} */
Handsontable.Options.prototype.hiddenColumns;
 /** @type {(boolean|!Object)} */
Handsontable.Options.prototype.hiddenRows;
 /** @type {string} */
Handsontable.Options.prototype.invalidCellClassName;
 /** @type {!Object} */
Handsontable.Options.prototype.label;
 /** @type {string} */
Handsontable.Options.prototype.language;
 /** @type {boolean} */
Handsontable.Options.prototype.manualColumnFreeze;
 /** @type {(boolean|!Array<?>)} */
Handsontable.Options.prototype.manualColumnMove;
 /** @type {(boolean|!Array<?>)} */
Handsontable.Options.prototype.manualColumnResize;
 /** @type {(boolean|!Array<?>)} */
Handsontable.Options.prototype.manualRowMove;
 /** @type {(boolean|!Array<?>)} */
Handsontable.Options.prototype.manualRowResize;
 /** @type {number} */
Handsontable.Options.prototype.maxCols;
 /** @type {number} */
Handsontable.Options.prototype.maxRows;
 /** @type {(boolean|!Array<?>)} */
Handsontable.Options.prototype.mergeCells;
 /** @type {number} */
Handsontable.Options.prototype.minCols;
 /** @type {number} */
Handsontable.Options.prototype.minRows;
 /** @type {number} */
Handsontable.Options.prototype.minSpareCols;
 /** @type {number} */
Handsontable.Options.prototype.minSpareRows;
 /** @type {boolean} */
Handsontable.Options.prototype.multiSelect;
 /** @type {!Array<?>} */
Handsontable.Options.prototype.nestedHeaders;
 /** @type {string} */
Handsontable.Options.prototype.noWordWrapClassName;
 /** @type {boolean} */
Handsontable.Options.prototype.observeChanges;
 /** @type {boolean} */
Handsontable.Options.prototype.observeDOMVisibility;
 /** @type {boolean} */
Handsontable.Options.prototype.outsideClickDeselects;
 /** @type {string} */
Handsontable.Options.prototype.pasteMode;
 /** @type {boolean} */
Handsontable.Options.prototype.persistentState;
 /** @type {?} */
Handsontable.Options.prototype.placeholder;
 /** @type {string} */
Handsontable.Options.prototype.placeholderCellClassName;
 /** @type {(string|boolean)} */
Handsontable.Options.prototype.preventOverflow;
 /** @type {boolean} */
Handsontable.Options.prototype.readOnly;
 /** @type {string} */
Handsontable.Options.prototype.readOnlyCellClassName;
 /** @type {boolean} */
Handsontable.Options.prototype.renderAllRows;
 /** @type {(string|!Function)} */
Handsontable.Options.prototype.renderer;
 /** @type {(boolean|!Function|!Array<?>)} */
Handsontable.Options.prototype.rowHeaders;
 /** @type {(number|!Array<?>)} */
Handsontable.Options.prototype.rowHeaderWidth;
 /** @type {(string|number|!Function|!Array<?>)} */
Handsontable.Options.prototype.rowHeights;
 /** @type {boolean} */
Handsontable.Options.prototype.search;
 /** @type {!Array<?>} */
Handsontable.Options.prototype.selectOptions;
 /** @type {boolean} */
Handsontable.Options.prototype.skipColumnOnPaste;
 /** @type {boolean} */
Handsontable.Options.prototype.sortByRelevance;
 /** @type {!Function} */
Handsontable.Options.prototype.sortFunction;
 /** @type {boolean} */
Handsontable.Options.prototype.sortIndicator;
 /** @type {(!Function|!Array<?>)} */
Handsontable.Options.prototype.source;
 /** @type {number} */
Handsontable.Options.prototype.startCols;
 /** @type {number} */
Handsontable.Options.prototype.startRows;
 /** @type {string} */
Handsontable.Options.prototype.stretchH;
 /** @type {boolean} */
Handsontable.Options.prototype.strict;
 /** @type {(string|!Array<?>)} */
Handsontable.Options.prototype.tableClassName;
 /** @type {!Object} */
Handsontable.Options.prototype.tabMoves;
 /** @type {string} */
Handsontable.Options.prototype.title;
 /** @type {boolean} */
Handsontable.Options.prototype.trimDropdown;
 /** @type {boolean} */
Handsontable.Options.prototype.trimWhitespace;
 /** @type {string} */
Handsontable.Options.prototype.type;
 /** @type {(string|boolean)} */
Handsontable.Options.prototype.uncheckedTemplate;
 /** @type {boolean} */
Handsontable.Options.prototype.undo;
 /** @type {(!Function|!RegExp)} */
Handsontable.Options.prototype.validator;
 /** @type {(string|number)} */
Handsontable.Options.prototype.viewportColumnRenderingOffset;
 /** @type {(string|number)} */
Handsontable.Options.prototype.viewportRowRenderingOffset;
 /** @type {number} */
Handsontable.Options.prototype.visibleRows;
 /** @type {(number|!Function)} */
Handsontable.Options.prototype.width;
 /** @type {boolean} */
Handsontable.Options.prototype.wordWrap;

/**
 * @param {number} col
 * @return {boolean}
 */
Handsontable.Options.prototype.isEmptyCol = function(col) {};

/**
 * @param {number} row
 * @return {boolean}
 */
Handsontable.Options.prototype.isEmptyRow = function(row) {};

/**
 * @param {!Array<?>} startArea
 * @param {!Array<?>} entireArea
 * @return {void}
 */
Handsontable.Options.prototype.afterAutofillApplyValues = function(startArea, entireArea) {};

/**
 * @return {void}
 */
Handsontable.Options.prototype.afterCellMetaReset = function() {};

/**
 * @param {!Array<!Array<?>>} changes
 * @param {string=} source
 * @return {void}
 */
Handsontable.Options.prototype.afterChange = function(changes, source) {};

/**
 * @return {void}
 */
Handsontable.Options.prototype.afterChangesObserved = function() {};

/**
 * @param {number} startColumn
 * @param {number} endColumn
 * @return {void}
 */
Handsontable.Options.prototype.afterColumnMove = function(startColumn, endColumn) {};

/**
 * @param {number} currentColumn
 * @param {number} newSize
 * @param {boolean} isDoubleClick
 * @return {void}
 */
Handsontable.Options.prototype.afterColumnResize = function(currentColumn, newSize, isDoubleClick) {};

/**
 * @param {number} column
 * @param {boolean} order
 * @return {void}
 */
Handsontable.Options.prototype.afterColumnSort = function(column, order) {};

/**
 * @param {!Array<?>} predefinedItems
 * @return {void}
 */
Handsontable.Options.prototype.afterContextMenuDefaultOptions = function(predefinedItems) {};

/**
 * @param {!Object} context
 * @return {void}
 */
Handsontable.Options.prototype.afterContextMenuHide = function(context) {};

/**
 * @param {!Object} context
 * @return {void}
 */
Handsontable.Options.prototype.afterContextMenuShow = function(context) {};

/**
 * @param {number} selectedRows
 * @param {number} selectedColumnds
 * @param {number} copyRowsLimit
 * @param {number} copyColumnsLimit
 * @return {void}
 */
Handsontable.Options.prototype.afterCopyLimit = function(selectedRows, selectedColumnds, copyRowsLimit, copyColumnsLimit) {};

/**
 * @param {number} index
 * @param {number} amount
 * @return {void}
 */
Handsontable.Options.prototype.afterCreateCol = function(index, amount) {};

/**
 * @param {number} index
 * @param {number} amount
 * @return {void}
 */
Handsontable.Options.prototype.afterCreateRow = function(index, amount) {};

/**
 * @return {void}
 */
Handsontable.Options.prototype.afterDeselect = function() {};

/**
 * @return {void}
 */
Handsontable.Options.prototype.afterDestroy = function() {};

/**
 * @param {!Event} event
 * @return {void}
 */
Handsontable.Options.prototype.afterDocumentKeyDown = function(event) {};

/**
 * @param {!Array<?>} formulasStack
 * @return {void}
 */
Handsontable.Options.prototype.afterFilter = function(formulasStack) {};

/**
 * @param {number} row
 * @param {number} col
 * @param {!Object} cellProperties
 * @return {void}
 */
Handsontable.Options.prototype.afterGetCellMeta = function(row, col, cellProperties) {};

/**
 * @param {number} col
 * @param {!Element} TH
 * @return {void}
 */
Handsontable.Options.prototype.afterGetColHeader = function(col, TH) {};

/**
 * @param {!Array<?>} array
 * @return {void}
 */
Handsontable.Options.prototype.afterGetColumnHeaderRenderers = function(array) {};

/**
 * @param {number} row
 * @param {!Element} TH
 * @return {void}
 */
Handsontable.Options.prototype.afterGetRowHeader = function(row, TH) {};

/**
 * @param {!Array<?>} array
 * @return {void}
 */
Handsontable.Options.prototype.afterGetRowHeaderRenderers = function(array) {};

/**
 * @return {void}
 */
Handsontable.Options.prototype.afterInit = function() {};

/**
 * @param {boolean} firstTime
 * @return {void}
 */
Handsontable.Options.prototype.afterLoadData = function(firstTime) {};

/**
 * @return {void}
 */
Handsontable.Options.prototype.afterMomentumScroll = function() {};

/**
 * @param {!Object} event
 * @return {void}
 */
Handsontable.Options.prototype.afterOnCellCornerDblClick = function(event) {};

/**
 * @param {!Object} event
 * @return {void}
 */
Handsontable.Options.prototype.afterOnCellCornerMouseDown = function(event) {};

/**
 * @param {!Object} event
 * @param {!Object} coords
 * @param {!Element} TD
 * @return {void}
 */
Handsontable.Options.prototype.afterOnCellMouseDown = function(event, coords, TD) {};

/**
 * @param {!Object} event
 * @param {!Object} coords
 * @param {!Element} TD
 * @return {void}
 */
Handsontable.Options.prototype.afterOnCellMouseOver = function(event, coords, TD) {};

/**
 * @param {number} index
 * @param {number} amount
 * @return {void}
 */
Handsontable.Options.prototype.afterRemoveCol = function(index, amount) {};

/**
 * @param {number} index
 * @param {number} amount
 * @return {void}
 */
Handsontable.Options.prototype.afterRemoveRow = function(index, amount) {};

/**
 * @param {boolean} isForced
 * @return {void}
 */
Handsontable.Options.prototype.afterRender = function(isForced) {};

/**
 * @param {!Element} TD
 * @param {number} row
 * @param {number} col
 * @param {(string|number)} prop
 * @param {string} value
 * @param {!Object} cellProperties
 * @return {void}
 */
Handsontable.Options.prototype.afterRenderer = function(TD, row, col, prop, value, cellProperties) {};

/**
 * @param {number} startRow
 * @param {number} endRow
 * @return {void}
 */
Handsontable.Options.prototype.afterRowMove = function(startRow, endRow) {};

/**
 * @param {number} currentRow
 * @param {number} newSize
 * @param {boolean} isDoubleClick
 * @return {void}
 */
Handsontable.Options.prototype.afterRowResize = function(currentRow, newSize, isDoubleClick) {};

/**
 * @return {void}
 */
Handsontable.Options.prototype.afterScrollHorizontally = function() {};

/**
 * @return {void}
 */
Handsontable.Options.prototype.afterScrollVertically = function() {};

/**
 * @param {number} r
 * @param {number} c
 * @param {number} r2
 * @param {number} c2
 * @return {void}
 */
Handsontable.Options.prototype.afterSelection = function(r, c, r2, c2) {};

/**
 * @param {number} r
 * @param {string} p
 * @param {number} r2
 * @param {string} p2
 * @return {void}
 */
Handsontable.Options.prototype.afterSelectionByProp = function(r, p, r2, p2) {};

/**
 * @param {number} r
 * @param {number} c
 * @param {number} r2
 * @param {number} c2
 * @return {void}
 */
Handsontable.Options.prototype.afterSelectionEnd = function(r, c, r2, c2) {};

/**
 * @param {number} r
 * @param {string} p
 * @param {number} r2
 * @param {string} p2
 * @return {void}
 */
Handsontable.Options.prototype.afterSelectionEndByProp = function(r, p, r2, p2) {};

/**
 * @param {number} row
 * @param {number} col
 * @param {string} key
 * @param {?} value
 * @return {void}
 */
Handsontable.Options.prototype.afterSetCellMeta = function(row, col, key, value) {};

/**
 * @return {void}
 */
Handsontable.Options.prototype.afterUpdateSettings = function() {};

/**
 * @param {boolean} isValid
 * @param {?} value
 * @param {number} row
 * @param {(string|number)} prop
 * @param {string} source
 * @return {(boolean|void)}
 */
Handsontable.Options.prototype.afterValidate = function(isValid, value, row, prop, source) {};

/**
 * @param {!Object} start
 * @param {!Object} end
 * @param {!Array<?>} data
 * @return {void}
 */
Handsontable.Options.prototype.beforeAutofill = function(start, end, data) {};

/**
 * @param {?} stateBefore
 * @param {?} range
 * @param {string} type
 * @param {string} alignmentClass
 * @return {void}
 */
Handsontable.Options.prototype.beforeCellAlignment = function(stateBefore, range, type, alignmentClass) {};

/**
 * @param {!Array<?>} changes
 * @param {string} source
 * @return {void}
 */
Handsontable.Options.prototype.beforeChange = function(changes, source) {};

/**
 * @param {!Array<?>} changes
 * @param {string} source
 * @return {void}
 */
Handsontable.Options.prototype.beforeChangeRender = function(changes, source) {};

/**
 * @param {number} startColumn
 * @param {number} endColumn
 * @return {void}
 */
Handsontable.Options.prototype.beforeColumnMove = function(startColumn, endColumn) {};

/**
 * @param {number} currentColumn
 * @param {number} newSize
 * @param {boolean} isDoubleClick
 * @return {void}
 */
Handsontable.Options.prototype.beforeColumnResize = function(currentColumn, newSize, isDoubleClick) {};

/**
 * @param {number} column
 * @param {boolean} order
 * @return {void}
 */
Handsontable.Options.prototype.beforeColumnSort = function(column, order) {};

/**
 * @param {!Array<?>} corners
 * @param {string} borderClassName
 * @return {void}
 */
Handsontable.Options.prototype.beforeDrawBorders = function(corners, borderClassName) {};

/**
 * @param {!Array<?>} formulasStack
 * @return {void}
 */
Handsontable.Options.prototype.beforeFilter = function(formulasStack) {};

/**
 * @param {number} row
 * @param {number} col
 * @param {!Object} cellProperties
 * @return {void}
 */
Handsontable.Options.prototype.beforeGetCellMeta = function(row, col, cellProperties) {};

/**
 * @return {void}
 */
Handsontable.Options.prototype.beforeInit = function() {};

/**
 * @param {!Object} walkontableConfig
 * @return {void}
 */
Handsontable.Options.prototype.beforeInitWalkontable = function(walkontableConfig) {};

/**
 * @param {!Event} event
 * @return {void}
 */
Handsontable.Options.prototype.beforeKeyDown = function(event) {};

/**
 * @param {!Event} event
 * @param {!Object} coords
 * @param {!Element} TD
 * @return {void}
 */
Handsontable.Options.prototype.beforeOnCellMouseDown = function(event, coords, TD) {};

/**
 * @param {number} index
 * @param {number} amount
 * @param {!Array<?>=} logicalCols
 * @return {void}
 */
Handsontable.Options.prototype.beforeRemoveCol = function(index, amount, logicalCols) {};

/**
 * @param {number} index
 * @param {number} amount
 * @param {!Array<?>=} logicalRows
 * @return {void}
 */
Handsontable.Options.prototype.beforeRemoveRow = function(index, amount, logicalRows) {};

/**
 * @param {boolean} isForced
 * @return {void}
 */
Handsontable.Options.prototype.beforeRender = function(isForced) {};

/**
 * @param {!Element} TD
 * @param {number} row
 * @param {number} col
 * @param {(string|number)} prop
 * @param {string} value
 * @param {!Object} cellProperties
 * @return {void}
 */
Handsontable.Options.prototype.beforeRenderer = function(TD, row, col, prop, value, cellProperties) {};

/**
 * @param {number} startRow
 * @param {number} endRow
 * @return {void}
 */
Handsontable.Options.prototype.beforeRowMove = function(startRow, endRow) {};

/**
 * @param {number} currentRow
 * @param {number} newSize
 * @param {boolean} isDoubleClick
 * @return {?}
 */
Handsontable.Options.prototype.beforeRowResize = function(currentRow, newSize, isDoubleClick) {};

/**
 * @param {!Array<?>} coords
 * @return {void}
 */
Handsontable.Options.prototype.beforeSetRangeEnd = function(coords) {};

/**
 * @param {number} stretchedWidth
 * @param {number} column
 * @return {void}
 */
Handsontable.Options.prototype.beforeStretchingColumnWidth = function(stretchedWidth, column) {};

/**
 * @return {void}
 */
Handsontable.Options.prototype.beforeTouchScroll = function() {};

/**
 * @param {?} value
 * @param {number} row
 * @param {(string|number)} prop
 * @param {string} source
 * @return {void}
 */
Handsontable.Options.prototype.beforeValidate = function(value, row, prop, source) {};

/**
 * @return {void}
 */
Handsontable.Options.prototype.construct = function() {};

/**
 * @return {void}
 */
Handsontable.Options.prototype.init = function() {};

/**
 * @param {number} col
 * @return {void}
 */
Handsontable.Options.prototype.modifyCol = function(col) {};

/**
 * @param {number} column
 * @return {void}
 */
Handsontable.Options.prototype.modifyColHeader = function(column) {};

/**
 * @param {number} width
 * @param {number} col
 * @return {void}
 */
Handsontable.Options.prototype.modifyColWidth = function(width, col) {};

/**
 * @param {!Array<?>} copyableRanges
 * @return {void}
 */
Handsontable.Options.prototype.modifyCopyableRange = function(copyableRanges) {};

/**
 * @param {number} row
 * @return {void}
 */
Handsontable.Options.prototype.modifyRow = function(row) {};

/**
 * @param {number} row
 * @return {void}
 */
Handsontable.Options.prototype.modifyRowHeader = function(row) {};

/**
 * @param {number} height
 * @param {number} row
 * @return {void}
 */
Handsontable.Options.prototype.modifyRowHeight = function(height, row) {};

/**
 * @param {string} key
 * @param {!Object} valuePlaceholder
 * @return {void}
 */
Handsontable.Options.prototype.persistentStateLoad = function(key, valuePlaceholder) {};

/**
 * @param {string} key
 * @return {void}
 */
Handsontable.Options.prototype.persistentStateReset = function(key) {};

/**
 * @param {string} key
 * @param {?} value
 * @return {void}
 */
Handsontable.Options.prototype.persistentStateSave = function(key, value) {};

/**
 * @param {number} col
 * @return {void}
 */
Handsontable.Options.prototype.unmodifyCol = function(col) {};
/**
 * @extends {__Handsontable.Core}
 * @constructor
 * @struct
 */
Handsontable.Core = function() {};
/**
 * @record
 * @struct
 */
Handsontable.Selection = function() {};
 /** @type {!Handsontable.CellPosition} */
Handsontable.Selection.prototype.start;
 /** @type {!Handsontable.CellPosition} */
Handsontable.Selection.prototype.end;
/**
 * @record
 * @struct
 */
Handsontable.Range = function() {};
 /** @type {!Handsontable.CellPosition} */
Handsontable.Range.prototype.from;
 /** @type {!Handsontable.CellPosition} */
Handsontable.Range.prototype.to;
/**
 * @record
 * @struct
 */
Handsontable.HandsontableRegisterer = function() {};

/**
 * @param {string} id
 * @return {!Handsontable.Core}
 */
Handsontable.HandsontableRegisterer.prototype.getInstance = function(id) {};

/**
 * @param {string} id
 * @param {!Handsontable.Core} instance
 * @return {void}
 */
Handsontable.HandsontableRegisterer.prototype.registerInstance = function(id, instance) {};

/**
 * @param {string} id
 * @return {void}
 */
Handsontable.HandsontableRegisterer.prototype.removeInstance = function(id) {};
/**
 * @extends {Handsontable.CellProperties}
 * @record
 * @struct
 */
Handsontable.ColumnProperties = function() {};
 /** @type {(string|number)} */
Handsontable.ColumnProperties.prototype.data;
 /** @type {string} */
Handsontable.ColumnProperties.prototype.title;
 /** @type {(string|!Handsontable.EditorConstructor)} */
Handsontable.ColumnProperties.prototype.editor;
 /** @type {!Array<?>} */
Handsontable.ColumnProperties.prototype.selectOptions;
 /** @type {number} */
Handsontable.ColumnProperties.prototype.width;
/**
 * @record
 * @struct
 */
Handsontable.CellProperties = function() {};
 /** @type {function(!Handsontable.Core, !HTMLTableCellElement, number, number, string, ?, ?): void} */
Handsontable.CellProperties.prototype.renderer;
 /** @type {string} */
Handsontable.CellProperties.prototype.type;
 /** @type {boolean} */
Handsontable.CellProperties.prototype.readOnly;
 /** @type {string} */
Handsontable.CellProperties.prototype.language;
 /** @type {string} */
Handsontable.CellProperties.prototype.format;
 /** @type {function(?, function(boolean): void): void} */
Handsontable.CellProperties.prototype.validator;
 /** @type {boolean} */
Handsontable.CellProperties.prototype.allowInvalid;
 /** @type {string} */
Handsontable.CellProperties.prototype.className;
/**
 * @record
 * @struct
 */
Handsontable.CellPosition = function() {};
 /** @type {number} */
Handsontable.CellPosition.prototype.row;
 /** @type {number} */
Handsontable.CellPosition.prototype.col;
/**
 * @record
 * @struct
 */
Handsontable.BasePlugin = function() {};
 /** @type {boolean} */
Handsontable.BasePlugin.prototype.enabled;
 /** @type {!Handsontable.Core} */
Handsontable.BasePlugin.prototype.hot;

/**
 * @return {void}
 */
Handsontable.BasePlugin.prototype.init = function() {};

/**
 * @return {void}
 */
Handsontable.BasePlugin.prototype.enablePlugin = function() {};

/**
 * @return {void}
 */
Handsontable.BasePlugin.prototype.disablePlugin = function() {};

/**
 * @param {string} name
 * @param {!Function} callback
 * @return {void}
 */
Handsontable.BasePlugin.prototype.addHook = function(name, callback) {};

/**
 * @param {string} name
 * @return {void}
 */
Handsontable.BasePlugin.prototype.removeHooks = function(name) {};

/**
 * @return {void}
 */
Handsontable.BasePlugin.prototype.clearHooks = function() {};

/**
 * @param {!Function} callback
 * @return {void}
 */
Handsontable.BasePlugin.prototype.callOnPluginsReady = function(callback) {};

/**
 * @return {void}
 */
Handsontable.BasePlugin.prototype.updatePlugin = function() {};

/**
 * @return {void}
 */
Handsontable.BasePlugin.prototype.destroy = function() {};
/**
 * @record
 * @struct
 */
Handsontable.PluginConstructor = function() {};

/* TODO: ConstructSignature: Handsontable */
/**
 * @extends {Handsontable.PluginConstructor}
 * @record
 * @struct
 */
Handsontable.ContextMenuPluginConstructor = function() {};
 /** @type {string} */
Handsontable.ContextMenuPluginConstructor.prototype.SEPARATOR;
/**
 * @record
 * @struct
 */
Handsontable.Plugins = function() {};
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.AutoColumnSize;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.AutoRowSizeAutoRowSize;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.BasePlugin;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.BindRowsWithHeaders;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.CollapsibleColumns;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.ColumnSorting;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.ColumnSummary;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.Comments;
 /** @type {!Handsontable.ContextMenuPluginConstructor} */
Handsontable.Plugins.prototype.ContextMenu;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.ContextMenuCopyPaste;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.DragToScroll;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.DropdownMenu;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.ExportFile;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.Filters;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.Formulas;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.GanttChart;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.HeaderTooltips;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.HiddenColumns;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.HiddenRows;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.ManualColumnFreeze;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.ManualColumnMove;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.ManualColumnResize;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.ManualRowMove;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.ManualRowResize;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.MultipleSelectionHandles;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.NestedHeaders;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.NestedRows;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.ObserveChanges;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.TouchScroll;
 /** @type {!Handsontable.PluginConstructor} */
Handsontable.Plugins.prototype.TrimRows;

/**
 * @param {string} pluginName
 * @param {!Handsontable.PluginConstructor} PluginClass
 * @return {void}
 */
Handsontable.Plugins.prototype.registerPlugin = function(pluginName, PluginClass) {};
/**
 * @record
 * @struct
 */
Handsontable.Hooks = function() {};

/**
 * Adds a listener (globally or locally) to a specified hook name.
 * 
 * @param {string} key Hook name.
 * @param {(function(!Array<?>): ?|!Array<function(!Array<?>): ?>)} callback Callback function or an array of functions.
 * @param {!Handsontable=} context (optional) The context for the hook callback to be added - a Handsontable instance or leave empty.
 * @return {!Object}
 */
Handsontable.Hooks.prototype.add = function(key, callback, context) {};

/**
 * Returns a new object with empty handlers related to every registered hook name.
 * @return {!Object}
 */
Handsontable.Hooks.prototype.createEmptyBucket = function() {};

/**
 * Deregisters a hook name (removes it from the list of known hook names).
 * 
 * @param {string} key Hook name.
 * @return {void}
 */
Handsontable.Hooks.prototype.deregister = function(key) {};

/**
 * Destroy all listeners connected to the context. If no context is provided, the global listeners will be destroyed.
 * 
 * @param {!Handsontable=} context (optional) A Handsontable instance.
 * @return {void}
 */
Handsontable.Hooks.prototype.destroy = function(context) {};

/**
 * Get hook bucket based on the context of the object or if argument is undefined, get the global hook bucket.
 * 
 * @param {!Handsontable=} context (optional) A Handsontable instance.
 * @return {!Object}
 */
Handsontable.Hooks.prototype.getBucket = function(context) {};

/**
 * Returns an array of registered hooks.
 * @return {!Array<string>}
 */
Handsontable.Hooks.prototype.getRegistered = function() {};

/**
 * Checks whether there are any registered listeners for the provided hook name.
 * 
 * @param {string} key Hook name.
 * @param {!Handsontable=} context (optional) A Handsontable instance.
 * @return {boolean}
 */
Handsontable.Hooks.prototype.has = function(key, context) {};

/**
 * Returns a boolean depending on if a hook by such name has been registered.
 * 
 * @param {string} key Hook name.
 * @return {boolean}
 */
Handsontable.Hooks.prototype.isRegistered = function(key) {};

/**
 * Adds a listener to a specified hook. After the hook runs this listener will be automatically removed from the bucket.
 * 
 * @param {string} key Hook/Event name.
 * @param {(function(!Array<?>): ?|!Array<function(!Array<?>): ?>)} callback Callback function.
 * @param {!Handsontable=} context (optional) A Handsontable instance.
 * @return {void}
 */
Handsontable.Hooks.prototype.once = function(key, callback, context) {};

/**
 * Registers a hook name (adds it to the list of the known hook names). Used by plugins.
 * 
 * @param {string} key The hook name.
 * @return {void}
 */
Handsontable.Hooks.prototype.register = function(key) {};

/**
 * Removes a listener from a hook with a given name.
 * 
 * @param {string} key Hook/Event name.
 * @param {function(!Array<?>): ?} callback Callback function.
 * @param {!Handsontable=} context (optional) A Handsontable instance.
 * @return {boolean}
 */
Handsontable.Hooks.prototype.remove = function(key, callback, context) {};

/**
 * Runs all local and global callbacks assigned to the hook identified by the key parameter.
 * It returns either a return value from the last called callback or the first parameter (p1) passed to the run function.
 * 
 * @param {!Handsontable} context Handsontable instance.
 * @param {string} key Hook/Event name.
 * @param {?=} p1 (optional) Parameter to be passed as an argument to the callback function.
 * @param {?=} p2 (optional) Parameter to be passed as an argument to the callback function.
 * @param {?=} p3 (optional) Parameter to be passed as an argument to the callback function.
 * @param {?=} p4 (optional) Parameter to be passed as an argument to the callback function.
 * @param {?=} p5 (optional) Parameter to be passed as an argument to the callback function.
 * @param {?=} p6 (optional) Parameter to be passed as an argument to the callback function.
 * @return {?}
 */
Handsontable.Hooks.prototype.run = function(context, key, p1, p2, p3, p4, p5, p6) {};
/**
 * @record
 * @struct
 */
Handsontable.Dom = function() {};

/**
 * @param {!HTMLElement} element
 * @param {string} eventName
 * @param {!Function} callback
 * @return {void}
 */
Handsontable.Dom.prototype.addEvent = function(element, eventName, callback) {};

/**
 * @param {!HTMLElement} element
 * @param {(string|!Array<string>)} className
 * @return {void}
 */
Handsontable.Dom.prototype.addClass = function(element, className) {};

/**
 * @param {!HTMLElement} element
 * @param {(string|!Array<string>)} className
 * @return {void}
 */
Handsontable.Dom.prototype.removeClass = function(element, className) {};

/**
 * @param {!HTMLElement} element
 * @return {?}
 */
Handsontable.Dom.prototype.offset = function(element) {};

/**
 * @return {number}
 */
Handsontable.Dom.prototype.getWindowScrollLeft = function() {};

/**
 * @return {number}
 */
Handsontable.Dom.prototype.getWindowScrollTop = function() {};

/**
 * @param {!HTMLElement} element
 * @return {number}
 */
Handsontable.Dom.prototype.outerHeight = function(element) {};

/**
 * @param {!HTMLElement} element
 * @param {string} className
 * @return {boolean}
 */
Handsontable.Dom.prototype.hasClass = function(element, className) {};

/**
 * @param {!HTMLElement} element
 * @return {void}
 */
Handsontable.Dom.prototype.empty = function(element) {};
/**
 * @record
 * @struct
 */
Handsontable.ArrayMapper = function() {};

/**
 * @return {void}
 */
Handsontable.ArrayMapper.prototype.clearMap = function() {};

/**
 * @param {?} value
 * @return {number}
 */
Handsontable.ArrayMapper.prototype.getIndexByValue = function(value) {};

/**
 * @param {number} index
 * @return {?}
 */
Handsontable.ArrayMapper.prototype.getValueByIndex = function(index) {};

/**
 * @param {number} index
 * @param {number=} amount
 * @return {!Array<number>}
 */
Handsontable.ArrayMapper.prototype.insertItems = function(index, amount) {};

/**
 * @param {(number|!Array<number>)} index
 * @param {number=} amount
 * @return {!Array<number>}
 */
Handsontable.ArrayMapper.prototype.removeItems = function(index, amount) {};

/**
 * @param {(number|!Array<number>)} index
 * @param {number=} amount
 * @return {void}
 */
Handsontable.ArrayMapper.prototype.unshiftItems = function(index, amount) {};

/**
 * @param {number} index
 * @param {number=} amount
 * @return {void}
 */
Handsontable.ArrayMapper.prototype.shiftItems = function(index, amount) {};
/**
 * @record
 * @struct
 */
Handsontable.Utils = function() {};
 /** @type {!Handsontable.ArrayMapper} */
Handsontable.Utils.prototype.arrayMapper;
/**
 * @record
 * @struct
 */
Handsontable.Helper = function() {};

/**
 * @param {!Array<?>} array
 * @param {!Function} predicate
 * @return {!Array<?>}
 */
Handsontable.Helper.prototype.arrayFilter = function(array, predicate) {};

/**
 * @param {!Array<?>} array
 * @param {!Function} predicate
 * @return {void}
 */
Handsontable.Helper.prototype.arrayEach = function(array, predicate) {};

/**
 * @param {!Array<?>} array
 * @param {!Function} predicate
 * @return {!Array<?>}
 */
Handsontable.Helper.prototype.arrayMap = function(array, predicate) {};

/**
 * @param {!Array<?>} array
 * @param {!Function} predicate
 * @param {?=} initialValue
 * @return {?}
 */
Handsontable.Helper.prototype.arrayReduce = function(array, predicate, initialValue) {};

/**
 * @param {?} obj
 * @param {!Function} predicate
 * @return {void}
 */
Handsontable.Helper.prototype.objectEach = function(obj, predicate) {};

/**
 * @param {number} rangeFrom
 * @param {(number|!Function)} rangeTo
 * @param {!Function=} iteratee
 * @return {void}
 */
Handsontable.Helper.prototype.rangeEach = function(rangeFrom, rangeTo, iteratee) {};

/**
 * @param {?} Base
 * @param {...?} mixins
 * @return {void}
 */
Handsontable.Helper.prototype.mixin = function(Base, mixins) {};

/**
 * @param {?} number
 * @return {boolean}
 */
Handsontable.Helper.prototype.isNumeric = function(number) {};

/**
 * @param {number} rows
 * @param {number} columns
 * @return {?}
 */
Handsontable.Helper.prototype.createSpreadsheetData = function(rows, columns) {};

/** @typedef {function(!Handsontable.Core, !HTMLTableCellElement, number, number, string, ?, ?): void} */
Handsontable.CellRenderer;
/**
 * @record
 * @struct
 */
Handsontable.Editor = function() {};

/**
 * @return {void}
 */
Handsontable.Editor.prototype.open = function() {};
/**
 * @record
 * @struct
 */
Handsontable.EditorConstructor = function() {};

/* TODO: ConstructSignature: Handsontable */
/**
 * @record
 * @struct
 */
Handsontable.Editors = function() {};
 /** @type {!Handsontable.EditorConstructor} */
Handsontable.Editors.prototype.TextEditor;

/** @typedef {function(?, function(boolean): void): void} */
Handsontable.Validator;
/**
 * @record
 * @struct
 */
Handsontable.Renderers = function() {};
 /** @type {function(!Handsontable.Core, !HTMLTableCellElement, number, number, string, ?, ?): void} */
Handsontable.Renderers.prototype.TextRenderer;
 /** @type {function(!Handsontable.Core, !HTMLTableCellElement, number, number, string, ?, ?): void} */
Handsontable.Renderers.prototype.NumericRenderer;
 /** @type {function(!Handsontable.Core, !HTMLTableCellElement, number, number, string, ?, ?): void} */
Handsontable.Renderers.prototype.AutocompleteRenderer;

/** @typedef {function(string, function(!Array<?>): void): void} */
Handsontable.AsyncAutocompleteSourceFunction;
/**
 * @extends {Handsontable.ColumnProperties}
 * @record
 * @struct
 */
Handsontable.AutocompleteColumn = function() {};
 /** @type {(!Array<?>|function(string, function(!Array<?>): void): void)} */
Handsontable.AutocompleteColumn.prototype.source;
 /** @type {boolean} */
Handsontable.AutocompleteColumn.prototype.strict;
 /** @type {boolean} */
Handsontable.AutocompleteColumn.prototype.trimDropdown;
/**
 * @extends {Handsontable.ColumnProperties}
 * @record
 * @struct
 */
Handsontable.DateColumn = function() {};
 /** @type {string} */
Handsontable.DateColumn.prototype.dateFormat;
 /** @type {boolean} */
Handsontable.DateColumn.prototype.correctFormat;
/**
 * @extends {Handsontable.ColumnProperties}
 * @record
 * @struct
 */
Handsontable.NumericColumn = function() {};
 /** @type {string} */
Handsontable.NumericColumn.prototype.format;
 /** @type {string} */
Handsontable.NumericColumn.prototype.language;
/**
 * @record
 * @struct
 */
Handsontable.CheckboxColumnLabel = function() {};
 /** @type {string} */
Handsontable.CheckboxColumnLabel.prototype.position;
 /** @type {string} */
Handsontable.CheckboxColumnLabel.prototype.property;
 /** @type {string} */
Handsontable.CheckboxColumnLabel.prototype.value;
/**
 * @extends {Handsontable.ColumnProperties}
 * @record
 * @struct
 */
Handsontable.CheckboxColumn = function() {};
 /** @type {?} */
Handsontable.CheckboxColumn.prototype.checkedTemplate;
 /** @type {?} */
Handsontable.CheckboxColumn.prototype.uncheckedTemplate;
 /** @type {!Handsontable.CheckboxColumnLabel} */
Handsontable.CheckboxColumn.prototype.label;

/** @typedef {function(number, number, string): void} */
Handsontable.CellMetaFunction;

/** @typedef {!Handsontable.AutocompleteColumn} */
Handsontable.DropdownColumn;
 /** @type {!Handsontable.Plugins} */
Handsontable.plugins;
 /** @type {!Handsontable.Hooks} */
Handsontable.hooks;
 /** @type {?} */
Handsontable.Dom;
 /** @type {?} */
Handsontable.dom;
 /** @type {!Handsontable.Helper} */
Handsontable.helper;
 /** @type {!Handsontable.Utils} */
Handsontable.utils;
 /** @type {!Handsontable.Renderers} */
Handsontable.renderers;
 /** @type {!Handsontable.Editors} */
Handsontable.editors;

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
