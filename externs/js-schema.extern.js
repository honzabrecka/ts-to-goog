/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/js-schema/index.d.ts:
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "js-schema"
/** @const */
tsickle_declare_module.js_schema = {};

/**
 * @param {?} definition
 * @return {!schema.Schema}
 */
tsickle_declare_module.js_schema.schema = function(definition) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.js_schema.schema.Schema = function() {};

/* TODO: CallSignature: tsickle_declare_module.js_schema.schema */

/* TODO: ExportAssignment in tsickle_declare_module.js_schema */

/**
 * @param {number} n
 * @return {!NumberConstructor}
 */
NumberConstructor.prototype.min = function(n) {};

/**
 * @param {number} n
 * @return {!NumberConstructor}
 */
NumberConstructor.prototype.max = function(n) {};

/**
 * @param {number} n
 * @return {!NumberConstructor}
 */
NumberConstructor.prototype.below = function(n) {};

/**
 * @param {number} n
 * @return {!NumberConstructor}
 */
NumberConstructor.prototype.above = function(n) {};

/**
 * @param {number} n
 * @return {!NumberConstructor}
 */
NumberConstructor.prototype.step = function(n) {};

/**
 * @param {string|number} charset_or_length_or_minLength
 * @param {string|number=} charset_or_maxLength
 * @param {string=} charset
 * @return {!StringConstructor}
 */
StringConstructor.prototype.of = function(charset_or_length_or_minLength, charset_or_maxLength, charset) {};

/**
 * @param {!Array<?>} arr
 * @return {!ArrayConstructor}
 */
ArrayConstructor.prototype.like = function(arr) {};

/**
 * @param {?|number} pattern_or_length_or_minLength
 * @param {?|number=} pattern_or_maxLength
 * @param {?=} pattern
 * @return {!ArrayConstructor}
 */
ArrayConstructor.prototype.of = function(pattern_or_length_or_minLength, pattern_or_maxLength, pattern) {};

/**
 * @param {?} obj
 * @return {!ObjectConstructor}
 */
ObjectConstructor.prototype.like = function(obj) {};

/**
 * @param {?} obj
 * @return {!ObjectConstructor}
 */
ObjectConstructor.prototype.reference = function(obj) {};

/**
 * @param {!Function} func
 * @return {!FunctionConstructor}
 */
FunctionConstructor.prototype.reference = function(func) {};
