/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/osmosis/index.d.ts:
/**
 * @record
 * @struct
 */
function Osmosis() {}

/**
 * define domain where osmosis is parsing data from
 * @param {string} url
 * @return {?}
 */
Osmosis.prototype.get = function(url) {};

/**
 * set scrapped data as result,
 * 1. string, after find function set data by selector as value with this string as key
 * 2. object, define any json object
 * @param {(string|!Object)} json
 * @return {?}
 */
Osmosis.prototype.set = function(json) {};

/**
 * find DOM by selector
 * @param {string} selector
 * @return {?}
 */
Osmosis.prototype.find = function(selector) {};

/**
 * follw links, founded href or src
 * @param {string} selector '\@href' or '\@src', default '\@href'
 * @return {?}
 */
Osmosis.prototype.follow = function(selector) {};

/**
 * paginate followed url
 * @param {string} selector
 * @return {?}
 */
Osmosis.prototype.paginate = function(selector) {};

/**
 * passing string to your function
 * log data
 * @param {?} callback
 * @return {?}
 */
Osmosis.prototype.log = function(callback) {};

/**
 * passing string to your function
 * debug data
 * @param {?} callback
 * @return {?}
 */
Osmosis.prototype.debug = function(callback) {};

/**
 * passing string to your function
 * error data
 * @param {?} callback
 * @return {?}
 */
Osmosis.prototype.error = function(callback) {};

/**
 * passing string to your function
 * result data, osmosis finished
 * @param {?} callback
 * @return {?}
 */
Osmosis.prototype.data = function(callback) {};
 /** @type {?} */
var osmosis;
