/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/echarts/index.d.ts:
/** @const */
var ECharts = {};

/**
 * @param {(!HTMLDivElement|!HTMLCanvasElement)} dom
 * @param {(string|!Object)=} theme
 * @param {{devicePixelRatio: number, renderer: string}=} opts
 * @return {!ECharts.ECharts}
 */
ECharts.init = function(dom, theme, opts) {};
 /** @type {{clipPointsByRect: function(!Array<!Array<number>>, !ECharts.ERectangle): !Array<!Array<number>>, clipRectByRect: function(!ECharts.ERectangle, !ECharts.ERectangle): !ECharts.ERectangle}} */
ECharts.graphic;

/**
 * @param {(string|!Array<string>)} group
 * @return {void}
 */
ECharts.connect = function(group) {};

/**
 * @param {string} group
 * @return {void}
 */
ECharts.disConnect = function(group) {};

/**
 * @param {(!ECharts.ECharts|!HTMLDivElement|!HTMLCanvasElement)} target
 * @return {void}
 */
ECharts.dispose = function(target) {};

/**
 * @param {(!HTMLDivElement|!HTMLCanvasElement)} target
 * @return {void}
 */
ECharts.getInstanceByDom = function(target) {};

/**
 * @param {string} mapName
 * @param {!Object} geoJson
 * @param {!Object=} specialAreas
 * @return {void}
 */
ECharts.registerMap = function(mapName, geoJson, specialAreas) {};

/**
 * @param {string} themeName
 * @param {!Object} theme
 * @return {void}
 */
ECharts.registerTheme = function(themeName, theme) {};
/**
 * @constructor
 * @struct
 */
ECharts.ECharts = function() {};
 /** @type {string} */
ECharts.ECharts.prototype.group;

/**
 * @param {!ECharts.EChartOption} option
 * @param {boolean=} notMerge
 * @param {boolean=} notRefreshImmediately
 * @return {void}
 */
ECharts.ECharts.prototype.setOption = function(option, notMerge, notRefreshImmediately) {};

/**
 * @return {number}
 */
ECharts.ECharts.prototype.getWidth = function() {};

/**
 * @return {number}
 */
ECharts.ECharts.prototype.getHeight = function() {};

/**
 * @return {(!HTMLDivElement|!HTMLCanvasElement)}
 */
ECharts.ECharts.prototype.getDom = function() {};

/**
 * @return {!Object}
 */
ECharts.ECharts.prototype.getOption = function() {};

/**
 * @return {void}
 */
ECharts.ECharts.prototype.resize = function() {};

/**
 * @param {!Object} payload
 * @return {void}
 */
ECharts.ECharts.prototype.dispatchAction = function(payload) {};

/**
 * @param {string} eventName
 * @param {!Function} handler
 * @param {!Object=} context
 * @return {void}
 */
ECharts.ECharts.prototype.on = function(eventName, handler, context) {};

/**
 * @param {string} eventName
 * @param {!Function=} handler
 * @return {void}
 */
ECharts.ECharts.prototype.off = function(eventName, handler) {};

/**
 * @param {string=} type
 * @param {!Object=} opts
 * @return {void}
 */
ECharts.ECharts.prototype.showLoading = function(type, opts) {};

/**
 * @return {void}
 */
ECharts.ECharts.prototype.hideLoading = function() {};

/**
 * @param {{type: string, pixelRatio: number, backgroundColor: string}} opts
 * @return {string}
 */
ECharts.ECharts.prototype.getDataURL = function(opts) {};

/**
 * @param {{type: string, pixelRatio: number, backgroundColor: string}} opts
 * @return {string}
 */
ECharts.ECharts.prototype.getConnectedDataURL = function(opts) {};

/**
 * @return {void}
 */
ECharts.ECharts.prototype.clear = function() {};

/**
 * @return {boolean}
 */
ECharts.ECharts.prototype.isDisposed = function() {};

/**
 * @return {void}
 */
ECharts.ECharts.prototype.dispose = function() {};

/**
 * @param {(string|{seriesIndex: number, seriesId: string, seriesName: string, geoIndex: number, geoId: string, geoName: string, xAxisIndex: number, xAxisId: string, xAxisName: string, yAxisIndex: number, yAxisId: string, yAxisName: string, gridIndex: number, gridId: string, gridName: string})} finder
 * @param {(string|!Array<?>)} value
 * @return {(string|!Array<?>)}
 */
ECharts.ECharts.prototype.convertToPixel = function(finder, value) {};

/**
 * @param {(string|{seriesIndex: number, seriesId: string, seriesName: string, geoIndex: number, geoId: string, geoName: string, xAxisIndex: number, xAxisId: string, xAxisName: string, yAxisIndex: number, yAxisId: string, yAxisName: string, gridIndex: number, gridId: string, gridName: string})} finder
 * @param {(string|!Array<?>)} value
 * @return {(string|!Array<?>)}
 */
ECharts.ECharts.prototype.convertFromPixel = function(finder, value) {};
/**
 * @record
 * @struct
 */
ECharts.ERectangle = function() {};
 /** @type {number} */
ECharts.ERectangle.prototype.x;
 /** @type {number} */
ECharts.ERectangle.prototype.y;
 /** @type {number} */
ECharts.ERectangle.prototype.width;
 /** @type {number} */
ECharts.ERectangle.prototype.height;
/**
 * @record
 * @struct
 */
ECharts.EChartOption = function() {};
 /** @type {!ECharts.EChartTitleOption} */
ECharts.EChartOption.prototype.title;
 /** @type {!Object} */
ECharts.EChartOption.prototype.legend;
 /** @type {!Object} */
ECharts.EChartOption.prototype.grid;
 /** @type {!Object} */
ECharts.EChartOption.prototype.xAxis;
 /** @type {!Object} */
ECharts.EChartOption.prototype.yAxis;
 /** @type {!Object} */
ECharts.EChartOption.prototype.polar;
 /** @type {!Object} */
ECharts.EChartOption.prototype.radiusAxis;
 /** @type {!Object} */
ECharts.EChartOption.prototype.angleAxis;
 /** @type {!Object} */
ECharts.EChartOption.prototype.radar;
 /** @type {!Array<!Object>} */
ECharts.EChartOption.prototype.dataZoom;
 /** @type {!Array<!Object>} */
ECharts.EChartOption.prototype.visualMap;
 /** @type {!Object} */
ECharts.EChartOption.prototype.tooltip;
 /** @type {!Object} */
ECharts.EChartOption.prototype.toolbox;
 /** @type {!Object} */
ECharts.EChartOption.prototype.geo;
 /** @type {!Object} */
ECharts.EChartOption.prototype.parallel;
 /** @type {!Object} */
ECharts.EChartOption.prototype.parallelAxis;
 /** @type {!Object} */
ECharts.EChartOption.prototype.timeline;
 /** @type {!Array<!Object>} */
ECharts.EChartOption.prototype.series;
 /** @type {!Array<!Object>} */
ECharts.EChartOption.prototype.color;
 /** @type {string} */
ECharts.EChartOption.prototype.backgroundColor;
 /** @type {!Object} */
ECharts.EChartOption.prototype.textStyle;
 /** @type {boolean} */
ECharts.EChartOption.prototype.animation;
 /** @type {number} */
ECharts.EChartOption.prototype.animationDuration;
 /** @type {string} */
ECharts.EChartOption.prototype.animationEasing;
 /** @type {number} */
ECharts.EChartOption.prototype.animationDurationUpdate;
 /** @type {string} */
ECharts.EChartOption.prototype.animationEasingUpdate;
/**
 * @record
 * @struct
 */
ECharts.EChartTitleOption = function() {};
 /** @type {boolean} */
ECharts.EChartTitleOption.prototype.show;
 /** @type {string} */
ECharts.EChartTitleOption.prototype.text;
 /** @type {string} */
ECharts.EChartTitleOption.prototype.link;
 /** @type {string} */
ECharts.EChartTitleOption.prototype.target;
 /** @type {!Object} */
ECharts.EChartTitleOption.prototype.textStyle;
 /** @type {string} */
ECharts.EChartTitleOption.prototype.subtext;
 /** @type {string} */
ECharts.EChartTitleOption.prototype.sublink;
 /** @type {string} */
ECharts.EChartTitleOption.prototype.subtarget;
 /** @type {!Object} */
ECharts.EChartTitleOption.prototype.subtextStyle;
 /** @type {number} */
ECharts.EChartTitleOption.prototype.padding;
 /** @type {number} */
ECharts.EChartTitleOption.prototype.itemGap;
 /** @type {number} */
ECharts.EChartTitleOption.prototype.zlevel;
 /** @type {number} */
ECharts.EChartTitleOption.prototype.z;
 /** @type {string} */
ECharts.EChartTitleOption.prototype.left;
 /** @type {string} */
ECharts.EChartTitleOption.prototype.top;
 /** @type {string} */
ECharts.EChartTitleOption.prototype.right;
 /** @type {string} */
ECharts.EChartTitleOption.prototype.bottom;
 /** @type {string} */
ECharts.EChartTitleOption.prototype.backgroundColor;
 /** @type {string} */
ECharts.EChartTitleOption.prototype.borderColor;
 /** @type {number} */
ECharts.EChartTitleOption.prototype.borderWidth;
 /** @type {number} */
ECharts.EChartTitleOption.prototype.shadowBlur;
 /** @type {number} */
ECharts.EChartTitleOption.prototype.shadowColor;
 /** @type {number} */
ECharts.EChartTitleOption.prototype.shadowOffsetX;
 /** @type {number} */
ECharts.EChartTitleOption.prototype.shadowOffsetY;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "echarts"
/** @const */
tsickle_declare_module.echarts = {};

/* TODO: ExportAssignment in tsickle_declare_module.echarts */
