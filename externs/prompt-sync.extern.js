/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/prompt-sync/index.d.ts:
/** @const */
var PromptSync = {};
/**
 * @record
 * @struct
 */
PromptSync.Prompt = function() {};

/* TODO: CallSignature: PromptSync */

/* TODO: CallSignature: PromptSync */

/* TODO: CallSignature: PromptSync */

/* TODO: CallSignature: PromptSync */

/* TODO: CallSignature: PromptSync */

/**
 * @param {string} ask
 * @return {string}
 */
PromptSync.Prompt.prototype.hide = function(ask) {};
/**
 * @record
 * @struct
 */
PromptSync.Option = function() {};
 /** @type {string} */
PromptSync.Option.prototype.ask;
 /** @type {string} */
PromptSync.Option.prototype.echo;
 /** @type {!PromptSync.AutoCompleteFunction} */
PromptSync.Option.prototype.autocomplete;
 /** @type {string} */
PromptSync.Option.prototype.value;
/**
 * @record
 * @struct
 */
PromptSync.Config = function() {};
 /** @type {boolean} */
PromptSync.Config.prototype.sigint;
 /** @type {!PromptSync.AutoCompleteFunction} */
PromptSync.Config.prototype.autocomplete;
 /** @type {!PromptSync.History} */
PromptSync.Config.prototype.history;
/**
 * @record
 * @struct
 */
PromptSync.History = function() {};

/**
 * @return {boolean}
 */
PromptSync.History.prototype.atStart = function() {};

/**
 * @return {boolean}
 */
PromptSync.History.prototype.atPenultimate = function() {};

/**
 * @return {boolean}
 */
PromptSync.History.prototype.pastEnd = function() {};

/**
 * @return {boolean}
 */
PromptSync.History.prototype.atEnd = function() {};

/**
 * @return {string}
 */
PromptSync.History.prototype.prev = function() {};

/**
 * @return {string}
 */
PromptSync.History.prototype.next = function() {};

/**
 * @return {void}
 */
PromptSync.History.prototype.reset = function() {};

/**
 * @param {string} str
 * @return {void}
 */
PromptSync.History.prototype.push = function(str) {};

/**
 * @return {void}
 */
PromptSync.History.prototype.save = function() {};
/**
 * @record
 * @struct
 */
PromptSync.AutoCompleteFunction = function() {};

/* TODO: CallSignature: PromptSync */

/**
 * create -- sync function for reading user input from stdin
 *   sigint: {Boolean} exit on ^C
 *   autocomplete: {StringArray} function({String})
 *   history: {String} a history control object (see `prompt-sync-history`)
 * }
 * @param {!PromptSync.Config=} config
 * @return {!PromptSync.Prompt}
 */
function PromptSync(config) {}

/* TODO: ExportAssignment in  */
