/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/google-earth/index.d.ts:
/** @const */
var google = {};

/**
 * @param {string} moduleName
 * @param {string} moduleVersion
 * @param {?=} optionalSettings
 * @return {void}
 */
google.load = function(moduleName, moduleVersion, optionalSettings) {};
/** @const */
google.earth = {};

/** @typedef {?} */
google.earth.GEEventPhaseEnum;

/** @typedef {?} */
google.earth.KmlListItemTypeEnum;

/** @typedef {?} */
google.earth.KmlColorModeEnum;

/** @typedef {?} */
google.earth.KmlAltitudeModeEnum;

/** @typedef {?} */
google.earth.KmlRefreshModeEnum;

/** @typedef {?} */
google.earth.KmlViewRefreshModeEnum;

/** @typedef {?} */
google.earth.KmlUnitsEnum;

/** @typedef {?} */
google.earth.GEMapTypeEnum;

/** @typedef {?} */
google.earth.GEVisibilityEnum;

/** @typedef {?} */
google.earth.GEHitTestModeEnum;

/** @typedef {?} */
google.earth.GENavigationControlEnum;

/** @typedef {?} */
google.earth.GEViewerOptionsValueEnum;

/** @typedef {?} */
google.earth.GEViewerOptionsTypeEnum;

/**
 * Whether or not the Google Earth Browser Plug-in and API are supported on the current browser and operating system.
 * @return {boolean}
 */
google.earth.isSupported = function() {};

/**
 * Whether or not the Google Earth Browser Plug-in is currently installed on the user's machine.
 * 
 * Note: if the plug-in is not installed, the user will be presented with a 'download' link upon calls to google.earth.createInstance().
 * @return {boolean}
 */
google.earth.isInstalled = function() {};

/**
 * Attempts to create an instance of the plugin under the given web browser HTML DOM node.
 * Upon success, calls the function passed in as the initCallback argument.
 * Upon failure, calls the function passed in as the failureCallback argument and displays an error message to the user in place of the plug-in object.
 * 
 * Note:
 *  
 *    The HTML DOM must be loaded before this function can be called.
 *    Common usage is to call this function upon the <body>'s load event, or to use google.setOnLoadCallback.
 * @param {(string|!Element)} domNode
 * @param {function(!google.earth.GEPlugin): void} initCallback
 * @param {function(?): void} failureCallback
 * @param {?=} options
 * @return {void}
 */
google.earth.createInstance = function(domNode, initCallback, failureCallback, options) {};

/**
 * Attaches a listener to a given object for a specific event; when the event occurs on the object, the given callback is invoked.
 * @param {?} targetObject
 * @param {string} eventID
 * @param {function(!google.earth.KmlEvent): void} listenerCallback
 * @param {boolean=} useCapture
 * @return {void}
 */
google.earth.addEventListener = function(targetObject, eventID, listenerCallback, useCapture) {};

/**
 * Removes an event listener previously added using google.earth.addEventListener() from the event chain.
 * 
 * Note:
 * 
 *    You must pass in the exact same function object as was passed to addEventListener.
 *    If you are using an anonymous function callback, it will need to be refactored into its own variable.
 * @param {?} targetObject
 * @param {string} eventID
 * @param {function(!google.earth.KmlEvent): void} listenerCallback
 * @param {boolean=} useCapture
 * @return {void}
 */
google.earth.removeEventListener = function(targetObject, eventID, listenerCallback, useCapture) {};

/**
 * Retrieves and parses a KML or KMZ file at the given URL and returns an instance of a KmlFeature-derived class representing the parsed KML object model.
 * 
 * Note: This function does not display the feature on the Earth. See below for more information.
 * @param {!google.earth.GEPlugin} pluginInstance
 * @param {string} url
 * @param {function(!google.earth.KmlFeature): void} completionCallback
 * @return {void}
 */
google.earth.fetchKml = function(pluginInstance, url, completionCallback) {};

/**
 * Efficiently executes an arbitrary, user-defined function (the batch function), minimizing the amount of overhead incurred during cross-process communication between the web browser and Google Earth Plugin.
 * This method is useful for batching together a large set of calls to the Earth API, for example, a large number of consecutive calls to KmlCoordArray.pushLatLngAlt.
 * @param {!google.earth.GEPlugin} pluginInstance
 * @param {!Function} batchFunction
 * @return {void}
 */
google.earth.executeBatch = function(pluginInstance, batchFunction) {};

/**
 * Sets the language to be used for new instances of the plugin.
 * Needs to be called before google.earth.createInstance(). 
 * Affects road and border labels, the error message displayed when the plugin fails to load, as well as the language of the Terms of Use page linked from the plugin.
 * @param {string} languageCode
 * @return {void}
 */
google.earth.setLanguage = function(languageCode) {};
/**
 * @constructor
 * @struct
 */
google.earth.GEPhotoOverlayViewer = function() {};

/**
 * Enters the given photo overlay object, exiting any other currently active photo overlay. 
 * If the argument is null, then any currently active photo overlay is exited and normal global navigation is enabled.
 * @param {!google.earth.KmlPhotoOverlay} photoOverlay
 * @return {void}
 */
google.earth.GEPhotoOverlayViewer.prototype.setPhotoOverlay = function(photoOverlay) {};
/**
 * @constructor
 * @struct
 */
google.earth.GENavigationControl = function() {};

/**
 * Whether the control is always visible, always hidden, or visible only when the user intends to use the control.
 * 
 * See also:
 * 
 * * GEPlugin.VISIBILITY_SHOW
 * * GEPlugin.VISIBILITY_HIDE
 * * GEPlugin.VISIBILITY_AUTO
 * @return {?}
 */
google.earth.GENavigationControl.prototype.getVisibility = function() {};

/**
 * Whether the control is always visible, always hidden, or visible only when the user intends to use the control.
 * 
 * See also:
 * 
 * * GEPlugin.VISIBILITY_SHOW
 * * GEPlugin.VISIBILITY_HIDE
 * * GEPlugin.VISIBILITY_AUTO
 * @param {?} visibility
 * @return {void}
 */
google.earth.GENavigationControl.prototype.setVisibility = function(visibility) {};

/**
 * Specifies the size of the navigation control.
 * 
 * See also:
 * 
 * * GEPlugin.NAVIGATION_CONTROL_LARGE
 * * GEPlugin.NAVIGATION_CONTROL_SMALL
 * @return {?}
 */
google.earth.GENavigationControl.prototype.getControlType = function() {};

/**
 * Specifies the size of the navigation control.
 * 
 * See also:
 * 
 * * GEPlugin.NAVIGATION_CONTROL_LARGE
 * * GEPlugin.NAVIGATION_CONTROL_SMALL
 * @param {?} controlType
 * @return {void}
 */
google.earth.GENavigationControl.prototype.setControlType = function(controlType) {};

/**
 * The position of the navigation controls in Google Earth
 * @return {!google.earth.KmlVec2}
 */
google.earth.GENavigationControl.prototype.getScreenXY = function() {};

/**
 * Enables or disables user-initiated entry to Street View imagery.
 * When true, the Pegman icon is present in the navigation controls, allowing a user to drag the Pegman onto a street to initiate Street View.
 * Users can also zoom down to ground level to enter Street View when this is set to true.
 * @param {boolean} streetViewEnabled
 * @return {void}
 */
google.earth.GENavigationControl.prototype.setStreetViewEnabled = function(streetViewEnabled) {};

/**
 * Whether Street View is enabled in the navigation controls.
 * @return {boolean}
 */
google.earth.GENavigationControl.prototype.getStreetViewEnabled = function() {};
/**
 * @extends {google.earth.KmlFeature}
 * @constructor
 * @struct
 */
google.earth.KmlTour = function() {};
/**
 * @constructor
 * @struct
 */
google.earth.GETourPlayer = function() {};

/**
 * Enters the given tour object, exiting any other currently active tour.
 * This method does not automatically begin playing the tour. 
 * If the argument is null, then any currently active tour is exited and normal globe navigation is enabled.
 * @param {!google.earth.KmlTour} tour
 * @return {void}
 */
google.earth.GETourPlayer.prototype.setTour = function(tour) {};

/**
 * Plays the currently active tour.
 * @return {void}
 */
google.earth.GETourPlayer.prototype.play = function() {};

/**
 * Pauses the currently active tour.
 * @return {void}
 */
google.earth.GETourPlayer.prototype.pause = function() {};

/**
 * Resets the currently active tour, stopping playback and rewinding to the start of the tour.
 * @return {void}
 */
google.earth.GETourPlayer.prototype.reset = function() {};

/**
 * The current elapsed playing time of the active tour, in seconds.
 * @return {number}
 */
google.earth.GETourPlayer.prototype.getCurrentTime = function() {};

/**
 * The current elapsed playing time of the active tour, in seconds.
 * @param {number} currentTime
 * @return {void}
 */
google.earth.GETourPlayer.prototype.setCurrentTime = function(currentTime) {};

/**
 * The total duration of the active tour, in seconds. If no tour is loaded, the behavior of this method is undefined.
 * @return {number}
 */
google.earth.GETourPlayer.prototype.getDuration = function() {};
/**
 * @constructor
 * @struct
 */
google.earth.GEHitTestResult = function() {};

/**
 * Latitude of sampled point.
 * @return {number}
 */
google.earth.GEHitTestResult.prototype.getLatitude = function() {};

/**
 * Latitude of sampled point.
 * @param {number} latitude
 * @return {void}
 */
google.earth.GEHitTestResult.prototype.setLatitude = function(latitude) {};

/**
 * Longitude of sampled point.
 * @return {number}
 */
google.earth.GEHitTestResult.prototype.getLongitude = function() {};

/**
 * Longitude of sampled point.
 * @param {number} longitude
 * @return {void}
 */
google.earth.GEHitTestResult.prototype.setLongitude = function(longitude) {};

/**
 * Altitude of sampled point.
 * @return {number}
 */
google.earth.GEHitTestResult.prototype.getAltitude = function() {};

/**
 * Altitude of sampled point.
 * @param {number} altitude
 * @return {void}
 */
google.earth.GEHitTestResult.prototype.setAltitude = function(altitude) {};
/**
 * @extends {google.earth.KmlStyleSelector}
 * @constructor
 * @struct
 */
google.earth.KmlStyleMap = function() {};

/**
 * Sets both URLs for the placemark style.
 * @param {string} normalStyleUrl
 * @param {string} highlightStyleUrl
 * @return {void}
 */
google.earth.KmlStyleMap.prototype.setUrl = function(normalStyleUrl, highlightStyleUrl) {};

/**
 * Sets both placemark styles.
 * @param {!google.earth.KmlStyle} normalStyle
 * @param {!google.earth.KmlStyle} highlightStyle
 * @return {void}
 */
google.earth.KmlStyleMap.prototype.setStyle = function(normalStyle, highlightStyle) {};

/**
 * Defines a normal style for a placemark.
 * @return {string}
 */
google.earth.KmlStyleMap.prototype.getNormalStyleUrl = function() {};

/**
 * Defines a normal style for a placemark.
 * @param {string} normalStyleUrl
 * @return {void}
 */
google.earth.KmlStyleMap.prototype.setNormalStyleUrl = function(normalStyleUrl) {};

/**
 * Defines highlighted styles for a placemark, so that the highlighted version appears when the user mouses over the icon in Google Earth.
 * @return {string}
 */
google.earth.KmlStyleMap.prototype.getHighlightStyleUrl = function() {};

/**
 * Defines highlighted styles for a placemark, so that the highlighted version appears when the user mouses over the icon in Google Earth.
 * @param {string} highlightStyleUrl
 * @return {void}
 */
google.earth.KmlStyleMap.prototype.setHighlightStyleUrl = function(highlightStyleUrl) {};

/**
 * Defines a normal style for a placemark.
 * @return {!google.earth.KmlStyle}
 */
google.earth.KmlStyleMap.prototype.getNormalStyle = function() {};

/**
 * Defines a normal style for a placemark.
 * @param {!google.earth.KmlStyle} normalStyle
 * @return {void}
 */
google.earth.KmlStyleMap.prototype.setNormalStyle = function(normalStyle) {};

/**
 * Defines highlighted styles for a placemark, so that the highlighted version appears when the user mouses over the icon in Google Earth.
 * @return {!google.earth.KmlStyle}
 */
google.earth.KmlStyleMap.prototype.getHighlightStyle = function() {};

/**
 * Defines highlighted styles for a placemark, so that the highlighted version appears when the user mouses over the icon in Google Earth.
 * @param {!google.earth.KmlStyle} highlightStyle
 * @return {void}
 */
google.earth.KmlStyleMap.prototype.setHighlightStyle = function(highlightStyle) {};
/**
 * @extends {google.earth.KmlFeature}
 * @constructor
 * @struct
 */
google.earth.KmlNetworkLink = function() {};

/**
 * Sets the link, refreshVisibility, and flyToView for the network link.
 * @param {!google.earth.KmlLink} link
 * @param {boolean} refreshVisibility
 * @param {boolean} flyToView
 * @return {void}
 */
google.earth.KmlNetworkLink.prototype.set = function(link, refreshVisibility, flyToView) {};

/**
 * Specifies the location of any of the following:
 * 
 * * KML files fetched by network links
 * * Image files used by icons in icon styles, ground overlays, and screen overlays
 * * Model files used in the Model object
 * @return {!google.earth.KmlLink}
 */
google.earth.KmlNetworkLink.prototype.getLink = function() {};

/**
 * Specifies the location of any of the following:
 * 
 * * KML files fetched by network links
 * * Image files used by icons in icon styles, ground overlays, and screen overlays
 * * Model files used in the Model object
 * @param {!google.earth.KmlLink} link
 * @return {void}
 */
google.earth.KmlNetworkLink.prototype.setLink = function(link) {};

/**
 * A value of 0 leaves the visibility of features within the control of the Google Earth user.
 * Set the value to 1 to reset the visibility of features each time the NetworkLink is refreshed.
 * For example, suppose a Placemark within the linked KML file has visibility set to 1 and the NetworkLink has refreshVisibility set to 1.
 * When the file is first loaded into Google Earth, the user can clear the check box next to the item to turn off display in the 3D viewer.
 * However, when the NetworkLink is refreshed, the Placemark will be made visible again, since its original visibility state was TRUE.
 * @return {boolean}
 */
google.earth.KmlNetworkLink.prototype.getRefreshVisibility = function() {};

/**
 * A value of 0 leaves the visibility of features within the control of the Google Earth user.
 * Set the value to 1 to reset the visibility of features each time the NetworkLink is refreshed.
 * For example, suppose a Placemark within the linked KML file has visibility set to 1 and the NetworkLink has refreshVisibility set to 1.
 * When the file is first loaded into Google Earth, the user can clear the check box next to the item to turn off display in the 3D viewer.
 * However, when the NetworkLink is refreshed, the Placemark will be made visible again, since its original visibility state was TRUE.
 * @param {boolean} refreshVisibility
 * @return {void}
 */
google.earth.KmlNetworkLink.prototype.setRefreshVisibility = function(refreshVisibility) {};

/**
 * A value of 1 causes Google Earth to fly to the view of the LookAt or Camera in the NetworkLinkControl (if it exists).
 * @return {boolean}
 */
google.earth.KmlNetworkLink.prototype.getFlyToView = function() {};

/**
 * A value of 1 causes Google Earth to fly to the view of the LookAt or Camera in the NetworkLinkControl (if it exists).
 * @param {boolean} flyToView
 * @return {void}
 */
google.earth.KmlNetworkLink.prototype.setFlyToView = function(flyToView) {};
/**
 * @extends {google.earth.KmlOverlay}
 * @constructor
 * @struct
 */
google.earth.KmlScreenOverlay = function() {};

/**
 * Specifies a point on (or outside of) the overlay image that is mapped to the screen coordinate.
 * It requires x and y values, and the units for those values.
 * 
 * Note: 
 * 
 *  screenXY and overlayXY behave opposite to their corresponding behaviors in KML.
 *  This is due to a bug in the Earth API that will intentionally remain unfixed until a major version change.
 * @return {!google.earth.KmlVec2}
 */
google.earth.KmlScreenOverlay.prototype.getScreenXY = function() {};

/**
 * Specifies a point relative to the screen origin that the overlay image is mapped to.
 * The x and y values can be specified in three different ways: as pixels ("pixels"), as fractions of the screen ("fraction"), or as inset pixels ("insetPixels"), which is an offset in pixels from the upper right corner of the screen.
 * The x and y positions can be specified in different ways - for example, x can be in pixels and y can be a fraction.
 * The origin of the coordinate system is in the lower left corner of the screen.
 * 
 * Note: 
 * 
 *  screenXY and overlayXY behave opposite to their corresponding behaviors in KML.
 *  This is due to a bug in the Earth API that will intentionally remain unfixed until a major version change.
 * @return {!google.earth.KmlVec2}
 */
google.earth.KmlScreenOverlay.prototype.getOverlayXY = function() {};

/**
 * Point relative to the screen about which the screen overlay is rotated.
 * @return {!google.earth.KmlVec2}
 */
google.earth.KmlScreenOverlay.prototype.getRotationXY = function() {};

/**
 * Specifies the size of the image for the screen overlay, as follows:
 * 
 * * A value of -1 indicates to use the native dimension
 * * A value of 0 indicates to maintain the aspect ratio
 * * A value of n sets the value of the dimension
 * @return {!google.earth.KmlVec2}
 */
google.earth.KmlScreenOverlay.prototype.getSize = function() {};

/**
 * Adjusts how the image is placed inside the field of view.
 * This element is useful if your image has been rotated and deviates slightly from a desired horizontal view.
 * @return {number}
 */
google.earth.KmlScreenOverlay.prototype.getRotation = function() {};

/**
 * Adjusts how the image is placed inside the field of view.
 * This element is useful if your image has been rotated and deviates slightly from a desired horizontal view.
 * @param {number} rotation
 * @return {void}
 */
google.earth.KmlScreenOverlay.prototype.setRotation = function(rotation) {};
/**
 * @extends {google.earth.KmlOverlay}
 * @constructor
 * @struct
 */
google.earth.KmlPhotoOverlay = function() {};
/**
 * @extends {google.earth.KmlOverlay}
 * @constructor
 * @struct
 */
google.earth.KmlGroundOverlay = function() {};

/**
 * Specifies the distance above the earth's surface.
 * @return {number}
 */
google.earth.KmlGroundOverlay.prototype.getAltitude = function() {};

/**
 * Specifies the distance above the earth's surface.
 * @param {number} altitude
 * @return {void}
 */
google.earth.KmlGroundOverlay.prototype.setAltitude = function(altitude) {};

/**
 * Specifies how the altitude property is interpreted.
 * 
 * See also:
 * 
 * * GEPlugin.ALTITUDE_CLAMP_TO_GROUND
 * * GEPlugin.ALTITUDE_ABSOLUTE
 * * GEPlugin.ALTITUDE_CLAMP_TO_SEA_FLOOR
 * @return {?}
 */
google.earth.KmlGroundOverlay.prototype.getAltitudeMode = function() {};

/**
 * Specifies how the altitude property is interpreted.
 * 
 * See also:
 * 
 * * GEPlugin.ALTITUDE_CLAMP_TO_GROUND
 * * GEPlugin.ALTITUDE_ABSOLUTE
 * * GEPlugin.ALTITUDE_CLAMP_TO_SEA_FLOOR
 * @param {?} altitudeMode
 * @return {void}
 */
google.earth.KmlGroundOverlay.prototype.setAltitudeMode = function(altitudeMode) {};

/**
 * The bounding box of the ground overlay.
 * @return {!google.earth.KmlLatLonBox}
 */
google.earth.KmlGroundOverlay.prototype.getLatLonBox = function() {};

/**
 * The bounding box of the ground overlay.
 * @param {!google.earth.KmlLatLonBox} latLonBox
 * @return {void}
 */
google.earth.KmlGroundOverlay.prototype.setLatLonBox = function(latLonBox) {};
/**
 * @extends {google.earth.KmlFeature}
 * @constructor
 * @struct
 */
google.earth.KmlOverlay = function() {};

/**
 * Specifies the color values.
 * @return {!google.earth.KmlColor}
 */
google.earth.KmlOverlay.prototype.getColor = function() {};

/**
 * Defines the stacking order for the images in overlapping overlays.
 * Overlays with higher drawOrder values are drawn on top of overlays with lower drawOrder values.
 * @return {number}
 */
google.earth.KmlOverlay.prototype.getDrawOrder = function() {};

/**
 * Defines the stacking order for the images in overlapping overlays.
 * Overlays with higher drawOrder values are drawn on top of overlays with lower drawOrder values.
 * @param {number} drawOrder
 * @return {void}
 */
google.earth.KmlOverlay.prototype.setDrawOrder = function(drawOrder) {};

/**
 * Defines the image associated with the Overlay.
 * @return {!google.earth.KmlIcon}
 */
google.earth.KmlOverlay.prototype.getIcon = function() {};

/**
 * Defines the image associated with the Overlay.
 * @param {!google.earth.KmlIcon} icon
 * @return {void}
 */
google.earth.KmlOverlay.prototype.setIcon = function(icon) {};
/**
 * @extends {google.earth.KmlObject}
 * @constructor
 * @struct
 */
google.earth.KmlViewerOptions = function() {};

/**
 * Returns the current state of the specified viewer option type.
 * 
 * See also:
 * 
 * * GEPlugin.OPTION_STREET_VIEW
 * * GEPlugin.OPTION_SUNLIGHT
 * * GEPlugin.OPTION_HISTORICAL_IMAGERY
 * * GEPlugin.OPTION_STATE_DEFAULT
 * * GEPlugin.OPTION_STATE_ENABLED
 * * GEPlugin.OPTION_STATE_DISABLED
 * @param {?} type
 * @param {?} state
 * @return {void}
 */
google.earth.KmlViewerOptions.prototype.setOption = function(type, state) {};

/**
 * Set the state of viewer options, including sunlight, Street View, and historical imagery.
 * 
 * See also:
 * 
 * * GEPlugin.OPTION_STREET_VIEW
 * * GEPlugin.OPTION_SUNLIGHT
 * * GEPlugin.OPTION_HISTORICAL_IMAGERY
 * * GEPlugin.OPTION_STATE_DEFAULT
 * * GEPlugin.OPTION_STATE_ENABLED
 * * GEPlugin.OPTION_STATE_DISABLED
 * @param {?} type
 * @return {?}
 */
google.earth.KmlViewerOptions.prototype.getOption = function(type) {};
/**
 * @extends {google.earth.KmlObject}
 * @constructor
 * @struct
 */
google.earth.KmlOrientation = function() {};

/**
 * Sets the heading, tilt, and roll of a model.
 * @param {number} heading
 * @param {number} tilt
 * @param {number} roll
 * @return {void}
 */
google.earth.KmlOrientation.prototype.set = function(heading, tilt, roll) {};

/**
 * Rotation about the z axis (normal to the Earth's surface).
 * A value of 0 (the default) equals North.
 * A positive rotation is clockwise around the z axis and specified in degrees from 0 to 360.
 * @return {number}
 */
google.earth.KmlOrientation.prototype.getHeading = function() {};

/**
 * Rotation about the z axis (normal to the Earth's surface).
 * A value of 0 (the default) equals North.
 * A positive rotation is clockwise around the z axis and specified in degrees from 0 to 360.
 * @param {number} heading
 * @return {void}
 */
google.earth.KmlOrientation.prototype.setHeading = function(heading) {};

/**
 * Rotation about the x axis.
 * A positive rotation is clockwise around the x axis and specified in degrees from 0 to 360.
 * @return {number}
 */
google.earth.KmlOrientation.prototype.getTilt = function() {};

/**
 * Rotation about the x axis.
 * A positive rotation is clockwise around the x axis and specified in degrees from 0 to 360.
 * @param {number} tilt
 * @return {void}
 */
google.earth.KmlOrientation.prototype.setTilt = function(tilt) {};

/**
 * Rotation about the y axis.
 * A positive rotation is clockwise around the y axis and specified in degrees from 0 to 360.
 * @return {number}
 */
google.earth.KmlOrientation.prototype.getRoll = function() {};

/**
 * Rotation about the y axis.
 * A positive rotation is clockwise around the y axis and specified in degrees from 0 to 360.
 * @param {number} roll
 * @return {void}
 */
google.earth.KmlOrientation.prototype.setRoll = function(roll) {};
/**
 * @extends {google.earth.KmlObject}
 * @constructor
 * @struct
 */
google.earth.KmlLocation = function() {};

/**
 * Sets the latitude, longitude, and altitude of the Model.
 * @param {number} lat
 * @param {number} lng
 * @param {number} alt
 * @return {void}
 */
google.earth.KmlLocation.prototype.setLatLngAlt = function(lat, lng, alt) {};

/**
 * Longitude of the Model's location.
 * Angular distance in degrees, relative to the Prime Meridian.
 * Values west of the Meridian range from -180 to 0 degrees.
 * Values east of the Meridian range from 0 to 180 degrees.
 * @return {number}
 */
google.earth.KmlLocation.prototype.getLongitude = function() {};

/**
 * Longitude of the Model's location.
 * Angular distance in degrees, relative to the Prime Meridian.
 * Values west of the Meridian range from -180 to 0 degrees.
 * Values east of the Meridian range from 0 to 180 degrees.
 * @param {number} longitude
 * @return {void}
 */
google.earth.KmlLocation.prototype.setLongitude = function(longitude) {};

/**
 * Latitude of the camera location.
 * Degrees north or south of the Equator (0 degrees).
 * Values range from -90 degrees (South Pole) to 90 degrees (North Pole).
 * @return {number}
 */
google.earth.KmlLocation.prototype.getLatitude = function() {};

/**
 * Latitude of the camera location.
 * Degrees north or south of the Equator (0 degrees).
 * Values range from -90 degrees (South Pole) to 90 degrees (North Pole).
 * @param {number} latitude
 * @return {void}
 */
google.earth.KmlLocation.prototype.setLatitude = function(latitude) {};

/**
 * Specifies the distance above the earth's surface.
 * @return {number}
 */
google.earth.KmlLocation.prototype.getAltitude = function() {};

/**
 * Specifies the distance above the earth's surface.
 * @param {number} altitude
 * @return {void}
 */
google.earth.KmlLocation.prototype.setAltitude = function(altitude) {};
/**
 * @extends {google.earth.KmlObject}
 * @constructor
 * @struct
 */
google.earth.KmlScale = function() {};

/**
 * Sets the x, y, and z coordinates for a model.
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @return {void}
 */
google.earth.KmlScale.prototype.set = function(x, y, z) {};

/**
 * Indicates the x coordinate.
 * @return {number}
 */
google.earth.KmlScale.prototype.getX = function() {};

/**
 * Indicates the x coordinate.
 * @param {number} x
 * @return {void}
 */
google.earth.KmlScale.prototype.setX = function(x) {};

/**
 * Indicates the y coordinate.
 * @return {number}
 */
google.earth.KmlScale.prototype.getY = function() {};

/**
 * Indicates the y coordinate.
 * @param {number} y
 * @return {void}
 */
google.earth.KmlScale.prototype.setY = function(y) {};

/**
 * Indicates the z coordinate.
 * @return {number}
 */
google.earth.KmlScale.prototype.getZ = function() {};

/**
 * Indicates the z coordinate.
 * @param {number} z
 * @return {void}
 */
google.earth.KmlScale.prototype.setZ = function(z) {};
/**
 * @constructor
 * @struct
 */
google.earth.KmlCoord = function() {};

/**
 * Sets the latitude, longitude, altitude.
 * @param {number} latitude
 * @param {number} longitude
 * @param {number} altitude
 * @return {void}
 */
google.earth.KmlCoord.prototype.setLatLngAlt = function(latitude, longitude, altitude) {};

/**
 * Degrees north or south of the Equator (0 degrees).
 * Values range from -90 degrees (South Pole) to 90 degrees (North Pole).
 * @return {number}
 */
google.earth.KmlCoord.prototype.getLatitude = function() {};

/**
 * Degrees north or south of the Equator (0 degrees).
 * Values range from -90 degrees (South Pole) to 90 degrees (North Pole).
 * @param {number} latitude
 * @return {void}
 */
google.earth.KmlCoord.prototype.setLatitude = function(latitude) {};

/**
 * Angular distance in degrees, relative to the Prime Meridian. Values west of the Meridian range from -180 to 0 degrees.
 * Values east of the Meridian range from 0 to 180 degrees.
 * @return {number}
 */
google.earth.KmlCoord.prototype.getLongitude = function() {};

/**
 * Angular distance in degrees, relative to the Prime Meridian. Values west of the Meridian range from -180 to 0 degrees.
 * Values east of the Meridian range from 0 to 180 degrees.
 * @param {number} longitude
 * @return {void}
 */
google.earth.KmlCoord.prototype.setLongitude = function(longitude) {};

/**
 * Distance from the earth's surface.
 * @return {number}
 */
google.earth.KmlCoord.prototype.getAltitude = function() {};

/**
 * Distance from the earth's surface.
 * @param {number} altitude
 * @return {void}
 */
google.earth.KmlCoord.prototype.setAltitude = function(altitude) {};
/**
 * @constructor
 * @struct
 */
google.earth.KmlCoordArray = function() {};

/**
 * Returns the coordinates at the given index.
 * @param {number} index
 * @return {!google.earth.KmlCoord}
 */
google.earth.KmlCoordArray.prototype.get = function(index) {};

/**
 * Sets the coordinates at the given index..
 * @param {number} index
 * @param {!google.earth.KmlCoord} coord
 * @return {void}
 */
google.earth.KmlCoordArray.prototype.set = function(index, coord) {};

/**
 * Sets the latitude, longitude, and altitude.
 * @param {number} index
 * @param {number} latitude
 * @param {number} longitude
 * @param {number} altitude
 * @return {void}
 */
google.earth.KmlCoordArray.prototype.setLatLngAlt = function(index, latitude, longitude, altitude) {};

/**
 * Appends one or more new elements to the end of an array and returns the new length of the array.
 * @param {number} latitude
 * @param {number} longitude
 * @param {number} altitude
 * @return {void}
 */
google.earth.KmlCoordArray.prototype.pushLatLngAlt = function(latitude, longitude, altitude) {};

/**
 * Appends one or more new elements to the end of an array and returns the new length of the array.
 * @param {!google.earth.KmlCoord} coordOrList
 * @return {void}
 */
google.earth.KmlCoordArray.prototype.push = function(coordOrList) {};

/**
 * Deletes the last element of an array, decrements the array length, and returns the value that is removed.
 * @return {!google.earth.KmlCoord}
 */
google.earth.KmlCoordArray.prototype.pop = function() {};

/**
 * Adds an element or elements to the beginning of an array.
 * @param {!google.earth.KmlCoord} coordOrList
 * @return {number}
 */
google.earth.KmlCoordArray.prototype.unshift = function(coordOrList) {};

/**
 * Adds an element or elements to the beginning of an array.
 * @param {number} latitude
 * @param {number} longitude
 * @param {number} altitude
 * @return {void}
 */
google.earth.KmlCoordArray.prototype.unshiftLatLngAlt = function(latitude, longitude, altitude) {};

/**
 * Removes and returns the first element of the array.
 * @return {!google.earth.KmlCoord}
 */
google.earth.KmlCoordArray.prototype.shift = function() {};

/**
 * Reverses the order of the elements in the array.
 * @return {void}
 */
google.earth.KmlCoordArray.prototype.reverse = function() {};

/**
 * Clears all of the elements in the array
 * @return {void}
 */
google.earth.KmlCoordArray.prototype.clear = function() {};

/**
 * Specifies the length of the index array.
 * @return {number}
 */
google.earth.KmlCoordArray.prototype.getLength = function() {};
/**
 * @extends {google.earth.GEEventEmitter}
 * @constructor
 * @struct
 */
google.earth.GEWindow = function() {};

/**
 * Gives the Google Earth object focus.
 * @return {void}
 */
google.earth.GEWindow.prototype.focus = function() {};

/**
 * Removes focus from the Google Earth object.
 * @return {void}
 */
google.earth.GEWindow.prototype.blur = function() {};

/**
 * Toggles the overall visibility of Google Earth inside the browser.
 * @return {boolean}
 */
google.earth.GEWindow.prototype.getVisibility = function() {};

/**
 * Toggles the overall visibility of Google Earth inside the browser.
 * @param {boolean} visibility
 * @return {void}
 */
google.earth.GEWindow.prototype.setVisibility = function(visibility) {};
/**
 * @extends {google.earth.KmlObject}
 * @constructor
 * @struct
 */
google.earth.GEGlobe = function() {};

/**
 * Returns the altitude for a given location on the globe.
 * If the altitude data for the location has not yet been loaded, the return value is 0.
 * @param {number} lat
 * @param {number} lon
 * @return {number}
 */
google.earth.GEGlobe.prototype.getGroundAltitude = function(lat, lon) {};

/**
 * The top-level features currently in the Earth instance.
 * @return {!google.earth.GEFeatureContainer}
 */
google.earth.GEGlobe.prototype.getFeatures = function() {};
/**
 * @constructor
 * @struct
 */
google.earth.GEView = function() {};

/**
 * Returns the screen x,y coordinates of a given point on the globe.
 * 
 * Tip: project() is the inverse of hitTest().
 * 
 * See also:
 * 
 * * GEPlugin.ALTITUDE_RELATIVE_TO_GROUND
 * * GEPlugin.ALTITUDE_ABSOLUTE
 * * GEPlugin.ALTITUDE_RELATIVE_TO_SEA_FLOOR
 * @param {number} lat
 * @param {number} lng
 * @param {number} alt
 * @param {?} altitudeMode
 * @return {!google.earth.KmlVec2}
 */
google.earth.GEView.prototype.project = function(lat, lng, alt, altitudeMode) {};

/**
 * Sets the camera that views the scene in Google Earth.
 * @param {!google.earth.KmlAbstractView} view
 * @return {void}
 */
google.earth.GEView.prototype.setAbstractView = function(view) {};

/**
 * Creates and returns a new KmlLookAt object, initialized to the current camera position and orientation.
 * Use 'altitudeMode' to specify the altitude mode of the looked-at point.
 * 
 * See also:
 * 
 * * GEPlugin.ALTITUDE_RELATIVE_TO_GROUND
 * * GEPlugin.ALTITUDE_ABSOLUTE
 * * GEPlugin.ALTITUDE_RELATIVE_TO_SEA_FLOOR
 * @param {?} altitudeMode
 * @return {!google.earth.KmlLookAt}
 */
google.earth.GEView.prototype.copyAsLookAt = function(altitudeMode) {};

/**
 * Creates and returns a new KmlCamera object, initialized to the current camera position and orientation.
 * Use 'altitudeMode' to specify the altitude mode of the new camera.
 * 
 * See also:
 * 
 * * GEPlugin.ALTITUDE_RELATIVE_TO_GROUND
 * * GEPlugin.ALTITUDE_ABSOLUTE
 * * GEPlugin.ALTITUDE_RELATIVE_TO_SEA_FLOOR
 * @param {?} altitudeMode
 * @return {!google.earth.KmlCamera}
 */
google.earth.GEView.prototype.copyAsCamera = function(altitudeMode) {};

/**
 * Returns a bounding box that completely contains the region of the globe that is currently visible.
 * The returned box will be larger than what is strictly visible, if that is necessary to include everything that is visible.
 * @return {!google.earth.KmlLatLonBox}
 */
google.earth.GEView.prototype.getViewportGlobeBounds = function() {};

/**
 * Given a point on the screen in pixel coordinates, returns a GEHitTestResult with information about the geographic location corresponding to the point on the screen. 
 * Tip: hitTest() is the inverse of project().
 * 
 * See also:
 * 
 * * GEPlugin.UNITS_PIXELS
 * * GEPlugin.UNITS_INSET_PIXELS
 * * GEPlugin.UNITS_FRACTION
 * * GEPlugin.HIT_TEST_GLOBE
 * * GEPlugin.HIT_TEST_TERRAIN
 * * GEPlugin.HIT_TEST_BUILDINGS
 * @param {number} x
 * @param {?} xUnits
 * @param {number} y
 * @param {?} yUnits
 * @param {?} mode
 * @return {!google.earth.GEHitTestResult}
 */
google.earth.GEView.prototype.hitTest = function(x, xUnits, y, yUnits, mode) {};
/**
 * @extends {google.earth.KmlLink}
 * @constructor
 * @struct
 */
google.earth.KmlIcon = function() {};

/**
 * Gets the offset from the left (<gx:x>), in pixels, of the icon.
 * @return {number}
 */
google.earth.KmlIcon.prototype.getX = function() {};

/**
 * Specifies the icon's offset (<gx:x>), in pixels from the left side of its icon palette, if a palette has been specified in the <href> element.
 * @param {number} x
 * @return {number}
 */
google.earth.KmlIcon.prototype.setX = function(x) {};

/**
 * Gets the offset from the bottom (<gx:y>), in pixels, of the icon.
 * @return {number}
 */
google.earth.KmlIcon.prototype.getY = function() {};

/**
 * Specifies the offset (<gx:y>), in pixels from the bottom of its icon palette, if a palette has been specified in the <href> element.
 * @param {number} y
 * @return {void}
 */
google.earth.KmlIcon.prototype.setY = function(y) {};

/**
 * Gets the width (<gx:w>), in pixels, of the icon.
 * @return {number}
 */
google.earth.KmlIcon.prototype.getW = function() {};

/**
 * Specifies the width (<gx:w>), in pixels, of the icon to use.
 * @param {number} w
 * @return {void}
 */
google.earth.KmlIcon.prototype.setW = function(w) {};

/**
 * Gets the height (<gx:h>), in pixels, of the icon.
 * @return {number}
 */
google.earth.KmlIcon.prototype.getH = function() {};

/**
 * Specifies the height (<gx:h>), in pixels, of the icon to use.
 * @param {number} h
 * @return {void}
 */
google.earth.KmlIcon.prototype.setH = function(h) {};
/**
 * @extends {google.earth.KmlObject}
 * @constructor
 * @struct
 */
google.earth.KmlLink = function() {};

/**
 * A URL (either an HTTP address or a local file specification).
 * When the parent of Link is a NetworkLink, href is a KML file.
 * When the parent of Link is a Model, href is a COLLADA file.
 * When the parent of Link is an Overlay, href is an image.
 * @return {string}
 */
google.earth.KmlLink.prototype.getHref = function() {};

/**
 * A URL (either an HTTP address or a local file specification).
 * When the parent of Link is a NetworkLink, href is a KML file.
 * When the parent of Link is a Model, href is a COLLADA file.
 * When the parent of Link is an Overlay, href is an image.
 * @param {string} href
 * @return {void}
 */
google.earth.KmlLink.prototype.setHref = function(href) {};

/**
 * Specifies to use a time-based refresh mode.
 * 
 * See also:
 * 
 * * GEPlugin.REFRESH_ON_CHANGE
 * * GEPlugin.REFRESH_ON_INTERVAL
 * * GEPlugin.REFRESH_ON_EXPIRE
 * @return {?}
 */
google.earth.KmlLink.prototype.getRefreshMode = function() {};

/**
 * Specifies to use a time-based refresh mode.
 * 
 * See also:
 * 
 * * GEPlugin.REFRESH_ON_CHANGE
 * * GEPlugin.REFRESH_ON_INTERVAL
 * * GEPlugin.REFRESH_ON_EXPIRE
 * @param {?} refreshMode
 * @return {void}
 */
google.earth.KmlLink.prototype.setRefreshMode = function(refreshMode) {};

/**
 * Indicates to refresh the file every n seconds.
 * @return {number}
 */
google.earth.KmlLink.prototype.getRefreshInterval = function() {};

/**
 * Indicates to refresh the file every n seconds.
 * @param {number} refreshInterval
 * @return {void}
 */
google.earth.KmlLink.prototype.setRefreshInterval = function(refreshInterval) {};

/**
 * Specifies how the link is refreshed when the viewport changes.
 * 
 * See also:
 * 
 * * GEPlugin.VIEW_REFRESH_NEVER
 * * GEPlugin.VIEW_REFRESH_ON_STOP
 * * GEPlugin.VIEW_REFRESH_ON_REGION
 * @return {?}
 */
google.earth.KmlLink.prototype.getViewRefreshMode = function() {};

/**
 * Specifies how the link is refreshed when the viewport changes.
 * 
 * See also:
 * 
 * * GEPlugin.VIEW_REFRESH_NEVER
 * * GEPlugin.VIEW_REFRESH_ON_STOP
 * * GEPlugin.VIEW_REFRESH_ON_REGION
 * @param {?} viewRefreshMode
 * @return {void}
 */
google.earth.KmlLink.prototype.setViewRefreshMode = function(viewRefreshMode) {};

/**
 * Specifies how the link is refreshed when the camera changes.
 * @return {number}
 */
google.earth.KmlLink.prototype.getViewRefreshTime = function() {};

/**
 * Specifies how the link is refreshed when the camera changes.
 * @param {number} viewRefreshTime
 * @return {void}
 */
google.earth.KmlLink.prototype.setViewRefreshTime = function(viewRefreshTime) {};

/**
 * Scales the BBOX parameters before sending them to the server.
 * A value less than 1 specifies to use less than the full view (screen).
 * A value greater than 1 specifies to fetch an area that extends beyond the edges of the current view.
 * @return {number}
 */
google.earth.KmlLink.prototype.getViewBoundScale = function() {};

/**
 * Scales the BBOX parameters before sending them to the server.
 * A value less than 1 specifies to use less than the full view (screen).
 * A value greater than 1 specifies to fetch an area that extends beyond the edges of the current view.
 * @param {number} viewBoundScale
 * @return {void}
 */
google.earth.KmlLink.prototype.setViewBoundScale = function(viewBoundScale) {};

/**
 * Specifies the format of the query string that is appended to the Link's href before the file is fetched.
 * (If the href specifies a local file, this element is ignored.)
 * @return {string}
 */
google.earth.KmlLink.prototype.getViewFormat = function() {};

/**
 * Specifies the format of the query string that is appended to the Link's href before the file is fetched.
 * (If the href specifies a local file, this element is ignored.)
 * @param {string} viewFormat
 * @return {void}
 */
google.earth.KmlLink.prototype.setViewFormat = function(viewFormat) {};
/**
 * @constructor
 * @struct
 */
google.earth.GETime = function() {};

/**
 * Set the plugin's clock rate.
 * A value of 1 corresponds with real time; to pass one year in the plugin for every real second, set the rate to 31536000 (60 times 60 times 24 times 365).
 * @param {number} rate
 * @return {void}
 */
google.earth.GETime.prototype.setRate = function(rate) {};

/**
 * Get the current plugin clock rate.
 * @return {number}
 */
google.earth.GETime.prototype.getRate = function() {};

/**
 * Returns the current computer clock time as a KmlTimeStamp object.
 * @return {!google.earth.KmlTimeStamp}
 */
google.earth.GETime.prototype.getSystemTime = function() {};

/**
 * Returns the GETimeControl object; this is the time slider.
 * @return {!google.earth.GETimeControl}
 */
google.earth.GETime.prototype.getControl = function() {};

/**
 * Whether or not historical imagery is enabled.
 * @return {boolean}
 */
google.earth.GETime.prototype.getHistoricalImageryEnabled = function() {};

/**
 * Turn historical imagery on or off.
 * For more information, read the Time chapter of the Developer's Guide.
 * @param {boolean} historicalImageryEnabled
 * @return {void}
 */
google.earth.GETime.prototype.setHistoricalImageryEnabled = function(historicalImageryEnabled) {};

/**
 * Get the current plugin time as a KmlTimeStamp or KmlTimeSpan.
 * @return {!google.earth.KmlTimePrimitive}
 */
google.earth.GETime.prototype.getTimePrimitive = function() {};

/**
 * Sets the current plugin time.
 * @param {!google.earth.KmlTimePrimitive} timePrimitive
 * @return {void}
 */
google.earth.GETime.prototype.setTimePrimitive = function(timePrimitive) {};
/**
 * @constructor
 * @struct
 */
google.earth.GEOptions = function() {};

/**
 * Sets the map type to Earth or sky mode.
 * @param {?} type
 * @return {void}
 */
google.earth.GEOptions.prototype.setMapType = function(type) {};

/**
 * Speed of zoom when user rolls the mouse wheel. Default is 1.
 * Set to a negative number to reverse the zoom direction.
 * @return {number}
 */
google.earth.GEOptions.prototype.getScrollWheelZoomSpeed = function() {};

/**
 * Speed of zoom when user rolls the mouse wheel. Default is 1.
 * Set to a negative number to reverse the zoom direction.
 * @param {number} scrollWheelZoomSpeed
 * @return {void}
 */
google.earth.GEOptions.prototype.setScrollWheelZoomSpeed = function(scrollWheelZoomSpeed) {};

/**
 * Specifies the speed at which the camera moves (0 to 5.0).
 * Set to SPEED_TELEPORT to immediately appear at selected destination.
 * 
 * See also:
 * 
 * * GEPlugin.SPEED_TELEPORT
 * @return {number}
 */
google.earth.GEOptions.prototype.getFlyToSpeed = function() {};

/**
 * Specifies the speed at which the camera moves (0 to 5.0).
 * Set to SPEED_TELEPORT to immediately appear at selected destination.
 * 
 * See also:
 * 
 * * GEPlugin.SPEED_TELEPORT
 * @param {number} flyToSpeed
 * @return {void}
 */
google.earth.GEOptions.prototype.setFlyToSpeed = function(flyToSpeed) {};

/**
 * Show or hide the status bar. Disabled by default.
 * @return {boolean}
 */
google.earth.GEOptions.prototype.getStatusBarVisibility = function() {};

/**
 * Show or hide the status bar. Disabled by default.
 * @param {boolean} statusBarVisibility
 * @return {void}
 */
google.earth.GEOptions.prototype.setStatusBarVisibility = function(statusBarVisibility) {};

/**
 * Show or hide the grid. Disabled by default.
 * @return {boolean}
 */
google.earth.GEOptions.prototype.getGridVisibility = function() {};

/**
 * Show or hide the grid. Disabled by default.
 * @param {boolean} gridVisibility
 * @return {void}
 */
google.earth.GEOptions.prototype.setGridVisibility = function(gridVisibility) {};

/**
 * Show or hide the overview map. Disabled by default.
 * @return {boolean}
 */
google.earth.GEOptions.prototype.getOverviewMapVisibility = function() {};

/**
 * Show or hide the overview map. Disabled by default.
 * @param {boolean} overviewMapVisibility
 * @return {void}
 */
google.earth.GEOptions.prototype.setOverviewMapVisibility = function(overviewMapVisibility) {};

/**
 * Show or hide the scale legend. Disabled by default.
 * @return {boolean}
 */
google.earth.GEOptions.prototype.getScaleLegendVisibility = function() {};

/**
 * Show or hide the scale legend. Disabled by default.
 * @param {boolean} scaleLegendVisibility
 * @return {void}
 */
google.earth.GEOptions.prototype.setScaleLegendVisibility = function(scaleLegendVisibility) {};

/**
 * Show or hide the blue atmosphere that appears around the perimeter of the Earth.
 * On by default.
 * @return {boolean}
 */
google.earth.GEOptions.prototype.getAtmosphereVisibility = function() {};

/**
 * Show or hide the blue atmosphere that appears around the perimeter of the Earth.
 * On by default.
 * @param {boolean} atmosphereVisibility
 * @return {void}
 */
google.earth.GEOptions.prototype.setAtmosphereVisibility = function(atmosphereVisibility) {};

/**
 * Enable or disable user panning and zooming of the map. Enabled by default.
 * 
 * Note: This also enables and disables keyboard navigation (arrow keys, page-up/page-down, etc).
 * @return {boolean}
 */
google.earth.GEOptions.prototype.getMouseNavigationEnabled = function() {};

/**
 * Enable or disable user panning and zooming of the map. Enabled by default.
 * 
 * Note: This also enables and disables keyboard navigation (arrow keys, page-up/page-down, etc).
 * @param {boolean} mouseNavigationEnabled
 * @return {void}
 */
google.earth.GEOptions.prototype.setMouseNavigationEnabled = function(mouseNavigationEnabled) {};

/**
 * Returns true if the animation of features as they are added or removed from the globe has been enabled.
 * @return {boolean}
 */
google.earth.GEOptions.prototype.getFadeInOutEnabled = function() {};

/**
 * Enable or disable the animation of a feature when it is added or removed from the Google Earth plugin.
 * The animation consists of a slight change of scale. Default is true.
 * @param {boolean} fadeInOutEnabled
 * @return {void}
 */
google.earth.GEOptions.prototype.setFadeInOutEnabled = function(fadeInOutEnabled) {};

/**
 * Returns true if display units are set to imperial units (feet and miles).
 * False denotes metric units (meters and kilometers).
 * @return {boolean}
 */
google.earth.GEOptions.prototype.getUnitsFeetMiles = function() {};

/**
 * Set display units to imperial (feet and miles) or metric (meters and kilometers).
 * This setting affects only the values displayed in the status bar and the scale bar.
 * The values passed and returned with an object's getters and setters are always metric.
 * @param {boolean} unitsFeetMiles
 * @return {void}
 */
google.earth.GEOptions.prototype.setUnitsFeetMiles = function(unitsFeetMiles) {};

/**
 * Enables or disables building selection.
 * If enabled, clicking a building will pop a feature balloon containing information from the Google 3D Warehouse database.
 * @param {boolean} buildingSelectionEnabled
 * @return {void}
 */
google.earth.GEOptions.prototype.setBuildingSelectionEnabled = function(buildingSelectionEnabled) {};

/**
 * Whether or not building selection is enabled.
 * @return {boolean}
 */
google.earth.GEOptions.prototype.getBuildingSelectionEnabled = function() {};

/**
 * Returns true if building highlighting is enabled.
 * @return {boolean}
 */
google.earth.GEOptions.prototype.getBuildingHighlightingEnabled = function() {};

/**
 * Enables or disables building highlighting.
 * When enabled, buildings will be highlighted when they are moused over.
 * @param {boolean} buildingHighlightingEnabled
 * @return {void}
 */
google.earth.GEOptions.prototype.setBuildingHighlightingEnabled = function(buildingHighlightingEnabled) {};

/**
 * Returns the terrain exaggeration value. Valid values are in the range of 1.0 through 3.0.
 * @return {number}
 */
google.earth.GEOptions.prototype.getTerrainExaggeration = function() {};

/**
 * Set the terrain exaggeration value. Valid values are in the range of 1.0 through 3.0.
 * Attempting to set outside of this range will result in the value being clamped.
 * @param {number} terrainExaggeration
 * @return {void}
 */
google.earth.GEOptions.prototype.setTerrainExaggeration = function(terrainExaggeration) {};

/**
 * When enabled, the view will change to 'ground level view' when the camera reaches ground level.
 * This view provides pan and lookAt controls, but no zoom slider.
 * The tilt will be set to 90, or parallel with level ground.
 * @param {boolean} autoGroundLevelViewEnabled
 * @return {void}
 */
google.earth.GEOptions.prototype.setAutoGroundLevelViewEnabled = function(autoGroundLevelViewEnabled) {};

/**
 * Whether automatic ground level view is enabled.
 * @return {boolean}
 */
google.earth.GEOptions.prototype.getAutoGroundLevelViewEnabled = function() {};
/**
 * @constructor
 * @struct
 */
google.earth.GESchemaObjectContainer = function() {};

/**
 * Adds a node to the end of the list of children of a specified feature.
 * Returns the appended object.
 * @param {T} object
 * @return {void}
 */
google.earth.GESchemaObjectContainer.prototype.appendChild = function(object) {};

/**
 * Removes a node from the list of children of a specified object.
 * @param {T} oldChild
 * @return {void}
 */
google.earth.GESchemaObjectContainer.prototype.removeChild = function(oldChild) {};

/**
 * Inserts a child before the referenced child in the list of objects.
 * @param {T} newChild
 * @param {T} refChild
 * @return {void}
 */
google.earth.GESchemaObjectContainer.prototype.insertBefore = function(newChild, refChild) {};

/**
 * Replaces existing child in the list of features.
 * Returns the old child.
 * @param {T} newChild
 * @param {T} oldChild
 * @return {void}
 */
google.earth.GESchemaObjectContainer.prototype.replaceChild = function(newChild, oldChild) {};

/**
 * Returns true if the container is not empty.
 * @return {boolean}
 */
google.earth.GESchemaObjectContainer.prototype.hasChildNodes = function() {};

/**
 * First child in the list of objects.
 * @return {T}
 */
google.earth.GESchemaObjectContainer.prototype.getFirstChild = function() {};

/**
 * Last child in the list of objects.
 * @return {T}
 */
google.earth.GESchemaObjectContainer.prototype.getLastChild = function() {};

/**
 * List of features (for KmlContainer), or list of features, styles, and schemas (for KmlDocument).
 * Returns true if there are any child nodes.
 * @return {!google.earth.KmlObjectList<T>}
 */
google.earth.GESchemaObjectContainer.prototype.getChildNodes = function() {};
/**
 * @extends {google.earth.GESchemaObjectContainer}
 * @constructor
 * @struct
 */
google.earth.GEFeatureContainer = function() {};
/**
 * @extends {google.earth.GESchemaObjectContainer}
 * @constructor
 * @struct
 */
google.earth.GEGeometryContainer = function() {};
/**
 * @extends {google.earth.GESchemaObjectContainer}
 * @constructor
 * @struct
 */
google.earth.GELinearRingContainer = function() {};
/**
 * @extends {google.earth.GESchemaObjectContainer}
 * @constructor
 * @struct
 */
google.earth.GEStyleSelectorContainer = function() {};
/**
 * @constructor
 * @struct
 */
google.earth.KmlVec2 = function() {};

/**
 * Sets the coordinates of the vector.
 * @param {number} x
 * @param {?} xUnits
 * @param {number} y
 * @param {?} yUnits
 * @return {void}
 */
google.earth.KmlVec2.prototype.set = function(x, xUnits, y, yUnits) {};

/**
 * Indicates the x coordinate.
 * @return {number}
 */
google.earth.KmlVec2.prototype.getX = function() {};

/**
 * Indicates the x coordinate.
 * @param {number} x
 * @return {void}
 */
google.earth.KmlVec2.prototype.setX = function(x) {};

/**
 * Indicates the y coordinate.
 * @return {number}
 */
google.earth.KmlVec2.prototype.getY = function() {};

/**
 * Indicates the y coordinate.
 * @param {number} y
 * @return {void}
 */
google.earth.KmlVec2.prototype.setY = function(y) {};

/**
 * Units in which the x value is specified.
 * 
 * See also:
 * 
 * * GEPlugin.UNITS_FRACTION
 * * GEPlugin.UNITS_PIXELS
 * * GEPlugin.UNITS_INSET_PIXELS
 * @return {?}
 */
google.earth.KmlVec2.prototype.getXUnits = function() {};

/**
 * Units in which the x value is specified.
 * 
 * See also:
 * 
 * * GEPlugin.UNITS_FRACTION
 * * GEPlugin.UNITS_PIXELS
 * * GEPlugin.UNITS_INSET_PIXELS
 * @param {?} xUnits
 * @return {void}
 */
google.earth.KmlVec2.prototype.setXUnits = function(xUnits) {};

/**
 * Units in which the y value is specified.
 * 
 * See also:
 * 
 * * GEPlugin.UNITS_FRACTION
 * * GEPlugin.UNITS_PIyELS
 * * GEPlugin.UNITS_INSET_PIyELS
 * @return {?}
 */
google.earth.KmlVec2.prototype.getYUnits = function() {};

/**
 * Units in which the y value is specified.
 * 
 * See also:
 * 
 * * GEPlugin.UNITS_FRACTION
 * * GEPlugin.UNITS_PIyELS
 * * GEPlugin.UNITS_INSET_PIyELS
 * @param {?} xUnits
 * @return {void}
 */
google.earth.KmlVec2.prototype.setYUnits = function(xUnits) {};
/**
 * @constructor
 * @struct
 */
google.earth.GESun = function() {};

/**
 *  Specifies whether the feature is drawn in the 3D viewer when it is initially loaded.
 *  In order for a feature to be visible, the visibility property and all of its ancestors must also be set to 1.
 * @return {boolean}
 */
google.earth.GESun.prototype.getVisibility = function() {};

/**
 *  Specifies whether the feature is drawn in the 3D viewer when it is initially loaded.
 *  In order for a feature to be visible, the visibility property and all of its ancestors must also be set to 1.
 * @param {boolean} visibility
 * @return {void}
 */
google.earth.GESun.prototype.setVisibility = function(visibility) {};
/**
 * @constructor
 * @struct
 */
google.earth.KmlColor = function() {};

/**
 * Set the color of an object.
 * @param {string} color
 * @return {void}
 */
google.earth.KmlColor.prototype.set = function(color) {};

/**
 * Returns the color of an object.
 * @return {string}
 */
google.earth.KmlColor.prototype.get = function() {};

/**
 * red numerical value
 * @return {number}
 */
google.earth.KmlColor.prototype.getR = function() {};

/**
 * red numerical value
 * @param {number} r
 * @return {void}
 */
google.earth.KmlColor.prototype.setR = function(r) {};

/**
 * green numerical value
 * @return {number}
 */
google.earth.KmlColor.prototype.getG = function() {};

/**
 * green numerical value
 * @param {number} g
 * @return {void}
 */
google.earth.KmlColor.prototype.setG = function(g) {};

/**
 * blue numerical value
 * @return {number}
 */
google.earth.KmlColor.prototype.getB = function() {};

/**
 * blue numerical value
 * @param {number} b
 * @return {void}
 */
google.earth.KmlColor.prototype.setB = function(b) {};

/**
 * opacity value
 * @return {number}
 */
google.earth.KmlColor.prototype.getA = function() {};

/**
 * opacity value
 * @param {number} a
 * @return {void}
 */
google.earth.KmlColor.prototype.setA = function(a) {};
/**
 * @constructor
 * @struct
 */
google.earth.KmlEvent = function() {};
 /** @type {!google.earth.GEEventEmitter} */
google.earth.KmlEvent.prototype.getCurrentTarget;

/**
 * Cancels the default action of the event.
 * For example, calling this method in a placemark click handler prevents the placemark's default balloon from popping up.
 * @return {void}
 */
google.earth.KmlEvent.prototype.preventDefault = function() {};

/**
 * Prevents event propagation.
 * For example, if click event handlers are set up on both the GEGlobe and GEWindow objects,
 * and stopPropagation is called in the GEGlobe click event handler, the GEWindow event handler will not be triggered when the globe is clicked.
 * @return {void}
 */
google.earth.KmlEvent.prototype.stopPropagation = function() {};

/**
 * The object to which the KMLEvent was originally dispatched.
 * @return {!google.earth.GEEventEmitter}
 */
google.earth.KmlEvent.prototype.getTarget = function() {};

/**
 * The current stage of the flow of events.
 * @return {?}
 */
google.earth.KmlEvent.prototype.getEventPhase = function() {};

/**
 * Indicates whether or not an event is a bubbling event.
 * @return {boolean}
 */
google.earth.KmlEvent.prototype.getBubbles = function() {};

/**
 * Indicates whether the event can be cancelled.
 * 
 * Note: Currently, cancelable has no effect.
 * @return {boolean}
 */
google.earth.KmlEvent.prototype.getCancelable = function() {};
/**
 * @extends {google.earth.KmlEvent}
 * @constructor
 * @struct
 */
google.earth.KmlMouseEvent = function() {};

/**
 * The button on the mouse was pressed.
 * Possible values include 0, 1, 2, where 0 is left, 1 is middle, and 2 is right mouse key.
 * @return {number}
 */
google.earth.KmlMouseEvent.prototype.getButton = function() {};

/**
 * The x coordinate at which the event occurred, measured in pixels from the left edge of the plug-in window.
 * @return {number}
 */
google.earth.KmlMouseEvent.prototype.getClientX = function() {};

/**
 * The y coordinate at which the event occurred, measured in pixels from the top edge of the plug-in window.
 * @return {number}
 */
google.earth.KmlMouseEvent.prototype.getClientY = function() {};

/**
 * The x coordinate at which the event occurred, measured in pixels from the left edge of the computer screen.
 * @return {number}
 */
google.earth.KmlMouseEvent.prototype.getScreenX = function() {};

/**
 * The y coordinate at which the event occurred, measured in pixels from the top edge of the computer screen.
 * @return {number}
 */
google.earth.KmlMouseEvent.prototype.getScreenY = function() {};

/**
 * The latitude at which the event occurred, in decimal degrees.
 * @return {number}
 */
google.earth.KmlMouseEvent.prototype.getLatitude = function() {};

/**
 * The longitude at which the event occurred, in decimal degrees.
 * @return {number}
 */
google.earth.KmlMouseEvent.prototype.getLongitude = function() {};

/**
 * The altitude at which the event occurred, in meters.
 * @return {number}
 */
google.earth.KmlMouseEvent.prototype.getAltitude = function() {};

/**
 * Indicates whether a mouse action occurred while on the Google Earth globe.
 * @return {boolean}
 */
google.earth.KmlMouseEvent.prototype.getDidHitGlobe = function() {};

/**
 * Indicates whether the ALT key was held down when an event occurred.
 * @return {boolean}
 */
google.earth.KmlMouseEvent.prototype.getAltKey = function() {};

/**
 * Indicates whether the CTRL key was held down when an event occurred.
 * @return {boolean}
 */
google.earth.KmlMouseEvent.prototype.getCtrlKey = function() {};

/**
 * Indicates whether the SHIFT key was held down when an event occurred.
 * @return {boolean}
 */
google.earth.KmlMouseEvent.prototype.getShiftKey = function() {};

/**
 * Used with the mouseover and mouseout events to specify a secondary target.
 * For mouseover, it specifies the object that the mouse was over.
 * For mouseout, it specifies the new object that the mouse is over.
 * @return {!google.earth.GEEventEmitter}
 */
google.earth.KmlMouseEvent.prototype.getRelatedTarget = function() {};

/**
 * Returns the timestamp of the event, in Unix time.
 * @return {number}
 */
google.earth.KmlMouseEvent.prototype.getTimeStamp = function() {};
/**
 * @constructor
 * @struct
 */
google.earth.GEEventEmitter = function() {};

/**
 * Triggers an event when the user clicks a location in Google Earth with the mouse.
 * @param {!google.earth.KmlMouseEvent} event
 * @return {void}
 */
google.earth.GEEventEmitter.prototype.click = function(event) {};

/**
 * Triggers an event when the user double clicks a location in Google Earth with the mouse.
 * @param {!google.earth.KmlMouseEvent} event
 * @return {void}
 */
google.earth.GEEventEmitter.prototype.dblclick = function(event) {};

/**
 * Triggers an event when the user moves the mouse pointer over a location in Google Earth.
 * @param {!google.earth.KmlMouseEvent} event
 * @return {void}
 */
google.earth.GEEventEmitter.prototype.mouseover = function(event) {};

/**
 * Triggers an event when the user presses the mouse button over a location in Google Earth.
 * @param {!google.earth.KmlMouseEvent} event
 * @return {void}
 */
google.earth.GEEventEmitter.prototype.mousedown = function(event) {};

/**
 * Triggers an event when the user releases the mouse button over a location in Google Earth.
 * @param {!google.earth.KmlMouseEvent} event
 * @return {void}
 */
google.earth.GEEventEmitter.prototype.mouseup = function(event) {};

/**
 * Triggers an event when the user moves the mouse off of the object in Google Earth.
 * @param {!google.earth.KmlMouseEvent} event
 * @return {void}
 */
google.earth.GEEventEmitter.prototype.mouseout = function(event) {};

/**
 * Triggers an event when the user moves the mouse inside Google Earth.
 * @param {!google.earth.KmlMouseEvent} event
 * @return {void}
 */
google.earth.GEEventEmitter.prototype.mousemove = function(event) {};
/**
 * @extends {google.earth.GEEventEmitter}
 * @constructor
 * @struct
 */
google.earth.KmlObject = function() {};

/**
 * The interface name (i.e. 'KmlPlacemark') of the object.
 * @return {string}
 */
google.earth.KmlObject.prototype.getType = function() {};

/**
 * Test whether this object is the same as another object.
 * Useful for Chrome and Safari, where the comparison a==b sometimes fails for plugin objects.
 * @param {!google.earth.KmlObject} compareTo
 * @return {boolean}
 */
google.earth.KmlObject.prototype.equals = function(compareTo) {};

/**
 * The unique ID of the KML object.
 * @return {string}
 */
google.earth.KmlObject.prototype.getId = function() {};

/**
 * The unique URL of the KML object.
 * This is the base address joined with the ID using the # character.
 * 
 * For example: http://www.google.com/bar.kml#atlantis
 * @return {string}
 */
google.earth.KmlObject.prototype.getUrl = function() {};

/**
 * The parent node of the KML object.
 * @return {!google.earth.KmlObject}
 */
google.earth.KmlObject.prototype.getParentNode = function() {};

/**
 * The document that owns the KML object.
 * @return {!google.earth.KmlDocument}
 */
google.earth.KmlObject.prototype.getOwnerDocument = function() {};

/**
 * Permanently deletes an object, allowing its ID to be reused.
 * Attempting to access the object once it is released will result in an error.
 * @return {void}
 */
google.earth.KmlObject.prototype.release = function() {};
/**
 * @constructor
 * @struct
 */
google.earth.KmlObjectList = function() {};

/**
 * Gets an item from the object list. For example, list.item(0) returns the first object in the list.
 * @param {number} index
 * @return {T}
 */
google.earth.KmlObjectList.prototype.item = function(index) {};

/**
 * Number of objects in collection.
 * @return {number}
 */
google.earth.KmlObjectList.prototype.getLength = function() {};
/**
 * @extends {google.earth.KmlObject}
 * @constructor
 * @struct
 */
google.earth.KmlStyleSelector = function() {};
/**
 * @extends {google.earth.KmlStyleSelector}
 * @constructor
 * @struct
 */
google.earth.KmlStyle = function() {};

/**
 * Specifies how icons for point placemarks are drawn in Google Earth.
 * @return {!google.earth.KmlIconStyle}
 */
google.earth.KmlStyle.prototype.getIconStyle = function() {};

/**
 * Specifies how the name of a feature is drawn in the 3D viewer.
 * A custom color, color mode, and scale for the label (name) can be specified.
 * @return {!google.earth.KmlLabelStyle}
 */
google.earth.KmlStyle.prototype.getLabelStyle = function() {};

/**
 * Specifies the drawing style (color, color mode, and line width) for line geometry.
 * Line geometry includes the outlines of outlined polygons and the extruded tether of Placemark icons (if extrusion is enabled).
 * @return {!google.earth.KmlLineStyle}
 */
google.earth.KmlStyle.prototype.getLineStyle = function() {};

/**
 * Specifies the style for list geometry.
 * @return {!google.earth.KmlListStyle}
 */
google.earth.KmlStyle.prototype.getListStyle = function() {};

/**
 * Specifies the drawing style for polygons, including polygon extrusions (which look like the walls of buildings) and line extrusions (which look like solid fences).
 * @return {!google.earth.KmlPolyStyle}
 */
google.earth.KmlStyle.prototype.getPolyStyle = function() {};

/**
 * Specifies the drawing style for balloons.
 * @return {!google.earth.KmlBalloonStyle}
 */
google.earth.KmlStyle.prototype.getBalloonStyle = function() {};
/**
 * @extends {google.earth.KmlObject}
 * @constructor
 * @struct
 */
google.earth.KmlColorStyle = function() {};

/**
 * Color and opacity (alpha) values.
 * @return {!google.earth.KmlColor}
 */
google.earth.KmlColorStyle.prototype.getColor = function() {};

/**
 * Specifies which color mode effect to apply to the base color.
 * 
 * See also:
 * 
 * * GEPlugin.COLOR_NORMAL
 * * GEPlugin.COLOR_INHERIT
 * * GEPlugin.COLOR_RANDOM
 * @return {?}
 */
google.earth.KmlColorStyle.prototype.getColorMode = function() {};

/**
 * Specifies which color mode effect to apply to the base color.
 * 
 * See also:
 * 
 * * GEPlugin.COLOR_NORMAL
 * * GEPlugin.COLOR_INHERIT
 * * GEPlugin.COLOR_RANDOM
 * @param {?} colorMode
 * @return {void}
 */
google.earth.KmlColorStyle.prototype.setColorMode = function(colorMode) {};
/**
 * @extends {google.earth.KmlColorStyle}
 * @constructor
 * @struct
 */
google.earth.KmlIconStyle = function() {};

/**
 * Resizes the icon.
 * @return {number}
 */
google.earth.KmlIconStyle.prototype.getScale = function() {};

/**
 * Resizes the icon.
 * @param {number} scale
 * @return {void}
 */
google.earth.KmlIconStyle.prototype.setScale = function(scale) {};

/**
 * The direction that icons are set to point, clockwise, and in degrees.
 * @return {number}
 */
google.earth.KmlIconStyle.prototype.getHeading = function() {};

/**
 * The direction that icons are set to point, clockwise, and in degrees.
 * @param {number} heading
 * @return {void}
 */
google.earth.KmlIconStyle.prototype.setHeading = function(heading) {};

/**
 * A custom Icon. In KmlIconStyle, the only child element of KmlIcon is href and href is an HTTP address or a local file specification used to load an icon.
 * @return {!google.earth.KmlIcon}
 */
google.earth.KmlIconStyle.prototype.getIcon = function() {};

/**
 * A custom Icon. In KmlIconStyle, the only child element of KmlIcon is href and href is an HTTP address or a local file specification used to load an icon.
 * @param {!google.earth.KmlIcon} icon
 * @return {void}
 */
google.earth.KmlIconStyle.prototype.setIcon = function(icon) {};

/**
 * Specifies the position within the Icon that is anchored to the point specified in the placemark.
 * The x and y values can be specified in three different ways: as pixels, as fractions of the icon, or as inset pixels, which is an offset in pixels from the upper right corner of the icon.
 * The x and y positions can be specified in different ways.
 * For example, x can be in pixels and y can be a fraction.
 * The origin of the coordinate system is in the lower left corner of the icon.
 * @return {!google.earth.KmlVec2}
 */
google.earth.KmlIconStyle.prototype.getHotSpot = function() {};
/**
 * @extends {google.earth.KmlColorStyle}
 * @constructor
 * @struct
 */
google.earth.KmlLabelStyle = function() {};

/**
 * Resizes the label.
 * @return {number}
 */
google.earth.KmlLabelStyle.prototype.getScale = function() {};

/**
 * Resizes the label.
 * @param {number} scale
 * @return {void}
 */
google.earth.KmlLabelStyle.prototype.setScale = function(scale) {};
/**
 * @extends {google.earth.KmlColorStyle}
 * @constructor
 * @struct
 */
google.earth.KmlLineStyle = function() {};

/**
 * Width of the line, in pixels.
 * @return {number}
 */
google.earth.KmlLineStyle.prototype.getWidth = function() {};

/**
 * Width of the line, in pixels.
 * @param {number} width
 * @return {void}
 */
google.earth.KmlLineStyle.prototype.setWidth = function(width) {};
/**
 * @extends {google.earth.KmlColorStyle}
 * @constructor
 * @struct
 */
google.earth.KmlPolyStyle = function() {};

/**
 * Specifies whether or not to fill the polygon. Possible values 1 (fill) and 0 (no fill).
 * @return {boolean}
 */
google.earth.KmlPolyStyle.prototype.getFill = function() {};

/**
 * Specifies whether or not to fill the polygon. Possible values 1 (fill) and 0 (no fill).
 * @param {boolean} fill
 * @return {void}
 */
google.earth.KmlPolyStyle.prototype.setFill = function(fill) {};

/**
 * Specifies whether to outline the polygon. Polygon outlines use the current KmlLineStyle.
 * @return {boolean}
 */
google.earth.KmlPolyStyle.prototype.getOutline = function() {};

/**
 * Specifies whether to outline the polygon. Polygon outlines use the current KmlLineStyle.
 * @param {boolean} outline
 * @return {void}
 */
google.earth.KmlPolyStyle.prototype.setOutline = function(outline) {};
/**
 * @extends {google.earth.KmlObject}
 * @constructor
 * @struct
 */
google.earth.KmlListStyle = function() {};

/**
 * Background color for the Snippet.
 * @return {!google.earth.KmlColor}
 */
google.earth.KmlListStyle.prototype.getBgColor = function() {};

/**
 * Maximum number of lines of text for the Snippet.
 * @return {number}
 */
google.earth.KmlListStyle.prototype.getMaxSnippetLines = function() {};

/**
 * Maximum number of lines of text for the Snippet.
 * @param {number} maxSnippetLines
 * @return {void}
 */
google.earth.KmlListStyle.prototype.setMaxSnippetLines = function(maxSnippetLines) {};

/**
 * Specifies how a feature should be displayed in a list view.
 * @return {?}
 */
google.earth.KmlListStyle.prototype.getListItemType = function() {};
/**
 * @extends {google.earth.KmlObject}
 * @constructor
 * @struct
 */
google.earth.KmlBalloonStyle = function() {};

/**
 * Background color of the balloon (optional).
 * @return {!google.earth.KmlColor}
 */
google.earth.KmlBalloonStyle.prototype.getBgColor = function() {};

/**
 * Foreground color for text. The default is black (ff000000).
 * @return {!google.earth.KmlColor}
 */
google.earth.KmlBalloonStyle.prototype.getTextColor = function() {};

/**
 * The text contained in the balloon.
 * @return {string}
 */
google.earth.KmlBalloonStyle.prototype.getText = function() {};

/**
 * The text contained in the balloon.
 * @param {string} text
 * @return {void}
 */
google.earth.KmlBalloonStyle.prototype.setText = function(text) {};
/**
 * @extends {google.earth.KmlObject}
 * @constructor
 * @struct
 */
google.earth.KmlLatLonBox = function() {};

/**
 * Sets the north, south, east, and west edges of the bounding box, as well as the rotation of the overlay.
 * @param {number} north
 * @param {number} south
 * @param {number} east
 * @param {number} west
 * @param {number} rotation
 * @return {void}
 */
google.earth.KmlLatLonBox.prototype.setBox = function(north, south, east, west, rotation) {};

/**
 * Specifies the latitude of the north edge of the bounding box, in decimal degrees from -90 to 90.
 * @return {number}
 */
google.earth.KmlLatLonBox.prototype.getNorth = function() {};

/**
 * Specifies the latitude of the north edge of the bounding box, in decimal degrees from -90 to 90.
 * @param {number} north
 * @return {void}
 */
google.earth.KmlLatLonBox.prototype.setNorth = function(north) {};

/**
 * Specifies the latitude of the south edge of the bounding box, in decimal degrees from -90 to 90.
 * @return {number}
 */
google.earth.KmlLatLonBox.prototype.getSouth = function() {};

/**
 * Specifies the latitude of the south edge of the bounding box, in decimal degrees from -90 to 90.
 * @param {number} south
 * @return {void}
 */
google.earth.KmlLatLonBox.prototype.setSouth = function(south) {};

/**
 * Specifies the longitude of the east edge of the bounding box, in decimal degrees from -180 to 180.
 * (For overlays that overlap the meridian of 180 degrees longitude, values can extend beyond that range.)
 * @return {number}
 */
google.earth.KmlLatLonBox.prototype.getEast = function() {};

/**
 * Specifies the longitude of the east edge of the bounding box, in decimal degrees from -180 to 180.
 * (For overlays that overlap the meridian of 180 degrees longitude, values can extend beyond that range.)
 * @param {number} east
 * @return {void}
 */
google.earth.KmlLatLonBox.prototype.setEast = function(east) {};

/**
 * Specifies the longitude of the west edge of the bounding box, in decimal degrees from -180 to 180.
 * (For overlays that overlap the meridian of 180 degrees longitude, values can extend beyond that range.)
 * @return {number}
 */
google.earth.KmlLatLonBox.prototype.getWest = function() {};

/**
 * Specifies the longitude of the west edge of the bounding box, in decimal degrees from -180 to 180.
 * (For overlays that overlap the meridian of 180 degrees longitude, values can extend beyond that range.)
 * @param {number} west
 * @return {void}
 */
google.earth.KmlLatLonBox.prototype.setWest = function(west) {};

/**
 * Specifies a rotation of the overlay about its center, in degrees.
 * Values can be +/-180. The default is 0 (north).
 * Rotations are specified in a counterclockwise direction.
 * @return {number}
 */
google.earth.KmlLatLonBox.prototype.getRotation = function() {};

/**
 * Specifies a rotation of the overlay about its center, in degrees.
 * Values can be +/-180. The default is 0 (north).
 * Rotations are specified in a counterclockwise direction.
 * @param {number} rotation
 * @return {void}
 */
google.earth.KmlLatLonBox.prototype.setRotation = function(rotation) {};
/**
 * @extends {google.earth.KmlLatLonBox}
 * @constructor
 * @struct
 */
google.earth.KmlLatLonAltBox = function() {};

/**
 * Sets the north, south, east, west, rotation, minAltitude, maxAltitude, and altitudeMode of bounding box.
 * @param {number} north
 * @param {number} south
 * @param {number} east
 * @param {number} west
 * @param {number} rotation
 * @param {number} minAltitude
 * @param {number} maxAltitude
 * @param {?} altitudeMode
 * @return {void}
 */
google.earth.KmlLatLonAltBox.prototype.setAltBox = function(north, south, east, west, rotation, minAltitude, maxAltitude, altitudeMode) {};

/**
 * Minimum altitude, specified in meters above sea level.
 * @return {number}
 */
google.earth.KmlLatLonAltBox.prototype.getMinAltitude = function() {};

/**
 * Minimum altitude, specified in meters above sea level.
 * @param {number} minAltitude
 * @return {void}
 */
google.earth.KmlLatLonAltBox.prototype.setMinAltitude = function(minAltitude) {};

/**
 * Maximim altitude, specified in meters above sea level.
 * @return {number}
 */
google.earth.KmlLatLonAltBox.prototype.getMaxAltitude = function() {};

/**
 * Maximim altitude, specified in meters above sea level.
 * @param {number} maxAltitude
 * @return {void}
 */
google.earth.KmlLatLonAltBox.prototype.setMaxAltitude = function(maxAltitude) {};

/**
 * Specifies how the altitude property is interpreted.
 * 
 * See also:
 * 
 * * GEPlugin.ALTITUDE_CLAMP_TO_GROUND
 * * GEPlugin.ALTITUDE_RELATIVE_TO_GROUND
 * * GEPlugin.ALTITUDE_ABSOLUTE
 * * GEPlugin.ALTITUDE_CLAMP_TO_SEA_FLOOR
 * * GEPlugin.ALTITUDE_RELATIVE_TO_SEA_FLOOR
 * @return {?}
 */
google.earth.KmlLatLonAltBox.prototype.getAltitudeMode = function() {};

/**
 * Specifies how the altitude property is interpreted.
 * 
 * See also:
 * 
 * * GEPlugin.ALTITUDE_CLAMP_TO_GROUND
 * * GEPlugin.ALTITUDE_RELATIVE_TO_GROUND
 * * GEPlugin.ALTITUDE_ABSOLUTE
 * * GEPlugin.ALTITUDE_CLAMP_TO_SEA_FLOOR
 * * GEPlugin.ALTITUDE_RELATIVE_TO_SEA_FLOOR
 * @param {?} altitudeMode
 * @return {number}
 */
google.earth.KmlLatLonAltBox.prototype.setAltitudeMode = function(altitudeMode) {};
/**
 * @extends {google.earth.KmlObject}
 * @constructor
 * @struct
 */
google.earth.KmlLod = function() {};

/**
 * Sets the minLodPixels, maxLodPixels, minFadeExtent, and maxFadeExtent for the projected region on the screen.
 * @param {number} minLodPixels
 * @param {number} maxLodPixels
 * @param {number} minFadeExtent
 * @param {number} maxFadeExtent
 * @return {void}
 */
google.earth.KmlLod.prototype.set = function(minLodPixels, maxLodPixels, minFadeExtent, maxFadeExtent) {};

/**
 * Specifies measurement in screen pixels that represents the minimum limit of the visibility range for a given Region.
 * Google Earth calculates the size of the region when projected onto screen space.
 * Then it computes the square root of the region's area (if, for example, the Region is square and the viewpoint is directly above the Region, and the Region is not tilted, this measurement is equal to the width of the projected Region).
 * If this measurement falls within the limits defined by minLodPixels and maxLodPixels (and if the LatLonAltBox is in view), the region is active.
 * If this limit is not reached, the associated geometry is considered to be too far from the user's viewpoint to be drawn.
 * @return {number}
 */
google.earth.KmlLod.prototype.getMinLodPixels = function() {};

/**
 * Specifies measurement in screen pixels that represents the minimum limit of the visibility range for a given Region.
 * Google Earth calculates the size of the region when projected onto screen space.
 * Then it computes the square root of the region's area (if, for example, the Region is square and the viewpoint is directly above the Region, and the Region is not tilted, this measurement is equal to the width of the projected Region).
 * If this measurement falls within the limits defined by minLodPixels and maxLodPixels (and if the LatLonAltBox is in view), the region is active.
 * If this limit is not reached, the associated geometry is considered to be too far from the user's viewpoint to be drawn.
 * @param {number} minLodPixels
 * @return {void}
 */
google.earth.KmlLod.prototype.setMinLodPixels = function(minLodPixels) {};

/**
 * Measurement in screen pixels that represents the maximum limit of the visibility range for a given Region.
 * A value of -1, the default, indicates "active to infinite size."
 * @return {number}
 */
google.earth.KmlLod.prototype.getMaxLodPixels = function() {};

/**
 * Measurement in screen pixels that represents the maximum limit of the visibility range for a given Region.
 * A value of -1, the default, indicates "active to infinite size."
 * @param {number} maxLogPixels
 * @return {void}
 */
google.earth.KmlLod.prototype.setMaxLodPixels = function(maxLogPixels) {};

/**
 * Distance over which the geometry fades, from fully opaque to fully transparent.
 * This ramp value, expressed in screen pixels, is applied at the minimum end of the LOD (visibility) limits.
 * @return {number}
 */
google.earth.KmlLod.prototype.getMinFadeExtent = function() {};

/**
 * Distance over which the geometry fades, from fully opaque to fully transparent.
 * This ramp value, expressed in screen pixels, is applied at the minimum end of the LOD (visibility) limits.
 * @param {number} minFadeExtent
 * @return {void}
 */
google.earth.KmlLod.prototype.setMinFadeExtent = function(minFadeExtent) {};

/**
 * Distance over which the geometry fades, from fully transparent to fully opaque.
 * This ramp value, expressed in screen pixels, is applied at the maximum end of the LOD (visibility) limits.
 * @return {number}
 */
google.earth.KmlLod.prototype.getMaxFadeExtent = function() {};

/**
 * Distance over which the geometry fades, from fully transparent to fully opaque.
 * This ramp value, expressed in screen pixels, is applied at the maximum end of the LOD (visibility) limits.
 * @param {number} maxFadeExtent
 * @return {void}
 */
google.earth.KmlLod.prototype.setMaxFadeExtent = function(maxFadeExtent) {};
/**
 * @extends {google.earth.KmlObject}
 * @constructor
 * @struct
 */
google.earth.KmlRegion = function() {};

/**
 * Sets the latLonAltBox and lod for the region.
 * @param {!google.earth.KmlLatLonAltBox} latLonAltBox
 * @param {!google.earth.KmlLod} lod
 * @return {void}
 */
google.earth.KmlRegion.prototype.set = function(latLonAltBox, lod) {};

/**
 * A bounding box that describes an area of interest defined by geographic coordinates and altitudes.
 * @return {!google.earth.KmlLatLonAltBox}
 */
google.earth.KmlRegion.prototype.getLatLonAltBox = function() {};

/**
 * A bounding box that describes an area of interest defined by geographic coordinates and altitudes.
 * @param {!google.earth.KmlLatLonAltBox} latLonAltBox
 * @return {void}
 */
google.earth.KmlRegion.prototype.setLatLonAltBox = function(latLonAltBox) {};

/**
 * LOD is an abbreviation for Level of Detail.
 * Lod describes the size of the projected region on the screen that is required in order for the region to be considered "active.
 * " Also specifies the size of the pixel ramp used for fading in (from transparent to opaque) and fading out (from opaque to transparent).
 * @return {!google.earth.KmlLod}
 */
google.earth.KmlRegion.prototype.getLod = function() {};

/**
 * LOD is an abbreviation for Level of Detail.
 * Lod describes the size of the projected region on the screen that is required in order for the region to be considered "active.
 * " Also specifies the size of the pixel ramp used for fading in (from transparent to opaque) and fading out (from opaque to transparent).
 * @param {!google.earth.KmlLod} lod
 * @return {void}
 */
google.earth.KmlRegion.prototype.setLod = function(lod) {};
/**
 * @constructor
 * @struct
 */
google.earth.KmlDateTime = function() {};

/**
 * Set the date.  Accepts only XML Schema time (see XML Schema Part 2: Datatypes Second Edition).
 * The value can be expressed as yyyy-mm-ddThh:mm:sszzzzzz, where T is the separator between the date and the time,
 * and the time zone is either Z(for UTC) or zzzzzz, which represents +/-hh:mm in relation to UTC.
 * Additionally, the value can be expressed as a date only.
 * @param {string} date
 * @return {void}
 */
google.earth.KmlDateTime.prototype.set = function(date) {};

/**
 * Returns the date and time in XML Schema time format.
 * @return {string}
 */
google.earth.KmlDateTime.prototype.get = function() {};
/**
 * @extends {google.earth.KmlObject}
 * @constructor
 * @struct
 */
google.earth.KmlTimePrimitive = function() {};
/**
 * @extends {google.earth.KmlTimePrimitive}
 * @constructor
 * @struct
 */
google.earth.KmlTimeStamp = function() {};

/**
 * Represents a single moment in time.
 * This is a simple element and contains no children.
 * Its value is a dateTime, specified in XML time.
 * The precision of the TimeStamp is dictated by the dateTime value in the when property.
 * 
 * * dateTime gives second resolution
 * * date gives day resolution
 * * gYearMonth gives month resolution
 * * gYear gives year resolution
 * @return {!google.earth.KmlDateTime}
 */
google.earth.KmlTimeStamp.prototype.getWhen = function() {};
/**
 * @extends {google.earth.KmlTimePrimitive}
 * @constructor
 * @struct
 */
google.earth.KmlTimeSpan = function() {};

/**
 * Describes the beginning instant of a time period.
 * If absent, the beginning of the period is unbounded.
 * @return {!google.earth.KmlDateTime}
 */
google.earth.KmlTimeSpan.prototype.getBegin = function() {};

/**
 * Describes the ending instant of a time period.
 * If absent, the end of the period is unbounded.
 * @return {!google.earth.KmlDateTime}
 */
google.earth.KmlTimeSpan.prototype.getEnd = function() {};
/**
 * @extends {google.earth.KmlObject}
 * @constructor
 * @struct
 */
google.earth.KmlAbstractView = function() {};

/**
 * Creates a new KmlLookAt object that matches as closely as possible this KmlAbstractView. 
 * KmlLookAt is unable to represent roll, so roll values in the current view will not be passed to the new KmlLookAt object.
 * 
 * If this view is already a KmlLookAt, this function returns a new KmlLookAt representing the same view.
 * @return {!google.earth.KmlLookAt}
 */
google.earth.KmlAbstractView.prototype.copyAsLookAt = function() {};

/**
 * Creates a new KmlCamera object that matches this KmlAbstractView.
 * 
 * If this view is already a KmlCamera, this function returns a new KmlCamera representing the same view.
 * @return {!google.earth.KmlCamera}
 */
google.earth.KmlAbstractView.prototype.copyAsCamera = function() {};

/**
 * Returns the KmlTimeStamp or KmlTimeSpan object associated with this view.
 * @return {!google.earth.KmlTimePrimitive}
 */
google.earth.KmlAbstractView.prototype.getTimePrimitive = function() {};

/**
 * Associate a KmlTimeStamp or KmlTimeSpan object with this view.
 * @param {!google.earth.KmlTimePrimitive} timePrimitive
 * @return {void}
 */
google.earth.KmlAbstractView.prototype.setTimePrimitive = function(timePrimitive) {};

/**
 * Returns the viewer options on the current view.
 * 
 * See also:
 * 
 * * GEPlugin.OPTION_STREET_VIEW
 * * GEPlugin.OPTION_SUNLIGHT
 * * GEPlugin.OPTION_HISTORICAL_IMAGERY
 * @return {!google.earth.KmlViewerOptions}
 */
google.earth.KmlAbstractView.prototype.getViewerOptions = function() {};

/**
 * Sets the viewer options on the current view.
 * 
 * See also:
 * 
 * * GEPlugin.OPTION_STREET_VIEW
 * * GEPlugin.OPTION_SUNLIGHT
 * * GEPlugin.OPTION_HISTORICAL_IMAGERY
 * @param {!google.earth.KmlViewerOptions} viewerOptions
 * @return {void}
 */
google.earth.KmlAbstractView.prototype.setViewerOptions = function(viewerOptions) {};
/**
 * @extends {google.earth.KmlAbstractView}
 * @constructor
 * @struct
 */
google.earth.KmlLookAt = function() {};

/**
 * Sets the latitude, longitude, altitude, altitudeMode, heading, tilt, and range for the camera.
 * @param {number} latitude
 * @param {number} longitude
 * @param {number} altitude
 * @param {?} altitudeMode
 * @param {number} heading
 * @param {number} tilt
 * @param {number} range
 * @return {void}
 */
google.earth.KmlLookAt.prototype.set = function(latitude, longitude, altitude, altitudeMode, heading, tilt, range) {};

/**
 * Latitude of the point the camera is looking at.
 * Degrees north or south of the Equator (0 degrees).
 * Values range from -90 degrees (South Pole) to 90 degrees (North Pole).
 * @return {number}
 */
google.earth.KmlLookAt.prototype.getLatitude = function() {};

/**
 * Latitude of the point the camera is looking at.
 * Degrees north or south of the Equator (0 degrees).
 * Values range from -90 degrees (South Pole) to 90 degrees (North Pole).
 * @param {number} latitude
 * @return {void}
 */
google.earth.KmlLookAt.prototype.setLatitude = function(latitude) {};

/**
 * Latitude of the point the camera is looking at.
 * Degrees north or south of the Equator (0 degrees).
 * Values range from -90 degrees (South Pole) to 90 degrees (North Pole).
 * @return {number}
 */
google.earth.KmlLookAt.prototype.getLongitude = function() {};

/**
 * Latitude of the point the camera is looking at.
 * Degrees north or south of the Equator (0 degrees).
 * Values range from -90 degrees (South Pole) to 90 degrees (North Pole).
 * @param {number} longitude
 * @return {void}
 */
google.earth.KmlLookAt.prototype.setLongitude = function(longitude) {};

/**
 * The distance in meters from the point specified by longitude, latitude, and altitude for the LookAt position.
 * @return {number}
 */
google.earth.KmlLookAt.prototype.getRange = function() {};

/**
 * The distance in meters from the point specified by longitude, latitude, and altitude for the LookAt position.
 * @param {number} range
 * @return {void}
 */
google.earth.KmlLookAt.prototype.setRange = function(range) {};

/**
 * Angle between the direction of the LookAt position and the normal to the surface of the earth.
 * Values range from 0 to 90 degrees.  Values for tilt cannot be negative.
 * A tilt value of 0 degrees indicates viewing from directly above.
 * A tilt value of 90 degrees indicates viewing along the horizon.
 * @return {number}
 */
google.earth.KmlLookAt.prototype.getTilt = function() {};

/**
 * Angle between the direction of the LookAt position and the normal to the surface of the earth.
 * Values range from 0 to 90 degrees.  Values for tilt cannot be negative.
 * A tilt value of 0 degrees indicates viewing from directly above.
 * A tilt value of 90 degrees indicates viewing along the horizon.
 * @param {number} tilt
 * @return {void}
 */
google.earth.KmlLookAt.prototype.setTilt = function(tilt) {};

/**
 * Direction (that is, North, South, East, West), in degrees. Default=0 (North). Values range from 0 to 360 degrees.
 * @return {number}
 */
google.earth.KmlLookAt.prototype.getHeading = function() {};

/**
 * Direction (that is, North, South, East, West), in degrees. Default=0 (North). Values range from 0 to 360 degrees.
 * @param {number} heading
 * @return {void}
 */
google.earth.KmlLookAt.prototype.setHeading = function(heading) {};

/**
 * Distance from the earth's surface, in meters.
 * @return {number}
 */
google.earth.KmlLookAt.prototype.getAltitude = function() {};

/**
 * Distance from the earth's surface, in meters.
 * @param {number} altitude
 * @return {void}
 */
google.earth.KmlLookAt.prototype.setAltitude = function(altitude) {};

/**
 * Specifies how altitude components in the coordinates element are interpreted.
 * @return {?}
 */
google.earth.KmlLookAt.prototype.getAltitudeMode = function() {};

/**
 * Specifies how altitude components in the coordinates element are interpreted.
 * @param {?} altitudeMode
 * @return {void}
 */
google.earth.KmlLookAt.prototype.setAltitudeMode = function(altitudeMode) {};
/**
 * @extends {google.earth.KmlAbstractView}
 * @constructor
 * @struct
 */
google.earth.KmlCamera = function() {};

/**
 * Sets the latitude, longitude, altitude, alitudeMode, heading, tilt, and roll values.
 * @param {number} latitude
 * @param {number} longitude
 * @param {number} altitude
 * @param {?} altitudeMode
 * @param {number} heading
 * @param {number} tilt
 * @param {number} roll
 * @return {void}
 */
google.earth.KmlCamera.prototype.set = function(latitude, longitude, altitude, altitudeMode, heading, tilt, roll) {};

/**
 * Latitude of the camera location. Degrees north or south of the Equator (0 degrees). Values range from -90 degrees to 90 degrees.
 * @return {number}
 */
google.earth.KmlCamera.prototype.getLatitude = function() {};

/**
 * Latitude of the camera location. Degrees north or south of the Equator (0 degrees). Values range from -90 degrees to 90 degrees.
 * @param {number} latitude
 * @return {void}
 */
google.earth.KmlCamera.prototype.setLatitude = function(latitude) {};

/**
 * Longitude of the camera location. Angular distance in degrees, relative to the Prime Meridian. Values west of the Meridian range from -180 to 0 degrees.
 * Values east of the Meridian range from 0 to 180 degrees.
 * @return {number}
 */
google.earth.KmlCamera.prototype.getLongitude = function() {};

/**
 * Longitude of the camera location. Angular distance in degrees, relative to the Prime Meridian. Values west of the Meridian range from -180 to 0 degrees.
 * Values east of the Meridian range from 0 to 180 degrees.
 * @param {number} longitude
 * @return {void}
 */
google.earth.KmlCamera.prototype.setLongitude = function(longitude) {};

/**
 * Distance from the earth's surface.
 * @return {number}
 */
google.earth.KmlCamera.prototype.getAltitude = function() {};

/**
 * Distance from the earth's surface.
 * @param {number} altitude
 * @return {void}
 */
google.earth.KmlCamera.prototype.setAltitude = function(altitude) {};

/**
 * Direction (that is, North, South, East, West), in degrees. Default=0 (North). Values range from 0 to 360 degrees.
 * @return {number}
 */
google.earth.KmlCamera.prototype.getHeading = function() {};

/**
 * Direction (that is, North, South, East, West), in degrees. Default=0 (North). Values range from 0 to 360 degrees.
 * @param {number} heading
 * @return {void}
 */
google.earth.KmlCamera.prototype.setHeading = function(heading) {};

/**
 * Angle between the direction of the camera position and the normal to the surface of the earth. Values range from 0 to 360 degrees.
 * A tilt value of 0 degrees indicates viewing from directly above, 90 degrees indicates viewing along the horizon, and 180 degrees indicates viewing straight up at the sky.
 * @return {number}
 */
google.earth.KmlCamera.prototype.getTilt = function() {};

/**
 * Angle between the direction of the camera position and the normal to the surface of the earth. Values range from 0 to 360 degrees.
 * A tilt value of 0 degrees indicates viewing from directly above, 90 degrees indicates viewing along the horizon, and 180 degrees indicates viewing straight up at the sky.
 * @param {number} tilt
 * @return {void}
 */
google.earth.KmlCamera.prototype.setTilt = function(tilt) {};

/**
 * Rotation, in degrees, of the camera around the Z axis. Values range from -180 to +180 degrees.
 * @return {number}
 */
google.earth.KmlCamera.prototype.getRoll = function() {};

/**
 * Rotation, in degrees, of the camera around the Z axis. Values range from -180 to +180 degrees.
 * @param {number} roll
 * @return {void}
 */
google.earth.KmlCamera.prototype.setRoll = function(roll) {};

/**
 * Specifies how altitude components in the coordinates are interpreted.
 * @return {?}
 */
google.earth.KmlCamera.prototype.getAltitudeMode = function() {};

/**
 * Specifies how altitude components in the coordinates are interpreted.
 * @param {?} altitudeMode
 * @return {void}
 */
google.earth.KmlCamera.prototype.setAltitudeMode = function(altitudeMode) {};
/**
 * @extends {google.earth.KmlObject}
 * @constructor
 * @struct
 */
google.earth.KmlGeometry = function() {};
/**
 * @extends {google.earth.KmlGeometry}
 * @constructor
 * @struct
 */
google.earth.KmlAltitudeGeometry = function() {};

/**
 * Specifies how altitude components in the geometry coordinates are interpreted.
 * @return {?}
 */
google.earth.KmlAltitudeGeometry.prototype.getAltitudeMode = function() {};

/**
 * Specifies how altitude components in the geometry coordinates are interpreted.
 * @param {?} altitudeMode
 * @return {void}
 */
google.earth.KmlAltitudeGeometry.prototype.setAltitudeMode = function(altitudeMode) {};
/**
 * @extends {google.earth.KmlAltitudeGeometry}
 * @constructor
 * @struct
 */
google.earth.KmlModel = function() {};

/**
 * Specifies the exact coordinates of the Model's origin in latitude, longitude, and altitude.
 * Latitude and longitude measurements are standard lat-lon projection with WGS84 datum.
 * Altitude is distance above the earth's surface, in meters, and is interpreted according to altitudeMode.
 * @return {!google.earth.KmlLocation}
 */
google.earth.KmlModel.prototype.getLocation = function() {};

/**
 * Specifies the exact coordinates of the Model's origin in latitude, longitude, and altitude.
 * Latitude and longitude measurements are standard lat-lon projection with WGS84 datum.
 * Altitude is distance above the earth's surface, in meters, and is interpreted according to altitudeMode.
 * @param {!google.earth.KmlLocation} location
 * @return {void}
 */
google.earth.KmlModel.prototype.setLocation = function(location) {};

/**
 * Describes rotation of a 3D model's coordinate system to position the object in Google Earth.
 * @return {!google.earth.KmlOrientation}
 */
google.earth.KmlModel.prototype.getOrientation = function() {};

/**
 * Describes rotation of a 3D model's coordinate system to position the object in Google Earth.
 * @param {!google.earth.KmlOrientation} orientation
 * @return {void}
 */
google.earth.KmlModel.prototype.setOrientation = function(orientation) {};

/**
 * Scales a model along the x, y, and z axes in the model's coordinate space
 * @return {!google.earth.KmlScale}
 */
google.earth.KmlModel.prototype.getScale = function() {};

/**
 * Scales a model along the x, y, and z axes in the model's coordinate space
 * @param {!google.earth.KmlScale} scale
 * @return {void}
 */
google.earth.KmlModel.prototype.setScale = function(scale) {};

/**
 * Returns the link of the collada model.
 * @return {!google.earth.KmlLink}
 */
google.earth.KmlModel.prototype.getLink = function() {};

/**
 * Sets the link of the collada model.
 * @param {!google.earth.KmlLink} link
 * @return {void}
 */
google.earth.KmlModel.prototype.setLink = function(link) {};
/**
 * @extends {google.earth.KmlGeometry}
 * @constructor
 * @struct
 */
google.earth.KmlMultiGeometry = function() {};

/**
 * The collection of geometries that are children of this multi-geometry.
 * @return {!google.earth.GEGeometryContainer}
 */
google.earth.KmlMultiGeometry.prototype.getGeometries = function() {};
/**
 * @extends {google.earth.KmlAltitudeGeometry}
 * @constructor
 * @struct
 */
google.earth.KmlExtrudableGeometry = function() {};

/**
 * Specifies whether to connect the geometry to the ground.
 * @return {boolean}
 */
google.earth.KmlExtrudableGeometry.prototype.getExtrude = function() {};

/**
 * Specifies whether to connect the geometry to the ground.
 * @param {boolean} extrude
 * @return {void}
 */
google.earth.KmlExtrudableGeometry.prototype.setExtrude = function(extrude) {};

/**
 * Specifies whether to allow the geometry to follow the terrain elevation.
 * @return {boolean}
 */
google.earth.KmlExtrudableGeometry.prototype.getTessellate = function() {};

/**
 * Specifies whether to allow the geometry to follow the terrain elevation.
 * @param {boolean} tessellate
 * @return {void}
 */
google.earth.KmlExtrudableGeometry.prototype.setTessellate = function(tessellate) {};
/**
 * @extends {google.earth.KmlExtrudableGeometry}
 * @constructor
 * @struct
 */
google.earth.KmlPolygon = function() {};

/**
 * Contains a LinearRing element.
 * @return {!google.earth.KmlLinearRing}
 */
google.earth.KmlPolygon.prototype.getOuterBoundary = function() {};

/**
 * Contains a LinearRing element.
 * @param {!google.earth.KmlLinearRing} outerBoundary
 * @return {void}
 */
google.earth.KmlPolygon.prototype.setOuterBoundary = function(outerBoundary) {};

/**
 * Contains a LinearRing element.
 * You can specify multiple innerBoundary properties, which create multiple cut-outs inside the Polygon.
 * @return {!google.earth.GELinearRingContainer}
 */
google.earth.KmlPolygon.prototype.getInnerBoundaries = function() {};
/**
 * @extends {google.earth.KmlExtrudableGeometry}
 * @constructor
 * @struct
 */
google.earth.KmlPoint = function() {};

/**
 * Sets altitudeMode, extrude, tessellate, latitude, longitude, and altitude values.
 * @param {number} latitude
 * @param {number} longitude
 * @param {number} altitude
 * @param {?} altitudeMode
 * @param {boolean} extrude
 * @param {boolean} tessellate
 * @return {void}
 */
google.earth.KmlPoint.prototype.set = function(latitude, longitude, altitude, altitudeMode, extrude, tessellate) {};

/**
 * Sets the latitude and longitude.
 * @param {number} latitude
 * @param {number} longitude
 * @return {void}
 */
google.earth.KmlPoint.prototype.setLatLng = function(latitude, longitude) {};

/**
 * Sets the latitude, longitude, and altitide.
 * @param {number} latitude
 * @param {number} longitude
 * @param {number} altitude
 * @return {void}
 */
google.earth.KmlPoint.prototype.setLatLngAlt = function(latitude, longitude, altitude) {};

/**
 * The point's latitude, in degrees.
 * @return {number}
 */
google.earth.KmlPoint.prototype.getLatitude = function() {};

/**
 * The point's latitude, in degrees.
 * @param {number} latitude
 * @return {void}
 */
google.earth.KmlPoint.prototype.setLatitude = function(latitude) {};

/**
 * The point's longitude, in degrees.
 * @return {number}
 */
google.earth.KmlPoint.prototype.getLongitude = function() {};

/**
 * The point's longitude, in degrees.
 * @param {number} longitude
 * @return {void}
 */
google.earth.KmlPoint.prototype.setLongitude = function(longitude) {};

/**
 * The point's altitude, in meters.
 * @return {number}
 */
google.earth.KmlPoint.prototype.getAltitude = function() {};

/**
 * The point's altitude, in meters.
 * @param {number} altitude
 * @return {void}
 */
google.earth.KmlPoint.prototype.setAltitude = function(altitude) {};
/**
 * @extends {google.earth.KmlExtrudableGeometry}
 * @constructor
 * @struct
 */
google.earth.KmlLineString = function() {};

/**
 * Two or more coordinate tuples, each consisting of floating point values for longitude, latitude, and altitude.
 * The altitude component is optional.
 * @return {!google.earth.KmlCoordArray}
 */
google.earth.KmlLineString.prototype.getCoordinates = function() {};

/**
 * Added to the altitude values for all points on the line string.
 * Adjusts the altitude of the feature as a whole, without the need to update each coordinate set.
 * @param {number} altitudeOffset
 * @return {void}
 */
google.earth.KmlLineString.prototype.setAltitudeOffset = function(altitudeOffset) {};

/**
 * Returns the altitudeOffset, or 0 if not set.
 * @return {number}
 */
google.earth.KmlLineString.prototype.getAltitudeOffset = function() {};
/**
 * @extends {google.earth.KmlLineString}
 * @constructor
 * @struct
 */
google.earth.KmlLinearRing = function() {};
/**
 * @extends {google.earth.KmlObject}
 * @constructor
 * @struct
 */
google.earth.KmlFeature = function() {};

/**
 * Retrieves the contents of the feature's <ExtendedData> element.
 * The retrieved contents are scrubbed to remove JavaScript; CSS; and iframe, embed, and object tags. 
 * 
 * It should be safe to insert the resulting HTML into your page without concern for malicious content embedded in the feature data;
 * however any feature depending on CSS or Javascript will not work.
 * @return {string}
 */
google.earth.KmlFeature.prototype.getBalloonHtml = function() {};

/**
 * Retrieves the contents of the feature's <ExtendedData> element. The contents are not scrubbed.
 * Use this method only if you trust the source of the feature data.
 * @return {string}
 */
google.earth.KmlFeature.prototype.getBalloonHtmlUnsafe = function() {};

/**
 * User-defined text displayed in the plugin as the label for the object (for example, for a Placemark).
 * @return {string}
 */
google.earth.KmlFeature.prototype.getName = function() {};

/**
 * User-defined text displayed in the plugin as the label for the object (for example, for a Placemark).
 * @param {string} name
 * @return {void}
 */
google.earth.KmlFeature.prototype.setName = function(name) {};

/**
 * Specifies whether the feature is drawn in the plugin.
 * In order for a feature to be visible, the visibility of all its ancestors must also be set to true.
 * In the Google Earth List View, each feature has a checkbox that allows the user to control visibility of the feature.
 * @return {boolean}
 */
google.earth.KmlFeature.prototype.getVisibility = function() {};

/**
 * Specifies whether the feature is drawn in the plugin.
 * In order for a feature to be visible, the visibility of all its ancestors must also be set to true.
 * In the Google Earth List View, each feature has a checkbox that allows the user to control visibility of the feature.
 * @param {boolean} visibility
 * @return {void}
 */
google.earth.KmlFeature.prototype.setVisibility = function(visibility) {};

/**
 * Default state of left panel.
 * @return {boolean}
 */
google.earth.KmlFeature.prototype.getOpen = function() {};

/**
 * Default state of left panel.
 * @param {boolean} open
 * @return {void}
 */
google.earth.KmlFeature.prototype.setOpen = function(open) {};

/**
 * Specifies a value representing an unstructured address written as a standard street, city, state address, and/or as a postal code.
 * @return {string}
 */
google.earth.KmlFeature.prototype.getAddress = function() {};

/**
 * Specifies a value representing an unstructured address written as a standard street, city, state address, and/or as a postal code.
 * @param {string} address
 * @return {void}
 */
google.earth.KmlFeature.prototype.setAddress = function(address) {};

/**
 * Specifies a short description of the feature.
 * @return {string}
 */
google.earth.KmlFeature.prototype.getSnippet = function() {};

/**
 * Specifies a short description of the feature.
 * @param {string} snippet
 * @return {void}
 */
google.earth.KmlFeature.prototype.setSnippet = function(snippet) {};

/**
 * User-supplied text that appears in the description balloon.
 * @return {string}
 */
google.earth.KmlFeature.prototype.getDescription = function() {};

/**
 * User-supplied text that appears in the description balloon.
 * @param {string} description
 * @return {void}
 */
google.earth.KmlFeature.prototype.setDescription = function(description) {};

/**
 * Stores either the lookAt or camera view.
 * @return {!google.earth.KmlAbstractView}
 */
google.earth.KmlFeature.prototype.getAbstractView = function() {};

/**
 * Stores either the lookAt or camera view.
 * @param {!google.earth.KmlAbstractView} abstractView
 * @return {void}
 */
google.earth.KmlFeature.prototype.setAbstractView = function(abstractView) {};

/**
 * URI of a Style or StyleMap defined in a Document.
 * It refers to a Plug-in intitiated object.
 * @return {string}
 */
google.earth.KmlFeature.prototype.getStyleUrl = function() {};

/**
 * URI of a Style or StyleMap defined in a Document.
 * It refers to a Plug-in intitiated object.
 * @param {string} styleUrl
 * @return {void}
 */
google.earth.KmlFeature.prototype.setStyleUrl = function(styleUrl) {};

/**
 * The style based on the current mode of the Placemark.
 * @return {!google.earth.KmlStyleSelector}
 */
google.earth.KmlFeature.prototype.getStyleSelector = function() {};

/**
 * The style based on the current mode of the Placemark.
 * @param {!google.earth.KmlStyleSelector} styleSelector
 * @return {void}
 */
google.earth.KmlFeature.prototype.setStyleSelector = function(styleSelector) {};

/**
 * Specifies region objects and their properties.
 * A region contains a bounding box (LatLonAltBox) that describes an area of interest defined by geographic coordinates and altitudes.
 * @return {!google.earth.KmlRegion}
 */
google.earth.KmlFeature.prototype.getRegion = function() {};

/**
 * Specifies region objects and their properties.
 * A region contains a bounding box (LatLonAltBox) that describes an area of interest defined by geographic coordinates and altitudes.
 * @param {!google.earth.KmlRegion} region
 * @return {void}
 */
google.earth.KmlFeature.prototype.setRegion = function(region) {};

/**
 * Returns the KML for a feature.
 * @return {string}
 */
google.earth.KmlFeature.prototype.getKml = function() {};

/**
 * Returns previous sibling node within the container.
 * @return {!google.earth.KmlFeature}
 */
google.earth.KmlFeature.prototype.getPreviousSibling = function() {};

/**
 * Returns the next sibling node within the container.
 * @return {!google.earth.KmlFeature}
 */
google.earth.KmlFeature.prototype.getNextSibling = function() {};

/**
 * Returns the KmlTimeStamp or KmlTimeSpan object associated with this feature.
 * @return {!google.earth.KmlTimePrimitive}
 */
google.earth.KmlFeature.prototype.getTimePrimitive = function() {};

/**
 * Attach a KmlTimeStamp or KmlTimeSpan object to this feature.
 * @param {!google.earth.KmlTimePrimitive} timePrimitive
 * @return {void}
 */
google.earth.KmlFeature.prototype.setTimePrimitive = function(timePrimitive) {};

/**
 * Returns the computed style of a feature, merging any inline styles with styles imported from setHref() or a StyleUrl.
 * 
 * Note: Modifying the returned KmlStyle object is undefined and not recommended.
 * @return {!google.earth.KmlStyle}
 */
google.earth.KmlFeature.prototype.getComputedStyle = function() {};

/**
 * Experimental Feature — this is an experimental feature and can change (or even be removed) at any time.  
 * The opacity of a feature, ranging from 0 (completely transparent) to 1 (complete opaque).
 * The opacity of a folder or document will influence the opacity of child features.
 * Thus, if a folder has an opacity of 0.5 and a child ground overlay in the folder also has an opacity of 0.5, the overlay will be drawn with an opacity of 0.25.
 * @return {number}
 */
google.earth.KmlFeature.prototype.getOpacity = function() {};

/**
 * Experimental Feature — this is an experimental feature and can change (or even be removed) at any time.  
 * The opacity of a feature, ranging from 0 (completely transparent) to 1 (complete opaque).
 * The opacity of a folder or document will influence the opacity of child features.
 * Thus, if a folder has an opacity of 0.5 and a child ground overlay in the folder also has an opacity of 0.5, the overlay will be drawn with an opacity of 0.25.
 * @param {number} opacity
 * @return {void}
 */
google.earth.KmlFeature.prototype.setOpacity = function(opacity) {};
/**
 * @extends {google.earth.KmlFeature}
 * @constructor
 * @struct
 */
google.earth.KmlContainer = function() {};

/**
 * Get an element by ID.
 * This is functionally equivalent to getElementByUrl with an unspecified base URL.
 * 
 * For example: getElementByUrl('#foo').
 * 
 * Usage is when finding objects created with JavaScript, which have unspecified base URLs.
 * The object must be a descendant of the container before it can be found.
 * @param {string} id
 * @return {!google.earth.KmlObject}
 */
google.earth.KmlContainer.prototype.getElementById = function(id) {};

/**
 * Get an element by URL. A URL consists of the base address and ID, joined with the # character. 
 * 
 * For example: http://www.google.com/bar.kml#here_be_monsters 
 * 
 * This applies to objects that are fetched.
 * In the case of plugin created objects, the URL is simply #foo.
 * The object must be a descendant of the container before it can be found.
 * @param {string} url
 * @return {!google.earth.KmlObject}
 */
google.earth.KmlContainer.prototype.getElementByUrl = function(url) {};

/**
 * Get an element by type.
 * @param {string} type
 * @return {!google.earth.KmlObjectList<!google.earth.KmlObject>}
 */
google.earth.KmlContainer.prototype.getElementsByType = function(type) {};

/**
 * A collection of features, such as name, description, and so on.
 * @return {!google.earth.GEFeatureContainer}
 */
google.earth.KmlContainer.prototype.getFeatures = function() {};
/**
 * @extends {google.earth.KmlContainer}
 * @constructor
 * @struct
 */
google.earth.KmlFolder = function() {};
/**
 * @extends {google.earth.KmlFolder}
 * @constructor
 * @struct
 */
google.earth.KmlLayer = function() {};
/**
 * @extends {google.earth.KmlFolder}
 * @constructor
 * @struct
 */
google.earth.KmlLayerRoot = function() {};

/**
 * Returns the layer based on the layer's ID.
 * @param {string} id
 * @return {!google.earth.KmlLayer}
 */
google.earth.KmlLayerRoot.prototype.getLayerById = function(id) {};

/**
 * Enables a layer based on its ID.
 * @param {string} id
 * @param {boolean} visibility
 * @return {void}
 */
google.earth.KmlLayerRoot.prototype.enableLayerById = function(id, visibility) {};

/**
 * Returns the drawing order for this database.
 * @return {number}
 */
google.earth.KmlLayerRoot.prototype.getDrawOrder = function() {};

/**
 * Defines the drawing order for databases.
 * Drawing order is lowest to highest.
 * Google Earth Enterprise customers can add a side database and set the drawOrder to be either before or after that of the main database.
 * Side databases default to a drawing order of 0.
 * @param {number} drawOrder
 * @return {void}
 */
google.earth.KmlLayerRoot.prototype.setDrawOrder = function(drawOrder) {};
/**
 * @extends {google.earth.KmlContainer}
 * @constructor
 * @struct
 */
google.earth.KmlDocument = function() {};

/**
 * Returns a list of elements using a particular style URL.
 * @param {string} styleUrl
 * @return {!google.earth.KmlObjectList<!google.earth.KmlObject>}
 */
google.earth.KmlDocument.prototype.getElementsByStyleUrl = function(styleUrl) {};

/**
 * Returns an array containing the style selectors present in the KML document.
 * @return {!google.earth.GEStyleSelectorContainer}
 */
google.earth.KmlDocument.prototype.getStyleSelectors = function() {};
/**
 * @extends {google.earth.KmlFeature}
 * @constructor
 * @struct
 */
google.earth.KmlPlacemark = function() {};

/**
 * The geometry associated with the placemark.
 * @return {!google.earth.KmlGeometry}
 */
google.earth.KmlPlacemark.prototype.getGeometry = function() {};

/**
 * The geometry associated with the placemark.
 * @param {!google.earth.KmlGeometry} geometry
 * @return {void}
 */
google.earth.KmlPlacemark.prototype.setGeometry = function(geometry) {};
/**
 * @constructor
 * @struct
 */
google.earth.GEAbstractBalloon = function() {};

/**
 * The ID of the balloon.
 * @return {string}
 */
google.earth.GEAbstractBalloon.prototype.getId = function() {};

/**
 * The ID of the balloon.
 * @param {string} id
 * @return {void}
 */
google.earth.GEAbstractBalloon.prototype.setId = function(id) {};

/**
 * Determines what the balloon is attached to.
 * @return {!google.earth.KmlFeature}
 */
google.earth.GEAbstractBalloon.prototype.getFeature = function() {};

/**
 * Determines what the balloon is attached to.
 * @param {!google.earth.KmlFeature} feature
 * @return {void}
 */
google.earth.GEAbstractBalloon.prototype.setFeature = function(feature) {};

/**
 * Minimum width of the balloon.
 * @return {number}
 */
google.earth.GEAbstractBalloon.prototype.getMinWidth = function() {};

/**
 * Minimum width of the balloon.
 * @param {number} minWidth
 * @return {void}
 */
google.earth.GEAbstractBalloon.prototype.setMinWidth = function(minWidth) {};

/**
 * Minimum height of the balloon.
 * @return {number}
 */
google.earth.GEAbstractBalloon.prototype.getMinHeight = function() {};

/**
 * Minimum height of the balloon.
 * @param {number} minHeight
 * @return {void}
 */
google.earth.GEAbstractBalloon.prototype.setMinHeight = function(minHeight) {};

/**
 * Maximum width of the balloon.
 * @return {number}
 */
google.earth.GEAbstractBalloon.prototype.getMaxWidth = function() {};

/**
 * Maximum width of the balloon.
 * @param {number} maxWidth
 * @return {void}
 */
google.earth.GEAbstractBalloon.prototype.setMaxWidth = function(maxWidth) {};

/**
 * Maximum height of the balloon.
 * @return {number}
 */
google.earth.GEAbstractBalloon.prototype.getMaxHeight = function() {};

/**
 * Maximum height of the balloon.
 * @param {number} maxHeight
 * @return {void}
 */
google.earth.GEAbstractBalloon.prototype.setMaxHeight = function(maxHeight) {};

/**
 * When true, the balloon frame is displayed with a button that the user
 * can click to close the balloon. When false, the balloon frame is just 
 * a plain frame.  
 * 
 * Default is true.
 * @return {boolean}
 */
google.earth.GEAbstractBalloon.prototype.getCloseButtonEnabled = function() {};

/**
 * When true, the balloon frame is displayed with a button that the user
 * can click to close the balloon. When false, the balloon frame is just 
 * a plain frame.  
 * 
 * Default is true.
 * @param {boolean} closeButtonEnabled
 * @return {void}
 */
google.earth.GEAbstractBalloon.prototype.setCloseButtonEnabled = function(closeButtonEnabled) {};
/**
 * @extends {google.earth.GEAbstractBalloon}
 * @constructor
 * @struct
 */
google.earth.GEFeatureBalloon = function() {};
/**
 * @extends {google.earth.GEAbstractBalloon}
 * @constructor
 * @struct
 */
google.earth.GEHtmlBalloon = function() {};

/**
 * The color of the text in the balloon.
 * This must be set using the HTML hex format #RRGGBB.
 * If not set, it is interpreted as #000000.
 * @return {string}
 */
google.earth.GEHtmlBalloon.prototype.getForegroundColor = function() {};

/**
 * The color of the text in the balloon.
 * This must be set using the HTML hex format #RRGGBB.
 * If not set, it is interpreted as #000000.
 * @param {string} foregroundColor
 * @return {void}
 */
google.earth.GEHtmlBalloon.prototype.setForegroundColor = function(foregroundColor) {};

/**
 * The background color of the balloon.
 * This must be set using the HTML hex format #RRGGBB.
 * If not set, the default is interpreted as #FFFFFF.
 * @return {string}
 */
google.earth.GEHtmlBalloon.prototype.getBackgroundColor = function() {};

/**
 * The background color of the balloon.
 * This must be set using the HTML hex format #RRGGBB.
 * If not set, the default is interpreted as #FFFFFF.
 * @param {string} backgroundColor
 * @return {void}
 */
google.earth.GEHtmlBalloon.prototype.setBackgroundColor = function(backgroundColor) {};
/**
 * @extends {google.earth.GEHtmlBalloon}
 * @constructor
 * @struct
 */
google.earth.GEHtmlDivBalloon = function() {};

/**
 * An HTMLDivElement to be used as the contents of the balloon.
 * When the balloon is shown, the HTMLDivElement is attached to the balloon element in the web page.
 * You can manipulate this balloon using ordinary HTML DOM techniques.
 * @return {!HTMLDivElement}
 */
google.earth.GEHtmlDivBalloon.prototype.getContentDiv = function() {};

/**
 * An HTMLDivElement to be used as the contents of the balloon.
 * When the balloon is shown, the HTMLDivElement is attached to the balloon element in the web page.
 * You can manipulate this balloon using ordinary HTML DOM techniques.
 * @param {!HTMLElement} contentDiv
 * @return {void}
 */
google.earth.GEHtmlDivBalloon.prototype.setContentDiv = function(contentDiv) {};
/**
 * @extends {google.earth.GEHtmlBalloon}
 * @constructor
 * @struct
 */
google.earth.GEHtmlStringBalloon = function() {};

/**
 * You can include any HTML using the contentString property.
 * When the balloon is visible, the content specified in contentString property,
 * is inserted directly into the balloon element in the web page.
 * @return {string}
 */
google.earth.GEHtmlStringBalloon.prototype.getContentString = function() {};

/**
 * You can include any HTML using the contentString property.
 * When the balloon is visible, the content specified in contentString property,
 * is inserted directly into the balloon element in the web page.
 * @param {string} contentString
 * @return {void}
 */
google.earth.GEHtmlStringBalloon.prototype.setContentString = function(contentString) {};
/**
 * @constructor
 * @struct
 */
google.earth.GEControl = function() {};
/**
 * @extends {google.earth.GEControl}
 * @constructor
 * @struct
 */
google.earth.GETimeControl = function() {};

/**
 * Whether the time slider is visible or not.
 * @return {?}
 */
google.earth.GETimeControl.prototype.getVisibility = function() {};

/**
 * Specifies whether the control is visible or hidden.
 * @param {?} visibility
 * @return {void}
 */
google.earth.GETimeControl.prototype.setVisibility = function(visibility) {};

/**
 * Returns the clock rate that the plugin would use, if the play button on the time slider UI was pressed.
 * This rate is calculated by the plugin based on the time range currently present in the slider.
 * @return {number}
 */
google.earth.GETimeControl.prototype.getCalculatedRate = function() {};

/**
 * Returns a KmlTimeSpan object encompassing the earliest and latest times present in the time slider.
 * For more information, refer to the Time chapter of the Developer's Guide.
 * @return {!google.earth.KmlTimeSpan}
 */
google.earth.GETimeControl.prototype.getExtents = function() {};

/**
 * Returns an array containing the KmlTimeStamp objects associated with the historical imagery available in this view.
 * @return {!google.earth.KmlObjectList<!google.earth.KmlTimeStamp>}
 */
google.earth.GETimeControl.prototype.getAvailableImageDates = function() {};
/**
 * @constructor
 * @struct
 */
google.earth.GEPlugin = function() {};
 /** @type {?} */
google.earth.GEPlugin.prototype.ALTITUDE_CLAMP_TO_GROUND;
 /** @type {?} */
google.earth.GEPlugin.prototype.ALTITUDE_RELATIVE_TO_GROUND;
 /** @type {?} */
google.earth.GEPlugin.prototype.ALTITUDE_ABSOLUTE;
 /** @type {?} */
google.earth.GEPlugin.prototype.ALTITUDE_CLAMP_TO_SEA_FLOOR;
 /** @type {?} */
google.earth.GEPlugin.prototype.ALTITUDE_RELATIVE_TO_SEA_FLOOR;
 /** @type {?} */
google.earth.GEPlugin.prototype.REFRESH_ON_CHANGE;
 /** @type {?} */
google.earth.GEPlugin.prototype.REFRESH_ON_INTERVAL;
 /** @type {?} */
google.earth.GEPlugin.prototype.REFRESH_ON_EXPIRE;
 /** @type {?} */
google.earth.GEPlugin.prototype.VIEW_REFRESH_NEVER;
 /** @type {?} */
google.earth.GEPlugin.prototype.VIEW_REFRESH_ON_REQUEST;
 /** @type {?} */
google.earth.GEPlugin.prototype.VIEW_REFRESH_ON_STOP;
 /** @type {?} */
google.earth.GEPlugin.prototype.VIEW_REFRESH_ON_REGION;
 /** @type {?} */
google.earth.GEPlugin.prototype.UNITS_FRACTION;
 /** @type {?} */
google.earth.GEPlugin.prototype.UNITS_PIXELS;
 /** @type {?} */
google.earth.GEPlugin.prototype.UNITS_INSET_PIXELS;
 /** @type {?} */
google.earth.GEPlugin.prototype.COLOR_NORMAL;
 /** @type {?} */
google.earth.GEPlugin.prototype.COLOR_RANDOM;
 /** @type {?} */
google.earth.GEPlugin.prototype.COLOR_INHERIT;
 /** @type {?} */
google.earth.GEPlugin.prototype.MAP_TYPE_EARTH;
 /** @type {?} */
google.earth.GEPlugin.prototype.MAP_TYPE_SKY;
 /** @type {?} */
google.earth.GEPlugin.prototype.VISIBILITY_HIDE;
 /** @type {?} */
google.earth.GEPlugin.prototype.VISIBILITY_SHOW;
 /** @type {?} */
google.earth.GEPlugin.prototype.VISIBILITY_AUTO;
 /** @type {number} */
google.earth.GEPlugin.prototype.SPEED_TELEPORT;
 /** @type {string} */
google.earth.GEPlugin.prototype.LAYER_TERRAIN;
 /** @type {string} */
google.earth.GEPlugin.prototype.LAYER_ROADS;
 /** @type {string} */
google.earth.GEPlugin.prototype.LAYER_BUILDINGS;
 /** @type {string} */
google.earth.GEPlugin.prototype.LAYER_BUILDINGS_LOW_RESOLUTION;
 /** @type {string} */
google.earth.GEPlugin.prototype.LAYER_BORDERS;
 /** @type {string} */
google.earth.GEPlugin.prototype.LAYER_TREES;
 /** @type {?} */
google.earth.GEPlugin.prototype.HIT_TEST_GLOBE;
 /** @type {?} */
google.earth.GEPlugin.prototype.HIT_TEST_TERRAIN;
 /** @type {?} */
google.earth.GEPlugin.prototype.HIT_TEST_BUILDINGS;
 /** @type {?} */
google.earth.GEPlugin.prototype.OPTION_STATE_DEFAULT;
 /** @type {?} */
google.earth.GEPlugin.prototype.OPTION_STATE_ENABLED;
 /** @type {?} */
google.earth.GEPlugin.prototype.OPTION_STATE_DISABLED;
 /** @type {?} */
google.earth.GEPlugin.prototype.OPTION_SUNLIGHT;
 /** @type {?} */
google.earth.GEPlugin.prototype.OPTION_HISTORICAL_IMAGERY;
 /** @type {?} */
google.earth.GEPlugin.prototype.OPTION_STREET_VIEW;
 /** @type {?} */
google.earth.GEPlugin.prototype.LIST_ITEM_CHECK;
 /** @type {?} */
google.earth.GEPlugin.prototype.LIST_ITEM_CHECK_OFF_ONLY;
 /** @type {?} */
google.earth.GEPlugin.prototype.LIST_ITEM_CHECK_HIDE_CHILDREN;
 /** @type {?} */
google.earth.GEPlugin.prototype.LIST_ITEM_RADIO_FOLDER;
 /** @type {?} */
google.earth.GEPlugin.prototype.NAVIGATION_CONTROL_LARGE;
 /** @type {?} */
google.earth.GEPlugin.prototype.NAVIGATION_CONTROL_SMALL;

/**
 * Parse a string of KML and return a handle to the root of the KML object structure that was created.
 * @param {string} kml
 * @return {!google.earth.KmlObject}
 */
google.earth.GEPlugin.prototype.parseKml = function(kml) {};

/**
 * Get an element by ID. This is functionally equivalent to getElementByUrl with an unspecified base URL.
 * 
 * For example: getElementByUrl('#foo').
 * 
 * Usage is when finding objects created with JavaScript, which have unspecified base URLs.
 * The object must be a descendant of the DOM before it can be found.
 * @param {string} id
 * @return {!google.earth.KmlObject}
 */
google.earth.GEPlugin.prototype.getElementById = function(id) {};

/**
 * Get an element by URL. A URL consists of the base address and the ID, joined with the # character.
 * 
 * For example: http://www.google.com/bar.kml#here_be_monsters 
 * 
 * This applies to objects that are fetched.
 * In the case of plugin created objects, the URL is simply #foo.
 * The object must be a descendant of the DOM before it can be found.
 * @param {string} url
 * @return {!google.earth.KmlObject}
 */
google.earth.GEPlugin.prototype.getElementByUrl = function(url) {};

/**
 * Get a list of elements by type.
 * @return {!google.earth.KmlObjectList<!google.earth.KmlObject>}
 */
google.earth.GEPlugin.prototype.getElementsByType = function() {};

/**
 * Creates a placemark on the globe.
 * A Placemark is a feature with associated Geometry.
 * A Placemark with a Point has an icon associated with it that marks a point on the Earth in the 3D viewer.
 * (In the Google Earth 3D viewer, a Point Placemark is the only object you can click or roll over.
 * Other Geometry objects do not have an icon in the 3D viewer.
 * To allow the user to click in the 3D viewer, you would need to create a MultiGeometry object that contains both a Point and the other Geometry object.)
 * @param {string} id
 * @return {!google.earth.KmlPlacemark}
 */
google.earth.GEPlugin.prototype.createPlacemark = function(id) {};

/**
 * Creates a point on the globe. Specifies the geographic location defined by longitude, latitude, and (optional) altitude.
 * @param {string} id
 * @return {!google.earth.KmlPoint}
 */
google.earth.GEPlugin.prototype.createPoint = function(id) {};

/**
 * Creates a line string on Google Earth.
 * @param {string} id
 * @return {!google.earth.KmlLineString}
 */
google.earth.GEPlugin.prototype.createLineString = function(id) {};

/**
 * Creates a folder. 
 * A KMLFolder is used to arrange other features hierarchically (Folders, Placemarks, NetworkLinks, or Overlays).
 * A feature is visible only if it and all its ancestors are visible.
 * @param {string} id
 * @return {!google.earth.KmlFolder}
 */
google.earth.GEPlugin.prototype.createFolder = function(id) {};

/**
 * Creates level of detail (LOD).
 * LOD describes the size of the projected region on the screen that is required in order for the region to be considered active.
 * Also specifies the size of the pixel ramp used for fading in (from transparent to opaque) and fading out (from opaque to transparent).
 * @param {string} id
 * @return {!google.earth.KmlLod}
 */
google.earth.GEPlugin.prototype.createLod = function(id) {};

/**
 * Creates a LatLonBox, a bounding box that describes an area of interest defined by geographic coordinates and altitudes.
 * @param {string} id
 * @return {!google.earth.KmlLatLonBox}
 */
google.earth.GEPlugin.prototype.createLatLonBox = function(id) {};

/**
 * Creates a LatLonAltBox, a bounding box that describes an area of interest defined by geographic coordinates and altitudes.
 * @param {string} id
 * @return {!google.earth.KmlLatLonAltBox}
 */
google.earth.GEPlugin.prototype.createLatLonAltBox = function(id) {};

/**
 * Creates a Document. A Document is a container for features and styles.
 * @param {string} id
 * @return {!google.earth.KmlDocument}
 */
google.earth.GEPlugin.prototype.createDocument = function(id) {};

/**
 * Creates a Region in Google Earth.
 * A Region contains a bounding box that describes an area of interest defined by geographic coordinates and altitudes.
 * @param {string} id
 * @return {!google.earth.KmlRegion}
 */
google.earth.GEPlugin.prototype.createRegion = function(id) {};

/**
 * Specifies the exact coordinates of the Model's origin in latitude, longitude, and altitude.
 * Latitude and longitude measurements are standard lat-lon projection with WGS84 datum.
 * Altitude is distance above the earth's surface, in meters, and is interpreted according to altitudeMode.
 * @param {string} id
 * @return {!google.earth.KmlLocation}
 */
google.earth.GEPlugin.prototype.createLocation = function(id) {};

/**
 * Sets the rotation of a 3D model's coordinate system to position the object in Google Earth.
 * @param {string} id
 * @return {!google.earth.KmlOrientation}
 */
google.earth.GEPlugin.prototype.createOrientation = function(id) {};

/**
 * Sets the scale of a model along the x, y, and z axes in the model's coordinate space.
 * @param {string} id
 * @return {!google.earth.KmlScale}
 */
google.earth.GEPlugin.prototype.createScale = function(id) {};

/**
 * Creates a model.
 * A model is a 3D object described in a COLLADA file.
 * COLLADA files have a .dae file extension.
 * Models are created in their own coordinate space and then located, positioned, and scaled in Google Earth.
 * @param {string} id
 * @return {!google.earth.KmlModel}
 */
google.earth.GEPlugin.prototype.createModel = function(id) {};

/**
 * A Style defines an addressable style group that can be referenced by StyleMaps and features.
 * @param {string} id
 * @return {!google.earth.KmlStyle}
 */
google.earth.GEPlugin.prototype.createStyle = function(id) {};

/**
 * Creates a LinearRing.
 * A LinearRing defines a closed line string, typically the outer boundary of a Polygon.
 * Optionally, a LinearRing can also be used as the inner boundary of a Polygon to create holes in the Polygon.
 * @param {string} id
 * @return {!google.earth.KmlLinearRing}
 */
google.earth.GEPlugin.prototype.createLinearRing = function(id) {};

/**
 * Creates a Polygon. A Polygon is defined by an outer boundary and 0 or more inner boundaries.
 * @param {string} id
 * @return {!google.earth.KmlPolygon}
 */
google.earth.GEPlugin.prototype.createPolygon = function(id) {};

/**
 * Creates an Icon. An icon defines an image associated with an Icon style or overlay.
 * @param {string} id
 * @return {!google.earth.KmlIcon}
 */
google.earth.GEPlugin.prototype.createIcon = function(id) {};

/**
 * Creates a Link.
 * A Link specifies the location of KML files fetched by network links, image files used in any overlay, or model files used with the Model object.
 * @param {string} id
 * @return {!google.earth.KmlLink}
 */
google.earth.GEPlugin.prototype.createLink = function(id) {};

/**
 * Creates a GroundOverlay.
 * A GroundOverlay draws an image overlay draped onto the terrain.
 * @param {string} id
 * @return {!google.earth.KmlGroundOverlay}
 */
google.earth.GEPlugin.prototype.createGroundOverlay = function(id) {};

/**
 * Creates a NetworkLink.
 * A NetworkLink references a KML file or KMZ archive on a local or remote network.
 * @param {string} id
 * @return {!google.earth.KmlNetworkLink}
 */
google.earth.GEPlugin.prototype.createNetworkLink = function(id) {};

/**
 * Creates a ScreenOverlay.
 * A ScreenOverlay draws an image overlay fixed to the screen.
 * @param {string} id
 * @return {!google.earth.KmlScreenOverlay}
 */
google.earth.GEPlugin.prototype.createScreenOverlay = function(id) {};

/**
 * Creates a container for one or more geometry primitives associated with the same feature.
 * @param {string} id
 * @return {!google.earth.KmlMultiGeometry}
 */
google.earth.GEPlugin.prototype.createMultiGeometry = function(id) {};

/**
 * Creates a StyleMap.
 * A StyleMap maps between two different icon styles.
 * Typically, a StyleMap is used to provide separate normal and highlighted styles for a Placemark, so that the highlighted version appears when the user mouses over the icon in Google Earth.
 * @param {string} id
 * @return {!google.earth.KmlStyleMap}
 */
google.earth.GEPlugin.prototype.createStyleMap = function(id) {};

/**
 * Creates a new LookAt.
 * A LookAt element positions the camera view in relation to an object that is being viewed.
 * @param {string} id
 * @return {!google.earth.KmlLookAt}
 */
google.earth.GEPlugin.prototype.createLookAt = function(id) {};

/**
 * Creates a new Camera.
 * This element positions the camera relative to the Earth's surface and defines the view direction.
 * @param {string} id
 * @return {!google.earth.KmlCamera}
 */
google.earth.GEPlugin.prototype.createCamera = function(id) {};

/**
 * Creates a new viewer options object.
 * @param {string} id
 * @return {!google.earth.KmlViewerOptions}
 */
google.earth.GEPlugin.prototype.createViewerOptions = function(id) {};

/**
 * Create a KmlTimeStamp object.
 * For more information, refer to the Time chapter of the Google Earth API developer's guide.
 * @param {string} id
 * @return {!google.earth.KmlTimeStamp}
 */
google.earth.GEPlugin.prototype.createTimeStamp = function(id) {};

/**
 * Create a KmlTimeSpan object.
 * For more information, refer to the Time chapter of the Google Earth API developer's guide.
 * @param {string} id
 * @return {!google.earth.KmlTimeSpan}
 */
google.earth.GEPlugin.prototype.createTimeSpan = function(id) {};

/**
 * Creates a Feature balloon.
 * @param {string} id
 * @return {!google.earth.GEFeatureBalloon}
 */
google.earth.GEPlugin.prototype.createFeatureBalloon = function(id) {};

/**
 * Creates an HTML string balloon.
 * @param {string} id
 * @return {!google.earth.GEHtmlStringBalloon}
 */
google.earth.GEPlugin.prototype.createHtmlStringBalloon = function(id) {};

/**
 * Creates an Html Div Balloon.
 * @param {string} id
 * @return {!google.earth.GEHtmlDivBalloon}
 */
google.earth.GEPlugin.prototype.createHtmlDivBalloon = function(id) {};

/**
 * Returns the currently active balloon, or null.
 * @return {!google.earth.GEAbstractBalloon}
 */
google.earth.GEPlugin.prototype.getBalloon = function() {};

/**
 * Sets the given balloon as the active balloon, replacing any existing active balloon.
 * If the given feature is visible, then the balloon is displayed. Otherwise, the balloon is hidden.
 * 
 * If the argument is null, then any existing active balloon will be hidden.
 * @param {!google.earth.GEAbstractBalloon} newActiveBalloon
 * @return {void}
 */
google.earth.GEPlugin.prototype.setBalloon = function(newActiveBalloon) {};

/**
 * Used for debugging purposes; if this value is not equal to the value returned by getPluginVersion then there is a misconfiguration on the end user's system.
 * This check is automatically done during plugin instantiation.
 * @return {string}
 */
google.earth.GEPlugin.prototype.getEarthVersion = function() {};

/**
 * The version of the Google Earth Plug-in installed on the end user's machine.
 * @return {string}
 */
google.earth.GEPlugin.prototype.getPluginVersion = function() {};

/**
 * The options used to manipulate the behavior of the Google Earth plugin.
 * @return {!google.earth.GEOptions}
 */
google.earth.GEPlugin.prototype.getOptions = function() {};

/**
 * The time class used to manipulate the behavior of the Google Earth plugin time.
 * @return {!google.earth.GETime}
 */
google.earth.GEPlugin.prototype.getTime = function() {};

/**
 * Controls the window options.
 * @return {!google.earth.GEWindow}
 */
google.earth.GEPlugin.prototype.getWindow = function() {};

/**
 * Controls the globe behavior.
 * @return {!google.earth.GEGlobe}
 */
google.earth.GEPlugin.prototype.getGlobe = function() {};

/**
 * Displays the dawn to dusk views.
 * @return {!google.earth.GESun}
 */
google.earth.GEPlugin.prototype.getSun = function() {};

/**
 * Controls built-in layer behavior.
 * @return {!google.earth.KmlLayerRoot}
 */
google.earth.GEPlugin.prototype.getLayerRoot = function() {};

/**
 * Controls the plugin viewport.
 * @return {!google.earth.GEView}
 */
google.earth.GEPlugin.prototype.getView = function() {};

/**
 * Controls the navigation controls on the globe.
 * @return {!google.earth.GENavigationControl}
 */
google.earth.GEPlugin.prototype.getNavigationControl = function() {};

/**
 * The top-level features currently in the Earth object.
 * @return {!google.earth.GEFeatureContainer}
 */
google.earth.GEPlugin.prototype.getFeatures = function() {};

/**
 * Exposes functionality for interacting with KML tours.
 * @return {!google.earth.GETourPlayer}
 */
google.earth.GEPlugin.prototype.getTourPlayer = function() {};

/**
 * Exposes functionality for interacting with photo overlays.
 * @return {!google.earth.GEPhotoOverlayViewer}
 */
google.earth.GEPlugin.prototype.getPhotoOverlayViewer = function() {};

/**
 * Returns a number between 0 and 100 (inclusive) that indicates the progress of the streaming of imagery for the current view.
 * 
 * A value of 100 means that the imagery is completely streamed in.
 * @return {number}
 */
google.earth.GEPlugin.prototype.getStreamingPercent = function() {};
