/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/postmark/index.d.ts:
/**
 * @record
 * @struct
 */
function PostmarkError() {}
 /** @type {number} */
PostmarkError.prototype.status;
 /** @type {string} */
PostmarkError.prototype.message;
 /** @type {number} */
PostmarkError.prototype.code;
/**
 * @record
 * @struct
 */
function PostmarkMessageHeader() {}
 /** @type {string} */
PostmarkMessageHeader.prototype.Name;
 /** @type {string} */
PostmarkMessageHeader.prototype.Value;
/**
 * @record
 * @struct
 */
function PostmarkAttachment() {}
 /** @type {string} */
PostmarkAttachment.prototype.Content;
 /** @type {string} */
PostmarkAttachment.prototype.Name;
 /** @type {string} */
PostmarkAttachment.prototype.ContentType;
/**
 * @record
 * @struct
 */
function Filter() {}
 /** @type {number} */
Filter.prototype.count;
 /** @type {number} */
Filter.prototype.offset;
/**
 * @record
 * @struct
 */
function PostmarkMessageWithTemplate() {}
 /** @type {string} */
PostmarkMessageWithTemplate.prototype.To;
 /** @type {string} */
PostmarkMessageWithTemplate.prototype.From;
 /** @type {string} */
PostmarkMessageWithTemplate.prototype.Cc;
 /** @type {string} */
PostmarkMessageWithTemplate.prototype.Bcc;
 /** @type {string} */
PostmarkMessageWithTemplate.prototype.ReplyTo;
 /** @type {string} */
PostmarkMessageWithTemplate.prototype.TemplateId;
 /** @type {?} */
PostmarkMessageWithTemplate.prototype.TemplateModel;
 /** @type {string} */
PostmarkMessageWithTemplate.prototype.Tag;
 /** @type {string} */
PostmarkMessageWithTemplate.prototype.Subject;
 /** @type {boolean} */
PostmarkMessageWithTemplate.prototype.TrackOpens;
 /** @type {string} */
PostmarkMessageWithTemplate.prototype.TrackLinks;
 /** @type {!Array<?>} */
PostmarkMessageWithTemplate.prototype.Headers;
/**
 * @record
 * @struct
 */
function PostmarkMessage() {}
 /** @type {string} */
PostmarkMessage.prototype.To;
 /** @type {string} */
PostmarkMessage.prototype.From;
 /** @type {string} */
PostmarkMessage.prototype.Cc;
 /** @type {string} */
PostmarkMessage.prototype.Bcc;
 /** @type {string} */
PostmarkMessage.prototype.ReplyTo;
 /** @type {string} */
PostmarkMessage.prototype.Tag;
 /** @type {string} */
PostmarkMessage.prototype.Subject;
 /** @type {string} */
PostmarkMessage.prototype.HTMLBody;
 /** @type {string} */
PostmarkMessage.prototype.TextBody;
 /** @type {boolean} */
PostmarkMessage.prototype.TrackOpens;
 /** @type {string} */
PostmarkMessage.prototype.TrackLinks;
 /** @type {!Array<?>} */
PostmarkMessage.prototype.Headers;
 /** @type {!Array<?>} */
PostmarkMessage.prototype.Attachments;
/**
 * @record
 * @struct
 */
function Sender() {}
 /** @type {string} */
Sender.prototype.Color;
 /** @type {boolean} */
Sender.prototype.RawEmailEnabled;
 /** @type {boolean} */
Sender.prototype.SmtpApiActivated;
 /** @type {string} */
Sender.prototype.DeliveryHookUrl;
 /** @type {string} */
Sender.prototype.InboundHookUrl;
 /** @type {boolean} */
Sender.prototype.BounceHookUrl;
 /** @type {boolean} */
Sender.prototype.IncludeBounceContentInHook;
 /** @type {boolean} */
Sender.prototype.OpenHookUrl;
 /** @type {boolean} */
Sender.prototype.PostFirstOpenOnly;
 /** @type {boolean} */
Sender.prototype.TrackOpens;
 /** @type {string} */
Sender.prototype.TrackLinks;
 /** @type {string} */
Sender.prototype.InboundDomain;
 /** @type {number} */
Sender.prototype.InboundSpamThreshold;
/**
 * @record
 * @struct
 */
function TemplateValidator() {}
 /** @type {string} */
TemplateValidator.prototype.Subject;
 /** @type {string} */
TemplateValidator.prototype.HtmlBody;
 /** @type {string} */
TemplateValidator.prototype.TextBody;
 /** @type {?} */
TemplateValidator.prototype.TestRenderModel;
 /** @type {boolean} */
TemplateValidator.prototype.InlineCssForHtmlTestRender;

/** @typedef {?} */
var PostmarkCallback;
/**
 * @record
 * @struct
 */
function SimpleOptions() {}
 /** @type {boolean} */
SimpleOptions.prototype.ssl;
 /** @type {string} */
SimpleOptions.prototype.requestHost;
/**
 * @extends {SimpleOptions}
 * @record
 * @struct
 */
function Options() {}

/**
 * @param {?} options
 * @return {?}
 */
Options.prototype.requestFactory = function(options) {};

/**
 * @constructor
 * @struct
 * @param {string} serverKey
 * @param {?} options
 */
function Client(serverKey, options) {}

/**
 * @param {?} message
 * @param {?} callback
 * @return {void}
 */
Client.prototype.send = function(message, callback) {};

/**
 * @param {?} message
 * @param {?} callback
 * @return {void}
 */
Client.prototype.sendEmailWithTemplate = function(message, callback) {};

/**
 * @param {!Array<?>} message
 * @param {?} callback
 * @return {void}
 */
Client.prototype.batch = function(message, callback) {};

/**
 * @param {?} message
 * @param {?} callback
 * @return {void}
 */
Client.prototype.sendEmail = function(message, callback) {};

/**
 * @param {!Array<?>} message
 * @param {?} callback
 * @return {void}
 */
Client.prototype.sendEmailBatch = function(message, callback) {};

/**
 * @param {?} callback
 * @return {void}
 */
Client.prototype.getDeliveryStatistics = function(callback) {};

/**
 * @param {?} filter
 * @param {?} callback
 * @return {void}
 */
Client.prototype.getBounces = function(filter, callback) {};

/**
 * @param {number} id
 * @param {?} callback
 * @return {void}
 */
Client.prototype.getBounce = function(id, callback) {};

/**
 * @param {number} id
 * @param {?} callback
 * @return {void}
 */
Client.prototype.getBounceDump = function(id, callback) {};

/**
 * @param {number} id
 * @param {?} callback
 * @return {void}
 */
Client.prototype.activateBounce = function(id, callback) {};

/**
 * @param {?} callback
 * @return {void}
 */
Client.prototype.getBounceTags = function(callback) {};

/**
 * @param {?} callback
 * @return {void}
 */
Client.prototype.getServer = function(callback) {};

/**
 * @template T
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
Client.prototype.editServer = function(options, callback) {};

/**
 * @param {?} filter
 * @param {?} callback
 * @return {void}
 */
Client.prototype.getOutboundMessages = function(filter, callback) {};

/**
 * @param {number} id
 * @param {?} callback
 * @return {void}
 */
Client.prototype.getOutboundMessageDetails = function(id, callback) {};

/**
 * @param {?} filter
 * @param {?} callback
 * @return {void}
 */
Client.prototype.getMessageOpens = function(filter, callback) {};

/**
 * @param {number} id
 * @param {?} filter
 * @param {?} callback
 * @return {void}
 */
Client.prototype.getMessageOpensForSingleMessage = function(id, filter, callback) {};

/**
 * @param {?} filter
 * @param {?} callback
 * @return {void}
 */
Client.prototype.getInboundMessages = function(filter, callback) {};

/**
 * @param {number} id
 * @param {?} callback
 * @return {void}
 */
Client.prototype.getInboundMessageDetails = function(id, callback) {};

/**
 * @param {number} id
 * @param {?} callback
 * @return {void}
 */
Client.prototype.bypassBlockedInboundMessage = function(id, callback) {};

/**
 * @param {number} id
 * @param {?} callback
 * @return {void}
 */
Client.prototype.retryInboundHookForMessage = function(id, callback) {};

/**
 * @param {?} filter
 * @param {?} callback
 * @return {void}
 */
Client.prototype.getOuboundOverview = function(filter, callback) {};

/**
 * @template T
 * @param {?} templateObject
 * @param {?} callback
 * @return {void}
 */
Client.prototype.validateTemplate = function(templateObject, callback) {};
/**
 * @record
 * @struct
 */
function CreateSignature() {}
 /** @type {string} */
CreateSignature.prototype.FromEmail;
 /** @type {string} */
CreateSignature.prototype.Name;
 /** @type {string} */
CreateSignature.prototype.ReplyToEmail;
 /** @type {string} */
CreateSignature.prototype.ReturnPathDomain;
/**
 * @record
 * @struct
 */
function CreateServer() {}
 /** @type {string} */
CreateServer.prototype.Name;
 /** @type {string} */
CreateServer.prototype.Color;
 /** @type {boolean} */
CreateServer.prototype.RawEmailEnabled;
 /** @type {boolean} */
CreateServer.prototype.SmtpApiActivated;
 /** @type {string} */
CreateServer.prototype.DeliveryHookUrl;
 /** @type {string} */
CreateServer.prototype.InboundHookUrl;
 /** @type {string} */
CreateServer.prototype.BounceHookUrl;
 /** @type {boolean} */
CreateServer.prototype.IncludeBounceContentInHook;
 /** @type {string} */
CreateServer.prototype.OpenHookUrl;
 /** @type {boolean} */
CreateServer.prototype.PostFirstOpenOnly;
 /** @type {boolean} */
CreateServer.prototype.TrackOpens;
 /** @type {string} */
CreateServer.prototype.TrackLinks;
 /** @type {string} */
CreateServer.prototype.InboundDomain;
 /** @type {number} */
CreateServer.prototype.InboundSpamThreshold;
/**
 * @record
 * @struct
 */
function CreateDomain() {}
 /** @type {string} */
CreateDomain.prototype.Name;
 /** @type {string} */
CreateDomain.prototype.ReturnPathDomain;

/**
 * @constructor
 * @struct
 * @param {string} apiKey
 * @param {?} options
 */
function AdminClient(apiKey, options) {}

/**
 * @param {?} query
 * @param {?} callback
 * @return {void}
 */
AdminClient.prototype.listSenderSignatures = function(query, callback) {};

/**
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
AdminClient.prototype.createSenderSignature = function(options, callback) {};

/**
 * @template T
 * @param {number} id
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
AdminClient.prototype.editSenderSignature = function(id, options, callback) {};

/**
 * @param {number} id
 * @param {?} callback
 * @return {void}
 */
AdminClient.prototype.deleteSenderSignature = function(id, callback) {};

/**
 * @param {number} id
 * @param {?} callback
 * @return {void}
 */
AdminClient.prototype.resendSenderSignatureConfirmation = function(id, callback) {};

/**
 * @param {number} id
 * @param {?} callback
 * @return {void}
 */
AdminClient.prototype.verifySenderSignatureSPF = function(id, callback) {};

/**
 * @param {number} id
 * @param {?} callback
 * @return {void}
 */
AdminClient.prototype.requestNewDKIMForSenderSignature = function(id, callback) {};

/**
 * @param {number} id
 * @param {?} callback
 * @return {void}
 */
AdminClient.prototype.getServer = function(id, callback) {};

/**
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
AdminClient.prototype.createServer = function(options, callback) {};

/**
 * @template T
 * @param {number} id
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
AdminClient.prototype.editServer = function(id, options, callback) {};

/**
 * @param {number} id
 * @param {?} callback
 * @return {void}
 */
AdminClient.prototype.deleteServer = function(id, callback) {};

/**
 * @param {?} query
 * @param {?} callback
 * @return {void}
 */
AdminClient.prototype.listServers = function(query, callback) {};

/**
 * @param {?} query
 * @param {?} callback
 * @return {void}
 */
AdminClient.prototype.listDomains = function(query, callback) {};

/**
 * @param {number} id
 * @param {?} callback
 * @return {void}
 */
AdminClient.prototype.getDomain = function(id, callback) {};

/**
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
AdminClient.prototype.createDomain = function(options, callback) {};

/**
 * @template T
 * @param {number} id
 * @param {?} options
 * @param {?} callback
 * @return {void}
 */
AdminClient.prototype.editDomain = function(id, options, callback) {};

/**
 * @param {number} id
 * @param {?} callback
 * @return {void}
 */
AdminClient.prototype.deleteDomain = function(id, callback) {};

/**
 * @param {number} id
 * @param {?} callback
 * @return {void}
 */
AdminClient.prototype.verifyDomainSPF = function(id, callback) {};

/**
 * @param {number} id
 * @param {?} callback
 * @return {void}
 */
AdminClient.prototype.rotateDKIMForDomain = function(id, callback) {};
/**
 * @record
 * @struct
 */
function ClientClass() {}

/* TODO: ConstructSignature:  */
/**
 * @record
 * @struct
 */
function AdminClientClass() {}

/* TODO: ConstructSignature:  */
/**
 * @record
 * @struct
 */
function Postmark() {}

/* TODO: CallSignature:  */
 /** @type {?} */
Postmark.prototype.defaults;
 /** @type {?} */
Postmark.prototype.Client;
 /** @type {?} */
Postmark.prototype.AdminClient;
 /** @type {?} */
var postmark;

/* TODO: ExportAssignment in  */
