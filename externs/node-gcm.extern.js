/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/node-gcm/index.d.ts:
/**
 * @record
 * @struct
 */
function INotificationOptions() {}
 /** @type {string} */
INotificationOptions.prototype.title;
 /** @type {string} */
INotificationOptions.prototype.body;
 /** @type {string} */
INotificationOptions.prototype.icon;
 /** @type {string} */
INotificationOptions.prototype.sound;
 /** @type {string} */
INotificationOptions.prototype.badge;
 /** @type {string} */
INotificationOptions.prototype.tag;
 /** @type {string} */
INotificationOptions.prototype.color;
 /** @type {string} */
INotificationOptions.prototype.click_action;
/**
 * @record
 * @struct
 */
function IMessageOptions() {}
 /** @type {string} */
IMessageOptions.prototype.collapseKey;
 /** @type {string} */
IMessageOptions.prototype.priority;
 /** @type {boolean} */
IMessageOptions.prototype.contentAvailable;
 /** @type {boolean} */
IMessageOptions.prototype.delayWhileIdle;
 /** @type {number} */
IMessageOptions.prototype.timeToLive;
 /** @type {string} */
IMessageOptions.prototype.restrictedPackageName;
 /** @type {boolean} */
IMessageOptions.prototype.dryRun;
 /** @type {?} */
IMessageOptions.prototype.data;
 /** @type {?} */
IMessageOptions.prototype.notification;

/**
 * @constructor
 * @struct
 * @param {?=} options
 */
function Message(options) {}
 /** @type {string} */
Message.prototype.collapseKey;
 /** @type {boolean} */
Message.prototype.delayWhileIdle;
 /** @type {number} */
Message.prototype.timeToLive;
 /** @type {boolean} */
Message.prototype.dryRun;

/**
 * @param {string|!Object<string,string>} key_or_data
 * @param {string=} value
 * @return {void}
 */
Message.prototype.addData = function(key_or_data, value) {};

/**
 * @param {?|string} value_or_key
 * @param {?=} value
 * @return {void}
 */
Message.prototype.addNotification = function(value_or_key, value) {};
/**
 * @record
 * @struct
 */
function ISenderOptions() {}
 /** @type {?} */
ISenderOptions.prototype.proxy;
 /** @type {number} */
ISenderOptions.prototype.maxSockets;
 /** @type {number} */
ISenderOptions.prototype.timeout;
/**
 * @record
 * @struct
 */
function ISenderSendOptions() {}
 /** @type {number} */
ISenderSendOptions.prototype.retries;
 /** @type {number} */
ISenderSendOptions.prototype.backoff;
/**
 * @record
 * @struct
 */
function IRecipient() {}
 /** @type {string} */
IRecipient.prototype.to;
 /** @type {string} */
IRecipient.prototype.topic;
 /** @type {string} */
IRecipient.prototype.notificationKey;
 /** @type {!Array<string>} */
IRecipient.prototype.registrationIds;
 /** @type {!Array<string>} */
IRecipient.prototype.registrationTokens;

/**
 * @constructor
 * @struct
 * @param {string} key
 * @param {?=} options
 */
function Sender(key, options) {}
 /** @type {string} */
Sender.prototype.key;
 /** @type {?} */
Sender.prototype.options;

/**
 * @param {!Message} message
 * @param {(string|!Array<string>|?)} registrationIds
 * @param {function(?, ?): void|number|?} callback_or_retries_or_options
 * @param {function(?, ?): void=} callback
 * @return {void}
 */
Sender.prototype.send = function(message, registrationIds, callback_or_retries_or_options, callback) {};

/**
 * @param {!Message} message
 * @param {(string|!Array<string>|?)} registrationIds
 * @param {function(?, ?): void} callback
 * @return {void}
 */
Sender.prototype.sendNoRetry = function(message, registrationIds, callback) {};
/**
 * @record
 * @struct
 */
function IResponseBody() {}
 /** @type {number} */
IResponseBody.prototype.success;
 /** @type {number} */
IResponseBody.prototype.failure;
 /** @type {number} */
IResponseBody.prototype.canonical_ids;
 /** @type {number} */
IResponseBody.prototype.multicast_id;
 /** @type {!Array<?>} */
IResponseBody.prototype.results;
