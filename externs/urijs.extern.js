/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/urijs/index.d.ts:
/** @const */
var uri = {};
/**
 * @record
 * @struct
 */
uri.URI = function() {};

/**
 * @param {string|!uri.URI} path
 * @return {!uri.URI}
 */
uri.URI.prototype.absoluteTo = function(path) {};

/**
 * @param {string} fragment
 * @return {!uri.URI}
 */
uri.URI.prototype.addFragment = function(fragment) {};

/**
 * @param {string|!Object} qry
 * @return {!uri.URI}
 */
uri.URI.prototype.addQuery = function(qry) {};

/**
 * @param {string|!Object} qry_or_key
 * @param {?=} value
 * @return {!uri.URI}
 */
uri.URI.prototype.addSearch = function(qry_or_key, value) {};

/**
 * @param {string=} authority
 * @return {string|!uri.URI}
 */
uri.URI.prototype.authority = function(authority) {};

/**
 * @return {!uri.URI}
 */
uri.URI.prototype.clone = function() {};

/**
 * @param {boolean|string=} dir
 * @return {string|!uri.URI}
 */
uri.URI.prototype.directory = function(dir) {};

/**
 * @param {boolean|string=} domain
 * @return {string|!uri.URI}
 */
uri.URI.prototype.domain = function(domain) {};

/**
 * @param {boolean} val
 * @return {!uri.URI}
 */
uri.URI.prototype.duplicateQueryParameters = function(val) {};

/**
 * @param {(string|!uri.URI)=} url
 * @return {boolean}
 */
uri.URI.prototype.equals = function(url) {};

/**
 * @param {boolean|string=} file
 * @return {string|!uri.URI}
 */
uri.URI.prototype.filename = function(file) {};

/**
 * @param {string=} fragment
 * @return {string|!uri.URI}
 */
uri.URI.prototype.fragment = function(fragment) {};

/**
 * @param {string} prefix
 * @return {!uri.URI}
 */
uri.URI.prototype.fragmentPrefix = function(prefix) {};

/**
 * @param {string=} hash
 * @return {string|!uri.URI}
 */
uri.URI.prototype.hash = function(hash) {};

/**
 * @param {string=} host
 * @return {string|!uri.URI}
 */
uri.URI.prototype.host = function(host) {};

/**
 * @param {string=} hostname
 * @return {string|!uri.URI}
 */
uri.URI.prototype.hostname = function(hostname) {};

/**
 * @param {string=} url
 * @return {string|void}
 */
uri.URI.prototype.href = function(url) {};

/**
 * @param {string} qry
 * @return {boolean}
 */
uri.URI.prototype.is = function(qry) {};

/**
 * @return {!uri.URI}
 */
uri.URI.prototype.iso8859 = function() {};

/**
 * @return {!uri.URI}
 */
uri.URI.prototype.normalize = function() {};

/**
 * @return {!uri.URI}
 */
uri.URI.prototype.normalizeFragment = function() {};

/**
 * @return {!uri.URI}
 */
uri.URI.prototype.normalizeHash = function() {};

/**
 * @return {!uri.URI}
 */
uri.URI.prototype.normalizeHostname = function() {};

/**
 * @return {!uri.URI}
 */
uri.URI.prototype.normalizePath = function() {};

/**
 * @return {!uri.URI}
 */
uri.URI.prototype.normalizePathname = function() {};

/**
 * @return {!uri.URI}
 */
uri.URI.prototype.normalizePort = function() {};

/**
 * @return {!uri.URI}
 */
uri.URI.prototype.normalizeProtocol = function() {};

/**
 * @return {!uri.URI}
 */
uri.URI.prototype.normalizeQuery = function() {};

/**
 * @return {!uri.URI}
 */
uri.URI.prototype.normalizeSearch = function() {};

/**
 * @param {(string|!uri.URI)=} uri
 * @return {string|!uri.URI}
 */
uri.URI.prototype.origin = function(uri) {};

/**
 * @param {string=} pw
 * @return {string|!uri.URI}
 */
uri.URI.prototype.password = function(pw) {};

/**
 * @param {boolean|string=} path
 * @return {string|!uri.URI}
 */
uri.URI.prototype.path = function(path) {};

/**
 * @param {boolean|string=} path
 * @return {string|!uri.URI}
 */
uri.URI.prototype.pathname = function(path) {};

/**
 * @param {string=} port
 * @return {string|!uri.URI}
 */
uri.URI.prototype.port = function(port) {};

/**
 * @param {string=} protocol
 * @return {string|!uri.URI}
 */
uri.URI.prototype.protocol = function(protocol) {};

/**
 * @param {string|boolean|!Object=} qry
 * @return {string|!uri.URI|!Object}
 */
uri.URI.prototype.query = function(qry) {};

/**
 * @return {string}
 */
uri.URI.prototype.readable = function() {};

/**
 * @param {string} path
 * @return {!uri.URI}
 */
uri.URI.prototype.relativeTo = function(path) {};

/**
 * @param {string|!Object} qry_or_name
 * @param {string=} value
 * @return {!uri.URI}
 */
uri.URI.prototype.removeQuery = function(qry_or_name, value) {};

/**
 * @param {string|!Object} qry_or_name
 * @param {string=} value
 * @return {!uri.URI}
 */
uri.URI.prototype.removeSearch = function(qry_or_name, value) {};

/**
 * @param {string=} resource
 * @return {string|!uri.URI}
 */
uri.URI.prototype.resource = function(resource) {};

/**
 * @param {string=} protocol
 * @return {string|!uri.URI}
 */
uri.URI.prototype.scheme = function(protocol) {};

/**
 * @param {string|boolean|!Object=} qry
 * @return {string|!uri.URI|?}
 */
uri.URI.prototype.search = function(qry) {};

/**
 * @param {!Array<string>|number|string=} segments_or_position_or_segment
 * @param {string=} level
 * @return {!Array<string>|!uri.URI|string}
 */
uri.URI.prototype.segment = function(segments_or_position_or_segment, level) {};

/**
 * @param {!Array<string>|number|string=} segments_or_position_or_segment
 * @param {string=} level
 * @return {!Array<string>|!uri.URI|string}
 */
uri.URI.prototype.segmentCoded = function(segments_or_position_or_segment, level) {};

/**
 * @param {string|!Object} key_or_qry
 * @param {string=} value
 * @return {!uri.URI}
 */
uri.URI.prototype.setQuery = function(key_or_qry, value) {};

/**
 * @param {string|!Object} key_or_qry
 * @param {string=} value
 * @return {!uri.URI}
 */
uri.URI.prototype.setSearch = function(key_or_qry, value) {};

/**
 * @param {?} name
 * @param {(string|number|boolean|!Function|!RegExp|!Array<string>|!Array<number>|!Array<boolean>)=} value
 * @param {boolean=} withinArray
 * @return {boolean}
 */
uri.URI.prototype.hasQuery = function(name, value, withinArray) {};

/**
 * @param {?} name
 * @param {(string|number|boolean|!Function|!RegExp|!Array<string>|!Array<number>|!Array<boolean>)=} value
 * @param {boolean=} withinArray
 * @return {boolean}
 */
uri.URI.prototype.hasSearch = function(name, value, withinArray) {};

/**
 * @param {string=} subdomain
 * @return {string|!uri.URI}
 */
uri.URI.prototype.subdomain = function(subdomain) {};

/**
 * @param {boolean|string=} suffix
 * @return {string|!uri.URI}
 */
uri.URI.prototype.suffix = function(suffix) {};

/**
 * @param {boolean|string=} tld
 * @return {string|!uri.URI}
 */
uri.URI.prototype.tld = function(tld) {};

/**
 * @return {!uri.URI}
 */
uri.URI.prototype.unicode = function() {};

/**
 * @param {string=} userinfo
 * @return {string|!uri.URI}
 */
uri.URI.prototype.userinfo = function(userinfo) {};

/**
 * @param {string=} uname
 * @return {string|!uri.URI}
 */
uri.URI.prototype.username = function(uname) {};

/**
 * @return {string}
 */
uri.URI.prototype.valueOf = function() {};
/**
 * @record
 * @struct
 */
uri.URIOptions = function() {};
 /** @type {string} */
uri.URIOptions.prototype.protocol;
 /** @type {string} */
uri.URIOptions.prototype.username;
 /** @type {string} */
uri.URIOptions.prototype.password;
 /** @type {string} */
uri.URIOptions.prototype.hostname;
 /** @type {string} */
uri.URIOptions.prototype.port;
 /** @type {string} */
uri.URIOptions.prototype.path;
 /** @type {string} */
uri.URIOptions.prototype.query;
 /** @type {string} */
uri.URIOptions.prototype.fragment;
/**
 * @record
 * @struct
 */
uri.URIStatic = function() {};

/* TODO: CallSignature: uri */

/* TODO: CallSignature: uri */

/* TODO: ConstructSignature: uri */

/* TODO: ConstructSignature: uri */

/**
 * @param {!Object} data
 * @param {string|!Object} prop_or_qryObj
 * @param {string=} value
 * @return {!Object}
 */
uri.URIStatic.prototype.addQuery = function(data, prop_or_qryObj, value) {};

/**
 * @param {{protocol: string, username: string, password: string, hostname: string, port: string, path: string, query: string, fragment: string}} parts
 * @return {string}
 */
uri.URIStatic.prototype.build = function(parts) {};

/**
 * @param {{username: string, password: string, hostname: string, port: string}} parts
 * @return {string}
 */
uri.URIStatic.prototype.buildAuthority = function(parts) {};

/**
 * @param {{hostname: string, port: string}} parts
 * @return {string}
 */
uri.URIStatic.prototype.buildHost = function(parts) {};

/**
 * @param {!Object} qry
 * @param {boolean=} duplicates
 * @return {string}
 */
uri.URIStatic.prototype.buildQuery = function(qry, duplicates) {};

/**
 * @param {{username: string, password: string}} parts
 * @return {string}
 */
uri.URIStatic.prototype.buildUserinfo = function(parts) {};

/**
 * @param {string} path1
 * @param {string} path2
 * @return {string}
 */
uri.URIStatic.prototype.commonPath = function(path1, path2) {};

/**
 * @param {string} str
 * @return {string}
 */
uri.URIStatic.prototype.decode = function(str) {};

/**
 * @param {string} qry
 * @return {string}
 */
uri.URIStatic.prototype.decodeQuery = function(qry) {};

/**
 * @param {string} str
 * @return {string}
 */
uri.URIStatic.prototype.encode = function(str) {};

/**
 * @param {string} qry
 * @return {string}
 */
uri.URIStatic.prototype.encodeQuery = function(qry) {};

/**
 * @param {string} str
 * @return {string}
 */
uri.URIStatic.prototype.encodeReserved = function(str) {};

/**
 * @param {string} template
 * @param {!Object} vals
 * @return {!uri.URI}
 */
uri.URIStatic.prototype.expand = function(template, vals) {};

/**
 * @return {void}
 */
uri.URIStatic.prototype.iso8859 = function() {};

/**
 * @param {...(string|!uri.URI)} paths
 * @return {!uri.URI}
 */
uri.URIStatic.prototype.joinPaths = function(paths) {};

/**
 * @param {string} url
 * @return {{protocol: string, username: string, password: string, hostname: string, port: string, path: string, query: string, fragment: string}}
 */
uri.URIStatic.prototype.parse = function(url) {};

/**
 * @param {string} url
 * @param {{username: string, password: string, hostname: string, port: string}} parts
 * @return {string}
 */
uri.URIStatic.prototype.parseAuthority = function(url, parts) {};

/**
 * @param {string} url
 * @param {{hostname: string, port: string}} parts
 * @return {string}
 */
uri.URIStatic.prototype.parseHost = function(url, parts) {};

/**
 * @param {string} url
 * @return {!Object}
 */
uri.URIStatic.prototype.parseQuery = function(url) {};

/**
 * @param {string} url
 * @param {{username: string, password: string}} parts
 * @return {string}
 */
uri.URIStatic.prototype.parseUserinfo = function(url, parts) {};

/**
 * @param {!Object} data
 * @param {string|!Array<string>|!Object} prop_or_props
 * @param {string=} value
 * @return {!Object}
 */
uri.URIStatic.prototype.removeQuery = function(data, prop_or_props, value) {};

/**
 * @return {void}
 */
uri.URIStatic.prototype.unicode = function() {};

/**
 * @param {string} source
 * @param {function(string): string} func
 * @return {string}
 */
uri.URIStatic.prototype.withinString = function(source, func) {};

/**
 * @return {!uri.URI}
 */
JQuery.prototype.uri = function() {};
 /** @type {!uri.URIStatic} */
var URI;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "URI"
/** @const */
tsickle_declare_module.URI = {};

/* TODO: ExportAssignment in tsickle_declare_module.URI */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "urijs"
/** @const */
tsickle_declare_module.urijs = {};

/* TODO: ExportAssignment in tsickle_declare_module.urijs */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "urijs/src/URITemplate"
/** @const */
tsickle_declare_module.urijs_src_URITemplate = {};

/* TODO: ExportAssignment in tsickle_declare_module.urijs_src_URITemplate */
