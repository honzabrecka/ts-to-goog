/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/mixpanel/index.d.ts:
/**
 * @record
 * @struct
 */
function Mixpanel() {}
 /** @type {!Mixpanel.People} */
Mixpanel.prototype.people;

/**
 * @param {string} token
 * @param {!Object<string,?>=} config
 * @param {string=} libraryName
 * @return {!Mixpanel}
 */
Mixpanel.prototype.init = function(token, config, libraryName) {};

/**
 * @param {!Array<?>} item
 * @return {void}
 */
Mixpanel.prototype.push = function(item) {};

/**
 * @param {!Array<string>=} events
 * @return {void}
 */
Mixpanel.prototype.disable = function(events) {};

/**
 * @param {string} eventName
 * @param {!Object<string,?>=} params
 * @param {function(): void=} callback
 * @return {void}
 */
Mixpanel.prototype.track = function(eventName, params, callback) {};

/**
 * @param {string} querySelector
 * @param {string} eventName
 * @param {!Object<string,?>=} params
 * @return {void}
 */
Mixpanel.prototype.track_links = function(querySelector, eventName, params) {};

/**
 * @param {string} querySelector
 * @param {string} eventName
 * @param {!Object<string,?>=} params
 * @return {void}
 */
Mixpanel.prototype.track_forms = function(querySelector, eventName, params) {};

/**
 * @param {!Object<string,?>} params
 * @param {number=} days
 * @return {void}
 */
Mixpanel.prototype.register = function(params, days) {};

/**
 * @param {!Object<string,?>} params
 * @param {string=} defaultValue
 * @param {number=} days
 * @return {void}
 */
Mixpanel.prototype.register_once = function(params, defaultValue, days) {};

/**
 * @return {void}
 */
Mixpanel.prototype.reset = function() {};

/**
 * @param {string} propertyName
 * @return {void}
 */
Mixpanel.prototype.unregister = function(propertyName) {};

/**
 * @param {string=} id
 * @return {void}
 */
Mixpanel.prototype.identify = function(id) {};

/**
 * @return {string}
 */
Mixpanel.prototype.get_distinct_id = function() {};

/**
 * @param {string} alias
 * @param {string=} currentId
 * @return {void}
 */
Mixpanel.prototype.alias = function(alias, currentId) {};

/**
 * @param {!Object<string,?>} config
 * @return {void}
 */
Mixpanel.prototype.set_config = function(config) {};

/**
 * @return {!Object<string,?>}
 */
Mixpanel.prototype.get_config = function() {};

/**
 * @param {string} propertyName
 * @return {?}
 */
Mixpanel.prototype.get_property = function(propertyName) {};
/**
 * @record
 * @struct
 */
Mixpanel.People = function() {};

/**
 * @param {!Object<string,?>|string} keys_or_key
 * @param {function(): void|?=} callback_or_value
 * @param {function(): void=} callback
 * @return {void}
 */
Mixpanel.People.prototype.set = function(keys_or_key, callback_or_value, callback) {};

/**
 * @param {!Object<string,?>|string} keys_or_key
 * @param {function(): void|?=} callback_or_value
 * @param {function(): void=} callback
 * @return {void}
 */
Mixpanel.People.prototype.set_once = function(keys_or_key, callback_or_value, callback) {};

/**
 * @param {string|!Object<string,number>} key_or_keys
 * @param {number=} value
 * @return {void}
 */
Mixpanel.People.prototype.increment = function(key_or_keys, value) {};

/**
 * @param {!Object<string,?>|string} keys_or_key
 * @param {?=} value
 * @return {void}
 */
Mixpanel.People.prototype.append = function(keys_or_key, value) {};

/**
 * @param {number} amount
 * @param {!Object<string,?>=} params
 * @param {function(): void=} callback
 * @return {void}
 */
Mixpanel.People.prototype.track_charge = function(amount, params, callback) {};

/**
 * @return {void}
 */
Mixpanel.People.prototype.clear_charges = function() {};

/**
 * @return {void}
 */
Mixpanel.People.prototype.delete_user = function() {};
 /** @type {!Mixpanel} */
var mixpanel;
