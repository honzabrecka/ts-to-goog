/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/npm-package-arg/index.d.ts:

/**
 * Throws if the package name is invalid, a dist-tag is invalid or a URL's protocol is not supported.
 * @param {string} arg a string that you might pass to npm install, like:
 * foo\@1.2, \@bar/foo\@1.2, foo\@user/foo, http://x.com/foo.tgz, git+https://github.com/user/foo, bitbucket:user/foo, foo.tar.gz, ../foo/bar/ or bar.
 * If the arg you provide doesn't have a specifier part, eg foo then the specifier will default to latest.
 * @param {string=} where Optionally the path to resolve file paths relative to. Defaults to process.cwd()
 * @return {!npa.Result}
 */
function npa(arg, where) {}

/**
 * Throws if the package name is invalid, a dist-tag is invalid or a URL's protocol is not supported.
 * @param {string} name The name of the module you want to install. For example: foo or \@bar/foo.
 * @param {string} spec The specifier indicating where and how you can get this module.
 * Something like: 1.2, ^1.7.17, http://x.com/foo.tgz, git+https://github.com/user/foo, bitbucket:user/foo, file:foo.tar.gz or file:../foo/bar/. If not included then the default is latest.
 * @param {string=} where Optionally the path to resolve file paths relative to. Defaults to process.cwd()
 * @return {!npa.Result}
 */
npa.resolve = function(name, spec, where) {};
/**
 * @constructor
 * @struct
 */
npa.Result = function() {};
 /** @type {string} */
npa.Result.prototype.type;
 /** @type {boolean} */
npa.Result.prototype.registry;
 /** @type {string} */
npa.Result.prototype.name;
 /** @type {string} */
npa.Result.prototype.scope;
 /** @type {string} */
npa.Result.prototype.escapedName;
 /** @type {string} */
npa.Result.prototype.rawSpec;
 /** @type {string} */
npa.Result.prototype.saveSpec;
 /** @type {string} */
npa.Result.prototype.fetchSpec;
 /** @type {string} */
npa.Result.prototype.gitRange;
 /** @type {string} */
npa.Result.prototype.gitCommittish;
 /** @type {?} */
npa.Result.prototype.hosted;
 /** @type {string} */
npa.Result.prototype.raw;

/* TODO: ExportAssignment in  */
