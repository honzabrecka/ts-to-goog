/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/babel-core/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ExportDeclaration in  */

/** @typedef {?} */
var Node;

/* TODO: ImportEqualsDeclaration in  */
 /** @type {string} */
var version;

/* TODO: ImportDeclaration in  */

/* TODO: ExportDeclaration in  */

/**
 * Transforms the passed in `code`. Returning an object with the generated code, source map, and AST.
 * @param {string} code
 * @param {?=} opts
 * @return {?}
 */
function transform(code, opts) {}

/**
 * Asynchronously transforms the entire contents of a file.
 * @param {string} filename
 * @param {?} opts
 * @param {?} callback
 * @return {void}
 */
function transformFile(filename, opts, callback) {}

/**
 * Synchronous version of `babel.transformFile`. Returns the transformed contents of the `filename`.
 * @param {string} filename
 * @param {?=} opts
 * @return {?}
 */
function transformFileSync(filename, opts) {}

/**
 * @param {?} ast
 * @param {string=} code
 * @param {?=} opts
 * @return {?}
 */
function transformFromAst(ast, code, opts) {}
/**
 * @record
 * @struct
 */
function TransformOptions() {}
 /** @type {string} */
TransformOptions.prototype.filename;
 /** @type {string} */
TransformOptions.prototype.filenameRelative;
 /** @type {!Object} */
TransformOptions.prototype.inputSourceMap;
 /** @type {!Object} */
TransformOptions.prototype.env;
 /** @type {boolean} */
TransformOptions.prototype.retainLines;
 /** @type {boolean} */
TransformOptions.prototype.highlightCode;
 /** @type {!Array<?>} */
TransformOptions.prototype.presets;
 /** @type {!Array<?>} */
TransformOptions.prototype.plugins;
 /** @type {!Array<string>} */
TransformOptions.prototype.ignore;
 /** @type {(string|!RegExp|!Array<(string|!RegExp)>)} */
TransformOptions.prototype.only;
 /** @type {boolean} */
TransformOptions.prototype.code;
 /** @type {boolean} */
TransformOptions.prototype.ast;
 /** @type {string} */
TransformOptions.prototype.extends;
 /** @type {boolean} */
TransformOptions.prototype.comments;
 /** @type {(boolean|string)} */
TransformOptions.prototype.compact;
 /** @type {(boolean|string)} */
TransformOptions.prototype.sourceMaps;
 /** @type {string} */
TransformOptions.prototype.sourceMapTarget;
 /** @type {string} */
TransformOptions.prototype.sourceFileName;
 /** @type {string} */
TransformOptions.prototype.sourceRoot;
 /** @type {boolean} */
TransformOptions.prototype.babelrc;
 /** @type {string} */
TransformOptions.prototype.auxiliaryCommentBefore;
 /** @type {string} */
TransformOptions.prototype.auxiliaryCommentAfter;
 /** @type {string} */
TransformOptions.prototype.moduleRoot;
 /** @type {boolean} */
TransformOptions.prototype.moduleIds;
 /** @type {string} */
TransformOptions.prototype.moduleId;

/**
 * An optional callback that controls whether a comment should be output or not. Called as
 * `shouldPrintComment(commentContents)`. **NOTE**: This overrides the `comments` option when used.
 * @param {string} comment
 * @return {boolean}
 */
TransformOptions.prototype.shouldPrintComment = function(comment) {};

/**
 * Specify a custom callback to generate a module id with. Called as `getModuleId(moduleName)`.
 * If falsy value is returned then the generated module id is used.
 * @param {string} moduleName
 * @return {string}
 */
TransformOptions.prototype.getModuleId = function(moduleName) {};
/**
 * @record
 * @struct
 */
function BabelFileResult() {}
 /** @type {?} */
BabelFileResult.prototype.ast;
 /** @type {string} */
BabelFileResult.prototype.code;
 /** @type {!Object} */
BabelFileResult.prototype.map;

/* TODO: NamespaceExportDeclaration in  */
