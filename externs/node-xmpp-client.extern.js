/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/node-xmpp-client/index.d.ts:

/**
 * @constructor
 * @struct
 * @param {?} options
 */
function Client(options) {}
 /** @type {?} */
Client.Stanza;

/**
 * @return {void}
 */
Client.prototype.connect = function() {};

/**
 * @return {void}
 */
Client.prototype.disconnect = function() {};

/**
 * @param {string} event
 * @param {?} c
 * @return {void}
 */
Client.prototype.on = function(event, c) {};

/**
 * @param {?} stanza
 * @return {void}
 */
Client.prototype.send = function(stanza) {};
/**
 * @extends {Element}
 * @record
 * @struct
 */
function Stanza() {}

/* TODO: ConstructSignature:  */
 /** @type {string} */
Stanza.prototype.from;
 /** @type {string} */
Stanza.prototype.to;
 /** @type {string} */
Stanza.prototype.id;
 /** @type {string} */
Stanza.prototype.type;
/**
 * @record
 * @struct
 */
function Element() {}

/**
 * @param {string} name
 * @param {string} xmlns
 * @return {boolean}
 */
Element.prototype.is = function(name, xmlns) {};

/**
 * @return {string}
 */
Element.prototype.getName = function() {};

/**
 * @return {string}
 */
Element.prototype.getNS = function() {};

/**
 * @param {string} prefix
 * @return {string}
 */
Element.prototype.findNS = function(prefix) {};

/**
 * @return {string}
 */
Element.prototype.getXmlns = function() {};

/**
 * @param {?} attrs
 * @return {void}
 */
Element.prototype.setAttrs = function(attrs) {};

/**
 * @return {?}
 */
Element.prototype.getAttrs = function() {};

/**
 * @return {?}
 */
Element.prototype.up = function() {};

/**
 * @param {string} name
 * @param {?=} attrs
 * @return {?}
 */
Element.prototype.c = function(name, attrs) {};

/**
 * @param {?} child
 * @return {?}
 */
Element.prototype.cnode = function(child) {};

/**
 * @param {string} text
 * @return {?}
 */
Element.prototype.t = function(text) {};

/**
 * @param {?} el
 * @param {string} xmnls
 * @return {?}
 */
Element.prototype.remove = function(el, xmnls) {};

/**
 * @param {?} attr
 * @param {?} val
 * @return {?}
 */
Element.prototype.attr = function(attr, val) {};

/**
 * @return {string}
 */
Element.prototype.toString = function() {};

/**
 * @return {?}
 */
Element.prototype.toJSON = function() {};
/**
 * @record
 * @struct
 */
function XmppOptions() {}
 /** @type {string} */
XmppOptions.prototype.jid;
 /** @type {string} */
XmppOptions.prototype.password;
 /** @type {string} */
XmppOptions.prototype.host;
 /** @type {number} */
XmppOptions.prototype.port;
 /** @type {boolean} */
XmppOptions.prototype.reconnect;
 /** @type {boolean} */
XmppOptions.prototype.autostart;
 /** @type {boolean} */
XmppOptions.prototype.register;
 /** @type {boolean} */
XmppOptions.prototype.legacySSL;
 /** @type {?} */
XmppOptions.prototype.credentials;
 /** @type {string} */
XmppOptions.prototype.actAs;
 /** @type {boolean} */
XmppOptions.prototype.disallowTLS;
 /** @type {string} */
XmppOptions.prototype.preferred;
 /** @type {?} */
XmppOptions.prototype.bosh;
/**
 * @record
 * @struct
 */
function Bosh() {}
 /** @type {string} */
Bosh.prototype.url;

/**
 * @param {?} error
 * @param {?} data
 * @return {void}
 */
Bosh.prototype.prebind = function(error, data) {};
