/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/chai-spies/index.d.ts:
 /** @type {!ChaiSpies.Spy} */
Chai.ChaiStatic.prototype.spy;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.spy;
 /** @type {!ChaiSpies.Called} */
Chai.Assertion.prototype.called;
/** @const */
var ChaiSpies = {};
/**
 * @record
 * @struct
 */
ChaiSpies.Spy = function() {};

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/* TODO: CallSignature: ChaiSpies */

/**
 * #### chai.spy.on (function)
 * 
 * Wraps an object method into spy. All calls will pass through to the original function.
 * ```ts
 * var spy = chai.spy.on(Array, 'isArray');
 * ```
 * @param {!Object} object
 * @param {...string} methodNames
 * @return {?} function to actually call
 */
ChaiSpies.Spy.prototype.on = function(object, methodNames) {};

/**
 * #### chai.spy.object (function)
 * 
 * Creates an object with spied methods.
 * ```ts
 * var object = chai.spy.object('Array', [ 'push', 'pop' ]);
 * ```
 * @template T
 * @param {string|!Array<string>|T} name_or_methods
 * @param {!Array<string>|T=} methods
 * @return {?|T} object with spied methods
 */
ChaiSpies.Spy.prototype.object = function(name_or_methods, methods) {};

/**
 * #### chai.spy.returns (function)
 * 
 * Creates a spy which returns static value.
 * ```ts
 *      var method = chai.spy.returns(true);
 * ```
 * \@api public
 * @template T
 * @param {T} value
 * @return {!ChaiSpies.SpyFunc0Proxy<T>} new spy function which returns static value
 */
ChaiSpies.Spy.prototype.returns = function(value) {};
/**
 * @record
 * @struct
 */
ChaiSpies.Called = function() {};

/* TODO: CallSignature: ChaiSpies */
 /** @type {!ChaiSpies.With} */
ChaiSpies.Called.prototype.with;
 /** @type {!ChaiSpies.Always} */
ChaiSpies.Called.prototype.always;
 /** @type {!Chai.Assertion} */
ChaiSpies.Called.prototype.once;
 /** @type {!Chai.Assertion} */
ChaiSpies.Called.prototype.twice;
 /** @type {!ChaiSpies.At} */
ChaiSpies.Called.prototype.at;

/**
 * ####.exactly(n)
 * Assert that a spy has been called exactly ```n``` times.
 * ```ts
 * expect(spy).to.have.been.called.exactly(3);
 * expect(spy).to.not.have.been.called.exactly(3);
 * spy.should.have.been.called.exactly(3);
 * spy.should.not.have.been.called.exactly(3);
 * ```
 * @param {number} n
 * @return {!Chai.Assertion}
 */
ChaiSpies.Called.prototype.exactly = function(n) {};

/**
 * ####.min(n) / .at.least(n)
 * Assert that a spy has been called minimum of ```n``` times.
 * ```ts
 * expect(spy).to.have.been.called.min(3);
 * expect(spy).to.not.have.been.called.at.least(3);
 * spy.should.have.been.called.at.least(3);
 * spy.should.not.have.been.called.min(3);
 * ```
 * @param {number} n
 * @return {!Chai.Assertion}
 */
ChaiSpies.Called.prototype.min = function(n) {};

/**
 * ####.max(n) / .at.most(n)
 * Assert that a spy has been called maximum of ```n``` times.
 * ```ts
 * expect(spy).to.have.been.called.max(3);
 * expect(spy).to.not.have.been.called.at.most(3);
 * spy.should.have.been.called.at.most(3);
 * spy.should.not.have.been.called.max(3);
 * ```
 * @param {number} n
 * @return {!Chai.Assertion}
 */
ChaiSpies.Called.prototype.max = function(n) {};

/**
 * ####.above(n) / .gt(n)
 * Assert that a spy has been called more than ```n``` times.
 * ```ts
 * expect(spy).to.have.been.called.above(3);
 * spy.should.not.have.been.called.above(3);
 * ```
 * @param {number} n
 * @return {!Chai.Assertion}
 */
ChaiSpies.Called.prototype.above = function(n) {};

/**
 * ####.above(n) / .gt(n)
 * Assert that a spy has been called more than ```n``` times.
 * ```ts
 * expect(spy).to.have.been.called.gt(3);
 * spy.should.not.have.been.called.gt(3);
 * ```
 * @param {number} n
 * @return {!Chai.Assertion}
 */
ChaiSpies.Called.prototype.gt = function(n) {};

/**
 * ####.below(n) / .lt(n)
 * Assert that a spy has been called fewer than ```n``` times.
 * ```ts
 * expect(spy).to.have.been.called.below(3);
 * spy.should.not.have.been.called.below(3);
 * ```
 * @param {number} n
 * @return {!Chai.Assertion}
 */
ChaiSpies.Called.prototype.below = function(n) {};

/**
 * ####.below(n) / .lt(n)
 * Assert that a spy has been called fewer than ```n``` times.
 * ```ts
 * expect(spy).to.have.been.called.lt(3);
 * spy.should.not.have.been.called.lt(3);
 * ```
 * @param {number} n
 * @return {!Chai.Assertion}
 */
ChaiSpies.Called.prototype.lt = function(n) {};
/**
 * @record
 * @struct
 */
ChaiSpies.With = function() {};

/* TODO: CallSignature: ChaiSpies */

/**
 * ####.with.exactly
 * Similar to .with, but will pass only if the list of arguments is exactly the same as the one provided.
 * ```ts
 * spy();
 * spy('foo', 'bar');
 * expect(spy).to.have.been.called.with.exactly('foo', 'bar');
 * spy.should.have.been.called.with.exactly('foo', 'bar');
 * ```
 * Will not pass for ```spy('foo')```, ```spy('bar')```, ```spy('bar'); spy('foo')```, ```spy('foo'); spy('bar')```, ```spy('bar', 'foo')``` or ```spy('foo', 'bar', 1)```.
 * Can be used for calls with a single argument too.
 * @param {?=} a
 * @param {?=} b
 * @param {?=} c
 * @param {?=} d
 * @param {?=} e
 * @param {?=} f
 * @param {?=} g
 * @param {?=} h
 * @param {?=} i
 * @param {?=} j
 * @return {!Chai.Assertion}
 */
ChaiSpies.With.prototype.exactly = function(a, b, c, d, e, f, g, h, i, j) {};
/**
 * @record
 * @struct
 */
ChaiSpies.Always = function() {};
 /** @type {!ChaiSpies.AlwaysWith} */
ChaiSpies.Always.prototype.with;
/**
 * @record
 * @struct
 */
ChaiSpies.AlwaysWith = function() {};

/* TODO: CallSignature: ChaiSpies */

/**
 * ####.always.with.exactly
 * Assert that the spy has never been called with a different list of arguments than the one provided.
 * ```ts
 * spy('foo');
 * spy('foo');
 * expect(spy).to.have.been.called.always.with.exactly('foo');
 * spy.should.have.been.called.always.with.exactly('foo');
 * ```
 * @param {?=} a
 * @param {?=} b
 * @param {?=} c
 * @param {?=} d
 * @param {?=} e
 * @param {?=} f
 * @param {?=} g
 * @param {?=} h
 * @param {?=} i
 * @param {?=} j
 * @return {!Chai.Assertion}
 */
ChaiSpies.AlwaysWith.prototype.exactly = function(a, b, c, d, e, f, g, h, i, j) {};
/**
 * @record
 * @struct
 */
ChaiSpies.At = function() {};

/**
 * ####.min(n) / .at.least(n)
 * Assert that a spy has been called minimum of ```n``` times.
 * ```ts
 * expect(spy).to.have.been.called.min(3);
 * expect(spy).to.not.have.been.called.at.least(3);
 * spy.should.have.been.called.at.least(3);
 * spy.should.not.have.been.called.min(3);
 * ```
 * @param {number} n
 * @return {!Chai.Assertion}
 */
ChaiSpies.At.prototype.least = function(n) {};

/**
 * ####.max(n) / .at.most(n)
 * Assert that a spy has been called maximum of ```n``` times.
 * ```ts
 * expect(spy).to.have.been.called.max(3);
 * expect(spy).to.not.have.been.called.at.most(3);
 * spy.should.have.been.called.at.most(3);
 * spy.should.not.have.been.called.max(3);
 * ```
 * @param {number} n
 * @return {!Chai.Assertion}
 */
ChaiSpies.At.prototype.most = function(n) {};
/**
 * @record
 * @struct
 */
ChaiSpies.Resetable = function() {};

/**
 * #### proxy.reset (function)
 * 
 * Resets __spy object parameters for instantiation and reuse
 * @return {Resetable} proxy spy object
 */
ChaiSpies.Resetable.prototype.reset = function() {};
/**
 * @record
 * @struct
 */
ChaiSpies.SpyFunc0 = function() {};

/* TODO: CallSignature: ChaiSpies */
/**
 * @record
 * @struct
 */
ChaiSpies.SpyFunc1 = function() {};

/* TODO: CallSignature: ChaiSpies */
/**
 * @record
 * @struct
 */
ChaiSpies.SpyFunc2 = function() {};

/* TODO: CallSignature: ChaiSpies */
/**
 * @record
 * @struct
 */
ChaiSpies.SpyFunc3 = function() {};

/* TODO: CallSignature: ChaiSpies */
/**
 * @record
 * @struct
 */
ChaiSpies.SpyFunc4 = function() {};

/* TODO: CallSignature: ChaiSpies */
/**
 * @record
 * @struct
 */
ChaiSpies.SpyFunc5 = function() {};

/* TODO: CallSignature: ChaiSpies */
/**
 * @record
 * @struct
 */
ChaiSpies.SpyFunc6 = function() {};

/* TODO: CallSignature: ChaiSpies */
/**
 * @record
 * @struct
 */
ChaiSpies.SpyFunc7 = function() {};

/* TODO: CallSignature: ChaiSpies */
/**
 * @record
 * @struct
 */
ChaiSpies.SpyFunc8 = function() {};

/* TODO: CallSignature: ChaiSpies */
/**
 * @record
 * @struct
 */
ChaiSpies.SpyFunc9 = function() {};

/* TODO: CallSignature: ChaiSpies */
/**
 * @record
 * @struct
 */
ChaiSpies.SpyFunc10 = function() {};

/* TODO: CallSignature: ChaiSpies */
/**
 * @extends {ChaiSpies.SpyFunc0}
 * @extends {ChaiSpies.Resetable}
 * @record
 * @struct
 */
ChaiSpies.SpyFunc0Proxy = function() {};
/**
 * @extends {ChaiSpies.SpyFunc1}
 * @extends {ChaiSpies.Resetable}
 * @record
 * @struct
 */
ChaiSpies.SpyFunc1Proxy = function() {};
/**
 * @extends {ChaiSpies.SpyFunc2}
 * @extends {ChaiSpies.Resetable}
 * @record
 * @struct
 */
ChaiSpies.SpyFunc2Proxy = function() {};
/**
 * @extends {ChaiSpies.SpyFunc3}
 * @extends {ChaiSpies.Resetable}
 * @record
 * @struct
 */
ChaiSpies.SpyFunc3Proxy = function() {};
/**
 * @extends {ChaiSpies.SpyFunc4}
 * @extends {ChaiSpies.Resetable}
 * @record
 * @struct
 */
ChaiSpies.SpyFunc4Proxy = function() {};
/**
 * @extends {ChaiSpies.SpyFunc5}
 * @extends {ChaiSpies.Resetable}
 * @record
 * @struct
 */
ChaiSpies.SpyFunc5Proxy = function() {};
/**
 * @extends {ChaiSpies.SpyFunc6}
 * @extends {ChaiSpies.Resetable}
 * @record
 * @struct
 */
ChaiSpies.SpyFunc6Proxy = function() {};
/**
 * @extends {ChaiSpies.SpyFunc7}
 * @extends {ChaiSpies.Resetable}
 * @record
 * @struct
 */
ChaiSpies.SpyFunc7Proxy = function() {};
/**
 * @extends {ChaiSpies.SpyFunc8}
 * @extends {ChaiSpies.Resetable}
 * @record
 * @struct
 */
ChaiSpies.SpyFunc8Proxy = function() {};
/**
 * @extends {ChaiSpies.SpyFunc9}
 * @extends {ChaiSpies.Resetable}
 * @record
 * @struct
 */
ChaiSpies.SpyFunc9Proxy = function() {};
/**
 * @extends {ChaiSpies.SpyFunc10}
 * @extends {ChaiSpies.Resetable}
 * @record
 * @struct
 */
ChaiSpies.SpyFunc10Proxy = function() {};
 /** @type {!ChaiSpies.Spy} */
var spies;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "chai-spies"
/** @const */
tsickle_declare_module.chai_spies = {};

/* TODO: ExportAssignment in tsickle_declare_module.chai_spies */
