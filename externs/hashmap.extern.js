/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/hashmap/index.d.ts:

/**
 * @constructor
 * @struct
 * Creates an empty hashmap.
 * Creates a hashmap with the key-value pairs of map.
 * 
 * Creates a hashmap with several key-value pairs.
 * 
 * @param {...!HashMap|(TKey|TValue)} map_or_keysAndValues key1, value1, key2, value2...
 */
function HashMap(map_or_keysAndValues) {}

/**
 * Return value from hashmap.
 * 
 * @param {TKey} key Key.
 * @return {TValue} Value stored under given key.
 */
HashMap.prototype.get = function(key) {};

/**
 * Store value in hashmap.
 * 
 * @param {TKey} key Key.
 * @param {TValue} value Value.
 * @return {!HashMap} Self.
 */
HashMap.prototype.set = function(key, value) {};

/**
 * Store several key-value pairs.
 * 
 * @param {...(TKey|TValue)} keysAndValues key1, value1, key2, value2...
 * @return {!HashMap} Self.
 */
HashMap.prototype.multi = function(keysAndValues) {};

/**
 * Copy all key-value pairs from other to this instance.
 * 
 * @param {!HashMap} map Other map.
 * @return {!HashMap} Self.
 */
HashMap.prototype.copy = function(map) {};

/**
 * Checks if given key exists in hashmap.
 * 
 * @param {TKey} key Key.
 * @return {boolean} Whether given key exists in hashmap.
 */
HashMap.prototype.has = function(key) {};

/**
 * Returns key under which given value is stored.
 * 
 * @param {TValue} value Value.
 * @return {TKey} Key which is assigned to value stored.
 */
HashMap.prototype.search = function(value) {};

/**
 * Removes given key from hashmap.
 * 
 * @param {TKey} key Key.
 * @return {!HashMap} Self.
 */
HashMap.prototype.remove = function(key) {};

/**
 * Returns all contained keys.
 * 
 * @return {!Array<TKey>} List of keys.
 */
HashMap.prototype.keys = function() {};

/**
 * Returns all container values.
 * 
 * @return {!Array<TValue>} List of values.
 */
HashMap.prototype.values = function() {};

/**
 * Returns size of hashmap (number of entries).
 * 
 * @return {number} Number of entries in hashmap.
 */
HashMap.prototype.count = function() {};

/**
 * Clears hashmap.
 * 
 * @return {!HashMap} Self.
 */
HashMap.prototype.clear = function() {};

/**
 * Creates a new hashmap with all the key-value pairs of the original
 * 
 * @return {!HashMap} New hashmap.
 */
HashMap.prototype.clone = function() {};

/**
 * Iterates over hashmap.
 * 
 * @param {function(TValue, TKey): void} callback Function to be invoked for every hashmap entry.
 * @return {!HashMap} Self.
 */
HashMap.prototype.forEach = function(callback) {};

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
