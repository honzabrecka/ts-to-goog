/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/is/index.d.ts:
/**
 * @record
 * @struct
 */
function IsStatic() {}

/**
 * Checks if the given value type is arguments.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.arguments = function(value) {};

/**
 * Checks if the given value type is array.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.array = function(value) {};

/**
 * Checks if the given value type is boolean.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.boolean = function(value) {};

/**
 * Checks if the given value type is date.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.date = function(value) {};

/**
 * Checks if the given value type is error.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.error = function(value) {};

/**
 * Checks if the given value type is function.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.function = function(value) {};

/**
 * Checks if the given value type is NaN.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.nan = function(value) {};

/**
 * Checks if the given value type is null.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.null = function(value) {};

/**
 * Checks if the given value type is number.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.number = function(value) {};

/**
 * Checks if the given value type is object.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.object = function(value) {};

/**
 * Checks if the given value type is pure json object.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.json = function(value) {};

/**
 * Checks if the given value type is RegExp.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.regexp = function(value) {};

/**
 * Checks if the given value type is string.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.string = function(value) {};

/**
 * Checks if the given value type is char.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.char = function(value) {};

/**
 * Checks if the given value type is undefined.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.undefined = function(value) {};

/**
 * Checks if the given value types are same type.
 * @param {?} value1
 * @param {?} value2
 * @return {boolean}
 */
IsStatic.prototype.sameType = function(value1, value2) {};

/**
 * Checks if the given value is empty.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.empty = function(value) {};

/**
 * Checks if the given value is existy. (not null or undefined)
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.existy = function(value) {};

/**
 * Checks if the given value is truthy. (existy and not false)
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.truthy = function(value) {};

/**
 * Checks if the given value is falsy.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.falsy = function(value) {};

/**
 * Checks if the given value is space.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.space = function(value) {};

/**
 * Checks if the given value matches url regexp.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.url = function(value) {};

/**
 * Checks if the given value matches email regexp.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.email = function(value) {};

/**
 * Checks if the given value matches credit card regexp.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.creditCard = function(value) {};

/**
 * Checks if the given value matches alpha numeric regexp.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.alphaNumeric = function(value) {};

/**
 * Checks if the given value matches time string regexp.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.timeString = function(value) {};

/**
 * Checks if the given value matches date string regexp.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.dateString = function(value) {};

/**
 * Checks if the given value matches US zip code regexp.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.usZipCode = function(value) {};

/**
 * Checks if the given value matches Canada postal code regexp.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.caPostalCode = function(value) {};

/**
 * Checks if the given value matches UK post code regexp.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.ukPostCode = function(value) {};

/**
 * Checks if the given value matches North American numbering plan phone regexp.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.nanpPhone = function(value) {};

/**
 * Checks if the given value matches extensible provisioning protocol phone regexp.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.eppPhone = function(value) {};

/**
 * Checks if the given value matches social security number regexp.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.socialSecurityNumber = function(value) {};

/**
 * Checks if the given value matches affirmative regexp.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.affirmative = function(value) {};

/**
 * Checks if the given value matches hexadecimal regexp.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.hexadecimal = function(value) {};

/**
 * Checks if the given value matches hexcolor regexp.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.hexColor = function(value) {};

/**
 * Checks if the given value matches ip regexp.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.ip = function(value) {};

/**
 * Checks if the given value matches ipv4 regexp
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.ipv4 = function(value) {};

/**
 * Checks if the given value matches ipv6 regexp
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.ipv6 = function(value) {};

/**
 * Checks if the given string contains a substring.
 * @param {string} value1
 * @param {string} value2
 * @return {boolean}
 */
IsStatic.prototype.include = function(value1, value2) {};

/**
 * Checks if the given string is UPPERCASE.
 * @param {string} value
 * @return {boolean}
 */
IsStatic.prototype.upperCase = function(value) {};

/**
 * Checks if the given string is lowercase.
 * @param {string} value
 * @return {boolean}
 */
IsStatic.prototype.lowerCase = function(value) {};

/**
 * Checks if the given string starts with substring.
 * @param {string} value1
 * @param {string} value2
 * @return {boolean}
 */
IsStatic.prototype.startWith = function(value1, value2) {};

/**
 * Checks if the given string ends with substring.
 * @param {string} value1
 * @param {string} value2
 * @return {boolean}
 */
IsStatic.prototype.endWith = function(value1, value2) {};

/**
 * Checks if the given string is capitalized.
 * @param {string} value
 * @return {boolean}
 */
IsStatic.prototype.capitalized = function(value) {};

/**
 * Checks if the given string is palindrome.
 * @param {string} value
 * @return {boolean}
 */
IsStatic.prototype.palindrome = function(value) {};

/**
 * Checks if the given values are equal.
 * @param {?} value1
 * @param {?} value2
 * @return {boolean}
 */
IsStatic.prototype.equal = function(value1, value2) {};

/**
 * Checks if the given value is even.
 * @param {number} value
 * @return {boolean}
 */
IsStatic.prototype.even = function(value) {};

/**
 * Checks if the given value is odd.
 * @param {number} value
 * @return {boolean}
 */
IsStatic.prototype.odd = function(value) {};

/**
 * Checks if the given value is positive.
 * @param {number} value
 * @return {boolean}
 */
IsStatic.prototype.positive = function(value) {};

/**
 * Checks if the given value is negative.
 * @param {number} value
 * @return {boolean}
 */
IsStatic.prototype.negative = function(value) {};

/**
 * Checks if the given value is above minimum value.
 * @param {number} value
 * @param {number} min
 * @return {boolean}
 */
IsStatic.prototype.above = function(value, min) {};

/**
 * Checks if the given value is under maximum value.
 * @param {number} value
 * @param {number} max
 * @return {boolean}
 */
IsStatic.prototype.under = function(value, max) {};

/**
 * Checks if the given value is within minimum and maximum values.
 * @param {number} value
 * @param {number} min
 * @param {number} max
 * @return {boolean}
 */
IsStatic.prototype.within = function(value, min, max) {};

/**
 * Checks if the given value is decimal.
 * @param {number} value
 * @return {boolean}
 */
IsStatic.prototype.decimal = function(value) {};

/**
 * Checks if the given value is integer.
 * @param {number} value
 * @return {boolean}
 */
IsStatic.prototype.integer = function(value) {};

/**
 * Checks if the given value is finite.
 * @param {number} value
 * @return {boolean}
 */
IsStatic.prototype.finite = function(value) {};

/**
 * Checks if the given value is infinite.
 * @param {number} value
 * @return {boolean}
 */
IsStatic.prototype.infinite = function(value) {};

/**
 * Checks if objects' property count is equal to given count.
 * @param {?} value
 * @param {number} count
 * @return {boolean}
 */
IsStatic.prototype.propertyCount = function(value, count) {};

/**
 * Checks if the given property is defined on object.
 * @param {?} value
 * @param {string} property
 * @return {boolean}
 */
IsStatic.prototype.propertyDefined = function(value, property) {};

/**
 * Checks if the given object is window object.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.windowObject = function(value) {};

/**
 * Checks if the given object is a dom node.
 * @param {?} value
 * @return {boolean}
 */
IsStatic.prototype.domNode = function(value) {};

/**
 * Checks if the given item is in array.
 * @template T
 * @param {T} value
 * @param {!Array<T>} array
 * @return {boolean}
 */
IsStatic.prototype.inArray = function(value, array) {};

/**
 * Checks if the given array is sorted.
 * @param {!Array<?>} value
 * @return {boolean}
 */
IsStatic.prototype.sorted = function(value) {};

/**
 * Checks if current browser is ie
 * \@parm value Optional version number of browser
 * @param {number=} value
 * @return {boolean}
 */
IsStatic.prototype.ie = function(value) {};

/**
 * Checks if current browser is chrome.
 * @return {boolean}
 */
IsStatic.prototype.chrome = function() {};

/**
 * Checks if current browser is firefox.
 * @return {boolean}
 */
IsStatic.prototype.firefox = function() {};

/**
 * Checks if current browser is opera.
 * @return {boolean}
 */
IsStatic.prototype.opera = function() {};

/**
 * Checks if current browser is safari.
 * @return {boolean}
 */
IsStatic.prototype.safari = function() {};

/**
 * Checks if current device has ios.
 * @return {boolean}
 */
IsStatic.prototype.ios = function() {};

/**
 * Checks if current device is iPhone.
 * @return {boolean}
 */
IsStatic.prototype.iphone = function() {};

/**
 * Checks if current device is iPad.
 * @return {boolean}
 */
IsStatic.prototype.ipad = function() {};

/**
 * Checks if current device is iPod.
 * @return {boolean}
 */
IsStatic.prototype.ipod = function() {};

/**
 * Checks if current device has Android.
 * @return {boolean}
 */
IsStatic.prototype.android = function() {};

/**
 * Checks if current device is Android phone.
 * @return {boolean}
 */
IsStatic.prototype.androidPhone = function() {};

/**
 * Checks if current device is Android tablet.
 * @return {boolean}
 */
IsStatic.prototype.androidTablet = function() {};

/**
 * Checks if current device is Blackberry.
 * @return {boolean}
 */
IsStatic.prototype.blackberry = function() {};

/**
 * Checks if current device is Windows phone.
 * @return {boolean}
 */
IsStatic.prototype.windowsPhone = function() {};

/**
 * Checks if current device is Windows tablet.
 * @return {boolean}
 */
IsStatic.prototype.windowsTablet = function() {};

/**
 * Checks if current OS is Windows.
 * @return {boolean}
 */
IsStatic.prototype.windows = function() {};

/**
 * Checks if current OS is Mac OS X.
 * @return {boolean}
 */
IsStatic.prototype.mac = function() {};

/**
 * Checks if current OS is linux.
 * @return {boolean}
 */
IsStatic.prototype.linux = function() {};

/**
 * Checks if current device is desktop.
 * @return {boolean}
 */
IsStatic.prototype.desktop = function() {};

/**
 * Checks if current device is mobile.
 * @return {boolean}
 */
IsStatic.prototype.mobile = function() {};

/**
 * Checks if current device is tablet.
 * @return {boolean}
 */
IsStatic.prototype.tablet = function() {};

/**
 * Checks if current device is online.
 * @return {boolean}
 */
IsStatic.prototype.online = function() {};

/**
 * Checks if current device is offline.
 * @return {boolean}
 */
IsStatic.prototype.offline = function() {};

/**
 * Checks if the given date object indicate today.
 * @param {!Date} value
 * @return {boolean}
 */
IsStatic.prototype.today = function(value) {};

/**
 * Checks if the given date object indicate yesterday.
 * @param {!Date} value
 * @return {boolean}
 */
IsStatic.prototype.yesterday = function(value) {};

/**
 * Checks if the given date object indicate tomorrow.
 * @param {!Date} value
 * @return {boolean}
 */
IsStatic.prototype.tomorrow = function(value) {};

/**
 * Checks if the given date object indicate past.
 * @param {!Date} value
 * @return {boolean}
 */
IsStatic.prototype.past = function(value) {};

/**
 * Checks if the given date object indicate future.
 * @param {!Date} value
 * @return {boolean}
 */
IsStatic.prototype.future = function(value) {};

/**
 * Checks if the given date objects' day equal given dayString parameter.
 * @param {!Date} value
 * @param {string} dayString
 * @return {boolean}
 */
IsStatic.prototype.day = function(value, dayString) {};

/**
 * Checks if the given date objects' month equal given monthString parameter.
 * @param {!Date} value
 * @param {string} monthString
 * @return {boolean}
 */
IsStatic.prototype.month = function(value, monthString) {};

/**
 * Checks if the given date objects' year equal given yearNumber parameter.
 * @param {!Date} value
 * @param {number} yearNumber
 * @return {boolean}
 */
IsStatic.prototype.year = function(value, yearNumber) {};

/**
 * Checks if the given year number is a leap year
 * @param {number} value
 * @return {boolean}
 */
IsStatic.prototype.leapYear = function(value) {};

/**
 * Checks if the given date objects' day is weekend.
 * @param {!Date} value
 * @return {boolean}
 */
IsStatic.prototype.weekend = function(value) {};

/**
 * Checks if the given date objects' day is weekday.
 * @param {!Date} value
 * @return {boolean}
 */
IsStatic.prototype.weekday = function(value) {};

/**
 * Checks if date is within given range.
 * @param {!Date} value
 * @param {!Date} start
 * @param {!Date} end
 * @return {boolean}
 */
IsStatic.prototype.inDateRange = function(value, start, end) {};

/**
 * Checks if the given date is between now and 7 days ago.
 * @param {!Date} value
 * @return {boolean}
 */
IsStatic.prototype.inLastWeek = function(value) {};

/**
 * Checks if the given date is between now and a month ago.
 * @param {!Date} value
 * @return {boolean}
 */
IsStatic.prototype.inLastMonth = function(value) {};

/**
 * Checks if the given date is between now and a year ago.
 * @param {!Date} value
 * @return {boolean}
 */
IsStatic.prototype.inLastYear = function(value) {};

/**
 * Checks if the given date is between now and 7 days later.
 * @param {!Date} value
 * @return {boolean}
 */
IsStatic.prototype.inNextWeek = function(value) {};

/**
 * Checks if the given date is between now and a month later.
 * @param {!Date} value
 * @return {boolean}
 */
IsStatic.prototype.inNextMonth = function(value) {};

/**
 * Checks if the given date is between now and a year later.
 * @param {!Date} value
 * @return {boolean}
 */
IsStatic.prototype.inNextYear = function(value) {};

/**
 * Checks if the given date is in the parameter quarter.
 * @param {!Date} value
 * @param {number} quarter
 * @return {boolean}
 */
IsStatic.prototype.quarterOfYear = function(value, quarter) {};

/**
 * Checks if the given date is in daylight saving time.
 * @param {!Date} value
 * @return {boolean}
 */
IsStatic.prototype.dayLightSavingTime = function(value) {};
/**
 * @record
 * @struct
 */
function IsStaticApi() {}

/**
 * Checks if the given value type is arguments.
 * Checks if the given value type is arguments.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.arguments = function(value) {};

/**
 * Checks if the given value type is array.
 * Checks if the given value type is array.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.array = function(value) {};

/**
 * Checks if the given value type is boolean.
 * Checks if the given value type is boolean.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.boolean = function(value) {};

/**
 * Checks if the given value type is date.
 * Checks if the given value type is date.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.date = function(value) {};

/**
 * Checks if the given value type is error.
 * Checks if the given value type is error.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.error = function(value) {};

/**
 * Checks if the given value type is function.
 * Checks if the given value type is function.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.function = function(value) {};

/**
 * Checks if the given value type is NaN.
 * Checks if the given value type is NaN.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.nan = function(value) {};

/**
 * Checks if the given value type is null.
 * Checks if the given value type is null.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.null = function(value) {};

/**
 * Checks if the given value type is number.
 * Checks if the given value type is number.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.number = function(value) {};

/**
 * Checks if the given value type is object.
 * Checks if the given value type is object.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.object = function(value) {};

/**
 * Checks if the given value type is pure json object.
 * Checks if the given value type is pure json object.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.json = function(value) {};

/**
 * Checks if the given value type is RegExp.
 * Checks if the given value type is RegExp.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.regexp = function(value) {};

/**
 * Checks if the given value type is string.
 * Checks if the given value type is string.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.string = function(value) {};

/**
 * Checks if the given value type is char.
 * Checks if the given value type is char.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.char = function(value) {};

/**
 * Checks if the given value type is undefined.
 * Checks if the given value type is undefined.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.undefined = function(value) {};

/**
 * Checks if the given value is empty.
 * Checks if the given value is empty.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.empty = function(value) {};

/**
 * Checks if the given value is existy. (not null or undefined)
 * Checks if the given value is existy. (not null or undefined)
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.existy = function(value) {};

/**
 * Checks if the given value is truthy. (existy and not false)
 * Checks if the given value is truthy. (existy and not false)
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.truthy = function(value) {};

/**
 * Checks if the given value is falsy.
 * Checks if the given value is falsy.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.falsy = function(value) {};

/**
 * Checks if the given value is space.
 * Checks if the given value is space.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.space = function(value) {};

/**
 * Checks if the given value matches url regexp.
 * Checks if the given value matches url regexp.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.url = function(value) {};

/**
 * Checks if the given value matches email regexp.
 * Checks if the given value matches email regexp.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.email = function(value) {};

/**
 * Checks if the given value matches credit card regexp.
 * Checks if the given value matches credit card regexp.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.creditCard = function(value) {};

/**
 * Checks if the given value matches alpha numeric regexp.
 * Checks if the given value matches alpha numeric regexp.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.alphaNumeric = function(value) {};

/**
 * Checks if the given value matches time string regexp.
 * Checks if the given value matches time string regexp.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.timeString = function(value) {};

/**
 * Checks if the given value matches date string regexp.
 * Checks if the given value matches date string regexp.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.dateString = function(value) {};

/**
 * Checks if the given value matches US zip code regexp.
 * Checks if the given value matches US zip code regexp.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.usZipCode = function(value) {};

/**
 * Checks if the given value matches Canada postal code regexp.
 * Checks if the given value matches Canada postal code regexp.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.caPostalCode = function(value) {};

/**
 * Checks if the given value matches UK post code regexp.
 * Checks if the given value matches UK post code regexp.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.ukPostCode = function(value) {};

/**
 * Checks if the given value matches North American numbering plan phone regexp.
 * Checks if the given value matches North American numbering plan phone regexp.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.nanpPhone = function(value) {};

/**
 * Checks if the given value matches extensible provisioning protocol phone regexp.
 * Checks if the given value matches extensible provisioning protocol phone regexp.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.eppPhone = function(value) {};

/**
 * Checks if the given value matches social security number regexp.
 * Checks if the given value matches social security number regexp.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.socialSecurityNumber = function(value) {};

/**
 * Checks if the given value matches affirmative regexp.
 * Checks if the given value matches affirmative regexp.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.affirmative = function(value) {};

/**
 * Checks if the given value matches hexadecimal regexp.
 * Checks if the given value matches hexadecimal regexp.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.hexadecimal = function(value) {};

/**
 * Checks if the given value matches hexcolor regexp.
 * Checks if the given value matches hexcolor regexp.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.hexColor = function(value) {};

/**
 * Checks if the given value matches ip regexp.
 * Checks if the given value matches ip regexp.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.ip = function(value) {};

/**
 * Checks if the given value matches ipv4 regexp.
 * Checks if the given value matches ipv4 regexp.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.ipv4 = function(value) {};

/**
 * Checks if the given value matches ipv6 regexp.
 * Checks if the given value matches ipv6 regexp.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.ipv6 = function(value) {};

/**
 * Checks if the given string is UPPERCASE.
 * Checks if the given string is UPPERCASE.
 * @param {...string|!Array<string>} value
 * @return {boolean}
 */
IsStaticApi.prototype.upperCase = function(value) {};

/**
 * Checks if the given string is lowercase.
 * Checks if the given string is lowercase.
 * @param {...string|!Array<string>} value
 * @return {boolean}
 */
IsStaticApi.prototype.lowerCase = function(value) {};

/**
 * Checks if the given string is capitalized.
 * Checks if the given string is capitalized.
 * @param {...string|!Array<string>} value
 * @return {boolean}
 */
IsStaticApi.prototype.capitalized = function(value) {};

/**
 * Checks if the given string is palindrome
 * Checks if the given string is palindrome
 * @param {...string|!Array<string>} value
 * @return {boolean}
 */
IsStaticApi.prototype.palindrome = function(value) {};

/**
 * Checks if the given value is even.
 * Checks if the given value is even.
 * @param {...number|!Array<number>} value
 * @return {boolean}
 */
IsStaticApi.prototype.even = function(value) {};

/**
 * Checks if the given value is odd.
 * Checks if the given value is odd.
 * @param {...number|!Array<number>} value
 * @return {boolean}
 */
IsStaticApi.prototype.odd = function(value) {};

/**
 * Checks if the given value is positive.
 * Checks if the given value is positive.
 * @param {...number|!Array<number>} value
 * @return {boolean}
 */
IsStaticApi.prototype.positive = function(value) {};

/**
 * Checks if the given value is negative.
 * Checks if the given value is negative.
 * @param {...number|!Array<number>} value
 * @return {boolean}
 */
IsStaticApi.prototype.negative = function(value) {};

/**
 * Checks if the given value is decimal.
 * Checks if the given value is decimal.
 * @param {...number|!Array<number>} value
 * @return {boolean}
 */
IsStaticApi.prototype.decimal = function(value) {};

/**
 * Checks if the given value is integer.
 * Checks if the given value is integer.
 * @param {...number|!Array<number>} value
 * @return {boolean}
 */
IsStaticApi.prototype.integer = function(value) {};

/**
 * Checks if the given value is finite.
 * Checks if the given value is finite.
 * @param {...number|!Array<number>} value
 * @return {boolean}
 */
IsStaticApi.prototype.finite = function(value) {};

/**
 * Checks if the given value is infinite.
 * Checks if the given value is infinite.
 * @param {...number|!Array<number>} value
 * @return {boolean}
 */
IsStaticApi.prototype.infinite = function(value) {};

/**
 * Checks if the given object is window object.
 * Checks if the given object is window object.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.windowObject = function(value) {};

/**
 * Checks if the given object is a dom node.
 * Checks if the given object is a dom node.
 * @param {...?|!Array<?>} value
 * @return {boolean}
 */
IsStaticApi.prototype.domNode = function(value) {};

/**
 * Checks if the given array is sorted.
 * Checks if the given array is sorted.
 * @param {...!Array<number>|!Array<!Array<number>>} value
 * @return {boolean}
 */
IsStaticApi.prototype.sorted = function(value) {};

/**
 * Checks if the given date object indicate today.
 * Checks if the given date object indicate today.
 * @param {...!Date|!Array<!Date>} value
 * @return {boolean}
 */
IsStaticApi.prototype.today = function(value) {};

/**
 * Checks if the given date object indicate yesterday.
 * Checks if the given date object indicate yesterday.
 * @param {...!Date|!Array<!Date>} value
 * @return {boolean}
 */
IsStaticApi.prototype.yesterday = function(value) {};

/**
 * Checks if the given date object indicate tomorrow.
 * Checks if the given date object indicate tomorrow.
 * @param {...!Date|!Array<!Date>} value
 * @return {boolean}
 */
IsStaticApi.prototype.tomorrow = function(value) {};

/**
 * Checks if the given date object indicate past.
 * Checks if the given date object indicate past.
 * @param {...!Date|!Array<!Date>} value
 * @return {boolean}
 */
IsStaticApi.prototype.past = function(value) {};

/**
 * Checks if the given date object indicate future.
 * Checks if the given date object indicate future.
 * @param {...!Date|!Array<!Date>} value
 * @return {boolean}
 */
IsStaticApi.prototype.future = function(value) {};

/**
 * Checks if the given year number is a leap year
 * Checks if the given year number is a leap year
 * @param {...number|!Array<number>} value
 * @return {boolean}
 */
IsStaticApi.prototype.leapYear = function(value) {};

/**
 * Checks if the given date objects' day is weekend.
 * Checks if the given date objects' day is weekend.
 * @param {...!Date|!Array<!Date>} value
 * @return {boolean}
 */
IsStaticApi.prototype.weekend = function(value) {};

/**
 * Checks if the given date objects' day is weekday.
 * Checks if the given date objects' day is weekday.
 * @param {...!Date|!Array<!Date>} value
 * @return {boolean}
 */
IsStaticApi.prototype.weekday = function(value) {};
/**
 * @extends {IsStatic}
 * @record
 * @struct
 */
function Is() {}
 /** @type {!IsStatic} */
Is.prototype.not;
 /** @type {!IsStaticApi} */
Is.prototype.any;
 /** @type {!IsStaticApi} */
Is.prototype.all;

/**
 * Override RegExps if you think they suck.
 * Override RegExps if you think they suck.
 * Override RegExps if you think they suck.
 * Override RegExps if you think they suck.
 * Override RegExps if you think they suck.
 * Override RegExps if you think they suck.
 * Override RegExps if you think they suck.
 * Override RegExps if you think they suck.
 * Override RegExps if you think they suck.
 * Override RegExps if you think they suck.
 * Override RegExps if you think they suck.
 * Override RegExps if you think they suck.
 * Override RegExps if you think they suck.
 * Override RegExps if you think they suck.
 * Override RegExps if you think they suck.
 * Override RegExps if you think they suck.
 * @param {!RegExp} value
 * @param {string} regexp
 * @return {boolean}
 */
Is.prototype.setRegexp = function(value, regexp) {};

/**
 * Change namespace of library to prevent name collisions.
 * @return {!Is}
 */
Is.prototype.setNamespace = function() {};
 /** @type {!Is} */
var is;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "is"
/** @const */
tsickle_declare_module.is = {};

/* TODO: ExportAssignment in tsickle_declare_module.is */
