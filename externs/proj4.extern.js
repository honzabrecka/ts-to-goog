/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/proj4/index.d.ts:
/** @const */
var proj4 = {};

/** @typedef {(!Array<number>|!proj4.InterfaceCoordinates)} */
proj4.TemplateCoordinates;
/**
 * @record
 * @struct
 */
proj4.InterfaceCoordinates = function() {};
 /** @type {number} */
proj4.InterfaceCoordinates.prototype.x;
 /** @type {number} */
proj4.InterfaceCoordinates.prototype.y;
 /** @type {number} */
proj4.InterfaceCoordinates.prototype.z;
 /** @type {number} */
proj4.InterfaceCoordinates.prototype.m;
/**
 * @record
 * @struct
 */
proj4.InterfaceDatum = function() {};
 /** @type {number} */
proj4.InterfaceDatum.prototype.datum_type;
 /** @type {number} */
proj4.InterfaceDatum.prototype.a;
 /** @type {number} */
proj4.InterfaceDatum.prototype.b;
 /** @type {number} */
proj4.InterfaceDatum.prototype.es;
 /** @type {number} */
proj4.InterfaceDatum.prototype.ep2;
/**
 * @record
 * @struct
 */
proj4.Static = function() {};

/**
 * @param {(!Array<number>|!proj4.InterfaceCoordinates)} coordinates
 * @return {!Array<number>}
 */
proj4.Static.prototype.forward = function(coordinates) {};

/**
 * @param {(!Array<number>|!proj4.InterfaceCoordinates)} coordinates
 * @return {!Array<number>}
 */
proj4.Static.prototype.inverse = function(coordinates) {};
/**
 * @record
 * @struct
 */
proj4.InterfaceProjection = function() {};
 /** @type {string} */
proj4.InterfaceProjection.prototype.datum;
 /** @type {number} */
proj4.InterfaceProjection.prototype.b;
 /** @type {number} */
proj4.InterfaceProjection.prototype.rf;
 /** @type {number} */
proj4.InterfaceProjection.prototype.sphere;
 /** @type {number} */
proj4.InterfaceProjection.prototype.es;
 /** @type {number} */
proj4.InterfaceProjection.prototype.e;
 /** @type {number} */
proj4.InterfaceProjection.prototype.ep2;

/**
 * @param {(!Array<number>|!proj4.InterfaceCoordinates)} coordinates
 * @return {!Array<number>}
 */
proj4.InterfaceProjection.prototype.forward = function(coordinates) {};

/**
 * @param {(!Array<number>|!proj4.InterfaceCoordinates)} coordinates
 * @return {!Array<number>}
 */
proj4.InterfaceProjection.prototype.inverse = function(coordinates) {};
 /** @type {string} */
proj4.defaultDatum;

/**
 * @param {?} srsCode
 * @param {?=} callback
 * @return {!proj4.InterfaceProjection}
 */
proj4.Proj = function(srsCode, callback) {};
 /** @type {?} */
proj4.WGS84;

/**
 * Depecrated v3
 * @param {number|(string|!Array<number>|!proj4.InterfaceCoordinates)} x_or_coordinates
 * @param {number=} y
 * @param {number=} z
 * @return {!proj4.InterfaceCoordinates}
 */
proj4.Point = function(x_or_coordinates, y, z) {};

/**
 * @param {!Array<number>} array
 * @return {!proj4.InterfaceCoordinates}
 */
proj4.toPoint = function(array) {};

/**
 * @param {string|!Array<!Array<string>>} name
 * @param {string=} projection
 * @return {?}
 */
proj4.defs = function(name, projection) {};

/**
 * @param {!proj4.InterfaceProjection} source
 * @param {!proj4.InterfaceProjection} dest
 * @param {(!Array<number>|!proj4.InterfaceCoordinates)} point
 * @return {?}
 */
proj4.transform = function(source, dest, point) {};

/**
 * @param {!Array<number>} coordinates
 * @param {number} accuracy
 * @return {string}
 */
proj4.mgrs = function(coordinates, accuracy) {};
 /** @type {string} */
proj4.version;

/**
 * @param {string} fromProjection
 * @param {string|(!Array<number>|!proj4.InterfaceCoordinates)=} toProjection_or_coordinates
 * @param {(!Array<number>|!proj4.InterfaceCoordinates)=} coordinates
 * @return {!proj4.Static|!Array<number>}
 */
function proj4(fromProjection, toProjection_or_coordinates, coordinates) {}

/* TODO: ExportAssignment in  */
