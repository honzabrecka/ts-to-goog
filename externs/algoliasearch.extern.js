/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/algoliasearch/index.d.ts:
/** @const */
var algoliasearch = {};
/**
 * @record
 * @struct
 */
algoliasearch.AlgoliaResponse = function() {};
 /** @type {!Array<?>} */
algoliasearch.AlgoliaResponse.prototype.hits;
 /** @type {number} */
algoliasearch.AlgoliaResponse.prototype.page;
 /** @type {number} */
algoliasearch.AlgoliaResponse.prototype.nbHits;
 /** @type {number} */
algoliasearch.AlgoliaResponse.prototype.nbPages;
 /** @type {number} */
algoliasearch.AlgoliaResponse.prototype.hitsPerPage;
 /** @type {number} */
algoliasearch.AlgoliaResponse.prototype.processingTimeMS;
 /** @type {string} */
algoliasearch.AlgoliaResponse.prototype.query;
 /** @type {string} */
algoliasearch.AlgoliaResponse.prototype.params;
/**
 * @record
 * @struct
 */
algoliasearch.AlgoliaClient = function() {};

/**
 * Initialization of the index
 * @param {string} name
 * @return {!algoliasearch.AlgoliaIndex}
 */
algoliasearch.AlgoliaClient.prototype.initIndex = function(name) {};

/**
 * Query on multiple index
 * Query on multiple index
 * @param {{indexName: string, query: string, options: !algoliasearch.AlgoliaQueryParameters}} queries index name, query and query parameters / index name, query and query parameters
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#multiple-queries---multiplequeries
 * @param {function(!Error, ?): void=} cb callback(err, res)
 * https://github.com/algolia/algoliasearch-client-js#multiple-queries---multiplequeries
 * @return {void|!Promise<!algoliasearch.AlgoliaResponse>}
 */
algoliasearch.AlgoliaClient.prototype.search = function(queries, cb) {};

/**
 * clear browser cache
 * https://github.com/algolia/algoliasearch-client-js#cache
 * @return {void}
 */
algoliasearch.AlgoliaClient.prototype.clearCache = function() {};

/**
 * kill alive connections
 * https://github.com/algolia/algoliasearch-client-js#keep-alive
 * @return {void}
 */
algoliasearch.AlgoliaClient.prototype.destroy = function() {};

/**
 * List all your indices along with their associated information (number of entries, disk size, etc.)
 * List all your indices along with their associated information (number of entries, disk size, etc.)
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#list-indices---listindexes
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaClient.prototype.listIndexes = function(cb) {};

/**
 * Delete a specific index
 * Delete a specific index
 * @param {string} name 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#delete-index---deleteindex
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaClient.prototype.deleteIndex = function(name, cb) {};

/**
 * Copy an  index from a specific index to a new one
 * Copy an  index from a specific index to a new one
 * @param {string} from origin index
 * @param {string} to destination index / destination index
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#copy-index---copyindex
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaClient.prototype.copyIndex = function(from, to, cb) {};

/**
 * Move index to a new one (and will overwrite the original one)
 * Move index to a new one (and will overwrite the original one)
 * @param {string} from origin index
 * @param {string} to destination index / destination index
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#move-index---moveindex
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaClient.prototype.moveIndex = function(from, to, cb) {};

/**
 * Generate a public API key
 * @param {string} key api key
 * @param {!algoliasearch.AlgoliaSecuredApiOptions} filters 
 * https://github.com/algolia/algoliasearch-client-js#generate-key---generatesecuredapikey
 * @return {void}
 */
algoliasearch.AlgoliaClient.prototype.generateSecuredApiKey = function(key, filters) {};

/**
 * Perform multiple operations with one API call to reduce latency
 * Perform multiple operations with one API call to reduce latency
 * @param {!algoliasearch.AlgoliaAction} action 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#custom-batch---batch
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaClient.prototype.batch = function(action, cb) {};

/**
 * Lists global API Keys
 * Lists global API Keys
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#backup--export-an-index---browse
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaClient.prototype.listUserKeys = function(cb) {};

/**
 * Add global API Keys
 * Add global API Key
 * Add global API Keys
 * @param {!Array<string>} scopes
 * @param {function(!Error, ?): void|!algoliasearch.AlgoliaUserKeyOptions=} cb_or_options 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#add-user-key---adduserkey
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaClient.prototype.addUserKey = function(scopes, cb_or_options, cb) {};

/**
 * Update global API key
 * Update global API key
 * Update global API key
 * @param {string} key
 * @param {!Array<string>} scopes
 * @param {function(!Error, ?): void|!algoliasearch.AlgoliaUserKeyOptions=} cb_or_options 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#update-user-key---updateuserkey
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaClient.prototype.updateUserKey = function(key, scopes, cb_or_options, cb) {};

/**
 * Gets the rights of a global key
 * Gets the rights of a global key
 * @param {string} key 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#update-user-key---updateuserkey
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaClient.prototype.getUserKeyACL = function(key, cb) {};

/**
 * Deletes a global key
 * Deletes a global key
 * @param {string} key 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#delete-user-key---deleteuserkey
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaClient.prototype.deleteUserKey = function(key, cb) {};

/**
 * Get 1000 last events
 * Get 1000 last events
 * @param {!algoliasearch.LogsOptions} options 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#get-logs---getlogs
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaClient.prototype.getLogs = function(options, cb) {};
/**
 * @record
 * @struct
 */
algoliasearch.AlgoliaIndex = function() {};

/**
 * Gets a specific object
 * Gets specific attributes from an object
 * Gets specific attributes from an object
 * @param {string} objectID
 * @param {function(!Error, ?): void|!Array<string>=} cb_or_attributes 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#find-by-ids---getobjects
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.getObject = function(objectID, cb_or_attributes, cb) {};

/**
 * Gets a list of objects
 * Gets a list of objects
 * @param {!Array<string>} objectIDs 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#find-by-ids---getobjects
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.getObjects = function(objectIDs, cb) {};

/**
 * Add a specific object
 * Add a list of objects
 * Add a list of objects
 * @param {!Object} object without objectID / with objectID
 * @param {function(!Error, ?): void|string=} cb_or_objectID 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#add-objects---addobjects
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.addObject = function(object, cb_or_objectID, cb) {};

/**
 * Add list of objects
 * Add list of objects
 * @param {!Array<?>} objects 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#add-objects---addobjects
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.addObjects = function(objects, cb) {};

/**
 * Add or replace a specific object
 * Add or replace a specific object
 * @param {!Object} object 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#update-objects---saveobjects
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.saveObject = function(object, cb) {};

/**
 * Add or replace several objects
 * Add or replace several objects
 * @param {!Array<?>} objects 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#update-objects---saveobjects
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.saveObjects = function(objects, cb) {};

/**
 * Update parameters of a specific object
 * Update parameters of a specific object
 * @param {!Object} object 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#update-objects---saveobjects
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.partialUpdateObject = function(object, cb) {};

/**
 * Update parameters of a list of objects
 * Update parameters of a list of objects
 * @param {!Array<?>} objects 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#update-objects---saveobjects
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.partialUpdateObjects = function(objects, cb) {};

/**
 * Delete a specific object
 * Delete a specific object
 * @param {string} objectID 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#delete-objects---deleteobjects
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.deleteObject = function(objectID, cb) {};

/**
 * Delete a list of objects
 * Delete a list of objects
 * @param {!Array<string>} objectIDs 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#delete-objects---deleteobjects
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.deleteObjects = function(objectIDs, cb) {};

/**
 * Delete objects that matches the query
 * Delete objects that matches the query
 * Delete objects that matches the query
 * @param {string} query
 * @param {function(!Error, ?): void|!Object=} cb_or_params of the object / of the object
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#delete-by-query---deletebyquery
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.deleteByQuery = function(query, cb_or_params, cb) {};

/**
 * Wait for an indexing task to be compete
 * Wait for an indexing task to be compete
 * @param {number} taskID 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#wait-for-operations---waittask
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.waitTask = function(taskID, cb) {};

/**
 * Get an index settings
 * Get an index settings
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#get-settings---getsettings
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.getSettings = function(cb) {};

/**
 * Set an index settings
 * Set an index settings
 * @param {!algoliasearch.AlgoliaIndexSettings} settings 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#set-settings---setsettings
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.setSettings = function(settings, cb) {};

/**
 * Clear cache of an index
 * https://github.com/algolia/algoliasearch-client-js#cache
 * @return {void}
 */
algoliasearch.AlgoliaIndex.prototype.clearCache = function() {};

/**
 * Clear an index content
 * Clear an index content
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#clear-index---clearindex
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.clearIndex = function(cb) {};

/**
 * Save a synonym object
 * Save a synonym object
 * @param {!algoliasearch.AlgoliaSynonym} synonym
 * @param {!algoliasearch.SynonymOption} options 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#save-synonym---savesynonym
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.saveSynonym = function(synonym, options, cb) {};

/**
 * Save a synonym object
 * Save a synonym object
 * @param {!Array<!algoliasearch.AlgoliaSynonym>} synonyms
 * @param {!algoliasearch.SynonymOption} options 
 * return {Promise}
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.batchSynonyms = function(synonyms, options, cb) {};

/**
 * Delete a specific synonym
 * Delete a specific synonym
 * @param {string} identifier
 * @param {!algoliasearch.SynonymOption} options 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#batch-synonyms---batchsynonyms
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.deleteSynonym = function(identifier, options, cb) {};

/**
 * Clear all synonyms of an index
 * Clear all synonyms of an index
 * @param {!algoliasearch.SynonymOption} options 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#clear-all-synonyms---clearsynonyms
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.clearSynonyms = function(options, cb) {};

/**
 * Get a specific synonym
 * Get a specific synonym
 * @param {string} identifier 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#get-synonym---getsynonym
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.getSynonym = function(identifier, cb) {};

/**
 * Search a synonyms
 * Search a synonyms
 * @param {!algoliasearch.SearchSynonymOptions} options 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#search-synonyms---searchsynonyms
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.searchSynonyms = function(options, cb) {};

/**
 * List index user keys
 * List index user keys
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#list-api-keys---listapikeys
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.listUserKeys = function(cb) {};

/**
 * Add key for this index
 * Add key for this index
 * Add key for this index
 * @param {!Array<string>} scopes
 * @param {function(!Error, ?): void|!algoliasearch.AlgoliaUserKeyOptions=} cb_or_options 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#add-user-key---adduserkey
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.addUserKey = function(scopes, cb_or_options, cb) {};

/**
 * Update a key for this index
 * Update a key for this index
 * Update a key for this index
 * Update a key for this index
 * @param {string} key
 * @param {!Array<string>} scopes 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#update-user-key---updateuserkey
 * @param {function(!Error, ?): void|!algoliasearch.AlgoliaUserKeyOptions=} cb_or_options 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#update-user-key---updateuserkey
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.updateUserKey = function(key, scopes, cb_or_options, cb) {};

/**
 * Gets the rights of an index specific key
 * Gets the rights of an index specific key
 * @param {string} key 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#get-key-permissions---getuserkeyacl
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.getUserKeyACL = function(key, cb) {};

/**
 * Deletes an index specific key
 * Deletes an index specific key
 * @param {string} key 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#delete-user-key---deleteuserkey
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<?>}
 */
algoliasearch.AlgoliaIndex.prototype.deleteUserKey = function(key, cb) {};

/**
 * Search in an index
 * Search in an index
 * @param {!algoliasearch.AlgoliaQueryParameters} params query parameter
 * return {Promise} / query parameter
 * @param {function(!Error, ?): void=} cb
 * @return {!Promise<?>|void}
 */
algoliasearch.AlgoliaIndex.prototype.search = function(params, cb) {};

/**
 * Browse an index
 * Browse an index
 * @param {string} query 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#backup--export-an-index---browse
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<!algoliasearch.AlgoliaBrowseResponse>}
 */
algoliasearch.AlgoliaIndex.prototype.browse = function(query, cb) {};

/**
 * Browse an index from a cursor
 * Browse an index from a cursor
 * @param {string} cursor 
 * return {Promise}
 * https://github.com/algolia/algoliasearch-client-js#backup--export-an-index---browse
 * @param {function(!Error, ?): void=} cb
 * @return {void|!Promise<!algoliasearch.AlgoliaBrowseResponse>}
 */
algoliasearch.AlgoliaIndex.prototype.browseFrom = function(cursor, cb) {};

/**
 * Browse an entire index
 * return Promise
 * https://github.com/algolia/algoliasearch-client-js#backup--export-an-index---browse
 * @return {!Promise<!algoliasearch.AlgoliaResponse>}
 */
algoliasearch.AlgoliaIndex.prototype.browseAll = function() {};
/**
 * @record
 * @struct
 */
algoliasearch.ClientOptions = function() {};
 /** @type {number} */
algoliasearch.ClientOptions.prototype.timeout;
 /** @type {string} */
algoliasearch.ClientOptions.prototype.protocol;
 /** @type {?} */
algoliasearch.ClientOptions.prototype.httpAgent;
 /** @type {{read: !Array<string>, write: !Array<string>}} */
algoliasearch.ClientOptions.prototype.hosts;
/**
 * @record
 * @struct
 */
algoliasearch.LogsOptions = function() {};
 /** @type {number} */
algoliasearch.LogsOptions.prototype.offset;
 /** @type {number} */
algoliasearch.LogsOptions.prototype.length;
 /** @type {boolean} */
algoliasearch.LogsOptions.prototype.onlyErrors;
 /** @type {string} */
algoliasearch.LogsOptions.prototype.type;
/**
 * @record
 * @struct
 */
algoliasearch.AlgoliaAction = function() {};
 /** @type {string} */
algoliasearch.AlgoliaAction.prototype.action;
 /** @type {string} */
algoliasearch.AlgoliaAction.prototype.indexName;
 /** @type {!Object} */
algoliasearch.AlgoliaAction.prototype.body;
/**
 * @record
 * @struct
 */
algoliasearch.AlgoliaUserKeyOptions = function() {};
 /** @type {number} */
algoliasearch.AlgoliaUserKeyOptions.prototype.validity;
 /** @type {number} */
algoliasearch.AlgoliaUserKeyOptions.prototype.maxQueriesPerIPPerHour;
 /** @type {boolean} */
algoliasearch.AlgoliaUserKeyOptions.prototype.maxHitsPerQuery;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaUserKeyOptions.prototype.indexes;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaUserKeyOptions.prototype.referers;
 /** @type {!algoliasearch.AlgoliaQueryParameters} */
algoliasearch.AlgoliaUserKeyOptions.prototype.queryParameters;
 /** @type {string} */
algoliasearch.AlgoliaUserKeyOptions.prototype.description;
/**
 * @record
 * @struct
 */
algoliasearch.SynonymOption = function() {};
 /** @type {boolean} */
algoliasearch.SynonymOption.prototype.forwardToSlaves;
 /** @type {boolean} */
algoliasearch.SynonymOption.prototype.replaceExistingSynonyms;
/**
 * @record
 * @struct
 */
algoliasearch.SearchSynonymOptions = function() {};
 /** @type {string} */
algoliasearch.SearchSynonymOptions.prototype.query;
 /** @type {number} */
algoliasearch.SearchSynonymOptions.prototype.page;
 /** @type {string} */
algoliasearch.SearchSynonymOptions.prototype.type;
 /** @type {number} */
algoliasearch.SearchSynonymOptions.prototype.hitsPerPage;
/**
 * @record
 * @struct
 */
algoliasearch.AlgoliaBrowseResponse = function() {};
 /** @type {string} */
algoliasearch.AlgoliaBrowseResponse.prototype.cursor;
 /** @type {!Array<?>} */
algoliasearch.AlgoliaBrowseResponse.prototype.hits;
 /** @type {string} */
algoliasearch.AlgoliaBrowseResponse.prototype.params;
 /** @type {string} */
algoliasearch.AlgoliaBrowseResponse.prototype.query;
 /** @type {number} */
algoliasearch.AlgoliaBrowseResponse.prototype.processingTimeMS;
/**
 * @record
 * @struct
 */
algoliasearch.AlgoliaSynonym = function() {};
 /** @type {string} */
algoliasearch.AlgoliaSynonym.prototype.objectID;
 /** @type {string} */
algoliasearch.AlgoliaSynonym.prototype.type;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaSynonym.prototype.synonyms;
/**
 * @record
 * @struct
 */
algoliasearch.AlgoliaSecuredApiOptions = function() {};
 /** @type {string} */
algoliasearch.AlgoliaSecuredApiOptions.prototype.filters;
 /** @type {number} */
algoliasearch.AlgoliaSecuredApiOptions.prototype.validUntil;
 /** @type {string} */
algoliasearch.AlgoliaSecuredApiOptions.prototype.restrictIndices;
 /** @type {string} */
algoliasearch.AlgoliaSecuredApiOptions.prototype.userToken;
/**
 * @record
 * @struct
 */
algoliasearch.AlgoliaIndexSettings = function() {};
 /** @type {!Array<string>} */
algoliasearch.AlgoliaIndexSettings.prototype.attributesToIndex;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaIndexSettings.prototype.attributesForFaceting;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaIndexSettings.prototype.unretrievableAttributes;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaIndexSettings.prototype.attributesToRetrieve;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaIndexSettings.prototype.ranking;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaIndexSettings.prototype.customRanking;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaIndexSettings.prototype.slaves;
 /** @type {string} */
algoliasearch.AlgoliaIndexSettings.prototype.maxValuesPerFacet;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaIndexSettings.prototype.attributesToHighlight;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaIndexSettings.prototype.attributesToSnippet;
 /** @type {string} */
algoliasearch.AlgoliaIndexSettings.prototype.highlightPreTag;
 /** @type {string} */
algoliasearch.AlgoliaIndexSettings.prototype.highlightPostTag;
 /** @type {string} */
algoliasearch.AlgoliaIndexSettings.prototype.snippetEllipsisText;
 /** @type {boolean} */
algoliasearch.AlgoliaIndexSettings.prototype.restrictHighlightAndSnippetArrays;
 /** @type {number} */
algoliasearch.AlgoliaIndexSettings.prototype.hitsPerPage;
 /** @type {number} */
algoliasearch.AlgoliaIndexSettings.prototype.minWordSizefor1Typo;
 /** @type {number} */
algoliasearch.AlgoliaIndexSettings.prototype.minWordSizefor2Typos;
 /** @type {?} */
algoliasearch.AlgoliaIndexSettings.prototype.typoTolerance;
 /** @type {boolean} */
algoliasearch.AlgoliaIndexSettings.prototype.allowTyposOnNumericTokens;
 /** @type {boolean} */
algoliasearch.AlgoliaIndexSettings.prototype.ignorePlurals;
 /** @type {string} */
algoliasearch.AlgoliaIndexSettings.prototype.disableTypoToleranceOnAttributes;
 /** @type {string} */
algoliasearch.AlgoliaIndexSettings.prototype.separatorsToIndex;
 /** @type {?} */
algoliasearch.AlgoliaIndexSettings.prototype.queryType;
 /** @type {string} */
algoliasearch.AlgoliaIndexSettings.prototype.removeWordsIfNoResults;
 /** @type {boolean} */
algoliasearch.AlgoliaIndexSettings.prototype.advancedSyntax;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaIndexSettings.prototype.optionalWords;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaIndexSettings.prototype.removeStopWords;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaIndexSettings.prototype.disablePrefixOnAttributes;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaIndexSettings.prototype.disableExactOnAttributes;
 /** @type {string} */
algoliasearch.AlgoliaIndexSettings.prototype.exactOnSingleWordQuery;
 /** @type {?} */
algoliasearch.AlgoliaIndexSettings.prototype.alternativesAsExact;
 /** @type {string} */
algoliasearch.AlgoliaIndexSettings.prototype.attributeForDistinct;
 /** @type {?} */
algoliasearch.AlgoliaIndexSettings.prototype.distinct;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaIndexSettings.prototype.numericAttributesToIndex;
 /** @type {boolean} */
algoliasearch.AlgoliaIndexSettings.prototype.allowCompressionOfIntegerArray;
 /** @type {!Array<?>} */
algoliasearch.AlgoliaIndexSettings.prototype.altCorrections;
 /** @type {number} */
algoliasearch.AlgoliaIndexSettings.prototype.minProximity;
 /** @type {?} */
algoliasearch.AlgoliaIndexSettings.prototype.placeholders;
/**
 * @record
 * @struct
 */
algoliasearch.AlgoliaQueryParameters = function() {};
 /** @type {string} */
algoliasearch.AlgoliaQueryParameters.prototype.query;
 /** @type {string} */
algoliasearch.AlgoliaQueryParameters.prototype.filters;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaQueryParameters.prototype.attributesToRetrieve;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaQueryParameters.prototype.restrictSearchableAttributes;
 /** @type {string} */
algoliasearch.AlgoliaQueryParameters.prototype.facets;
 /** @type {string} */
algoliasearch.AlgoliaQueryParameters.prototype.maxValuesPerFacet;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaQueryParameters.prototype.attributesToHighlight;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaQueryParameters.prototype.attributesToSnippet;
 /** @type {string} */
algoliasearch.AlgoliaQueryParameters.prototype.highlightPreTag;
 /** @type {string} */
algoliasearch.AlgoliaQueryParameters.prototype.highlightPostTag;
 /** @type {string} */
algoliasearch.AlgoliaQueryParameters.prototype.snippetEllipsisText;
 /** @type {boolean} */
algoliasearch.AlgoliaQueryParameters.prototype.restrictHighlightAndSnippetArrays;
 /** @type {number} */
algoliasearch.AlgoliaQueryParameters.prototype.hitsPerPage;
 /** @type {number} */
algoliasearch.AlgoliaQueryParameters.prototype.page;
 /** @type {number} */
algoliasearch.AlgoliaQueryParameters.prototype.offset;
 /** @type {number} */
algoliasearch.AlgoliaQueryParameters.prototype.length;
 /** @type {number} */
algoliasearch.AlgoliaQueryParameters.prototype.minWordSizefor1Typo;
 /** @type {number} */
algoliasearch.AlgoliaQueryParameters.prototype.minWordSizefor2Typos;
 /** @type {boolean} */
algoliasearch.AlgoliaQueryParameters.prototype.typoTolerance;
 /** @type {boolean} */
algoliasearch.AlgoliaQueryParameters.prototype.allowTyposOnNumericTokens;
 /** @type {boolean} */
algoliasearch.AlgoliaQueryParameters.prototype.ignorePlurals;
 /** @type {string} */
algoliasearch.AlgoliaQueryParameters.prototype.disableTypoToleranceOnAttributes;
 /** @type {string} */
algoliasearch.AlgoliaQueryParameters.prototype.aroundLatLng;
 /** @type {string} */
algoliasearch.AlgoliaQueryParameters.prototype.aroundLatLngViaIP;
 /** @type {?} */
algoliasearch.AlgoliaQueryParameters.prototype.aroundRadius;
 /** @type {number} */
algoliasearch.AlgoliaQueryParameters.prototype.aroundPrecision;
 /** @type {number} */
algoliasearch.AlgoliaQueryParameters.prototype.minimumAroundRadius;
 /** @type {string} */
algoliasearch.AlgoliaQueryParameters.prototype.insideBoundingBox;
 /** @type {?} */
algoliasearch.AlgoliaQueryParameters.prototype.queryType;
 /** @type {string} */
algoliasearch.AlgoliaQueryParameters.prototype.insidePolygon;
 /** @type {string} */
algoliasearch.AlgoliaQueryParameters.prototype.removeWordsIfNoResults;
 /** @type {boolean} */
algoliasearch.AlgoliaQueryParameters.prototype.advancedSyntax;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaQueryParameters.prototype.optionalWords;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaQueryParameters.prototype.removeStopWords;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaQueryParameters.prototype.disableExactOnAttributes;
 /** @type {string} */
algoliasearch.AlgoliaQueryParameters.prototype.exactOnSingleWordQuery;
 /** @type {?} */
algoliasearch.AlgoliaQueryParameters.prototype.alternativesAsExact;
 /** @type {?} */
algoliasearch.AlgoliaQueryParameters.prototype.distinct;
 /** @type {boolean} */
algoliasearch.AlgoliaQueryParameters.prototype.getRankingInfo;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaQueryParameters.prototype.numericAttributesToIndex;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaQueryParameters.prototype.numericFilters;
 /** @type {string} */
algoliasearch.AlgoliaQueryParameters.prototype.tagFilters;
 /** @type {string} */
algoliasearch.AlgoliaQueryParameters.prototype.facetFilters;
 /** @type {boolean} */
algoliasearch.AlgoliaQueryParameters.prototype.analytics;
 /** @type {!Array<string>} */
algoliasearch.AlgoliaQueryParameters.prototype.analyticsTags;
 /** @type {boolean} */
algoliasearch.AlgoliaQueryParameters.prototype.synonyms;
 /** @type {boolean} */
algoliasearch.AlgoliaQueryParameters.prototype.replaceSynonymsInHighlight;
 /** @type {number} */
algoliasearch.AlgoliaQueryParameters.prototype.minProximity;

/**
 * @param {string} applicationId
 * @param {string} apiKey
 * @param {!algoliasearch.ClientOptions=} options
 * @return {!algoliasearch.AlgoliaClient}
 */
function algoliasearch(applicationId, apiKey, options) {}

/* TODO: ExportAssignment in  */
