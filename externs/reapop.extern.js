/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/reapop/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/**
 * Add a notification (thunk action creator)
 * 
 * We use a thunk here to create an ADD_NOTIFICATION action
 * and only return the notification object.
 * @param {?} notification
 * @return {?}
 */
function addNotification(notification) {}

/**
 * Update a notification (thunk action creator)
 * 
 * We use a thunk here to create an UPDATE_NOTIFICATION action
 * and only return the notification object.
 * @param {?} notification
 * @return {?}
 */
function updateNotification(notification) {}

/**
 * Remove a notification (action creator)
 * @param {?} notification
 * @return {?}
 */
function removeNotification(notification) {}

/**
 * Remove all notifications (action creator)
 * @return {?}
 */
function removeNotifications() {}
/**
 * @record
 * @struct
 */
function Actions() {}

/**
 * @param {?} notification
 * @return {?}
 */
Actions.prototype.addNotification = function(notification) {};

/**
 * @param {?} notification
 * @return {?}
 */
Actions.prototype.updateNotification = function(notification) {};

/**
 * @param {?} notification
 * @return {?}
 */
Actions.prototype.removeNotification = function(notification) {};

/**
 * @return {?}
 */
Actions.prototype.removeNotifications = function() {};
 /** @type {?} */
var actions;

/** @typedef {string} */
var ADD_NOTIFICATION;

/** @typedef {string} */
var UPDATE_NOTIFICATION;

/** @typedef {string} */
var REMOVE_NOTIFICATION;

/** @typedef {string} */
var REMOVE_NOTIFICATIONS;

/** @typedef {string} */
var ActionTypes;
/**
 * @record
 * @struct
 */
function Types() {}
 /** @type {string} */
Types.prototype.ADD_NOTIFICATION;
 /** @type {string} */
Types.prototype.UPDATE_NOTIFICATION;
 /** @type {string} */
Types.prototype.REMOVE_NOTIFICATION;
 /** @type {string} */
Types.prototype.REMOVE_NOTIFICATIONS;
 /** @type {?} */
var types;

/**
 * @param {?=} defaultNotification
 * @return {?}
 */
function reducer(defaultNotification) {}

/** @typedef {string} */
var DEFAULT_STATUS;

/** @typedef {string} */
var INFO_STATUS;

/** @typedef {string} */
var SUCCESS_STATUS;

/** @typedef {string} */
var WARNING_STATUS;

/** @typedef {string} */
var ERROR_STATUS;

/** @typedef {string} */
var STATUSES;
/**
 * @record
 * @struct
 */
function STATUS_TYPES() {}
 /** @type {string} */
STATUS_TYPES.prototype.default;
 /** @type {string} */
STATUS_TYPES.prototype.info;
 /** @type {string} */
STATUS_TYPES.prototype.success;
 /** @type {string} */
STATUS_TYPES.prototype.warning;
 /** @type {string} */
STATUS_TYPES.prototype.error;
 /** @type {?} */
var STATUS;

/** @typedef {string} */
var TOP;

/** @typedef {string} */
var TOP_CENTER;

/** @typedef {string} */
var TOP_LEFT_POSITION;

/** @typedef {string} */
var TOP_RIGHT_POSITION;

/** @typedef {string} */
var BOTTOM;

/** @typedef {string} */
var BOTTOM_CENTER;

/** @typedef {string} */
var BOTTOM_LEFT_POSITION;

/** @typedef {string} */
var BOTTOM_RIGHT_POSITION;

/** @typedef {string} */
var POSITION;
/**
 * @record
 * @struct
 */
function POSITIONS_TYPES() {}
 /** @type {string} */
POSITIONS_TYPES.prototype.top;
 /** @type {string} */
POSITIONS_TYPES.prototype.topCenter;
 /** @type {string} */
POSITIONS_TYPES.prototype.topLeft;
 /** @type {string} */
POSITIONS_TYPES.prototype.topRight;
 /** @type {string} */
POSITIONS_TYPES.prototype.bottom;
 /** @type {string} */
POSITIONS_TYPES.prototype.bottomCenter;
 /** @type {string} */
POSITIONS_TYPES.prototype.bottomLeft;
 /** @type {string} */
POSITIONS_TYPES.prototype.bottomRight;
 /** @type {?} */
var POSITIONS;
/**
 * @record
 * @struct
 */
function Button() {}
 /** @type {string} */
Button.prototype.name;
 /** @type {boolean} */
Button.prototype.primary;

/**
 * @return {void}
 */
Button.prototype.onClick = function() {};
/**
 * @record
 * @struct
 */
function Notification() {}
 /** @type {(string|number)} */
Notification.prototype.id;
 /** @type {string} */
Notification.prototype.title;
 /** @type {string} */
Notification.prototype.message;
 /** @type {string} */
Notification.prototype.image;
 /** @type {(string|number)} */
Notification.prototype.status;
 /** @type {string} */
Notification.prototype.position;
 /** @type {boolean} */
Notification.prototype.dismissible;
 /** @type {number} */
Notification.prototype.dismissAfter;
 /** @type {boolean} */
Notification.prototype.closeButton;
 /** @type {!Array<?>} */
Notification.prototype.buttons;
 /** @type {boolean} */
Notification.prototype.allowHTML;

/**
 * @return {void}
 */
Notification.prototype.onAdd = function() {};

/**
 * @return {void}
 */
Notification.prototype.onRemove = function() {};
 /** @type {?} */
var DEFAULT_NOTIFICATION;
/**
 * @record
 * @struct
 */
function NotificationSystemTheme() {}
 /** @type {number} */
NotificationSystemTheme.prototype.smallScreenMin;
 /** @type {?} */
NotificationSystemTheme.prototype.notificationsSystem;
 /** @type {?} */
NotificationSystemTheme.prototype.notificationsContainerClassName;
 /** @type {?} */
NotificationSystemTheme.prototype.notificationsContainerTransition;
 /** @type {?} */
NotificationSystemTheme.prototype.notificationClassName;
/**
 * @record
 * @struct
 */
function NotificationSystemProps() {}
 /** @type {?} */
NotificationSystemProps.prototype.theme;

/**
 * @param {?} notification
 * @return {boolean}
 */
NotificationSystemProps.prototype.filter = function(notification) {};
/**
 * @extends {React.Component}
 * @constructor
 * @struct
 */
function NotificationSystem() {}

/* TODO: ExportAssignment in  */
