/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/angular-route/index.d.ts:
 /** @type {string} */
var _;

/* TODO: ExportAssignment in  */

/* TODO: ImportDeclaration in  */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "angular"
/** @const */
tsickle_declare_module.angular.route = {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.route.IRouteParamsService = function() {};

/* TODO: IndexSignature: tsickle_declare_module.angular.route */
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.route.IRouteService = function() {};
 /** @type {?} */
tsickle_declare_module.angular.route.IRouteService.prototype.routes;
 /** @type {!route.ICurrentRoute} */
tsickle_declare_module.angular.route.IRouteService.prototype.current;

/**
 * @return {void}
 */
tsickle_declare_module.angular.route.IRouteService.prototype.reload = function() {};

/**
 * Causes $route service to update the current URL, replacing current route parameters with those specified in newParams.
 * Provided property names that match the route's path segment definitions will be interpolated into the
 * location's path, while remaining properties will be treated as query params.
 * 
 * @param {!Object<string,string>} newParams Object.<string, string> mapping of URL parameter names to values
 * @return {void}
 */
tsickle_declare_module.angular.route.IRouteService.prototype.updateParams = function(newParams) {};

/** @typedef {(!Function|!Array<(string|!Function)>)} */
tsickle_declare_module.angular.route.InlineAnnotatedFunction;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.route.IRoute = function() {};
 /** @type {(string|!Function|!Array<(string|!Function)>)} */
tsickle_declare_module.angular.route.IRoute.prototype.controller;
 /** @type {string} */
tsickle_declare_module.angular.route.IRoute.prototype.controllerAs;
 /** @type {string} */
tsickle_declare_module.angular.route.IRoute.prototype.name;
 /** @type {(string|function(!route.IRouteParamsService): string)} */
tsickle_declare_module.angular.route.IRoute.prototype.template;
 /** @type {(string|function(!route.IRouteParamsService): string)} */
tsickle_declare_module.angular.route.IRoute.prototype.templateUrl;
 /** @type {!Object<string,?>} */
tsickle_declare_module.angular.route.IRoute.prototype.resolve;
 /** @type {(string|function(!route.IRouteParamsService, string, ?): string)} */
tsickle_declare_module.angular.route.IRoute.prototype.redirectTo;
 /** @type {boolean} */
tsickle_declare_module.angular.route.IRoute.prototype.reloadOnSearch;
 /** @type {boolean} */
tsickle_declare_module.angular.route.IRoute.prototype.caseInsensitiveMatch;
/**
 * @extends {route.IRoute}
 * @record
 * @struct
 */
tsickle_declare_module.angular.route.ICurrentRoute = function() {};
 /** @type {?} */
tsickle_declare_module.angular.route.ICurrentRoute.prototype.locals;
 /** @type {?} */
tsickle_declare_module.angular.route.ICurrentRoute.prototype.params;
/**
 * @extends {angular.IServiceProvider}
 * @record
 * @struct
 */
tsickle_declare_module.angular.route.IRouteProvider = function() {};
 /** @type {boolean} */
tsickle_declare_module.angular.route.IRouteProvider.prototype.caseInsensitiveMatch;

/**
 * Sets route definition that will be used on route change when no other route definition is matched.
 * 
 * \@params Mapping information to be assigned to $route.current.
 * @param {!route.IRoute} params
 * @return {!route.IRouteProvider}
 */
tsickle_declare_module.angular.route.IRouteProvider.prototype.otherwise = function(params) {};

/**
 * Adds a new route definition to the $route service.
 * 
 * @param {string} path Route path (matched against $location.path). If $location.path contains redundant trailing slash or is missing one, the route will still match and the $location.path will be updated to add or drop the trailing slash to exactly match the route definition.
 * 
 * - path can contain named groups starting with a colon: e.g. :name. All characters up to the next slash are matched and stored in $routeParams under the given name when the route matches.
 * - path can contain named groups starting with a colon and ending with a star: e.g.:name*. All characters are eagerly stored in $routeParams under the given name when the route matches.
 * - path can contain optional named groups with a question mark: e.g.:name?.
 * 
 * For example, routes like /color/:color/largecode/:largecode*\/edit will match /color/brown/largecode/code/with/slashes/edit and extract: color: brown and largecode: code/with/slashes.
 * 
 * @param {!route.IRoute} route Mapping information to be assigned to $route.current on route match.
 * @return {!route.IRouteProvider}
 */
tsickle_declare_module.angular.route.IRouteProvider.prototype.when = function(path, route) {};
