/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/inflection/index.d.ts:
/**
 * @record
 * @struct
 */
function Inflection() {}

/**
 * @template T, T2
 * @param {!Array<?>} arr
 * @param {?} item
 * @param {number=} from_index
 * @param {?=} compare_func
 * @return {number}
 */
Inflection.prototype.indexOf = function(arr, item, from_index, compare_func) {};

/**
 * @param {string} str
 * @param {string=} plural
 * @return {string}
 */
Inflection.prototype.pluralize = function(str, plural) {};

/**
 * @param {string} str
 * @param {string=} singular
 * @return {string}
 */
Inflection.prototype.singularize = function(str, singular) {};

/**
 * @param {string} str
 * @param {number} count
 * @param {string=} singular
 * @param {string=} plural
 * @return {string}
 */
Inflection.prototype.inflect = function(str, count, singular, plural) {};

/**
 * @param {string} str
 * @param {boolean=} low_first_letter
 * @return {string}
 */
Inflection.prototype.camelize = function(str, low_first_letter) {};

/**
 * @param {string} str
 * @param {boolean=} all_upper_case
 * @return {string}
 */
Inflection.prototype.underscore = function(str, all_upper_case) {};

/**
 * @param {string} str
 * @param {boolean=} low_first_letter
 * @return {string}
 */
Inflection.prototype.humanize = function(str, low_first_letter) {};

/**
 * @param {string} str
 * @return {string}
 */
Inflection.prototype.capitalize = function(str) {};

/**
 * @param {string} str
 * @return {string}
 */
Inflection.prototype.dasherize = function(str) {};

/**
 * @param {string} str
 * @return {string}
 */
Inflection.prototype.titleize = function(str) {};

/**
 * @param {string} str
 * @return {string}
 */
Inflection.prototype.demodulize = function(str) {};

/**
 * @param {string} str
 * @return {string}
 */
Inflection.prototype.tableize = function(str) {};

/**
 * @param {string} str
 * @return {string}
 */
Inflection.prototype.classify = function(str) {};

/**
 * @param {string} str
 * @param {boolean=} drop_id_ubar
 * @return {string}
 */
Inflection.prototype.foreign_key = function(str, drop_id_ubar) {};

/**
 * @param {string} str
 * @return {string}
 */
Inflection.prototype.ordinalize = function(str) {};

/**
 * @param {string} str
 * @param {!Array<string>} arr
 * @return {string}
 */
Inflection.prototype.transform = function(str, arr) {};
 /** @type {?} */
var inflection;

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
