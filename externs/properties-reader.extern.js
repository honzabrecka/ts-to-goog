/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/properties-reader/index.d.ts:
/** @const */
var PropertiesReader = {};

/** @typedef {(string|number|boolean)} */
PropertiesReader.Value;
/**
 * @record
 * @struct
 */
PropertiesReader.Reader = function() {};
 /** @type {number} */
PropertiesReader.Reader.prototype.length;

/**
 * @param {string} propertyName
 * @return {(string|number|boolean)}
 */
PropertiesReader.Reader.prototype.get = function(propertyName) {};

/**
 * @param {string} propertyName
 * @return {string}
 */
PropertiesReader.Reader.prototype.getRaw = function(propertyName) {};

/**
 * @return {!Object}
 */
PropertiesReader.Reader.prototype.path = function() {};

/**
 * @param {string} path
 * @return {!PropertiesReader.Reader}
 */
PropertiesReader.Reader.prototype.append = function(path) {};

/**
 * @param {string} properties
 * @return {!PropertiesReader.Reader}
 */
PropertiesReader.Reader.prototype.read = function(properties) {};

/**
 * @param {string} propertyName
 * @param {(string|number|boolean)} value
 * @return {!PropertiesReader.Reader}
 */
PropertiesReader.Reader.prototype.set = function(propertyName, value) {};

/**
 * @template T
 * @param {function(string, (string|number|boolean)): void} iterator
 * @param {T=} scope
 * @return {!PropertiesReader.Reader}
 */
PropertiesReader.Reader.prototype.each = function(iterator, scope) {};

/**
 * @return {!Object<string,(string|number|boolean)>}
 */
PropertiesReader.Reader.prototype.getAllProperties = function() {};

/**
 * @return {!PropertiesReader.Reader}
 */
PropertiesReader.Reader.prototype.clone = function() {};

/**
 * @param {string} path
 * @return {!PropertiesReader.Reader}
 */
function PropertiesReader(path) {}

/* TODO: ExportAssignment in  */
