/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/fluxxor/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */
/** @const */
var Fluxxor = {};

/**
 * @constructor
 * @struct
 * @param {?} stores
 */
Fluxxor.Dispatcher = function(stores) {};

/**
 * @param {string} name
 * @param {!Fluxxor.Store} store
 * @return {void}
 */
Fluxxor.Dispatcher.prototype.addStore = function(name, store) {};

/**
 * @param {!Function} action
 * @return {void}
 */
Fluxxor.Dispatcher.prototype.dispatch = function(action) {};

/**
 * @param {!Function} action
 * @return {void}
 */
Fluxxor.Dispatcher.prototype.doDispatchLoop = function(action) {};

/**
 * @param {!Fluxxor.Store} store
 * @param {!Array<string>} stores
 * @param {!Function} fn
 * @return {void}
 */
Fluxxor.Dispatcher.prototype.waitForStores = function(store, stores, fn) {};

/**
 * @constructor
 * @struct
 * @param {?} stores
 * @param {?} actions
 */
Fluxxor.Flux = function(stores, actions) {};
 /** @type {?} */
Fluxxor.Flux.prototype.stores;
 /** @type {?} */
Fluxxor.Flux.prototype.actions;

/**
 * @param {?} actions
 * @return {void}
 */
Fluxxor.Flux.prototype.addActions = function(actions) {};

/**
 * @param {...(string|!Function)|!Array<string>} args_or_names
 * @return {void}
 */
Fluxxor.Flux.prototype.addAction = function(args_or_names) {};

/**
 * @param {string} name
 * @return {?}
 */
Fluxxor.Flux.prototype.store = function(name) {};

/**
 * @param {string} name
 * @param {!Fluxxor.Store} store
 * @return {void}
 */
Fluxxor.Flux.prototype.addStore = function(name, store) {};

/**
 * @param {?} stores
 * @return {void}
 */
Fluxxor.Flux.prototype.addStores = function(stores) {};
/**
 * @record
 * @struct
 */
Fluxxor.Store = function() {};

/**
 * @param {...(string|!Function)|!Array<(string|!Function)>} args
 * @return {void}
 */
Fluxxor.Store.prototype.bindActions = function(args) {};

/**
 * @param {!Array<string>} stores
 * @param {!Function} fn
 * @return {void}
 */
Fluxxor.Store.prototype.waitFor = function(stores, fn) {};
/**
 * @record
 * @struct
 */
Fluxxor.StoreSpec = function() {};
 /** @type {?} */
Fluxxor.StoreSpec.prototype.actions;

/**
 * @param {?=} instance
 * @param {!Object=} options
 * @return {void}
 */
Fluxxor.StoreSpec.prototype.initialize = function(instance, options) {};
/**
 * @record
 * @struct
 */
Fluxxor.StoreClass = function() {};

/* TODO: ConstructSignature: Fluxxor */
/**
 * @record
 * @struct
 */
Fluxxor.Context = function() {};
 /** @type {!Fluxxor.Flux} */
Fluxxor.Context.prototype.flux;
/**
 * @record
 * @struct
 */
Fluxxor.FluxMixin = function() {};

/**
 * @return {!Fluxxor.Flux}
 */
Fluxxor.FluxMixin.prototype.getFlux = function() {};
/**
 * @record
 * @struct
 */
Fluxxor.FluxChildMixin = function() {};

/**
 * @return {!Fluxxor.Flux}
 */
Fluxxor.FluxChildMixin.prototype.getFlux = function() {};
/**
 * @record
 * @struct
 */
Fluxxor.StoreWatchMixin = function() {};

/**
 * @return {StoreState}
 */
Fluxxor.StoreWatchMixin.prototype.getStateFromFlux = function() {};

/**
 * @param {?} react
 * @return {?}
 */
Fluxxor.FluxMixin = function(react) {};

/**
 * @param {?} react
 * @return {?}
 */
Fluxxor.FluxChildMixin = function(react) {};

/**
 * @template StoreState
 * @param {...string} storeNames
 * @return {?<StoreState>}
 */
Fluxxor.StoreWatchMixin = function(storeNames) {};

/**
 * @param {!Fluxxor.StoreSpec} spec
 * @return {!Fluxxor.StoreClass}
 */
Fluxxor.createStore = function(spec) {};
 /** @type {string} */
Fluxxor.version;

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
