/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/date.format.js/index.d.ts:

/**
 * Returns a string representation of a date. The format of the string depends on the locale.
 * @return {string}
 */
Date.prototype.toString = function() {};

/**
 * Returns a date as a string value.
 * @return {string}
 */
Date.prototype.toDateString = function() {};

/**
 * Returns a time as a string value.
 * @return {string}
 */
Date.prototype.toTimeString = function() {};

/**
 * Returns a value as a string value appropriate to the host environment's current locale.
 * @return {string}
 */
Date.prototype.toLocaleString = function() {};

/**
 * Returns a date as a string value appropriate to the host environment's current locale.
 * @return {string}
 */
Date.prototype.toLocaleDateString = function() {};

/**
 * Returns a time as a string value appropriate to the host environment's current locale.
 * @return {string}
 */
Date.prototype.toLocaleTimeString = function() {};

/**
 * Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC.
 * @return {number}
 */
Date.prototype.valueOf = function() {};

/**
 * Gets the time value in milliseconds.
 * @return {number}
 */
Date.prototype.getTime = function() {};

/**
 * Gets the year, using local time.
 * @return {number}
 */
Date.prototype.getFullYear = function() {};

/**
 * Gets the year using Universal Coordinated Time (UTC).
 * @return {number}
 */
Date.prototype.getUTCFullYear = function() {};

/**
 * Gets the month, using local time.
 * @return {number}
 */
Date.prototype.getMonth = function() {};

/**
 * Gets the month of a Date object using Universal Coordinated Time (UTC).
 * @return {number}
 */
Date.prototype.getUTCMonth = function() {};

/**
 * Gets the day-of-the-month, using local time.
 * @return {number}
 */
Date.prototype.getDate = function() {};

/**
 * Gets the day-of-the-month, using Universal Coordinated Time (UTC).
 * @return {number}
 */
Date.prototype.getUTCDate = function() {};

/**
 * Gets the day of the week, using local time.
 * @return {number}
 */
Date.prototype.getDay = function() {};

/**
 * Gets the day of the week using Universal Coordinated Time (UTC).
 * @return {number}
 */
Date.prototype.getUTCDay = function() {};

/**
 * Gets the hours in a date, using local time.
 * @return {number}
 */
Date.prototype.getHours = function() {};

/**
 * Gets the hours value in a Date object using Universal Coordinated Time (UTC).
 * @return {number}
 */
Date.prototype.getUTCHours = function() {};

/**
 * Gets the minutes of a Date object, using local time.
 * @return {number}
 */
Date.prototype.getMinutes = function() {};

/**
 * Gets the minutes of a Date object using Universal Coordinated Time (UTC).
 * @return {number}
 */
Date.prototype.getUTCMinutes = function() {};

/**
 * Gets the seconds of a Date object, using local time.
 * @return {number}
 */
Date.prototype.getSeconds = function() {};

/**
 * Gets the seconds of a Date object using Universal Coordinated Time (UTC).
 * @return {number}
 */
Date.prototype.getUTCSeconds = function() {};

/**
 * Gets the milliseconds of a Date, using local time.
 * @return {number}
 */
Date.prototype.getMilliseconds = function() {};

/**
 * Gets the milliseconds of a Date object using Universal Coordinated Time (UTC).
 * @return {number}
 */
Date.prototype.getUTCMilliseconds = function() {};

/**
 * Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC).
 * @return {number}
 */
Date.prototype.getTimezoneOffset = function() {};

/**
 * Sets the date and time value in the Date object.
 * @param {number} time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.
 * @return {void}
 */
Date.prototype.setTime = function(time) {};

/**
 * Sets the milliseconds value in the Date object using local time.
 * @param {number} ms A numeric value equal to the millisecond value.
 * @return {void}
 */
Date.prototype.setMilliseconds = function(ms) {};

/**
 * Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).
 * @param {number} ms A numeric value equal to the millisecond value.
 * @return {void}
 */
Date.prototype.setUTCMilliseconds = function(ms) {};

/**
 * Sets the seconds value in the Date object using local time.
 * @param {number} sec A numeric value equal to the seconds value.
 * @param {number=} ms A numeric value equal to the milliseconds value.
 * @return {void}
 */
Date.prototype.setSeconds = function(sec, ms) {};

/**
 * Sets the seconds value in the Date object using Universal Coordinated Time (UTC).
 * @param {number} sec A numeric value equal to the seconds value.
 * @param {number=} ms A numeric value equal to the milliseconds value.
 * @return {void}
 */
Date.prototype.setUTCSeconds = function(sec, ms) {};

/**
 * Sets the minutes value in the Date object using local time.
 * @param {number} min A numeric value equal to the minutes value.
 * @param {number=} sec A numeric value equal to the seconds value.
 * @param {number=} ms A numeric value equal to the milliseconds value.
 * @return {void}
 */
Date.prototype.setMinutes = function(min, sec, ms) {};

/**
 * Sets the minutes value in the Date object using Universal Coordinated Time (UTC).
 * @param {number} min A numeric value equal to the minutes value.
 * @param {number=} sec A numeric value equal to the seconds value.
 * @param {number=} ms A numeric value equal to the milliseconds value.
 * @return {void}
 */
Date.prototype.setUTCMinutes = function(min, sec, ms) {};

/**
 * Sets the hour value in the Date object using local time.
 * @param {number} hours A numeric value equal to the hours value.
 * @param {number=} min A numeric value equal to the minutes value.
 * @param {number=} sec A numeric value equal to the seconds value.
 * @param {number=} ms A numeric value equal to the milliseconds value.
 * @return {void}
 */
Date.prototype.setHours = function(hours, min, sec, ms) {};

/**
 * Sets the hours value in the Date object using Universal Coordinated Time (UTC).
 * @param {number} hours A numeric value equal to the hours value.
 * @param {number=} min A numeric value equal to the minutes value.
 * @param {number=} sec A numeric value equal to the seconds value.
 * @param {number=} ms A numeric value equal to the milliseconds value.
 * @return {void}
 */
Date.prototype.setUTCHours = function(hours, min, sec, ms) {};

/**
 * Sets the numeric day-of-the-month value of the Date object using local time.
 * @param {number} date A numeric value equal to the day of the month.
 * @return {void}
 */
Date.prototype.setDate = function(date) {};

/**
 * Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).
 * @param {number} date A numeric value equal to the day of the month.
 * @return {void}
 */
Date.prototype.setUTCDate = function(date) {};

/**
 * Sets the month value in the Date object using local time.
 * @param {number} month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.
 * @param {number=} date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.
 * @return {void}
 */
Date.prototype.setMonth = function(month, date) {};

/**
 * Sets the month value in the Date object using Universal Coordinated Time (UTC).
 * @param {number} month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.
 * @param {number=} date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.
 * @return {void}
 */
Date.prototype.setUTCMonth = function(month, date) {};

/**
 * Sets the year of the Date object using local time.
 * @param {number} year A numeric value for the year.
 * @param {number=} month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.
 * @param {number=} date A numeric value equal for the day of the month.
 * @return {void}
 */
Date.prototype.setFullYear = function(year, month, date) {};

/**
 * Sets the year value in the Date object using Universal Coordinated Time (UTC).
 * @param {number} year A numeric value equal to the year.
 * @param {number=} month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.
 * @param {number=} date A numeric value equal to the day of the month.
 * @return {void}
 */
Date.prototype.setUTCFullYear = function(year, month, date) {};

/**
 * Returns a date converted to a string using Universal Coordinated Time (UTC).
 * @return {string}
 */
Date.prototype.toUTCString = function() {};

/**
 * Returns a date as a string value in ISO format.
 * @return {string}
 */
Date.prototype.toISOString = function() {};

/**
 * Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization.
 * @param {?=} key
 * @return {string}
 */
Date.prototype.toJSON = function(key) {};

/**
 * This is a convenience addition to the Date prototype
 * Returns a formatted version of the date.
 * The mask defaults to dateFormat.masks.default.
 * @param {string=} mask
 * @param {boolean=} utc
 * @return {string}
 */
Date.prototype.format = function(mask, utc) {};
/**
 * @record
 * @struct
 */
function DateFormatMasks() {}

/* TODO: PropertySignature: "default" */
 /** @type {string} */
DateFormatMasks.prototype.shortDate;
 /** @type {string} */
DateFormatMasks.prototype.mediumDate;
 /** @type {string} */
DateFormatMasks.prototype.longDate;
 /** @type {string} */
DateFormatMasks.prototype.fullDate;
 /** @type {string} */
DateFormatMasks.prototype.shortTime;
 /** @type {string} */
DateFormatMasks.prototype.mediumTime;
 /** @type {string} */
DateFormatMasks.prototype.longTime;
 /** @type {string} */
DateFormatMasks.prototype.isoDate;
 /** @type {string} */
DateFormatMasks.prototype.isoTime;
 /** @type {string} */
DateFormatMasks.prototype.isoDateTime;
 /** @type {string} */
DateFormatMasks.prototype.isoUtcDateTime;
/**
 * @record
 * @struct
 */
function DateFormatI18n() {}
 /** @type {!Array<string>} */
DateFormatI18n.prototype.dayNames;
 /** @type {!Array<string>} */
DateFormatI18n.prototype.monthNames;
 /** @type {?} */
var dateFormat;
