/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/easy-api-request/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/**
 * @param {{name: ?, config: {url: string, internal: boolean, headers: !Array<string>, cookies: !Array<string>, replyCookies: !Array<string>, jSend: boolean, opts: !Object}}} opts
 * @return {void}
 */
function create(opts) {}
/**
 * @record
 * @struct
 */
function Result() {}
 /** @type {!IncomingMessage} */
Result.prototype.response;
 /** @type {?} */
Result.prototype.body;
 /** @type {?} */
Result.prototype.err;
 /** @type {?} */
Result.prototype.data;

/**
 * @constructor
 * @struct
 * @param {?} opts
 */
function BaseRequest(opts) {}
 /** @type {!request.Request} */
BaseRequest.prototype.base;
 /** @type {!e.Request} */
BaseRequest.prototype.req;
 /** @type {!Logger} */
BaseRequest.prototype.log;
 /** @type {!Array<string>} */
BaseRequest.prototype.replyCookies;
 /** @type {boolean} */
BaseRequest.prototype.jSend;

/**
 * @param {!IArguments} args
 * @param {string} type
 * @return {{opts: ?, cb: ?}}
 */
BaseRequest.prototype._parseOptions = function(args, type) {};

/**
 * @param {!IArguments} args
 * @param {string=} type
 * @return {?}
 */
BaseRequest.prototype._do = function(args, type) {};

/**
 * @param {?=} opts
 * @param {?=} cb
 * @return {?}
 */
BaseRequest.prototype._request = function(opts, cb) {};

/**
 * @param {?=} url
 * @param {?=} opts
 * @param {?=} cb
 * @return {?}
 */
BaseRequest.prototype.get = function(url, opts, cb) {};

/**
 * @param {?=} url
 * @param {?=} opts
 * @param {?=} cb
 * @return {?}
 */
BaseRequest.prototype.post = function(url, opts, cb) {};

/**
 * @param {?=} url
 * @param {?=} opts
 * @param {?=} cb
 * @return {?}
 */
BaseRequest.prototype.patch = function(url, opts, cb) {};

/**
 * @param {?=} url
 * @param {?=} opts
 * @param {?=} cb
 * @return {?}
 */
BaseRequest.prototype.del = function(url, opts, cb) {};
/**
 * @extends {BaseRequest}
 * @constructor
 * @struct
 */
function StreamRequest() {}

/**
 * @param {!Object} opts
 * @return {!internal.Stream}
 */
StreamRequest.prototype._request = function(opts) {};

/**
 * @param {string|!Object} url_or_opts
 * @param {!Object=} params
 * @return {!internal.Stream}
 */
StreamRequest.prototype.get = function(url_or_opts, params) {};

/**
 * @param {string|!Object} url_or_opts
 * @param {!Object=} params
 * @return {!internal.Stream}
 */
StreamRequest.prototype.post = function(url_or_opts, params) {};

/**
 * @param {string|!Object} url_or_opts
 * @param {!Object=} params
 * @return {!internal.Stream}
 */
StreamRequest.prototype.patch = function(url_or_opts, params) {};

/**
 * @param {string|!Object} url_or_opts
 * @param {!Object=} params
 * @return {!internal.Stream}
 */
StreamRequest.prototype.del = function(url_or_opts, params) {};
/**
 * @extends {BaseRequest}
 * @constructor
 * @struct
 */
function CBPromiseRequest() {}

/**
 * @param {!Object} opts
 * @return {!internal.Stream}
 */
CBPromiseRequest.prototype._request = function(opts) {};

/**
 * @param {string|!Object} url_or_opts
 * @param {!Object|function(?, ?): void=} params_or_cb
 * @param {function(?, ?): void=} cb
 * @return {void|?<?>}
 */
CBPromiseRequest.prototype.get = function(url_or_opts, params_or_cb, cb) {};

/**
 * @param {string|!Object} url_or_opts
 * @param {!Object|function(?, ?): void=} params_or_cb
 * @param {function(?, ?): void=} cb
 * @return {void|?<?>}
 */
CBPromiseRequest.prototype.post = function(url_or_opts, params_or_cb, cb) {};

/**
 * @param {string|!Object} url_or_opts
 * @param {!Object|function(?, ?): void=} params_or_cb
 * @param {function(?, ?): void=} cb
 * @return {void|?<?>}
 */
CBPromiseRequest.prototype.patch = function(url_or_opts, params_or_cb, cb) {};

/**
 * @param {string|!Object} url_or_opts
 * @param {!Object|function(?, ?): void=} params_or_cb
 * @param {function(?, ?): void=} cb
 * @return {void|?<?>}
 */
CBPromiseRequest.prototype.del = function(url_or_opts, params_or_cb, cb) {};
/**
 * @record
 * @struct
 */
function RequestMaker() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */
