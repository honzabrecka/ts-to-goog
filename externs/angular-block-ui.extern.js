/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/angular-block-ui/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "angular"
/** @const */
tsickle_declare_module.angular.blockUI = {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.blockUI.BlockUIConfig = function() {};
 /** @type {string} */
tsickle_declare_module.angular.blockUI.BlockUIConfig.prototype.message;
 /** @type {number} */
tsickle_declare_module.angular.blockUI.BlockUIConfig.prototype.delay;
 /** @type {string} */
tsickle_declare_module.angular.blockUI.BlockUIConfig.prototype.template;
 /** @type {string} */
tsickle_declare_module.angular.blockUI.BlockUIConfig.prototype.templateUrl;
 /** @type {boolean} */
tsickle_declare_module.angular.blockUI.BlockUIConfig.prototype.autoBlock;
 /** @type {boolean} */
tsickle_declare_module.angular.blockUI.BlockUIConfig.prototype.resetOnException;
 /** @type {boolean} */
tsickle_declare_module.angular.blockUI.BlockUIConfig.prototype.autoInjectBodyBlock;
 /** @type {string} */
tsickle_declare_module.angular.blockUI.BlockUIConfig.prototype.cssClass;
 /** @type {boolean} */
tsickle_declare_module.angular.blockUI.BlockUIConfig.prototype.blockBrowserNavigation;

/**
 * Allows you to specify a filter function to exclude certain ajax
 * requests from blocking the user interface.
 * The blockUI service will ignore requests when the function returns `false`.
 * 
 * If the filter function returns a string it will be passed as the message
 * argument to the start method of the service.
 * 
 * 
 * @param {!angular.IRequestConfig} config
 * @return {(string|boolean)}
 */
tsickle_declare_module.angular.blockUI.BlockUIConfig.prototype.requestFilter = function(config) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.blockUI.BlockUIService = function() {};

/**
 * The start method will start the user interface block.
 * Because multiple user interface elements can request
 * a user interface block at the same time, the service
 * keeps track of the number of start calls.
 * 
 * Each call to start() will increase the count and every
 * call to stop() will decrease the value.
 * Whenever the count reaches 0 the block will end.
 * 
 * Note: By default the block is immediately active after
 * calling this method, but to prevent trashing the user
 * interface each time a button is pressed, the block is
 * visible after a short delay.
 * 
 * This behaviour can be modified in the configuration.
 * 
 *     Either supply the message (string) to be show in the
 *     overlay or specify an IBlockUIConfig object that will be
 *     merged/extended into the block ui instance state.
 *     If no argument is specified the default text message
 *     from the configuration is used.
 * @param {(string|!blockUI.BlockUIConfig)=} messageOrOptions
 * @return {void}
 */
tsickle_declare_module.angular.blockUI.BlockUIService.prototype.start = function(messageOrOptions) {};

/**
 * This will decrease the block count.
 * 
 * The block will end if the count is 0.
 * @return {void}
 */
tsickle_declare_module.angular.blockUI.BlockUIService.prototype.stop = function() {};

/**
 * The reset will force an unblock by setting the block count to 0.
 * @return {void}
 */
tsickle_declare_module.angular.blockUI.BlockUIService.prototype.reset = function() {};

/**
 * Queues a callback function to be called when the block has finished.
 * 
 * This can be useful whenever you wish to redirect the user
 * to a different location while there are still pending AJAX requests.
 * @return {void}
 */
tsickle_declare_module.angular.blockUI.BlockUIService.prototype.done = function() {};

/**
 * Allows the message shown in the overlay to be updated
 * while to block is active.
 * 
 * @param {string} message
 * @return {void}
 */
tsickle_declare_module.angular.blockUI.BlockUIService.prototype.message = function(message) {};

/**
 * Returns whether currently a block is shown for the instance or not.
 * @return {boolean}
 */
tsickle_declare_module.angular.blockUI.BlockUIService.prototype.isBlocking = function() {};
