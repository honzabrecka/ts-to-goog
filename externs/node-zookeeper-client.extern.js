/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/node-zookeeper-client/index.d.ts:

/* TODO: ImportDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {string} scheme
 * @param {string} id
 */
function Id(scheme, id) {}
 /** @type {string} */
Id.prototype.scheme;
 /** @type {string} */
Id.prototype.id;

/**
 * @constructor
 * @struct
 * @param {number} perms
 * @param {?} id
 */
function ACL(perms, id) {}
 /** @type {number} */
ACL.prototype.perms;
 /** @type {?} */
ACL.prototype.id;
 /** @type {?} */
var Permission;
/**
 * @record
 * @struct
 */
function Stat() {}
 /** @type {number} */
Stat.prototype.czxid;
 /** @type {number} */
Stat.prototype.mzxid;
 /** @type {number} */
Stat.prototype.ctime;
 /** @type {number} */
Stat.prototype.mtime;
 /** @type {number} */
Stat.prototype.version;
 /** @type {number} */
Stat.prototype.cversion;
 /** @type {number} */
Stat.prototype.aversion;
 /** @type {number} */
Stat.prototype.ephemeralOwner;
 /** @type {number} */
Stat.prototype.dataLength;
 /** @type {number} */
Stat.prototype.numChildren;
 /** @type {number} */
Stat.prototype.pzxid;

/**
 * @constructor
 * @struct
 * @param {string} name
 * @param {number} code
 */
function State(name, code) {}
 /** @type {?} */
State.DISCONNECTED;
 /** @type {?} */
State.SYNC_CONNECTED;
 /** @type {?} */
State.AUTH_FAILED;
 /** @type {?} */
State.CONNECTED_READ_ONLY;
 /** @type {?} */
State.SASL_AUTHENTICATED;
 /** @type {?} */
State.EXPIRED;
 /** @type {string} */
State.prototype.name;
 /** @type {number} */
State.prototype.code;

/**
 * @return {string}
 */
State.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * @param {string} type
 * @param {string} name
 * @param {string} path
 */
function Event(type, name, path) {}
 /** @type {number} */
Event.NODE_CREATED;
 /** @type {number} */
Event.NODE_DELETED;
 /** @type {number} */
Event.NODE_DATA_CHANGED;
 /** @type {number} */
Event.NODE_CHILDREN_CHANGED;
 /** @type {string} */
Event.prototype.type;
 /** @type {string} */
Event.prototype.name;
 /** @type {string} */
Event.prototype.path;

/**
 * @return {string}
 */
Event.prototype.toString = function() {};

/**
 * @return {string}
 */
Event.prototype.getType = function() {};

/**
 * @return {string}
 */
Event.prototype.getName = function() {};

/**
 * @return {string}
 */
Event.prototype.getPath = function() {};
/**
 * @record
 * @struct
 */
function Transaction() {}

/**
 * @param {string} path
 * @param {(number|?|!Array<?>)=} dataOrAclsOrmode1
 * @param {(number|?|!Array<?>)=} dataOrAclsOrmode2
 * @param {(number|?|!Array<?>)=} dataOrAclsOrmode3
 * @return {?}
 */
Transaction.prototype.create = function(path, dataOrAclsOrmode1, dataOrAclsOrmode2, dataOrAclsOrmode3) {};

/**
 * @param {string} path
 * @param {?} data
 * @param {number=} version
 * @return {?}
 */
Transaction.prototype.setData = function(path, data, version) {};

/**
 * @param {string} path
 * @param {number=} version
 * @return {?}
 */
Transaction.prototype.check = function(path, version) {};

/**
 * @param {string} path
 * @param {number=} version
 * @return {?}
 */
Transaction.prototype.remove = function(path, version) {};

/**
 * @param {?} callback
 * @return {void}
 */
Transaction.prototype.commit = function(callback) {};
/**
 * @record
 * @struct
 */
function Client() {}

/**
 * @return {void}
 */
Client.prototype.connect = function() {};

/**
 * @return {void}
 */
Client.prototype.close = function() {};

/**
 * @param {string} path
 * @param {?|(number|?|!Array<?>)} callback_or_dataOrAclsOrmode1
 * @param {?|(number|?|!Array<?>)=} callback_or_dataOrAclsOrmode2
 * @param {?|(number|?|!Array<?>)=} callback_or_dataOrAclsOrmode3
 * @param {?=} callback
 * @return {void}
 */
Client.prototype.create = function(path, callback_or_dataOrAclsOrmode1, callback_or_dataOrAclsOrmode2, callback_or_dataOrAclsOrmode3, callback) {};

/**
 * @param {string} path
 * @param {?|number} callback_or_version
 * @param {?=} callback
 * @return {void}
 */
Client.prototype.remove = function(path, callback_or_version, callback) {};

/**
 * @param {string} path
 * @param {?} callback_or_watcher
 * @param {?=} callback
 * @return {void}
 */
Client.prototype.exists = function(path, callback_or_watcher, callback) {};

/**
 * @param {string} path
 * @param {?} callback_or_watcher
 * @param {?=} callback
 * @return {void}
 */
Client.prototype.getChildren = function(path, callback_or_watcher, callback) {};

/**
 * @param {string} path
 * @param {?} callback_or_watcher
 * @param {?=} callback
 * @return {void}
 */
Client.prototype.getData = function(path, callback_or_watcher, callback) {};

/**
 * @param {string} path
 * @param {?} data
 * @param {?|number} callback_or_version
 * @param {?=} callback
 * @return {void}
 */
Client.prototype.setData = function(path, data, callback_or_version, callback) {};

/**
 * @param {string} path
 * @param {?} callback
 * @return {void}
 */
Client.prototype.getACL = function(path, callback) {};

/**
 * @param {string} path
 * @param {!Array<?>} acls
 * @param {?|number} callback_or_version
 * @param {?=} callback
 * @return {void}
 */
Client.prototype.setACL = function(path, acls, callback_or_version, callback) {};

/**
 * @return {?}
 */
Client.prototype.transaction = function() {};

/**
 * @param {string} path
 * @param {?|(number|?|!Array<?>)} callback_or_dataOrAclsOrmode1
 * @param {?|(number|?|!Array<?>)=} callback_or_dataOrAclsOrmode2
 * @param {?|(number|?|!Array<?>)=} callback_or_dataOrAclsOrmode3
 * @param {?=} callback
 * @return {void}
 */
Client.prototype.mkdirp = function(path, callback_or_dataOrAclsOrmode1, callback_or_dataOrAclsOrmode2, callback_or_dataOrAclsOrmode3, callback) {};

/**
 * @param {string} scheme
 * @param {?} auth
 * @return {void}
 */
Client.prototype.addAuthInfo = function(scheme, auth) {};

/**
 * @return {?}
 */
Client.prototype.getState = function() {};

/**
 * @return {?}
 */
Client.prototype.getSessionId = function() {};

/**
 * @return {?}
 */
Client.prototype.getSessionPassword = function() {};

/**
 * @return {number}
 */
Client.prototype.getSessionTimeout = function() {};

/**
 * @param {string} event
 * @param {?} cb
 * @return {?}
 */
Client.prototype.on = function(event, cb) {};

/**
 * @param {string} event
 * @param {?} cb
 * @return {?}
 */
Client.prototype.once = function(event, cb) {};

/**
 * @param {string} event
 * @param {?} cb
 * @return {?}
 */
Client.prototype.addListener = function(event, cb) {};
/**
 * @record
 * @struct
 */
function Option() {}
 /** @type {number} */
Option.prototype.sessionTimeout;
 /** @type {number} */
Option.prototype.spinDelay;
 /** @type {number} */
Option.prototype.retries;

/**
 * @param {string} connectionString
 * @param {?=} options
 * @return {?}
 */
function createClient(connectionString, options) {}
 /** @type {?} */
var CreateMode;

/**
 * @constructor
 * @struct
 * @param {number} code
 * @param {string} name
 * @param {number} path
 */
function Exception(code, name, path) {}
 /** @type {number} */
Exception.OK;
 /** @type {number} */
Exception.SYSTEM_ERROR;
 /** @type {number} */
Exception.RUNTIME_INCONSISTENCY;
 /** @type {number} */
Exception.DATA_INCONSISTENCY;
 /** @type {number} */
Exception.CONNECTION_LOSS;
 /** @type {number} */
Exception.MARSHALLING_ERROR;
 /** @type {number} */
Exception.UNIMPLEMENTED;
 /** @type {number} */
Exception.OPERATION_TIMEOUT;
 /** @type {number} */
Exception.BAD_ARGUMENTS;
 /** @type {number} */
Exception.API_ERROR;
 /** @type {number} */
Exception.NO_NODE;
 /** @type {number} */
Exception.NO_AUTH;
 /** @type {number} */
Exception.BAD_VERSION;
 /** @type {number} */
Exception.NO_CHILDREN_FOR_EPHEMERALS;
 /** @type {number} */
Exception.NODE_EXISTS;
 /** @type {number} */
Exception.NOT_EMPTY;
 /** @type {number} */
Exception.SESSION_EXPIRED;
 /** @type {number} */
Exception.INVALID_CALLBACK;
 /** @type {number} */
Exception.INVALID_ACL;
 /** @type {number} */
Exception.AUTH_FAILED;
 /** @type {number} */
Exception.prototype.code;
 /** @type {string} */
Exception.prototype.name;
 /** @type {number} */
Exception.prototype.path;

/**
 * @return {string}
 */
Exception.prototype.toString = function() {};

/**
 * @return {number}
 */
Exception.prototype.getCode = function() {};

/**
 * @return {string}
 */
Exception.prototype.getName = function() {};

/**
 * @return {string}
 */
Exception.prototype.getPath = function() {};
