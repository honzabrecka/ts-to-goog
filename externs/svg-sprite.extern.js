/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/svg-sprite/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */
/** @const */
var sprite = {};
/**
 * @record
 * @struct
 */
sprite.SVGSpriterConstructor = function() {};

/* TODO: ConstructSignature: sprite */
/**
 * @record
 * @struct
 */
sprite.SVGSpriter = function() {};

/**
 * Registering source SVG files
 * Registering source SVG files
 * @param {(string|?)|?} file Absolute path to the SVG file or a vinyl file object carrying all the necessary values (the following arguments are ignored then).
 * @param {string=} name The "local" part of the file path, possibly including subdirectories which will get traversed to CSS selectors using the shape.id.separator configuration option.
 * @param {string=} svg SVG file content.
 * @return {!sprite.SVGSpriter}
 */
sprite.SVGSpriter.prototype.add = function(file, name, svg) {};

/**
 * Triggering the sprite compilation
 * Triggering the sprite compilation
 * @param {!sprite.Config|!sprite.CompileCallback} config_or_callback Configuration object setting the output mode parameters for a single compilation run. If omitted, the mode property of the main configuration used for the constructor will be used. / Callback triggered when the compilation has finished.
 * @param {!sprite.CompileCallback=} callback Callback triggered when the compilation has finished.
 * @return {!sprite.SVGSpriter|void}
 */
sprite.SVGSpriter.prototype.compile = function(config_or_callback, callback) {};

/**
 * Accessing the intermediate SVG resources
 * @param {string} dest Base directory for the SVG files in case the will be written to disk.
 * @param {!sprite.GetShapesCallback} callback Callback triggered when the shapes are available.
 * @return {void}
 */
sprite.SVGSpriter.prototype.getShapes = function(dest, callback) {};
/**
 * @record
 * @struct
 */
sprite.Config = function() {};
 /** @type {string} */
sprite.Config.prototype.dest;
 /** @type {(string|!winston.LoggerInstance)} */
sprite.Config.prototype.log;
 /** @type {!sprite.Shape} */
sprite.Config.prototype.shape;
 /** @type {!sprite.Svg} */
sprite.Config.prototype.svg;
 /** @type {?} */
sprite.Config.prototype.variables;
 /** @type {!sprite.Mode} */
sprite.Config.prototype.mode;
/**
 * @record
 * @struct
 */
sprite.Shape = function() {};
 /** @type {{separator: string, generator: (string|function(string): string), pseudo: string, whitespace: string}} */
sprite.Shape.prototype.id;
 /** @type {{maxWidth: number, maxHeight: number, precision: number, attributes: boolean}} */
sprite.Shape.prototype.dimension;
 /** @type {{padding: (number|!Array<number>), box: string}} */
sprite.Shape.prototype.spacing;
 /** @type {!Array<(string|!sprite.CustomConfigurationTransform|!sprite.CustomCallbackTransform)>} */
sprite.Shape.prototype.transform;
 /** @type {string} */
sprite.Shape.prototype.meta;
 /** @type {string} */
sprite.Shape.prototype.align;
 /** @type {string} */
sprite.Shape.prototype.dest;
/**
 * @record
 * @struct
 */
sprite.CustomConfigurationTransform = function() {};

/* TODO: IndexSignature: sprite */
/**
 * @record
 * @struct
 */
sprite.CustomCallbackTransform = function() {};

/* TODO: IndexSignature: sprite */
/**
 * @record
 * @struct
 */
sprite.Svg = function() {};
 /** @type {(string|boolean)} */
sprite.Svg.prototype.xmlDeclaration;
 /** @type {(string|boolean)} */
sprite.Svg.prototype.doctypeDeclaration;
 /** @type {boolean} */
sprite.Svg.prototype.namespaceIDs;
 /** @type {boolean} */
sprite.Svg.prototype.namespaceClassnames;
 /** @type {boolean} */
sprite.Svg.prototype.dimensionAttributes;
 /** @type {?} */
sprite.Svg.prototype.rootAttributes;
 /** @type {number} */
sprite.Svg.prototype.precision;
 /** @type {(!sprite.SvgTransformer|!Array<!sprite.SvgTransformer>)} */
sprite.Svg.prototype.transform;
/**
 * @record
 * @struct
 */
sprite.SvgTransformer = function() {};

/* TODO: CallSignature: sprite */
/**
 * @record
 * @struct
 */
sprite.Mode = function() {};
 /** @type {(boolean|!sprite.CssAndViewSpecificModeConfig)} */
sprite.Mode.prototype.css;
 /** @type {(boolean|!sprite.CssAndViewSpecificModeConfig)} */
sprite.Mode.prototype.view;
 /** @type {(boolean|!sprite.DefsAndSymbolSpecificModeConfig)} */
sprite.Mode.prototype.defs;
 /** @type {(boolean|!sprite.DefsAndSymbolSpecificModeConfig)} */
sprite.Mode.prototype.symbol;
 /** @type {(boolean|!sprite.ModeConfig)} */
sprite.Mode.prototype.stack;

/* TODO: IndexSignature: sprite */
/**
 * @record
 * @struct
 */
sprite.ModeConfig = function() {};
 /** @type {string} */
sprite.ModeConfig.prototype.dest;
 /** @type {string} */
sprite.ModeConfig.prototype.prefix;
 /** @type {(string|boolean)} */
sprite.ModeConfig.prototype.dimensions;
 /** @type {string} */
sprite.ModeConfig.prototype.sprite;
 /** @type {boolean} */
sprite.ModeConfig.prototype.bust;
 /** @type {!Object<string,(boolean|!sprite.RenderingConfiguration)>} */
sprite.ModeConfig.prototype.render;
 /** @type {(boolean|!sprite.RenderingConfiguration)} */
sprite.ModeConfig.prototype.example;
 /** @type {string} */
sprite.ModeConfig.prototype.mode;
/**
 * @record
 * @struct
 */
sprite.RenderingConfiguration = function() {};
 /** @type {string} */
sprite.RenderingConfiguration.prototype.template;
 /** @type {string} */
sprite.RenderingConfiguration.prototype.dest;
/**
 * @extends {sprite.ModeConfig}
 * @record
 * @struct
 */
sprite.CssAndViewSpecificModeConfig = function() {};
 /** @type {string} */
sprite.CssAndViewSpecificModeConfig.prototype.layout;
 /** @type {string} */
sprite.CssAndViewSpecificModeConfig.prototype.common;
 /** @type {string} */
sprite.CssAndViewSpecificModeConfig.prototype.mixin;
/**
 * @extends {sprite.ModeConfig}
 * @record
 * @struct
 */
sprite.DefsAndSymbolSpecificModeConfig = function() {};
 /** @type {boolean} */
sprite.DefsAndSymbolSpecificModeConfig.prototype.inline;
/**
 * @record
 * @struct
 */
sprite.CompileCallback = function() {};

/* TODO: CallSignature: sprite */
/**
 * @record
 * @struct
 */
sprite.GetShapesCallback = function() {};

/* TODO: CallSignature: sprite */
 /** @type {!sprite.SVGSpriterConstructor} */
var sprite;

/* TODO: ExportAssignment in  */
