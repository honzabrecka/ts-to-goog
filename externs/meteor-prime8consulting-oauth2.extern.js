/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/meteor-prime8consulting-oauth2/index.d.ts:
/** @const */
var OAuth2Server = {};
/**
 * @record
 * @struct
 */
OAuth2Server.RefreshToken = function() {};
 /** @type {string} */
OAuth2Server.RefreshToken.prototype.refreshToken;
 /** @type {string} */
OAuth2Server.RefreshToken.prototype.clientId;
 /** @type {string} */
OAuth2Server.RefreshToken.prototype.userId;
 /** @type {!Date} */
OAuth2Server.RefreshToken.prototype.expires;
/**
 * @record
 * @struct
 */
OAuth2Server.AuthCode = function() {};
 /** @type {string} */
OAuth2Server.AuthCode.prototype.authCode;
 /** @type {string} */
OAuth2Server.AuthCode.prototype.clientId;
 /** @type {string} */
OAuth2Server.AuthCode.prototype.userId;
 /** @type {!Date} */
OAuth2Server.AuthCode.prototype.expires;
/**
 * @record
 * @struct
 */
OAuth2Server.AccessToken = function() {};
 /** @type {string} */
OAuth2Server.AccessToken.prototype.accessToken;
 /** @type {string} */
OAuth2Server.AccessToken.prototype.clientId;
 /** @type {string} */
OAuth2Server.AccessToken.prototype.userId;
 /** @type {!Date} */
OAuth2Server.AccessToken.prototype.expires;
/**
 * @record
 * @struct
 */
OAuth2Server.Client = function() {};
 /** @type {string} */
OAuth2Server.Client.prototype.clientId;
 /** @type {boolean} */
OAuth2Server.Client.prototype.active;
 /** @type {string} */
OAuth2Server.Client.prototype.redirectUri;
 /** @type {string} */
OAuth2Server.Client.prototype.clientSecret;
/**
 * @record
 * @struct
 */
OAuth2Server.PubSubNames = function() {};
 /** @type {string} */
OAuth2Server.PubSubNames.prototype.authCodes;
 /** @type {string} */
OAuth2Server.PubSubNames.prototype.refreshTokens;
/**
 * @record
 * @struct
 */
OAuth2Server.MethodNames = function() {};
 /** @type {string} */
OAuth2Server.MethodNames.prototype.authCodeGrant;
/**
 * @record
 * @struct
 */
OAuth2Server.Collections = function() {};
 /** @type {?<!OAuth2Server.RefreshToken>} */
OAuth2Server.Collections.prototype.refreshToken;
 /** @type {?<!OAuth2Server.AuthCode>} */
OAuth2Server.Collections.prototype.authCode;
 /** @type {?<!OAuth2Server.AccessToken>} */
OAuth2Server.Collections.prototype.accessToken;
 /** @type {?<!OAuth2Server.Client>} */
OAuth2Server.Collections.prototype.client;
/**
 * @record
 * @struct
 */
OAuth2Server.SubscribeTo = function() {};

/**
 * Wrapper function to subscribe to the auth code subscription. Returns a standard subscription handle.
 * @return {!Meteor.SubscriptionHandle}
 */
OAuth2Server.SubscribeTo.prototype.authCode = function() {};
/**
 * @record
 * @struct
 */
OAuth2Server.AuthCodeGrantResult = function() {};
 /** @type {boolean} */
OAuth2Server.AuthCodeGrantResult.prototype.success;
 /** @type {?} */
OAuth2Server.AuthCodeGrantResult.prototype.error;
 /** @type {string} */
OAuth2Server.AuthCodeGrantResult.prototype.authorizationCode;
 /** @type {string} */
OAuth2Server.AuthCodeGrantResult.prototype.redirectToUri;
/**
 * @record
 * @struct
 */
OAuth2Server.CallMethod = function() {};

/**
 * Wrapper for Meteor.method to create an authorization code. This is an async function and a callback must be provided to be of any use.
 * @param {string} client_id
 * @param {string} redirect_uri
 * @param {string} response_type
 * @param {!Array<string>} scope
 * @param {string} state
 * @param {function(?, !OAuth2Server.AuthCodeGrantResult): void} callback
 * @return {void}
 */
OAuth2Server.CallMethod.prototype.authCodeGrant = function(client_id, redirect_uri, response_type, scope, state, callback) {};
/**
 * @record
 * @struct
 */
OAuth2Server.OAuth2Server = function() {};
 /** @type {!OAuth2Server.PubSubNames} */
OAuth2Server.OAuth2Server.prototype.pubSubNames;
 /** @type {!OAuth2Server.MethodNames} */
OAuth2Server.OAuth2Server.prototype.methodNames;
 /** @type {!OAuth2Server.Collections} */
OAuth2Server.OAuth2Server.prototype.collections;
 /** @type {?} */
OAuth2Server.OAuth2Server.prototype.oauthserver;
 /** @type {!OAuth2Server.SubscribeTo} */
OAuth2Server.OAuth2Server.prototype.subscribeTo;
 /** @type {!OAuth2Server.CallMethod} */
OAuth2Server.OAuth2Server.prototype.callMethod;
 /** @type {!OAuth2Server.OAuth2Server} */
var oAuth2Server;
