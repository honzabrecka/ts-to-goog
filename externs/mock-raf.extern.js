/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/mock-raf/index.d.ts:
/** @const */
var MockRaf = {};
/**
 * @record
 * @struct
 */
MockRaf.Options = function() {};
 /** @type {number} */
MockRaf.Options.prototype.time;
 /** @type {number} */
MockRaf.Options.prototype.count;
/**
 * @record
 * @struct
 */
MockRaf.Creator = function() {};

/**
 * Returns the current now value of the mock. Starts at 0 and increases with each step() taken.
 * Useful for stubbing out performance.now() or a polyfill when using requestAnimationFrame with timers.
 * @return {number}
 */
MockRaf.Creator.prototype.now = function() {};

/**
 * Replacement for requestAnimationFrame or a polyfill.Adds a callback to be fired on the next step.
 * @param {!FrameRequestCallback} callback
 * @return {number}
 */
MockRaf.Creator.prototype.raf = function(callback) {};

/**
 * Replacement for cancelAnimationFrame or a polyfill.Removes all currently scheduled requestAnimationFrame callbacks from the queue.
 * @param {number} handle
 * @return {void}
 */
MockRaf.Creator.prototype.cancel = function(handle) {};

/**
 * Takes requestAnimationFrame steps. Fires currently queued callbacks for each step and increments now time for each step. The primary way to interact with a mockRaf instance for testing.
 * @param {!MockRaf.Options=} options
 * @return {void}
 */
MockRaf.Creator.prototype.step = function(options) {};

/**
 * @return {!MockRaf.Creator}
 */
function MockRaf() {}

/* TODO: ExportAssignment in  */
