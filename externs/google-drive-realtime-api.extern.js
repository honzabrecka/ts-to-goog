/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/google-drive-realtime-api/index.d.ts:
/** @const */
var gapi = {};
/** @const */
gapi.drive = {};
/** @const */
gapi.drive.realtime = {};

/** @typedef {string} */
gapi.drive.realtime.CollaborativeObjectType;

/** @typedef {(function(!gapi.drive.realtime.ObjectChangedEvent): void|function(!Event): void|!EventListener)} */
gapi.drive.realtime.GoogEventHandler;
/**
 * @constructor
 * @struct
 */
gapi.drive.realtime.Collaborator = function() {};
 /** @type {string} */
gapi.drive.realtime.Collaborator.prototype.color;
 /** @type {string} */
gapi.drive.realtime.Collaborator.prototype.displayName;
 /** @type {boolean} */
gapi.drive.realtime.Collaborator.prototype.isAnonymous;
 /** @type {boolean} */
gapi.drive.realtime.Collaborator.prototype.isMe;
 /** @type {string} */
gapi.drive.realtime.Collaborator.prototype.permissionId;
 /** @type {string} */
gapi.drive.realtime.Collaborator.prototype.photoUrl;
 /** @type {string} */
gapi.drive.realtime.Collaborator.prototype.sessionId;
 /** @type {string} */
gapi.drive.realtime.Collaborator.prototype.userId;

/**
 * @param {string} sessionId
 * @param {string} userId
 * @param {string} displayName
 * @param {string} color
 * @param {boolean} isMe
 * @param {boolean} isAnonymous
 * @param {string} photoUrl
 * @param {string} permissionId
 * @return {!gapi.drive.realtime.Collaborator}
 */
gapi.drive.realtime.Collaborator.prototype.new = function(sessionId, userId, displayName, color, isMe, isAnonymous, photoUrl, permissionId) {};
/**
 * @constructor
 * @struct
 */
gapi.drive.realtime.CollaborativeObject = function() {};
 /** @type {string} */
gapi.drive.realtime.CollaborativeObject.prototype.id;
 /** @type {string} */
gapi.drive.realtime.CollaborativeObject.prototype.type;

/**
 * @param {string} type
 * @param {(function(!gapi.drive.realtime.ObjectChangedEvent): void|function(!Event): void|!EventListener)} listener
 * @param {boolean=} opt_capture
 * @return {void}
 */
gapi.drive.realtime.CollaborativeObject.prototype.addEventListener = function(type, listener, opt_capture) {};

/**
 * @return {void}
 */
gapi.drive.realtime.CollaborativeObject.prototype.removeAllEventListeners = function() {};

/**
 * @param {string} type
 * @param {(function(!gapi.drive.realtime.ObjectChangedEvent): void|function(!Event): void|!EventListener)} listener
 * @param {boolean=} opt_capture
 * @return {void}
 */
gapi.drive.realtime.CollaborativeObject.prototype.removeEventListener = function(type, listener, opt_capture) {};

/**
 * @return {string}
 */
gapi.drive.realtime.CollaborativeObject.prototype.toString = function() {};
/**
 * @extends {gapi.drive.realtime.CollaborativeObject}
 * @constructor
 * @struct
 */
gapi.drive.realtime.IndexReference = function() {};
 /** @type {{SHIFT_AFTER_DELETE: string, SHIFT_BEFORE_DELETE: string, SHIFT_TO_INVALID: string}} */
gapi.drive.realtime.IndexReference.DeleteMode;
 /** @type {number} */
gapi.drive.realtime.IndexReference.prototype.index;

/**
 * @return {string}
 */
gapi.drive.realtime.IndexReference.prototype.deleteMode = function() {};

/**
 * @return {V}
 */
gapi.drive.realtime.IndexReference.prototype.referencedObject = function() {};
/**
 * @extends {gapi.drive.realtime.CollaborativeObject}
 * @constructor
 * @struct
 */
gapi.drive.realtime.CollaborativeMap = function() {};
 /** @type {number} */
gapi.drive.realtime.CollaborativeMap.prototype.size;
 /** @type {string} */
gapi.drive.realtime.CollaborativeMap.type;

/**
 * @return {void}
 */
gapi.drive.realtime.CollaborativeMap.prototype.clear = function() {};

/**
 * @param {string} key
 * @return {V}
 */
gapi.drive.realtime.CollaborativeMap.prototype.delete = function(key) {};

/**
 * @param {string} key
 * @return {V}
 */
gapi.drive.realtime.CollaborativeMap.prototype.get = function(key) {};

/**
 * @param {string} key
 * @return {boolean}
 */
gapi.drive.realtime.CollaborativeMap.prototype.has = function(key) {};

/**
 * @return {boolean}
 */
gapi.drive.realtime.CollaborativeMap.prototype.isEmpty = function() {};

/**
 * @return {!Array<!Array<?>>}
 */
gapi.drive.realtime.CollaborativeMap.prototype.items = function() {};

/**
 * @return {!Array<string>}
 */
gapi.drive.realtime.CollaborativeMap.prototype.keys = function() {};

/**
 * @param {string} key
 * @param {V} value
 * @return {V}
 */
gapi.drive.realtime.CollaborativeMap.prototype.set = function(key, value) {};

/**
 * @return {!Array<V>}
 */
gapi.drive.realtime.CollaborativeMap.prototype.values = function() {};
/**
 * @extends {gapi.drive.realtime.CollaborativeObject}
 * @constructor
 * @struct
 */
gapi.drive.realtime.CollaborativeString = function() {};
 /** @type {number} */
gapi.drive.realtime.CollaborativeString.prototype.length;
 /** @type {string} */
gapi.drive.realtime.CollaborativeString.prototype.text;
 /** @type {string} */
gapi.drive.realtime.CollaborativeString.type;

/**
 * @param {string} text
 * @return {void}
 */
gapi.drive.realtime.CollaborativeString.prototype.append = function(text) {};

/**
 * @return {string}
 */
gapi.drive.realtime.CollaborativeString.prototype.getText = function() {};

/**
 * @param {number} index
 * @param {string} text
 * @return {void}
 */
gapi.drive.realtime.CollaborativeString.prototype.insertString = function(index, text) {};

/**
 * @param {number} index
 * @param {boolean} canBeDeleted
 * @return {!gapi.drive.realtime.IndexReference<!gapi.drive.realtime.CollaborativeString>}
 */
gapi.drive.realtime.CollaborativeString.prototype.registerReference = function(index, canBeDeleted) {};

/**
 * @param {number} startIndex
 * @param {number} endIndex
 * @return {void}
 */
gapi.drive.realtime.CollaborativeString.prototype.removeRange = function(startIndex, endIndex) {};

/**
 * @param {string} text
 * @return {void}
 */
gapi.drive.realtime.CollaborativeString.prototype.setText = function(text) {};
/**
 * @extends {gapi.drive.realtime.CollaborativeObject}
 * @constructor
 * @struct
 */
gapi.drive.realtime.CollaborativeList = function() {};
 /** @type {number} */
gapi.drive.realtime.CollaborativeList.prototype.length;
 /** @type {string} */
gapi.drive.realtime.CollaborativeList.type;

/**
 * @return {!Array<V>}
 */
gapi.drive.realtime.CollaborativeList.prototype.asArray = function() {};

/**
 * @return {void}
 */
gapi.drive.realtime.CollaborativeList.prototype.clear = function() {};

/**
 * @param {number} ind
 * @return {V}
 */
gapi.drive.realtime.CollaborativeList.prototype.get = function(ind) {};

/**
 * @param {V} value
 * @param {function(V, V): boolean=} opt_comparatorFn
 * @return {number}
 */
gapi.drive.realtime.CollaborativeList.prototype.indexOf = function(value, opt_comparatorFn) {};

/**
 * @param {number} index
 * @param {V} value
 * @return {void}
 */
gapi.drive.realtime.CollaborativeList.prototype.insert = function(index, value) {};

/**
 * @param {number} index
 * @param {!Array<V>} values
 * @return {void}
 */
gapi.drive.realtime.CollaborativeList.prototype.insertAll = function(index, values) {};

/**
 * @param {V} value
 * @param {function(V, V): boolean=} opt_comparatorFn
 * @return {number}
 */
gapi.drive.realtime.CollaborativeList.prototype.lastIndexOf = function(value, opt_comparatorFn) {};

/**
 * @param {number} index
 * @param {number} destinationIndex
 * @return {void}
 */
gapi.drive.realtime.CollaborativeList.prototype.move = function(index, destinationIndex) {};

/**
 * @param {number} index
 * @param {!gapi.drive.realtime.CollaborativeList} destination
 * @param {number} destinationIndex
 * @return {void}
 */
gapi.drive.realtime.CollaborativeList.prototype.moveToList = function(index, destination, destinationIndex) {};

/**
 * @param {V} value
 * @return {number}
 */
gapi.drive.realtime.CollaborativeList.prototype.push = function(value) {};

/**
 * @param {!Array<V>} values
 * @return {void}
 */
gapi.drive.realtime.CollaborativeList.prototype.pushAll = function(values) {};

/**
 * @param {number} index
 * @param {boolean} canBeDeleted
 * @return {!gapi.drive.realtime.IndexReference<!gapi.drive.realtime.CollaborativeList>}
 */
gapi.drive.realtime.CollaborativeList.prototype.registerReference = function(index, canBeDeleted) {};

/**
 * @param {number} index
 * @return {void}
 */
gapi.drive.realtime.CollaborativeList.prototype.remove = function(index) {};

/**
 * @param {number} startIndex
 * @param {number} endIndex
 * @return {void}
 */
gapi.drive.realtime.CollaborativeList.prototype.removeRange = function(startIndex, endIndex) {};

/**
 * @param {V} value
 * @return {boolean}
 */
gapi.drive.realtime.CollaborativeList.prototype.removeValue = function(value) {};

/**
 * @param {number} index
 * @param {!Array<V>} values
 * @return {void}
 */
gapi.drive.realtime.CollaborativeList.prototype.replaceRange = function(index, values) {};

/**
 * @param {number} index
 * @param {V} value
 * @return {void}
 */
gapi.drive.realtime.CollaborativeList.prototype.set = function(index, value) {};
/**
 * @constructor
 * @struct
 */
gapi.drive.realtime.Model = function() {};
 /** @type {function(string): !gapi.drive.realtime.CollaborativeObject} */
gapi.drive.realtime.Model.prototype.getObject;
 /** @type {number} */
gapi.drive.realtime.Model.prototype.bytesUsed;
 /** @type {boolean} */
gapi.drive.realtime.Model.prototype.canRedo;
 /** @type {boolean} */
gapi.drive.realtime.Model.prototype.canUndo;

/**
 * @param {string} typeName
 * @return {?}
 */
gapi.drive.realtime.Model.prototype.createJsObject = function(typeName) {};

/**
 * @param {string} type
 * @param {function(): (void|!EventListener)} listener
 * @param {boolean=} opt_capture
 * @return {void}
 */
gapi.drive.realtime.Model.prototype.addEventListener = function(type, listener, opt_capture) {};

/**
 * @param {string=} opt_name
 * @param {boolean=} opt_isUndoable
 * @return {void}
 */
gapi.drive.realtime.Model.prototype.beginCompoundOperation = function(opt_name, opt_isUndoable) {};

/**
 * @param {(string|!Function)} ref
 * @param {...?} var_args
 * @return {?}
 */
gapi.drive.realtime.Model.prototype.create = function(ref, var_args) {};

/**
 * @template T
 * @param {!Array<T>=} opt_initialValue
 * @return {!gapi.drive.realtime.CollaborativeList<T>}
 */
gapi.drive.realtime.Model.prototype.createList = function(opt_initialValue) {};

/**
 * @template T
 * @param {!Array<!Array<?>>=} opt_initialValue
 * @return {!gapi.drive.realtime.CollaborativeMap<T>}
 */
gapi.drive.realtime.Model.prototype.createMap = function(opt_initialValue) {};

/**
 * @param {string=} opt_initialValue
 * @return {!gapi.drive.realtime.CollaborativeString}
 */
gapi.drive.realtime.Model.prototype.createString = function(opt_initialValue) {};

/**
 * @return {void}
 */
gapi.drive.realtime.Model.prototype.endCompoundOperation = function() {};

/**
 * @return {!gapi.drive.realtime.CollaborativeMap<?>}
 */
gapi.drive.realtime.Model.prototype.getRoot = function() {};

/**
 * @return {boolean}
 */
gapi.drive.realtime.Model.prototype.isReadOnly = function() {};

/**
 * @return {void}
 */
gapi.drive.realtime.Model.prototype.redo = function() {};

/**
 * @return {void}
 */
gapi.drive.realtime.Model.prototype.removeAllEventListeners = function() {};

/**
 * @param {string} type
 * @param {function(): (void|!EventListener)} listener
 * @param {boolean=} opt_capture
 * @return {void}
 */
gapi.drive.realtime.Model.prototype.removeEventListener = function(type, listener, opt_capture) {};

/**
 * @return {number}
 */
gapi.drive.realtime.Model.prototype.serverRevision = function() {};

/**
 * @param {string=} opt_appId
 * @param {number=} opt_revision
 * @return {string}
 */
gapi.drive.realtime.Model.prototype.toJson = function(opt_appId, opt_revision) {};

/**
 * @return {void}
 */
gapi.drive.realtime.Model.prototype.undo = function() {};

/** @typedef {string} */
gapi.drive.realtime.EventType;
 /** @type {{OBJECT_CHANGED: string, VALUES_SET: string, VALUES_ADDED: string, VALUES_REMOVED: string, VALUE_CHANGED: string, TEXT_INSERTED: string, TEXT_DELETED: string, COLLABORATOR_JOINED: string, COLLABORATOR_LEFT: string, REFERENCE_SHIFTED: string, DOCUMENT_SAVE_STATE_CHANGED: string, UNDO_REDO_STATE_CHANGED: string, ATTRIBUTE_CHANGED: string}} */
gapi.drive.realtime.EventType;
/**
 * @record
 * @struct
 */
gapi.drive.realtime.BaseModelEvent = function() {};
 /** @type {boolean} */
gapi.drive.realtime.BaseModelEvent.prototype.bubbles;
 /** @type {!Array<string>} */
gapi.drive.realtime.BaseModelEvent.prototype.compoundOperationNames;
 /** @type {boolean} */
gapi.drive.realtime.BaseModelEvent.prototype.isLocal;
 /** @type {boolean} */
gapi.drive.realtime.BaseModelEvent.prototype.isRedo;
 /** @type {boolean} */
gapi.drive.realtime.BaseModelEvent.prototype.isUndo;
 /** @type {string} */
gapi.drive.realtime.BaseModelEvent.prototype.sessionId;
 /** @type {!gapi.drive.realtime.CollaborativeObject} */
gapi.drive.realtime.BaseModelEvent.prototype.target;
 /** @type {string} */
gapi.drive.realtime.BaseModelEvent.prototype.type;
 /** @type {string} */
gapi.drive.realtime.BaseModelEvent.prototype.userId;

/* TODO: ConstructSignature: gapi.drive.realtime */

/**
 * @return {void}
 */
gapi.drive.realtime.BaseModelEvent.prototype.preventDefault = function() {};

/**
 * @return {void}
 */
gapi.drive.realtime.BaseModelEvent.prototype.stopPropagation = function() {};
/**
 * @extends {gapi.drive.realtime.BaseModelEvent}
 * @record
 * @struct
 */
gapi.drive.realtime.ObjectChangedEvent = function() {};

/* TODO: ConstructSignature: gapi.drive.realtime */
 /** @type {!Array<!gapi.drive.realtime.BaseModelEvent>} */
gapi.drive.realtime.ObjectChangedEvent.prototype.events;
/**
 * @extends {gapi.drive.realtime.BaseModelEvent}
 * @record
 * @struct
 */
gapi.drive.realtime.ValuesAddedEvent = function() {};

/* TODO: ConstructSignature: gapi.drive.realtime */
 /** @type {number} */
gapi.drive.realtime.ValuesAddedEvent.prototype.index;
 /** @type {number} */
gapi.drive.realtime.ValuesAddedEvent.prototype.movedFromIndex;
 /** @type {!gapi.drive.realtime.CollaborativeList<V>} */
gapi.drive.realtime.ValuesAddedEvent.prototype.movedFromList;
/**
 * @extends {gapi.drive.realtime.BaseModelEvent}
 * @record
 * @struct
 */
gapi.drive.realtime.ValuesRemovedEvent = function() {};

/* TODO: ConstructSignature: gapi.drive.realtime */
 /** @type {number} */
gapi.drive.realtime.ValuesRemovedEvent.prototype.index;
 /** @type {number} */
gapi.drive.realtime.ValuesRemovedEvent.prototype.movedToIndex;
 /** @type {!gapi.drive.realtime.CollaborativeList<V>} */
gapi.drive.realtime.ValuesRemovedEvent.prototype.movedToList;
/**
 * @constructor
 * @struct
 */
gapi.drive.realtime.Document = function() {};
 /** @type {boolean} */
gapi.drive.realtime.Document.prototype.isClosed;
 /** @type {boolean} */
gapi.drive.realtime.Document.prototype.isInGoogleDrive;
 /** @type {number} */
gapi.drive.realtime.Document.prototype.saveDelay;

/**
 * @param {string} type
 * @param {(function(!gapi.drive.realtime.ObjectChangedEvent): void|function(!Event): void|!EventListener)} listener
 * @param {boolean=} opt_capture
 * @return {void}
 */
gapi.drive.realtime.Document.prototype.addEventListener = function(type, listener, opt_capture) {};

/**
 * @return {void}
 */
gapi.drive.realtime.Document.prototype.close = function() {};

/**
 * @return {!Array<!gapi.drive.realtime.Collaborator>}
 */
gapi.drive.realtime.Document.prototype.getCollaborators = function() {};

/**
 * @return {!gapi.drive.realtime.Model}
 */
gapi.drive.realtime.Document.prototype.getModel = function() {};

/**
 * @return {void}
 */
gapi.drive.realtime.Document.prototype.removeAllEventListeners = function() {};

/**
 * @param {string} type
 * @param {(function(!gapi.drive.realtime.ObjectChangedEvent): void|function(!Event): void|!EventListener)} listener
 * @param {boolean=} opt_capture
 * @return {void}
 */
gapi.drive.realtime.Document.prototype.removeEventListener = function(type, listener, opt_capture) {};

/**
 * @param {string} fileId
 * @return {void}
 */
gapi.drive.realtime.Document.prototype.saveAs = function(fileId) {};

/** @typedef {string} */
gapi.drive.realtime.ErrorType;
 /** @type {{CONCURRENT_CREATION: string, INVALID_COMPOUND_OPERATION: string, INVALID_JSON_SYNTAX: string, MISSING_PROPERTY: string, NOT_FOUND: string, FORBIDDEN: string, SERVER_ERROR: string, CLIENT_ERROR: string, TOKEN_REFRESH_REQUIRED: string, INVALID_ELEMENT_TYPE: string, NO_WRITE_PERMISSION: string, FATAL_NETWORK_ERROR: string, UNEXPECTED_ELEMENT: string}} */
gapi.drive.realtime.ErrorType;

/**
 * @constructor
 * @struct
 * @param {string} type
 * @param {string} message
 * @param {boolean} isFatal
 */
gapi.drive.realtime.Error = function(type, message, isFatal) {};
 /** @type {string} */
gapi.drive.realtime.Error.prototype.type;
 /** @type {string} */
gapi.drive.realtime.Error.prototype.message;
 /** @type {boolean} */
gapi.drive.realtime.Error.prototype.isFatal;

/**
 * @return {string}
 */
gapi.drive.realtime.Error.prototype.toString = function() {};

/**
 * @return {void}
 */
gapi.drive.realtime.debug = function() {};

/**
 * @param {function(!gapi.drive.realtime.Document): void=} opt_onLoaded
 * @param {function(!gapi.drive.realtime.Model): void=} opt_initializerFn
 * @param {function(!gapi.drive.realtime.Error): void=} opt_errorFn
 * @return {!gapi.drive.realtime.Document}
 */
gapi.drive.realtime.newInMemoryDocument = function(opt_onLoaded, opt_initializerFn, opt_errorFn) {};

/**
 * @param {string} fileId
 * @param {function(!gapi.drive.realtime.Document): void=} onLoaded
 * @param {function(!gapi.drive.realtime.Model): void=} opt_initializerFn
 * @param {function(!gapi.drive.realtime.Error): void=} opt_errorFn
 * @return {void}
 */
gapi.drive.realtime.load = function(fileId, onLoaded, opt_initializerFn, opt_errorFn) {};

/**
 * @param {function(!gapi.drive.realtime.Document): void} onLoaded
 * @param {function(!gapi.drive.realtime.Model): void=} opt_initializerFn
 * @param {function(!gapi.drive.realtime.Error): void=} opt_errorFn
 * @return {void}
 */
gapi.drive.realtime.loadAppDataDocument = function(onLoaded, opt_initializerFn, opt_errorFn) {};

/**
 * @param {string} json
 * @param {function(!gapi.drive.realtime.Error): void=} opt_errorFn
 * @return {!gapi.drive.realtime.Document}
 */
gapi.drive.realtime.loadFromJson = function(json, opt_errorFn) {};
/** @const */
gapi.drive.realtime.databinding = {};
/**
 * @record
 * @struct
 */
gapi.drive.realtime.databinding.Binding = function() {};
 /** @type {!gapi.drive.realtime.CollaborativeObject} */
gapi.drive.realtime.databinding.Binding.prototype.collaborativeObject;
 /** @type {!Element} */
gapi.drive.realtime.databinding.Binding.prototype.domElement;

/**
 * @return {void}
 */
gapi.drive.realtime.databinding.Binding.prototype.unbind = function() {};

/**
 * @param {!gapi.drive.realtime.CollaborativeString} s
 * @param {!HTMLInputElement} textinput
 * @return {!gapi.drive.realtime.databinding.Binding}
 */
gapi.drive.realtime.databinding.bindString = function(s, textinput) {};
/** @const */
var rtclient = {};
/**
 * @record
 * @struct
 */
rtclient.RealtimeLoader = function() {};

/**
 * @return {void}
 */
rtclient.RealtimeLoader.prototype.start = function() {};

/**
 * @return {void}
 */
rtclient.RealtimeLoader.prototype.load = function() {};

/**
 * @param {!gapi.drive.realtime.Error} e
 * @return {void}
 */
rtclient.RealtimeLoader.prototype.handleErrors = function(e) {};
/**
 * @record
 * @struct
 */
rtclient.RealtimeLoaderFactory = function() {};

/* TODO: ConstructSignature: rtclient */
/**
 * @record
 * @struct
 */
rtclient.LoaderOptions = function() {};
 /** @type {string} */
rtclient.LoaderOptions.prototype.appId;
 /** @type {boolean} */
rtclient.LoaderOptions.prototype.autoCreate;
 /** @type {string} */
rtclient.LoaderOptions.prototype.clientId;
 /** @type {string} */
rtclient.LoaderOptions.prototype.authButtonElementId;
 /** @type {string} */
rtclient.LoaderOptions.prototype.newFileMimeType;
 /** @type {function(): void} */
rtclient.LoaderOptions.prototype.registerTypes;
 /** @type {string} */
rtclient.LoaderOptions.prototype.defaultTitle;
 /** @type {function(): void} */
rtclient.LoaderOptions.prototype.afterAuth;
 /** @type {function(!gapi.drive.realtime.Model): void} */
rtclient.LoaderOptions.prototype.initializeModel;
 /** @type {function(!gapi.drive.realtime.Document): void} */
rtclient.LoaderOptions.prototype.onFileLoaded;
/**
 * @record
 * @struct
 */
rtclient.DriveAPIFileResource = function() {};
 /** @type {string} */
rtclient.DriveAPIFileResource.prototype.id;
/**
 * @record
 * @struct
 */
rtclient.ClientUtils = function() {};
 /** @type {{fileIds: string}} */
rtclient.ClientUtils.prototype.params;
 /** @type {!rtclient.RealtimeLoaderFactory} */
rtclient.ClientUtils.prototype.RealtimeLoader;

/**
 * Creates a new Realtime file.
 * @param {string} title {string} title of the newly created file.
 * @param {string} mimeType {string} the MIME type of the new file.
 * @param {function(!rtclient.DriveAPIFileResource): void} callback {(file:DriveAPIFileResource) => void} the callback to call after creation.
 * @return {void}
 */
rtclient.ClientUtils.prototype.createRealtimeFile = function(title, mimeType, callback) {};
 /** @type {!rtclient.RealtimeLoaderFactory} */
rtclient.RealtimeLoader;

/**
 * Creates a new Realtime file.
 * @param {string} title {string} title of the newly created file.
 * @param {string} mimeType {string} the MIME type of the new file.
 * @param {function(!rtclient.DriveAPIFileResource): void} callback {(file:DriveAPIFileResource) => void} the callback to call after creation.
 * @return {void}
 */
rtclient.createRealtimeFile = function(title, mimeType, callback) {};
/** @const */
rtclient.params = {};
 /** @type {string} */
rtclient.params.fileIds;
