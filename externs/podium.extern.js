/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/podium/index.d.ts:
/**
 * @record
 * @struct
 */
function Podium() {}

/* TODO: ConstructSignature:  */

/* TODO: ConstructSignature:  */

/**
 * podium.registerEvent(events)
 * Register the specified events and their optional configuration. Events must be registered before they can be emitted or subscribed to. This is done to detect event name mispelling and invalid event activities.
 * @see {\@link https://github.com/hapijs/podium/blob/master/API.md#podiumregistereventevents}
 * @param {!Array<(string|!Podium.EventOptionsObject|?)>|(string|!Podium.EventOptionsObject|?)} events
 * @return {void}
 */
Podium.prototype.registerEvent = function(events) {};

/**
 * podium.registerPodium(podiums)
 * Registers another emitter as an event source for the current emitter (any event update emitted by the source emitter is passed to any subscriber of the current emitter)
 * Note that any events registered with a source emitter are automatically added to the current emitter. If the events are already registered, they are left as-is.
 * @see {\@link https://github.com/hapijs/podium/blob/master/API.md#podiumregisterpodiumpodiums}
 * @param {!Array<?>|?} podiums
 * @return {void}
 */
Podium.prototype.registerPodium = function(podiums) {};

/**
 * podium.emit(criteria, data, [callback])
 * Emits an event update to all the subscribed listeners
 * @see {\@link https://github.com/hapijs/podium/blob/master/API.md#podiumemitcriteria-data-callback}
 * @param {(string|?)} criteria  the event update criteria
 * @param {?} data  the value emitted to the subscribers.
 * @param {?=} callback  an optional callback method invoked when all subscribers have been notified using the signature function()
 * @return {void}
 */
Podium.prototype.emit = function(criteria, data, callback) {};

/**
 * podium.on(criteria, listener)
 * Subscribe a handler to an event
 * @see {\@link https://github.com/hapijs/podium/blob/master/API.md#podiumoncriteria-listener}
 * @param {(string|!Podium.CriteriaObject)} criteria  the subscription criteria
 * @param {!Podium.Listener} listener  the handler method set to receive event updates. The function signature depends on the block, spread, and tags options.
 * @return {void}
 */
Podium.prototype.on = function(criteria, listener) {};

/**
 * podium.addListener(criteria, listener)
 * Same as podium.on()
 * @see {\@link https://github.com/hapijs/podium/blob/master/API.md#podiumoncriteria-listener}
 * @param {(string|!Podium.CriteriaObject)} criteria  the subscription criteria
 * @param {!Podium.Listener} listener  the handler method set to receive event updates. The function signature depends on the block, spread, and tags options.
 * @return {void}
 */
Podium.prototype.addListener = function(criteria, listener) {};

/**
 * podium.once(criteria, listener)
 * Same as podium.on() with the count option set to 1.
 * @see {\@link https://github.com/hapijs/podium/blob/master/API.md#podiumoncriteria-listener}
 * @param {(string|!Podium.CriteriaObject)} criteria  the subscription criteria
 * @param {!Podium.Listener} listener  the handler method set to receive event updates. The function signature depends on the block, spread, and tags options.
 * @return {void}
 */
Podium.prototype.once = function(criteria, listener) {};

/**
 * podium.removeListener(name, listener)
 * Removes all listeners subscribed to a given event name matching the provided listener method where:
 * @see {\@link https://github.com/hapijs/podium/blob/master/API.md#podiumremovelistenername-listener}
 * @param {string} name  the event name string.
 * @param {!Podium.Listener} listener  the function reference provided when subscribed.
 * Returns a reference to the current emitter.
 * @return {?}
 */
Podium.prototype.removeListener = function(name, listener) {};

/**
 * podium.removeAllListeners(name)
 * Removes all listeners subscribed to a given event name
 * @see {\@link https://github.com/hapijs/podium/blob/master/API.md#podiumremovealllistenersname}
 * @param {string} name  the event name string.
 * Returns a reference to the current emitter.
 * @return {?}
 */
Podium.prototype.removeAllListeners = function(name) {};

/**
 * podium.hasListeners(name)
 * Returns whether an event has any listeners subscribed
 * @see {\@link https://github.com/hapijs/podium/blob/master/API.md#podiumhaslistenersname}
 * @param {string} name  the event name string.
 * Returns true if the event name has any listeners, otherwise false.
 * @return {boolean}
 */
Podium.prototype.hasListeners = function(name) {};

/** @typedef {(string|!Podium.EventOptionsObject|?)} */
Podium.Events;
/**
 * @record
 * @struct
 */
Podium.EventOptionsObject = function() {};
 /** @type {string} */
Podium.EventOptionsObject.prototype.name;
 /** @type {(string|!Array<string>)} */
Podium.EventOptionsObject.prototype.channels;
 /** @type {boolean} */
Podium.EventOptionsObject.prototype.clone;
 /** @type {boolean} */
Podium.EventOptionsObject.prototype.spread;
 /** @type {boolean} */
Podium.EventOptionsObject.prototype.tags;
 /** @type {boolean} */
Podium.EventOptionsObject.prototype.shared;
/**
 * @record
 * @struct
 */
Podium.CriteriaObject = function() {};
 /** @type {string} */
Podium.CriteriaObject.prototype.name;
 /** @type {(number|boolean)} */
Podium.CriteriaObject.prototype.block;
 /** @type {(string|!Array<string>)} */
Podium.CriteriaObject.prototype.channels;
 /** @type {boolean} */
Podium.CriteriaObject.prototype.clone;
 /** @type {number} */
Podium.CriteriaObject.prototype.count;
 /** @type {(string|!Array<string>|!Podium.CriteriaFilterOptionsObject)} */
Podium.CriteriaObject.prototype.filter;
 /** @type {boolean} */
Podium.CriteriaObject.prototype.spread;
 /** @type {boolean} */
Podium.CriteriaObject.prototype.tags;
 /** @type {!Podium.Listener} */
Podium.CriteriaObject.prototype.listener;
/**
 * @record
 * @struct
 */
Podium.CriteriaFilterOptionsObject = function() {};
 /** @type {(string|!Array<string>)} */
Podium.CriteriaFilterOptionsObject.prototype.tags;
 /** @type {boolean} */
Podium.CriteriaFilterOptionsObject.prototype.all;

/** @typedef {(string|!Podium.CriteriaObject)} */
Podium.Criteria;
/**
 * @record
 * @struct
 */
Podium.Listener = function() {};

/* TODO: CallSignature: Podium */

/** @typedef {!Object<string,boolean>} */
Podium.Tags;
 /** @type {?} */
var Podium;

/* TODO: ExportAssignment in  */
