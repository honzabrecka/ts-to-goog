/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/expect/index.d.ts:
/** @const */
var expect = {};

/** @typedef {function(T, T): boolean} */
expect.CompareValues;

/** @typedef {function(!Object, string): boolean} */
expect.Comparator;

/** @typedef {(string|number)} */
expect.KeyType;

/**
 * @constructor
 * @struct
 * @param {?} actual
 */
expect.Expectation = function(actual) {};

/**
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toExist = function(message) {};

/**
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toBeTruthy = function(message) {};

/**
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toNotExist = function(message) {};

/**
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toBeFalsy = function(message) {};

/**
 * @param {T} value
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toBe = function(value, message) {};

/**
 * @param {?} value
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toNotBe = function(value, message) {};

/**
 * @param {?} value
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toEqual = function(value, message) {};

/**
 * @param {?} value
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toNotEqual = function(value, message) {};

/**
 * @param {!Object=} error
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toThrow = function(error, message) {};

/**
 * @param {!Object=} error
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toNotThrow = function(error, message) {};

/**
 * @param {(string|!Object)} value
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toBeA = function(value, message) {};

/**
 * @param {(string|!Object)} value
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toBeAn = function(value, message) {};

/**
 * @param {(string|!Object)} value
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toNotBeA = function(value, message) {};

/**
 * @param {(string|!Object)} value
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toNotBeAn = function(value, message) {};

/**
 * @param {(string|!Object|!RegExp)} value
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toMatch = function(value, message) {};

/**
 * @param {(string|!Object|!RegExp)} value
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toNotMatch = function(value, message) {};

/**
 * @param {number} value
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toBeLessThan = function(value, message) {};

/**
 * @param {number} value
 * @param {string=} messasge
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toBeLessThanOrEqualTo = function(value, messasge) {};

/**
 * @param {number} value
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toBeFewerThan = function(value, message) {};

/**
 * @param {number} value
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toBeGreaterThan = function(value, message) {};

/**
 * @param {number} value
 * @param {string=} messasge
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toBeGreaterThanOrEqualTo = function(value, messasge) {};

/**
 * @param {number} value
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toBeMoreThan = function(value, message) {};

/**
 * @template U
 * @param {?} value
 * @param {function(U, U): boolean=} compareValues
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toInclude = function(value, compareValues, message) {};

/**
 * @template U
 * @param {?} value
 * @param {function(U, U): boolean=} compareValues
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toContain = function(value, compareValues, message) {};

/**
 * @template U
 * @param {?} value
 * @param {function(U, U): boolean=} compareValues
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toExclude = function(value, compareValues, message) {};

/**
 * @template U
 * @param {?} value
 * @param {function(U, U): boolean=} compareValues
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toNotContain = function(value, compareValues, message) {};

/**
 * @param {!Array<(string|number)>} keys
 * @param {function(!Object, string): boolean=} comparator
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toIncludeKeys = function(keys, comparator, message) {};

/**
 * @param {!Array<(string|number)>} keys
 * @param {function(!Object, string): boolean=} comparator
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toContainKeys = function(keys, comparator, message) {};

/**
 * @param {!Array<(string|number)>} keys
 * @param {function(!Object, string): boolean=} comparator
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toExcludeKeys = function(keys, comparator, message) {};

/**
 * @param {!Array<(string|number)>} keys
 * @param {function(!Object, string): boolean=} comparator
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toNotContainKeys = function(keys, comparator, message) {};

/**
 * @param {!Array<(string|number)>} keys
 * @param {function(!Object, string): boolean=} comparator
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toNotIncludeKeys = function(keys, comparator, message) {};

/**
 * @param {(string|number)} key
 * @param {function(!Object, string): boolean=} comparator
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toIncludeKey = function(key, comparator, message) {};

/**
 * @param {(string|number)} key
 * @param {function(!Object, string): boolean=} comparator
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toContainKey = function(key, comparator, message) {};

/**
 * @param {(string|number)} key
 * @param {function(!Object, string): boolean=} comparator
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toExcludeKey = function(key, comparator, message) {};

/**
 * @param {(string|number)} key
 * @param {function(!Object, string): boolean=} comparator
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toNotContainKey = function(key, comparator, message) {};

/**
 * @param {(string|number)} key
 * @param {function(!Object, string): boolean=} comparator
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toNotIncludeKey = function(key, comparator, message) {};

/**
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toHaveBeenCalled = function(message) {};

/**
 * @param {string=} message
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toNotHaveBeenCalled = function(message) {};

/**
 * @param {...?} args
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.toHaveBeenCalledWith = function(args) {};

/**
 * @param {?} context
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.withContext = function(context) {};

/**
 * @param {...?} args
 * @return {!expect.Expectation}
 */
expect.Expectation.prototype.withArgs = function(args) {};
/**
 * @record
 * @struct
 */
expect.Extension = function() {};

/* TODO: IndexSignature: expect */
/**
 * @record
 * @struct
 */
expect.Call = function() {};
 /** @type {T} */
expect.Call.prototype.context;
 /** @type {!Array<?>} */
expect.Call.prototype.arguments;
/**
 * @record
 * @struct
 */
expect.Spy = function() {};

/* TODO: CallSignature: expect */
 /** @type {boolean} */
expect.Spy.prototype.__isSpy;
 /** @type {!Array<!expect.Call<T>>} */
expect.Spy.prototype.calls;

/**
 * @param {function(!Array<?>): ?} fn
 * @return {!expect.Spy}
 */
expect.Spy.prototype.andCall = function(fn) {};

/**
 * @return {!expect.Spy}
 */
expect.Spy.prototype.andCallThrough = function() {};

/**
 * @param {!Object} object
 * @return {!expect.Spy}
 */
expect.Spy.prototype.andThrow = function(object) {};

/**
 * @param {?} value
 * @return {!expect.Spy}
 */
expect.Spy.prototype.andReturn = function(value) {};

/**
 * @return {!expect.Call<T>}
 */
expect.Spy.prototype.getLastCall = function() {};

/**
 * @return {void}
 */
expect.Spy.prototype.restore = function() {};

/**
 * @return {void}
 */
expect.Spy.prototype.destroy = function() {};

/**
 * @return {void}
 */
expect.Spy.prototype.reset = function() {};

/**
 * @param {function(!Array<?>): ?=} fn
 * @param {function(!Array<?>): ?=} restore
 * @return {!expect.Spy<?>}
 */
expect.createSpy = function(fn, restore) {};

/**
 * @template T
 * @param {T} object
 * @param {string} methodName
 * @return {!expect.Spy<T>}
 */
expect.spyOn = function(object, methodName) {};

/**
 * @param {!Object} object
 * @return {boolean}
 */
expect.isSpy = function(object) {};

/**
 * @return {void}
 */
expect.restoreSpies = function() {};

/**
 * @param {boolean} condition
 * @param {string} messageFormat
 * @param {...?} extraArgs
 * @return {void}
 */
expect.assert = function(condition, messageFormat, extraArgs) {};

/**
 * @param {!expect.Extension} extension
 * @return {void}
 */
expect.extend = function(extension) {};

/**
 * @template T
 * @param {T} actual
 * @return {!expect.Expectation<T>}
 */
function expect(actual) {}

/* TODO: ExportAssignment in  */
