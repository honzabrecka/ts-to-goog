/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/atom-keymap/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ExportAssignment in  */
/** @const */
var AtomKeymap = {};

/** @typedef {?} */
AtomKeymap.Disposable;
/**
 * @record
 * @struct
 */
AtomKeymap.KeyBinding = function() {};
 /** @type {boolean} */
AtomKeymap.KeyBinding.prototype.enabled;
 /** @type {string} */
AtomKeymap.KeyBinding.prototype.source;
 /** @type {string} */
AtomKeymap.KeyBinding.prototype.command;
 /** @type {string} */
AtomKeymap.KeyBinding.prototype.keystrokes;
 /** @type {number} */
AtomKeymap.KeyBinding.prototype.keystrokeCount;
 /** @type {string} */
AtomKeymap.KeyBinding.prototype.selector;
 /** @type {number} */
AtomKeymap.KeyBinding.prototype.specificity;

/**
 * @param {string} keystroke
 * @return {boolean}
 */
AtomKeymap.KeyBinding.prototype.matches = function(keystroke) {};

/**
 * @param {!AtomKeymap.KeyBinding} keyBinding
 * @return {number}
 */
AtomKeymap.KeyBinding.prototype.compare = function(keyBinding) {};
/**
 * @record
 * @struct
 */
AtomKeymap.ICompleteMatchEvent = function() {};
 /** @type {string} */
AtomKeymap.ICompleteMatchEvent.prototype.keystrokes;
 /** @type {!AtomKeymap.KeyBinding} */
AtomKeymap.ICompleteMatchEvent.prototype.binding;
 /** @type {!Element} */
AtomKeymap.ICompleteMatchEvent.prototype.keyboardEventTarget;
/**
 * @record
 * @struct
 */
AtomKeymap.IPartialMatchEvent = function() {};
 /** @type {string} */
AtomKeymap.IPartialMatchEvent.prototype.keystrokes;
 /** @type {!Array<!AtomKeymap.KeyBinding>} */
AtomKeymap.IPartialMatchEvent.prototype.partiallyMatchedBindings;
 /** @type {!Element} */
AtomKeymap.IPartialMatchEvent.prototype.keyboardEventTarget;
/**
 * @record
 * @struct
 */
AtomKeymap.IFailedMatchEvent = function() {};
 /** @type {string} */
AtomKeymap.IFailedMatchEvent.prototype.keystrokes;
 /** @type {!Element} */
AtomKeymap.IFailedMatchEvent.prototype.keyboardEventTarget;
/**
 * @record
 * @struct
 */
AtomKeymap.IKeymapLoadEvent = function() {};
 /** @type {string} */
AtomKeymap.IKeymapLoadEvent.prototype.path;
/**
 * @record
 * @struct
 */
AtomKeymap.KeymapManagerStatic = function() {};
 /** @type {?} */
AtomKeymap.KeymapManagerStatic.prototype.prototype;

/* TODO: ConstructSignature: AtomKeymap */
/**
 * @record
 * @struct
 */
AtomKeymap.KeymapManager = function() {};
 /** @type {!AtomKeymap.KeymapManagerStatic} */
AtomKeymap.KeymapManager.prototype.constructor;

/**
 * Unwatches all watched paths.
 * @return {void}
 */
AtomKeymap.KeymapManager.prototype.destroy = function() {};

/**
 * Sets callback to invoke when one or more keystrokes completely match a key binding.
 * @param {function(!AtomKeymap.ICompleteMatchEvent): void} callback
 * @return {?}
 */
AtomKeymap.KeymapManager.prototype.onDidMatchBinding = function(callback) {};

/**
 * Sets callback to invoke when one or more keystrokes partially match a binding.
 * @param {function(!AtomKeymap.IPartialMatchEvent): void} callback
 * @return {?}
 */
AtomKeymap.KeymapManager.prototype.onDidPartiallyMatchBindings = function(callback) {};

/**
 * Sets callback to invoke when one or more keystrokes fail to match any bindings.
 * @param {function(!AtomKeymap.IFailedMatchEvent): void} callback
 * @return {?}
 */
AtomKeymap.KeymapManager.prototype.onDidFailToMatchBinding = function(callback) {};

/**
 * Sets callback to invoke when a keymap file is reloaded.
 * @param {function(!AtomKeymap.IKeymapLoadEvent): void} callback
 * @return {?}
 */
AtomKeymap.KeymapManager.prototype.onDidReloadKeymap = function(callback) {};

/**
 * Sets callback to invoke when a keymap file is unloaded.
 * @param {function(!AtomKeymap.IKeymapLoadEvent): void} callback
 * @return {?}
 */
AtomKeymap.KeymapManager.prototype.onDidUnloadKeymap = function(callback) {};

/**
 * Sets callback to invoke when a keymap file could not to be loaded.
 * @param {function(!Error): void} callback
 * @return {?}
 */
AtomKeymap.KeymapManager.prototype.onDidFailToReadFile = function(callback) {};

/**
 * Adds sets of key bindings grouped by CSS selector.
 * @param {string} source
 * @param {?} keyBindingsBySelector
 * @return {?}
 */
AtomKeymap.KeymapManager.prototype.add = function(source, keyBindingsBySelector) {};

/**
 * @return {!Array<!AtomKeymap.KeyBinding>}
 */
AtomKeymap.KeymapManager.prototype.getKeyBindings = function() {};

/**
 * @param {{keystrokes: string, command: string, target: !Element}=} params
 * @return {!Array<!AtomKeymap.KeyBinding>}
 */
AtomKeymap.KeymapManager.prototype.findKeyBindings = function(params) {};

/**
 * Loads the key bindings from the given path.
 * 
 * @param {string} bindingsPath A path to a file or a directory. If the path is a directory all files
 *                     inside it will be loaded.
 * @param {{watch: boolean}=} options
 * @return {void}
 */
AtomKeymap.KeymapManager.prototype.loadKeymap = function(bindingsPath, options) {};

/**
 * Starts watching the given file/directory for changes, reloading any keymaps at that location
 * when changes are detected.
 * 
 * @param {string} filePath A path to a file or a directory.
 * @return {void}
 */
AtomKeymap.KeymapManager.prototype.watchKeymap = function(filePath) {};

/**
 * Dispatches a custom event associated with the matching key binding for the given
 * `KeyboardEvent` if one can be found.
 * @param {!KeyboardEvent} event
 * @return {void}
 */
AtomKeymap.KeymapManager.prototype.handleKeyboardEvent = function(event) {};

/**
 * Translates a keydown event to a keystroke string.
 * @param {!KeyboardEvent} event
 * @return {string}
 */
AtomKeymap.KeymapManager.prototype.keystrokeForKeyboardEvent = function(event) {};

/**
 * @return {number} The number of milliseconds allowed before pending states caused by partial matches of
 *         multi-keystroke bindings are terminated.
 */
AtomKeymap.KeymapManager.prototype.getPartialMatchTimeout = function() {};
 /** @type {!AtomKeymap.KeymapManagerStatic} */
AtomKeymap.KeymapManager;
