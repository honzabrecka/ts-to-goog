/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/seamless/index.d.ts:
/** @const */
var Seamless = {};
/**
 * @record
 * @struct
 */
Seamless.SeamlessJQuery = function() {};
 /** @type {!Seamless.Options} */
Seamless.SeamlessJQuery.prototype.seamless_options;
 /** @type {!Seamless.Connection} */
Seamless.SeamlessJQuery.prototype.connection;

/**
 * @param {?} data
 * @return {void}
 */
Seamless.SeamlessJQuery.prototype.send = function(data) {};

/**
 * @param {!Seamless.Callback|string} callback_or_type
 * @param {!Seamless.Callback=} callback
 * @return {void}
 */
Seamless.SeamlessJQuery.prototype.receive = function(callback_or_type, callback) {};

/**
 * @param {?} data
 * @param {?} event
 * @return {void}
 */
Seamless.SeamlessJQuery.prototype.seamless_ready = function(data, event) {};

/**
 * @param {?} data
 * @param {?} event
 * @return {?}
 */
Seamless.SeamlessJQuery.prototype.seamless_update = function(data, event) {};

/**
 * @param {?} data
 * @param {?} event
 * @return {void}
 */
Seamless.SeamlessJQuery.prototype.seamless_error = function(data, event) {};
/**
 * @record
 * @struct
 */
Seamless.Options = function() {};
 /** @type {string} */
Seamless.Options.prototype.loading;
 /** @type {string} */
Seamless.Options.prototype.spinner;
 /** @type {boolean} */
Seamless.Options.prototype.showLoadingIndicator;
 /** @type {function(?): void} */
Seamless.Options.prototype.onConnect;
 /** @type {!Array<string>} */
Seamless.Options.prototype.styles;
 /** @type {boolean} */
Seamless.Options.prototype.fallback;
 /** @type {string} */
Seamless.Options.prototype.fallbackParams;
 /** @type {string} */
Seamless.Options.prototype.fallbackText;
 /** @type {string} */
Seamless.Options.prototype.fallbackLinkText;
 /** @type {string} */
Seamless.Options.prototype.fallbackLinkAfter;
 /** @type {!Array<string>} */
Seamless.Options.prototype.fallbackStyles;
 /** @type {!Array<string>} */
Seamless.Options.prototype.fallbackLinkStyles;
 /** @type {!Array<string>} */
Seamless.Options.prototype.fallbackLinkHoverStyles;
 /** @type {number} */
Seamless.Options.prototype.fallbackWindowWidth;
 /** @type {number} */
Seamless.Options.prototype.fallbackWindowHeight;
/**
 * @record
 * @struct
 */
Seamless.ConnectOptions = function() {};
 /** @type {string} */
Seamless.ConnectOptions.prototype.url;
 /** @type {string} */
Seamless.ConnectOptions.prototype.container;
 /** @type {number} */
Seamless.ConnectOptions.prototype.update;
 /** @type {boolean} */
Seamless.ConnectOptions.prototype.allowStyleInjection;
 /** @type {boolean} */
Seamless.ConnectOptions.prototype.allowAppendedStyleInjection;
 /** @type {boolean} */
Seamless.ConnectOptions.prototype.requireCookies;
 /** @type {string} */
Seamless.ConnectOptions.prototype.cookieFallbackMsg;
 /** @type {string} */
Seamless.ConnectOptions.prototype.cookieFallbackLinkMsg;
 /** @type {string} */
Seamless.ConnectOptions.prototype.cookieFallbackAfterMsg;

/**
 *  Callback that is called when an update is triggered to the parent.
 *  \@default null
 * @param {?} data
 * @return {void}
 */
Seamless.ConnectOptions.prototype.onUpdate = function(data) {};

/**
 *  Called when the parent connects to this iframe.
 *  \@default null
 * @param {?} data
 * @return {void}
 */
Seamless.ConnectOptions.prototype.onConnect = function(data) {};
/**
 * @record
 * @struct
 */
Seamless.Callback = function() {};

/* TODO: CallSignature: Seamless */
/**
 * @record
 * @struct
 */
Seamless.Connection = function() {};
 /** @type {number} */
Seamless.Connection.prototype.id;
 /** @type {string} */
Seamless.Connection.prototype.target;
 /** @type {string} */
Seamless.Connection.prototype.url;
 /** @type {boolean} */
Seamless.Connection.prototype.active;
 /** @type {!Array<?>} */
Seamless.Connection.prototype.queue;

/**
 * @param {?} data
 * @return {void}
 */
Seamless.Connection.prototype.send = function(data) {};

/**
 * @param {!Seamless.Callback|string} callback_or_type
 * @param {!Seamless.Callback=} callback
 * @return {void}
 */
Seamless.Connection.prototype.receive = function(callback_or_type, callback) {};

/**
 * @param {boolean} active
 * @return {void}
 */
Seamless.Connection.prototype.setActive = function(active) {};
/**
 * @record
 * @struct
 */
Seamless.Static = function() {};
 /** @type {!Seamless.ConnectOptions} */
Seamless.Static.prototype.options;

/**
 * @param {!Seamless.ConnectOptions} options
 * @return {!Seamless.Connection}
 */
Seamless.Static.prototype.connect = function(options) {};

/**
 * @param {!Seamless.Options=} options
 * @return {!Seamless.SeamlessJQuery}
 */
JQuery.prototype.seamless = function(options) {};
 /** @type {!Seamless.Static} */
JQueryStatic.prototype.seamless;
