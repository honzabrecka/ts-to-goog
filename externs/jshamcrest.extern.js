/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jshamcrest/index.d.ts:
/** @const */
var JsHamcrest = {};
 /** @type {string} */
JsHamcrest.version;
/**
 * @record
 * @struct
 */
JsHamcrest.DescribeTo = function() {};

/* TODO: CallSignature: JsHamcrest */
/**
 * @record
 * @struct
 */
JsHamcrest.DescribeValueTo = function() {};

/* TODO: CallSignature: JsHamcrest */
/**
 * @record
 * @struct
 */
JsHamcrest.SelfDescribing = function() {};
 /** @type {!JsHamcrest.DescribeTo} */
JsHamcrest.SelfDescribing.prototype.describeTo;
/**
 * @constructor
 * @struct
 */
JsHamcrest.Description = function() {};

/**
 * Appends text to this description.
 * 
 * @param {?} text Text to append to this description
 * @return {!JsHamcrest.Description}
 */
JsHamcrest.Description.prototype.append = function(text) {};

/**
 * Appends the description of a self describing object to this description.
 * 
 * @param {!JsHamcrest.SelfDescribing} selfDescribingObject Any object that has a describeTo() function that accepts a JsHamcrest.Description object as argument
 * @return {!JsHamcrest.Description}
 */
JsHamcrest.Description.prototype.appendDescriptionOf = function(selfDescribingObject) {};

/**
 * Appends the description of several self describing objects to this description.
 * 
 * @param {string} start Start string
 * @param {string} separator Separator string
 * @param {string} end End string
 * @param {!Array<?>} list Array of self describing objects. These objects must have a describeTo() function that accepts a JsHamcrest.Description object as argument
 * @return {!JsHamcrest.Description}
 */
JsHamcrest.Description.prototype.appendList = function(start, separator, end, list) {};

/**
 * Appends a JavaScript languageâ€™s literal to this description.
 * 
 * @param {?} literal Literal to append to this description
 * @return {!JsHamcrest.Description}
 */
JsHamcrest.Description.prototype.appendLiteral = function(literal) {};

/**
 * Appends an array of values to this description.
 * 
 * @param {string} start Start string
 * @param {string} separator Separator string
 * @param {string} end End string
 * @param {!Array<!JsHamcrest.SelfDescribing>} list Array of values to be described to this description
 * @return {!JsHamcrest.Description}
 */
JsHamcrest.Description.prototype.appendValueList = function(start, separator, end, list) {};

/**
 * Gets the current content of this description.
 * 
 * @return {string}
 */
JsHamcrest.Description.prototype.get = function() {};
/**
 * @record
 * @struct
 */
JsHamcrest.Matches = function() {};

/* TODO: CallSignature: JsHamcrest */
/**
 * @extends {JsHamcrest.SelfDescribing}
 * @record
 * @struct
 */
JsHamcrest.Matcher = function() {};
 /** @type {!JsHamcrest.Matches} */
JsHamcrest.Matcher.prototype.matches;
 /** @type {!JsHamcrest.DescribeValueTo} */
JsHamcrest.Matcher.prototype.describeValueTo;
/**
 * @record
 * @struct
 */
JsHamcrest.MatcherConfig = function() {};
 /** @type {!JsHamcrest.Matches} */
JsHamcrest.MatcherConfig.prototype.matches;
 /** @type {!JsHamcrest.DescribeTo} */
JsHamcrest.MatcherConfig.prototype.describeTo;
 /** @type {!JsHamcrest.DescribeValueTo} */
JsHamcrest.MatcherConfig.prototype.describeValueTo;

/**
 * @constructor
 * @struct
 * @param {!JsHamcrest.MatcherConfig} config
 */
JsHamcrest.SimpleMatcher = function(config) {};
 /** @type {!JsHamcrest.Matches} */
JsHamcrest.SimpleMatcher.prototype.matches;
 /** @type {!JsHamcrest.DescribeTo} */
JsHamcrest.SimpleMatcher.prototype.describeTo;
 /** @type {!JsHamcrest.DescribeValueTo} */
JsHamcrest.SimpleMatcher.prototype.describeValueTo;
/**
 * @extends {JsHamcrest.SimpleMatcher}
 * @constructor
 * @struct
 */
JsHamcrest.CombinableMatcher = function() {};

/**
 * Wraps this matcher and the given matcher using JsHamcrest.Matchers.allOf().
 * 
 * @param {?} matcherOrValue Instance of JsHamcrest.SimpleMatcher or a value
 * @return {!JsHamcrest.CombinableMatcher}
 */
JsHamcrest.CombinableMatcher.prototype.and = function(matcherOrValue) {};

/**
 * Wraps this matcher and the given matcher using JsHamcrest.Matchers.anyOf().
 * 
 * @param {?} matcherOrValue Instance of JsHamcrest.SimpleMatcher or a value
 * @return {!JsHamcrest.CombinableMatcher}
 */
JsHamcrest.CombinableMatcher.prototype.or = function(matcherOrValue) {};

/**
 * Checks if the given object is a matcher or not.
 * 
 * @param {?} obj Object to check
 * @return {boolean}
 */
JsHamcrest.isMatcher = function(obj) {};

/**
 * Delegate function, useful when used to create a matcher that has a value-equalTo semantic.
 * 
 * @param {function(!JsHamcrest.Matcher): !JsHamcrest.Matcher} factory Creates a new matcher that delegates to the passed/wrapped matcherOrValue
 * @return {function(?): !JsHamcrest.Matcher}
 */
JsHamcrest.EqualTo = function(factory) {};
/** @const */
JsHamcrest.Operators = {};
/**
 * @record
 * @struct
 */
JsHamcrest.Operators.AssertOptions = function() {};
 /** @type {?} */
JsHamcrest.Operators.AssertOptions.prototype.message;
 /** @type {function(string): void} */
JsHamcrest.Operators.AssertOptions.prototype.pass;
 /** @type {function(string): void} */
JsHamcrest.Operators.AssertOptions.prototype.fail;

/**
 * Fails if the actual value does not match the matcher.
 * 
 * @param {?} actual Value to test against the matcher
 * @param {?=} matcherOrValue Applied to the value; wrapped with equalTo() if not a matcher
 * @param {!JsHamcrest.Operators.AssertOptions=} options Provides message and pass/fail handlers
 * @return {!JsHamcrest.Description}
 */
JsHamcrest.Operators.assert = function(actual, matcherOrValue, options) {};

/**
 * Returns those items of the array for which matcher matches.
 * 
 * @param {!Array<?>} array The values to filter
 * @param {?} matcherOrValue Applied to each value
 * @return {!Array<?>}
 */
JsHamcrest.Operators.filter = function(array, matcherOrValue) {};

/**
 * Delegate function, useful when used along with raises() and raisesAnything().
 * 
 * @param {function(!Array<?>): ?} func Function to delegate to
 * @param {...?} args Passed to func
 * @return {function(): ?}
 */
JsHamcrest.Operators.callTo = function(func, args) {};
/** @const */
JsHamcrest.Matchers = {};

/**
 * The length of the actual value must be zero.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.empty = function() {};

/**
 * The actual value should be an array and matcherOrValue must match all items.
 * 
 * @param {?} matcherOrValue Instance of JsHamcrest.SimpleMatcher or a value
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.everyItem = function(matcherOrValue) {};

/**
 * The actual value should be an array and it must contain at least one value that matches matcherOrValue.
 * 
 * @param {?} matcherOrValue Instance of JsHamcrest.SimpleMatcher or a value
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.hasItem = function(matcherOrValue) {};

/**
 * The actual value should be an array and matchersOrValues must match at least one item.
 * 
 * @param {...?} matchersOrValues Instances of JsHamcrest.SimpleMatcher and/or values
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.hasItems = function(matchersOrValues) {};

/**
 * The length of the actual value must match matcherOrValue.
 * 
 * @param {?} matcherOrValue Instance of JsHamcrest.SimpleMatcher or a value
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.hasSize = function(matcherOrValue) {};

/**
 * The given array or arguments must contain the actual value.
 * 
 * @param {...?} items Array or list of values
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.isIn = function(items) {};

/**
 * Alias to isIn() function.
 * 
 * @param {...?} items Array or list of values
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.oneOf = function(items) {};

/**
 * All matchesOrValues must match the actual value. This matcher behaves pretty much like the JavaScript && (and) operator.
 * 
 * @param {...?} matchersOrValues Instances of JsHamcrest.SimpleMatcher and/or values
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.allOf = function(matchersOrValues) {};

/**
 * At least one of the matchersOrValues should match the actual value. This matcher behaves pretty much like the JavaScript || (or) operator.
 * 
 * @param {...?} matchersOrValues Instances of JsHamcrest.SimpleMatcher and/or values
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.anyOf = function(matchersOrValues) {};

/**
 * Useless always-match matcher.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.anything = function() {};

/**
 * Combinable matcher where the actual value must match all the given matchers or values.
 * 
 * @param {?} matcherOrValue Instance of JsHamcrest.SimpleMatcher or a value
 * @return {!JsHamcrest.CombinableMatcher}
 */
JsHamcrest.Matchers.both = function(matcherOrValue) {};

/**
 * Combinable matcher where the actual value must match at least one of the given matchers or values.
 * 
 * @param {?} matcherOrValue Instance of JsHamcrest.SimpleMatcher or a value
 * @return {!JsHamcrest.CombinableMatcher}
 */
JsHamcrest.Matchers.either = function(matcherOrValue) {};

/**
 * The actual value must be equal to expected.
 * 
 * @param {?} expected Expected value
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.equalTo = function(expected) {};

/**
 * Delegate-only matcher frequently used to improve readability.
 * 
 * @param {?} matcherOrValue Instance of JsHamcrest.SimpleMatcher or a value
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.is = function(matcherOrValue) {};

/**
 * The actual value must be null or undefined.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.nil = function() {};

/**
 * The actual value must not match matcherOrValue.
 * 
 * @param {?} matcherOrValue Instance of JsHamcrest.SimpleMatcher or a value
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.not = function(matcherOrValue) {};

/**
 * The actual value is a function and, when invoked, it should throw an exception with the given name.
 * 
 * @param {string} exceptionName Name of the expected exception
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.raises = function(exceptionName) {};

/**
 * The actual value is a function and, when invoked, it should raise any exception.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.raisesAnything = function() {};

/**
 * The actual value must be the same as expected.
 * 
 * @param {?} expected Expected value
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.sameAs = function(expected) {};

/**
 * Matches any truthy value (not undefined, null, false, 0, NaN, or "").
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.truth = function() {};

/**
 * The actual number must be between the given range (inclusive).
 * 
 * @param {?} start Range start
 * @return {!JsHamcrest.BetweenBuilder}
 */
JsHamcrest.Matchers.between = function(start) {};

/**
 * The actual number must be close enough to expected, that is, the actual number is equal to a value within some range of acceptable error.
 * 
 * @param {number} expected Expected number
 * @param {number=} delta
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.closeTo = function(expected, delta) {};

/**
 * The actual number must be divisible by divisor.
 * 
 * @param {number} divisor Divisor
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.divisibleBy = function(divisor) {};

/**
 * The actual number must be even.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.even = function() {};

/**
 * The actual number must be greater than expected.
 * 
 * @param {?} expected Expected number
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.greaterThan = function(expected) {};

/**
 * The actual number must be greater than or equal to expected.
 * 
 * @param {?} expected Expected number
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.greaterThanOrEqualTo = function(expected) {};

/**
 * The actual number must be less than expected.
 * 
 * @param {?} expected Expected number
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.lessThan = function(expected) {};

/**
 * The actual number must be less than or equal to expected.
 * 
 * @param {?} expected Expected number
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.lessThanOrEqualTo = function(expected) {};

/**
 * The actual value must not be a number.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.notANumber = function() {};

/**
 * The actual number must be odd.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.odd = function() {};

/**
 * The actual number must be zero.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.zero = function() {};

/**
 * The actual value must be a boolean.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.bool = function() {};

/**
 * The actual value must be a function.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.func = function() {};

/**
 * The actual value has a function with the given name.
 * 
 * @param {string} functionName Function name
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.hasFunction = function(functionName) {};

/**
 * The actual value has an attribute with the given name.
 * 
 * @param {string} memberName Member name
 * @param {?=} matcherOrValue
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.hasMember = function(memberName, matcherOrValue) {};

/**
 * The actual value must be an instance of clazz.
 * 
 * @param {function(new: (?)): ?} clazz Constructor function
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.instanceOf = function(clazz) {};

/**
 * The actual value must be a number.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.number = function() {};

/**
 * The actual value must be an object.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.object = function() {};

/**
 * The actual value must be a string.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.string = function() {};

/**
 * The actual value must be of the given type.
 * 
 * @param {string} typeName Name of the type
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.typeOf = function(typeName) {};

/**
 * The actual string must have a substring equals to str.
 * 
 * @param {string} str Substring
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.containsString = function(str) {};

/**
 * The actual string must look like an e-mail address.
 * 
 * Warning: This matcher is not fully compliant with RFC2822 due to its complexity.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.emailAddress = function() {};

/**
 * The actual string must end with str.
 * 
 * @param {string} str Substring
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.endsWith = function(str) {};

/**
 * The actual string must be equal to str, ignoring case.
 * 
 * @param {string} str String
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.equalIgnoringCase = function(str) {};

/**
 * The actual string must match regex.
 * 
 * @param {!RegExp} regex String
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.matches = function(regex) {};

/**
 * The actual string must start with str.
 * 
 * @param {string} str Substring
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.Matchers.startsWith = function(str) {};
/** @const */
JsHamcrest.Integration = {};

/**
 * Copies all members of the Matchers and Operators modules to target.
 * 
 * Does not overwrite properties with the same name.
 * 
 * Copies all members of source to target.
 * 
 * Does not overwrite properties with the same name.
 * 
 * @param {!Object} target_or_source
 * @param {!Object=} target
 * @return {void}
 */
JsHamcrest.Integration.copyMembers = function(target_or_source, target) {};

/**
 * Adds the members of the given object to JsHamcrest.Matchers namespace.
 * 
 * @param {!Object} source
 * @return {void}
 */
JsHamcrest.Integration.installMatchers = function(source) {};

/**
 * Adds the members of the given object to JsHamcrest.Operators namespace.
 * 
 * @param {!Object} source
 * @return {void}
 */
JsHamcrest.Integration.installOperators = function(source) {};

/**
 * Uses the web browser's alert() function to display the assertion results.
 * Great for quick prototyping.
 * @return {void}
 */
JsHamcrest.Integration.WebBrowser = function() {};

/**
 * Uses Rhino's print() function to display the assertion results.
 * Great for quick prototyping.
 * @return {void}
 */
JsHamcrest.Integration.Rhino = function() {};

/**
 * JsTestDriver integration.
 * 
 * @param {{scope: !Object}=} params Omit to copy members to global scope
 * @return {void}
 */
JsHamcrest.Integration.JsTestDriver = function(params) {};

/**
 * NodeUnit (Node.js Unit Testing) integration.
 * 
 * @param {{scope: !Object}=} params Omit to copy members to "global"
 * @return {void}
 */
JsHamcrest.Integration.Nodeunit = function(params) {};

/**
 * JsUnitTest integration.
 * 
 * @param {{scope: !Object}=} params Omit to copy members to "JsUnitTest.Unit.Testcase.prototype"
 * @return {void}
 */
JsHamcrest.Integration.JsUnitTest = function(params) {};

/**
 * YUITest (Yahoo UI) integration.
 * 
 * @param {{scope: !Object}=} params Omit to copy members to global scope
 * @return {void}
 */
JsHamcrest.Integration.YUITest = function(params) {};

/**
 * QUnit (JQuery) integration.
 * 
 * @param {{scope: !Object}=} params Omit to copy members to global scope
 * @return {void}
 */
JsHamcrest.Integration.QUnit = function(params) {};

/**
 * jsUnity integration.
 * 
 * @param {{scope: !Object, attachAssertions: boolean}=} params Omit to copy members to "jsUnity.env.defaultScope"
 * @return {void}
 */
JsHamcrest.Integration.jsUnity = function(params) {};

/**
 * Screw.Unit integration.
 * 
 * @param {{scope: !Object}=} params Omit to copy members to "Screw.Matchers"
 * @return {void}
 */
JsHamcrest.Integration.screwunit = function(params) {};

/**
 * Jasmine integration.
 * 
 * @param {{scope: !Object}=} params Omit to copy members to global scope
 * @return {void}
 */
JsHamcrest.Integration.jasmine = function(params) {};
/**
 * @constructor
 * @struct
 */
JsHamcrest.BetweenBuilder = function() {};

/**
 * @param {?} end
 * @return {!JsHamcrest.SimpleMatcher}
 */
JsHamcrest.BetweenBuilder.prototype.and = function(end) {};

/**
 * Fails if the actual value does not match the matcher.
 * 
 * @param {?} actual Value to test against the matcher
 * @param {!JsHamcrest.Matcher=} matcher Applied to the value
 * @param {?=} message Prepends the built description
 * @return {!JsHamcrest.Description}
 */
function assertThat(actual, matcher, message) {}

/**
 * The length of the actual value must be zero.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
function empty() {}

/**
 * The actual value should be an array and matcherOrValue must match all items.
 * 
 * @param {?} matcherOrValue Instance of JsHamcrest.SimpleMatcher or a value
 * @return {!JsHamcrest.SimpleMatcher}
 */
function everyItem(matcherOrValue) {}

/**
 * The actual value should be an array and it must contain at least one value that matches matcherOrValue.
 * 
 * @param {?} matcherOrValue Instance of JsHamcrest.SimpleMatcher or a value
 * @return {!JsHamcrest.SimpleMatcher}
 */
function hasItem(matcherOrValue) {}

/**
 * The actual value should be an array and matchersOrValues must match at least one item.
 * 
 * @param {...?} matchersOrValues Instances of JsHamcrest.SimpleMatcher and/or values
 * @return {!JsHamcrest.SimpleMatcher}
 */
function hasItems(matchersOrValues) {}

/**
 * The length of the actual value must match matcherOrValue.
 * 
 * @param {?} matcherOrValue Instance of JsHamcrest.SimpleMatcher or a value
 * @return {!JsHamcrest.SimpleMatcher}
 */
function hasSize(matcherOrValue) {}

/**
 * The given array or arguments must contain the actual value.
 * 
 * @param {...?} items Array or list of values
 * @return {!JsHamcrest.SimpleMatcher}
 */
function isIn(items) {}

/**
 * Alias to isIn() function.
 * 
 * @param {...?} items Array or list of values
 * @return {!JsHamcrest.SimpleMatcher}
 */
function oneOf(items) {}

/**
 * All matchesOrValues must match the actual value. This matcher behaves pretty much like the JavaScript && (and) operator.
 * 
 * @param {...?} matchersOrValues Instances of JsHamcrest.SimpleMatcher and/or values
 * @return {!JsHamcrest.SimpleMatcher}
 */
function allOf(matchersOrValues) {}

/**
 * At least one of the matchersOrValues should match the actual value. This matcher behaves pretty much like the JavaScript || (or) operator.
 * 
 * @param {...?} matchersOrValues Instances of JsHamcrest.SimpleMatcher and/or values
 * @return {!JsHamcrest.SimpleMatcher}
 */
function anyOf(matchersOrValues) {}

/**
 * Useless always-match matcher.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
function anything() {}

/**
 * Combinable matcher where the actual value must match all the given matchers or values.
 * 
 * @param {?} matcherOrValue Instance of JsHamcrest.SimpleMatcher or a value
 * @return {!JsHamcrest.CombinableMatcher}
 */
function both(matcherOrValue) {}

/**
 * Combinable matcher where the actual value must match at least one of the given matchers or values.
 * 
 * @param {?} matcherOrValue Instance of JsHamcrest.SimpleMatcher or a value
 * @return {!JsHamcrest.CombinableMatcher}
 */
function either(matcherOrValue) {}

/**
 * The actual value must be equal to expected.
 * 
 * @param {?} expected Expected value
 * @return {!JsHamcrest.SimpleMatcher}
 */
function equalTo(expected) {}

/**
 * Delegate-only matcher frequently used to improve readability.
 * 
 * @param {?} matcherOrValue Instance of JsHamcrest.SimpleMatcher or a value
 * @return {!JsHamcrest.SimpleMatcher}
 */
function is(matcherOrValue) {}

/**
 * The actual value must be null or undefined.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
function nil() {}

/**
 * The actual value must not match matcherOrValue.
 * 
 * @param {?} matcherOrValue Instance of JsHamcrest.SimpleMatcher or a value
 * @return {!JsHamcrest.SimpleMatcher}
 */
function not(matcherOrValue) {}

/**
 * The actual value is a function and, when invoked, it should throw an exception with the given name.
 * 
 * @param {string} exceptionName Name of the expected exception
 * @return {!JsHamcrest.SimpleMatcher}
 */
function raises(exceptionName) {}

/**
 * The actual value is a function and, when invoked, it should raise any exception.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
function raisesAnything() {}

/**
 * The actual value must be the same as expected.
 * 
 * @param {?} expected Expected value
 * @return {!JsHamcrest.SimpleMatcher}
 */
function sameAs(expected) {}

/**
 * Matches any truthy value (not undefined, null, false, 0, NaN, or "").
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
function truth() {}

/**
 * The actual number must be between the given range (inclusive).
 * 
 * @param {?} start Range start
 * @return {!JsHamcrest.BetweenBuilder}
 */
function between(start) {}

/**
 * The actual number must be close enough to expected, that is, the actual number is equal to a value within some range of acceptable error.
 * 
 * @param {number} expected Expected number
 * @param {number=} delta
 * @return {!JsHamcrest.SimpleMatcher}
 */
function closeTo(expected, delta) {}

/**
 * The actual number must be divisible by divisor.
 * 
 * @param {number} divisor Divisor
 * @return {!JsHamcrest.SimpleMatcher}
 */
function divisibleBy(divisor) {}

/**
 * The actual number must be even.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
function even() {}

/**
 * The actual number must be greater than expected.
 * 
 * @param {?} expected Expected number
 * @return {!JsHamcrest.SimpleMatcher}
 */
function greaterThan(expected) {}

/**
 * The actual number must be greater than or equal to expected.
 * 
 * @param {?} expected Expected number
 * @return {!JsHamcrest.SimpleMatcher}
 */
function greaterThanOrEqualTo(expected) {}

/**
 * The actual number must be less than expected.
 * 
 * @param {?} expected Expected number
 * @return {!JsHamcrest.SimpleMatcher}
 */
function lessThan(expected) {}

/**
 * The actual number must be less than or equal to expected.
 * 
 * @param {?} expected Expected number
 * @return {!JsHamcrest.SimpleMatcher}
 */
function lessThanOrEqualTo(expected) {}

/**
 * The actual value must not be a number.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
function notANumber() {}

/**
 * The actual number must be odd.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
function odd() {}

/**
 * The actual number must be zero.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
function zero() {}

/**
 * The actual value must be a boolean.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
function bool() {}

/**
 * The actual value must be a function.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
function func() {}

/**
 * The actual value has a function with the given name.
 * 
 * @param {string} functionName Function name
 * @return {!JsHamcrest.SimpleMatcher}
 */
function hasFunction(functionName) {}

/**
 * The actual value has an attribute with the given name.
 * 
 * @param {string} memberName Member name
 * @param {?=} matcherOrValue
 * @return {!JsHamcrest.SimpleMatcher}
 */
function hasMember(memberName, matcherOrValue) {}

/**
 * The actual value must be an instance of clazz.
 * 
 * @param {function(new: (?)): ?} clazz Constructor function
 * @return {!JsHamcrest.SimpleMatcher}
 */
function instanceOf(clazz) {}

/**
 * The actual value must be a number.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
function number() {}

/**
 * The actual value must be an object.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
function object() {}

/**
 * The actual value must be a string.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
function string() {}

/**
 * The actual value must be of the given type.
 * 
 * @param {string} typeName Name of the type
 * @return {!JsHamcrest.SimpleMatcher}
 */
function typeOf(typeName) {}

/**
 * The actual string must have a substring equals to str.
 * 
 * @param {string} str Substring
 * @return {!JsHamcrest.SimpleMatcher}
 */
function containsString(str) {}

/**
 * The actual string must look like an e-mail address.
 * 
 * Warning: This matcher is not fully compliant with RFC2822 due to its complexity.
 * 
 * @return {!JsHamcrest.SimpleMatcher}
 */
function emailAddress() {}

/**
 * The actual string must end with str.
 * 
 * @param {string} str Substring
 * @return {!JsHamcrest.SimpleMatcher}
 */
function endsWith(str) {}

/**
 * The actual string must be equal to str, ignoring case.
 * 
 * @param {string} str String
 * @return {!JsHamcrest.SimpleMatcher}
 */
function equalIgnoringCase(str) {}

/**
 * The actual string must match regex.
 * 
 * @param {!RegExp} regex String
 * @return {!JsHamcrest.SimpleMatcher}
 */
function matches(regex) {}

/**
 * The actual string must start with str.
 * 
 * @param {string} str Substring
 * @return {!JsHamcrest.SimpleMatcher}
 */
function startsWith(str) {}
