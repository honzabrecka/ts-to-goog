/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/rx-lite-time/index.d.ts:

/**
 * @param {number} dueTime
 * @param {!Rx.IScheduler=} scheduler
 * @return {?}
 */
Rx.Observable.prototype.delaySubscription = function(dueTime, scheduler) {};

/**
 * @param {function(T): number|number} delayDurationSelector_or_subscriptionDelay
 * @param {function(T): number=} delayDurationSelector
 * @return {?}
 */
Rx.Observable.prototype.delayWithSelector = function(delayDurationSelector_or_subscriptionDelay, delayDurationSelector) {};

/**
 * @template TTimeout
 * @param {?<TTimeout>} firstTimeout
 * @param {function(T): ?<TTimeout>=} timeoutdurationSelector
 * @param {?=} other
 * @return {?}
 */
Rx.Observable.prototype.timeoutWithSelector = function(firstTimeout, timeoutdurationSelector, other) {};

/**
 * @template TTimeout
 * @param {function(T): ?<TTimeout>} debounceDurationSelector
 * @return {?}
 */
Rx.Observable.prototype.debounceWithSelector = function(debounceDurationSelector) {};

/**
 * @deprecated use #debounceWithSelector instead.
 * @template TTimeout
 * @param {function(T): ?<TTimeout>} debounceDurationSelector
 * @return {?}
 */
Rx.Observable.prototype.throttleWithSelector = function(debounceDurationSelector) {};

/**
 * @param {number} duration
 * @param {!Rx.IScheduler=} scheduler
 * @return {?}
 */
Rx.Observable.prototype.skipLastWithTime = function(duration, scheduler) {};

/**
 * @param {number} duration
 * @param {!Rx.IScheduler=} timerScheduler
 * @param {!Rx.IScheduler=} loopScheduler
 * @return {?}
 */
Rx.Observable.prototype.takeLastWithTime = function(duration, timerScheduler, loopScheduler) {};

/**
 * @param {number} duration
 * @param {!Rx.IScheduler=} scheduler
 * @return {?<!Array<T>>}
 */
Rx.Observable.prototype.takeLastBufferWithTime = function(duration, scheduler) {};

/**
 * @param {number} duration
 * @param {!Rx.IScheduler=} scheduler
 * @return {?}
 */
Rx.Observable.prototype.takeWithTime = function(duration, scheduler) {};

/**
 * @param {number} duration
 * @param {!Rx.IScheduler=} scheduler
 * @return {?}
 */
Rx.Observable.prototype.skipWithTime = function(duration, scheduler) {};

/**
 * @param {!Date|number} startTime_or_duration
 * @param {!Rx.IScheduler=} scheduler
 * @return {?}
 */
Rx.Observable.prototype.skipUntilWithTime = function(startTime_or_duration, scheduler) {};

/**
 * @param {!Date|number} endTime_or_duration
 * @param {!Rx.IScheduler=} scheduler
 * @return {?}
 */
Rx.Observable.prototype.takeUntilWithTime = function(endTime_or_duration, scheduler) {};

/**
 * @param {number} timeSpan
 * @param {number|!Rx.IScheduler=} timeShift_or_scheduler
 * @param {!Rx.IScheduler=} scheduler
 * @return {?<?>}
 */
Rx.Observable.prototype.windowWithTime = function(timeSpan, timeShift_or_scheduler, scheduler) {};

/**
 * @param {number} timeSpan
 * @param {number} count
 * @param {!Rx.IScheduler=} scheduler
 * @return {?<?>}
 */
Rx.Observable.prototype.windowWithTimeOrCount = function(timeSpan, count, scheduler) {};

/**
 * @param {number} timeSpan
 * @param {number|!Rx.IScheduler=} timeShift_or_scheduler
 * @param {!Rx.IScheduler=} scheduler
 * @return {?<!Array<T>>}
 */
Rx.Observable.prototype.bufferWithTime = function(timeSpan, timeShift_or_scheduler, scheduler) {};

/**
 * @param {number} timeSpan
 * @param {number} count
 * @param {!Rx.IScheduler=} scheduler
 * @return {?<!Array<T>>}
 */
Rx.Observable.prototype.bufferWithTimeOrCount = function(timeSpan, count, scheduler) {};

/**
 * @param {!Date} dueTime
 * @param {number|!Rx.IScheduler=} period_or_scheduler
 * @param {!Rx.IScheduler=} scheduler
 * @return {?<number>}
 */
Rx.ObservableStatic.prototype.timer = function(dueTime, period_or_scheduler, scheduler) {};

/**
 * @template TState, TResult
 * @param {TState} initialState
 * @param {function(TState): boolean} condition
 * @param {function(TState): TState} iterate
 * @param {function(TState): TResult} resultSelector
 * @param {function(TState): number} timeSelector
 * @param {!Rx.IScheduler=} scheduler
 * @return {?<TResult>}
 */
Rx.ObservableStatic.prototype.generateWithRelativeTime = function(initialState, condition, iterate, resultSelector, timeSelector, scheduler) {};

/**
 * @template TState, TResult
 * @param {TState} initialState
 * @param {function(TState): boolean} condition
 * @param {function(TState): TState} iterate
 * @param {function(TState): TResult} resultSelector
 * @param {function(TState): !Date} timeSelector
 * @param {!Rx.IScheduler=} scheduler
 * @return {?<TResult>}
 */
Rx.ObservableStatic.prototype.generateWithAbsoluteTime = function(initialState, condition, iterate, resultSelector, timeSelector, scheduler) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "rx-lite-time"
/** @const */
tsickle_declare_module.rx_lite_time = {};

/* TODO: ExportAssignment in tsickle_declare_module.rx_lite_time */
