/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/react-geosuggest/index.d.ts:

/* TODO: ImportDeclaration in  */
/**
 * @constructor
 * @struct
 */
function Geosuggest() {}

/**
 * @return {void}
 */
Geosuggest.prototype.focus = function() {};

/**
 * @return {void}
 */
Geosuggest.prototype.blur = function() {};

/**
 * @param {string} value
 * @return {void}
 */
Geosuggest.prototype.update = function(value) {};

/**
 * @return {void}
 */
Geosuggest.prototype.clear = function() {};
/**
 * @extends {InputHTMLAttributes}
 * @record
 * @struct
 */
function GeosuggestProps() {}
 /** @type {string} */
GeosuggestProps.prototype.placeholder;
 /** @type {string} */
GeosuggestProps.prototype.initialValue;
 /** @type {string} */
GeosuggestProps.prototype.className;
 /** @type {?} */
GeosuggestProps.prototype.style;
 /** @type {string} */
GeosuggestProps.prototype.inputClassName;
 /** @type {boolean} */
GeosuggestProps.prototype.disabled;
 /** @type {!google.maps.LatLng} */
GeosuggestProps.prototype.location;
 /** @type {number} */
GeosuggestProps.prototype.radius;
 /** @type {!google.maps.LatLngBounds} */
GeosuggestProps.prototype.bounds;
 /** @type {(string|!Array<string>)} */
GeosuggestProps.prototype.country;
 /** @type {!Array<string>} */
GeosuggestProps.prototype.types;
 /** @type {!Array<?>} */
GeosuggestProps.prototype.fixtures;
 /** @type {number} */
GeosuggestProps.prototype.maxFixtures;
 /** @type {?} */
GeosuggestProps.prototype.googleMaps;
 /** @type {boolean} */
GeosuggestProps.prototype.ignoreTab;
 /** @type {number} */
GeosuggestProps.prototype.queryDelay;
 /** @type {boolean} */
GeosuggestProps.prototype.highlightMatch;
 /** @type {boolean} */
GeosuggestProps.prototype.autoActivateFirstSuggest;
 /** @type {string} */
GeosuggestProps.prototype.label;
 /** @type {string} */
GeosuggestProps.prototype.suggestsClassName;
 /** @type {string} */
GeosuggestProps.prototype.suggestsHiddenClassName;
 /** @type {string} */
GeosuggestProps.prototype.suggestsItemClassName;
 /** @type {string} */
GeosuggestProps.prototype.suggestsItemActiveClassName;
 /** @type {string} */
GeosuggestProps.prototype.autoComplete;

/**
 * @return {void}
 */
GeosuggestProps.prototype.onFocus = function() {};

/**
 * @param {?} value
 * @return {void}
 */
GeosuggestProps.prototype.onBlur = function(value) {};

/**
 * @param {?} value
 * @return {void}
 */
GeosuggestProps.prototype.onChange = function(value) {};

/**
 * @param {?} event
 * @return {void}
 */
GeosuggestProps.prototype.onKeyDown = function(event) {};

/**
 * @param {?} event
 * @return {void}
 */
GeosuggestProps.prototype.onKeyPress = function(event) {};

/**
 * @param {?} suggest
 * @return {void}
 */
GeosuggestProps.prototype.onSuggestSelect = function(suggest) {};

/**
 * @param {?} suggest
 * @return {void}
 */
GeosuggestProps.prototype.onActivateSuggest = function(suggest) {};

/**
 * @param {string} userInput
 * @return {void}
 */
GeosuggestProps.prototype.onSuggestNoResults = function(userInput) {};

/**
 * @param {!google.maps.places.AutocompletePrediction} googleSuggest
 * @return {string}
 */
GeosuggestProps.prototype.getSuggestLabel = function(googleSuggest) {};

/**
 * @param {!google.maps.places.AutocompletePrediction} googleSuggest
 * @return {?}
 */
GeosuggestProps.prototype.renderSuggestItem = function(googleSuggest) {};

/**
 * @param {!google.maps.places.AutocompletePrediction} googleSuggest
 * @return {boolean}
 */
GeosuggestProps.prototype.skipSuggest = function(googleSuggest) {};
/**
 * @record
 * @struct
 */
function Styles() {}
 /** @type {?} */
Styles.prototype.input;
 /** @type {?} */
Styles.prototype.suggestItem;
 /** @type {?} */
Styles.prototype.suggests;

/** @typedef {string} */
var QueryType;
/**
 * @record
 * @struct
 */
function Fixture() {}
 /** @type {string} */
Fixture.prototype.className;
 /** @type {string} */
Fixture.prototype.label;
 /** @type {!google.maps.LatLng} */
Fixture.prototype.location;
/**
 * @record
 * @struct
 */
function Suggest() {}
 /** @type {!google.maps.GeocoderResult} */
Suggest.prototype.gmaps;
 /** @type {string} */
Suggest.prototype.label;
 /** @type {?} */
Suggest.prototype.location;
 /** @type {string} */
Suggest.prototype.placeId;
