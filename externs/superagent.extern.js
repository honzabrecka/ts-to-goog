/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/superagent/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/** @typedef {?} */
var CallbackHandler;

/** @typedef {?} */
var Serializer;
 /** @type {!request.SuperAgentStatic} */
var request;
/**
 * @extends {request.Request}
 * @record
 * @struct
 */
request.SuperAgentRequest = function() {};
 /** @type {string} */
request.SuperAgentRequest.prototype.cookies;
 /** @type {string} */
request.SuperAgentRequest.prototype.method;
 /** @type {string} */
request.SuperAgentRequest.prototype.url;

/**
 * @param {?=} agent
 * @return {SuperAgentRequest}
 */
request.SuperAgentRequest.prototype.agent = function(agent) {};
/**
 * @extends {request.SuperAgent}
 * @record
 * @struct
 */
request.SuperAgentStatic = function() {};

/* TODO: CallSignature: request */

/* TODO: CallSignature: request */
 /** @type {!Object<string,?>} */
request.SuperAgentStatic.prototype.serialize;

/**
 * @return {!request.SuperAgent<!request.SuperAgentRequest>}
 */
request.SuperAgentStatic.prototype.agent = function() {};
/**
 * @record
 * @struct
 */
request.SuperAgent = function() {};

/**
 * @param {Req} req
 * @return {void}
 */
request.SuperAgent.prototype.attachCookies = function(req) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.checkout = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.connect = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.copy = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.del = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.delete = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.get = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.head = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.lock = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.merge = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.mkactivity = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.mkcol = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.move = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.notify = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.options = function(url, callback) {};

/**
 * @param {function(!request.Response, function(!Error, ?): void): void} fn
 * @return {SuperAgent}
 */
request.SuperAgent.prototype.parse = function(fn) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.patch = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.post = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.propfind = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.proppatch = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.purge = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.put = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.report = function(url, callback) {};

/**
 * @param {!request.Response} res
 * @return {void}
 */
request.SuperAgent.prototype.saveCookies = function(res) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.search = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.subscribe = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.trace = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.unlock = function(url, callback) {};

/**
 * @param {string} url
 * @param {?=} callback
 * @return {Req}
 */
request.SuperAgent.prototype.unsubscribe = function(url, callback) {};
/**
 * @record
 * @struct
 */
request.ResponseError = function() {};
 /** @type {number} */
request.ResponseError.prototype.status;
 /** @type {string} */
request.ResponseError.prototype.text;
 /** @type {string} */
request.ResponseError.prototype.method;
 /** @type {string} */
request.ResponseError.prototype.path;
/**
 * @extends {NodeJS.ReadableStream}
 * @record
 * @struct
 */
request.Response = function() {};
 /** @type {boolean} */
request.Response.prototype.accepted;
 /** @type {boolean} */
request.Response.prototype.badRequest;
 /** @type {?} */
request.Response.prototype.body;
 /** @type {string} */
request.Response.prototype.charset;
 /** @type {boolean} */
request.Response.prototype.clientError;
 /** @type {!request.ResponseError} */
request.Response.prototype.error;
 /** @type {?} */
request.Response.prototype.files;
 /** @type {boolean} */
request.Response.prototype.forbidden;
 /** @type {?} */
request.Response.prototype.header;
 /** @type {boolean} */
request.Response.prototype.info;
 /** @type {boolean} */
request.Response.prototype.noContent;
 /** @type {boolean} */
request.Response.prototype.notAcceptable;
 /** @type {boolean} */
request.Response.prototype.notFound;
 /** @type {boolean} */
request.Response.prototype.ok;
 /** @type {boolean} */
request.Response.prototype.redirect;
 /** @type {boolean} */
request.Response.prototype.serverError;
 /** @type {number} */
request.Response.prototype.status;
 /** @type {number} */
request.Response.prototype.statusType;
 /** @type {string} */
request.Response.prototype.text;
 /** @type {string} */
request.Response.prototype.type;
 /** @type {boolean} */
request.Response.prototype.unauthorized;
 /** @type {!XMLHttpRequest} */
request.Response.prototype.xhr;

/**
 * @param {string} header
 * @return {string}
 */
request.Response.prototype.get = function(header) {};
/**
 * @record
 * @struct
 */
request.Request = function() {};

/**
 * @return {void}
 */
request.Request.prototype.abort = function() {};

/**
 * @param {string} type
 * @return {Request}
 */
request.Request.prototype.accept = function(type) {};

/**
 * @param {string} field
 * @param {(string|!Blob|?|!ReadStream)} file
 * @param {string=} filename
 * @return {Request}
 */
request.Request.prototype.attach = function(field, file, filename) {};

/**
 * @param {string} user
 * @param {string} name
 * @return {Request}
 */
request.Request.prototype.auth = function(user, name) {};

/**
 * @param {boolean=} val
 * @return {Request}
 */
request.Request.prototype.buffer = function(val) {};

/**
 * @param {?} cert
 * @return {Request}
 */
request.Request.prototype.ca = function(cert) {};

/**
 * @param {(string|?)} cert
 * @return {Request}
 */
request.Request.prototype.cert = function(cert) {};

/**
 * @return {Request}
 */
request.Request.prototype.clearTimeout = function() {};

/**
 * @param {?=} callback
 * @return {Request}
 */
request.Request.prototype.end = function(callback) {};

/**
 * @param {string} name
 * @param {string} val
 * @return {Request}
 */
request.Request.prototype.field = function(name, val) {};

/**
 * @param {string} field
 * @return {string}
 */
request.Request.prototype.get = function(field) {};

/**
 * @param {(string|?)} cert
 * @return {Request}
 */
request.Request.prototype.key = function(cert) {};

/**
 * @param {function(!request.Response): boolean} callback
 * @return {Request}
 */
request.Request.prototype.ok = function(callback) {};

/**
 * @param {string} name
 * @param {function(?): void|function(!request.ProgressEvent): void} handler
 * @return {Request}
 */
request.Request.prototype.on = function(name, handler) {};

/**
 * @param {function(!request.Response, function(!Error, ?): void): void} fn
 * @return {Request}
 */
request.Request.prototype.parse = function(fn) {};

/**
 * @return {Request}
 */
request.Request.prototype.part = function() {};

/**
 * @param {(string|?)} cert
 * @return {Request}
 */
request.Request.prototype.pfx = function(cert) {};

/**
 * @param {!NodeJS.WritableStream} stream
 * @param {!Object=} options
 * @return {!internal.Writable}
 */
request.Request.prototype.pipe = function(stream, options) {};

/**
 * @param {(string|!Object)} val
 * @return {Request}
 */
request.Request.prototype.query = function(val) {};

/**
 * @param {number} n
 * @return {Request}
 */
request.Request.prototype.redirects = function(n) {};

/**
 * @param {string} type
 * @return {Request}
 */
request.Request.prototype.responseType = function(type) {};

/**
 * @param {number=} count
 * @return {Request}
 */
request.Request.prototype.retry = function(count) {};

/**
 * @param {(string|!Object)=} data
 * @return {Request}
 */
request.Request.prototype.send = function(data) {};

/**
 * @param {?} serializer
 * @return {Request}
 */
request.Request.prototype.serialize = function(serializer) {};

/**
 * @param {!Object|string} field
 * @param {string=} val
 * @return {Request}
 */
request.Request.prototype.set = function(field, val) {};

/**
 * @param {(number|{deadline: number, response: number})} ms
 * @return {Request}
 */
request.Request.prototype.timeout = function(ms) {};

/**
 * @param {string} val
 * @return {Request}
 */
request.Request.prototype.type = function(val) {};

/**
 * @param {string} field
 * @return {Request}
 */
request.Request.prototype.unset = function(field) {};

/**
 * @param {function(!request.Request): void} fn
 * @return {Request}
 */
request.Request.prototype.use = function(fn) {};

/**
 * @return {Request}
 */
request.Request.prototype.withCredentials = function() {};

/**
 * @param {(string|?)} data
 * @param {string=} encoding
 * @return {Request}
 */
request.Request.prototype.write = function(data, encoding) {};

/** @typedef {function(!request.Request): void} */
request.Plugin;
/**
 * @record
 * @struct
 */
request.ProgressEvent = function() {};
 /** @type {string} */
request.ProgressEvent.prototype.direction;
 /** @type {number} */
request.ProgressEvent.prototype.loaded;
 /** @type {number} */
request.ProgressEvent.prototype.percent;
 /** @type {number} */
request.ProgressEvent.prototype.total;

/* TODO: ExportAssignment in  */
