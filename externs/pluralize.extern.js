/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/pluralize/index.d.ts:
/**
 * @record
 * @struct
 */
function PluralizeStatic() {}

/* TODO: CallSignature:  */

/**
 * Pluralize a word based.
 * 
 * @param {string} word
 * @return {string}
 */
PluralizeStatic.prototype.plural = function(word) {};

/**
 * Singularize a word based.
 * 
 * @param {string} word
 * @return {string}
 */
PluralizeStatic.prototype.singular = function(word) {};

/**
 * Add a pluralization rule to the collection.
 * 
 * @param {(string|!RegExp)} rule
 * @param {string} replacemant
 * @return {void}
 */
PluralizeStatic.prototype.addPluralRule = function(rule, replacemant) {};

/**
 * Add a singularization rule to the collection.
 * 
 * @param {(string|!RegExp)} rule
 * @param {string} replacemant
 * @return {void}
 */
PluralizeStatic.prototype.addSingularRule = function(rule, replacemant) {};

/**
 * Add an irregular word definition.
 * 
 * @param {string} single
 * @param {string} plural
 * @return {void}
 */
PluralizeStatic.prototype.addIrregularRule = function(single, plural) {};

/**
 * Add an uncountable word rule.
 * 
 * @param {(string|!RegExp)} word
 * @return {void}
 */
PluralizeStatic.prototype.addUncountableRule = function(word) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "pluralize"
/** @const */
tsickle_declare_module.pluralize = {};

/* TODO: ExportAssignment in tsickle_declare_module.pluralize */
 /** @type {!PluralizeStatic} */
var pluralize;
