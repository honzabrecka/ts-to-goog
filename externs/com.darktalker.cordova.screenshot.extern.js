/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/com.darktalker.cordova.screenshot/index.d.ts:
/** @const */
var com = {};
/** @const */
com.darktalker = {};
/** @const */
com.darktalker.cordova = {};
/** @const */
com.darktalker.cordova.screenshot = {};
/**
 * @record
 * @struct
 */
com.darktalker.cordova.screenshot.Plugin = function() {};

/**
 * Takes a screenshot, saves it to device as JPG and provides a path to the file.
 * 
 * @param {function(string, {success: boolean, filePath: string}): void} saveCallback callback function, holds results
 * @param {string=} format format of to be taken image, possible values are 'jpg' and 'png' ('jpg' is default)
 * @param {number=} quality custom quality of to be taken image in percentage (100 is default)
 * @param {string=} filename custom filename of to be taken image, ('screenshot_<milliSecondsSince1970>.<format>' is default)
 * @return {void}
 */
com.darktalker.cordova.screenshot.Plugin.prototype.save = function(saveCallback, format, quality, filename) {};

/**
 * Takes a screenshot and provides it trough data URI as JPG. No data are saved in the device.
 * 
 * @param {function(string, {URI: string}): void} uriCallback callback function, holds results
 * @param {number=} quality custom quality of to be taken image in percentage (100 is default)
 * @return {void}
 */
com.darktalker.cordova.screenshot.Plugin.prototype.URI = function(uriCallback, quality) {};
 /** @type {!com.darktalker.cordova.screenshot.Plugin} */
Navigator.prototype.screenshot;
