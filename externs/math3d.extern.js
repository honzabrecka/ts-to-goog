/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/math3d/index.d.ts:

/**
 * @constructor
 * @struct
 * @param {number=} x
 * @param {number=} y
 * @param {number=} z
 */
function Vector3(x, y, z) {}
 /** @type {?} */
Vector3.back;
 /** @type {?} */
Vector3.down;
 /** @type {?} */
Vector3.forward;
 /** @type {?} */
Vector3.left;
 /** @type {?} */
Vector3.one;
 /** @type {?} */
Vector3.right;
 /** @type {?} */
Vector3.up;
 /** @type {?} */
Vector3.zero;
 /** @type {number} */
Vector3.dimension;
 /** @type {?} */
Vector3.FromVector4;
 /** @type {?} */
Vector3.prototype.homogeneous;
 /** @type {number} */
Vector3.prototype.magnitude;
 /** @type {!Array<number>} */
Vector3.prototype.values;
 /** @type {?} */
Vector3.prototype.vector4;
 /** @type {number} */
Vector3.prototype.x;
 /** @type {number} */
Vector3.prototype.y;
 /** @type {number} */
Vector3.prototype.z;

/**
 * @param {?} vector3
 * @return {?}
 */
Vector3.prototype.add = function(vector3) {};

/**
 * @param {?} vector3
 * @return {?}
 */
Vector3.prototype.average = function(vector3) {};

/**
 * @param {?} vector3
 * @return {?}
 */
Vector3.prototype.cross = function(vector3) {};

/**
 * @param {?} vector3
 * @return {number}
 */
Vector3.prototype.distanceTo = function(vector3) {};

/**
 * @param {?} vector3
 * @return {number}
 */
Vector3.prototype.dot = function(vector3) {};

/**
 * @param {?} vector3
 * @return {boolean}
 */
Vector3.prototype.equals = function(vector3) {};

/**
 * @param {number} scalar
 * @return {?}
 */
Vector3.prototype.mulScalar = function(scalar) {};

/**
 * @return {?}
 */
Vector3.prototype.negate = function() {};

/**
 * @return {?}
 */
Vector3.prototype.normalize = function() {};

/**
 * @param {?} vector3
 * @return {?}
 */
Vector3.prototype.scale = function(vector3) {};

/**
 * @param {?} vector3
 * @return {?}
 */
Vector3.prototype.sub = function(vector3) {};

/**
 * @return {string}
 */
Vector3.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * @param {number=} x
 * @param {number=} y
 * @param {number=} z
 * @param {number=} w
 */
function Vector4(x, y, z, w) {}
 /** @type {?} */
Vector4.one;
 /** @type {?} */
Vector4.zero;
 /** @type {number} */
Vector4.dimension;
 /** @type {number} */
Vector4.prototype.magnitude;
 /** @type {!Array<number>} */
Vector4.prototype.values;
 /** @type {number} */
Vector4.prototype.x;
 /** @type {number} */
Vector4.prototype.y;
 /** @type {number} */
Vector4.prototype.z;
 /** @type {number} */
Vector4.prototype.w;

/**
 * @param {?} vector4
 * @return {?}
 */
Vector4.prototype.add = function(vector4) {};

/**
 * @param {?} vector4
 * @return {number}
 */
Vector4.prototype.distanceTo = function(vector4) {};

/**
 * @param {?} vector4
 * @return {number}
 */
Vector4.prototype.dot = function(vector4) {};

/**
 * @param {?} vector4
 * @return {boolean}
 */
Vector4.prototype.equals = function(vector4) {};

/**
 * @param {number} scalar
 * @return {?}
 */
Vector4.prototype.mulScalar = function(scalar) {};

/**
 * @return {?}
 */
Vector4.prototype.negate = function() {};

/**
 * @return {?}
 */
Vector4.prototype.normalize = function() {};

/**
 * @param {?} vector4
 * @return {?}
 */
Vector4.prototype.sub = function(vector4) {};

/**
 * @return {string}
 */
Vector4.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * @param {number=} x
 * @param {number=} y
 * @param {number=} z
 * @param {number=} w
 */
function Quaternion(x, y, z, w) {}
 /** @type {?} */
Quaternion.identity;
 /** @type {?} */
Quaternion.zero;
 /** @type {?} */
Quaternion.prototype.angleAxis;
 /** @type {?} */
Quaternion.prototype.eulerAngles;
 /** @type {number} */
Quaternion.prototype.x;
 /** @type {number} */
Quaternion.prototype.y;
 /** @type {number} */
Quaternion.prototype.z;
 /** @type {number} */
Quaternion.prototype.w;

/**
 * @param {number=} x
 * @param {number=} y
 * @param {number=} z
 * @return {?}
 */
Quaternion.Euler = function(x, y, z) {};

/**
 * @param {?} axis
 * @param {number} angle
 * @return {?}
 */
Quaternion.AngleAxis = function(axis, angle) {};

/**
 * @param {?} quaternion
 * @return {number}
 */
Quaternion.prototype.angleTo = function(quaternion) {};

/**
 * @return {?}
 */
Quaternion.prototype.conjugate = function() {};

/**
 * @param {?} quaternion
 * @return {number}
 */
Quaternion.prototype.distanceTo = function(quaternion) {};

/**
 * @param {?} quaternion
 * @return {number}
 */
Quaternion.prototype.dot = function(quaternion) {};

/**
 * @param {?} quaternion
 * @return {boolean}
 */
Quaternion.prototype.equals = function(quaternion) {};

/**
 * @return {?}
 */
Quaternion.prototype.inverse = function() {};

/**
 * @param {?} quaternion
 * @return {?}
 */
Quaternion.prototype.mul = function(quaternion) {};

/**
 * @param {?} vector3
 * @return {?}
 */
Quaternion.prototype.mulVector3 = function(vector3) {};

/**
 * @return {string}
 */
Quaternion.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * @param {!Array<number>} data
 */
function Matrix4x4(data) {}
 /** @type {?} */
Matrix4x4.identity;
 /** @type {?} */
Matrix4x4.zero;
 /** @type {!Array<!Array<number>>} */
Matrix4x4.prototype.columns;
 /** @type {number} */
Matrix4x4.prototype.m11;
 /** @type {number} */
Matrix4x4.prototype.m12;
 /** @type {number} */
Matrix4x4.prototype.m13;
 /** @type {number} */
Matrix4x4.prototype.m14;
 /** @type {number} */
Matrix4x4.prototype.m21;
 /** @type {number} */
Matrix4x4.prototype.m22;
 /** @type {number} */
Matrix4x4.prototype.m23;
 /** @type {number} */
Matrix4x4.prototype.m24;
 /** @type {number} */
Matrix4x4.prototype.m31;
 /** @type {number} */
Matrix4x4.prototype.m32;
 /** @type {number} */
Matrix4x4.prototype.m33;
 /** @type {number} */
Matrix4x4.prototype.m34;
 /** @type {number} */
Matrix4x4.prototype.m41;
 /** @type {number} */
Matrix4x4.prototype.m42;
 /** @type {number} */
Matrix4x4.prototype.m43;
 /** @type {number} */
Matrix4x4.prototype.m44;
 /** @type {!Array<!Array<number>>} */
Matrix4x4.prototype.rows;
 /** @type {?} */
Matrix4x4.prototype.size;
 /** @type {!Array<number>} */
Matrix4x4.prototype.values;

/**
 * @param {boolean} flipX
 * @param {boolean} flipY
 * @param {boolean} flipZ
 * @return {?}
 */
Matrix4x4.FlipMatrix = function(flipX, flipY, flipZ) {};

/**
 * @param {(number|?)} scale
 * @return {?}
 */
Matrix4x4.ScaleMatrix = function(scale) {};

/**
 * @param {?} quaternion
 * @return {?}
 */
Matrix4x4.RotationMatrix = function(quaternion) {};

/**
 * @param {?} translation
 * @return {?}
 */
Matrix4x4.TranslationMatrix = function(translation) {};

/**
 * @param {?} translation
 * @param {?} rotation
 * @param {(number|?)} scale
 * @return {?}
 */
Matrix4x4.TRS = function(translation, rotation, scale) {};

/**
 * @param {?} position
 * @param {?} rotation
 * @param {(number|?)} scale
 * @return {?}
 */
Matrix4x4.LocalToWorldMatrix = function(position, rotation, scale) {};

/**
 * @param {?} position
 * @param {?} rotation
 * @param {(number|?)} scale
 * @return {?}
 */
Matrix4x4.WorldToLocalMatrix = function(position, rotation, scale) {};

/**
 * @return {number}
 */
Matrix4x4.prototype.determinant = function() {};

/**
 * @return {?}
 */
Matrix4x4.prototype.inverse = function() {};

/**
 * @return {?}
 */
Matrix4x4.prototype.negate = function() {};

/**
 * @return {?}
 */
Matrix4x4.prototype.transpose = function() {};

/**
 * @param {?} matrix4x4
 * @return {?}
 */
Matrix4x4.prototype.add = function(matrix4x4) {};

/**
 * @param {?} matrix4x4
 * @return {?}
 */
Matrix4x4.prototype.sub = function(matrix4x4) {};

/**
 * @param {?} matrix4x4
 * @return {?}
 */
Matrix4x4.prototype.mul = function(matrix4x4) {};

/**
 * @param {number} scalar
 * @return {?}
 */
Matrix4x4.prototype.mulScalar = function(scalar) {};

/**
 * @param {?} vector3
 * @return {?}
 */
Matrix4x4.prototype.mulVector3 = function(vector3) {};

/**
 * @constructor
 * @struct
 * @param {?=} position
 * @param {?=} rotation
 */
function Transform(position, rotation) {}
 /** @type {?} */
Transform.prototype.forward;
 /** @type {?} */
Transform.prototype.localPosition;
 /** @type {?} */
Transform.prototype.localRotation;
 /** @type {?} */
Transform.prototype.localToWorldMatrix;
 /** @type {string} */
Transform.prototype.name;
 /** @type {?} */
Transform.prototype.parent;
 /** @type {?} */
Transform.prototype.position;
 /** @type {?} */
Transform.prototype.right;
 /** @type {?} */
Transform.prototype.root;
 /** @type {?} */
Transform.prototype.rotation;
 /** @type {?} */
Transform.prototype.up;
 /** @type {?} */
Transform.prototype.worldToLocalMatrix;

/**
 * @param {?} child
 * @return {void}
 */
Transform.prototype.addChild = function(child) {};

/**
 * @param {?} position
 * @return {?}
 */
Transform.prototype.inverseTransformPosition = function(position) {};

/**
 * @param {?} child
 * @return {void}
 */
Transform.prototype.removeChild = function(child) {};

/**
 * @param {?} position
 * @return {?}
 */
Transform.prototype.transformPosition = function(position) {};

/**
 * @param {?} translation
 * @param {?=} relativeTo
 * @return {?}
 */
Transform.prototype.translate = function(translation, relativeTo) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @param {?=} relativeTo
 * @return {?}
 */
Transform.prototype.rotate = function(x, y, z, relativeTo) {};

/** @const */
Transform.Space = {};
/** @const {number} */
Transform.Space.Self;
/** @const {number} */
Transform.Space.World;
