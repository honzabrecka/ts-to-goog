/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/d3-timer/index.d.ts:

/**
 * Returns the current time as defined by performance.now if available, and Date.now if not.
 * The current time is updated at the start of a frame; it is thus consistent during the frame, and any timers scheduled during the same frame will be synchronized.
 * If this method is called outside of a frame, such as in response to a user event, the current time is calculated and then fixed until the next frame,
 * again ensuring consistent timing during event handling.
 * @return {number}
 */
function now() {}
/**
 * @record
 * @struct
 */
function Timer() {}

/**
 * Restart a timer with the specified callback and optional delay and time.
 * This is equivalent to stopping this timer and creating a new timer with the specified arguments,
 * although this timer retains the original invocation priority.
 * 
 * @param {?} callbackFn
 * @param {number=} delay An optional numeric delay in milliseconds (default = 0) relative to time.
 * @param {number=} time An optional time in milliseconds relative to which the delay is calculated (default = now).
 * @return {void}
 */
Timer.prototype.restart = function(callbackFn, delay, time) {};

/**
 * Stop the timer.
 * @return {void}
 */
Timer.prototype.stop = function() {};

/**
 * Schedules and returns a new timer, invoking the specified callback repeatedly until the timer is stopped.
 * The callback is passed the (apparent) elapsed time since the timer became active.
 * 
 * @param {?} callback A callback function to be invoked and passed in the apparent
 * elapsed time since the timer became active in milliseconds.
 * @param {number=} delay An optional numeric delay in milliseconds (default = 0) relative to time.
 * @param {number=} time An optional time in milliseconds relative to which the delay is calculated (default = now).
 * @return {?}
 */
function timer(callback, delay, time) {}

/**
 * Immediately invoke any eligible timer callbacks
 * @return {void}
 */
function timerFlush() {}

/**
 * Schedules and returns a new timer, invoking the specified callback. The timer is stopped automatically
 * on its first callback. The callback is passed the (apparent) elapsed time since the timer became active.
 * 
 * @param {?} callback A callback function to be invoked and passed in the apparent
 * elapsed time since the timer became active in milliseconds.
 * @param {number=} delay An optional numeric delay in milliseconds (default = 0) relative to time.
 * @param {number=} time An optional time in milliseconds relative to which the delay is calculated (default = now).
 * @return {?}
 */
function timeout(callback, delay, time) {}

/**
 * Schedules and returns a new timer, invoking the specified callback repeatedly every 'delay' milliseconds
 * until the timer is stopped.
 * The callback is passed the (apparent) elapsed time since the timer became active.
 * 
 * @param {?} callback A callback function to be invoked and passed in the apparent
 * elapsed time since the timer became active in milliseconds.
 * @param {number=} delay An optional numeric delay in milliseconds between repeat invocations of the callback.
 * If not specified, the interval timer behaves like the regular timer.
 * @param {number=} time An optional time in milliseconds relative to which the initial delay is calculated (default = now).
 * @return {?}
 */
function interval(callback, delay, time) {}
