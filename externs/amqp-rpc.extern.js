/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/amqp-rpc/index.d.ts:
/**
 * @record
 * @struct
 */
function Options() {}
 /** @type {?} */
Options.prototype.connection;
 /** @type {string} */
Options.prototype.url;
 /** @type {?} */
Options.prototype.exchangeInstance;
 /** @type {string} */
Options.prototype.exchange;
 /** @type {?} */
Options.prototype.exchange_options;
 /** @type {?} */
Options.prototype.ipml_options;
 /** @type {?} */
Options.prototype.conn_options;
/**
 * @record
 * @struct
 */
function CallOptions() {}
 /** @type {string} */
CallOptions.prototype.correlationId;
 /** @type {?} */
CallOptions.prototype.autoDeleteCallback;
/**
 * @record
 * @struct
 */
function HandlerOptions() {}
 /** @type {string} */
HandlerOptions.prototype.queueName;
 /** @type {boolean} */
HandlerOptions.prototype.durable;
 /** @type {boolean} */
HandlerOptions.prototype.exclusive;
 /** @type {boolean} */
HandlerOptions.prototype.autoDelete;
/**
 * @record
 * @struct
 */
function BroadcastOptions() {}
 /** @type {number} */
BroadcastOptions.prototype.ttl;
 /** @type {?} */
BroadcastOptions.prototype.onResponse;
 /** @type {?} */
BroadcastOptions.prototype.context;
 /** @type {?} */
BroadcastOptions.prototype.onComplete;
/**
 * @record
 * @struct
 */
function CommandInfo() {}
 /** @type {string} */
CommandInfo.prototype.cmd;
 /** @type {string} */
CommandInfo.prototype.exchange;
 /** @type {string} */
CommandInfo.prototype.contentType;
 /** @type {number} */
CommandInfo.prototype.size;
/**
 * @record
 * @struct
 */
function Callback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function CallbackWithError() {}

/* TODO: CallSignature:  */

/**
 * @param {?=} opt
 * @return {!amqpRPC}
 */
function factory(opt) {}

/**
 * @constructor
 * @struct
 * @param {?=} opt
 */
function amqpRPC(opt) {}

/**
 * @param {string} type
 * @return {string}
 */
amqpRPC.prototype.generateQueueName = function(type) {};

/**
 * @return {void}
 */
amqpRPC.prototype.disconnect = function() {};

/**
 * @template T
 * @param {string} cmd
 * @param {T} params
 * @param {?=} cb
 * @param {?=} context
 * @param {?=} options
 * @return {string}
 */
amqpRPC.prototype.call = function(cmd, params, cb, context, options) {};

/**
 * @template T
 * @param {string} cmd
 * @param {function(T, ?, ?): void} cb
 * @param {?=} context
 * @param {?=} options
 * @return {boolean}
 */
amqpRPC.prototype.on = function(cmd, cb, context, options) {};

/**
 * @param {string} cmd
 * @return {boolean}
 */
amqpRPC.prototype.off = function(cmd) {};

/**
 * @template T
 * @param {string} cmd
 * @param {T} params
 * @param {?=} options
 * @return {void}
 */
amqpRPC.prototype.callBroadcast = function(cmd, params, options) {};

/**
 * @template T
 * @param {string} cmd
 * @param {function(T, ?): void=} cb
 * @param {?=} context
 * @param {?=} options
 * @return {boolean}
 */
amqpRPC.prototype.onBroadcast = function(cmd, cb, context, options) {};

/**
 * @param {string} cmd
 * @return {boolean}
 */
amqpRPC.prototype.offBroadcast = function(cmd) {};
