/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/appletvjs/index.d.ts:
 /** @type {!AppleTVJS.App} */
var App;
 /** @type {!AppleTVJS.Device} */
var Device;
 /** @type {!AppleTVJS.NavigationDocument} */
var navigationDocument;
 /** @type {!AppleTVJS.Settings} */
var Settings;

/**
 * @param {!Array<string>} scripts
 * @param {function(boolean): void} complete
 * @return {void}
 */
function evaluateScripts(scripts, complete) {}
/** @const */
var AppleTVJS = {};
/**
 * @record
 * @struct
 */
AppleTVJS.App = function() {};
 /** @type {function(?): void} */
AppleTVJS.App.prototype.onError;
 /** @type {function(?): void} */
AppleTVJS.App.prototype.onExit;
 /** @type {function(?): void} */
AppleTVJS.App.prototype.onLaunch;

/**
 * This function reloads the initial JavaScript file without quitting the app.
 * The optional reloadData parameter provides developers with a way to capture
 * and restart the app in it’s current state. If the reloadData parameter is not
 * present, the app is restarted in its initial state. This attribute must be set
 * to a function that accepts an “options” argument.
 * For example App.onError = function (options) {}.
 * 
 * @param {?=} options
 * @param {?=} reloadData
 * @return {void}
 */
AppleTVJS.App.prototype.reload = function(options, reloadData) {};
/**
 * @record
 * @struct
 */
AppleTVJS.Device = function() {};
 /** @type {string} */
AppleTVJS.Device.prototype.appIdentifier;
 /** @type {string} */
AppleTVJS.Device.prototype.appVersion;
 /** @type {string} */
AppleTVJS.Device.prototype.model;
 /** @type {string} */
AppleTVJS.Device.prototype.productType;
 /** @type {string} */
AppleTVJS.Device.prototype.systemVersion;
 /** @type {string} */
AppleTVJS.Device.prototype.vendorIdentifier;
/**
 * @record
 * @struct
 */
AppleTVJS.FeatureElement = function() {};

/**
 * Gets a feature for a given element.
 * @param {string} feature
 * @return {?}
 */
AppleTVJS.FeatureElement.prototype.getFeature = function(feature) {};
/**
 * @constructor
 * @struct
 */
AppleTVJS.Highlight = function() {};
 /** @type {string} */
AppleTVJS.Highlight.prototype.name;
 /** @type {string} */
AppleTVJS.Highlight.prototype.description;
 /** @type {number} */
AppleTVJS.Highlight.prototype.starttime;
 /** @type {number} */
AppleTVJS.Highlight.prototype.duration;
 /** @type {string} */
AppleTVJS.Highlight.prototype.imageURL;
/**
 * @constructor
 * @struct
 */
AppleTVJS.HighlightGroup = function() {};
 /** @type {string} */
AppleTVJS.HighlightGroup.prototype.name;
 /** @type {!Array<!AppleTVJS.Highlight>} */
AppleTVJS.HighlightGroup.prototype.hightlights;
/**
 * @constructor
 * @struct
 */
AppleTVJS.Interstitial = function() {};
 /** @type {number} */
AppleTVJS.Interstitial.prototype.starttime;
 /** @type {number} */
AppleTVJS.Interstitial.prototype.duration;
/**
 * @record
 * @struct
 */
AppleTVJS.Keyboard = function() {};
 /** @type {string} */
AppleTVJS.Keyboard.prototype.text;
 /** @type {function(): void} */
AppleTVJS.Keyboard.prototype.onTextChange;

/**
 * @constructor
 * @struct
 * Creates a new MediaItem object from the information stored in the URL location.
 * \@type: Valid values are: audio, video. Defaults to video.
 * \@url: The URL pointing to the media item information.
 * 
 * @param {string} type
 * @param {string=} url
 */
AppleTVJS.MediaItem = function(type, url) {};
 /** @type {string} */
AppleTVJS.MediaItem.prototype.contentRatingDomain;
 /** @type {number} */
AppleTVJS.MediaItem.prototype.contentRatingRanking;
 /** @type {boolean} */
AppleTVJS.MediaItem.prototype.isExplicit;
 /** @type {string} */
AppleTVJS.MediaItem.prototype.artworkImageURL;
 /** @type {string} */
AppleTVJS.MediaItem.prototype.description;
 /** @type {string} */
AppleTVJS.MediaItem.prototype.subtitle;
 /** @type {string} */
AppleTVJS.MediaItem.prototype.title;
 /** @type {string} */
AppleTVJS.MediaItem.prototype.type;
 /** @type {string} */
AppleTVJS.MediaItem.prototype.url;
 /** @type {!Array<!AppleTVJS.HighlightGroup>} */
AppleTVJS.MediaItem.prototype.highlightGroups;
 /** @type {!Array<!AppleTVJS.Interstitial>} */
AppleTVJS.MediaItem.prototype.interstitials;
 /** @type {number} */
AppleTVJS.MediaItem.prototype.resumeTime;
 /** @type {function(string, function(string, string): void): void} */
AppleTVJS.MediaItem.prototype.loadAssetID;
 /** @type {function(string, function(string, string): void): void} */
AppleTVJS.MediaItem.prototype.loadCertificate;
 /** @type {function(string, ?, function(string, string, string): void): void} */
AppleTVJS.MediaItem.prototype.loadKey;
/**
 * @record
 * @struct
 */
AppleTVJS.MenuBarDocument = function() {};

/**
 * Retrieves the document associated with the specified menu item.
 * 
 * @param {!Element} menuItem
 * @return {!Document}
 */
AppleTVJS.MenuBarDocument.prototype.getDocument = function(menuItem) {};

/**
 * Associates a document with a menu item.
 * 
 * @param {!Document} document
 * @param {!Element} menuItem
 * @return {void}
 */
AppleTVJS.MenuBarDocument.prototype.setDocument = function(document, menuItem) {};

/**
 * Sets the focus in a menu bar to the specified menu item.
 * 
 * @param {!Element} menuItem
 * @return {void}
 */
AppleTVJS.MenuBarDocument.prototype.setSelectedItem = function(menuItem) {};
/**
 * @record
 * @struct
 */
AppleTVJS.NavigationDocument = function() {};
 /** @type {!Array<!Document>} */
AppleTVJS.NavigationDocument.prototype.documents;

/**
 * Inserts a new document directly before a document currently on the stack.
 * 
 * @param {!Document} document
 * @param {!Document=} beforeDocument
 * @return {void}
 */
AppleTVJS.NavigationDocument.prototype.insertBeforeDocument = function(document, beforeDocument) {};

/**
 * This function searches the stack for the first instance of the document
 * contained in the beforeDocument parameter and inserts the document contained
 * in the document parameter on top of it.
 * 
 * @param {!Document} document
 * @return {void}
 */
AppleTVJS.NavigationDocument.prototype.pushDocument = function(document) {};

/**
 * Replaces a document on the stack with a new document.
 * 
 * @param {!Document} document
 * @param {!Document=} beforeDocument
 * @return {void}
 */
AppleTVJS.NavigationDocument.prototype.replaceDocument = function(document, beforeDocument) {};

/**
 * Dismisses the document displayed in modal view.
 * @return {void}
 */
AppleTVJS.NavigationDocument.prototype.dismissModal = function() {};

/**
 * Displays the passed document on top of the current document.
 * 
 * @param {!Document} document
 * @return {void}
 */
AppleTVJS.NavigationDocument.prototype.presentModal = function(document) {};

/**
 * Removes all documents currently on the stack.
 * 
 * @return {void}
 */
AppleTVJS.NavigationDocument.prototype.clear = function() {};

/**
 * Removes the top most document from the stack.
 * 
 * @return {void}
 */
AppleTVJS.NavigationDocument.prototype.popDocument = function() {};

/**
 * Removes all of the documents on the stack that are above the passed document.
 * 
 * @param {!Document} document
 * @return {void}
 */
AppleTVJS.NavigationDocument.prototype.popToDocument = function(document) {};

/**
 * Removes all documents from the stack except for the bottom most document.
 * 
 * @return {void}
 */
AppleTVJS.NavigationDocument.prototype.popToRootDocument = function() {};

/**
 * Removes the specified document from the stack.
 * 
 * @param {!Document} document
 * @return {void}
 */
AppleTVJS.NavigationDocument.prototype.removeDocument = function(document) {};
/**
 * @constructor
 * @struct
 */
AppleTVJS.Player = function() {};
 /** @type {!Document} */
AppleTVJS.Player.prototype.overlayDocument;
 /** @type {!AppleTVJS.Playlist} */
AppleTVJS.Player.prototype.playlist;
 /** @type {string} */
AppleTVJS.Player.prototype.playbackState;
 /** @type {!AppleTVJS.MediaItem} */
AppleTVJS.Player.prototype.currentMediaItem;
 /** @type {!AppleTVJS.MediaItem} */
AppleTVJS.Player.prototype.nextMediaItem;
 /** @type {!AppleTVJS.MediaItem} */
AppleTVJS.Player.prototype.previousMediaItem;
 /** @type {function(string): void} */
AppleTVJS.Player.prototype.mediaItemDidChange;
 /** @type {function(?): void} */
AppleTVJS.Player.prototype.requestSeekToTime;
 /** @type {function(boolean): void} */
AppleTVJS.Player.prototype.shouldHandleStateChange;
 /** @type {function(): void} */
AppleTVJS.Player.prototype.stateDidChange;
 /** @type {function(): void} */
AppleTVJS.Player.prototype.stateWillChange;
 /** @type {function(): void} */
AppleTVJS.Player.prototype.timeBoundaryDidCross;
 /** @type {function(): void} */
AppleTVJS.Player.prototype.timeDidChange;
 /** @type {function(): void} */
AppleTVJS.Player.prototype.timedMetadata;

/**
 * Shows the player UI if it is not currently visible.
 * @return {void}
 */
AppleTVJS.Player.prototype.present = function() {};

/**
 * Pauses the currently playing media item.
 * @return {void}
 */
AppleTVJS.Player.prototype.pause = function() {};

/**
 * Plays the currently selected media item.
 * @return {void}
 */
AppleTVJS.Player.prototype.play = function() {};

/**
 * Sets the playback point to a specified time.
 * @param {number} time
 * @return {void}
 */
AppleTVJS.Player.prototype.seekToTime = function(time) {};

/**
 * Sets the playback speed.
 * @param {number} playbackRate
 * @return {void}
 */
AppleTVJS.Player.prototype.setPlaybackRate = function(playbackRate) {};

/**
 * Stops the currently playing item and dismisses the player UI.
 * @return {void}
 */
AppleTVJS.Player.prototype.stop = function() {};
/**
 * @constructor
 * @struct
 */
AppleTVJS.Playlist = function() {};
 /** @type {number} */
AppleTVJS.Playlist.prototype.length;

/**
 * Returns the MediaItem located in the indicated array index.
 * @param {number} index
 * @return {!AppleTVJS.MediaItem}
 */
AppleTVJS.Playlist.prototype.item = function(index) {};

/**
 * Removes a media item from the end of a playlist.
 * @return {!AppleTVJS.MediaItem}
 */
AppleTVJS.Playlist.prototype.pop = function() {};

/**
 * Adds a media item to the end of a playlist.
 * @param {!AppleTVJS.MediaItem} object
 * @return {void}
 */
AppleTVJS.Playlist.prototype.push = function(object) {};

/**
 * Deletes the indicated array elements and replaces them with the specified elements.
 * @param {number} index
 * @param {number} howManu
 * @param {!AppleTVJS.MediaItem} object
 * @return {!Array<!AppleTVJS.MediaItem>}
 */
AppleTVJS.Playlist.prototype.splice = function(index, howManu, object) {};
/**
 * @record
 * @struct
 */
AppleTVJS.Restrictions = function() {};
 /** @type {boolean} */
AppleTVJS.Restrictions.prototype.allowsExplicit;
 /** @type {number} */
AppleTVJS.Restrictions.prototype.maxMovieRank;
 /** @type {number} */
AppleTVJS.Restrictions.prototype.maxTVShowRank;

/**
 * The maximum movie rating allowed for the specified country.
 * @param {string} countryCode
 * @return {string}
 */
AppleTVJS.Restrictions.prototype.maxMovieRatingForCountry = function(countryCode) {};

/**
 * Sets the maximum television show rating allowed for the specified country.
 * @param {string} countryCode
 * @return {string}
 */
AppleTVJS.Restrictions.prototype.maxTVShowRatingForCountry = function(countryCode) {};
/**
 * @record
 * @struct
 */
AppleTVJS.Settings = function() {};
 /** @type {!AppleTVJS.Restrictions} */
AppleTVJS.Settings.prototype.restrictions;
 /** @type {string} */
AppleTVJS.Settings.prototype.language;
 /** @type {string} */
AppleTVJS.Settings.prototype.storefrontCountryCode;
 /** @type {function(): void} */
AppleTVJS.Settings.prototype.onRestrictionsChange;
/**
 * @constructor
 * @struct
 */
AppleTVJS.TVError = function() {};
 /** @type {string} */
AppleTVJS.TVError.prototype.code;
 /** @type {string} */
AppleTVJS.TVError.prototype.description;
 /** @type {string} */
AppleTVJS.TVError.prototype.domain;
 /** @type {?} */
AppleTVJS.TVError.prototype.userInfo;
