/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/react-grid-layout/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: NamespaceExportDeclaration in  */

/* TODO: ExportAssignment in  */
/**
 * @extends {React.Component}
 * @constructor
 * @struct
 */
function ReactGridLayout() {}

/** @typedef {string} */
ReactGridLayout.Breakpoints;
/**
 * @record
 * @struct
 */
ReactGridLayout.Layout = function() {};
 /** @type {string} */
ReactGridLayout.Layout.prototype.i;
 /** @type {number} */
ReactGridLayout.Layout.prototype.x;
 /** @type {number} */
ReactGridLayout.Layout.prototype.y;
 /** @type {number} */
ReactGridLayout.Layout.prototype.w;
 /** @type {number} */
ReactGridLayout.Layout.prototype.h;
 /** @type {number} */
ReactGridLayout.Layout.prototype.minW;
 /** @type {number} */
ReactGridLayout.Layout.prototype.maxW;
 /** @type {number} */
ReactGridLayout.Layout.prototype.minH;
 /** @type {number} */
ReactGridLayout.Layout.prototype.maxH;
 /** @type {boolean} */
ReactGridLayout.Layout.prototype.static;
 /** @type {boolean} */
ReactGridLayout.Layout.prototype.isDraggable;
 /** @type {boolean} */
ReactGridLayout.Layout.prototype.isResizable;

/** @typedef {?} */
ReactGridLayout.Layouts;

/** @typedef {function(!Array<!ReactGridLayout.Layout>, !ReactGridLayout.Layout, !ReactGridLayout.Layout, !ReactGridLayout.Layout, !MouseEvent, !HTMLElement): void} */
ReactGridLayout.ItemCallback;
/**
 * @record
 * @struct
 */
ReactGridLayout.CoreProps = function() {};
 /** @type {string} */
ReactGridLayout.CoreProps.prototype.className;
 /** @type {!React.CSSProperties} */
ReactGridLayout.CoreProps.prototype.style;
 /** @type {boolean} */
ReactGridLayout.CoreProps.prototype.autoSize;
 /** @type {string} */
ReactGridLayout.CoreProps.prototype.draggableCancel;
 /** @type {string} */
ReactGridLayout.CoreProps.prototype.draggableHandle;
 /** @type {boolean} */
ReactGridLayout.CoreProps.prototype.verticalCompact;
 /** @type {number} */
ReactGridLayout.CoreProps.prototype.width;
 /** @type {!Array<?>} */
ReactGridLayout.CoreProps.prototype.margin;
 /** @type {!Array<?>} */
ReactGridLayout.CoreProps.prototype.containerPadding;
 /** @type {number} */
ReactGridLayout.CoreProps.prototype.rowHeight;
 /** @type {boolean} */
ReactGridLayout.CoreProps.prototype.isDraggable;
 /** @type {boolean} */
ReactGridLayout.CoreProps.prototype.isResizable;
 /** @type {boolean} */
ReactGridLayout.CoreProps.prototype.useCSSTransforms;
 /** @type {number} */
ReactGridLayout.CoreProps.prototype.maxRows;
 /** @type {function(!Array<!ReactGridLayout.Layout>, !ReactGridLayout.Layout, !ReactGridLayout.Layout, !ReactGridLayout.Layout, !MouseEvent, !HTMLElement): void} */
ReactGridLayout.CoreProps.prototype.onDragStart;
 /** @type {function(!Array<!ReactGridLayout.Layout>, !ReactGridLayout.Layout, !ReactGridLayout.Layout, !ReactGridLayout.Layout, !MouseEvent, !HTMLElement): void} */
ReactGridLayout.CoreProps.prototype.onDrag;
 /** @type {function(!Array<!ReactGridLayout.Layout>, !ReactGridLayout.Layout, !ReactGridLayout.Layout, !ReactGridLayout.Layout, !MouseEvent, !HTMLElement): void} */
ReactGridLayout.CoreProps.prototype.onDragStop;
 /** @type {function(!Array<!ReactGridLayout.Layout>, !ReactGridLayout.Layout, !ReactGridLayout.Layout, !ReactGridLayout.Layout, !MouseEvent, !HTMLElement): void} */
ReactGridLayout.CoreProps.prototype.onResizeStart;
 /** @type {function(!Array<!ReactGridLayout.Layout>, !ReactGridLayout.Layout, !ReactGridLayout.Layout, !ReactGridLayout.Layout, !MouseEvent, !HTMLElement): void} */
ReactGridLayout.CoreProps.prototype.onResize;
 /** @type {function(!Array<!ReactGridLayout.Layout>, !ReactGridLayout.Layout, !ReactGridLayout.Layout, !ReactGridLayout.Layout, !MouseEvent, !HTMLElement): void} */
ReactGridLayout.CoreProps.prototype.onResizeStop;
/**
 * @extends {ReactGridLayout.CoreProps}
 * @record
 * @struct
 */
ReactGridLayout.ReactGridLayoutProps = function() {};
 /** @type {number} */
ReactGridLayout.ReactGridLayoutProps.prototype.cols;
 /** @type {!Array<!ReactGridLayout.Layout>} */
ReactGridLayout.ReactGridLayoutProps.prototype.layout;

/**
 * Callback so you can save the layout.
 * Calls back with (currentLayout) after every drag or resize stop.
 * @param {!Array<!ReactGridLayout.Layout>} layout
 * @return {void}
 */
ReactGridLayout.ReactGridLayoutProps.prototype.onLayoutChange = function(layout) {};
/**
 * @extends {ReactGridLayout.CoreProps}
 * @record
 * @struct
 */
ReactGridLayout.ResponsiveProps = function() {};
 /** @type {?} */
ReactGridLayout.ResponsiveProps.prototype.breakpoints;
 /** @type {?} */
ReactGridLayout.ResponsiveProps.prototype.cols;
 /** @type {?} */
ReactGridLayout.ResponsiveProps.prototype.layouts;

/**
 * Calls back with breakpoint and new number pf cols.
 * @param {string} newBreakpoint
 * @param {number} newCols
 * @return {void}
 */
ReactGridLayout.ResponsiveProps.prototype.onBreakpointChange = function(newBreakpoint, newCols) {};

/**
 * Callback so you can save the layout.
 * @param {!ReactGridLayout.Layout} currentLayout
 * @param {?} allLayouts
 * @return {void}
 */
ReactGridLayout.ResponsiveProps.prototype.onLayoutChange = function(currentLayout, allLayouts) {};

/**
 * Callback when the width changes, so you can modify the layout as needed.
 * @param {number} containerWidth
 * @param {!Array<?>} margin
 * @param {number} cols
 * @param {!Array<?>} containerPadding
 * @return {void}
 */
ReactGridLayout.ResponsiveProps.prototype.onWidthChange = function(containerWidth, margin, cols, containerPadding) {};
/**
 * @extends {React.Component}
 * @constructor
 * @struct
 */
ReactGridLayout.Responsive = function() {};
/**
 * @record
 * @struct
 */
ReactGridLayout.WidthProviderProps = function() {};
 /** @type {boolean} */
ReactGridLayout.WidthProviderProps.prototype.measureBeforeMount;

/**
 * @template P
 * @param {!React.ComponentClass<P>} component
 * @return {!React.ComponentClass<?>}
 */
ReactGridLayout.WidthProvider = function(component) {};
