/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jssha/index.d.ts:
/** @const */
var jsSHA = {};
/**
 * @record
 * @struct
 */
jsSHA.EncodingOptions = function() {};
 /** @type {string} */
jsSHA.EncodingOptions.prototype.encoding;
/**
 * @extends {jsSHA.EncodingOptions}
 * @record
 * @struct
 */
jsSHA.Options = function() {};
 /** @type {number} */
jsSHA.Options.prototype.numRounds;
/**
 * @record
 * @struct
 */
jsSHA.OutputFormatOptions = function() {};
 /** @type {boolean} */
jsSHA.OutputFormatOptions.prototype.outputUpper;
 /** @type {string} */
jsSHA.OutputFormatOptions.prototype.b64Pad;
/**
 * @record
 * @struct
 */
jsSHA.jsSHA = function() {};

/* TODO: ConstructSignature: jsSHA */

/**
 * Sets the HMAC key for an eventual getHMAC call.  Must be called
 * immediately after jsSHA object instantiation
 * 
 *   of input format options
 * @param {string} key
 * @param {string} inputFormat
 * @param {!jsSHA.EncodingOptions=} encodingOpts
 * @return {void}
 */
jsSHA.jsSHA.prototype.setHMACKey = function(key, inputFormat, encodingOpts) {};

/**
 * Takes strString and hashes as many blocks as possible.  Stores the
 * rest for either a future update or getHash call.
 * 
 * @param {string} srcString
 * @return {void}
 */
jsSHA.jsSHA.prototype.update = function(srcString) {};

/**
 * Returns the desired SHA hash of the string specified at instantiation
 * using the specified parameters
 * 
 *   outputFormatOpts Hash list of output formatting options
 *   specified
 * @param {string} format
 * @param {!jsSHA.OutputFormatOptions=} outputFormatOpts
 * @return {string}
 */
jsSHA.jsSHA.prototype.getHash = function(format, outputFormatOpts) {};

/**
 * Returns the the HMAC in the specified format using the key given by
 * a previous setHMACKey call.
 * 
 *   (B64, HEX, or BYTES)
 *   outputFormatOpts associative array of output formatting options
 *   specified
 * @param {string} format
 * @param {!jsSHA.OutputFormatOptions=} outputFormatOpts
 * @return {string}
 */
jsSHA.jsSHA.prototype.getHMAC = function(format, outputFormatOpts) {};
 /** @type {!jsSHA.jsSHA} */
var jsSHA;

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
