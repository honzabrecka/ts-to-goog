/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jsdom/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {(string|?|!ArrayBuffer|!DataView|!Int8Array|!Uint8Array|!Uint8ClampedArray|!Int16Array|!Uint16Array|!Int32Array|!Uint32Array|!Float32Array|!Float64Array)=} html
 * @param {?=} options
 */
function JSDOM(html, options) {}
 /** @type {?} */
JSDOM.prototype.window;
 /** @type {?} */
JSDOM.prototype.virtualConsole;
 /** @type {?} */
JSDOM.prototype.cookieJar;

/**
 * @param {string} url
 * @param {?=} options
 * @return {!Promise<?>}
 */
JSDOM.fromURL = function(url, options) {};

/**
 * @param {string} url
 * @param {?=} options
 * @return {!Promise<?>}
 */
JSDOM.fromFile = function(url, options) {};

/**
 * @param {string} html
 * @return {!DocumentFragment}
 */
JSDOM.fragment = function(html) {};

/**
 * The serialize() method will return the HTML serialization of the document, including the doctype.
 * @return {string}
 */
JSDOM.prototype.serialize = function() {};

/**
 * The nodeLocation() method will find where a DOM node is within the source document, returning the parse5 location info for the node.
 * @param {!Node} node
 * @return {!MarkupData.ElementLocation}
 */
JSDOM.prototype.nodeLocation = function(node) {};

/**
 * The built-in vm module of Node.js allows you to create Script instances,
 * which can be compiled ahead of time and then run multiple times on a given "VM context".
 * Behind the scenes, a jsdom Window is indeed a VM context.
 * To get access to this ability, use the runVMScript() method.
 * @param {!Script} script
 * @return {void}
 */
JSDOM.prototype.runVMScript = function(script) {};

/**
 * @param {?} settings
 * @return {void}
 */
JSDOM.prototype.reconfigure = function(settings) {};
/**
 * @record
 * @struct
 */
function Options() {}
 /** @type {string} */
Options.prototype.referrer;
 /** @type {string} */
Options.prototype.userAgent;
 /** @type {boolean} */
Options.prototype.includeNodeLocations;
 /** @type {string} */
Options.prototype.runScripts;
 /** @type {string} */
Options.prototype.resources;
 /** @type {?} */
Options.prototype.virtualConsole;
 /** @type {?} */
Options.prototype.cookieJar;

/**
 * @param {?} window
 * @return {void}
 */
Options.prototype.beforeParse = function(window) {};

/** @typedef {?} */
var FromUrlOptions;

/** @typedef {?} */
var FromFileOptions;

/** @typedef {?} */
var ConstructorOptions;
/**
 * @record
 * @struct
 */
function DOMWindow() {}

/**
 * @param {string} script
 * @return {void}
 */
DOMWindow.prototype.eval = function(script) {};

/** @typedef {(!ArrayBuffer|!DataView|!Int8Array|!Uint8Array|!Uint8ClampedArray|!Int16Array|!Uint16Array|!Int32Array|!Uint32Array|!Float32Array|!Float64Array)} */
var BinaryData;
/**
 * @constructor
 * @struct
 */
function VirtualConsole() {}

/**
 * @template K
 * @param {?|string} method_or_event
 * @param {?} callback
 * @return {?}
 */
VirtualConsole.prototype.on = function(method_or_event, callback) {};

/**
 * @param {!Console} console
 * @param {?=} options
 * @return {?}
 */
VirtualConsole.prototype.sendTo = function(console, options) {};
/**
 * @record
 * @struct
 */
function VirtualConsoleSendToOptions() {}
 /** @type {boolean} */
VirtualConsoleSendToOptions.prototype.omitJSDOMErrors;
/**
 * @constructor
 * @struct
 */
function CookieJar() {}
 /** @type {?} */
var toughCookie;
/**
 * @record
 * @struct
 */
function ReconfigureSettings() {}
 /** @type {?} */
ReconfigureSettings.prototype.windowTop;
 /** @type {string} */
ReconfigureSettings.prototype.url;
