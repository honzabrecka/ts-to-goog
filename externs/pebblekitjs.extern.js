/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/pebblekitjs/index.d.ts:
/** @const */
var PebbleKit = {};
/**
 * @record
 * @struct
 */
PebbleKit.Error = function() {};
 /** @type {string} */
PebbleKit.Error.prototype.message;
/**
 * @record
 * @struct
 */
PebbleKit.Event = function() {};
 /** @type {string} */
PebbleKit.Event.prototype.type;
 /** @type {!Object} */
PebbleKit.Event.prototype.payload;
 /** @type {string} */
PebbleKit.Event.prototype.response;
/**
 * @record
 * @struct
 */
PebbleKit.Layout = function() {};
 /** @type {string} */
PebbleKit.Layout.prototype.icon;
 /** @type {string} */
PebbleKit.Layout.prototype.subtitleTemplateString;
/**
 * @record
 * @struct
 */
PebbleKit.AppGlanceSlice = function() {};
 /** @type {string} */
PebbleKit.AppGlanceSlice.prototype.expirationTime;
 /** @type {!PebbleKit.Layout} */
PebbleKit.AppGlanceSlice.prototype.layout;
/**
 * @record
 * @struct
 */
PebbleKit.AppMessageData = function() {};
 /** @type {string} */
PebbleKit.AppMessageData.prototype.transactionId;
/**
 * @record
 * @struct
 */
PebbleKit.AppMessageEvent = function() {};
 /** @type {!PebbleKit.AppMessageData} */
PebbleKit.AppMessageEvent.prototype.data;
 /** @type {!PebbleKit.Error} */
PebbleKit.AppMessageEvent.prototype.error;
/**
 * @record
 * @struct
 */
PebbleKit.Firmware = function() {};
 /** @type {number} */
PebbleKit.Firmware.prototype.major;
 /** @type {number} */
PebbleKit.Firmware.prototype.minor;
 /** @type {number} */
PebbleKit.Firmware.prototype.patch;
 /** @type {string} */
PebbleKit.Firmware.prototype.suffix;
/**
 * @record
 * @struct
 */
PebbleKit.WatchInfo = function() {};
 /** @type {string} */
PebbleKit.WatchInfo.prototype.platform;
 /** @type {string} */
PebbleKit.WatchInfo.prototype.model;
 /** @type {string} */
PebbleKit.WatchInfo.prototype.language;
 /** @type {!PebbleKit.Firmware} */
PebbleKit.WatchInfo.prototype.firmware;
/**
 * @record
 * @struct
 */
PebbleKit.Pebble = function() {};

/**
 * Adds a listener for Pebble JS events, such as when an AppMessage is received or the configuration view is opened or closed.
 * @param {string} type      The type of the event, from the three described above.
 * @param {function(!PebbleKit.Event): void} callback  A developer-defined function to receive any events of the type specified that occur.
 * @return {void}
 */
PebbleKit.Pebble.prototype.addEventListener = function(type, callback) {};

/**
 * Attaches an event handler to the specified events. Synonymous with addEventListener.
 * Only applicable to Rocky.js applications.
 * @param {string} type      The type of the event, from the three described above.
 * @param {function(!PebbleKit.Event): void} callback  A developer-defined function to receive any events of the type specified that occur.
 * @return {void}
 */
PebbleKit.Pebble.prototype.on = function(type, callback) {};

/**
 * Remove an existing event listener previously registered with Pebble.addEventListener().
 * @see addEventListener
 * @param {string} type      The type of the event listener to be removed.
 *                  See Pebble.addEventListener() for a list of available types.
 * @param {function(!PebbleKit.Event): void=} callback  The existing developer-defined function that was previously registered.
 * @return {void}
 */
PebbleKit.Pebble.prototype.removeEventListener = function(type, callback) {};

/**
 * Remove an existing event handler from the specified events. Synonymous with removeEventListener.
 * Only applicable to Rocky.js applications.
 * @see addEventListener
 * @param {string} type      The type of the event listener to be removed.
 *                  See Pebble.addEventListener() for a list of available types.
 * @param {function(!PebbleKit.Event): void=} callback  The existing developer-defined function that was previously registered.
 * @return {void}
 */
PebbleKit.Pebble.prototype.off = function(type, callback) {};

/**
 * Show a simple modal notification on the connected watch.
 * @param {string} title     The title of the notificati
 * 
 * @param {string} body      The main content of the notification.
 * @return {void}
 */
PebbleKit.Pebble.prototype.showSimpleNotificationOnPebble = function(title, body) {};

/**
 * Send an AppMessage to the app running on the watch.
 * Messages should be in the form of JSON objects containing key-value pairs.
 * @param {!Object} jsonAppMessage        A JSON object containing key-value pairs to send to the watch.
 *                              Values in arrays that are greater then 255 will be mod 255 before sending.
 * @param {function(!PebbleKit.AppMessageEvent): void=} callbackForAck        The developer-defined function to run if the watch acknowledges (ACK) this message.
 * @param {function(!PebbleKit.AppMessageEvent): void=} callbackForNack       The developer-defined function to run if the watch does not acknowledge (NACK) this message.
 * @return {string} string
 */
PebbleKit.Pebble.prototype.sendAppMessage = function(jsonAppMessage, callbackForAck, callbackForNack) {};

/**
 * Get the user's timeline token for this app. This is a string and is unique per user per app.
 * Note: In order for timeline tokens to be available, the app must be submitted to the Pebble appstore,
 * but does not need to be public. Read more in the timeline guides
 * @param {function(string): void} successCallback
 * @param {function(string): void} failureCallback
 * @return {void}
 */
PebbleKit.Pebble.prototype.getTimelineToken = function(successCallback, failureCallback) {};

/**
 * Subscribe the user to a timeline topic for your app.
 * This can be used to filter the different pins a user could receive according to their preferences,
 * as well as maintain groups of users.
 * @param {string} topic         The desired topic to be subscribed to. Users will receive all pins pushed to this topic.
 * @param {function(): void} successCb     The developer-defined function to handle a successful subscription attempt.
 * @param {function(string): void} errorCb       The developer-defined function to gracefully handle a failed subscription attempt.
 * @return {void}
 */
PebbleKit.Pebble.prototype.timelineSubscribe = function(topic, successCb, errorCb) {};

/**
 * Unsubscribe a user from a timeline topic for this app. Once unsubscribed,
 * the user will no longer receive any pins pushed to this topic.
 * @param {string} topic         The topic the user is to be unsubscribed from.
 * @param {function(): void} successCb     The developer-defined function to handle a successful unsubscription attempt.
 * @param {function(string): void} errorCb       The developer-defined function to gracefully handle a failed unsubscription attempt.
 * @return {void}
 */
PebbleKit.Pebble.prototype.timelineUnsubscribe = function(topic, successCb, errorCb) {};

/**
 * Obtain a list of topics that the user is currently subscribed to.
 * The length of the list should be checked to determine whether the user is subscribed to at least one topic.
 * @param {function(!Array<string>): void} successCb     The developer-defined function to process the retuned list of topic strings.
 * @param {function(string): void} errorCb       The developer-defined function to gracefully handle any errors in obtaining the user's subscriptions.
 * @return {void}
 */
PebbleKit.Pebble.prototype.timelineSubscriptions = function(successCb, errorCb) {};

/**
 * Returns a unique account token that is associated with the Pebble account of the current user.
 * @return {!PebbleKit.WatchInfo} WatchInfo
 */
PebbleKit.Pebble.prototype.getActiveWatchInfo = function() {};

/**
 * Returns a unique account token that is associated with the Pebble account of the current user.
 * @return {string} string
 */
PebbleKit.Pebble.prototype.getAccountToken = function() {};

/**
 * Returns a a unique token that can be used to identify a Pebble device.
 * @return {string} string
 */
PebbleKit.Pebble.prototype.getWatchToken = function() {};

/**
 * Triggers a reload of the app glance which first clears any existing slices and then adds the provided slices.
 * @param {!Array<!PebbleKit.AppGlanceSlice>} appGlanceSlices
 * @param {function(!Array<!PebbleKit.AppGlanceSlice>): void} onSuccess
 * @param {function(!Array<!PebbleKit.AppGlanceSlice>): void} onFailure
 * @return {void}
 */
PebbleKit.Pebble.prototype.appGlanceReload = function(appGlanceSlices, onSuccess, onFailure) {};

/**
 * to start displaying this webview
 * @param {string} url
 * @return {void}
 */
PebbleKit.Pebble.prototype.openURL = function(url) {};
 /** @type {!PebbleKit.Pebble} */
var Pebble;
