/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/alexa-voice-service/index.d.ts:

/* TODO: NamespaceExportDeclaration in  */

/* TODO: ExportAssignment in  */
/** @const */
var AVS = {};

/** @const */
AVS.EventTypes = {};
/** @const {number} */
AVS.EventTypes.RECORD_STOP;
/** @const {number} */
AVS.EventTypes.RECORD_START;
/** @const {number} */
AVS.EventTypes.ERROR;
/** @const {number} */
AVS.EventTypes.TOKEN_INVALID;
/** @const {number} */
AVS.EventTypes.LOG;
/** @const {number} */
AVS.EventTypes.LOGIN;
/** @const {number} */
AVS.EventTypes.LOGOUT;
/** @const {number} */
AVS.EventTypes.TOKEN_SET;
/** @const {number} */
AVS.EventTypes.REFRESH_TOKEN_SET;
/**
 * @record
 * @struct
 */
AVS.AVSParams = function() {};
 /** @type {boolean} */
AVS.AVSParams.prototype.debug;
 /** @type {string} */
AVS.AVSParams.prototype.clientId;
 /** @type {string} */
AVS.AVSParams.prototype.clientSecret;
 /** @type {string} */
AVS.AVSParams.prototype.deviceId;
 /** @type {string} */
AVS.AVSParams.prototype.refreshToken;
/**
 * @record
 * @struct
 */
AVS.TokenResponse = function() {};
 /** @type {string} */
AVS.TokenResponse.prototype.token;
 /** @type {string} */
AVS.TokenResponse.prototype.refreshToken;
/**
 * @constructor
 * @struct
 */
AVS.Player = function() {};

/**
 * @param {AVS.Player.EventTypes} eventType
 * @param {function(): void=} callback
 * @return {void}
 */
AVS.Player.prototype.on = function(eventType, callback) {};

/** @const */
AVS.Player.EventTypes = {};
/** @const {number} */
AVS.Player.EventTypes.LOG;
/** @const {number} */
AVS.Player.EventTypes.ERROR;
/** @const {number} */
AVS.Player.EventTypes.PLAY;
/** @const {number} */
AVS.Player.EventTypes.REPLAY;
/** @const {number} */
AVS.Player.EventTypes.PAUSE;
/** @const {number} */
AVS.Player.EventTypes.STOP;
/** @const {number} */
AVS.Player.EventTypes.ENQUEUE;
/** @const {number} */
AVS.Player.EventTypes.DEQUE;
 /** @type {!AVS.Player} */
AVS.prototype.player;

/**
 * @param {AVS.EventTypes} eventType
 * @param {function(): void=} callback
 * @return {void}
 */
AVS.prototype.on = function(eventType, callback) {};

/**
 * @return {!Promise<!AVS.TokenResponse>}
 */
AVS.prototype.refreshToken = function() {};

/**
 * @return {!Promise<?>}
 */
AVS.prototype.requestMic = function() {};

/**
 * @return {!Promise<void>}
 */
AVS.prototype.startRecording = function() {};

/**
 * @return {!Promise<!DataView>}
 */
AVS.prototype.stopRecording = function() {};

/**
 * @param {!DataView} dataView
 * @return {!Promise<{xhr: ?, response: {httpVersion: string, statusCode: string, statusMessage: string, method: string, url: string, headers: string, body: string, boundary: string, multipart: string}}>}
 */
AVS.prototype.sendAudio = function(dataView) {};
