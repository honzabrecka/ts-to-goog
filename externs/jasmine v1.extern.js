/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jasmine v1/index.d.ts:

/**
 * @param {string} description
 * @param {function(): void} specDefinitions
 * @return {void}
 */
function describe(description, specDefinitions) {}

/**
 * @param {string} description
 * @param {function(): void} specDefinitions
 * @return {void}
 */
function xdescribe(description, specDefinitions) {}

/**
 * @param {string} expectation
 * @param {function(): void|function(function(?): void): void} assertion
 * @return {void}
 */
function it(expectation, assertion) {}

/**
 * @param {string} expectation
 * @param {function(): void} assertion
 * @return {void}
 */
function xit(expectation, assertion) {}

/**
 * @param {function(): void} action
 * @return {void}
 */
function beforeEach(action) {}

/**
 * @param {function(): void} action
 * @return {void}
 */
function afterEach(action) {}

/**
 * @template T
 * @param {!Function|?} spy_or_actual
 * @return {!jasmine.Matchers<T>}
 */
function expect(spy_or_actual) {}

/**
 * @param {?} object
 * @param {string} method
 * @return {!jasmine.Spy}
 */
function spyOn(object, method) {}

/**
 * @param {!Function} asyncMethod
 * @return {void}
 */
function runs(asyncMethod) {}

/**
 * @param {function(): boolean} latchMethod
 * @param {string=} failureMessage
 * @param {number=} timeout
 * @return {void}
 */
function waitsFor(latchMethod, failureMessage, timeout) {}

/**
 * @param {number=} timeout
 * @return {void}
 */
function waits(timeout) {}
/** @const */
var jasmine = {};
 /** @type {?} */
jasmine.Clock;

/**
 * @param {?} aclass
 * @return {!jasmine.Any}
 */
jasmine.any = function(aclass) {};

/**
 * @param {?} sample
 * @return {!jasmine.ObjectContaining}
 */
jasmine.objectContaining = function(sample) {};

/**
 * @param {string} name
 * @param {!Function=} originalFn
 * @return {!jasmine.Spy}
 */
jasmine.createSpy = function(name, originalFn) {};

/**
 * @template T
 * @param {string} baseName
 * @param {!Array<?>} methodNames
 * @return {?|T}
 */
jasmine.createSpyObj = function(baseName, methodNames) {};

/**
 * @param {?} value
 * @return {string}
 */
jasmine.pp = function(value) {};

/**
 * @return {!jasmine.Env}
 */
jasmine.getEnv = function() {};
/**
 * @record
 * @struct
 */
jasmine.Any = function() {};

/* TODO: ConstructSignature: jasmine */

/**
 * @param {?} other
 * @return {boolean}
 */
jasmine.Any.prototype.jasmineMatches = function(other) {};

/**
 * @return {string}
 */
jasmine.Any.prototype.jasmineToString = function() {};
/**
 * @record
 * @struct
 */
jasmine.ObjectContaining = function() {};

/* TODO: ConstructSignature: jasmine */

/**
 * @param {?} other
 * @param {!Array<?>} mismatchKeys
 * @param {!Array<?>} mismatchValues
 * @return {boolean}
 */
jasmine.ObjectContaining.prototype.jasmineMatches = function(other, mismatchKeys, mismatchValues) {};

/**
 * @return {string}
 */
jasmine.ObjectContaining.prototype.jasmineToString = function() {};
/**
 * @record
 * @struct
 */
jasmine.Block = function() {};

/* TODO: ConstructSignature: jasmine */

/**
 * @param {function(): void} onComplete
 * @return {void}
 */
jasmine.Block.prototype.execute = function(onComplete) {};
/**
 * @extends {jasmine.Block}
 * @record
 * @struct
 */
jasmine.WaitsBlock = function() {};

/* TODO: ConstructSignature: jasmine */
/**
 * @extends {jasmine.Block}
 * @record
 * @struct
 */
jasmine.WaitsForBlock = function() {};

/* TODO: ConstructSignature: jasmine */
 /** @type {void} */
jasmine.Clock.prototype.real;
 /** @type {?} */
jasmine.Clock.prototype.installed;

/**
 * @return {void}
 */
jasmine.Clock.prototype.reset = function() {};

/**
 * @param {number} millis
 * @return {void}
 */
jasmine.Clock.prototype.tick = function(millis) {};

/**
 * @param {number} oldMillis
 * @param {number} nowMillis
 * @return {void}
 */
jasmine.Clock.prototype.runFunctionsWithinRange = function(oldMillis, nowMillis) {};

/**
 * @param {?} timeoutKey
 * @param {function(): void} funcToCall
 * @param {number} millis
 * @param {boolean} recurring
 * @return {void}
 */
jasmine.Clock.prototype.scheduleFunction = function(timeoutKey, funcToCall, millis, recurring) {};

/**
 * @return {void}
 */
jasmine.Clock.prototype.useMock = function() {};

/**
 * @return {void}
 */
jasmine.Clock.prototype.installMock = function() {};

/**
 * @return {void}
 */
jasmine.Clock.prototype.uninstallMock = function() {};

/**
 * @return {void}
 */
jasmine.Clock.prototype.assertInstalled = function() {};

/**
 * @return {boolean}
 */
jasmine.Clock.prototype.isInstalled = function() {};
/**
 * @record
 * @struct
 */
jasmine.Env = function() {};
 /** @type {?} */
jasmine.Env.prototype.setTimeout;
 /** @type {void} */
jasmine.Env.prototype.clearTimeout;
 /** @type {?} */
jasmine.Env.prototype.setInterval;
 /** @type {void} */
jasmine.Env.prototype.clearInterval;
 /** @type {number} */
jasmine.Env.prototype.updateInterval;
 /** @type {!jasmine.Spec} */
jasmine.Env.prototype.currentSpec;
 /** @type {!jasmine.Matchers<?>} */
jasmine.Env.prototype.matchersClass;

/**
 * @return {?}
 */
jasmine.Env.prototype.version = function() {};

/**
 * @return {string}
 */
jasmine.Env.prototype.versionString = function() {};

/**
 * @return {number}
 */
jasmine.Env.prototype.nextSpecId = function() {};

/**
 * @param {!jasmine.Reporter} reporter
 * @return {void}
 */
jasmine.Env.prototype.addReporter = function(reporter) {};

/**
 * @return {void}
 */
jasmine.Env.prototype.execute = function() {};

/**
 * @param {string} description
 * @param {function(): void} specDefinitions
 * @return {!jasmine.Suite}
 */
jasmine.Env.prototype.describe = function(description, specDefinitions) {};

/**
 * @param {function(): void} beforeEachFunction
 * @return {void}
 */
jasmine.Env.prototype.beforeEach = function(beforeEachFunction) {};

/**
 * @return {!jasmine.Runner}
 */
jasmine.Env.prototype.currentRunner = function() {};

/**
 * @param {function(): void} afterEachFunction
 * @return {void}
 */
jasmine.Env.prototype.afterEach = function(afterEachFunction) {};

/**
 * @param {string} desc
 * @param {function(): void} specDefinitions
 * @return {!jasmine.XSuite}
 */
jasmine.Env.prototype.xdescribe = function(desc, specDefinitions) {};

/**
 * @param {string} description
 * @param {function(): void} func
 * @return {!jasmine.Spec}
 */
jasmine.Env.prototype.it = function(description, func) {};

/**
 * @param {string} desc
 * @param {function(): void} func
 * @return {!jasmine.XSpec}
 */
jasmine.Env.prototype.xit = function(desc, func) {};

/**
 * @param {!RegExp} a
 * @param {!RegExp} b
 * @param {!Array<string>} mismatchKeys
 * @param {!Array<string>} mismatchValues
 * @return {boolean}
 */
jasmine.Env.prototype.compareRegExps_ = function(a, b, mismatchKeys, mismatchValues) {};

/**
 * @param {?} a
 * @param {?} b
 * @param {!Array<string>} mismatchKeys
 * @param {!Array<string>} mismatchValues
 * @return {boolean}
 */
jasmine.Env.prototype.compareObjects_ = function(a, b, mismatchKeys, mismatchValues) {};

/**
 * @param {?} a
 * @param {?} b
 * @param {!Array<string>} mismatchKeys
 * @param {!Array<string>} mismatchValues
 * @return {boolean}
 */
jasmine.Env.prototype.equals_ = function(a, b, mismatchKeys, mismatchValues) {};

/**
 * @param {?} haystack
 * @param {?} needle
 * @return {boolean}
 */
jasmine.Env.prototype.contains_ = function(haystack, needle) {};

/**
 * @param {function(?, ?, !jasmine.Env, !Array<string>, !Array<string>): boolean} equalityTester
 * @return {void}
 */
jasmine.Env.prototype.addEqualityTester = function(equalityTester) {};

/**
 * @param {!jasmine.Spec} spec
 * @return {boolean}
 */
jasmine.Env.prototype.specFilter = function(spec) {};
/**
 * @record
 * @struct
 */
jasmine.FakeTimer = function() {};

/* TODO: ConstructSignature: jasmine */

/**
 * @return {void}
 */
jasmine.FakeTimer.prototype.reset = function() {};

/**
 * @param {number} millis
 * @return {void}
 */
jasmine.FakeTimer.prototype.tick = function(millis) {};

/**
 * @param {number} oldMillis
 * @param {number} nowMillis
 * @return {void}
 */
jasmine.FakeTimer.prototype.runFunctionsWithinRange = function(oldMillis, nowMillis) {};

/**
 * @param {?} timeoutKey
 * @param {function(): void} funcToCall
 * @param {number} millis
 * @param {boolean} recurring
 * @return {void}
 */
jasmine.FakeTimer.prototype.scheduleFunction = function(timeoutKey, funcToCall, millis, recurring) {};
/**
 * @record
 * @struct
 */
jasmine.HtmlReporter = function() {};

/* TODO: ConstructSignature: jasmine */
/**
 * @record
 * @struct
 */
jasmine.Result = function() {};
 /** @type {string} */
jasmine.Result.prototype.type;
/**
 * @extends {jasmine.Result}
 * @record
 * @struct
 */
jasmine.NestedResults = function() {};
 /** @type {string} */
jasmine.NestedResults.prototype.description;
 /** @type {number} */
jasmine.NestedResults.prototype.totalCount;
 /** @type {number} */
jasmine.NestedResults.prototype.passedCount;
 /** @type {number} */
jasmine.NestedResults.prototype.failedCount;
 /** @type {boolean} */
jasmine.NestedResults.prototype.skipped;

/**
 * @param {!jasmine.NestedResults} result
 * @return {void}
 */
jasmine.NestedResults.prototype.rollupCounts = function(result) {};

/**
 * @param {?} values
 * @return {void}
 */
jasmine.NestedResults.prototype.log = function(values) {};

/**
 * @return {!Array<!jasmine.Result>}
 */
jasmine.NestedResults.prototype.getItems = function() {};

/**
 * @param {!jasmine.Result} result
 * @return {void}
 */
jasmine.NestedResults.prototype.addResult = function(result) {};

/**
 * @return {boolean}
 */
jasmine.NestedResults.prototype.passed = function() {};
/**
 * @extends {jasmine.Result}
 * @record
 * @struct
 */
jasmine.MessageResult = function() {};
 /** @type {?} */
jasmine.MessageResult.prototype.values;
 /** @type {!jasmine.Trace} */
jasmine.MessageResult.prototype.trace;
/**
 * @extends {jasmine.Result}
 * @record
 * @struct
 */
jasmine.ExpectationResult = function() {};
 /** @type {string} */
jasmine.ExpectationResult.prototype.matcherName;
 /** @type {?} */
jasmine.ExpectationResult.prototype.expected;
 /** @type {?} */
jasmine.ExpectationResult.prototype.actual;
 /** @type {string} */
jasmine.ExpectationResult.prototype.message;
 /** @type {!jasmine.Trace} */
jasmine.ExpectationResult.prototype.trace;

/**
 * @return {boolean}
 */
jasmine.ExpectationResult.prototype.passed = function() {};
/**
 * @record
 * @struct
 */
jasmine.Trace = function() {};
 /** @type {string} */
jasmine.Trace.prototype.name;
 /** @type {string} */
jasmine.Trace.prototype.message;
 /** @type {?} */
jasmine.Trace.prototype.stack;
/**
 * @record
 * @struct
 */
jasmine.PrettyPrinter = function() {};

/* TODO: ConstructSignature: jasmine */

/**
 * @param {?} value
 * @return {void}
 */
jasmine.PrettyPrinter.prototype.format = function(value) {};

/**
 * @param {?} obj
 * @param {function(string, boolean): void} fn
 * @return {void}
 */
jasmine.PrettyPrinter.prototype.iterateObject = function(obj, fn) {};

/**
 * @param {?} value
 * @return {void}
 */
jasmine.PrettyPrinter.prototype.emitScalar = function(value) {};

/**
 * @param {string} value
 * @return {void}
 */
jasmine.PrettyPrinter.prototype.emitString = function(value) {};

/**
 * @param {!Array<?>} array
 * @return {void}
 */
jasmine.PrettyPrinter.prototype.emitArray = function(array) {};

/**
 * @param {?} obj
 * @return {void}
 */
jasmine.PrettyPrinter.prototype.emitObject = function(obj) {};

/**
 * @param {?} value
 * @return {void}
 */
jasmine.PrettyPrinter.prototype.append = function(value) {};
/**
 * @extends {jasmine.PrettyPrinter}
 * @record
 * @struct
 */
jasmine.StringPrettyPrinter = function() {};
/**
 * @record
 * @struct
 */
jasmine.Queue = function() {};

/* TODO: ConstructSignature: jasmine */
 /** @type {!jasmine.Env} */
jasmine.Queue.prototype.env;
 /** @type {!Array<boolean>} */
jasmine.Queue.prototype.ensured;
 /** @type {!Array<!jasmine.Block>} */
jasmine.Queue.prototype.blocks;
 /** @type {boolean} */
jasmine.Queue.prototype.running;
 /** @type {number} */
jasmine.Queue.prototype.index;
 /** @type {number} */
jasmine.Queue.prototype.offset;
 /** @type {boolean} */
jasmine.Queue.prototype.abort;

/**
 * @param {!jasmine.Block} block
 * @param {boolean=} ensure
 * @return {void}
 */
jasmine.Queue.prototype.addBefore = function(block, ensure) {};

/**
 * @param {?} block
 * @param {boolean=} ensure
 * @return {void}
 */
jasmine.Queue.prototype.add = function(block, ensure) {};

/**
 * @param {?} block
 * @param {boolean=} ensure
 * @return {void}
 */
jasmine.Queue.prototype.insertNext = function(block, ensure) {};

/**
 * @param {function(): void=} onComplete
 * @return {void}
 */
jasmine.Queue.prototype.start = function(onComplete) {};

/**
 * @return {boolean}
 */
jasmine.Queue.prototype.isRunning = function() {};

/**
 * @return {void}
 */
jasmine.Queue.prototype.next_ = function() {};

/**
 * @return {!jasmine.NestedResults}
 */
jasmine.Queue.prototype.results = function() {};
/**
 * @record
 * @struct
 */
jasmine.Matchers = function() {};

/* TODO: ConstructSignature: jasmine */
 /** @type {!jasmine.Env} */
jasmine.Matchers.prototype.env;
 /** @type {?} */
jasmine.Matchers.prototype.actual;
 /** @type {!jasmine.Env} */
jasmine.Matchers.prototype.spec;
 /** @type {boolean} */
jasmine.Matchers.prototype.isNot;
 /** @type {!jasmine.Matchers} */
jasmine.Matchers.prototype.not;
 /** @type {!jasmine.Any} */
jasmine.Matchers.prototype.Any;

/**
 * @return {?}
 */
jasmine.Matchers.prototype.message = function() {};

/**
 * @param {?} expected
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBe = function(expected) {};

/**
 * @param {?} expected
 * @return {boolean}
 */
jasmine.Matchers.prototype.toEqual = function(expected) {};

/**
 * @param {?} expected
 * @return {boolean}
 */
jasmine.Matchers.prototype.toMatch = function(expected) {};

/**
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeDefined = function() {};

/**
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeUndefined = function() {};

/**
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeNull = function() {};

/**
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeNaN = function() {};

/**
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeTruthy = function() {};

/**
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeFalsy = function() {};

/**
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveBeenCalled = function() {};

/**
 * @param {...?} params
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveBeenCalledWith = function(params) {};

/**
 * @param {?} expected
 * @return {boolean}
 */
jasmine.Matchers.prototype.toContain = function(expected) {};

/**
 * @param {?} expected
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeLessThan = function(expected) {};

/**
 * @param {?} expected
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeGreaterThan = function(expected) {};

/**
 * @param {?} expected
 * @param {?} precision
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeCloseTo = function(expected, precision) {};

/**
 * @param {string} expected
 * @return {boolean}
 */
jasmine.Matchers.prototype.toContainHtml = function(expected) {};

/**
 * @param {string} expected
 * @return {boolean}
 */
jasmine.Matchers.prototype.toContainText = function(expected) {};

/**
 * @param {?=} expected
 * @return {boolean}
 */
jasmine.Matchers.prototype.toThrow = function(expected) {};
/**
 * @record
 * @struct
 */
jasmine.Reporter = function() {};

/**
 * @param {!jasmine.Runner} runner
 * @return {void}
 */
jasmine.Reporter.prototype.reportRunnerStarting = function(runner) {};

/**
 * @param {!jasmine.Runner} runner
 * @return {void}
 */
jasmine.Reporter.prototype.reportRunnerResults = function(runner) {};

/**
 * @param {!jasmine.Suite} suite
 * @return {void}
 */
jasmine.Reporter.prototype.reportSuiteResults = function(suite) {};

/**
 * @param {!jasmine.Spec} spec
 * @return {void}
 */
jasmine.Reporter.prototype.reportSpecStarting = function(spec) {};

/**
 * @param {!jasmine.Spec} spec
 * @return {void}
 */
jasmine.Reporter.prototype.reportSpecResults = function(spec) {};

/**
 * @param {string} str
 * @return {void}
 */
jasmine.Reporter.prototype.log = function(str) {};
/**
 * @extends {jasmine.Reporter}
 * @record
 * @struct
 */
jasmine.MultiReporter = function() {};

/**
 * @param {!jasmine.Reporter} reporter
 * @return {void}
 */
jasmine.MultiReporter.prototype.addReporter = function(reporter) {};
/**
 * @record
 * @struct
 */
jasmine.Runner = function() {};

/* TODO: ConstructSignature: jasmine */

/**
 * @return {void}
 */
jasmine.Runner.prototype.execute = function() {};

/**
 * @param {!jasmine.SpecFunction} beforeEachFunction
 * @return {void}
 */
jasmine.Runner.prototype.beforeEach = function(beforeEachFunction) {};

/**
 * @param {!jasmine.SpecFunction} afterEachFunction
 * @return {void}
 */
jasmine.Runner.prototype.afterEach = function(afterEachFunction) {};

/**
 * @return {void}
 */
jasmine.Runner.prototype.finishCallback = function() {};

/**
 * @param {!jasmine.Suite} suite
 * @return {void}
 */
jasmine.Runner.prototype.addSuite = function(suite) {};

/**
 * @param {!jasmine.Block} block
 * @return {void}
 */
jasmine.Runner.prototype.add = function(block) {};

/**
 * @return {!Array<!jasmine.Spec>}
 */
jasmine.Runner.prototype.specs = function() {};

/**
 * @return {!Array<!jasmine.Suite>}
 */
jasmine.Runner.prototype.suites = function() {};

/**
 * @return {!Array<!jasmine.Suite>}
 */
jasmine.Runner.prototype.topLevelSuites = function() {};

/**
 * @return {!jasmine.NestedResults}
 */
jasmine.Runner.prototype.results = function() {};
/**
 * @record
 * @struct
 */
jasmine.SpecFunction = function() {};

/* TODO: CallSignature: jasmine */
/**
 * @record
 * @struct
 */
jasmine.SuiteOrSpec = function() {};
 /** @type {number} */
jasmine.SuiteOrSpec.prototype.id;
 /** @type {!jasmine.Env} */
jasmine.SuiteOrSpec.prototype.env;
 /** @type {string} */
jasmine.SuiteOrSpec.prototype.description;
 /** @type {!jasmine.Queue} */
jasmine.SuiteOrSpec.prototype.queue;
/**
 * @extends {jasmine.SuiteOrSpec}
 * @record
 * @struct
 */
jasmine.Spec = function() {};

/* TODO: ConstructSignature: jasmine */
 /** @type {!jasmine.Suite} */
jasmine.Spec.prototype.suite;
 /** @type {!Array<!jasmine.SpecFunction>} */
jasmine.Spec.prototype.afterCallbacks;
 /** @type {!Array<!jasmine.Spy>} */
jasmine.Spec.prototype.spies_;
 /** @type {!jasmine.NestedResults} */
jasmine.Spec.prototype.results_;
 /** @type {!jasmine.Matchers<?>} */
jasmine.Spec.prototype.matchersClass;

/**
 * @return {string}
 */
jasmine.Spec.prototype.getFullName = function() {};

/**
 * @return {!jasmine.NestedResults}
 */
jasmine.Spec.prototype.results = function() {};

/**
 * @param {?} tsickle_arguments
 * @return {?}
 */
jasmine.Spec.prototype.log = function(tsickle_arguments) {};

/**
 * @param {!jasmine.SpecFunction} func
 * @return {!jasmine.Spec}
 */
jasmine.Spec.prototype.runs = function(func) {};

/**
 * @param {!jasmine.Block} block
 * @return {void}
 */
jasmine.Spec.prototype.addToQueue = function(block) {};

/**
 * @param {!jasmine.Result} result
 * @return {void}
 */
jasmine.Spec.prototype.addMatcherResult = function(result) {};

/**
 * @param {?} actual
 * @return {?}
 */
jasmine.Spec.prototype.expect = function(actual) {};

/**
 * @param {number} timeout
 * @return {!jasmine.Spec}
 */
jasmine.Spec.prototype.waits = function(timeout) {};

/**
 * @param {!jasmine.SpecFunction} latchFunction
 * @param {string=} timeoutMessage
 * @param {number=} timeout
 * @return {!jasmine.Spec}
 */
jasmine.Spec.prototype.waitsFor = function(latchFunction, timeoutMessage, timeout) {};

/**
 * @param {?=} e
 * @return {void}
 */
jasmine.Spec.prototype.fail = function(e) {};

/**
 * @return {!jasmine.Matchers<?>}
 */
jasmine.Spec.prototype.getMatchersClass_ = function() {};

/**
 * @param {?} matchersPrototype
 * @return {void}
 */
jasmine.Spec.prototype.addMatchers = function(matchersPrototype) {};

/**
 * @return {void}
 */
jasmine.Spec.prototype.finishCallback = function() {};

/**
 * @param {function(): void=} onComplete
 * @return {void}
 */
jasmine.Spec.prototype.finish = function(onComplete) {};

/**
 * @param {!jasmine.SpecFunction} doAfter
 * @return {void}
 */
jasmine.Spec.prototype.after = function(doAfter) {};

/**
 * @param {function(): void=} onComplete
 * @return {?}
 */
jasmine.Spec.prototype.execute = function(onComplete) {};

/**
 * @return {void}
 */
jasmine.Spec.prototype.addBeforesAndAftersToQueue = function() {};

/**
 * @return {void}
 */
jasmine.Spec.prototype.explodes = function() {};

/**
 * @param {?} obj
 * @param {string} methodName
 * @param {boolean} ignoreMethodDoesntExist
 * @return {!jasmine.Spy}
 */
jasmine.Spec.prototype.spyOn = function(obj, methodName, ignoreMethodDoesntExist) {};

/**
 * @return {void}
 */
jasmine.Spec.prototype.removeAllSpies = function() {};
/**
 * @record
 * @struct
 */
jasmine.XSpec = function() {};
 /** @type {number} */
jasmine.XSpec.prototype.id;

/**
 * @return {void}
 */
jasmine.XSpec.prototype.runs = function() {};
/**
 * @extends {jasmine.SuiteOrSpec}
 * @record
 * @struct
 */
jasmine.Suite = function() {};

/* TODO: ConstructSignature: jasmine */
 /** @type {!jasmine.Suite} */
jasmine.Suite.prototype.parentSuite;

/**
 * @return {string}
 */
jasmine.Suite.prototype.getFullName = function() {};

/**
 * @param {function(): void=} onComplete
 * @return {void}
 */
jasmine.Suite.prototype.finish = function(onComplete) {};

/**
 * @param {!jasmine.SpecFunction} beforeEachFunction
 * @return {void}
 */
jasmine.Suite.prototype.beforeEach = function(beforeEachFunction) {};

/**
 * @param {!jasmine.SpecFunction} afterEachFunction
 * @return {void}
 */
jasmine.Suite.prototype.afterEach = function(afterEachFunction) {};

/**
 * @return {!jasmine.NestedResults}
 */
jasmine.Suite.prototype.results = function() {};

/**
 * @param {!jasmine.SuiteOrSpec} suiteOrSpec
 * @return {void}
 */
jasmine.Suite.prototype.add = function(suiteOrSpec) {};

/**
 * @return {!Array<!jasmine.Spec>}
 */
jasmine.Suite.prototype.specs = function() {};

/**
 * @return {!Array<!jasmine.Suite>}
 */
jasmine.Suite.prototype.suites = function() {};

/**
 * @return {!Array<?>}
 */
jasmine.Suite.prototype.children = function() {};

/**
 * @param {function(): void=} onComplete
 * @return {void}
 */
jasmine.Suite.prototype.execute = function(onComplete) {};
/**
 * @record
 * @struct
 */
jasmine.XSuite = function() {};

/**
 * @return {void}
 */
jasmine.XSuite.prototype.execute = function() {};
/**
 * @record
 * @struct
 */
jasmine.Spy = function() {};

/* TODO: CallSignature: jasmine */
 /** @type {string} */
jasmine.Spy.prototype.identity;
 /** @type {!Array<?>} */
jasmine.Spy.prototype.calls;
 /** @type {{args: !Array<?>}} */
jasmine.Spy.prototype.mostRecentCall;
 /** @type {!Array<?>} */
jasmine.Spy.prototype.argsForCall;
 /** @type {boolean} */
jasmine.Spy.prototype.wasCalled;
 /** @type {number} */
jasmine.Spy.prototype.callCount;

/**
 * @param {?} value
 * @return {!jasmine.Spy}
 */
jasmine.Spy.prototype.andReturn = function(value) {};

/**
 * @return {!jasmine.Spy}
 */
jasmine.Spy.prototype.andCallThrough = function() {};

/**
 * @param {!Function} fakeFunc
 * @return {!jasmine.Spy}
 */
jasmine.Spy.prototype.andCallFake = function(fakeFunc) {};
/**
 * @record
 * @struct
 */
jasmine.Util = function() {};

/**
 * @param {!Function} childClass
 * @param {!Function} parentClass
 * @return {?}
 */
jasmine.Util.prototype.inherit = function(childClass, parentClass) {};

/**
 * @param {?} e
 * @return {?}
 */
jasmine.Util.prototype.formatException = function(e) {};

/**
 * @param {string} str
 * @return {string}
 */
jasmine.Util.prototype.htmlEscape = function(str) {};

/**
 * @param {?} args
 * @return {?}
 */
jasmine.Util.prototype.argsToArray = function(args) {};

/**
 * @param {?} destination
 * @param {?} source
 * @return {?}
 */
jasmine.Util.prototype.extend = function(destination, source) {};
/**
 * @extends {jasmine.Reporter}
 * @record
 * @struct
 */
jasmine.JsApiReporter = function() {};
 /** @type {boolean} */
jasmine.JsApiReporter.prototype.started;
 /** @type {boolean} */
jasmine.JsApiReporter.prototype.finished;
 /** @type {?} */
jasmine.JsApiReporter.prototype.result;
 /** @type {?} */
jasmine.JsApiReporter.prototype.messages;

/* TODO: ConstructSignature: jasmine */

/**
 * @return {!Array<!jasmine.Suite>}
 */
jasmine.JsApiReporter.prototype.suites = function() {};

/**
 * @param {!jasmine.SuiteOrSpec} suiteOrSpec
 * @return {?}
 */
jasmine.JsApiReporter.prototype.summarize_ = function(suiteOrSpec) {};

/**
 * @return {?}
 */
jasmine.JsApiReporter.prototype.results = function() {};

/**
 * @param {?} specId
 * @return {?}
 */
jasmine.JsApiReporter.prototype.resultsForSpec = function(specId) {};

/**
 * @param {?} str
 * @return {?}
 */
jasmine.JsApiReporter.prototype.log = function(str) {};

/**
 * @param {?} specIds
 * @return {?}
 */
jasmine.JsApiReporter.prototype.resultsForSpecs = function(specIds) {};

/**
 * @param {?} result
 * @return {?}
 */
jasmine.JsApiReporter.prototype.summarizeResult_ = function(result) {};
/**
 * @record
 * @struct
 */
jasmine.Jasmine = function() {};
 /** @type {!jasmine.Spec} */
jasmine.Jasmine.prototype.Spec;
 /** @type {?} */
jasmine.Jasmine.prototype.Clock;
 /** @type {!jasmine.Util} */
jasmine.Jasmine.prototype.util;
 /** @type {?} */
jasmine.HtmlReporter;
