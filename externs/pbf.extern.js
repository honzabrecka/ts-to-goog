/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/pbf/index.d.ts:

/**
 * @constructor
 * @struct
 * @param {!Uint8Array=} buffer
 */
function Pbf(buffer) {}
 /** @type {!Uint8Array} */
Pbf.prototype.buf;
 /** @type {number} */
Pbf.prototype.pos;
 /** @type {number} */
Pbf.prototype.type;
 /** @type {number} */
Pbf.prototype.length;

/**
 * @return {void}
 */
Pbf.prototype.destroy = function() {};

/**
 * @template T
 * @param {function(number, T, !Pbf): void} readField
 * @param {T=} result
 * @param {number=} end
 * @return {T}
 */
Pbf.prototype.readFields = function(readField, result, end) {};

/**
 * @template T
 * @param {function(number, T, !Pbf): void} readField
 * @param {T=} result
 * @return {T}
 */
Pbf.prototype.readMessage = function(readField, result) {};

/**
 * @return {number}
 */
Pbf.prototype.readFixed32 = function() {};

/**
 * @return {number}
 */
Pbf.prototype.readSFixed32 = function() {};

/**
 * @return {number}
 */
Pbf.prototype.readFixed64 = function() {};

/**
 * @return {number}
 */
Pbf.prototype.readSFixed64 = function() {};

/**
 * @return {number}
 */
Pbf.prototype.readFloat = function() {};

/**
 * @return {number}
 */
Pbf.prototype.readDouble = function() {};

/**
 * @param {boolean=} isSigned
 * @return {number}
 */
Pbf.prototype.readVarint = function(isSigned) {};

/**
 * @return {number}
 */
Pbf.prototype.readVarint64 = function() {};

/**
 * @return {number}
 */
Pbf.prototype.readSVarint = function() {};

/**
 * @return {boolean}
 */
Pbf.prototype.readBoolean = function() {};

/**
 * @return {string}
 */
Pbf.prototype.readString = function() {};

/**
 * @return {!Uint8Array}
 */
Pbf.prototype.readBytes = function() {};

/**
 * @param {!Array<number>=} arr
 * @param {boolean=} isSigned
 * @return {!Array<number>}
 */
Pbf.prototype.readPackedVarint = function(arr, isSigned) {};

/**
 * @param {!Array<number>=} arr
 * @return {!Array<number>}
 */
Pbf.prototype.readPackedSVarint = function(arr) {};

/**
 * @param {!Array<boolean>=} arr
 * @return {!Array<boolean>}
 */
Pbf.prototype.readPackedBoolean = function(arr) {};

/**
 * @param {!Array<number>=} arr
 * @return {!Array<number>}
 */
Pbf.prototype.readPackedFloat = function(arr) {};

/**
 * @param {!Array<number>=} arr
 * @return {!Array<number>}
 */
Pbf.prototype.readPackedDouble = function(arr) {};

/**
 * @param {!Array<number>=} arr
 * @return {!Array<number>}
 */
Pbf.prototype.readPackedFixed32 = function(arr) {};

/**
 * @param {!Array<number>=} arr
 * @return {!Array<number>}
 */
Pbf.prototype.readPackedSFixed32 = function(arr) {};

/**
 * @param {!Array<number>=} arr
 * @return {!Array<number>}
 */
Pbf.prototype.readPackedFixed64 = function(arr) {};

/**
 * @param {!Array<number>=} arr
 * @return {!Array<number>}
 */
Pbf.prototype.readPackedSFixed64 = function(arr) {};

/**
 * @param {number} val
 * @return {void}
 */
Pbf.prototype.skip = function(val) {};

/**
 * @param {number} tag
 * @param {number} type
 * @return {void}
 */
Pbf.prototype.writeTag = function(tag, type) {};

/**
 * @param {number} min
 * @return {void}
 */
Pbf.prototype.realloc = function(min) {};

/**
 * @return {!Uint8Array}
 */
Pbf.prototype.finish = function() {};

/**
 * @param {number} val
 * @return {void}
 */
Pbf.prototype.writeFixed32 = function(val) {};

/**
 * @param {number} val
 * @return {void}
 */
Pbf.prototype.writeSFixed32 = function(val) {};

/**
 * @param {number} val
 * @return {void}
 */
Pbf.prototype.writeFixed64 = function(val) {};

/**
 * @param {number} val
 * @return {void}
 */
Pbf.prototype.writeSFixed64 = function(val) {};

/**
 * @param {number} val
 * @return {void}
 */
Pbf.prototype.writeVarint = function(val) {};

/**
 * @param {number} val
 * @return {void}
 */
Pbf.prototype.writeSVarint = function(val) {};

/**
 * @param {boolean} val
 * @return {void}
 */
Pbf.prototype.writeBoolean = function(val) {};

/**
 * @param {string} str
 * @return {void}
 */
Pbf.prototype.writeString = function(str) {};

/**
 * @param {number} val
 * @return {void}
 */
Pbf.prototype.writeFloat = function(val) {};

/**
 * @param {number} val
 * @return {void}
 */
Pbf.prototype.writeDouble = function(val) {};

/**
 * @param {!Uint8Array} buffer
 * @return {void}
 */
Pbf.prototype.writeBytes = function(buffer) {};

/**
 * @template T
 * @param {function(T, !Pbf): void} fn
 * @param {T=} obj
 * @return {void}
 */
Pbf.prototype.writeRawMessage = function(fn, obj) {};

/**
 * @template T
 * @param {number} tag
 * @param {function(T, !Pbf): void} fn
 * @param {T=} obj
 * @return {void}
 */
Pbf.prototype.writeMessage = function(tag, fn, obj) {};

/**
 * @param {number} tag
 * @param {!Array<number>} arr
 * @return {void}
 */
Pbf.prototype.writePackedVarint = function(tag, arr) {};

/**
 * @param {number} tag
 * @param {!Array<number>} arr
 * @return {void}
 */
Pbf.prototype.writePackedSVarint = function(tag, arr) {};

/**
 * @param {number} tag
 * @param {!Array<boolean>} arr
 * @return {void}
 */
Pbf.prototype.writePackedBoolean = function(tag, arr) {};

/**
 * @param {number} tag
 * @param {!Array<number>} arr
 * @return {void}
 */
Pbf.prototype.writePackedFloat = function(tag, arr) {};

/**
 * @param {number} tag
 * @param {!Array<number>} arr
 * @return {void}
 */
Pbf.prototype.writePackedDouble = function(tag, arr) {};

/**
 * @param {number} tag
 * @param {!Array<number>} arr
 * @return {void}
 */
Pbf.prototype.writePackedFixed32 = function(tag, arr) {};

/**
 * @param {number} tag
 * @param {!Array<number>} arr
 * @return {void}
 */
Pbf.prototype.writePackedSFixed32 = function(tag, arr) {};

/**
 * @param {number} tag
 * @param {!Array<number>} arr
 * @return {void}
 */
Pbf.prototype.writePackedFixed64 = function(tag, arr) {};

/**
 * @param {number} tag
 * @param {!Array<number>} arr
 * @return {void}
 */
Pbf.prototype.writePackedSFixed64 = function(tag, arr) {};

/**
 * @param {number} tag
 * @param {!Uint8Array} buffer
 * @return {void}
 */
Pbf.prototype.writeBytesField = function(tag, buffer) {};

/**
 * @param {number} tag
 * @param {number} val
 * @return {void}
 */
Pbf.prototype.writeFixed32Field = function(tag, val) {};

/**
 * @param {number} tag
 * @param {number} val
 * @return {void}
 */
Pbf.prototype.writeSFixed32Field = function(tag, val) {};

/**
 * @param {number} tag
 * @param {number} val
 * @return {void}
 */
Pbf.prototype.writeFixed64Field = function(tag, val) {};

/**
 * @param {number} tag
 * @param {number} val
 * @return {void}
 */
Pbf.prototype.writeSFixed64Field = function(tag, val) {};

/**
 * @param {number} tag
 * @param {number} val
 * @return {void}
 */
Pbf.prototype.writeVarintField = function(tag, val) {};

/**
 * @param {number} tag
 * @param {number} val
 * @return {void}
 */
Pbf.prototype.writeSVarintField = function(tag, val) {};

/**
 * @param {number} tag
 * @param {string} str
 * @return {void}
 */
Pbf.prototype.writeStringField = function(tag, str) {};

/**
 * @param {number} tag
 * @param {number} val
 * @return {void}
 */
Pbf.prototype.writeFloatField = function(tag, val) {};

/**
 * @param {number} tag
 * @param {number} val
 * @return {void}
 */
Pbf.prototype.writeDoubleField = function(tag, val) {};

/**
 * @param {number} tag
 * @param {boolean} val
 * @return {void}
 */
Pbf.prototype.writeBooleanField = function(tag, val) {};

/* TODO: ExportAssignment in  */
