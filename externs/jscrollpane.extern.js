/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jscrollpane/index.d.ts:
/**
 * @record
 * @struct
 */
function JScrollPaneSettings() {}
 /** @type {boolean} */
JScrollPaneSettings.prototype.showArrows;
 /** @type {boolean} */
JScrollPaneSettings.prototype.maintainPosition;
 /** @type {boolean} */
JScrollPaneSettings.prototype.stickToBottom;
 /** @type {boolean} */
JScrollPaneSettings.prototype.stickToRight;
 /** @type {boolean} */
JScrollPaneSettings.prototype.autoReinitialise;
 /** @type {number} */
JScrollPaneSettings.prototype.autoReinitialiseDelay;
 /** @type {number} */
JScrollPaneSettings.prototype.verticalDragMinHeight;
 /** @type {number} */
JScrollPaneSettings.prototype.verticalDragMaxHeight;
 /** @type {number} */
JScrollPaneSettings.prototype.horizontalDragMinWidth;
 /** @type {number} */
JScrollPaneSettings.prototype.horizontalDragMaxWidth;
 /** @type {number} */
JScrollPaneSettings.prototype.contentWidth;
 /** @type {boolean} */
JScrollPaneSettings.prototype.animateScroll;
 /** @type {number} */
JScrollPaneSettings.prototype.animateDuration;
 /** @type {string} */
JScrollPaneSettings.prototype.animateEase;
 /** @type {boolean} */
JScrollPaneSettings.prototype.hijackInternalLinks;
 /** @type {number} */
JScrollPaneSettings.prototype.verticalGutter;
 /** @type {number} */
JScrollPaneSettings.prototype.horizontalGutter;
 /** @type {number} */
JScrollPaneSettings.prototype.mouseWheelSpeed;
 /** @type {number} */
JScrollPaneSettings.prototype.arrowButtonSpeed;
 /** @type {number} */
JScrollPaneSettings.prototype.arrowRepeatFreq;
 /** @type {boolean} */
JScrollPaneSettings.prototype.arrowScrollOnHover;
 /** @type {string} */
JScrollPaneSettings.prototype.verticalArrowPositions;
 /** @type {string} */
JScrollPaneSettings.prototype.horizontalArrowPositions;
 /** @type {boolean} */
JScrollPaneSettings.prototype.enableKeyboardNavigation;
 /** @type {boolean} */
JScrollPaneSettings.prototype.hideFocus;
 /** @type {boolean} */
JScrollPaneSettings.prototype.clickOnTrack;
 /** @type {number} */
JScrollPaneSettings.prototype.trackClickSpeed;
 /** @type {number} */
JScrollPaneSettings.prototype.trackClickRepeatFreq;
/**
 * @record
 * @struct
 */
function JScrollPaneApi() {}

/**
 * Reinitialises the scroll pane (if it's internal dimensions have changed since the last time it was initialised).
 * The settings object which is passed in will override any settings from the previous time it was initialised -
 * if you don't pass any settings then the ones from the previous initialisation will be used.
 * @param {!JScrollPaneSettings=} options
 * @return {void}
 */
JScrollPaneApi.prototype.reinitialise = function(options) {};

/**
 * Scrolls the specified element (a jQuery object) into view so that it can be seen within the viewport.
 * Scrolls the specified element (a jQuery selector string) into view so that it can be seen within the viewport.
 * Scrolls the specified element (a DOM node) into view so that it can be seen within the viewport.
 * @param {?<!HTMLElement>|string|!HTMLElement} ele A jQuery object to scroll to / A jQuery selector of the object to scroll to / A DOM node to scroll to
 * @param {boolean=} stickToTop If it is true then the element will appear at the top of the viewport, if it is false
 * then the viewport will scroll as little as possible to show the element.
 * @param {boolean=} animate Should an animation occur. If you don't provide this argument then the animateScroll
 * value from the settings object is used instead.
 * @return {void}
 */
JScrollPaneApi.prototype.scrollToElement = function(ele, stickToTop, animate) {};

/**
 * Scrolls the pane so that the specified co-ordinates within the content are at the top left of the viewport.
 * @param {number} destX Left position of the viewport to scroll to
 * @param {number} destY Top position of the viewport to scroll to
 * @param {boolean=} animate Should an animation occur. If you don't provide this argument then the animateScroll
 * value from the settings object is used instead.
 * @return {void}
 */
JScrollPaneApi.prototype.scrollTo = function(destX, destY, animate) {};

/**
 * Scrolls the pane so that the specified co-ordinate within the content is at the left of the viewport.
 * @param {number} destX Left position of the viewport to scroll to
 * @param {boolean=} animate Should an animation occur. If you don't provide this argument then the animateScroll
 * value from the settings object is used instead.
 * @return {void}
 */
JScrollPaneApi.prototype.scrollToX = function(destX, animate) {};

/**
 * Scrolls the pane so that the specified co-ordinate within the content is at the top of the viewport.
 * @param {number} destY Top position of the viewport to scroll to
 * @param {boolean=} animate Should an animation occur. If you don't provide this argument then the animateScroll
 * value from the settings object is used instead.
 * @return {void}
 */
JScrollPaneApi.prototype.scrollToY = function(destY, animate) {};

/**
 * Scrolls the pane to the specified percentage of its maximum horizontal scroll position.
 * @param {number} destPercentX Percentage from left of the full width of the viewport to scroll to
 * @param {boolean=} animate Should an animation occur. If you don't provide this argument then the animateScroll
 * value from the settings object is used instead.
 * @return {void}
 */
JScrollPaneApi.prototype.scrollToPercentX = function(destPercentX, animate) {};

/**
 * Scrolls the pane to the specified percentage of its maximum vertical scroll position.
 * @param {number} destPercentY Percentage from top of the full width of the viewport to scroll to
 * @param {boolean=} animate Should an animation occur. If you don't provide this argument then the animateScroll
 * value from the settings object is used instead.
 * @return {void}
 */
JScrollPaneApi.prototype.scrollToPercentY = function(destPercentY, animate) {};

/**
 * Scrolls the pane by the specified amount of pixels.
 * @param {number} deltaX Number of pixels to scroll horizontally
 * @param {number} deltaY Number of pixels to scroll vertically
 * @param {boolean=} animate Should an animation occur. If you don't provide this argument then the animateScroll
 * value from the settings object is used instead.
 * @return {void}
 */
JScrollPaneApi.prototype.scrollBy = function(deltaX, deltaY, animate) {};

/**
 * Scrolls the pane by the specified amount of pixels.
 * @param {number} deltaX Number of pixels to scroll horizontally
 * @param {boolean=} animate Should an animation occur. If you don't provide this argument then the animateScroll
 * value from the settings object is used instead.
 * @return {void}
 */
JScrollPaneApi.prototype.scrollByX = function(deltaX, animate) {};

/**
 * Scrolls the pane by the specified amount of pixels
 * @param {number} deltaY Number of pixels to scroll vertically
 * @param {boolean=} animate Should an animation occur. If you don't provide this argument then the animateScroll
 * value from the settings object is used instead.
 * @return {void}
 */
JScrollPaneApi.prototype.scrollByY = function(deltaY, animate) {};

/**
 * Positions the horizontal drag at the specified x position (and updates the viewport to reflect this)
 * @param {number} x New position of the horizontal drag
 * @param {boolean=} animate Should an animation occur. If you don't provide this argument then the animateScroll
 * value from the settings object is used instead.
 * @return {void}
 */
JScrollPaneApi.prototype.positionDragX = function(x, animate) {};

/**
 * Positions the vertical drag at the specified y position (and updates the viewport to reflect this)
 * @param {number} y
 * @param {boolean=} animate Should an animation occur. If you don't provide this argument then the animateScroll
 * value from the settings object is used instead.
 * @return {void}
 */
JScrollPaneApi.prototype.positionDragY = function(y, animate) {};

/**
 * This method is called when jScrollPane is trying to animate to a new position. You can override it if you want
 * to provide advanced animation functionality.
 * @param {?<!HTMLElement>} ele
 * @param {string} prop
 * @param {?} value
 * @param {function(!Array<?>): ?} stepCallback
 * @return {void}
 */
JScrollPaneApi.prototype.animate = function(ele, prop, value, stepCallback) {};

/**
 * Returns the current x position of the viewport with regards to the content pane.
 * @return {number}
 */
JScrollPaneApi.prototype.getContentPositionX = function() {};

/**
 * Returns the current y position of the viewport with regards to the content pane.
 * @return {number}
 */
JScrollPaneApi.prototype.getContentPositionY = function() {};

/**
 * Returns the width of the content within the scroll pane.
 * @return {number}
 */
JScrollPaneApi.prototype.getContentWidth = function() {};

/**
 * Returns the height of the content within the scroll pane.
 * @return {number}
 */
JScrollPaneApi.prototype.getContentHeight = function() {};

/**
 * Returns whether or not this scrollpane has a horizontal scrollbar.
 * @return {boolean}
 */
JScrollPaneApi.prototype.getIsScrollableH = function() {};

/**
 * Returns the horizontal position of the viewport within the pane content.
 * @return {number}
 */
JScrollPaneApi.prototype.getPercentScrolledX = function() {};

/**
 * Returns the vertical position of the viewport within the pane content.
 * @return {number}
 */
JScrollPaneApi.prototype.getPercentScrolledY = function() {};

/**
 * Returns whether or not this scrollpane has a vertical scrollbar.
 * @return {boolean}
 */
JScrollPaneApi.prototype.getIsScrollableV = function() {};

/**
 * Gets a reference to the content pane. It is important that you use this method if you want to edit the content
 * of your jScrollPane as if you access the element directly then you may have some problems (as your original
 * element has had additional elements for the scrollbars etc added into it).
 * @return {?<!HTMLElement>}
 */
JScrollPaneApi.prototype.getContentPane = function() {};

/**
 * Scrolls this jScrollPane down as far as it can currently scroll.
 * @param {boolean=} animate Should an animation occur. If you don't provide this argument then the animateScroll
 * value from the settings object is used instead.
 * @return {void}
 */
JScrollPaneApi.prototype.scrollToBottom = function(animate) {};

/**
 * Hijacks the links on the page which link to content inside the scrollpane. If you have changed the content of
 * your page (e.g. via AJAX) and want to make sure any new anchor links to the contents of your scroll pane will
 * work then call this function.
 * @return {void}
 */
JScrollPaneApi.prototype.hijackInternalLinks = function() {};

/**
 * Destroys the jScrollPane on the instance matching this API object and restores the browser's default behaviour.
 * @return {void}
 */
JScrollPaneApi.prototype.destroy = function() {};

/**
 * Initialises the jScrollPane on the JQuery object.
 * @param {!JScrollPaneSettings=} options
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.jScrollPane = function(options) {};
