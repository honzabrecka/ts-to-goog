/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/bit-array/index.d.ts:
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "bit-array"
/** @const */
tsickle_declare_module.bit_array = {};

/**
 * @constructor
 * @struct
 * Creates a new empty BitArray with the given length or initialises the BitArray with the given hex representation.
 * @param {number} size
 * @param {string=} hex
 */
tsickle_declare_module.bit_array.BitArray = function(size, hex) {};

/**
 * Returns the total number of bits in this BitArray.
 * @return {number}
 */
tsickle_declare_module.bit_array.BitArray.prototype.size = function() {};

/**
 * Sets the bit at index to a value (boolean.)
 * @param {number} index
 * @param {boolean} value
 * @return {!BitArray}
 */
tsickle_declare_module.bit_array.BitArray.prototype.set = function(index, value) {};

/**
 * Toggles the bit at index. If the bit is on, it is turned off. Likewise, if the bit is off it is turned on.
 * @param {number} index
 * @return {!BitArray}
 */
tsickle_declare_module.bit_array.BitArray.prototype.toggle = function(index) {};

/**
 * Returns the value of the bit at index (boolean.)
 * @param {number} index
 * @return {boolean}
 */
tsickle_declare_module.bit_array.BitArray.prototype.get = function(index) {};

/**
 * Resets the BitArray so that it is empty and can be re-used.
 * @return {!BitArray}
 */
tsickle_declare_module.bit_array.BitArray.prototype.reset = function() {};

/**
 * Returns a copy of this BitArray.
 * @return {!BitArray}
 */
tsickle_declare_module.bit_array.BitArray.prototype.copy = function() {};

/**
 * Returns true if this BitArray equals another. Two BitArrays are considered
 * equal if both have the same length and bit pattern.
 * @param {!BitArray} x
 * @return {boolean}
 */
tsickle_declare_module.bit_array.BitArray.prototype.equals = function(x) {};

/**
 * Returns the JSON representation of this BitArray.
 * @return {string}
 */
tsickle_declare_module.bit_array.BitArray.prototype.toJSON = function() {};

/**
 * Returns a string representation of the BitArray with bits
 * in mathemetical order.
 * @return {string}
 */
tsickle_declare_module.bit_array.BitArray.prototype.toBinaryString = function() {};

/**
 * Returns a hexadecimal string representation of the BitArray
 * with bits in logical order.
 * @return {string}
 */
tsickle_declare_module.bit_array.BitArray.prototype.toHexString = function() {};

/**
 * Returns a string representation of the BitArray with bits
 * in logical order.
 * @return {string}
 */
tsickle_declare_module.bit_array.BitArray.prototype.toString = function() {};

/**
 * Convert the BitArray to an Array of boolean values (slow).
 * @return {!Array<boolean>}
 */
tsickle_declare_module.bit_array.BitArray.prototype.toArray = function() {};

/**
 * Returns the total number of bits set to one in this BitArray.
 * @return {number}
 */
tsickle_declare_module.bit_array.BitArray.prototype.count = function() {};

/**
 * Inverts this BitArray.
 * @return {!BitArray}
 */
tsickle_declare_module.bit_array.BitArray.prototype.not = function() {};

/**
 * Bitwise OR on the values of this BitArray using BitArray x.
 * @param {!BitArray} x
 * @return {!BitArray}
 */
tsickle_declare_module.bit_array.BitArray.prototype.or = function(x) {};

/**
 * Bitwise AND on the values of this BitArray using BitArray x.
 * @param {!BitArray} x
 * @return {!BitArray}
 */
tsickle_declare_module.bit_array.BitArray.prototype.and = function(x) {};

/**
 * Bitwise XOR on the values of this BitArray using BitArray x.
 * @param {!BitArray} x
 * @return {!BitArray}
 */
tsickle_declare_module.bit_array.BitArray.prototype.xor = function(x) {};

/* TODO: ExportAssignment in tsickle_declare_module.bit_array */
