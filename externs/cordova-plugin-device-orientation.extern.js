/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cordova-plugin-device-orientation/index.d.ts:
 /** @type {!Compass} */
Navigator.prototype.compass;
/**
 * @record
 * @struct
 */
function Compass() {}

/**
 * Get the current compass heading. The compass heading is returned via a CompassHeading
 * object using the onSuccess callback function.
 * @param {function(!CompassHeading): void} onSuccess Success callback that passes CompassHeading object.
 * @param {function(?): void} onError Error callback that passes CompassError object.
 * @param {!CompassOptions=} options
 * @return {void}
 */
Compass.prototype.getCurrentHeading = function(onSuccess, onError, options) {};

/**
 * Gets the device's current heading at a regular interval. Each time the heading is retrieved,
 * the headingSuccess callback function is executed. The returned watch ID references the compass
 * watch interval. The watch ID can be used with navigator.compass.clearWatch to stop watching
 * the navigator.compass.
 * @param {function(!CompassHeading): void} onSuccess Success callback that passes CompassHeading object.
 * @param {function(?): void} onError   Error callback that passes CompassError object.
 * @param {!CompassOptions=} options   CompassOptions object
 * @return {number}
 */
Compass.prototype.watchHeading = function(onSuccess, onError, options) {};

/**
 * Stop watching the compass referenced by the watch ID parameter.
 * @param {number} id The ID returned by navigator.compass.watchHeading.
 * @return {void}
 */
Compass.prototype.clearWatch = function(id) {};
/**
 * @record
 * @struct
 */
function CompassHeading() {}
 /** @type {number} */
CompassHeading.prototype.magneticHeading;
 /** @type {number} */
CompassHeading.prototype.trueHeading;
 /** @type {number} */
CompassHeading.prototype.headingAccuracy;
 /** @type {number} */
CompassHeading.prototype.timestamp;
/**
 * @record
 * @struct
 */
function CompassOptions() {}
 /** @type {number} */
CompassOptions.prototype.filter;
 /** @type {number} */
CompassOptions.prototype.frequency;
/**
 * @record
 * @struct
 */
function CompassError() {}
 /** @type {number} */
CompassError.prototype.code;
 /** @type {function(new: (?), number): ?} */
var CompassError;
