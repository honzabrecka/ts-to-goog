/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/engine.io/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportDeclaration in  */
/** @const */
var engine = {};

/** @typedef {(string|?|!ArrayBuffer|!ArrayBufferView)} */
engine.Message;

/** @typedef {string} */
engine.Transport;
/**
 * @record
 * @struct
 */
engine.Packet = function() {};
 /** @type {string} */
engine.Packet.prototype.type;
 /** @type {!engine.MessageOptions} */
engine.Packet.prototype.options;
 /** @type {(string|?|!ArrayBuffer|!ArrayBufferView)} */
engine.Packet.prototype.data;

/** @typedef {function(!IncomingMessage, function(string, boolean): void): void} */
engine.AllowRequestFunction;
/**
 * @record
 * @struct
 */
engine.ServerOptions = function() {};
 /** @type {number} */
engine.ServerOptions.prototype.pingTimeout;
 /** @type {number} */
engine.ServerOptions.prototype.pingInterval;
 /** @type {number} */
engine.ServerOptions.prototype.upgradeTimeout;
 /** @type {number} */
engine.ServerOptions.prototype.maxHttpBufferSize;
 /** @type {function(!IncomingMessage, function(string, boolean): void): void} */
engine.ServerOptions.prototype.allowRequest;
 /** @type {!Array<string>} */
engine.ServerOptions.prototype.transports;
 /** @type {boolean} */
engine.ServerOptions.prototype.allowUpgrades;
 /** @type {?} */
engine.ServerOptions.prototype.perMessageDeflate;
 /** @type {?} */
engine.ServerOptions.prototype.httpCompression;
 /** @type {(string|boolean)} */
engine.ServerOptions.prototype.cookie;
 /** @type {(string|boolean)} */
engine.ServerOptions.prototype.cookiePath;
 /** @type {boolean} */
engine.ServerOptions.prototype.cookieHttpOnly;
 /** @type {string} */
engine.ServerOptions.prototype.wsEngine;
 /** @type {(string|?|!ArrayBuffer|!ArrayBufferView)} */
engine.ServerOptions.prototype.initialPacket;
/**
 * @record
 * @struct
 */
engine.AttachOptions = function() {};
 /** @type {string} */
engine.AttachOptions.prototype.path;
 /** @type {boolean} */
engine.AttachOptions.prototype.destroyUpgrade;
 /** @type {number} */
engine.AttachOptions.prototype.destroyUpgradeTimeout;
 /** @type {(boolean|function(!engine.Server, !IncomingMessage, !ServerResponse): void)} */
engine.AttachOptions.prototype.handlePreflightRequest;
/**
 * @extends {engine.ServerOptions}
 * @extends {engine.AttachOptions}
 * @record
 * @struct
 */
engine.ServerAttachOptions = function() {};
/**
 * @record
 * @struct
 */
engine.MessageOptions = function() {};
 /** @type {boolean} */
engine.MessageOptions.prototype.compress;

/**
 * @constructor
 * @struct
 * Initializes the server
 * @param {!engine.ServerOptions=} opts
 */
engine.Server = function(opts) {};
 /** @type {!Object<string,!engine.Socket>} */
engine.Server.prototype.clients;
 /** @type {number} */
engine.Server.prototype.clientsCount;
 /** @type {!Server} */
engine.Server.prototype.httpServer;

/**
 * Fired when a new connection is established.
 * @param {string} ev
 * @param {function(!engine.Socket): void|function(!engine.Socket, !Array<!engine.Packet>): void} fn
 * @return {Server}
 */
engine.Server.prototype.on = function(ev, fn) {};

/**
 * Closes all clients
 * @return {Server}
 */
engine.Server.prototype.close = function() {};

/**
 * Called internally when a Engine request is intercepted.
 * @param {!IncomingMessage} req
 * @param {!ServerResponse} res
 * @return {Server}
 */
engine.Server.prototype.handleRequest = function(req, res) {};

/**
 * Called internally when a Engine ws upgrade is intercepted.
 * @param {!IncomingMessage} req
 * @param {?} socket
 * @param {?} head
 * @return {Server}
 */
engine.Server.prototype.handleUpgrade = function(req, socket, head) {};

/**
 * Attach this Server instance to an http.Server
 * Captures upgrade requests for a http.Server. In other words, makes a regular http.Server WebSocket-compatible.
 * @param {!Server} http
 * @param {!engine.AttachOptions=} opts
 * @return {Server}
 */
engine.Server.prototype.attach = function(http, opts) {};

/**
 * Generate a socket id.
 * Overwrite this method to generate your custom socket id.
 * @param {!IncomingMessage} req
 * @return {string}
 */
engine.Server.prototype.generateId = function(req) {};
/**
 * @extends {EventEmitter}
 * @constructor
 * @struct
 */
engine.Socket = function() {};
 /** @type {string} */
engine.Socket.prototype.id;
 /** @type {!engine.Server} */
engine.Socket.prototype.server;
 /** @type {!IncomingMessage} */
engine.Socket.prototype.request;
 /** @type {boolean} */
engine.Socket.prototype.upgraded;
 /** @type {string} */
engine.Socket.prototype.readyState;

/**
 * Sends a message, performing message = toString(arguments[0]) unless sending binary data, which is sent as is.
 * @param {(string|?|!ArrayBuffer|!ArrayBufferView)} message
 * @param {!engine.MessageOptions=} opts
 * @param {function(?): void=} fn
 * @return {void}
 */
engine.Socket.prototype.send = function(message, opts, fn) {};

/**
 * Disconnects the client
 * @return {Socket}
 */
engine.Socket.prototype.close = function() {};

/**
 * Fired when the client is disconnected.
 * Fired when the client sends a message.
 * Fired when an error occurs.
 * Called when the write buffer is being flushed.
 * Called when the write buffer is drained
 * packet: Called when a socket received a packet (message, ping)
 * packetCreate: Called before a socket sends a packet (message, pong)
 * @param {string} ev
 * @param {function(string, !Error): void|function((string|?)): void|function(!Error): void|function(!Array<!engine.Packet>): void|function(): void|function(!engine.Packet): void} fn
 * @return {Socket}
 */
engine.Socket.prototype.on = function(ev, fn) {};

/**
 * @param {!Server} http
 * @param {!engine.ServerAttachOptions=} opyts
 * @return {!engine.Server}
 */
engine.attach = function(http, opyts) {};

/**
 * @param {number} port
 * @param {!engine.ServerOptions=} opts
 * @param {function(): void=} fn
 * @return {!engine.Server}
 */
engine.listen = function(port, opts, fn) {};
 /** @type {number} */
engine.protocol;

/**
 * @param {!Server=} httpServer
 * @param {!engine.ServerOptions=} opts
 * @return {!engine.Server}
 */
function engine(httpServer, opts) {}

/* TODO: ExportAssignment in  */
