/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/firebird/index.d.ts:
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "firebird"
/** @const */
tsickle_declare_module.firebird = {};

/**
 * @see createConnection() method will create Firebird Connection object for you
 * @return {!Connection}
 */
tsickle_declare_module.firebird.createConnection = function() {};

/**
 * @constructor
 * @struct
 */
tsickle_declare_module.firebird.Connection = function() {};
 /** @type {boolean} */
tsickle_declare_module.firebird.Connection.prototype.connected;
 /** @type {boolean} */
tsickle_declare_module.firebird.Connection.prototype.inTransaction;

/**
 * Connects you to database,
 * 
 * @throws raises exception on error (try to catch it).
 * @param {string} db
 * @param {string} user
 * @param {string} pass
 * @param {string} role 
 * 
 * @return {void}
 */
tsickle_declare_module.firebird.Connection.prototype.connectSync = function(db, user, pass, role) {};

/**
 * Asynchronously connects you to Database.
 * 
 * @param {string} db
 * @param {string} user
 * @param {string} pass
 * @param {string} role
 * @param {function(!Error): void} callback function(err), where err is error object in case of error.
 * @return {void}
 */
tsickle_declare_module.firebird.Connection.prototype.connect = function(db, user, pass, role, callback) {};

/**
 * Executes SQL query.
 * @throws Raises error otherwise.
 * @param {string} sql an SQL query to execute.
 * @return {!FBResult} object in case of success.
 */
tsickle_declare_module.firebird.Connection.prototype.querySync = function(sql) {};

/**
 * Asynchronously executes query.
 * 
 * @param {string} sql an SQL query to execute.
 * @param {function(!Error, !FBResult): void} callback function(err,res), err - is error object or null, res - FBResult object.
 * @return {void}
 */
tsickle_declare_module.firebird.Connection.prototype.query = function(sql, callback) {};

/**
 * Registers connection to listen for firebird event name, called from PL\SQL (in stored procedures or triggers) with post_event 'name'.
 * 
 * @desc 
 * You may set callback for event with
 * \@code connection.on('fbevent', function(name, count){ <your code>));.
 * Where name is event name, and count is number of times event were posted.
 * 
 * @param {string} name Firebird Event Name.
 * @return {void}
 */
tsickle_declare_module.firebird.Connection.prototype.addFBevent = function(name) {};

/**
 * Unsubscribes connection from getting events for name.
 * 
 * @param {string} name Firebird Event Name.
 * @return {void}
 */
tsickle_declare_module.firebird.Connection.prototype.deleteFBevent = function(name) {};

/**
 * \@summary 
 * Synchronously commits current transaction.
 * 
 * @desc 
 * Notes:
 * There is only one transaction associated with connection.
 * Transacation is automatically started before any query if connection does not have active transaction (check \@see inTransaction property).
 * You also should note that DDL statements (altering database structure) are commited automatically.
 * To run quieries in context of other transaction use \@see Transaction object.
 * @return {void}
 */
tsickle_declare_module.firebird.Connection.prototype.commitSync = function() {};

/**
 * Asynchronous commit transaction.
 * 
 * @desc 
 * Read notes in \@see commitSync() .
 * 
 * @param {function(!Error): void} callback function(err), where err is error object in case of error.
 * @return {void}
 */
tsickle_declare_module.firebird.Connection.prototype.commit = function(callback) {};

/**
 * Synchronously rollbacks current transaction.
 * 
 * @desc 
 * Read notes in \@see commitSync() .
 * @return {void}
 */
tsickle_declare_module.firebird.Connection.prototype.rollbackSync = function() {};

/**
 * Asynchronously rollbacks current transaction.
 * 
 * @desc 
 * Read notes in \@see commitSync() .
 * 
 * @param {function(!Error): void} callback function(err), where err is error object in case of error.
 * @return {void}
 */
tsickle_declare_module.firebird.Connection.prototype.rollback = function(callback) {};

/**
 * Synchronously starts new default transaction.
 * 
 * @desc 
 * The default transaction should be not in started state before call to this method.
 * Read notes in \@see commitSync() .
 * @return {void}
 */
tsickle_declare_module.firebird.Connection.prototype.startSync = function() {};

/**
 * Asynchronously starts new default transaction.
 * 
 * @desc 
 * Read notes in \@see commitSync() .
 * 
 * @param {function(!Error): void} callback function(err), where err is error object in case of error.
 * @return {void}
 */
tsickle_declare_module.firebird.Connection.prototype.start = function(callback) {};

/**
 * Synchronously prepares SQL statement and returns FBStatement object.
 * 
 * @param {string} sql an SQL query to prepare.
 * @return {!FBStatement}
 */
tsickle_declare_module.firebird.Connection.prototype.prepareSync = function(sql) {};

/**
 * Creates new FBblob object and opens it for write.
 * After finishing write operation and closing blob one may insert it in database passing as parameter to exec,
 * execSync methods of \@see FBStatement object.
 * @return {!FBBlob}
 */
tsickle_declare_module.firebird.Connection.prototype.newBlobSync = function() {};

/**
 * Creates new Transaction object and starts new transaction.
 * @return {!Transaction} created object.
 */
tsickle_declare_module.firebird.Connection.prototype.startNewTransactionSync = function() {};

/**
 * Creates new Transaction object and starts new transaction.
 * 
 * @param {function(!Error, !Transaction): void} callback function(err, transaction), where err is error object in case of error, transaction - newly created transaction.
 * @return {void}
 */
tsickle_declare_module.firebird.Connection.prototype.startNewTransaction = function(callback) {};

/** @typedef {(string|number|!FBBlob|!Date)} */
tsickle_declare_module.firebird.DataType;
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.firebird.FBResult = function() {};

/**
 * \@summary 
 * Synchronously fetches result rows.
 * 
 * @desc 
 * If you pass "all" as rowCount - it will fetch all result rows.
 * If you pass less rowCount than are actually in result, it will return specified number of rows.
 * You may call fetchSync multiple times until all rows will be fetched.
 * If you specify more rowCount than available it will return only actual number of rows.
 * 
 * @template T
 * @param {(number|string)} rowCount number of rows to fetch from results;
 * @param {boolean} asObject format of returned rows. When false - methods returns array of array, when true - array of objects.
 * @return {(!Array<!Array<(string|number|!FBBlob|!Date)>>|!Array<!Object<string,(string|number|!FBBlob|!Date)>>)|!Array<!Array<(string|number|!FBBlob|!Date)>>|!Array<!Object<string,(string|number|!FBBlob|!Date)>>|!Array<T>}
 */
tsickle_declare_module.firebird.FBResult.prototype.fetchSync = function(rowCount, asObject) {};

/**
 * Asynchronously fetches rows one by one.
 * 
 * @template T
 * @param {(number|string)} rowCount number of rows to fetch from results
 * @param {boolean} asObject format of returned rows. When false - methods returns array of array, when true - array of objects
 * @param {function((!Array<(string|number|!FBBlob|!Date)>|!Object<string,(string|number|!FBBlob|!Date)>)): void|function(!Array<(string|number|!FBBlob|!Date)>): void|function(!Object<string,(string|number|!FBBlob|!Date)>): void|function(T): void} rowCallback function(row), row - Array or Object (depends on asObject parameter) representing single row from result; called for each fetched row.
 * @param {function(!Error, boolean): void} eofCallback function(err,eof), err - Error object in case of error, or null; eof - true | false. called when whole operation is complete.
 * @return {void}
 */
tsickle_declare_module.firebird.FBResult.prototype.fetch = function(rowCount, asObject, rowCallback, eofCallback) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.firebird.Transaction = function() {};
 /** @type {boolean} */
tsickle_declare_module.firebird.Transaction.prototype.inTransaction;

/**
 * Executes SQL query in context of this transaction. Returns FBResult object in case of success. Raises error otherwise.
 * 
 * @param {string} sql an SQL query to execute.
 * @return {void}
 */
tsickle_declare_module.firebird.Transaction.prototype.querySync = function(sql) {};

/**
 * Asynchronously executes query in context of this transaction.
 * 
 * @param {string} sql an SQL query to execute.
 * @param {function(!Error, !FBResult): void} callback err - is error object or null, res - FBResult object.
 * @return {void}
 */
tsickle_declare_module.firebird.Transaction.prototype.query = function(sql, callback) {};

/**
 * Synchronously commits this transaction.
 * 
 * @desc 
 * Notes:
 * Transacation is automatically started before any query in context of this object
 * if this object does not have active transaction (check inTransaction property).
 * You also should note that DDL statements (altering database structure) are commited automatically.
 * @return {void}
 */
tsickle_declare_module.firebird.Transaction.prototype.commitSync = function() {};

/**
 * Asynchronous commit transaction.
 * 
 * @desc 
 * Read notes in \@see commitSync() .
 * 
 * @param {function(!Error): void} callback function(err), where err is error object in case of error.
 * @return {void}
 */
tsickle_declare_module.firebird.Transaction.prototype.commit = function(callback) {};

/**
 * Synchronously rollbacks transaction.
 * 
 * @desc 
 * Read notes in \@see commitSync() .
 * @return {void}
 */
tsickle_declare_module.firebird.Transaction.prototype.rollbackSync = function() {};

/**
 * Asynchronously rollbacks transaction.
 * 
 * @desc 
 * Read notes in \@see commitSync() .
 * 
 * @param {function(!Error): void} callback function(err), where err is error object in case of error.
 * @return {void}
 */
tsickle_declare_module.firebird.Transaction.prototype.rollback = function(callback) {};

/**
 * Synchronously starts transaction.
 * 
 * @desc 
 * The transaction should be not in started state before call to this method.
 * Read notes in \@see commitSync() .
 * See \@see inTransaction property.
 * @return {void}
 */
tsickle_declare_module.firebird.Transaction.prototype.startSync = function() {};

/**
 * Asynchronously starts new transaction.
 * 
 * @desc 
 * Read notes in \@see commitSync() .
 * 
 * @param {function(!Error): void} callback function(err), where err is error object in case of error.
 * @return {void}
 */
tsickle_declare_module.firebird.Transaction.prototype.start = function(callback) {};

/**
 * Synchronously prepares SQL statement
 * 
 * @param {string} sql an SQL query to prepare.
 * @return {!FBStatement} \@see FBStatement object in context of this transaction.
 */
tsickle_declare_module.firebird.Transaction.prototype.prepareSync = function(sql) {};
/**
 * @extends {FBResult}
 * @constructor
 * @struct
 */
tsickle_declare_module.firebird.FBStatement = function() {};

/**
 * Synchronously executes prepared statement with given parameters.
 * 
 * @desc 
 * You may fetch rows with methods inherited from \@see FBResult.
 * @see Statement is executed in context of default connection transaction.
 * 
 * @param {...(string|number|!FBBlob|!Date)} params parameters of prepared statement in the same order as in SQL and with appropriate types.
 * @return {void}
 */
tsickle_declare_module.firebird.FBStatement.prototype.execSync = function(params) {};

/**
 * Same as \@see execSync but executes statement in context of given \@see Transaction obejct.
 * 
 * @param {!Transaction} transaction
 * @param {...(string|number|!FBBlob|!Date)} params
 * @return {void}
 */
tsickle_declare_module.firebird.FBStatement.prototype.execInTransSync = function(transaction, params) {};

/**
 * Asynchronously executes prepared statement with given parameters.
 * 
 * @desc
 * @see FBStatement emits 'result' or 'error' event.
 * You may fetch rows with methods inherited from \@see FBResult after 'result' event emitted.
 * Statement is executed in context of default connection transaction.
 * 
 * @param {...(string|number|!FBBlob|!Date)} params parameters of prepared statement in the same order as in SQL and with appropriate types.
 * @return {void}
 */
tsickle_declare_module.firebird.FBStatement.prototype.exec = function(params) {};

/**
 * Same as \@see exec but executes statement in context of given \@see Transaction obejct.
 * 
 * @param {!Transaction} transaction
 * @param {...(string|number|!FBBlob|!Date)} params
 * @return {void}
 */
tsickle_declare_module.firebird.FBStatement.prototype.execInTrans = function(transaction, params) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.firebird.FBBlob = function() {};

/**
 * Synchronously opens blob for reading.
 * @return {void}
 */
tsickle_declare_module.firebird.FBBlob.prototype._openSync = function() {};

/**
 * Synchronously closes previously opened blob.
 * @return {void}
 */
tsickle_declare_module.firebird.FBBlob.prototype._closeSync = function() {};

/**
 * Synchronously reads BLOB segment (chunk) into buffer. Tries to fill whole buffer with data.
 * 
 * @param {?} buffer Node buffer to fill with data.
 * @return {number} actual number of bytes read.
 */
tsickle_declare_module.firebird.FBBlob.prototype._readSync = function(buffer) {};

/**
 * Asynchronously reads BLOB segment (chunk) into buffer. Tries to fill whole buffer with data.
 * 
 * @param {?} buffer Node buffer to fill with data.
 * @param {function(!Error, ?, number): void} callback function(err,buffer,len), err - Error object in case of error, or null;buffer - buffer filled with data; len - actual data length.
 * @return {void}
 */
tsickle_declare_module.firebird.FBBlob.prototype._read = function(buffer, callback) {};

/**
 * Asynchronously reads all data from BLOB field.
 * Object emits events while reading data error, drain',end`.
 * 
 * @param {number|function(!Error, ?, number): void=} initialSize_or_callback - optional, initial result buffer to allocate, default = 0
 * @param {number|function(!Error, ?, number): void=} chunkSize_or_callback - optional, size of chunk used to read data, default = 1024
 * @param {function(!Error, ?, number): void=} callback - optional, function (err, buffer, len), err - Error object in case of error, or null;buffer - buffer filled with data; len - actual data length.
 * @return {void}
 */
tsickle_declare_module.firebird.FBBlob.prototype._readAll = function(initialSize_or_callback, chunkSize_or_callback, callback) {};

/**
 * Synchronously writes BLOB segment (chunk) from buffer.
 * 
 * @param {?} buffer Node buffer to write from to blob;
 * @param {number=} len optional length parameter, if specified only len bytes from buffer will be writen.
 * @return {number} number of bytes actually writen.
 */
tsickle_declare_module.firebird.FBBlob.prototype._writeSync = function(buffer, len) {};

/**
 * Asynchronously writes BLOB segment (chunk) from buffer and calls callback function if any.
 * 
 * @param {?} buffer Node buffer to write from to blob;
 * @param {number=} len optional length parameter, if specified only len bytes from buffer will be writen.
 * @param {function(!Error): void=} callback function(err), err - Error object in case of error, or null;
 * @return {void}
 */
tsickle_declare_module.firebird.FBBlob.prototype._write = function(buffer, len, callback) {};

/**
 * @constructor
 * @struct
 * @param {!FBBlob} blob
 */
tsickle_declare_module.firebird.Stream = function(blob) {};
 /** @type {boolean} */
tsickle_declare_module.firebird.Stream.prototype.readable;
 /** @type {boolean} */
tsickle_declare_module.firebird.Stream.prototype.writable;

/**
 * @param {number=} size
 * @return {(string|?)}
 */
tsickle_declare_module.firebird.Stream.prototype.read = function(size) {};

/**
 * @param {string} encoding
 * @return {Stream}
 */
tsickle_declare_module.firebird.Stream.prototype.setEncoding = function(encoding) {};

/**
 * @return {Stream}
 */
tsickle_declare_module.firebird.Stream.prototype.pause = function() {};

/**
 * @return {Stream}
 */
tsickle_declare_module.firebird.Stream.prototype.resume = function() {};

/**
 * @return {boolean}
 */
tsickle_declare_module.firebird.Stream.prototype.isPaused = function() {};

/**
 * @template T
 * @param {T} destination
 * @param {{end: boolean}=} options
 * @return {T}
 */
tsickle_declare_module.firebird.Stream.prototype.pipe = function(destination, options) {};

/**
 * @template T
 * @param {T=} destination
 * @return {Stream}
 */
tsickle_declare_module.firebird.Stream.prototype.unpipe = function(destination) {};

/**
 * @param {string|?} chunk
 * @return {void}
 */
tsickle_declare_module.firebird.Stream.prototype.unshift = function(chunk) {};

/**
 * @param {!NodeJS.ReadableStream} oldStream
 * @return {!NodeJS.ReadableStream}
 */
tsickle_declare_module.firebird.Stream.prototype.wrap = function(oldStream) {};

/**
 * @param {(string|?)|string} buffer_or_str
 * @param {!Function|string=} cb_or_encoding
 * @param {!Function=} cb
 * @return {boolean}
 */
tsickle_declare_module.firebird.Stream.prototype.write = function(buffer_or_str, cb_or_encoding, cb) {};

/**
 * @param {?|string=} buffer_or_str
 * @param {!Function|string=} cb_or_encoding
 * @param {!Function=} cb
 * @return {void}
 */
tsickle_declare_module.firebird.Stream.prototype.end = function(buffer_or_str, cb_or_encoding, cb) {};

/**
 * @param {(string|symbol)} event
 * @param {!Function} listener
 * @return {Stream}
 */
tsickle_declare_module.firebird.Stream.prototype.addListener = function(event, listener) {};

/**
 * @param {(string|symbol)} event
 * @param {!Function} listener
 * @return {Stream}
 */
tsickle_declare_module.firebird.Stream.prototype.on = function(event, listener) {};

/**
 * @param {(string|symbol)} event
 * @param {!Function} listener
 * @return {Stream}
 */
tsickle_declare_module.firebird.Stream.prototype.once = function(event, listener) {};

/**
 * @param {(string|symbol)} event
 * @param {!Function} listener
 * @return {Stream}
 */
tsickle_declare_module.firebird.Stream.prototype.removeListener = function(event, listener) {};

/**
 * @param {(string|symbol)=} event
 * @return {Stream}
 */
tsickle_declare_module.firebird.Stream.prototype.removeAllListeners = function(event) {};

/**
 * @param {number} n
 * @return {Stream}
 */
tsickle_declare_module.firebird.Stream.prototype.setMaxListeners = function(n) {};

/**
 * @return {number}
 */
tsickle_declare_module.firebird.Stream.prototype.getMaxListeners = function() {};

/**
 * @param {(string|symbol)} event
 * @return {!Array<!Function>}
 */
tsickle_declare_module.firebird.Stream.prototype.listeners = function(event) {};

/**
 * @param {(string|symbol)} event
 * @param {...?} args
 * @return {boolean}
 */
tsickle_declare_module.firebird.Stream.prototype.emit = function(event, args) {};

/**
 * @param {(string|symbol)} type
 * @return {number}
 */
tsickle_declare_module.firebird.Stream.prototype.listenerCount = function(type) {};

/**
 * @param {(string|symbol)} event
 * @param {!Function} listener
 * @return {Stream}
 */
tsickle_declare_module.firebird.Stream.prototype.prependListener = function(event, listener) {};

/**
 * @param {(string|symbol)} event
 * @param {!Function} listener
 * @return {Stream}
 */
tsickle_declare_module.firebird.Stream.prototype.prependOnceListener = function(event, listener) {};

/**
 * @return {!Array<(string|symbol)>}
 */
tsickle_declare_module.firebird.Stream.prototype.eventNames = function() {};
