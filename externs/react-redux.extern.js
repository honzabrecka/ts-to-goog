/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/react-redux/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/** @typedef {!React.ComponentClass<?>} */
var ComponentClass;

/** @typedef {!React.StatelessComponent<?>} */
var StatelessComponent;

/** @typedef {(!React.ComponentClass<?>|!React.StatelessComponent<?>)} */
var Component;

/** @typedef {(string|number|boolean|!Object|!React.ReactElement<?>|!Array<(string|number|boolean|!Array<?>|!React.ReactElement<?>)>)} */
var ReactNode;

/** @typedef {?} */
var Store;

/** @typedef {?} */
var Dispatch;

/** @typedef {?} */
var ActionCreator;

/** @typedef {?} */
var Diff;

/** @typedef {?} */
var Omit;
/**
 * @record
 * @struct
 */
function DispatchProp() {}
 /** @type {?} */
DispatchProp.prototype.dispatch;
/**
 * @record
 * @struct
 */
function AdvancedComponentDecorator() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function InferableComponentEnhancerWithProps() {}

/* TODO: CallSignature:  */

/** @typedef {?} */
var InferableComponentEnhancer;

/**
 * Connects a React component to a Redux store.
 * 
 * - Without arguments, just wraps the component, without changing the behavior / props
 * 
 * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior
 * is to override ownProps (as stated in the docs), so what remains is everything that's
 * not a state or dispatch prop
 * 
 * - When 3rd param is passed, we don't know if ownProps propagate and whether they
 * should be valid component props, because it depends on mergeProps implementation.
 * As such, it is the user's responsibility to extend ownProps interface from state or
 * dispatch props or both when applicable
 * 
 * @template TStateProps, no_dispatch, TOwnProps, no_state, TDispatchProps, TMergedProps
 * @param {?|null=} mapStateToProps
 * @param {?|null=} mapDispatchToProps
 * @param {?|null=} mergeProps
 * @param {?=} options
 * @return {?}
 */
function connect(mapStateToProps, mapDispatchToProps, mergeProps, options) {}
/**
 * @record
 * @struct
 */
function MapStateToProps() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function MapStateToPropsFactory() {}

/* TODO: CallSignature:  */

/** @typedef {?} */
var MapStateToPropsParam;
/**
 * @record
 * @struct
 */
function MapDispatchToPropsFunction() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function MapDispatchToPropsObject() {}

/* TODO: IndexSignature:  */

/** @typedef {?} */
var MapDispatchToProps;
/**
 * @record
 * @struct
 */
function MapDispatchToPropsFactory() {}

/* TODO: CallSignature:  */

/** @typedef {?} */
var MapDispatchToPropsParam;
/**
 * @record
 * @struct
 */
function MergeProps() {}

/* TODO: CallSignature:  */
/**
 * @extends {ConnectOptions}
 * @record
 * @struct
 */
function Options() {}
 /** @type {boolean} */
Options.prototype.pure;
 /** @type {boolean} */
Options.prototype.withRef;

/**
 * Connects a React component to a Redux store. It is the base for {\@link connect} but is less opinionated about
 * how to combine <code>state</code>, <code>props</code>, and <code>dispatch</code> into your final props. It makes no
 * assumptions about defaults or memoization of results, leaving those responsibilities to the caller.It does not
 * modify the component class passed to it; instead, it returns a new, connected component class for you to use.
 * 
 * @template S, TProps, TOwnProps, TFactoryOptions
 * @param {?} selectorFactory The selector factory. See {\@type SelectorFactory} for details.
 * @param {?=} connectOptions If specified, further customizes the behavior of the connector. Additionally, any extra
 *     options will be passed through to your <code>selectorFactory</code> in the <code>factoryOptions</code> argument.
 * @return {?}
 */
function connectAdvanced(selectorFactory, connectOptions) {}
/**
 * @record
 * @struct
 */
function SelectorFactory() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function Selector() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ConnectOptions() {}
 /** @type {?} */
ConnectOptions.prototype.getDisplayName;
 /** @type {string} */
ConnectOptions.prototype.methodName;
 /** @type {string} */
ConnectOptions.prototype.renderCountProp;
 /** @type {boolean} */
ConnectOptions.prototype.shouldHandleStateChanges;
 /** @type {string} */
ConnectOptions.prototype.storeKey;
 /** @type {boolean} */
ConnectOptions.prototype.withRef;
/**
 * @record
 * @struct
 */
function ProviderProps() {}
 /** @type {?} */
ProviderProps.prototype.store;
 /** @type {(string|number|boolean|!Object|!React.ReactElement<?>|!Array<(string|number|boolean|!Array<?>|!React.ReactElement<?>)>)} */
ProviderProps.prototype.children;
/**
 * @constructor
 * @struct
 */
function Provider() {}
