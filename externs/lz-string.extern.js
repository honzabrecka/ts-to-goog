/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/lz-string/index.d.ts:
 /** @type {!LZString.LZStringStatic} */
var LZString;

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
/**
 * @record
 * @struct
 */
LZString.LZStringStatic = function() {};

/**
 * Compresses input string producing an instance of an "invalid" UTF-16 string.
 * Such string could be stored in localStorage only on webkit
 * browsers (tested on Android, Chrome, Safari).
 * 
 * @param {string} uncompressed A string which should be compressed.
 * @return {string}
 */
LZString.LZStringStatic.prototype.compress = function(uncompressed) {};

/**
 * Decompresses "invalid" input string created by the method compress().
 * 
 * @param {string} compressed A string obtained from a call to compress().
 * @return {string}
 */
LZString.LZStringStatic.prototype.decompress = function(compressed) {};

/**
 * Compresses input string producing an instance of a "valid" UTF-16 string,
 * in the sense that all browsers can store them safely.
 * 
 * @param {string} uncompressed A string which should be compressed.
 * @return {string}
 */
LZString.LZStringStatic.prototype.compressToUTF16 = function(uncompressed) {};

/**
 * Decompresses "valid" input string created by the method compressToUTF16().
 * 
 * @param {string} compressed A string obtained from a call to compressToUTF16().
 * @return {string}
 */
LZString.LZStringStatic.prototype.decompressFromUTF16 = function(compressed) {};

/**
 * Compresses input string producing an instance of a ASCII UTF-16 string,
 * which represents the original string encoded in Base64.
 * The result can be safely transported outside the browser with a
 * guarantee that none of the characters produced need to be URL-encoded.
 * 
 * @param {string} uncompressed A string which should be compressed.
 * @return {string}
 */
LZString.LZStringStatic.prototype.compressToBase64 = function(uncompressed) {};

/**
 * Decompresses ASCII UTF-16 input string created by the method compressToBase64().
 * 
 * @param {string} compressed A string obtained from a call to compressToBase64().
 * @return {string}
 */
LZString.LZStringStatic.prototype.decompressFromBase64 = function(compressed) {};

/**
 * produces ASCII strings representing the original string encoded in Base64 with a few
 * tweaks to make these URI safe. Hence, you can send them to the server without thinking
 * about URL encoding them. This saves bandwidth and CPU
 * 
 * @param {string} uncompressed A string which should be compressed.
 * @return {string}
 */
LZString.LZStringStatic.prototype.compressToEncodedURIComponent = function(uncompressed) {};

/**
 * Decompresses "valid" input string created by the method compressToEncodedURIComponent().
 * 
 * @param {string} compressed A string obtained from a call to compressToEncodedURIComponent().
 * @return {string}
 */
LZString.LZStringStatic.prototype.decompressFromEncodedURIComponent = function(compressed) {};

/**
 * produces an uint8Array
 * 
 * @param {string} uncompressed A string which should be compressed.
 * @return {!Uint8Array}
 */
LZString.LZStringStatic.prototype.compressToUint8Array = function(uncompressed) {};

/**
 * Decompresses "valid" array created by the method compressToUint8Array().
 * 
 * @param {!Uint8Array} compressed A string obtained from a call to compressToUint8Array().
 * @return {string}
 */
LZString.LZStringStatic.prototype.decompressFromUint8Array = function(compressed) {};
