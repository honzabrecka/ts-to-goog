/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/mpromise/index.d.ts:
/**
 * @record
 * @struct
 */
function IFulfillFunction() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function IRejectFunction() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function IResolveFunction() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/**
 * @constructor
 * @struct
 * @param {?=} fn
 */
function Promise(fn) {}
 /** @type {string} */
Promise.FAILURE;
 /** @type {string} */
Promise.SUCCESS;

/**
 * @param {...F} args_or_arg
 * @return {!Promise}
 */
Promise.prototype.fulfill = function(args_or_arg) {};

/**
 * @param {R} reason
 * @return {!Promise}
 */
Promise.prototype.reject = function(reason) {};

/**
 * @param {R} reason
 * @param {...F} args_or_arg
 * @return {!Promise}
 */
Promise.prototype.resolve = function(reason, args_or_arg) {};

/**
 * @param {?} callback
 * @return {!Promise}
 */
Promise.prototype.onFulfill = function(callback) {};

/**
 * @param {?} callback
 * @return {!Promise}
 */
Promise.prototype.onReject = function(callback) {};

/**
 * @param {?} callback
 * @return {!Promise}
 */
Promise.prototype.onResolve = function(callback) {};

/**
 * @template F, R
 * @param {?} onFulfilled
 * @param {?=} onRejected
 * @return {!Promise<F, R>}
 */
Promise.prototype.then = function(onFulfilled, onRejected) {};

/**
 * @return {void}
 */
Promise.prototype.end = function() {};

/**
 * @param {!Promise} promise
 * @return {!Promise}
 */
Promise.prototype.chain = function(promise) {};

/* TODO: ExportAssignment in  */
