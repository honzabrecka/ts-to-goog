/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/stampit/index.d.ts:
/**
 * @record
 * @struct
 */
function Init() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function Context() {}
 /** @type {?} */
Context.prototype.instance;
 /** @type {!Stamp} */
Context.prototype.stamp;
 /** @type {!Array<?>} */
Context.prototype.args;
/**
 * @record
 * @struct
 */
function Fixed() {}
 /** @type {!Object} */
Fixed.prototype.methods;
 /** @type {!Object} */
Fixed.prototype.state;
 /** @type {!Object} */
Fixed.prototype.refs;
 /** @type {!Array<!Init>} */
Fixed.prototype.enclose;
 /** @type {!Array<!Init>} */
Fixed.prototype.init;
 /** @type {!Object} */
Fixed.prototype.props;
 /** @type {!Object} */
Fixed.prototype.static;
/**
 * @record
 * @struct
 */
function Options() {}
 /** @type {(!Object|!Array<?>)} */
Options.prototype.methods;
 /** @type {(!Object|!Array<?>)} */
Options.prototype.refs;
 /** @type {(!Init|!Array<!Init>)} */
Options.prototype.init;
 /** @type {(!Object|!Array<?>)} */
Options.prototype.props;
 /** @type {(!Object|!Array<?>)} */
Options.prototype.static;
/**
 * @record
 * @struct
 */
function Stamp() {}

/* TODO: CallSignature:  */
 /** @type {!Fixed} */
Stamp.prototype.fixed;

/**
 * Just like calling stamp(), stamp.create() invokes the stamp and returns a new instance.
 * @param {!Object=} state Properties you wish to set on the new objects.
 * @param {...?} encloseArgs The remaining arguments are passed to all .enclose() functions.
 * WARNING Avoid using two different .enclose() functions that expect different arguments.
 * .enclose() functions that take arguments should not be considered safe to compose
 * with other .enclose() functions that also take arguments. Taking arguments with
 * an .enclose() function is an anti-pattern that should be avoided, when possible.
 * @return {?} A new object composed of the Stamps and prototypes provided.
 */
Stamp.prototype.create = function(state, encloseArgs) {};

/**
 * Add methods to the methods prototype.  Creates and returns new Stamp. Chainable.
 * @param {...!Object} methods Object(s) containing map of method names and bodies for delegation.
 * @return {!Stamp} A new Stamp.
 */
Stamp.prototype.methods = function(methods) {};

/**
 * Take n objects and add them to the state prototype. Creates and returns new Stamp. Chainable.
 * @param {...!Object} states Object(s) containing map of property names and values to clone for each new object.
 * @return {!Stamp} A new Stamp.
 */
Stamp.prototype.refs = function(states) {};

/**
 * Take n objects and merge them (but safely, no data override) to the of any future created instance.
 * Creates and returns new Stamp. Chainable.
 * @param {...!Object} objects Object(s) to merge for each new object.
 * @return {!Stamp} A new Stamp.
 */
Stamp.prototype.props = function(objects) {};

/**
 * @deprecated Use .refs() instead.
 * @param {...!Object} states
 * @return {!Stamp}
 */
Stamp.prototype.state = function(states) {};

/**
 * @deprecated Use .init() instead.
 * @param {...!Init|!Object} functions
 * @return {!Stamp}
 */
Stamp.prototype.enclose = function(functions) {};

/**
 * Take n functions, an array of functions, or n objects and add the functions to the enclose prototype.
 * Functions passed into .enclose() are called any time an object is instantiated.
 * That happens when the stamp function is invoked, or when the .create() method is called.
 * Creates and returns new Stamp. Chainable.
 * Take n functions, an array of functions, or n objects and add the functions to the enclose prototype.
 * Functions passed into .enclose() are called any time an object is instantiated.
 * That happens when the stamp function is invoked, or when the .create() method is called.
 * Creates and returns new Stamp. Chainable.
 * @param {...!Init|!Object} functions Closures (functions) used to create private data and privileged methods. / Function properties of these objects will be treated as closure functions.
 * @return {!Stamp} A new Stamp.
 */
Stamp.prototype.init = function(functions) {};

/**
 * Take n objects and add them to a new stamp and any future stamp it composes with.
 * Creates and returns new Stamp. Chainable.
 * @param {...!Object} statics Object(s) containing map of property names and values to mixin into each new stamp.
 * @return {!Stamp} A new Stamp.
 */
Stamp.prototype.static = function(statics) {};

/**
 * Take one or more Stamps and
 * combine them with `this` to produce and return a new Stamp.
 * Combining overrides properties with last-in priority.
 * NOT chainable.
 * @param {...!Stamp} stamps Stampit factories, aka Stamps.
 * @return {!Stamp} A new Stamp composed from arguments and `this`.
 */
Stamp.prototype.compose = function(stamps) {};

/**
 * Return a factory (akaStamp) function that will produce new objects using the
 * prototypes that are passed in or composed.
 * 
 * @param {!Options=} options
 * @return {!Stamp}
 */
function stampit(options) {}

/**
 * A shortcut methods for stampit().methods()
 * @param {...!Object} methods Object(s) containing map of method names and bodies for delegation.
 * @return {!Stamp} A new Stamp.
 */
stampit.methods = function(methods) {};

/**
 * A shortcut methods for stampit().refs()
 * @param {...!Object} states Object(s) containing map of property names and values to clone for each new object.
 * @return {!Stamp} A new Stamp.
 */
stampit.refs = function(states) {};

/**
 * A shortcut methods for stampit().props()
 * @param {...!Object} states Object(s) to merge for each new object.
 * @return {!Stamp} A new Stamp.
 */
stampit.props = function(states) {};

/**
 * A shortcut methods for stampit().init()
 * @param {...!Init} functions Closures (functions) used to create private data and privileged methods.
 * @return {!Stamp} A new Stamp.
 */
stampit.init = function(functions) {};

/**
 * A shortcut methods for stampit().static()
 * @param {...!Object} statics Object(s) containing map of property names and values to mixin into each new stamp (NOT OBJECT).
 * @return {!Stamp} A new Stamp.
 */
stampit.static = function(statics) {};

/**
 * Take two or more Stamps and combine them to produce a new Stamp.
 * Combining overrides properties with last-in priority.
 * @param {...!Stamp} stamps Stamps produced by stampit.
 * @return {!Stamp} A new Stamp made of all the given.
 */
stampit.compose = function(stamps) {};

/**
 * Take a destination object followed by one or more source objects,
 * and copy the source object properties to the destination object,
 * with last in priority overrides.
 * @param {?} destination An object to copy properties to.
 * @param {...?} source Objects to copy properties from.
 * @return {?} The destination object.
 */
stampit.mixin = function(destination, source) {};

/**
 * Alias for mixin()
 * @param {?} destination
 * @param {...?} source
 * @return {?}
 */
stampit.mixIn = function(destination, source) {};

/**
 * Alias for mixin()
 * @param {?} destination
 * @param {...?} source
 * @return {?}
 */
stampit.extend = function(destination, source) {};

/**
 * Alias for mixin()
 * @param {?} destination
 * @param {...?} source
 * @return {?}
 */
stampit.assign = function(destination, source) {};

/**
 * Check if an object is a Stamp.
 * @param {?} obj An object to check.
 * @return {boolean} true if the object is a Stamp; otherwise - false.
 */
stampit.isStamp = function(obj) {};

/**
 * Take an old-fashioned JS constructor and return a Stamp
 * that you can freely compose with other Stamps.
 * @param {?} Constructor Old-fashioned constructor function.
 * @return {!Stamp} A new Stamp based on the given constructor.
 */
stampit.convertConstructor = function(Constructor) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "stampit"
/** @const */
tsickle_declare_module.stampit = {};

/* TODO: ExportAssignment in tsickle_declare_module.stampit */
