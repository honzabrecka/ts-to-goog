/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/decorum/index.d.ts:

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
/** @const */
var decorum = {};

/**
 * A generic custom validation. Takes a predicate that will receive the proposed value as the first parameter and
 * the current model state as the second.
 * @template TModel
 * @param {(string|!decorum.MessageHandler<!decorum.CustomValidator<TModel>>)} message The message to display when the predicate fails.
 * @param {function(?, TModel): boolean} predicate A lambda expression/function that determines if the value is valid. If it returns a falsy
 *     value, the field will be considered invalid and will return the passed error message upon validation.
 * @return {function(!Object, (string|symbol)): void}
 */
decorum.Validation = function(message, predicate) {};

/**
 * Validate's that the field is a valid email address. The format used is the same as the webkit browser's internal
 * email validation format. For looser or stricter formats, use your own validation based on the \@Pattern decorator.
 * @param {(string|!decorum.MessageHandler<!decorum.EmailValidator>)=} message [Optional] Overrides the default validation error message.
 * @return {function(!Object, (string|symbol)): void}
 */
decorum.Email = function(message) {};

/**
 * Sets the field's "friendly" name in validation error messages.
 * @param {string} name The field's friendly name
 * @return {function(!Object, (string|symbol)): void}
 */
decorum.FieldName = function(name) {};

/**
 * Validate's a field's EXACT length. Validation fails if the field is not EXACTLY the length passed.
 * @param {number} length The exact length the field must be.
 * @param {(string|!decorum.MessageHandler<!decorum.LengthValidator>)=} message [Optional] Overrides the default validation error message.
 * @return {function(!Object, (string|symbol)): void}
 */
decorum.Length = function(length, message) {};

/**
 * Validates a field's maximum length.
 * @param {number} maxLength The field's maximum length. Must be a positive integer greater than 1.
 * @param {(string|!decorum.MessageHandler<!decorum.MaxLengthValidator>)=} message [Optional] Overrides the default validation error message.
 * @return {function(!Object, (string|symbol)): void}
 */
decorum.MaxLength = function(maxLength, message) {};

/**
 * Validates the field's minimum length.
 * @param {number} minLength The field's minimum length. Must be a positive integer greater than 0
 * @param {(string|!decorum.MessageHandler<!decorum.MinLengthValidator>)=} message [Optional] Overrides the default validation error message.
 * @return {function(!Object, (string|symbol)): void}
 */
decorum.MinLength = function(minLength, message) {};

/**
 * Validates the field against a regular expression pattern.
 * @param {!RegExp} regex The regex to validate against. Should be a valid JavaScript {RegExp} instance.
 * @param {(string|!decorum.MessageHandler<!decorum.PatternValidator>)=} message [Optional] Overrides the default validation error message.
 * @return {function(!Object, (string|symbol)): void}
 */
decorum.Pattern = function(regex, message) {};

/**
 * Marks the field as required.
 * @param {(string|!decorum.MessageHandler<!decorum.RequiredFieldValidator>)=} message [Optional] Overrides the default validation error message.
 * @return {function(!Object, (string|symbol)): void}
 */
decorum.Required = function(message) {};

/**
 * Validates that a given field only contains alpha values.
 * @param {(string|!decorum.MessageHandler<!decorum.PatternValidator>)=} message [Optional] Overrides the default validation error message.
 * @return {function(!Object, (string|symbol)): void}
 */
decorum.Alpha = function(message) {};

/**
 * Validates that a given field only contains alphanumeric values.
 * @param {(string|!decorum.MessageHandler<!decorum.PatternValidator>)=} message [Optional] Overrides the default validation error message.
 * @return {function(!Object, (string|symbol)): void}
 */
decorum.AlphaNumeric = function(message) {};

/** @typedef {!Object<string,!Array<function(!Object, (string|symbol)): void>>} */
decorum.ValidationDefinitions;
/**
 * @constructor
 * @struct
 */
decorum.Validator = function() {};

/**
 * Creates a new model validator for the given model. Model should be a valid class that has a valid constructor
 * and a prototype.
 * @param {?} model The model to create the validator for.
 * @return {!decorum.ModelValidator}
 */
decorum.Validator.new = function(model) {};

/**
 * Decorates the passed class with model validations. Use this when you do not have access to ES7 decorators.
 * The object passed should be a valid class (ES6 class or ES5 function constructor).
 * @param {?} objectType The class to decorate.
 * @param {!Object<string,!Array<function(!Object, (string|symbol)): void>>} definitions One or more field validation definitions of the form { "fieldName": [ decorators ] }.
 * @return {void}
 */
decorum.Validator.decorate = function(objectType, definitions) {};

/**
 * Creates an anonymous validator, immediately validates the model, and returns any validation errors on the
 * model as a result.
 * @param {?} model The model to validate.
 * @return {!decorum.IValidationResult}
 */
decorum.Validator.validate = function(model) {};

/**
 * Adds a validator to the given object prototype for the given property. Meant to be used inside of validation
 * decorators to inject the validation onto the object property.
 * @param {!Object} targetPrototype A valid object prototype to add to.
 * @param {string} property The property to add the validator for.
 * @param {!decorum.BaseValidator} validator The validator to add.
 * @return {void}
 */
decorum.Validator.addValidator = function(targetPrototype, property, validator) {};
/**
 * @record
 * @struct
 */
decorum.IFieldValidationError = function() {};
 /** @type {string} */
decorum.IFieldValidationError.prototype.field;
 /** @type {string} */
decorum.IFieldValidationError.prototype.fieldName;
 /** @type {!Array<string>} */
decorum.IFieldValidationError.prototype.errors;
/**
 * @record
 * @struct
 */
decorum.IValidationResult = function() {};
 /** @type {boolean} */
decorum.IValidationResult.prototype.isValid;
 /** @type {!Array<!decorum.IFieldValidationError>} */
decorum.IValidationResult.prototype.errors;

/**
 * @constructor
 * @struct
 * Creates a new model validator.
 * @param {?} model The model to validate. Should be a class that has a valid constructor function and prototype.
 */
decorum.ModelValidator = function(model) {};

/**
 * Gets the validation options for the given field name.
 * @param {string} fieldKey         The name of the field to get options for.
 * for the field.
 * @return {!decorum.FieldOptions}
 */
decorum.ModelValidator.prototype.getValidationOptions = function(fieldKey) {};

/**
 * Validates the given field on this {ModelValidator}'s model. If a proposed value is passed, validate
 * against that passed value; otherwise, use the field's current value on the model.
 * @param {string} fieldKey      The name of the field to validate.
 * @param {?=} proposedValue [Optional] The proposed value to set on the field.
 * an empty array.
 * @return {!Array<string>}
 */
decorum.ModelValidator.prototype.validateField = function(fieldKey, proposedValue) {};

/**
 * Validate the entire model and return a result that indicates whether the model is valid or not and any
 * errors
 * that have occurred in an object indexed by field name on the model.
 *     name.
 * @return {!decorum.IValidationResult}
 */
decorum.ModelValidator.prototype.validate = function() {};
/**
 * @record
 * @struct
 */
decorum.MessageHandler = function() {};

/* TODO: CallSignature: decorum */
/**
 * @record
 * @struct
 */
decorum.IMessageOpts = function() {};
 /** @type {string} */
decorum.IMessageOpts.prototype.property;
 /** @type {string} */
decorum.IMessageOpts.prototype.friendlyName;
 /** @type {string} */
decorum.IMessageOpts.prototype.value;
/**
 * @record
 * @struct
 */
decorum.IMessageHandlerMap = function() {};

/* TODO: IndexSignature: decorum */
 /** @type {!decorum.IMessageHandlerMap} */
decorum.MessageHandlers;

/**
 * @constructor
 * @struct
 * @param {function(?, TModel): boolean} predicate
 * @param {(string|!decorum.MessageHandler<!decorum.CustomValidator>)} message
 */
decorum.CustomValidator = function(predicate, message) {};

/**
 * @param {!decorum.IMessageOpts} opts
 * @return {string}
 */
decorum.CustomValidator.prototype.getMessage = function(opts) {};

/**
 * @param {?} value
 * @param {?} model
 * @return {boolean}
 */
decorum.CustomValidator.prototype.isValid = function(value, model) {};

/**
 * @constructor
 * @struct
 * @param {(string|!decorum.MessageHandler<!decorum.EmailValidator>)=} message
 */
decorum.EmailValidator = function(message) {};
 /** @type {!RegExp} */
decorum.EmailValidator.EmailRegex;

/**
 * @param {!decorum.IMessageOpts} opts
 * @return {string}
 */
decorum.EmailValidator.prototype.getMessage = function(opts) {};

/**
 * @return {string}
 */
decorum.EmailValidator.prototype.getKey = function() {};

/**
 * @constructor
 * @struct
 * @param {number} length
 * @param {(string|!decorum.MessageHandler<!decorum.LengthValidator>)=} message
 */
decorum.LengthValidator = function(length, message) {};
 /** @type {number} */
decorum.LengthValidator.prototype.length;

/**
 * @param {!decorum.IMessageOpts} opts
 * @return {string}
 */
decorum.LengthValidator.prototype.getMessage = function(opts) {};

/**
 * @param {?} value
 * @return {boolean}
 */
decorum.LengthValidator.prototype.isValid = function(value) {};

/**
 * @constructor
 * @struct
 * @param {number} maxLength
 * @param {(string|!decorum.MessageHandler<!decorum.MaxLengthValidator>)=} message
 */
decorum.MaxLengthValidator = function(maxLength, message) {};
 /** @type {number} */
decorum.MaxLengthValidator.prototype.maxLength;

/**
 * @param {!decorum.IMessageOpts} opts
 * @return {string}
 */
decorum.MaxLengthValidator.prototype.getMessage = function(opts) {};

/**
 * @param {string} value
 * @return {boolean}
 */
decorum.MaxLengthValidator.prototype.isValid = function(value) {};

/**
 * @constructor
 * @struct
 * @param {number} minLength
 * @param {(string|!decorum.MessageHandler<!decorum.MinLengthValidator>)=} message
 */
decorum.MinLengthValidator = function(minLength, message) {};
 /** @type {number} */
decorum.MinLengthValidator.prototype.minLength;

/**
 * @param {!decorum.IMessageOpts} opts
 * @return {string}
 */
decorum.MinLengthValidator.prototype.getMessage = function(opts) {};

/**
 * @param {string} value
 * @return {boolean}
 */
decorum.MinLengthValidator.prototype.isValid = function(value) {};

/**
 * @constructor
 * @struct
 * @param {!RegExp} pattern
 * @param {(string|!decorum.MessageHandler<!decorum.PatternValidator>)=} message
 */
decorum.PatternValidator = function(pattern, message) {};
 /** @type {!RegExp} */
decorum.PatternValidator.prototype.pattern;

/**
 * @param {!decorum.IMessageOpts} opts
 * @return {string}
 */
decorum.PatternValidator.prototype.getMessage = function(opts) {};

/**
 * @param {?} value
 * @return {boolean}
 */
decorum.PatternValidator.prototype.isValid = function(value) {};

/**
 * @constructor
 * @struct
 * @param {(string|!decorum.MessageHandler<!decorum.RequiredFieldValidator>)=} message
 */
decorum.RequiredFieldValidator = function(message) {};

/**
 * @return {boolean}
 */
decorum.RequiredFieldValidator.prototype.validatesEmptyValue = function() {};

/**
 * @param {!decorum.IMessageOpts} opts
 * @return {string}
 */
decorum.RequiredFieldValidator.prototype.getMessage = function(opts) {};

/**
 * @param {?} value
 * @return {boolean}
 */
decorum.RequiredFieldValidator.prototype.isValid = function(value) {};

/**
 * @constructor
 * @struct
 * Initializes the {BaseValidator}
 * @param {string} validatorKey A unique "key" by which to identify this field validator i.e. length, maxlength,
 *     required. Should be a valid JS property name.
 * @param {(string|!decorum.MessageHandler<?>)} message A custom error message to return. Should be passed down from concrete class' constructors to
 *     enable customizing error messages.
 */
decorum.BaseValidator = function(validatorKey, message) {};
 /** @type {boolean} */
decorum.BaseValidator.prototype.hasCustomMessage;

/**
 * Check whether this validator should process an "empty" value (i.e. null, undefined, empty string). Override
 * this in derived classes to skip validators if the field value hasn't been set. Things like email, min/max
 * length, and pattern should return false for this to ensure they don't get fired when the model is initially
 * empty before a user has had a chance to input a value. Things like required should override this to true so
 * that they are fired for empty values. Base implementation defaults to false
 * @return {boolean}
 */
decorum.BaseValidator.prototype.validatesEmptyValue = function() {};

/**
 * Gets the custom error message set on this validator.
 * @param {!decorum.IMessageOpts} opts Metadata about the field such as name and friendly name.
 * @return {string}
 */
decorum.BaseValidator.prototype.getCustomMessage = function(opts) {};

/**
 * Gets the unique name for this validator.
 * @return {string}
 */
decorum.BaseValidator.prototype.getKey = function() {};

/**
 * [Abstract] Gets the error message to display when a field fails validation by this validator.
 * @abstract
 * @param {!decorum.IMessageOpts} opts Metadata about the field such as name and friendly name.
 * @return {string}
 */
decorum.BaseValidator.prototype.getMessage = function(opts) {};

/**
 * [Abstract] Checks the passed value for validity.
 * @abstract
 * @param {?} value The field's proposed value.
 * @param {?} model The rest of the model if cross-field validity checks are necessary.
 * @return {boolean}
 */
decorum.BaseValidator.prototype.isValid = function(value, model) {};

/**
 * @constructor
 * @struct
 * @param {string} property
 */
decorum.FieldOptions = function(property) {};

/**
 * Gets the "friendly" name of the field for use in validation error messages. Defaults to just "Field".
 * @return {string}
 */
decorum.FieldOptions.prototype.getFriendlyName = function() {};

/**
 * Sets the "friendly" name of the field for use in validation error messages. This name will be used in the
 * text of validation errors.
 * @param {string} name The new name to set.
 * @return {void}
 */
decorum.FieldOptions.prototype.setFriendlyName = function(name) {};

/**
 * Add a validator to the list of validators for this field.
 * @param {!decorum.BaseValidator} validator The validator to add. Should be a class that extends from {BaseValidator}.
 * @return {void}
 */
decorum.FieldOptions.prototype.addValidator = function(validator) {};

/**
 * Gets the validators assigned to this field.
 * @return {!Array<!decorum.BaseValidator>}
 */
decorum.FieldOptions.prototype.getValidators = function() {};

/**
 * Runs through all of the validators for the field given a particular value and returns any validation errors
 * that may have occurred.
 * @param {?} value The value to validate.
 * @param {?} model The rest of the model. Used in custom cross-field validations.
 *     valid for the field.
 * @return {!Array<string>}
 */
decorum.FieldOptions.prototype.validateValue = function(value, model) {};
