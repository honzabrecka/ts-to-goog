/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/move-concurrently/index.d.ts:

/**
 * Recursively moves from to to and resolves its promise when finished. If to already exists then the promise will be rejected with an EEXIST error.
 * @template T
 * @param {string} from
 * @param {string} to
 * @param {!move.Options<T>=} opts
 * @return {T}
 */
function move(from, to, opts) {}
/**
 * @record
 * @struct
 */
move.Options = function() {};
 /** @type {number} */
move.Options.prototype.maxConcurrency;
 /** @type {boolean} */
move.Options.prototype.isWindows;
 /** @type {function(new: (T), !Array<?>): ?} */
move.Options.prototype.Promise;
 /** @type {?} */
move.Options.prototype.fs;
 /** @type {?} */
move.Options.prototype.writeStreamAtomic;
 /** @type {?} */
move.Options.prototype.getuid;

/* TODO: ExportAssignment in  */
