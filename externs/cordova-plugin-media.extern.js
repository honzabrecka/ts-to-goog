/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cordova-plugin-media/index.d.ts:
 /** @type {function(new: (?), string, function(): void, function(!MediaError): ?, function(number): void): ?} */
var Media;
 /** @type {number} */
Media.prototype.position;
 /** @type {number} */
Media.prototype.duration;

/**
 * Returns the current position within an audio file. Also updates the Media object's position parameter.
 * @param {function(number): void} mediaSuccess The callback that is passed the current position in seconds.
 * @param {function(!MediaError): void=} mediaError   The callback to execute if an error occurs.
 * @return {void}
 */
Media.prototype.getCurrentPosition = function(mediaSuccess, mediaError) {};

/**
 * Returns the duration of an audio file in seconds. If the duration is unknown, it returns a value of -1.
 * @return {number}
 */
Media.prototype.getDuration = function() {};

/**
 * Starts or resumes playing an audio file.
 * @param {!IosPlayOptions=} iosPlayOptions
 * @return {void}
 */
Media.prototype.play = function(iosPlayOptions) {};

/**
 * Pauses playing an audio file.
 * @return {void}
 */
Media.prototype.pause = function() {};

/**
 * Releases the underlying operating system's audio resources. This is particularly important
 * for Android, since there are a finite amount of OpenCore instances for media playback.
 * Applications should call the release function for any Media resource that is no longer needed.
 * @return {void}
 */
Media.prototype.release = function() {};

/**
 * Sets the current position within an audio file.
 * @param {number} position Position in milliseconds.
 * @return {void}
 */
Media.prototype.seekTo = function(position) {};

/**
 * Set the volume for an audio file.
 * @param {number} volume The volume to set for playback. The value must be within the range of 0.0 to 1.0.
 * @return {void}
 */
Media.prototype.setVolume = function(volume) {};

/**
 * Starts recording an audio file.
 * @return {void}
 */
Media.prototype.startRecord = function() {};

/**
 * Stops recording an audio file.
 * @return {void}
 */
Media.prototype.stopRecord = function() {};

/**
 * Stops playing an audio file.
 * @return {void}
 */
Media.prototype.stop = function() {};
/**
 * @record
 * @struct
 */
function IosPlayOptions() {}
 /** @type {number} */
IosPlayOptions.prototype.numberOfLoops;
 /** @type {boolean} */
IosPlayOptions.prototype.playAudioWhenScreenIsLocked;
