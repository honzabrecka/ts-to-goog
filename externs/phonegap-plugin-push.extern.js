/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/phonegap-plugin-push/index.d.ts:
/** @const */
var PhonegapPluginPush = {};

/** @typedef {(!PhonegapPluginPush.RegistrationEventResponse|!PhonegapPluginPush.NotificationEventResponse|!Error)} */
PhonegapPluginPush.EventResponse;
/**
 * @record
 * @struct
 */
PhonegapPluginPush.PushNotification = function() {};

/**
 * The event registration will be triggered on each successful registration with the 3rd party push service.
 * The event notification will be triggered each time a push notification is received by a 3rd party push service on the device.
 * The event error will trigger when an internal error occurs and the cache is aborted.
 *
 * @param {string} event Name of the event to listen to. See below(above) for all the event names.
 * @param {function(!PhonegapPluginPush.RegistrationEventResponse): ?|function(!PhonegapPluginPush.NotificationEventResponse): ?|function(!Error): ?|function((!PhonegapPluginPush.RegistrationEventResponse|!PhonegapPluginPush.NotificationEventResponse|!Error)): ?} callback is called when the event is triggered.
 * @return {void}
 */
PhonegapPluginPush.PushNotification.prototype.on = function(event, callback) {};

/**
 * As stated in the example, you will have to store your event handler if you are planning to remove it.
 * @param {string} event Name of the event type. The possible event names are the same as for the push.on function.
 * @param {function(!PhonegapPluginPush.RegistrationEventResponse): ?|function(!PhonegapPluginPush.NotificationEventResponse): ?|function(!Error): ?|function((!PhonegapPluginPush.RegistrationEventResponse|!PhonegapPluginPush.NotificationEventResponse|!Error)): ?} callback handle to the function to get removed.
 * @return {void}
 */
PhonegapPluginPush.PushNotification.prototype.off = function(event, callback) {};

/**
 * The unregister method is used when the application no longer wants to receive push notifications.
 * Beware that this cleans up all event handlers previously registered,
 * so you will need to re-register them if you want them to function again without an application reload.
 * @param {function(): ?} successHandler
 * @param {function(): ?=} errorHandler
 * @param {!Array<string>=} topics
 * @return {void}
 */
PhonegapPluginPush.PushNotification.prototype.unregister = function(successHandler, errorHandler, topics) {};

/**
 * The subscribe method is used when the application wants to subscribe a new topic to receive push notifications.
 * @param {string} topic Topic to subscribe to.
 * @param {function(): ?} successHandler Is called when the api successfully unregisters.
 * @param {function(): ?} errorHandler Is called when the api encounters an error while unregistering.
 * @return {void}
 */
PhonegapPluginPush.PushNotification.prototype.subscribe = function(topic, successHandler, errorHandler) {};

/**
 * The unsubscribe method is used when the application no longer wants to receive push notifications
 * from a specific topic but continue to receive other push messages.
 * @param {string} topic Topic to unsubscribe from.
 * @param {function(): ?} successHandler Is called when the api successfully unregisters.
 * @param {function(): ?} errorHandler Is called when the api encounters an error while unregistering.
 * @return {void}
 */
PhonegapPluginPush.PushNotification.prototype.unsubscribe = function(topic, successHandler, errorHandler) {};

/**
 * Set the badge count visible when the app is not running
 * 
 * The count is an integer indicating what number should show up in the badge.
 * Passing 0 will clear the badge.
 * Each notification event contains a data.count value which can be used to set the badge to correct number.
 * @param {function(): ?} successHandler
 * @param {function(): ?} errorHandler
 * @param {number} count
 * @return {void}
 */
PhonegapPluginPush.PushNotification.prototype.setApplicationIconBadgeNumber = function(successHandler, errorHandler, count) {};

/**
 * Get the current badge count visible when the app is not running
 * successHandler gets called with an integer which is the current badge count
 * @param {function(number): ?} successHandler
 * @param {function(): ?} errorHandler
 * @return {void}
 */
PhonegapPluginPush.PushNotification.prototype.getApplicationIconBadgeNumber = function(successHandler, errorHandler) {};

/**
 * iOS only
 * Tells the OS that you are done processing a background push notification.
 * successHandler gets called when background push processing is successfully completed.
 * @param {function(): ?=} successHandler
 * @param {function(): ?=} errorHandler
 * @param {string=} id
 * @return {void}
 */
PhonegapPluginPush.PushNotification.prototype.finish = function(successHandler, errorHandler, id) {};

/**
 * Tells the OS to clear all notifications from the Notification Center
 * @param {function(): ?} successHandler Is called when the api successfully clears the notifications.
 * @param {function(): ?} errorHandler Is called when the api encounters an error when attempting to clears the notifications.
 * @return {void}
 */
PhonegapPluginPush.PushNotification.prototype.clearAllNotifications = function(successHandler, errorHandler) {};
/**
 * @record
 * @struct
 */
PhonegapPluginPush.InitOptions = function() {};
 /** @type {{senderID: string, icon: string, iconColor: string, sound: boolean, vibrate: boolean, clearNotifications: boolean, forceShow: boolean, topics: !Array<string>}} */
PhonegapPluginPush.InitOptions.prototype.android;
 /** @type {{badge: (string|boolean), sound: (string|boolean), alert: (string|boolean), clearBadge: (string|boolean), categories: !PhonegapPluginPush.CategoryArray, senderID: string, gcmSandbox: boolean, topics: !Array<string>}} */
PhonegapPluginPush.InitOptions.prototype.ios;
 /** @type {!Object} */
PhonegapPluginPush.InitOptions.prototype.windows;
/**
 * @record
 * @struct
 */
PhonegapPluginPush.CategoryArray = function() {};

/* TODO: IndexSignature: PhonegapPluginPush */
/**
 * @record
 * @struct
 */
PhonegapPluginPush.CategoryAction = function() {};
 /** @type {!PhonegapPluginPush.CategoryActionData} */
PhonegapPluginPush.CategoryAction.prototype.yes;
 /** @type {!PhonegapPluginPush.CategoryActionData} */
PhonegapPluginPush.CategoryAction.prototype.no;
 /** @type {!PhonegapPluginPush.CategoryActionData} */
PhonegapPluginPush.CategoryAction.prototype.maybe;
/**
 * @record
 * @struct
 */
PhonegapPluginPush.CategoryActionData = function() {};
 /** @type {string} */
PhonegapPluginPush.CategoryActionData.prototype.callback;
 /** @type {string} */
PhonegapPluginPush.CategoryActionData.prototype.title;
 /** @type {boolean} */
PhonegapPluginPush.CategoryActionData.prototype.foreground;
 /** @type {boolean} */
PhonegapPluginPush.CategoryActionData.prototype.destructive;
/**
 * @record
 * @struct
 */
PhonegapPluginPush.HasPermissionCallbackParameters = function() {};
 /** @type {boolean} */
PhonegapPluginPush.HasPermissionCallbackParameters.prototype.isEnabled;
/**
 * @record
 * @struct
 */
PhonegapPluginPush.RegistrationEventResponse = function() {};
 /** @type {string} */
PhonegapPluginPush.RegistrationEventResponse.prototype.registrationId;
/**
 * @record
 * @struct
 */
PhonegapPluginPush.NotificationEventResponse = function() {};
 /** @type {string} */
PhonegapPluginPush.NotificationEventResponse.prototype.message;
 /** @type {string} */
PhonegapPluginPush.NotificationEventResponse.prototype.title;
 /** @type {string} */
PhonegapPluginPush.NotificationEventResponse.prototype.count;
 /** @type {string} */
PhonegapPluginPush.NotificationEventResponse.prototype.sound;
 /** @type {string} */
PhonegapPluginPush.NotificationEventResponse.prototype.image;
 /** @type {!PhonegapPluginPush.NotificationEventAdditionalData} */
PhonegapPluginPush.NotificationEventResponse.prototype.additionalData;
/**
 * @record
 * @struct
 */
PhonegapPluginPush.NotificationEventAdditionalData = function() {};

/* TODO: IndexSignature: PhonegapPluginPush */
 /** @type {boolean} */
PhonegapPluginPush.NotificationEventAdditionalData.prototype.foreground;
 /** @type {boolean} */
PhonegapPluginPush.NotificationEventAdditionalData.prototype.coldstart;
 /** @type {string} */
PhonegapPluginPush.NotificationEventAdditionalData.prototype.collapse_key;
 /** @type {string} */
PhonegapPluginPush.NotificationEventAdditionalData.prototype.from;
 /** @type {string} */
PhonegapPluginPush.NotificationEventAdditionalData.prototype.notId;
/**
 * @record
 * @struct
 */
PhonegapPluginPush.PushNotificationStatic = function() {};

/**
 * @param {!PhonegapPluginPush.InitOptions} options
 * @return {!PhonegapPluginPush.PushNotification}
 */
PhonegapPluginPush.PushNotificationStatic.prototype.init = function(options) {};

/**
 * Android & iOS only
 * Checks whether the push notification permission has been granted.
 * @param {function(!PhonegapPluginPush.HasPermissionCallbackParameters): ?} successhandler
 * @return {void}
 */
PhonegapPluginPush.PushNotificationStatic.prototype.hasPermission = function(successhandler) {};
 /** @type {!PhonegapPluginPush.PushNotificationStatic} */
Window.prototype.PushNotification;
 /** @type {!PhonegapPluginPush.PushNotificationStatic} */
var PushNotification;
