/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/gapi.calendar/index.d.ts:
/** @const */
gapi.client.calendar = {};
/**
 * @constructor
 * @struct
 */
gapi.client.calendar.freebusy = function() {};

/**
 * @param {!gapi.client.calendar.FreeBusyQueryParameters} parameters
 * @return {!gapi.client.HttpRequest<!gapi.client.calendar.FreeBusy>}
 */
gapi.client.calendar.freebusy.query = function(parameters) {};
/**
 * @record
 * @struct
 */
gapi.client.calendar.FreeBusyQueryParameters = function() {};
 /** @type {string} */
gapi.client.calendar.FreeBusyQueryParameters.prototype.timeMin;
 /** @type {string} */
gapi.client.calendar.FreeBusyQueryParameters.prototype.timeMax;
 /** @type {string} */
gapi.client.calendar.FreeBusyQueryParameters.prototype.timeZone;
 /** @type {number} */
gapi.client.calendar.FreeBusyQueryParameters.prototype.groupExpansionMax;
 /** @type {number} */
gapi.client.calendar.FreeBusyQueryParameters.prototype.calendarExpansionMax;
 /** @type {!Array<{id: string}>} */
gapi.client.calendar.FreeBusyQueryParameters.prototype.items;
/**
 * @record
 * @struct
 */
gapi.client.calendar.FreeBusy = function() {};
 /** @type {string} */
gapi.client.calendar.FreeBusy.prototype.kind;
 /** @type {string} */
gapi.client.calendar.FreeBusy.prototype.timeMin;
 /** @type {string} */
gapi.client.calendar.FreeBusy.prototype.timeMax;
 /** @type {function(string): {errors: !Array<{domain: string, reason: string}>, calendars: !Array<string>}} */
gapi.client.calendar.FreeBusy.prototype.groups;
 /** @type {function(string): {errors: !Array<{domain: string, reason: string}>, busy: !Array<{start: string, end: string}>}} */
gapi.client.calendar.FreeBusy.prototype.calendars;
/**
 * @constructor
 * @struct
 */
gapi.client.calendar.acl = function() {};

/**
 * @param {!gapi.client.calendar.AclInsertParameters} parameters
 * @return {!gapi.client.HttpRequest<!gapi.client.calendar.Acl>}
 */
gapi.client.calendar.acl.insert = function(parameters) {};

/**
 * @param {!gapi.client.calendar.AclGetParameters} parameters
 * @return {!gapi.client.HttpRequest<!gapi.client.calendar.Acl>}
 */
gapi.client.calendar.acl.get = function(parameters) {};

/**
 * @param {!gapi.client.calendar.AclUpdateParameters} parameters
 * @return {!gapi.client.HttpRequest<!gapi.client.calendar.Acl>}
 */
gapi.client.calendar.acl.update = function(parameters) {};

/**
 * @param {!gapi.client.calendar.AclDeleteParameters} parameters
 * @return {!gapi.client.HttpRequest<void>}
 */
gapi.client.calendar.acl.delete = function(parameters) {};

/** @typedef {string} */
gapi.client.calendar.ScopeType;
/**
 * @record
 * @struct
 */
gapi.client.calendar.Acl = function() {};
 /** @type {string} */
gapi.client.calendar.Acl.prototype.kind;
 /** @type {string} */
gapi.client.calendar.Acl.prototype.etag;
 /** @type {string} */
gapi.client.calendar.Acl.prototype.id;
 /** @type {{type: string, value: string}} */
gapi.client.calendar.Acl.prototype.scope;
 /** @type {string} */
gapi.client.calendar.Acl.prototype.role;
/**
 * @record
 * @struct
 */
gapi.client.calendar.AclInsertParameters = function() {};
 /** @type {string} */
gapi.client.calendar.AclInsertParameters.prototype.calendarId;
 /** @type {string} */
gapi.client.calendar.AclInsertParameters.prototype.role;
 /** @type {{type: string, value: string}} */
gapi.client.calendar.AclInsertParameters.prototype.scope;
/**
 * @record
 * @struct
 */
gapi.client.calendar.AclGetParameters = function() {};
 /** @type {string} */
gapi.client.calendar.AclGetParameters.prototype.calendarId;
 /** @type {string} */
gapi.client.calendar.AclGetParameters.prototype.ruleId;
/**
 * @extends {gapi.client.calendar.AclInsertParameters}
 * @record
 * @struct
 */
gapi.client.calendar.AclUpdateParameters = function() {};
 /** @type {string} */
gapi.client.calendar.AclUpdateParameters.prototype.ruleId;
/**
 * @extends {gapi.client.calendar.AclGetParameters}
 * @record
 * @struct
 */
gapi.client.calendar.AclDeleteParameters = function() {};
/**
 * @constructor
 * @struct
 */
gapi.client.calendar.calendarList = function() {};

/**
 * @param {!gapi.client.calendar.CalendarListListParameters=} parameters
 * @return {!gapi.client.HttpRequest<!gapi.client.calendar.CalendarList>}
 */
gapi.client.calendar.calendarList.list = function(parameters) {};

/**
 * @param {!gapi.client.calendar.CalendarListInsertParameters} parameters
 * @return {!gapi.client.HttpRequest<!gapi.client.calendar.CalendarListEntry>}
 */
gapi.client.calendar.calendarList.insert = function(parameters) {};

/** @typedef {string} */
gapi.client.calendar.AccessRoleWithoutNone;

/** @typedef {string} */
gapi.client.calendar.AccessRole;
/**
 * @record
 * @struct
 */
gapi.client.calendar.CalendarListListParameters = function() {};
 /** @type {number} */
gapi.client.calendar.CalendarListListParameters.prototype.maxResults;
 /** @type {string} */
gapi.client.calendar.CalendarListListParameters.prototype.minAccessRole;
 /** @type {string} */
gapi.client.calendar.CalendarListListParameters.prototype.pageToken;
 /** @type {boolean} */
gapi.client.calendar.CalendarListListParameters.prototype.showDeleted;
 /** @type {boolean} */
gapi.client.calendar.CalendarListListParameters.prototype.showHidden;
 /** @type {string} */
gapi.client.calendar.CalendarListListParameters.prototype.syncToken;
/**
 * @record
 * @struct
 */
gapi.client.calendar.CalendarListInsertParameters = function() {};
 /** @type {boolean} */
gapi.client.calendar.CalendarListInsertParameters.prototype.colorRgbFormat;
 /** @type {!gapi.client.calendar.CalendarListInput} */
gapi.client.calendar.CalendarListInsertParameters.prototype.resource;
/**
 * @record
 * @struct
 */
gapi.client.calendar.CalendarListInput = function() {};
 /** @type {string} */
gapi.client.calendar.CalendarListInput.prototype.id;
 /** @type {string} */
gapi.client.calendar.CalendarListInput.prototype.backgroundColor;
 /** @type {string} */
gapi.client.calendar.CalendarListInput.prototype.colorId;
 /** @type {!Array<{method: string, minutes: number}>} */
gapi.client.calendar.CalendarListInput.prototype.defaultReminders;
 /** @type {string} */
gapi.client.calendar.CalendarListInput.prototype.foregroundColor;
 /** @type {boolean} */
gapi.client.calendar.CalendarListInput.prototype.hidden;
 /** @type {{notifications: !Array<{type: string, method: string}>}} */
gapi.client.calendar.CalendarListInput.prototype.notificationSettings;
 /** @type {boolean} */
gapi.client.calendar.CalendarListInput.prototype.selected;
 /** @type {string} */
gapi.client.calendar.CalendarListInput.prototype.summaryOverride;
/**
 * @record
 * @struct
 */
gapi.client.calendar.CalendarList = function() {};
 /** @type {string} */
gapi.client.calendar.CalendarList.prototype.kind;
 /** @type {string} */
gapi.client.calendar.CalendarList.prototype.etag;
 /** @type {string} */
gapi.client.calendar.CalendarList.prototype.nextPageToken;
 /** @type {string} */
gapi.client.calendar.CalendarList.prototype.nextSyncToken;
 /** @type {!Array<!gapi.client.calendar.CalendarListEntry>} */
gapi.client.calendar.CalendarList.prototype.items;

/** @typedef {string} */
gapi.client.calendar.NotificationType;
/**
 * @record
 * @struct
 */
gapi.client.calendar.CalendarListEntry = function() {};
 /** @type {string} */
gapi.client.calendar.CalendarListEntry.prototype.kind;
 /** @type {string} */
gapi.client.calendar.CalendarListEntry.prototype.etag;
 /** @type {string} */
gapi.client.calendar.CalendarListEntry.prototype.id;
 /** @type {string} */
gapi.client.calendar.CalendarListEntry.prototype.summary;
 /** @type {string} */
gapi.client.calendar.CalendarListEntry.prototype.description;
 /** @type {string} */
gapi.client.calendar.CalendarListEntry.prototype.location;
 /** @type {string} */
gapi.client.calendar.CalendarListEntry.prototype.timeZone;
 /** @type {string} */
gapi.client.calendar.CalendarListEntry.prototype.summaryOverride;
 /** @type {string} */
gapi.client.calendar.CalendarListEntry.prototype.colorId;
 /** @type {string} */
gapi.client.calendar.CalendarListEntry.prototype.backgroundColor;
 /** @type {string} */
gapi.client.calendar.CalendarListEntry.prototype.foregroundColor;
 /** @type {boolean} */
gapi.client.calendar.CalendarListEntry.prototype.hidden;
 /** @type {boolean} */
gapi.client.calendar.CalendarListEntry.prototype.selected;
 /** @type {string} */
gapi.client.calendar.CalendarListEntry.prototype.accessRole;
 /** @type {!Array<{method: string, minutes: number}>} */
gapi.client.calendar.CalendarListEntry.prototype.defaultReminders;
 /** @type {{notifications: !Array<{type: string, method: string}>}} */
gapi.client.calendar.CalendarListEntry.prototype.notificationSettings;
 /** @type {boolean} */
gapi.client.calendar.CalendarListEntry.prototype.primary;
 /** @type {boolean} */
gapi.client.calendar.CalendarListEntry.prototype.deleted;
/**
 * @constructor
 * @struct
 */
gapi.client.calendar.calendars = function() {};

/**
 * @param {!gapi.client.calendar.CalendarsInsertParameters} parameters
 * @return {!gapi.client.HttpRequest<!gapi.client.calendar.Calendar>}
 */
gapi.client.calendar.calendars.insert = function(parameters) {};

/**
 * @param {!gapi.client.calendar.CalendarsUpdateParameters} parameters
 * @return {!gapi.client.HttpRequest<!gapi.client.calendar.Calendar>}
 */
gapi.client.calendar.calendars.update = function(parameters) {};

/**
 * @param {!gapi.client.calendar.CalendarsDeleteParameters} parameters
 * @return {!gapi.client.HttpRequest<void>}
 */
gapi.client.calendar.calendars.delete = function(parameters) {};
/**
 * @record
 * @struct
 */
gapi.client.calendar.CalendarsUpdateParameters = function() {};
 /** @type {string} */
gapi.client.calendar.CalendarsUpdateParameters.prototype.calendarId;
 /** @type {string} */
gapi.client.calendar.CalendarsUpdateParameters.prototype.description;
 /** @type {string} */
gapi.client.calendar.CalendarsUpdateParameters.prototype.location;
 /** @type {string} */
gapi.client.calendar.CalendarsUpdateParameters.prototype.summary;
 /** @type {string} */
gapi.client.calendar.CalendarsUpdateParameters.prototype.timeZone;
/**
 * @record
 * @struct
 */
gapi.client.calendar.CalendarsInsertParameters = function() {};
 /** @type {string} */
gapi.client.calendar.CalendarsInsertParameters.prototype.summary;
 /** @type {string} */
gapi.client.calendar.CalendarsInsertParameters.prototype.description;
 /** @type {string} */
gapi.client.calendar.CalendarsInsertParameters.prototype.location;
 /** @type {string} */
gapi.client.calendar.CalendarsInsertParameters.prototype.timeZone;
/**
 * @record
 * @struct
 */
gapi.client.calendar.CalendarsDeleteParameters = function() {};
 /** @type {string} */
gapi.client.calendar.CalendarsDeleteParameters.prototype.calendarId;
/**
 * @record
 * @struct
 */
gapi.client.calendar.Calendar = function() {};
 /** @type {string} */
gapi.client.calendar.Calendar.prototype.kind;
 /** @type {string} */
gapi.client.calendar.Calendar.prototype.etag;
 /** @type {string} */
gapi.client.calendar.Calendar.prototype.id;
 /** @type {string} */
gapi.client.calendar.Calendar.prototype.summary;
 /** @type {string} */
gapi.client.calendar.Calendar.prototype.description;
 /** @type {string} */
gapi.client.calendar.Calendar.prototype.location;
 /** @type {string} */
gapi.client.calendar.Calendar.prototype.timeZone;
/**
 * @constructor
 * @struct
 */
gapi.client.calendar.events = function() {};

/**
 * @param {!gapi.client.calendar.EventsListParameters} parameters
 * @return {!gapi.client.HttpRequest<!gapi.client.calendar.Events>}
 */
gapi.client.calendar.events.list = function(parameters) {};

/**
 * @param {!gapi.client.calendar.EventsInsertParameters} parameters
 * @return {!gapi.client.HttpRequest<!gapi.client.calendar.Event>}
 */
gapi.client.calendar.events.insert = function(parameters) {};

/**
 * @param {!gapi.client.calendar.EventsUpdateParameters} parameters
 * @return {!gapi.client.HttpRequest<!gapi.client.calendar.Event>}
 */
gapi.client.calendar.events.update = function(parameters) {};

/**
 * @param {!gapi.client.calendar.EventsGetParameters} parameters
 * @return {!gapi.client.HttpRequest<!gapi.client.calendar.Event>}
 */
gapi.client.calendar.events.get = function(parameters) {};
/**
 * @record
 * @struct
 */
gapi.client.calendar.EventsGetParameters = function() {};
 /** @type {string} */
gapi.client.calendar.EventsGetParameters.prototype.calendarId;
 /** @type {string} */
gapi.client.calendar.EventsGetParameters.prototype.eventId;
 /** @type {boolean} */
gapi.client.calendar.EventsGetParameters.prototype.alwaysIncludeEmail;
 /** @type {number} */
gapi.client.calendar.EventsGetParameters.prototype.maxAttendees;
 /** @type {string} */
gapi.client.calendar.EventsGetParameters.prototype.timeZone;
/**
 * @record
 * @struct
 */
gapi.client.calendar.EventsInsertParameters = function() {};
 /** @type {string} */
gapi.client.calendar.EventsInsertParameters.prototype.calendarId;
 /** @type {number} */
gapi.client.calendar.EventsInsertParameters.prototype.maxAttendees;
 /** @type {boolean} */
gapi.client.calendar.EventsInsertParameters.prototype.sendNotifications;
 /** @type {boolean} */
gapi.client.calendar.EventsInsertParameters.prototype.supportsAttachments;
 /** @type {!gapi.client.calendar.EventInput} */
gapi.client.calendar.EventsInsertParameters.prototype.resource;
/**
 * @record
 * @struct
 */
gapi.client.calendar.EventsUpdateParameters = function() {};
 /** @type {string} */
gapi.client.calendar.EventsUpdateParameters.prototype.calendarId;
 /** @type {string} */
gapi.client.calendar.EventsUpdateParameters.prototype.eventId;
 /** @type {boolean} */
gapi.client.calendar.EventsUpdateParameters.prototype.alwaysIncludeEmail;
 /** @type {number} */
gapi.client.calendar.EventsUpdateParameters.prototype.maxAttendees;
 /** @type {boolean} */
gapi.client.calendar.EventsUpdateParameters.prototype.sendNotifications;
 /** @type {boolean} */
gapi.client.calendar.EventsUpdateParameters.prototype.supportsAttachments;
 /** @type {!gapi.client.calendar.EventInput} */
gapi.client.calendar.EventsUpdateParameters.prototype.resource;
/**
 * @record
 * @struct
 */
gapi.client.calendar.EventInput = function() {};
 /** @type {!Array<{fileUrl: string}>} */
gapi.client.calendar.EventInput.prototype.attachments;
 /** @type {!Array<{email: string, displayName: string, optional: boolean, responseStatus: string, comment: string, additionalGuests: number}>} */
gapi.client.calendar.EventInput.prototype.attendees;
 /** @type {{date: string, dateTime: string, timeZone: string}} */
gapi.client.calendar.EventInput.prototype.end;
 /** @type {{overrides: !Array<{method: string, minutes: number}>, useDefault: boolean}} */
gapi.client.calendar.EventInput.prototype.reminders;
 /** @type {{date: string, dateTime: string, timeZone: string}} */
gapi.client.calendar.EventInput.prototype.start;
 /** @type {boolean} */
gapi.client.calendar.EventInput.prototype.anyoneCanAddSelf;
 /** @type {string} */
gapi.client.calendar.EventInput.prototype.colorId;
 /** @type {string} */
gapi.client.calendar.EventInput.prototype.description;
 /** @type {{private: function(string): string, shared: function(string): string}} */
gapi.client.calendar.EventInput.prototype.extendedProperties;
 /** @type {{display: string, height: number, iconLink: string, link: string, preferences: function(string): string, title: string, type: string, width: number}} */
gapi.client.calendar.EventInput.prototype.gadget;
 /** @type {boolean} */
gapi.client.calendar.EventInput.prototype.guestsCanInviteOthers;
 /** @type {boolean} */
gapi.client.calendar.EventInput.prototype.guestsCanSeeOtherGuests;
 /** @type {string} */
gapi.client.calendar.EventInput.prototype.id;
 /** @type {string} */
gapi.client.calendar.EventInput.prototype.location;
 /** @type {{date: string, dateTime: string, timeZone: string}} */
gapi.client.calendar.EventInput.prototype.originalStartTime;
 /** @type {!Array<string>} */
gapi.client.calendar.EventInput.prototype.recurrence;
 /** @type {number} */
gapi.client.calendar.EventInput.prototype.sequence;
 /** @type {{url: string, title: string}} */
gapi.client.calendar.EventInput.prototype.source;
 /** @type {string} */
gapi.client.calendar.EventInput.prototype.status;
 /** @type {string} */
gapi.client.calendar.EventInput.prototype.summary;
 /** @type {string} */
gapi.client.calendar.EventInput.prototype.transparency;
 /** @type {string} */
gapi.client.calendar.EventInput.prototype.visibility;

/** @typedef {string} */
gapi.client.calendar.EventsOrder;

/** @typedef {string} */
gapi.client.calendar.SyncToken;
/**
 * @record
 * @struct
 */
gapi.client.calendar.EventsListParameters = function() {};
 /** @type {string} */
gapi.client.calendar.EventsListParameters.prototype.calendarId;
 /** @type {boolean} */
gapi.client.calendar.EventsListParameters.prototype.alwaysIncludeEmail;
 /** @type {string} */
gapi.client.calendar.EventsListParameters.prototype.iCalUID;
 /** @type {number} */
gapi.client.calendar.EventsListParameters.prototype.maxAttendees;
 /** @type {number} */
gapi.client.calendar.EventsListParameters.prototype.maxResults;
 /** @type {string} */
gapi.client.calendar.EventsListParameters.prototype.orderBy;
 /** @type {string} */
gapi.client.calendar.EventsListParameters.prototype.pageToken;
 /** @type {string} */
gapi.client.calendar.EventsListParameters.prototype.privateExtendedProperty;
 /** @type {string} */
gapi.client.calendar.EventsListParameters.prototype.q;
 /** @type {string} */
gapi.client.calendar.EventsListParameters.prototype.sharedExtendedProperty;
 /** @type {boolean} */
gapi.client.calendar.EventsListParameters.prototype.showDeleted;
 /** @type {boolean} */
gapi.client.calendar.EventsListParameters.prototype.showHiddenInvitations;
 /** @type {boolean} */
gapi.client.calendar.EventsListParameters.prototype.singleEvents;
 /** @type {string} */
gapi.client.calendar.EventsListParameters.prototype.syncToken;
 /** @type {string} */
gapi.client.calendar.EventsListParameters.prototype.timeMax;
 /** @type {string} */
gapi.client.calendar.EventsListParameters.prototype.timeMin;
 /** @type {string} */
gapi.client.calendar.EventsListParameters.prototype.timeZone;
 /** @type {string} */
gapi.client.calendar.EventsListParameters.prototype.updatedMin;
/**
 * @record
 * @struct
 */
gapi.client.calendar.Events = function() {};
 /** @type {string} */
gapi.client.calendar.Events.prototype.kind;
 /** @type {string} */
gapi.client.calendar.Events.prototype.etag;
 /** @type {string} */
gapi.client.calendar.Events.prototype.summary;
 /** @type {string} */
gapi.client.calendar.Events.prototype.description;
 /** @type {string} */
gapi.client.calendar.Events.prototype.updated;
 /** @type {string} */
gapi.client.calendar.Events.prototype.timeZone;
 /** @type {string} */
gapi.client.calendar.Events.prototype.accessRole;
 /** @type {!Array<{method: string, minutes: number}>} */
gapi.client.calendar.Events.prototype.defaultReminders;
 /** @type {string} */
gapi.client.calendar.Events.prototype.nextPageToken;
 /** @type {string} */
gapi.client.calendar.Events.prototype.nextSyncToken;
 /** @type {!Array<!gapi.client.calendar.Event>} */
gapi.client.calendar.Events.prototype.items;

/** @typedef {string} */
gapi.client.calendar.etag;

/** @typedef {string} */
gapi.client.calendar.datetime;

/** @typedef {string} */
gapi.client.calendar.date;

/** @typedef {number} */
gapi.client.calendar.integer;

/** @typedef {string} */
gapi.client.calendar.AttendeeResponseStatus;

/** @typedef {string} */
gapi.client.calendar.GadgetDisplayMode;

/** @typedef {string} */
gapi.client.calendar.ReminderMethod;

/** @typedef {string} */
gapi.client.calendar.EventStatus;

/** @typedef {string} */
gapi.client.calendar.EventTransparency;

/** @typedef {string} */
gapi.client.calendar.EventVisibility;
/**
 * @constructor
 * @struct
 */
gapi.client.calendar.Event = function() {};
 /** @type {string} */
gapi.client.calendar.Event.prototype.kind;
 /** @type {string} */
gapi.client.calendar.Event.prototype.etag;
 /** @type {string} */
gapi.client.calendar.Event.prototype.id;
 /** @type {string} */
gapi.client.calendar.Event.prototype.status;
 /** @type {string} */
gapi.client.calendar.Event.prototype.htmlLink;
 /** @type {string} */
gapi.client.calendar.Event.prototype.created;
 /** @type {string} */
gapi.client.calendar.Event.prototype.updated;
 /** @type {string} */
gapi.client.calendar.Event.prototype.summary;
 /** @type {string} */
gapi.client.calendar.Event.prototype.description;
 /** @type {string} */
gapi.client.calendar.Event.prototype.location;
 /** @type {string} */
gapi.client.calendar.Event.prototype.colorId;
 /** @type {{id: string, email: string, displayName: string, self: boolean}} */
gapi.client.calendar.Event.prototype.creator;
 /** @type {{id: string, email: string, displayName: string, self: boolean}} */
gapi.client.calendar.Event.prototype.organizer;
 /** @type {{date: string, dateTime: string, timeZone: string}} */
gapi.client.calendar.Event.prototype.start;
 /** @type {{date: string, dateTime: string, timeZone: string}} */
gapi.client.calendar.Event.prototype.end;
 /** @type {boolean} */
gapi.client.calendar.Event.prototype.endTimeUnspecified;
 /** @type {!Array<string>} */
gapi.client.calendar.Event.prototype.recurrence;
 /** @type {string} */
gapi.client.calendar.Event.prototype.recurringEventId;
 /** @type {{date: string, dateTime: string, timeZone: string}} */
gapi.client.calendar.Event.prototype.originalStartTime;
 /** @type {string} */
gapi.client.calendar.Event.prototype.transparency;
 /** @type {string} */
gapi.client.calendar.Event.prototype.visibility;
 /** @type {string} */
gapi.client.calendar.Event.prototype.iCalUID;
 /** @type {number} */
gapi.client.calendar.Event.prototype.sequence;
 /** @type {!Array<{id: string, email: string, displayName: string, organizer: boolean, self: boolean, resource: boolean, optional: boolean, responseStatus: string, comment: string, additionalGuests: number}>} */
gapi.client.calendar.Event.prototype.attendees;
 /** @type {boolean} */
gapi.client.calendar.Event.prototype.attendeesOmitted;
 /** @type {{private: function(string): string, shared: function(string): string}} */
gapi.client.calendar.Event.prototype.extendedProperties;
 /** @type {string} */
gapi.client.calendar.Event.prototype.hangoutLink;
 /** @type {{type: string, title: string, link: string, iconLink: string, width: number, height: number, display: string, preferences: function(string): string}} */
gapi.client.calendar.Event.prototype.gadget;
 /** @type {boolean} */
gapi.client.calendar.Event.prototype.anyoneCanAddSelf;
 /** @type {boolean} */
gapi.client.calendar.Event.prototype.guestsCanInviteOthers;
 /** @type {boolean} */
gapi.client.calendar.Event.prototype.guestsCanModify;
 /** @type {boolean} */
gapi.client.calendar.Event.prototype.guestsCanSeeOtherGuests;
 /** @type {boolean} */
gapi.client.calendar.Event.prototype.privateCopy;
 /** @type {boolean} */
gapi.client.calendar.Event.prototype.locked;
 /** @type {{useDefault: boolean, overrides: !Array<{method: string, minutes: number}>}} */
gapi.client.calendar.Event.prototype.reminders;
 /** @type {{url: string, title: string}} */
gapi.client.calendar.Event.prototype.source;
 /** @type {!Array<{fileUrl: string, title: string, mimeType: string, iconLink: string, fileId: string}>} */
gapi.client.calendar.Event.prototype.attachments;
