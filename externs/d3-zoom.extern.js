/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/d3-zoom/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/** @typedef {!Element} */
var ZoomedElementBaseType;
/**
 * @record
 * @struct
 */
function ZoomScale() {}

/**
 * @param {!Array<number>=} domain
 * @return {!Array<number>|?}
 */
ZoomScale.prototype.domain = function(domain) {};

/**
 * @param {!Array<number>=} range
 * @return {!Array<number>|?}
 */
ZoomScale.prototype.range = function(range) {};

/**
 * @return {?}
 */
ZoomScale.prototype.copy = function() {};

/**
 * @param {number} value
 * @return {number}
 */
ZoomScale.prototype.invert = function(value) {};
/**
 * @record
 * @struct
 */
function ZoomBehavior() {}

/* TODO: CallSignature:  */

/**
 * Sets the current zoom transform of the selected elements to the specified transform,
 * instantaneously emitting start, zoom and end events.
 * 
 * This method requires that you specify the new zoom transform completely,
 * and does not enforce the defined scale extent and translate extent, if any.
 * To derive a new transform from the existing transform, and to enforce the scale and translate extents,
 * see the convenience methods zoom.translateBy, zoom.scaleBy and zoom.scaleTo.
 * 
 * This function is typically not invoked directly, and is instead invoked via selection.call.
 * 
 * Sets the current zoom transform of the selected elements to the transform returned by the specified
 * zoom transform factory function evaluated for each element, instantaneously emitting start, zoom and end events.
 * 
 * This method requires that you specify the new zoom transform completely,
 * and does not enforce the defined scale extent and translate extent, if any.
 * To derive a new transform from the existing transform, and to enforce the scale and translate extents,
 * see the convenience methods zoom.translateBy, zoom.scaleBy and zoom.scaleTo.
 * 
 * This function is typically not invoked directly, and is instead invoked via selection.call.
 * 
 * Sets the current zoom transform of the transitioning elements to the specified transform.
 * It defines a “zoom” tween to the specified transform using d3.interpolateZoom,
 * emitting a start event when the transition starts, zoom events for each tick of the transition,
 * and then an end event when the transition ends (or is interrupted).
 * 
 * This method requires that you specify the new zoom transform completely,
 * and does not enforce the defined scale extent and translate extent, if any.
 * To derive a new transform from the existing transform, and to enforce the scale and translate extents,
 * see the convenience methods zoom.translateBy, zoom.scaleBy and zoom.scaleTo.
 * 
 * This function is typically not invoked directly, and is instead invoked via selection.call.
 * 
 * Sets the current zoom transform of the transitioning elements to the transform returned by the specified
 * zoom transform factory function evaluated for each element.
 * It defines a “zoom” tween to the specified transform using d3.interpolateZoom,
 * emitting a start event when the transition starts, zoom events for each tick of the transition,
 * and then an end event when the transition ends (or is interrupted).
 * 
 * This method requires that you specify the new zoom transform completely,
 * and does not enforce the defined scale extent and translate extent, if any.
 * To derive a new transform from the existing transform, and to enforce the scale and translate extents,
 * see the convenience methods zoom.translateBy, zoom.scaleBy and zoom.scaleTo.
 * 
 * This function is typically not invoked directly, and is instead invoked via selection.call.
 * 
 * @param {?} selection_or_transition A D3 selection of elements. / A D3 transition on elements.
 * @param {?} transform A zoom transform object. / A zoom transform factory function which is evaluated for each selected element,
 * in order, being passed the current datum (d), the current index (i), and the current group (nodes),
 * with this as the current DOM element. The function returns a zoom transform object.
 * @return {void}
 */
ZoomBehavior.prototype.transform = function(selection_or_transition, transform) {};

/**
 * Translates the current zoom transform of the selected elements by x and y,
 * such that the new t(x1) = t(x0) + kx and t(y1) = t(y0) + ky.
 * 
 * x is provided as a constant for all elements.
 * y is provided as a constant for all elements.
 * 
 * Translates the current zoom transform of the selected elements by x and y,
 * such that the new t(x1) = t(x0) + kx and t(y1) = t(y0) + ky.
 * 
 * x is provided by a value function evaluated for each element in the selection.
 * y is provided as a constant for all elements.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * Translates the current zoom transform of the selected elements by x and y,
 * such that the new t(x1) = t(x0) + kx and t(y1) = t(y0) + ky.
 * 
 * x is provided as a constant for all elements.
 * y is provided by a value function evaluated for each element in the selection.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * Translates the current zoom transform of the selected elements by x and y,
 * such that the new t(x1) = t(x0) + kx and t(y1) = t(y0) + ky.
 * 
 * x is provided by a value function evaluated for each element in the selection.
 * y is provided by a value function evaluated for each element in the selection.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * Defines a “zoom” tween translating the current transform for the transitioning elements by x and y,
 * such that the new t(x1) = t(x0) + kx and t(y1) = t(y0) + ky.
 * 
 * x is provided as a constant for all elements.
 * y is provided as a constant for all elements.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * Defines a “zoom” tween translating the current transform for the transitioning elements by x and y,
 * such that the new t(x1) = t(x0) + kx and t(y1) = t(y0) + ky.
 * 
 * x is provided by a value function evaluated for each element in the selection.
 * y is provided as a constant for all elements.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * Defines a “zoom” tween translating the current transform for the transitioning elements by x and y,
 * such that the new t(x1) = t(x0) + kx and t(y1) = t(y0) + ky.
 * 
 * x is provided as a constant for all elements.
 * y is provided by a value function evaluated for each element in the selection.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * Defines a “zoom” tween translating the current transform for the transitioning elements by x and y,
 * such that the new t(x1) = t(x0) + kx and t(y1) = t(y0) + ky.
 * 
 * x is provided by a value function evaluated for each element in the selection.
 * y is provided by a value function evaluated for each element in the selection.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * @param {?} selection_or_transition A D3 selection of elements. / A D3 transition on elements.
 * @param {number|?} x Amount of translation in x-direction. / A value function which is evaluated for each selected element,
 * in order, being passed the current datum (d), the current index (i), and the current group (nodes),
 * with this as the current DOM element.The function returns the amount of translation in x-direction.
 * @param {number|?} y Amount of translation in y-direction. / A value function which is evaluated for each selected element,
 * in order, being passed the current datum (d), the current index (i), and the current group (nodes),
 * with this as the current DOM element.The function returns the amount of translation in y-direction.
 * @return {void}
 */
ZoomBehavior.prototype.translateBy = function(selection_or_transition, x, y) {};

/**
 * Translates the current zoom transform of the selected elements such that the specified position ⟨x,y⟩ appears at the center of the viewport extent.
 * The new tx = cx - kx and ty = cy - ky, where ⟨cx,cy⟩ is the center.
 * 
 * x is provided as a constant for all elements.
 * y is provided as a constant for all elements.
 * 
 * Translates the current zoom transform of the selected elements such that the specified position ⟨x,y⟩ appears at the center of the viewport extent.
 * The new tx = cx - kx and ty = cy - ky, where ⟨cx,cy⟩ is the center.
 * 
 * x is provided by a value function evaluated for each element in the selection.
 * y is provided as a constant for all elements.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * Translates the current zoom transform of the selected elements such that the specified position ⟨x,y⟩ appears at the center of the viewport extent.
 * The new tx = cx - kx and ty = cy - ky, where ⟨cx,cy⟩ is the center.
 * 
 * x is provided as a constant for all elements.
 * y is provided by a value function evaluated for each element in the selection.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * Translates the current zoom transform of the selected elements such that the specified position ⟨x,y⟩ appears at the center of the viewport extent.
 * The new tx = cx - kx and ty = cy - ky, where ⟨cx,cy⟩ is the center.
 * 
 * x is provided by a value function evaluated for each element in the selection.
 * y is provided by a value function evaluated for each element in the selection.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * Defines a “zoom” tween translating the current transform for the transitioning elements such that the specified position ⟨x,y⟩ appears at the center of the viewport extent.
 * The new tx = cx - kx and ty = cy - ky, where ⟨cx,cy⟩ is the center.
 * 
 * x is provided as a constant for all elements.
 * y is provided as a constant for all elements.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * Defines a “zoom” tween translating the current transform for the transitioning elements such that the specified position ⟨x,y⟩ appears at the center of the viewport extent.
 * The new tx = cx - kx and ty = cy - ky, where ⟨cx,cy⟩ is the center.
 * 
 * x is provided by a value function evaluated for each element in the selection.
 * y is provided as a constant for all elements.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * Defines a “zoom” tween translating the current transform for the transitioning elements such that the specified position ⟨x,y⟩ appears at the center of the viewport extent.
 * The new tx = cx - kx and ty = cy - ky, where ⟨cx,cy⟩ is the center.
 * 
 * x is provided as a constant for all elements.
 * y is provided by a value function evaluated for each element in the selection.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * Defines a “zoom” tween translating the current transform for the transitioning elements such that the specified position ⟨x,y⟩ appears at the center of the viewport extent.
 * The new tx = cx - kx and ty = cy - ky, where ⟨cx,cy⟩ is the center.
 * 
 * x is provided by a value function evaluated for each element in the selection.
 * y is provided by a value function evaluated for each element in the selection.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * @param {?} selection_or_transition A D3 selection of elements. / A D3 transition on elements.
 * @param {number|?} x Target x-position of translation. / A value function which is evaluated for each selected element,
 * in order, being passed the current datum (d), the current index (i), and the current group (nodes),
 * with this as the current DOM element.The function returns the target x-position of translation.
 * @param {number|?} y Target y-position of translation. / A value function which is evaluated for each selected element,
 * in order, being passed the current datum (d), the current index (i), and the current group (nodes),
 * with this as the current DOM element.The function returns the target y-position of translation.
 * @return {void}
 */
ZoomBehavior.prototype.translateTo = function(selection_or_transition, x, y) {};

/**
 * Scales the current zoom transform of the selected elements by k, such that the new k(1) = k(0)k.
 * 
 * k is provided as a constant for all elements.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * Scales the current zoom transform of the selected elements by k, such that the new k(1) = k(0)k.
 * 
 * k is provided by a value function evaluated for each element in the selection.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * Defines a “zoom” tween translating scaling the current transform of the selected elements by k, such that the new k(1) = k(0)k.
 * 
 * k is provided as a constant for all elements.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * Defines a “zoom” tween translating scaling the current transform of the selected elements by k, such that the new k(1) = k(0)k.
 * 
 * k is provided by a value function evaluated for each element in the selection.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * @param {?} selection_or_transition A D3 selection of elements. / A D3 transition on elements.
 * @param {number|?} k Scale factor. / A value function which is evaluated for each selected element,
 * in order, being passed the current datum (d), the current index (i), and the current group (nodes),
 * with this as the current DOM element.The function returns the scale factor.
 * @return {void}
 */
ZoomBehavior.prototype.scaleBy = function(selection_or_transition, k) {};

/**
 * Scales the current zoom transform of the selected elements to k, such that the new k(1) = k.
 * 
 * k is provided as a constant for all elements.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * Scales the current zoom transform of the selected elements to k, such that the new k(1) = k.
 * 
 * k is provided by a value function evaluated for each element in the selection.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * Defines a “zoom” tween translating scaling the current transform of the selected elements to k, such that the new k(1) = k.
 * 
 * k is provided as a constant for all elements.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * Defines a “zoom” tween translating scaling the current transform of the selected elements to k, such that the new k(1) = k.
 * 
 * k is provided by a value function evaluated for each element in the selection.
 * 
 * This method is a convenience method for zoom.transform.
 * In contrast to zoom.transform, however, it is subject to the constraints imposed by zoom.extent, zoom.scaleExtent, and zoom.translateExtent.
 * 
 * @param {?} selection_or_transition A D3 selection of elements. / A D3 transition on elements.
 * @param {number|?} k New scale. / A value function which is evaluated for each selected element,
 * in order, being passed the current datum (d), the current index (i), and the current group (nodes),
 * with this as the current DOM element.The function returns the new scale.
 * @return {void}
 */
ZoomBehavior.prototype.scaleTo = function(selection_or_transition, k) {};

/**
 * Returns the current filter function.
 * Sets the filter to the specified filter function and returns the zoom behavior.
 * The filter function is invoked in the zoom initiating event handlers of each element to which the zoom behavior was applied.
 * 
 * If the filter returns falsey, the initiating event is ignored and no zoom gesture is started.
 * Thus, the filter determines which input events are ignored. The default filter ignores mousedown events on secondary buttons,
 * since those buttons are typically intended for other purposes, such as the context menu.
 * 
 * @param {?=} filterFn A filter function which is invoked in the zoom initiating event handlers of each element to which the zoom behavior was applied,
 * in order, being passed the current datum (d), the current index (i), and the current group (nodes),
 * with this as the current DOM element. The function returns a boolean value.
 * @return {?}
 */
ZoomBehavior.prototype.filter = function(filterFn) {};

/**
 * Returns the current wheelDelta function.
 * Sets the wheel delta function to the specified function and returns the zoom behavior. The wheel delta function which is invoked in the wheel event handler
 * of each element to which the zoom behavior was applied.
 * The value Δ returned by the wheel delta function determines the amount of scaling applied in response to a WheelEvent.
 * The scale factor transform.k is multiplied by 2Δ; for example, a Δ of +1 doubles the scale factor, Δ of -1 halves the scale factor.
 * 
 * @param {?=} delta Wheel delta function which is invoked in the wheel event handler of each element to which the zoom behavior was applied,
 * in order, being passed the current datum (d), the current index (i), and the current group (nodes),
 * with this as the current DOM element. The function returns a numeric value.
 * @return {?}
 */
ZoomBehavior.prototype.wheelDelta = function(delta) {};

/**
 * Return the current extent accessor, which defaults to [[0, 0], [width, height]] where width is the client width of the element and height is its client height;
 * for SVG elements, the nearest ancestor SVG element’s width and height is used. In this case,
 * the owner SVG element must have defined width and height attributes rather than (for example) relying on CSS properties or the viewBox attribute;
 * SVG provides no programmatic method for retrieving the initial viewport size. Alternatively, consider using element.getBoundingClientRect.
 * (In Firefox, element.clientWidth and element.clientHeight is zero for SVG elements!)
 * Set the viewport extent to the specified array of points [[x0, y0], [x1, y1]],
 * where [x0, y0] is the top-left corner of the viewport and [x1, y1] is the bottom-right corner of the viewport,
 * and return this zoom behavior.
 * 
 * The viewport extent affects several functions: the center of the viewport remains fixed during changes by zoom.scaleBy and zoom.scaleTo;
 * the viewport center and dimensions affect the path chosen by d3.interpolateZoom; and the viewport extent is needed to enforce the optional translate extent.
 * 
 * Set the viewport extent to the array of points [[x0, y0], [x1, y1]] returned by the
 * extent accessor function, and return this zoom behavior.
 * The extent accessor function is evaluated for each element.
 * 
 * [x0, y0] is the top-left corner of the viewport and [x1, y1] is the bottom-right corner of the viewport.
 * 
 * The viewport extent affects several functions: the center of the viewport remains fixed during changes by zoom.scaleBy and zoom.scaleTo;
 * the viewport center and dimensions affect the path chosen by d3.interpolateZoom; and the viewport extent is needed to enforce the optional translate extent.
 * 
 * The default is [[0, 0], [width, height]] where width is the client width of the element and height is its client height;
 * for SVG elements, the nearest ancestor SVG element’s width and height is used.
 * In this case, the owner SVG element must have defined width and height attributes rather than (for example) relying on CSS properties or the viewBox attribute;
 * SVG provides no programmatic method for retrieving the initial viewport size. Alternatively, consider using element.getBoundingClientRect.
 * (In Firefox, element.clientWidth and element.clientHeight is zero for SVG elements!)
 * 
 * \@extent An extent accessor function which is evaluated for each selected element,
 * in order, being passed the current datum (d), the current index (i), and the current group (nodes),
 * with this as the current DOM element.The function returns the extent array.
 * @param {!Array<?>|?=} extent An extent specified as an array of two coordinates.
 * @return {?}
 */
ZoomBehavior.prototype.extent = function(extent) {};

/**
 * Return the current scale extent.
 * Set the scale extent to the specified array of numbers [k0, k1] where k0 is the minimum allowed scale factor and k1 is the maximum allowed scale factor,
 * and return this zoom behavior.
 * 
 * The scale extent restricts zooming in and out. It is enforced on interaction and when using zoom.scaleBy, zoom.scaleTo and zoom.translateBy;
 * however, it is not enforced when using zoom.transform to set the transform explicitly.
 * 
 * The default scale extent is [0, infinity].
 * 
 * If the user tries to zoom by wheeling when already at the corresponding limit of the scale extent, the wheel events will be ignored and not initiate a zoom gesture.
 * This allows the user to scroll down past a zoomable area after zooming in, or to scroll up after zooming out.
 * If you would prefer to always prevent scrolling on wheel input regardless of the scale extent, register a wheel event listener to prevent the browser default behavior
 * 
 * @param {!Array<?>=} extent A scale extent array of two numbers representing the scale boundaries.
 * @return {!Array<?>|?}
 */
ZoomBehavior.prototype.scaleExtent = function(extent) {};

/**
 * Return the current translate extent.
 * Set the translate extent to the specified array of points [[x0, y0], [x1, y1]], where [x0, y0] is the top-left corner of the world and [x1, y1]
 * is the bottom-right corner of the world, and return this zoom behavior.
 * 
 * The translate extent restricts panning, and may cause translation on zoom out. It is enforced on interaction and when using zoom.scaleBy, zoom.scaleTo and zoom.translateBy;
 * however, it is not enforced when using zoom.transform to set the transform explicitly.
 * 
 * The default scale extent is [[-infinity, infinity], [-infinity, infinity]].
 * 
 * @param {!Array<?>=} extent A translate extent array, i.e. an array of two arrays, each representing a point.
 * @return {!Array<?>|?}
 */
ZoomBehavior.prototype.translateExtent = function(extent) {};

/**
 * Return the current click distance threshold, which defaults to zero.
 * Set the maximum distance that the mouse can move between mousedown and mouseup that will trigger
 * a subsequent click event. If at any point between mousedown and mouseup the mouse is greater than or equal to
 * distance from its position on mousedown, the click event follwing mouseup will be suppressed.
 * 
 * @param {number=} distance The distance threshold between mousedown and mouseup measured in client coordinates (event.clientX and event.clientY).
 * The default is zero.
 * @return {number|?}
 */
ZoomBehavior.prototype.clickDistance = function(distance) {};

/**
 * Get the duration for zoom transitions on double-click and double-tap in milliseconds.
 * Set the duration for zoom transitions on double-click and double-tap to the specified number of milliseconds and returns the zoom behavior.
 * 
 * To disable double-click and double-tap transitions, you can remove the zoom behavior’s dblclick event listener after applying the zoom behavior to the selection.
 * 
 * @param {number=} duration
 * @return {number|?}
 */
ZoomBehavior.prototype.duration = function(duration) {};

/**
 * Returns the current interpolation factory, which defaults to d3.interpolateZoom to implement smooth zooming.
 * Sets the interpolation factory for zoom transitions to the specified function.
 * Use the default d3.interpolateZoom to implement smooth zooming.
 * To apply direct interpolation between two views, try d3.interpolate instead.
 * 
 * Each view is defined as an array of three numbers: cx, cy and width. The first two coordinates cx, cy represent the center of the viewport;
 * the last coordinate width represents the size of the viewport.
 * 
 * @template InterpolationFactory
 * @param {?=} interpolatorFactory An interpolator factory to be used to generate interpolators beetween zooms for transitions.
 * @return {?}
 */
ZoomBehavior.prototype.interpolate = function(interpolatorFactory) {};

/**
 * Return the first currently-assigned listener matching the specified typenames, if any.
 * 
 * Remove the current event listeners for the specified typenames, if any, return the drag behavior.
 * 
 * Set the event listener for the specified typenames and return the zoom behavior.
 * If an event listener was already registered for the same type and name,
 * the existing listener is removed before the new listener is added.
 * When a specified event is dispatched, each listener will be invoked with the same context and arguments as selection.on listeners.
 * 
 * 
 * @param {string} typenames The typenames is a string containing one or more typename separated by whitespace.
 * Each typename is a type, optionally followed by a period (.) and a name, such as "drag.foo"" and "drag.bar";
 * the name allows multiple listeners to be registered for the same type. The type must be one of the following:
 * start (after zooming begins [such as mousedown]), zoom (after a change to the zoom  transform [such as mousemove], or
 * end (after an active pointer becomes inactive [such as on mouseup].)
 * @param {null|?=} listener Use null to remove the listener. / An event listener function which is evaluated for each selected element,
 * in order, being passed the current datum (d), the current index (i), and the current group (nodes),
 * with this as the current DOM element.
 * @return {?}
 */
ZoomBehavior.prototype.on = function(typenames, listener) {};

/**
 * Creates a new zoom behavior. The returned behavior, zoom, is both an object and a function,
 * and is typically applied to selected elements via selection.call.
 * 
 * The first generic refers to the type of reference element to which the zoom behavior is attached.
 * The second generic refers to the type of the datum of the reference element.
 * @template ZoomRefElement, Datum
 * @return {?}
 */
function zoom() {}
/**
 * @record
 * @struct
 */
function D3ZoomEvent() {}
 /** @type {?} */
D3ZoomEvent.prototype.target;
 /** @type {string} */
D3ZoomEvent.prototype.type;
 /** @type {?} */
D3ZoomEvent.prototype.transform;
 /** @type {?} */
D3ZoomEvent.prototype.sourceEvent;
/**
 * @record
 * @struct
 */
function ZoomTransform() {}
 /** @type {number} */
ZoomTransform.prototype.x;
 /** @type {number} */
ZoomTransform.prototype.y;
 /** @type {number} */
ZoomTransform.prototype.k;

/**
 * Return the transformation of the specified point which is a two-element array of numbers [x, y].
 * The returned point is equal to [xk + tx, yk + ty].
 * 
 * @param {!Array<?>} point Point coordinates [x, y]
 * @return {!Array<?>}
 */
ZoomTransform.prototype.apply = function(point) {};

/**
 * Return the transformation of the specified x-coordinate, xk + tx.
 * 
 * @param {number} x Value of x-coordinate.
 * @return {number}
 */
ZoomTransform.prototype.applyX = function(x) {};

/**
 * Return the transformation of the specified y-coordinate, yk + ty.
 * 
 * @param {number} y Value of y-coordinate.
 * @return {number}
 */
ZoomTransform.prototype.applyY = function(y) {};

/**
 * Return the inverse transformation of the specified point which is a two-element array of numbers [x, y].
 * The returned point is equal to [(x - tx) / k, (y - ty) / k].
 * 
 * @param {!Array<?>} point Point coordinates [x, y]
 * @return {!Array<?>}
 */
ZoomTransform.prototype.invert = function(point) {};

/**
 * Return the inverse transformation of the specified x-coordinate, (x - tx) / k.
 * 
 * @param {number} x Value of x-coordinate.
 * @return {number}
 */
ZoomTransform.prototype.invertX = function(x) {};

/**
 * Return the inverse transformation of the specified y-coordinate, (y - ty) / k.
 * 
 * @param {number} y Value of y-coordinate.
 * @return {number}
 */
ZoomTransform.prototype.invertY = function(y) {};

/**
 * Returns a copy of the continuous scale x whose domain is transformed.
 * This is implemented by first applying the inverse x-transform on the scale’s range,
 * and then applying the inverse scale to compute the corresponding domain
 * 
 * The scale x must use d3.interpolateNumber; do not use continuous.rangeRound as this
 * reduces the accuracy of continuous.invert and can lead to an inaccurate rescaled domain.
 * This method does not modify the input scale x; x thus represents the untransformed scale,
 * while the returned scale represents its transformed view.
 * 
 * @template S
 * @param {?} xScale A continuous scale for x-dimension.
 * @return {?}
 */
ZoomTransform.prototype.rescaleX = function(xScale) {};

/**
 * Returns a copy of the continuous scale y whose domain is transformed.
 * This is implemented by first applying the inverse y-transform on the scale’s range,
 * and then applying the inverse scale to compute the corresponding domain
 * 
 * The scale y must use d3.interpolateNumber; do not use continuous.rangeRound as this
 * reduces the accuracy of continuous.invert and can lead to an inaccurate rescaled domain.
 * This method does not modify the input scale x; x thus represents the untransformed scale,
 * while the returned scale represents its transformed view.
 * 
 * @template S
 * @param {?} yScale A continuous scale for y-dimension.
 * @return {?}
 */
ZoomTransform.prototype.rescaleY = function(yScale) {};

/**
 * Return a transform whose scale k1 is equal to k0 × k, where k0 is this transform’s scale.
 * 
 * @param {number} k A scale factor.
 * @return {?}
 */
ZoomTransform.prototype.scale = function(k) {};

/**
 * Return a string representing the SVG transform corresponding to this transform.
 * @return {string}
 */
ZoomTransform.prototype.toString = function() {};

/**
 * Return a transform whose translation tx1 and ty1 is equal to tx0 + x and ty0 + y,
 * where tx0 and ty0 is this transform’s translation.
 * 
 * @param {number} x Amount of translation in x-direction.
 * @param {number} y Amount of translation in y-direction.
 * @return {?}
 */
ZoomTransform.prototype.translate = function(x, y) {};

/**
 * Returns the current transform for the specified node. Note that node should typically be a DOM element, and not a selection.
 * (A selection may consist of multiple nodes, in different states, and this function only returns a single transform.) If you have a selection, call selection.node first.
 * In the context of an event listener, the node is typically the element that received the input event (which should be equal to event.transform), "this".
 * Internally, an element’s transform is stored as element.__zoom; however, you should use this method rather than accessing it directly.
 * If the given node has no defined transform, returns the identity transformation.
 * The returned transform represents a two-dimensional transformation matrix
 * 
 * For details see {\@link https://github.com/d3/d3-zoom#zoom-transforms}
 * 
 * @param {!Element} node An element for which to retrieve its current zoomt transform.
 * @return {?}
 */
function zoomTransform(node) {}
 /** @type {?} */
var zoomIdentity;
