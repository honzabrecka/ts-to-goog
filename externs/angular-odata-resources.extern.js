/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/angular-odata-resources/index.d.ts:
/** @const */
var OData = {};
/**
 * @record
 * @struct
 */
OData.IResourceOptions = function() {};
 /** @type {boolean} */
OData.IResourceOptions.prototype.stripTrailingSlashes;
 /** @type {{url: string, method: string}} */
OData.IResourceOptions.prototype.odata;
 /** @type {boolean} */
OData.IResourceOptions.prototype.isodatav4;
/**
 * @record
 * @struct
 */
OData.IResourceService = function() {};

/* TODO: CallSignature: OData */

/* TODO: CallSignature: OData */

/* TODO: CallSignature: OData */
/**
 * @record
 * @struct
 */
OData.IActionDescriptor = function() {};
 /** @type {string} */
OData.IActionDescriptor.prototype.url;
 /** @type {string} */
OData.IActionDescriptor.prototype.method;
 /** @type {boolean} */
OData.IActionDescriptor.prototype.isArray;
 /** @type {?} */
OData.IActionDescriptor.prototype.params;
 /** @type {?} */
OData.IActionDescriptor.prototype.headers;
/**
 * @record
 * @struct
 */
OData.IResourceClass = function() {};

/* TODO: ConstructSignature: OData */

/**
 * @param {!Object|!Function=} params_or_success
 * @param {!Function|!Object=} error_or_success_or_data
 * @param {!Function=} error_or_success
 * @param {!Function=} error
 * @return {!OData.IResource<T>}
 */
OData.IResourceClass.prototype.get = function(params_or_success, error_or_success_or_data, error_or_success, error) {};

/**
 * @param {!Object|!Function=} params_or_success
 * @param {!Function|!Object=} error_or_success_or_data
 * @param {!Function=} error_or_success
 * @param {!Function=} error
 * @return {!OData.IResourceArray<T>}
 */
OData.IResourceClass.prototype.query = function(params_or_success, error_or_success_or_data, error_or_success, error) {};

/**
 * @param {!Object|!Function=} data_or_success_or_params
 * @param {!Function|!Object=} error_or_success_or_data
 * @param {!Function=} error_or_success
 * @param {!Function=} error
 * @return {!OData.IResource<T>}
 */
OData.IResourceClass.prototype.save = function(data_or_success_or_params, error_or_success_or_data, error_or_success, error) {};

/**
 * @param {!Object|!Function=} data_or_success_or_params
 * @param {!Function|!Object=} error_or_success_or_data
 * @param {!Function=} error_or_success
 * @param {!Function=} error
 * @return {!OData.IResource<T>}
 */
OData.IResourceClass.prototype.update = function(data_or_success_or_params, error_or_success_or_data, error_or_success, error) {};

/**
 * @param {!Object|!Function=} params_or_success
 * @param {!Function|!Object=} error_or_success_or_data
 * @param {!Function=} error_or_success
 * @param {!Function=} error
 * @return {!OData.IResource<T>}
 */
OData.IResourceClass.prototype.remove = function(params_or_success, error_or_success_or_data, error_or_success, error) {};

/**
 * @param {!Object|!Function=} params_or_success
 * @param {!Function|!Object=} error_or_success_or_data
 * @param {!Function=} error_or_success
 * @param {!Function=} error
 * @return {!OData.IResource<T>}
 */
OData.IResourceClass.prototype.delete = function(params_or_success, error_or_success_or_data, error_or_success, error) {};

/**
 * @return {!OData.Provider<T>}
 */
OData.IResourceClass.prototype.odata = function() {};
/**
 * @record
 * @struct
 */
OData.IResource = function() {};
 /** @type {!angular.IPromise<T>} */
OData.IResource.prototype.$promise;
 /** @type {boolean} */
OData.IResource.prototype.$resolved;

/**
 * @param {!Object|!Function=} params_or_success
 * @param {!Function=} success_or_error
 * @param {!Function=} error
 * @return {!angular.IPromise<T>}
 */
OData.IResource.prototype.$get = function(params_or_success, success_or_error, error) {};

/**
 * @param {!Object|!Function=} params_or_success
 * @param {!Function=} success_or_error
 * @param {!Function=} error
 * @return {!angular.IPromise<!OData.IResourceArray<T>>}
 */
OData.IResource.prototype.$query = function(params_or_success, success_or_error, error) {};

/**
 * @param {!Object|!Function=} params_or_success
 * @param {!Function=} success_or_error
 * @param {!Function=} error
 * @return {!angular.IPromise<T>}
 */
OData.IResource.prototype.$save = function(params_or_success, success_or_error, error) {};

/**
 * @param {!Object|!Function=} params_or_success
 * @param {!Function=} success_or_error
 * @param {!Function=} error
 * @return {!angular.IPromise<T>}
 */
OData.IResource.prototype.$update = function(params_or_success, success_or_error, error) {};

/**
 * @param {!Object|!Function=} params_or_success
 * @param {!Function=} success_or_error
 * @param {!Function=} error
 * @return {!angular.IPromise<T>}
 */
OData.IResource.prototype.$remove = function(params_or_success, success_or_error, error) {};

/**
 * @param {!Object|!Function=} params_or_success
 * @param {!Function=} success_or_error
 * @param {!Function=} error
 * @return {!angular.IPromise<T>}
 */
OData.IResource.prototype.$delete = function(params_or_success, success_or_error, error) {};
/**
 * @record
 * @struct
 */
OData.IResourceArray = function() {};
 /** @type {!angular.IPromise<!OData.IResourceArray>} */
OData.IResourceArray.prototype.$promise;
 /** @type {boolean} */
OData.IResourceArray.prototype.$resolved;
/**
 * @record
 * @struct
 */
OData.IResourceServiceFactoryFunction = function() {};

/* TODO: CallSignature: OData */

/* TODO: CallSignature: OData */
/**
 * @extends {angular.IServiceProvider}
 * @record
 * @struct
 */
OData.IResourceServiceProvider = function() {};
 /** @type {!OData.IResourceOptions} */
OData.IResourceServiceProvider.prototype.defaults;
/**
 * @record
 * @struct
 */
OData.IExecutable = function() {};

/**
 * @param {?=} noParenthesis
 * @return {string}
 */
OData.IExecutable.prototype.execute = function(noParenthesis) {};

/**
 * @constructor
 * @struct
 * @param {?} ODataBinaryOperation
 * @param {?} ODataProvider
 * @param {?} ODataValue
 * @param {?} ODataProperty
 * @param {?} ODataMethodCall
 * @param {?} ODataPredicate
 * @param {?} ODataOrderByStatement
 */
OData.Global = function(ODataBinaryOperation, ODataProvider, ODataValue, ODataProperty, ODataMethodCall, ODataPredicate, ODataOrderByStatement) {};
 /** @type {!Array<string>} */
OData.Global.$inject;
 /** @type {!OData.Provider<?>} */
OData.Global.prototype.Provider;
 /** @type {?} */
OData.Global.prototype.BinaryOperation;
 /** @type {?} */
OData.Global.prototype.Value;
 /** @type {?} */
OData.Global.prototype.Property;
 /** @type {?} */
OData.Global.prototype.Func;
 /** @type {?} */
OData.Global.prototype.Predicate;
 /** @type {?} */
OData.Global.prototype.OrderBy;
/**
 * @record
 * @struct
 */
OData.BinaryOperationFactory = function() {};

/* TODO: ConstructSignature: OData */

/**
 * @constructor
 * @struct
 * @param {?} propertyOrPredicate
 * @param {?=} valueOrOperator
 * @param {?=} value
 */
OData.BinaryOperation = function(propertyOrPredicate, valueOrOperator, value) {};
 /** @type {?} */
OData.BinaryOperation.prototype.operandA;
 /** @type {?} */
OData.BinaryOperation.prototype.operandB;
 /** @type {?} */
OData.BinaryOperation.prototype.filterOperator;

/**
 * @param {?=} noParenthesis
 * @return {string}
 */
OData.BinaryOperation.prototype.execute = function(noParenthesis) {};

/**
 * @param {?} propertyOrPredicate
 * @param {?=} operatorOrValue
 * @param {?=} value
 * @return {!OData.BinaryOperation}
 */
OData.BinaryOperation.prototype.or = function(propertyOrPredicate, operatorOrValue, value) {};

/**
 * @param {?} propertyOrPredicate
 * @param {?=} operatorOrValue
 * @param {?=} value
 * @return {!OData.BinaryOperation}
 */
OData.BinaryOperation.prototype.and = function(propertyOrPredicate, operatorOrValue, value) {};
/**
 * @record
 * @struct
 */
OData.MethodCallFactory = function() {};

/* TODO: ConstructSignature: OData */

/**
 * @constructor
 * @struct
 * @param {string} methodName
 * @param {...?} args
 */
OData.MethodCall = function(methodName, args) {};
 /** @type {?} */
OData.MethodCall.prototype.methodName;
 /** @type {?} */
OData.MethodCall.prototype.params;

/**
 * @return {string}
 */
OData.MethodCall.prototype.execute = function() {};
/**
 * @constructor
 * @struct
 */
OData.Operators = function() {};
 /** @type {{eq: !Array<string>, ne: !Array<string>, gt: !Array<string>, ge: !Array<string>, lt: !Array<string>, le: !Array<string>, and: !Array<string>, or: !Array<string>, not: !Array<string>, add: !Array<string>, sub: !Array<string>, mul: !Array<string>, div: !Array<string>, mod: !Array<string>}} */
OData.Operators.prototype.operators;
 /** @type {?} */
OData.Operators.prototype.rtrim;

/**
 * @param {?} value
 * @return {?}
 */
OData.Operators.prototype.trim = function(value) {};

/**
 * @param {string} from
 * @return {?}
 */
OData.Operators.prototype.convert = function(from) {};
/**
 * @record
 * @struct
 */
OData.OrderByStatementFactory = function() {};

/* TODO: ConstructSignature: OData */

/**
 * @constructor
 * @struct
 * @param {string} propertyName
 * @param {string=} sortOrder
 */
OData.OrderByStatement = function(propertyName, sortOrder) {};
 /** @type {?} */
OData.OrderByStatement.prototype.propertyName;
 /** @type {?} */
OData.OrderByStatement.prototype.direction;

/**
 * @return {string}
 */
OData.OrderByStatement.prototype.execute = function() {};
/**
 * @record
 * @struct
 */
OData.PredicateFactory = function() {};

/* TODO: ConstructSignature: OData */

/**
 * @param {!Array<?>} orStatements
 * @return {!OData.IExecutable}
 */
OData.PredicateFactory.prototype.or = function(orStatements) {};

/**
 * @param {?} propertyOrPredicate
 * @param {?=} operatorOrValue
 * @param {?=} value
 * @return {!OData.IExecutable}
 */
OData.PredicateFactory.prototype.create = function(propertyOrPredicate, operatorOrValue, value) {};

/**
 * @param {?} andStatements
 * @return {!OData.IExecutable}
 */
OData.PredicateFactory.prototype.and = function(andStatements) {};

/**
 * @constructor
 * @struct
 * @param {?} propertyOrValueOrPredicate
 * @param {?=} valueOrOperator
 * @param {?=} value
 */
OData.Predicate = function(propertyOrValueOrPredicate, valueOrOperator, value) {};

/**
 * @param {!Array<?>} orStatements
 * @return {!OData.IExecutable}
 */
OData.Predicate.or = function(orStatements) {};

/**
 * @param {?} propertyOrPredicate
 * @param {?=} operatorOrValue
 * @param {?=} value
 * @return {!OData.IExecutable}
 */
OData.Predicate.create = function(propertyOrPredicate, operatorOrValue, value) {};

/**
 * @param {?} andStatements
 * @return {!OData.IExecutable}
 */
OData.Predicate.and = function(andStatements) {};
/**
 * @record
 * @struct
 */
OData.PropertyFactory = function() {};

/* TODO: ConstructSignature: OData */

/**
 * @constructor
 * @struct
 * @param {string} value
 */
OData.Property = function(value) {};
 /** @type {?} */
OData.Property.prototype.value;

/**
 * @return {string}
 */
OData.Property.prototype.execute = function() {};
/**
 * @record
 * @struct
 */
OData.ProviderFactory = function() {};

/* TODO: ConstructSignature: OData */
/**
 * @record
 * @struct
 */
OData.ProviderCallback = function() {};

/* TODO: CallSignature: OData */

/* TODO: CallSignature: OData */
/**
 * @record
 * @struct
 */
OData.ICountResult = function() {};
 /** @type {number} */
OData.ICountResult.prototype.result;
 /** @type {!angular.IPromise<?>} */
OData.ICountResult.prototype.$promise;

/**
 * @constructor
 * @struct
 * @param {!OData.ProviderCallback<T>} callback
 */
OData.Provider = function(callback) {};
 /** @type {?} */
OData.Provider.prototype.callback;
 /** @type {?} */
OData.Provider.prototype.filters;
 /** @type {?} */
OData.Provider.prototype.sortOrders;
 /** @type {?} */
OData.Provider.prototype.takeAmount;
 /** @type {?} */
OData.Provider.prototype.skipAmount;
 /** @type {?} */
OData.Provider.prototype.expandables;

/**
 * @param {?} operand1
 * @param {?=} operand2
 * @param {?=} operand3
 * @return {!OData.Provider}
 */
OData.Provider.prototype.filter = function(operand1, operand2, operand3) {};

/**
 * @param {string} arg1
 * @param {string=} arg2
 * @return {!OData.Provider}
 */
OData.Provider.prototype.orderBy = function(arg1, arg2) {};

/**
 * @param {function(string): string} transformMethod
 * @return {!OData.Provider}
 */
OData.Provider.prototype.transformUrl = function(transformMethod) {};

/**
 * @param {number} amount
 * @return {!OData.Provider}
 */
OData.Provider.prototype.take = function(amount) {};

/**
 * @param {number} amount
 * @return {!OData.Provider}
 */
OData.Provider.prototype.skip = function(amount) {};

/**
 * @return {?}
 */
OData.Provider.prototype.execute = function() {};

/**
 * @param {function(!Array<T>): void=} success
 * @param {function(): void=} error
 * @return {!Array<T>}
 */
OData.Provider.prototype.query = function(success, error) {};

/**
 * @param {function(T): void=} success
 * @param {function(): void=} error
 * @return {T}
 */
OData.Provider.prototype.single = function(success, error) {};

/**
 * @param {?} key
 * @param {function(T): void=} success
 * @param {function(): void=} error
 * @return {T}
 */
OData.Provider.prototype.get = function(key, success, error) {};

/**
 * @param {...string|!Array<string>} params
 * @return {!OData.Provider}
 */
OData.Provider.prototype.expand = function(params) {};

/**
 * @param {...string|!Array<string>} params
 * @return {!OData.Provider}
 */
OData.Provider.prototype.select = function(params) {};

/**
 * @param {function(!OData.ICountResult): ?=} success
 * @param {function(): ?=} error
 * @return {!OData.ICountResult}
 */
OData.Provider.prototype.count = function(success, error) {};

/**
 * @return {!OData.Provider}
 */
OData.Provider.prototype.withInlineCount = function() {};
/**
 * @record
 * @struct
 */
OData.ValueFactory = function() {};

/* TODO: ConstructSignature: OData */
/**
 * @constructor
 * @struct
 */
OData.ValueTypes = function() {};
 /** @type {string} */
OData.ValueTypes.Boolean;
 /** @type {string} */
OData.ValueTypes.Byte;
 /** @type {string} */
OData.ValueTypes.DateTime;
 /** @type {string} */
OData.ValueTypes.Decimal;
 /** @type {string} */
OData.ValueTypes.Double;
 /** @type {string} */
OData.ValueTypes.Single;
 /** @type {string} */
OData.ValueTypes.Guid;
 /** @type {string} */
OData.ValueTypes.Int32;
 /** @type {string} */
OData.ValueTypes.String;

/**
 * @constructor
 * @struct
 * @param {?} value
 * @param {string=} type
 */
OData.Value = function(value, type) {};
 /** @type {?} */
OData.Value.prototype.value;
 /** @type {?} */
OData.Value.prototype.type;
 /** @type {?} */
OData.Value.prototype.illegalChars;

/**
 * @param {?} haystack
 * @return {?}
 */
OData.Value.prototype.escapeIllegalChars = function(haystack) {};

/**
 * @param {?} date
 * @return {?}
 */
OData.Value.prototype.generateDate = function(date) {};

/**
 * @return {?}
 */
OData.Value.prototype.executeWithUndefinedType = function() {};

/**
 * @return {?}
 */
OData.Value.prototype.executeWithType = function() {};

/**
 * @return {string}
 */
OData.Value.prototype.execute = function() {};
