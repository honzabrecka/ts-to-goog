/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/delay/index.d.ts:

/* TODO: ExportAssignment in  */

/**
 * @template T
 * @param {number} ms
 * @param {T=} value
 * @return {?}
 */
function delay(ms, value) {}

/**
 * @param {number} ms
 * @param {?=} rejectionValue
 * @return {?}
 */
delay.reject = function(ms, rejectionValue) {};

/**
 * @constructor
 * @struct
 * @param {string=} message
 */
delay.CancelError = function(message) {};
 /** @type {string} */
delay.CancelError.prototype.name;

/** @typedef {?} */
delay.PDelayedThunk;

/** @typedef {?} */
delay.PDelayedPassThroughThunk;
/**
 * @record
 * @struct
 */
delay.DelayedPromiseLike = function() {};

/**
 * @template TResult1, TResult2
 * @param {function(T): (TResult1|!PromiseLike<TResult1>)=} onfulfilled
 * @param {function(?): (TResult2|!PromiseLike<TResult2>)=} onrejected
 * @return {!Promise<(TResult1|TResult2)>}
 */
delay.DelayedPromiseLike.prototype.then = function(onfulfilled, onrejected) {};

/**
 * @template TResult
 * @param {function(?): (TResult|!PromiseLike<TResult>)=} onrejected
 * @return {!Promise<(T|TResult)>}
 */
delay.DelayedPromiseLike.prototype.catch = function(onrejected) {};

/**
 * @return {void}
 */
delay.DelayedPromiseLike.prototype.cancel = function() {};
