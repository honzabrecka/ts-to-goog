/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/msgpack-lite/index.d.ts:

/* TODO: ImportDeclaration in  */

/**
 * encode from JS Object to MessagePack
 * @param {?} input
 * @param {?=} options
 * @return {?}
 */
function encode(input, options) {}

/**
 * decode from MessagePack to JS Object
 * @param {(?|!Uint8Array|!Array<number>)} input
 * @param {?=} options
 * @return {?}
 */
function decode(input, options) {}

/**
 * create a stream that encodes from JS Object to MessagePack
 * @param {?=} options
 * @return {?}
 */
function createEncodeStream(options) {}

/**
 * create a stream that decodes from MessagePack (Buffer) to JS Object
 * @param {?=} options
 * @return {?}
 */
function createDecodeStream(options) {}

/**
 * Codecs allow for Custom Extension Types
 * Register a custom extension type number to serialize/deserialize your own class instances.
 * https://github.com/kawanet/msgpack-lite#custom-extension-types-codecs
 * If you wish to modify the default built-in codec, you can access it at msgpack.codec.preset
 * @param {?=} options
 * @return {?}
 */
function createCodec(options) {}
 /** @type {?} */
var codec;
/**
 * @record
 * @struct
 */
function Codec() {}

/**
 * Register a custom extension to serialize your own class instances
 * 
 * @template T
 * @param {number} etype an integer within the range of 0 and 127 (0x0 and 0x7F)
 * @param {?} Class the constructor of the type you wish to serialize
 * @param {?} packer a function that converts an instance of T to bytes
 * @return {void}
 */
Codec.prototype.addExtPacker = function(etype, Class, packer) {};

/**
 * Register a custom extension to deserialize your own class instances
 * 
 * @template T
 * @param {number} etype an integer within the range of 0 and 127 (0x0 and 0x7F)
 * @param {?} unpacker a function that converts bytes to an instance of T
 * @return {void}
 */
Codec.prototype.addExtUnpacker = function(etype, unpacker) {};
/**
 * @record
 * @struct
 */
function Encoder() {}
 /** @type {?} */
Encoder.prototype.bufferish;
 /** @type {number} */
Encoder.prototype.maxBufferSize;
 /** @type {number} */
Encoder.prototype.minBufferSize;
 /** @type {number} */
Encoder.prototype.offset;
 /** @type {number} */
Encoder.prototype.start;

/**
 * @param {?} chunk
 * @return {void}
 */
Encoder.prototype.write = function(chunk) {};

/**
 * @return {void}
 */
Encoder.prototype.fetch = function() {};

/**
 * @return {void}
 */
Encoder.prototype.flush = function() {};

/**
 * @param {?} chunk
 * @return {void}
 */
Encoder.prototype.push = function(chunk) {};

/**
 * @return {number}
 */
Encoder.prototype.pull = function() {};

/**
 * @return {number}
 */
Encoder.prototype.read = function() {};

/**
 * @param {number} length
 * @return {number}
 */
Encoder.prototype.reserve = function(length) {};

/**
 * @param {?} buffer
 * @return {void}
 */
Encoder.prototype.send = function(buffer) {};

/**
 * @param {?} chunk
 * @return {void}
 */
Encoder.prototype.encode = function(chunk) {};

/**
 * @param {?} chunk
 * @return {void}
 */
Encoder.prototype.end = function(chunk) {};
/**
 * @record
 * @struct
 */
function Decoder() {}
 /** @type {?} */
Decoder.prototype.bufferish;
 /** @type {number} */
Decoder.prototype.offset;

/**
 * @return {void}
 */
Decoder.prototype.fetch = function() {};

/**
 * @return {void}
 */
Decoder.prototype.flush = function() {};

/**
 * @return {number}
 */
Decoder.prototype.pull = function() {};

/**
 * @return {number}
 */
Decoder.prototype.read = function() {};

/**
 * @param {?} chunk
 * @return {void}
 */
Decoder.prototype.write = function(chunk) {};

/**
 * @param {number} length
 * @return {number}
 */
Decoder.prototype.reserve = function(length) {};

/**
 * @param {?} chunk
 * @return {void}
 */
Decoder.prototype.decode = function(chunk) {};

/**
 * @param {?} chunk
 * @return {void}
 */
Decoder.prototype.push = function(chunk) {};

/**
 * @param {?} chunk
 * @return {void}
 */
Decoder.prototype.end = function(chunk) {};
/**
 * @record
 * @struct
 */
function EncodeStream() {}
 /** @type {?} */
EncodeStream.prototype.encoder;
/**
 * @record
 * @struct
 */
function DecodeStream() {}
 /** @type {?} */
DecodeStream.prototype.decoder;
/**
 * @record
 * @struct
 */
function CodecOptions() {}
 /** @type {boolean} */
CodecOptions.prototype.preset;
 /** @type {boolean} */
CodecOptions.prototype.safe;
 /** @type {boolean} */
CodecOptions.prototype.raw;
 /** @type {boolean} */
CodecOptions.prototype.int64;
 /** @type {boolean} */
CodecOptions.prototype.binarraybuffer;
 /** @type {boolean} */
CodecOptions.prototype.uint8array;
/**
 * @record
 * @struct
 */
function EncoderOptions() {}
 /** @type {?} */
EncoderOptions.prototype.codec;
/**
 * @record
 * @struct
 */
function DecoderOptions() {}
 /** @type {?} */
DecoderOptions.prototype.codec;
