/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/chui/index.d.ts:
/**
 * @record
 * @struct
 */
function ChocolateChipStatic() {}
 /** @type {!ChUIEventInterface} */
ChocolateChipStatic.prototype.eventStart;
 /** @type {!ChUIEventInterface} */
ChocolateChipStatic.prototype.eventEnd;
 /** @type {!ChUIEventInterface} */
ChocolateChipStatic.prototype.eventMove;
 /** @type {!ChUIEventInterface} */
ChocolateChipStatic.prototype.eventCancel;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isIEEdge;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isWideScreen;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isWideScreenPortrait;
 /** @type {boolean} */
ChocolateChipStatic.prototype.isNavigating;
 /** @type {boolean} */
ChocolateChipStatic.prototype.UIBrowserHashModification;
 /** @type {!ChocolateChipElementArray} */
ChocolateChipStatic.prototype.body;
 /** @type {!Array<string>} */
ChocolateChipStatic.prototype.UINavigationHistory;
 /** @type {?} */
ChocolateChipStatic.prototype.UISlideout;

/**
 * This method will concatenate strings or values as a cleaner alternative to using the '+' operator.
 * 
 * @param {...string} string or number A comma separated series of strings to concatenate.
 * @return {string} string
 */
ChocolateChipStatic.prototype.concat = function(string) {};

/**
 * The method will iterate over an array.
 * 
 * @param {!Array<?>} obj An iterable object.
 * @param {!Function} callback A callback to execute on each loop.
 * @param {?=} args Any arguments you need to pass to the callback.
 * @return {?}
 */
ChocolateChipStatic.prototype.forEach = function(obj, callback, args) {};

/**
 * Return the version of the current browser.
 * 
 * @return {number} number Returns the current browser's version.
 */
ChocolateChipStatic.prototype.browserVersion = function() {};

/**
 * Hide the navigation bar, raising up the content below it.
 * 
 * @return {void} void
 */
ChocolateChipStatic.prototype.UIHideNavBar = function() {};

/**
 * If the navigation bar is hidden, show it, pushing down the content to make room.
 * 
 * @return {void} void
 */
ChocolateChipStatic.prototype.UIShowNavBar = function() {};

/**
 * Method to tell ChocolateChip-UI to register navigation history on Window hash.
 * @return {void}
 */
ChocolateChipStatic.prototype.UIEnableBrowserHashModification = function() {};

/**
 * Navigate to the article indicated by the provided destination ID. This enters the destination into the navigation history array.
 * 
 * param destination An id for the article to navigate to.
 * @param {string} destination
 * @return {void} void
 */
ChocolateChipStatic.prototype.UIGoToArticle = function(destination) {};

/**
 * Go back to the previous article from whence you came. This resets the navigation history array.
 * 
 * @return {void} void
 */
ChocolateChipStatic.prototype.UIGoBack = function() {};

/**
 * Go back to the article indicated by the provided ID. This is for non-linear back navigation. This will reset the navigation history array to match the current state.
 * @param {string} articleID
 * @return {void}
 */
ChocolateChipStatic.prototype.UIGoBackToArticle = function(articleID) {};

/**
 * Display a transparent screen over the UI.
 * 
 * @param {number=} opacity The percentage of opacity for the screen.
 * @return {void} void
 */
ChocolateChipStatic.prototype.UIBlock = function(opacity) {};

/**
 * Remove the transparent screen covering the UI.
 * 
 * @return {void} void
 */
ChocolateChipStatic.prototype.UIUnblock = function() {};

/**
 * Create and show a Popup with title and message. Possible options: {id: "#myPopup", title: "My Popup",
 * message: "Woohoo!", cancelButton: "Forget It!", contiueButton: "Whatever", callback: function() {console.log('Blah!');}, empty: false }.
 * 
 * param options UIPopupOptions
 * @param {{id: string, title: string, message: string, cancelButton: string, continueButton: string, callback: !Function, empty: boolean}=} options
 * @return {void}
 */
ChocolateChipStatic.prototype.UIPopup = function(options) {};

/**
 * Create and show a Popover. Options: {id: "#myPopover", title: "Whatever", callback: function() {console.log('Blah!');}}.
 * 
 * param options UIPopoverOptions
 * @param {{id: string, callback: !Function, title: string}=} options
 * @return {void} void
 */
ChocolateChipStatic.prototype.UIPopover = function(options) {};

/**
 * Close any currently visible popovers.
 * 
 * @return {void} void
 */
ChocolateChipStatic.prototype.UIPopoverClose = function() {};

/**
 * Create a segmented control: {id: "mySegments", className: "seggie", labels: ["one", "two","three"], selected: 1}
 * 
 * param: options UICreateSegmentedOptions
 * @param {{id: string, className: string, labels: !Array<string>, selected: number}=} options
 * @return {!ChocolateChipElementArray}
 */
ChocolateChipStatic.prototype.UICreateSegmented = function(options) {};

/**
 * Initialize a horiontal or vertical paging control. This uses a segmented control in the navigation bar with a class
 * like "segmented paging horizontal" or "segmented paging vertical". It uses a single article with multiple sections to paginate.
 * 
 * @return {void} void
 */
ChocolateChipStatic.prototype.UIPaging = function() {};

/**
 * Creates a sheet. Minimum option is an id: {id : 'starTrek', listClass :'enterprise', background: 'transparent', handle: false }
 * 
 * @param {{id: string, listClass: string, background: string, handle: boolean}} options
 * @return {void} void
 */
ChocolateChipStatic.prototype.UISheet = function(options) {};

/**
 * Show a sheet by passing this its ID.
 * 
 * @param {string} id
 * @return {void} void
 */
ChocolateChipStatic.prototype.UIShowSheet = function(id) {};

/**
 * Hide any currently displayed sheets.
 * 
 * @return {void} void
 */
ChocolateChipStatic.prototype.UIHideSheet = function() {};

/**
 * Reset the value of the stepper to its defaults at initialization. Pass it a reference to the stepper to reset.
 * 
 * @param {!Array<!HTMLElement>} stepper
 * @return {void} void
 */
ChocolateChipStatic.prototype.UIResetStepper = function(stepper) {};

/**
 * Create a switch control. Possible options: { id: '#myId', name: 'fruit.mango', state: 'on', value: 'Mango', checked: 'on', style: 'traditional', callback: function() { alert('hi');}}
 * 
 * @param {{id: string, name: string, state: string, value: (string|number), checked: string, style: string, callback: function(): ?}=} options
 * @return {void} void
 */
ChocolateChipStatic.prototype.UICreateSwitch = function(options) {};

/**
 * Creates a tabbar. On iOS this is at the bottom of the screen. On Android and Windows, it is at the top.
 * Options: {id: 'mySpecialTabbar', tabs: 4, labels: ["Refresh", "Add", "Info", "Downloads", "Favorite"], icons: ["refresh", "add", "info", "downloads", "favorite"], selected: 2 }
 * 
 * @param {{id: string, tabs: number, labels: !Array<string>, icons: !Array<string>, selected: number}=} options
 * @return {void} void
 */
ChocolateChipStatic.prototype.UITabbar = function(options) {};

/**
 * Create a search bar for an article. Options: { articleId: '#products', id: 'productSearch', placeholder: 'Find a product', results: 5 }
 * 
 * @param {{articleId: ?, id: string, placeholder: string, results: number}=} options
 * @return {void} void
 */
ChocolateChipStatic.prototype.UISearch = function(options) {};

/**
 * Create and initialize a swipable carousel. Options: {target : '#myCarousel', panels: ['<p>stuff</p>','<p>more</p>'], loop: true, pagination: true }
 * 
 * @param {{target: ?, panels: !ChocolateChipElementArray, loop: boolean, pagination: boolean}} options
 * @return {void} void
 */
ChocolateChipStatic.prototype.UISetupCarousel = function(options) {};

/**
 * Bind the values of data-models to elements with data-controllers: <input id='myText' data-controller='input-value' type='text'></li><h3 data-model='input-value'></h3>.
 * You can bind a single model to its controller by providing its name as the argument: $.UIBindData('input-value');
 * 
 * @param {string=} controller A string indicating the controller whose value a model is bound to.
 * @return {void} void
 */
ChocolateChipStatic.prototype.UIBindData = function(controller) {};

/**
 * Unbind the values of data-models from their data-controllers.
 * If you provide a controller name as the argument, only that controller will be unbound.
 * 
 * @param {string=} controller A controller to unbind.
 * @return {void} void
 */
ChocolateChipStatic.prototype.UIUnBindData = function(controller) {};
/**
 * @record
 * @struct
 */
function ChocolateChipElementArray() {}

/**
 * Iterate over an Array object, executing a function for each matched element.
 * 
 * @param {function(?, number): void} func
 * @return {void} void
 */
ChocolateChipElementArray.prototype.forEach = function(func) {};

/**
 * Check the current matched set of elements against a selector or element and return it
 * if it matches the given arguments.
 * 
 * Check the current matched set of elements against a selector or element and return it
 * if it matches the given arguments.
 * 
 * @param {string|?} selector_or_element A string containing a selector expression to match elements against.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.iz = function(selector_or_element) {};

/**
 * Check the current matched set of elements against a selector or element and return it
 * if it does not match the given arguments.
 * 
 * Check the current matched set of elements against a selector or element and return it
 * if it does not match the given arguments.
 * 
 * @param {string|?} selector_or_element A string containing a selector expression to match elements against.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.iznt = function(selector_or_element) {};

/**
 * Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.
 * 
 * Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.
 * 
 * @param {string|!HTMLElement} selector_or_contained A string containing a selector expression to match elements against. / A DOM element to match elements against.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.haz = function(selector_or_contained) {};

/**
 * Reduce the set of matched elements to those that have a descendant that does not match the selector or DOM element.
 * 
 * Reduce the set of matched elements to those that have a descendant that does not match the selector or DOM element.
 * 
 * @param {string|!HTMLElement} selector_or_contained A string containing a selector expression to match elements against. / A DOM element to match elements against.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.haznt = function(selector_or_contained) {};

/**
 * Return any of the matched elements that have the given class.
 * 
 * @param {string} className The class name to search for.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.hazClass = function(className) {};

/**
 * Return any of the matched elements that do not have the given class.
 * 
 * @param {string} className The class name to search for.
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.hazntClass = function(className) {};

/**
 * Return any of the matched elements that have the given attribute.
 * 
 * @param {string} attributeName
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.hazAttr = function(attributeName) {};

/**
 * Return any of the matched elements that do not have the given attribute.
 * 
 * @param {string} attributeName
 * @return {!ChocolateChipElementArray} HTMLElement[]
 */
ChocolateChipElementArray.prototype.hazntAttr = function(attributeName) {};

/**
 * Attach a handler to an event for the elements.
 * 
 * @param {(string|!ChUIEventInterface)} eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
 * @param {function(!Event): ?} handler A function to execute each time the event is triggered.
 * @param {boolean=} useCapture Setting the third argument to true will trigger event bubbling. The default is false.
 * @return {!ChocolateChipStatic} ChocolateChipStatic
 */
ChocolateChipElementArray.prototype.bind = function(eventType, handler, useCapture) {};

/**
 * Remove a handler for an event from the elements.
 * 
 * @param {(string|!ChUIEventInterface)} eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
 * @param {function(!Event): ?} handler A function to execute each time the event is triggered.
 * @param {boolean=} useCapture Setting the third argument to true will trigger event bubbling. The default is false.
 * @return {!ChocolateChipStatic} ChocolateChipStatic
 */
ChocolateChipElementArray.prototype.unbind = function(eventType, handler, useCapture) {};

/**
 * Add a delegated event to listen for the provided event on the descendant elements.
 * 
 * @param {?} selector A string defining the descendant elements to listen on for the designated event.
 * @param {(string|!ChUIEventInterface)} eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
 * @param {function(!Event): ?} handler A function to execute each time the event is triggered. The keyword "this" will refer
 * to the element receiving the event.
 * @param {boolean=} useCapture Setting the third argument to true will trigger event bubbling. The default is false.
 * @return {!ChocolateChipStatic} ChocolateChipStatic
 */
ChocolateChipElementArray.prototype.delegate = function(selector, eventType, handler, useCapture) {};

/**
 * Add a delegated event to listen for the provided event on the descendant elements.
 * 
 * @param {?} selector A string defining the descendant elements are listening for the event.
 * @param {(string|!ChUIEventInterface)} eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
 * @param {function(!Event): ?} handler A function handler assigned to this event.
 * @param {boolean=} useCapture Setting the third argument to true will trigger event bubbling. The default is false.
 * @return {!ChocolateChipStatic} ChocolateChipStatic
 */
ChocolateChipElementArray.prototype.undelegate = function(selector, eventType, handler, useCapture) {};

/**
 * Add a handler to an event for elements. If a selector is provided as the second argument, this implements a delegated event.
 * 
 * @param {(string|!ChUIEventInterface)} eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
 * @param {?} selector A string defining the descendant elements are listening for the event.
 * @param {function(!Event): ?=} handler A function handler assigned to this event.
 * @param {boolean=} capturePhase
 * @return {!ChocolateChipStatic} ChocolateChipStatic
 */
ChocolateChipElementArray.prototype.on = function(eventType, selector, handler, capturePhase) {};

/**
 * Remove a handler for an event from the elements. If the second argument is a selector, it tries to undelegate the event.
 * If no arugments are provided, it removes all events from the element(s).
 * 
 * @param {(string|!ChUIEventInterface)=} eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
 * @param {?=} selector A string defining the descendant elements are listening for the event.
 * @param {function(!Event): ?=} handler A function handler assigned to this event.
 * @param {boolean=} capturePhase
 * @return {!ChocolateChipStatic} ChocolateChipStatic
 */
ChocolateChipElementArray.prototype.off = function(eventType, selector, handler, capturePhase) {};

/**
 *
 * @param {(string|!ChUIEventInterface)} eventType
 * @return {void}
 */
ChocolateChipElementArray.prototype.trigger = function(eventType) {};

/**
 * Center an element to the screen.
 * @return {void}
 */
ChocolateChipElementArray.prototype.UICenter = function() {};

/**
 * Display a busy indicator. Posible options: {size: "100px", color: "#ff0000", position: "align-flush", duration: "2s"}.
 * 
 * @param {{size: string, color: string, position: (string|boolean), duration: string}=} options
 * @return {void} void
 */
ChocolateChipElementArray.prototype.UIBusy = function(options) {};

/**
 * Close the currently displayed Popup. This is executed on the popup: $('#myPopup').UIPopupClose().
 * 
 * @return {void} void
 */
ChocolateChipElementArray.prototype.UIPopupClose = function() {};

/**
 * Initialize a segmented control. Options: {selected: 2, callback: function() {console.log('Blah');}}
 * 
 * @param {{selected: number, callback: !Function}=} options
 * @return {void} void
 */
ChocolateChipElementArray.prototype.UISegmented = function(options) {};

/**
 * This method allows the user to use a segmented control to toggle a set of panels. It is executed on the segmented control.
 * The options id is the contain of the panels. The options callback is to execute when the user toggles a panel.
 * 
 * @param {string} panelsContainer
 * @param {function(): ?} callback
 * @return {void} void
 */
ChocolateChipElementArray.prototype.UIPanelToggle = function(panelsContainer, callback) {};

/**
 * Make a list editable. This can be enabling changing the order of list items, or deleting them, or both. Options: {editLabel: "Edit", doneLabel: "Done",
 * deleteLabel: "Delete", callback: function() {alert('Bye bye!');}, deletable: true, movable: true}.
 * 
 * @param {{editLabel: string, doneLabel: string, deleteLabel: string, callback: !Function, deletable: boolean, movable: boolean}=} options
 * @return {void} void
 */
ChocolateChipElementArray.prototype.UIEditList = function(options) {};

/**
 * Convert a simple list into a selection list. This converts the list into a radio button group, meaning only one can be selected at any time.
 * You can name the radios buttons using the options name. Options: {name: "selectedNamesGroup", selected: 2, callback: function() {alert('hi');}}
 * 
 * @param {{name: string, selected: number, callback: !Function}=} options
 * @return {void} void
 */
ChocolateChipElementArray.prototype.UISelectList = function(options) {};

/**
 * Create a stepper control by executing it on a span with the class "stepper". Possible options: {start: 0, end: 10, defaultValue: 3}.
 * 
 * @param {{start: number, end: number, defaultValue: number}} options
 * @return {void} void
 */
ChocolateChipElementArray.prototype.UIStepper = function(options) {};

/**
 * Initialize any existing switch controls: $('.switch').UISwitch();
 * 
 * @return {void} void
 */
ChocolateChipElementArray.prototype.UISwitch = function() {};

/**
 * Execute this on a range control to initialize it.
 * 
 * @return {void} void
 */
ChocolateChipElementArray.prototype.UIRange = function() {};
/**
 * @record
 * @struct
 */
function JQueryStatic() {}
 /** @type {!ChUIEventInterface} */
JQueryStatic.prototype.eventStart;
 /** @type {!ChUIEventInterface} */
JQueryStatic.prototype.eventEnd;
 /** @type {!ChUIEventInterface} */
JQueryStatic.prototype.eventMove;
 /** @type {!ChUIEventInterface} */
JQueryStatic.prototype.eventCancel;
 /** @type {boolean} */
JQueryStatic.prototype.isiPhone;
 /** @type {boolean} */
JQueryStatic.prototype.isiPad;
 /** @type {boolean} */
JQueryStatic.prototype.isiPod;
 /** @type {boolean} */
JQueryStatic.prototype.isiOS;
 /** @type {boolean} */
JQueryStatic.prototype.isAndroid;
 /** @type {boolean} */
JQueryStatic.prototype.isWebOS;
 /** @type {boolean} */
JQueryStatic.prototype.isBlackberry;
 /** @type {boolean} */
JQueryStatic.prototype.isTouchEnabled;
 /** @type {boolean} */
JQueryStatic.prototype.isOnline;
 /** @type {boolean} */
JQueryStatic.prototype.isStandalone;
 /** @type {boolean} */
JQueryStatic.prototype.isiOS6;
 /** @type {boolean} */
JQueryStatic.prototype.isiOS7;
 /** @type {boolean} */
JQueryStatic.prototype.isWin;
 /** @type {boolean} */
JQueryStatic.prototype.isWinPhone;
 /** @type {boolean} */
JQueryStatic.prototype.isIE10;
 /** @type {boolean} */
JQueryStatic.prototype.isIE11;
 /** @type {boolean} */
JQueryStatic.prototype.isIEEdge;
 /** @type {boolean} */
JQueryStatic.prototype.isWebkit;
 /** @type {boolean} */
JQueryStatic.prototype.isMobile;
 /** @type {boolean} */
JQueryStatic.prototype.isDesktop;
 /** @type {boolean} */
JQueryStatic.prototype.isSafari;
 /** @type {boolean} */
JQueryStatic.prototype.isChrome;
 /** @type {boolean} */
JQueryStatic.prototype.isNativeAndroid;
 /** @type {boolean} */
JQueryStatic.prototype.isWideScreen;
 /** @type {boolean} */
JQueryStatic.prototype.isWideScreenPortrait;
 /** @type {boolean} */
JQueryStatic.prototype.isNavigating;
 /** @type {boolean} */
JQueryStatic.prototype.UIBrowserHashModification;
 /** @type {!JQuery} */
JQueryStatic.prototype.body;
 /** @type {!Array<string>} */
JQueryStatic.prototype.UINavigationHistory;
 /** @type {?} */
JQueryStatic.prototype.UISlideout;
 /** @type {!Object} */
JQueryStatic.prototype.templates;
 /** @type {?} */
JQueryStatic.prototype.template;

/**
 * This method will concatenate strings or values as a cleaner alternative to using the '+' operator.
 * 
 * @param {...string} string or number A comma separated series of strings to concatenate.
 * @return {string} string
 */
JQueryStatic.prototype.concat = function(string) {};

/**
 * The method will iterate over an array.
 * 
 * @param {!Array<?>} obj An iterable object.
 * @param {!Function} callback A callback to execute on each loop.
 * @param {?=} args Any arguments you need to pass to the callback.
 * @return {?}
 */
JQueryStatic.prototype.forEach = function(obj, callback, args) {};

/**
 * Return the version of the current browser.
 * @return {number}
 */
JQueryStatic.prototype.browserVersion = function() {};

/**
 * Hide the navigation bar, raising up the content below it.
 * @return {void}
 */
JQueryStatic.prototype.UIHideNavBar = function() {};

/**
 * If the navigation bar is hidden, show it, pushing down the content to make room.
 * @return {void}
 */
JQueryStatic.prototype.UIShowNavBar = function() {};

/**
 * Method to tell ChocolateChip-UI to register navigation history on Window hash.
 * @return {void}
 */
JQueryStatic.prototype.UIEnableBrowserHashModification = function() {};

/**
 * Navigate to the article indicated by the provided destination ID. This enters the destination into the navigation history array.
 * 
 * @param {string} destination An id for the article to navigate to.
 * @return {void} void
 */
JQueryStatic.prototype.UIGoToArticle = function(destination) {};

/**
 * Go back to the previous article from whence you came. This resets the navigation history array.
 * 
 * @return {void} void
 */
JQueryStatic.prototype.UIGoBack = function() {};

/**
 * Go back to the article indicated by the provided ID. This is for non-linear back navigation. This will reset the navigation history array to match the current state.
 * 
 * @param {string} articleID
 * @return {void} void
 */
JQueryStatic.prototype.UIGoBackToArticle = function(articleID) {};

/**
 * Display a transparent screen over the UI.
 * 
 * @param {number=} opacity The percentage of opacity for the screen.
 * @return {void} void
 */
JQueryStatic.prototype.UIBlock = function(opacity) {};

/**
 * Remove the transparent screen covering the UI.
 * 
 * @return {void} void
 */
JQueryStatic.prototype.UIUnblock = function() {};

/**
 * Create and show a Popup with title and message. Possible options: {id: "#myPopup", title: "My Popup",
 * message: "Woohoo!", cancelButton: "Forget It!", contiueButton: "Whatever", callback: function() {console.log('Blah!');}, empty: false }.
 * 
 * @param {{id: string, title: string, message: string, cancelButton: string, continueButton: string, callback: !Function, empty: boolean}=} options UIPopupOptions
 * @return {void} void
 */
JQueryStatic.prototype.UIPopup = function(options) {};

/**
 * Create and show a Popover. Options: {id: "#myPopover", title: "Whatever", callback: function() {console.log('Blah!');}}.
 * 
 * @param {{id: string, callback: !Function, title: string}=} options UIPopoverOptions
 * @return {void} void
 */
JQueryStatic.prototype.UIPopover = function(options) {};

/**
 * Close any currently visible popovers.
 * 
 * @return {void} void
 */
JQueryStatic.prototype.UIPopoverClose = function() {};

/**
 * Create a segmented control: {id: "mySegments", className: "seggie", labels: ["one", "two","three"], selected: 1}
 * 
 * \@param: options UICreateSegmentedOptions
 * @param {{id: string, className: string, labels: !Array<string>, selected: number}} options
 * @return {!JQuery} JQuery
 */
JQueryStatic.prototype.UICreateSegmented = function(options) {};

/**
 * Initialize a horiontal or vertical paging control. This uses a segmented control in the navigation bar with a class
 * like "segmented paging horizontal" or "segmented paging vertical". It uses a single article with multiple sections to paginate.
 * 
 * @return {void} void
 */
JQueryStatic.prototype.UIPaging = function() {};

/**
 * Creates a sheet. Minimum option is an id: {id : 'starTrek', listClass :'enterprise', background: 'transparent', handle: false }
 * 
 * @param {{id: string, listClass: string, background: string, handle: boolean}} options
 * @return {void} void
 */
JQueryStatic.prototype.UISheet = function(options) {};

/**
 * Show a sheet by passing this its ID.
 * 
 * @param {string} id
 * @return {void} void
 */
JQueryStatic.prototype.UIShowSheet = function(id) {};

/**
 * Hide any currently displayed sheets.
 * 
 * @return {void} void
 */
JQueryStatic.prototype.UIHideSheet = function() {};

/**
 * Reset the value of the stepper to its defaults at initialization. Pass it a reference to the stepper to reset.
 * 
 * @param {!JQuery} stepper
 * @return {void} void
 */
JQueryStatic.prototype.UIResetStepper = function(stepper) {};

/**
 * Create a switch control. Possible options: { id: '#myId', name: 'fruit.mango', state: 'on', value: 'Mango', checked: 'on', style: 'traditional', callback: function() { alert('hi');}}
 * 
 * @param {{id: string, name: string, state: string, value: (string|number), checked: string, style: string, callback: function(): ?}=} options
 * @return {void} void
 */
JQueryStatic.prototype.UICreateSwitch = function(options) {};

/**
 * Creates a tabbar. On iOS this is at the bottom of the screen. On Android and Windows, it is at the top.
 * Options: {id: 'mySpecialTabbar', tabs: 4, labels: ["Refresh", "Add", "Info", "Downloads", "Favorite"], icons: ["refresh", "add", "info", "downloads", "favorite"], selected: 2 }
 * 
 * @param {{id: string, tabs: number, labels: !Array<string>, icons: !Array<string>, selected: number}=} options
 * @return {void} void
 */
JQueryStatic.prototype.UITabbar = function(options) {};

/**
 * Create a search bar for an article. Options: { articleId: '#products', id: 'productSearch', placeholder: 'Find a product', results: 5 }
 * 
 * @param {{articleId: ?, id: string, placeholder: string, results: number}=} options
 * @return {void} void
 */
JQueryStatic.prototype.UISearch = function(options) {};

/**
 * Create and initialize a swipable carousel. Options: {target : '#myCarousel', panels: ['<p>stuff</p>','<p>more</p>'], loop: true, pagination: true }
 * 
 * @param {{target: ?, panels: !JQuery, loop: boolean, pagination: boolean}} options
 * @return {void} void
 */
JQueryStatic.prototype.UISetupCarousel = function(options) {};

/**
 * Bind the values of data-models to elements with data-controllers: <input id='myText' data-controller='input-value' type='text'></li><h3 data-model='input-value'></h3>.
 * You can bind a single model to its controller by providing its name as the argument: $.UIBindData('input-value');
 * 
 * @param {string=} controller A string indicating the controller whose value a model is bound to.
 * @return {void} void
 */
JQueryStatic.prototype.UIBindData = function(controller) {};

/**
 * Unbind the values of data-models from their data-controllers.
 * If you provide a controller name as the argument, only that controller will be unbound.
 * 
 * @param {string=} controller A controller to unbind.
 * @return {void} void
 */
JQueryStatic.prototype.UIUnBindData = function(controller) {};
/**
 * @record
 * @struct
 */
function JQuery() {}

/**
 * Iterate over an Array object, executing a function for each matched element.
 * 
 * @param {function(!HTMLElement, number): ?} callback A function to execute while looping over an interable. This takes to arguments: ctx: HTMLElement and idx: number.
 * @return {!JQuery} JQuery
 */
JQuery.prototype.forEach = function(callback) {};

/**
 * Check the current matched set of elements against a selector or element and return it
 * if it matches the given arguments.
 * 
 * Check the current matched set of elements against a selector or element and return it
 * if it matches the given arguments.
 * 
 * @param {string|?} selector_or_element A string containing a selector expression to match elements against.
 * @return {!JQuery} JQuery
 */
JQuery.prototype.iz = function(selector_or_element) {};

/**
 * Check the current matched set of elements against a selector or element and return it
 * if it does not match the given arguments.
 * 
 * Check the current matched set of elements against a selector or element and return it
 * if it does not match the given arguments.
 * 
 * @param {string|?} selector_or_element A string containing a selector expression to match elements against.
 * @return {!JQuery} JQuery
 */
JQuery.prototype.iznt = function(selector_or_element) {};

/**
 * Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.
 * 
 * Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.
 * 
 * @param {string|!HTMLElement} selector_or_contained A string containing a selector expression to match elements against. / A DOM element to match elements against.
 * @return {!JQuery} JQuery
 */
JQuery.prototype.haz = function(selector_or_contained) {};

/**
 * Reduce the set of matched elements to those that have a descendant that does not match the selector or DOM element.
 * 
 * Reduce the set of matched elements to those that have a descendant that does not match the selector or DOM element.
 * 
 * @param {string|!HTMLElement} selector_or_contained A string containing a selector expression to match elements against. / A DOM element to match elements against.
 * @return {!JQuery} JQuery
 */
JQuery.prototype.haznt = function(selector_or_contained) {};

/**
 * Return any of the matched elements that have the given class.
 * 
 * @param {string} className The class name to search for.
 * @return {!JQuery} JQuery
 */
JQuery.prototype.hazClass = function(className) {};

/**
 * Return any of the matched elements that do not have the given class.
 * 
 * @param {string} className The class name to search for.
 * @return {!JQuery} JQuery
 */
JQuery.prototype.hazntClass = function(className) {};

/**
 * Return any of the matched elements that have the given attribute.
 * 
 * @param {string} attributeName
 * @return {!JQuery} JQuery
 */
JQuery.prototype.hazAttr = function(attributeName) {};

/**
 * Return any of the matched elements that do not have the given attribute.
 * 
 * @param {string} attributeName
 * @return {!JQuery} JQuery
 */
JQuery.prototype.hazntAttr = function(attributeName) {};

/**
 * Center an element to the screen.
 * 
 * @return {void} void
 */
JQuery.prototype.UICenter = function() {};

/**
 * Display a busy indicator. Posible options: {size: "100px", color: "#ff0000", position: "align-flush", duration: "2s"}.
 * 
 * @param {{size: string, color: string, position: (string|boolean), duration: string}=} options
 * @return {void} void
 */
JQuery.prototype.UIBusy = function(options) {};

/**
 * Close the currently displayed Popup. This is executed on the popup: $('#myPopup').UIPopupClose().
 * 
 * @return {void} void
 */
JQuery.prototype.UIPopupClose = function() {};

/**
 * Initialize a segmented control. Options: {selected: 2, callback: function() {console.log('Blah');}}
 * 
 * @param {{selected: number, callback: !Function}=} options
 * @return {void} void
 */
JQuery.prototype.UISegmented = function(options) {};

/**
 * This method allows the user to use a segmented control to toggle a set of panels. It is executed on the segmented control.
 * The options id is the contain of the panels. The options callback is to execute when the user toggles a panel.
 * 
 * @param {string} panelsContainer
 * @param {function(): ?} callback
 * @return {void} void
 */
JQuery.prototype.UIPanelToggle = function(panelsContainer, callback) {};

/**
 * Make a list editable. This can be enabling changing the order of list items, or deleting them, or both. Options: {editLabel: "Edit", doneLabel: "Done",
 * deleteLabel: "Delete", callback: function() {alert('Bye bye!');}, deletable: true, movable: true}.
 * 
 * @param {{editLabel: string, doneLabel: string, deleteLabel: string, callback: !Function, deletable: boolean, movable: boolean}=} options
 * @return {void} void
 */
JQuery.prototype.UIEditList = function(options) {};

/**
 * Convert a simple list into a selection list. This converts the list into a radio button group, meaning only one can be selected at any time.
 * You can name the radios buttons using the options name. Options: {name: "selectedNamesGroup", selected: 2, callback: function() {alert('hi');}}
 * 
 * @param {{name: string, selected: number, callback: !Function}=} options
 * @return {void} void
 */
JQuery.prototype.UISelectList = function(options) {};

/**
 * Create a stepper control by executing it on a span with the class "stepper". Possible options: {start: 0, end: 10, defaultValue: 3}.
 * 
 * @param {{start: number, end: number, defaultValue: number}} options
 * @return {void} void
 */
JQuery.prototype.UIStepper = function(options) {};

/**
 * Initialize any existing switch controls: $('.switch').UISwitch();
 * 
 * @return {void} void
 */
JQuery.prototype.UISwitch = function() {};

/**
 * Execute this on a range control to initialize it.
 * 
 * @return {void} void
 */
JQuery.prototype.UIRange = function() {};

/**
 * Attach a handler to an event for the elements.
 * 
 * Attach a handler to an event for the elements.
 * 
 * Attach a handler to an event for the elements.
 * 
 * Attach a handler to an event for the elements.
 * 
 * @param {(string|!ChUIEventInterface)} eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
 * @param {?|function(!JQueryEventObject): ?|boolean} eventData_or_handler_or_preventBubble An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered. / Setting the third argument to false will attach a function that prevents the default action from occurring and stops the event from bubbling. The default is true.
 * @param {function(!JQueryEventObject): ?|boolean=} handler_or_preventBubble A function to execute each time the event is triggered. / Setting the third argument to false will attach a function that prevents the default action from occurring and stops the event from bubbling. The default is true.
 * @return {!JQuery} JQuery
 */
JQuery.prototype.bind = function(eventType, eventData_or_handler_or_preventBubble, handler_or_preventBubble) {};

/**
 * @param {?} selector
 * @param {(string|!ChUIEventInterface)} eventType
 * @param {function(!JQueryEventObject): ?|?} handler_or_eventData
 * @param {function(!JQueryEventObject): ?=} handler
 * @return {!JQuery}
 */
JQuery.prototype.delegate = function(selector, eventType, handler_or_eventData, handler) {};

/**
 * Remove an event handler.
 * 
 * Remove an event handler.
 * 
 * @param {(string|!ChUIEventInterface)} events One or more space-separated event types and optional namespaces, or just namespaces, such as "click", "keydown.myPlugin", or ".myPlugin".
 * @param {string|function(!JQueryEventObject): ?=} selector_or_handler A selector which should match the one originally passed to .on() when attaching event handlers. / A handler function previously attached for the event(s), or the special value false.
 * @param {function(!JQueryEventObject): ?=} handler A handler function previously attached for the event(s), or the special value false.
 * @return {!JQuery} JQuery
 */
JQuery.prototype.off = function(events, selector_or_handler, handler) {};

/**
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * @param {(string|!ChUIEventInterface)} events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
 * @param {function(!JQueryEventObject, !Array<?>): ?|?|string} handler_or_data_or_selector A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false. Rest parameter args is for optional parameters passed to jQuery.trigger(). Note that the actual parameters on the event handler function must be marked as optional (? syntax). / Data to be passed to the handler in event.data when an event is triggered. / A selector string to filter the descendants of the selected elements that trigger the event. If the selector is null or omitted, the event is always triggered when it reaches the selected element.
 * @param {function(!JQueryEventObject, !Array<?>): ?|?=} handler_or_data A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false. / Data to be passed to the handler in event.data when an event is triggered.
 * @param {function(!JQueryEventObject, !Array<?>): ?=} handler A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false.
 * @return {!JQuery} JQuery
 */
JQuery.prototype.on = function(events, handler_or_data_or_selector, handler_or_data, handler) {};

/**
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * @param {(string|!ChUIEventInterface)} events A string containing one or more JavaScript event types, such as "click" or "submit," or custom event names. / One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
 * @param {function(!JQueryEventObject): ?|!Object|string} handler_or_data_or_selector A function to execute at the time the event is triggered. / An object containing data that will be passed to the event handler. / A selector string to filter the descendants of the selected elements that trigger the event. If the selector is null or omitted, the event is always triggered when it reaches the selected element.
 * @param {function(!JQueryEventObject): ?|?=} handler_or_data A function to execute at the time the event is triggered. / A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false. / Data to be passed to the handler in event.data when an event is triggered.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false.
 * @return {!JQuery} JQuery
 */
JQuery.prototype.one = function(events, handler_or_data_or_selector, handler_or_data, handler) {};

/**
 * Execute all handlers and behaviors attached to the matched elements for the given event type.
 * 
 * @param {(string|!ChUIEventInterface)} eventType A string containing a JavaScript event type, such as click or submit.
 * @param {(!Object|!Array<?>)=} extraParameters Additional parameters to pass along to the event handler.
 * @return {!JQuery} JQuery
 */
JQuery.prototype.trigger = function(eventType, extraParameters) {};

/**
 * Execute all handlers attached to an element for an event.
 * 
 * @param {(string|!ChUIEventInterface)} eventType A string containing a JavaScript event type, such as click or submit.
 * @param {...?} extraParameters An array of additional parameters to pass along to the event handler.
 * @return {!Object} Object
 */
JQuery.prototype.triggerHandler = function(eventType, extraParameters) {};

/**
 * Remove a previously-attached event handler from the elements.
 * 
 * Remove a previously-attached event handler from the elements.
 * 
 * @param {(string|!ChUIEventInterface)=} eventType A string containing a JavaScript event type, such as click or submit.
 * @param {function(!JQueryEventObject): ?|boolean=} handler_or_fls The function that is to be no longer executed. / Unbinds the corresponding 'return false' function that was bound using .bind( eventType, false ).
 * @return {!JQuery} JQuery
 */
JQuery.prototype.unbind = function(eventType, handler_or_fls) {};

/**
 * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
 * 
 * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
 * 
 * @param {(string|!ChUIEventInterface)} selector A selector which will be used to filter the event results.
 * @param {string|!Object} eventType_or_events A string containing a JavaScript event type, such as "click" or "keydown" / An object of one or more event types and previously bound functions to unbind from them.
 * @param {function(!JQueryEventObject): ?=} handler A function to execute at the time the event is triggered.
 * @return {!JQuery} JQuery
 */
JQuery.prototype.undelegate = function(selector, eventType_or_events, handler) {};
/**
 * @record
 * @struct
 */
function ChUIEventInterface() {}
 /** @type {string} */
ChUIEventInterface.prototype.eventStart;
 /** @type {string} */
ChUIEventInterface.prototype.eventEnd;
 /** @type {string} */
ChUIEventInterface.prototype.eventMove;
 /** @type {string} */
ChUIEventInterface.prototype.eventCancel;
 /** @type {string} */
ChUIEventInterface.prototype.tap;
 /** @type {string} */
ChUIEventInterface.prototype.singletap;
 /** @type {string} */
ChUIEventInterface.prototype.doubletap;
 /** @type {string} */
ChUIEventInterface.prototype.longtap;
 /** @type {string} */
ChUIEventInterface.prototype.swipe;
 /** @type {string} */
ChUIEventInterface.prototype.swipeleft;
 /** @type {string} */
ChUIEventInterface.prototype.swiperight;
 /** @type {string} */
ChUIEventInterface.prototype.swipeup;
 /** @type {string} */
ChUIEventInterface.prototype.swipedown;
/**
 * @record
 * @struct
 */
function JQueryEventConstructor() {}

/* TODO: CallSignature:  */

/* TODO: ConstructSignature:  */
/**
 * @record
 * @struct
 */
function JQueryEventInterface() {}
 /** @type {!JQueryEventConstructor} */
JQueryEventInterface.prototype.Event;
/**
 * @record
 * @struct
 */
function BaseJQueryEventObject() {}
/**
 * @extends {BaseJQueryEventObject}
 * @extends {JQueryInputEventObject}
 * @extends {JQueryMouseEventObject}
 * @extends {JQueryKeyEventObject}
 * @record
 * @struct
 */
function JQueryEventObject() {}
/**
 * @extends {BaseJQueryEventObject}
 * @record
 * @struct
 */
function JQueryInputEventObject() {}
/**
 * @extends {JQueryInputEventObject}
 * @record
 * @struct
 */
function JQueryMouseEventObject() {}
/**
 * @extends {JQueryInputEventObject}
 * @record
 * @struct
 */
function JQueryKeyEventObject() {}
