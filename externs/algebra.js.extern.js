/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/algebra.js/index.d.ts:
/**
 * @constructor
 * @struct
 */
function Term() {}
 /** @type {!Array<!algebra.js.Fraction>} */
Term.prototype.coefficients;
 /** @type {!Array<!Variable>} */
Term.prototype.variables;

/**
 * @return {!algebra.js.Fraction}
 */
Term.prototype.coefficient = function() {};

/**
 * @return {string}
 */
Term.prototype.toString = function() {};
/**
 * @constructor
 * @struct
 */
function Variable() {}
 /** @type {string} */
Variable.prototype.variable;

/**
 * @return {string}
 */
Variable.prototype.toString = function() {};

/** @typedef {(string|number|!algebra.js.Fraction|!Term)} */
var Union;
/** @const */
var algebra = {};
/** @const */
algebra.js = {};

/**
 * @param {string} input
 * @return {(!algebra.js.Equation|!algebra.js.Expression)}
 */
algebra.js.parse = function(input) {};

/**
 * @param {(!Object|!algebra.js.Fraction|!algebra.js.Equation|!algebra.js.Expression|!Array<(!Object|!algebra.js.Fraction)>)} input
 * @return {string}
 */
algebra.js.toTex = function(input) {};

/**
 * @constructor
 * @struct
 * @param {!algebra.js.Expression} lhs
 * @param {(number|!algebra.js.Fraction|!algebra.js.Expression)} rhs
 */
algebra.js.Equation = function(lhs, rhs) {};
 /** @type {!algebra.js.Expression} */
algebra.js.Equation.prototype.lhs;
 /** @type {!algebra.js.Expression} */
algebra.js.Equation.prototype.rhs;

/**
 * @param {string} variable
 * @return {(!algebra.js.Fraction|!Array<!algebra.js.Fraction>|!Array<number>)}
 */
algebra.js.Equation.prototype.solveFor = function(variable) {};

/**
 * @return {string}
 */
algebra.js.Equation.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * @param {(string|number|!algebra.js.Fraction|!Term)} variable
 */
algebra.js.Expression = function(variable) {};
 /** @type {!Array<!algebra.js.Fraction>} */
algebra.js.Expression.prototype.constants;
 /** @type {!Array<!Term>} */
algebra.js.Expression.prototype.terms;

/**
 * @param {(string|number|!algebra.js.Fraction|!Term|!algebra.js.Expression)} other
 * @param {boolean=} simplify
 * @return {!algebra.js.Expression}
 */
algebra.js.Expression.prototype.add = function(other, simplify) {};

/**
 * @param {(number|!algebra.js.Fraction)} other
 * @param {boolean=} simplify
 * @return {!algebra.js.Expression}
 */
algebra.js.Expression.prototype.divide = function(other, simplify) {};

/**
 * @param {!Object} p
 * @param {boolean=} simplify
 * @return {!algebra.js.Expression}
 */
algebra.js.Expression.prototype.eval = function(p, simplify) {};

/**
 * @param {(string|number|!algebra.js.Fraction|!Term|!algebra.js.Expression)} other
 * @param {boolean=} simplify
 * @return {!algebra.js.Expression}
 */
algebra.js.Expression.prototype.multiply = function(other, simplify) {};

/**
 * @param {number} p
 * @param {boolean=} simplify
 * @return {!algebra.js.Expression}
 */
algebra.js.Expression.prototype.pow = function(p, simplify) {};

/**
 * @return {!algebra.js.Fraction}
 */
algebra.js.Expression.prototype.constant = function() {};

/**
 * @return {!algebra.js.Expression}
 */
algebra.js.Expression.prototype.simplify = function() {};

/**
 * @param {(string|number|!algebra.js.Fraction|!Term|!algebra.js.Expression)} other
 * @param {boolean=} simplify
 * @return {!algebra.js.Expression}
 */
algebra.js.Expression.prototype.subtract = function(other, simplify) {};

/**
 * @param {string} variable
 * @param {number} lower
 * @param {number} upper
 * @param {boolean=} simplify
 * @return {!algebra.js.Expression}
 */
algebra.js.Expression.prototype.summation = function(variable, lower, upper, simplify) {};

/**
 * @return {string}
 */
algebra.js.Expression.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * @param {number} num
 * @param {number} denom
 */
algebra.js.Fraction = function(num, denom) {};
 /** @type {number} */
algebra.js.Fraction.prototype.denom;
 /** @type {number} */
algebra.js.Fraction.prototype.numer;

/**
 * @return {!algebra.js.Fraction}
 */
algebra.js.Fraction.prototype.abs = function() {};

/**
 * @param {(number|!algebra.js.Fraction)} other
 * @param {boolean=} simplify
 * @return {!algebra.js.Fraction}
 */
algebra.js.Fraction.prototype.add = function(other, simplify) {};

/**
 * @param {(number|!algebra.js.Fraction)} other
 * @param {boolean=} simplify
 * @return {!algebra.js.Fraction}
 */
algebra.js.Fraction.prototype.divide = function(other, simplify) {};

/**
 * @param {(number|!algebra.js.Fraction)} other
 * @param {boolean=} simplify
 * @return {!algebra.js.Fraction}
 */
algebra.js.Fraction.prototype.multiply = function(other, simplify) {};

/**
 * @param {(number|!algebra.js.Fraction)} other
 * @param {boolean=} simplify
 * @return {!algebra.js.Fraction}
 */
algebra.js.Fraction.prototype.subtract = function(other, simplify) {};

/**
 * @return {string}
 */
algebra.js.Fraction.prototype.toString = function() {};

/**
 * @return {number}
 */
algebra.js.Fraction.prototype.valueOf = function() {};

/* TODO: ExportAssignment in  */
