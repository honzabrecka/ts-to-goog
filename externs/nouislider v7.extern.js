/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/nouislider v7/index.d.ts:

/**
 * For one-handle sliders, calling .val() will return the value. 
 * For two-handle sliders, an array[value, value] will be returned.
 * noUiSlider will keep your values within the slider range, which saves you a bunch of validation.
 * If you have set the slider to use one handle, simply set it on the slider using the .val() method.
 * If you have two handles, pass an array. One-handled sliders will also accept arrays.
 * Within an array, you can set a position to null if you want to leave a handle unchanged.
 * @param {?=} value
 * @return {(number|!Array<number>)|?<!HTMLElement>}
 */
JQuery.prototype.val = function(value) {};

/**
 * noUiSlider has full support for libLink, which will let you write values to input elements very easily. 
 * libLink will update the slider if you change an input as well!
 * @param {string} target
 * @param {?=} method
 * @param {?=} format
 * @return {?}
 */
JQuery.prototype.Link = function(target, method, format) {};
/**
 * @record
 * @struct
 */
function noUiSliderOptions() {}
 /** @type {(number|!Array<number>|!Array<!Array<number>>)} */
noUiSliderOptions.prototype.start;
 /** @type {!Object} */
noUiSliderOptions.prototype.range;
 /** @type {(string|boolean)} */
noUiSliderOptions.prototype.connect;
 /** @type {number} */
noUiSliderOptions.prototype.margin;
 /** @type {number} */
noUiSliderOptions.prototype.limit;
 /** @type {number} */
noUiSliderOptions.prototype.step;
 /** @type {string} */
noUiSliderOptions.prototype.orientation;
 /** @type {string} */
noUiSliderOptions.prototype.direction;
 /** @type {boolean} */
noUiSliderOptions.prototype.animate;
 /** @type {string} */
noUiSliderOptions.prototype.behaviour;
 /** @type {(!Object|function(!Array<?>): ?)} */
noUiSliderOptions.prototype.format;
/**
 * @record
 * @struct
 */
function noUiSliderPipsOptions() {}
 /** @type {string} */
noUiSliderPipsOptions.prototype.mode;
 /** @type {number} */
noUiSliderPipsOptions.prototype.density;
 /** @type {function(!Array<?>): number} */
noUiSliderPipsOptions.prototype.filter;
 /** @type {!Object} */
noUiSliderPipsOptions.prototype.format;
 /** @type {(number|!Array<number>)} */
noUiSliderPipsOptions.prototype.values;
 /** @type {boolean} */
noUiSliderPipsOptions.prototype.stepped;

/**
 * @param {!noUiSliderOptions=} options
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.noUiSlider = function(options) {};

/**
 * @param {!noUiSliderPipsOptions=} options
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.noUiSlider_pips = function(options) {};
