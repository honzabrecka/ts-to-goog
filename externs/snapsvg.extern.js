/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/snapsvg/index.d.ts:

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */

/**
 * @param {(string|number)|string|!SVGElement} width_or_query_or_DOM
 * @param {(string|number)=} height
 * @return {!Snap.Paper}
 */
function Snap(width_or_query_or_DOM, height) {}
 /** @type {!Snap.Filter} */
Snap.filter;
 /** @type {!Snap.Path} */
Snap.path;

/**
 * @return {void}
 */
Snap.Matrix = function() {};

/**
 * @param {number|!SVGMatrix=} a_or_svgMatrix
 * @param {number=} b
 * @param {number=} c
 * @param {number=} d
 * @param {number=} e
 * @param {number=} f
 * @return {?}
 */
Snap.matrix = function(a_or_svgMatrix, b, c, d, e, f) {};

/**
 * @param {string} url
 * @param {string|!Object|!Function} postData_or_callback
 * @param {!Function|!Object=} callback_or_scope
 * @param {!Object=} scope
 * @return {!XMLHttpRequest}
 */
Snap.ajax = function(url, postData_or_callback, callback_or_scope, scope) {};

/**
 * @param {string} token
 * @param {!Object} json
 * @return {string}
 */
Snap.format = function(token, json) {};

/**
 * @param {?} varargs
 * @return {!Snap.Fragment}
 */
Snap.fragment = function(varargs) {};

/**
 * @param {number} x
 * @param {number} y
 * @return {!Snap.Element}
 */
Snap.getElementByPoint = function(x, y) {};

/**
 * @param {?} o
 * @param {string} type
 * @return {boolean}
 */
Snap.is = function(o, type) {};

/**
 * @param {string} url
 * @param {!Function} callback
 * @param {!Object=} scope
 * @return {void}
 */
Snap.load = function(url, callback, scope) {};

/**
 * @param {!Function} f
 * @return {void}
 */
Snap.plugin = function(f) {};

/**
 * @param {string} query
 * @return {!Snap.Element}
 */
Snap.select = function(query) {};

/**
 * @param {string} query
 * @return {?}
 */
Snap.selectAll = function(query) {};

/**
 * @param {!Array<number>} values
 * @param {number} value
 * @param {number=} tolerance
 * @return {number}
 */
Snap.snapTo = function(values, value, tolerance) {};

/**
 * @param {(number|!Array<number>)} from
 * @param {(number|!Array<number>)} to
 * @param {function(number): void} updater
 * @param {number} duration
 * @param {function(number): number=} easing
 * @param {function(): void=} callback
 * @return {!mina.MinaAnimation}
 */
Snap.animate = function(from, to, updater, duration, easing, callback) {};

/**
 * @param {!Object} attr
 * @param {number} duration
 * @param {function(number): number=} easing
 * @param {function(): void=} callback
 * @return {!Snap.Animation}
 */
Snap.animation = function(attr, duration, easing, callback) {};

/**
 * @param {string} clr
 * @return {!Snap.RGBHSB}
 */
Snap.color = function(clr) {};

/**
 * @param {string} color
 * @return {!Snap.RGB}
 */
Snap.getRGB = function(color) {};

/**
 * @param {number} h
 * @param {number} s
 * @param {number} b
 * @return {!Snap.HSB}
 */
Snap.hsb = function(h, s, b) {};

/**
 * @param {number} h
 * @param {number} s
 * @param {number} l
 * @return {!Snap.HSL}
 */
Snap.hsl = function(h, s, l) {};

/**
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @return {!Snap.RGB}
 */
Snap.rgb = function(r, g, b) {};

/**
 * @param {number} h
 * @param {number} s
 * @param {number} v
 * @return {!Snap.RGB}
 */
Snap.hsb2rgb = function(h, s, v) {};

/**
 * @param {number} h
 * @param {number} s
 * @param {number} l
 * @return {!Snap.RGB}
 */
Snap.hsl2rgb = function(h, s, l) {};

/**
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @return {!Snap.HSB}
 */
Snap.rgb2hsb = function(r, g, b) {};

/**
 * @param {number} r
 * @param {number} g
 * @param {number} b
 * @return {!Snap.HSL}
 */
Snap.rgb2hsl = function(r, g, b) {};

/**
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @param {number=} x3
 * @param {number=} y3
 * @return {number}
 */
Snap.angle = function(x1, y1, x2, y2, x3, y3) {};

/**
 * @param {number} deg
 * @return {number}
 */
Snap.rad = function(deg) {};

/**
 * @param {number} rad
 * @return {number}
 */
Snap.deg = function(rad) {};

/**
 * @param {number} angle
 * @return {number}
 */
Snap.sin = function(angle) {};

/**
 * @param {number} angle
 * @return {number}
 */
Snap.cos = function(angle) {};

/**
 * @param {number} angle
 * @return {number}
 */
Snap.tan = function(angle) {};

/**
 * @param {number} angle
 * @return {number}
 */
Snap.asin = function(angle) {};

/**
 * @param {number} angle
 * @return {number}
 */
Snap.acos = function(angle) {};

/**
 * @param {number} angle
 * @return {number}
 */
Snap.atan = function(angle) {};

/**
 * @param {number} angle
 * @return {number}
 */
Snap.atan2 = function(angle) {};

/**
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @return {number}
 */
Snap.len = function(x1, y1, x2, y2) {};

/**
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @return {number}
 */
Snap.len2 = function(x1, y1, x2, y2) {};

/**
 * @param {string} svg
 * @return {!Snap.Fragment}
 */
Snap.parse = function(svg) {};

/**
 * @param {string|!Array<string>} pathString
 * @return {!Array<?>}
 */
Snap.parsePathString = function(pathString) {};

/**
 * @param {string|!Array<string>} TString
 * @return {!Array<?>}
 */
Snap.parseTransformString = function(TString) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} X
 * @param {number} Y
 * @return {boolean}
 */
Snap.closest = function(x, y, X, Y) {};
/**
 * @record
 * @struct
 */
Snap.RGB = function() {};
 /** @type {number} */
Snap.RGB.prototype.r;
 /** @type {number} */
Snap.RGB.prototype.g;
 /** @type {number} */
Snap.RGB.prototype.b;
 /** @type {string} */
Snap.RGB.prototype.hex;
/**
 * @record
 * @struct
 */
Snap.HSB = function() {};
 /** @type {number} */
Snap.HSB.prototype.h;
 /** @type {number} */
Snap.HSB.prototype.s;
 /** @type {number} */
Snap.HSB.prototype.b;
/**
 * @record
 * @struct
 */
Snap.RGBHSB = function() {};
 /** @type {number} */
Snap.RGBHSB.prototype.r;
 /** @type {number} */
Snap.RGBHSB.prototype.g;
 /** @type {number} */
Snap.RGBHSB.prototype.b;
 /** @type {string} */
Snap.RGBHSB.prototype.hex;
 /** @type {boolean} */
Snap.RGBHSB.prototype.error;
 /** @type {number} */
Snap.RGBHSB.prototype.h;
 /** @type {number} */
Snap.RGBHSB.prototype.s;
 /** @type {number} */
Snap.RGBHSB.prototype.v;
 /** @type {number} */
Snap.RGBHSB.prototype.l;
/**
 * @record
 * @struct
 */
Snap.HSL = function() {};
 /** @type {number} */
Snap.HSL.prototype.h;
 /** @type {number} */
Snap.HSL.prototype.s;
 /** @type {number} */
Snap.HSL.prototype.l;
/**
 * @record
 * @struct
 */
Snap.BBox = function() {};
 /** @type {number} */
Snap.BBox.prototype.cx;
 /** @type {number} */
Snap.BBox.prototype.cy;
 /** @type {number} */
Snap.BBox.prototype.h;
 /** @type {number} */
Snap.BBox.prototype.height;
 /** @type {number} */
Snap.BBox.prototype.path;
 /** @type {number} */
Snap.BBox.prototype.r0;
 /** @type {number} */
Snap.BBox.prototype.r1;
 /** @type {number} */
Snap.BBox.prototype.r2;
 /** @type {string} */
Snap.BBox.prototype.vb;
 /** @type {number} */
Snap.BBox.prototype.w;
 /** @type {number} */
Snap.BBox.prototype.width;
 /** @type {number} */
Snap.BBox.prototype.x2;
 /** @type {number} */
Snap.BBox.prototype.x;
 /** @type {number} */
Snap.BBox.prototype.y2;
 /** @type {number} */
Snap.BBox.prototype.y;
/**
 * @record
 * @struct
 */
Snap.TransformationDescriptor = function() {};
 /** @type {string} */
Snap.TransformationDescriptor.prototype.string;
 /** @type {?} */
Snap.TransformationDescriptor.prototype.globalMatrix;
 /** @type {?} */
Snap.TransformationDescriptor.prototype.localMatrix;
 /** @type {?} */
Snap.TransformationDescriptor.prototype.diffMatrix;
 /** @type {string} */
Snap.TransformationDescriptor.prototype.global;
 /** @type {string} */
Snap.TransformationDescriptor.prototype.local;

/**
 * @return {string}
 */
Snap.TransformationDescriptor.prototype.toString = function() {};
/**
 * @record
 * @struct
 */
Snap.Animation = function() {};
 /** @type {!Object<string,?>} */
Snap.Animation.prototype.attr;
 /** @type {number} */
Snap.Animation.prototype.duration;
 /** @type {function(number): number} */
Snap.Animation.prototype.easing;
 /** @type {function(): void} */
Snap.Animation.prototype.callback;
/**
 * @record
 * @struct
 */
Snap.Element = function() {};
 /** @type {!HTMLElement} */
Snap.Element.prototype.node;
 /** @type {string} */
Snap.Element.prototype.type;

/**
 * @param {!Snap.Element} el
 * @return {!Snap.Element}
 */
Snap.Element.prototype.add = function(el) {};

/**
 * @param {string} value
 * @return {!Snap.Element}
 */
Snap.Element.prototype.addClass = function(value) {};

/**
 * @param {!Snap.Element} el
 * @return {!Snap.Element}
 */
Snap.Element.prototype.after = function(el) {};

/**
 * @param {!Snap.Element} el
 * @param {string} way
 * @return {!Snap.Element}
 */
Snap.Element.prototype.align = function(el, way) {};

/**
 * @param {?|!Object<string,?>} animation_or_attrs
 * @param {number=} duration
 * @param {function(number): number=} easing
 * @param {function(): void=} callback
 * @return {!Snap.Element}
 */
Snap.Element.prototype.animate = function(animation_or_attrs, duration, easing, callback) {};

/**
 * @param {!Snap.Element} el
 * @return {!Snap.Element}
 */
Snap.Element.prototype.append = function(el) {};

/**
 * @param {!Snap.Element} el
 * @return {!Snap.Element}
 */
Snap.Element.prototype.appendTo = function(el) {};

/**
 * @param {string} attr
 * @param {string=} value
 * @return {number}
 */
Snap.Element.prototype.asPX = function(attr, value) {};

/**
 * @param {string|!Object<string,?>} param_or_params
 * @return {string|!Snap.Element}
 */
Snap.Element.prototype.attr = function(param_or_params) {};

/**
 * @param {!Snap.Element} el
 * @return {!Snap.Element}
 */
Snap.Element.prototype.before = function(el) {};

/**
 * @return {!Array<!Snap.Element>}
 */
Snap.Element.prototype.children = function() {};

/**
 * @return {!Snap.Element}
 */
Snap.Element.prototype.clone = function() {};

/**
 * @param {string} key
 * @param {?=} value
 * @return {?}
 */
Snap.Element.prototype.data = function(key, value) {};

/**
 * @param {!Snap.Element} el
 * @param {string} way
 * @return {string}
 */
Snap.Element.prototype.getAlign = function(el, way) {};

/**
 * @return {!Snap.BBox}
 */
Snap.Element.prototype.getBBox = function() {};

/**
 * @param {number} length
 * @return {{x: number, y: number, alpha: number}}
 */
Snap.Element.prototype.getPointAtLength = function(length) {};

/**
 * @param {number} from
 * @param {number} to
 * @return {string}
 */
Snap.Element.prototype.getSubpath = function(from, to) {};

/**
 * @return {number}
 */
Snap.Element.prototype.getTotalLength = function() {};

/**
 * @param {string} value
 * @return {boolean}
 */
Snap.Element.prototype.hasClass = function(value) {};

/**
 * @return {!Array<{anim: !Snap.Animation, mina: !mina.AnimationDescriptor, curStatus: number, status: function(number): number, stop: function(): void}>}
 */
Snap.Element.prototype.inAnim = function() {};

/**
 * @return {string}
 */
Snap.Element.prototype.innerSVG = function() {};

/**
 * @param {!Snap.Element} el
 * @return {!Snap.Element}
 */
Snap.Element.prototype.insertAfter = function(el) {};

/**
 * @param {!Snap.Element} el
 * @return {!Snap.Element}
 */
Snap.Element.prototype.insertBefore = function(el) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {number} refX
 * @param {number} refY
 * @return {!Snap.Element}
 */
Snap.Element.prototype.marker = function(x, y, width, height, refX, refY) {};

/**
 * @return {string}
 */
Snap.Element.prototype.outerSVG = function() {};

/**
 * @return {!Snap.Element}
 */
Snap.Element.prototype.parent = function() {};

/**
 * @param {?} x
 * @param {?} y
 * @param {?} width
 * @param {?} height
 * @return {!Snap.Element}
 */
Snap.Element.prototype.pattern = function(x, y, width, height) {};

/**
 * @param {!Snap.Element} el
 * @return {!Snap.Element}
 */
Snap.Element.prototype.prepend = function(el) {};

/**
 * @param {!Snap.Element} el
 * @return {!Snap.Element}
 */
Snap.Element.prototype.prependTo = function(el) {};

/**
 * @return {!Snap.Element}
 */
Snap.Element.prototype.remove = function() {};

/**
 * @param {string} value
 * @return {!Snap.Element}
 */
Snap.Element.prototype.removeClass = function(value) {};

/**
 * @param {string=} key
 * @return {!Snap.Element}
 */
Snap.Element.prototype.removeData = function(key) {};

/**
 * @param {string} query
 * @return {!Snap.Element}
 */
Snap.Element.prototype.select = function(query) {};

/**
 * @return {!Snap.Element}
 */
Snap.Element.prototype.stop = function() {};

/**
 * @return {!Snap.Element}
 */
Snap.Element.prototype.toDefs = function() {};

/**
 * @return {?}
 */
Snap.Element.prototype.toJSON = function() {};

/**
 * @param {string} value
 * @param {boolean} flag
 * @return {!Snap.Element}
 */
Snap.Element.prototype.toggleClass = function(value, flag) {};

/**
 * @param {number|string} x
 * @param {number|string} y
 * @param {number|string} width
 * @param {number|string} height
 * @return {!Object}
 */
Snap.Element.prototype.toPattern = function(x, y, width, height) {};

/**
 * @return {string}
 */
Snap.Element.prototype.toString = function() {};

/**
 * @param {string=} tstr
 * @return {!Snap.TransformationDescriptor|!Snap.Element}
 */
Snap.Element.prototype.transform = function(tstr) {};

/**
 * @return {!Object}
 */
Snap.Element.prototype.use = function() {};

/**
 * @param {string=} query
 * @return {!Snap.Set}
 */
Snap.Element.prototype.selectAll = function(query) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @param {?=} thisArg
 * @return {!Snap.Element}
 */
Snap.Element.prototype.click = function(handler, thisArg) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @param {?=} thisArg
 * @return {!Snap.Element}
 */
Snap.Element.prototype.dblclick = function(handler, thisArg) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @param {?=} thisArg
 * @return {!Snap.Element}
 */
Snap.Element.prototype.mousedown = function(handler, thisArg) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @param {?=} thisArg
 * @return {!Snap.Element}
 */
Snap.Element.prototype.mousemove = function(handler, thisArg) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @param {?=} thisArg
 * @return {!Snap.Element}
 */
Snap.Element.prototype.mouseout = function(handler, thisArg) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @param {?=} thisArg
 * @return {!Snap.Element}
 */
Snap.Element.prototype.mouseover = function(handler, thisArg) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @param {?=} thisArg
 * @return {!Snap.Element}
 */
Snap.Element.prototype.mouseup = function(handler, thisArg) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @param {?=} thisArg
 * @return {!Snap.Element}
 */
Snap.Element.prototype.touchstart = function(handler, thisArg) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @param {?=} thisArg
 * @return {!Snap.Element}
 */
Snap.Element.prototype.touchmove = function(handler, thisArg) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @param {?=} thisArg
 * @return {!Snap.Element}
 */
Snap.Element.prototype.touchend = function(handler, thisArg) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @param {?=} thisArg
 * @return {!Snap.Element}
 */
Snap.Element.prototype.touchcancel = function(handler, thisArg) {};

/**
 * @param {function(!MouseEvent): void=} handler
 * @return {!Snap.Element}
 */
Snap.Element.prototype.unclick = function(handler) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @return {!Snap.Element}
 */
Snap.Element.prototype.undblclick = function(handler) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @return {!Snap.Element}
 */
Snap.Element.prototype.unmousedown = function(handler) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @return {!Snap.Element}
 */
Snap.Element.prototype.unmousemove = function(handler) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @return {!Snap.Element}
 */
Snap.Element.prototype.unmouseout = function(handler) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @return {!Snap.Element}
 */
Snap.Element.prototype.unmouseover = function(handler) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @return {!Snap.Element}
 */
Snap.Element.prototype.unmouseup = function(handler) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @return {!Snap.Element}
 */
Snap.Element.prototype.untouchstart = function(handler) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @return {!Snap.Element}
 */
Snap.Element.prototype.untouchmove = function(handler) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @return {!Snap.Element}
 */
Snap.Element.prototype.untouchend = function(handler) {};

/**
 * @param {function(!MouseEvent): void} handler
 * @return {!Snap.Element}
 */
Snap.Element.prototype.untouchcancel = function(handler) {};

/**
 * @param {function(!MouseEvent): void} hoverInHandler
 * @param {function(!MouseEvent): void} hoverOutHandler
 * @param {?=} thisArg_or_inThisArg
 * @param {?=} outThisArg
 * @return {!Snap.Element}
 */
Snap.Element.prototype.hover = function(hoverInHandler, hoverOutHandler, thisArg_or_inThisArg, outThisArg) {};

/**
 * @param {function(!MouseEvent): void} hoverInHandler
 * @param {function(!MouseEvent): void} hoverOutHandler
 * @return {!Snap.Element}
 */
Snap.Element.prototype.unhover = function(hoverInHandler, hoverOutHandler) {};

/**
 * @param {function(number, number, number, number, !MouseEvent): void=} onMove
 * @param {function(number, number, !MouseEvent): void=} onStart
 * @param {function(!MouseEvent): void=} onEnd
 * @param {?=} moveThisArg
 * @param {?=} startThisArg
 * @param {?=} endThisArg
 * @return {!Snap.Element}
 */
Snap.Element.prototype.drag = function(onMove, onStart, onEnd, moveThisArg, startThisArg, endThisArg) {};

/**
 * @param {function(number, number, !MouseEvent): void=} onMove
 * @param {function(number, number, !MouseEvent): void=} onStart
 * @param {function(!MouseEvent): void=} onEnd
 * @return {!Snap.Element}
 */
Snap.Element.prototype.undrag = function(onMove, onStart, onEnd) {};
/**
 * @record
 * @struct
 */
Snap.Fragment = function() {};

/**
 * @param {string} query
 * @return {!Snap.Element}
 */
Snap.Fragment.prototype.select = function(query) {};

/**
 * @param {string=} query
 * @return {!Snap.Set}
 */
Snap.Fragment.prototype.selectAll = function(query) {};

/**
 * @param {number|?} a_or_matrix
 * @param {number=} b
 * @param {number=} c
 * @param {number=} d
 * @param {number=} e
 * @param {number=} f
 * @return {?}
 */
Snap.Matrix.prototype.add = function(a_or_matrix, b, c, d, e, f) {};

/**
 * @return {?}
 */
Snap.Matrix.prototype.clone = function() {};

/**
 * @return {number}
 */
Snap.Matrix.prototype.determinant = function() {};

/**
 * @return {?}
 */
Snap.Matrix.prototype.invert = function() {};

/**
 * @param {number} a
 * @param {number=} x
 * @param {number=} y
 * @return {?}
 */
Snap.Matrix.prototype.rotate = function(a, x, y) {};

/**
 * @param {number} x
 * @param {number=} y
 * @param {number=} cx
 * @param {number=} cy
 * @return {?}
 */
Snap.Matrix.prototype.scale = function(x, y, cx, cy) {};

/**
 * @return {!Snap.ExplicitTransform}
 */
Snap.Matrix.prototype.split = function() {};

/**
 * @return {string}
 */
Snap.Matrix.prototype.toTransformString = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @return {?}
 */
Snap.Matrix.prototype.translate = function(x, y) {};

/**
 * @param {number} x
 * @param {number} y
 * @return {number}
 */
Snap.Matrix.prototype.x = function(x, y) {};

/**
 * @param {number} x
 * @param {number} y
 * @return {number}
 */
Snap.Matrix.prototype.y = function(x, y) {};
/**
 * @record
 * @struct
 */
Snap.ExplicitTransform = function() {};
 /** @type {number} */
Snap.ExplicitTransform.prototype.dx;
 /** @type {number} */
Snap.ExplicitTransform.prototype.dy;
 /** @type {number} */
Snap.ExplicitTransform.prototype.scalex;
 /** @type {number} */
Snap.ExplicitTransform.prototype.scaley;
 /** @type {number} */
Snap.ExplicitTransform.prototype.shear;
 /** @type {number} */
Snap.ExplicitTransform.prototype.rotate;
 /** @type {boolean} */
Snap.ExplicitTransform.prototype.isSimple;
/**
 * @extends {Snap.Element}
 * @record
 * @struct
 */
Snap.Paper = function() {};

/**
 * @return {void}
 */
Snap.Paper.prototype.clear = function() {};

/**
 * @param {string} name
 * @param {!Object} attr
 * @return {!Snap.Element}
 */
Snap.Paper.prototype.el = function(name, attr) {};

/**
 * @param {string} filstr
 * @return {!Snap.Element}
 */
Snap.Paper.prototype.filter = function(filstr) {};

/**
 * @param {string} gradient
 * @return {?}
 */
Snap.Paper.prototype.gradient = function(gradient) {};

/**
 * @param {?=} varargs
 * @return {!Snap.Paper}
 */
Snap.Paper.prototype.g = function(varargs) {};

/**
 * @param {...?} els
 * @return {!Snap.Paper}
 */
Snap.Paper.prototype.group = function(els) {};

/**
 * @param {?} varargs
 * @return {!Object}
 */
Snap.Paper.prototype.mask = function(varargs) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {number} vbx
 * @param {number} vby
 * @param {number} vbw
 * @param {number} vbh
 * @return {!Object}
 */
Snap.Paper.prototype.ptrn = function(x, y, width, height, vbx, vby, vbw, vbh) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {number} vbx
 * @param {number} vby
 * @param {number} vbw
 * @param {number} vbh
 * @return {!Object}
 */
Snap.Paper.prototype.svg = function(x, y, width, height, vbx, vby, vbw, vbh) {};

/**
 * @return {string}
 */
Snap.Paper.prototype.toDataUrl = function() {};

/**
 * @return {string}
 */
Snap.Paper.prototype.toString = function() {};

/**
 * @param {string|!Snap.Element=} id
 * @return {!Object}
 */
Snap.Paper.prototype.use = function(id) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} r
 * @return {!Snap.Element}
 */
Snap.Paper.prototype.circle = function(x, y, r) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} rx
 * @param {number} ry
 * @return {!Snap.Element}
 */
Snap.Paper.prototype.ellipse = function(x, y, rx, ry) {};

/**
 * @param {string} src
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @return {!Snap.Element}
 */
Snap.Paper.prototype.image = function(src, x, y, width, height) {};

/**
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @return {!Snap.Element}
 */
Snap.Paper.prototype.line = function(x1, y1, x2, y2) {};

/**
 * @param {string=} pathString
 * @return {!Snap.Element}
 */
Snap.Paper.prototype.path = function(pathString) {};

/**
 * @param {!Array<?>} varargs
 * @return {!Snap.Element}
 */
Snap.Paper.prototype.polygon = function(varargs) {};

/**
 * @param {!Array<?>} varargs
 * @return {!Snap.Element}
 */
Snap.Paper.prototype.polyline = function(varargs) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} width
 * @param {number} height
 * @param {number=} rx
 * @param {number=} ry
 * @return {!Snap.Element}
 */
Snap.Paper.prototype.rect = function(x, y, width, height, rx, ry) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {(string|number)|!Array<(string|number)>} text
 * @return {!Snap.Element}
 */
Snap.Paper.prototype.text = function(x, y, text) {};
/**
 * @record
 * @struct
 */
Snap.Set = function() {};

/**
 * @param {...!Object<string,?>|{attrs: ?, duration: number, easing: function(number): number, callback: function(): void}} attrs_or_params
 * @return {!Snap.Element}
 */
Snap.Set.prototype.animate = function(attrs_or_params) {};

/**
 * @param {!Object<string,?>|string} params_or_param
 * @return {!Snap.Element|string}
 */
Snap.Set.prototype.attr = function(params_or_param) {};

/**
 * @param {string} attr
 * @param {!Function|!Snap.Element} callback_or_element
 * @param {string=} eattr
 * @return {!Snap.Set}
 */
Snap.Set.prototype.bind = function(attr, callback_or_element, eattr) {};

/**
 * @return {!Snap.Set}
 */
Snap.Set.prototype.clear = function() {};

/**
 * @param {!Snap.Element} element
 * @return {boolean}
 */
Snap.Set.prototype.exclude = function(element) {};

/**
 * @param {!Function} callback
 * @param {!Object=} thisArg
 * @return {!Snap.Set}
 */
Snap.Set.prototype.forEach = function(callback, thisArg) {};

/**
 * @return {!Snap.Element}
 */
Snap.Set.prototype.pop = function() {};

/**
 * @param {!Snap.Element|!Array<!Snap.Element>} el_or_els
 * @return {!Snap.Element}
 */
Snap.Set.prototype.push = function(el_or_els) {};

/**
 * @param {number} index
 * @param {number} count
 * @param {!Array<!Object>=} insertion
 * @return {!Array<!Snap.Element>}
 */
Snap.Set.prototype.splice = function(index, count, insertion) {};
/**
 * @record
 * @struct
 */
Snap.Filter = function() {};

/**
 * @param {number} x
 * @param {number=} y
 * @return {string}
 */
Snap.Filter.prototype.blur = function(x, y) {};

/**
 * @param {number} amount
 * @return {string}
 */
Snap.Filter.prototype.brightness = function(amount) {};

/**
 * @param {number} amount
 * @return {string}
 */
Snap.Filter.prototype.contrast = function(amount) {};

/**
 * @param {number} amount
 * @return {string}
 */
Snap.Filter.prototype.grayscale = function(amount) {};

/**
 * @param {number} angle
 * @return {string}
 */
Snap.Filter.prototype.hueRotate = function(angle) {};

/**
 * @param {number} amount
 * @return {string}
 */
Snap.Filter.prototype.invert = function(amount) {};

/**
 * @param {number} amount
 * @return {string}
 */
Snap.Filter.prototype.saturate = function(amount) {};

/**
 * @param {number} amount
 * @return {string}
 */
Snap.Filter.prototype.sepia = function(amount) {};

/**
 * @param {number} dx
 * @param {number} dy
 * @param {number|string} blur_or_color_or_opacity
 * @param {string|number=} color_or_opacity
 * @param {number=} opacity
 * @return {string}
 */
Snap.Filter.prototype.shadow = function(dx, dy, blur_or_color_or_opacity, color_or_opacity, opacity) {};
/**
 * @record
 * @struct
 */
Snap.Path = function() {};

/**
 * @param {...number|!Array<number>} args_or_bez
 * @return {!Snap.BBox}
 */
Snap.Path.prototype.bezierBBox = function(args_or_bez) {};

/**
 * @param {number} p1x
 * @param {number} p1y
 * @param {number} c1x
 * @param {number} c1y
 * @param {number} c2x
 * @param {number} c2y
 * @param {number} p2x
 * @param {number} p2y
 * @param {number} t
 * @return {!Object}
 */
Snap.Path.prototype.findDotsAtSegment = function(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {};

/**
 * @param {string} path
 * @return {!Snap.BBox}
 */
Snap.Path.prototype.getBBox = function(path) {};

/**
 * @param {string} path
 * @param {number} length
 * @return {!Object}
 */
Snap.Path.prototype.getPointAtLength = function(path, length) {};

/**
 * @param {string} path
 * @param {number} from
 * @param {number} to
 * @return {string}
 */
Snap.Path.prototype.getSubpath = function(path, from, to) {};

/**
 * @param {string} path
 * @return {number}
 */
Snap.Path.prototype.getTotalLength = function(path) {};

/**
 * @param {string} path1
 * @param {string} path2
 * @return {!Array<!Snap.IntersectionDot>}
 */
Snap.Path.prototype.intersection = function(path1, path2) {};

/**
 * @param {!Snap.BBox} bbox1
 * @param {!Snap.BBox} bbox2
 * @return {boolean}
 */
Snap.Path.prototype.isBBoxIntersect = function(bbox1, bbox2) {};

/**
 * @param {string} path
 * @param {number} x
 * @param {number} y
 * @return {boolean}
 */
Snap.Path.prototype.isPointInside = function(path, x, y) {};

/**
 * @param {!Snap.BBox} bbox
 * @param {number} x
 * @param {number} y
 * @return {boolean}
 */
Snap.Path.prototype.isPointInsideBBox = function(bbox, x, y) {};

/**
 * @param {string} path
 * @param {?|!Object} matrix
 * @return {string}
 */
Snap.Path.prototype.map = function(path, matrix) {};

/**
 * @param {string} path
 * @return {!Array<?>}
 */
Snap.Path.prototype.toAbsolute = function(path) {};

/**
 * @param {string|!Array<string>} pathString
 * @return {!Array<?>}
 */
Snap.Path.prototype.toCubic = function(pathString) {};

/**
 * @param {string} path
 * @return {!Array<?>}
 */
Snap.Path.prototype.toRelative = function(path) {};
/**
 * @record
 * @struct
 */
Snap.IntersectionDot = function() {};
 /** @type {number} */
Snap.IntersectionDot.prototype.x;
 /** @type {number} */
Snap.IntersectionDot.prototype.y;
 /** @type {number} */
Snap.IntersectionDot.prototype.t1;
 /** @type {number} */
Snap.IntersectionDot.prototype.t2;
 /** @type {number} */
Snap.IntersectionDot.prototype.segment1;
 /** @type {number} */
Snap.IntersectionDot.prototype.segment2;
 /** @type {!Array<number>} */
Snap.IntersectionDot.prototype.bez1;
 /** @type {!Array<number>} */
Snap.IntersectionDot.prototype.bez2;
