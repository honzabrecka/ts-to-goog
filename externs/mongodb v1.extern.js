/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/mongodb v1/index.d.ts:

/**
 * @constructor
 * @struct
 * @param {?} serverConfig
 * @param {?} options
 */
function MongoClient(serverConfig, options) {}

/**
 * @param {string} uri
 * @param {function(!Error, !Db): void|?=} callback_or_options
 * @param {function(!Error, !Db): void=} callback
 * @return {void}
 */
MongoClient.connect = function(uri, callback_or_options, callback) {};

/**
 * @constructor
 * @struct
 * @param {string} host
 * @param {number} port
 * @param {?=} opts
 */
function Server(host, port, opts) {}

/**
 * @return {?}
 */
Server.prototype.connect = function() {};

/**
 * @constructor
 * @struct
 * @param {string} databaseName
 * @param {!Server} serverConfig
 * @param {?=} dbOptions
 */
function Db(databaseName, serverConfig, dbOptions) {}
 /** @type {string} */
Db.prototype.DEFAULT_URL;

/**
 * @param {string} dbName
 * @return {!Db}
 */
Db.prototype.db = function(dbName) {};

/**
 * @param {function(!Error, !Db): void=} callback
 * @return {void}
 */
Db.prototype.open = function(callback) {};

/**
 * @param {boolean=} forceClose
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Db.prototype.close = function(forceClose, callback) {};

/**
 * @param {function(!Error, ?): void=} callback
 * @return {?}
 */
Db.prototype.admin = function(callback) {};

/**
 * @param {string} collectionName
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Db.prototype.collectionsInfo = function(collectionName, callback) {};

/**
 * @param {string} collectionName
 * @param {?} options
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Db.prototype.collectionNames = function(collectionName, options, callback) {};

/**
 * @param {string} collectionName
 * @param {function(!Error, ?): void|?=} callback_or_options
 * @param {function(!Error, ?): void=} callback
 * @return {?}
 */
Db.prototype.collection = function(collectionName, callback_or_options, callback) {};

/**
 * @param {function(!Error, !Array<?>): void=} callback
 * @return {void}
 */
Db.prototype.collections = function(callback) {};

/**
 * @param {?} code
 * @param {!Array<?>} parameters
 * @param {?=} options
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Db.prototype.eval = function(code, parameters, options, callback) {};

/**
 * @param {function(!Error, ?): void|?=} callback_or_options
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Db.prototype.logout = function(callback_or_options, callback) {};

/**
 * @param {string} userName
 * @param {string} password
 * @param {function(!Error, ?): void|?=} callback_or_options
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Db.prototype.authenticate = function(userName, password, callback_or_options, callback) {};

/**
 * @param {string} username
 * @param {string} password
 * @param {function(!Error, ?): void|?=} callback_or_options
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Db.prototype.addUser = function(username, password, callback_or_options, callback) {};

/**
 * @param {string} username
 * @param {function(!Error, ?): void|?=} callback_or_options
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Db.prototype.removeUser = function(username, callback_or_options, callback) {};

/**
 * @param {string} collectionName
 * @param {function(!Error, ?): void|?=} callback_or_options
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Db.prototype.createCollection = function(collectionName, callback_or_options, callback) {};

/**
 * @param {!Object} selector
 * @param {function(!Error, ?): void|?=} callback_or_options
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Db.prototype.command = function(selector, callback_or_options, callback) {};

/**
 * @param {string} collectionName
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Db.prototype.dropCollection = function(collectionName, callback) {};

/**
 * @param {string} fromCollection
 * @param {string} toCollection
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Db.prototype.renameCollection = function(fromCollection, toCollection, callback) {};

/**
 * @param {!Object} options
 * @param {?} connectionOptions
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Db.prototype.lastError = function(options, connectionOptions, callback) {};

/**
 * @param {!Object} options
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Db.prototype.previousError = function(options, callback) {};

/**
 * @param {?} command_hash
 * @param {function(!Error, ?): void|?=} callback_or_options
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Db.prototype.executeDbCommand = function(command_hash, callback_or_options, callback) {};

/**
 * @param {?} command_hash
 * @param {function(!Error, ?): void|?=} callback_or_options
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Db.prototype.executeDbAdminCommand = function(command_hash, callback_or_options, callback) {};

/**
 * @param {function(!Error, ?): void|?=} callback_or_options
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Db.prototype.resetErrorHistory = function(callback_or_options, callback) {};

/**
 * @param {?} collectionName
 * @param {?} fieldOrSpec
 * @param {?} options
 * @param {!Function=} callback
 * @return {void}
 */
Db.prototype.createIndex = function(collectionName, fieldOrSpec, options, callback) {};

/**
 * @param {?} collectionName
 * @param {?} fieldOrSpec
 * @param {?} options
 * @param {!Function=} callback
 * @return {void}
 */
Db.prototype.ensureIndex = function(collectionName, fieldOrSpec, options, callback) {};

/**
 * @param {?} options
 * @param {!Function=} callback
 * @return {void}
 */
Db.prototype.cursorInfo = function(options, callback) {};

/**
 * @param {string} collectionName
 * @param {string} indexName
 * @param {!Function=} callback
 * @return {void}
 */
Db.prototype.dropIndex = function(collectionName, indexName, callback) {};

/**
 * @param {string} collectionName
 * @param {!Function=} callback
 * @return {void}
 */
Db.prototype.reIndex = function(collectionName, callback) {};

/**
 * @param {string} collectionName
 * @param {?} options
 * @param {!Function=} callback
 * @return {void}
 */
Db.prototype.indexInformation = function(collectionName, options, callback) {};

/**
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Db.prototype.dropDatabase = function(callback) {};

/**
 * @param {?} options
 * @param {!Function=} callback
 * @return {void}
 */
Db.prototype.stats = function(options, callback) {};

/**
 * @param {?} db_command
 * @param {?} raw
 * @param {?} connection
 * @param {?} exhaust
 * @param {!Function=} callback
 * @return {void}
 */
Db.prototype._registerHandler = function(db_command, raw, connection, exhaust, callback) {};

/**
 * @param {?} newId
 * @param {?} object
 * @param {!Function=} callback
 * @return {void}
 */
Db.prototype._reRegisterHandler = function(newId, object, callback) {};

/**
 * @param {?} id
 * @param {?} document
 * @param {?} err
 * @return {?}
 */
Db.prototype._callHandler = function(id, document, err) {};

/**
 * @param {?} id
 * @return {?}
 */
Db.prototype._hasHandler = function(id) {};

/**
 * @param {?} id
 * @return {?}
 */
Db.prototype._removeHandler = function(id) {};

/**
 * @param {?} id
 * @return {{id: string, callback: !Function}}
 */
Db.prototype._findHandler = function(id) {};

/**
 * @param {?} self
 * @param {?} db_command
 * @param {?} options
 * @param {?=} callback
 * @return {void}
 */
Db.prototype.__executeQueryCommand = function(self, db_command, options, callback) {};

/**
 * @param {string} url
 * @param {{uri_decode_auth: boolean}} options
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Db.prototype.connect = function(url, options, callback) {};

/**
 * @param {string} event
 * @param {function(?): ?} handler
 * @return {?}
 */
Db.prototype.addListener = function(event, handler) {};

/**
 * @constructor
 * @struct
 * @param {string=} s
 */
function ObjectID(s) {}

/**
 * @return {string}
 */
ObjectID.prototype.toHexString = function() {};

/**
 * @param {!ObjectID} otherID
 * @return {boolean}
 */
ObjectID.prototype.equals = function(otherID) {};

/**
 * @return {!Date}
 */
ObjectID.prototype.getTimestamp = function() {};

/**
 * @param {number} time
 * @return {!ObjectID}
 */
ObjectID.createFromTime = function(time) {};

/**
 * @param {string} hexString
 * @return {!ObjectID}
 */
ObjectID.createFromHexString = function(hexString) {};

/**
 * @param {string} id
 * @return {!Boolean}
 */
ObjectID.isValid = function(id) {};

/**
 * @param {number=} time
 * @return {string}
 */
ObjectID.prototype.generate = function(time) {};

/**
 * @constructor
 * @struct
 * @param {?} buffer
 * @param {number=} subType
 */
function Binary(buffer, subType) {}

/**
 * @param {?} byte_value
 * @return {void}
 */
Binary.prototype.put = function(byte_value) {};

/**
 * @param {?} buffer
 * @param {number} offset
 * @return {void}
 */
Binary.prototype.write = function(buffer, offset) {};

/**
 * @param {number} position
 * @param {number} length
 * @return {?}
 */
Binary.prototype.read = function(position, length) {};

/**
 * @return {string}
 */
Binary.prototype.value = function() {};

/**
 * @return {number}
 */
Binary.prototype.length = function() {};
/**
 * @record
 * @struct
 */
function SocketOptions() {}
 /** @type {number} */
SocketOptions.prototype.timeout;
 /** @type {boolean} */
SocketOptions.prototype.noDelay;
 /** @type {number} */
SocketOptions.prototype.keepAlive;
 /** @type {string} */
SocketOptions.prototype.encoding;
/**
 * @record
 * @struct
 */
function ServerOptions() {}
 /** @type {boolean} */
ServerOptions.prototype.auto_reconnect;
 /** @type {number} */
ServerOptions.prototype.poolSize;
 /** @type {?} */
ServerOptions.prototype.socketOptions;
/**
 * @record
 * @struct
 */
function PKFactory() {}
 /** @type {number} */
PKFactory.prototype.counter;
 /** @type {?} */
PKFactory.prototype.createPk;
/**
 * @record
 * @struct
 */
function DbCreateOptions() {}
 /** @type {?} */
DbCreateOptions.prototype.w;
 /** @type {number} */
DbCreateOptions.prototype.wtimeout;
 /** @type {boolean} */
DbCreateOptions.prototype.fsync;
 /** @type {boolean} */
DbCreateOptions.prototype.journal;
 /** @type {string} */
DbCreateOptions.prototype.readPreference;
 /** @type {boolean} */
DbCreateOptions.prototype.native_parser;
 /** @type {boolean} */
DbCreateOptions.prototype.forceServerObjectId;
 /** @type {?} */
DbCreateOptions.prototype.pkFactory;
 /** @type {boolean} */
DbCreateOptions.prototype.serializeFunctions;
 /** @type {boolean} */
DbCreateOptions.prototype.raw;
 /** @type {boolean} */
DbCreateOptions.prototype.recordQueryStats;
 /** @type {number} */
DbCreateOptions.prototype.retryMiliSeconds;
 /** @type {number} */
DbCreateOptions.prototype.numberOfRetries;
 /** @type {!Object} */
DbCreateOptions.prototype.logger;
 /** @type {number} */
DbCreateOptions.prototype.slaveOk;
 /** @type {boolean} */
DbCreateOptions.prototype.promoteLongs;
/**
 * @constructor
 * @struct
 */
function ReadPreference() {}
 /** @type {string} */
ReadPreference.PRIMARY;
 /** @type {string} */
ReadPreference.PRIMARY_PREFERRED;
 /** @type {string} */
ReadPreference.SECONDARY;
 /** @type {string} */
ReadPreference.SECONDARY_PREFERRED;
 /** @type {string} */
ReadPreference.NEAREST;
/**
 * @record
 * @struct
 */
function CollectionCreateOptions() {}
 /** @type {string} */
CollectionCreateOptions.prototype.readPreference;
 /** @type {boolean} */
CollectionCreateOptions.prototype.slaveOk;
 /** @type {boolean} */
CollectionCreateOptions.prototype.serializeFunctions;
 /** @type {boolean} */
CollectionCreateOptions.prototype.raw;
 /** @type {?} */
CollectionCreateOptions.prototype.pkFactory;
/**
 * @record
 * @struct
 */
function CollStats() {}
 /** @type {string} */
CollStats.prototype.ns;
 /** @type {number} */
CollStats.prototype.count;
 /** @type {number} */
CollStats.prototype.size;
 /** @type {number} */
CollStats.prototype.avgObjSize;
 /** @type {number} */
CollStats.prototype.storageSize;
 /** @type {number} */
CollStats.prototype.numExtents;
 /** @type {number} */
CollStats.prototype.nindexes;
 /** @type {number} */
CollStats.prototype.lastExtentSize;
 /** @type {number} */
CollStats.prototype.paddingFactor;
 /** @type {number} */
CollStats.prototype.flags;
 /** @type {number} */
CollStats.prototype.totalIndexSize;
 /** @type {?} */
CollStats.prototype.indexSizes;
/**
 * @record
 * @struct
 */
function Collection() {}

/* TODO: ConstructSignature:  */
 /** @type {?} */
Collection.prototype.hint;

/**
 * @deprecated use insertOne or insertMany
 * Documentation : http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#insert
 * @param {?} query
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.insert = function(query, callback_or_options, callback) {};

/**
 * @param {?} doc
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.insertOne = function(doc, callback_or_options, callback) {};

/**
 * @param {?} docs
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.insertMany = function(docs, callback_or_options, callback) {};

/**
 * @deprecated use deleteOne or deleteMany
 * Documentation : http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#remove
 * @param {!Object} selector
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.remove = function(selector, callback_or_options, callback) {};

/**
 * @param {?} filter
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.deleteOne = function(filter, callback_or_options, callback) {};

/**
 * @param {?} filter
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.deleteMany = function(filter, callback_or_options, callback) {};

/**
 * @param {!String} newName
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.rename = function(newName, callback) {};

/**
 * @param {?} doc
 * @param {?} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.save = function(doc, callback_or_options, callback) {};

/**
 * @deprecated use updateOne or updateMany
 * Documentation : http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#update
 * @param {!Object} selector
 * @param {?} document
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.update = function(selector, document, callback_or_options, callback) {};

/**
 * @param {!Object} filter
 * @param {?} update
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.updateOne = function(filter, update, callback_or_options, callback) {};

/**
 * @param {!Object} filter
 * @param {?} update
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.updateMany = function(filter, update, callback_or_options, callback) {};

/**
 * @param {string} key
 * @param {!Object} query
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.distinct = function(key, query, callback_or_options, callback) {};

/**
 * @param {?|!Object=} callback_or_query
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.count = function(callback_or_query, callback_or_options, callback) {};

/**
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.drop = function(callback) {};

/**
 * @deprecated use findOneAndUpdate, findOneAndReplace or findOneAndDelete
 * Documentation : http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify
 * @param {!Object} query
 * @param {!Array<?>} sort
 * @param {!Object} doc
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.findAndModify = function(query, sort, doc, callback_or_options, callback) {};

/**
 * @deprecated use findOneAndDelete
 * Documentation : http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndRemove
 * @param {!Object} query
 * @param {!Array<?>=} sort
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.findAndRemove = function(query, sort, callback_or_options, callback) {};

/**
 * @param {?} filter
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.findOneAndDelete = function(filter, callback_or_options, callback) {};

/**
 * @param {?} filter
 * @param {?} replacement
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.findOneAndReplace = function(filter, replacement, callback_or_options, callback) {};

/**
 * @param {?} filter
 * @param {?} update
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.findOneAndUpdate = function(filter, update, callback_or_options, callback) {};

/**
 * @param {?|!Object=} callback_or_selector
 * @param {?=} callback_or_fields_or_options
 * @param {?|number=} callback_or_options_or_skip
 * @param {?|number=} callback_or_limit
 * @param {?|number=} callback_or_timeout
 * @param {?=} callback
 * @return {!Cursor}
 */
Collection.prototype.find = function(callback_or_selector, callback_or_fields_or_options, callback_or_options_or_skip, callback_or_limit, callback_or_timeout, callback) {};

/**
 * @param {?|!Object=} callback_or_selector
 * @param {?=} callback_or_fields_or_options
 * @param {?|number=} callback_or_options_or_skip
 * @param {?|number=} callback_or_limit
 * @param {?|number=} callback_or_timeout
 * @param {?=} callback
 * @return {!Cursor}
 */
Collection.prototype.findOne = function(callback_or_selector, callback_or_fields_or_options, callback_or_options_or_skip, callback_or_limit, callback_or_timeout, callback) {};

/**
 * @param {?} fieldOrSpec
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.createIndex = function(fieldOrSpec, callback_or_options, callback) {};

/**
 * @param {?} fieldOrSpec
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.ensureIndex = function(fieldOrSpec, callback_or_options, callback) {};

/**
 * @param {?} options
 * @param {!Function=} callback
 * @return {void}
 */
Collection.prototype.indexInformation = function(options, callback) {};

/**
 * @param {string} name
 * @param {!Function=} callback
 * @return {void}
 */
Collection.prototype.dropIndex = function(name, callback) {};

/**
 * @param {!Function=} callback
 * @return {void}
 */
Collection.prototype.dropAllIndexes = function(callback) {};

/**
 * @param {!Function=} callback
 * @return {void}
 */
Collection.prototype.reIndex = function(callback) {};

/**
 * @param {!Function} map
 * @param {!Function} reduce
 * @param {?} options
 * @param {!Function=} callback
 * @return {void}
 */
Collection.prototype.mapReduce = function(map, reduce, options, callback) {};

/**
 * @param {!Object} keys
 * @param {!Object} condition
 * @param {!Object} initial
 * @param {!Function} reduce
 * @param {!Function} finalize
 * @param {boolean} command
 * @param {?} options
 * @param {!Function=} callback
 * @return {void}
 */
Collection.prototype.group = function(keys, condition, initial, reduce, finalize, command, options, callback) {};

/**
 * @param {!Function=} callback
 * @return {void}
 */
Collection.prototype.options = function(callback) {};

/**
 * @param {!Function=} callback
 * @return {void}
 */
Collection.prototype.isCapped = function(callback) {};

/**
 * @param {string} indexes
 * @param {!Function=} callback
 * @return {void}
 */
Collection.prototype.indexExists = function(indexes, callback) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {!Function|!Object=} callback_or_options
 * @param {!Function=} callback
 * @return {void}
 */
Collection.prototype.geoNear = function(x, y, callback_or_options, callback) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {!Function|!Object=} callback_or_options
 * @param {!Function=} callback
 * @return {void}
 */
Collection.prototype.geoHaystackSearch = function(x, y, callback_or_options, callback) {};

/**
 * @param {!Function=} callback
 * @return {void}
 */
Collection.prototype.indexes = function(callback) {};

/**
 * @param {!Array<?>} pipeline
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.aggregate = function(pipeline, callback_or_options, callback) {};

/**
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
Collection.prototype.stats = function(callback_or_options, callback) {};
/**
 * @record
 * @struct
 */
function MapReduceOptions() {}
 /** @type {!Object} */
MapReduceOptions.prototype.out;
 /** @type {!Object} */
MapReduceOptions.prototype.query;
 /** @type {!Object} */
MapReduceOptions.prototype.sort;
 /** @type {number} */
MapReduceOptions.prototype.limit;
 /** @type {boolean} */
MapReduceOptions.prototype.keeptemp;
 /** @type {?} */
MapReduceOptions.prototype.finalize;
 /** @type {!Object} */
MapReduceOptions.prototype.scope;
 /** @type {boolean} */
MapReduceOptions.prototype.jsMode;
 /** @type {boolean} */
MapReduceOptions.prototype.verbose;
 /** @type {string} */
MapReduceOptions.prototype.readPreference;
/**
 * @record
 * @struct
 */
function IndexOptions() {}
 /** @type {?} */
IndexOptions.prototype.w;
 /** @type {number} */
IndexOptions.prototype.wtimeout;
 /** @type {boolean} */
IndexOptions.prototype.fsync;
 /** @type {boolean} */
IndexOptions.prototype.journal;
 /** @type {boolean} */
IndexOptions.prototype.unique;
 /** @type {boolean} */
IndexOptions.prototype.sparse;
 /** @type {boolean} */
IndexOptions.prototype.background;
 /** @type {boolean} */
IndexOptions.prototype.dropDups;
 /** @type {number} */
IndexOptions.prototype.min;
 /** @type {number} */
IndexOptions.prototype.max;
 /** @type {number} */
IndexOptions.prototype.v;
 /** @type {number} */
IndexOptions.prototype.expireAfterSeconds;
 /** @type {string} */
IndexOptions.prototype.name;
/**
 * @constructor
 * @struct
 */
function Cursor() {}
 /** @type {number} */
Cursor.INIT;
 /** @type {number} */
Cursor.OPEN;
 /** @type {number} */
Cursor.CLOSED;
 /** @type {number} */
Cursor.GET_MORE;

/**
 * @return {!Cursor}
 */
Cursor.prototype.rewind = function() {};

/**
 * @param {function(!Error, !Array<?>): ?=} callback
 * @return {void}
 */
Cursor.prototype.toArray = function(callback) {};

/**
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Cursor.prototype.each = function(callback) {};

/**
 * @param {boolean} applySkipLimit
 * @param {function(!Error, number): void=} callback
 * @return {void}
 */
Cursor.prototype.count = function(applySkipLimit, callback) {};

/**
 * @param {?|!String} keyOrList
 * @param {function(!Error, ?): void|string=} callback_or_direction
 * @param {function(!Error, ?): void=} callback
 * @return {!Cursor}
 */
Cursor.prototype.sort = function(keyOrList, callback_or_direction, callback) {};

/**
 * @param {number} limit
 * @param {function(!Error, ?): void=} callback
 * @return {!Cursor}
 */
Cursor.prototype.limit = function(limit, callback) {};

/**
 * @param {string} preference
 * @param {!Function=} callback
 * @return {!Cursor}
 */
Cursor.prototype.setReadPreference = function(preference, callback) {};

/**
 * @param {number} skip
 * @param {function(!Error, ?): void=} callback
 * @return {!Cursor}
 */
Cursor.prototype.skip = function(skip, callback) {};

/**
 * @param {number} batchSize
 * @param {function(!Error, ?): void=} callback
 * @return {!Cursor}
 */
Cursor.prototype.batchSize = function(batchSize, callback) {};

/**
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Cursor.prototype.nextObject = function(callback) {};

/**
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Cursor.prototype.explain = function(callback) {};

/**
 * @return {!CursorStream}
 */
Cursor.prototype.stream = function() {};

/**
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
Cursor.prototype.close = function(callback) {};

/**
 * @return {boolean}
 */
Cursor.prototype.isClosed = function() {};

/**
 * @constructor
 * @struct
 * @param {!Cursor} cursor
 */
function CursorStream(cursor) {}

/**
 * @return {?}
 */
CursorStream.prototype.pause = function() {};

/**
 * @return {?}
 */
CursorStream.prototype.resume = function() {};

/**
 * @return {?}
 */
CursorStream.prototype.destroy = function() {};
/**
 * @record
 * @struct
 */
function CollectionFindOptions() {}
 /** @type {number} */
CollectionFindOptions.prototype.limit;
 /** @type {?} */
CollectionFindOptions.prototype.sort;
 /** @type {!Object} */
CollectionFindOptions.prototype.fields;
 /** @type {number} */
CollectionFindOptions.prototype.skip;
 /** @type {!Object} */
CollectionFindOptions.prototype.hint;
 /** @type {boolean} */
CollectionFindOptions.prototype.explain;
 /** @type {boolean} */
CollectionFindOptions.prototype.snapshot;
 /** @type {boolean} */
CollectionFindOptions.prototype.timeout;
 /** @type {boolean} */
CollectionFindOptions.prototype.tailtable;
 /** @type {number} */
CollectionFindOptions.prototype.tailableRetryInterval;
 /** @type {number} */
CollectionFindOptions.prototype.numberOfRetries;
 /** @type {boolean} */
CollectionFindOptions.prototype.awaitdata;
 /** @type {boolean} */
CollectionFindOptions.prototype.oplogReplay;
 /** @type {boolean} */
CollectionFindOptions.prototype.exhaust;
 /** @type {number} */
CollectionFindOptions.prototype.batchSize;
 /** @type {boolean} */
CollectionFindOptions.prototype.returnKey;
 /** @type {number} */
CollectionFindOptions.prototype.maxScan;
 /** @type {number} */
CollectionFindOptions.prototype.min;
 /** @type {number} */
CollectionFindOptions.prototype.max;
 /** @type {boolean} */
CollectionFindOptions.prototype.showDiskLoc;
 /** @type {!String} */
CollectionFindOptions.prototype.comment;
 /** @type {boolean} */
CollectionFindOptions.prototype.raw;
 /** @type {!String} */
CollectionFindOptions.prototype.readPreference;
 /** @type {boolean} */
CollectionFindOptions.prototype.partial;
/**
 * @record
 * @struct
 */
function MongoCollectionOptions() {}
 /** @type {?} */
MongoCollectionOptions.prototype.safe;
 /** @type {?} */
MongoCollectionOptions.prototype.serializeFunctions;
 /** @type {boolean} */
MongoCollectionOptions.prototype.strict;
 /** @type {boolean} */
MongoCollectionOptions.prototype.raw;
 /** @type {?} */
MongoCollectionOptions.prototype.pkFactory;
 /** @type {string} */
MongoCollectionOptions.prototype.readPreference;
