/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/ignite-ui/index.d.ts:
/**
 * @record
 * @struct
 */
function DataSourceSettingsPaging() {}
 /** @type {boolean} */
DataSourceSettingsPaging.prototype.enabled;
 /** @type {string} */
DataSourceSettingsPaging.prototype.type;
 /** @type {number} */
DataSourceSettingsPaging.prototype.pageSize;
 /** @type {string} */
DataSourceSettingsPaging.prototype.pageSizeUrlKey;
 /** @type {string} */
DataSourceSettingsPaging.prototype.pageIndexUrlKey;
 /** @type {number} */
DataSourceSettingsPaging.prototype.pageIndex;
 /** @type {boolean} */
DataSourceSettingsPaging.prototype.appendPage;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function DataSourceSettingsFiltering() {}
 /** @type {string} */
DataSourceSettingsFiltering.prototype.type;
 /** @type {boolean} */
DataSourceSettingsFiltering.prototype.caseSensitive;
 /** @type {boolean} */
DataSourceSettingsFiltering.prototype.applyToAllData;
 /** @type {?} */
DataSourceSettingsFiltering.prototype.customFunc;
 /** @type {string} */
DataSourceSettingsFiltering.prototype.filterExprUrlKey;
 /** @type {string} */
DataSourceSettingsFiltering.prototype.filterLogicUrlKey;
 /** @type {!Array<?>} */
DataSourceSettingsFiltering.prototype.defaultFields;
 /** @type {!Array<?>} */
DataSourceSettingsFiltering.prototype.expressions;
 /** @type {string} */
DataSourceSettingsFiltering.prototype.exprString;
 /** @type {?} */
DataSourceSettingsFiltering.prototype.customConditions;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function DataSourceSettingsSorting() {}
 /** @type {string} */
DataSourceSettingsSorting.prototype.defaultDirection;
 /** @type {!Array<?>} */
DataSourceSettingsSorting.prototype.defaultFields;
 /** @type {boolean} */
DataSourceSettingsSorting.prototype.applyToAllData;
 /** @type {?} */
DataSourceSettingsSorting.prototype.customFunc;
 /** @type {?} */
DataSourceSettingsSorting.prototype.compareFunc;
 /** @type {?} */
DataSourceSettingsSorting.prototype.customConvertFunc;
 /** @type {string} */
DataSourceSettingsSorting.prototype.type;
 /** @type {boolean} */
DataSourceSettingsSorting.prototype.caseSensitive;
 /** @type {string} */
DataSourceSettingsSorting.prototype.sortUrlKey;
 /** @type {string} */
DataSourceSettingsSorting.prototype.sortUrlAscValueKey;
 /** @type {string} */
DataSourceSettingsSorting.prototype.sortUrlDescValueKey;
 /** @type {!Array<?>} */
DataSourceSettingsSorting.prototype.expressions;
 /** @type {string} */
DataSourceSettingsSorting.prototype.exprString;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function DataSourceSettingsGroupby() {}
 /** @type {boolean} */
DataSourceSettingsGroupby.prototype.defaultCollapseState;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function DataSourceSettingsSummaries() {}
 /** @type {string} */
DataSourceSettingsSummaries.prototype.type;
 /** @type {string} */
DataSourceSettingsSummaries.prototype.summaryExprUrlKey;
 /** @type {string} */
DataSourceSettingsSummaries.prototype.summariesResponseKey;
 /** @type {string} */
DataSourceSettingsSummaries.prototype.summaryExecution;
 /** @type {!Array<?>} */
DataSourceSettingsSummaries.prototype.columnSettings;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function DataSourceSettings() {}
 /** @type {string} */
DataSourceSettings.prototype.id;
 /** @type {string} */
DataSourceSettings.prototype.outputResultsName;
 /** @type {!Function} */
DataSourceSettings.prototype.callback;
 /** @type {?} */
DataSourceSettings.prototype.callee;
 /** @type {!Array<?>} */
DataSourceSettings.prototype.data;
 /** @type {?} */
DataSourceSettings.prototype.dataSource;
 /** @type {?} */
DataSourceSettings.prototype.dataBinding;
 /** @type {?} */
DataSourceSettings.prototype.dataBound;
 /** @type {string} */
DataSourceSettings.prototype.requestType;
 /** @type {string} */
DataSourceSettings.prototype.type;
 /** @type {?} */
DataSourceSettings.prototype.schema;
 /** @type {string} */
DataSourceSettings.prototype.primaryKey;
 /** @type {string} */
DataSourceSettings.prototype.responseTotalRecCountKey;
 /** @type {string} */
DataSourceSettings.prototype.responseDataKey;
 /** @type {string} */
DataSourceSettings.prototype.responseDataType;
 /** @type {string} */
DataSourceSettings.prototype.responseContentType;
 /** @type {boolean} */
DataSourceSettings.prototype.localSchemaTransform;
 /** @type {?} */
DataSourceSettings.prototype.urlParamsEncoding;
 /** @type {?} */
DataSourceSettings.prototype.urlParamsEncoded;
 /** @type {!DataSourceSettingsPaging} */
DataSourceSettings.prototype.paging;
 /** @type {!DataSourceSettingsFiltering} */
DataSourceSettings.prototype.filtering;
 /** @type {!DataSourceSettingsSorting} */
DataSourceSettings.prototype.sorting;
 /** @type {!DataSourceSettingsGroupby} */
DataSourceSettings.prototype.groupby;
 /** @type {!DataSourceSettingsSummaries} */
DataSourceSettings.prototype.summaries;
 /** @type {!Array<?>} */
DataSourceSettings.prototype.fields;
 /** @type {boolean} */
DataSourceSettings.prototype.serializeTransactionLog;
 /** @type {boolean} */
DataSourceSettings.prototype.aggregateTransactions;
 /** @type {boolean} */
DataSourceSettings.prototype.autoCommit;
 /** @type {string} */
DataSourceSettings.prototype.updateUrl;
 /** @type {!Function} */
DataSourceSettings.prototype.rowAdded;
 /** @type {!Function} */
DataSourceSettings.prototype.rowUpdated;
 /** @type {!Function} */
DataSourceSettings.prototype.rowInserted;
 /** @type {!Function} */
DataSourceSettings.prototype.rowDeleted;

/* TODO: IndexSignature:  */
/** @const */
var Infragistics = {};

/**
 * @constructor
 * @struct
 * @param {!DataSourceSettings} settings
 */
Infragistics.DataSource = function(settings) {};

/**
 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
 * 
 * @param {!Object=} fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
 * @return {!Object}
 */
Infragistics.DataSource.prototype.fields = function(fields) {};

/**
 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
 * @return {string}
 */
Infragistics.DataSource.prototype.analyzeDataSource = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
 * @return {!Array<?>}
 */
Infragistics.DataSource.prototype.dataView = function() {};

/**
 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
 * @return {!Object}
 */
Infragistics.DataSource.prototype.data = function() {};

/**
 * Returns transformed data according to transformed execution:
 * 1. Before paging and filtering
 * 2. After filtering before paging
 * 3. After filtering and paging
 * 
 * @param {!Object} transformedExecution
 * @return {!Object}
 */
Infragistics.DataSource.prototype.transformedData = function(transformedExecution) {};

/**
 * Returns summaries data
 * @return {!Object}
 */
Infragistics.DataSource.prototype.dataSummaries = function() {};

/**
 * Gets/sets the schema definition.
 * 
 * @param {!Object=} s    a schema object
 * @param {string=} t    type of the data source. See settings.type
 * @return {void}
 */
Infragistics.DataSource.prototype.schema = function(s, t) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} p    object holding all paging settings. See settings.paging
 * @return {!Object}
 */
Infragistics.DataSource.prototype.pagingSettings = function(p) {};

/**
 * Gets/sets a list of filtering settings
 * 
 * @param {!Object=} f    object holding all filtering settings. See settings.filtering
 * @return {void}
 */
Infragistics.DataSource.prototype.filterSettings = function(f) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} s    object holding all sorting settings. See settings.sorting
 * @return {!Object}
 */
Infragistics.DataSource.prototype.sortSettings = function(s) {};

/**
 * Gets/sets a list of summaries settings.
 * 
 * @param {!Object=} s    object holding all summaries settings. See settings.summaries
 * @return {void}
 */
Infragistics.DataSource.prototype.summariesSettings = function(s) {};

/**
 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
 * 
 * @param {!Object=} ds
 * @return {!Object}
 */
Infragistics.DataSource.prototype.dataSource = function(ds) {};

/**
 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
 * 
 * @param {!Object=} t
 * @return {string} json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
 */
Infragistics.DataSource.prototype.type = function(t) {};

/**
 * Returns a record by a specified key (requires that primaryKey is set in the settings)
 * 
 * @param {string} key    Primary key of the record
 * @param {string=} ds    the data source in which to search for the record. When not set it will use the current data source.
 * @param {string=} objPath    Not used in $.ig.DataSource
 * @return {!Object}
 */
Infragistics.DataSource.prototype.findRecordByKey = function(key, ds, objPath) {};

/**
 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
 * 
 * @param {!Object} key    primary key of the record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.DataSource.prototype.removeRecordByKey = function(key, origDs) {};

/**
 * Removes a record from the data source at specific index.
 * 
 * @param {number} index    index of record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.DataSource.prototype.removeRecordByIndex = function(index, origDs) {};

/**
 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
 * 
 * @param {!Object} rowId    the rowId - row key (string) or index (number)
 * @param {!Object} colId    the column id - column key (string) or index (number)
 * @param {!Object} val    The new value
 * @param {boolean} autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.DataSource.prototype.setCellValue = function(rowId, colId, val, autoCommit) {};

/**
 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.DataSource.prototype.updateRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.DataSource.prototype.addRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {number} rowIndex    row index at which to insert the new row
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @param {!Object} parentRowId    Not used in $.ig.DataSource
 * @return {!Object}
 */
Infragistics.DataSource.prototype.insertRow = function(rowId, rowObject, rowIndex, autoCommit, parentRowId) {};

/**
 * Deletes a row from the data source.
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.DataSource.prototype.deleteRow = function(rowId, autoCommit) {};

/**
 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.DataSource.prototype.addNode = function(data) {};

/**
 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.DataSource.prototype.removeNode = function(data) {};

/**
 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
 * 
 * @param {!Object} t    a transaction object
 * @return {!Object}
 */
Infragistics.DataSource.prototype.getDetachedRecord = function(t) {};

/**
 * Update the data source with every transaction from the log
 * 
 * @param {number=} id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
 * @return {void}
 */
Infragistics.DataSource.prototype.commit = function(id) {};

/**
 * Clears the transaction log without updating anything in the data source
 * 
 * @param {!Object=} id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
 * @return {void}
 */
Infragistics.DataSource.prototype.rollback = function(id) {};

/**
 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
 * @return {!Array<?>}
 */
Infragistics.DataSource.prototype.pendingTransactions = function() {};

/**
 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
 * @return {!Array<?>}
 */
Infragistics.DataSource.prototype.allTransactions = function() {};

/**
 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
 * @return {string}
 */
Infragistics.DataSource.prototype.transactionsAsString = function() {};

/**
 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
 * 
 * @param {!Function} success    Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
 * @param {!Function} error    Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
 * @return {void}
 */
Infragistics.DataSource.prototype.saveChanges = function(success, error) {};

/**
 * Data binds to the current data source
 * databinding works using the following workflow:
 * 1. fire the databinding event
 * 2. based on the data source type (see analyzeDataSource()), do the following:
 * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
 * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
 * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
 * if no paging/sorting/filtering are enabled, use just this._data to save space
 * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
 * if the data source is invalid, throw an exception
 * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
 * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object tree
 * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
 * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
 * 6. fire the databound event
 * 
 * @param {string=} callback    callback function
 * @param {!Object=} callee    callee object on which the callback will be executed. If none is specified, will assume global execution context
 * @return {void}
 */
Infragistics.DataSource.prototype.dataBind = function(callback, callee) {};

/**
 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
 * 
 * @param {string} fieldName    the fieldName - name of the field
 * @param {!Object} record    the record from which to get it
 * @return {!Object}
 */
Infragistics.DataSource.prototype.getCellValue = function(fieldName, record) {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets or sets summaries data.
 * If key or dsObj are not set then returns summaries data.
 * Takes summary data from passed argument dsObj(using argument key)
 * 
 * @param {string=} key    response key to take summary data(for example "Metadata.Summaries")
 * @param {!Object=} dsObj    data source object - usually contains information about data records and metadata(holds info about summaries)
 * @return {!Object}
 */
Infragistics.DataSource.prototype.summariesResponse = function(key, dsObj) {};

/**
 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
 * @return {!Array<?>}
 */
Infragistics.DataSource.prototype.filteredData = function() {};

/**
 * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView().
 * Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
 * multi-column sorting can be enabled by setting keepSortState to true.
 * fields => an array of fields object definitions:
 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
 * 
 * @param {!Object} fields    an array of fields object definitions
 * @param {string} direction    asc / desc direction
 * @return {void}
 */
Infragistics.DataSource.prototype.sort = function(fields, direction) {};

/**
 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.DataSource.prototype.clearLocalSorting = function() {};

/**
 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and
 * setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
 * if expr is detected to be a regular expression, the "cond" part is skipped
 * 
 * @param {!Object} fieldExpressions    a list of field expression definitions
 * @param {!Object} boolLogic    boolean logic. Accepted values are AND and OR.
 * @param {boolean} keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
 * @param {!Object} fieldExpressionsOnStrings    a list of field expression definitions (or a string with the conditions separated by AND/OR operator, example: "ID = 1 OR ID = 2"), which when applied will threat the related field as if it's string and can only apply conditions valid for string types.
 * @return {void}
 */
Infragistics.DataSource.prototype.filter = function(fieldExpressions, boolLogic, keepFilterState, fieldExpressionsOnStrings) {};

/**
 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.DataSource.prototype.clearLocalFilter = function() {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets / sets the total number of records in the data source.
 * If data binding is remote, and there's paging or filtering enabled,
 * the actual total number of records may not
 * match the number of records that exists on the client
 * 
 * @param {number=} count    the total number of records
 * @param {!Object=} key
 * @param {!Object=} dsObj
 * @param {!Object=} context
 * @return {number}
 */
Infragistics.DataSource.prototype.totalRecordsCount = function(count, key, dsObj, context) {};

/**
 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
 * 
 * @param {boolean} hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
 * @return {void}
 */
Infragistics.DataSource.prototype.hasTotalRecordsCount = function(hasCount) {};

/**
 * Returns metadata object for the specified key
 * 
 * @param {string} key    Primary key of the record
 * @return {!Object}
 */
Infragistics.DataSource.prototype.metadata = function(key) {};

/**
 * Returns the total number of records in the local data source
 * @return {number}
 */
Infragistics.DataSource.prototype.totalLocalRecordsCount = function() {};

/**
 * Returns the total number of pages
 * @return {number}
 */
Infragistics.DataSource.prototype.pageCount = function() {};

/**
 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
 * 
 * @param {number=} index    the page index. If none is specified, returns the current page index.
 * @return {number}
 */
Infragistics.DataSource.prototype.pageIndex = function(index) {};

/**
 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
 * 
 * @param {number=} value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
 * @return {number}
 */
Infragistics.DataSource.prototype.persistedPageIndex = function(value) {};

/**
 * Sets the page index to be equal to the previous page index and rebinds the data source
 * @return {void}
 */
Infragistics.DataSource.prototype.prevPage = function() {};

/**
 * Sets the page index to be equal to the next page index and rebinds the data source
 * @return {void}
 */
Infragistics.DataSource.prototype.nextPage = function() {};

/**
 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
 * 
 * @param {number=} s    the page size.
 * @return {number}
 */
Infragistics.DataSource.prototype.pageSize = function(s) {};

/**
 * For internal use
 * 
 * @param {!Object} dirty
 * @return {void}
 */
Infragistics.DataSource.prototype.pageSizeDirty = function(dirty) {};

/**
 * Returns a list of records for the specified page. Implies that paging is enabled.
 * 
 * @param {number} p    the page index for which records will be returned
 * @return {void}
 */
Infragistics.DataSource.prototype.recordsForPage = function(p) {};

/**
 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
 * 
 * @param {!Element} tableDOM    TABLE dom element to transform
 * @return {!Object}
 */
Infragistics.DataSource.prototype.tableToObject = function(tableDOM) {};

/**
 * Parses the string and returns an evaluated JSON object
 * 
 * @param {string} s    the JSON as string.
 * @return {void}
 */
Infragistics.DataSource.prototype.stringToJSONObject = function(s) {};

/**
 * Parses a string and returns a XML Document
 * 
 * @param {string} s    the XML represented as a string
 * @return {void}
 */
Infragistics.DataSource.prototype.stringToXmlObject = function(s) {};

/**
 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
 * @return {!Array<?>}
 */
Infragistics.DataSource.prototype.groupByData = function() {};

/**
 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
 * @return {!Array<?>}
 */
Infragistics.DataSource.prototype.visibleGroupByData = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
 * @return {!Array<?>}
 */
Infragistics.DataSource.prototype.groupByDataView = function() {};

/**
 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
 * 
 * @param {string} id    data-id attribute of the respective group row in the DOM
 * @param {boolean} collapsed    if true the record should be collapsed, otherwise expanded
 * @return {void}
 */
Infragistics.DataSource.prototype.toggleGroupByRecord = function(id, collapsed) {};

/**
 * Check whether the specified gorupby record is collapsed
 * 
 * @param {!Object} gbRec    id of the grouped record OR grouped record
 * @return {boolean}
 */
Infragistics.DataSource.prototype.isGroupByRecordCollapsed = function(gbRec) {};

/**
 * Check whether grouping is applied for the specified sorting expressions.
 * 
 * @param {!Array<?>=} exprs    array of sorting expressions. If not set check expressions defined in sorting settings
 * @return {boolean}
 */
Infragistics.DataSource.prototype.isGroupByApplied = function(exprs) {};
/**
 * @record
 * @struct
 */
function IgniteUIStatic() {}
 /** @type {?} */
IgniteUIStatic.prototype.DataSource;
/**
 * @constructor
 * @struct
 */
Infragistics.TypeParser = function() {};

/**
 * @param {!Object} obj
 * @return {void}
 */
Infragistics.TypeParser.prototype.toStr = function(obj) {};

/**
 * L.A. 18 June 2012 Fixing bug #113265 Column 'date' shows empty values as 'NaN'
 * 
 * @param {!Object} obj
 * @param {!Object} pk
 * @param {!Object} key
 * @return {void}
 */
Infragistics.TypeParser.prototype.toDate = function(obj, pk, key) {};

/**
 * @param {!Object} obj
 * @return {void}
 */
Infragistics.TypeParser.prototype.toNumber = function(obj) {};

/**
 * @param {!Object} obj
 * @return {void}
 */
Infragistics.TypeParser.prototype.toBool = function(obj) {};

/**
 * @param {!Object} obj
 * @return {void}
 */
Infragistics.TypeParser.prototype.isNullOrUndefined = function(obj) {};

/**
 * @return {void}
 */
Infragistics.TypeParser.prototype.empty = function() {};

/**
 * @return {void}
 */
Infragistics.TypeParser.prototype.num = function() {};
/**
 * @record
 * @struct
 */
function DataSchemaSchemaFields() {}
 /** @type {string} */
DataSchemaSchemaFields.prototype.name;
 /** @type {(string|number|boolean|!Object|!Date)} */
DataSchemaSchemaFields.prototype.type;
 /** @type {string} */
DataSchemaSchemaFields.prototype.xpath;
 /** @type {(string|!Function)} */
DataSchemaSchemaFields.prototype.mapper;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function DataSchemaSchema() {}
 /** @type {!DataSchemaSchemaFields} */
DataSchemaSchema.prototype.fields;
 /** @type {string} */
DataSchemaSchema.prototype.searchField;
 /** @type {string} */
DataSchemaSchema.prototype.outputResultsName;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!DataSchemaSchema} schema
 */
Infragistics.DataSchema = function(schema) {};

/**
 * Performs a transformation on the schema so that the resulting data matches the schema
 * 
 * @param {!Object} data    the data to transform
 * @return {!Object}
 */
Infragistics.DataSchema.prototype.transform = function(data) {};

/**
 * Specifies if the object is null, undefined, or an empty string
 * 
 * @param {!Object} o    the object to check for being empty
 * @return {!Object}
 */
Infragistics.DataSchema.prototype.isEmpty = function(o) {};

/**
 * Specifies if the object has custom properties or not
 * 
 * @param {!Object} obj    the object to check for presence or lack of custom properties
 * @return {!Object}
 */
Infragistics.DataSchema.prototype.isObjEmpty = function(obj) {};

/**
 * A list of field definitions specifying the schema of the data source.
 * Field objects description: {fieldName, [fieldDataType], [fieldXPath]}
 * @return {!Array<?>}
 */
Infragistics.DataSchema.prototype.fields = function() {};
 /** @type {?} */
IgniteUIStatic.prototype.DataSchema;

/**
 * @constructor
 * @struct
 * @param {!DataSourceSettings} settings
 */
Infragistics.RemoteDataSource = function(settings) {};

/**
 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
 * 
 * @param {!Object=} fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
 * @return {!Object}
 */
Infragistics.RemoteDataSource.prototype.fields = function(fields) {};

/**
 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
 * @return {string}
 */
Infragistics.RemoteDataSource.prototype.analyzeDataSource = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
 * @return {!Array<?>}
 */
Infragistics.RemoteDataSource.prototype.dataView = function() {};

/**
 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
 * @return {!Object}
 */
Infragistics.RemoteDataSource.prototype.data = function() {};

/**
 * Returns transformed data according to transformed execution:
 * 1. Before paging and filtering
 * 2. After filtering before paging
 * 3. After filtering and paging
 * 
 * @param {!Object} transformedExecution
 * @return {!Object}
 */
Infragistics.RemoteDataSource.prototype.transformedData = function(transformedExecution) {};

/**
 * Returns summaries data
 * @return {!Object}
 */
Infragistics.RemoteDataSource.prototype.dataSummaries = function() {};

/**
 * Gets/sets the schema definition.
 * 
 * @param {!Object=} s    a schema object
 * @param {string=} t    type of the data source. See settings.type
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.schema = function(s, t) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} p    object holding all paging settings. See settings.paging
 * @return {!Object}
 */
Infragistics.RemoteDataSource.prototype.pagingSettings = function(p) {};

/**
 * Gets/sets a list of filtering settings
 * 
 * @param {!Object=} f    object holding all filtering settings. See settings.filtering
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.filterSettings = function(f) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} s    object holding all sorting settings. See settings.sorting
 * @return {!Object}
 */
Infragistics.RemoteDataSource.prototype.sortSettings = function(s) {};

/**
 * Gets/sets a list of summaries settings.
 * 
 * @param {!Object=} s    object holding all summaries settings. See settings.summaries
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.summariesSettings = function(s) {};

/**
 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
 * 
 * @param {!Object=} ds
 * @return {!Object}
 */
Infragistics.RemoteDataSource.prototype.dataSource = function(ds) {};

/**
 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
 * 
 * @param {!Object=} t
 * @return {string} json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
 */
Infragistics.RemoteDataSource.prototype.type = function(t) {};

/**
 * Returns a record by a specified key (requires that primaryKey is set in the settings)
 * 
 * @param {string} key    Primary key of the record
 * @param {string=} ds    the data source in which to search for the record. When not set it will use the current data source.
 * @param {string=} objPath    Not used in $.ig.DataSource
 * @return {!Object}
 */
Infragistics.RemoteDataSource.prototype.findRecordByKey = function(key, ds, objPath) {};

/**
 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
 * 
 * @param {!Object} key    primary key of the record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.removeRecordByKey = function(key, origDs) {};

/**
 * Removes a record from the data source at specific index.
 * 
 * @param {number} index    index of record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.removeRecordByIndex = function(index, origDs) {};

/**
 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
 * 
 * @param {!Object} rowId    the rowId - row key (string) or index (number)
 * @param {!Object} colId    the column id - column key (string) or index (number)
 * @param {!Object} val    The new value
 * @param {boolean} autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.RemoteDataSource.prototype.setCellValue = function(rowId, colId, val, autoCommit) {};

/**
 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.RemoteDataSource.prototype.updateRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.RemoteDataSource.prototype.addRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {number} rowIndex    row index at which to insert the new row
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @param {!Object} parentRowId    Not used in $.ig.DataSource
 * @return {!Object}
 */
Infragistics.RemoteDataSource.prototype.insertRow = function(rowId, rowObject, rowIndex, autoCommit, parentRowId) {};

/**
 * Deletes a row from the data source.
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.RemoteDataSource.prototype.deleteRow = function(rowId, autoCommit) {};

/**
 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.addNode = function(data) {};

/**
 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.removeNode = function(data) {};

/**
 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
 * 
 * @param {!Object} t    a transaction object
 * @return {!Object}
 */
Infragistics.RemoteDataSource.prototype.getDetachedRecord = function(t) {};

/**
 * Update the data source with every transaction from the log
 * 
 * @param {number=} id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.commit = function(id) {};

/**
 * Clears the transaction log without updating anything in the data source
 * 
 * @param {!Object=} id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.rollback = function(id) {};

/**
 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
 * @return {!Array<?>}
 */
Infragistics.RemoteDataSource.prototype.pendingTransactions = function() {};

/**
 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
 * @return {!Array<?>}
 */
Infragistics.RemoteDataSource.prototype.allTransactions = function() {};

/**
 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
 * @return {string}
 */
Infragistics.RemoteDataSource.prototype.transactionsAsString = function() {};

/**
 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
 * 
 * @param {!Function} success    Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
 * @param {!Function} error    Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.saveChanges = function(success, error) {};

/**
 * Data binds to the current data source
 * databinding works using the following workflow:
 * 1. fire the databinding event
 * 2. based on the data source type (see analyzeDataSource()), do the following:
 * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
 * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
 * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
 * if no paging/sorting/filtering are enabled, use just this._data to save space
 * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
 * if the data source is invalid, throw an exception
 * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
 * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object tree
 * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
 * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
 * 6. fire the databound event
 * 
 * @param {string=} callback    callback function
 * @param {!Object=} callee    callee object on which the callback will be executed. If none is specified, will assume global execution context
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.dataBind = function(callback, callee) {};

/**
 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
 * 
 * @param {string} fieldName    the fieldName - name of the field
 * @param {!Object} record    the record from which to get it
 * @return {!Object}
 */
Infragistics.RemoteDataSource.prototype.getCellValue = function(fieldName, record) {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets or sets summaries data.
 * If key or dsObj are not set then returns summaries data.
 * Takes summary data from passed argument dsObj(using argument key)
 * 
 * @param {string=} key    response key to take summary data(for example "Metadata.Summaries")
 * @param {!Object=} dsObj    data source object - usually contains information about data records and metadata(holds info about summaries)
 * @return {!Object}
 */
Infragistics.RemoteDataSource.prototype.summariesResponse = function(key, dsObj) {};

/**
 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
 * @return {!Array<?>}
 */
Infragistics.RemoteDataSource.prototype.filteredData = function() {};

/**
 * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView().
 * Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
 * multi-column sorting can be enabled by setting keepSortState to true.
 * fields => an array of fields object definitions:
 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
 * 
 * @param {!Object} fields    an array of fields object definitions
 * @param {string} direction    asc / desc direction
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.sort = function(fields, direction) {};

/**
 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.clearLocalSorting = function() {};

/**
 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and
 * setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
 * if expr is detected to be a regular expression, the "cond" part is skipped
 * 
 * @param {!Object} fieldExpressions    a list of field expression definitions
 * @param {!Object} boolLogic    boolean logic. Accepted values are AND and OR.
 * @param {boolean} keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
 * @param {!Object} fieldExpressionsOnStrings    a list of field expression definitions (or a string with the conditions separated by AND/OR operator, example: "ID = 1 OR ID = 2"), which when applied will threat the related field as if it's string and can only apply conditions valid for string types.
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.filter = function(fieldExpressions, boolLogic, keepFilterState, fieldExpressionsOnStrings) {};

/**
 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.clearLocalFilter = function() {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets / sets the total number of records in the data source.
 * If data binding is remote, and there's paging or filtering enabled,
 * the actual total number of records may not
 * match the number of records that exists on the client
 * 
 * @param {number=} count    the total number of records
 * @param {!Object=} key
 * @param {!Object=} dsObj
 * @param {!Object=} context
 * @return {number}
 */
Infragistics.RemoteDataSource.prototype.totalRecordsCount = function(count, key, dsObj, context) {};

/**
 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
 * 
 * @param {boolean} hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.hasTotalRecordsCount = function(hasCount) {};

/**
 * Returns metadata object for the specified key
 * 
 * @param {string} key    Primary key of the record
 * @return {!Object}
 */
Infragistics.RemoteDataSource.prototype.metadata = function(key) {};

/**
 * Returns the total number of records in the local data source
 * @return {number}
 */
Infragistics.RemoteDataSource.prototype.totalLocalRecordsCount = function() {};

/**
 * Returns the total number of pages
 * @return {number}
 */
Infragistics.RemoteDataSource.prototype.pageCount = function() {};

/**
 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
 * 
 * @param {number=} index    the page index. If none is specified, returns the current page index.
 * @return {number}
 */
Infragistics.RemoteDataSource.prototype.pageIndex = function(index) {};

/**
 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
 * 
 * @param {number=} value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
 * @return {number}
 */
Infragistics.RemoteDataSource.prototype.persistedPageIndex = function(value) {};

/**
 * Sets the page index to be equal to the previous page index and rebinds the data source
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.prevPage = function() {};

/**
 * Sets the page index to be equal to the next page index and rebinds the data source
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.nextPage = function() {};

/**
 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
 * 
 * @param {number=} s    the page size.
 * @return {number}
 */
Infragistics.RemoteDataSource.prototype.pageSize = function(s) {};

/**
 * For internal use
 * 
 * @param {!Object} dirty
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.pageSizeDirty = function(dirty) {};

/**
 * Returns a list of records for the specified page. Implies that paging is enabled.
 * 
 * @param {number} p    the page index for which records will be returned
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.recordsForPage = function(p) {};

/**
 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
 * 
 * @param {!Element} tableDOM    TABLE dom element to transform
 * @return {!Object}
 */
Infragistics.RemoteDataSource.prototype.tableToObject = function(tableDOM) {};

/**
 * Parses the string and returns an evaluated JSON object
 * 
 * @param {string} s    the JSON as string.
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.stringToJSONObject = function(s) {};

/**
 * Parses a string and returns a XML Document
 * 
 * @param {string} s    the XML represented as a string
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.stringToXmlObject = function(s) {};

/**
 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
 * @return {!Array<?>}
 */
Infragistics.RemoteDataSource.prototype.groupByData = function() {};

/**
 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
 * @return {!Array<?>}
 */
Infragistics.RemoteDataSource.prototype.visibleGroupByData = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
 * @return {!Array<?>}
 */
Infragistics.RemoteDataSource.prototype.groupByDataView = function() {};

/**
 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
 * 
 * @param {string} id    data-id attribute of the respective group row in the DOM
 * @param {boolean} collapsed    if true the record should be collapsed, otherwise expanded
 * @return {void}
 */
Infragistics.RemoteDataSource.prototype.toggleGroupByRecord = function(id, collapsed) {};

/**
 * Check whether the specified gorupby record is collapsed
 * 
 * @param {!Object} gbRec    id of the grouped record OR grouped record
 * @return {boolean}
 */
Infragistics.RemoteDataSource.prototype.isGroupByRecordCollapsed = function(gbRec) {};

/**
 * Check whether grouping is applied for the specified sorting expressions.
 * 
 * @param {!Array<?>=} exprs    array of sorting expressions. If not set check expressions defined in sorting settings
 * @return {boolean}
 */
Infragistics.RemoteDataSource.prototype.isGroupByApplied = function(exprs) {};
 /** @type {?} */
IgniteUIStatic.prototype.RemoteDataSource;

/**
 * @constructor
 * @struct
 * @param {!DataSourceSettings} settings
 */
Infragistics.JSONDataSource = function(settings) {};

/**
 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
 * 
 * @param {!Object=} fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
 * @return {!Object}
 */
Infragistics.JSONDataSource.prototype.fields = function(fields) {};

/**
 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
 * @return {string}
 */
Infragistics.JSONDataSource.prototype.analyzeDataSource = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
 * @return {!Array<?>}
 */
Infragistics.JSONDataSource.prototype.dataView = function() {};

/**
 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
 * @return {!Object}
 */
Infragistics.JSONDataSource.prototype.data = function() {};

/**
 * Returns transformed data according to transformed execution:
 * 1. Before paging and filtering
 * 2. After filtering before paging
 * 3. After filtering and paging
 * 
 * @param {!Object} transformedExecution
 * @return {!Object}
 */
Infragistics.JSONDataSource.prototype.transformedData = function(transformedExecution) {};

/**
 * Returns summaries data
 * @return {!Object}
 */
Infragistics.JSONDataSource.prototype.dataSummaries = function() {};

/**
 * Gets/sets the schema definition.
 * 
 * @param {!Object=} s    a schema object
 * @param {string=} t    type of the data source. See settings.type
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.schema = function(s, t) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} p    object holding all paging settings. See settings.paging
 * @return {!Object}
 */
Infragistics.JSONDataSource.prototype.pagingSettings = function(p) {};

/**
 * Gets/sets a list of filtering settings
 * 
 * @param {!Object=} f    object holding all filtering settings. See settings.filtering
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.filterSettings = function(f) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} s    object holding all sorting settings. See settings.sorting
 * @return {!Object}
 */
Infragistics.JSONDataSource.prototype.sortSettings = function(s) {};

/**
 * Gets/sets a list of summaries settings.
 * 
 * @param {!Object=} s    object holding all summaries settings. See settings.summaries
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.summariesSettings = function(s) {};

/**
 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
 * 
 * @param {!Object=} ds
 * @return {!Object}
 */
Infragistics.JSONDataSource.prototype.dataSource = function(ds) {};

/**
 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
 * 
 * @param {!Object=} t
 * @return {string} json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
 */
Infragistics.JSONDataSource.prototype.type = function(t) {};

/**
 * Returns a record by a specified key (requires that primaryKey is set in the settings)
 * 
 * @param {string} key    Primary key of the record
 * @param {string=} ds    the data source in which to search for the record. When not set it will use the current data source.
 * @param {string=} objPath    Not used in $.ig.DataSource
 * @return {!Object}
 */
Infragistics.JSONDataSource.prototype.findRecordByKey = function(key, ds, objPath) {};

/**
 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
 * 
 * @param {!Object} key    primary key of the record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.removeRecordByKey = function(key, origDs) {};

/**
 * Removes a record from the data source at specific index.
 * 
 * @param {number} index    index of record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.removeRecordByIndex = function(index, origDs) {};

/**
 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
 * 
 * @param {!Object} rowId    the rowId - row key (string) or index (number)
 * @param {!Object} colId    the column id - column key (string) or index (number)
 * @param {!Object} val    The new value
 * @param {boolean} autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.JSONDataSource.prototype.setCellValue = function(rowId, colId, val, autoCommit) {};

/**
 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.JSONDataSource.prototype.updateRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.JSONDataSource.prototype.addRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {number} rowIndex    row index at which to insert the new row
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @param {!Object} parentRowId    Not used in $.ig.DataSource
 * @return {!Object}
 */
Infragistics.JSONDataSource.prototype.insertRow = function(rowId, rowObject, rowIndex, autoCommit, parentRowId) {};

/**
 * Deletes a row from the data source.
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.JSONDataSource.prototype.deleteRow = function(rowId, autoCommit) {};

/**
 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.addNode = function(data) {};

/**
 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.removeNode = function(data) {};

/**
 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
 * 
 * @param {!Object} t    a transaction object
 * @return {!Object}
 */
Infragistics.JSONDataSource.prototype.getDetachedRecord = function(t) {};

/**
 * Update the data source with every transaction from the log
 * 
 * @param {number=} id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.commit = function(id) {};

/**
 * Clears the transaction log without updating anything in the data source
 * 
 * @param {!Object=} id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.rollback = function(id) {};

/**
 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
 * @return {!Array<?>}
 */
Infragistics.JSONDataSource.prototype.pendingTransactions = function() {};

/**
 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
 * @return {!Array<?>}
 */
Infragistics.JSONDataSource.prototype.allTransactions = function() {};

/**
 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
 * @return {string}
 */
Infragistics.JSONDataSource.prototype.transactionsAsString = function() {};

/**
 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
 * 
 * @param {!Function} success    Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
 * @param {!Function} error    Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.saveChanges = function(success, error) {};

/**
 * Data binds to the current data source
 * databinding works using the following workflow:
 * 1. fire the databinding event
 * 2. based on the data source type (see analyzeDataSource()), do the following:
 * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
 * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
 * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
 * if no paging/sorting/filtering are enabled, use just this._data to save space
 * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
 * if the data source is invalid, throw an exception
 * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
 * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object tree
 * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
 * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
 * 6. fire the databound event
 * 
 * @param {string=} callback    callback function
 * @param {!Object=} callee    callee object on which the callback will be executed. If none is specified, will assume global execution context
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.dataBind = function(callback, callee) {};

/**
 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
 * 
 * @param {string} fieldName    the fieldName - name of the field
 * @param {!Object} record    the record from which to get it
 * @return {!Object}
 */
Infragistics.JSONDataSource.prototype.getCellValue = function(fieldName, record) {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets or sets summaries data.
 * If key or dsObj are not set then returns summaries data.
 * Takes summary data from passed argument dsObj(using argument key)
 * 
 * @param {string=} key    response key to take summary data(for example "Metadata.Summaries")
 * @param {!Object=} dsObj    data source object - usually contains information about data records and metadata(holds info about summaries)
 * @return {!Object}
 */
Infragistics.JSONDataSource.prototype.summariesResponse = function(key, dsObj) {};

/**
 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
 * @return {!Array<?>}
 */
Infragistics.JSONDataSource.prototype.filteredData = function() {};

/**
 * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView().
 * Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
 * multi-column sorting can be enabled by setting keepSortState to true.
 * fields => an array of fields object definitions:
 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
 * 
 * @param {!Object} fields    an array of fields object definitions
 * @param {string} direction    asc / desc direction
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.sort = function(fields, direction) {};

/**
 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.clearLocalSorting = function() {};

/**
 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and
 * setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
 * if expr is detected to be a regular expression, the "cond" part is skipped
 * 
 * @param {!Object} fieldExpressions    a list of field expression definitions
 * @param {!Object} boolLogic    boolean logic. Accepted values are AND and OR.
 * @param {boolean} keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
 * @param {!Object} fieldExpressionsOnStrings    a list of field expression definitions (or a string with the conditions separated by AND/OR operator, example: "ID = 1 OR ID = 2"), which when applied will threat the related field as if it's string and can only apply conditions valid for string types.
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.filter = function(fieldExpressions, boolLogic, keepFilterState, fieldExpressionsOnStrings) {};

/**
 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.clearLocalFilter = function() {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets / sets the total number of records in the data source.
 * If data binding is remote, and there's paging or filtering enabled,
 * the actual total number of records may not
 * match the number of records that exists on the client
 * 
 * @param {number=} count    the total number of records
 * @param {!Object=} key
 * @param {!Object=} dsObj
 * @param {!Object=} context
 * @return {number}
 */
Infragistics.JSONDataSource.prototype.totalRecordsCount = function(count, key, dsObj, context) {};

/**
 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
 * 
 * @param {boolean} hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.hasTotalRecordsCount = function(hasCount) {};

/**
 * Returns metadata object for the specified key
 * 
 * @param {string} key    Primary key of the record
 * @return {!Object}
 */
Infragistics.JSONDataSource.prototype.metadata = function(key) {};

/**
 * Returns the total number of records in the local data source
 * @return {number}
 */
Infragistics.JSONDataSource.prototype.totalLocalRecordsCount = function() {};

/**
 * Returns the total number of pages
 * @return {number}
 */
Infragistics.JSONDataSource.prototype.pageCount = function() {};

/**
 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
 * 
 * @param {number=} index    the page index. If none is specified, returns the current page index.
 * @return {number}
 */
Infragistics.JSONDataSource.prototype.pageIndex = function(index) {};

/**
 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
 * 
 * @param {number=} value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
 * @return {number}
 */
Infragistics.JSONDataSource.prototype.persistedPageIndex = function(value) {};

/**
 * Sets the page index to be equal to the previous page index and rebinds the data source
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.prevPage = function() {};

/**
 * Sets the page index to be equal to the next page index and rebinds the data source
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.nextPage = function() {};

/**
 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
 * 
 * @param {number=} s    the page size.
 * @return {number}
 */
Infragistics.JSONDataSource.prototype.pageSize = function(s) {};

/**
 * For internal use
 * 
 * @param {!Object} dirty
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.pageSizeDirty = function(dirty) {};

/**
 * Returns a list of records for the specified page. Implies that paging is enabled.
 * 
 * @param {number} p    the page index for which records will be returned
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.recordsForPage = function(p) {};

/**
 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
 * 
 * @param {!Element} tableDOM    TABLE dom element to transform
 * @return {!Object}
 */
Infragistics.JSONDataSource.prototype.tableToObject = function(tableDOM) {};

/**
 * Parses the string and returns an evaluated JSON object
 * 
 * @param {string} s    the JSON as string.
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.stringToJSONObject = function(s) {};

/**
 * Parses a string and returns a XML Document
 * 
 * @param {string} s    the XML represented as a string
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.stringToXmlObject = function(s) {};

/**
 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
 * @return {!Array<?>}
 */
Infragistics.JSONDataSource.prototype.groupByData = function() {};

/**
 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
 * @return {!Array<?>}
 */
Infragistics.JSONDataSource.prototype.visibleGroupByData = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
 * @return {!Array<?>}
 */
Infragistics.JSONDataSource.prototype.groupByDataView = function() {};

/**
 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
 * 
 * @param {string} id    data-id attribute of the respective group row in the DOM
 * @param {boolean} collapsed    if true the record should be collapsed, otherwise expanded
 * @return {void}
 */
Infragistics.JSONDataSource.prototype.toggleGroupByRecord = function(id, collapsed) {};

/**
 * Check whether the specified gorupby record is collapsed
 * 
 * @param {!Object} gbRec    id of the grouped record OR grouped record
 * @return {boolean}
 */
Infragistics.JSONDataSource.prototype.isGroupByRecordCollapsed = function(gbRec) {};

/**
 * Check whether grouping is applied for the specified sorting expressions.
 * 
 * @param {!Array<?>=} exprs    array of sorting expressions. If not set check expressions defined in sorting settings
 * @return {boolean}
 */
Infragistics.JSONDataSource.prototype.isGroupByApplied = function(exprs) {};
 /** @type {?} */
IgniteUIStatic.prototype.JSONDataSource;
/**
 * @record
 * @struct
 */
function RESTDataSourceSettingsRestSettingsCreate() {}
 /** @type {string} */
RESTDataSourceSettingsRestSettingsCreate.prototype.url;
 /** @type {string} */
RESTDataSourceSettingsRestSettingsCreate.prototype.template;
 /** @type {boolean} */
RESTDataSourceSettingsRestSettingsCreate.prototype.batch;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function RESTDataSourceSettingsRestSettingsUpdate() {}
 /** @type {string} */
RESTDataSourceSettingsRestSettingsUpdate.prototype.url;
 /** @type {string} */
RESTDataSourceSettingsRestSettingsUpdate.prototype.template;
 /** @type {boolean} */
RESTDataSourceSettingsRestSettingsUpdate.prototype.batch;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function RESTDataSourceSettingsRestSettingsRemove() {}
 /** @type {string} */
RESTDataSourceSettingsRestSettingsRemove.prototype.url;
 /** @type {string} */
RESTDataSourceSettingsRestSettingsRemove.prototype.template;
 /** @type {boolean} */
RESTDataSourceSettingsRestSettingsRemove.prototype.batch;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function RESTDataSourceSettingsRestSettings() {}
 /** @type {!RESTDataSourceSettingsRestSettingsCreate} */
RESTDataSourceSettingsRestSettings.prototype.create;
 /** @type {!RESTDataSourceSettingsRestSettingsUpdate} */
RESTDataSourceSettingsRestSettings.prototype.update;
 /** @type {!RESTDataSourceSettingsRestSettingsRemove} */
RESTDataSourceSettingsRestSettings.prototype.remove;
 /** @type {boolean} */
RESTDataSourceSettingsRestSettings.prototype.encodeRemoveInRequestUri;
 /** @type {!Function} */
RESTDataSourceSettingsRestSettings.prototype.contentSerializer;
 /** @type {string} */
RESTDataSourceSettingsRestSettings.prototype.contentType;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function RESTDataSourceSettings() {}
 /** @type {!RESTDataSourceSettingsRestSettings} */
RESTDataSourceSettings.prototype.restSettings;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!RESTDataSourceSettings} settings
 */
Infragistics.RESTDataSource = function(settings) {};

/**
 * Posts to the restSettings urls using $.ajax, by serializing the changes as url params.
 * 
 * @param {!Object} success
 * @param {!Object} error
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.saveChanges = function(success, error) {};

/**
 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
 * 
 * @param {!Object=} fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
 * @return {!Object}
 */
Infragistics.RESTDataSource.prototype.fields = function(fields) {};

/**
 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
 * @return {string}
 */
Infragistics.RESTDataSource.prototype.analyzeDataSource = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
 * @return {!Array<?>}
 */
Infragistics.RESTDataSource.prototype.dataView = function() {};

/**
 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
 * @return {!Object}
 */
Infragistics.RESTDataSource.prototype.data = function() {};

/**
 * Returns transformed data according to transformed execution:
 * 1. Before paging and filtering
 * 2. After filtering before paging
 * 3. After filtering and paging
 * 
 * @param {!Object} transformedExecution
 * @return {!Object}
 */
Infragistics.RESTDataSource.prototype.transformedData = function(transformedExecution) {};

/**
 * Returns summaries data
 * @return {!Object}
 */
Infragistics.RESTDataSource.prototype.dataSummaries = function() {};

/**
 * Gets/sets the schema definition.
 * 
 * @param {!Object=} s    a schema object
 * @param {string=} t    type of the data source. See settings.type
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.schema = function(s, t) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} p    object holding all paging settings. See settings.paging
 * @return {!Object}
 */
Infragistics.RESTDataSource.prototype.pagingSettings = function(p) {};

/**
 * Gets/sets a list of filtering settings
 * 
 * @param {!Object=} f    object holding all filtering settings. See settings.filtering
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.filterSettings = function(f) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} s    object holding all sorting settings. See settings.sorting
 * @return {!Object}
 */
Infragistics.RESTDataSource.prototype.sortSettings = function(s) {};

/**
 * Gets/sets a list of summaries settings.
 * 
 * @param {!Object=} s    object holding all summaries settings. See settings.summaries
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.summariesSettings = function(s) {};

/**
 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
 * 
 * @param {!Object=} ds
 * @return {!Object}
 */
Infragistics.RESTDataSource.prototype.dataSource = function(ds) {};

/**
 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
 * 
 * @param {!Object=} t
 * @return {string} json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
 */
Infragistics.RESTDataSource.prototype.type = function(t) {};

/**
 * Returns a record by a specified key (requires that primaryKey is set in the settings)
 * 
 * @param {string} key    Primary key of the record
 * @param {string=} ds    the data source in which to search for the record. When not set it will use the current data source.
 * @param {string=} objPath    Not used in $.ig.DataSource
 * @return {!Object}
 */
Infragistics.RESTDataSource.prototype.findRecordByKey = function(key, ds, objPath) {};

/**
 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
 * 
 * @param {!Object} key    primary key of the record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.removeRecordByKey = function(key, origDs) {};

/**
 * Removes a record from the data source at specific index.
 * 
 * @param {number} index    index of record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.removeRecordByIndex = function(index, origDs) {};

/**
 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
 * 
 * @param {!Object} rowId    the rowId - row key (string) or index (number)
 * @param {!Object} colId    the column id - column key (string) or index (number)
 * @param {!Object} val    The new value
 * @param {boolean} autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.RESTDataSource.prototype.setCellValue = function(rowId, colId, val, autoCommit) {};

/**
 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.RESTDataSource.prototype.updateRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.RESTDataSource.prototype.addRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {number} rowIndex    row index at which to insert the new row
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @param {!Object} parentRowId    Not used in $.ig.DataSource
 * @return {!Object}
 */
Infragistics.RESTDataSource.prototype.insertRow = function(rowId, rowObject, rowIndex, autoCommit, parentRowId) {};

/**
 * Deletes a row from the data source.
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.RESTDataSource.prototype.deleteRow = function(rowId, autoCommit) {};

/**
 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.addNode = function(data) {};

/**
 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.removeNode = function(data) {};

/**
 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
 * 
 * @param {!Object} t    a transaction object
 * @return {!Object}
 */
Infragistics.RESTDataSource.prototype.getDetachedRecord = function(t) {};

/**
 * Update the data source with every transaction from the log
 * 
 * @param {number=} id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.commit = function(id) {};

/**
 * Clears the transaction log without updating anything in the data source
 * 
 * @param {!Object=} id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.rollback = function(id) {};

/**
 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
 * @return {!Array<?>}
 */
Infragistics.RESTDataSource.prototype.pendingTransactions = function() {};

/**
 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
 * @return {!Array<?>}
 */
Infragistics.RESTDataSource.prototype.allTransactions = function() {};

/**
 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
 * @return {string}
 */
Infragistics.RESTDataSource.prototype.transactionsAsString = function() {};

/**
 * Data binds to the current data source
 * databinding works using the following workflow:
 * 1. fire the databinding event
 * 2. based on the data source type (see analyzeDataSource()), do the following:
 * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
 * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
 * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
 * if no paging/sorting/filtering are enabled, use just this._data to save space
 * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
 * if the data source is invalid, throw an exception
 * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
 * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object tree
 * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
 * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
 * 6. fire the databound event
 * 
 * @param {string=} callback    callback function
 * @param {!Object=} callee    callee object on which the callback will be executed. If none is specified, will assume global execution context
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.dataBind = function(callback, callee) {};

/**
 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
 * 
 * @param {string} fieldName    the fieldName - name of the field
 * @param {!Object} record    the record from which to get it
 * @return {!Object}
 */
Infragistics.RESTDataSource.prototype.getCellValue = function(fieldName, record) {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets or sets summaries data.
 * If key or dsObj are not set then returns summaries data.
 * Takes summary data from passed argument dsObj(using argument key)
 * 
 * @param {string=} key    response key to take summary data(for example "Metadata.Summaries")
 * @param {!Object=} dsObj    data source object - usually contains information about data records and metadata(holds info about summaries)
 * @return {!Object}
 */
Infragistics.RESTDataSource.prototype.summariesResponse = function(key, dsObj) {};

/**
 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
 * @return {!Array<?>}
 */
Infragistics.RESTDataSource.prototype.filteredData = function() {};

/**
 * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView().
 * Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
 * multi-column sorting can be enabled by setting keepSortState to true.
 * fields => an array of fields object definitions:
 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
 * 
 * @param {!Object} fields    an array of fields object definitions
 * @param {string} direction    asc / desc direction
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.sort = function(fields, direction) {};

/**
 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.clearLocalSorting = function() {};

/**
 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and
 * setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
 * if expr is detected to be a regular expression, the "cond" part is skipped
 * 
 * @param {!Object} fieldExpressions    a list of field expression definitions
 * @param {!Object} boolLogic    boolean logic. Accepted values are AND and OR.
 * @param {boolean} keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
 * @param {!Object} fieldExpressionsOnStrings    a list of field expression definitions (or a string with the conditions separated by AND/OR operator, example: "ID = 1 OR ID = 2"), which when applied will threat the related field as if it's string and can only apply conditions valid for string types.
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.filter = function(fieldExpressions, boolLogic, keepFilterState, fieldExpressionsOnStrings) {};

/**
 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.clearLocalFilter = function() {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets / sets the total number of records in the data source.
 * If data binding is remote, and there's paging or filtering enabled,
 * the actual total number of records may not
 * match the number of records that exists on the client
 * 
 * @param {number=} count    the total number of records
 * @param {!Object=} key
 * @param {!Object=} dsObj
 * @param {!Object=} context
 * @return {number}
 */
Infragistics.RESTDataSource.prototype.totalRecordsCount = function(count, key, dsObj, context) {};

/**
 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
 * 
 * @param {boolean} hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.hasTotalRecordsCount = function(hasCount) {};

/**
 * Returns metadata object for the specified key
 * 
 * @param {string} key    Primary key of the record
 * @return {!Object}
 */
Infragistics.RESTDataSource.prototype.metadata = function(key) {};

/**
 * Returns the total number of records in the local data source
 * @return {number}
 */
Infragistics.RESTDataSource.prototype.totalLocalRecordsCount = function() {};

/**
 * Returns the total number of pages
 * @return {number}
 */
Infragistics.RESTDataSource.prototype.pageCount = function() {};

/**
 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
 * 
 * @param {number=} index    the page index. If none is specified, returns the current page index.
 * @return {number}
 */
Infragistics.RESTDataSource.prototype.pageIndex = function(index) {};

/**
 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
 * 
 * @param {number=} value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
 * @return {number}
 */
Infragistics.RESTDataSource.prototype.persistedPageIndex = function(value) {};

/**
 * Sets the page index to be equal to the previous page index and rebinds the data source
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.prevPage = function() {};

/**
 * Sets the page index to be equal to the next page index and rebinds the data source
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.nextPage = function() {};

/**
 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
 * 
 * @param {number=} s    the page size.
 * @return {number}
 */
Infragistics.RESTDataSource.prototype.pageSize = function(s) {};

/**
 * For internal use
 * 
 * @param {!Object} dirty
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.pageSizeDirty = function(dirty) {};

/**
 * Returns a list of records for the specified page. Implies that paging is enabled.
 * 
 * @param {number} p    the page index for which records will be returned
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.recordsForPage = function(p) {};

/**
 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
 * 
 * @param {!Element} tableDOM    TABLE dom element to transform
 * @return {!Object}
 */
Infragistics.RESTDataSource.prototype.tableToObject = function(tableDOM) {};

/**
 * Parses the string and returns an evaluated JSON object
 * 
 * @param {string} s    the JSON as string.
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.stringToJSONObject = function(s) {};

/**
 * Parses a string and returns a XML Document
 * 
 * @param {string} s    the XML represented as a string
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.stringToXmlObject = function(s) {};

/**
 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
 * @return {!Array<?>}
 */
Infragistics.RESTDataSource.prototype.groupByData = function() {};

/**
 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
 * @return {!Array<?>}
 */
Infragistics.RESTDataSource.prototype.visibleGroupByData = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
 * @return {!Array<?>}
 */
Infragistics.RESTDataSource.prototype.groupByDataView = function() {};

/**
 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
 * 
 * @param {string} id    data-id attribute of the respective group row in the DOM
 * @param {boolean} collapsed    if true the record should be collapsed, otherwise expanded
 * @return {void}
 */
Infragistics.RESTDataSource.prototype.toggleGroupByRecord = function(id, collapsed) {};

/**
 * Check whether the specified gorupby record is collapsed
 * 
 * @param {!Object} gbRec    id of the grouped record OR grouped record
 * @return {boolean}
 */
Infragistics.RESTDataSource.prototype.isGroupByRecordCollapsed = function(gbRec) {};

/**
 * Check whether grouping is applied for the specified sorting expressions.
 * 
 * @param {!Array<?>=} exprs    array of sorting expressions. If not set check expressions defined in sorting settings
 * @return {boolean}
 */
Infragistics.RESTDataSource.prototype.isGroupByApplied = function(exprs) {};
 /** @type {?} */
IgniteUIStatic.prototype.RESTDataSource;
/**
 * @record
 * @struct
 */
function JSONPDataSourceSettings() {}
 /** @type {(string|boolean)} */
JSONPDataSourceSettings.prototype.jsonp;
 /** @type {(string|!Function)} */
JSONPDataSourceSettings.prototype.jsonpCallback;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!JSONPDataSourceSettings} settings
 */
Infragistics.JSONPDataSource = function(settings) {};

/**
 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
 * 
 * @param {!Object=} fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
 * @return {!Object}
 */
Infragistics.JSONPDataSource.prototype.fields = function(fields) {};

/**
 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
 * @return {string}
 */
Infragistics.JSONPDataSource.prototype.analyzeDataSource = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
 * @return {!Array<?>}
 */
Infragistics.JSONPDataSource.prototype.dataView = function() {};

/**
 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
 * @return {!Object}
 */
Infragistics.JSONPDataSource.prototype.data = function() {};

/**
 * Returns transformed data according to transformed execution:
 * 1. Before paging and filtering
 * 2. After filtering before paging
 * 3. After filtering and paging
 * 
 * @param {!Object} transformedExecution
 * @return {!Object}
 */
Infragistics.JSONPDataSource.prototype.transformedData = function(transformedExecution) {};

/**
 * Returns summaries data
 * @return {!Object}
 */
Infragistics.JSONPDataSource.prototype.dataSummaries = function() {};

/**
 * Gets/sets the schema definition.
 * 
 * @param {!Object=} s    a schema object
 * @param {string=} t    type of the data source. See settings.type
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.schema = function(s, t) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} p    object holding all paging settings. See settings.paging
 * @return {!Object}
 */
Infragistics.JSONPDataSource.prototype.pagingSettings = function(p) {};

/**
 * Gets/sets a list of filtering settings
 * 
 * @param {!Object=} f    object holding all filtering settings. See settings.filtering
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.filterSettings = function(f) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} s    object holding all sorting settings. See settings.sorting
 * @return {!Object}
 */
Infragistics.JSONPDataSource.prototype.sortSettings = function(s) {};

/**
 * Gets/sets a list of summaries settings.
 * 
 * @param {!Object=} s    object holding all summaries settings. See settings.summaries
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.summariesSettings = function(s) {};

/**
 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
 * 
 * @param {!Object=} ds
 * @return {!Object}
 */
Infragistics.JSONPDataSource.prototype.dataSource = function(ds) {};

/**
 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
 * 
 * @param {!Object=} t
 * @return {string} json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
 */
Infragistics.JSONPDataSource.prototype.type = function(t) {};

/**
 * Returns a record by a specified key (requires that primaryKey is set in the settings)
 * 
 * @param {string} key    Primary key of the record
 * @param {string=} ds    the data source in which to search for the record. When not set it will use the current data source.
 * @param {string=} objPath    Not used in $.ig.DataSource
 * @return {!Object}
 */
Infragistics.JSONPDataSource.prototype.findRecordByKey = function(key, ds, objPath) {};

/**
 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
 * 
 * @param {!Object} key    primary key of the record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.removeRecordByKey = function(key, origDs) {};

/**
 * Removes a record from the data source at specific index.
 * 
 * @param {number} index    index of record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.removeRecordByIndex = function(index, origDs) {};

/**
 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
 * 
 * @param {!Object} rowId    the rowId - row key (string) or index (number)
 * @param {!Object} colId    the column id - column key (string) or index (number)
 * @param {!Object} val    The new value
 * @param {boolean} autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.JSONPDataSource.prototype.setCellValue = function(rowId, colId, val, autoCommit) {};

/**
 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.JSONPDataSource.prototype.updateRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.JSONPDataSource.prototype.addRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {number} rowIndex    row index at which to insert the new row
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @param {!Object} parentRowId    Not used in $.ig.DataSource
 * @return {!Object}
 */
Infragistics.JSONPDataSource.prototype.insertRow = function(rowId, rowObject, rowIndex, autoCommit, parentRowId) {};

/**
 * Deletes a row from the data source.
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.JSONPDataSource.prototype.deleteRow = function(rowId, autoCommit) {};

/**
 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.addNode = function(data) {};

/**
 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.removeNode = function(data) {};

/**
 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
 * 
 * @param {!Object} t    a transaction object
 * @return {!Object}
 */
Infragistics.JSONPDataSource.prototype.getDetachedRecord = function(t) {};

/**
 * Update the data source with every transaction from the log
 * 
 * @param {number=} id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.commit = function(id) {};

/**
 * Clears the transaction log without updating anything in the data source
 * 
 * @param {!Object=} id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.rollback = function(id) {};

/**
 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
 * @return {!Array<?>}
 */
Infragistics.JSONPDataSource.prototype.pendingTransactions = function() {};

/**
 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
 * @return {!Array<?>}
 */
Infragistics.JSONPDataSource.prototype.allTransactions = function() {};

/**
 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
 * @return {string}
 */
Infragistics.JSONPDataSource.prototype.transactionsAsString = function() {};

/**
 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
 * 
 * @param {!Function} success    Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
 * @param {!Function} error    Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.saveChanges = function(success, error) {};

/**
 * Data binds to the current data source
 * databinding works using the following workflow:
 * 1. fire the databinding event
 * 2. based on the data source type (see analyzeDataSource()), do the following:
 * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
 * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
 * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
 * if no paging/sorting/filtering are enabled, use just this._data to save space
 * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
 * if the data source is invalid, throw an exception
 * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
 * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object tree
 * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
 * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
 * 6. fire the databound event
 * 
 * @param {string=} callback    callback function
 * @param {!Object=} callee    callee object on which the callback will be executed. If none is specified, will assume global execution context
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.dataBind = function(callback, callee) {};

/**
 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
 * 
 * @param {string} fieldName    the fieldName - name of the field
 * @param {!Object} record    the record from which to get it
 * @return {!Object}
 */
Infragistics.JSONPDataSource.prototype.getCellValue = function(fieldName, record) {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets or sets summaries data.
 * If key or dsObj are not set then returns summaries data.
 * Takes summary data from passed argument dsObj(using argument key)
 * 
 * @param {string=} key    response key to take summary data(for example "Metadata.Summaries")
 * @param {!Object=} dsObj    data source object - usually contains information about data records and metadata(holds info about summaries)
 * @return {!Object}
 */
Infragistics.JSONPDataSource.prototype.summariesResponse = function(key, dsObj) {};

/**
 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
 * @return {!Array<?>}
 */
Infragistics.JSONPDataSource.prototype.filteredData = function() {};

/**
 * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView().
 * Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
 * multi-column sorting can be enabled by setting keepSortState to true.
 * fields => an array of fields object definitions:
 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
 * 
 * @param {!Object} fields    an array of fields object definitions
 * @param {string} direction    asc / desc direction
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.sort = function(fields, direction) {};

/**
 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.clearLocalSorting = function() {};

/**
 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and
 * setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
 * if expr is detected to be a regular expression, the "cond" part is skipped
 * 
 * @param {!Object} fieldExpressions    a list of field expression definitions
 * @param {!Object} boolLogic    boolean logic. Accepted values are AND and OR.
 * @param {boolean} keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
 * @param {!Object} fieldExpressionsOnStrings    a list of field expression definitions (or a string with the conditions separated by AND/OR operator, example: "ID = 1 OR ID = 2"), which when applied will threat the related field as if it's string and can only apply conditions valid for string types.
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.filter = function(fieldExpressions, boolLogic, keepFilterState, fieldExpressionsOnStrings) {};

/**
 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.clearLocalFilter = function() {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets / sets the total number of records in the data source.
 * If data binding is remote, and there's paging or filtering enabled,
 * the actual total number of records may not
 * match the number of records that exists on the client
 * 
 * @param {number=} count    the total number of records
 * @param {!Object=} key
 * @param {!Object=} dsObj
 * @param {!Object=} context
 * @return {number}
 */
Infragistics.JSONPDataSource.prototype.totalRecordsCount = function(count, key, dsObj, context) {};

/**
 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
 * 
 * @param {boolean} hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.hasTotalRecordsCount = function(hasCount) {};

/**
 * Returns metadata object for the specified key
 * 
 * @param {string} key    Primary key of the record
 * @return {!Object}
 */
Infragistics.JSONPDataSource.prototype.metadata = function(key) {};

/**
 * Returns the total number of records in the local data source
 * @return {number}
 */
Infragistics.JSONPDataSource.prototype.totalLocalRecordsCount = function() {};

/**
 * Returns the total number of pages
 * @return {number}
 */
Infragistics.JSONPDataSource.prototype.pageCount = function() {};

/**
 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
 * 
 * @param {number=} index    the page index. If none is specified, returns the current page index.
 * @return {number}
 */
Infragistics.JSONPDataSource.prototype.pageIndex = function(index) {};

/**
 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
 * 
 * @param {number=} value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
 * @return {number}
 */
Infragistics.JSONPDataSource.prototype.persistedPageIndex = function(value) {};

/**
 * Sets the page index to be equal to the previous page index and rebinds the data source
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.prevPage = function() {};

/**
 * Sets the page index to be equal to the next page index and rebinds the data source
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.nextPage = function() {};

/**
 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
 * 
 * @param {number=} s    the page size.
 * @return {number}
 */
Infragistics.JSONPDataSource.prototype.pageSize = function(s) {};

/**
 * For internal use
 * 
 * @param {!Object} dirty
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.pageSizeDirty = function(dirty) {};

/**
 * Returns a list of records for the specified page. Implies that paging is enabled.
 * 
 * @param {number} p    the page index for which records will be returned
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.recordsForPage = function(p) {};

/**
 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
 * 
 * @param {!Element} tableDOM    TABLE dom element to transform
 * @return {!Object}
 */
Infragistics.JSONPDataSource.prototype.tableToObject = function(tableDOM) {};

/**
 * Parses the string and returns an evaluated JSON object
 * 
 * @param {string} s    the JSON as string.
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.stringToJSONObject = function(s) {};

/**
 * Parses a string and returns a XML Document
 * 
 * @param {string} s    the XML represented as a string
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.stringToXmlObject = function(s) {};

/**
 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
 * @return {!Array<?>}
 */
Infragistics.JSONPDataSource.prototype.groupByData = function() {};

/**
 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
 * @return {!Array<?>}
 */
Infragistics.JSONPDataSource.prototype.visibleGroupByData = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
 * @return {!Array<?>}
 */
Infragistics.JSONPDataSource.prototype.groupByDataView = function() {};

/**
 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
 * 
 * @param {string} id    data-id attribute of the respective group row in the DOM
 * @param {boolean} collapsed    if true the record should be collapsed, otherwise expanded
 * @return {void}
 */
Infragistics.JSONPDataSource.prototype.toggleGroupByRecord = function(id, collapsed) {};

/**
 * Check whether the specified gorupby record is collapsed
 * 
 * @param {!Object} gbRec    id of the grouped record OR grouped record
 * @return {boolean}
 */
Infragistics.JSONPDataSource.prototype.isGroupByRecordCollapsed = function(gbRec) {};

/**
 * Check whether grouping is applied for the specified sorting expressions.
 * 
 * @param {!Array<?>=} exprs    array of sorting expressions. If not set check expressions defined in sorting settings
 * @return {boolean}
 */
Infragistics.JSONPDataSource.prototype.isGroupByApplied = function(exprs) {};
 /** @type {?} */
IgniteUIStatic.prototype.JSONPDataSource;

/**
 * @constructor
 * @struct
 * @param {!DataSourceSettings} settings
 */
Infragistics.XmlDataSource = function(settings) {};

/**
 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
 * 
 * @param {!Object=} fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
 * @return {!Object}
 */
Infragistics.XmlDataSource.prototype.fields = function(fields) {};

/**
 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
 * @return {string}
 */
Infragistics.XmlDataSource.prototype.analyzeDataSource = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
 * @return {!Array<?>}
 */
Infragistics.XmlDataSource.prototype.dataView = function() {};

/**
 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
 * @return {!Object}
 */
Infragistics.XmlDataSource.prototype.data = function() {};

/**
 * Returns transformed data according to transformed execution:
 * 1. Before paging and filtering
 * 2. After filtering before paging
 * 3. After filtering and paging
 * 
 * @param {!Object} transformedExecution
 * @return {!Object}
 */
Infragistics.XmlDataSource.prototype.transformedData = function(transformedExecution) {};

/**
 * Returns summaries data
 * @return {!Object}
 */
Infragistics.XmlDataSource.prototype.dataSummaries = function() {};

/**
 * Gets/sets the schema definition.
 * 
 * @param {!Object=} s    a schema object
 * @param {string=} t    type of the data source. See settings.type
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.schema = function(s, t) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} p    object holding all paging settings. See settings.paging
 * @return {!Object}
 */
Infragistics.XmlDataSource.prototype.pagingSettings = function(p) {};

/**
 * Gets/sets a list of filtering settings
 * 
 * @param {!Object=} f    object holding all filtering settings. See settings.filtering
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.filterSettings = function(f) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} s    object holding all sorting settings. See settings.sorting
 * @return {!Object}
 */
Infragistics.XmlDataSource.prototype.sortSettings = function(s) {};

/**
 * Gets/sets a list of summaries settings.
 * 
 * @param {!Object=} s    object holding all summaries settings. See settings.summaries
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.summariesSettings = function(s) {};

/**
 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
 * 
 * @param {!Object=} ds
 * @return {!Object}
 */
Infragistics.XmlDataSource.prototype.dataSource = function(ds) {};

/**
 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
 * 
 * @param {!Object=} t
 * @return {string} json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
 */
Infragistics.XmlDataSource.prototype.type = function(t) {};

/**
 * Returns a record by a specified key (requires that primaryKey is set in the settings)
 * 
 * @param {string} key    Primary key of the record
 * @param {string=} ds    the data source in which to search for the record. When not set it will use the current data source.
 * @param {string=} objPath    Not used in $.ig.DataSource
 * @return {!Object}
 */
Infragistics.XmlDataSource.prototype.findRecordByKey = function(key, ds, objPath) {};

/**
 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
 * 
 * @param {!Object} key    primary key of the record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.removeRecordByKey = function(key, origDs) {};

/**
 * Removes a record from the data source at specific index.
 * 
 * @param {number} index    index of record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.removeRecordByIndex = function(index, origDs) {};

/**
 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
 * 
 * @param {!Object} rowId    the rowId - row key (string) or index (number)
 * @param {!Object} colId    the column id - column key (string) or index (number)
 * @param {!Object} val    The new value
 * @param {boolean} autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.XmlDataSource.prototype.setCellValue = function(rowId, colId, val, autoCommit) {};

/**
 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.XmlDataSource.prototype.updateRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.XmlDataSource.prototype.addRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {number} rowIndex    row index at which to insert the new row
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @param {!Object} parentRowId    Not used in $.ig.DataSource
 * @return {!Object}
 */
Infragistics.XmlDataSource.prototype.insertRow = function(rowId, rowObject, rowIndex, autoCommit, parentRowId) {};

/**
 * Deletes a row from the data source.
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.XmlDataSource.prototype.deleteRow = function(rowId, autoCommit) {};

/**
 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.addNode = function(data) {};

/**
 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.removeNode = function(data) {};

/**
 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
 * 
 * @param {!Object} t    a transaction object
 * @return {!Object}
 */
Infragistics.XmlDataSource.prototype.getDetachedRecord = function(t) {};

/**
 * Update the data source with every transaction from the log
 * 
 * @param {number=} id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.commit = function(id) {};

/**
 * Clears the transaction log without updating anything in the data source
 * 
 * @param {!Object=} id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.rollback = function(id) {};

/**
 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
 * @return {!Array<?>}
 */
Infragistics.XmlDataSource.prototype.pendingTransactions = function() {};

/**
 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
 * @return {!Array<?>}
 */
Infragistics.XmlDataSource.prototype.allTransactions = function() {};

/**
 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
 * @return {string}
 */
Infragistics.XmlDataSource.prototype.transactionsAsString = function() {};

/**
 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
 * 
 * @param {!Function} success    Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
 * @param {!Function} error    Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.saveChanges = function(success, error) {};

/**
 * Data binds to the current data source
 * databinding works using the following workflow:
 * 1. fire the databinding event
 * 2. based on the data source type (see analyzeDataSource()), do the following:
 * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
 * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
 * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
 * if no paging/sorting/filtering are enabled, use just this._data to save space
 * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
 * if the data source is invalid, throw an exception
 * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
 * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object tree
 * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
 * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
 * 6. fire the databound event
 * 
 * @param {string=} callback    callback function
 * @param {!Object=} callee    callee object on which the callback will be executed. If none is specified, will assume global execution context
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.dataBind = function(callback, callee) {};

/**
 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
 * 
 * @param {string} fieldName    the fieldName - name of the field
 * @param {!Object} record    the record from which to get it
 * @return {!Object}
 */
Infragistics.XmlDataSource.prototype.getCellValue = function(fieldName, record) {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets or sets summaries data.
 * If key or dsObj are not set then returns summaries data.
 * Takes summary data from passed argument dsObj(using argument key)
 * 
 * @param {string=} key    response key to take summary data(for example "Metadata.Summaries")
 * @param {!Object=} dsObj    data source object - usually contains information about data records and metadata(holds info about summaries)
 * @return {!Object}
 */
Infragistics.XmlDataSource.prototype.summariesResponse = function(key, dsObj) {};

/**
 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
 * @return {!Array<?>}
 */
Infragistics.XmlDataSource.prototype.filteredData = function() {};

/**
 * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView().
 * Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
 * multi-column sorting can be enabled by setting keepSortState to true.
 * fields => an array of fields object definitions:
 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
 * 
 * @param {!Object} fields    an array of fields object definitions
 * @param {string} direction    asc / desc direction
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.sort = function(fields, direction) {};

/**
 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.clearLocalSorting = function() {};

/**
 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and
 * setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
 * if expr is detected to be a regular expression, the "cond" part is skipped
 * 
 * @param {!Object} fieldExpressions    a list of field expression definitions
 * @param {!Object} boolLogic    boolean logic. Accepted values are AND and OR.
 * @param {boolean} keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
 * @param {!Object} fieldExpressionsOnStrings    a list of field expression definitions (or a string with the conditions separated by AND/OR operator, example: "ID = 1 OR ID = 2"), which when applied will threat the related field as if it's string and can only apply conditions valid for string types.
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.filter = function(fieldExpressions, boolLogic, keepFilterState, fieldExpressionsOnStrings) {};

/**
 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.clearLocalFilter = function() {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets / sets the total number of records in the data source.
 * If data binding is remote, and there's paging or filtering enabled,
 * the actual total number of records may not
 * match the number of records that exists on the client
 * 
 * @param {number=} count    the total number of records
 * @param {!Object=} key
 * @param {!Object=} dsObj
 * @param {!Object=} context
 * @return {number}
 */
Infragistics.XmlDataSource.prototype.totalRecordsCount = function(count, key, dsObj, context) {};

/**
 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
 * 
 * @param {boolean} hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.hasTotalRecordsCount = function(hasCount) {};

/**
 * Returns metadata object for the specified key
 * 
 * @param {string} key    Primary key of the record
 * @return {!Object}
 */
Infragistics.XmlDataSource.prototype.metadata = function(key) {};

/**
 * Returns the total number of records in the local data source
 * @return {number}
 */
Infragistics.XmlDataSource.prototype.totalLocalRecordsCount = function() {};

/**
 * Returns the total number of pages
 * @return {number}
 */
Infragistics.XmlDataSource.prototype.pageCount = function() {};

/**
 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
 * 
 * @param {number=} index    the page index. If none is specified, returns the current page index.
 * @return {number}
 */
Infragistics.XmlDataSource.prototype.pageIndex = function(index) {};

/**
 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
 * 
 * @param {number=} value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
 * @return {number}
 */
Infragistics.XmlDataSource.prototype.persistedPageIndex = function(value) {};

/**
 * Sets the page index to be equal to the previous page index and rebinds the data source
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.prevPage = function() {};

/**
 * Sets the page index to be equal to the next page index and rebinds the data source
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.nextPage = function() {};

/**
 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
 * 
 * @param {number=} s    the page size.
 * @return {number}
 */
Infragistics.XmlDataSource.prototype.pageSize = function(s) {};

/**
 * For internal use
 * 
 * @param {!Object} dirty
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.pageSizeDirty = function(dirty) {};

/**
 * Returns a list of records for the specified page. Implies that paging is enabled.
 * 
 * @param {number} p    the page index for which records will be returned
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.recordsForPage = function(p) {};

/**
 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
 * 
 * @param {!Element} tableDOM    TABLE dom element to transform
 * @return {!Object}
 */
Infragistics.XmlDataSource.prototype.tableToObject = function(tableDOM) {};

/**
 * Parses the string and returns an evaluated JSON object
 * 
 * @param {string} s    the JSON as string.
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.stringToJSONObject = function(s) {};

/**
 * Parses a string and returns a XML Document
 * 
 * @param {string} s    the XML represented as a string
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.stringToXmlObject = function(s) {};

/**
 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
 * @return {!Array<?>}
 */
Infragistics.XmlDataSource.prototype.groupByData = function() {};

/**
 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
 * @return {!Array<?>}
 */
Infragistics.XmlDataSource.prototype.visibleGroupByData = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
 * @return {!Array<?>}
 */
Infragistics.XmlDataSource.prototype.groupByDataView = function() {};

/**
 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
 * 
 * @param {string} id    data-id attribute of the respective group row in the DOM
 * @param {boolean} collapsed    if true the record should be collapsed, otherwise expanded
 * @return {void}
 */
Infragistics.XmlDataSource.prototype.toggleGroupByRecord = function(id, collapsed) {};

/**
 * Check whether the specified gorupby record is collapsed
 * 
 * @param {!Object} gbRec    id of the grouped record OR grouped record
 * @return {boolean}
 */
Infragistics.XmlDataSource.prototype.isGroupByRecordCollapsed = function(gbRec) {};

/**
 * Check whether grouping is applied for the specified sorting expressions.
 * 
 * @param {!Array<?>=} exprs    array of sorting expressions. If not set check expressions defined in sorting settings
 * @return {boolean}
 */
Infragistics.XmlDataSource.prototype.isGroupByApplied = function(exprs) {};
 /** @type {?} */
IgniteUIStatic.prototype.XmlDataSource;

/**
 * @constructor
 * @struct
 * @param {!DataSourceSettings} settings
 */
Infragistics.FunctionDataSource = function(settings) {};

/**
 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
 * 
 * @param {!Object=} fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
 * @return {!Object}
 */
Infragistics.FunctionDataSource.prototype.fields = function(fields) {};

/**
 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
 * @return {string}
 */
Infragistics.FunctionDataSource.prototype.analyzeDataSource = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
 * @return {!Array<?>}
 */
Infragistics.FunctionDataSource.prototype.dataView = function() {};

/**
 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
 * @return {!Object}
 */
Infragistics.FunctionDataSource.prototype.data = function() {};

/**
 * Returns transformed data according to transformed execution:
 * 1. Before paging and filtering
 * 2. After filtering before paging
 * 3. After filtering and paging
 * 
 * @param {!Object} transformedExecution
 * @return {!Object}
 */
Infragistics.FunctionDataSource.prototype.transformedData = function(transformedExecution) {};

/**
 * Returns summaries data
 * @return {!Object}
 */
Infragistics.FunctionDataSource.prototype.dataSummaries = function() {};

/**
 * Gets/sets the schema definition.
 * 
 * @param {!Object=} s    a schema object
 * @param {string=} t    type of the data source. See settings.type
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.schema = function(s, t) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} p    object holding all paging settings. See settings.paging
 * @return {!Object}
 */
Infragistics.FunctionDataSource.prototype.pagingSettings = function(p) {};

/**
 * Gets/sets a list of filtering settings
 * 
 * @param {!Object=} f    object holding all filtering settings. See settings.filtering
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.filterSettings = function(f) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} s    object holding all sorting settings. See settings.sorting
 * @return {!Object}
 */
Infragistics.FunctionDataSource.prototype.sortSettings = function(s) {};

/**
 * Gets/sets a list of summaries settings.
 * 
 * @param {!Object=} s    object holding all summaries settings. See settings.summaries
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.summariesSettings = function(s) {};

/**
 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
 * 
 * @param {!Object=} ds
 * @return {!Object}
 */
Infragistics.FunctionDataSource.prototype.dataSource = function(ds) {};

/**
 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
 * 
 * @param {!Object=} t
 * @return {string} json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
 */
Infragistics.FunctionDataSource.prototype.type = function(t) {};

/**
 * Returns a record by a specified key (requires that primaryKey is set in the settings)
 * 
 * @param {string} key    Primary key of the record
 * @param {string=} ds    the data source in which to search for the record. When not set it will use the current data source.
 * @param {string=} objPath    Not used in $.ig.DataSource
 * @return {!Object}
 */
Infragistics.FunctionDataSource.prototype.findRecordByKey = function(key, ds, objPath) {};

/**
 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
 * 
 * @param {!Object} key    primary key of the record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.removeRecordByKey = function(key, origDs) {};

/**
 * Removes a record from the data source at specific index.
 * 
 * @param {number} index    index of record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.removeRecordByIndex = function(index, origDs) {};

/**
 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
 * 
 * @param {!Object} rowId    the rowId - row key (string) or index (number)
 * @param {!Object} colId    the column id - column key (string) or index (number)
 * @param {!Object} val    The new value
 * @param {boolean} autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.FunctionDataSource.prototype.setCellValue = function(rowId, colId, val, autoCommit) {};

/**
 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.FunctionDataSource.prototype.updateRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.FunctionDataSource.prototype.addRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {number} rowIndex    row index at which to insert the new row
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @param {!Object} parentRowId    Not used in $.ig.DataSource
 * @return {!Object}
 */
Infragistics.FunctionDataSource.prototype.insertRow = function(rowId, rowObject, rowIndex, autoCommit, parentRowId) {};

/**
 * Deletes a row from the data source.
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.FunctionDataSource.prototype.deleteRow = function(rowId, autoCommit) {};

/**
 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.addNode = function(data) {};

/**
 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.removeNode = function(data) {};

/**
 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
 * 
 * @param {!Object} t    a transaction object
 * @return {!Object}
 */
Infragistics.FunctionDataSource.prototype.getDetachedRecord = function(t) {};

/**
 * Update the data source with every transaction from the log
 * 
 * @param {number=} id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.commit = function(id) {};

/**
 * Clears the transaction log without updating anything in the data source
 * 
 * @param {!Object=} id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.rollback = function(id) {};

/**
 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
 * @return {!Array<?>}
 */
Infragistics.FunctionDataSource.prototype.pendingTransactions = function() {};

/**
 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
 * @return {!Array<?>}
 */
Infragistics.FunctionDataSource.prototype.allTransactions = function() {};

/**
 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
 * @return {string}
 */
Infragistics.FunctionDataSource.prototype.transactionsAsString = function() {};

/**
 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
 * 
 * @param {!Function} success    Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
 * @param {!Function} error    Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.saveChanges = function(success, error) {};

/**
 * Data binds to the current data source
 * databinding works using the following workflow:
 * 1. fire the databinding event
 * 2. based on the data source type (see analyzeDataSource()), do the following:
 * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
 * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
 * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
 * if no paging/sorting/filtering are enabled, use just this._data to save space
 * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
 * if the data source is invalid, throw an exception
 * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
 * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object tree
 * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
 * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
 * 6. fire the databound event
 * 
 * @param {string=} callback    callback function
 * @param {!Object=} callee    callee object on which the callback will be executed. If none is specified, will assume global execution context
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.dataBind = function(callback, callee) {};

/**
 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
 * 
 * @param {string} fieldName    the fieldName - name of the field
 * @param {!Object} record    the record from which to get it
 * @return {!Object}
 */
Infragistics.FunctionDataSource.prototype.getCellValue = function(fieldName, record) {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets or sets summaries data.
 * If key or dsObj are not set then returns summaries data.
 * Takes summary data from passed argument dsObj(using argument key)
 * 
 * @param {string=} key    response key to take summary data(for example "Metadata.Summaries")
 * @param {!Object=} dsObj    data source object - usually contains information about data records and metadata(holds info about summaries)
 * @return {!Object}
 */
Infragistics.FunctionDataSource.prototype.summariesResponse = function(key, dsObj) {};

/**
 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
 * @return {!Array<?>}
 */
Infragistics.FunctionDataSource.prototype.filteredData = function() {};

/**
 * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView().
 * Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
 * multi-column sorting can be enabled by setting keepSortState to true.
 * fields => an array of fields object definitions:
 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
 * 
 * @param {!Object} fields    an array of fields object definitions
 * @param {string} direction    asc / desc direction
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.sort = function(fields, direction) {};

/**
 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.clearLocalSorting = function() {};

/**
 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and
 * setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
 * if expr is detected to be a regular expression, the "cond" part is skipped
 * 
 * @param {!Object} fieldExpressions    a list of field expression definitions
 * @param {!Object} boolLogic    boolean logic. Accepted values are AND and OR.
 * @param {boolean} keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
 * @param {!Object} fieldExpressionsOnStrings    a list of field expression definitions (or a string with the conditions separated by AND/OR operator, example: "ID = 1 OR ID = 2"), which when applied will threat the related field as if it's string and can only apply conditions valid for string types.
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.filter = function(fieldExpressions, boolLogic, keepFilterState, fieldExpressionsOnStrings) {};

/**
 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.clearLocalFilter = function() {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets / sets the total number of records in the data source.
 * If data binding is remote, and there's paging or filtering enabled,
 * the actual total number of records may not
 * match the number of records that exists on the client
 * 
 * @param {number=} count    the total number of records
 * @param {!Object=} key
 * @param {!Object=} dsObj
 * @param {!Object=} context
 * @return {number}
 */
Infragistics.FunctionDataSource.prototype.totalRecordsCount = function(count, key, dsObj, context) {};

/**
 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
 * 
 * @param {boolean} hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.hasTotalRecordsCount = function(hasCount) {};

/**
 * Returns metadata object for the specified key
 * 
 * @param {string} key    Primary key of the record
 * @return {!Object}
 */
Infragistics.FunctionDataSource.prototype.metadata = function(key) {};

/**
 * Returns the total number of records in the local data source
 * @return {number}
 */
Infragistics.FunctionDataSource.prototype.totalLocalRecordsCount = function() {};

/**
 * Returns the total number of pages
 * @return {number}
 */
Infragistics.FunctionDataSource.prototype.pageCount = function() {};

/**
 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
 * 
 * @param {number=} index    the page index. If none is specified, returns the current page index.
 * @return {number}
 */
Infragistics.FunctionDataSource.prototype.pageIndex = function(index) {};

/**
 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
 * 
 * @param {number=} value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
 * @return {number}
 */
Infragistics.FunctionDataSource.prototype.persistedPageIndex = function(value) {};

/**
 * Sets the page index to be equal to the previous page index and rebinds the data source
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.prevPage = function() {};

/**
 * Sets the page index to be equal to the next page index and rebinds the data source
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.nextPage = function() {};

/**
 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
 * 
 * @param {number=} s    the page size.
 * @return {number}
 */
Infragistics.FunctionDataSource.prototype.pageSize = function(s) {};

/**
 * For internal use
 * 
 * @param {!Object} dirty
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.pageSizeDirty = function(dirty) {};

/**
 * Returns a list of records for the specified page. Implies that paging is enabled.
 * 
 * @param {number} p    the page index for which records will be returned
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.recordsForPage = function(p) {};

/**
 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
 * 
 * @param {!Element} tableDOM    TABLE dom element to transform
 * @return {!Object}
 */
Infragistics.FunctionDataSource.prototype.tableToObject = function(tableDOM) {};

/**
 * Parses the string and returns an evaluated JSON object
 * 
 * @param {string} s    the JSON as string.
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.stringToJSONObject = function(s) {};

/**
 * Parses a string and returns a XML Document
 * 
 * @param {string} s    the XML represented as a string
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.stringToXmlObject = function(s) {};

/**
 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
 * @return {!Array<?>}
 */
Infragistics.FunctionDataSource.prototype.groupByData = function() {};

/**
 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
 * @return {!Array<?>}
 */
Infragistics.FunctionDataSource.prototype.visibleGroupByData = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
 * @return {!Array<?>}
 */
Infragistics.FunctionDataSource.prototype.groupByDataView = function() {};

/**
 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
 * 
 * @param {string} id    data-id attribute of the respective group row in the DOM
 * @param {boolean} collapsed    if true the record should be collapsed, otherwise expanded
 * @return {void}
 */
Infragistics.FunctionDataSource.prototype.toggleGroupByRecord = function(id, collapsed) {};

/**
 * Check whether the specified gorupby record is collapsed
 * 
 * @param {!Object} gbRec    id of the grouped record OR grouped record
 * @return {boolean}
 */
Infragistics.FunctionDataSource.prototype.isGroupByRecordCollapsed = function(gbRec) {};

/**
 * Check whether grouping is applied for the specified sorting expressions.
 * 
 * @param {!Array<?>=} exprs    array of sorting expressions. If not set check expressions defined in sorting settings
 * @return {boolean}
 */
Infragistics.FunctionDataSource.prototype.isGroupByApplied = function(exprs) {};
 /** @type {?} */
IgniteUIStatic.prototype.FunctionDataSource;

/**
 * @constructor
 * @struct
 * @param {!DataSourceSettings} settings
 */
Infragistics.HtmlTableDataSource = function(settings) {};

/**
 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
 * 
 * @param {!Object=} fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
 * @return {!Object}
 */
Infragistics.HtmlTableDataSource.prototype.fields = function(fields) {};

/**
 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
 * @return {string}
 */
Infragistics.HtmlTableDataSource.prototype.analyzeDataSource = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
 * @return {!Array<?>}
 */
Infragistics.HtmlTableDataSource.prototype.dataView = function() {};

/**
 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
 * @return {!Object}
 */
Infragistics.HtmlTableDataSource.prototype.data = function() {};

/**
 * Returns transformed data according to transformed execution:
 * 1. Before paging and filtering
 * 2. After filtering before paging
 * 3. After filtering and paging
 * 
 * @param {!Object} transformedExecution
 * @return {!Object}
 */
Infragistics.HtmlTableDataSource.prototype.transformedData = function(transformedExecution) {};

/**
 * Returns summaries data
 * @return {!Object}
 */
Infragistics.HtmlTableDataSource.prototype.dataSummaries = function() {};

/**
 * Gets/sets the schema definition.
 * 
 * @param {!Object=} s    a schema object
 * @param {string=} t    type of the data source. See settings.type
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.schema = function(s, t) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} p    object holding all paging settings. See settings.paging
 * @return {!Object}
 */
Infragistics.HtmlTableDataSource.prototype.pagingSettings = function(p) {};

/**
 * Gets/sets a list of filtering settings
 * 
 * @param {!Object=} f    object holding all filtering settings. See settings.filtering
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.filterSettings = function(f) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} s    object holding all sorting settings. See settings.sorting
 * @return {!Object}
 */
Infragistics.HtmlTableDataSource.prototype.sortSettings = function(s) {};

/**
 * Gets/sets a list of summaries settings.
 * 
 * @param {!Object=} s    object holding all summaries settings. See settings.summaries
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.summariesSettings = function(s) {};

/**
 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
 * 
 * @param {!Object=} ds
 * @return {!Object}
 */
Infragistics.HtmlTableDataSource.prototype.dataSource = function(ds) {};

/**
 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
 * 
 * @param {!Object=} t
 * @return {string} json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
 */
Infragistics.HtmlTableDataSource.prototype.type = function(t) {};

/**
 * Returns a record by a specified key (requires that primaryKey is set in the settings)
 * 
 * @param {string} key    Primary key of the record
 * @param {string=} ds    the data source in which to search for the record. When not set it will use the current data source.
 * @param {string=} objPath    Not used in $.ig.DataSource
 * @return {!Object}
 */
Infragistics.HtmlTableDataSource.prototype.findRecordByKey = function(key, ds, objPath) {};

/**
 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
 * 
 * @param {!Object} key    primary key of the record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.removeRecordByKey = function(key, origDs) {};

/**
 * Removes a record from the data source at specific index.
 * 
 * @param {number} index    index of record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.removeRecordByIndex = function(index, origDs) {};

/**
 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
 * 
 * @param {!Object} rowId    the rowId - row key (string) or index (number)
 * @param {!Object} colId    the column id - column key (string) or index (number)
 * @param {!Object} val    The new value
 * @param {boolean} autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.HtmlTableDataSource.prototype.setCellValue = function(rowId, colId, val, autoCommit) {};

/**
 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.HtmlTableDataSource.prototype.updateRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.HtmlTableDataSource.prototype.addRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {number} rowIndex    row index at which to insert the new row
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @param {!Object} parentRowId    Not used in $.ig.DataSource
 * @return {!Object}
 */
Infragistics.HtmlTableDataSource.prototype.insertRow = function(rowId, rowObject, rowIndex, autoCommit, parentRowId) {};

/**
 * Deletes a row from the data source.
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.HtmlTableDataSource.prototype.deleteRow = function(rowId, autoCommit) {};

/**
 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.addNode = function(data) {};

/**
 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.removeNode = function(data) {};

/**
 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
 * 
 * @param {!Object} t    a transaction object
 * @return {!Object}
 */
Infragistics.HtmlTableDataSource.prototype.getDetachedRecord = function(t) {};

/**
 * Update the data source with every transaction from the log
 * 
 * @param {number=} id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.commit = function(id) {};

/**
 * Clears the transaction log without updating anything in the data source
 * 
 * @param {!Object=} id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.rollback = function(id) {};

/**
 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
 * @return {!Array<?>}
 */
Infragistics.HtmlTableDataSource.prototype.pendingTransactions = function() {};

/**
 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
 * @return {!Array<?>}
 */
Infragistics.HtmlTableDataSource.prototype.allTransactions = function() {};

/**
 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
 * @return {string}
 */
Infragistics.HtmlTableDataSource.prototype.transactionsAsString = function() {};

/**
 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
 * 
 * @param {!Function} success    Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
 * @param {!Function} error    Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.saveChanges = function(success, error) {};

/**
 * Data binds to the current data source
 * databinding works using the following workflow:
 * 1. fire the databinding event
 * 2. based on the data source type (see analyzeDataSource()), do the following:
 * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
 * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
 * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
 * if no paging/sorting/filtering are enabled, use just this._data to save space
 * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
 * if the data source is invalid, throw an exception
 * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
 * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object tree
 * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
 * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
 * 6. fire the databound event
 * 
 * @param {string=} callback    callback function
 * @param {!Object=} callee    callee object on which the callback will be executed. If none is specified, will assume global execution context
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.dataBind = function(callback, callee) {};

/**
 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
 * 
 * @param {string} fieldName    the fieldName - name of the field
 * @param {!Object} record    the record from which to get it
 * @return {!Object}
 */
Infragistics.HtmlTableDataSource.prototype.getCellValue = function(fieldName, record) {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets or sets summaries data.
 * If key or dsObj are not set then returns summaries data.
 * Takes summary data from passed argument dsObj(using argument key)
 * 
 * @param {string=} key    response key to take summary data(for example "Metadata.Summaries")
 * @param {!Object=} dsObj    data source object - usually contains information about data records and metadata(holds info about summaries)
 * @return {!Object}
 */
Infragistics.HtmlTableDataSource.prototype.summariesResponse = function(key, dsObj) {};

/**
 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
 * @return {!Array<?>}
 */
Infragistics.HtmlTableDataSource.prototype.filteredData = function() {};

/**
 * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView().
 * Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
 * multi-column sorting can be enabled by setting keepSortState to true.
 * fields => an array of fields object definitions:
 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
 * 
 * @param {!Object} fields    an array of fields object definitions
 * @param {string} direction    asc / desc direction
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.sort = function(fields, direction) {};

/**
 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.clearLocalSorting = function() {};

/**
 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and
 * setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
 * if expr is detected to be a regular expression, the "cond" part is skipped
 * 
 * @param {!Object} fieldExpressions    a list of field expression definitions
 * @param {!Object} boolLogic    boolean logic. Accepted values are AND and OR.
 * @param {boolean} keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
 * @param {!Object} fieldExpressionsOnStrings    a list of field expression definitions (or a string with the conditions separated by AND/OR operator, example: "ID = 1 OR ID = 2"), which when applied will threat the related field as if it's string and can only apply conditions valid for string types.
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.filter = function(fieldExpressions, boolLogic, keepFilterState, fieldExpressionsOnStrings) {};

/**
 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.clearLocalFilter = function() {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets / sets the total number of records in the data source.
 * If data binding is remote, and there's paging or filtering enabled,
 * the actual total number of records may not
 * match the number of records that exists on the client
 * 
 * @param {number=} count    the total number of records
 * @param {!Object=} key
 * @param {!Object=} dsObj
 * @param {!Object=} context
 * @return {number}
 */
Infragistics.HtmlTableDataSource.prototype.totalRecordsCount = function(count, key, dsObj, context) {};

/**
 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
 * 
 * @param {boolean} hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.hasTotalRecordsCount = function(hasCount) {};

/**
 * Returns metadata object for the specified key
 * 
 * @param {string} key    Primary key of the record
 * @return {!Object}
 */
Infragistics.HtmlTableDataSource.prototype.metadata = function(key) {};

/**
 * Returns the total number of records in the local data source
 * @return {number}
 */
Infragistics.HtmlTableDataSource.prototype.totalLocalRecordsCount = function() {};

/**
 * Returns the total number of pages
 * @return {number}
 */
Infragistics.HtmlTableDataSource.prototype.pageCount = function() {};

/**
 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
 * 
 * @param {number=} index    the page index. If none is specified, returns the current page index.
 * @return {number}
 */
Infragistics.HtmlTableDataSource.prototype.pageIndex = function(index) {};

/**
 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
 * 
 * @param {number=} value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
 * @return {number}
 */
Infragistics.HtmlTableDataSource.prototype.persistedPageIndex = function(value) {};

/**
 * Sets the page index to be equal to the previous page index and rebinds the data source
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.prevPage = function() {};

/**
 * Sets the page index to be equal to the next page index and rebinds the data source
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.nextPage = function() {};

/**
 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
 * 
 * @param {number=} s    the page size.
 * @return {number}
 */
Infragistics.HtmlTableDataSource.prototype.pageSize = function(s) {};

/**
 * For internal use
 * 
 * @param {!Object} dirty
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.pageSizeDirty = function(dirty) {};

/**
 * Returns a list of records for the specified page. Implies that paging is enabled.
 * 
 * @param {number} p    the page index for which records will be returned
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.recordsForPage = function(p) {};

/**
 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
 * 
 * @param {!Element} tableDOM    TABLE dom element to transform
 * @return {!Object}
 */
Infragistics.HtmlTableDataSource.prototype.tableToObject = function(tableDOM) {};

/**
 * Parses the string and returns an evaluated JSON object
 * 
 * @param {string} s    the JSON as string.
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.stringToJSONObject = function(s) {};

/**
 * Parses a string and returns a XML Document
 * 
 * @param {string} s    the XML represented as a string
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.stringToXmlObject = function(s) {};

/**
 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
 * @return {!Array<?>}
 */
Infragistics.HtmlTableDataSource.prototype.groupByData = function() {};

/**
 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
 * @return {!Array<?>}
 */
Infragistics.HtmlTableDataSource.prototype.visibleGroupByData = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
 * @return {!Array<?>}
 */
Infragistics.HtmlTableDataSource.prototype.groupByDataView = function() {};

/**
 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
 * 
 * @param {string} id    data-id attribute of the respective group row in the DOM
 * @param {boolean} collapsed    if true the record should be collapsed, otherwise expanded
 * @return {void}
 */
Infragistics.HtmlTableDataSource.prototype.toggleGroupByRecord = function(id, collapsed) {};

/**
 * Check whether the specified gorupby record is collapsed
 * 
 * @param {!Object} gbRec    id of the grouped record OR grouped record
 * @return {boolean}
 */
Infragistics.HtmlTableDataSource.prototype.isGroupByRecordCollapsed = function(gbRec) {};

/**
 * Check whether grouping is applied for the specified sorting expressions.
 * 
 * @param {!Array<?>=} exprs    array of sorting expressions. If not set check expressions defined in sorting settings
 * @return {boolean}
 */
Infragistics.HtmlTableDataSource.prototype.isGroupByApplied = function(exprs) {};
 /** @type {?} */
IgniteUIStatic.prototype.HtmlTableDataSource;

/**
 * @constructor
 * @struct
 * @param {!DataSourceSettings} settings
 */
Infragistics.ArrayDataSource = function(settings) {};

/**
 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
 * 
 * @param {!Object=} fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
 * @return {!Object}
 */
Infragistics.ArrayDataSource.prototype.fields = function(fields) {};

/**
 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
 * @return {string}
 */
Infragistics.ArrayDataSource.prototype.analyzeDataSource = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
 * @return {!Array<?>}
 */
Infragistics.ArrayDataSource.prototype.dataView = function() {};

/**
 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
 * @return {!Object}
 */
Infragistics.ArrayDataSource.prototype.data = function() {};

/**
 * Returns transformed data according to transformed execution:
 * 1. Before paging and filtering
 * 2. After filtering before paging
 * 3. After filtering and paging
 * 
 * @param {!Object} transformedExecution
 * @return {!Object}
 */
Infragistics.ArrayDataSource.prototype.transformedData = function(transformedExecution) {};

/**
 * Returns summaries data
 * @return {!Object}
 */
Infragistics.ArrayDataSource.prototype.dataSummaries = function() {};

/**
 * Gets/sets the schema definition.
 * 
 * @param {!Object=} s    a schema object
 * @param {string=} t    type of the data source. See settings.type
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.schema = function(s, t) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} p    object holding all paging settings. See settings.paging
 * @return {!Object}
 */
Infragistics.ArrayDataSource.prototype.pagingSettings = function(p) {};

/**
 * Gets/sets a list of filtering settings
 * 
 * @param {!Object=} f    object holding all filtering settings. See settings.filtering
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.filterSettings = function(f) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} s    object holding all sorting settings. See settings.sorting
 * @return {!Object}
 */
Infragistics.ArrayDataSource.prototype.sortSettings = function(s) {};

/**
 * Gets/sets a list of summaries settings.
 * 
 * @param {!Object=} s    object holding all summaries settings. See settings.summaries
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.summariesSettings = function(s) {};

/**
 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
 * 
 * @param {!Object=} ds
 * @return {!Object}
 */
Infragistics.ArrayDataSource.prototype.dataSource = function(ds) {};

/**
 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
 * 
 * @param {!Object=} t
 * @return {string} json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
 */
Infragistics.ArrayDataSource.prototype.type = function(t) {};

/**
 * Returns a record by a specified key (requires that primaryKey is set in the settings)
 * 
 * @param {string} key    Primary key of the record
 * @param {string=} ds    the data source in which to search for the record. When not set it will use the current data source.
 * @param {string=} objPath    Not used in $.ig.DataSource
 * @return {!Object}
 */
Infragistics.ArrayDataSource.prototype.findRecordByKey = function(key, ds, objPath) {};

/**
 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
 * 
 * @param {!Object} key    primary key of the record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.removeRecordByKey = function(key, origDs) {};

/**
 * Removes a record from the data source at specific index.
 * 
 * @param {number} index    index of record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.removeRecordByIndex = function(index, origDs) {};

/**
 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
 * 
 * @param {!Object} rowId    the rowId - row key (string) or index (number)
 * @param {!Object} colId    the column id - column key (string) or index (number)
 * @param {!Object} val    The new value
 * @param {boolean} autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.ArrayDataSource.prototype.setCellValue = function(rowId, colId, val, autoCommit) {};

/**
 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.ArrayDataSource.prototype.updateRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.ArrayDataSource.prototype.addRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {number} rowIndex    row index at which to insert the new row
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @param {!Object} parentRowId    Not used in $.ig.DataSource
 * @return {!Object}
 */
Infragistics.ArrayDataSource.prototype.insertRow = function(rowId, rowObject, rowIndex, autoCommit, parentRowId) {};

/**
 * Deletes a row from the data source.
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.ArrayDataSource.prototype.deleteRow = function(rowId, autoCommit) {};

/**
 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.addNode = function(data) {};

/**
 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.removeNode = function(data) {};

/**
 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
 * 
 * @param {!Object} t    a transaction object
 * @return {!Object}
 */
Infragistics.ArrayDataSource.prototype.getDetachedRecord = function(t) {};

/**
 * Update the data source with every transaction from the log
 * 
 * @param {number=} id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.commit = function(id) {};

/**
 * Clears the transaction log without updating anything in the data source
 * 
 * @param {!Object=} id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.rollback = function(id) {};

/**
 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
 * @return {!Array<?>}
 */
Infragistics.ArrayDataSource.prototype.pendingTransactions = function() {};

/**
 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
 * @return {!Array<?>}
 */
Infragistics.ArrayDataSource.prototype.allTransactions = function() {};

/**
 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
 * @return {string}
 */
Infragistics.ArrayDataSource.prototype.transactionsAsString = function() {};

/**
 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
 * 
 * @param {!Function} success    Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
 * @param {!Function} error    Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.saveChanges = function(success, error) {};

/**
 * Data binds to the current data source
 * databinding works using the following workflow:
 * 1. fire the databinding event
 * 2. based on the data source type (see analyzeDataSource()), do the following:
 * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
 * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
 * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
 * if no paging/sorting/filtering are enabled, use just this._data to save space
 * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
 * if the data source is invalid, throw an exception
 * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
 * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object tree
 * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
 * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
 * 6. fire the databound event
 * 
 * @param {string=} callback    callback function
 * @param {!Object=} callee    callee object on which the callback will be executed. If none is specified, will assume global execution context
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.dataBind = function(callback, callee) {};

/**
 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
 * 
 * @param {string} fieldName    the fieldName - name of the field
 * @param {!Object} record    the record from which to get it
 * @return {!Object}
 */
Infragistics.ArrayDataSource.prototype.getCellValue = function(fieldName, record) {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets or sets summaries data.
 * If key or dsObj are not set then returns summaries data.
 * Takes summary data from passed argument dsObj(using argument key)
 * 
 * @param {string=} key    response key to take summary data(for example "Metadata.Summaries")
 * @param {!Object=} dsObj    data source object - usually contains information about data records and metadata(holds info about summaries)
 * @return {!Object}
 */
Infragistics.ArrayDataSource.prototype.summariesResponse = function(key, dsObj) {};

/**
 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
 * @return {!Array<?>}
 */
Infragistics.ArrayDataSource.prototype.filteredData = function() {};

/**
 * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView().
 * Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
 * multi-column sorting can be enabled by setting keepSortState to true.
 * fields => an array of fields object definitions:
 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
 * 
 * @param {!Object} fields    an array of fields object definitions
 * @param {string} direction    asc / desc direction
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.sort = function(fields, direction) {};

/**
 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.clearLocalSorting = function() {};

/**
 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and
 * setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
 * if expr is detected to be a regular expression, the "cond" part is skipped
 * 
 * @param {!Object} fieldExpressions    a list of field expression definitions
 * @param {!Object} boolLogic    boolean logic. Accepted values are AND and OR.
 * @param {boolean} keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
 * @param {!Object} fieldExpressionsOnStrings    a list of field expression definitions (or a string with the conditions separated by AND/OR operator, example: "ID = 1 OR ID = 2"), which when applied will threat the related field as if it's string and can only apply conditions valid for string types.
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.filter = function(fieldExpressions, boolLogic, keepFilterState, fieldExpressionsOnStrings) {};

/**
 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.clearLocalFilter = function() {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets / sets the total number of records in the data source.
 * If data binding is remote, and there's paging or filtering enabled,
 * the actual total number of records may not
 * match the number of records that exists on the client
 * 
 * @param {number=} count    the total number of records
 * @param {!Object=} key
 * @param {!Object=} dsObj
 * @param {!Object=} context
 * @return {number}
 */
Infragistics.ArrayDataSource.prototype.totalRecordsCount = function(count, key, dsObj, context) {};

/**
 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
 * 
 * @param {boolean} hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.hasTotalRecordsCount = function(hasCount) {};

/**
 * Returns metadata object for the specified key
 * 
 * @param {string} key    Primary key of the record
 * @return {!Object}
 */
Infragistics.ArrayDataSource.prototype.metadata = function(key) {};

/**
 * Returns the total number of records in the local data source
 * @return {number}
 */
Infragistics.ArrayDataSource.prototype.totalLocalRecordsCount = function() {};

/**
 * Returns the total number of pages
 * @return {number}
 */
Infragistics.ArrayDataSource.prototype.pageCount = function() {};

/**
 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
 * 
 * @param {number=} index    the page index. If none is specified, returns the current page index.
 * @return {number}
 */
Infragistics.ArrayDataSource.prototype.pageIndex = function(index) {};

/**
 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
 * 
 * @param {number=} value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
 * @return {number}
 */
Infragistics.ArrayDataSource.prototype.persistedPageIndex = function(value) {};

/**
 * Sets the page index to be equal to the previous page index and rebinds the data source
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.prevPage = function() {};

/**
 * Sets the page index to be equal to the next page index and rebinds the data source
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.nextPage = function() {};

/**
 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
 * 
 * @param {number=} s    the page size.
 * @return {number}
 */
Infragistics.ArrayDataSource.prototype.pageSize = function(s) {};

/**
 * For internal use
 * 
 * @param {!Object} dirty
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.pageSizeDirty = function(dirty) {};

/**
 * Returns a list of records for the specified page. Implies that paging is enabled.
 * 
 * @param {number} p    the page index for which records will be returned
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.recordsForPage = function(p) {};

/**
 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
 * 
 * @param {!Element} tableDOM    TABLE dom element to transform
 * @return {!Object}
 */
Infragistics.ArrayDataSource.prototype.tableToObject = function(tableDOM) {};

/**
 * Parses the string and returns an evaluated JSON object
 * 
 * @param {string} s    the JSON as string.
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.stringToJSONObject = function(s) {};

/**
 * Parses a string and returns a XML Document
 * 
 * @param {string} s    the XML represented as a string
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.stringToXmlObject = function(s) {};

/**
 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
 * @return {!Array<?>}
 */
Infragistics.ArrayDataSource.prototype.groupByData = function() {};

/**
 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
 * @return {!Array<?>}
 */
Infragistics.ArrayDataSource.prototype.visibleGroupByData = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
 * @return {!Array<?>}
 */
Infragistics.ArrayDataSource.prototype.groupByDataView = function() {};

/**
 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
 * 
 * @param {string} id    data-id attribute of the respective group row in the DOM
 * @param {boolean} collapsed    if true the record should be collapsed, otherwise expanded
 * @return {void}
 */
Infragistics.ArrayDataSource.prototype.toggleGroupByRecord = function(id, collapsed) {};

/**
 * Check whether the specified gorupby record is collapsed
 * 
 * @param {!Object} gbRec    id of the grouped record OR grouped record
 * @return {boolean}
 */
Infragistics.ArrayDataSource.prototype.isGroupByRecordCollapsed = function(gbRec) {};

/**
 * Check whether grouping is applied for the specified sorting expressions.
 * 
 * @param {!Array<?>=} exprs    array of sorting expressions. If not set check expressions defined in sorting settings
 * @return {boolean}
 */
Infragistics.ArrayDataSource.prototype.isGroupByApplied = function(exprs) {};
 /** @type {?} */
IgniteUIStatic.prototype.ArrayDataSource;
/**
 * @record
 * @struct
 */
function MashupDataSourceMashupSettings() {}
 /** @type {boolean} */
MashupDataSourceMashupSettings.prototype.ignorePartialRecords;
 /** @type {!Array<?>} */
MashupDataSourceMashupSettings.prototype.dataSource;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!MashupDataSourceMashupSettings|!DataSourceSettings} mashupSettings_or_settings
 */
Infragistics.MashupDataSource = function(mashupSettings_or_settings) {};

/**
 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
 * 
 * @param {!Object} rowId    the rowId - row key (string) or index (number)
 * @param {!Object} colId    the column id - column key (string) or index (number)
 * @param {!Object} val    The new value
 * @param {boolean} autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.MashupDataSource.prototype.setCellValue = function(rowId, colId, val, autoCommit) {};

/**
 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.MashupDataSource.prototype.updateRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.MashupDataSource.prototype.addRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {number} rowIndex    row index at which to insert the new row
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @param {!Object} parentRowId    Not used in $.ig.DataSource
 * @return {!Object}
 */
Infragistics.MashupDataSource.prototype.insertRow = function(rowId, rowObject, rowIndex, autoCommit, parentRowId) {};

/**
 * Data binds to the current data source.
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.dataBind = function() {};

/**
 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
 * 
 * @param {!Object=} fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
 * @return {!Object}
 */
Infragistics.MashupDataSource.prototype.fields = function(fields) {};

/**
 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
 * @return {string}
 */
Infragistics.MashupDataSource.prototype.analyzeDataSource = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
 * @return {!Array<?>}
 */
Infragistics.MashupDataSource.prototype.dataView = function() {};

/**
 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
 * @return {!Object}
 */
Infragistics.MashupDataSource.prototype.data = function() {};

/**
 * Returns transformed data according to transformed execution:
 * 1. Before paging and filtering
 * 2. After filtering before paging
 * 3. After filtering and paging
 * 
 * @param {!Object} transformedExecution
 * @return {!Object}
 */
Infragistics.MashupDataSource.prototype.transformedData = function(transformedExecution) {};

/**
 * Returns summaries data
 * @return {!Object}
 */
Infragistics.MashupDataSource.prototype.dataSummaries = function() {};

/**
 * Gets/sets the schema definition.
 * 
 * @param {!Object=} s    a schema object
 * @param {string=} t    type of the data source. See settings.type
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.schema = function(s, t) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} p    object holding all paging settings. See settings.paging
 * @return {!Object}
 */
Infragistics.MashupDataSource.prototype.pagingSettings = function(p) {};

/**
 * Gets/sets a list of filtering settings
 * 
 * @param {!Object=} f    object holding all filtering settings. See settings.filtering
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.filterSettings = function(f) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} s    object holding all sorting settings. See settings.sorting
 * @return {!Object}
 */
Infragistics.MashupDataSource.prototype.sortSettings = function(s) {};

/**
 * Gets/sets a list of summaries settings.
 * 
 * @param {!Object=} s    object holding all summaries settings. See settings.summaries
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.summariesSettings = function(s) {};

/**
 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
 * 
 * @param {!Object=} ds
 * @return {!Object}
 */
Infragistics.MashupDataSource.prototype.dataSource = function(ds) {};

/**
 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
 * 
 * @param {!Object=} t
 * @return {string} json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
 */
Infragistics.MashupDataSource.prototype.type = function(t) {};

/**
 * Returns a record by a specified key (requires that primaryKey is set in the settings)
 * 
 * @param {string} key    Primary key of the record
 * @param {string=} ds    the data source in which to search for the record. When not set it will use the current data source.
 * @param {string=} objPath    Not used in $.ig.DataSource
 * @return {!Object}
 */
Infragistics.MashupDataSource.prototype.findRecordByKey = function(key, ds, objPath) {};

/**
 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
 * 
 * @param {!Object} key    primary key of the record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.removeRecordByKey = function(key, origDs) {};

/**
 * Removes a record from the data source at specific index.
 * 
 * @param {number} index    index of record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.removeRecordByIndex = function(index, origDs) {};

/**
 * Deletes a row from the data source.
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.MashupDataSource.prototype.deleteRow = function(rowId, autoCommit) {};

/**
 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.addNode = function(data) {};

/**
 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.removeNode = function(data) {};

/**
 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
 * 
 * @param {!Object} t    a transaction object
 * @return {!Object}
 */
Infragistics.MashupDataSource.prototype.getDetachedRecord = function(t) {};

/**
 * Update the data source with every transaction from the log
 * 
 * @param {number=} id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.commit = function(id) {};

/**
 * Clears the transaction log without updating anything in the data source
 * 
 * @param {!Object=} id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.rollback = function(id) {};

/**
 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
 * @return {!Array<?>}
 */
Infragistics.MashupDataSource.prototype.pendingTransactions = function() {};

/**
 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
 * @return {!Array<?>}
 */
Infragistics.MashupDataSource.prototype.allTransactions = function() {};

/**
 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
 * @return {string}
 */
Infragistics.MashupDataSource.prototype.transactionsAsString = function() {};

/**
 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
 * 
 * @param {!Function} success    Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
 * @param {!Function} error    Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.saveChanges = function(success, error) {};

/**
 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
 * 
 * @param {string} fieldName    the fieldName - name of the field
 * @param {!Object} record    the record from which to get it
 * @return {!Object}
 */
Infragistics.MashupDataSource.prototype.getCellValue = function(fieldName, record) {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets or sets summaries data.
 * If key or dsObj are not set then returns summaries data.
 * Takes summary data from passed argument dsObj(using argument key)
 * 
 * @param {string=} key    response key to take summary data(for example "Metadata.Summaries")
 * @param {!Object=} dsObj    data source object - usually contains information about data records and metadata(holds info about summaries)
 * @return {!Object}
 */
Infragistics.MashupDataSource.prototype.summariesResponse = function(key, dsObj) {};

/**
 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
 * @return {!Array<?>}
 */
Infragistics.MashupDataSource.prototype.filteredData = function() {};

/**
 * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView().
 * Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
 * multi-column sorting can be enabled by setting keepSortState to true.
 * fields => an array of fields object definitions:
 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
 * 
 * @param {!Object} fields    an array of fields object definitions
 * @param {string} direction    asc / desc direction
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.sort = function(fields, direction) {};

/**
 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.clearLocalSorting = function() {};

/**
 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and
 * setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
 * if expr is detected to be a regular expression, the "cond" part is skipped
 * 
 * @param {!Object} fieldExpressions    a list of field expression definitions
 * @param {!Object} boolLogic    boolean logic. Accepted values are AND and OR.
 * @param {boolean} keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
 * @param {!Object} fieldExpressionsOnStrings    a list of field expression definitions (or a string with the conditions separated by AND/OR operator, example: "ID = 1 OR ID = 2"), which when applied will threat the related field as if it's string and can only apply conditions valid for string types.
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.filter = function(fieldExpressions, boolLogic, keepFilterState, fieldExpressionsOnStrings) {};

/**
 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.clearLocalFilter = function() {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets / sets the total number of records in the data source.
 * If data binding is remote, and there's paging or filtering enabled,
 * the actual total number of records may not
 * match the number of records that exists on the client
 * 
 * @param {number=} count    the total number of records
 * @param {!Object=} key
 * @param {!Object=} dsObj
 * @param {!Object=} context
 * @return {number}
 */
Infragistics.MashupDataSource.prototype.totalRecordsCount = function(count, key, dsObj, context) {};

/**
 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
 * 
 * @param {boolean} hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.hasTotalRecordsCount = function(hasCount) {};

/**
 * Returns metadata object for the specified key
 * 
 * @param {string} key    Primary key of the record
 * @return {!Object}
 */
Infragistics.MashupDataSource.prototype.metadata = function(key) {};

/**
 * Returns the total number of records in the local data source
 * @return {number}
 */
Infragistics.MashupDataSource.prototype.totalLocalRecordsCount = function() {};

/**
 * Returns the total number of pages
 * @return {number}
 */
Infragistics.MashupDataSource.prototype.pageCount = function() {};

/**
 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
 * 
 * @param {number=} index    the page index. If none is specified, returns the current page index.
 * @return {number}
 */
Infragistics.MashupDataSource.prototype.pageIndex = function(index) {};

/**
 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
 * 
 * @param {number=} value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
 * @return {number}
 */
Infragistics.MashupDataSource.prototype.persistedPageIndex = function(value) {};

/**
 * Sets the page index to be equal to the previous page index and rebinds the data source
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.prevPage = function() {};

/**
 * Sets the page index to be equal to the next page index and rebinds the data source
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.nextPage = function() {};

/**
 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
 * 
 * @param {number=} s    the page size.
 * @return {number}
 */
Infragistics.MashupDataSource.prototype.pageSize = function(s) {};

/**
 * For internal use
 * 
 * @param {!Object} dirty
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.pageSizeDirty = function(dirty) {};

/**
 * Returns a list of records for the specified page. Implies that paging is enabled.
 * 
 * @param {number} p    the page index for which records will be returned
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.recordsForPage = function(p) {};

/**
 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
 * 
 * @param {!Element} tableDOM    TABLE dom element to transform
 * @return {!Object}
 */
Infragistics.MashupDataSource.prototype.tableToObject = function(tableDOM) {};

/**
 * Parses the string and returns an evaluated JSON object
 * 
 * @param {string} s    the JSON as string.
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.stringToJSONObject = function(s) {};

/**
 * Parses a string and returns a XML Document
 * 
 * @param {string} s    the XML represented as a string
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.stringToXmlObject = function(s) {};

/**
 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
 * @return {!Array<?>}
 */
Infragistics.MashupDataSource.prototype.groupByData = function() {};

/**
 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
 * @return {!Array<?>}
 */
Infragistics.MashupDataSource.prototype.visibleGroupByData = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
 * @return {!Array<?>}
 */
Infragistics.MashupDataSource.prototype.groupByDataView = function() {};

/**
 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
 * 
 * @param {string} id    data-id attribute of the respective group row in the DOM
 * @param {boolean} collapsed    if true the record should be collapsed, otherwise expanded
 * @return {void}
 */
Infragistics.MashupDataSource.prototype.toggleGroupByRecord = function(id, collapsed) {};

/**
 * Check whether the specified gorupby record is collapsed
 * 
 * @param {!Object} gbRec    id of the grouped record OR grouped record
 * @return {boolean}
 */
Infragistics.MashupDataSource.prototype.isGroupByRecordCollapsed = function(gbRec) {};

/**
 * Check whether grouping is applied for the specified sorting expressions.
 * 
 * @param {!Array<?>=} exprs    array of sorting expressions. If not set check expressions defined in sorting settings
 * @return {boolean}
 */
Infragistics.MashupDataSource.prototype.isGroupByApplied = function(exprs) {};
 /** @type {?} */
IgniteUIStatic.prototype.MashupDataSource;
/**
 * @record
 * @struct
 */
function HierarchicalDataSourceSettingsPaging() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function HierarchicalDataSourceSettingsSorting() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function HierarchicalDataSourceSettingsFiltering() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function HierarchicalDataSourceSettingsSchema() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function HierarchicalDataSourceSettings() {}
 /** @type {boolean} */
HierarchicalDataSourceSettings.prototype.autogenerate;
 /** @type {number} */
HierarchicalDataSourceSettings.prototype.initialDataBindDepth;
 /** @type {number} */
HierarchicalDataSourceSettings.prototype.maxDataBindDepth;
 /** @type {string} */
HierarchicalDataSourceSettings.prototype.defaultChildrenDataProperty;
 /** @type {?} */
HierarchicalDataSourceSettings.prototype.callback;
 /** @type {?} */
HierarchicalDataSourceSettings.prototype.callee;
 /** @type {!Array<?>} */
HierarchicalDataSourceSettings.prototype.data;
 /** @type {?} */
HierarchicalDataSourceSettings.prototype.dataSource;
 /** @type {?} */
HierarchicalDataSourceSettings.prototype.dataBinding;
 /** @type {?} */
HierarchicalDataSourceSettings.prototype.dataBound;
 /** @type {string} */
HierarchicalDataSourceSettings.prototype.type;
 /** @type {?} */
HierarchicalDataSourceSettings.prototype.responseDataType;
 /** @type {?} */
HierarchicalDataSourceSettings.prototype.responseContentType;
 /** @type {boolean} */
HierarchicalDataSourceSettings.prototype.localSchemaTransform;
 /** @type {?} */
HierarchicalDataSourceSettings.prototype.urlParamsEncoding;
 /** @type {?} */
HierarchicalDataSourceSettings.prototype.urlParamsEncoded;
 /** @type {string} */
HierarchicalDataSourceSettings.prototype.requestType;
 /** @type {boolean} */
HierarchicalDataSourceSettings.prototype.odata;
 /** @type {!HierarchicalDataSourceSettingsPaging} */
HierarchicalDataSourceSettings.prototype.paging;
 /** @type {!HierarchicalDataSourceSettingsSorting} */
HierarchicalDataSourceSettings.prototype.sorting;
 /** @type {!HierarchicalDataSourceSettingsFiltering} */
HierarchicalDataSourceSettings.prototype.filtering;
 /** @type {!HierarchicalDataSourceSettingsSchema} */
HierarchicalDataSourceSettings.prototype.schema;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!HierarchicalDataSourceSettings} settings
 */
Infragistics.HierarchicalDataSource = function(settings) {};

/**
 * @param {!Object} callback
 * @param {!Object} callee
 * @return {void}
 */
Infragistics.HierarchicalDataSource.prototype.dataBind = function(callback, callee) {};

/**
 * @return {void}
 */
Infragistics.HierarchicalDataSource.prototype.root = function() {};

/**
 * @param {!Object} path
 * @param {!Object} keyspath
 * @return {void}
 */
Infragistics.HierarchicalDataSource.prototype.dataAt = function(path, keyspath) {};
 /** @type {?} */
IgniteUIStatic.prototype.HierarchicalDataSource;
/**
 * @record
 * @struct
 */
function TreeHierarchicalDataSourceSettingsTreeDSFiltering() {}
 /** @type {number} */
TreeHierarchicalDataSourceSettingsTreeDSFiltering.prototype.fromLevel;
 /** @type {number} */
TreeHierarchicalDataSourceSettingsTreeDSFiltering.prototype.toLevel;
 /** @type {?} */
TreeHierarchicalDataSourceSettingsTreeDSFiltering.prototype.displayMode;
 /** @type {string} */
TreeHierarchicalDataSourceSettingsTreeDSFiltering.prototype.matchFiltering;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function TreeHierarchicalDataSourceSettingsTreeDSSorting() {}
 /** @type {number} */
TreeHierarchicalDataSourceSettingsTreeDSSorting.prototype.fromLevel;
 /** @type {number} */
TreeHierarchicalDataSourceSettingsTreeDSSorting.prototype.toLevel;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function TreeHierarchicalDataSourceSettingsTreeDSPaging() {}
 /** @type {string} */
TreeHierarchicalDataSourceSettingsTreeDSPaging.prototype.mode;
 /** @type {string} */
TreeHierarchicalDataSourceSettingsTreeDSPaging.prototype.contextRowMode;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function TreeHierarchicalDataSourceSettingsTreeDS() {}
 /** @type {string} */
TreeHierarchicalDataSourceSettingsTreeDS.prototype.childDataKey;
 /** @type {string} */
TreeHierarchicalDataSourceSettingsTreeDS.prototype.foreignKey;
 /** @type {number} */
TreeHierarchicalDataSourceSettingsTreeDS.prototype.initialExpandDepth;
 /** @type {boolean} */
TreeHierarchicalDataSourceSettingsTreeDS.prototype.enableRemoteLoadOnDemand;
 /** @type {string} */
TreeHierarchicalDataSourceSettingsTreeDS.prototype.dataSourceUrl;
 /** @type {!Function} */
TreeHierarchicalDataSourceSettingsTreeDS.prototype.requestDataCallback;
 /** @type {!Function} */
TreeHierarchicalDataSourceSettingsTreeDS.prototype.requestDataSuccessCallback;
 /** @type {!Function} */
TreeHierarchicalDataSourceSettingsTreeDS.prototype.requestDataErrorCallback;
 /** @type {string} */
TreeHierarchicalDataSourceSettingsTreeDS.prototype.propertyExpanded;
 /** @type {string} */
TreeHierarchicalDataSourceSettingsTreeDS.prototype.propertyDataLevel;
 /** @type {boolean} */
TreeHierarchicalDataSourceSettingsTreeDS.prototype.initialFlatDataView;
 /** @type {!Function} */
TreeHierarchicalDataSourceSettingsTreeDS.prototype.customEncodeUrlFunc;
 /** @type {boolean} */
TreeHierarchicalDataSourceSettingsTreeDS.prototype.persistExpansionStates;
 /** @type {!TreeHierarchicalDataSourceSettingsTreeDSFiltering} */
TreeHierarchicalDataSourceSettingsTreeDS.prototype.filtering;
 /** @type {!TreeHierarchicalDataSourceSettingsTreeDSSorting} */
TreeHierarchicalDataSourceSettingsTreeDS.prototype.sorting;
 /** @type {!TreeHierarchicalDataSourceSettingsTreeDSPaging} */
TreeHierarchicalDataSourceSettingsTreeDS.prototype.paging;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function TreeHierarchicalDataSourceSettings() {}
 /** @type {!TreeHierarchicalDataSourceSettingsTreeDS} */
TreeHierarchicalDataSourceSettings.prototype.treeDS;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!TreeHierarchicalDataSourceSettings} settings
 */
Infragistics.TreeHierarchicalDataSource = function(settings) {};

/**
 * Data binds to the current data source
 * databinding works using the following workflow:
 * 1. fire the databinding event
 * 2. based on the data source type (see analyzeDataSource()), do the following:
 * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
 * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
 * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
 * if no paging/sorting/filtering are enabled, use just this._data to save space
 * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
 * if the data source is invalid, throw an exception
 * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
 * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object ree
 * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
 * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
 * 6. fire the databound event
 * 
 * @param {string=} callback    callback function
 * @param {!Object=} callee    callee object on which the callback will be executed. If none is specified, will assume global execution context
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.dataBind = function(callback, callee) {};

/**
 * Gets the passed record's parent records
 * 
 * @param {!Object} dataRow    the child record.
 * @param {!Object=} ds    the data source in which to search for the related parent records.
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.getParentRowsForRow = function(dataRow, ds) {};

/**
 * Gets the current data bound depth of the tree grid hierarchy.
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.getDataBoundDepth = function() {};

/**
 * Gets/Sets whether the data source has been transformed from flat to hierarchical
 * 
 * @param {boolean=} isTransformed    Determines if the data source is marked as transformed or not.
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.isTransformedToHierarchicalData = function(isTransformed) {};

/**
 * Transforms flat data to hierararchical data and returns the result
 * 
 * @param {!Object} data    The flat data that will be transformed to hierarchical
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.transformToHierarchicalData = function(data) {};

/**
 * This processes the passed data for the specified level and applies the schema transformation to it.
 * 
 * @param {!Object} data    The data to be processed and transformed
 * @param {number=} level    The level to which the data belongs to. If this is not set it defaults to 0.
 * @param {boolean=} suppressTransformation    Determines whether the data should go through schema transformation. If true schema transofrmatin will not be applied.
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.processDataPerLevel = function(data, level, suppressTransformation) {};

/**
 * Returnschild data transformed to flat data
 * 
 * @param {!Object} record    The data record whose data is transformed and returned as flat
 * @param {number=} level    The level. If not set defaults to 0.
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.getFlatDataForRecord = function(record, level) {};

/**
 * Generates flat data.
 * Returns an object that contains the generated flat data, the flat visible data, records count and visible records count.
 * 
 * @param {!Object} data    The data record whose data is transformed.
 * @param {number=} level    The level from which to start recursively generating the flat data. If not set defaults to 0.
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.generateFlatData = function(data, level) {};

/**
 * Generates a flat data view from the current (hierarchical)data
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.generateFlatDataView = function() {};

/**
 * Returns the current flat data view
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.flatDataView = function() {};

/**
 * Returns flat visible data.
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.getVisibleFlatData = function() {};

/**
 * Returns flat data(without taking into account visible/expansion state).
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.getFlatData = function() {};

/**
 * Returns total records count(without taking into account visible/expansion state).
 * @return {number}
 */
Infragistics.TreeHierarchicalDataSource.prototype.getFlatDataCount = function() {};

/**
 * Sets the expanded/collapsed state of a row by its index
 * 
 * @param {number} index    The index of the row.
 * @param {boolean} expanded    If true then the row will be expanded. Otherwise it will be collapsed.
 * @param {!Function} callbackArgs    Specifies a custom function to be called when the state of the row is changed.
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.setExpandedStateByRowIndex = function(index, expanded, callbackArgs) {};

/**
 * Sets the expanded state of a row by its primary key
 * 
 * @param {string} rowId    The id of the row.
 * @param {boolean} expanded    If true the row will be expanded. Otherwise it will be collapsed.
 * @param {!Function} callbackArgs    Specifies a custom function to be called when the state of the row is changed.
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.setExpandedStateByPrimaryKey = function(rowId, expanded, callbackArgs) {};

/**
 * Gets whether the row with the specified id is expanded.Returns true if the row is expanded or false if it's not.
 * 
 * @param {string} rowId    //The id of the row.
 * @return {boolean}
 */
Infragistics.TreeHierarchicalDataSource.prototype.getExpandStateById = function(rowId) {};

/**
 * Toggles the row's state by the row's id.
 * 
 * @param {string} rowId    The id of the row.
 * @param {!Function} callbackArgs    Specifies a custom function to be called when the state of the row is changed.
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.toggleRow = function(rowId, callbackArgs) {};

/**
 * Sorts the data source locally. The result (sorted data) can be obtained by calling dataView().
 * Remote filtering can be performed by just calling dataBind() and setting the settings.sorting.expressions
 * multi-column sorting can be enabled by setting keepSortState to true.
 * fields => an array of fields object definitions:
 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
 * 
 * @param {!Object} fields    an array of fields object definitions
 * @param {string} direction    asc / desc direction
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.sort = function(fields, direction) {};

/**
 * Sorts the given data recursively
 * fields => an array of fields object definitions:
 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
 * 
 * @param {!Object} data    the data array that will be sorted.
 * @param {number} level    the level to which the data belongs to
 * @param {!Object} fields    an array of fields object definitions
 * @param {string} direction    asc / desc direction
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.sortDataRecursive = function(data, level, fields, direction) {};

/**
 * Sorts the passed data and returns the sorted result.
 * 
 * @param {!Object} data    the data to be sorted
 * 
 * fields => an array of fields object definitions:
 * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
 * 
 * @param {!Object} fields    an array of fields object definitions
 * @param {string} direction    asc / desc direction
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.sortData = function(data, fields, direction) {};

/**
 * Returns the total number of records in the local data source
 * @return {number}
 */
Infragistics.TreeHierarchicalDataSource.prototype.totalLocalRecordsCount = function() {};

/**
 * Returns the total number of pages
 * @return {number}
 */
Infragistics.TreeHierarchicalDataSource.prototype.pageCount = function() {};

/**
 * Returns the total number of match filtering records in the data source.
 * When the dataSource is remote and filtering is applied then it is taken value
 * of property "filtering.countRecords" in metatadata - if set. If it is not set returns totalRecordsCount
 * @return {number}
 */
Infragistics.TreeHierarchicalDataSource.prototype.getFilteringMatchRecordsCount = function() {};

/**
 * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
 * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
 * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
 * expr is the filter expression text , such as "abc", or a regular expression such as *test*
 * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
 * if expr is detected to be a regular expression, the "cond" part is skipped
 * 
 * @param {!Object} fieldExpressions    a list of field expression definitions
 * @param {!Object} boolLogic    boolean logic. Accepted values are AND and OR.
 * @param {boolean} keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
 * @param {!Object} fieldExpressionsOnStrings
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.filter = function(fieldExpressions, boolLogic, keepFilterState, fieldExpressionsOnStrings) {};

/**
 * Gets the count of the filtered records in the dataView
 * @return {number}
 */
Infragistics.TreeHierarchicalDataSource.prototype.getFilteredRecordsCountFromDataView = function() {};

/**
 * Gets the count of the filtered records
 * @return {number}
 */
Infragistics.TreeHierarchicalDataSource.prototype.getFilteredRecordsCount = function() {};

/**
 * This clears local filtering applied to the data view by resetting it to the original data and applying any paging.
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.clearLocalFilter = function() {};

/**
 * Gets whether the flat data view should be generated by calling the generateFlatDataView method.
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.shouldCallGenerateFlatDataView = function() {};

/**
 * Clears __matchFiltering property from the data record objects in the filtered data source. The __matchFiltering property determines whether a record matches the specified filtering condition.
 * 
 * @param {!Object=} data    the array of data objects to be cleared. If not set the current filtered data array is used.
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.clearMatchFiltering = function(data) {};

/**
 * Gets the path of a record by the record or the record's key
 * 
 * @param {!Object} record    the record or the record's key as string or number
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.getPathBy = function(record) {};

/**
 * Returns a record by a specified key (requires that primaryKey is set in the settings)
 * 
 * @param {!Object} key    Primary key of the record
 * @param {string=} ds    the data source in which to search for the record. When not set it will use the current data source.
 * @param {!Object=} objPath    path to the object. Example: {path: '5/1'}
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.findRecordByKey = function(key, ds, objPath) {};

/**
 * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
 * 
 * @param {!Object} key    primary key of the record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.removeRecordByKey = function(key, origDs) {};

/**
 * Deletes a row from the data source.
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.deleteRow = function(rowId, autoCommit) {};

/**
 * Gets the chilren records by the parent record's key in the passed data source
 * 
 * @param {!Object} key     primary key of the record
 * @param {!Object} ds     the data source
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.getChildrenByKey = function(key, ds) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {number} rowIndex    row index at which to be insert the new row
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @param {!Object} parentRowId    the value of the primary key of the parent row(if any)
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.insertRow = function(rowId, rowObject, rowIndex, autoCommit, parentRowId) {};

/**
 * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
 * 
 * @param {!Object=} fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.fields = function(fields) {};

/**
 * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
 * @return {string}
 */
Infragistics.TreeHierarchicalDataSource.prototype.analyzeDataSource = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
 * @return {!Array<?>}
 */
Infragistics.TreeHierarchicalDataSource.prototype.dataView = function() {};

/**
 * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.data = function() {};

/**
 * Returns transformed data according to transformed execution:
 * 1. Before paging and filtering
 * 2. After filtering before paging
 * 3. After filtering and paging
 * 
 * @param {!Object} transformedExecution
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.transformedData = function(transformedExecution) {};

/**
 * Returns summaries data
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.dataSummaries = function() {};

/**
 * Gets/sets the schema definition.
 * 
 * @param {!Object=} s    a schema object
 * @param {string=} t    type of the data source. See settings.type
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.schema = function(s, t) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} p    object holding all paging settings. See settings.paging
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.pagingSettings = function(p) {};

/**
 * Gets/sets a list of filtering settings
 * 
 * @param {!Object=} f    object holding all filtering settings. See settings.filtering
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.filterSettings = function(f) {};

/**
 * Gets/sets a list of paging settings
 * 
 * @param {!Object=} s    object holding all sorting settings. See settings.sorting
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.sortSettings = function(s) {};

/**
 * Gets/sets a list of summaries settings.
 * 
 * @param {!Object=} s    object holding all summaries settings. See settings.summaries
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.summariesSettings = function(s) {};

/**
 * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
 * 
 * @param {!Object=} ds
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.dataSource = function(ds) {};

/**
 * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
 * 
 * @param {!Object=} t
 * @return {string} json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty
 */
Infragistics.TreeHierarchicalDataSource.prototype.type = function(t) {};

/**
 * Removes a record from the data source at specific index.
 * 
 * @param {number} index    index of record
 * @param {!Object} origDs
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.removeRecordByIndex = function(index, origDs) {};

/**
 * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
 * 
 * @param {!Object} rowId    the rowId - row key (string) or index (number)
 * @param {!Object} colId    the column id - column key (string) or index (number)
 * @param {!Object} val    The new value
 * @param {boolean} autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.setCellValue = function(rowId, colId, val, autoCommit) {};

/**
 * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.updateRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} rowId    the record key - primaryKey (string) or index (number)
 * @param {!Object} rowObject    the new record data.
 * @param {boolean} autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.addRow = function(rowId, rowObject, autoCommit) {};

/**
 * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.addNode = function(data) {};

/**
 * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
 * 
 * @param {!Object} data    the transaction data
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.removeNode = function(data) {};

/**
 * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
 * 
 * @param {!Object} t    a transaction object
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.getDetachedRecord = function(t) {};

/**
 * Update the data source with every transaction from the log
 * 
 * @param {number=} id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.commit = function(id) {};

/**
 * Clears the transaction log without updating anything in the data source
 * 
 * @param {!Object=} id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.rollback = function(id) {};

/**
 * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
 * @return {!Array<?>}
 */
Infragistics.TreeHierarchicalDataSource.prototype.pendingTransactions = function() {};

/**
 * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
 * @return {!Array<?>}
 */
Infragistics.TreeHierarchicalDataSource.prototype.allTransactions = function() {};

/**
 * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
 * @return {string}
 */
Infragistics.TreeHierarchicalDataSource.prototype.transactionsAsString = function() {};

/**
 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
 * 
 * @param {!Function} success    Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
 * @param {!Function} error    Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.saveChanges = function(success, error) {};

/**
 * Gets a cell value from the record by the specified fieldName. If there's a mapper defined for the field, the resolved by the mapper value will be returned.
 * 
 * @param {string} fieldName    the fieldName - name of the field
 * @param {!Object} record    the record from which to get it
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.getCellValue = function(fieldName, record) {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets or sets summaries data.
 * If key or dsObj are not set then returns summaries data.
 * Takes summary data from passed argument dsObj(using argument key)
 * 
 * @param {string=} key    response key to take summary data(for example "Metadata.Summaries")
 * @param {!Object=} dsObj    data source object - usually contains information about data records and metadata(holds info about summaries)
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.summariesResponse = function(key, dsObj) {};

/**
 * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
 * @return {!Array<?>}
 */
Infragistics.TreeHierarchicalDataSource.prototype.filteredData = function() {};

/**
 * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.clearLocalSorting = function() {};

/**
 * Applicable only when the data source is bound to remote data.
 * Gets / sets the total number of records in the data source.
 * If data binding is remote, and there's paging or filtering enabled,
 * the actual total number of records may not
 * match the number of records that exists on the client
 * 
 * @param {number=} count    the total number of records
 * @param {!Object=} key
 * @param {!Object=} dsObj
 * @param {!Object=} context
 * @return {number}
 */
Infragistics.TreeHierarchicalDataSource.prototype.totalRecordsCount = function(count, key, dsObj, context) {};

/**
 * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
 * 
 * @param {boolean} hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.hasTotalRecordsCount = function(hasCount) {};

/**
 * Returns metadata object for the specified key
 * 
 * @param {string} key    Primary key of the record
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.metadata = function(key) {};

/**
 * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
 * 
 * @param {number=} index    the page index. If none is specified, returns the current page index.
 * @return {number}
 */
Infragistics.TreeHierarchicalDataSource.prototype.pageIndex = function(index) {};

/**
 * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
 * 
 * @param {number=} value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
 * @return {number}
 */
Infragistics.TreeHierarchicalDataSource.prototype.persistedPageIndex = function(value) {};

/**
 * Sets the page index to be equal to the previous page index and rebinds the data source
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.prevPage = function() {};

/**
 * Sets the page index to be equal to the next page index and rebinds the data source
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.nextPage = function() {};

/**
 * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
 * 
 * @param {number=} s    the page size.
 * @return {number}
 */
Infragistics.TreeHierarchicalDataSource.prototype.pageSize = function(s) {};

/**
 * For internal use
 * 
 * @param {!Object} dirty
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.pageSizeDirty = function(dirty) {};

/**
 * Returns a list of records for the specified page. Implies that paging is enabled.
 * 
 * @param {number} p    the page index for which records will be returned
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.recordsForPage = function(p) {};

/**
 * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
 * 
 * @param {!Element} tableDOM    TABLE dom element to transform
 * @return {!Object}
 */
Infragistics.TreeHierarchicalDataSource.prototype.tableToObject = function(tableDOM) {};

/**
 * Parses the string and returns an evaluated JSON object
 * 
 * @param {string} s    the JSON as string.
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.stringToJSONObject = function(s) {};

/**
 * Parses a string and returns a XML Document
 * 
 * @param {string} s    the XML represented as a string
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.stringToXmlObject = function(s) {};

/**
 * Returns collection of data and non-data(grouped) records. Flat representation of hierarchical data
 * @return {!Array<?>}
 */
Infragistics.TreeHierarchicalDataSource.prototype.groupByData = function() {};

/**
 * Returns collection of data and non-data(grouped) records. Returns only visible records(children of collapsed grouped records are not included in the collection)
 * @return {!Array<?>}
 */
Infragistics.TreeHierarchicalDataSource.prototype.visibleGroupByData = function() {};

/**
 * Returns the current normalized/transformed and paged/filtered/sorted group-by data
 * @return {!Array<?>}
 */
Infragistics.TreeHierarchicalDataSource.prototype.groupByDataView = function() {};

/**
 * Toggle grouped record with the specified id and updates collections visible groupby data and data view
 * 
 * @param {string} id    data-id attribute of the respective group row in the DOM
 * @param {boolean} collapsed    if true the record should be collapsed, otherwise expanded
 * @return {void}
 */
Infragistics.TreeHierarchicalDataSource.prototype.toggleGroupByRecord = function(id, collapsed) {};

/**
 * Check whether the specified gorupby record is collapsed
 * 
 * @param {!Object} gbRec    id of the grouped record OR grouped record
 * @return {boolean}
 */
Infragistics.TreeHierarchicalDataSource.prototype.isGroupByRecordCollapsed = function(gbRec) {};

/**
 * Check whether grouping is applied for the specified sorting expressions.
 * 
 * @param {!Array<?>=} exprs    array of sorting expressions. If not set check expressions defined in sorting settings
 * @return {boolean}
 */
Infragistics.TreeHierarchicalDataSource.prototype.isGroupByApplied = function(exprs) {};
 /** @type {?} */
IgniteUIStatic.prototype.TreeHierarchicalDataSource;
/**
 * @constructor
 * @struct
 */
Infragistics.DvCommonWidget = function() {};

/**
 * @param {!Object} key
 * @param {!Object} value
 * @return {void}
 */
Infragistics.DvCommonWidget.prototype.option = function(key, value) {};
/**
 * @record
 * @struct
 */
function SimpleTextMarkerTemplateSettings() {}
 /** @type {number} */
SimpleTextMarkerTemplateSettings.prototype.padding;
 /** @type {?} */
SimpleTextMarkerTemplateSettings.prototype.getText;
 /** @type {string} */
SimpleTextMarkerTemplateSettings.prototype.backgroundColor;
 /** @type {string} */
SimpleTextMarkerTemplateSettings.prototype.borderColor;
 /** @type {number} */
SimpleTextMarkerTemplateSettings.prototype.borderThickness;
 /** @type {string} */
SimpleTextMarkerTemplateSettings.prototype.textColor;
 /** @type {?} */
SimpleTextMarkerTemplateSettings.prototype.font;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {boolean|!SimpleTextMarkerTemplateSettings} requireThis_or_settings
 */
Infragistics.SimpleTextMarkerTemplate = function(requireThis_or_settings) {};

/**
 * @param {!Object} item
 * @param {!Object} textDelegate
 * @return {void}
 */
Infragistics.SimpleTextMarkerTemplate.prototype.getText = function(item, textDelegate) {};

/**
 * @param {!Object} measureInfo
 * @return {void}
 */
Infragistics.SimpleTextMarkerTemplate.prototype.measure = function(measureInfo) {};

/**
 * @param {!Object} renderInfo
 * @return {void}
 */
Infragistics.SimpleTextMarkerTemplate.prototype.render = function(renderInfo) {};
 /** @type {?} */
IgniteUIStatic.prototype.SimpleTextMarkerTemplate;
/**
 * @record
 * @struct
 */
function GridExcelExporterSettingsGridFeatureOptions() {}
 /** @type {string} */
GridExcelExporterSettingsGridFeatureOptions.prototype.sorting;
 /** @type {string} */
GridExcelExporterSettingsGridFeatureOptions.prototype.paging;
 /** @type {string} */
GridExcelExporterSettingsGridFeatureOptions.prototype.hiding;
 /** @type {string} */
GridExcelExporterSettingsGridFeatureOptions.prototype.filtering;
 /** @type {string} */
GridExcelExporterSettingsGridFeatureOptions.prototype.columnfixing;
 /** @type {string} */
GridExcelExporterSettingsGridFeatureOptions.prototype.summaries;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function GridExcelExporterSettings() {}
 /** @type {string} */
GridExcelExporterSettings.prototype.fileName;
 /** @type {!GridExcelExporterSettingsGridFeatureOptions} */
GridExcelExporterSettings.prototype.gridFeatureOptions;
 /** @type {string} */
GridExcelExporterSettings.prototype.worksheetName;
 /** @type {!Array<?>} */
GridExcelExporterSettings.prototype.skipFilteringOn;
 /** @type {!Array<?>} */
GridExcelExporterSettings.prototype.columnsToSkip;
 /** @type {string} */
GridExcelExporterSettings.prototype.tableStyle;
 /** @type {string} */
GridExcelExporterSettings.prototype.gridStyling;
 /** @type {string} */
GridExcelExporterSettings.prototype.dataExportMode;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function GridExcelExporterCallbacks() {}
 /** @type {?} */
GridExcelExporterCallbacks.prototype.exportStarting;
 /** @type {?} */
GridExcelExporterCallbacks.prototype.cellExporting;
 /** @type {?} */
GridExcelExporterCallbacks.prototype.cellExported;
 /** @type {?} */
GridExcelExporterCallbacks.prototype.headerCellExporting;
 /** @type {?} */
GridExcelExporterCallbacks.prototype.headerCellExported;
 /** @type {?} */
GridExcelExporterCallbacks.prototype.rowExporting;
 /** @type {?} */
GridExcelExporterCallbacks.prototype.rowExported;
 /** @type {?} */
GridExcelExporterCallbacks.prototype.summaryExporting;
 /** @type {?} */
GridExcelExporterCallbacks.prototype.summaryExported;
 /** @type {?} */
GridExcelExporterCallbacks.prototype.exportEnding;
 /** @type {?} */
GridExcelExporterCallbacks.prototype.success;
 /** @type {?} */
GridExcelExporterCallbacks.prototype.error;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!GridExcelExporterSettings|!GridExcelExporterCallbacks} settings_or_callbacks
 */
Infragistics.GridExcelExporter = function(settings_or_callbacks) {};

/**
 * Exports the provided igGrid to Excel document.
 * 
 * @param {!Object} grid     Grid to be exported.
 * @param {!Object} userSettings     Settings for exporting the grid.
 * @param {!Object} userCallbacks     Callbacks for the events.
 * @return {void}
 */
Infragistics.GridExcelExporter.prototype.exportGrid = function(grid, userSettings, userCallbacks) {};
 /** @type {?} */
IgniteUIStatic.prototype.GridExcelExporter;
/**
 * @record
 * @struct
 */
function OlapXmlaDataSourceOptionsRequestOptions() {}
 /** @type {boolean} */
OlapXmlaDataSourceOptionsRequestOptions.prototype.withCredentials;
 /** @type {!Function} */
OlapXmlaDataSourceOptionsRequestOptions.prototype.beforeSend;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function OlapXmlaDataSourceOptionsMdxSettings() {}
 /** @type {boolean} */
OlapXmlaDataSourceOptionsMdxSettings.prototype.nonEmptyOnRows;
 /** @type {boolean} */
OlapXmlaDataSourceOptionsMdxSettings.prototype.nonEmptyOnColumns;
 /** @type {boolean} */
OlapXmlaDataSourceOptionsMdxSettings.prototype.addCalculatedMembersOnRows;
 /** @type {boolean} */
OlapXmlaDataSourceOptionsMdxSettings.prototype.addCalculatedMembersOnColumns;
 /** @type {!Array<?>} */
OlapXmlaDataSourceOptionsMdxSettings.prototype.dimensionPropertiesOnRows;
 /** @type {!Array<?>} */
OlapXmlaDataSourceOptionsMdxSettings.prototype.dimensionPropertiesOnColumns;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function OlapXmlaDataSourceOptions() {}
 /** @type {string} */
OlapXmlaDataSourceOptions.prototype.serverUrl;
 /** @type {string} */
OlapXmlaDataSourceOptions.prototype.catalog;
 /** @type {string} */
OlapXmlaDataSourceOptions.prototype.cube;
 /** @type {string} */
OlapXmlaDataSourceOptions.prototype.measureGroup;
 /** @type {string} */
OlapXmlaDataSourceOptions.prototype.measures;
 /** @type {string} */
OlapXmlaDataSourceOptions.prototype.filters;
 /** @type {string} */
OlapXmlaDataSourceOptions.prototype.rows;
 /** @type {string} */
OlapXmlaDataSourceOptions.prototype.columns;
 /** @type {!OlapXmlaDataSourceOptionsRequestOptions} */
OlapXmlaDataSourceOptions.prototype.requestOptions;
 /** @type {boolean} */
OlapXmlaDataSourceOptions.prototype.enableResultCache;
 /** @type {?} */
OlapXmlaDataSourceOptions.prototype.discoverProperties;
 /** @type {?} */
OlapXmlaDataSourceOptions.prototype.executeProperties;
 /** @type {!OlapXmlaDataSourceOptionsMdxSettings} */
OlapXmlaDataSourceOptions.prototype.mdxSettings;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!OlapXmlaDataSourceOptions} options
 */
Infragistics.OlapXmlaDataSource = function(options) {};

/**
 * Initializes the data source and returns a promise that will be resolved once the data source is initialized.
 *             The promise's result will be the metadata tree for the catalog/cube/measureGroup specified in the settings or null if the settings do not provide a valid cube initialization data.
 *             The data source is not functional until it has been initialized and all other methods other than initialize() will throw an error if isInitialized() returns false.
 * @return {!Object}
 */
Infragistics.OlapXmlaDataSource.prototype.initialize = function() {};

/**
 * Retrieves the initialization state of the data source.
 * @return {boolean}
 */
Infragistics.OlapXmlaDataSource.prototype.isInitialized = function() {};

/**
 * Indicates whether the data source is modified.
 * @return {boolean}
 */
Infragistics.OlapXmlaDataSource.prototype.isModified = function() {};

/**
 * Indicates whether the update() method execution is in progress.
 * @return {boolean}
 */
Infragistics.OlapXmlaDataSource.prototype.isUpdating = function() {};

/**
 * Retrieves the currently loaded catalogs in the data source.
 * @return {!Array<?>}
 */
Infragistics.OlapXmlaDataSource.prototype.catalogs = function() {};

/**
 * Retrieves the current catalog in the data source.
 * @return {!Object}
 */
Infragistics.OlapXmlaDataSource.prototype.catalog = function() {};

/**
 * Sets the current catalog for the data source and updates the cubes() and catalog() properties.
 * 
 * @param {string} catalogName the name of the catalog.
 * @return {!Object}
 */
Infragistics.OlapXmlaDataSource.prototype.setCatalog = function(catalogName) {};

/**
 * Retrieves the currently loaded cubes in the data source.
 * @return {!Array<?>}
 */
Infragistics.OlapXmlaDataSource.prototype.cubes = function() {};

/**
 * Retrieves the current cube in the data source.
 * @return {!Object}
 */
Infragistics.OlapXmlaDataSource.prototype.cube = function() {};

/**
 * Sets the current cube for the data source and updates the cube(), measureGroup() and metadataTree() properties.
 * 
 * @param {string} cubeName the name of the cube.
 * @return {!Object}
 */
Infragistics.OlapXmlaDataSource.prototype.setCube = function(cubeName) {};

/**
 * Retrieves the currently loaded measure groups in the data source.
 * @return {!Array<?>}
 */
Infragistics.OlapXmlaDataSource.prototype.measureGroups = function() {};

/**
 * Retrieves the current measureGroup in the data source.
 * @return {!Object}
 */
Infragistics.OlapXmlaDataSource.prototype.measureGroup = function() {};

/**
 * Sets the current measure group for the data source and updates the measureGroup() and metadataTree() properties.
 *             Even though the catalogs/cubes/measureGroups items are cascading(e.g. in order to load the cubes a catalog has to be set) in order to construct the metadata tree a measure group is not required as it just filters the resulting metadata.
 *             Once setCube(cubeName) is called the metadata tree would be loaded and the measureGroup() property would be filled with the default '(All)' measure group which indicates that no measure group is selected.
 * 
 * @param {string} measureGroupName the name of the measure group.
 * @return {!Object}
 */
Infragistics.OlapXmlaDataSource.prototype.setMeasureGroup = function(measureGroupName) {};

/**
 * Returns the fully loaded metadata tree.
 * @return {!Object}
 */
Infragistics.OlapXmlaDataSource.prototype.metadataTree = function() {};

/**
 * Adds a hierarchy to the rows of the pivot grid.
 * 
 * @param {!Object} rowItem An object of type $.ig.Hierarchy which is the hierarchy to add in the pivot grid rows.
 * @return {void}
 */
Infragistics.OlapXmlaDataSource.prototype.addRowItem = function(rowItem) {};

/**
 * Removes a hierarchy or the measure list from the rows of the pivot grid.
 * 
 * @param {!Object} rowItem an object of type $.ig.Hierarchy or $.ig.MeasureList which is the hierarchy to remove or the measure list if there are more than one measures added and the measure list location is set to "rows".
 * @return {void}
 */
Infragistics.OlapXmlaDataSource.prototype.removeRowItem = function(rowItem) {};

/**
 * Adds a hierarchy to the columns of the pivot grid.
 * 
 * @param {!Object} columnItem an object of type $.ig.Hierarchy which is the hierarchy to add in the pivot grid columns.
 * @return {void}
 */
Infragistics.OlapXmlaDataSource.prototype.addColumnItem = function(columnItem) {};

/**
 * Removes a hierarchy or the measure list from the columns of the pivot grid.
 * 
 * @param {!Object} columnItem an object of type $.ig.Hierarchy or $.ig.MeasureList which is the hierarchy to remove or the measure list if there are more than one measures added and the measure list location is set to "columns".
 * @return {void}
 */
Infragistics.OlapXmlaDataSource.prototype.removeColumnItem = function(columnItem) {};

/**
 * Adds a hierarchy to the filter axis of the pivot grid.
 * 
 * @param {!Object} filterItem an object of type $.ig.Hierarchy which is the hierarchy to add.
 * @return {void}
 */
Infragistics.OlapXmlaDataSource.prototype.addFilterItem = function(filterItem) {};

/**
 * Removes a hierarchy from the filter axis of the pivot grid.
 * 
 * @param {!Object} filterItem an object of type $.ig.Hierarchy which is the hierarchy to remove.
 * @return {void}
 */
Infragistics.OlapXmlaDataSource.prototype.removeFilterItem = function(filterItem) {};

/**
 * Adds a measure to the measures of the pivot grid.
 * 
 * @param {!Object} measureItem an object of type $.ig.Measure which is the measure to add.
 * @return {void}
 */
Infragistics.OlapXmlaDataSource.prototype.addMeasureItem = function(measureItem) {};

/**
 * Removes a measure from the measures of the pivot grid.
 * 
 * @param {!Object} measureItem An object of type $.ig.Measure which is the measure to remove.
 * @return {void}
 */
Infragistics.OlapXmlaDataSource.prototype.removeMeasureItem = function(measureItem) {};

/**
 * Sets the index at which the measure list will be positioned in the rows/columns it resides.
 * 
 * @param {number} index the index where measure list to appear.
 * @return {void}
 */
Infragistics.OlapXmlaDataSource.prototype.setMeasureListIndex = function(index) {};

/**
 * Sets the location of the measure list.
 * 
 * @param {!Object} location accepted values are 'rows' and 'columns'.
 * @return {void}
 */
Infragistics.OlapXmlaDataSource.prototype.setMeasureListLocation = function(location) {};

/**
 * Sets a tuple member to be expanded next time the update() method is called.
 *             Calling this method on an already expanded member does nothing.
 * 
 * @param {string} axisName the name of the axis for the tuple.
 * @param {number} tupleIndex the index of the tuple in the axis.
 * @param {number} memberIndex the index of the member in the tuple.
 * @return {void}
 */
Infragistics.OlapXmlaDataSource.prototype.expandTupleMember = function(axisName, tupleIndex, memberIndex) {};

/**
 * Sets a tuple member to be collapsed next time the update() method is called.
 *             Calling this method on an already collapsed member does nothing.
 * 
 * @param {string} axisName the name of the axis for the tuple.
 * @param {number} tupleIndex the index of the tuple in the axis.
 * @param {number} memberIndex the index of the member in the tuple.
 * @return {void}
 */
Infragistics.OlapXmlaDataSource.prototype.collapseTupleMember = function(axisName, tupleIndex, memberIndex) {};

/**
 * Returns the items in the row axis.
 * @return {!Array<?>}
 */
Infragistics.OlapXmlaDataSource.prototype.rowAxis = function() {};

/**
 * Returns the items in the column axis.
 * @return {!Array<?>}
 */
Infragistics.OlapXmlaDataSource.prototype.columnAxis = function() {};

/**
 * Returns the items in the filter axis.
 * @return {!Array<?>}
 */
Infragistics.OlapXmlaDataSource.prototype.filters = function() {};

/**
 * Returns the items in the measures axis.
 * @return {!Array<?>}
 */
Infragistics.OlapXmlaDataSource.prototype.measures = function() {};

/**
 * Returns the result from the last update or null if the last update was unsuccessful.
 * @return {!Object}
 */
Infragistics.OlapXmlaDataSource.prototype.result = function() {};

/**
 * Clears all pending changes since last time the update() method is called.
 * @return {void}
 */
Infragistics.OlapXmlaDataSource.prototype.clearPendingChanges = function() {};

/**
 * Performs an update with the list of pending changes and updates the data source result.
 * @return {!Object}
 */
Infragistics.OlapXmlaDataSource.prototype.update = function() {};

/**
 * Gets the first element of the specified elementType which matches the specified predicate or null if there is no such element found.
 * 
 * @param {!Function} predicate a predicate callback invoked against each core element of the specified type. It has to return true when the element has matched the serach criteria, otherwise - false.
 * @param {!Object} elementType an object specified by $.ig.ICoreOlapElement.prototype.$type property. Valid types which prototype can be examined are: $.ig.Dimension, $.ig.Hierarchy, $.ig.Level, $.ig.Measure and $.ig.MeasureList.
 * @return {!Object}
 */
Infragistics.OlapXmlaDataSource.prototype.getCoreElement = function(predicate, elementType) {};

/**
 * Gets an array with elements of the specified elementType which match the specified predicate or empty array if there is no such element found.
 * 
 * @param {!Function} predicate a predicate callback invoked against each core element of the specified type. It has to return true when the element has matched the serach criteria, otherwise - false.
 * @param {!Object} elementType an object specified by $.ig.ICoreOlapElement.prototype.$type property. Valid types which prototype can be examined are: $.ig.Dimension, $.ig.Hierarchy, $.ig.Level, $.ig.Measure and $.ig.MeasureList.
 * @return {!Object}
 */
Infragistics.OlapXmlaDataSource.prototype.getCoreElements = function(predicate, elementType) {};

/**
 * Returns $.ig.Dimension object for the specified unique name.
 * 
 * @param {string} dimensionUniqueName the unique name of the searched dimension object.
 * @return {!Object}
 */
Infragistics.OlapXmlaDataSource.prototype.getDimension = function(dimensionUniqueName) {};

/**
 * Returns $.ig.Hierarchy object for the specified unique name.
 * 
 * @param {string} hierarchyUniqueName the unique name of the searched hierarchy object.
 * @return {!Object}
 */
Infragistics.OlapXmlaDataSource.prototype.getHierarchy = function(hierarchyUniqueName) {};

/**
 * Returns $.ig.Level object for the specified unique name.
 * 
 * @param {string} levelUniqueName the unique name of the searched level object.
 * @return {!Object}
 */
Infragistics.OlapXmlaDataSource.prototype.getLevel = function(levelUniqueName) {};

/**
 * Returns $.ig.Measure object for the specified unique name.
 * 
 * @param {string} measureUniqueName the unique name of the searched measure object.
 * @return {!Object}
 */
Infragistics.OlapXmlaDataSource.prototype.getMeasure = function(measureUniqueName) {};

/**
 * Returns $.ig.MeasureList object available when operates with more than one $.ig.Measure object.
 * @return {!Object}
 */
Infragistics.OlapXmlaDataSource.prototype.getMeasureList = function() {};

/**
 * Returns an array of strings with the unique names of selected for given hierarchy filter members.
 * 
 * @param {string} hierarchyUniqueName the unique name of the hierarchy whose active filter members are returned.
 * @return {!Array<?>}
 */
Infragistics.OlapXmlaDataSource.prototype.getFilterMemberNames = function(hierarchyUniqueName) {};

/**
 * Adds a member to list of filter members that will be present in result.
 *             If a member of given hierarchy is added to this filter list then only those members which are present in this filter list will be present for that hierarchy in the result.
 * 
 * @param {string} hierarchyUniqueName the unique name of the hierarchy this member belongs to.
 * @param {string} memberUniqueName the unique name of the member to be added.
 * @return {void}
 */
Infragistics.OlapXmlaDataSource.prototype.addFilterMember = function(hierarchyUniqueName, memberUniqueName) {};

/**
 * Removes a member from the list of filter members that will be present in result.
 * 
 * @param {string} hierarchyUniqueName the unique name of the hierarchy this member belongs to.
 * @param {string} memberUniqueName the unique name of the member to be removed.
 * @return {void}
 */
Infragistics.OlapXmlaDataSource.prototype.removeFilterMember = function(hierarchyUniqueName, memberUniqueName) {};

/**
 * Removes all members from the list of filter members and the filter for the specified hierarchy is cleared.
 * 
 * @param {string} hierarchyUniqueName the unique name of the hierarchy which filter members to be cleared.
 * @return {void}
 */
Infragistics.OlapXmlaDataSource.prototype.removeAllFilterMembers = function(hierarchyUniqueName) {};

/**
 * Returns Promise which on completion provides an array of $.ig.OlapResultAxisMember objects of selected for given level filter member.
 * 
 * @param {string} levelUniqueName the unique name of the member whose active filter members are returned.
 * @return {void}
 */
Infragistics.OlapXmlaDataSource.prototype.getMembersOfLevel = function(levelUniqueName) {};

/**
 * Returns Promise which on completion provides an array of $.ig.OlapResultAxisMember objects of selected for given hierarchy filter member.
 * 
 * @param {string} hierarchyUniqueName the unique name of the member whose active filter members are returned.
 * @return {void}
 */
Infragistics.OlapXmlaDataSource.prototype.getMembersOfHierarchy = function(hierarchyUniqueName) {};

/**
 * Returns Promise which on completion provides an array of $.ig.OlapResultAxisMember objects that are children of the current member.
 * 
 * @param {string} memberUniqueName the unique name of the member whose active filter members are returned.
 * @return {void}
 */
Infragistics.OlapXmlaDataSource.prototype.getMembersOfMember = function(memberUniqueName) {};
 /** @type {?} */
IgniteUIStatic.prototype.OlapXmlaDataSource;
/**
 * @record
 * @struct
 */
function OlapFlatDataSourceOptionsMetadataCubeMeasuresDimensionMeasure() {}
 /** @type {string} */
OlapFlatDataSourceOptionsMetadataCubeMeasuresDimensionMeasure.prototype.name;
 /** @type {string} */
OlapFlatDataSourceOptionsMetadataCubeMeasuresDimensionMeasure.prototype.caption;
 /** @type {!Function} */
OlapFlatDataSourceOptionsMetadataCubeMeasuresDimensionMeasure.prototype.aggregator;
 /** @type {string} */
OlapFlatDataSourceOptionsMetadataCubeMeasuresDimensionMeasure.prototype.displayFolder;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function OlapFlatDataSourceOptionsMetadataCubeMeasuresDimension() {}
 /** @type {string} */
OlapFlatDataSourceOptionsMetadataCubeMeasuresDimension.prototype.name;
 /** @type {string} */
OlapFlatDataSourceOptionsMetadataCubeMeasuresDimension.prototype.caption;
 /** @type {!Array<!OlapFlatDataSourceOptionsMetadataCubeMeasuresDimensionMeasure>} */
OlapFlatDataSourceOptionsMetadataCubeMeasuresDimension.prototype.measures;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchieLevel() {}
 /** @type {string} */
OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchieLevel.prototype.name;
 /** @type {string} */
OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchieLevel.prototype.caption;
 /** @type {!Function} */
OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchieLevel.prototype.memberProvider;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchie() {}
 /** @type {string} */
OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchie.prototype.name;
 /** @type {string} */
OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchie.prototype.caption;
 /** @type {string} */
OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchie.prototype.displayFolder;
 /** @type {!Array<!OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchieLevel>} */
OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchie.prototype.levels;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function OlapFlatDataSourceOptionsMetadataCubeDimension() {}
 /** @type {string} */
OlapFlatDataSourceOptionsMetadataCubeDimension.prototype.name;
 /** @type {string} */
OlapFlatDataSourceOptionsMetadataCubeDimension.prototype.caption;
 /** @type {!Array<!OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchie>} */
OlapFlatDataSourceOptionsMetadataCubeDimension.prototype.hierarchies;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function OlapFlatDataSourceOptionsMetadataCube() {}
 /** @type {string} */
OlapFlatDataSourceOptionsMetadataCube.prototype.name;
 /** @type {string} */
OlapFlatDataSourceOptionsMetadataCube.prototype.caption;
 /** @type {!OlapFlatDataSourceOptionsMetadataCubeMeasuresDimension} */
OlapFlatDataSourceOptionsMetadataCube.prototype.measuresDimension;
 /** @type {!Array<!OlapFlatDataSourceOptionsMetadataCubeDimension>} */
OlapFlatDataSourceOptionsMetadataCube.prototype.dimensions;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function OlapFlatDataSourceOptionsMetadata() {}
 /** @type {!OlapFlatDataSourceOptionsMetadataCube} */
OlapFlatDataSourceOptionsMetadata.prototype.cube;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function OlapFlatDataSourceOptions() {}
 /** @type {?} */
OlapFlatDataSourceOptions.prototype.dataSource;
 /** @type {string} */
OlapFlatDataSourceOptions.prototype.dataSourceUrl;
 /** @type {string} */
OlapFlatDataSourceOptions.prototype.dataSourceType;
 /** @type {string} */
OlapFlatDataSourceOptions.prototype.responseDataKey;
 /** @type {string} */
OlapFlatDataSourceOptions.prototype.responseDataType;
 /** @type {string} */
OlapFlatDataSourceOptions.prototype.measures;
 /** @type {string} */
OlapFlatDataSourceOptions.prototype.filters;
 /** @type {string} */
OlapFlatDataSourceOptions.prototype.rows;
 /** @type {string} */
OlapFlatDataSourceOptions.prototype.columns;
 /** @type {!OlapFlatDataSourceOptionsMetadata} */
OlapFlatDataSourceOptions.prototype.metadata;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!OlapFlatDataSourceOptions} options
 */
Infragistics.OlapFlatDataSource = function(options) {};

/**
 * Initializes the data source and returns a promise that will be resolved once the data source is initialized.
 *             The promise's result will be the metadata tree for the catalog/cube/measureGroup specified in the settings or null if the settings do not provide a valid cube initialization data.
 *             The data source is not functional until it has been initialized and all other methods other than initialize() will throw an error if isInitialized() returns false.
 * @return {!Object}
 */
Infragistics.OlapFlatDataSource.prototype.initialize = function() {};

/**
 * Retrieves the initialization state of the data source.
 * @return {boolean}
 */
Infragistics.OlapFlatDataSource.prototype.isInitialized = function() {};

/**
 * Indicates whether the data source is modified.
 * @return {boolean}
 */
Infragistics.OlapFlatDataSource.prototype.isModified = function() {};

/**
 * Indicates whether the update() method execution is in progress.
 * @return {boolean}
 */
Infragistics.OlapFlatDataSource.prototype.isUpdating = function() {};

/**
 * Retrieves the currently loaded cubes in the data source.
 * @return {!Array<?>}
 */
Infragistics.OlapFlatDataSource.prototype.cubes = function() {};

/**
 * Retrieves the current cube in the data source.
 * @return {!Object}
 */
Infragistics.OlapFlatDataSource.prototype.cube = function() {};

/**
 * Sets the current cube for the data source and updates the cube(), measureGroup() and metadataTree() properties.
 * 
 * @param {string} cubeName the name of the cube.
 * @return {!Object}
 */
Infragistics.OlapFlatDataSource.prototype.setCube = function(cubeName) {};

/**
 * Returns the fully loaded metadata tree.
 * @return {!Object}
 */
Infragistics.OlapFlatDataSource.prototype.metadataTree = function() {};

/**
 * Adds a hierarchy to the rows of the pivot grid.
 * 
 * @param {!Object} rowItem An object of type $.ig.Hierarchy which is the hierarchy to add in the pivot grid rows.
 * @return {void}
 */
Infragistics.OlapFlatDataSource.prototype.addRowItem = function(rowItem) {};

/**
 * Removes a hierarchy or the measure list from the rows of the pivot grid.
 * 
 * @param {!Object} rowItem an object of type $.ig.Hierarchy or $.ig.MeasureList which is the hierarchy to remove or the measure list if there are more than one measures added and the measure list location is set to "rows".
 * @return {void}
 */
Infragistics.OlapFlatDataSource.prototype.removeRowItem = function(rowItem) {};

/**
 * Adds a hierarchy to the columns of the pivot grid.
 * 
 * @param {!Object} columnItem an object of type $.ig.Hierarchy which is the hierarchy to add in the pivot grid columns.
 * @return {void}
 */
Infragistics.OlapFlatDataSource.prototype.addColumnItem = function(columnItem) {};

/**
 * Removes a hierarchy or the measure list from the columns of the pivot grid.
 * 
 * @param {!Object} columnItem an object of type $.ig.Hierarchy or $.ig.MeasureList which is the hierarchy to remove or the measure list if there are more than one measures added and the measure list location is set to "columns".
 * @return {void}
 */
Infragistics.OlapFlatDataSource.prototype.removeColumnItem = function(columnItem) {};

/**
 * Adds a hierarchy to the filter axis of the pivot grid.
 * 
 * @param {!Object} filterItem an object of type $.ig.Hierarchy which is the hierarchy to add.
 * @return {void}
 */
Infragistics.OlapFlatDataSource.prototype.addFilterItem = function(filterItem) {};

/**
 * Removes a hierarchy from the filter axis of the pivot grid.
 * 
 * @param {!Object} filterItem an object of type $.ig.Hierarchy which is the hierarchy to remove.
 * @return {void}
 */
Infragistics.OlapFlatDataSource.prototype.removeFilterItem = function(filterItem) {};

/**
 * Adds a measure to the measures of the pivot grid.
 * 
 * @param {!Object} measureItem an object of type $.ig.Measure which is the measure to add.
 * @return {void}
 */
Infragistics.OlapFlatDataSource.prototype.addMeasureItem = function(measureItem) {};

/**
 * Removes a measure from the measures of the pivot grid.
 * 
 * @param {!Object} measureItem An object of type $.ig.Measure which is the measure to remove.
 * @return {void}
 */
Infragistics.OlapFlatDataSource.prototype.removeMeasureItem = function(measureItem) {};

/**
 * Sets the index at which the measure list will be positioned in the rows/columns it resides.
 * 
 * @param {number} index the index where measure list to appear.
 * @return {void}
 */
Infragistics.OlapFlatDataSource.prototype.setMeasureListIndex = function(index) {};

/**
 * Sets the location of the measure list.
 * 
 * @param {!Object} location accepted values are 'rows' and 'columns'.
 * @return {void}
 */
Infragistics.OlapFlatDataSource.prototype.setMeasureListLocation = function(location) {};

/**
 * Sets a tuple member to be expanded next time the update() method is called.
 *             Calling this method on an already expanded member does nothing.
 * 
 * @param {string} axisName the name of the axis for the tuple.
 * @param {number} tupleIndex the index of the tuple in the axis.
 * @param {number} memberIndex the index of the member in the tuple.
 * @return {void}
 */
Infragistics.OlapFlatDataSource.prototype.expandTupleMember = function(axisName, tupleIndex, memberIndex) {};

/**
 * Sets a tuple member to be collapsed next time the update() method is called.
 *             Calling this method on an already collapsed member does nothing.
 * 
 * @param {string} axisName the name of the axis for the tuple.
 * @param {number} tupleIndex the index of the tuple in the axis.
 * @param {number} memberIndex the index of the member in the tuple.
 * @return {void}
 */
Infragistics.OlapFlatDataSource.prototype.collapseTupleMember = function(axisName, tupleIndex, memberIndex) {};

/**
 * Returns the items in the row axis.
 * @return {!Array<?>}
 */
Infragistics.OlapFlatDataSource.prototype.rowAxis = function() {};

/**
 * Returns the items in the column axis.
 * @return {!Array<?>}
 */
Infragistics.OlapFlatDataSource.prototype.columnAxis = function() {};

/**
 * Returns the items in the filter axis.
 * @return {!Array<?>}
 */
Infragistics.OlapFlatDataSource.prototype.filters = function() {};

/**
 * Returns the items in the measures axis.
 * @return {!Array<?>}
 */
Infragistics.OlapFlatDataSource.prototype.measures = function() {};

/**
 * Returns the result from the last update or null if the last update was unsuccessful.
 * @return {!Object}
 */
Infragistics.OlapFlatDataSource.prototype.result = function() {};

/**
 * Clears all pending changes since last time the update() method is called.
 * @return {void}
 */
Infragistics.OlapFlatDataSource.prototype.clearPendingChanges = function() {};

/**
 * Performs an update with the list of pending changes and updates the data source result.
 * @return {!Object}
 */
Infragistics.OlapFlatDataSource.prototype.update = function() {};

/**
 * Gets the first element of the specified elementType which matches the specified predicate or null if there is no such element found.
 * 
 * @param {!Function} predicate a predicate callback invoked against each core element of the specified type. It has to return true when the element has matched the serach criteria, otherwise - false.
 * @param {!Object} elementType an object specified by $.ig.ICoreOlapElement.prototype.$type property. Valid types which prototype can be examined are: $.ig.Dimension, $.ig.Hierarchy, $.ig.Level, $.ig.Measure and $.ig.MeasureList.
 * @return {!Object}
 */
Infragistics.OlapFlatDataSource.prototype.getCoreElement = function(predicate, elementType) {};

/**
 * Gets an array with elements of the specified elementType which match the specified predicate or empty array if there is no such element found.
 * 
 * @param {!Function} predicate a predicate callback invoked against each core element of the specified type. It has to return true when the element has matched the serach criteria, otherwise - false.
 * @param {!Object} elementType an object specified by $.ig.ICoreOlapElement.prototype.$type property. Valid types which prototype can be examined are: $.ig.Dimension, $.ig.Hierarchy, $.ig.Level, $.ig.Measure and $.ig.MeasureList.
 * @return {!Object}
 */
Infragistics.OlapFlatDataSource.prototype.getCoreElements = function(predicate, elementType) {};

/**
 * Returns $.ig.Dimension object for the specified unique name.
 * 
 * @param {string} dimensionUniqueName the unique name of the searched dimension object.
 * @return {!Object}
 */
Infragistics.OlapFlatDataSource.prototype.getDimension = function(dimensionUniqueName) {};

/**
 * Returns $.ig.Hierarchy object for the specified unique name.
 * 
 * @param {string} hierarchyUniqueName the unique name of the searched hierarchy object.
 * @return {!Object}
 */
Infragistics.OlapFlatDataSource.prototype.getHierarchy = function(hierarchyUniqueName) {};

/**
 * Returns $.ig.Level object for the specified unique name.
 * 
 * @param {string} levelUniqueName the unique name of the searched level object.
 * @return {!Object}
 */
Infragistics.OlapFlatDataSource.prototype.getLevel = function(levelUniqueName) {};

/**
 * Returns $.ig.Measure object for the specified unique name.
 * 
 * @param {string} measureUniqueName the unique name of the searched measure object.
 * @return {!Object}
 */
Infragistics.OlapFlatDataSource.prototype.getMeasure = function(measureUniqueName) {};

/**
 * Returns $.ig.MeasureList object available when operates with more than one $.ig.Measure object.
 * @return {!Object}
 */
Infragistics.OlapFlatDataSource.prototype.getMeasureList = function() {};

/**
 * Returns an array of strings with the unique names of selected for given hierarchy filter members.
 * 
 * @param {string} hierarchyUniqueName the unique name of the hierarchy whose active filter members are returned.
 * @return {!Array<?>}
 */
Infragistics.OlapFlatDataSource.prototype.getFilterMemberNames = function(hierarchyUniqueName) {};

/**
 * Adds a member to list of filter members that will be present in result.
 *             If a member of given hierarchy is added to this filter list then only those members which are present in this filter list will be present for that hierarchy in the result.
 * 
 * @param {string} hierarchyUniqueName the unique name of the hierarchy this member belongs to.
 * @param {string} memberUniqueName the unique name of the member to be added.
 * @return {void}
 */
Infragistics.OlapFlatDataSource.prototype.addFilterMember = function(hierarchyUniqueName, memberUniqueName) {};

/**
 * Removes a member from the list of filter members that will be present in result.
 * 
 * @param {string} hierarchyUniqueName the unique name of the hierarchy this member belongs to.
 * @param {string} memberUniqueName the unique name of the member to be removed.
 * @return {void}
 */
Infragistics.OlapFlatDataSource.prototype.removeFilterMember = function(hierarchyUniqueName, memberUniqueName) {};

/**
 * Removes all members from the list of filter members and the filter for the specified hierarchy is cleared.
 * 
 * @param {string} hierarchyUniqueName the unique name of the hierarchy which filter members to be cleared.
 * @return {void}
 */
Infragistics.OlapFlatDataSource.prototype.removeAllFilterMembers = function(hierarchyUniqueName) {};

/**
 * Returns Promise which on completion provides an array of $.ig.OlapResultAxisMember objects of selected for given level filter member.
 * 
 * @param {string} levelUniqueName the unique name of the level whose active filter members are returned.
 * @return {void}
 */
Infragistics.OlapFlatDataSource.prototype.getMembersOfLevel = function(levelUniqueName) {};

/**
 * Returns Promise which on completion provides an array of $.ig.OlapResultAxisMember objects of selected for given hierarchy filter member.
 * 
 * @param {string} hierarchyUniqueName the unique name of the hierarchy whose active filter members are returned.
 * @return {void}
 */
Infragistics.OlapFlatDataSource.prototype.getMembersOfHierarchy = function(hierarchyUniqueName) {};

/**
 * Returns Promise which on completion provides an array of $.ig.OlapResultAxisMember objects that are children of the current member.
 * 
 * @param {string} memberUniqueName the unique name of the member whose active filter members are returned.
 * @return {void}
 */
Infragistics.OlapFlatDataSource.prototype.getMembersOfMember = function(memberUniqueName) {};
 /** @type {?} */
IgniteUIStatic.prototype.OlapFlatDataSource;
/**
 * @constructor
 * @struct
 */
Infragistics.OlapMetadataTreeItem = function() {};

/**
 * Returns the OLAP metadata item that this tree item represents which is an object of type $.ig.Cube, $.ig.Dimension, $.ig.Hierarchy, $.ig.Measure, $.ig.Level.
 * @return {!Object}
 */
Infragistics.OlapMetadataTreeItem.prototype.item = function() {};

/**
 * Returns the metadata tree item type which is a value from the $.ig.MetadataTreeItemType enumeration.
 * 
 *             $.ig.MetadataTreeItemType.prototype.cube = 0;
 *             Item type for the cube tree items. Contain an item() of type $.ig.Cube.
 * 
 *             $.ig.MetadataTreeItemType.prototype.dimension = 1;
 *             Item type for the dimension tree items. Contain an item() of type $.ig.Dimension.
 * 
 *             $.ig.MetadataTreeItemType.prototype.group = 2;
 *             Item type for the group tree items. Does not have item().
 * 
 *             $.ig.MetadataTreeItemType.prototype.userDefinedHierarchy = 3;
 *             Item type for the userDefinedHierarchy tree items. Contain an item() of type $.ig.Hierarchy.
 * 
 *             $.ig.MetadataTreeItemType.prototype.systemEnabledHierarchy = 4;
 *             Item type for the systemEnabledHierarchy tree items. Contain an item() of type $.ig.Hierarchy.
 * 
 *             $.ig.MetadataTreeItemType.prototype.parentChildHierarchy = 5;
 *             Item type for the parentChildHierarchy tree items. Contain an item() of type $.ig.Hierarchy.
 * 
 *             $.ig.MetadataTreeItemType.prototype.measure = 6;
 *             Item type for the measure tree items. Contain an item() of type $.ig.Measure.
 * 
 *             $.ig.MetadataTreeItemType.prototype.level1 = 7;
 *             Item type for the level1 tree items. Contain an item() of type $.ig.Level.
 * 
 *             $.ig.MetadataTreeItemType.prototype.level2 = 8;
 *             Item type for the level2 tree items. Contain an item() of type $.ig.Level.
 * 
 *             $.ig.MetadataTreeItemType.prototype.level3 = 9;
 *             Item type for the level3 tree items. Contain an item() of type $.ig.Level.
 * 
 *             $.ig.MetadataTreeItemType.prototype.level4 = 10;
 *             Item type for the level4 tree items. Contain an item() of type $.ig.Level.
 * 
 *             $.ig.MetadataTreeItemType.prototype.level5 = 11;
 *             Item type for the level5 tree items. Contain an item() of type $.ig.Level.
 * @return {number}
 */
Infragistics.OlapMetadataTreeItem.prototype.type = function() {};

/**
 * Returns the caption text that should be displayed for this tree item.
 * @return {string}
 */
Infragistics.OlapMetadataTreeItem.prototype.caption = function() {};

/**
 * Returns the children ot this tree item.
 * @return {!Object}
 */
Infragistics.OlapMetadataTreeItem.prototype.children = function() {};
/**
 * @record
 * @struct
 */
function OlapResultViewOptions() {}
 /** @type {?} */
OlapResultViewOptions.prototype.result;
 /** @type {?} */
OlapResultViewOptions.prototype.visibleResult;
 /** @type {boolean} */
OlapResultViewOptions.prototype.hasColumns;
 /** @type {boolean} */
OlapResultViewOptions.prototype.hasRows;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!OlapResultViewOptions} options
 */
Infragistics.OlapResultView = function(options) {};

/**
 * Creates a new $.ig.OlapResultView object with result object having the same structure as the original one and new visibleResult where the tuples which appear as children under specified tuple and member index are no longer present.
 * 
 * @param {!Object} axisName
 * @param {!Object} tupleIndex
 * @param {!Object} memberIndex
 * @return {!Object}
 */
Infragistics.OlapResultView.prototype.collapseTupleMember = function(axisName, tupleIndex, memberIndex) {};

/**
 * Creates a $.ig.OlapResultView view object with result object having the same structure as the original one and new visibleResult where the tuples which appear as children under specified tuple and member index are accessible as part of the visibleResult.
 * 
 * @param {!Object} axisName
 * @param {!Object} tupleIndex
 * @param {!Object} memberIndex
 * @return {!Object}
 */
Infragistics.OlapResultView.prototype.expandTupleMember = function(axisName, tupleIndex, memberIndex) {};

/**
 * Creates a new $.ig.OlapResultView object as the axis specified by axisName of the original result object is extended with the tuples of the same axis found into supplied partialResult object.
 * 
 * @param {!Object} partialResult
 * @param {!Object} axisName
 * @return {!Object}
 */
Infragistics.OlapResultView.prototype.extend = function(partialResult, axisName) {};
 /** @type {?} */
IgniteUIStatic.prototype.OlapResultView;
/**
 * @record
 * @struct
 */
function OlapTableViewOptionsViewSettings() {}
 /** @type {boolean} */
OlapTableViewOptionsViewSettings.prototype.isParentInFrontForColumns;
 /** @type {boolean} */
OlapTableViewOptionsViewSettings.prototype.isParentInFrontForRows;
 /** @type {boolean} */
OlapTableViewOptionsViewSettings.prototype.compactColumnHeaders;
 /** @type {boolean} */
OlapTableViewOptionsViewSettings.prototype.compactRowHeaders;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function OlapTableViewOptions() {}
 /** @type {?} */
OlapTableViewOptions.prototype.result;
 /** @type {boolean} */
OlapTableViewOptions.prototype.hasColumns;
 /** @type {boolean} */
OlapTableViewOptions.prototype.hasRows;
 /** @type {!OlapTableViewOptionsViewSettings} */
OlapTableViewOptions.prototype.viewSettings;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!OlapTableViewOptions} options
 */
Infragistics.OlapTableView = function(options) {};

/**
 * Initializes the table view object as its rowHeaders, columnHeaders and resultCells are created for the result object the table view is related to.
 *             Applies the items from the columnSortDirections and levelDortDirections to produce the sorted result.
 * @return {void}
 */
Infragistics.OlapTableView.prototype.initialize = function() {};

/**
 * Returns the configuration object this table view is created with.
 * @return {!Object}
 */
Infragistics.OlapTableView.prototype.viewSettings = function() {};

/**
 * Gets or sets the column sort direction items, which will be applied when the $.ig.OlapTableView is initialized.
 *             - tupleIndex (number): specifies the index of the tuple, which corresponds to a column in the column axis.
 *             - sortDirection (string: ascending|descending): indicates the sort direction for the column. The allowed values are 'ascending' (default) and 'descending'.
 *             - comparer (function): an optional function, which will be used to compare the cells from the column. The function should return a number:
 *             1. If Cell1 <  Cell2, return a value lower than 0.
 *             2. If Cell1 == Cell2, return 0.
 *             3. If Cell1 > Cell2, return a value greater than 0.
 * 
 * @param {!Array<?>=} columnSortDirections an array of objects, which have the following properties:
 * @return {!Array<?>}
 */
Infragistics.OlapTableView.prototype.columnSortDirections = function(columnSortDirections) {};

/**
 * Returns the column sort direction items, which were applied during the $.ig.OlapTableView initialization.
 * @return {!Array<?>}
 */
Infragistics.OlapTableView.prototype.appliedColumnSortDirections = function() {};

/**
 * Gets or sets the level sort direction items, which will be applied when the $.ig.OlapTableView is
 *             - levelUniqueName (string): the name of the level to be sorted.
 *             - sortDirection (string: ascending|descending): indicates the sort direction for the level. The allowed values are 'ascending' (default) and 'descending'.
 *             - sortBehavior (string: alphabetical|system): indicates the type of sorting to be applied. The allowed values are 'alphabetical' (default) and 'system'.
 * 
 * @param {!Array<?>=} levelSortDirections an array of objects, which have the following properties:
 * @return {!Array<?>}
 */
Infragistics.OlapTableView.prototype.levelSortDirections = function(levelSortDirections) {};

/**
 * Returns the level sort direction items, which were applied during the $.ig.OlapTableView initialization.
 * @return {!Array<?>}
 */
Infragistics.OlapTableView.prototype.appliedLevelSortDirections = function() {};

/**
 * Returns a javascript object, which maps the applied level sort directions to the axis name, hierarchy index in the axis and the level depth.
 *             It is used internally to determine, which $.ig.OlapTableViewHeaderCell needs to display a sorting indicator in the user interface.
 * @return {!Object}
 */
Infragistics.OlapTableView.prototype.appliedSortDirectionsMap = function() {};

/**
 * Returns the table row headers.
 * @return {!Array<?>}
 */
Infragistics.OlapTableView.prototype.rowHeaders = function() {};

/**
 * Returns the table column headers.
 * @return {!Array<?>}
 */
Infragistics.OlapTableView.prototype.columnHeaders = function() {};

/**
 * Returns the table result cells ordered as if the grid is iterated row by row.
 * @return {!Array<?>}
 */
Infragistics.OlapTableView.prototype.resultCells = function() {};

/**
 * Returns the sorted $.ig.OlapResult object.
 * @return {!Object}
 */
Infragistics.OlapTableView.prototype.result = function() {};
 /** @type {?} */
IgniteUIStatic.prototype.OlapTableView;
/**
 * @constructor
 * @struct
 */
Infragistics.OlapTableViewHeaderCell = function() {};

/**
 * Returns the caption for the header cell.
 * @return {string}
 */
Infragistics.OlapTableViewHeaderCell.prototype.caption = function() {};

/**
 * Returns the expaned state for the header cell.
 * @return {boolean}
 */
Infragistics.OlapTableViewHeaderCell.prototype.isExpanded = function() {};

/**
 * Indicates whether the header cell can be expanded.
 * @return {boolean}
 */
Infragistics.OlapTableViewHeaderCell.prototype.isExpanable = function() {};

/**
 * Returns the row index for the header cell.
 * @return {number}
 */
Infragistics.OlapTableViewHeaderCell.prototype.rowIndex = function() {};

/**
 * Returns the row span for the header cell.
 * @return {number}
 */
Infragistics.OlapTableViewHeaderCell.prototype.rowSpan = function() {};

/**
 * Returns the column index for the header cell.
 * @return {number}
 */
Infragistics.OlapTableViewHeaderCell.prototype.columnIndex = function() {};

/**
 * Returns the column span for the header cell.
 * @return {number}
 */
Infragistics.OlapTableViewHeaderCell.prototype.columnSpan = function() {};

/**
 * Returns the name of the axis this header cell is related to.
 * @return {string}
 */
Infragistics.OlapTableViewHeaderCell.prototype.axisName = function() {};

/**
 * Returns the index of tuple in the axis this header cell is related to.
 * @return {number}
 */
Infragistics.OlapTableViewHeaderCell.prototype.tupleIndex = function() {};

/**
 * Returns the index of the axis member in the tuple this header cell is related to.
 * @return {number}
 */
Infragistics.OlapTableViewHeaderCell.prototype.memberIndex = function() {};
/**
 * @constructor
 * @struct
 */
Infragistics.OlapTableViewResultCell = function() {};

/**
 * Returns the value provided by $.ig.Cell object.
 * @return {!Object}
 */
Infragistics.OlapTableViewResultCell.prototype.value = function() {};

/**
 * Returns the formmated value to be displayed by the data cell.
 * @return {string}
 */
Infragistics.OlapTableViewResultCell.prototype.formattedValue = function() {};

/**
 * Returns the ordinal of this cell used to determine its position into the data cells' grid.
 * @return {number}
 */
Infragistics.OlapTableViewResultCell.prototype.cellOrdinal = function() {};

/**
 * Returns the index of $.ig.Cell object in $.ig.OlapResult object.
 * @return {number}
 */
Infragistics.OlapTableViewResultCell.prototype.resultCellIndex = function() {};
/**
 * @constructor
 * @struct
 */
Infragistics.Catalog = function() {};

/**
 * Returns the name of the catalog.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Catalog.prototype.name = function(value) {};

/**
 * Returns the unique name of the catalog.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Catalog.prototype.uniqueName = function(value) {};

/**
 * Returns the caption of the catalog used when displaying the name of the catalog to the user.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Catalog.prototype.caption = function(value) {};

/**
 * Returns the description of the catalog which is a human-readable description of the catalog
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Catalog.prototype.description = function(value) {};
/**
 * @constructor
 * @struct
 */
Infragistics.Cube = function() {};

/**
 * Returns the name of the cube.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Cube.prototype.name = function(value) {};

/**
 * Returns the unique name of the cube.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Cube.prototype.uniqueName = function(value) {};

/**
 * Returns the caption of the cube used when displaying the name of the cube to the user.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Cube.prototype.caption = function(value) {};

/**
 * Returns a user-friendly description of the cube.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Cube.prototype.description = function(value) {};

/**
 * Returns the type of the cube which is a value from the $.ig.CubeType enumeration.
 * 
 *             $.ig.CubeType.prototype.cube = 0;
 *             $.ig.CubeType.prototype.dimension = 1;
 *             $.ig.CubeType.prototype.unknown = 2;
 * 
 * @param {!Object} value
 * @return {number}
 */
Infragistics.Cube.prototype.cubeType = function(value) {};

/**
 * Returns the date and time on which the cube was last processed.
 * 
 * @param {!Object} value
 * @return {!Object}
 */
Infragistics.Cube.prototype.lastProcessed = function(value) {};

/**
 * Returns the date and time on which the cube was last updated.
 * 
 * @param {!Object} value
 * @return {!Object}
 */
Infragistics.Cube.prototype.lastUpdated = function(value) {};
/**
 * @constructor
 * @struct
 */
Infragistics.Dimension = function() {};

/**
 * Returns the name of the dimension.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Dimension.prototype.name = function(value) {};

/**
 * Returns the unique name of the dimension.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Dimension.prototype.uniqueName = function(value) {};

/**
 * Returns the caption of the dimension used when displaying the name of the dimension to the user.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Dimension.prototype.caption = function(value) {};

/**
 * Returns a user-friendly description of the dimension.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Dimension.prototype.description = function(value) {};

/**
 * Returns the type of the dimension which is a value from the $.ig.DimensionType enumeration.
 * 
 *             $.ig.DimensionType.prototype.unknown = 0;
 *             $.ig.DimensionType.prototype.time = 1;
 *             $.ig.DimensionType.prototype.measure = 2;
 *             $.ig.DimensionType.prototype.other = 3;
 *             $.ig.DimensionType.prototype.quantitative = 5;
 *             $.ig.DimensionType.prototype.accounts = 6;
 *             $.ig.DimensionType.prototype.customers = 7;
 *             $.ig.DimensionType.prototype.products = 8;
 *             $.ig.DimensionType.prototype.scenario = 9;
 *             $.ig.DimensionType.prototype.utility = 10;
 *             $.ig.DimensionType.prototype.currency = 11;
 *             $.ig.DimensionType.prototype.rates = 12;
 *             $.ig.DimensionType.prototype.channel = 13;
 *             $.ig.DimensionType.prototype.promotion = 14;
 *             $.ig.DimensionType.prototype.organization = 15;
 *             $.ig.DimensionType.prototype.billOfMaterials = 16;
 *             $.ig.DimensionType.prototype.geography = 17;
 * 
 * @param {!Object} value
 * @return {number}
 */
Infragistics.Dimension.prototype.dimensionType = function(value) {};
/**
 * @constructor
 * @struct
 */
Infragistics.Hierarchy = function() {};

/**
 * Returns the name of the hierarchy.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Hierarchy.prototype.name = function(value) {};

/**
 * Returns the unique name of the hierarchy.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Hierarchy.prototype.uniqueName = function(value) {};

/**
 * Returns the caption of the hierarchy used when displaying the name of the hierarchy to the user.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Hierarchy.prototype.caption = function(value) {};

/**
 * Returns a user-friendly description of the hierarchy.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Hierarchy.prototype.description = function(value) {};

/**
 * Returns the unique name of the default member for the hierarchy.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Hierarchy.prototype.defaultMember = function(value) {};

/**
 * Returns the unique name of the 'All' member for the hierarchy.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Hierarchy.prototype.allMember = function(value) {};

/**
 * Returns the unique name of the dimension that contains the hierarchy.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Hierarchy.prototype.dimensionUniqueName = function(value) {};

/**
 * Returns the source of the hierarchy which is a value from the $.ig.HierarchyOrigin enumeration.
 * 
 *             $.ig.HierarchyOrigin.prototype.userDefined = 1;
 *             Identifies user defined hierarchies.
 * 
 *             $.ig.HierarchyOrigin.prototype.systemEnabled = 2;
 *             Identifies attribute hierarchies.
 * 
 *             $.ig.HierarchyOrigin.prototype.systemInternal = 4;
 *             Identifies attributes with no attribute .
 * 
 * @param {!Object} value
 * @return {number}
 */
Infragistics.Hierarchy.prototype.hierarchyOrigin = function(value) {};

/**
 * Returns the hierarchy display folder path to be used when displaying the hierarchy in the user interface.
 *             Folder names will be separated by a semicolon (;). Nested folders are indicated by a backslash (\).
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Hierarchy.prototype.hierarchyDisplayFolder = function(value) {};
/**
 * @constructor
 * @struct
 */
Infragistics.Measure = function() {};

/**
 * Returns the name of the measure.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Measure.prototype.name = function(value) {};

/**
 * Returns the unique name of the measure.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Measure.prototype.uniqueName = function(value) {};

/**
 * Returns the caption of the measure used when displaying the name of the measure to the user.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Measure.prototype.caption = function(value) {};

/**
 * Returns a user-friendly description of the measure.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Measure.prototype.description = function(value) {};

/**
 * Returns the name of the measure group this measure belongs to.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Measure.prototype.measureGroupName = function(value) {};

/**
 * Returns the aggregator type that identifies how a measure was derived. It is a value from the $.ig.AggregatorType enumeration.
 * 
 *             $.ig.AggregatorType.prototype.unknown = 0;
 *             The aggregated function is undefined.
 * 
 *             $.ig.AggregatorType.prototype.sum = 1;
 *             The aggregated function adds all values.
 * 
 *             $.ig.AggregatorType.prototype.count = 2;
 *             The aggregated function will count the number of the values.
 * 
 *             $.ig.AggregatorType.prototype.min = 3;
 *             The aggregated function will returns the smallest value.
 * 
 *             $.ig.AggregatorType.prototype.max = 4;
 *             The aggregated function will returns the largest value.
 * 
 *             $.ig.AggregatorType.prototype.average = 5;
 *             The aggregated function will returns the average of cells value.
 * 
 *             $.ig.AggregatorType.prototype.variance = 6;
 *             The aggregated function will estimates variance based on the sample.
 * 
 *             $.ig.AggregatorType.prototype.std = 7;
 *             The aggregated function will estimates the standart deviation based on sample.
 * 
 *             $.ig.AggregatorType.prototype.distinctCount = 8;
 *             The aggregated function will returns the number of distinct, nonempty tuples in a set.
 * 
 *             $.ig.AggregatorType.prototype.none = 9;
 *             No aggregation performed.
 * 
 *             $.ig.AggregatorType.prototype.averageOfChildren = 10;
 *             The aggregated function will returns the average of the measure's children.
 * 
 *             $.ig.AggregatorType.prototype.firstNonEmpty = 13;
 *             The aggregated function will returns the measure's first nonempty member.
 * 
 *             $.ig.AggregatorType.prototype.lastNonEmpty = 14;
 *             The aggregated function will returns the measure's last nonempty member.
 * 
 *             $.ig.AggregatorType.prototype.byAccount = 15;
 *             Aggregated by the aggregation function associated with the specified account type of an attribute in an account dimension.
 * 
 *             $.ig.AggregatorType.prototype.calculated = 127;
 *             The aggregated function will returns the result derived from a formula.
 * 
 * @param {!Object} value
 * @return {number}
 */
Infragistics.Measure.prototype.aggregatorType = function(value) {};

/**
 * Returns the default format string for the measure.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Measure.prototype.defaultFormatString = function(value) {};

/**
 * Returns the measure display folder path to be used when displaying the measure in the user interface.
 *             Folder names will be separated by a semicolon (;). Nested folders are indicated by a backslash (\).
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Measure.prototype.measureDisplayFolder = function(value) {};
/**
 * @constructor
 * @struct
 */
Infragistics.Level = function() {};

/**
 * Returns the name of the level.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Level.prototype.name = function(value) {};

/**
 * Returns the unique name of the level.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Level.prototype.uniqueName = function(value) {};

/**
 * Returns the caption of the level used when displaying the name of the level to the user.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Level.prototype.caption = function(value) {};

/**
 * Returns a user-friendly description of the level.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Level.prototype.description = function(value) {};

/**
 * Returns the distance of the level from the root of the level. Root level is zero (0)
 * 
 * @param {!Object} value
 * @return {number}
 */
Infragistics.Level.prototype.depth = function(value) {};

/**
 * Returns the unique name of the hierarchy that contains the level.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Level.prototype.hierarchyUniqueName = function(value) {};

/**
 * Returns the unique name of the dimension that contains the level.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.Level.prototype.dimensionUniqueName = function(value) {};

/**
 * Returns the count of all members in the level.
 * 
 * @param {!Object} value
 * @return {number}
 */
Infragistics.Level.prototype.membersCount = function(value) {};

/**
 * Returns a value that defines how the level was sourced.
 * 
 * @param {!Object} value
 * @return {number}
 */
Infragistics.Level.prototype.levelOrigin = function(value) {};

/**
 * Returns the ID of the attribute that the level is sorted on.
 * 
 * @param {!Object} value
 * @return {number}
 */
Infragistics.Level.prototype.levelOrderingProperty = function(value) {};
/**
 * @constructor
 * @struct
 */
Infragistics.MeasureGroup = function() {};

/**
 * Returns the name of the measure group.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.MeasureGroup.prototype.name = function(value) {};

/**
 * Returns the caption of the measure group used when displaying the name of the measure group to the user.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.MeasureGroup.prototype.caption = function(value) {};

/**
 * Returns a user-friendly description of the measure group.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.MeasureGroup.prototype.description = function(value) {};

/**
 * Returns the name of the catalog to which this measure group belongs.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.MeasureGroup.prototype.catalogName = function(value) {};

/**
 * Returns the name of the cube to which this measure group belongs
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.MeasureGroup.prototype.cubeName = function(value) {};
/**
 * @constructor
 * @struct
 */
Infragistics.MeasureList = function() {};

/**
 * Returns the caption of the measure list used when displaying the name of the measure list to the user.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.MeasureList.prototype.caption = function(value) {};

/**
 * Returns an array of $.ig.Measure objects this measure list is grouping.
 * 
 * @param {!Object} value
 * @return {!Array<?>}
 */
Infragistics.MeasureList.prototype.measures = function(value) {};
/**
 * @constructor
 * @struct
 */
Infragistics.OlapResult = function() {};

/**
 * Returns a value indicating whether the result object contains any data.
 * 
 * @param {!Object} value
 * @return {boolean}
 */
Infragistics.OlapResult.prototype.isEmpty = function(value) {};

/**
 * Returns an array of $.ig.OlapResultAxis objects this result is built on.
 * 
 * @param {!Object} value
 * @return {!Array<?>}
 */
Infragistics.OlapResult.prototype.axes = function(value) {};

/**
 * Returns an array of $.ig.OlapResultCell objects which hold the result data.
 * 
 * @param {!Object} value
 * @return {!Array<?>}
 */
Infragistics.OlapResult.prototype.cells = function(value) {};
/**
 * @record
 * @struct
 */
function OlapResultAxisOptions() {}
 /** @type {!Array<?>} */
OlapResultAxisOptions.prototype.tuples;
 /** @type {number} */
OlapResultAxisOptions.prototype.tupleSize;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!OlapResultAxisOptions} options
 */
Infragistics.OlapResultAxis = function(options) {};

/**
 * Returns an array of $.ig.OlapResultTuple objects which form the axis.
 * @return {!Array<?>}
 */
Infragistics.OlapResultAxis.prototype.tuples = function() {};

/**
 * Returns the count of the $.ig.OlapResultAxisMember objects of each tuple.
 * @return {number}
 */
Infragistics.OlapResultAxis.prototype.tupleSize = function() {};
 /** @type {?} */
IgniteUIStatic.prototype.OlapResultAxis;
/**
 * @record
 * @struct
 */
function OlapResultTupleOptions() {}
 /** @type {!Array<?>} */
OlapResultTupleOptions.prototype.members;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!OlapResultTupleOptions} options
 */
Infragistics.OlapResultTuple = function(options) {};

/**
 * Returns an array of $.ig.OlapResultTuple objects which form the axis.
 * @return {!Array<?>}
 */
Infragistics.OlapResultTuple.prototype.members = function() {};
 /** @type {?} */
IgniteUIStatic.prototype.OlapResultTuple;
/**
 * @constructor
 * @struct
 */
Infragistics.OlapResultAxisMember = function() {};

/**
 * Returns the unique name of the axis member.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.OlapResultAxisMember.prototype.uniqueName = function(value) {};

/**
 * Returns the caption of the axis member used when displaying the name of the axis member to the user.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.OlapResultAxisMember.prototype.caption = function(value) {};

/**
 * Returns the unique name of the level this member belongs to.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.OlapResultAxisMember.prototype.levelUniqueName = function(value) {};

/**
 * Returns the unique name of the hierarchy that contains the level.
 * 
 * @param {!Object} value
 * @return {string}
 */
Infragistics.OlapResultAxisMember.prototype.hierarchyUniqueName = function(value) {};

/**
 * Returns the distance of member parent level from the root of the level. Root level is zero (0)
 * 
 * @param {!Object} value
 * @return {number}
 */
Infragistics.OlapResultAxisMember.prototype.levelNumber = function(value) {};

/**
 * A bitmap of the information projected by childCount, drilledDown and parentSameAsPrev properties.
 * 
 * @param {!Object} value
 * @return {number}
 */
Infragistics.OlapResultAxisMember.prototype.displayInfo = function(value) {};

/**
 * Returns the count of children members this member has.
 * 
 * @param {!Object} value
 * @return {number}
 */
Infragistics.OlapResultAxisMember.prototype.childCount = function(value) {};

/**
 * Returns a value that indicates whether at least one child of this member appears on the axis, immediately following all occurrences of that member. This can be used by applications to display a "+" or a "-" next to the member.
 * 
 * @param {!Object} value
 * @return {boolean}
 */
Infragistics.OlapResultAxisMember.prototype.drilledDown = function(value) {};

/**
 * Returns a value that indicates whether the parent of this member is the same as the parent of the member preceding all occurrences of the current member.
 * 
 * @param {!Object} value
 * @return {boolean}
 */
Infragistics.OlapResultAxisMember.prototype.parentSameAsPrev = function(value) {};

/**
 * Returns a key value map of the members' properties. By default only 'PARENT_UNIQUE_NAME' and 'CHILDREN_CARDINALITY' properties are available.
 * 
 * @param {!Object} value
 * @return {!Object}
 */
Infragistics.OlapResultAxisMember.prototype.properties = function(value) {};
/**
 * @constructor
 * @struct
 */
Infragistics.OlapResultCell = function() {};

/**
 * Returns the position of the cell when cells are iterated row by row.
 * 
 * @param {!Object} value
 * @return {number}
 */
Infragistics.OlapResultCell.prototype.cellOrdinal = function(value) {};

/**
 * Returns a key value map of the cell's properties. Currently only 'Value' and 'FmtValue' properties are available.
 * 
 * @param {!Object} value
 * @return {!Object}
 */
Infragistics.OlapResultCell.prototype.properties = function(value) {};
/**
 * @record
 * @struct
 */
function IgTemplatingRegExp() {}

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!IgTemplatingRegExp} regExp
 */
Infragistics.igTemplating = function(regExp) {};

/**
 * Populates the given template with the provided data. If data is a function that requires arguments, the arguments need to be provided as an array following the data. tmpl(template, data[, args])
 * 
 * @param {string} template     Specifies the template string
 * @param {!Object} data     Specifies the data to be templated in the template. If function is provided, then it has to be object or array returning function, possible receiving arguments array which can be specified as the third parameter
 * @param {!Array<?>=} args     If function is provided as the second parameter, then this parameter is the arguments for the function.
 * @return {string}
 */
Infragistics.igTemplating.prototype.tmpl = function(template, data, args) {};

/**
 * @return {void}
 */
Infragistics.igTemplating.prototype.clearTmplCache = function() {};

/**
 * Encoding < > ' and "
 * 
 * @param {string} value     The string to be encoded.
 * @return {string}
 */
Infragistics.igTemplating.prototype.encode = function(value) {};
 /** @type {?} */
IgniteUIStatic.prototype.igTemplating;
/**
 * @record
 * @struct
 */
function ErrorMessageDisplayingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ErrorMessageDisplayingEventUIParam() {}
 /** @type {?} */
ErrorMessageDisplayingEventUIParam.prototype.owner;
 /** @type {?} */
ErrorMessageDisplayingEventUIParam.prototype.errorMessage;
/**
 * @record
 * @struct
 */
function DataChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DataChangedEventUIParam() {}
 /** @type {?} */
DataChangedEventUIParam.prototype.owner;
 /** @type {?} */
DataChangedEventUIParam.prototype.newData;
/**
 * @record
 * @struct
 */
function IgQRCodeBarcode() {}
 /** @type {(string|number)} */
IgQRCodeBarcode.prototype.width;
 /** @type {(string|number)} */
IgQRCodeBarcode.prototype.height;
 /** @type {string} */
IgQRCodeBarcode.prototype.backingBrush;
 /** @type {string} */
IgQRCodeBarcode.prototype.backingOutline;
 /** @type {number} */
IgQRCodeBarcode.prototype.backingStrokeThickness;
 /** @type {string} */
IgQRCodeBarcode.prototype.barBrush;
 /** @type {string} */
IgQRCodeBarcode.prototype.fontBrush;
 /** @type {string} */
IgQRCodeBarcode.prototype.font;
 /** @type {string} */
IgQRCodeBarcode.prototype.data;
 /** @type {string} */
IgQRCodeBarcode.prototype.errorMessageText;
 /** @type {string} */
IgQRCodeBarcode.prototype.stretch;
 /** @type {string} */
IgQRCodeBarcode.prototype.barsFillMode;
 /** @type {number} */
IgQRCodeBarcode.prototype.widthToHeightRatio;
 /** @type {number} */
IgQRCodeBarcode.prototype.xDimension;
 /** @type {string} */
IgQRCodeBarcode.prototype.errorCorrectionLevel;
 /** @type {string} */
IgQRCodeBarcode.prototype.sizeVersion;
 /** @type {string} */
IgQRCodeBarcode.prototype.encodingMode;
 /** @type {number} */
IgQRCodeBarcode.prototype.eciNumber;
 /** @type {string} */
IgQRCodeBarcode.prototype.eciHeaderDisplayMode;
 /** @type {string} */
IgQRCodeBarcode.prototype.fnc1Mode;
 /** @type {string} */
IgQRCodeBarcode.prototype.applicationIndicator;
 /** @type {!ErrorMessageDisplayingEvent} */
IgQRCodeBarcode.prototype.errorMessageDisplaying;
 /** @type {!DataChangedEvent} */
IgQRCodeBarcode.prototype.dataChanged;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgQRCodeBarcodeMethods() {}

/**
 * Returns information about how the barcode is rendered.
 * @return {!Object}
 */
IgQRCodeBarcodeMethods.prototype.exportVisualData = function() {};

/**
 * Causes all pending changes of the barcode e.g. by changed property values to be rendered immediately.
 * @return {void}
 */
IgQRCodeBarcodeMethods.prototype.flush = function() {};

/**
 * Destroys widget.
 * @return {void}
 */
IgQRCodeBarcodeMethods.prototype.destroy = function() {};

/**
 * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
 * @return {void}
 */
IgQRCodeBarcodeMethods.prototype.styleUpdated = function() {};
/**
 * @record
 * @struct
 */
function JQuery() {}

/**
 * @param {string} propertyName
 * @return {!IgQRCodeBarcodeMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * The width of the barcode. It can be set as a number in pixels, string (px) or percentage (%).
 * The width of the barcode. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * \@optionValue New value to be set.
 * The height of the barcode. It can be set as a number in pixels, string (px) or percentage (%).
 * The height of the barcode. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use to fill the backing of the barcode.
 * Sets the brush to use to fill the backing of the barcode.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for the outline of the backing.
 * Sets the brush to use for the outline of the backing.
 * 
 * \@optionValue New value to be set.
 * Gets  the stroke thickness of the backing outline.
 * Sets the stroke thickness of the backing outline.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use to fill the background of the bars.
 * Sets the brush to use to fill the background of the bars.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for the label font.
 * Sets the brush to use for the label font.
 * 
 * \@optionValue New value to be set.
 * Gets  the font of the text displayed by the control.
 * Sets the font of the text displayed by the control.
 * 
 * \@optionValue New value to be set.
 * Gets  the data value.
 * Sets the data value.
 * 
 * \@optionValue New value to be set.
 * Gets  the message text displayed when some error occurs.
 * Sets the message text displayed when some error occurs.
 * 
 * \@optionValue New value to be set.
 * Gets  the stretch.
 * Sets the stretch.
 * 
 * \@optionValue New value to be set.
 * Gets  a value which specifies how the grid fills within the barcode control dimensions.
 * Sets a value which specifies how the grid fills within the barcode control dimensions.
 * 
 * \@optionValue New value to be set.
 * Gets  the width (XDimension) to height (YDimension) ratio. It accepts only positive values. This property does not apply for the QR barcode.
 * Sets the width (XDimension) to height (YDimension) ratio. It accepts only positive values. This property does not apply for the QR barcode.
 * 
 * \@optionValue New value to be set.
 * Gets  the X-dimension (narrow element width) for a symbol in mm. It accepts values from 0.01 to 100.
 * Sets the X-dimension (narrow element width) for a symbol in mm. It accepts values from 0.01 to 100.
 * 
 * \@optionValue New value to be set.
 * Gets  the error correction level of the QR Code symbol.
 * Sets the error correction level of the QR Code symbol.
 * 
 * \@optionValue New value to be set.
 * Gets  the size version of the QR Code symbol.
 * Sets the size version of the QR Code symbol.
 * 
 * \@optionValue New value to be set.
 * Gets  the encoding mode for compaction of the QR Code symbol data. The default value is undefined if the Shift_JIS encoding is loaded. Otherwise the default value is byte.
 * Sets the encoding mode for compaction of the QR Code symbol data. The default value is undefined if the Shift_JIS encoding is loaded. Otherwise the default value is byte.
 * 
 * \@optionValue New value to be set.
 * Each Extended Channel Interpretation (ECI) is designated by a six-digit assignment number: 000000 - 999999.
 * The default value depends on the loaded encodings. The default is ECI 000003 (representing ISO/IEC 8859-1) if the ISO/IEC 8859-1 character set is loaded. Otherwise the default value is 000026 (representing UTF-8).
 * Each Extended Channel Interpretation (ECI) is designated by a six-digit assignment number: 000000 - 999999.
 * The default value depends on the loaded encodings. The default is ECI 000003 (representing ISO/IEC 8859-1) if the ISO/IEC 8859-1 character set is loaded. Otherwise the default value is 000026 (representing UTF-8).
 * 
 * \@optionValue New value to be set.
 * Gets  a value indicating whether to show the ECI header.
 * Sets a value indicating whether to show the ECI header.
 * 
 * \@optionValue New value to be set.
 * Gets  the FNC1 mode indicator which identifies symbols encoding messages formatted according to specific predefined industry or application specificatoins.
 * Sets the FNC1 mode indicator which identifies symbols encoding messages formatted according to specific predefined industry or application specificatoins.
 * 
 * \@optionValue New value to be set.
 * Gets  the Application Indicator assigned to identify the specification concerned by AIM International.
 * The value is respected only when the Fnc1Mode is set to Industry. Its value may take the form of any single Latin alphabetic character from the set {a - z, A - Z} or a two-digit number.
 * Sets the Application Indicator assigned to identify the specification concerned by AIM International.
 * The value is respected only when the Fnc1Mode is set to Industry. Its value may take the form of any single Latin alphabetic character from the set {a - z, A - Z} or a two-digit number.
 * 
 * \@optionValue New value to be set.
 * Occurs when an error has happened.
 * Function takes first argument evt and second argument ui.
 * Use ui.owner to obtain reference to the barcode widget.
 * Use ui.errorMessage to get or set the error message that is to be shown.
 * Occurs when an error has happened.
 * Function takes first argument evt and second argument ui.
 * Use ui.owner to obtain reference to the barcode widget.
 * Use ui.errorMessage to get or set the error message that is to be shown.
 * 
 * \@optionValue New value to be set.
 * Occurs when the data has changed.
 * Function takes first argument evt and second argument ui.
 * Use ui.owner to obtain reference to the barcode widget.
 * Use ui.newData to obtain the new data.
 * Occurs when the data has changed.
 * Function takes first argument evt and second argument ui.
 * Use ui.owner to obtain reference to the barcode widget.
 * Use ui.newData to obtain the new data.
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgQRCodeBarcode} methodName_or_optionLiteral_or_options
 * @param {...string|!IgQRCodeBarcode|?} optionName_or_options_or_methodParams
 * @return {!Object|void|(string|number)|string|number|!ErrorMessageDisplayingEvent|!DataChangedEvent|!JQuery|?}
 */
JQuery.prototype.igQRCodeBarcode = function(methodName_or_optionLiteral_or_options, optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function DataBindingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DataBindingEventUIParam() {}
 /** @type {?} */
DataBindingEventUIParam.prototype.owner;
 /** @type {?} */
DataBindingEventUIParam.prototype.dataSource;
/**
 * @record
 * @struct
 */
function DataBoundEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DataBoundEventUIParam() {}
 /** @type {?} */
DataBoundEventUIParam.prototype.owner;
 /** @type {?} */
DataBoundEventUIParam.prototype.data;
 /** @type {?} */
DataBoundEventUIParam.prototype.dataSource;
/**
 * @record
 * @struct
 */
function UpdateTooltipEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function UpdateTooltipEventUIParam() {}
 /** @type {?} */
UpdateTooltipEventUIParam.prototype.owner;
 /** @type {?} */
UpdateTooltipEventUIParam.prototype.text;
 /** @type {?} */
UpdateTooltipEventUIParam.prototype.item;
 /** @type {?} */
UpdateTooltipEventUIParam.prototype.x;
 /** @type {?} */
UpdateTooltipEventUIParam.prototype.y;
 /** @type {?} */
UpdateTooltipEventUIParam.prototype.element;
/**
 * @record
 * @struct
 */
function HideTooltipEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function HideTooltipEventUIParam() {}
 /** @type {?} */
HideTooltipEventUIParam.prototype.owner;
 /** @type {?} */
HideTooltipEventUIParam.prototype.item;
 /** @type {?} */
HideTooltipEventUIParam.prototype.element;
/**
 * @record
 * @struct
 */
function IgBaseChart() {}
 /** @type {number} */
IgBaseChart.prototype.width;
 /** @type {number} */
IgBaseChart.prototype.height;
 /** @type {string} */
IgBaseChart.prototype.tooltipTemplate;
 /** @type {number} */
IgBaseChart.prototype.maxRecCount;
 /** @type {?} */
IgBaseChart.prototype.dataSource;
 /** @type {string} */
IgBaseChart.prototype.dataSourceType;
 /** @type {string} */
IgBaseChart.prototype.dataSourceUrl;
 /** @type {string} */
IgBaseChart.prototype.responseTotalRecCountKey;
 /** @type {string} */
IgBaseChart.prototype.responseDataKey;
 /** @type {!DataBindingEvent} */
IgBaseChart.prototype.dataBinding;
 /** @type {!DataBoundEvent} */
IgBaseChart.prototype.dataBound;
 /** @type {!UpdateTooltipEvent} */
IgBaseChart.prototype.updateTooltip;
 /** @type {!HideTooltipEvent} */
IgBaseChart.prototype.hideTooltip;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgBaseChartMethods() {}

/**
 * Find index of item within actual data used by chart.
 * 
 * @param {!Object} item     The reference to item.
 * @return {number}
 */
IgBaseChartMethods.prototype.findIndexOfItem = function(item) {};

/**
 * Get item within actual data used by chart. That is similar to this.getData()[ index ].
 * 
 * @param {!Object} index     Index of data item.
 * @return {!Object}
 */
IgBaseChartMethods.prototype.getDataItem = function(index) {};

/**
 * Get reference of actual data used by chart.
 * @return {!Array<?>}
 */
IgBaseChartMethods.prototype.getData = function() {};

/**
 * Adds a new item to the data source and notifies the chart.
 * 
 * @param {!Object} item     The item that we want to add to the data source.
 * @return {!Object}
 */
IgBaseChartMethods.prototype.addItem = function(item) {};

/**
 * Inserts a new item to the data source and notifies the chart.
 * 
 * @param {!Object} item     the new item that we want to insert in the data source.
 * @param {number} index     The index in the data source where the new item will be inserted.
 * @return {!Object}
 */
IgBaseChartMethods.prototype.insertItem = function(item, index) {};

/**
 * Deletes an item from the data source and notifies the chart.
 * 
 * @param {number} index     The index in the data source from where the item will be been removed.
 * @return {!Object}
 */
IgBaseChartMethods.prototype.removeItem = function(index) {};

/**
 * Updates an item in the data source and notifies the chart.
 * 
 * @param {number} index     The index of the item in the data source that we want to change.
 * @param {!Object} item     The new item object that will be set in the data source.
 * @return {!Object}
 */
IgBaseChartMethods.prototype.setItem = function(index, item) {};

/**
 * Notifies the chart that an item has been set in an associated data source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @param {number} index     The index in the items source that has been changed.
 * @param {!Object} newItem     the new item that has been set in the collection.
 * @param {!Object} oldItem     the old item that has been overwritten in the collection.
 * @return {!Object}
 */
IgBaseChartMethods.prototype.notifySetItem = function(dataSource, index, newItem, oldItem) {};

/**
 * Notifies the chart that the items have been cleared from an associated data source.
 * It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @return {!Object}
 */
IgBaseChartMethods.prototype.notifyClearItems = function(dataSource) {};

/**
 * Notifies the target axis or series that an item has been inserted at the specified index in its data source.
 * It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @param {number} index     The index in the items source where the new item has been inserted.
 * @param {!Object} newItem     the new item that has been set in the collection.
 * @return {!Object}
 */
IgBaseChartMethods.prototype.notifyInsertItem = function(dataSource, index, newItem) {};

/**
 * Notifies the target axis or series that an item has been removed from the specified index in its data source.
 * It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @param {number} index     The index in the items source from where the old item has been removed.
 * @param {!Object} oldItem     the old item that has been removed from the collection.
 * @return {!Object}
 */
IgBaseChartMethods.prototype.notifyRemoveItem = function(dataSource, index, oldItem) {};

/**
 * Get reference to chart object.
 * @return {!Object}
 */
IgBaseChartMethods.prototype.chart = function() {};

/**
 * Binds data to the chart
 * @return {void}
 */
IgBaseChartMethods.prototype.dataBind = function() {};

/**
 * Destroys widget.
 * @return {void}
 */
IgBaseChartMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgBaseChartMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * The width of the chart.
 * The width of the chart.
 * 
 * \@optionValue New value to be set.
 * The height of the chart.
 * The height of the chart.
 * 
 * \@optionValue New value to be set.
 * Gets  template for tooltip associated with chart item.
 * Example: "Value: $(ValueMemberPathInDataSource)"
 * Sets template for tooltip associated with chart item.
 * Example: "Value: $(ValueMemberPathInDataSource)"
 * 
 * \@optionValue New value to be set.
 * Gets  maximum number of displayed records in chart.
 * Sets maximum number of displayed records in chart.
 * 
 * \@optionValue New value to be set.
 * Gets  a valid data source.
 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
 * Sets a valid data source.
 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
 * 
 * \@optionValue New value to be set.
 * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
 * 
 * \@optionValue New value to be set.
 * Gets  url which is used for sending JSON on request for remote data.
 * Sets url which is used for sending JSON on request for remote data.
 * 
 * \@optionValue New value to be set.
 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
 * 
 * \@optionValue New value to be set.
 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
 * 
 * \@optionValue New value to be set.
 * Event which is raised before data binding.
 * Return false in order to cancel data binding.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
 * Event which is raised before data binding.
 * Return false in order to cancel data binding.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after data binding.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.data to obtain reference to array actual data which is displayed by chart.
 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
 * Event which is raised after data binding.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.data to obtain reference to array actual data which is displayed by chart.
 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before tooltip is updated.
 * Return false in order to cancel updating and hide tooltip.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
 * Event which is raised before tooltip is updated.
 * Return false in order to cancel updating and hide tooltip.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before tooltip is hidden.
 * Return false in order to cancel hiding and keep tooltip visible.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.item to obtain reference to item.
 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
 * Event which is raised before tooltip is hidden.
 * Return false in order to cancel hiding and keep tooltip visible.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.item to obtain reference to item.
 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgBaseChart} methodName_or_optionLiteral_or_options
 * @param {...!Object|number|string|!IgBaseChart|?} item_or_index_or_dataSource_or_optionName_or_options_or_methodParams
 * @return {number|!Object|!Array<?>|void|string|?|!DataBindingEvent|!DataBoundEvent|!UpdateTooltipEvent|!HideTooltipEvent|!JQuery}
 */
JQuery.prototype.igBaseChart = function(methodName_or_optionLiteral_or_options, item_or_index_or_dataSource_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgBulletGraphRange() {}
 /** @type {string} */
IgBulletGraphRange.prototype.name;
 /** @type {string} */
IgBulletGraphRange.prototype.brush;
 /** @type {string} */
IgBulletGraphRange.prototype.outline;
 /** @type {number} */
IgBulletGraphRange.prototype.startValue;
 /** @type {number} */
IgBulletGraphRange.prototype.endValue;
 /** @type {number} */
IgBulletGraphRange.prototype.innerStartExtent;
 /** @type {number} */
IgBulletGraphRange.prototype.innerEndExtent;
 /** @type {number} */
IgBulletGraphRange.prototype.outerStartExtent;
 /** @type {number} */
IgBulletGraphRange.prototype.outerEndExtent;
 /** @type {number} */
IgBulletGraphRange.prototype.strokeThickness;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function FormatLabelEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FormatLabelEventUIParam() {}
/**
 * @record
 * @struct
 */
function AlignLabelEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function AlignLabelEventUIParam() {}
/**
 * @record
 * @struct
 */
function IgBulletGraph() {}
 /** @type {(string|number)} */
IgBulletGraph.prototype.width;
 /** @type {(string|number)} */
IgBulletGraph.prototype.height;
 /** @type {!Array<!IgBulletGraphRange>} */
IgBulletGraph.prototype.ranges;
 /** @type {string} */
IgBulletGraph.prototype.rangeToolTipTemplate;
 /** @type {string} */
IgBulletGraph.prototype.valueToolTipTemplate;
 /** @type {string} */
IgBulletGraph.prototype.targetValueToolTipTemplate;
 /** @type {string} */
IgBulletGraph.prototype.orientation;
 /** @type {?} */
IgBulletGraph.prototype.rangeBrushes;
 /** @type {?} */
IgBulletGraph.prototype.rangeOutlines;
 /** @type {number} */
IgBulletGraph.prototype.minimumValue;
 /** @type {number} */
IgBulletGraph.prototype.maximumValue;
 /** @type {number} */
IgBulletGraph.prototype.targetValue;
 /** @type {string} */
IgBulletGraph.prototype.targetValueName;
 /** @type {number} */
IgBulletGraph.prototype.value;
 /** @type {string} */
IgBulletGraph.prototype.valueName;
 /** @type {number} */
IgBulletGraph.prototype.rangeInnerExtent;
 /** @type {number} */
IgBulletGraph.prototype.rangeOuterExtent;
 /** @type {number} */
IgBulletGraph.prototype.valueInnerExtent;
 /** @type {number} */
IgBulletGraph.prototype.valueOuterExtent;
 /** @type {number} */
IgBulletGraph.prototype.interval;
 /** @type {number} */
IgBulletGraph.prototype.ticksPostInitial;
 /** @type {number} */
IgBulletGraph.prototype.ticksPreTerminal;
 /** @type {number} */
IgBulletGraph.prototype.labelInterval;
 /** @type {number} */
IgBulletGraph.prototype.labelExtent;
 /** @type {number} */
IgBulletGraph.prototype.labelsPostInitial;
 /** @type {number} */
IgBulletGraph.prototype.labelsPreTerminal;
 /** @type {number} */
IgBulletGraph.prototype.minorTickCount;
 /** @type {number} */
IgBulletGraph.prototype.tickStartExtent;
 /** @type {number} */
IgBulletGraph.prototype.tickEndExtent;
 /** @type {number} */
IgBulletGraph.prototype.tickStrokeThickness;
 /** @type {string} */
IgBulletGraph.prototype.tickBrush;
 /** @type {string} */
IgBulletGraph.prototype.fontBrush;
 /** @type {string} */
IgBulletGraph.prototype.valueBrush;
 /** @type {string} */
IgBulletGraph.prototype.valueOutline;
 /** @type {number} */
IgBulletGraph.prototype.valueStrokeThickness;
 /** @type {number} */
IgBulletGraph.prototype.minorTickStartExtent;
 /** @type {number} */
IgBulletGraph.prototype.minorTickEndExtent;
 /** @type {number} */
IgBulletGraph.prototype.minorTickStrokeThickness;
 /** @type {string} */
IgBulletGraph.prototype.minorTickBrush;
 /** @type {boolean} */
IgBulletGraph.prototype.isScaleInverted;
 /** @type {string} */
IgBulletGraph.prototype.backingBrush;
 /** @type {string} */
IgBulletGraph.prototype.backingOutline;
 /** @type {number} */
IgBulletGraph.prototype.backingStrokeThickness;
 /** @type {number} */
IgBulletGraph.prototype.backingInnerExtent;
 /** @type {number} */
IgBulletGraph.prototype.backingOuterExtent;
 /** @type {number} */
IgBulletGraph.prototype.scaleStartExtent;
 /** @type {number} */
IgBulletGraph.prototype.scaleEndExtent;
 /** @type {string} */
IgBulletGraph.prototype.targetValueBrush;
 /** @type {number} */
IgBulletGraph.prototype.targetValueBreadth;
 /** @type {number} */
IgBulletGraph.prototype.targetValueInnerExtent;
 /** @type {number} */
IgBulletGraph.prototype.targetValueOuterExtent;
 /** @type {string} */
IgBulletGraph.prototype.targetValueOutline;
 /** @type {number} */
IgBulletGraph.prototype.targetValueStrokeThickness;
 /** @type {number} */
IgBulletGraph.prototype.transitionDuration;
 /** @type {number} */
IgBulletGraph.prototype.showToolTipTimeout;
 /** @type {boolean} */
IgBulletGraph.prototype.showToolTip;
 /** @type {string} */
IgBulletGraph.prototype.font;
 /** @type {number} */
IgBulletGraph.prototype.pixelScalingRatio;
 /** @type {!FormatLabelEvent} */
IgBulletGraph.prototype.formatLabel;
 /** @type {!AlignLabelEvent} */
IgBulletGraph.prototype.alignLabel;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgBulletGraphMethods() {}

/**
 * Returns a string containing the names of all the ranges delimited with a \n symbol.
 * @return {void}
 */
IgBulletGraphMethods.prototype.getRangeNames = function() {};

/**
 * Adds a new range to the bullet graph.
 * 
 * @param {!Object} value     The range object to be added.
 * @return {void}
 */
IgBulletGraphMethods.prototype.addRange = function(value) {};

/**
 * Removes a range from the bullet graph.
 * 
 * @param {!Object} value     A JS object with properties set as follows: name: nameOfTheRangeToRemove, remove: true
 * @return {void}
 */
IgBulletGraphMethods.prototype.removeRange = function(value) {};

/**
 * Updates the specified range of the bullet graph.
 * 
 * @param {!Object} value     The range object to be updated.
 * @return {void}
 */
IgBulletGraphMethods.prototype.updateRange = function(value) {};

/**
 * Returns information about how the bullet graph is rendered.
 * @return {!Object}
 */
IgBulletGraphMethods.prototype.exportVisualData = function() {};

/**
 * Causes all pending changes of the bullet graph e.g. by changed property values to be rendered immediately.
 * @return {void}
 */
IgBulletGraphMethods.prototype.flush = function() {};

/**
 * Destroys widget.
 * @return {void}
 */
IgBulletGraphMethods.prototype.destroy = function() {};

/**
 * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
 * @return {void}
 */
IgBulletGraphMethods.prototype.styleUpdated = function() {};

/**
 * @param {string} propertyName
 * @return {!IgBulletGraphMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * \@optionValue New value to be set.
 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * \@optionValue New value to be set.
 * Gets  the scale ranges to render on the bullet graph.
 * Sets the scale ranges to render on the bullet graph.
 * 
 * \@optionValue New value to be set.
 * Gets  the ranges' tooltip template.
 * Sets the ranges' tooltip template.
 * 
 * \@optionValue New value to be set.
 * Gets  the value's tooltip template.
 * Sets the value's tooltip template.
 * 
 * \@optionValue New value to be set.
 * Gets  the target value's tooltip template.
 * Sets the target value's tooltip template.
 * 
 * \@optionValue New value to be set.
 * Gets  the orientation of the scale.
 * Sets the orientation of the scale.
 * 
 * \@optionValue New value to be set.
 * Gets  a collection of brushes to be used as the palette for bullet graph ranges.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * Sets a collection of brushes to be used as the palette for bullet graph ranges.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * 
 * \@optionValue New value to be set.
 * Gets  a collection of brushes to be used as the palette for bullet graph outlines.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * Sets a collection of brushes to be used as the palette for bullet graph outlines.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * 
 * \@optionValue New value to be set.
 * Gets  the minimum value of the scale.
 * Sets the minimum value of the scale.
 * 
 * \@optionValue New value to be set.
 * Gets  the maximum value of the scale.
 * Sets the maximum value of the scale.
 * 
 * \@optionValue New value to be set.
 * Gets  the value indicated by the target value bar.
 * Sets the value indicated by the target value bar.
 * 
 * \@optionValue New value to be set.
 * Gets  the name used for the target value. The name is displayed in the default target value tooltip.
 * Sets the name used for the target value. The name is displayed in the default target value tooltip.
 * 
 * \@optionValue New value to be set.
 * Gets  the value at which the bar ends.
 * Sets the value at which the bar ends.
 * 
 * \@optionValue New value to be set.
 * Gets  the name used for actual value.
 * Sets the name used for actual value.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * Sets the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the bullet graph.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * Sets the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the bullet graph.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to start rendering the actual value geometries, measured from the front/bottom of the bullet graph as a value from 0 to 1.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * Sets the position at which to start rendering the actual value geometries, measured from the front/bottom of the bullet graph as a value from 0 to 1.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to stop rendering the actual value geometries as a value from 0 to 1 measured from the front/bottom of the bullet graph.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * Sets the position at which to stop rendering the actual value geometries as a value from 0 to 1 measured from the front/bottom of the bullet graph.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * 
 * \@optionValue New value to be set.
 * Gets  the interval to use for the scale.
 * Sets the interval to use for the scale.
 * 
 * \@optionValue New value to be set.
 * A value to start adding tickmarks, added to the scale's MinimumValue.
 * A value to start adding tickmarks, added to the scale's MinimumValue.
 * 
 * \@optionValue New value to be set.
 * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
 * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
 * 
 * \@optionValue New value to be set.
 * Gets  the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
 * Sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
 * Values further from zero than 1 can be used to hide the labels of the bullet graph.
 * Sets the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
 * Values further from zero than 1 can be used to hide the labels of the bullet graph.
 * 
 * \@optionValue New value to be set.
 * A value to start adding labels, added to the scale's MinimumValue.
 * A value to start adding labels, added to the scale's MinimumValue.
 * 
 * \@optionValue New value to be set.
 * A value to stop adding labels, subtracted from the scale's MaximumValue.
 * A value to stop adding labels, subtracted from the scale's MaximumValue.
 * 
 * \@optionValue New value to be set.
 * Gets  the number of minor tickmarks to place between major tickmarks.
 * Sets the number of minor tickmarks to place between major tickmarks.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * Sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * Sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * 
 * \@optionValue New value to be set.
 * Gets  the stroke thickness to use when rendering ticks.
 * Sets the stroke thickness to use when rendering ticks.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for the major tickmarks.
 * Sets the brush to use for the major tickmarks.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for the label font.
 * Sets the brush to use for the label font.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for the actual value element.
 * Sets the brush to use for the actual value element.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for the outline of actual value element.
 * Sets the brush to use for the outline of actual value element.
 * 
 * \@optionValue New value to be set.
 * Gets  the stroke thickness to use when rendering single actual value element.
 * Sets the stroke thickness to use when rendering single actual value element.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * Sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * Sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * 
 * \@optionValue New value to be set.
 * Gets  the stroke thickness to use when rendering minor ticks.
 * Sets the stroke thickness to use when rendering minor ticks.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for the minor tickmarks.
 * Sets the brush to use for the minor tickmarks.
 * 
 * \@optionValue New value to be set.
 * Gets  a value indicating whether the scale is inverted.
 * When the scale is inverted the direction in which the scale values increase is right to left.
 * Sets a value indicating whether the scale is inverted.
 * When the scale is inverted the direction in which the scale values increase is right to left.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use to fill the backing of the bullet graph.
 * Sets the brush to use to fill the backing of the bullet graph.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for the outline of the backing.
 * Sets the brush to use for the outline of the backing.
 * 
 * \@optionValue New value to be set.
 * Gets  the stroke thickness of the backing outline.
 * Sets the stroke thickness of the backing outline.
 * 
 * \@optionValue New value to be set.
 * Gets  the inner extent of the bullet graph backing.
 * Sets the inner extent of the bullet graph backing.
 * 
 * \@optionValue New value to be set.
 * Gets  the outer extent of the bullet graph backing.
 * Sets the outer extent of the bullet graph backing.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to start rendering the scale, measured from the front/bottom of the bullet graph as a value from 0 to 1.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * Sets the position at which to start rendering the scale, measured from the front/bottom of the bullet graph as a value from 0 to 1.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the bullet graph.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * Sets the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the bullet graph.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use when rendering the fill of the comparative marker.
 * Sets the brush to use when rendering the fill of the comparative marker.
 * 
 * \@optionValue New value to be set.
 * Get  the breadth of the target value element.
 * Get or sets the breadth of the target value element.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * Sets the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * Sets the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use when rendering the outline of the target value.
 * Sets the brush to use when rendering the outline of the target value.
 * 
 * \@optionValue New value to be set.
 * Gets  the stroke thickness of the outline of the target value bar.
 * Sets the stroke thickness of the outline of the target value bar.
 * 
 * \@optionValue New value to be set.
 * Gets  the number of milliseconds over which changes to the bullet graph should be animated.
 * Sets the number of milliseconds over which changes to the bullet graph should be animated.
 * 
 * \@optionValue New value to be set.
 * Gets  the time in milliseconds that tooltip appearance is delayed with.
 * Sets the time in milliseconds that tooltip appearance is delayed with.
 * 
 * \@optionValue New value to be set.
 * Gets  a value indicating whether tooltips are enabled.
 * Sets a value indicating whether tooltips are enabled.
 * 
 * \@optionValue New value to be set.
 * Gets  the font.
 * Sets the font.
 * 
 * \@optionValue New value to be set.
 *
 *
 *
 *
 *
 *
 * @param {string|!IgBulletGraph} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgBulletGraph|?} value_or_optionName_or_options_or_methodParams
 * @return {void|!Object|(string|number)|!Array<!IgBulletGraphRange>|string|?|number|boolean|!FormatLabelEvent|!AlignLabelEvent|!JQuery}
 */
JQuery.prototype.igBulletGraph = function(methodName_or_optionLiteral_or_options, value_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function PropertyChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function PropertyChangedEventUIParam() {}
/**
 * @record
 * @struct
 */
function IgCategoryChart() {}
 /** @type {number} */
IgCategoryChart.prototype.yAxisMinimumValue;
 /** @type {number} */
IgCategoryChart.prototype.yAxisMaximumValue;
 /** @type {number} */
IgCategoryChart.prototype.titleLeftMargin;
 /** @type {number} */
IgCategoryChart.prototype.titleRightMargin;
 /** @type {number} */
IgCategoryChart.prototype.titleTopMargin;
 /** @type {number} */
IgCategoryChart.prototype.titleBottomMargin;
 /** @type {number} */
IgCategoryChart.prototype.transitionInDuration;
 /** @type {number} */
IgCategoryChart.prototype.transitionDuration;
 /** @type {?} */
IgCategoryChart.prototype.transitionInEasingFunction;
 /** @type {?} */
IgCategoryChart.prototype.transitionEasingFunction;
 /** @type {number} */
IgCategoryChart.prototype.xAxisLabelLeftMargin;
 /** @type {number} */
IgCategoryChart.prototype.xAxisLabelTopMargin;
 /** @type {number} */
IgCategoryChart.prototype.xAxisLabelRightMargin;
 /** @type {number} */
IgCategoryChart.prototype.xAxisLabelBottomMargin;
 /** @type {number} */
IgCategoryChart.prototype.yAxisLabelLeftMargin;
 /** @type {number} */
IgCategoryChart.prototype.yAxisLabelTopMargin;
 /** @type {number} */
IgCategoryChart.prototype.yAxisLabelRightMargin;
 /** @type {number} */
IgCategoryChart.prototype.yAxisLabelBottomMargin;
 /** @type {string} */
IgCategoryChart.prototype.xAxisLabelTextColor;
 /** @type {string} */
IgCategoryChart.prototype.yAxisLabelTextColor;
 /** @type {string} */
IgCategoryChart.prototype.xAxisLabelTextStyle;
 /** @type {string} */
IgCategoryChart.prototype.yAxisLabelTextStyle;
 /** @type {number} */
IgCategoryChart.prototype.subtitleLeftMargin;
 /** @type {number} */
IgCategoryChart.prototype.subtitleTopMargin;
 /** @type {number} */
IgCategoryChart.prototype.subtitleRightMargin;
 /** @type {number} */
IgCategoryChart.prototype.subtitleBottomMargin;
 /** @type {string} */
IgCategoryChart.prototype.subtitleTextColor;
 /** @type {string} */
IgCategoryChart.prototype.subtitleTextStyle;
 /** @type {string} */
IgCategoryChart.prototype.titleTextColor;
 /** @type {string} */
IgCategoryChart.prototype.titleTextStyle;
 /** @type {number} */
IgCategoryChart.prototype.leftMargin;
 /** @type {number} */
IgCategoryChart.prototype.topMargin;
 /** @type {number} */
IgCategoryChart.prototype.rightMargin;
 /** @type {number} */
IgCategoryChart.prototype.bottomMargin;
 /** @type {number} */
IgCategoryChart.prototype.xAxisTitleExtent;
 /** @type {number} */
IgCategoryChart.prototype.yAxisTitleExtent;
 /** @type {number} */
IgCategoryChart.prototype.xAxisTitleMargin;
 /** @type {number} */
IgCategoryChart.prototype.yAxisTitleMargin;
 /** @type {number} */
IgCategoryChart.prototype.xAxisTitleLeftMargin;
 /** @type {number} */
IgCategoryChart.prototype.yAxisTitleLeftMargin;
 /** @type {number} */
IgCategoryChart.prototype.xAxisTitleTopMargin;
 /** @type {number} */
IgCategoryChart.prototype.yAxisTitleTopMargin;
 /** @type {number} */
IgCategoryChart.prototype.xAxisTitleRightMargin;
 /** @type {number} */
IgCategoryChart.prototype.yAxisTitleRightMargin;
 /** @type {number} */
IgCategoryChart.prototype.xAxisTitleBottomMargin;
 /** @type {number} */
IgCategoryChart.prototype.yAxisTitleBottomMargin;
 /** @type {string} */
IgCategoryChart.prototype.tooltipTemplate;
 /** @type {?} */
IgCategoryChart.prototype.xAxisFormatLabel;
 /** @type {?} */
IgCategoryChart.prototype.yAxisFormatLabel;
 /** @type {string} */
IgCategoryChart.prototype.xAxisTitleTextColor;
 /** @type {string} */
IgCategoryChart.prototype.yAxisTitleTextColor;
 /** @type {string} */
IgCategoryChart.prototype.xAxisTitleTextStyle;
 /** @type {string} */
IgCategoryChart.prototype.yAxisTitleTextStyle;
 /** @type {?} */
IgCategoryChart.prototype.widget;
 /** @type {?} */
IgCategoryChart.prototype.itemsSource;
 /** @type {?} */
IgCategoryChart.prototype.includedProperties;
 /** @type {?} */
IgCategoryChart.prototype.excludedProperties;
 /** @type {string} */
IgCategoryChart.prototype.chartType;
 /** @type {?} */
IgCategoryChart.prototype.brushes;
 /** @type {?} */
IgCategoryChart.prototype.outlines;
 /** @type {?} */
IgCategoryChart.prototype.legend;
 /** @type {boolean} */
IgCategoryChart.prototype.isHorizontalZoomEnabled;
 /** @type {boolean} */
IgCategoryChart.prototype.isVerticalZoomEnabled;
 /** @type {?} */
IgCategoryChart.prototype.windowRect;
 /** @type {string} */
IgCategoryChart.prototype.title;
 /** @type {string} */
IgCategoryChart.prototype.subtitle;
 /** @type {string} */
IgCategoryChart.prototype.titleAlignment;
 /** @type {string} */
IgCategoryChart.prototype.subtitleAlignment;
 /** @type {string} */
IgCategoryChart.prototype.unknownValuePlotting;
 /** @type {string} */
IgCategoryChart.prototype.markerCollisionAvoidance;
 /** @type {boolean} */
IgCategoryChart.prototype.isTransitionInEnabled;
 /** @type {string} */
IgCategoryChart.prototype.transitionInMode;
 /** @type {string} */
IgCategoryChart.prototype.transitionInSpeedType;
 /** @type {number} */
IgCategoryChart.prototype.xAxisInterval;
 /** @type {number} */
IgCategoryChart.prototype.xAxisMinorInterval;
 /** @type {number} */
IgCategoryChart.prototype.xAxisGap;
 /** @type {number} */
IgCategoryChart.prototype.xAxisOverlap;
 /** @type {number} */
IgCategoryChart.prototype.yAxisInterval;
 /** @type {boolean} */
IgCategoryChart.prototype.yAxisIsLogarithmic;
 /** @type {number} */
IgCategoryChart.prototype.yAxisLogarithmBase;
 /** @type {number} */
IgCategoryChart.prototype.yAxisMinorInterval;
 /** @type {?} */
IgCategoryChart.prototype.xAxisLabel;
 /** @type {?} */
IgCategoryChart.prototype.yAxisLabel;
 /** @type {string} */
IgCategoryChart.prototype.xAxisMajorStroke;
 /** @type {string} */
IgCategoryChart.prototype.yAxisMajorStroke;
 /** @type {number} */
IgCategoryChart.prototype.xAxisMajorStrokeThickness;
 /** @type {number} */
IgCategoryChart.prototype.yAxisMajorStrokeThickness;
 /** @type {number} */
IgCategoryChart.prototype.xAxisMinorStrokeThickness;
 /** @type {number} */
IgCategoryChart.prototype.yAxisMinorStrokeThickness;
 /** @type {string} */
IgCategoryChart.prototype.xAxisStrip;
 /** @type {string} */
IgCategoryChart.prototype.yAxisStrip;
 /** @type {string} */
IgCategoryChart.prototype.xAxisStroke;
 /** @type {string} */
IgCategoryChart.prototype.yAxisStroke;
 /** @type {number} */
IgCategoryChart.prototype.xAxisStrokeThickness;
 /** @type {number} */
IgCategoryChart.prototype.yAxisStrokeThickness;
 /** @type {number} */
IgCategoryChart.prototype.xAxisTickLength;
 /** @type {number} */
IgCategoryChart.prototype.yAxisTickLength;
 /** @type {string} */
IgCategoryChart.prototype.xAxisTickStroke;
 /** @type {string} */
IgCategoryChart.prototype.yAxisTickStroke;
 /** @type {number} */
IgCategoryChart.prototype.xAxisTickStrokeThickness;
 /** @type {number} */
IgCategoryChart.prototype.yAxisTickStrokeThickness;
 /** @type {string} */
IgCategoryChart.prototype.xAxisTitle;
 /** @type {string} */
IgCategoryChart.prototype.yAxisTitle;
 /** @type {string} */
IgCategoryChart.prototype.xAxisMinorStroke;
 /** @type {string} */
IgCategoryChart.prototype.yAxisMinorStroke;
 /** @type {number} */
IgCategoryChart.prototype.xAxisLabelAngle;
 /** @type {number} */
IgCategoryChart.prototype.yAxisLabelAngle;
 /** @type {number} */
IgCategoryChart.prototype.xAxisExtent;
 /** @type {number} */
IgCategoryChart.prototype.yAxisExtent;
 /** @type {number} */
IgCategoryChart.prototype.xAxisTitleAngle;
 /** @type {number} */
IgCategoryChart.prototype.yAxisTitleAngle;
 /** @type {number} */
IgCategoryChart.prototype.resolution;
 /** @type {?} */
IgCategoryChart.prototype.trendLineBrushes;
 /** @type {string} */
IgCategoryChart.prototype.trendLineType;
 /** @type {number} */
IgCategoryChart.prototype.thickness;
 /** @type {?} */
IgCategoryChart.prototype.markerTypes;
 /** @type {?} */
IgCategoryChart.prototype.markerBrushes;
 /** @type {?} */
IgCategoryChart.prototype.markerOutlines;
 /** @type {number} */
IgCategoryChart.prototype.trendLineThickness;
 /** @type {boolean} */
IgCategoryChart.prototype.xAxisInverted;
 /** @type {boolean} */
IgCategoryChart.prototype.yAxisInverted;
 /** @type {?} */
IgCategoryChart.prototype.negativeBrushes;
 /** @type {string} */
IgCategoryChart.prototype.xAxisTitleAlignment;
 /** @type {string} */
IgCategoryChart.prototype.yAxisTitleAlignment;
 /** @type {string} */
IgCategoryChart.prototype.xAxisLabelHorizontalAlignment;
 /** @type {string} */
IgCategoryChart.prototype.yAxisLabelHorizontalAlignment;
 /** @type {string} */
IgCategoryChart.prototype.xAxisLabelVerticalAlignment;
 /** @type {string} */
IgCategoryChart.prototype.yAxisLabelVerticalAlignment;
 /** @type {string} */
IgCategoryChart.prototype.xAxisLabelVisibility;
 /** @type {string} */
IgCategoryChart.prototype.yAxisLabelVisibility;
 /** @type {?} */
IgCategoryChart.prototype.negativeOutlines;
 /** @type {boolean} */
IgCategoryChart.prototype.alignsGridLinesToPixels;
 /** @type {number} */
IgCategoryChart.prototype.width;
 /** @type {number} */
IgCategoryChart.prototype.height;
 /** @type {number} */
IgCategoryChart.prototype.maxRecCount;
 /** @type {?} */
IgCategoryChart.prototype.dataSource;
 /** @type {string} */
IgCategoryChart.prototype.dataSourceType;
 /** @type {string} */
IgCategoryChart.prototype.dataSourceUrl;
 /** @type {string} */
IgCategoryChart.prototype.responseTotalRecCountKey;
 /** @type {string} */
IgCategoryChart.prototype.responseDataKey;
 /** @type {!PropertyChangedEvent} */
IgCategoryChart.prototype.propertyChanged;
 /** @type {!DataBindingEvent} */
IgCategoryChart.prototype.dataBinding;
 /** @type {!DataBoundEvent} */
IgCategoryChart.prototype.dataBound;
 /** @type {!UpdateTooltipEvent} */
IgCategoryChart.prototype.updateTooltip;
 /** @type {!HideTooltipEvent} */
IgCategoryChart.prototype.hideTooltip;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgCategoryChartMethods() {}

/**
 * @return {void}
 */
IgCategoryChartMethods.prototype.destroy = function() {};

/**
 * @return {void}
 */
IgCategoryChartMethods.prototype.id = function() {};

/**
 * @return {void}
 */
IgCategoryChartMethods.prototype.exportVisualData = function() {};

/**
 * Find index of item within actual data used by chart.
 * 
 * @param {!Object} item     The reference to item.
 * @return {number}
 */
IgCategoryChartMethods.prototype.findIndexOfItem = function(item) {};

/**
 * Get item within actual data used by chart. That is similar to this.getData()[ index ].
 * 
 * @param {!Object} index     Index of data item.
 * @return {!Object}
 */
IgCategoryChartMethods.prototype.getDataItem = function(index) {};

/**
 * Get reference of actual data used by chart.
 * @return {!Array<?>}
 */
IgCategoryChartMethods.prototype.getData = function() {};

/**
 * Adds a new item to the data source and notifies the chart.
 * 
 * @param {!Object} item     The item that we want to add to the data source.
 * @return {!Object}
 */
IgCategoryChartMethods.prototype.addItem = function(item) {};

/**
 * Inserts a new item to the data source and notifies the chart.
 * 
 * @param {!Object} item     the new item that we want to insert in the data source.
 * @param {number} index     The index in the data source where the new item will be inserted.
 * @return {!Object}
 */
IgCategoryChartMethods.prototype.insertItem = function(item, index) {};

/**
 * Deletes an item from the data source and notifies the chart.
 * 
 * @param {number} index     The index in the data source from where the item will be been removed.
 * @return {!Object}
 */
IgCategoryChartMethods.prototype.removeItem = function(index) {};

/**
 * Updates an item in the data source and notifies the chart.
 * 
 * @param {number} index     The index of the item in the data source that we want to change.
 * @param {!Object} item     The new item object that will be set in the data source.
 * @return {!Object}
 */
IgCategoryChartMethods.prototype.setItem = function(index, item) {};

/**
 * Notifies the chart that an item has been set in an associated data source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @param {number} index     The index in the items source that has been changed.
 * @param {!Object} newItem     the new item that has been set in the collection.
 * @param {!Object} oldItem     the old item that has been overwritten in the collection.
 * @return {!Object}
 */
IgCategoryChartMethods.prototype.notifySetItem = function(dataSource, index, newItem, oldItem) {};

/**
 * Notifies the chart that the items have been cleared from an associated data source.
 * It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @return {!Object}
 */
IgCategoryChartMethods.prototype.notifyClearItems = function(dataSource) {};

/**
 * Notifies the target axis or series that an item has been inserted at the specified index in its data source.
 * It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @param {number} index     The index in the items source where the new item has been inserted.
 * @param {!Object} newItem     the new item that has been set in the collection.
 * @return {!Object}
 */
IgCategoryChartMethods.prototype.notifyInsertItem = function(dataSource, index, newItem) {};

/**
 * Notifies the target axis or series that an item has been removed from the specified index in its data source.
 * It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @param {number} index     The index in the items source from where the old item has been removed.
 * @param {!Object} oldItem     the old item that has been removed from the collection.
 * @return {!Object}
 */
IgCategoryChartMethods.prototype.notifyRemoveItem = function(dataSource, index, oldItem) {};

/**
 * Get reference to chart object.
 * @return {!Object}
 */
IgCategoryChartMethods.prototype.chart = function() {};

/**
 * Binds data to the chart
 * @return {void}
 */
IgCategoryChartMethods.prototype.dataBind = function() {};

/**
 * @param {string} propertyName
 * @return {!IgCategoryChartMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Gets  the data value corresponding to the minimum value of the Y-axis.
 * Sets the data value corresponding to the minimum value of the Y-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the data value corresponding to the maximum value of the Y-axis.
 * Sets the data value corresponding to the maximum value of the Y-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the left margin of chart title
 * Sets the left margin of chart title
 * 
 * \@optionValue New value to be set.
 * Gets  the right margin of chart title
 * Sets the right margin of chart title
 * 
 * \@optionValue New value to be set.
 * Gets  the top margin of chart title
 * Sets the top margin of chart title
 * 
 * \@optionValue New value to be set.
 * Gets  the bottom margin of chart title
 * Sets the bottom margin of chart title
 * 
 * \@optionValue New value to be set.
 * Gets  the duration used for animating series plots when the chart is loading into view
 * Sets the duration used for animating series plots when the chart is loading into view
 * 
 * \@optionValue New value to be set.
 * Gets  the duration used for animating series plots when the data is changing
 * Sets the duration used for animating series plots when the data is changing
 * 
 * \@optionValue New value to be set.
 * Gets  the easing function used for animating series plots when the chart is loading into view
 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
 * Sets the easing function used for animating series plots when the chart is loading into view
 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
 * 
 * \@optionValue New value to be set.
 * Gets  the easing function used for animating series plots when the data is changing.
 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
 * Sets the easing function used for animating series plots when the data is changing.
 * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
 * 
 * \@optionValue New value to be set.
 * Gets  the left margin of labels on the X-axis
 * Sets the left margin of labels on the X-axis
 * 
 * \@optionValue New value to be set.
 * Gets  the top margin of labels on the X-axis
 * Sets the top margin of labels on the X-axis
 * 
 * \@optionValue New value to be set.
 * Gets  the right margin of labels on the X-axis
 * Sets the right margin of labels on the X-axis
 * 
 * \@optionValue New value to be set.
 * Gets  the bottom margin of labels on the X-axis
 * Sets the bottom margin of labels on the X-axis
 * 
 * \@optionValue New value to be set.
 * Gets  the left margin of labels on the Y-axis
 * Sets the left margin of labels on the Y-axis
 * 
 * \@optionValue New value to be set.
 * Gets  the top margin of labels on the Y-axis
 * Sets the top margin of labels on the Y-axis
 * 
 * \@optionValue New value to be set.
 * Gets  the right margin of labels on the Y-axis
 * Sets the right margin of labels on the Y-axis
 * 
 * \@optionValue New value to be set.
 * Gets  the bottom margin of labels on the Y-axis
 * Sets the bottom margin of labels on the Y-axis
 * 
 * \@optionValue New value to be set.
 * Gets  color of labels on the X-axis
 * Sets color of labels on the X-axis
 * 
 * \@optionValue New value to be set.
 * Gets  color of labels on the Y-axis
 * Sets color of labels on the Y-axis
 * 
 * \@optionValue New value to be set.
 * Gets  CSS font property for labels on X-axis
 * Sets CSS font property for labels on X-axis
 * 
 * \@optionValue New value to be set.
 * Gets  CSS font property for labels on Y-axis
 * Sets CSS font property for labels on Y-axis
 * 
 * \@optionValue New value to be set.
 * Gets  the left margin of chart subtitle
 * Sets the left margin of chart subtitle
 * 
 * \@optionValue New value to be set.
 * Gets  the top margin of chart subtitle
 * Sets the top margin of chart subtitle
 * 
 * \@optionValue New value to be set.
 * Gets  the right margin of chart subtitle
 * Sets the right margin of chart subtitle
 * 
 * \@optionValue New value to be set.
 * Gets  the bottom margin of chart subtitle
 * Sets the bottom margin of chart subtitle
 * 
 * \@optionValue New value to be set.
 * Gets  color of chart subtitle
 * Sets color of chart subtitle
 * 
 * \@optionValue New value to be set.
 * Gets  CSS font property for the chart subtitle
 * Sets CSS font property for the chart subtitle
 * 
 * \@optionValue New value to be set.
 * Gets  color of chart title
 * Sets color of chart title
 * 
 * \@optionValue New value to be set.
 * Gets  CSS font property for the chart title
 * Sets CSS font property for the chart title
 * 
 * \@optionValue New value to be set.
 * Gets  the left margin of the chart content in the canvas
 * Sets the left margin of the chart content in the canvas
 * 
 * \@optionValue New value to be set.
 * Gets  the top margin of the chart content in the canvas
 * Sets the top margin of the chart content in the canvas
 * 
 * \@optionValue New value to be set.
 * Gets  the right margin of the chart content in the canvas
 * Sets the right margin of the chart content in the canvas
 * 
 * \@optionValue New value to be set.
 * Gets  the bottom margin around the chart content in the canvas
 * Sets the bottom margin around the chart content in the canvas
 * 
 * \@optionValue New value to be set.
 * Gets  the extent area dedicated to the a title on the X-axis. If unspecified, this value is auto-calculated.
 * Sets the extent area dedicated to the a title on the X-axis. If unspecified, this value is auto-calculated.
 * 
 * \@optionValue New value to be set.
 * Gets  the extent area dedicated to the a title on the Y-axis. If unspecified, this value is auto-calculated.
 * Sets the extent area dedicated to the a title on the Y-axis. If unspecified, this value is auto-calculated.
 * 
 * \@optionValue New value to be set.
 * Gets  the margin around a title on the X-axis
 * Sets the margin around a title on the X-axis
 * 
 * \@optionValue New value to be set.
 * Gets  the margin around a title on the Y-axis
 * Sets the margin around a title on the Y-axis
 * 
 * \@optionValue New value to be set.
 * Gets  the left margin of a title on the X-axis
 * Sets the left margin of a title on the X-axis
 * 
 * \@optionValue New value to be set.
 * Gets  the left margin of a title on the Y-axis
 * Sets the left margin of a title on the Y-axis
 * 
 * \@optionValue New value to be set.
 * Gets  the top margin of a title on the X-axis
 * Sets the top margin of a title on the X-axis
 * 
 * \@optionValue New value to be set.
 * Gets  the top margin of a title on the Y-axis
 * Sets the top margin of a title on the Y-axis
 * 
 * \@optionValue New value to be set.
 * Gets  the right margin of a title on the X-axis
 * Sets the right margin of a title on the X-axis
 * 
 * \@optionValue New value to be set.
 * Gets  the right margin of a title on the Y-axis
 * Sets the right margin of a title on the Y-axis
 * 
 * \@optionValue New value to be set.
 * Gets  the bottom margin of a title on the X-axis
 * Sets the bottom margin of a title on the X-axis
 * 
 * \@optionValue New value to be set.
 * Gets  the bottom margin of a title on the Y-axis
 * Sets the bottom margin of a title on the Y-axis
 * 
 * \@optionValue New value to be set.
 * Gets  the id of a template element to use for tooltips, or markup representing the tooltip template.
 * Sets the id of a template element to use for tooltips, or markup representing the tooltip template.
 * 
 * \@optionValue New value to be set.
 * Gets  function which takes an context object and returns a formatted label for the X-axis.
 * Sets function which takes an context object and returns a formatted label for the X-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  function which takes a context object and returns a formatted label for the Y-axis.
 * Sets function which takes a context object and returns a formatted label for the Y-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  color of title on the X-axis
 * Sets color of title on the X-axis
 * 
 * \@optionValue New value to be set.
 * Gets  color of title on the Y-axis
 * Sets color of title on the Y-axis
 * 
 * \@optionValue New value to be set.
 * Gets  CSS font property for title on X-axis
 * Sets CSS font property for title on X-axis
 * 
 * \@optionValue New value to be set.
 * Gets  CSS font property for title on Y-axis
 * Sets CSS font property for title on Y-axis
 * 
 * \@optionValue New value to be set.
 *
 *
 * Gets  a collection of data items used to generate the chart.
 * Value of this property can be a list of objects containing one or more numeric properties.  Additionally, if the objects in the list implement the IEnumerable interface, the Category Chart will attempt to delve into the sub-collections when reading through the data source.  Databinding can be further configured by attributing the data item classes with the DataSeriesMemberIntentAttribute.
 * Sets a collection of data items used to generate the chart.
 * Value of this property can be a list of objects containing one or more numeric properties.  Additionally, if the objects in the list implement the IEnumerable interface, the Category Chart will attempt to delve into the sub-collections when reading through the data source.  Databinding can be further configured by attributing the data item classes with the DataSeriesMemberIntentAttribute.
 * 
 * \@optionValue New value to be set.
 * Gets  a set of property paths that should be included for consideration by the category chart, leaving the remaineder excluded. If null, all properties will be considered.
 * Sets a set of property paths that should be included for consideration by the category chart, leaving the remaineder excluded. If null, all properties will be considered.
 * 
 * \@optionValue New value to be set.
 * Gets  a set of property paths that should be excluded from consideration by the category chart.
 * Sets a set of property paths that should be excluded from consideration by the category chart.
 * 
 * \@optionValue New value to be set.
 * Gets  the type of chart series to generate from the data.
 * Sets the type of chart series to generate from the data.
 * 
 * \@optionValue New value to be set.
 * Gets  the palette of brushes to use for coloring the chart series. The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * Sets the palette of brushes to use for coloring the chart series. The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * 
 * \@optionValue New value to be set.
 * Gets  the palette of brushes to use for outlines on the chart series. The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * Sets the palette of brushes to use for outlines on the chart series. The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * 
 * \@optionValue New value to be set.
 * Sets the legend to connect this chart to.
 * When the legend property is set, the chart will use it to display information about its series.  Legends can be shared by multiple chart controls.
 * Sets the legend to connect this chart to.
 * When the legend property is set, the chart will use it to display information about its series.  Legends can be shared by multiple chart controls.
 * 
 * \@optionValue New value to be set.
 * Gets  whether the chart should perform horizontal zoom when the user initiates a mouse wheel or mouse drag operation.
 * Sets whether the chart should perform horizontal zoom when the user initiates a mouse wheel or mouse drag operation.
 * 
 * \@optionValue New value to be set.
 * Gets  whether the chart should perform vertical zoom when the user initiates a mouse wheel or mouse drag operation.
 * Sets whether the chart should perform vertical zoom when the user initiates a mouse wheel or mouse drag operation.
 * 
 * \@optionValue New value to be set.
 * Gets  the rectangle representing the current scroll and zoom state of the chart.
 * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
 * The provided object should have numeric properties called left, top, width and height.
 * Sets the rectangle representing the current scroll and zoom state of the chart.
 * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
 * The provided object should have numeric properties called left, top, width and height.
 * 
 * \@optionValue New value to be set.
 * Gets  text to display above the plot area.
 * Sets text to display above the plot area.
 * 
 * \@optionValue New value to be set.
 * Gets  text to display below the chart Title, above the plot area.
 * Sets text to display below the chart Title, above the plot area.
 * 
 * \@optionValue New value to be set.
 * Gets  horizontal alignment which determines the title position, relative to the left and right edges of the chart.
 * Sets horizontal alignment which determines the title position, relative to the left and right edges of the chart.
 * 
 * \@optionValue New value to be set.
 * Gets  horizontal alignment which determines the subtitle position, relative to the left and right edges of the chart.
 * Sets horizontal alignment which determines the subtitle position, relative to the left and right edges of the chart.
 * 
 * \@optionValue New value to be set.
 * Gets  behavior that determines how unknown values will be plotted on the chart.Null and Double.NaN are two examples of unknown values.
 * 
 * Sets behavior that determines how unknown values will be plotted on the chart.Null and Double.NaN are two examples of unknown values.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets  behavior for markers in each series which are placed too close together for the current view, resulting in a collision.
 * Sets behavior for markers in each series which are placed too close together for the current view, resulting in a collision.
 * 
 * \@optionValue New value to be set.
 * Gets  whether animation of series plots is enabled when the chart is loading into view
 * Sets whether animation of series plots is enabled when the chart is loading into view
 * 
 * \@optionValue New value to be set.
 * Gets  the method that determines how to animate series plots when the chart is loading into view
 * Sets the method that determines how to animate series plots when the chart is loading into view
 * 
 * \@optionValue New value to be set.
 * Gets  the arrival speed used for animating series plots when the chart is loading into view
 * Sets the arrival speed used for animating series plots when the chart is loading into view
 * 
 * \@optionValue New value to be set.
 * Gets  the frequency of displayed labels along the X-axis.
 * Gets  the set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
 * Sets the frequency of displayed labels along the X-axis.
 *  sets the set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
 * 
 * \@optionValue New value to be set.
 * Gets  the frequency of displayed minor lines along the X-axis.
 * Gets  the set value is a factor that determines how the minor lines will be displayed.
 * Sets the frequency of displayed minor lines along the X-axis.
 *  sets the set value is a factor that determines how the minor lines will be displayed.
 * 
 * \@optionValue New value to be set.
 * Gets  the amount of space between adjacent categories for the X-axis.
 * The gap is silently clamped to the range [0, 1] when used.
 * Sets the amount of space between adjacent categories for the X-axis.
 * The gap is silently clamped to the range [0, 1] when used.
 * 
 * \@optionValue New value to be set.
 * Gets  the amount of overlap between adjacent categories for the X-axis.
 * Gets  the overlap is silently clamped to the range [-1, 1] when used.
 * Sets the amount of overlap between adjacent categories for the X-axis.
 *  sets the overlap is silently clamped to the range [-1, 1] when used.
 * 
 * \@optionValue New value to be set.
 * Gets  the distance between each labels and grid line along the Y-axis.
 * Sets the distance between each labels and grid line along the Y-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  whether the Y-axis should use a logarithmic scale instead of a linear one.
 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
 * Sets whether the Y-axis should use a logarithmic scale instead of a linear one.
 * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
 * 
 * \@optionValue New value to be set.
 * Gets  the base value to use in the log function when mapping the position of data items along the Y-axis.
 * This property is effective only when YAxisIsLogarithmic is true.
 * Sets the base value to use in the log function when mapping the position of data items along the Y-axis.
 * This property is effective only when YAxisIsLogarithmic is true.
 * 
 * \@optionValue New value to be set.
 * Gets  the frequency of displayed minor lines along the Y-axis.
 * Sets the frequency of displayed minor lines along the Y-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the format for labels along the X-axis.
 * Sets the format for labels along the X-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the format for labels along the Y-axis.
 * Sets the format for labels along the Y-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the color to apply to major gridlines along the X-axis.
 * Sets the color to apply to major gridlines along the X-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the color to apply to major gridlines along the Y-axis.
 * Sets the color to apply to major gridlines along the Y-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the thickness to apply to major gridlines along the X-axis.
 * Sets the thickness to apply to major gridlines along the X-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the thickness to apply to major gridlines along the Y-axis.
 * Sets the thickness to apply to major gridlines along the Y-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the thickness to apply to minor gridlines along the X-axis.
 * Sets the thickness to apply to minor gridlines along the X-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the thickness to apply to minor gridlines along the Y-axis.
 * Sets the thickness to apply to minor gridlines along the Y-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the color to apply to stripes along the X-axis.
 * Sets the color to apply to stripes along the X-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the color to apply to stripes along the Y-axis.
 * Sets the color to apply to stripes along the Y-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the color to apply to the X-axis line.
 * Sets the color to apply to the X-axis line.
 * 
 * \@optionValue New value to be set.
 * Gets  the color to apply to the Y-axis line.
 * Sets the color to apply to the Y-axis line.
 * 
 * \@optionValue New value to be set.
 * Gets  the thickness to apply to the X-axis line.
 * Sets the thickness to apply to the X-axis line.
 * 
 * \@optionValue New value to be set.
 * Gets  the thickness to apply to the Y-axis line.
 * Sets the thickness to apply to the Y-axis line.
 * 
 * \@optionValue New value to be set.
 * Gets  the length of tickmarks along the X-axis.
 * Sets the length of tickmarks along the X-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the length of tickmarks along the Y-axis.
 * Sets the length of tickmarks along the Y-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the color to apply to tickmarks along the X-axis.
 * Sets the color to apply to tickmarks along the X-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the color to apply to tickmarks along the Y-axis.
 * Sets the color to apply to tickmarks along the Y-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the thickness to apply to tickmarks along the X-axis.
 * Sets the thickness to apply to tickmarks along the X-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the thickness to apply to tickmarks along the Y-axis.
 * Sets the thickness to apply to tickmarks along the Y-axis.
 * 
 * \@optionValue New value to be set.
 * Text to display below the X-axis.
 * Text to display below the X-axis.
 * 
 * \@optionValue New value to be set.
 * Text to display to the left of the Y-axis.
 * Text to display to the left of the Y-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the color to apply to minor gridlines along the X-axis.
 * Sets the color to apply to minor gridlines along the X-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the color to apply to minor gridlines along the Y-axis.
 * Sets the color to apply to minor gridlines along the Y-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the angle of rotation for labels along the X-axis.
 * Sets the angle of rotation for labels along the X-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the angle of rotation for labels along the Y-axis.
 * Sets the angle of rotation for labels along the Y-axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the distance between the X-axis and the bottom of the chart.
 * Sets the distance between the X-axis and the bottom of the chart.
 * 
 * \@optionValue New value to be set.
 * Gets  the distance between the Y-axis and the left edge of the chart.
 * Sets the distance between the Y-axis and the left edge of the chart.
 * 
 * \@optionValue New value to be set.
 * Gets  the angle of rotation for the X-axis title.
 * Sets the angle of rotation for the X-axis title.
 * 
 * \@optionValue New value to be set.
 * Gets  the angle of rotation for the Y-axis title.
 * Sets the angle of rotation for the Y-axis title.
 * 
 * \@optionValue New value to be set.
 * Gets  the rendering resolution for series in this chart.
 * Where n = Resolution, for every n horizontal pixels, combine all items into a single datapoint.  When Resolution = 0, all datapoints will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
 * Sets the rendering resolution for series in this chart.
 * Where n = Resolution, for every n horizontal pixels, combine all items into a single datapoint.  When Resolution = 0, all datapoints will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
 * 
 * \@optionValue New value to be set.
 * Gets  the palette of brushes to used for coloring trend lines in this chart. The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * Sets the palette of brushes to used for coloring trend lines in this chart. The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * 
 * \@optionValue New value to be set.
 * Gets  the formula used for calculating trend lines in this chart.
 * Sets the formula used for calculating trend lines in this chart.
 * 
 * \@optionValue New value to be set.
 * Gets  the thickness of the chart series. Depending on the ChartType, this can be the main brush used, or just the outline.
 * Sets the thickness of the chart series. Depending on the ChartType, this can be the main brush used, or just the outline.
 * 
 * \@optionValue New value to be set.
 * Gets  collection of marker shapes used for representing data points of series in this chart.
 * When MarkerTypes is null or empty, each series' marker type will be set to none or automatic, depending on the series type.
 * Sets collection of marker shapes used for representing data points of series in this chart.
 * When MarkerTypes is null or empty, each series' marker type will be set to none or automatic, depending on the series type.
 * 
 * \@optionValue New value to be set.
 * Gets  the palette of brushes used for coloring fill of data point markers.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * Sets the palette of brushes used for coloring fill of data point markers.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * 
 * \@optionValue New value to be set.
 * Gets  the palette of brushes used for coloring outline of data point markers.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * Sets the palette of brushes used for coloring outline of data point markers.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * 
 * \@optionValue New value to be set.
 * Gets  the thickness of the trend lines in this chart.
 * Sets the thickness of the trend lines in this chart.
 * 
 * \@optionValue New value to be set.
 * Gets  whether the direction of the X-axis is inverted, placing the first data items on the right side instead of left side
 * Sets whether the direction of the X-axis is inverted, placing the first data items on the right side instead of left side
 * 
 * \@optionValue New value to be set.
 * Gets  whether the direction of the Y-axis is inverted, placing minimum numeric value at the top of the axis instead of bottom
 * Sets whether the direction of the Y-axis is inverted, placing minimum numeric value at the top of the axis instead of bottom
 * 
 * \@optionValue New value to be set.
 * Gets  the palette used for coloring negative items of Waterfall chart type.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * Sets the palette used for coloring negative items of Waterfall chart type.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * 
 * \@optionValue New value to be set.
 * Gets  the horizontal alignment of the X-axis title.
 * Sets the horizontal alignment of the X-axis title.
 * 
 * \@optionValue New value to be set.
 * Gets  the vertical alignment of the Y-axis title.
 * Sets the vertical alignment of the Y-axis title.
 * 
 * \@optionValue New value to be set.
 * Gets  the horizontal alignment of X-axis labels.
 * Sets the horizontal alignment of X-axis labels.
 * 
 * \@optionValue New value to be set.
 * Gets  the horizontal alignment of Y-axis labels.
 * Sets the horizontal alignment of Y-axis labels.
 * 
 * \@optionValue New value to be set.
 * Gets  the vertical alignment of X-axis labels.
 * Sets the vertical alignment of X-axis labels.
 * 
 * \@optionValue New value to be set.
 * Gets  the vertical alignment of Y-axis labels.
 * Sets the vertical alignment of Y-axis labels.
 * 
 * \@optionValue New value to be set.
 * Gets  the visibility of X-axis labels.
 * Sets the visibility of X-axis labels.
 * 
 * \@optionValue New value to be set.
 * Gets  the visibility of Y-axis labels.
 * Sets the visibility of Y-axis labels.
 * 
 * \@optionValue New value to be set.
 *
 *
 * Gets  a value indicating whether grid and tick lines are aligned to device pixels.
 * Sets a value indicating whether grid and tick lines are aligned to device pixels.
 * 
 * \@optionValue New value to be set.
 * The width of the chart.
 * The width of the chart.
 * 
 * \@optionValue New value to be set.
 * The height of the chart.
 * The height of the chart.
 * 
 * \@optionValue New value to be set.
 * Gets  maximum number of displayed records in chart.
 * Sets maximum number of displayed records in chart.
 * 
 * \@optionValue New value to be set.
 * Gets  a valid data source.
 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
 * Sets a valid data source.
 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
 * 
 * \@optionValue New value to be set.
 * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
 * 
 * \@optionValue New value to be set.
 * Gets  url which is used for sending JSON on request for remote data.
 * Sets url which is used for sending JSON on request for remote data.
 * 
 * \@optionValue New value to be set.
 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
 * 
 * \@optionValue New value to be set.
 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
 * 
 * \@optionValue New value to be set.
 * Event raised when a property value is changed.
 * Event raised when a property value is changed.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before data binding.
 * Return false in order to cancel data binding.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
 * Event which is raised before data binding.
 * Return false in order to cancel data binding.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after data binding.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.data to obtain reference to array actual data which is displayed by chart.
 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
 * Event which is raised after data binding.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.data to obtain reference to array actual data which is displayed by chart.
 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before tooltip is updated.
 * Return false in order to cancel updating and hide tooltip.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
 * Event which is raised before tooltip is updated.
 * Return false in order to cancel updating and hide tooltip.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before tooltip is hidden.
 * Return false in order to cancel hiding and keep tooltip visible.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.item to obtain reference to item.
 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
 * Event which is raised before tooltip is hidden.
 * Return false in order to cancel hiding and keep tooltip visible.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.item to obtain reference to item.
 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgCategoryChart} methodName_or_optionLiteral_or_options
 * @param {...!Object|number|string|!IgCategoryChart|?} item_or_index_or_dataSource_or_optionName_or_options_or_methodParams
 * @return {void|number|!Object|!Array<?>|?|string|boolean|!PropertyChangedEvent|!DataBindingEvent|!DataBoundEvent|!UpdateTooltipEvent|!HideTooltipEvent|!JQuery}
 */
JQuery.prototype.igCategoryChart = function(methodName_or_optionLiteral_or_options, item_or_index_or_dataSource_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgDataChartCrosshairPoint() {}
 /** @type {number} */
IgDataChartCrosshairPoint.prototype.x;
 /** @type {number} */
IgDataChartCrosshairPoint.prototype.y;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgDataChartLegend() {}
 /** @type {string} */
IgDataChartLegend.prototype.element;
 /** @type {string} */
IgDataChartLegend.prototype.type;
 /** @type {(string|number)} */
IgDataChartLegend.prototype.width;
 /** @type {(string|number)} */
IgDataChartLegend.prototype.height;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgDataChartAxes() {}
 /** @type {string} */
IgDataChartAxes.prototype.type;
 /** @type {string} */
IgDataChartAxes.prototype.name;
 /** @type {?} */
IgDataChartAxes.prototype.dataSource;
 /** @type {string} */
IgDataChartAxes.prototype.dataSourceUrl;
 /** @type {string} */
IgDataChartAxes.prototype.dataSourceType;
 /** @type {string} */
IgDataChartAxes.prototype.responseDataKey;
 /** @type {boolean} */
IgDataChartAxes.prototype.remove;
 /** @type {string} */
IgDataChartAxes.prototype.labelLocation;
 /** @type {string} */
IgDataChartAxes.prototype.labelVisibility;
 /** @type {number} */
IgDataChartAxes.prototype.labelExtent;
 /** @type {number} */
IgDataChartAxes.prototype.labelAngle;
 /** @type {string} */
IgDataChartAxes.prototype.labelTextStyle;
 /** @type {string} */
IgDataChartAxes.prototype.labelTextColor;
 /** @type {?} */
IgDataChartAxes.prototype.formatLabel;
 /** @type {string} */
IgDataChartAxes.prototype.stroke;
 /** @type {number} */
IgDataChartAxes.prototype.strokeThickness;
 /** @type {string} */
IgDataChartAxes.prototype.strip;
 /** @type {string} */
IgDataChartAxes.prototype.majorStroke;
 /** @type {number} */
IgDataChartAxes.prototype.majorStrokeThickness;
 /** @type {string} */
IgDataChartAxes.prototype.minorStroke;
 /** @type {number} */
IgDataChartAxes.prototype.minorStrokeThickness;
 /** @type {boolean} */
IgDataChartAxes.prototype.isInverted;
 /** @type {string} */
IgDataChartAxes.prototype.crossingAxis;
 /** @type {?} */
IgDataChartAxes.prototype.crossingValue;
 /** @type {?} */
IgDataChartAxes.prototype.coercionMethods;
 /** @type {?} */
IgDataChartAxes.prototype.label;
 /** @type {number} */
IgDataChartAxes.prototype.gap;
 /** @type {number} */
IgDataChartAxes.prototype.overlap;
 /** @type {number} */
IgDataChartAxes.prototype.startAngleOffset;
 /** @type {number} */
IgDataChartAxes.prototype.interval;
 /** @type {string} */
IgDataChartAxes.prototype.displayType;
 /** @type {boolean} */
IgDataChartAxes.prototype.isDataPreSorted;
 /** @type {(number|!Date)} */
IgDataChartAxes.prototype.minimumValue;
 /** @type {(number|!Date)} */
IgDataChartAxes.prototype.maximumValue;
 /** @type {string} */
IgDataChartAxes.prototype.dateTimeMemberPath;
 /** @type {number} */
IgDataChartAxes.prototype.referenceValue;
 /** @type {boolean} */
IgDataChartAxes.prototype.isLogarithmic;
 /** @type {number} */
IgDataChartAxes.prototype.logarithmBase;
 /** @type {number} */
IgDataChartAxes.prototype.radiusExtentScale;
 /** @type {number} */
IgDataChartAxes.prototype.innerRadiusExtentScale;
 /** @type {string} */
IgDataChartAxes.prototype.title;
 /** @type {string} */
IgDataChartAxes.prototype.titleTextStyle;
 /** @type {number} */
IgDataChartAxes.prototype.titleMargin;
 /** @type {string} */
IgDataChartAxes.prototype.titleHorizontalAlignment;
 /** @type {string} */
IgDataChartAxes.prototype.titleVerticalAlignment;
 /** @type {string} */
IgDataChartAxes.prototype.titlePosition;
 /** @type {number} */
IgDataChartAxes.prototype.titleTopMargin;
 /** @type {number} */
IgDataChartAxes.prototype.titleLeftMargin;
 /** @type {number} */
IgDataChartAxes.prototype.titleRightMargin;
 /** @type {number} */
IgDataChartAxes.prototype.titleBottomMargin;
 /** @type {string} */
IgDataChartAxes.prototype.labelHorizontalAlignment;
 /** @type {string} */
IgDataChartAxes.prototype.labelVerticalAlignment;
 /** @type {number} */
IgDataChartAxes.prototype.labelMargin;
 /** @type {number} */
IgDataChartAxes.prototype.labelTopMargin;
 /** @type {number} */
IgDataChartAxes.prototype.labelLeftMargin;
 /** @type {number} */
IgDataChartAxes.prototype.labelRightMargin;
 /** @type {number} */
IgDataChartAxes.prototype.labelBottomMargin;
 /** @type {boolean} */
IgDataChartAxes.prototype.showFirstLabel;
 /** @type {number} */
IgDataChartAxes.prototype.titleAngle;
 /** @type {number} */
IgDataChartAxes.prototype.tickLength;
 /** @type {number} */
IgDataChartAxes.prototype.tickStrokeThickness;
 /** @type {?} */
IgDataChartAxes.prototype.tickStroke;
 /** @type {boolean} */
IgDataChartAxes.prototype.useClusteringMode;
 /** @type {boolean} */
IgDataChartAxes.prototype.useEnhancedIntervalManagement;
 /** @type {number} */
IgDataChartAxes.prototype.enhancedIntervalMinimumCharacters;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgDataChartSeriesLegend() {}
 /** @type {string} */
IgDataChartSeriesLegend.prototype.element;
 /** @type {string} */
IgDataChartSeriesLegend.prototype.type;
 /** @type {(string|number)} */
IgDataChartSeriesLegend.prototype.width;
 /** @type {(string|number)} */
IgDataChartSeriesLegend.prototype.height;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgDataChartSeries() {}
 /** @type {string} */
IgDataChartSeries.prototype.type;
 /** @type {string} */
IgDataChartSeries.prototype.name;
 /** @type {?} */
IgDataChartSeries.prototype.dataSource;
 /** @type {string} */
IgDataChartSeries.prototype.dataSourceUrl;
 /** @type {string} */
IgDataChartSeries.prototype.dataSourceType;
 /** @type {string} */
IgDataChartSeries.prototype.responseDataKey;
 /** @type {boolean} */
IgDataChartSeries.prototype.remove;
 /** @type {boolean} */
IgDataChartSeries.prototype.showTooltip;
 /** @type {string} */
IgDataChartSeries.prototype.tooltipTemplate;
 /** @type {!IgDataChartSeriesLegend} */
IgDataChartSeries.prototype.legend;
 /** @type {string} */
IgDataChartSeries.prototype.legendItemVisibility;
 /** @type {?} */
IgDataChartSeries.prototype.legendItemBadgeTemplate;
 /** @type {?} */
IgDataChartSeries.prototype.legendItemTemplate;
 /** @type {?} */
IgDataChartSeries.prototype.discreteLegendItemTemplate;
 /** @type {number} */
IgDataChartSeries.prototype.transitionDuration;
 /** @type {?} */
IgDataChartSeries.prototype.transitionEasingFunction;
 /** @type {number} */
IgDataChartSeries.prototype.resolution;
 /** @type {string} */
IgDataChartSeries.prototype.title;
 /** @type {string} */
IgDataChartSeries.prototype.brush;
 /** @type {string} */
IgDataChartSeries.prototype.outline;
 /** @type {number} */
IgDataChartSeries.prototype.thickness;
 /** @type {?} */
IgDataChartSeries.prototype.coercionMethods;
 /** @type {string} */
IgDataChartSeries.prototype.markerType;
 /** @type {?} */
IgDataChartSeries.prototype.markerTemplate;
 /** @type {string} */
IgDataChartSeries.prototype.markerBrush;
 /** @type {string} */
IgDataChartSeries.prototype.markerOutline;
 /** @type {string} */
IgDataChartSeries.prototype.xAxis;
 /** @type {string} */
IgDataChartSeries.prototype.yAxis;
 /** @type {string} */
IgDataChartSeries.prototype.xMemberPath;
 /** @type {string} */
IgDataChartSeries.prototype.yMemberPath;
 /** @type {string} */
IgDataChartSeries.prototype.trendLineType;
 /** @type {string} */
IgDataChartSeries.prototype.trendLineBrush;
 /** @type {number} */
IgDataChartSeries.prototype.trendLineThickness;
 /** @type {number} */
IgDataChartSeries.prototype.trendLinePeriod;
 /** @type {number} */
IgDataChartSeries.prototype.trendLineZIndex;
 /** @type {number} */
IgDataChartSeries.prototype.maximumMarkers;
 /** @type {string} */
IgDataChartSeries.prototype.unknownValuePlotting;
 /** @type {string} */
IgDataChartSeries.prototype.radiusMemberPath;
 /** @type {?} */
IgDataChartSeries.prototype.radiusScale;
 /** @type {string} */
IgDataChartSeries.prototype.labelMemberPath;
 /** @type {string} */
IgDataChartSeries.prototype.fillMemberPath;
 /** @type {?} */
IgDataChartSeries.prototype.fillScale;
 /** @type {string} */
IgDataChartSeries.prototype.angleAxis;
 /** @type {string} */
IgDataChartSeries.prototype.valueAxis;
 /** @type {boolean} */
IgDataChartSeries.prototype.clipSeriesToBounds;
 /** @type {string} */
IgDataChartSeries.prototype.valueMemberPath;
 /** @type {number} */
IgDataChartSeries.prototype.radiusX;
 /** @type {number} */
IgDataChartSeries.prototype.radiusY;
 /** @type {number} */
IgDataChartSeries.prototype.angleMemberPath;
 /** @type {string} */
IgDataChartSeries.prototype.radiusAxis;
 /** @type {boolean} */
IgDataChartSeries.prototype.useCartesianInterpolation;
 /** @type {string} */
IgDataChartSeries.prototype.negativeBrush;
 /** @type {string} */
IgDataChartSeries.prototype.splineType;
 /** @type {string} */
IgDataChartSeries.prototype.lowMemberPath;
 /** @type {string} */
IgDataChartSeries.prototype.highMemberPath;
 /** @type {string} */
IgDataChartSeries.prototype.openMemberPath;
 /** @type {string} */
IgDataChartSeries.prototype.closeMemberPath;
 /** @type {string} */
IgDataChartSeries.prototype.volumeMemberPath;
 /** @type {string} */
IgDataChartSeries.prototype.displayType;
 /** @type {number} */
IgDataChartSeries.prototype.ignoreFirst;
 /** @type {number} */
IgDataChartSeries.prototype.period;
 /** @type {number} */
IgDataChartSeries.prototype.shortPeriod;
 /** @type {number} */
IgDataChartSeries.prototype.longPeriod;
 /** @type {string} */
IgDataChartSeries.prototype.markerCollisionAvoidance;
 /** @type {boolean} */
IgDataChartSeries.prototype.useHighMarkerFidelity;
 /** @type {boolean} */
IgDataChartSeries.prototype.useBruteForce;
 /** @type {boolean} */
IgDataChartSeries.prototype.progressiveLoad;
 /** @type {boolean} */
IgDataChartSeries.prototype.mouseOverEnabled;
 /** @type {boolean} */
IgDataChartSeries.prototype.useSquareCutoffStyle;
 /** @type {number} */
IgDataChartSeries.prototype.heatMinimum;
 /** @type {number} */
IgDataChartSeries.prototype.heatMaximum;
 /** @type {?} */
IgDataChartSeries.prototype.heatMinimumColor;
 /** @type {?} */
IgDataChartSeries.prototype.heatMaximumColor;
 /** @type {!Array<?>} */
IgDataChartSeries.prototype.series;
 /** @type {boolean} */
IgDataChartSeries.prototype.isDropShadowEnabled;
 /** @type {boolean} */
IgDataChartSeries.prototype.useSingleShadow;
 /** @type {?} */
IgDataChartSeries.prototype.shadowColor;
 /** @type {number} */
IgDataChartSeries.prototype.shadowBlur;
 /** @type {number} */
IgDataChartSeries.prototype.shadowOffsetX;
 /** @type {number} */
IgDataChartSeries.prototype.shadowOffsetY;
 /** @type {boolean} */
IgDataChartSeries.prototype.isTransitionInEnabled;
 /** @type {string} */
IgDataChartSeries.prototype.transitionInSpeedType;
 /** @type {string} */
IgDataChartSeries.prototype.transitionInMode;
 /** @type {number} */
IgDataChartSeries.prototype.transitionInDuration;
 /** @type {number} */
IgDataChartSeries.prototype.radius;
 /** @type {number} */
IgDataChartSeries.prototype.areaFillOpacity;
 /** @type {boolean} */
IgDataChartSeries.prototype.expectFunctions;
 /** @type {boolean} */
IgDataChartSeries.prototype.useInterpolation;
 /** @type {boolean} */
IgDataChartSeries.prototype.skipUnknownValues;
 /** @type {string} */
IgDataChartSeries.prototype.verticalLineVisibility;
 /** @type {string} */
IgDataChartSeries.prototype.horizontalLineVisibility;
 /** @type {string} */
IgDataChartSeries.prototype.targetSeries;
 /** @type {string} */
IgDataChartSeries.prototype.targetAxis;
 /** @type {boolean} */
IgDataChartSeries.prototype.isCustomCategoryStyleAllowed;
 /** @type {boolean} */
IgDataChartSeries.prototype.isCustomCategoryMarkerStyleAllowed;
 /** @type {string} */
IgDataChartSeries.prototype.consolidatedColumnVerticalPosition;
 /** @type {boolean} */
IgDataChartSeries.prototype.isHighlightingEnabled;
 /** @type {number} */
IgDataChartSeries.prototype.bandHighlightWidth;
 /** @type {string} */
IgDataChartSeries.prototype.highlightType;
 /** @type {string} */
IgDataChartSeries.prototype.tooltipPosition;
 /** @type {?} */
IgDataChartSeries.prototype.cursorPosition;
 /** @type {boolean} */
IgDataChartSeries.prototype.isDefaultCrosshairDisabled;
 /** @type {boolean} */
IgDataChartSeries.prototype.useIndex;
 /** @type {boolean} */
IgDataChartSeries.prototype.useLegend;
 /** @type {boolean} */
IgDataChartSeries.prototype.reverseLegendOrder;
 /** @type {string} */
IgDataChartSeries.prototype.hitTestMode;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function TooltipShowingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function TooltipShowingEventUIParam() {}
 /** @type {?} */
TooltipShowingEventUIParam.prototype.element;
 /** @type {?} */
TooltipShowingEventUIParam.prototype.item;
 /** @type {?} */
TooltipShowingEventUIParam.prototype.chart;
 /** @type {?} */
TooltipShowingEventUIParam.prototype.series;
 /** @type {?} */
TooltipShowingEventUIParam.prototype.actualItemBrush;
 /** @type {?} */
TooltipShowingEventUIParam.prototype.actualSeriesBrush;
/**
 * @record
 * @struct
 */
function TooltipShownEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function TooltipShownEventUIParam() {}
 /** @type {?} */
TooltipShownEventUIParam.prototype.element;
 /** @type {?} */
TooltipShownEventUIParam.prototype.item;
 /** @type {?} */
TooltipShownEventUIParam.prototype.chart;
 /** @type {?} */
TooltipShownEventUIParam.prototype.series;
 /** @type {?} */
TooltipShownEventUIParam.prototype.actualItemBrush;
 /** @type {?} */
TooltipShownEventUIParam.prototype.actualSeriesBrush;
/**
 * @record
 * @struct
 */
function TooltipHidingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function TooltipHidingEventUIParam() {}
 /** @type {?} */
TooltipHidingEventUIParam.prototype.element;
 /** @type {?} */
TooltipHidingEventUIParam.prototype.item;
 /** @type {?} */
TooltipHidingEventUIParam.prototype.chart;
 /** @type {?} */
TooltipHidingEventUIParam.prototype.series;
 /** @type {?} */
TooltipHidingEventUIParam.prototype.actualItemBrush;
 /** @type {?} */
TooltipHidingEventUIParam.prototype.actualSeriesBrush;
/**
 * @record
 * @struct
 */
function TooltipHiddenEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function TooltipHiddenEventUIParam() {}
 /** @type {?} */
TooltipHiddenEventUIParam.prototype.element;
 /** @type {?} */
TooltipHiddenEventUIParam.prototype.item;
 /** @type {?} */
TooltipHiddenEventUIParam.prototype.chart;
 /** @type {?} */
TooltipHiddenEventUIParam.prototype.series;
 /** @type {?} */
TooltipHiddenEventUIParam.prototype.actualItemBrush;
 /** @type {?} */
TooltipHiddenEventUIParam.prototype.actualSeriesBrush;
/**
 * @record
 * @struct
 */
function BrowserNotSupportedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function BrowserNotSupportedEventUIParam() {}
/**
 * @record
 * @struct
 */
function SeriesCursorMouseMoveEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SeriesCursorMouseMoveEventUIParam() {}
 /** @type {?} */
SeriesCursorMouseMoveEventUIParam.prototype.item;
 /** @type {?} */
SeriesCursorMouseMoveEventUIParam.prototype.chart;
 /** @type {?} */
SeriesCursorMouseMoveEventUIParam.prototype.series;
 /** @type {?} */
SeriesCursorMouseMoveEventUIParam.prototype.actualItemBrush;
 /** @type {?} */
SeriesCursorMouseMoveEventUIParam.prototype.actualSeriesBrush;
 /** @type {?} */
SeriesCursorMouseMoveEventUIParam.prototype.positionX;
 /** @type {?} */
SeriesCursorMouseMoveEventUIParam.prototype.positionY;
/**
 * @record
 * @struct
 */
function SeriesMouseLeftButtonDownEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SeriesMouseLeftButtonDownEventUIParam() {}
 /** @type {?} */
SeriesMouseLeftButtonDownEventUIParam.prototype.item;
 /** @type {?} */
SeriesMouseLeftButtonDownEventUIParam.prototype.chart;
 /** @type {?} */
SeriesMouseLeftButtonDownEventUIParam.prototype.series;
 /** @type {?} */
SeriesMouseLeftButtonDownEventUIParam.prototype.actualItemBrush;
 /** @type {?} */
SeriesMouseLeftButtonDownEventUIParam.prototype.actualSeriesBrush;
 /** @type {?} */
SeriesMouseLeftButtonDownEventUIParam.prototype.positionX;
 /** @type {?} */
SeriesMouseLeftButtonDownEventUIParam.prototype.positionY;
/**
 * @record
 * @struct
 */
function SeriesMouseLeftButtonUpEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SeriesMouseLeftButtonUpEventUIParam() {}
 /** @type {?} */
SeriesMouseLeftButtonUpEventUIParam.prototype.item;
 /** @type {?} */
SeriesMouseLeftButtonUpEventUIParam.prototype.chart;
 /** @type {?} */
SeriesMouseLeftButtonUpEventUIParam.prototype.series;
 /** @type {?} */
SeriesMouseLeftButtonUpEventUIParam.prototype.actualItemBrush;
 /** @type {?} */
SeriesMouseLeftButtonUpEventUIParam.prototype.actualSeriesBrush;
 /** @type {?} */
SeriesMouseLeftButtonUpEventUIParam.prototype.positionX;
 /** @type {?} */
SeriesMouseLeftButtonUpEventUIParam.prototype.positionY;
/**
 * @record
 * @struct
 */
function SeriesMouseMoveEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SeriesMouseMoveEventUIParam() {}
 /** @type {?} */
SeriesMouseMoveEventUIParam.prototype.item;
 /** @type {?} */
SeriesMouseMoveEventUIParam.prototype.chart;
 /** @type {?} */
SeriesMouseMoveEventUIParam.prototype.series;
 /** @type {?} */
SeriesMouseMoveEventUIParam.prototype.actualItemBrush;
 /** @type {?} */
SeriesMouseMoveEventUIParam.prototype.actualSeriesBrush;
 /** @type {?} */
SeriesMouseMoveEventUIParam.prototype.positionX;
 /** @type {?} */
SeriesMouseMoveEventUIParam.prototype.positionY;
/**
 * @record
 * @struct
 */
function SeriesMouseEnterEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SeriesMouseEnterEventUIParam() {}
 /** @type {?} */
SeriesMouseEnterEventUIParam.prototype.item;
 /** @type {?} */
SeriesMouseEnterEventUIParam.prototype.chart;
 /** @type {?} */
SeriesMouseEnterEventUIParam.prototype.series;
 /** @type {?} */
SeriesMouseEnterEventUIParam.prototype.actualItemBrush;
 /** @type {?} */
SeriesMouseEnterEventUIParam.prototype.actualSeriesBrush;
 /** @type {?} */
SeriesMouseEnterEventUIParam.prototype.positionX;
 /** @type {?} */
SeriesMouseEnterEventUIParam.prototype.positionY;
/**
 * @record
 * @struct
 */
function SeriesMouseLeaveEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SeriesMouseLeaveEventUIParam() {}
 /** @type {?} */
SeriesMouseLeaveEventUIParam.prototype.item;
 /** @type {?} */
SeriesMouseLeaveEventUIParam.prototype.chart;
 /** @type {?} */
SeriesMouseLeaveEventUIParam.prototype.series;
 /** @type {?} */
SeriesMouseLeaveEventUIParam.prototype.actualItemBrush;
 /** @type {?} */
SeriesMouseLeaveEventUIParam.prototype.actualSeriesBrush;
 /** @type {?} */
SeriesMouseLeaveEventUIParam.prototype.positionX;
 /** @type {?} */
SeriesMouseLeaveEventUIParam.prototype.positionY;
/**
 * @record
 * @struct
 */
function WindowRectChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function WindowRectChangedEventUIParam() {}
 /** @type {?} */
WindowRectChangedEventUIParam.prototype.chart;
 /** @type {?} */
WindowRectChangedEventUIParam.prototype.newHeight;
 /** @type {?} */
WindowRectChangedEventUIParam.prototype.newLeft;
 /** @type {?} */
WindowRectChangedEventUIParam.prototype.newTop;
 /** @type {?} */
WindowRectChangedEventUIParam.prototype.newWidth;
 /** @type {?} */
WindowRectChangedEventUIParam.prototype.oldHeight;
 /** @type {?} */
WindowRectChangedEventUIParam.prototype.oldLeft;
 /** @type {?} */
WindowRectChangedEventUIParam.prototype.oldTop;
 /** @type {?} */
WindowRectChangedEventUIParam.prototype.oldWidth;
/**
 * @record
 * @struct
 */
function GridAreaRectChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function GridAreaRectChangedEventUIParam() {}
 /** @type {?} */
GridAreaRectChangedEventUIParam.prototype.chart;
 /** @type {?} */
GridAreaRectChangedEventUIParam.prototype.newHeight;
 /** @type {?} */
GridAreaRectChangedEventUIParam.prototype.newLeft;
 /** @type {?} */
GridAreaRectChangedEventUIParam.prototype.newTop;
 /** @type {?} */
GridAreaRectChangedEventUIParam.prototype.newWidth;
 /** @type {?} */
GridAreaRectChangedEventUIParam.prototype.oldHeight;
 /** @type {?} */
GridAreaRectChangedEventUIParam.prototype.oldLeft;
 /** @type {?} */
GridAreaRectChangedEventUIParam.prototype.oldTop;
 /** @type {?} */
GridAreaRectChangedEventUIParam.prototype.oldWidth;
/**
 * @record
 * @struct
 */
function RefreshCompletedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RefreshCompletedEventUIParam() {}
 /** @type {?} */
RefreshCompletedEventUIParam.prototype.chart;
/**
 * @record
 * @struct
 */
function AxisRangeChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function AxisRangeChangedEventUIParam() {}
 /** @type {?} */
AxisRangeChangedEventUIParam.prototype.axis;
 /** @type {?} */
AxisRangeChangedEventUIParam.prototype.chart;
 /** @type {?} */
AxisRangeChangedEventUIParam.prototype.newMaximumValue;
 /** @type {?} */
AxisRangeChangedEventUIParam.prototype.newMinimumValue;
 /** @type {?} */
AxisRangeChangedEventUIParam.prototype.oldMaximumValue;
 /** @type {?} */
AxisRangeChangedEventUIParam.prototype.oldMinimumValue;
/**
 * @record
 * @struct
 */
function TypicalBasedOnEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function TypicalBasedOnEventUIParam() {}
 /** @type {?} */
TypicalBasedOnEventUIParam.prototype.chart;
 /** @type {?} */
TypicalBasedOnEventUIParam.prototype.series;
 /** @type {?} */
TypicalBasedOnEventUIParam.prototype.count;
 /** @type {?} */
TypicalBasedOnEventUIParam.prototype.position;
 /** @type {?} */
TypicalBasedOnEventUIParam.prototype.supportingCalculations;
 /** @type {?} */
TypicalBasedOnEventUIParam.prototype.dataSource;
 /** @type {?} */
TypicalBasedOnEventUIParam.prototype.basedOn;
/**
 * @record
 * @struct
 */
function ProgressiveLoadStatusChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ProgressiveLoadStatusChangedEventUIParam() {}
 /** @type {?} */
ProgressiveLoadStatusChangedEventUIParam.prototype.chart;
 /** @type {?} */
ProgressiveLoadStatusChangedEventUIParam.prototype.series;
 /** @type {?} */
ProgressiveLoadStatusChangedEventUIParam.prototype.currentStatus;
/**
 * @record
 * @struct
 */
function AssigningCategoryStyleEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function AssigningCategoryStyleEventUIParam() {}
 /** @type {?} */
AssigningCategoryStyleEventUIParam.prototype.chart;
 /** @type {?} */
AssigningCategoryStyleEventUIParam.prototype.series;
 /** @type {?} */
AssigningCategoryStyleEventUIParam.prototype.startIndex;
 /** @type {?} */
AssigningCategoryStyleEventUIParam.prototype.endIndex;
 /** @type {?} */
AssigningCategoryStyleEventUIParam.prototype.hasDateRange;
 /** @type {?} */
AssigningCategoryStyleEventUIParam.prototype.startDate;
 /** @type {?} */
AssigningCategoryStyleEventUIParam.prototype.endDate;
 /** @type {?} */
AssigningCategoryStyleEventUIParam.prototype.getItems;
 /** @type {?} */
AssigningCategoryStyleEventUIParam.prototype.fill;
 /** @type {?} */
AssigningCategoryStyleEventUIParam.prototype.stroke;
 /** @type {?} */
AssigningCategoryStyleEventUIParam.prototype.opacity;
 /** @type {?} */
AssigningCategoryStyleEventUIParam.prototype.highlightingHandled;
 /** @type {?} */
AssigningCategoryStyleEventUIParam.prototype.maxAllSeriesHighlightingProgress;
 /** @type {?} */
AssigningCategoryStyleEventUIParam.prototype.sumAllSeriesHighlightingProgress;
/**
 * @record
 * @struct
 */
function AssigningCategoryMarkerStyleEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function AssigningCategoryMarkerStyleEventUIParam() {}
 /** @type {?} */
AssigningCategoryMarkerStyleEventUIParam.prototype.chart;
 /** @type {?} */
AssigningCategoryMarkerStyleEventUIParam.prototype.series;
 /** @type {?} */
AssigningCategoryMarkerStyleEventUIParam.prototype.startIndex;
 /** @type {?} */
AssigningCategoryMarkerStyleEventUIParam.prototype.endIndex;
 /** @type {?} */
AssigningCategoryMarkerStyleEventUIParam.prototype.hasDateRange;
 /** @type {?} */
AssigningCategoryMarkerStyleEventUIParam.prototype.startDate;
 /** @type {?} */
AssigningCategoryMarkerStyleEventUIParam.prototype.endDate;
 /** @type {?} */
AssigningCategoryMarkerStyleEventUIParam.prototype.getItems;
 /** @type {?} */
AssigningCategoryMarkerStyleEventUIParam.prototype.fill;
 /** @type {?} */
AssigningCategoryMarkerStyleEventUIParam.prototype.stroke;
 /** @type {?} */
AssigningCategoryMarkerStyleEventUIParam.prototype.opacity;
 /** @type {?} */
AssigningCategoryMarkerStyleEventUIParam.prototype.highlightingHandled;
 /** @type {?} */
AssigningCategoryMarkerStyleEventUIParam.prototype.maxAllSeriesHighlightingProgress;
 /** @type {?} */
AssigningCategoryMarkerStyleEventUIParam.prototype.sumAllSeriesHighlightingProgress;
/**
 * @record
 * @struct
 */
function IgDataChart() {}
 /** @type {boolean} */
IgDataChart.prototype.isPagePanningAllowed;
 /** @type {string} */
IgDataChart.prototype.syncChannel;
 /** @type {boolean} */
IgDataChart.prototype.synchronizeVertically;
 /** @type {boolean} */
IgDataChart.prototype.synchronizeHorizontally;
 /** @type {!IgDataChartCrosshairPoint} */
IgDataChart.prototype.crosshairPoint;
 /** @type {?} */
IgDataChart.prototype.windowRect;
 /** @type {boolean} */
IgDataChart.prototype.horizontalZoomable;
 /** @type {boolean} */
IgDataChart.prototype.verticalZoomable;
 /** @type {string} */
IgDataChart.prototype.windowResponse;
 /** @type {number} */
IgDataChart.prototype.windowRectMinWidth;
 /** @type {string} */
IgDataChart.prototype.overviewPlusDetailPaneVisibility;
 /** @type {string} */
IgDataChart.prototype.crosshairVisibility;
 /** @type {string} */
IgDataChart.prototype.plotAreaBackground;
 /** @type {string} */
IgDataChart.prototype.defaultInteraction;
 /** @type {string} */
IgDataChart.prototype.dragModifier;
 /** @type {string} */
IgDataChart.prototype.panModifier;
 /** @type {?} */
IgDataChart.prototype.previewRect;
 /** @type {number} */
IgDataChart.prototype.windowPositionHorizontal;
 /** @type {number} */
IgDataChart.prototype.windowPositionVertical;
 /** @type {number} */
IgDataChart.prototype.windowScaleHorizontal;
 /** @type {number} */
IgDataChart.prototype.windowScaleVertical;
 /** @type {?} */
IgDataChart.prototype.circleMarkerTemplate;
 /** @type {?} */
IgDataChart.prototype.triangleMarkerTemplate;
 /** @type {?} */
IgDataChart.prototype.pyramidMarkerTemplate;
 /** @type {?} */
IgDataChart.prototype.squareMarkerTemplate;
 /** @type {?} */
IgDataChart.prototype.diamondMarkerTemplate;
 /** @type {?} */
IgDataChart.prototype.pentagonMarkerTemplate;
 /** @type {?} */
IgDataChart.prototype.hexagonMarkerTemplate;
 /** @type {?} */
IgDataChart.prototype.tetragramMarkerTemplate;
 /** @type {?} */
IgDataChart.prototype.pentagramMarkerTemplate;
 /** @type {?} */
IgDataChart.prototype.hexagramMarkerTemplate;
 /** @type {number} */
IgDataChart.prototype.topMargin;
 /** @type {number} */
IgDataChart.prototype.leftMargin;
 /** @type {number} */
IgDataChart.prototype.rightMargin;
 /** @type {number} */
IgDataChart.prototype.bottomMargin;
 /** @type {number} */
IgDataChart.prototype.autoMarginWidth;
 /** @type {number} */
IgDataChart.prototype.autoMarginHeight;
 /** @type {boolean} */
IgDataChart.prototype.isSquare;
 /** @type {string} */
IgDataChart.prototype.gridMode;
 /** @type {?} */
IgDataChart.prototype.brushes;
 /** @type {?} */
IgDataChart.prototype.markerBrushes;
 /** @type {?} */
IgDataChart.prototype.outlines;
 /** @type {?} */
IgDataChart.prototype.markerOutlines;
 /** @type {(string|number)} */
IgDataChart.prototype.width;
 /** @type {(string|number)} */
IgDataChart.prototype.height;
 /** @type {?} */
IgDataChart.prototype.size;
 /** @type {?} */
IgDataChart.prototype.dataSource;
 /** @type {string} */
IgDataChart.prototype.dataSourceUrl;
 /** @type {string} */
IgDataChart.prototype.dataSourceType;
 /** @type {string} */
IgDataChart.prototype.responseDataKey;
 /** @type {boolean} */
IgDataChart.prototype.isSurfaceInteractionDisabled;
 /** @type {boolean} */
IgDataChart.prototype.animateSeriesWhenAxisRangeChanges;
 /** @type {string} */
IgDataChart.prototype.title;
 /** @type {string} */
IgDataChart.prototype.subtitle;
 /** @type {string} */
IgDataChart.prototype.titleTextStyle;
 /** @type {number} */
IgDataChart.prototype.titleTopMargin;
 /** @type {number} */
IgDataChart.prototype.titleLeftMargin;
 /** @type {number} */
IgDataChart.prototype.titleRightMargin;
 /** @type {number} */
IgDataChart.prototype.titleBottomMargin;
 /** @type {string} */
IgDataChart.prototype.subtitleTextStyle;
 /** @type {number} */
IgDataChart.prototype.subtitleTopMargin;
 /** @type {number} */
IgDataChart.prototype.subtitleLeftMargin;
 /** @type {number} */
IgDataChart.prototype.subtitleRightMargin;
 /** @type {number} */
IgDataChart.prototype.subtitleBottomMargin;
 /** @type {?} */
IgDataChart.prototype.titleTextColor;
 /** @type {?} */
IgDataChart.prototype.subtitleTextColor;
 /** @type {string} */
IgDataChart.prototype.titleHorizontalAlignment;
 /** @type {string} */
IgDataChart.prototype.subtitleHorizontalAlignment;
 /** @type {number} */
IgDataChart.prototype.highlightingTransitionDuration;
 /** @type {boolean} */
IgDataChart.prototype.useTiledZooming;
 /** @type {boolean} */
IgDataChart.prototype.preferHigherResolutionTiles;
 /** @type {number} */
IgDataChart.prototype.pixelScalingRatio;
 /** @type {number} */
IgDataChart.prototype.zoomTileCacheSize;
 /** @type {string} */
IgDataChart.prototype.contentHitTestMode;
 /** @type {!IgDataChartLegend} */
IgDataChart.prototype.legend;
 /** @type {!Array<!IgDataChartAxes>} */
IgDataChart.prototype.axes;
 /** @type {!Array<!IgDataChartSeries>} */
IgDataChart.prototype.series;
 /** @type {string} */
IgDataChart.prototype.theme;
 /** @type {!TooltipShowingEvent} */
IgDataChart.prototype.tooltipShowing;
 /** @type {!TooltipShownEvent} */
IgDataChart.prototype.tooltipShown;
 /** @type {!TooltipHidingEvent} */
IgDataChart.prototype.tooltipHiding;
 /** @type {!TooltipHiddenEvent} */
IgDataChart.prototype.tooltipHidden;
 /** @type {!BrowserNotSupportedEvent} */
IgDataChart.prototype.browserNotSupported;
 /** @type {!SeriesCursorMouseMoveEvent} */
IgDataChart.prototype.seriesCursorMouseMove;
 /** @type {!SeriesMouseLeftButtonDownEvent} */
IgDataChart.prototype.seriesMouseLeftButtonDown;
 /** @type {!SeriesMouseLeftButtonUpEvent} */
IgDataChart.prototype.seriesMouseLeftButtonUp;
 /** @type {!SeriesMouseMoveEvent} */
IgDataChart.prototype.seriesMouseMove;
 /** @type {!SeriesMouseEnterEvent} */
IgDataChart.prototype.seriesMouseEnter;
 /** @type {!SeriesMouseLeaveEvent} */
IgDataChart.prototype.seriesMouseLeave;
 /** @type {!WindowRectChangedEvent} */
IgDataChart.prototype.windowRectChanged;
 /** @type {!GridAreaRectChangedEvent} */
IgDataChart.prototype.gridAreaRectChanged;
 /** @type {!RefreshCompletedEvent} */
IgDataChart.prototype.refreshCompleted;
 /** @type {!AxisRangeChangedEvent} */
IgDataChart.prototype.axisRangeChanged;
 /** @type {!TypicalBasedOnEvent} */
IgDataChart.prototype.typicalBasedOn;
 /** @type {!ProgressiveLoadStatusChangedEvent} */
IgDataChart.prototype.progressiveLoadStatusChanged;
 /** @type {!AssigningCategoryStyleEvent} */
IgDataChart.prototype.assigningCategoryStyle;
 /** @type {!AssigningCategoryMarkerStyleEvent} */
IgDataChart.prototype.assigningCategoryMarkerStyle;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgDataChartMethods() {}

/**
 * @return {void}
 */
IgDataChartMethods.prototype.option = function() {};

/**
 * Returns the element holding the chart.
 * @return {void}
 */
IgDataChartMethods.prototype.widget = function() {};

/**
 * Returns the ID of parent element holding the chart.
 * @return {string}
 */
IgDataChartMethods.prototype.id = function() {};

/**
 * Exports the chart to a PNG image.
 * 
 * @param {!Object=} width     The width of the image.
 * @param {!Object=} height     The height of the image.
 * @return {!Object}
 */
IgDataChartMethods.prototype.exportImage = function(width, height) {};

/**
 * Destroys the widget.
 * @return {void}
 */
IgDataChartMethods.prototype.destroy = function() {};

/**
 * Notify the chart that styles it draws colors from may have been updated.
 * @return {!Object}
 */
IgDataChartMethods.prototype.styleUpdated = function() {};

/**
 * Resets the zoom level of the chart to default.
 * @return {!Object}
 */
IgDataChartMethods.prototype.resetZoom = function() {};

/**
 * Adds a new item to the data source and notifies the chart.
 * 
 * @param {!Object} item     The item that we want to add to the data source.
 * @param {string} targetName     The name of the series or axis bound to the data source. This is required only when the data is bound to series or axis. If the data is bound to dataSource of igDataChart, the second parameter should not be set.
 * @return {void}
 */
IgDataChartMethods.prototype.addItem = function(item, targetName) {};

/**
 * Inserts a new item to the data source and notifies the chart.
 * 
 * @param {!Object} item     the new item that we want to insert in the data source.
 * @param {number} index     The index in the data source where the new item will be inserted.
 * @param {string} targetName     The name of the series or axis bound to the data source.
 * @return {void}
 */
IgDataChartMethods.prototype.insertItem = function(item, index, targetName) {};

/**
 * Deletes an item from the data source and notifies the chart.
 * 
 * @param {number} index     The index in the data source from where the item will be been removed.
 * @param {string} targetName     The name of the series or axis bound to the data source. This is required only when the data is bound to series or axis. If the data is bound to dataSource of igDataChart, the second parameter should not be set.
 * @return {void}
 */
IgDataChartMethods.prototype.removeItem = function(index, targetName) {};

/**
 * Updates an item in the data source and notifies the chart.
 * 
 * @param {number} index     The index of the item in the data source that we want to change.
 * @param {!Object} item     The new item object that will be set in the data source.
 * @param {string} targetName     The name of the series or axis bound to the data source.
 * @return {void}
 */
IgDataChartMethods.prototype.setItem = function(index, item, targetName) {};

/**
 * Notifies the chart that an item has been set in an associated data source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @param {number} index     The index in the items source that has been changed.
 * @param {!Object} newItem     the new item that has been set in the collection.
 * @param {!Object} oldItem     the old item that has been overwritten in the collection.
 * @return {!Object}
 */
IgDataChartMethods.prototype.notifySetItem = function(dataSource, index, newItem, oldItem) {};

/**
 * Notifies the chart that the items have been cleared from an associated data source.
 * It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @return {!Object}
 */
IgDataChartMethods.prototype.notifyClearItems = function(dataSource) {};

/**
 * Notifies the target axis or series that an item has been inserted at the specified index in its data source.
 * It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @param {number} index     The index in the items source where the new item has been inserted.
 * @param {!Object} newItem     the new item that has been set in the collection.
 * @return {!Object}
 */
IgDataChartMethods.prototype.notifyInsertItem = function(dataSource, index, newItem) {};

/**
 * Notifies the target axis or series that an item has been removed from the specified index in its data source.
 * It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @param {number} index     The index in the items source from where the old item has been removed.
 * @param {!Object} oldItem     the old item that has been removed from the collection.
 * @return {!Object}
 */
IgDataChartMethods.prototype.notifyRemoveItem = function(dataSource, index, oldItem) {};

/**
 * Notifies the target axis or series that it should scroll the requested data item into view.
 * 
 * @param {string} targetName     The name of the axis or series notify.
 * @param {!Object} item     The data item to bring into view, if possible.
 * @return {!Object}
 */
IgDataChartMethods.prototype.scrollIntoView = function(targetName, item) {};

/**
 * Notifies the target axis that it should scale the requested value into chart space from axis space.
 * For example you can use this method if you want to find where value 50 of the x axis stands scaled to chart's width.
 * 
 * @param {string} targetName     The name of the axis to notify.
 * @param {number} unscaledValue     The value in axis space to translate into chart space.
 * @return {number}
 */
IgDataChartMethods.prototype.scaleValue = function(targetName, unscaledValue) {};

/**
 * Notifies the target axis that it should unscale the requested value into axis space from chart space.
 * For example you can use this method if you want to find what is the value of x axis unscaled from 0 width of the chart.
 * 
 * @param {string} targetName     The name of the axis to notify.
 * @param {number} scaledValue     The value in chart space to translate into axis space.
 * @return {number}
 */
IgDataChartMethods.prototype.unscaleValue = function(targetName, scaledValue) {};

/**
 * For the target axis, if using enhanced interval management and precise interval fitting, this will reset the cached maximum label width, and recalculate using the current labels.
 * 
 * @param {string} targetName     The name of the axis to notify.
 * @return {!Object}
 */
IgDataChartMethods.prototype.resetCachedEnhancedInterval = function(targetName) {};

/**
 * Notifies the target series that something that affects its visual properties has changed and the visual output needs a repaint.
 * 
 * @param {string} targetName     The name of the series to notify.
 * @return {!Object}
 */
IgDataChartMethods.prototype.notifyVisualPropertiesChanged = function(targetName) {};

/**
 * Forces any pending deferred work to render on the chart before continuing
 * @return {void}
 */
IgDataChartMethods.prototype.flush = function() {};

/**
 * Exports visual data from the chart to aid in unit testing
 * @return {void}
 */
IgDataChartMethods.prototype.exportVisualData = function() {};

/**
 * Gets the actual minimum value of the target numeric or date time axis
 * 
 * @param {string} targetName    The name of the axis from which to get the minimum value.
 * @return {void}
 */
IgDataChartMethods.prototype.getActualMinimumValue = function(targetName) {};

/**
 * Gets the actual maximum value of the target numeric or date time axis
 * 
 * @param {string} targetName    The name of the axis from which to get the maximum value.
 * @return {void}
 */
IgDataChartMethods.prototype.getActualMaximumValue = function(targetName) {};

/**
 * Creates a print preview page with the chart, hiding all other elements on the page.
 * @return {void}
 */
IgDataChartMethods.prototype.print = function() {};

/**
 * Indicates that a series should render, even though no option has been modified that would normally cause it to refresh.
 * 
 * @param {string} targetName     The name of the series to render.
 * @param {boolean} animate     Whether the change should be animated, if possible.
 * @return {void}
 */
IgDataChartMethods.prototype.renderSeries = function(targetName, animate) {};

/**
 * Gets the item item index associated with the specified world position.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
 * @return {number}
 */
IgDataChartMethods.prototype.getItemIndex = function(targetName, worldPoint) {};

/**
 * Gets the item that is the best match for the specified world coordinates.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
 * @return {!Object}
 */
IgDataChartMethods.prototype.getItem = function(targetName, worldPoint) {};

/**
 * For a category plotted series, gets the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
 * 
 * @param {string} targetName    The name of the series to target.
 * @return {number}
 */
IgDataChartMethods.prototype.getItemSpan = function(targetName) {};

/**
 * If possible, will return the best available main value of the series for a given world coordinate.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
 * @param {boolean} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
 * @param {boolean} skipUnknowns    If true, unknown values should be skipped.
 * @return {number}
 */
IgDataChartMethods.prototype.getSeriesValue = function(targetName, worldPoint, useInterpolation, skipUnknowns) {};

/**
 * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
 * @return {!Object}
 */
IgDataChartMethods.prototype.getSeriesValueBoundingBox = function(targetName, worldPoint) {};

/**
 * If possible, will return the best available value fine grained bounding boxes within the series that have the best value match for the world position provided.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
 * @return {!Object}
 */
IgDataChartMethods.prototype.getSeriesValueFineGrainedBoundingBoxes = function(targetName, worldPoint) {};

/**
 * If possible, will return the best available main value position of the series for a given world coordinate.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
 * @param {boolean} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
 * @param {boolean} skipUnknowns    If true, unknown values should be skipped.
 * @return {!Object}
 */
IgDataChartMethods.prototype.getSeriesValuePosition = function(targetName, worldPoint, useInterpolation, skipUnknowns) {};

/**
 * If possible, will return the best available main value position of the series for a given world coordinate.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
 * @param {boolean} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
 * @param {boolean} skipUnknowns    If true, unknown values should be skipped.
 * @return {!Object}
 */
IgDataChartMethods.prototype.getSeriesValuePositionFromSeriesPixel = function(targetName, seriesPoint, useInterpolation, skipUnknowns) {};

/**
 * If possible, will return the best available main value of the series for a given world coordinate.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
 * @param {boolean} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
 * @param {boolean} skipUnknowns    If true, unknown values should be skipped.
 * @return {number}
 */
IgDataChartMethods.prototype.getSeriesValueFromSeriesPixel = function(targetName, seriesPoint, useInterpolation, skipUnknowns) {};

/**
 * If possible, will return the best available value bounding box within the series that has the best value match for the given series pixel coordinate.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
 * @return {!Object}
 */
IgDataChartMethods.prototype.getSeriesValueBoundingBoxFromSeriesPixel = function(targetName, seriesPoint) {};

/**
 * If possible, will return the best available value fine grained bounding boxes within the series that have the best value match for series pixel position provided.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} worldPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
 * @return {!Object}
 */
IgDataChartMethods.prototype.getSeriesValueFineGrainedBoundingBoxesFromSeriesPixel = function(targetName, worldPoint) {};

/**
 * If possible, will return the best available high value of the series for a given world coordinate.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
 * @param {boolean} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
 * @param {boolean} skipUnknowns    If true, unknown values should be skipped.
 * @return {number}
 */
IgDataChartMethods.prototype.getSeriesHighValue = function(targetName, worldPoint, useInterpolation, skipUnknowns) {};

/**
 * If possible, will return the best available high value position of the series for a given world coordinate.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
 * @param {boolean} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
 * @param {boolean} skipUnknowns    If true, unknown values should be skipped.
 * @return {!Object}
 */
IgDataChartMethods.prototype.getSeriesHighValuePosition = function(targetName, worldPoint, useInterpolation, skipUnknowns) {};

/**
 * If possible, will return the best available high value position of the series for a given world coordinate.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
 * @param {boolean} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
 * @param {boolean} skipUnknowns    If true, unknown values should be skipped.
 * @return {!Object}
 */
IgDataChartMethods.prototype.getSeriesHighValuePositionFromSeriesPixel = function(targetName, seriesPoint, useInterpolation, skipUnknowns) {};

/**
 * If possible, will return the best available high value of the series for a given world coordinate.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
 * @param {boolean} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
 * @param {boolean} skipUnknowns    If true, unknown values should be skipped.
 * @return {number}
 */
IgDataChartMethods.prototype.getSeriesHighValueFromSeriesPixel = function(targetName, seriesPoint, useInterpolation, skipUnknowns) {};

/**
 * If possible, will return the best available low value of the series for a given world coordinate.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
 * @param {boolean} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
 * @param {boolean} skipUnknowns    If true, unknown values should be skipped.
 * @return {number}
 */
IgDataChartMethods.prototype.getSeriesLowValue = function(targetName, worldPoint, useInterpolation, skipUnknowns) {};

/**
 * If possible, will return the best available low value position of the series for a given world coordinate.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
 * @param {boolean} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
 * @param {boolean} skipUnknowns    If true, unknown values should be skipped.
 * @return {!Object}
 */
IgDataChartMethods.prototype.getSeriesLowValuePosition = function(targetName, worldPoint, useInterpolation, skipUnknowns) {};

/**
 * If possible, will return the best available low value position of the series for a given world coordinate.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
 * @param {boolean} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
 * @param {boolean} skipUnknowns    If true, unknown values should be skipped.
 * @return {!Object}
 */
IgDataChartMethods.prototype.getSeriesLowValuePositionFromSeriesPixel = function(targetName, seriesPoint, useInterpolation, skipUnknowns) {};

/**
 * If possible, will return the best available low value of the series for a given world coordinate.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
 * @param {boolean} useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
 * @param {boolean} skipUnknowns    If true, unknown values should be skipped.
 * @return {number}
 */
IgDataChartMethods.prototype.getSeriesLowValueFromSeriesPixel = function(targetName, seriesPoint, useInterpolation, skipUnknowns) {};

/**
 * Gets the item item index associated with the specified series pixel coordinate.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} seriesPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
 * @return {number}
 */
IgDataChartMethods.prototype.getItemIndexFromSeriesPixel = function(targetName, seriesPoint) {};

/**
 * Gets the item that is the best match for the specified world coordinates.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
 * @return {!Object}
 */
IgDataChartMethods.prototype.getItemFromSeriesPixel = function(targetName, seriesPoint) {};

/**
 * Gets the category offset for a series, if applicable.
 * 
 * @param {string} targetName    The name of the series to target.
 * @return {number}
 */
IgDataChartMethods.prototype.getSeriesOffsetValue = function(targetName) {};

/**
 * Gets the category width for a series, if applicable.
 * 
 * @param {string} targetName    The name of the series to target.
 * @return {number}
 */
IgDataChartMethods.prototype.getSeriesCategoryWidth = function(targetName) {};

/**
 * Replays the transition in animation for a series, if applicable.
 * 
 * @param {string} targetName    The name of the series to target.
 * @return {!Object}
 */
IgDataChartMethods.prototype.replayTransitionIn = function(targetName) {};

/**
 * Simulates a hover interaction over a given point in the viewport of a series.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} seriesPoint    The point at which to hover. Should have an x property with type number and a y property with type number.
 * @return {!Object}
 */
IgDataChartMethods.prototype.simulateHover = function(targetName, seriesPoint) {};

/**
 * Moves the cursor point of the target annotation layer to the desired world coordinates.
 * 
 * @param {string} targetName    The name of the series to target.
 * @param {!Object} worldPoint    The point to which to move the cursor. Should have an x property with type number and a y property with type number.
 * @return {!Object}
 */
IgDataChartMethods.prototype.moveCursorPoint = function(targetName, worldPoint) {};

/**
 * Manually starts a tiled zoom if one isn't already running.
 * @return {void}
 */
IgDataChartMethods.prototype.startTiledZoomingIfNecessary = function() {};

/**
 * Manually ends a tiled zoom if one is running.
 * @return {void}
 */
IgDataChartMethods.prototype.endTiledZoomingIfRunning = function() {};

/**
 * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom.
 * @return {void}
 */
IgDataChartMethods.prototype.clearTileZoomCache = function() {};

/**
 * @param {string} propertyName
 * @return {!IgDataChartMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function IgPieChartLegend() {}
 /** @type {string} */
IgPieChartLegend.prototype.element;
 /** @type {string} */
IgPieChartLegend.prototype.type;
 /** @type {number} */
IgPieChartLegend.prototype.width;
 /** @type {number} */
IgPieChartLegend.prototype.height;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function SliceClickEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SliceClickEventUIParam() {}
 /** @type {?} */
SliceClickEventUIParam.prototype.chart;
 /** @type {?} */
SliceClickEventUIParam.prototype.slice;
/**
 * @record
 * @struct
 */
function LabelClickEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function LabelClickEventUIParam() {}
 /** @type {?} */
LabelClickEventUIParam.prototype.item;
 /** @type {?} */
LabelClickEventUIParam.prototype.allowSliceClick;
/**
 * @record
 * @struct
 */
function SelectedItemChangingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SelectedItemChangingEventUIParam() {}
 /** @type {?} */
SelectedItemChangingEventUIParam.prototype.oldItem;
 /** @type {?} */
SelectedItemChangingEventUIParam.prototype.newItem;
 /** @type {?} */
SelectedItemChangingEventUIParam.prototype.cancel;
/**
 * @record
 * @struct
 */
function SelectedItemChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SelectedItemChangedEventUIParam() {}
 /** @type {?} */
SelectedItemChangedEventUIParam.prototype.oldItem;
 /** @type {?} */
SelectedItemChangedEventUIParam.prototype.newItem;
/**
 * @record
 * @struct
 */
function SelectedItemsChangingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SelectedItemsChangingEventUIParam() {}
 /** @type {?} */
SelectedItemsChangingEventUIParam.prototype.oldItems;
 /** @type {?} */
SelectedItemsChangingEventUIParam.prototype.newItems;
 /** @type {?} */
SelectedItemsChangingEventUIParam.prototype.cancel;
/**
 * @record
 * @struct
 */
function SelectedItemsChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SelectedItemsChangedEventUIParam() {}
 /** @type {?} */
SelectedItemsChangedEventUIParam.prototype.oldItems;
 /** @type {?} */
SelectedItemsChangedEventUIParam.prototype.newItems;
/**
 * @record
 * @struct
 */
function IgPieChart() {}
 /** @type {(string|number)} */
IgPieChart.prototype.width;
 /** @type {(string|number)} */
IgPieChart.prototype.height;
 /** @type {?} */
IgPieChart.prototype.dataSource;
 /** @type {string} */
IgPieChart.prototype.dataSourceUrl;
 /** @type {string} */
IgPieChart.prototype.dataSourceType;
 /** @type {string} */
IgPieChart.prototype.responseDataKey;
 /** @type {string} */
IgPieChart.prototype.valueMemberPath;
 /** @type {string} */
IgPieChart.prototype.labelMemberPath;
 /** @type {string} */
IgPieChart.prototype.dataValue;
 /** @type {string} */
IgPieChart.prototype.dataLabel;
 /** @type {string} */
IgPieChart.prototype.labelsPosition;
 /** @type {string} */
IgPieChart.prototype.labelOuterColor;
 /** @type {string} */
IgPieChart.prototype.labelInnerColor;
 /** @type {string} */
IgPieChart.prototype.selectionMode;
 /** @type {?} */
IgPieChart.prototype.selectedItem;
 /** @type {!Array<?>} */
IgPieChart.prototype.selectedItems;
 /** @type {string} */
IgPieChart.prototype.leaderLineVisibility;
 /** @type {string} */
IgPieChart.prototype.leaderLineType;
 /** @type {number} */
IgPieChart.prototype.leaderLineMargin;
 /** @type {number} */
IgPieChart.prototype.othersCategoryThreshold;
 /** @type {!Function} */
IgPieChart.prototype.formatLabel;
 /** @type {?} */
IgPieChart.prototype.othersCategoryStyle;
 /** @type {string} */
IgPieChart.prototype.othersCategoryType;
 /** @type {string} */
IgPieChart.prototype.othersCategoryText;
 /** @type {number} */
IgPieChart.prototype.explodedRadius;
 /** @type {number} */
IgPieChart.prototype.radiusFactor;
 /** @type {boolean} */
IgPieChart.prototype.allowSliceSelection;
 /** @type {boolean} */
IgPieChart.prototype.allowSliceExplosion;
 /** @type {!Array<?>} */
IgPieChart.prototype.explodedSlices;
 /** @type {!Array<?>} */
IgPieChart.prototype.selectedSlices;
 /** @type {boolean} */
IgPieChart.prototype.showTooltip;
 /** @type {string} */
IgPieChart.prototype.tooltipTemplate;
 /** @type {!IgPieChartLegend} */
IgPieChart.prototype.legend;
 /** @type {number} */
IgPieChart.prototype.labelExtent;
 /** @type {number} */
IgPieChart.prototype.startAngle;
 /** @type {string} */
IgPieChart.prototype.sweepDirection;
 /** @type {?} */
IgPieChart.prototype.selectedStyle;
 /** @type {?} */
IgPieChart.prototype.brushes;
 /** @type {?} */
IgPieChart.prototype.outlines;
 /** @type {?} */
IgPieChart.prototype.legendItemTemplate;
 /** @type {?} */
IgPieChart.prototype.legendItemBadgeTemplate;
 /** @type {string} */
IgPieChart.prototype.textStyle;
 /** @type {string} */
IgPieChart.prototype.theme;
 /** @type {!TooltipShowingEvent} */
IgPieChart.prototype.tooltipShowing;
 /** @type {!TooltipShownEvent} */
IgPieChart.prototype.tooltipShown;
 /** @type {!TooltipHidingEvent} */
IgPieChart.prototype.tooltipHiding;
 /** @type {!TooltipHiddenEvent} */
IgPieChart.prototype.tooltipHidden;
 /** @type {!BrowserNotSupportedEvent} */
IgPieChart.prototype.browserNotSupported;
 /** @type {!SliceClickEvent} */
IgPieChart.prototype.sliceClick;
 /** @type {!LabelClickEvent} */
IgPieChart.prototype.labelClick;
 /** @type {!SelectedItemChangingEvent} */
IgPieChart.prototype.selectedItemChanging;
 /** @type {!SelectedItemChangedEvent} */
IgPieChart.prototype.selectedItemChanged;
 /** @type {!SelectedItemsChangingEvent} */
IgPieChart.prototype.selectedItemsChanging;
 /** @type {!SelectedItemsChangedEvent} */
IgPieChart.prototype.selectedItemsChanged;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPieChartMethods() {}

/**
 * @return {void}
 */
IgPieChartMethods.prototype.option = function() {};

/**
 * Adds a new item to the data source and notifies the chart.
 * 
 * @param {!Object} item     the new item that will be added to the data source.
 * @return {void}
 */
IgPieChartMethods.prototype.addItem = function(item) {};

/**
 * Inserts a new item to the data source and notifies the chart.
 * 
 * @param {!Object} item     the new item that will be inserted in the data source.
 * @param {number} index     The index in the data source where the new item will be inserted.
 * @return {void}
 */
IgPieChartMethods.prototype.insertItem = function(item, index) {};

/**
 * Deletes an item from the data source and notifies the chart.
 * 
 * @param {number} index     The index in the data source from where the item will be been removed.
 * @return {void}
 */
IgPieChartMethods.prototype.removeItem = function(index) {};

/**
 * Updates an item in the data source and notifies the chart.
 * 
 * @param {number} index     The index in the data source that we want to change.
 * @param {!Object} item     the new item that we want to set in the data source.
 * @return {void}
 */
IgPieChartMethods.prototype.setItem = function(index, item) {};

/**
 * Exports the chart to a PNG image.
 * 
 * @param {!Object=} width     The width of the image.
 * @param {!Object=} height     The height of the image.
 * @return {!Object}
 */
IgPieChartMethods.prototype.exportImage = function(width, height) {};

/**
 * Destroys the widget.
 * @return {void}
 */
IgPieChartMethods.prototype.destroy = function() {};

/**
 * Returns the ID of parent element holding the chart.
 * @return {string}
 */
IgPieChartMethods.prototype.id = function() {};

/**
 * Returns the element holding the chart.
 * @return {void}
 */
IgPieChartMethods.prototype.widget = function() {};

/**
 * Creates a print preview page with the chart, hiding all other elements on the page.
 * @return {void}
 */
IgPieChartMethods.prototype.print = function() {};

/**
 * Exports visual data from the pie chart to aid in unit testing
 * @return {void}
 */
IgPieChartMethods.prototype.exportVisualData = function() {};

/**
 * @param {string} propertyName
 * @return {!IgPieChartMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Gets  whether the series viewer can allow the page to pan if a control pan is not possible in the requested direction.
 * Sets whether the series viewer can allow the page to pan if a control pan is not possible in the requested direction.
 * 
 * \@optionValue New value to be set.
 * The channel name to use to sync this chart with other charts.
 * The channel name to use to sync this chart with other charts.
 * 
 * \@optionValue New value to be set.
 * Whether the chart should be synchronized vertically
 * Whether the chart should be synchronized vertically
 * 
 * \@optionValue New value to be set.
 * Whether the chart should be synchronized horizontally
 * Whether the chart should be synchronized horizontally
 * 
 * \@optionValue New value to be set.
 * Gets  the cross hair point (in world coordinates)
 * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
 * case the relevant crosshair line is hidden.
 * Sets the cross hair point (in world coordinates)
 * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
 * case the relevant crosshair line is hidden.
 * 
 * \@optionValue New value to be set.
 * A rectangle representing the portion of the chart currently in view.
 * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
 * The provided object should have numeric properties called left, top, width and height.
 * A rectangle representing the portion of the chart currently in view.
 * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
 * The provided object should have numeric properties called left, top, width and height.
 * 
 * \@optionValue New value to be set.
 * Gets  the current Chart's horizontal zoomability.
 * Sets the current Chart's horizontal zoomability.
 * 
 * \@optionValue New value to be set.
 * Gets  the current Chart's vertical zoomability.
 * Sets the current Chart's vertical zoomability.
 * 
 * \@optionValue New value to be set.
 * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
 * 
 * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
 * Decrease this value if you want to allow for further zooming into the viewer.
 * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
 * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
 * Decrease this value if you want to allow for further zooming into the viewer.
 * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
 * 
 * \@optionValue New value to be set.
 * The visibility of the OverviewPlusDetailPane.
 * The visibility of the OverviewPlusDetailPane.
 * 
 * \@optionValue New value to be set.
 * Gets  the current Chart's crosshair visibility override.  Note: setting this property does not affect the mobile browser version of the chart.
 * Sets the current Chart's crosshair visibility override.  Note: setting this property does not affect the mobile browser version of the chart.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush used as the background for the current Chart object's plot area.
 * Sets the brush used as the background for the current Chart object's plot area.
 * 
 * \@optionValue New value to be set.
 * Gets  the DefaultInteraction property. The default interaction state defines the chart's response to mouse events.
 * Sets the DefaultInteraction property. The default interaction state defines the chart's response to mouse events.
 * 
 * \@optionValue New value to be set.
 * Gets  the current Chart's DragModifier property.
 * Sets the current Chart's DragModifier property.
 * 
 * \@optionValue New value to be set.
 * Gets  the current Chart's PanModifier property.
 * Sets the current Chart's PanModifier property.
 * 
 * \@optionValue New value to be set.
 * Gets  the preview rectangle.
 * The preview rectangle may be set to Rect.Empty, in which case the visible preview
 * strokePath is hidden.
 * The provided object should have numeric properties called left, top, width and height.
 * Sets the preview rectangle.
 * The preview rectangle may be set to Rect.Empty, in which case the visible preview
 * strokePath is hidden.
 * The provided object should have numeric properties called left, top, width and height.
 * 
 * \@optionValue New value to be set.
 * A number between 0 and 1 determining the position of the horizontal scroll.
 * This property is effectively a shortcut to the X position of the WindowRect property.
 * A number between 0 and 1 determining the position of the horizontal scroll.
 * This property is effectively a shortcut to the X position of the WindowRect property.
 * 
 * \@optionValue New value to be set.
 * A number between 0 and 1 determining the position of the vertical scroll.
 * This property is effectively a shortcut to the Y position of the WindowRect property.
 * A number between 0 and 1 determining the position of the vertical scroll.
 * This property is effectively a shortcut to the Y position of the WindowRect property.
 * 
 * \@optionValue New value to be set.
 * A number between 0 and 1 determining the scale of the horizontal zoom.
 * This property is effectively a shortcut to the Width of the WindowRect property.
 * A number between 0 and 1 determining the scale of the horizontal zoom.
 * This property is effectively a shortcut to the Width of the WindowRect property.
 * 
 * \@optionValue New value to be set.
 * A number between 0 and 1 determining the scale of the vertical zoom.
 * This property is effectively a shortcut to the Height of the WindowRect property.
 * A number between 0 and 1 determining the scale of the vertical zoom.
 * This property is effectively a shortcut to the Height of the WindowRect property.
 * 
 * \@optionValue New value to be set.
 * Gets  the template to use for circle markers on the chart.
 * Defines the marker template used for
 * series with a marker type of circle.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the template to use for circle markers on the chart.
 * Defines the marker template used for
 * series with a marker type of circle.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Gets  the template to use for triangle markers on the chart.
 * Defines the marker template used for
 * series with a marker type of triangle.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the template to use for triangle markers on the chart.
 * Defines the marker template used for
 * series with a marker type of triangle.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Gets  the template to use for pyramid markers on the chart.
 * Defines the marker template used for
 * series with a marker type of pyramid.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the template to use for pyramid markers on the chart.
 * Defines the marker template used for
 * series with a marker type of pyramid.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Gets  the template to use for square markers on the chart.
 * Defines the marker template used for
 * series with a marker type of square.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the template to use for square markers on the chart.
 * Defines the marker template used for
 * series with a marker type of square.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Gets  the template to use for diamond markers on the chart.
 * Defines the marker template used for
 * series with a marker type of diamond.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the template to use for diamond markers on the chart.
 * Defines the marker template used for
 * series with a marker type of diamond.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Gets  the template to use for pentagon markers on the chart.
 * Defines the marker template used for
 * series with a marker type of pentagon.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the template to use for pentagon markers on the chart.
 * Defines the marker template used for
 * series with a marker type of pentagon.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Gets  the template to use for hexagon markers on the chart.
 * Defines the marker template used for
 * series with a marker type of hexagon.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the template to use for hexagon markers on the chart.
 * Defines the marker template used for
 * series with a marker type of hexagon.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Gets  the template to use for tetragram markers on the chart.
 * Defines the marker template used for
 * series with a marker type of tetragram.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the template to use for tetragram markers on the chart.
 * Defines the marker template used for
 * series with a marker type of tetragram.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Gets  the template to use for pentragram markers on the chart.
 * Defines the marker template used for
 * series with a marker type of pentagram.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the template to use for pentragram markers on the chart.
 * Defines the marker template used for
 * series with a marker type of pentagram.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Gets  the template to use for hexagram markers on the chart.
 * Defines the marker template used for
 * series with a marker type of hexagram.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the template to use for hexagram markers on the chart.
 * Defines the marker template used for
 * series with a marker type of hexagram.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Sets or gets the top margin to use around the chart content in the canvas.
 * Sets or gets the top margin to use around the chart content in the canvas.
 * 
 * \@optionValue New value to be set.
 * Sets or gets the left margin to use around the chart content in the canvas.
 * Sets or gets the left margin to use around the chart content in the canvas.
 * 
 * \@optionValue New value to be set.
 * Sets or gets the right margin to use around the chart content in the canvas.
 * Sets or gets the right margin to use around the chart content in the canvas.
 * 
 * \@optionValue New value to be set.
 * Sets or gets the bottom margin to use around the chart content in the canvas.
 * Sets or gets the bottom margin to use around the chart content in the canvas.
 * 
 * \@optionValue New value to be set.
 * Sets or gets the automatic width to add when automatically adding margins to the chart.
 * Sets or gets the automatic width to add when automatically adding margins to the chart.
 * 
 * \@optionValue New value to be set.
 * Sets or gets the automatic height to add when automatically adding margins to the chart.
 * Sets or gets the automatic height to add when automatically adding margins to the chart.
 * 
 * \@optionValue New value to be set.
 * Gets  whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts.
 * Sets whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts.
 * 
 * \@optionValue New value to be set.
 * Gets  the GridMode property.
 * Sets the GridMode property.
 * 
 * \@optionValue New value to be set.
 * Gets  the Brushes property.
 * The brushes property defines the palette from which automatically assigned series brushes are selected.
 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * Sets the Brushes property.
 * The brushes property defines the palette from which automatically assigned series brushes are selected.
 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * 
 * \@optionValue New value to be set.
 * Gets  the MarkerBrushes property.
 * The marker brushes property defines the palette from which automatically assigned marker brushes are selected.
 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * Sets the MarkerBrushes property.
 * The marker brushes property defines the palette from which automatically assigned marker brushes are selected.
 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * 
 * \@optionValue New value to be set.
 * Gets  the Outlines property.
 * The outlines property defines the palette from which automatically assigned series outlines are selected.
 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * Sets the Outlines property.
 * The outlines property defines the palette from which automatically assigned series outlines are selected.
 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * 
 * \@optionValue New value to be set.
 * Gets  the MarkerOutlines property.
 * The marker outlines property defines the palette from which automatically assigned marker outlines are selected.
 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * Sets the MarkerOutlines property.
 * The marker outlines property defines the palette from which automatically assigned marker outlines are selected.
 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * 
 * \@optionValue New value to be set.
 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * \@optionValue New value to be set.
 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * \@optionValue New value to be set.
 * To set both dimensions of the chart simultaneously an object with a width and height property can be provided
 * To set both dimensions of the chart simultaneously an object with a width and height property can be provided
 * 
 * \@optionValue New value to be set.
 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
 * 
 * \@optionValue New value to be set.
 * Gets a remote URL accepted by $.ig.DataSource in order to request data from it
 * Sets a remote URL accepted by $.ig.DataSource in order to request data from it
 * 
 * \@optionValue New value to be set.
 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
 * 
 * \@optionValue New value to be set.
 * See $.ig.DataSource. Gets the name of the property in which data records are held if the response is wrapped.
 * See $.ig.DataSource. Sets the name of the property in which data records are held if the response is wrapped.
 * 
 * \@optionValue New value to be set.
 * Set to true in order to disable any interactions with the plot surface.
 * Set to true in order to disable any interactions with the plot surface.
 * 
 * \@optionValue New value to be set.
 * Set to true in order to override the default behavior in which series do not animate if an axis range changes
 * Set to true in order to override the default behavior in which series do not animate if an axis range changes
 * 
 * \@optionValue New value to be set.
 * The title to display for the component.
 * The title to display for the component.
 * 
 * \@optionValue New value to be set.
 * The subtitle to display for the component.
 * The subtitle to display for the component.
 * 
 * \@optionValue New value to be set.
 * The css font property to use for the title.
 * The css font property to use for the title.
 * 
 * \@optionValue New value to be set.
 * The top margin to use for the title.
 * The top margin to use for the title.
 * 
 * \@optionValue New value to be set.
 * The left margin to use for the title.
 * The left margin to use for the title.
 * 
 * \@optionValue New value to be set.
 * The right margin to use for the title.
 * The right margin to use for the title.
 * 
 * \@optionValue New value to be set.
 * The bottom margin to use for the title.
 * The bottom margin to use for the title.
 * 
 * \@optionValue New value to be set.
 * The css font property to use for the title.
 * The css font property to use for the title.
 * 
 * \@optionValue New value to be set.
 * The top margin to use for the subtitle.
 * The top margin to use for the subtitle.
 * 
 * \@optionValue New value to be set.
 * The left margin to use for the subtitle.
 * The left margin to use for the subtitle.
 * 
 * \@optionValue New value to be set.
 * The right margin to use for the subtitle.
 * The right margin to use for the subtitle.
 * 
 * \@optionValue New value to be set.
 * The bottom margin to use for the subtitle.
 * The bottom margin to use for the subtitle.
 * 
 * \@optionValue New value to be set.
 * The color to use for the title.
 * The color to use for the title.
 * 
 * \@optionValue New value to be set.
 * The color to use for the subtitle.
 * The color to use for the subtitle.
 * 
 * \@optionValue New value to be set.
 * The horizontal alignment to use for the title.
 * The horizontal alignment to use for the title.
 * 
 * \@optionValue New value to be set.
 * The horizontal alignment to use for the subtitle.
 * The horizontal alignment to use for the subtitle.
 * 
 * \@optionValue New value to be set.
 * The length, in milliseconds of the highlighting transition.
 * The length, in milliseconds of the highlighting transition.
 * 
 * \@optionValue New value to be set.
 * Whether the series viewer should use cached tiles during zooms rather than the default live content.
 * Sets whether the series viewer should use cached tiles during zooms rather than the default live content.
 * 
 * \@optionValue New value to be set.
 * Whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
 * Sets whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
 * 
 * \@optionValue New value to be set.
 * Gets  the scaling value used by the main canvas rendering context to apply a scale transform to it.
 * Sets the scaling value used by the main canvas rendering context to apply a scale transform to it.
 * 
 * \@optionValue New value to be set.
 * The maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
 * Sets the maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
 * 
 * \@optionValue New value to be set.
 * Gets  which type of hit testing the series should use.
 * Sets which type of hit testing the series should use.
 * 
 * \@optionValue New value to be set.
 * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
 * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
 * 
 * \@optionValue New value to be set.
 * An array of axis objects
 * An array of axis objects
 * 
 * \@optionValue New value to be set.
 * An array of series objects
 * An array of series objects
 * 
 * \@optionValue New value to be set.
 * The swatch used to style this widget
 * The swatch used to style this widget
 * 
 * \@optionValue New value to be set.
 * Event fired when the mouse has hovered on a series and the tooltip is about to show
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Event fired when the mouse has hovered on a series and the tooltip is about to show
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a tooltip is shown
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Event fired after a tooltip is shown
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * 
 * \@optionValue Define event handler function.
 * Event fired when the mouse has left a series and the tooltip is about to hide
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Event fired when the mouse has left a series and the tooltip is about to hide
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a tooltip is hidden
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Event fired after a tooltip is hidden
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * 
 * \@optionValue Define event handler function.
 * Event fired when the control is displayed on a non HTML5 compliant browser
 * Event fired when the control is displayed on a non HTML5 compliant browser
 * 
 * \@optionValue Define event handler function.
 * Occurs when the cursors are moved over a series in this chart.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * Occurs when the cursors are moved over a series in this chart.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * 
 * \@optionValue New value to be set.
 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this chart.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this chart.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * 
 * \@optionValue New value to be set.
 * Occurs when the left mouse button is released while the mouse pointer is over an element of this chart.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * Occurs when the left mouse button is released while the mouse pointer is over an element of this chart.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * 
 * \@optionValue New value to be set.
 * Occurs when the left mouse pointer moves while over an element of this chart.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * Occurs when the left mouse pointer moves while over an element of this chart.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * 
 * \@optionValue New value to be set.
 * Occurs when the left mouse pointer enters an element of this chart.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * Occurs when the left mouse pointer enters an element of this chart.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * 
 * \@optionValue New value to be set.
 * Occurs when the left mouse pointer leaves an element of this chart.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * Occurs when the left mouse pointer leaves an element of this chart.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * 
 * \@optionValue New value to be set.
 * Occurs just after the current Chart's window rectangle is changed.
 * Function takes arguments evt and ui.
 * Use ui.chart to get reference to chart object.
 * Use ui.newHeight to get new height value.
 * Use ui.newLeft to get new left value.
 * Use ui.newTop to get new top value.
 * Use ui.newWidth to get new top value.
 * Use ui.oldHeight to get old height value.
 * Use ui.oldLeft to get old left value.
 * Use ui.oldTop to get old top value.
 * Use ui.oldWidth to get old top value.
 * Occurs just after the current Chart's window rectangle is changed.
 * Function takes arguments evt and ui.
 * Use ui.chart to get reference to chart object.
 * Use ui.newHeight to get new height value.
 * Use ui.newLeft to get new left value.
 * Use ui.newTop to get new top value.
 * Use ui.newWidth to get new top value.
 * Use ui.oldHeight to get old height value.
 * Use ui.oldLeft to get old left value.
 * Use ui.oldTop to get old top value.
 * Use ui.oldWidth to get old top value.
 * 
 * \@optionValue New value to be set.
 * Occurs just after the current Chart's grid area rectangle is changed.
 * The grid area may change as the result of the Chart being resized, or
 * of an axis being added or changing size, possibly in another Chart.
 * Function takes arguments evt and ui.
 * Use ui.chart to get reference to chart object.
 * Use ui.newHeight to get new height value.
 * Use ui.newLeft to get new left value.
 * Use ui.newTop to get new top value.
 * Use ui.newWidth to get new top value.
 * Use ui.oldHeight to get old height value.
 * Use ui.oldLeft to get old left value.
 * Use ui.oldTop to get old top value.
 * Use ui.oldWidth to get old top value.
 * Occurs just after the current Chart's grid area rectangle is changed.
 * The grid area may change as the result of the Chart being resized, or
 * of an axis being added or changing size, possibly in another Chart.
 * Function takes arguments evt and ui.
 * Use ui.chart to get reference to chart object.
 * Use ui.newHeight to get new height value.
 * Use ui.newLeft to get new left value.
 * Use ui.newTop to get new top value.
 * Use ui.newWidth to get new top value.
 * Use ui.oldHeight to get old height value.
 * Use ui.oldLeft to get old left value.
 * Use ui.oldTop to get old top value.
 * Use ui.oldWidth to get old top value.
 * 
 * \@optionValue New value to be set.
 * Raised when the chart's processing for an update has completed.
 * Function takes arguments evt and ui.
 * Use ui.chart to get reference to chart object.
 * Raised when the chart's processing for an update has completed.
 * Function takes arguments evt and ui.
 * Use ui.chart to get reference to chart object.
 * 
 * \@optionValue New value to be set.
 * Event fired when the range of and axis on the chart changes.
 * Function takes arguments evt and ui.
 * Use ui.axis to get reference to current chart axis object.
 * Use ui.chart to get reference to chart object.
 * Use ui.newMaximumValue to get new maximum value.
 * Use ui.newMinimumValue to get new minimum value.
 * Use ui.oldMaximumValue to get old maximum value.
 * Use ui.oldMinimumValue to get old minimum value.
 * Event fired when the range of and axis on the chart changes.
 * Function takes arguments evt and ui.
 * Use ui.axis to get reference to current chart axis object.
 * Use ui.chart to get reference to chart object.
 * Use ui.newMaximumValue to get new maximum value.
 * Use ui.newMinimumValue to get new minimum value.
 * Use ui.oldMaximumValue to get old maximum value.
 * Use ui.oldMinimumValue to get old minimum value.
 * 
 * \@optionValue Define event handler function.
 * Handle this event in order to specify which columns the Typical price calculation is based on.
 * Function takes arguments evt and ui.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.count to get the number of positions that should be calculated from the start.
 * Use ui.position to get the beginning position that should be calculated from.
 * Use ui.supportingCalculations to get the supporting calculations to use in the calculation.
 * Use ui.dataSource to get the data to use for the calculation.
 * Use ui.basedOn to specify which columns changing will invalidate the series and cause it to be recalculated.
 * Handle this event in order to specify which columns the Typical price calculation is based on.
 * Function takes arguments evt and ui.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.count to get the number of positions that should be calculated from the start.
 * Use ui.position to get the beginning position that should be calculated from.
 * Use ui.supportingCalculations to get the supporting calculations to use in the calculation.
 * Use ui.dataSource to get the data to use for the calculation.
 * Use ui.basedOn to specify which columns changing will invalidate the series and cause it to be recalculated.
 * 
 * \@optionValue New value to be set.
 * Event fired when the progressive loading state of the series has changed.
 * Function takes arguments evt and ui.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.currentStatus to get current status.
 * Event fired when the progressive loading state of the series has changed.
 * Function takes arguments evt and ui.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.currentStatus to get current status.
 * 
 * \@optionValue Define event handler function.
 * Event fired to allow you to override the style of items in a category or financial series. Only fires if you set allowCustomCategoryStyle to true for a series.
 * Function takes arguments evt and ui.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.startIndex to get the start index for the current items.
 * Use ui.endIndex to get the end index for the current items.
 * Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
 * Use ui.startDate if ui.hasDateRange is true.
 * Use ui.endDate if ui.hasDateRange is true.
 * Use ui.getItems to get all the items associated with the event (only if necessary).
 * Use ui.fill to get or set the fill to use for the current item.
 * Use ui.stroke to get or set the stroke to use for the current item.
 * Use ui.opacity to get or set the opacity to use for the current item.
 * Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.
 * Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.
 * Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.
 * Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.
 * Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.
 * Event fired to allow you to override the style of items in a category or financial series. Only fires if you set allowCustomCategoryStyle to true for a series.
 * Function takes arguments evt and ui.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.startIndex to get the start index for the current items.
 * Use ui.endIndex to get the end index for the current items.
 * Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
 * Use ui.startDate if ui.hasDateRange is true.
 * Use ui.endDate if ui.hasDateRange is true.
 * Use ui.getItems to get all the items associated with the event (only if necessary).
 * Use ui.fill to get or set the fill to use for the current item.
 * Use ui.stroke to get or set the stroke to use for the current item.
 * Use ui.opacity to get or set the opacity to use for the current item.
 * Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.
 * Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.
 * Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.
 * Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.
 * Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.
 * 
 * \@optionValue Define event handler function.
 * Event fired to allow you to override the style of markers for the items in a category or financial series. Only fires if you set allowCustomCategoryMarkerStyle to true for a series.
 * Function takes arguments evt and ui.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.startIndex to get the start index for the current items.
 * Use ui.endIndex to get the end index for the current items.
 * Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
 * Use ui.startDate if ui.hasDateRange is true.
 * Use ui.endDate if ui.hasDateRange is true.
 * Use ui.getItems to get all the items associated with the event (only if necessary).
 * Use ui.fill to get or set the fill to use for the current item.
 * Use ui.stroke to get or set the stroke to use for the current item.
 * Use ui.opacity to get or set the opacity to use for the current item.
 * Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.
 * Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.
 * Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.
 * Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.
 * Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.
 * Event fired to allow you to override the style of markers for the items in a category or financial series. Only fires if you set allowCustomCategoryMarkerStyle to true for a series.
 * Function takes arguments evt and ui.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.startIndex to get the start index for the current items.
 * Use ui.endIndex to get the end index for the current items.
 * Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
 * Use ui.startDate if ui.hasDateRange is true.
 * Use ui.endDate if ui.hasDateRange is true.
 * Use ui.getItems to get all the items associated with the event (only if necessary).
 * Use ui.fill to get or set the fill to use for the current item.
 * Use ui.stroke to get or set the stroke to use for the current item.
 * Use ui.opacity to get or set the opacity to use for the current item.
 * Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.
 * Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.
 * Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.
 * Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.
 * Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgDataChart} methodName_or_optionLiteral_or_options
 * @param {...!Object|number|string|!IgDataChart|?=} width_or_item_or_index_or_dataSource_or_targetName_or_optionName_or_options_or_methodParams
 * @return {void|string|!Object|number|boolean|!IgDataChartCrosshairPoint|?|(string|number)|!IgDataChartLegend|!Array<!IgDataChartAxes>|!Array<!IgDataChartSeries>|!TooltipShowingEvent|!TooltipShownEvent|!TooltipHidingEvent|!TooltipHiddenEvent|!BrowserNotSupportedEvent|!SeriesCursorMouseMoveEvent|!SeriesMouseLeftButtonDownEvent|!SeriesMouseLeftButtonUpEvent|!SeriesMouseMoveEvent|!SeriesMouseEnterEvent|!SeriesMouseLeaveEvent|!WindowRectChangedEvent|!GridAreaRectChangedEvent|!RefreshCompletedEvent|!AxisRangeChangedEvent|!TypicalBasedOnEvent|!ProgressiveLoadStatusChangedEvent|!AssigningCategoryStyleEvent|!AssigningCategoryMarkerStyleEvent|!JQuery}
 */
JQuery.prototype.igDataChart = function(methodName_or_optionLiteral_or_options, width_or_item_or_index_or_dataSource_or_targetName_or_optionName_or_options_or_methodParams) {};

/**
 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * \@optionValue New value to be set.
 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * \@optionValue New value to be set.
 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
 * 
 * \@optionValue New value to be set.
 * Gets a remote URL accepted by $.ig.DataSource in order to request data from it
 * Sets a remote URL accepted by $.ig.DataSource in order to request data from it
 * 
 * \@optionValue New value to be set.
 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
 * 
 * \@optionValue New value to be set.
 * See $.ig.DataSource. Gets the name of the property in which data records are held if the response is wrapped.
 * See $.ig.DataSource. Sets the name of the property in which data records are held if the response is wrapped.
 * 
 * \@optionValue New value to be set.
 * Gets or Sets the property name that contains the values.  This option is deprecated - please use `dataValue` instead.
 * Sets the property name that contains the values.  This option is deprecated - please use `dataValue` instead.
 * 
 * \@optionValue New value to be set.
 * Gets  the property name that contains the labels.  This option is deprecated - please use `dataLabel` instead.
 * Sets the property name that contains the labels.  This option is deprecated - please use `dataLabel` instead.
 * 
 * \@optionValue New value to be set.
 * Gets or Sets the property name that contains the values.
 * Sets the property name that contains the values.
 * 
 * \@optionValue New value to be set.
 * Gets  the property name that contains the labels.
 * Sets the property name that contains the labels.
 * 
 * \@optionValue New value to be set.
 * Gets  the position of chart labels.
 * 
 * Sets the position of chart labels.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets  the color for labels rendered outside of the pie chart.  If no color is provided then
 *             the chart will attempt to find the colors in CSS.  If that is not available it will use a default color.
 * Sets the color for labels rendered outside of the pie chart.  If no color is provided then
 *             the chart will attempt to find the colors in CSS.  If that is not available it will use a default color.
 * 
 * \@optionValue New value to be set.
 * Gets  the color for labels rendered inside of the pie chart.  If no color is provided then
 *             the chart will attempt to find the colors in CSS.  If that is not available it will use a default color.
 * Sets the color for labels rendered inside of the pie chart.  If no color is provided then
 *             the chart will attempt to find the colors in CSS.  If that is not available it will use a default color.
 * 
 * \@optionValue New value to be set.
 * Gets  the type of selection the pie chart allows.
 * 
 * Sets the type of selection the pie chart allows.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets  the currently selected data item.  If a different data item is provided the pie chart
 *             will select the slice associated with the new item.
 * Sets the currently selected data item.  If a different data item is provided the pie chart
 *             will select the slice associated with the new item.
 * 
 * \@optionValue New value to be set.
 * Gets  the currently selected data items.  Adding or removing data items from this array will
 *             select or deselect the slices associated with those items.
 * Sets the currently selected data items.  Adding or removing data items from this array will
 *             select or deselect the slices associated with those items.
 * 
 * \@optionValue New value to be set.
 * Gets  whether the leader lines are visible.
 * 
 * Sets whether the leader lines are visible.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets  what type of leader lines will be used for the outside end labels.
 * 
 * Sets what type of leader lines will be used for the outside end labels.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets  the margin between a label and the end of its leader line.
 * Sets the margin between a label and the end of its leader line.
 * 
 * \@optionValue New value to be set.
 * Gets  the threshold value that determines if slices are grouped into the Others slice.
 * Sets the threshold value that determines if slices are grouped into the Others slice.
 * 
 * \@optionValue New value to be set.
 * Gets  the function to use to transform a pie slice data context into a label for the slice. Function takes one argument of type object.
 * Use context.item to get the item associated with the slice, if any.
 * Use context.outline to get the outline brush used to paint the slice.
 * Use context.itemLabel to get the label object that would be used for the slice.
 * Use context.percentValue to see the percentage value that is associated with the slice.
 * Use context.isOthersSlice to tell if the associated slice is the others slice.
 * Should return a string value that should be used for the label.
 * Sets the function to use to transform a pie slice data context into a label for the slice. Function takes one argument of type object.
 * Use context.item to get the item associated with the slice, if any.
 * Use context.outline to get the outline brush used to paint the slice.
 * Use context.itemLabel to get the label object that would be used for the slice.
 * Use context.percentValue to see the percentage value that is associated with the slice.
 * Use context.isOthersSlice to tell if the associated slice is the others slice.
 * Should return a string value that should be used for the label.
 * 
 * \@optionValue New value to be set.
 * Gets  a style object that can be used to override the style settings on the others category slice.
 * Sets a style object that can be used to override the style settings on the others category slice.
 * 
 * \@optionValue New value to be set.
 * Gets  whether to use numeric or percent-based threshold value.
 * Sets whether to use numeric or percent-based threshold value.
 * 
 * \@optionValue New value to be set.
 * Gets  the label of the Others slice.
 * Sets the label of the Others slice.
 * 
 * \@optionValue New value to be set.
 * Determines how much the exploded slice is offset from the center. Value between 0 and 1.
 * Determines how much the exploded slice is offset from the center. Value between 0 and 1.
 * 
 * \@optionValue New value to be set.
 * Gets  the scaling factor of the chart's radius. Value between 0 and 1.
 * Sets the scaling factor of the chart's radius. Value between 0 and 1.
 * 
 * \@optionValue New value to be set.
 * Gets  whether the slices can be selected.
 * Sets whether the slices can be selected.
 * 
 * \@optionValue New value to be set.
 * Gets  whether the slices can be exploded.
 * Sets whether the slices can be exploded.
 * 
 * \@optionValue New value to be set.
 * Gets  the collection of exploded slice indices.
 * Should be an array of integers that indicate the indexes of the slices to explode.
 * Sets the collection of exploded slice indices.
 * Should be an array of integers that indicate the indexes of the slices to explode.
 * 
 * \@optionValue New value to be set.
 * Sets the collection of selected slice indices.
 *             Should be an array of integers that indicate the indexes of the slices to select.
 * Sets the collection of selected slice indices.
 *             Should be an array of integers that indicate the indexes of the slices to select.
 * 
 * \@optionValue New value to be set.
 * Whether the chart should render a tooltip.
 * Whether the chart should render a tooltip.
 * 
 * \@optionValue New value to be set.
 * The name of template or the template itself that chart tooltip will use to render.
 * The name of template or the template itself that chart tooltip will use to render.
 * 
 * \@optionValue New value to be set.
 * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
 * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
 * 
 * \@optionValue New value to be set.
 * Gets  the pixel amount, by which the labels are offset from the edge of the slices.
 * Sets the pixel amount, by which the labels are offset from the edge of the slices.
 * 
 * \@optionValue New value to be set.
 * Gets  the starting angle of the chart.
 * The default zero value is equivalent to 3 o'clock.
 * Sets the starting angle of the chart.
 * The default zero value is equivalent to 3 o'clock.
 * 
 * \@optionValue New value to be set.
 * Gets  the rotational direction of the chart.
 * 
 * Sets the rotational direction of the chart.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets  the style used when a slice is selected.
 * Sets the style used when a slice is selected.
 * 
 * \@optionValue New value to be set.
 * Gets  the Brushes property.
 * The brushes property defines the palette from which automatically assigned slice brushes are selected.
 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * Sets the Brushes property.
 * The brushes property defines the palette from which automatically assigned slice brushes are selected.
 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * 
 * \@optionValue New value to be set.
 * Gets  the Outlines property.
 * The Outlines property defines the palette from which automatically assigned slice outlines are selected.
 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * Sets the Outlines property.
 * The Outlines property defines the palette from which automatically assigned slice outlines are selected.
 * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * 
 * \@optionValue New value to be set.
 * Gets  the LegendItemTemplate property.
 * The legend item control content is created according to the LegendItemTemplate on-demand by
 * the chart object itself.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the LegendItemTemplate property.
 * The legend item control content is created according to the LegendItemTemplate on-demand by
 * the chart object itself.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Gets  the LegendItemBadgeTemplate property.
 * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
 * the chart object itself.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the LegendItemBadgeTemplate property.
 * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
 * the chart object itself.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Overrides the style used for text in the pie chart.
 * Overrides the style used for text in the pie chart.
 * 
 * \@optionValue New value to be set.
 * The swatch used to style this widget
 * The swatch used to style this widget
 * 
 * \@optionValue New value to be set.
 * Event fired when the mouse has hovered on an element long enough to display a tooltip
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current pie chart item.
 * Use ui.chart to get reference to chart object.
 * Event fired when the mouse has hovered on an element long enough to display a tooltip
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current pie chart item.
 * Use ui.chart to get reference to chart object.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a tooltip is shown
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current pie chart item.
 * Use ui.chart to get reference to chart object.
 * Event fired after a tooltip is shown
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current pie chart item.
 * Use ui.chart to get reference to chart object.
 * 
 * \@optionValue Define event handler function.
 * Event fired when the mouse has left an element and the tooltip is about to hide
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current pie chart item.
 * Use ui.chart to get reference to chart object.
 * Event fired when the mouse has left an element and the tooltip is about to hide
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current pie chart item.
 * Use ui.chart to get reference to chart object.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a tooltip is hidden
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current pie chart item.
 * Use ui.chart to get reference to chart object.
 * Event fired after a tooltip is hidden
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current pie chart item.
 * Use ui.chart to get reference to chart object.
 * 
 * \@optionValue Define event handler function.
 * Event fired when the control is displayed on a non HTML5 compliant browser
 * Event fired when the control is displayed on a non HTML5 compliant browser
 * 
 * \@optionValue Define event handler function.
 * Raised when the slice is clicked.
 * Function takes arguments evt and ui.
 * Use ui.chart to get reference to chart object.
 * Use ui.slice to get reference to slice object.
 * Use ui.slice.item to get reference to current pie chart item.
 * Use ui.slice.isExploded to get is the slice exploded.
 * Use ui.slice.isSelected to get is the slice selected.
 * Raised when the slice is clicked.
 * Function takes arguments evt and ui.
 * Use ui.chart to get reference to chart object.
 * Use ui.slice to get reference to slice object.
 * Use ui.slice.item to get reference to current pie chart item.
 * Use ui.slice.isExploded to get is the slice exploded.
 * Use ui.slice.isSelected to get is the slice selected.
 * 
 * \@optionValue New value to be set.
 * Raised when a slice's label is clicked.
 *             Function takes arguments evt and ui.
 *             Use ui.item to get reference to the slice object.
 *             Use ui.allowSliceClick to determine whether or not the label click should fire slice click event.
 * Raised when a slice's label is clicked.
 *             Function takes arguments evt and ui.
 *             Use ui.item to get reference to the slice object.
 *             Use ui.allowSliceClick to determine whether or not the label click should fire slice click event.
 * 
 * \@optionValue New value to be set.
 * Event fired when the selectedItem option is about to change.
 *             Function takes arguments evt and ui.
 *             Use ui.oldItem to get a reference to the current selected data item.
 *             Use ui.newItem to get a reference to the newly selected data item.
 *             Use ui.cancel to stop the selected item from changing.
 * Event fired when the selectedItem option is about to change.
 *             Function takes arguments evt and ui.
 *             Use ui.oldItem to get a reference to the current selected data item.
 *             Use ui.newItem to get a reference to the newly selected data item.
 *             Use ui.cancel to stop the selected item from changing.
 * 
 * \@optionValue Define event handler function.
 * Event fired when the selectedItem option has changed.
 *             Function takes arguments evt and ui.
 *             Use ui.oldItem to get a reference to the previous selected data item.
 *             Use ui.newItem to get a reference to the current selected data item.
 * Event fired when the selectedItem option has changed.
 *             Function takes arguments evt and ui.
 *             Use ui.oldItem to get a reference to the previous selected data item.
 *             Use ui.newItem to get a reference to the current selected data item.
 * 
 * \@optionValue Define event handler function.
 * Event fired when the selectedItems array is about to change.
 *             Function takes arguments evt and ui.
 *             Use ui.oldItems to get a reference to the current selected data items.
 *             Use ui.newItems to get a reference to the newly selected data items.
 *             Use ui.cancel to stop the selected items from changing.
 * Event fired when the selectedItems array is about to change.
 *             Function takes arguments evt and ui.
 *             Use ui.oldItems to get a reference to the current selected data items.
 *             Use ui.newItems to get a reference to the newly selected data items.
 *             Use ui.cancel to stop the selected items from changing.
 * 
 * \@optionValue Define event handler function.
 * Event fired when the selectedItems array has changed.
 *             Function takes arguments evt and ui.
 *             Use ui.oldItems to get a reference to the previous selected data items.
 *             Use ui.newItems to get a reference to the current selected data items.
 * Event fired when the selectedItems array has changed.
 *             Function takes arguments evt and ui.
 *             Use ui.oldItems to get a reference to the previous selected data items.
 *             Use ui.newItems to get a reference to the current selected data items.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgPieChart} methodName_or_optionLiteral_or_options
 * @param {...!Object|number|string|!IgPieChart|?=} item_or_index_or_width_or_optionName_or_options_or_methodParams
 * @return {void|!Object|string|(string|number)|?|!Array<?>|number|!Function|boolean|!IgPieChartLegend|!TooltipShowingEvent|!TooltipShownEvent|!TooltipHidingEvent|!TooltipHiddenEvent|!BrowserNotSupportedEvent|!SliceClickEvent|!LabelClickEvent|!SelectedItemChangingEvent|!SelectedItemChangedEvent|!SelectedItemsChangingEvent|!SelectedItemsChangedEvent|!JQuery}
 */
JQuery.prototype.igPieChart = function(methodName_or_optionLiteral_or_options, item_or_index_or_width_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function LegendItemMouseLeftButtonDownEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function LegendItemMouseLeftButtonDownEventUIParam() {}
 /** @type {?} */
LegendItemMouseLeftButtonDownEventUIParam.prototype.legend;
 /** @type {?} */
LegendItemMouseLeftButtonDownEventUIParam.prototype.chart;
 /** @type {?} */
LegendItemMouseLeftButtonDownEventUIParam.prototype.series;
 /** @type {?} */
LegendItemMouseLeftButtonDownEventUIParam.prototype.actualItemBrush;
 /** @type {?} */
LegendItemMouseLeftButtonDownEventUIParam.prototype.actualSeriesBrush;
 /** @type {?} */
LegendItemMouseLeftButtonDownEventUIParam.prototype.item;
/**
 * @record
 * @struct
 */
function LegendItemMouseLeftButtonUpEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function LegendItemMouseLeftButtonUpEventUIParam() {}
 /** @type {?} */
LegendItemMouseLeftButtonUpEventUIParam.prototype.legend;
 /** @type {?} */
LegendItemMouseLeftButtonUpEventUIParam.prototype.chart;
 /** @type {?} */
LegendItemMouseLeftButtonUpEventUIParam.prototype.series;
 /** @type {?} */
LegendItemMouseLeftButtonUpEventUIParam.prototype.actualItemBrush;
 /** @type {?} */
LegendItemMouseLeftButtonUpEventUIParam.prototype.actualSeriesBrush;
 /** @type {?} */
LegendItemMouseLeftButtonUpEventUIParam.prototype.item;
/**
 * @record
 * @struct
 */
function LegendItemMouseEnterEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function LegendItemMouseEnterEventUIParam() {}
 /** @type {?} */
LegendItemMouseEnterEventUIParam.prototype.legend;
 /** @type {?} */
LegendItemMouseEnterEventUIParam.prototype.chart;
 /** @type {?} */
LegendItemMouseEnterEventUIParam.prototype.series;
 /** @type {?} */
LegendItemMouseEnterEventUIParam.prototype.actualItemBrush;
 /** @type {?} */
LegendItemMouseEnterEventUIParam.prototype.actualSeriesBrush;
 /** @type {?} */
LegendItemMouseEnterEventUIParam.prototype.item;
/**
 * @record
 * @struct
 */
function LegendItemMouseLeaveEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function LegendItemMouseLeaveEventUIParam() {}
 /** @type {?} */
LegendItemMouseLeaveEventUIParam.prototype.legend;
 /** @type {?} */
LegendItemMouseLeaveEventUIParam.prototype.chart;
 /** @type {?} */
LegendItemMouseLeaveEventUIParam.prototype.series;
 /** @type {?} */
LegendItemMouseLeaveEventUIParam.prototype.actualItemBrush;
 /** @type {?} */
LegendItemMouseLeaveEventUIParam.prototype.actualSeriesBrush;
 /** @type {?} */
LegendItemMouseLeaveEventUIParam.prototype.item;
/**
 * @record
 * @struct
 */
function IgChartLegend() {}
 /** @type {string} */
IgChartLegend.prototype.type;
 /** @type {(string|number)} */
IgChartLegend.prototype.width;
 /** @type {(string|number)} */
IgChartLegend.prototype.height;
 /** @type {string} */
IgChartLegend.prototype.theme;
 /** @type {!LegendItemMouseLeftButtonDownEvent} */
IgChartLegend.prototype.legendItemMouseLeftButtonDown;
 /** @type {!LegendItemMouseLeftButtonUpEvent} */
IgChartLegend.prototype.legendItemMouseLeftButtonUp;
 /** @type {!LegendItemMouseEnterEvent} */
IgChartLegend.prototype.legendItemMouseEnter;
 /** @type {!LegendItemMouseLeaveEvent} */
IgChartLegend.prototype.legendItemMouseLeave;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgChartLegendMethods() {}

/**
 * @return {void}
 */
IgChartLegendMethods.prototype.exportVisualData = function() {};

/**
 * Destroys the widget.
 * @return {void}
 */
IgChartLegendMethods.prototype.destroy = function() {};

/**
 * Returns the element holding the legend.
 * @return {void}
 */
IgChartLegendMethods.prototype.widget = function() {};

/**
 * Returns the ID of the DOM element holding the legend.
 * @return {string}
 */
IgChartLegendMethods.prototype.id = function() {};

/**
 * @param {string} propertyName
 * @return {!IgChartLegendMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Type of the legend.
 * Type of the legend.
 * 
 * \@optionValue New value to be set.
 * The width of the legend. It can be set as a number in pixels, string (px) or percentage (%).
 * The width of the legend. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * \@optionValue New value to be set.
 * The height of the legend. It can be set as a number in pixels, string (px) or percentage (%).
 * The height of the legend. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * \@optionValue New value to be set.
 * The swatch used to style this widget
 * The swatch used to style this widget
 * 
 * \@optionValue New value to be set.
 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this legend.
 * Function takes arguments evt and ui.
 * Use ui.legend to get reference to current legend object.
 * Use ui.chart to get reference to chart owner object.
 * Use ui.series to get reference to current series owner object.
 * Use ui.actualItemBrush to get legend item brush.
 * Use ui.actualSeriesBrush to get series owner brush.
 * Use ui.item to get reference to chart item related to event.
 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this legend.
 * Function takes arguments evt and ui.
 * Use ui.legend to get reference to current legend object.
 * Use ui.chart to get reference to chart owner object.
 * Use ui.series to get reference to current series owner object.
 * Use ui.actualItemBrush to get legend item brush.
 * Use ui.actualSeriesBrush to get series owner brush.
 * Use ui.item to get reference to chart item related to event.
 * 
 * \@optionValue New value to be set.
 * Occurs when the left mouse button is released while the mouse pointer is over an element of this legend.
 * Function takes arguments evt and ui.
 * Use ui.legend to get reference to current legend object.
 * Use ui.chart to get reference to chart owner object.
 * Use ui.series to get reference to current series owner object.
 * Use ui.actualItemBrush to get legend item brush.
 * Use ui.actualSeriesBrush to get series owner brush.
 * Use ui.item to get reference to chart item related to event.
 * Occurs when the left mouse button is released while the mouse pointer is over an element of this legend.
 * Function takes arguments evt and ui.
 * Use ui.legend to get reference to current legend object.
 * Use ui.chart to get reference to chart owner object.
 * Use ui.series to get reference to current series owner object.
 * Use ui.actualItemBrush to get legend item brush.
 * Use ui.actualSeriesBrush to get series owner brush.
 * Use ui.item to get reference to chart item related to event.
 * 
 * \@optionValue New value to be set.
 * Occurs when the left mouse pointer enters an element of this legend.
 * Function takes arguments evt and ui.
 * Use ui.legend to get reference to current legend object.
 * Use ui.chart to get reference to chart owner object.
 * Use ui.series to get reference to current series owner object.
 * Use ui.actualItemBrush to get legend item brush.
 * Use ui.actualSeriesBrush to get series owner brush.
 * Use ui.item to get reference to chart item related to event.
 * Occurs when the left mouse pointer enters an element of this legend.
 * Function takes arguments evt and ui.
 * Use ui.legend to get reference to current legend object.
 * Use ui.chart to get reference to chart owner object.
 * Use ui.series to get reference to current series owner object.
 * Use ui.actualItemBrush to get legend item brush.
 * Use ui.actualSeriesBrush to get series owner brush.
 * Use ui.item to get reference to chart item related to event.
 * 
 * \@optionValue New value to be set.
 * Occurs when the left mouse pointer leaves an element of this legend.
 * Function takes arguments evt and ui.
 * Use ui.legend to get reference to current legend object.
 * Use ui.chart to get reference to chart owner object.
 * Use ui.series to get reference to current series owner object.
 * Use ui.actualItemBrush to get legend item brush.
 * Use ui.actualSeriesBrush to get series owner brush.
 * Use ui.item to get reference to chart item related to event.
 * Occurs when the left mouse pointer leaves an element of this legend.
 * Function takes arguments evt and ui.
 * Use ui.legend to get reference to current legend object.
 * Use ui.chart to get reference to chart owner object.
 * Use ui.series to get reference to current series owner object.
 * Use ui.actualItemBrush to get legend item brush.
 * Use ui.actualSeriesBrush to get series owner brush.
 * Use ui.item to get reference to chart item related to event.
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgChartLegend} methodName_or_optionLiteral_or_options
 * @param {...string|!IgChartLegend|?} optionName_or_options_or_methodParams
 * @return {void|string|(string|number)|!LegendItemMouseLeftButtonDownEvent|!LegendItemMouseLeftButtonUpEvent|!LegendItemMouseEnterEvent|!LegendItemMouseLeaveEvent|!JQuery|?}
 */
JQuery.prototype.igChartLegend = function(methodName_or_optionLiteral_or_options, optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function ColorSelectedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColorSelectedEventUIParam() {}
 /** @type {?} */
ColorSelectedEventUIParam.prototype.color;
/**
 * @record
 * @struct
 */
function IgColorPicker() {}
 /** @type {string} */
IgColorPicker.prototype.colors;
 /** @type {!Array<?>} */
IgColorPicker.prototype.standardColors;
 /** @type {!ColorSelectedEvent} */
IgColorPicker.prototype.colorSelected;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgColorPickerMethods() {}

/**
 * Gets a reference to the div element of the color table
 * @return {!Object}
 */
IgColorPickerMethods.prototype.colorTable = function() {};

/**
 * Gets a reference to the div element with the default or custom colors table.
 * @return {!Object}
 */
IgColorPickerMethods.prototype.customColorTable = function() {};

/**
 * Returns the div element with the standard color table.
 * @return {!Object}
 */
IgColorPickerMethods.prototype.standardColorsTable = function() {};

/**
 * Gets the color for an element from the color picker in RGB format.
 * 
 * @param {!Object} $element     A jQuery element in the color picker from which the color will be retrieved.
 * @return {string}
 */
IgColorPickerMethods.prototype.colorFromElement = function($element) {};

/**
 * Returns the hexademical string of the currently selected color in the color picker. Returns null if no color is selected.
 * @return {string} string|null Returns the selected color if available. Null if no color is selected.
 */
IgColorPickerMethods.prototype.selectedColor = function() {};

/**
 * Select a color.
 * 
 * @param {string} color     The #RGB value of the color to be selected.
 * @return {!Object}
 */
IgColorPickerMethods.prototype.selectColor = function(color) {};

/**
 * @param {string} propertyName
 * @return {!IgColorPickerMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Gets/Sets the default colors. Default colors are the ones displayed in the upper table of the color picker.
 *             The array should contain arrays that contain the color values for every next row.
 * 
 * /Sets the default colors. Default colors are the ones displayed in the upper table of the color picker.
 *             The array should contain arrays that contain the color values for every next row.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the standard colors. Standard colors are the ones displayed in the color picker bottom,
 *             visually separated from the default colors. The array should contain the color values.
 * 
 * /Sets the standard colors. Standard colors are the ones displayed in the color picker bottom,
 *             visually separated from the default colors. The array should contain the color values.
 * 
 * 
 * \@optionValue New value to be set.
 * The event is fired when a color is selected.
 * 
 * Function takes arguments evt and ui.
 * Use ui.color to get a reference to the color object.
 * The event is fired when a color is selected.
 * 
 * Function takes arguments evt and ui.
 * Use ui.color to get a reference to the color object.
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgColorPicker} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgColorPicker|?} $element_or_color_or_optionName_or_options_or_methodParams
 * @return {!Object|string|void|!Array<?>|!ColorSelectedEvent|!JQuery|?}
 */
JQuery.prototype.igColorPicker = function(methodName_or_optionLiteral_or_options, $element_or_color_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function ClickEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ClickEventUIParam() {}
 /** @type {?} */
ClickEventUIParam.prototype.item;
/**
 * @record
 * @struct
 */
function ExpandedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ExpandedEventUIParam() {}
 /** @type {?} */
ExpandedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function ExpandingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ExpandingEventUIParam() {}
 /** @type {?} */
ExpandingEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function CollapsedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function CollapsedEventUIParam() {}
 /** @type {?} */
CollapsedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function CollapsingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function CollapsingEventUIParam() {}
 /** @type {?} */
CollapsingEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function IgColorPickerSplitButton() {}
 /** @type {!Array<?>} */
IgColorPickerSplitButton.prototype.items;
 /** @type {string} */
IgColorPickerSplitButton.prototype.defaultColor;
 /** @type {boolean} */
IgColorPickerSplitButton.prototype.hasDefaultIcon;
 /** @type {string} */
IgColorPickerSplitButton.prototype.defaultItemName;
 /** @type {boolean} */
IgColorPickerSplitButton.prototype.swapDefaultEnabled;
 /** @type {!ClickEvent} */
IgColorPickerSplitButton.prototype.click;
 /** @type {!ExpandedEvent} */
IgColorPickerSplitButton.prototype.expanded;
 /** @type {!ExpandingEvent} */
IgColorPickerSplitButton.prototype.expanding;
 /** @type {!CollapsedEvent} */
IgColorPickerSplitButton.prototype.collapsed;
 /** @type {!CollapsingEvent} */
IgColorPickerSplitButton.prototype.collapsing;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgColorPickerSplitButtonMethods() {}

/**
 * Sets the color of the split button
 * 
 * @param {string} color The color value to be set.
 * @return {!Object}
 */
IgColorPickerSplitButtonMethods.prototype.setColor = function(color) {};

/**
 * Collapse the widget.
 * 
 * @param {!Object} e
 * @return {!Object}
 */
IgColorPickerSplitButtonMethods.prototype.collapse = function(e) {};

/**
 * Expands the widget.
 * 
 * @param {!Object} e
 * @return {!Object}
 */
IgColorPickerSplitButtonMethods.prototype.expand = function(e) {};

/**
 * Destroys the widget.
 * @return {!Object}
 */
IgColorPickerSplitButtonMethods.prototype.destroy = function() {};

/**
 * Switch to given igToolbar button.
 * 
 * @param {!Object} button . The button jQuery element.
 * @return {void}
 */
IgColorPickerSplitButtonMethods.prototype.switchToButton = function(button) {};

/**
 * @return {void}
 */
IgColorPickerSplitButtonMethods.prototype.widget = function() {};

/**
 * Toggle widget state between collapsed and expanded.
 * 
 * @param {!Object} e The igSplitButton to be expanded/collapsed.
 * @return {!Object}
 */
IgColorPickerSplitButtonMethods.prototype.toggle = function(e) {};

/**
 * @param {string} propertyName
 * @return {!IgColorPickerSplitButtonMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Button items.
 * 
 * Button items.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/ the button default color value.
 * 
 * /sets the button default color value.
 * 
 * 
 * \@optionValue New value to be set.
 * If this option is set to true, the igColorPickerSplitButton will be rendered with an icon.
 * 
 * If this option is set to true, the igColorPickerSplitButton will be rendered with an icon.
 * 
 * 
 * \@optionValue New value to be set.
 * Default button item name.
 * 
 * Default button item name.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets whether the default button will be switched when another button is selected.
 * 
 * Sets whether the default button will be switched when another button is selected.
 * 
 * 
 * \@optionValue New value to be set.
 * Event fired when the button is clicked.
 * 
 *             Function takes arguments evt and ui.
 * Use ui.item to get a reference the igSplitButton element.
 * Event fired when the button is clicked.
 * 
 *             Function takes arguments evt and ui.
 * Use ui.item to get a reference the igSplitButton element.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the button is expanded.
 * 
 *             Function takes arguments evt and ui.
 * Use ui.owner to get a reference the igSplitButton.
 * Event fired after the button is expanded.
 * 
 *             Function takes arguments evt and ui.
 * Use ui.owner to get a reference the igSplitButton.
 * 
 * \@optionValue Define event handler function.
 * Event fired before a button item is expanded.
 * 
 *             Function takes arguments evt and ui.
 * Use ui.owner to get a reference the igSplitButton.
 * Event fired before a button item is expanded.
 * 
 *             Function takes arguments evt and ui.
 * Use ui.owner to get a reference the igSplitButton.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the button is collapsed.
 * 
 *             Function takes arguments evt and ui.
 * Use ui.owner to get a reference the igSplitButton.
 * Event fired after the button is collapsed.
 * 
 *             Function takes arguments evt and ui.
 * Use ui.owner to get a reference the igSplitButton.
 * 
 * \@optionValue Define event handler function.
 * Event fired before a button item is collapsed.
 * 
 *             Function takes arguments evt and ui.
 * Use ui.owner to get a reference the igSplitButton.
 * Event fired before a button item is collapsed.
 * 
 *             Function takes arguments evt and ui.
 * Use ui.owner to get a reference the igSplitButton.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgColorPickerSplitButton} methodName_or_optionLiteral_or_options
 * @param {...string|!Object|!IgColorPickerSplitButton|?} color_or_e_or_button_or_optionName_or_options_or_methodParams
 * @return {!Object|void|!Array<?>|string|boolean|!ClickEvent|!ExpandedEvent|!ExpandingEvent|!CollapsedEvent|!CollapsingEvent|!JQuery|?}
 */
JQuery.prototype.igColorPickerSplitButton = function(methodName_or_optionLiteral_or_options, color_or_e_or_button_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgComboLoadOnDemandSettings() {}
 /** @type {boolean} */
IgComboLoadOnDemandSettings.prototype.enabled;
 /** @type {number} */
IgComboLoadOnDemandSettings.prototype.pageSize;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgComboMultiSelection() {}
 /** @type {boolean} */
IgComboMultiSelection.prototype.enabled;
 /** @type {boolean} */
IgComboMultiSelection.prototype.addWithKeyModifier;
 /** @type {boolean} */
IgComboMultiSelection.prototype.showCheckboxes;
 /** @type {string} */
IgComboMultiSelection.prototype.itemSeparator;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgComboGrouping() {}
 /** @type {string} */
IgComboGrouping.prototype.key;
 /** @type {string} */
IgComboGrouping.prototype.dir;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgComboInitialSelectedItem() {}
 /** @type {number} */
IgComboInitialSelectedItem.prototype.index;
 /** @type {?} */
IgComboInitialSelectedItem.prototype.value;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function RenderedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RenderedEventUIParam() {}
 /** @type {?} */
RenderedEventUIParam.prototype.owner;
 /** @type {?} */
RenderedEventUIParam.prototype.element;
/**
 * @record
 * @struct
 */
function FilteringEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FilteringEventUIParam() {}
 /** @type {?} */
FilteringEventUIParam.prototype.owner;
 /** @type {?} */
FilteringEventUIParam.prototype.expression;
/**
 * @record
 * @struct
 */
function FilteredEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FilteredEventUIParam() {}
 /** @type {?} */
FilteredEventUIParam.prototype.owner;
 /** @type {?} */
FilteredEventUIParam.prototype.elements;
/**
 * @record
 * @struct
 */
function ItemsRenderingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ItemsRenderingEventUIParam() {}
 /** @type {?} */
ItemsRenderingEventUIParam.prototype.owner;
 /** @type {?} */
ItemsRenderingEventUIParam.prototype.dataSource;
/**
 * @record
 * @struct
 */
function ItemsRenderedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ItemsRenderedEventUIParam() {}
 /** @type {?} */
ItemsRenderedEventUIParam.prototype.owner;
 /** @type {?} */
ItemsRenderedEventUIParam.prototype.dataSource;
/**
 * @record
 * @struct
 */
function DropDownOpeningEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DropDownOpeningEventUIParam() {}
 /** @type {?} */
DropDownOpeningEventUIParam.prototype.owner;
 /** @type {?} */
DropDownOpeningEventUIParam.prototype.list;
/**
 * @record
 * @struct
 */
function DropDownOpenedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DropDownOpenedEventUIParam() {}
 /** @type {?} */
DropDownOpenedEventUIParam.prototype.owner;
 /** @type {?} */
DropDownOpenedEventUIParam.prototype.list;
/**
 * @record
 * @struct
 */
function DropDownClosingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DropDownClosingEventUIParam() {}
 /** @type {?} */
DropDownClosingEventUIParam.prototype.owner;
 /** @type {?} */
DropDownClosingEventUIParam.prototype.list;
/**
 * @record
 * @struct
 */
function DropDownClosedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DropDownClosedEventUIParam() {}
 /** @type {?} */
DropDownClosedEventUIParam.prototype.owner;
 /** @type {?} */
DropDownClosedEventUIParam.prototype.list;
/**
 * @record
 * @struct
 */
function SelectionChangingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SelectionChangingEventUIParam() {}
 /** @type {?} */
SelectionChangingEventUIParam.prototype.owner;
 /** @type {?} */
SelectionChangingEventUIParam.prototype.currentItems;
 /** @type {?} */
SelectionChangingEventUIParam.prototype.items;
/**
 * @record
 * @struct
 */
function SelectionChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SelectionChangedEventUIParam() {}
 /** @type {?} */
SelectionChangedEventUIParam.prototype.owner;
 /** @type {?} */
SelectionChangedEventUIParam.prototype.items;
 /** @type {?} */
SelectionChangedEventUIParam.prototype.oldItems;
/**
 * @record
 * @struct
 */
function IgCombo() {}
 /** @type {(string|number)} */
IgCombo.prototype.width;
 /** @type {(string|number)} */
IgCombo.prototype.height;
 /** @type {(string|number)} */
IgCombo.prototype.dropDownWidth;
 /** @type {?} */
IgCombo.prototype.dataSource;
 /** @type {string} */
IgCombo.prototype.dataSourceType;
 /** @type {string} */
IgCombo.prototype.dataSourceUrl;
 /** @type {string} */
IgCombo.prototype.responseTotalRecCountKey;
 /** @type {string} */
IgCombo.prototype.responseDataKey;
 /** @type {string} */
IgCombo.prototype.responseDataType;
 /** @type {string} */
IgCombo.prototype.responseContentType;
 /** @type {string} */
IgCombo.prototype.requestType;
 /** @type {string} */
IgCombo.prototype.valueKey;
 /** @type {string} */
IgCombo.prototype.textKey;
 /** @type {string} */
IgCombo.prototype.itemTemplate;
 /** @type {string} */
IgCombo.prototype.headerTemplate;
 /** @type {string} */
IgCombo.prototype.footerTemplate;
 /** @type {string} */
IgCombo.prototype.inputName;
 /** @type {number} */
IgCombo.prototype.animationShowDuration;
 /** @type {number} */
IgCombo.prototype.animationHideDuration;
 /** @type {boolean} */
IgCombo.prototype.dropDownAttachedToBody;
 /** @type {string} */
IgCombo.prototype.filteringType;
 /** @type {string} */
IgCombo.prototype.filterExprUrlKey;
 /** @type {string} */
IgCombo.prototype.filteringCondition;
 /** @type {string} */
IgCombo.prototype.filteringLogic;
 /** @type {string} */
IgCombo.prototype.noMatchFoundText;
 /** @type {!IgComboLoadOnDemandSettings} */
IgCombo.prototype.loadOnDemandSettings;
 /** @type {number} */
IgCombo.prototype.visibleItemsCount;
 /** @type {string} */
IgCombo.prototype.placeHolder;
 /** @type {string} */
IgCombo.prototype.mode;
 /** @type {boolean} */
IgCombo.prototype.virtualization;
 /** @type {!IgComboMultiSelection} */
IgCombo.prototype.multiSelection;
 /** @type {!IgComboGrouping} */
IgCombo.prototype.grouping;
 /** @type {?} */
IgCombo.prototype.validatorOptions;
 /** @type {string} */
IgCombo.prototype.highlightMatchesMode;
 /** @type {boolean} */
IgCombo.prototype.caseSensitive;
 /** @type {boolean} */
IgCombo.prototype.autoSelectFirstMatch;
 /** @type {boolean} */
IgCombo.prototype.autoComplete;
 /** @type {boolean} */
IgCombo.prototype.allowCustomValue;
 /** @type {boolean} */
IgCombo.prototype.closeDropDownOnBlur;
 /** @type {number} */
IgCombo.prototype.delayInputChangeProcessing;
 /** @type {number} */
IgCombo.prototype.tabIndex;
 /** @type {boolean} */
IgCombo.prototype.dropDownOnFocus;
 /** @type {boolean} */
IgCombo.prototype.closeDropDownOnSelect;
 /** @type {boolean} */
IgCombo.prototype.selectItemBySpaceKey;
 /** @type {!Array<!IgComboInitialSelectedItem>} */
IgCombo.prototype.initialSelectedItems;
 /** @type {boolean} */
IgCombo.prototype.preventSubmitOnEnter;
 /** @type {string} */
IgCombo.prototype.format;
 /** @type {boolean} */
IgCombo.prototype.suppressKeyboard;
 /** @type {boolean} */
IgCombo.prototype.enableClearButton;
 /** @type {string} */
IgCombo.prototype.dropDownButtonTitle;
 /** @type {string} */
IgCombo.prototype.clearButtonTitle;
 /** @type {string} */
IgCombo.prototype.dropDownOrientation;
 /** @type {!RenderedEvent} */
IgCombo.prototype.rendered;
 /** @type {!DataBindingEvent} */
IgCombo.prototype.dataBinding;
 /** @type {!DataBoundEvent} */
IgCombo.prototype.dataBound;
 /** @type {!FilteringEvent} */
IgCombo.prototype.filtering;
 /** @type {!FilteredEvent} */
IgCombo.prototype.filtered;
 /** @type {!ItemsRenderingEvent} */
IgCombo.prototype.itemsRendering;
 /** @type {!ItemsRenderedEvent} */
IgCombo.prototype.itemsRendered;
 /** @type {!DropDownOpeningEvent} */
IgCombo.prototype.dropDownOpening;
 /** @type {!DropDownOpenedEvent} */
IgCombo.prototype.dropDownOpened;
 /** @type {!DropDownClosingEvent} */
IgCombo.prototype.dropDownClosing;
 /** @type {!DropDownClosedEvent} */
IgCombo.prototype.dropDownClosed;
 /** @type {!SelectionChangingEvent} */
IgCombo.prototype.selectionChanging;
 /** @type {!SelectionChangedEvent} */
IgCombo.prototype.selectionChanged;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgComboMethods() {}

/**
 * Performs databinding on the combo box. The [databinding](ui.igcombo#events:dataBinding) and [dataBound](ui.igcombo#events:dataBound) events are always raised.
 * @return {!Object}
 */
IgComboMethods.prototype.dataBind = function() {};

/**
 * Forces an update of the igCombo value according to the current text in the igCombo input.
 * 
 * The refresh is primarily intended to be used with [allowCustomValue](ui.igcombo#options:allowCustomValue) set to true.
 * The refresh will take the current text and, if no selection is applied, will set it as igCombo value provided that [allowCustomValue](ui.igcombo#options:allowCustomValue) true.
 * @return {!Object}
 */
IgComboMethods.prototype.refreshValue = function() {};

/**
 * Gets the associated data of an item by value matching it's [valueKey](ui.igcombo#options:valueKey) property.
 * 
 * @param {!Object} value Value matching the valueKey property of item to be tested if it is selected
 * @return {!Object}
 */
IgComboMethods.prototype.dataForValue = function(value) {};

/**
 * Gets the associated data of li element in the combo.
 * 
 * @param {!Object} $element jQuery element of item in the drop down list
 * @return {!Object}
 */
IgComboMethods.prototype.dataForElement = function($element) {};

/**
 * Gets object/s containing data and list item in the combo by element/s.
 * 
 * @param {!Object} $element jQuery object with drop down list item element or elements
 * @return {!Object}
 */
IgComboMethods.prototype.itemsFromElement = function($element) {};

/**
 * Gets object/s containing data and list item in the combo by value/s.
 * 
 * @param {!Object} value Value of item in the drop down list or array with values.
 * @return {!Object}
 */
IgComboMethods.prototype.itemsFromValue = function(value) {};

/**
 * Gets object/s containing data and list item in the combo by index/es.
 * 
 * @param {number} index Index or array of indexes of items in the drop down list
 * @return {!Object}
 */
IgComboMethods.prototype.itemsFromIndex = function(index) {};

/**
 * Gets array with data and objects representing li elements in combo box.
 * @return {!Array<?>}
 */
IgComboMethods.prototype.items = function() {};

/**
 * Gets array with objects representing the filtered li elements in combo box.
 * @return {!Array<?>}
 */
IgComboMethods.prototype.filteredItems = function() {};

/**
 * Gets array with objects representing selected li elements in combo box.
 * @return {!Array<?>}
 */
IgComboMethods.prototype.selectedItems = function() {};

/**
 * Triggers filtering.
 * 
 * @param {!Object=} texts Filter by string, or array of strings.
 * @param {!Object=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [filtering](ui.igcombo#events:filtering) and [filtered](ui.igcombo#events:filtered) events.
 * @return {!Object}
 */
IgComboMethods.prototype.filter = function(texts, event) {};

/**
 * Clears filtering.
 * 
 * @param {!Object=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [filtering](ui.igcombo#events:filtering) and [filtered](ui.igcombo#events:filtered) events.
 * @return {!Object}
 */
IgComboMethods.prototype.clearFiltering = function(event) {};

/**
 * Opens the drop-down.
 * 
 * @param {!Function=} callback Specifies callback function to be executed when open animation is completed.
 * @param {boolean=} focusCombo Set to false to not focus combo"s text input after the drop down is opened. By default the combo's input is focused.
 * @param {!Object=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [dropDownOpening](ui.igcombo#events:dropDownOpening) and [dropDownOpened](ui.igcombo#events:dropDownOpened) events.
 * @return {!Object}
 */
IgComboMethods.prototype.openDropDown = function(callback, focusCombo, event) {};

/**
 * Closes the drop down.
 * 
 * @param {!Function=} callback Specifies callback function to be executed when close animation is completed.
 * @param {!Object=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [dropDownClosing](ui.igcombo#events:dropDownClosing) and [dropDownClosed](ui.igcombo#events:dropDownClosed) events.
 * @return {!Object}
 */
IgComboMethods.prototype.closeDropDown = function(callback, event) {};

/**
 * Clears the input text, resets highlighting, filtering and selection.
 * 
 * @param {!Object=} options     Object with set of options controlling the behavior of this api method.
 * focusCombo (boolean): Set to true to focus combo after clearing the input.
 * @param {!Object=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
 * @return {!Object}
 */
IgComboMethods.prototype.clearInput = function(options, event) {};

/**
 * Verifies whether the specified li is selected.
 * 
 * @param {!Object} $item jQuery object with item to verify whether it is selected.
 * @return {boolean}
 */
IgComboMethods.prototype.isSelected = function($item) {};

/**
 * Verifies whether a specified value is selected.
 * 
 * @param {!Object} value Value matching the [valueKey](ui.igcombo#options:valueKey) property of item to be tested if it is selected
 * @return {boolean}
 */
IgComboMethods.prototype.isValueSelected = function(value) {};

/**
 * Verifies whether the li representing the data source's record at the specified index is selected.
 * 
 * @param {!Object} index Index of data source record
 * @return {boolean}
 */
IgComboMethods.prototype.isIndexSelected = function(index) {};

/**
 * Selects list item/items from the drop-down list by specified value or array of values. When called witout params will return the value of the selected item or if [multiSelection](ui.igcombo#options:multiSelection) is enabled array of selected values.
 * 
 * @param {!Object=} value Value or array of values matching the valueKey property of item/items to be selected
 * @param {!Object=} options Object with set of options controlling the behavior of this api method.
 *              closeDropDown (boolean): Set to true to close the drop down list after the selection.
 *              focusCombo (boolean): Set to true to focus combo after the selection.
 *              additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.
 *              keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
 *              keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
 *              keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
 *              keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
 *              keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
 * @param {!Object=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
 * @return {!Object}
 */
IgComboMethods.prototype.value = function(value, options, event) {};

/**
 * Selects a list item from the drop-down list.
 * 
 * @param {!Object} $items jQuery object with item or items to be selected.
 * @param {!Object=} options Object with set of options controlling the behavior of this api method.
 *              closeDropDown (boolean): Set to true to close the drop down list after the selection.
 *              focusCombo (boolean): Set to true to focus combo after the selection.
 *              additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.
 *              keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
 *              keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
 *              keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
 *              keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
 *              keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
 * @param {!Object=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
 * @return {!Object}
 */
IgComboMethods.prototype.select = function($items, options, event) {};

/**
 * Gets/Sets selected item/s from the drop-down list by specified index.
 * 
 * @param {!Object=} index Index or array of indexes of items to be selected
 * @param {!Object=} options Object with set of options controlling the behavior of this api method.
 *              closeDropDown (boolean): Set to true to close the drop down list after the selection.
 *              focusCombo (boolean): Set to true to focus combo after the selection.
 *              additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.
 *              keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
 *              keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
 *              keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
 *              keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
 *              keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
 * @param {!Object=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
 * @return {!Object}
 */
IgComboMethods.prototype.index = function(index, options, event) {};

/**
 * Selects all items from the drop-down list.
 * 
 * @param {!Object=} options Object with set of options controlling the behavior of this api method.
 *              closeDropDown (boolean): Set to true to close the drop down list after the selection.
 *              focusCombo (boolean): Set to true to focus combo after the selection.
 *              keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
 *              keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
 *              keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
 *              keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
 *              keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
 * @param {!Object=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
 * @return {!Object}
 */
IgComboMethods.prototype.selectAll = function(options, event) {};

/**
 * Deselects a list item from the drop down list by value.
 * 
 * @param {!Object} value Value or array of values matching the [valueKey](ui.igcombo#options:valueKey) property of item/items to be deselected
 * @param {!Object=} options Object with set of options controlling the behavior of this api method.
 *              focusCombo (boolean): Set to true to focus combo after the deselection.
 *              keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
 * @param {!Object=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
 * @return {!Object}
 */
IgComboMethods.prototype.deselectByValue = function(value, options, event) {};

/**
 * Deselects a list item from the drop down list.
 * 
 * @param {!Object} $items jQuery object with item or items to be deselected
 * @param {!Object=} options Object with set of options controlling the behavior of this api method.
 *              focusCombo (boolean): Set to true to focus combo after the deselection.
 *              keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
 * @param {!Object=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
 * @return {!Object}
 */
IgComboMethods.prototype.deselect = function($items, options, event) {};

/**
 * Deselects a list item from the drop down list by index.
 * 
 * @param {!Object} index Index or array of indexes of items to be selected
 * @param {!Object=} options Object with set of options controlling the behavior of this api method.
 *              focusCombo (boolean): Set to true to focus combo after the deselection.
 *              keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
 * @param {!Object=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
 * @return {!Object}
 */
IgComboMethods.prototype.deselectByIndex = function(index, options, event) {};

/**
 * Deselects all selected items from the drop down list.
 * 
 * @param {!Object=} options Object with set of options controlling the behavior of this api method.
 *              focusCombo (boolean): Set to true to focus combo after the deselection.
 *              keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
 * @param {!Object=} event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger [selectionChanging](ui.igcombo#events:selectionChanging) and [selectionChanged](ui.igcombo#events:selectionChanged) events.
 * @return {!Object}
 */
IgComboMethods.prototype.deselectAll = function(options, event) {};

/**
 * Gets/Sets index of active item in list.
 * 
 * @param {number=} index New active index for list. In order to clear active item, use -1.
 * @return {(number|!Object)} number|object Returns index of active item in list or -1, if parameter is undefined. Otherwise, it returns reference to this igCombo.
 */
IgComboMethods.prototype.activeIndex = function(index) {};

/**
 * Gets/Sets text in text input field.
 * 
 * @param {string=} text New text value for combo's input field.
 * @return {(string|!Object)} string|object If parameter is undefined, then current text in field is returned. Otherwise, it returns reference to this igCombo.
 */
IgComboMethods.prototype.text = function(text) {};

/**
 * Gets/Sets scrollTop attribute of html element, which scrolls drop-down list of items.
 * 
 * @param {number=} value New value for scroll top in list. Note: if list is closed and new value is provided, then openDropDown() is called automatically.
 * @return {(number|!Object)} number|object If parameter is undefined, then scrollTop is returned. Otherwise, it returns reference to this igCombo.
 */
IgComboMethods.prototype.listScrollTop = function(value) {};

/**
 * Gets jQuery objects representing all rendered list items in the combo drop down list.
 * @return {!Object}
 */
IgComboMethods.prototype.listItems = function() {};

/**
 * Gets jQuery object of the outer element of the combo.
 * @return {!Object}
 */
IgComboMethods.prototype.comboWrapper = function() {};

/**
 * Gets jQuery object of the drop down associated with this combo widget
 * @return {!Object}
 */
IgComboMethods.prototype.dropDown = function() {};

/**
 * Gets jQuery object of the container that holds the list with items.
 * @return {!Object}
 */
IgComboMethods.prototype.list = function() {};

/**
 * Gets jQuery object of the text input associated with this combo widget.
 * @return {!Object}
 */
IgComboMethods.prototype.textInput = function() {};

/**
 * Gets jQuery object of the value input associated with this combo widget.
 * @return {!Object}
 */
IgComboMethods.prototype.valueInput = function() {};

/**
 * Gets reference to [igValidator](ui.igvalidator) used by igCombo.
 * 
 * @param {boolean=} destroy Request to destroy validator.
 * @return {!Object}
 */
IgComboMethods.prototype.validator = function(destroy) {};

/**
 * Trigger validation.
 * @return {boolean}
 */
IgComboMethods.prototype.validate = function() {};

/**
 * Returns boolean representing whether the combo drop down list is opened.
 * @return {boolean}
 */
IgComboMethods.prototype.dropDownOpened = function() {};

/**
 * Repositions drop down under combo input. Has effect only when the drop down is attached to body.
 * @return {!Object}
 */
IgComboMethods.prototype.positionDropDown = function() {};

/**
 * Destroys the igCombo widget.
 * @return {!Object}
 */
IgComboMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgComboMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Gets/Sets the width of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.
 * 
 * /Sets the width of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets height of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.
 * 
 * /Sets height of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the width of drop-down list in pixels.
 * 
 * /Sets the width of drop-down list in pixels.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets a valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an [$.ig.DataSource](ig.datasource) itself.
 * Note: if it is set to string and [dataSourceType](ui.igcombo#options:dataSourceType) option is not set, then [$.ig.JSONDataSource](ig.jsondatasource) is used.
 * 
 * /Sets a valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an [$.ig.DataSource](ig.datasource) itself.
 * Note: if it is set to string and [dataSourceType](ui.igcombo#options:dataSourceType) option is not set, then [$.ig.JSONDataSource](ig.jsondatasource) is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of [$.ig.DataSource](ig.datasource) and its [type](ig.datasource#options:settings.type) property.
 * 
 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of [$.ig.DataSource](ig.datasource) and its [type](ig.datasource#options:settings.type) property.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets URL which is used for sending JSON on request for remote filtering (MVC for example). That option is required when [load on demand](ui.igcombo#options:loadOnDemandSettings) is
 *                 [enabled](ui.igcombo#options:loadOnDemandSettings.enabled) and its [type](ui.igcombo#options:filteringType) is remote.
 * 
 * Sets URL which is used for sending JSON on request for remote filtering (MVC for example). That option is required when [load on demand](ui.igcombo#options:loadOnDemandSettings) is
 *                 [enabled](ui.igcombo#options:loadOnDemandSettings.enabled) and its [type](ui.igcombo#options:filteringType) is remote.
 * 
 * 
 * \@optionValue New value to be set.
 * See [$.ig.DataSource](ig.datasource) property in the response specifying the total number of records on the server.
 * 
 * See [$.ig.DataSource](ig.datasource) property in the response specifying the total number of records on the server.
 * 
 * 
 * \@optionValue New value to be set.
 * See [$.ig.DataSource](ig.datasource) This is basically the property in the response where data records are held, if the response is wrapped.
 * 
 * See [$.ig.DataSource](ig.datasource) This is basically the property in the response where data records are held, if the response is wrapped.
 * 
 * 
 * \@optionValue New value to be set.
 * Response type when a URL is set as the data source. See http://api.jquery.com/jQuery.ajax/ => dataType.
 * 
 * Response type when a URL is set as the data source. See http://api.jquery.com/jQuery.ajax/ => dataType.
 * 
 * 
 * \@optionValue New value to be set.
 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType.
 * 
 * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType.
 * 
 * 
 * \@optionValue New value to be set.
 * Specifies the HTTP verb to be used to issue the request.
 * 
 * Specifies the HTTP verb to be used to issue the request.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets name of column which contains the "value". If it is missing, then the name of first column will be used.
 * 
 * /Sets name of column which contains the "value". If it is missing, then the name of first column will be used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets name of column which contains the displayed text. If it is missing, then [valueKey](ui.igcombo#options:valueKey) option will be used.
 * 
 * /Sets name of column which contains the displayed text. If it is missing, then [valueKey](ui.igcombo#options:valueKey) option will be used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets a template used to render an item in list. The igCombo utilizes igTemplating for generating node content templates.
 *     More info on the templating engine can be found here: http://www.igniteui.com/help/infragistics-templating-engine.
 * 
 * /Sets a template used to render an item in list. The igCombo utilizes igTemplating for generating node content templates.
 *     More info on the templating engine can be found here: http://www.igniteui.com/help/infragistics-templating-engine.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets template used to render a header in the drop-down list. The template is rendered inside of a DIV html element.
 * 
 * /Sets template used to render a header in the drop-down list. The template is rendered inside of a DIV html element.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets template used to render a footer in the drop-down list.
 * Notes:
 * 1. The template is rendered inside of DIV html element.
 * 2. The following variables can be used:
 * - {0}: Number of records in igCombo (view of dataSource)
 * - {1}: Number of records in dataSource
 * - {2}: Number of (filtered) records on server
 * - {3}: Number of all records on server
 * 
 * /Sets template used to render a footer in the drop-down list.
 * Notes:
 * 1. The template is rendered inside of DIV html element.
 * 2. The following variables can be used:
 * - {0}: Number of records in igCombo (view of dataSource)
 * - {1}: Number of records in dataSource
 * - {2}: Number of (filtered) records on server
 * - {3}: Number of all records on server
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the name of a hidden INPUT element, which is used when submitting data. Its value will be set to the values of the selected items valueKeys separated by ',' character on any change in igCombo. If the combo element has 'name' attribute and this option is not set, the 'name' attribute will be used for the input name.
 * 
 * /Sets the name of a hidden INPUT element, which is used when submitting data. Its value will be set to the values of the selected items valueKeys separated by ',' character on any change in igCombo. If the combo element has 'name' attribute and this option is not set, the 'name' attribute will be used for the input name.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets show drop-down list animation duration in milliseconds.
 * 
 * /Sets show drop-down list animation duration in milliseconds.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets hide drop-down list animation duration in milliseconds.
 * 
 * /Sets hide drop-down list animation duration in milliseconds.
 * 
 * 
 * \@optionValue New value to be set.
 * If set to true, the container of the drop-down list is appended to the body.
 *                 If set to false, it is appended to the parent element of the combo.
 * 
 * If set to true, the container of the drop-down list is appended to the body.
 *                 If set to false, it is appended to the parent element of the combo.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets type of filtering.Note: option is set to "remote", then the "css.waitFiltering" is applied to combo and its drop-down list.
 * 
 * 
 * /Sets type of filtering.Note: option is set to "remote", then the "css.waitFiltering" is applied to combo and its drop-down list.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets URL key name that specifies how the remote filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData.
 * 
 * /Sets URL key name that specifies how the remote filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets condition used for filtering.Note: When [autoComplete](ui.igcombo#options:autoComplete) is enabled, the filtering condition is always "startsWith".
 * 
 * 
 * /Sets condition used for filtering.Note: When [autoComplete](ui.igcombo#options:autoComplete) is enabled, the filtering condition is always "startsWith".
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets filtering logic.
 * 
 * /Sets filtering logic.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets text of list item for condition when [filteringType](ui.igcombo#options:filteringType) option is enabled and no match was found. That is an override for the $.ig.Combo.locale.noMatchFoundText.
 * 
 * /Sets text of list item for condition when [filteringType](ui.igcombo#options:filteringType) option is enabled and no match was found. That is an override for the $.ig.Combo.locale.noMatchFoundText.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets container of variables which define load on demand functionality.
 * Notes:
 * That option has effect only when data is loaded remotely using [dataSourceUrl](ui.igcombo#options:dataSourceUrl).
 * Selection is supported only for already loaded items.
 * 
 * /Sets container of variables which define load on demand functionality.
 * Notes:
 * That option has effect only when data is loaded remotely using [dataSourceUrl](ui.igcombo#options:dataSourceUrl).
 * Selection is supported only for already loaded items.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets how many items should be shown at once.
 *    Notes:
 *    This option is used for [virtualization](ui.igcombo#options:virtualization) in order to render initial list items.
 * 
 * /Sets how many items should be shown at once.
 *    Notes:
 *    This option is used for [virtualization](ui.igcombo#options:virtualization) in order to render initial list items.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets value that is displayed when input field is empty. That is an override for the $.ig.Combo.locale.placeHolder.
 * 
 * /Sets value that is displayed when input field is empty. That is an override for the $.ig.Combo.locale.placeHolder.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets gets functionality mode.
 * 
 * Sets gets functionality mode.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets ability to use virtual rendering for drop-down list. Enable to boost performance when combo has lots of records.
 * If that option is enabled, then only visible items are created and the top edge of the first visible item in list is aligned to the top edge of list.
 * 
 * /Sets ability to use virtual rendering for drop-down list. Enable to boost performance when combo has lots of records.
 * If that option is enabled, then only visible items are created and the top edge of the first visible item in list is aligned to the top edge of list.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets object specifying multi selection feature options. Note showCheckboxes and itemSeparator has effect only if multi selection is enabled.
 * 
 * /Sets object specifying multi selection feature options. Note showCheckboxes and itemSeparator has effect only if multi selection is enabled.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets object specifying grouping feature options. The option has key and dir properties.
 * 
 * /Sets object specifying grouping feature options. The option has key and dir properties.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets object which contains options supported by [igValidator](ui.igvalidator).
 * Notes: in order for validator to work, application should ensure that [igValidator](ui.igvalidator) is loaded (ig.ui.validator.js/css files).
 * 
 * /Sets object which contains options supported by [igValidator](ui.igvalidator).
 * Notes: in order for validator to work, application should ensure that [igValidator](ui.igvalidator) is loaded (ig.ui.validator.js/css files).
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets condition used for highlighting of matching parts in items of drop-down list.
 * 
 * /Sets condition used for highlighting of matching parts in items of drop-down list.
 * 
 * 
 * \@optionValue New value to be set.
 * If set to true, filtering and auto selection will be case-sensitive.
 * 
 * If set to true, filtering and auto selection will be case-sensitive.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the first matching item should be auto selected when typing in input. When [multiSelection](ui.igcombo#options:multiSelection) is enabled this option will instead put the active item on the matching element.
 * 
 * /Sets whether the first matching item should be auto selected when typing in input. When [multiSelection](ui.igcombo#options:multiSelection) is enabled this option will instead put the active item on the matching element.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets ability to autocomplete field from first matching item in list.
 * Note: When autoComplete option is enabled, then "startsWith" is used for [filteringCondition](ui.igcombo#options:filteringCondition).
 * 
 * /Sets ability to autocomplete field from first matching item in list.
 * Note: When autoComplete option is enabled, then "startsWith" is used for [filteringCondition](ui.igcombo#options:filteringCondition).
 * 
 * 
 * \@optionValue New value to be set.
 * If set to true:
 * 1. Allows custom value input only with single selection.
 * 2. Custom values will be auto completed to the closest value if [autoComplete](ui.igcombo#options:autoComplete) is enabled.
 * 
 * If set to true:
 * 1. Allows custom value input only with single selection.
 * 2. Custom values will be auto completed to the closest value if [autoComplete](ui.igcombo#options:autoComplete) is enabled.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets ability to close drop-down list when control loses focus.
 * 
 * /Sets ability to close drop-down list when control loses focus.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the delay duration before processing the changes in the input. Useful to boost performance by lowering the count of selection, filtering, auto complete and highlighting operations executed on each input change.
 * 
 * Sets the delay duration before processing the changes in the input. Useful to boost performance by lowering the count of selection, filtering, auto complete and highlighting operations executed on each input change.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets tabIndex for the field of the combo.
 * 
 * /Sets tabIndex for the field of the combo.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets ability to show the drop-down list when the combo is in focus. This option has effect only if the combo is in editable [mode](ui.igcombo#options:mode).
 * 
 * /Sets ability to show the drop-down list when the combo is in focus. This option has effect only if the combo is in editable [mode](ui.igcombo#options:mode).
 * 
 * 
 * \@optionValue New value to be set.
 * Gets  ability to close drop-down list when single item in the list is selected with mouse click or enter press. The default value when [multiSelection](ui.igcombo#options:multiSelection) is enabled will be false. This option will not close the drop down when [multiSelection](ui.igcombo#options:multiSelection) is enabled and additive selection is performed.
 * 
 * Sets ability to close drop-down list when single item in the list is selected with mouse click or enter press. The default value when [multiSelection](ui.igcombo#options:multiSelection) is enabled will be false. This option will not close the drop down when [multiSelection](ui.igcombo#options:multiSelection) is enabled and additive selection is performed.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets ability to select items by space button press.
 * 
 * /Sets ability to select items by space button press.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets list of items to be selected when the combo is initialized. It should contain array of objects with index or value property, then on initialization the matching items will be selected. If initialSelectedItems are not set, the combo is with single selection and it is in a dropdown, readonly or readonlylist [mode](ui.igcombo#options:mode), the first item will be automatically selected.
 *             Note: Only items loaded on initialization can be selected. When using [load on demand](ui.igCombo#options:loadOnDemandSettings), selecting an item which is not loaded yet will fail.
 * 
 * /Sets list of items to be selected when the combo is initialized. It should contain array of objects with index or value property, then on initialization the matching items will be selected. If initialSelectedItems are not set, the combo is with single selection and it is in a dropdown, readonly or readonlylist [mode](ui.igcombo#options:mode), the first item will be automatically selected.
 *             Note: Only items loaded on initialization can be selected. When using [load on demand](ui.igCombo#options:loadOnDemandSettings), selecting an item which is not loaded yet will fail.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets ability to prevent submitting form on enter key press.
 * 
 * /Sets ability to prevent submitting form on enter key press.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the format string that is used to format the text display values in the combo.
 * Valid options are:
 * "auto" (default) - uses automatic formatting for Date and number objects.
 * "none", "", or null - will disable formatting
 * 
 * Custom values can be something like "currency", "percent", "dateLong", "time", "MMM-dd-yyyy H:mm tt", etc.
 * 
 * Custom format strings should match the data type in "textKey" column.
 * 
 * /Sets the format string that is used to format the text display values in the combo.
 * Valid options are:
 * "auto" (default) - uses automatic formatting for Date and number objects.
 * "none", "", or null - will disable formatting
 * 
 * Custom values can be something like "currency", "percent", "dateLong", "time", "MMM-dd-yyyy H:mm tt", etc.
 * 
 * Custom format strings should match the data type in "textKey" column.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the onscreen keyboard should be shown when the dropdown button is clicked (touch devices only).
 *                 Note: The keyboard will still show when the combo input is focused in editable mode.
 * 
 * /Sets whether the onscreen keyboard should be shown when the dropdown button is clicked (touch devices only).
 *                 Note: The keyboard will still show when the combo input is focused in editable mode.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets whether the clear button should be rendered.
 *             When the [mode](ui.igcombo#options:mode) is single selection, readonly or readonlylist this option will default to false. It can still be enabled when it is specifically set to true.
 * 
 * Sets whether the clear button should be rendered.
 *             When the [mode](ui.igcombo#options:mode) is single selection, readonly or readonlylist this option will default to false. It can still be enabled when it is specifically set to true.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets title for html element which represent the drop-down button. This is an override for the $.ig.Combo.locale.dropDownButtonTitle.
 * 
 * /Sets title for html element which represent the drop-down button. This is an override for the $.ig.Combo.locale.dropDownButtonTitle.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets title for html element which represent clear button (this is an override for the $.ig.Combo.locale.clearButtonTitle).
 * 
 * /Sets title for html element which represent clear button (this is an override for the $.ig.Combo.locale.clearButtonTitle).
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets drop-down list orientation when open button is clicked.
 * 
 * /Sets drop-down list orientation when open button is clicked.
 * 
 * 
 * \@optionValue New value to be set.
 * Event which is raised after rendering of the combo completes.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to the combo performing rendering.
 * Use ui.element to get a reference to the main/top combo element.
 * Event which is raised after rendering of the combo completes.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to the combo performing rendering.
 * Use ui.element to get a reference to the main/top combo element.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before data binding is performed.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to igCombo performing the databinding.
 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is to be databound to.
 * Event which is raised before data binding is performed.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to igCombo performing the databinding.
 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is to be databound to.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after data binding is complete.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igCombo performing the data binding.
 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
 * Use ui.success to see if the databinding was performed correctly.
 * Use ui.errorMessage to get the error message if the databinding failed.
 * Event which is raised after data binding is complete.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igCombo performing the data binding.
 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
 * Use ui.success to see if the databinding was performed correctly.
 * Use ui.errorMessage to get the error message if the databinding failed.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before data filtering.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igCombo.
 * Use ui.expression to obtain reference to array which contains expressions supported by [$.ig.DataSource](ig.datasource).
 * Each expression-item contains following members: fieldName ([textKey](ui.igcombo#options:textKey)), cond ([filteringCondition](ui.igcombo#options:filteringCondition)), expr (value/string to filter).
 * Event which is raised before data filtering.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igCombo.
 * Use ui.expression to obtain reference to array which contains expressions supported by [$.ig.DataSource](ig.datasource).
 * Each expression-item contains following members: fieldName ([textKey](ui.igcombo#options:textKey)), cond ([filteringCondition](ui.igcombo#options:filteringCondition)), expr (value/string to filter).
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after filtering.
 * 
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser. That can be null.
 * Use ui.owner to obtain reference to igCombo.
 * Use ui.elements to obtain a jquery reference to the rendered filtered elements.
 * Event which is raised after filtering.
 * 
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser. That can be null.
 * Use ui.owner to obtain reference to igCombo.
 * Use ui.elements to obtain a jquery reference to the rendered filtered elements.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before rendering of the combo items is performed.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to the combo performing rendering.
 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
 * Event which is raised before rendering of the combo items is performed.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to the combo performing rendering.
 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after rendering of the combo items completes.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to the combo performing rendering.
 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
 * Event which is raised after rendering of the combo items completes.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to the combo performing rendering.
 * Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) combo is databound to.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before drop-down list is opened.
 * 
 * Return false in order to cancel drop-down action.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igCombo.
 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
 * Event which is raised before drop-down list is opened.
 * 
 * Return false in order to cancel drop-down action.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igCombo.
 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after drop-down list was opened.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igCombo.
 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
 * Event which is raised after drop-down list was opened.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igCombo.
 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before drop-down list is closed.
 * 
 * Return false in order to cancel hide action.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igCombo.
 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
 * Event which is raised before drop-down list is closed.
 * 
 * Return false in order to cancel hide action.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igCombo.
 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after drop-down list was closed.
 * 
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser.
 * Use ui.owner to obtain reference to igCombo.
 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
 * Event which is raised after drop-down list was closed.
 * 
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser.
 * Use ui.owner to obtain reference to igCombo.
 * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before selection change.
 * 
 * Return false in order to cancel change.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igCombo.
 * Use ui.currentItems to obtain reference to array of the selected items before the new selection has happened. That can be null.
 * Use ui.items to obtain reference to array of all items that will be selected after the selection finish. That can be null.
 * Event which is raised before selection change.
 * 
 * Return false in order to cancel change.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igCombo.
 * Use ui.currentItems to obtain reference to array of the selected items before the new selection has happened. That can be null.
 * Use ui.items to obtain reference to array of all items that will be selected after the selection finish. That can be null.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after selection change.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igCombo.
 * Use ui.items to obtain reference to array of new selected items. That can be null.
 * Use ui.oldItems to obtain reference to array of old selected items. That can be null.
 * Event which is raised after selection change.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igCombo.
 * Use ui.items to obtain reference to array of new selected items. That can be null.
 * Use ui.oldItems to obtain reference to array of old selected items. That can be null.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgCombo} methodName_or_optionLiteral_or_options
 * @param {...!Object|number|!Function|string|boolean|!IgCombo|?=} value_or_$element_or_index_or_texts_or_event_or_callback_or_options_or_$item_or_$items_or_text_or_destroy_or_optionName_or_methodParams
 * @return {!Object|!Array<?>|boolean|(number|!Object)|(string|!Object)|(string|number)|void|?|string|number|!IgComboLoadOnDemandSettings|!IgComboMultiSelection|!IgComboGrouping|!Array<!IgComboInitialSelectedItem>|!RenderedEvent|!DataBindingEvent|!DataBoundEvent|!FilteringEvent|!FilteredEvent|!ItemsRenderingEvent|!ItemsRenderedEvent|!DropDownOpeningEvent|!DropDownOpenedEvent|!DropDownClosingEvent|!DropDownClosedEvent|!SelectionChangingEvent|!SelectionChangedEvent|!JQuery}
 */
JQuery.prototype.igCombo = function(methodName_or_optionLiteral_or_options, value_or_$element_or_index_or_texts_or_event_or_callback_or_options_or_$item_or_$items_or_text_or_destroy_or_optionName_or_methodParams) {};
/**
 * @record
 * @struct
 */
function StateChangingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function StateChangingEventUIParam() {}
 /** @type {?} */
StateChangingEventUIParam.prototype.owner;
 /** @type {?} */
StateChangingEventUIParam.prototype.button;
 /** @type {?} */
StateChangingEventUIParam.prototype.oldState;
 /** @type {?} */
StateChangingEventUIParam.prototype.oldPinned;
 /** @type {?} */
StateChangingEventUIParam.prototype.action;
/**
 * @record
 * @struct
 */
function StateChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function StateChangedEventUIParam() {}
 /** @type {?} */
StateChangedEventUIParam.prototype.owner;
 /** @type {?} */
StateChangedEventUIParam.prototype.button;
 /** @type {?} */
StateChangedEventUIParam.prototype.oldState;
 /** @type {?} */
StateChangedEventUIParam.prototype.oldPinned;
 /** @type {?} */
StateChangedEventUIParam.prototype.action;
/**
 * @record
 * @struct
 */
function AnimationEndedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function AnimationEndedEventUIParam() {}
 /** @type {?} */
AnimationEndedEventUIParam.prototype.owner;
 /** @type {?} */
AnimationEndedEventUIParam.prototype.action;

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FocusEventUIParam() {}
 /** @type {?} */
FocusEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function BlurEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function BlurEventUIParam() {}
 /** @type {?} */
BlurEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function IgDialog() {}
 /** @type {!Element} */
IgDialog.prototype.mainElement;
 /** @type {string} */
IgDialog.prototype.state;
 /** @type {boolean} */
IgDialog.prototype.pinned;
 /** @type {boolean} */
IgDialog.prototype.closeOnEscape;
 /** @type {boolean} */
IgDialog.prototype.showCloseButton;
 /** @type {boolean} */
IgDialog.prototype.showMaximizeButton;
 /** @type {boolean} */
IgDialog.prototype.showMinimizeButton;
 /** @type {boolean} */
IgDialog.prototype.showPinButton;
 /** @type {boolean} */
IgDialog.prototype.pinOnMinimized;
 /** @type {string} */
IgDialog.prototype.imageClass;
 /** @type {string} */
IgDialog.prototype.headerText;
 /** @type {boolean} */
IgDialog.prototype.showHeader;
 /** @type {boolean} */
IgDialog.prototype.showFooter;
 /** @type {string} */
IgDialog.prototype.footerText;
 /** @type {string} */
IgDialog.prototype.dialogClass;
 /** @type {?} */
IgDialog.prototype.container;
 /** @type {(string|number)} */
IgDialog.prototype.height;
 /** @type {(string|number)} */
IgDialog.prototype.width;
 /** @type {number} */
IgDialog.prototype.minHeight;
 /** @type {number} */
IgDialog.prototype.minWidth;
 /** @type {number} */
IgDialog.prototype.maxHeight;
 /** @type {number} */
IgDialog.prototype.maxWidth;
 /** @type {boolean} */
IgDialog.prototype.draggable;
 /** @type {?} */
IgDialog.prototype.position;
 /** @type {boolean} */
IgDialog.prototype.resizable;
 /** @type {number} */
IgDialog.prototype.tabIndex;
 /** @type {?} */
IgDialog.prototype.openAnimation;
 /** @type {?} */
IgDialog.prototype.closeAnimation;
 /** @type {number} */
IgDialog.prototype.zIndex;
 /** @type {boolean} */
IgDialog.prototype.modal;
 /** @type {boolean} */
IgDialog.prototype.trackFocus;
 /** @type {string} */
IgDialog.prototype.closeButtonTitle;
 /** @type {string} */
IgDialog.prototype.minimizeButtonTitle;
 /** @type {string} */
IgDialog.prototype.maximizeButtonTitle;
 /** @type {string} */
IgDialog.prototype.pinButtonTitle;
 /** @type {string} */
IgDialog.prototype.unpinButtonTitle;
 /** @type {string} */
IgDialog.prototype.restoreButtonTitle;
 /** @type {string} */
IgDialog.prototype.temporaryUrl;
 /** @type {boolean} */
IgDialog.prototype.enableHeaderFocus;
 /** @type {?} */
IgDialog.prototype.enableDblclick;
 /** @type {!StateChangingEvent} */
IgDialog.prototype.stateChanging;
 /** @type {!StateChangedEvent} */
IgDialog.prototype.stateChanged;
 /** @type {!AnimationEndedEvent} */
IgDialog.prototype.animationEnded;
 /** @type {!FocusEvent} */
IgDialog.prototype.focus;
 /** @type {!BlurEvent} */
IgDialog.prototype.blur;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgDialogMethods() {}

/**
 * Destroys the igDialog and moves the target element to its original parent.
 * @return {!Object}
 */
IgDialogMethods.prototype.destroy = function() {};

/**
 * Gets/Sets the state of the editor.
 * Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
 * 
 * @param {string=} state     New state.
 * @return {string}
 */
IgDialogMethods.prototype.state = function(state) {};

/**
 * Gets reference to the dynamically created DIV element which represents the dialog.
 * @return {!Element}
 */
IgDialogMethods.prototype.mainElement = function() {};

/**
 * Closes the dialog if it is opened.
 * Notes:
 * 1. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
 * 2. That method does not change minimized or maximized state of the dialog.
 * It means that method "open" will open the dialog and keep previous minimized or maximized state.
 * 
 * @param {!Object=} e     Browser event: internal use only.
 * @return {!Object}
 */
IgDialogMethods.prototype.close = function(e) {};

/**
 * Opens the dialog if it is closed. Notes:
 * 1. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
 * 2. That method does not change minimized or maximized state of the dialog. It means that if the dialog was in minimized or maximized stated when closed by "close" method, then the dialog will open in minimized or maximized state respectively.
 * @return {!Object}
 */
IgDialogMethods.prototype.open = function() {};

/**
 * Minimizes the dialog if it is not minimized.
 * Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
 * @return {!Object}
 */
IgDialogMethods.prototype.minimize = function() {};

/**
 * Maximizes the dialog if it is not maximized.
 * Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
 * @return {!Object}
 */
IgDialogMethods.prototype.maximize = function() {};

/**
 * Sets the normal state for the dialog if it was maximized or minimized.
 * Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
 * @return {!Object}
 */
IgDialogMethods.prototype.restore = function() {};

/**
 * Pins the dialog if it is not pinned.
 * When the dialog is pinned, then the html element of the dialog is moved to the original container where the target element was located and position:absolute is removed.
 * The pinned dialog does not support modal state, maximized state and it can not be moved.
 * Notes:
 * 1. If the parent element of the original target-element is invisible, then the pinned dialog becomes invisible as well.
 * 2. If the state of the dialog changes, then stateChanging and stateChanged events are raised.
 * @return {!Object}
 */
IgDialogMethods.prototype.pin = function() {};

/**
 * Unpins the dialog if it is pinned.
 * Note: If the state of the dialog changes, then stateChanging and stateChanged events are raised.
 * @return {!Object}
 */
IgDialogMethods.prototype.unpin = function() {};

/**
 * Gets a reference to the top modal dialog.
 * @return {!Object}
 */
IgDialogMethods.prototype.getTopModal = function() {};

/**
 * Checks if the dialog is modal and if it is currently active.
 * @return {boolean}
 */
IgDialogMethods.prototype.isTopModal = function() {};

/**
 * Moves a not modal dialog to the top.
 * 
 * @param {!Object=} e     Original event of browser.
 * @return {!Object}
 */
IgDialogMethods.prototype.moveToTop = function(e) {};

/**
 * Retrieves the igDialog content container or sets its content to be the new content provided.
 * 
 * @param {string=} newContent     The new html content provided as a string. If the parameter is provided then the method acts as a setter.
 * @return {!Object}
 */
IgDialogMethods.prototype.content = function(newContent) {};

/**
 * @param {string} propertyName
 * @return {!IgDialogMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Gets the jquery DIV object which is used as the main container for the dialog.
 * Notes:
 * 1. That object is optional and it should not contain any children.
 * 2. It should not have parent.
 * 3. It should not contain attributes which might destroy layout or appearance of the dialog.
 * 4. Change of that option is not supported.
 * 
 * The jquery DIV object which is used as the main container for the dialog.
 * Notes:
 * 1. That object is optional and it should not contain any children.
 * 2. It should not have parent.
 * 3. It should not contain attributes which might destroy layout or appearance of the dialog.
 * 4. Change of that option is not supported.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the state of the dialog.Note: when the dialog is modal, then pinned and minimized states are not supported, because that will trigger misbehavior.
 * 
 * 
 * /Sets the state of the dialog.Note: when the dialog is modal, then pinned and minimized states are not supported, because that will trigger misbehavior.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the dialog is pinned.
 * When the dialog is pinned, then the html element of the dialog is moved to the original container where the target element was located and position:absolute is removed.
 * The pinned dialog does not support modal state, maximized state and it can not be moved.
 * Notes:
 * 1. If the parent element of the original target-element is invisible, then the pinned dialog becomes invisible as well.
 * 2. Pinned state is not supported for modal dialog.
 * 
 * /Sets whether the dialog is pinned.
 * When the dialog is pinned, then the html element of the dialog is moved to the original container where the target element was located and position:absolute is removed.
 * The pinned dialog does not support modal state, maximized state and it can not be moved.
 * Notes:
 * 1. If the parent element of the original target-element is invisible, then the pinned dialog becomes invisible as well.
 * 2. Pinned state is not supported for modal dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the dialog should close when Esc key is pressed.
 * 
 * /Sets whether the dialog should close when Esc key is pressed.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the close button in the dialog header should be visible.
 * 
 * /Sets whether the close button in the dialog header should be visible.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the maximize button in the dialog header should be visible.
 * 
 * /Sets whether the maximize button in the dialog header should be visible.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the minimize button in the dialog header should be visible.
 * 
 * /Sets whether the minimize button in the dialog header should be visible.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the pin button in the dialog header should be visible.
 * 
 * /Sets whether the pin button in the dialog header should be visible.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the dialog will be pinned on minimize.
 * 
 * /Sets whether the dialog will be pinned on minimize.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the name of the css class which is applied to the SPAN element located on the left side of the header.
 * 
 * The name of the css class which is applied to the SPAN element located on the left side of the header.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the text which appears in the header of the dialog.
 * 
 * /Sets the text which appears in the header of the dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the dialog header should be visible.
 * 
 * /Sets whether the dialog header should be visible.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the dialog footer should be visible.
 * 
 * /Sets whether the dialog footer should be visible.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the text which appears in the footer of the dialog.
 * 
 * /Sets the text which appears in the footer of the dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the name of the css class which is applied to the main DIV element of the dialog.
 * 
 * The name of the css class which is applied to the main DIV element of the dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the container html element for the dialog.
 * That can be reference to html element, jquery selector or jquery object.
 * By default the parent form of the original target element is used. If a form is not found, then the body is used.
 * Note: If the "position" of the container is not set or it is "static", then the position is set to "relative".
 * 
 * /Sets the container html element for the dialog.
 * That can be reference to html element, jquery selector or jquery object.
 * By default the parent form of the original target element is used. If a form is not found, then the body is used.
 * Note: If the "position" of the container is not set or it is "static", then the position is set to "relative".
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the initial height of the dialog in pixels for normal state.Besides numeric values, following units are supported: "px", "em" and "%".
 * In case of "%", the size of browser window is used and it has effect only on open action.
 * 
 * 
 * /Sets the initial height of the dialog in pixels for normal state.Besides numeric values, following units are supported: "px", "em" and "%".
 * In case of "%", the size of browser window is used and it has effect only on open action.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the initial width of the dialog in pixels for normal state.Besides numeric values, following units are supported: "px", "em" and "%".
 * In case of "%", the size of browser window is used and it has effect only on open action.
 * 
 * 
 * /Sets the initial width of the dialog in pixels for normal state.Besides numeric values, following units are supported: "px", "em" and "%".
 * In case of "%", the size of browser window is used and it has effect only on open action.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the minimal height of the dialog in normal state.
 * 
 * /Sets the minimal height of the dialog in normal state.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the minimal width of the dialog in normal state.
 * 
 * /Sets the minimal width of the dialog in normal state.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the maximal height of the dialog in normal state. Note: that option has effect only while resizing the dialog by the end user.
 * 
 * /Sets the maximal height of the dialog in normal state. Note: that option has effect only while resizing the dialog by the end user.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the maximal width of the dialog in normal state. Note: that option has effect only while resizing the dialog by the end user.
 * 
 * /Sets the maximal width of the dialog in normal state. Note: that option has effect only while resizing the dialog by the end user.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the dialog can be dragged by the user.
 * 
 * /Sets whether the dialog can be dragged by the user.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the initial position of the dialog. That should be an object, which contains "top" and "left" members or an object
 * supported by jquery.position(param) method. Examples: { left: 100, top: 200 }, { my: "left top", at: "left top", offset: "100 200" }
 * 
 * /Sets the initial position of the dialog. That should be an object, which contains "top" and "left" members or an object
 * supported by jquery.position(param) method. Examples: { left: 100, top: 200 }, { my: "left top", at: "left top", offset: "100 200" }
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the dialog can be resized by the user.
 * 
 * /Sets whether the dialog can be resized by the user.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the value for the tabIndex attribute applied to the main html element of the dialog.
 * 
 * /Sets the value for the tabIndex attribute applied to the main html element of the dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the animation applied to the dialog when it is opened. That can be any object supported by the jquery show(param) method.
 * 
 * /Sets the animation applied to the dialog when it is opened. That can be any object supported by the jquery show(param) method.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the animation applied to the dialog when it is closed. That can be any object supported by the jquery hide(param) method.
 * 
 * /Sets the animation applied to the dialog when it is closed. That can be any object supported by the jquery hide(param) method.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the value of zIndex applied to the main html element of the dialog. If value is not set, then 1000 is used.
 * 
 * /Sets the value of zIndex applied to the main html element of the dialog. If value is not set, then 1000 is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the modal state of the dialog.
 * If there are more than 1 modal igDialog, then the last opened dialog wins and becomes on the top.
 * Note: the modal functionality is not supported when the dialog is minimized or pinned, because that will trigger misbehavior.
 * 
 * /Sets the modal state of the dialog.
 * If there are more than 1 modal igDialog, then the last opened dialog wins and becomes on the top.
 * Note: the modal functionality is not supported when the dialog is minimized or pinned, because that will trigger misbehavior.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the ability to process focus and blur events of the child elements located in the dialog in order to maintain the focused state.
 * Notes:
 * If that option is enabled, then focus and blur event handlers are added to all the child elements of the dialog.
 * If the dialog is modal or it can be maximized, then it is not recommended to disable that option.
 * If that option is modified after the igDialog was already created, then depending on current state of the dialog, it will be temporary closed-opened or opened-closed.
 * 
 * /Sets the ability to process focus and blur events of the child elements located in the dialog in order to maintain the focused state.
 * Notes:
 * If that option is enabled, then focus and blur event handlers are added to all the child elements of the dialog.
 * If the dialog is modal or it can be maximized, then it is not recommended to disable that option.
 * If that option is modified after the igDialog was already created, then depending on current state of the dialog, it will be temporary closed-opened or opened-closed.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the title/tooltip for the close button in the dialog. That is an override for $.ig.Dialog.locale.closeButtonTitle.
 * 
 * /Sets the title/tooltip for the close button in the dialog. That is an override for $.ig.Dialog.locale.closeButtonTitle.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the title/tooltip for the minimize button in the dialog. That is an override for $.ig.Dialog.locale.minimizeButtonTitle.
 * 
 * /Sets the title/tooltip for the minimize button in the dialog. That is an override for $.ig.Dialog.locale.minimizeButtonTitle.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the title/tooltip for the maximize button in the dialog. That is an override for $.ig.Dialog.locale.maximizeButtonTitle.
 * 
 * /Sets the title/tooltip for the maximize button in the dialog. That is an override for $.ig.Dialog.locale.maximizeButtonTitle.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the title/tooltip for the pin button in the dialog. That is an override for $.ig.Dialog.locale.pinButtonTitle.
 * 
 * /Sets the title/tooltip for the pin button in the dialog. That is an override for $.ig.Dialog.locale.pinButtonTitle.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the title/tooltip for the unpin button in the dialog. That is an override for $.ig.Dialog.locale.unpinButtonTitle.
 * 
 * /Sets the title/tooltip for the unpin button in the dialog. That is an override for $.ig.Dialog.locale.unpinButtonTitle.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the title/tooltip for the restore button in the dialog. That is an override for $.ig.Dialog.locale.restoreButtonTitle.
 * 
 * /Sets the title/tooltip for the restore button in the dialog. That is an override for $.ig.Dialog.locale.restoreButtonTitle.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the temporary value for src, which is used while changing the parent of the base element if it is an instance of IFRAME. That allows getting around possible JavaScript exceptions under IE.
 * 
 * /Sets the temporary value for src, which is used while changing the parent of the base element if it is an instance of IFRAME. That allows getting around possible JavaScript exceptions under IE.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the ability to adjust the state of the header depending on focused and not-focused states. Note: the "trackFocus" option should be enabled.
 * 
 * /Sets the ability to adjust the state of the header depending on focused and not-focused states. Note: the "trackFocus" option should be enabled.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the processing of the double-click on the dialog-header.If this option is not false and dialog was minimized, then its state will be set to normal.
 * If this option is set to "auto" and showMaximizeButton is enabled or if this option is set to true, then the dialog will be maximized when it was in normal state,
 * and dialog-state will be set to normal if it was maximized.
 * 
 * 
 * /Sets the processing of the double-click on the dialog-header.If this option is not false and dialog was minimized, then its state will be set to normal.
 * If this option is set to "auto" and showMaximizeButton is enabled or if this option is set to true, then the dialog will be maximized when it was in normal state,
 * and dialog-state will be set to normal if it was maximized.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Event which is raised before the state of dialog was changed.
 * Return false in order to cancel action.
 * 
 * The function takes arguments "evt" and "ui".
 * Use evt to obtain the browser event. That parameter can be null if the state was modified from the code.
 * Use ui.owner to obtain a reference to the igDialog.
 * Use ui.button to obtain the name of the button, which triggered the event. Note: if the state was modified from the code, then "button" is undefined.
 * Use ui.oldState to obtain the old state of the dialog, which can be one of the following: "opened", "minimized", "maximized", "closed".
 * Use ui.oldPinned to obtain the boolean value of the old pin state of the dialog.
 * Use ui.action to obtain the name of the action. That can be one of the following:
 * "open" - request to open the dialog
 * "close" - request to close the dialog
 * "minimize" - request to minimize the dialog
 * "maximize" - request to maximize the dialog
 * "restore" - request to restore the dialog from minimized or maximized state
 * "pin" - request to pin the dialog
 * "unpin" - request to unpin the dialog
 * Event which is raised before the state of dialog was changed.
 * Return false in order to cancel action.
 * 
 * The function takes arguments "evt" and "ui".
 * Use evt to obtain the browser event. That parameter can be null if the state was modified from the code.
 * Use ui.owner to obtain a reference to the igDialog.
 * Use ui.button to obtain the name of the button, which triggered the event. Note: if the state was modified from the code, then "button" is undefined.
 * Use ui.oldState to obtain the old state of the dialog, which can be one of the following: "opened", "minimized", "maximized", "closed".
 * Use ui.oldPinned to obtain the boolean value of the old pin state of the dialog.
 * Use ui.action to obtain the name of the action. That can be one of the following:
 * "open" - request to open the dialog
 * "close" - request to close the dialog
 * "minimize" - request to minimize the dialog
 * "maximize" - request to maximize the dialog
 * "restore" - request to restore the dialog from minimized or maximized state
 * "pin" - request to pin the dialog
 * "unpin" - request to unpin the dialog
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after the state of the dialog was changed.
 * 
 * The function takes arguments "evt" and "ui".
 * Use evt to obtain the browser event. That parameter can be null if the state was modified from the code.
 * Use ui.owner to obtain a reference to the igDialog.
 * Use ui.button to obtain the name of the button, which triggered the event. Note: if the state was modified from the code, then "button" is undefined.
 * Use ui.oldState to obtain the old state of the dialog, which can be one of the following: "opened", "minimized", "maximized", "closed".
 * Use ui.oldPinned to obtain the boolean value of the old pin state of the dialog.
 * Use ui.action to obtain the name of the action. That can be one of the following:
 * "open" - the dialog was opened. Note: the event is raised before a possible "openAnimation" started.
 * "close" - the dialog was closed. Note: the event is raised before a possible "closeAnimation" started.
 * "minimize" - the dialog was minimized
 * "maximize" - the dialog was maximized
 * "restore" - the dialog was restored from minimized or maximized state
 * "pin" - the dialog was pinned
 * "unpin" - the dialog was unpinned
 * Event which is raised after the state of the dialog was changed.
 * 
 * The function takes arguments "evt" and "ui".
 * Use evt to obtain the browser event. That parameter can be null if the state was modified from the code.
 * Use ui.owner to obtain a reference to the igDialog.
 * Use ui.button to obtain the name of the button, which triggered the event. Note: if the state was modified from the code, then "button" is undefined.
 * Use ui.oldState to obtain the old state of the dialog, which can be one of the following: "opened", "minimized", "maximized", "closed".
 * Use ui.oldPinned to obtain the boolean value of the old pin state of the dialog.
 * Use ui.action to obtain the name of the action. That can be one of the following:
 * "open" - the dialog was opened. Note: the event is raised before a possible "openAnimation" started.
 * "close" - the dialog was closed. Note: the event is raised before a possible "closeAnimation" started.
 * "minimize" - the dialog was minimized
 * "maximize" - the dialog was maximized
 * "restore" - the dialog was restored from minimized or maximized state
 * "pin" - the dialog was pinned
 * "unpin" - the dialog was unpinned
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after the end of the animation when the dialod was closed or opened.
 * 
 * The function takes arguments "evt" and "ui".
 * Use ui.owner to obtain a reference to the igDialog.
 * Use ui.action to obtain the name of the action, which triggered the animation.
 * "open" - the dialog was opened
 * "close" - the dialog was closed
 * Event which is raised after the end of the animation when the dialod was closed or opened.
 * 
 * The function takes arguments "evt" and "ui".
 * Use ui.owner to obtain a reference to the igDialog.
 * Use ui.action to obtain the name of the action, which triggered the animation.
 * "open" - the dialog was opened
 * "close" - the dialog was closed
 * 
 * \@optionValue Define event handler function.
 * Event which is raised when the dialog or its content gets focus.
 * 
 * The function takes arguments "evt" and "ui".
 * Use evt to obtain the browser event.
 * Use ui.owner to obtain a reference to the igDialog.
 * Event which is raised when the dialog or its content gets focus.
 * 
 * The function takes arguments "evt" and "ui".
 * Use evt to obtain the browser event.
 * Use ui.owner to obtain a reference to the igDialog.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised when the dialog or its content loses focus.
 * 
 * The function takes arguments "evt" and "ui".
 * Use evt to obtain the browser event.
 * Use ui.owner to obtain a reference to the igDialog.
 * Event which is raised when the dialog or its content loses focus.
 * 
 * The function takes arguments "evt" and "ui".
 * Use evt to obtain the browser event.
 * Use ui.owner to obtain a reference to the igDialog.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgDialog} methodName_or_optionLiteral_or_options
 * @param {...string|!Object|!IgDialog|?=} state_or_e_or_newContent_or_optionName_or_options_or_methodParams
 * @return {!Object|string|!Element|boolean|void|?|(string|number)|number|!StateChangingEvent|!StateChangedEvent|!AnimationEndedEvent|!FocusEvent|!BlurEvent|!JQuery}
 */
JQuery.prototype.igDialog = function(methodName_or_optionLiteral_or_options, state_or_e_or_newContent_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgDoughnutChartSeries() {}
 /** @type {string} */
IgDoughnutChartSeries.prototype.type;
 /** @type {boolean} */
IgDoughnutChartSeries.prototype.showTooltip;
 /** @type {string} */
IgDoughnutChartSeries.prototype.tooltipTemplate;
 /** @type {?} */
IgDoughnutChartSeries.prototype.itemsSource;
 /** @type {string} */
IgDoughnutChartSeries.prototype.valueMemberPath;
 /** @type {string} */
IgDoughnutChartSeries.prototype.labelMemberPath;
 /** @type {string} */
IgDoughnutChartSeries.prototype.legendLabelMemberPath;
 /** @type {string} */
IgDoughnutChartSeries.prototype.labelsPosition;
 /** @type {string} */
IgDoughnutChartSeries.prototype.leaderLineVisibility;
 /** @type {?} */
IgDoughnutChartSeries.prototype.leaderLineStyle;
 /** @type {string} */
IgDoughnutChartSeries.prototype.leaderLineType;
 /** @type {number} */
IgDoughnutChartSeries.prototype.leaderLineMargin;
 /** @type {number} */
IgDoughnutChartSeries.prototype.othersCategoryThreshold;
 /** @type {string} */
IgDoughnutChartSeries.prototype.othersCategoryType;
 /** @type {string} */
IgDoughnutChartSeries.prototype.othersCategoryText;
 /** @type {?} */
IgDoughnutChartSeries.prototype.legend;
 /** @type {?} */
IgDoughnutChartSeries.prototype.formatLabel;
 /** @type {?} */
IgDoughnutChartSeries.prototype.formatLegendLabel;
 /** @type {number} */
IgDoughnutChartSeries.prototype.labelExtent;
 /** @type {number} */
IgDoughnutChartSeries.prototype.startAngle;
 /** @type {?} */
IgDoughnutChartSeries.prototype.selectedStyle;
 /** @type {?} */
IgDoughnutChartSeries.prototype.brushes;
 /** @type {?} */
IgDoughnutChartSeries.prototype.outlines;
 /** @type {?} */
IgDoughnutChartSeries.prototype.isSurfaceInteractionDisabled;
 /** @type {number} */
IgDoughnutChartSeries.prototype.radiusFactor;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function HoleDimensionsChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function HoleDimensionsChangedEventUIParam() {}
/**
 * @record
 * @struct
 */
function IgDoughnutChart() {}
 /** @type {(string|number)} */
IgDoughnutChart.prototype.width;
 /** @type {(string|number)} */
IgDoughnutChart.prototype.height;
 /** @type {!Array<!IgDoughnutChartSeries>} */
IgDoughnutChart.prototype.series;
 /** @type {boolean} */
IgDoughnutChart.prototype.allowSliceSelection;
 /** @type {?} */
IgDoughnutChart.prototype.isSurfaceInteractionDisabled;
 /** @type {boolean} */
IgDoughnutChart.prototype.allowSliceExplosion;
 /** @type {number} */
IgDoughnutChart.prototype.innerExtent;
 /** @type {?} */
IgDoughnutChart.prototype.selectedStyle;
 /** @type {string} */
IgDoughnutChart.prototype.tooltipTemplate;
 /** @type {number} */
IgDoughnutChart.prototype.maxRecCount;
 /** @type {?} */
IgDoughnutChart.prototype.dataSource;
 /** @type {string} */
IgDoughnutChart.prototype.dataSourceType;
 /** @type {string} */
IgDoughnutChart.prototype.dataSourceUrl;
 /** @type {string} */
IgDoughnutChart.prototype.responseTotalRecCountKey;
 /** @type {string} */
IgDoughnutChart.prototype.responseDataKey;
 /** @type {!TooltipShowingEvent} */
IgDoughnutChart.prototype.tooltipShowing;
 /** @type {!TooltipShownEvent} */
IgDoughnutChart.prototype.tooltipShown;
 /** @type {!TooltipHidingEvent} */
IgDoughnutChart.prototype.tooltipHiding;
 /** @type {!TooltipHiddenEvent} */
IgDoughnutChart.prototype.tooltipHidden;
 /** @type {!BrowserNotSupportedEvent} */
IgDoughnutChart.prototype.browserNotSupported;
 /** @type {!SliceClickEvent} */
IgDoughnutChart.prototype.sliceClick;
 /** @type {!HoleDimensionsChangedEvent} */
IgDoughnutChart.prototype.holeDimensionsChanged;
 /** @type {!DataBindingEvent} */
IgDoughnutChart.prototype.dataBinding;
 /** @type {!DataBoundEvent} */
IgDoughnutChart.prototype.dataBound;
 /** @type {!UpdateTooltipEvent} */
IgDoughnutChart.prototype.updateTooltip;
 /** @type {!HideTooltipEvent} */
IgDoughnutChart.prototype.hideTooltip;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgDoughnutChartMethods() {}

/**
 * Adds a new series to the doughnut chart.
 * 
 * @param {!Object} seriesObj     The series object to be added.
 * @return {void}
 */
IgDoughnutChartMethods.prototype.addSeries = function(seriesObj) {};

/**
 * Removes the specified series from the doughnut chart.
 * 
 * @param {!Object} seriesObj     The series object identifying the series to be removed.
 * @return {void}
 */
IgDoughnutChartMethods.prototype.removeSeries = function(seriesObj) {};

/**
 * Updates the series with the specified name with the specified new property values.
 * 
 * @param {!Object} value     The series object identifying the series to be updated.
 * @return {void}
 */
IgDoughnutChartMethods.prototype.updateSeries = function(value) {};

/**
 * Returns the center of the doughnut chart.
 * @return {!Object}
 */
IgDoughnutChartMethods.prototype.getCenterCoordinates = function() {};

/**
 * Returns the radius of the chart's hole.
 * @return {number}
 */
IgDoughnutChartMethods.prototype.getHoleRadius = function() {};

/**
 * Returns information about how the doughnut chart is rendered.
 * @return {!Object}
 */
IgDoughnutChartMethods.prototype.exportVisualData = function() {};

/**
 * Causes all of the series that have pending changes e.g. by changed property values to be rendered immediately.
 * @return {void}
 */
IgDoughnutChartMethods.prototype.flush = function() {};

/**
 * Destroys the widget.
 * @return {void}
 */
IgDoughnutChartMethods.prototype.destroy = function() {};

/**
 * Find index of item within actual data used by chart.
 * 
 * @param {!Object} item     The reference to item.
 * @return {number}
 */
IgDoughnutChartMethods.prototype.findIndexOfItem = function(item) {};

/**
 * Get item within actual data used by chart. That is similar to this.getData()[ index ].
 * 
 * @param {!Object} index     Index of data item.
 * @return {!Object}
 */
IgDoughnutChartMethods.prototype.getDataItem = function(index) {};

/**
 * Get reference of actual data used by chart.
 * @return {!Array<?>}
 */
IgDoughnutChartMethods.prototype.getData = function() {};

/**
 * Adds a new item to the data source and notifies the chart.
 * 
 * @param {!Object} item     The item that we want to add to the data source.
 * @return {!Object}
 */
IgDoughnutChartMethods.prototype.addItem = function(item) {};

/**
 * Inserts a new item to the data source and notifies the chart.
 * 
 * @param {!Object} item     the new item that we want to insert in the data source.
 * @param {number} index     The index in the data source where the new item will be inserted.
 * @return {!Object}
 */
IgDoughnutChartMethods.prototype.insertItem = function(item, index) {};

/**
 * Deletes an item from the data source and notifies the chart.
 * 
 * @param {number} index     The index in the data source from where the item will be been removed.
 * @return {!Object}
 */
IgDoughnutChartMethods.prototype.removeItem = function(index) {};

/**
 * Updates an item in the data source and notifies the chart.
 * 
 * @param {number} index     The index of the item in the data source that we want to change.
 * @param {!Object} item     The new item object that will be set in the data source.
 * @return {!Object}
 */
IgDoughnutChartMethods.prototype.setItem = function(index, item) {};

/**
 * Notifies the chart that an item has been set in an associated data source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @param {number} index     The index in the items source that has been changed.
 * @param {!Object} newItem     the new item that has been set in the collection.
 * @param {!Object} oldItem     the old item that has been overwritten in the collection.
 * @return {!Object}
 */
IgDoughnutChartMethods.prototype.notifySetItem = function(dataSource, index, newItem, oldItem) {};

/**
 * Notifies the chart that the items have been cleared from an associated data source.
 * It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @return {!Object}
 */
IgDoughnutChartMethods.prototype.notifyClearItems = function(dataSource) {};

/**
 * Notifies the target axis or series that an item has been inserted at the specified index in its data source.
 * It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @param {number} index     The index in the items source where the new item has been inserted.
 * @param {!Object} newItem     the new item that has been set in the collection.
 * @return {!Object}
 */
IgDoughnutChartMethods.prototype.notifyInsertItem = function(dataSource, index, newItem) {};

/**
 * Notifies the target axis or series that an item has been removed from the specified index in its data source.
 * It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @param {number} index     The index in the items source from where the old item has been removed.
 * @param {!Object} oldItem     the old item that has been removed from the collection.
 * @return {!Object}
 */
IgDoughnutChartMethods.prototype.notifyRemoveItem = function(dataSource, index, oldItem) {};

/**
 * Get reference to chart object.
 * @return {!Object}
 */
IgDoughnutChartMethods.prototype.chart = function() {};

/**
 * Binds data to the chart
 * @return {void}
 */
IgDoughnutChartMethods.prototype.dataBind = function() {};

/**
 * @param {string} propertyName
 * @return {!IgDoughnutChartMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
 * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * \@optionValue New value to be set.
 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
 * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * \@optionValue New value to be set.
 * An array of series objects.
 * An array of series objects.
 * 
 * \@optionValue New value to be set.
 * Gets  whether the slices can be selected.
 * Sets whether the slices can be selected.
 * 
 * \@optionValue New value to be set.
 * Gets  whether all surface interactions with the plot area should be disabled.
 * Sets whether all surface interactions with the plot area should be disabled.
 * 
 * \@optionValue New value to be set.
 * Gets  whether the slices can be exploded.
 * Sets whether the slices can be exploded.
 * 
 * \@optionValue New value to be set.
 * Gets  the inner extent of the doughnut chart. It is percent from the outer ring's radius.
 * Sets the inner extent of the doughnut chart. It is percent from the outer ring's radius.
 * 
 * \@optionValue New value to be set.
 * Gets  the style used when a slice is selected.
 * Sets the style used when a slice is selected.
 * 
 * \@optionValue New value to be set.
 * Gets  template for tooltip associated with chart item.
 * Example: "Value: $(ValueMemberPathInDataSource)"
 * Sets template for tooltip associated with chart item.
 * Example: "Value: $(ValueMemberPathInDataSource)"
 * 
 * \@optionValue New value to be set.
 * Gets  maximum number of displayed records in chart.
 * Sets maximum number of displayed records in chart.
 * 
 * \@optionValue New value to be set.
 * Gets  a valid data source.
 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
 * Sets a valid data source.
 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
 * 
 * \@optionValue New value to be set.
 * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
 * 
 * \@optionValue New value to be set.
 * Gets  url which is used for sending JSON on request for remote data.
 * Sets url which is used for sending JSON on request for remote data.
 * 
 * \@optionValue New value to be set.
 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
 * 
 * \@optionValue New value to be set.
 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
 * 
 * \@optionValue New value to be set.
 * Event fired when the mouse has hovered on a series and the tooltip is about to show
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Event fired when the mouse has hovered on a series and the tooltip is about to show
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a tooltip is shown
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Event fired after a tooltip is shown
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * 
 * \@optionValue Define event handler function.
 * Event fired when the mouse has left a series and the tooltip is about to hide
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Event fired when the mouse has left a series and the tooltip is about to hide
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a tooltip is hidden
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Event fired after a tooltip is hidden
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.chart to get reference to chart object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * 
 * \@optionValue Define event handler function.
 * Event fired when the control is displayed on a non HTML5 compliant browser
 * Event fired when the control is displayed on a non HTML5 compliant browser
 * 
 * \@optionValue Define event handler function.
 * Raised when the slice is clicked.
 * Raised when the slice is clicked.
 * 
 * \@optionValue New value to be set.
 * Raised when the dimensions (center point or radius) of the doughnut hole change.
 * Raised when the dimensions (center point or radius) of the doughnut hole change.
 * 
 * \@optionValue New value to be set.
 * Event which is raised before data binding.
 * Return false in order to cancel data binding.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
 * Event which is raised before data binding.
 * Return false in order to cancel data binding.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after data binding.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.data to obtain reference to array actual data which is displayed by chart.
 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
 * Event which is raised after data binding.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.data to obtain reference to array actual data which is displayed by chart.
 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before tooltip is updated.
 * Return false in order to cancel updating and hide tooltip.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
 * Event which is raised before tooltip is updated.
 * Return false in order to cancel updating and hide tooltip.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before tooltip is hidden.
 * Return false in order to cancel hiding and keep tooltip visible.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.item to obtain reference to item.
 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
 * Event which is raised before tooltip is hidden.
 * Return false in order to cancel hiding and keep tooltip visible.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.item to obtain reference to item.
 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgDoughnutChart} methodName_or_optionLiteral_or_options
 * @param {...!Object|number|string|!IgDoughnutChart|?} seriesObj_or_value_or_item_or_index_or_dataSource_or_optionName_or_options_or_methodParams
 * @return {void|!Object|number|!Array<?>|(string|number)|!Array<!IgDoughnutChartSeries>|boolean|?|string|!TooltipShowingEvent|!TooltipShownEvent|!TooltipHidingEvent|!TooltipHiddenEvent|!BrowserNotSupportedEvent|!SliceClickEvent|!HoleDimensionsChangedEvent|!DataBindingEvent|!DataBoundEvent|!UpdateTooltipEvent|!HideTooltipEvent|!JQuery}
 */
JQuery.prototype.igDoughnutChart = function(methodName_or_optionLiteral_or_options, seriesObj_or_value_or_item_or_index_or_dataSource_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function RenderingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RenderingEventUIParam() {}
 /** @type {?} */
RenderingEventUIParam.prototype.owner;
 /** @type {?} */
RenderingEventUIParam.prototype.element;
/**
 * @record
 * @struct
 */
function MousedownEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function MousedownEventUIParam() {}
 /** @type {?} */
MousedownEventUIParam.prototype.owner;
 /** @type {?} */
MousedownEventUIParam.prototype.element;
 /** @type {?} */
MousedownEventUIParam.prototype.editorInput;
/**
 * @record
 * @struct
 */
function MouseupEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function MouseupEventUIParam() {}
 /** @type {?} */
MouseupEventUIParam.prototype.owner;
 /** @type {?} */
MouseupEventUIParam.prototype.element;
 /** @type {?} */
MouseupEventUIParam.prototype.editorInput;
/**
 * @record
 * @struct
 */
function MousemoveEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function MousemoveEventUIParam() {}
 /** @type {?} */
MousemoveEventUIParam.prototype.owner;
 /** @type {?} */
MousemoveEventUIParam.prototype.element;
 /** @type {?} */
MousemoveEventUIParam.prototype.editorInput;
/**
 * @record
 * @struct
 */
function MouseoverEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function MouseoverEventUIParam() {}
 /** @type {?} */
MouseoverEventUIParam.prototype.owner;
 /** @type {?} */
MouseoverEventUIParam.prototype.element;
 /** @type {?} */
MouseoverEventUIParam.prototype.editorInput;
/**
 * @record
 * @struct
 */
function MouseoutEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function MouseoutEventUIParam() {}
 /** @type {?} */
MouseoutEventUIParam.prototype.owner;
 /** @type {?} */
MouseoutEventUIParam.prototype.element;
 /** @type {?} */
MouseoutEventUIParam.prototype.editorInput;
/**
 * @record
 * @struct
 */
function KeydownEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function KeydownEventUIParam() {}
 /** @type {?} */
KeydownEventUIParam.prototype.owner;
 /** @type {?} */
KeydownEventUIParam.prototype.key;
/**
 * @record
 * @struct
 */
function KeypressEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function KeypressEventUIParam() {}
 /** @type {?} */
KeypressEventUIParam.prototype.owner;
 /** @type {?} */
KeypressEventUIParam.prototype.key;
/**
 * @record
 * @struct
 */
function KeyupEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function KeyupEventUIParam() {}
 /** @type {?} */
KeyupEventUIParam.prototype.owner;
 /** @type {?} */
KeyupEventUIParam.prototype.key;
/**
 * @record
 * @struct
 */
function ValueChangingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ValueChangingEventUIParam() {}
 /** @type {?} */
ValueChangingEventUIParam.prototype.owner;
 /** @type {?} */
ValueChangingEventUIParam.prototype.newValue;
 /** @type {?} */
ValueChangingEventUIParam.prototype.oldValue;
 /** @type {?} */
ValueChangingEventUIParam.prototype.editorInput;
/**
 * @record
 * @struct
 */
function ValueChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ValueChangedEventUIParam() {}
 /** @type {?} */
ValueChangedEventUIParam.prototype.owner;
 /** @type {?} */
ValueChangedEventUIParam.prototype.newValue;
 /** @type {?} */
ValueChangedEventUIParam.prototype.originalValue;
 /** @type {?} */
ValueChangedEventUIParam.prototype.editorInput;
/**
 * @record
 * @struct
 */
function IgBaseEditor() {}
 /** @type {(string|number)} */
IgBaseEditor.prototype.width;
 /** @type {(string|number)} */
IgBaseEditor.prototype.height;
 /** @type {?} */
IgBaseEditor.prototype.value;
 /** @type {number} */
IgBaseEditor.prototype.tabIndex;
 /** @type {boolean} */
IgBaseEditor.prototype.allowNullValue;
 /** @type {(string|number)} */
IgBaseEditor.prototype.nullValue;
 /** @type {string} */
IgBaseEditor.prototype.inputName;
 /** @type {boolean} */
IgBaseEditor.prototype.readOnly;
 /** @type {boolean} */
IgBaseEditor.prototype.disabled;
 /** @type {?} */
IgBaseEditor.prototype.validatorOptions;
 /** @type {!RenderingEvent} */
IgBaseEditor.prototype.rendering;
 /** @type {!RenderedEvent} */
IgBaseEditor.prototype.rendered;
 /** @type {!MousedownEvent} */
IgBaseEditor.prototype.mousedown;
 /** @type {!MouseupEvent} */
IgBaseEditor.prototype.mouseup;
 /** @type {!MousemoveEvent} */
IgBaseEditor.prototype.mousemove;
 /** @type {!MouseoverEvent} */
IgBaseEditor.prototype.mouseover;
 /** @type {!MouseoutEvent} */
IgBaseEditor.prototype.mouseout;
 /** @type {!BlurEvent} */
IgBaseEditor.prototype.blur;
 /** @type {!FocusEvent} */
IgBaseEditor.prototype.focus;
 /** @type {!KeydownEvent} */
IgBaseEditor.prototype.keydown;
 /** @type {!KeypressEvent} */
IgBaseEditor.prototype.keypress;
 /** @type {!KeyupEvent} */
IgBaseEditor.prototype.keyup;
 /** @type {!ValueChangingEvent} */
IgBaseEditor.prototype.valueChanging;
 /** @type {!ValueChangedEvent} */
IgBaseEditor.prototype.valueChanged;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgBaseEditorMethods() {}

/**
 * Gets/Sets name attribute applied to the editor element.
 * 
 * @param {string=} newValue     The new input name.
 * @return {string}
 */
IgBaseEditorMethods.prototype.inputName = function(newValue) {};

/**
 * @param {!Object} newValue
 * @return {void}
 */
IgBaseEditorMethods.prototype.value = function(newValue) {};

/**
 * Gets the input element of the editor.
 * @return {string}
 */
IgBaseEditorMethods.prototype.field = function() {};

/**
 * Gets a reference to the jQuery element that wraps the editor.
 * @return {string}
 */
IgBaseEditorMethods.prototype.editorContainer = function() {};

/**
 * Gets whether the editor has focus.
 * @return {boolean}
 */
IgBaseEditorMethods.prototype.hasFocus = function() {};

/**
 * Sets focus to the editor after the specified delay.
 * 
 * @param {number=} delay     The delay before focusing the editor.
 * @return {void}
 */
IgBaseEditorMethods.prototype.setFocus = function(delay) {};

/**
 * Hides the editor.
 * @return {void}
 */
IgBaseEditorMethods.prototype.hide = function() {};

/**
 * Shows the editor.
 * @return {void}
 */
IgBaseEditorMethods.prototype.show = function() {};

/**
 * Gets a reference to [igValidator](ui.igvalidator) used by the editor.
 * @return {!Object}
 */
IgBaseEditorMethods.prototype.validator = function() {};

/**
 * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
 * @return {boolean}
 */
IgBaseEditorMethods.prototype.isValid = function() {};

/**
 * Triggers validation for the editor. If validatorOptions are set will also call validate on the [igValidator](ui.igvalidator).
 * @return {boolean}
 */
IgBaseEditorMethods.prototype.validate = function() {};

/**
 * Destroys the widget
 * @return {void}
 */
IgBaseEditorMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgBaseEditorMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function DropDownListOpeningEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DropDownListOpeningEventUIParam() {}
 /** @type {?} */
DropDownListOpeningEventUIParam.prototype.owner;
 /** @type {?} */
DropDownListOpeningEventUIParam.prototype.editorInput;
 /** @type {?} */
DropDownListOpeningEventUIParam.prototype.list;
/**
 * @record
 * @struct
 */
function DropDownListOpenedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DropDownListOpenedEventUIParam() {}
 /** @type {?} */
DropDownListOpenedEventUIParam.prototype.owner;
 /** @type {?} */
DropDownListOpenedEventUIParam.prototype.editorInput;
 /** @type {?} */
DropDownListOpenedEventUIParam.prototype.list;
/**
 * @record
 * @struct
 */
function DropDownListClosingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DropDownListClosingEventUIParam() {}
 /** @type {?} */
DropDownListClosingEventUIParam.prototype.owner;
 /** @type {?} */
DropDownListClosingEventUIParam.prototype.editorInput;
 /** @type {?} */
DropDownListClosingEventUIParam.prototype.list;
/**
 * @record
 * @struct
 */
function DropDownListClosedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DropDownListClosedEventUIParam() {}
 /** @type {?} */
DropDownListClosedEventUIParam.prototype.owner;
 /** @type {?} */
DropDownListClosedEventUIParam.prototype.editorInput;
 /** @type {?} */
DropDownListClosedEventUIParam.prototype.list;
/**
 * @record
 * @struct
 */
function DropDownItemSelectingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DropDownItemSelectingEventUIParam() {}
 /** @type {?} */
DropDownItemSelectingEventUIParam.prototype.owner;
 /** @type {?} */
DropDownItemSelectingEventUIParam.prototype.editorInput;
 /** @type {?} */
DropDownItemSelectingEventUIParam.prototype.list;
 /** @type {?} */
DropDownItemSelectingEventUIParam.prototype.item;
/**
 * @record
 * @struct
 */
function DropDownItemSelectedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DropDownItemSelectedEventUIParam() {}
 /** @type {?} */
DropDownItemSelectedEventUIParam.prototype.owner;
 /** @type {?} */
DropDownItemSelectedEventUIParam.prototype.editorInput;
 /** @type {?} */
DropDownItemSelectedEventUIParam.prototype.list;
 /** @type {?} */
DropDownItemSelectedEventUIParam.prototype.item;
/**
 * @record
 * @struct
 */
function TextChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function TextChangedEventUIParam() {}
 /** @type {?} */
TextChangedEventUIParam.prototype.owner;
 /** @type {?} */
TextChangedEventUIParam.prototype.text;
 /** @type {?} */
TextChangedEventUIParam.prototype.oldText;
/**
 * @record
 * @struct
 */
function IgTextEditor() {}
 /** @type {string} */
IgTextEditor.prototype.buttonType;
 /** @type {!Array<?>} */
IgTextEditor.prototype.listItems;
 /** @type {number} */
IgTextEditor.prototype.listWidth;
 /** @type {number} */
IgTextEditor.prototype.listItemHoverDuration;
 /** @type {boolean} */
IgTextEditor.prototype.dropDownAttachedToBody;
 /** @type {number} */
IgTextEditor.prototype.dropDownAnimationDuration;
 /** @type {number} */
IgTextEditor.prototype.visibleItemsCount;
 /** @type {string} */
IgTextEditor.prototype.includeKeys;
 /** @type {string} */
IgTextEditor.prototype.excludeKeys;
 /** @type {string} */
IgTextEditor.prototype.textAlign;
 /** @type {string} */
IgTextEditor.prototype.placeHolder;
 /** @type {string} */
IgTextEditor.prototype.selectionOnFocus;
 /** @type {string} */
IgTextEditor.prototype.textMode;
 /** @type {boolean} */
IgTextEditor.prototype.spinWrapAround;
 /** @type {boolean} */
IgTextEditor.prototype.isLimitedToListValues;
 /** @type {boolean} */
IgTextEditor.prototype.revertIfNotValid;
 /** @type {boolean} */
IgTextEditor.prototype.preventSubmitOnEnter;
 /** @type {string} */
IgTextEditor.prototype.dropDownOrientation;
 /** @type {number} */
IgTextEditor.prototype.maxLength;
 /** @type {boolean} */
IgTextEditor.prototype.dropDownOnReadOnly;
 /** @type {boolean} */
IgTextEditor.prototype.toUpper;
 /** @type {boolean} */
IgTextEditor.prototype.toLower;
 /** @type {?} */
IgTextEditor.prototype.locale;
 /** @type {boolean} */
IgTextEditor.prototype.suppressNotifications;
 /** @type {(string|number)} */
IgTextEditor.prototype.width;
 /** @type {(string|number)} */
IgTextEditor.prototype.height;
 /** @type {?} */
IgTextEditor.prototype.value;
 /** @type {number} */
IgTextEditor.prototype.tabIndex;
 /** @type {boolean} */
IgTextEditor.prototype.allowNullValue;
 /** @type {(string|number)} */
IgTextEditor.prototype.nullValue;
 /** @type {string} */
IgTextEditor.prototype.inputName;
 /** @type {boolean} */
IgTextEditor.prototype.readOnly;
 /** @type {boolean} */
IgTextEditor.prototype.disabled;
 /** @type {?} */
IgTextEditor.prototype.validatorOptions;
 /** @type {!DropDownListOpeningEvent} */
IgTextEditor.prototype.dropDownListOpening;
 /** @type {!DropDownListOpenedEvent} */
IgTextEditor.prototype.dropDownListOpened;
 /** @type {!DropDownListClosingEvent} */
IgTextEditor.prototype.dropDownListClosing;
 /** @type {!DropDownListClosedEvent} */
IgTextEditor.prototype.dropDownListClosed;
 /** @type {!DropDownItemSelectingEvent} */
IgTextEditor.prototype.dropDownItemSelecting;
 /** @type {!DropDownItemSelectedEvent} */
IgTextEditor.prototype.dropDownItemSelected;
 /** @type {!TextChangedEvent} */
IgTextEditor.prototype.textChanged;
 /** @type {!RenderingEvent} */
IgTextEditor.prototype.rendering;
 /** @type {!RenderedEvent} */
IgTextEditor.prototype.rendered;
 /** @type {!MousedownEvent} */
IgTextEditor.prototype.mousedown;
 /** @type {!MouseupEvent} */
IgTextEditor.prototype.mouseup;
 /** @type {!MousemoveEvent} */
IgTextEditor.prototype.mousemove;
 /** @type {!MouseoverEvent} */
IgTextEditor.prototype.mouseover;
 /** @type {!MouseoutEvent} */
IgTextEditor.prototype.mouseout;
 /** @type {!BlurEvent} */
IgTextEditor.prototype.blur;
 /** @type {!FocusEvent} */
IgTextEditor.prototype.focus;
 /** @type {!KeydownEvent} */
IgTextEditor.prototype.keydown;
 /** @type {!KeypressEvent} */
IgTextEditor.prototype.keypress;
 /** @type {!KeyupEvent} */
IgTextEditor.prototype.keyup;
 /** @type {!ValueChangingEvent} */
IgTextEditor.prototype.valueChanging;
 /** @type {!ValueChangedEvent} */
IgTextEditor.prototype.valueChanged;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgTextEditorMethods() {}

/**
 * Gets the visible text in the editor.
 * @return {string}
 */
IgTextEditorMethods.prototype.displayValue = function() {};

/**
 * Gets reference to jquery object which is used as container of drop-down list.
 * @return {string}
 */
IgTextEditorMethods.prototype.dropDownContainer = function() {};

/**
 * Shows the drop down list.
 * @return {void}
 */
IgTextEditorMethods.prototype.showDropDown = function() {};

/**
 * Hides the drop down list.
 * @return {void}
 */
IgTextEditorMethods.prototype.hideDropDown = function() {};

/**
 * Returns a reference to the drop-down button UI element of the editor.
 * @return {string}
 */
IgTextEditorMethods.prototype.dropDownButton = function() {};

/**
 * Returns if the drop-down list is visible.
 * @return {boolean}
 */
IgTextEditorMethods.prototype.dropDownVisible = function() {};

/**
 * Returns a reference to the clear button UI element of the editor.
 * @return {string}
 */
IgTextEditorMethods.prototype.clearButton = function() {};

/**
 * Finds index of list item by text that matches with the search parameters.
 * 
 * @param {string} text     The text to search for in the drop down list.
 * @param {!Object=} matchType     The rule that is applied for searching the text.
 * @return {number}
 */
IgTextEditorMethods.prototype.findListItemIndex = function(text, matchType) {};

/**
 * Gets the index of the selected list item. Sets selected item by index.
 * 
 * @param {number=} index     The index of the item that needs to be selected.
 * @return {number}
 */
IgTextEditorMethods.prototype.selectedListIndex = function(index) {};

/**
 * Gets the selected list item.
 * @return {string}
 */
IgTextEditorMethods.prototype.getSelectedListItem = function() {};

/**
 * Gets the selected text from the editor in edit mode. This can be done on key event like keydown or keyup. This method can be used only when the editor is focused. If you call this method in display mode (The editor input is blured) the returned value will be an empty string.
 * @return {string}
 */
IgTextEditorMethods.prototype.getSelectedText = function() {};

/**
 * Gets the start index of the selected text in the editor.
 * @return {number}
 */
IgTextEditorMethods.prototype.getSelectionStart = function() {};

/**
 * Gets the end index of the selected text in the editor.
 * @return {number}
 */
IgTextEditorMethods.prototype.getSelectionEnd = function() {};

/**
 * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.
 * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.
 * 
 * @param {string} string     The string to be inserted.
 * @return {void}
 */
IgTextEditorMethods.prototype.insert = function(string) {};

/**
 * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.
 * 
 * @param {number} start     Start of the selection.
 * @param {number} end     End of the selection.
 * @return {void}
 */
IgTextEditorMethods.prototype.select = function(start, end) {};

/**
 * Hovers the previous item in the drop-down list if the list is opened.
 * @return {void}
 */
IgTextEditorMethods.prototype.spinUp = function() {};

/**
 * Hovers the next item in the drop-down list if the list is opened.
 * @return {void}
 */
IgTextEditorMethods.prototype.spinDown = function() {};

/**
 * Returns a reference to the spin up UI element of the editor.
 * @return {string}
 */
IgTextEditorMethods.prototype.spinUpButton = function() {};

/**
 * Returns a reference to the spin down UI element of the editor.
 * @return {string}
 */
IgTextEditorMethods.prototype.spinDownButton = function() {};

/**
 * Gets/Sets name attribute applied to the editor element.
 * 
 * @param {string=} newValue     The new input name.
 * @return {string}
 */
IgTextEditorMethods.prototype.inputName = function(newValue) {};

/**
 * @param {!Object} newValue
 * @return {void}
 */
IgTextEditorMethods.prototype.value = function(newValue) {};

/**
 * Gets the input element of the editor.
 * @return {string}
 */
IgTextEditorMethods.prototype.field = function() {};

/**
 * Gets a reference to the jQuery element that wraps the editor.
 * @return {string}
 */
IgTextEditorMethods.prototype.editorContainer = function() {};

/**
 * Gets whether the editor has focus.
 * @return {boolean}
 */
IgTextEditorMethods.prototype.hasFocus = function() {};

/**
 * Sets focus to the editor after the specified delay.
 * 
 * @param {number=} delay     The delay before focusing the editor.
 * @return {void}
 */
IgTextEditorMethods.prototype.setFocus = function(delay) {};

/**
 * Hides the editor.
 * @return {void}
 */
IgTextEditorMethods.prototype.hide = function() {};

/**
 * Shows the editor.
 * @return {void}
 */
IgTextEditorMethods.prototype.show = function() {};

/**
 * Gets a reference to [igValidator](ui.igvalidator) used by the editor.
 * @return {!Object}
 */
IgTextEditorMethods.prototype.validator = function() {};

/**
 * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
 * @return {boolean}
 */
IgTextEditorMethods.prototype.isValid = function() {};

/**
 * Triggers validation for the editor. If validatorOptions are set will also call validate on the [igValidator](ui.igvalidator).
 * @return {boolean}
 */
IgTextEditorMethods.prototype.validate = function() {};

/**
 * Destroys the widget
 * @return {void}
 */
IgTextEditorMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgTextEditorMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function IgNumericEditor() {}
 /** @type {!Array<?>} */
IgNumericEditor.prototype.listItems;
 /** @type {?} */
IgNumericEditor.prototype.regional;
 /** @type {string} */
IgNumericEditor.prototype.negativeSign;
 /** @type {string} */
IgNumericEditor.prototype.negativePattern;
 /** @type {string} */
IgNumericEditor.prototype.decimalSeparator;
 /** @type {string} */
IgNumericEditor.prototype.groupSeparator;
 /** @type {!Array<?>} */
IgNumericEditor.prototype.groups;
 /** @type {number} */
IgNumericEditor.prototype.maxDecimals;
 /** @type {number} */
IgNumericEditor.prototype.minDecimals;
 /** @type {string} */
IgNumericEditor.prototype.textAlign;
 /** @type {string} */
IgNumericEditor.prototype.dataMode;
 /** @type {number} */
IgNumericEditor.prototype.minValue;
 /** @type {number} */
IgNumericEditor.prototype.maxValue;
 /** @type {boolean} */
IgNumericEditor.prototype.allowNullValue;
 /** @type {number} */
IgNumericEditor.prototype.spinDelta;
 /** @type {string} */
IgNumericEditor.prototype.scientificFormat;
 /** @type {boolean} */
IgNumericEditor.prototype.spinWrapAround;
 /** @type {?} */
IgNumericEditor.prototype.maxLength;
 /** @type {?} */
IgNumericEditor.prototype.excludeKeys;
 /** @type {?} */
IgNumericEditor.prototype.includeKeys;
 /** @type {?} */
IgNumericEditor.prototype.toLower;
 /** @type {?} */
IgNumericEditor.prototype.toUpper;
 /** @type {?} */
IgNumericEditor.prototype.textMode;
 /** @type {?} */
IgNumericEditor.prototype.value;
 /** @type {string} */
IgNumericEditor.prototype.buttonType;
 /** @type {number} */
IgNumericEditor.prototype.listWidth;
 /** @type {number} */
IgNumericEditor.prototype.listItemHoverDuration;
 /** @type {boolean} */
IgNumericEditor.prototype.dropDownAttachedToBody;
 /** @type {number} */
IgNumericEditor.prototype.dropDownAnimationDuration;
 /** @type {number} */
IgNumericEditor.prototype.visibleItemsCount;
 /** @type {string} */
IgNumericEditor.prototype.placeHolder;
 /** @type {string} */
IgNumericEditor.prototype.selectionOnFocus;
 /** @type {boolean} */
IgNumericEditor.prototype.isLimitedToListValues;
 /** @type {boolean} */
IgNumericEditor.prototype.revertIfNotValid;
 /** @type {boolean} */
IgNumericEditor.prototype.preventSubmitOnEnter;
 /** @type {string} */
IgNumericEditor.prototype.dropDownOrientation;
 /** @type {boolean} */
IgNumericEditor.prototype.dropDownOnReadOnly;
 /** @type {?} */
IgNumericEditor.prototype.locale;
 /** @type {boolean} */
IgNumericEditor.prototype.suppressNotifications;
 /** @type {(string|number)} */
IgNumericEditor.prototype.width;
 /** @type {(string|number)} */
IgNumericEditor.prototype.height;
 /** @type {number} */
IgNumericEditor.prototype.tabIndex;
 /** @type {(string|number)} */
IgNumericEditor.prototype.nullValue;
 /** @type {string} */
IgNumericEditor.prototype.inputName;
 /** @type {boolean} */
IgNumericEditor.prototype.readOnly;
 /** @type {boolean} */
IgNumericEditor.prototype.disabled;
 /** @type {?} */
IgNumericEditor.prototype.validatorOptions;
 /** @type {!DropDownListOpeningEvent} */
IgNumericEditor.prototype.dropDownListOpening;
 /** @type {!DropDownListOpenedEvent} */
IgNumericEditor.prototype.dropDownListOpened;
 /** @type {!DropDownListClosingEvent} */
IgNumericEditor.prototype.dropDownListClosing;
 /** @type {!DropDownListClosedEvent} */
IgNumericEditor.prototype.dropDownListClosed;
 /** @type {!DropDownItemSelectingEvent} */
IgNumericEditor.prototype.dropDownItemSelecting;
 /** @type {!DropDownItemSelectedEvent} */
IgNumericEditor.prototype.dropDownItemSelected;
 /** @type {!TextChangedEvent} */
IgNumericEditor.prototype.textChanged;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgNumericEditorMethods() {}

/**
 * Gets/Sets editor value.
 * 
 * @param {number=} newValue     New editor value.
 * @return {number}
 */
IgNumericEditorMethods.prototype.value = function(newValue) {};

/**
 * Finds index of list item by text that matches with the search parameters.
 * 
 * @param {number} number     The text to search for.
 * @return {number}
 */
IgNumericEditorMethods.prototype.findListItemIndex = function(number) {};

/**
 * @return {void}
 */
IgNumericEditorMethods.prototype.getSelectedText = function() {};

/**
 * @return {void}
 */
IgNumericEditorMethods.prototype.getSelectionStart = function() {};

/**
 * @return {void}
 */
IgNumericEditorMethods.prototype.getSelectionEnd = function() {};

/**
 * Increments value in editor according to the parameter.
 * 
 * @param {number=} delta     Increments value.
 * @return {void}
 */
IgNumericEditorMethods.prototype.spinUp = function(delta) {};

/**
 * Decrements value in editor according to the parameter.
 * 
 * @param {number=} delta     Decrement value.
 * @return {void}
 */
IgNumericEditorMethods.prototype.spinDown = function(delta) {};

/**
 * Moves the hovered index to the item that appears above the current one in the list.
 * @return {void}
 */
IgNumericEditorMethods.prototype.selectListIndexUp = function() {};

/**
 * Moves the hovered index to the item that appears above the current one in the list.
 * @return {void}
 */
IgNumericEditorMethods.prototype.selectListIndexDown = function() {};

/**
 * Gets current regional.
 * @return {string}
 */
IgNumericEditorMethods.prototype.getRegionalOption = function() {};

/**
 * Gets the visible text in the editor.
 * @return {string}
 */
IgNumericEditorMethods.prototype.displayValue = function() {};

/**
 * Gets reference to jquery object which is used as container of drop-down list.
 * @return {string}
 */
IgNumericEditorMethods.prototype.dropDownContainer = function() {};

/**
 * Shows the drop down list.
 * @return {void}
 */
IgNumericEditorMethods.prototype.showDropDown = function() {};

/**
 * Hides the drop down list.
 * @return {void}
 */
IgNumericEditorMethods.prototype.hideDropDown = function() {};

/**
 * Returns a reference to the drop-down button UI element of the editor.
 * @return {string}
 */
IgNumericEditorMethods.prototype.dropDownButton = function() {};

/**
 * Returns if the drop-down list is visible.
 * @return {boolean}
 */
IgNumericEditorMethods.prototype.dropDownVisible = function() {};

/**
 * Returns a reference to the clear button UI element of the editor.
 * @return {string}
 */
IgNumericEditorMethods.prototype.clearButton = function() {};

/**
 * Gets the index of the selected list item. Sets selected item by index.
 * 
 * @param {number=} index     The index of the item that needs to be selected.
 * @return {number}
 */
IgNumericEditorMethods.prototype.selectedListIndex = function(index) {};

/**
 * Gets the selected list item.
 * @return {string}
 */
IgNumericEditorMethods.prototype.getSelectedListItem = function() {};

/**
 * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.
 * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.
 * 
 * @param {string} string     The string to be inserted.
 * @return {void}
 */
IgNumericEditorMethods.prototype.insert = function(string) {};

/**
 * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.
 * 
 * @param {number} start     Start of the selection.
 * @param {number} end     End of the selection.
 * @return {void}
 */
IgNumericEditorMethods.prototype.select = function(start, end) {};

/**
 * Returns a reference to the spin up UI element of the editor.
 * @return {string}
 */
IgNumericEditorMethods.prototype.spinUpButton = function() {};

/**
 * Returns a reference to the spin down UI element of the editor.
 * @return {string}
 */
IgNumericEditorMethods.prototype.spinDownButton = function() {};

/**
 * @param {string} propertyName
 * @return {!IgNumericEditorMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function IgCurrencyEditor() {}
 /** @type {string} */
IgCurrencyEditor.prototype.positivePattern;
 /** @type {string} */
IgCurrencyEditor.prototype.currencySymbol;
 /** @type {!Array<?>} */
IgCurrencyEditor.prototype.listItems;
 /** @type {?} */
IgCurrencyEditor.prototype.regional;
 /** @type {string} */
IgCurrencyEditor.prototype.negativeSign;
 /** @type {string} */
IgCurrencyEditor.prototype.negativePattern;
 /** @type {string} */
IgCurrencyEditor.prototype.decimalSeparator;
 /** @type {string} */
IgCurrencyEditor.prototype.groupSeparator;
 /** @type {!Array<?>} */
IgCurrencyEditor.prototype.groups;
 /** @type {number} */
IgCurrencyEditor.prototype.maxDecimals;
 /** @type {number} */
IgCurrencyEditor.prototype.minDecimals;
 /** @type {string} */
IgCurrencyEditor.prototype.textAlign;
 /** @type {string} */
IgCurrencyEditor.prototype.dataMode;
 /** @type {number} */
IgCurrencyEditor.prototype.minValue;
 /** @type {number} */
IgCurrencyEditor.prototype.maxValue;
 /** @type {boolean} */
IgCurrencyEditor.prototype.allowNullValue;
 /** @type {number} */
IgCurrencyEditor.prototype.spinDelta;
 /** @type {string} */
IgCurrencyEditor.prototype.scientificFormat;
 /** @type {boolean} */
IgCurrencyEditor.prototype.spinWrapAround;
 /** @type {?} */
IgCurrencyEditor.prototype.maxLength;
 /** @type {?} */
IgCurrencyEditor.prototype.excludeKeys;
 /** @type {?} */
IgCurrencyEditor.prototype.includeKeys;
 /** @type {?} */
IgCurrencyEditor.prototype.toLower;
 /** @type {?} */
IgCurrencyEditor.prototype.toUpper;
 /** @type {?} */
IgCurrencyEditor.prototype.textMode;
 /** @type {?} */
IgCurrencyEditor.prototype.value;
 /** @type {string} */
IgCurrencyEditor.prototype.buttonType;
 /** @type {number} */
IgCurrencyEditor.prototype.listWidth;
 /** @type {number} */
IgCurrencyEditor.prototype.listItemHoverDuration;
 /** @type {boolean} */
IgCurrencyEditor.prototype.dropDownAttachedToBody;
 /** @type {number} */
IgCurrencyEditor.prototype.dropDownAnimationDuration;
 /** @type {number} */
IgCurrencyEditor.prototype.visibleItemsCount;
 /** @type {string} */
IgCurrencyEditor.prototype.placeHolder;
 /** @type {string} */
IgCurrencyEditor.prototype.selectionOnFocus;
 /** @type {boolean} */
IgCurrencyEditor.prototype.isLimitedToListValues;
 /** @type {boolean} */
IgCurrencyEditor.prototype.revertIfNotValid;
 /** @type {boolean} */
IgCurrencyEditor.prototype.preventSubmitOnEnter;
 /** @type {string} */
IgCurrencyEditor.prototype.dropDownOrientation;
 /** @type {boolean} */
IgCurrencyEditor.prototype.dropDownOnReadOnly;
 /** @type {?} */
IgCurrencyEditor.prototype.locale;
 /** @type {boolean} */
IgCurrencyEditor.prototype.suppressNotifications;
 /** @type {(string|number)} */
IgCurrencyEditor.prototype.width;
 /** @type {(string|number)} */
IgCurrencyEditor.prototype.height;
 /** @type {number} */
IgCurrencyEditor.prototype.tabIndex;
 /** @type {(string|number)} */
IgCurrencyEditor.prototype.nullValue;
 /** @type {string} */
IgCurrencyEditor.prototype.inputName;
 /** @type {boolean} */
IgCurrencyEditor.prototype.readOnly;
 /** @type {boolean} */
IgCurrencyEditor.prototype.disabled;
 /** @type {?} */
IgCurrencyEditor.prototype.validatorOptions;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgCurrencyEditorMethods() {}

/**
 * Gets/sets a string that is used as the currency symbol shown with the number in the input. The value provided as a param is propagated to the currencySymbol option and thus has the same priority as the option.
 * 
 * @param {!Object=} symbol     New currency symbol.
 * @return {string}
 */
IgCurrencyEditorMethods.prototype.currencySymbol = function(symbol) {};

/**
 * Gets/Sets editor value.
 * 
 * @param {number=} newValue     New editor value.
 * @return {number}
 */
IgCurrencyEditorMethods.prototype.value = function(newValue) {};

/**
 * Finds index of list item by text that matches with the search parameters.
 * 
 * @param {number} number     The text to search for.
 * @return {number}
 */
IgCurrencyEditorMethods.prototype.findListItemIndex = function(number) {};

/**
 * @return {void}
 */
IgCurrencyEditorMethods.prototype.getSelectedText = function() {};

/**
 * @return {void}
 */
IgCurrencyEditorMethods.prototype.getSelectionStart = function() {};

/**
 * @return {void}
 */
IgCurrencyEditorMethods.prototype.getSelectionEnd = function() {};

/**
 * Increments value in editor according to the parameter.
 * 
 * @param {number=} delta     Increments value.
 * @return {void}
 */
IgCurrencyEditorMethods.prototype.spinUp = function(delta) {};

/**
 * Decrements value in editor according to the parameter.
 * 
 * @param {number=} delta     Decrement value.
 * @return {void}
 */
IgCurrencyEditorMethods.prototype.spinDown = function(delta) {};

/**
 * Moves the hovered index to the item that appears above the current one in the list.
 * @return {void}
 */
IgCurrencyEditorMethods.prototype.selectListIndexUp = function() {};

/**
 * Moves the hovered index to the item that appears above the current one in the list.
 * @return {void}
 */
IgCurrencyEditorMethods.prototype.selectListIndexDown = function() {};

/**
 * Gets current regional.
 * @return {string}
 */
IgCurrencyEditorMethods.prototype.getRegionalOption = function() {};

/**
 * @param {string} propertyName
 * @return {!IgCurrencyEditorMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function IgPercentEditor() {}
 /** @type {string} */
IgPercentEditor.prototype.positivePattern;
 /** @type {string} */
IgPercentEditor.prototype.percentSymbol;
 /** @type {number} */
IgPercentEditor.prototype.displayFactor;
 /** @type {string} */
IgPercentEditor.prototype.dataMode;
 /** @type {number} */
IgPercentEditor.prototype.spinDelta;
 /** @type {!Array<?>} */
IgPercentEditor.prototype.listItems;
 /** @type {?} */
IgPercentEditor.prototype.regional;
 /** @type {string} */
IgPercentEditor.prototype.negativeSign;
 /** @type {string} */
IgPercentEditor.prototype.negativePattern;
 /** @type {string} */
IgPercentEditor.prototype.decimalSeparator;
 /** @type {string} */
IgPercentEditor.prototype.groupSeparator;
 /** @type {!Array<?>} */
IgPercentEditor.prototype.groups;
 /** @type {number} */
IgPercentEditor.prototype.maxDecimals;
 /** @type {number} */
IgPercentEditor.prototype.minDecimals;
 /** @type {string} */
IgPercentEditor.prototype.textAlign;
 /** @type {number} */
IgPercentEditor.prototype.minValue;
 /** @type {number} */
IgPercentEditor.prototype.maxValue;
 /** @type {boolean} */
IgPercentEditor.prototype.allowNullValue;
 /** @type {string} */
IgPercentEditor.prototype.scientificFormat;
 /** @type {boolean} */
IgPercentEditor.prototype.spinWrapAround;
 /** @type {?} */
IgPercentEditor.prototype.maxLength;
 /** @type {?} */
IgPercentEditor.prototype.excludeKeys;
 /** @type {?} */
IgPercentEditor.prototype.includeKeys;
 /** @type {?} */
IgPercentEditor.prototype.toLower;
 /** @type {?} */
IgPercentEditor.prototype.toUpper;
 /** @type {?} */
IgPercentEditor.prototype.textMode;
 /** @type {?} */
IgPercentEditor.prototype.value;
 /** @type {string} */
IgPercentEditor.prototype.buttonType;
 /** @type {number} */
IgPercentEditor.prototype.listWidth;
 /** @type {number} */
IgPercentEditor.prototype.listItemHoverDuration;
 /** @type {boolean} */
IgPercentEditor.prototype.dropDownAttachedToBody;
 /** @type {number} */
IgPercentEditor.prototype.dropDownAnimationDuration;
 /** @type {number} */
IgPercentEditor.prototype.visibleItemsCount;
 /** @type {string} */
IgPercentEditor.prototype.placeHolder;
 /** @type {string} */
IgPercentEditor.prototype.selectionOnFocus;
 /** @type {boolean} */
IgPercentEditor.prototype.isLimitedToListValues;
 /** @type {boolean} */
IgPercentEditor.prototype.revertIfNotValid;
 /** @type {boolean} */
IgPercentEditor.prototype.preventSubmitOnEnter;
 /** @type {string} */
IgPercentEditor.prototype.dropDownOrientation;
 /** @type {boolean} */
IgPercentEditor.prototype.dropDownOnReadOnly;
 /** @type {?} */
IgPercentEditor.prototype.locale;
 /** @type {boolean} */
IgPercentEditor.prototype.suppressNotifications;
 /** @type {(string|number)} */
IgPercentEditor.prototype.width;
 /** @type {(string|number)} */
IgPercentEditor.prototype.height;
 /** @type {number} */
IgPercentEditor.prototype.tabIndex;
 /** @type {(string|number)} */
IgPercentEditor.prototype.nullValue;
 /** @type {string} */
IgPercentEditor.prototype.inputName;
 /** @type {boolean} */
IgPercentEditor.prototype.readOnly;
 /** @type {boolean} */
IgPercentEditor.prototype.disabled;
 /** @type {?} */
IgPercentEditor.prototype.validatorOptions;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPercentEditorMethods() {}

/**
 * Paste text at location of the caret or over the current selection. Best used during editing, as the method will instead set the text as value (modified by the [displayFactor](ui.igpercenteditor#options:displayFactor)) if the editor is not focused.
 * Note: the method raises the [textChanged](ui.igpercenteditor#events:textChanged) event.
 * 
 * @param {string} string     The string to be inserted.
 * @return {void}
 */
IgPercentEditorMethods.prototype.insert = function(string) {};

/**
 * Gets/Sets a string that is used as the percent symbol shown with the number in the input. The value provided as a param is propagated to the [percentSymbol](ui.igpercenteditor#options:percentSymbol) option and thus has the same priority as the option.
 * 
 * @param {!Object=} symbol     New percent symbol.
 * @return {string}
 */
IgPercentEditorMethods.prototype.percentSymbol = function(symbol) {};

/**
 * Gets/Sets editor value.
 * 
 * @param {number=} newValue     New editor value.
 * @return {number}
 */
IgPercentEditorMethods.prototype.value = function(newValue) {};

/**
 * Finds index of list item by text that matches with the search parameters.
 * 
 * @param {number} number     The text to search for.
 * @return {number}
 */
IgPercentEditorMethods.prototype.findListItemIndex = function(number) {};

/**
 * @return {void}
 */
IgPercentEditorMethods.prototype.getSelectedText = function() {};

/**
 * @return {void}
 */
IgPercentEditorMethods.prototype.getSelectionStart = function() {};

/**
 * @return {void}
 */
IgPercentEditorMethods.prototype.getSelectionEnd = function() {};

/**
 * Increments value in editor according to the parameter.
 * 
 * @param {number=} delta     Increments value.
 * @return {void}
 */
IgPercentEditorMethods.prototype.spinUp = function(delta) {};

/**
 * Decrements value in editor according to the parameter.
 * 
 * @param {number=} delta     Decrement value.
 * @return {void}
 */
IgPercentEditorMethods.prototype.spinDown = function(delta) {};

/**
 * Moves the hovered index to the item that appears above the current one in the list.
 * @return {void}
 */
IgPercentEditorMethods.prototype.selectListIndexUp = function() {};

/**
 * Moves the hovered index to the item that appears above the current one in the list.
 * @return {void}
 */
IgPercentEditorMethods.prototype.selectListIndexDown = function() {};

/**
 * Gets current regional.
 * @return {string}
 */
IgPercentEditorMethods.prototype.getRegionalOption = function() {};

/**
 * @param {string} propertyName
 * @return {!IgPercentEditorMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function IgMaskEditor() {}
 /** @type {?} */
IgMaskEditor.prototype.regional;
 /** @type {string} */
IgMaskEditor.prototype.buttonType;
 /** @type {string} */
IgMaskEditor.prototype.inputMask;
 /** @type {string} */
IgMaskEditor.prototype.dataMode;
 /** @type {string} */
IgMaskEditor.prototype.unfilledCharsPrompt;
 /** @type {string} */
IgMaskEditor.prototype.padChar;
 /** @type {string} */
IgMaskEditor.prototype.emptyChar;
 /** @type {string} */
IgMaskEditor.prototype.includeKeys;
 /** @type {string} */
IgMaskEditor.prototype.excludeKeys;
 /** @type {boolean} */
IgMaskEditor.prototype.spinWrapAround;
 /** @type {!Array<?>} */
IgMaskEditor.prototype.listItems;
 /** @type {number} */
IgMaskEditor.prototype.listWidth;
 /** @type {number} */
IgMaskEditor.prototype.listItemHoverDuration;
 /** @type {boolean} */
IgMaskEditor.prototype.isLimitedToListValues;
 /** @type {string} */
IgMaskEditor.prototype.dropDownOrientation;
 /** @type {boolean} */
IgMaskEditor.prototype.dropDownAttachedToBody;
 /** @type {number} */
IgMaskEditor.prototype.dropDownAnimationDuration;
 /** @type {boolean} */
IgMaskEditor.prototype.dropDownOnReadOnly;
 /** @type {?} */
IgMaskEditor.prototype.textMode;
 /** @type {number} */
IgMaskEditor.prototype.visibleItemsCount;
 /** @type {?} */
IgMaskEditor.prototype.maxLength;
 /** @type {?} */
IgMaskEditor.prototype.value;
 /** @type {string} */
IgMaskEditor.prototype.textAlign;
 /** @type {string} */
IgMaskEditor.prototype.placeHolder;
 /** @type {string} */
IgMaskEditor.prototype.selectionOnFocus;
 /** @type {boolean} */
IgMaskEditor.prototype.revertIfNotValid;
 /** @type {boolean} */
IgMaskEditor.prototype.preventSubmitOnEnter;
 /** @type {boolean} */
IgMaskEditor.prototype.toUpper;
 /** @type {boolean} */
IgMaskEditor.prototype.toLower;
 /** @type {?} */
IgMaskEditor.prototype.locale;
 /** @type {boolean} */
IgMaskEditor.prototype.suppressNotifications;
 /** @type {(string|number)} */
IgMaskEditor.prototype.width;
 /** @type {(string|number)} */
IgMaskEditor.prototype.height;
 /** @type {number} */
IgMaskEditor.prototype.tabIndex;
 /** @type {boolean} */
IgMaskEditor.prototype.allowNullValue;
 /** @type {(string|number)} */
IgMaskEditor.prototype.nullValue;
 /** @type {string} */
IgMaskEditor.prototype.inputName;
 /** @type {boolean} */
IgMaskEditor.prototype.readOnly;
 /** @type {boolean} */
IgMaskEditor.prototype.disabled;
 /** @type {?} */
IgMaskEditor.prototype.validatorOptions;
 /** @type {!DropDownListOpeningEvent} */
IgMaskEditor.prototype.dropDownListOpening;
 /** @type {!DropDownListOpenedEvent} */
IgMaskEditor.prototype.dropDownListOpened;
 /** @type {!DropDownListClosingEvent} */
IgMaskEditor.prototype.dropDownListClosing;
 /** @type {!DropDownListClosedEvent} */
IgMaskEditor.prototype.dropDownListClosed;
 /** @type {!DropDownItemSelectingEvent} */
IgMaskEditor.prototype.dropDownItemSelecting;
 /** @type {!DropDownItemSelectedEvent} */
IgMaskEditor.prototype.dropDownItemSelected;
 /** @type {!TextChangedEvent} */
IgMaskEditor.prototype.textChanged;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgMaskEditorMethods() {}

/**
 * Gets/Sets mask editor value.
 * 
 * @param {string=} newValue     New mask editor value.
 * @return {string}
 */
IgMaskEditorMethods.prototype.value = function(newValue) {};

/**
 * @return {void}
 */
IgMaskEditorMethods.prototype.dropDownContainer = function() {};

/**
 * @return {void}
 */
IgMaskEditorMethods.prototype.showDropDown = function() {};

/**
 * @return {void}
 */
IgMaskEditorMethods.prototype.hideDropDown = function() {};

/**
 * @return {void}
 */
IgMaskEditorMethods.prototype.dropDownButton = function() {};

/**
 * @return {void}
 */
IgMaskEditorMethods.prototype.spinUpButton = function() {};

/**
 * @return {void}
 */
IgMaskEditorMethods.prototype.spinDownButton = function() {};

/**
 * @return {void}
 */
IgMaskEditorMethods.prototype.dropDownVisible = function() {};

/**
 * @return {void}
 */
IgMaskEditorMethods.prototype.findListItemIndex = function() {};

/**
 * @return {void}
 */
IgMaskEditorMethods.prototype.selectedListIndex = function() {};

/**
 * @return {void}
 */
IgMaskEditorMethods.prototype.getSelectedListItem = function() {};

/**
 * @return {void}
 */
IgMaskEditorMethods.prototype.spinUp = function() {};

/**
 * @return {void}
 */
IgMaskEditorMethods.prototype.spinDown = function() {};

/**
 * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
 * @return {boolean}
 */
IgMaskEditorMethods.prototype.isValid = function() {};

/**
 * Gets the visible text in the editor.
 * @return {string}
 */
IgMaskEditorMethods.prototype.displayValue = function() {};

/**
 * Returns a reference to the clear button UI element of the editor.
 * @return {string}
 */
IgMaskEditorMethods.prototype.clearButton = function() {};

/**
 * Gets the selected text from the editor in edit mode. This can be done on key event like keydown or keyup. This method can be used only when the editor is focused. If you call this method in display mode (The editor input is blured) the returned value will be an empty string.
 * @return {string}
 */
IgMaskEditorMethods.prototype.getSelectedText = function() {};

/**
 * Gets the start index of the selected text in the editor.
 * @return {number}
 */
IgMaskEditorMethods.prototype.getSelectionStart = function() {};

/**
 * Gets the end index of the selected text in the editor.
 * @return {number}
 */
IgMaskEditorMethods.prototype.getSelectionEnd = function() {};

/**
 * Inserts the text at the location of the caret or over the current selection. If the editor is focused the method will insert the text over the current selection. If the editor is not focused the method will set the text as value of the editor.
 * Note: The method raises [textChanged](ui.igtexteditor#events:textChanged) event.
 * 
 * @param {string} string     The string to be inserted.
 * @return {void}
 */
IgMaskEditorMethods.prototype.insert = function(string) {};

/**
 * Selects the text between start and end indices in the editor. If the parameters are equal, then the method sets location of caret. The method has effect only when the editor has focus.
 * 
 * @param {number} start     Start of the selection.
 * @param {number} end     End of the selection.
 * @return {void}
 */
IgMaskEditorMethods.prototype.select = function(start, end) {};

/**
 * @param {string} propertyName
 * @return {!IgMaskEditorMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function IgDateEditor() {}
 /** @type {!Object} */
IgDateEditor.prototype.value;
 /** @type {!Object} */
IgDateEditor.prototype.minValue;
 /** @type {!Object} */
IgDateEditor.prototype.maxValue;
 /** @type {string} */
IgDateEditor.prototype.dateDisplayFormat;
 /** @type {string} */
IgDateEditor.prototype.dateInputFormat;
 /** @type {string} */
IgDateEditor.prototype.dataMode;
 /** @type {string} */
IgDateEditor.prototype.buttonType;
 /** @type {number} */
IgDateEditor.prototype.spinDelta;
 /** @type {boolean} */
IgDateEditor.prototype.limitSpinToCurrentField;
 /** @type {boolean} */
IgDateEditor.prototype.enableUTCDates;
 /** @type {number} */
IgDateEditor.prototype.centuryThreshold;
 /** @type {number} */
IgDateEditor.prototype.yearShift;
 /** @type {(string|number)} */
IgDateEditor.prototype.nullValue;
 /** @type {boolean} */
IgDateEditor.prototype.isLimitedToListValues;
 /** @type {number} */
IgDateEditor.prototype.listItemHoverDuration;
 /** @type {?} */
IgDateEditor.prototype.listItems;
 /** @type {number} */
IgDateEditor.prototype.listWidth;
 /** @type {number} */
IgDateEditor.prototype.dropDownAnimationDuration;
 /** @type {boolean} */
IgDateEditor.prototype.dropDownAttachedToBody;
 /** @type {boolean} */
IgDateEditor.prototype.dropDownOnReadOnly;
 /** @type {string} */
IgDateEditor.prototype.inputMask;
 /** @type {string} */
IgDateEditor.prototype.unfilledCharsPrompt;
 /** @type {string} */
IgDateEditor.prototype.padChar;
 /** @type {string} */
IgDateEditor.prototype.emptyChar;
 /** @type {boolean} */
IgDateEditor.prototype.toUpper;
 /** @type {boolean} */
IgDateEditor.prototype.toLower;
 /** @type {?} */
IgDateEditor.prototype.regional;
 /** @type {string} */
IgDateEditor.prototype.includeKeys;
 /** @type {string} */
IgDateEditor.prototype.excludeKeys;
 /** @type {boolean} */
IgDateEditor.prototype.spinWrapAround;
 /** @type {string} */
IgDateEditor.prototype.dropDownOrientation;
 /** @type {?} */
IgDateEditor.prototype.textMode;
 /** @type {number} */
IgDateEditor.prototype.visibleItemsCount;
 /** @type {?} */
IgDateEditor.prototype.maxLength;
 /** @type {string} */
IgDateEditor.prototype.textAlign;
 /** @type {string} */
IgDateEditor.prototype.placeHolder;
 /** @type {string} */
IgDateEditor.prototype.selectionOnFocus;
 /** @type {boolean} */
IgDateEditor.prototype.revertIfNotValid;
 /** @type {boolean} */
IgDateEditor.prototype.preventSubmitOnEnter;
 /** @type {?} */
IgDateEditor.prototype.locale;
 /** @type {boolean} */
IgDateEditor.prototype.suppressNotifications;
 /** @type {(string|number)} */
IgDateEditor.prototype.width;
 /** @type {(string|number)} */
IgDateEditor.prototype.height;
 /** @type {number} */
IgDateEditor.prototype.tabIndex;
 /** @type {boolean} */
IgDateEditor.prototype.allowNullValue;
 /** @type {string} */
IgDateEditor.prototype.inputName;
 /** @type {boolean} */
IgDateEditor.prototype.readOnly;
 /** @type {boolean} */
IgDateEditor.prototype.disabled;
 /** @type {?} */
IgDateEditor.prototype.validatorOptions;
 /** @type {!DropDownListOpeningEvent} */
IgDateEditor.prototype.dropDownListOpening;
 /** @type {!DropDownListOpenedEvent} */
IgDateEditor.prototype.dropDownListOpened;
 /** @type {!DropDownListClosingEvent} */
IgDateEditor.prototype.dropDownListClosing;
 /** @type {!DropDownListClosedEvent} */
IgDateEditor.prototype.dropDownListClosed;
 /** @type {!DropDownItemSelectingEvent} */
IgDateEditor.prototype.dropDownItemSelecting;
 /** @type {!DropDownItemSelectedEvent} */
IgDateEditor.prototype.dropDownItemSelected;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgDateEditorMethods() {}

/**
 * Gets/Sets editor value.
 * 
 * Note! This option doesn't use the displayInputFormat to extract the date
 * 
 * @param {!Object=} newValue     New editor value. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
 * @return {!Object}
 */
IgDateEditorMethods.prototype.value = function(newValue) {};

/**
 * Gets selected date.
 * @return {!Object}
 */
IgDateEditorMethods.prototype.getSelectedDate = function() {};

/**
 * Sets selected date.
 * 
 * @param {!Object} date
 * @return {void}
 */
IgDateEditorMethods.prototype.selectDate = function(date) {};

/**
 * Increases the date or time period, depending on the current cursor position.
 * 
 * @param {number=} delta     The increase delta.
 * @return {void}
 */
IgDateEditorMethods.prototype.spinUp = function(delta) {};

/**
 * Decreases the date or time period, depending on the current cursor position.
 * 
 * @param {number=} delta     The decrease delta.
 * @return {void}
 */
IgDateEditorMethods.prototype.spinDown = function(delta) {};

/**
 * Returns a reference to the spin up UI element of the editor.
 * @return {string}
 */
IgDateEditorMethods.prototype.spinUpButton = function() {};

/**
 * Returns a reference to the spin down UI element of the editor.
 * @return {string}
 */
IgDateEditorMethods.prototype.spinDownButton = function() {};

/**
 * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
 * @return {boolean}
 */
IgDateEditorMethods.prototype.isValid = function() {};

/**
 * @return {void}
 */
IgDateEditorMethods.prototype.dropDownButton = function() {};

/**
 * @return {void}
 */
IgDateEditorMethods.prototype.dropDownContainer = function() {};

/**
 * @return {void}
 */
IgDateEditorMethods.prototype.dropDownVisible = function() {};

/**
 * @return {void}
 */
IgDateEditorMethods.prototype.findListItemIndex = function() {};

/**
 * @return {void}
 */
IgDateEditorMethods.prototype.getSelectedListItem = function() {};

/**
 * @return {void}
 */
IgDateEditorMethods.prototype.selectedListIndex = function() {};

/**
 * @return {void}
 */
IgDateEditorMethods.prototype.showDropDown = function() {};

/**
 * @return {void}
 */
IgDateEditorMethods.prototype.hideDropDown = function() {};

/**
 * @param {string} propertyName
 * @return {!IgDateEditorMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function ItemSelectedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ItemSelectedEventUIParam() {}
 /** @type {?} */
ItemSelectedEventUIParam.prototype.owner;
 /** @type {?} */
ItemSelectedEventUIParam.prototype.dateFromPicker;
 /** @type {?} */
ItemSelectedEventUIParam.prototype.item;
 /** @type {?} */
ItemSelectedEventUIParam.prototype.calendar;
/**
 * @record
 * @struct
 */
function IgDatePicker() {}
 /** @type {?} */
IgDatePicker.prototype.regional;
 /** @type {string} */
IgDatePicker.prototype.buttonType;
 /** @type {?} */
IgDatePicker.prototype.datepickerOptions;
 /** @type {boolean} */
IgDatePicker.prototype.dropDownOnReadOnly;
 /** @type {boolean} */
IgDatePicker.prototype.dropDownAttachedToBody;
 /** @type {boolean} */
IgDatePicker.prototype.isLimitedToListValues;
 /** @type {number} */
IgDatePicker.prototype.listItemHoverDuration;
 /** @type {?} */
IgDatePicker.prototype.listItems;
 /** @type {number} */
IgDatePicker.prototype.listWidth;
 /** @type {!Object} */
IgDatePicker.prototype.value;
 /** @type {!Object} */
IgDatePicker.prototype.minValue;
 /** @type {!Object} */
IgDatePicker.prototype.maxValue;
 /** @type {string} */
IgDatePicker.prototype.dateDisplayFormat;
 /** @type {string} */
IgDatePicker.prototype.dateInputFormat;
 /** @type {string} */
IgDatePicker.prototype.dataMode;
 /** @type {number} */
IgDatePicker.prototype.spinDelta;
 /** @type {boolean} */
IgDatePicker.prototype.limitSpinToCurrentField;
 /** @type {boolean} */
IgDatePicker.prototype.enableUTCDates;
 /** @type {number} */
IgDatePicker.prototype.centuryThreshold;
 /** @type {number} */
IgDatePicker.prototype.yearShift;
 /** @type {(string|number)} */
IgDatePicker.prototype.nullValue;
 /** @type {number} */
IgDatePicker.prototype.dropDownAnimationDuration;
 /** @type {string} */
IgDatePicker.prototype.inputMask;
 /** @type {string} */
IgDatePicker.prototype.unfilledCharsPrompt;
 /** @type {string} */
IgDatePicker.prototype.padChar;
 /** @type {string} */
IgDatePicker.prototype.emptyChar;
 /** @type {boolean} */
IgDatePicker.prototype.toUpper;
 /** @type {boolean} */
IgDatePicker.prototype.toLower;
 /** @type {string} */
IgDatePicker.prototype.includeKeys;
 /** @type {string} */
IgDatePicker.prototype.excludeKeys;
 /** @type {boolean} */
IgDatePicker.prototype.spinWrapAround;
 /** @type {string} */
IgDatePicker.prototype.dropDownOrientation;
 /** @type {?} */
IgDatePicker.prototype.textMode;
 /** @type {number} */
IgDatePicker.prototype.visibleItemsCount;
 /** @type {?} */
IgDatePicker.prototype.maxLength;
 /** @type {string} */
IgDatePicker.prototype.textAlign;
 /** @type {string} */
IgDatePicker.prototype.placeHolder;
 /** @type {string} */
IgDatePicker.prototype.selectionOnFocus;
 /** @type {boolean} */
IgDatePicker.prototype.revertIfNotValid;
 /** @type {boolean} */
IgDatePicker.prototype.preventSubmitOnEnter;
 /** @type {?} */
IgDatePicker.prototype.locale;
 /** @type {boolean} */
IgDatePicker.prototype.suppressNotifications;
 /** @type {(string|number)} */
IgDatePicker.prototype.width;
 /** @type {(string|number)} */
IgDatePicker.prototype.height;
 /** @type {number} */
IgDatePicker.prototype.tabIndex;
 /** @type {boolean} */
IgDatePicker.prototype.allowNullValue;
 /** @type {string} */
IgDatePicker.prototype.inputName;
 /** @type {boolean} */
IgDatePicker.prototype.readOnly;
 /** @type {boolean} */
IgDatePicker.prototype.disabled;
 /** @type {?} */
IgDatePicker.prototype.validatorOptions;
 /** @type {!DropDownListOpeningEvent} */
IgDatePicker.prototype.dropDownListOpening;
 /** @type {!DropDownListOpenedEvent} */
IgDatePicker.prototype.dropDownListOpened;
 /** @type {!DropDownListClosingEvent} */
IgDatePicker.prototype.dropDownListClosing;
 /** @type {!DropDownItemSelectingEvent} */
IgDatePicker.prototype.dropDownItemSelecting;
 /** @type {!DropDownListClosedEvent} */
IgDatePicker.prototype.dropDownListClosed;
 /** @type {!DropDownItemSelectedEvent} */
IgDatePicker.prototype.dropDownItemSelected;
 /** @type {!ItemSelectedEvent} */
IgDatePicker.prototype.itemSelected;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgDatePickerMethods() {}

/**
 * Returns a reference to the jQuery calendar used as a picker selector
 * @return {string}
 */
IgDatePickerMethods.prototype.getCalendar = function() {};

/**
 * @return {void}
 */
IgDatePickerMethods.prototype.dropDownContainer = function() {};

/**
 * @return {void}
 */
IgDatePickerMethods.prototype.findListItemIndex = function() {};

/**
 * @return {void}
 */
IgDatePickerMethods.prototype.getSelectedListItem = function() {};

/**
 * @return {void}
 */
IgDatePickerMethods.prototype.selectedListIndex = function() {};

/**
 * Shows the drop down list.
 * @return {void}
 */
IgDatePickerMethods.prototype.showDropDown = function() {};

/**
 * Hides the drop down list.
 * @return {void}
 */
IgDatePickerMethods.prototype.hideDropDown = function() {};

/**
 * Returns a reference to the calendar button UI element of the editor.
 * @return {string}
 */
IgDatePickerMethods.prototype.dropDownButton = function() {};

/**
 * Returns the visibility state of the calendar.
 * @return {boolean}
 */
IgDatePickerMethods.prototype.dropDownVisible = function() {};

/**
 * Destroys the widget
 * @return {void}
 */
IgDatePickerMethods.prototype.destroy = function() {};

/**
 * Gets/Sets editor value.
 * 
 * Note! This option doesn't use the displayInputFormat to extract the date
 * 
 * @param {!Object=} newValue     New editor value. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
 * @return {!Object}
 */
IgDatePickerMethods.prototype.value = function(newValue) {};

/**
 * Gets selected date.
 * @return {!Object}
 */
IgDatePickerMethods.prototype.getSelectedDate = function() {};

/**
 * Sets selected date.
 * 
 * @param {!Object} date
 * @return {void}
 */
IgDatePickerMethods.prototype.selectDate = function(date) {};

/**
 * Increases the date or time period, depending on the current cursor position.
 * 
 * @param {number=} delta     The increase delta.
 * @return {void}
 */
IgDatePickerMethods.prototype.spinUp = function(delta) {};

/**
 * Decreases the date or time period, depending on the current cursor position.
 * 
 * @param {number=} delta     The decrease delta.
 * @return {void}
 */
IgDatePickerMethods.prototype.spinDown = function(delta) {};

/**
 * Returns a reference to the spin up UI element of the editor.
 * @return {string}
 */
IgDatePickerMethods.prototype.spinUpButton = function() {};

/**
 * Returns a reference to the spin down UI element of the editor.
 * @return {string}
 */
IgDatePickerMethods.prototype.spinDownButton = function() {};

/**
 * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
 * @return {boolean}
 */
IgDatePickerMethods.prototype.isValid = function() {};

/**
 * @param {string} propertyName
 * @return {!IgDatePickerMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function IgCheckboxEditor() {}
 /** @type {boolean} */
IgCheckboxEditor.prototype.checked;
 /** @type {string} */
IgCheckboxEditor.prototype.size;
 /** @type {string} */
IgCheckboxEditor.prototype.iconClass;
 /** @type {number} */
IgCheckboxEditor.prototype.tabIndex;
 /** @type {boolean} */
IgCheckboxEditor.prototype.readOnly;
 /** @type {boolean} */
IgCheckboxEditor.prototype.allowNullValue;
 /** @type {?} */
IgCheckboxEditor.prototype.nullValue;
 /** @type {(string|number)} */
IgCheckboxEditor.prototype.width;
 /** @type {(string|number)} */
IgCheckboxEditor.prototype.height;
 /** @type {?} */
IgCheckboxEditor.prototype.value;
 /** @type {string} */
IgCheckboxEditor.prototype.inputName;
 /** @type {boolean} */
IgCheckboxEditor.prototype.disabled;
 /** @type {?} */
IgCheckboxEditor.prototype.validatorOptions;
 /** @type {!ValueChangingEvent} */
IgCheckboxEditor.prototype.valueChanging;
 /** @type {!ValueChangedEvent} */
IgCheckboxEditor.prototype.valueChanged;
 /** @type {!RenderingEvent} */
IgCheckboxEditor.prototype.rendering;
 /** @type {!RenderedEvent} */
IgCheckboxEditor.prototype.rendered;
 /** @type {!MousedownEvent} */
IgCheckboxEditor.prototype.mousedown;
 /** @type {!MouseupEvent} */
IgCheckboxEditor.prototype.mouseup;
 /** @type {!MousemoveEvent} */
IgCheckboxEditor.prototype.mousemove;
 /** @type {!MouseoverEvent} */
IgCheckboxEditor.prototype.mouseover;
 /** @type {!MouseoutEvent} */
IgCheckboxEditor.prototype.mouseout;
 /** @type {!BlurEvent} */
IgCheckboxEditor.prototype.blur;
 /** @type {!FocusEvent} */
IgCheckboxEditor.prototype.focus;
 /** @type {!KeydownEvent} */
IgCheckboxEditor.prototype.keydown;
 /** @type {!KeypressEvent} */
IgCheckboxEditor.prototype.keypress;
 /** @type {!KeyupEvent} */
IgCheckboxEditor.prototype.keyup;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgCheckboxEditorMethods() {}

/**
 * Checks if the value in the editor is valid. Note: This function will not trigger automatic notifications.
 * @return {boolean}
 */
IgCheckboxEditorMethods.prototype.isValid = function() {};

/**
 * Gets/Sets Current checked state/Value of the igCheckboxEditor that will be submitted by the HTML form.
 * 1. If the [value](ui.igcheckboxeditor#options:value) option IS NOT defined, then 'value' method will match the checked state of the editor.
 * This option is used when the checkbox is intended to operate as a Boolean editor. In that case the return type is bool.
 * 2. If the [value](ui.igcheckboxeditor#options:value) option IS defined, then 'value' method will return the value that will be submitted when the editor is checked and the form is submitted.
 * To get checked state regardless of the 'value' option, use $(".selector").igCheckboxEditor("option", "checked");
 * 
 * @param {!Object} newValue
 * @return {string}
 */
IgCheckboxEditorMethods.prototype.value = function(newValue) {};

/**
 * Toggles the state of the checkbox.
 * @return {void}
 */
IgCheckboxEditorMethods.prototype.toggle = function() {};

/**
 * Gets/Sets name attribute applied to the editor element.
 * 
 * @param {string=} newValue     The new input name.
 * @return {string}
 */
IgCheckboxEditorMethods.prototype.inputName = function(newValue) {};

/**
 * Gets the input element of the editor.
 * @return {string}
 */
IgCheckboxEditorMethods.prototype.field = function() {};

/**
 * Gets a reference to the jQuery element that wraps the editor.
 * @return {string}
 */
IgCheckboxEditorMethods.prototype.editorContainer = function() {};

/**
 * Gets whether the editor has focus.
 * @return {boolean}
 */
IgCheckboxEditorMethods.prototype.hasFocus = function() {};

/**
 * Sets focus to the editor after the specified delay.
 * 
 * @param {number=} delay     The delay before focusing the editor.
 * @return {void}
 */
IgCheckboxEditorMethods.prototype.setFocus = function(delay) {};

/**
 * Hides the editor.
 * @return {void}
 */
IgCheckboxEditorMethods.prototype.hide = function() {};

/**
 * Shows the editor.
 * @return {void}
 */
IgCheckboxEditorMethods.prototype.show = function() {};

/**
 * Gets a reference to [igValidator](ui.igvalidator) used by the editor.
 * @return {!Object}
 */
IgCheckboxEditorMethods.prototype.validator = function() {};

/**
 * Triggers validation for the editor. If validatorOptions are set will also call validate on the [igValidator](ui.igvalidator).
 * @return {boolean}
 */
IgCheckboxEditorMethods.prototype.validate = function() {};

/**
 * Destroys the widget
 * @return {void}
 */
IgCheckboxEditorMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgCheckboxEditorMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Gets/Sets the width of the control.
 * 
 * /Sets the width of the control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the height of the control.
 * 
 * /Sets the height of the control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
 * 
 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets tabIndex attribute for the editor input.
 * 
 * /Sets tabIndex attribute for the editor input.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the editor value can become null.
 * If that option is false, and editor has no value, then value is set to an empty string.
 * 
 * /Sets whether the editor value can become null.
 * If that option is false, and editor has no value, then value is set to an empty string.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
 * 
 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
 * 
 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
 * 
 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
 * 
 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
 * 
 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
 * 
 * 
 * \@optionValue New value to be set.
 * Event which is raised before rendering of the editor completes.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to the editor performing rendering.
 * Use ui.element to get a reference to the editor element.
 * Event which is raised before rendering of the editor completes.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to the editor performing rendering.
 * Use ui.element to get a reference to the editor element.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after rendering of the editor completes.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to the editor performing rendering.
 * Use ui.element to get a reference to the editor element.
 * Event which is raised after rendering of the editor completes.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to the editor performing rendering.
 * Use ui.element to get a reference to the editor element.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on mousedown event.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised on mousedown event.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on mouseup event.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised on mouseup event.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on mousemove at any part of editor including drop-down list.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised on mousemove at any part of editor including drop-down list.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on mouseover at any part of editor including drop-down list.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised on mouseover at any part of editor including drop-down list.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on mouseleave at any part of editor including drop-down list.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised on mouseleave at any part of editor including drop-down list.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised when input field of editor loses focus.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised when input field of editor loses focus.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised when input field of editor gets focus.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised when input field of editor gets focus.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on keydown event.
 * Return false in order to cancel key action.
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.key to obtain value of keyCode.
 * Event which is raised on keydown event.
 * Return false in order to cancel key action.
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.key to obtain value of keyCode.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on keypress event.
 * Return false in order to cancel key action.
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.key to obtain value of keyCode.
 * Event which is raised on keypress event.
 * Return false in order to cancel key action.
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.key to obtain value of keyCode.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on keyup event.
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.key to obtain value of keyCode.
 * Event which is raised on keyup event.
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.key to obtain value of keyCode.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before the editor value is changed.
 * Return false in order to cancel change.
 * It can be raised after loosing focus or on spin events.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.newValue to obtain the new value.
 * Use ui.oldValue to obtain the old value.
 * Use ui.editorInput to obtain reference to the editor input.
 * Event which is raised before the editor value is changed.
 * Return false in order to cancel change.
 * It can be raised after loosing focus or on spin events.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.newValue to obtain the new value.
 * Use ui.oldValue to obtain the old value.
 * Use ui.editorInput to obtain reference to the editor input.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after the editor value is changed. It can be raised after loosing focus or on spin events.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.newValue to obtain the new value.
 * Use ui.originalValue to obtain the original value.
 * Use ui.editorInput to obtain reference to the editor input.
 * Event which is raised after the editor value is changed. It can be raised after loosing focus or on spin events.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.newValue to obtain the new value.
 * Use ui.originalValue to obtain the original value.
 * Use ui.editorInput to obtain reference to the editor input.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgBaseEditor} methodName_or_optionLiteral_or_options
 * @param {...string|!Object|number|!IgBaseEditor|?=} newValue_or_delay_or_optionName_or_options_or_methodParams
 * @return {string|void|boolean|!Object|(string|number)|?|number|!RenderingEvent|!RenderedEvent|!MousedownEvent|!MouseupEvent|!MousemoveEvent|!MouseoverEvent|!MouseoutEvent|!BlurEvent|!FocusEvent|!KeydownEvent|!KeypressEvent|!KeyupEvent|!ValueChangingEvent|!ValueChangedEvent|!JQuery}
 */
JQuery.prototype.igBaseEditor = function(methodName_or_optionLiteral_or_options, newValue_or_delay_or_optionName_or_options_or_methodParams) {};

/**
 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
 * 
 * 
 * Visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets list of items which are used as a source for the drop-down list.
 * Items in the list can be of type string, number or object. The items are directly rendered without any casting, or manipulation.
 * 
 * /Sets list of items which are used as a source for the drop-down list.
 * Items in the list can be of type string, number or object. The items are directly rendered without any casting, or manipulation.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
 * 
 * /Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the hover/unhover animation duration of a drop-down list item.
 * 
 * /Sets the hover/unhover animation duration of a drop-down list item.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets wheather the drop-down list element is attached to the body of the document, or to the editor container element.
 * If the option is set to false the editor will attach the drop-down list element to the editor container
 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
 * Note! This option can not be set runtime.
 * 
 * Wheather the drop-down list element is attached to the body of the document, or to the editor container element.
 * If the option is set to false the editor will attach the drop-down list element to the editor container
 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
 * Note! This option can not be set runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets show/hide drop-down list animation duration in milliseconds.
 * 
 * /Sets show/hide drop-down list animation duration in milliseconds.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the number of the items to be shown at once when the drop-down list get opened.
 * Notes:
 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
 * This option can not be set runtime.
 * 
 * The number of the items to be shown at once when the drop-down list get opened.
 * Notes:
 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
 * This option can not be set runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the ability of the editor to allow entering only specific characters in the input-field from the keyboard and on paste.
 * Notes:
 * If both "excludeKeys" and "includeKeys" options are used, then "excludeKeys" has priority and includeKeys options is not respected.
 * The option is case sensitive! If the option is set runtime it's not applied on the current value.
 * 
 * /Sets the ability of the editor to allow entering only specific characters in the input-field from the keyboard and on paste.
 * Notes:
 * If both "excludeKeys" and "includeKeys" options are used, then "excludeKeys" has priority and includeKeys options is not respected.
 * The option is case sensitive! If the option is set runtime it's not applied on the current value.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the ability of the editor to prevent entering specific characters from the keyboard or on paste.
 * Notes:
 * If both "excludeKeys" and "includeKeys" options are used, then "excludeKeys" has priority and includeKeys options is not respected.
 * The option is case sensitive! If the option is set runtime it's not applied on the current value.
 * 
 * /Sets the ability of the editor to prevent entering specific characters from the keyboard or on paste.
 * Notes:
 * If both "excludeKeys" and "includeKeys" options are used, then "excludeKeys" has priority and includeKeys options is not respected.
 * The option is case sensitive! If the option is set runtime it's not applied on the current value.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the horizontal alignment of the text in the editor.
 * 
 * /Sets the horizontal alignment of the text in the editor.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
 * 
 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
 * 
 * /Sets the action when the editor gets focused. The default value is selectAll.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the text mode of the editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
 * 
 * The text mode of the editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side. When the last item is reached and the spin down is clicked, the first item gets hovered and vice versa. This option has no effect there is no drop-down list.
 * 
 * /Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side. When the last item is reached and the spin down is clicked, the first item gets hovered and vice versa. This option has no effect there is no drop-down list.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets if the editor should only allow values set into the list of items. This validation is done only when the editor is blured, or enter key is pressed
 * 
 * /Sets if the editor should only allow values set into the list of items. This validation is done only when the editor is blured, or enter key is pressed
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
 * 
 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
 * 
 * /Sets if the editor should prevent form submition when enter key is pressed.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
 * 
 * /Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the maximum length of a text which can be entered by the user.
 * Negative values or 0 disables that behavior. If set at runtime the editor doesn't apply the option to the cuurent value.
 * 
 * /Sets the maximum length of a text which can be entered by the user.
 * Negative values or 0 disables that behavior. If set at runtime the editor doesn't apply the option to the cuurent value.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
 * Note! In case there are no list items - the editor will reamin readonly
 * Note! This option can not be set runtime.
 * 
 * The ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
 * Note! In case there are no list items - the editor will reamin readonly
 * Note! This option can not be set runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the ability to convert the input characters to upper case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
 * Note! When the option is set at runtime the editor is not changing the current value.
 * 
 * /Sets the ability to convert the input characters to upper case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
 * Note! When the option is set at runtime the editor is not changing the current value.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the ability to convert the input characters to lower case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
 * Note! When the option is set at runtime the editor is not changing the current value.
 * 
 * /Sets the ability to convert the input characters to lower case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
 * Note! When the option is set at runtime the editor is not changing the current value.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the strings used for the localization of the component. This includes button titles, error messages etc. Value of the object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
 * 
 * /Sets the strings used for the localization of the component. This includes button titles, error messages etc. Value of the object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
 * 
 * 
 * \@optionValue New value to be set.
 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
 * 
 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the width of the control.
 * 
 * /Sets the width of the control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the height of the control.
 * 
 * /Sets the height of the control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
 * 
 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets tabIndex attribute for the editor input.
 * 
 * /Sets tabIndex attribute for the editor input.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the editor value can become null.
 * If that option is false, and editor has no value, then value is set to an empty string.
 * 
 * /Sets whether the editor value can become null.
 * If that option is false, and editor has no value, then value is set to an empty string.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
 * 
 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
 * 
 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
 * 
 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
 * 
 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
 * 
 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
 * 
 * 
 * \@optionValue New value to be set.
 * Event which is raised when the drop down is opening.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * Event which is raised when the drop down is opening.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after the drop down is opened.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * Event which is raised after the drop down is opened.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised when the drop down is closing.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * Event which is raised when the drop down is closing.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after the drop down is closed.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * Event which is raised after the drop down is closed.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised when an item in the drop down list is being selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * Use ui.item to obtain reference to the list item which is about to be selected.
 * Event which is raised when an item in the drop down list is being selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * Use ui.item to obtain reference to the list item which is about to be selected.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after an item in the drop down list is selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * Use ui.item to obtain reference to the list item which is selected.
 * Event which is raised after an item in the drop down list is selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * Use ui.item to obtain reference to the list item which is selected.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after text in the editor was changed. It can be raised when keyUp event occurs,
 * when the clear button is clicked or when an item from a list is selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.text to obtain new text
 * Use ui.oldText to obtain the old text.
 * Event which is raised after text in the editor was changed. It can be raised when keyUp event occurs,
 * when the clear button is clicked or when an item from a list is selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.text to obtain new text
 * Use ui.oldText to obtain the old text.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before rendering of the editor completes.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to the editor performing rendering.
 * Use ui.element to get a reference to the editor element.
 * Event which is raised before rendering of the editor completes.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to the editor performing rendering.
 * Use ui.element to get a reference to the editor element.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after rendering of the editor completes.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to the editor performing rendering.
 * Use ui.element to get a reference to the editor element.
 * Event which is raised after rendering of the editor completes.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to the editor performing rendering.
 * Use ui.element to get a reference to the editor element.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on mousedown event.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised on mousedown event.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on mouseup event.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised on mouseup event.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on mousemove at any part of editor including drop-down list.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised on mousemove at any part of editor including drop-down list.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on mouseover at any part of editor including drop-down list.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised on mouseover at any part of editor including drop-down list.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on mouseleave at any part of editor including drop-down list.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised on mouseleave at any part of editor including drop-down list.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised when input field of editor loses focus.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised when input field of editor loses focus.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised when input field of editor gets focus.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised when input field of editor gets focus.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on keydown event.
 * Return false in order to cancel key action.
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.key to obtain value of keyCode.
 * Event which is raised on keydown event.
 * Return false in order to cancel key action.
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.key to obtain value of keyCode.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on keypress event.
 * Return false in order to cancel key action.
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.key to obtain value of keyCode.
 * Event which is raised on keypress event.
 * Return false in order to cancel key action.
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.key to obtain value of keyCode.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on keyup event.
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.key to obtain value of keyCode.
 * Event which is raised on keyup event.
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.key to obtain value of keyCode.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before the editor value is changed.
 * Return false in order to cancel change.
 * It can be raised after loosing focus or on spin events.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.newValue to obtain the new value.
 * Use ui.oldValue to obtain the old value.
 * Use ui.editorInput to obtain reference to the editor input.
 * Event which is raised before the editor value is changed.
 * Return false in order to cancel change.
 * It can be raised after loosing focus or on spin events.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.newValue to obtain the new value.
 * Use ui.oldValue to obtain the old value.
 * Use ui.editorInput to obtain reference to the editor input.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after the editor value is changed. It can be raised after loosing focus or on spin events.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.newValue to obtain the new value.
 * Use ui.originalValue to obtain the original value.
 * Use ui.editorInput to obtain reference to the editor input.
 * Event which is raised after the editor value is changed. It can be raised after loosing focus or on spin events.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.newValue to obtain the new value.
 * Use ui.originalValue to obtain the original value.
 * Use ui.editorInput to obtain reference to the editor input.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgTextEditor} methodName_or_optionLiteral_or_options
 * @param {...string|number|!Object|!IgTextEditor|?=} text_or_index_or_string_or_start_or_newValue_or_delay_or_optionName_or_options_or_methodParams
 * @return {string|void|boolean|number|!Object|!Array<?>|?|(string|number)|!DropDownListOpeningEvent|!DropDownListOpenedEvent|!DropDownListClosingEvent|!DropDownListClosedEvent|!DropDownItemSelectingEvent|!DropDownItemSelectedEvent|!TextChangedEvent|!RenderingEvent|!RenderedEvent|!MousedownEvent|!MouseupEvent|!MousemoveEvent|!MouseoverEvent|!MouseoutEvent|!BlurEvent|!FocusEvent|!KeydownEvent|!KeypressEvent|!KeyupEvent|!ValueChangingEvent|!ValueChangedEvent|!JQuery}
 */
JQuery.prototype.igTextEditor = function(methodName_or_optionLiteral_or_options, text_or_index_or_string_or_start_or_newValue_or_delay_or_optionName_or_options_or_methodParams) {};

/**
 * Gets/Sets list of items which are used as a source for the drop-down list.
 * Items in the list can be of type string, number or object. The items are directly rendered without any casting, or manipulation.
 * 
 * /Sets list of items which are used as a source for the drop-down list.
 * Items in the list can be of type string, number or object. The items are directly rendered without any casting, or manipulation.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
 * 
 * /Sets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the character, which is used as negative sign.
 * Note: This option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * /Sets the character, which is used as negative sign.
 * Note: This option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
 * Note: This option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * /Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
 * Note: This option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the character, which is used as decimal separator.
 * Note: this option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * /Sets the character, which is used as decimal separator.
 * Note: this option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the character, which is used as separator for groups (like thousands).
 * That option has effect only in display mode(no focus).
 * Note: this option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * /Sets the character, which is used as separator for groups (like thousands).
 * That option has effect only in display mode(no focus).
 * Note: this option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * 
 * \@optionValue New value to be set.
 * (array of number objects) Gets/Sets the number of digits in the integer part of a number, which are divided into groups.
 * The "groupSeparator" is inserted between groups.
 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
 * Count of groups starts from the decimal point (from right to left).
 * That option has effect only in display mode(no focus).
 * Note: this option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * (array of number objects) /Sets the number of digits in the integer part of a number, which are divided into groups.
 * The "groupSeparator" is inserted between groups.
 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
 * Count of groups starts from the decimal point (from right to left).
 * That option has effect only in display mode(no focus).
 * Note: this option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the maximum number of decimal places which are used in display mode(no focus).
 * Note: this option has priority over possible regional settings.
 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * /Sets the maximum number of decimal places which are used in display mode(no focus).
 * Note: this option has priority over possible regional settings.
 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the minimum number of decimal places which are used in display (no focus) state.
 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
 * Note: This option has priority over possible regional settings.
 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * Note: This option supports values below or equal to 20.
 * 
 * /Sets the minimum number of decimal places which are used in display (no focus) state.
 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
 * Note: This option has priority over possible regional settings.
 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * Note: This option supports values below or equal to 20.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the horizontal alignment of the text in the editor.
 * 
 * /Sets the horizontal alignment of the text in the editor.
 * 
 * 
 * \@optionValue New value to be set.
 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igNumericEditor#options:minValue) and [maxValue](ui.igNumericEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
 * In addition, the maximum value that can be set to [minDecimals](ui.igNumericEditor#options:minDecimals) and [maxDecimals](ui.igNumericEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
 * 
 * 
 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igNumericEditor#options:minValue) and [maxValue](ui.igNumericEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
 * In addition, the maximum value that can be set to [minDecimals](ui.igNumericEditor#options:minDecimals) and [maxDecimals](ui.igNumericEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the minimum value which can be entered in the editor by the end user.
 * 
 * /Sets the minimum value which can be entered in the editor by the end user.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the maximum value which can be entered in the editor by the end user.
 * 
 * /Sets the maximum value which can be entered in the editor by the end user.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the editor value can become null.
 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
 * 
 * /Sets whether the editor value can become null.
 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the default delta-value which is used with "spin" [buttonType](ui.igNumericEditor#options:buttonType) or [spinUp](ui.igNumericEditor#methods:spinUp) and [spinDown](ui.igNumericEditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
 * 
 * /Sets the default delta-value which is used with "spin" [buttonType](ui.igNumericEditor#options:buttonType) or [spinUp](ui.igNumericEditor#methods:spinUp) and [spinDown](ui.igNumericEditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets support for scientific format in edit mode.
 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
 * Notes: The "+" character is not supported in edit mode.
 * 
 * 
 * /Sets support for scientific format in edit mode.
 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
 * Notes: The "+" character is not supported in edit mode.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
 * 
 * /Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
 * 
 * 
 * \@optionValue New value to be set.
 * Removed from numeric editor options
 * Removed from numeric editor options
 * 
 * \@optionValue New value to be set.
 * Removed from numeric editor options
 * Removed from numeric editor options
 * 
 * \@optionValue New value to be set.
 * Removed from numeric editor options
 * Removed from numeric editor options
 * 
 * \@optionValue New value to be set.
 * Removed from numeric editor options
 * Removed from numeric editor options
 * 
 * \@optionValue New value to be set.
 * Removed from numeric editor options
 * Removed from numeric editor options
 * 
 * \@optionValue New value to be set.
 *
 *
 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
 * 
 * 
 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
 * 
 * 
 * Visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
 * 
 * /Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the hover/unhover animation duration of a drop-down list item.
 * 
 * /Sets the hover/unhover animation duration of a drop-down list item.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets wheather the drop-down list element is attached to the body of the document, or to the editor container element.
 * If the option is set to false the editor will attach the drop-down list element to the editor container
 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
 * Note! This option can not be set runtime.
 * 
 * Wheather the drop-down list element is attached to the body of the document, or to the editor container element.
 * If the option is set to false the editor will attach the drop-down list element to the editor container
 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
 * Note! This option can not be set runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets show/hide drop-down list animation duration in milliseconds.
 * 
 * /Sets show/hide drop-down list animation duration in milliseconds.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the number of the items to be shown at once when the drop-down list get opened.
 * Notes:
 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
 * This option can not be set runtime.
 * 
 * The number of the items to be shown at once when the drop-down list get opened.
 * Notes:
 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
 * This option can not be set runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
 * 
 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
 * 
 * /Sets the action when the editor gets focused. The default value is selectAll.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets if the editor should only allow values set into the list of items. This validation is done only when the editor is blured, or enter key is pressed
 * 
 * /Sets if the editor should only allow values set into the list of items. This validation is done only when the editor is blured, or enter key is pressed
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
 * 
 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
 * 
 * /Sets if the editor should prevent form submition when enter key is pressed.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
 * 
 * /Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
 * Note! In case there are no list items - the editor will reamin readonly
 * Note! This option can not be set runtime.
 * 
 * The ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
 * Note! In case there are no list items - the editor will reamin readonly
 * Note! This option can not be set runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the strings used for the localization of the component. This includes button titles, error messages etc. Value of the object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
 * 
 * /Sets the strings used for the localization of the component. This includes button titles, error messages etc. Value of the object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
 * 
 * 
 * \@optionValue New value to be set.
 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
 * 
 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the width of the control.
 * 
 * /Sets the width of the control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the height of the control.
 * 
 * /Sets the height of the control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets tabIndex attribute for the editor input.
 * 
 * /Sets tabIndex attribute for the editor input.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
 * 
 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
 * 
 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
 * 
 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
 * 
 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
 * 
 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
 * 
 * 
 * \@optionValue New value to be set.
 * Event which is raised when the drop down is opening.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * Event which is raised when the drop down is opening.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after the drop down is opened.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * Event which is raised after the drop down is opened.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised when the drop down is closing.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * Event which is raised when the drop down is closing.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after the drop down is closed.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * Event which is raised after the drop down is closed.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised when an item in the drop down list is being selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * Use ui.item to obtain reference to the list item which is about to be selected.
 * Event which is raised when an item in the drop down list is being selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * Use ui.item to obtain reference to the list item which is about to be selected.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after an item in the drop down list is selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * Use ui.item to obtain reference to the list item which is selected.
 * Event which is raised after an item in the drop down list is selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.list to obtain reference to the list contaier.
 * Use ui.item to obtain reference to the list item which is selected.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after text in the editor was changed. It can be raised when keyUp event occurs,
 * when the clear button is clicked or when an item from a list is selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.text to obtain new text
 * Use ui.oldText to obtain the old text.
 * Event which is raised after text in the editor was changed. It can be raised when keyUp event occurs,
 * when the clear button is clicked or when an item from a list is selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.text to obtain new text
 * Use ui.oldText to obtain the old text.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgNumericEditor} methodName_or_optionLiteral_or_options
 * @param {...number|string|!IgNumericEditor|?=} newValue_or_number_or_delta_or_index_or_string_or_start_or_optionName_or_options_or_methodParams
 * @return {number|void|string|boolean|!Array<?>|?|(string|number)|!DropDownListOpeningEvent|!DropDownListOpenedEvent|!DropDownListClosingEvent|!DropDownListClosedEvent|!DropDownItemSelectingEvent|!DropDownItemSelectedEvent|!TextChangedEvent|!JQuery}
 */
JQuery.prototype.igNumericEditor = function(methodName_or_optionLiteral_or_options, newValue_or_number_or_delta_or_index_or_string_or_start_or_optionName_or_options_or_methodParams) {};

/**
 * Gets/Sets the string, which is used as positive pattern. The "n" flag represents the value of number.
 * Note: This option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * /Sets the string, which is used as positive pattern. The "n" flag represents the value of number.
 * Note: This option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets a string that is used as the currency symbol that is shown in display mode.
 * 
 * /Sets a string that is used as the currency symbol that is shown in display mode.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets list of items which are used as a source for the drop-down list.
 * Items in the list can be of type string, number or object. The items are directly rendered without any casting, or manipulation.
 * 
 * /Sets list of items which are used as a source for the drop-down list.
 * Items in the list can be of type string, number or object. The items are directly rendered without any casting, or manipulation.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
 * 
 * /Sets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the character, which is used as negative sign.
 * Note: This option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * /Sets the character, which is used as negative sign.
 * Note: This option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
 * Note: This option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * /Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
 * Note: This option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the character, which is used as decimal separator.
 * Note: this option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * /Sets the character, which is used as decimal separator.
 * Note: this option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the character, which is used as separator for groups (like thousands).
 * That option has effect only in display mode(no focus).
 * Note: this option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * /Sets the character, which is used as separator for groups (like thousands).
 * That option has effect only in display mode(no focus).
 * Note: this option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * 
 * \@optionValue New value to be set.
 * (array of number objects) Gets/Sets the number of digits in the integer part of a number, which are divided into groups.
 * The "groupSeparator" is inserted between groups.
 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
 * Count of groups starts from the decimal point (from right to left).
 * That option has effect only in display mode(no focus).
 * Note: this option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * (array of number objects) /Sets the number of digits in the integer part of a number, which are divided into groups.
 * The "groupSeparator" is inserted between groups.
 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
 * Count of groups starts from the decimal point (from right to left).
 * That option has effect only in display mode(no focus).
 * Note: this option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the maximum number of decimal places which are used in display mode(no focus).
 * Note: this option has priority over possible regional settings.
 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * /Sets the maximum number of decimal places which are used in display mode(no focus).
 * Note: this option has priority over possible regional settings.
 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the minimum number of decimal places which are used in display (no focus) state.
 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
 * Note: This option has priority over possible regional settings.
 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * Note: This option supports values below or equal to 20.
 * 
 * /Sets the minimum number of decimal places which are used in display (no focus) state.
 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
 * Note: This option has priority over possible regional settings.
 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * Note: This option supports values below or equal to 20.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the horizontal alignment of the text in the editor.
 * 
 * /Sets the horizontal alignment of the text in the editor.
 * 
 * 
 * \@optionValue New value to be set.
 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igNumericEditor#options:minValue) and [maxValue](ui.igNumericEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
 * In addition, the maximum value that can be set to [minDecimals](ui.igNumericEditor#options:minDecimals) and [maxDecimals](ui.igNumericEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
 * 
 * 
 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igNumericEditor#options:minValue) and [maxValue](ui.igNumericEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
 * In addition, the maximum value that can be set to [minDecimals](ui.igNumericEditor#options:minDecimals) and [maxDecimals](ui.igNumericEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the minimum value which can be entered in the editor by the end user.
 * 
 * /Sets the minimum value which can be entered in the editor by the end user.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the maximum value which can be entered in the editor by the end user.
 * 
 * /Sets the maximum value which can be entered in the editor by the end user.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the editor value can become null.
 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
 * 
 * /Sets whether the editor value can become null.
 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the default delta-value which is used with "spin" [buttonType](ui.igNumericEditor#options:buttonType) or [spinUp](ui.igNumericEditor#methods:spinUp) and [spinDown](ui.igNumericEditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
 * 
 * /Sets the default delta-value which is used with "spin" [buttonType](ui.igNumericEditor#options:buttonType) or [spinUp](ui.igNumericEditor#methods:spinUp) and [spinDown](ui.igNumericEditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets support for scientific format in edit mode.
 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
 * Notes: The "+" character is not supported in edit mode.
 * 
 * 
 * /Sets support for scientific format in edit mode.
 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
 * Notes: The "+" character is not supported in edit mode.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
 * 
 * /Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
 * 
 * 
 * \@optionValue New value to be set.
 * Removed from numeric editor options
 * Removed from numeric editor options
 * 
 * \@optionValue New value to be set.
 * Removed from numeric editor options
 * Removed from numeric editor options
 * 
 * \@optionValue New value to be set.
 * Removed from numeric editor options
 * Removed from numeric editor options
 * 
 * \@optionValue New value to be set.
 * Removed from numeric editor options
 * Removed from numeric editor options
 * 
 * \@optionValue New value to be set.
 * Removed from numeric editor options
 * Removed from numeric editor options
 * 
 * \@optionValue New value to be set.
 *
 *
 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
 * 
 * 
 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
 * 
 * 
 * Visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
 * 
 * /Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the hover/unhover animation duration of a drop-down list item.
 * 
 * /Sets the hover/unhover animation duration of a drop-down list item.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets wheather the drop-down list element is attached to the body of the document, or to the editor container element.
 * If the option is set to false the editor will attach the drop-down list element to the editor container
 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
 * Note! This option can not be set runtime.
 * 
 * Wheather the drop-down list element is attached to the body of the document, or to the editor container element.
 * If the option is set to false the editor will attach the drop-down list element to the editor container
 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
 * Note! This option can not be set runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets show/hide drop-down list animation duration in milliseconds.
 * 
 * /Sets show/hide drop-down list animation duration in milliseconds.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the number of the items to be shown at once when the drop-down list get opened.
 * Notes:
 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
 * This option can not be set runtime.
 * 
 * The number of the items to be shown at once when the drop-down list get opened.
 * Notes:
 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
 * This option can not be set runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
 * 
 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
 * 
 * /Sets the action when the editor gets focused. The default value is selectAll.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets if the editor should only allow values set into the list of items. This validation is done only when the editor is blured, or enter key is pressed
 * 
 * /Sets if the editor should only allow values set into the list of items. This validation is done only when the editor is blured, or enter key is pressed
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
 * 
 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
 * 
 * /Sets if the editor should prevent form submition when enter key is pressed.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
 * 
 * /Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
 * Note! In case there are no list items - the editor will reamin readonly
 * Note! This option can not be set runtime.
 * 
 * The ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
 * Note! In case there are no list items - the editor will reamin readonly
 * Note! This option can not be set runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the strings used for the localization of the component. This includes button titles, error messages etc. Value of the object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
 * 
 * /Sets the strings used for the localization of the component. This includes button titles, error messages etc. Value of the object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
 * 
 * 
 * \@optionValue New value to be set.
 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
 * 
 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the width of the control.
 * 
 * /Sets the width of the control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the height of the control.
 * 
 * /Sets the height of the control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets tabIndex attribute for the editor input.
 * 
 * /Sets tabIndex attribute for the editor input.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
 * 
 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
 * 
 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
 * 
 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
 * 
 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
 * 
 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
 * 
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgCurrencyEditor} methodName_or_optionLiteral_or_options
 * @param {...!Object|number|string|!IgCurrencyEditor|?=} symbol_or_newValue_or_number_or_delta_or_optionName_or_options_or_methodParams
 * @return {string|number|void|!Array<?>|?|boolean|(string|number)|!JQuery}
 */
JQuery.prototype.igCurrencyEditor = function(methodName_or_optionLiteral_or_options, symbol_or_newValue_or_number_or_delta_or_optionName_or_options_or_methodParams) {};

/**
 * Gets/Sets the pattern for positive numeric values, which is used in display (no focus) state.
 * If you use the "en-US" culture the default value for "positivePattern" will be "n$" where the "$" flag represents the "numericSymbol" and the "n" flag represents the value of the number.
 * Note: this option has priority over possible regional settings.
 * 
 * /Sets the pattern for positive numeric values, which is used in display (no focus) state.
 * If you use the "en-US" culture the default value for "positivePattern" will be "n$" where the "$" flag represents the "numericSymbol" and the "n" flag represents the value of the number.
 * Note: this option has priority over possible regional settings.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the symbol, which is used in display (no focus) state.
 * Note: this option has priority over possible regional settings.
 * 
 * /Sets the symbol, which is used in display (no focus) state.
 * Note: this option has priority over possible regional settings.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the factor which is used for the get and set of the "value" method.
 * On get the number (string) entered by the user is divided by that factor and on set the number (string) displayed in the editor is multiplied by that factor.
 * For example, if the factor is 100 and the "value" is set to 0.123, then the editor will show string "12.3".
 * Possible values: 1 or 100.
 * Note: this option has priority over possible regional settings.
 * 
 * /Sets the factor which is used for the get and set of the "value" method.
 * On get the number (string) entered by the user is divided by that factor and on set the number (string) displayed in the editor is multiplied by that factor.
 * For example, if the factor is 100 and the "value" is set to 0.123, then the editor will show string "12.3".
 * Possible values: 1 or 100.
 * Note: this option has priority over possible regional settings.
 * 
 * 
 * \@optionValue New value to be set.
 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igPercentEditor#options:minValue) and [maxValue](ui.igPercentEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
 * In addition, the maximum value that can be set to [minDecimals](ui.igPercentEditor#options:minDecimals) and [maxDecimals](ui.igPercentEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
 * 
 * 
 * Defines the range that editor's value can accept.This is achieved by setting the [minValue](ui.igPercentEditor#options:minValue) and [maxValue](ui.igPercentEditor#options:maxValue) editor's options, accordingly to the lowest and highest accepted values for the defined numeric mode.
 * The range for the specific type follows the numeric type standards, e.g. in .NET Framework  [floating-point](https://msdn.microsoft.com/en-us/library/9ahet949.aspx) types and [integral types](https://msdn.microsoft.com/en-us/library/exx3b86w.aspx).
 * In addition, the maximum value that can be set to [minDecimals](ui.igPercentEditor#options:minDecimals) and [maxDecimals](ui.igPercentEditor#options:maxDecimals) options can be 15, when editor is in 'double' mode and 7, when in 'float' mode.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the default delta-value which is used with "spin" [buttonType](ui.igpercenteditor#options:buttonType) or [spinUp](ui.igpercenteditor#methods:spinUp) and [spinDown](ui.igpercenteditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
 * 
 * /Sets the default delta-value which is used with "spin" [buttonType](ui.igpercenteditor#options:buttonType) or [spinUp](ui.igpercenteditor#methods:spinUp) and [spinDown](ui.igpercenteditor#methods:spinDown) methods to increment or decrement value in the editor. The value can not be negative. Non integer value is supported only for dataMode double and float.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets list of items which are used as a source for the drop-down list.
 * Items in the list can be of type string, number or object. The items are directly rendered without any casting, or manipulation.
 * 
 * /Sets list of items which are used as a source for the drop-down list.
 * Items in the list can be of type string, number or object. The items are directly rendered without any casting, or manipulation.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
 * 
 * /Sets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the character, which is used as negative sign.
 * Note: This option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * /Sets the character, which is used as negative sign.
 * Note: This option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
 * Note: This option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * /Sets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
 * Note: This option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the character, which is used as decimal separator.
 * Note: this option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * /Sets the character, which is used as decimal separator.
 * Note: this option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the character, which is used as separator for groups (like thousands).
 * That option has effect only in display mode(no focus).
 * Note: this option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * /Sets the character, which is used as separator for groups (like thousands).
 * That option has effect only in display mode(no focus).
 * Note: this option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * 
 * \@optionValue New value to be set.
 * (array of number objects) Gets/Sets the number of digits in the integer part of a number, which are divided into groups.
 * The "groupSeparator" is inserted between groups.
 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
 * Count of groups starts from the decimal point (from right to left).
 * That option has effect only in display mode(no focus).
 * Note: this option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * (array of number objects) /Sets the number of digits in the integer part of a number, which are divided into groups.
 * The "groupSeparator" is inserted between groups.
 * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
 * Count of groups starts from the decimal point (from right to left).
 * That option has effect only in display mode(no focus).
 * Note: this option has priority over possible regional settings.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the maximum number of decimal places which are used in display mode(no focus).
 * Note: this option has priority over possible regional settings.
 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * /Sets the maximum number of decimal places which are used in display mode(no focus).
 * Note: this option has priority over possible regional settings.
 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the minimum number of decimal places which are used in display (no focus) state.
 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
 * Note: This option has priority over possible regional settings.
 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * Note: This option supports values below or equal to 20.
 * 
 * /Sets the minimum number of decimal places which are used in display (no focus) state.
 * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
 * Note: This option has priority over possible regional settings.
 * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
 * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
 * Note: This option supports values below or equal to 20.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the horizontal alignment of the text in the editor.
 * 
 * /Sets the horizontal alignment of the text in the editor.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the minimum value which can be entered in the editor by the end user.
 * 
 * /Sets the minimum value which can be entered in the editor by the end user.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the maximum value which can be entered in the editor by the end user.
 * 
 * /Sets the maximum value which can be entered in the editor by the end user.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the editor value can become null.
 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
 * 
 * /Sets whether the editor value can become null.
 * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets support for scientific format in edit mode.
 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
 * Notes: The "+" character is not supported in edit mode.
 * 
 * 
 * /Sets support for scientific format in edit mode.
 * If that option is set, then numeric value appears as a string with possible E-power flag. In edit mode the "E" or "e" character can be entered as well.
 * Notes: The "+" character is not supported in edit mode.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
 * 
 * /Set the ability of the editor to automatically set value in the editor to the opposite side of the limit, when the spin action reaches minimum or maximum limit.
 * 
 * 
 * \@optionValue New value to be set.
 * Removed from numeric editor options
 * Removed from numeric editor options
 * 
 * \@optionValue New value to be set.
 * Removed from numeric editor options
 * Removed from numeric editor options
 * 
 * \@optionValue New value to be set.
 * Removed from numeric editor options
 * Removed from numeric editor options
 * 
 * \@optionValue New value to be set.
 * Removed from numeric editor options
 * Removed from numeric editor options
 * 
 * \@optionValue New value to be set.
 * Removed from numeric editor options
 * Removed from numeric editor options
 * 
 * \@optionValue New value to be set.
 *
 *
 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
 * 
 * 
 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
 * 
 * 
 * Visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.Note! This option can not be set runtime.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
 * 
 * /Sets custom width of the drop-down list in pixels. If the value is equal to 0 or negative, then the width of editor is set as a drop-down width.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the hover/unhover animation duration of a drop-down list item.
 * 
 * /Sets the hover/unhover animation duration of a drop-down list item.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets wheather the drop-down list element is attached to the body of the document, or to the editor container element.
 * If the option is set to false the editor will attach the drop-down list element to the editor container
 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
 * Note! This option can not be set runtime.
 * 
 * Wheather the drop-down list element is attached to the body of the document, or to the editor container element.
 * If the option is set to false the editor will attach the drop-down list element to the editor container
 * If the option is set to true the editor will attach its drop-down list to as a child of the body.
 * Note! This option can not be set runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets show/hide drop-down list animation duration in milliseconds.
 * 
 * /Sets show/hide drop-down list animation duration in milliseconds.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the number of the items to be shown at once when the drop-down list get opened.
 * Notes:
 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
 * This option can not be set runtime.
 * 
 * The number of the items to be shown at once when the drop-down list get opened.
 * Notes:
 * This option is overwritten if the number of list items is less than the set value. In that case the drop-down list displays all the items.
 * This option can not be set runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
 * 
 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
 * 
 * /Sets the action when the editor gets focused. The default value is selectAll.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets if the editor should only allow values set into the list of items. This validation is done only when the editor is blured, or enter key is pressed
 * 
 * /Sets if the editor should only allow values set into the list of items. This validation is done only when the editor is blured, or enter key is pressed
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
 * 
 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
 * 
 * /Sets if the editor should prevent form submition when enter key is pressed.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
 * 
 * /Sets the drop-down list opening orientation when the list gets open. If the option is set to auto the editor has priority to open the drop-down list bottom. If the space is not enough it tries to open the list top. If the space is not enough in both directions then the list gets opened at the bottom of the editor.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
 * Note! In case there are no list items - the editor will reamin readonly
 * Note! This option can not be set runtime.
 * 
 * The ability to limit the editor to be used only as a dropdown list. When set to true the editor input is not editable.
 * Note! In case there are no list items - the editor will reamin readonly
 * Note! This option can not be set runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the strings used for the localization of the component. This includes button titles, error messages etc. Value of the object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
 * 
 * /Sets the strings used for the localization of the component. This includes button titles, error messages etc. Value of the object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
 * 
 * 
 * \@optionValue New value to be set.
 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
 * 
 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the width of the control.
 * 
 * /Sets the width of the control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the height of the control.
 * 
 * /Sets the height of the control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets tabIndex attribute for the editor input.
 * 
 * /Sets tabIndex attribute for the editor input.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
 * 
 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
 * 
 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
 * 
 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
 * 
 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
 * 
 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
 * 
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgPercentEditor} methodName_or_optionLiteral_or_options
 * @param {...string|!Object|number|!IgPercentEditor|?=} string_or_symbol_or_newValue_or_number_or_delta_or_optionName_or_options_or_methodParams
 * @return {void|string|number|!Array<?>|?|boolean|(string|number)|!JQuery}
 */
JQuery.prototype.igPercentEditor = function(methodName_or_optionLiteral_or_options, string_or_symbol_or_newValue_or_number_or_delta_or_optionName_or_options_or_methodParams) {};

/**
 * Gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
 * 
 * Custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets visibility of the clear button. That option can be set only on initialization.
 * 
 * clear  A button to clear the value is located on the right side of the editor.
 * Visibility of the clear button. That option can be set only on initialization.
 * 
 * clear  A button to clear the value is located on the right side of the editor.
 * 
 * \@optionValue New value to be set.
 * Gets input mask. Mask may include filter-flags and literal characters.
 * Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape "\\" character should be used.
 * Default is "CCCCCCCCCC"
 * Note: optional flags/entries affect the value returned by get of the [value](ui.igmaskeditor#methods:value) methods.
 * List of filter-flags:
 * C: any keyboard character. Entry is optional.
 * &: any keyboard character. Entry is required.
 * a: letter or digit character. Entry is optional.
 * A: letter or digit character. Entry is required.
 * ?: letter character. Entry is optional.
 * L: letter character. Entry is required.
 * 9: digit character. Entry is optional.
 * 0: digit character. Entry is required.
 * #: digit character or "+" or "_". Entry is optional with replacement by [emptyChar](ui.igmaskeditor#options:emptyChar) or by [padChar](ui.igmaskeditor#options:padChar).
 * >: all letters to the right are converted to the upper case. In order to disable conversion, the ">" flag should be used again.
 * <: all letters to the right are converted to the lower case. In order to disable conversion, the "<" flag should be used again.
 * Note! This option can not be set runtime.
 * 
 * Input mask. Mask may include filter-flags and literal characters.
 * Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape "\\" character should be used.
 * Default is "CCCCCCCCCC"
 * Note: optional flags/entries affect the value returned by get of the [value](ui.igmaskeditor#methods:value) methods.
 * List of filter-flags:
 * C: any keyboard character. Entry is optional.
 * &: any keyboard character. Entry is required.
 * a: letter or digit character. Entry is optional.
 * A: letter or digit character. Entry is required.
 * ?: letter character. Entry is optional.
 * L: letter character. Entry is required.
 * 9: digit character. Entry is optional.
 * 0: digit character. Entry is required.
 * #: digit character or "+" or "_". Entry is optional with replacement by [emptyChar](ui.igmaskeditor#options:emptyChar) or by [padChar](ui.igmaskeditor#options:padChar).
 * >: all letters to the right are converted to the upper case. In order to disable conversion, the ">" flag should be used again.
 * <: all letters to the right are converted to the lower case. In order to disable conversion, the "<" flag should be used again.
 * Note! This option can not be set runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets type of value returned by the get of [value](ui.igmaskeditor#methods:value) method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
 * 
 * /Sets type of value returned by the get of [value](ui.igmaskeditor#methods:value) method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets character which is used as prompt in edit mode for available entry position.
 * 
 * Character which is used as prompt in edit mode for available entry position.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused). Note that this option is visible, only when the [revertIfNotValid](ui.igmaskeditor#options:revertIfNotValid) option is set to false.
 * 
 * /Sets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused). Note that this option is visible, only when the [revertIfNotValid](ui.igmaskeditor#options:revertIfNotValid) option is set to false.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets character which is used as replacement of not-filled required position in mask when application calls get for the [value](ui.igmaskeditor#methods:value) methods.
 * 
 * /Sets character which is used as replacement of not-filled required position in mask when application calls get for the [value](ui.igmaskeditor#methods:value) methods.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets ability to enter only specific characters in input-field from keyboard and on paste.
 * Notes:
 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
 * Note! This option can not be se runtime.
 * 
 * Ability to enter only specific characters in input-field from keyboard and on paste.
 * Notes:
 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
 * Note! This option can not be se runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets ability to prevent entering specific characters from keyboard or on paste.
 * Notes:
 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
 * Note! This option can not be se runtime.
 * 
 * Ability to prevent entering specific characters from keyboard or on paste.
 * Notes:
 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
 * Note! This option can not be se runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
 * /Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
 * 
 * \@optionValue New value to be set.
 * Sets gets list of items which are used for drop-down list.
 * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
 * Sets gets list of items which are used for drop-down list.
 * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
 * 
 * \@optionValue New value to be set.
 * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
 * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
 * 
 * \@optionValue New value to be set.
 * Sets the hover/unhover animation duration.
 * Sets the hover/unhover animation duration.
 * 
 * \@optionValue New value to be set.
 * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
 * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
 * 
 * \@optionValue New value to be set.
 *
 *
 * Gets/Sets how many items should be shown at once.
 * Notes:
 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
 * Note! This option can not be set runtime.
 * /Sets how many items should be shown at once.
 * Notes:
 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
 * Note! This option can not be set runtime.
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
 * 
 * \@optionValue New value to be set.
 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
 * 
 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the horizontal alignment of the text in the editor.
 * 
 * /Sets the horizontal alignment of the text in the editor.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
 * 
 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
 * 
 * /Sets the action when the editor gets focused. The default value is selectAll.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
 * 
 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
 * 
 * /Sets if the editor should prevent form submition when enter key is pressed.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the ability to convert the input characters to upper case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
 * Note! When the option is set at runtime the editor is not changing the current value.
 * 
 * /Sets the ability to convert the input characters to upper case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
 * Note! When the option is set at runtime the editor is not changing the current value.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the ability to convert the input characters to lower case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
 * Note! When the option is set at runtime the editor is not changing the current value.
 * 
 * /Sets the ability to convert the input characters to lower case (true) or keeps the characters as they are (false). The option has effect only while keyboard entries and paste.
 * Note! When the option is set at runtime the editor is not changing the current value.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the strings used for the localization of the component. This includes button titles, error messages etc. Value of the object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
 * 
 * /Sets the strings used for the localization of the component. This includes button titles, error messages etc. Value of the object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
 * 
 * 
 * \@optionValue New value to be set.
 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
 * 
 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the width of the control.
 * 
 * /Sets the width of the control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the height of the control.
 * 
 * /Sets the height of the control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets tabIndex attribute for the editor input.
 * 
 * /Sets tabIndex attribute for the editor input.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the editor value can become null.
 * If that option is false, and editor has no value, then value is set to an empty string.
 * 
 * /Sets whether the editor value can become null.
 * If that option is false, and editor has no value, then value is set to an empty string.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
 * 
 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
 * 
 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
 * 
 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
 * 
 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
 * 
 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
 * 
 * 
 * \@optionValue New value to be set.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 * Event which is raised after text in the editor was changed. It can be raised when keyUp event occurs,
 * when the clear button is clicked or when an item from a list is selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.text to obtain new text
 * Use ui.oldText to obtain the old text.
 * Event which is raised after text in the editor was changed. It can be raised when keyUp event occurs,
 * when the clear button is clicked or when an item from a list is selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.text to obtain new text
 * Use ui.oldText to obtain the old text.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgMaskEditor} methodName_or_optionLiteral_or_options
 * @param {...string|number|!IgMaskEditor|?=} newValue_or_string_or_start_or_optionName_or_options_or_methodParams
 * @return {string|void|boolean|number|?|!Array<?>|(string|number)|!DropDownListOpeningEvent|!DropDownListOpenedEvent|!DropDownListClosingEvent|!DropDownListClosedEvent|!DropDownItemSelectingEvent|!DropDownItemSelectedEvent|!TextChangedEvent|!JQuery}
 */
JQuery.prototype.igMaskEditor = function(methodName_or_optionLiteral_or_options, newValue_or_string_or_start_or_optionName_or_options_or_methodParams) {};

/**
 * Gets/Sets the value of the editor. Date object can be set as value. String can be set and the editor will pass it to the Date object constructor and use the corresponding Date object as the value. MVC date format can be used too.
 * Note! This option doesn't use the displayInputFormat to extract the date.
 * 
 * /Sets the value of the editor. Date object can be set as value. String can be set and the editor will pass it to the Date object constructor and use the corresponding Date object as the value. MVC date format can be used too.
 * Note! This option doesn't use the displayInputFormat to extract the date.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
 * Note! This option doesn't use the displayInputFormat to extract the date.
 * 
 * The minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
 * Note! This option doesn't use the displayInputFormat to extract the date.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
 * Note! This option doesn't use the displayInputFormat to extract the date.
 * 
 * The maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
 * Note! This option doesn't use the displayInputFormat to extract the date.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets format of date while editor has no focus.
 * Value of that option can be set to a specific date pattern or to a flag defined by regional settings.
 * If value is not set, then the dateInputFormat is used automatically.
 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
 * List of predefined regional flags:
 * "date": the datePattern member of regional option is used
 * "dateLong": the dateLongPattern member of regional option is used
 * "time": the timePattern member of regional option is used
 * "timeLong": the timeLongPattern member of regional option is used
 * "dateTime": the dateTimePattern member of regional option is used
 * List of explicit characters, which should have escape \\ character in front of them:
 * C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
 * List of date-flags when explicit date pattern is used:
 * "y": year field without century and without leading zero
 * "yy": year field without century and with leading zero
 * "yyyy": year field with leading zeros
 * "M": month field as digit without leading zero
 * "MM": month field as digit with leading zero
 * "MMM": month field as short month name
 * "MMMM": month field as long month name
 * "d": day of month field without leading zero
 * "dd": day of month field with leading zero
 * "ddd": day of the week as short name
 * "dddd": day of the week as long name
 * "t": first character of string which represents AM/PM field
 * "tt": 2 characters of string which represents AM/PM field
 * "h": hours field in 12-hours format without leading zero
 * "hh": hours field in 12-hours format with leading zero
 * "H": hours field in 24-hours format without leading zero
 * "HH": hours field in 24-hours format with leading zero
 * "m": minutes field without leading zero
 * "mm": minutes field with leading zero
 * "s": seconds field without leading zero
 * "ss": seconds field with leading zero
 * "f": milliseconds field in hundreds
 * "ff": milliseconds field in tenths
 * "fff": milliseconds field
 * 
 * /Sets format of date while editor has no focus.
 * Value of that option can be set to a specific date pattern or to a flag defined by regional settings.
 * If value is not set, then the dateInputFormat is used automatically.
 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
 * List of predefined regional flags:
 * "date": the datePattern member of regional option is used
 * "dateLong": the dateLongPattern member of regional option is used
 * "time": the timePattern member of regional option is used
 * "timeLong": the timeLongPattern member of regional option is used
 * "dateTime": the dateTimePattern member of regional option is used
 * List of explicit characters, which should have escape \\ character in front of them:
 * C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
 * List of date-flags when explicit date pattern is used:
 * "y": year field without century and without leading zero
 * "yy": year field without century and with leading zero
 * "yyyy": year field with leading zeros
 * "M": month field as digit without leading zero
 * "MM": month field as digit with leading zero
 * "MMM": month field as short month name
 * "MMMM": month field as long month name
 * "d": day of month field without leading zero
 * "dd": day of month field with leading zero
 * "ddd": day of the week as short name
 * "dddd": day of the week as long name
 * "t": first character of string which represents AM/PM field
 * "tt": 2 characters of string which represents AM/PM field
 * "h": hours field in 12-hours format without leading zero
 * "hh": hours field in 12-hours format with leading zero
 * "H": hours field in 24-hours format without leading zero
 * "HH": hours field in 24-hours format with leading zero
 * "m": minutes field without leading zero
 * "mm": minutes field with leading zero
 * "s": seconds field without leading zero
 * "ss": seconds field with leading zero
 * "f": milliseconds field in hundreds
 * "ff": milliseconds field in tenths
 * "fff": milliseconds field
 * 
 * 
 * \@optionValue New value to be set.
 * Gets format of date while editor has focus.
 * Value of that option can be set to explicit date pattern or to a flag defined by regional settings.
 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
 * If option is not set, then the "date" is used automatically.
 * List of predefined regional flags:
 * "date": the datePattern member of regional option is used
 * "dateLong": the dateLongPattern member of regional option is used
 * "time": the timePattern member of regional option is used
 * "timeLong": the timeLongPattern member of regional option is used
 * "dateTime": the dateTimePattern member of regional option is used
 * List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
 * List of date-flags when explicit date pattern is used:
 * "yy": year field without century and with leading zero
 * "yyyy": year field with leading zeros
 * "MM": month field as digit with leading zero
 * "dd": day of month field with leading zero
 * "t": first character of string which represents AM/PM field
 * "tt": 2 characters of string which represents AM/PM field
 * "hh": hours field in 12-hours format with leading zero
 * "HH": hours field in 24-hours format with leading zero
 * "mm": minutes field with leading zero
 * "ss": seconds field with leading zero
 * "f": milliseconds field in hundreds
 * "ff": milliseconds field in tenths
 * "fff": milliseconds field
 * Note! This option can not be set runtime.
 * 
 * Format of date while editor has focus.
 * Value of that option can be set to explicit date pattern or to a flag defined by regional settings.
 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
 * If option is not set, then the "date" is used automatically.
 * List of predefined regional flags:
 * "date": the datePattern member of regional option is used
 * "dateLong": the dateLongPattern member of regional option is used
 * "time": the timePattern member of regional option is used
 * "timeLong": the timeLongPattern member of regional option is used
 * "dateTime": the dateTimePattern member of regional option is used
 * List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
 * List of date-flags when explicit date pattern is used:
 * "yy": year field without century and with leading zero
 * "yyyy": year field with leading zeros
 * "MM": month field as digit with leading zero
 * "dd": day of month field with leading zero
 * "t": first character of string which represents AM/PM field
 * "tt": 2 characters of string which represents AM/PM field
 * "hh": hours field in 12-hours format with leading zero
 * "HH": hours field in 24-hours format with leading zero
 * "mm": minutes field with leading zero
 * "ss": seconds field with leading zero
 * "f": milliseconds field in hundreds
 * "ff": milliseconds field in tenths
 * "fff": milliseconds field
 * Note! This option can not be set runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the value type returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
 * Note: That is used as default.
 * 
 * /Sets the value type returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
 * Note: That is used as default.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets visibility of the spin and clear buttons. That option can be set only on initialization. Combinations like 'spin,clear' are supported too.
 * 
 * Visibility of the spin and clear buttons. That option can be set only on initialization. Combinations like 'spin,clear' are supported too.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets delta-value which is used to increment or decrement value in editor on spin events. If value is set to negative value an exception is thrown. Non integer value is supported only for dataMode double and float.
 * 
 * /Sets delta-value which is used to increment or decrement value in editor on spin events. If value is set to negative value an exception is thrown. Non integer value is supported only for dataMode double and float.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets ability to modify only 1 date field on spin events.
 * Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
 * Value true modifies only value of one field.
 * 
 * /Sets ability to modify only 1 date field on spin events.
 * Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
 * Value true modifies only value of one field.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets formatting of the dates as UTC.
 * That option is supported only when dataMode option is 'date' and Date objects are used to get/set value of editor.
 * Notes:
 * That option affects only functionality of get/set value method and the Date-value, which was set on initialization.
 * When application uses the set-value, then internal Date-value and displayed-text is incremented by TimezoneOffset.
 * When application uses the get-value, then editor returns internal Date-value decremented by TimezoneOffset.
 * When that option is modified after initialization, then displayed text and internal Date-value are not affected.
 * It is not recommended to change that option without resetting Date-value.
 * 
 * /Sets formatting of the dates as UTC.
 * That option is supported only when dataMode option is 'date' and Date objects are used to get/set value of editor.
 * Notes:
 * That option affects only functionality of get/set value method and the Date-value, which was set on initialization.
 * When application uses the set-value, then internal Date-value and displayed-text is incremented by TimezoneOffset.
 * When application uses the get-value, then editor returns internal Date-value decremented by TimezoneOffset.
 * When that option is modified after initialization, then displayed text and internal Date-value are not affected.
 * It is not recommended to change that option without resetting Date-value.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets year for auto detection of 20th and 21st centuries.
 * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
 * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
 * 
 * /Sets year for auto detection of 20th and 21st centuries.
 * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
 * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Set value used to increase/decrease year part of the date, in order to set difference between year in Gregorian calendar and displayed year.
 * 
 * /Set value used to increase/decrease year part of the date, in order to set difference between year in Gregorian calendar and displayed year.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
 * 
 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
 * 
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * 
 * \@optionValue New value to be set.
 * Gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
 * 
 * Custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets ability to enter only specific characters in input-field from keyboard and on paste.
 * Notes:
 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
 * Note! This option can not be se runtime.
 * 
 * Ability to enter only specific characters in input-field from keyboard and on paste.
 * Notes:
 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
 * Note! This option can not be se runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets ability to prevent entering specific characters from keyboard or on paste.
 * Notes:
 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
 * Note! This option can not be se runtime.
 * 
 * Ability to prevent entering specific characters from keyboard or on paste.
 * Notes:
 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
 * Note! This option can not be se runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
 * /Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
 * 
 * \@optionValue New value to be set.
 *
 *
 * Gets/Sets how many items should be shown at once.
 * Notes:
 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
 * Note! This option can not be set runtime.
 * /Sets how many items should be shown at once.
 * Notes:
 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
 * Note! This option can not be set runtime.
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the horizontal alignment of the text in the editor.
 * 
 * /Sets the horizontal alignment of the text in the editor.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
 * 
 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
 * 
 * /Sets the action when the editor gets focused. The default value is selectAll.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
 * 
 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
 * 
 * /Sets if the editor should prevent form submition when enter key is pressed.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the strings used for the localization of the component. This includes button titles, error messages etc. Value of the object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
 * 
 * /Sets the strings used for the localization of the component. This includes button titles, error messages etc. Value of the object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
 * 
 * 
 * \@optionValue New value to be set.
 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
 * 
 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the width of the control.
 * 
 * /Sets the width of the control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the height of the control.
 * 
 * /Sets the height of the control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets tabIndex attribute for the editor input.
 * 
 * /Sets tabIndex attribute for the editor input.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the editor value can become null.
 * If that option is false, and editor has no value, then value is set to an empty string.
 * 
 * /Sets whether the editor value can become null.
 * If that option is false, and editor has no value, then value is set to an empty string.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
 * 
 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
 * 
 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
 * 
 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
 * 
 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
 * 
 * 
 * \@optionValue New value to be set.
 * This event is inherited from a parent widget and it's not triggered in igDateEditor
 * This event is inherited from a parent widget and it's not triggered in igDateEditor
 * 
 * \@optionValue New value to be set.
 * This event is inherited from a parent widget and it's not triggered in igDateEditor
 * This event is inherited from a parent widget and it's not triggered in igDateEditor
 * 
 * \@optionValue New value to be set.
 * This event is inherited from a parent widget and it's not triggered in igDateEditor
 * This event is inherited from a parent widget and it's not triggered in igDateEditor
 * 
 * \@optionValue New value to be set.
 * This event is inherited from a parent widget and it's not triggered in igDateEditor
 * This event is inherited from a parent widget and it's not triggered in igDateEditor
 * 
 * \@optionValue New value to be set.
 * This event is inherited from a parent widget and it's not triggered in igDateEditor
 * This event is inherited from a parent widget and it's not triggered in igDateEditor
 * 
 * \@optionValue New value to be set.
 * This event is inherited from a parent widget and it's not triggered in igDateEditor
 * This event is inherited from a parent widget and it's not triggered in igDateEditor
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgDateEditor} methodName_or_optionLiteral_or_options
 * @param {...!Object|number|string|!IgDateEditor|?=} newValue_or_date_or_delta_or_optionName_or_options_or_methodParams
 * @return {!Object|void|string|boolean|number|(string|number)|?|!DropDownListOpeningEvent|!DropDownListOpenedEvent|!DropDownListClosingEvent|!DropDownListClosedEvent|!DropDownItemSelectingEvent|!DropDownItemSelectedEvent|!JQuery}
 */
JQuery.prototype.igDateEditor = function(methodName_or_optionLiteral_or_options, newValue_or_date_or_delta_or_optionName_or_options_or_methodParams) {};

/**
 * Gets/Sets the custom regional settings for the editor. If it is a string, then $.ig.regional[stringValue] is assumed.
 * 
 * /Sets the custom regional settings for the editor. If it is a string, then $.ig.regional[stringValue] is assumed.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.
 * 
 * Visibility of the spin, clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spin,clear' are supported too.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the options supported by the [jquery.ui.datepicker](http://api.jqueryui.com/datepicker/). Only options related to the drop-down calendar are supported.
 * 
 * /Sets the options supported by the [jquery.ui.datepicker](http://api.jqueryui.com/datepicker/). Only options related to the drop-down calendar are supported.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the ability to limit igDatePicker to be used only as s calendar. When set to true the editor input is not editable.
 * Note! This option can not be set runtime.
 * 
 * The ability to limit igDatePicker to be used only as s calendar. When set to true the editor input is not editable.
 * Note! This option can not be set runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDatePicker
 * This option is inherited from a parent widget and it's not applicable for igDatePicker
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDatePicker
 * This option is inherited from a parent widget and it's not applicable for igDatePicker
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDatePicker
 * This option is inherited from a parent widget and it's not applicable for igDatePicker
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDatePicker
 * This option is inherited from a parent widget and it's not applicable for igDatePicker
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDatePicker
 * This option is inherited from a parent widget and it's not applicable for igDatePicker
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the value of the editor. Date object can be set as value. String can be set and the editor will pass it to the Date object constructor and use the corresponding Date object as the value. MVC date format can be used too.
 * Note! This option doesn't use the displayInputFormat to extract the date.
 * 
 * /Sets the value of the editor. Date object can be set as value. String can be set and the editor will pass it to the Date object constructor and use the corresponding Date object as the value. MVC date format can be used too.
 * Note! This option doesn't use the displayInputFormat to extract the date.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
 * Note! This option doesn't use the displayInputFormat to extract the date.
 * 
 * The minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
 * Note! This option doesn't use the displayInputFormat to extract the date.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
 * Note! This option doesn't use the displayInputFormat to extract the date.
 * 
 * The maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too.
 * Note! This option doesn't use the displayInputFormat to extract the date.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets format of date while editor has no focus.
 * Value of that option can be set to a specific date pattern or to a flag defined by regional settings.
 * If value is not set, then the dateInputFormat is used automatically.
 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
 * List of predefined regional flags:
 * "date": the datePattern member of regional option is used
 * "dateLong": the dateLongPattern member of regional option is used
 * "time": the timePattern member of regional option is used
 * "timeLong": the timeLongPattern member of regional option is used
 * "dateTime": the dateTimePattern member of regional option is used
 * List of explicit characters, which should have escape \\ character in front of them:
 * C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
 * List of date-flags when explicit date pattern is used:
 * "y": year field without century and without leading zero
 * "yy": year field without century and with leading zero
 * "yyyy": year field with leading zeros
 * "M": month field as digit without leading zero
 * "MM": month field as digit with leading zero
 * "MMM": month field as short month name
 * "MMMM": month field as long month name
 * "d": day of month field without leading zero
 * "dd": day of month field with leading zero
 * "ddd": day of the week as short name
 * "dddd": day of the week as long name
 * "t": first character of string which represents AM/PM field
 * "tt": 2 characters of string which represents AM/PM field
 * "h": hours field in 12-hours format without leading zero
 * "hh": hours field in 12-hours format with leading zero
 * "H": hours field in 24-hours format without leading zero
 * "HH": hours field in 24-hours format with leading zero
 * "m": minutes field without leading zero
 * "mm": minutes field with leading zero
 * "s": seconds field without leading zero
 * "ss": seconds field with leading zero
 * "f": milliseconds field in hundreds
 * "ff": milliseconds field in tenths
 * "fff": milliseconds field
 * 
 * /Sets format of date while editor has no focus.
 * Value of that option can be set to a specific date pattern or to a flag defined by regional settings.
 * If value is not set, then the dateInputFormat is used automatically.
 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
 * List of predefined regional flags:
 * "date": the datePattern member of regional option is used
 * "dateLong": the dateLongPattern member of regional option is used
 * "time": the timePattern member of regional option is used
 * "timeLong": the timeLongPattern member of regional option is used
 * "dateTime": the dateTimePattern member of regional option is used
 * List of explicit characters, which should have escape \\ character in front of them:
 * C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
 * List of date-flags when explicit date pattern is used:
 * "y": year field without century and without leading zero
 * "yy": year field without century and with leading zero
 * "yyyy": year field with leading zeros
 * "M": month field as digit without leading zero
 * "MM": month field as digit with leading zero
 * "MMM": month field as short month name
 * "MMMM": month field as long month name
 * "d": day of month field without leading zero
 * "dd": day of month field with leading zero
 * "ddd": day of the week as short name
 * "dddd": day of the week as long name
 * "t": first character of string which represents AM/PM field
 * "tt": 2 characters of string which represents AM/PM field
 * "h": hours field in 12-hours format without leading zero
 * "hh": hours field in 12-hours format with leading zero
 * "H": hours field in 24-hours format without leading zero
 * "HH": hours field in 24-hours format with leading zero
 * "m": minutes field without leading zero
 * "mm": minutes field with leading zero
 * "s": seconds field without leading zero
 * "ss": seconds field with leading zero
 * "f": milliseconds field in hundreds
 * "ff": milliseconds field in tenths
 * "fff": milliseconds field
 * 
 * 
 * \@optionValue New value to be set.
 * Gets format of date while editor has focus.
 * Value of that option can be set to explicit date pattern or to a flag defined by regional settings.
 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
 * If option is not set, then the "date" is used automatically.
 * List of predefined regional flags:
 * "date": the datePattern member of regional option is used
 * "dateLong": the dateLongPattern member of regional option is used
 * "time": the timePattern member of regional option is used
 * "timeLong": the timeLongPattern member of regional option is used
 * "dateTime": the dateTimePattern member of regional option is used
 * List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
 * List of date-flags when explicit date pattern is used:
 * "yy": year field without century and with leading zero
 * "yyyy": year field with leading zeros
 * "MM": month field as digit with leading zero
 * "dd": day of month field with leading zero
 * "t": first character of string which represents AM/PM field
 * "tt": 2 characters of string which represents AM/PM field
 * "hh": hours field in 12-hours format with leading zero
 * "HH": hours field in 24-hours format with leading zero
 * "mm": minutes field with leading zero
 * "ss": seconds field with leading zero
 * "f": milliseconds field in hundreds
 * "ff": milliseconds field in tenths
 * "fff": milliseconds field
 * Note! This option can not be set runtime.
 * 
 * Format of date while editor has focus.
 * Value of that option can be set to explicit date pattern or to a flag defined by regional settings.
 * If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
 * If option is not set, then the "date" is used automatically.
 * List of predefined regional flags:
 * "date": the datePattern member of regional option is used
 * "dateLong": the dateLongPattern member of regional option is used
 * "time": the timePattern member of regional option is used
 * "timeLong": the timeLongPattern member of regional option is used
 * "dateTime": the dateTimePattern member of regional option is used
 * List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
 * List of date-flags when explicit date pattern is used:
 * "yy": year field without century and with leading zero
 * "yyyy": year field with leading zeros
 * "MM": month field as digit with leading zero
 * "dd": day of month field with leading zero
 * "t": first character of string which represents AM/PM field
 * "tt": 2 characters of string which represents AM/PM field
 * "hh": hours field in 12-hours format with leading zero
 * "HH": hours field in 24-hours format with leading zero
 * "mm": minutes field with leading zero
 * "ss": seconds field with leading zero
 * "f": milliseconds field in hundreds
 * "ff": milliseconds field in tenths
 * "fff": milliseconds field
 * Note! This option can not be set runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the value type returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
 * Note: That is used as default.
 * 
 * /Sets the value type returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
 * Note: That is used as default.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets delta-value which is used to increment or decrement value in editor on spin events. If value is set to negative value an exception is thrown. Non integer value is supported only for dataMode double and float.
 * 
 * /Sets delta-value which is used to increment or decrement value in editor on spin events. If value is set to negative value an exception is thrown. Non integer value is supported only for dataMode double and float.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets ability to modify only 1 date field on spin events.
 * Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
 * Value true modifies only value of one field.
 * 
 * /Sets ability to modify only 1 date field on spin events.
 * Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
 * Value true modifies only value of one field.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets formatting of the dates as UTC.
 * That option is supported only when dataMode option is 'date' and Date objects are used to get/set value of editor.
 * Notes:
 * That option affects only functionality of get/set value method and the Date-value, which was set on initialization.
 * When application uses the set-value, then internal Date-value and displayed-text is incremented by TimezoneOffset.
 * When application uses the get-value, then editor returns internal Date-value decremented by TimezoneOffset.
 * When that option is modified after initialization, then displayed text and internal Date-value are not affected.
 * It is not recommended to change that option without resetting Date-value.
 * 
 * /Sets formatting of the dates as UTC.
 * That option is supported only when dataMode option is 'date' and Date objects are used to get/set value of editor.
 * Notes:
 * That option affects only functionality of get/set value method and the Date-value, which was set on initialization.
 * When application uses the set-value, then internal Date-value and displayed-text is incremented by TimezoneOffset.
 * When application uses the get-value, then editor returns internal Date-value decremented by TimezoneOffset.
 * When that option is modified after initialization, then displayed text and internal Date-value are not affected.
 * It is not recommended to change that option without resetting Date-value.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets year for auto detection of 20th and 21st centuries.
 * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
 * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
 * 
 * /Sets year for auto detection of 20th and 21st centuries.
 * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
 * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Set value used to increase/decrease year part of the date, in order to set difference between year in Gregorian calendar and displayed year.
 * 
 * /Set value used to increase/decrease year part of the date, in order to set difference between year in Gregorian calendar and displayed year.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
 * 
 * /Sets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
 * 
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * This option is inherited from a parent widget and it's not applicable for igDateEditor
 * 
 * \@optionValue New value to be set.
 * Gets ability to enter only specific characters in input-field from keyboard and on paste.
 * Notes:
 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
 * Note! This option can not be se runtime.
 * 
 * Ability to enter only specific characters in input-field from keyboard and on paste.
 * Notes:
 * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
 * Note! This option can not be se runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets ability to prevent entering specific characters from keyboard or on paste.
 * Notes:
 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
 * Note! This option can not be se runtime.
 * 
 * Ability to prevent entering specific characters from keyboard or on paste.
 * Notes:
 * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
 * Note! This option can not be se runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
 * /Sets the ability of the editor to automatically change the hoverd item into the opened dropdown list to its oposide side.
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
 * 
 * \@optionValue New value to be set.
 *
 *
 * Gets/Sets how many items should be shown at once.
 * Notes:
 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
 * Note! This option can not be set runtime.
 * /Sets how many items should be shown at once.
 * Notes:
 * That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
 * Note! This option can not be set runtime.
 * 
 * \@optionValue New value to be set.
 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
 * This option is inherited from a parent widget and it's not applicable for igMaskEditor
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the horizontal alignment of the text in the editor.
 * 
 * /Sets the horizontal alignment of the text in the editor.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
 * 
 * /Sets the text which appears in the editor when it has no focus and the "value" is null or empty string.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the action when the editor gets focused. The default value is selectAll.
 * 
 * /Sets the action when the editor gets focused. The default value is selectAll.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
 * 
 * /Sets if the editor should revert it's value to the previously valid value in case the value on blur, or enter key is not valid. If the opiton is set to false, editor calls clear functionality.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets if the editor should prevent form submition when enter key is pressed.
 * 
 * /Sets if the editor should prevent form submition when enter key is pressed.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the strings used for the localization of the component. This includes button titles, error messages etc. Value of the object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
 * 
 * /Sets the strings used for the localization of the component. This includes button titles, error messages etc. Value of the object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
 * 
 * 
 * \@optionValue New value to be set.
 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
 * 
 * Disables/Enables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the width of the control.
 * 
 * /Sets the width of the control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the height of the control.
 * 
 * /Sets the height of the control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets tabIndex attribute for the editor input.
 * 
 * /Sets tabIndex attribute for the editor input.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the editor value can become null.
 * If that option is false, and editor has no value, then value is set to an empty string.
 * 
 * /Sets whether the editor value can become null.
 * If that option is false, and editor has no value, then value is set to an empty string.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
 * 
 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
 * 
 * /Sets the readonly attribute for the input. If set to true the input is readonly, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is submitted.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
 * 
 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
 * 
 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
 * 
 * 
 * \@optionValue New value to be set.
 * Event which is raised when the drop down is opening.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.calendar to obtain a reference to jQuery UI date picker widget, used as a calendar from the igDatePicker.
 * Event which is raised when the drop down is opening.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.calendar to obtain a reference to jQuery UI date picker widget, used as a calendar from the igDatePicker.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after the drop down is opened.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.calendar to obtain a reference to jQuery UI date picker widget, used as a calendar from the igDatePicker.
 * Event which is raised after the drop down is opened.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.calendar to obtain a reference to jQuery UI date picker widget, used as a calendar from the igDatePicker.
 * 
 * \@optionValue Define event handler function.
 * This event is inherited from a parent widget and it's not triggered in igDatePicker
 * This event is inherited from a parent widget and it's not triggered in igDatePicker
 * 
 * \@optionValue New value to be set.
 * This event is inherited from a parent widget and it's not triggered in igDatePicker
 * This event is inherited from a parent widget and it's not triggered in igDatePicker
 * 
 * \@optionValue New value to be set.
 * Event which is raised after the drop down (calendar) is closed.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.calendar to obtain a reference to jQuery UI date picker widget, used as a calendar from the igDatePicker.
 * Event which is raised after the drop down (calendar) is closed.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.editorInput to obtain reference to the editable input
 * Use ui.calendar to obtain a reference to jQuery UI date picker widget, used as a calendar from the igDatePicker.
 * 
 * \@optionValue Define event handler function.
 * This event is inherited from a parent widget and it's not triggered in igDatePicker
 * This event is inherited from a parent widget and it's not triggered in igDatePicker
 * 
 * \@optionValue New value to be set.
 * Event which is raised after a date selection in the calendar.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.dateFromPicker to obtain reference to the date object which is selected.
 * Use ui.item to obtain a referece to the selected html element from the calendar.
 * Use ui.calendar to obtain a reference to jQuery UI date picker, used as a calendar from the igDatePicker.
 * Event which is raised after a date selection in the calendar.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.dateFromPicker to obtain reference to the date object which is selected.
 * Use ui.item to obtain a referece to the selected html element from the calendar.
 * Use ui.calendar to obtain a reference to jQuery UI date picker, used as a calendar from the igDatePicker.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgDatePicker} methodName_or_optionLiteral_or_options
 * @param {...!Object|number|string|!IgDatePicker|?=} newValue_or_date_or_delta_or_optionName_or_options_or_methodParams
 * @return {string|void|boolean|!Object|?|number|(string|number)|!DropDownListOpeningEvent|!DropDownListOpenedEvent|!DropDownListClosingEvent|!DropDownItemSelectingEvent|!DropDownListClosedEvent|!DropDownItemSelectedEvent|!ItemSelectedEvent|!JQuery}
 */
JQuery.prototype.igDatePicker = function(methodName_or_optionLiteral_or_options, newValue_or_date_or_delta_or_optionName_or_options_or_methodParams) {};

/**
 * Gets/Sets whether the checkbox is checked.
 * 
 * /Sets whether the checkbox is checked.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets size of the checkbox based on preset styles.For different sizes, define 'width' and 'height' options instead.
 * 
 * 
 * /Sets size of the checkbox based on preset styles.For different sizes, define 'width' and 'height' options instead.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets a custom class on the checkbox. Custom image can be used this way.
 * The following jQuery classes can be used in addition http://api.jqueryui.com/theming/icons/
 * 
 * /Sets a custom class on the checkbox. Custom image can be used this way.
 * The following jQuery classes can be used in addition http://api.jqueryui.com/theming/icons/
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets tabIndex attribute for the editor input.
 * 
 * /Sets tabIndex attribute for the editor input.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the readonly attribute. Does not allow editing. Disables changing the checkbox state as an interaction, but it still can be changed programmatically. On submit the current value is sent into the request.
 * 
 * /Sets the readonly attribute. Does not allow editing. Disables changing the checkbox state as an interaction, but it still can be changed programmatically. On submit the current value is sent into the request.
 * 
 * 
 * \@optionValue New value to be set.
 *
 *
 *
 *
 * Gets/Sets the width of the control.
 * 
 * /Sets the width of the control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the height of the control.
 * 
 * /Sets the height of the control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
 * 
 * /Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
 * 
 * /Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
 * 
 * /Sets the disabled attribute for the input. If set to true the input is disabled, and all buttons and interactions are disabled. On submitting the form the editor belongs to, the value is not submitted.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets options supported by the [igValidator](ui.igvalidator#options) widget.
 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
 * 
 * /Sets options supported by the [igValidator](ui.igvalidator#options) widget.
 * Note: Validation rules of [igValidator](ui.igvalidator#options), such as min and max value/length are applied separately triggering errors,
 * while the corresponding options of the editor prevent values violating the defined rules from being entered.
 * 
 * 
 * \@optionValue New value to be set.
 * Event which is raised before value in editor was changed.
 * Return false in order to cancel change.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.newValue to obtain the new value.
 * Use ui.newState to obtain the new state.
 * Use ui.oldValue to obtain the old value.
 * Use ui.oldState to obtain the old state.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput obtain reference to the editor element.
 * Event which is raised before value in editor was changed.
 * Return false in order to cancel change.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.newValue to obtain the new value.
 * Use ui.newState to obtain the new state.
 * Use ui.oldValue to obtain the old value.
 * Use ui.oldState to obtain the old state.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput obtain reference to the editor element.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after value in editor was changed.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.newValue to obtain the new value.
 * Use ui.newState to obtain the new state.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput obtain reference to the editor element.
 * Event which is raised after value in editor was changed.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.newValue to obtain the new value.
 * Use ui.newState to obtain the new state.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput obtain reference to the editor element.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before rendering of the editor completes.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to the editor performing rendering.
 * Use ui.element to get a reference to the editor element.
 * Event which is raised before rendering of the editor completes.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to the editor performing rendering.
 * Use ui.element to get a reference to the editor element.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after rendering of the editor completes.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to the editor performing rendering.
 * Use ui.element to get a reference to the editor element.
 * Event which is raised after rendering of the editor completes.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to the editor performing rendering.
 * Use ui.element to get a reference to the editor element.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on mousedown event.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised on mousedown event.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on mouseup event.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised on mouseup event.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on mousemove at any part of editor including drop-down list.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised on mousemove at any part of editor including drop-down list.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on mouseover at any part of editor including drop-down list.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised on mouseover at any part of editor including drop-down list.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on mouseleave at any part of editor including drop-down list.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised on mouseleave at any part of editor including drop-down list.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised when input field of editor loses focus.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised when input field of editor loses focus.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised when input field of editor gets focus.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * Event which is raised when input field of editor gets focus.
 * Function takes arguments evt and ui.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.element to obtain a reference to the event target.
 * Use ui.editorInput to get a reference to the editor field.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on keydown event.
 * Return false in order to cancel key action.
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.key to obtain value of keyCode.
 * Event which is raised on keydown event.
 * Return false in order to cancel key action.
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.key to obtain value of keyCode.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on keypress event.
 * Return false in order to cancel key action.
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.key to obtain value of keyCode.
 * Event which is raised on keypress event.
 * Return false in order to cancel key action.
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.key to obtain value of keyCode.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on keyup event.
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.key to obtain value of keyCode.
 * Event which is raised on keyup event.
 * Function takes arguments evt and ui.
 * Use evt.originalEvent to obtain reference to event of browser.
 * Use ui.owner to obtain reference to igEditor.
 * Use ui.key to obtain value of keyCode.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgCheckboxEditor} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|number|!IgCheckboxEditor|?=} newValue_or_delay_or_optionName_or_options_or_methodParams
 * @return {boolean|string|void|!Object|number|?|(string|number)|!ValueChangingEvent|!ValueChangedEvent|!RenderingEvent|!RenderedEvent|!MousedownEvent|!MouseupEvent|!MousemoveEvent|!MouseoverEvent|!MouseoutEvent|!BlurEvent|!FocusEvent|!KeydownEvent|!KeypressEvent|!KeyupEvent|!JQuery}
 */
JQuery.prototype.igCheckboxEditor = function(methodName_or_optionLiteral_or_options, newValue_or_delay_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function SliceClickedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SliceClickedEventUIParam() {}
 /** @type {?} */
SliceClickedEventUIParam.prototype.owner;
 /** @type {?} */
SliceClickedEventUIParam.prototype.index;
 /** @type {?} */
SliceClickedEventUIParam.prototype.item;
 /** @type {?} */
SliceClickedEventUIParam.prototype.selected;
/**
 * @record
 * @struct
 */
function IgFunnelChart() {}
 /** @type {string} */
IgFunnelChart.prototype.bezierPoints;
 /** @type {?} */
IgFunnelChart.prototype.legend;
 /** @type {string} */
IgFunnelChart.prototype.valueMemberPath;
 /** @type {?} */
IgFunnelChart.prototype.brushes;
 /** @type {?} */
IgFunnelChart.prototype.outlines;
 /** @type {number} */
IgFunnelChart.prototype.bottomEdgeWidth;
 /** @type {string} */
IgFunnelChart.prototype.innerLabelMemberPath;
 /** @type {string} */
IgFunnelChart.prototype.outerLabelMemberPath;
 /** @type {string} */
IgFunnelChart.prototype.innerLabelVisibility;
 /** @type {string} */
IgFunnelChart.prototype.outerLabelVisibility;
 /** @type {string} */
IgFunnelChart.prototype.outerLabelAlignment;
 /** @type {string} */
IgFunnelChart.prototype.funnelSliceDisplay;
 /** @type {?} */
IgFunnelChart.prototype.formatInnerLabel;
 /** @type {?} */
IgFunnelChart.prototype.formatOuterLabel;
 /** @type {number} */
IgFunnelChart.prototype.transitionDuration;
 /** @type {boolean} */
IgFunnelChart.prototype.isInverted;
 /** @type {boolean} */
IgFunnelChart.prototype.useBezierCurve;
 /** @type {boolean} */
IgFunnelChart.prototype.allowSliceSelection;
 /** @type {boolean} */
IgFunnelChart.prototype.useUnselectedStyle;
 /** @type {?} */
IgFunnelChart.prototype.selectedSliceStyle;
 /** @type {?} */
IgFunnelChart.prototype.unselectedSliceStyle;
 /** @type {?} */
IgFunnelChart.prototype.legendItemBadgeTemplate;
 /** @type {boolean} */
IgFunnelChart.prototype.useOuterLabelsForLegend;
 /** @type {string} */
IgFunnelChart.prototype.textStyle;
 /** @type {string} */
IgFunnelChart.prototype.outerLabelTextStyle;
 /** @type {number} */
IgFunnelChart.prototype.outlineThickness;
 /** @type {number} */
IgFunnelChart.prototype.pixelScalingRatio;
 /** @type {?} */
IgFunnelChart.prototype.outerLabelTextColor;
 /** @type {?} */
IgFunnelChart.prototype.textColor;
 /** @type {number} */
IgFunnelChart.prototype.width;
 /** @type {number} */
IgFunnelChart.prototype.height;
 /** @type {string} */
IgFunnelChart.prototype.tooltipTemplate;
 /** @type {number} */
IgFunnelChart.prototype.maxRecCount;
 /** @type {?} */
IgFunnelChart.prototype.dataSource;
 /** @type {string} */
IgFunnelChart.prototype.dataSourceType;
 /** @type {string} */
IgFunnelChart.prototype.dataSourceUrl;
 /** @type {string} */
IgFunnelChart.prototype.responseTotalRecCountKey;
 /** @type {string} */
IgFunnelChart.prototype.responseDataKey;
 /** @type {!SliceClickedEvent} */
IgFunnelChart.prototype.sliceClicked;
 /** @type {!DataBindingEvent} */
IgFunnelChart.prototype.dataBinding;
 /** @type {!DataBoundEvent} */
IgFunnelChart.prototype.dataBound;
 /** @type {!UpdateTooltipEvent} */
IgFunnelChart.prototype.updateTooltip;
 /** @type {!HideTooltipEvent} */
IgFunnelChart.prototype.hideTooltip;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgFunnelChartMethods() {}

/**
 * Gets array of selected slice items.
 * 
 * @param {!Array<?>=} selection     Array or selected slice items.
 * @return {!Array<?>} array|object     If parameter is undefined, then array of selected items is returned. Otherwise, it returns reference to igFunnelChart.
 */
IgFunnelChartMethods.prototype.selectedSliceItems = function(selection) {};

/**
 * Gets sets array of indexes of selected slices.
 * 
 * @param {!Array<?>=} selection     Array or selected slice indexes.
 * @return {!Array<?>} array|object     If parameter is undefined, then array of selected indexes is returned. Otherwise, it returns reference to igFunnelChart.
 */
IgFunnelChartMethods.prototype.selectedSliceIndexes = function(selection) {};

/**
 * Checks if slice is selected.
 * 
 * @param {!Object} slice     Index of slice or reference to slice-data-item.
 * @return {boolean}
 */
IgFunnelChartMethods.prototype.isSelected = function(slice) {};

/**
 * Toggles selected state of slice.
 * 
 * @param {!Object} slice     Index of slice or reference to slice-data-item.
 * @return {!Object}
 */
IgFunnelChartMethods.prototype.toggleSelection = function(slice) {};

/**
 * @return {void}
 */
IgFunnelChartMethods.prototype.exportVisualData = function() {};

/**
 * Destroys widget.
 * @return {void}
 */
IgFunnelChartMethods.prototype.destroy = function() {};

/**
 * Find index of item within actual data used by chart.
 * 
 * @param {!Object} item     The reference to item.
 * @return {number}
 */
IgFunnelChartMethods.prototype.findIndexOfItem = function(item) {};

/**
 * Get item within actual data used by chart. That is similar to this.getData()[ index ].
 * 
 * @param {!Object} index     Index of data item.
 * @return {!Object}
 */
IgFunnelChartMethods.prototype.getDataItem = function(index) {};

/**
 * Get reference of actual data used by chart.
 * @return {!Array<?>}
 */
IgFunnelChartMethods.prototype.getData = function() {};

/**
 * Adds a new item to the data source and notifies the chart.
 * 
 * @param {!Object} item     The item that we want to add to the data source.
 * @return {!Object}
 */
IgFunnelChartMethods.prototype.addItem = function(item) {};

/**
 * Inserts a new item to the data source and notifies the chart.
 * 
 * @param {!Object} item     the new item that we want to insert in the data source.
 * @param {number} index     The index in the data source where the new item will be inserted.
 * @return {!Object}
 */
IgFunnelChartMethods.prototype.insertItem = function(item, index) {};

/**
 * Deletes an item from the data source and notifies the chart.
 * 
 * @param {number} index     The index in the data source from where the item will be been removed.
 * @return {!Object}
 */
IgFunnelChartMethods.prototype.removeItem = function(index) {};

/**
 * Updates an item in the data source and notifies the chart.
 * 
 * @param {number} index     The index of the item in the data source that we want to change.
 * @param {!Object} item     The new item object that will be set in the data source.
 * @return {!Object}
 */
IgFunnelChartMethods.prototype.setItem = function(index, item) {};

/**
 * Notifies the chart that an item has been set in an associated data source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @param {number} index     The index in the items source that has been changed.
 * @param {!Object} newItem     the new item that has been set in the collection.
 * @param {!Object} oldItem     the old item that has been overwritten in the collection.
 * @return {!Object}
 */
IgFunnelChartMethods.prototype.notifySetItem = function(dataSource, index, newItem, oldItem) {};

/**
 * Notifies the chart that the items have been cleared from an associated data source.
 * It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @return {!Object}
 */
IgFunnelChartMethods.prototype.notifyClearItems = function(dataSource) {};

/**
 * Notifies the target axis or series that an item has been inserted at the specified index in its data source.
 * It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @param {number} index     The index in the items source where the new item has been inserted.
 * @param {!Object} newItem     the new item that has been set in the collection.
 * @return {!Object}
 */
IgFunnelChartMethods.prototype.notifyInsertItem = function(dataSource, index, newItem) {};

/**
 * Notifies the target axis or series that an item has been removed from the specified index in its data source.
 * It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @param {number} index     The index in the items source from where the old item has been removed.
 * @param {!Object} oldItem     the old item that has been removed from the collection.
 * @return {!Object}
 */
IgFunnelChartMethods.prototype.notifyRemoveItem = function(dataSource, index, oldItem) {};

/**
 * Get reference to chart object.
 * @return {!Object}
 */
IgFunnelChartMethods.prototype.chart = function() {};

/**
 * Binds data to the chart
 * @return {void}
 */
IgFunnelChartMethods.prototype.dataBind = function() {};

/**
 * @param {string} propertyName
 * @return {!IgFunnelChartMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Gets  values for upper and lower bezier points. That option has effect only when useBezierCurve is enabled.
 * Value should provide 4 numeric values in range from 0 to 1 separated by space character.
 * The first number defines upper-x position, second: upper-y, third: lower-x, fourth: lower-y.
 * The null or invalid value will reset internal default, which is "0.5 0 0.5 1".
 * Example:
 * bezierPoints: "0.4 0.1 0.6 1"
 * Sets values for upper and lower bezier points. That option has effect only when useBezierCurve is enabled.
 * Value should provide 4 numeric values in range from 0 to 1 separated by space character.
 * The first number defines upper-x position, second: upper-y, third: lower-x, fourth: lower-y.
 * The null or invalid value will reset internal default, which is "0.5 0 0.5 1".
 * Example:
 * bezierPoints: "0.4 0.1 0.6 1"
 * 
 * \@optionValue New value to be set.
 * Gets  the Legend for the chart.
 * The value of that option can be a string with the id of existing html element. That element should be empty and it will be used to create igChartLegend widget.
 * If element was not found, then new DIV element is created and inserted into parent after chart element.
 * Value of that option can be an object with member "element", which contains the id of legend-element.
 * In this case, that object also may contain options supported by the igChartLegend widget, such as "width", "height" and events, such as "legendItemMouseLeftButtonDown", "legendItemMouseEnter", etc.
 * Examples:
 * legend: {}
 * legend: "idOfDiv"
 * legend: { element: "idOfDiv", width: 300 }
 * legend: { legendItemMouseLeftButtonDown: function (evt, ui) { ui.chart.toggleSelection(ui.item); } }
 * Sets the Legend for the chart.
 * The value of that option can be a string with the id of existing html element. That element should be empty and it will be used to create igChartLegend widget.
 * If element was not found, then new DIV element is created and inserted into parent after chart element.
 * Value of that option can be an object with member "element", which contains the id of legend-element.
 * In this case, that object also may contain options supported by the igChartLegend widget, such as "width", "height" and events, such as "legendItemMouseLeftButtonDown", "legendItemMouseEnter", etc.
 * Examples:
 * legend: {}
 * legend: "idOfDiv"
 * legend: { element: "idOfDiv", width: 300 }
 * legend: { legendItemMouseLeftButtonDown: function (evt, ui) { ui.chart.toggleSelection(ui.item); } }
 * 
 * \@optionValue New value to be set.
 * Gets  the value member path for the funnel chart.
 * Sets the value member path for the funnel chart.
 * 
 * \@optionValue New value to be set.
 * Gets  the Brushes property.
 * The brushes property defines the palette from which automatically assigned brushes are selected.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * Sets the Brushes property.
 * The brushes property defines the palette from which automatically assigned brushes are selected.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * 
 * \@optionValue New value to be set.
 * Gets  the Outlines property.
 * The Outlines property defines the palette from which automatically assigned Outlines are selected.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * Sets the Outlines property.
 * The Outlines property defines the palette from which automatically assigned Outlines are selected.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * 
 * \@optionValue New value to be set.
 * Gets  the percentage (from near 0 to 1) of space the bottom edge of the funnel should take.
 * Sets the percentage (from near 0 to 1) of space the bottom edge of the funnel should take.
 * 
 * \@optionValue New value to be set.
 * Gets  the InnerLabel mapping property for the current series object.
 * Sets the InnerLabel mapping property for the current series object.
 * 
 * \@optionValue New value to be set.
 * Gets  the OuterLabel mapping property for the current series object.
 * Sets the OuterLabel mapping property for the current series object.
 * 
 * \@optionValue New value to be set.
 * Gets  whether the inner labels are visible.
 * Sets whether the inner labels are visible.
 * 
 * \@optionValue New value to be set.
 * Gets  whether the outer labels are visible.
 * Sets whether the outer labels are visible.
 * 
 * \@optionValue New value to be set.
 * Gets  which side of the chart the outer labels should appear.
 * Sets which side of the chart the outer labels should appear.
 * 
 * \@optionValue New value to be set.
 * Gets  the how the heights of the funnel slices should be configured.
 * Sets the how the heights of the funnel slices should be configured.
 * 
 * \@optionValue New value to be set.
 * Gets  the formatter function for inner labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to igFunnelChart.
 * Sets the formatter function for inner labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to igFunnelChart.
 * 
 * \@optionValue New value to be set.
 * Gets  the formatter function for outer labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to igFunnelChart.
 * Sets the formatter function for outer labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to igFunnelChart.
 * 
 * \@optionValue New value to be set.
 * Gets  how long the animations should take to run.
 * Sets how long the animations should take to run.
 * 
 * \@optionValue New value to be set.
 * Gets  if the funnel should be rendered inverted.
 * Sets if the funnel should be rendered inverted.
 * 
 * \@optionValue New value to be set.
 * Gets  whether to use a Bezier curve to define the funnel.
 * Sets whether to use a Bezier curve to define the funnel.
 * 
 * \@optionValue New value to be set.
 * Gets  whether to allow slices to be selected.
 * Sets whether to allow slices to be selected.
 * 
 * \@optionValue New value to be set.
 * Gets  whether to use the unselected style on unselected slices.
 * Sets whether to use the unselected style on unselected slices.
 * 
 * \@optionValue New value to be set.
 * Gets  the style to use for selected slices.
 * That can be used to set stroke (outline color), fill (background color) and opacity.
 * Sets the style to use for selected slices.
 * That can be used to set stroke (outline color), fill (background color) and opacity.
 * 
 * \@optionValue New value to be set.
 * Gets  the style to use for unselected slices.
 * That can be used to set stroke (outline color), fill (background color) and opacity.
 * Sets the style to use for unselected slices.
 * That can be used to set stroke (outline color), fill (background color) and opacity.
 * 
 * \@optionValue New value to be set.
 * Gets  the LegendItemBadgeTemplate to use for the legend items.
 * The provided object should have properties called render and optionally measure.
 * These are functions which will be called that will be called to handle the user specified custom rendering.
 * measure will be passed an object that looks like this:
 * {
 *     context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
 *     width: [if value is present, specifies the available width, user may set to desired width for content],
 *     height: [if value is present, specifies the available height, user may set to desired height for content],
 *     isConstant: [user should set to true if desired with and height will always be the same for this template],
 *     data: [if present, represents the contextual data for this template]
 * }
 * render will be passed an object that looks like this:
 * {
 *     context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
 *     xPosition: [if present, specifies the x position at which to render the content],
 *     yPosition: [if present, specifies the y position at which to render the content],
 *     availableWidth: [if present, specifies the available width in which to render the content],
 *     availableHeight: [if present, specifies the available height in which to render the content],
 *     data: [if present, specifies the data that is in context for this content],
 *     isHitTestRender: [if true, indicates that this is a special render pass for hit testing, in which case the brushes from the data should be used]
 * }
 * Sets the LegendItemBadgeTemplate to use for the legend items.
 * The provided object should have properties called render and optionally measure.
 * These are functions which will be called that will be called to handle the user specified custom rendering.
 * measure will be passed an object that looks like this:
 * {
 *     context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
 *     width: [if value is present, specifies the available width, user may set to desired width for content],
 *     height: [if value is present, specifies the available height, user may set to desired height for content],
 *     isConstant: [user should set to true if desired with and height will always be the same for this template],
 *     data: [if present, represents the contextual data for this template]
 * }
 * render will be passed an object that looks like this:
 * {
 *     context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
 *     xPosition: [if present, specifies the x position at which to render the content],
 *     yPosition: [if present, specifies the y position at which to render the content],
 *     availableWidth: [if present, specifies the available width in which to render the content],
 *     availableHeight: [if present, specifies the available height in which to render the content],
 *     data: [if present, specifies the data that is in context for this content],
 *     isHitTestRender: [if true, indicates that this is a special render pass for hit testing, in which case the brushes from the data should be used]
 * }
 * 
 * \@optionValue New value to be set.
 * Gets  whether to use the outer labels to identify the legend items.
 * Sets whether to use the outer labels to identify the legend items.
 * 
 * \@optionValue New value to be set.
 * Gets  the text style for inner labels
 * Sets the text style for inner labels
 * 
 * \@optionValue New value to be set.
 * Gets  the text style for outer labels
 * Sets the text style for outer labels
 * 
 * \@optionValue New value to be set.
 * Gets  the thickness of outline around slices.
 * Sets the thickness of outline around slices.
 * 
 * \@optionValue New value to be set.
 *
 *
 *
 *
 *
 *
 * The width of the chart.
 * The width of the chart.
 * 
 * \@optionValue New value to be set.
 * The height of the chart.
 * The height of the chart.
 * 
 * \@optionValue New value to be set.
 * Gets  template for tooltip associated with chart item.
 * Example: "Value: $(ValueMemberPathInDataSource)"
 * Sets template for tooltip associated with chart item.
 * Example: "Value: $(ValueMemberPathInDataSource)"
 * 
 * \@optionValue New value to be set.
 * Gets  maximum number of displayed records in chart.
 * Sets maximum number of displayed records in chart.
 * 
 * \@optionValue New value to be set.
 * Gets  a valid data source.
 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
 * Sets a valid data source.
 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
 * 
 * \@optionValue New value to be set.
 * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
 * 
 * \@optionValue New value to be set.
 * Gets  url which is used for sending JSON on request for remote data.
 * Sets url which is used for sending JSON on request for remote data.
 * 
 * \@optionValue New value to be set.
 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
 * 
 * \@optionValue New value to be set.
 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
 * 
 * \@optionValue New value to be set.
 * Event which is raised when a slice is clicked.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to igFunnelChart.
 * Use ui.index to obtain index of clicked slice.
 * Use ui.item to obtain reference to clicked slice item.
 * Use ui.selected to check if slice became selected.
 * Event which is raised when a slice is clicked.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to igFunnelChart.
 * Use ui.index to obtain index of clicked slice.
 * Use ui.item to obtain reference to clicked slice item.
 * Use ui.selected to check if slice became selected.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before data binding.
 * Return false in order to cancel data binding.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
 * Event which is raised before data binding.
 * Return false in order to cancel data binding.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after data binding.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.data to obtain reference to array actual data which is displayed by chart.
 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
 * Event which is raised after data binding.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.data to obtain reference to array actual data which is displayed by chart.
 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before tooltip is updated.
 * Return false in order to cancel updating and hide tooltip.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
 * Event which is raised before tooltip is updated.
 * Return false in order to cancel updating and hide tooltip.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before tooltip is hidden.
 * Return false in order to cancel hiding and keep tooltip visible.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.item to obtain reference to item.
 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
 * Event which is raised before tooltip is hidden.
 * Return false in order to cancel hiding and keep tooltip visible.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.item to obtain reference to item.
 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgFunnelChart} methodName_or_optionLiteral_or_options
 * @param {...!Array<?>|!Object|number|string|!IgFunnelChart|?=} selection_or_slice_or_item_or_index_or_dataSource_or_optionName_or_options_or_methodParams
 * @return {!Array<?>|boolean|!Object|void|number|string|?|!SliceClickedEvent|!DataBindingEvent|!DataBoundEvent|!UpdateTooltipEvent|!HideTooltipEvent|!JQuery}
 */
JQuery.prototype.igFunnelChart = function(methodName_or_optionLiteral_or_options, selection_or_slice_or_item_or_index_or_dataSource_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgPopoverHeaderTemplate() {}
 /** @type {boolean} */
IgPopoverHeaderTemplate.prototype.closeButton;
 /** @type {string} */
IgPopoverHeaderTemplate.prototype.title;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function ShowingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ShowingEventUIParam() {}
 /** @type {?} */
ShowingEventUIParam.prototype.element;
 /** @type {?} */
ShowingEventUIParam.prototype.content;
 /** @type {?} */
ShowingEventUIParam.prototype.popover;
 /** @type {?} */
ShowingEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function ShownEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ShownEventUIParam() {}
 /** @type {?} */
ShownEventUIParam.prototype.element;
 /** @type {?} */
ShownEventUIParam.prototype.content;
 /** @type {?} */
ShownEventUIParam.prototype.popover;
 /** @type {?} */
ShownEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function HidingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function HidingEventUIParam() {}
 /** @type {?} */
HidingEventUIParam.prototype.element;
 /** @type {?} */
HidingEventUIParam.prototype.content;
 /** @type {?} */
HidingEventUIParam.prototype.popover;
 /** @type {?} */
HidingEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function HiddenEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function HiddenEventUIParam() {}
 /** @type {?} */
HiddenEventUIParam.prototype.element;
 /** @type {?} */
HiddenEventUIParam.prototype.content;
 /** @type {?} */
HiddenEventUIParam.prototype.popover;
 /** @type {?} */
HiddenEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function IgGridFeatureChooserPopover() {}
 /** @type {string} */
IgGridFeatureChooserPopover.prototype.gridId;
 /** @type {?} */
IgGridFeatureChooserPopover.prototype.targetButton;
 /** @type {boolean} */
IgGridFeatureChooserPopover.prototype.closeOnBlur;
 /** @type {?} */
IgGridFeatureChooserPopover.prototype.containment;
 /** @type {string} */
IgGridFeatureChooserPopover.prototype.direction;
 /** @type {string} */
IgGridFeatureChooserPopover.prototype.position;
 /** @type {(string|number)} */
IgGridFeatureChooserPopover.prototype.width;
 /** @type {(string|number)} */
IgGridFeatureChooserPopover.prototype.height;
 /** @type {(string|number)} */
IgGridFeatureChooserPopover.prototype.minWidth;
 /** @type {(string|number)} */
IgGridFeatureChooserPopover.prototype.maxWidth;
 /** @type {(string|number)} */
IgGridFeatureChooserPopover.prototype.maxHeight;
 /** @type {number} */
IgGridFeatureChooserPopover.prototype.animationDuration;
 /** @type {(string|!Function)} */
IgGridFeatureChooserPopover.prototype.contentTemplate;
 /** @type {string} */
IgGridFeatureChooserPopover.prototype.selectors;
 /** @type {!IgPopoverHeaderTemplate} */
IgGridFeatureChooserPopover.prototype.headerTemplate;
 /** @type {string} */
IgGridFeatureChooserPopover.prototype.showOn;
 /** @type {(string|!Object)} */
IgGridFeatureChooserPopover.prototype.appendTo;
 /** @type {!ShowingEvent} */
IgGridFeatureChooserPopover.prototype.showing;
 /** @type {!ShownEvent} */
IgGridFeatureChooserPopover.prototype.shown;
 /** @type {!HidingEvent} */
IgGridFeatureChooserPopover.prototype.hiding;
 /** @type {!HiddenEvent} */
IgGridFeatureChooserPopover.prototype.hidden;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridFeatureChooserPopoverMethods() {}

/**
 * @return {void}
 */
IgGridFeatureChooserPopoverMethods.prototype.isShown = function() {};

/**
 * @param {!Object} elements
 * @return {void}
 */
IgGridFeatureChooserPopoverMethods.prototype.registerElements = function(elements) {};

/**
 * @return {void}
 */
IgGridFeatureChooserPopoverMethods.prototype.destroy = function() {};

/**
 * Returns the ID of the element the popover is attached to
 * @return {string}
 */
IgGridFeatureChooserPopoverMethods.prototype.id = function() {};

/**
 * Returns the container for the popover contents
 * @return {!Object}
 */
IgGridFeatureChooserPopoverMethods.prototype.container = function() {};

/**
 * Shows the popover for the specified target
 * 
 * @param {!Element=} trg     The element to show popover for.
 * @param {string=} content     The string to set for the popover to show.
 * @return {void}
 */
IgGridFeatureChooserPopoverMethods.prototype.show = function(trg, content) {};

/**
 * Hides the popover for the specified target
 * @return {void}
 */
IgGridFeatureChooserPopoverMethods.prototype.hide = function() {};

/**
 * Gets the currently set content for the popover container
 * @return {string}
 */
IgGridFeatureChooserPopoverMethods.prototype.getContent = function() {};

/**
 * Sets the content for the popover container
 * 
 * @param {string} newCnt     The popover content to set.
 * @return {void}
 */
IgGridFeatureChooserPopoverMethods.prototype.setContent = function(newCnt) {};

/**
 * Gets the popover current target
 * @return {!Object}
 */
IgGridFeatureChooserPopoverMethods.prototype.target = function() {};

/**
 * Gets the current coordinates of the popover
 * @return {!Object}
 */
IgGridFeatureChooserPopoverMethods.prototype.getCoordinates = function() {};

/**
 * Sets the popover to specific coordinates.
 * 
 * @param {!Object} pos     The popover coordinates in pixels.
 * @return {void}
 */
IgGridFeatureChooserPopoverMethods.prototype.setCoordinates = function(pos) {};

/**
 * @param {string} propertyName
 * @return {!IgGridFeatureChooserPopoverMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function FeatureChooserRenderingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FeatureChooserRenderingEventUIParam() {}
/**
 * @record
 * @struct
 */
function FeatureChooserRenderedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FeatureChooserRenderedEventUIParam() {}
/**
 * @record
 * @struct
 */
function FeatureChooserDropDownOpeningEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FeatureChooserDropDownOpeningEventUIParam() {}
/**
 * @record
 * @struct
 */
function FeatureChooserDropDownOpenedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FeatureChooserDropDownOpenedEventUIParam() {}
/**
 * @record
 * @struct
 */
function MenuTogglingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function MenuTogglingEventUIParam() {}
/**
 * @record
 * @struct
 */
function FeatureTogglingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FeatureTogglingEventUIParam() {}
/**
 * @record
 * @struct
 */
function FeatureToggledEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FeatureToggledEventUIParam() {}
/**
 * @record
 * @struct
 */
function IgGridFeatureChooser() {}
 /** @type {?} */
IgGridFeatureChooser.prototype.dropDownWidth;
 /** @type {number} */
IgGridFeatureChooser.prototype.animationDuration;
 /** @type {!FeatureChooserRenderingEvent} */
IgGridFeatureChooser.prototype.featureChooserRendering;
 /** @type {!FeatureChooserRenderedEvent} */
IgGridFeatureChooser.prototype.featureChooserRendered;
 /** @type {!FeatureChooserDropDownOpeningEvent} */
IgGridFeatureChooser.prototype.featureChooserDropDownOpening;
 /** @type {!FeatureChooserDropDownOpenedEvent} */
IgGridFeatureChooser.prototype.featureChooserDropDownOpened;
 /** @type {!MenuTogglingEvent} */
IgGridFeatureChooser.prototype.menuToggling;
 /** @type {!FeatureTogglingEvent} */
IgGridFeatureChooser.prototype.featureToggling;
 /** @type {!FeatureToggledEvent} */
IgGridFeatureChooser.prototype.featureToggled;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridFeatureChooserMethods() {}

/**
 * @param {!Object} key
 * @return {void}
 */
IgGridFeatureChooserMethods.prototype.shouldShowFeatureIcon = function(key) {};

/**
 * Show feature chooser dialog by the specified column key
 * 
 * @param {string} columnKey    Key of the column that should be shown.
 * @return {void}
 */
IgGridFeatureChooserMethods.prototype.showDropDown = function(columnKey) {};

/**
 * Hide feature chooser dialog by column key
 * 
 * @param {string} columnKey    Key of the column that should be hidden.
 * @return {void}
 */
IgGridFeatureChooserMethods.prototype.hideDropDown = function(columnKey) {};

/**
 * Get jQuery representation of the div holding dropdown for the specified columnKey
 * 
 * @param {string} columnKey    Key of the column
 * @return {void}
 */
IgGridFeatureChooserMethods.prototype.getDropDownByColumnKey = function(columnKey) {};

/**
 * Show/hide feature chooser dialog by column key
 * 
 * @param {string} columnKey    Key of the column that should be shown/hidden.
 * @return {void}
 */
IgGridFeatureChooserMethods.prototype.toggleDropDown = function(columnKey) {};

/**
 * @param {!Object} e
 * @param {!Object} args
 * @return {void}
 */
IgGridFeatureChooserMethods.prototype.destroy = function(e, args) {};

/**
 * @param {string} propertyName
 * @return {!IgGridFeatureChooserMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 *
 *
 *
 *
 *
 *
 *
 *
 * Controls the direction in which the control shows relative to the target element
 * Controls the direction in which the control shows relative to the target element
 * 
 * \@optionValue New value to be set.
 * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
 * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
 * 
 * \@optionValue New value to be set.
 * Defines width for the popover. leave null for auto.
 * Defines width for the popover. leave null for auto.
 * 
 * \@optionValue New value to be set.
 * Defines height for the popover. leave null for auto
 * Defines height for the popover. leave null for auto
 * 
 * \@optionValue New value to be set.
 * Defines width the popover won't go under the value even if no specific one is set.
 * Defines width the popover won't go under the value even if no specific one is set.
 * 
 * \@optionValue New value to be set.
 * Defines width the popover won't exceed even if no specific one is set.
 * Defines width the popover won't exceed even if no specific one is set.
 * 
 * \@optionValue New value to be set.
 * Defines height the popover won't exceed even if no specific one is set.
 * Defines height the popover won't exceed even if no specific one is set.
 * 
 * \@optionValue New value to be set.
 * The time popover fades in and out when showing/hiding
 * Sets the time popover fades in and out when showing/hiding
 * 
 * \@optionValue New value to be set.
 * The content for the popover container. If left null the content will be get from the target.
 * Sets the content for the popover container. If left null the content will be get from the target.
 * 
 * \@optionValue New value to be set.
 * Selectors indicating which items should show popovers. The predefined value is [title]. Customize if you're using something other then the title attribute for the popover content, or if you need a different selector for event delegation. When changing this option, you likely need to also change the contentTemplate option
 * Selectors indicating which items should show popovers. The predefined value is [title]. Customize if you're using something other then the title attribute for the popover content, or if you need a different selector for event delegation. When changing this option, you likely need to also change the contentTemplate option
 * 
 * \@optionValue New value to be set.
 * The content for the popover header
 * Sets the content for the popover header
 * 
 * \@optionValue New value to be set.
 * The event on which the popover will be shown. Predefined values are "mouseenter", "click" and "focus"
 * Sets the event on which the popover will be shown. Predefined values are "mouseenter", "click" and "focus"
 * 
 * \@optionValue New value to be set.
 * Controls where the popover DOM should be attached to.
 * 
 * Controls where the popover DOM should be attached to.
 * 
 * 
 * \@optionValue New value to be set.
 * Event fired before popover is shown.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover will show for.
 * Use ui.content to get or set the content to be shown as a string.
 * Use ui.popover to get the popover element showing.
 * Use ui.owner to get reference to the igPopover widget
 * Event fired before popover is shown.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover will show for.
 * Use ui.content to get or set the content to be shown as a string.
 * Use ui.popover to get the popover element showing.
 * Use ui.owner to get reference to the igPopover widget
 * 
 * \@optionValue Define event handler function.
 * Event fired after popover is shown.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover showed for.
 * Use ui.content to get the content that was shown as a string.
 * Use ui.popover to get the popover element shown.
 * Use ui.owner to get reference to the igPopover widget
 * Event fired after popover is shown.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover showed for.
 * Use ui.content to get the content that was shown as a string.
 * Use ui.popover to get the popover element shown.
 * Use ui.owner to get reference to the igPopover widget
 * 
 * \@optionValue Define event handler function.
 * Event fired before popover is hidden.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover will hide for.
 * Use ui.content to get the current content displayed in the popover as a string.
 * Use ui.popover to get the popover element hiding.
 * Use ui.owner to get reference to the igPopover widget
 * Event fired before popover is hidden.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover will hide for.
 * Use ui.content to get the current content displayed in the popover as a string.
 * Use ui.popover to get the popover element hiding.
 * Use ui.owner to get reference to the igPopover widget
 * 
 * \@optionValue Define event handler function.
 * Event fired after popover is hidden.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover is hidden for.
 * Use ui.content to get the content displayed in the popover as a string.
 * Use ui.popover to get the popover element hidden.
 * Use ui.owner to get reference to the igPopover widget
 * Event fired after popover is hidden.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover is hidden for.
 * Use ui.content to get the content displayed in the popover as a string.
 * Use ui.popover to get the popover element hidden.
 * Use ui.owner to get reference to the igPopover widget
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgGridFeatureChooserPopover} methodName_or_optionLiteral_or_options
 * @param {...!Object|!Element|string|!IgGridFeatureChooserPopover|?=} elements_or_trg_or_newCnt_or_pos_or_optionName_or_options_or_methodParams
 * @return {void|string|!Object|?|boolean|(string|number)|number|(string|!Function)|!IgPopoverHeaderTemplate|(string|!Object)|!ShowingEvent|!ShownEvent|!HidingEvent|!HiddenEvent|!JQuery}
 */
JQuery.prototype.igGridFeatureChooserPopover = function(methodName_or_optionLiteral_or_options, elements_or_trg_or_newCnt_or_pos_or_optionName_or_options_or_methodParams) {};

/**
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 * @param {string|!IgGridFeatureChooser} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgGridFeatureChooser|?} key_or_columnKey_or_e_or_optionName_or_options_or_methodParams
 * @return {void|?|number|!FeatureChooserRenderingEvent|!FeatureChooserRenderedEvent|!FeatureChooserDropDownOpeningEvent|!FeatureChooserDropDownOpenedEvent|!MenuTogglingEvent|!FeatureTogglingEvent|!FeatureToggledEvent|!JQuery}
 */
JQuery.prototype.igGridFeatureChooser = function(methodName_or_optionLiteral_or_options, key_or_columnKey_or_e_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgGridGroupByGroupedColumn() {}
 /** @type {string} */
IgGridGroupByGroupedColumn.prototype.key;
 /** @type {?} */
IgGridGroupByGroupedColumn.prototype.dir;
 /** @type {string} */
IgGridGroupByGroupedColumn.prototype.layout;
 /** @type {?} */
IgGridGroupByGroupedColumn.prototype.col;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridGroupBySummarySettings() {}
 /** @type {string} */
IgGridGroupBySummarySettings.prototype.multiSummaryDelimiter;
 /** @type {string} */
IgGridGroupBySummarySettings.prototype.summaryFormat;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridGroupByColumnSettingsSummaries() {}
 /** @type {string} */
IgGridGroupByColumnSettingsSummaries.prototype.summaryFunction;
 /** @type {string} */
IgGridGroupByColumnSettingsSummaries.prototype.text;
 /** @type {(string|!Function)} */
IgGridGroupByColumnSettingsSummaries.prototype.customSummary;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridGroupByColumnSettings() {}
 /** @type {boolean} */
IgGridGroupByColumnSettings.prototype.allowGrouping;
 /** @type {boolean} */
IgGridGroupByColumnSettings.prototype.isGroupBy;
 /** @type {(string|!Function)} */
IgGridGroupByColumnSettings.prototype.compareFunc;
 /** @type {!Function} */
IgGridGroupByColumnSettings.prototype.groupComparerFunction;
 /** @type {(string|!Function)} */
IgGridGroupByColumnSettings.prototype.groupLabelFormatter;
 /** @type {?} */
IgGridGroupByColumnSettings.prototype.dir;
 /** @type {!IgGridGroupByColumnSettingsSummaries} */
IgGridGroupByColumnSettings.prototype.summaries;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function GroupedColumnsChangingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function GroupedColumnsChangingEventUIParam() {}
 /** @type {?} */
GroupedColumnsChangingEventUIParam.prototype.owner;
 /** @type {?} */
GroupedColumnsChangingEventUIParam.prototype.groupedColumns;
 /** @type {?} */
GroupedColumnsChangingEventUIParam.prototype.newGroupedColumns;
 /** @type {?} */
GroupedColumnsChangingEventUIParam.prototype.key;
 /** @type {?} */
GroupedColumnsChangingEventUIParam.prototype.layout;
 /** @type {?} */
GroupedColumnsChangingEventUIParam.prototype.grid;
 /** @type {?} */
GroupedColumnsChangingEventUIParam.prototype.triggeredBy;
/**
 * @record
 * @struct
 */
function GroupedColumnsChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function GroupedColumnsChangedEventUIParam() {}
 /** @type {?} */
GroupedColumnsChangedEventUIParam.prototype.owner;
 /** @type {?} */
GroupedColumnsChangedEventUIParam.prototype.groupedColumns;
 /** @type {?} */
GroupedColumnsChangedEventUIParam.prototype.key;
 /** @type {?} */
GroupedColumnsChangedEventUIParam.prototype.layout;
 /** @type {?} */
GroupedColumnsChangedEventUIParam.prototype.grid;
 /** @type {?} */
GroupedColumnsChangedEventUIParam.prototype.triggeredBy;
/**
 * @record
 * @struct
 */
function ModalDialogMovingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ModalDialogMovingEventUIParam() {}
 /** @type {?} */
ModalDialogMovingEventUIParam.prototype.owner;
 /** @type {?} */
ModalDialogMovingEventUIParam.prototype.modalDialogElement;
 /** @type {?} */
ModalDialogMovingEventUIParam.prototype.originalPosition;
 /** @type {?} */
ModalDialogMovingEventUIParam.prototype.position;
/**
 * @record
 * @struct
 */
function ModalDialogClosingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ModalDialogClosingEventUIParam() {}
 /** @type {?} */
ModalDialogClosingEventUIParam.prototype.owner;
 /** @type {?} */
ModalDialogClosingEventUIParam.prototype.modalDialogElement;
/**
 * @record
 * @struct
 */
function ModalDialogClosedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ModalDialogClosedEventUIParam() {}
 /** @type {?} */
ModalDialogClosedEventUIParam.prototype.owner;
 /** @type {?} */
ModalDialogClosedEventUIParam.prototype.modalDialogElement;
/**
 * @record
 * @struct
 */
function ModalDialogOpeningEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ModalDialogOpeningEventUIParam() {}
 /** @type {?} */
ModalDialogOpeningEventUIParam.prototype.owner;
 /** @type {?} */
ModalDialogOpeningEventUIParam.prototype.modalDialogElement;
/**
 * @record
 * @struct
 */
function ModalDialogOpenedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ModalDialogOpenedEventUIParam() {}
 /** @type {?} */
ModalDialogOpenedEventUIParam.prototype.owner;
 /** @type {?} */
ModalDialogOpenedEventUIParam.prototype.modalDialogElement;
/**
 * @record
 * @struct
 */
function ModalDialogContentsRenderingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ModalDialogContentsRenderingEventUIParam() {}
 /** @type {?} */
ModalDialogContentsRenderingEventUIParam.prototype.owner;
 /** @type {?} */
ModalDialogContentsRenderingEventUIParam.prototype.modalDialogElement;
/**
 * @record
 * @struct
 */
function ModalDialogContentsRenderedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ModalDialogContentsRenderedEventUIParam() {}
 /** @type {?} */
ModalDialogContentsRenderedEventUIParam.prototype.owner;
 /** @type {?} */
ModalDialogContentsRenderedEventUIParam.prototype.modalDialogElement;
/**
 * @record
 * @struct
 */
function ModalDialogButtonApplyClickEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ModalDialogButtonApplyClickEventUIParam() {}
 /** @type {?} */
ModalDialogButtonApplyClickEventUIParam.prototype.owner;
 /** @type {?} */
ModalDialogButtonApplyClickEventUIParam.prototype.modalDialogElement;
 /** @type {?} */
ModalDialogButtonApplyClickEventUIParam.prototype.groupedColumns;
 /** @type {?} */
ModalDialogButtonApplyClickEventUIParam.prototype.groupedColumnLayouts;
 /** @type {?} */
ModalDialogButtonApplyClickEventUIParam.prototype.sortingExpr;
/**
 * @record
 * @struct
 */
function ModalDialogButtonResetClickEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ModalDialogButtonResetClickEventUIParam() {}
 /** @type {?} */
ModalDialogButtonResetClickEventUIParam.prototype.owner;
 /** @type {?} */
ModalDialogButtonResetClickEventUIParam.prototype.modalDialogElement;
/**
 * @record
 * @struct
 */
function ModalDialogGroupingColumnEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ModalDialogGroupingColumnEventUIParam() {}
 /** @type {?} */
ModalDialogGroupingColumnEventUIParam.prototype.owner;
 /** @type {?} */
ModalDialogGroupingColumnEventUIParam.prototype.key;
 /** @type {?} */
ModalDialogGroupingColumnEventUIParam.prototype.layout;
/**
 * @record
 * @struct
 */
function ModalDialogGroupColumnEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ModalDialogGroupColumnEventUIParam() {}
 /** @type {?} */
ModalDialogGroupColumnEventUIParam.prototype.owner;
 /** @type {?} */
ModalDialogGroupColumnEventUIParam.prototype.key;
 /** @type {?} */
ModalDialogGroupColumnEventUIParam.prototype.groupedColumns;
 /** @type {?} */
ModalDialogGroupColumnEventUIParam.prototype.layout;
/**
 * @record
 * @struct
 */
function ModalDialogUngroupingColumnEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ModalDialogUngroupingColumnEventUIParam() {}
 /** @type {?} */
ModalDialogUngroupingColumnEventUIParam.prototype.owner;
 /** @type {?} */
ModalDialogUngroupingColumnEventUIParam.prototype.key;
 /** @type {?} */
ModalDialogUngroupingColumnEventUIParam.prototype.layout;
/**
 * @record
 * @struct
 */
function ModalDialogUngroupColumnEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ModalDialogUngroupColumnEventUIParam() {}
 /** @type {?} */
ModalDialogUngroupColumnEventUIParam.prototype.owner;
 /** @type {?} */
ModalDialogUngroupColumnEventUIParam.prototype.groupedColumns;
 /** @type {?} */
ModalDialogUngroupColumnEventUIParam.prototype.key;
 /** @type {?} */
ModalDialogUngroupColumnEventUIParam.prototype.layout;
/**
 * @record
 * @struct
 */
function ModalDialogSortGroupedColumnEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ModalDialogSortGroupedColumnEventUIParam() {}
 /** @type {?} */
ModalDialogSortGroupedColumnEventUIParam.prototype.owner;
 /** @type {?} */
ModalDialogSortGroupedColumnEventUIParam.prototype.key;
 /** @type {?} */
ModalDialogSortGroupedColumnEventUIParam.prototype.layout;
 /** @type {?} */
ModalDialogSortGroupedColumnEventUIParam.prototype.isAsc;
/**
 * @record
 * @struct
 */
function IgGridGroupBy() {}
 /** @type {string} */
IgGridGroupBy.prototype.groupByAreaVisibility;
 /** @type {boolean} */
IgGridGroupBy.prototype.initialExpand;
 /** @type {string} */
IgGridGroupBy.prototype.emptyGroupByAreaContent;
 /** @type {string} */
IgGridGroupBy.prototype.emptyGroupByAreaContentSelectColumns;
 /** @type {boolean} */
IgGridGroupBy.prototype.expansionIndicatorVisibility;
 /** @type {number} */
IgGridGroupBy.prototype.groupByLabelWidth;
 /** @type {number} */
IgGridGroupBy.prototype.labelDragHelperOpacity;
 /** @type {number} */
IgGridGroupBy.prototype.indentation;
 /** @type {string} */
IgGridGroupBy.prototype.defaultSortingDirection;
 /** @type {!Array<!IgGridGroupByGroupedColumn>} */
IgGridGroupBy.prototype.groupedColumns;
 /** @type {string} */
IgGridGroupBy.prototype.resultResponseKey;
 /** @type {string} */
IgGridGroupBy.prototype.groupedRowTextTemplate;
 /** @type {string} */
IgGridGroupBy.prototype.type;
 /** @type {string} */
IgGridGroupBy.prototype.groupByUrlKey;
 /** @type {string} */
IgGridGroupBy.prototype.groupByUrlKeyAscValue;
 /** @type {string} */
IgGridGroupBy.prototype.groupByUrlKeyDescValue;
 /** @type {!IgGridGroupBySummarySettings} */
IgGridGroupBy.prototype.summarySettings;
 /** @type {!IgGridGroupByColumnSettings} */
IgGridGroupBy.prototype.columnSettings;
 /** @type {string} */
IgGridGroupBy.prototype.expandTooltip;
 /** @type {string} */
IgGridGroupBy.prototype.collapseTooltip;
 /** @type {string} */
IgGridGroupBy.prototype.removeButtonTooltip;
 /** @type {boolean} */
IgGridGroupBy.prototype.modalDialogGroupByOnClick;
 /** @type {string} */
IgGridGroupBy.prototype.modalDialogGroupByButtonText;
 /** @type {string} */
IgGridGroupBy.prototype.modalDialogCaptionButtonDesc;
 /** @type {string} */
IgGridGroupBy.prototype.modalDialogCaptionButtonAsc;
 /** @type {string} */
IgGridGroupBy.prototype.modalDialogCaptionButtonUngroup;
 /** @type {string} */
IgGridGroupBy.prototype.modalDialogCaptionText;
 /** @type {string} */
IgGridGroupBy.prototype.modalDialogDropDownLabel;
 /** @type {string} */
IgGridGroupBy.prototype.modalDialogRootLevelHierarchicalGrid;
 /** @type {string} */
IgGridGroupBy.prototype.modalDialogDropDownButtonCaption;
 /** @type {string} */
IgGridGroupBy.prototype.modalDialogClearAllButtonLabel;
 /** @type {string} */
IgGridGroupBy.prototype.emptyGroupByAreaContentSelectColumnsCaption;
 /** @type {number} */
IgGridGroupBy.prototype.modalDialogDropDownWidth;
 /** @type {number} */
IgGridGroupBy.prototype.modalDialogDropDownAreaWidth;
 /** @type {number} */
IgGridGroupBy.prototype.modalDialogAnimationDuration;
 /** @type {(string|number)} */
IgGridGroupBy.prototype.modalDialogWidth;
 /** @type {(string|number)} */
IgGridGroupBy.prototype.modalDialogHeight;
 /** @type {string} */
IgGridGroupBy.prototype.modalDialogButtonApplyText;
 /** @type {string} */
IgGridGroupBy.prototype.modalDialogButtonCancelText;
 /** @type {boolean} */
IgGridGroupBy.prototype.useGridColumnFormatter;
 /** @type {boolean} */
IgGridGroupBy.prototype.persist;
 /** @type {string} */
IgGridGroupBy.prototype.groupByDialogContainment;
 /** @type {string} */
IgGridGroupBy.prototype.dialogWidget;
 /** @type {boolean} */
IgGridGroupBy.prototype.inherit;
 /** @type {!GroupedColumnsChangingEvent} */
IgGridGroupBy.prototype.groupedColumnsChanging;
 /** @type {!GroupedColumnsChangedEvent} */
IgGridGroupBy.prototype.groupedColumnsChanged;
 /** @type {!ModalDialogMovingEvent} */
IgGridGroupBy.prototype.modalDialogMoving;
 /** @type {!ModalDialogClosingEvent} */
IgGridGroupBy.prototype.modalDialogClosing;
 /** @type {!ModalDialogClosedEvent} */
IgGridGroupBy.prototype.modalDialogClosed;
 /** @type {!ModalDialogOpeningEvent} */
IgGridGroupBy.prototype.modalDialogOpening;
 /** @type {!ModalDialogOpenedEvent} */
IgGridGroupBy.prototype.modalDialogOpened;
 /** @type {!ModalDialogContentsRenderingEvent} */
IgGridGroupBy.prototype.modalDialogContentsRendering;
 /** @type {!ModalDialogContentsRenderedEvent} */
IgGridGroupBy.prototype.modalDialogContentsRendered;
 /** @type {!ModalDialogButtonApplyClickEvent} */
IgGridGroupBy.prototype.modalDialogButtonApplyClick;
 /** @type {!ModalDialogButtonResetClickEvent} */
IgGridGroupBy.prototype.modalDialogButtonResetClick;
 /** @type {!ModalDialogGroupingColumnEvent} */
IgGridGroupBy.prototype.modalDialogGroupingColumn;
 /** @type {!ModalDialogGroupColumnEvent} */
IgGridGroupBy.prototype.modalDialogGroupColumn;
 /** @type {!ModalDialogUngroupingColumnEvent} */
IgGridGroupBy.prototype.modalDialogUngroupingColumn;
 /** @type {!ModalDialogUngroupColumnEvent} */
IgGridGroupBy.prototype.modalDialogUngroupColumn;
 /** @type {!ModalDialogSortGroupedColumnEvent} */
IgGridGroupBy.prototype.modalDialogSortGroupedColumn;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridGroupByMethods() {}

/**
 * Open groupby modal dialog
 * @return {void}
 */
IgGridGroupByMethods.prototype.openGroupByDialog = function() {};

/**
 * Close groupby modal dialog
 * @return {void}
 */
IgGridGroupByMethods.prototype.closeGroupByDialog = function() {};

/**
 * Render groupby modal dialog and its content
 * @return {void}
 */
IgGridGroupByMethods.prototype.renderGroupByModalDialog = function() {};

/**
 * Open layouts dropdown
 * @return {void}
 */
IgGridGroupByMethods.prototype.openDropDown = function() {};

/**
 * Close layouts dropdown
 * @return {void}
 */
IgGridGroupByMethods.prototype.closeDropDown = function() {};

/**
 * Check whether column with specified key and layout is grouped
 * 
 * @param {string} key    key of the column
 * @param {string} layout    layout name
 * @return {void}
 */
IgGridGroupByMethods.prototype.checkColumnIsGrouped = function(key, layout) {};

/**
 * Get grouped data by value for the specific column. NOTE: Before calling this function the data(that is passed as an argument) should be sorted by colKey.
 * 
 * @param {!Array<?>} data    data (sorted by colKey) that is used to get the records from.
 * @param {string} colKey    key of the column for which grouping will be applied.
 * @param {string=} idval    value of the column by which grouping will be applied.
 * @return {!Array<?>}
 */
IgGridGroupByMethods.prototype.getGroupedData = function(data, colKey, idval) {};

/**
 * Adds a column to the group by columns list, executes the group by operation and updates the view.
 * @return {!Object}
 */
IgGridGroupByMethods.prototype.groupByColumns = function() {};

/**
 * Groups by a column
 * 
 * @param {string} key    Column Key - group by the column with the specified key
 * @param {string=} layout    layout is an optional parameter. if set it means the grouped column is not in the root level but is a child layout column
 * @param {!Object=} sortingDirection    if not set it is taken from option defaultSortingDirection
 * @return {void}
 */
IgGridGroupByMethods.prototype.groupByColumn = function(key, layout, sortingDirection) {};

/**
 * Removes the specified column from the group by columns list, executes the group by operation and updates the view.
 * 
 * @param {string} key    Column Key - ungroup by the column with the specified key
 * @param {string=} layout    Layout is an optional parameter. If set it means the grouped column is not in the root level but is a child layout column.
 * @return {void}
 */
IgGridGroupByMethods.prototype.ungroupByColumn = function(key, layout) {};

/**
 * Expand group row with specified id
 * 
 * @param {string} rowId    data-id attribute of the group row in the DOM
 * @return {void}
 */
IgGridGroupByMethods.prototype.expand = function(rowId) {};

/**
 * Expand group row with specified id
 * 
 * @param {string} rowId    data-id attribute of the group row in the DOM
 * @return {void}
 */
IgGridGroupByMethods.prototype.collapse = function(rowId) {};

/**
 * Clears the group by columns list and updates the view.
 * @return {void}
 */
IgGridGroupByMethods.prototype.ungroupAll = function() {};

/**
 * Destroys the group by feature object.
 * @return {void}
 */
IgGridGroupByMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgGridGroupByMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Sets the place in the grid where the GroupBy area will be
 * 
 * Sets the place in the grid where the GroupBy area will be
 * 
 * 
 * \@optionValue New value to be set.
 * Gets if after grouping, the grouped rows will be initially expanded or collapsed.
 * 
 * Sets if after grouping, the grouped rows will be initially expanded or collapsed.
 * 
 * 
 * \@optionValue New value to be set.
 * Text that will be shown in the GroupBy area when there are no grouped columns
 * 
 * Text that will be shown in the GroupBy area when there are no grouped columns
 * 
 * 
 * \@optionValue New value to be set.
 * Text of the link that opens the [GroupBy Dialog](http://www.igniteui.com/help/iggrid-group-by-dialog-overview).
 * 
 * Text of the link that opens the [GroupBy Dialog](http://www.igniteui.com/help/iggrid-group-by-dialog-overview).
 * 
 * 
 * \@optionValue New value to be set.
 * Gets if grouped rows will have an expander image that will allow end users to expand and collapse them. This option can be set only at initialization.
 * 
 * Sets if grouped rows will have an expander image that will allow end users to expand and collapse them. This option can be set only at initialization.
 * 
 * 
 * \@optionValue New value to be set.
 * By default, the column width for the header is taken. If this is specified it's used for all headers.
 * 
 * By default, the column width for the header is taken. If this is specified it's used for all headers.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the opacity of the drag markup, while a column header is being dragged. The value must be between 0 and 1.
 * 
 * Sets the opacity of the drag markup, while a column header is being dragged. The value must be between 0 and 1.
 * 
 * 
 * \@optionValue New value to be set.
 * Specifies the indentation for a grouped row. If several columns are grouped, the total indentation will grow
 * 
 * Specifies the indentation for a grouped row. If several columns are grouped, the total indentation will grow
 * 
 * 
 * \@optionValue New value to be set.
 * Default sort order - ascending or descending
 * 
 * Default sort order - ascending or descending
 * 
 * 
 * \@optionValue New value to be set.
 * Returns the list of currently grouped columns. The option is read-only and cannot be set at initialization or at runtime.
 * 
 * Returns the list of currently grouped columns. The option is read-only and cannot be set at initialization or at runtime.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets a key to get group by data from the remote response.
 * 
 * Sets a key to get group by data from the remote response.
 * 
 * 
 * \@optionValue New value to be set.
 * Template for the grouped row's text. Variables available for the template are ${key}, ${val} and ${count}.
 * 
 * Template for the grouped row's text. Variables available for the template are ${key}, ${val} and ${count}.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets whether the GroupBy operation takes place locally on client-side or remotely on server-side.
 * 
 * Sets whether the GroupBy operation takes place locally on client-side or remotely on server-side.
 * 
 * 
 * \@optionValue New value to be set.
 * URL param name which specifies a GroupBy [expression](ig.datasource#options:settings.sorting.expressions). When groupByUrlKey, [groupByUrlKeyAscValue](ui.iggridgroupby#options:groupByUrlKeyAscValue) and [groupByUrlKeyDescValue](ui.iggridgroupby#options:groupByUrlKeyDescValue) are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
 * 
 * URL param name which specifies a GroupBy [expression](ig.datasource#options:settings.sorting.expressions). When groupByUrlKey, [groupByUrlKeyAscValue](ui.iggridgroupby#options:groupByUrlKeyAscValue) and [groupByUrlKeyDescValue](ui.iggridgroupby#options:groupByUrlKeyDescValue) are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
 * 
 * 
 * \@optionValue New value to be set.
 * URL param value denoting ascending grouping. When [groupByUrlKey](ui.iggridgroupby#options:groupByUrlKey), groupByUrlKeyAscValue and [groupByUrlKeyDescValue](ui.iggridgroupby#options:groupByUrlKeyDescValue) are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
 * 
 * URL param value denoting ascending grouping. When [groupByUrlKey](ui.iggridgroupby#options:groupByUrlKey), groupByUrlKeyAscValue and [groupByUrlKeyDescValue](ui.iggridgroupby#options:groupByUrlKeyDescValue) are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
 * 
 * 
 * \@optionValue New value to be set.
 * URL param value denoting descending grouping. When [groupByUrlKey](ui.iggridgroupby#options:groupByUrlKey), [groupByUrlKeyAscValue](ui.iggridgroupby#options:groupByUrlKeyAscValue) and groupByUrlKeyDescValue are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
 * 
 * URL param value denoting descending grouping. When [groupByUrlKey](ui.iggridgroupby#options:groupByUrlKey), [groupByUrlKeyAscValue](ui.iggridgroupby#options:groupByUrlKeyAscValue) and groupByUrlKeyDescValue are set the request looks like: ?<groupByUrlKey>(<columnKey>)=<groupByUrlKeyAscValue/groupByUrlKeyDescValue> (Example: ?groupby(col1)=asc). Otherwise the OData conventions for sorting params are used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the settings for GroupBy summaries.
 * 
 * Sets the settings for GroupBy summaries.
 * 
 * 
 * \@optionValue New value to be set.
 * Configures individual column settings.
 * 
 * Configures individual column settings.
 * 
 * 
 * \@optionValue New value to be set.
 * Specifies the expand indicator tooltip for grouped rows
 * 
 * Specifies the expand indicator tooltip for grouped rows
 * 
 * 
 * \@optionValue New value to be set.
 * Specifies the collapse indicator tooltip for grouped rows
 * 
 * Specifies the collapse indicator tooltip for grouped rows
 * 
 * 
 * \@optionValue New value to be set.
 * Specifies the tooltip for the remove button
 * 
 * Specifies the tooltip for the remove button
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables immediate column grouping/ungrouping. When false operation is delayed until after "Apply" button is clicked by the user.
 * 
 * Enables/disables immediate column grouping/ungrouping. When false operation is delayed until after "Apply" button is clicked by the user.
 * 
 * 
 * \@optionValue New value to be set.
 * Specifies the text of GroupBy button in the GroupBy Dialog
 * 
 * Specifies the text of GroupBy button in the GroupBy Dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Gets caption for each descending sorted column in GroupBy Dialog
 * 
 * Sets caption for each descending sorted column in GroupBy Dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Gets caption for each ascending sorted column in GroupBy Dialog
 * 
 * Sets caption for each ascending sorted column in GroupBy Dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Gets caption button ungroup in GroupBy Dialog
 * 
 * Sets caption button ungroup in GroupBy Dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Gets caption text for the GroupBy Dialog
 * 
 * Sets caption text for the GroupBy Dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Gets label for layouts dropdown in the GroupBy Dialog
 * 
 * Sets label for layouts dropdown in the GroupBy Dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Gets name of the root layout which is shown layouts tree dialog
 * 
 * Sets name of the root layout which is shown layouts tree dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Gets caption of layouts dropdown button in the GroupBy Dialog
 * 
 * Sets caption of layouts dropdown button in the GroupBy Dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Gets label for "Clear all" button in the GroupBy Dialog
 * 
 * Sets label for "Clear all" button in the GroupBy Dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Gets caption for the hyperlink which opens the GroupBy Dialog
 * 
 * Sets caption for the hyperlink which opens the GroupBy Dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Gets width of layouts dropdown in the GroupBy Dialog
 * 
 * Sets width of layouts dropdown in the GroupBy Dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Gets width of layouts dropdown in the GroupBy Dialog
 * 
 * Sets width of layouts dropdown in the GroupBy Dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Gets time in milliseconds for animation duration to show/hide modal dialog
 * 
 * Sets time in milliseconds for animation duration to show/hide modal dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Gets width of the GroupBy Dialog
 * 
 * Sets width of the GroupBy Dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Gets height of the GroupBy Dialog
 * 
 * Sets height of the GroupBy Dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Gets text of button which apply changes in modal dialog
 * 
 * Sets text of button which apply changes in modal dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Gets text of button which cancel changes in the GroupBy Dialog
 * 
 * Sets text of button which cancel changes in the GroupBy Dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Format grouped column using the formatter set in [igGrid.columns.formatter](ui.iggrid#options:columns.formatter) or [igGrid.columns.format](ui.iggrid#options:columns.format).
 * 
 * Format grouped column using the formatter set in [igGrid.columns.formatter](ui.iggrid#options:columns.formatter) or [igGrid.columns.format](ui.iggrid#options:columns.format).
 * 
 * 
 * \@optionValue New value to be set.
 * Enables / disables GroupBy persistence between states. Checkout the [GroupBy Persistence](http://www.igniteui.com/help/iggrid-groupby-overview#groupBy-persistence) topic for details.
 * 
 * Enables / disables GroupBy persistence between states. Checkout the [GroupBy Persistence](http://www.igniteui.com/help/iggrid-groupby-overview#groupBy-persistence) topic for details.
 * 
 * 
 * \@optionValue New value to be set.
 * Controls containment behavior for the GroupBy Dialog.
 * 
 * Controls containment behavior for the GroupBy Dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. Checkout the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic for details.
 * 
 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. Checkout the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic for details.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * \@optionValue New value to be set.
 * Event which is fired when the grouped columns collection is about to change. This event is fired even when button OK is clicked from the modal dialog(after event modalDialogButtonApplyClick is fired)
 * use args.owner in order to access the GroupBy widget object
 * use args.owner.grid to access the grid widget option
 * use args.groupedColumns to get a reference to the current groupedColumns.
 * use args.newGroupedColumns to get an object of the new grouped columns that should be applied.(it is set ONLY if called from modal dialog)
 * use args.key to get a reference to the current column"s key that"s being grouped(not set if called from modal dialog)
 * use args.layout to get a reference to the current layout object, if any(not set if called from modal dialog)
 * use args.grid to get a reference to the current child grid element, in case it's an hierarchical grid(not set if called from modal dialog)
 * use args.triggeredBy to get which user interaction triggers the event - possible options are dragAndDrop|modalDialog|sortStateChanged|removeButton|regroup
 * Event which is fired when the grouped columns collection is about to change. This event is fired even when button OK is clicked from the modal dialog(after event modalDialogButtonApplyClick is fired)
 * use args.owner in order to access the GroupBy widget object
 * use args.owner.grid to access the grid widget option
 * use args.groupedColumns to get a reference to the current groupedColumns.
 * use args.newGroupedColumns to get an object of the new grouped columns that should be applied.(it is set ONLY if called from modal dialog)
 * use args.key to get a reference to the current column"s key that"s being grouped(not set if called from modal dialog)
 * use args.layout to get a reference to the current layout object, if any(not set if called from modal dialog)
 * use args.grid to get a reference to the current child grid element, in case it's an hierarchical grid(not set if called from modal dialog)
 * use args.triggeredBy to get which user interaction triggers the event - possible options are dragAndDrop|modalDialog|sortStateChanged|removeButton|regroup
 * 
 * \@optionValue Define event handler function.
 * Event which is fired when the groupedColumns collection has changed. This event is fired also when group/ungroup from GroupBy modal dialog but key, layout and grid are not set
 * use args.owner in order to access the GroupBy widget object
 * use args.owner.grid to access the grid widget option
 * use args.groupedColumns to get a reference to the current groupedColumns
 * use args.key to get a reference to the current column"s key that"s being grouped
 * use args.layout to get a reference to the current layout object, if any
 * use args.grid to get a reference to the current child grid element, in case it's an hierarchical grid(not set if called from modal dialog)
 * use args.triggeredBy to get which user interaction triggers the event - possible options are dragAndDrop|modalDialog|sortStateChanged|removeButton|regroup
 * Event which is fired when the groupedColumns collection has changed. This event is fired also when group/ungroup from GroupBy modal dialog but key, layout and grid are not set
 * use args.owner in order to access the GroupBy widget object
 * use args.owner.grid to access the grid widget option
 * use args.groupedColumns to get a reference to the current groupedColumns
 * use args.key to get a reference to the current column"s key that"s being grouped
 * use args.layout to get a reference to the current layout object, if any
 * use args.grid to get a reference to the current child grid element, in case it's an hierarchical grid(not set if called from modal dialog)
 * use args.triggeredBy to get which user interaction triggers the event - possible options are dragAndDrop|modalDialog|sortStateChanged|removeButton|regroup
 * 
 * \@optionValue Define event handler function.
 * Event fired every time the GroupBy Dialog changes its position.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupBy widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.modalDialogElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Use ui.originalPosition to get the original position of the GroupBy Dialog div as { top, left } object, relative to the page.
 * Use ui.position to get the current position of the GroupBy Dialog div as { top, left } object, relative to the page.
 * Event fired every time the GroupBy Dialog changes its position.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupBy widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.modalDialogElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Use ui.originalPosition to get the original position of the GroupBy Dialog div as { top, left } object, relative to the page.
 * Use ui.position to get the current position of the GroupBy Dialog div as { top, left } object, relative to the page.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the modal dialog is closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupBy widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired before the modal dialog is closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupBy widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the modal dialog has been closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupBy widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired after the modal dialog has been closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupBy widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the modal dialog is opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupBy widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired before the modal dialog is opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupBy widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the modal dialog is already opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupBy widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired after the modal dialog is already opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupBy widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the contents of the modal dialog are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupby widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired before the contents of the modal dialog are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupby widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the contents of the modal dialog are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupBy widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired after the contents of the modal dialog are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupBy widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired when the button is Apply is clicked.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupby widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.groupedColumns to get the array of grouped columns
 * Use ui.groupedColumnLayouts to get array of column layouts
 * Use ui.sortingExpr to get array of sorted columns
 * Event fired when the button is Apply is clicked.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupby widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.groupedColumns to get the array of grouped columns
 * Use ui.groupedColumnLayouts to get array of column layouts
 * Use ui.sortingExpr to get array of sorted columns
 * 
 * \@optionValue Define event handler function.
 * Event fired when reset button is clicked.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupby widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired when reset button is clicked.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupby widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired when column in modal dialog is clicked to be grouped.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupby widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.key to get the key of the column to be grouped.
 * Use ui.layout to get the layout of the columns
 * Event fired when column in modal dialog is clicked to be grouped.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupby widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.key to get the key of the column to be grouped.
 * Use ui.layout to get the layout of the columns
 * 
 * \@optionValue Define event handler function.
 * Event fired when column in modal dialog is clicked to be grouped.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupby widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.key to get the key of the column to be grouped.
 * Use args.groupedColumns to get a reference to the current groupedColumns
 * Use ui.layout to get the layout of the columns
 * Event fired when column in modal dialog is clicked to be grouped.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupby widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.key to get the key of the column to be grouped.
 * Use args.groupedColumns to get a reference to the current groupedColumns
 * Use ui.layout to get the layout of the columns
 * 
 * \@optionValue Define event handler function.
 * Event fired when column in modal dialog is clicked to be ungrouped.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupby widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.key to get the key of the column to be grouped.
 * Use ui.layout to get the layout of the columns
 * Event fired when column in modal dialog is clicked to be ungrouped.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupby widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.key to get the key of the column to be grouped.
 * Use ui.layout to get the layout of the columns
 * 
 * \@optionValue Define event handler function.
 * Event fired when column in modal dialog is clicked to be ungrouped.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupby widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use args.groupedColumns to get a reference to the current groupedColumns
 * Use ui.key to get the key of the column to be grouped.
 * Use ui.layout to get the layout of the columns
 * Event fired when column in modal dialog is clicked to be ungrouped.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupby widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use args.groupedColumns to get a reference to the current groupedColumns
 * Use ui.key to get the key of the column to be grouped.
 * Use ui.layout to get the layout of the columns
 * 
 * \@optionValue Define event handler function.
 * Event fired when column in modal dialog is sorted.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupby widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.key to get the key of the column to be grouped.
 * Use ui.layout to get the layout of the columns
 * Use ui.isAsc to get whether column should be sorted ascending or descending
 * Event fired when column in modal dialog is sorted.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridGroupby widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.key to get the key of the column to be grouped.
 * Use ui.layout to get the layout of the columns
 * Use ui.isAsc to get whether column should be sorted ascending or descending
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgGridGroupBy} methodName_or_optionLiteral_or_options
 * @param {...string|!Array<?>|!IgGridGroupBy|?} key_or_data_or_rowId_or_optionName_or_options_or_methodParams
 * @return {void|!Array<?>|!Object|string|boolean|number|!Array<!IgGridGroupByGroupedColumn>|!IgGridGroupBySummarySettings|!IgGridGroupByColumnSettings|(string|number)|!GroupedColumnsChangingEvent|!GroupedColumnsChangedEvent|!ModalDialogMovingEvent|!ModalDialogClosingEvent|!ModalDialogClosedEvent|!ModalDialogOpeningEvent|!ModalDialogOpenedEvent|!ModalDialogContentsRenderingEvent|!ModalDialogContentsRenderedEvent|!ModalDialogButtonApplyClickEvent|!ModalDialogButtonResetClickEvent|!ModalDialogGroupingColumnEvent|!ModalDialogGroupColumnEvent|!ModalDialogUngroupingColumnEvent|!ModalDialogUngroupColumnEvent|!ModalDialogSortGroupedColumnEvent|!JQuery|?}
 */
JQuery.prototype.igGridGroupBy = function(methodName_or_optionLiteral_or_options, key_or_data_or_rowId_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgGridHidingColumnSetting() {}
 /** @type {string} */
IgGridHidingColumnSetting.prototype.columnKey;
 /** @type {number} */
IgGridHidingColumnSetting.prototype.columnIndex;
 /** @type {boolean} */
IgGridHidingColumnSetting.prototype.allowHiding;
 /** @type {boolean} */
IgGridHidingColumnSetting.prototype.hidden;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function ColumnHidingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColumnHidingEventUIParam() {}
 /** @type {?} */
ColumnHidingEventUIParam.prototype.owner;
 /** @type {?} */
ColumnHidingEventUIParam.prototype.columnIndex;
 /** @type {?} */
ColumnHidingEventUIParam.prototype.columnKey;
/**
 * @record
 * @struct
 */
function ColumnHidingRefusedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColumnHidingRefusedEventUIParam() {}
 /** @type {?} */
ColumnHidingRefusedEventUIParam.prototype.owner;
 /** @type {?} */
ColumnHidingRefusedEventUIParam.prototype.columnKeys;
/**
 * @record
 * @struct
 */
function ColumnShowingRefusedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColumnShowingRefusedEventUIParam() {}
 /** @type {?} */
ColumnShowingRefusedEventUIParam.prototype.owner;
 /** @type {?} */
ColumnShowingRefusedEventUIParam.prototype.columnKeys;
/**
 * @record
 * @struct
 */
function MultiColumnHidingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function MultiColumnHidingEventUIParam() {}
 /** @type {?} */
MultiColumnHidingEventUIParam.prototype.owner;
 /** @type {?} */
MultiColumnHidingEventUIParam.prototype.columnKeys;
/**
 * @record
 * @struct
 */
function ColumnHiddenEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColumnHiddenEventUIParam() {}
 /** @type {?} */
ColumnHiddenEventUIParam.prototype.owner;
 /** @type {?} */
ColumnHiddenEventUIParam.prototype.columnIndex;
 /** @type {?} */
ColumnHiddenEventUIParam.prototype.columnKey;
/**
 * @record
 * @struct
 */
function ColumnShowingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColumnShowingEventUIParam() {}
 /** @type {?} */
ColumnShowingEventUIParam.prototype.owner;
 /** @type {?} */
ColumnShowingEventUIParam.prototype.columnIndex;
 /** @type {?} */
ColumnShowingEventUIParam.prototype.columnKey;
/**
 * @record
 * @struct
 */
function ColumnShownEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColumnShownEventUIParam() {}
 /** @type {?} */
ColumnShownEventUIParam.prototype.owner;
 /** @type {?} */
ColumnShownEventUIParam.prototype.columnIndex;
 /** @type {?} */
ColumnShownEventUIParam.prototype.columnKey;
/**
 * @record
 * @struct
 */
function ColumnChooserOpeningEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColumnChooserOpeningEventUIParam() {}
 /** @type {?} */
ColumnChooserOpeningEventUIParam.prototype.owner;
 /** @type {?} */
ColumnChooserOpeningEventUIParam.prototype.columnChooserElement;
/**
 * @record
 * @struct
 */
function ColumnChooserOpenedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColumnChooserOpenedEventUIParam() {}
 /** @type {?} */
ColumnChooserOpenedEventUIParam.prototype.owner;
 /** @type {?} */
ColumnChooserOpenedEventUIParam.prototype.columnChooserElement;
/**
 * @record
 * @struct
 */
function ColumnChooserMovingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColumnChooserMovingEventUIParam() {}
 /** @type {?} */
ColumnChooserMovingEventUIParam.prototype.owner;
 /** @type {?} */
ColumnChooserMovingEventUIParam.prototype.columnChooserElement;
 /** @type {?} */
ColumnChooserMovingEventUIParam.prototype.originalPosition;
 /** @type {?} */
ColumnChooserMovingEventUIParam.prototype.position;
/**
 * @record
 * @struct
 */
function ColumnChooserClosingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColumnChooserClosingEventUIParam() {}
 /** @type {?} */
ColumnChooserClosingEventUIParam.prototype.owner;
 /** @type {?} */
ColumnChooserClosingEventUIParam.prototype.columnChooserElement;
/**
 * @record
 * @struct
 */
function ColumnChooserClosedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColumnChooserClosedEventUIParam() {}
 /** @type {?} */
ColumnChooserClosedEventUIParam.prototype.owner;
 /** @type {?} */
ColumnChooserClosedEventUIParam.prototype.columnChooserElement;
/**
 * @record
 * @struct
 */
function ColumnChooserContentsRenderingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColumnChooserContentsRenderingEventUIParam() {}
 /** @type {?} */
ColumnChooserContentsRenderingEventUIParam.prototype.owner;
 /** @type {?} */
ColumnChooserContentsRenderingEventUIParam.prototype.columnChooserElement;
/**
 * @record
 * @struct
 */
function ColumnChooserContentsRenderedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColumnChooserContentsRenderedEventUIParam() {}
 /** @type {?} */
ColumnChooserContentsRenderedEventUIParam.prototype.owner;
 /** @type {?} */
ColumnChooserContentsRenderedEventUIParam.prototype.columnChooserElement;
/**
 * @record
 * @struct
 */
function ColumnChooserButtonApplyClickEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColumnChooserButtonApplyClickEventUIParam() {}
 /** @type {?} */
ColumnChooserButtonApplyClickEventUIParam.prototype.owner;
 /** @type {?} */
ColumnChooserButtonApplyClickEventUIParam.prototype.columnChooserElement;
 /** @type {?} */
ColumnChooserButtonApplyClickEventUIParam.prototype.columnsToShow;
 /** @type {?} */
ColumnChooserButtonApplyClickEventUIParam.prototype.columnsToHide;
/**
 * @record
 * @struct
 */
function ColumnChooserButtonResetClickEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColumnChooserButtonResetClickEventUIParam() {}
 /** @type {?} */
ColumnChooserButtonResetClickEventUIParam.prototype.owner;
 /** @type {?} */
ColumnChooserButtonResetClickEventUIParam.prototype.columnChooserElement;
/**
 * @record
 * @struct
 */
function IgGridHiding() {}
 /** @type {!Array<!IgGridHidingColumnSetting>} */
IgGridHiding.prototype.columnSettings;
 /** @type {number} */
IgGridHiding.prototype.hiddenColumnIndicatorHeaderWidth;
 /** @type {string} */
IgGridHiding.prototype.columnChooserContainment;
 /** @type {string} */
IgGridHiding.prototype.columnChooserWidth;
 /** @type {string} */
IgGridHiding.prototype.columnChooserHeight;
 /** @type {number} */
IgGridHiding.prototype.dropDownAnimationDuration;
 /** @type {string} */
IgGridHiding.prototype.columnChooserCaptionText;
 /** @type {string} */
IgGridHiding.prototype.columnChooserDisplayText;
 /** @type {string} */
IgGridHiding.prototype.hiddenColumnIndicatorTooltipText;
 /** @type {string} */
IgGridHiding.prototype.columnHideText;
 /** @type {string} */
IgGridHiding.prototype.columnChooserShowText;
 /** @type {string} */
IgGridHiding.prototype.columnChooserHideText;
 /** @type {boolean} */
IgGridHiding.prototype.columnChooserHideOnClick;
 /** @type {string} */
IgGridHiding.prototype.columnChooserResetButtonLabel;
 /** @type {number} */
IgGridHiding.prototype.columnChooserAnimationDuration;
 /** @type {string} */
IgGridHiding.prototype.columnChooserButtonApplyText;
 /** @type {string} */
IgGridHiding.prototype.columnChooserButtonCancelText;
 /** @type {string} */
IgGridHiding.prototype.dialogWidget;
 /** @type {boolean} */
IgGridHiding.prototype.inherit;
 /** @type {!ColumnHidingEvent} */
IgGridHiding.prototype.columnHiding;
 /** @type {!ColumnHidingRefusedEvent} */
IgGridHiding.prototype.columnHidingRefused;
 /** @type {!ColumnShowingRefusedEvent} */
IgGridHiding.prototype.columnShowingRefused;
 /** @type {!MultiColumnHidingEvent} */
IgGridHiding.prototype.multiColumnHiding;
 /** @type {!ColumnHiddenEvent} */
IgGridHiding.prototype.columnHidden;
 /** @type {!ColumnShowingEvent} */
IgGridHiding.prototype.columnShowing;
 /** @type {!ColumnShownEvent} */
IgGridHiding.prototype.columnShown;
 /** @type {!ColumnChooserOpeningEvent} */
IgGridHiding.prototype.columnChooserOpening;
 /** @type {!ColumnChooserOpenedEvent} */
IgGridHiding.prototype.columnChooserOpened;
 /** @type {!ColumnChooserMovingEvent} */
IgGridHiding.prototype.columnChooserMoving;
 /** @type {!ColumnChooserClosingEvent} */
IgGridHiding.prototype.columnChooserClosing;
 /** @type {!ColumnChooserClosedEvent} */
IgGridHiding.prototype.columnChooserClosed;
 /** @type {!ColumnChooserContentsRenderingEvent} */
IgGridHiding.prototype.columnChooserContentsRendering;
 /** @type {!ColumnChooserContentsRenderedEvent} */
IgGridHiding.prototype.columnChooserContentsRendered;
 /** @type {!ColumnChooserButtonApplyClickEvent} */
IgGridHiding.prototype.columnChooserButtonApplyClick;
 /** @type {!ColumnChooserButtonResetClickEvent} */
IgGridHiding.prototype.columnChooserButtonResetClick;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridHidingMethods() {}

/**
 * Destroys the hiding widget
 * @return {void}
 */
IgGridHidingMethods.prototype.destroy = function() {};

/**
 * Shows the Column Chooser dialog. If it is visible the method does nothing.
 * @return {void}
 */
IgGridHidingMethods.prototype.showColumnChooser = function() {};

/**
 * Hides the Column Chooser dialog. If it is not visible the method does nothing.
 * @return {void}
 */
IgGridHidingMethods.prototype.hideColumnChooser = function() {};

/**
 * Shows a hidden column. If the column is not hidden the method does nothing.
 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
 * 
 * @param {!Object} column    An identifier for the column. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
 * @param {boolean=} isMultiColumnHeader    If it is true then the column is of type multicolumnheader. An identifier for the column should be of type string.
 * @param {!Function=} callback    Specifies a custom function to be called when the column(s) is shown(optional)
 * @return {void}
 */
IgGridHidingMethods.prototype.showColumn = function(column, isMultiColumnHeader, callback) {};

/**
 * Hides a visible column. If the column is hidden the method does nothing.
 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
 * 
 * @param {!Object} column    An identifier for the column. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
 * @param {boolean=} isMultiColumnHeader    If it is true then the column is of type multicolumnheader. An identifier for the column should be of type string.
 * @param {!Function=} callback    Specifies a custom function to be called when the column is hidden(optional)
 * @return {void}
 */
IgGridHidingMethods.prototype.hideColumn = function(column, isMultiColumnHeader, callback) {};

/**
 * Hides visible columns specified by the array. If the column is hidden the method does nothing.
 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
 * 
 * @param {!Array<?>} columns    An array of identifiers for the columns. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
 * @param {!Function=} callback    Specifies a custom function to be called when all columns are hidden(optional)
 * @return {void}
 */
IgGridHidingMethods.prototype.hideMultiColumns = function(columns, callback) {};

/**
 * Show visible columns specified by the array. If the column is shown the method does nothing.
 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
 * 
 * @param {!Array<?>} columns    An array of identifiers for the columns. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
 * @param {!Function=} callback    Specifies a custom function to be called when all columns are shown(optional)
 * @return {void}
 */
IgGridHidingMethods.prototype.showMultiColumns = function(columns, callback) {};

/**
 * Gets whether the reset button in the column chooser dialog is to be rendered or not.
 * @return {void}
 */
IgGridHidingMethods.prototype.isToRenderButtonReset = function() {};

/**
 * Reset hidden/shown column to initial state of dialog(when it is opened)
 * @return {void}
 */
IgGridHidingMethods.prototype.resetHidingColumnChooser = function() {};

/**
 * Renders the Reset button in the Column Chooser dialog.
 * @return {void}
 */
IgGridHidingMethods.prototype.renderColumnChooserResetButton = function() {};

/**
 * Remove Reset button in column chooser modal dialog
 * @return {void}
 */
IgGridHidingMethods.prototype.removeColumnChooserResetButton = function() {};

/**
 * @param {string} propertyName
 * @return {!IgGridHidingMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * A list of column settings that specifies hiding options on a per column basis.
 * 
 * A list of column settings that specifies hiding options on a per column basis.
 * 
 * 
 * \@optionValue New value to be set.
 * The width in pixels of the hidden column indicator in the header.
 * 
 * The width in pixels of the hidden column indicator in the header.
 * 
 * 
 * \@optionValue New value to be set.
 * Controls containment behavior.
 * 
 * owner  The column chooser dialog will be draggable only in the grid area
 * window  The column chooser dialog will be draggable in the whole window area
 * Controls containment behavior.
 * 
 * owner  The column chooser dialog will be draggable only in the grid area
 * window  The column chooser dialog will be draggable in the whole window area
 * 
 * \@optionValue New value to be set.
 * The default column chooser width.
 * 
 * The default column chooser width.
 * 
 * 
 * \@optionValue New value to be set.
 * The default column chooser height.
 * 
 * The default column chooser height.
 * 
 * 
 * \@optionValue New value to be set.
 * The duration of the dropdown animation in milliseconds.
 * 
 * The duration of the dropdown animation in milliseconds.
 * 
 * 
 * \@optionValue New value to be set.
 * The caption of the column chooser dialog.
 * 
 * The caption of the column chooser dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog.
 * 
 * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * The text displayed in the tooltip of the hidden column indicator.
 * 
 * The text displayed in the tooltip of the hidden column indicator.
 * 
 * 
 * \@optionValue New value to be set.
 * The text used in the drop down tools menu(Feature Chooser) to hide a column.
 * 
 * The text used in the drop down tools menu(Feature Chooser) to hide a column.
 * 
 * 
 * \@optionValue New value to be set.
 * The text used in the column chooser to show column
 * 
 * The text used in the column chooser to show column
 * 
 * 
 * \@optionValue New value to be set.
 * The text used in the column chooser to hide column
 * 
 * The text used in the column chooser to hide column
 * 
 * 
 * \@optionValue New value to be set.
 * Gets on click show/hide directly to be shown/hidden columns. If columnChooserHideOnClick is false then Apply and Cancel Buttons are shown on the bottom of modal dialog. Columns are Shown/Hidden after the Apply button is clicked
 * 
 * Sets on click show/hide directly to be shown/hidden columns. If columnChooserHideOnClick is false then Apply and Cancel Buttons are shown on the bottom of modal dialog. Columns are Shown/Hidden after the Apply button is clicked
 * 
 * 
 * \@optionValue New value to be set.
 * Text label for reset button.
 * 
 * Text label for reset button.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets time of milliseconds for animation duration to show/hide modal dialog
 * 
 * Sets time of milliseconds for animation duration to show/hide modal dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Gets text of button which apply changes in modal dialog
 * 
 * Sets text of button which apply changes in modal dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Gets text of button which cancel changes in modal dialog
 * 
 * Sets text of button which cancel changes in modal dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
 * 
 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * 
 * \@optionValue New value to be set.
 * Event fired before a hiding operation is executed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
 * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
 * Event fired before a hiding operation is executed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
 * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
 * 
 * \@optionValue Define event handler function.
 * Event fired when trying to hide all columns in fixed or unfixed area.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnKeys array of column keys. Has a value only if the column's key is a string.
 * Event fired when trying to hide all columns in fixed or unfixed area.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnKeys array of column keys. Has a value only if the column's key is a string.
 * 
 * \@optionValue Define event handler function.
 * Event fired when trying to show column(s) in fixed area and total width of fixed are will be larger than whole grid width.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnKeys array of column keys. Has a value only if the column's key is a string.
 * Event fired when trying to show column(s) in fixed area and total width of fixed are will be larger than whole grid width.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnKeys array of column keys. Has a value only if the column's key is a string.
 * 
 * \@optionValue Define event handler function.
 * Event fired before a hiding operation is executed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnKeys to get array of the hidden column keys. In case when click on Reset button in column chooser then this is an array of column keys.
 * Event fired before a hiding operation is executed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnKeys to get array of the hidden column keys. In case when click on Reset button in column chooser then this is an array of column keys.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the hiding has been executed and results are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
 * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
 * Event fired after the hiding has been executed and results are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
 * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
 * 
 * \@optionValue Define event handler function.
 * Event fired before a showing operation is executed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the shown column index.
 * Use ui.columnKey to get the shown column key.
 * Event fired before a showing operation is executed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the shown column index.
 * Use ui.columnKey to get the shown column key.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the showing has been executed and results are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the shown column index.
 * Use ui.columnKey to get the shown column key.
 * Event fired after the showing has been executed and results are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the shown column index.
 * Use ui.columnKey to get the shown column key.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the column chooser is opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Event fired before the column chooser is opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the column chooser is already opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Event fired after the column chooser is already opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired every time the column chooser changes its position.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Use ui.originalPosition to get the original position of the column chooser div as { top, left } object, relative to the page.
 * Use ui.position to get the current position of the column chooser div as { top, left } object, relative to the page.
 * Event fired every time the column chooser changes its position.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Use ui.originalPosition to get the original position of the column chooser div as { top, left } object, relative to the page.
 * Use ui.position to get the current position of the column chooser div as { top, left } object, relative to the page.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the column chooser is closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Event fired before the column chooser is closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the column chooser has been closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Event fired after the column chooser has been closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the contents of the column chooser are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Event fired before the contents of the column chooser are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the contents of the column chooser are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Event fired after the contents of the column chooser are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired when button Apply in column chooser is clicked
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Use ui.columnsToShow to get array of columns identifiers which should be shown
 * Use ui.columnsToHide to get array of columns identifiers which should be hidden
 * Event fired when button Apply in column chooser is clicked
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Use ui.columnsToShow to get array of columns identifiers which should be shown
 * Use ui.columnsToHide to get array of columns identifiers which should be hidden
 * 
 * \@optionValue Define event handler function.
 * Event fired when button Reset in column chooser is clicked
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Event fired when button Reset in column chooser is clicked
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgGridHiding} methodName_or_optionLiteral_or_options
 * @param {...!Object|!Array<?>|string|!IgGridHiding|?} column_or_columns_or_optionName_or_options_or_methodParams
 * @return {void|!Array<!IgGridHidingColumnSetting>|number|string|boolean|!ColumnHidingEvent|!ColumnHidingRefusedEvent|!ColumnShowingRefusedEvent|!MultiColumnHidingEvent|!ColumnHiddenEvent|!ColumnShowingEvent|!ColumnShownEvent|!ColumnChooserOpeningEvent|!ColumnChooserOpenedEvent|!ColumnChooserMovingEvent|!ColumnChooserClosingEvent|!ColumnChooserClosedEvent|!ColumnChooserContentsRenderingEvent|!ColumnChooserContentsRenderedEvent|!ColumnChooserButtonApplyClickEvent|!ColumnChooserButtonResetClickEvent|!JQuery|?}
 */
JQuery.prototype.igGridHiding = function(methodName_or_optionLiteral_or_options, column_or_columns_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgHierarchicalGridColumnLayout() {}
 /** @type {string} */
IgHierarchicalGridColumnLayout.prototype.key;
 /** @type {string} */
IgHierarchicalGridColumnLayout.prototype.primaryKey;
 /** @type {string} */
IgHierarchicalGridColumnLayout.prototype.foreignKey;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function RowExpandingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RowExpandingEventUIParam() {}
 /** @type {?} */
RowExpandingEventUIParam.prototype.owner;
 /** @type {?} */
RowExpandingEventUIParam.prototype.parentrow;
/**
 * @record
 * @struct
 */
function RowExpandedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RowExpandedEventUIParam() {}
 /** @type {?} */
RowExpandedEventUIParam.prototype.owner;
 /** @type {?} */
RowExpandedEventUIParam.prototype.parentrow;
/**
 * @record
 * @struct
 */
function RowCollapsingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RowCollapsingEventUIParam() {}
 /** @type {?} */
RowCollapsingEventUIParam.prototype.owner;
 /** @type {?} */
RowCollapsingEventUIParam.prototype.parentrow;
/**
 * @record
 * @struct
 */
function RowCollapsedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RowCollapsedEventUIParam() {}
 /** @type {?} */
RowCollapsedEventUIParam.prototype.owner;
 /** @type {?} */
RowCollapsedEventUIParam.prototype.parentrow;
/**
 * @record
 * @struct
 */
function ChildrenPopulatingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ChildrenPopulatingEventUIParam() {}
 /** @type {?} */
ChildrenPopulatingEventUIParam.prototype.owner;
 /** @type {?} */
ChildrenPopulatingEventUIParam.prototype.parentrow;
 /** @type {?} */
ChildrenPopulatingEventUIParam.prototype.id;
/**
 * @record
 * @struct
 */
function ChildrenPopulatedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ChildrenPopulatedEventUIParam() {}
 /** @type {?} */
ChildrenPopulatedEventUIParam.prototype.owner;
 /** @type {?} */
ChildrenPopulatedEventUIParam.prototype.parentrow;
 /** @type {?} */
ChildrenPopulatedEventUIParam.prototype.id;
/**
 * @record
 * @struct
 */
function ChildGridRenderedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ChildGridRenderedEventUIParam() {}
 /** @type {?} */
ChildGridRenderedEventUIParam.prototype.owner;
 /** @type {?} */
ChildGridRenderedEventUIParam.prototype.parentrow;
 /** @type {?} */
ChildGridRenderedEventUIParam.prototype.childgrid;
/**
 * @record
 * @struct
 */
function ChildGridCreatingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ChildGridCreatingEventUIParam() {}
/**
 * @record
 * @struct
 */
function ChildGridCreatedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ChildGridCreatedEventUIParam() {}
/**
 * @record
 * @struct
 */
function IgHierarchicalGrid() {}
 /** @type {number} */
IgHierarchicalGrid.prototype.initialDataBindDepth;
 /** @type {number} */
IgHierarchicalGrid.prototype.initialExpandDepth;
 /** @type {boolean} */
IgHierarchicalGrid.prototype.odata;
 /** @type {boolean} */
IgHierarchicalGrid.prototype.rest;
 /** @type {number} */
IgHierarchicalGrid.prototype.maxDataBindDepth;
 /** @type {string} */
IgHierarchicalGrid.prototype.defaultChildrenDataProperty;
 /** @type {boolean} */
IgHierarchicalGrid.prototype.autoGenerateLayouts;
 /** @type {boolean} */
IgHierarchicalGrid.prototype.expandCollapseAnimations;
 /** @type {number} */
IgHierarchicalGrid.prototype.expandColWidth;
 /** @type {string} */
IgHierarchicalGrid.prototype.pathSeparator;
 /** @type {number} */
IgHierarchicalGrid.prototype.animationDuration;
 /** @type {string} */
IgHierarchicalGrid.prototype.expandTooltip;
 /** @type {string} */
IgHierarchicalGrid.prototype.collapseTooltip;
 /** @type {!Array<?>} */
IgHierarchicalGrid.prototype.columns;
 /** @type {!Array<!IgHierarchicalGridColumnLayout>} */
IgHierarchicalGrid.prototype.columnLayouts;
 /** @type {!RowExpandingEvent} */
IgHierarchicalGrid.prototype.rowExpanding;
 /** @type {!RowExpandedEvent} */
IgHierarchicalGrid.prototype.rowExpanded;
 /** @type {!RowCollapsingEvent} */
IgHierarchicalGrid.prototype.rowCollapsing;
 /** @type {!RowCollapsedEvent} */
IgHierarchicalGrid.prototype.rowCollapsed;
 /** @type {!ChildrenPopulatingEvent} */
IgHierarchicalGrid.prototype.childrenPopulating;
 /** @type {!ChildrenPopulatedEvent} */
IgHierarchicalGrid.prototype.childrenPopulated;
 /** @type {!ChildGridRenderedEvent} */
IgHierarchicalGrid.prototype.childGridRendered;
 /** @type {!ChildGridCreatingEvent} */
IgHierarchicalGrid.prototype.childGridCreating;
 /** @type {!ChildGridCreatedEvent} */
IgHierarchicalGrid.prototype.childGridCreated;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgHierarchicalGridMethods() {}

/**
 * Data binds the hierarchical grid. No child grids will be created or rendered by default, unless there is initialExpandDepth >= 0 set.
 * @return {void}
 */
IgHierarchicalGridMethods.prototype.dataBind = function() {};

/**
 * Returns the element of the root grid (igGrid)
 * @return {!Object}
 */
IgHierarchicalGridMethods.prototype.root = function() {};

/**
 * Returns the widget object of the root grid (igGrid)
 * @return {!Object}
 */
IgHierarchicalGridMethods.prototype.rootWidget = function() {};

/**
 * Returns a flat list of all child grid widgets (not elements) - recursive
 * @return {!Object}
 */
IgHierarchicalGridMethods.prototype.allChildrenWidgets = function() {};

/**
 * Returns a flat list of all child grid elements (recursive)
 * @return {!Object}
 */
IgHierarchicalGridMethods.prototype.allChildren = function() {};

/**
 * Expands or collapses (toggles) a parent row
 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
 * 
 * @param {!Element} element     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
 * @param {!Function=} callback     Specifies a custom function to be called when parent row is toggled(optional). Takes 2 arguments - first is hierarchical grid object, second is the row element that was toggled
 * @return {void}
 */
IgHierarchicalGridMethods.prototype.toggle = function(element, callback) {};

/**
 * Expands (toggles) a parent row
 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
 * 
 * @param {!Element} id     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
 * @param {!Function=} callback     Specifies a custom function to be called when parent row is expanded(optional). Takes 2 arguments first is hierarchical grid object, second is the row element that was expanded
 * @return {void}
 */
IgHierarchicalGridMethods.prototype.expand = function(id, callback) {};

/**
 * Checks if a parent row is expanded or not
 * 
 * @param {!Element} element     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
 * @return {boolean}
 */
IgHierarchicalGridMethods.prototype.expanded = function(element) {};

/**
 * Collapses a parent row
 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
 * 
 * @param {!Element} id     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
 * @param {!Function=} callback     Specifies a custom function to be called when parent row is expanded(optional). Takes 2 arguments - first is hierarchical grid object, second is the row element that was collapsed
 * @return {void}
 */
IgHierarchicalGridMethods.prototype.collapse = function(id, callback) {};

/**
 * Checks if a parent row is currently collapsed
 * 
 * @param {!Element} element     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
 * @return {boolean}
 */
IgHierarchicalGridMethods.prototype.collapsed = function(element) {};

/**
 * Checks if a parent row is populated with data
 * 
 * @param {!Element} element     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
 * @return {boolean}
 */
IgHierarchicalGridMethods.prototype.populated = function(element) {};

/**
 * Commits pending transactions to the client data source for main and all child grids.
 * @return {void}
 */
IgHierarchicalGridMethods.prototype.commit = function() {};

/**
 * Clears the transaction log (delegates to igDataSource). Note that this does not update the UI. In case the UI must be updated, set the second parameter "updateUI" to true, which will trigger a call to dataBind() to re-render the contents.
 * 
 * @param {boolean=} rebind     Whether to perform a rebind.
 * @return {void}
 */
IgHierarchicalGridMethods.prototype.rollback = function(rebind) {};

/**
 * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
 * 
 * @param {!Function} success    Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
 * @param {!Function} error    Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
 * @return {void}
 */
IgHierarchicalGridMethods.prototype.saveChanges = function(success, error) {};

/**
 * Destroys the hierarchical grid by recursively destroying all child grids
 * @return {void}
 */
IgHierarchicalGridMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgHierarchicalGridMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Only the first level will be data-bound initially. Also serves as "render" depth, meaning that depending on this prop, the grid will
 * Only the first level will be data-bound initially. Also serves as "render" depth, meaning that depending on this prop, the grid will
 * 
 * \@optionValue New value to be set.
 * No levels will be automatically expanded when the widget is instantiated for the first time
 * No levels will be automatically expanded when the widget is instantiated for the first time
 * 
 * \@optionValue New value to be set.
 * If true, encodes all requests using OData conventions and the $expand syntax
 * If true, encodes all requests using OData conventions and the $expand syntax
 * 
 * \@optionValue New value to be set.
 * If true, load on demand will be achieved using REST compliant resource access with appropriate url-s for
 * the ajax GET calls.
 * If true, load on demand will be achieved using REST compliant resource access with appropriate url-s for
 * the ajax GET calls.
 * 
 * \@optionValue New value to be set.
 * Gets the limit on the number of levels to bind to
 * Sets the limit on the number of levels to bind to
 * 
 * \@optionValue New value to be set.
 * Gets the default property in the response where children will be located
 * Sets the default property in the response where children will be located
 * 
 * \@optionValue New value to be set.
 * If true, will autogenerate all layouts assuming default values for "childrenDataProperty"
 * When autoGenerateLayouts is enabled, it will automatically generate all columns recursively. (all columns on all levels)
 * If true, will autogenerate all layouts assuming default values for "childrenDataProperty"
 * When autoGenerateLayouts is enabled, it will automatically generate all columns recursively. (all columns on all levels)
 * 
 * \@optionValue New value to be set.
 * Applies a linear animation - either expanding or collapsing depending on the parent row state
 * Applies a linear animation - either expanding or collapsing depending on the parent row state
 * 
 * \@optionValue New value to be set.
 * Gets the expand column width
 * Sets the expand column width
 * 
 * \@optionValue New value to be set.
 * Gets the delimiter for constructing paths , for hierarchical lookup of data
 * Sets the delimiter for constructing paths , for hierarchical lookup of data
 * 
 * \@optionValue New value to be set.
 * The row expanding/collapsing animation duration in ms.
 * The row expanding/collapsing animation duration in ms.
 * 
 * \@optionValue New value to be set.
 * Gets the default tooltip applied to an expand column cell, that is currently collapsed
 * Sets the default tooltip applied to an expand column cell, that is currently collapsed
 * 
 * \@optionValue New value to be set.
 * Gets the default tooltip applied to an expand column cell, that is currently expanded
 * Sets the default tooltip applied to an expand column cell, that is currently expanded
 * 
 * \@optionValue New value to be set.
 * An array of column objects
 * An array of column objects
 * 
 * \@optionValue New value to be set.
 * List of columnLayout objects that specify the structure of the child grids. All options that are applicable to a flat grid are also applicable here
 * List of columnLayout objects that specify the structure of the child grids. All options that are applicable to a flat grid are also applicable here
 * 
 * \@optionValue New value to be set.
 * Event which is fired when a hierarchical row is about to be expanded
 * use args.owner to access the hierarchical grid object
 * use args.parentrow to access the row element for the row that's about to be expanded
 * Event which is fired when a hierarchical row is about to be expanded
 * use args.owner to access the hierarchical grid object
 * use args.parentrow to access the row element for the row that's about to be expanded
 * 
 * \@optionValue Define event handler function.
 * Event which is fired after a hierarchical row has been expanded
 * use args.owner to access the hierarchical grid object
 * use args.parentrow to access the row element for the row that was expanded
 * Event which is fired after a hierarchical row has been expanded
 * use args.owner to access the hierarchical grid object
 * use args.parentrow to access the row element for the row that was expanded
 * 
 * \@optionValue Define event handler function.
 * Event which is fired when a hierarchical row is about to be collapsed
 * use args.owner to access the hierarchical grid object
 * use args.parentrow to access the row element for the row that's about to be collapsed
 * Event which is fired when a hierarchical row is about to be collapsed
 * use args.owner to access the hierarchical grid object
 * use args.parentrow to access the row element for the row that's about to be collapsed
 * 
 * \@optionValue Define event handler function.
 * Event which is fired when a hierarchical row has been collapsed
 * use args.owner to access the hierarchical grid object
 * use args.parentrow to access the row element for the row that was collapsd
 * Event which is fired when a hierarchical row has been collapsed
 * use args.owner to access the hierarchical grid object
 * use args.parentrow to access the row element for the row that was collapsd
 * 
 * \@optionValue Define event handler function.
 * Event which is fired when children are about to be populated (Load on demand)
 * use args.owner to access the hierarchical grid object
 * use args.parentrow to access the row element for the row that's about to be populated
 * use args.id to get the data ID of the row
 * Event which is fired when children are about to be populated (Load on demand)
 * use args.owner to access the hierarchical grid object
 * use args.parentrow to access the row element for the row that's about to be populated
 * use args.id to get the data ID of the row
 * 
 * \@optionValue Define event handler function.
 * Event which is fired when children have been populated (Load on demand)
 * use args.owner to access the hierarchical grid object
 * use args.parentrow to access the row element for the row that was populated
 * use args.id to get the data ID of the row
 * Event which is fired when children have been populated (Load on demand)
 * use args.owner to access the hierarchical grid object
 * use args.parentrow to access the row element for the row that was populated
 * use args.id to get the data ID of the row
 * 
 * \@optionValue Define event handler function.
 * Event fired when child grid is rendered
 * use args.owner to access the hierarchical grid object
 * use args.parentrow to access the row element for the row that's about to be populated
 * use args.childgrid to get reference to the child grid
 * Event fired when child grid is rendered
 * use args.owner to access the hierarchical grid object
 * use args.parentrow to access the row element for the row that's about to be populated
 * use args.childgrid to get reference to the child grid
 * 
 * \@optionValue Define event handler function.
 * Event fired before a child grid is going to be created, allows the developer to override the child grid creation
 * Event fired before a child grid is going to be created, allows the developer to override the child grid creation
 * 
 * \@optionValue Define event handler function.
 * Event fired after a child grid is created
 * Event fired after a child grid is created
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgHierarchicalGrid} methodName_or_optionLiteral_or_options
 * @param {...!Element|boolean|!Function|string|!IgHierarchicalGrid|?=} element_or_id_or_rebind_or_success_or_optionName_or_options_or_methodParams
 * @return {void|!Object|boolean|number|string|!Array<?>|!Array<!IgHierarchicalGridColumnLayout>|!RowExpandingEvent|!RowExpandedEvent|!RowCollapsingEvent|!RowCollapsedEvent|!ChildrenPopulatingEvent|!ChildrenPopulatedEvent|!ChildGridRenderedEvent|!ChildGridCreatingEvent|!ChildGridCreatedEvent|!JQuery|?}
 */
JQuery.prototype.igHierarchicalGrid = function(methodName_or_optionLiteral_or_options, element_or_id_or_rebind_or_success_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function GroupCollapsingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function GroupCollapsingEventUIParam() {}
 /** @type {?} */
GroupCollapsingEventUIParam.prototype.owner;
 /** @type {?} */
GroupCollapsingEventUIParam.prototype.column;
 /** @type {?} */
GroupCollapsingEventUIParam.prototype.element;
/**
 * @record
 * @struct
 */
function GroupCollapsedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function GroupCollapsedEventUIParam() {}
 /** @type {?} */
GroupCollapsedEventUIParam.prototype.owner;
 /** @type {?} */
GroupCollapsedEventUIParam.prototype.column;
 /** @type {?} */
GroupCollapsedEventUIParam.prototype.element;
/**
 * @record
 * @struct
 */
function GroupExpandingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function GroupExpandingEventUIParam() {}
 /** @type {?} */
GroupExpandingEventUIParam.prototype.owner;
 /** @type {?} */
GroupExpandingEventUIParam.prototype.column;
 /** @type {?} */
GroupExpandingEventUIParam.prototype.element;
/**
 * @record
 * @struct
 */
function GroupExpandedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function GroupExpandedEventUIParam() {}
 /** @type {?} */
GroupExpandedEventUIParam.prototype.owner;
 /** @type {?} */
GroupExpandedEventUIParam.prototype.column;
 /** @type {?} */
GroupExpandedEventUIParam.prototype.element;
/**
 * @record
 * @struct
 */
function IgGridMultiColumnHeaders() {}
 /** @type {boolean} */
IgGridMultiColumnHeaders.prototype.inherit;
 /** @type {!GroupCollapsingEvent} */
IgGridMultiColumnHeaders.prototype.groupCollapsing;
 /** @type {!GroupCollapsedEvent} */
IgGridMultiColumnHeaders.prototype.groupCollapsed;
 /** @type {!GroupExpandingEvent} */
IgGridMultiColumnHeaders.prototype.groupExpanding;
 /** @type {!GroupExpandedEvent} */
IgGridMultiColumnHeaders.prototype.groupExpanded;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridMultiColumnHeadersMethods() {}

/**
 * Expands a collapsed group. If the group is expanded, the method does nothing.
 *             Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
 * 
 * @param {string} groupKey    Group key.
 * @param {!Function=} callback Specifies a custom function to be called when the group is expanded.
 * @return {void}
 */
IgGridMultiColumnHeadersMethods.prototype.expandGroup = function(groupKey, callback) {};

/**
 * Collapses an expanded group. If the group is collapsed, the method does nothing.
 *             Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
 * 
 * @param {string} groupKey Group key.
 * @param {!Function=} callback Specifies a custom function to be called when the group is collapsed.
 * @return {void}
 */
IgGridMultiColumnHeadersMethods.prototype.collapseGroup = function(groupKey, callback) {};

/**
 * Toggles a collapsible group.
 *             Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
 * 
 * @param {string} groupKey Group key.
 * @param {!Function=} callback Specifies a custom function to be called when the group is toggled.
 * @return {void}
 */
IgGridMultiColumnHeadersMethods.prototype.toggleGroup = function(groupKey, callback) {};

/**
 * Returns multicolumn headers array. if there aren"t multicolumn headers returns undefined
 * @return {!Array<?>}
 */
IgGridMultiColumnHeadersMethods.prototype.getMultiColumnHeaders = function() {};

/**
 * Destroys the multicolumn widget
 * @return {void}
 */
IgGridMultiColumnHeadersMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgGridMultiColumnHeadersMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * \@optionValue New value to be set.
 * Event fired before a group collapsing operation is executed.
 *             The handler function takes arguments evt and ui.
 *             Use ui.owner to get the reference to the GridMultiColumnHeaders widget.
 *             Use ui.owner.grid to get the reference to the grid widget.
 *             Use ui.column to get the column object for the current group that is collapsing.
 *             Use ui.element to get a reference to the jQuery object for the column being collapsing (th).
 * Event fired before a group collapsing operation is executed.
 *             The handler function takes arguments evt and ui.
 *             Use ui.owner to get the reference to the GridMultiColumnHeaders widget.
 *             Use ui.owner.grid to get the reference to the grid widget.
 *             Use ui.column to get the column object for the current group that is collapsing.
 *             Use ui.element to get a reference to the jQuery object for the column being collapsing (th).
 * 
 * \@optionValue Define event handler function.
 * Event fired after the group collapsing has been executed and results are rendered.
 *             The handler function takes arguments evt and ui.
 *             Use ui.owner to get the reference to the GridMultiColumnHeaders widget.
 *             Use ui.owner.grid to get the reference to the grid widget.
 *             Use ui.column to get the column object for the current group that is collapsed.
 *             Use ui.element to get a reference to the jQuery object for the column being collapsed (th).
 * Event fired after the group collapsing has been executed and results are rendered.
 *             The handler function takes arguments evt and ui.
 *             Use ui.owner to get the reference to the GridMultiColumnHeaders widget.
 *             Use ui.owner.grid to get the reference to the grid widget.
 *             Use ui.column to get the column object for the current group that is collapsed.
 *             Use ui.element to get a reference to the jQuery object for the column being collapsed (th).
 * 
 * \@optionValue Define event handler function.
 * Event fired before a group expanding operation is executed.
 *             The handler function takes arguments evt and ui.
 *             Use ui.owner to get the reference to the GridMultiColumnHeaders widget.
 *             Use ui.owner.grid to get the reference to the grid widget.
 *             Use ui.column to get the column object for the current group that is expanding.
 *             Use ui.element to get a reference to the jQuery object for the column being expanded (th).
 * Event fired before a group expanding operation is executed.
 *             The handler function takes arguments evt and ui.
 *             Use ui.owner to get the reference to the GridMultiColumnHeaders widget.
 *             Use ui.owner.grid to get the reference to the grid widget.
 *             Use ui.column to get the column object for the current group that is expanding.
 *             Use ui.element to get a reference to the jQuery object for the column being expanded (th).
 * 
 * \@optionValue Define event handler function.
 * Event fired after the group expanding has been executed and results are rendered.
 *             The handler function takes arguments evt and ui.
 *             Use ui.owner to get the reference to the GridMultiColumnHeaders widget.
 *             Use ui.owner.grid to get the reference to the grid widget.
 *             Use ui.column to get the column object for the current group that is expanded.
 *             Use ui.element to get a reference to the jQuery object for the column being expanded (th).
 * Event fired after the group expanding has been executed and results are rendered.
 *             The handler function takes arguments evt and ui.
 *             Use ui.owner to get the reference to the GridMultiColumnHeaders widget.
 *             Use ui.owner.grid to get the reference to the grid widget.
 *             Use ui.column to get the column object for the current group that is expanded.
 *             Use ui.element to get a reference to the jQuery object for the column being expanded (th).
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgGridMultiColumnHeaders} methodName_or_optionLiteral_or_options
 * @param {...string|!IgGridMultiColumnHeaders|?} groupKey_or_optionName_or_options_or_methodParams
 * @return {void|!Array<?>|boolean|!GroupCollapsingEvent|!GroupCollapsedEvent|!GroupExpandingEvent|!GroupExpandedEvent|!JQuery|?}
 */
JQuery.prototype.igGridMultiColumnHeaders = function(methodName_or_optionLiteral_or_options, groupKey_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function PageIndexChangingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function PageIndexChangingEventUIParam() {}
 /** @type {?} */
PageIndexChangingEventUIParam.prototype.owner;
 /** @type {?} */
PageIndexChangingEventUIParam.prototype.currentPageIndex;
 /** @type {?} */
PageIndexChangingEventUIParam.prototype.newPageIndex;
/**
 * @record
 * @struct
 */
function PageIndexChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function PageIndexChangedEventUIParam() {}
 /** @type {?} */
PageIndexChangedEventUIParam.prototype.owner;
 /** @type {?} */
PageIndexChangedEventUIParam.prototype.pageIndex;
/**
 * @record
 * @struct
 */
function PageSizeChangingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function PageSizeChangingEventUIParam() {}
 /** @type {?} */
PageSizeChangingEventUIParam.prototype.owner;
 /** @type {?} */
PageSizeChangingEventUIParam.prototype.currentPageSize;
 /** @type {?} */
PageSizeChangingEventUIParam.prototype.newPageSize;
/**
 * @record
 * @struct
 */
function PageSizeChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function PageSizeChangedEventUIParam() {}
 /** @type {?} */
PageSizeChangedEventUIParam.prototype.owner;
 /** @type {?} */
PageSizeChangedEventUIParam.prototype.pageSize;
/**
 * @record
 * @struct
 */
function PagerRenderingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function PagerRenderingEventUIParam() {}
 /** @type {?} */
PagerRenderingEventUIParam.prototype.owner;
 /** @type {?} */
PagerRenderingEventUIParam.prototype.dataSource;
/**
 * @record
 * @struct
 */
function PagerRenderedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function PagerRenderedEventUIParam() {}
 /** @type {?} */
PagerRenderedEventUIParam.prototype.owner;
 /** @type {?} */
PagerRenderedEventUIParam.prototype.dataSource;
/**
 * @record
 * @struct
 */
function IgGridPaging() {}
 /** @type {number} */
IgGridPaging.prototype.pageSize;
 /** @type {string} */
IgGridPaging.prototype.recordCountKey;
 /** @type {string} */
IgGridPaging.prototype.pageSizeUrlKey;
 /** @type {string} */
IgGridPaging.prototype.pageIndexUrlKey;
 /** @type {number} */
IgGridPaging.prototype.currentPageIndex;
 /** @type {string} */
IgGridPaging.prototype.type;
 /** @type {boolean} */
IgGridPaging.prototype.showPageSizeDropDown;
 /** @type {string} */
IgGridPaging.prototype.pageSizeDropDownLabel;
 /** @type {string} */
IgGridPaging.prototype.pageSizeDropDownTrailingLabel;
 /** @type {string} */
IgGridPaging.prototype.pageSizeDropDownLocation;
 /** @type {boolean} */
IgGridPaging.prototype.showPagerRecordsLabel;
 /** @type {string} */
IgGridPaging.prototype.pagerRecordsLabelTemplate;
 /** @type {string} */
IgGridPaging.prototype.nextPageLabelText;
 /** @type {string} */
IgGridPaging.prototype.prevPageLabelText;
 /** @type {string} */
IgGridPaging.prototype.firstPageLabelText;
 /** @type {string} */
IgGridPaging.prototype.lastPageLabelText;
 /** @type {boolean} */
IgGridPaging.prototype.showFirstLastPages;
 /** @type {boolean} */
IgGridPaging.prototype.showPrevNextPages;
 /** @type {string} */
IgGridPaging.prototype.currentPageDropDownLeadingLabel;
 /** @type {string} */
IgGridPaging.prototype.currentPageDropDownTrailingLabel;
 /** @type {string} */
IgGridPaging.prototype.currentPageDropDownTooltip;
 /** @type {string} */
IgGridPaging.prototype.pageSizeDropDownTooltip;
 /** @type {string} */
IgGridPaging.prototype.pagerRecordsLabelTooltip;
 /** @type {string} */
IgGridPaging.prototype.prevPageTooltip;
 /** @type {string} */
IgGridPaging.prototype.nextPageTooltip;
 /** @type {string} */
IgGridPaging.prototype.firstPageTooltip;
 /** @type {string} */
IgGridPaging.prototype.lastPageTooltip;
 /** @type {string} */
IgGridPaging.prototype.pageTooltipFormat;
 /** @type {?} */
IgGridPaging.prototype.pageSizeList;
 /** @type {number} */
IgGridPaging.prototype.pageCountLimit;
 /** @type {number} */
IgGridPaging.prototype.visiblePageCount;
 /** @type {number} */
IgGridPaging.prototype.defaultDropDownWidth;
 /** @type {number} */
IgGridPaging.prototype.delayOnPageChanged;
 /** @type {boolean} */
IgGridPaging.prototype.persist;
 /** @type {boolean} */
IgGridPaging.prototype.inherit;
 /** @type {!PageIndexChangingEvent} */
IgGridPaging.prototype.pageIndexChanging;
 /** @type {!PageIndexChangedEvent} */
IgGridPaging.prototype.pageIndexChanged;
 /** @type {!PageSizeChangingEvent} */
IgGridPaging.prototype.pageSizeChanging;
 /** @type {!PageSizeChangedEvent} */
IgGridPaging.prototype.pageSizeChanged;
 /** @type {!PagerRenderingEvent} */
IgGridPaging.prototype.pagerRendering;
 /** @type {!PagerRenderedEvent} */
IgGridPaging.prototype.pagerRendered;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridPagingMethods() {}

/**
 * Gets/Sets the current page index, delegates data binding and paging to [$.ig.DataSource](ig.datasource).
 * 
 * @param {number=} index     The page index to go to.
 * @return {number}
 */
IgGridPagingMethods.prototype.pageIndex = function(index) {};

/**
 * Gets/Sets the page size. If no parameter is specified, just returns the current page size.
 * 
 * @param {number=} size     The new page size.
 * @return {number}
 */
IgGridPagingMethods.prototype.pageSize = function(size) {};

/**
 * Destroys the igGridPaging feature by removing all elements in the pager area, unbinding events, and resetting data to discard data filtering on paging.
 * @return {void}
 */
IgGridPagingMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgGridPagingMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Number of records loaded and displayed per page.
 * 
 * Number of records loaded and displayed per page.
 * 
 * 
 * \@optionValue New value to be set.
 * The property in the response data, when using remote data source, that will hold the total number of records in the data source.
 * 
 * The property in the response data, when using remote data source, that will hold the total number of records in the data source.
 * 
 * 
 * \@optionValue New value to be set.
 * Denotes the name of the encoded URL parameter that will state what is the currently requested page size.
 * 
 * Denotes the name of the encoded URL parameter that will state what is the currently requested page size.
 * 
 * 
 * \@optionValue New value to be set.
 * Denotes the name of the encoded URL parameter that will state what is the currently requested page index.
 * 
 * Denotes the name of the encoded URL parameter that will state what is the currently requested page index.
 * 
 * 
 * \@optionValue New value to be set.
 * Current page index that's bound in the data source and rendered in the UI.
 * 
 * Current page index that's bound in the data source and rendered in the UI.
 * 
 * 
 * \@optionValue New value to be set.
 * Type of paging. Delegates all paging functionality to the [$.ig.DataSource](ig.datasource).
 * 
 * Type of paging. Delegates all paging functionality to the [$.ig.DataSource](ig.datasource).
 * 
 * 
 * \@optionValue New value to be set.
 * If false, a dropdown allowing to change the page size will not be rendered in the UI.
 * 
 * If false, a dropdown allowing to change the page size will not be rendered in the UI.
 * 
 * 
 * \@optionValue New value to be set.
 * Text rendered in front of the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
 * 
 * Text rendered in front of the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
 * 
 * 
 * \@optionValue New value to be set.
 * Trailing text for the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
 * 
 * Trailing text for the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
 * 
 * 
 * \@optionValue New value to be set.
 * Page size dropdown location, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true. Can be rendered above the grid header or inside the pager, next to the page links.
 * 
 * Page size dropdown location, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true. Can be rendered above the grid header or inside the pager, next to the page links.
 * 
 * 
 * \@optionValue New value to be set.
 * Option specifying whether to show summary label for the currently rendered records or not.
 * 
 * Option specifying whether to show summary label for the currently rendered records or not.
 * 
 * 
 * \@optionValue New value to be set.
 * Custom pager records label template - in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax.
 * 
 * Custom pager records label template - in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax.
 * 
 * 
 * \@optionValue New value to be set.
 * Text for the next page label.
 * 
 * Text for the next page label.
 * 
 * 
 * \@optionValue New value to be set.
 * Text for the previous page label.
 * 
 * Text for the previous page label.
 * 
 * 
 * \@optionValue New value to be set.
 * Text for the first page label.
 * 
 * Text for the first page label.
 * 
 * 
 * \@optionValue New value to be set.
 * Text for the last page label.
 * 
 * Text for the last page label.
 * 
 * 
 * \@optionValue New value to be set.
 * Option specifying whether to render the first and last page navigation buttons.
 * 
 * Option specifying whether to render the first and last page navigation buttons.
 * 
 * 
 * \@optionValue New value to be set.
 * Option specifying whether to render the previous and next page navigation buttons.
 * 
 * Option specifying whether to render the previous and next page navigation buttons.
 * 
 * 
 * \@optionValue New value to be set.
 * Leading label text for the drop down from where the page index can be switched.
 * 
 * Leading label text for the drop down from where the page index can be switched.
 * 
 * 
 * \@optionValue New value to be set.
 * Trailing label text for the drop down from where the page index can be switched.
 * 
 * Trailing label text for the drop down from where the page index can be switched.
 * 
 * 
 * \@optionValue New value to be set.
 * Tooltip text for the page index drop down.
 * 
 * Tooltip text for the page index drop down.
 * 
 * 
 * \@optionValue New value to be set.
 * Tooltip text for the page size drop down.
 * 
 * Tooltip text for the page size drop down.
 * 
 * 
 * \@optionValue New value to be set.
 * Tooltip text for the pager records label.
 * 
 * Tooltip text for the pager records label.
 * 
 * 
 * \@optionValue New value to be set.
 * Tooltip text for the previous page button.
 * 
 * Tooltip text for the previous page button.
 * 
 * 
 * \@optionValue New value to be set.
 * Tooltip text for the next page button.
 * 
 * Tooltip text for the next page button.
 * 
 * 
 * \@optionValue New value to be set.
 * Tooltip text for the first page button.
 * 
 * Tooltip text for the first page button.
 * 
 * 
 * \@optionValue New value to be set.
 * Tooltip text for the last page button.
 * 
 * Tooltip text for the last page button.
 * 
 * 
 * \@optionValue New value to be set.
 * Tooltip text templates of buttons that navigate to a particular page. The format string follows the [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax. See also the [pageCountLimit](ui.iggridpaging#options:pageCountLimit) option.
 * 
 * Tooltip text templates of buttons that navigate to a particular page. The format string follows the [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax. See also the [pageCountLimit](ui.iggridpaging#options:pageCountLimit) option.
 * 
 * 
 * \@optionValue New value to be set.
 * Predefined page sizes that are available to the end user to switch their grid paging to, through a drop down in the grid header.
 * 
 * Predefined page sizes that are available to the end user to switch their grid paging to, through a drop down in the grid header.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets/Gets the number of pages which if exceeded a drop down list of page indices is displayed. If the number of pages is less than or equal to this option then buttons for each page are displayed.
 * 
 * Sets/ the number of pages which if exceeded a drop down list of page indices is displayed. If the number of pages is less than or equal to this option then buttons for each page are displayed.
 * 
 * 
 * \@optionValue New value to be set.
 * Number of page buttons, adjacent to and including the [active page](ui.iggridpaging#options:currentPageIndex), that are constantly visible. For the invisible pages, previous and next buttons are used.
 * 
 * Number of page buttons, adjacent to and including the [active page](ui.iggridpaging#options:currentPageIndex), that are constantly visible. For the invisible pages, previous and next buttons are used.
 * 
 * 
 * \@optionValue New value to be set.
 * Drop down width for the page size and page index drop downs.
 * 
 * Drop down width for the page size and page index drop downs.
 * 
 * 
 * \@optionValue New value to be set.
 * Time in milliseconds for which page drop down will wait for keystrokes before changing the page.
 * 
 * Time in milliseconds for which page drop down will wait for keystrokes before changing the page.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables paging persistence between states.
 * 
 * Enables/disables paging persistence between states.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * 
 * \@optionValue New value to be set.
 * Event fired before the page index is changed.
 * Return false in order to cancel page index changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.currentPageIndex to get current page index.
 * Use ui.newPageIndex to get new page index.
 * Event fired before the page index is changed.
 * Return false in order to cancel page index changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.currentPageIndex to get current page index.
 * Use ui.newPageIndex to get new page index.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the page index is changed , but before grid data rebinds
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.pageIndex to get current page index.
 * Event fired after the page index is changed , but before grid data rebinds
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.pageIndex to get current page index.
 * 
 * \@optionValue Define event handler function.
 * Event fired when the page size is about to be changed from the page size dropdown.
 * Return false in order to cancel page size changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.currentPageSize to get current page size.
 * Use ui.newPageSize to get new page size.
 * Event fired when the page size is about to be changed from the page size dropdown.
 * Return false in order to cancel page size changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.currentPageSize to get current page size.
 * Use ui.newPageSize to get new page size.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the page size is changed from the page size dropdown.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.pageSize to get current page size.
 * Event fired after the page size is changed from the page size dropdown.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.pageSize to get current page size.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the pager footer is rendered (the whole area below the grid records).
 * Return false in order to cancel pager footer rendering.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.dataSource to get reference to grid's data source.
 * Event fired before the pager footer is rendered (the whole area below the grid records).
 * Return false in order to cancel pager footer rendering.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.dataSource to get reference to grid's data source.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the pager footer is rendered
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.dataSource to get reference to grid's data source.
 * Event fired after the pager footer is rendered
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.dataSource to get reference to grid's data source.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgGridPaging} methodName_or_optionLiteral_or_options
 * @param {...number|string|!IgGridPaging|?=} index_or_size_or_optionName_or_options_or_methodParams
 * @return {number|void|string|boolean|?|!PageIndexChangingEvent|!PageIndexChangedEvent|!PageSizeChangingEvent|!PageSizeChangedEvent|!PagerRenderingEvent|!PagerRenderedEvent|!JQuery}
 */
JQuery.prototype.igGridPaging = function(methodName_or_optionLiteral_or_options, index_or_size_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgGridResizingColumnSetting() {}
 /** @type {string} */
IgGridResizingColumnSetting.prototype.columnKey;
 /** @type {number} */
IgGridResizingColumnSetting.prototype.columnIndex;
 /** @type {boolean} */
IgGridResizingColumnSetting.prototype.allowResizing;
 /** @type {(string|number)} */
IgGridResizingColumnSetting.prototype.minimumWidth;
 /** @type {(string|number)} */
IgGridResizingColumnSetting.prototype.maximumWidth;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function ColumnResizingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColumnResizingEventUIParam() {}
 /** @type {?} */
ColumnResizingEventUIParam.prototype.owner;
 /** @type {?} */
ColumnResizingEventUIParam.prototype.columnIndex;
 /** @type {?} */
ColumnResizingEventUIParam.prototype.columnKey;
 /** @type {?} */
ColumnResizingEventUIParam.prototype.desiredWidth;
/**
 * @record
 * @struct
 */
function ColumnResizingRefusedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColumnResizingRefusedEventUIParam() {}
 /** @type {?} */
ColumnResizingRefusedEventUIParam.prototype.owner;
 /** @type {?} */
ColumnResizingRefusedEventUIParam.prototype.columnIndex;
 /** @type {?} */
ColumnResizingRefusedEventUIParam.prototype.columnKey;
 /** @type {?} */
ColumnResizingRefusedEventUIParam.prototype.desiredWidth;
/**
 * @record
 * @struct
 */
function ColumnResizedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColumnResizedEventUIParam() {}
 /** @type {?} */
ColumnResizedEventUIParam.prototype.owner;
 /** @type {?} */
ColumnResizedEventUIParam.prototype.columnIndex;
 /** @type {?} */
ColumnResizedEventUIParam.prototype.columnKey;
 /** @type {?} */
ColumnResizedEventUIParam.prototype.originalWidth;
 /** @type {?} */
ColumnResizedEventUIParam.prototype.newWidth;
/**
 * @record
 * @struct
 */
function IgGridResizing() {}
 /** @type {boolean} */
IgGridResizing.prototype.allowDoubleClickToResize;
 /** @type {boolean} */
IgGridResizing.prototype.deferredResizing;
 /** @type {!Array<!IgGridResizingColumnSetting>} */
IgGridResizing.prototype.columnSettings;
 /** @type {number} */
IgGridResizing.prototype.handleThreshold;
 /** @type {boolean} */
IgGridResizing.prototype.inherit;
 /** @type {!ColumnResizingEvent} */
IgGridResizing.prototype.columnResizing;
 /** @type {!ColumnResizingRefusedEvent} */
IgGridResizing.prototype.columnResizingRefused;
 /** @type {!ColumnResizedEvent} */
IgGridResizing.prototype.columnResized;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridResizingMethods() {}

/**
 * Destroys the resizing widget
 * @return {void}
 */
IgGridResizingMethods.prototype.destroy = function() {};

/**
 * Resizes a column to a specified width in pixels, percents or auto if no width is specified.
 * 
 * @param {!Object} column    An identifier for the column. If a number is provided it will be used as a columnIndex else if a strings is provided it will be used as a columnKey.
 * @param {!Object=} width    Width of the column in pixels or percents. If no width or "*" is specified the column will be auto-sized to the width of the data in it (including header and footer cells).
 * @return {void}
 */
IgGridResizingMethods.prototype.resize = function(column, width) {};

/**
 * @param {string} propertyName
 * @return {!IgGridResizingMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Resize the column to the size of the longest currently visible cell value.
 * 
 * Resize the column to the size of the longest currently visible cell value.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets whether the resizing should be deferred until the user finishes resizing or applied immediately.
 * 
 * Sets whether the resizing should be deferred until the user finishes resizing or applied immediately.
 * 
 * 
 * \@optionValue New value to be set.
 * A list of column settings that specifies resizing options on a per column basis.
 * 
 * A list of column settings that specifies resizing options on a per column basis.
 * 
 * 
 * \@optionValue New value to be set.
 * The width in pixels of the resizing handle which is position at the right side of each resizeable column header.
 * 
 * The width in pixels of the resizing handle which is position at the right side of each resizeable column header.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * \@optionValue New value to be set.
 * Event fired before a resizing operation is executed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridResizing widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the resized column index.
 * Use ui.columnKey to get the resized column key.
 * Use ui.desiredWidth to get the desired width(before min/max coercion) for the resized column.
 * Event fired before a resizing operation is executed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridResizing widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the resized column index.
 * Use ui.columnKey to get the resized column key.
 * Use ui.desiredWidth to get the desired width(before min/max coercion) for the resized column.
 * 
 * \@optionValue Define event handler function.
 * Event fired(only when columnFixing is enabled) when trying to resize column in fixed area so total width of unfixed area to be less than minimalVisibleAreaWidth(option defined in columnFixing)
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridResizing widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the resized column index.
 * Use ui.columnKey to get the resized column key.
 * Use ui.desiredWidth to get the desired width(before min/max coercion) for the resized column.
 * Event fired(only when columnFixing is enabled) when trying to resize column in fixed area so total width of unfixed area to be less than minimalVisibleAreaWidth(option defined in columnFixing)
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridResizing widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the resized column index.
 * Use ui.columnKey to get the resized column key.
 * Use ui.desiredWidth to get the desired width(before min/max coercion) for the resized column.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the resizing has been executed and results are rendered
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridResizing widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the resized column index.
 * Use ui.columnKey to get the resized column key.
 * Use ui.originalWidth to get the original column width.
 * Use ui.newWidth to get the final column width after resizing.
 * Event fired after the resizing has been executed and results are rendered
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridResizing widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the resized column index.
 * Use ui.columnKey to get the resized column key.
 * Use ui.originalWidth to get the original column width.
 * Use ui.newWidth to get the final column width after resizing.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgGridResizing} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgGridResizing|?} column_or_optionName_or_options_or_methodParams
 * @return {void|boolean|!Array<!IgGridResizingColumnSetting>|number|!ColumnResizingEvent|!ColumnResizingRefusedEvent|!ColumnResizedEvent|!JQuery|?}
 */
JQuery.prototype.igGridResizing = function(methodName_or_optionLiteral_or_options, column_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgGridResponsiveColumnSetting() {}
 /** @type {string} */
IgGridResponsiveColumnSetting.prototype.columnKey;
 /** @type {number} */
IgGridResponsiveColumnSetting.prototype.columnIndex;
 /** @type {string} */
IgGridResponsiveColumnSetting.prototype.classes;
 /** @type {?} */
IgGridResponsiveColumnSetting.prototype.configuration;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridResponsiveAllowedColumnWidthPerType() {}
 /** @type {number} */
IgGridResponsiveAllowedColumnWidthPerType.prototype.string;
 /** @type {number} */
IgGridResponsiveAllowedColumnWidthPerType.prototype.number;
 /** @type {number} */
IgGridResponsiveAllowedColumnWidthPerType.prototype.bool;
 /** @type {number} */
IgGridResponsiveAllowedColumnWidthPerType.prototype.date;
 /** @type {number} */
IgGridResponsiveAllowedColumnWidthPerType.prototype.object;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function ResponsiveColumnHidingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ResponsiveColumnHidingEventUIParam() {}
 /** @type {?} */
ResponsiveColumnHidingEventUIParam.prototype.owner;
 /** @type {?} */
ResponsiveColumnHidingEventUIParam.prototype.columnIndex;
 /** @type {?} */
ResponsiveColumnHidingEventUIParam.prototype.columnKey;
/**
 * @record
 * @struct
 */
function ResponsiveColumnHiddenEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ResponsiveColumnHiddenEventUIParam() {}
 /** @type {?} */
ResponsiveColumnHiddenEventUIParam.prototype.owner;
 /** @type {?} */
ResponsiveColumnHiddenEventUIParam.prototype.columnIndex;
 /** @type {?} */
ResponsiveColumnHiddenEventUIParam.prototype.columnKey;
/**
 * @record
 * @struct
 */
function ResponsiveColumnShowingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ResponsiveColumnShowingEventUIParam() {}
 /** @type {?} */
ResponsiveColumnShowingEventUIParam.prototype.owner;
 /** @type {?} */
ResponsiveColumnShowingEventUIParam.prototype.columnIndex;
 /** @type {?} */
ResponsiveColumnShowingEventUIParam.prototype.columnKey;
/**
 * @record
 * @struct
 */
function ResponsiveColumnShownEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ResponsiveColumnShownEventUIParam() {}
 /** @type {?} */
ResponsiveColumnShownEventUIParam.prototype.owner;
 /** @type {?} */
ResponsiveColumnShownEventUIParam.prototype.columnIndex;
 /** @type {?} */
ResponsiveColumnShownEventUIParam.prototype.columnKey;
/**
 * @record
 * @struct
 */
function ResponsiveModeChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ResponsiveModeChangedEventUIParam() {}
 /** @type {?} */
ResponsiveModeChangedEventUIParam.prototype.owner;
 /** @type {?} */
ResponsiveModeChangedEventUIParam.prototype.previousMode;
 /** @type {?} */
ResponsiveModeChangedEventUIParam.prototype.mode;
/**
 * @record
 * @struct
 */
function IgGridResponsive() {}
 /** @type {!Array<!IgGridResponsiveColumnSetting>} */
IgGridResponsive.prototype.columnSettings;
 /** @type {boolean} */
IgGridResponsive.prototype.reactOnContainerWidthChanges;
 /** @type {boolean} */
IgGridResponsive.prototype.forceResponsiveGridWidth;
 /** @type {number} */
IgGridResponsive.prototype.responsiveSensitivity;
 /** @type {?} */
IgGridResponsive.prototype.responsiveModes;
 /** @type {boolean} */
IgGridResponsive.prototype.enableVerticalRendering;
 /** @type {(string|number)} */
IgGridResponsive.prototype.windowWidthToRenderVertically;
 /** @type {(string|number)} */
IgGridResponsive.prototype.propertiesColumnWidth;
 /** @type {(string|number)} */
IgGridResponsive.prototype.valuesColumnWidth;
 /** @type {!IgGridResponsiveAllowedColumnWidthPerType} */
IgGridResponsive.prototype.allowedColumnWidthPerType;
 /** @type {?} */
IgGridResponsive.prototype.singleColumnTemplate;
 /** @type {boolean} */
IgGridResponsive.prototype.inherit;
 /** @type {!ResponsiveColumnHidingEvent} */
IgGridResponsive.prototype.responsiveColumnHiding;
 /** @type {!ResponsiveColumnHiddenEvent} */
IgGridResponsive.prototype.responsiveColumnHidden;
 /** @type {!ResponsiveColumnShowingEvent} */
IgGridResponsive.prototype.responsiveColumnShowing;
 /** @type {!ResponsiveColumnShownEvent} */
IgGridResponsive.prototype.responsiveColumnShown;
 /** @type {!ResponsiveModeChangedEvent} */
IgGridResponsive.prototype.responsiveModeChanged;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridResponsiveMethods() {}

/**
 * Destroys the responsive widget.
 * @return {void}
 */
IgGridResponsiveMethods.prototype.destroy = function() {};

/**
 * Returns the currently active responsive mode.
 * @return {void}
 */
IgGridResponsiveMethods.prototype.getCurrentResponsiveMode = function() {};

/**
 * @param {string} propertyName
 * @return {!IgGridResponsiveMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function ResponsiveModeSettings() {}
 /** @type {number} */
ResponsiveModeSettings.prototype.minWidth;
 /** @type {?} */
ResponsiveModeSettings.prototype.maxWidth;
 /** @type {number} */
ResponsiveModeSettings.prototype.minHeight;
 /** @type {?} */
ResponsiveModeSettings.prototype.maxHeight;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!ResponsiveModeSettings} settings
 */
Infragistics.ResponsiveMode = function(settings) {};

/**
 * @return {void}
 */
Infragistics.ResponsiveMode.prototype.isActive = function() {};
 /** @type {?} */
IgniteUIStatic.prototype.ResponsiveMode;
/**
 * @record
 * @struct
 */
function InfragisticsModeSettings() {}
 /** @type {string} */
InfragisticsModeSettings.prototype.key;
 /** @type {?} */
InfragisticsModeSettings.prototype.visibilityTester;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!InfragisticsModeSettings} settings
 */
Infragistics.InfragisticsMode = function(settings) {};

/**
 * @return {void}
 */
Infragistics.InfragisticsMode.prototype.isActive = function() {};
 /** @type {?} */
IgniteUIStatic.prototype.InfragisticsMode;
/**
 * @record
 * @struct
 */
function BootstrapModeSettings() {}
 /** @type {string} */
BootstrapModeSettings.prototype.key;
 /** @type {?} */
BootstrapModeSettings.prototype.visibilityTester;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!BootstrapModeSettings} settings
 */
Infragistics.BootstrapMode = function(settings) {};

/**
 * @return {void}
 */
Infragistics.BootstrapMode.prototype.isActive = function() {};
 /** @type {?} */
IgniteUIStatic.prototype.BootstrapMode;

/**
 * A list of column settings that specifies how columns will react based on the environment the grid is run on.
 * 
 * A list of column settings that specifies how columns will react based on the environment the grid is run on.
 * 
 * 
 * \@optionValue New value to be set.
 * If this option is set to true an igResponsiveContainer widget will be attached to the igGrid control which will notify the feature when changes in the width of the container occur.
 * 
 * If this option is set to true an igResponsiveContainer widget will be attached to the igGrid control which will notify the feature when changes in the width of the container occur.
 * 
 * 
 * \@optionValue New value to be set.
 * If this option is set to true the widget will ensure the grid's width is always set to 100%.
 * 
 * If this option is set to true the widget will ensure the grid's width is always set to 100%.
 * 
 * 
 * \@optionValue New value to be set.
 * The amount of pixels the window needs to resize with for the grid to respond.
 * 
 * The amount of pixels the window needs to resize with for the grid to respond.
 * 
 * 
 * \@optionValue New value to be set.
 * The recognized types of environments and their configuration.
 * 
 * The recognized types of environments and their configuration.
 * 
 * 
 * \@optionValue New value to be set.
 * Enable or disable the responsive vertical rendering for the grid.
 * 
 * Enable or disable the responsive vertical rendering for the grid.
 * 
 * 
 * \@optionValue New value to be set.
 * The window's width under which the grid will render its contents vertically.
 * 
 * The window's width under which the grid will render its contents vertically.
 * 
 * 
 * \@optionValue New value to be set.
 * The width of the properties column when vertical rendering is enabled
 * 
 * The width of the properties column when vertical rendering is enabled
 * 
 * 
 * \@optionValue New value to be set.
 * The width of the values column when vertical rendering is enabled
 * 
 * The width of the values column when vertical rendering is enabled
 * 
 * 
 * \@optionValue New value to be set.
 * When windowWidthToRenderVertically is null, determine minimal widths columns can take before
 * forcing vertical rendering for the grid
 * 
 * When windowWidthToRenderVertically is null, determine minimal widths columns can take before
 * forcing vertical rendering for the grid
 * 
 * 
 * \@optionValue New value to be set.
 * Gets a template to render a record with in a list-view style layout per mode.
 * 
 * Sets a template to render a record with in a list-view style layout per mode.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * \@optionValue New value to be set.
 * Event fired before a hiding operation is executed on a collection of columns.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridResponsive widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
 * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
 * Event fired before a hiding operation is executed on a collection of columns.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridResponsive widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
 * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a hiding operation is executed on the collection of columns.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridResponsive widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
 * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
 * Event fired after a hiding operation is executed on the collection of columns.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridResponsive widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
 * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
 * 
 * \@optionValue Define event handler function.
 * Event fired before a showing operation is executed on a collection of columns.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridResponsive widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.columnIndex to get the shown column index. Has a value only if the column's key is a number.
 * Use ui.columnKey to get the shown column key. Has a value only if the column's key is a string.
 * Event fired before a showing operation is executed on a collection of columns.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridResponsive widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.columnIndex to get the shown column index. Has a value only if the column's key is a number.
 * Use ui.columnKey to get the shown column key. Has a value only if the column's key is a string.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a showing operation is executed on the collection of columns.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridResponsive widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.columnIndex to get the shown column index. Has a value only if the column's key is a number.
 * Use ui.columnKey to get the shown column key. Has a value only if the column's key is a string.
 * Event fired after a showing operation is executed on the collection of columns.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridResponsive widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.columnIndex to get the shown column index. Has a value only if the column's key is a number.
 * Use ui.columnKey to get the shown column key. Has a value only if the column's key is a string.
 * 
 * \@optionValue Define event handler function.
 * Event which is fired when the widget detects an environment change.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridResponsive widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.previousMode to get the previously assumed mode.
 * Use ui.mode to get the newly assumed mode.
 * Event which is fired when the widget detects an environment change.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridResponsive widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Use ui.previousMode to get the previously assumed mode.
 * Use ui.mode to get the newly assumed mode.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgGridResponsive} methodName_or_optionLiteral_or_options
 * @param {...string|!IgGridResponsive|?} optionName_or_options_or_methodParams
 * @return {void|!Array<!IgGridResponsiveColumnSetting>|boolean|number|?|(string|number)|!IgGridResponsiveAllowedColumnWidthPerType|!ResponsiveColumnHidingEvent|!ResponsiveColumnHiddenEvent|!ResponsiveColumnShowingEvent|!ResponsiveColumnShownEvent|!ResponsiveModeChangedEvent|!JQuery}
 */
JQuery.prototype.igGridResponsive = function(methodName_or_optionLiteral_or_options, optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function RowSelectorClickedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RowSelectorClickedEventUIParam() {}
 /** @type {?} */
RowSelectorClickedEventUIParam.prototype.row;
 /** @type {?} */
RowSelectorClickedEventUIParam.prototype.fixedRow;
 /** @type {?} */
RowSelectorClickedEventUIParam.prototype.rowIndex;
 /** @type {?} */
RowSelectorClickedEventUIParam.prototype.rowKey;
 /** @type {?} */
RowSelectorClickedEventUIParam.prototype.rowSelector;
 /** @type {?} */
RowSelectorClickedEventUIParam.prototype.owner;
 /** @type {?} */
RowSelectorClickedEventUIParam.prototype.grid;
/**
 * @record
 * @struct
 */
function CheckBoxStateChangingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function CheckBoxStateChangingEventUIParam() {}
 /** @type {?} */
CheckBoxStateChangingEventUIParam.prototype.row;
 /** @type {?} */
CheckBoxStateChangingEventUIParam.prototype.rowIndex;
 /** @type {?} */
CheckBoxStateChangingEventUIParam.prototype.rowKey;
 /** @type {?} */
CheckBoxStateChangingEventUIParam.prototype.rowSelector;
 /** @type {?} */
CheckBoxStateChangingEventUIParam.prototype.owner;
 /** @type {?} */
CheckBoxStateChangingEventUIParam.prototype.grid;
 /** @type {?} */
CheckBoxStateChangingEventUIParam.prototype.currentState;
 /** @type {?} */
CheckBoxStateChangingEventUIParam.prototype.newState;
 /** @type {?} */
CheckBoxStateChangingEventUIParam.prototype.isHeader;
/**
 * @record
 * @struct
 */
function CheckBoxStateChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function CheckBoxStateChangedEventUIParam() {}
 /** @type {?} */
CheckBoxStateChangedEventUIParam.prototype.row;
 /** @type {?} */
CheckBoxStateChangedEventUIParam.prototype.rowIndex;
 /** @type {?} */
CheckBoxStateChangedEventUIParam.prototype.rowKey;
 /** @type {?} */
CheckBoxStateChangedEventUIParam.prototype.rowSelector;
 /** @type {?} */
CheckBoxStateChangedEventUIParam.prototype.owner;
 /** @type {?} */
CheckBoxStateChangedEventUIParam.prototype.grid;
 /** @type {?} */
CheckBoxStateChangedEventUIParam.prototype.state;
 /** @type {?} */
CheckBoxStateChangedEventUIParam.prototype.isHeader;
/**
 * @record
 * @struct
 */
function IgGridRowSelectors() {}
 /** @type {boolean} */
IgGridRowSelectors.prototype.enableRowNumbering;
 /** @type {boolean} */
IgGridRowSelectors.prototype.enableCheckBoxes;
 /** @type {number} */
IgGridRowSelectors.prototype.rowNumberingSeed;
 /** @type {(string|number)} */
IgGridRowSelectors.prototype.rowSelectorColumnWidth;
 /** @type {boolean} */
IgGridRowSelectors.prototype.requireSelection;
 /** @type {boolean} */
IgGridRowSelectors.prototype.showCheckBoxesOnFocus;
 /** @type {boolean} */
IgGridRowSelectors.prototype.inherit;
 /** @type {boolean} */
IgGridRowSelectors.prototype.enableSelectAllForPaging;
 /** @type {string} */
IgGridRowSelectors.prototype.selectAllForPagingTemplate;
 /** @type {string} */
IgGridRowSelectors.prototype.deselectAllForPagingTemplate;
 /** @type {!RowSelectorClickedEvent} */
IgGridRowSelectors.prototype.rowSelectorClicked;
 /** @type {!CheckBoxStateChangingEvent} */
IgGridRowSelectors.prototype.checkBoxStateChanging;
 /** @type {!CheckBoxStateChangedEvent} */
IgGridRowSelectors.prototype.checkBoxStateChanged;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridRowSelectorsMethods() {}

/**
 * @return {void}
 */
IgGridRowSelectorsMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgGridRowSelectorsMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Determines whether the row selectors column should contain row numbering
 * 
 * Determines whether the row selectors column should contain row numbering
 * 
 * 
 * \@optionValue New value to be set.
 * Determines whether the row selectors column should contain checkboxes
 * 
 * Determines whether the row selectors column should contain checkboxes
 * 
 * 
 * \@optionValue New value to be set.
 * The seed to be added to the default numbering
 * 
 * The seed to be added to the default numbering
 * 
 * 
 * \@optionValue New value to be set.
 * *
 * *
 * 
 * \@optionValue New value to be set.
 * Determines whether the selection feature is required for the row selectors. If set to "false"
 * the widget will not check for Selection availability. If set to "true" an exception will be thrown if Selection is
 * not available.
 * 
 * Determines whether the selection feature is required for the row selectors. If set to "false"
 * the widget will not check for Selection availability. If set to "true" an exception will be thrown if Selection is
 * not available.
 * 
 * 
 * \@optionValue New value to be set.
 * Determines whether checkboxes will be shown only if row selectors are on focus/selected.
 * 
 * Determines whether checkboxes will be shown only if row selectors are on focus/selected.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * \@optionValue New value to be set.
 * Enables/disables showing an overlay after clicking on the header checkbox, which allows selecting all records from all pages.
 * 
 * Enables/disables showing an overlay after clicking on the header checkbox, which allows selecting all records from all pages.
 * 
 * 
 * \@optionValue New value to be set.
 * Custom template for "select all" overlay with paging
 * Element with attribute data-rs-select-all is used for sellecting all the records
 * Element with attribute data-rs-close-all is used for closing the overlay
 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have selected ${checked} records. <a href='#' tabindex='0' data-rs-select-all>Select all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
 * 
 * Custom template for "select all" overlay with paging
 * Element with attribute data-rs-select-all is used for sellecting all the records
 * Element with attribute data-rs-close-all is used for closing the overlay
 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have selected ${checked} records. <a href='#' tabindex='0' data-rs-select-all>Select all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
 * 
 * 
 * \@optionValue New value to be set.
 * Custom template for "deselect all" overlay with paging
 * Element with attribute data-rs-deselect-all is used for sellecting all the records
 * Element with attribute data-rs-close-all is used for closing the overlay
 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have deselected ${unchecked} records. <a href='#' tabindex='0' data-rs-deselect-all>Deselect all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
 * 
 * Custom template for "deselect all" overlay with paging
 * Element with attribute data-rs-deselect-all is used for sellecting all the records
 * Element with attribute data-rs-close-all is used for closing the overlay
 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have deselected ${unchecked} records. <a href='#' tabindex='0' data-rs-deselect-all>Deselect all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
 * 
 * 
 * \@optionValue New value to be set.
 * Event fired after a row selector is clicked.
 * Function takes arguments evt and ui.
 * Use ui.row to get reference to the row the clicked row selector resides in.
 * Use ui.fixedRow to get reference to the fixed row the clicked row selector resides in(if there are fixed columns).
 * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
 * Use ui.rowKey to get the key of the row the clicked row selector resides in.
 * Use ui.rowSelector to get reference to the row selector cell.
 * Use ui.owner to get reference to RowSelectors.
 * Use ui.grid to get reference to the grid the RowSelectors are initialized for.
 * Event fired after a row selector is clicked.
 * Function takes arguments evt and ui.
 * Use ui.row to get reference to the row the clicked row selector resides in.
 * Use ui.fixedRow to get reference to the fixed row the clicked row selector resides in(if there are fixed columns).
 * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
 * Use ui.rowKey to get the key of the row the clicked row selector resides in.
 * Use ui.rowSelector to get reference to the row selector cell.
 * Use ui.owner to get reference to RowSelectors.
 * Use ui.grid to get reference to the grid the RowSelectors are initialized for.
 * 
 * \@optionValue Define event handler function.
 * Event fired when a row selector checkbox is changing.
 * Function takes arguments evt and ui.
 * Use ui.row to get reference to the row the clicked row selector resides in.
 * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
 * Use ui.rowKey to get the key of the row the clicked row selector resides in.
 * Use ui.rowSelector to get reference to the row selector cell.
 * Use ui.owner to get reference to igRowSelectors.
 * Use ui.grid to get reference to the grid the RowSelectors are initialized for.
 * Use ui.currentState to get the current state of the checkbox ("on","off").
 * Use ui.newState to get the new state of the checkbox ("on","off").
 * Use ui.isHeader to check if the header check box is the one being clicked. In this case no row related args are passed.
 * Event fired when a row selector checkbox is changing.
 * Function takes arguments evt and ui.
 * Use ui.row to get reference to the row the clicked row selector resides in.
 * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
 * Use ui.rowKey to get the key of the row the clicked row selector resides in.
 * Use ui.rowSelector to get reference to the row selector cell.
 * Use ui.owner to get reference to igRowSelectors.
 * Use ui.grid to get reference to the grid the RowSelectors are initialized for.
 * Use ui.currentState to get the current state of the checkbox ("on","off").
 * Use ui.newState to get the new state of the checkbox ("on","off").
 * Use ui.isHeader to check if the header check box is the one being clicked. In this case no row related args are passed.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a row selector checkbox had changed state.
 * Function takes arguments evt and ui.
 * Use ui.row to get reference to the row the clicked row selector resides in.
 * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
 * Use ui.rowKey to get the key of the row the clicked row selector resides in.
 * Use ui.rowSelector to get reference to the row selector cell.
 * Use ui.owner to get reference to igRowSelectors.
 * Use ui.grid to get reference to the grid the RowSelectors are initialized for.
 * Use ui.state to get the state of the checkbox ("on","off").
 * Use ui.isHeader to check if the header check box is the one being clicked. In this case no row related args are passed.
 * Event fired after a row selector checkbox had changed state.
 * Function takes arguments evt and ui.
 * Use ui.row to get reference to the row the clicked row selector resides in.
 * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
 * Use ui.rowKey to get the key of the row the clicked row selector resides in.
 * Use ui.rowSelector to get reference to the row selector cell.
 * Use ui.owner to get reference to igRowSelectors.
 * Use ui.grid to get reference to the grid the RowSelectors are initialized for.
 * Use ui.state to get the state of the checkbox ("on","off").
 * Use ui.isHeader to check if the header check box is the one being clicked. In this case no row related args are passed.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgGridRowSelectors} methodName_or_optionLiteral_or_options
 * @param {...string|!IgGridRowSelectors|?} optionName_or_options_or_methodParams
 * @return {void|boolean|number|(string|number)|string|!RowSelectorClickedEvent|!CheckBoxStateChangingEvent|!CheckBoxStateChangedEvent|!JQuery|?}
 */
JQuery.prototype.igGridRowSelectors = function(methodName_or_optionLiteral_or_options, optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function RowSelectionChangingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RowSelectionChangingEventUIParam() {}
 /** @type {?} */
RowSelectionChangingEventUIParam.prototype.owner;
 /** @type {?} */
RowSelectionChangingEventUIParam.prototype.row;
 /** @type {?} */
RowSelectionChangingEventUIParam.prototype.selectedRows;
 /** @type {?} */
RowSelectionChangingEventUIParam.prototype.startIndex;
 /** @type {?} */
RowSelectionChangingEventUIParam.prototype.endIndex;
/**
 * @record
 * @struct
 */
function RowSelectionChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RowSelectionChangedEventUIParam() {}
 /** @type {?} */
RowSelectionChangedEventUIParam.prototype.owner;
 /** @type {?} */
RowSelectionChangedEventUIParam.prototype.row;
 /** @type {?} */
RowSelectionChangedEventUIParam.prototype.selectedRows;
/**
 * @record
 * @struct
 */
function CellSelectionChangingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function CellSelectionChangingEventUIParam() {}
 /** @type {?} */
CellSelectionChangingEventUIParam.prototype.owner;
 /** @type {?} */
CellSelectionChangingEventUIParam.prototype.cell;
 /** @type {?} */
CellSelectionChangingEventUIParam.prototype.selectedCells;
 /** @type {?} */
CellSelectionChangingEventUIParam.prototype.firstColumnIndex;
 /** @type {?} */
CellSelectionChangingEventUIParam.prototype.firstRowIndex;
 /** @type {?} */
CellSelectionChangingEventUIParam.prototype.lastColumnIndex;
 /** @type {?} */
CellSelectionChangingEventUIParam.prototype.lastRowIndex;
/**
 * @record
 * @struct
 */
function CellSelectionChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function CellSelectionChangedEventUIParam() {}
 /** @type {?} */
CellSelectionChangedEventUIParam.prototype.owner;
 /** @type {?} */
CellSelectionChangedEventUIParam.prototype.cell;
 /** @type {?} */
CellSelectionChangedEventUIParam.prototype.selectedCells;
/**
 * @record
 * @struct
 */
function ActiveCellChangingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ActiveCellChangingEventUIParam() {}
 /** @type {?} */
ActiveCellChangingEventUIParam.prototype.owner;
 /** @type {?} */
ActiveCellChangingEventUIParam.prototype.cell;
/**
 * @record
 * @struct
 */
function ActiveCellChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ActiveCellChangedEventUIParam() {}
 /** @type {?} */
ActiveCellChangedEventUIParam.prototype.owner;
 /** @type {?} */
ActiveCellChangedEventUIParam.prototype.cell;
/**
 * @record
 * @struct
 */
function ActiveRowChangingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ActiveRowChangingEventUIParam() {}
 /** @type {?} */
ActiveRowChangingEventUIParam.prototype.owner;
 /** @type {?} */
ActiveRowChangingEventUIParam.prototype.row;
/**
 * @record
 * @struct
 */
function ActiveRowChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ActiveRowChangedEventUIParam() {}
 /** @type {?} */
ActiveRowChangedEventUIParam.prototype.owner;
 /** @type {?} */
ActiveRowChangedEventUIParam.prototype.row;
/**
 * @record
 * @struct
 */
function IgGridSelection() {}
 /** @type {boolean} */
IgGridSelection.prototype.multipleSelection;
 /** @type {boolean} */
IgGridSelection.prototype.mouseDragSelect;
 /** @type {string} */
IgGridSelection.prototype.mode;
 /** @type {boolean} */
IgGridSelection.prototype.activation;
 /** @type {boolean} */
IgGridSelection.prototype.wrapAround;
 /** @type {boolean} */
IgGridSelection.prototype.skipChildren;
 /** @type {boolean} */
IgGridSelection.prototype.multipleCellSelectOnClick;
 /** @type {boolean} */
IgGridSelection.prototype.touchDragSelect;
 /** @type {boolean} */
IgGridSelection.prototype.persist;
 /** @type {boolean} */
IgGridSelection.prototype.allowMultipleRangeSelection;
 /** @type {!RowSelectionChangingEvent} */
IgGridSelection.prototype.rowSelectionChanging;
 /** @type {!RowSelectionChangedEvent} */
IgGridSelection.prototype.rowSelectionChanged;
 /** @type {!CellSelectionChangingEvent} */
IgGridSelection.prototype.cellSelectionChanging;
 /** @type {!CellSelectionChangedEvent} */
IgGridSelection.prototype.cellSelectionChanged;
 /** @type {!ActiveCellChangingEvent} */
IgGridSelection.prototype.activeCellChanging;
 /** @type {!ActiveCellChangedEvent} */
IgGridSelection.prototype.activeCellChanged;
 /** @type {!ActiveRowChangingEvent} */
IgGridSelection.prototype.activeRowChanging;
 /** @type {!ActiveRowChangedEvent} */
IgGridSelection.prototype.activeRowChanged;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridSelectionMethods() {}

/**
 * Destroys the selection widget.
 * @return {void}
 */
IgGridSelectionMethods.prototype.destroy = function() {};

/**
 * Clears all selected cells, selected rows, active cell and active row. Also updates the UI accordingly
 * @return {void}
 */
IgGridSelectionMethods.prototype.clearSelection = function() {};

/**
 * Selects a cell by row/col
 * 
 * @param {number} row     Row index
 * @param {number} col     Column index
 * @param {boolean=} isFixed     If the cell is part of the fixed or unfixed area of the grid.
 * @return {void}
 */
IgGridSelectionMethods.prototype.selectCell = function(row, col, isFixed) {};

/**
 * Selects a cell by row id/column key
 * 
 * @param {!Object} id     Row Id
 * @param {string} colKey     Column key
 * @return {void}
 */
IgGridSelectionMethods.prototype.selectCellById = function(id, colKey) {};

/**
 * Deselects a cell by row/col
 * 
 * @param {number} row     Row index
 * @param {number} col     Column index
 * @param {boolean=} isFixed     If the cell is part of the fixed or unfixed area of the grid.
 * @return {void}
 */
IgGridSelectionMethods.prototype.deselectCell = function(row, col, isFixed) {};

/**
 * Deselects a cell by row id/column key
 * 
 * @param {!Object} id     Row Id
 * @param {string} colKey     Column key
 * @return {void}
 */
IgGridSelectionMethods.prototype.deselectCellById = function(id, colKey) {};

/**
 * Selects a row by index
 * 
 * @param {number} index     Row index
 * @return {void}
 */
IgGridSelectionMethods.prototype.selectRow = function(index) {};

/**
 * Selects a row by row id
 * 
 * @param {!Object} id     Row Id
 * @return {void}
 */
IgGridSelectionMethods.prototype.selectRowById = function(id) {};

/**
 * Deselects a row by index
 * 
 * @param {number} index     Row index
 * @return {void}
 */
IgGridSelectionMethods.prototype.deselectRow = function(index) {};

/**
 * Deselects a row by row id
 * 
 * @param {!Object} id     Row Id
 * @return {void}
 */
IgGridSelectionMethods.prototype.deselectRowById = function(id) {};

/**
 * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .
 * 
 * If multiple selection is disabled the function will return null.
 * @return {!Array<?>}
 */
IgGridSelectionMethods.prototype.selectedCells = function() {};

/**
 * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .
 * 
 * If multiple selection is disabled the function will return null.
 * @return {!Array<?>}
 */
IgGridSelectionMethods.prototype.selectedRows = function() {};

/**
 * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
 * 
 * If multiple selection is enabled the function will return null.
 * @return {!Object}
 */
IgGridSelectionMethods.prototype.selectedCell = function() {};

/**
 * Returns the currently selected row that has the format { element: , index: }, if any.
 * 
 * If multiple selection is enabled the function will return null.
 * @return {!Object}
 */
IgGridSelectionMethods.prototype.selectedRow = function() {};

/**
 * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
 * @return {!Object}
 */
IgGridSelectionMethods.prototype.activeCell = function() {};

/**
 * Returns the currently active (focused) row that has the format { element: , index: }, if any.
 * @return {!Object}
 */
IgGridSelectionMethods.prototype.activeRow = function() {};

/**
 * @param {string} propertyName
 * @return {!IgGridSelectionMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function SelectionCollectionSettingsSubscribers() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function SelectionCollectionSettings() {}
 /** @type {boolean} */
SelectionCollectionSettings.prototype.multipleSelection;
 /** @type {!SelectionCollectionSettingsSubscribers} */
SelectionCollectionSettings.prototype.subscribers;
 /** @type {?} */
SelectionCollectionSettings.prototype.owner;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!SelectionCollectionSettings} settings
 */
Infragistics.SelectionCollection = function(settings) {};

/**
 * @param {!Object} subscriber
 * @param {!Object} owner
 * @return {void}
 */
Infragistics.SelectionCollection.prototype.addSubscriber = function(subscriber, owner) {};

/**
 * @param {!Object} subscriberId
 * @param {!Object} owner
 * @return {void}
 */
Infragistics.SelectionCollection.prototype.removeSubscriber = function(subscriberId, owner) {};

/**
 * @param {!Object} newOwner
 * @return {void}
 */
Infragistics.SelectionCollection.prototype.changeOwner = function(newOwner) {};

/**
 * @param {!Object} identifier
 * @param {!Object} forOwner
 * @return {void}
 */
Infragistics.SelectionCollection.prototype.isSelected = function(identifier, forOwner) {};

/**
 * @param {!Object} identifier
 * @param {!Object} forOwner
 * @return {void}
 */
Infragistics.SelectionCollection.prototype.isActive = function(identifier, forOwner) {};

/**
 * @param {!Object} identifier
 * @return {void}
 */
Infragistics.SelectionCollection.prototype.elementFromIdentifier = function(identifier) {};

/**
 * @param {!Object} element
 * @return {void}
 */
Infragistics.SelectionCollection.prototype.toggle = function(element) {};

/**
 * @param {!Object} identifier
 * @param {!Object} element
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectionCollection.prototype.activate = function(identifier, element, suppress) {};

/**
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectionCollection.prototype.deactivate = function(suppress) {};

/**
 * @param {!Object} identifier
 * @param {!Object} add
 * @param {!Object} info
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectionCollection.prototype.select = function(identifier, add, info, suppress) {};

/**
 * @param {!Object} range
 * @param {!Object} add
 * @param {!Object} prevRange
 * @param {!Object} info
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectionCollection.prototype.rangeSelect = function(range, add, prevRange, info, suppress) {};

/**
 * @param {!Object} range
 * @param {!Object} info
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectionCollection.prototype.rangeDeselect = function(range, info, suppress) {};

/**
 * @param {!Object} identifier
 * @param {!Object} info
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectionCollection.prototype.deselect = function(identifier, info, suppress) {};

/**
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectionCollection.prototype.deselectAll = function(suppress) {};

/**
 * @param {!Object} forOwner
 * @return {void}
 */
Infragistics.SelectionCollection.prototype.clearSelection = function(forOwner) {};

/**
 * @param {!Object} forOwner
 * @return {void}
 */
Infragistics.SelectionCollection.prototype.cleanAll = function(forOwner) {};

/**
 * @return {void}
 */
Infragistics.SelectionCollection.prototype.onlyOneSelected = function() {};

/**
 * @return {void}
 */
Infragistics.SelectionCollection.prototype.selectedCells = function() {};

/**
 * @return {void}
 */
Infragistics.SelectionCollection.prototype.selectedRows = function() {};

/**
 * @return {void}
 */
Infragistics.SelectionCollection.prototype.selectionLength = function() {};
 /** @type {?} */
IgniteUIStatic.prototype.SelectionCollection;

/**
 * @constructor
 * @struct
 * @param {!SelectionCollectionSettings} settings
 */
Infragistics.SelectedRowsCollection = function(settings) {};

/**
 * @param {!Object} identifier
 * @param {!Object} forOwner
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.isSelected = function(identifier, forOwner) {};

/**
 * @param {!Object} identifier
 * @param {!Object} forOwner
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.isActive = function(identifier, forOwner) {};

/**
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.selectedDataRows = function() {};

/**
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.selectedRows = function() {};

/**
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.activeRow = function() {};

/**
 * @param {!Object} identifier
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.elementFromIdentifier = function(identifier) {};

/**
 * @param {!Object} identifier
 * @param {!Object} element
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.elementPosition = function(identifier, element) {};

/**
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.onlyOneSelected = function() {};

/**
 * @param {!Object} subscriber
 * @param {!Object} owner
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.addSubscriber = function(subscriber, owner) {};

/**
 * @param {!Object} subscriberId
 * @param {!Object} owner
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.removeSubscriber = function(subscriberId, owner) {};

/**
 * @param {!Object} newOwner
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.changeOwner = function(newOwner) {};

/**
 * @param {!Object} element
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.toggle = function(element) {};

/**
 * @param {!Object} identifier
 * @param {!Object} element
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.activate = function(identifier, element, suppress) {};

/**
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.deactivate = function(suppress) {};

/**
 * @param {!Object} identifier
 * @param {!Object} add
 * @param {!Object} info
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.select = function(identifier, add, info, suppress) {};

/**
 * @param {!Object} range
 * @param {!Object} add
 * @param {!Object} prevRange
 * @param {!Object} info
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.rangeSelect = function(range, add, prevRange, info, suppress) {};

/**
 * @param {!Object} range
 * @param {!Object} info
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.rangeDeselect = function(range, info, suppress) {};

/**
 * @param {!Object} identifier
 * @param {!Object} info
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.deselect = function(identifier, info, suppress) {};

/**
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.deselectAll = function(suppress) {};

/**
 * @param {!Object} forOwner
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.clearSelection = function(forOwner) {};

/**
 * @param {!Object} forOwner
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.cleanAll = function(forOwner) {};

/**
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.selectedCells = function() {};

/**
 * @return {void}
 */
Infragistics.SelectedRowsCollection.prototype.selectionLength = function() {};
 /** @type {?} */
IgniteUIStatic.prototype.SelectedRowsCollection;

/**
 * @constructor
 * @struct
 * @param {!SelectionCollectionSettings} settings
 */
Infragistics.SelectedCellsCollection = function(settings) {};

/**
 * @param {!Object} identifier
 * @param {!Object} forOwner
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.isSelected = function(identifier, forOwner) {};

/**
 * @param {!Object} rowId
 * @param {!Object} forOwner
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.atLeastOneSelected = function(rowId, forOwner) {};

/**
 * @param {!Object} identifier
 * @param {!Object} forOwner
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.isActive = function(identifier, forOwner) {};

/**
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.selectedCells = function() {};

/**
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.activeCell = function() {};

/**
 * @param {!Object} identifier
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.elementFromIdentifier = function(identifier) {};

/**
 * @param {!Object} identifier
 * @param {!Object} element
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.elementPosition = function(identifier, element) {};

/**
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.onlyOneSelected = function() {};

/**
 * @param {!Object} subscriber
 * @param {!Object} owner
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.addSubscriber = function(subscriber, owner) {};

/**
 * @param {!Object} subscriberId
 * @param {!Object} owner
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.removeSubscriber = function(subscriberId, owner) {};

/**
 * @param {!Object} newOwner
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.changeOwner = function(newOwner) {};

/**
 * @param {!Object} element
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.toggle = function(element) {};

/**
 * @param {!Object} identifier
 * @param {!Object} element
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.activate = function(identifier, element, suppress) {};

/**
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.deactivate = function(suppress) {};

/**
 * @param {!Object} identifier
 * @param {!Object} add
 * @param {!Object} info
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.select = function(identifier, add, info, suppress) {};

/**
 * @param {!Object} range
 * @param {!Object} add
 * @param {!Object} prevRange
 * @param {!Object} info
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.rangeSelect = function(range, add, prevRange, info, suppress) {};

/**
 * @param {!Object} range
 * @param {!Object} info
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.rangeDeselect = function(range, info, suppress) {};

/**
 * @param {!Object} identifier
 * @param {!Object} info
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.deselect = function(identifier, info, suppress) {};

/**
 * @param {!Object} suppress
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.deselectAll = function(suppress) {};

/**
 * @param {!Object} forOwner
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.clearSelection = function(forOwner) {};

/**
 * @param {!Object} forOwner
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.cleanAll = function(forOwner) {};

/**
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.selectedRows = function() {};

/**
 * @return {void}
 */
Infragistics.SelectedCellsCollection.prototype.selectionLength = function() {};
 /** @type {?} */
IgniteUIStatic.prototype.SelectedCellsCollection;

/**
 * Enables / Disables multiple selection of cells and rows - depending on the mode
 * 
 * Enables / Disables multiple selection of cells and rows - depending on the mode
 * 
 * 
 * \@optionValue New value to be set.
 * Enables / disables selection via dragging with the mouse - only applicable for cell selection
 * 
 * Enables / disables selection via dragging with the mouse - only applicable for cell selection
 * 
 * 
 * \@optionValue New value to be set.
 * Defines type of the selection.
 * 
 * Defines type of the selection.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel
 * 
 * Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel
 * 
 * 
 * \@optionValue New value to be set.
 * If wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected
 * 
 * If wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected
 * 
 * 
 * \@optionValue New value to be set.
 * If true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid
 * 
 * If true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid
 * 
 * 
 * \@optionValue New value to be set.
 * If true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set to row. this option is useful for enabling multiple discountinued selection on touch environments.
 * 
 * If true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set to row. this option is useful for enabling multiple discountinued selection on touch environments.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables / disables selection via continuous touch event - only applicable for cell selection and touch-supported environments
 * 
 * Enables / disables selection via continuous touch event - only applicable for cell selection and touch-supported environments
 * 
 * 
 * \@optionValue New value to be set.
 * Enables / disables selection persistance between states.
 * 
 * Enables / disables selection persistance between states.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables / disables the ability to ctrl drag multiple selection windows when selection mode is 'cell'
 * 
 * Enables / disables the ability to ctrl drag multiple selection windows when selection mode is 'cell'
 * 
 * 
 * \@optionValue New value to be set.
 * Event fired before row(s) are about to be selected (cancellable).
 * Return false in order to cancel selection changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.row to get reference to row object.
 * Use ui.row.element to get reference to row DOM element.
 * Use ui.row.index to get row index.
 * Use ui.row.id to get the row id if primary key is defined or persistence is enabled.
 * Use ui.selectedRows to get reference to rows object array.
 * Use ui.startIndex to get the start index for a range row selection.
 * Use ui.endIndex to get the end index for a range row selection.
 * Event fired before row(s) are about to be selected (cancellable).
 * Return false in order to cancel selection changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.row to get reference to row object.
 * Use ui.row.element to get reference to row DOM element.
 * Use ui.row.index to get row index.
 * Use ui.row.id to get the row id if primary key is defined or persistence is enabled.
 * Use ui.selectedRows to get reference to rows object array.
 * Use ui.startIndex to get the start index for a range row selection.
 * Use ui.endIndex to get the end index for a range row selection.
 * 
 * \@optionValue Define event handler function.
 * Event fired after row(s) are selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.row to get reference to row object.
 * Use ui.row.element to get reference to row DOM element.
 * Use ui.row.index to get row index.
 * Use ui.row.id to get the row id if primary key is defined or persistence is enabled.
 * Use ui.selectedRows to get reference to rows object array.
 * Event fired after row(s) are selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.row to get reference to row object.
 * Use ui.row.element to get reference to row DOM element.
 * Use ui.row.index to get row index.
 * Use ui.row.id to get the row id if primary key is defined or persistence is enabled.
 * Use ui.selectedRows to get reference to rows object array.
 * 
 * \@optionValue Define event handler function.
 * Event fired before cell(s) are about to be selected (cancellable).
 * Return false in order to cancel cell selection changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.cell to get reference to cell object.
 * Use ui.cell.element to get reference to cell DOM element.
 * Use ui.cell.columnKey to get reference to column key.
 * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
 * Use ui.cell.index to get column index.
 * Use ui.cell.row to get reference to row DOM element.
 * Use ui.cell.rowIndex to get row index.
 * Use ui.selectedCells to get reference to selected cells object array.
 * Use ui.firstColumnIndex to get the column index for the first cell in a range selection.
 * Use ui.firstRowIndex to get the row index for the first cell in a range selection.
 * Use ui.lastColumnIndex to get the column index for the last cell in a range selection.
 * Use ui.lastRowIndex to get the row index for the last cell in a range selection.
 * Event fired before cell(s) are about to be selected (cancellable).
 * Return false in order to cancel cell selection changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.cell to get reference to cell object.
 * Use ui.cell.element to get reference to cell DOM element.
 * Use ui.cell.columnKey to get reference to column key.
 * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
 * Use ui.cell.index to get column index.
 * Use ui.cell.row to get reference to row DOM element.
 * Use ui.cell.rowIndex to get row index.
 * Use ui.selectedCells to get reference to selected cells object array.
 * Use ui.firstColumnIndex to get the column index for the first cell in a range selection.
 * Use ui.firstRowIndex to get the row index for the first cell in a range selection.
 * Use ui.lastColumnIndex to get the column index for the last cell in a range selection.
 * Use ui.lastRowIndex to get the row index for the last cell in a range selection.
 * 
 * \@optionValue Define event handler function.
 * Event fired after cell(s) are selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.cell to get reference to cell object.
 * Use ui.cell.element to get reference to cell DOM element.
 * Use ui.cell.columnKey to get reference to column key.
 * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
 * Use ui.cell.index to get column index.
 * Use ui.cell.row to get reference to row DOM element.
 * Use ui.cell.rowIndex to get row index.
 * Use ui.selectedCells to get reference to selected cells object array.
 * Event fired after cell(s) are selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.cell to get reference to cell object.
 * Use ui.cell.element to get reference to cell DOM element.
 * Use ui.cell.columnKey to get reference to column key.
 * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
 * Use ui.cell.index to get column index.
 * Use ui.cell.row to get reference to row DOM element.
 * Use ui.cell.rowIndex to get row index.
 * Use ui.selectedCells to get reference to selected cells object array.
 * 
 * \@optionValue Define event handler function.
 * Event fired before a cell becomes active (focus style applied) (cancellable).
 * Return false in order to cancel active cell changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.cell to get reference to cell object.
 * Use ui.cell.element to get reference to cell DOM element.
 * Use ui.cell.columnKey to get column key.
 * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
 * Use ui.cell.index to get column index.
 * Use ui.cell.row to get reference to row DOM element.
 * Use ui.cell.rowIndex to get row index.
 * Event fired before a cell becomes active (focus style applied) (cancellable).
 * Return false in order to cancel active cell changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.cell to get reference to cell object.
 * Use ui.cell.element to get reference to cell DOM element.
 * Use ui.cell.columnKey to get column key.
 * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
 * Use ui.cell.index to get column index.
 * Use ui.cell.row to get reference to row DOM element.
 * Use ui.cell.rowIndex to get row index.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a cell becomes active (focus style applied).
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.cell to get reference to cell object.
 * Use ui.cell.element to get reference to cell DOM element.
 * Use ui.cell.columnKey to get column key.
 * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
 * Use ui.cell.index to get column index.
 * Use ui.cell.row to get reference to row DOM element.
 * Use ui.cell.rowIndex to get row index.
 * Event fired after a cell becomes active (focus style applied).
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.cell to get reference to cell object.
 * Use ui.cell.element to get reference to cell DOM element.
 * Use ui.cell.columnKey to get column key.
 * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
 * Use ui.cell.index to get column index.
 * Use ui.cell.row to get reference to row DOM element.
 * Use ui.cell.rowIndex to get row index.
 * 
 * \@optionValue Define event handler function.
 * Event fired before a row becomes active (focus style applied) (cancellable).
 * Return false in order to cancel active row changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.row to get reference to row object.
 * Use ui.row.element to get reference to active row DOM element.
 * Use ui.row.index to get active row index.
 * Use ui.row.id to get the active row id if primary key is defined or persistence is enabled.
 * Event fired before a row becomes active (focus style applied) (cancellable).
 * Return false in order to cancel active row changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.row to get reference to row object.
 * Use ui.row.element to get reference to active row DOM element.
 * Use ui.row.index to get active row index.
 * Use ui.row.id to get the active row id if primary key is defined or persistence is enabled.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a row becomes active (focus style applied).
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.row to get reference to row object.
 * Use ui.row.element to get reference to active row DOM element.
 * Use ui.row.index to get active row index.
 * Use ui.row.id to get the active row id if primary key is defined or persistence is enabled.
 * Event fired after a row becomes active (focus style applied).
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.row to get reference to row object.
 * Use ui.row.element to get reference to active row DOM element.
 * Use ui.row.index to get active row index.
 * Use ui.row.id to get the active row id if primary key is defined or persistence is enabled.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgGridSelection} methodName_or_optionLiteral_or_options
 * @param {...number|!Object|string|!IgGridSelection|?} row_or_id_or_index_or_optionName_or_options_or_methodParams
 * @return {void|!Array<?>|!Object|boolean|string|!RowSelectionChangingEvent|!RowSelectionChangedEvent|!CellSelectionChangingEvent|!CellSelectionChangedEvent|!ActiveCellChangingEvent|!ActiveCellChangedEvent|!ActiveRowChangingEvent|!ActiveRowChangedEvent|!JQuery|?}
 */
JQuery.prototype.igGridSelection = function(methodName_or_optionLiteral_or_options, row_or_id_or_index_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function ButtonOKClickEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ButtonOKClickEventUIParam() {}
 /** @type {?} */
ButtonOKClickEventUIParam.prototype.owner;
 /** @type {?} */
ButtonOKClickEventUIParam.prototype.modalDialog;
/**
 * @record
 * @struct
 */
function ButtonCancelClickEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ButtonCancelClickEventUIParam() {}
 /** @type {?} */
ButtonCancelClickEventUIParam.prototype.owner;
 /** @type {?} */
ButtonCancelClickEventUIParam.prototype.modalDialog;
/**
 * @record
 * @struct
 */
function IgGridModalDialog() {}
 /** @type {string} */
IgGridModalDialog.prototype.buttonApplyText;
 /** @type {string} */
IgGridModalDialog.prototype.buttonCancelText;
 /** @type {?} */
IgGridModalDialog.prototype.buttonApplyTitle;
 /** @type {?} */
IgGridModalDialog.prototype.buttonCancelTitle;
 /** @type {string} */
IgGridModalDialog.prototype.modalDialogCaptionText;
 /** @type {number} */
IgGridModalDialog.prototype.modalDialogWidth;
 /** @type {number} */
IgGridModalDialog.prototype.modalDialogHeight;
 /** @type {boolean} */
IgGridModalDialog.prototype.renderFooterButtons;
 /** @type {number} */
IgGridModalDialog.prototype.animationDuration;
 /** @type {boolean} */
IgGridModalDialog.prototype.buttonApplyDisabled;
 /** @type {boolean} */
IgGridModalDialog.prototype.closeModalDialogOnEnter;
 /** @type {number} */
IgGridModalDialog.prototype.tabIndex;
 /** @type {!ModalDialogOpeningEvent} */
IgGridModalDialog.prototype.modalDialogOpening;
 /** @type {!ModalDialogOpenedEvent} */
IgGridModalDialog.prototype.modalDialogOpened;
 /** @type {!ModalDialogMovingEvent} */
IgGridModalDialog.prototype.modalDialogMoving;
 /** @type {!ModalDialogClosingEvent} */
IgGridModalDialog.prototype.modalDialogClosing;
 /** @type {!ModalDialogClosedEvent} */
IgGridModalDialog.prototype.modalDialogClosed;
 /** @type {!ModalDialogContentsRenderingEvent} */
IgGridModalDialog.prototype.modalDialogContentsRendering;
 /** @type {!ModalDialogContentsRenderedEvent} */
IgGridModalDialog.prototype.modalDialogContentsRendered;
 /** @type {!ButtonOKClickEvent} */
IgGridModalDialog.prototype.buttonOKClick;
 /** @type {!ButtonCancelClickEvent} */
IgGridModalDialog.prototype.buttonCancelClick;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridModalDialogMethods() {}

/**
 * @return {void}
 */
IgGridModalDialogMethods.prototype.openModalDialog = function() {};

/**
 * @param {!Object} accepted
 * @param {!Object} fromUI
 * @return {void}
 */
IgGridModalDialogMethods.prototype.closeModalDialog = function(accepted, fromUI) {};

/**
 * @return {void}
 */
IgGridModalDialogMethods.prototype.getCaptionButtonContainer = function() {};

/**
 * @return {void}
 */
IgGridModalDialogMethods.prototype.getFooter = function() {};

/**
 * @return {void}
 */
IgGridModalDialogMethods.prototype.getContent = function() {};

/**
 * @return {void}
 */
IgGridModalDialogMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgGridModalDialogMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function IgEditorFilter() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgEditorFilterMethods() {}

/**
 * @param {!Object} delay
 * @param {!Object} toggle
 * @return {void}
 */
IgEditorFilterMethods.prototype.setFocus = function(delay, toggle) {};

/**
 * @return {void}
 */
IgEditorFilterMethods.prototype.remove = function() {};

/**
 * @return {void}
 */
IgEditorFilterMethods.prototype.exitEditMode = function() {};

/**
 * @return {void}
 */
IgEditorFilterMethods.prototype.validator = function() {};

/**
 * @return {void}
 */
IgEditorFilterMethods.prototype.hasInvalidMessage = function() {};

/**
 * @return {void}
 */
IgEditorFilterMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgEditorFilterMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @constructor
 * @struct
 */
Infragistics.EditorProvider = function() {};

/**
 * Create handlers cache
 * 
 * @param {!Object} callbacks
 * @param {!Object} key
 * @param {!Object} editorOptions
 * @param {!Object} tabIndex
 * @param {!Object} format
 * @param {!Object} element
 * @return {void}
 */
Infragistics.EditorProvider.prototype.createEditor = function(callbacks, key, editorOptions, tabIndex, format, element) {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProvider.prototype.keyDown = function(evt, ui) {};

/**
 * @param {!Object} errorShowing
 * @param {!Object} errorShown
 * @param {!Object} errorHidden
 * @return {void}
 */
Infragistics.EditorProvider.prototype.attachErrorEvents = function(errorShowing, errorShown, errorHidden) {};

/**
 * @return {void}
 */
Infragistics.EditorProvider.prototype.getEditor = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProvider.prototype.refreshValue = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProvider.prototype.getValue = function() {};

/**
 * @param {!Object} val
 * @return {void}
 */
Infragistics.EditorProvider.prototype.setValue = function(val) {};

/**
 * @param {!Object} toggle
 * @return {void}
 */
Infragistics.EditorProvider.prototype.setFocus = function(toggle) {};

/**
 * @param {!Object} width
 * @param {!Object} height
 * @return {void}
 */
Infragistics.EditorProvider.prototype.setSize = function(width, height) {};

/**
 * @return {void}
 */
Infragistics.EditorProvider.prototype.removeFromParent = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProvider.prototype.destroy = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProvider.prototype.validator = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProvider.prototype.validate = function() {};

/**
 * @param {!Object} evt
 * @return {void}
 */
Infragistics.EditorProvider.prototype.requestValidate = function(evt) {};

/**
 * @return {void}
 */
Infragistics.EditorProvider.prototype.isValid = function() {};
/**
 * @constructor
 * @struct
 */
Infragistics.EditorProviderBase = function() {};

/**
 * Call parent createEditor
 * 
 * @param {!Object} callbacks
 * @param {!Object} key
 * @param {!Object} editorOptions
 * @param {!Object} tabIndex
 * @param {!Object} format
 * @param {!Object} element
 * @return {void}
 */
Infragistics.EditorProviderBase.prototype.createEditor = function(callbacks, key, editorOptions, tabIndex, format, element) {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderBase.prototype.textChanged = function(evt, ui) {};

/**
 * @param {!Object} width
 * @param {!Object} height
 * @return {void}
 */
Infragistics.EditorProviderBase.prototype.setSize = function(width, height) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderBase.prototype.setFocus = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderBase.prototype.removeFromParent = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderBase.prototype.destroy = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderBase.prototype.refreshValue = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderBase.prototype.validator = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderBase.prototype.isValid = function() {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderBase.prototype.keyDown = function(evt, ui) {};

/**
 * @param {!Object} errorShowing
 * @param {!Object} errorShown
 * @param {!Object} errorHidden
 * @return {void}
 */
Infragistics.EditorProviderBase.prototype.attachErrorEvents = function(errorShowing, errorShown, errorHidden) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderBase.prototype.getEditor = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderBase.prototype.getValue = function() {};

/**
 * @param {!Object} val
 * @return {void}
 */
Infragistics.EditorProviderBase.prototype.setValue = function(val) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderBase.prototype.validate = function() {};

/**
 * @param {!Object} evt
 * @return {void}
 */
Infragistics.EditorProviderBase.prototype.requestValidate = function(evt) {};
/**
 * @constructor
 * @struct
 */
Infragistics.EditorProviderText = function() {};

/**
 * @param {!Object} callbacks
 * @param {!Object} key
 * @param {!Object} editorOptions
 * @param {!Object} tabIndex
 * @param {!Object} format
 * @param {!Object} element
 * @return {void}
 */
Infragistics.EditorProviderText.prototype.createEditor = function(callbacks, key, editorOptions, tabIndex, format, element) {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderText.prototype.keyDown = function(evt, ui) {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderText.prototype.textChanged = function(evt, ui) {};

/**
 * @param {!Object} width
 * @param {!Object} height
 * @return {void}
 */
Infragistics.EditorProviderText.prototype.setSize = function(width, height) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderText.prototype.setFocus = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderText.prototype.removeFromParent = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderText.prototype.destroy = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderText.prototype.refreshValue = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderText.prototype.validator = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderText.prototype.isValid = function() {};
/**
 * @constructor
 * @struct
 */
Infragistics.EditorProviderNumeric = function() {};

/**
 * @param {!Object} callbacks
 * @param {!Object} key
 * @param {!Object} editorOptions
 * @param {!Object} tabIndex
 * @param {!Object} format
 * @param {!Object} element
 * @return {void}
 */
Infragistics.EditorProviderNumeric.prototype.createEditor = function(callbacks, key, editorOptions, tabIndex, format, element) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderNumeric.prototype.getValue = function() {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderNumeric.prototype.textChanged = function(evt, ui) {};

/**
 * @param {!Object} width
 * @param {!Object} height
 * @return {void}
 */
Infragistics.EditorProviderNumeric.prototype.setSize = function(width, height) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderNumeric.prototype.setFocus = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderNumeric.prototype.removeFromParent = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderNumeric.prototype.destroy = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderNumeric.prototype.refreshValue = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderNumeric.prototype.validator = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderNumeric.prototype.isValid = function() {};
/**
 * @constructor
 * @struct
 */
Infragistics.EditorProviderCurrency = function() {};

/**
 * @param {!Object} callbacks
 * @param {!Object} key
 * @param {!Object} editorOptions
 * @param {!Object} tabIndex
 * @param {!Object} format
 * @param {!Object} element
 * @return {void}
 */
Infragistics.EditorProviderCurrency.prototype.createEditor = function(callbacks, key, editorOptions, tabIndex, format, element) {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderCurrency.prototype.textChanged = function(evt, ui) {};

/**
 * @param {!Object} width
 * @param {!Object} height
 * @return {void}
 */
Infragistics.EditorProviderCurrency.prototype.setSize = function(width, height) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderCurrency.prototype.setFocus = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderCurrency.prototype.removeFromParent = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderCurrency.prototype.destroy = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderCurrency.prototype.refreshValue = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderCurrency.prototype.validator = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderCurrency.prototype.isValid = function() {};
/**
 * @constructor
 * @struct
 */
Infragistics.EditorProviderPercent = function() {};

/**
 * @param {!Object} callbacks
 * @param {!Object} key
 * @param {!Object} editorOptions
 * @param {!Object} tabIndex
 * @param {!Object} format
 * @param {!Object} element
 * @return {void}
 */
Infragistics.EditorProviderPercent.prototype.createEditor = function(callbacks, key, editorOptions, tabIndex, format, element) {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderPercent.prototype.textChanged = function(evt, ui) {};

/**
 * @param {!Object} width
 * @param {!Object} height
 * @return {void}
 */
Infragistics.EditorProviderPercent.prototype.setSize = function(width, height) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderPercent.prototype.setFocus = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderPercent.prototype.removeFromParent = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderPercent.prototype.destroy = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderPercent.prototype.refreshValue = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderPercent.prototype.validator = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderPercent.prototype.isValid = function() {};
/**
 * @constructor
 * @struct
 */
Infragistics.EditorProviderMask = function() {};

/**
 * @param {!Object} callbacks
 * @param {!Object} key
 * @param {!Object} editorOptions
 * @param {!Object} tabIndex
 * @param {!Object} format
 * @param {!Object} element
 * @return {void}
 */
Infragistics.EditorProviderMask.prototype.createEditor = function(callbacks, key, editorOptions, tabIndex, format, element) {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderMask.prototype.textChanged = function(evt, ui) {};

/**
 * @param {!Object} width
 * @param {!Object} height
 * @return {void}
 */
Infragistics.EditorProviderMask.prototype.setSize = function(width, height) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderMask.prototype.setFocus = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderMask.prototype.removeFromParent = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderMask.prototype.destroy = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderMask.prototype.refreshValue = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderMask.prototype.validator = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderMask.prototype.isValid = function() {};
/**
 * @constructor
 * @struct
 */
Infragistics.EditorProviderDate = function() {};

/**
 * @param {!Object} callbacks
 * @param {!Object} key
 * @param {!Object} editorOptions
 * @param {!Object} tabIndex
 * @param {!Object} format
 * @param {!Object} element
 * @return {void}
 */
Infragistics.EditorProviderDate.prototype.createEditor = function(callbacks, key, editorOptions, tabIndex, format, element) {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderDate.prototype.textChanged = function(evt, ui) {};

/**
 * @param {!Object} width
 * @param {!Object} height
 * @return {void}
 */
Infragistics.EditorProviderDate.prototype.setSize = function(width, height) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderDate.prototype.setFocus = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderDate.prototype.removeFromParent = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderDate.prototype.destroy = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderDate.prototype.refreshValue = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderDate.prototype.validator = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderDate.prototype.isValid = function() {};
/**
 * @constructor
 * @struct
 */
Infragistics.EditorProviderDatePicker = function() {};

/**
 * @param {!Object} callbacks
 * @param {!Object} key
 * @param {!Object} editorOptions
 * @param {!Object} tabIndex
 * @param {!Object} format
 * @param {!Object} element
 * @return {void}
 */
Infragistics.EditorProviderDatePicker.prototype.createEditor = function(callbacks, key, editorOptions, tabIndex, format, element) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderDatePicker.prototype.removeFromParent = function() {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderDatePicker.prototype.textChanged = function(evt, ui) {};

/**
 * @param {!Object} width
 * @param {!Object} height
 * @return {void}
 */
Infragistics.EditorProviderDatePicker.prototype.setSize = function(width, height) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderDatePicker.prototype.setFocus = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderDatePicker.prototype.destroy = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderDatePicker.prototype.refreshValue = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderDatePicker.prototype.validator = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderDatePicker.prototype.isValid = function() {};
/**
 * @constructor
 * @struct
 */
Infragistics.EditorProviderBoolean = function() {};

/**
 * @param {!Object} callbacks
 * @param {!Object} key
 * @param {!Object} editorOptions
 * @param {!Object} tabIndex
 * @param {!Object} format
 * @param {!Object} element
 * @return {void}
 */
Infragistics.EditorProviderBoolean.prototype.createEditor = function(callbacks, key, editorOptions, tabIndex, format, element) {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderBoolean.prototype.valueChanged = function(evt, ui) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderBoolean.prototype.refreshValue = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderBoolean.prototype.getValue = function() {};

/**
 * @param {!Object} val
 * @return {void}
 */
Infragistics.EditorProviderBoolean.prototype.setValue = function(val) {};

/**
 * @param {!Object} width
 * @param {!Object} height
 * @return {void}
 */
Infragistics.EditorProviderBoolean.prototype.setSize = function(width, height) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderBoolean.prototype.removeFromParent = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderBoolean.prototype.destroy = function() {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderBoolean.prototype.textChanged = function(evt, ui) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderBoolean.prototype.setFocus = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderBoolean.prototype.validator = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderBoolean.prototype.isValid = function() {};
/**
 * @constructor
 * @struct
 */
Infragistics.EditorProviderCombo = function() {};

/**
 * @param {!Object} callbacks
 * @param {!Object} key
 * @param {!Object} editorOptions
 * @param {!Object} tabIndex
 * @param {!Object} format
 * @param {!Object} element
 * @return {void}
 */
Infragistics.EditorProviderCombo.prototype.createEditor = function(callbacks, key, editorOptions, tabIndex, format, element) {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderCombo.prototype.keyDown = function(evt, ui) {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderCombo.prototype.internalSelectionChanged = function(evt, ui) {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderCombo.prototype.selectionChanged = function(evt, ui) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderCombo.prototype.refreshValue = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderCombo.prototype.getValue = function() {};

/**
 * @param {!Object} val
 * @param {!Object} fire
 * @return {void}
 */
Infragistics.EditorProviderCombo.prototype.setValue = function(val, fire) {};

/**
 * @param {!Object} width
 * @param {!Object} height
 * @return {void}
 */
Infragistics.EditorProviderCombo.prototype.setSize = function(width, height) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderCombo.prototype.setFocus = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderCombo.prototype.removeFromParent = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderCombo.prototype.validator = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderCombo.prototype.destroy = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderCombo.prototype.isValid = function() {};

/**
 * @param {!Object} errorShowing
 * @param {!Object} errorShown
 * @param {!Object} errorHidden
 * @return {void}
 */
Infragistics.EditorProviderCombo.prototype.attachErrorEvents = function(errorShowing, errorShown, errorHidden) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderCombo.prototype.getEditor = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderCombo.prototype.validate = function() {};

/**
 * @param {!Object} evt
 * @return {void}
 */
Infragistics.EditorProviderCombo.prototype.requestValidate = function(evt) {};
/**
 * @constructor
 * @struct
 */
Infragistics.EditorProviderObjectCombo = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderObjectCombo.prototype.getValue = function() {};

/**
 * @param {!Object} val
 * @param {!Object} fire
 * @return {void}
 */
Infragistics.EditorProviderObjectCombo.prototype.setValue = function(val, fire) {};

/**
 * @param {!Object} callbacks
 * @param {!Object} key
 * @param {!Object} editorOptions
 * @param {!Object} tabIndex
 * @param {!Object} format
 * @param {!Object} element
 * @return {void}
 */
Infragistics.EditorProviderObjectCombo.prototype.createEditor = function(callbacks, key, editorOptions, tabIndex, format, element) {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderObjectCombo.prototype.keyDown = function(evt, ui) {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderObjectCombo.prototype.internalSelectionChanged = function(evt, ui) {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderObjectCombo.prototype.selectionChanged = function(evt, ui) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderObjectCombo.prototype.refreshValue = function() {};

/**
 * @param {!Object} width
 * @param {!Object} height
 * @return {void}
 */
Infragistics.EditorProviderObjectCombo.prototype.setSize = function(width, height) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderObjectCombo.prototype.setFocus = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderObjectCombo.prototype.removeFromParent = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderObjectCombo.prototype.validator = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderObjectCombo.prototype.destroy = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderObjectCombo.prototype.isValid = function() {};
/**
 * @constructor
 * @struct
 */
Infragistics.EditorProviderRating = function() {};

/**
 * @param {!Object} callbacks
 * @param {!Object} key
 * @param {!Object} editorOptions
 * @param {!Object} tabIndex
 * @param {!Object} format
 * @param {!Object} element
 * @return {void}
 */
Infragistics.EditorProviderRating.prototype.createEditor = function(callbacks, key, editorOptions, tabIndex, format, element) {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderRating.prototype.internalValueChange = function(evt, ui) {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderRating.prototype.valueChange = function(evt, ui) {};

/**
 * @param {!Object} val
 * @return {void}
 */
Infragistics.EditorProviderRating.prototype.setValue = function(val) {};

/**
 * @param {!Object} width
 * @param {!Object} height
 * @return {void}
 */
Infragistics.EditorProviderRating.prototype.setSize = function(width, height) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderRating.prototype.setFocus = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderRating.prototype.validator = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderRating.prototype.destroy = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderRating.prototype.isValid = function() {};

/**
 * @param {!Object} evt
 * @param {!Object} ui
 * @return {void}
 */
Infragistics.EditorProviderRating.prototype.keyDown = function(evt, ui) {};

/**
 * @param {!Object} errorShowing
 * @param {!Object} errorShown
 * @param {!Object} errorHidden
 * @return {void}
 */
Infragistics.EditorProviderRating.prototype.attachErrorEvents = function(errorShowing, errorShown, errorHidden) {};

/**
 * @return {void}
 */
Infragistics.EditorProviderRating.prototype.getEditor = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderRating.prototype.refreshValue = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderRating.prototype.getValue = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderRating.prototype.removeFromParent = function() {};

/**
 * @return {void}
 */
Infragistics.EditorProviderRating.prototype.validate = function() {};

/**
 * @param {!Object} evt
 * @return {void}
 */
Infragistics.EditorProviderRating.prototype.requestValidate = function(evt) {};
/**
 * @constructor
 * @struct
 */
Infragistics.SortingExpressionsManager = function() {};

/**
 * @param {!Object} grid
 * @return {void}
 */
Infragistics.SortingExpressionsManager.prototype.setGridInstance = function(grid) {};

/**
 * Insert expr at the first position of the se (sorting expressions) if there are not any other expressions with flag group by
 * otherwise if there are such expressions inserts after the last
 * 
 * @param {!Object} se
 * @param {!Object} expr
 * @param {!Object} feature
 * @return {void}
 */
Infragistics.SortingExpressionsManager.prototype.addSortingExpression = function(se, expr, feature) {};

/**
 * @param {!Object} exprs
 * @param {!Object} grid
 * @return {void}
 */
Infragistics.SortingExpressionsManager.prototype.setFormattersForSortingExprs = function(exprs, grid) {};

/**
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 * The default modal dialog width in pixels.
 * The default modal dialog width in pixels.
 * 
 * \@optionValue New value to be set.
 * The default modal dialog height in pixels.
 * The default modal dialog height in pixels.
 * 
 * \@optionValue New value to be set.
 *
 *
 *
 *
 *
 *
 * If true and Enter is pressed - close modal dialog(NOTE: buttonApplyDisabled should be set to false - otherwise this options is ignored)
 * If true and Enter is pressed - close modal dialog(NOTE: buttonApplyDisabled should be set to false - otherwise this options is ignored)
 * 
 * \@optionValue New value to be set.
 * Tab index to assign to containers and buttons inside the dialog
 * Tab index to assign to containers and buttons inside the dialog
 * 
 * \@optionValue New value to be set.
 * Event fired before the modal dialog is opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridModalDialog widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * Event fired before the modal dialog is opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridModalDialog widget.
 * Use ui.owner.grid to get the reference to the igGrid widget.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the modal dialog is already opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridModalDialog widget.
 * Use ui.modalDialog to get the reference to the igGridModalDialog element
 * Event fired after the modal dialog is already opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridModalDialog widget.
 * Use ui.modalDialog to get the reference to the igGridModalDialog element
 * 
 * \@optionValue Define event handler function.
 * Event fired every time the modal dialog changes its position.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridModalDialog widget.
 * Use ui.modalDialog to get the reference to the igGridModalDialog element
 * Use ui.originalPosition to get the original position of the modal dialog div as { top, left } object, relative to the page.
 * Use ui.position to get the current position of the modal dialog div as { top, left } object, relative to the page.
 * Event fired every time the modal dialog changes its position.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridModalDialog widget.
 * Use ui.modalDialog to get the reference to the igGridModalDialog element
 * Use ui.originalPosition to get the original position of the modal dialog div as { top, left } object, relative to the page.
 * Use ui.position to get the current position of the modal dialog div as { top, left } object, relative to the page.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the modal dialog is closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridModalDialog widget.
 * Use ui.modalDialog to get the reference to the igGridModalDialog element
 * Event fired before the modal dialog is closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridModalDialog widget.
 * Use ui.modalDialog to get the reference to the igGridModalDialog element
 * 
 * \@optionValue Define event handler function.
 * Event fired after the modal dialog has been closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridModalDialog widget.
 * Use ui.modalDialog to get the reference to the igGridModalDialog element
 * Event fired after the modal dialog has been closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridModalDialog widget.
 * Use ui.modalDialog to get the reference to the igGridModalDialog element
 * 
 * \@optionValue Define event handler function.
 * Event fired before the contents of the modal dialog are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridModalDialog widget.
 * Use ui.modalDialog to get the reference to the igGridModalDialog element
 * Event fired before the contents of the modal dialog are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridModalDialog widget.
 * Use ui.modalDialog to get the reference to the igGridModalDialog element
 * 
 * \@optionValue Define event handler function.
 * Event fired after the contents of the modal dialog are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridModalDialog widget.
 * Use ui.modalDialog to get the reference to the igGridModalDialog element
 * Event fired after the contents of the modal dialog are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridModalDialog widget.
 * Use ui.modalDialog to get the reference to the igGridModalDialog element
 * 
 * \@optionValue Define event handler function.
 * Event fired when the button OK/Apply is clicked
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridModalDialog widget.
 * Use ui.modalDialog to get the reference to the igGridModalDialog element
 * Event fired when the button OK/Apply is clicked
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridModalDialog widget.
 * Use ui.modalDialog to get the reference to the igGridModalDialog element
 * 
 * \@optionValue Define event handler function.
 * Event fired when the button Cancel is clicked
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridModalDialog widget.
 * Use ui.modalDialog to get the reference to the igGridModalDialog element
 * Event fired when the button Cancel is clicked
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the igGridModalDialog widget.
 * Use ui.modalDialog to get the reference to the igGridModalDialog element
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgGridModalDialog} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgGridModalDialog|?} accepted_or_optionName_or_options_or_methodParams
 * @return {void|string|?|number|boolean|!ModalDialogOpeningEvent|!ModalDialogOpenedEvent|!ModalDialogMovingEvent|!ModalDialogClosingEvent|!ModalDialogClosedEvent|!ModalDialogContentsRenderingEvent|!ModalDialogContentsRenderedEvent|!ButtonOKClickEvent|!ButtonCancelClickEvent|!JQuery}
 */
JQuery.prototype.igGridModalDialog = function(methodName_or_optionLiteral_or_options, accepted_or_optionName_or_options_or_methodParams) {};

/**
 * @param {string|!IgEditorFilter} methodName_or_options_or_optionLiteral
 * @param {...!Object|string|!IgEditorFilter|?} delay_or_optionName_or_options_or_methodParams
 * @return {void|!JQuery|?}
 */
JQuery.prototype.igEditorFilter = function(methodName_or_options_or_optionLiteral, delay_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgGridSortingColumnSetting() {}
 /** @type {string} */
IgGridSortingColumnSetting.prototype.columnKey;
 /** @type {number} */
IgGridSortingColumnSetting.prototype.columnIndex;
 /** @type {string} */
IgGridSortingColumnSetting.prototype.firstSortDirection;
 /** @type {string} */
IgGridSortingColumnSetting.prototype.currentSortDirection;
 /** @type {boolean} */
IgGridSortingColumnSetting.prototype.allowSorting;
 /** @type {(string|!Function)} */
IgGridSortingColumnSetting.prototype.compareFunc;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function ColumnSortingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColumnSortingEventUIParam() {}
 /** @type {?} */
ColumnSortingEventUIParam.prototype.owner;
 /** @type {?} */
ColumnSortingEventUIParam.prototype.columnKey;
 /** @type {?} */
ColumnSortingEventUIParam.prototype.direction;
 /** @type {?} */
ColumnSortingEventUIParam.prototype.newExpressions;
/**
 * @record
 * @struct
 */
function ColumnSortedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ColumnSortedEventUIParam() {}
 /** @type {?} */
ColumnSortedEventUIParam.prototype.owner;
 /** @type {?} */
ColumnSortedEventUIParam.prototype.columnKey;
 /** @type {?} */
ColumnSortedEventUIParam.prototype.direction;
 /** @type {?} */
ColumnSortedEventUIParam.prototype.expressions;
/**
 * @record
 * @struct
 */
function ModalDialogSortingChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ModalDialogSortingChangedEventUIParam() {}
 /** @type {?} */
ModalDialogSortingChangedEventUIParam.prototype.owner;
 /** @type {?} */
ModalDialogSortingChangedEventUIParam.prototype.modalDialogElement;
 /** @type {?} */
ModalDialogSortingChangedEventUIParam.prototype.columnKey;
 /** @type {?} */
ModalDialogSortingChangedEventUIParam.prototype.isAsc;
/**
 * @record
 * @struct
 */
function ModalDialogButtonUnsortClickEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ModalDialogButtonUnsortClickEventUIParam() {}
 /** @type {?} */
ModalDialogButtonUnsortClickEventUIParam.prototype.owner;
 /** @type {?} */
ModalDialogButtonUnsortClickEventUIParam.prototype.modalDialogElement;
 /** @type {?} */
ModalDialogButtonUnsortClickEventUIParam.prototype.columnKey;
/**
 * @record
 * @struct
 */
function ModalDialogSortClickEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ModalDialogSortClickEventUIParam() {}
 /** @type {?} */
ModalDialogSortClickEventUIParam.prototype.owner;
 /** @type {?} */
ModalDialogSortClickEventUIParam.prototype.modalDialogElement;
 /** @type {?} */
ModalDialogSortClickEventUIParam.prototype.columnKey;
/**
 * @record
 * @struct
 */
function IgGridSorting() {}
 /** @type {string} */
IgGridSorting.prototype.type;
 /** @type {boolean} */
IgGridSorting.prototype.caseSensitive;
 /** @type {boolean} */
IgGridSorting.prototype.applySortedColumnCss;
 /** @type {string} */
IgGridSorting.prototype.sortUrlKey;
 /** @type {string} */
IgGridSorting.prototype.sortUrlKeyAscValue;
 /** @type {string} */
IgGridSorting.prototype.sortUrlKeyDescValue;
 /** @type {string} */
IgGridSorting.prototype.mode;
 /** @type {!Function} */
IgGridSorting.prototype.customSortFunction;
 /** @type {string} */
IgGridSorting.prototype.firstSortDirection;
 /** @type {string} */
IgGridSorting.prototype.sortedColumnTooltip;
 /** @type {boolean} */
IgGridSorting.prototype.modalDialogSortOnClick;
 /** @type {string} */
IgGridSorting.prototype.modalDialogSortByButtonText;
 /** @type {string} */
IgGridSorting.prototype.modalDialogResetButtonLabel;
 /** @type {string} */
IgGridSorting.prototype.modalDialogCaptionButtonDesc;
 /** @type {string} */
IgGridSorting.prototype.modalDialogCaptionButtonAsc;
 /** @type {string} */
IgGridSorting.prototype.modalDialogCaptionButtonUnsort;
 /** @type {(string|number)} */
IgGridSorting.prototype.modalDialogWidth;
 /** @type {(string|number)} */
IgGridSorting.prototype.modalDialogHeight;
 /** @type {number} */
IgGridSorting.prototype.modalDialogAnimationDuration;
 /** @type {string} */
IgGridSorting.prototype.featureChooserText;
 /** @type {string} */
IgGridSorting.prototype.unsortedColumnTooltip;
 /** @type {!Array<!IgGridSortingColumnSetting>} */
IgGridSorting.prototype.columnSettings;
 /** @type {string} */
IgGridSorting.prototype.modalDialogCaptionText;
 /** @type {string} */
IgGridSorting.prototype.modalDialogButtonApplyText;
 /** @type {string} */
IgGridSorting.prototype.modalDialogButtonCancelText;
 /** @type {string} */
IgGridSorting.prototype.featureChooserSortAsc;
 /** @type {string} */
IgGridSorting.prototype.featureChooserSortDesc;
 /** @type {boolean} */
IgGridSorting.prototype.persist;
 /** @type {string} */
IgGridSorting.prototype.sortingDialogContainment;
 /** @type {string} */
IgGridSorting.prototype.dialogWidget;
 /** @type {boolean} */
IgGridSorting.prototype.inherit;
 /** @type {!ColumnSortingEvent} */
IgGridSorting.prototype.columnSorting;
 /** @type {!ColumnSortedEvent} */
IgGridSorting.prototype.columnSorted;
 /** @type {!ModalDialogOpeningEvent} */
IgGridSorting.prototype.modalDialogOpening;
 /** @type {!ModalDialogOpenedEvent} */
IgGridSorting.prototype.modalDialogOpened;
 /** @type {!ModalDialogMovingEvent} */
IgGridSorting.prototype.modalDialogMoving;
 /** @type {!ModalDialogClosingEvent} */
IgGridSorting.prototype.modalDialogClosing;
 /** @type {!ModalDialogClosedEvent} */
IgGridSorting.prototype.modalDialogClosed;
 /** @type {!ModalDialogContentsRenderingEvent} */
IgGridSorting.prototype.modalDialogContentsRendering;
 /** @type {!ModalDialogContentsRenderedEvent} */
IgGridSorting.prototype.modalDialogContentsRendered;
 /** @type {!ModalDialogSortingChangedEvent} */
IgGridSorting.prototype.modalDialogSortingChanged;
 /** @type {!ModalDialogButtonUnsortClickEvent} */
IgGridSorting.prototype.modalDialogButtonUnsortClick;
 /** @type {!ModalDialogSortClickEvent} */
IgGridSorting.prototype.modalDialogSortClick;
 /** @type {!ModalDialogButtonApplyClickEvent} */
IgGridSorting.prototype.modalDialogButtonApplyClick;
 /** @type {!ModalDialogButtonResetClickEvent} */
IgGridSorting.prototype.modalDialogButtonResetClick;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridSortingMethods() {}

/**
 * Sorts the data in a grid column  and updates the UI.
 * 
 * @param {!Object} index     Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column which we want to sort. If the mode is multiple, previous sorting states are not cleared.
 * @param {!Object} direction     Specifies sorting direction (ascending or descending)
 * @param {!Object} header
 * @return {void}
 */
IgGridSortingMethods.prototype.sortColumn = function(index, direction, header) {};

/**
 * Sorts the data in grid columns and updates the UI.\
 * @return {void}
 */
IgGridSortingMethods.prototype.sortMultiple = function() {};

/**
 * Removes current sorting(for all sorted columns) and updates the UI.
 * @return {void}
 */
IgGridSortingMethods.prototype.clearSorting = function() {};

/**
 * Removes sorting for the grid column with the specified columnKey/columnIndex and updates the UI.
 * 
 * @param {!Object} index     Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column for which we want to remove sorting. If the mode is multiple, previous sorting states are not cleared.
 * @param {!Object} header     - if specified client events should be fired
 * @return {void}
 */
IgGridSortingMethods.prototype.unsortColumn = function(index, header) {};

/**
 * Destroys the sorting feature. Unbinds events, removes added sorting elements, etc.
 * @return {void}
 */
IgGridSortingMethods.prototype.destroy = function() {};

/**
 * Opens the multiple sorting dialog.
 * @return {void}
 */
IgGridSortingMethods.prototype.openMultipleSortingDialog = function() {};

/**
 * Closes the multiple sorting dialog.
 * @return {void}
 */
IgGridSortingMethods.prototype.closeMultipleSortingDialog = function() {};

/**
 * Renders content of multiple sorting dialog - sorted and unsorted columns.
 * 
 * @param {!Object} isToCallEvents
 * @return {void}
 */
IgGridSortingMethods.prototype.renderMultipleSortingDialogContent = function(isToCallEvents) {};

/**
 * Remove clear button for multiple sorting dialog
 * @return {void}
 */
IgGridSortingMethods.prototype.removeDialogClearButton = function() {};

/**
 * @param {string} propertyName
 * @return {!IgGridSortingMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Defines local or remote sorting operations.
 * 
 * Defines local or remote sorting operations.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables or disables the case sensitivity of the sorting. Works only for [local](ui.iggridsorting#options:type) sorting.
 * 
 * Enables or disables the case sensitivity of the sorting. Works only for [local](ui.iggridsorting#options:type) sorting.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables special styling for sorted columns. If false, sorted column cells will not have any special sort-related styling.
 * 
 * Enables/disables special styling for sorted columns. If false, sorted column cells will not have any special sort-related styling.
 * 
 * 
 * \@optionValue New value to be set.
 * URL param name which specifies how sorting expressions will be encoded in the URL. Uses OData conventions. ex: ?sort(col1)=asc
 * 
 * URL param name which specifies how sorting expressions will be encoded in the URL. Uses OData conventions. ex: ?sort(col1)=asc
 * 
 * 
 * \@optionValue New value to be set.
 * URL param value for ascending type of sorting. Uses OData conventions. Example: ?sort(col1)=asc
 * 
 * URL param value for ascending type of sorting. Uses OData conventions. Example: ?sort(col1)=asc
 * 
 * 
 * \@optionValue New value to be set.
 * URL param value for descending type of sorting. Uses OData conventions. Example: ?sort(col1)=desc
 * 
 * URL param value for descending type of sorting. Uses OData conventions. Example: ?sort(col1)=desc
 * 
 * 
 * \@optionValue New value to be set.
 * Defines single column sorting or multiple column sorting.
 * 
 * Defines single column sorting or multiple column sorting.
 * 
 * 
 * \@optionValue New value to be set.
 * Custom sort function(or name of the function as a string) accepting three parameters - the data to be sorted, an array of data source field definitions, and the direction to sort with (optional). The function should return the sorted data array.
 * 
 * Custom sort function(or name of the function as a string) accepting three parameters - the data to be sorted, an array of data source field definitions, and the direction to sort with (optional). The function should return the sorted data array.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets which direction to use on the first click / keydown, if the column is sorted for the first time.
 * 
 * Sets which direction to use on the first click / keydown, if the column is sorted for the first time.
 * 
 * 
 * \@optionValue New value to be set.
 * Custom sorted column tooltip in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) format
 * Custom sorted column tooltip in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) format
 * 
 * \@optionValue New value to be set.
 * Gets whether sorting to be applied immediately when click sort/unsort columns when using the multiple sorting dialog. When it is false Apply button shows and sorting is applied when the button is clicked.
 * 
 * Sets whether sorting to be applied immediately when click sort/unsort columns when using the multiple sorting dialog. When it is false Apply button shows and sorting is applied when the button is clicked.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets sortby button text for each unsorted column in multiple sorting dialog.
 * 
 * Sets sortby button text for each unsorted column in multiple sorting dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets sortby button label for each unsorted column in multiple sorting dialog.
 * 
 * Sets sortby button label for each unsorted column in multiple sorting dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets caption for each descending sorted column in multiple sorting dialog.
 * 
 * Sets caption for each descending sorted column in multiple sorting dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets caption for each ascending sorted column in multiple sorting dialog.
 * 
 * Sets caption for each ascending sorted column in multiple sorting dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets caption for unsort button in multiple sorting dialog.
 * 
 * Sets caption for unsort button in multiple sorting dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets width of multiple sorting dialog.
 * 
 * Sets width of multiple sorting dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets height of multiple sorting dialog.
 * 
 * Sets height of multiple sorting dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets time of milliseconds for animation duration to show/hide modal dialog.
 * 
 * Sets time of milliseconds for animation duration to show/hide modal dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the text of the feature chooser sorting button.
 * 
 * Sets the text of the feature chooser sorting button.
 * 
 * 
 * \@optionValue New value to be set.
 * Custom unsorted column tooltip in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) format.
 * 
 * Custom unsorted column tooltip in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) format.
 * 
 * 
 * \@optionValue New value to be set.
 * A list of custom column settings that specify custom sorting settings for a specific column (whether sorting is enabled / disabled, default sort direction, first sort direction, etc.).
 * 
 * A list of custom column settings that specify custom sorting settings for a specific column (whether sorting is enabled / disabled, default sort direction, first sort direction, etc.).
 * 
 * 
 * \@optionValue New value to be set.
 * Gets caption text for multiple sorting dialog.
 * 
 * Sets caption text for multiple sorting dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets text of button which apply changes in modal dialog.
 * 
 * Sets text of button which apply changes in modal dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets text of button which cancels the changes in the advanced sorting modal dialog.
 * 
 * Sets text of button which cancels the changes in the advanced sorting modal dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
 * 
 * Sets the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
 * 
 * Sets the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables sorting persistence when the grid is rebound.
 * 
 * Enables/disables sorting persistence when the grid is rebound.
 * 
 * 
 * \@optionValue New value to be set.
 * Controls containment behavior of multiple sorting dialog.
 * 
 * owner  The multi sorting dialog will be draggable only in the grid area
 * window  The multi sorting dialog will be draggable in the whole window area
 * Controls containment behavior of multiple sorting dialog.
 * 
 * owner  The multi sorting dialog will be draggable only in the grid area
 * window  The multi sorting dialog will be draggable in the whole window area
 * 
 * \@optionValue New value to be set.
 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
 * 
 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * 
 * \@optionValue New value to be set.
 * Event fired before sorting is invoked for a certain column.
 * Return false in order to cancel column sorting.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSorting.
 * Use ui.owner.grid to get reference to grid.
 * Use ui.columnKey to get column key.
 * Use ui.direction to get sorting direction.
 * Use ui.newExpressions to get sorting expressions.
 * Event fired before sorting is invoked for a certain column.
 * Return false in order to cancel column sorting.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSorting.
 * Use ui.owner.grid to get reference to grid.
 * Use ui.columnKey to get column key.
 * Use ui.direction to get sorting direction.
 * Use ui.newExpressions to get sorting expressions.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the column has already been sorted and data - re-rendered.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSorting.
 * Use ui.owner.grid to get reference to grid.
 * Use ui.columnKey to get column key.
 * Use ui.direction to get sorting direction.
 * Use ui.expressions to get sorted expressions.
 * Event fired after the column has already been sorted and data - re-rendered.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSorting.
 * Use ui.owner.grid to get reference to grid.
 * Use ui.columnKey to get column key.
 * Use ui.direction to get sorting direction.
 * Use ui.expressions to get sorted expressions.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the modal dialog is opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired before the modal dialog is opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the modal dialog is already opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired after the modal dialog is already opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired every time the modal dialog changes its position.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.originalPosition to get the original position of the modal dialog div as { top, left } object, relative to the page.
 * Use ui.position to get the current position of the modal dialog div as { top, left } object, relative to the page.
 * Event fired every time the modal dialog changes its position.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.originalPosition to get the original position of the modal dialog div as { top, left } object, relative to the page.
 * Use ui.position to get the current position of the modal dialog div as { top, left } object, relative to the page.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the modal dialog is closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired before the modal dialog is closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the modal dialog has been closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired after the modal dialog has been closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the contents of the modal dialog are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired before the contents of the modal dialog are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the contents of the modal dialog are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired after the contents of the modal dialog are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired when sorting of column is changed in modal dialog. Column should be sorted
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.columnKey to get the column key
 * Use ui.isAsc to get whether column should be ascending or not. If true it should be ascending
 * Event fired when sorting of column is changed in modal dialog. Column should be sorted
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.columnKey to get the column key
 * Use ui.isAsc to get whether column should be ascending or not. If true it should be ascending
 * 
 * \@optionValue Define event handler function.
 * Event fired when button to unsort column is clicked in modal dialog
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.columnKey to get the column key
 * Event fired when button to unsort column is clicked in modal dialog
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.columnKey to get the column key
 * 
 * \@optionValue Define event handler function.
 * Event fired when column(which is not sorted) is clicked to be sorted in modal dialog
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.columnKey to get the column key
 * Event fired when column(which is not sorted) is clicked to be sorted in modal dialog
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.columnKey to get the column key
 * 
 * \@optionValue Define event handler function.
 * Event fired when button Apply in modal dialog is clicked
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.columnsToSort to get array of columns which should be sorted - array of objects of sort order - Asc/Desc and columnIdentifier
 * Event fired when button Apply in modal dialog is clicked
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.columnsToSort to get array of columns which should be sorted - array of objects of sort order - Asc/Desc and columnIdentifier
 * 
 * \@optionValue Define event handler function.
 * Event fired when the button to reset sorting is clicked.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired when the button to reset sorting is clicked.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgGridSorting} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgGridSorting|?} index_or_isToCallEvents_or_optionName_or_options_or_methodParams
 * @return {void|string|boolean|!Function|(string|number)|number|!Array<!IgGridSortingColumnSetting>|!ColumnSortingEvent|!ColumnSortedEvent|!ModalDialogOpeningEvent|!ModalDialogOpenedEvent|!ModalDialogMovingEvent|!ModalDialogClosingEvent|!ModalDialogClosedEvent|!ModalDialogContentsRenderingEvent|!ModalDialogContentsRenderedEvent|!ModalDialogSortingChangedEvent|!ModalDialogButtonUnsortClickEvent|!ModalDialogSortClickEvent|!ModalDialogButtonApplyClickEvent|!ModalDialogButtonResetClickEvent|!JQuery|?}
 */
JQuery.prototype.igGridSorting = function(methodName_or_optionLiteral_or_options, index_or_isToCallEvents_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgGridSummariesColumnSettingSummaryOperand() {}
 /** @type {string} */
IgGridSummariesColumnSettingSummaryOperand.prototype.rowDisplayLabel;
 /** @type {string} */
IgGridSummariesColumnSettingSummaryOperand.prototype.type;
 /** @type {boolean} */
IgGridSummariesColumnSettingSummaryOperand.prototype.active;
 /** @type {string} */
IgGridSummariesColumnSettingSummaryOperand.prototype.summaryCalculator;
 /** @type {number} */
IgGridSummariesColumnSettingSummaryOperand.prototype.order;
 /** @type {number} */
IgGridSummariesColumnSettingSummaryOperand.prototype.decimalDisplay;
 /** @type {boolean} */
IgGridSummariesColumnSettingSummaryOperand.prototype.isGridFormatter;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridSummariesColumnSetting() {}
 /** @type {boolean} */
IgGridSummariesColumnSetting.prototype.allowSummaries;
 /** @type {string} */
IgGridSummariesColumnSetting.prototype.columnKey;
 /** @type {number} */
IgGridSummariesColumnSetting.prototype.columnIndex;
 /** @type {!Array<!IgGridSummariesColumnSettingSummaryOperand>} */
IgGridSummariesColumnSetting.prototype.summaryOperands;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function SummariesCalculatingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SummariesCalculatingEventUIParam() {}
 /** @type {?} */
SummariesCalculatingEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function SummariesCalculatedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SummariesCalculatedEventUIParam() {}
 /** @type {?} */
SummariesCalculatedEventUIParam.prototype.data;
 /** @type {?} */
SummariesCalculatedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function SummariesMethodSelectionChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SummariesMethodSelectionChangedEventUIParam() {}
 /** @type {?} */
SummariesMethodSelectionChangedEventUIParam.prototype.columnKey;
 /** @type {?} */
SummariesMethodSelectionChangedEventUIParam.prototype.isSelected;
 /** @type {?} */
SummariesMethodSelectionChangedEventUIParam.prototype.methodName;
 /** @type {?} */
SummariesMethodSelectionChangedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function SummariesTogglingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SummariesTogglingEventUIParam() {}
 /** @type {?} */
SummariesTogglingEventUIParam.prototype.isToShow;
 /** @type {?} */
SummariesTogglingEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function SummariesToggledEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SummariesToggledEventUIParam() {}
 /** @type {?} */
SummariesToggledEventUIParam.prototype.isToShow;
 /** @type {?} */
SummariesToggledEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function DropDownOKClickedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DropDownOKClickedEventUIParam() {}
 /** @type {?} */
DropDownOKClickedEventUIParam.prototype.columnKey;
 /** @type {?} */
DropDownOKClickedEventUIParam.prototype.eventData;
 /** @type {?} */
DropDownOKClickedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function DropDownCancelClickedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DropDownCancelClickedEventUIParam() {}
 /** @type {?} */
DropDownCancelClickedEventUIParam.prototype.columnKey;
 /** @type {?} */
DropDownCancelClickedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function IgGridSummaries() {}
 /** @type {string} */
IgGridSummaries.prototype.type;
 /** @type {string} */
IgGridSummaries.prototype.dialogButtonOKText;
 /** @type {string} */
IgGridSummaries.prototype.dialogButtonCancelText;
 /** @type {string} */
IgGridSummaries.prototype.calculateRenderMode;
 /** @type {string} */
IgGridSummaries.prototype.featureChooserText;
 /** @type {string} */
IgGridSummaries.prototype.featureChooserTextHide;
 /** @type {?} */
IgGridSummaries.prototype.compactRenderingMode;
 /** @type {number} */
IgGridSummaries.prototype.defaultDecimalDisplay;
 /** @type {boolean} */
IgGridSummaries.prototype.showSummariesButton;
 /** @type {string} */
IgGridSummaries.prototype.summariesResponseKey;
 /** @type {string} */
IgGridSummaries.prototype.summaryExprUrlKey;
 /** @type {!Function} */
IgGridSummaries.prototype.callee;
 /** @type {number} */
IgGridSummaries.prototype.dropDownHeight;
 /** @type {number} */
IgGridSummaries.prototype.dropDownWidth;
 /** @type {boolean} */
IgGridSummaries.prototype.showDropDownButton;
 /** @type {string} */
IgGridSummaries.prototype.summaryExecution;
 /** @type {number} */
IgGridSummaries.prototype.dropDownDialogAnimationDuration;
 /** @type {string} */
IgGridSummaries.prototype.emptyCellText;
 /** @type {string} */
IgGridSummaries.prototype.summariesHeaderButtonTooltip;
 /** @type {string} */
IgGridSummaries.prototype.resultTemplate;
 /** @type {boolean} */
IgGridSummaries.prototype.isGridFormatter;
 /** @type {(string|!Object)} */
IgGridSummaries.prototype.renderSummaryCellFunc;
 /** @type {!Array<!IgGridSummariesColumnSetting>} */
IgGridSummaries.prototype.columnSettings;
 /** @type {boolean} */
IgGridSummaries.prototype.inherit;
 /** @type {!DropDownOpeningEvent} */
IgGridSummaries.prototype.dropDownOpening;
 /** @type {!DropDownOpenedEvent} */
IgGridSummaries.prototype.dropDownOpened;
 /** @type {!DropDownClosingEvent} */
IgGridSummaries.prototype.dropDownClosing;
 /** @type {!DropDownClosedEvent} */
IgGridSummaries.prototype.dropDownClosed;
 /** @type {!SummariesCalculatingEvent} */
IgGridSummaries.prototype.summariesCalculating;
 /** @type {!SummariesCalculatedEvent} */
IgGridSummaries.prototype.summariesCalculated;
 /** @type {!SummariesMethodSelectionChangedEvent} */
IgGridSummaries.prototype.summariesMethodSelectionChanged;
 /** @type {!SummariesTogglingEvent} */
IgGridSummaries.prototype.summariesToggling;
 /** @type {!SummariesToggledEvent} */
IgGridSummaries.prototype.summariesToggled;
 /** @type {!DropDownOKClickedEvent} */
IgGridSummaries.prototype.dropDownOKClicked;
 /** @type {!DropDownCancelClickedEvent} */
IgGridSummaries.prototype.dropDownCancelClicked;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridSummariesMethods() {}

/**
 * @return {void}
 */
IgGridSummariesMethods.prototype.destroy = function() {};

/**
 * Returns whether summaries rows are hidden
 * @return {void}
 */
IgGridSummariesMethods.prototype.isSummariesRowsHidden = function() {};

/**
 * Calculate summaries
 * @return {void}
 */
IgGridSummariesMethods.prototype.calculateSummaries = function() {};

/**
 * Remove all summaries dropdown buttons.
 * @return {void}
 */
IgGridSummariesMethods.prototype.clearAllFooterIcons = function() {};

/**
 * Toggle drop down
 * 
 * @param {string} columnKey    toggle drop down for the column with the specified key
 * @param {!Object} event    event object. Its data should contain current columnKey, isAnimating, buttonId
 * @return {void}
 */
IgGridSummariesMethods.prototype.toggleDropDown = function(columnKey, event) {};

/**
 * Show/Hide dialog
 * 
 * @param {!Object} $dialog     jQuery object representation of dropdown div element
 * @return {void}
 */
IgGridSummariesMethods.prototype.showHideDialog = function($dialog) {};

/**
 * Toggle summaries rows
 * 
 * @param {boolean} isToShow    Specifies whether to show or not summaries
 * @param {boolean} isInternalCall    Optional parameter.Specifies whether this function is called internally by the widget.
 * @return {void}
 */
IgGridSummariesMethods.prototype.toggleSummariesRows = function(isToShow, isInternalCall) {};

/**
 * Toggles the checkstate of a checkbox if checkboxMode is not set to off, otherwise does nothing.
 * 
 * @param {!Object} $checkbox     Specifies the jQuery object of the checkbox.
 * @return {void}
 */
IgGridSummariesMethods.prototype.toggleCheckstate = function($checkbox) {};

/**
 * Select/Unselect specified checkbox
 * 
 * @param {!Object} $checkbox     Specifies the jQuery object for checkbox
 * @param {boolean} isToSelect     Specify whether to select or not checkbox
 * @return {void}
 */
IgGridSummariesMethods.prototype.selectCheckBox = function($checkbox, isToSelect) {};

/**
 * Summary calculate the whole data for the specified column key, columnMethods and dataType (used when datasource is remote and dataType is date)
 * 
 * @param {string} ck    ColumnKey
 * @param {!Array<?>} columnMethods    Array of column methods objects
 * @param {!Object} data    Object which represents result
 * represents dataType for the current column
 * @param {!Object} dataType
 * @return {void}
 */
IgGridSummariesMethods.prototype.calculateSummaryColumn = function(ck, columnMethods, data, dataType) {};

/**
 * Return a JQUERY object which holds all summaries for all columns
 * @return {void}
 */
IgGridSummariesMethods.prototype.summaryCollection = function() {};

/**
 * Return a JQUERY object which holds all summaries for column with the specified column key
 * 
 * @param {!Object} columnKey
 * @return {void}
 */
IgGridSummariesMethods.prototype.summariesFor = function(columnKey) {};

/**
 * @param {string} propertyName
 * @return {!IgGridSummariesMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Type of summaries calculating.
 * 
 * Type of summaries calculating.
 * 
 * 
 * \@optionValue New value to be set.
 * Text of the button OK in the summaries dropdown
 * 
 * Text of the button OK in the summaries dropdown
 * 
 * 
 * \@optionValue New value to be set.
 * Text of the button Cancel in the summaries dropdown
 * 
 * Text of the button Cancel in the summaries dropdown
 * 
 * 
 * \@optionValue New value to be set.
 * Gets when calculations are made.
 * 
 * Sets when calculations are made.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set text that is shown in the feature chooser dropdown when summaries are hidden
 * 
 * Get or set text that is shown in the feature chooser dropdown when summaries are hidden
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set text that is shown in the feauture chooser dropdown when summaries are shown
 * 
 * Get or set text that is shown in the feauture chooser dropdown when summaries are shown
 * 
 * 
 * \@optionValue New value to be set.
 * Gets how compact the summaries are rendered.
 * When true indicates that the summaries may be rendered compactly, even mixing different summaries on the same line.
 * False ensures that each summary type is occupying a separate line.
 * Auto will use True if the maximum number of visible summaries is one or less and False otherwise.
 * 
 * Sets how compact the summaries are rendered.
 * When true indicates that the summaries may be rendered compactly, even mixing different summaries on the same line.
 * False ensures that each summary type is occupying a separate line.
 * Auto will use True if the maximum number of visible summaries is one or less and False otherwise.
 * 
 * 
 * \@optionValue New value to be set.
 * The number of digits after the decimal point. If gridFormatter is True then this option is ignored.
 * 
 * The number of digits after the decimal point. If gridFormatter is True then this option is ignored.
 * 
 * 
 * \@optionValue New value to be set.
 * Show header button icon in the header cell. On click - shows/hides summaries. If false then summary icon should not be shown in the feature chooser(if shown).
 * 
 * Show header button icon in the header cell. On click - shows/hides summaries. If false then summary icon should not be shown in the feature chooser(if shown).
 * 
 * 
 * \@optionValue New value to be set.
 * Result key by which we get data from the result returned by remote data source.
 * 
 * Result key by which we get data from the result returned by remote data source.
 * 
 * 
 * \@optionValue New value to be set.
 * Set key in GET Request for summaries - used only when type is remote
 * 
 * Set key in GET Request for summaries - used only when type is remote
 * 
 * 
 * \@optionValue New value to be set.
 * Function reference - it is called when data is retrieved from the data source
 * 
 * Function reference - it is called when data is retrieved from the data source
 * 
 * 
 * \@optionValue New value to be set.
 * Height of the dropdown in pixels
 * 
 * Height of the dropdown in pixels
 * 
 * 
 * \@optionValue New value to be set.
 * Width of the dropdown in pixels
 * 
 * Width of the dropdown in pixels
 * 
 * 
 * \@optionValue New value to be set.
 * Show/hide footer button(on click show/hide dropdown)
 * 
 * Show/hide footer button(on click show/hide dropdown)
 * 
 * 
 * \@optionValue New value to be set.
 * Determines when the summary values are calculated when type is local
 * 
 * Determines when the summary values are calculated when type is local
 * 
 * 
 * \@optionValue New value to be set.
 * Dropdown animation duration
 * 
 * Dropdown animation duration
 * 
 * 
 * \@optionValue New value to be set.
 * Empty text template to be shown for empty cells
 * 
 * Empty text template to be shown for empty cells
 * 
 * 
 * \@optionValue New value to be set.
 * Tooltip text for header cell button
 * 
 * Tooltip text for header cell button
 * 
 * 
 * \@optionValue New value to be set.
 * Result template for summary result(shown in table cell)
 * 
 * Result template for summary result(shown in table cell)
 * 
 * 
 * \@optionValue New value to be set.
 * If this property is enabled and in summaryOperand isGridFormatter  is undefined then use grid formatting for cells
 * 
 * If this property is enabled and in summaryOperand isGridFormatter  is undefined then use grid formatting for cells
 * 
 * 
 * \@optionValue New value to be set.
 * A reference or name of a javascript function - renders summary cell in grid footer.(if not set it is used default render function) It takes 3 parameters - methodName(summary method), columnKey, data(summary data which should be rendered)
 * 
 * A reference or name of a javascript function - renders summary cell in grid footer.(if not set it is used default render function) It takes 3 parameters - methodName(summary method), columnKey, data(summary data which should be rendered)
 * 
 * 
 * \@optionValue New value to be set.
 * A list of column settings that specifies custom summaries options per column basis
 * 
 * A list of column settings that specifies custom summaries options per column basis
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * \@optionValue New value to be set.
 * Event fired before drop down is opened for a specific column summary
 * Return false in order to cancel opening the drop down.
 * Function takes arguments evt and ui.
 * Use ui.columnKey to get column key of the column where drop down is opening.
 * Use ui.owner in order to access the igGridSummaries widget object.
 * Event fired before drop down is opened for a specific column summary
 * Return false in order to cancel opening the drop down.
 * Function takes arguments evt and ui.
 * Use ui.columnKey to get column key of the column where drop down is opening.
 * Use ui.owner in order to access the igGridSummaries widget object.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the summaries dropdown is opened for a specific column
 * Function takes arguments evt and ui.
 * Use ui.columnKey to get column key of the column where drop down is shown.
 * Use ui.owner in order to access the igGridSummaries widget object.
 * Event fired after the summaries dropdown is opened for a specific column
 * Function takes arguments evt and ui.
 * Use ui.columnKey to get column key of the column where drop down is shown.
 * Use ui.owner in order to access the igGridSummaries widget object.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the dropdown for a summary column starts closing
 * Return false in order to cancel closing the drop down.
 * Function takes arguments evt and ui.
 * Use ui.columnKey to get column key of the column where drop down is closing.
 * Use ui.owner in order to access the igGridSummaries widget object.
 * Event fired before the dropdown for a summary column starts closing
 * Return false in order to cancel closing the drop down.
 * Function takes arguments evt and ui.
 * Use ui.columnKey to get column key of the column where drop down is closing.
 * Use ui.owner in order to access the igGridSummaries widget object.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the dropdown for a summary column is closed
 * Function takes arguments evt and ui.
 * Use ui.columnKey to get column key of the column where drop down is closing.
 * Use ui.owner in order to access the igGridSummaries widget object.
 * Event fired after the dropdown for a summary column is closed
 * Function takes arguments evt and ui.
 * Use ui.columnKey to get column key of the column where drop down is closing.
 * Use ui.owner in order to access the igGridSummaries widget object.
 * 
 * \@optionValue Define event handler function.
 * Event fired before summaries calculations are made
 * Return false in order to cancel calculation of summaries.
 * Function takes arguments evt and ui.
 * Use ui.owner in order to access the igGridSummaries widget object.
 * Event fired before summaries calculations are made
 * Return false in order to cancel calculation of summaries.
 * Function takes arguments evt and ui.
 * Use ui.owner in order to access the igGridSummaries widget object.
 * 
 * \@optionValue Define event handler function.
 * Event fired after summaries calculation are completely made
 * Function takes arguments evt and ui.
 * Use ui.data to get data for calculated summaries
 * Use ui.owner in order to access the igGridSummaries widget object.
 * Event fired after summaries calculation are completely made
 * Function takes arguments evt and ui.
 * Use ui.data to get data for calculated summaries
 * Use ui.owner in order to access the igGridSummaries widget object.
 * 
 * \@optionValue Define event handler function.
 * Event fired when user selects/deselects summary method from checkbox
 * Function takes arguments evt and ui.
 * Use ui.columnKey to get column key of the column where it is changed selection of summary method
 * Use ui.isSelected to get whether method is selected or not
 * Use ui.methodName to get summary method name
 * Use ui.owner in order to access the igGridSummaries widget object.
 * Event fired when user selects/deselects summary method from checkbox
 * Function takes arguments evt and ui.
 * Use ui.columnKey to get column key of the column where it is changed selection of summary method
 * Use ui.isSelected to get whether method is selected or not
 * Use ui.methodName to get summary method name
 * Use ui.owner in order to access the igGridSummaries widget object.
 * 
 * \@optionValue Define event handler function.
 * Event is fired bofore summary rows start toggling
 * Return false in order to cancel showing/hiding of summaries.
 * Function takes arguments evt and ui.
 * Use ui.isToShow to get whether summaries are shown or not.
 * Use ui.owner in order to access the igGridSummaries widget object.
 * Event is fired bofore summary rows start toggling
 * Return false in order to cancel showing/hiding of summaries.
 * Function takes arguments evt and ui.
 * Use ui.isToShow to get whether summaries are shown or not.
 * Use ui.owner in order to access the igGridSummaries widget object.
 * 
 * \@optionValue Define event handler function.
 * Event is fired after summary rows are toggled
 * Function takes arguments evt and ui.
 * Use ui.isToShow to get whether summaries are shown or not.
 * Use ui.owner in order to access the igGridSummaries widget object.
 * Event is fired after summary rows are toggled
 * Function takes arguments evt and ui.
 * Use ui.isToShow to get whether summaries are shown or not.
 * Use ui.owner in order to access the igGridSummaries widget object.
 * 
 * \@optionValue Define event handler function.
 * Event is fired when OK button is clicked in drop down
 * Function takes arguments evt and ui.
 * Use ui.columnKey to get column key for which OK button is clicked.
 * Use ui.eventData to get data about which summary methods are(not) selected. Format of event data is {type: "min", active: false};
 * Use ui.owner in order to access the igGridSummaries widget object.
 * Event is fired when OK button is clicked in drop down
 * Function takes arguments evt and ui.
 * Use ui.columnKey to get column key for which OK button is clicked.
 * Use ui.eventData to get data about which summary methods are(not) selected. Format of event data is {type: "min", active: false};
 * Use ui.owner in order to access the igGridSummaries widget object.
 * 
 * \@optionValue Define event handler function.
 * Event is fired when Cancel button is clicked in drop down.
 * Function takes arguments evt and ui.
 * Use ui.columnKey to get column key for which Cancel button is clicked.
 * Use ui.owner in order to access the igGridSummaries widget object.
 * Event is fired when Cancel button is clicked in drop down.
 * Function takes arguments evt and ui.
 * Use ui.columnKey to get column key for which Cancel button is clicked.
 * Use ui.owner in order to access the igGridSummaries widget object.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgGridSummaries} methodName_or_optionLiteral_or_options
 * @param {...string|!Object|boolean|!IgGridSummaries|?} columnKey_or_$dialog_or_isToShow_or_$checkbox_or_ck_or_optionName_or_options_or_methodParams
 * @return {void|string|?|number|boolean|!Function|(string|!Object)|!Array<!IgGridSummariesColumnSetting>|!DropDownOpeningEvent|!DropDownOpenedEvent|!DropDownClosingEvent|!DropDownClosedEvent|!SummariesCalculatingEvent|!SummariesCalculatedEvent|!SummariesMethodSelectionChangedEvent|!SummariesTogglingEvent|!SummariesToggledEvent|!DropDownOKClickedEvent|!DropDownCancelClickedEvent|!JQuery}
 */
JQuery.prototype.igGridSummaries = function(methodName_or_optionLiteral_or_options, columnKey_or_$dialog_or_isToShow_or_$checkbox_or_ck_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgGridTooltipsColumnSettings() {}
 /** @type {string} */
IgGridTooltipsColumnSettings.prototype.columnKey;
 /** @type {number} */
IgGridTooltipsColumnSettings.prototype.columnIndex;
 /** @type {boolean} */
IgGridTooltipsColumnSettings.prototype.allowTooltips;
 /** @type {number} */
IgGridTooltipsColumnSettings.prototype.maxWidth;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridTooltips() {}
 /** @type {string} */
IgGridTooltips.prototype.visibility;
 /** @type {string} */
IgGridTooltips.prototype.style;
 /** @type {number} */
IgGridTooltips.prototype.showDelay;
 /** @type {number} */
IgGridTooltips.prototype.hideDelay;
 /** @type {!IgGridTooltipsColumnSettings} */
IgGridTooltips.prototype.columnSettings;
 /** @type {number} */
IgGridTooltips.prototype.fadeTimespan;
 /** @type {number} */
IgGridTooltips.prototype.cursorLeftOffset;
 /** @type {number} */
IgGridTooltips.prototype.cursorTopOffset;
 /** @type {boolean} */
IgGridTooltips.prototype.inherit;
 /** @type {!TooltipShowingEvent} */
IgGridTooltips.prototype.tooltipShowing;
 /** @type {!TooltipShownEvent} */
IgGridTooltips.prototype.tooltipShown;
 /** @type {!TooltipHidingEvent} */
IgGridTooltips.prototype.tooltipHiding;
 /** @type {!TooltipHiddenEvent} */
IgGridTooltips.prototype.tooltipHidden;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridTooltipsMethods() {}

/**
 * Destroys the tooltip widget.
 * @return {void}
 */
IgGridTooltipsMethods.prototype.destroy = function() {};

/**
 * Returns the ID of the parent div element bounding the ruler and the tooltip container
 * @return {string}
 */
IgGridTooltipsMethods.prototype.id = function() {};

/**
 * @param {string} propertyName
 * @return {!IgGridTooltipsMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Determines the tooltip visibility option
 * 
 * Determines the tooltip visibility option
 * 
 * 
 * \@optionValue New value to be set.
 * Controls the tooltip's style
 * 
 * Controls the tooltip's style
 * 
 * 
 * \@optionValue New value to be set.
 * The time in milliseconds after which tooltip will show when
 * mouse cursor is hovered over a cell.
 * 
 * The time in milliseconds after which tooltip will show when
 * mouse cursor is hovered over a cell.
 * 
 * 
 * \@optionValue New value to be set.
 * Type="integer" The time in milliseconds after which tooltip hides when mouse
 * cursor gets outside of the cell.
 * 
 * Type="integer" The time in milliseconds after which tooltip hides when mouse
 * cursor gets outside of the cell.
 * 
 * 
 * \@optionValue New value to be set.
 * A list of custom column settings that specify custom tooltip settings for a specific column (whether tooltips are enabled / disabled)
 * 
 * A list of custom column settings that specify custom tooltip settings for a specific column (whether tooltips are enabled / disabled)
 * 
 * 
 * \@optionValue New value to be set.
 * The time tooltip fades in and out when showing/hiding
 * 
 * Sets the time tooltip fades in and out when showing/hiding
 * 
 * 
 * \@optionValue New value to be set.
 * The left position of the tooltip relative to the mouse cursor
 * 
 * Sets the left position of the tooltip relative to the mouse cursor
 * 
 * 
 * \@optionValue New value to be set.
 * The top position of the tooltip relative to the mouse cursor
 * 
 * Sets the top position of the tooltip relative to the mouse cursor
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * \@optionValue New value to be set.
 * Event fired when the mouse has hovered on an element long enough to display a tooltip
 * use args.owner to get a reference to the widget
 * use args.tooltip to get or set the string to be displayed
 * use args.value to get the value of the cell the tooltip is displayed for
 * use args.element to get a reference to the cell the tooltip is displayed for
 * use args.index to get the row index of the cell the tooltip is displayed for
 * use args.columnKey to get the column key of the cell the tooltip is displayed for
 * use args.columnIndex to get the column index of the cell the tooltip is displayed for
 * Event fired when the mouse has hovered on an element long enough to display a tooltip
 * use args.owner to get a reference to the widget
 * use args.tooltip to get or set the string to be displayed
 * use args.value to get the value of the cell the tooltip is displayed for
 * use args.element to get a reference to the cell the tooltip is displayed for
 * use args.index to get the row index of the cell the tooltip is displayed for
 * use args.columnKey to get the column key of the cell the tooltip is displayed for
 * use args.columnIndex to get the column index of the cell the tooltip is displayed for
 * 
 * \@optionValue Define event handler function.
 * Event fired after a tooltip is shown
 * use args.owner to get a reference to the widget
 * use args.tooltip to get the string displayed in the tooltip
 * use args.value to get the value of the cell the tooltip is displayed for
 * use args.element to get a reference to the cell the tooltip is displayed for
 * use args.index to get the row index of the cell the tooltip is displayed for
 * use args.columnKey to get the column key of the cell the tooltip is displayed for
 * use args.columnIndex to get the column index of the cell the tooltip is displayed for
 * Event fired after a tooltip is shown
 * use args.owner to get a reference to the widget
 * use args.tooltip to get the string displayed in the tooltip
 * use args.value to get the value of the cell the tooltip is displayed for
 * use args.element to get a reference to the cell the tooltip is displayed for
 * use args.index to get the row index of the cell the tooltip is displayed for
 * use args.columnKey to get the column key of the cell the tooltip is displayed for
 * use args.columnIndex to get the column index of the cell the tooltip is displayed for
 * 
 * \@optionValue Define event handler function.
 * Event fired when the mouse has left an element and the tooltip is about to hide
 * use args.owner to get a reference to the widget
 * use args.tooltip to get the string displayed in the tooltip
 * use args.value to get the value of the cell the tooltip is displayed for
 * use args.element to get a reference to the cell the tooltip is displayed for
 * use args.index to get the row index of the cell the tooltip is displayed for
 * use args.columnKey to get the column key of the cell the tooltip is displayed for
 * use args.columnIndex to get the column index of the cell the tooltip is displayed for
 * Event fired when the mouse has left an element and the tooltip is about to hide
 * use args.owner to get a reference to the widget
 * use args.tooltip to get the string displayed in the tooltip
 * use args.value to get the value of the cell the tooltip is displayed for
 * use args.element to get a reference to the cell the tooltip is displayed for
 * use args.index to get the row index of the cell the tooltip is displayed for
 * use args.columnKey to get the column key of the cell the tooltip is displayed for
 * use args.columnIndex to get the column index of the cell the tooltip is displayed for
 * 
 * \@optionValue Define event handler function.
 * Event fired after a tooltip is hidden
 * use args.owner to get a reference to the widget
 * use args.tooltip to get the string displayed in the tooltip
 * use args.value to get the value of the cell the tooltip was displayed for
 * use args.element to get a reference to the cell the tooltip was displayed for
 * use args.index to get the row index of the cell the tooltip was displayed for
 * use args.columnKey to get the column key of the cell the tooltip was displayed for
 * use args.columnIndex to get the column index of the cell the tooltip was displayed for
 * Event fired after a tooltip is hidden
 * use args.owner to get a reference to the widget
 * use args.tooltip to get the string displayed in the tooltip
 * use args.value to get the value of the cell the tooltip was displayed for
 * use args.element to get a reference to the cell the tooltip was displayed for
 * use args.index to get the row index of the cell the tooltip was displayed for
 * use args.columnKey to get the column key of the cell the tooltip was displayed for
 * use args.columnIndex to get the column index of the cell the tooltip was displayed for
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgGridTooltips} methodName_or_optionLiteral_or_options
 * @param {...string|!IgGridTooltips|?} optionName_or_options_or_methodParams
 * @return {void|string|number|!IgGridTooltipsColumnSettings|boolean|!TooltipShowingEvent|!TooltipShownEvent|!TooltipHidingEvent|!TooltipHiddenEvent|!JQuery|?}
 */
JQuery.prototype.igGridTooltips = function(methodName_or_optionLiteral_or_options, optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgGridUpdatingColumnSetting() {}
 /** @type {string} */
IgGridUpdatingColumnSetting.prototype.columnKey;
 /** @type {string} */
IgGridUpdatingColumnSetting.prototype.editorType;
 /** @type {?} */
IgGridUpdatingColumnSetting.prototype.editorProvider;
 /** @type {?} */
IgGridUpdatingColumnSetting.prototype.editorOptions;
 /** @type {boolean} */
IgGridUpdatingColumnSetting.prototype.required;
 /** @type {boolean} */
IgGridUpdatingColumnSetting.prototype.readOnly;
 /** @type {boolean} */
IgGridUpdatingColumnSetting.prototype.validation;
 /** @type {?} */
IgGridUpdatingColumnSetting.prototype.defaultValue;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridUpdatingRowEditDialogOptions() {}
 /** @type {string} */
IgGridUpdatingRowEditDialogOptions.prototype.captionLabel;
 /** @type {string} */
IgGridUpdatingRowEditDialogOptions.prototype.containment;
 /** @type {(string|number)} */
IgGridUpdatingRowEditDialogOptions.prototype.width;
 /** @type {(string|number)} */
IgGridUpdatingRowEditDialogOptions.prototype.height;
 /** @type {number} */
IgGridUpdatingRowEditDialogOptions.prototype.animationDuration;
 /** @type {boolean} */
IgGridUpdatingRowEditDialogOptions.prototype.showReadonlyEditors;
 /** @type {boolean} */
IgGridUpdatingRowEditDialogOptions.prototype.showEditorsForHiddenColumns;
 /** @type {(string|number)} */
IgGridUpdatingRowEditDialogOptions.prototype.namesColumnWidth;
 /** @type {(string|number)} */
IgGridUpdatingRowEditDialogOptions.prototype.editorsColumnWidth;
 /** @type {boolean} */
IgGridUpdatingRowEditDialogOptions.prototype.showDoneCancelButtons;
 /** @type {string} */
IgGridUpdatingRowEditDialogOptions.prototype.dialogTemplate;
 /** @type {string} */
IgGridUpdatingRowEditDialogOptions.prototype.dialogTemplateSelector;
 /** @type {string} */
IgGridUpdatingRowEditDialogOptions.prototype.editorsTemplate;
 /** @type {string} */
IgGridUpdatingRowEditDialogOptions.prototype.editorsTemplateSelector;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function EditRowStartingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function EditRowStartingEventUIParam() {}
 /** @type {?} */
EditRowStartingEventUIParam.prototype.owner;
 /** @type {?} */
EditRowStartingEventUIParam.prototype.rowID;
 /** @type {?} */
EditRowStartingEventUIParam.prototype.rowAdding;
/**
 * @record
 * @struct
 */
function EditRowStartedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function EditRowStartedEventUIParam() {}
 /** @type {?} */
EditRowStartedEventUIParam.prototype.owner;
 /** @type {?} */
EditRowStartedEventUIParam.prototype.rowID;
 /** @type {?} */
EditRowStartedEventUIParam.prototype.rowAdding;
/**
 * @record
 * @struct
 */
function EditRowEndingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function EditRowEndingEventUIParam() {}
 /** @type {?} */
EditRowEndingEventUIParam.prototype.owner;
 /** @type {?} */
EditRowEndingEventUIParam.prototype.rowID;
 /** @type {?} */
EditRowEndingEventUIParam.prototype.update;
 /** @type {?} */
EditRowEndingEventUIParam.prototype.rowAdding;
 /** @type {?} */
EditRowEndingEventUIParam.prototype.values;
 /** @type {?} */
EditRowEndingEventUIParam.prototype.oldValues;
/**
 * @record
 * @struct
 */
function EditRowEndedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function EditRowEndedEventUIParam() {}
 /** @type {?} */
EditRowEndedEventUIParam.prototype.owner;
 /** @type {?} */
EditRowEndedEventUIParam.prototype.rowID;
 /** @type {?} */
EditRowEndedEventUIParam.prototype.update;
 /** @type {?} */
EditRowEndedEventUIParam.prototype.rowAdding;
 /** @type {?} */
EditRowEndedEventUIParam.prototype.values;
 /** @type {?} */
EditRowEndedEventUIParam.prototype.oldValues;
/**
 * @record
 * @struct
 */
function EditCellStartingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function EditCellStartingEventUIParam() {}
 /** @type {?} */
EditCellStartingEventUIParam.prototype.owner;
 /** @type {?} */
EditCellStartingEventUIParam.prototype.rowID;
 /** @type {?} */
EditCellStartingEventUIParam.prototype.columnIndex;
 /** @type {?} */
EditCellStartingEventUIParam.prototype.columnKey;
 /** @type {?} */
EditCellStartingEventUIParam.prototype.editor;
 /** @type {?} */
EditCellStartingEventUIParam.prototype.value;
 /** @type {?} */
EditCellStartingEventUIParam.prototype.rowAdding;
/**
 * @record
 * @struct
 */
function EditCellStartedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function EditCellStartedEventUIParam() {}
 /** @type {?} */
EditCellStartedEventUIParam.prototype.owner;
 /** @type {?} */
EditCellStartedEventUIParam.prototype.rowID;
 /** @type {?} */
EditCellStartedEventUIParam.prototype.columnIndex;
 /** @type {?} */
EditCellStartedEventUIParam.prototype.columnKey;
 /** @type {?} */
EditCellStartedEventUIParam.prototype.editor;
 /** @type {?} */
EditCellStartedEventUIParam.prototype.value;
 /** @type {?} */
EditCellStartedEventUIParam.prototype.rowAdding;
/**
 * @record
 * @struct
 */
function EditCellEndingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function EditCellEndingEventUIParam() {}
 /** @type {?} */
EditCellEndingEventUIParam.prototype.owner;
 /** @type {?} */
EditCellEndingEventUIParam.prototype.rowID;
 /** @type {?} */
EditCellEndingEventUIParam.prototype.columnIndex;
 /** @type {?} */
EditCellEndingEventUIParam.prototype.columnKey;
 /** @type {?} */
EditCellEndingEventUIParam.prototype.editor;
 /** @type {?} */
EditCellEndingEventUIParam.prototype.value;
 /** @type {?} */
EditCellEndingEventUIParam.prototype.oldValue;
 /** @type {?} */
EditCellEndingEventUIParam.prototype.update;
 /** @type {?} */
EditCellEndingEventUIParam.prototype.rowAdding;
/**
 * @record
 * @struct
 */
function EditCellEndedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function EditCellEndedEventUIParam() {}
 /** @type {?} */
EditCellEndedEventUIParam.prototype.owner;
 /** @type {?} */
EditCellEndedEventUIParam.prototype.rowID;
 /** @type {?} */
EditCellEndedEventUIParam.prototype.columnIndex;
 /** @type {?} */
EditCellEndedEventUIParam.prototype.columnKey;
 /** @type {?} */
EditCellEndedEventUIParam.prototype.editor;
 /** @type {?} */
EditCellEndedEventUIParam.prototype.value;
 /** @type {?} */
EditCellEndedEventUIParam.prototype.oldValue;
 /** @type {?} */
EditCellEndedEventUIParam.prototype.update;
 /** @type {?} */
EditCellEndedEventUIParam.prototype.rowAdding;
/**
 * @record
 * @struct
 */
function RowAddingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RowAddingEventUIParam() {}
 /** @type {?} */
RowAddingEventUIParam.prototype.owner;
 /** @type {?} */
RowAddingEventUIParam.prototype.values;
 /** @type {?} */
RowAddingEventUIParam.prototype.oldValues;
/**
 * @record
 * @struct
 */
function RowAddedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RowAddedEventUIParam() {}
 /** @type {?} */
RowAddedEventUIParam.prototype.owner;
 /** @type {?} */
RowAddedEventUIParam.prototype.values;
 /** @type {?} */
RowAddedEventUIParam.prototype.oldValues;
/**
 * @record
 * @struct
 */
function RowDeletingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RowDeletingEventUIParam() {}
 /** @type {?} */
RowDeletingEventUIParam.prototype.owner;
 /** @type {?} */
RowDeletingEventUIParam.prototype.element;
 /** @type {?} */
RowDeletingEventUIParam.prototype.rowID;
/**
 * @record
 * @struct
 */
function RowDeletedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RowDeletedEventUIParam() {}
 /** @type {?} */
RowDeletedEventUIParam.prototype.owner;
 /** @type {?} */
RowDeletedEventUIParam.prototype.element;
 /** @type {?} */
RowDeletedEventUIParam.prototype.rowID;
/**
 * @record
 * @struct
 */
function DataDirtyEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DataDirtyEventUIParam() {}
 /** @type {?} */
DataDirtyEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function GeneratePrimaryKeyValueEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function GeneratePrimaryKeyValueEventUIParam() {}
 /** @type {?} */
GeneratePrimaryKeyValueEventUIParam.prototype.owner;
 /** @type {?} */
GeneratePrimaryKeyValueEventUIParam.prototype.value;
/**
 * @record
 * @struct
 */
function RowEditDialogBeforeOpenEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RowEditDialogBeforeOpenEventUIParam() {}
 /** @type {?} */
RowEditDialogBeforeOpenEventUIParam.prototype.owner;
 /** @type {?} */
RowEditDialogBeforeOpenEventUIParam.prototype.dialogElement;
/**
 * @record
 * @struct
 */
function RowEditDialogAfterOpenEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RowEditDialogAfterOpenEventUIParam() {}
 /** @type {?} */
RowEditDialogAfterOpenEventUIParam.prototype.owner;
 /** @type {?} */
RowEditDialogAfterOpenEventUIParam.prototype.dialogElement;
/**
 * @record
 * @struct
 */
function RowEditDialogBeforeCloseEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RowEditDialogBeforeCloseEventUIParam() {}
 /** @type {?} */
RowEditDialogBeforeCloseEventUIParam.prototype.owner;
 /** @type {?} */
RowEditDialogBeforeCloseEventUIParam.prototype.dialogElement;
/**
 * @record
 * @struct
 */
function RowEditDialogAfterCloseEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RowEditDialogAfterCloseEventUIParam() {}
 /** @type {?} */
RowEditDialogAfterCloseEventUIParam.prototype.owner;
 /** @type {?} */
RowEditDialogAfterCloseEventUIParam.prototype.dialogElement;
/**
 * @record
 * @struct
 */
function RowEditDialogContentsRenderedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RowEditDialogContentsRenderedEventUIParam() {}
 /** @type {?} */
RowEditDialogContentsRenderedEventUIParam.prototype.owner;
 /** @type {?} */
RowEditDialogContentsRenderedEventUIParam.prototype.dialogElement;
/**
 * @record
 * @struct
 */
function IgGridUpdating() {}
 /** @type {!Array<!IgGridUpdatingColumnSetting>} */
IgGridUpdating.prototype.columnSettings;
 /** @type {string} */
IgGridUpdating.prototype.editMode;
 /** @type {boolean} */
IgGridUpdating.prototype.enableDeleteRow;
 /** @type {boolean} */
IgGridUpdating.prototype.enableAddRow;
 /** @type {boolean} */
IgGridUpdating.prototype.validation;
 /** @type {string} */
IgGridUpdating.prototype.doneLabel;
 /** @type {string} */
IgGridUpdating.prototype.doneTooltip;
 /** @type {string} */
IgGridUpdating.prototype.cancelLabel;
 /** @type {string} */
IgGridUpdating.prototype.cancelTooltip;
 /** @type {string} */
IgGridUpdating.prototype.addRowLabel;
 /** @type {string} */
IgGridUpdating.prototype.addRowTooltip;
 /** @type {string} */
IgGridUpdating.prototype.deleteRowLabel;
 /** @type {string} */
IgGridUpdating.prototype.deleteRowTooltip;
 /** @type {boolean} */
IgGridUpdating.prototype.showDoneCancelButtons;
 /** @type {boolean} */
IgGridUpdating.prototype.enableDataDirtyException;
 /** @type {(string|!Array<?>)} */
IgGridUpdating.prototype.startEditTriggers;
 /** @type {boolean} */
IgGridUpdating.prototype.horizontalMoveOnEnter;
 /** @type {boolean} */
IgGridUpdating.prototype.excelNavigationMode;
 /** @type {(string|!Function)} */
IgGridUpdating.prototype.saveChangesSuccessHandler;
 /** @type {(string|!Function)} */
IgGridUpdating.prototype.saveChangesErrorHandler;
 /** @type {(string|number)} */
IgGridUpdating.prototype.swipeDistance;
 /** @type {boolean} */
IgGridUpdating.prototype.wrapAround;
 /** @type {!IgGridUpdatingRowEditDialogOptions} */
IgGridUpdating.prototype.rowEditDialogOptions;
 /** @type {string} */
IgGridUpdating.prototype.dialogWidget;
 /** @type {boolean} */
IgGridUpdating.prototype.inherit;
 /** @type {!EditRowStartingEvent} */
IgGridUpdating.prototype.editRowStarting;
 /** @type {!EditRowStartedEvent} */
IgGridUpdating.prototype.editRowStarted;
 /** @type {!EditRowEndingEvent} */
IgGridUpdating.prototype.editRowEnding;
 /** @type {!EditRowEndedEvent} */
IgGridUpdating.prototype.editRowEnded;
 /** @type {!EditCellStartingEvent} */
IgGridUpdating.prototype.editCellStarting;
 /** @type {!EditCellStartedEvent} */
IgGridUpdating.prototype.editCellStarted;
 /** @type {!EditCellEndingEvent} */
IgGridUpdating.prototype.editCellEnding;
 /** @type {!EditCellEndedEvent} */
IgGridUpdating.prototype.editCellEnded;
 /** @type {!RowAddingEvent} */
IgGridUpdating.prototype.rowAdding;
 /** @type {!RowAddedEvent} */
IgGridUpdating.prototype.rowAdded;
 /** @type {!RowDeletingEvent} */
IgGridUpdating.prototype.rowDeleting;
 /** @type {!RowDeletedEvent} */
IgGridUpdating.prototype.rowDeleted;
 /** @type {!DataDirtyEvent} */
IgGridUpdating.prototype.dataDirty;
 /** @type {!GeneratePrimaryKeyValueEvent} */
IgGridUpdating.prototype.generatePrimaryKeyValue;
 /** @type {!RowEditDialogBeforeOpenEvent} */
IgGridUpdating.prototype.rowEditDialogBeforeOpen;
 /** @type {!RowEditDialogAfterOpenEvent} */
IgGridUpdating.prototype.rowEditDialogAfterOpen;
 /** @type {!RowEditDialogBeforeCloseEvent} */
IgGridUpdating.prototype.rowEditDialogBeforeClose;
 /** @type {!RowEditDialogAfterCloseEvent} */
IgGridUpdating.prototype.rowEditDialogAfterClose;
 /** @type {!RowEditDialogContentsRenderedEvent} */
IgGridUpdating.prototype.rowEditDialogContentsRendered;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgGridUpdatingMethods() {}

/**
 * Sets a cell value for the specified cell. It also creates a transaction and updates the UI.
 * If the specified cell is currently in edit mode, the function will set the desired value in the cell's editor instead.
 * 
 * @param {!Object} rowId    The primary key of the row the cell is a child of.
 * @param {string} colKey    The column key of the cell.
 * @param {!Object} value    The new value for the cell.
 * @return {void}
 */
IgGridUpdatingMethods.prototype.setCellValue = function(rowId, colKey, value) {};

/**
 * Sets values for specified cells in a row. It also creates a transaction and updates the UI.
 * If the specified row is currently in edit mode, the function will set the desired values in the row's editors instead.
 * 
 * @param {!Object} rowId    The primary key of the row to update.
 * @param {!Object} values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
 * @return {void}
 */
IgGridUpdatingMethods.prototype.updateRow = function(rowId, values) {};

/**
 * Adds a new row to the grid. It also creates a transaction and updates the UI.
 * 
 * @param {!Object} values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
 * @return {void}
 */
IgGridUpdatingMethods.prototype.addRow = function(values) {};

/**
 * Deletes a row from the grid. It also creates a transaction and updates the UI.
 * 
 * @param {!Object} rowId    The primary key of the row to delete.
 * @return {void}
 */
IgGridUpdatingMethods.prototype.deleteRow = function(rowId) {};

/**
 * Starts editing for the row or cell specified (depending on the [editMode](ui.iggridupdating#options:editMode)).
 * 
 * @param {!Object} rowId    The row id.
 * @param {!Object} column    The column key or index.
 * @param {boolean=} raiseEvents    Specifies whether or not updating events should be raised for this operation.
 * @return {boolean}
 */
IgGridUpdatingMethods.prototype.startEdit = function(rowId, column, raiseEvents) {};

/**
 * Starts editing for adding a new row.
 * 
 * @param {boolean=} raiseEvents    Specifies whether or not updating events should be raised for this operation.
 * @return {boolean}
 */
IgGridUpdatingMethods.prototype.startAddRowEdit = function(raiseEvents) {};

/**
 * Ends the currently active edit mode.
 * 
 * @param {boolean=} update    Specifies if the edit process should accept the current changes. Default is 'false'.
 * @param {boolean=} raiseEvents    Specifies whether or not updating events should be raised for this operation.
 * @return {boolean}
 */
IgGridUpdatingMethods.prototype.endEdit = function(update, raiseEvents) {};

/**
 * Finds and returns the key of the first column the editor for which has invalid value.
 * @return {string}
 */
IgGridUpdatingMethods.prototype.findInvalid = function() {};

/**
 * Checks if the grid is in edit mode.
 * @return {boolean}
 */
IgGridUpdatingMethods.prototype.isEditing = function() {};

/**
 * Gets the editor for a column by the column key. That method can be used only after the editor has been created.
 * 
 * @param {string} key    The key of the column.
 * @return {!Object}
 */
IgGridUpdatingMethods.prototype.editorForKey = function(key) {};

/**
 * Gets the editor for a column by the cell it resides in. If allowed the function can create the editor if it has not been created yet.
 * 
 * @param {string} cell    Reference to the jQuery-wrapped TD object of the grid that the editor belongs to.
 * @param {boolean=} create    Requests to create the editor if it has not been created yet.
 * @return {!Object}
 */
IgGridUpdatingMethods.prototype.editorForCell = function(cell, create) {};

/**
 * Destroys igGridUpdating.
 * @return {!Object}
 */
IgGridUpdatingMethods.prototype.destroy = function() {};

/**
 * Shows the delete button for specific row.
 * 
 * @param {!Object} row    A jQuery object of the targeted row.
 * @return {void}
 */
IgGridUpdatingMethods.prototype.showDeleteButtonFor = function(row) {};

/**
 * Hides the delete button.
 * @return {void}
 */
IgGridUpdatingMethods.prototype.hideDeleteButton = function() {};

/**
 * @param {string} propertyName
 * @return {!IgGridUpdatingMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * A list of custom column options that specify editing and validation settings for a specific column.
 * 
 * A list of custom column options that specify editing and validation settings for a specific column.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the edit mode.
 * 
 * Sets the edit mode.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets if deleting rows through the UI is enabled.
 * 
 * Sets if deleting rows through the UI is enabled.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets if adding rows through the UI is enabled. When enabled an additional row is rendered at the bottom of the grid's header that works as a button. When the end-user clicks on it edit mode is initiated either through a dialog (when [editMode](ui.iggridupdating#options:editMode) is 'dialog') or mimicking the look and feel of 'row' [editMode](ui.iggridupdating#options:editMode) (when [editMode](ui.iggridupdating#options:editMode) is 'row' or 'cell').
 * 
 * Sets if adding rows through the UI is enabled. When enabled an additional row is rendered at the bottom of the grid's header that works as a button. When the end-user clicks on it edit mode is initiated either through a dialog (when [editMode](ui.iggridupdating#options:editMode) is 'dialog') or mimicking the look and feel of 'row' [editMode](ui.iggridupdating#options:editMode) (when [editMode](ui.iggridupdating#options:editMode) is 'row' or 'cell').
 * 
 * 
 * \@optionValue New value to be set.
 * Gets if the value of each editable column in the grid should be validated. The validation is done based on the rules of their corresponding editors.
 * 
 * Sets if the value of each editable column in the grid should be validated. The validation is done based on the rules of their corresponding editors.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the label for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneLabel is used.
 * 
 * Sets the label for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneLabel is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the title for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneTooltip is used.
 * 
 * Sets the title for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneTooltip is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the label for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelLabel is used.
 * 
 * Sets the label for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelLabel is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the title for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelTooltip is used.
 * 
 * Sets the title for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelTooltip is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the label for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowLabel is used.
 * 
 * Sets the label for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowLabel is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the title for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowTooltip is used.
 * 
 * Sets the title for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowTooltip is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the label for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowLabel is used.
 * 
 * Sets the label for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowLabel is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the title for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowTooltip is used.
 * 
 * Sets the title for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowTooltip is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Determines if the Done and Cancel buttons will be available as means to end edit mode for [editMode](ui.iggridupdating#options:editMode) 'row' and when adding a new row.
 * 
 * Determines if the Done and Cancel buttons will be available as means to end edit mode for [editMode](ui.iggridupdating#options:editMode) 'row' and when adding a new row.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets if an exception should be thrown when the grid's data view changes while there are pending transactions in the data source. The data view changes when the data source performs a sorting, filtering, groupby or paging operation and the exception thrown will prevent the operation from succeeding. All pending transactions must be committed before a data view operation is able to complete. Committing transactions can be done manually through the grid's [commit](ui.iggrid#methods:commit) function or automatically by setting [autoCommit](ui.iggrid#options:autoCommit) to 'true'.
 * 
 * Sets if an exception should be thrown when the grid's data view changes while there are pending transactions in the data source. The data view changes when the data source performs a sorting, filtering, groupby or paging operation and the exception thrown will prevent the operation from succeeding. All pending transactions must be committed before a data view operation is able to complete. Committing transactions can be done manually through the grid's [commit](ui.iggrid#methods:commit) function or automatically by setting [autoCommit](ui.iggrid#options:autoCommit) to 'true'.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets how end-users are able to start edit mode. Possible values: "click", "dblclick", "F2", "enter" and their combinations separated by comma or in array. The keyboard triggers have effect only if the grid cells can receive focus (the grid's [tabIndex](ui.iggrid#options:tabIndex) property should not have a negative value) or Selection is enabled. If "dblclick" is included, then "click" has no effect.
 * 
 * Sets how end-users are able to start edit mode. Possible values: "click", "dblclick", "F2", "enter" and their combinations separated by comma or in array. The keyboard triggers have effect only if the grid cells can receive focus (the grid's [tabIndex](ui.iggrid#options:tabIndex) property should not have a negative value) or Selection is enabled. If "dblclick" is included, then "click" has no effect.
 * 
 * 
 * \@optionValue New value to be set.
 * Determines if pressing Enter to navigate away from the currently edited cell should move the focus horizontally or vertically (default).
 * 
 * Determines if pressing Enter to navigate away from the currently edited cell should move the focus horizontally or vertically (default).
 * 
 * 
 * \@optionValue New value to be set.
 * Enables excel navigation style. When turned on, the arrow keys can be used for changing the currently edited cell similar to how Tab and Enter behave. When disabled, the arrow keys control the cursor inside editors.
 * 
 * Enables excel navigation style. When turned on, the arrow keys can be used for changing the currently edited cell similar to how Tab and Enter behave. When disabled, the arrow keys control the cursor inside editors.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property succeeds. The function will be called with arguments representing the data returned by the server.
 * 
 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property succeeds. The function will be called with arguments representing the data returned by the server.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property fails. The function will be called with arguments representing the data returned by the server.
 * 
 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property fails. The function will be called with arguments representing the data returned by the server.
 * 
 * 
 * \@optionValue New value to be set.
 * On touch-enabled devices specifies the swipe distance for the delete button to appear.
 * 
 * On touch-enabled devices specifies the swipe distance for the delete button to appear.
 * 
 * 
 * \@optionValue New value to be set.
 * Controls if navigation will wrap around the grid. The feature will never wrap around virtual grids.
 * 
 * Controls if navigation will wrap around the grid. The feature will never wrap around virtual grids.
 * 
 * 
 * \@optionValue New value to be set.
 * A list of options controlling the rendering behavior of the row edit dialog. If [editMode](ui.iggridupdating#options:editMode) is not 'dialog' these have no effect.
 * 
 * A list of options controlling the rendering behavior of the row edit dialog. If [editMode](ui.iggridupdating#options:editMode) is not 'dialog' these have no effect.
 * 
 * 
 * \@optionValue New value to be set.
 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. For more information on how to utilize this property, please refer to the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic.
 * 
 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. For more information on how to utilize this property, please refer to the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables feature inheritance for the child layouts in igHierarchicalGrid.
 * Enables/disables feature inheritance for the child layouts in igHierarchicalGrid.
 * 
 * \@optionValue New value to be set.
 * Event fired before row editing begins.
 * Return false in order to cancel editing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * Event fired before row editing begins.
 * Return false in order to cancel editing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * 
 * \@optionValue Define event handler function.
 * Event fired after row editing begins.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * Event fired after row editing begins.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * 
 * \@optionValue Define event handler function.
 * Event fired before row editing ends.
 * Return false in order to prevent the grid from exiting edit mode.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.update to check if any of the values is changed which will cause update in the data source. Can be manually set to false to prevent this update.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * Use ui.values[key] to get or set the new value for the column with the specified key.
 * Use ui.oldValues[key] to get the old value for the column with the specified key.
 * Event fired before row editing ends.
 * Return false in order to prevent the grid from exiting edit mode.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.update to check if any of the values is changed which will cause update in the data source. Can be manually set to false to prevent this update.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * Use ui.values[key] to get or set the new value for the column with the specified key.
 * Use ui.oldValues[key] to get the old value for the column with the specified key.
 * 
 * \@optionValue Define event handler function.
 * Event fired after row editing ends.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.update to check if any of the values is changed which will cause update in the data source.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * Use ui.values[key] to get the new value for the column with the specified key.
 * Use ui.oldValues[key] to get the old value for the column with the specified key.
 * Event fired after row editing ends.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.update to check if any of the values is changed which will cause update in the data source.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * Use ui.values[key] to get the new value for the column with the specified key.
 * Use ui.oldValues[key] to get the old value for the column with the specified key.
 * 
 * \@optionValue Define event handler function.
 * Event fired before cell editing begins (including when row editing opens editing for a cell).
 * Return false in order to cancel editing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.columnIndex to get the index of the column.
 * Use ui.columnKey to get the key of the column.
 * Use ui.editor to get a reference to the editor used for editing the column.
 * Use ui.value to get or set the value of the editor.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * Event fired before cell editing begins (including when row editing opens editing for a cell).
 * Return false in order to cancel editing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.columnIndex to get the index of the column.
 * Use ui.columnKey to get the key of the column.
 * Use ui.editor to get a reference to the editor used for editing the column.
 * Use ui.value to get or set the value of the editor.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * 
 * \@optionValue Define event handler function.
 * Event fired after cell editing begins (including when row editing opens editing for a cell).
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.columnIndex to get the index of the column.
 * Use ui.columnKey to get the key of the column.
 * Use ui.editor to get a reference to the editor used for editing the column.
 * Use ui.value to get the value of the editor.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * Event fired after cell editing begins (including when row editing opens editing for a cell).
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.columnIndex to get the index of the column.
 * Use ui.columnKey to get the key of the column.
 * Use ui.editor to get a reference to the editor used for editing the column.
 * Use ui.value to get the value of the editor.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * 
 * \@optionValue Define event handler function.
 * Event fired before cell editing ends (including when row editing closes editing for a cell).
 * Return false in order to prevent the grid from exiting edit mode (only functions if [editMode](ui.iggridupdating#options:editMode) is 'cell').
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.columnIndex to get the index of the column.
 * Use ui.columnKey to get the key of the column.
 * Use ui.editor to get a reference to the editor used for editing the column.
 * Use ui.value to get or set the value to be used when updating the data source.
 * Use ui.oldValue to get the old value.
 * Use ui.update to check if the value is changed which will cause update in the data source. Can be manually set to false to prevent this update.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * Event fired before cell editing ends (including when row editing closes editing for a cell).
 * Return false in order to prevent the grid from exiting edit mode (only functions if [editMode](ui.iggridupdating#options:editMode) is 'cell').
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.columnIndex to get the index of the column.
 * Use ui.columnKey to get the key of the column.
 * Use ui.editor to get a reference to the editor used for editing the column.
 * Use ui.value to get or set the value to be used when updating the data source.
 * Use ui.oldValue to get the old value.
 * Use ui.update to check if the value is changed which will cause update in the data source. Can be manually set to false to prevent this update.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * 
 * \@optionValue Define event handler function.
 * Event fired after cell editing ends (including when row editing closes editing for a cell).
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.columnIndex to get the index of the column.
 * Use ui.columnKey to get the key of the column.
 * Use ui.editor to get a reference to the editor used for editing the column.
 * Use ui.value to get the new value.
 * Use ui.oldValue to get the old value.
 * Use ui.update to check if the value is changed which will cause update in the data source.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * Event fired after cell editing ends (including when row editing closes editing for a cell).
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.columnIndex to get the index of the column.
 * Use ui.columnKey to get the key of the column.
 * Use ui.editor to get a reference to the editor used for editing the column.
 * Use ui.value to get the new value.
 * Use ui.oldValue to get the old value.
 * Use ui.update to check if the value is changed which will cause update in the data source.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * 
 * \@optionValue Define event handler function.
 * Event fired before adding a new row.
 * Return false in order to cancel the adding of the new row to the data source.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.values[key] to get the value for the column with the specified key.
 * Use ui.oldValues[key] to get the default value (before editing) for the column with the specified key.
 * Event fired before adding a new row.
 * Return false in order to cancel the adding of the new row to the data source.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.values[key] to get the value for the column with the specified key.
 * Use ui.oldValues[key] to get the default value (before editing) for the column with the specified key.
 * 
 * \@optionValue Define event handler function.
 * Event fired after adding a new row.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.values[key] to get the value for the column with the specified key.
 * Use ui.oldValues[key] to get the default value (before editing) for the column with the specified key.
 * Event fired after adding a new row.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.values[key] to get the value for the column with the specified key.
 * Use ui.oldValues[key] to get the default value (before editing) for the column with the specified key.
 * 
 * \@optionValue Define event handler function.
 * Event fired before deleting a row.
 * Return false in order to cancel the row's deletion.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.element to get a jQuery object containing the TR element of the row to delete.
 * Use ui.rowID to get the row's PK value.
 * Event fired before deleting a row.
 * Return false in order to cancel the row's deletion.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.element to get a jQuery object containing the TR element of the row to delete.
 * Use ui.rowID to get the row's PK value.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a row is deleted.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.element to get a jQuery object containing the TR element of the deleted row.
 * Use ui.rowID to get the row's PK value.
 * Event fired after a row is deleted.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.element to get a jQuery object containing the TR element of the deleted row.
 * Use ui.rowID to get the row's PK value.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the dataDirtyException is thrown. This can be controlled by the [enableDataDirtyException](ui.iggridupdating#options:enableDataDirtyException) property. Any pending changes may be committed in the handler of this event in order to prevent dataDirtyException from being thrown.
 * Return false in order to prevent the exception.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Event fired before the dataDirtyException is thrown. This can be controlled by the [enableDataDirtyException](ui.iggridupdating#options:enableDataDirtyException) property. Any pending changes may be committed in the handler of this event in order to prevent dataDirtyException from being thrown.
 * Return false in order to prevent the exception.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * 
 * \@optionValue Define event handler function.
 * Event fired before editing starts for adding a new row, when Updating generates an automatic primary key for it.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.value to get the auto-generated primary key (the number of records in the data source + 1) or set a custom unique primary key for the new row.
 * Event fired before editing starts for adding a new row, when Updating generates an automatic primary key for it.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.value to get the auto-generated primary key (the number of records in the data source + 1) or set a custom unique primary key for the new row.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the row edit dialog is opened.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.dialogElement to get reference to row edit dialog DOM element.
 * Event fired before the row edit dialog is opened.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.dialogElement to get reference to row edit dialog DOM element.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the row edit dialog is opened.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.dialogElement to get reference to row edit dialog DOM element.
 * Event fired after the row edit dialog is opened.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.dialogElement to get reference to row edit dialog DOM element.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the row edit dialog is closed.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.dialogElement to get reference to row edit dialog DOM element.
 * Event fired before the row edit dialog is closed.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.dialogElement to get reference to row edit dialog DOM element.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the row edit dialog is closed.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.dialogElement to get reference to row edit dialog DOM element.
 * Event fired after the row edit dialog is closed.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.dialogElement to get reference to row edit dialog DOM element.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the row edit dialog is rendered.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.dialogElement to get reference to row edit dialog DOM element.
 * Event fired after the row edit dialog is rendered.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.dialogElement to get reference to row edit dialog DOM element.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgGridUpdating} methodName_or_optionLiteral_or_options
 * @param {...!Object|boolean|string|!IgGridUpdating|?=} rowId_or_values_or_raiseEvents_or_update_or_key_or_cell_or_row_or_optionName_or_options_or_methodParams
 * @return {void|boolean|string|!Object|!Array<!IgGridUpdatingColumnSetting>|(string|!Array<?>)|(string|!Function)|(string|number)|!IgGridUpdatingRowEditDialogOptions|!EditRowStartingEvent|!EditRowStartedEvent|!EditRowEndingEvent|!EditRowEndedEvent|!EditCellStartingEvent|!EditCellStartedEvent|!EditCellEndingEvent|!EditCellEndedEvent|!RowAddingEvent|!RowAddedEvent|!RowDeletingEvent|!RowDeletedEvent|!DataDirtyEvent|!GeneratePrimaryKeyValueEvent|!RowEditDialogBeforeOpenEvent|!RowEditDialogAfterOpenEvent|!RowEditDialogBeforeCloseEvent|!RowEditDialogAfterCloseEvent|!RowEditDialogContentsRenderedEvent|!JQuery|?}
 */
JQuery.prototype.igGridUpdating = function(methodName_or_optionLiteral_or_options, rowId_or_values_or_raiseEvents_or_update_or_key_or_cell_or_row_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function ActionExecutingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ActionExecutingEventUIParam() {}
/**
 * @record
 * @struct
 */
function ActionExecutedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ActionExecutedEventUIParam() {}
/**
 * @record
 * @struct
 */
function ToolbarCollapsingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ToolbarCollapsingEventUIParam() {}
/**
 * @record
 * @struct
 */
function ToolbarCollapsedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ToolbarCollapsedEventUIParam() {}
/**
 * @record
 * @struct
 */
function ToolbarExpandingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ToolbarExpandingEventUIParam() {}
/**
 * @record
 * @struct
 */
function ToolbarExpandedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ToolbarExpandedEventUIParam() {}
/**
 * @record
 * @struct
 */
function CutEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function CutEventUIParam() {}
/**
 * @record
 * @struct
 */
function CopyEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function CopyEventUIParam() {}
/**
 * @record
 * @struct
 */
function PasteEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function PasteEventUIParam() {}
/**
 * @record
 * @struct
 */
function UndoEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function UndoEventUIParam() {}
/**
 * @record
 * @struct
 */
function RedoEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RedoEventUIParam() {}
/**
 * @record
 * @struct
 */
function WorkspaceResizedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function WorkspaceResizedEventUIParam() {}
/**
 * @record
 * @struct
 */
function IgHtmlEditor() {}
 /** @type {boolean} */
IgHtmlEditor.prototype.showFormattingToolbar;
 /** @type {boolean} */
IgHtmlEditor.prototype.showTextToolbar;
 /** @type {boolean} */
IgHtmlEditor.prototype.showInsertObjectToolbar;
 /** @type {boolean} */
IgHtmlEditor.prototype.showCopyPasteToolbar;
 /** @type {(string|number)} */
IgHtmlEditor.prototype.width;
 /** @type {(string|number)} */
IgHtmlEditor.prototype.height;
 /** @type {!Array<?>} */
IgHtmlEditor.prototype.toolbarSettings;
 /** @type {!Array<?>} */
IgHtmlEditor.prototype.customToolbars;
 /** @type {string} */
IgHtmlEditor.prototype.inputName;
 /** @type {string} */
IgHtmlEditor.prototype.value;
 /** @type {!RenderedEvent} */
IgHtmlEditor.prototype.rendered;
 /** @type {!RenderingEvent} */
IgHtmlEditor.prototype.rendering;
 /** @type {!ActionExecutingEvent} */
IgHtmlEditor.prototype.actionExecuting;
 /** @type {!ActionExecutedEvent} */
IgHtmlEditor.prototype.actionExecuted;
 /** @type {!ToolbarCollapsingEvent} */
IgHtmlEditor.prototype.toolbarCollapsing;
 /** @type {!ToolbarCollapsedEvent} */
IgHtmlEditor.prototype.toolbarCollapsed;
 /** @type {!ToolbarExpandingEvent} */
IgHtmlEditor.prototype.toolbarExpanding;
 /** @type {!ToolbarExpandedEvent} */
IgHtmlEditor.prototype.toolbarExpanded;
 /** @type {!CutEvent} */
IgHtmlEditor.prototype.cut;
 /** @type {!CopyEvent} */
IgHtmlEditor.prototype.copy;
 /** @type {!PasteEvent} */
IgHtmlEditor.prototype.paste;
 /** @type {!UndoEvent} */
IgHtmlEditor.prototype.undo;
 /** @type {!RedoEvent} */
IgHtmlEditor.prototype.redo;
 /** @type {!WorkspaceResizedEvent} */
IgHtmlEditor.prototype.workspaceResized;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgHtmlEditorMethods() {}

/**
 * Returns the element on which the widget was instantiated
 * @return {void}
 */
IgHtmlEditorMethods.prototype.widget = function() {};

/**
 * Resizes the height of the workspace
 * @return {void}
 */
IgHtmlEditorMethods.prototype.resizeWorkspace = function() {};

/**
 * Gets the content of the html editor.
 * 
 * @param {string} format Returns the content as html or plain text. Values can be "text" or "html".
 * @return {string}
 */
IgHtmlEditorMethods.prototype.getContent = function(format) {};

/**
 * Sets the content of the html editor.
 * 
 * @param {string} content The content which will be set.
 * @param {string} format The content type: "text" or "html".
 * @return {void}
 */
IgHtmlEditorMethods.prototype.setContent = function(content, format) {};

/**
 * Destroys the widget.
 * @return {void}
 */
IgHtmlEditorMethods.prototype.destroy = function() {};

/**
 * Executes htmleditor commands.
 * 
 * @param {string} actionName The command name.
 * @param {!Object=} args Additional parameter for the command.
 * @return {void}
 */
IgHtmlEditorMethods.prototype.executeAction = function(actionName, args) {};

/**
 * Returns true/false if the editor contents were modified or not.
 * @return {!Object}
 */
IgHtmlEditorMethods.prototype.isDirty = function() {};

/**
 * Returns the window object associated with the Html Editor's content editable area
 * @return {!Object}
 */
IgHtmlEditorMethods.prototype.contentWindow = function() {};

/**
 * Returns the document object associated with the Html Editor's content editable area
 * @return {!Object}
 */
IgHtmlEditorMethods.prototype.contentDocument = function() {};

/**
 * Returns the content editable associated with this Html Editor
 * @return {!Object}
 */
IgHtmlEditorMethods.prototype.contentEditable = function() {};

/**
 * Returns Selection object that represent the current selection in the content editable
 * @return {!Object}
 */
IgHtmlEditorMethods.prototype.selection = function() {};

/**
 * Returns Range object that represent the current range in the content editable
 * @return {!Object}
 */
IgHtmlEditorMethods.prototype.range = function() {};

/**
 * Inserts the provided content at the position of the caret.
 * 
 * @param {!Object} element Accepts html string, DOM element or a jQuery object.
 * @return {void}
 */
IgHtmlEditorMethods.prototype.insertAtCaret = function(element) {};

/**
 * @param {string} propertyName
 * @return {!IgHtmlEditorMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function IgPathFinder() {}
 /** @type {?} */
IgPathFinder.prototype.items;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function ApplyEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ApplyEventUIParam() {}
/**
 * @record
 * @struct
 */
function CancelEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function CancelEventUIParam() {}
/**
 * @record
 * @struct
 */
function ShowEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ShowEventUIParam() {}
/**
 * @record
 * @struct
 */
function HideEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function HideEventUIParam() {}
/**
 * @record
 * @struct
 */
function IgHtmlEditorPopover() {}
 /** @type {?} */
IgHtmlEditorPopover.prototype.item;
 /** @type {?} */
IgHtmlEditorPopover.prototype.target;
 /** @type {boolean} */
IgHtmlEditorPopover.prototype.isHidden;
 /** @type {!ApplyEvent} */
IgHtmlEditorPopover.prototype.apply;
 /** @type {!CancelEvent} */
IgHtmlEditorPopover.prototype.cancel;
 /** @type {!ShowEvent} */
IgHtmlEditorPopover.prototype.show;
 /** @type {!HideEvent} */
IgHtmlEditorPopover.prototype.hide;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgHtmlEditorPopoverMethods() {}

/**
 * @param {!Object} item
 * @return {void}
 */
IgHtmlEditorPopoverMethods.prototype.show = function(item) {};

/**
 * @return {void}
 */
IgHtmlEditorPopoverMethods.prototype.hide = function() {};

/**
 * @param {string} propertyName
 * @return {!IgHtmlEditorPopoverMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function IgLinkPropertiesDialog() {}
 /** @type {?} */
IgLinkPropertiesDialog.prototype.item;
 /** @type {?} */
IgLinkPropertiesDialog.prototype.target;
 /** @type {boolean} */
IgLinkPropertiesDialog.prototype.isHidden;
 /** @type {!ApplyEvent} */
IgLinkPropertiesDialog.prototype.apply;
 /** @type {!CancelEvent} */
IgLinkPropertiesDialog.prototype.cancel;
 /** @type {!ShowEvent} */
IgLinkPropertiesDialog.prototype.show;
 /** @type {!HideEvent} */
IgLinkPropertiesDialog.prototype.hide;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgLinkPropertiesDialogMethods() {}

/**
 * @param {!Object} item
 * @return {void}
 */
IgLinkPropertiesDialogMethods.prototype.show = function(item) {};

/**
 * @return {void}
 */
IgLinkPropertiesDialogMethods.prototype.hide = function() {};

/**
 * @param {string} propertyName
 * @return {!IgLinkPropertiesDialogMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function IgTablePropertiesDialog() {}
 /** @type {?} */
IgTablePropertiesDialog.prototype.item;
 /** @type {?} */
IgTablePropertiesDialog.prototype.target;
 /** @type {boolean} */
IgTablePropertiesDialog.prototype.isHidden;
 /** @type {!ApplyEvent} */
IgTablePropertiesDialog.prototype.apply;
 /** @type {!CancelEvent} */
IgTablePropertiesDialog.prototype.cancel;
 /** @type {!ShowEvent} */
IgTablePropertiesDialog.prototype.show;
 /** @type {!HideEvent} */
IgTablePropertiesDialog.prototype.hide;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgTablePropertiesDialogMethods() {}

/**
 * @param {!Object} item
 * @return {void}
 */
IgTablePropertiesDialogMethods.prototype.show = function(item) {};

/**
 * @return {void}
 */
IgTablePropertiesDialogMethods.prototype.hide = function() {};

/**
 * @param {string} propertyName
 * @return {!IgTablePropertiesDialogMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function IgImagePropertiesDialog() {}
 /** @type {?} */
IgImagePropertiesDialog.prototype.item;
 /** @type {?} */
IgImagePropertiesDialog.prototype.target;
 /** @type {boolean} */
IgImagePropertiesDialog.prototype.isHidden;
 /** @type {!ApplyEvent} */
IgImagePropertiesDialog.prototype.apply;
 /** @type {!CancelEvent} */
IgImagePropertiesDialog.prototype.cancel;
 /** @type {!ShowEvent} */
IgImagePropertiesDialog.prototype.show;
 /** @type {!HideEvent} */
IgImagePropertiesDialog.prototype.hide;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgImagePropertiesDialogMethods() {}

/**
 * @param {!Object} item
 * @return {void}
 */
IgImagePropertiesDialogMethods.prototype.show = function(item) {};

/**
 * @return {void}
 */
IgImagePropertiesDialogMethods.prototype.hide = function() {};

/**
 * @param {string} propertyName
 * @return {!IgImagePropertiesDialogMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * @constructor
 * @struct
 * @param {?} NODE
 */
Infragistics.SelectionWrapper = function(NODE) {};

/**
 * @return {void}
 */
Infragistics.SelectionWrapper.prototype.getSelectedItem = function() {};

/**
 * @return {void}
 */
Infragistics.SelectionWrapper.prototype.getSelectionAsText = function() {};

/**
 * @param {!Object} element
 * @return {void}
 */
Infragistics.SelectionWrapper.prototype.select = function(element) {};

/**
 * @param {!Object} element
 * @return {void}
 */
Infragistics.SelectionWrapper.prototype.insertElement = function(element) {};

/**
 * @param {!Object} name
 * @param {!Object} args
 * @return {void}
 */
Infragistics.SelectionWrapper.prototype.execCommand = function(name, args) {};

/**
 * @param {!Object} newNode
 * @return {void}
 */
Infragistics.SelectionWrapper.prototype.replaceNode = function(newNode) {};

/**
 * @param {!Object} table
 * @return {void}
 */
Infragistics.SelectionWrapper.prototype.insertTable = function(table) {};

/**
 * @return {void}
 */
Infragistics.SelectionWrapper.prototype.focus = function() {};
 /** @type {?} */
IgniteUIStatic.prototype.SelectionWrapper;
/**
 * @constructor
 * @struct
 */
Infragistics.ToolbarHelper = function() {};

/**
 * @param {!Object} el
 * @return {void}
 */
Infragistics.ToolbarHelper.prototype.analyse = function(el) {};

/**
 * Shows/hides the "Formatting" toolbar.
 * 
 * Shows/hides the "Formatting" toolbar.
 * 
 * 
 * \@optionValue New value to be set.
 * Shows/hides the "Text" toolbar.
 * 
 * Shows/hides the "Text" toolbar.
 * 
 * 
 * \@optionValue New value to be set.
 * Shows/hides the "Insert Object" toolbar.
 * 
 * Shows/hides the "Insert Object" toolbar.
 * 
 * 
 * \@optionValue New value to be set.
 * Shows/hides the "Copy Paste" toolbar.
 * 
 * Shows/hides the "Copy Paste" toolbar.
 * 
 * 
 * \@optionValue New value to be set.
 * The width of the html editor. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * The width of the html editor. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * 
 * \@optionValue New value to be set.
 * The height of the html editor. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * The height of the html editor. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * 
 * \@optionValue New value to be set.
 * The html editor toolbars list.
 * 
 * The html editor toolbars list.
 * 
 * 
 * \@optionValue New value to be set.
 * The html editor custom toolbars list.
 * 
 * The html editor custom toolbars list.
 * 
 * 
 * \@optionValue New value to be set.
 * The name attribute of the html editor source view.
 * 
 * The name attribute of the html editor source view.
 * 
 * 
 * \@optionValue New value to be set.
 * Used to render inside the html editor as initial content
 * 
 * Used to render inside the html editor as initial content
 * 
 * 
 * \@optionValue New value to be set.
 * Event fired after the html editor widget has been rendered.
 * Event fired after the html editor widget has been rendered.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the html editor widget is rendered.
 * Event fired before the html editor widget is rendered.
 * 
 * \@optionValue Define event handler function.
 * Event fired before a toolbar item is clicked.
 * Event fired before a toolbar item is clicked.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a toolbar item is clicked.
 * Event fired after a toolbar item is clicked.
 * 
 * \@optionValue Define event handler function.
 * Event fired before a toolbar is collapsed.
 * Event fired before a toolbar is collapsed.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a toolbar is collapsed.
 * Event fired after a toolbar is collapsed.
 * 
 * \@optionValue Define event handler function.
 * Event fired before a toolbar is expanded.
 * Event fired before a toolbar is expanded.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a toolbar is expanded.
 * Event fired after a toolbar is expanded.
 * 
 * \@optionValue Define event handler function.
 * Event is fired on keyboard cut action.
 * Event is fired on keyboard cut action.
 * 
 * \@optionValue Define event handler function.
 * Event is fired on keyboard copy action.
 * Event is fired on keyboard copy action.
 * 
 * \@optionValue Define event handler function.
 * Event is fired on keyboard paste action.
 * Event is fired on keyboard paste action.
 * 
 * \@optionValue Define event handler function.
 * Event is fired on keyboard undo action.
 * Event is fired on keyboard undo action.
 * 
 * \@optionValue Define event handler function.
 * Event is fired on keyboard redo action.
 * Event is fired on keyboard redo action.
 * 
 * \@optionValue Define event handler function.
 * Event is fired after the workspace has been resized
 * Event is fired after the workspace has been resized
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgHtmlEditor} methodName_or_optionLiteral_or_options
 * @param {...string|!Object|!IgHtmlEditor|?} format_or_content_or_actionName_or_element_or_optionName_or_options_or_methodParams
 * @return {void|string|!Object|boolean|(string|number)|!Array<?>|!RenderedEvent|!RenderingEvent|!ActionExecutingEvent|!ActionExecutedEvent|!ToolbarCollapsingEvent|!ToolbarCollapsedEvent|!ToolbarExpandingEvent|!ToolbarExpandedEvent|!CutEvent|!CopyEvent|!PasteEvent|!UndoEvent|!RedoEvent|!WorkspaceResizedEvent|!JQuery|?}
 */
JQuery.prototype.igHtmlEditor = function(methodName_or_optionLiteral_or_options, format_or_content_or_actionName_or_element_or_optionName_or_options_or_methodParams) {};

/**
 *
 *
 * @param {string|!IgPathFinder} optionLiteral_or_options_or_methodName
 * @param {...string|!IgPathFinder|?} optionName_or_options_or_methodParams
 * @return {?|void|!JQuery}
 */
JQuery.prototype.igPathFinder = function(optionLiteral_or_options_or_methodName, optionName_or_options_or_methodParams) {};

/**
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 * @param {string|!IgHtmlEditorPopover} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgHtmlEditorPopover|?} item_or_optionName_or_options_or_methodParams
 * @return {void|?|boolean|!ApplyEvent|!CancelEvent|!ShowEvent|!HideEvent|!JQuery}
 */
JQuery.prototype.igHtmlEditorPopover = function(methodName_or_optionLiteral_or_options, item_or_optionName_or_options_or_methodParams) {};

/**
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 * @param {string|!IgLinkPropertiesDialog} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgLinkPropertiesDialog|?} item_or_optionName_or_options_or_methodParams
 * @return {void|?|boolean|!ApplyEvent|!CancelEvent|!ShowEvent|!HideEvent|!JQuery}
 */
JQuery.prototype.igLinkPropertiesDialog = function(methodName_or_optionLiteral_or_options, item_or_optionName_or_options_or_methodParams) {};

/**
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 * @param {string|!IgTablePropertiesDialog} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgTablePropertiesDialog|?} item_or_optionName_or_options_or_methodParams
 * @return {void|?|boolean|!ApplyEvent|!CancelEvent|!ShowEvent|!HideEvent|!JQuery}
 */
JQuery.prototype.igTablePropertiesDialog = function(methodName_or_optionLiteral_or_options, item_or_optionName_or_options_or_methodParams) {};

/**
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 * @param {string|!IgImagePropertiesDialog} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgImagePropertiesDialog|?} item_or_optionName_or_options_or_methodParams
 * @return {void|?|boolean|!ApplyEvent|!CancelEvent|!ShowEvent|!HideEvent|!JQuery}
 */
JQuery.prototype.igImagePropertiesDialog = function(methodName_or_optionLiteral_or_options, item_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgLayoutManagerBorderLayout() {}
 /** @type {string} */
IgLayoutManagerBorderLayout.prototype.leftWidth;
 /** @type {string} */
IgLayoutManagerBorderLayout.prototype.rightWidth;
 /** @type {boolean} */
IgLayoutManagerBorderLayout.prototype.showFooter;
 /** @type {boolean} */
IgLayoutManagerBorderLayout.prototype.showHeader;
 /** @type {boolean} */
IgLayoutManagerBorderLayout.prototype.showLeft;
 /** @type {boolean} */
IgLayoutManagerBorderLayout.prototype.showRight;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgLayoutManagerGridLayout() {}
 /** @type {number} */
IgLayoutManagerGridLayout.prototype.animationDuration;
 /** @type {number} */
IgLayoutManagerGridLayout.prototype.cols;
 /** @type {(string|number)} */
IgLayoutManagerGridLayout.prototype.columnHeight;
 /** @type {(string|number)} */
IgLayoutManagerGridLayout.prototype.columnWidth;
 /** @type {number} */
IgLayoutManagerGridLayout.prototype.marginLeft;
 /** @type {number} */
IgLayoutManagerGridLayout.prototype.marginTop;
 /** @type {boolean} */
IgLayoutManagerGridLayout.prototype.overrideConfigOnSetOption;
 /** @type {boolean} */
IgLayoutManagerGridLayout.prototype.rearrangeItems;
 /** @type {number} */
IgLayoutManagerGridLayout.prototype.rows;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgLayoutManagerItem() {}
 /** @type {number} */
IgLayoutManagerItem.prototype.colIndex;
 /** @type {number} */
IgLayoutManagerItem.prototype.colSpan;
 /** @type {string} */
IgLayoutManagerItem.prototype.height;
 /** @type {number} */
IgLayoutManagerItem.prototype.rowIndex;
 /** @type {number} */
IgLayoutManagerItem.prototype.rowSpan;
 /** @type {number} */
IgLayoutManagerItem.prototype.width;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function InternalResizedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function InternalResizedEventUIParam() {}
 /** @type {?} */
InternalResizedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function InternalResizingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function InternalResizingEventUIParam() {}
 /** @type {?} */
InternalResizingEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function ItemRenderedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ItemRenderedEventUIParam() {}
 /** @type {?} */
ItemRenderedEventUIParam.prototype.owner;
 /** @type {?} */
ItemRenderedEventUIParam.prototype.itemData;
 /** @type {?} */
ItemRenderedEventUIParam.prototype.index;
 /** @type {?} */
ItemRenderedEventUIParam.prototype.item;
/**
 * @record
 * @struct
 */
function ItemRenderingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ItemRenderingEventUIParam() {}
 /** @type {?} */
ItemRenderingEventUIParam.prototype.owner;
 /** @type {?} */
ItemRenderingEventUIParam.prototype.itemData;
 /** @type {?} */
ItemRenderingEventUIParam.prototype.index;
 /** @type {?} */
ItemRenderingEventUIParam.prototype.item;
/**
 * @record
 * @struct
 */
function IgLayoutManager() {}
 /** @type {!IgLayoutManagerBorderLayout} */
IgLayoutManager.prototype.borderLayout;
 /** @type {!IgLayoutManagerGridLayout} */
IgLayoutManager.prototype.gridLayout;
 /** @type {(string|number)} */
IgLayoutManager.prototype.height;
 /** @type {number} */
IgLayoutManager.prototype.itemCount;
 /** @type {!Array<!IgLayoutManagerItem>} */
IgLayoutManager.prototype.items;
 /** @type {?} */
IgLayoutManager.prototype.layoutMode;
 /** @type {(string|number)} */
IgLayoutManager.prototype.width;
 /** @type {!InternalResizedEvent} */
IgLayoutManager.prototype.internalResized;
 /** @type {!InternalResizingEvent} */
IgLayoutManager.prototype.internalResizing;
 /** @type {!ItemRenderedEvent} */
IgLayoutManager.prototype.itemRendered;
 /** @type {!ItemRenderingEvent} */
IgLayoutManager.prototype.itemRendering;
 /** @type {!RenderedEvent} */
IgLayoutManager.prototype.rendered;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgLayoutManagerMethods() {}

/**
 * Triggers recalculation of the layout dimensions. Layouts may not need to be reflowed manually, if their sizes are in percentages (i.e. they are responsive by default)
 *                     this can be particularly useful with a grid layout, when the container has percentage sizes, but items are calculated in pixels and positioned absolutely in the container.
 * 
 * @param {boolean=} forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.
 * @param {number=} animationDuration The animation duration to be used for this reflow only. Supported only for Grid Layout mode.
 * @param {!Object=} event Indicates the browser even which triggered this action (not API).
 * @return {void}
 */
IgLayoutManagerMethods.prototype.reflow = function(forceReflow, animationDuration, event) {};

/**
 * Destroy is part of the jQuery UI widget API and does the following:
 *                     1. Remove custom CSS classes that were added.
 *                     2. Remove any elements that were added at widget's initialization and after that, which didn't below to the original markup
 *                     3. Unbind all events that were bound.
 * @return {void}
 */
IgLayoutManagerMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgLayoutManagerMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Options specific to a border layout
 * 
 * Options specific to a border layout
 * 
 * 
 * \@optionValue New value to be set.
 * Options specific to grid layout mode
 * 
 * Options specific to grid layout mode
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets height of the layout container.
 * 
 * /Sets height of the layout container.
 * 
 * 
 * \@optionValue New value to be set.
 * Number of items to render, this is only applicable to layouts: vertical and flow
 * 
 * Number of items to render, this is only applicable to layouts: vertical and flow
 * 
 * 
 * \@optionValue New value to be set.
 * An array of item descriptions
 *                     this assumes the container is empty, and every item
 *                     is described by rowspan, colspan, etc. - otherwise values of
 *                     1 are assumed
 *                     items can have various properties some of which may not be applicable
 *                     depending on the layoutMode.
 *                     for example rowSpan/colSpan/colIndex/rowIndex are only applicable to gridlayout
 * 
 * An array of item descriptions
 *                     this assumes the container is empty, and every item
 *                     is described by rowspan, colspan, etc. - otherwise values of
 *                     1 are assumed
 *                     items can have various properties some of which may not be applicable
 *                     depending on the layoutMode.
 *                     for example rowSpan/colSpan/colIndex/rowIndex are only applicable to gridlayout
 * 
 * 
 * \@optionValue New value to be set.
 * Defines the layout type
 *                 grid Column type can be set with grid layout
 *                 border Column type can be set with border layout
 *                 flow Column type can be set with flow layout
 *                 column Column type can be set with column layout
 *                 vertical Column type can be set with vertical layout
 * 
 * Defines the layout type
 *                 grid Column type can be set with grid layout
 *                 border Column type can be set with border layout
 *                 flow Column type can be set with flow layout
 *                 column Column type can be set with column layout
 *                 vertical Column type can be set with vertical layout
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets width of the layout container.
 * 
 * /Sets width of the layout container.
 * 
 * 
 * \@optionValue New value to be set.
 * Event fired after items are resized.
 *                     Use ui.owner to get a reference to the layout manager performing resizing.
 * Event fired after items are resized.
 *                     Use ui.owner to get a reference to the layout manager performing resizing.
 * 
 * \@optionValue Define event handler function.
 * Event fired before items are resized.
 *                     Use ui.owner to get a reference to the layout manager performing resizing.
 * Event fired before items are resized.
 *                     Use ui.owner to get a reference to the layout manager performing resizing.
 * 
 * \@optionValue Define event handler function.
 * Event fired after an item has been rendered in the container.
 *                     Function takes arguments evt and ui.
 *                     Use ui.owner to get reference to the igLayoutManager.
 *                     Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc.
 *                     Use ui.index to get a reference of the item's index, if the layout is flow or vertical
 *                     Use ui.item to get a reference to the rendered item
 * Event fired after an item has been rendered in the container.
 *                     Function takes arguments evt and ui.
 *                     Use ui.owner to get reference to the igLayoutManager.
 *                     Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc.
 *                     Use ui.index to get a reference of the item's index, if the layout is flow or vertical
 *                     Use ui.item to get a reference to the rendered item
 * 
 * \@optionValue Define event handler function.
 * Event fired before an item is rendered in the container.
 *                     Function takes arguments evt and ui.
 *                     Use ui.owner to get reference to the igLayoutManager.
 *                     Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc.
 *                     Use ui.index to get a reference of the item's index, if the layout is flow or vertical
 *                     Use ui.item to get a reference to the rendered item
 * Event fired before an item is rendered in the container.
 *                     Function takes arguments evt and ui.
 *                     Use ui.owner to get reference to the igLayoutManager.
 *                     Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc.
 *                     Use ui.index to get a reference of the item's index, if the layout is flow or vertical
 *                     Use ui.item to get a reference to the rendered item
 * 
 * \@optionValue Define event handler function.
 * Event fired after all items are rendered.
 *                     Function takes arguments evt and ui.
 *                     Use ui.owner to get reference to the igLayoutManager.
 * Event fired after all items are rendered.
 *                     Function takes arguments evt and ui.
 *                     Use ui.owner to get reference to the igLayoutManager.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgLayoutManager} methodName_or_optionLiteral_or_options
 * @param {...boolean|string|!IgLayoutManager|?=} forceReflow_or_optionName_or_options_or_methodParams
 * @return {void|!IgLayoutManagerBorderLayout|!IgLayoutManagerGridLayout|(string|number)|number|!Array<!IgLayoutManagerItem>|?|!InternalResizedEvent|!InternalResizingEvent|!ItemRenderedEvent|!ItemRenderingEvent|!RenderedEvent|!JQuery}
 */
JQuery.prototype.igLayoutManager = function(methodName_or_optionLiteral_or_options, forceReflow_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgLinearGaugeRange() {}
 /** @type {string} */
IgLinearGaugeRange.prototype.name;
 /** @type {string} */
IgLinearGaugeRange.prototype.brush;
 /** @type {string} */
IgLinearGaugeRange.prototype.outline;
 /** @type {number} */
IgLinearGaugeRange.prototype.startValue;
 /** @type {number} */
IgLinearGaugeRange.prototype.endValue;
 /** @type {number} */
IgLinearGaugeRange.prototype.innerStartExtent;
 /** @type {number} */
IgLinearGaugeRange.prototype.innerEndExtent;
 /** @type {number} */
IgLinearGaugeRange.prototype.outerStartExtent;
 /** @type {number} */
IgLinearGaugeRange.prototype.outerEndExtent;
 /** @type {number} */
IgLinearGaugeRange.prototype.strokeThickness;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgLinearGauge() {}
 /** @type {(string|number)} */
IgLinearGauge.prototype.width;
 /** @type {(string|number)} */
IgLinearGauge.prototype.height;
 /** @type {!Array<!IgLinearGaugeRange>} */
IgLinearGauge.prototype.ranges;
 /** @type {string} */
IgLinearGauge.prototype.rangeToolTipTemplate;
 /** @type {string} */
IgLinearGauge.prototype.needleToolTipTemplate;
 /** @type {string} */
IgLinearGauge.prototype.orientation;
 /** @type {?} */
IgLinearGauge.prototype.rangeBrushes;
 /** @type {?} */
IgLinearGauge.prototype.rangeOutlines;
 /** @type {number} */
IgLinearGauge.prototype.minimumValue;
 /** @type {number} */
IgLinearGauge.prototype.maximumValue;
 /** @type {number} */
IgLinearGauge.prototype.value;
 /** @type {string} */
IgLinearGauge.prototype.needleShape;
 /** @type {string} */
IgLinearGauge.prototype.needleName;
 /** @type {number} */
IgLinearGauge.prototype.rangeInnerExtent;
 /** @type {number} */
IgLinearGauge.prototype.scaleInnerExtent;
 /** @type {number} */
IgLinearGauge.prototype.rangeOuterExtent;
 /** @type {number} */
IgLinearGauge.prototype.scaleOuterExtent;
 /** @type {number} */
IgLinearGauge.prototype.needleInnerExtent;
 /** @type {number} */
IgLinearGauge.prototype.needleOuterExtent;
 /** @type {number} */
IgLinearGauge.prototype.needleInnerBaseWidth;
 /** @type {number} */
IgLinearGauge.prototype.needleOuterBaseWidth;
 /** @type {number} */
IgLinearGauge.prototype.needleInnerPointWidth;
 /** @type {number} */
IgLinearGauge.prototype.needleOuterPointWidth;
 /** @type {number} */
IgLinearGauge.prototype.needleInnerPointExtent;
 /** @type {number} */
IgLinearGauge.prototype.needleOuterPointExtent;
 /** @type {number} */
IgLinearGauge.prototype.interval;
 /** @type {number} */
IgLinearGauge.prototype.ticksPostInitial;
 /** @type {number} */
IgLinearGauge.prototype.ticksPreTerminal;
 /** @type {number} */
IgLinearGauge.prototype.labelInterval;
 /** @type {number} */
IgLinearGauge.prototype.labelExtent;
 /** @type {number} */
IgLinearGauge.prototype.labelsPostInitial;
 /** @type {number} */
IgLinearGauge.prototype.labelsPreTerminal;
 /** @type {number} */
IgLinearGauge.prototype.minorTickCount;
 /** @type {number} */
IgLinearGauge.prototype.tickStartExtent;
 /** @type {number} */
IgLinearGauge.prototype.tickEndExtent;
 /** @type {number} */
IgLinearGauge.prototype.tickStrokeThickness;
 /** @type {string} */
IgLinearGauge.prototype.tickBrush;
 /** @type {string} */
IgLinearGauge.prototype.fontBrush;
 /** @type {number} */
IgLinearGauge.prototype.needleBreadth;
 /** @type {string} */
IgLinearGauge.prototype.needleBrush;
 /** @type {string} */
IgLinearGauge.prototype.needleOutline;
 /** @type {number} */
IgLinearGauge.prototype.needleStrokeThickness;
 /** @type {number} */
IgLinearGauge.prototype.minorTickStartExtent;
 /** @type {number} */
IgLinearGauge.prototype.minorTickEndExtent;
 /** @type {number} */
IgLinearGauge.prototype.minorTickStrokeThickness;
 /** @type {string} */
IgLinearGauge.prototype.minorTickBrush;
 /** @type {boolean} */
IgLinearGauge.prototype.isScaleInverted;
 /** @type {string} */
IgLinearGauge.prototype.backingBrush;
 /** @type {string} */
IgLinearGauge.prototype.backingOutline;
 /** @type {number} */
IgLinearGauge.prototype.backingStrokeThickness;
 /** @type {number} */
IgLinearGauge.prototype.backingInnerExtent;
 /** @type {number} */
IgLinearGauge.prototype.backingOuterExtent;
 /** @type {number} */
IgLinearGauge.prototype.scaleStartExtent;
 /** @type {number} */
IgLinearGauge.prototype.scaleEndExtent;
 /** @type {string} */
IgLinearGauge.prototype.scaleBrush;
 /** @type {string} */
IgLinearGauge.prototype.scaleOutline;
 /** @type {number} */
IgLinearGauge.prototype.scaleStrokeThickness;
 /** @type {boolean} */
IgLinearGauge.prototype.isNeedleDraggingEnabled;
 /** @type {number} */
IgLinearGauge.prototype.transitionDuration;
 /** @type {number} */
IgLinearGauge.prototype.showToolTipTimeout;
 /** @type {boolean} */
IgLinearGauge.prototype.showToolTip;
 /** @type {string} */
IgLinearGauge.prototype.font;
 /** @type {number} */
IgLinearGauge.prototype.pixelScalingRatio;
 /** @type {!FormatLabelEvent} */
IgLinearGauge.prototype.formatLabel;
 /** @type {!AlignLabelEvent} */
IgLinearGauge.prototype.alignLabel;
 /** @type {!ValueChangedEvent} */
IgLinearGauge.prototype.valueChanged;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgLinearGaugeMethods() {}

/**
 * Returns a string containing the names of all the ranges delimited with a \n symbol.
 * @return {string}
 */
IgLinearGaugeMethods.prototype.getRangeNames = function() {};

/**
 * Adds a new range to the linear gauge.
 * 
 * @param {!Object} value     The range object to be added.
 * @return {void}
 */
IgLinearGaugeMethods.prototype.addRange = function(value) {};

/**
 * Removes a range from the linear gauge.
 * 
 * @param {!Object} value     A JS object with properties set as follows: name: nameOfTheRangeToRemove, remove: true
 * @return {void}
 */
IgLinearGaugeMethods.prototype.removeRange = function(value) {};

/**
 * Updates the specified range of the linear gauge.
 * 
 * @param {!Object} value     The range object to be updated.
 * @return {void}
 */
IgLinearGaugeMethods.prototype.updateRange = function(value) {};

/**
 * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.
 * 
 * @param {!Object} x
 * @param {!Object} y
 * @return {number}
 */
IgLinearGaugeMethods.prototype.getValueForPoint = function(x, y) {};

/**
 * Returns true if the main gauge needle bounding box contains the point provided, otherwise false.
 * 
 * @param {number} x The x coordinate of the point.
 * @param {number} y The y coordinate of the point.
 * @return {void}
 */
IgLinearGaugeMethods.prototype.needleContainsPoint = function(x, y) {};

/**
 * Returns information about how the linear gauge is rendered.
 * @return {!Object}
 */
IgLinearGaugeMethods.prototype.exportVisualData = function() {};

/**
 * Causes all pending changes of the linear gauge e.g. by changed property values to be rendered immediately.
 * @return {void}
 */
IgLinearGaugeMethods.prototype.flush = function() {};

/**
 * Destroys widget.
 * @return {void}
 */
IgLinearGaugeMethods.prototype.destroy = function() {};

/**
 * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
 * @return {void}
 */
IgLinearGaugeMethods.prototype.styleUpdated = function() {};

/**
 * @param {string} propertyName
 * @return {!IgLinearGaugeMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * \@optionValue New value to be set.
 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * \@optionValue New value to be set.
 * Gets  the scale ranges to render on the linear gauge.
 * Sets the scale ranges to render on the linear gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the ranges' tooltip template.
 * Sets the ranges' tooltip template.
 * 
 * \@optionValue New value to be set.
 * Gets  the needle's tooltip template.
 * Sets the needle's tooltip template.
 * 
 * \@optionValue New value to be set.
 * Gets  the orientation of the scale.
 * Sets the orientation of the scale.
 * 
 * \@optionValue New value to be set.
 * Gets  a collection of brushes to be used as the palette for linear gauge ranges.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * Sets a collection of brushes to be used as the palette for linear gauge ranges.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * 
 * \@optionValue New value to be set.
 * Gets  a collection of brushes to be used as the palette for linear gauge outlines.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * Sets a collection of brushes to be used as the palette for linear gauge outlines.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * 
 * \@optionValue New value to be set.
 * Gets  the minimum value of the scale.
 * Sets the minimum value of the scale.
 * 
 * \@optionValue New value to be set.
 * Gets  the maximum value of the scale.
 * Sets the maximum value of the scale.
 * 
 * \@optionValue New value to be set.
 * Gets  the value at which the needle is positioned.
 * Sets the value at which the needle is positioned.
 * 
 * \@optionValue New value to be set.
 * Gets  the shape to use when rendering the needle from a number of options.
 * Sets the shape to use when rendering the needle from a number of options.
 * 
 * \@optionValue New value to be set.
 * Gets  the name used for needle.
 * Sets the name used for needle.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * Sets the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to start rendering the scale, measured from the bottom/front (when orientation is horizontal/vertical) of the control as a value from 0 to 1.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * Sets the position at which to start rendering the scale, measured from the bottom/front (when orientation is horizontal/vertical) of the control as a value from 0 to 1.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the linear gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * Sets the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the linear gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to stop rendering the scale as a value from 0 to 1 measured from the bottom/front (when orientation is horizontal/vertical) of the linear gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * Sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the bottom/front (when orientation is horizontal/vertical) of the linear gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to start rendering the needle geometry, measured from the front/bottom of the linear gauge as a value from 0 to 1.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * Sets the position at which to start rendering the needle geometry, measured from the front/bottom of the linear gauge as a value from 0 to 1.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to stop rendering the needle geometry as a value from 0 to 1 measured from the front/bottom of the linear gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * Sets the position at which to stop rendering the needle geometry as a value from 0 to 1 measured from the front/bottom of the linear gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the width of the needle's inner base.
 * Sets the width of the needle's inner base.
 * 
 * \@optionValue New value to be set.
 * Gets  the width of the needle's outer base.
 * Sets the width of the needle's outer base.
 * 
 * \@optionValue New value to be set.
 * Gets  the width of the needle's inner point.
 * Sets the width of the needle's inner point.
 * 
 * \@optionValue New value to be set.
 * Gets  the width of the needle's outer point.
 * Sets the width of the needle's outer point.
 * 
 * \@optionValue New value to be set.
 * Gets  the extent of the needle's inner point.
 * Sets the extent of the needle's inner point.
 * 
 * \@optionValue New value to be set.
 * Gets  the extent of the needle's outer point.
 * Sets the extent of the needle's outer point.
 * 
 * \@optionValue New value to be set.
 * Gets  the interval to use for the scale.
 * Sets the interval to use for the scale.
 * 
 * \@optionValue New value to be set.
 * A value to start adding tickmarks, added to the scale's MinimumValue.
 * A value to start adding tickmarks, added to the scale's MinimumValue.
 * 
 * \@optionValue New value to be set.
 * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
 * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
 * 
 * \@optionValue New value to be set.
 * Gets  the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
 * Sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
 * Values further from zero than 1 can be used to hide the labels of the linear gauge.
 * Sets the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
 * Values further from zero than 1 can be used to hide the labels of the linear gauge.
 * 
 * \@optionValue New value to be set.
 * A value to start adding labels, added to the scale's MinimumValue.
 * A value to start adding labels, added to the scale's MinimumValue.
 * 
 * \@optionValue New value to be set.
 * A value to stop adding labels, subtracted from the scale's MaximumValue.
 * A value to stop adding labels, subtracted from the scale's MaximumValue.
 * 
 * \@optionValue New value to be set.
 * Gets  the number of minor tickmarks to place between major tickmarks.
 * Sets the number of minor tickmarks to place between major tickmarks.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * Sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * Sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the stroke thickness to use when rendering ticks.
 * Sets the stroke thickness to use when rendering ticks.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for the major tickmarks.
 * Sets the brush to use for the major tickmarks.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for the label font.
 * Sets the brush to use for the label font.
 * 
 * \@optionValue New value to be set.
 * Gets  the needle breadth.
 * Sets the needle breadth.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for needle element.
 * Sets the brush to use for needle element.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for the outline of needle element.
 * Sets the brush to use for the outline of needle element.
 * 
 * \@optionValue New value to be set.
 * Gets  the stroke thickness to use when rendering single actual value element.
 * Sets the stroke thickness to use when rendering single actual value element.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * Sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * Sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the stroke thickness to use when rendering minor ticks.
 * Sets the stroke thickness to use when rendering minor ticks.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for the minor tickmarks.
 * Sets the brush to use for the minor tickmarks.
 * 
 * \@optionValue New value to be set.
 * Gets  a value indicating whether the scale is inverted.
 * When the scale is inverted the direction in which the scale values increase is right to left.
 * Sets a value indicating whether the scale is inverted.
 * When the scale is inverted the direction in which the scale values increase is right to left.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use to fill the backing of the linear gauge.
 * Sets the brush to use to fill the backing of the linear gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for the outline of the backing.
 * Sets the brush to use for the outline of the backing.
 * 
 * \@optionValue New value to be set.
 * Gets  the stroke thickness of the backing outline.
 * Sets the stroke thickness of the backing outline.
 * 
 * \@optionValue New value to be set.
 * Gets  the inner extent of the linear gauge backing.
 * Sets the inner extent of the linear gauge backing.
 * 
 * \@optionValue New value to be set.
 * Gets  the outer extent of the linear gauge backing.
 * Sets the outer extent of the linear gauge backing.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to start rendering the scale, measured from the front/bottom of the linear gauge as a value from 0 to 1.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * Sets the position at which to start rendering the scale, measured from the front/bottom of the linear gauge as a value from 0 to 1.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the linear gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * Sets the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the linear gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use to fill the scale of the linear gauge.
 * Sets the brush to use to fill the scale of the linear gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for the outline of the scale.
 * Sets the brush to use for the outline of the scale.
 * 
 * \@optionValue New value to be set.
 * Gets  the stroke thickness of the scale outline.
 * Sets the stroke thickness of the scale outline.
 * 
 * \@optionValue New value to be set.
 * Gets  whether needle dragging is enabled or not.
 * Sets whether needle dragging is enabled or not.
 * 
 * \@optionValue New value to be set.
 * Gets  the number of milliseconds over which changes to the linear gauge should be animated.
 * Sets the number of milliseconds over which changes to the linear gauge should be animated.
 * 
 * \@optionValue New value to be set.
 * Gets  the time in milliseconds that tooltip appearance is delayed with.
 * Sets the time in milliseconds that tooltip appearance is delayed with.
 * 
 * \@optionValue New value to be set.
 * Gets  a value indicating whether tooltips are enabled.
 * Sets a value indicating whether tooltips are enabled.
 * 
 * \@optionValue New value to be set.
 * Gets  the font.
 * Sets the font.
 * 
 * \@optionValue New value to be set.
 * Gets  the pixel scaling ratio for the gauge.
 * Sets the pixel scaling ratio for the gauge.
 * 
 * \@optionValue New value to be set.
 *
 *
 *
 *
 * Occurs when the Value property changes.
 * Occurs when the Value property changes.
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgLinearGauge} methodName_or_optionLiteral_or_options
 * @param {...!Object|number|string|!IgLinearGauge|?} value_or_x_or_optionName_or_options_or_methodParams
 * @return {string|void|number|!Object|(string|number)|!Array<!IgLinearGaugeRange>|?|boolean|!FormatLabelEvent|!AlignLabelEvent|!ValueChangedEvent|!JQuery}
 */
JQuery.prototype.igLinearGauge = function(methodName_or_optionLiteral_or_options, value_or_x_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgMapCrosshairPoint() {}
 /** @type {number} */
IgMapCrosshairPoint.prototype.x;
 /** @type {number} */
IgMapCrosshairPoint.prototype.y;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgMapBackgroundContent() {}
 /** @type {string} */
IgMapBackgroundContent.prototype.type;
 /** @type {string} */
IgMapBackgroundContent.prototype.key;
 /** @type {string} */
IgMapBackgroundContent.prototype.parameter;
 /** @type {string} */
IgMapBackgroundContent.prototype.tilePath;
 /** @type {string} */
IgMapBackgroundContent.prototype.imagerySet;
 /** @type {string} */
IgMapBackgroundContent.prototype.bingUrl;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgMapSeries() {}
 /** @type {string} */
IgMapSeries.prototype.type;
 /** @type {string} */
IgMapSeries.prototype.name;
 /** @type {?} */
IgMapSeries.prototype.dataSource;
 /** @type {string} */
IgMapSeries.prototype.dataSourceUrl;
 /** @type {string} */
IgMapSeries.prototype.dataSourceType;
 /** @type {string} */
IgMapSeries.prototype.responseDataKey;
 /** @type {boolean} */
IgMapSeries.prototype.remove;
 /** @type {boolean} */
IgMapSeries.prototype.showTooltip;
 /** @type {string} */
IgMapSeries.prototype.shapeDataSource;
 /** @type {string} */
IgMapSeries.prototype.databaseSource;
 /** @type {string} */
IgMapSeries.prototype.triangulationDataSource;
 /** @type {?} */
IgMapSeries.prototype.legendItemBadgeTemplate;
 /** @type {?} */
IgMapSeries.prototype.legendItemTemplate;
 /** @type {?} */
IgMapSeries.prototype.discreteLegendItemTemplate;
 /** @type {number} */
IgMapSeries.prototype.transitionDuration;
 /** @type {number} */
IgMapSeries.prototype.resolution;
 /** @type {string} */
IgMapSeries.prototype.title;
 /** @type {string} */
IgMapSeries.prototype.brush;
 /** @type {string} */
IgMapSeries.prototype.outline;
 /** @type {number} */
IgMapSeries.prototype.thickness;
 /** @type {?} */
IgMapSeries.prototype.trianglesSource;
 /** @type {string} */
IgMapSeries.prototype.triangleVertexMemberPath1;
 /** @type {string} */
IgMapSeries.prototype.triangleVertexMemberPath2;
 /** @type {string} */
IgMapSeries.prototype.triangleVertexMemberPath3;
 /** @type {?} */
IgMapSeries.prototype.colorScale;
 /** @type {string} */
IgMapSeries.prototype.colorMemberPath;
 /** @type {number} */
IgMapSeries.prototype.visibleFromScale;
 /** @type {string} */
IgMapSeries.prototype.longitudeMemberPath;
 /** @type {string} */
IgMapSeries.prototype.latitudeMemberPath;
 /** @type {string} */
IgMapSeries.prototype.markerType;
 /** @type {?} */
IgMapSeries.prototype.markerTemplate;
 /** @type {string} */
IgMapSeries.prototype.shapeMemberPath;
 /** @type {?} */
IgMapSeries.prototype.shapeStyleSelector;
 /** @type {?} */
IgMapSeries.prototype.shapeStyle;
 /** @type {string} */
IgMapSeries.prototype.markerBrush;
 /** @type {string} */
IgMapSeries.prototype.markerOutline;
 /** @type {string} */
IgMapSeries.prototype.markerCollisionAvoidance;
 /** @type {?} */
IgMapSeries.prototype.fillScale;
 /** @type {string} */
IgMapSeries.prototype.fillMemberPath;
 /** @type {string} */
IgMapSeries.prototype.trendLineType;
 /** @type {string} */
IgMapSeries.prototype.trendLineBrush;
 /** @type {number} */
IgMapSeries.prototype.trendLineThickness;
 /** @type {number} */
IgMapSeries.prototype.trendLinePeriod;
 /** @type {number} */
IgMapSeries.prototype.trendLineZIndex;
 /** @type {number} */
IgMapSeries.prototype.maximumMarkers;
 /** @type {string} */
IgMapSeries.prototype.radiusMemberPath;
 /** @type {?} */
IgMapSeries.prototype.radiusScale;
 /** @type {string} */
IgMapSeries.prototype.labelMemberPath;
 /** @type {boolean} */
IgMapSeries.prototype.clipSeriesToBounds;
 /** @type {string} */
IgMapSeries.prototype.valueMemberPath;
 /** @type {string} */
IgMapSeries.prototype.unknownValuePlotting;
 /** @type {number} */
IgMapSeries.prototype.angleMemberPath;
 /** @type {boolean} */
IgMapSeries.prototype.useCartesianInterpolation;
 /** @type {number} */
IgMapSeries.prototype.stiffness;
 /** @type {string} */
IgMapSeries.prototype.negativeBrush;
 /** @type {string} */
IgMapSeries.prototype.splineType;
 /** @type {string} */
IgMapSeries.prototype.lowMemberPath;
 /** @type {string} */
IgMapSeries.prototype.highMemberPath;
 /** @type {string} */
IgMapSeries.prototype.openMemberPath;
 /** @type {string} */
IgMapSeries.prototype.closeMemberPath;
 /** @type {string} */
IgMapSeries.prototype.volumeMemberPath;
 /** @type {number} */
IgMapSeries.prototype.ignoreFirst;
 /** @type {number} */
IgMapSeries.prototype.period;
 /** @type {number} */
IgMapSeries.prototype.shortPeriod;
 /** @type {number} */
IgMapSeries.prototype.longPeriod;
 /** @type {?} */
IgMapSeries.prototype.valueResolver;
 /** @type {number} */
IgMapSeries.prototype.shapeFilterResolution;
 /** @type {boolean} */
IgMapSeries.prototype.useBruteForce;
 /** @type {boolean} */
IgMapSeries.prototype.progressiveLoad;
 /** @type {boolean} */
IgMapSeries.prototype.mouseOverEnabled;
 /** @type {boolean} */
IgMapSeries.prototype.useSquareCutoffStyle;
 /** @type {number} */
IgMapSeries.prototype.heatMinimum;
 /** @type {number} */
IgMapSeries.prototype.heatMaximum;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function TriangulationStatusChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function TriangulationStatusChangedEventUIParam() {}
 /** @type {?} */
TriangulationStatusChangedEventUIParam.prototype.map;
 /** @type {?} */
TriangulationStatusChangedEventUIParam.prototype.series;
 /** @type {?} */
TriangulationStatusChangedEventUIParam.prototype.currentStatus;
/**
 * @record
 * @struct
 */
function IgMap() {}
 /** @type {(string|number)} */
IgMap.prototype.width;
 /** @type {(string|number)} */
IgMap.prototype.height;
 /** @type {?} */
IgMap.prototype.dataSource;
 /** @type {string} */
IgMap.prototype.dataSourceUrl;
 /** @type {string} */
IgMap.prototype.dataSourceType;
 /** @type {string} */
IgMap.prototype.responseDataKey;
 /** @type {number} */
IgMap.prototype.autoMarginWidth;
 /** @type {number} */
IgMap.prototype.autoMarginHeight;
 /** @type {string} */
IgMap.prototype.crosshairVisibility;
 /** @type {!IgMapCrosshairPoint} */
IgMap.prototype.crosshairPoint;
 /** @type {string} */
IgMap.prototype.plotAreaBackground;
 /** @type {string} */
IgMap.prototype.defaultInteraction;
 /** @type {string} */
IgMap.prototype.dragModifier;
 /** @type {string} */
IgMap.prototype.panModifier;
 /** @type {?} */
IgMap.prototype.previewRect;
 /** @type {?} */
IgMap.prototype.windowRect;
 /** @type {boolean} */
IgMap.prototype.zoomable;
 /** @type {number} */
IgMap.prototype.windowScale;
 /** @type {string} */
IgMap.prototype.windowResponse;
 /** @type {number} */
IgMap.prototype.windowRectMinWidth;
 /** @type {number} */
IgMap.prototype.windowPositionHorizontal;
 /** @type {number} */
IgMap.prototype.windowPositionVertical;
 /** @type {?} */
IgMap.prototype.circleMarkerTemplate;
 /** @type {?} */
IgMap.prototype.triangleMarkerTemplate;
 /** @type {?} */
IgMap.prototype.pyramidMarkerTemplate;
 /** @type {?} */
IgMap.prototype.squareMarkerTemplate;
 /** @type {?} */
IgMap.prototype.diamondMarkerTemplate;
 /** @type {?} */
IgMap.prototype.pentagonMarkerTemplate;
 /** @type {?} */
IgMap.prototype.hexagonMarkerTemplate;
 /** @type {?} */
IgMap.prototype.tetragramMarkerTemplate;
 /** @type {?} */
IgMap.prototype.pentagramMarkerTemplate;
 /** @type {?} */
IgMap.prototype.hexagramMarkerTemplate;
 /** @type {string} */
IgMap.prototype.overviewPlusDetailPaneBackgroundImageUri;
 /** @type {boolean} */
IgMap.prototype.useTiledZooming;
 /** @type {boolean} */
IgMap.prototype.preferHigherResolutionTiles;
 /** @type {number} */
IgMap.prototype.zoomTileCacheSize;
 /** @type {!IgMapBackgroundContent} */
IgMap.prototype.backgroundContent;
 /** @type {!Array<!IgMapSeries>} */
IgMap.prototype.series;
 /** @type {string} */
IgMap.prototype.theme;
 /** @type {!TooltipShowingEvent} */
IgMap.prototype.tooltipShowing;
 /** @type {!TooltipShownEvent} */
IgMap.prototype.tooltipShown;
 /** @type {!TooltipHidingEvent} */
IgMap.prototype.tooltipHiding;
 /** @type {!TooltipHiddenEvent} */
IgMap.prototype.tooltipHidden;
 /** @type {!BrowserNotSupportedEvent} */
IgMap.prototype.browserNotSupported;
 /** @type {!SeriesCursorMouseMoveEvent} */
IgMap.prototype.seriesCursorMouseMove;
 /** @type {!SeriesMouseLeftButtonDownEvent} */
IgMap.prototype.seriesMouseLeftButtonDown;
 /** @type {!SeriesMouseLeftButtonUpEvent} */
IgMap.prototype.seriesMouseLeftButtonUp;
 /** @type {!SeriesMouseMoveEvent} */
IgMap.prototype.seriesMouseMove;
 /** @type {!SeriesMouseEnterEvent} */
IgMap.prototype.seriesMouseEnter;
 /** @type {!SeriesMouseLeaveEvent} */
IgMap.prototype.seriesMouseLeave;
 /** @type {!WindowRectChangedEvent} */
IgMap.prototype.windowRectChanged;
 /** @type {!GridAreaRectChangedEvent} */
IgMap.prototype.gridAreaRectChanged;
 /** @type {!RefreshCompletedEvent} */
IgMap.prototype.refreshCompleted;
 /** @type {!TriangulationStatusChangedEvent} */
IgMap.prototype.triangulationStatusChanged;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgMapMethods() {}

/**
 * @return {void}
 */
IgMapMethods.prototype.option = function() {};

/**
 * Destroys the widget.
 * @return {void}
 */
IgMapMethods.prototype.destroy = function() {};

/**
 * Returns the ID of parent element holding the map.
 * @return {string}
 */
IgMapMethods.prototype.id = function() {};

/**
 * Exports the map to a PNG image.
 * 
 * @param {!Object=} width The width of the image.
 * @param {!Object=} height The height of the image.
 * @return {!Object}
 */
IgMapMethods.prototype.exportImage = function(width, height) {};

/**
 * Notify the map that styles it draws colors from may have been updated.
 * @return {!Object}
 */
IgMapMethods.prototype.styleUpdated = function() {};

/**
 * Resets the zoom level of the map to default.
 * @return {!Object}
 */
IgMapMethods.prototype.resetZoom = function() {};

/**
 * Adds a new item to the data source and notifies the map.
 * 
 * @param {!Object} item     The item that we want to add to the data source.
 * @param {string} targetName     The name of the series bound to the data source.
 * @return {void}
 */
IgMapMethods.prototype.addItem = function(item, targetName) {};

/**
 * Inserts a new item to the data source and notifies the map.
 * 
 * @param {!Object} item     the new item that we want to insert in the data source.
 * @param {number} index     The index in the data source where the new item will be inserted.
 * @param {string} targetName     The name of the series bound to the data source.
 * @return {void}
 */
IgMapMethods.prototype.insertItem = function(item, index, targetName) {};

/**
 * Deletes an item from the data source and notifies the map.
 * 
 * @param {number} index     The index in the data source from where the item will be been removed.
 * @param {string} targetName     The name of the series bound to the data source.
 * @return {void}
 */
IgMapMethods.prototype.removeItem = function(index, targetName) {};

/**
 * Updates an item in the data source and notifies the map.
 * 
 * @param {number} index     The index of the item in the data source that we want to change.
 * @param {!Object} item     The new item object that will be set in the data source.
 * @param {string} targetName     The name of the series bound to the data source.
 * @return {void}
 */
IgMapMethods.prototype.setItem = function(index, item, targetName) {};

/**
 * Notifies the the map that an item has been set in an associated data source.
 * 
 * @param {!Object} dataSource The data source in which the change happened.
 * @param {number} index The index in the items source that has been changed.
 * @param {!Object} newItem the new item that has been set in the collection.
 * @param {!Object} oldItem the old item that has been overwritten in the collection.
 * @return {!Object}
 */
IgMapMethods.prototype.notifySetItem = function(dataSource, index, newItem, oldItem) {};

/**
 * Notifies the the map that the items have been cleared from an associated data source.
 *                 It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource The data source in which the change happened.
 * @return {!Object}
 */
IgMapMethods.prototype.notifyClearItems = function(dataSource) {};

/**
 * Notifies the the target series that an item has been inserted at the specified index in its data source.
 *                 It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource The data source in which the change happened.
 * @param {number} index The index in the items source where the new item has been inserted.
 * @param {!Object} newItem the new item that has been set in the collection.
 * @return {!Object}
 */
IgMapMethods.prototype.notifyInsertItem = function(dataSource, index, newItem) {};

/**
 * Notifies the the target series that an item has been removed from the specified index in its data source.
 *                 It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource The data source in which the change happened.
 * @param {number} index The index in the items source from where the old item has been removed.
 * @param {!Object} oldItem the old item that has been removed from the collection.
 * @return {!Object}
 */
IgMapMethods.prototype.notifyRemoveItem = function(dataSource, index, oldItem) {};

/**
 * Notifies the target series or axis that it should scroll the requested data item into view.
 * 
 * @param {string} targetName The name of the series or axis notify.
 * @param {!Object} item The data item to bring into view, if possible.
 * @return {!Object}
 */
IgMapMethods.prototype.scrollIntoView = function(targetName, item) {};

/**
 * Either xAxis or yAxis (longitude or latitude) that it should scale the requested value into map space from axis space.
 * For example you can use this method if you want to find where longitude 50 stands scaled to map's width.
 * 
 * @param {string} targetName Either xAxis or yAxis to notify.
 * @param {number} unscaledValue The value in axis space to translate into map space.
 * @return {number}
 */
IgMapMethods.prototype.scaleValue = function(targetName, unscaledValue) {};

/**
 * Either xAxis or yAxis (longitude or latitude) that it should unscale the requested value into axis space from map space.
 * For example you can use this method if you want to find what is the longitude unscaled from 0 width of the map.
 * 
 * @param {string} targetName Either xAxis or yAxis to notify.
 * @param {number} scaledValue The value in map space to translate into axis space.
 * @return {number}
 */
IgMapMethods.prototype.unscaleValue = function(targetName, scaledValue) {};

/**
 * Manually starts a tiled zoom if one isn't already running.
 * @return {void}
 */
IgMapMethods.prototype.startTiledZoomingIfNecessary = function() {};

/**
 * Manually ends a tiled zoom if one is running.
 * @return {void}
 */
IgMapMethods.prototype.endTiledZoomingIfRunning = function() {};

/**
 * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom..
 * @return {void}
 */
IgMapMethods.prototype.clearTileZoomCache = function() {};

/**
 * Forces any pending deferred work to render on the map before continuing
 * @return {void}
 */
IgMapMethods.prototype.flush = function() {};

/**
 * Exports visual data from the map to aid in unit testing
 * @return {void}
 */
IgMapMethods.prototype.exportVisualData = function() {};

/**
 * Gets the actual minimum value of the target xAxis or yAxis
 * 
 * @param {!Object} targetName
 * @return {void}
 */
IgMapMethods.prototype.getActualMinimumValue = function(targetName) {};

/**
 * Gets the actual maximum value of the target xAxis or yAxis
 * 
 * @param {!Object} targetName
 * @return {void}
 */
IgMapMethods.prototype.getActualMaximumValue = function(targetName) {};

/**
 * Notifies the map that the container was resized
 * @return {void}
 */
IgMapMethods.prototype.notifyContainerResized = function() {};

/**
 * Zoom in to the geographic region specified, when possible (may need to wait fior map to be initialized).
 * 
 * @param {!Object} rect The geographic area rectangle.
 * @return {!Object}
 */
IgMapMethods.prototype.zoomToGeographic = function(rect) {};

/**
 * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
 * 
 * @param {!Object} rect The geographic area rectangle.
 * @return {!Object}
 */
IgMapMethods.prototype.getGeographicFromZoom = function(rect) {};

/**
 * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
 * 
 * @param {!Object} rect The geographic area rectangle.
 * @return {!Object}
 */
IgMapMethods.prototype.getZoomFromGeographic = function(rect) {};

/**
 * Creates a print preview page with the map, hiding all other elements on the page.
 * @return {void}
 */
IgMapMethods.prototype.print = function() {};

/**
 * Indicates that a series should render, even though no option has been modified that would normally cause it to refresh.
 * 
 * @param {string} targetName     The name of the series to render.
 * @param {boolean} animate     Whether the change should be animated, if possible.
 * @return {void}
 */
IgMapMethods.prototype.renderSeries = function(targetName, animate) {};

/**
 * @param {string} propertyName
 * @return {!IgMapMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function ShapeDataSourceSettings() {}
 /** @type {string} */
ShapeDataSourceSettings.prototype.id;
 /** @type {string} */
ShapeDataSourceSettings.prototype.shapefileSource;
 /** @type {string} */
ShapeDataSourceSettings.prototype.databaseSource;
 /** @type {!Function} */
ShapeDataSourceSettings.prototype.callback;
 /** @type {?} */
ShapeDataSourceSettings.prototype.callee;
 /** @type {!Function} */
ShapeDataSourceSettings.prototype.transformRecord;
 /** @type {!Function} */
ShapeDataSourceSettings.prototype.transformPoint;
 /** @type {!Function} */
ShapeDataSourceSettings.prototype.transformBounds;
 /** @type {!Function} */
ShapeDataSourceSettings.prototype.importCompleted;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!ShapeDataSourceSettings} settings
 */
Infragistics.ShapeDataSource = function(settings) {};

/**
 * Loads to the current data source
 * @return {void}
 */
Infragistics.ShapeDataSource.prototype.dataBind = function() {};

/**
 * Returns true if data is loaded
 * @return {boolean}
 */
Infragistics.ShapeDataSource.prototype.isBound = function() {};

/**
 * Returns the current converter instance
 * @return {!Object}
 */
Infragistics.ShapeDataSource.prototype.converter = function() {};
 /** @type {?} */
IgniteUIStatic.prototype.ShapeDataSource;
/**
 * @record
 * @struct
 */
function TriangulationDataSourceSettings() {}
 /** @type {string} */
TriangulationDataSourceSettings.prototype.id;
 /** @type {string} */
TriangulationDataSourceSettings.prototype.source;
 /** @type {string} */
TriangulationDataSourceSettings.prototype.triangulationSource;
 /** @type {!Function} */
TriangulationDataSourceSettings.prototype.callback;
 /** @type {?} */
TriangulationDataSourceSettings.prototype.callee;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!TriangulationDataSourceSettings} settings
 */
Infragistics.TriangulationDataSource = function(settings) {};

/**
 * Loads to the current data source
 * @return {void}
 */
Infragistics.TriangulationDataSource.prototype.dataBind = function() {};

/**
 * Returns true if data is loaded
 * @return {boolean}
 */
Infragistics.TriangulationDataSource.prototype.isBound = function() {};

/**
 * Returns the current converter instance
 * @return {!Object}
 */
Infragistics.TriangulationDataSource.prototype.converter = function() {};
 /** @type {?} */
IgniteUIStatic.prototype.TriangulationDataSource;

/**
 * The width of the map. It can be set as a number in pixels, string (px) or percentage (%).
 * The width of the map. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * \@optionValue New value to be set.
 * The height of the map. It can be set as a number in pixels, string (px) or percentage (%).
 * The height of the map. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * \@optionValue New value to be set.
 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
 * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
 * 
 * \@optionValue New value to be set.
 * Gets a remote URL accepted by $.ig.DataSource in order to request data from it
 * Sets a remote URL accepted by $.ig.DataSource in order to request data from it
 * 
 * \@optionValue New value to be set.
 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
 * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
 * 
 * \@optionValue New value to be set.
 * See $.ig.DataSource. Gets the name of the property in which data records are held if the response is wrapped.
 * See $.ig.DataSource. Sets the name of the property in which data records are held if the response is wrapped.
 * 
 * \@optionValue New value to be set.
 * Sets or gets the automatic width to add when automatically adding margins to the map.
 * Sets or gets the automatic width to add when automatically adding margins to the map.
 * 
 * \@optionValue New value to be set.
 * Sets or gets the automatic height to add when automatically adding margins to the map.
 * Sets or gets the automatic height to add when automatically adding margins to the map.
 * 
 * \@optionValue New value to be set.
 * Gets  the current Map's crosshair visibility override.
 * Sets the current Map's crosshair visibility override.
 * 
 * \@optionValue New value to be set.
 * Gets  the cross hair point (in world coordinates)
 * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
 * case the relevant crosshair line is hidden.
 * Sets the cross hair point (in world coordinates)
 * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
 * case the relevant crosshair line is hidden.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush used as the background for the current Map object's plot area.
 * Sets the brush used as the background for the current Map object's plot area.
 * 
 * \@optionValue New value to be set.
 * Gets  the DefaultInteraction property. The default interaction state defines the map's response to mouse events.
 * Sets the DefaultInteraction property. The default interaction state defines the map's response to mouse events.
 * 
 * \@optionValue New value to be set.
 * Gets  the current Map's DragModifier property.
 * Sets the current Map's DragModifier property.
 * 
 * \@optionValue New value to be set.
 * Gets  the current Map's PanModifier property.
 * Sets the current Map's PanModifier property.
 * 
 * \@optionValue New value to be set.
 * Gets  the preview rectangle.
 * The preview rectangle may be set to Rect.Empty, in which case the visible preview
 * strokePath is hidden.
 * The provided object should have numeric properties called left, top, width and height.
 * Sets the preview rectangle.
 * The preview rectangle may be set to Rect.Empty, in which case the visible preview
 * strokePath is hidden.
 * The provided object should have numeric properties called left, top, width and height.
 * 
 * \@optionValue New value to be set.
 * A rectangle representing the portion of the map currently in view.
 * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
 * The provided object should have numeric properties called left, top, width and height.
 * A rectangle representing the portion of the map currently in view.
 * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
 * The provided object should have numeric properties called left, top, width and height.
 * 
 * \@optionValue New value to be set.
 * Gets  the current Map's zoomability.
 * Sets the current Map's zoomability.
 * 
 * \@optionValue New value to be set.
 * Gets  the current Map's zoom scale.
 * Sets the current Map's zoom scale.
 * 
 * \@optionValue New value to be set.
 * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
 * 
 * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
 * Decrease this value if you want to allow for further zooming into the viewer.
 * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
 * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
 * Decrease this value if you want to allow for further zooming into the viewer.
 * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
 * 
 * \@optionValue New value to be set.
 * A number between 0 and 1 determining the position of the horizontal scroll.
 * This property is effectively a shortcut to the X position of the WindowRect property.
 * A number between 0 and 1 determining the position of the horizontal scroll.
 * This property is effectively a shortcut to the X position of the WindowRect property.
 * 
 * \@optionValue New value to be set.
 * A number between 0 and 1 determining the position of the vertical scroll.
 * This property is effectively a shortcut to the Y position of the WindowRect property.
 * A number between 0 and 1 determining the position of the vertical scroll.
 * This property is effectively a shortcut to the Y position of the WindowRect property.
 * 
 * \@optionValue New value to be set.
 * Gets  the template to use for circle markers on the map.
 * Defines the marker template used for
 * series with a marker type of circle.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the template to use for circle markers on the map.
 * Defines the marker template used for
 * series with a marker type of circle.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Gets  the template to use for triangle markers on the map.
 * Defines the marker template used for
 * series with a marker type of triangle.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the template to use for triangle markers on the map.
 * Defines the marker template used for
 * series with a marker type of triangle.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Gets  the template to use for pyramid markers on the map.
 * Defines the marker template used for
 * series with a marker type of pyramid.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the template to use for pyramid markers on the map.
 * Defines the marker template used for
 * series with a marker type of pyramid.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Gets  the template to use for square markers on the map.
 * Defines the marker template used for
 * series with a marker type of square.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the template to use for square markers on the map.
 * Defines the marker template used for
 * series with a marker type of square.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Gets  the template to use for diamond markers on the map.
 * Defines the marker template used for
 * series with a marker type of diamond.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the template to use for diamond markers on the map.
 * Defines the marker template used for
 * series with a marker type of diamond.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Gets  the template to use for pentagon markers on the map.
 * Defines the marker template used for
 * series with a marker type of pentagon.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the template to use for pentagon markers on the map.
 * Defines the marker template used for
 * series with a marker type of pentagon.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Gets  the template to use for hexagon markers on the map.
 * Defines the marker template used for
 * series with a marker type of hexagon.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the template to use for hexagon markers on the map.
 * Defines the marker template used for
 * series with a marker type of hexagon.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Gets  the template to use for tetragram markers on the map.
 * Defines the marker template used for
 * series with a marker type of tetragram.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the template to use for tetragram markers on the map.
 * Defines the marker template used for
 * series with a marker type of tetragram.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Gets  the template to use for pentragram markers on the map.
 * Defines the marker template used for
 * series with a marker type of pentagram.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the template to use for pentragram markers on the map.
 * Defines the marker template used for
 * series with a marker type of pentagram.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * Gets  the template to use for hexagram markers on the map.
 * Defines the marker template used for
 * series with a marker type of hexagram.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * Sets the template to use for hexagram markers on the map.
 * Defines the marker template used for
 * series with a marker type of hexagram.
 * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
 * 
 * \@optionValue New value to be set.
 * The background image uri use in the overview detail pane.
 * The background image uri use in the overview detail pane.
 * 
 * \@optionValue New value to be set.
 * Whether the series viewer should use cached tiles during zooms rather than the default live content.
 * Sets whether the series viewer should use cached tiles during zooms rather than the default live content.
 * 
 * \@optionValue New value to be set.
 * Whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
 * Sets whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
 * 
 * \@optionValue New value to be set.
 * The maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
 * Sets the maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
 * 
 * \@optionValue New value to be set.
 * Background content object
 * Background content object
 * 
 * \@optionValue New value to be set.
 * An array of series objects
 * An array of series objects
 * 
 * \@optionValue New value to be set.
 * The swatch used to style this widget
 * The swatch used to style this widget
 * 
 * \@optionValue New value to be set.
 * Event fired when the mouse has hovered on a series and the tooltip is about to show
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Event fired when the mouse has hovered on a series and the tooltip is about to show
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a tooltip is shown
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Event fired after a tooltip is shown
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * 
 * \@optionValue Define event handler function.
 * Event fired when the mouse has left a series and the tooltip is about to hide
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Event fired when the mouse has left a series and the tooltip is about to hide
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a tooltip is hidden
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Event fired after a tooltip is hidden
 * Function takes arguments evt and ui.
 * Use ui.element to get reference to tooltip DOM element.
 * Use ui.item to get reference to current series item object.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * 
 * \@optionValue Define event handler function.
 * Event fired when the control is displayed on a non HTML5 compliant browser
 * Event fired when the control is displayed on a non HTML5 compliant browser
 * 
 * \@optionValue Define event handler function.
 * Occurs when the cursors are moved over a series in this map.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * Occurs when the cursors are moved over a series in this map.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * 
 * \@optionValue New value to be set.
 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this map.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this map.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * 
 * \@optionValue New value to be set.
 * Occurs when the left mouse button is released while the mouse pointer is over an element of this map.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * Occurs when the left mouse button is released while the mouse pointer is over an element of this map.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * 
 * \@optionValue New value to be set.
 * Occurs when the left mouse pointer moves while over an element of this map.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * Occurs when the left mouse pointer moves while over an element of this map.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * 
 * \@optionValue New value to be set.
 * Occurs when the left mouse pointer enters an element of this map.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * Occurs when the left mouse pointer enters an element of this map.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * 
 * \@optionValue New value to be set.
 * Occurs when the left mouse pointer leaves an element of this map.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * Occurs when the left mouse pointer leaves an element of this map.
 * Function takes arguments evt and ui.
 * Use ui.item to get reference to current series item object.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.actualItemBrush to get item brush.
 * Use ui.actualSeriesBrush to get series brush.
 * Use ui.positionX to get mouse X position.
 * Use ui.positionY to get mouse Y position.
 * 
 * \@optionValue New value to be set.
 * Occurs just after the current Map's window rectangle is changed.
 * Function takes arguments evt and ui.
 * Use ui.map to get reference to map object.
 * Use ui.newHeight to get new height value.
 * Use ui.newLeft to get new left value.
 * Use ui.newTop to get new top value.
 * Use ui.newWidth to get new top value.
 * Use ui.oldHeight to get old height value.
 * Use ui.oldLeft to get old left value.
 * Use ui.oldTop to get old top value.
 * Use ui.oldWidth to get old top value.
 * Occurs just after the current Map's window rectangle is changed.
 * Function takes arguments evt and ui.
 * Use ui.map to get reference to map object.
 * Use ui.newHeight to get new height value.
 * Use ui.newLeft to get new left value.
 * Use ui.newTop to get new top value.
 * Use ui.newWidth to get new top value.
 * Use ui.oldHeight to get old height value.
 * Use ui.oldLeft to get old left value.
 * Use ui.oldTop to get old top value.
 * Use ui.oldWidth to get old top value.
 * 
 * \@optionValue New value to be set.
 * Occurs just after the current Map's grid area rectangle is changed.
 * The grid area may change as the result of the Map being resized.
 * Function takes arguments evt and ui.
 * Use ui.map to get reference to map object.
 * Use ui.newHeight to get new height value.
 * Use ui.newLeft to get new left value.
 * Use ui.newTop to get new top value.
 * Use ui.newWidth to get new top value.
 * Use ui.oldHeight to get old height value.
 * Use ui.oldLeft to get old left value.
 * Use ui.oldTop to get old top value.
 * Use ui.oldWidth to get old top value.
 * Occurs just after the current Map's grid area rectangle is changed.
 * The grid area may change as the result of the Map being resized.
 * Function takes arguments evt and ui.
 * Use ui.map to get reference to map object.
 * Use ui.newHeight to get new height value.
 * Use ui.newLeft to get new left value.
 * Use ui.newTop to get new top value.
 * Use ui.newWidth to get new top value.
 * Use ui.oldHeight to get old height value.
 * Use ui.oldLeft to get old left value.
 * Use ui.oldTop to get old top value.
 * Use ui.oldWidth to get old top value.
 * 
 * \@optionValue New value to be set.
 * Raised when the map's processing for an update has completed.
 * Function takes arguments evt and ui.
 * Use ui.map to get reference to map object.
 * Raised when the map's processing for an update has completed.
 * Function takes arguments evt and ui.
 * Use ui.map to get reference to map object.
 * 
 * \@optionValue New value to be set.
 * Event fired when the status of an ongoing Triangulation has changed.
 * Function takes arguments evt and ui.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.currentStatus to get current status.
 * Event fired when the status of an ongoing Triangulation has changed.
 * Function takes arguments evt and ui.
 * Use ui.map to get reference to map object.
 * Use ui.series to get reference to current series object.
 * Use ui.currentStatus to get current status.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgMap} methodName_or_optionLiteral_or_options
 * @param {...!Object|number|string|!IgMap|?=} width_or_item_or_index_or_dataSource_or_targetName_or_rect_or_optionName_or_options_or_methodParams
 * @return {void|string|!Object|number|(string|number)|?|!IgMapCrosshairPoint|boolean|!IgMapBackgroundContent|!Array<!IgMapSeries>|!TooltipShowingEvent|!TooltipShownEvent|!TooltipHidingEvent|!TooltipHiddenEvent|!BrowserNotSupportedEvent|!SeriesCursorMouseMoveEvent|!SeriesMouseLeftButtonDownEvent|!SeriesMouseLeftButtonUpEvent|!SeriesMouseMoveEvent|!SeriesMouseEnterEvent|!SeriesMouseLeaveEvent|!WindowRectChangedEvent|!GridAreaRectChangedEvent|!RefreshCompletedEvent|!TriangulationStatusChangedEvent|!JQuery}
 */
JQuery.prototype.igMap = function(methodName_or_optionLiteral_or_options, width_or_item_or_index_or_dataSource_or_targetName_or_rect_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgNotifierMessages() {}
 /** @type {string} */
IgNotifierMessages.prototype.success;
 /** @type {string} */
IgNotifierMessages.prototype.info;
 /** @type {string} */
IgNotifierMessages.prototype.warning;
 /** @type {string} */
IgNotifierMessages.prototype.error;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgNotifierHeaderTemplate() {}
 /** @type {boolean} */
IgNotifierHeaderTemplate.prototype.closeButton;
 /** @type {string} */
IgNotifierHeaderTemplate.prototype.title;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgNotifier() {}
 /** @type {string} */
IgNotifier.prototype.state;
 /** @type {string} */
IgNotifier.prototype.notifyLevel;
 /** @type {(string|!Object)} */
IgNotifier.prototype.appendTo;
 /** @type {string} */
IgNotifier.prototype.mode;
 /** @type {boolean} */
IgNotifier.prototype.allowCSSOnTarget;
 /** @type {!IgNotifierMessages} */
IgNotifier.prototype.messages;
 /** @type {boolean} */
IgNotifier.prototype.showIcon;
 /** @type {(string|!Function)} */
IgNotifier.prototype.contentTemplate;
 /** @type {!IgNotifierHeaderTemplate} */
IgNotifier.prototype.headerTemplate;
 /** @type {string} */
IgNotifier.prototype.showOn;
 /** @type {boolean} */
IgNotifier.prototype.closeOnBlur;
 /** @type {number} */
IgNotifier.prototype.animationDuration;
 /** @type {number} */
IgNotifier.prototype.animationSlideDistance;
 /** @type {string} */
IgNotifier.prototype.selectors;
 /** @type {string} */
IgNotifier.prototype.direction;
 /** @type {string} */
IgNotifier.prototype.position;
 /** @type {(string|number)} */
IgNotifier.prototype.width;
 /** @type {(string|number)} */
IgNotifier.prototype.height;
 /** @type {(string|number)} */
IgNotifier.prototype.minWidth;
 /** @type {(string|number)} */
IgNotifier.prototype.maxWidth;
 /** @type {(string|number)} */
IgNotifier.prototype.maxHeight;
 /** @type {?} */
IgNotifier.prototype.containment;
 /** @type {!ShowingEvent} */
IgNotifier.prototype.showing;
 /** @type {!ShownEvent} */
IgNotifier.prototype.shown;
 /** @type {!HidingEvent} */
IgNotifier.prototype.hiding;
 /** @type {!HiddenEvent} */
IgNotifier.prototype.hidden;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgNotifierMethods() {}

/**
 * Triggers a notification with a certain state and optional message. The [notifyLevel](ui.ignotifier#options:notifyLevel) option determines if the notification will be displayed.
 * 
 * @param {!Object} state    The state to show notification for.
 * @param {string=} message    Optional message to show, overrides defaults.
 * @return {void}
 */
IgNotifierMethods.prototype.notify = function(state, message) {};

/**
 * Returns true if the notification is currently visible
 * @return {void}
 */
IgNotifierMethods.prototype.isVisible = function() {};

/**
 * Destroys the widget.
 * @return {void}
 */
IgNotifierMethods.prototype.destroy = function() {};

/**
 * Returns the ID of the element the popover is attached to
 * @return {string}
 */
IgNotifierMethods.prototype.id = function() {};

/**
 * Returns the container for the popover contents
 * @return {!Object}
 */
IgNotifierMethods.prototype.container = function() {};

/**
 * Shows the popover for the specified target
 * 
 * @param {!Element=} trg     The element to show popover for.
 * @param {string=} content     The string to set for the popover to show.
 * @return {void}
 */
IgNotifierMethods.prototype.show = function(trg, content) {};

/**
 * Hides the popover for the specified target
 * @return {void}
 */
IgNotifierMethods.prototype.hide = function() {};

/**
 * Gets the currently set content for the popover container
 * @return {string}
 */
IgNotifierMethods.prototype.getContent = function() {};

/**
 * Sets the content for the popover container
 * 
 * @param {string} newCnt     The popover content to set.
 * @return {void}
 */
IgNotifierMethods.prototype.setContent = function(newCnt) {};

/**
 * Gets the popover current target
 * @return {!Object}
 */
IgNotifierMethods.prototype.target = function() {};

/**
 * Gets the current coordinates of the popover
 * @return {!Object}
 */
IgNotifierMethods.prototype.getCoordinates = function() {};

/**
 * Sets the popover to specific coordinates.
 * 
 * @param {!Object} pos     The popover coordinates in pixels.
 * @return {void}
 */
IgNotifierMethods.prototype.setCoordinates = function(pos) {};

/**
 * @param {string} propertyName
 * @return {!IgNotifierMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Gets/Sets the current state of the igNotifier messages. State controls what CSS classes are applied to the messages and target and has interactions with other options as well.
 * 
 * /Sets the current state of the igNotifier messages. State controls what CSS classes are applied to the messages and target and has interactions with other options as well.
 * 
 * 
 * \@optionValue New value to be set.
 * Controls the level of notifications shown by automatic and manual messages using the [notify](ui.ignotifier#methods:notify) method. Use [show](ui.ignotifier#methods:show) to ignore the level.
 * 
 * Controls the level of notifications shown by automatic and manual messages using the [notify](ui.ignotifier#methods:notify) method. Use [show](ui.ignotifier#methods:show) to ignore the level.
 * 
 * 
 * \@optionValue New value to be set.
 * Controls where the popover DOM should be attached to (only applies to popovers).
 * 
 * Controls where the popover DOM should be attached to (only applies to popovers).
 * 
 * 
 * \@optionValue New value to be set.
 * Controls the positioning mode of messages. Setting a mode will override the default behavior which is auto.Note: Inline element uses a block container as is always placed after the target.
 * 
 * 
 * Controls the positioning mode of messages. Setting a mode will override the default behavior which is auto.Note: Inline element uses a block container as is always placed after the target.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Allows setting the respective state CSS on the target element (used to apply border color by default)
 * 
 * Allows setting the respective state CSS on the target element (used to apply border color by default)
 * 
 * 
 * \@optionValue New value to be set.
 * A set of default messages for each state
 * 
 * A set of default messages for each state
 * 
 * 
 * \@optionValue New value to be set.
 * Allows rendering a span with the respective state CSS to display jQuery UI framework icons
 * 
 * Allows rendering a span with the respective state CSS to display jQuery UI framework icons
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the content for the popover container. Templated with parameters by default: {0} - icon container class, {1} - the icon class and {2} - message text.
 * 
 * /Sets the content for the popover container. Templated with parameters by default: {0} - icon container class, {1} - the icon class and {2} - message text.
 * 
 * 
 * \@optionValue New value to be set.
 * The content for the popover header
 * 
 * Sets the content for the popover header
 * 
 * 
 * \@optionValue New value to be set.
 * Sets the event on which the notification will be shown. Predefined values are "mouseenter", "click" and "focus"
 * 
 * Sets the event on which the notification will be shown. Predefined values are "mouseenter", "click" and "focus"
 * 
 * 
 * \@optionValue New value to be set.
 * Controls whether the popover will close on blur or not. This option has effect only when the corresponding [showOn](ui.ignotifier#options:showOn) is set (manual by default)
 * 
 * Controls whether the popover will close on blur or not. This option has effect only when the corresponding [showOn](ui.ignotifier#options:showOn) is set (manual by default)
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the time in milliseconds the notification fades in and out when showing/hiding
 * 
 * /Sets the time in milliseconds the notification fades in and out when showing/hiding
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the distance in pixels a notification popover slides outwards as it's shown.
 * 
 * /Sets the distance in pixels a notification popover slides outwards as it's shown.
 * 
 * 
 * \@optionValue New value to be set.
 * Selectors indicating which items should show popovers.
 * Selectors indicating which items should show popovers.
 * 
 * \@optionValue New value to be set.
 * Controls the direction in which the control shows relative to the target element
 * Controls the direction in which the control shows relative to the target element
 * 
 * \@optionValue New value to be set.
 * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
 * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
 * 
 * \@optionValue New value to be set.
 * Defines width for the popover. leave null for auto.
 * Defines width for the popover. leave null for auto.
 * 
 * \@optionValue New value to be set.
 * Defines height for the popover. leave null for auto
 * Defines height for the popover. leave null for auto
 * 
 * \@optionValue New value to be set.
 * Defines width the popover won't go under the value even if no specific one is set.
 * Defines width the popover won't go under the value even if no specific one is set.
 * 
 * \@optionValue New value to be set.
 * Defines width the popover won't exceed even if no specific one is set.
 * Defines width the popover won't exceed even if no specific one is set.
 * 
 * \@optionValue New value to be set.
 * Defines height the popover won't exceed even if no specific one is set.
 * Defines height the popover won't exceed even if no specific one is set.
 * 
 * \@optionValue New value to be set.
 * The containment for the popover. Accepts a jQuery object
 * Sets the containment for the popover. Accepts a jQuery object
 * 
 * \@optionValue New value to be set.
 * Event fired before popover is shown.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover will show for.
 * Use ui.content to get or set the content to be shown as a string.
 * Use ui.popover to get the popover element showing.
 * Use ui.owner to get reference to the igPopover widget
 * Event fired before popover is shown.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover will show for.
 * Use ui.content to get or set the content to be shown as a string.
 * Use ui.popover to get the popover element showing.
 * Use ui.owner to get reference to the igPopover widget
 * 
 * \@optionValue Define event handler function.
 * Event fired after popover is shown.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover showed for.
 * Use ui.content to get the content that was shown as a string.
 * Use ui.popover to get the popover element shown.
 * Use ui.owner to get reference to the igPopover widget
 * Event fired after popover is shown.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover showed for.
 * Use ui.content to get the content that was shown as a string.
 * Use ui.popover to get the popover element shown.
 * Use ui.owner to get reference to the igPopover widget
 * 
 * \@optionValue Define event handler function.
 * Event fired before popover is hidden.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover will hide for.
 * Use ui.content to get the current content displayed in the popover as a string.
 * Use ui.popover to get the popover element hiding.
 * Use ui.owner to get reference to the igPopover widget
 * Event fired before popover is hidden.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover will hide for.
 * Use ui.content to get the current content displayed in the popover as a string.
 * Use ui.popover to get the popover element hiding.
 * Use ui.owner to get reference to the igPopover widget
 * 
 * \@optionValue Define event handler function.
 * Event fired after popover is hidden.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover is hidden for.
 * Use ui.content to get the content displayed in the popover as a string.
 * Use ui.popover to get the popover element hidden.
 * Use ui.owner to get reference to the igPopover widget
 * Event fired after popover is hidden.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover is hidden for.
 * Use ui.content to get the content displayed in the popover as a string.
 * Use ui.popover to get the popover element hidden.
 * Use ui.owner to get reference to the igPopover widget
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgNotifier} methodName_or_optionLiteral_or_options
 * @param {...!Object|!Element|string|!IgNotifier|?=} state_or_trg_or_newCnt_or_pos_or_optionName_or_options_or_methodParams
 * @return {void|string|!Object|(string|!Object)|boolean|!IgNotifierMessages|(string|!Function)|!IgNotifierHeaderTemplate|number|(string|number)|?|!ShowingEvent|!ShownEvent|!HidingEvent|!HiddenEvent|!JQuery}
 */
JQuery.prototype.igNotifier = function(methodName_or_optionLiteral_or_options, state_or_trg_or_newCnt_or_pos_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgPivotDataSelectorDataSourceOptionsXmlaOptionsRequestOptions() {}
 /** @type {boolean} */
IgPivotDataSelectorDataSourceOptionsXmlaOptionsRequestOptions.prototype.withCredentials;
 /** @type {!Function} */
IgPivotDataSelectorDataSourceOptionsXmlaOptionsRequestOptions.prototype.beforeSend;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotDataSelectorDataSourceOptionsXmlaOptionsMdxSettings() {}
 /** @type {boolean} */
IgPivotDataSelectorDataSourceOptionsXmlaOptionsMdxSettings.prototype.nonEmptyOnRows;
 /** @type {boolean} */
IgPivotDataSelectorDataSourceOptionsXmlaOptionsMdxSettings.prototype.nonEmptyOnColumns;
 /** @type {boolean} */
IgPivotDataSelectorDataSourceOptionsXmlaOptionsMdxSettings.prototype.addCalculatedMembersOnRows;
 /** @type {boolean} */
IgPivotDataSelectorDataSourceOptionsXmlaOptionsMdxSettings.prototype.addCalculatedMembersOnColumns;
 /** @type {!Array<?>} */
IgPivotDataSelectorDataSourceOptionsXmlaOptionsMdxSettings.prototype.dimensionPropertiesOnRows;
 /** @type {!Array<?>} */
IgPivotDataSelectorDataSourceOptionsXmlaOptionsMdxSettings.prototype.dimensionPropertiesOnColumns;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotDataSelectorDataSourceOptionsXmlaOptions() {}
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsXmlaOptions.prototype.serverUrl;
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsXmlaOptions.prototype.catalog;
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsXmlaOptions.prototype.cube;
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsXmlaOptions.prototype.measureGroup;
 /** @type {!IgPivotDataSelectorDataSourceOptionsXmlaOptionsRequestOptions} */
IgPivotDataSelectorDataSourceOptionsXmlaOptions.prototype.requestOptions;
 /** @type {boolean} */
IgPivotDataSelectorDataSourceOptionsXmlaOptions.prototype.enableResultCache;
 /** @type {?} */
IgPivotDataSelectorDataSourceOptionsXmlaOptions.prototype.discoverProperties;
 /** @type {?} */
IgPivotDataSelectorDataSourceOptionsXmlaOptions.prototype.executeProperties;
 /** @type {!IgPivotDataSelectorDataSourceOptionsXmlaOptionsMdxSettings} */
IgPivotDataSelectorDataSourceOptionsXmlaOptions.prototype.mdxSettings;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure() {}
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure.prototype.name;
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure.prototype.caption;
 /** @type {!Function} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure.prototype.aggregator;
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure.prototype.displayFolder;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension() {}
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension.prototype.name;
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension.prototype.caption;
 /** @type {!Array<!IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure>} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension.prototype.measures;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel() {}
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel.prototype.name;
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel.prototype.caption;
 /** @type {!Function} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel.prototype.memberProvider;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie() {}
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie.prototype.name;
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie.prototype.caption;
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie.prototype.displayFolder;
 /** @type {!Array<!IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel>} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie.prototype.levels;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimension() {}
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimension.prototype.name;
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimension.prototype.caption;
 /** @type {!Array<!IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie>} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimension.prototype.hierarchies;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCube() {}
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCube.prototype.name;
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCube.prototype.caption;
 /** @type {!IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCube.prototype.measuresDimension;
 /** @type {!Array<!IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimension>} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCube.prototype.dimensions;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadata() {}
 /** @type {!IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCube} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadata.prototype.cube;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotDataSelectorDataSourceOptionsFlatDataOptions() {}
 /** @type {?} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptions.prototype.dataSource;
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptions.prototype.dataSourceUrl;
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptions.prototype.dataSourceType;
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptions.prototype.responseDataKey;
 /** @type {string} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptions.prototype.responseDataType;
 /** @type {!IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadata} */
IgPivotDataSelectorDataSourceOptionsFlatDataOptions.prototype.metadata;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotDataSelectorDataSourceOptions() {}
 /** @type {!IgPivotDataSelectorDataSourceOptionsXmlaOptions} */
IgPivotDataSelectorDataSourceOptions.prototype.xmlaOptions;
 /** @type {!IgPivotDataSelectorDataSourceOptionsFlatDataOptions} */
IgPivotDataSelectorDataSourceOptions.prototype.flatDataOptions;
 /** @type {string} */
IgPivotDataSelectorDataSourceOptions.prototype.measures;
 /** @type {string} */
IgPivotDataSelectorDataSourceOptions.prototype.filters;
 /** @type {string} */
IgPivotDataSelectorDataSourceOptions.prototype.rows;
 /** @type {string} */
IgPivotDataSelectorDataSourceOptions.prototype.columns;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotDataSelectorDragAndDropSettings() {}
 /** @type {?} */
IgPivotDataSelectorDragAndDropSettings.prototype.appendTo;
 /** @type {(string|boolean|!Array<?>)} */
IgPivotDataSelectorDragAndDropSettings.prototype.containment;
 /** @type {number} */
IgPivotDataSelectorDragAndDropSettings.prototype.zIndex;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function DataSelectorRenderedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DataSelectorRenderedEventUIParam() {}
 /** @type {?} */
DataSelectorRenderedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function DataSourceInitializedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DataSourceInitializedEventUIParam() {}
 /** @type {?} */
DataSourceInitializedEventUIParam.prototype.owner;
 /** @type {?} */
DataSourceInitializedEventUIParam.prototype.dataSource;
 /** @type {?} */
DataSourceInitializedEventUIParam.prototype.error;
 /** @type {?} */
DataSourceInitializedEventUIParam.prototype.metadataTreeRoot;
/**
 * @record
 * @struct
 */
function DataSourceUpdatedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DataSourceUpdatedEventUIParam() {}
 /** @type {?} */
DataSourceUpdatedEventUIParam.prototype.owner;
 /** @type {?} */
DataSourceUpdatedEventUIParam.prototype.dataSource;
 /** @type {?} */
DataSourceUpdatedEventUIParam.prototype.error;
 /** @type {?} */
DataSourceUpdatedEventUIParam.prototype.result;
/**
 * @record
 * @struct
 */
function DeferUpdateChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DeferUpdateChangedEventUIParam() {}
 /** @type {?} */
DeferUpdateChangedEventUIParam.prototype.owner;
 /** @type {?} */
DeferUpdateChangedEventUIParam.prototype.deferUpdate;
/**
 * @record
 * @struct
 */
function DragStartEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DragStartEventUIParam() {}
 /** @type {?} */
DragStartEventUIParam.prototype.metadata;
 /** @type {?} */
DragStartEventUIParam.prototype.helper;
 /** @type {?} */
DragStartEventUIParam.prototype.offset;
 /** @type {?} */
DragStartEventUIParam.prototype.originalPosition;
 /** @type {?} */
DragStartEventUIParam.prototype.position;

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DragEventUIParam() {}
 /** @type {?} */
DragEventUIParam.prototype.metadata;
 /** @type {?} */
DragEventUIParam.prototype.helper;
 /** @type {?} */
DragEventUIParam.prototype.offset;
 /** @type {?} */
DragEventUIParam.prototype.originalPosition;
 /** @type {?} */
DragEventUIParam.prototype.position;
/**
 * @record
 * @struct
 */
function DragStopEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DragStopEventUIParam() {}
 /** @type {?} */
DragStopEventUIParam.prototype.helper;
 /** @type {?} */
DragStopEventUIParam.prototype.offset;
 /** @type {?} */
DragStopEventUIParam.prototype.originalPosition;
 /** @type {?} */
DragStopEventUIParam.prototype.position;
/**
 * @record
 * @struct
 */
function MetadataDroppingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function MetadataDroppingEventUIParam() {}
 /** @type {?} */
MetadataDroppingEventUIParam.prototype.targetElement;
 /** @type {?} */
MetadataDroppingEventUIParam.prototype.draggedElement;
 /** @type {?} */
MetadataDroppingEventUIParam.prototype.metadata;
 /** @type {?} */
MetadataDroppingEventUIParam.prototype.metadataIndex;
 /** @type {?} */
MetadataDroppingEventUIParam.prototype.helper;
 /** @type {?} */
MetadataDroppingEventUIParam.prototype.offset;
 /** @type {?} */
MetadataDroppingEventUIParam.prototype.position;
/**
 * @record
 * @struct
 */
function MetadataDroppedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function MetadataDroppedEventUIParam() {}
 /** @type {?} */
MetadataDroppedEventUIParam.prototype.targetElement;
 /** @type {?} */
MetadataDroppedEventUIParam.prototype.draggedElement;
 /** @type {?} */
MetadataDroppedEventUIParam.prototype.metadata;
 /** @type {?} */
MetadataDroppedEventUIParam.prototype.metadataIndex;
 /** @type {?} */
MetadataDroppedEventUIParam.prototype.helper;
 /** @type {?} */
MetadataDroppedEventUIParam.prototype.offset;
 /** @type {?} */
MetadataDroppedEventUIParam.prototype.position;
/**
 * @record
 * @struct
 */
function MetadataRemovingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function MetadataRemovingEventUIParam() {}
 /** @type {?} */
MetadataRemovingEventUIParam.prototype.targetElement;
 /** @type {?} */
MetadataRemovingEventUIParam.prototype.metadata;
/**
 * @record
 * @struct
 */
function MetadataRemovedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function MetadataRemovedEventUIParam() {}
 /** @type {?} */
MetadataRemovedEventUIParam.prototype.metadata;
/**
 * @record
 * @struct
 */
function FilterDropDownOpeningEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FilterDropDownOpeningEventUIParam() {}
 /** @type {?} */
FilterDropDownOpeningEventUIParam.prototype.hierarchy;
/**
 * @record
 * @struct
 */
function FilterDropDownOpenedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FilterDropDownOpenedEventUIParam() {}
 /** @type {?} */
FilterDropDownOpenedEventUIParam.prototype.hierarchy;
 /** @type {?} */
FilterDropDownOpenedEventUIParam.prototype.dropDownElement;
/**
 * @record
 * @struct
 */
function FilterMembersLoadedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FilterMembersLoadedEventUIParam() {}
 /** @type {?} */
FilterMembersLoadedEventUIParam.prototype.parent;
 /** @type {?} */
FilterMembersLoadedEventUIParam.prototype.rootFilterMembers;
 /** @type {?} */
FilterMembersLoadedEventUIParam.prototype.filterMembers;
/**
 * @record
 * @struct
 */
function FilterDropDownOkEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FilterDropDownOkEventUIParam() {}
 /** @type {?} */
FilterDropDownOkEventUIParam.prototype.hierarchy;
 /** @type {?} */
FilterDropDownOkEventUIParam.prototype.filterMembers;
 /** @type {?} */
FilterDropDownOkEventUIParam.prototype.dropDownElement;
/**
 * @record
 * @struct
 */
function FilterDropDownClosingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FilterDropDownClosingEventUIParam() {}
 /** @type {?} */
FilterDropDownClosingEventUIParam.prototype.hierarchy;
 /** @type {?} */
FilterDropDownClosingEventUIParam.prototype.dropDownElement;
/**
 * @record
 * @struct
 */
function FilterDropDownClosedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FilterDropDownClosedEventUIParam() {}
 /** @type {?} */
FilterDropDownClosedEventUIParam.prototype.hierarchy;
/**
 * @record
 * @struct
 */
function IgPivotDataSelector() {}
 /** @type {(string|number)} */
IgPivotDataSelector.prototype.width;
 /** @type {(string|number)} */
IgPivotDataSelector.prototype.height;
 /** @type {?} */
IgPivotDataSelector.prototype.dataSource;
 /** @type {!IgPivotDataSelectorDataSourceOptions} */
IgPivotDataSelector.prototype.dataSourceOptions;
 /** @type {boolean} */
IgPivotDataSelector.prototype.deferUpdate;
 /** @type {!IgPivotDataSelectorDragAndDropSettings} */
IgPivotDataSelector.prototype.dragAndDropSettings;
 /** @type {?} */
IgPivotDataSelector.prototype.dropDownParent;
 /** @type {boolean} */
IgPivotDataSelector.prototype.disableRowsDropArea;
 /** @type {boolean} */
IgPivotDataSelector.prototype.disableColumnsDropArea;
 /** @type {boolean} */
IgPivotDataSelector.prototype.disableMeasuresDropArea;
 /** @type {boolean} */
IgPivotDataSelector.prototype.disableFiltersDropArea;
 /** @type {!Function} */
IgPivotDataSelector.prototype.customMoveValidation;
 /** @type {!DataSelectorRenderedEvent} */
IgPivotDataSelector.prototype.dataSelectorRendered;
 /** @type {!DataSourceInitializedEvent} */
IgPivotDataSelector.prototype.dataSourceInitialized;
 /** @type {!DataSourceUpdatedEvent} */
IgPivotDataSelector.prototype.dataSourceUpdated;
 /** @type {!DeferUpdateChangedEvent} */
IgPivotDataSelector.prototype.deferUpdateChanged;
 /** @type {!DragStartEvent} */
IgPivotDataSelector.prototype.dragStart;
 /** @type {!DragEvent} */
IgPivotDataSelector.prototype.drag;
 /** @type {!DragStopEvent} */
IgPivotDataSelector.prototype.dragStop;
 /** @type {!MetadataDroppingEvent} */
IgPivotDataSelector.prototype.metadataDropping;
 /** @type {!MetadataDroppedEvent} */
IgPivotDataSelector.prototype.metadataDropped;
 /** @type {!MetadataRemovingEvent} */
IgPivotDataSelector.prototype.metadataRemoving;
 /** @type {!MetadataRemovedEvent} */
IgPivotDataSelector.prototype.metadataRemoved;
 /** @type {!FilterDropDownOpeningEvent} */
IgPivotDataSelector.prototype.filterDropDownOpening;
 /** @type {!FilterDropDownOpenedEvent} */
IgPivotDataSelector.prototype.filterDropDownOpened;
 /** @type {!FilterMembersLoadedEvent} */
IgPivotDataSelector.prototype.filterMembersLoaded;
 /** @type {!FilterDropDownOkEvent} */
IgPivotDataSelector.prototype.filterDropDownOk;
 /** @type {!FilterDropDownClosingEvent} */
IgPivotDataSelector.prototype.filterDropDownClosing;
 /** @type {!FilterDropDownClosedEvent} */
IgPivotDataSelector.prototype.filterDropDownClosed;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotDataSelectorMethods() {}

/**
 * Updates the data source.
 * @return {void}
 */
IgPivotDataSelectorMethods.prototype.update = function() {};

/**
 * Destroy is part of the jQuery UI widget API and does the following:
 *                 1. Remove custom CSS classes that were added.
 *                 2. Unwrap any wrapping elements such as scrolling divs and other containers.
 *                 3. Unbind all events that were bound.
 * @return {void}
 */
IgPivotDataSelectorMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgPivotDataSelectorMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 *
 *
 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row -  (if any), etc.
 * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row -  (if any), etc.
 * 
 * \@optionValue New value to be set.
 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
 * 
 * \@optionValue New value to be set.
 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
 *                 The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
 *                 The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
 * 
 * \@optionValue New value to be set.
 * Setting deferUpdate to true will not apply changes to the data source until the update method is called or the update layout button is clicked.
 * Setting deferUpdate to true will not apply changes to the data source until the update method is called or the update layout button is clicked.
 * 
 * \@optionValue New value to be set.
 * Settings for the drag and drop functionality of the igPivotDataSelector.
 * Settings for the drag and drop functionality of the igPivotDataSelector.
 * 
 * \@optionValue New value to be set.
 * Gets the parent for the drop downs.
 * Sets the parent for the drop downs.
 * 
 * \@optionValue New value to be set.
 * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
 * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
 * 
 * \@optionValue New value to be set.
 * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
 * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
 * 
 * \@optionValue New value to be set.
 * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
 * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
 * 
 * \@optionValue New value to be set.
 * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
 * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
 * 
 * \@optionValue New value to be set.
 * A function that will be called to determine if an item can be moved in or dropped on an area of the data selector.
 *                 paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
 *                 paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
 *                 paramType="string" The unique name of the item.
 *                 returnType="bool"  The function must return true if the item should be accepted.
 * A function that will be called to determine if an item can be moved in or dropped on an area of the data selector.
 *                 paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
 *                 paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
 *                 paramType="string" The unique name of the item.
 *                 returnType="bool"  The function must return true if the item should be accepted.
 * 
 * \@optionValue New value to be set.
 * Fired after the data selector is rendered. Changing the data source instance will re-render the data selector.
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the data selector.
 * Fired after the data selector is rendered. Changing the data source instance will re-render the data selector.
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the data selector.
 * 
 * \@optionValue New value to be set.
 * Fired after the data source has initialized.
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the data selector.
 *                 Use ui.dataSource to get a reference to the data source.
 *                 Use ui.error to see if an error has occured during initialization.
 *                 Use ui.metadataTreeRoot to get a reference to the root of the data source metatadata root item.
 * Fired after the data source has initialized.
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the data selector.
 *                 Use ui.dataSource to get a reference to the data source.
 *                 Use ui.error to see if an error has occured during initialization.
 *                 Use ui.metadataTreeRoot to get a reference to the root of the data source metatadata root item.
 * 
 * \@optionValue New value to be set.
 * Fired after the data source has updated.
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the data selector.
 *                 Use ui.dataSource to get a reference to the data source.
 *                 Use ui.error to see if an error has occured during update.
 *                 Use ui.result to get the result of the update operation.
 * Fired after the data source has updated.
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the data selector.
 *                 Use ui.dataSource to get a reference to the data source.
 *                 Use ui.error to see if an error has occured during update.
 *                 Use ui.result to get the result of the update operation.
 * 
 * \@optionValue New value to be set.
 * Fired when the defer update checkbox changes.
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the data selector.
 *                 Use ui.deferUpdate to get the defer update value.
 * Fired when the defer update checkbox changes.
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the data selector.
 *                 Use ui.deferUpdate to get the defer update value.
 * 
 * \@optionValue New value to be set.
 * Fired on drag start. Return false to cancel the drag.
 * Use ui.metadatato get a reference to the data.
 * Use ui.helper to get a reference to the helper.
 * Use ui.offset to get a reference to the offset.
 * Use ui.originalPosition to get a reference to the original position of the draggable element.
 * Use ui.position to get a reference to the current position of the draggable element.
 * Fired on drag start. Return false to cancel the drag.
 * Use ui.metadatato get a reference to the data.
 * Use ui.helper to get a reference to the helper.
 * Use ui.offset to get a reference to the offset.
 * Use ui.originalPosition to get a reference to the original position of the draggable element.
 * Use ui.position to get a reference to the current position of the draggable element.
 * 
 * \@optionValue New value to be set.
 * Fired on drag. Return false to cancel the dragging.
 * Use ui.metadatato get a reference to the data.
 * Use ui.helper to get a reference to the helper.
 * Use ui.offset to get a reference to the offset.
 * Use ui.originalPosition to get a reference to the original position of the draggable element.
 * Use ui.position to get a reference to the current position of the draggable element.
 * Fired on drag. Return false to cancel the dragging.
 * Use ui.metadatato get a reference to the data.
 * Use ui.helper to get a reference to the helper.
 * Use ui.offset to get a reference to the offset.
 * Use ui.originalPosition to get a reference to the original position of the draggable element.
 * Use ui.position to get a reference to the current position of the draggable element.
 * 
 * \@optionValue New value to be set.
 * Fired on drag stop.
 * Use ui.helper to get a reference to the helper.
 * Use ui.offset to get a reference to the offset.
 * Use ui.originalPosition to get a reference to the original position of the draggable element.
 * Use ui.position to get a reference to the current position of the draggable element.
 * Fired on drag stop.
 * Use ui.helper to get a reference to the helper.
 * Use ui.offset to get a reference to the offset.
 * Use ui.originalPosition to get a reference to the original position of the draggable element.
 * Use ui.position to get a reference to the current position of the draggable element.
 * 
 * \@optionValue New value to be set.
 * Fired before a metadata item drop. Return false to cancel the drop.
 *                 Use ui.targetElement for a reference to the drop target.
 *                 Use ui.draggedElement for a reference to the dragged element.
 * Use ui.metadatato get a reference to the data.
 *                 Use ui.metadataIndex to get the index at which the metadata will be inserted.
 * Use ui.helper to get a reference to the helper.
 * Use ui.offset to get a reference to the offset.
 * Use ui.position to get a reference to the current position of the draggable element.
 * Fired before a metadata item drop. Return false to cancel the drop.
 *                 Use ui.targetElement for a reference to the drop target.
 *                 Use ui.draggedElement for a reference to the dragged element.
 * Use ui.metadatato get a reference to the data.
 *                 Use ui.metadataIndex to get the index at which the metadata will be inserted.
 * Use ui.helper to get a reference to the helper.
 * Use ui.offset to get a reference to the offset.
 * Use ui.position to get a reference to the current position of the draggable element.
 * 
 * \@optionValue New value to be set.
 * Fired after a metadata item drop.
 *                 Use ui.targetElement for a reference to the drop target.
 *                 Use ui.draggedElement for a reference to the dragged element.
 * Use ui.metadatato get a reference to the data.
 *                 Use ui.metadataIndex to get the index at which the metadata is inserted.
 * Use ui.helper to get a reference to the helper.
 * Use ui.offset to get a reference to the offset.
 * Use ui.position to get a reference to the current position of the draggable element.
 * Fired after a metadata item drop.
 *                 Use ui.targetElement for a reference to the drop target.
 *                 Use ui.draggedElement for a reference to the dragged element.
 * Use ui.metadatato get a reference to the data.
 *                 Use ui.metadataIndex to get the index at which the metadata is inserted.
 * Use ui.helper to get a reference to the helper.
 * Use ui.offset to get a reference to the offset.
 * Use ui.position to get a reference to the current position of the draggable element.
 * 
 * \@optionValue New value to be set.
 * Fired before a metadata item is removed when the user clicks the close icon. Return false to cancel the removing.
 *                 Use ui.targetElement for a reference to the dragged element.
 *                 Use ui.metadatato get a reference to the data.
 * Fired before a metadata item is removed when the user clicks the close icon. Return false to cancel the removing.
 *                 Use ui.targetElement for a reference to the dragged element.
 *                 Use ui.metadatato get a reference to the data.
 * 
 * \@optionValue New value to be set.
 * Fired after a metadata item is removed when the user clicks the close icon.
 *                 Use ui.metadatato get a reference to the data.
 * Fired after a metadata item is removed when the user clicks the close icon.
 *                 Use ui.metadatato get a reference to the data.
 * 
 * \@optionValue New value to be set.
 * Fired before the filter members drop down opens. Return false to cancel the opening.
 *                 Use ui.hierarchy for a reference to the hierarchy.
 * Fired before the filter members drop down opens. Return false to cancel the opening.
 *                 Use ui.hierarchy for a reference to the hierarchy.
 * 
 * \@optionValue New value to be set.
 * Fired after the filter members drop down opens.
 *                 Use ui.hierarchy for a reference to the hierarchy.
 *                 Use ui.dropDownElement for a reference to the drop down.
 * Fired after the filter members drop down opens.
 *                 Use ui.hierarchy for a reference to the hierarchy.
 *                 Use ui.dropDownElement for a reference to the drop down.
 * 
 * \@optionValue New value to be set.
 * Fired after the filter members are loaded.
 *                 Use ui.parent to get the parent node or the igTree instance in the initial load.
 *                 Use ui.rootFilterMembers for a collection with the root filter members .
 *                 Use ui.filterMembers for a collection with the newly loaded filter members.
 * Fired after the filter members are loaded.
 *                 Use ui.parent to get the parent node or the igTree instance in the initial load.
 *                 Use ui.rootFilterMembers for a collection with the root filter members .
 *                 Use ui.filterMembers for a collection with the newly loaded filter members.
 * 
 * \@optionValue New value to be set.
 * Fired after the OK button in the filter members drop down is clicked. Return false to cancel the applying of the filters.
 *                 Use ui.hierarchy for a reference to the hierarchy.
 *                 Use ui.filterMembers for a collection with the selected filter members. If all filter members are selected the collection will be empty.
 *                 Use ui.dropDownElement for a reference to the drop down.
 * Fired after the OK button in the filter members drop down is clicked. Return false to cancel the applying of the filters.
 *                 Use ui.hierarchy for a reference to the hierarchy.
 *                 Use ui.filterMembers for a collection with the selected filter members. If all filter members are selected the collection will be empty.
 *                 Use ui.dropDownElement for a reference to the drop down.
 * 
 * \@optionValue New value to be set.
 * Fired before the filter members drop down closes. Return false to cancel the closing.
 *                 Use ui.hierarchy for a reference to the hierarchy.
 *                 Use ui.dropDownElement for a reference to the drop down.
 * Fired before the filter members drop down closes. Return false to cancel the closing.
 *                 Use ui.hierarchy for a reference to the hierarchy.
 *                 Use ui.dropDownElement for a reference to the drop down.
 * 
 * \@optionValue New value to be set.
 * Fired after the filter members drop down closes.
 *                 Use ui.hierarchy for a reference to the hierarchy.
 * Fired after the filter members drop down closes.
 *                 Use ui.hierarchy for a reference to the hierarchy.
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgPivotDataSelector} methodName_or_optionLiteral_or_options
 * @param {...string|!IgPivotDataSelector|?} optionName_or_options_or_methodParams
 * @return {void|(string|number)|?|!IgPivotDataSelectorDataSourceOptions|boolean|!IgPivotDataSelectorDragAndDropSettings|!Function|!DataSelectorRenderedEvent|!DataSourceInitializedEvent|!DataSourceUpdatedEvent|!DeferUpdateChangedEvent|!DragStartEvent|!DragEvent|!DragStopEvent|!MetadataDroppingEvent|!MetadataDroppedEvent|!MetadataRemovingEvent|!MetadataRemovedEvent|!FilterDropDownOpeningEvent|!FilterDropDownOpenedEvent|!FilterMembersLoadedEvent|!FilterDropDownOkEvent|!FilterDropDownClosingEvent|!FilterDropDownClosedEvent|!JQuery}
 */
JQuery.prototype.igPivotDataSelector = function(methodName_or_optionLiteral_or_options, optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgPivotGridDataSourceOptionsXmlaOptionsRequestOptions() {}
 /** @type {boolean} */
IgPivotGridDataSourceOptionsXmlaOptionsRequestOptions.prototype.withCredentials;
 /** @type {!Function} */
IgPivotGridDataSourceOptionsXmlaOptionsRequestOptions.prototype.beforeSend;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotGridDataSourceOptionsXmlaOptionsMdxSettings() {}
 /** @type {boolean} */
IgPivotGridDataSourceOptionsXmlaOptionsMdxSettings.prototype.nonEmptyOnRows;
 /** @type {boolean} */
IgPivotGridDataSourceOptionsXmlaOptionsMdxSettings.prototype.nonEmptyOnColumns;
 /** @type {boolean} */
IgPivotGridDataSourceOptionsXmlaOptionsMdxSettings.prototype.addCalculatedMembersOnRows;
 /** @type {boolean} */
IgPivotGridDataSourceOptionsXmlaOptionsMdxSettings.prototype.addCalculatedMembersOnColumns;
 /** @type {!Array<?>} */
IgPivotGridDataSourceOptionsXmlaOptionsMdxSettings.prototype.dimensionPropertiesOnRows;
 /** @type {!Array<?>} */
IgPivotGridDataSourceOptionsXmlaOptionsMdxSettings.prototype.dimensionPropertiesOnColumns;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotGridDataSourceOptionsXmlaOptions() {}
 /** @type {string} */
IgPivotGridDataSourceOptionsXmlaOptions.prototype.serverUrl;
 /** @type {string} */
IgPivotGridDataSourceOptionsXmlaOptions.prototype.catalog;
 /** @type {string} */
IgPivotGridDataSourceOptionsXmlaOptions.prototype.cube;
 /** @type {string} */
IgPivotGridDataSourceOptionsXmlaOptions.prototype.measureGroup;
 /** @type {!IgPivotGridDataSourceOptionsXmlaOptionsRequestOptions} */
IgPivotGridDataSourceOptionsXmlaOptions.prototype.requestOptions;
 /** @type {boolean} */
IgPivotGridDataSourceOptionsXmlaOptions.prototype.enableResultCache;
 /** @type {?} */
IgPivotGridDataSourceOptionsXmlaOptions.prototype.discoverProperties;
 /** @type {?} */
IgPivotGridDataSourceOptionsXmlaOptions.prototype.executeProperties;
 /** @type {!IgPivotGridDataSourceOptionsXmlaOptionsMdxSettings} */
IgPivotGridDataSourceOptionsXmlaOptions.prototype.mdxSettings;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure() {}
 /** @type {string} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure.prototype.name;
 /** @type {string} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure.prototype.caption;
 /** @type {!Function} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure.prototype.aggregator;
 /** @type {string} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure.prototype.displayFolder;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension() {}
 /** @type {string} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension.prototype.name;
 /** @type {string} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension.prototype.caption;
 /** @type {!Array<!IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure>} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension.prototype.measures;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel() {}
 /** @type {string} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel.prototype.name;
 /** @type {string} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel.prototype.caption;
 /** @type {!Function} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel.prototype.memberProvider;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie() {}
 /** @type {string} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie.prototype.name;
 /** @type {string} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie.prototype.caption;
 /** @type {string} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie.prototype.displayFolder;
 /** @type {!Array<!IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel>} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie.prototype.levels;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimension() {}
 /** @type {string} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimension.prototype.name;
 /** @type {string} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimension.prototype.caption;
 /** @type {!Array<!IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie>} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimension.prototype.hierarchies;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCube() {}
 /** @type {string} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCube.prototype.name;
 /** @type {string} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCube.prototype.caption;
 /** @type {!IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCube.prototype.measuresDimension;
 /** @type {!Array<!IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimension>} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCube.prototype.dimensions;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotGridDataSourceOptionsFlatDataOptionsMetadata() {}
 /** @type {!IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCube} */
IgPivotGridDataSourceOptionsFlatDataOptionsMetadata.prototype.cube;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotGridDataSourceOptionsFlatDataOptions() {}
 /** @type {?} */
IgPivotGridDataSourceOptionsFlatDataOptions.prototype.dataSource;
 /** @type {string} */
IgPivotGridDataSourceOptionsFlatDataOptions.prototype.dataSourceUrl;
 /** @type {string} */
IgPivotGridDataSourceOptionsFlatDataOptions.prototype.dataSourceType;
 /** @type {string} */
IgPivotGridDataSourceOptionsFlatDataOptions.prototype.responseDataKey;
 /** @type {string} */
IgPivotGridDataSourceOptionsFlatDataOptions.prototype.responseDataType;
 /** @type {!IgPivotGridDataSourceOptionsFlatDataOptionsMetadata} */
IgPivotGridDataSourceOptionsFlatDataOptions.prototype.metadata;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotGridDataSourceOptions() {}
 /** @type {!IgPivotGridDataSourceOptionsXmlaOptions} */
IgPivotGridDataSourceOptions.prototype.xmlaOptions;
 /** @type {!IgPivotGridDataSourceOptionsFlatDataOptions} */
IgPivotGridDataSourceOptions.prototype.flatDataOptions;
 /** @type {string} */
IgPivotGridDataSourceOptions.prototype.measures;
 /** @type {string} */
IgPivotGridDataSourceOptions.prototype.filters;
 /** @type {string} */
IgPivotGridDataSourceOptions.prototype.rows;
 /** @type {string} */
IgPivotGridDataSourceOptions.prototype.columns;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotGridLevelSortDirection() {}
 /** @type {string} */
IgPivotGridLevelSortDirection.prototype.levelUniqueName;
 /** @type {?} */
IgPivotGridLevelSortDirection.prototype.sortDirection;
 /** @type {string} */
IgPivotGridLevelSortDirection.prototype.sortBehavior;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotGridGridOptionsFeatures() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotGridGridOptions() {}
 /** @type {(string|number)} */
IgPivotGridGridOptions.prototype.defaultColumnWidth;
 /** @type {boolean} */
IgPivotGridGridOptions.prototype.fixedHeaders;
 /** @type {string} */
IgPivotGridGridOptions.prototype.caption;
 /** @type {!IgPivotGridGridOptionsFeatures} */
IgPivotGridGridOptions.prototype.features;
 /** @type {number} */
IgPivotGridGridOptions.prototype.tabIndex;
 /** @type {boolean} */
IgPivotGridGridOptions.prototype.alternateRowStyles;
 /** @type {boolean} */
IgPivotGridGridOptions.prototype.enableHoverStyles;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotGridDragAndDropSettings() {}
 /** @type {?} */
IgPivotGridDragAndDropSettings.prototype.appendTo;
 /** @type {(string|boolean|!Array<?>)} */
IgPivotGridDragAndDropSettings.prototype.containment;
 /** @type {number} */
IgPivotGridDragAndDropSettings.prototype.zIndex;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function PivotGridHeadersRenderedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function PivotGridHeadersRenderedEventUIParam() {}
 /** @type {?} */
PivotGridHeadersRenderedEventUIParam.prototype.owner;
 /** @type {?} */
PivotGridHeadersRenderedEventUIParam.prototype.grid;
 /** @type {?} */
PivotGridHeadersRenderedEventUIParam.prototype.table;
/**
 * @record
 * @struct
 */
function PivotGridRenderedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function PivotGridRenderedEventUIParam() {}
 /** @type {?} */
PivotGridRenderedEventUIParam.prototype.owner;
 /** @type {?} */
PivotGridRenderedEventUIParam.prototype.grid;
/**
 * @record
 * @struct
 */
function TupleMemberExpandingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function TupleMemberExpandingEventUIParam() {}
 /** @type {?} */
TupleMemberExpandingEventUIParam.prototype.owner;
 /** @type {?} */
TupleMemberExpandingEventUIParam.prototype.dataSource;
 /** @type {?} */
TupleMemberExpandingEventUIParam.prototype.axisName;
 /** @type {?} */
TupleMemberExpandingEventUIParam.prototype.tupleIndex;
 /** @type {?} */
TupleMemberExpandingEventUIParam.prototype.memberIndex;
/**
 * @record
 * @struct
 */
function TupleMemberExpandedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function TupleMemberExpandedEventUIParam() {}
 /** @type {?} */
TupleMemberExpandedEventUIParam.prototype.owner;
 /** @type {?} */
TupleMemberExpandedEventUIParam.prototype.dataSource;
 /** @type {?} */
TupleMemberExpandedEventUIParam.prototype.axisName;
 /** @type {?} */
TupleMemberExpandedEventUIParam.prototype.tupleIndex;
 /** @type {?} */
TupleMemberExpandedEventUIParam.prototype.memberIndex;
/**
 * @record
 * @struct
 */
function TupleMemberCollapsingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function TupleMemberCollapsingEventUIParam() {}
 /** @type {?} */
TupleMemberCollapsingEventUIParam.prototype.owner;
 /** @type {?} */
TupleMemberCollapsingEventUIParam.prototype.dataSource;
 /** @type {?} */
TupleMemberCollapsingEventUIParam.prototype.axisName;
 /** @type {?} */
TupleMemberCollapsingEventUIParam.prototype.tupleIndex;
 /** @type {?} */
TupleMemberCollapsingEventUIParam.prototype.memberIndex;
/**
 * @record
 * @struct
 */
function TupleMemberCollapsedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function TupleMemberCollapsedEventUIParam() {}
 /** @type {?} */
TupleMemberCollapsedEventUIParam.prototype.owner;
 /** @type {?} */
TupleMemberCollapsedEventUIParam.prototype.dataSource;
 /** @type {?} */
TupleMemberCollapsedEventUIParam.prototype.axisName;
 /** @type {?} */
TupleMemberCollapsedEventUIParam.prototype.tupleIndex;
 /** @type {?} */
TupleMemberCollapsedEventUIParam.prototype.memberIndex;
/**
 * @record
 * @struct
 */
function SortingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SortingEventUIParam() {}
 /** @type {?} */
SortingEventUIParam.prototype.owner;
 /** @type {?} */
SortingEventUIParam.prototype.sortDirections;
/**
 * @record
 * @struct
 */
function SortedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SortedEventUIParam() {}
 /** @type {?} */
SortedEventUIParam.prototype.owner;
 /** @type {?} */
SortedEventUIParam.prototype.sortDirections;
 /** @type {?} */
SortedEventUIParam.prototype.appliedSortDirections;
/**
 * @record
 * @struct
 */
function HeadersSortingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function HeadersSortingEventUIParam() {}
 /** @type {?} */
HeadersSortingEventUIParam.prototype.owner;
 /** @type {?} */
HeadersSortingEventUIParam.prototype.levelSortDirections;
/**
 * @record
 * @struct
 */
function HeadersSortedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function HeadersSortedEventUIParam() {}
 /** @type {?} */
HeadersSortedEventUIParam.prototype.owner;
 /** @type {?} */
HeadersSortedEventUIParam.prototype.levelSortDirections;
 /** @type {?} */
HeadersSortedEventUIParam.prototype.appliedLevelSortDirections;
/**
 * @record
 * @struct
 */
function IgPivotGrid() {}
 /** @type {(string|number)} */
IgPivotGrid.prototype.width;
 /** @type {(string|number)} */
IgPivotGrid.prototype.height;
 /** @type {?} */
IgPivotGrid.prototype.dataSource;
 /** @type {!IgPivotGridDataSourceOptions} */
IgPivotGrid.prototype.dataSourceOptions;
 /** @type {boolean} */
IgPivotGrid.prototype.deferUpdate;
 /** @type {boolean} */
IgPivotGrid.prototype.isParentInFrontForColumns;
 /** @type {boolean} */
IgPivotGrid.prototype.isParentInFrontForRows;
 /** @type {boolean} */
IgPivotGrid.prototype.compactColumnHeaders;
 /** @type {boolean} */
IgPivotGrid.prototype.compactRowHeaders;
 /** @type {?} */
IgPivotGrid.prototype.rowHeadersLayout;
 /** @type {number} */
IgPivotGrid.prototype.compactColumnHeaderIndentation;
 /** @type {number} */
IgPivotGrid.prototype.compactRowHeaderIndentation;
 /** @type {number} */
IgPivotGrid.prototype.rowHeaderLinkGroupIndentation;
 /** @type {number} */
IgPivotGrid.prototype.treeRowHeaderIndentation;
 /** @type {number} */
IgPivotGrid.prototype.defaultRowHeaderWidth;
 /** @type {boolean} */
IgPivotGrid.prototype.allowSorting;
 /** @type {?} */
IgPivotGrid.prototype.firstSortDirection;
 /** @type {boolean} */
IgPivotGrid.prototype.allowHeaderRowsSorting;
 /** @type {boolean} */
IgPivotGrid.prototype.allowHeaderColumnsSorting;
 /** @type {!Array<!IgPivotGridLevelSortDirection>} */
IgPivotGrid.prototype.levelSortDirections;
 /** @type {string} */
IgPivotGrid.prototype.defaultLevelSortBehavior;
 /** @type {?} */
IgPivotGrid.prototype.firstLevelSortDirection;
 /** @type {!IgPivotGridGridOptions} */
IgPivotGrid.prototype.gridOptions;
 /** @type {!IgPivotGridDragAndDropSettings} */
IgPivotGrid.prototype.dragAndDropSettings;
 /** @type {?} */
IgPivotGrid.prototype.dropDownParent;
 /** @type {boolean} */
IgPivotGrid.prototype.disableRowsDropArea;
 /** @type {boolean} */
IgPivotGrid.prototype.disableColumnsDropArea;
 /** @type {boolean} */
IgPivotGrid.prototype.disableMeasuresDropArea;
 /** @type {boolean} */
IgPivotGrid.prototype.disableFiltersDropArea;
 /** @type {boolean} */
IgPivotGrid.prototype.hideRowsDropArea;
 /** @type {boolean} */
IgPivotGrid.prototype.hideColumnsDropArea;
 /** @type {boolean} */
IgPivotGrid.prototype.hideMeasuresDropArea;
 /** @type {boolean} */
IgPivotGrid.prototype.hideFiltersDropArea;
 /** @type {!Function} */
IgPivotGrid.prototype.customMoveValidation;
 /** @type {!DataSourceInitializedEvent} */
IgPivotGrid.prototype.dataSourceInitialized;
 /** @type {!DataSourceUpdatedEvent} */
IgPivotGrid.prototype.dataSourceUpdated;
 /** @type {!PivotGridHeadersRenderedEvent} */
IgPivotGrid.prototype.pivotGridHeadersRendered;
 /** @type {!PivotGridRenderedEvent} */
IgPivotGrid.prototype.pivotGridRendered;
 /** @type {!TupleMemberExpandingEvent} */
IgPivotGrid.prototype.tupleMemberExpanding;
 /** @type {!TupleMemberExpandedEvent} */
IgPivotGrid.prototype.tupleMemberExpanded;
 /** @type {!TupleMemberCollapsingEvent} */
IgPivotGrid.prototype.tupleMemberCollapsing;
 /** @type {!TupleMemberCollapsedEvent} */
IgPivotGrid.prototype.tupleMemberCollapsed;
 /** @type {!SortingEvent} */
IgPivotGrid.prototype.sorting;
 /** @type {!SortedEvent} */
IgPivotGrid.prototype.sorted;
 /** @type {!HeadersSortingEvent} */
IgPivotGrid.prototype.headersSorting;
 /** @type {!HeadersSortedEvent} */
IgPivotGrid.prototype.headersSorted;
 /** @type {!DragStartEvent} */
IgPivotGrid.prototype.dragStart;
 /** @type {!DragEvent} */
IgPivotGrid.prototype.drag;
 /** @type {!DragStopEvent} */
IgPivotGrid.prototype.dragStop;
 /** @type {!MetadataDroppingEvent} */
IgPivotGrid.prototype.metadataDropping;
 /** @type {!MetadataDroppedEvent} */
IgPivotGrid.prototype.metadataDropped;
 /** @type {!MetadataRemovingEvent} */
IgPivotGrid.prototype.metadataRemoving;
 /** @type {!MetadataRemovedEvent} */
IgPivotGrid.prototype.metadataRemoved;
 /** @type {!FilterDropDownOpeningEvent} */
IgPivotGrid.prototype.filterDropDownOpening;
 /** @type {!FilterDropDownOpenedEvent} */
IgPivotGrid.prototype.filterDropDownOpened;
 /** @type {!FilterMembersLoadedEvent} */
IgPivotGrid.prototype.filterMembersLoaded;
 /** @type {!FilterDropDownOkEvent} */
IgPivotGrid.prototype.filterDropDownOk;
 /** @type {!FilterDropDownClosingEvent} */
IgPivotGrid.prototype.filterDropDownClosing;
 /** @type {!FilterDropDownClosedEvent} */
IgPivotGrid.prototype.filterDropDownClosed;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotGridMethods() {}

/**
 * Returns the igGrid instance used to render the OLAP data.
 * @return {!Object}
 */
IgPivotGridMethods.prototype.grid = function() {};

/**
 * Triggers an update on the data source and the igPivotGrid.
 * @return {void}
 */
IgPivotGridMethods.prototype.updateGrid = function() {};

/**
 * Expands a member from the data source and returns true if the expand succeeds. If the data source has a pending update, the method will return false. Note that igPivotGrid to will display the expanded result after the data source is updated.
 * 
 * @param {string} tupleLocation The name of the parent axis - 'columnAxis' or 'rowAxis'.
 * @param {number} tupleIndex The index of the containing tuple. This index should correspond to the position of the tuple in the original unsorted result of the data source.
 * @param {number} memberIndex The index of the member in the tuple. This index should correspond to the position of the member in the original unsorted result of the data source.
 * @param {boolean=} shouldUpdate A flag indicating whether the data source should be updated after the expand.
 * @return {boolean}
 */
IgPivotGridMethods.prototype.expandTupleMember = function(tupleLocation, tupleIndex, memberIndex, shouldUpdate) {};

/**
 * Collapses a member from the data source and returns true if the collapse succeeds. If the data source has a pending update, the method will return false. Note that igPivotGrid to will display the expanded result after the data source is updated.
 * 
 * @param {string} tupleLocation The name of the parent axis - 'columnAxis' or 'rowAxis'.
 * @param {number} tupleIndex The index of the containing tuple. This index should correspond to the position of the tuple in the original unsorted result of the data source.
 * @param {number} memberIndex The index of the member in the tuple. This index should correspond to the position of the member in the original unsorted result of the data source.
 * @param {boolean=} shouldUpdate A flag indicating whether the data source should be updated after the expand.
 * @return {boolean}
 */
IgPivotGridMethods.prototype.collapseTupleMember = function(tupleLocation, tupleIndex, memberIndex, shouldUpdate) {};

/**
 * Returns an array with the applied sort directions on the igPivotGrid's columns. The returned array contains objects with the following properties:
 *             memberNames: The names of the members in the tuple.
 *             tupleIndex: The index of the tuple on the column axis in the original unsorted result.
 *             sortDirection: The direction of the sort - ascending or descending.
 * @return {!Array<?>}
 */
IgPivotGridMethods.prototype.appliedColumnSortDirections = function() {};

/**
 * Returns an array with the applied level sort direction items, which were used for the sorting of the header cells. The returned array contains objects with the following properties:
 *             levelUniqueName: Specifies the unique name of the level, which was sorted.
 *             sortDirection: The direction of the header sort - ascending or descending.
 * @return {!Array<?>}
 */
IgPivotGridMethods.prototype.appliedLevelSortDirections = function() {};

/**
 * Destroy is part of the jQuery UI widget API and does the following:
 *             1. Remove custom CSS classes that were added.
 *             2. Unwrap any wrapping elements such as scrolling divs and other containers.
 *             3. Unbind all events that were bound.
 * @return {void}
 */
IgPivotGridMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgPivotGridMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 *
 *
 * This is the total height of the grid.
 * This is the total height of the grid.
 * 
 * \@optionValue New value to be set.
 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
 * 
 * \@optionValue New value to be set.
 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
 *             The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
 *             The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
 * 
 * \@optionValue New value to be set.
 * Setting deferUpdate to true will not apply changes to the data source until the updateGrid method is called.
 * Setting deferUpdate to true will not apply changes to the data source until the updateGrid method is called.
 * 
 * \@optionValue New value to be set.
 * A boolean value indicating whether a parent in the columns is in front of its children.
 *             If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
 *             If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
 * A boolean value indicating whether a parent in the columns is in front of its children.
 *             If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
 *             If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
 * 
 * \@optionValue New value to be set.
 * A boolean value indicating whether a parent in the rows is in front of its children.
 *             If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
 *             If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
 * A boolean value indicating whether a parent in the rows is in front of its children.
 *             If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
 *             If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
 * 
 * \@optionValue New value to be set.
 * A boolean value indicating whether the column headers should be arranged for compact header layout i.e. each hierarchy is in a single row.
 * A boolean value indicating whether the column headers should be arranged for compact header layout i.e. each hierarchy is in a single row.
 * 
 * \@optionValue New value to be set.
 * A boolean value indicating whether the row headers should be arranged for compact header layout i.e. each hierarchy is in a single column.
 * A boolean value indicating whether the row headers should be arranged for compact header layout i.e. each hierarchy is in a single column.
 * 
 * \@optionValue New value to be set.
 * A value indicating whether the layout that row headers should be arranged.            standard Each hierarchy in the rows is displayed in a separate column. The child members of a member in the rows are displayed on its right.
 *             superCompact Each hierarchy in the rows is displayed in a separate column. The child members of a member in the rows are displayed on above or below it (Depending on the isParentInFrontForRows setting).
 *             tree All hierarchies in the rows are displayed in a tree-like structure in a single column (The column's width is dependent on the defaultRowHEaderWidth, which can be set to "null" to enable the built-in auto-sizing functionality).
 * 
 * A value indicating whether the layout that row headers should be arranged.            standard Each hierarchy in the rows is displayed in a separate column. The child members of a member in the rows are displayed on its right.
 *             superCompact Each hierarchy in the rows is displayed in a separate column. The child members of a member in the rows are displayed on above or below it (Depending on the isParentInFrontForRows setting).
 *             tree All hierarchies in the rows are displayed in a tree-like structure in a single column (The column's width is dependent on the defaultRowHEaderWidth, which can be set to "null" to enable the built-in auto-sizing functionality).
 * 
 * 
 * \@optionValue New value to be set.
 * The indentation for every level column when the compactColumnHeaders is set to true.
 * The indentation for every level column when the compactColumnHeaders is set to true.
 * 
 * \@optionValue New value to be set.
 * The indentation for every level row when the rowHeadersLayout is set to 'superCompact'.
 * The indentation for every level row when the rowHeadersLayout is set to 'superCompact'.
 * 
 * \@optionValue New value to be set.
 * Use it when you set rowHeadersLayout to "tree". This property will set a margin between the level's caption and the next level's (underlined text) caption.
 * Use it when you set rowHeadersLayout to "tree". This property will set a margin between the level's caption and the next level's (underlined text) caption.
 * 
 * \@optionValue New value to be set.
 * The indentation for the neighboring hierarchy's level row when the rowHeaderLayout is set to 'tree'.
 * The indentation for the neighboring hierarchy's level row when the rowHeaderLayout is set to 'tree'.
 * 
 * \@optionValue New value to be set.
 * Gets the width of the row headers.
 * Sets the width of the row headers.
 * 
 * \@optionValue New value to be set.
 * Enables sorting of the value cells in columns.
 * Enables sorting of the value cells in columns.
 * 
 * \@optionValue New value to be set.
 * Gets the default sort direction for the rows.
 * Sets the default sort direction for the rows.
 * 
 * \@optionValue New value to be set.
 * Enables sorting of the header cells in rows.
 * Enables sorting of the header cells in rows.
 * 
 * \@optionValue New value to be set.
 * Enables sorting of the header cells in columns.
 * Enables sorting of the header cells in columns.
 * 
 * \@optionValue New value to be set.
 * An array of level sort direction items, which predefine the sorted header cells.
 * An array of level sort direction items, which predefine the sorted header cells.
 * 
 * \@optionValue New value to be set.
 * Gets the default sort behavior for the levels if no sort behavior is specified in an item from the levelSortDirections option.
 * Sets the default sort behavior for the levels if no sort behavior is specified in an item from the levelSortDirections option.
 * 
 * \@optionValue New value to be set.
 * Gets the default sort direction for the levels if no sort direction is specified in an item from the levelSortDirections option.
 * Sets the default sort direction for the levels if no sort direction is specified in an item from the levelSortDirections option.
 * 
 * \@optionValue New value to be set.
 * Options specific to the igGrid that will render the pivot grid view.
 * Options specific to the igGrid that will render the pivot grid view.
 * 
 * \@optionValue New value to be set.
 * Settings for the drag and drop functionality of the igPivotGrid.
 * Settings for the drag and drop functionality of the igPivotGrid.
 * 
 * \@optionValue New value to be set.
 * Gets the parent for the drop downs.
 * Sets the parent for the drop downs.
 * 
 * \@optionValue New value to be set.
 * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
 * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
 * 
 * \@optionValue New value to be set.
 * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
 * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
 * 
 * \@optionValue New value to be set.
 * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
 * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
 * 
 * \@optionValue New value to be set.
 * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
 * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
 * 
 * \@optionValue New value to be set.
 * Hide the rows drop area.
 * Hide the rows drop area.
 * 
 * \@optionValue New value to be set.
 * Hide the columns drop area.
 * Hide the columns drop area.
 * 
 * \@optionValue New value to be set.
 * Hide the measures drop area.
 * Hide the measures drop area.
 * 
 * \@optionValue New value to be set.
 * Hide the filters drop area.
 * Hide the filters drop area.
 * 
 * \@optionValue New value to be set.
 * A function that will be called to determine if an item can be moved in or dropped on an area of the pivot grid.
 *             paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
 *             paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
 *             paramType="string" The unique name of the item.
 *             returnType="bool"  The function must return true if the item should be accepted.
 * A function that will be called to determine if an item can be moved in or dropped on an area of the pivot grid.
 *             paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
 *             paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
 *             paramType="string" The unique name of the item.
 *             returnType="bool"  The function must return true if the item should be accepted.
 * 
 * \@optionValue New value to be set.
 * Fired after the data source has initialized.
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.dataSource to get a reference to the data source.
 *             Use ui.error to see if an error has occured during initialization.
 *             Use ui.metadataTreeRoot to get a reference to the root of the data source metatadata root item.
 * Fired after the data source has initialized.
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.dataSource to get a reference to the data source.
 *             Use ui.error to see if an error has occured during initialization.
 *             Use ui.metadataTreeRoot to get a reference to the root of the data source metatadata root item.
 * 
 * \@optionValue New value to be set.
 * Fired after the data source has updated.
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.dataSource to get a reference to the data source.
 *             Use ui.error to see if an error has occured during update.
 *             Use ui.result to get the result of the update operation.
 * Fired after the data source has updated.
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.dataSource to get a reference to the data source.
 *             Use ui.error to see if an error has occured during update.
 *             Use ui.result to get the result of the update operation.
 * 
 * \@optionValue New value to be set.
 * Event fired after the headers have been rendered.
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.grid to get a reference to the igGrid widget, which holds the headers.
 *             Use ui.table to get a reference to the headers table DOM element.
 * Event fired after the headers have been rendered.
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.grid to get a reference to the igGrid widget, which holds the headers.
 *             Use ui.table to get a reference to the headers table DOM element.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.grid to get reference to the igGrid widget, which represents the data.
 * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.grid to get reference to the igGrid widget, which represents the data.
 * 
 * \@optionValue Define event handler function.
 * Fired before the expand of the tuple member.
 *             Function takes arguments evt and ui. Return false to cancel the expanding.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.dataSource to get a reference to the data source.
 *             Use ui.axisName to get the name of axis, which holds the member and the tuple.
 *             Use ui.tupleIndex to get the index of the tuple in the axis.
 *             Use ui.memberIndex to get the index of the member in the tuple.
 * Fired before the expand of the tuple member.
 *             Function takes arguments evt and ui. Return false to cancel the expanding.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.dataSource to get a reference to the data source.
 *             Use ui.axisName to get the name of axis, which holds the member and the tuple.
 *             Use ui.tupleIndex to get the index of the tuple in the axis.
 *             Use ui.memberIndex to get the index of the member in the tuple.
 * 
 * \@optionValue New value to be set.
 * Fired after the expand of the tuple member.
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.dataSource to get a reference to the data source.
 *             Use ui.axisName to get the name of axis, which holds the member and the tuple.
 *             Use ui.tupleIndex to get the index of the tuple in the axis.
 *             Use ui.memberIndex to get the index of the member in the tuple.
 * Fired after the expand of the tuple member.
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.dataSource to get a reference to the data source.
 *             Use ui.axisName to get the name of axis, which holds the member and the tuple.
 *             Use ui.tupleIndex to get the index of the tuple in the axis.
 *             Use ui.memberIndex to get the index of the member in the tuple.
 * 
 * \@optionValue New value to be set.
 * Fired before the collapse of the tuple member.
 *             Function takes arguments evt and ui. Return false to cancel the collapsing.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.dataSource to get a reference to the data source.
 *             Use ui.axisName to get the name of axis, which holds the member and the tuple.
 *             Use ui.tupleIndex to get the index of the tuple in the axis.
 *             Use ui.memberIndex to get the index of the member in the tuple.
 * Fired before the collapse of the tuple member.
 *             Function takes arguments evt and ui. Return false to cancel the collapsing.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.dataSource to get a reference to the data source.
 *             Use ui.axisName to get the name of axis, which holds the member and the tuple.
 *             Use ui.tupleIndex to get the index of the tuple in the axis.
 *             Use ui.memberIndex to get the index of the member in the tuple.
 * 
 * \@optionValue New value to be set.
 * Fired after the collapse of the tuple member.
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.dataSource to get a reference to the data source.
 *             Use ui.axisName to get the name of axis, which holds the member and the tuple.
 *             Use ui.tupleIndex to get the index of the tuple in the axis.
 *             Use ui.memberIndex to get the index of the member in the tuple.
 * Fired after the collapse of the tuple member.
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.dataSource to get a reference to the data source.
 *             Use ui.axisName to get the name of axis, which holds the member and the tuple.
 *             Use ui.tupleIndex to get the index of the tuple in the axis.
 *             Use ui.memberIndex to get the index of the member in the tuple.
 * 
 * \@optionValue New value to be set.
 * Fired before the sorting of the columns.
 *             Function takes arguments evt and ui. Return false to cancel the sorting.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.sortDirections to get an array of the tuple indices and sort directions that will be used.
 * Fired before the sorting of the columns.
 *             Function takes arguments evt and ui. Return false to cancel the sorting.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.sortDirections to get an array of the tuple indices and sort directions that will be used.
 * 
 * \@optionValue New value to be set.
 * Fired after the sorting of the columns.
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.sortDirections to get an array of the tuple indices and sort directions that were passed to the table view.
 *             Use ui.appliedSortDirections to get an array of the tuple indices and sort directions that were actually applied to the table view.
 * Fired after the sorting of the columns.
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.sortDirections to get an array of the tuple indices and sort directions that were passed to the table view.
 *             Use ui.appliedSortDirections to get an array of the tuple indices and sort directions that were actually applied to the table view.
 * 
 * \@optionValue New value to be set.
 * Fired before the sorting of the headers.
 *             Function takes arguments evt and ui. Return false to cancel the sorting.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.levelSortDirections to get an array of the level names and sort directions that will be used.
 * Fired before the sorting of the headers.
 *             Function takes arguments evt and ui. Return false to cancel the sorting.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.levelSortDirections to get an array of the level names and sort directions that will be used.
 * 
 * \@optionValue New value to be set.
 * Fired after the sorting of the headers.
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.levelSortDirections to get an array of the level names and sort directions that were used.
 *             Use ui.appliedLevelSortDirections to get an array of the level names and sort directions that were actually applied to the table view.
 * Fired after the sorting of the headers.
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the pivot grid.
 *             Use ui.levelSortDirections to get an array of the level names and sort directions that were used.
 *             Use ui.appliedLevelSortDirections to get an array of the level names and sort directions that were actually applied to the table view.
 * 
 * \@optionValue New value to be set.
 * Fired on drag start. Return false to cancel the dragging.
 *             Use ui.metadatato get a reference to the data.
 *             Use ui.helper to get a reference to the helper.
 *             Use ui.offset to get a reference to the offset.
 *             Use ui.originalPosition to get a reference to the original position of the draggable element.
 *             Use ui.position to get a reference to the current position of the draggable element.
 * Fired on drag start. Return false to cancel the dragging.
 *             Use ui.metadatato get a reference to the data.
 *             Use ui.helper to get a reference to the helper.
 *             Use ui.offset to get a reference to the offset.
 *             Use ui.originalPosition to get a reference to the original position of the draggable element.
 *             Use ui.position to get a reference to the current position of the draggable element.
 * 
 * \@optionValue New value to be set.
 * Fired on drag. Return false to cancel the drag.
 *             Use ui.metadatato get a reference to the data.
 *             Use ui.helper to get a reference to the helper.
 *             Use ui.offset to get a reference to the offset.
 *             Use ui.originalPosition to get a reference to the original position of the draggable element.
 *             Use ui.position to get a reference to the current position of the draggable element.
 * Fired on drag. Return false to cancel the drag.
 *             Use ui.metadatato get a reference to the data.
 *             Use ui.helper to get a reference to the helper.
 *             Use ui.offset to get a reference to the offset.
 *             Use ui.originalPosition to get a reference to the original position of the draggable element.
 *             Use ui.position to get a reference to the current position of the draggable element.
 * 
 * \@optionValue New value to be set.
 * Fired on drag stop.
 *             Use ui.helper to get a reference to the helper.
 *             Use ui.offset to get a reference to the offset.
 *             Use ui.originalPosition to get a reference to the original position of the draggable element.
 *             Use ui.position to get a reference to the current position of the draggable element.
 * Fired on drag stop.
 *             Use ui.helper to get a reference to the helper.
 *             Use ui.offset to get a reference to the offset.
 *             Use ui.originalPosition to get a reference to the original position of the draggable element.
 *             Use ui.position to get a reference to the current position of the draggable element.
 * 
 * \@optionValue New value to be set.
 * Fired before a metadata item drop. Return false to cancel the drop.
 *             Use ui.targetElement for a reference to the drop target.
 *             Use ui.draggedElement for a reference to the metadata item element.
 *             Use ui.metadatato get a reference to the data.
 *             Use ui.metadataIndex to get the index at which the metadata will be inserted.
 *             Use ui.helper to get a reference to the helper.
 *             Use ui.offset to get a reference to the offset.
 *             Use ui.position to get a reference to the current position of the draggable element.
 * Fired before a metadata item drop. Return false to cancel the drop.
 *             Use ui.targetElement for a reference to the drop target.
 *             Use ui.draggedElement for a reference to the metadata item element.
 *             Use ui.metadatato get a reference to the data.
 *             Use ui.metadataIndex to get the index at which the metadata will be inserted.
 *             Use ui.helper to get a reference to the helper.
 *             Use ui.offset to get a reference to the offset.
 *             Use ui.position to get a reference to the current position of the draggable element.
 * 
 * \@optionValue New value to be set.
 * Fired after a metadata item drop.
 *             Use ui.targetElement for a reference to the drop target.
 *             Use ui.draggedElement for a reference to the dragged element.
 *             Use ui.metadatato get a reference to the data.
 *             Use ui.metadataIndex to get the index at which the metadata is inserted.
 *             Use ui.helper to get a reference to the helper.
 *             Use ui.offset to get a reference to the offset.
 *             Use ui.position to get a reference to the current position of the draggable element.
 * Fired after a metadata item drop.
 *             Use ui.targetElement for a reference to the drop target.
 *             Use ui.draggedElement for a reference to the dragged element.
 *             Use ui.metadatato get a reference to the data.
 *             Use ui.metadataIndex to get the index at which the metadata is inserted.
 *             Use ui.helper to get a reference to the helper.
 *             Use ui.offset to get a reference to the offset.
 *             Use ui.position to get a reference to the current position of the draggable element.
 * 
 * \@optionValue New value to be set.
 * Fired before a metadata item is removed when the user clicks the close icon. Return false to cancel the removing.
 *             Use ui.targetElement for a reference to the dragged element.
 *             Use ui.metadatato get a reference to the data.
 * Fired before a metadata item is removed when the user clicks the close icon. Return false to cancel the removing.
 *             Use ui.targetElement for a reference to the dragged element.
 *             Use ui.metadatato get a reference to the data.
 * 
 * \@optionValue New value to be set.
 * Fired after a metadata item is removed when the user clicks the close icon.
 *             Use ui.metadatato get a reference to the data.
 * Fired after a metadata item is removed when the user clicks the close icon.
 *             Use ui.metadatato get a reference to the data.
 * 
 * \@optionValue New value to be set.
 * Fired before the filter members drop down opens. Return false to cancel the opening.
 *             Use ui.hierarchy for a reference to the hierarchy.
 * Fired before the filter members drop down opens. Return false to cancel the opening.
 *             Use ui.hierarchy for a reference to the hierarchy.
 * 
 * \@optionValue New value to be set.
 * Fired after the filter members drop down opens.
 *             Use ui.hierarchy for a reference to the hierarchy.
 *             Use ui.dropDownElement for a reference to the drop down.
 * Fired after the filter members drop down opens.
 *             Use ui.hierarchy for a reference to the hierarchy.
 *             Use ui.dropDownElement for a reference to the drop down.
 * 
 * \@optionValue New value to be set.
 * Fired after the filter members are loaded.
 *             Use ui.parent to get the parent node or the igTree instance in the initial load.
 *             Use ui.rootFilterMembers for a collection with the root filter members .
 *             Use ui.filterMembers for a collection with the newly loaded filter members.
 * Fired after the filter members are loaded.
 *             Use ui.parent to get the parent node or the igTree instance in the initial load.
 *             Use ui.rootFilterMembers for a collection with the root filter members .
 *             Use ui.filterMembers for a collection with the newly loaded filter members.
 * 
 * \@optionValue New value to be set.
 * Fired after the OK button in the filter members drop down is clicked. Return false to cancel the applying of the filters.
 *             Use ui.hierarchy for a reference to the hierarchy.
 *             Use ui.filterMembers for a collection with the selected filter members. If all filter members are selected the collection will be empty.
 *             Use ui.dropDownElement for a reference to the drop down.
 * Fired after the OK button in the filter members drop down is clicked. Return false to cancel the applying of the filters.
 *             Use ui.hierarchy for a reference to the hierarchy.
 *             Use ui.filterMembers for a collection with the selected filter members. If all filter members are selected the collection will be empty.
 *             Use ui.dropDownElement for a reference to the drop down.
 * 
 * \@optionValue New value to be set.
 * Fired before the filter members drop down closes. Return false to cancel the closing.
 *             Use ui.hierarchy for a reference to the hierarchy.
 *             Use ui.dropDownElement for a reference to the drop down.
 * Fired before the filter members drop down closes. Return false to cancel the closing.
 *             Use ui.hierarchy for a reference to the hierarchy.
 *             Use ui.dropDownElement for a reference to the drop down.
 * 
 * \@optionValue New value to be set.
 * Fired after the filter members drop down closes.
 *             Use ui.hierarchy for a reference to the hierarchy.
 * Fired after the filter members drop down closes.
 *             Use ui.hierarchy for a reference to the hierarchy.
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgPivotGrid} methodName_or_optionLiteral_or_options
 * @param {...string|!IgPivotGrid|?} tupleLocation_or_optionName_or_options_or_methodParams
 * @return {!Object|void|boolean|!Array<?>|(string|number)|?|!IgPivotGridDataSourceOptions|number|!Array<!IgPivotGridLevelSortDirection>|string|!IgPivotGridGridOptions|!IgPivotGridDragAndDropSettings|!Function|!DataSourceInitializedEvent|!DataSourceUpdatedEvent|!PivotGridHeadersRenderedEvent|!PivotGridRenderedEvent|!TupleMemberExpandingEvent|!TupleMemberExpandedEvent|!TupleMemberCollapsingEvent|!TupleMemberCollapsedEvent|!SortingEvent|!SortedEvent|!HeadersSortingEvent|!HeadersSortedEvent|!DragStartEvent|!DragEvent|!DragStopEvent|!MetadataDroppingEvent|!MetadataDroppedEvent|!MetadataRemovingEvent|!MetadataRemovedEvent|!FilterDropDownOpeningEvent|!FilterDropDownOpenedEvent|!FilterMembersLoadedEvent|!FilterDropDownOkEvent|!FilterDropDownClosingEvent|!FilterDropDownClosedEvent|!JQuery}
 */
JQuery.prototype.igPivotGrid = function(methodName_or_optionLiteral_or_options, tupleLocation_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgPivotViewDataSourceOptionsXmlaOptionsRequestOptions() {}
 /** @type {boolean} */
IgPivotViewDataSourceOptionsXmlaOptionsRequestOptions.prototype.withCredentials;
 /** @type {!Function} */
IgPivotViewDataSourceOptionsXmlaOptionsRequestOptions.prototype.beforeSend;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewDataSourceOptionsXmlaOptionsMdxSettings() {}
 /** @type {boolean} */
IgPivotViewDataSourceOptionsXmlaOptionsMdxSettings.prototype.nonEmptyOnRows;
 /** @type {boolean} */
IgPivotViewDataSourceOptionsXmlaOptionsMdxSettings.prototype.nonEmptyOnColumns;
 /** @type {boolean} */
IgPivotViewDataSourceOptionsXmlaOptionsMdxSettings.prototype.addCalculatedMembersOnRows;
 /** @type {boolean} */
IgPivotViewDataSourceOptionsXmlaOptionsMdxSettings.prototype.addCalculatedMembersOnColumns;
 /** @type {!Array<?>} */
IgPivotViewDataSourceOptionsXmlaOptionsMdxSettings.prototype.dimensionPropertiesOnRows;
 /** @type {!Array<?>} */
IgPivotViewDataSourceOptionsXmlaOptionsMdxSettings.prototype.dimensionPropertiesOnColumns;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewDataSourceOptionsXmlaOptions() {}
 /** @type {string} */
IgPivotViewDataSourceOptionsXmlaOptions.prototype.serverUrl;
 /** @type {string} */
IgPivotViewDataSourceOptionsXmlaOptions.prototype.catalog;
 /** @type {string} */
IgPivotViewDataSourceOptionsXmlaOptions.prototype.cube;
 /** @type {string} */
IgPivotViewDataSourceOptionsXmlaOptions.prototype.measureGroup;
 /** @type {!IgPivotViewDataSourceOptionsXmlaOptionsRequestOptions} */
IgPivotViewDataSourceOptionsXmlaOptions.prototype.requestOptions;
 /** @type {boolean} */
IgPivotViewDataSourceOptionsXmlaOptions.prototype.enableResultCache;
 /** @type {?} */
IgPivotViewDataSourceOptionsXmlaOptions.prototype.discoverProperties;
 /** @type {?} */
IgPivotViewDataSourceOptionsXmlaOptions.prototype.executeProperties;
 /** @type {!IgPivotViewDataSourceOptionsXmlaOptionsMdxSettings} */
IgPivotViewDataSourceOptionsXmlaOptions.prototype.mdxSettings;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure() {}
 /** @type {string} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure.prototype.name;
 /** @type {string} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure.prototype.caption;
 /** @type {!Function} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure.prototype.aggregator;
 /** @type {string} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure.prototype.displayFolder;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension() {}
 /** @type {string} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension.prototype.name;
 /** @type {string} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension.prototype.caption;
 /** @type {!Array<!IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure>} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension.prototype.measures;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel() {}
 /** @type {string} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel.prototype.name;
 /** @type {string} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel.prototype.caption;
 /** @type {!Function} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel.prototype.memberProvider;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie() {}
 /** @type {string} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie.prototype.name;
 /** @type {string} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie.prototype.caption;
 /** @type {string} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie.prototype.displayFolder;
 /** @type {!Array<!IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel>} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie.prototype.levels;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimension() {}
 /** @type {string} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimension.prototype.name;
 /** @type {string} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimension.prototype.caption;
 /** @type {!Array<!IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie>} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimension.prototype.hierarchies;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCube() {}
 /** @type {string} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCube.prototype.name;
 /** @type {string} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCube.prototype.caption;
 /** @type {!IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCube.prototype.measuresDimension;
 /** @type {!Array<!IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimension>} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCube.prototype.dimensions;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewDataSourceOptionsFlatDataOptionsMetadata() {}
 /** @type {!IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCube} */
IgPivotViewDataSourceOptionsFlatDataOptionsMetadata.prototype.cube;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewDataSourceOptionsFlatDataOptions() {}
 /** @type {?} */
IgPivotViewDataSourceOptionsFlatDataOptions.prototype.dataSource;
 /** @type {string} */
IgPivotViewDataSourceOptionsFlatDataOptions.prototype.dataSourceUrl;
 /** @type {string} */
IgPivotViewDataSourceOptionsFlatDataOptions.prototype.dataSourceType;
 /** @type {string} */
IgPivotViewDataSourceOptionsFlatDataOptions.prototype.responseDataKey;
 /** @type {string} */
IgPivotViewDataSourceOptionsFlatDataOptions.prototype.responseDataType;
 /** @type {!IgPivotViewDataSourceOptionsFlatDataOptionsMetadata} */
IgPivotViewDataSourceOptionsFlatDataOptions.prototype.metadata;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewDataSourceOptions() {}
 /** @type {!IgPivotViewDataSourceOptionsXmlaOptions} */
IgPivotViewDataSourceOptions.prototype.xmlaOptions;
 /** @type {!IgPivotViewDataSourceOptionsFlatDataOptions} */
IgPivotViewDataSourceOptions.prototype.flatDataOptions;
 /** @type {string} */
IgPivotViewDataSourceOptions.prototype.measures;
 /** @type {string} */
IgPivotViewDataSourceOptions.prototype.filters;
 /** @type {string} */
IgPivotViewDataSourceOptions.prototype.rows;
 /** @type {string} */
IgPivotViewDataSourceOptions.prototype.columns;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewPivotGridOptionsLevelSortDirection() {}
 /** @type {string} */
IgPivotViewPivotGridOptionsLevelSortDirection.prototype.levelUniqueName;
 /** @type {?} */
IgPivotViewPivotGridOptionsLevelSortDirection.prototype.sortDirection;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewPivotGridOptionsGridOptionsFeatures() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewPivotGridOptionsGridOptions() {}
 /** @type {(string|number)} */
IgPivotViewPivotGridOptionsGridOptions.prototype.defaultColumnWidth;
 /** @type {boolean} */
IgPivotViewPivotGridOptionsGridOptions.prototype.fixedHeaders;
 /** @type {string} */
IgPivotViewPivotGridOptionsGridOptions.prototype.caption;
 /** @type {!IgPivotViewPivotGridOptionsGridOptionsFeatures} */
IgPivotViewPivotGridOptionsGridOptions.prototype.features;
 /** @type {number} */
IgPivotViewPivotGridOptionsGridOptions.prototype.tabIndex;
 /** @type {boolean} */
IgPivotViewPivotGridOptionsGridOptions.prototype.alternateRowStyles;
 /** @type {boolean} */
IgPivotViewPivotGridOptionsGridOptions.prototype.enableHoverStyles;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewPivotGridOptionsDragAndDropSettings() {}
 /** @type {?} */
IgPivotViewPivotGridOptionsDragAndDropSettings.prototype.appendTo;
 /** @type {(string|boolean|!Array<?>)} */
IgPivotViewPivotGridOptionsDragAndDropSettings.prototype.containment;
 /** @type {number} */
IgPivotViewPivotGridOptionsDragAndDropSettings.prototype.zIndex;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewPivotGridOptions() {}
 /** @type {boolean} */
IgPivotViewPivotGridOptions.prototype.isParentInFrontForColumns;
 /** @type {boolean} */
IgPivotViewPivotGridOptions.prototype.isParentInFrontForRows;
 /** @type {boolean} */
IgPivotViewPivotGridOptions.prototype.compactColumnHeaders;
 /** @type {?} */
IgPivotViewPivotGridOptions.prototype.rowHeadersLayout;
 /** @type {number} */
IgPivotViewPivotGridOptions.prototype.compactColumnHeaderIndentation;
 /** @type {number} */
IgPivotViewPivotGridOptions.prototype.compactRowHeaderIndentation;
 /** @type {number} */
IgPivotViewPivotGridOptions.prototype.defaultRowHeaderWidth;
 /** @type {boolean} */
IgPivotViewPivotGridOptions.prototype.allowSorting;
 /** @type {?} */
IgPivotViewPivotGridOptions.prototype.firstSortDirection;
 /** @type {boolean} */
IgPivotViewPivotGridOptions.prototype.allowHeaderRowsSorting;
 /** @type {boolean} */
IgPivotViewPivotGridOptions.prototype.allowHeaderColumnsSorting;
 /** @type {!Array<!IgPivotViewPivotGridOptionsLevelSortDirection>} */
IgPivotViewPivotGridOptions.prototype.levelSortDirections;
 /** @type {?} */
IgPivotViewPivotGridOptions.prototype.firstLevelSortDirection;
 /** @type {!IgPivotViewPivotGridOptionsGridOptions} */
IgPivotViewPivotGridOptions.prototype.gridOptions;
 /** @type {!IgPivotViewPivotGridOptionsDragAndDropSettings} */
IgPivotViewPivotGridOptions.prototype.dragAndDropSettings;
 /** @type {?} */
IgPivotViewPivotGridOptions.prototype.dropDownParent;
 /** @type {boolean} */
IgPivotViewPivotGridOptions.prototype.disableRowsDropArea;
 /** @type {boolean} */
IgPivotViewPivotGridOptions.prototype.disableColumnsDropArea;
 /** @type {boolean} */
IgPivotViewPivotGridOptions.prototype.disableMeasuresDropArea;
 /** @type {boolean} */
IgPivotViewPivotGridOptions.prototype.disableFiltersDropArea;
 /** @type {boolean} */
IgPivotViewPivotGridOptions.prototype.hideRowsDropArea;
 /** @type {boolean} */
IgPivotViewPivotGridOptions.prototype.hideColumnsDropArea;
 /** @type {boolean} */
IgPivotViewPivotGridOptions.prototype.hideMeasuresDropArea;
 /** @type {boolean} */
IgPivotViewPivotGridOptions.prototype.hideFiltersDropArea;
 /** @type {!Function} */
IgPivotViewPivotGridOptions.prototype.customMoveValidation;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewDataSelectorOptionsDragAndDropSettings() {}
 /** @type {?} */
IgPivotViewDataSelectorOptionsDragAndDropSettings.prototype.appendTo;
 /** @type {(string|boolean|!Array<?>)} */
IgPivotViewDataSelectorOptionsDragAndDropSettings.prototype.containment;
 /** @type {number} */
IgPivotViewDataSelectorOptionsDragAndDropSettings.prototype.zIndex;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewDataSelectorOptions() {}
 /** @type {!IgPivotViewDataSelectorOptionsDragAndDropSettings} */
IgPivotViewDataSelectorOptions.prototype.dragAndDropSettings;
 /** @type {?} */
IgPivotViewDataSelectorOptions.prototype.dropDownParent;
 /** @type {!Function} */
IgPivotViewDataSelectorOptions.prototype.customMoveValidation;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewPivotGridPanel() {}
 /** @type {boolean} */
IgPivotViewPivotGridPanel.prototype.resizable;
 /** @type {boolean} */
IgPivotViewPivotGridPanel.prototype.collapsible;
 /** @type {boolean} */
IgPivotViewPivotGridPanel.prototype.collapsed;
 /** @type {(string|number)} */
IgPivotViewPivotGridPanel.prototype.size;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewDataSelectorPanel() {}
 /** @type {?} */
IgPivotViewDataSelectorPanel.prototype.location;
 /** @type {boolean} */
IgPivotViewDataSelectorPanel.prototype.resizable;
 /** @type {boolean} */
IgPivotViewDataSelectorPanel.prototype.collapsible;
 /** @type {boolean} */
IgPivotViewDataSelectorPanel.prototype.collapsed;
 /** @type {(string|number)} */
IgPivotViewDataSelectorPanel.prototype.size;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotView() {}
 /** @type {(string|number)} */
IgPivotView.prototype.width;
 /** @type {(string|number)} */
IgPivotView.prototype.height;
 /** @type {?} */
IgPivotView.prototype.dataSource;
 /** @type {!IgPivotViewDataSourceOptions} */
IgPivotView.prototype.dataSourceOptions;
 /** @type {!IgPivotViewPivotGridOptions} */
IgPivotView.prototype.pivotGridOptions;
 /** @type {!IgPivotViewDataSelectorOptions} */
IgPivotView.prototype.dataSelectorOptions;
 /** @type {!IgPivotViewPivotGridPanel} */
IgPivotView.prototype.pivotGridPanel;
 /** @type {!IgPivotViewDataSelectorPanel} */
IgPivotView.prototype.dataSelectorPanel;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPivotViewMethods() {}

/**
 * Returns the igPivotGrid instance of the pivot view.
 * @return {!Object}
 */
IgPivotViewMethods.prototype.pivotGrid = function() {};

/**
 * Returns the igPivotDataSelector instance of the pivot view.
 * @return {!Object}
 */
IgPivotViewMethods.prototype.dataSelector = function() {};

/**
 * Returns the igSplitter instance used to separate the pivot grid and the data selector.
 * @return {!Object}
 */
IgPivotViewMethods.prototype.splitter = function() {};

/**
 * Destroy is part of the jQuery UI widget API and does the following:
 * 1. Remove custom CSS classes that were added.
 * 2. Unwrap any wrapping elements such as scrolling divs and other containers.
 * 3. Unbind all events that were bound.
 * @return {void}
 */
IgPivotViewMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgPivotViewMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 *
 *
 *
 *
 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
 * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
 * 
 * \@optionValue New value to be set.
 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
 * The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
 * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
 * The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
 * 
 * \@optionValue New value to be set.
 * Configuration settings that will be assigned to the igPivotGrid widget.
 * Configuration settings that will be assigned to the igPivotGrid widget.
 * 
 * \@optionValue New value to be set.
 * Configuration settings that will be assigned to the igPivotDataSelector widget.
 * Configuration settings that will be assigned to the igPivotDataSelector widget.
 * 
 * \@optionValue New value to be set.
 * Configuration settings for the panel containing the igPivotGrid.
 * Configuration settings for the panel containing the igPivotGrid.
 * 
 * \@optionValue New value to be set.
 * Configuration settings for the panel containing the igPivotDataSelector.
 * Configuration settings for the panel containing the igPivotDataSelector.
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgPivotView} methodName_or_optionLiteral_or_options
 * @param {...string|!IgPivotView|?} optionName_or_options_or_methodParams
 * @return {!Object|void|(string|number)|?|!IgPivotViewDataSourceOptions|!IgPivotViewPivotGridOptions|!IgPivotViewDataSelectorOptions|!IgPivotViewPivotGridPanel|!IgPivotViewDataSelectorPanel|!JQuery}
 */
JQuery.prototype.igPivotView = function(methodName_or_optionLiteral_or_options, optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgPopover() {}
 /** @type {boolean} */
IgPopover.prototype.closeOnBlur;
 /** @type {string} */
IgPopover.prototype.direction;
 /** @type {string} */
IgPopover.prototype.position;
 /** @type {(string|number)} */
IgPopover.prototype.width;
 /** @type {(string|number)} */
IgPopover.prototype.height;
 /** @type {(string|number)} */
IgPopover.prototype.minWidth;
 /** @type {(string|number)} */
IgPopover.prototype.maxWidth;
 /** @type {(string|number)} */
IgPopover.prototype.maxHeight;
 /** @type {number} */
IgPopover.prototype.animationDuration;
 /** @type {(string|!Function)} */
IgPopover.prototype.contentTemplate;
 /** @type {string} */
IgPopover.prototype.selectors;
 /** @type {!IgPopoverHeaderTemplate} */
IgPopover.prototype.headerTemplate;
 /** @type {string} */
IgPopover.prototype.showOn;
 /** @type {?} */
IgPopover.prototype.containment;
 /** @type {(string|!Object)} */
IgPopover.prototype.appendTo;
 /** @type {!ShowingEvent} */
IgPopover.prototype.showing;
 /** @type {!ShownEvent} */
IgPopover.prototype.shown;
 /** @type {!HidingEvent} */
IgPopover.prototype.hiding;
 /** @type {!HiddenEvent} */
IgPopover.prototype.hidden;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgPopoverMethods() {}

/**
 * Destroys the popover widget.
 * @return {void}
 */
IgPopoverMethods.prototype.destroy = function() {};

/**
 * Returns the ID of the element the popover is attached to
 * @return {string}
 */
IgPopoverMethods.prototype.id = function() {};

/**
 * Returns the container for the popover contents
 * @return {!Object}
 */
IgPopoverMethods.prototype.container = function() {};

/**
 * Shows the popover for the specified target
 * 
 * @param {!Element=} trg     The element to show popover for.
 * @param {string=} content     The string to set for the popover to show.
 * @return {void}
 */
IgPopoverMethods.prototype.show = function(trg, content) {};

/**
 * Hides the popover for the specified target
 * @return {void}
 */
IgPopoverMethods.prototype.hide = function() {};

/**
 * Gets the currently set content for the popover container
 * @return {string}
 */
IgPopoverMethods.prototype.getContent = function() {};

/**
 * Sets the content for the popover container
 * 
 * @param {string} newCnt     The popover content to set.
 * @return {void}
 */
IgPopoverMethods.prototype.setContent = function(newCnt) {};

/**
 * Gets the popover current target
 * @return {!Object}
 */
IgPopoverMethods.prototype.target = function() {};

/**
 * Gets the current coordinates of the popover
 * @return {!Object}
 */
IgPopoverMethods.prototype.getCoordinates = function() {};

/**
 * Sets the popover to specific coordinates.
 * 
 * @param {!Object} pos     The popover coordinates in pixels.
 * @return {void}
 */
IgPopoverMethods.prototype.setCoordinates = function(pos) {};

/**
 * @param {string} propertyName
 * @return {!IgPopoverMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Controls whether the popover will close on blur or not
 * Controls whether the popover will close on blur or not
 * 
 * \@optionValue New value to be set.
 * Controls the direction in which the control shows relative to the target element
 * Controls the direction in which the control shows relative to the target element
 * 
 * \@optionValue New value to be set.
 * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
 * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
 * 
 * \@optionValue New value to be set.
 * Defines width for the popover. leave null for auto.
 * Defines width for the popover. leave null for auto.
 * 
 * \@optionValue New value to be set.
 * Defines height for the popover. leave null for auto
 * Defines height for the popover. leave null for auto
 * 
 * \@optionValue New value to be set.
 * Defines width the popover won't go under the value even if no specific one is set.
 * Defines width the popover won't go under the value even if no specific one is set.
 * 
 * \@optionValue New value to be set.
 * Defines width the popover won't exceed even if no specific one is set.
 * Defines width the popover won't exceed even if no specific one is set.
 * 
 * \@optionValue New value to be set.
 * Defines height the popover won't exceed even if no specific one is set.
 * Defines height the popover won't exceed even if no specific one is set.
 * 
 * \@optionValue New value to be set.
 * The time popover fades in and out when showing/hiding
 * Sets the time popover fades in and out when showing/hiding
 * 
 * \@optionValue New value to be set.
 * The content for the popover container. If left null the content will be get from the target.
 * Sets the content for the popover container. If left null the content will be get from the target.
 * 
 * \@optionValue New value to be set.
 * Selectors indicating which items should show popovers. The predefined value is [title]. Customize if you're using something other then the title attribute for the popover content, or if you need a different selector for event delegation. When changing this option, you likely need to also change the contentTemplate option
 * Selectors indicating which items should show popovers. The predefined value is [title]. Customize if you're using something other then the title attribute for the popover content, or if you need a different selector for event delegation. When changing this option, you likely need to also change the contentTemplate option
 * 
 * \@optionValue New value to be set.
 * The content for the popover header
 * Sets the content for the popover header
 * 
 * \@optionValue New value to be set.
 * The event on which the popover will be shown. Predefined values are "mouseenter", "click" and "focus"
 * Sets the event on which the popover will be shown. Predefined values are "mouseenter", "click" and "focus"
 * 
 * \@optionValue New value to be set.
 * The containment for the popover. Accepts a jQuery object
 * Sets the containment for the popover. Accepts a jQuery object
 * 
 * \@optionValue New value to be set.
 * Controls where the popover DOM should be attached to.
 * 
 * Controls where the popover DOM should be attached to.
 * 
 * 
 * \@optionValue New value to be set.
 * Event fired before popover is shown.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover will show for.
 * Use ui.content to get or set the content to be shown as a string.
 * Use ui.popover to get the popover element showing.
 * Use ui.owner to get reference to the igPopover widget
 * Event fired before popover is shown.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover will show for.
 * Use ui.content to get or set the content to be shown as a string.
 * Use ui.popover to get the popover element showing.
 * Use ui.owner to get reference to the igPopover widget
 * 
 * \@optionValue Define event handler function.
 * Event fired after popover is shown.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover showed for.
 * Use ui.content to get the content that was shown as a string.
 * Use ui.popover to get the popover element shown.
 * Use ui.owner to get reference to the igPopover widget
 * Event fired after popover is shown.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover showed for.
 * Use ui.content to get the content that was shown as a string.
 * Use ui.popover to get the popover element shown.
 * Use ui.owner to get reference to the igPopover widget
 * 
 * \@optionValue Define event handler function.
 * Event fired before popover is hidden.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover will hide for.
 * Use ui.content to get the current content displayed in the popover as a string.
 * Use ui.popover to get the popover element hiding.
 * Use ui.owner to get reference to the igPopover widget
 * Event fired before popover is hidden.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover will hide for.
 * Use ui.content to get the current content displayed in the popover as a string.
 * Use ui.popover to get the popover element hiding.
 * Use ui.owner to get reference to the igPopover widget
 * 
 * \@optionValue Define event handler function.
 * Event fired after popover is hidden.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover is hidden for.
 * Use ui.content to get the content displayed in the popover as a string.
 * Use ui.popover to get the popover element hidden.
 * Use ui.owner to get reference to the igPopover widget
 * Event fired after popover is hidden.
 * Function takes arguments evt and ui.
 * Use ui.element to get the element the popover is hidden for.
 * Use ui.content to get the content displayed in the popover as a string.
 * Use ui.popover to get the popover element hidden.
 * Use ui.owner to get reference to the igPopover widget
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgPopover} methodName_or_optionLiteral_or_options
 * @param {...!Element|string|!Object|!IgPopover|?=} trg_or_newCnt_or_pos_or_optionName_or_options_or_methodParams
 * @return {void|string|!Object|boolean|(string|number)|number|(string|!Function)|!IgPopoverHeaderTemplate|?|(string|!Object)|!ShowingEvent|!ShownEvent|!HidingEvent|!HiddenEvent|!JQuery}
 */
JQuery.prototype.igPopover = function(methodName_or_optionLiteral_or_options, trg_or_newCnt_or_pos_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgRadialGaugeRange() {}
 /** @type {string} */
IgRadialGaugeRange.prototype.name;
 /** @type {number} */
IgRadialGaugeRange.prototype.startValue;
 /** @type {number} */
IgRadialGaugeRange.prototype.endValue;
 /** @type {number} */
IgRadialGaugeRange.prototype.outerStartExtent;
 /** @type {number} */
IgRadialGaugeRange.prototype.outerEndExtent;
 /** @type {number} */
IgRadialGaugeRange.prototype.innerStartExtent;
 /** @type {number} */
IgRadialGaugeRange.prototype.innerEndExtent;
 /** @type {string} */
IgRadialGaugeRange.prototype.brush;
 /** @type {string} */
IgRadialGaugeRange.prototype.outline;
 /** @type {number} */
IgRadialGaugeRange.prototype.strokeThickness;
 /** @type {boolean} */
IgRadialGaugeRange.prototype.remove;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgRadialGauge() {}
 /** @type {(string|number)} */
IgRadialGauge.prototype.width;
 /** @type {(string|number)} */
IgRadialGauge.prototype.height;
 /** @type {!Array<!IgRadialGaugeRange>} */
IgRadialGauge.prototype.ranges;
 /** @type {?} */
IgRadialGauge.prototype.rangeBrushes;
 /** @type {?} */
IgRadialGauge.prototype.rangeOutlines;
 /** @type {number} */
IgRadialGauge.prototype.minimumValue;
 /** @type {number} */
IgRadialGauge.prototype.maximumValue;
 /** @type {number} */
IgRadialGauge.prototype.interval;
 /** @type {number} */
IgRadialGauge.prototype.centerX;
 /** @type {number} */
IgRadialGauge.prototype.centerY;
 /** @type {number} */
IgRadialGauge.prototype.value;
 /** @type {number} */
IgRadialGauge.prototype.scaleStartAngle;
 /** @type {number} */
IgRadialGauge.prototype.scaleEndAngle;
 /** @type {string} */
IgRadialGauge.prototype.scaleSweepDirection;
 /** @type {number} */
IgRadialGauge.prototype.transitionDuration;
 /** @type {?} */
IgRadialGauge.prototype.transitionEasingFunction;
 /** @type {string} */
IgRadialGauge.prototype.needleBrush;
 /** @type {string} */
IgRadialGauge.prototype.needleOutline;
 /** @type {number} */
IgRadialGauge.prototype.needleStartExtent;
 /** @type {number} */
IgRadialGauge.prototype.needleEndExtent;
 /** @type {string} */
IgRadialGauge.prototype.needleShape;
 /** @type {number} */
IgRadialGauge.prototype.needleStartWidthRatio;
 /** @type {number} */
IgRadialGauge.prototype.needleEndWidthRatio;
 /** @type {number} */
IgRadialGauge.prototype.needleBaseFeatureWidthRatio;
 /** @type {number} */
IgRadialGauge.prototype.needleBaseFeatureExtent;
 /** @type {number} */
IgRadialGauge.prototype.needlePointFeatureWidthRatio;
 /** @type {number} */
IgRadialGauge.prototype.needlePointFeatureExtent;
 /** @type {number} */
IgRadialGauge.prototype.needlePivotWidthRatio;
 /** @type {number} */
IgRadialGauge.prototype.needlePivotInnerWidthRatio;
 /** @type {string} */
IgRadialGauge.prototype.needlePivotShape;
 /** @type {number} */
IgRadialGauge.prototype.scaleStartExtent;
 /** @type {string} */
IgRadialGauge.prototype.needlePivotBrush;
 /** @type {string} */
IgRadialGauge.prototype.needlePivotOutline;
 /** @type {number} */
IgRadialGauge.prototype.needleStrokeThickness;
 /** @type {number} */
IgRadialGauge.prototype.needlePivotStrokeThickness;
 /** @type {number} */
IgRadialGauge.prototype.scaleEndExtent;
 /** @type {number} */
IgRadialGauge.prototype.labelExtent;
 /** @type {number} */
IgRadialGauge.prototype.labelInterval;
 /** @type {number} */
IgRadialGauge.prototype.tickStartExtent;
 /** @type {number} */
IgRadialGauge.prototype.tickEndExtent;
 /** @type {number} */
IgRadialGauge.prototype.tickStrokeThickness;
 /** @type {string} */
IgRadialGauge.prototype.tickBrush;
 /** @type {string} */
IgRadialGauge.prototype.fontBrush;
 /** @type {number} */
IgRadialGauge.prototype.minorTickStartExtent;
 /** @type {number} */
IgRadialGauge.prototype.minorTickEndExtent;
 /** @type {number} */
IgRadialGauge.prototype.minorTickStrokeThickness;
 /** @type {string} */
IgRadialGauge.prototype.minorTickBrush;
 /** @type {number} */
IgRadialGauge.prototype.minorTickCount;
 /** @type {string} */
IgRadialGauge.prototype.scaleBrush;
 /** @type {string} */
IgRadialGauge.prototype.backingBrush;
 /** @type {string} */
IgRadialGauge.prototype.backingOutline;
 /** @type {number} */
IgRadialGauge.prototype.backingStrokeThickness;
 /** @type {number} */
IgRadialGauge.prototype.backingOuterExtent;
 /** @type {number} */
IgRadialGauge.prototype.backingOversweep;
 /** @type {number} */
IgRadialGauge.prototype.scaleOversweep;
 /** @type {string} */
IgRadialGauge.prototype.scaleOversweepShape;
 /** @type {number} */
IgRadialGauge.prototype.backingCornerRadius;
 /** @type {number} */
IgRadialGauge.prototype.backingInnerExtent;
 /** @type {string} */
IgRadialGauge.prototype.backingShape;
 /** @type {number} */
IgRadialGauge.prototype.radiusMultiplier;
 /** @type {string} */
IgRadialGauge.prototype.duplicateLabelOmissionStrategy;
 /** @type {boolean} */
IgRadialGauge.prototype.isNeedleDraggingEnabled;
 /** @type {boolean} */
IgRadialGauge.prototype.isNeedleDraggingConstrained;
 /** @type {string} */
IgRadialGauge.prototype.font;
 /** @type {number} */
IgRadialGauge.prototype.transitionProgress;
 /** @type {number} */
IgRadialGauge.prototype.pixelScalingRatio;
 /** @type {!FormatLabelEvent} */
IgRadialGauge.prototype.formatLabel;
 /** @type {!AlignLabelEvent} */
IgRadialGauge.prototype.alignLabel;
 /** @type {!ValueChangedEvent} */
IgRadialGauge.prototype.valueChanged;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgRadialGaugeMethods() {}

/**
 * Returns a string containing the names of all the ranges delimited with a \n symbol.
 * @return {string}
 */
IgRadialGaugeMethods.prototype.getRangeNames = function() {};

/**
 * Adds a new range to the radial gauge.
 * 
 * @param {!Object} value
 * @return {void}
 */
IgRadialGaugeMethods.prototype.addRange = function(value) {};

/**
 * Removes a specified range.
 * 
 * @param {!Object} value
 * @return {void}
 */
IgRadialGaugeMethods.prototype.removeRange = function(value) {};

/**
 * Updates the range.
 * 
 * @param {!Object} value
 * @return {void}
 */
IgRadialGaugeMethods.prototype.updateRange = function(value) {};

/**
 * Clears the ranges in the radial gauge.
 * @return {void}
 */
IgRadialGaugeMethods.prototype.clearRanges = function() {};

/**
 * Scales a value on the gauge's main scale to an angle around the center point of the gauge, in radians.
 * 
 * @param {!Object} value
 * @return {void}
 */
IgRadialGaugeMethods.prototype.scaleValue = function(value) {};

/**
 * Unscales a value from an angle in radians to the represented value along the main scale of the gauge.
 * 
 * @param {!Object} value
 * @return {void}
 */
IgRadialGaugeMethods.prototype.unscaleValue = function(value) {};

/**
 * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.
 * 
 * @param {!Object} x
 * @param {!Object} y
 * @return {number}
 */
IgRadialGaugeMethods.prototype.getValueForPoint = function(x, y) {};

/**
 * Gets the point on the gauge for a given scale value and extent.
 * 
 * @param {!Object} value
 * @param {!Object} extent
 * @return {void}
 */
IgRadialGaugeMethods.prototype.getPointForValue = function(value, extent) {};

/**
 * Returns true if the main gauge needle bounding box contains the point provided, otherwise false.
 * 
 * @param {!Object} x
 * @param {!Object} y
 * @return {void}
 */
IgRadialGaugeMethods.prototype.needleContainsPoint = function(x, y) {};

/**
 * Exports the visual data for the radial gauge.
 * @return {void}
 */
IgRadialGaugeMethods.prototype.exportVisualData = function() {};

/**
 * Flushes the gauge.
 * @return {void}
 */
IgRadialGaugeMethods.prototype.flush = function() {};

/**
 * Destroys widget.
 * @return {void}
 */
IgRadialGaugeMethods.prototype.destroy = function() {};

/**
 * Returns true if the style was updated for the radial gauge.
 * @return {void}
 */
IgRadialGaugeMethods.prototype.styleUpdated = function() {};

/**
 * @param {string} propertyName
 * @return {!IgRadialGaugeMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
 * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * \@optionValue New value to be set.
 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
 * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * \@optionValue New value to be set.
 * Gets  the scale ranges to render on the linear gauge.
 * Sets the scale ranges to render on the linear gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  a collection of brushes to be used as the palette for gauge ranges.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * Sets a collection of brushes to be used as the palette for gauge ranges.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * 
 * \@optionValue New value to be set.
 * Gets  a collection of brushes to be used as the palette for gauge outlines.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * Sets a collection of brushes to be used as the palette for gauge outlines.
 * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
 * 
 * \@optionValue New value to be set.
 * Gets  the minimum value of the scale.
 * Sets the minimum value of the scale.
 * 
 * \@optionValue New value to be set.
 * Gets  the maximum value of the scale.
 * Sets the maximum value of the scale.
 * 
 * \@optionValue New value to be set.
 * Gets  the interval to use for the scale.
 * Sets the interval to use for the scale.
 * 
 * \@optionValue New value to be set.
 * Gets  the x position of the center of the gauge with the value ranging from 0 to 1.
 * Sets the x position of the center of the gauge with the value ranging from 0 to 1.
 * 
 * \@optionValue New value to be set.
 * Gets  the y position of the center of the gauge with the value ranging from 0 to 1.
 * Sets the y position of the center of the gauge with the value ranging from 0 to 1.
 * 
 * \@optionValue New value to be set.
 * Gets  the value at which to point the needle of the gauge.
 * Sets the value at which to point the needle of the gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the start angle for the scale in degrees.
 * Sets the start angle for the scale in degrees.
 * 
 * \@optionValue New value to be set.
 * Gets  the end angle for the scale in degrees.
 * Sets the end angle for the scale in degrees.
 * 
 * \@optionValue New value to be set.
 * Gets  the direction in which the scale sweeps around the center from the start angle to end angle.
 * Sets the direction in which the scale sweeps around the center from the start angle to end angle.
 * 
 * \@optionValue New value to be set.
 * Gets  the number of milliseconds over which changes to the gauge should be animated.
 * Sets the number of milliseconds over which changes to the gauge should be animated.
 * 
 * \@optionValue New value to be set.
 * Gets  the easing function used to morph the current series.
 * Sets the easing function used to morph the current series.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use when rendering the fill of the needle.
 * Sets the brush to use when rendering the fill of the needle.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use when rendering the outline of the needle.
 * Sets the brush to use when rendering the outline of the needle.
 * 
 * \@optionValue New value to be set.
 * Gets  the extent (from -1 to 1) at which to start rendering the needle, measured from the center of the gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * Sets the extent (from -1 to 1) at which to start rendering the needle, measured from the center of the gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the extent (from -1 to 1) at which to end rendering the needle, measured from the center of the gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * Sets the extent (from -1 to 1) at which to end rendering the needle, measured from the center of the gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the shape to use when rendering the needle from a number of options.
 * Sets the shape to use when rendering the needle from a number of options.
 * 
 * \@optionValue New value to be set.
 * Gets  the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * Sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * Sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the width of the needle at its feature which is closest to the base (e.g. a bulb) with a value from 0 to 1. Note: Only some needle shapes respect this property.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * Sets the width of the needle at its feature which is closest to the base (e.g. a bulb) with a value from 0 to 1. Note: Only some needle shapes respect this property.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the extent of the feature which is closest to the base (e.g. a bulb) with a value from -1 to 1. Note: Only some needle shapes respect this property.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * Sets the extent of the feature which is closest to the base (e.g. a bulb) with a value from -1 to 1. Note: Only some needle shapes respect this property.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the width of the needle at its feature which is closest to the point (e.g. the tapering point of a needle) with a value from 0 to 1. Note: Only some needle shapes respect this property.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * Sets the width of the needle at its feature which is closest to the point (e.g. the tapering point of a needle) with a value from 0 to 1. Note: Only some needle shapes respect this property.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the extent of the feature which is closest to the point (e.g. the tapering point of a needle) with a value from -1 to 1. Note: Only some needle shapes respect this property.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * Sets the extent of the feature which is closest to the point (e.g. the tapering point of a needle) with a value from -1 to 1. Note: Only some needle shapes respect this property.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the width of the cap of the needle with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * Sets the width of the cap of the needle with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the width of the inner cutout section of the needle cap with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle that has a cutout section.
 * Sets the width of the inner cutout section of the needle cap with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle that has a cutout section.
 * 
 * \@optionValue New value to be set.
 * Gets  the shape to use for the needle cap.
 * Sets the shape to use for the needle cap.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to start rendering the scale, measured from the center of the gauge as a value from 0 to 1.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * Sets the position at which to start rendering the scale, measured from the center of the gauge as a value from 0 to 1.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for filling the needle cap. Note: this only applies to certain cap shapes.
 * Sets the brush to use for filling the needle cap. Note: this only applies to certain cap shapes.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for the outlines of the needle cap.
 * Sets the brush to use for the outlines of the needle cap.
 * 
 * \@optionValue New value to be set.
 * Gets  the stroke thickness of the needle outline.
 * Sets the stroke thickness of the needle outline.
 * 
 * \@optionValue New value to be set.
 * Gets  the stroke thickness to use for the outline of the needle cap.
 * Sets the stroke thickness to use for the outline of the needle cap.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to stop rendering the scale as a value from 0 to 1 measured from the center of the gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * Sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the center of the gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to put the labels as a value from 0 to 1, measured form the center of the gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * Sets the position at which to put the labels as a value from 0 to 1, measured form the center of the gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
 * Sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * Sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * Sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the stroke thickness to use when rendering ticks.
 * Sets the stroke thickness to use when rendering ticks.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for the major tickmarks.
 * Sets the brush to use for the major tickmarks.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for the label font.
 * Sets the brush to use for the label font.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * Sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * Sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
 * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the stroke thickness to use when rendering minor ticks.
 * Sets the stroke thickness to use when rendering minor ticks.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for the minor tickmarks.
 * Sets the brush to use for the minor tickmarks.
 * 
 * \@optionValue New value to be set.
 * Gets  the number of minor tickmarks to place between major tickmarks.
 * Sets the number of minor tickmarks to place between major tickmarks.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use to fill the background of the scale.
 * Sets the brush to use to fill the background of the scale.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use to fill the backing of the gauge.
 * Sets the brush to use to fill the backing of the gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the brush to use for the outline of the backing.
 * Sets the brush to use for the outline of the backing.
 * 
 * \@optionValue New value to be set.
 * Gets  the stroke thickness of the backing outline.
 * Sets the stroke thickness of the backing outline.
 * 
 * \@optionValue New value to be set.
 * Gets  the outer extent of the gauge backing.
 * Sets the outer extent of the gauge backing.
 * 
 * \@optionValue New value to be set.
 * Gets  the over sweep angle to apply to the backing if it is displaying fitted (in degrees). Must be greater or equal to 0.
 * Sets the over sweep angle to apply to the backing if it is displaying fitted (in degrees). Must be greater or equal to 0.
 * 
 * \@optionValue New value to be set.
 * Gets  the extra degrees of sweep to apply to the scale background. Must be greater or equal to 0.
 * Sets the extra degrees of sweep to apply to the scale background. Must be greater or equal to 0.
 * 
 * \@optionValue New value to be set.
 * Gets  the over or shape to use for the excess fill area for the scale.
 * Sets the over or shape to use for the excess fill area for the scale.
 * 
 * \@optionValue New value to be set.
 * Gets  the corner rounding radius to use for the fitted scale backings.
 * Sets the corner rounding radius to use for the fitted scale backings.
 * 
 * \@optionValue New value to be set.
 * Gets  the inner extent of the gauge backing.
 * Sets the inner extent of the gauge backing.
 * 
 * \@optionValue New value to be set.
 * Gets  the type of shape to use for the backing of the gauge.
 * Sets the type of shape to use for the backing of the gauge.
 * 
 * \@optionValue New value to be set.
 * Gets  the multiplying factor to apply to the normal radius of the gauge.
 * The radius of the gauge is defined by the minimum of the width and height of the control divided by 2.0.
 * This introduces a multiplicative factor to that value.
 * Sets the multiplying factor to apply to the normal radius of the gauge.
 * The radius of the gauge is defined by the minimum of the width and height of the control divided by 2.0.
 * This introduces a multiplicative factor to that value.
 * 
 * \@optionValue New value to be set.
 * Gets  the strategy to use for omitting labels if the first and last label have the same value.
 * Sets the strategy to use for omitting labels if the first and last label have the same value.
 * 
 * \@optionValue New value to be set.
 * Gets  whether needle dragging is enabled or not.
 * Sets whether needle dragging is enabled or not.
 * 
 * \@optionValue New value to be set.
 * Gets  whether the needle is constrained within the minimum and maximum value range during dragging.
 * Sets whether the needle is constrained within the minimum and maximum value range during dragging.
 * 
 * \@optionValue New value to be set.
 * Gets  the font.
 * Sets the font.
 * 
 * \@optionValue New value to be set.
 * Gets the transition progress of the animation when the control is animating.
 * The transition progress of the animation when the control is animating.
 * 
 * \@optionValue New value to be set.
 * Gets  the scaling value used by the main canvas rendering context to apply a scale transform to it.
 * Sets the scaling value used by the main canvas rendering context to apply a scale transform to it.
 * 
 * \@optionValue New value to be set.
 *
 *
 *
 *
 * Occurs when the Value property changes.
 * Occurs when the Value property changes.
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgRadialGauge} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgRadialGauge|?} value_or_x_or_optionName_or_options_or_methodParams
 * @return {string|void|number|(string|number)|!Array<!IgRadialGaugeRange>|?|boolean|!FormatLabelEvent|!AlignLabelEvent|!ValueChangedEvent|!JQuery}
 */
JQuery.prototype.igRadialGauge = function(methodName_or_optionLiteral_or_options, value_or_x_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgRadialMenuItem() {}
 /** @type {string} */
IgRadialMenuItem.prototype.type;
 /** @type {string} */
IgRadialMenuItem.prototype.name;
 /** @type {string} */
IgRadialMenuItem.prototype.recentItemName;
 /** @type {number} */
IgRadialMenuItem.prototype.value;
 /** @type {?} */
IgRadialMenuItem.prototype.pendingValue;
 /** @type {boolean} */
IgRadialMenuItem.prototype.autoRotateChildren;
 /** @type {string} */
IgRadialMenuItem.prototype.checkedHighlightBrush;
 /** @type {string} */
IgRadialMenuItem.prototype.foreground;
 /** @type {string} */
IgRadialMenuItem.prototype.highlightBrush;
 /** @type {string} */
IgRadialMenuItem.prototype.innerAreaFill;
 /** @type {string} */
IgRadialMenuItem.prototype.innerAreaHotTrackFill;
 /** @type {string} */
IgRadialMenuItem.prototype.innerAreaHotTrackStroke;
 /** @type {string} */
IgRadialMenuItem.prototype.innerAreaStroke;
 /** @type {number} */
IgRadialMenuItem.prototype.innerAreaStrokeThickness;
 /** @type {boolean} */
IgRadialMenuItem.prototype.isEnabled;
 /** @type {boolean} */
IgRadialMenuItem.prototype.isToolTipEnabled;
 /** @type {string} */
IgRadialMenuItem.prototype.outerRingButtonHotTrackFill;
 /** @type {string} */
IgRadialMenuItem.prototype.outerRingButtonHotTrackForeground;
 /** @type {string} */
IgRadialMenuItem.prototype.outerRingButtonHotTrackStroke;
 /** @type {string} */
IgRadialMenuItem.prototype.outerRingButtonFill;
 /** @type {string} */
IgRadialMenuItem.prototype.outerRingButtonForeground;
 /** @type {string} */
IgRadialMenuItem.prototype.outerRingButtonStroke;
 /** @type {number} */
IgRadialMenuItem.prototype.outerRingButtonStrokeThickness;
 /** @type {?} */
IgRadialMenuItem.prototype.toolTip;
 /** @type {number} */
IgRadialMenuItem.prototype.wedgeIndex;
 /** @type {number} */
IgRadialMenuItem.prototype.wedgeSpan;
 /** @type {boolean} */
IgRadialMenuItem.prototype.autoUpdateRecentItem;
 /** @type {string} */
IgRadialMenuItem.prototype.childItemPlacement;
 /** @type {string} */
IgRadialMenuItem.prototype.checkBehavior;
 /** @type {boolean} */
IgRadialMenuItem.prototype.isChecked;
 /** @type {string} */
IgRadialMenuItem.prototype.groupName;
 /** @type {?} */
IgRadialMenuItem.prototype.header;
 /** @type {string} */
IgRadialMenuItem.prototype.iconUri;
 /** @type {?} */
IgRadialMenuItem.prototype.color;
 /** @type {string} */
IgRadialMenuItem.prototype.pendingValueNeedleBrush;
 /** @type {boolean} */
IgRadialMenuItem.prototype.reserveFirstSlice;
 /** @type {number} */
IgRadialMenuItem.prototype.smallIncrement;
 /** @type {string} */
IgRadialMenuItem.prototype.tickBrush;
 /** @type {?} */
IgRadialMenuItem.prototype.ticks;
 /** @type {?} */
IgRadialMenuItem.prototype.trackStartColor;
 /** @type {?} */
IgRadialMenuItem.prototype.trackEndColor;
 /** @type {string} */
IgRadialMenuItem.prototype.valueNeedleBrush;
 /** @type {?} */
IgRadialMenuItem.prototype.closed;
 /** @type {?} */
IgRadialMenuItem.prototype.opened;
 /** @type {?} */
IgRadialMenuItem.prototype.checked;
 /** @type {?} */
IgRadialMenuItem.prototype.click;
 /** @type {?} */
IgRadialMenuItem.prototype.unchecked;
 /** @type {?} */
IgRadialMenuItem.prototype.colorChanged;
 /** @type {?} */
IgRadialMenuItem.prototype.colorWellClick;
 /** @type {?} */
IgRadialMenuItem.prototype.valueChanged;
 /** @type {?} */
IgRadialMenuItem.prototype.pendingValueChanged;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function ClosedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ClosedEventUIParam() {}
 /** @type {?} */
ClosedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function OpenedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function OpenedEventUIParam() {}
 /** @type {?} */
OpenedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function IgRadialMenu() {}
 /** @type {!Array<!IgRadialMenuItem>} */
IgRadialMenu.prototype.items;
 /** @type {string} */
IgRadialMenu.prototype.currentOpenMenuItemName;
 /** @type {number} */
IgRadialMenu.prototype.centerButtonContentWidth;
 /** @type {number} */
IgRadialMenu.prototype.centerButtonContentHeight;
 /** @type {string} */
IgRadialMenu.prototype.centerButtonClosedFill;
 /** @type {string} */
IgRadialMenu.prototype.centerButtonClosedStroke;
 /** @type {string} */
IgRadialMenu.prototype.centerButtonFill;
 /** @type {string} */
IgRadialMenu.prototype.centerButtonHotTrackFill;
 /** @type {string} */
IgRadialMenu.prototype.centerButtonHotTrackStroke;
 /** @type {string} */
IgRadialMenu.prototype.centerButtonStroke;
 /** @type {number} */
IgRadialMenu.prototype.centerButtonStrokeThickness;
 /** @type {string} */
IgRadialMenu.prototype.font;
 /** @type {boolean} */
IgRadialMenu.prototype.isOpen;
 /** @type {string} */
IgRadialMenu.prototype.menuBackground;
 /** @type {number} */
IgRadialMenu.prototype.menuItemOpenCloseAnimationDuration;
 /** @type {?} */
IgRadialMenu.prototype.menuItemOpenCloseAnimationEasingFunction;
 /** @type {number} */
IgRadialMenu.prototype.menuOpenCloseAnimationDuration;
 /** @type {?} */
IgRadialMenu.prototype.menuOpenCloseAnimationEasingFunction;
 /** @type {number} */
IgRadialMenu.prototype.minWedgeCount;
 /** @type {string} */
IgRadialMenu.prototype.outerRingFill;
 /** @type {number} */
IgRadialMenu.prototype.outerRingThickness;
 /** @type {string} */
IgRadialMenu.prototype.outerRingStroke;
 /** @type {number} */
IgRadialMenu.prototype.outerRingStrokeThickness;
 /** @type {number} */
IgRadialMenu.prototype.rotationInDegrees;
 /** @type {number} */
IgRadialMenu.prototype.rotationAsPercentageOfWedge;
 /** @type {number} */
IgRadialMenu.prototype.wedgePaddingInDegrees;
 /** @type {number} */
IgRadialMenu.prototype.pixelScalingRatio;
 /** @type {!ClosedEvent} */
IgRadialMenu.prototype.closed;
 /** @type {!OpenedEvent} */
IgRadialMenu.prototype.opened;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgRadialMenuMethods() {}

/**
 * Gets or sets the value of a property for the item created with the specified key
 * 
 * @param {string} itemKey The name of the item
 * @param {string} key The name of the property/option
 * @param {!Object} value The new value for the property or undefined to obtain the current value
 * @return {!Object}
 */
IgRadialMenuMethods.prototype.itemOption = function(itemKey, key, value) {};

/**
 * Exports visual data from the radial menu to aid in unit testing
 * @return {void}
 */
IgRadialMenuMethods.prototype.exportVisualData = function() {};

/**
 * Forces any pending deferred work to render on the radial menu before continuing
 * @return {void}
 */
IgRadialMenuMethods.prototype.flush = function() {};

/**
 * Destroys the widget.
 * @return {void}
 */
IgRadialMenuMethods.prototype.destroy = function() {};

/**
 * Notify the radial menu that style information used for rendering the menu may have been updated.
 * @return {void}
 */
IgRadialMenuMethods.prototype.styleUpdated = function() {};

/**
 * @param {string} propertyName
 * @return {!IgRadialMenuMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Gets  the items in the menu.
 * Sets the items in the menu.
 * 
 * \@optionValue New value to be set.
 * Gets  the name of the item within the menu whose children are currently displayed.
 * Sets the name of the item within the menu whose children are currently displayed.
 * 
 * \@optionValue New value to be set.
 * Returns  the width of the center button content.
 * Returns or sets the width of the center button content.
 * 
 * \@optionValue New value to be set.
 * Returns  the height of the center button content.
 * Returns or sets the height of the center button content.
 * 
 * \@optionValue New value to be set.
 * Returns  the background of the center button of the menu when the IsOpen property is false.
 * Returns or sets the background of the center button of the menu when the IsOpen property is false.
 * 
 * \@optionValue New value to be set.
 * Returns  the brush used for the outline of the ring of the center button when the IsOpen property is false.
 * Returns or sets the brush used for the outline of the ring of the center button when the IsOpen property is false.
 * 
 * \@optionValue New value to be set.
 * Returns  the background of the center button of the menu when the IsOpen property is true.
 * Returns or sets the background of the center button of the menu when the IsOpen property is true.
 * 
 * \@optionValue New value to be set.
 * Returns  the background of the center button of the menu when under the pointer.
 * Returns or sets the background of the center button of the menu when under the pointer.
 * 
 * \@optionValue New value to be set.
 * Returns  the brush used for the outline of the ring of the center button when under the pointer.
 * Returns or sets the brush used for the outline of the ring of the center button when under the pointer.
 * 
 * \@optionValue New value to be set.
 * Returns  the brush used for the outline of the ring of the center button when the IsOpen is true.
 * Returns or sets the brush used for the outline of the ring of the center button when the IsOpen is true.
 * 
 * \@optionValue New value to be set.
 * Returns  the width of the outline of the inner rings of the menu.
 * Returns or sets the width of the outline of the inner rings of the menu.
 * 
 * \@optionValue New value to be set.
 * The font for the control
 * The font for the control
 * 
 * \@optionValue New value to be set.
 * Returns  a boolean indicating whether the items of the menu are currently displayed. When closed, only the center button is rendered.
 * Returns or sets a boolean indicating whether the items of the menu are currently displayed. When closed, only the center button is rendered.
 * 
 * \@optionValue New value to be set.
 * Returns  the brush for the backing of the radial menu.
 * Returns or sets the brush for the backing of the radial menu.
 * 
 * \@optionValue New value to be set.
 * Returns  the duration of the animation performed when the IsOpen property is changed.
 * Returns or sets the duration of the animation performed when the IsOpen property is changed.
 * 
 * \@optionValue New value to be set.
 * Returns  the easing function applied to the animation that occurs when the IsOpen property is changed.
 * Returns or sets the easing function applied to the animation that occurs when the IsOpen property is changed.
 * 
 * \@optionValue New value to be set.
 * Returns  the duration of the animation performed when the IsOpen property is changed.
 * Returns or sets the duration of the animation performed when the IsOpen property is changed.
 * 
 * \@optionValue New value to be set.
 * Returns  the easing function applied to the animation that occurs when the IsOpen property is changed.
 * Returns or sets the easing function applied to the animation that occurs when the IsOpen property is changed.
 * 
 * \@optionValue New value to be set.
 * Returns  the minimum number of wedges displayed by the menu.
 * Returns or sets the minimum number of wedges displayed by the menu.
 * 
 * \@optionValue New value to be set.
 * Returns  the background of the outer ring of the menu.
 * Returns or sets the background of the outer ring of the menu.
 * 
 * \@optionValue New value to be set.
 * Returns  the thickness of the outer ring of the menu.
 * Returns or sets the thickness of the outer ring of the menu.
 * 
 * \@optionValue New value to be set.
 * Returns  the brush used for the outline of the outer ring.
 * Returns or sets the brush used for the outline of the outer ring.
 * 
 * \@optionValue New value to be set.
 * Returns  the width of the outline of the outer ring of the menu.
 * Returns or sets the width of the outline of the outer ring of the menu.
 * 
 * \@optionValue New value to be set.
 * Returns  the starting angle of the items in degrees.
 * Returns or sets the starting angle of the items in degrees.
 * 
 * \@optionValue New value to be set.
 * Returns  the starting angle of the items expressed as the percentage of the width of a single wedge/slice.
 * Returns or sets the starting angle of the items expressed as the percentage of the width of a single wedge/slice.
 * 
 * \@optionValue New value to be set.
 * Returns  the amount of padding around each wedge in degrees.
 * Returns or sets the amount of padding around each wedge in degrees.
 * 
 * \@optionValue New value to be set.
 *
 *
 * Invoked when the IsOpen property is changed to false.
 * Function takes a first argument ui.
 * Use ui.owner to obtain reference to menu widget.
 * Invoked when the IsOpen property is changed to false.
 * Function takes a first argument ui.
 * Use ui.owner to obtain reference to menu widget.
 * 
 * \@optionValue New value to be set.
 * Invoked when the IsOpen property is changed to true.
 * Function takes a first argument ui.
 * Use ui.owner to obtain reference to menu widget.
 * Invoked when the IsOpen property is changed to true.
 * Function takes a first argument ui.
 * Use ui.owner to obtain reference to menu widget.
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgRadialMenu} methodName_or_optionLiteral_or_options
 * @param {...string|!IgRadialMenu|?} itemKey_or_optionName_or_options_or_methodParams
 * @return {!Object|void|!Array<!IgRadialMenuItem>|string|number|boolean|?|!ClosedEvent|!OpenedEvent|!JQuery}
 */
JQuery.prototype.igRadialMenu = function(methodName_or_optionLiteral_or_options, itemKey_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function HoverChangeEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function HoverChangeEventUIParam() {}
 /** @type {?} */
HoverChangeEventUIParam.prototype.value;
 /** @type {?} */
HoverChangeEventUIParam.prototype.oldValue;
/**
 * @record
 * @struct
 */
function ValueChangeEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ValueChangeEventUIParam() {}
 /** @type {?} */
ValueChangeEventUIParam.prototype.value;
 /** @type {?} */
ValueChangeEventUIParam.prototype.oldValue;
/**
 * @record
 * @struct
 */
function IgRating() {}
 /** @type {boolean} */
IgRating.prototype.vertical;
 /** @type {(string|number)} */
IgRating.prototype.value;
 /** @type {(string|number)} */
IgRating.prototype.valueHover;
 /** @type {number} */
IgRating.prototype.voteCount;
 /** @type {number} */
IgRating.prototype.voteWidth;
 /** @type {number} */
IgRating.prototype.voteHeight;
 /** @type {boolean} */
IgRating.prototype.swapDirection;
 /** @type {boolean} */
IgRating.prototype.valueAsPercent;
 /** @type {boolean} */
IgRating.prototype.focusable;
 /** @type {string} */
IgRating.prototype.precision;
 /** @type {number} */
IgRating.prototype.precisionZeroVote;
 /** @type {number} */
IgRating.prototype.roundedDecimalPlaces;
 /** @type {string} */
IgRating.prototype.theme;
 /** @type {?} */
IgRating.prototype.validatorOptions;
 /** @type {?} */
IgRating.prototype.cssVotes;
 /** @type {!HoverChangeEvent} */
IgRating.prototype.hoverChange;
 /** @type {!ValueChangeEvent} */
IgRating.prototype.valueChange;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgRatingMethods() {}

/**
 * Gets reference to [igValidator](ui.igvalidator) used by igRating.
 * 
 * @param {boolean=} destroy     Request to destroy validator.
 * @return {!Object}
 */
IgRatingMethods.prototype.validator = function(destroy) {};

/**
 * Triggers validation.
 * @return {boolean}
 */
IgRatingMethods.prototype.validate = function() {};

/**
 * Gets/Sets (selected) value.
 * 
 * @param {number} val     New value which is rendered with selected css.
 * @return {(number|!Object)} number|object     If parameter is not 'number', then exact value rendered with selected css is returned. Otherwise, reference to igRating is returned.
 */
IgRatingMethods.prototype.value = function(val) {};

/**
 * Gets/Sets hover value.
 * 
 * @param {number=} val     New value which will be rendered with hover css when rating gets mouse.
 * @return {(number|!Object)} number|object     If parameter is not "number", then last value which was rendered with hover css is returned. Otherwise, reference to igRating is returned.
 */
IgRatingMethods.prototype.valueHover = function(val) {};

/**
 * Checks if igRating has focus.
 * @return {boolean}
 */
IgRatingMethods.prototype.hasFocus = function() {};

/**
 * Sets focus to igRating. That has effect only when options.focusable is enabled.
 * @return {!Object}
 */
IgRatingMethods.prototype.focus = function() {};

/**
 * Destroys igRating widget.
 * @return {!Object}
 */
IgRatingMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgRatingMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Gets a vertical or horizontal orientation for the votes.
 * Change of that option is not supported after igRating was created.
 * 
 * A vertical or horizontal orientation for the votes.
 * Change of that option is not supported after igRating was created.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets value (selected votes or percent). If the value is of type string, it should be suitable for parsing to number. According to [valueAsPercent](ui.igrating#options:valueAsPercent) options the value is used as number of selected votes or as a percent of the votes.
 * 
 * /Sets value (selected votes or percent). If the value is of type string, it should be suitable for parsing to number. According to [valueAsPercent](ui.igrating#options:valueAsPercent) options the value is used as number of selected votes or as a percent of the votes.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets value-hover (hovered votes or percent of hovered votes). The default is same as value. If the value is of type string, it should be suitable for parsing to number. According to [valueAsPercent](ui.igrating#options:valueAsPercent) options the valueHover is used as number of hovered votes or as a percent of the hovered votes.
 * 
 * /Sets value-hover (hovered votes or percent of hovered votes). The default is same as value. If the value is of type string, it should be suitable for parsing to number. According to [valueAsPercent](ui.igrating#options:valueAsPercent) options the valueHover is used as number of hovered votes or as a percent of the hovered votes.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets number of votes.
 * 
 * /Sets number of votes.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets custom width of a vote in pixels. In case of 0 the run time style value is used.
 * 
 * /Sets custom width of a vote in pixels. In case of 0 the run time style value is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets custom height of a vote in pixels. In case of 0 the run time style value is used.
 * 
 * /Sets custom height of a vote in pixels. In case of 0 the run time style value is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the direction of selected and hovered votes. Change of that option is not supported after igRating was created.
 * Value true: from left to right or from top to bottom.
 * Value false: from right to left or from bottom to left.
 * 
 * The direction of selected and hovered votes. Change of that option is not supported after igRating was created.
 * Value true: from left to right or from top to bottom.
 * Value false: from right to left or from bottom to left.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets percent or vote number to measure value and value-hover.
 * Value true: value is measured as percent (from 0 to 1).
 * Value false: value is measured in number of voted (from 0 to voteCount)
 * 
 * /Sets percent or vote number to measure value and value-hover.
 * Value true: value is measured as percent (from 0 to 1).
 * Value false: value is measured in number of voted (from 0 to voteCount)
 * 
 * 
 * \@optionValue New value to be set.
 * Gets if igRating can have focus. Change of that option is not supported after igRating was created.
 * Value true: can get focus and process key events.
 * Value false: cannot get focus.
 * 
 * If igRating can have focus. Change of that option is not supported after igRating was created.
 * Value true: can get focus and process key events.
 * Value false: cannot get focus.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets precision. Precision of value and valueHover.
 * 
 * /Sets precision. Precision of value and valueHover.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets part of vote-size, which is considered as zero value.
 * It has effect only when precision is set to "half" or "whole".
 * If user clicks between edge of the first vote and (sizeOfVote * precisionZeroVote), then value is set to 0.
 * Same is applied for mouseover as well.
 * 
 * /Sets part of vote-size, which is considered as zero value.
 * It has effect only when precision is set to "half" or "whole".
 * If user clicks between edge of the first vote and (sizeOfVote * precisionZeroVote), then value is set to 0.
 * Same is applied for mouseover as well.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets number of decimal places used to round value and value-hover.
 * Negative value will disable that option and value will not be rounded.
 * Notes:
 * If precision is "whole" or "half" and roundedDecimalPlaces is set in range of 0..2, then 3 is used.
 * If valueAsPercent is enabled and roundedDecimalPlaces is set to 0, then 1 is used.
 * If it is larger than 15, then 15 is used.
 * 
 * /Sets number of decimal places used to round value and value-hover.
 * Negative value will disable that option and value will not be rounded.
 * Notes:
 * If precision is "whole" or "half" and roundedDecimalPlaces is set in range of 0..2, then 3 is used.
 * If valueAsPercent is enabled and roundedDecimalPlaces is set to 0, then 1 is used.
 * If it is larger than 15, then 15 is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets selector for css classes.
 * That option allows replacing all default css styles by custom values.
 * Application should provide css classes for all members defined in the css options with "theme" selector.
 * 
 * /Sets selector for css classes.
 * That option allows replacing all default css styles by custom values.
 * Application should provide css classes for all members defined in the css options with "theme" selector.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets object which contains options supported by igValidator.
 * Note that for onblur validation depends on the [focusable](ui.igrating#options:focusable) option.
 * 
 * /Sets object which contains options supported by igValidator.
 * Note that for onblur validation depends on the [focusable](ui.igrating#options:focusable) option.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets custom css votes.
 * That object should be 2-dimentional array or object with indexes, where every item of first level represents settings for a vote at that index.
 * Second level of an item is settings for a vote and it should contain classes for a specific state of vote.
 * Item at index [0] on second level is used for css class of vote in normal state.
 * Item at index [1] on second level is used for css class of vote in selected state.
 * Item at index [2] on second level is used for css class of vote in hover state.
 * Examples:
 * { 1: { 0: "normalCss", 1: "selectedCss", 2: "hoverCss"} }
 * will customize only second vote with [normalCss](ui.igrating#theming:ui-igrating ui-state-default ui-widget-content) for normal state, [hoverCss](ui.igrating#theming:ui-igrating-hover ui-state-hover) for hover state and [selectedCss](ui.igrating#theming:ui-igrating-voteselected) for selected state.
 * [[null, 's1', 'h1'], [null, 's2', 'h2'], [null, 's3', 'h3']]
 * will customize selected and hover states for first 3 votes with classes h# and s#.
 * 
 * /Sets custom css votes.
 * That object should be 2-dimentional array or object with indexes, where every item of first level represents settings for a vote at that index.
 * Second level of an item is settings for a vote and it should contain classes for a specific state of vote.
 * Item at index [0] on second level is used for css class of vote in normal state.
 * Item at index [1] on second level is used for css class of vote in selected state.
 * Item at index [2] on second level is used for css class of vote in hover state.
 * Examples:
 * { 1: { 0: "normalCss", 1: "selectedCss", 2: "hoverCss"} }
 * will customize only second vote with [normalCss](ui.igrating#theming:ui-igrating ui-state-default ui-widget-content) for normal state, [hoverCss](ui.igrating#theming:ui-igrating-hover ui-state-hover) for hover state and [selectedCss](ui.igrating#theming:ui-igrating-voteselected) for selected state.
 * [[null, 's1', 'h1'], [null, 's2', 'h2'], [null, 's3', 'h3']]
 * will customize selected and hover states for first 3 votes with classes h# and s#.
 * 
 * 
 * \@optionValue New value to be set.
 * Event which is raised before hover value is changed.
 * If application returns false, then action is canceled and hover value stays unchanged.
 * 
 * Function takes arguments evt and ui.
 * Use ui.value to get new value.
 * Use ui.oldValue to get old value.
 * Event which is raised before hover value is changed.
 * If application returns false, then action is canceled and hover value stays unchanged.
 * 
 * Function takes arguments evt and ui.
 * Use ui.value to get new value.
 * Use ui.oldValue to get old value.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before (selected) value is changed.
 * If application returns false, then action is canceled and value stays unchanged.
 * 
 * Function takes arguments evt and ui.
 * Use ui.value to get new value.
 * Use ui.oldValue to get old value.
 * Event which is raised before (selected) value is changed.
 * If application returns false, then action is canceled and value stays unchanged.
 * 
 * Function takes arguments evt and ui.
 * Use ui.value to get new value.
 * Use ui.oldValue to get old value.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgRating} methodName_or_optionLiteral_or_options
 * @param {...boolean|number|string|!IgRating|?=} destroy_or_val_or_optionName_or_options_or_methodParams
 * @return {!Object|boolean|(number|!Object)|void|(string|number)|number|string|?|!HoverChangeEvent|!ValueChangeEvent|!JQuery}
 */
JQuery.prototype.igRating = function(methodName_or_optionLiteral_or_options, destroy_or_val_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function ScrollingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ScrollingEventUIParam() {}
 /** @type {?} */
ScrollingEventUIParam.prototype.owner;
 /** @type {?} */
ScrollingEventUIParam.prototype.smallIncrement;
 /** @type {?} */
ScrollingEventUIParam.prototype.bigIncrement;
 /** @type {?} */
ScrollingEventUIParam.prototype.horizontal;
 /** @type {?} */
ScrollingEventUIParam.prototype.stepX;
 /** @type {?} */
ScrollingEventUIParam.prototype.stepY;
/**
 * @record
 * @struct
 */
function ScrolledEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ScrolledEventUIParam() {}
 /** @type {?} */
ScrolledEventUIParam.prototype.owner;
 /** @type {?} */
ScrolledEventUIParam.prototype.smallIncrement;
 /** @type {?} */
ScrolledEventUIParam.prototype.bigIncrement;
 /** @type {?} */
ScrolledEventUIParam.prototype.horizontal;
/**
 * @record
 * @struct
 */
function ThumbDragStartEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ThumbDragStartEventUIParam() {}
 /** @type {?} */
ThumbDragStartEventUIParam.prototype.owner;
 /** @type {?} */
ThumbDragStartEventUIParam.prototype.horizontal;
/**
 * @record
 * @struct
 */
function ThumbDragMoveEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ThumbDragMoveEventUIParam() {}
 /** @type {?} */
ThumbDragMoveEventUIParam.prototype.owner;
 /** @type {?} */
ThumbDragMoveEventUIParam.prototype.horizontal;
 /** @type {?} */
ThumbDragMoveEventUIParam.prototype.stepX;
 /** @type {?} */
ThumbDragMoveEventUIParam.prototype.stepY;
/**
 * @record
 * @struct
 */
function ThumbDragEndEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ThumbDragEndEventUIParam() {}
 /** @type {?} */
ThumbDragEndEventUIParam.prototype.owner;
 /** @type {?} */
ThumbDragEndEventUIParam.prototype.horizontal;
/**
 * @record
 * @struct
 */
function IgScroll() {}
 /** @type {boolean} */
IgScroll.prototype.alwaysVisible;
 /** @type {string} */
IgScroll.prototype.scrollbarType;
 /** @type {boolean} */
IgScroll.prototype.modifyDOM;
 /** @type {number} */
IgScroll.prototype.scrollHeight;
 /** @type {number} */
IgScroll.prototype.scrollWidth;
 /** @type {number} */
IgScroll.prototype.scrollTop;
 /** @type {number} */
IgScroll.prototype.scrollLeft;
 /** @type {number} */
IgScroll.prototype.wheelStep;
 /** @type {number} */
IgScroll.prototype.smallIncrementStep;
 /** @type {number} */
IgScroll.prototype.bigIncrementStep;
 /** @type {boolean} */
IgScroll.prototype.smoothing;
 /** @type {number} */
IgScroll.prototype.smoothingStep;
 /** @type {number} */
IgScroll.prototype.smoothingDuration;
 /** @type {number} */
IgScroll.prototype.inertiaStep;
 /** @type {number} */
IgScroll.prototype.inertiaDuration;
 /** @type {number} */
IgScroll.prototype.swipeToleranceX;
 /** @type {number} */
IgScroll.prototype.inertiaDeltaX;
 /** @type {number} */
IgScroll.prototype.inertiaDeltaY;
 /** @type {!Array<?>} */
IgScroll.prototype.syncedElemsH;
 /** @type {!Array<?>} */
IgScroll.prototype.syncedElemsV;
 /** @type {string} */
IgScroll.prototype.scrollbarH;
 /** @type {string} */
IgScroll.prototype.scrollbarV;
 /** @type {boolean} */
IgScroll.prototype.scrollOnlyHBar;
 /** @type {boolean} */
IgScroll.prototype.scrollOnlyVBar;
 /** @type {string} */
IgScroll.prototype.scrollbarHParent;
 /** @type {string} */
IgScroll.prototype.scrollbarVParent;
 /** @type {!RenderedEvent} */
IgScroll.prototype.rendered;
 /** @type {!ScrollingEvent} */
IgScroll.prototype.scrolling;
 /** @type {!ScrolledEvent} */
IgScroll.prototype.scrolled;
 /** @type {!ThumbDragStartEvent} */
IgScroll.prototype.thumbDragStart;
 /** @type {!ThumbDragMoveEvent} */
IgScroll.prototype.thumbDragMove;
 /** @type {!ThumbDragEndEvent} */
IgScroll.prototype.thumbDragEnd;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgScrollMethods() {}

/**
 * @return {void}
 */
IgScrollMethods.prototype.refresh = function() {};

/**
 * @param {!Object} optionName
 * @param {!Object} value
 * @return {void}
 */
IgScrollMethods.prototype.option = function(optionName, value) {};

/**
 * @return {void}
 */
IgScrollMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgScrollMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Sets or gets if the scrollbars should be always visible (on all environments). Otherwise it will be the default behavior. Note: this option is only for the custom scrollbars set through the scrollbarType option.
 * 
 * Sets or gets if the scrollbars should be always visible (on all environments). Otherwise it will be the default behavior. Note: this option is only for the custom scrollbars set through the scrollbarType option.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets or gets what type of scrollbars should be using the igScroll (on all environments).
 * 
 * Sets or gets what type of scrollbars should be using the igScroll (on all environments).
 * 
 * 
 * \@optionValue New value to be set.
 * Sets or gets if igScroll can modify the DOM when it is initialized on certain element so that the content can be scrollable.
 * 
 * Sets or gets if igScroll can modify the DOM when it is initialized on certain element so that the content can be scrollable.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets custom value for how high is actually the content. Useful when wanting to scroll and update the shown content manually.
 * 
 * Sets custom value for how high is actually the content. Useful when wanting to scroll and update the shown content manually.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets custom value for what width is actually the content. Useful when wanting to scroll and update the shown content manually.
 * 
 * Sets custom value for what width is actually the content. Useful when wanting to scroll and update the shown content manually.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets gets current vertical position of the content.
 * 
 * Sets gets current vertical position of the content.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets gets current horizontal position of the content.
 * 
 * Sets gets current horizontal position of the content.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets gets the step of the default scrolling behavior when using mouse wheel
 * 
 * Sets gets the step of the default scrolling behavior when using mouse wheel
 * 
 * 
 * \@optionValue New value to be set.
 * Sets gets the step of the default scrolling behavior when using any of the custom scrollbar arrows
 * 
 * Sets gets the step of the default scrolling behavior when using any of the custom scrollbar arrows
 * 
 * 
 * \@optionValue New value to be set.
 * Sets gets the step of the default scrolling behavior when using any of the custom scrollbar track areas.
 * 
 * Sets gets the step of the default scrolling behavior when using any of the custom scrollbar track areas.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets gets if smoother scrolling with small intertia should be used when using mouse wheel
 * 
 * Sets gets if smoother scrolling with small intertia should be used when using mouse wheel
 * 
 * 
 * \@optionValue New value to be set.
 * Sets or gets the modifier for how many pixels will be scrolled when using the mouse wheel once. This is used only for the smooth scrolling behavior.
 * 
 * Sets or gets the modifier for how many pixels will be scrolled when using the mouse wheel once. This is used only for the smooth scrolling behavior.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets or gets the modifier for how long the scroll ‘animation’ lasts when using the mouse wheel once. This is used only for the smooth scrolling behavior.
 * 
 * Sets or gets the modifier for how long the scroll ‘animation’ lasts when using the mouse wheel once. This is used only for the smooth scrolling behavior.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets gets the modifier for how much the inertia scrolls on mobile devices
 * 
 * Sets gets the modifier for how much the inertia scrolls on mobile devices
 * 
 * 
 * \@optionValue New value to be set.
 * Sets gets the modifier for how long the inertia last on mobile devices
 * 
 * Sets gets the modifier for how long the inertia last on mobile devices
 * 
 * 
 * \@optionValue New value to be set.
 * Sets gets how much pixels of toleration there will be when initially swiping horizontally. This is to improve swiping up/down without scrolling left/right when not intended due to small deviation left/right
 * 
 * Sets gets how much pixels of toleration there will be when initially swiping horizontally. This is to improve swiping up/down without scrolling left/right when not intended due to small deviation left/right
 * 
 * 
 * \@optionValue New value to be set.
 * Sets gets at least how many times the horizontal speed should be bigger so the inertia proceeds only horizontally without scrolling vertically. This is to improve interactions due to not perfectly swiping left/right with some deviation down/up
 * 
 * Sets gets at least how many times the horizontal speed should be bigger so the inertia proceeds only horizontally without scrolling vertically. This is to improve interactions due to not perfectly swiping left/right with some deviation down/up
 * 
 * 
 * \@optionValue New value to be set.
 * Sets gets at least how many times the vertical speed should be bigger so the inertia proceeds only vertically without scrolling horizontally. This is to improve interactions due to not perfectly swiping down/up with some deviation left/right
 * 
 * Sets gets at least how many times the vertical speed should be bigger so the inertia proceeds only vertically without scrolling horizontally. This is to improve interactions due to not perfectly swiping down/up with some deviation left/right
 * 
 * 
 * \@optionValue New value to be set.
 * Sets gets elements that are linked to the main content horizontally. When the content is scrolled on X axis the linked elements scroll accordingly.
 * 
 * Sets gets elements that are linked to the main content horizontally. When the content is scrolled on X axis the linked elements scroll accordingly.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets gets elements that are linked to the main content vertically. When the content is scrolled on Y axis the linked elements scroll accordingly.
 * 
 * Sets gets elements that are linked to the main content vertically. When the content is scrolled on Y axis the linked elements scroll accordingly.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets gets html or jQuery element which is used for horizontal scrolling.
 * 
 * Sets gets html or jQuery element which is used for horizontal scrolling.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets gets html or jQuery element which is used for vertical scrolling.
 * 
 * Sets gets html or jQuery element which is used for vertical scrolling.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets gets if only the linked horizontal scrollbar should be used for horizontal scrolling. Note: The behavior when the linked scrollbar is scrolled in this case should be handled manually.
 * 
 * Sets gets if only the linked horizontal scrollbar should be used for horizontal scrolling. Note: The behavior when the linked scrollbar is scrolled in this case should be handled manually.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets gets if only the linked vertical scrollbar should be used for vertical scrolling. Note: The behavior when the linked scrollbar is scrolled in this case should be handled manually.
 * 
 * Sets gets if only the linked vertical scrollbar should be used for vertical scrolling. Note: The behavior when the linked scrollbar is scrolled in this case should be handled manually.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets gets html or jQuery element to which the horizontal scrollbar will be appended to.
 * 
 * Sets gets html or jQuery element to which the horizontal scrollbar will be appended to.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets gets html or jQuery element to which the vertical scrollbar will be appended to.
 * 
 * Sets gets html or jQuery element to which the vertical scrollbar will be appended to.
 * 
 * 
 * \@optionValue New value to be set.
 * Event which is raised after the scroller has been rendered fully
 * Function takes arguments evt and args.
 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
 * Use args.owner to obtain reference to igScroll.
 * Event which is raised after the scroller has been rendered fully
 * Function takes arguments evt and args.
 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
 * Use args.owner to obtain reference to igScroll.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before scrolling or before each step when having inertia.
 * Return false in order to cancel action.
 * Function takes arguments evt and args.
 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
 * Use args.owner to obtain reference to igScroll.
 * Use args.smallIncrement to obtain if the content is scrolled by the arrows. 0 - none used, -1 - Arrow Up/Left, 1 - Arrow Down/Right.
 * Use args.bigIncrement to obtain if the content is scrolled by the scrollbar track areas. 0 - none used, -1 - Scrolled Up/Left, 1 - Scrolled Down/Right.
 * Use args.horizontal to obtain which axis is being used to scroll - horizontal(true) or vertical(false).
 * Use args.stepX to obtain how much the content will be scrolled horizontally
 * Use args.stepY to obtain how much the content will be scrolled vertically
 * Event which is raised before scrolling or before each step when having inertia.
 * Return false in order to cancel action.
 * Function takes arguments evt and args.
 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
 * Use args.owner to obtain reference to igScroll.
 * Use args.smallIncrement to obtain if the content is scrolled by the arrows. 0 - none used, -1 - Arrow Up/Left, 1 - Arrow Down/Right.
 * Use args.bigIncrement to obtain if the content is scrolled by the scrollbar track areas. 0 - none used, -1 - Scrolled Up/Left, 1 - Scrolled Down/Right.
 * Use args.horizontal to obtain which axis is being used to scroll - horizontal(true) or vertical(false).
 * Use args.stepX to obtain how much the content will be scrolled horizontally
 * Use args.stepY to obtain how much the content will be scrolled vertically
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after scrolling has stopped.
 * Function takes arguments evt and args.
 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
 * Use args.owner to obtain reference to igScroll.
 * Use args.smallIncrement to obtain if the content is scrolled by the arrows. 0 - none used, -1 - Arrow Up/Left, 1 - Arrow Down/Right.
 * Use args.bigIncrement to obtain if the content is scrolled by the scrollbar track areas. 0 - none used, -1 - Scrolled Up/Left, 1 - Scrolled Down/Right.
 * Use args.horizontal to obtain which axis is being used to scroll - horizontal(true) or vertical(false).
 * Event which is raised after scrolling has stopped.
 * Function takes arguments evt and args.
 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
 * Use args.owner to obtain reference to igScroll.
 * Use args.smallIncrement to obtain if the content is scrolled by the arrows. 0 - none used, -1 - Arrow Up/Left, 1 - Arrow Down/Right.
 * Use args.bigIncrement to obtain if the content is scrolled by the scrollbar track areas. 0 - none used, -1 - Scrolled Up/Left, 1 - Scrolled Down/Right.
 * Use args.horizontal to obtain which axis is being used to scroll - horizontal(true) or vertical(false).
 * 
 * \@optionValue Define event handler function.
 * Event which is raised when there is mouse click on the scrollbar's thumb drag.
 * Function takes arguments evt and args.
 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
 * Use args.owner to obtain reference to igScroll.
 * Use args.horizontal to obtain which scrollbar thumb is being used - horizontal(true) or vertical(false).
 * Event which is raised when there is mouse click on the scrollbar's thumb drag.
 * Function takes arguments evt and args.
 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
 * Use args.owner to obtain reference to igScroll.
 * Use args.horizontal to obtain which scrollbar thumb is being used - horizontal(true) or vertical(false).
 * 
 * \@optionValue Define event handler function.
 * Event which is raised when the thumb drag is being moved.
 * Return false in order to cancel action.
 * Function takes arguments evt and args.
 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
 * Use args.owner to obtain reference to igScroll.
 * Use args.horizontal to obtain which scrollbar thumb is being used - horizontal(true) or vertical(false).
 * Use args.stepX to obtain how much the content will be scrolled horizontally
 * Use args.stepY to obtain how much the content will be scrolled vertically
 * Event which is raised when the thumb drag is being moved.
 * Return false in order to cancel action.
 * Function takes arguments evt and args.
 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
 * Use args.owner to obtain reference to igScroll.
 * Use args.horizontal to obtain which scrollbar thumb is being used - horizontal(true) or vertical(false).
 * Use args.stepX to obtain how much the content will be scrolled horizontally
 * Use args.stepY to obtain how much the content will be scrolled vertically
 * 
 * \@optionValue Define event handler function.
 * Event which is raised on mouse up from the scrollbar's thumb drag.
 * Function takes arguments evt and args.
 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
 * Use args.owner to obtain reference to igScroll.
 * Use args.horizontal to obtain which scrollbar thumb is being used - horizontal(true) or vertical(false).
 * Event which is raised on mouse up from the scrollbar's thumb drag.
 * Function takes arguments evt and args.
 * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
 * Use args.owner to obtain reference to igScroll.
 * Use args.horizontal to obtain which scrollbar thumb is being used - horizontal(true) or vertical(false).
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgScroll} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgScroll|?} optionName_or_options_or_methodParams
 * @return {void|boolean|string|number|!Array<?>|!RenderedEvent|!ScrollingEvent|!ScrolledEvent|!ThumbDragStartEvent|!ThumbDragMoveEvent|!ThumbDragEndEvent|!JQuery|?}
 */
JQuery.prototype.igScroll = function(methodName_or_optionLiteral_or_options, optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgLoading() {}
 /** @type {?} */
IgLoading.prototype.cssClass;
 /** @type {boolean} */
IgLoading.prototype.includeVerticalOffset;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgLoadingMethods() {}

/**
 * @return {void}
 */
IgLoadingMethods.prototype.indicatorElement = function() {};

/**
 * @return {void}
 */
IgLoadingMethods.prototype.indicator = function() {};

/**
 * @param {!Object} refresh
 * @return {void}
 */
IgLoadingMethods.prototype.show = function(refresh) {};

/**
 * @return {void}
 */
IgLoadingMethods.prototype.hide = function() {};

/**
 * @return {void}
 */
IgLoadingMethods.prototype.refreshPos = function() {};

/**
 * @return {void}
 */
IgLoadingMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgLoadingMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function IgSliderBookmarks() {}
 /** @type {number} */
IgSliderBookmarks.prototype.value;
 /** @type {string} */
IgSliderBookmarks.prototype.title;
 /** @type {boolean} */
IgSliderBookmarks.prototype.disabled;
 /** @type {string} */
IgSliderBookmarks.prototype.css;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function StartEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function StartEventUIParam() {}
/**
 * @record
 * @struct
 */
function SlideEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SlideEventUIParam() {}
/**
 * @record
 * @struct
 */
function StopEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function StopEventUIParam() {}
/**
 * @record
 * @struct
 */
function ChangeEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ChangeEventUIParam() {}
/**
 * @record
 * @struct
 */
function BookmarkHitEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function BookmarkHitEventUIParam() {}
/**
 * @record
 * @struct
 */
function BookmarkClickEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function BookmarkClickEventUIParam() {}
/**
 * @record
 * @struct
 */
function IgSlider() {}
 /** @type {boolean} */
IgSlider.prototype.animate;
 /** @type {number} */
IgSlider.prototype.max;
 /** @type {number} */
IgSlider.prototype.min;
 /** @type {?} */
IgSlider.prototype.orientation;
 /** @type {number} */
IgSlider.prototype.step;
 /** @type {number} */
IgSlider.prototype.value;
 /** @type {!IgSliderBookmarks} */
IgSlider.prototype.bookmarks;
 /** @type {boolean} */
IgSlider.prototype.showBookmarkTitle;
 /** @type {boolean} */
IgSlider.prototype.syncHandleWithBookmark;
 /** @type {!StartEvent} */
IgSlider.prototype.start;
 /** @type {!SlideEvent} */
IgSlider.prototype.slide;
 /** @type {!StopEvent} */
IgSlider.prototype.stop;
 /** @type {!ChangeEvent} */
IgSlider.prototype.change;
 /** @type {!BookmarkHitEvent} */
IgSlider.prototype.bookmarkHit;
 /** @type {!BookmarkClickEvent} */
IgSlider.prototype.bookmarkClick;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgSliderMethods() {}

/**
 * @return {void}
 */
IgSliderMethods.prototype.widget = function() {};

/**
 * @return {void}
 */
IgSliderMethods.prototype.destroy = function() {};

/**
 * @return {void}
 */
IgSliderMethods.prototype.clearBookmarks = function() {};

/**
 * @param {!Object} newValue
 * @return {void}
 */
IgSliderMethods.prototype.value = function(newValue) {};

/**
 * @param {string} propertyName
 * @return {!IgSliderMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function IgProgressBar() {}
 /** @type {boolean} */
IgProgressBar.prototype.animate;
 /** @type {number} */
IgProgressBar.prototype.animateTimeout;
 /** @type {number} */
IgProgressBar.prototype.max;
 /** @type {number} */
IgProgressBar.prototype.min;
 /** @type {string} */
IgProgressBar.prototype.orientation;
 /** @type {number} */
IgProgressBar.prototype.value;
 /** @type {string} */
IgProgressBar.prototype.width;
 /** @type {string} */
IgProgressBar.prototype.height;
 /** @type {boolean} */
IgProgressBar.prototype.range;
 /** @type {boolean} */
IgProgressBar.prototype.queue;
 /** @type {number} */
IgProgressBar.prototype.endValue;
 /** @type {!ChangeEvent} */
IgProgressBar.prototype.change;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgProgressBarMethods() {}

/**
 * @return {void}
 */
IgProgressBarMethods.prototype.widget = function() {};

/**
 * @return {void}
 */
IgProgressBarMethods.prototype.destroy = function() {};

/**
 * @param {!Object} newValue
 * @return {void}
 */
IgProgressBarMethods.prototype.value = function(newValue) {};

/**
 * @param {string} propertyName
 * @return {!IgProgressBarMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function IgButtonLink() {}
 /** @type {?} */
IgButtonLink.prototype.href;
 /** @type {?} */
IgButtonLink.prototype.target;
 /** @type {?} */
IgButtonLink.prototype.title;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgButtonIcons() {}
 /** @type {?} */
IgButtonIcons.prototype.primary;
 /** @type {?} */
IgButtonIcons.prototype.secondary;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgButton() {}
 /** @type {?} */
IgButton.prototype.width;
 /** @type {?} */
IgButton.prototype.height;
 /** @type {!IgButtonLink} */
IgButton.prototype.link;
 /** @type {string} */
IgButton.prototype.labelText;
 /** @type {boolean} */
IgButton.prototype.centerLabel;
 /** @type {?} */
IgButton.prototype.css;
 /** @type {boolean} */
IgButton.prototype.onlyIcons;
 /** @type {!IgButtonIcons} */
IgButton.prototype.icons;
 /** @type {boolean} */
IgButton.prototype.title;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgButtonMethods() {}

/**
 * @param {!Object} title
 * @return {void}
 */
IgButtonMethods.prototype.setTitle = function(title) {};

/**
 * @return {void}
 */
IgButtonMethods.prototype.widget = function() {};

/**
 * @return {void}
 */
IgButtonMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgButtonMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function IgTooltip() {}
 /** @type {string} */
IgTooltip.prototype.text;
 /** @type {string} */
IgTooltip.prototype.arrowLocation;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgTooltipMethods() {}

/**
 * @return {void}
 */
IgTooltipMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgTooltipMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function CaptureEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function CaptureEventUIParam() {}
/**
 * @record
 * @struct
 */
function MouseWrapper() {}
 /** @type {string} */
MouseWrapper.prototype.cancel;
 /** @type {number} */
MouseWrapper.prototype.distance;
 /** @type {number} */
MouseWrapper.prototype.delay;
 /** @type {!StartEvent} */
MouseWrapper.prototype.start;
 /** @type {!DragEvent} */
MouseWrapper.prototype.drag;
 /** @type {!StopEvent} */
MouseWrapper.prototype.stop;
 /** @type {!CaptureEvent} */
MouseWrapper.prototype.capture;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function MouseWrapperMethods() {}

/**
 * @return {void}
 */
MouseWrapperMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!MouseWrapperMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function IgResponsiveContainer() {}
 /** @type {number} */
IgResponsiveContainer.prototype.pollingInterval;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgResponsiveContainerMethods() {}

/**
 * Destroys the ResponsiveContainer widget
 * @return {void}
 */
IgResponsiveContainerMethods.prototype.destroy = function() {};

/**
 * Starts the automatic size check procedure
 * @return {void}
 */
IgResponsiveContainerMethods.prototype.startPoller = function() {};

/**
 * Stops the automatic size check procedure
 * @return {void}
 */
IgResponsiveContainerMethods.prototype.stopPoller = function() {};

/**
 * Removes a callback from the callbacks collection.
 * 
 * @param {number} callbackId    The callback id to remove.
 * @return {void}
 */
IgResponsiveContainerMethods.prototype.removeCallback = function(callbackId) {};

/**
 * Adds a callback to the callback collection.
 * 
 * @param {!Function} callback    The function to call when requirements are met.
 * @param {!Object} owner    The owner object of the function.
 * @param {number} reactionStep    The sensitivity of the size change recognition.
 * @param {!Object} reactionDirection    The dimensions the changes of which to be traced.
 * @return {void}
 */
IgResponsiveContainerMethods.prototype.addCallback = function(callback, owner, reactionStep, reactionDirection) {};

/**
 * @param {string} propertyName
 * @return {!IgResponsiveContainerMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 *
 *
 *
 *
 * @param {string|!IgLoading} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgLoading|?} refresh_or_optionName_or_options_or_methodParams
 * @return {void|?|boolean|!JQuery}
 */
JQuery.prototype.igLoading = function(methodName_or_optionLiteral_or_options, refresh_or_optionName_or_options_or_methodParams) {};

/**
 * Get or set whether the slide handle will animate when it is moved.
 * Get or set whether the slide handle will animate when it is moved.
 * 
 * \@optionValue New value to be set.
 * Get or set the slider range maximum value.
 * Get or set the slider range maximum value.
 * 
 * \@optionValue New value to be set.
 * Get or set the slider range minimum value.
 * Get or set the slider range minimum value.
 * 
 * \@optionValue New value to be set.
 * Get or set the slider orientation.
 * Get or set the slider orientation.
 * 
 * \@optionValue New value to be set.
 * Get or set the step with which the value is increased.
 * Get or set the step with which the value is increased.
 * 
 * \@optionValue New value to be set.
 * Get or set the slider value.
 * Get or set the slider value.
 * 
 * \@optionValue New value to be set.
 * Get or set the bookmarks array.
 * Get or set the bookmarks array.
 * 
 * \@optionValue New value to be set.
 * Get or set the whether to show bookmarks title on bookmark hover or not.
 * Get or set the whether to show bookmarks title on bookmark hover or not.
 * 
 * \@optionValue New value to be set.
 * Get or set whether the handle will be moved to the bookmark position when a bookmark is clicked.
 * Get or set whether the handle will be moved to the bookmark position when a bookmark is clicked.
 * 
 * \@optionValue New value to be set.
 * Defines the slide start event.
 * Defines the slide start event.
 * 
 * \@optionValue New value to be set.
 * Defines the slide event. Fired when the user is sliding with mouse.
 * Defines the slide event. Fired when the user is sliding with mouse.
 * 
 * \@optionValue New value to be set.
 * Defines the slide stop event. Fired to mark the end of a sliding action.
 * Defines the slide stop event. Fired to mark the end of a sliding action.
 * 
 * \@optionValue New value to be set.
 * Defines the slider value change event. Fired when the value of the slider changes. It fires after the slide event.
 * Defines the slider value change event. Fired when the value of the slider changes. It fires after the slide event.
 * 
 * \@optionValue New value to be set.
 * Defines the slider bookmark hit event. Fired when the slider handle passes after the bookmark value.
 * Defines the slider bookmark hit event. Fired when the slider handle passes after the bookmark value.
 * 
 * \@optionValue New value to be set.
 * Defines the slider bookmark click event. Fired when a bookmark is clicked.
 * Defines the slider bookmark click event. Fired when a bookmark is clicked.
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgSlider} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgSlider|?} newValue_or_optionName_or_options_or_methodParams
 * @return {void|boolean|number|?|!IgSliderBookmarks|!StartEvent|!SlideEvent|!StopEvent|!ChangeEvent|!BookmarkHitEvent|!BookmarkClickEvent|!JQuery}
 */
JQuery.prototype.igSlider = function(methodName_or_optionLiteral_or_options, newValue_or_optionName_or_options_or_methodParams) {};

/**
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 * A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately.
 * A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately.
 * 
 * \@optionValue New value to be set.
 *
 *
 *
 *
 * @param {string|!IgProgressBar} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgProgressBar|?} newValue_or_optionName_or_options_or_methodParams
 * @return {void|boolean|number|string|!ChangeEvent|!JQuery|?}
 */
JQuery.prototype.igProgressBar = function(methodName_or_optionLiteral_or_options, newValue_or_optionName_or_options_or_methodParams) {};

/**
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 * @param {string|!IgButton} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgButton|?} title_or_optionName_or_options_or_methodParams
 * @return {void|?|!IgButtonLink|string|boolean|!IgButtonIcons|!JQuery}
 */
JQuery.prototype.igButton = function(methodName_or_optionLiteral_or_options, title_or_optionName_or_options_or_methodParams) {};

/**
 *
 *
 *
 *
 * @param {string|!IgTooltip} methodName_or_optionLiteral_or_options
 * @param {...string|!IgTooltip|?} optionName_or_options_or_methodParams
 * @return {void|string|!JQuery|?}
 */
JQuery.prototype.igTooltip = function(methodName_or_optionLiteral_or_options, optionName_or_options_or_methodParams) {};

/**
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 * @param {string|!MouseWrapper} methodName_or_optionLiteral_or_options
 * @param {...string|!MouseWrapper|?} optionName_or_options_or_methodParams
 * @return {void|string|number|!StartEvent|!DragEvent|!StopEvent|!CaptureEvent|!JQuery|?}
 */
JQuery.prototype.mouseWrapper = function(methodName_or_optionLiteral_or_options, optionName_or_options_or_methodParams) {};

/**
 * The time between two resize checks in milliseconds.
 * The time between two resize checks in milliseconds.
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgResponsiveContainer} methodName_or_optionLiteral_or_options
 * @param {...number|!Function|string|!IgResponsiveContainer|?} callbackId_or_callback_or_optionName_or_options_or_methodParams
 * @return {void|number|!JQuery|?}
 */
JQuery.prototype.igResponsiveContainer = function(methodName_or_optionLiteral_or_options, callbackId_or_callback_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgSparkline() {}
 /** @type {(string|number)} */
IgSparkline.prototype.width;
 /** @type {(string|number)} */
IgSparkline.prototype.height;
 /** @type {string} */
IgSparkline.prototype.brush;
 /** @type {string} */
IgSparkline.prototype.negativeBrush;
 /** @type {string} */
IgSparkline.prototype.markerBrush;
 /** @type {string} */
IgSparkline.prototype.negativeMarkerBrush;
 /** @type {string} */
IgSparkline.prototype.firstMarkerBrush;
 /** @type {string} */
IgSparkline.prototype.lastMarkerBrush;
 /** @type {string} */
IgSparkline.prototype.highMarkerBrush;
 /** @type {string} */
IgSparkline.prototype.lowMarkerBrush;
 /** @type {string} */
IgSparkline.prototype.trendLineBrush;
 /** @type {string} */
IgSparkline.prototype.horizontalAxisBrush;
 /** @type {string} */
IgSparkline.prototype.verticalAxisBrush;
 /** @type {string} */
IgSparkline.prototype.normalRangeFill;
 /** @type {string} */
IgSparkline.prototype.horizontalAxisVisibility;
 /** @type {string} */
IgSparkline.prototype.verticalAxisVisibility;
 /** @type {string} */
IgSparkline.prototype.markerVisibility;
 /** @type {string} */
IgSparkline.prototype.negativeMarkerVisibility;
 /** @type {string} */
IgSparkline.prototype.firstMarkerVisibility;
 /** @type {string} */
IgSparkline.prototype.lastMarkerVisibility;
 /** @type {string} */
IgSparkline.prototype.lowMarkerVisibility;
 /** @type {string} */
IgSparkline.prototype.highMarkerVisibility;
 /** @type {string} */
IgSparkline.prototype.normalRangeVisibility;
 /** @type {boolean} */
IgSparkline.prototype.displayNormalRangeInFront;
 /** @type {number} */
IgSparkline.prototype.markerSize;
 /** @type {number} */
IgSparkline.prototype.firstMarkerSize;
 /** @type {number} */
IgSparkline.prototype.lastMarkerSize;
 /** @type {number} */
IgSparkline.prototype.highMarkerSize;
 /** @type {number} */
IgSparkline.prototype.lowMarkerSize;
 /** @type {number} */
IgSparkline.prototype.negativeMarkerSize;
 /** @type {number} */
IgSparkline.prototype.lineThickness;
 /** @type {string} */
IgSparkline.prototype.valueMemberPath;
 /** @type {string} */
IgSparkline.prototype.labelMemberPath;
 /** @type {string} */
IgSparkline.prototype.trendLineType;
 /** @type {number} */
IgSparkline.prototype.trendLinePeriod;
 /** @type {number} */
IgSparkline.prototype.trendLineThickness;
 /** @type {number} */
IgSparkline.prototype.normalRangeMinimum;
 /** @type {number} */
IgSparkline.prototype.normalRangeMaximum;
 /** @type {string} */
IgSparkline.prototype.displayType;
 /** @type {string} */
IgSparkline.prototype.unknownValuePlotting;
 /** @type {?} */
IgSparkline.prototype.verticalAxisLabel;
 /** @type {?} */
IgSparkline.prototype.horizontalAxisLabel;
 /** @type {?} */
IgSparkline.prototype.formatLabel;
 /** @type {number} */
IgSparkline.prototype.pixelScalingRatio;
 /** @type {string} */
IgSparkline.prototype.tooltipTemplate;
 /** @type {number} */
IgSparkline.prototype.maxRecCount;
 /** @type {?} */
IgSparkline.prototype.dataSource;
 /** @type {string} */
IgSparkline.prototype.dataSourceType;
 /** @type {string} */
IgSparkline.prototype.dataSourceUrl;
 /** @type {string} */
IgSparkline.prototype.responseTotalRecCountKey;
 /** @type {string} */
IgSparkline.prototype.responseDataKey;
 /** @type {!DataBindingEvent} */
IgSparkline.prototype.dataBinding;
 /** @type {!DataBoundEvent} */
IgSparkline.prototype.dataBound;
 /** @type {!UpdateTooltipEvent} */
IgSparkline.prototype.updateTooltip;
 /** @type {!HideTooltipEvent} */
IgSparkline.prototype.hideTooltip;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgSparklineMethods() {}

/**
 * @return {void}
 */
IgSparklineMethods.prototype.destroy = function() {};

/**
 * Find index of item within actual data used by chart.
 * 
 * @param {!Object} item     The reference to item.
 * @return {number}
 */
IgSparklineMethods.prototype.findIndexOfItem = function(item) {};

/**
 * Get item within actual data used by chart. That is similar to this.getData()[ index ].
 * 
 * @param {!Object} index     Index of data item.
 * @return {!Object}
 */
IgSparklineMethods.prototype.getDataItem = function(index) {};

/**
 * Get reference of actual data used by chart.
 * @return {!Array<?>}
 */
IgSparklineMethods.prototype.getData = function() {};

/**
 * Adds a new item to the data source and notifies the chart.
 * 
 * @param {!Object} item     The item that we want to add to the data source.
 * @return {!Object}
 */
IgSparklineMethods.prototype.addItem = function(item) {};

/**
 * Inserts a new item to the data source and notifies the chart.
 * 
 * @param {!Object} item     the new item that we want to insert in the data source.
 * @param {number} index     The index in the data source where the new item will be inserted.
 * @return {!Object}
 */
IgSparklineMethods.prototype.insertItem = function(item, index) {};

/**
 * Deletes an item from the data source and notifies the chart.
 * 
 * @param {number} index     The index in the data source from where the item will be been removed.
 * @return {!Object}
 */
IgSparklineMethods.prototype.removeItem = function(index) {};

/**
 * Updates an item in the data source and notifies the chart.
 * 
 * @param {number} index     The index of the item in the data source that we want to change.
 * @param {!Object} item     The new item object that will be set in the data source.
 * @return {!Object}
 */
IgSparklineMethods.prototype.setItem = function(index, item) {};

/**
 * Notifies the chart that an item has been set in an associated data source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @param {number} index     The index in the items source that has been changed.
 * @param {!Object} newItem     the new item that has been set in the collection.
 * @param {!Object} oldItem     the old item that has been overwritten in the collection.
 * @return {!Object}
 */
IgSparklineMethods.prototype.notifySetItem = function(dataSource, index, newItem, oldItem) {};

/**
 * Notifies the chart that the items have been cleared from an associated data source.
 * It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @return {!Object}
 */
IgSparklineMethods.prototype.notifyClearItems = function(dataSource) {};

/**
 * Notifies the target axis or series that an item has been inserted at the specified index in its data source.
 * It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @param {number} index     The index in the items source where the new item has been inserted.
 * @param {!Object} newItem     the new item that has been set in the collection.
 * @return {!Object}
 */
IgSparklineMethods.prototype.notifyInsertItem = function(dataSource, index, newItem) {};

/**
 * Notifies the target axis or series that an item has been removed from the specified index in its data source.
 * It's not necessary to notify more than one target of a change if they share the same items source.
 * 
 * @param {!Object} dataSource     The data source in which the change happened.
 * @param {number} index     The index in the items source from where the old item has been removed.
 * @param {!Object} oldItem     the old item that has been removed from the collection.
 * @return {!Object}
 */
IgSparklineMethods.prototype.notifyRemoveItem = function(dataSource, index, oldItem) {};

/**
 * Get reference to chart object.
 * @return {!Object}
 */
IgSparklineMethods.prototype.chart = function() {};

/**
 * Binds data to the chart
 * @return {void}
 */
IgSparklineMethods.prototype.dataBind = function() {};

/**
 * @param {string} propertyName
 * @return {!IgSparklineMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * The width of the sparkline. It can be set as a number in pixels, string (px) or percentage (%).
 * The width of the sparkline. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * \@optionValue New value to be set.
 * The height of the sparkline. It can be set as a number in pixels, string (px) or percentage (%).
 * The height of the sparkline. It can be set as a number in pixels, string (px) or percentage (%).
 * 
 * \@optionValue New value to be set.
 * Gets  the sparkline brush.
 * Sets the sparkline brush.
 * 
 * \@optionValue New value to be set.
 * Gets  the negative brush of the sparkline.
 * Sets the negative brush of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the marker brush of the sparkline.
 * Sets the marker brush of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the negative marker brush of the sparkline.
 * Sets the negative marker brush of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the first marker brush of the sparkline.
 * Sets the first marker brush of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the last marker brush of the sparkline.
 * Sets the last marker brush of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the high marker brush of the sparkline.
 * Sets the high marker brush of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the low marker brush of the sparkline.
 * Sets the low marker brush of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the trendline brush of the sparkline.
 * Sets the trendline brush of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the horizontal axis line brush of the sparkline.
 * Sets the horizontal axis line brush of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the vertical axis line brush of the sparkline.
 * Sets the vertical axis line brush of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the normal range brush of the sparkline.
 * Sets the normal range brush of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the display state of the horizontal axis.
 * Sets the display state of the horizontal axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the display state of the vertical axis.
 * Sets the display state of the vertical axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the marker visibility of the sparkline.
 * Sets the marker visibility of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the negative marker visibility of the sparkline.
 * Sets the negative marker visibility of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the first marker visibility of the sparkline.
 * Sets the first marker visibility of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the last marker visibility of the sparkline.
 * Sets the last marker visibility of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the low marker visibility of the sparkline.
 * Sets the low marker visibility of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the high marker visibility of the sparkline.
 * Sets the high marker visibility of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the normal range visibility of the sparkline.
 * Sets the normal range visibility of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the position of the normal range on the sparkline.
 * Sets the position of the normal range on the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the marker size of the sparkline.
 * Sets the marker size of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the first marker size of the sparkline.
 * Sets the first marker size of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the last marker size of the sparkline.
 * Sets the last marker size of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the high marker size of the sparkline.
 * Sets the high marker size of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the low marker size of the sparkline.
 * Sets the low marker size of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the negative marker size of the sparkline.
 * Sets the negative marker size of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the line thickness of the sparkline.
 * Sets the line thickness of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the string path to the value column.
 * Sets the string path to the value column.
 * 
 * \@optionValue New value to be set.
 * String identifier of a column or property name to get labels from on each item in the data source.  These labels will be retrieved from the first and last item, and displayed by the horizontal axis.
 * String identifier of a column or property name to get labels from on each item in the data source.  These labels will be retrieved from the first and last item, and displayed by the horizontal axis.
 * 
 * \@optionValue New value to be set.
 * Gets  the type of trendline used by the sparkline.
 * Sets the type of trendline used by the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the trendline period used by the sparkline.
 * Sets the trendline period used by the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the thickness of the sparkline's trendline.
 * Sets the thickness of the sparkline's trendline.
 * 
 * \@optionValue New value to be set.
 * Gets  the minimum value of the normal range.
 * Sets the minimum value of the normal range.
 * 
 * \@optionValue New value to be set.
 * Gets  the maximum value of the normal range.
 * Sets the maximum value of the normal range.
 * 
 * \@optionValue New value to be set.
 * Gets  the display type of the sparkline.
 * Sets the display type of the sparkline.
 * 
 * \@optionValue New value to be set.
 * Gets  the way null values are interpreted.
 * Sets the way null values are interpreted.
 * 
 * \@optionValue New value to be set.
 * The value or content to display on the vertical axis.
 * This can be set to a formatted string, such as "{0:n}", or it can be set to a DataTemplate.
 * The value or content to display on the vertical axis.
 * This can be set to a formatted string, such as "{0:n}", or it can be set to a DataTemplate.
 * 
 * \@optionValue New value to be set.
 * The value or content to display on the horizontal axis.
 * This can be set to a formatted string, such as "{0}", or it can be set to a DataTemplate.
 * The value or content to display on the horizontal axis.
 * This can be set to a formatted string, such as "{0}", or it can be set to a DataTemplate.
 * 
 * \@optionValue New value to be set.
 * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
 * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
 * 
 * \@optionValue New value to be set.
 *
 *
 * Gets  template for tooltip associated with chart item.
 * Example: "Value: $(ValueMemberPathInDataSource)"
 * Sets template for tooltip associated with chart item.
 * Example: "Value: $(ValueMemberPathInDataSource)"
 * 
 * \@optionValue New value to be set.
 * Gets  maximum number of displayed records in chart.
 * Sets maximum number of displayed records in chart.
 * 
 * \@optionValue New value to be set.
 * Gets  a valid data source.
 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
 * Sets a valid data source.
 * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
 * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
 * 
 * \@optionValue New value to be set.
 * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
 * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
 * 
 * \@optionValue New value to be set.
 * Gets  url which is used for sending JSON on request for remote data.
 * Sets url which is used for sending JSON on request for remote data.
 * 
 * \@optionValue New value to be set.
 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
 * See $.ig.DataSource. property in the response specifying the total number of records on the server.
 * 
 * \@optionValue New value to be set.
 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
 * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
 * 
 * \@optionValue New value to be set.
 * Event which is raised before data binding.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to igSparkline.
 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
 * Event which is raised before data binding.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to igSparkline.
 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after data binding.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to igSparkline.
 * Use ui.data to obtain reference to array actual data which is displayed by chart.
 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
 * Event which is raised after data binding.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to igSparkline.
 * Use ui.data to obtain reference to array actual data which is displayed by chart.
 * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before tooltip is updated.
 * Return false in order to cancel updating and hide tooltip.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
 * Event which is raised before tooltip is updated.
 * Return false in order to cancel updating and hide tooltip.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
 * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
 * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
 * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
 * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before tooltip is hidden.
 * Return false in order to cancel hiding and keep tooltip visible.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.item to obtain reference to item.
 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
 * Event which is raised before tooltip is hidden.
 * Return false in order to cancel hiding and keep tooltip visible.
 * Function takes first argument null and second argument ui.
 * Use ui.owner to obtain reference to chart widget.
 * Use ui.item to obtain reference to item.
 * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgSparkline} methodName_or_optionLiteral_or_options
 * @param {...!Object|number|string|!IgSparkline|?} item_or_index_or_dataSource_or_optionName_or_options_or_methodParams
 * @return {void|number|!Object|!Array<?>|(string|number)|string|boolean|?|!DataBindingEvent|!DataBoundEvent|!UpdateTooltipEvent|!HideTooltipEvent|!JQuery}
 */
JQuery.prototype.igSparkline = function(methodName_or_optionLiteral_or_options, item_or_index_or_dataSource_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgSplitButtonItem() {}
 /** @type {string} */
IgSplitButtonItem.prototype.name;
 /** @type {string} */
IgSplitButtonItem.prototype.label;
 /** @type {string} */
IgSplitButtonItem.prototype.iconClass;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgSplitButton() {}
 /** @type {!Array<!IgSplitButtonItem>} */
IgSplitButton.prototype.items;
 /** @type {string} */
IgSplitButton.prototype.defaultItemName;
 /** @type {boolean} */
IgSplitButton.prototype.swapDefaultEnabled;
 /** @type {!ClickEvent} */
IgSplitButton.prototype.click;
 /** @type {!ExpandedEvent} */
IgSplitButton.prototype.expanded;
 /** @type {!ExpandingEvent} */
IgSplitButton.prototype.expanding;
 /** @type {!CollapsedEvent} */
IgSplitButton.prototype.collapsed;
 /** @type {!CollapsingEvent} */
IgSplitButton.prototype.collapsing;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgSplitButtonMethods() {}

/**
 * Switch to given igToolbar button.
 * 
 * @param {!Object} button . The button jQuery element.
 * @return {void}
 */
IgSplitButtonMethods.prototype.switchToButton = function(button) {};

/**
 * @return {void}
 */
IgSplitButtonMethods.prototype.widget = function() {};

/**
 * Toggle widget state between collapsed and expanded.
 * 
 * @param {!Object} e The igSplitButton to be expanded/collapsed.
 * @return {!Object}
 */
IgSplitButtonMethods.prototype.toggle = function(e) {};

/**
 * Collapse the widget.
 * 
 * @param {!Object=} e Indicates the browser event which triggered this action (not API).
 * @return {!Object}
 */
IgSplitButtonMethods.prototype.collapse = function(e) {};

/**
 * Expands the widget.
 * 
 * @param {!Object=} e Indicates the browser event which triggered this action (not API).
 * @return {!Object}
 */
IgSplitButtonMethods.prototype.expand = function(e) {};

/**
 * Destroy the widget.
 * @return {void}
 */
IgSplitButtonMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgSplitButtonMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Button items.
 * 
 * Button items.
 * 
 * 
 * \@optionValue New value to be set.
 * Default button item name.
 * 
 * Default button item name.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets whether the default button will be switched when another button is selected.
 * 
 * Sets whether the default button will be switched when another button is selected.
 * 
 * 
 * \@optionValue New value to be set.
 * Event fired when the button is clicked.
 * 
 *             Function takes arguments evt and ui.
 * Use ui.item to get a reference the igSplitButton element.
 * Event fired when the button is clicked.
 * 
 *             Function takes arguments evt and ui.
 * Use ui.item to get a reference the igSplitButton element.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the button is expanded.
 * 
 *             Function takes arguments evt and ui.
 * Use ui.owner to get a reference the igSplitButton.
 * Event fired after the button is expanded.
 * 
 *             Function takes arguments evt and ui.
 * Use ui.owner to get a reference the igSplitButton.
 * 
 * \@optionValue Define event handler function.
 * Event fired before a button item is expanded.
 * 
 *             Function takes arguments evt and ui.
 * Use ui.owner to get a reference the igSplitButton.
 * Event fired before a button item is expanded.
 * 
 *             Function takes arguments evt and ui.
 * Use ui.owner to get a reference the igSplitButton.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the button is collapsed.
 * 
 *             Function takes arguments evt and ui.
 * Use ui.owner to get a reference the igSplitButton.
 * Event fired after the button is collapsed.
 * 
 *             Function takes arguments evt and ui.
 * Use ui.owner to get a reference the igSplitButton.
 * 
 * \@optionValue Define event handler function.
 * Event fired before a button item is collapsed.
 * 
 *             Function takes arguments evt and ui.
 * Use ui.owner to get a reference the igSplitButton.
 * Event fired before a button item is collapsed.
 * 
 *             Function takes arguments evt and ui.
 * Use ui.owner to get a reference the igSplitButton.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgSplitButton} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgSplitButton|?=} button_or_e_or_optionName_or_options_or_methodParams
 * @return {void|!Object|!Array<!IgSplitButtonItem>|string|boolean|!ClickEvent|!ExpandedEvent|!ExpandingEvent|!CollapsedEvent|!CollapsingEvent|!JQuery|?}
 */
JQuery.prototype.igSplitButton = function(methodName_or_optionLiteral_or_options, button_or_e_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgSplitterPanel() {}
 /** @type {(string|number)} */
IgSplitterPanel.prototype.size;
 /** @type {(string|number)} */
IgSplitterPanel.prototype.min;
 /** @type {(string|number)} */
IgSplitterPanel.prototype.max;
 /** @type {boolean} */
IgSplitterPanel.prototype.resizable;
 /** @type {boolean} */
IgSplitterPanel.prototype.collapsed;
 /** @type {boolean} */
IgSplitterPanel.prototype.collapsible;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function ResizeStartedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ResizeStartedEventUIParam() {}
 /** @type {?} */
ResizeStartedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function ResizingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ResizingEventUIParam() {}
 /** @type {?} */
ResizingEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function ResizeEndedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ResizeEndedEventUIParam() {}
 /** @type {?} */
ResizeEndedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function LayoutRefreshingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function LayoutRefreshingEventUIParam() {}
 /** @type {?} */
LayoutRefreshingEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function LayoutRefreshedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function LayoutRefreshedEventUIParam() {}
 /** @type {?} */
LayoutRefreshedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function IgSplitter() {}
 /** @type {(string|number)} */
IgSplitter.prototype.width;
 /** @type {(string|number)} */
IgSplitter.prototype.height;
 /** @type {string} */
IgSplitter.prototype.orientation;
 /** @type {!Array<!IgSplitterPanel>} */
IgSplitter.prototype.panels;
 /** @type {number} */
IgSplitter.prototype.dragDelta;
 /** @type {boolean} */
IgSplitter.prototype.resizeOtherSplitters;
 /** @type {!CollapsedEvent} */
IgSplitter.prototype.collapsed;
 /** @type {!ExpandedEvent} */
IgSplitter.prototype.expanded;
 /** @type {!ResizeStartedEvent} */
IgSplitter.prototype.resizeStarted;
 /** @type {!ResizingEvent} */
IgSplitter.prototype.resizing;
 /** @type {!ResizeEndedEvent} */
IgSplitter.prototype.resizeEnded;
 /** @type {!LayoutRefreshingEvent} */
IgSplitter.prototype.layoutRefreshing;
 /** @type {!LayoutRefreshedEvent} */
IgSplitter.prototype.layoutRefreshed;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgSplitterMethods() {}

/**
 * Returns the element that represents this widget.
 * @return {!Object}
 */
IgSplitterMethods.prototype.widget = function() {};

/**
 * Expand the specified panel by index.
 * 
 * @param {!Object} index Specifies the index of the panel to expand.
 * @return {void}
 */
IgSplitterMethods.prototype.expandAt = function(index) {};

/**
 * Collapse the specified panel.
 * 
 * @param {!Object} index Specifies the index of the panel to collapse.
 * @return {void}
 */
IgSplitterMethods.prototype.collapseAt = function(index) {};

/**
 * Retrieves the jQuery element of the first panel.
 * @return {!Object}
 */
IgSplitterMethods.prototype.firstPanel = function() {};

/**
 * Retrieves the jQuery element of the second panel.
 * @return {!Object}
 */
IgSplitterMethods.prototype.secondPanel = function() {};

/**
 * Refresh splitter layout, use this method to re-render the splitter if some changes to the layout are applied.
 * @return {void}
 */
IgSplitterMethods.prototype.refreshLayout = function() {};

/**
 * You can set new size of the first panel after the splitter is rendered.
 * 
 * @param {!Object} size Specifies the new size of the first panel.
 * @return {void}
 */
IgSplitterMethods.prototype.setFirstPanelSize = function(size) {};

/**
 * You can set new size of the second panel after the splitter is rendered.
 * 
 * @param {!Object} size Specifies the new size of the second panel.
 * @return {void}
 */
IgSplitterMethods.prototype.setSecondPanelSize = function(size) {};

/**
 * Destroys the igSplitter widget
 * @return {void}
 */
IgSplitterMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgSplitterMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Gets/Sets the width of the container.
 * 
 * /Sets the width of the container.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the height of the container.
 * 
 * /Sets the height of the container.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the orientation of the splitter.
 * 
 * Sets the orientation of the splitter.
 * 
 * 
 * \@optionValue New value to be set.
 * Array of objects options that specify the panels settings. The panels are no more than two. Settings are specified via enumeration.
 * 
 * Array of objects options that specify the panels settings. The panels are no more than two. Settings are specified via enumeration.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets drag delta of the split bar. In order to start dragging "move", the mouse has to be moved specific distance from its original position.
 * 
 * Sets drag delta of the split bar. In order to start dragging "move", the mouse has to be moved specific distance from its original position.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets whether the other splitters on the page will be resized as this splitter resizes.
 * 
 * Sets whether the other splitters on the page will be resized as this splitter resizes.
 * 
 * 
 * \@optionValue New value to be set.
 * Fired after collapsing is performed
 * 
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the splitter instance.
 *                 Use ui.index to get an index of collapsed panel.
 * Fired after collapsing is performed
 * 
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the splitter instance.
 *                 Use ui.index to get an index of collapsed panel.
 * 
 * \@optionValue New value to be set.
 * Fired after expanding is performed
 * 
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the splitter instance.
 *                 Use ui.index to get an index of expanded panel.
 * Fired after expanding is performed
 * 
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the splitter instance.
 *                 Use ui.index to get an index of expanded panel.
 * 
 * \@optionValue New value to be set.
 * Fired before split bar move is performed
 * 
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the splitter instance.
 * Fired before split bar move is performed
 * 
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the splitter instance.
 * 
 * \@optionValue New value to be set.
 * Fired while split bar move is performed
 * 
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the splitter instance.
 * Fired while split bar move is performed
 * 
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the splitter instance.
 * 
 * \@optionValue New value to be set.
 * Fired after split bar move is performed
 * 
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the splitter instance.
 * Fired after split bar move is performed
 * 
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the splitter instance.
 * 
 * \@optionValue New value to be set.
 * Fired before the panels are refreshed because of browser"s resizing.
 * 
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the splitter instance.
 * Fired before the panels are refreshed because of browser"s resizing.
 * 
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the splitter instance.
 * 
 * \@optionValue New value to be set.
 * Fired after the panels are refreshed because of browser"s resizing.
 * 
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the splitter instance.
 * Fired after the panels are refreshed because of browser"s resizing.
 * 
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get a reference to the splitter instance.
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgSplitter} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgSplitter|?} index_or_size_or_optionName_or_options_or_methodParams
 * @return {!Object|void|(string|number)|string|!Array<!IgSplitterPanel>|number|boolean|!CollapsedEvent|!ExpandedEvent|!ResizeStartedEvent|!ResizingEvent|!ResizeEndedEvent|!LayoutRefreshingEvent|!LayoutRefreshedEvent|!JQuery|?}
 */
JQuery.prototype.igSplitter = function(methodName_or_optionLiteral_or_options, index_or_size_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgTileManagerSplitterOptionsEvents() {}
 /** @type {?} */
IgTileManagerSplitterOptionsEvents.prototype.collapsed;
 /** @type {?} */
IgTileManagerSplitterOptionsEvents.prototype.expanded;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgTileManagerSplitterOptions() {}
 /** @type {boolean} */
IgTileManagerSplitterOptions.prototype.enabled;
 /** @type {boolean} */
IgTileManagerSplitterOptions.prototype.collapsible;
 /** @type {boolean} */
IgTileManagerSplitterOptions.prototype.collapsed;
 /** @type {!IgTileManagerSplitterOptionsEvents} */
IgTileManagerSplitterOptions.prototype.events;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function TileRenderingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function TileRenderingEventUIParam() {}
 /** @type {?} */
TileRenderingEventUIParam.prototype.owner;
 /** @type {?} */
TileRenderingEventUIParam.prototype.tile;
/**
 * @record
 * @struct
 */
function TileRenderedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function TileRenderedEventUIParam() {}
 /** @type {?} */
TileRenderedEventUIParam.prototype.owner;
 /** @type {?} */
TileRenderedEventUIParam.prototype.tile;
/**
 * @record
 * @struct
 */
function TileMaximizingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function TileMaximizingEventUIParam() {}
 /** @type {?} */
TileMaximizingEventUIParam.prototype.owner;
 /** @type {?} */
TileMaximizingEventUIParam.prototype.tile;
 /** @type {?} */
TileMaximizingEventUIParam.prototype.minimizingTile;
/**
 * @record
 * @struct
 */
function TileMaximizedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function TileMaximizedEventUIParam() {}
 /** @type {?} */
TileMaximizedEventUIParam.prototype.owner;
 /** @type {?} */
TileMaximizedEventUIParam.prototype.tile;
/**
 * @record
 * @struct
 */
function TileMinimizingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function TileMinimizingEventUIParam() {}
 /** @type {?} */
TileMinimizingEventUIParam.prototype.owner;
 /** @type {?} */
TileMinimizingEventUIParam.prototype.tile;
 /** @type {?} */
TileMinimizingEventUIParam.prototype.maximizingTile;
/**
 * @record
 * @struct
 */
function TileMinimizedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function TileMinimizedEventUIParam() {}
 /** @type {?} */
TileMinimizedEventUIParam.prototype.owner;
 /** @type {?} */
TileMinimizedEventUIParam.prototype.tile;
/**
 * @record
 * @struct
 */
function IgTileManager() {}
 /** @type {(string|number)} */
IgTileManager.prototype.width;
 /** @type {(string|number)} */
IgTileManager.prototype.height;
 /** @type {(string|number)} */
IgTileManager.prototype.columnWidth;
 /** @type {(string|number)} */
IgTileManager.prototype.columnHeight;
 /** @type {number} */
IgTileManager.prototype.cols;
 /** @type {number} */
IgTileManager.prototype.rows;
 /** @type {number} */
IgTileManager.prototype.marginLeft;
 /** @type {number} */
IgTileManager.prototype.marginTop;
 /** @type {boolean} */
IgTileManager.prototype.rearrangeItems;
 /** @type {!Object} */
IgTileManager.prototype.items;
 /** @type {?} */
IgTileManager.prototype.dataSource;
 /** @type {string} */
IgTileManager.prototype.minimizedState;
 /** @type {string} */
IgTileManager.prototype.maximizedState;
 /** @type {number} */
IgTileManager.prototype.maximizedTileIndex;
 /** @type {number} */
IgTileManager.prototype.rightPanelCols;
 /** @type {number} */
IgTileManager.prototype.rightPanelTilesWidth;
 /** @type {number} */
IgTileManager.prototype.rightPanelTilesHeight;
 /** @type {boolean} */
IgTileManager.prototype.showRightPanelScroll;
 /** @type {!IgTileManagerSplitterOptions} */
IgTileManager.prototype.splitterOptions;
 /** @type {string} */
IgTileManager.prototype.preventMaximizingSelector;
 /** @type {number} */
IgTileManager.prototype.animationDuration;
 /** @type {string} */
IgTileManager.prototype.dataSourceUrl;
 /** @type {string} */
IgTileManager.prototype.responseDataKey;
 /** @type {string} */
IgTileManager.prototype.responseDataType;
 /** @type {string} */
IgTileManager.prototype.dataSourceType;
 /** @type {string} */
IgTileManager.prototype.requestType;
 /** @type {string} */
IgTileManager.prototype.responseContentType;
 /** @type {!DataBindingEvent} */
IgTileManager.prototype.dataBinding;
 /** @type {!DataBoundEvent} */
IgTileManager.prototype.dataBound;
 /** @type {!RenderingEvent} */
IgTileManager.prototype.rendering;
 /** @type {!RenderedEvent} */
IgTileManager.prototype.rendered;
 /** @type {!TileRenderingEvent} */
IgTileManager.prototype.tileRendering;
 /** @type {!TileRenderedEvent} */
IgTileManager.prototype.tileRendered;
 /** @type {!TileMaximizingEvent} */
IgTileManager.prototype.tileMaximizing;
 /** @type {!TileMaximizedEvent} */
IgTileManager.prototype.tileMaximized;
 /** @type {!TileMinimizingEvent} */
IgTileManager.prototype.tileMinimizing;
 /** @type {!TileMinimizedEvent} */
IgTileManager.prototype.tileMinimized;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgTileManagerMethods() {}

/**
 * Maximizes a given tile.
 * 
 * @param {!Object} $tileToMaximize Specifies the jQuery object of the tile element to be maximized.
 * @param {number=} animDuration Specifies the animation duration for this maximizing.
 * @param {!Object=} event Indicates the browser even which triggered this action (not API).
 * @return {void}
 */
IgTileManagerMethods.prototype.maximize = function($tileToMaximize, animDuration, event) {};

/**
 * Minimizes the maximized tile. Has no effect if no maximized tile is present.
 * 
 * @param {number=} animDuration Specifies the animation duration for this minimize.
 * @param {!Object=} event Indicates the browser even which triggered this action (not API).
 * @return {void}
 */
IgTileManagerMethods.prototype.minimize = function(animDuration, event) {};

/**
 * Returns the maximized tile or null if such is not present.
 * @return {!Object} object|null Returns the maximized tile or null if such is not present.
 */
IgTileManagerMethods.prototype.maximizedTile = function() {};

/**
 * Returns an array with the tiles in minimized state or null if such are not present.
 * @return {!Object} object|null Returns an array with the tiles in minimized state or null if such are not present.
 */
IgTileManagerMethods.prototype.minimizedTiles = function() {};

/**
 * Returns the splitter associated with this tile manager or
 *                 null if the tile manager was instantiated with maximizedTileIndex.
 * @return {!Object} object|null Returns the splitter associated with this tile manager or null if the tile manager was instantiated with maximizedTileIndex.
 */
IgTileManagerMethods.prototype.splitter = function() {};

/**
 * Returns the [layout manager](ui.iglayoutmanager) associated with current tile manager.
 * @return {!Object}
 */
IgTileManagerMethods.prototype.layoutManager = function() {};

/**
 * Reflow the tile manager. Rearranging the tiles to fit in the container
 * 
 * @param {!Object=} forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.
 * @param {number=} animationDuration The animation duration to be used for this reflow only.
 * @param {!Object=} event Indicates the browser even which triggered this action (not API).
 * @return {void}
 */
IgTileManagerMethods.prototype.reflow = function(forceReflow, animationDuration, event) {};

/**
 * Returns the element that represents this widget.
 * @return {!Object}
 */
IgTileManagerMethods.prototype.widget = function() {};

/**
 * Causes the TileManager to data bind to the data source (local or remote) , and re-render all of the data as well.
 * @return {void}
 */
IgTileManagerMethods.prototype.dataBind = function() {};

/**
 * Deletes the widget instance (client object). It is no longer accessible and all its event handlers stop working. Destroys all child widgets. Removes auto-generated HTML content, which is outside the widget, e.g. detached popups, dropdowns, etc.
 * @return {!Object}
 */
IgTileManagerMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgTileManagerMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * *
 * *
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the height of the container.
 * 
 * /Sets the height of the container.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the width of each column in the container.
 * 
 * /Sets the width of each column in the container.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the height of each column in the container.
 * 
 * /Sets the height of each column in the container.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the columns count in the container.
 * 
 * /Sets the columns count in the container.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the rows count in the container.
 * 
 * /Sets the rows count in the container.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the horizontal spacing between tiles.
 * 
 *                 number  The horizontal spacing between tiles can be set as a number.
 * /Sets the horizontal spacing between tiles.
 * 
 *                 number  The horizontal spacing between tiles can be set as a number.
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the vertical spacing between tiles.
 * 
 *                 number  The vertical spacing between tiles can be set as a number.
 * /Sets the vertical spacing between tiles.
 * 
 *                 number  The vertical spacing between tiles can be set as a number.
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the items will rearrange when the container is resized.
 * 
 * /Sets whether the items will rearrange when the container is resized.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the tiles configurations. Every tile is described by rowSpan, colSpan, rowIndex and colIndex.
 * 
 * /Sets the tiles configurations. Every tile is described by rowSpan, colSpan, rowIndex and colIndex.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an [$.ig.DataSource](ig.datasource) itself.
 * 
 * Sets any valid data source accepted by [$.ig.DataSource](ig.datasource), or an instance of an [$.ig.DataSource](ig.datasource) itself.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the content of the tiles in minimized state.
 * 
 * /Sets the content of the tiles in minimized state.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the content of the tiles in maximized state.
 * 
 * /Sets the content of the tiles in maximized state.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the index of which items configuration will be used for positioning and sizing of the maximized tile.
 * 
 * /Sets the index of which items configuration will be used for positioning and sizing of the maximized tile.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets how many columns to be displayed in the right panel when the tiles are minimized.
 * 
 * /Sets how many columns to be displayed in the right panel when the tiles are minimized.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the width of the minimized tiles in the right panel.
 * 
 * /Sets the width of the minimized tiles in the right panel.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the height of the minimized tiles in the right panel.
 * 
 * /Sets the height of the minimized tiles in the right panel.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the right panel should show scrollbar when tiles are overflowing.
 * 
 * /Sets whether the right panel should show scrollbar when tiles are overflowing.
 * 
 * 
 * \@optionValue New value to be set.
 * Configure the container variable representation, which defines splitter functionality.
 * 
 * Configure the container variable representation, which defines splitter functionality.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets JQuery selector that specifies which elements will not trigger maximizing when clicked on.
 * 
 * /Sets JQuery selector that specifies which elements will not trigger maximizing when clicked on.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the duration of the animations in the tile manager.
 * 
 * /Sets the duration of the animations in the tile manager.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets a remote URL accepted by [$.ig.DataSource](ig.datasource) in order to request data from it.
 * 
 * Sets a remote URL accepted by [$.ig.DataSource](ig.datasource) in order to request data from it.
 * 
 * 
 * \@optionValue New value to be set.
 * Property in the response which specifies where the data records array will be held (if the response is wrapped). See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey).
 * 
 * Property in the response which specifies where the data records array will be held (if the response is wrapped). See [$.ig.DataSource responseDataKey](ig.datasource#options:settings.responseDataKey).
 * 
 * 
 * \@optionValue New value to be set.
 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type) and its type property.
 * 
 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type) and its type property.
 * 
 * 
 * \@optionValue New value to be set.
 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type) and its type property.
 * 
 * Explicitly set data source type (such as "json"). Please refer to the documentation of [$.ig.DataSource type](ig.datasource#options:settings.type) and its type property.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the HTTP request method.
 * 
 * Sets the HTTP request method.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the HTTP content type for the response object. See [Perform an asynchronous HTTP (Ajax) request](http://api.jquery.com/jQuery.ajax/).
 * 
 * /Sets the HTTP content type for the response object. See [Perform an asynchronous HTTP (Ajax) request](http://api.jquery.com/jQuery.ajax/).
 * 
 * 
 * \@optionValue New value to be set.
 * Fired before databinding is performed
 * 
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the tile manager performing databinding.
 *             Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) the tile manager is to be databound to.
 * Fired before databinding is performed
 * 
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the tile manager performing databinding.
 *             Use ui.dataSource to get a reference to the [$.ig.DataSource](ig.datasource) the tile manager is to be databound to.
 * 
 * \@optionValue New value to be set.
 * Fired after databinding is complete
 * 
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the tile manager performing databinding.
 *             Use ui.dataView to get a reference to the data the tile manager is databound to.
 *             Use ui.success to get see if the databinding was performed correctly.
 *             Use ui.errorMessage to get the error message if the databinding failed.
 * Fired after databinding is complete
 * 
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the tile manager performing databinding.
 *             Use ui.dataView to get a reference to the data the tile manager is databound to.
 *             Use ui.success to get see if the databinding was performed correctly.
 *             Use ui.errorMessage to get the error message if the databinding failed.
 * 
 * \@optionValue New value to be set.
 * Fired before rendering of the tile manager begins.
 * 
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the tile manager performing rendering.
 *             Use ui.tiles to get a reference to the tiles the tile manager is going to render. If using data source this referes to the data provided.
 *             Use ui.items to get a reference to the item configurations the tile manager has.
 * Fired before rendering of the tile manager begins.
 * 
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the tile manager performing rendering.
 *             Use ui.tiles to get a reference to the tiles the tile manager is going to render. If using data source this referes to the data provided.
 *             Use ui.items to get a reference to the item configurations the tile manager has.
 * 
 * \@optionValue New value to be set.
 * Fired after rendering of the tile manager completes.
 * 
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the tile manager performing rendering.
 * Fired after rendering of the tile manager completes.
 * 
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the tile manager performing rendering.
 * 
 * \@optionValue New value to be set.
 * Event fired before a tile is rendered in the container
 * 
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the tile manager performing rendering.
 *             Use ui.tile to get a reference to the tile being rendered
 * Event fired before a tile is rendered in the container
 * 
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the tile manager performing rendering.
 *             Use ui.tile to get a reference to the tile being rendered
 * 
 * \@optionValue Define event handler function.
 * Event Fired after a tile has been rendered in the container
 * 
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the tile manager performing rendering.
 *             Use ui.tile to get a reference to the rendered tile
 * Event Fired after a tile has been rendered in the container
 * 
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the tile manager performing rendering.
 *             Use ui.tile to get a reference to the rendered tile
 * 
 * \@optionValue Define event handler function.
 * Fired before a tile in the tile manager is maximized.
 * 
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the tile manager performing the maximizing the tile belongs to.
 *             Use ui.tile to get the jQuery element of the tile being maximized
 *             Use ui.minimizingTile to get reference to the tile that is minimizing simultaneously or null if no tile is minimizing.
 * Fired before a tile in the tile manager is maximized.
 * 
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the tile manager performing the maximizing the tile belongs to.
 *             Use ui.tile to get the jQuery element of the tile being maximized
 *             Use ui.minimizingTile to get reference to the tile that is minimizing simultaneously or null if no tile is minimizing.
 * 
 * \@optionValue New value to be set.
 * Fired after a tile in the tile manager is maximized.
 * 
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the tile manager the maximized tile belongs to.
 *             Use ui.tile to get the jQuery element of the maximized tile
 * Fired after a tile in the tile manager is maximized.
 * 
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the tile manager the maximized tile belongs to.
 *             Use ui.tile to get the jQuery element of the maximized tile
 * 
 * \@optionValue New value to be set.
 * Fired before a tile in the tile manager is minimized.
 * 
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the tile manager performing the minimizing the tile belongs to.
 *             Use ui.tile to get the jQuery element of the tile being minimized
 *             Use ui.maximizingTile to get reference to the tile that is maximizing simultaneously or null if no tile is maximizing.
 * Fired before a tile in the tile manager is minimized.
 * 
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the tile manager performing the minimizing the tile belongs to.
 *             Use ui.tile to get the jQuery element of the tile being minimized
 *             Use ui.maximizingTile to get reference to the tile that is maximizing simultaneously or null if no tile is maximizing.
 * 
 * \@optionValue New value to be set.
 * Fired after a tile in the tile manager is minimized.
 * 
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the tile manager the minimized tile belongs to.
 *             Use ui.tile to get the jQuery element of the minimized tile
 * Fired after a tile in the tile manager is minimized.
 * 
 *             Function takes arguments evt and ui.
 *             Use ui.owner to get a reference to the tile manager the minimized tile belongs to.
 *             Use ui.tile to get the jQuery element of the minimized tile
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgTileManager} methodName_or_optionLiteral_or_options
 * @param {...!Object|number|string|!IgTileManager|?=} $tileToMaximize_or_animDuration_or_forceReflow_or_optionName_or_options_or_methodParams
 * @return {void|!Object|(string|number)|number|boolean|?|string|!IgTileManagerSplitterOptions|!DataBindingEvent|!DataBoundEvent|!RenderingEvent|!RenderedEvent|!TileRenderingEvent|!TileRenderedEvent|!TileMaximizingEvent|!TileMaximizedEvent|!TileMinimizingEvent|!TileMinimizedEvent|!JQuery}
 */
JQuery.prototype.igTileManager = function(methodName_or_optionLiteral_or_options, $tileToMaximize_or_animDuration_or_forceReflow_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function ToolbarButtonClickEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ToolbarButtonClickEventUIParam() {}
/**
 * @record
 * @struct
 */
function ToolbarComboOpeningEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ToolbarComboOpeningEventUIParam() {}
/**
 * @record
 * @struct
 */
function ToolbarComboSelectedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ToolbarComboSelectedEventUIParam() {}
/**
 * @record
 * @struct
 */
function ToolbarCustomItemClickEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ToolbarCustomItemClickEventUIParam() {}
/**
 * @record
 * @struct
 */
function ItemRemovedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ItemRemovedEventUIParam() {}
/**
 * @record
 * @struct
 */
function ItemAddedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ItemAddedEventUIParam() {}
/**
 * @record
 * @struct
 */
function ItemDisableEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ItemDisableEventUIParam() {}
/**
 * @record
 * @struct
 */
function ItemEnabledEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ItemEnabledEventUIParam() {}
/**
 * @record
 * @struct
 */
function WindowResizedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function WindowResizedEventUIParam() {}
/**
 * @record
 * @struct
 */
function IgToolbar() {}
 /** @type {?} */
IgToolbar.prototype.height;
 /** @type {?} */
IgToolbar.prototype.width;
 /** @type {boolean} */
IgToolbar.prototype.allowCollapsing;
 /** @type {string} */
IgToolbar.prototype.collapseButtonIcon;
 /** @type {string} */
IgToolbar.prototype.expandButtonIcon;
 /** @type {string} */
IgToolbar.prototype.name;
 /** @type {string} */
IgToolbar.prototype.displayName;
 /** @type {!Array<?>} */
IgToolbar.prototype.items;
 /** @type {boolean} */
IgToolbar.prototype.isExpanded;
 /** @type {!ToolbarButtonClickEvent} */
IgToolbar.prototype.toolbarButtonClick;
 /** @type {!ToolbarComboOpeningEvent} */
IgToolbar.prototype.toolbarComboOpening;
 /** @type {!ToolbarComboSelectedEvent} */
IgToolbar.prototype.toolbarComboSelected;
 /** @type {!ToolbarCustomItemClickEvent} */
IgToolbar.prototype.toolbarCustomItemClick;
 /** @type {!ItemRemovedEvent} */
IgToolbar.prototype.itemRemoved;
 /** @type {!ItemAddedEvent} */
IgToolbar.prototype.itemAdded;
 /** @type {!CollapsingEvent} */
IgToolbar.prototype.collapsing;
 /** @type {!CollapsedEvent} */
IgToolbar.prototype.collapsed;
 /** @type {!ExpandingEvent} */
IgToolbar.prototype.expanding;
 /** @type {!ExpandedEvent} */
IgToolbar.prototype.expanded;
 /** @type {!ItemDisableEvent} */
IgToolbar.prototype.itemDisable;
 /** @type {!ItemEnabledEvent} */
IgToolbar.prototype.itemEnabled;
 /** @type {!WindowResizedEvent} */
IgToolbar.prototype.windowResized;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgToolbarMethods() {}

/**
 * Returns the element on which the widget was instantiated
 * @return {void}
 */
IgToolbarMethods.prototype.widget = function() {};

/**
 * Gets the item by matching the provided index.
 * 
 * @param {!Object} index The index of the item.
 * @return {!Object}
 */
IgToolbarMethods.prototype.getItem = function(index) {};

/**
 * Add item to widget item array
 * 
 * @param {!Object} item The item to be added.
 * @return {void}
 */
IgToolbarMethods.prototype.addItem = function(item) {};

/**
 * Remove the item matching provided index.
 * 
 * @param {!Object} index The index of the item.
 * @return {!Object}
 */
IgToolbarMethods.prototype.removeItem = function(index) {};

/**
 * Disable item matching provided index.
 * 
 * @param {!Object} index The index of the item.
 * @param {!Object} disabled The disabled property value.
 * @return {void}
 */
IgToolbarMethods.prototype.disableItem = function(index, disabled) {};

/**
 * Activate item matching provided index.
 * 
 * @param {!Object} index The index of the item.
 * @param {!Object} activated The activate property value.
 * @return {void}
 */
IgToolbarMethods.prototype.activateItem = function(index, activated) {};

/**
 * Deactivate all buttons.
 * @return {void}
 */
IgToolbarMethods.prototype.deactivateAll = function() {};

/**
 * Destroy the widget.
 * @return {void}
 */
IgToolbarMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgToolbarMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Set/Get the widget height.
 * 
 * Set/Get the widget height.
 * 
 * 
 * \@optionValue New value to be set.
 * Set/Get the widget width.
 * 
 * Set/Get the widget width.
 * 
 * 
 * \@optionValue New value to be set.
 * Get/Set whether the toolbar can be collapsed.
 * 
 * Get/Set whether the toolbar can be collapsed.
 * 
 * 
 * \@optionValue New value to be set.
 * The css class that will be applied to collapseButtonIcon.
 * 
 * The css class that will be applied to collapseButtonIcon.
 * 
 * 
 * \@optionValue New value to be set.
 * The css class that will be applied to the expand/collapse button icon.
 * 
 * The css class that will be applied to the expand/collapse button icon.
 * 
 * 
 * \@optionValue New value to be set.
 * Formal name of the widget.
 * 
 * Formal name of the widget.
 * 
 * 
 * \@optionValue New value to be set.
 * Display Name of the widget.
 * 
 * Display Name of the widget.
 * 
 * 
 * \@optionValue New value to be set.
 * Get/Set Toolbar's items.
 * 
 * Get/Set Toolbar's items.
 * 
 * 
 * \@optionValue New value to be set.
 * Get/Set whether the widget is expanded initially.
 * 
 * Get/Set whether the widget is expanded initially.
 * 
 * 
 * \@optionValue New value to be set.
 * Event fired after a click on any toolbar button
 * Event fired after a click on any toolbar button
 * 
 * \@optionValue Define event handler function.
 * Event is fired before the toolbar is opened.
 * Event is fired before the toolbar is opened.
 * 
 * \@optionValue Define event handler function.
 * Event fired after toolbar combo is selected
 * Event fired after toolbar combo is selected
 * 
 * \@optionValue Define event handler function.
 * Event fired after a click on custom item
 * Event fired after a click on custom item
 * 
 * \@optionValue Define event handler function.
 * Event fired after item is removed
 * Event fired after item is removed
 * 
 * \@optionValue Define event handler function.
 * Event fired after item is added
 * Event fired after item is added
 * 
 * \@optionValue Define event handler function.
 * Event is fired before item is collapsed.
 * Event is fired before item is collapsed.
 * 
 * \@optionValue Define event handler function.
 * Event fired after item is collapsed
 * Event fired after item is collapsed
 * 
 * \@optionValue Define event handler function.
 * Event fired before item is expanded
 * Event fired before item is expanded
 * 
 * \@optionValue Define event handler function.
 * Event fired after item is expanded
 * Event fired after item is expanded
 * 
 * \@optionValue Define event handler function.
 * Fired after item is dissabled
 * Fired after item is dissabled
 * 
 * \@optionValue New value to be set.
 * Fired after item is enabled
 * Fired after item is enabled
 * 
 * \@optionValue New value to be set.
 * Fired after the window is resized
 * Fired after the window is resized
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgToolbar} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgToolbar|?} index_or_item_or_optionName_or_options_or_methodParams
 * @return {void|!Object|?|boolean|string|!Array<?>|!ToolbarButtonClickEvent|!ToolbarComboOpeningEvent|!ToolbarComboSelectedEvent|!ToolbarCustomItemClickEvent|!ItemRemovedEvent|!ItemAddedEvent|!CollapsingEvent|!CollapsedEvent|!ExpandingEvent|!ExpandedEvent|!ItemDisableEvent|!ItemEnabledEvent|!WindowResizedEvent|!JQuery}
 */
JQuery.prototype.igToolbar = function(methodName_or_optionLiteral_or_options, index_or_item_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function ActivatingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ActivatingEventUIParam() {}
 /** @type {?} */
ActivatingEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function ActivatedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ActivatedEventUIParam() {}
 /** @type {?} */
ActivatedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function DeactivatingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DeactivatingEventUIParam() {}
 /** @type {?} */
DeactivatingEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function DeactivatedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DeactivatedEventUIParam() {}
 /** @type {?} */
DeactivatedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function IgToolbarButton() {}
 /** @type {boolean} */
IgToolbarButton.prototype.allowToggling;
 /** @type {boolean} */
IgToolbarButton.prototype.isSelected;
 /** @type {!ActivatingEvent} */
IgToolbarButton.prototype.activating;
 /** @type {!ActivatedEvent} */
IgToolbarButton.prototype.activated;
 /** @type {!DeactivatingEvent} */
IgToolbarButton.prototype.deactivating;
 /** @type {!DeactivatedEvent} */
IgToolbarButton.prototype.deactivated;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgToolbarButtonMethods() {}

/**
 * Toggle toolbar button
 * @return {void}
 */
IgToolbarButtonMethods.prototype.toggle = function() {};

/**
 * Activate toolbar button
 * 
 * @param {!Object} event
 * @return {void}
 */
IgToolbarButtonMethods.prototype.activate = function(event) {};

/**
 * Deactivate toolbar button
 * 
 * @param {!Object} event
 * @return {void}
 */
IgToolbarButtonMethods.prototype.deactivate = function(event) {};

/**
 * Returns the element that represents this widget.
 * @return {!Object}
 */
IgToolbarButtonMethods.prototype.widget = function() {};

/**
 * Destroy the widget.
 * @return {void}
 */
IgToolbarButtonMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgToolbarButtonMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Gets the "Toggling" of a button.
 * 
 * Enable/Disable the "Toggling" of a button.
 * 
 * 
 * \@optionValue New value to be set.
 * Get/Set whether the toolbar button is selected.
 * 
 * Get/Set whether the toolbar button is selected.
 * 
 * 
 * \@optionValue New value to be set.
 * Event fired before the toolbar button is activated.
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get reference to this igToolbarButton.
 * Event fired before the toolbar button is activated.
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get reference to this igToolbarButton.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the toolbar button is activated.
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get reference to this igToolbarButton.
 * Event fired after the toolbar button is activated.
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get reference to this igToolbarButton.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the toolbar button is deactivated.
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get reference to this igToolbarButton.
 * Event fired before the toolbar button is deactivated.
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get reference to this igToolbarButton.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the toolbar button is deactivated.
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get reference to this igToolbarButton.
 * Event fired after the toolbar button is deactivated.
 *                 Function takes arguments evt and ui.
 *                 Use ui.owner to get reference to this igToolbarButton.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgToolbarButton} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgToolbarButton|?} event_or_optionName_or_options_or_methodParams
 * @return {void|!Object|boolean|!ActivatingEvent|!ActivatedEvent|!DeactivatingEvent|!DeactivatedEvent|!JQuery|?}
 */
JQuery.prototype.igToolbarButton = function(methodName_or_optionLiteral_or_options, event_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgTreeGridColumnFixing() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgTreeGridColumnFixingMethods() {}

/**
 * @return {void}
 */
IgTreeGridColumnFixingMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgTreeGridColumnFixingMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * @param {string|!IgTreeGridColumnFixing} methodName_or_options_or_optionLiteral
 * @param {...string|!IgTreeGridColumnFixing|?} optionName_or_options_or_methodParams
 * @return {void|!JQuery|?}
 */
JQuery.prototype.igTreeGridColumnFixing = function(methodName_or_options_or_optionLiteral, optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgTreeGridColumnMoving() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgTreeGridColumnMovingMethods() {}

/**
 * @return {void}
 */
IgTreeGridColumnMovingMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgTreeGridColumnMovingMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * @param {string|!IgTreeGridColumnMoving} methodName_or_options_or_optionLiteral
 * @param {...string|!IgTreeGridColumnMoving|?} optionName_or_options_or_methodParams
 * @return {void|!JQuery|?}
 */
JQuery.prototype.igTreeGridColumnMoving = function(methodName_or_options_or_optionLiteral, optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgTreeGridFiltering() {}
 /** @type {string} */
IgTreeGridFiltering.prototype.recordCountKey;
 /** @type {number} */
IgTreeGridFiltering.prototype.fromLevel;
 /** @type {number} */
IgTreeGridFiltering.prototype.toLevel;
 /** @type {?} */
IgTreeGridFiltering.prototype.displayMode;
 /** @type {string} */
IgTreeGridFiltering.prototype.matchFiltering;
 /** @type {string} */
IgTreeGridFiltering.prototype.filterSummaryInPagerTemplate;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgTreeGridFilteringMethods() {}

/**
 * Returns the count of data records that match filtering conditions
 * @return {number}
 */
IgTreeGridFilteringMethods.prototype.getFilteringMatchesCount = function() {};

/**
 * @return {void}
 */
IgTreeGridFilteringMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgTreeGridFilteringMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * The property in the response that will hold the total number of records in the data source
 * 
 * The property in the response that will hold the total number of records in the data source
 * 
 * 
 * \@optionValue New value to be set.
 * Specifies from which data bound level to be applied filtering - 0 is the first level
 * 
 * Specifies from which data bound level to be applied filtering - 0 is the first level
 * 
 * 
 * \@optionValue New value to be set.
 * Specifies to which data bound level to be applied filtering - if -1 filtering should be applied to the last data bound level
 * 
 * Specifies to which data bound level to be applied filtering - if -1 filtering should be applied to the last data bound level
 * 
 * 
 * \@optionValue New value to be set.
 * If displayMode is showWithAncestorsAndDescendants, show all records that match filtering conditions and their child records, even if child records don"t match filtering conditions. If displayMode is showWithAncestors show only those records that match filtering conditions and do not show child records(if any) that don"t match filtering conditions
 * 
 * If displayMode is showWithAncestorsAndDescendants, show all records that match filtering conditions and their child records, even if child records don"t match filtering conditions. If displayMode is showWithAncestors show only those records that match filtering conditions and do not show child records(if any) that don"t match filtering conditions
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the name of a boolean property in the dataRecord object that indicates whether the dataRow matches the filtering conditions.
 * When filtering a boolean flag  with the specified name is added on each data record object with a value of true if it matches the condition or false if it doesn"t.
 * This is used mainly for internal purposes.
 * 
 * Sets the name of a boolean property in the dataRecord object that indicates whether the dataRow matches the filtering conditions.
 * When filtering a boolean flag  with the specified name is added on each data record object with a value of true if it matches the condition or false if it doesn"t.
 * This is used mainly for internal purposes.
 * 
 * 
 * \@optionValue New value to be set.
 * Template that is used when filtering is applied and paging is enabled and user goes to another page. It takes precedence over the pagerRecordsLabelTemplate(option from igTreeGridPaging). If it is set to null then it is taken option from igTreeGridPaging.
 * Supported options:
 * ${currentPageMatches} (filtering)
 * ${totalMatches} (filtering)
 * ${startRecord} (paging)
 * ${endRecord} (paging)
 * ${recordCount} (paging)
 * Template that is used when filtering is applied and paging is enabled and user goes to another page. It takes precedence over the pagerRecordsLabelTemplate(option from igTreeGridPaging). If it is set to null then it is taken option from igTreeGridPaging.
 * Supported options:
 * ${currentPageMatches} (filtering)
 * ${totalMatches} (filtering)
 * ${startRecord} (paging)
 * ${endRecord} (paging)
 * ${recordCount} (paging)
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgTreeGridFiltering} methodName_or_optionLiteral_or_options
 * @param {...string|!IgTreeGridFiltering|?} optionName_or_options_or_methodParams
 * @return {number|void|string|?|!JQuery}
 */
JQuery.prototype.igTreeGridFiltering = function(methodName_or_optionLiteral_or_options, optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgTreeGridHiding() {}
 /** @type {!Array<!IgGridHidingColumnSetting>} */
IgTreeGridHiding.prototype.columnSettings;
 /** @type {number} */
IgTreeGridHiding.prototype.hiddenColumnIndicatorHeaderWidth;
 /** @type {string} */
IgTreeGridHiding.prototype.columnChooserContainment;
 /** @type {string} */
IgTreeGridHiding.prototype.columnChooserWidth;
 /** @type {string} */
IgTreeGridHiding.prototype.columnChooserHeight;
 /** @type {number} */
IgTreeGridHiding.prototype.dropDownAnimationDuration;
 /** @type {string} */
IgTreeGridHiding.prototype.columnChooserCaptionText;
 /** @type {string} */
IgTreeGridHiding.prototype.columnChooserDisplayText;
 /** @type {string} */
IgTreeGridHiding.prototype.hiddenColumnIndicatorTooltipText;
 /** @type {string} */
IgTreeGridHiding.prototype.columnHideText;
 /** @type {string} */
IgTreeGridHiding.prototype.columnChooserShowText;
 /** @type {string} */
IgTreeGridHiding.prototype.columnChooserHideText;
 /** @type {boolean} */
IgTreeGridHiding.prototype.columnChooserHideOnClick;
 /** @type {string} */
IgTreeGridHiding.prototype.columnChooserResetButtonLabel;
 /** @type {number} */
IgTreeGridHiding.prototype.columnChooserAnimationDuration;
 /** @type {string} */
IgTreeGridHiding.prototype.columnChooserButtonApplyText;
 /** @type {string} */
IgTreeGridHiding.prototype.columnChooserButtonCancelText;
 /** @type {string} */
IgTreeGridHiding.prototype.dialogWidget;
 /** @type {boolean} */
IgTreeGridHiding.prototype.inherit;
 /** @type {!ColumnHidingEvent} */
IgTreeGridHiding.prototype.columnHiding;
 /** @type {!ColumnHidingRefusedEvent} */
IgTreeGridHiding.prototype.columnHidingRefused;
 /** @type {!ColumnShowingRefusedEvent} */
IgTreeGridHiding.prototype.columnShowingRefused;
 /** @type {!MultiColumnHidingEvent} */
IgTreeGridHiding.prototype.multiColumnHiding;
 /** @type {!ColumnHiddenEvent} */
IgTreeGridHiding.prototype.columnHidden;
 /** @type {!ColumnShowingEvent} */
IgTreeGridHiding.prototype.columnShowing;
 /** @type {!ColumnShownEvent} */
IgTreeGridHiding.prototype.columnShown;
 /** @type {!ColumnChooserOpeningEvent} */
IgTreeGridHiding.prototype.columnChooserOpening;
 /** @type {!ColumnChooserOpenedEvent} */
IgTreeGridHiding.prototype.columnChooserOpened;
 /** @type {!ColumnChooserMovingEvent} */
IgTreeGridHiding.prototype.columnChooserMoving;
 /** @type {!ColumnChooserClosingEvent} */
IgTreeGridHiding.prototype.columnChooserClosing;
 /** @type {!ColumnChooserClosedEvent} */
IgTreeGridHiding.prototype.columnChooserClosed;
 /** @type {!ColumnChooserContentsRenderingEvent} */
IgTreeGridHiding.prototype.columnChooserContentsRendering;
 /** @type {!ColumnChooserContentsRenderedEvent} */
IgTreeGridHiding.prototype.columnChooserContentsRendered;
 /** @type {!ColumnChooserButtonApplyClickEvent} */
IgTreeGridHiding.prototype.columnChooserButtonApplyClick;
 /** @type {!ColumnChooserButtonResetClickEvent} */
IgTreeGridHiding.prototype.columnChooserButtonResetClick;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgTreeGridHidingMethods() {}

/**
 * @return {void}
 */
IgTreeGridHidingMethods.prototype.destroy = function() {};

/**
 * Shows the Column Chooser dialog. If it is visible the method does nothing.
 * @return {void}
 */
IgTreeGridHidingMethods.prototype.showColumnChooser = function() {};

/**
 * Hides the Column Chooser dialog. If it is not visible the method does nothing.
 * @return {void}
 */
IgTreeGridHidingMethods.prototype.hideColumnChooser = function() {};

/**
 * Shows a hidden column. If the column is not hidden the method does nothing.
 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
 * 
 * @param {!Object} column    An identifier for the column. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
 * @param {boolean=} isMultiColumnHeader    If it is true then the column is of type multicolumnheader. An identifier for the column should be of type string.
 * @param {!Function=} callback    Specifies a custom function to be called when the column(s) is shown(optional)
 * @return {void}
 */
IgTreeGridHidingMethods.prototype.showColumn = function(column, isMultiColumnHeader, callback) {};

/**
 * Hides a visible column. If the column is hidden the method does nothing.
 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
 * 
 * @param {!Object} column    An identifier for the column. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
 * @param {boolean=} isMultiColumnHeader    If it is true then the column is of type multicolumnheader. An identifier for the column should be of type string.
 * @param {!Function=} callback    Specifies a custom function to be called when the column is hidden(optional)
 * @return {void}
 */
IgTreeGridHidingMethods.prototype.hideColumn = function(column, isMultiColumnHeader, callback) {};

/**
 * Hides visible columns specified by the array. If the column is hidden the method does nothing.
 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
 * 
 * @param {!Array<?>} columns    An array of identifiers for the columns. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
 * @param {!Function=} callback    Specifies a custom function to be called when all columns are hidden(optional)
 * @return {void}
 */
IgTreeGridHidingMethods.prototype.hideMultiColumns = function(columns, callback) {};

/**
 * Show visible columns specified by the array. If the column is shown the method does nothing.
 * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
 * 
 * @param {!Array<?>} columns    An array of identifiers for the columns. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
 * @param {!Function=} callback    Specifies a custom function to be called when all columns are shown(optional)
 * @return {void}
 */
IgTreeGridHidingMethods.prototype.showMultiColumns = function(columns, callback) {};

/**
 * Gets whether the reset button in the column chooser dialog is to be rendered or not.
 * @return {void}
 */
IgTreeGridHidingMethods.prototype.isToRenderButtonReset = function() {};

/**
 * Reset hidden/shown column to initial state of dialog(when it is opened)
 * @return {void}
 */
IgTreeGridHidingMethods.prototype.resetHidingColumnChooser = function() {};

/**
 * Renders the Reset button in the Column Chooser dialog.
 * @return {void}
 */
IgTreeGridHidingMethods.prototype.renderColumnChooserResetButton = function() {};

/**
 * Remove Reset button in column chooser modal dialog
 * @return {void}
 */
IgTreeGridHidingMethods.prototype.removeColumnChooserResetButton = function() {};

/**
 * @param {string} propertyName
 * @return {!IgTreeGridHidingMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * A list of column settings that specifies hiding options on a per column basis.
 * 
 * A list of column settings that specifies hiding options on a per column basis.
 * 
 * 
 * \@optionValue New value to be set.
 * The width in pixels of the hidden column indicator in the header.
 * 
 * The width in pixels of the hidden column indicator in the header.
 * 
 * 
 * \@optionValue New value to be set.
 * Controls containment behavior.
 * 
 * owner  The column chooser dialog will be draggable only in the grid area
 * window  The column chooser dialog will be draggable in the whole window area
 * Controls containment behavior.
 * 
 * owner  The column chooser dialog will be draggable only in the grid area
 * window  The column chooser dialog will be draggable in the whole window area
 * 
 * \@optionValue New value to be set.
 * The default column chooser width.
 * 
 * The default column chooser width.
 * 
 * 
 * \@optionValue New value to be set.
 * The default column chooser height.
 * 
 * The default column chooser height.
 * 
 * 
 * \@optionValue New value to be set.
 * The duration of the dropdown animation in milliseconds.
 * 
 * The duration of the dropdown animation in milliseconds.
 * 
 * 
 * \@optionValue New value to be set.
 * The caption of the column chooser dialog.
 * 
 * The caption of the column chooser dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog.
 * 
 * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * The text displayed in the tooltip of the hidden column indicator.
 * 
 * The text displayed in the tooltip of the hidden column indicator.
 * 
 * 
 * \@optionValue New value to be set.
 * The text used in the drop down tools menu(Feature Chooser) to hide a column.
 * 
 * The text used in the drop down tools menu(Feature Chooser) to hide a column.
 * 
 * 
 * \@optionValue New value to be set.
 * The text used in the column chooser to show column
 * 
 * The text used in the column chooser to show column
 * 
 * 
 * \@optionValue New value to be set.
 * The text used in the column chooser to hide column
 * 
 * The text used in the column chooser to hide column
 * 
 * 
 * \@optionValue New value to be set.
 * Gets on click show/hide directly to be shown/hidden columns. If columnChooserHideOnClick is false then Apply and Cancel Buttons are shown on the bottom of modal dialog. Columns are Shown/Hidden after the Apply button is clicked
 * 
 * Sets on click show/hide directly to be shown/hidden columns. If columnChooserHideOnClick is false then Apply and Cancel Buttons are shown on the bottom of modal dialog. Columns are Shown/Hidden after the Apply button is clicked
 * 
 * 
 * \@optionValue New value to be set.
 * Text label for reset button.
 * 
 * Text label for reset button.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets time of milliseconds for animation duration to show/hide modal dialog
 * 
 * Sets time of milliseconds for animation duration to show/hide modal dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Gets text of button which apply changes in modal dialog
 * 
 * Sets text of button which apply changes in modal dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Gets text of button which cancel changes in modal dialog
 * 
 * Sets text of button which cancel changes in modal dialog
 * 
 * 
 * \@optionValue New value to be set.
 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
 * 
 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * 
 * \@optionValue New value to be set.
 * Event fired before a hiding operation is executed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
 * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
 * Event fired before a hiding operation is executed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
 * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
 * 
 * \@optionValue Define event handler function.
 * Event fired when trying to hide all columns in fixed or unfixed area.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnKeys array of column keys. Has a value only if the column's key is a string.
 * Event fired when trying to hide all columns in fixed or unfixed area.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnKeys array of column keys. Has a value only if the column's key is a string.
 * 
 * \@optionValue Define event handler function.
 * Event fired when trying to show column(s) in fixed area and total width of fixed are will be larger than whole grid width.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnKeys array of column keys. Has a value only if the column's key is a string.
 * Event fired when trying to show column(s) in fixed area and total width of fixed are will be larger than whole grid width.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnKeys array of column keys. Has a value only if the column's key is a string.
 * 
 * \@optionValue Define event handler function.
 * Event fired before a hiding operation is executed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnKeys to get array of the hidden column keys. In case when click on Reset button in column chooser then this is an array of column keys.
 * Event fired before a hiding operation is executed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnKeys to get array of the hidden column keys. In case when click on Reset button in column chooser then this is an array of column keys.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the hiding has been executed and results are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
 * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
 * Event fired after the hiding has been executed and results are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
 * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
 * 
 * \@optionValue Define event handler function.
 * Event fired before a showing operation is executed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the shown column index.
 * Use ui.columnKey to get the shown column key.
 * Event fired before a showing operation is executed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the shown column index.
 * Use ui.columnKey to get the shown column key.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the showing has been executed and results are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the shown column index.
 * Use ui.columnKey to get the shown column key.
 * Event fired after the showing has been executed and results are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the shown column index.
 * Use ui.columnKey to get the shown column key.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the column chooser is opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Event fired before the column chooser is opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the column chooser is already opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Event fired after the column chooser is already opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired every time the column chooser changes its position.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Use ui.originalPosition to get the original position of the column chooser div as { top, left } object, relative to the page.
 * Use ui.position to get the current position of the column chooser div as { top, left } object, relative to the page.
 * Event fired every time the column chooser changes its position.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Use ui.originalPosition to get the original position of the column chooser div as { top, left } object, relative to the page.
 * Use ui.position to get the current position of the column chooser div as { top, left } object, relative to the page.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the column chooser is closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Event fired before the column chooser is closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the column chooser has been closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Event fired after the column chooser has been closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the contents of the column chooser are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Event fired before the contents of the column chooser are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the contents of the column chooser are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Event fired after the contents of the column chooser are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired when button Apply in column chooser is clicked
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Use ui.columnsToShow to get array of columns identifiers which should be shown
 * Use ui.columnsToHide to get array of columns identifiers which should be hidden
 * Event fired when button Apply in column chooser is clicked
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Use ui.columnsToShow to get array of columns identifiers which should be shown
 * Use ui.columnsToHide to get array of columns identifiers which should be hidden
 * 
 * \@optionValue Define event handler function.
 * Event fired when button Reset in column chooser is clicked
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * Event fired when button Reset in column chooser is clicked
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridHiding widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgTreeGridHiding} methodName_or_optionLiteral_or_options
 * @param {...!Object|!Array<?>|string|!IgTreeGridHiding|?} column_or_columns_or_optionName_or_options_or_methodParams
 * @return {void|!Array<!IgGridHidingColumnSetting>|number|string|boolean|!ColumnHidingEvent|!ColumnHidingRefusedEvent|!ColumnShowingRefusedEvent|!MultiColumnHidingEvent|!ColumnHiddenEvent|!ColumnShowingEvent|!ColumnShownEvent|!ColumnChooserOpeningEvent|!ColumnChooserOpenedEvent|!ColumnChooserMovingEvent|!ColumnChooserClosingEvent|!ColumnChooserClosedEvent|!ColumnChooserContentsRenderingEvent|!ColumnChooserContentsRenderedEvent|!ColumnChooserButtonApplyClickEvent|!ColumnChooserButtonResetClickEvent|!JQuery|?}
 */
JQuery.prototype.igTreeGridHiding = function(methodName_or_optionLiteral_or_options, column_or_columns_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgTreeGridDataSourceSettings() {}
 /** @type {string} */
IgTreeGridDataSourceSettings.prototype.propertyExpanded;
 /** @type {string} */
IgTreeGridDataSourceSettings.prototype.propertyDataLevel;
 /** @type {boolean} */
IgTreeGridDataSourceSettings.prototype.initialFlatDataView;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgTreeGrid() {}
 /** @type {string} */
IgTreeGrid.prototype.indentation;
 /** @type {number} */
IgTreeGrid.prototype.initialIndentationLevel;
 /** @type {boolean} */
IgTreeGrid.prototype.showExpansionIndicator;
 /** @type {string} */
IgTreeGrid.prototype.expandTooltipText;
 /** @type {string} */
IgTreeGrid.prototype.collapseTooltipText;
 /** @type {string} */
IgTreeGrid.prototype.foreignKey;
 /** @type {number} */
IgTreeGrid.prototype.initialExpandDepth;
 /** @type {number} */
IgTreeGrid.prototype.foreignKeyRootValue;
 /** @type {boolean} */
IgTreeGrid.prototype.renderExpansionIndicatorColumn;
 /** @type {(string|!Object)} */
IgTreeGrid.prototype.renderFirstDataCellFunction;
 /** @type {string} */
IgTreeGrid.prototype.childDataKey;
 /** @type {(string|!Object)} */
IgTreeGrid.prototype.renderExpansionCellFunction;
 /** @type {boolean} */
IgTreeGrid.prototype.enableRemoteLoadOnDemand;
 /** @type {!IgTreeGridDataSourceSettings} */
IgTreeGrid.prototype.dataSourceSettings;
 /** @type {!RowExpandingEvent} */
IgTreeGrid.prototype.rowExpanding;
 /** @type {!RowExpandedEvent} */
IgTreeGrid.prototype.rowExpanded;
 /** @type {!RowCollapsingEvent} */
IgTreeGrid.prototype.rowCollapsing;
 /** @type {!RowCollapsedEvent} */
IgTreeGrid.prototype.rowCollapsed;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgTreeGridMethods() {}

/**
 * Clears the transaction log (delegates to igDataSource). Note that this does not update the UI. In case the UI must be updated, set the second parameter "updateUI" to true, which will trigger a call to dataBind() to re-render the contents.
 * 
 * @param {!Object=} rowId     If specified, will only rollback the transactions with that row id.
 * @param {boolean=} updateUI     Whether to update the UI or not.
 * @return {!Array<?>}
 */
IgTreeGridMethods.prototype.rollback = function(rowId, updateUI) {};

/**
 * Causes the treegrid to data bind to the data source (local or remote) , and re-render all of the data
 * @return {void}
 */
IgTreeGridMethods.prototype.dataBind = function() {};

/**
 * Toggle row by specified row or row identifier
 * 
 * @param {!Object} row     jQuery table row object or a row id.
 * @param {!Function=} callback     Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded
 * @return {void}
 */
IgTreeGridMethods.prototype.toggleRow = function(row, callback) {};

/**
 * Expands a parent row by specified row or row identifier
 * 
 * @param {!Object} row     jQuery table row object or a row id.
 * @param {!Function=} callback     Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded
 * @return {void}
 */
IgTreeGridMethods.prototype.expandRow = function(row, callback) {};

/**
 * Collapses a parent row by specified row or row identifier
 * 
 * @param {!Object} row     jQuery table row object, raw DOM row object or a row id.
 * @param {!Function=} callback     Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded
 * @return {void}
 */
IgTreeGridMethods.prototype.collapseRow = function(row, callback) {};

/**
 * Adds a new row (TR) to the grid as a child of a specific row, by taking a data row object. Assumes the record will have the primary key.
 * 
 * @param {!Object} rec     The data row JavaScript object.
 * @param {string=} parentId     Identifier/key of the targeted parent row. If missing, then the new row is rendered to the bottom of the grid.
 * @return {void}
 */
IgTreeGridMethods.prototype.renderNewChild = function(rec, parentId) {};

/**
 * Destroys igTreeGrid
 * @return {!Object}
 */
IgTreeGridMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgTreeGridMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Gets the indentation (in pixels or percent) for a tree grid row. Nested indentation is achieved by calculating the level times the indentation value. Ex: '10px' or '5%'. Default is 30.
 * 
 * Sets the indentation (in pixels or percent) for a tree grid row. Nested indentation is achieved by calculating the level times the indentation value. Ex: '10px' or '5%'. Default is 30.
 * 
 * 
 * \@optionValue New value to be set.
 * If initial indentation level is set then it is used to be calculated width of the data skip column(usually used when remote load on demand is enabled)
 * 
 * If initial indentation level is set then it is used to be calculated width of the data skip column(usually used when remote load on demand is enabled)
 * 
 * 
 * \@optionValue New value to be set.
 * Gets if rows(that have child rows) will have an expander image that will allow end users to expand and collapse them. This option can be set only at initialization.
 * 
 * Sets if rows(that have child rows) will have an expander image that will allow end users to expand and collapse them. This option can be set only at initialization.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the expansion indicator tooltip text.
 * 
 * Sets the expansion indicator tooltip text.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the collapse indicator tooltip text.
 * 
 * Sets the collapse indicator tooltip text.
 * 
 * 
 * \@optionValue New value to be set.
 * Unique identifier used in a self-referencing flat data source. Used with primaryKey to create a relationship among flat data sources.
 * 
 * Unique identifier used in a self-referencing flat data source. Used with primaryKey to create a relationship among flat data sources.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the depth down to which the tree grid would be expanded upon initial render. To expand all rows set value to -1. Default is -1.
 * 
 * Sets the depth down to which the tree grid would be expanded upon initial render. To expand all rows set value to -1. Default is -1.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the foreign key value in the data source to treat as the root level once the grid is data bound. Defaults to -1 (which includes the entire data source)
 * 
 * Sets the foreign key value in the data source to treat as the root level once the grid is data bound. Defaults to -1 (which includes the entire data source)
 * 
 * 
 * \@optionValue New value to be set.
 * Specify whether to render non-data column which contains expander indicators
 * 
 * Specify whether to render non-data column which contains expander indicators
 * 
 * 
 * \@optionValue New value to be set.
 * A reference or name of a javascript function which changes first data cell - renders indentation according to databound level
 * 
 * A reference or name of a javascript function which changes first data cell - renders indentation according to databound level
 * 
 * 
 * \@optionValue New value to be set.
 * Property name of the array of child data in a hierarchical data source.
 * 
 * Property name of the array of child data in a hierarchical data source.
 * 
 * 
 * \@optionValue New value to be set.
 * A reference or name of a javascript function which renders expand indicators(called ONLY IF option renderExpansionIndicatorColumn is true)
 * 
 * A reference or name of a javascript function which renders expand indicators(called ONLY IF option renderExpansionIndicatorColumn is true)
 * 
 * 
 * \@optionValue New value to be set.
 * Gets to the tree grid if data is loaded on demand from a remote server. Default is false.
 * 
 * Sets to the tree grid if data is loaded on demand from a remote server. Default is false.
 * 
 * 
 * \@optionValue New value to be set.
 * Options object to configure data source-specific settings
 * 
 * Options object to configure data source-specific settings
 * 
 * 
 * \@optionValue New value to be set.
 * Fired when a row is about to be expanded.
 * use args.owner to access the instance of the igTreeGrid
 * use args.row to access the row element (as a wrapped jQuery object) that is about to be expanded
 * use args.fixedRow to access the row element (as a jQuery wrapped object) in a fixed column that is about to expanded. If there are no fixed columns then this property returns undefined.
 * use args.dataLevel to access the level in the hierarchy associated with the row
 * Fired when a row is about to be expanded.
 * use args.owner to access the instance of the igTreeGrid
 * use args.row to access the row element (as a wrapped jQuery object) that is about to be expanded
 * use args.fixedRow to access the row element (as a jQuery wrapped object) in a fixed column that is about to expanded. If there are no fixed columns then this property returns undefined.
 * use args.dataLevel to access the level in the hierarchy associated with the row
 * 
 * \@optionValue New value to be set.
 * Fired when a row is expanded.
 * use args.owner to access the instance of the igTreeGrid
 * use args.row to access the row element (as a wrapped jQuery object) that is about to be expanded
 * use args.fixedRow to access the row element (as a jQuery wrapped object) in a fixed column that is about to expanded. If there are no fixed columns then this property returns undefined.
 * use args.dataLevel to access the level in the hierarchy associated with the row
 * use args.dataRecord to access the source data record
 * Fired when a row is expanded.
 * use args.owner to access the instance of the igTreeGrid
 * use args.row to access the row element (as a wrapped jQuery object) that is about to be expanded
 * use args.fixedRow to access the row element (as a jQuery wrapped object) in a fixed column that is about to expanded. If there are no fixed columns then this property returns undefined.
 * use args.dataLevel to access the level in the hierarchy associated with the row
 * use args.dataRecord to access the source data record
 * 
 * \@optionValue New value to be set.
 * Fired when a row is about to be collapsed.
 * use args.owner to access the instance of the igTreeGrid
 * use args.row to access the row element (as a wrapped jQuery object) that is about to be expanded
 * use args.fixedRow to access the row element (as a jQuery wrapped object) in a fixed column that is about to expanded. If there are no fixed columns then this property returns undefined.
 * use args.dataLevel to access the level in the hierarchy associated with the row
 * Fired when a row is about to be collapsed.
 * use args.owner to access the instance of the igTreeGrid
 * use args.row to access the row element (as a wrapped jQuery object) that is about to be expanded
 * use args.fixedRow to access the row element (as a jQuery wrapped object) in a fixed column that is about to expanded. If there are no fixed columns then this property returns undefined.
 * use args.dataLevel to access the level in the hierarchy associated with the row
 * 
 * \@optionValue New value to be set.
 * Fired after a row is collapsed
 * use args.owner to access the instance of the igTreeGrid
 * use args.row to access the row element (as a wrapped jQuery object) that is about to be expanded
 * use args.fixedRow to access the row element (as a jQuery wrapped object) in a fixed column that is about to expanded. If there are no fixed columns then this property returns undefined.
 * use args.dataLevel to access the level in the hierarchy associated with the row
 * use args.dataRecord to access the source data record
 * Fired after a row is collapsed
 * use args.owner to access the instance of the igTreeGrid
 * use args.row to access the row element (as a wrapped jQuery object) that is about to be expanded
 * use args.fixedRow to access the row element (as a jQuery wrapped object) in a fixed column that is about to expanded. If there are no fixed columns then this property returns undefined.
 * use args.dataLevel to access the level in the hierarchy associated with the row
 * use args.dataRecord to access the source data record
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgTreeGrid} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgTreeGrid|?=} rowId_or_row_or_rec_or_optionName_or_options_or_methodParams
 * @return {!Array<?>|void|!Object|string|number|boolean|(string|!Object)|!IgTreeGridDataSourceSettings|!RowExpandingEvent|!RowExpandedEvent|!RowCollapsingEvent|!RowCollapsedEvent|!JQuery|?}
 */
JQuery.prototype.igTreeGrid = function(methodName_or_optionLiteral_or_options, rowId_or_row_or_rec_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgTreeGridMultiColumnHeaders() {}
 /** @type {boolean} */
IgTreeGridMultiColumnHeaders.prototype.inherit;
 /** @type {!GroupCollapsingEvent} */
IgTreeGridMultiColumnHeaders.prototype.groupCollapsing;
 /** @type {!GroupCollapsedEvent} */
IgTreeGridMultiColumnHeaders.prototype.groupCollapsed;
 /** @type {!GroupExpandingEvent} */
IgTreeGridMultiColumnHeaders.prototype.groupExpanding;
 /** @type {!GroupExpandedEvent} */
IgTreeGridMultiColumnHeaders.prototype.groupExpanded;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgTreeGridMultiColumnHeadersMethods() {}

/**
 * @return {void}
 */
IgTreeGridMultiColumnHeadersMethods.prototype.destroy = function() {};

/**
 * Expands a collapsed group. If the group is expanded, the method does nothing.
 *             Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
 * 
 * @param {string} groupKey    Group key.
 * @param {!Function=} callback Specifies a custom function to be called when the group is expanded.
 * @return {void}
 */
IgTreeGridMultiColumnHeadersMethods.prototype.expandGroup = function(groupKey, callback) {};

/**
 * Collapses an expanded group. If the group is collapsed, the method does nothing.
 *             Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
 * 
 * @param {string} groupKey Group key.
 * @param {!Function=} callback Specifies a custom function to be called when the group is collapsed.
 * @return {void}
 */
IgTreeGridMultiColumnHeadersMethods.prototype.collapseGroup = function(groupKey, callback) {};

/**
 * Toggles a collapsible group.
 *             Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
 * 
 * @param {string} groupKey Group key.
 * @param {!Function=} callback Specifies a custom function to be called when the group is toggled.
 * @return {void}
 */
IgTreeGridMultiColumnHeadersMethods.prototype.toggleGroup = function(groupKey, callback) {};

/**
 * Returns multicolumn headers array. if there aren"t multicolumn headers returns undefined
 * @return {!Array<?>}
 */
IgTreeGridMultiColumnHeadersMethods.prototype.getMultiColumnHeaders = function() {};

/**
 * @param {string} propertyName
 * @return {!IgTreeGridMultiColumnHeadersMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * \@optionValue New value to be set.
 * Event fired before a group collapsing operation is executed.
 *             The handler function takes arguments evt and ui.
 *             Use ui.owner to get the reference to the GridMultiColumnHeaders widget.
 *             Use ui.owner.grid to get the reference to the grid widget.
 *             Use ui.column to get the column object for the current group that is collapsing.
 *             Use ui.element to get a reference to the jQuery object for the column being collapsing (th).
 * Event fired before a group collapsing operation is executed.
 *             The handler function takes arguments evt and ui.
 *             Use ui.owner to get the reference to the GridMultiColumnHeaders widget.
 *             Use ui.owner.grid to get the reference to the grid widget.
 *             Use ui.column to get the column object for the current group that is collapsing.
 *             Use ui.element to get a reference to the jQuery object for the column being collapsing (th).
 * 
 * \@optionValue Define event handler function.
 * Event fired after the group collapsing has been executed and results are rendered.
 *             The handler function takes arguments evt and ui.
 *             Use ui.owner to get the reference to the GridMultiColumnHeaders widget.
 *             Use ui.owner.grid to get the reference to the grid widget.
 *             Use ui.column to get the column object for the current group that is collapsed.
 *             Use ui.element to get a reference to the jQuery object for the column being collapsed (th).
 * Event fired after the group collapsing has been executed and results are rendered.
 *             The handler function takes arguments evt and ui.
 *             Use ui.owner to get the reference to the GridMultiColumnHeaders widget.
 *             Use ui.owner.grid to get the reference to the grid widget.
 *             Use ui.column to get the column object for the current group that is collapsed.
 *             Use ui.element to get a reference to the jQuery object for the column being collapsed (th).
 * 
 * \@optionValue Define event handler function.
 * Event fired before a group expanding operation is executed.
 *             The handler function takes arguments evt and ui.
 *             Use ui.owner to get the reference to the GridMultiColumnHeaders widget.
 *             Use ui.owner.grid to get the reference to the grid widget.
 *             Use ui.column to get the column object for the current group that is expanding.
 *             Use ui.element to get a reference to the jQuery object for the column being expanded (th).
 * Event fired before a group expanding operation is executed.
 *             The handler function takes arguments evt and ui.
 *             Use ui.owner to get the reference to the GridMultiColumnHeaders widget.
 *             Use ui.owner.grid to get the reference to the grid widget.
 *             Use ui.column to get the column object for the current group that is expanding.
 *             Use ui.element to get a reference to the jQuery object for the column being expanded (th).
 * 
 * \@optionValue Define event handler function.
 * Event fired after the group expanding has been executed and results are rendered.
 *             The handler function takes arguments evt and ui.
 *             Use ui.owner to get the reference to the GridMultiColumnHeaders widget.
 *             Use ui.owner.grid to get the reference to the grid widget.
 *             Use ui.column to get the column object for the current group that is expanded.
 *             Use ui.element to get a reference to the jQuery object for the column being expanded (th).
 * Event fired after the group expanding has been executed and results are rendered.
 *             The handler function takes arguments evt and ui.
 *             Use ui.owner to get the reference to the GridMultiColumnHeaders widget.
 *             Use ui.owner.grid to get the reference to the grid widget.
 *             Use ui.column to get the column object for the current group that is expanded.
 *             Use ui.element to get a reference to the jQuery object for the column being expanded (th).
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgTreeGridMultiColumnHeaders} methodName_or_optionLiteral_or_options
 * @param {...string|!IgTreeGridMultiColumnHeaders|?} groupKey_or_optionName_or_options_or_methodParams
 * @return {void|!Array<?>|boolean|!GroupCollapsingEvent|!GroupCollapsedEvent|!GroupExpandingEvent|!GroupExpandedEvent|!JQuery|?}
 */
JQuery.prototype.igTreeGridMultiColumnHeaders = function(methodName_or_optionLiteral_or_options, groupKey_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function ContextRowRenderingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ContextRowRenderingEventUIParam() {}
 /** @type {?} */
ContextRowRenderingEventUIParam.prototype.owner;
 /** @type {?} */
ContextRowRenderingEventUIParam.prototype.dataRow;
 /** @type {?} */
ContextRowRenderingEventUIParam.prototype.currentPageIndex;
 /** @type {?} */
ContextRowRenderingEventUIParam.prototype.contextRowMode;
/**
 * @record
 * @struct
 */
function ContextRowRenderedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ContextRowRenderedEventUIParam() {}
 /** @type {?} */
ContextRowRenderedEventUIParam.prototype.owner;
 /** @type {?} */
ContextRowRenderedEventUIParam.prototype.dataRow;
 /** @type {?} */
ContextRowRenderedEventUIParam.prototype.currentPageIndex;
 /** @type {?} */
ContextRowRenderedEventUIParam.prototype.parentRows;
 /** @type {?} */
ContextRowRenderedEventUIParam.prototype.contextRowMode;
/**
 * @record
 * @struct
 */
function IgTreeGridPaging() {}
 /** @type {string} */
IgTreeGridPaging.prototype.mode;
 /** @type {string} */
IgTreeGridPaging.prototype.contextRowMode;
 /** @type {string} */
IgTreeGridPaging.prototype.contextRowLoadingText;
 /** @type {string} */
IgTreeGridPaging.prototype.contextRowRootText;
 /** @type {string} */
IgTreeGridPaging.prototype.breadcrumbKey;
 /** @type {string} */
IgTreeGridPaging.prototype.breadcrumbDelimiter;
 /** @type {(string|!Function)} */
IgTreeGridPaging.prototype.renderContextRowFunc;
 /** @type {number} */
IgTreeGridPaging.prototype.pageSize;
 /** @type {string} */
IgTreeGridPaging.prototype.recordCountKey;
 /** @type {string} */
IgTreeGridPaging.prototype.pageSizeUrlKey;
 /** @type {string} */
IgTreeGridPaging.prototype.pageIndexUrlKey;
 /** @type {number} */
IgTreeGridPaging.prototype.currentPageIndex;
 /** @type {string} */
IgTreeGridPaging.prototype.type;
 /** @type {boolean} */
IgTreeGridPaging.prototype.showPageSizeDropDown;
 /** @type {string} */
IgTreeGridPaging.prototype.pageSizeDropDownLabel;
 /** @type {string} */
IgTreeGridPaging.prototype.pageSizeDropDownTrailingLabel;
 /** @type {string} */
IgTreeGridPaging.prototype.pageSizeDropDownLocation;
 /** @type {boolean} */
IgTreeGridPaging.prototype.showPagerRecordsLabel;
 /** @type {string} */
IgTreeGridPaging.prototype.pagerRecordsLabelTemplate;
 /** @type {string} */
IgTreeGridPaging.prototype.nextPageLabelText;
 /** @type {string} */
IgTreeGridPaging.prototype.prevPageLabelText;
 /** @type {string} */
IgTreeGridPaging.prototype.firstPageLabelText;
 /** @type {string} */
IgTreeGridPaging.prototype.lastPageLabelText;
 /** @type {boolean} */
IgTreeGridPaging.prototype.showFirstLastPages;
 /** @type {boolean} */
IgTreeGridPaging.prototype.showPrevNextPages;
 /** @type {string} */
IgTreeGridPaging.prototype.currentPageDropDownLeadingLabel;
 /** @type {string} */
IgTreeGridPaging.prototype.currentPageDropDownTrailingLabel;
 /** @type {string} */
IgTreeGridPaging.prototype.currentPageDropDownTooltip;
 /** @type {string} */
IgTreeGridPaging.prototype.pageSizeDropDownTooltip;
 /** @type {string} */
IgTreeGridPaging.prototype.pagerRecordsLabelTooltip;
 /** @type {string} */
IgTreeGridPaging.prototype.prevPageTooltip;
 /** @type {string} */
IgTreeGridPaging.prototype.nextPageTooltip;
 /** @type {string} */
IgTreeGridPaging.prototype.firstPageTooltip;
 /** @type {string} */
IgTreeGridPaging.prototype.lastPageTooltip;
 /** @type {string} */
IgTreeGridPaging.prototype.pageTooltipFormat;
 /** @type {?} */
IgTreeGridPaging.prototype.pageSizeList;
 /** @type {number} */
IgTreeGridPaging.prototype.pageCountLimit;
 /** @type {number} */
IgTreeGridPaging.prototype.visiblePageCount;
 /** @type {number} */
IgTreeGridPaging.prototype.defaultDropDownWidth;
 /** @type {number} */
IgTreeGridPaging.prototype.delayOnPageChanged;
 /** @type {boolean} */
IgTreeGridPaging.prototype.persist;
 /** @type {boolean} */
IgTreeGridPaging.prototype.inherit;
 /** @type {!ContextRowRenderingEvent} */
IgTreeGridPaging.prototype.contextRowRendering;
 /** @type {!ContextRowRenderedEvent} */
IgTreeGridPaging.prototype.contextRowRendered;
 /** @type {!PageIndexChangingEvent} */
IgTreeGridPaging.prototype.pageIndexChanging;
 /** @type {!PageIndexChangedEvent} */
IgTreeGridPaging.prototype.pageIndexChanged;
 /** @type {!PageSizeChangingEvent} */
IgTreeGridPaging.prototype.pageSizeChanging;
 /** @type {!PageSizeChangedEvent} */
IgTreeGridPaging.prototype.pageSizeChanged;
 /** @type {!PagerRenderingEvent} */
IgTreeGridPaging.prototype.pagerRendering;
 /** @type {!PagerRenderedEvent} */
IgTreeGridPaging.prototype.pagerRendered;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgTreeGridPagingMethods() {}

/**
 * Destroys the igTreeGridPaging feature by removing all elements in the pager area, unbinding events, and resetting data to discard data filtering on paging
 * @return {void}
 */
IgTreeGridPagingMethods.prototype.destroy = function() {};

/**
 * Get jQuery representation of of the context row. It is rendered in the header. If there isn't such element - creates it.
 * @return {!Object}
 */
IgTreeGridPagingMethods.prototype.getContextRow = function() {};

/**
 * Get jQuery representation of element that holds text area of the context row. If there isn't such element - creates it.
 * @return {!Object}
 */
IgTreeGridPagingMethods.prototype.getContextRowTextArea = function() {};

/**
 * Gets/Sets the current page index, delegates data binding and paging to [$.ig.DataSource](ig.datasource).
 * 
 * @param {number=} index     The page index to go to.
 * @return {number}
 */
IgTreeGridPagingMethods.prototype.pageIndex = function(index) {};

/**
 * Gets/Sets the page size. If no parameter is specified, just returns the current page size.
 * 
 * @param {number=} size     The new page size.
 * @return {number}
 */
IgTreeGridPagingMethods.prototype.pageSize = function(size) {};

/**
 * @param {string} propertyName
 * @return {!IgTreeGridPagingMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Sets gets paging mode.
 * 
 * Sets gets paging mode.
 * 
 * 
 * \@optionValue New value to be set.
 * When data flows to the next page there are a couple of different modes that can help communicate the context of a leaf level row. When mode option is "rootLevelOnly" then the context row always shows the value of the contextRowRootText option.
 * 
 * When data flows to the next page there are a couple of different modes that can help communicate the context of a leaf level row. When mode option is "rootLevelOnly" then the context row always shows the value of the contextRowRootText option.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets/gets the text message shown while loading content of the context row(while processing breadcrumb/immediate parent row). It is set via $.html(). If set to null loading message is not shown.
 * 
 * Sets/gets the text message shown while loading content of the context row(while processing breadcrumb/immediate parent row). It is set via $.html(). If set to null loading message is not shown.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets/gets the content of the context row when the first record in the page is root(hasn't ancestors) record. It is set via $.html()
 * 
 * Sets/gets the content of the context row when the first record in the page is root(hasn't ancestors) record. It is set via $.html()
 * 
 * 
 * \@optionValue New value to be set.
 * Sets/gets the column key of ancestor to be shown in the breadcrumb trail. It is used only when contextRowMode is breadcrumb
 * 
 * Sets/gets the column key of ancestor to be shown in the breadcrumb trail. It is used only when contextRowMode is breadcrumb
 * 
 * 
 * \@optionValue New value to be set.
 * Sets/gets (it is set via  $.html()) delimiter between ancestors in the breadcrumb trail. It is used only when contextRowMode is breadcrumb
 * 
 * Sets/gets (it is set via  $.html()) delimiter between ancestors in the breadcrumb trail. It is used only when contextRowMode is breadcrumb
 * 
 * 
 * \@optionValue New value to be set.
 * Reference to the (or name of )function, called before rendering context row content(rendering loading message/bread crumb/parent row). The function takes 4 arguments- dataRow, $textArea- jQuery representation of the text area of the context row(when mode is loading/breadcrumb then it is <span /> otherwise <tr />), array of parent rows and context mode - "loading"|"breadcrumb"|"parent". When the function returns string it is used as html set in $textArea. If the function does not return result or returns false/empty string then rendering of the content of the context row should be handled by the developer(similar to canceling rendering of context row content).
 * 
 * Reference to the (or name of )function, called before rendering context row content(rendering loading message/bread crumb/parent row). The function takes 4 arguments- dataRow, $textArea- jQuery representation of the text area of the context row(when mode is loading/breadcrumb then it is <span /> otherwise <tr />), array of parent rows and context mode - "loading"|"breadcrumb"|"parent". When the function returns string it is used as html set in $textArea. If the function does not return result or returns false/empty string then rendering of the content of the context row should be handled by the developer(similar to canceling rendering of context row content).
 * 
 * 
 * \@optionValue New value to be set.
 * Number of records loaded and displayed per page.
 * 
 * Number of records loaded and displayed per page.
 * 
 * 
 * \@optionValue New value to be set.
 * The property in the response data, when using remote data source, that will hold the total number of records in the data source.
 * 
 * The property in the response data, when using remote data source, that will hold the total number of records in the data source.
 * 
 * 
 * \@optionValue New value to be set.
 * Denotes the name of the encoded URL parameter that will state what is the currently requested page size.
 * 
 * Denotes the name of the encoded URL parameter that will state what is the currently requested page size.
 * 
 * 
 * \@optionValue New value to be set.
 * Denotes the name of the encoded URL parameter that will state what is the currently requested page index.
 * 
 * Denotes the name of the encoded URL parameter that will state what is the currently requested page index.
 * 
 * 
 * \@optionValue New value to be set.
 * Current page index that's bound in the data source and rendered in the UI.
 * 
 * Current page index that's bound in the data source and rendered in the UI.
 * 
 * 
 * \@optionValue New value to be set.
 * Type of paging. Delegates all paging functionality to the [$.ig.DataSource](ig.datasource).
 * 
 * Type of paging. Delegates all paging functionality to the [$.ig.DataSource](ig.datasource).
 * 
 * 
 * \@optionValue New value to be set.
 * If false, a dropdown allowing to change the page size will not be rendered in the UI.
 * 
 * If false, a dropdown allowing to change the page size will not be rendered in the UI.
 * 
 * 
 * \@optionValue New value to be set.
 * Text rendered in front of the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
 * 
 * Text rendered in front of the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
 * 
 * 
 * \@optionValue New value to be set.
 * Trailing text for the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
 * 
 * Trailing text for the page size dropdown, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true.
 * 
 * 
 * \@optionValue New value to be set.
 * Page size dropdown location, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true. Can be rendered above the grid header or inside the pager, next to the page links.
 * 
 * Page size dropdown location, when [showPageSizeDropDown](ui.iggridpaging#options:showPageSizeDropDown) is set to true. Can be rendered above the grid header or inside the pager, next to the page links.
 * 
 * 
 * \@optionValue New value to be set.
 * Option specifying whether to show summary label for the currently rendered records or not.
 * 
 * Option specifying whether to show summary label for the currently rendered records or not.
 * 
 * 
 * \@optionValue New value to be set.
 * Custom pager records label template - in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax.
 * 
 * Custom pager records label template - in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax.
 * 
 * 
 * \@optionValue New value to be set.
 * Text for the next page label.
 * 
 * Text for the next page label.
 * 
 * 
 * \@optionValue New value to be set.
 * Text for the previous page label.
 * 
 * Text for the previous page label.
 * 
 * 
 * \@optionValue New value to be set.
 * Text for the first page label.
 * 
 * Text for the first page label.
 * 
 * 
 * \@optionValue New value to be set.
 * Text for the last page label.
 * 
 * Text for the last page label.
 * 
 * 
 * \@optionValue New value to be set.
 * Option specifying whether to render the first and last page navigation buttons.
 * 
 * Option specifying whether to render the first and last page navigation buttons.
 * 
 * 
 * \@optionValue New value to be set.
 * Option specifying whether to render the previous and next page navigation buttons.
 * 
 * Option specifying whether to render the previous and next page navigation buttons.
 * 
 * 
 * \@optionValue New value to be set.
 * Leading label text for the drop down from where the page index can be switched.
 * 
 * Leading label text for the drop down from where the page index can be switched.
 * 
 * 
 * \@optionValue New value to be set.
 * Trailing label text for the drop down from where the page index can be switched.
 * 
 * Trailing label text for the drop down from where the page index can be switched.
 * 
 * 
 * \@optionValue New value to be set.
 * Tooltip text for the page index drop down.
 * 
 * Tooltip text for the page index drop down.
 * 
 * 
 * \@optionValue New value to be set.
 * Tooltip text for the page size drop down.
 * 
 * Tooltip text for the page size drop down.
 * 
 * 
 * \@optionValue New value to be set.
 * Tooltip text for the pager records label.
 * 
 * Tooltip text for the pager records label.
 * 
 * 
 * \@optionValue New value to be set.
 * Tooltip text for the previous page button.
 * 
 * Tooltip text for the previous page button.
 * 
 * 
 * \@optionValue New value to be set.
 * Tooltip text for the next page button.
 * 
 * Tooltip text for the next page button.
 * 
 * 
 * \@optionValue New value to be set.
 * Tooltip text for the first page button.
 * 
 * Tooltip text for the first page button.
 * 
 * 
 * \@optionValue New value to be set.
 * Tooltip text for the last page button.
 * 
 * Tooltip text for the last page button.
 * 
 * 
 * \@optionValue New value to be set.
 * Tooltip text templates of buttons that navigate to a particular page. The format string follows the [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax. See also the [pageCountLimit](ui.iggridpaging#options:pageCountLimit) option.
 * 
 * Tooltip text templates of buttons that navigate to a particular page. The format string follows the [igTemplating](http://www.igniteui.com/help/igtemplating-overview) style and syntax. See also the [pageCountLimit](ui.iggridpaging#options:pageCountLimit) option.
 * 
 * 
 * \@optionValue New value to be set.
 * Predefined page sizes that are available to the end user to switch their grid paging to, through a drop down in the grid header.
 * 
 * Predefined page sizes that are available to the end user to switch their grid paging to, through a drop down in the grid header.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets/Gets the number of pages which if exceeded a drop down list of page indices is displayed. If the number of pages is less than or equal to this option then buttons for each page are displayed.
 * 
 * Sets/ the number of pages which if exceeded a drop down list of page indices is displayed. If the number of pages is less than or equal to this option then buttons for each page are displayed.
 * 
 * 
 * \@optionValue New value to be set.
 * Number of page buttons, adjacent to and including the [active page](ui.iggridpaging#options:currentPageIndex), that are constantly visible. For the invisible pages, previous and next buttons are used.
 * 
 * Number of page buttons, adjacent to and including the [active page](ui.iggridpaging#options:currentPageIndex), that are constantly visible. For the invisible pages, previous and next buttons are used.
 * 
 * 
 * \@optionValue New value to be set.
 * Drop down width for the page size and page index drop downs.
 * 
 * Drop down width for the page size and page index drop downs.
 * 
 * 
 * \@optionValue New value to be set.
 * Time in milliseconds for which page drop down will wait for keystrokes before changing the page.
 * 
 * Time in milliseconds for which page drop down will wait for keystrokes before changing the page.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables paging persistence between states.
 * 
 * Enables/disables paging persistence between states.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * 
 * \@optionValue New value to be set.
 * Event fired before rendering context row content.
 * Return false in order to cancel this event.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to igTreeGridPaging.
 * Use ui.dataRow to get reference to the first data row. Null if there are no records.
 * Use ui.currentPageIndex to get current page index.
 * Use ui.contextRowMode to get the current context row mode.
 * Event fired before rendering context row content.
 * Return false in order to cancel this event.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to igTreeGridPaging.
 * Use ui.dataRow to get reference to the first data row. Null if there are no records.
 * Use ui.currentPageIndex to get current page index.
 * Use ui.contextRowMode to get the current context row mode.
 * 
 * \@optionValue Define event handler function.
 * Event fired context row content is rendered.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to igTreeGridPaging.
 * Use ui.dataRow to get reference to the first data row. Null if there are no records.
 * Use ui.currentPageIndex to get current page index.
 * Use ui.parentRows to get array of the parent rows(of the ui.dataRow). If the dataRow is null(for instance filter is applied and no records are shown) then it is empty array. Otherwise it contains all ancestors ordered by level(including the current dataRow) - the first item is root level, the last array item is the current ui.dataRow
 * Use ui.contextRowMode to get the current context row mode.
 * Event fired context row content is rendered.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to igTreeGridPaging.
 * Use ui.dataRow to get reference to the first data row. Null if there are no records.
 * Use ui.currentPageIndex to get current page index.
 * Use ui.parentRows to get array of the parent rows(of the ui.dataRow). If the dataRow is null(for instance filter is applied and no records are shown) then it is empty array. Otherwise it contains all ancestors ordered by level(including the current dataRow) - the first item is root level, the last array item is the current ui.dataRow
 * Use ui.contextRowMode to get the current context row mode.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the page index is changed.
 * Return false in order to cancel page index changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.currentPageIndex to get current page index.
 * Use ui.newPageIndex to get new page index.
 * Event fired before the page index is changed.
 * Return false in order to cancel page index changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.currentPageIndex to get current page index.
 * Use ui.newPageIndex to get new page index.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the page index is changed , but before grid data rebinds
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.pageIndex to get current page index.
 * Event fired after the page index is changed , but before grid data rebinds
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.pageIndex to get current page index.
 * 
 * \@optionValue Define event handler function.
 * Event fired when the page size is about to be changed from the page size dropdown.
 * Return false in order to cancel page size changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.currentPageSize to get current page size.
 * Use ui.newPageSize to get new page size.
 * Event fired when the page size is about to be changed from the page size dropdown.
 * Return false in order to cancel page size changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.currentPageSize to get current page size.
 * Use ui.newPageSize to get new page size.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the page size is changed from the page size dropdown.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.pageSize to get current page size.
 * Event fired after the page size is changed from the page size dropdown.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.pageSize to get current page size.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the pager footer is rendered (the whole area below the grid records).
 * Return false in order to cancel pager footer rendering.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.dataSource to get reference to grid's data source.
 * Event fired before the pager footer is rendered (the whole area below the grid records).
 * Return false in order to cancel pager footer rendering.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.dataSource to get reference to grid's data source.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the pager footer is rendered
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.dataSource to get reference to grid's data source.
 * Event fired after the pager footer is rendered
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridPaging.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.dataSource to get reference to grid's data source.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgTreeGridPaging} methodName_or_optionLiteral_or_options
 * @param {...number|string|!IgTreeGridPaging|?=} index_or_size_or_optionName_or_options_or_methodParams
 * @return {void|!Object|number|string|(string|!Function)|boolean|?|!ContextRowRenderingEvent|!ContextRowRenderedEvent|!PageIndexChangingEvent|!PageIndexChangedEvent|!PageSizeChangingEvent|!PageSizeChangedEvent|!PagerRenderingEvent|!PagerRenderedEvent|!JQuery}
 */
JQuery.prototype.igTreeGridPaging = function(methodName_or_optionLiteral_or_options, index_or_size_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgTreeGridResizing() {}
 /** @type {boolean} */
IgTreeGridResizing.prototype.allowDoubleClickToResize;
 /** @type {boolean} */
IgTreeGridResizing.prototype.deferredResizing;
 /** @type {!Array<!IgGridResizingColumnSetting>} */
IgTreeGridResizing.prototype.columnSettings;
 /** @type {number} */
IgTreeGridResizing.prototype.handleThreshold;
 /** @type {boolean} */
IgTreeGridResizing.prototype.inherit;
 /** @type {!ColumnResizingEvent} */
IgTreeGridResizing.prototype.columnResizing;
 /** @type {!ColumnResizingRefusedEvent} */
IgTreeGridResizing.prototype.columnResizingRefused;
 /** @type {!ColumnResizedEvent} */
IgTreeGridResizing.prototype.columnResized;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgTreeGridResizingMethods() {}

/**
 * @return {void}
 */
IgTreeGridResizingMethods.prototype.destroy = function() {};

/**
 * Resizes a column to a specified width in pixels, percents or auto if no width is specified.
 * 
 * @param {!Object} column    An identifier for the column. If a number is provided it will be used as a columnIndex else if a strings is provided it will be used as a columnKey.
 * @param {!Object=} width    Width of the column in pixels or percents. If no width or "*" is specified the column will be auto-sized to the width of the data in it (including header and footer cells).
 * @return {void}
 */
IgTreeGridResizingMethods.prototype.resize = function(column, width) {};

/**
 * @param {string} propertyName
 * @return {!IgTreeGridResizingMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Resize the column to the size of the longest currently visible cell value.
 * 
 * Resize the column to the size of the longest currently visible cell value.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets whether the resizing should be deferred until the user finishes resizing or applied immediately.
 * 
 * Sets whether the resizing should be deferred until the user finishes resizing or applied immediately.
 * 
 * 
 * \@optionValue New value to be set.
 * A list of column settings that specifies resizing options on a per column basis.
 * 
 * A list of column settings that specifies resizing options on a per column basis.
 * 
 * 
 * \@optionValue New value to be set.
 * The width in pixels of the resizing handle which is position at the right side of each resizeable column header.
 * 
 * The width in pixels of the resizing handle which is position at the right side of each resizeable column header.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * \@optionValue New value to be set.
 * Event fired before a resizing operation is executed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridResizing widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the resized column index.
 * Use ui.columnKey to get the resized column key.
 * Use ui.desiredWidth to get the desired width(before min/max coercion) for the resized column.
 * Event fired before a resizing operation is executed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridResizing widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the resized column index.
 * Use ui.columnKey to get the resized column key.
 * Use ui.desiredWidth to get the desired width(before min/max coercion) for the resized column.
 * 
 * \@optionValue Define event handler function.
 * Event fired(only when columnFixing is enabled) when trying to resize column in fixed area so total width of unfixed area to be less than minimalVisibleAreaWidth(option defined in columnFixing)
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridResizing widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the resized column index.
 * Use ui.columnKey to get the resized column key.
 * Use ui.desiredWidth to get the desired width(before min/max coercion) for the resized column.
 * Event fired(only when columnFixing is enabled) when trying to resize column in fixed area so total width of unfixed area to be less than minimalVisibleAreaWidth(option defined in columnFixing)
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridResizing widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the resized column index.
 * Use ui.columnKey to get the resized column key.
 * Use ui.desiredWidth to get the desired width(before min/max coercion) for the resized column.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the resizing has been executed and results are rendered
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridResizing widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the resized column index.
 * Use ui.columnKey to get the resized column key.
 * Use ui.originalWidth to get the original column width.
 * Use ui.newWidth to get the final column width after resizing.
 * Event fired after the resizing has been executed and results are rendered
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridResizing widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnIndex to get the resized column index.
 * Use ui.columnKey to get the resized column key.
 * Use ui.originalWidth to get the original column width.
 * Use ui.newWidth to get the final column width after resizing.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgTreeGridResizing} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgTreeGridResizing|?} column_or_optionName_or_options_or_methodParams
 * @return {void|boolean|!Array<!IgGridResizingColumnSetting>|number|!ColumnResizingEvent|!ColumnResizingRefusedEvent|!ColumnResizedEvent|!JQuery|?}
 */
JQuery.prototype.igTreeGridResizing = function(methodName_or_optionLiteral_or_options, column_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgTreeGridRowSelectors() {}
 /** @type {string} */
IgTreeGridRowSelectors.prototype.rowSelectorNumberingMode;
 /** @type {string} */
IgTreeGridRowSelectors.prototype.checkBoxMode;
 /** @type {boolean} */
IgTreeGridRowSelectors.prototype.enableRowNumbering;
 /** @type {boolean} */
IgTreeGridRowSelectors.prototype.enableCheckBoxes;
 /** @type {number} */
IgTreeGridRowSelectors.prototype.rowNumberingSeed;
 /** @type {(string|number)} */
IgTreeGridRowSelectors.prototype.rowSelectorColumnWidth;
 /** @type {boolean} */
IgTreeGridRowSelectors.prototype.requireSelection;
 /** @type {boolean} */
IgTreeGridRowSelectors.prototype.showCheckBoxesOnFocus;
 /** @type {boolean} */
IgTreeGridRowSelectors.prototype.inherit;
 /** @type {boolean} */
IgTreeGridRowSelectors.prototype.enableSelectAllForPaging;
 /** @type {string} */
IgTreeGridRowSelectors.prototype.selectAllForPagingTemplate;
 /** @type {string} */
IgTreeGridRowSelectors.prototype.deselectAllForPagingTemplate;
 /** @type {!RowSelectorClickedEvent} */
IgTreeGridRowSelectors.prototype.rowSelectorClicked;
 /** @type {!CheckBoxStateChangingEvent} */
IgTreeGridRowSelectors.prototype.checkBoxStateChanging;
 /** @type {!CheckBoxStateChangedEvent} */
IgTreeGridRowSelectors.prototype.checkBoxStateChanged;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgTreeGridRowSelectorsMethods() {}

/**
 * @return {void}
 */
IgTreeGridRowSelectorsMethods.prototype.destroy = function() {};

/**
 * Change the check state of a row by row id
 * 
 * @param {!Object} rowId     Row Id
 * @param {boolean} toCheck     The new check state of the checkbox - true for checked or false for unchecked
 * @return {void}
 */
IgTreeGridRowSelectorsMethods.prototype.changeCheckStateById = function(rowId, toCheck) {};

/**
 * Changes the check state of a row by index to specified value
 * 
 * @param {number} index     Row index
 * @param {boolean} toCheck     The new check state of the checkbox - true for checked or false for unchecked
 * @return {void}
 */
IgTreeGridRowSelectorsMethods.prototype.changeCheckState = function(index, toCheck) {};

/**
 * Toggles the check state of a row by row id
 * 
 * @param {!Object} rowId     Row Id
 * @return {void}
 */
IgTreeGridRowSelectorsMethods.prototype.toggleCheckStateById = function(rowId) {};

/**
 * Toggles the check state of a row by index
 * 
 * @param {number} index     Row index
 * @return {void}
 */
IgTreeGridRowSelectorsMethods.prototype.toggleCheckState = function(index) {};

/**
 * Gets an array of all the checked rows. Every object from the array has the following format { element: , id: , index: }
 * @return {!Array<?>}
 */
IgTreeGridRowSelectorsMethods.prototype.checkedRows = function() {};

/**
 * Gets an array of all the partially checked rows. Every object from the array has the following format { element: , id: , index: }
 * @return {!Array<?>}
 */
IgTreeGridRowSelectorsMethods.prototype.partiallyCheckedRows = function() {};

/**
 * Gets an array of all the unchecked rows. Every object from the array has the following format { element: , id: , index: }
 * @return {!Array<?>}
 */
IgTreeGridRowSelectorsMethods.prototype.uncheckedRows = function() {};

/**
 * Returns the check state of the row by id.
 * 
 * @param {!Object} rowId
 * @return {string}
 */
IgTreeGridRowSelectorsMethods.prototype.checkStateById = function(rowId) {};

/**
 * @param {string} propertyName
 * @return {!IgTreeGridRowSelectorsMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Determines row numbering format.
 * 
 * Determines row numbering format.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the type of checkboxes rendered in the row selector. Can be set only at initialization.
 * 
 * The type of checkboxes rendered in the row selector. Can be set only at initialization.
 * 
 * 
 * \@optionValue New value to be set.
 * Determines whether the row selectors column should contain row numbering
 * 
 * Determines whether the row selectors column should contain row numbering
 * 
 * 
 * \@optionValue New value to be set.
 * Determines whether the row selectors column should contain checkboxes
 * 
 * Determines whether the row selectors column should contain checkboxes
 * 
 * 
 * \@optionValue New value to be set.
 * The seed to be added to the default numbering
 * 
 * The seed to be added to the default numbering
 * 
 * 
 * \@optionValue New value to be set.
 * *
 * *
 * 
 * \@optionValue New value to be set.
 * Determines whether the selection feature is required for the row selectors. If set to "false"
 * the widget will not check for Selection availability. If set to "true" an exception will be thrown if Selection is
 * not available.
 * 
 * Determines whether the selection feature is required for the row selectors. If set to "false"
 * the widget will not check for Selection availability. If set to "true" an exception will be thrown if Selection is
 * not available.
 * 
 * 
 * \@optionValue New value to be set.
 * Determines whether checkboxes will be shown only if row selectors are on focus/selected.
 * 
 * Determines whether checkboxes will be shown only if row selectors are on focus/selected.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * \@optionValue New value to be set.
 * Enables/disables showing an overlay after clicking on the header checkbox, which allows selecting all records from all pages.
 * 
 * Enables/disables showing an overlay after clicking on the header checkbox, which allows selecting all records from all pages.
 * 
 * 
 * \@optionValue New value to be set.
 * Custom template for "select all" overlay with paging
 * Element with attribute data-rs-select-all is used for sellecting all the records
 * Element with attribute data-rs-close-all is used for closing the overlay
 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have selected ${checked} records. <a href='#' tabindex='0' data-rs-select-all>Select all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
 * 
 * Custom template for "select all" overlay with paging
 * Element with attribute data-rs-select-all is used for sellecting all the records
 * Element with attribute data-rs-close-all is used for closing the overlay
 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have selected ${checked} records. <a href='#' tabindex='0' data-rs-select-all>Select all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
 * 
 * 
 * \@optionValue New value to be set.
 * Custom template for "deselect all" overlay with paging
 * Element with attribute data-rs-deselect-all is used for sellecting all the records
 * Element with attribute data-rs-close-all is used for closing the overlay
 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have deselected ${unchecked} records. <a href='#' tabindex='0' data-rs-deselect-all>Deselect all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
 * 
 * Custom template for "deselect all" overlay with paging
 * Element with attribute data-rs-deselect-all is used for sellecting all the records
 * Element with attribute data-rs-close-all is used for closing the overlay
 * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have deselected ${unchecked} records. <a href='#' tabindex='0' data-rs-deselect-all>Deselect all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
 * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
 * 
 * 
 * \@optionValue New value to be set.
 * Event fired after a row selector is clicked.
 * Function takes arguments evt and ui.
 * Use ui.row to get reference to the row the clicked row selector resides in.
 * Use ui.fixedRow to get reference to the fixed row the clicked row selector resides in(if there are fixed columns).
 * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
 * Use ui.rowKey to get the key of the row the clicked row selector resides in.
 * Use ui.rowSelector to get reference to the row selector cell.
 * Use ui.owner to get reference to RowSelectors.
 * Use ui.grid to get reference to the grid the RowSelectors are initialized for.
 * Event fired after a row selector is clicked.
 * Function takes arguments evt and ui.
 * Use ui.row to get reference to the row the clicked row selector resides in.
 * Use ui.fixedRow to get reference to the fixed row the clicked row selector resides in(if there are fixed columns).
 * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
 * Use ui.rowKey to get the key of the row the clicked row selector resides in.
 * Use ui.rowSelector to get reference to the row selector cell.
 * Use ui.owner to get reference to RowSelectors.
 * Use ui.grid to get reference to the grid the RowSelectors are initialized for.
 * 
 * \@optionValue Define event handler function.
 * Event fired when a row selector checkbox is changing.
 * Function takes arguments evt and ui.
 * Use ui.row to get reference to the row the clicked row selector resides in.
 * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
 * Use ui.rowKey to get the key of the row the clicked row selector resides in.
 * Use ui.rowSelector to get reference to the row selector cell.
 * Use ui.owner to get reference to igRowSelectors.
 * Use ui.grid to get reference to the grid the RowSelectors are initialized for.
 * Use ui.currentState to get the current state of the checkbox ("on","off").
 * Use ui.newState to get the new state of the checkbox ("on","off").
 * Use ui.isHeader to check if the header check box is the one being clicked. In this case no row related args are passed.
 * Event fired when a row selector checkbox is changing.
 * Function takes arguments evt and ui.
 * Use ui.row to get reference to the row the clicked row selector resides in.
 * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
 * Use ui.rowKey to get the key of the row the clicked row selector resides in.
 * Use ui.rowSelector to get reference to the row selector cell.
 * Use ui.owner to get reference to igRowSelectors.
 * Use ui.grid to get reference to the grid the RowSelectors are initialized for.
 * Use ui.currentState to get the current state of the checkbox ("on","off").
 * Use ui.newState to get the new state of the checkbox ("on","off").
 * Use ui.isHeader to check if the header check box is the one being clicked. In this case no row related args are passed.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a row selector checkbox had changed state.
 * Function takes arguments evt and ui.
 * Use ui.row to get reference to the row the clicked row selector resides in.
 * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
 * Use ui.rowKey to get the key of the row the clicked row selector resides in.
 * Use ui.rowSelector to get reference to the row selector cell.
 * Use ui.owner to get reference to igRowSelectors.
 * Use ui.grid to get reference to the grid the RowSelectors are initialized for.
 * Use ui.state to get the state of the checkbox ("on","off").
 * Use ui.isHeader to check if the header check box is the one being clicked. In this case no row related args are passed.
 * Event fired after a row selector checkbox had changed state.
 * Function takes arguments evt and ui.
 * Use ui.row to get reference to the row the clicked row selector resides in.
 * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
 * Use ui.rowKey to get the key of the row the clicked row selector resides in.
 * Use ui.rowSelector to get reference to the row selector cell.
 * Use ui.owner to get reference to igRowSelectors.
 * Use ui.grid to get reference to the grid the RowSelectors are initialized for.
 * Use ui.state to get the state of the checkbox ("on","off").
 * Use ui.isHeader to check if the header check box is the one being clicked. In this case no row related args are passed.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgTreeGridRowSelectors} methodName_or_optionLiteral_or_options
 * @param {...!Object|number|string|!IgTreeGridRowSelectors|?} rowId_or_index_or_optionName_or_options_or_methodParams
 * @return {void|!Array<?>|string|boolean|number|(string|number)|!RowSelectorClickedEvent|!CheckBoxStateChangingEvent|!CheckBoxStateChangedEvent|!JQuery|?}
 */
JQuery.prototype.igTreeGridRowSelectors = function(methodName_or_optionLiteral_or_options, rowId_or_index_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgTreeGridSelection() {}
 /** @type {boolean} */
IgTreeGridSelection.prototype.multipleSelection;
 /** @type {boolean} */
IgTreeGridSelection.prototype.mouseDragSelect;
 /** @type {string} */
IgTreeGridSelection.prototype.mode;
 /** @type {boolean} */
IgTreeGridSelection.prototype.activation;
 /** @type {boolean} */
IgTreeGridSelection.prototype.wrapAround;
 /** @type {boolean} */
IgTreeGridSelection.prototype.skipChildren;
 /** @type {boolean} */
IgTreeGridSelection.prototype.multipleCellSelectOnClick;
 /** @type {boolean} */
IgTreeGridSelection.prototype.touchDragSelect;
 /** @type {boolean} */
IgTreeGridSelection.prototype.persist;
 /** @type {boolean} */
IgTreeGridSelection.prototype.allowMultipleRangeSelection;
 /** @type {!RowSelectionChangingEvent} */
IgTreeGridSelection.prototype.rowSelectionChanging;
 /** @type {!RowSelectionChangedEvent} */
IgTreeGridSelection.prototype.rowSelectionChanged;
 /** @type {!CellSelectionChangingEvent} */
IgTreeGridSelection.prototype.cellSelectionChanging;
 /** @type {!CellSelectionChangedEvent} */
IgTreeGridSelection.prototype.cellSelectionChanged;
 /** @type {!ActiveCellChangingEvent} */
IgTreeGridSelection.prototype.activeCellChanging;
 /** @type {!ActiveCellChangedEvent} */
IgTreeGridSelection.prototype.activeCellChanged;
 /** @type {!ActiveRowChangingEvent} */
IgTreeGridSelection.prototype.activeRowChanging;
 /** @type {!ActiveRowChangedEvent} */
IgTreeGridSelection.prototype.activeRowChanged;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgTreeGridSelectionMethods() {}

/**
 * @return {void}
 */
IgTreeGridSelectionMethods.prototype.destroy = function() {};

/**
 * Selects a row by row id
 * 
 * @param {!Object} id     Row Id
 * @return {void}
 */
IgTreeGridSelectionMethods.prototype.selectRowById = function(id) {};

/**
 * Clears all selected cells, selected rows, active cell and active row. Also updates the UI accordingly
 * @return {void}
 */
IgTreeGridSelectionMethods.prototype.clearSelection = function() {};

/**
 * Selects a cell by row/col
 * 
 * @param {number} row     Row index
 * @param {number} col     Column index
 * @param {boolean=} isFixed     If the cell is part of the fixed or unfixed area of the grid.
 * @return {void}
 */
IgTreeGridSelectionMethods.prototype.selectCell = function(row, col, isFixed) {};

/**
 * Selects a cell by row id/column key
 * 
 * @param {!Object} id     Row Id
 * @param {string} colKey     Column key
 * @return {void}
 */
IgTreeGridSelectionMethods.prototype.selectCellById = function(id, colKey) {};

/**
 * Deselects a cell by row/col
 * 
 * @param {number} row     Row index
 * @param {number} col     Column index
 * @param {boolean=} isFixed     If the cell is part of the fixed or unfixed area of the grid.
 * @return {void}
 */
IgTreeGridSelectionMethods.prototype.deselectCell = function(row, col, isFixed) {};

/**
 * Deselects a cell by row id/column key
 * 
 * @param {!Object} id     Row Id
 * @param {string} colKey     Column key
 * @return {void}
 */
IgTreeGridSelectionMethods.prototype.deselectCellById = function(id, colKey) {};

/**
 * Selects a row by index
 * 
 * @param {number} index     Row index
 * @return {void}
 */
IgTreeGridSelectionMethods.prototype.selectRow = function(index) {};

/**
 * Deselects a row by index
 * 
 * @param {number} index     Row index
 * @return {void}
 */
IgTreeGridSelectionMethods.prototype.deselectRow = function(index) {};

/**
 * Deselects a row by row id
 * 
 * @param {!Object} id     Row Id
 * @return {void}
 */
IgTreeGridSelectionMethods.prototype.deselectRowById = function(id) {};

/**
 * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .
 * 
 * If multiple selection is disabled the function will return null.
 * @return {!Array<?>}
 */
IgTreeGridSelectionMethods.prototype.selectedCells = function() {};

/**
 * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .
 * 
 * If multiple selection is disabled the function will return null.
 * @return {!Array<?>}
 */
IgTreeGridSelectionMethods.prototype.selectedRows = function() {};

/**
 * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
 * 
 * If multiple selection is enabled the function will return null.
 * @return {!Object}
 */
IgTreeGridSelectionMethods.prototype.selectedCell = function() {};

/**
 * Returns the currently selected row that has the format { element: , index: }, if any.
 * 
 * If multiple selection is enabled the function will return null.
 * @return {!Object}
 */
IgTreeGridSelectionMethods.prototype.selectedRow = function() {};

/**
 * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
 * @return {!Object}
 */
IgTreeGridSelectionMethods.prototype.activeCell = function() {};

/**
 * Returns the currently active (focused) row that has the format { element: , index: }, if any.
 * @return {!Object}
 */
IgTreeGridSelectionMethods.prototype.activeRow = function() {};

/**
 * @param {string} propertyName
 * @return {!IgTreeGridSelectionMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Enables / Disables multiple selection of cells and rows - depending on the mode
 * 
 * Enables / Disables multiple selection of cells and rows - depending on the mode
 * 
 * 
 * \@optionValue New value to be set.
 * Enables / disables selection via dragging with the mouse - only applicable for cell selection
 * 
 * Enables / disables selection via dragging with the mouse - only applicable for cell selection
 * 
 * 
 * \@optionValue New value to be set.
 * Defines type of the selection.
 * 
 * Defines type of the selection.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel
 * 
 * Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel
 * 
 * 
 * \@optionValue New value to be set.
 * If wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected
 * 
 * If wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected
 * 
 * 
 * \@optionValue New value to be set.
 * If true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid
 * 
 * If true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid
 * 
 * 
 * \@optionValue New value to be set.
 * If true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set to row. this option is useful for enabling multiple discountinued selection on touch environments.
 * 
 * If true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set to row. this option is useful for enabling multiple discountinued selection on touch environments.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables / disables selection via continuous touch event - only applicable for cell selection and touch-supported environments
 * 
 * Enables / disables selection via continuous touch event - only applicable for cell selection and touch-supported environments
 * 
 * 
 * \@optionValue New value to be set.
 * Enables / disables selection persistance between states.
 * 
 * Enables / disables selection persistance between states.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables / disables the ability to ctrl drag multiple selection windows when selection mode is 'cell'
 * 
 * Enables / disables the ability to ctrl drag multiple selection windows when selection mode is 'cell'
 * 
 * 
 * \@optionValue New value to be set.
 * Event fired before row(s) are about to be selected (cancellable).
 * Return false in order to cancel selection changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.row to get reference to row object.
 * Use ui.row.element to get reference to row DOM element.
 * Use ui.row.index to get row index.
 * Use ui.row.id to get the row id if primary key is defined or persistence is enabled.
 * Use ui.selectedRows to get reference to rows object array.
 * Use ui.startIndex to get the start index for a range row selection.
 * Use ui.endIndex to get the end index for a range row selection.
 * Event fired before row(s) are about to be selected (cancellable).
 * Return false in order to cancel selection changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.row to get reference to row object.
 * Use ui.row.element to get reference to row DOM element.
 * Use ui.row.index to get row index.
 * Use ui.row.id to get the row id if primary key is defined or persistence is enabled.
 * Use ui.selectedRows to get reference to rows object array.
 * Use ui.startIndex to get the start index for a range row selection.
 * Use ui.endIndex to get the end index for a range row selection.
 * 
 * \@optionValue Define event handler function.
 * Event fired after row(s) are selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.row to get reference to row object.
 * Use ui.row.element to get reference to row DOM element.
 * Use ui.row.index to get row index.
 * Use ui.row.id to get the row id if primary key is defined or persistence is enabled.
 * Use ui.selectedRows to get reference to rows object array.
 * Event fired after row(s) are selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.row to get reference to row object.
 * Use ui.row.element to get reference to row DOM element.
 * Use ui.row.index to get row index.
 * Use ui.row.id to get the row id if primary key is defined or persistence is enabled.
 * Use ui.selectedRows to get reference to rows object array.
 * 
 * \@optionValue Define event handler function.
 * Event fired before cell(s) are about to be selected (cancellable).
 * Return false in order to cancel cell selection changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.cell to get reference to cell object.
 * Use ui.cell.element to get reference to cell DOM element.
 * Use ui.cell.columnKey to get reference to column key.
 * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
 * Use ui.cell.index to get column index.
 * Use ui.cell.row to get reference to row DOM element.
 * Use ui.cell.rowIndex to get row index.
 * Use ui.selectedCells to get reference to selected cells object array.
 * Use ui.firstColumnIndex to get the column index for the first cell in a range selection.
 * Use ui.firstRowIndex to get the row index for the first cell in a range selection.
 * Use ui.lastColumnIndex to get the column index for the last cell in a range selection.
 * Use ui.lastRowIndex to get the row index for the last cell in a range selection.
 * Event fired before cell(s) are about to be selected (cancellable).
 * Return false in order to cancel cell selection changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.cell to get reference to cell object.
 * Use ui.cell.element to get reference to cell DOM element.
 * Use ui.cell.columnKey to get reference to column key.
 * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
 * Use ui.cell.index to get column index.
 * Use ui.cell.row to get reference to row DOM element.
 * Use ui.cell.rowIndex to get row index.
 * Use ui.selectedCells to get reference to selected cells object array.
 * Use ui.firstColumnIndex to get the column index for the first cell in a range selection.
 * Use ui.firstRowIndex to get the row index for the first cell in a range selection.
 * Use ui.lastColumnIndex to get the column index for the last cell in a range selection.
 * Use ui.lastRowIndex to get the row index for the last cell in a range selection.
 * 
 * \@optionValue Define event handler function.
 * Event fired after cell(s) are selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.cell to get reference to cell object.
 * Use ui.cell.element to get reference to cell DOM element.
 * Use ui.cell.columnKey to get reference to column key.
 * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
 * Use ui.cell.index to get column index.
 * Use ui.cell.row to get reference to row DOM element.
 * Use ui.cell.rowIndex to get row index.
 * Use ui.selectedCells to get reference to selected cells object array.
 * Event fired after cell(s) are selected.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.cell to get reference to cell object.
 * Use ui.cell.element to get reference to cell DOM element.
 * Use ui.cell.columnKey to get reference to column key.
 * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
 * Use ui.cell.index to get column index.
 * Use ui.cell.row to get reference to row DOM element.
 * Use ui.cell.rowIndex to get row index.
 * Use ui.selectedCells to get reference to selected cells object array.
 * 
 * \@optionValue Define event handler function.
 * Event fired before a cell becomes active (focus style applied) (cancellable).
 * Return false in order to cancel active cell changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.cell to get reference to cell object.
 * Use ui.cell.element to get reference to cell DOM element.
 * Use ui.cell.columnKey to get column key.
 * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
 * Use ui.cell.index to get column index.
 * Use ui.cell.row to get reference to row DOM element.
 * Use ui.cell.rowIndex to get row index.
 * Event fired before a cell becomes active (focus style applied) (cancellable).
 * Return false in order to cancel active cell changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.cell to get reference to cell object.
 * Use ui.cell.element to get reference to cell DOM element.
 * Use ui.cell.columnKey to get column key.
 * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
 * Use ui.cell.index to get column index.
 * Use ui.cell.row to get reference to row DOM element.
 * Use ui.cell.rowIndex to get row index.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a cell becomes active (focus style applied).
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.cell to get reference to cell object.
 * Use ui.cell.element to get reference to cell DOM element.
 * Use ui.cell.columnKey to get column key.
 * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
 * Use ui.cell.index to get column index.
 * Use ui.cell.row to get reference to row DOM element.
 * Use ui.cell.rowIndex to get row index.
 * Event fired after a cell becomes active (focus style applied).
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.cell to get reference to cell object.
 * Use ui.cell.element to get reference to cell DOM element.
 * Use ui.cell.columnKey to get column key.
 * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
 * Use ui.cell.index to get column index.
 * Use ui.cell.row to get reference to row DOM element.
 * Use ui.cell.rowIndex to get row index.
 * 
 * \@optionValue Define event handler function.
 * Event fired before a row becomes active (focus style applied) (cancellable).
 * Return false in order to cancel active row changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.row to get reference to row object.
 * Use ui.row.element to get reference to active row DOM element.
 * Use ui.row.index to get active row index.
 * Use ui.row.id to get the active row id if primary key is defined or persistence is enabled.
 * Event fired before a row becomes active (focus style applied) (cancellable).
 * Return false in order to cancel active row changing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.row to get reference to row object.
 * Use ui.row.element to get reference to active row DOM element.
 * Use ui.row.index to get active row index.
 * Use ui.row.id to get the active row id if primary key is defined or persistence is enabled.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a row becomes active (focus style applied).
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.row to get reference to row object.
 * Use ui.row.element to get reference to active row DOM element.
 * Use ui.row.index to get active row index.
 * Use ui.row.id to get the active row id if primary key is defined or persistence is enabled.
 * Event fired after a row becomes active (focus style applied).
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSelection.
 * Use ui.owner.grid to get reference to the grid.
 * Use ui.row to get reference to row object.
 * Use ui.row.element to get reference to active row DOM element.
 * Use ui.row.index to get active row index.
 * Use ui.row.id to get the active row id if primary key is defined or persistence is enabled.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgTreeGridSelection} methodName_or_optionLiteral_or_options
 * @param {...!Object|number|string|!IgTreeGridSelection|?} id_or_row_or_index_or_optionName_or_options_or_methodParams
 * @return {void|!Array<?>|!Object|boolean|string|!RowSelectionChangingEvent|!RowSelectionChangedEvent|!CellSelectionChangingEvent|!CellSelectionChangedEvent|!ActiveCellChangingEvent|!ActiveCellChangedEvent|!ActiveRowChangingEvent|!ActiveRowChangedEvent|!JQuery|?}
 */
JQuery.prototype.igTreeGridSelection = function(methodName_or_optionLiteral_or_options, id_or_row_or_index_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgTreeGridSorting() {}
 /** @type {number} */
IgTreeGridSorting.prototype.fromLevel;
 /** @type {number} */
IgTreeGridSorting.prototype.toLevel;
 /** @type {string} */
IgTreeGridSorting.prototype.type;
 /** @type {boolean} */
IgTreeGridSorting.prototype.caseSensitive;
 /** @type {boolean} */
IgTreeGridSorting.prototype.applySortedColumnCss;
 /** @type {string} */
IgTreeGridSorting.prototype.sortUrlKey;
 /** @type {string} */
IgTreeGridSorting.prototype.sortUrlKeyAscValue;
 /** @type {string} */
IgTreeGridSorting.prototype.sortUrlKeyDescValue;
 /** @type {string} */
IgTreeGridSorting.prototype.mode;
 /** @type {!Function} */
IgTreeGridSorting.prototype.customSortFunction;
 /** @type {string} */
IgTreeGridSorting.prototype.firstSortDirection;
 /** @type {string} */
IgTreeGridSorting.prototype.sortedColumnTooltip;
 /** @type {boolean} */
IgTreeGridSorting.prototype.modalDialogSortOnClick;
 /** @type {string} */
IgTreeGridSorting.prototype.modalDialogSortByButtonText;
 /** @type {string} */
IgTreeGridSorting.prototype.modalDialogResetButtonLabel;
 /** @type {string} */
IgTreeGridSorting.prototype.modalDialogCaptionButtonDesc;
 /** @type {string} */
IgTreeGridSorting.prototype.modalDialogCaptionButtonAsc;
 /** @type {string} */
IgTreeGridSorting.prototype.modalDialogCaptionButtonUnsort;
 /** @type {(string|number)} */
IgTreeGridSorting.prototype.modalDialogWidth;
 /** @type {(string|number)} */
IgTreeGridSorting.prototype.modalDialogHeight;
 /** @type {number} */
IgTreeGridSorting.prototype.modalDialogAnimationDuration;
 /** @type {string} */
IgTreeGridSorting.prototype.featureChooserText;
 /** @type {string} */
IgTreeGridSorting.prototype.unsortedColumnTooltip;
 /** @type {!Array<!IgGridSortingColumnSetting>} */
IgTreeGridSorting.prototype.columnSettings;
 /** @type {string} */
IgTreeGridSorting.prototype.modalDialogCaptionText;
 /** @type {string} */
IgTreeGridSorting.prototype.modalDialogButtonApplyText;
 /** @type {string} */
IgTreeGridSorting.prototype.modalDialogButtonCancelText;
 /** @type {string} */
IgTreeGridSorting.prototype.featureChooserSortAsc;
 /** @type {string} */
IgTreeGridSorting.prototype.featureChooserSortDesc;
 /** @type {boolean} */
IgTreeGridSorting.prototype.persist;
 /** @type {string} */
IgTreeGridSorting.prototype.sortingDialogContainment;
 /** @type {string} */
IgTreeGridSorting.prototype.dialogWidget;
 /** @type {boolean} */
IgTreeGridSorting.prototype.inherit;
 /** @type {!ColumnSortingEvent} */
IgTreeGridSorting.prototype.columnSorting;
 /** @type {!ColumnSortedEvent} */
IgTreeGridSorting.prototype.columnSorted;
 /** @type {!ModalDialogOpeningEvent} */
IgTreeGridSorting.prototype.modalDialogOpening;
 /** @type {!ModalDialogOpenedEvent} */
IgTreeGridSorting.prototype.modalDialogOpened;
 /** @type {!ModalDialogMovingEvent} */
IgTreeGridSorting.prototype.modalDialogMoving;
 /** @type {!ModalDialogClosingEvent} */
IgTreeGridSorting.prototype.modalDialogClosing;
 /** @type {!ModalDialogClosedEvent} */
IgTreeGridSorting.prototype.modalDialogClosed;
 /** @type {!ModalDialogContentsRenderingEvent} */
IgTreeGridSorting.prototype.modalDialogContentsRendering;
 /** @type {!ModalDialogContentsRenderedEvent} */
IgTreeGridSorting.prototype.modalDialogContentsRendered;
 /** @type {!ModalDialogSortingChangedEvent} */
IgTreeGridSorting.prototype.modalDialogSortingChanged;
 /** @type {!ModalDialogButtonUnsortClickEvent} */
IgTreeGridSorting.prototype.modalDialogButtonUnsortClick;
 /** @type {!ModalDialogSortClickEvent} */
IgTreeGridSorting.prototype.modalDialogSortClick;
 /** @type {!ModalDialogButtonApplyClickEvent} */
IgTreeGridSorting.prototype.modalDialogButtonApplyClick;
 /** @type {!ModalDialogButtonResetClickEvent} */
IgTreeGridSorting.prototype.modalDialogButtonResetClick;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgTreeGridSortingMethods() {}

/**
 * Returns whether a column with the specified columnKey is sorted(taken from the data source sorting expressions)
 * 
 * @param {string} columnKey     Column key (string)
 * @return {boolean}
 */
IgTreeGridSortingMethods.prototype.isColumnSorted = function(columnKey) {};

/**
 * @return {void}
 */
IgTreeGridSortingMethods.prototype.destroy = function() {};

/**
 * Sorts the data in a grid column  and updates the UI.
 * 
 * @param {!Object} index     Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column which we want to sort. If the mode is multiple, previous sorting states are not cleared.
 * @param {!Object} direction     Specifies sorting direction (ascending or descending)
 * @param {!Object} header
 * @return {void}
 */
IgTreeGridSortingMethods.prototype.sortColumn = function(index, direction, header) {};

/**
 * Sorts the data in grid columns and updates the UI.\
 * @return {void}
 */
IgTreeGridSortingMethods.prototype.sortMultiple = function() {};

/**
 * Removes current sorting(for all sorted columns) and updates the UI.
 * @return {void}
 */
IgTreeGridSortingMethods.prototype.clearSorting = function() {};

/**
 * Removes sorting for the grid column with the specified columnKey/columnIndex and updates the UI.
 * 
 * @param {!Object} index     Column key (string) or index (number) - for multi-row grid only column key can be used. Specifies the column for which we want to remove sorting. If the mode is multiple, previous sorting states are not cleared.
 * @param {!Object} header     - if specified client events should be fired
 * @return {void}
 */
IgTreeGridSortingMethods.prototype.unsortColumn = function(index, header) {};

/**
 * Opens the multiple sorting dialog.
 * @return {void}
 */
IgTreeGridSortingMethods.prototype.openMultipleSortingDialog = function() {};

/**
 * Closes the multiple sorting dialog.
 * @return {void}
 */
IgTreeGridSortingMethods.prototype.closeMultipleSortingDialog = function() {};

/**
 * Renders content of multiple sorting dialog - sorted and unsorted columns.
 * 
 * @param {!Object} isToCallEvents
 * @return {void}
 */
IgTreeGridSortingMethods.prototype.renderMultipleSortingDialogContent = function(isToCallEvents) {};

/**
 * Remove clear button for multiple sorting dialog
 * @return {void}
 */
IgTreeGridSortingMethods.prototype.removeDialogClearButton = function() {};

/**
 * @param {string} propertyName
 * @return {!IgTreeGridSortingMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Specifies from which data bound level to be applied sorting - 0 is the first level
 * 
 * Specifies from which data bound level to be applied sorting - 0 is the first level
 * 
 * 
 * \@optionValue New value to be set.
 * Specifies to which data bound level to be applied sorting - if -1 sorting should be applied to the last data bound level
 * 
 * Specifies to which data bound level to be applied sorting - if -1 sorting should be applied to the last data bound level
 * 
 * 
 * \@optionValue New value to be set.
 * Defines local or remote sorting operations.
 * 
 * Defines local or remote sorting operations.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables or disables the case sensitivity of the sorting. Works only for [local](ui.iggridsorting#options:type) sorting.
 * 
 * Enables or disables the case sensitivity of the sorting. Works only for [local](ui.iggridsorting#options:type) sorting.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables special styling for sorted columns. If false, sorted column cells will not have any special sort-related styling.
 * 
 * Enables/disables special styling for sorted columns. If false, sorted column cells will not have any special sort-related styling.
 * 
 * 
 * \@optionValue New value to be set.
 * URL param name which specifies how sorting expressions will be encoded in the URL. Uses OData conventions. ex: ?sort(col1)=asc
 * 
 * URL param name which specifies how sorting expressions will be encoded in the URL. Uses OData conventions. ex: ?sort(col1)=asc
 * 
 * 
 * \@optionValue New value to be set.
 * URL param value for ascending type of sorting. Uses OData conventions. Example: ?sort(col1)=asc
 * 
 * URL param value for ascending type of sorting. Uses OData conventions. Example: ?sort(col1)=asc
 * 
 * 
 * \@optionValue New value to be set.
 * URL param value for descending type of sorting. Uses OData conventions. Example: ?sort(col1)=desc
 * 
 * URL param value for descending type of sorting. Uses OData conventions. Example: ?sort(col1)=desc
 * 
 * 
 * \@optionValue New value to be set.
 * Defines single column sorting or multiple column sorting.
 * 
 * Defines single column sorting or multiple column sorting.
 * 
 * 
 * \@optionValue New value to be set.
 * Custom sort function(or name of the function as a string) accepting three parameters - the data to be sorted, an array of data source field definitions, and the direction to sort with (optional). The function should return the sorted data array.
 * 
 * Custom sort function(or name of the function as a string) accepting three parameters - the data to be sorted, an array of data source field definitions, and the direction to sort with (optional). The function should return the sorted data array.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets which direction to use on the first click / keydown, if the column is sorted for the first time.
 * 
 * Sets which direction to use on the first click / keydown, if the column is sorted for the first time.
 * 
 * 
 * \@optionValue New value to be set.
 * Custom sorted column tooltip in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) format
 * Custom sorted column tooltip in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) format
 * 
 * \@optionValue New value to be set.
 * Gets whether sorting to be applied immediately when click sort/unsort columns when using the multiple sorting dialog. When it is false Apply button shows and sorting is applied when the button is clicked.
 * 
 * Sets whether sorting to be applied immediately when click sort/unsort columns when using the multiple sorting dialog. When it is false Apply button shows and sorting is applied when the button is clicked.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets sortby button text for each unsorted column in multiple sorting dialog.
 * 
 * Sets sortby button text for each unsorted column in multiple sorting dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets sortby button label for each unsorted column in multiple sorting dialog.
 * 
 * Sets sortby button label for each unsorted column in multiple sorting dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets caption for each descending sorted column in multiple sorting dialog.
 * 
 * Sets caption for each descending sorted column in multiple sorting dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets caption for each ascending sorted column in multiple sorting dialog.
 * 
 * Sets caption for each ascending sorted column in multiple sorting dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets caption for unsort button in multiple sorting dialog.
 * 
 * Sets caption for unsort button in multiple sorting dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets width of multiple sorting dialog.
 * 
 * Sets width of multiple sorting dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets height of multiple sorting dialog.
 * 
 * Sets height of multiple sorting dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets time of milliseconds for animation duration to show/hide modal dialog.
 * 
 * Sets time of milliseconds for animation duration to show/hide modal dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the text of the feature chooser sorting button.
 * 
 * Sets the text of the feature chooser sorting button.
 * 
 * 
 * \@optionValue New value to be set.
 * Custom unsorted column tooltip in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) format.
 * 
 * Custom unsorted column tooltip in [igTemplating](http://www.igniteui.com/help/igtemplating-overview) format.
 * 
 * 
 * \@optionValue New value to be set.
 * A list of custom column settings that specify custom sorting settings for a specific column (whether sorting is enabled / disabled, default sort direction, first sort direction, etc.).
 * 
 * A list of custom column settings that specify custom sorting settings for a specific column (whether sorting is enabled / disabled, default sort direction, first sort direction, etc.).
 * 
 * 
 * \@optionValue New value to be set.
 * Gets caption text for multiple sorting dialog.
 * 
 * Sets caption text for multiple sorting dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets text of button which apply changes in modal dialog.
 * 
 * Sets text of button which apply changes in modal dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets text of button which cancels the changes in the advanced sorting modal dialog.
 * 
 * Sets text of button which cancels the changes in the advanced sorting modal dialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
 * 
 * Sets the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
 * 
 * Sets the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables sorting persistence when the grid is rebound.
 * 
 * Enables/disables sorting persistence when the grid is rebound.
 * 
 * 
 * \@optionValue New value to be set.
 * Controls containment behavior of multiple sorting dialog.
 * 
 * owner  The multi sorting dialog will be draggable only in the grid area
 * window  The multi sorting dialog will be draggable in the whole window area
 * Controls containment behavior of multiple sorting dialog.
 * 
 * owner  The multi sorting dialog will be draggable only in the grid area
 * window  The multi sorting dialog will be draggable in the whole window area
 * 
 * \@optionValue New value to be set.
 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
 * 
 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * 
 * \@optionValue New value to be set.
 * Event fired before sorting is invoked for a certain column.
 * Return false in order to cancel column sorting.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSorting.
 * Use ui.owner.grid to get reference to grid.
 * Use ui.columnKey to get column key.
 * Use ui.direction to get sorting direction.
 * Use ui.newExpressions to get sorting expressions.
 * Event fired before sorting is invoked for a certain column.
 * Return false in order to cancel column sorting.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSorting.
 * Use ui.owner.grid to get reference to grid.
 * Use ui.columnKey to get column key.
 * Use ui.direction to get sorting direction.
 * Use ui.newExpressions to get sorting expressions.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the column has already been sorted and data - re-rendered.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSorting.
 * Use ui.owner.grid to get reference to grid.
 * Use ui.columnKey to get column key.
 * Use ui.direction to get sorting direction.
 * Use ui.expressions to get sorted expressions.
 * Event fired after the column has already been sorted and data - re-rendered.
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to GridSorting.
 * Use ui.owner.grid to get reference to grid.
 * Use ui.columnKey to get column key.
 * Use ui.direction to get sorting direction.
 * Use ui.expressions to get sorted expressions.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the modal dialog is opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired before the modal dialog is opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.columnChooserElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the modal dialog is already opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired after the modal dialog is already opened.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired every time the modal dialog changes its position.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.originalPosition to get the original position of the modal dialog div as { top, left } object, relative to the page.
 * Use ui.position to get the current position of the modal dialog div as { top, left } object, relative to the page.
 * Event fired every time the modal dialog changes its position.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.originalPosition to get the original position of the modal dialog div as { top, left } object, relative to the page.
 * Use ui.position to get the current position of the modal dialog div as { top, left } object, relative to the page.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the modal dialog is closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired before the modal dialog is closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the modal dialog has been closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired after the modal dialog has been closed.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the contents of the modal dialog are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired before the contents of the modal dialog are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the contents of the modal dialog are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired after the contents of the modal dialog are rendered.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * Event fired when sorting of column is changed in modal dialog. Column should be sorted
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.columnKey to get the column key
 * Use ui.isAsc to get whether column should be ascending or not. If true it should be ascending
 * Event fired when sorting of column is changed in modal dialog. Column should be sorted
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.columnKey to get the column key
 * Use ui.isAsc to get whether column should be ascending or not. If true it should be ascending
 * 
 * \@optionValue Define event handler function.
 * Event fired when button to unsort column is clicked in modal dialog
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.columnKey to get the column key
 * Event fired when button to unsort column is clicked in modal dialog
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.columnKey to get the column key
 * 
 * \@optionValue Define event handler function.
 * Event fired when column(which is not sorted) is clicked to be sorted in modal dialog
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.columnKey to get the column key
 * Event fired when column(which is not sorted) is clicked to be sorted in modal dialog
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.columnKey to get the column key
 * 
 * \@optionValue Define event handler function.
 * Event fired when button Apply in modal dialog is clicked
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.columnsToSort to get array of columns which should be sorted - array of objects of sort order - Asc/Desc and columnIdentifier
 * Event fired when button Apply in modal dialog is clicked
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Use ui.columnsToSort to get array of columns which should be sorted - array of objects of sort order - Asc/Desc and columnIdentifier
 * 
 * \@optionValue Define event handler function.
 * Event fired when the button to reset sorting is clicked.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * Event fired when the button to reset sorting is clicked.
 * The handler function takes arguments evt and ui.
 * Use ui.owner to get the reference to the GridSorting widget.
 * Use ui.owner.grid to get the reference to the grid widget.
 * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgTreeGridSorting} methodName_or_optionLiteral_or_options
 * @param {...string|!Object|!IgTreeGridSorting|?} columnKey_or_index_or_isToCallEvents_or_optionName_or_options_or_methodParams
 * @return {boolean|void|number|string|!Function|(string|number)|!Array<!IgGridSortingColumnSetting>|!ColumnSortingEvent|!ColumnSortedEvent|!ModalDialogOpeningEvent|!ModalDialogOpenedEvent|!ModalDialogMovingEvent|!ModalDialogClosingEvent|!ModalDialogClosedEvent|!ModalDialogContentsRenderingEvent|!ModalDialogContentsRenderedEvent|!ModalDialogSortingChangedEvent|!ModalDialogButtonUnsortClickEvent|!ModalDialogSortClickEvent|!ModalDialogButtonApplyClickEvent|!ModalDialogButtonResetClickEvent|!JQuery|?}
 */
JQuery.prototype.igTreeGridSorting = function(methodName_or_optionLiteral_or_options, columnKey_or_index_or_isToCallEvents_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgTreeGridTooltips() {}
 /** @type {string} */
IgTreeGridTooltips.prototype.visibility;
 /** @type {string} */
IgTreeGridTooltips.prototype.style;
 /** @type {number} */
IgTreeGridTooltips.prototype.showDelay;
 /** @type {number} */
IgTreeGridTooltips.prototype.hideDelay;
 /** @type {!IgGridTooltipsColumnSettings} */
IgTreeGridTooltips.prototype.columnSettings;
 /** @type {number} */
IgTreeGridTooltips.prototype.fadeTimespan;
 /** @type {number} */
IgTreeGridTooltips.prototype.cursorLeftOffset;
 /** @type {number} */
IgTreeGridTooltips.prototype.cursorTopOffset;
 /** @type {boolean} */
IgTreeGridTooltips.prototype.inherit;
 /** @type {!TooltipShowingEvent} */
IgTreeGridTooltips.prototype.tooltipShowing;
 /** @type {!TooltipShownEvent} */
IgTreeGridTooltips.prototype.tooltipShown;
 /** @type {!TooltipHidingEvent} */
IgTreeGridTooltips.prototype.tooltipHiding;
 /** @type {!TooltipHiddenEvent} */
IgTreeGridTooltips.prototype.tooltipHidden;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgTreeGridTooltipsMethods() {}

/**
 * @return {void}
 */
IgTreeGridTooltipsMethods.prototype.destroy = function() {};

/**
 * Returns the ID of the parent div element bounding the ruler and the tooltip container
 * @return {string}
 */
IgTreeGridTooltipsMethods.prototype.id = function() {};

/**
 * @param {string} propertyName
 * @return {!IgTreeGridTooltipsMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Determines the tooltip visibility option
 * 
 * Determines the tooltip visibility option
 * 
 * 
 * \@optionValue New value to be set.
 * Controls the tooltip's style
 * 
 * Controls the tooltip's style
 * 
 * 
 * \@optionValue New value to be set.
 * The time in milliseconds after which tooltip will show when
 * mouse cursor is hovered over a cell.
 * 
 * The time in milliseconds after which tooltip will show when
 * mouse cursor is hovered over a cell.
 * 
 * 
 * \@optionValue New value to be set.
 * Type="integer" The time in milliseconds after which tooltip hides when mouse
 * cursor gets outside of the cell.
 * 
 * Type="integer" The time in milliseconds after which tooltip hides when mouse
 * cursor gets outside of the cell.
 * 
 * 
 * \@optionValue New value to be set.
 * A list of custom column settings that specify custom tooltip settings for a specific column (whether tooltips are enabled / disabled)
 * 
 * A list of custom column settings that specify custom tooltip settings for a specific column (whether tooltips are enabled / disabled)
 * 
 * 
 * \@optionValue New value to be set.
 * The time tooltip fades in and out when showing/hiding
 * 
 * Sets the time tooltip fades in and out when showing/hiding
 * 
 * 
 * \@optionValue New value to be set.
 * The left position of the tooltip relative to the mouse cursor
 * 
 * Sets the left position of the tooltip relative to the mouse cursor
 * 
 * 
 * \@optionValue New value to be set.
 * The top position of the tooltip relative to the mouse cursor
 * 
 * Sets the top position of the tooltip relative to the mouse cursor
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
 * 
 * \@optionValue New value to be set.
 * Event fired when the mouse has hovered on an element long enough to display a tooltip
 * use args.owner to get a reference to the widget
 * use args.tooltip to get or set the string to be displayed
 * use args.value to get the value of the cell the tooltip is displayed for
 * use args.element to get a reference to the cell the tooltip is displayed for
 * use args.index to get the row index of the cell the tooltip is displayed for
 * use args.columnKey to get the column key of the cell the tooltip is displayed for
 * use args.columnIndex to get the column index of the cell the tooltip is displayed for
 * Event fired when the mouse has hovered on an element long enough to display a tooltip
 * use args.owner to get a reference to the widget
 * use args.tooltip to get or set the string to be displayed
 * use args.value to get the value of the cell the tooltip is displayed for
 * use args.element to get a reference to the cell the tooltip is displayed for
 * use args.index to get the row index of the cell the tooltip is displayed for
 * use args.columnKey to get the column key of the cell the tooltip is displayed for
 * use args.columnIndex to get the column index of the cell the tooltip is displayed for
 * 
 * \@optionValue Define event handler function.
 * Event fired after a tooltip is shown
 * use args.owner to get a reference to the widget
 * use args.tooltip to get the string displayed in the tooltip
 * use args.value to get the value of the cell the tooltip is displayed for
 * use args.element to get a reference to the cell the tooltip is displayed for
 * use args.index to get the row index of the cell the tooltip is displayed for
 * use args.columnKey to get the column key of the cell the tooltip is displayed for
 * use args.columnIndex to get the column index of the cell the tooltip is displayed for
 * Event fired after a tooltip is shown
 * use args.owner to get a reference to the widget
 * use args.tooltip to get the string displayed in the tooltip
 * use args.value to get the value of the cell the tooltip is displayed for
 * use args.element to get a reference to the cell the tooltip is displayed for
 * use args.index to get the row index of the cell the tooltip is displayed for
 * use args.columnKey to get the column key of the cell the tooltip is displayed for
 * use args.columnIndex to get the column index of the cell the tooltip is displayed for
 * 
 * \@optionValue Define event handler function.
 * Event fired when the mouse has left an element and the tooltip is about to hide
 * use args.owner to get a reference to the widget
 * use args.tooltip to get the string displayed in the tooltip
 * use args.value to get the value of the cell the tooltip is displayed for
 * use args.element to get a reference to the cell the tooltip is displayed for
 * use args.index to get the row index of the cell the tooltip is displayed for
 * use args.columnKey to get the column key of the cell the tooltip is displayed for
 * use args.columnIndex to get the column index of the cell the tooltip is displayed for
 * Event fired when the mouse has left an element and the tooltip is about to hide
 * use args.owner to get a reference to the widget
 * use args.tooltip to get the string displayed in the tooltip
 * use args.value to get the value of the cell the tooltip is displayed for
 * use args.element to get a reference to the cell the tooltip is displayed for
 * use args.index to get the row index of the cell the tooltip is displayed for
 * use args.columnKey to get the column key of the cell the tooltip is displayed for
 * use args.columnIndex to get the column index of the cell the tooltip is displayed for
 * 
 * \@optionValue Define event handler function.
 * Event fired after a tooltip is hidden
 * use args.owner to get a reference to the widget
 * use args.tooltip to get the string displayed in the tooltip
 * use args.value to get the value of the cell the tooltip was displayed for
 * use args.element to get a reference to the cell the tooltip was displayed for
 * use args.index to get the row index of the cell the tooltip was displayed for
 * use args.columnKey to get the column key of the cell the tooltip was displayed for
 * use args.columnIndex to get the column index of the cell the tooltip was displayed for
 * Event fired after a tooltip is hidden
 * use args.owner to get a reference to the widget
 * use args.tooltip to get the string displayed in the tooltip
 * use args.value to get the value of the cell the tooltip was displayed for
 * use args.element to get a reference to the cell the tooltip was displayed for
 * use args.index to get the row index of the cell the tooltip was displayed for
 * use args.columnKey to get the column key of the cell the tooltip was displayed for
 * use args.columnIndex to get the column index of the cell the tooltip was displayed for
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgTreeGridTooltips} methodName_or_optionLiteral_or_options
 * @param {...string|!IgTreeGridTooltips|?} optionName_or_options_or_methodParams
 * @return {void|string|number|!IgGridTooltipsColumnSettings|boolean|!TooltipShowingEvent|!TooltipShownEvent|!TooltipHidingEvent|!TooltipHiddenEvent|!JQuery|?}
 */
JQuery.prototype.igTreeGridTooltips = function(methodName_or_optionLiteral_or_options, optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgTreeGridUpdating() {}
 /** @type {boolean} */
IgTreeGridUpdating.prototype.enableAddChild;
 /** @type {string} */
IgTreeGridUpdating.prototype.addChildTooltip;
 /** @type {string} */
IgTreeGridUpdating.prototype.addChildButtonLabel;
 /** @type {!Array<!IgGridUpdatingColumnSetting>} */
IgTreeGridUpdating.prototype.columnSettings;
 /** @type {string} */
IgTreeGridUpdating.prototype.editMode;
 /** @type {boolean} */
IgTreeGridUpdating.prototype.enableDeleteRow;
 /** @type {boolean} */
IgTreeGridUpdating.prototype.enableAddRow;
 /** @type {boolean} */
IgTreeGridUpdating.prototype.validation;
 /** @type {string} */
IgTreeGridUpdating.prototype.doneLabel;
 /** @type {string} */
IgTreeGridUpdating.prototype.doneTooltip;
 /** @type {string} */
IgTreeGridUpdating.prototype.cancelLabel;
 /** @type {string} */
IgTreeGridUpdating.prototype.cancelTooltip;
 /** @type {string} */
IgTreeGridUpdating.prototype.addRowLabel;
 /** @type {string} */
IgTreeGridUpdating.prototype.addRowTooltip;
 /** @type {string} */
IgTreeGridUpdating.prototype.deleteRowLabel;
 /** @type {string} */
IgTreeGridUpdating.prototype.deleteRowTooltip;
 /** @type {boolean} */
IgTreeGridUpdating.prototype.showDoneCancelButtons;
 /** @type {boolean} */
IgTreeGridUpdating.prototype.enableDataDirtyException;
 /** @type {(string|!Array<?>)} */
IgTreeGridUpdating.prototype.startEditTriggers;
 /** @type {boolean} */
IgTreeGridUpdating.prototype.horizontalMoveOnEnter;
 /** @type {boolean} */
IgTreeGridUpdating.prototype.excelNavigationMode;
 /** @type {(string|!Function)} */
IgTreeGridUpdating.prototype.saveChangesSuccessHandler;
 /** @type {(string|!Function)} */
IgTreeGridUpdating.prototype.saveChangesErrorHandler;
 /** @type {(string|number)} */
IgTreeGridUpdating.prototype.swipeDistance;
 /** @type {boolean} */
IgTreeGridUpdating.prototype.wrapAround;
 /** @type {!IgGridUpdatingRowEditDialogOptions} */
IgTreeGridUpdating.prototype.rowEditDialogOptions;
 /** @type {string} */
IgTreeGridUpdating.prototype.dialogWidget;
 /** @type {boolean} */
IgTreeGridUpdating.prototype.inherit;
 /** @type {!EditRowStartingEvent} */
IgTreeGridUpdating.prototype.editRowStarting;
 /** @type {!EditRowStartedEvent} */
IgTreeGridUpdating.prototype.editRowStarted;
 /** @type {!EditRowEndingEvent} */
IgTreeGridUpdating.prototype.editRowEnding;
 /** @type {!EditRowEndedEvent} */
IgTreeGridUpdating.prototype.editRowEnded;
 /** @type {!EditCellStartingEvent} */
IgTreeGridUpdating.prototype.editCellStarting;
 /** @type {!EditCellStartedEvent} */
IgTreeGridUpdating.prototype.editCellStarted;
 /** @type {!EditCellEndingEvent} */
IgTreeGridUpdating.prototype.editCellEnding;
 /** @type {!EditCellEndedEvent} */
IgTreeGridUpdating.prototype.editCellEnded;
 /** @type {!RowAddingEvent} */
IgTreeGridUpdating.prototype.rowAdding;
 /** @type {!RowAddedEvent} */
IgTreeGridUpdating.prototype.rowAdded;
 /** @type {!RowDeletingEvent} */
IgTreeGridUpdating.prototype.rowDeleting;
 /** @type {!RowDeletedEvent} */
IgTreeGridUpdating.prototype.rowDeleted;
 /** @type {!DataDirtyEvent} */
IgTreeGridUpdating.prototype.dataDirty;
 /** @type {!GeneratePrimaryKeyValueEvent} */
IgTreeGridUpdating.prototype.generatePrimaryKeyValue;
 /** @type {!RowEditDialogBeforeOpenEvent} */
IgTreeGridUpdating.prototype.rowEditDialogBeforeOpen;
 /** @type {!RowEditDialogAfterOpenEvent} */
IgTreeGridUpdating.prototype.rowEditDialogAfterOpen;
 /** @type {!RowEditDialogBeforeCloseEvent} */
IgTreeGridUpdating.prototype.rowEditDialogBeforeClose;
 /** @type {!RowEditDialogAfterCloseEvent} */
IgTreeGridUpdating.prototype.rowEditDialogAfterClose;
 /** @type {!RowEditDialogContentsRenderedEvent} */
IgTreeGridUpdating.prototype.rowEditDialogContentsRendered;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgTreeGridUpdatingMethods() {}

/**
 * Adds a new child to a specific row. It also creates a transaction and updates the UI.
 * 
 * @param {!Object} values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
 * @param {!Object} parentId    The ID of the targeted row.
 * @return {void}
 */
IgTreeGridUpdatingMethods.prototype.addChild = function(values, parentId) {};

/**
 * Starts editing for adding a new child for specific row.
 * 
 * @param {!Object} parentId    The ID of the targeted row.
 * @param {!Object=} raiseEvents    Specifies whether or not updating events should be raised for this operation.
 * @return {void}
 */
IgTreeGridUpdatingMethods.prototype.startAddChildFor = function(parentId, raiseEvents) {};

/**
 * Shows the "Add Child" button for specific row.
 * 
 * @param {!Object} row    A jQuery object of the targeted row.
 * @return {void}
 */
IgTreeGridUpdatingMethods.prototype.showAddChildButtonFor = function(row) {};

/**
 * Hides the "Add Child" button.
 * @return {void}
 */
IgTreeGridUpdatingMethods.prototype.hideAddChildButton = function() {};

/**
 * @return {void}
 */
IgTreeGridUpdatingMethods.prototype.destroy = function() {};

/**
 * Sets a cell value for the specified cell. It also creates a transaction and updates the UI.
 * If the specified cell is currently in edit mode, the function will set the desired value in the cell's editor instead.
 * 
 * @param {!Object} rowId    The primary key of the row the cell is a child of.
 * @param {string} colKey    The column key of the cell.
 * @param {!Object} value    The new value for the cell.
 * @return {void}
 */
IgTreeGridUpdatingMethods.prototype.setCellValue = function(rowId, colKey, value) {};

/**
 * Sets values for specified cells in a row. It also creates a transaction and updates the UI.
 * If the specified row is currently in edit mode, the function will set the desired values in the row's editors instead.
 * 
 * @param {!Object} rowId    The primary key of the row to update.
 * @param {!Object} values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
 * @return {void}
 */
IgTreeGridUpdatingMethods.prototype.updateRow = function(rowId, values) {};

/**
 * Adds a new row to the grid. It also creates a transaction and updates the UI.
 * 
 * @param {!Object} values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
 * @return {void}
 */
IgTreeGridUpdatingMethods.prototype.addRow = function(values) {};

/**
 * Deletes a row from the grid. It also creates a transaction and updates the UI.
 * 
 * @param {!Object} rowId    The primary key of the row to delete.
 * @return {void}
 */
IgTreeGridUpdatingMethods.prototype.deleteRow = function(rowId) {};

/**
 * Starts editing for the row or cell specified (depending on the [editMode](ui.iggridupdating#options:editMode)).
 * 
 * @param {!Object} rowId    The row id.
 * @param {!Object} column    The column key or index.
 * @param {boolean=} raiseEvents    Specifies whether or not updating events should be raised for this operation.
 * @return {boolean}
 */
IgTreeGridUpdatingMethods.prototype.startEdit = function(rowId, column, raiseEvents) {};

/**
 * Starts editing for adding a new row.
 * 
 * @param {boolean=} raiseEvents    Specifies whether or not updating events should be raised for this operation.
 * @return {boolean}
 */
IgTreeGridUpdatingMethods.prototype.startAddRowEdit = function(raiseEvents) {};

/**
 * Ends the currently active edit mode.
 * 
 * @param {boolean=} update    Specifies if the edit process should accept the current changes. Default is 'false'.
 * @param {boolean=} raiseEvents    Specifies whether or not updating events should be raised for this operation.
 * @return {boolean}
 */
IgTreeGridUpdatingMethods.prototype.endEdit = function(update, raiseEvents) {};

/**
 * Finds and returns the key of the first column the editor for which has invalid value.
 * @return {string}
 */
IgTreeGridUpdatingMethods.prototype.findInvalid = function() {};

/**
 * Checks if the grid is in edit mode.
 * @return {boolean}
 */
IgTreeGridUpdatingMethods.prototype.isEditing = function() {};

/**
 * Gets the editor for a column by the column key. That method can be used only after the editor has been created.
 * 
 * @param {string} key    The key of the column.
 * @return {!Object}
 */
IgTreeGridUpdatingMethods.prototype.editorForKey = function(key) {};

/**
 * Gets the editor for a column by the cell it resides in. If allowed the function can create the editor if it has not been created yet.
 * 
 * @param {string} cell    Reference to the jQuery-wrapped TD object of the grid that the editor belongs to.
 * @param {boolean=} create    Requests to create the editor if it has not been created yet.
 * @return {!Object}
 */
IgTreeGridUpdatingMethods.prototype.editorForCell = function(cell, create) {};

/**
 * Shows the delete button for specific row.
 * 
 * @param {!Object} row    A jQuery object of the targeted row.
 * @return {void}
 */
IgTreeGridUpdatingMethods.prototype.showDeleteButtonFor = function(row) {};

/**
 * Hides the delete button.
 * @return {void}
 */
IgTreeGridUpdatingMethods.prototype.hideDeleteButton = function() {};

/**
 * @param {string} propertyName
 * @return {!IgTreeGridUpdatingMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Gets whether to enable or disable adding children to rows.
 * 
 * Sets whether to enable or disable adding children to rows.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the add child tooltip text.
 * 
 * Sets the add child tooltip text.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the label of the add child button in touch environment.
 * 
 * Sets the label of the add child button in touch environment.
 * 
 * 
 * \@optionValue New value to be set.
 * A list of custom column options that specify editing and validation settings for a specific column.
 * 
 * A list of custom column options that specify editing and validation settings for a specific column.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the edit mode.
 * 
 * Sets the edit mode.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets if deleting rows through the UI is enabled.
 * 
 * Sets if deleting rows through the UI is enabled.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets if adding rows through the UI is enabled. When enabled an additional row is rendered at the bottom of the grid's header that works as a button. When the end-user clicks on it edit mode is initiated either through a dialog (when [editMode](ui.iggridupdating#options:editMode) is 'dialog') or mimicking the look and feel of 'row' [editMode](ui.iggridupdating#options:editMode) (when [editMode](ui.iggridupdating#options:editMode) is 'row' or 'cell').
 * 
 * Sets if adding rows through the UI is enabled. When enabled an additional row is rendered at the bottom of the grid's header that works as a button. When the end-user clicks on it edit mode is initiated either through a dialog (when [editMode](ui.iggridupdating#options:editMode) is 'dialog') or mimicking the look and feel of 'row' [editMode](ui.iggridupdating#options:editMode) (when [editMode](ui.iggridupdating#options:editMode) is 'row' or 'cell').
 * 
 * 
 * \@optionValue New value to be set.
 * Gets if the value of each editable column in the grid should be validated. The validation is done based on the rules of their corresponding editors.
 * 
 * Sets if the value of each editable column in the grid should be validated. The validation is done based on the rules of their corresponding editors.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the label for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneLabel is used.
 * 
 * Sets the label for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneLabel is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the title for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneTooltip is used.
 * 
 * Sets the title for the Done editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.doneTooltip is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the label for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelLabel is used.
 * 
 * Sets the label for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelLabel is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the title for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelTooltip is used.
 * 
 * Sets the title for the Cancel editing button (only applicable when the [showDoneCancelButtons](ui.iggridupdating#options:showDoneCancelButtons) option is enabled). If not set, $.ig.GridUpdating.locale.cancelTooltip is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the label for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowLabel is used.
 * 
 * Sets the label for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowLabel is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the title for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowTooltip is used.
 * 
 * Sets the title for the button starting edit mode for row adding. If not set, $.ig.GridUpdating.locale.addRowTooltip is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the label for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowLabel is used.
 * 
 * Sets the label for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowLabel is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the title for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowTooltip is used.
 * 
 * Sets the title for the delete button. If not set, $.ig.GridUpdating.locale.deleteRowTooltip is used.
 * 
 * 
 * \@optionValue New value to be set.
 * Determines if the Done and Cancel buttons will be available as means to end edit mode for [editMode](ui.iggridupdating#options:editMode) 'row' and when adding a new row.
 * 
 * Determines if the Done and Cancel buttons will be available as means to end edit mode for [editMode](ui.iggridupdating#options:editMode) 'row' and when adding a new row.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets if an exception should be thrown when the grid's data view changes while there are pending transactions in the data source. The data view changes when the data source performs a sorting, filtering, groupby or paging operation and the exception thrown will prevent the operation from succeeding. All pending transactions must be committed before a data view operation is able to complete. Committing transactions can be done manually through the grid's [commit](ui.iggrid#methods:commit) function or automatically by setting [autoCommit](ui.iggrid#options:autoCommit) to 'true'.
 * 
 * Sets if an exception should be thrown when the grid's data view changes while there are pending transactions in the data source. The data view changes when the data source performs a sorting, filtering, groupby or paging operation and the exception thrown will prevent the operation from succeeding. All pending transactions must be committed before a data view operation is able to complete. Committing transactions can be done manually through the grid's [commit](ui.iggrid#methods:commit) function or automatically by setting [autoCommit](ui.iggrid#options:autoCommit) to 'true'.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets how end-users are able to start edit mode. Possible values: "click", "dblclick", "F2", "enter" and their combinations separated by comma or in array. The keyboard triggers have effect only if the grid cells can receive focus (the grid's [tabIndex](ui.iggrid#options:tabIndex) property should not have a negative value) or Selection is enabled. If "dblclick" is included, then "click" has no effect.
 * 
 * Sets how end-users are able to start edit mode. Possible values: "click", "dblclick", "F2", "enter" and their combinations separated by comma or in array. The keyboard triggers have effect only if the grid cells can receive focus (the grid's [tabIndex](ui.iggrid#options:tabIndex) property should not have a negative value) or Selection is enabled. If "dblclick" is included, then "click" has no effect.
 * 
 * 
 * \@optionValue New value to be set.
 * Determines if pressing Enter to navigate away from the currently edited cell should move the focus horizontally or vertically (default).
 * 
 * Determines if pressing Enter to navigate away from the currently edited cell should move the focus horizontally or vertically (default).
 * 
 * 
 * \@optionValue New value to be set.
 * Enables excel navigation style. When turned on, the arrow keys can be used for changing the currently edited cell similar to how Tab and Enter behave. When disabled, the arrow keys control the cursor inside editors.
 * 
 * Enables excel navigation style. When turned on, the arrow keys can be used for changing the currently edited cell similar to how Tab and Enter behave. When disabled, the arrow keys control the cursor inside editors.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property succeeds. The function will be called with arguments representing the data returned by the server.
 * 
 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property succeeds. The function will be called with arguments representing the data returned by the server.
 * 
 * 
 * \@optionValue New value to be set.
 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property fails. The function will be called with arguments representing the data returned by the server.
 * 
 * Sets a custom function to be called when the AJAX request to the URL specified by the [updateUrl](ui.iggrid#options:updateUrl) property fails. The function will be called with arguments representing the data returned by the server.
 * 
 * 
 * \@optionValue New value to be set.
 * On touch-enabled devices specifies the swipe distance for the delete button to appear.
 * 
 * On touch-enabled devices specifies the swipe distance for the delete button to appear.
 * 
 * 
 * \@optionValue New value to be set.
 * Controls if navigation will wrap around the grid. The feature will never wrap around virtual grids.
 * 
 * Controls if navigation will wrap around the grid. The feature will never wrap around virtual grids.
 * 
 * 
 * \@optionValue New value to be set.
 * A list of options controlling the rendering behavior of the row edit dialog. If [editMode](ui.iggridupdating#options:editMode) is not 'dialog' these have no effect.
 * 
 * A list of options controlling the rendering behavior of the row edit dialog. If [editMode](ui.iggridupdating#options:editMode) is not 'dialog' these have no effect.
 * 
 * 
 * \@optionValue New value to be set.
 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. For more information on how to utilize this property, please refer to the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic.
 * 
 * Name of the dialog widget to be used. It should inherit from $.ui.igGridModalDialog. For more information on how to utilize this property, please refer to the [Extending igGrid Modal Dialog](http://www.igniteui.com/help/extending-iggrid-modal-dialog) topic.
 * 
 * 
 * \@optionValue New value to be set.
 * Enables/disables feature inheritance for the child layouts in igHierarchicalGrid.
 * Enables/disables feature inheritance for the child layouts in igHierarchicalGrid.
 * 
 * \@optionValue New value to be set.
 * Event fired before row editing begins.
 * Return false in order to cancel editing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * Event fired before row editing begins.
 * Return false in order to cancel editing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * 
 * \@optionValue Define event handler function.
 * Event fired after row editing begins.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * Event fired after row editing begins.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * 
 * \@optionValue Define event handler function.
 * Event fired before row editing ends.
 * Return false in order to prevent the grid from exiting edit mode.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.update to check if any of the values is changed which will cause update in the data source. Can be manually set to false to prevent this update.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * Use ui.values[key] to get or set the new value for the column with the specified key.
 * Use ui.oldValues[key] to get the old value for the column with the specified key.
 * Event fired before row editing ends.
 * Return false in order to prevent the grid from exiting edit mode.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.update to check if any of the values is changed which will cause update in the data source. Can be manually set to false to prevent this update.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * Use ui.values[key] to get or set the new value for the column with the specified key.
 * Use ui.oldValues[key] to get the old value for the column with the specified key.
 * 
 * \@optionValue Define event handler function.
 * Event fired after row editing ends.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.update to check if any of the values is changed which will cause update in the data source.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * Use ui.values[key] to get the new value for the column with the specified key.
 * Use ui.oldValues[key] to get the old value for the column with the specified key.
 * Event fired after row editing ends.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.update to check if any of the values is changed which will cause update in the data source.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * Use ui.values[key] to get the new value for the column with the specified key.
 * Use ui.oldValues[key] to get the old value for the column with the specified key.
 * 
 * \@optionValue Define event handler function.
 * Event fired before cell editing begins (including when row editing opens editing for a cell).
 * Return false in order to cancel editing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.columnIndex to get the index of the column.
 * Use ui.columnKey to get the key of the column.
 * Use ui.editor to get a reference to the editor used for editing the column.
 * Use ui.value to get or set the value of the editor.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * Event fired before cell editing begins (including when row editing opens editing for a cell).
 * Return false in order to cancel editing.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.columnIndex to get the index of the column.
 * Use ui.columnKey to get the key of the column.
 * Use ui.editor to get a reference to the editor used for editing the column.
 * Use ui.value to get or set the value of the editor.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * 
 * \@optionValue Define event handler function.
 * Event fired after cell editing begins (including when row editing opens editing for a cell).
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.columnIndex to get the index of the column.
 * Use ui.columnKey to get the key of the column.
 * Use ui.editor to get a reference to the editor used for editing the column.
 * Use ui.value to get the value of the editor.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * Event fired after cell editing begins (including when row editing opens editing for a cell).
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.columnIndex to get the index of the column.
 * Use ui.columnKey to get the key of the column.
 * Use ui.editor to get a reference to the editor used for editing the column.
 * Use ui.value to get the value of the editor.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * 
 * \@optionValue Define event handler function.
 * Event fired before cell editing ends (including when row editing closes editing for a cell).
 * Return false in order to prevent the grid from exiting edit mode (only functions if [editMode](ui.iggridupdating#options:editMode) is 'cell').
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.columnIndex to get the index of the column.
 * Use ui.columnKey to get the key of the column.
 * Use ui.editor to get a reference to the editor used for editing the column.
 * Use ui.value to get or set the value to be used when updating the data source.
 * Use ui.oldValue to get the old value.
 * Use ui.update to check if the value is changed which will cause update in the data source. Can be manually set to false to prevent this update.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * Event fired before cell editing ends (including when row editing closes editing for a cell).
 * Return false in order to prevent the grid from exiting edit mode (only functions if [editMode](ui.iggridupdating#options:editMode) is 'cell').
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.columnIndex to get the index of the column.
 * Use ui.columnKey to get the key of the column.
 * Use ui.editor to get a reference to the editor used for editing the column.
 * Use ui.value to get or set the value to be used when updating the data source.
 * Use ui.oldValue to get the old value.
 * Use ui.update to check if the value is changed which will cause update in the data source. Can be manually set to false to prevent this update.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * 
 * \@optionValue Define event handler function.
 * Event fired after cell editing ends (including when row editing closes editing for a cell).
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.columnIndex to get the index of the column.
 * Use ui.columnKey to get the key of the column.
 * Use ui.editor to get a reference to the editor used for editing the column.
 * Use ui.value to get the new value.
 * Use ui.oldValue to get the old value.
 * Use ui.update to check if the value is changed which will cause update in the data source.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * Event fired after cell editing ends (including when row editing closes editing for a cell).
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.rowID to get the row's PK value.
 * Use ui.columnIndex to get the index of the column.
 * Use ui.columnKey to get the key of the column.
 * Use ui.editor to get a reference to the editor used for editing the column.
 * Use ui.value to get the new value.
 * Use ui.oldValue to get the old value.
 * Use ui.update to check if the value is changed which will cause update in the data source.
 * Use ui.rowAdding to check if the edit mode is for adding a new row.
 * 
 * \@optionValue Define event handler function.
 * Event fired before adding a new row.
 * Return false in order to cancel the adding of the new row to the data source.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.values[key] to get the value for the column with the specified key.
 * Use ui.oldValues[key] to get the default value (before editing) for the column with the specified key.
 * Event fired before adding a new row.
 * Return false in order to cancel the adding of the new row to the data source.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.values[key] to get the value for the column with the specified key.
 * Use ui.oldValues[key] to get the default value (before editing) for the column with the specified key.
 * 
 * \@optionValue Define event handler function.
 * Event fired after adding a new row.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.values[key] to get the value for the column with the specified key.
 * Use ui.oldValues[key] to get the default value (before editing) for the column with the specified key.
 * Event fired after adding a new row.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.values[key] to get the value for the column with the specified key.
 * Use ui.oldValues[key] to get the default value (before editing) for the column with the specified key.
 * 
 * \@optionValue Define event handler function.
 * Event fired before deleting a row.
 * Return false in order to cancel the row's deletion.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.element to get a jQuery object containing the TR element of the row to delete.
 * Use ui.rowID to get the row's PK value.
 * Event fired before deleting a row.
 * Return false in order to cancel the row's deletion.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.element to get a jQuery object containing the TR element of the row to delete.
 * Use ui.rowID to get the row's PK value.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a row is deleted.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.element to get a jQuery object containing the TR element of the deleted row.
 * Use ui.rowID to get the row's PK value.
 * Event fired after a row is deleted.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.element to get a jQuery object containing the TR element of the deleted row.
 * Use ui.rowID to get the row's PK value.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the dataDirtyException is thrown. This can be controlled by the [enableDataDirtyException](ui.iggridupdating#options:enableDataDirtyException) property. Any pending changes may be committed in the handler of this event in order to prevent dataDirtyException from being thrown.
 * Return false in order to prevent the exception.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Event fired before the dataDirtyException is thrown. This can be controlled by the [enableDataDirtyException](ui.iggridupdating#options:enableDataDirtyException) property. Any pending changes may be committed in the handler of this event in order to prevent dataDirtyException from being thrown.
 * Return false in order to prevent the exception.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * 
 * \@optionValue Define event handler function.
 * Event fired before editing starts for adding a new row, when Updating generates an automatic primary key for it.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.value to get the auto-generated primary key (the number of records in the data source + 1) or set a custom unique primary key for the new row.
 * Event fired before editing starts for adding a new row, when Updating generates an automatic primary key for it.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.value to get the auto-generated primary key (the number of records in the data source + 1) or set a custom unique primary key for the new row.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the row edit dialog is opened.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.dialogElement to get reference to row edit dialog DOM element.
 * Event fired before the row edit dialog is opened.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.dialogElement to get reference to row edit dialog DOM element.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the row edit dialog is opened.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.dialogElement to get reference to row edit dialog DOM element.
 * Event fired after the row edit dialog is opened.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.dialogElement to get reference to row edit dialog DOM element.
 * 
 * \@optionValue Define event handler function.
 * Event fired before the row edit dialog is closed.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.dialogElement to get reference to row edit dialog DOM element.
 * Event fired before the row edit dialog is closed.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.dialogElement to get reference to row edit dialog DOM element.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the row edit dialog is closed.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.dialogElement to get reference to row edit dialog DOM element.
 * Event fired after the row edit dialog is closed.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.dialogElement to get reference to row edit dialog DOM element.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the row edit dialog is rendered.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.dialogElement to get reference to row edit dialog DOM element.
 * Event fired after the row edit dialog is rendered.
 * Function takes arguments evt and ui.
 * Use ui.owner to get a reference to GridUpdating.
 * Use ui.owner.grid to get a reference to the grid.
 * Use ui.dialogElement to get reference to row edit dialog DOM element.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgTreeGridUpdating} methodName_or_optionLiteral_or_options
 * @param {...!Object|boolean|string|!IgTreeGridUpdating|?=} values_or_parentId_or_row_or_rowId_or_raiseEvents_or_update_or_key_or_cell_or_optionName_or_options_or_methodParams
 * @return {void|boolean|string|!Object|!Array<!IgGridUpdatingColumnSetting>|(string|!Array<?>)|(string|!Function)|(string|number)|!IgGridUpdatingRowEditDialogOptions|!EditRowStartingEvent|!EditRowStartedEvent|!EditRowEndingEvent|!EditRowEndedEvent|!EditCellStartingEvent|!EditCellStartedEvent|!EditCellEndingEvent|!EditCellEndedEvent|!RowAddingEvent|!RowAddedEvent|!RowDeletingEvent|!RowDeletedEvent|!DataDirtyEvent|!GeneratePrimaryKeyValueEvent|!RowEditDialogBeforeOpenEvent|!RowEditDialogAfterOpenEvent|!RowEditDialogBeforeCloseEvent|!RowEditDialogAfterCloseEvent|!RowEditDialogContentsRenderedEvent|!JQuery|?}
 */
JQuery.prototype.igTreeGridUpdating = function(methodName_or_optionLiteral_or_options, values_or_parentId_or_row_or_rowId_or_raiseEvents_or_update_or_key_or_cell_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgBrowseButton() {}
 /** @type {boolean} */
IgBrowseButton.prototype.autoselect;
 /** @type {boolean} */
IgBrowseButton.prototype.multipleFiles;
 /** @type {?} */
IgBrowseButton.prototype.container;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgBrowseButtonMethods() {}

/**
 * @param {!Object} e
 * @param {!Object} isHidden
 * @return {void}
 */
IgBrowseButtonMethods.prototype.attachFilePicker = function(e, isHidden) {};

/**
 * @return {void}
 */
IgBrowseButtonMethods.prototype.getFilePicker = function() {};

/**
 * $(".selector").igUpload("destroy");
 * @return {void}
 */
IgBrowseButtonMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgBrowseButtonMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function IgUploadFileExtensionIcons() {}
 /** @type {!Array<?>} */
IgUploadFileExtensionIcons.prototype.ext;
 /** @type {string} */
IgUploadFileExtensionIcons.prototype.css;
 /** @type {boolean} */
IgUploadFileExtensionIcons.prototype.def;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function FileSelectingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FileSelectingEventUIParam() {}
 /** @type {?} */
FileSelectingEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function FileSelectedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FileSelectedEventUIParam() {}
 /** @type {?} */
FileSelectedEventUIParam.prototype.fileId;
 /** @type {?} */
FileSelectedEventUIParam.prototype.filePath;
 /** @type {?} */
FileSelectedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function FileUploadingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FileUploadingEventUIParam() {}
 /** @type {?} */
FileUploadingEventUIParam.prototype.fileId;
 /** @type {?} */
FileUploadingEventUIParam.prototype.filePath;
 /** @type {?} */
FileUploadingEventUIParam.prototype.totalSize;
 /** @type {?} */
FileUploadingEventUIParam.prototype.uploadedBytes;
 /** @type {?} */
FileUploadingEventUIParam.prototype.fileStatus;
 /** @type {?} */
FileUploadingEventUIParam.prototype.fileInfo;
 /** @type {?} */
FileUploadingEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function FileUploadedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FileUploadedEventUIParam() {}
 /** @type {?} */
FileUploadedEventUIParam.prototype.fileId;
 /** @type {?} */
FileUploadedEventUIParam.prototype.filePath;
 /** @type {?} */
FileUploadedEventUIParam.prototype.totalSize;
 /** @type {?} */
FileUploadedEventUIParam.prototype.fileInfo;
 /** @type {?} */
FileUploadedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function FileUploadAbortedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FileUploadAbortedEventUIParam() {}
 /** @type {?} */
FileUploadAbortedEventUIParam.prototype.fileId;
 /** @type {?} */
FileUploadAbortedEventUIParam.prototype.filePath;
 /** @type {?} */
FileUploadAbortedEventUIParam.prototype.totalSize;
 /** @type {?} */
FileUploadAbortedEventUIParam.prototype.uploadedBytes;
 /** @type {?} */
FileUploadAbortedEventUIParam.prototype.fileStatus;
 /** @type {?} */
FileUploadAbortedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function CancelAllClickedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function CancelAllClickedEventUIParam() {}
 /** @type {?} */
CancelAllClickedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function OnErrorEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function OnErrorEventUIParam() {}
 /** @type {?} */
OnErrorEventUIParam.prototype.errorCode;
 /** @type {?} */
OnErrorEventUIParam.prototype.fileId;
 /** @type {?} */
OnErrorEventUIParam.prototype.errorMessage;
 /** @type {?} */
OnErrorEventUIParam.prototype.errorType;
 /** @type {?} */
OnErrorEventUIParam.prototype.serverMessage;
 /** @type {?} */
OnErrorEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function FileExtensionsValidatingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FileExtensionsValidatingEventUIParam() {}
 /** @type {?} */
FileExtensionsValidatingEventUIParam.prototype.fileName;
 /** @type {?} */
FileExtensionsValidatingEventUIParam.prototype.fileExtension;
 /** @type {?} */
FileExtensionsValidatingEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function OnXHRLoadEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function OnXHRLoadEventUIParam() {}
 /** @type {?} */
OnXHRLoadEventUIParam.prototype.fileId;
 /** @type {?} */
OnXHRLoadEventUIParam.prototype.xhr;
 /** @type {?} */
OnXHRLoadEventUIParam.prototype.fileInfo;
 /** @type {?} */
OnXHRLoadEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function OnFormDataSubmitEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function OnFormDataSubmitEventUIParam() {}
 /** @type {?} */
OnFormDataSubmitEventUIParam.prototype.fileId;
 /** @type {?} */
OnFormDataSubmitEventUIParam.prototype.fileInfo;
 /** @type {?} */
OnFormDataSubmitEventUIParam.prototype.xhr;
 /** @type {?} */
OnFormDataSubmitEventUIParam.prototype.formData;
 /** @type {?} */
OnFormDataSubmitEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function IgUpload() {}
 /** @type {(string|number)} */
IgUpload.prototype.width;
 /** @type {(string|number)} */
IgUpload.prototype.height;
 /** @type {boolean} */
IgUpload.prototype.autostartupload;
 /** @type {string} */
IgUpload.prototype.labelUploadButton;
 /** @type {string} */
IgUpload.prototype.labelAddButton;
 /** @type {string} */
IgUpload.prototype.labelClearAllButton;
 /** @type {string} */
IgUpload.prototype.labelSummaryTemplate;
 /** @type {string} */
IgUpload.prototype.labelSummaryProgressBarTemplate;
 /** @type {string} */
IgUpload.prototype.labelShowDetails;
 /** @type {string} */
IgUpload.prototype.labelHideDetails;
 /** @type {string} */
IgUpload.prototype.labelSummaryProgressButtonCancel;
 /** @type {string} */
IgUpload.prototype.labelSummaryProgressButtonContinue;
 /** @type {string} */
IgUpload.prototype.labelSummaryProgressButtonDone;
 /** @type {string} */
IgUpload.prototype.labelProgressBarFileNameContinue;
 /** @type {string} */
IgUpload.prototype.errorMessageMaxFileSizeExceeded;
 /** @type {string} */
IgUpload.prototype.errorMessageGetFileStatus;
 /** @type {string} */
IgUpload.prototype.errorMessageCancelUpload;
 /** @type {string} */
IgUpload.prototype.errorMessageNoSuchFile;
 /** @type {string} */
IgUpload.prototype.errorMessageOther;
 /** @type {string} */
IgUpload.prototype.errorMessageValidatingFileExtension;
 /** @type {string} */
IgUpload.prototype.errorMessageAJAXRequestFileSize;
 /** @type {string} */
IgUpload.prototype.errorMessageTryToRemoveNonExistingFile;
 /** @type {string} */
IgUpload.prototype.errorMessageTryToStartNonExistingFile;
 /** @type {string} */
IgUpload.prototype.errorMessageMaxUploadedFiles;
 /** @type {string} */
IgUpload.prototype.errorMessageMaxSimultaneousFiles;
 /** @type {string} */
IgUpload.prototype.errorMessageDropMultipleFilesWhenSingleModel;
 /** @type {string} */
IgUpload.prototype.uploadUrl;
 /** @type {string} */
IgUpload.prototype.progressUrl;
 /** @type {!Array<?>} */
IgUpload.prototype.allowedExtensions;
 /** @type {boolean} */
IgUpload.prototype.showFileExtensionIcon;
 /** @type {?} */
IgUpload.prototype.css;
 /** @type {!IgUploadFileExtensionIcons} */
IgUpload.prototype.fileExtensionIcons;
 /** @type {?} */
IgUpload.prototype.mode;
 /** @type {boolean} */
IgUpload.prototype.multipleFiles;
 /** @type {number} */
IgUpload.prototype.maxUploadedFiles;
 /** @type {number} */
IgUpload.prototype.maxSimultaneousFilesUploads;
 /** @type {?} */
IgUpload.prototype.fileSizeMetric;
 /** @type {string} */
IgUpload.prototype.controlId;
 /** @type {number} */
IgUpload.prototype.fileSizeDecimalDisplay;
 /** @type {?} */
IgUpload.prototype.maxFileSize;
 /** @type {!FileSelectingEvent} */
IgUpload.prototype.fileSelecting;
 /** @type {!FileSelectedEvent} */
IgUpload.prototype.fileSelected;
 /** @type {!FileUploadingEvent} */
IgUpload.prototype.fileUploading;
 /** @type {!FileUploadedEvent} */
IgUpload.prototype.fileUploaded;
 /** @type {!FileUploadAbortedEvent} */
IgUpload.prototype.fileUploadAborted;
 /** @type {!CancelAllClickedEvent} */
IgUpload.prototype.cancelAllClicked;
 /** @type {!OnErrorEvent} */
IgUpload.prototype.onError;
 /** @type {!FileExtensionsValidatingEvent} */
IgUpload.prototype.fileExtensionsValidating;
 /** @type {!OnXHRLoadEvent} */
IgUpload.prototype.onXHRLoad;
 /** @type {!OnFormDataSubmitEvent} */
IgUpload.prototype.onFormDataSubmit;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgUploadMethods() {}

/**
 * Return jquery object of fileupload container - html DOM element
 * @return {void}
 */
IgUploadMethods.prototype.container = function() {};

/**
 * Returns the current widget element
 * @return {void}
 */
IgUploadMethods.prototype.widget = function() {};

/**
 * Hide finished files
 * @return {void}
 */
IgUploadMethods.prototype.clearAll = function() {};

/**
 * Append additional data field to formData(before submitting it to the server). Usually this function is used in the handler of the event onFormDataSubmit. If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
 * 
 * @param {!Object} formData    If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
 * @param {!Object} field    Data field that should be appended to the formData. The object has 2 properties - value and name. If the browser supports HTML5 the data field is appended to the formData object. Otherwise it is appended as input hidden field to the <form>
 * @return {void}
 */
IgUploadMethods.prototype.addDataField = function(formData, field) {};

/**
 * Append additional data fields to formData(before submitting it to the server). Usually this function is used in the handler of the event onFormDataSubmit. If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
 * 
 * @param {!Object} formData    If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
 * @param {!Array<?>} fields    Array of data fields that should be appended to the formData. Each data field is object with 2 properties - value and name. If the browser supports HTML5 these data fields are added to the formData. Otherwise each of these data field is appended as input hidden field to the <form>
 * @return {void}
 */
IgUploadMethods.prototype.addDataFields = function(formData, fields) {};

/**
 * Start uploading file as submitting form with the specified formNumber.
 * 
 * @param {number} formNumber    id of the upload form
 * @return {void}
 */
IgUploadMethods.prototype.startUpload = function(formNumber) {};

/**
 * Cancel upload for the specified file id
 *  formNumber - id of the file to be canceled
 * 
 * @param {number} formNumber    id of the form which should be cancelled
 * @return {void}
 */
IgUploadMethods.prototype.cancelUpload = function(formNumber) {};

/**
 * Destroy the widget
 * @return {void}
 */
IgUploadMethods.prototype.destroy = function() {};

/**
 * Returns the information about uploading files - all files uploaded/uploading/pending
 * @return {!Object}
 */
IgUploadMethods.prototype.getFileInfoData = function() {};

/**
 * Cancel all uploading and pending files
 * @return {void}
 */
IgUploadMethods.prototype.cancelAll = function() {};

/**
 * Returns the information about the file by specified file identifier. It could be file which is uploading/uploaded or uploading is not started. If there isn"t file with the specified file id returns null
 * 
 * @param {number} fileIndex    unique identifier of the file
 * @return {!Object}
 */
IgUploadMethods.prototype.getFileInfo = function(fileIndex) {};

/**
 * @param {string} propertyName
 * @return {!IgUploadMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 *
 *
 *
 *
 * M.H. 13 Feb 2014 Fix for bug #164347: Move input  from document body to the upload container
 * M.H. 13 Feb 2014 Fix for bug #164347: Move input  from document body to the upload container
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgBrowseButton} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgBrowseButton|?} e_or_optionName_or_options_or_methodParams
 * @return {void|boolean|?|!JQuery}
 */
JQuery.prototype.igBrowseButton = function(methodName_or_optionLiteral_or_options, e_or_optionName_or_options_or_methodParams) {};

/**
 * Get or set width of the main container of the file upload control. Main container contains all buttons, progressbar, etc.
 * 
 * Get or set width of the main container of the file upload control. Main container contains all buttons, progressbar, etc.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set height of the main container of the file upload control. Main container contains all buttons, progressbar, etc.
 * 
 * Get or set height of the main container of the file upload control. Main container contains all buttons, progressbar, etc.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set whether the file start upload automatically when it is selected. Default is false.
 * 
 * Get or set whether the file start upload automatically when it is selected. Default is false.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set label for the first shown browse button. When file is selected for the first time this button is hidden.
 * 
 * Get or set label for the first shown browse button. When file is selected for the first time this button is hidden.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set label for browse button in main container.
 * 
 * Get or set label for browse button in main container.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set label for summary Clear all button. It will be shown only in multiple upload mode.
 * 
 * Get or set label for summary Clear all button. It will be shown only in multiple upload mode.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set template for showing summary template. {0} is count of uploaded files. {1} is total count of file to be uploaded.
 * 
 * Get or set template for showing summary template. {0} is count of uploaded files. {1} is total count of file to be uploaded.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set template for showing uploading information in summary progress bar. It will be shown only in multiple upload mode. {0} uploaded filesize. {1} - total file size.
 * 
 * Get or set template for showing uploading information in summary progress bar. It will be shown only in multiple upload mode. {0} uploaded filesize. {1} - total file size.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set label for show/hide details button when main container is hidden.
 * 
 * Get or set label for show/hide details button when main container is hidden.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set label for show/hide details button when main container is shown.
 * 
 * Get or set label for show/hide details button when main container is shown.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set label for button cancelling all files. Shown only in multiple upload mode.
 * 
 * Get or set label for button cancelling all files. Shown only in multiple upload mode.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set label for start upload batch files. Shown only in multiple upload mode and autostartupload is false.
 * 
 * Get or set label for start upload batch files. Shown only in multiple upload mode and autostartupload is false.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set label when upload is finished. Shown only in multiple upload mode.
 * 
 * Get or set label when upload is finished. Shown only in multiple upload mode.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set filename when it could not be shown the whole file name and should be shorten.
 * 
 * Get or set filename when it could not be shown the whole file name and should be shorten.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set message shown when max file size of the uploaded file exceeds the limit.
 * 
 * Get or set message shown when max file size of the uploaded file exceeds the limit.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set error message when ajax call to get file status throws error.
 * 
 * Get or set error message when ajax call to get file status throws error.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set error message when ajax call to send cancel upload command.
 * 
 * Get or set error message when ajax call to send cancel upload command.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set error message when file is not found.
 * 
 * Get or set error message when file is not found.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set error message different from the other messages.
 * 
 * Get or set error message different from the other messages.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set error message when file extension validation failed.
 * 
 * Get or set error message when file extension validation failed.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set error message when AJAX Request to get file size throws error.
 * 
 * Get or set error message when AJAX Request to get file size throws error.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set error message when trying to remove non existing file.
 * 
 * Get or set error message when trying to remove non existing file.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set error message when trying to start non existing file.
 * 
 * Get or set error message when trying to start non existing file.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set error message when maximum allowed files exceeded.
 * 
 * Get or set error message when maximum allowed files exceeded.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set error message when maximum simultaneous files is less or equal to 0.
 * 
 * Get or set error message when maximum simultaneous files is less or equal to 0.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set error message when trying to drop more than 1 file and mode is single.
 * Get or set error message when trying to drop more than 1 file and mode is single.
 * 
 * \@optionValue New value to be set.
 * Get or set URL for uploading.
 * 
 * Get or set URL for uploading.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set URL of HTTPHandler to get information about file upload, current size and also to get commands
 * 
 * Get or set URL of HTTPHandler to get information about file upload, current size and also to get commands
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set file allowed file extensions. When this array is empty - it is not made such validation. Example ["gif", "jpg", "bmp"].
 * 
 * Get or set file allowed file extensions. When this array is empty - it is not made such validation. Example ["gif", "jpg", "bmp"].
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set whether to show File Extension icon
 * 
 * Get or set whether to show File Extension icon
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set control specific CSS options. For example you can override specific control classes with custom ones.
 * 
 * Get or set control specific CSS options. For example you can override specific control classes with custom ones.
 * 
 * 
 * \@optionValue New value to be set.
 * Set icon css classes for specified file extension
 * 
 * Set icon css classes for specified file extension
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set multiple or single file upload. In single upload it is possible to upload only one file at the same time.
 * 
 * Get or set multiple or single file upload. In single upload it is possible to upload only one file at the same time.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set a bool setting that allows user to select(for upload) more than 1 file from the browse dialog at once. HTML 5+ - it is supported by Chrome, MOzilla FF, Safar, Opera latest versions and IE10+
 * 
 * Get or set a bool setting that allows user to select(for upload) more than 1 file from the browse dialog at once. HTML 5+ - it is supported by Chrome, MOzilla FF, Safar, Opera latest versions and IE10+
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set the maximum number of allowed files to upload.
 * 
 * Get or set the maximum number of allowed files to upload.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set count of files that could be uploaded at the same time.
 * 
 * Get or set count of files that could be uploaded at the same time.
 * 
 * 
 * \@optionValue New value to be set.
 * Get or set file size metrics how to be shown files size.
 * 
 * Get or set file size metrics how to be shown files size.
 * 
 * 
 * \@optionValue New value to be set.
 * UniqueId of the control - should not be changed by developer. Set from server-side wrapper.
 * 
 * UniqueId of the control - should not be changed by developer. Set from server-side wrapper.
 * 
 * 
 * \@optionValue New value to be set.
 * The number of digits after the decimal point.
 * 
 * The number of digits after the decimal point.
 * 
 * 
 * \@optionValue New value to be set.
 * Maximum size(in bytes) allowed for the file to be uploaded. If it is set to null or -1 there is no limitation otherwise if the size(of the selected file) exceeds this value it is not allowed to be uploaded. This option is used for validation only on client side and only if the browser supports HTML5 file API and share information about the file size
 * Maximum size(in bytes) allowed for the file to be uploaded. If it is set to null or -1 there is no limitation otherwise if the size(of the selected file) exceeds this value it is not allowed to be uploaded. This option is used for validation only on client side and only if the browser supports HTML5 file API and share information about the file size
 * 
 * \@optionValue New value to be set.
 * Defines the name of the file upload selecting event. Fired when browse button is pressed.
 * Return false in order to cancel selecting file.
 * Function takes arguments evt and ui.
 * Use ui.owner in order to access the igUpload widget object.
 * Defines the name of the file upload selecting event. Fired when browse button is pressed.
 * Return false in order to cancel selecting file.
 * Function takes arguments evt and ui.
 * Use ui.owner in order to access the igUpload widget object.
 * 
 * \@optionValue New value to be set.
 * Defines the name of the file upload selected event. Fired when file is selected from browse dialog.
 * Return false in order to cancel uploading file.
 * Function takes arguments evt and ui.
 * Use ui.fileId to get unique identifier of the file
 * Use ui.filePath to get the name of the uploaded file
 * Use ui.owner in order to access the igUpload widget object.
 * Defines the name of the file upload selected event. Fired when file is selected from browse dialog.
 * Return false in order to cancel uploading file.
 * Function takes arguments evt and ui.
 * Use ui.fileId to get unique identifier of the file
 * Use ui.filePath to get the name of the uploaded file
 * Use ui.owner in order to access the igUpload widget object.
 * 
 * \@optionValue New value to be set.
 * Defines the name of the file uploading event. Fired every time when fileuploader get status for the upload.
 * Return false in order to cancel uploading file.
 * Function takes arguments evt and ui.
 * Use ui.fileId to get unique identifier of the file
 * Use ui.filePath to get the name of the uploaded file
 * Use ui.totalSize to get the file size of the uploaded file
 * Use ui.uploadedBytes to get uploaded bytes
 * Use ui.fileStatus to get current file status
 * Use ui.fileInfo to get reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from server side), etc.
 * Use ui.owner in order to access the igUpload widget object.
 * Defines the name of the file uploading event. Fired every time when fileuploader get status for the upload.
 * Return false in order to cancel uploading file.
 * Function takes arguments evt and ui.
 * Use ui.fileId to get unique identifier of the file
 * Use ui.filePath to get the name of the uploaded file
 * Use ui.totalSize to get the file size of the uploaded file
 * Use ui.uploadedBytes to get uploaded bytes
 * Use ui.fileStatus to get current file status
 * Use ui.fileInfo to get reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from server side), etc.
 * Use ui.owner in order to access the igUpload widget object.
 * 
 * \@optionValue New value to be set.
 * Defines the name of the uploaded event. Fired when the file is uploaded
 * Function takes arguments evt and ui.
 * Use ui.fileId to get unique identifier of the file
 * Use ui.filePath to get the name of the uploaded file
 * Use ui.totalSize to get the file size of the uploaded file
 * Use ui.fileInfo to get reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from server side), etc.
 * Use ui.owner in order to access the igUpload widget object.
 * Defines the name of the uploaded event. Fired when the file is uploaded
 * Function takes arguments evt and ui.
 * Use ui.fileId to get unique identifier of the file
 * Use ui.filePath to get the name of the uploaded file
 * Use ui.totalSize to get the file size of the uploaded file
 * Use ui.fileInfo to get reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from server side), etc.
 * Use ui.owner in order to access the igUpload widget object.
 * 
 * \@optionValue New value to be set.
 * Defines the name of the file upload cancel event. Fired when the server responses that the file is canceled.
 * Function takes arguments evt and ui.
 * Use ui.fileId to get unique identifier of the file
 * Use ui.filePath to get the name of the uploaded file
 * Use ui.totalSize to get the file size of the uploaded file
 * Use ui.uploadedBytes to get uploaded bytes
 * Use ui.fileStatus to get current file status
 * Use ui.owner in order to access the igUpload widget object.
 * Defines the name of the file upload cancel event. Fired when the server responses that the file is canceled.
 * Function takes arguments evt and ui.
 * Use ui.fileId to get unique identifier of the file
 * Use ui.filePath to get the name of the uploaded file
 * Use ui.totalSize to get the file size of the uploaded file
 * Use ui.uploadedBytes to get uploaded bytes
 * Use ui.fileStatus to get current file status
 * Use ui.owner in order to access the igUpload widget object.
 * 
 * \@optionValue New value to be set.
 * Defines the name of the cancel all button event click. Fired when cancel all button in summary is clicked. Fired only in multiple upload mode.
 * Function takes arguments evt and ui.
 * Use ui.owner in order to access the igUpload widget object.
 * Defines the name of the cancel all button event click. Fired when cancel all button in summary is clicked. Fired only in multiple upload mode.
 * Function takes arguments evt and ui.
 * Use ui.owner in order to access the igUpload widget object.
 * 
 * \@optionValue New value to be set.
 * Defines the name of the file upload error event. Fired when error is occurred.
 * Function takes arguments evt and ui.
 * Use ui.errorCode to get current errorCode
 * Use ui.fileId to get identifier of the file for which the event is fired(after that it can be used API function getFileInfo). NOTE: It is possible to be null in some cases: try to drop multiple files when mode is single , check maximum allowed uploading files fails or check for count of maximum allowed simultaneous files upload fails.
 * Use ui.errorMessage to get detailed error description
 * Use ui.errorType to get error type - it could be clientside or serverside
 * Use ui.serverMessage to get specific server message returned by server - if errorType is serverside
 * Use ui.owner in order to access the igUpload widget object.
 * Defines the name of the file upload error event. Fired when error is occurred.
 * Function takes arguments evt and ui.
 * Use ui.errorCode to get current errorCode
 * Use ui.fileId to get identifier of the file for which the event is fired(after that it can be used API function getFileInfo). NOTE: It is possible to be null in some cases: try to drop multiple files when mode is single , check maximum allowed uploading files fails or check for count of maximum allowed simultaneous files upload fails.
 * Use ui.errorMessage to get detailed error description
 * Use ui.errorType to get error type - it could be clientside or serverside
 * Use ui.serverMessage to get specific server message returned by server - if errorType is serverside
 * Use ui.owner in order to access the igUpload widget object.
 * 
 * \@optionValue New value to be set.
 * It is fired when validating file extensions
 * Function takes arguments evt and ui.
 * Use ui.fileName to get the full file name
 * Use ui.fileExtension to get file extension
 * Use ui.owner in order to access the igUpload widget object.
 * It is fired when validating file extensions
 * Function takes arguments evt and ui.
 * Use ui.fileName to get the full file name
 * Use ui.fileExtension to get file extension
 * Use ui.owner in order to access the igUpload widget object.
 * 
 * \@optionValue New value to be set.
 * It is fired when event onload(of XmlHttpRequest) is fired. This event will be fired only if the browser supports HTML5 file API
 * Function takes arguments evt and ui.
 * Use ui.fileId to get unique identifier of the file
 * Use ui.xhr to get reference to the original XMLHttpRequest object
 * Use ui.fileInfo to get reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from the server-side), etc.
 * Use ui.owner in order to access the igUpload widget object.
 * It is fired when event onload(of XmlHttpRequest) is fired. This event will be fired only if the browser supports HTML5 file API
 * Function takes arguments evt and ui.
 * Use ui.fileId to get unique identifier of the file
 * Use ui.xhr to get reference to the original XMLHttpRequest object
 * Use ui.fileInfo to get reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from the server-side), etc.
 * Use ui.owner in order to access the igUpload widget object.
 * 
 * \@optionValue New value to be set.
 * It is fired before submitting to the server the uploading file(and its additional data if any). It could be used to append additional data fields to the FormData object(if the browser supports HTML5 file API - like newest Chrome, Firefox, IE11+). If the browser does not support HTML5 file API(IE10 and older) it could be added these data fields(as hidden input fields) to the form. Use the public API function addDataFields.
 * Function takes arguments evt and ui.
 * Use ui.fileId to get unique identifier of the file
 * Use ui.fileInfo to get reference to the fileInfo object - containing information for the fileName, fileSize, serverMessage, etc.
 * Use ui.xhr to get reference to the original XMLHttpRequest object(if the browser supports HTML 5 file API - if not it is undefined)
 * Use ui.formData to get reference to FormData object(if the browser supports HTML5 file API) OR reference to jQuery representation of <form>
 * Use ui.owner in order to access the igUpload widget object.
 * It is fired before submitting to the server the uploading file(and its additional data if any). It could be used to append additional data fields to the FormData object(if the browser supports HTML5 file API - like newest Chrome, Firefox, IE11+). If the browser does not support HTML5 file API(IE10 and older) it could be added these data fields(as hidden input fields) to the form. Use the public API function addDataFields.
 * Function takes arguments evt and ui.
 * Use ui.fileId to get unique identifier of the file
 * Use ui.fileInfo to get reference to the fileInfo object - containing information for the fileName, fileSize, serverMessage, etc.
 * Use ui.xhr to get reference to the original XMLHttpRequest object(if the browser supports HTML 5 file API - if not it is undefined)
 * Use ui.formData to get reference to FormData object(if the browser supports HTML5 file API) OR reference to jQuery representation of <form>
 * Use ui.owner in order to access the igUpload widget object.
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgUpload} methodName_or_optionLiteral_or_options
 * @param {...!Object|number|string|!IgUpload|?} formData_or_formNumber_or_fileIndex_or_optionName_or_options_or_methodParams
 * @return {void|!Object|(string|number)|boolean|string|!Array<?>|?|!IgUploadFileExtensionIcons|number|!FileSelectingEvent|!FileSelectedEvent|!FileUploadingEvent|!FileUploadedEvent|!FileUploadAbortedEvent|!CancelAllClickedEvent|!OnErrorEvent|!FileExtensionsValidatingEvent|!OnXHRLoadEvent|!OnFormDataSubmitEvent|!JQuery}
 */
JQuery.prototype.igUpload = function(methodName_or_optionLiteral_or_options, formData_or_formNumber_or_fileIndex_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgValidatorField() {}
 /** @type {(string|!Object)} */
IgValidatorField.prototype.selector;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function ValidatingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ValidatingEventUIParam() {}
 /** @type {?} */
ValidatingEventUIParam.prototype.owner;
 /** @type {?} */
ValidatingEventUIParam.prototype.value;
/**
 * @record
 * @struct
 */
function ValidatedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ValidatedEventUIParam() {}
 /** @type {?} */
ValidatedEventUIParam.prototype.owner;
 /** @type {?} */
ValidatedEventUIParam.prototype.value;
 /** @type {?} */
ValidatedEventUIParam.prototype.valid;
 /** @type {?} */
ValidatedEventUIParam.prototype.message;
/**
 * @record
 * @struct
 */
function SuccessEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SuccessEventUIParam() {}
 /** @type {?} */
SuccessEventUIParam.prototype.owner;
 /** @type {?} */
SuccessEventUIParam.prototype.value;
 /** @type {?} */
SuccessEventUIParam.prototype.valid;
 /** @type {?} */
SuccessEventUIParam.prototype.message;

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ErrorEventUIParam() {}
 /** @type {?} */
ErrorEventUIParam.prototype.owner;
 /** @type {?} */
ErrorEventUIParam.prototype.value;
 /** @type {?} */
ErrorEventUIParam.prototype.valid;
 /** @type {?} */
ErrorEventUIParam.prototype.message;
/**
 * @record
 * @struct
 */
function ErrorShowingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ErrorShowingEventUIParam() {}
 /** @type {?} */
ErrorShowingEventUIParam.prototype.owner;
 /** @type {?} */
ErrorShowingEventUIParam.prototype.message;
 /** @type {?} */
ErrorShowingEventUIParam.prototype.target;
/**
 * @record
 * @struct
 */
function ErrorHidingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ErrorHidingEventUIParam() {}
 /** @type {?} */
ErrorHidingEventUIParam.prototype.owner;
 /** @type {?} */
ErrorHidingEventUIParam.prototype.message;
 /** @type {?} */
ErrorHidingEventUIParam.prototype.target;
/**
 * @record
 * @struct
 */
function ErrorShownEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ErrorShownEventUIParam() {}
 /** @type {?} */
ErrorShownEventUIParam.prototype.owner;
 /** @type {?} */
ErrorShownEventUIParam.prototype.message;
 /** @type {?} */
ErrorShownEventUIParam.prototype.target;
/**
 * @record
 * @struct
 */
function ErrorHiddenEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ErrorHiddenEventUIParam() {}
 /** @type {?} */
ErrorHiddenEventUIParam.prototype.owner;
 /** @type {?} */
ErrorHiddenEventUIParam.prototype.message;
 /** @type {?} */
ErrorHiddenEventUIParam.prototype.target;
/**
 * @record
 * @struct
 */
function SuccessShowingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SuccessShowingEventUIParam() {}
 /** @type {?} */
SuccessShowingEventUIParam.prototype.owner;
 /** @type {?} */
SuccessShowingEventUIParam.prototype.message;
 /** @type {?} */
SuccessShowingEventUIParam.prototype.target;
/**
 * @record
 * @struct
 */
function SuccessHidingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SuccessHidingEventUIParam() {}
 /** @type {?} */
SuccessHidingEventUIParam.prototype.owner;
 /** @type {?} */
SuccessHidingEventUIParam.prototype.message;
 /** @type {?} */
SuccessHidingEventUIParam.prototype.target;
/**
 * @record
 * @struct
 */
function SuccessShownEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SuccessShownEventUIParam() {}
 /** @type {?} */
SuccessShownEventUIParam.prototype.owner;
 /** @type {?} */
SuccessShownEventUIParam.prototype.message;
 /** @type {?} */
SuccessShownEventUIParam.prototype.target;
/**
 * @record
 * @struct
 */
function SuccessHiddenEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SuccessHiddenEventUIParam() {}
 /** @type {?} */
SuccessHiddenEventUIParam.prototype.owner;
 /** @type {?} */
SuccessHiddenEventUIParam.prototype.message;
 /** @type {?} */
SuccessHiddenEventUIParam.prototype.target;
/**
 * @record
 * @struct
 */
function FormValidatingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FormValidatingEventUIParam() {}
 /** @type {?} */
FormValidatingEventUIParam.prototype.owner;
 /** @type {?} */
FormValidatingEventUIParam.prototype.target;
/**
 * @record
 * @struct
 */
function FormValidatedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FormValidatedEventUIParam() {}
 /** @type {?} */
FormValidatedEventUIParam.prototype.owner;
 /** @type {?} */
FormValidatedEventUIParam.prototype.target;
 /** @type {?} */
FormValidatedEventUIParam.prototype.valid;
/**
 * @record
 * @struct
 */
function FormErrorEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FormErrorEventUIParam() {}
 /** @type {?} */
FormErrorEventUIParam.prototype.owner;
 /** @type {?} */
FormErrorEventUIParam.prototype.target;
/**
 * @record
 * @struct
 */
function FormSuccessEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FormSuccessEventUIParam() {}
 /** @type {?} */
FormSuccessEventUIParam.prototype.owner;
 /** @type {?} */
FormSuccessEventUIParam.prototype.target;
/**
 * @record
 * @struct
 */
function IgValidator() {}
 /** @type {boolean} */
IgValidator.prototype.onchange;
 /** @type {boolean} */
IgValidator.prototype.onblur;
 /** @type {boolean} */
IgValidator.prototype.onsubmit;
 /** @type {(boolean|!Object)} */
IgValidator.prototype.required;
 /** @type {(boolean|!Object)} */
IgValidator.prototype.number;
 /** @type {(boolean|!Object)} */
IgValidator.prototype.date;
 /** @type {(boolean|!Object)} */
IgValidator.prototype.email;
 /** @type {(!Object|!Array<?>)} */
IgValidator.prototype.lengthRange;
 /** @type {(!Object|!Array<?>)} */
IgValidator.prototype.valueRange;
 /** @type {(boolean|!Object)} */
IgValidator.prototype.creditCard;
 /** @type {(string|!Object)} */
IgValidator.prototype.pattern;
 /** @type {!Element} */
IgValidator.prototype.messageTarget;
 /** @type {string} */
IgValidator.prototype.errorMessage;
 /** @type {string} */
IgValidator.prototype.successMessage;
 /** @type {number} */
IgValidator.prototype.threshold;
 /** @type {(string|!Object)} */
IgValidator.prototype.equalTo;
 /** @type {(string|!Object|!Function)} */
IgValidator.prototype.custom;
 /** @type {!Array<!IgValidatorField>} */
IgValidator.prototype.fields;
 /** @type {?} */
IgValidator.prototype.notificationOptions;
 /** @type {boolean} */
IgValidator.prototype.requiredIndication;
 /** @type {boolean} */
IgValidator.prototype.optionalIndication;
 /** @type {!ValidatingEvent} */
IgValidator.prototype.validating;
 /** @type {!ValidatedEvent} */
IgValidator.prototype.validated;
 /** @type {!SuccessEvent} */
IgValidator.prototype.success;
 /** @type {!ErrorEvent} */
IgValidator.prototype.error;
 /** @type {!ErrorShowingEvent} */
IgValidator.prototype.errorShowing;
 /** @type {!ErrorHidingEvent} */
IgValidator.prototype.errorHiding;
 /** @type {!ErrorShownEvent} */
IgValidator.prototype.errorShown;
 /** @type {!ErrorHiddenEvent} */
IgValidator.prototype.errorHidden;
 /** @type {!SuccessShowingEvent} */
IgValidator.prototype.successShowing;
 /** @type {!SuccessHidingEvent} */
IgValidator.prototype.successHiding;
 /** @type {!SuccessShownEvent} */
IgValidator.prototype.successShown;
 /** @type {!SuccessHiddenEvent} */
IgValidator.prototype.successHidden;
 /** @type {!FormValidatingEvent} */
IgValidator.prototype.formValidating;
 /** @type {!FormValidatedEvent} */
IgValidator.prototype.formValidated;
 /** @type {!FormErrorEvent} */
IgValidator.prototype.formError;
 /** @type {!FormSuccessEvent} */
IgValidator.prototype.formSuccess;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgValidatorMethods() {}

/**
 * Trigger validation and show errors for invalid fields.
 * 
 * @param {!Object=} field    Optional field object, its selector or zero-based index to check. Only has effect with fields collection and skips other fields.
 * @return {boolean}
 */
IgValidatorMethods.prototype.validate = function(field) {};

/**
 * Trigger validation but do not display error messages.
 * 
 * @param {!Object=} field    Optional field object, its selector or zero-based index to check. Only has effect with fields collection and skips other fields.
 * @return {boolean}
 */
IgValidatorMethods.prototype.isValid = function(field) {};

/**
 * Hide any possible message(s) (either messageTarget or igNotifier).
 * Note: When the validator has a fields colleciton, not passing a field will hide messages on all fields.
 * 
 * @param {!Object=} field    Optional field object, its selector or zero-based index to hide message for.
 * @return {void}
 */
IgValidatorMethods.prototype.hide = function(field) {};

/**
 * Gets all current error messages for invalid field(s). Note that this method does not valdiate and states and messages are only updated on validation, so
 * this can be used on formValidated event or after validate/isValid method calls.
 * 
 * @param {!Object=} field    Optional field object, selector or zero-based index for a single field to get error message for.
 * @return {!Array<?>}
 */
IgValidatorMethods.prototype.getErrorMessages = function(field) {};

/**
 * Check for currently displayed message(s). Takes an optional field.
 * Note: When the validator has a fields colleciton, not passing a field will return a cumulative true even if just one field has a visible message.
 * 
 * @param {!Object=} field    Optional field object, selector or zero-based index for a single field to get error message for.
 * @return {boolean}
 */
IgValidatorMethods.prototype.isMessageDisplayed = function(field) {};

/**
 * Gets the notifier for the igValidator or for a single filed.
 * 
 * @param {!Object=} field    Optional field object, its selector or zero-based index to get notifier for.
 * @return {!Object}
 */
IgValidatorMethods.prototype.notifier = function(field) {};

/**
 * Adds an new input to the fields collection and initializes it with the validator. Note: Additional fields are only accepted if the validator has been created with the collection.
 * 
 * @param {!Object} field    An object with the field selector and options.
 * @return {void}
 */
IgValidatorMethods.prototype.addField = function(field) {};

/**
 * Removes an input from the fields collection.
 * 
 * @param {!Object} field    The field object to remove, its zero-based index or selector.
 * @return {void}
 */
IgValidatorMethods.prototype.removeField = function(field) {};

/**
 * Updates a field in the validator collection. Used to reinitialize field in case a control has been created after the validator or to pass in new options.
 * 
 * @param {!Object} field    The field object to update, its zero-based index or selector.
 * @param {!Object=} fieldOptions    New options to apply to the field.
 * @return {void}
 */
IgValidatorMethods.prototype.updateField = function(field, fieldOptions) {};

/**
 * Destroys the validator widget.
 * @return {void}
 */
IgValidatorMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgValidatorMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * @constructor
 * @struct
 * @param {string|!Array<?>} name_or_formatItems
 */
Infragistics.IgValidatorBaseRule = function(name_or_formatItems) {};

/**
 * Gets the error message type to get from locale settings (matching as "<type>Message>"). Returns the rule name by default.
 * Only used when there's no errorMessage option available through getRuleMessage.
 * 
 * @param {!Object} options
 * @return {string}
 */
Infragistics.IgValidatorBaseRule.prototype.getMessageType = function(options) {};

/**
 * Gets an errorMessage from either the rule or field/global options.
 * 
 * @param {!Object} options
 * @return {string}
 */
Infragistics.IgValidatorBaseRule.prototype.getRuleMessage = function(options) {};

/**
 * Formats an error message using rule-specific values (usually from formatItems).
 * 
 * @param {string} message    The unformatted error message the validator intends to display.
 * @return {string}
 */
Infragistics.IgValidatorBaseRule.prototype.formatMessage = function(message) {};

/**
 * Validates a value against this rule and returns the result.
 * 
 * @param {!Object} options    Options for the validator, if fields are used this parameter is already populated with inherited ones.
 * @param {!Object} value    The value to check.
 * @return {boolean}
 */
Infragistics.IgValidatorBaseRule.prototype.isValid = function(options, value) {};
 /** @type {?} */
IgniteUIStatic.prototype.IgValidatorBaseRule;

/**
 * @constructor
 * @struct
 * @param {string|!Array<?>} name_or_groupTypes_or_groupMessageName_or_formatItems
 */
Infragistics.IgValidatorRequiredRule = function(name_or_groupTypes_or_groupMessageName_or_formatItems) {};

/**
 * @param {!Object} options
 * @return {void}
 */
Infragistics.IgValidatorRequiredRule.prototype.getMessageType = function(options) {};

/**
 * @param {!Object} options
 * @param {!Object} value
 * @return {void}
 */
Infragistics.IgValidatorRequiredRule.prototype.isValid = function(options, value) {};

/**
 * Gets an errorMessage from either the rule or field/global options.
 * 
 * @param {!Object} options
 * @return {string}
 */
Infragistics.IgValidatorRequiredRule.prototype.getRuleMessage = function(options) {};

/**
 * Formats an error message using rule-specific values (usually from formatItems).
 * 
 * @param {string} message    The unformatted error message the validator intends to display.
 * @return {string}
 */
Infragistics.IgValidatorRequiredRule.prototype.formatMessage = function(message) {};
 /** @type {?} */
IgniteUIStatic.prototype.IgValidatorRequiredRule;

/**
 * @constructor
 * @struct
 * @param {string|!Array<?>} name_or_formatItems
 */
Infragistics.IgValidatorControlRule = function(name_or_formatItems) {};

/**
 * @return {void}
 */
Infragistics.IgValidatorControlRule.prototype.getMessageType = function() {};

/**
 * Returns an error message for the rule from options
 * 
 * @param {!Object} options
 * @return {void}
 */
Infragistics.IgValidatorControlRule.prototype.getRuleMessage = function(options) {};

/**
 * @param {!Object} options
 * @return {void}
 */
Infragistics.IgValidatorControlRule.prototype.isValid = function(options) {};

/**
 * Formats an error message using rule-specific values (usually from formatItems).
 * 
 * @param {string} message    The unformatted error message the validator intends to display.
 * @return {string}
 */
Infragistics.IgValidatorControlRule.prototype.formatMessage = function(message) {};
 /** @type {?} */
IgniteUIStatic.prototype.IgValidatorControlRule;

/**
 * @constructor
 * @struct
 * @param {string|!Array<?>} name_or_formatItems
 */
Infragistics.IgValidatorNumberRule = function(name_or_formatItems) {};

/**
 * @param {!Object} options
 * @param {!Object} value
 * @return {void}
 */
Infragistics.IgValidatorNumberRule.prototype.isValid = function(options, value) {};

/**
 * Gets the error message type to get from locale settings (matching as "<type>Message>"). Returns the rule name by default.
 * Only used when there's no errorMessage option available through getRuleMessage.
 * 
 * @param {!Object} options
 * @return {string}
 */
Infragistics.IgValidatorNumberRule.prototype.getMessageType = function(options) {};

/**
 * Gets an errorMessage from either the rule or field/global options.
 * 
 * @param {!Object} options
 * @return {string}
 */
Infragistics.IgValidatorNumberRule.prototype.getRuleMessage = function(options) {};

/**
 * Formats an error message using rule-specific values (usually from formatItems).
 * 
 * @param {string} message    The unformatted error message the validator intends to display.
 * @return {string}
 */
Infragistics.IgValidatorNumberRule.prototype.formatMessage = function(message) {};
 /** @type {?} */
IgniteUIStatic.prototype.IgValidatorNumberRule;

/**
 * @constructor
 * @struct
 * @param {string|!Array<?>} name_or_formatItems
 */
Infragistics.IgValidatorDateRule = function(name_or_formatItems) {};

/**
 * @param {!Object} options
 * @param {!Object} value
 * @return {void}
 */
Infragistics.IgValidatorDateRule.prototype.isValid = function(options, value) {};

/**
 * Gets the error message type to get from locale settings (matching as "<type>Message>"). Returns the rule name by default.
 * Only used when there's no errorMessage option available through getRuleMessage.
 * 
 * @param {!Object} options
 * @return {string}
 */
Infragistics.IgValidatorDateRule.prototype.getMessageType = function(options) {};

/**
 * Gets an errorMessage from either the rule or field/global options.
 * 
 * @param {!Object} options
 * @return {string}
 */
Infragistics.IgValidatorDateRule.prototype.getRuleMessage = function(options) {};

/**
 * Formats an error message using rule-specific values (usually from formatItems).
 * 
 * @param {string} message    The unformatted error message the validator intends to display.
 * @return {string}
 */
Infragistics.IgValidatorDateRule.prototype.formatMessage = function(message) {};
 /** @type {?} */
IgniteUIStatic.prototype.IgValidatorDateRule;

/**
 * @constructor
 * @struct
 * @param {string|!Array<?>} name_or_formatItems
 */
Infragistics.IgValidatorLengthRule = function(name_or_formatItems) {};

/**
 * @return {void}
 */
Infragistics.IgValidatorLengthRule.prototype.getMessageType = function() {};

/**
 * @param {!Object} options
 * @param {!Object} value
 * @return {void}
 */
Infragistics.IgValidatorLengthRule.prototype.isValid = function(options, value) {};

/**
 * Gets an errorMessage from either the rule or field/global options.
 * 
 * @param {!Object} options
 * @return {string}
 */
Infragistics.IgValidatorLengthRule.prototype.getRuleMessage = function(options) {};

/**
 * Formats an error message using rule-specific values (usually from formatItems).
 * 
 * @param {string} message    The unformatted error message the validator intends to display.
 * @return {string}
 */
Infragistics.IgValidatorLengthRule.prototype.formatMessage = function(message) {};
 /** @type {?} */
IgniteUIStatic.prototype.IgValidatorLengthRule;

/**
 * @constructor
 * @struct
 * @param {string|!Array<?>} name_or_formatItems
 */
Infragistics.IgValidatorValueRule = function(name_or_formatItems) {};

/**
 * @return {void}
 */
Infragistics.IgValidatorValueRule.prototype.getMessageType = function() {};

/**
 * @param {!Object} options
 * @param {!Object} value
 * @return {void}
 */
Infragistics.IgValidatorValueRule.prototype.isValid = function(options, value) {};
 /** @type {?} */
IgniteUIStatic.prototype.IgValidatorValueRule;

/**
 * @constructor
 * @struct
 * @param {string|!Array<?>} name_or_formatItems
 */
Infragistics.IgValidatorEqualToRule = function(name_or_formatItems) {};

/**
 * @param {!Object} options
 * @param {!Object} value
 * @return {void}
 */
Infragistics.IgValidatorEqualToRule.prototype.isValid = function(options, value) {};

/**
 * Gets the error message type to get from locale settings (matching as "<type>Message>"). Returns the rule name by default.
 * Only used when there's no errorMessage option available through getRuleMessage.
 * 
 * @param {!Object} options
 * @return {string}
 */
Infragistics.IgValidatorEqualToRule.prototype.getMessageType = function(options) {};

/**
 * Gets an errorMessage from either the rule or field/global options.
 * 
 * @param {!Object} options
 * @return {string}
 */
Infragistics.IgValidatorEqualToRule.prototype.getRuleMessage = function(options) {};

/**
 * Formats an error message using rule-specific values (usually from formatItems).
 * 
 * @param {string} message    The unformatted error message the validator intends to display.
 * @return {string}
 */
Infragistics.IgValidatorEqualToRule.prototype.formatMessage = function(message) {};
 /** @type {?} */
IgniteUIStatic.prototype.IgValidatorEqualToRule;

/**
 * @constructor
 * @struct
 * @param {string|!Array<?>} name_or_formatItems
 */
Infragistics.IgValidatorEmailRule = function(name_or_formatItems) {};

/**
 * @param {!Object} options
 * @param {!Object} value
 * @return {void}
 */
Infragistics.IgValidatorEmailRule.prototype.isValid = function(options, value) {};

/**
 * Gets the error message type to get from locale settings (matching as "<type>Message>"). Returns the rule name by default.
 * Only used when there's no errorMessage option available through getRuleMessage.
 * 
 * @param {!Object} options
 * @return {string}
 */
Infragistics.IgValidatorEmailRule.prototype.getMessageType = function(options) {};

/**
 * Gets an errorMessage from either the rule or field/global options.
 * 
 * @param {!Object} options
 * @return {string}
 */
Infragistics.IgValidatorEmailRule.prototype.getRuleMessage = function(options) {};

/**
 * Formats an error message using rule-specific values (usually from formatItems).
 * 
 * @param {string} message    The unformatted error message the validator intends to display.
 * @return {string}
 */
Infragistics.IgValidatorEmailRule.prototype.formatMessage = function(message) {};
 /** @type {?} */
IgniteUIStatic.prototype.IgValidatorEmailRule;

/**
 * @constructor
 * @struct
 * @param {string|!Array<?>} name_or_formatItems
 */
Infragistics.IgValidatorPatternRule = function(name_or_formatItems) {};

/**
 * @param {!Object} options
 * @param {!Object} value
 * @return {void}
 */
Infragistics.IgValidatorPatternRule.prototype.isValid = function(options, value) {};

/**
 * Gets the error message type to get from locale settings (matching as "<type>Message>"). Returns the rule name by default.
 * Only used when there's no errorMessage option available through getRuleMessage.
 * 
 * @param {!Object} options
 * @return {string}
 */
Infragistics.IgValidatorPatternRule.prototype.getMessageType = function(options) {};

/**
 * Gets an errorMessage from either the rule or field/global options.
 * 
 * @param {!Object} options
 * @return {string}
 */
Infragistics.IgValidatorPatternRule.prototype.getRuleMessage = function(options) {};

/**
 * Formats an error message using rule-specific values (usually from formatItems).
 * 
 * @param {string} message    The unformatted error message the validator intends to display.
 * @return {string}
 */
Infragistics.IgValidatorPatternRule.prototype.formatMessage = function(message) {};
 /** @type {?} */
IgniteUIStatic.prototype.IgValidatorPatternRule;

/**
 * @constructor
 * @struct
 * @param {string|!Array<?>} name_or_formatItems
 */
Infragistics.IgValidatorCustomRule = function(name_or_formatItems) {};

/**
 * @return {void}
 */
Infragistics.IgValidatorCustomRule.prototype.getMessageType = function() {};

/**
 * @param {!Object} options
 * @param {!Object} value
 * @return {void}
 */
Infragistics.IgValidatorCustomRule.prototype.isValid = function(options, value) {};

/**
 * Gets an errorMessage from either the rule or field/global options.
 * 
 * @param {!Object} options
 * @return {string}
 */
Infragistics.IgValidatorCustomRule.prototype.getRuleMessage = function(options) {};

/**
 * Formats an error message using rule-specific values (usually from formatItems).
 * 
 * @param {string} message    The unformatted error message the validator intends to display.
 * @return {string}
 */
Infragistics.IgValidatorCustomRule.prototype.formatMessage = function(message) {};
 /** @type {?} */
IgniteUIStatic.prototype.IgValidatorCustomRule;

/**
 * @constructor
 * @struct
 * @param {string|!Array<?>} name_or_formatItems
 */
Infragistics.IgValidatorCreditCardRule = function(name_or_formatItems) {};

/**
 * Based on ASP.NET CreditCardAttribute check,
 * https://github.com/Microsoft/referencesource/blob/master/System.ComponentModel.DataAnnotations/DataAnnotations/CreditCardAttribute.cs
 * using Luhn algorithm https://en.wikipedia.org/wiki/Luhn_algorithm
 * 
 * @param {!Object} options
 * @param {!Object} value
 * @return {void}
 */
Infragistics.IgValidatorCreditCardRule.prototype.isValid = function(options, value) {};

/**
 * Gets the error message type to get from locale settings (matching as "<type>Message>"). Returns the rule name by default.
 * Only used when there's no errorMessage option available through getRuleMessage.
 * 
 * @param {!Object} options
 * @return {string}
 */
Infragistics.IgValidatorCreditCardRule.prototype.getMessageType = function(options) {};

/**
 * Gets an errorMessage from either the rule or field/global options.
 * 
 * @param {!Object} options
 * @return {string}
 */
Infragistics.IgValidatorCreditCardRule.prototype.getRuleMessage = function(options) {};

/**
 * Formats an error message using rule-specific values (usually from formatItems).
 * 
 * @param {string} message    The unformatted error message the validator intends to display.
 * @return {string}
 */
Infragistics.IgValidatorCreditCardRule.prototype.formatMessage = function(message) {};
 /** @type {?} */
IgniteUIStatic.prototype.IgValidatorCreditCardRule;

/**
 * Gets/Sets whether validation is triggered when the text in editor changes.
 * Note that this is more appropriate for selection controls such as checkbox, combo or rating.
 * As it can cause excessive messages with text-based fields, the initail validation can be delayed via the [threshold](ui.igvalidator#options:threshold) option.
 * 
 * /Sets whether validation is triggered when the text in editor changes.
 * Note that this is more appropriate for selection controls such as checkbox, combo or rating.
 * As it can cause excessive messages with text-based fields, the initail validation can be delayed via the [threshold](ui.igvalidator#options:threshold) option.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether validation is triggered when the editor loses focus.
 * 
 * /Sets whether validation is triggered when the editor loses focus.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether validation is triggered when a form containing validation targets is submitting. If any of the validations fail, the submit action will be prevented.
 * Note that this doesn't apply to the native JavaScript submit function, but will handle the jQuery equivalent and the browser default action.
 * 
 * /Sets whether validation is triggered when a form containing validation targets is submitting. If any of the validations fail, the submit action will be prevented.
 * Note that this doesn't apply to the native JavaScript submit function, but will handle the jQuery equivalent and the browser default action.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets option to validate if a value was entered (not empty text, selected item, etc.)
 * 
 * /Sets option to validate if a value was entered (not empty text, selected item, etc.)
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets number validation rule options.Default separators for decimals and thousands are '.' and ',' respectively and are defined in the "$.ui.igValidator.defaults" object.
 * 
 * 
 * /Sets number validation rule options.Default separators for decimals and thousands are '.' and ',' respectively and are defined in the "$.ui.igValidator.defaults" object.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets date validation rule options. This can additionally help guide the [valueRange](ui.igvalidator#options:valueRange) validation.Note: Dependat on JavaScript Date parsing which will accept a wide range of values.
 * 
 * 
 * /Sets date validation rule options. This can additionally help guide the [valueRange](ui.igvalidator#options:valueRange) validation.Note: Dependat on JavaScript Date parsing which will accept a wide range of values.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets email validation rule options. Uses a RegExp defined in the "$.ui.igValidator.defaults" object.
 * 
 * /Sets email validation rule options. Uses a RegExp defined in the "$.ui.igValidator.defaults" object.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets a minimum and/or maximum length of text or number of selected items. Null or 0 values are ignored.
 * 
 * /Sets a minimum and/or maximum length of text or number of selected items. Null or 0 values are ignored.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets a minimum and/or maximum value. Null values are ignored.
 * 
 * /Sets a minimum and/or maximum value. Null values are ignored.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets Credit Card number validation rule options.Note: This rule will only validate the checksum of the number using Luhn algorithm irregardless of card type.
 * 
 * 
 * /Sets Credit Card number validation rule options.Note: This rule will only validate the checksum of the number using Luhn algorithm irregardless of card type.
 * 
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets regular expression validation rule options.
 * 
 * /Sets regular expression validation rule options.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets a custom jQuery element to be used for validation messages. That inner HTML of the target is modified, can be a SPAN, LABEL or DIV.
 * 
 * /Sets a custom jQuery element to be used for validation messages. That inner HTML of the target is modified, can be a SPAN, LABEL or DIV.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets text for an error message to be used if none is set for the particular rule. Overrides default rule-specific error messages.
 * 
 * /Sets text for an error message to be used if none is set for the particular rule. Overrides default rule-specific error messages.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets text for a success message. Note that since there is no default, setting this message will enable showing success indication.
 * 
 * /Sets text for a success message. Note that since there is no default, setting this message will enable showing success indication.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets validation minimum input length. Validation won't be triggered for input before that value is reached on change and focus loss.
 * Note: This will not affect required fields on form submit.
 * 
 * /Sets validation minimum input length. Validation won't be triggered for input before that value is reached on change and focus loss.
 * Note: This will not affect required fields on form submit.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets a requirement for the value in this field to be the same as another input element or editor control.
 * 
 * /Sets a requirement for the value in this field to be the same as another input element or editor control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets a custom function to perform validation. Use 'this' to reference the calling validator and the value and optional field settings arguments to determine and return the state of the field.
 * 
 * /Sets a custom function to perform validation. Use 'this' to reference the calling validator and the value and optional field settings arguments to determine and return the state of the field.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets a list of target field items describing each with validation options and a required selector. Fields can contain any of the validation rules and triggers but not other fields or event handlers.
 * Applicable options are also inherited from the global control configuration if not set.
 * 
 * A list of target field items describing each with validation options and a required selector. Fields can contain any of the validation rules and triggers but not other fields or event handlers.
 * Applicable options are also inherited from the global control configuration if not set.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the options for the [igNotifier](ui.ignotifier#options) used to show error messages.
 * 
 * /Sets the options for the [igNotifier](ui.ignotifier#options) used to show error messages.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the option to show an asterisks indication next to required fields.
 * Note: Indicators are not supported on grouped controls such as checkbox or radio button  and the igRating control.
 * 
 * /Sets the option to show an asterisks indication next to required fields.
 * Note: Indicators are not supported on grouped controls such as checkbox or radio button sets and the igRating control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the option to show a label indication next to optional fields.
 * Note: Indicators are not supported on grouped controls such as checkbox or radio button  and the igRating control.
 * 
 * /Sets the option to show a label indication next to optional fields.
 * Note: Indicators are not supported on grouped controls such as checkbox or radio button sets and the igRating control.
 * 
 * 
 * \@optionValue New value to be set.
 * Event which is raised on validation before default validation logic is applied.
 * Return false in order to cancel the event and consider the field valid.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.value to get current value in target.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * Event which is raised on validation before default validation logic is applied.
 * Return false in order to cancel the event and consider the field valid.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.value to get current value in target.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after value was validated but before any action takes effect.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.value to get current value in target.
 * Use ui.valid to determine the outcome of the validation.
 * Use ui.message to get text of message.
 * ui.rule is populated with the name of the rule that failed validation, if any.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * Event which is raised after value was validated but before any action takes effect.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.value to get current value in target.
 * Use ui.valid to determine the outcome of the validation.
 * Use ui.message to get text of message.
 * ui.rule is populated with the name of the rule that failed validation, if any.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * 
 * \@optionValue Define event handler function.
 * Event raised for valid field after value was validated but before any action takes effect.
 * Function takes arguments evt and ui.
 * 
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.value to get current value in target.
 * Use ui.valid to determine the outcome of the validation.
 * Use ui.message to get text of message.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * Event raised for valid field after value was validated but before any action takes effect.
 * Function takes arguments evt and ui.
 * 
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.value to get current value in target.
 * Use ui.valid to determine the outcome of the validation.
 * Use ui.message to get text of message.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * 
 * \@optionValue Define event handler function.
 * Event raised for invalid field after value was validated but before any action takes effect.
 * Function takes arguments evt and ui.
 * 
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.value to get current value in target.
 * Use ui.valid to determine the outcome of the validation.
 * Use ui.message to get text of message.
 * ui.rule is populated with the name of the rule that failed validation.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * Event raised for invalid field after value was validated but before any action takes effect.
 * Function takes arguments evt and ui.
 * 
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.value to get current value in target.
 * Use ui.valid to determine the outcome of the validation.
 * Use ui.message to get text of message.
 * ui.rule is populated with the name of the rule that failed validation.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before error message is displayed.
 * Return false in order to prevent error message display.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.message to get text of message.
 * Use ui.target to get reference to the target of the message.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * Event which is raised before error message is displayed.
 * Return false in order to prevent error message display.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.message to get text of message.
 * Use ui.target to get reference to the target of the message.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before error message is hidden.
 * Return false in order to keep the error message displayed.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.message to get text of message.
 * Use ui.target to get reference to the target of the message.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * Event which is raised before error message is hidden.
 * Return false in order to keep the error message displayed.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.message to get text of message.
 * Use ui.target to get reference to the target of the message.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after error message was displayed.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.message to get text of message.
 * Use ui.target to get reference to the target of the message.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * Event which is raised after error message was displayed.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.message to get text of message.
 * Use ui.target to get reference to the target of the message.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after error message was hidden.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.message to get text of message.
 * Use ui.target to get reference to the target of the message.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * Event which is raised after error message was hidden.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.message to get text of message.
 * Use ui.target to get reference to the target of the message.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before success message is displayed.
 * Return false in order to prevent success message display.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.message to get text of message.
 * Use ui.target to get reference to the target of the message.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * Event which is raised before success message is displayed.
 * Return false in order to prevent success message display.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.message to get text of message.
 * Use ui.target to get reference to the target of the message.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised before success message is hidden.
 * Return false in order to keep success message displayed.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.message to get text of message.
 * Use ui.target to get reference to the target of the message.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * Event which is raised before success message is hidden.
 * Return false in order to keep success message displayed.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.message to get text of message.
 * Use ui.target to get reference to the target of the message.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after success message was displayed.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.message to get text of message.
 * Use ui.target to get reference to the target of the message.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * Event which is raised after success message was displayed.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.message to get text of message.
 * Use ui.target to get reference to the target of the message.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * 
 * \@optionValue Define event handler function.
 * Event which is raised after success message was hidden.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.message to get text of message.
 * Use ui.target to get reference to the target of the message.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * Event which is raised after success message was hidden.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.message to get text of message.
 * Use ui.target to get reference to the target of the message.
 * ui.fieldOptions is populated with options for the specific field in the collection or null.
 * 
 * \@optionValue Define event handler function.
 * Event triggered on Validator instance level before handling a form submit event.
 * Return false to cancel to skip validating and potentially allow the submit if no other other validators return erros.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.target to get reference of the event target form.
 * Event triggered on Validator instance level before handling a form submit event.
 * Return false to cancel to skip validating and potentially allow the submit if no other other validators return erros.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.target to get reference of the event target form.
 * 
 * \@optionValue Define event handler function.
 * Event triggered on Validator instance level after validation on form submit event..
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.target to get reference of the event target form.
 * Use ui.valid to determine the outcome of the validation.
 * Event triggered on Validator instance level after validation on form submit event..
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.target to get reference of the event target form.
 * Use ui.valid to determine the outcome of the validation.
 * 
 * \@optionValue Define event handler function.
 * Event triggered on Validator instance level after failed validation on form submit event.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.target to get reference of the event target form.
 * Event triggered on Validator instance level after failed validation on form submit event.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.target to get reference of the event target form.
 * 
 * \@optionValue Define event handler function.
 * Event triggered on Validator instance level after successful validation on form submit event.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.target to get reference of the event target form.
 * Event triggered on Validator instance level after successful validation on form submit event.
 * 
 * Function takes arguments evt and ui.
 * Use ui.owner to get reference to the igValidator widget.
 * Use ui.target to get reference of the event target form.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgValidator} methodName_or_optionLiteral_or_options
 * @param {...!Object|string|!IgValidator|?=} field_or_optionName_or_options_or_methodParams
 * @return {boolean|void|!Array<?>|!Object|(boolean|!Object)|(!Object|!Array<?>)|(string|!Object)|!Element|string|number|(string|!Object|!Function)|!Array<!IgValidatorField>|?|!ValidatingEvent|!ValidatedEvent|!SuccessEvent|!ErrorEvent|!ErrorShowingEvent|!ErrorHidingEvent|!ErrorShownEvent|!ErrorHiddenEvent|!SuccessShowingEvent|!SuccessHidingEvent|!SuccessShownEvent|!SuccessHiddenEvent|!FormValidatingEvent|!FormValidatedEvent|!FormErrorEvent|!FormSuccessEvent|!JQuery}
 */
JQuery.prototype.igValidator = function(methodName_or_optionLiteral_or_options, field_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgVideoPlayerBookmark() {}
 /** @type {number} */
IgVideoPlayerBookmark.prototype.time;
 /** @type {string} */
IgVideoPlayerBookmark.prototype.title;
 /** @type {boolean} */
IgVideoPlayerBookmark.prototype.disabled;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgVideoPlayerRelatedVideo() {}
 /** @type {string} */
IgVideoPlayerRelatedVideo.prototype.imageUrl;
 /** @type {string} */
IgVideoPlayerRelatedVideo.prototype.title;
 /** @type {number} */
IgVideoPlayerRelatedVideo.prototype.width;
 /** @type {number} */
IgVideoPlayerRelatedVideo.prototype.height;
 /** @type {string} */
IgVideoPlayerRelatedVideo.prototype.link;
 /** @type {!Array<?>} */
IgVideoPlayerRelatedVideo.prototype.sources;
 /** @type {string} */
IgVideoPlayerRelatedVideo.prototype.css;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgVideoPlayerBanner() {}
 /** @type {string} */
IgVideoPlayerBanner.prototype.imageUrl;
 /** @type {!Array<?>} */
IgVideoPlayerBanner.prototype.times;
 /** @type {boolean} */
IgVideoPlayerBanner.prototype.closeBanner;
 /** @type {boolean} */
IgVideoPlayerBanner.prototype.animate;
 /** @type {boolean} */
IgVideoPlayerBanner.prototype.visible;
 /** @type {number} */
IgVideoPlayerBanner.prototype.duration;
 /** @type {boolean} */
IgVideoPlayerBanner.prototype.autohide;
 /** @type {number} */
IgVideoPlayerBanner.prototype.hidedelay;
 /** @type {string} */
IgVideoPlayerBanner.prototype.link;
 /** @type {(string|number)} */
IgVideoPlayerBanner.prototype.width;
 /** @type {(string|number)} */
IgVideoPlayerBanner.prototype.height;
 /** @type {string} */
IgVideoPlayerBanner.prototype.css;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgVideoPlayerCommercialsLinkedCommercial() {}
 /** @type {!Array<?>} */
IgVideoPlayerCommercialsLinkedCommercial.prototype.sources;
 /** @type {number} */
IgVideoPlayerCommercialsLinkedCommercial.prototype.startTime;
 /** @type {string} */
IgVideoPlayerCommercialsLinkedCommercial.prototype.link;
 /** @type {string} */
IgVideoPlayerCommercialsLinkedCommercial.prototype.title;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgVideoPlayerCommercialsEmbeddedCommercial() {}
 /** @type {number} */
IgVideoPlayerCommercialsEmbeddedCommercial.prototype.startTime;
 /** @type {number} */
IgVideoPlayerCommercialsEmbeddedCommercial.prototype.endTime;
 /** @type {string} */
IgVideoPlayerCommercialsEmbeddedCommercial.prototype.link;
 /** @type {string} */
IgVideoPlayerCommercialsEmbeddedCommercial.prototype.title;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgVideoPlayerCommercialsAdMessage() {}
 /** @type {boolean} */
IgVideoPlayerCommercialsAdMessage.prototype.animate;
 /** @type {boolean} */
IgVideoPlayerCommercialsAdMessage.prototype.autoHide;
 /** @type {number} */
IgVideoPlayerCommercialsAdMessage.prototype.hideDelay;
 /** @type {number} */
IgVideoPlayerCommercialsAdMessage.prototype.animationDuration;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgVideoPlayerCommercials() {}
 /** @type {!Array<!IgVideoPlayerCommercialsLinkedCommercial>} */
IgVideoPlayerCommercials.prototype.linkedCommercials;
 /** @type {!Array<!IgVideoPlayerCommercialsEmbeddedCommercial>} */
IgVideoPlayerCommercials.prototype.embeddedCommercials;
 /** @type {boolean} */
IgVideoPlayerCommercials.prototype.alwaysPlayCommercials;
 /** @type {boolean} */
IgVideoPlayerCommercials.prototype.showBookmarks;
 /** @type {!IgVideoPlayerCommercialsAdMessage} */
IgVideoPlayerCommercials.prototype.adMessage;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function EndedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function EndedEventUIParam() {}
 /** @type {?} */
EndedEventUIParam.prototype.source;
 /** @type {?} */
EndedEventUIParam.prototype.duration;
/**
 * @record
 * @struct
 */
function PlayingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function PlayingEventUIParam() {}
 /** @type {?} */
PlayingEventUIParam.prototype.source;
 /** @type {?} */
PlayingEventUIParam.prototype.duration;
/**
 * @record
 * @struct
 */
function PausedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function PausedEventUIParam() {}
 /** @type {?} */
PausedEventUIParam.prototype.source;
 /** @type {?} */
PausedEventUIParam.prototype.duration;
/**
 * @record
 * @struct
 */
function BufferingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function BufferingEventUIParam() {}
 /** @type {?} */
BufferingEventUIParam.prototype.source;
 /** @type {?} */
BufferingEventUIParam.prototype.buffered;

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ProgressEventUIParam() {}
 /** @type {?} */
ProgressEventUIParam.prototype.source;
 /** @type {?} */
ProgressEventUIParam.prototype.currentTime;
 /** @type {?} */
ProgressEventUIParam.prototype.duration;
/**
 * @record
 * @struct
 */
function WaitingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function WaitingEventUIParam() {}
 /** @type {?} */
WaitingEventUIParam.prototype.source;
 /** @type {?} */
WaitingEventUIParam.prototype.currentTime;
 /** @type {?} */
WaitingEventUIParam.prototype.duration;
/**
 * @record
 * @struct
 */
function EnterFullScreenEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function EnterFullScreenEventUIParam() {}
 /** @type {?} */
EnterFullScreenEventUIParam.prototype.source;
/**
 * @record
 * @struct
 */
function ExitFullScreenEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ExitFullScreenEventUIParam() {}
 /** @type {?} */
ExitFullScreenEventUIParam.prototype.source;
/**
 * @record
 * @struct
 */
function RelatedVideoClickEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function RelatedVideoClickEventUIParam() {}
 /** @type {?} */
RelatedVideoClickEventUIParam.prototype.relatedVideo;
 /** @type {?} */
RelatedVideoClickEventUIParam.prototype.relatedVideoElement;
/**
 * @record
 * @struct
 */
function BannerVisibleEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function BannerVisibleEventUIParam() {}
 /** @type {?} */
BannerVisibleEventUIParam.prototype.index;
 /** @type {?} */
BannerVisibleEventUIParam.prototype.banner;
 /** @type {?} */
BannerVisibleEventUIParam.prototype.bannerElement;
/**
 * @record
 * @struct
 */
function BannerHiddenEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function BannerHiddenEventUIParam() {}
 /** @type {?} */
BannerHiddenEventUIParam.prototype.index;
 /** @type {?} */
BannerHiddenEventUIParam.prototype.banner;
 /** @type {?} */
BannerHiddenEventUIParam.prototype.bannerElement;
/**
 * @record
 * @struct
 */
function BannerClickEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function BannerClickEventUIParam() {}
 /** @type {?} */
BannerClickEventUIParam.prototype.bannerElement;
/**
 * @record
 * @struct
 */
function IgVideoPlayer() {}
 /** @type {!Array<?>} */
IgVideoPlayer.prototype.sources;
 /** @type {(string|number)} */
IgVideoPlayer.prototype.width;
 /** @type {(string|number)} */
IgVideoPlayer.prototype.height;
 /** @type {string} */
IgVideoPlayer.prototype.posterUrl;
 /** @type {boolean} */
IgVideoPlayer.prototype.preload;
 /** @type {boolean} */
IgVideoPlayer.prototype.autoplay;
 /** @type {boolean} */
IgVideoPlayer.prototype.autohide;
 /** @type {number} */
IgVideoPlayer.prototype.volumeAutohideDelay;
 /** @type {number} */
IgVideoPlayer.prototype.centerButtonHideDelay;
 /** @type {boolean} */
IgVideoPlayer.prototype.loop;
 /** @type {boolean} */
IgVideoPlayer.prototype.browserControls;
 /** @type {boolean} */
IgVideoPlayer.prototype.fullscreen;
 /** @type {number} */
IgVideoPlayer.prototype.volume;
 /** @type {boolean} */
IgVideoPlayer.prototype.muted;
 /** @type {string} */
IgVideoPlayer.prototype.title;
 /** @type {boolean} */
IgVideoPlayer.prototype.showSeekTime;
 /** @type {string} */
IgVideoPlayer.prototype.progressLabelFormat;
 /** @type {!Array<!IgVideoPlayerBookmark>} */
IgVideoPlayer.prototype.bookmarks;
 /** @type {!Array<!IgVideoPlayerRelatedVideo>} */
IgVideoPlayer.prototype.relatedVideos;
 /** @type {!Array<!IgVideoPlayerBanner>} */
IgVideoPlayer.prototype.banners;
 /** @type {!IgVideoPlayerCommercials} */
IgVideoPlayer.prototype.commercials;
 /** @type {!EndedEvent} */
IgVideoPlayer.prototype.ended;
 /** @type {!PlayingEvent} */
IgVideoPlayer.prototype.playing;
 /** @type {!PausedEvent} */
IgVideoPlayer.prototype.paused;
 /** @type {!BufferingEvent} */
IgVideoPlayer.prototype.buffering;
 /** @type {!ProgressEvent} */
IgVideoPlayer.prototype.progress;
 /** @type {!WaitingEvent} */
IgVideoPlayer.prototype.waiting;
 /** @type {!BookmarkHitEvent} */
IgVideoPlayer.prototype.bookmarkHit;
 /** @type {!BookmarkClickEvent} */
IgVideoPlayer.prototype.bookmarkClick;
 /** @type {!EnterFullScreenEvent} */
IgVideoPlayer.prototype.enterFullScreen;
 /** @type {!ExitFullScreenEvent} */
IgVideoPlayer.prototype.exitFullScreen;
 /** @type {!RelatedVideoClickEvent} */
IgVideoPlayer.prototype.relatedVideoClick;
 /** @type {!BannerVisibleEvent} */
IgVideoPlayer.prototype.bannerVisible;
 /** @type {!BannerHiddenEvent} */
IgVideoPlayer.prototype.bannerHidden;
 /** @type {!BannerClickEvent} */
IgVideoPlayer.prototype.bannerClick;
 /** @type {!BrowserNotSupportedEvent} */
IgVideoPlayer.prototype.browserNotSupported;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgVideoPlayerMethods() {}

/**
 * Returns the element on which the widget was instantiated
 * @return {void}
 */
IgVideoPlayerMethods.prototype.widget = function() {};

/**
 * Hide the add message if shown.
 * @return {void}
 */
IgVideoPlayerMethods.prototype.hideAdMessage = function() {};

/**
 * Play a linked commercial for this video.
 * 
 * @param {!Object} commercial     Specify the linked commercial to play.
 * @return {void}
 */
IgVideoPlayerMethods.prototype.playCommercial = function(commercial) {};

/**
 * Shows the ad banner, if there is such.
 * 
 * @param {number} index    Specify the index of the banner from the banners array.
 * @return {void}
 */
IgVideoPlayerMethods.prototype.showBanner = function(index) {};

/**
 * Hide the ad banner, if there is such.
 * 
 * @param {number} index    Specify the index of the banner from the banners array.
 * @return {void}
 */
IgVideoPlayerMethods.prototype.hideBanner = function(index) {};

/**
 * Resets the commercials, to be shown again.
 * @return {void}
 */
IgVideoPlayerMethods.prototype.resetCommercialsShow = function() {};

/**
 * Toggle control play state. If video is playing it will pause, if video is paused it will play.
 * @return {void}
 */
IgVideoPlayerMethods.prototype.togglePlay = function() {};

/**
 * Start playing current loaded video if any.
 * @return {void}
 */
IgVideoPlayerMethods.prototype.play = function() {};

/**
 * Pause the currently playing video if any.
 * @return {void}
 */
IgVideoPlayerMethods.prototype.pause = function() {};

/**
 * Gets/Sets the current time of the playing video.
 * 
 * @param {number} val     Specify the playback position in seconds to navigate to.
 * @return {number}
 */
IgVideoPlayerMethods.prototype.currentTime = function(val) {};

/**
 * Get a screenshot of the current video frame. It returns a canvas object that you can position and show on the page. This depends on the browser support for canvas.
 * 
 * @param {number=} scaleFactor    Specify scale factor between 0 and 1.
 * @return {!Object}
 */
IgVideoPlayerMethods.prototype.screenshot = function(scaleFactor) {};

/**
 * Get whether the current browser supports video tag.
 * @return {boolean}
 */
IgVideoPlayerMethods.prototype.supportsVideo = function() {};

/**
 * Get whether the current browser supports H.264 codec.
 * @return {boolean}
 */
IgVideoPlayerMethods.prototype.supportsH264BaselineVideo = function() {};

/**
 * Get whether the current browser supports Theora codec.
 * @return {boolean}
 */
IgVideoPlayerMethods.prototype.supportsOggTheoraVideo = function() {};

/**
 * Get whether the current browser supports WEBM codec.
 * @return {boolean}
 */
IgVideoPlayerMethods.prototype.supportsWebmVideo = function() {};

/**
 * Returns whether the currently played video is paused.
 * @return {boolean}
 */
IgVideoPlayerMethods.prototype.paused = function() {};

/**
 * Get whether the current played video has ended.
 * @return {boolean}
 */
IgVideoPlayerMethods.prototype.ended = function() {};

/**
 * Get the current duration of the played video. It may be NaN if duration is still not loaded or the video is a live stream.
 * @return {number}
 */
IgVideoPlayerMethods.prototype.duration = function() {};

/**
 * Get whether the player is seeking to find the new playback position specified.
 * @return {boolean}
 */
IgVideoPlayerMethods.prototype.seeking = function() {};

/**
 * Destroys the widget.
 * @return {void}
 */
IgVideoPlayerMethods.prototype.destroy = function() {};

/**
 * @param {string} propertyName
 * @return {!IgVideoPlayerMethods}
 */
JQuery.prototype.data = function(propertyName) {};

/**
 * Gets/Sets a list of video sources to choose from. Best coded/format is automatically detected by the control. Supported types are depending on the browser and could be one of the following mov, mp4, webm, ogg.
 * 
 * /Sets a list of video sources to choose from. Best coded/format is automatically detected by the control. Supported types are depending on the browser and could be one of the following mov, mp4, webm, ogg.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the width of the control. By default null will stretch the control to fit data, if no other widths are defined.
 * 
 * /Sets the width of the control. By default null will stretch the control to fit data, if no other widths are defined.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the height of the control. By default null will stretch the control to fit data, if no other heights are defined.
 * 
 * /Sets the height of the control. By default null will stretch the control to fit data, if no other heights are defined.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets a URL to an image to show, when no video data is available.
 * 
 * /Sets a URL to an image to show, when no video data is available.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether to preload load initial data for duration of video. If true it may start buffering the video, but this highly depends on the specific browser implementation.
 * 
 * /Sets whether to preload load initial data for duration of video. If true it may start buffering the video, but this highly depends on the specific browser implementation.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the video should start playing immediately after the control is loaded.
 * 
 * /Sets whether the video should start playing immediately after the control is loaded.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether player controls will auto hide when video is not hovered. This is applicable only when Infragistics playback controls are used.
 * 
 * /Sets whether player controls will auto hide when video is not hovered. This is applicable only when Infragistics playback controls are used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets volume slider auto hide delay. This is applicable only when Infragistics playback controls are used.
 * 
 * /Sets volume slider auto hide delay. This is applicable only when Infragistics playback controls are used.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the center big button hide delay.
 * 
 * /Sets the center big button hide delay.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the video to start again after it has ended.
 * 
 * /Sets whether the video to start again after it has ended.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether if you want to use the built in browser controls. By default player uses Infragistics playback controls. Note that you may have different look and feel across different browsers if you use the built in browser controls.
 * 
 * /Sets whether if you want to use the built in browser controls. By default player uses Infragistics playback controls. Note that you may have different look and feel across different browsers if you use the built in browser controls.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the video player to be in full screen or not. This is not a pure full screen, because browsers do not allow that. It just  100% width and height to the control.
 * 
 * /Sets whether the video player to be in full screen or not. This is not a pure full screen, because browsers do not allow that. It just sets 100% width and height to the control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the video volume. It can be between 0.0 and 1.0.
 * 
 * /Sets the video volume. It can be between 0.0 and 1.0.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the video volume is muted.
 * 
 * /Sets whether the video volume is muted.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets video title.
 * 
 * /Sets video title.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets whether the control seek tool tip will be shown when hovering the video progress bar.
 * 
 * /Sets whether the control seek tool tip will be shown when hovering the video progress bar.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets the format of the video progress label. You should use ${currentTime} to represent current playback position and ${duration} to represent video duration.
 * 
 * /Sets the format of the video progress label. You should use ${currentTime} to represent current playback position and ${duration} to represent video duration.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets an array of bookmarks that will be displayed in the video player control.
 * 
 * /Sets an array of bookmarks that will be displayed in the video player control.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets an array of related videos that will be displayed when video playback has ended.
 * 
 * /Sets an array of related videos that will be displayed when video playback has ended.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets an array of banner objects that will show the banners when the video clip is played.
 * 
 * /Sets an array of banner objects that will show the banners when the video clip is played.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets/Sets an array of commercials objects that will be displayed when the video is playing.
 * 
 * /Sets an array of commercials objects that will be displayed when the video is playing.
 * 
 * 
 * \@optionValue New value to be set.
 * Occurs when video has ended.
 * 
 * Function takes arguments evt and ui.
 * Use ui.source to get the url of the playing video.
 * Use ui.duration to get the video duration in seconds.
 * Occurs when video has ended.
 * 
 * Function takes arguments evt and ui.
 * Use ui.source to get the url of the playing video.
 * Use ui.duration to get the video duration in seconds.
 * 
 * \@optionValue New value to be set.
 * Occurs when video gets playing.
 * 
 * Function takes arguments evt and ui.
 * Use ui.source to get the url of the playing video.
 * Use ui.duration to get the video duration in seconds.
 * Occurs when video gets playing.
 * 
 * Function takes arguments evt and ui.
 * Use ui.source to get the url of the playing video.
 * Use ui.duration to get the video duration in seconds.
 * 
 * \@optionValue New value to be set.
 * Occurs when video is paused.
 * 
 * Function takes arguments evt and ui.
 * Use ui.source to get the url of the playing video.
 * Use ui.duration to get the video duration in seconds.
 * Occurs when video is paused.
 * 
 * Function takes arguments evt and ui.
 * Use ui.source to get the url of the playing video.
 * Use ui.duration to get the video duration in seconds.
 * 
 * \@optionValue New value to be set.
 * Occurs when a chunk of data is buffered.
 * 
 * Function takes arguments evt and ui.
 * Use ui.source to get the url of the playing video.
 * Use ui.buffered to get buffered percentage.
 * Occurs when a chunk of data is buffered.
 * 
 * Function takes arguments evt and ui.
 * Use ui.source to get the url of the playing video.
 * Use ui.buffered to get buffered percentage.
 * 
 * \@optionValue New value to be set.
 * Occurs when video has advanced the playback position.
 * 
 * Function takes arguments evt and ui.
 * Use ui.source to get the url of the playing video.
 * Use ui.currentTime to get current position in the video at which the event was fired.
 * Use ui.duration to get the video duration in seconds.
 * Occurs when video has advanced the playback position.
 * 
 * Function takes arguments evt and ui.
 * Use ui.source to get the url of the playing video.
 * Use ui.currentTime to get current position in the video at which the event was fired.
 * Use ui.duration to get the video duration in seconds.
 * 
 * \@optionValue New value to be set.
 * Occurs when igVideoPlayer is waiting for data from the server.
 * 
 * Function takes arguments evt and ui.
 * Use ui.source to get the url of the playing video.
 * Use ui.currentTime to get current position in the video at which the event was fired.
 * Use ui.duration to get the video duration in seconds.
 * Occurs when igVideoPlayer is waiting for data from the server.
 * 
 * Function takes arguments evt and ui.
 * Use ui.source to get the url of the playing video.
 * Use ui.currentTime to get current position in the video at which the event was fired.
 * Use ui.duration to get the video duration in seconds.
 * 
 * \@optionValue New value to be set.
 * Occurs when the bookmark is hit.
 * 
 * Function takes arguments evt and ui.
 * Use ui.source to get the url of the playing video.
 * Use ui.bookmark to get the bookmark object from the bookmarks array.
 * Use ui.bookmarkElement to get the html element in the DOM.
 * Occurs when the bookmark is hit.
 * 
 * Function takes arguments evt and ui.
 * Use ui.source to get the url of the playing video.
 * Use ui.bookmark to get the bookmark object from the bookmarks array.
 * Use ui.bookmarkElement to get the html element in the DOM.
 * 
 * \@optionValue New value to be set.
 * Occurs when the bookmark is clicked.
 * 
 * Function takes arguments evt and ui.
 * Use ui.bookmark to get the bookmark object from the bookmarks array.
 * Use ui.bookmarkElement to get the html element in the DOM.
 * Occurs when the bookmark is clicked.
 * 
 * Function takes arguments evt and ui.
 * Use ui.bookmark to get the bookmark object from the bookmarks array.
 * Use ui.bookmarkElement to get the html element in the DOM.
 * 
 * \@optionValue New value to be set.
 * Occurs when igVideoPlayer enters full screen mode.
 * 
 * Function takes arguments evt and ui.
 * Use ui.source to get the url of the playing video.
 * Occurs when igVideoPlayer enters full screen mode.
 * 
 * Function takes arguments evt and ui.
 * Use ui.source to get the url of the playing video.
 * 
 * \@optionValue New value to be set.
 * Occurs when igVideoPlayer exits full screen mode.
 * 
 * Function takes arguments evt and ui.
 * Use ui.source to get the url of the playing video.
 * Occurs when igVideoPlayer exits full screen mode.
 * 
 * Function takes arguments evt and ui.
 * Use ui.source to get the url of the playing video.
 * 
 * \@optionValue New value to be set.
 * Occurs when related video is clicked.
 * 
 * Function takes arguments evt and ui.
 * Use ui.relatedVideo to get the relatedVideo object from the relatedVideos array.
 * Use ui.relatedVideoElement to get the relatedVideo html element in the DOM.
 * Occurs when related video is clicked.
 * 
 * Function takes arguments evt and ui.
 * Use ui.relatedVideo to get the relatedVideo object from the relatedVideos array.
 * Use ui.relatedVideoElement to get the relatedVideo html element in the DOM.
 * 
 * \@optionValue New value to be set.
 * Defines the name of the player banner visible event. Fired when the banner has been displayed.
 * 
 * Function takes arguments evt and ui.
 * Use ui.index to get the banner index in the banners array.
 * Use ui.banner to get the banner object from the banners array.
 * Use ui.bannerElement to get the banner html element in the DOM.
 * Defines the name of the player banner visible event. Fired when the banner has been displayed.
 * 
 * Function takes arguments evt and ui.
 * Use ui.index to get the banner index in the banners array.
 * Use ui.banner to get the banner object from the banners array.
 * Use ui.bannerElement to get the banner html element in the DOM.
 * 
 * \@optionValue New value to be set.
 * Occurs when the banner is hidden.
 * 
 * Function takes arguments evt and ui.
 * Use ui.index to get the banner index in the banners array.
 * Use ui.banner to get the banner object from the banners array.
 * Use ui.bannerElement to get the banner html element in the DOM.
 * Occurs when the banner is hidden.
 * 
 * Function takes arguments evt and ui.
 * Use ui.index to get the banner index in the banners array.
 * Use ui.banner to get the banner object from the banners array.
 * Use ui.bannerElement to get the banner html element in the DOM.
 * 
 * \@optionValue New value to be set.
 * Occurs when the banner is clicked.
 * 
 * Function takes arguments evt and ui.
 * Use ui.bannerElement to get the banner html element in the DOM.
 * Occurs when the banner is clicked.
 * 
 * Function takes arguments evt and ui.
 * Use ui.bannerElement to get the banner html element in the DOM.
 * 
 * \@optionValue New value to be set.
 * Occurs when browser does not support HTML 5 video.
 * Occurs when browser does not support HTML 5 video.
 * 
 * \@optionValue New value to be set.
 * @param {string|!IgVideoPlayer} methodName_or_optionLiteral_or_options
 * @param {...!Object|number|string|!IgVideoPlayer|?=} commercial_or_index_or_val_or_scaleFactor_or_optionName_or_options_or_methodParams
 * @return {void|number|!Object|boolean|!Array<?>|(string|number)|string|!Array<!IgVideoPlayerBookmark>|!Array<!IgVideoPlayerRelatedVideo>|!Array<!IgVideoPlayerBanner>|!IgVideoPlayerCommercials|!EndedEvent|!PlayingEvent|!PausedEvent|!BufferingEvent|!ProgressEvent|!WaitingEvent|!BookmarkHitEvent|!BookmarkClickEvent|!EnterFullScreenEvent|!ExitFullScreenEvent|!RelatedVideoClickEvent|!BannerVisibleEvent|!BannerHiddenEvent|!BannerClickEvent|!BrowserNotSupportedEvent|!JQuery|?}
 */
JQuery.prototype.igVideoPlayer = function(methodName_or_optionLiteral_or_options, commercial_or_index_or_val_or_scaleFactor_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgZoombarDefaultZoomWindow() {}
 /** @type {number} */
IgZoombarDefaultZoomWindow.prototype.left;
 /** @type {string} */
IgZoombarDefaultZoomWindow.prototype.width;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function ZoomChangingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ZoomChangingEventUIParam() {}
 /** @type {?} */
ZoomChangingEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function ZoomChangedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ZoomChangedEventUIParam() {}
 /** @type {?} */
ZoomChangedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function ProviderCreatedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ProviderCreatedEventUIParam() {}
 /** @type {?} */
ProviderCreatedEventUIParam.prototype.provider;
 /** @type {?} */
ProviderCreatedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function WindowDragStartingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function WindowDragStartingEventUIParam() {}
 /** @type {?} */
WindowDragStartingEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function WindowDragStartedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function WindowDragStartedEventUIParam() {}
 /** @type {?} */
WindowDragStartedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function WindowDraggingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function WindowDraggingEventUIParam() {}
 /** @type {?} */
WindowDraggingEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function WindowDragEndingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function WindowDragEndingEventUIParam() {}
 /** @type {?} */
WindowDragEndingEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function WindowDragEndedEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function WindowDragEndedEventUIParam() {}
 /** @type {?} */
WindowDragEndedEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function WindowResizingEvent() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function WindowResizingEventUIParam() {}
 /** @type {?} */
WindowResizingEventUIParam.prototype.owner;
/**
 * @record
 * @struct
 */
function IgZoombar() {}
 /** @type {?} */
IgZoombar.prototype.provider;
 /** @type {(string|!Object)} */
IgZoombar.prototype.target;
 /** @type {(string|!Object)} */
IgZoombar.prototype.clone;
 /** @type {(string|number)} */
IgZoombar.prototype.width;
 /** @type {(string|number)} */
IgZoombar.prototype.height;
 /** @type {string} */
IgZoombar.prototype.zoomAction;
 /** @type {number} */
IgZoombar.prototype.zoomWindowMoveDistance;
 /** @type {!IgZoombarDefaultZoomWindow} */
IgZoombar.prototype.defaultZoomWindow;
 /** @type {number} */
IgZoombar.prototype.zoomWindowMinWidth;
 /** @type {number} */
IgZoombar.prototype.hoverStyleAnimationDuration;
 /** @type {number} */
IgZoombar.prototype.windowPanDuration;
 /** @type {number} */
IgZoombar.prototype.tabIndex;
 /** @type {!ZoomChangingEvent} */
IgZoombar.prototype.zoomChanging;
 /** @type {!ZoomChangedEvent} */
IgZoombar.prototype.zoomChanged;
 /** @type {!ProviderCreatedEvent} */
IgZoombar.prototype.providerCreated;
 /** @type {!WindowDragStartingEvent} */
IgZoombar.prototype.windowDragStarting;
 /** @type {!WindowDragStartedEvent} */
IgZoombar.prototype.windowDragStarted;
 /** @type {!WindowDraggingEvent} */
IgZoombar.prototype.windowDragging;
 /** @type {!WindowDragEndingEvent} */
IgZoombar.prototype.windowDragEnding;
 /** @type {!WindowDragEndedEvent} */
IgZoombar.prototype.windowDragEnded;
 /** @type {!WindowResizingEvent} */
IgZoombar.prototype.windowResizing;
 /** @type {!WindowResizedEvent} */
IgZoombar.prototype.windowResized;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function IgZoombarMethods() {}

/**
 * Destroys the Zoombar widget
 * @return {void}
 */
IgZoombarMethods.prototype.destroy = function() {};

/**
 * Returns the main zoombar element
 * @return {void}
 */
IgZoombarMethods.prototype.widget = function() {};

/**
 * Returns the ID of the element the zoombar is initialized on
 * @return {string}
 */
IgZoombarMethods.prototype.id = function() {};

/**
 * Returns the DIV that is the topmost container of the zoombar widget
 * @return {!Element}
 */
IgZoombarMethods.prototype.container = function() {};

/**
 * Returns the element the clone widget is initialized on
 * @return {!Element}
 */
IgZoombarMethods.prototype.clone = function() {};

/**
 * Gets or sets the current zoom window
 * 
 * @param {number=} left     The left parameter of the new zoom window in percentages
 * @param {number=} width     The width parameter of the new zoom window in percentages
 * @return {!Object}
 */
IgZoombarMethods.prototype.zoom = function(left, width) {};

/**
 * @param {string} propertyName
 * @return {!IgZoombarMethods}
 */
JQuery.prototype.data = function(propertyName) {};
/**
 * @record
 * @struct
 */
function ZoombarProviderDefaultSettings() {}
 /** @type {?} */
ZoombarProviderDefaultSettings.prototype.targetObject;
 /** @type {?} */
ZoombarProviderDefaultSettings.prototype.zoomChangedCallback;

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {!ZoombarProviderDefaultSettings} settings
 */
Infragistics.ZoombarProviderDefault = function(settings) {};

/**
 * Will be called before the provider instance is deleted (to unbind jQuery events, etc.)
 * @return {void}
 */
Infragistics.ZoombarProviderDefault.prototype.clean = function() {};

/**
 * Gets basic options for initializing the clone, based on the options the target is initialized with
 * 
 * @param {!Object} options    if the Zoombar has a copy of the options object it'll pass it to the provider
 * @return {void}
 */
Infragistics.ZoombarProviderDefault.prototype.getBaseOpts = function(options) {};

/**
 * Alters specific options so that the the clone is more suitable for its purpose
 * 
 * @param {!Object} options    the base options of the widget obtained from getBaseOpts
 * @return {void}
 */
Infragistics.ZoombarProviderDefault.prototype.cleanOptsForZoom = function(options) {};

/**
 * Will be called by the Zoombar if a clone of the target widget should be created
 * 
 * @param {!Object} container    a jQuery wrapped element to create the clone component in
 * @param {!Object} options    the options that are obtained from cleanOptsForZoom
 * @return {void}
 */
Infragistics.ZoombarProviderDefault.prototype.createClone = function(container, options) {};

/**
 * Returns the provider"s widget name
 * @return {void}
 */
Infragistics.ZoombarProviderDefault.prototype.widgetName = function() {};

/**
 * Returns the target widget width property
 * @return {void}
 */
Infragistics.ZoombarProviderDefault.prototype.targetWidth = function() {};

/**
 * Sets the target widget min window width (to be in sync with the same property of the zoombar)
 * 
 * @param {number} minWidth    a number from 0 to 1 representing the minimal width (i.e. maximal zoom) the zoom window can take as a fraction of the total one
 * @return {void}
 */
Infragistics.ZoombarProviderDefault.prototype.syncMinWidth = function(minWidth) {};

/**
 * Sets the width and height of the clone component
 * 
 * @param {!Object} width    The width to set in pixels or string (px or % -affixed).
 * @param {!Object} height    The height to set in pixels or string (px or % -affixed).
 * @return {void}
 */
Infragistics.ZoombarProviderDefault.prototype.setSize = function(width, height) {};

/**
 * Gets/sets the target object
 * 
 * @param {!Object=} obj    the new target component instance to set
 * @return {void}
 */
Infragistics.ZoombarProviderDefault.prototype.targetObject = function(obj) {};

/**
 * Jshint ignore:line
 * 
 * @param {!Object} a
 * @param {!Object} b
 * @return {void}
 */
Infragistics.ZoombarProviderDefault.prototype.update = function(a, b) {};
 /** @type {?} */
IgniteUIStatic.prototype.ZoombarProviderDefault;

/**
 * @constructor
 * @struct
 * @param {!ZoombarProviderDefaultSettings} settings
 */
Infragistics.ZoombarProviderDataChart = function(settings) {};

/**
 * @return {void}
 */
Infragistics.ZoombarProviderDataChart.prototype.clean = function() {};

/**
 * @param {!Object} options
 * @return {void}
 */
Infragistics.ZoombarProviderDataChart.prototype.getBaseOpts = function(options) {};

/**
 * @param {!Object} options
 * @return {void}
 */
Infragistics.ZoombarProviderDataChart.prototype.cleanOptsForZoom = function(options) {};

/**
 * @param {!Object} container
 * @param {!Object} options
 * @return {void}
 */
Infragistics.ZoombarProviderDataChart.prototype.createClone = function(container, options) {};

/**
 * @return {void}
 */
Infragistics.ZoombarProviderDataChart.prototype.widgetName = function() {};

/**
 * @return {void}
 */
Infragistics.ZoombarProviderDataChart.prototype.targetWidth = function() {};

/**
 * @param {!Object} obj
 * @return {void}
 */
Infragistics.ZoombarProviderDataChart.prototype.targetObject = function(obj) {};

/**
 * @param {!Object} minWidth
 * @return {void}
 */
Infragistics.ZoombarProviderDataChart.prototype.syncMinWidth = function(minWidth) {};

/**
 * @param {!Object} width
 * @param {!Object} height
 * @return {void}
 */
Infragistics.ZoombarProviderDataChart.prototype.setSize = function(width, height) {};

/**
 * @param {!Object} a
 * @param {!Object} b
 * @return {void}
 */
Infragistics.ZoombarProviderDataChart.prototype.update = function(a, b) {};
 /** @type {?} */
IgniteUIStatic.prototype.ZoombarProviderDataChart;

/**
 * Gets a provider class which interfaces the widget that is being zoomed.
 * object Provider class to use. The provider should implement all methods in the $.ig.ZoombarProviderDefault class and is suggested to be extended from it.
 * Sets a provider class which interfaces the widget that is being zoomed.
 * object Provider class to use. The provider should implement all methods in the $.ig.ZoombarProviderDefault class and is suggested to be extended from it.
 * 
 * \@optionValue New value to be set.
 * Gets the element on which the widget the Zoombar is attached to is initialized.
 * object A valid jQuery object, the first element of which is that element.
 * 
 * Sets the element on which the widget the Zoombar is attached to is initialized.
 * object A valid jQuery object, the first element of which is that element.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets how the target widget's clone is rendered inside the Zoombar.
 * object A valid set of properties to initialize the clone with.
 * 
 * Sets how the target widget's clone is rendered inside the Zoombar.
 * object A valid set of properties to initialize the clone with.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the width of the Zoombar.
 * 
 * Sets the width of the Zoombar.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the height of the Zoombar.
 * 
 * Sets the height of the Zoombar.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets when the zoom effect is applied.
 * 
 * Sets when the zoom effect is applied.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the distance (in percents) the zoom window moves when the left or right scroll bar buttons are clicked.
 * 
 * Sets the distance (in percents) the zoom window moves when the left or right scroll bar buttons are clicked.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the default zoom in percentages.
 * 
 * Sets the default zoom in percentages.
 * 
 * 
 * \@optionValue New value to be set.
 * The minimal width the zoom window can have in percentages.
 * 
 * The minimal width the zoom window can have in percentages.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the animation duration (in milliseconds) when hover style is applied or removed from elements.
 * 
 * Sets the animation duration (in milliseconds) when hover style is applied or removed from elements.
 * 
 * 
 * \@optionValue New value to be set.
 * Gets the pan duration (in milliseconds) when the window changes position. Set to 0 for snap.
 * 
 * Sets the pan duration (in milliseconds) when the window changes position. Set to 0 for snap.
 * 
 * 
 * \@optionValue New value to be set.
 * Initial tabIndex for the Zoombar container elements.
 * 
 * Initial tabIndex for the Zoombar container elements.
 * 
 * 
 * \@optionValue New value to be set.
 * Event fired before a zoom action is applied
 * Function takes arguments evt and ui.
 * Use ui.previousZoom.left to get the previous zoom window left position as a fraction of the absolute width of the target
 * Use ui.previousZoom.width to get the previous zoom window width as a fraction of the absolute width of the target
 * Use ui.newZoom.left to get the new zoom window left position as a fraction of the absolute width of the target
 * Use ui.newZoom.width to get the new zoom window width as a fraction of the absolute width of the target
 * Use ui.owner to get reference to igZoombar.
 * Event fired before a zoom action is applied
 * Function takes arguments evt and ui.
 * Use ui.previousZoom.left to get the previous zoom window left position as a fraction of the absolute width of the target
 * Use ui.previousZoom.width to get the previous zoom window width as a fraction of the absolute width of the target
 * Use ui.newZoom.left to get the new zoom window left position as a fraction of the absolute width of the target
 * Use ui.newZoom.width to get the new zoom window width as a fraction of the absolute width of the target
 * Use ui.owner to get reference to igZoombar.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a zoom action is applied.
 * Function takes arguments evt and ui.
 * Use ui.previousZoom.left to get the previous zoom window left position as a fraction of the absolute width of the target
 * Use ui.previousZoom.width to get the previous zoom window width as a fraction of the absolute width of the target
 * Use ui.newZoom.left to get the new zoom window left position as a fraction of the absolute width of the target
 * Use ui.newZoom.width to get the new zoom window width as a fraction of the absolute width of the target
 * Use ui.owner to get reference to igZoombar.
 * Event fired after a zoom action is applied.
 * Function takes arguments evt and ui.
 * Use ui.previousZoom.left to get the previous zoom window left position as a fraction of the absolute width of the target
 * Use ui.previousZoom.width to get the previous zoom window width as a fraction of the absolute width of the target
 * Use ui.newZoom.left to get the new zoom window left position as a fraction of the absolute width of the target
 * Use ui.newZoom.width to get the new zoom window width as a fraction of the absolute width of the target
 * Use ui.owner to get reference to igZoombar.
 * 
 * \@optionValue Define event handler function.
 * Event fired after a provider is created based on the options.provider value. If an instance is passed as a value for the option the event won't fire.
 * Use the event when utilizing a custom provider to assign options such as the zoomed widget's instance so that the provider's API is usable when igZoombar initializes its rendering.
 * Function takes arguments evt and ui.
 * Use ui.provider to get the reference the created provider
 * Use ui.owner to get reference to igZoombar
 * Event fired after a provider is created based on the options.provider value. If an instance is passed as a value for the option the event won't fire.
 * Use the event when utilizing a custom provider to assign options such as the zoomed widget's instance so that the provider's API is usable when igZoombar initializes its rendering.
 * Function takes arguments evt and ui.
 * Use ui.provider to get the reference the created provider
 * Use ui.owner to get reference to igZoombar
 * 
 * \@optionValue Define event handler function.
 * Event fired when the user attempts to drag the zoom window.
 * Function takes arguments evt and ui.
 * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
 * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
 * Use ui.owner to get reference to igZoombar.
 * Event fired when the user attempts to drag the zoom window.
 * Function takes arguments evt and ui.
 * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
 * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
 * Use ui.owner to get reference to igZoombar.
 * 
 * \@optionValue Define event handler function.
 * Event fired when the user starts dragging the zoom window.
 * Function takes arguments evt and ui.
 * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
 * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
 * Use ui.owner to get reference to igZoombar.
 * Event fired when the user starts dragging the zoom window.
 * Function takes arguments evt and ui.
 * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
 * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
 * Use ui.owner to get reference to igZoombar.
 * 
 * \@optionValue Define event handler function.
 * Event fired when the user drags the zoom window.
 * Function takes arguments evt and ui.
 * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
 * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
 * Use ui.owner to get reference to igZoombar.
 * Event fired when the user drags the zoom window.
 * Function takes arguments evt and ui.
 * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
 * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
 * Use ui.owner to get reference to igZoombar.
 * 
 * \@optionValue Define event handler function.
 * Event fired when the user attemtps to stop dragging the zoom window.
 * Function takes arguments evt and ui.
 * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
 * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
 * Use ui.owner to get reference to igZoombar.
 * Event fired when the user attemtps to stop dragging the zoom window.
 * Function takes arguments evt and ui.
 * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
 * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
 * Use ui.owner to get reference to igZoombar.
 * 
 * \@optionValue Define event handler function.
 * Event fired when the user stops dragging the zoom window.
 * Function takes arguments evt and ui.
 * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
 * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
 * Use ui.owner to get reference to igZoombar.
 * Event fired when the user stops dragging the zoom window.
 * Function takes arguments evt and ui.
 * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
 * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
 * Use ui.owner to get reference to igZoombar.
 * 
 * \@optionValue Define event handler function.
 * Event fired when the user resizes the zoom window with the window"s handles.
 * Function takes arguments evt and ui.
 * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
 * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
 * Use ui.owner to get reference to igZoombar.
 * Event fired when the user resizes the zoom window with the window"s handles.
 * Function takes arguments evt and ui.
 * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
 * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
 * Use ui.owner to get reference to igZoombar.
 * 
 * \@optionValue Define event handler function.
 * Event fired after the user resizes the zoom window with the window"s handles.
 * Function takes arguments evt and ui.
 * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
 * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
 * Use ui.owner to get reference to igZoombar.
 * Event fired after the user resizes the zoom window with the window"s handles.
 * Function takes arguments evt and ui.
 * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
 * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
 * Use ui.owner to get reference to igZoombar.
 * 
 * \@optionValue Define event handler function.
 * @param {string|!IgZoombar} methodName_or_optionLiteral_or_options
 * @param {...number|string|!IgZoombar|?=} left_or_optionName_or_options_or_methodParams
 * @return {void|string|!Element|!Object|?|(string|!Object)|(string|number)|number|!IgZoombarDefaultZoomWindow|!ZoomChangingEvent|!ZoomChangedEvent|!ProviderCreatedEvent|!WindowDragStartingEvent|!WindowDragStartedEvent|!WindowDraggingEvent|!WindowDragEndingEvent|!WindowDragEndedEvent|!WindowResizingEvent|!WindowResizedEvent|!JQuery}
 */
JQuery.prototype.igZoombar = function(methodName_or_optionLiteral_or_options, left_or_optionName_or_options_or_methodParams) {};
/**
 * @record
 * @struct
 */
function IgLoader() {}
 /** @type {string} */
IgLoader.prototype.scriptPath;
 /** @type {string} */
IgLoader.prototype.cssPath;
 /** @type {string} */
IgLoader.prototype.resources;
 /** @type {string} */
IgLoader.prototype.theme;
 /** @type {!Function} */
IgLoader.prototype.ready;
 /** @type {string} */
IgLoader.prototype.localePath;
 /** @type {string} */
IgLoader.prototype.locale;
 /** @type {boolean} */
IgLoader.prototype.autoDetectLocale;
 /** @type {string} */
IgLoader.prototype.regional;
 /** @type {!Function} */
IgLoader.prototype.preinit;
 /** @type {?} */
IgniteUIStatic.prototype.OlapUtilities;

/**
 * @param {string} template
 * @param {?} data
 * @param {...?} args
 * @return {string}
 */
IgniteUIStatic.prototype.tmpl = function(template, data, args) {};

/**
 * @param {!IgLoader|!Function|string=} options_or_callback_or_resources
 * @param {!Function=} callback
 * @return {void|?}
 */
IgniteUIStatic.prototype.loader = function(options_or_callback_or_resources, callback) {};
/**
 * @record
 * @struct
 */
function JQueryStatic() {}
 /** @type {!IgniteUIStatic} */
JQueryStatic.prototype.ig;
