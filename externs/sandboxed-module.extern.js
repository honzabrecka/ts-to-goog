/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/sandboxed-module/index.d.ts:
/**
 * @record
 * @struct
 */
function SandboxOptions() {}
 /** @type {!Object} */
SandboxOptions.prototype.requires;
 /** @type {!Object} */
SandboxOptions.prototype.globals;
 /** @type {!Object} */
SandboxOptions.prototype.locals;
 /** @type {!Object} */
SandboxOptions.prototype.sourceTransformers;
 /** @type {boolean} */
SandboxOptions.prototype.singleOnly;
 /** @type {boolean} */
SandboxOptions.prototype.sourceTransformersSingleOnly;
/**
 * @constructor
 * @struct
 */
function SandboxedModule() {}
 /** @type {!Object} */
SandboxedModule.prototype.required;
 /** @type {!Object} */
SandboxedModule.prototype.globals;
 /** @type {!Object} */
SandboxedModule.prototype.locals;
 /** @type {!Object} */
SandboxedModule.prototype.sourceTransformers;
 /** @type {string} */
SandboxedModule.prototype.filename;
 /** @type {string} */
SandboxedModule.prototype.module;
 /** @type {?} */
SandboxedModule.prototype.exports;

/**
 * Returns a new SandboxedModule where moduleId is a regular module path / id as you would normally pass into
 * require(). The new module will be loaded in its own v8 context, but otherwise have access to the normal
 * node.js environment.
 * 
 * @param {string} moduleId the ID of the module to load
 * @param {?=} options the loading options
 * @return {!SandboxedModule}
 */
SandboxedModule.load = function(moduleId, options) {};

/**
 * Identical to {\@link SandboxedModule.load()}, but returns sandboxedModule.exports directly.
 * 
 * @param {string} moduleId the ID of the module to require
 * @param {?=} options the requiring options
 * @return {?}
 */
SandboxedModule.require = function(moduleId, options) {};

/**
 * Sets options globally across all uses of {\@link SandboxedModule.load()} and {\@link SandboxedModule.require()}.
 * This way, a commonly needed require, global, local, or sourceTransformer can be specified once across all
 * sandboxed modules.
 * @param {?} options the loading and requiring default options
 * @return {void}
 */
SandboxedModule.configure = function(options) {};

/**
 * Enables a built-in source transformer by name. Currently, SandboxedModule ships with two built in source
 * transformers:
 *  * "coffee" - Compiles source with CoffeeScript [Enabled by default for backwards compatibility].
 *    Be sure to run require('coffee-script').register() or require('coffee-script/register') as well.
 *  * "istanbul" - Instruments sources via istanbul when istanbul code coverage is running.
 *    For example, if you'd like to use SandboxedModule in conjunction with istanbul, just run
 *    SandboxedModule.registerBuiltInSourceTransformer('istanbul').
 * @param {!String} name The name of the built-in source transformer
 * @return {void}
 */
SandboxedModule.registerBuiltInSourceTransformer = function(name) {};

/* TODO: ExportAssignment in  */
