/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/knockout-transformations/index.d.ts:
/** @const */
var KnockoutTransformations = {};
/**
 * @record
 * @struct
 */
KnockoutTransformations.Mapping = function() {};

/* TODO: CallSignature: KnockoutTransformations */
/**
 * @record
 * @struct
 */
KnockoutTransformations.MappingOption = function() {};
 /** @type {!KnockoutTransformations.Mapping<T, TResult>} */
KnockoutTransformations.MappingOption.prototype.mapping;
 /** @type {function(TResult): void} */
KnockoutTransformations.MappingOption.prototype.disposeItem;
/**
 * @record
 * @struct
 */
KnockoutTransformations.MappingWithDisposeCallbackOption = function() {};
 /** @type {function(T): {mappedValue: TResult, dispose: function(): void}} */
KnockoutTransformations.MappingWithDisposeCallbackOption.prototype.mappingWithDisposeCallback;

/**
 * @template TResult
 * @param {!KnockoutTransformations.Mapping<T, TResult>|!KnockoutTransformations.MappingOption<T, TResult>|!KnockoutTransformations.MappingWithDisposeCallbackOption<T, TResult>} mapping
 * @return {!KnockoutObservableArray<TResult>}
 */
KnockoutObservableArrayFunctions.prototype.map = function(mapping) {};

/**
 * @param {function(T): boolean} predicate
 * @return {!KnockoutObservableArray<T>}
 */
KnockoutObservableArrayFunctions.prototype.filter = function(predicate) {};

/**
 * @param {function(T, function(?): ?): ?} sorter
 * @return {!KnockoutObservableArray<T>}
 */
KnockoutObservableArrayFunctions.prototype.sortBy = function(sorter) {};

/**
 * @param {function(T): string|function(T): !Array<string>|function(T): ?} indexer
 * @return {!KnockoutObservable<!Object<string,!Array<T>>>|!KnockoutObservable<?>}
 */
KnockoutObservableArrayFunctions.prototype.indexBy = function(indexer) {};

/**
 * @param {function(T): string} indexer
 * @return {!KnockoutObservable<!Object<string,T>>}
 */
KnockoutObservableArrayFunctions.prototype.uniqueIndexBy = function(indexer) {};
