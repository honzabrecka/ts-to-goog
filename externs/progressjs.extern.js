/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/progressjs/index.d.ts:
/**
 * @record
 * @struct
 */
function ProgressJsStatic() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ProgressJs() {}

/**
 * Start the progress-bar for defined element(s).
 * @return {!ProgressJs}
 */
ProgressJs.prototype.start = function() {};

/**
 * Set specific percentage to progress-bar.
 * 
 * @param {number} percent Set to specific percentage.
 * @return {!ProgressJs}
 */
ProgressJs.prototype.set = function(percent) {};

/**
 * Set an auto-increase timer for the progress-bar.
 * 
 * @param {number} size The size of increment when timer elapsed.
 * @param {number} millisecond Timer in milliseconds.
 * @return {!ProgressJs}
 */
ProgressJs.prototype.autoIncrease = function(size, millisecond) {};

/**
 * Increase the progress-bar bar specified size. Default size is 1.
 * 
 * @param {number=} size The size of increment.
 * @return {!ProgressJs}
 */
ProgressJs.prototype.increase = function(size) {};

/**
 * End the progress-bar and remove the elements from page.
 * @return {!ProgressJs}
 */
ProgressJs.prototype.end = function() {};

/**
 * Set a single option to progressJs object.
 * 
 * @param {string} option Option key name.
 * @param {string|boolean} value Value of the option.
 * @return {!ProgressJs}
 */
ProgressJs.prototype.setOption = function(option, value) {};

/**
 * Set a group of options to the progressJs object.
 * 
 * @param {!ProgressJsOptions} options Object that contains option keys with values.
 * @return {!ProgressJs}
 */
ProgressJs.prototype.setOptions = function(options) {};

/**
 * Set a callback function for before end of the progress-bar.
 * 
 * @param {function(): ?} providedCallback Callback function.
 * @return {!ProgressJs}
 */
ProgressJs.prototype.onbeforeend = function(providedCallback) {};

/**
 * Set a callback function to call before start the progress-bar.
 * 
 * @param {function(): ?} providedCallback Callback function.
 * @return {!ProgressJs}
 */
ProgressJs.prototype.onbeforestart = function(providedCallback) {};

/**
 * Set callback function to call for each change of progress-bar.
 * 
 * @param {function(string, number): ?} providedCallback Callback function.
 * @return {!ProgressJs}
 */
ProgressJs.prototype.onprogress = function(providedCallback) {};
/**
 * @record
 * @struct
 */
function ProgressJsOptions() {}
 /** @type {string} */
ProgressJsOptions.prototype.theme;
 /** @type {boolean} */
ProgressJsOptions.prototype.overlayMode;
 /** @type {boolean} */
ProgressJsOptions.prototype.considerTransition;
 /** @type {!ProgressJsStatic} */
var progressJs;
