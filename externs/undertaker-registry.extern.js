/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/undertaker-registry/index.d.ts:
/**
 * @constructor
 * @struct
 */
function UndertakerRegistry() {}

/**
 * Returns the task with that name or undefined if no task is registered with that name.
 * Useful for custom task storage.
 * Custom registries can override this method when inheriting from this default registry.
 * @template TTaskFunction
 * @param {string} taskName {string} - Name of task.
 * @return {TTaskFunction}
 */
UndertakerRegistry.prototype.get = function(taskName) {};

/**
 * No-op method that receives the undertaker instance.
 * Useful to set pre-defined tasks using the undertaker.task(taskName, fn) method.
 * Custom registries can override this method when inheriting from this default registry.
 * @param {?} taker {any} - Instance of undertaker.
 * @return {void}
 */
UndertakerRegistry.prototype.init = function(taker) {};

/**
 * Adds a task to the registry.
 * If set modifies a task, it should return the new task so Undertaker can properly maintain metadata for the task.
 * Useful for adding custom behavior to every task as it is registered in the system.
 * Custom registries can override this method when inheriting from this default registry.
 * @template TTaskFunction
 * @param {string} taskName {string} - Name of task.
 * @param {TTaskFunction} fn {UndertakerRegistry.TaskFunction} - Task function.
 * @return {TTaskFunction}
 */
UndertakerRegistry.prototype.set = function(taskName, fn) {};

/**
 * Returns an object listing all tasks in the registry.
 * Necessary to override if the get method is overridden for custom task storage.
 * Custom registries can override this when when inheriting from this default registry.
 * @return {!Object<string,function(!Array<?>): ?>}
 */
UndertakerRegistry.prototype.tasks = function() {};

/* TODO: ExportAssignment in  */
