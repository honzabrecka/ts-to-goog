/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/asana/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var asana = {};
 /** @type {!asana.ClientStatic} */
asana.Client;
/**
 * @record
 * @struct
 */
asana.ClientStatic = function() {};

/* TODO: CallSignature: asana */

/**
 * Creates a new client.
 * @param {!asana.ClientOptions=} options
 * @return {?}
 */
asana.ClientStatic.prototype.create = function(options) {};
/**
 * @extends {asana.DispatcherOptions}
 * @record
 * @struct
 */
asana.ClientOptions = function() {};
 /** @type {(string|number)} */
asana.ClientOptions.prototype.clientId;
 /** @type {string} */
asana.ClientOptions.prototype.clientSecret;
 /** @type {string} */
asana.ClientOptions.prototype.redirectUri;
 /** @type {string} */
asana.ClientOptions.prototype.asanaBaseUrl;
 /** @type {?} */
asana.Client.prototype.dispatcher;
 /** @type {?} */
asana.Client.prototype.attachments;
 /** @type {?} */
asana.Client.prototype.events;
 /** @type {?} */
asana.Client.prototype.projects;
 /** @type {?} */
asana.Client.prototype.stories;
 /** @type {?} */
asana.Client.prototype.tags;
 /** @type {?} */
asana.Client.prototype.tasks;
 /** @type {?} */
asana.Client.prototype.teams;
 /** @type {?} */
asana.Client.prototype.users;
 /** @type {?} */
asana.Client.prototype.workspaces;
 /** @type {?} */
asana.Client.prototype.app;

/**
 * Ensures the client is authorized to make requests. Kicks off the
 * configured Oauth flow, if any.
 * 
 *     authorization is complete.
 * @return {!Bluebird<?>}
 */
asana.Client.prototype.authorize = function() {};

/**
 * Configure the Client to use a user's API Key and then authenticate
 * through HTTP Basic Authentication. This should only be done for testing,
 * as requests using Oauth can provide more security, higher rate limits, and
 * more features.
 * @param {string} apiKey
 * @return {Client}
 */
asana.Client.prototype.useBasicAuth = function(apiKey) {};

/**
 * Configure the client to authenticate using a Personal Access Token.
 * authenticating requests.
 * @param {string} accessToken
 * @return {Client}
 */
asana.Client.prototype.useAccessToken = function(accessToken) {};

/**
 * Configure the client to authenticate via Oauth. Credentials can be
 * supplied, or they can be obtained by running an Oauth flow.
 *     the selected flow.
 * \@option {Function} [flowType]  Type of OauthFlow to use to obtain user
 *     authorization. Defaults to autodetect based on environment.
 * \@option {Object} [credentials] Credentials to use; no flow required to
 *     obtain authorization. This object should at a minimum contain an
 *     `access_token` string field.
 * @param {!asana.auth.OauthAuthenticatorOptions=} options
 * @return {Client}
 */
asana.Client.prototype.useOauth = function(options) {};
 /** @type {!asana.DispatcherStatic} */
asana.Dispatcher;
/**
 * @record
 * @struct
 */
asana.DispatcherStatic = function() {};

/* TODO: ConstructSignature: asana */
 /** @type {string} */
asana.DispatcherStatic.prototype.API_PATH;

/**
 * Default handler for requests that are considered unauthorized.
 * Requests that the authenticator try to refresh its credentials if
 * possible.
 * @return {!Bluebird<boolean>}
 */
asana.DispatcherStatic.prototype.maybeReauthorize = function() {};
/**
 * @record
 * @struct
 */
asana.DispatcherOptions = function() {};
 /** @type {!asana.auth.Authenticator} */
asana.DispatcherOptions.prototype.authenticator;
 /** @type {boolean} */
asana.DispatcherOptions.prototype.retryOnRateLimit;
 /** @type {function(): (boolean|!Bluebird<boolean>)} */
asana.DispatcherOptions.prototype.handleUnauthorized;
 /** @type {string} */
asana.DispatcherOptions.prototype.requestTimeout;
 /** @type {string} */
asana.Dispatcher.prototype.asanaBaseUrl;
 /** @type {boolean} */
asana.Dispatcher.prototype.retryOnRateLimit;
 /** @type {function(): (boolean|!Bluebird<boolean>)} */
asana.Dispatcher.prototype.handleUnauthorized;
 /** @type {number} */
asana.Dispatcher.prototype.requestTimeout;

/**
 * Creates an Asana API Url by concatenating the ROOT_URL with path provided.
 * @param {string} path
 * @return {string}
 */
asana.Dispatcher.prototype.url = function(path) {};

/**
 * Configure the authentication mechanism to use.
 * @param {!asana.auth.Authenticator} authenticator
 * @return {Dispatcher}
 */
asana.Dispatcher.prototype.setAuthenticator = function(authenticator) {};

/**
 * Ensure the dispatcher is authorized to make requests. Call this before
 * making any API requests.
 * 
 *     there was a problem authorizing.
 * @return {!Bluebird<void>}
 */
asana.Dispatcher.prototype.authorize = function() {};

/**
 * Dispatches a request to the Asana API. The request parameters are passed to
 * the request module.
 * @param {?} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<?>}
 */
asana.Dispatcher.prototype.dispatch = function(params, dispatchOptions) {};

/**
 * Dispatches a GET request to the Asana API.
 *     response. See `dispatch`.
 * @param {string} path
 * @param {?=} query
 * @param {?=} dispatchOptions
 * @return {!Bluebird<?>}
 */
asana.Dispatcher.prototype.get = function(path, query, dispatchOptions) {};

/**
 * Dispatches a POST request to the Asana API.
 *     response. See `dispatch`.
 * @param {string} path
 * @param {?} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<?>}
 */
asana.Dispatcher.prototype.post = function(path, data, dispatchOptions) {};

/**
 * Dispatches a PUT request to the Asana API.
 *     response. See `dispatch`.
 * @param {string} path
 * @param {?} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<?>}
 */
asana.Dispatcher.prototype.put = function(path, data, dispatchOptions) {};

/**
 * Dispatches a DELETE request to the Asana API.
 *     response. See `dispatch`.
 * @param {string} path
 * @param {?=} dispatchOptions
 * @return {!Bluebird<?>}
 */
asana.Dispatcher.prototype.delete = function(path, dispatchOptions) {};
/** @const */
asana.auth = {};
 /** @type {!asana.auth.BasicAuthenticatorStatic} */
asana.auth.BasicAuthenticator;
/**
 * @record
 * @struct
 */
asana.auth.BasicAuthenticatorStatic = function() {};

/* TODO: ConstructSignature: asana.auth */

/**
 *     information using the stored credentials.
 * @param {!asana.auth.BasicAuthenticatorRequest} request
 * @return {!asana.auth.BasicAuthenticatorRequest}
 */
asana.auth.BasicAuthenticator.prototype.authenticateRequest = function(request) {};
/**
 * @record
 * @struct
 */
asana.auth.BasicAuthenticatorRequest = function() {};
 /** @type {{username: string, password: string}} */
asana.auth.BasicAuthenticatorRequest.prototype.auth;
 /** @type {!asana.auth.OauthAuthenticatorStatic} */
asana.auth.OauthAuthenticator;
/**
 * @record
 * @struct
 */
asana.auth.OauthAuthenticatorStatic = function() {};

/* TODO: ConstructSignature: asana.auth */
/**
 * @record
 * @struct
 */
asana.auth.OauthAuthenticatorOptions = function() {};
 /** @type {!asana.auth.FlowType} */
asana.auth.OauthAuthenticatorOptions.prototype.flowType;
 /** @type {(string|!asana.auth.Credentials)} */
asana.auth.OauthAuthenticatorOptions.prototype.credentials;
/**
 * @record
 * @struct
 */
asana.auth.Credentials = function() {};
 /** @type {string} */
asana.auth.Credentials.prototype.access_token;
 /** @type {string} */
asana.auth.Credentials.prototype.refresh_token;

/**
 *     information using the stored credentials.
 * @param {!asana.auth.OauthAuthenticatorRequest} request
 * @return {!asana.auth.OauthAuthenticatorRequest}
 */
asana.auth.OauthAuthenticator.prototype.authenticateRequest = function(request) {};
/**
 * @record
 * @struct
 */
asana.auth.OauthAuthenticatorRequest = function() {};
 /** @type {{Authorization: string}} */
asana.auth.OauthAuthenticatorRequest.prototype.headers;
/**
 * @record
 * @struct
 */
asana.auth.Authenticator = function() {};

/**
 * Establishes credentials.
 * 
 *     completed and `authenticateRequest` calls can expect to succeed.
 * @return {!Bluebird<void>}
 */
asana.auth.Authenticator.prototype.establishCredentials = function() {};

/**
 * Attempts to refresh credentials, if possible, given the current credentials.
 * 
 *     established and `authenticateRequests` can expect to succeed, else
 *     resolves to `false`.
 * @return {!Bluebird<boolean>}
 */
asana.auth.Authenticator.prototype.refreshCredentials = function() {};
 /** @type {!asana.auth.AppStatic} */
asana.auth.App;
/**
 * @record
 * @struct
 */
asana.auth.AppStatic = function() {};

/* TODO: ConstructSignature: asana.auth */
/**
 * @extends {asana.auth.AsanaAuthorizeUrlOptions}
 * @record
 * @struct
 */
asana.auth.AppOptions = function() {};
 /** @type {(string|number)} */
asana.auth.AppOptions.prototype.clientId;
 /** @type {string} */
asana.auth.AppOptions.prototype.clientSecret;
 /** @type {string} */
asana.auth.AppOptions.prototype.scope;
 /** @type {string} */
asana.auth.App.prototype.scope;
 /** @type {string} */
asana.auth.App.prototype.asanaBaseUrl;

/**
 * \@option {String} asanaBaseUrl
 * \@option {String} redirectUri
 * @param {!asana.auth.AsanaAuthorizeUrlOptions=} options
 * @return {string}
 */
asana.auth.App.prototype.asanaAuthorizeUrl = function(options) {};

/**
 * \@option {String} asanaBaseUrl
 * \@option {String} redirectUri
 * @param {!asana.auth.AsanaAuthorizeUrlOptions=} options
 * @return {string}
 */
asana.auth.App.prototype.asanaTokenUrl = function(options) {};

/**
 * \@option {String} asanaBaseUrl
 * \@option {String} redirectUri
 *     used for API access, as well as a `refresh_token` which can be stored
 *     to get a new access token without going through the flow again.
 * @param {string} code
 * @param {!asana.auth.AsanaAuthorizeUrlOptions=} options
 * @return {!Bluebird<!asana.auth.Credentials>}
 */
asana.auth.App.prototype.accessTokenFromCode = function(code, options) {};

/**
 * \@option {String} asanaBaseUrl
 * \@option {String} redirectUri
 *     used for API access.
 * @param {string} refreshToken
 * @param {!asana.auth.AsanaAuthorizeUrlOptions} options
 * @return {!Bluebird<!asana.auth.Credentials>}
 */
asana.auth.App.prototype.accessTokenFromRefreshToken = function(refreshToken, options) {};
/**
 * @record
 * @struct
 */
asana.auth.AsanaAuthorizeUrlOptions = function() {};
 /** @type {string} */
asana.auth.AsanaAuthorizeUrlOptions.prototype.redirectUri;
 /** @type {string} */
asana.auth.AsanaAuthorizeUrlOptions.prototype.asanaBaseUrl;
 /** @type {!asana.auth.OauthErrorStatic} */
asana.auth.OauthError;
/**
 * @record
 * @struct
 */
asana.auth.OauthErrorStatic = function() {};

/* TODO: ConstructSignature: asana.auth */
/**
 * @record
 * @struct
 */
asana.auth.OauthErrorOptions = function() {};
 /** @type {string} */
asana.auth.OauthErrorOptions.prototype.error;
 /** @type {string} */
asana.auth.OauthErrorOptions.prototype.error_uri;
 /** @type {string} */
asana.auth.OauthErrorOptions.prototype.error_description;

/**
 * Auto-detects the type of Oauth flow to use that's appropriate to the
 * environment.
 * 
 *     appropriate type could be determined.
 * @param {?} env
 * @return {!Function}
 */
asana.auth.autoDetect = function(env) {};
 /** @type {!asana.auth.RedirectFlowStatic} */
asana.auth.RedirectFlow;
/**
 * @extends {asana.auth.FlowType}
 * @record
 * @struct
 */
asana.auth.RedirectFlowStatic = function() {};

/* TODO: ConstructSignature: asana.auth */
 /** @type {!asana.auth.PopupFlowStatic} */
asana.auth.PopupFlow;
/**
 * @extends {asana.auth.FlowType}
 * @record
 * @struct
 */
asana.auth.PopupFlowStatic = function() {};

/* TODO: ConstructSignature: asana.auth */

/**
 * @param {number} popupWidth
 * @param {number} popupHeight
 * @return {void}
 */
asana.auth.PopupFlow.prototype._popupParams = function(popupWidth, popupHeight) {};

/**
 * @return {void}
 */
asana.auth.PopupFlow.prototype.runReceiver = function() {};
 /** @type {!asana.auth.NativeFlowStatic} */
asana.auth.NativeFlow;
/**
 * @extends {asana.auth.FlowType}
 * @record
 * @struct
 */
asana.auth.NativeFlowStatic = function() {};

/* TODO: ConstructSignature: asana.auth */

/**
 * Run the Oauth flow, prompting the user to go to the authorization URL
 * and enter the code it displays when finished.
 * 
 *     `access_token` and `refresh_token`.
 * @return {void}
 */
asana.auth.NativeFlow.prototype.run = function() {};

/**
 *     used for API access, as well as a `refresh_token` which can be stored
 *     to get a new access token without going through the flow again.
 * @param {string} code
 * @return {void}
 */
asana.auth.NativeFlow.prototype.accessToken = function(code) {};

/**
 *     that can be stored in the future to create a client without going
 *     through the Oauth flow.
 * @param {string} url
 * @return {?}
 */
asana.auth.NativeFlow.prototype.promptForCode = function(url) {};
 /** @type {!asana.auth.ChromeExtensionFlowStatic} */
asana.auth.ChromeExtensionFlow;
/**
 * @extends {asana.auth.FlowType}
 * @record
 * @struct
 */
asana.auth.ChromeExtensionFlowStatic = function() {};

/* TODO: ConstructSignature: asana.auth */

/**
 * Runs the receiver code to send the Oauth result to the requesting tab.
 * @return {void}
 */
asana.auth.ChromeExtensionFlow.prototype.runReceiver = function() {};
 /** @type {!asana.auth.BaseBrowserFlowStatic} */
asana.auth.BaseBrowserFlow;
/**
 * @extends {asana.auth.FlowType}
 * @record
 * @struct
 */
asana.auth.BaseBrowserFlowStatic = function() {};

/* TODO: ConstructSignature: asana.auth */

/**
 *     to authorize the app.
 *     i.e. the user has been navigated to a page requesting authorization.
 * @param {string} authUrl
 * @param {string} state
 * @return {?}
 */
asana.auth.BaseBrowserFlow.prototype.startAuthorization = function(authUrl, state) {};

/**
 * @param {string} state
 * @return {void}
 */
asana.auth.BaseBrowserFlow.prototype.finishAuthorization = function(state) {};

/**
 * @return {string}
 */
asana.auth.BaseBrowserFlow.prototype.receiverUrl = function() {};

/**
 * @return {string}
 */
asana.auth.BaseBrowserFlow.prototype.asanaBaseUrl = function() {};

/**
 * @return {string}
 */
asana.auth.BaseBrowserFlow.prototype.getStateParam = function() {};
/**
 * @record
 * @struct
 */
asana.auth.FlowType = function() {};

/* TODO: ConstructSignature: asana.auth */
/**
 * @record
 * @struct
 */
asana.auth.Flow = function() {};

/**
 * @return {string}
 */
asana.auth.Flow.prototype.authorizeUrl = function() {};

/**
 * Run the appropriate parts of the Oauth flow, attempting to establish user
 * authorization.
 * @return {void}
 */
asana.auth.Flow.prototype.run = function() {};
/** @const */
asana.errors = {};

/**
 * @constructor
 * @struct
 * @param {?} message
 */
asana.errors.AsanaError = function(message) {};
 /** @type {number} */
asana.errors.AsanaError.prototype.code;
 /** @type {?} */
asana.errors.AsanaError.prototype.value;

/**
 * @constructor
 * @struct
 * @param {?} value
 */
asana.errors.Forbidden = function(value) {};

/**
 * @constructor
 * @struct
 * @param {?} value
 */
asana.errors.InvalidRequest = function(value) {};

/**
 * @constructor
 * @struct
 * @param {?} value
 */
asana.errors.NoAuthorization = function(value) {};

/**
 * @constructor
 * @struct
 * @param {?} value
 */
asana.errors.NotFound = function(value) {};

/**
 * @constructor
 * @struct
 * @param {?} value
 */
asana.errors.RateLimitEnforced = function(value) {};

/**
 * @constructor
 * @struct
 * @param {?} value
 */
asana.errors.ServerError = function(value) {};
/** @const */
asana.resources = {};
/**
 * @record
 * @struct
 */
asana.resources.AttachmentsStatic = function() {};

/* TODO: ConstructSignature: asana.resources */
/** @const */
asana.resources.Attachments = {};
/**
 * @record
 * @struct
 */
asana.resources.Attachments.Type = function() {};
 /** @type {string} */
asana.resources.Attachments.Type.prototype.created_at;
 /** @type {string} */
asana.resources.Attachments.Type.prototype.permanent_url;
 /** @type {string} */
asana.resources.Attachments.Type.prototype.download_url;
 /** @type {string} */
asana.resources.Attachments.Type.prototype.view_url;
 /** @type {string} */
asana.resources.Attachments.Type.prototype.host;
 /** @type {?} */
asana.resources.Attachments.Type.prototype.parent;
 /** @type {!asana.resources.AttachmentsStatic} */
asana.resources.Attachments;

/**
 * * Returns the full record for a single attachment.
 *   * \@param {Number} attachment Globally unique identifier for the attachment.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The requested resource
 * @param {number} attachment
 * @param {!asana.resources.Params=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Attachments.Type>}
 */
asana.resources.Attachments.prototype.findById = function(attachment, params, dispatchOptions) {};

/**
 * * Returns the compact records for all attachments on the task.
 *   * \@param {Number} task Globally unique identifier for the task.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} task
 * @param {!asana.resources.PaginationParams=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<!asana.resources.Attachments.Type>>}
 */
asana.resources.Attachments.prototype.findByTask = function(task, params, dispatchOptions) {};
/**
 * @record
 * @struct
 */
asana.resources.EventsStatic = function() {};

/* TODO: ConstructSignature: asana.resources */
 /** @type {!asana.resources.EventsStatic} */
asana.resources.Events;
/**
 * @record
 * @struct
 */
asana.resources.ProjectsStatic = function() {};

/* TODO: ConstructSignature: asana.resources */
/** @const */
asana.resources.Projects = {};
/**
 * @record
 * @struct
 */
asana.resources.Projects.Type = function() {};
 /** @type {string} */
asana.resources.Projects.Type.prototype.created_at;
 /** @type {string} */
asana.resources.Projects.Type.prototype.modified_at;
 /** @type {string} */
asana.resources.Projects.Type.prototype.due_date;
 /** @type {!asana.resources.Projects.Status} */
asana.resources.Projects.Type.prototype.current_status;
 /** @type {boolean} */
asana.resources.Projects.Type.prototype.public;
 /** @type {boolean} */
asana.resources.Projects.Type.prototype.archived;
 /** @type {string} */
asana.resources.Projects.Type.prototype.notes;
 /** @type {string} */
asana.resources.Projects.Type.prototype.color;
 /** @type {?} */
asana.resources.Projects.Type.prototype.workspace;
 /** @type {?} */
asana.resources.Projects.Type.prototype.team;
 /** @type {!Array<?>} */
asana.resources.Projects.Type.prototype.members;
 /** @type {!Array<?>} */
asana.resources.Projects.Type.prototype.followers;
/**
 * @record
 * @struct
 */
asana.resources.Projects.CreateParams = function() {};
 /** @type {string} */
asana.resources.Projects.CreateParams.prototype.name;
 /** @type {number} */
asana.resources.Projects.CreateParams.prototype.team;
 /** @type {boolean} */
asana.resources.Projects.CreateParams.prototype.public;
 /** @type {string} */
asana.resources.Projects.CreateParams.prototype.due_date;
 /** @type {string} */
asana.resources.Projects.CreateParams.prototype.notes;
 /** @type {string} */
asana.resources.Projects.CreateParams.prototype.color;
/**
 * @record
 * @struct
 */
asana.resources.Projects.FollowersParams = function() {};
 /** @type {!Array<(string|number)>} */
asana.resources.Projects.FollowersParams.prototype.followers;
/**
 * @record
 * @struct
 */
asana.resources.Projects.MembersParams = function() {};
 /** @type {!Array<(string|number)>} */
asana.resources.Projects.MembersParams.prototype.members;
/**
 * @record
 * @struct
 */
asana.resources.Projects.Status = function() {};
 /** @type {string} */
asana.resources.Projects.Status.prototype.color;
 /** @type {string} */
asana.resources.Projects.Status.prototype.text;
 /** @type {string} */
asana.resources.Projects.Status.prototype.html_text;
 /** @type {string} */
asana.resources.Projects.Status.prototype.modified_at;
 /** @type {?} */
asana.resources.Projects.Status.prototype.author;
/**
 * @extends {asana.resources.PaginationParams}
 * @record
 * @struct
 */
asana.resources.Projects.FindAllParams = function() {};
 /** @type {number} */
asana.resources.Projects.FindAllParams.prototype.team;
 /** @type {boolean} */
asana.resources.Projects.FindAllParams.prototype.archived;
/**
 * @extends {asana.resources.PaginationParams}
 * @record
 * @struct
 */
asana.resources.Projects.FindByParams = function() {};
 /** @type {boolean} */
asana.resources.Projects.FindByParams.prototype.archived;
 /** @type {!asana.resources.ProjectsStatic} */
asana.resources.Projects;

/**
 * * Creates a new project in a workspace or team.
 * *
 * * Every project is required to be created in a specific workspace or
 * * organization, and this cannot be changed once set. Note that you can use
 * * the `workspace` parameter regardless of whether or not it is an
 * * organization.
 * *
 * * If the workspace for your project _is_ an organization, you must also
 * * supply a `team` to share the project with.
 * *
 * * Returns the full record of the newly created project.
 *   * \@param {Object} data Data for the request
 *   * \@param {String} data.workspace The workspace or organization to create the project in.
 *   * \@param {String} [data.team] If creating in an organization, the specific team to create the
 *   * project in.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {?} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Projects.Type>}
 */
asana.resources.Projects.prototype.create = function(data, dispatchOptions) {};

/**
 * * If the workspace for your project _is_ an organization, you must also
 * * supply a `team` to share the project with.
 * *
 * * Returns the full record of the newly created project.
 *   * \@param {Number} workspace The workspace or organization to create the project in.
 *   * \@param {Object} data Data for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} workspace
 * @param {!asana.resources.Projects.CreateParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Projects.Type>}
 */
asana.resources.Projects.prototype.createInWorkspace = function(workspace, data, dispatchOptions) {};

/**
 * * Creates a project shared with the given team.
 * *
 * * Returns the full record of the newly created project.
 *   * \@param {Number} team The team to create the project in.
 *   * \@param {Object} data Data for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} team
 * @param {!asana.resources.Projects.CreateParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Projects.Type>}
 */
asana.resources.Projects.prototype.createInTeam = function(team, data, dispatchOptions) {};

/**
 * * Returns the complete project record for a single project.
 *   * \@param {Number} project The project to get.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The requested resource
 * @param {number} project
 * @param {!asana.resources.Params=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Projects.Type>}
 */
asana.resources.Projects.prototype.findById = function(project, params, dispatchOptions) {};

/**
 * * A specific, existing project can be updated by making a PUT request on the
 * * URL for that project. Only the fields provided in the `data` block will be
 * * updated; any unspecified fields will remain unchanged.
 * *
 * * When using this method, it is best to specify only those fields you wish
 * * to change, or else you may overwrite changes made by another user since
 * * you last retrieved the task.
 * *
 * * Returns the complete updated project record.
 *   * \@param {Number} project The project to update.
 *   * \@param {Object} data Data for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} project
 * @param {!asana.resources.Projects.CreateParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Projects.Type>}
 */
asana.resources.Projects.prototype.update = function(project, data, dispatchOptions) {};

/**
 * * A specific, existing project can be deleted by making a DELETE request
 * * on the URL for that project.
 * *
 * * Returns an empty data record.
 *   * \@param {Number} project The project to delete.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} project
 * @param {?=} dispatchOptions
 * @return {!Bluebird<void>}
 */
asana.resources.Projects.prototype.delete = function(project, dispatchOptions) {};

/**
 * * Returns the compact project records for some filtered set of projects.
 * * Use one or more of the parameters provided to filter the projects returned.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {String} [params.workspace] The workspace or organization to filter projects on.
 *   * \@param {String} [params.team] The team to filter projects on.
 *   * \@param {Boolean} [params.archived] Only return projects whose `archived` field takes on the value of
 *   * this parameter.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {!asana.resources.Projects.FindAllParams=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<!asana.resources.Projects.Type>>}
 */
asana.resources.Projects.prototype.findAll = function(params, dispatchOptions) {};

/**
 * * Returns the compact project records for all projects in the workspace.
 *   * \@param {Number} workspace The workspace or organization to find projects in.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Boolean} [params.archived] Only return projects whose `archived` field takes on the value of
 *   * this parameter.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} workspace
 * @param {!asana.resources.Projects.FindByParams=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<!asana.resources.Projects.Type>>}
 */
asana.resources.Projects.prototype.findByWorkspace = function(workspace, params, dispatchOptions) {};

/**
 * * Returns the compact project records for all projects in the team.
 *   * \@param {Number} team The team to find projects in.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Boolean} [params.archived] Only return projects whose `archived` field takes on the value of
 *   * this parameter.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} team
 * @param {!asana.resources.Projects.FindByParams=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<!asana.resources.Projects.Type>>}
 */
asana.resources.Projects.prototype.findByTeam = function(team, params, dispatchOptions) {};

/**
 * * Returns compact records for all sections in the specified project.
 *   * \@param {Number} project The project to get sections from.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} project
 * @param {!asana.resources.PaginationParams=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<!asana.resources.Tasks.Type>>}
 */
asana.resources.Projects.prototype.sections = function(project, params, dispatchOptions) {};

/**
 * * Returns the compact task records for all tasks within the given project,
 * * ordered by their priority within the project. Tasks can exist in more than one project at a time.
 *   * \@param {Number} project The project in which to search for tasks.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} project
 * @param {!asana.resources.PaginationParams=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<!asana.resources.Tasks.Type>>}
 */
asana.resources.Projects.prototype.tasks = function(project, params, dispatchOptions) {};

/**
 * * Adds the specified list of users as followers to the project. Followers are a subset of members, therefore if
 * * the users are not already members of the project they will also become members as a result of this operation.
 * * Returns the updated project record.
 *   * \@param {Number} project The project to add followers to.
 *   * \@param {Object} data Data for the request
 *   * \@param {Array} data.followers An array of followers to add to the project.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} project
 * @param {!asana.resources.Projects.FollowersParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Projects.Type>}
 */
asana.resources.Projects.prototype.addFollowers = function(project, data, dispatchOptions) {};

/**
 * * Removes the specified list of users from following the project, this will not affect project membership status.
 * * Returns the updated project record.
 *   * \@param {Number} project The project to remove followers from.
 *   * \@param {Object} data Data for the request
 *   * \@param {Array} data.followers An array of followers to remove from the project.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} project
 * @param {!asana.resources.Projects.FollowersParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Projects.Type>}
 */
asana.resources.Projects.prototype.removeFollowers = function(project, data, dispatchOptions) {};

/**
 * * Adds the specified list of users as members of the project. Returns the updated project record.
 *   * \@param {Number} project The project to add members to.
 *   * \@param {Object} data Data for the request
 *   * \@param {Array} data.members An array of members to add to the project.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} project
 * @param {!asana.resources.Projects.MembersParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Projects.Type>}
 */
asana.resources.Projects.prototype.addMembers = function(project, data, dispatchOptions) {};

/**
 * * Removes the specified list of members from the project. Returns the updated project record.
 *   * \@param {Number} project The project to remove members from.
 *   * \@param {Object} data Data for the request
 *   * \@param {Array} data.members An array of members to remove from the project.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} project
 * @param {!asana.resources.Projects.MembersParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Projects.Type>}
 */
asana.resources.Projects.prototype.removeMembers = function(project, data, dispatchOptions) {};
/**
 * @record
 * @struct
 */
asana.resources.StoriesStatic = function() {};

/* TODO: ConstructSignature: asana.resources */
/** @const */
asana.resources.Stories = {};
/**
 * @record
 * @struct
 */
asana.resources.Stories.ShortType = function() {};
 /** @type {string} */
asana.resources.Stories.ShortType.prototype.created_at;
 /** @type {?} */
asana.resources.Stories.ShortType.prototype.created_by;
 /** @type {string} */
asana.resources.Stories.ShortType.prototype.type;
 /** @type {string} */
asana.resources.Stories.ShortType.prototype.text;
/**
 * @extends {asana.resources.Stories.ShortType}
 * @record
 * @struct
 */
asana.resources.Stories.Type = function() {};
 /** @type {string} */
asana.resources.Stories.Type.prototype.html_text;
 /** @type {string} */
asana.resources.Stories.Type.prototype.source;
 /** @type {?} */
asana.resources.Stories.Type.prototype.target;
 /** @type {!Array<!asana.resources.Stories.Type>} */
asana.resources.Stories.Type.prototype.hearts;
 /** @type {!asana.resources.StoriesStatic} */
asana.resources.Stories;

/**
 * * Returns the compact records for all stories on the task.
 *   * \@param {Number} task Globally unique identifier for the task.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} task
 * @param {!asana.resources.PaginationParams=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<!asana.resources.Stories.Type>>}
 */
asana.resources.Stories.prototype.findByTask = function(task, params, dispatchOptions) {};

/**
 * * Returns the full record for a single story.
 *   * \@param {Number} story Globally unique identifier for the story.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The requested resource
 * @param {number} story
 * @param {!asana.resources.Params=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Stories.Type>}
 */
asana.resources.Stories.prototype.findById = function(story, params, dispatchOptions) {};

/**
 * * Adds a comment to a task. The comment will be authored by the
 * * currently authenticated user, and timestamped when the server receives
 * * the request.
 * *
 * * Returns the full record for the new story added to the task.
 *   * \@param {Number} task Globally unique identifier for the task.
 *   * \@param {Object} data Data for the request
 *   * \@param {String} data.text The plain text of the comment to add.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} task
 * @param {?} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<!asana.resources.Stories.ShortType>>}
 */
asana.resources.Stories.prototype.createOnTask = function(task, data, dispatchOptions) {};
/**
 * @record
 * @struct
 */
asana.resources.TagsStatic = function() {};

/* TODO: ConstructSignature: asana.resources */
/** @const */
asana.resources.Tags = {};
/**
 * @record
 * @struct
 */
asana.resources.Tags.Type = function() {};
 /** @type {string} */
asana.resources.Tags.Type.prototype.created_at;
 /** @type {string} */
asana.resources.Tags.Type.prototype.notes;
 /** @type {?} */
asana.resources.Tags.Type.prototype.workspace;
 /** @type {string} */
asana.resources.Tags.Type.prototype.color;
 /** @type {!Array<?>} */
asana.resources.Tags.Type.prototype.followers;
/**
 * @extends {asana.resources.PaginationParams}
 * @record
 * @struct
 */
asana.resources.Tags.FindAllParams = function() {};
 /** @type {number} */
asana.resources.Tags.FindAllParams.prototype.team;
 /** @type {boolean} */
asana.resources.Tags.FindAllParams.prototype.archived;
 /** @type {!asana.resources.TagsStatic} */
asana.resources.Tags;

/**
 * * Creates a new tag in a workspace or organization.
 * *
 * * Every tag is required to be created in a specific workspace or
 * * organization, and this cannot be changed once set. Note that you can use
 * * the `workspace` parameter regardless of whether or not it is an
 * * organization.
 * *
 * * Returns the full record of the newly created tag.
 *   * \@param {Object} data Data for the request
 *   * \@param {String} data.workspace The workspace or organization to create the tag in.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {?} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Tags.Type>}
 */
asana.resources.Tags.prototype.create = function(data, dispatchOptions) {};

/**
 * * Creates a new tag in a workspace or organization.
 * *
 * * Every tag is required to be created in a specific workspace or
 * * organization, and this cannot be changed once set. Note that you can use
 * * the `workspace` parameter regardless of whether or not it is an
 * * organization.
 * *
 * * Returns the full record of the newly created tag.
 *   * \@param {Number} workspace The workspace or organization to create the tag in.
 *   * \@param {Object} data Data for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} workspace
 * @param {!asana.resources.Tags.Type} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Tags.Type>}
 */
asana.resources.Tags.prototype.createInWorkspace = function(workspace, data, dispatchOptions) {};

/**
 * * Returns the complete tag record for a single tag.
 *   * \@param {Number} tag The tag to get.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The requested resource
 * @param {number} tag
 * @param {!asana.resources.Params=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Tags.Type>}
 */
asana.resources.Tags.prototype.findById = function(tag, params, dispatchOptions) {};

/**
 * * Updates the properties of a tag. Only the fields provided in the `data`
 * * block will be updated; any unspecified fields will remain unchanged.
 * *
 * * When using this method, it is best to specify only those fields you wish
 * * to change, or else you may overwrite changes made by another user since
 * * you last retrieved the task.
 * *
 * * Returns the complete updated tag record.
 *   * \@param {Number} tag The tag to update.
 *   * \@param {Object} data Data for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} tag
 * @param {!asana.resources.Tags.Type} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Tags.Type>}
 */
asana.resources.Tags.prototype.update = function(tag, data, dispatchOptions) {};

/**
 * * A specific, existing tag can be deleted by making a DELETE request
 * * on the URL for that tag.
 * *
 * * Returns an empty data record.
 *   * \@param {Number} tag The tag to delete.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} tag
 * @param {?=} dispatchOptions
 * @return {!Bluebird<void>}
 */
asana.resources.Tags.prototype.delete = function(tag, dispatchOptions) {};

/**
 * * Returns the compact tag records for some filtered set of tags.
 * * Use one or more of the parameters provided to filter the tags returned.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {String} [params.workspace] The workspace or organization to filter tags on.
 *   * \@param {String} [params.team] The team to filter tags on.
 *   * \@param {Boolean} [params.archived] Only return tags whose `archived` field takes on the value of
 *   * this parameter.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {!asana.resources.Tags.FindAllParams=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<!asana.resources.Tags.Type>>}
 */
asana.resources.Tags.prototype.findAll = function(params, dispatchOptions) {};

/**
 * * Returns the compact tag records for all tags in the workspace.
 *   * \@param {Number} workspace The workspace or organization to find tags in.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} workspace
 * @param {!asana.resources.PaginationParams=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<!asana.resources.Tags.Type>>}
 */
asana.resources.Tags.prototype.findByWorkspace = function(workspace, params, dispatchOptions) {};

/**
 * * Returns the compact task records for all tasks with the given tag.
 * * Tasks can have more than one tag at a time.
 *   * \@param {Number} tag The tag to fetch tasks from.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} tag
 * @param {!asana.resources.PaginationParams=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<!asana.resources.Tasks.Type>>}
 */
asana.resources.Tags.prototype.getTasksWithTag = function(tag, params, dispatchOptions) {};
/**
 * @record
 * @struct
 */
asana.resources.TasksStatic = function() {};

/* TODO: ConstructSignature: asana.resources */
/** @const */
asana.resources.Tasks = {};
/**
 * @record
 * @struct
 */
asana.resources.Tasks.Type = function() {};
 /** @type {string} */
asana.resources.Tasks.Type.prototype.created_at;
 /** @type {string} */
asana.resources.Tasks.Type.prototype.modified_at;
 /** @type {string} */
asana.resources.Tasks.Type.prototype.completed_at;
 /** @type {boolean} */
asana.resources.Tasks.Type.prototype.completed;
 /** @type {string} */
asana.resources.Tasks.Type.prototype.due_on;
 /** @type {string} */
asana.resources.Tasks.Type.prototype.due_at;
 /** @type {string} */
asana.resources.Tasks.Type.prototype.assignee_status;
 /** @type {?} */
asana.resources.Tasks.Type.prototype.assignee;
 /** @type {string} */
asana.resources.Tasks.Type.prototype.notes;
 /** @type {?} */
asana.resources.Tasks.Type.prototype.workspace;
 /** @type {number} */
asana.resources.Tasks.Type.prototype.num_hearts;
 /** @type {boolean} */
asana.resources.Tasks.Type.prototype.hearted;
 /** @type {?} */
asana.resources.Tasks.Type.prototype.parent;
 /** @type {!Array<?>} */
asana.resources.Tasks.Type.prototype.tags;
 /** @type {!Array<?>} */
asana.resources.Tasks.Type.prototype.projects;
 /** @type {!Array<!asana.resources.Membership>} */
asana.resources.Tasks.Type.prototype.memberships;
 /** @type {!Array<?>} */
asana.resources.Tasks.Type.prototype.followers;
/**
 * @record
 * @struct
 */
asana.resources.Tasks.CreateParams = function() {};
 /** @type {string} */
asana.resources.Tasks.CreateParams.prototype.name;
 /** @type {boolean} */
asana.resources.Tasks.CreateParams.prototype.completed;
 /** @type {boolean} */
asana.resources.Tasks.CreateParams.prototype.hearted;
 /** @type {string} */
asana.resources.Tasks.CreateParams.prototype.notes;
/**
 * @record
 * @struct
 */
asana.resources.Tasks.FollowersParams = function() {};
 /** @type {!Array<(string|number)>} */
asana.resources.Tasks.FollowersParams.prototype.followers;
/**
 * @record
 * @struct
 */
asana.resources.Tasks.AddProjectParams = function() {};
 /** @type {number} */
asana.resources.Tasks.AddProjectParams.prototype.project;
 /** @type {number} */
asana.resources.Tasks.AddProjectParams.prototype.insertBefore;
 /** @type {number} */
asana.resources.Tasks.AddProjectParams.prototype.insertAfter;
 /** @type {number} */
asana.resources.Tasks.AddProjectParams.prototype.section;
/**
 * @record
 * @struct
 */
asana.resources.Tasks.RemoveProjectParams = function() {};
 /** @type {number} */
asana.resources.Tasks.RemoveProjectParams.prototype.project;
/**
 * @record
 * @struct
 */
asana.resources.Tasks.TagParams = function() {};
 /** @type {string} */
asana.resources.Tasks.TagParams.prototype.tag;
/**
 * @record
 * @struct
 */
asana.resources.Tasks.CommentParams = function() {};
 /** @type {string} */
asana.resources.Tasks.CommentParams.prototype.text;
/**
 * @extends {asana.resources.PaginationParams}
 * @record
 * @struct
 */
asana.resources.Tasks.FindAllParams = function() {};
 /** @type {number} */
asana.resources.Tasks.FindAllParams.prototype.assignee;
 /** @type {number} */
asana.resources.Tasks.FindAllParams.prototype.workspace;
 /** @type {string} */
asana.resources.Tasks.FindAllParams.prototype.completed_since;
 /** @type {string} */
asana.resources.Tasks.FindAllParams.prototype.modified_since;
 /** @type {!asana.resources.TasksStatic} */
asana.resources.Tasks;

/**
 * * Creating a new task is as easy as POSTing to the `/tasks` endpoint
 * * with a data block containing the fields you'd like to set on the task.
 * * Any unspecified fields will take on default values.
 * *
 * * Every task is required to be created in a specific workspace, and this
 * * workspace cannot be changed once set. The workspace need not be set
 * * explicitly if you specify a `project` or a `parent` task instead.
 *   * \@param {Object} data Data for the request
 *   * \@param {Number} [data.workspace] The workspace to create a task in.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {?} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Tasks.Type>}
 */
asana.resources.Tasks.prototype.create = function(data, dispatchOptions) {};

/**
 * * Creating a new task is as easy as POSTing to the `/tasks` endpoint
 * * with a data block containing the fields you'd like to set on the task.
 * * Any unspecified fields will take on default values.
 * *
 * * Every task is required to be created in a specific workspace, and this
 * * workspace cannot be changed once set. The workspace need not be set
 * * explicitly if you specify a `project` or a `parent` task instead.
 *   * \@param {Number} workspace The workspace to create a task in.
 *   * \@param {Object} data Data for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} workspace
 * @param {!asana.resources.Tasks.CreateParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Tasks.Type>}
 */
asana.resources.Tasks.prototype.createInWorkspace = function(workspace, data, dispatchOptions) {};

/**
 * * Returns the complete task record for a single task.
 *   * \@param {Number} task The task to get.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The requested resource
 * @param {number} task
 * @param {!asana.resources.Params=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Tasks.Type>}
 */
asana.resources.Tasks.prototype.findById = function(task, params, dispatchOptions) {};

/**
 * * A specific, existing task can be updated by making a PUT request on the
 * * URL for that task. Only the fields provided in the `data` block will be
 * * updated; any unspecified fields will remain unchanged.
 * *
 * * When using this method, it is best to specify only those fields you wish
 * * to change, or else you may overwrite changes made by another user since
 * * you last retrieved the task.
 * *
 * * Returns the complete updated task record.
 *   * \@param {Number} task The task to update.
 *   * \@param {Object} data Data for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} task
 * @param {!asana.resources.Tasks.CreateParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Tasks.Type>}
 */
asana.resources.Tasks.prototype.update = function(task, data, dispatchOptions) {};

/**
 * * A specific, existing task can be deleted by making a DELETE request on the
 * * URL for that task. Deleted tasks go into the "trash" of the user making
 * * the delete request. Tasks can be recovered from the trash within a period
 * * of 30 days; afterward they are completely removed from the system.
 * *
 * * Returns an empty data record.
 *   * \@param {Number} task The task to delete.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} task
 * @param {?=} dispatchOptions
 * @return {!Bluebird<void>}
 */
asana.resources.Tasks.prototype.delete = function(task, dispatchOptions) {};

/**
 * * Returns the compact task records for all tasks within the given project,
 * * ordered by their priority within the project.
 *   * \@param {Number} projectId The project in which to search for tasks.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} projectId
 * @param {!asana.resources.PaginationParams=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<!asana.resources.Tasks.Type>>}
 */
asana.resources.Tasks.prototype.findByProject = function(projectId, params, dispatchOptions) {};

/**
 * * Returns the compact task records for all tasks with the given tag.
 *   * \@param {Number} tag The tag in which to search for tasks.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} tag
 * @param {!asana.resources.PaginationParams=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<!asana.resources.Tasks.Type>>}
 */
asana.resources.Tasks.prototype.findByTag = function(tag, params, dispatchOptions) {};

/**
 * * Returns the compact task records for some filtered set of tasks. Use one
 * * or more of the parameters provided to filter the tasks returned.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Number} [params.assignee] The assignee to filter tasks on.
 *   * \@param {Number} [params.workspace] The workspace or organization to filter tasks on.
 *   * \@param {Number} [params.completed_since] Only return tasks that are either incomplete or that have been
 *   * completed since this time.
 *   * \@param {Number} [params.modified_since] Only return tasks that have been modified since the given time.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {!asana.resources.Tasks.FindAllParams=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<!asana.resources.Tasks.Type>>}
 */
asana.resources.Tasks.prototype.findAll = function(params, dispatchOptions) {};

/**
 * * Adds each of the specified followers to the task, if they are not already
 * * following. Returns the complete, updated record for the affected task.
 *   * \@param {Number} task The task to add followers to.
 *   * \@param {Object} data Data for the request
 *   * \@param {Array} data.followers An array of followers to add to the task.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} task
 * @param {!asana.resources.Tasks.FollowersParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Tasks.Type>}
 */
asana.resources.Tasks.prototype.addFollowers = function(task, data, dispatchOptions) {};

/**
 * * Removes each of the specified followers from the task if they are
 * * following. Returns the complete, updated record for the affected task.
 *   * \@param {Number} task The task to remove followers from.
 *   * \@param {Object} data Data for the request
 *   * \@param {Array} data.followers An array of followers to remove from the task.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} task
 * @param {!asana.resources.Tasks.FollowersParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Tasks.Type>}
 */
asana.resources.Tasks.prototype.removeFollowers = function(task, data, dispatchOptions) {};

/**
 * * Returns a compact representation of all of the projects the task is in.
 *   * \@param {Number} task The task to get projects on.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} task
 * @param {!asana.resources.PaginationParams=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<!asana.resources.Projects.Type>>}
 */
asana.resources.Tasks.prototype.projects = function(task, params, dispatchOptions) {};

/**
 * * Adds the task to the specified project, in the optional location
 * * specified. If no location arguments are given, the task will be added to
 * * the beginning of the project.
 * *
 * * `addProject` can also be used to reorder a task within a project that
 * * already contains it.
 * *
 * * Returns an empty data block.
 *   * \@param {Number} task The task to add to a project.
 *   * \@param {Object} data Data for the request
 *   * \@param {Number} data.project The project to add the task to.
 *   * \@param {Number} [data.insertAfter] A task in the project to insert the task after, or `null` to
 *   * insert at the beginning of the list.
 *   * \@param {Number} [data.insertBefore] A task in the project to insert the task before, or `null` to
 *   * insert at the end of the list.
 *   * \@param {Number} [data.section] A section in the project to insert the task into. The task will be
 *   * inserted at the top of the section.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} task
 * @param {!asana.resources.Tasks.AddProjectParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!Object>}
 */
asana.resources.Tasks.prototype.addProject = function(task, data, dispatchOptions) {};

/**
 * * Removes the task from the specified project. The task will still exist
 * * in the system, but it will not be in the project anymore.
 * *
 * * Returns an empty data block.
 *   * \@param {Number} task The task to remove from a project.
 *   * \@param {Object} data Data for the request
 *   * \@param {Number} data.project The project to remove the task from.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} task
 * @param {!asana.resources.Tasks.RemoveProjectParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!Object>}
 */
asana.resources.Tasks.prototype.removeProject = function(task, data, dispatchOptions) {};

/**
 * * Returns a compact representation of all of the tags the task has.
 *   * \@param {Number} task The task to get tags on.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} task
 * @param {!asana.resources.PaginationParams=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<!asana.resources.Tags.Type>>}
 */
asana.resources.Tasks.prototype.tags = function(task, params, dispatchOptions) {};

/**
 * * Adds a tag to a task. Returns an empty data block.
 *   * \@param {Number} task The task to add a tag to.
 *   * \@param {Object} data Data for the request
 *   * \@param {Number} data.tag The tag to add to the task.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} task
 * @param {!asana.resources.Tasks.TagParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!Object>}
 */
asana.resources.Tasks.prototype.addTag = function(task, data, dispatchOptions) {};

/**
 * * Removes a tag from the task. Returns an empty data block.
 *   * \@param {Number} task The task to remove a tag from.
 *   * \@param {Object} data Data for the request
 *   * \@param {String} data.tag The tag to remove from the task.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} task
 * @param {!asana.resources.Tasks.TagParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!Object>}
 */
asana.resources.Tasks.prototype.removeTag = function(task, data, dispatchOptions) {};

/**
 * * Returns a compact representation of all of the subtasks of a task.
 *   * \@param {Number} task The task to get the subtasks of.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} task
 * @param {!asana.resources.PaginationParams=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<!asana.resources.Tasks.Type>>}
 */
asana.resources.Tasks.prototype.subtasks = function(task, params, dispatchOptions) {};

/**
 * * Creates a new subtask and adds it to the parent task. Returns the full record
 * * for the newly created subtask.
 *   * \@param {Number} task The task to add a subtask to.
 *   * \@param {Object} data Data for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} task
 * @param {!asana.resources.Tasks.CreateParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Tasks.Type>}
 */
asana.resources.Tasks.prototype.addSubtask = function(task, data, dispatchOptions) {};

/**
 * * Returns a compact representation of all of the stories on the task.
 *   * \@param {Number} task The task containing the stories to get.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} task
 * @param {!asana.resources.PaginationParams=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<!asana.resources.Stories.Type>>}
 */
asana.resources.Tasks.prototype.stories = function(task, params, dispatchOptions) {};

/**
 * * Adds a comment to a task. The comment will be authored by the
 * * currently authenticated user, and timestamped when the server receives
 * * the request.
 * *
 * * Returns the full record for the new story added to the task.
 *   * \@param {Number} task Globally unique identifier for the task.
 *   * \@param {Object} data Data for the request
 *   * \@param {String} data.text The plain text of the comment to add.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} task
 * @param {!asana.resources.Tasks.CommentParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Stories.Type>}
 */
asana.resources.Tasks.prototype.addComment = function(task, data, dispatchOptions) {};
/**
 * @record
 * @struct
 */
asana.resources.TeamsStatic = function() {};

/* TODO: ConstructSignature: asana.resources */
/** @const */
asana.resources.Teams = {};
/**
 * @record
 * @struct
 */
asana.resources.Teams.Type = function() {};
 /** @type {?} */
asana.resources.Teams.Type.prototype.organization;
 /** @type {!asana.resources.TeamsStatic} */
asana.resources.Teams;

/**
 * * Returns the full record for a single team.
 *   * \@param {Number} team Globally unique identifier for the team.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The requested resource
 * @param {number} team
 * @param {!asana.resources.Params=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Teams.Type>}
 */
asana.resources.Teams.prototype.findById = function(team, params, dispatchOptions) {};

/**
 * * Returns the compact records for all teams in the organization visible to
 * * the authorized user.
 *   * \@param {Number} organization Globally unique identifier for the workspace or organization.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} organization
 * @param {!asana.resources.Params=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<?>>}
 */
asana.resources.Teams.prototype.findByOrganization = function(organization, params, dispatchOptions) {};

/**
 * * Returns the compact records for all users that are members of the team.
 *   * \@param {Number} team Globally unique identifier for the team.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} team
 * @param {!asana.resources.Params=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<?>>}
 */
asana.resources.Teams.prototype.users = function(team, params, dispatchOptions) {};

/**
 * * The user making this call must be a member of the team in order to add others.
 * * The user to add must exist in the same organization as the team in order to be added.
 * * The user to add can be referenced by their globally unique user ID or their email address.
 * * Returns the full user record for the added user.
 *   * \@param {Number} team Globally unique identifier for the team.
 *   * \@param {Object} data Data for the request
 *   * \@param {Number|String} data.user An identifier for the user. Can be one of an email address,
 *   * the globally unique identifier for the user, or the keyword `me`
 *   * to indicate the current user making the request.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} team
 * @param {!asana.resources.UserParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<?>}
 */
asana.resources.Teams.prototype.addUser = function(team, data, dispatchOptions) {};

/**
 * * The user to remove can be referenced by their globally unique user ID or their email address.
 * * Removes the user from the specified team. Returns an empty data record.
 *   * \@param {Number} team Globally unique identifier for the team.
 *   * \@param {Object} data Data for the request
 *   * \@param {Number|String} data.user An identifier for the user. Can be one of an email address,
 *   * the globally unique identifier for the user, or the keyword `me`
 *   * to indicate the current user making the request.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} team
 * @param {!asana.resources.UserParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<?>}
 */
asana.resources.Teams.prototype.removeUser = function(team, data, dispatchOptions) {};
/**
 * @record
 * @struct
 */
asana.resources.UsersStatic = function() {};

/* TODO: ConstructSignature: asana.resources */
/** @const */
asana.resources.Users = {};
/**
 * @extends {asana.resources.PaginationParams}
 * @record
 * @struct
 */
asana.resources.Users.FindAllParams = function() {};
 /** @type {number} */
asana.resources.Users.FindAllParams.prototype.workspace;
/**
 * @record
 * @struct
 */
asana.resources.Users.Type = function() {};
 /** @type {string} */
asana.resources.Users.Type.prototype.email;
 /** @type {!Array<?>} */
asana.resources.Users.Type.prototype.workspaces;
 /** @type {!Object<string,string>} */
asana.resources.Users.Type.prototype.photo;
 /** @type {!asana.resources.UsersStatic} */
asana.resources.Users;

/**
 * * Returns the full user record for the currently authenticated user.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The requested resource
 * @param {!asana.resources.Params=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Users.Type>}
 */
asana.resources.Users.prototype.me = function(params, dispatchOptions) {};

/**
 * * Returns the full user record for the single user with the provided ID.
 *   * \@param {Number|String} user An identifier for the user. Can be one of an email address,
 *   * the globally unique identifier for the user, or the keyword `me`
 *   * to indicate the current user making the request.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The requested resource
 * @param {(string|number)} user
 * @param {!asana.resources.Params=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Users.Type>}
 */
asana.resources.Users.prototype.findById = function(user, params, dispatchOptions) {};

/**
 * * Returns the user records for all users in the specified workspace or
 * * organization.
 *   * \@param {Number} workspace The workspace in which to get users.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} workspace
 * @param {!asana.resources.Params=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<!asana.resources.Users.Type>>}
 */
asana.resources.Users.prototype.findByWorkspace = function(workspace, params, dispatchOptions) {};

/**
 * * Returns the user records for all users in all workspaces and organizations
 * * accessible to the authenticated user. Accepts an optional workspace ID
 * * parameter.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Number} [params.workspace] The workspace or organization to filter users on.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {!asana.resources.Users.FindAllParams} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<?>>}
 */
asana.resources.Users.prototype.findAll = function(params, dispatchOptions) {};

/**
 * @constructor
 * @struct
 * @param {?} dispatcher
 */
asana.resources.Webhooks = function(dispatcher) {};

/**
 * * Establishing a webhook is a two-part process. First, a simple HTTP POST
 * * similar to any other resource creation. Since you could have multiple
 * * webhooks we recommend specifying a unique local id for each target.
 * *
 * * Next comes the confirmation handshake. When a webhook is created, we will
 * * send a test POST to the `target` with an `X-Hook-Secret` header as
 * * described in the
 * * [Resthooks Security documentation](http://resthooks.org/docs/security/).
 * * The target must respond with a `200 OK` and a matching `X-Hook-Secret`
 * * header to confirm that this webhook subscription is indeed expected.
 * *
 * * If you do not acknowledge the webhook's confirmation handshake it will
 * * fail to setup, and you will receive an error in response to your attempt
 * * to create it. This means you need to be able to receive and complete the
 * * webhook *while* the POST request is in-flight.
 *   * \@param {Number} resource A resource ID to subscribe to. The resource can be a task or project.
 *   * \@param {String} target The URL to receive the HTTP POST.
 *   * \@param {Object} data Data for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} resource
 * @param {string} target
 * @param {?} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<?>}
 */
asana.resources.Webhooks.prototype.create = function(resource, target, data, dispatchOptions) {};

/**
 * * Returns the compact representation of all webhooks your app has
 * * registered for the authenticated user in the given workspace.
 *   * \@param {Number} workspace The workspace to query for webhooks in.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Number} [params.resource] Only return webhooks for the given resource.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} workspace
 * @param {?=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<?>}
 */
asana.resources.Webhooks.prototype.getAll = function(workspace, params, dispatchOptions) {};

/**
 * * Returns the full record for the given webhook.
 *   * \@param {String} webhook The webhook to get.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The requested resource
 * @param {string} webhook
 * @param {?=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<?>}
 */
asana.resources.Webhooks.prototype.getById = function(webhook, params, dispatchOptions) {};

/**
 * * This method permanently removes a webhook. Note that it may be possible
 * * to receive a request that was already in flight after deleting the
 * * webhook, but no further requests will be issued.
 *   * \@param {String} webhook The webhook to delete.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {string} webhook
 * @param {?=} dispatchOptions
 * @return {!Bluebird<?>}
 */
asana.resources.Webhooks.prototype.deleteById = function(webhook, dispatchOptions) {};
/**
 * @record
 * @struct
 */
asana.resources.WorkspacesStatic = function() {};

/* TODO: ConstructSignature: asana.resources */
/** @const */
asana.resources.Workspaces = {};
/**
 * @record
 * @struct
 */
asana.resources.Workspaces.ShortType = function() {};
 /** @type {boolean} */
asana.resources.Workspaces.ShortType.prototype.id_organization;
/**
 * @record
 * @struct
 */
asana.resources.Workspaces.Type = function() {};
 /** @type {boolean} */
asana.resources.Workspaces.Type.prototype.id_organization;
 /** @type {!Array<string>} */
asana.resources.Workspaces.Type.prototype.email_domains;
/**
 * @record
 * @struct
 */
asana.resources.Workspaces.TypeaheadParams = function() {};
 /** @type {string} */
asana.resources.Workspaces.TypeaheadParams.prototype.type;
 /** @type {string} */
asana.resources.Workspaces.TypeaheadParams.prototype.query;
 /** @type {number} */
asana.resources.Workspaces.TypeaheadParams.prototype.count;
 /** @type {!asana.resources.WorkspacesStatic} */
asana.resources.Workspaces;

/**
 * * Returns the full workspace record for a single workspace.
 *   * \@param {Number} workspace Globally unique identifier for the workspace or organization.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The requested resource
 * @param {number} workspace
 * @param {!asana.resources.Params=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Workspaces.Type>}
 */
asana.resources.Workspaces.prototype.findById = function(workspace, params, dispatchOptions) {};

/**
 * * Returns the compact records for all workspaces visible to the authorized user.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {!asana.resources.PaginationParams=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<!asana.resources.Workspaces.ShortType>>}
 */
asana.resources.Workspaces.prototype.findAll = function(params, dispatchOptions) {};

/**
 * * A specific, existing workspace can be updated by making a PUT request on
 * * the URL for that workspace. Only the fields provided in the data block
 * * will be updated; any unspecified fields will remain unchanged.
 * *
 * * Currently the only field that can be modified for a workspace is its `name`.
 * *
 * * Returns the complete, updated workspace record.
 *   * \@param {Number} workspace The workspace to update.
 *   * \@param {Object} data Data for the request
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} workspace
 * @param {{name: string}} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Workspaces.Type>}
 */
asana.resources.Workspaces.prototype.update = function(workspace, data, dispatchOptions) {};

/**
 * * Retrieves objects in the workspace based on an auto-completion/typeahead
 * * search algorithm. This feature is meant to provide results quickly, so do
 * * not rely on this API to provide extremely accurate search results. The
 * * result set is limited to a single page of results with a maximum size,
 * * so you won't be able to fetch large numbers of results.
 *   * \@param {Number} workspace The workspace to fetch objects from.
 *   * \@param {Object} [params] Parameters for the request
 *   * \@param {String} params.type The type of values the typeahead should return.
 *   * Note that unlike in the names of endpoints, the types listed here are
 *   * in singular form (e.g. `task`). Using multiple types is not yet supported.
 *   * \@param {String} [params.query] The string that will be used to search for relevant objects. If an
 *   * empty string is passed in, the API will currently return an empty
 *   * result set.
 *   * \@param {Number} [params.count] The number of results to return. The default is `20` if this
 *   * parameter is omitted, with a minimum of `1` and a maximum of `100`.
 *   * If there are fewer results found than requested, all will be returned.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} workspace
 * @param {!asana.resources.Workspaces.TypeaheadParams=} params
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.ResourceList<?>>}
 */
asana.resources.Workspaces.prototype.typeahead = function(workspace, params, dispatchOptions) {};

/**
 * * The user can be referenced by their globally unique user ID or their email address.
 * * Returns the full user record for the invited user.
 *   * \@param {Number} workspace The workspace or organization to invite the user to.
 *   * \@param {Object} data Data for the request
 *   * \@param {Number|String} data.user An identifier for the user. Can be one of an email address,
 *   * the globally unique identifier for the user, or the keyword `me`
 *   * to indicate the current user making the request.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} workspace
 * @param {!asana.resources.UserParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<!asana.resources.Users.Type>}
 */
asana.resources.Workspaces.prototype.addUser = function(workspace, data, dispatchOptions) {};

/**
 * * The user making this call must be an admin in the workspace.
 * * Returns an empty data record.
 *   * \@param {Number} workspace The workspace or organization to invite the user to.
 *   * \@param {Object} data Data for the request
 *   * \@param {Number|String} data.user An identifier for the user. Can be one of an email address,
 *   * the globally unique identifier for the user, or the keyword `me`
 *   * to indicate the current user making the request.
 *   * \@param {Object} [dispatchOptions] Options, if any, to pass the dispatcher for the request
 *   * \@return {Promise} The response from the API
 * @param {number} workspace
 * @param {!asana.resources.UserParams} data
 * @param {?=} dispatchOptions
 * @return {!Bluebird<?>}
 */
asana.resources.Workspaces.prototype.removeUser = function(workspace, data, dispatchOptions) {};
/**
 * @record
 * @struct
 */
asana.resources.ResourceStatic = function() {};

/* TODO: ConstructSignature: asana.resources */
 /** @type {number} */
asana.resources.ResourceStatic.prototype.DEFAULT_PAGE_LIMIT;

/**
 * Helper method that dispatches a GET request to the API, where the expected
 * result is a collection.
 *     response. See `Dispatcher.dispatch`.
 * @param {?} dispatcher
 * @param {string} path
 * @param {?=} query
 * @param {?=} dispatchOptions
 * @return {!Bluebird<?>}
 */
asana.resources.ResourceStatic.prototype.getCollection = function(dispatcher, path, query, dispatchOptions) {};

/**
 * Helper method for any request Promise from the Dispatcher, unwraps the `data`
 * value from the payload.
 * @param {?} promise
 * @return {!Bluebird<?>}
 */
asana.resources.ResourceStatic.prototype.unwrap = function(promise) {};
 /** @type {!asana.resources.ResourceStatic} */
asana.resources.Resource;

/**
 * Dispatches a GET request to the API, where the expected result is a
 * single resource.
 *     response. See `Dispatcher.dispatch`.
 * @param {string} path
 * @param {?=} query
 * @param {?=} dispatchOptions
 * @return {!Bluebird<?>}
 */
asana.resources.Resource.prototype.dispatchGet = function(path, query, dispatchOptions) {};

/**
 * Dispatches a GET request to the API, where the expected result is a
 * collection.
 *     response. See `Dispatcher.dispatch`.
 * @param {string} path
 * @param {?=} query
 * @param {?=} dispatchOptions
 * @return {!Bluebird<?>}
 */
asana.resources.Resource.prototype.dispatchGetCollection = function(path, query, dispatchOptions) {};

/**
 * Dispatches a POST request to the API, where the expected response is a
 * single resource.
 *     response. See `Dispatcher.dispatch`.
 * @param {string} path
 * @param {?=} query
 * @param {?=} dispatchOptions
 * @return {!Bluebird<?>}
 */
asana.resources.Resource.prototype.dispatchPost = function(path, query, dispatchOptions) {};

/**
 * Dispatches a POST request to the API, where the expected response is a
 * single resource.
 *     response. See `Dispatcher.dispatch`.
 * @param {string} path
 * @param {?=} query
 * @param {?=} dispatchOptions
 * @return {!Bluebird<?>}
 */
asana.resources.Resource.prototype.dispatchPut = function(path, query, dispatchOptions) {};

/**
 * Dispatches a DELETE request to the API. The expected response is an
 * empty resource.
 *     response. See `Dispatcher.dispatch`.
 * @param {string} path
 * @param {?=} dispatchOptions
 * @return {!Bluebird<?>}
 */
asana.resources.Resource.prototype.dispatchDelete = function(path, dispatchOptions) {};
/**
 * @record
 * @struct
 */
asana.resources.ResourceList = function() {};
 /** @type {!Array<T>} */
asana.resources.ResourceList.prototype.data;
 /** @type {{data: !Array<T>, next_page: !asana.resources.NextPage}} */
asana.resources.ResourceList.prototype._response;
 /** @type {{authenticator: {apiKey: string}, asanaBaseUrl: string, retryOnRateLimit: boolean, requestTimeout: number, _cachedVersionInfo: !asana.resources.VersionInfo}} */
asana.resources.ResourceList.prototype._dispatcher;

/** @typedef {!asana.resources.ResourceList<?>} */
asana.resources.SimpleResourceList;
/**
 * @record
 * @struct
 */
asana.resources.NextPage = function() {};
 /** @type {string} */
asana.resources.NextPage.prototype.offset;
 /** @type {string} */
asana.resources.NextPage.prototype.uri;
 /** @type {string} */
asana.resources.NextPage.prototype.path;
/**
 * @record
 * @struct
 */
asana.resources.VersionInfo = function() {};
 /** @type {string} */
asana.resources.VersionInfo.prototype.version;
 /** @type {string} */
asana.resources.VersionInfo.prototype.language;
 /** @type {string} */
asana.resources.VersionInfo.prototype.language_version;
 /** @type {string} */
asana.resources.VersionInfo.prototype.os;
 /** @type {string} */
asana.resources.VersionInfo.prototype.os_version;
 /** @type {number} */
asana.resources.Resource.prototype.id;
 /** @type {string} */
asana.resources.Resource.prototype.name;
/**
 * @extends {asana.resources.Params}
 * @record
 * @struct
 */
asana.resources.PaginationParams = function() {};
 /** @type {number} */
asana.resources.PaginationParams.prototype.limit;
 /** @type {string} */
asana.resources.PaginationParams.prototype.offset;
/**
 * @record
 * @struct
 */
asana.resources.Params = function() {};
 /** @type {string} */
asana.resources.Params.prototype.opt_fields;
 /** @type {string} */
asana.resources.Params.prototype.opt_expand;
/**
 * @record
 * @struct
 */
asana.resources.UserParams = function() {};
 /** @type {(string|number)} */
asana.resources.UserParams.prototype.user;
/**
 * @record
 * @struct
 */
asana.resources.Membership = function() {};
 /** @type {?} */
asana.resources.Membership.prototype.project;
 /** @type {?} */
asana.resources.Membership.prototype.section;
 /** @type {string} */
asana.VERSION;

/* TODO: ExportAssignment in  */
