/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/encoding-japanese/index.d.ts:

/** @typedef {string} */
var Encoding;

/** @typedef {(string|!Uint8Array|!Array<number>|?)} */
var RawType;
/**
 * @record
 * @struct
 */
function ConvertOptions() {}
 /** @type {string} */
ConvertOptions.prototype.to;
 /** @type {string} */
ConvertOptions.prototype.from;
 /** @type {string} */
ConvertOptions.prototype.type;
 /** @type {(string|boolean)} */
ConvertOptions.prototype.bom;

/**
 * @param {(string|!Uint8Array|!Array<number>|?)} data
 * @param {(string|!Array<string>)=} encodings
 * @return {string}
 */
function detect(data, encodings) {}

/**
 * @param {(string|!Uint8Array|!Array<number>|?)} data
 * @param {string|?} to_or_options
 * @param {string=} from
 * @return {!Array<number>|(string|!Array<number>|!ArrayBuffer)}
 */
function convert(data, to_or_options, from) {}

/**
 * @param {(!Uint8Array|!Array<number>)} data
 * @return {string}
 */
function urlEncode(data) {}

/**
 * @param {string} data
 * @return {!Array<number>}
 */
function urlDecode(data) {}

/**
 * @param {(!Uint8Array|!Array<number>)} data
 * @return {string}
 */
function base64Encode(data) {}

/**
 * @param {string} data
 * @return {!Array<number>}
 */
function base64Decode(data) {}

/**
 * @param {(!Uint8Array|!Array<number>)} data
 * @return {string}
 */
function codeToString(data) {}

/**
 * @param {string} data
 * @return {!Array<number>}
 */
function stringToCode(data) {}

/**
 * @param {!Array<number>|string} data
 * @return {!Array<number>|string}
 */
function toHankakuCase(data) {}

/**
 * @param {!Array<number>|string} data
 * @return {!Array<number>|string}
 */
function toZenkakuCase(data) {}

/**
 * @param {!Array<number>|string} data
 * @return {!Array<number>|string}
 */
function toHiraganaCase(data) {}

/**
 * @param {!Array<number>|string} data
 * @return {!Array<number>|string}
 */
function toKatakanaCase(data) {}

/**
 * @param {!Array<number>|string} data
 * @return {!Array<number>|string}
 */
function toHankanaCase(data) {}

/**
 * @param {!Array<number>|string} data
 * @return {!Array<number>|string}
 */
function toZenkanaCase(data) {}

/**
 * @param {!Array<number>|string} data
 * @return {!Array<number>|string}
 */
function toHankakuSpace(data) {}

/**
 * @param {!Array<number>|string} data
 * @return {!Array<number>|string}
 */
function toZenkakuSpace(data) {}
