/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/supercluster/index.d.ts:

/* TODO: ImportDeclaration in  */
/**
 * @record
 * @struct
 */
function Options() {}
 /** @type {number} */
Options.prototype.minZoom;
 /** @type {number} */
Options.prototype.maxZoom;
 /** @type {number} */
Options.prototype.radius;
 /** @type {number} */
Options.prototype.extent;
 /** @type {number} */
Options.prototype.nodeSize;
 /** @type {boolean} */
Options.prototype.log;
/**
 * @constructor
 * @struct
 */
function Supercluster() {}

/**
 * Loads an array of GeoJSON.Feature objects. Each feature's geometry must be a GeoJSON.Point. Once loaded, index is immutable.
 * @param {!Array<?>} points
 * @return {!Supercluster}
 */
Supercluster.prototype.load = function(points) {};

/**
 * For the given bbox array ([westLng, southLat, eastLng, northLat]) and integer zoom, returns an array of clusters and points as GeoJSON.Feature objects.
 * @param {!Array<?>} bbox
 * @param {number} zoom
 * @return {!Array<!supercluster.Cluster>}
 */
Supercluster.prototype.getClusters = function(bbox, zoom) {};

/**
 * For a given zoom and x/y coordinates, returns a geojson-vt-compatible JSON tile object with cluster/point features.
 * @param {number} z
 * @param {number} x
 * @param {number} y
 * @return {!supercluster.Tile}
 */
Supercluster.prototype.getTile = function(z, x, y) {};

/**
 * Returns the children of a cluster (on the next zoom level) given its id (cluster_id value from feature properties) and zoom the cluster was from.
 * @param {number} clusterId
 * @param {number} clusterZoom
 * @return {!Array<!supercluster.Cluster>}
 */
Supercluster.prototype.getChildren = function(clusterId, clusterZoom) {};

/**
 * Returns all the points of a cluster (given its cluster_id and zoom),
 * with pagination support: limit is the number of points to return (set to Infinity for all points),
 * and offset is the amount of points to skip (for pagination).
 * @param {number} clusterId
 * @param {number} clusterZoom
 * @param {number=} limit
 * @param {number=} offset
 * @return {!Array<!supercluster.Cluster>}
 */
Supercluster.prototype.getLeaves = function(clusterId, clusterZoom, limit, offset) {};

/**
 * Returns the zoom on which the cluster expands into several children (useful for "click to zoom" feature), given the cluster's cluster_id and zoom.
 * @param {number} clusterId
 * @param {number} clusterZoom
 * @return {number}
 */
Supercluster.prototype.getClusterExpansionZoom = function(clusterId, clusterZoom) {};

/**
 * A very fast JavaScript library for geospatial point clustering for browsers and Node.
 * @param {?} options
 * @return {!Supercluster}
 */
function supercluster(options) {}

/** @typedef {?} */
supercluster.Point;

/** @typedef {!Array<?>} */
supercluster.Points;

/** @typedef {!Array<!supercluster.Cluster>} */
supercluster.Clusters;

/** @typedef {!Array<!supercluster.TileFeature>} */
supercluster.TileFeatures;

/** @typedef {!Array<?>} */
supercluster.BBox;
/**
 * @record
 * @struct
 */
supercluster.ClusterProperties = function() {};
 /** @type {boolean} */
supercluster.ClusterProperties.prototype.cluster;
 /** @type {number} */
supercluster.ClusterProperties.prototype.cluster_id;
 /** @type {number} */
supercluster.ClusterProperties.prototype.point_count;
 /** @type {number} */
supercluster.ClusterProperties.prototype.point_count_abbreviated;
 /** @type {number} */
supercluster.ClusterProperties.prototype.sum;

/* TODO: IndexSignature: supercluster */
/**
 * @extends {supercluster.Point}
 * @record
 * @struct
 */
supercluster.Cluster = function() {};
 /** @type {!supercluster.ClusterProperties} */
supercluster.Cluster.prototype.properties;
/**
 * @record
 * @struct
 */
supercluster.TileFeature = function() {};
 /** @type {number} */
supercluster.TileFeature.prototype.type;
 /** @type {!Array<!Array<?>>} */
supercluster.TileFeature.prototype.geometry;
 /** @type {!supercluster.ClusterProperties} */
supercluster.TileFeature.prototype.tags;
/**
 * @record
 * @struct
 */
supercluster.Tile = function() {};
 /** @type {!Array<!supercluster.TileFeature>} */
supercluster.Tile.prototype.features;

/* TODO: ExportAssignment in  */
