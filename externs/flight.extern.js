/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/flight/index.d.ts:
/** @const */
var Flight = {};
/**
 * @record
 * @struct
 */
Flight.Base = function() {};

/**
 * Most Components and Mixins need to define attributes. In Flight,
 * default values are assigned by passing an object to the attributes
 * function.
 * 
 * NOTE: this.attributes replaces the now deprecated this.defaultAttrs.
 * However, for backwards compatibility, if you are using this.defaultAttrs
 * then all the old attribute behavior remains in place.
 * @param {!Object} obj
 * @return {void}
 */
Flight.Base.prototype.attributes = function(obj) {};

/**
 * Most Components and Mixins need to define attributes. In Flight,
 * default values are assigned by passing an object to the defaultAttrs
 * function.
 * 
 * NOTE: this.attributes replaces the now deprecated this.defaultAttrs.
 * However, for backwards compatibility, if you are using this.defaultAttrs
 * then all the old attribute behavior remains in place.
 * @param {!Object} obj
 * @return {void}
 */
Flight.Base.prototype.defaultAttrs = function(obj) {};

/**
 * The select method takes an attr key as its argument. The value of the
 * attr must be a CSS Selector. The method will return all matching
 * elements within the component's node.
 * 
 * This is a handy alternative to jQuery's this.$node.find() and prevents
 * accidental access to elements outside of the component's node.
 * 
 * @param {string} attr
 * @return {?<!HTMLElement>}
 */
Flight.Base.prototype.select = function(attr) {};

/**
 * This method is attached to the prototype of every Component; it accepts
 * the component's node and an options object as arguments. The core
 * implementation, which is called every time an instance is created, will
 * assign the node to the instance and override the default attrs with the
 * options object.
 * 
 * Components and Mixins will typically augment the core implementation by
 * supplying a function as an argument to the after method (see the advice
 * API for more information). This is a good place to set up event
 * listeners that bind to callbacks.
 * @param {?} node
 * @param {!Object} options
 * @return {void}
 */
Flight.Base.prototype.initialize = function(node, options) {};

/**
 * This allows a component instance to listen to an event and register a
 * callback to be invoked. Flight will automatically bind the context
 * (this) of the callback to the component instance.
 * 
 * @param {string|!Document|!Element|!Array<!Element>} eventType_or_selector The event type to listen for.
 * 
 * @param {!Function|!Object|string} handler_or_eventType Either a function (callback) to be invoked, or a map of
 *        targets and callbacks.
 * @param {!Function|!Object=} handler
 * @return {void}
 */
Flight.Base.prototype.on = function(eventType_or_selector, handler_or_eventType, handler) {};

/**
 * If we no longer want a component instance to listen to an event we can
 * use the off method to unsubscribe.
 * 
 * @param {string|!Document|!Element|!Array<!Element>} eventType_or_selector The event type being listened to.
 * 
 * @param {!Function|string|!Object=} handler_or_eventType Optional. The function (callback) to detach from the
 *        component instance. Defaults to the detaching all callbacks for the event.
 * @param {!Function|!Object=} handler
 * @return {void}
 */
Flight.Base.prototype.off = function(eventType_or_selector, handler_or_eventType, handler) {};

/**
 * Trigger an event.
 * 
 * @param {string|!Document|!Element|!Array<!Element>|!Object} eventType_or_selector String. The event type to be triggered.
 * 
 * You can also specify a default function that will be called by the
 * component, providing that nothing in the event's bubble chain invokes
 * preventDefault. Default functions in custom events are analagous to the
 * default actions of native events.
 * 
 * To define a default function, make the eventType argument an object
 * that specifies the event's type and a defaultBehavior property. A
 * common use case is defining default behavior for keyboard events.
 * 
 * @param {string|!Object=} eventType
 * @param {!Object=} eventPayload
 * @return {void}
 */
Flight.Base.prototype.trigger = function(eventType_or_selector, eventType, eventPayload) {};

/**
 * Remove a component instance and its event bindings.
 * 
 * It's a good idea to teardown components after each unit test - and
 * teardown is also good for unbinding event listeners when, for example,
 * the user navigates away from a page.
 * 
 * @return {void}
 */
Flight.Base.prototype.teardown = function() {};
/**
 * @extends {Flight.Base}
 * @record
 * @struct
 */
Flight.Advice = function() {};

/**
 * Run the customFunc function after the existingFunc function.
 * 
 * @param {string} method
 * @param {!Function} fn
 * @return {void}
 */
Flight.Advice.prototype.after = function(method, fn) {};

/**
 * Run the existingFunc function in the middle of the customFunc function.
 * It's similar to underscore's _wrap function).
 * 
 * @param {string} method
 * @param {!Function} fn
 * @return {void}
 */
Flight.Advice.prototype.around = function(method, fn) {};

/**
 * Run the customFunc function before the existingFunc function.
 * 
 * @param {string} method
 * @param {!Function} fn
 * @return {void}
 */
Flight.Advice.prototype.before = function(method, fn) {};
/**
 * @extends {Flight.Base}
 * @extends {Flight.Advice}
 * @record
 * @struct
 */
Flight.Component = function() {};
 /** @type {!Element} */
Flight.Component.prototype.node;
 /** @type {?<!HTMLElement>} */
Flight.Component.prototype.$node;
/**
 * @record
 * @struct
 */
Flight.AdviceStatic = function() {};

/**
 * @return {!Function}
 */
Flight.AdviceStatic.prototype.withAdvice = function() {};
/**
 * @record
 * @struct
 */
Flight.ComponentStatic = function() {};

/* TODO: CallSignature: Flight */

/**
 * @param {string|!Element|?<!HTMLElement>} selector
 * @param {!Object=} options
 * @return {void}
 */
Flight.ComponentStatic.prototype.attachTo = function(selector, options) {};

/**
 * @return {void}
 */
Flight.ComponentStatic.prototype.teardownAll = function() {};
/**
 * @record
 * @struct
 */
Flight.ComposeStatic = function() {};

/**
 * @param {!Object} base
 * @param {!Array<!Function>} mixins
 * @return {void}
 */
Flight.ComposeStatic.prototype.mixin = function(base, mixins) {};
/**
 * @record
 * @struct
 */
Flight.DebugStatic = function() {};
 /** @type {{logAll: function(): void, logByAction: function(string): void, logByName: function(string): void, logNone: function(): void}} */
Flight.DebugStatic.prototype.events;
/**
 * @record
 * @struct
 */
Flight.UtilsStatic = function() {};

/**
 * @param {!Function} fn1
 * @param {!Function} fn2
 * @param {...!Function} fns
 * @return {!Function}
 */
Flight.UtilsStatic.prototype.compose = function(fn1, fn2, fns) {};

/**
 * @param {number} num
 * @param {!Function} base
 * @return {!Function}
 */
Flight.UtilsStatic.prototype.countThen = function(num, base) {};

/**
 * @param {!Function} func
 * @param {number} wait
 * @param {boolean} immediate
 * @return {!Function}
 */
Flight.UtilsStatic.prototype.debounce = function(func, wait, immediate) {};

/**
 * @param {!Object} rules
 * @return {void}
 */
Flight.UtilsStatic.prototype.delegate = function(rules) {};

/**
 * @param {!Object} obj
 * @return {boolean}
 */
Flight.UtilsStatic.prototype.isDomObj = function(obj) {};

/**
 * @param {!Object} obj
 * @param {string} property
 * @return {boolean}
 */
Flight.UtilsStatic.prototype.isEnumerable = function(obj, property) {};

/**
 * @param {!Object} obj1
 * @param {!Object} obj2
 * @param {...boolean|?=} deepClone_or_args
 * @return {!Object}
 */
Flight.UtilsStatic.prototype.merge = function(obj1, obj2, deepClone_or_args) {};

/**
 * @param {!Object} base
 * @param {!Object} extra
 * @param {boolean=} protect
 * @return {void}
 */
Flight.UtilsStatic.prototype.push = function(base, extra, protect) {};

/**
 * @param {!Function} func
 * @param {number} wait
 * @return {!Function}
 */
Flight.UtilsStatic.prototype.throttle = function(func, wait) {};

/**
 * @param {!Object} obj
 * @param {number=} from
 * @return {!Array<?>}
 */
Flight.UtilsStatic.prototype.toArray = function(obj, from) {};

/**
 * @param {!Array<?>} array
 * @return {!Array<?>}
 */
Flight.UtilsStatic.prototype.uniqueArray = function(array) {};
/**
 * @record
 * @struct
 */
Flight.EventData = function() {};
 /** @type {!HTMLElement} */
Flight.EventData.prototype.el;
/**
 * @record
 * @struct
 */
Flight.FlightStatic = function() {};
 /** @type {!Flight.AdviceStatic} */
Flight.FlightStatic.prototype.advice;
 /** @type {!Flight.ComponentStatic} */
Flight.FlightStatic.prototype.component;
 /** @type {!Flight.ComposeStatic} */
Flight.FlightStatic.prototype.compose;
 /** @type {!Flight.UtilsStatic} */
Flight.FlightStatic.prototype.utils;
 /** @type {!Flight.DebugStatic} */
var DEBUG;
 /** @type {!Flight.FlightStatic} */
var flight;
