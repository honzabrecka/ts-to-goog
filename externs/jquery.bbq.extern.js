/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jquery.bbq/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */
/** @const */
var JQueryBbq = {};
/**
 * @record
 * @struct
 */
JQueryBbq.JQuery = function() {};

/**
 * Adds a 'state' into the browser history at the current position, setting
 * location.hash and triggering any bound <hashchange event> callbacks
 * (provided the new state is different than the previous state).
 * 
 * \@name params A serialized params string or a hash string beginning with # to merge into location.hash.
 * \@name merge_mode Merge behavior defaults to 0 if merge_mode is not specified (unless a hash string beginning with # is specified, in which case merge behavior defaults to 2)
 * @param {string|?=} params
 * @param {number=} merge_mode
 * @return {void}
 */
JQueryBbq.JQuery.prototype.pushState = function(params, merge_mode) {};

/**
 * Retrieves the current 'state' from the browser history, parsing
 * location.hash for a specific key or returning an object containing the
 * entire state, optionally coercing numbers, booleans, null and undefined
 * values.
 * 
 * \@name key An optional state key for which to return a value.
 * \@name coerce If true, coerces any numbers or true, false, null, and undefined to their actual value. Defaults to false
 * @param {string|boolean=} key_or_coerce
 * @param {boolean=} coerce
 * @return {?}
 */
JQueryBbq.JQuery.prototype.getState = function(key_or_coerce, coerce) {};

/**
 * Remove one or more keys from the current browser history 'state', creating
 * a new state, setting location.hash and triggering any bound
 * <hashchange event> callbacks (provided the new state is different than
 * the previous state).
 * 
 * \@name key One or more key values to remove from the current state.
 * @param {...?} key
 * @return {void}
 */
JQueryBbq.JQuery.prototype.removeState = function(key) {};
/**
 * @record
 * @struct
 */
JQueryBbq.ParamFragment = function() {};

/* TODO: CallSignature: JQueryBbq */

/* TODO: CallSignature: JQueryBbq */
 /** @type {function(string): void} */
JQueryBbq.ParamFragment.prototype.noEscape;

/**
 * TODO: DESCRIBE
 * 
 * \@name state TODO: DESCRIBE
 * @param {boolean=} state
 * @return {boolean}
 */
JQueryBbq.ParamFragment.prototype.ajaxCrawlable = function(state) {};
/**
 * @record
 * @struct
 */
JQueryBbq.JQueryDeparam = function() {};

/* TODO: CallSignature: JQueryBbq */

/**
 * Parse the query string from a URL or the current window.location.href,
 * deserializing it into an object, optionally coercing numbers, booleans,
 * null and undefined values.
 * 
 * \@name url An optional params string or URL containing query string params to be parsed. If url is omitted, the current window.location.href is used.
 * \@name coerce If true, coerces any numbers or true, false, null, and undefined to their actual value. Defaults to false if omitted.
 * @param {string=} url
 * @param {boolean=} coerce
 * @return {?}
 */
JQueryBbq.JQueryDeparam.prototype.querystring = function(url, coerce) {};

/**
 * Parse the fragment (hash) from a URL or the current window.location.href,
 * deserializing it into an object, optionally coercing numbers, booleans,
 * null and undefined values.
 * 
 * \@name url An optional params string or URL containing fragment (hash) params to be parsed. If url is omitted, the current window.location.href is used.
 * \@name coerce If true, coerces any numbers or true, false, null, and undefined to their actual value. Defaults to false if omitted.
 * @param {string=} url
 * @param {boolean=} coerce
 * @return {?}
 */
JQueryBbq.JQueryDeparam.prototype.fragment = function(url, coerce) {};
/**
 * @extends {JQueryEventObject}
 * @record
 * @struct
 */
JQueryBbq.EventObject = function() {};
 /** @type {string} */
JQueryBbq.EventObject.prototype.fragment;

/**
 * @param {string=} key
 * @param {boolean=} coerce
 * @return {?}
 */
JQueryBbq.EventObject.prototype.getState = function(key, coerce) {};
 /** @type {!JQueryBbq.ParamFragment} */
JQueryParam.prototype.fragment;

/**
 * Parse the query string from a URL or the current window.location.href,
 * deserializing it into an object, optionally coercing numbers, booleans,
 * null and undefined values.
 * 
 * \@name url An optional params string or URL containing query string params to be parsed. If url is omitted, the current window.location.href is used.
 * \@name coerce (Boolean) If true, coerces any numbers or true, false, null, and undefined to their actual value. Defaults to false if omitted.
 * \@name merge_mode An object representing the deserialized params string.
 * @param {string=} url
 * @param {boolean|?=} coerce
 * @param {number=} merge_mode
 * @return {string}
 */
JQueryParam.prototype.querystring = function(url, coerce, merge_mode) {};

/**
 * Returns a params string equivalent to that returned by the internal
 * jQuery.param method, but sorted, which makes it suitable for use as a
 * cache key.
 * 
 * \@name obj An object to be serialized.
 * \@name traditional Params deep/shallow serialization mode. See the documentation at http://api.jquery.com/jQuery.param/ for more detail.
 * @param {?} obj
 * @param {boolean=} traditional
 * @return {string}
 */
JQueryParam.prototype.sorted = function(obj, traditional) {};
 /** @type {!JQueryBbq.JQuery} */
JQueryStatic.prototype.bbq;
 /** @type {!JQueryBbq.JQueryDeparam} */
JQueryStatic.prototype.deparam;

/**
 * Get the internal "Default URL attribute per tag" list, or augment the list
 * with additional tag-attribute pairs, in case the defaults are insufficient.
 * 
 * \@name tag_attr An object containing a list of tag names and their associated default attribute names in the format { tag: 'attr', ... } to be merged into the internal tag-attribute list.
 * @param {?=} tag_attr
 * @return {?}
 */
JQueryStatic.prototype.elemUrlAttr = function(tag_attr) {};

/**
 * @param {?=} attr
 * @param {?=} params
 * @param {number=} merge_mode
 * @return {!JQuery}
 */
JQuery.prototype.querystring = function(attr, params, merge_mode) {};

/**
 * @param {?=} attr
 * @param {?=} params
 * @param {number=} merge_mode
 * @return {!JQuery}
 */
JQuery.prototype.fragment = function(attr, params, merge_mode) {};

/**
 * @param {?|function(!JQueryBbq.EventObject): ?=} eventData_or_handler
 * @param {function(!JQueryBbq.EventObject): ?=} handler
 * @return {!JQuery}
 */
JQuery.prototype.hashchange = function(eventData_or_handler, handler) {};
