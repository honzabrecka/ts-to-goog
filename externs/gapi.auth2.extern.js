/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/gapi.auth2/index.d.ts:
/** @const */
gapi.auth2 = {};
/**
 * @constructor
 * @struct
 */
gapi.auth2.GoogleAuth = function() {};
 /** @type {!gapi.auth2.IsSignedIn} */
gapi.auth2.GoogleAuth.prototype.isSignedIn;
 /** @type {!gapi.auth2.CurrentUser} */
gapi.auth2.GoogleAuth.prototype.currentUser;

/**
 * Calls the onInit function when the GoogleAuth object is fully initialized, or calls the onFailure function if
 * initialization fails.
 * @param {function(!gapi.auth2.GoogleAuth): ?} onInit
 * @param {function(string): ?=} onFailure
 * @return {?}
 */
gapi.auth2.GoogleAuth.prototype.then = function(onInit, onFailure) {};

/**
 * Signs in the user using the specified options.
 * If no option specified here, fallback to the options specified to gapi.auth2.init().
 * @param {(!gapi.auth2.SigninOptions|!gapi.auth2.SigninOptionsBuilder)=} options
 * @return {?}
 */
gapi.auth2.GoogleAuth.prototype.signIn = function(options) {};

/**
 * Signs out all accounts from the application.
 * @return {?}
 */
gapi.auth2.GoogleAuth.prototype.signOut = function() {};

/**
 * Revokes all of the scopes that the user granted.
 * @return {?}
 */
gapi.auth2.GoogleAuth.prototype.disconnect = function() {};

/**
 * Get permission from the user to access the specified scopes offline.
 * @param {{scope: string, prompt: string, app_package_name: string}=} options
 * @return {?}
 */
gapi.auth2.GoogleAuth.prototype.grantOfflineAccess = function(options) {};

/**
 * Attaches the sign-in flow to the specified container's click handler.
 * @param {?} container
 * @param {!gapi.auth2.SigninOptions} options
 * @param {function(!gapi.auth2.GoogleUser): ?} onsuccess
 * @param {function(string): ?} onfailure
 * @return {?}
 */
gapi.auth2.GoogleAuth.prototype.attachClickHandler = function(container, options, onsuccess, onfailure) {};
/**
 * @record
 * @struct
 */
gapi.auth2.IsSignedIn = function() {};

/**
 * Returns whether the current user is currently signed in.
 * @return {boolean}
 */
gapi.auth2.IsSignedIn.prototype.get = function() {};

/**
 * Listen for changes in the current user's sign-in state.
 * @param {function(boolean): ?} listener
 * @return {void}
 */
gapi.auth2.IsSignedIn.prototype.listen = function(listener) {};
/**
 * @record
 * @struct
 */
gapi.auth2.CurrentUser = function() {};

/**
 * Returns a GoogleUser object that represents the current user. Note that in a newly-initialized
 * GoogleAuth instance, the current user has not been set. Use the currentUser.listen() method or the
 * GoogleAuth.then() to get an initialized GoogleAuth instance.
 * @return {!gapi.auth2.GoogleUser}
 */
gapi.auth2.CurrentUser.prototype.get = function() {};

/**
 * Listen for changes in currentUser.
 * @param {function(!gapi.auth2.GoogleUser): ?} listener
 * @return {void}
 */
gapi.auth2.CurrentUser.prototype.listen = function(listener) {};
/**
 * @record
 * @struct
 */
gapi.auth2.SigninOptions = function() {};
 /** @type {string} */
gapi.auth2.SigninOptions.prototype.app_package_name;
 /** @type {boolean} */
gapi.auth2.SigninOptions.prototype.fetch_basic_profile;
 /** @type {string} */
gapi.auth2.SigninOptions.prototype.prompt;
 /** @type {string} */
gapi.auth2.SigninOptions.prototype.scope;
/**
 * @record
 * @struct
 */
gapi.auth2.ClientConfig = function() {};
 /** @type {string} */
gapi.auth2.ClientConfig.prototype.client_id;
 /** @type {string} */
gapi.auth2.ClientConfig.prototype.cookie_policy;
 /** @type {string} */
gapi.auth2.ClientConfig.prototype.scope;
 /** @type {boolean} */
gapi.auth2.ClientConfig.prototype.fetch_basic_profile;
 /** @type {string} */
gapi.auth2.ClientConfig.prototype.hosted_domain;
 /** @type {string} */
gapi.auth2.ClientConfig.prototype.openid_realm;
 /** @type {string} */
gapi.auth2.ClientConfig.prototype.ux_mode;
 /** @type {string} */
gapi.auth2.ClientConfig.prototype.redirect_uri;
/**
 * @constructor
 * @struct
 */
gapi.auth2.SigninOptionsBuilder = function() {};

/**
 * @param {string} name
 * @return {?}
 */
gapi.auth2.SigninOptionsBuilder.prototype.setAppPackageName = function(name) {};

/**
 * @param {boolean} fetch
 * @return {?}
 */
gapi.auth2.SigninOptionsBuilder.prototype.setFetchBasicProfile = function(fetch) {};

/**
 * @param {string} prompt
 * @return {?}
 */
gapi.auth2.SigninOptionsBuilder.prototype.setPrompt = function(prompt) {};

/**
 * @param {string} scope
 * @return {?}
 */
gapi.auth2.SigninOptionsBuilder.prototype.setScope = function(scope) {};
/**
 * @record
 * @struct
 */
gapi.auth2.BasicProfile = function() {};

/**
 * @return {string}
 */
gapi.auth2.BasicProfile.prototype.getId = function() {};

/**
 * @return {string}
 */
gapi.auth2.BasicProfile.prototype.getName = function() {};

/**
 * @return {string}
 */
gapi.auth2.BasicProfile.prototype.getGivenName = function() {};

/**
 * @return {string}
 */
gapi.auth2.BasicProfile.prototype.getFamilyName = function() {};

/**
 * @return {string}
 */
gapi.auth2.BasicProfile.prototype.getImageUrl = function() {};

/**
 * @return {string}
 */
gapi.auth2.BasicProfile.prototype.getEmail = function() {};
/**
 * @record
 * @struct
 */
gapi.auth2.AuthResponse = function() {};
 /** @type {string} */
gapi.auth2.AuthResponse.prototype.access_token;
 /** @type {string} */
gapi.auth2.AuthResponse.prototype.id_token;
 /** @type {string} */
gapi.auth2.AuthResponse.prototype.login_hint;
 /** @type {string} */
gapi.auth2.AuthResponse.prototype.scope;
 /** @type {number} */
gapi.auth2.AuthResponse.prototype.expires_in;
 /** @type {number} */
gapi.auth2.AuthResponse.prototype.first_issued_at;
 /** @type {number} */
gapi.auth2.AuthResponse.prototype.expires_at;
/**
 * @record
 * @struct
 */
gapi.auth2.AuthorizeConfig = function() {};
 /** @type {string} */
gapi.auth2.AuthorizeConfig.prototype.client_id;
 /** @type {string} */
gapi.auth2.AuthorizeConfig.prototype.scope;
 /** @type {string} */
gapi.auth2.AuthorizeConfig.prototype.response_type;
 /** @type {string} */
gapi.auth2.AuthorizeConfig.prototype.prompt;
 /** @type {string} */
gapi.auth2.AuthorizeConfig.prototype.cookie_policy;
 /** @type {string} */
gapi.auth2.AuthorizeConfig.prototype.hosted_domain;
 /** @type {string} */
gapi.auth2.AuthorizeConfig.prototype.login_hint;
 /** @type {string} */
gapi.auth2.AuthorizeConfig.prototype.app_package_name;
 /** @type {string} */
gapi.auth2.AuthorizeConfig.prototype.openid_realm;
 /** @type {boolean} */
gapi.auth2.AuthorizeConfig.prototype.include_granted_scope;
/**
 * @record
 * @struct
 */
gapi.auth2.AuthorizeResponse = function() {};
 /** @type {string} */
gapi.auth2.AuthorizeResponse.prototype.access_token;
 /** @type {string} */
gapi.auth2.AuthorizeResponse.prototype.id_token;
 /** @type {string} */
gapi.auth2.AuthorizeResponse.prototype.code;
 /** @type {string} */
gapi.auth2.AuthorizeResponse.prototype.scope;
 /** @type {number} */
gapi.auth2.AuthorizeResponse.prototype.expires_in;
 /** @type {number} */
gapi.auth2.AuthorizeResponse.prototype.first_issued_at;
 /** @type {number} */
gapi.auth2.AuthorizeResponse.prototype.expires_at;
 /** @type {string} */
gapi.auth2.AuthorizeResponse.prototype.error;
 /** @type {string} */
gapi.auth2.AuthorizeResponse.prototype.error_subtype;
/**
 * @record
 * @struct
 */
gapi.auth2.GoogleUser = function() {};

/**
 * Get the user's unique ID string.
 * @return {string}
 */
gapi.auth2.GoogleUser.prototype.getId = function() {};

/**
 * Returns true if the user is signed in.
 * @return {boolean}
 */
gapi.auth2.GoogleUser.prototype.isSignedIn = function() {};

/**
 * Get the user's Google Apps domain if the user signed in with a Google Apps account.
 * @return {string}
 */
gapi.auth2.GoogleUser.prototype.getHostedDomain = function() {};

/**
 * Get the scopes that the user granted as a space-delimited string.
 * @return {string}
 */
gapi.auth2.GoogleUser.prototype.getGrantedScopes = function() {};

/**
 * Get the user's basic profile information.
 * @return {!gapi.auth2.BasicProfile}
 */
gapi.auth2.GoogleUser.prototype.getBasicProfile = function() {};

/**
 * Get the response object from the user's auth session.
 * @param {boolean=} includeAuthorizationData
 * @return {!gapi.auth2.AuthResponse}
 */
gapi.auth2.GoogleUser.prototype.getAuthResponse = function(includeAuthorizationData) {};

/**
 * Forces a refresh of the access token, and then returns a Promise for the new AuthResponse.
 * @return {!Promise<!gapi.auth2.AuthResponse>}
 */
gapi.auth2.GoogleUser.prototype.reloadAuthResponse = function() {};

/**
 * Returns true if the user granted the specified scopes.
 * @param {string} scopes
 * @return {boolean}
 */
gapi.auth2.GoogleUser.prototype.hasGrantedScopes = function(scopes) {};

/**
 * Signs in the user. Use this method to request additional scopes for incremental
 * authorization or to sign in a user after the user has signed out.
 * When you use GoogleUser.signIn(), the sign-in flow skips the account chooser step.
 * See GoogleAuth.signIn().
 * @param {(!gapi.auth2.SigninOptions|!gapi.auth2.SigninOptionsBuilder)=} options
 * @return {?}
 */
gapi.auth2.GoogleUser.prototype.signIn = function(options) {};

/**
 * See GoogleUser.signIn()
 * @param {(!gapi.auth2.SigninOptions|!gapi.auth2.SigninOptionsBuilder)=} options
 * @return {?}
 */
gapi.auth2.GoogleUser.prototype.grant = function(options) {};

/**
 * Get permission from the user to access the specified scopes offline.
 * When you use GoogleUser.grantOfflineAccess(), the sign-in flow skips the account chooser step.
 * See GoogleUser.grantOfflineAccess().
 * @param {string} scopes
 * @return {void}
 */
gapi.auth2.GoogleUser.prototype.grantOfflineAccess = function(scopes) {};

/**
 * Revokes all of the scopes that the user granted.
 * @return {void}
 */
gapi.auth2.GoogleUser.prototype.disconnect = function() {};

/**
 * Initializes the GoogleAuth object.
 * Reference: https://developers.google.com/api-client-library/javascript/reference/referencedocs#gapiauth2initparams
 * @param {!gapi.auth2.ClientConfig} params
 * @return {!gapi.auth2.GoogleAuth}
 */
gapi.auth2.init = function(params) {};

/**
 * Returns the GoogleAuth object. You must initialize the GoogleAuth object with gapi.auth2.init() before calling this method.
 * @return {!gapi.auth2.GoogleAuth}
 */
gapi.auth2.getAuthInstance = function() {};

/**
 * Performs a one time OAuth 2.0 authorization.
 * Reference: https://developers.google.com/api-client-library/javascript/reference/referencedocs#gapiauth2authorizeparams-callback
 * @param {!gapi.auth2.AuthorizeConfig} params
 * @param {function(!gapi.auth2.AuthorizeResponse): void} callback
 * @return {void}
 */
gapi.auth2.authorize = function(params, callback) {};
/** @const */
gapi.signin2 = {};

/**
 * @param {?} id
 * @param {{scope: string, width: number, height: number, longtitle: boolean, theme: string, onsuccess: function(!gapi.auth2.GoogleUser): void, onfailure: function(): void, app_package_name: string}} options
 * @return {void}
 */
gapi.signin2.render = function(id, options) {};
