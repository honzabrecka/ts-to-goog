/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cordova-plugin-contacts/index.d.ts:
 /** @type {!Contacts} */
Navigator.prototype.contacts;
/**
 * @record
 * @struct
 */
function Contacts() {}
 /** @type {{addresses: string, birthday: string, categories: string, country: string, department: string, displayName: string, emails: string, familyName: string, formatted: string, givenName: string, honorificPrefix: string, honorificSuffix: string, id: string, ims: string, locality: string, middleName: string, name: string, nickname: string, note: string, organizations: string, phoneNumbers: string, photos: string, postalCode: string, region: string, streetAddress: string, title: string, urls: string}} */
Contacts.prototype.fieldType;

/**
 * The navigator.contacts.create method is synchronous, and returns a new Contact object.
 * This method does not retain the Contact object in the device contacts database,
 * for which you need to invoke the Contact.save method.
 * @param {!ContactProperties=} properties Object with contact fields
 * @return {?}
 */
Contacts.prototype.create = function(properties) {};

/**
 * The navigator.contacts.find method executes asynchronously, querying the device contacts database
 * and returning an array of Contact objects. The resulting objects are passed to the onSuccess
 * callback function specified by the onSuccess parameter.
 * @param {!Array<string>} fields The fields parameter specifies the fields to be used as a search qualifier,
 * and only those results are passed to the onSuccess callback function. A zero-length fields parameter
 * is invalid and results in ContactError.INVALID_ARGUMENT_ERROR. A contactFields value of "*" returns all contact fields.
 * @param {function(!Array<?>): void} onSuccess Success callback function invoked with the array of Contact objects returned from the database
 * @param {function(?): void=} onError Error callback function, invoked when an error occurs.
 * @param {?=} options Search options to filter navigator.contacts.
 * @return {void}
 */
Contacts.prototype.find = function(fields, onSuccess, onError, options) {};

/**
 * The navigator.contacts.pickContact method launches the Contact Picker to select a single contact.
 * The resulting object is passed to the contactSuccess callback function specified by the contactSuccess parameter.
 * @param {function(?): void} onSuccess Success callback function invoked with the array of Contact objects returned from the database
 * @param {function(?): void} onError Error callback function, invoked when an error occurs.
 * @return {void}
 */
Contacts.prototype.pickContact = function(onSuccess, onError) {};
/**
 * @record
 * @struct
 */
function ContactProperties() {}
 /** @type {string} */
ContactProperties.prototype.id;
 /** @type {string} */
ContactProperties.prototype.displayName;
 /** @type {?} */
ContactProperties.prototype.name;
 /** @type {string} */
ContactProperties.prototype.nickname;
 /** @type {!Array<?>} */
ContactProperties.prototype.phoneNumbers;
 /** @type {!Array<?>} */
ContactProperties.prototype.emails;
 /** @type {!Array<?>} */
ContactProperties.prototype.addresses;
 /** @type {!Array<?>} */
ContactProperties.prototype.ims;
 /** @type {!Array<?>} */
ContactProperties.prototype.organizations;
 /** @type {!Date} */
ContactProperties.prototype.birthday;
 /** @type {string} */
ContactProperties.prototype.note;
 /** @type {!Array<?>} */
ContactProperties.prototype.photos;
 /** @type {!Array<?>} */
ContactProperties.prototype.categories;
 /** @type {!Array<?>} */
ContactProperties.prototype.urls;
/**
 * @extends {ContactProperties}
 * @record
 * @struct
 */
function Contact() {}

/**
 * Returns a new Contact object that is a deep copy of the calling object, with the id property set to null
 * @return {?}
 */
Contact.prototype.clone = function() {};

/**
 * Removes the contact from the device contacts database, otherwise executes an error callback with a ContactError object.
 * @param {function(): void} onSuccess Success callback function invoked on success operation.
 * @param {function(!Error): void} onError Error callback function, invoked when an error occurs.
 * @return {void}
 */
Contact.prototype.remove = function(onSuccess, onError) {};

/**
 * Saves a new contact to the device contacts database, or updates an existing contact if a contact with the same id already exists.
 * @param {function(?): void} onSuccess Success callback function invoked on success operation with che Contact object.
 * @param {function(!Error): void} onError Error callback function, invoked when an error occurs.
 * @return {void}
 */
Contact.prototype.save = function(onSuccess, onError) {};
 /** @type {function(new: (?), string, string, ?, string, !Array<?>, !Array<?>, !Array<?>, !Array<?>, !Array<?>, !Date, string, !Array<?>, ?, !Array<?>): ?} */
var Contact;
/**
 * @record
 * @struct
 */
function ContactError() {}
 /** @type {number} */
ContactError.prototype.code;
 /** @type {string} */
ContactError.prototype.message;
 /** @type {function(new: (?), number): ?} */
var ContactError;
/**
 * @record
 * @struct
 */
function ContactName() {}
 /** @type {string} */
ContactName.prototype.formatted;
 /** @type {string} */
ContactName.prototype.familyName;
 /** @type {string} */
ContactName.prototype.givenName;
 /** @type {string} */
ContactName.prototype.middleName;
 /** @type {string} */
ContactName.prototype.honorificPrefix;
 /** @type {string} */
ContactName.prototype.honorificSuffix;
 /** @type {function(new: (?), string, string, string, string, string, string): ?} */
var ContactName;
/**
 * @record
 * @struct
 */
function ContactField() {}
 /** @type {string} */
ContactField.prototype.type;
 /** @type {string} */
ContactField.prototype.value;
 /** @type {boolean} */
ContactField.prototype.pref;
 /** @type {function(new: (?), string, string, boolean): ?} */
var ContactField;
/**
 * @record
 * @struct
 */
function ContactAddress() {}
 /** @type {boolean} */
ContactAddress.prototype.pref;
 /** @type {string} */
ContactAddress.prototype.type;
 /** @type {string} */
ContactAddress.prototype.formatted;
 /** @type {string} */
ContactAddress.prototype.streetAddress;
 /** @type {string} */
ContactAddress.prototype.locality;
 /** @type {string} */
ContactAddress.prototype.region;
 /** @type {string} */
ContactAddress.prototype.postalCode;
 /** @type {string} */
ContactAddress.prototype.country;
 /** @type {function(new: (?), boolean, string, string, string, string, string, string, string): ?} */
var ContactAddress;
/**
 * @record
 * @struct
 */
function ContactOrganization() {}
 /** @type {boolean} */
ContactOrganization.prototype.pref;
 /** @type {string} */
ContactOrganization.prototype.type;
 /** @type {string} */
ContactOrganization.prototype.name;
 /** @type {string} */
ContactOrganization.prototype.department;
 /** @type {string} */
ContactOrganization.prototype.title;
 /** @type {function(new: (?), boolean, string, string, string, string): ?} */
var ContactOrganization;
/**
 * @record
 * @struct
 */
function ContactFindOptions() {}
 /** @type {string} */
ContactFindOptions.prototype.filter;
 /** @type {boolean} */
ContactFindOptions.prototype.multiple;
 /** @type {!Array<string>} */
ContactFindOptions.prototype.desiredFields;

/** @typedef {string} */
var ContactFieldType;
 /** @type {function(new: (?), string, boolean, !Array<string>): ?} */
var ContactFindOptions;
