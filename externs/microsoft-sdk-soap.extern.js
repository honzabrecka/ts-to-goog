/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/microsoft-sdk-soap/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var Sdk = {};
/**
 * @record
 * @struct
 */
Sdk.IEntityView = function() {};
 /** @type {!Sdk.AttributeCollection} */
Sdk.IEntityView.prototype.attributes;
 /** @type {!Sdk.EntityState} */
Sdk.IEntityView.prototype.entityState;
 /** @type {string} */
Sdk.IEntityView.prototype.id;
 /** @type {string} */
Sdk.IEntityView.prototype.logicalName;
 /** @type {!Sdk.RelatedEntityCollection} */
Sdk.IEntityView.prototype.relatedEntities;
/**
 * @record
 * @struct
 */
Sdk.IEntityCollectionView = function() {};
 /** @type {string} */
Sdk.IEntityCollectionView.prototype.entityName;
 /** @type {!Array<!Sdk.IEntityView>} */
Sdk.IEntityCollectionView.prototype.entities;
 /** @type {string} */
Sdk.IEntityCollectionView.prototype.minActiveRowVersion;
 /** @type {boolean} */
Sdk.IEntityCollectionView.prototype.moreRecords;
 /** @type {string} */
Sdk.IEntityCollectionView.prototype.pagingCookie;
 /** @type {number} */
Sdk.IEntityCollectionView.prototype.totalRecordCount;
 /** @type {boolean} */
Sdk.IEntityCollectionView.prototype.totalRecordCountLimitExceeded;
/**
 * @record
 * @struct
 */
Sdk.IEntityReferenceView = function() {};
 /** @type {string} */
Sdk.IEntityReferenceView.prototype.Id;
 /** @type {string} */
Sdk.IEntityReferenceView.prototype.Type;
 /** @type {string} */
Sdk.IEntityReferenceView.prototype.Name;
/**
 * @record
 * @struct
 */
Sdk.IEntityReferenceCollectionView = function() {};
/**
 * @constructor
 * @struct
 */
Sdk.Q = function() {};

/**
 * Creates a link between records.
 * @param {string} entityName The logical name of the entity that is specified in the entityId parameter.
 * @param {string} entityId The ID of the record to which the related records are associated.
 * @param {string} relationship The name of the relationship to be used to create the link.
 * @param {!Sdk.Collection<!Sdk.EntityReference>} relatedEntities A collection of Sdk.EntityReference objects to be associated.
 * @return {?<void>}
 */
Sdk.Q.associate = function(entityName, entityId, relationship, relatedEntities) {};

/**
 * Creates an entity record and returns a string representation of the GUID value that is the Id of the created entity.
 * @param {!Sdk.Entity} entity An entity instance.
 * @return {?<string>}
 */
Sdk.Q.create = function(entity) {};

/**
 * Deletes an entity record
 * @param {string} entityName The LogicalName of the entity to delete.
 * @param {string} id An ID of the record to delete.
 * @return {?<void>}
 */
Sdk.Q.del = function(entityName, id) {};

/**
 * Removes a link between records.
 * @param {string} entityName The logical name of the entity that is specified in the entityId parameter.
 * @param {string} entityId The ID of the record to which the related records are disassociated.
 * @param {string} relationship The name of the relationship to be used to remove the link.
 * @param {!Sdk.Collection<!Sdk.EntityReference>} relatedEntities A collection of Sdk.EntityReference objects to be disassociated.
 * @return {?<void>}
 */
Sdk.Q.disassociate = function(entityName, entityId, relationship, relatedEntities) {};

/**
 * Executes a SOAP Request using the SOAPAction Execute.
 * @param {!Sdk.OrganizationRequest} request A request object.
 * @return {?<!Sdk.OrganizationResponse>}
 */
Sdk.Q.execute = function(request) {};

/**
 * Retrieves an entity instance.
 * @param {string} entityName The logical name of the entity to retrieve.
 * @param {string} id The id of the entity to retrieve.
 * @param {!Sdk.ColumnSet} columnSet The columns of the entities to retrieve.
 * @return {?<!Sdk.Entity>}
 */
Sdk.Q.retrieve = function(entityName, id, columnSet) {};

/**
 * Retrieves the results of a query
 * Retrieves the results of a query
 * Retrieves the results of a query
 * @param {!Sdk.Query.QueryByAttribute|!Sdk.Query.QueryExpression|!Sdk.Query.FetchExpression} query An Sdk.Query.QueryByAttribute query. / An Sdk.Query.QueryExpression query. / An Sdk.Query.FetchExpression query.
 * @return {?<!Sdk.EntityCollection>}
 */
Sdk.Q.retrieveMultiple = function(query) {};

/**
 * Updates an entity instance.
 * @param {!Sdk.Entity} entity An entity instance to update.
 * @return {?<boolean>}
 */
Sdk.Q.update = function(entity) {};

/**
 * @constructor
 * @struct
 * Specifies the attributes for which non- null values are returned from a query.
 * Specifies the attributes for which non- null values are returned from a query.
 * Specifies the attributes for which non- null values are returned from a query.
 * @param {...string|!Array<string>|boolean} columns_or_allColumns Comma separated string values for attribute logical names. / An array of string values. / If Boolean true value is passed as the first parameter all columns will be included. (Not recommended for production code).
 */
Sdk.ColumnSet = function(columns_or_allColumns) {};

/**
 * Gets the collection of column names.
 * @return {!Sdk.Collection<string>} The collection of column names.
 */
Sdk.ColumnSet.prototype.getColumns = function() {};

/**
 * Adds a column to the collection.
 * @param {string} column The logical name of the attribute to add.
 * @return {void}
 */
Sdk.ColumnSet.prototype.addColumn = function(column) {};

/**
 * Adds a string array of column names.
 * @param {!Array<string>} columns A string array of column names.
 * @return {void}
 */
Sdk.ColumnSet.prototype.addColumns = function(columns) {};

/**
 * Sets the AllColumns property.
 * \@params allColumns A boolean value.
 * @param {boolean} allColumns
 * @return {void}
 */
Sdk.ColumnSet.prototype.setAllColumns = function(allColumns) {};

/**
 * Whether all columns will be returned.
 * @return {boolean}
 */
Sdk.ColumnSet.prototype.getAllColumns = function() {};

/**
 * Gets the number of columns.
 * @return {number}
 */
Sdk.ColumnSet.prototype.getCount = function() {};

/**
 * Removes a column from the ColumnSet.
 * @param {string} columnName The logical name of an attribute to be removed from the ColumnSet.
 * @param {boolean=} errorIfNotFound Whether to throw an error when the column to remove is not found. The default is false
 * @return {void}
 */
Sdk.ColumnSet.prototype.removeColumn = function(columnName, errorIfNotFound) {};

/**
 * The XML node with "<d:columnSet>" as the root element.
 * @return {string}
 */
Sdk.ColumnSet.prototype.toXml = function() {};

/**
 * XML nodes for columnSet properties.
 * @return {string}
 */
Sdk.ColumnSet.prototype.toValueXml = function() {};
/**
 * @constructor
 * @struct
 */
Sdk.ValueType = function() {};

/**
 * @constructor
 * @struct
 * A Collection for a specified type.
 * @param {T} type The function that specifies the type.
 * @param {!Array<T>=} items An array of items to add to the collection.
 */
Sdk.Collection = function(type, items) {};

/**
 * Gets the type defined for the collection.
 * @return {T}
 */
Sdk.Collection.prototype.getType = function() {};

/**
 * Adds an item to the collection.
 * @param {T} item An item to add to the collection.
 * @return {void}
 */
Sdk.Collection.prototype.add = function(item) {};

/**
 * Adds an array of objects to the collection.
 * @param {!Array<?>} items An array of items to add to the collection.
 * @return {void}
 */
Sdk.Collection.prototype.addRange = function(items) {};

/**
 * Removes all items from the collection.
 * @return {void}
 */
Sdk.Collection.prototype.clear = function() {};

/**
 * Returns whether an object exists within the collection.
 * Returns whether an object exists within the collection.
 * @param {T|function(T): boolean} item_or_predicate The item to search in the collection. / A comparer function which is invoked for each item of the collection.
 * @return {boolean}
 */
Sdk.Collection.prototype.contains = function(item_or_predicate) {};

/**
 * Returns an Sdk.Collection that contains all the items of this collection that satisfy the specified predicate function.
 * @param {function(T): boolean} predicate A predicate function that takes a collection item as argument and returns a boolean.
 * @return {!Sdk.Collection}
 */
Sdk.Collection.prototype.select = function(predicate) {};

/**
 * Applies the action contained within a delegate function.
 * @param {function(T, number): ?} fn Delegate function with parameters for item and index.
 * @return {void}
 */
Sdk.Collection.prototype.forEach = function(fn) {};

/**
 * Gets the item in the collection at the specified index.
 * @param {number} index The index of the item to return.
 * @return {T}
 */
Sdk.Collection.prototype.getByIndex = function(index) {};

/**
 * Removes an item from the collection.
 * @param {T} item A reference to the item to be removed.
 * @return {void}
 */
Sdk.Collection.prototype.remove = function(item) {};

/**
 * Gets a copy of the array of items in the collection.
 * @return {!Array<T>}
 */
Sdk.Collection.prototype.toArray = function() {};

/**
 * Returns the number of items in the collection.
 * @return {number}
 */
Sdk.Collection.prototype.getCount = function() {};

/**
 * @constructor
 * @struct
 * Contains a collection of entity instances.
 * @param {!Sdk.Collection<!Sdk.Entity>} entities Initializes a new instance of the EntityCollection class setting the Sdk.Collection of Sdk.Entity objects.
 */
Sdk.EntityCollection = function(entities) {};

/**
 * Adds an entity to the collection.
 * @param {!Sdk.Entity} entity
 * @return {void}
 */
Sdk.EntityCollection.prototype.addEntity = function(entity) {};

/**
 * Gets the collection of entities.
 * @return {!Sdk.Collection<!Sdk.Entity>}
 */
Sdk.EntityCollection.prototype.getEntities = function() {};

/**
 * Gets an entity in the collection.
 * Gets an entity in the collection.
 * @param {number|!Sdk.Guid} index_or_id The index of the entity in the collection. / The id of the entity in the collection.
 * @return {!Sdk.Entity}
 */
Sdk.EntityCollection.prototype.getEntity = function(index_or_id) {};

/**
 * Sets an item in the collection.
 * Sets an item in the collection.
 * @param {number|!Sdk.Guid} index_or_id The index of the entity in the collection. / The Sdk.Guid id of the entity in the collection.
 * @param {!Sdk.Entity} value The Sdk.Entity value to set.
 * @return {void}
 */
Sdk.EntityCollection.prototype.setEntity = function(index_or_id, value) {};

/**
 * Gets the logical name of the entity.
 * @return {string}
 */
Sdk.EntityCollection.prototype.getEntityName = function() {};

/**
 * Sets the logical name of the entity.
 * @param {string} name The logical name of the entity.
 * @return {void}
 */
Sdk.EntityCollection.prototype.setEntityName = function(name) {};

/**
 * Gets the lowest active row version value.
 * @return {string}
 */
Sdk.EntityCollection.prototype.getMinActiveRowVersion = function() {};

/**
 * Sets the lowest active row version value.
 * @param {string} minActiveRowVersion The lowest active row version value.
 * @return {void}
 */
Sdk.EntityCollection.prototype.setMinActiveRowVersion = function(minActiveRowVersion) {};

/**
 * Gets whether there are more records available.
 * @return {boolean}
 */
Sdk.EntityCollection.prototype.getMoreRecords = function() {};

/**
 * Sets whether there are more records available.
 * @param {boolean} moreRecords Whether there are more records available.
 * @return {void}
 */
Sdk.EntityCollection.prototype.setMoreRecords = function(moreRecords) {};

/**
 * Gets the current paging information.
 * @return {string}
 */
Sdk.EntityCollection.prototype.getPagingCookie = function() {};

/**
 * Sets the current paging information.
 * @param {string} pagingCookie The current paging information.
 * @return {void}
 */
Sdk.EntityCollection.prototype.setPagingCookie = function(pagingCookie) {};

/**
 * Gets the total number of records in the collection if ReturnTotalRecordCount was true when the query was executed.
 * @return {number}
 */
Sdk.EntityCollection.prototype.getTotalRecordCount = function() {};

/**
 * Sets the total number of records in the collection if ReturnTotalRecordCount was true when the query was executed.
 * @param {number} totalRecordCount The total number of records in the collection if ReturnTotalRecordCount was true when the query was executed.
 * @return {void}
 */
Sdk.EntityCollection.prototype.setTotalRecordCount = function(totalRecordCount) {};

/**
 * Gets whether the results of the query exceeds the total record count.
 * @return {boolean}
 */
Sdk.EntityCollection.prototype.getTotalRecordCountLimitExceeded = function() {};

/**
 * Sets whether the results of the query exceeds the total record count.
 * @param {boolean} totalRecordCountLimitExceeded Whether the results of the query exceeds the total record count.
 * @return {void}
 */
Sdk.EntityCollection.prototype.setTotalRecordCountLimitExceeded = function(totalRecordCountLimitExceeded) {};

/**
 * XML definition of an the child nodes of an entity.
 * @return {string}
 */
Sdk.EntityCollection.prototype.toValueXml = function() {};

/**
 * Returns a view of the entity collection
 * @return {!Sdk.IEntityCollectionView}
 */
Sdk.EntityCollection.prototype.view = function() {};

/**
 * @constructor
 * @struct
 * Contains a collection of EntityReference instances.
 * @param {!Sdk.Collection<!Sdk.EntityReference>=} entityReferences Initializes a new instance of the EntityReferenceCollection class setting the Sdk.Collection of Sdk.EntityReference objects.
 */
Sdk.EntityReferenceCollection = function(entityReferences) {};

/**
 * Gets the collection of entity references.
 * @return {!Sdk.Collection<!Sdk.EntityReference>}
 */
Sdk.EntityReferenceCollection.prototype.getEntityReferences = function() {};

/**
 * Sets the collection of entity references.
 * @param {!Sdk.Collection<!Sdk.EntityReference>} entityReferences The entity references
 * @return {void}
 */
Sdk.EntityReferenceCollection.prototype.setEntityReferences = function(entityReferences) {};

/**
 * Removes an entity reference to the collection.
 * @param {!Sdk.EntityReference} entityReference The entity reference to remove.
 * @return {void}
 */
Sdk.EntityReferenceCollection.prototype.remove = function(entityReference) {};

/**
 * Returns a view of the data in an entity reference collection instance.
 * @return {!Sdk.IEntityReferenceCollectionView}
 */
Sdk.EntityReferenceCollection.prototype.view = function() {};

/**
 * Returns the values of serialized entity reference collection as XML nodes.
 * @return {string}
 */
Sdk.EntityReferenceCollection.prototype.toValueXml = function() {};
/**
 * @extends {Sdk.EntityCollection}
 * @constructor
 * @struct
 */
Sdk.RelatedEntityCollection = function() {};

/**
 * @constructor
 * @struct
 */
Sdk.AttributeCollection = function() {};

/**
 * Adds an attribute to the Attribute Collection.
 * @param {!Sdk.AttributeBase} attribute The attribute to add.
 * @param {boolean=} isChanged Override the the attribute IsChanged value.
 * @return {void}
 */
Sdk.AttributeCollection.prototype.add = function(attribute, isChanged) {};

/**
 * Gets the attributes in the collection.
 * @return {!Sdk.Collection<!Sdk.AttributeBase>}
 */
Sdk.AttributeCollection.prototype.getAttributes = function() {};

/**
 * Allows for a delegate function to be applied to each attribute in the collection.
 * @param {function(!Sdk.AttributeBase, number): ?} fn
 * @return {void}
 */
Sdk.AttributeCollection.prototype.forEach = function(fn) {};

/**
 * Returns all attributes in the collection.
 * Returns the attribute with matching name.
 * Returns the attribute with matching index.
 * @param {string|number=} attribuetName_or_index
 * @return {!Sdk.Collection<!Sdk.AttributeBase>|!Sdk.AttributeBase}
 */
Sdk.AttributeCollection.prototype.get = function(attribuetName_or_index) {};

/**
 * Gets an attribute at a given index.
 * @param {number} index The index.
 * @return {!Sdk.AttributeBase}
 */
Sdk.AttributeCollection.prototype.getAttributeByIndex = function(index) {};

/**
 * Gets an attribute with a given name.
 * @param {string} name The Logical name of the attribute.
 * @return {!Sdk.AttributeBase}
 */
Sdk.AttributeCollection.prototype.getAttributeByName = function(name) {};

/**
 * Gets an array of the names of attributes in a collection.
 * @return {!Array<string>}
 */
Sdk.AttributeCollection.prototype.getNames = function() {};

/**
 * The XML for an attribute collection.
 * @param {string} action
 * @return {string}
 */
Sdk.AttributeCollection.prototype.toXml = function(action) {};
/**
 * @constructor
 * @struct
 */
Sdk.FormattedValueCollection = function() {};
/**
 * @constructor
 * @struct
 */
Sdk.RelatedEntitiesCollection = function() {};
/**
 * @constructor
 * @struct
 */
Sdk.AttributeBase = function() {};

/**
 * Gets whether the value of the attribute has changed.
 * @return {boolean}
 */
Sdk.AttributeBase.prototype.getIsChanged = function() {};

/**
 * Gets the logical name of the attribute.
 * @return {string}
 */
Sdk.AttributeBase.prototype.getName = function() {};

/**
 * Gets the value type of the attribute.
 * @return {!Sdk.ValueType}
 */
Sdk.AttributeBase.prototype.getType = function() {};

/**
 * Gets the value of the attribute.
 * The type of value depends on the type of attribute.
 * @return {?}
 */
Sdk.AttributeBase.prototype.getValue = function() {};

/**
 * Whether the value of the attribute is set.
 * @return {boolean}
 */
Sdk.AttributeBase.prototype.isValueSet = function() {};

/**
 * Sets whether the value of the attribute has changed.
 * @param {boolean} isChanged Whether the value of the attribute has changed.
 * @return {void}
 */
Sdk.AttributeBase.prototype.setIsChanged = function(isChanged) {};

/**
 * Sets the name of the attribute
 * @param {string} name The name of the attribute.
 * @return {void}
 */
Sdk.AttributeBase.prototype.setName = function(name) {};

/**
 * For internal use only.
 * @param {!Sdk.ValueType} type The type of the attribute.
 * @return {void}
 */
Sdk.AttributeBase.prototype.setType = function(type) {};

/**
 * Sets the general value of the attribute
 * @param {?} value
 * @return {void}
 */
Sdk.AttributeBase.prototype.setValue = function(value) {};

/**
 * XML node for Attribute.
 * @param {string} action
 * @return {string}
 */
Sdk.AttributeBase.prototype.toXml = function(action) {};

/**
 * @constructor
 * @struct
 * A Boolean Attribute.
 * @param {string} name The logical name of the attribute .
 * @param {boolean=} value The value of the managed property.
 */
Sdk.Boolean = function(name, value) {};

/**
 * Gets the value of a Boolean attribute.
 * @return {boolean}
 */
Sdk.Boolean.prototype.getValue = function() {};

/**
 * Sets the value of a Boolean attribute.
 * @param {boolean} value
 * @return {void}
 */
Sdk.Boolean.prototype.setValue = function(value) {};

/**
 * @constructor
 * @struct
 * A DateTime Attribute.
 * @param {string} name The logical name of the attribute.
 * @param {!Date=} value The value of the attribute.
 */
Sdk.DateTime = function(name, value) {};

/**
 * Gets the value of a DateTime attribute.
 * @return {!Date}
 */
Sdk.DateTime.prototype.getValue = function() {};

/**
 * Sets the value of a DateTime attribute.
 * @param {!Date} value The value to set.
 * @return {void}
 */
Sdk.DateTime.prototype.setValue = function(value) {};

/**
 * @constructor
 * @struct
 * A Decimal Attribute.
 * @param {string} name The logical name of the attribute.
 * @param {number=} value The value of the attribute.
 */
Sdk.Decimal = function(name, value) {};

/**
 * Gets the value of a Decimal attribute.
 * @return {number}
 */
Sdk.Decimal.prototype.getValue = function() {};

/**
 * Sets the value of a Decimal attribute.
 * @param {number} value The value to set.
 * @return {void}
 */
Sdk.Decimal.prototype.setValue = function(value) {};

/**
 * @constructor
 * @struct
 * A Double Attribute.
 * @param {string} name The logical name of the attribute.
 * @param {number=} value The value of the attribute.
 */
Sdk.Double = function(name, value) {};

/**
 * Gets the value of a Double attribute.
 * @return {number}
 */
Sdk.Double.prototype.getValue = function() {};

/**
 * Sets the value of a Double attribute.
 * @param {number} value The value to set.
 * @return {void}
 */
Sdk.Double.prototype.setValue = function(value) {};

/**
 * @constructor
 * @struct
 * A Guid Attribute.
 * @param {string} name The logical name of the attribute.
 * @param {string=} value
 */
Sdk.Guid = function(name, value) {};

/**
 * Gets the value of a Guid attribute.
 * @return {string}
 */
Sdk.Guid.prototype.getValue = function() {};

/**
 * Sets the value of a Guid attribute.
 * @param {string} value The value to set.
 * @return {void}
 */
Sdk.Guid.prototype.setValue = function(value) {};

/**
 * @constructor
 * @struct
 * An Integer Attribute.
 * @param {string} name The logical name of the attribute.
 * @param {number=} value The value of the attribute.
 */
Sdk.Int = function(name, value) {};

/**
 * Gets the value of an Integer attribute.
 * @return {number}
 */
Sdk.Int.prototype.getValue = function() {};

/**
 * Sets the value of an Integer attribute.
 * @param {number} value The value to set.
 * @return {void}
 */
Sdk.Int.prototype.setValue = function(value) {};

/**
 * @constructor
 * @struct
 * A Long Attribute.
 * @param {string} name The logical name of the attribute.
 * @param {number=} value The value of the attribute.
 */
Sdk.Long = function(name, value) {};

/**
 * Gets the value of a Long attribute.
 * @return {number}
 */
Sdk.Long.prototype.getValue = function() {};

/**
 * Sets the value of a Long attribute.
 * @param {number} value The value to set.
 * @return {void}
 */
Sdk.Long.prototype.setValue = function(value) {};

/**
 * @constructor
 * @struct
 * A Lookup Attribute.
 * @param {string} name The logical name of the attribute.
 * @param {!Sdk.EntityReference=} value The value of the attribute.
 */
Sdk.Lookup = function(name, value) {};

/**
 * Gets the value of a Lookup attribute.
 * @return {!Sdk.EntityReference}
 */
Sdk.Lookup.prototype.getValue = function() {};

/**
 * Sets the value of a Lookup attribute.
 * @param {!Sdk.EntityReference} value The value to set.
 * @return {void}
 */
Sdk.Lookup.prototype.setValue = function(value) {};

/**
 * @constructor
 * @struct
 * A Money Attribute.
 * @param {string} name The logical name of the attribute.
 * @param {number=} value The value of the attribute.
 */
Sdk.Money = function(name, value) {};

/**
 * Gets the value of a Money attribute.
 * @return {number}
 */
Sdk.Money.prototype.getValue = function() {};

/**
 * Sets the value of a Money attribute.
 * @param {number} value The value to set.
 * @return {void}
 */
Sdk.Money.prototype.setValue = function(value) {};

/**
 * @constructor
 * @struct
 * An OptionSet Attribute.
 * @param {string} name The logical name of the attribute.
 * @param {number=} value The value of the attribute.
 */
Sdk.OptionSet = function(name, value) {};

/**
 * Gets the value of a OptionSet attribute.
 * @return {number}
 */
Sdk.OptionSet.prototype.getValue = function() {};

/**
 * Sets the value of an OptionSet attribute.
 * @param {number} value The value to set.
 * @return {void}
 */
Sdk.OptionSet.prototype.setValue = function(value) {};

/**
 * @constructor
 * @struct
 * A PartyList Attribute.
 * @param {string} name The logical name of the attribute.
 * @param {!Sdk.EntityCollection=} value The value of the attribute.
 */
Sdk.PartyList = function(name, value) {};

/**
 * Gets the value of a PartyList attribute.
 * @return {!Sdk.EntityCollection}
 */
Sdk.PartyList.prototype.getValue = function() {};

/**
 * Sets the value of a PartyList attribute.
 * @param {!Sdk.EntityCollection} value The value to set.
 * @return {void}
 */
Sdk.PartyList.prototype.setValue = function(value) {};

/**
 * @constructor
 * @struct
 * A String Attribute.
 * @param {string} name The logical name of the attribute.
 * @param {string=} value The value of the attribute.
 */
Sdk.String = function(name, value) {};

/**
 * Gets the value of a String attribute.
 * @return {string}
 */
Sdk.String.prototype.getValue = function() {};

/**
 * Sets the value of a String attribute.
 * @param {string} value The value to set.
 * @return {void}
 */
Sdk.String.prototype.setValue = function(value) {};
/**
 * @constructor
 * @struct
 */
Sdk.EntityState = function() {};

/**
 * @constructor
 * @struct
 * Represents an instance of an entity (a record).
 * @param {string} type The logical name of the entity.
 */
Sdk.Entity = function(type) {};

/**
 * Gets the collection of attributes for the entity.
 * Gets the collection of attributes for the entity.
 * Gets the collection of attributes for the entity.
 * @param {string|number=} attributeName_or_index The attribute with matching name is returned. / The attribute with matching index is returned.
 * @return {!Sdk.AttributeCollection|!Sdk.AttributeBase}
 */
Sdk.Entity.prototype.getAttributes = function(attributeName_or_index) {};

/**
 * Checks whether the entity has an attribute that satisfies the specified predicate.
 * Checks whether the entity has an attribute with the specified name.
 * @param {function(!Sdk.AttributeBase): boolean|string} predicate_or_name
 * @return {boolean}
 */
Sdk.Entity.prototype.containsAttribute = function(predicate_or_name) {};

/**
 * Sets the collection of attributes for the entity.
 * @param {!Sdk.AttributeCollection} attributes The collection of attributes for the entity.
 * @return {void}
 */
Sdk.Entity.prototype.setAttributes = function(attributes) {};

/**
 * Gets the state of the entity.
 * @return {!Sdk.EntityState}
 */
Sdk.Entity.prototype.getEntityState = function() {};

/**
 * Sets the state of the entity.
 * @param {!Sdk.EntityState} state The state of the entity.
 * @return {void}
 */
Sdk.Entity.prototype.setEntityState = function(state) {};

/**
 * Gets the collection of formatted values for the entity attributes.
 * @return {!Sdk.FormattedValueCollection}
 */
Sdk.Entity.prototype.getFormattedValues = function() {};

/**
 * Sets the collection of formatted values for the entity attributes.
 * @param {!Sdk.FormattedValueCollection} values
 * @return {void}
 */
Sdk.Entity.prototype.setFormattedValues = function(values) {};

/**
 * Gets the Id of the record represented by this entity instance.
 * @return {string}
 */
Sdk.Entity.prototype.getId = function() {};

/**
 * Sets the Id of the record represented by this entity instance.
 * @param {string} id The Id of the record represented by this entity instance.
 * @param {boolean=} override Allow setting the Id property, for example when creating a new record from an existing one.
 * @return {void}
 */
Sdk.Entity.prototype.setId = function(id, override) {};

/**
 * Gets the logical name of the entity.
 * @return {string}
 */
Sdk.Entity.prototype.getType = function() {};

/**
 * Sets the logical name of the entity.
 * @param {string} type The logical name of the entity.
 * @return {void}
 */
Sdk.Entity.prototype.setType = function(type) {};

/**
 * Gets a collection of related entities.
 * @return {!Sdk.RelatedEntitiesCollection}
 */
Sdk.Entity.prototype.getRelatedEntities = function() {};

/**
 * Sets a collection of related entities.
 * @param {!Sdk.RelatedEntitiesCollection} relatedEntities A collection of related entities.
 * @return {void}
 */
Sdk.Entity.prototype.setRelatedEntities = function(relatedEntities) {};

/**
 * Adds an attribute with an optional value to a newly instantiated Sdk.Entity
 * @param {!Sdk.AttributeBase} attribute The attribute to add
 * @param {boolean=} isChanged Whether the attribute should be considered changed, the default is true.
 * @return {void}
 */
Sdk.Entity.prototype.addAttribute = function(attribute, isChanged) {};

/**
 * Adds an entity to the related entities.
 * @param {string} relationshipSchemaName The relationship SchemaName.
 * @param {!Sdk.Entity} entity The entity to add.
 * @return {void}
 */
Sdk.Entity.prototype.addRelatedEntity = function(relationshipSchemaName, entity) {};

/**
 * Gets the value to indicate whether data for the entity has changed.
 * @return {boolean}
 */
Sdk.Entity.prototype.getIsChanged = function() {};

/**
 * Sets the value to indicate whether data for the entity has changed.
 * @param {boolean} isChanged The value to indicate whether data for the entity has changed.
 * @return {void}
 */
Sdk.Entity.prototype.setIsChanged = function(isChanged) {};

/**
 * Gets the value of the specified attribute.
 * @param {string} logicalName The logical name of the attribute.
 * @return {?}
 */
Sdk.Entity.prototype.getValue = function(logicalName) {};

/**
 * Generates properties for the entity based on metadata.
 * @param {!Sdk.Mdq.IEntityMetadata} metadata
 * @return {void}
 */
Sdk.Entity.prototype.initializeSubClass = function(metadata) {};

/**
 * Sets the value of the specified attribute.
 * @param {string} logicalName The logical name of the attribute.
 * @param {!Object} value The value for the attribute. Simple JavaScript types may be used for most attribute types. Sdk.EntityReference, Sdk.EntityCollection, and Sdk.BooleanManagedPropertyValue cannot use simple JavaScript types.
 * @return {void}
 */
Sdk.Entity.prototype.setValue = function(logicalName, value) {};

/**
 * Generates an entity reference.
 * @return {!Sdk.EntityReference}
 */
Sdk.Entity.prototype.toEntityReference = function() {};

/**
 * Overrides the default toString method.
 * @return {string}
 */
Sdk.Entity.prototype.toString = function() {};

/**
 * XML definition of an the child nodes of an entity.
 * @param {string} action
 * @return {string}
 */
Sdk.Entity.prototype.toValueXml = function(action) {};

/**
 * XML definition of an entity where the root node is <entity>.
 * @param {string} action
 * @return {string}
 */
Sdk.Entity.prototype.toXml = function(action) {};

/**
 * Returns a view of the data in an entity instance
 * @return {!Sdk.IEntityView}
 */
Sdk.Entity.prototype.view = function() {};

/**
 * @constructor
 * @struct
 * Identifies a record.
 * @param {string} logicalName The logical name of the entity.
 * @param {string} id The id of the record.
 * @param {string=} name The value of the primary attribute of the entity instance. This property can contain a value or null. This property is not automatically populated unless the EntityReference object has been retrieved from the server.
 */
Sdk.EntityReference = function(logicalName, id, name) {};

/**
 * Gets the logicalName representing the type of referenced entity.
 * @return {string}
 */
Sdk.EntityReference.prototype.getType = function() {};

/**
 * Gets the Id value of the referenced entity.
 * @return {string}
 */
Sdk.EntityReference.prototype.getId = function() {};

/**
 * Gets the primary attribute value of the referenced entity.
 * @return {string}
 */
Sdk.EntityReference.prototype.getName = function() {};

/**
 * Sets the logicalName representing the type of referenced entity.
 * @param {string} type The logicalName representing the type of referenced entity.
 * @return {void}
 */
Sdk.EntityReference.prototype.setType = function(type) {};

/**
 * Sets the Id value of the entity.
 * @param {string} id The Id value of the entity.
 * @return {void}
 */
Sdk.EntityReference.prototype.setId = function(id) {};

/**
 * Sets the primary attribute value of the referenced entity.
 * @param {string} name The primary attribute value of the referenced entity.
 * @return {void}
 */
Sdk.EntityReference.prototype.setName = function(name) {};

/**
 * Returns a serialized entity reference where the root element is <a:EntityReference>.
 * @return {string}
 */
Sdk.EntityReference.prototype.toXml = function() {};

/**
 * Returns the values of serialized entity reference as XML nodes.
 * @return {string}
 */
Sdk.EntityReference.prototype.toValueXml = function() {};

/**
 * Returns a view of the data in an EntityReference
 * @return {!Sdk.IEntityReferenceView}
 */
Sdk.EntityReference.prototype.view = function() {};
/**
 * @constructor
 * @struct
 */
Sdk.OrganizationRequest = function() {};

/**
 * Sets the request XML.
 * @param {string} xml The request XML.
 * @return {void}
 */
Sdk.OrganizationRequest.prototype.setRequestXml = function(xml) {};

/**
 * Gets the request XML.
 * @return {string}
 */
Sdk.OrganizationRequest.prototype.getRequestXml = function() {};

/**
 * Sets the response type.
 * @param {!Sdk.OrganizationResponse} type A class that inherits from Sdk.OrganizationResponse.
 * @return {void}
 */
Sdk.OrganizationRequest.prototype.setResponseType = function(type) {};

/**
 * Gets the response type.
 * @return {!Sdk.OrganizationResponse}
 */
Sdk.OrganizationRequest.prototype.getResponseType = function() {};
/**
 * @constructor
 * @struct
 */
Sdk.OrganizationResponse = function() {};

/**
 * @constructor
 * @struct
 * @param {string} fetchXml
 */
Sdk.FetchXmlToQueryExpressionRequest = function(fetchXml) {};

/**
 * Sets the query to convert.
 * @param {string} value
 * @return {void}
 */
Sdk.FetchXmlToQueryExpressionRequest.prototype.setFetchXml = function(value) {};

/**
 * @constructor
 * @struct
 * @param {string} responseXml
 */
Sdk.FetchXmlToQueryExpressionResponse = function(responseXml) {};

/**
 * Gets the results of the query conversion.
 * @return {!Sdk.Query.QueryExpression}
 */
Sdk.FetchXmlToQueryExpressionResponse.prototype.getQuery = function() {};

/**
 * @constructor
 * @struct
 * @param {!Sdk.Query.QueryBase} query
 */
Sdk.QueryExpressionToFetchXmlRequest = function(query) {};

/**
 * Sets the query to convert.
 * @param {!Sdk.Query.QueryBase} query The query.
 * @return {void}
 */
Sdk.QueryExpressionToFetchXmlRequest.prototype.setQuery = function(query) {};

/**
 * @constructor
 * @struct
 * @param {string} responseXml
 */
Sdk.QueryExpressionToFetchXmlResponse = function(responseXml) {};

/**
 * Gets the results of the query conversion.
 * @return {string}
 */
Sdk.QueryExpressionToFetchXmlResponse.prototype.getFetchXml = function() {};

/**
 * @constructor
 * @struct
 * @param {!Sdk.Mdq.EntityQueryExpression} query
 * @param {string=} clientVersionStamp
 * @param {Sdk.Mdq.DeletedMetadataFilters=} deletedMetadataFilters
 */
Sdk.RetrieveMetadataChangesRequest = function(query, clientVersionStamp, deletedMetadataFilters) {};

/**
 * @return {!Array<!Sdk.Mdq.IEntityMetadata>}
 */
Sdk.RetrieveMetadataChangesRequest.prototype.getEntityMetadata = function() {};

/**
 * @return {string}
 */
Sdk.RetrieveMetadataChangesRequest.prototype.getServerVersionStamp = function() {};

/**
 * @return {!Object}
 */
Sdk.RetrieveMetadataChangesRequest.prototype.getDeletedMetadata = function() {};

/**
 * @constructor
 * @struct
 * @param {string} responseXml
 */
Sdk.RetrieveMetadataChangesResponse = function(responseXml) {};

/**
 * 
 * 
 * @return {!Array<!Sdk.Mdq.IEntityMetadata>}
 */
Sdk.RetrieveMetadataChangesResponse.prototype.getEntityMetadata = function() {};

/**
 * 
 * 
 * @return {string}
 */
Sdk.RetrieveMetadataChangesResponse.prototype.getServerVersionStamp = function() {};

/**
 * 
 * 
 * @return {?}
 */
Sdk.RetrieveMetadataChangesResponse.prototype.getDeletedMetadata = function() {};

/**
 * @constructor
 * @struct
 * @param {!Sdk.EntityReference} entityMoniker
 * @param {number} state
 * @param {number} status
 */
Sdk.SetStateRequest = function(entityMoniker, state, status) {};

/**
 * Sets the entity.
 * @param {!Sdk.EntityReference} value The entity.
 * @return {void}
 */
Sdk.SetStateRequest.prototype.setEntityMoniker = function(value) {};

/**
 * Sets the state of the entity record.
 * @param {number} value The state of the entity record.
 * @return {void}
 */
Sdk.SetStateRequest.prototype.setState = function(value) {};

/**
 * Sets the status that corresponds to the State property.
 * @param {number} value The status that corresponds to the State property.
 * @return {void}
 */
Sdk.SetStateRequest.prototype.setStatus = function(value) {};

/**
 * @constructor
 * @struct
 * @param {string} responseXml
 */
Sdk.SetStateResponse = function(responseXml) {};
/** @const */
Sdk.Query = {};

/**
 * @constructor
 * @struct
 * Internal Use Only.
 * @param {string} type An Abstract class for different query classes to inherit from.
 */
Sdk.Query.QueryBase = function(type) {};

/**
 * Gets the columns to include.
 * @return {!Sdk.ColumnSet}
 */
Sdk.Query.QueryBase.prototype.getColumnSet = function() {};

/**
 * Sets the columns to include.
 * Sets the columns to include.
 * Sets the columns to include.
 * @param {...!Sdk.ColumnSet|!Array<string>|string} columns An Sdk.ColumnSet instance. / An array of attribute logical names for the columns to return. / Pass each attribute logical name as an argument.
 * @return {void}
 */
Sdk.Query.QueryBase.prototype.setColumnSet = function(columns) {};

/**
 *
 * @return {string}
 */
Sdk.Query.QueryBase.prototype.getQueryType = function() {};

/**
 * Gets the logical name of the entity.
 * @return {string}
 */
Sdk.Query.QueryBase.prototype.getEntityName = function() {};

/**
 * Sets the logical name of the entity.
 * @param {string} name The logical name of the entity.
 * @return {void}
 */
Sdk.Query.QueryBase.prototype.setEntityName = function(name) {};

/**
 * Gets the number of pages and the number of entity instances per page returned from the query.
 * @return {!Sdk.Query.PagingInfo}
 */
Sdk.Query.QueryBase.prototype.getPageInfo = function() {};

/**
 * Sets the number of pages and the number of entity instances per page returned from the query.
 * @param {!Sdk.Query.PagingInfo} pageInfo The number of pages and the number of entity instances per page returned from the query.
 * @return {void}
 */
Sdk.Query.QueryBase.prototype.setPageInfo = function(pageInfo) {};

/**
 * Adds the specified column to the column set.
 * @param {string} columnName The logical name of the column to add.
 * @return {void}
 */
Sdk.Query.QueryBase.prototype.addColumn = function(columnName) {};

/**
 * Removes a column from the ColumnSet used by the query.
 * @param {string} columnName The logical name of an attribute to be removed from the ColumnSet.
 * @param {boolean=} errorIfNotFound Whether to throw an error when the column to remove is not found. The default is false.
 * @return {void}
 */
Sdk.Query.QueryBase.prototype.removeColumn = function(columnName, errorIfNotFound) {};

/**
 * Gets an Sdk.Collection of Sdk.Query.OrderExpression instances that define the order in which the entity instances are returned from the query.
 * @return {!Sdk.Collection<!Sdk.Query.OrderExpression>}
 */
Sdk.Query.QueryBase.prototype.getOrders = function() {};

/**
 * Gets the number of rows to be returned.
 * @return {number}
 */
Sdk.Query.QueryBase.prototype.getTopCount = function() {};

/**
 * Sets the number of rows to be returned.
 * @param {number} count The number of rows to be returned.
 * @return {void}
 */
Sdk.Query.QueryBase.prototype.setTopCount = function(count) {};

/**
 * Gets the serialized QueryExpression.
 * @return {string}
 */
Sdk.Query.QueryBase.prototype.toXml = function() {};

/**
 * Gets the serialized QueryExpression values.
 * @return {string}
 */
Sdk.Query.QueryBase.prototype.toValueXml = function() {};

/**
 * @constructor
 * @struct
 * Initializes a new instance of the QueryByAttribute class setting the entity name.
 * @param {string} entityName The logical name of the entity.
 * 
 */
Sdk.Query.QueryByAttribute = function(entityName) {};

/**
 * Gets An Sdk.Collection of Sdk.AttributeBase attributes.
 * @return {!Sdk.Collection<!Sdk.AttributeBase>}
 */
Sdk.Query.QueryByAttribute.prototype.getAttributeValues = function() {};

/**
 * Sets an Sdk.Collection of Sdk.Query.OrderExpression instances that define the order in which the entity instances are returned from the query.
 * @param {!Sdk.Collection<!Sdk.Query.OrderExpression>} orders An Sdk.Collection of Sdk.Query.OrderExpression instances that define the order in which the entity instances are returned from the query.
 * @return {void}
 */
Sdk.Query.QueryByAttribute.prototype.setOrders = function(orders) {};

/**
 * Adds the attribute with values to include in the query.
 * @param {!Sdk.AttributeBase} attributeValue One of the classes that inherit from Sdk.AttributeBase including the value to use as criteria.
 * @return {void}
 */
Sdk.Query.QueryByAttribute.prototype.addAttributeValue = function(attributeValue) {};

/**
 * Adds an order to apply to the results of the query.
 * @param {!Sdk.Query.OrderExpression} order An order expression.
 * @return {void}
 */
Sdk.Query.QueryByAttribute.prototype.addOrder = function(order) {};

/**
 * Removes an attribute with values to include in the query.
 * @param {!Sdk.AttributeBase} attributeValue One of the classes that inherit from Sdk.AttributeBase including the value to use as criteria.
 * @param {boolean=} errorIfNotFound Whether to throw an error when the attribute to remove is not found. The default is false.
 * @return {void}
 */
Sdk.Query.QueryByAttribute.prototype.removeAttributeValue = function(attributeValue, errorIfNotFound) {};

/**
 * @constructor
 * @struct
 * Initializes a new instance of the QueryExpression class setting the entity name.
 * @param {string} entityName The name of the entity.
 */
Sdk.Query.QueryExpression = function(entityName) {};

/**
 * Gets the complex condition and logical filter expressions that filter the results of the query.
 * @return {!Sdk.Query.FilterExpression}
 */
Sdk.Query.QueryExpression.prototype.getCriteria = function() {};

/**
 * Sets the complex condition and logical filter expressions that filter the results of the query.
 * @param {!Sdk.Query.FilterExpression} criteria The query condition and filter criteria.
 * @return {void}
 */
Sdk.Query.QueryExpression.prototype.setCriteria = function(criteria) {};

/**
 * Gets whether the results of the query contain duplicate entity instances.
 * @return {boolean}
 */
Sdk.Query.QueryExpression.prototype.getDistinct = function() {};

/**
 * Sets whether the results of the query contain duplicate entity instances.
 * @param {boolean} isDistinct
 * @return {void}
 */
Sdk.Query.QueryExpression.prototype.setDistinct = function(isDistinct) {};

/**
 * Gets an Sdk.Collection of Sdk.Query.LinkEntity instances.
 * @return {!Sdk.Collection<!Sdk.Query.LinkEntity>}
 */
Sdk.Query.QueryExpression.prototype.getLinkEntities = function() {};

/**
 * Gets a value that indicates that no shared locks are issued against the data that would prohibit other transactions from modifying the data in the records returned from the query.
 * @return {boolean}
 */
Sdk.Query.QueryExpression.prototype.getNoLock = function() {};

/**
 * Sets a value that indicates that no shared locks are issued against the data that would prohibit other transactions from modifying the data in the records returned from the query.
 * @param {boolean} isNoLock True if there are no shared locks are issued against the data that would prohibit other transactions from modifying the data in the records returned from the query; otherwise, false.
 * @return {void}
 */
Sdk.Query.QueryExpression.prototype.setNoLock = function(isNoLock) {};

/**
 *  Contains a condition expression used to filter the results of the query.
 * @param {string} entityName The logical name of the entity in the condition expression.
 * @param {string} attributeName The logical name of the attribute in the condition expression.
 * @param {Sdk.Query.ConditionOperator} conditionOperator
 * @param {!Sdk.Query.ValueBase} values The value(s) to compare. Use one of the following classes that inherit from Sdk.Query.ValueBase:
 *          Sdk.Query.Booleans
 *          Sdk.Query.BooleanManagedProperties
 *          Sdk.Query.Dates
 *          Sdk.Query.Decimals
 *          Sdk.Query.Doubles
 *          Sdk.Query.EntityReferences
 *          Sdk.Query.Guids
 *          Sdk.Query.Ints
 *          Sdk.Query.Longs
 *          Sdk.Query.Money
 *          Sdk.Query.OptionSets
 *          Sdk.Query.Strings
 * @return {void}
 */
Sdk.Query.QueryExpression.prototype.addCondition = function(entityName, attributeName, conditionOperator, values) {};

/**
 * Adds the specified link to the query expression setting the entity name to link to, the attribute name to link from and the attribute name to link to.
 * Adds the specified link to the query expression setting the entity name to link to, the attribute name to link from and the attribute name to link to.
 * @param {!Sdk.Query.LinkEntity|string} firstParam An Sdk.Query.LinkEntity instance. / The name of entity to link from.
 * @param {string=} linkFromAttributeName The name of the attribute to link from.
 * @param {string=} linkToAttributeName The name of the attribute to link to.
 * @param {Sdk.Query.JoinOperator=} joinOperator The join operator. The default value is Inner
 * @return {void}
 */
Sdk.Query.QueryExpression.prototype.addLink = function(firstParam, linkFromAttributeName, linkToAttributeName, joinOperator) {};

/**
 * Adds the specified order expression to the query expression.
 * @param {string} attributeName The name of the attribute.
 * @param {Sdk.Query.OrderType} orderType The order, ascending or descending. Ascending is the default if not specified.
 * @return {void}
 */
Sdk.Query.QueryExpression.prototype.addOrder = function(attributeName, orderType) {};
/**
 * @constructor
 * @struct
 */
Sdk.Query.OrderExpression = function() {};

/**
 * @constructor
 * @struct
 * Contains a condition expression used to filter the results of the query.
 * @param {string} entityName
 * @param {string} attributeName
 * @param {Sdk.Query.ConditionOperator} operator
 * @param {!Sdk.Query.ValueBase=} values
 */
Sdk.Query.ConditionExpression = function(entityName, attributeName, operator, values) {};

/**
 * Returns the logical name of the entity in the condition expression.
 * @return {string}
 */
Sdk.Query.ConditionExpression.prototype.getEntityName = function() {};

/**
 * Sets the logical name of the entity in the condition expression.
 * @param {string} name The logical name of the entity in the condition expression.
 * @return {void}
 */
Sdk.Query.ConditionExpression.prototype.setEntityName = function(name) {};

/**
 * Returns the logical name of the attribute in the condition expression.
 * @return {string}
 */
Sdk.Query.ConditionExpression.prototype.getAttributeName = function() {};

/**
 * Sets the logical name of the attribute in the condition expression.
 * @param {string} name The logical name of the attribute in the condition expression.
 * @return {void}
 */
Sdk.Query.ConditionExpression.prototype.setAttributeName = function(name) {};

/**
 * Returns the condition operator.
 * @return {Sdk.Query.ConditionOperator}
 */
Sdk.Query.ConditionExpression.prototype.getOperator = function() {};

/**
 * Sets the condition operator.
 * @param {Sdk.Query.ConditionOperator} operator The condition operator.
 * @return {void}
 */
Sdk.Query.ConditionExpression.prototype.setOperator = function(operator) {};

/**
 * Returns the values for the attribute.
 * @return {!Sdk.Query.ValueBase}
 */
Sdk.Query.ConditionExpression.prototype.getValues = function() {};

/**
 * Sets the values for the attribute.
 * @param {!Sdk.Query.ValueBase} values
 * @return {void}
 */
Sdk.Query.ConditionExpression.prototype.setValues = function(values) {};

/**
 * @constructor
 * @struct
 * @param {Sdk.Query.LogicalOperator} logicalOperator
 */
Sdk.Query.FilterExpression = function(logicalOperator) {};

/**
 * Adds a condition to the filter expression setting the attribute name, condition operator, and values.
 * Adds a condition to the filter expression setting the attribute name, condition operator, and values.
 * @param {!Sdk.Query.ConditionExpression|string} firstParam_or_entityName The entityName of the new ConditionExpression that will be instantiated using the other parameters.
 * @param {string=} attributeName The attribute name to use in the condition expression.
 * @param {Sdk.Query.ConditionOperator=} conditionOperator The condition operator if the first parameter is a string.
 * @param {!Sdk.Query.ValueBase=} values The value(s) to compare.
 *  Use one of the following classes that
 *  - Sdk.Query.Booleans
 *  - Sdk.Query.BooleanManagedProperties
 *  - Sdk.Query.Dates
 *  - Sdk.Query.Decimals
 *  - Sdk.Query.Doubles
 *  - Sdk.Query.EntityReferences
 *  - Sdk.Query.Guids
 *  - Sdk.Query.Ints
 *  - Sdk.Query.Longs
 *  - Sdk.Query.Money
 *  - Sdk.Query.OptionSets
 *  - Sdk.Query.Strings
 * @return {void}
 */
Sdk.Query.FilterExpression.prototype.addCondition = function(firstParam_or_entityName, attributeName, conditionOperator, values) {};

/**
 * Adds a child filter to the filter expression.
 * Adds a child filter to the filter expression.
 * @param {!Sdk.Query.FilterExpression|Sdk.Query.LogicalOperator} filterExpression_or_logicalOperator The filter to add. / Creates new FilterExpression with the specified logical operator and adds it.
 * @return {void}
 */
Sdk.Query.FilterExpression.prototype.addFilter = function(filterExpression_or_logicalOperator) {};

/**
 * Returns a collection of Sdk.Query.ConditionExpression values.
 * @return {!Sdk.Collection<!Sdk.Query.ConditionExpression>}
 */
Sdk.Query.FilterExpression.prototype.getConditions = function() {};

/**
 * Gets the logical AND/OR filter operator.
 * @return {Sdk.Query.LogicalOperator}
 */
Sdk.Query.FilterExpression.prototype.getFilterOperator = function() {};

/**
 * Returns an Sdk.Collection of Sdk.Query.FilterExpression.
 * @return {!Sdk.Collection<!Sdk.Query.FilterExpression>}
 */
Sdk.Query.FilterExpression.prototype.getFilters = function() {};

/**
 * Gets whether the expression is part of a quick find query.
 * @return {boolean}
 */
Sdk.Query.FilterExpression.prototype.getIsQuickFindFilter = function() {};

/**
 * Sets the filter operator.
 * @param {Sdk.Query.LogicalOperator} filterOperator The filter operator.
 * @return {void}
 */
Sdk.Query.FilterExpression.prototype.setFilterOperator = function(filterOperator) {};

/**
 * Sets whether the expression is part of a quick find query.
 * @param {boolean} isQuickFind True if the filter is part of a quick find query; otherwise, false.
 * @return {void}
 */
Sdk.Query.FilterExpression.prototype.setIsQuickFindFilter = function(isQuickFind) {};

/**
 * @constructor
 * @struct
 * @param {string} fetchXml The FetchXml to be used in a query.
 */
Sdk.Query.FetchExpression = function(fetchXml) {};

/**
 * Gets the FetchXml to be used in a query.
 * @return {string}
 */
Sdk.Query.FetchExpression.prototype.getFetchXml = function() {};

/**
 * Sets the FetchXml to be used in a query.
 * @param {string} fetchXml The FetchXml to be used in a query.
 * @return {void}
 */
Sdk.Query.FetchExpression.prototype.setFetchXml = function(fetchXml) {};

/**
 * @constructor
 * @struct
 * Initializes a new instance of the Sdk.Query.LinkEntity class setting the required properties.
 * @param {string} linkFromEntityName The logical name of the entity to link from.
 * @param {string} linkToEntityName The logical name of the entity to link to.
 * @param {string} linkFromAttributeName The name of the attribute to link from.
 * @param {string} linkToAttributeName The name of the attribute to link to.
 * @param {Sdk.Query.JoinOperator} joinOperator The join operator.
 * @param {string} entityAlias The string representing an alias for the linkToEntityName.
 */
Sdk.Query.LinkEntity = function(linkFromEntityName, linkToEntityName, linkFromAttributeName, linkToAttributeName, joinOperator, entityAlias) {};

/**
 * Adds a linked entity.
 * @param {!Sdk.Query.LinkEntity} linkEntity An Sdk.Query.LinkEntity to add.
 * @return {void}
 */
Sdk.Query.LinkEntity.prototype.addLink = function(linkEntity) {};

/**
 * Gets the column set.
 * @return {!Sdk.ColumnSet}
 */
Sdk.Query.LinkEntity.prototype.getColumns = function() {};

/**
 * Sets the columns to include.
 * Sets the columns to include.
 * Sets the columns to include.
 * @param {...!Sdk.ColumnSet|!Array<string>|string} columns An Sdk.ColumnSet instance. / An Array of attribute logical names for the columns to return. / Pass each attribute logical name as an argument.
 * @return {void}
 */
Sdk.Query.LinkEntity.prototype.setColumns = function(columns) {};

/**
 * Gets the alias for the entity.
 * @return {string}
 */
Sdk.Query.LinkEntity.prototype.getEntityAlias = function() {};

/**
 * Sets the alias for the entity.
 * @param {string} alias The alias for the entity.
 * @return {void}
 */
Sdk.Query.LinkEntity.prototype.setEntityAlias = function(alias) {};

/**
 * Gets the join operator.
 * @return {Sdk.Query.JoinOperator}
 */
Sdk.Query.LinkEntity.prototype.getJoinOperator = function() {};

/**
 * Sets the join operator.
 * @param {Sdk.Query.JoinOperator} operator The join operator.
 * @return {void}
 */
Sdk.Query.LinkEntity.prototype.setJoinOperator = function(operator) {};

/**
 * Gets the complex condition and logical filter expressions that filter the results of the query.
 * @return {!Sdk.Query.FilterExpression}
 */
Sdk.Query.LinkEntity.prototype.getLinkCriteria = function() {};

/**
 * Sets the complex condition and logical filter expressions that filter the results of the query.
 * @param {!Sdk.Query.FilterExpression} criteria The complex condition and logical filter expressions that filter the results of the query.
 * @return {void}
 */
Sdk.Query.LinkEntity.prototype.setLinkCriteria = function(criteria) {};

/**
 * Gets the collection of Sdk.Query.LinkEntity that define links between multiple entity types.
 * @return {!Sdk.Collection<!Sdk.Query.LinkEntity>}
 */
Sdk.Query.LinkEntity.prototype.getLinkEntities = function() {};

/**
 * Gets the logical name of the attribute of the entity that you are linking from.
 * @return {string}
 */
Sdk.Query.LinkEntity.prototype.getLinkFromAttributeName = function() {};

/**
 * Sets the logical name of the attribute of the entity that you are linking from.
 * @param {string} name The logical name of the attribute of the entity that you are linking from.
 * @return {void}
 */
Sdk.Query.LinkEntity.prototype.setLinkFromAttributeName = function(name) {};

/**
 * Gets the logical name of the entity that you are linking from.
 * @return {string}
 */
Sdk.Query.LinkEntity.prototype.getLinkFromEntityName = function() {};

/**
 * Sets the logical name of the entity that you are linking from.
 * @param {string} name The logical name of the entity that you are linking from.
 * @return {void}
 */
Sdk.Query.LinkEntity.prototype.setLinkFromEntityName = function(name) {};

/**
 * Gets the logical name of the attribute of the entity that you are linking to
 * @return {string}
 */
Sdk.Query.LinkEntity.prototype.getLinkToAttributeName = function() {};

/**
 * Sets the logical name of the attribute of the entity that you are linking to.
 * @param {string} name The logical name of the attribute of the entity that you are linking to.
 * @return {void}
 */
Sdk.Query.LinkEntity.prototype.setLinkToAttributeName = function(name) {};

/**
 * Gets the logical name of the entity that you are linking to.
 * @return {string}
 */
Sdk.Query.LinkEntity.prototype.getLinkToEntityName = function() {};

/**
 * Sets the logical name of the entity that you are linking to.
 * @param {string} name The logical name of the entity that you are linking to.
 * @return {void}
 */
Sdk.Query.LinkEntity.prototype.setLinkToEntityName = function(name) {};

/**
 * Gets the serialized link entity.
 * @return {string}
 */
Sdk.Query.LinkEntity.prototype.toXml = function() {};

/**
 * Gets the serialized link entity values.
 * @return {string}
 */
Sdk.Query.LinkEntity.prototype.toValueXml = function() {};
/**
 * @constructor
 * @struct
 */
Sdk.Query.PagingInfo = function() {};

/**
 * Gets the number of entity instances returned per page.
 * @return {number}
 */
Sdk.Query.PagingInfo.prototype.getCount = function() {};

/**
 * Sets the number of entity instances returned per page.
 * @param {number} count
 * @return {void}
 */
Sdk.Query.PagingInfo.prototype.setCount = function(count) {};

/**
 * Gets the number of pages returned from the query.
 * @return {number}
 */
Sdk.Query.PagingInfo.prototype.getPageNumber = function() {};

/**
 * Sets the number of pages returned from the query.
 * @param {number} pages
 * @return {void}
 */
Sdk.Query.PagingInfo.prototype.setPageNumber = function(pages) {};

/**
 * Gets the info used to page large result sets.
 * @return {string}
 */
Sdk.Query.PagingInfo.prototype.getPagingCookie = function() {};

/**
 * Sets the info used to page large result sets.
 * @param {string} cookie
 * @return {void}
 */
Sdk.Query.PagingInfo.prototype.setPagingCookie = function(cookie) {};

/**
 * Gets whether the total number of records should be returned from the query.
 * @return {boolean}
 */
Sdk.Query.PagingInfo.prototype.getReturnTotalRecordCount = function() {};

/**
 * Sets whether the total number of records should be returned from the query.
 * @param {boolean} returnTotalRecordsCount
 * @return {void}
 */
Sdk.Query.PagingInfo.prototype.setReturnTotalRecordCount = function(returnTotalRecordsCount) {};

/**
 * Gets the serialized paging info.
 * 
 * toXml():string;
 * /**
 * Gets the serialized paging info values.
 * @return {string}
 */
Sdk.Query.PagingInfo.prototype.toValueXml = function() {};

/** @const */
Sdk.Query.ConditionOperator = {};
/** @const {number} */
Sdk.Query.ConditionOperator.Equal;
/** @const {number} */
Sdk.Query.ConditionOperator.NotEqual;
/** @const {number} */
Sdk.Query.ConditionOperator.GreaterThan;
/** @const {number} */
Sdk.Query.ConditionOperator.LessThan;
/** @const {number} */
Sdk.Query.ConditionOperator.GreaterEqual;
/** @const {number} */
Sdk.Query.ConditionOperator.LessEqual;
/** @const {number} */
Sdk.Query.ConditionOperator.Like;
/** @const {number} */
Sdk.Query.ConditionOperator.NotLike;
/** @const {number} */
Sdk.Query.ConditionOperator.In;
/** @const {number} */
Sdk.Query.ConditionOperator.NotIn;
/** @const {number} */
Sdk.Query.ConditionOperator.Between;
/** @const {number} */
Sdk.Query.ConditionOperator.NotBetween;
/** @const {number} */
Sdk.Query.ConditionOperator.Null;
/** @const {number} */
Sdk.Query.ConditionOperator.NotNull;
/** @const {number} */
Sdk.Query.ConditionOperator.Yesterday;
/** @const {number} */
Sdk.Query.ConditionOperator.Today;
/** @const {number} */
Sdk.Query.ConditionOperator.Tomorrow;
/** @const {number} */
Sdk.Query.ConditionOperator.Last7Days;
/** @const {number} */
Sdk.Query.ConditionOperator.Next7Days;
/** @const {number} */
Sdk.Query.ConditionOperator.LastWeek;
/** @const {number} */
Sdk.Query.ConditionOperator.ThisWeek;
/** @const {number} */
Sdk.Query.ConditionOperator.NextWeek;
/** @const {number} */
Sdk.Query.ConditionOperator.LastMonth;
/** @const {number} */
Sdk.Query.ConditionOperator.ThisMonth;
/** @const {number} */
Sdk.Query.ConditionOperator.NextMonth;
/** @const {number} */
Sdk.Query.ConditionOperator.On;
/** @const {number} */
Sdk.Query.ConditionOperator.OnOrBefore;
/** @const {number} */
Sdk.Query.ConditionOperator.OnOrAfter;
/** @const {number} */
Sdk.Query.ConditionOperator.LastYear;
/** @const {number} */
Sdk.Query.ConditionOperator.ThisYear;
/** @const {number} */
Sdk.Query.ConditionOperator.NextYear;
/** @const {number} */
Sdk.Query.ConditionOperator.LastXHours;
/** @const {number} */
Sdk.Query.ConditionOperator.NextXHours;
/** @const {number} */
Sdk.Query.ConditionOperator.LastXDays;
/** @const {number} */
Sdk.Query.ConditionOperator.NextXDays;
/** @const {number} */
Sdk.Query.ConditionOperator.LastXWeeks;
/** @const {number} */
Sdk.Query.ConditionOperator.NextXWeeks;
/** @const {number} */
Sdk.Query.ConditionOperator.LastXMonths;
/** @const {number} */
Sdk.Query.ConditionOperator.NextXMonths;
/** @const {number} */
Sdk.Query.ConditionOperator.LastXYears;
/** @const {number} */
Sdk.Query.ConditionOperator.NextXYears;
/** @const {number} */
Sdk.Query.ConditionOperator.EqualUserId;
/** @const {number} */
Sdk.Query.ConditionOperator.NotEqualUserId;
/** @const {number} */
Sdk.Query.ConditionOperator.EqualBusinessId;
/** @const {number} */
Sdk.Query.ConditionOperator.NotEqualBusinessId;
/** @const {number} */
Sdk.Query.ConditionOperator.Mask;
/** @const {number} */
Sdk.Query.ConditionOperator.NotMask;
/** @const {number} */
Sdk.Query.ConditionOperator.Contains;
/** @const {number} */
Sdk.Query.ConditionOperator.DoesNotContain;
/** @const {number} */
Sdk.Query.ConditionOperator.EqualUserLanguage;
/** @const {number} */
Sdk.Query.ConditionOperator.NotOn;
/** @const {number} */
Sdk.Query.ConditionOperator.OlderThanXMonths;
/** @const {number} */
Sdk.Query.ConditionOperator.BeginsWith;
/** @const {number} */
Sdk.Query.ConditionOperator.DoesNotBeginWith;
/** @const {number} */
Sdk.Query.ConditionOperator.EndsWith;
/** @const {number} */
Sdk.Query.ConditionOperator.DoesNotEndWith;
/** @const {number} */
Sdk.Query.ConditionOperator.ThisFiscalYear;
/** @const {number} */
Sdk.Query.ConditionOperator.ThisFiscalPeriod;
/** @const {number} */
Sdk.Query.ConditionOperator.NextFiscalYear;
/** @const {number} */
Sdk.Query.ConditionOperator.NextFiscalPeriod;
/** @const {number} */
Sdk.Query.ConditionOperator.LastFiscalYear;
/** @const {number} */
Sdk.Query.ConditionOperator.LastFiscalPeriod;
/** @const {number} */
Sdk.Query.ConditionOperator.LastXFiscalYears;
/** @const {number} */
Sdk.Query.ConditionOperator.LastXFiscalPeriods;
/** @const {number} */
Sdk.Query.ConditionOperator.NextXFiscalYears;
/** @const {number} */
Sdk.Query.ConditionOperator.NextXFiscalPeriods;
/** @const {number} */
Sdk.Query.ConditionOperator.InFiscalYear;
/** @const {number} */
Sdk.Query.ConditionOperator.InFiscalPeriod;
/** @const {number} */
Sdk.Query.ConditionOperator.InFiscalPeriodAndYear;
/** @const {number} */
Sdk.Query.ConditionOperator.InOrBeforeFiscalPeriodAndYear;
/** @const {number} */
Sdk.Query.ConditionOperator.InOrAfterFiscalPeriodAndYear;
/** @const {number} */
Sdk.Query.ConditionOperator.EqualUserOrUserTeams;
/** @const {number} */
Sdk.Query.ConditionOperator.EqualUserTeams;

/** @const */
Sdk.Query.JoinOperator = {};
/** @const {number} */
Sdk.Query.JoinOperator.Inner;
/** @const {number} */
Sdk.Query.JoinOperator.LeftOuter;
/** @const {number} */
Sdk.Query.JoinOperator.Natural;

/** @const */
Sdk.Query.OrderType = {};
/** @const {number} */
Sdk.Query.OrderType.Ascending;
/** @const {number} */
Sdk.Query.OrderType.Descending;
/**
 * @constructor
 * @struct
 */
Sdk.Query.ValueBase = function() {};

/**
 * @constructor
 * @struct
 * @param {!Array<boolean>} args
 */
Sdk.Query.Booleans = function(args) {};

/**
 * Returns the type of value with namespace prefix.
 * @return {string}
 */
Sdk.Query.Booleans.prototype.getType = function() {};

/**
 * Returns an Sdk.Collection of boolean values.
 * @return {!Sdk.Collection<boolean>}
 */
Sdk.Query.Booleans.prototype.getValues = function() {};

/**
 * Specifies a Boolean value to be compared in the query.
 * @param {!Array<boolean>} setValueArgs An array of boolean values.
 * @return {void}
 */
Sdk.Query.Booleans.prototype.setValues = function(setValueArgs) {};

/**
 * @constructor
 * @struct
 * @param {!Array<!Date>} args
 */
Sdk.Query.Dates = function(args) {};

/**
 * Returns the type of value with namespace prefix.
 * @return {string}
 */
Sdk.Query.Dates.prototype.getType = function() {};

/**
 * Returns an Sdk.Collection of Date values.
 * @return {!Sdk.Collection<!Date>}
 */
Sdk.Query.Dates.prototype.getValues = function() {};

/**
 * Specifies the Date values to be compared in the query.
 * @param {!Array<!Date>} setValueArgs An array of Date values.
 * @return {void}
 */
Sdk.Query.Dates.prototype.setValues = function(setValueArgs) {};

/**
 * @constructor
 * @struct
 * @param {!Array<number>} args
 */
Sdk.Query.Decimals = function(args) {};

/**
 * Returns the type of value with namespace prefix.
 * @return {string}
 */
Sdk.Query.Decimals.prototype.getType = function() {};

/**
 * Returns an Sdk.Collection of number values.
 * @return {!Sdk.Collection<number>}
 */
Sdk.Query.Decimals.prototype.getValues = function() {};

/**
 * Specifies the Decimal values to be compared in the query.
 * @param {!Array<number>} setValueArgs An array of number values.
 * @return {void}
 */
Sdk.Query.Decimals.prototype.setValues = function(setValueArgs) {};

/**
 * @constructor
 * @struct
 * @param {!Array<number>} args
 */
Sdk.Query.Doubles = function(args) {};

/**
 * Returns the type of value with namespace prefix.
 * @return {string}
 */
Sdk.Query.Doubles.prototype.getType = function() {};

/**
 * Returns an Sdk.Collection of number values.
 * @return {!Sdk.Collection<number>}
 */
Sdk.Query.Doubles.prototype.getValues = function() {};

/**
 * Specifies the Double values to be compared in the query.
 * @param {!Array<number>} setValueArgs An array of number values.
 * @return {void}
 */
Sdk.Query.Doubles.prototype.setValues = function(setValueArgs) {};

/**
 * @constructor
 * @struct
 * @param {!Array<number>} args
 */
Sdk.Query.Ints = function(args) {};

/**
 * Returns the type of value with namespace prefix.
 * @return {string}
 */
Sdk.Query.Ints.prototype.getType = function() {};

/**
 * Returns an Sdk.Collection of number values.
 * @return {!Sdk.Collection<number>}
 */
Sdk.Query.Ints.prototype.getValues = function() {};

/**
 * Specifies the Int values to be compared in the query
 * @param {!Array<number>} setValueArgs An array of number values.
 * @return {void}
 */
Sdk.Query.Ints.prototype.setValues = function(setValueArgs) {};

/**
 * @constructor
 * @struct
 * @param {!Array<number>} args
 */
Sdk.Query.Longs = function(args) {};

/**
 * Returns the type of value with namespace prefix.
 * @return {string}
 */
Sdk.Query.Longs.prototype.getType = function() {};

/**
 * Returns an Sdk.Collection of number values.
 * @return {!Sdk.Collection<number>}
 */
Sdk.Query.Longs.prototype.getValues = function() {};

/**
 * Specifies the Long values to be compared in the query.
 * @param {!Array<number>} setValueArgs An array of number values.
 * @return {void}
 */
Sdk.Query.Longs.prototype.setValues = function(setValueArgs) {};

/**
 * @constructor
 * @struct
 * @param {!Array<!Sdk.EntityReference>} args
 */
Sdk.Query.EntityReferences = function(args) {};

/**
 * Returns the type of value with namespace prefix.
 * @return {string}
 */
Sdk.Query.EntityReferences.prototype.getType = function() {};

/**
 * Returns an Sdk.Collection of Sdk.EntityReference values.
 * @return {!Sdk.Collection<number>}
 */
Sdk.Query.EntityReferences.prototype.getValues = function() {};

/**
 * Specifies the Long values to be compared in the query.
 * @param {!Array<!Sdk.EntityReference>} setValueArgs An array of Sdk.EntityReference values.
 * @return {void}
 */
Sdk.Query.EntityReferences.prototype.setValues = function(setValueArgs) {};

/**
 * @constructor
 * @struct
 * @param {!Array<string>} args
 */
Sdk.Query.Guids = function(args) {};

/**
 * Returns the type of value with namespace prefix.
 * @return {string}
 */
Sdk.Query.Guids.prototype.getType = function() {};

/**
 * Returns an Sdk.Collection of GUID string values.
 * @return {!Sdk.Collection<string>}
 */
Sdk.Query.Guids.prototype.getValues = function() {};

/**
 * Specifies the Long values to be compared in the query.
 * @param {!Array<string>} setValueArgs An array of GUID string values.
 * @return {void}
 */
Sdk.Query.Guids.prototype.setValues = function(setValueArgs) {};

/**
 * @constructor
 * @struct
 * @param {!Array<number>} args
 */
Sdk.Query.Money = function(args) {};

/**
 * Returns the type of value with namespace prefix.
 * @return {string}
 */
Sdk.Query.Money.prototype.getType = function() {};

/**
 * Returns an Sdk.Collection of number values.
 * @return {!Sdk.Collection<number>}
 */
Sdk.Query.Money.prototype.getValues = function() {};

/**
 * Specifies the Money values to be compared in the query.
 * @param {!Array<number>} setValueArgs An array of number values.
 * @return {void}
 */
Sdk.Query.Money.prototype.setValues = function(setValueArgs) {};

/**
 * @constructor
 * @struct
 * @param {!Array<number>} args
 */
Sdk.Query.OptionSets = function(args) {};

/**
 * Returns the type of value with namespace prefix.
 * @return {string}
 */
Sdk.Query.OptionSets.prototype.getType = function() {};

/**
 * Returns an Sdk.Collection of number values.
 * @return {!Sdk.Collection<number>}
 */
Sdk.Query.OptionSets.prototype.getValues = function() {};

/**
 * Specifies the OptionSet values to be compared in the query.
 * @param {!Array<number>} setValueArgs An array of number values.
 * @return {void}
 */
Sdk.Query.OptionSets.prototype.setValues = function(setValueArgs) {};

/**
 * @constructor
 * @struct
 * @param {!Array<string>} args
 */
Sdk.Query.Strings = function(args) {};

/**
 * Returns the type of value with namespace prefix.
 * @return {string}
 */
Sdk.Query.Strings.prototype.getType = function() {};

/**
 * Returns an Sdk.Collection of String values.
 * @return {!Sdk.Collection<string>}
 */
Sdk.Query.Strings.prototype.getValues = function() {};

/**
 * Specifies the String values to be compared in the query.
 * @param {!Array<string>} setValueArgs An array of String values.
 * @return {void}
 */
Sdk.Query.Strings.prototype.setValues = function(setValueArgs) {};

/** @const */
Sdk.Query.LogicalOperator = {};
/** @const {number} */
Sdk.Query.LogicalOperator.Or;
/** @const {number} */
Sdk.Query.LogicalOperator.And;
/** @const */
Sdk.Util = {};

/**
 * Verifies the parameter is a string formatted as a GUID.
 * @param {string} value The value to check.
 * @return {boolean}
 */
Sdk.Util.isGuid = function(value) {};

/**
 * Verifies the parameter is a string formatted as a GUID or null.
 * @param {string} value The value to check.
 * @return {boolean}
 */
Sdk.Util.isGuidOrNull = function(value) {};

/**
 * Returns an empty GUID.
 * @return {string}
 */
Sdk.Util.getEmptyGuid = function() {};

/**
 * Formats a string with the arguments from an array.
 * @param {string} string The string containing placeholders for items in the array.
 * @param {!Array<string>} args An array of strings to replace the placeholders.
 * @return {string}
 */
Sdk.Util.format = function(string, args) {};

/**
 *
 * @param {?} resp
 * @return {string}
 */
Sdk.Util.getError = function(resp) {};

/**
 * Returns the clinent URL.
 * @return {string}
 */
Sdk.Util.getClientUrl = function() {};

/**
 * Provides a way to override the client Url when a client-side context is not available.
 * @param {string} url The client URL to use instead of the default.
 * @return {void}
 */
Sdk.Util.setClientUrl = function(url) {};

/**
 *
 * @param {string} action
 * @param {boolean} async
 * @return {?}
 */
Sdk.Util.getXMLHttpRequest = function(action, async) {};

/**
 * Creates an entity from XML.
 * @param {string} node
 * @return {void}
 */
Sdk.Util.createEntityFromNode = function(node) {};
/** @const */
Sdk.Xml = {};
/** @const */
Sdk.Mdq = {};

/**
 * @constructor
 * @struct
 * @param {!Sdk.Mdq.MetadataFilterExpression} criteria
 * @param {!Sdk.Mdq.MetadataPropertiesExpression} properties
 * @param {!Sdk.Mdq.AttributeQueryExpression=} attributeQuery
 * @param {!Sdk.Mdq.RelationshipQueryExpression=} relationshipQuery
 * @param {!Sdk.Mdq.LabelQueryExpression=} labelQuery
 */
Sdk.Mdq.EntityQueryExpression = function(criteria, properties, attributeQuery, relationshipQuery, labelQuery) {};

/** @const */
Sdk.Mdq.DeletedMetadataFilters = {};
/** @const {number} */
Sdk.Mdq.DeletedMetadataFilters.All;
/** @const {number} */
Sdk.Mdq.DeletedMetadataFilters.Attribute;
/** @const {number} */
Sdk.Mdq.DeletedMetadataFilters.Default;
/** @const {number} */
Sdk.Mdq.DeletedMetadataFilters.Entity;
/** @const {number} */
Sdk.Mdq.DeletedMetadataFilters.Label;
/** @const {number} */
Sdk.Mdq.DeletedMetadataFilters.OptionSet;
/** @const {number} */
Sdk.Mdq.DeletedMetadataFilters.Relationship;

/**
 * @constructor
 * @struct
 * @param {Sdk.Mdq.LogicalOperator} filterOperator
 */
Sdk.Mdq.MetadataFilterExpression = function(filterOperator) {};

/**
 * Adds a condition. This method accepts either the properties to create a new Sdk.Mdq.MetadataConditionExpression or a Sdk.Mdq.MetadataConditionExpression as the first argument.
 * @param {(Sdk.Mdq.SearchableEntityMetadataProperties|Sdk.Mdq.SearchableAttributeMetadataProperties|Sdk.Mdq.SearchableRelationshipMetadataProperties)|Sdk.Mdq.SearchableAttributeMetadataProperties} propertyName The metadata property to evaluate.
 * @param {Sdk.Mdq.MetadataConditionOperator} conditionOperator The condition operator.
 * @param {!Object|?=} value The metadata value to evaluate.
 * @return {void}
 */
Sdk.Mdq.MetadataFilterExpression.prototype.addCondition = function(propertyName, conditionOperator, value) {};

/**
 * @constructor
 * @struct
 * @param {!Sdk.Mdq.MetadataFilterExpression} criteria
 * @param {!Sdk.Mdq.MetadataPropertiesExpression} properties
 */
Sdk.Mdq.AttributeQueryExpression = function(criteria, properties) {};

/**
 * @constructor
 * @struct
 * @param {!Sdk.Mdq.MetadataFilterExpression} criteria
 * @param {!Sdk.Mdq.MetadataPropertiesExpression} properties
 */
Sdk.Mdq.RelationshipQueryExpression = function(criteria, properties) {};

/**
 * @constructor
 * @struct
 * @param {!Array<number>} languages
 */
Sdk.Mdq.LabelQueryExpression = function(languages) {};

/** @const */
Sdk.Mdq.LogicalOperator = {};
/** @const {number} */
Sdk.Mdq.LogicalOperator.And;
/** @const {number} */
Sdk.Mdq.LogicalOperator.Or;

/**
 * @constructor
 * @struct
 * @param {boolean} allProperties
 * @param {!Array<?>=} propertyNames
 */
Sdk.Mdq.MetadataPropertiesExpression = function(allProperties, propertyNames) {};

/** @const */
Sdk.Mdq.RelationshipMetadataProperties = {};
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.AssociatedMenuConfiguration;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.CascadeConfiguration;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.HasChanged;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.Entity1AssociatedMenuConfiguration;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.Entity1IntersectAttribute;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.Entity1LogicalName;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.Entity2AssociatedMenuConfiguration;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.Entity2IntersectAttribute;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.Entity2LogicalName;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.IntersectEntityName;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.IsCustomizable;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.IntroducedVersion;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.IsCustomRelationship;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.IsManaged;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.IsValidForAdvancedFind;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.MetadataId;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.ReferencedAttribute;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.ReferencedEntity;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.ReferencingAttribute;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.ReferencingEntity;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.RelationshipType;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.SchemaName;
/** @const {number} */
Sdk.Mdq.RelationshipMetadataProperties.SecurityTypes;

/** @const */
Sdk.Mdq.AttributeMetadataProperties = {};
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.AttributeOf;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.AttributeType;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.AttributeTypeName;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.CalculationOf;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.CanBeSecuredForCreate;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.CanBeSecuredForRead;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.CanBeSecuredForUpdate;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.CanModifyAdditionalSettings;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.ColumnNumber;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.DefaultFormValue;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.DefaultValue;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.DeprecatedVersion;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.Description;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.DisplayName;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.EntityLogicalName;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.Format;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.FormatName;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.ImeMode;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.IntroducedVersion;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.IsAuditEnabled;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.IsCustomAttribute;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.IsCustomizable;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.IsManaged;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.IsPrimaryId;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.IsPrimaryName;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.IsRenameable;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.IsSecured;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.IsValidForAdvancedFind;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.IsValidForCreate;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.IsValidForRead;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.IsValidForUpdate;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.LinkedAttributeId;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.LogicalName;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.MaxLength;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.MaxValue;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.MetadataId;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.MinValue;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.OptionSet;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.Precision;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.PrecisionSource;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.RequiredLevel;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.SchemaName;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.Targets;
/** @const {number} */
Sdk.Mdq.AttributeMetadataProperties.YomiOf;

/** @const */
Sdk.Mdq.EntityMetadataProperties = {};
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.ActivityTypeMask;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.Attributes;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.AutoCreateAccessTeams;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.AutoRouteToOwnerQueue;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.CanBeInManyToMany;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.CanBePrimaryEntityInRelationship;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.CanBeRelatedEntityInRelationship;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.CanCreateAttributes;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.CanCreateCharts;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.CanCreateForms;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.CanCreateViews;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.CanModifyAdditionalSettings;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.CanTriggerWorkflow;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.Description;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.DisplayCollectionName;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.DisplayName;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IconLargeName;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IconMediumName;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IconSmallName;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IntroducedVersion;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsActivity;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsActivityParty;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsAIRUpdated;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsAuditEnabled;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsAvailableOffline;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsBusinessProcessEnabled;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsChildEntity;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsConnectionsEnabled;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsCustomEntity;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsCustomizable;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsDocumentManagementEnabled;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsDuplicateDetectionEnabled;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsEnabledForCharts;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsImportable;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsIntersect;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsMailMergeEnabled;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsManaged;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsMappable;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsQuickCreateEnabled;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsReadingPaneEnabled;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsRenameable;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsValidForAdvancedFind;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsValidForQueue;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsVisibleInMobile;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.IsVisibleInMobileClient;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.LogicalName;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.ManyToManyRelationships;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.ManyToOneRelationships;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.MetadataId;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.ObjectTypeCode;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.OneToManyRelationships;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.OwnershipType;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.PrimaryIdAttribute;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.PrimaryImageAttribute;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.PrimaryNameAttribute;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.Privileges;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.RecurrenceBaseEntityLogicalName;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.ReportViewName;
/** @const {number} */
Sdk.Mdq.EntityMetadataProperties.SchemaName;

/** @const */
Sdk.Mdq.SearchableEntityMetadataProperties = {};
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.ActivityTypeMask;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.AutoCreateAccessTeams;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.AutoRouteToOwnerQueue;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.CanBeInManyToMany;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.CanBePrimaryEntityInRelationship;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.CanBeRelatedEntityInRelationship;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.CanCreateAttributes;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.CanCreateCharts;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.CanCreateForms;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.CanCreateViews;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.CanModifyAdditionalSettings;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.CanTriggerWorkflow;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IconLargeName;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IconMediumName;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IconSmallName;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IntroducedVersion;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsActivity;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsActivityParty;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsAIRUpdated;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsAuditEnabled;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsAvailableOffline;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsBusinessProcessEnabled;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsChildEntity;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsConnectionsEnabled;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsCustomEntity;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsCustomizable;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsDocumentManagementEnabled;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsDuplicateDetectionEnabled;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsEnabledForCharts;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsImportable;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsIntersect;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsMailMergeEnabled;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsManaged;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsMappable;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsQuickCreateEnabled;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsReadingPaneEnabled;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsRenameable;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsValidForAdvancedFind;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsValidForQueue;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsVisibleInMobile;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.IsVisibleInMobileClient;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.LogicalName;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.MetadataId;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.ObjectTypeCode;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.OwnershipType;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.PrimaryIdAttribute;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.PrimaryImageAttribute;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.PrimaryNameAttribute;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.RecurrenceBaseEntityLogicalName;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.ReportViewName;
/** @const {number} */
Sdk.Mdq.SearchableEntityMetadataProperties.SchemaName;

/** @const */
Sdk.Mdq.SearchableAttributeMetadataProperties = {};
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.AttributeOf;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.AttributeType;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.CalculationOf;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.CanBeSecuredForCreate;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.CanBeSecuredForRead;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.CanBeSecuredForUpdate;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.CanModifyAdditionalSettings;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.ColumnNumber;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.DefaultFormValue;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.DefaultValue;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.DeprecatedVersion;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.EntityLogicalName;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.Format;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.FormatName;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.ImeMode;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.IntroducedVersion;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.IsAuditEnabled;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.IsCustomAttribute;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.IsCustomizable;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.IsManaged;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.IsPrimaryId;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.IsPrimaryName;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.IsRenameable;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.IsSecured;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.IsValidForAdvancedFind;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.IsValidForCreate;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.IsValidForRead;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.IsValidForUpdate;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.LinkedAttributeId;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.LogicalName;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.MaxLength;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.MaxValue;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.MetadataId;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.MinValue;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.Precision;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.PrecisionSource;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.RequiredLevel;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.SchemaName;
/** @const {number} */
Sdk.Mdq.SearchableAttributeMetadataProperties.YomiOf;

/** @const */
Sdk.Mdq.SearchableRelationshipMetadataProperties = {};
/** @const {number} */
Sdk.Mdq.SearchableRelationshipMetadataProperties.HasChanged;
/** @const {number} */
Sdk.Mdq.SearchableRelationshipMetadataProperties.Entity1IntersectAttribute;
/** @const {number} */
Sdk.Mdq.SearchableRelationshipMetadataProperties.Entity1LogicalName;
/** @const {number} */
Sdk.Mdq.SearchableRelationshipMetadataProperties.Entity2IntersectAttribute;
/** @const {number} */
Sdk.Mdq.SearchableRelationshipMetadataProperties.Entity2LogicalName;
/** @const {number} */
Sdk.Mdq.SearchableRelationshipMetadataProperties.IntersectEntityName;
/** @const {number} */
Sdk.Mdq.SearchableRelationshipMetadataProperties.IsCustomizable;
/** @const {number} */
Sdk.Mdq.SearchableRelationshipMetadataProperties.IntroducedVersion;
/** @const {number} */
Sdk.Mdq.SearchableRelationshipMetadataProperties.IsCustomRelationship;
/** @const {number} */
Sdk.Mdq.SearchableRelationshipMetadataProperties.IsManaged;
/** @const {number} */
Sdk.Mdq.SearchableRelationshipMetadataProperties.IsValidForAdvancedFind;
/** @const {number} */
Sdk.Mdq.SearchableRelationshipMetadataProperties.MetadataId;
/** @const {number} */
Sdk.Mdq.SearchableRelationshipMetadataProperties.ReferencedAttribute;
/** @const {number} */
Sdk.Mdq.SearchableRelationshipMetadataProperties.ReferencedEntity;
/** @const {number} */
Sdk.Mdq.SearchableRelationshipMetadataProperties.ReferencingAttribute;
/** @const {number} */
Sdk.Mdq.SearchableRelationshipMetadataProperties.ReferencingEntity;
/** @const {number} */
Sdk.Mdq.SearchableRelationshipMetadataProperties.RelationshipType;
/** @const {number} */
Sdk.Mdq.SearchableRelationshipMetadataProperties.SchemaName;
/** @const {number} */
Sdk.Mdq.SearchableRelationshipMetadataProperties.SecurityTypes;

/** @const */
Sdk.Mdq.MetadataConditionOperator = {};
/** @const {number} */
Sdk.Mdq.MetadataConditionOperator.Equals;
/** @const {number} */
Sdk.Mdq.MetadataConditionOperator.NotEquals;
/** @const {number} */
Sdk.Mdq.MetadataConditionOperator.In;
/** @const {number} */
Sdk.Mdq.MetadataConditionOperator.NotIn;
/** @const {number} */
Sdk.Mdq.MetadataConditionOperator.GreaterThan;
/** @const {number} */
Sdk.Mdq.MetadataConditionOperator.LessThan;
/**
 * @record
 * @struct
 */
Sdk.Mdq.IEntityMetadata = function() {};
 /** @type {number} */
Sdk.Mdq.IEntityMetadata.prototype.ActivityTypeMask;
 /** @type {!Array<!Sdk.Mdq.IAttributeMetadata>} */
Sdk.Mdq.IEntityMetadata.prototype.Attributes;
 /** @type {?} */
Sdk.Mdq.IEntityMetadata.prototype.AutoCreateAccessTeams;
 /** @type {boolean} */
Sdk.Mdq.IEntityMetadata.prototype.AutoRouteToOwnerQueue;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.IEntityMetadata.prototype.CanBeInManyToMany;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.IEntityMetadata.prototype.CanBePrimaryEntityInRelationship;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.IEntityMetadata.prototype.CanBeRelatedEntityInRelationship;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.IEntityMetadata.prototype.CanCreateAttributes;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.IEntityMetadata.prototype.CanCreateCharts;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.IEntityMetadata.prototype.CanCreateForms;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.IEntityMetadata.prototype.CanCreateViews;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.IEntityMetadata.prototype.CanModifyAdditionalSettings;
 /** @type {boolean} */
Sdk.Mdq.IEntityMetadata.prototype.CanTriggerWorkflow;
 /** @type {!Sdk.Mdq.Label} */
Sdk.Mdq.IEntityMetadata.prototype.Description;
 /** @type {!Sdk.Mdq.Label} */
Sdk.Mdq.IEntityMetadata.prototype.DisplayCollectionName;
 /** @type {!Sdk.Mdq.Label} */
Sdk.Mdq.IEntityMetadata.prototype.DisplayName;
 /** @type {string} */
Sdk.Mdq.IEntityMetadata.prototype.IconLargeName;
 /** @type {string} */
Sdk.Mdq.IEntityMetadata.prototype.IconMediumName;
 /** @type {string} */
Sdk.Mdq.IEntityMetadata.prototype.IconSmallName;
 /** @type {?} */
Sdk.Mdq.IEntityMetadata.prototype.IntroducedVersion;
 /** @type {boolean} */
Sdk.Mdq.IEntityMetadata.prototype.IsActivity;
 /** @type {boolean} */
Sdk.Mdq.IEntityMetadata.prototype.IsActivityParty;
 /** @type {boolean} */
Sdk.Mdq.IEntityMetadata.prototype.IsAIRUpdated;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.IEntityMetadata.prototype.IsAuditEnabled;
 /** @type {boolean} */
Sdk.Mdq.IEntityMetadata.prototype.IsAvailableOffline;
 /** @type {boolean} */
Sdk.Mdq.IEntityMetadata.prototype.IsBusinessProcessEnabled;
 /** @type {boolean} */
Sdk.Mdq.IEntityMetadata.prototype.IsChildEntity;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.IEntityMetadata.prototype.IsConnectionsEnabled;
 /** @type {boolean} */
Sdk.Mdq.IEntityMetadata.prototype.IsCustomEntity;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.IEntityMetadata.prototype.IsCustomizable;
 /** @type {boolean} */
Sdk.Mdq.IEntityMetadata.prototype.IsDocumentManagementEnabled;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.IEntityMetadata.prototype.IsDuplicateDetectionEnabled;
 /** @type {boolean} */
Sdk.Mdq.IEntityMetadata.prototype.IsEnabledForCharts;
 /** @type {boolean} */
Sdk.Mdq.IEntityMetadata.prototype.IsImportable;
 /** @type {boolean} */
Sdk.Mdq.IEntityMetadata.prototype.IsIntersect;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.IEntityMetadata.prototype.IsMailMergeEnabled;
 /** @type {boolean} */
Sdk.Mdq.IEntityMetadata.prototype.IsManaged;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.IEntityMetadata.prototype.IsMappable;
 /** @type {boolean} */
Sdk.Mdq.IEntityMetadata.prototype.IsQuickCreateEnabled;
 /** @type {boolean} */
Sdk.Mdq.IEntityMetadata.prototype.IsReadingPaneEnabled;
 /** @type {boolean} */
Sdk.Mdq.IEntityMetadata.prototype.IsRenameable;
 /** @type {boolean} */
Sdk.Mdq.IEntityMetadata.prototype.IsValidForAdvancedFind;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.IEntityMetadata.prototype.IsValidForQueue;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.IEntityMetadata.prototype.IsVisibleInMobile;
 /** @type {boolean} */
Sdk.Mdq.IEntityMetadata.prototype.IsVisibleInMobileClient;
 /** @type {string} */
Sdk.Mdq.IEntityMetadata.prototype.LogicalName;
 /** @type {!Sdk.Mdq.ManyToManyRelationshipMetadata} */
Sdk.Mdq.IEntityMetadata.prototype.ManyToManyRelationships;
 /** @type {!Sdk.Mdq.OneToManyRelationshipMetadata} */
Sdk.Mdq.IEntityMetadata.prototype.ManyToOneRelationships;
 /** @type {string} */
Sdk.Mdq.IEntityMetadata.prototype.MetadataId;
 /** @type {number} */
Sdk.Mdq.IEntityMetadata.prototype.ObjectTypeCode;
 /** @type {!Sdk.Mdq.OneToManyRelationshipMetadata} */
Sdk.Mdq.IEntityMetadata.prototype.OneToManyRelationships;
 /** @type {string} */
Sdk.Mdq.IEntityMetadata.prototype.OwnershipType;
 /** @type {string} */
Sdk.Mdq.IEntityMetadata.prototype.PrimaryIdAttribute;
 /** @type {string} */
Sdk.Mdq.IEntityMetadata.prototype.PrimaryImageAttribute;
 /** @type {string} */
Sdk.Mdq.IEntityMetadata.prototype.PrimaryNameAttribute;
 /** @type {!Array<!Sdk.Mdq.SecurityPrivilegeMetadata>} */
Sdk.Mdq.IEntityMetadata.prototype.Privileges;
 /** @type {string} */
Sdk.Mdq.IEntityMetadata.prototype.RecurrenceBaseEntityLogicalName;
 /** @type {string} */
Sdk.Mdq.IEntityMetadata.prototype.ReportViewName;
 /** @type {string} */
Sdk.Mdq.IEntityMetadata.prototype.SchemaName;
/**
 * @record
 * @struct
 */
Sdk.Mdq.SecurityPrivilegeMetadata = function() {};
 /** @type {boolean} */
Sdk.Mdq.SecurityPrivilegeMetadata.prototype.CanBeBasic;
 /** @type {boolean} */
Sdk.Mdq.SecurityPrivilegeMetadata.prototype.CanBeDeep;
 /** @type {boolean} */
Sdk.Mdq.SecurityPrivilegeMetadata.prototype.CanBeEntityReference;
 /** @type {boolean} */
Sdk.Mdq.SecurityPrivilegeMetadata.prototype.CanBeGlobal;
 /** @type {boolean} */
Sdk.Mdq.SecurityPrivilegeMetadata.prototype.CanBeLocal;
 /** @type {boolean} */
Sdk.Mdq.SecurityPrivilegeMetadata.prototype.CanBeParentEntityReference;
 /** @type {boolean} */
Sdk.Mdq.SecurityPrivilegeMetadata.prototype.ExtensionData;
 /** @type {string} */
Sdk.Mdq.SecurityPrivilegeMetadata.prototype.Name;
 /** @type {string} */
Sdk.Mdq.SecurityPrivilegeMetadata.prototype.PrivilegeId;
 /** @type {string} */
Sdk.Mdq.SecurityPrivilegeMetadata.prototype.PrivilegeType;
/**
 * @record
 * @struct
 */
Sdk.Mdq.OneToManyRelationshipMetadata = function() {};
 /** @type {!Sdk.Mdq.AssociatedMenuConfiguration} */
Sdk.Mdq.OneToManyRelationshipMetadata.prototype.AssociatedMenuConfiguration;
 /** @type {!Sdk.Mdq.CascadeConfiguration} */
Sdk.Mdq.OneToManyRelationshipMetadata.prototype.CascadeConfiguration;
 /** @type {?} */
Sdk.Mdq.OneToManyRelationshipMetadata.prototype.HasChanged;
 /** @type {?} */
Sdk.Mdq.OneToManyRelationshipMetadata.prototype.IntroducedVersion;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.OneToManyRelationshipMetadata.prototype.IsCustomizable;
 /** @type {boolean} */
Sdk.Mdq.OneToManyRelationshipMetadata.prototype.IsCustomRelationship;
 /** @type {?} */
Sdk.Mdq.OneToManyRelationshipMetadata.prototype.IsHierarchical;
 /** @type {boolean} */
Sdk.Mdq.OneToManyRelationshipMetadata.prototype.IsManaged;
 /** @type {boolean} */
Sdk.Mdq.OneToManyRelationshipMetadata.prototype.IsValidForAdvancedFind;
 /** @type {string} */
Sdk.Mdq.OneToManyRelationshipMetadata.prototype.MetadataId;
 /** @type {string} */
Sdk.Mdq.OneToManyRelationshipMetadata.prototype.ReferencedAttribute;
 /** @type {string} */
Sdk.Mdq.OneToManyRelationshipMetadata.prototype.ReferencedEntity;
 /** @type {string} */
Sdk.Mdq.OneToManyRelationshipMetadata.prototype.ReferencingAttribute;
 /** @type {string} */
Sdk.Mdq.OneToManyRelationshipMetadata.prototype.ReferencingEntity;
 /** @type {string} */
Sdk.Mdq.OneToManyRelationshipMetadata.prototype.RelationshipType;
 /** @type {string} */
Sdk.Mdq.OneToManyRelationshipMetadata.prototype.SchemaName;
 /** @type {?} */
Sdk.Mdq.OneToManyRelationshipMetadata.prototype.SecurityTypes;
/**
 * @record
 * @struct
 */
Sdk.Mdq.CascadeConfiguration = function() {};
 /** @type {string} */
Sdk.Mdq.CascadeConfiguration.prototype.Assign;
 /** @type {string} */
Sdk.Mdq.CascadeConfiguration.prototype.Delete;
 /** @type {string} */
Sdk.Mdq.CascadeConfiguration.prototype.ExtensionData;
 /** @type {string} */
Sdk.Mdq.CascadeConfiguration.prototype.Merge;
 /** @type {string} */
Sdk.Mdq.CascadeConfiguration.prototype.Reparent;
 /** @type {string} */
Sdk.Mdq.CascadeConfiguration.prototype.Share;
 /** @type {string} */
Sdk.Mdq.CascadeConfiguration.prototype.Unshare;

/** @typedef {string} */
Sdk.Mdq.CascadeType;
/**
 * @record
 * @struct
 */
Sdk.Mdq.ManyToManyRelationshipMetadata = function() {};
 /** @type {!Sdk.Mdq.AssociatedMenuConfiguration} */
Sdk.Mdq.ManyToManyRelationshipMetadata.prototype.Entity1AssociatedMenuConfiguration;
 /** @type {string} */
Sdk.Mdq.ManyToManyRelationshipMetadata.prototype.Entity1IntersectAttribute;
 /** @type {string} */
Sdk.Mdq.ManyToManyRelationshipMetadata.prototype.Entity1LogicalName;
 /** @type {!Sdk.Mdq.AssociatedMenuConfiguration} */
Sdk.Mdq.ManyToManyRelationshipMetadata.prototype.Entity2AssociatedMenuConfiguration;
 /** @type {string} */
Sdk.Mdq.ManyToManyRelationshipMetadata.prototype.Entity2IntersectAttribute;
 /** @type {string} */
Sdk.Mdq.ManyToManyRelationshipMetadata.prototype.Entity2LogicalName;
 /** @type {boolean} */
Sdk.Mdq.ManyToManyRelationshipMetadata.prototype.HasChanged;
 /** @type {string} */
Sdk.Mdq.ManyToManyRelationshipMetadata.prototype.IntersectEntityName;
 /** @type {?} */
Sdk.Mdq.ManyToManyRelationshipMetadata.prototype.IntroducedVersion;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.ManyToManyRelationshipMetadata.prototype.IsCustomizable;
 /** @type {boolean} */
Sdk.Mdq.ManyToManyRelationshipMetadata.prototype.IsCustomRelationship;
 /** @type {boolean} */
Sdk.Mdq.ManyToManyRelationshipMetadata.prototype.IsManaged;
 /** @type {boolean} */
Sdk.Mdq.ManyToManyRelationshipMetadata.prototype.IsValidForAdvancedFind;
 /** @type {string} */
Sdk.Mdq.ManyToManyRelationshipMetadata.prototype.MetadataId;
 /** @type {string} */
Sdk.Mdq.ManyToManyRelationshipMetadata.prototype.RelationshipType;
 /** @type {string} */
Sdk.Mdq.ManyToManyRelationshipMetadata.prototype.SchemaName;
 /** @type {string} */
Sdk.Mdq.ManyToManyRelationshipMetadata.prototype.SecurityTypes;
/**
 * @record
 * @struct
 */
Sdk.Mdq.AssociatedMenuConfiguration = function() {};
 /** @type {string} */
Sdk.Mdq.AssociatedMenuConfiguration.prototype.Behavior;
 /** @type {string} */
Sdk.Mdq.AssociatedMenuConfiguration.prototype.Group;
 /** @type {!Sdk.Mdq.Label} */
Sdk.Mdq.AssociatedMenuConfiguration.prototype.Label;
 /** @type {number} */
Sdk.Mdq.AssociatedMenuConfiguration.prototype.Order;

/** @typedef {string} */
Sdk.Mdq.AssociatedMenuBehavior;

/** @typedef {string} */
Sdk.Mdq.AssociatedMenuGroup;

/** @typedef {string} */
Sdk.Mdq.RelationshipType;

/** @typedef {string} */
Sdk.Mdq.SecurityType;
/**
 * @record
 * @struct
 */
Sdk.Mdq.IAttributeMetadata = function() {};
 /** @type {string} */
Sdk.Mdq.IAttributeMetadata.prototype.AttributeOf;
 /** @type {string} */
Sdk.Mdq.IAttributeMetadata.prototype.AttributeType;
 /** @type {string} */
Sdk.Mdq.IAttributeMetadata.prototype.AttributeTypeName;
 /** @type {?} */
Sdk.Mdq.IAttributeMetadata.prototype.CalculationOf;
 /** @type {boolean} */
Sdk.Mdq.IAttributeMetadata.prototype.CanBeSecuredForCreate;
 /** @type {boolean} */
Sdk.Mdq.IAttributeMetadata.prototype.CanBeSecuredForRead;
 /** @type {boolean} */
Sdk.Mdq.IAttributeMetadata.prototype.CanBeSecuredForUpdate;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.IAttributeMetadata.prototype.CanModifyAdditionalSettings;
 /** @type {number} */
Sdk.Mdq.IAttributeMetadata.prototype.ColumnNumber;
 /** @type {?} */
Sdk.Mdq.IAttributeMetadata.prototype.DefaultFormValue;
 /** @type {?} */
Sdk.Mdq.IAttributeMetadata.prototype.DefaultValue;
 /** @type {?} */
Sdk.Mdq.IAttributeMetadata.prototype.DeprecatedVersion;
 /** @type {!Sdk.Mdq.Label} */
Sdk.Mdq.IAttributeMetadata.prototype.Description;
 /** @type {!Sdk.Mdq.Label} */
Sdk.Mdq.IAttributeMetadata.prototype.DisplayName;
 /** @type {string} */
Sdk.Mdq.IAttributeMetadata.prototype.EntityLogicalName;
 /** @type {?} */
Sdk.Mdq.IAttributeMetadata.prototype.Format;
 /** @type {string} */
Sdk.Mdq.IAttributeMetadata.prototype.FormatName;
 /** @type {?} */
Sdk.Mdq.IAttributeMetadata.prototype.ImeMode;
 /** @type {?} */
Sdk.Mdq.IAttributeMetadata.prototype.IntroducedVersion;
 /** @type {boolean} */
Sdk.Mdq.IAttributeMetadata.prototype.IsAuditEnabled;
 /** @type {boolean} */
Sdk.Mdq.IAttributeMetadata.prototype.IsCustomAttribute;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.IAttributeMetadata.prototype.IsCustomizable;
 /** @type {boolean} */
Sdk.Mdq.IAttributeMetadata.prototype.IsManaged;
 /** @type {boolean} */
Sdk.Mdq.IAttributeMetadata.prototype.IsPrimaryId;
 /** @type {boolean} */
Sdk.Mdq.IAttributeMetadata.prototype.IsPrimaryName;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.IAttributeMetadata.prototype.IsRenameable;
 /** @type {boolean} */
Sdk.Mdq.IAttributeMetadata.prototype.IsSecured;
 /** @type {!Sdk.Mdq.ManagedProperty<boolean>} */
Sdk.Mdq.IAttributeMetadata.prototype.IsValidForAdvancedFind;
 /** @type {boolean} */
Sdk.Mdq.IAttributeMetadata.prototype.IsValidForCreate;
 /** @type {boolean} */
Sdk.Mdq.IAttributeMetadata.prototype.IsValidForRead;
 /** @type {boolean} */
Sdk.Mdq.IAttributeMetadata.prototype.IsValidForUpdate;
 /** @type {string} */
Sdk.Mdq.IAttributeMetadata.prototype.LinkedAttributeId;
 /** @type {string} */
Sdk.Mdq.IAttributeMetadata.prototype.LogicalName;
 /** @type {number} */
Sdk.Mdq.IAttributeMetadata.prototype.MaxLength;
 /** @type {?} */
Sdk.Mdq.IAttributeMetadata.prototype.MaxValue;
 /** @type {string} */
Sdk.Mdq.IAttributeMetadata.prototype.MetadataId;
 /** @type {number} */
Sdk.Mdq.IAttributeMetadata.prototype.MinValue;
 /** @type {?} */
Sdk.Mdq.IAttributeMetadata.prototype.OptionSet;
 /** @type {?} */
Sdk.Mdq.IAttributeMetadata.prototype.Precision;
 /** @type {?} */
Sdk.Mdq.IAttributeMetadata.prototype.PrecisionSource;
 /** @type {!Sdk.Mdq.ManagedProperty<string>} */
Sdk.Mdq.IAttributeMetadata.prototype.RequiredLevel;
 /** @type {string} */
Sdk.Mdq.IAttributeMetadata.prototype.SchemaName;
 /** @type {!Array<string>} */
Sdk.Mdq.IAttributeMetadata.prototype.Targets;
 /** @type {?} */
Sdk.Mdq.IAttributeMetadata.prototype.YomiOf;
/**
 * @record
 * @struct
 */
Sdk.Mdq.ManagedProperty = function() {};
 /** @type {boolean} */
Sdk.Mdq.ManagedProperty.prototype.CanBeChanged;
 /** @type {string} */
Sdk.Mdq.ManagedProperty.prototype.ManagedPropertyLogicalName;
 /** @type {T} */
Sdk.Mdq.ManagedProperty.prototype.Value;
/**
 * @record
 * @struct
 */
Sdk.Mdq.Label = function() {};
 /** @type {!Array<!Sdk.Mdq.LocalizedLabel>} */
Sdk.Mdq.Label.prototype.LocalizedLabels;
 /** @type {!Sdk.Mdq.LocalizedLabel} */
Sdk.Mdq.Label.prototype.UserLocalizedLabel;
/**
 * @record
 * @struct
 */
Sdk.Mdq.LocalizedLabel = function() {};
 /** @type {string} */
Sdk.Mdq.LocalizedLabel.prototype.Label;
 /** @type {number} */
Sdk.Mdq.LocalizedLabel.prototype.LangaugeCode;
 /** @type {string} */
Sdk.Mdq.LocalizedLabel.prototype.MetadataId;
 /** @type {boolean} */
Sdk.Mdq.LocalizedLabel.prototype.HasChanged;
 /** @type {boolean} */
Sdk.Mdq.LocalizedLabel.prototype.IsManaged;
/** @const */
Sdk.Mdq.ValueEnums = {};

/** @const */
Sdk.Mdq.ValueEnums.OwnershipType = {};
/** @const {number} */
Sdk.Mdq.ValueEnums.OwnershipType.None;
/** @const {number} */
Sdk.Mdq.ValueEnums.OwnershipType.OrganizationOwned;
/** @const {number} */
Sdk.Mdq.ValueEnums.OwnershipType.TeamOwned;
/** @const {number} */
Sdk.Mdq.ValueEnums.OwnershipType.UserOwned;

/** @const */
Sdk.Mdq.ValueEnums.AttributeTypeCode = {};
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.BigInt;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.Boolean;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.CalendarRules;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.Customer;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.DateTime;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.Decimal;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.Double;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.EntityName;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.Integer;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.Lookup;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.ManagedProperty;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.Memo;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.Money;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.Owner;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.PartyList;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.Picklist;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.State;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.Status;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.String;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.Uniqueidentifier;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeTypeCode.Virtual;

/** @const */
Sdk.Mdq.ValueEnums.AttributeRequiredLevel = {};
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeRequiredLevel.ApplicationRequired;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeRequiredLevel.None;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeRequiredLevel.Recommended;
/** @const {number} */
Sdk.Mdq.ValueEnums.AttributeRequiredLevel.SystemRequired;

/** @const */
Sdk.Mdq.ValueEnums.DateTimeFormat = {};
/** @const {number} */
Sdk.Mdq.ValueEnums.DateTimeFormat.DateAndTime;
/** @const {number} */
Sdk.Mdq.ValueEnums.DateTimeFormat.DateOnly;

/** @const */
Sdk.Mdq.ValueEnums.ImeMode = {};
/** @const {number} */
Sdk.Mdq.ValueEnums.ImeMode.Active;
/** @const {number} */
Sdk.Mdq.ValueEnums.ImeMode.Auto;
/** @const {number} */
Sdk.Mdq.ValueEnums.ImeMode.Disabled;
/** @const {number} */
Sdk.Mdq.ValueEnums.ImeMode.Inactive;

/** @const */
Sdk.Mdq.ValueEnums.IntegerFormat = {};
/** @const {number} */
Sdk.Mdq.ValueEnums.IntegerFormat.Duration;
/** @const {number} */
Sdk.Mdq.ValueEnums.IntegerFormat.Language;
/** @const {number} */
Sdk.Mdq.ValueEnums.IntegerFormat.Locale;
/** @const {number} */
Sdk.Mdq.ValueEnums.IntegerFormat.None;
/** @const {number} */
Sdk.Mdq.ValueEnums.IntegerFormat.TimeZone;

/** @const */
Sdk.Mdq.ValueEnums.SecurityTypes = {};
/** @const {number} */
Sdk.Mdq.ValueEnums.SecurityTypes.Append;
/** @const {number} */
Sdk.Mdq.ValueEnums.SecurityTypes.Inheritance;
/** @const {number} */
Sdk.Mdq.ValueEnums.SecurityTypes.None;
/** @const {number} */
Sdk.Mdq.ValueEnums.SecurityTypes.ParentChild;
/** @const {number} */
Sdk.Mdq.ValueEnums.SecurityTypes.Pointer;

/** @const */
Sdk.Mdq.ValueEnums.StringFormat = {};
/** @const {number} */
Sdk.Mdq.ValueEnums.StringFormat.Email;
/** @const {number} */
Sdk.Mdq.ValueEnums.StringFormat.PhoneticGuide;
/** @const {number} */
Sdk.Mdq.ValueEnums.StringFormat.Text;
/** @const {number} */
Sdk.Mdq.ValueEnums.StringFormat.TextArea;
/** @const {number} */
Sdk.Mdq.ValueEnums.StringFormat.TickerSymbol;
/** @const {number} */
Sdk.Mdq.ValueEnums.StringFormat.Url;
/** @const {number} */
Sdk.Mdq.ValueEnums.StringFormat.VersionNumber;
