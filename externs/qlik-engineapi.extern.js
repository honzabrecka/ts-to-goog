/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/qlik-engineapi/index.d.ts:
/** @const */
var EngineAPI = {};

/** @typedef {string} */
EngineAPI.CommandType;

/** @typedef {string} */
EngineAPI.LogonType;

/** @typedef {string} */
EngineAPI.NxGrpType;

/** @typedef {string} */
EngineAPI.FieldAttributesType;

/** @typedef {string} */
EngineAPI.FileDataFormatType;

/** @typedef {string} */
EngineAPI.TableRecordKeyType;

/** @typedef {string} */
EngineAPI.ContextType;

/** @typedef {string} */
EngineAPI.SearchObjectsGroupType;

/** @typedef {string} */
EngineAPI.SearchObjectsItemType;

/** @typedef {string} */
EngineAPI.NxPatchOpType;

/** @typedef {string} */
EngineAPI.FileType;

/** @typedef {string} */
EngineAPI.ExportStateType;

/** @typedef {string} */
EngineAPI.ReductionModeType;

/** @typedef {string} */
EngineAPI.FieldDefExType;

/** @typedef {string} */
EngineAPI.FolderItemType;

/** @typedef {string} */
EngineAPI.NxCellStateType;

/** @typedef {string} */
EngineAPI.NxCellType;

/** @typedef {string} */
EngineAPI.NxSelectionCellType;

/** @typedef {string} */
EngineAPI.SortIndicatorType;

/** @typedef {string} */
EngineAPI.OtherModeType;

/** @typedef {string} */
EngineAPI.OtherLimitModeType;

/** @typedef {string} */
EngineAPI.OtherSortModeType;

/** @typedef {string} */
EngineAPI.TotalModeType;

/** @typedef {string} */
EngineAPI.BnfType;

/** @typedef {string} */
EngineAPI.MTType;

/** @typedef {string} */
EngineAPI.MachineModeType;

/** @typedef {string} */
EngineAPI.InteractionType;

/** @typedef {string} */
EngineAPI.ErrorDataCodeType;

/** @typedef {string} */
EngineAPI.FunctionGroupType;

/** @typedef {string} */
EngineAPI.DimensionType;

/** @typedef {string} */
EngineAPI.NxHypercubeMode;

/** @typedef {string} */
EngineAPI.FrequencyModeType;

/** @typedef {string} */
EngineAPI.TypeSortDirection;

/** @typedef {string} */
EngineAPI.DriveType;
/**
 * @record
 * @struct
 */
EngineAPI.INxRange = function() {};
 /** @type {number} */
EngineAPI.INxRange.prototype.qCount;
 /** @type {number} */
EngineAPI.INxRange.prototype.qFrom;
/**
 * @record
 * @struct
 */
EngineAPI.IExpressionResult = function() {};
 /** @type {!Array<!EngineAPI.INxRange>} */
EngineAPI.IExpressionResult.prototype.qBadFieldNames;
/**
 * @extends {EngineAPI.IExpressionResult}
 * @record
 * @struct
 */
EngineAPI.ICheckExpressionResult = function() {};
 /** @type {!Array<!EngineAPI.INxRange>} */
EngineAPI.ICheckExpressionResult.prototype.qDangerousFieldNames;
 /** @type {string} */
EngineAPI.ICheckExpressionResult.prototype.qErrorMsg;
/**
 * @extends {EngineAPI.IExpressionResult}
 * @record
 * @struct
 */
EngineAPI.ICheckNumberOrExpressionResult = function() {};
 /** @type {string} */
EngineAPI.ICheckNumberOrExpressionResult.prototype.qErrorMsg;
/**
 * @record
 * @struct
 */
EngineAPI.IScriptSyntaxError = function() {};
 /** @type {number} */
EngineAPI.IScriptSyntaxError.prototype.qErrLen;
 /** @type {number} */
EngineAPI.IScriptSyntaxError.prototype.qTabIx;
 /** @type {number} */
EngineAPI.IScriptSyntaxError.prototype.qLineInTab;
 /** @type {number} */
EngineAPI.IScriptSyntaxError.prototype.qColInLine;
 /** @type {number} */
EngineAPI.IScriptSyntaxError.prototype.qTextPos;
 /** @type {boolean} */
EngineAPI.IScriptSyntaxError.prototype.qSecondaryFailure;
/**
 * @record
 * @struct
 */
EngineAPI.INxMeta = function() {};
 /** @type {string} */
EngineAPI.INxMeta.prototype.qName;
/**
 * @record
 * @struct
 */
EngineAPI.INxGetBookmarkOptions = function() {};
 /** @type {!Array<string>} */
EngineAPI.INxGetBookmarkOptions.prototype.qTypes;
 /** @type {?} */
EngineAPI.INxGetBookmarkOptions.prototype.qData;
/**
 * @record
 * @struct
 */
EngineAPI.INxGetObjectOptions = function() {};
 /** @type {!Array<string>} */
EngineAPI.INxGetObjectOptions.prototype.qTypes;
 /** @type {boolean} */
EngineAPI.INxGetObjectOptions.prototype.qIncludeSessionObjects;
 /** @type {?} */
EngineAPI.INxGetObjectOptions.prototype.qData;
/**
 * @extends {EngineAPI.INxMeta}
 * @record
 * @struct
 */
EngineAPI.INxMetaTitleDescription = function() {};
 /** @type {string} */
EngineAPI.INxMetaTitleDescription.prototype.title;
 /** @type {string} */
EngineAPI.INxMetaTitleDescription.prototype.description;
/**
 * @extends {EngineAPI.INxMetaTitleDescription}
 * @record
 * @struct
 */
EngineAPI.INxMetaTitleDescriptionTag = function() {};
 /** @type {!Array<string>} */
EngineAPI.INxMetaTitleDescriptionTag.prototype.tags;
/**
 * @record
 * @struct
 */
EngineAPI.IConnection = function() {};
 /** @type {string} */
EngineAPI.IConnection.prototype.qId;
 /** @type {string} */
EngineAPI.IConnection.prototype.qName;
 /** @type {string} */
EngineAPI.IConnection.prototype.qConnectionString;
 /** @type {string} */
EngineAPI.IConnection.prototype.qType;
 /** @type {string} */
EngineAPI.IConnection.prototype.qUserName;
 /** @type {string} */
EngineAPI.IConnection.prototype.qPassword;
 /** @type {string} */
EngineAPI.IConnection.prototype.qModifiedDate;
 /** @type {!EngineAPI.INxMeta} */
EngineAPI.IConnection.prototype.qMeta;
 /** @type {string} */
EngineAPI.IConnection.prototype.qLogOn;
/**
 * @record
 * @struct
 */
EngineAPI.INxLibraryDimensionDef = function() {};
 /** @type {string} */
EngineAPI.INxLibraryDimensionDef.prototype.qGrouping;
 /** @type {!Array<string>} */
EngineAPI.INxLibraryDimensionDef.prototype.qFieldDefs;
 /** @type {!Array<string>} */
EngineAPI.INxLibraryDimensionDef.prototype.qFieldLabels;
/**
 * @record
 * @struct
 */
EngineAPI.IGenericProperties = function() {};
 /** @type {!EngineAPI.INxInfo} */
EngineAPI.IGenericProperties.prototype.qInfo;

/* TODO: IndexSignature: EngineAPI */
/**
 * @extends {EngineAPI.IGenericProperties}
 * @record
 * @struct
 */
EngineAPI.IGenericBookmarkProperties = function() {};
/**
 * @extends {EngineAPI.IGenericProperties}
 * @record
 * @struct
 */
EngineAPI.IGenericDimensionProperties = function() {};
 /** @type {!EngineAPI.INxLibraryDimensionDef} */
EngineAPI.IGenericDimensionProperties.prototype.qDim;
/**
 * @extends {EngineAPI.IGenericProperties}
 * @record
 * @struct
 */
EngineAPI.IGenericMeasureProperties = function() {};
 /** @type {!EngineAPI.INxLibraryMeasureDef} */
EngineAPI.IGenericMeasureProperties.prototype.qMeasure;
/**
 * @extends {EngineAPI.IGenericProperties}
 * @record
 * @struct
 */
EngineAPI.IGenericObjectProperties = function() {};
 /** @type {string} */
EngineAPI.IGenericObjectProperties.prototype.qExtendsId;
/**
 * @extends {EngineAPI.IGenericProperties}
 * @record
 * @struct
 */
EngineAPI.IGenericVariableProperties = function() {};
 /** @type {string} */
EngineAPI.IGenericVariableProperties.prototype.qName;
 /** @type {string} */
EngineAPI.IGenericVariableProperties.prototype.qComment;
 /** @type {!EngineAPI.IFieldAttributes} */
EngineAPI.IGenericVariableProperties.prototype.qNumberPresentation;
 /** @type {boolean} */
EngineAPI.IGenericVariableProperties.prototype.qIncludeInBookmark;
 /** @type {string} */
EngineAPI.IGenericVariableProperties.prototype.qDefinition;
/**
 * @record
 * @struct
 */
EngineAPI.IFieldAttributes = function() {};
 /** @type {string} */
EngineAPI.IFieldAttributes.prototype.qType;
 /** @type {number} */
EngineAPI.IFieldAttributes.prototype.qnDec;
 /** @type {boolean} */
EngineAPI.IFieldAttributes.prototype.qUseThou;
 /** @type {string} */
EngineAPI.IFieldAttributes.prototype.qFmt;
 /** @type {string} */
EngineAPI.IFieldAttributes.prototype.qDec;
 /** @type {string} */
EngineAPI.IFieldAttributes.prototype.qThou;
 /** @type {!Array<?>} */
EngineAPI.IFieldAttributes.prototype.qSAFEARRAY;
/**
 * @record
 * @struct
 */
EngineAPI.INxInfo = function() {};
 /** @type {string} */
EngineAPI.INxInfo.prototype.qId;
 /** @type {string} */
EngineAPI.INxInfo.prototype.qType;
/**
 * @record
 * @struct
 */
EngineAPI.IDoReloadExParams = function() {};
 /** @type {number} */
EngineAPI.IDoReloadExParams.prototype.qMode;
 /** @type {boolean} */
EngineAPI.IDoReloadExParams.prototype.qPartial;
 /** @type {boolean} */
EngineAPI.IDoReloadExParams.prototype.qDebug;
/**
 * @record
 * @struct
 */
EngineAPI.IDoReloadExResult = function() {};
 /** @type {boolean} */
EngineAPI.IDoReloadExResult.prototype.qSuccess;
 /** @type {string} */
EngineAPI.IDoReloadExResult.prototype.qScriptLogFile;
/**
 * @record
 * @struct
 */
EngineAPI.IFieldValue = function() {};
 /** @type {string} */
EngineAPI.IFieldValue.prototype.qText;
 /** @type {boolean} */
EngineAPI.IFieldValue.prototype.qIsNumeric;
 /** @type {number} */
EngineAPI.IFieldValue.prototype.qNumber;
/**
 * @record
 * @struct
 */
EngineAPI.INxMatchingFieldInfo = function() {};
 /** @type {string} */
EngineAPI.INxMatchingFieldInfo.prototype.qName;
 /** @type {!Array<string>} */
EngineAPI.INxMatchingFieldInfo.prototype.qTags;
/**
 * @record
 * @struct
 */
EngineAPI.INxAppLayout = function() {};
 /** @type {string} */
EngineAPI.INxAppLayout.prototype.qTitle;
 /** @type {string} */
EngineAPI.INxAppLayout.prototype.qFileName;
 /** @type {string} */
EngineAPI.INxAppLayout.prototype.qLastReloadTime;
 /** @type {boolean} */
EngineAPI.INxAppLayout.prototype.qModified;
 /** @type {boolean} */
EngineAPI.INxAppLayout.prototype.qHasScript;
 /** @type {!Array<string>} */
EngineAPI.INxAppLayout.prototype.qStateNames;
 /** @type {!EngineAPI.INxMeta} */
EngineAPI.INxAppLayout.prototype.qMeta;
 /** @type {!EngineAPI.ILocaleInfo} */
EngineAPI.INxAppLayout.prototype.qLocaleInfo;
 /** @type {boolean} */
EngineAPI.INxAppLayout.prototype.qHasData;
 /** @type {boolean} */
EngineAPI.INxAppLayout.prototype.qReadOnly;
 /** @type {boolean} */
EngineAPI.INxAppLayout.prototype.qIsOpenedWithoutData;
 /** @type {!EngineAPI.IStaticContentUrl} */
EngineAPI.INxAppLayout.prototype.qThumbnail;
/**
 * @record
 * @struct
 */
EngineAPI.INxAppProperties = function() {};
 /** @type {string} */
EngineAPI.INxAppProperties.prototype.qTitle;
 /** @type {string} */
EngineAPI.INxAppProperties.prototype.qLastReloadTime;
 /** @type {!EngineAPI.IStaticContentUrlDef} */
EngineAPI.INxAppProperties.prototype.qThumbnail;
 /** @type {string} */
EngineAPI.INxAppProperties.prototype.qMigrationHash;
 /** @type {string} */
EngineAPI.INxAppProperties.prototype.qSavedInProductVersion;
/**
 * @record
 * @struct
 */
EngineAPI.IAssociationScore = function() {};
 /** @type {string} */
EngineAPI.IAssociationScore.prototype.qFieldPairName;
 /** @type {number} */
EngineAPI.IAssociationScore.prototype.qScoreSummary;
 /** @type {!EngineAPI.IFieldScores} */
EngineAPI.IAssociationScore.prototype.qField1Scores;
 /** @type {!EngineAPI.IFieldScores} */
EngineAPI.IAssociationScore.prototype.qField2Scores;
/**
 * @record
 * @struct
 */
EngineAPI.IFieldScores = function() {};
 /** @type {string} */
EngineAPI.IFieldScores.prototype.qFieldName;
 /** @type {number} */
EngineAPI.IFieldScores.prototype.qCardinalRatio;
 /** @type {number} */
EngineAPI.IFieldScores.prototype.qSymbolScore;
 /** @type {number} */
EngineAPI.IFieldScores.prototype.qRowScore;
/**
 * @record
 * @struct
 */
EngineAPI.IContentLibraryListItem = function() {};
 /** @type {string} */
EngineAPI.IContentLibraryListItem.prototype.qName;
 /** @type {boolean} */
EngineAPI.IContentLibraryListItem.prototype.qAppSpecific;
 /** @type {!EngineAPI.INxMeta} */
EngineAPI.IContentLibraryListItem.prototype.qMeta;
/**
 * @record
 * @struct
 */
EngineAPI.IContentLibraryList = function() {};
 /** @type {!EngineAPI.IContentLibraryListItem} */
EngineAPI.IContentLibraryList.prototype.qItems;
/**
 * @record
 * @struct
 */
EngineAPI.IDatabaseInfo = function() {};
 /** @type {string} */
EngineAPI.IDatabaseInfo.prototype.qDBMSName;
 /** @type {boolean} */
EngineAPI.IDatabaseInfo.prototype.qDBUsage;
 /** @type {boolean} */
EngineAPI.IDatabaseInfo.prototype.qOwnerUsage;
 /** @type {string} */
EngineAPI.IDatabaseInfo.prototype.qDBSeparator;
 /** @type {string} */
EngineAPI.IDatabaseInfo.prototype.qOwnerSeparator;
 /** @type {boolean} */
EngineAPI.IDatabaseInfo.prototype.qDBFirst;
 /** @type {string} */
EngineAPI.IDatabaseInfo.prototype.qQuotePreffix;
 /** @type {string} */
EngineAPI.IDatabaseInfo.prototype.qQuoteSuffix;
 /** @type {string} */
EngineAPI.IDatabaseInfo.prototype.qSpecialChars;
 /** @type {string} */
EngineAPI.IDatabaseInfo.prototype.qDefaultDatabase;
 /** @type {!Array<string>} */
EngineAPI.IDatabaseInfo.prototype.qKeywords;
/**
 * @record
 * @struct
 */
EngineAPI.IDatabaseOwner = function() {};
 /** @type {string} */
EngineAPI.IDatabaseOwner.prototype.qName;
/**
 * @record
 * @struct
 */
EngineAPI.IDatabase = function() {};
 /** @type {string} */
EngineAPI.IDatabase.prototype.qName;
 /** @type {boolean} */
EngineAPI.IDatabase.prototype.qIsDefault;
/**
 * @record
 * @struct
 */
EngineAPI.IDataField = function() {};
 /** @type {string} */
EngineAPI.IDataField.prototype.qName;
 /** @type {boolean} */
EngineAPI.IDataField.prototype.qIsKey;
 /** @type {string} */
EngineAPI.IDataField.prototype.qOriginalFieldName;
/**
 * @record
 * @struct
 */
EngineAPI.IDataRecord = function() {};
 /** @type {!Array<string>} */
EngineAPI.IDataRecord.prototype.qValues;
/**
 * @record
 * @struct
 */
EngineAPI.IDataTable = function() {};
 /** @type {string} */
EngineAPI.IDataTable.prototype.qName;
 /** @type {string} */
EngineAPI.IDataTable.prototype.qType;
/**
 * @record
 * @struct
 */
EngineAPI.IFieldDescription = function() {};
 /** @type {number} */
EngineAPI.IFieldDescription.prototype.qInternalNumber;
 /** @type {string} */
EngineAPI.IFieldDescription.prototype.qName;
 /** @type {!Array<string>} */
EngineAPI.IFieldDescription.prototype.qSrcTables;
 /** @type {boolean} */
EngineAPI.IFieldDescription.prototype.qIsSystem;
 /** @type {boolean} */
EngineAPI.IFieldDescription.prototype.qIsHidden;
 /** @type {boolean} */
EngineAPI.IFieldDescription.prototype.qIsSemantic;
 /** @type {boolean} */
EngineAPI.IFieldDescription.prototype.qDistinctOnly;
 /** @type {number} */
EngineAPI.IFieldDescription.prototype.qCardinal;
 /** @type {number} */
EngineAPI.IFieldDescription.prototype.qTotalCount;
 /** @type {boolean} */
EngineAPI.IFieldDescription.prototype.qIsLocked;
 /** @type {boolean} */
EngineAPI.IFieldDescription.prototype.qAlwaysOneSelected;
 /** @type {boolean} */
EngineAPI.IFieldDescription.prototype.qAndMode;
 /** @type {boolean} */
EngineAPI.IFieldDescription.prototype.qIsNumeric;
 /** @type {string} */
EngineAPI.IFieldDescription.prototype.qComment;
 /** @type {!Array<string>} */
EngineAPI.IFieldDescription.prototype.qTags;
 /** @type {boolean} */
EngineAPI.IFieldDescription.prototype.qIsDefinitionOnly;
/**
 * @record
 * @struct
 */
EngineAPI.IDelimiterInfo = function() {};
 /** @type {string} */
EngineAPI.IDelimiterInfo.prototype.qName;
 /** @type {string} */
EngineAPI.IDelimiterInfo.prototype.qScriptCode;
 /** @type {number} */
EngineAPI.IDelimiterInfo.prototype.qNumber;
 /** @type {boolean} */
EngineAPI.IDelimiterInfo.prototype.qIsMultiple;
/**
 * @record
 * @struct
 */
EngineAPI.IFileDataFormat = function() {};
 /** @type {string} */
EngineAPI.IFileDataFormat.prototype.qType;
 /** @type {string} */
EngineAPI.IFileDataFormat.prototype.qLabel;
 /** @type {string} */
EngineAPI.IFileDataFormat.prototype.qQuote;
 /** @type {string} */
EngineAPI.IFileDataFormat.prototype.qComment;
 /** @type {!EngineAPI.IDelimiterInfo} */
EngineAPI.IFileDataFormat.prototype.qDelimiter;
 /** @type {number} */
EngineAPI.IFileDataFormat.prototype.qCodePage;
 /** @type {number} */
EngineAPI.IFileDataFormat.prototype.qHeaderSize;
 /** @type {number} */
EngineAPI.IFileDataFormat.prototype.qRecordSize;
 /** @type {number} */
EngineAPI.IFileDataFormat.prototype.qTabSize;
 /** @type {boolean} */
EngineAPI.IFileDataFormat.prototype.qIgnoreEOF;
 /** @type {string} */
EngineAPI.IFileDataFormat.prototype.qFixedWidthDelimiters;
/**
 * @record
 * @struct
 */
EngineAPI.IDataTableEx = function() {};
 /** @type {string} */
EngineAPI.IDataTableEx.prototype.qName;
 /** @type {!Array<!EngineAPI.IDataField>} */
EngineAPI.IDataTableEx.prototype.qFields;
 /** @type {string} */
EngineAPI.IDataTableEx.prototype.qFormatSpec;
/**
 * @record
 * @struct
 */
EngineAPI.IFolderItem = function() {};
 /** @type {string} */
EngineAPI.IFolderItem.prototype.qName;
 /** @type {string} */
EngineAPI.IFolderItem.prototype.qType;
/**
 * @record
 * @struct
 */
EngineAPI.IStaticContentList = function() {};
 /** @type {!EngineAPI.IStaticContentListItem} */
EngineAPI.IStaticContentList.prototype.qItems;
/**
 * @record
 * @struct
 */
EngineAPI.IStaticContentListItem = function() {};
 /** @type {string} */
EngineAPI.IStaticContentListItem.prototype.qUrlDef;
 /** @type {string} */
EngineAPI.IStaticContentListItem.prototype.qUrl;
/**
 * @record
 * @struct
 */
EngineAPI.IStaticContentUrl = function() {};
 /** @type {string} */
EngineAPI.IStaticContentUrl.prototype.qUrl;
/**
 * @record
 * @struct
 */
EngineAPI.IStaticContentUrlDef = function() {};
 /** @type {string} */
EngineAPI.IStaticContentUrlDef.prototype.qUrl;
/**
 * @record
 * @struct
 */
EngineAPI.ICalenderStrings = function() {};
 /** @type {!Array<string>} */
EngineAPI.ICalenderStrings.prototype.qDayNames;
 /** @type {!Array<string>} */
EngineAPI.ICalenderStrings.prototype.qMonthNames;
 /** @type {!Array<string>} */
EngineAPI.ICalenderStrings.prototype.qLongDayNames;
 /** @type {!Array<string>} */
EngineAPI.ICalenderStrings.prototype.qLongMonthNames;
/**
 * @record
 * @struct
 */
EngineAPI.ILocaleInfo = function() {};
 /** @type {string} */
EngineAPI.ILocaleInfo.prototype.qDecimalSep;
 /** @type {string} */
EngineAPI.ILocaleInfo.prototype.qThousandSep;
 /** @type {string} */
EngineAPI.ILocaleInfo.prototype.qListSep;
 /** @type {string} */
EngineAPI.ILocaleInfo.prototype.qMoneyDecimalSep;
 /** @type {string} */
EngineAPI.ILocaleInfo.prototype.qMoneyThousandSep;
 /** @type {number} */
EngineAPI.ILocaleInfo.prototype.qCurrentYear;
 /** @type {string} */
EngineAPI.ILocaleInfo.prototype.qMoneyFmt;
 /** @type {string} */
EngineAPI.ILocaleInfo.prototype.qTimeFmt;
 /** @type {string} */
EngineAPI.ILocaleInfo.prototype.qDateFmt;
 /** @type {string} */
EngineAPI.ILocaleInfo.prototype.qTimestampFmt;
 /** @type {!EngineAPI.ICalenderStrings} */
EngineAPI.ILocaleInfo.prototype.qCalendarStrings;
 /** @type {boolean} */
EngineAPI.ILocaleInfo.prototype.qFirstWeekDay;
 /** @type {number} */
EngineAPI.ILocaleInfo.prototype.qBrokenWeeks;
 /** @type {number} */
EngineAPI.ILocaleInfo.prototype.qReferenceDay;
 /** @type {number} */
EngineAPI.ILocaleInfo.prototype.qFirstMonthOfYear;
 /** @type {string} */
EngineAPI.ILocaleInfo.prototype.qCollation;
/**
 * @record
 * @struct
 */
EngineAPI.IMediaListItem = function() {};
 /** @type {string} */
EngineAPI.IMediaListItem.prototype.qUrlDef;
 /** @type {string} */
EngineAPI.IMediaListItem.prototype.qUrl;
/**
 * @record
 * @struct
 */
EngineAPI.IMediaList = function() {};
 /** @type {!Array<!EngineAPI.IMediaListItem>} */
EngineAPI.IMediaList.prototype.qItems;
/**
 * @record
 * @struct
 */
EngineAPI.IEditorBreakpoint = function() {};
 /** @type {string} */
EngineAPI.IEditorBreakpoint.prototype.qbufferName;
 /** @type {number} */
EngineAPI.IEditorBreakpoint.prototype.qlineIx;
 /** @type {boolean} */
EngineAPI.IEditorBreakpoint.prototype.qEnabled;
/**
 * @record
 * @struct
 */
EngineAPI.ITableRow = function() {};
 /** @type {!Array<!EngineAPI.IFieldValue>} */
EngineAPI.ITableRow.prototype.vqValue;
/**
 * @record
 * @struct
 */
EngineAPI.ISize = function() {};
 /** @type {number} */
EngineAPI.ISize.prototype.qcx;
 /** @type {number} */
EngineAPI.ISize.prototype.qcy;
/**
 * @record
 * @struct
 */
EngineAPI.IDerivedFieldsInTableData = function() {};
 /** @type {string} */
EngineAPI.IDerivedFieldsInTableData.prototype.qDefinitionName;
 /** @type {!Array<string>} */
EngineAPI.IDerivedFieldsInTableData.prototype.qTags;
 /** @type {boolean} */
EngineAPI.IDerivedFieldsInTableData.prototype.qActive;
/**
 * @record
 * @struct
 */
EngineAPI.IFieldInTableData = function() {};
 /** @type {string} */
EngineAPI.IFieldInTableData.prototype.qName;
 /** @type {!Array<string>} */
EngineAPI.IFieldInTableData.prototype.qOriginalFields;
 /** @type {boolean} */
EngineAPI.IFieldInTableData.prototype.qPresent;
 /** @type {boolean} */
EngineAPI.IFieldInTableData.prototype.qHasNull;
 /** @type {boolean} */
EngineAPI.IFieldInTableData.prototype.qHasWild;
 /** @type {boolean} */
EngineAPI.IFieldInTableData.prototype.qHasDuplicates;
 /** @type {boolean} */
EngineAPI.IFieldInTableData.prototype.qIsSynthetic;
 /** @type {number} */
EngineAPI.IFieldInTableData.prototype.qInformationDensity;
 /** @type {number} */
EngineAPI.IFieldInTableData.prototype.qnNonNulls;
 /** @type {number} */
EngineAPI.IFieldInTableData.prototype.qnRows;
 /** @type {number} */
EngineAPI.IFieldInTableData.prototype.qSubsetRatio;
 /** @type {number} */
EngineAPI.IFieldInTableData.prototype.qnTotalDistinctValues;
 /** @type {number} */
EngineAPI.IFieldInTableData.prototype.qnPresentDistinctValues;
 /** @type {string} */
EngineAPI.IFieldInTableData.prototype.qKeyType;
 /** @type {string} */
EngineAPI.IFieldInTableData.prototype.qComment;
 /** @type {!Array<string>} */
EngineAPI.IFieldInTableData.prototype.qTags;
 /** @type {!EngineAPI.IDerivedFieldsInTableData} */
EngineAPI.IFieldInTableData.prototype.qDerivedFields;
/**
 * @record
 * @struct
 */
EngineAPI.IPoint = function() {};
 /** @type {number} */
EngineAPI.IPoint.prototype.qx;
 /** @type {number} */
EngineAPI.IPoint.prototype.qy;
/**
 * @record
 * @struct
 */
EngineAPI.ITableRecord = function() {};
 /** @type {string} */
EngineAPI.ITableRecord.prototype.qName;
 /** @type {boolean} */
EngineAPI.ITableRecord.prototype.qLoose;
 /** @type {number} */
EngineAPI.ITableRecord.prototype.qNoOfRows;
 /** @type {!Array<!EngineAPI.IFieldInTableData>} */
EngineAPI.ITableRecord.prototype.qFields;
 /** @type {!EngineAPI.IPoint} */
EngineAPI.ITableRecord.prototype.qPos;
 /** @type {string} */
EngineAPI.ITableRecord.prototype.qComment;
 /** @type {boolean} */
EngineAPI.ITableRecord.prototype.qIsDirectDiscovery;
 /** @type {boolean} */
EngineAPI.ITableRecord.prototype.qIsSynthetic;
/**
 * @record
 * @struct
 */
EngineAPI.ISourceKeyRecord = function() {};
 /** @type {!Array<string>} */
EngineAPI.ISourceKeyRecord.prototype.qKeyFields;
 /** @type {!Array<string>} */
EngineAPI.ISourceKeyRecord.prototype.qTables;
/**
 * @record
 * @struct
 */
EngineAPI.ITextMacro = function() {};
 /** @type {string} */
EngineAPI.ITextMacro.prototype.qTag;
 /** @type {number} */
EngineAPI.ITextMacro.prototype.qRefSeqNo;
 /** @type {number} */
EngineAPI.ITextMacro.prototype.qSetSeqNo;
 /** @type {string} */
EngineAPI.ITextMacro.prototype.qDisplayString;
 /** @type {boolean} */
EngineAPI.ITextMacro.prototype.qIsSystem;
 /** @type {boolean} */
EngineAPI.ITextMacro.prototype.qIsReserved;
/**
 * @record
 * @struct
 */
EngineAPI.IRect = function() {};
 /** @type {number} */
EngineAPI.IRect.prototype.qLeft;
 /** @type {number} */
EngineAPI.IRect.prototype.qTop;
 /** @type {number} */
EngineAPI.IRect.prototype.qWidth;
 /** @type {number} */
EngineAPI.IRect.prototype.qHeight;
/**
 * @record
 * @struct
 */
EngineAPI.ITableViewTableWinSaveInfo = function() {};
 /** @type {!EngineAPI.IRect} */
EngineAPI.ITableViewTableWinSaveInfo.prototype.qPos;
 /** @type {string} */
EngineAPI.ITableViewTableWinSaveInfo.prototype.qCaption;
/**
 * @record
 * @struct
 */
EngineAPI.ITableViewBroomPointSaveInfo = function() {};
 /** @type {!EngineAPI.IPoint} */
EngineAPI.ITableViewBroomPointSaveInfo.prototype.qPos;
 /** @type {string} */
EngineAPI.ITableViewBroomPointSaveInfo.prototype.qTable;
 /** @type {!Array<string>} */
EngineAPI.ITableViewBroomPointSaveInfo.prototype.qFields;
/**
 * @record
 * @struct
 */
EngineAPI.ITableViewConnectionPointSaveInfo = function() {};
 /** @type {!EngineAPI.IPoint} */
EngineAPI.ITableViewConnectionPointSaveInfo.prototype.qPos;
 /** @type {!Array<string>} */
EngineAPI.ITableViewConnectionPointSaveInfo.prototype.qFields;
/**
 * @record
 * @struct
 */
EngineAPI.ITableViewSaveInfo = function() {};
 /** @type {!Array<!EngineAPI.ITableViewTableWinSaveInfo>} */
EngineAPI.ITableViewSaveInfo.prototype.qTables;
 /** @type {!Array<!EngineAPI.ITableViewBroomPointSaveInfo>} */
EngineAPI.ITableViewSaveInfo.prototype.qBroomPoints;
 /** @type {!Array<!EngineAPI.ITableViewConnectionPointSaveInfo>} */
EngineAPI.ITableViewSaveInfo.prototype.qConnectionPoints;
 /** @type {number} */
EngineAPI.ITableViewSaveInfo.prototype.qZoomFactor;
/**
 * @record
 * @struct
 */
EngineAPI.ITableViewCtlSaveInfo = function() {};
 /** @type {!EngineAPI.ITableViewSaveInfo} */
EngineAPI.ITableViewCtlSaveInfo.prototype.qInternalView;
 /** @type {!EngineAPI.ITableViewSaveInfo} */
EngineAPI.ITableViewCtlSaveInfo.prototype.qSourceView;
/**
 * @record
 * @struct
 */
EngineAPI.ITableViewDlgSaveInfo = function() {};
 /** @type {!EngineAPI.IRect} */
EngineAPI.ITableViewDlgSaveInfo.prototype.qPos;
 /** @type {!EngineAPI.ITableViewCtlSaveInfo} */
EngineAPI.ITableViewDlgSaveInfo.prototype.qCtlInfo;
 /** @type {number} */
EngineAPI.ITableViewDlgSaveInfo.prototype.qMode;
/**
 * @record
 * @struct
 */
EngineAPI.ISearchCombinationOptions = function() {};
 /** @type {!Array<string>} */
EngineAPI.ISearchCombinationOptions.prototype.qSearchFields;
 /** @type {string} */
EngineAPI.ISearchCombinationOptions.prototype.qContext;
 /** @type {string} */
EngineAPI.ISearchCombinationOptions.prototype.qCharEncoding;
 /** @type {!Array<string>} */
EngineAPI.ISearchCombinationOptions.prototype.qAttributes;
/**
 * @record
 * @struct
 */
EngineAPI.ISearchGroupOptions = function() {};
 /** @type {?} */
EngineAPI.ISearchGroupOptions.prototype.qGroupType;
 /** @type {number} */
EngineAPI.ISearchGroupOptions.prototype.qOffset;
 /** @type {number} */
EngineAPI.ISearchGroupOptions.prototype.qCount;
/**
 * @record
 * @struct
 */
EngineAPI.ISearchGroupItemOptions = function() {};
 /** @type {!EngineAPI.IGenericObject} */
EngineAPI.ISearchGroupItemOptions.prototype.qGroupItemType;
 /** @type {number} */
EngineAPI.ISearchGroupItemOptions.prototype.qOffset;
 /** @type {number} */
EngineAPI.ISearchGroupItemOptions.prototype.qCount;
/**
 * @record
 * @struct
 */
EngineAPI.ISearchPage = function() {};
 /** @type {number} */
EngineAPI.ISearchPage.prototype.qOffset;
 /** @type {number} */
EngineAPI.ISearchPage.prototype.qCount;
 /** @type {number} */
EngineAPI.ISearchPage.prototype.qMaxNbrFieldMatches;
 /** @type {!Array<!EngineAPI.ISearchGroupOptions>} */
EngineAPI.ISearchPage.prototype.qGroupOptions;
 /** @type {!Array<!EngineAPI.ISearchGroupItemOptions>} */
EngineAPI.ISearchPage.prototype.qGroupItemOptions;
/**
 * @record
 * @struct
 */
EngineAPI.ISearchFieldDictionary = function() {};
 /** @type {number} */
EngineAPI.ISearchFieldDictionary.prototype.qField;
 /** @type {!Array<!EngineAPI.ISearchTermResult>} */
EngineAPI.ISearchFieldDictionary.prototype.qResult;
/**
 * @record
 * @struct
 */
EngineAPI.ISearchCharRange = function() {};
 /** @type {number} */
EngineAPI.ISearchCharRange.prototype.qCharPos;
 /** @type {number} */
EngineAPI.ISearchCharRange.prototype.qCharCount;
 /** @type {number} */
EngineAPI.ISearchCharRange.prototype.qTerm;
/**
 * @record
 * @struct
 */
EngineAPI.ISearchTermResult = function() {};
 /** @type {string} */
EngineAPI.ISearchTermResult.prototype.qText;
 /** @type {number} */
EngineAPI.ISearchTermResult.prototype.qElemNumber;
 /** @type {!Array<!EngineAPI.ISearchCharRange>} */
EngineAPI.ISearchTermResult.prototype.qRanges;
/**
 * @record
 * @struct
 */
EngineAPI.ISearchMatchCombinations = function() {};
 /** @type {!Array<!EngineAPI.ISerachMatchCombination>} */
EngineAPI.ISearchMatchCombinations.prototype.qSearchMatchCombinations;
/**
 * @record
 * @struct
 */
EngineAPI.ISerachMatchCombination = function() {};
 /** @type {number} */
EngineAPI.ISerachMatchCombination.prototype.qId;
 /** @type {!Array<!EngineAPI.ISerachFieldMatch>} */
EngineAPI.ISerachMatchCombination.prototype.qFieldMatches;
/**
 * @record
 * @struct
 */
EngineAPI.ISerachFieldMatch = function() {};
 /** @type {number} */
EngineAPI.ISerachFieldMatch.prototype.qField;
 /** @type {!Array<number>} */
EngineAPI.ISerachFieldMatch.prototype.qValues;
 /** @type {!Array<number>} */
EngineAPI.ISerachFieldMatch.prototype.qTerms;
 /** @type {number} */
EngineAPI.ISerachFieldMatch.prototype.qNoOfMatches;
/**
 * @record
 * @struct
 */
EngineAPI.ISearchAssociationResult = function() {};
 /** @type {!Array<string>} */
EngineAPI.ISearchAssociationResult.prototype.qFieldNames;
 /** @type {!Array<string>} */
EngineAPI.ISearchAssociationResult.prototype.qSearchTerms;
 /** @type {!Array<!EngineAPI.ISearchFieldDictionary>} */
EngineAPI.ISearchAssociationResult.prototype.qFieldDictionaries;
 /** @type {!Array<!EngineAPI.ISearchMatchCombinations>} */
EngineAPI.ISearchAssociationResult.prototype.qSearchTermsMatched;
 /** @type {number} */
EngineAPI.ISearchAssociationResult.prototype.qTotalSearchResults;
/**
 * @record
 * @struct
 */
EngineAPI.ISearchObjectOptions = function() {};
 /** @type {!Array<string>} */
EngineAPI.ISearchObjectOptions.prototype.qAttributes;
 /** @type {string} */
EngineAPI.ISearchObjectOptions.prototype.qCharEncoding;
/**
 * @record
 * @struct
 */
EngineAPI.ISearchAttribute = function() {};
 /** @type {string} */
EngineAPI.ISearchAttribute.prototype.qKey;
 /** @type {string} */
EngineAPI.ISearchAttribute.prototype.qValue;
/**
 * @record
 * @struct
 */
EngineAPI.ISearchGroupItemMatch = function() {};
 /** @type {string} */
EngineAPI.ISearchGroupItemMatch.prototype.qText;
 /** @type {!Array<!EngineAPI.ISearchAttribute>} */
EngineAPI.ISearchGroupItemMatch.prototype.qAttributes;
 /** @type {!Array<!EngineAPI.ISearchCharRange>} */
EngineAPI.ISearchGroupItemMatch.prototype.qRanges;
/**
 * @record
 * @struct
 */
EngineAPI.ISearchGroupItem = function() {};
 /** @type {string} */
EngineAPI.ISearchGroupItem.prototype.qItemType;
 /** @type {number} */
EngineAPI.ISearchGroupItem.prototype.qTotalNumberOfMatches;
 /** @type {string} */
EngineAPI.ISearchGroupItem.prototype.qIdentifier;
 /** @type {!Array<!EngineAPI.ISearchGroupItemMatch>} */
EngineAPI.ISearchGroupItem.prototype.qItemMatches;
 /** @type {!Array<number>} */
EngineAPI.ISearchGroupItem.prototype.qSearchTermsMatched;
/**
 * @record
 * @struct
 */
EngineAPI.ISearchGroup = function() {};
 /** @type {number} */
EngineAPI.ISearchGroup.prototype.qId;
 /** @type {string} */
EngineAPI.ISearchGroup.prototype.qGroupType;
 /** @type {!Array<number>} */
EngineAPI.ISearchGroup.prototype.qSearchTermsMatched;
 /** @type {number} */
EngineAPI.ISearchGroup.prototype.qTotalNumberOfItems;
 /** @type {!Array<!EngineAPI.ISearchGroupItem>} */
EngineAPI.ISearchGroup.prototype.qItems;
/**
 * @record
 * @struct
 */
EngineAPI.ISearchResult = function() {};
 /** @type {!Array<string>} */
EngineAPI.ISearchResult.prototype.qSearchTerms;
 /** @type {number} */
EngineAPI.ISearchResult.prototype.qTotalNumberOfGroups;
 /** @type {!EngineAPI.ISearchGroup} */
EngineAPI.ISearchResult.prototype.qSearchGroupArray;
/**
 * @record
 * @struct
 */
EngineAPI.ISearchSuggestItem = function() {};
 /** @type {string} */
EngineAPI.ISearchSuggestItem.prototype.qValue;
 /** @type {number} */
EngineAPI.ISearchSuggestItem.prototype.qTerm;
/**
 * @record
 * @struct
 */
EngineAPI.ISearchSuggestionResult = function() {};
 /** @type {!Array<!EngineAPI.ISearchSuggestItem>} */
EngineAPI.ISearchSuggestionResult.prototype.qSuggestions;
 /** @type {!Array<string>} */
EngineAPI.ISearchSuggestionResult.prototype.qFieldNames;
/**
 * @record
 * @struct
 */
EngineAPI.IApp = function() {};
 /** @type {!EngineAPI.IGlobal} */
EngineAPI.IApp.prototype.global;

/**
 * Aborts any selection mode in an app. For more information about selection mode!
 * @param {boolean} qAccept
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.abortModal = function(qAccept) {};

/**
 * You can create multiple states within a Qlik Sense app and apply these states to specific objects within the app.
 * Objects in a given state are not affected by user selections in the other states.
 * @param {string} qStateName
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.addAlternateState = function(qStateName) {};

/**
 * Adds a field on the fly. The expression of a field on the fly is persisted but not its values.
 * For example, you cannot add a field on the fly with an expression that uses the Sum or Count aggregation functions.
 * @param {string} qName
 * @param {string} qExpr
 * @return {!Promise<boolean>}
 */
EngineAPI.IApp.prototype.addFieldFromExpression = function(qName, qExpr) {};

/**
 * Applies a bookmark.
 * @param {string} qId
 * @return {!Promise<boolean>}
 */
EngineAPI.IApp.prototype.applyBookmark = function(qId) {};

/**
 * Returns the number of entries on the Back stack..
 * @return {!Promise<number>}
 */
EngineAPI.IApp.prototype.backCount = function() {};

/**
 * Loads the last logical operation (if any).
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.back = function() {};

/**
 * Checks if a given expression is valid.
 * 
 * Note: The expression is correct if the parameters qErrorMsg, qBadFieldNames and qDangerousFieldNames are empty.
 * @param {string} qExpr
 * @param {!Array<string>=} qLabels
 * @return {!Promise<!EngineAPI.ICheckExpressionResult>}
 */
EngineAPI.IApp.prototype.checkExpression = function(qExpr, qLabels) {};

/**
 * Checks if:
 * 
 * - a given expression is valid
 * - a number is correct according to the locale.
 * 
 * Note: The expression is correct if the parameters qErrorMsg and qBadFieldNames are empty.
 * @param {string} qExpr
 * @return {!Promise<!EngineAPI.ICheckNumberOrExpressionResult>}
 */
EngineAPI.IApp.prototype.checkNumberOrExpression = function(qExpr) {};

/**
 * Checks the syntax of a script.
 * If there are errors, the engine returns the following properties in the response:
 * 
 * - qErrLen: (Integer) Length of the word where the error is located
 * - qTabIx: (Integer) Number of the faulty section
 * - qLineInTab: (Integer) Line number in the section where the error is located
 * - qColInLine: (Integer) Position of the erroneous text from the beginning of the line
 * - qTextPos: (Integer) Position of the erroneous text from the beginning of the script.
 * - qSecondaryFailure: (Boolean) The default value is false.
 * 
 * Note: The first area is the primary error area, the second area is the secondary error area.
 * The second area is optional and is shown only if qSecondaryFailure is set to true.
 * The second area ends when the next statement in the script begins.
 * @return {!Promise<!Array<!EngineAPI.IScriptSyntaxError>>}
 */
EngineAPI.IApp.prototype.checkScriptSyntax = function() {};

/**
 * Clears all selections in all fields of the current app.
 *                                Set this parameter to true to clear all selections, including the locked fields.
 *                              related to this alternate state are cleared. This parameter is optional.
 *                              Default state is current selections.
 * @param {boolean} qLockedAlso
 * @param {string=} qStateName
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.clearAll = function(qLockedAlso, qStateName) {};

/**
 * Clears entirely the undo and redo buffer.
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.clearUndoBuffer = function() {};

/**
 * Clones a bookmark.
 * 
 * @param {string} qId
 * @return {!Promise<string>}
 */
EngineAPI.IApp.prototype.cloneBookmark = function(qId) {};

/**
 * Clones a dimension.
 * 
 * Note: The identifier is set by the engine.
 * @param {string} qId
 * @return {!Promise<string>}
 */
EngineAPI.IApp.prototype.cloneDimension = function(qId) {};

/**
 * Clones a measure.
 * 
 * Note: The identifier is set by the engine.
 * @param {string} qId
 * @return {!Promise<string>}
 */
EngineAPI.IApp.prototype.cloneMeasure = function(qId) {};

/**
 * Clones any visualizations, sheets and stories. The clone method works for both app objects and child objects.
 * When you clone an object that contains children, the children are cloned as well.
 * 
 * Note: The identifier is set by the engine.
 * @param {string} qId
 * @return {!Promise<string>}
 */
EngineAPI.IApp.prototype.cloneObject = function(qId) {};

/**
 * Commits the draft of an object that was previously created by invoking the CreateDraft method.
 * Committing a draft replaces the corresponding published object.
 * 
 * Note: The identifier is set by the engine.
 * @param {string} qId
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.commitDraft = function(qId) {};

/**
 * Creates a bookmark.
 * @param {!EngineAPI.IGenericBookmarkProperties} qProp
 * @return {!Promise<!EngineAPI.IGenericBookmark>}
 */
EngineAPI.IApp.prototype.createBookmark = function(qProp) {};

/**
 * Creates a connection. A connection indicates from which data source, the data should be taken.
 * @param {!EngineAPI.IConnection} qConnection
 * @return {!Promise<string>}
 */
EngineAPI.IApp.prototype.createConnection = function(qConnection) {};

/**
 * Creates a master dimension.
 * A master dimension is stored in the library of an app and can be used in many objects.
 * Several generic objects can contain the same dimension.
 * @param {!EngineAPI.IGenericDimensionProperties} qProp
 * @return {!Promise<!EngineAPI.IGenericDimension>}
 */
EngineAPI.IApp.prototype.createDimension = function(qProp) {};

/**
 * Creates a draft of an object.
 * This method can be used to create a draft of a sheet or a story that is published.
 * This is a way to continue working on a sheet or a story that is published.
 * Replace the published object by the content of the draft by invoking the CommitDraft method.
 * 
 * Note: The identifier is set by the engine.
 * @param {string} qId
 * @return {!Promise<string>}
 */
EngineAPI.IApp.prototype.createDraft = function(qId) {};

/**
 * Creates a master measure.
 * A master measure is stored in the library of an app and can be used in many objects.
 * Several generic objects can contain the same measure.
 * @param {!EngineAPI.IGenericMeasureProperties} qProp
 * @return {!Promise<!EngineAPI.IGenericMeasure>}
 */
EngineAPI.IApp.prototype.createMeasure = function(qProp) {};

/**
 * Creates a generic object at app level.
 * It is possible to create a generic object that is linked to another object.
 * A linked object is an object that points to a linking object.
 * The linking object is defined in the properties of the linked object (in qExtendsId).
 * The linked object has the same properties as the linking object.
 * Notre: The linking object cannot be a transient object.
 * @param {!EngineAPI.IGenericObjectProperties} qProp
 * @return {!Promise<!EngineAPI.IGenericObject>}
 */
EngineAPI.IApp.prototype.createObject = function(qProp) {};

/**
 * Creates a transient object. For example, you can use a transient object to create an app overview or a story overview.
 * It is possible to create a transient object that is linked to another object.
 * A linked object is an object that points to a linking object.
 * The linking object is defined in the properties of the linked object (in qExtendsId).
 * The linked object has the same properties as the linking object.
 * @param {!EngineAPI.IGenericObjectProperties} qProp
 * @return {!Promise<!EngineAPI.IGenericObject>}
 */
EngineAPI.IApp.prototype.createSessionObject = function(qProp) {};

/**
 * Creates a transient variable.
 * >> This parameter is mandatory.
 * @param {!EngineAPI.IGenericVariableProperties} qProp
 * @return {!Promise<!EngineAPI.IGenericVariable>}
 */
EngineAPI.IApp.prototype.createSessionVariable = function(qProp) {};

/**
 * Creates a variable.
 * 
 * Note: This method is deprecated (not recommended to use). Use CreateVariableEx method instead.
 * @param {string} qName
 * @return {!Promise<boolean>}
 */
EngineAPI.IApp.prototype.createVariable = function(qName) {};

/**
 * Creates a variable.
 * 
 * Note: This method is deprecated (not recommended to use). Use CreateVariableEx method instead.
 *                                             >> This parameter is mandatory.
 * @param {!EngineAPI.IGenericVariableProperties} qProp
 * @return {!Promise<!EngineAPI.INxInfo>}
 */
EngineAPI.IApp.prototype.createVariableEx = function(qProp) {};

/**
 * Deletes a connection.
 * The AttachedFiles connection can only be removed by the administrator of the system.
 * 
 * Note: In Qlik Sense Enterprise, there is an additional file connection named AttachedFiles.
 * @param {string} qConnectionId
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.deleteConnection = function(qConnectionId) {};

/**
 * Removes a bookmark.
 * 
 * Note: The operation is successful if qSuccess is set to true.
 * @param {string} qId
 * @return {!Promise<boolean>}
 */
EngineAPI.IApp.prototype.destroyBookmark = function(qId) {};

/**
 * Removes a dimension.
 * 
 * Note: The operation is successful if qSuccess is set to true.
 * @param {string} qId
 * @return {!Promise<boolean>}
 */
EngineAPI.IApp.prototype.destroyDimension = function(qId) {};

/**
 * Removes a dimension.
 * 
 * Note: The operation is successful if qSuccess is set to true.
 * @param {string} qId
 * @param {string} qSourceId
 * @return {!Promise<boolean>}
 */
EngineAPI.IApp.prototype.destroyDraft = function(qId, qSourceId) {};

/**
 * Removes a generic measure.
 * 
 * Note: The operation is successful if qSuccess is set to true.
 * @param {string} qId
 * @return {!Promise<boolean>}
 */
EngineAPI.IApp.prototype.destroyMeasure = function(qId) {};

/**
 * Removes an app object.
 * 
 * Note: The operation is successful if qSuccess is set to true.
 * @param {string} qId
 * @return {!Promise<boolean>}
 */
EngineAPI.IApp.prototype.destroyObject = function(qId) {};

/**
 * Removes a transient object.
 * 
 * Note: The operation is successful if qSuccess is set to true.
 * @param {string} qId
 * @return {!Promise<boolean>}
 */
EngineAPI.IApp.prototype.destroySessionObject = function(qId) {};

/**
 * Removes a transient variable.
 * 
 * Note: The operation is successful if qSuccess is set to true.
 * @param {string} qId
 * @return {!Promise<boolean>}
 */
EngineAPI.IApp.prototype.destroySessionVariable = function(qId) {};

/**
 * Removes a variable.
 * 
 * Note: The operation is successful if qSuccess is set to true.
 * Script-defined variables cannot be removed using the DestroyVariableById method or the DestroyVariableByName method.
 * @param {string} qId
 * @return {!Promise<boolean>}
 */
EngineAPI.IApp.prototype.destroyVariableById = function(qId) {};

/**
 * Removes a variable.
 * 
 * Note: The operation is successful if qSuccess is set to true.
 * Script-defined variables cannot be removed using the DestroyVariableById method or the DestroyVariableByName method.
 * @param {string} qName
 * @return {!Promise<boolean>}
 */
EngineAPI.IApp.prototype.destroyVariableByName = function(qName) {};

/**
 * Reloads the script that is set in an app.
 * 
 * Note: The operation is successful if qSuccess is set to true.
 * 
 * 0: for default mode
 * 1: for ABEND; the reload of the script ends if an error occurs
 * 2: for ignore; the reload of the script continues even if an error is detected in the script.
 * 
 * This parameter is optional.
 * The default value is false.
 * The execution of the script will be in debug mode.
 * This parameter is optional. The default value is false.
 * @param {number=} qMode
 * @param {boolean=} qPartial
 * @param {boolean=} qDebug
 * @return {!Promise<boolean>}
 */
EngineAPI.IApp.prototype.doReload = function(qMode, qPartial, qDebug) {};

/**
 * Reloads the script that is set in an app and returns the path to the script log file.
 * 
 * Note: A log file is created per reload.
 * This happens even if there is a timeout, a memory limit is reached or any other error occurs during the indexing.
 * @param {!EngineAPI.IDoReloadExParams=} qParams
 * @return {!Promise<!EngineAPI.IDoReloadExResult>}
 */
EngineAPI.IApp.prototype.doReloadEx = function(qParams) {};

/**
 * Saves an app. All objects and data in the data model are saved.
 * Script-defined variables cannot be removed using the DestroyVariableById method or the DestroyVariableByName method.
 * @param {string=} qFileName
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.doSave = function(qFileName) {};

/**
 * Evaluates an expression as a string.
 * Script-defined variables cannot be removed using the DestroyVariableById method or the DestroyVariableByName method.
 * @param {string} qExpression
 * @return {!Promise<string>}
 */
EngineAPI.IApp.prototype.evaluate = function(qExpression) {};

/**
 * Evaluates an expression as a dual.
 * Script-defined variables cannot be removed using the DestroyVariableById method or the DestroyVariableByName method.
 * @param {string} qExpression
 * @return {!Promise<!EngineAPI.IFieldValue>}
 */
EngineAPI.IApp.prototype.evaluateEx = function(qExpression) {};

/**
 * Retrieves any fields that belong to the same archipelago as the specified field and
 * that match at least one of the specified tags.
 * Tags set by Qlik Sense are prefixed by the $ sign.
 * belong to the same archipelago as this specified field.
 * @param {string} qFieldName
 * @param {!Array<string>} qTags
 * @return {!Promise<!Array<!EngineAPI.INxMatchingFieldInfo>>}
 */
EngineAPI.IApp.prototype.findMatchingFields = function(qFieldName, qTags) {};

/**
 * Loads the next logical operation (if any).
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.forward = function() {};

/**
 * Returns the number of entries on the Forward stack.
 * @return {!Promise<number>}
 */
EngineAPI.IApp.prototype.forwardCount = function() {};

/**
 * Returns the identifier and the type of any generic object in the app.
 * Script-defined variables cannot be removed using the DestroyVariableById method or the DestroyVariableByName method.
 * @return {!Promise<!Array<!EngineAPI.INxInfo>>}
 */
EngineAPI.IApp.prototype.getAllInfos = function() {};

/**
 * Returns dynamic properties (if any) in addition to the engine (fixed) properties.
 * Script-defined variables cannot be removed using the DestroyVariableById method or the DestroyVariableByName method.
 * @return {!Promise<!EngineAPI.INxAppLayout>}
 */
EngineAPI.IApp.prototype.getAppLayout = function() {};

/**
 * Gets the properties of an app.
 * @return {!Promise<!EngineAPI.INxAppProperties>}
 */
EngineAPI.IApp.prototype.getAppProperties = function() {};

/**
 * Computes a set of association scores for each pair of fields between two given tables that have been loaded in an app.
 * @param {string} qTable1
 * @param {string} qTable2
 * @return {!Promise<!EngineAPI.IAssociationScore>}
 */
EngineAPI.IApp.prototype.getAssociationScores = function(qTable1, qTable2) {};

/**
 * Returns the handle of a bookmark.
 * @param {string} qId
 * @return {!Promise<!EngineAPI.IGenericBookmark>}
 */
EngineAPI.IApp.prototype.getBookmark = function(qId) {};

/**
 * Returns a list of bookmarks in the app.
 * @param {!EngineAPI.INxGetBookmarkOptions} qOptions
 * @return {!Promise<!EngineAPI.INxContainerEntry<?>>}
 */
EngineAPI.IApp.prototype.getBookmarks = function(qOptions) {};

/**
 * Retrieves a connection and returns:
 * - The creation time of the connection
 * - The identifier of the connection
 * - The type of the connection
 * - The name of the connection
 * - The connection string
 * @param {string} qConnectionId
 * @return {!Promise<!EngineAPI.IConnection>}
 */
EngineAPI.IApp.prototype.getConnection = function(qConnectionId) {};

/**
 * Lists the connections in an app.
 * 
 * Note: In Qlik Sense Enterprise, there is an additional file connection named AttachedFiles.
 * This connection is stored in the Qlik Sense repository.
 * @return {!Promise<!Array<!EngineAPI.IConnection>>}
 */
EngineAPI.IApp.prototype.getConnections = function() {};

/**
 * Lists the content libraries.
 * To differentiate a global content library from an app specific content library,
 * you can check the property qAppSpecific.
 * If this property is set to true, it means that the content library is app specific.
 * 
 * Note: There is always one specific content library per app.
 * @return {!Promise<!EngineAPI.IContentLibraryList>}
 */
EngineAPI.IApp.prototype.getContentLibraries = function() {};

/**
 * Gives information about an ODBC, OLEDB or CUSTOM connection.
 * @param {string} qConnectionId
 * @return {!Promise<!EngineAPI.IDatabaseInfo>}
 */
EngineAPI.IApp.prototype.getDatabaseInfo = function(qConnectionId) {};

/**
 * Lists the owners of a database for a ODBC, OLEDB or CUSTOM connection.
 * @param {string} qConnectionId
 * @param {string=} qDatabase
 * @return {!Promise<!Array<!EngineAPI.IDatabaseOwner>>}
 */
EngineAPI.IApp.prototype.getDatabaseOwners = function(qConnectionId, qDatabase) {};

/**
 * Lists the databases inside a ODBC, OLEDB or CUSTOM data source.
 * @param {string} qConnectionId
 * @return {!Promise<!Array<!EngineAPI.IDatabase>>}
 */
EngineAPI.IApp.prototype.getDatabases = function(qConnectionId) {};

/**
 * Lists the fields inside a table of a database for a ODBC, OLEDB or CUSTOM connection.
 * (If qDatabase is not set then qOwner must be set.)
 * (If qOwner is not set then qDatabase must be set.)
 * @param {string} qConnectionId
 * @param {string} qTable
 * @param {string=} qDatabase
 * @param {string=} qOwner
 * @return {!Promise<!Array<!EngineAPI.IDataField>>}
 */
EngineAPI.IApp.prototype.getDatabaseTableFields = function(qConnectionId, qTable, qDatabase, qOwner) {};

/**
 * Retrieves the values of the specified table of a database for a ODBC, OLEDB or CUSTOM connection.
 * (If qDatabase is not set then qOwner must be set.)
 * (If qOwner is not set then qDatabase must be set.)
 * @param {string} qConnectionId
 * @param {string} qTable
 * @param {string=} qDatabase
 * @param {string=} qOwner
 * @return {!Promise<!Array<!EngineAPI.IDataRecord>>}
 */
EngineAPI.IApp.prototype.getDatabaseTablePreview = function(qConnectionId, qTable, qDatabase, qOwner) {};

/**
 * Lists the tables inside a database for a ODBC, OLEDB or CUSTOM connection.
 * (If qDatabase is not set then qOwner must be set.)
 * (If qOwner is not set then qDatabase must be set.)
 * @param {string} qConnectionId
 * @param {string=} qDatabase
 * @param {string=} qOwner
 * @return {!Promise<!Array<!EngineAPI.IDataTable>>}
 */
EngineAPI.IApp.prototype.getDatabaseTables = function(qConnectionId, qDatabase, qOwner) {};

/**
 * Returns the handle of a dimension.
 * @param {string} qId
 * @return {!Promise<!EngineAPI.IGenericDimension>}
 */
EngineAPI.IApp.prototype.getDimension = function(qId) {};

/**
 * Creates a script that contains one section.
 * This section contains Set statements that give localized information from the regional settings of the computer.
 * 
 * Note: The computer regional settings are retrieved when the engine starts.
 * @param {string=} qLocalizedMainSection
 * @return {!Promise<string>}
 */
EngineAPI.IApp.prototype.getEmptyScript = function(qLocalizedMainSection) {};

/**
 * Retrieves the variables that are tagged as favorite.
 * @return {!Promise<!Array<string>>}
 */
EngineAPI.IApp.prototype.getFavoriteVariables = function() {};

/**
 * Retrieves the description of a field.
 * @param {string} qFieldName
 * @return {!Promise<!EngineAPI.IFieldDescription>}
 */
EngineAPI.IApp.prototype.getFieldDescription = function(qFieldName) {};

/**
 * Retrieves the description of a field.
 * @param {string} qFieldName
 * @param {string=} qStateName
 * @return {!Promise<!EngineAPI.IField>}
 */
EngineAPI.IApp.prototype.getField = function(qFieldName, qStateName) {};

/**
 * Lists the fields of a table for a folder connection.
 * @param {string} qConnectionId
 * @param {!EngineAPI.IFileDataFormat} qDataFormat
 * @param {string} qTable
 * @param {string=} qRelativePath
 * @return {(!Promise<string>|!Promise<!Array<!EngineAPI.IDataField>>)}
 */
EngineAPI.IApp.prototype.getFileTableFields = function(qConnectionId, qDataFormat, qTable, qRelativePath) {};

/**
 * Lists the values in a table for a folder connection.
 * @param {string} qConnectionId
 * @param {string} qRelativePath
 * @param {!EngineAPI.IFileDataFormat} qDataFormat
 * @param {string} qTable
 * @return {(!Promise<string>|!Promise<!Array<!EngineAPI.IDataRecord>>)}
 */
EngineAPI.IApp.prototype.getFileTablePreview = function(qConnectionId, qRelativePath, qDataFormat, qTable) {};

/**
 * Lists the tables and fields of a JSON or XML file for a folder connection.
 * @param {string} qConnectionId
 * @param {string} qRelativePath
 * @param {!EngineAPI.IFileDataFormat} qDataFormat
 * @return {!Promise<!Array<!EngineAPI.IDataTableEx>>}
 */
EngineAPI.IApp.prototype.getFileTablesEx = function(qConnectionId, qRelativePath, qDataFormat) {};

/**
 * Lists the tables for a folder connection.
 * @param {string} qConnectionId
 * @param {string} qRelativePath
 * @param {!EngineAPI.IFileDataFormat} qDataFormat
 * @return {!Promise<!Array<!EngineAPI.IDataTable>>}
 */
EngineAPI.IApp.prototype.getFileTables = function(qConnectionId, qRelativePath, qDataFormat) {};

/**
 * There are two ways to specify the directory to retrieve the files from:
 * - Enter the connection identifier; the directory associated to the connection is used.
 * - Enter the connection identifier and a relative path
 * @param {string} qConnectionId
 * @param {string} qRelativePath
 * @return {!Promise<!Array<!EngineAPI.IFolderItem>>}
 */
EngineAPI.IApp.prototype.getFolderItemsForConnection = function(qConnectionId, qRelativePath) {};

/**
 * Gets the content of a file.
 * - ["lib://Connection_Name\\<Folder under your connection>\\<the name of the file you want to use>.txt"]
 * - [ ] should be used when having a lib reference in the first variable.
 * @param {string} qLibPath
 * @return {!Promise<string>}
 */
EngineAPI.IApp.prototype.getIncludeFileContent = function(qLibPath) {};

/**
 * Returns the content of a library.
 * qContentLibraryListItem/qName returned by the GetContentLibraries method.
 * @param {string} qName
 * @return {!Promise<!EngineAPI.IStaticContentList>}
 */
EngineAPI.IApp.prototype.getLibraryContent = function(qName) {};

/**
 * Retrieves locale information.
 * @return {!Promise<!EngineAPI.ILocaleInfo>}
 */
EngineAPI.IApp.prototype.getLocaleInfo = function() {};

/**
 * Returns a vector of loosely coupled state flags, one element for each table in the app.
 * so that the circular references do not create a loop.
 * Where <array of bytes> is an array of state flags, one for each table in the app.
 * 
 * 0 means that the table is not loose
 * 1 means that the table is loose
 * 2 means that the table is always loose and cannot be unloose using the Qlik Engine API.
 * 
 * Note: The last three values in the vector are extra values. These values are for internal use.
 * Note: In case of circular references, the engine automatically create loosely coupled tables
 * @return {!Promise<!Array<number>>}
 */
EngineAPI.IApp.prototype.getLooselyCoupledVector = function() {};

/**
 * Retrieves any fields that match all or one of the specified tags in the data model of an app.
 * 
 * Note: Tags set by Qlik Sense are prefixed by the $ sign.
 * The GetMatchingFields method looks for fields that match one or all of the tags in this list,
 * depending on the value of qMatchingFieldMode.
 * This parameter is optional.
 * The default value is 0.
 * @param {!Array<string>} qTags
 * @param {boolean=} qMatchingFieldMode
 * @return {!Promise<!Array<!EngineAPI.INxMatchingFieldInfo>>}
 */
EngineAPI.IApp.prototype.getMatchingFields = function(qTags, qMatchingFieldMode) {};

/**
 * Lists the media files.
 * 
 * Note: This method is deprecated (not recommended to use). Use GetLibraryContent method instead.
 * @return {(!Promise<boolean>|!Promise<!Array<!MediaList>>)}
 */
EngineAPI.IApp.prototype.getMediaList = function() {};

/**
 * Returns the handle of a measure.
 * 
 * @param {string} qId
 * @return {!Promise<!EngineAPI.IGenericMeasure>}
 */
EngineAPI.IApp.prototype.getMeasure = function(qId) {};

/**
 * Returns the type of the app object and the corresponding handle.
 * 
 * @param {string} qId
 * @return {!Promise<!EngineAPI.IGenericObject>}
 */
EngineAPI.IApp.prototype.getObject = function(qId) {};

/**
 * Returns a list of objects in the app.
 * 
 * @param {!EngineAPI.INxGetObjectOptions} qOptions
 * @return {!Promise<!EngineAPI.INxContainerEntry<?>>}
 */
EngineAPI.IApp.prototype.getObjects = function(qOptions) {};

/**
 * Shows the properties of an object.
 * 
 * Returns the identifier and the definition of the measure.
 * 
 * Note: If the member delta is set to true in the request object, only the delta is retrieved.
 * @return {!Promise<!EngineAPI.INxAppProperties>}
 */
EngineAPI.IApp.prototype.getProperties = function() {};

/**
 * Lists the breakpoints in the script of an app.
 * 
 * Returns information about the breakpoints. <Array of EditorBreakpoint>
 * @return {!Promise<!Array<!EngineAPI.IEditorBreakpoint>>}
 */
EngineAPI.IApp.prototype.getScriptBreakpoints = function() {};

/**
 * Gets values in script.
 * @return {!Promise<string>}
 */
EngineAPI.IApp.prototype.getScript = function() {};

/**
 * Retrieves the data of a specific table.
 * starting from 0.
 * If the offset is set to 0,
 * the rows starting from the position/index 0 are shown.
 * Synthetic fields are present (if any).
 * @param {number} qOffset
 * @param {number} qRows
 * @param {boolean} qSyntheticMode
 * @param {string} qTableName
 * @return {!Promise<!Array<!EngineAPI.ITableRow>>}
 */
EngineAPI.IApp.prototype.getTableData = function(qOffset, qRows, qSyntheticMode, qTableName) {};

/**
 * Returns:
 * 
 * - the list of tables in an app and the fields inside each table
 * - the list of derived fields
 * - the list of key fields
 * 
 *   - true for internal table viewer
 *   - false for source table viewer
 * 
 * >> This parameter is mandatory.
 * @param {!EngineAPI.ISize} qWindowSize
 * @param {!EngineAPI.ISize} qNullSize
 * @param {number} qCellHeight
 * @param {boolean} qSyntheticMode
 * @param {boolean} qIncludeSysVars
 * @return {(!Promise<!Array<!EngineAPI.ITableRecord>>|!Promise<!Array<!EngineAPI.ISourceKeyRecord>>)}
 */
EngineAPI.IApp.prototype.getTablesAndKeys = function(qWindowSize, qNullSize, qCellHeight, qSyntheticMode, qIncludeSysVars) {};

/**
 * Fetches updated variables after a statement execution.
 * 
 * Returns: List of variables. <Array of TextMacro>
 * @return {!Promise<!Array<!EngineAPI.ITextMacro>>}
 */
EngineAPI.IApp.prototype.getTextMacros = function() {};

/**
 * Gets the handle of a variable.
 * 
 * Note: This method is deprecated (not recommended to use).
 * Use GetVariableById method or GetVariableByName method instead.
 * @param {string} qName
 * @return {!Promise<!EngineAPI.IVariable>}
 */
EngineAPI.IApp.prototype.getVariable = function(qName) {};

/**
 * Gets the handle of a variable.
 * @param {string} qId
 * @return {!Promise<!EngineAPI.IGenericVariable>}
 */
EngineAPI.IApp.prototype.getVariableById = function(qId) {};

/**
 * Gets the handle of a variable.
 * @param {string} qName
 * @return {!Promise<!EngineAPI.IGenericVariable>}
 */
EngineAPI.IApp.prototype.getVariableByName = function(qName) {};

/**
 * Retrieves information about the position of the tables in the data model viewer.
 * 
 * Note: The position of the broom points and the position of the connection points cannot be retrieved in Qlik Sense.
 * @return {!Promise<!EngineAPI.ITableViewDlgSaveInfo>}
 */
EngineAPI.IApp.prototype.getViewDlgSaveInfo = function() {};

/**
 * Guesses the data format for a given file.
 * Recognized file formats are:
 * 
 * - CSV for Delimited
 * - FIX for Fixed Record
 * - DIF for Data Interchange Format
 * - EXCEL_BIFF for Microsoft Excel (XLS)
 * - EXCEL_OOXML for Microsoft Excel (XLSX)
 * - HTMLfor HTML
 * - QVD for QVD file
 * - XML for XML
 * - QVX for QVX file
 * - JSON for JSON format
 * - KML for KML file
 * 
 * @param {string} qConnectionId
 * @param {string} qRelativePath
 * @return {!Promise<!EngineAPI.IFileDataFormat>}
 */
EngineAPI.IApp.prototype.guessFileType = function(qConnectionId, qRelativePath) {};

/**
 * Locks all selections in all fields of the current app.
 * 
 * If this parameter is set, the method locks all selections that are in the specified state name.
 * This parameter is optional.
 * The default value is an empty string.
 * @param {string} qStateName
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.lockAll = function(qStateName) {};

/**
 * Updates a connection.
 * 
 * Note: The identifier of a connection cannot be updated. qType cannot be modified with the ModifyConnection method.
 * Properties that can be updated.
 * >> This parameter is mandatory.
 * This parameter is optional.
 * @param {string} qConnectionId
 * @param {!EngineAPI.IConnection} qConnection
 * @param {boolean} qOverrideCredentials
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.modifyConnection = function(qConnectionId, qConnection, qOverrideCredentials) {};

/**
 * Publishes an app. The published app can have a different name than the original app.
 * All app objects are published. Generic objects, bookmarks, dimensions and measures inside the app are published.
 * 
 * Note: This operation is possible only in Qlik Sense Enterprise.
 * Note: An app can only be published once and cannot be published to more than one stream.
 * This parameter is optional. If this parameter is not set, the engine automatically gives a new name to the published app.
 * @param {string} qStreamId
 * @param {string} qName
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.publish = function(qStreamId, qName) {};

/**
 * Redoes the previous operation.
 * 
 * Note: The operation is successful if qSuccess is set to true.
 * @return {!Promise<boolean>}
 */
EngineAPI.IApp.prototype.redo = function() {};

/**
 * Removes an alternate state in the app.
 * @param {string} qStateName
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.removeAlternateState = function(qStateName) {};

/**
 * Removes a variable.
 * 
 * Note: This method is deprecated (not recommended to use).
 * Use DestroyVariableById method or DestroyVariableByName method instead.
 * >> This parameter is mandatory.
 * @param {string} qName
 * @return {!Promise<boolean>}
 */
EngineAPI.IApp.prototype.removeVariable = function(qName) {};

/**
 * Resumes the app as the user left it.
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.resume = function() {};

/**
 * Saves all objects that were modified in the app.
 * 
 * Note: Data from the data model are not saved.
 * Note: This operation is possible only in Qlik Sense Enterprise.
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.saveObjects = function() {};

/**
 * Returns the search matches for one or more search terms.
 * The search results depend on the search context.
 * 
 * See: SearchCombinationOptions
 * 
 * Note: This method is deprecated (not recommended to use). Use SearchResults method instead.
 * >> This parameter is mandatory.
 * @param {!EngineAPI.ISearchCombinationOptions} qOptions
 * @param {!Array<string>} qTerms
 * @param {!EngineAPI.ISearchPage} qPage
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.searchAssociations = function(qOptions, qTerms, qPage) {};

/**
 * Returns the generic objects corresponding to one or more search terms. The search is performed within the title,
 * subtitle, footnote and type. In addition, associated dimension values are also searched in. For example,
 * if the country �Japan� is selected and the object contains the dimension City, the object will appear in the
 * results for �Osaka� but not for �Johannesburg�. The generic objects with the following types will never appear
 * in the results: slideitem, sheet, story, slide, masterobject, snapshot, LoadModel, appprops and searchhistory.
 * >> This parameter is mandatory.
 * @param {!EngineAPI.ISearchObjectOptions} qOptions
 * @param {!Array<string>} qTerms
 * @param {!EngineAPI.ISearchPage} qPage
 * @return {!Promise<!EngineAPI.ISearchResult>}
 */
EngineAPI.IApp.prototype.searchObjects = function(qOptions, qTerms, qPage) {};

/**
 * Returns the search matches for one or more search terms.
 * Search results are organized in search groups. The type of search group indicates
 * where the search matches come from (from data for example).
 * Each search group contains search results that correspond to a combination of search terms.
 * For example, if the search terms are organic, pasta , and America, the possible combination of search groups are:
 * 
 * - organic
 * - pasta
 * - America
 * - organic, pasta, America
 * - organic, pasta
 * - organic, America
 * - pasta, America
 * 
 * For every search group, there are one or more search group items.
 * Each subgroup item contains results that correspond to an item type (for example a field).
 * For every search group item, there are one or several search matches. The position of the match in each search result is given.
 * >> This parameter is mandatory.
 * @param {!EngineAPI.ISearchCombinationOptions} qOptions
 * @param {!Array<string>} qTerms
 * @param {!EngineAPI.ISearchPage} qPage
 * @return {!Promise<!EngineAPI.ISearchResult>}
 */
EngineAPI.IApp.prototype.searchResults = function(qOptions, qTerms, qPage) {};

/**
 * For every search group item, there are one or several search matches. The position of the match in each search result is given.
 * @param {!EngineAPI.ISearchCombinationOptions} qOptions
 * @param {!Array<string>} qTerms
 * @return {!Promise<!EngineAPI.ISearchSuggestionResult>}
 */
EngineAPI.IApp.prototype.searchSuggest = function(qOptions, qTerms) {};

/**
 * Selects all search hits for a specified group.
 * The results depend on the search context.
 * See: SearchCombinationOptions
 * @param {!EngineAPI.ISearchCombinationOptions} qOptions
 * @param {!Array<string>} qTerms
 * @param {number} qMatchIx
 * @param {boolean} qSoftLock
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.selectAssociations = function(qOptions, qTerms, qMatchIx, qSoftLock) {};

/**
 * Sends a generic command to a custom connector.
 * For more information on the commands that can be sent to a custom connector, see the QVX SDK help.
 *                               - JsonRequest
 *                               - GetCustomCaption
 *                               - IsConnected
 *                               - DisableQlikViewSelectButton
 *                               - HaveStarField
 * @param {string} qProvider
 * @param {string} qCommand
 * @param {string} qMethod
 * @param {!Array<string>} qParameters
 * @param {!Array<string>} qAppendConnection
 * @return {!Promise<string>}
 */
EngineAPI.IApp.prototype.sendGenericCommandToCustomConnector = function(qProvider, qCommand, qMethod, qParameters, qAppendConnection) {};

/**
 * Sets properties to an app.
 * @param {!EngineAPI.INxAppProperties} qProp
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.setAppProperties = function(qProp) {};

/**
 * Set some variables as favorite.
 * @param {!Array<string>} qNames
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.setFavoriteVariables = function(qNames) {};

/**
 * Limits the number of rows of data to load from a data source.
 * This method works when reloading in debug mode.
 * @param {number} qLimit
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.setFetchLimit = function(qLimit) {};

/**
 * Sets a vector of loosely coupled state flags, one element for each table in the app.
 * 
 * Note: The last three values in the vector are extra values. These values are for internal use.
 * 
 * Note: The engine returns true if the vector has been updated.
 * Set the flag to 1 to loose a table.
 * Set the flag to 0 to not loose a table.
 * 
 * @param {!Array<number>} qv
 * @return {!Promise<boolean>}
 */
EngineAPI.IApp.prototype.setLooselyCoupledVector = function(qv) {};

/**
 * Set some breakpoints in the script of an app.
 * 
 * @param {!Array<!EngineAPI.IEditorBreakpoint>} qBreakpoints
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.setScriptBreakpoints = function(qBreakpoints) {};

/**
 * Sets values in script.
 * 
 * @param {string} qScript
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.setScript = function(qScript) {};

/**
 * Sets the positions of the tables in the data model viewer.
 * 
 * Note: The position of the broom points and the position of the connection points cannot be set in Qlik Sense.
 * @param {!EngineAPI.ITableViewDlgSaveInfo} qInfo
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.setViewDlgSaveInfo = function(qInfo) {};

/**
 * Undoes the previous operation.
 * 
 * Note: The operation is successful if qSuccess is set to true.
 * @return {!Promise<boolean>}
 */
EngineAPI.IApp.prototype.undo = function() {};

/**
 * Unlocks all selections in all fields of the current app.
 * 
 * If this parameter is set, the method unlocks all selections that are in the specified state name.
 * This parameter is optional.
 * The default value is an empty string.
 * @param {string} qStateName
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.unlockAll = function(qStateName) {};
/**
 * @record
 * @struct
 */
EngineAPI.INxFieldProperties = function() {};
 /** @type {boolean} */
EngineAPI.INxFieldProperties.prototype.qOneAndOnlyOne;
/**
 * @record
 * @struct
 */
EngineAPI.IField = function() {};

/**
 * Maintains the selections in the current field while clearing the selections in the other fields.
 * The default value is false.
 * This parameter is optional.
 * @param {boolean=} qSoftLock
 * @return {!Promise<boolean>}
 */
EngineAPI.IField.prototype.clearAllButThis = function(qSoftLock) {};

/**
 * Clears the selections in a specific field.
 * 
 * Note: The operation is successful if qReturn is set to true.
 * @return {!Promise<boolean>}
 */
EngineAPI.IField.prototype.clear = function() {};

/**
 * Returns the AND mode status of a field.
 * 
 * Note: The field is in AND mode if qReturn is set to true.
 * @return {!Promise<boolean>}
 */
EngineAPI.IField.prototype.getAndMode = function() {};

/**
 * Retrieves the number of distinct values in a field.
 * 
 * Note: The field is in AND mode if qReturn is set to true.
 * @return {!Promise<number>}
 */
EngineAPI.IField.prototype.getCardinal = function() {};

/**
 * Gets the properties of a field.
 * @return {!Promise<!EngineAPI.INxFieldProperties>}
 */
EngineAPI.IField.prototype.getNxProperties = function() {};

/**
 * Locks all selected values of a specific field.
 * 
 * Note: The operation is successful if Return is set to true.
 * @return {!Promise<boolean>}
 */
EngineAPI.IField.prototype.lock = function() {};

/**
 * Selects some values in a field, by entering the element numbers related to the values to select.
 * 
 * Note: The operation is successful if qReturn is set to true.
 * If this parameter is set to false, selections made before accepting the list object search become alternative.
 * >> This parameter is mandatory.
 * The default value is false.
 * This parameter is optional.
 * @param {!Array<number>} qValues
 * @param {boolean} qToggleMode
 * @param {boolean=} qSoftLock
 * @return {!Promise<boolean>}
 */
EngineAPI.IField.prototype.lowLevelSelect = function(qValues, qToggleMode, qSoftLock) {};

/**
 * Selects all values of a field. Excluded values are also selected.
 * 
 * Note: The operation is successful if qReturn is set to true.
 * The default value is false.
 * This parameter is optional.
 * @param {boolean=} qSoftLock
 * @return {!Promise<boolean>}
 */
EngineAPI.IField.prototype.selectAll = function(qSoftLock) {};

/**
 * Selects all alternatives values in a specific field.
 * 
 * Note: In a field that contains at least one selected value, the values that are neither selected nor excluded are alternatives values.
 * The default value is false.
 * This parameter is optional.
 * @param {boolean=} qSoftLock
 * @return {!Promise<boolean>}
 */
EngineAPI.IField.prototype.selectAlternative = function(qSoftLock) {};

/**
 * Inverts the current selections.
 * 
 * Note: In a field that contains at least one selected value, the values that are neither selected nor excluded are alternatives values.
 * The default value is false.
 * This parameter is optional.
 * @param {boolean=} qSoftLock
 * @return {!Promise<boolean>}
 */
EngineAPI.IField.prototype.selectExcluded = function(qSoftLock) {};

/**
 * Selects field values matching a search string.
 * 
 * Note: In a field that contains at least one selected value,
 * the values that are neither selected nor excluded are alternatives values.
 * The default value is false.
 * This parameter is optional.
 * @param {string} qMatch
 * @param {boolean=} qSoftLock
 * @param {number=} qExcludedValuesMode
 * @return {!Promise<boolean>}
 */
EngineAPI.IField.prototype.select = function(qMatch, qSoftLock, qExcludedValuesMode) {};

/**
 * Selects all possible values in a specific field.
 * 
 * Note: The operation is successful if qReturn is set to true.
 * The default value is false.
 * This parameter is optional.
 * @param {boolean=} qSoftLock
 * @return {!Promise<boolean>}
 */
EngineAPI.IField.prototype.selectPossible = function(qSoftLock) {};

/**
 * Selects some values in a field, by entering the values to select.
 * 
 * Note: The operation is successful if qReturn is set to true.
 * The default value is false.
 * This parameter is optional.
 * @param {!Array<!EngineAPI.IFieldValue>} qFieldValues
 * @param {boolean=} qToggleMode
 * @param {boolean=} qSoftLock
 * @return {!Promise<boolean>}
 */
EngineAPI.IField.prototype.selectValues = function(qFieldValues, qToggleMode, qSoftLock) {};

/**
 * Sets a field in the AND mode.
 * 
 * Note: The operation is successful if Return is set to true.
 * Set this parameter to true to enter the AND mode.
 * >> This parameter is mandatory.
 * @param {boolean} qAndMode
 * @return {!Promise<void>}
 */
EngineAPI.IField.prototype.setAndMode = function(qAndMode) {};

/**
 * Sets some properties to a field.
 * 
 * In addition to the properties described below, dynamic properties can be added.
 * @param {!EngineAPI.INxFieldProperties} qProperties
 * @return {!Promise<void>}
 */
EngineAPI.IField.prototype.setNxProperties = function(qProperties) {};

/**
 * Toggle selects field values matching a search string.
 * 
 * In addition to the properties described below, dynamic properties can be added.
 * The default value is false.
 * This parameter is optional.
 * This parameter is optional.
 * @param {string} qMatch
 * @param {boolean=} qSoftLock
 * @param {number=} qExcludedValuesMode
 * @return {!Promise<boolean>}
 */
EngineAPI.IField.prototype.toggleSelect = function(qMatch, qSoftLock, qExcludedValuesMode) {};

/**
 * Unlocks all selected values of a specific field if the target (or handle ) is a field.
 * @return {!Promise<boolean>}
 */
EngineAPI.IField.prototype.unlock = function() {};
/**
 * @record
 * @struct
 */
EngineAPI.INxPatch = function() {};
 /** @type {string} */
EngineAPI.INxPatch.prototype.qOp;
 /** @type {string} */
EngineAPI.INxPatch.prototype.qPath;
 /** @type {string} */
EngineAPI.INxPatch.prototype.qValue;
/**
 * @record
 * @struct
 */
EngineAPI.IAlternateStateData = function() {};
 /** @type {string} */
EngineAPI.IAlternateStateData.prototype.qStateName;
 /** @type {!Array<!EngineAPI.IBookmarkFieldItem>} */
EngineAPI.IAlternateStateData.prototype.qFieldItems;
/**
 * @record
 * @struct
 */
EngineAPI.IBookmarkVariableItem = function() {};
 /** @type {string} */
EngineAPI.IBookmarkVariableItem.prototype.qName;
 /** @type {!EngineAPI.IFieldValue} */
EngineAPI.IBookmarkVariableItem.prototype.qValue;
/**
 * @record
 * @struct
 */
EngineAPI.IBookmarkFieldItem = function() {};
 /** @type {!EngineAPI.IFieldDefEx} */
EngineAPI.IBookmarkFieldItem.prototype.qDef;
 /** @type {boolean} */
EngineAPI.IBookmarkFieldItem.prototype.qLocked;
 /** @type {!EngineAPI.ISelectInfo} */
EngineAPI.IBookmarkFieldItem.prototype.qSelectInfo;
 /** @type {!Array<!EngineAPI.IFieldValue>} */
EngineAPI.IBookmarkFieldItem.prototype.qValues;
 /** @type {!Array<!EngineAPI.IFieldValue>} */
EngineAPI.IBookmarkFieldItem.prototype.qExcludedValues;
 /** @type {boolean} */
EngineAPI.IBookmarkFieldItem.prototype.qAndMode;
 /** @type {boolean} */
EngineAPI.IBookmarkFieldItem.prototype.qOneAndOnlyOne;
/**
 * @record
 * @struct
 */
EngineAPI.IFieldDefEx = function() {};
 /** @type {string} */
EngineAPI.IFieldDefEx.prototype.qName;
 /** @type {string} */
EngineAPI.IFieldDefEx.prototype.qType;
/**
 * @record
 * @struct
 */
EngineAPI.ISelectInfo = function() {};
 /** @type {string} */
EngineAPI.ISelectInfo.prototype.qTextSearch;
 /** @type {number} */
EngineAPI.ISelectInfo.prototype.qRangeLo;
 /** @type {number} */
EngineAPI.ISelectInfo.prototype.qRangeHi;
 /** @type {!EngineAPI.IFieldAttributes} */
EngineAPI.ISelectInfo.prototype.qNumberFormat;
 /** @type {!Array<!EngineAPI.INxRangeSelectInfo>} */
EngineAPI.ISelectInfo.prototype.qRangeInfo;
 /** @type {!Array<!EngineAPI.IRange>} */
EngineAPI.ISelectInfo.prototype.qContinuousRangeInfo;
/**
 * @record
 * @struct
 */
EngineAPI.INxBookmark = function() {};
 /** @type {!Array<!EngineAPI.IAlternateStateData>} */
EngineAPI.INxBookmark.prototype.qStateData;
 /** @type {number} */
EngineAPI.INxBookmark.prototype.qUtcModifyTime;
 /** @type {!Array<!EngineAPI.IBookmarkVariableItem>} */
EngineAPI.INxBookmark.prototype.qVariableItems;
/**
 * @record
 * @struct
 */
EngineAPI.IGenericBaseLayout = function() {};
 /** @type {!EngineAPI.INxInfo} */
EngineAPI.IGenericBaseLayout.prototype.qInfo;
 /** @type {!EngineAPI.INxMeta} */
EngineAPI.IGenericBaseLayout.prototype.qMeta;
/**
 * @extends {EngineAPI.IGenericBaseLayout}
 * @record
 * @struct
 */
EngineAPI.IGenericBookmarkLayout = function() {};
 /** @type {!EngineAPI.INxMetaTitleDescription} */
EngineAPI.IGenericBookmarkLayout.prototype.qMeta;
 /** @type {!EngineAPI.INxBookmark} */
EngineAPI.IGenericBookmarkLayout.prototype.qBookmark;
/**
 * @record
 * @struct
 */
EngineAPI.IGenericBookmark = function() {};

/**
 * Applies a bookmark.
 * @return {!Promise<boolean>}
 */
EngineAPI.IGenericBookmark.prototype.apply = function() {};

/**
 * Applies a patch to the properties of an object. Allows an update to some of the properties.
 * 
 * Note: Applying a patch takes less time than resetting all the properties.
 * @param {!Array<!EngineAPI.INxPatch>} qPatches
 * @return {!Promise<void>}
 */
EngineAPI.IGenericBookmark.prototype.applyPatches = function(qPatches) {};

/**
 * Returns:
 * 
 * - the type of the object
 * - the identifier of the object
 * 
 * Note: Applying a patch takes less time than resetting all the properties.
 * @return {!Promise<!EngineAPI.INxInfo>}
 */
EngineAPI.IGenericBookmark.prototype.getInfo = function() {};

/**
 * Evaluates an object and displays its properties including the dynamic properties.
 * If the member delta is set to true in the request object, only the delta is evaluated..
 * @return {!Promise<!EngineAPI.IGenericBookmarkLayout>}
 */
EngineAPI.IGenericBookmark.prototype.getLayout = function() {};

/**
 * Shows the properties of an object.
 * If the member delta is set to true in the request object, only the delta is retrieved.
 * @return {!Promise<!EngineAPI.IGenericBookmarkProperties>}
 */
EngineAPI.IGenericBookmark.prototype.getProperties = function() {};

/**
 * Publishes a bookmark.
 * @return {!Promise<void>}
 */
EngineAPI.IGenericBookmark.prototype.publish = function() {};

/**
 * Sets some properties for a bookmark.
 * 
 * Note: Applying a patch takes less time than resetting all the properties.
 * >> This parameter is mandatory.
 * @param {!EngineAPI.IGenericBookmarkProperties} qProp
 * @return {!Promise<void>}
 */
EngineAPI.IGenericBookmark.prototype.setProperties = function(qProp) {};

/**
 * Unpublishes a bookmark.
 * @return {!Promise<void>}
 */
EngineAPI.IGenericBookmark.prototype.unPublish = function() {};
/**
 * @record
 * @struct
 */
EngineAPI.IGenericBookmarkEntry = function() {};
 /** @type {!EngineAPI.IGenericBookmarkProperties} */
EngineAPI.IGenericBookmarkEntry.prototype.qProperties;
 /** @type {!EngineAPI.INxBookmark} */
EngineAPI.IGenericBookmarkEntry.prototype.qBookmark;
/**
 * @record
 * @struct
 */
EngineAPI.IGenericDimensionInfo = function() {};
 /** @type {number} */
EngineAPI.IGenericDimensionInfo.prototype.qApprMaxGlyphCount;
 /** @type {number} */
EngineAPI.IGenericDimensionInfo.prototype.qCardinal;
 /** @type {!Array<string>} */
EngineAPI.IGenericDimensionInfo.prototype.qTags;
 /** @type {boolean} */
EngineAPI.IGenericDimensionInfo.prototype.qIsSemantic;
 /** @type {boolean} */
EngineAPI.IGenericDimensionInfo.prototype.qAndMode;
/**
 * @extends {EngineAPI.IGenericBaseLayout}
 * @record
 * @struct
 */
EngineAPI.IGenericDimensionLayout = function() {};
 /** @type {!EngineAPI.INxInfo} */
EngineAPI.IGenericDimensionLayout.prototype.qInfo;
 /** @type {!EngineAPI.INxMeta} */
EngineAPI.IGenericDimensionLayout.prototype.qMeta;
 /** @type {!EngineAPI.INxLibraryMeasureDef} */
EngineAPI.IGenericDimensionLayout.prototype.qDim;
 /** @type {!Array<!EngineAPI.IGenericDimensionInfo>} */
EngineAPI.IGenericDimensionLayout.prototype.qDimInfos;
/**
 * @record
 * @struct
 */
EngineAPI.INxLinkedObjectInfo = function() {};
 /** @type {string} */
EngineAPI.INxLinkedObjectInfo.prototype.qRootId;
 /** @type {!EngineAPI.INxInfo} */
EngineAPI.INxLinkedObjectInfo.prototype.qInfo;
/**
 * @record
 * @struct
 */
EngineAPI.IGenericDimension = function() {};

/**
 * Applies a patch to the properties of an object. Allows an update to some of the properties.
 * 
 * Note: Applying a patch takes less time than resetting all the properties.
 * @param {!Array<!EngineAPI.INxPatch>} qPatches
 * @return {!Promise<void>}
 */
EngineAPI.IGenericDimension.prototype.applyPatches = function(qPatches) {};

/**
 * Returns the definition of a dimension.
 * 
 * @return {!Promise<!EngineAPI.IGenericDimension>}
 */
EngineAPI.IGenericDimension.prototype.getDimension = function() {};

/**
 * Returns the type and identifier of the object.
 * @return {!Promise<!EngineAPI.INxInfo>}
 */
EngineAPI.IGenericDimension.prototype.getInfo = function() {};

/**
 * Evaluates a dimension and displays its properties, including the dynamic properties.
 * 
 * @return {!Promise<!EngineAPI.IGenericDimensionLayout>}
 */
EngineAPI.IGenericDimension.prototype.getLayout = function() {};

/**
 * Return a lists the linked objects to a generic object, a dimension or a measure.
 * @return {!Promise<!Array<!EngineAPI.INxLinkedObjectInfo>>}
 */
EngineAPI.IGenericDimension.prototype.getLinkedObjects = function() {};

/**
 * Shows the properties of an object.
 * Returns the identifier and the definition of the dimension.
 * 
 * Note: If the member delta is set to true in the request object, only the delta is retrieved.
 * @return {!Promise<!EngineAPI.IGenericDimensionProperties>}
 */
EngineAPI.IGenericDimension.prototype.getProperties = function() {};

/**
 * Publishes a dimension.
 * @return {!Promise<void>}
 */
EngineAPI.IGenericDimension.prototype.publish = function() {};

/**
 * Sets some properties for a dimension.
 * @return {!Promise<!EngineAPI.IGenericDimensionProperties>}
 */
EngineAPI.IGenericDimension.prototype.setProperties = function() {};

/**
 * Unpublishes a dimension.
 * @return {!Promise<void>}
 */
EngineAPI.IGenericDimension.prototype.unPublish = function() {};
/**
 * @record
 * @struct
 */
EngineAPI.IGenericObjectEntry = function() {};
 /** @type {!EngineAPI.IGenericObjectProperties} */
EngineAPI.IGenericObjectEntry.prototype.qProperty;
 /** @type {!Array<!EngineAPI.IGenericObjectEntry>} */
EngineAPI.IGenericObjectEntry.prototype.qChildren;
 /** @type {!EngineAPI.IGenericBookmarkEntry} */
EngineAPI.IGenericObjectEntry.prototype.qEmbeddedSnapshotRef;
/**
 * @record
 * @struct
 */
EngineAPI.INxPage = function() {};
 /** @type {number} */
EngineAPI.INxPage.prototype.qLeft;
 /** @type {number} */
EngineAPI.INxPage.prototype.qTop;
 /** @type {number} */
EngineAPI.INxPage.prototype.qWidth;
 /** @type {number} */
EngineAPI.INxPage.prototype.qHeight;
/**
 * @record
 * @struct
 */
EngineAPI.INxViewPort = function() {};
 /** @type {number} */
EngineAPI.INxViewPort.prototype.qWidth;
 /** @type {number} */
EngineAPI.INxViewPort.prototype.qHeight;
 /** @type {number} */
EngineAPI.INxViewPort.prototype.qZoomLevel;
/**
 * @record
 * @struct
 */
EngineAPI.INxDataAreaPage = function() {};
 /** @type {number} */
EngineAPI.INxDataAreaPage.prototype.qLeft;
 /** @type {number} */
EngineAPI.INxDataAreaPage.prototype.qTop;
 /** @type {number} */
EngineAPI.INxDataAreaPage.prototype.qWidth;
 /** @type {number} */
EngineAPI.INxDataAreaPage.prototype.qHeight;
/**
 * @record
 * @struct
 */
EngineAPI.INxHighlightRanges = function() {};
 /** @type {!Array<!EngineAPI.ICharRange>} */
EngineAPI.INxHighlightRanges.prototype.qRanges;
/**
 * @record
 * @struct
 */
EngineAPI.ICharRange = function() {};
 /** @type {number} */
EngineAPI.ICharRange.prototype.qCharPos;
 /** @type {number} */
EngineAPI.ICharRange.prototype.qCharCount;
/**
 * @record
 * @struct
 */
EngineAPI.INxAttributeExpressionValues = function() {};
 /** @type {!Array<!EngineAPI.INxSimpleValue>} */
EngineAPI.INxAttributeExpressionValues.prototype.qValues;
/**
 * @record
 * @struct
 */
EngineAPI.INxSimpleValue = function() {};
 /** @type {string} */
EngineAPI.INxSimpleValue.prototype.qText;
 /** @type {number} */
EngineAPI.INxSimpleValue.prototype.qNum;
/**
 * @record
 * @struct
 */
EngineAPI.INxCell = function() {};
 /** @type {string} */
EngineAPI.INxCell.prototype.qText;
 /** @type {number} */
EngineAPI.INxCell.prototype.qNum;
 /** @type {number} */
EngineAPI.INxCell.prototype.qElemNumber;
 /** @type {string} */
EngineAPI.INxCell.prototype.qState;
 /** @type {boolean} */
EngineAPI.INxCell.prototype.qIsEmpty;
 /** @type {boolean} */
EngineAPI.INxCell.prototype.qIsTotalCell;
 /** @type {boolean} */
EngineAPI.INxCell.prototype.qIsOtherCell;
 /** @type {string} */
EngineAPI.INxCell.prototype.qFrequency;
 /** @type {!EngineAPI.INxHighlightRanges} */
EngineAPI.INxCell.prototype.qHighlightRanges;
 /** @type {!EngineAPI.INxAttributeExpressionValues} */
EngineAPI.INxCell.prototype.qAttrExps;
 /** @type {boolean} */
EngineAPI.INxCell.prototype.qIsNull;
 /** @type {!EngineAPI.INxAttributeExpressionValues} */
EngineAPI.INxCell.prototype.qAttrDims;
/**
 * @record
 * @struct
 */
EngineAPI.INxCellRows = function() {};
 /** @type {!Array<!EngineAPI.INxCell>} */
EngineAPI.INxCellRows.prototype.NxCellRows;
/**
 * @record
 * @struct
 */
EngineAPI.INxDataPage = function() {};
 /** @type {!Array<!EngineAPI.INxCellRows>} */
EngineAPI.INxDataPage.prototype.qMatrix;
 /** @type {!Array<!EngineAPI.INxGroupTail>} */
EngineAPI.INxDataPage.prototype.qTails;
 /** @type {!EngineAPI.IRect} */
EngineAPI.INxDataPage.prototype.qArea;
 /** @type {boolean} */
EngineAPI.INxDataPage.prototype.qIsReduced;
/**
 * @record
 * @struct
 */
EngineAPI.INxGroupTail = function() {};
 /** @type {number} */
EngineAPI.INxGroupTail.prototype.qUp;
 /** @type {number} */
EngineAPI.INxGroupTail.prototype.qDown;
/**
 * @record
 * @struct
 */
EngineAPI.IContinuousDataOptions = function() {};
 /** @type {number} */
EngineAPI.IContinuousDataOptions.prototype.qStart;
 /** @type {number} */
EngineAPI.IContinuousDataOptions.prototype.qEnd;
 /** @type {number} */
EngineAPI.IContinuousDataOptions.prototype.qNbrPoints;
 /** @type {number} */
EngineAPI.IContinuousDataOptions.prototype.qMaxNbrTicks;
/**
 * @record
 * @struct
 */
EngineAPI.INxAxisTicks = function() {};
 /** @type {string} */
EngineAPI.INxAxisTicks.prototype.qName;
 /** @type {!Array<!EngineAPI.INxTickCell>} */
EngineAPI.INxAxisTicks.prototype.qTicks;
 /** @type {!Array<string>} */
EngineAPI.INxAxisTicks.prototype.qTags;
/**
 * @record
 * @struct
 */
EngineAPI.INxTickCell = function() {};
 /** @type {string} */
EngineAPI.INxTickCell.prototype.qText;
 /** @type {number} */
EngineAPI.INxTickCell.prototype.qStart;
 /** @type {number} */
EngineAPI.INxTickCell.prototype.qEnd;
/**
 * @record
 * @struct
 */
EngineAPI.INxAxisData = function() {};
 /** @type {!Array<!EngineAPI.INxAxisTicks>} */
EngineAPI.INxAxisData.prototype.qAxis;
/**
 * @record
 * @struct
 */
EngineAPI.INxAttributeDimValues = function() {};
 /** @type {!Array<!EngineAPI.INxSimpleDimValue>} */
EngineAPI.INxAttributeDimValues.prototype.qValues;
/**
 * @record
 * @struct
 */
EngineAPI.INxSimpleDimValue = function() {};
 /** @type {string} */
EngineAPI.INxSimpleDimValue.prototype.qText;
 /** @type {number} */
EngineAPI.INxSimpleDimValue.prototype.qElemNo;
/**
 * @record
 * @struct
 */
EngineAPI.INxPivotDimensionCell = function() {};
 /** @type {string} */
EngineAPI.INxPivotDimensionCell.prototype.qText;
 /** @type {number} */
EngineAPI.INxPivotDimensionCell.prototype.qElemNo;
 /** @type {number} */
EngineAPI.INxPivotDimensionCell.prototype.qValue;
 /** @type {boolean} */
EngineAPI.INxPivotDimensionCell.prototype.qCanExpand;
 /** @type {boolean} */
EngineAPI.INxPivotDimensionCell.prototype.qCanCollapse;
 /** @type {string} */
EngineAPI.INxPivotDimensionCell.prototype.qType;
 /** @type {number} */
EngineAPI.INxPivotDimensionCell.prototype.qUp;
 /** @type {number} */
EngineAPI.INxPivotDimensionCell.prototype.qDown;
 /** @type {!Array<!EngineAPI.INxPivotDimensionCell>} */
EngineAPI.INxPivotDimensionCell.prototype.qSubNodes;
 /** @type {!Array<!EngineAPI.INxAttributeExpressionValues>} */
EngineAPI.INxPivotDimensionCell.prototype.qAttrExps;
 /** @type {!Array<!EngineAPI.INxAttributeDimValues>} */
EngineAPI.INxPivotDimensionCell.prototype.qAttrDims;
/**
 * @record
 * @struct
 */
EngineAPI.INxPivotPage = function() {};
 /** @type {!Array<!EngineAPI.INxPivotDimensionCell>} */
EngineAPI.INxPivotPage.prototype.qLeft;
 /** @type {!Array<!EngineAPI.INxPivotDimensionCell>} */
EngineAPI.INxPivotPage.prototype.qTop;
 /** @type {!Array<!EngineAPI.INxPivotValuePoint>} */
EngineAPI.INxPivotPage.prototype.qData;
 /** @type {!EngineAPI.IRect} */
EngineAPI.INxPivotPage.prototype.qArea;
/**
 * @record
 * @struct
 */
EngineAPI.INxStackedPivotCell = function() {};
 /** @type {string} */
EngineAPI.INxStackedPivotCell.prototype.qText;
 /** @type {number} */
EngineAPI.INxStackedPivotCell.prototype.qElemNo;
 /** @type {number} */
EngineAPI.INxStackedPivotCell.prototype.qValue;
 /** @type {boolean} */
EngineAPI.INxStackedPivotCell.prototype.qCanExpand;
 /** @type {boolean} */
EngineAPI.INxStackedPivotCell.prototype.qCanCollapse;
 /** @type {string} */
EngineAPI.INxStackedPivotCell.prototype.qType;
 /** @type {number} */
EngineAPI.INxStackedPivotCell.prototype.qMaxPos;
 /** @type {number} */
EngineAPI.INxStackedPivotCell.prototype.qMinNeg;
 /** @type {number} */
EngineAPI.INxStackedPivotCell.prototype.qUp;
 /** @type {number} */
EngineAPI.INxStackedPivotCell.prototype.qDown;
 /** @type {number} */
EngineAPI.INxStackedPivotCell.prototype.qRow;
 /** @type {!Array<!EngineAPI.INxStackedPivotCell>} */
EngineAPI.INxStackedPivotCell.prototype.qSubNodes;
 /** @type {!EngineAPI.INxAttributeExpressionValues} */
EngineAPI.INxStackedPivotCell.prototype.qAttrExps;
 /** @type {!EngineAPI.INxAttributeDimValues} */
EngineAPI.INxStackedPivotCell.prototype.qAttrDims;
/**
 * @record
 * @struct
 */
EngineAPI.INxStackPage = function() {};
 /** @type {!Array<!EngineAPI.INxStackedPivotCell>} */
EngineAPI.INxStackPage.prototype.qData;
 /** @type {!EngineAPI.IRect} */
EngineAPI.INxStackPage.prototype.qArea;
/**
 * @extends {EngineAPI.IGenericBaseLayout}
 * @record
 * @struct
 */
EngineAPI.IGenericObjectLayout = function() {};
 /** @type {!EngineAPI.INxInfo} */
EngineAPI.IGenericObjectLayout.prototype.qInfo;
 /** @type {!EngineAPI.INxMeta} */
EngineAPI.IGenericObjectLayout.prototype.qMeta;
 /** @type {string} */
EngineAPI.IGenericObjectLayout.prototype.qExtendsId;
 /** @type {boolean} */
EngineAPI.IGenericObjectLayout.prototype.qHasSoftPatches;
 /** @type {!EngineAPI.INxLayoutErrors} */
EngineAPI.IGenericObjectLayout.prototype.qError;
 /** @type {!EngineAPI.INxSelectionInfo} */
EngineAPI.IGenericObjectLayout.prototype.qSelectionInfo;
/**
 * @record
 * @struct
 */
EngineAPI.INxLayoutErrors = function() {};
 /** @type {number} */
EngineAPI.INxLayoutErrors.prototype.ErrorCode;
/**
 * @record
 * @struct
 */
EngineAPI.INxSelectionInfo = function() {};
 /** @type {boolean} */
EngineAPI.INxSelectionInfo.prototype.qInSelections;
 /** @type {boolean} */
EngineAPI.INxSelectionInfo.prototype.qMadeSelections;
/**
 * @record
 * @struct
 */
EngineAPI.IRangeSelectInfo = function() {};
 /** @type {!EngineAPI.IRange} */
EngineAPI.IRangeSelectInfo.prototype.qRange;
/**
 * @extends {EngineAPI.IRangeSelectInfo}
 * @record
 * @struct
 */
EngineAPI.INxMultiRangeSelectInfo = function() {};
 /** @type {number} */
EngineAPI.INxMultiRangeSelectInfo.prototype.qColumnsToSelect;
/**
 * @extends {EngineAPI.IRangeSelectInfo}
 * @record
 * @struct
 */
EngineAPI.INxRangeSelectInfo = function() {};
 /** @type {number} */
EngineAPI.INxRangeSelectInfo.prototype.qMeasureIx;
/**
 * @extends {EngineAPI.IRangeSelectInfo}
 * @record
 * @struct
 */
EngineAPI.INxContinuousRangeSelectInfo = function() {};
 /** @type {number} */
EngineAPI.INxContinuousRangeSelectInfo.prototype.qDimIx;
/**
 * @record
 * @struct
 */
EngineAPI.IRange = function() {};
 /** @type {number} */
EngineAPI.IRange.prototype.qMin;
 /** @type {number} */
EngineAPI.IRange.prototype.qMax;
 /** @type {boolean} */
EngineAPI.IRange.prototype.qMinInclEq;
 /** @type {boolean} */
EngineAPI.IRange.prototype.qMaxInclEq;
/**
 * @record
 * @struct
 */
EngineAPI.INxSelectionCell = function() {};
 /** @type {string} */
EngineAPI.INxSelectionCell.prototype.qType;
 /** @type {number} */
EngineAPI.INxSelectionCell.prototype.qCol;
 /** @type {number} */
EngineAPI.INxSelectionCell.prototype.qRow;
/**
 * @record
 * @struct
 */
EngineAPI.IImplementOn = function() {};
 /** @type {string} */
EngineAPI.IImplementOn.prototype.id;

/**
 * register a function for events
 * @param {string} event
 * @param {function(): void} func
 * @return {void}
 */
EngineAPI.IImplementOn.prototype.on = function(event, func) {};

/**
 * manual emit an events
 * @param {string} event
 * @return {void}
 */
EngineAPI.IImplementOn.prototype.emit = function(event) {};
/**
 * @extends {EngineAPI.IImplementOn}
 * @record
 * @struct
 */
EngineAPI.IGenericObject = function() {};
 /** @type {!EngineAPI.IApp} */
EngineAPI.IGenericObject.prototype.app;

/**
 * Aborts the results of a search in a list object.
 * Note: This method applies to list objects (objects with one dimension).
 * Note: After an abort on a list object search, the GetLayout method does not
 *       return any more search results but it does return the values in the field.
 * For example, /qListObjectDef.
 * @param {string} qPath
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.abortListObjectSearch = function(qPath) {};

/**
 * Accept the results of a search in a list object. The search results become selected in the field.
 * 
 * Note: This method applies to list objects (objects with one dimension).
 * Note: The search results are displayed using the GetLayout method.
 * For example, /qListObjectDef.
 * If this parameter is set to false, selections made before accepting the list object search become alternative.
 * >> This parameter is mandatory.
 * The default value is false.
 * This parameter is optional.
 * @param {string} qPath
 * @param {boolean} qToggleMode
 * @param {boolean=} qSoftLock
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.acceptListObjectSearch = function(qPath, qToggleMode, qSoftLock) {};

/**
 * Applies a patch to the properties of an object. Allows an update to some of the properties.
 * It is possible to apply a patch to the properties of a generic object, that is not persistent.
 * Such a patch is called a soft patch.
 * In that case, the result of the operation on the properties (add, remove or delete) is not shown
 * when doing GetProperties and only a GetLayout call shows the result of the operation.
 * Properties that are not persistent are called soft properties. Once the engine session is over,
 * soft properties are cleared.
 * 
 * Note: Soft properties apply only to generic objects.
 * Check: Applying a patch takes less time than resetting all the properties.
 * The patch is a soft patch.
 * This parameter is optional.
 * Default is false.
 * @param {!Array<!EngineAPI.INxPatch>} qPatches
 * @param {boolean=} qSoftPatch
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.applyPatches = function(qPatches, qSoftPatch) {};

/**
 * Begins the selection mode. The app enters the modal state. The specified object enters the selection mode and
 * a modal window is opened. The selection mode can apply to only one object in an app at a time.
 * When a visualization is in selection mode, selections can be made in this visualization. The visualization is not
 * sorted until the selection mode is ended. Once the selection mode is ended and if the selections are accepted,
 * the visualization is sorted according to the sort criteria.
 * 
 * For more information about:
 * 
 *     - Ending the selection mode, see EndSelections method.
 *     - The sort criteria, see ListObjectDef or HyperCubeDef.
 * 
 * Example:
 * 
 * A sheet contains a list object and a chart. If the list object is in selection mode then the chart cannot be in selection mode.
 * No selection on the chart can be made until the list object exits the selection mode.
 * For example, /qListObjectDef.
 * @param {!Array<string>} qPaths
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.beginSelections = function(qPaths) {};

/**
 * Clears the selections in a dimension of a visualization.
 * For example, /qListObjectDef.
 * Dimension numbers/indexes start from 0.
 * This parameter is optional. If this parameter is not set, all dimensions are cleared.
 * @param {string} qPath
 * @param {!Array<number>=} qColIndices
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.clearSelections = function(qPath, qColIndices) {};

/**
 * Clears the soft properties of a generic object.
 * For more information on how to add soft properties to a generic object,
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.clearSoftPatches = function() {};

/**
 * Collapses the left dimensions of a pivot table. This method applies only to pivot tables that are not always fully expanded.
 * In the definition of the hypercube (in HyperCubeDef), the parameter qAlwaysFullyExpanded must be set to false.
 * For example, /qHyperCubeDef.
 * >> This parameter is mandatory.
 * Indexing starts from 0.
 * Indexing starts from 0.
 * Parameters qRow and qCol are not used if qAll is set to true, but they need to be set (for example to 0).
 * @param {string} qPath
 * @param {number} qRow
 * @param {number} qCol
 * @param {boolean} qAll
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.collapseLeft = function(qPath, qRow, qCol, qAll) {};

/**
 * Collapses the top dimensions of a pivot table. This method applies only to pivot tables that are not always fully expanded.
 * In the definition of the hypercube (in HyperCubeDef), the parameter qAlwaysFullyExpanded must be set to false.
 * For example, /qHyperCubeDef.
 * >> This parameter is mandatory.
 * Indexing starts from 0.
 * Indexing starts from 0.
 * Parameters qRow and qCol are not used if qAll is set to true, but they need to be set (for example to 0).
 * @param {string} qPath
 * @param {number} qRow
 * @param {number} qCol
 * @param {boolean} qAll
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.collapseTop = function(qPath, qRow, qCol, qAll) {};

/**
 * Copies the properties of a generic object and its children.
 * The source object is specified by the parameter qFromId and the destination object is referenced by its handle.
 * 
 * Note: The identifier of the destination object is the same as before the copy takes place.
 * @param {!EngineAPI.IGenericObjectProperties} qFromId
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.copyFrom = function(qFromId) {};

/**
 * Creates a generic object that is a child of another generic object.
 * 
 * Note: It is possible to update the properties of the child's parent at the same time that the child is created.
 * Both operations are performed by the same call.
 * Note: It is possible to create a child that is linked to another generic object. The two objects have the same properties.
 * 
 * Note: In addition to the parameters specified above, the parameter qProp
 * can get any properties defined in the Generic objects section.
 * >> This parameter is mandatory.
 * It is possible to create a child that is linked to another object.
 * Identifier of the parent's object.
 * Should be set to update the properties of the parent's object at the same time the child is created.
 * @param {!EngineAPI.IGenericObjectProperties} qProp
 * @param {!EngineAPI.IGenericObjectProperties=} qPropForThis
 * @return {!Promise<!EngineAPI.IGenericObject>}
 */
EngineAPI.IGenericObject.prototype.createChild = function(qProp, qPropForThis) {};

/**
 * Removes all children and all children to the children on an object.
 * Identifier of the parent's object and property to update.
 * Should be set to update the properties of the parent's object at the same time the child is created.
 * @param {!EngineAPI.IGenericObjectProperties=} qPropForThis
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.destroyAllChildren = function(qPropForThis) {};

/**
 * Removes a child object.
 * Note: It is possible to update the properties of the child's parent at the same time that the child is removed.
 * Both operations are performed by the same call.
 * 
 * Note: Removing a linked object, invalidate the linking object.
 * 
 * >> This parameter is mandatory.
 * Identifier of the parent's object and property to update.
 * Should be set to update the properties of the parent's object at the same time the child is created.
 * @param {string} qid
 * @param {!EngineAPI.IGenericObjectProperties=} qPropForThis
 * @return {!Promise<boolean>}
 */
EngineAPI.IGenericObject.prototype.destroyChild = function(qid, qPropForThis) {};

/**
 * You can use the drillUp method with any object that contains a drill-down group as a dimension.
 * This method allows you to move between different levels of information
 * (from a detailed level to a less detailed level of information).
 * You can go back to previous visualizations up to the highest level of the hierarchy.
 * If you try to drill up more steps than there are available levels, the first level of the hierarchy is displayed.
 * For example, /qHyperCubeDef.
 * >> This parameter is mandatory.
 * The default value is 0.
 * The default value is 0.
 * @param {string} qPath
 * @param {number} qDimNo
 * @param {number} qNbrSteps
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.drillUp = function(qPath, qDimNo, qNbrSteps) {};

/**
 * Adds a snapshot to a generic object.
 * 
 * Note: Only one snapshot can be embedded in a generic object.
 * Note: If you embed a snapshot in an object that already contains a snapshot,
 * the new snapshot overwrites the previous one.
 * @param {string} qId
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.embedSnapshotObject = function(qId) {};

/**
 * Ends the selection mode on a visualization. The selections are accepted or aborted when exiting the selection mode,
 * depending on the qAccept parameter value.
 * @param {boolean} qAccept
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.endSelections = function(qAccept) {};

/**
 * Expands the left dimensions of a pivot table.
 * This method applies only to pivot tables that are not always fully expanded.
 * In the definition of the hypercube (in HyperCubeDef), the parameter qAlwaysFullyExpanded must be set to false.
 * For example, /qHyperCubeDef.
 * >> This parameter is mandatory.
 * Indexing starts from 0.
 * Indexing starts from 0.
 * Parameters qRow and qCol are not used if qAll is set to true, but they need to be set (for example to 0).
 * @param {string} qPath
 * @param {number} qRow
 * @param {number} qCol
 * @param {boolean} qAll
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.expandLeft = function(qPath, qRow, qCol, qAll) {};

/**
 * Expands the top dimensions of a pivot table.
 * This method applies only to pivot tables that are not always fully expanded.
 * In the definition of the hypercube (in HyperCubeDef), the parameter qAlwaysFullyExpanded must be set to false.
 * For example, /qHyperCubeDef.
 * >> This parameter is mandatory.
 * Indexing starts from 0.
 * Indexing starts from 0.
 * Parameters qRow and qCol are not used if qAll is set to true, but they need to be set (for example to 0).
 * @param {string} qPath
 * @param {number} qRow
 * @param {number} qCol
 * @param {boolean} qAll
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.expandTop = function(qPath, qRow, qCol, qAll) {};

/**
 * Exports the data of any generic object to an Excel file or a open XML file.
 * If the object contains excluded values, those excluded values are not exported.
 * This API has limited functionality and will not support CSV export from all types of objects.
 * Consider using Excel export instead. Treemap and bar chart are not supported.
 * 
 * -- Default limitations in number of rows and columns --
 * The default maximum number of rows and columns in the Excel export file is:
 * 
 * 1048566 rows per sheet. For pivot tables: 1048566 column dimensions. 10 rows can be added after the export.
 * 16384 columns per sheet. If the number of columns exceeds the limit,
 * the exported file is truncated and a warning message is sent.
 * 
 * Note: There is an option to export only the possible values (qExportState is P).
 * 
 * -- Default limitation in size --
 * The default size limit of an export file is:
 * 1024*1024*800 for an export to an Excel file.
 * If the exported file is larger than the maximum value, then an out of memory error with code 13000 is returned.
 * 
 * Note: Exported files are temporary and are available only for a certain time span and only to the user who created them.
 * >> This parameter is mandatory if the file type is CSV_C or CSV_T.
 * This parameter is optional and only used in Qlik Sense Desktop.
 * This parameter is optional.
 * One of:
 *           P to export only the possible values
 *           A to export all values (default)
 * 
 * @param {string} qFileType
 * @param {string} qPath
 * @param {string=} qFileName
 * @param {string=} qExportState
 * @return {!Promise<string>}
 */
EngineAPI.IGenericObject.prototype.exportData = function(qFileType, qPath, qFileName, qExportState) {};

/**
 * Returns the identifier and the type for each child in an app object.
 * If the child contains extra properties in qInfos,these properties are returned.
 * 
 * Note: Full dynamic properties are optional and are returned if they exist in the definition of the object.
 * @return {!Promise<!Array<!EngineAPI.INxInfo>>}
 */
EngineAPI.IGenericObject.prototype.getChildInfos = function() {};

/**
 * Returns the type of the object and the corresponding handle.
 * >> This parameter is mandatory.
 * @param {string} qId
 * @return {!Promise<!EngineAPI.IGenericObject>}
 */
EngineAPI.IGenericObject.prototype.getChild = function(qId) {};

/**
 * Returns the identifier, the type and the properties of the object.
 * If the object contains some soft properties, the soft properties are returned.
 * If the object is linked to another object, the properties of the linking object are returned.
 * @return {!Promise<!EngineAPI.IGenericObjectProperties>}
 */
EngineAPI.IGenericObject.prototype.getEffectiveProperties = function() {};

/**
 * Gets the properties of:
 *       - a generic object
 *       - the children of the generic object
 *       - the bookmarks/embedded snapshots of the generic object
 * @return {!Promise<!EngineAPI.IGenericObjectEntry>}
 */
EngineAPI.IGenericObject.prototype.getFullPropertyTree = function() {};

/**
 * This method supports data binning.
 * When a generic object with two or three measures and one dimension contains a lot of data,
 * groups of points (i.e cells) can be rendered instead of points.
 * A zone of interest can be refined (for zooming in) up to a maximum refinement level
 * (set in the qQueryLevel parameter) or coarsened (for zoom out).
 * The grid of cells is adaptive (not static), meaning that it adapts to different length scales.
 * The GetHyperCubeBinnedData method gives information about the adaptive grid and the values of the generic object.
 * The number of points in a cell and the coordinates (expressed in the measure range) of each cell are returned.
 * Dimension values and measure values are rendered at point level (highest detailed level).
 * 
 * Note: The generic object should contain two or three measures and one dimension.
 * When the refinement is high, the first two measures are represented on the x-axis and on the y-axis,
 * while the third measure is visualized as color or point size.
 * For example, /qHyperCubeDef.
 * >> This parameter is mandatory.
 * Since the generic object contains two measures and one dimension, qWidth should be set to 3.
 * If the value of a measure is Null, the value cannot be rendered. Therefore, the number of
 * elements rendered in a page can be less than the number defined in the property qHeight.
 * >> This parameter is mandatory.
 * This parameter is not yet used and is optional.
 * This range applies to the measure values.
 * The lowest and highest values of a measure can be retrieved
 * by using the GetLayout method ( in /qHyperCube/qMeasureInfo).
 * >> This parameter is mandatory.
 * >> This parameter is mandatory.
 * When the number of points to render falls below a certain threshold,
 * the values are no longer rendered as cells but as points.
 * The query level should be no greater than 20.
 * This parameter is optional.
 * The default value is 0.
 * One of:
 *           0: Adaptive grid
 * @param {string} qPath
 * @param {!Array<!EngineAPI.INxPage>} qPages
 * @param {!EngineAPI.INxViewPort} qViewport
 * @param {!EngineAPI.INxDataAreaPage} qDataRanges
 * @param {number} qMaxNbrCells
 * @param {number} qQueryLevel
 * @param {number} qBinningMethod
 * @return {!Promise<!Array<!EngineAPI.INxDataPage>>}
 */
EngineAPI.IGenericObject.prototype.getHyperCubeBinnedData = function(qPath, qPages, qViewport, qDataRanges, qMaxNbrCells, qQueryLevel, qBinningMethod) {};

/**
 * Retrieves and packs compressed hypercube and axis data. It is possible to retrieve specific pages of data.
 * 
 * Note: Binning is done on the time stamp data as well as the date.
 * This means that you can zoom in to a level of granularity as low as seconds.
 * For example, /qHyperCubeDef. >> This parameter is mandatory.
 * Options.NbrPoints is number of bins for binning.
 * Options.MaxNbrTicks - maximum number of ticks.
 * @param {string} qPath
 * @param {!Array<!EngineAPI.IContinuousDataOptions>} qOptions
 * @return {(!Promise<boolean>|!Promise<!Array<!EngineAPI.INxDataPage>>|!Promise<!Array<!EngineAPI.INxAxisData>>)}
 */
EngineAPI.IGenericObject.prototype.getHyperCubeContinuousData = function(qPath, qOptions) {};

/**
 * Retrieves the values of a chart, a table, or a scatter plot. It is possible to retrieve specific pages of data.
 * Note: This method does not apply to stacked tables.
 * For example, /qHyperCubeDef.
 * >> This parameter is mandatory.
 * >> This parameter is mandatory.
 * @param {string} qPath
 * @param {!Array<!EngineAPI.INxPage>} qPages
 * @return {!Promise<!Array<!EngineAPI.INxDataPage>>}
 */
EngineAPI.IGenericObject.prototype.getHyperCubeData = function(qPath, qPages) {};

/**
 * Retrieves the values of a pivot table. It is possible to retrieve specific pages of data.
 * For example, /qHyperCubeDef.
 * >> This parameter is mandatory.
 * >> This parameter is mandatory.
 * @param {string} qPath
 * @param {!Array<!EngineAPI.INxPage>} qPages
 * @return {!Promise<!Array<!EngineAPI.INxPivotPage>>}
 */
EngineAPI.IGenericObject.prototype.getHyperCubePivotData = function(qPath, qPages) {};

/**
 * Reduces the data of a bar chart, a line chart or a scatter plot chart and retrieves them.
 * The reduction is dependent on the zoom factor (parameter qZoomFactor) and on the reduction mode.
 * 
 * Note: This method can be used to create mini charts.
 * 
 * -- Bar chart or line chart data reduction --
 * For the data reduction to happen, the following conditions must be fulfilled:
 * The values cannot fit in the defined page (parameter qPages).
 * The zoom factor is not 0 (parameter qZoomFactor).
 * The reduction mode must be set to D1. The reduction algorithm keeps the shape of the visualizations and works whatever
 * the number of dimensions in the chart. The global profile of the chart is reduced, and not only a specific dimension.
 * A visualization that has been reduced contains fewer values but its shape is the same. Data of all types can be reduced. Therefore it is hard to relate the
 * values before and after a reduction especially when reducing string values.
 * 
 * Example:
 * If you have a chart with 1 million data, and you have set the zoom factor to 5, the GetHyperCubeReducedData
 * method reduces the chart and retrieves 200 000 data.
 * 
 * -- Scatter plot chart data reduction--
 * The reduction mode must be set
 * to C. This reduction mechanism follows the 2D K-Means algorithm. Data are reduced into a number of clusters. Each data
 * is assigned to a specific centroid. The number of centroids can be defined in the parameter qZoomFactor.
 * 
 * -- Scatter plot chart resolution reduction --
 * The reduction mode must be set to S. The resolution is reduced according
 * to the zoom factor (parameter qZoomFactor).
 * 
 * Example:
 * If you have a scatter plot chart and the zoom factor is set to 2, the scatter plot chart resolution is reduced by 4.
 * For example, /qHyperCubeDef.
 * If set to -1, the engine decides of the zoom factor.
 * If the reduction mode is D1 or S, the zoom factor is 2n.
 * If the zoom factor is 5, the data are reduced by a factor 32.
 * If the reduction mode is C, the zoom factor defines the number of centroids.
 * One of:
 *       - N for no data reduction.
 *       - D1 to reduce a bar chart or line chart. The profile of the chart is reduced whatever the number of dimensions in the chart.
 *       - S to reduce the resolution of a scatter plot.
 *       - C to reduce the data of a scatter plot chart.
 *       - ST to reduce the data of a stacked pivot table.
 * @param {string} qPath
 * @param {!Array<!EngineAPI.INxPage>} qPages
 * @param {number} qZoomFactor
 * @param {string} qReductionMode
 * @return {!Promise<!Array<!EngineAPI.INxDataPage>>}
 */
EngineAPI.IGenericObject.prototype.getHyperCubeReducedData = function(qPath, qPages, qZoomFactor, qReductionMode) {};

/**
 * Retrieves the values of a stacked pivot table. It is possible to retrieve specific pages of data.
 * For example, /qHyperCubeDef.
 * >> This parameter is mandatory.
 * >> This parameter is optional. The default value is 10 000.
 * @param {string} qPath
 * @param {!Array<!EngineAPI.INxPage>} qPages
 * @param {number=} qMaxNbrCells
 * @return {!Promise<!Array<!EngineAPI.INxStackPage>>}
 */
EngineAPI.IGenericObject.prototype.getHyperCubeStackData = function(qPath, qPages, qMaxNbrCells) {};

/**
 * Returns the type and identifier of the object.
 * @return {!Promise<!EngineAPI.INxInfo>}
 */
EngineAPI.IGenericObject.prototype.getInfo = function() {};

/**
 * Evaluates an object and displays its properties including the dynamic properties.
 * If the member delta is set to true in the request object, only the delta is evaluated.
 * 
 * Note: In addition to the parameters displayed above, the GetLayout method can return other properties according
 * to what is defined in the generic object. For example, if qHyperCubeDef is defined in the generic object,
 * the GetLayout method returns the properties described in HyperCube.
 * @return {!Promise<!EngineAPI.IGenericBaseLayout>}
 */
EngineAPI.IGenericObject.prototype.getLayout = function() {};

/**
 * Lists the linked objects to a generic object, a dimension or a measure.
 * @return {!Promise<!Array<!EngineAPI.INxLinkedObjectInfo>>}
 */
EngineAPI.IGenericObject.prototype.getLinkedObjects = function() {};

/**
 * GetListObjectContinuousData method
 * For example, /qHyperCubeDef.
 * This parameter is mandatory.
 * - Options.MaxNbrTicks - maximum number of ticks.
 * @param {string} qPath
 * @param {!EngineAPI.IContinuousDataOptions} qOptions
 * @return {(!Promise<!Array<!EngineAPI.INxDataPage>>|!Promise<!Array<!EngineAPI.INxAxisData>>)}
 */
EngineAPI.IGenericObject.prototype.getListObjectContinuousData = function(qPath, qOptions) {};

/**
 * Retrieves the values of a list object.
 * For example, /qListObjectDef.
 * @param {string} qPath
 * @param {!Array<!EngineAPI.INxPage>} qPages
 * @return {!Promise<!Array<!EngineAPI.INxDataPage>>}
 */
EngineAPI.IGenericObject.prototype.getListObjectData = function(qPath, qPages) {};

/**
 * Returns the identifier, the type and the properties of the object.
 * Because it is not mandatory to set all properties when you define an object,
 * the GetProperties method may show properties that were not set. In that case, default values are given.
 * If the object contains some soft properties, the soft properties are not returned by the GetProperties method.
 * Use the GetEffectiveProperties method instead.
 * If the object is linked to another object, the properties of the linking object are not returned
 * by the GetProperties method. Use the GetEffectiveProperties method instead.
 * 
 * Note: If the member delta is set to true in the request object, only the delta is retrieved.
 * @return {!Promise<!EngineAPI.IGenericObjectProperties>}
 */
EngineAPI.IGenericObject.prototype.getProperties = function() {};

/**
 * Returns the type of the object and the corresponding handle.
 * @return {!Promise<!EngineAPI.IGenericBookmark>}
 */
EngineAPI.IGenericObject.prototype.getSnapshotObject = function() {};

/**
 * Locks the selected values of a generic object.
 * For example, /qListObjectDef.
 * Dimension numbers/indexes start from 0.
 * This parameter is optional. If this parameter is not set, the selected values in all dimensions are locked.
 * @param {string} qPath
 * @param {!Array<number>} qColIndices
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.lock = function(qPath, qColIndices) {};

/**
 * Publishes a generic object.
 * 
 * Note: This operation is possible only in Qlik Sense Enterprise.
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.publish = function() {};

/**
 * Make range selections in measures.
 * 
 * Note: This method applies to hypercubes. For example, bar charts, tables and scatter plots.
 * For example, /qListObjectDef.
 * >> This parameter is mandatory.
 * >>This parameter is mandatory.
 * The dimensions numbering starts at 0 (first dimension is 0).
 * If the array is empty, all dimensions are selected.
 * >> This parameter is optional.
 * If set to true, it means that at least one of the measures must be in the range of
 * selections for the group of measures to be selected.
 * If set to false, it means that all measures must be in the range of
 * selections for the group of measures to be selected.
 * This parameter is optional. The default value is false.
 * single selected value. There must be only one selected value in the field.
 * >> The default value is false.
 * @param {string} qPath
 * @param {!EngineAPI.INxMultiRangeSelectInfo} qRanges
 * @param {boolean} qDeselectOnlyOneSelected
 * @param {!Array<number>=} qColumnsToSelect
 * @param {boolean=} qOrMode
 * @return {!Promise<boolean>}
 */
EngineAPI.IGenericObject.prototype.multiRangeSelectHyperCubeValues = function(qPath, qRanges, qDeselectOnlyOneSelected, qColumnsToSelect, qOrMode) {};

/**
 * Make range selections in measures.
 * Note: This method applies to hypercubes. For example, bar charts, tables and scatter plots.
 * For example, /qHyperCubeDef.
 * >> This parameter is mandatory.
 * >>This parameter is mandatory.
 * single selected value. There must be only one selected value in the field.
 * >> The default value is false.
 * The dimensions numbering starts at 0 (first dimension is 0).
 * If the array is empty, all dimensions are selected.
 * >> This parameter is optional.
 * If set to true, it means that at least one of the measures must be in the range of
 * selections for the group of measures to be selected.
 * If set to false, it means that all measures must be in the range of
 * selections for the group of measures to be selected.
 * This parameter is optional. The default value is false.
 * @param {string} qPath
 * @param {!Array<!EngineAPI.INxRangeSelectInfo>} qRanges
 * @param {boolean} qDeselectOnlyOneSelected
 * @param {!Array<number>=} qColumnsToSelect
 * @param {boolean=} qOrMode
 * @return {!Promise<boolean>}
 */
EngineAPI.IGenericObject.prototype.rangeSelectHyperCubeValues = function(qPath, qRanges, qDeselectOnlyOneSelected, qColumnsToSelect, qOrMode) {};

/**
 * Resets all selections made in selection mode.
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.resetMadeSelections = function() {};

/**
 * Searches for a string in a list object.
 * 
 * Note: This method applies to list objects (objects with one dimension).
 * Note: The search results can be displayed using the GetLayout method.
 * For example, /qListObjectDef.
 * Wild card characters are allowed. The search is not case sensitive.
 * Examples:
 *        P*U*: retrieves only values that start with P and contain U
 *        P U S: retrieves values that start with P, U or S
 * @param {string} qPath
 * @param {string} qMatch
 * @return {!Promise<boolean>}
 */
EngineAPI.IGenericObject.prototype.searchListObjectFor = function(qPath, qMatch) {};

/**
 * Makes selections in multiple dimensions and measures.
 * 
 * Note: This method applies to hypercubes, such as bar charts, tables and scatter plots.
 * For example, /qHyperCubeDef.
 * This parameter is mandatory.
 * If the array is empty [ ], all rows are selected.
 * >> This parameter is mandatory.
 * A column corresponds to a dimension or a measure depending on the definition of the hypercube.
 * Example:
 *   If the hypercube has two dimensions and one measure:
 *        [0] selects the first column (i.e the first dimension)
 *        [1] selects the second column (i.e the second dimension)
 *        [2] selects the third column (i.e the measure)
 *    If the array is empty [ ], all columns are selected.
 * >>This parameter is mandatory.
 * >> This parameter is mandatory.
 * There must be only one selected value in the field.
 * The default value is false.
 * @param {string} qPath
 * @param {!Array<number>} qRowIndices
 * @param {!Array<number>} qColIndices
 * @param {boolean} qSoftLock
 * @param {boolean} qDeselectOnlyOneSelected
 * @return {!Promise<boolean>}
 */
EngineAPI.IGenericObject.prototype.selectHyperCubeCells = function(qPath, qRowIndices, qColIndices, qSoftLock, qDeselectOnlyOneSelected) {};

/**
 * SelectHyperCubeContinuousRange method
 * For example, /qHyperCubeDef.
 * >>This parameter is mandatory.
 * If either Ranges[N].MinInclEq or Ranges[N].MaxInclEq, or both flags are set to true
 * then Min and Max values will be selected.
 * >> This parameter is mandatory.
 * @param {string} qPath
 * @param {!Array<!EngineAPI.INxContinuousRangeSelectInfo>} qRanges
 * @param {boolean} qSoftLock
 * @return {!Promise<boolean>}
 */
EngineAPI.IGenericObject.prototype.selectHyperCubeContinuousRange = function(qPath, qRanges, qSoftLock) {};

/**
 * Selects some values in one dimension.
 * The values are identified by their element numbers.
 * 
 * Note: This method applies to charts, tables and scatter plots.
 * For example, /qHyperCubeDef.
 * >>This parameter is mandatory.
 * Dimension numbers/index start from 0.
 * >> This parameter is mandatory.
 * You can select multiple elements; the separator is the comma.
 * >> This parameter is mandatory.
 * >> This parameter is mandatory.
 * @param {string} qPath
 * @param {number} qDimNo
 * @param {!Array<number>} qValues
 * @param {boolean} qToggleMode
 * @return {!Promise<boolean>}
 */
EngineAPI.IGenericObject.prototype.selectHyperCubeValues = function(qPath, qDimNo, qValues, qToggleMode) {};

/**
 * Selects all values of a field.
 * 
 * Note: This method applies to list objects (objects with one dimension).
 * For example, /qListObjectDef.
 * >> This parameter is mandatory.
 * The default value is false.
 * >> This parameter is optional.
 * @param {string} qPath
 * @param {boolean=} qSoftLock
 * @return {!Promise<boolean>}
 */
EngineAPI.IGenericObject.prototype.selectListObjectAll = function(qPath, qSoftLock) {};

/**
 * Selects all values of a field.
 * 
 * Note: This method applies to list objects (objects with one dimension).
 * For example, /qListObjectDef.
 * >> This parameter is mandatory.
 * The default value is false.
 * >> This parameter is optional.
 * @param {string} qPath
 * @param {boolean=} qSoftLock
 * @return {!Promise<boolean>}
 */
EngineAPI.IGenericObject.prototype.selectListObjectAlternative = function(qPath, qSoftLock) {};

/**
 * For example, /qListObjectDef.
 * >> This parameter is mandatory.
 * If either Ranges[N].MinInclEq or Ranges[N].MaxInclEq, or both flags are set to true
 * then Min and Max values will be selected.
 * The default value is false.
 * >> This parameter is optional.
 * @param {string} qPath
 * @param {!Array<!Range>} qRanges
 * @param {boolean=} qSoftLock
 * @return {!Promise<boolean>}
 */
EngineAPI.IGenericObject.prototype.selectListObjectContinuousRange = function(qPath, qRanges, qSoftLock) {};

/**
 * Inverts the current selections in a specific field.
 * 
 * Note: This method applies to list objects (objects with one dimension).
 * For example, /qListObjectDef.
 * >> This parameter is mandatory.
 * The default value is false.
 * >> This parameter is optional.
 * @param {string} qPath
 * @param {boolean=} qSoftLock
 * @return {!Promise<boolean>}
 */
EngineAPI.IGenericObject.prototype.selectListObjectExcluded = function(qPath, qSoftLock) {};

/**
 * Selects all possible values of a list object.
 * 
 * Note: This method applies to list objects (objects with one dimension).
 * For example, /qListObjectDef.
 * >> This parameter is mandatory.
 * The default value is false.
 * >> This parameter is optional.
 * @param {string} qPath
 * @param {boolean=} qSoftLock
 * @return {!Promise<boolean>}
 */
EngineAPI.IGenericObject.prototype.selectListObjectPossible = function(qPath, qSoftLock) {};

/**
 * Makes single selections in dimensions.
 * 
 * Note: This method applies to list objects only.
 * For example, /qListObjectDef.
 * >> This parameter is mandatory.
 * You can select multiple values; the separator is the comma.
 * >> This parameter is mandatory.
 * >> This parameter is mandatory.
 * The default value is false.
 * >> This parameter is optional.
 * @param {string} qPath
 * @param {!Array<number>} qValues
 * @param {boolean} qToggleMode
 * @param {boolean=} qSoftLock
 * @return {!Promise<boolean>}
 */
EngineAPI.IGenericObject.prototype.selectListObjectValues = function(qPath, qValues, qToggleMode, qSoftLock) {};

/**
 * Note: This method only applies to hypercubes that are not represented as straight tables.
 * The parameter qMode in HyperCubeDef must be set either to P or K.
 * 
 * -- Pivot table --
 * Makes selections in the top or left dimension cells of a pivot table or in the data matrix.
 * Only expanded dimensions can be selected.
 * 
 * -- Stacked table --
 * Makes selections in the left dimension cells of a stacked table or in the data matrix.
 * 
 * Note: There is no top dimensions in a stacked table. A stacked table can only contain one measure.
 * For example, /qHyperCubeDef.
 * >> This parameter is mandatory.
 * The default value is false.
 * >> This parameter is optional.
 * There must be only one selected value in the field.
 * The default value is false.
 * @param {string} qPath
 * @param {!Array<!EngineAPI.INxSelectionCell>} qSelections
 * @param {boolean} qDeselectOnlyOneSelected
 * @param {boolean=} qSoftLock
 * @return {!Promise<boolean>}
 */
EngineAPI.IGenericObject.prototype.selectPivotCells = function(qPath, qSelections, qDeselectOnlyOneSelected, qSoftLock) {};

/**
 * Sets the order of the children in a generic object.
 * 
 * Note: To change the order of the children in a generic object, the identifiers of all the children
 * must be included in the list of the identifiers (in qIds).
 * @param {!Array<string>} qIds
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.setChildArrayOrder = function(qIds) {};

/**
 * Sets the properties of:
 * 
 * - a generic object
 * - the children of the generic object
 * - the bookmarks/embedded snapshots of the generic object
 * 
 * Note: If the SetFullPropertyTree method is asked to set some properties to a child that does not exist,
 *           it creates the child.
 * Note: The type of an object cannot be updated.
 * @param {!EngineAPI.IGenericObjectEntry} qPropEntry
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.setFullPropertyTree = function(qPropEntry) {};

/**
 * Sets some properties for a generic object.
 * 
 * Note: In addition to the parameters specified above, the object can get any properties
 * defined in the Generic objects section.
 * @param {!EngineAPI.IGenericObjectProperties} qProp
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.setProperties = function(qProp) {};

/**
 * Unlocks the selected values of a generic object if the target (or handle ) is a generic object
 * For example, /qListObjectDef.
 * Dimension numbers/indexes start from 0.
 * This parameter is optional. If this parameter is not set, the locked values in all dimensions are unlocked.
 * @param {string} qPath
 * @param {!Array<number>} qColIndices
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.unlock = function(qPath, qColIndices) {};

/**
 * Unpublishes a generic object.
 * 
 * Note: This operation is possible only in Qlik Sense Enterprise.
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObject.prototype.unPublish = function() {};
/**
 * @extends {EngineAPI.IGenericBaseLayout}
 * @record
 * @struct
 */
EngineAPI.IGenericMeasureLayout = function() {};
 /** @type {!EngineAPI.INxLibraryMeasureDef} */
EngineAPI.IGenericMeasureLayout.prototype.qMeasure;
/**
 * @extends {EngineAPI.IGenericBaseLayout}
 * @record
 * @struct
 */
EngineAPI.IGenericVariableLayout = function() {};
 /** @type {string} */
EngineAPI.IGenericVariableLayout.prototype.qText;
 /** @type {number} */
EngineAPI.IGenericVariableLayout.prototype.qNum;
 /** @type {boolean} */
EngineAPI.IGenericVariableLayout.prototype.qIsScriptCreated;
/**
 * @record
 * @struct
 */
EngineAPI.INxLibraryMeasureDef = function() {};
 /** @type {string} */
EngineAPI.INxLibraryMeasureDef.prototype.qLabel;
 /** @type {string} */
EngineAPI.INxLibraryMeasureDef.prototype.qDef;
 /** @type {string} */
EngineAPI.INxLibraryMeasureDef.prototype.qGrouping;
 /** @type {!Array<string>} */
EngineAPI.INxLibraryMeasureDef.prototype.qExpressions;
 /** @type {number} */
EngineAPI.INxLibraryMeasureDef.prototype.qActiveExpression;
/**
 * @extends {EngineAPI.IImplementOn}
 * @record
 * @struct
 */
EngineAPI.IGenericMeasure = function() {};

/**
 * Applies a patch to the properties of an object. Allows an update to some of the properties.
 * 
 * Note: Applying a patch takes less time than resetting all the properties.
 * @param {!Array<!EngineAPI.INxPatch>} qPatches
 * @return {!Promise<void>}
 */
EngineAPI.IGenericMeasure.prototype.applyPatches = function(qPatches) {};

/**
 * Returns the type and identifier of the object.
 * @return {!Promise<!EngineAPI.INxInfo>}
 */
EngineAPI.IGenericMeasure.prototype.getInfo = function() {};

/**
 * Evaluates a measure and displays its properties, including the dynamic properties.
 * @return {!Promise<!EngineAPI.IGenericMeasureLayout>}
 */
EngineAPI.IGenericMeasure.prototype.getLayout = function() {};

/**
 * Lists the linked objects to a generic object, a dimension or a measure.
 * @return {!Promise<!EngineAPI.INxLinkedObjectInfo>}
 */
EngineAPI.IGenericMeasure.prototype.getLinkedObjects = function() {};

/**
 * Returns the definition of a measure
 * >> This parameter is mandatory.
 * @return {!Promise<!EngineAPI.INxLibraryMeasureDef>}
 */
EngineAPI.IGenericMeasure.prototype.getMeasure = function() {};

/**
 * Shows the properties of an object.
 * Returns the identifier and the definition of the measure.
 * 
 * Note: If the member delta is set to true in the request object, only the delta is retrieved.
 * >> This parameter is mandatory.
 * @return {!Promise<!EngineAPI.IGenericMeasureProperties>}
 */
EngineAPI.IGenericMeasure.prototype.getProperties = function() {};

/**
 * Publishes a measure.
 * @return {!Promise<void>}
 */
EngineAPI.IGenericMeasure.prototype.publish = function() {};

/**
 * Sets some properties for a measure.
 * This parameter is mandatory.
 * @param {!EngineAPI.IGenericMeasureProperties} qProp
 * @return {!Promise<void>}
 */
EngineAPI.IGenericMeasure.prototype.setProperties = function(qProp) {};

/**
 * Unpublishes a measure.
 * @return {!Promise<void>}
 */
EngineAPI.IGenericMeasure.prototype.unPublish = function() {};
/**
 * @extends {EngineAPI.IImplementOn}
 * @record
 * @struct
 */
EngineAPI.IGenericVariable = function() {};

/**
 * Applies a patch to the properties of a variable. Allows an update to some of the properties.
 * 
 * Note: Applying a patch takes less time than resetting all the properties.
 * @param {!Array<!EngineAPI.INxPatch>} qPatches
 * @return {!Promise<void>}
 */
EngineAPI.IGenericVariable.prototype.applyPatches = function(qPatches) {};

/**
 * Returns the type and identifier of the object.
 * @return {!Promise<!EngineAPI.INxInfo>}
 */
EngineAPI.IGenericVariable.prototype.getInfo = function() {};

/**
 * Evaluates an object and displays its properties including the dynamic properties.
 * If the member delta is set to true in the request object, only the delta is evaluated.
 * @return {!Promise<!EngineAPI.IGenericVariableLayout>}
 */
EngineAPI.IGenericVariable.prototype.getLayout = function() {};

/**
 * Shows the properties of an object.
 * 
 * Note: If the member delta is set to true in the request, only the delta is retrieved.
 * @return {!Promise<!EngineAPI.IGenericVariableProperties>}
 */
EngineAPI.IGenericVariable.prototype.getProperties = function() {};

/**
 * Sets the value of a dual variable.
 * 
 * Note: These changes are not persistent. They only last the duration of the engine session.
 * if the string representation is to be Null.
 * >> This parameter is mandatory.
 * >> This parameter is mandatory.
 * @param {string} qText
 * @param {number} qNum
 * @return {!Promise<void>}
 */
EngineAPI.IGenericVariable.prototype.setDualValue = function(qText, qNum) {};

/**
 * Sets a numerical value to a variable.
 * 
 * Note: These changes are not persistent. They only last the duration of the engine session.
 * @param {number} qVal
 * @return {!Promise<void>}
 */
EngineAPI.IGenericVariable.prototype.setNumValue = function(qVal) {};

/**
 * Sets some properties for a variable.
 * 
 * Note: The identifier of a variable cannot be modified.
 * You cannot update the properties of a script-defined variable using the SetProperties method.
 * >> This parameter is mandatory.
 * @param {!EngineAPI.IGenericVariableProperties} qProp
 * @return {!Promise<void>}
 */
EngineAPI.IGenericVariable.prototype.setProperties = function(qProp) {};

/**
 * Sets a string value to a variable.
 * Note: These changes are not persistent. They only last the duration of the engine session.
 * @param {string} qVal
 * @return {!Promise<void>}
 */
EngineAPI.IGenericVariable.prototype.setStringValue = function(qVal) {};
/**
 * @record
 * @struct
 */
EngineAPI.IAlfaNumString = function() {};
 /** @type {string} */
EngineAPI.IAlfaNumString.prototype.qString;
 /** @type {boolean} */
EngineAPI.IAlfaNumString.prototype.qIsNum;
/**
 * @record
 * @struct
 */
EngineAPI.INxVariableProperties = function() {};
 /** @type {string} */
EngineAPI.INxVariableProperties.prototype.qName;
 /** @type {!EngineAPI.IFieldAttributes} */
EngineAPI.INxVariableProperties.prototype.qNumberPresentation;
 /** @type {boolean} */
EngineAPI.INxVariableProperties.prototype.qIncludeInBookmark;
 /** @type {boolean} */
EngineAPI.INxVariableProperties.prototype.qUsePredefListedValues;
 /** @type {!Array<string>} */
EngineAPI.INxVariableProperties.prototype.qPreDefinedList;
/**
 * @extends {EngineAPI.IImplementOn}
 * @record
 * @struct
 */
EngineAPI.IVariable = function() {};

/**
 * Sets the value of a dual variable overriding any input constraints.
 * 
 * Note: This method is deprecated (not recommended to use). Use SetProperties method instead.
 * Note: The ForceContent method does not evaluate any expression.
 * Set this parameter to "", if the string representation is to be Null.
 * >> This parameter is mandatory.
 * >> This parameter is mandatory.
 * @param {string} qs
 * @param {number} qd
 * @return {!Promise<void>}
 */
EngineAPI.IVariable.prototype.forceContent = function(qs, qd) {};

/**
 * Returns the calculated value of a variable.
 * 
 * Note: This method is deprecated (not recommended to use). Use GetProperties method instead.
 * @return {!Promise<!EngineAPI.IAlfaNumString>}
 */
EngineAPI.IVariable.prototype.getContent = function() {};

/**
 * Gets the properties of a variable.
 * 
 * Note: This method is deprecated (not recommended to use). Use GetProperties method instead.
 * @return {!Promise<!EngineAPI.INxVariableProperties>}
 */
EngineAPI.IVariable.prototype.getNxProperties = function() {};

/**
 * Returns the raw value of a variable.
 * 
 * Note: This method is deprecated (not recommended to use). Use GetProperties method instead.
 * @return {string}
 */
EngineAPI.IVariable.prototype.getRawContent = function() {};

/**
 * Sets a value to a variable.
 * 
 * Note: This method is deprecated (not recommended to use). Use SetProperties method instead.
 * >> This parameter is mandatory.
 * >> This parameter is mandatory.
 * @param {string} qContent
 * @param {boolean} qUpdateMRU
 * @return {!Promise<boolean>}
 */
EngineAPI.IVariable.prototype.setContent = function(qContent, qUpdateMRU) {};

/**
 * Sets some properties to a variable.
 * 
 * Note: This method is deprecated (not recommended to use). Use SetProperties method instead.
 * 
 * In addition to the properties described below, dynamic properties can be added.
 * @param {!EngineAPI.INxVariableProperties} qProperties
 * @return {!Promise<void>}
 */
EngineAPI.IVariable.prototype.setNxProperties = function(qProperties) {};
/**
 * @record
 * @struct
 */
EngineAPI.IAppEntry = function() {};
 /** @type {string} */
EngineAPI.IAppEntry.prototype.qID;
 /** @type {string} */
EngineAPI.IAppEntry.prototype.qTitle;
 /** @type {string} */
EngineAPI.IAppEntry.prototype.qPath;
 /** @type {string} */
EngineAPI.IAppEntry.prototype.qLastReloadTime;
 /** @type {boolean} */
EngineAPI.IAppEntry.prototype.qReadOnly;
 /** @type {!EngineAPI.INxMeta} */
EngineAPI.IAppEntry.prototype.qMeta;
 /** @type {!EngineAPI.IStaticContentUrl} */
EngineAPI.IAppEntry.prototype.qThumbnail;
/**
 * @record
 * @struct
 */
EngineAPI.IBNFDefResult = function() {};
 /** @type {!Array<!EngineAPI.IBNFDef>} */
EngineAPI.IBNFDefResult.prototype.qBnfDefs;
 /** @type {string} */
EngineAPI.IBNFDefResult.prototype.qBnfHash;
/**
 * @record
 * @struct
 */
EngineAPI.IBNFDef = function() {};
 /** @type {!Array<number>} */
EngineAPI.IBNFDef.prototype.qBnf;
 /** @type {number} */
EngineAPI.IBNFDef.prototype.qNbr;
 /** @type {number} */
EngineAPI.IBNFDef.prototype.qPNbr;
 /** @type {number} */
EngineAPI.IBNFDef.prototype.qHelpId;
 /** @type {string} */
EngineAPI.IBNFDef.prototype.qName;
 /** @type {string} */
EngineAPI.IBNFDef.prototype.qStr;
 /** @type {boolean} */
EngineAPI.IBNFDef.prototype.qIsBnfRule;
 /** @type {boolean} */
EngineAPI.IBNFDef.prototype.qScriptStatement;
 /** @type {boolean} */
EngineAPI.IBNFDef.prototype.qControlStatement;
 /** @type {boolean} */
EngineAPI.IBNFDef.prototype.qBnfLiteral;
 /** @type {boolean} */
EngineAPI.IBNFDef.prototype.qQvFunc;
 /** @type {boolean} */
EngineAPI.IBNFDef.prototype.qAggrFunc;
 /** @type {string} */
EngineAPI.IBNFDef.prototype.qFG;
 /** @type {boolean} */
EngineAPI.IBNFDef.prototype.qFieldFlag;
 /** @type {string} */
EngineAPI.IBNFDef.prototype.qMT;
 /** @type {boolean} */
EngineAPI.IBNFDef.prototype.qDepr;
/**
 * @record
 * @struct
 */
EngineAPI.ICustomConnector = function() {};
 /** @type {string} */
EngineAPI.ICustomConnector.prototype.qProvider;
 /** @type {string} */
EngineAPI.ICustomConnector.prototype.qParent;
 /** @type {string} */
EngineAPI.ICustomConnector.prototype.qDisplayName;
 /** @type {string} */
EngineAPI.ICustomConnector.prototype.qMachineMode;
/**
 * @record
 * @struct
 */
EngineAPI.IDocListEntry = function() {};
 /** @type {string} */
EngineAPI.IDocListEntry.prototype.qDocName;
 /** @type {number} */
EngineAPI.IDocListEntry.prototype.qConnectedUsers;
 /** @type {number} */
EngineAPI.IDocListEntry.prototype.qFileTime;
 /** @type {number} */
EngineAPI.IDocListEntry.prototype.qFileSize;
 /** @type {string} */
EngineAPI.IDocListEntry.prototype.qDocId;
 /** @type {!EngineAPI.INxMeta} */
EngineAPI.IDocListEntry.prototype.qMeta;
 /** @type {string} */
EngineAPI.IDocListEntry.prototype.qLastReloadTime;
 /** @type {boolean} */
EngineAPI.IDocListEntry.prototype.qReadOnly;
 /** @type {string} */
EngineAPI.IDocListEntry.prototype.qTitle;
 /** @type {!EngineAPI.IStaticContentUrl} */
EngineAPI.IDocListEntry.prototype.qThumbnail;
/**
 * @record
 * @struct
 */
EngineAPI.IInteractDef = function() {};
 /** @type {string} */
EngineAPI.IInteractDef.prototype.qType;
 /** @type {string} */
EngineAPI.IInteractDef.prototype.qTitle;
 /** @type {string} */
EngineAPI.IInteractDef.prototype.qMsg;
 /** @type {number} */
EngineAPI.IInteractDef.prototype.qButtons;
 /** @type {string} */
EngineAPI.IInteractDef.prototype.qLine;
 /** @type {number} */
EngineAPI.IInteractDef.prototype.qOldLineNr;
 /** @type {number} */
EngineAPI.IInteractDef.prototype.qNewLineNr;
 /** @type {string} */
EngineAPI.IInteractDef.prototype.qPath;
 /** @type {boolean} */
EngineAPI.IInteractDef.prototype.qHidden;
 /** @type {number} */
EngineAPI.IInteractDef.prototype.qResult;
 /** @type {string} */
EngineAPI.IInteractDef.prototype.qInput;
/**
 * @record
 * @struct
 */
EngineAPI.IDriveInfo = function() {};
 /** @type {string} */
EngineAPI.IDriveInfo.prototype.qDrive;
 /** @type {string} */
EngineAPI.IDriveInfo.prototype.qType;
 /** @type {string} */
EngineAPI.IDriveInfo.prototype.qTypeIdentifier;
 /** @type {string} */
EngineAPI.IDriveInfo.prototype.qName;
/**
 * @record
 * @struct
 */
EngineAPI.IOdbcDsn = function() {};
 /** @type {string} */
EngineAPI.IOdbcDsn.prototype.qName;
 /** @type {string} */
EngineAPI.IOdbcDsn.prototype.qDescription;
 /** @type {boolean} */
EngineAPI.IOdbcDsn.prototype.qBit32;
 /** @type {boolean} */
EngineAPI.IOdbcDsn.prototype.qUserOnly;
/**
 * @record
 * @struct
 */
EngineAPI.IOleDbProvider = function() {};
 /** @type {string} */
EngineAPI.IOleDbProvider.prototype.qName;
 /** @type {string} */
EngineAPI.IOleDbProvider.prototype.qDescription;
 /** @type {boolean} */
EngineAPI.IOleDbProvider.prototype.qBit32;
/**
 * @record
 * @struct
 */
EngineAPI.IErrorData = function() {};
 /** @type {string} */
EngineAPI.IErrorData.prototype.qErrorString;
 /** @type {string} */
EngineAPI.IErrorData.prototype.qLineEnd;
 /** @type {string} */
EngineAPI.IErrorData.prototype.qLine;
 /** @type {string} */
EngineAPI.IErrorData.prototype.qErrorDataCode;
/**
 * @record
 * @struct
 */
EngineAPI.IProgressMessage = function() {};
 /** @type {number} */
EngineAPI.IProgressMessage.prototype.qMessageCode;
 /** @type {!Array<string>} */
EngineAPI.IProgressMessage.prototype.qMessageParameters;
/**
 * @record
 * @struct
 */
EngineAPI.IProgressData = function() {};
 /** @type {boolean} */
EngineAPI.IProgressData.prototype.qStarted;
 /** @type {boolean} */
EngineAPI.IProgressData.prototype.qFinished;
 /** @type {number} */
EngineAPI.IProgressData.prototype.qCompleted;
 /** @type {number} */
EngineAPI.IProgressData.prototype.qTotal;
 /** @type {number} */
EngineAPI.IProgressData.prototype.qKB;
 /** @type {number} */
EngineAPI.IProgressData.prototype.qMillisecs;
 /** @type {boolean} */
EngineAPI.IProgressData.prototype.qUserInteractionWanted;
 /** @type {string} */
EngineAPI.IProgressData.prototype.qPersistentProgress;
 /** @type {string} */
EngineAPI.IProgressData.prototype.qTransientProgress;
 /** @type {!Array<!EngineAPI.IErrorData>} */
EngineAPI.IProgressData.prototype.qErrorData;
 /** @type {!Array<!EngineAPI.IProgressMessage>} */
EngineAPI.IProgressData.prototype.qPersistentProgressMessages;
 /** @type {!EngineAPI.IProgressMessage} */
EngineAPI.IProgressData.prototype.qTransientProgressMessage;
/**
 * @record
 * @struct
 */
EngineAPI.INxStreamListEntry = function() {};
 /** @type {string} */
EngineAPI.INxStreamListEntry.prototype.qName;
 /** @type {string} */
EngineAPI.INxStreamListEntry.prototype.qId;
/**
 * @record
 * @struct
 */
EngineAPI.ICodePage = function() {};
 /** @type {number} */
EngineAPI.ICodePage.prototype.qNumber;
 /** @type {string} */
EngineAPI.ICodePage.prototype.qName;
 /** @type {string} */
EngineAPI.ICodePage.prototype.qDescription;
/**
 * @record
 * @struct
 */
EngineAPI.IFunction = function() {};
 /** @type {string} */
EngineAPI.IFunction.prototype.qName;
 /** @type {string} */
EngineAPI.IFunction.prototype.qGroup;
 /** @type {string} */
EngineAPI.IFunction.prototype.qSignature;
/**
 * @record
 * @struct
 */
EngineAPI.IGlobal = function() {};

/**
 * Sets an abort flag on all pending and ongoing requests in the current engine session.
 * If an abort flag is set on a pending request, the request is aborted.
 * If an abort flag is set on an ongoing request, the engine checks to see if it is possible to abort the request.
 * @return {!Promise<void>}
 */
EngineAPI.IGlobal.prototype.abortAll = function() {};

/**
 *
 * @return {!Promise<boolean>}
 */
EngineAPI.IGlobal.prototype.allowCreateApp = function() {};

/**
 * Indicates whether or not a user is able to create an app.
 * @return {!Promise<void>}
 */
EngineAPI.IGlobal.prototype.cancelReload = function() {};

/**
 * Cancels an ongoing reload. The reload of the app is stopped.
 * The indexation can be canceled and true is still the return value of the reload task.
 * @param {number} qRequestId
 * @return {!Promise<void>}
 */
EngineAPI.IGlobal.prototype.cancelRequest = function(qRequestId) {};

/**
 * Configures the engine's behavior during a reload.
 * 
 * Note: The ConfigureReload method should be run before the DoReload method.
 * Otherwise, the engine continues the script execution.
 * This parameter is relevant only if the variable ErrorMode is set to 1.
 * is returned in qErrorData by the GetProgress method.
 * the engine is waiting for an interaction to be performed. If the result from the interaction
 * is 1 (qDef.qResult is 1), the engine continues the script execution otherwise the execution is halted.
 * 
 * This parameter is relevant only if the variable ErrorMode is set to 1 and the script is run in
 * debug mode (qDebug is set to true when calling the DoReload method).
 * @param {boolean} qCancelOnScriptError
 * @param {boolean} qUseErrorData
 * @param {boolean} qInteractOnError
 * @return {!Promise<void>}
 */
EngineAPI.IGlobal.prototype.configureReload = function(qCancelOnScriptError, qUseErrorData, qInteractOnError) {};

/**
 * Copies an app that is in the Qlik Sense repository.
 * The engine copies the app into an app entity that was previously created by the repository. See the QRS API (REST API) help for more information.
 * 
 * Note: This operation is possible only in Qlik Sense Enterprise.
 * The app entity must have been previously created by the repository (via the REST API).
 * >> This parameter is mandatory.
 * >> This parameter is mandatory.
 * The list of all the objects in the app to be copied must be given. This list must contain the GUIDs of all these objects.
 * If the list of the QRS identifiers is empty, the CopyApp method copies all objects to the target app.
 * Script-defined variables are automatically copied when copying an app. To be able to copy variables not created via script,
 * the GUID of each variable must be provided in the list of QRS identifiers.
 * To get the QRS identifiers of the objects in an app, you can use the QRS API.
 * The GET method (from the QRS API) returns the identifiers of the objects in the app.
 * The following example returns the QRS identifiers of all the objects in a specified app:
 * GET /qrs/app/9c3f8634-6191-4a34-a114-a39102058d13
 * Where 9c3f8634-6191-4a34-a114-a39102058d13 is the identifier of the app.
 * Note: The operation is successful if qSuccess is set to true.
 * @param {string} qTargetAppId
 * @param {string} qSrcAppId
 * @param {!Array<string>} qIds
 * @return {!Promise<boolean>}
 */
EngineAPI.IGlobal.prototype.copyApp = function(qTargetAppId, qSrcAppId, qIds) {};

/**
 * Creates an app.
 * >> This parameter is mandatory.
 * >> This parameter is optional.
 * >> The default value is Main.
 * @param {string} qAppName
 * @param {string} qLocalizedScriptMainSection
 * @return {!Promise<?>}
 */
EngineAPI.IGlobal.prototype.createApp = function(qAppName, qLocalizedScriptMainSection) {};

/**
 * Creates an app and opens an engine session.
 * This operation is possible only in Qlik Sense Desktop.
 * >> This parameter is mandatory.
 * >> This parameter is optional.
 * >> This parameter is optional.
 * >> This parameter is optional.
 * >> This parameter is optional.
 * >> The default value is Main.
 * @param {string} qDocName
 * @param {string=} qUserName
 * @param {string=} qPassword
 * @param {string=} qSerial
 * @param {string=} qLocalizedScriptMainSection
 * @return {!Promise<!EngineAPI.IApp>}
 */
EngineAPI.IGlobal.prototype.createDocEx = function(qDocName, qUserName, qPassword, qSerial, qLocalizedScriptMainSection) {};

/**
 * Creates an empty session app.
 * The following applies:
 * 
 * The name of a session app cannot be chosen. The engine automatically assigns a unique identifier to the session app.
 * A session app is not persisted and cannot be saved. Everything created during a session app is non-persisted;
 * for example: objects, data connections.
 * @return {!Promise<!EngineAPI.IApp>}
 */
EngineAPI.IGlobal.prototype.createSessionApp = function() {};

/**
 * Creates a session app from a source app.
 * The following applies:
 * 
 * - The objects in the source app are copied into the session app but contain no data.
 * - The script of the session app can be edited and reloaded.
 * - The name of a session app cannot be chosen. The engine automatically assigns a unique identifier to the session app.
 * - A session app is not persisted and cannot be saved. Everything created during a session app is non-persisted;
 *   for example: objects, data connections.
 * It corresponds to qAppId returned by the CreateApp method when creating the source app.
 * This parameter is mandatory.
 * @param {string} qSrcAppId
 * @return {!Promise<!EngineAPI.IApp>}
 */
EngineAPI.IGlobal.prototype.createSessionAppFromApp = function(qSrcAppId) {};

/**
 * Deletes an app from the Qlik Sense repository or from the file system.
 * 
 * -- Qlik Sense Enterprise --
 * In addition to being removed from the repository, the app is removed from the directory as well:
 * <installation_directory>\Qlik\Sense\Apps
 * The default installation directory is ProgramData.
 * 
 * -- Qlik Sense Desktop --
 * The app is deleted from the directory %userprofile%\Documents\Qlik\Sense\Apps.
 * In Qlik Sense Enterprise, the identifier of the app is a GUID in the Qlik Sense repository.
 * In Qlik Sense Desktop, the identifier of the app is the name of the app,
 * as defined in the apps folder %userprofile%\Documents\Qlik\Sense\Apps.
 * >> This parameter is mandatory.
 * 
 * Note: The operation is successful if qSuccess is set to true.
 * @param {string} qAppId
 * @return {!Promise<boolean>}
 */
EngineAPI.IGlobal.prototype.deleteApp = function(qAppId) {};

/**
 * Exports an app from the Qlik Sense repository to the file system.
 * 
 * Note: This operation is possible only in Qlik Sense Enterprise.
 * >> This parameter is mandatory.
 * The identifier is a GUID from the Qlik Sense repository.
 * >> This parameter is mandatory.
 * The list of all the objects in the app to be exported must be given.
 * This list must contain the GUIDs of all these objects.
 * @param {string} qTargetPath
 * @param {string} qSrcAppId
 * @param {!Array<string>} qIds
 * @return {!Promise<boolean>}
 */
EngineAPI.IGlobal.prototype.exportApp = function(qTargetPath, qSrcAppId, qIds) {};

/**
 * Returns the handle of the current app.
 * 
 * Note: If no app is opened, an error message is returned:
 * For example code: 1007 and No active document and App invalid
 * @return {!Promise<(string|!EngineAPI.IApp)>}
 */
EngineAPI.IGlobal.prototype.getActiveDoc = function() {};

/**
 * Retrieves the meta data of an app.
 * One of:
 *           - Path and name of the app (Qlik Sense Desktop)
 *           - GUID (Qlik Sense Enterprise)
 * 
 * >> This parameter is mandatory.
 * @param {string} qAppID
 * @return {!Promise<!EngineAPI.IAppEntry>}
 */
EngineAPI.IGlobal.prototype.getAppEntry = function(qAppID) {};

/**
 * Retrieves information about the authenticated user.
 * @return {!Promise<string>}
 */
EngineAPI.IGlobal.prototype.getAuthenticatedUser = function() {};

/**
 * @deprecated since version 12.20.0
 * Returns a set of rules defining the Qlik Sense scripting language grammar.
 * These rules define the syntax for the script statements and the script or chart functions.
 * 
 * Note: A way to retrieve the list of script statements, script functions or chart functions is to call the GetBNF method.
 * 
 * -- Terminology --
 * BNF stands for Backus-Naur Form.
 * A token is a string of one or more characters that is significant as a group.
 * For example, a token can be a function name, a parenthesis '('.
 * - the script statements and the script functions if qBnfType is set to S.
 * - the chart functions if qBnfType is set to E.
 * @param {string} qBnfType
 * @return {!Promise<!EngineAPI.IBNFDef>}
 */
EngineAPI.IGlobal.prototype.getBNF = function(qBnfType) {};

/**
 * Returns a set of rules defining the Qlik Sense scripting language grammar.
 * These rules define the syntax for the script statements and the script or chart functions.
 * 
 * Note: A way to retrieve the list of script statements, script functions or chart functions is to call the GetBNF method.
 * 
 * --Terminology --
 * BNF stands for Backus- Naur Form.
 * A token is a string of one or more characters that is significant as a group.
 * For example, a token can be a function name, a parenthesis '('.
 * - the script statements and the script functions if qBnfType is set to S.
 * - the chart functions if qBnfType is set to E.
 * @param {string} qBnfType
 * @return {!Promise<!EngineAPI.IBNFDefResult>}
 */
EngineAPI.IGlobal.prototype.getBaseBNF = function(qBnfType) {};

/**
 * Gets a string hash calculated from the current Backus-Naur Form (BNF) grammar
 * of the Qlik engine scripting language. If the hash changes between subsequent
 * calls to this method, this indicates that the BNF grammar has changed.
 * 
 * - the script statements and the script functions if qBnfType is set to S.
 * - the chart functions if qBnfType is set to E.
 * @param {string} qBnfType
 * @return {!Promise<{qBnfHash: string}>}
 */
EngineAPI.IGlobal.prototype.getBaseBNFHash = function(qBnfType) {};

/**
 * List the custom connectors available in the system.
 * This parameter is optional and the default value is false.
 * If set to false, only the connectors that were returned the previous time are returned.
 * If new connectors have been added since the last call to the GetCustomConnectors method was made,
 * the new connectors are not returned.
 * If set to true, the GetCustomConnectors method looks for new connectors in the file system.
 * @param {boolean} qReloadList
 * @return {!Promise<!Array<!EngineAPI.ICustomConnector>>}
 */
EngineAPI.IGlobal.prototype.getCustomConnectors = function(qReloadList) {};

/**
 * Lists the databases in a ODBC, OLEDB or CUSTOM data source.
 * @param {!EngineAPI.IConnection} qConnection
 * @return {!Promise<!Array<!EngineAPI.IDatabase>>}
 */
EngineAPI.IGlobal.prototype.getDatabasesFromConnectionString = function(qConnection) {};

/**
 * Returns the folder where the apps are stored.
 * 
 * Note: This method applies only if running Qlik Sense Desktop.
 * @return {!Promise<string>}
 */
EngineAPI.IGlobal.prototype.getDefaultAppFolder = function() {};

/**
 * Returns the list of apps.
 * -- In Qlik Sense Enterprise:
 * The list is generated by the QRS. The GetDocList method only returns documents the current user is allowed to access.
 * -- In Qlik Sense Desktop:
 * The apps are located in C:\Users\<user name>\Documents\Qlik\Sense\Apps.
 * @return {!Promise<!EngineAPI.IDocListEntry>}
 */
EngineAPI.IGlobal.prototype.getDocList = function() {};

/**
 * Returns the files and folders located at a specified path.
 * Relative paths are relative to the default Apps folder.
 * 
 * In Qlik Sense Enterprise:
 * The list is generated by the QRS. The GetDocList method only returns documents the current user is allowed to access.
 * 
 * In Qlik Sense Desktop:
 * The apps are located in C:\Users\<user name>\Documents\Qlik\Sense\Apps.
 * @param {string} qPath
 * @return {!Promise<!EngineAPI.IFolderItem>}
 */
EngineAPI.IGlobal.prototype.getFolderItemsForPath = function(qPath) {};

/**
 * Gets the list of all the script functions.
 * >> This parameter is optional.
 * >> Default is all groups.
 * @param {string=} qGroup
 * @return {!Promise<!EngineAPI.IFunction>}
 */
EngineAPI.IGlobal.prototype.getFunctions = function(qGroup) {};

/**
 * Retrieves information on the user interaction that is requested by the engine.
 * Engine can request user interactions only during script reload and when the reload is performed in debug mode
 * (qDebug is set to true when using the DoReload method).
 * When running reload in debug mode, the engine pauses the script execution to receive data about user interaction.
 * 
 * The engine can pause:
 * - before executing a new script statement
 * - when an error occurs while executing the script
 * - when the script execution is finished.
 * 
 * To know if the engine is paused and waits for a response to an interaction request,
 * the GetProgress method should be used. The engine waits for a response if the property qUserInteractionWanted
 * is set to true in the response of the GetProgress request.
 * Corresponds to the identifier of the DoReload request.
 * @param {number} qRequestId
 * @return {!Promise<!EngineAPI.IInteractDef>}
 */
EngineAPI.IGlobal.prototype.getInteract = function(qRequestId) {};

/**
 * Lists the logical drives in the system.
 * 
 * Note: This method applies only if running Qlik Sense Desktop.
 * @return {!Promise<!Array<!EngineAPI.IDriveInfo>>}
 */
EngineAPI.IGlobal.prototype.getLogicalDriveStrings = function() {};

/**
 * Returns the list of the ODBC connectors that are installed in the system.
 * @return {!Promise<!Array<!EngineAPI.IOdbcDsn>>}
 */
EngineAPI.IGlobal.prototype.getOdbcDsns = function() {};

/**
 * Returns the list of the OLEDB providers installed on the system.
 * @return {!Promise<!Array<!EngineAPI.IOleDbProvider>>}
 */
EngineAPI.IGlobal.prototype.getOleDbProviders = function() {};

/**
 * Gives information about the progress of the DoReload and DoSave calls.
 * 
 * Note: For more information on DoReload and DoSave, see the DoReload method and DoSave method.
 * Complete information is returned if the identifier of the request is given.
 * If the identifier is 0, less information is given. Progress messages and
 * error messages are returned but information like when the request started and finished is not returned.
 * @param {number} qRequestId
 * @return {!Promise<!EngineAPI.IProgressData>}
 */
EngineAPI.IGlobal.prototype.getProgress = function(qRequestId) {};

/**
 * Lists the streams.
 * 
 * Note: This method is deprecated (not recommended to use).
 * Use general purpose endpoint in QRS API: GET qrs/stream/ instead.
 * @return {!Promise<!Array<!EngineAPI.INxStreamListEntry>>}
 */
EngineAPI.IGlobal.prototype.getStreamList = function() {};

/**
 * Lists the supported code pages.
 * @return {!Promise<!Array<!EngineAPI.ICodePage>>}
 */
EngineAPI.IGlobal.prototype.getSupportedCodePages = function() {};

/**
 * Returns the unique identifier of the endpoint for the current user in the current app.
 * 
 * Note: This unique identifier can be used for logging purposes.
 * This identifier is unique.
 * @return {!Promise<string>}
 */
EngineAPI.IGlobal.prototype.getUniqueID = function() {};

/**
 * Informs the engine that a user interaction (which was earlier requested by the engine)
 * was performed and indicates the engine what to do next.
 * Corresponds to the identifier of the DoReload request.
 * @param {number} qRequestId
 * @param {!EngineAPI.IInteractDef} qDef
 * @return {!Promise<void>}
 */
EngineAPI.IGlobal.prototype.interactDone = function(qRequestId, qDef) {};

/**
 * Indicates whether the user is working in Qlik Sense Desktop.
 * @return {!Promise<boolean>}
 */
EngineAPI.IGlobal.prototype.isDesktopMode = function() {};

/**
 * Indicates whether or not the user is working in personal mode (Qlik Sense Desktop).
 * 
 * Note: This method is deprecated.
 * @return {!Promise<boolean>}
 */
EngineAPI.IGlobal.prototype.isPersonalMode = function() {};

/**
 * Checks if a connection string is valid.
 * @param {!EngineAPI.IConnection} qConnection
 * @return {!Promise<boolean>}
 */
EngineAPI.IGlobal.prototype.isValidConnectionString = function(qConnection) {};

/**
 * Opens an app and checks if the app needs to be migrated (if the app is deprecated).
 * The OpenDoc method compares the version of the app with the version of Qlik Sense and
 * migrates the app to the current version of Qlik Sense if necessary. Once the migration is done, the app is opened.
 * If no migration is needed, the app is opened immediately.
 * The following applies:
 * 
 * - The app version is lower than 0.95: no migration is done. Apps older than the version 0.95 are not supported.
 * - The app version is at least 0.95 and less than the Qlik Sense version: the app is migrated and then opened.
 * - Qlik Sense and the app have the same version: the app is opened, no migration is needed.
 * 
 * Note: If the app is read-only, the app migration cannot occur. An error message is sent.
 * 
 * -- Backups --
 * In Qlik Sense Desktop, apps are automatically backed up before a migration.
 * The backup files are located in %userprofile%\Documents\Qlik\Sense\AppsBackup\<Qlik Sense Desktop version>.
 * In Qlik Sense Enterprise, no automatic back up is run. The back up should be done manually.
 * >> This parameter is optional.
 * >> This parameter is optional.
 * >> This parameter is optional.
 * When this parameter is set to true, the objects in the app are present but contain no data.
 * The script can be edited and reloaded.
 * >> This parameter is optional
 * >> The default value is false.
 * @param {string} qDocName
 * @param {string=} qUserName
 * @param {string=} qPassword
 * @param {string=} qSerial
 * @param {boolean=} qNoData
 * @return {!Promise<!EngineAPI.IApp>}
 */
EngineAPI.IGlobal.prototype.openDoc = function(qDocName, qUserName, qPassword, qSerial, qNoData) {};

/**
 * Returns the name of the operating system.
 * @return {!Promise<string>}
 */
EngineAPI.IGlobal.prototype.oSName = function() {};

/**
 * Returns the version number of the operating system.
 * @return {!Promise<string>}
 */
EngineAPI.IGlobal.prototype.oSVersion = function() {};

/**
 * @deprecated since version 12.20.0
 * Returns the Qlik Sense version number.
 * @return {!Promise<string>}
 */
EngineAPI.IGlobal.prototype.productVersion = function() {};

/**
 * Returns the Qlik product name.
 * @return {!Promise<string>}
 */
EngineAPI.IGlobal.prototype.qTProduct = function() {};

/**
 * Returns the Qlik Sense version number.
 * 
 * Note: This method is deprecated (not recommended to use). Use ProductVersion method instead.
 * @return {!Promise<string>}
 */
EngineAPI.IGlobal.prototype.qvVersion = function() {};

/**
 * Reloads the list of extensions.
 * @return {!Promise<void>}
 */
EngineAPI.IGlobal.prototype.reloadExtensionList = function() {};

/**
 * Replaces an app with the objects from a source app.
 * The list of objects in the app to be replaced must be defined in qIds.
 * Note: The data model of the app cannot be updated.
 * Note: This operation is possible only in Qlik Sense Enterprise.
 * The target app is the app to be replaced.
 * >> This parameter is mandatory.
 * The objects in the source app will replace the objects in the target app.
 * >> This parameter is mandatory.
 * Only QRS-approved GUIDs are applicable.
 * An object that is QRS-approved, is for example an object that has been published (i.e not private anymore).
 * If an object is private, it should not be included in this list.
 * If qIds is empty, the engine automatically creates a list that contains all QRS-approved objects.
 * If the array of identifiers contains objects that are not present in the source app,
 * the objects related to these identifiers are removed from the target app.
 * @param {string} qTargetAppId
 * @param {string} qSrcAppID
 * @param {!Array<string>} qIds
 * @return {!Promise<boolean>}
 */
EngineAPI.IGlobal.prototype.replaceAppFromID = function(qTargetAppId, qSrcAppID, qIds) {};

/**
 * Shuts down the Qlik engine.
 * 
 * Note: This operation is possible only in Qlik Sense Desktop.
 * @return {!Promise<void>}
 */
EngineAPI.IGlobal.prototype.shutdownProcess = function() {};
/**
 * @record
 * @struct
 */
EngineAPI.INxAttrExprInfo = function() {};
 /** @type {number} */
EngineAPI.INxAttrExprInfo.prototype.qMin;
 /** @type {number} */
EngineAPI.INxAttrExprInfo.prototype.qMax;
 /** @type {boolean} */
EngineAPI.INxAttrExprInfo.prototype.qContinuousAxes;
 /** @type {boolean} */
EngineAPI.INxAttrExprInfo.prototype.qIsCyclic;
 /** @type {string} */
EngineAPI.INxAttrExprInfo.prototype.qFallbackTitle;
/**
 * @record
 * @struct
 */
EngineAPI.INxStateCounts = function() {};
 /** @type {number} */
EngineAPI.INxStateCounts.prototype.qLocked;
 /** @type {number} */
EngineAPI.INxStateCounts.prototype.qSelected;
 /** @type {number} */
EngineAPI.INxStateCounts.prototype.qOption;
 /** @type {number} */
EngineAPI.INxStateCounts.prototype.qDeselected;
 /** @type {number} */
EngineAPI.INxStateCounts.prototype.qAlternative;
 /** @type {number} */
EngineAPI.INxStateCounts.prototype.qExcluded;
 /** @type {number} */
EngineAPI.INxStateCounts.prototype.qSelectedExcluded;
 /** @type {number} */
EngineAPI.INxStateCounts.prototype.qLockedExcluded;
/**
 * @record
 * @struct
 */
EngineAPI.INxDimensionInfo = function() {};
 /** @type {string} */
EngineAPI.INxDimensionInfo.prototype.qFallbackTitle;
 /** @type {number} */
EngineAPI.INxDimensionInfo.prototype.qApprMaxGlyphCount;
 /** @type {number} */
EngineAPI.INxDimensionInfo.prototype.qCardinal;
 /** @type {boolean} */
EngineAPI.INxDimensionInfo.prototype.qLocked;
 /** @type {string} */
EngineAPI.INxDimensionInfo.prototype.qSortIndicator;
 /** @type {!Array<string>} */
EngineAPI.INxDimensionInfo.prototype.qGroupFallbackTitles;
 /** @type {number} */
EngineAPI.INxDimensionInfo.prototype.qGroupPos;
 /** @type {!EngineAPI.INxStateCounts} */
EngineAPI.INxDimensionInfo.prototype.qStateCounts;
 /** @type {!Array<string>} */
EngineAPI.INxDimensionInfo.prototype.qTags;
 /** @type {!EngineAPI.INxValidationError} */
EngineAPI.INxDimensionInfo.prototype.qError;
 /** @type {string} */
EngineAPI.INxDimensionInfo.prototype.qDimensionType;
 /** @type {boolean} */
EngineAPI.INxDimensionInfo.prototype.qReverseSort;
 /** @type {string} */
EngineAPI.INxDimensionInfo.prototype.qGrouping;
 /** @type {boolean} */
EngineAPI.INxDimensionInfo.prototype.qIsSemantic;
 /** @type {string} */
EngineAPI.INxDimensionInfo.prototype.qNumFormat;
 /** @type {boolean} */
EngineAPI.INxDimensionInfo.prototype.qIsAutoFormat;
 /** @type {!Array<string>} */
EngineAPI.INxDimensionInfo.prototype.qGroupFieldDefs;
 /** @type {!EngineAPI.INxAttrExprInfo} */
EngineAPI.INxDimensionInfo.prototype.qAttrExprInfo;
 /** @type {number} */
EngineAPI.INxDimensionInfo.prototype.qMin;
 /** @type {number} */
EngineAPI.INxDimensionInfo.prototype.qMax;
 /** @type {boolean} */
EngineAPI.INxDimensionInfo.prototype.qContinuousAxes;
 /** @type {boolean} */
EngineAPI.INxDimensionInfo.prototype.qIsCyclic;
 /** @type {boolean} */
EngineAPI.INxDimensionInfo.prototype.qDerivedField;
 /** @type {!EngineAPI.INxAttrDimInfo} */
EngineAPI.INxDimensionInfo.prototype.qAttrDimInfo;
/**
 * @record
 * @struct
 */
EngineAPI.INxAttrDimInfo = function() {};
 /** @type {number} */
EngineAPI.INxAttrDimInfo.prototype.qCardinal;
 /** @type {number} */
EngineAPI.INxAttrDimInfo.prototype.qSize;
 /** @type {string} */
EngineAPI.INxAttrDimInfo.prototype.qFallbackTitle;
 /** @type {boolean} */
EngineAPI.INxAttrDimInfo.prototype.qLocked;
 /** @type {!EngineAPI.INxValidationError} */
EngineAPI.INxAttrDimInfo.prototype.qError;
/**
 * @record
 * @struct
 */
EngineAPI.INxValidationError = function() {};
 /** @type {number} */
EngineAPI.INxValidationError.prototype.qErrorCode;
 /** @type {string} */
EngineAPI.INxValidationError.prototype.qContext;
 /** @type {string} */
EngineAPI.INxValidationError.prototype.qExtendedMessage;
/**
 * @record
 * @struct
 */
EngineAPI.INxMeasureInfo = function() {};
 /** @type {string} */
EngineAPI.INxMeasureInfo.prototype.qFallbackTitle;
 /** @type {number} */
EngineAPI.INxMeasureInfo.prototype.qApprMaxGlyphCount;
 /** @type {number} */
EngineAPI.INxMeasureInfo.prototype.qCardinal;
 /** @type {string} */
EngineAPI.INxMeasureInfo.prototype.qSortIndicator;
 /** @type {!EngineAPI.IFieldAttributes} */
EngineAPI.INxMeasureInfo.prototype.qNumFormat;
 /** @type {boolean} */
EngineAPI.INxMeasureInfo.prototype.qIsAutoFormat;
 /** @type {number} */
EngineAPI.INxMeasureInfo.prototype.qMin;
 /** @type {number} */
EngineAPI.INxMeasureInfo.prototype.qMax;
 /** @type {!EngineAPI.INxValidationError} */
EngineAPI.INxMeasureInfo.prototype.qError;
 /** @type {boolean} */
EngineAPI.INxMeasureInfo.prototype.qReverseSort;
 /** @type {!Array<!EngineAPI.INxAttrExprInfo>} */
EngineAPI.INxMeasureInfo.prototype.qAttrExprInfo;
 /** @type {!Array<!EngineAPI.INxMeasureInfo>} */
EngineAPI.INxMeasureInfo.prototype.qAttrDimInfo;
/**
 * @record
 * @struct
 */
EngineAPI.INxInlineDimensionDef = function() {};
 /** @type {string} */
EngineAPI.INxInlineDimensionDef.prototype.qGrouping;
 /** @type {!Array<string>} */
EngineAPI.INxInlineDimensionDef.prototype.qFieldDefs;
 /** @type {!Array<string>} */
EngineAPI.INxInlineDimensionDef.prototype.qFieldLabels;
 /** @type {!EngineAPI.ISortCriteria} */
EngineAPI.INxInlineDimensionDef.prototype.qSortCriterias;
 /** @type {!Array<!EngineAPI.IFieldAttributes>} */
EngineAPI.INxInlineDimensionDef.prototype.qNumberPresentations;
 /** @type {boolean} */
EngineAPI.INxInlineDimensionDef.prototype.qReverseSort;
 /** @type {number} */
EngineAPI.INxInlineDimensionDef.prototype.qActiveField;
/**
 * @extends {EngineAPI.INxInlineDimensionDef}
 * @record
 * @struct
 */
EngineAPI.IHyperCubeDimensionqDef = function() {};
 /** @type {boolean} */
EngineAPI.IHyperCubeDimensionqDef.prototype.autoSort;
 /** @type {string} */
EngineAPI.IHyperCubeDimensionqDef.prototype.cId;
 /** @type {!EngineAPI.IStringExpressionContainer} */
EngineAPI.IHyperCubeDimensionqDef.prototype.othersLabel;
/**
 * @record
 * @struct
 */
EngineAPI.IOtherTotalSpecProp = function() {};
 /** @type {string} */
EngineAPI.IOtherTotalSpecProp.prototype.qOtherMode;
 /** @type {string} */
EngineAPI.IOtherTotalSpecProp.prototype.qOtherCounted;
 /** @type {string} */
EngineAPI.IOtherTotalSpecProp.prototype.qOtherLimit;
 /** @type {string} */
EngineAPI.IOtherTotalSpecProp.prototype.qOtherLimitMode;
 /** @type {boolean} */
EngineAPI.IOtherTotalSpecProp.prototype.qSuppressOther;
 /** @type {boolean} */
EngineAPI.IOtherTotalSpecProp.prototype.qForceBadValueKeeping;
 /** @type {boolean} */
EngineAPI.IOtherTotalSpecProp.prototype.qApplyEvenWhenPossiblyWrongResult;
 /** @type {boolean} */
EngineAPI.IOtherTotalSpecProp.prototype.qGlobalOtherGrouping;
 /** @type {boolean} */
EngineAPI.IOtherTotalSpecProp.prototype.qOtherCollapseInnerDimensions;
 /** @type {string} */
EngineAPI.IOtherTotalSpecProp.prototype.qOtherSortMode;
 /** @type {string} */
EngineAPI.IOtherTotalSpecProp.prototype.qTotalMode;
 /** @type {string} */
EngineAPI.IOtherTotalSpecProp.prototype.qReferencedExpression;
/**
 * @record
 * @struct
 */
EngineAPI.INxAttrExprDef = function() {};
 /** @type {string} */
EngineAPI.INxAttrExprDef.prototype.qExpression;
 /** @type {string} */
EngineAPI.INxAttrExprDef.prototype.qLibraryId_;
/**
 * @record
 * @struct
 */
EngineAPI.INxAttrDimDef = function() {};
 /** @type {string} */
EngineAPI.INxAttrDimDef.prototype.qDef;
 /** @type {string} */
EngineAPI.INxAttrDimDef.prototype.qLibraryId;
 /** @type {!EngineAPI.ISortCriteria} */
EngineAPI.INxAttrDimDef.prototype.qSortBy;
/**
 * @record
 * @struct
 */
EngineAPI.INxDimension = function() {};
 /** @type {string} */
EngineAPI.INxDimension.prototype.qLibraryId;
 /** @type {!EngineAPI.INxInlineDimensionDef} */
EngineAPI.INxDimension.prototype.qDef;
 /** @type {boolean} */
EngineAPI.INxDimension.prototype.qNullSuppression;
 /** @type {!EngineAPI.IOtherTotalSpecProp} */
EngineAPI.INxDimension.prototype.qOtherTotalSpec;
 /** @type {boolean} */
EngineAPI.INxDimension.prototype.qShowAll;
 /** @type {!EngineAPI.IStringExpressionContainer} */
EngineAPI.INxDimension.prototype.qOtherLabel;
 /** @type {!EngineAPI.IStringExpressionContainer} */
EngineAPI.INxDimension.prototype.qTotalLabel;
 /** @type {!EngineAPI.IValueExpr} */
EngineAPI.INxDimension.prototype.qCalcCond;
 /** @type {!Array<!EngineAPI.INxAttrExprDef>} */
EngineAPI.INxDimension.prototype.qAttributeExpressions;
 /** @type {!Array<!EngineAPI.INxAttrDimDef>} */
EngineAPI.INxDimension.prototype.qAttributeDimensions;
 /** @type {boolean} */
EngineAPI.INxDimension.prototype.qIncludeElemValue;
 /** @type {boolean} */
EngineAPI.INxDimension.prototype.qShowTotal;
/**
 * @record
 * @struct
 */
EngineAPI.INxCellPosition = function() {};
 /** @type {number} */
EngineAPI.INxCellPosition.prototype.qx;
 /** @type {number} */
EngineAPI.INxCellPosition.prototype.qy;
/**
 * @record
 * @struct
 */
EngineAPI.IValueExpr = function() {};
 /** @type {string} */
EngineAPI.IValueExpr.prototype.qv;
/**
 * @record
 * @struct
 */
EngineAPI.ISortCriteria = function() {};
 /** @type {string} */
EngineAPI.ISortCriteria.prototype.qSortByState;
 /** @type {string} */
EngineAPI.ISortCriteria.prototype.qSortByFrequency;
 /** @type {string} */
EngineAPI.ISortCriteria.prototype.qSortByNumeric;
 /** @type {string} */
EngineAPI.ISortCriteria.prototype.qSortByAscii;
 /** @type {string} */
EngineAPI.ISortCriteria.prototype.qSortByLoadOrder;
 /** @type {string} */
EngineAPI.ISortCriteria.prototype.qSortByExpression;
 /** @type {!EngineAPI.IValueExpr} */
EngineAPI.ISortCriteria.prototype.qExpression;
 /** @type {string} */
EngineAPI.ISortCriteria.prototype.qSortByGreyness;
/**
 * @record
 * @struct
 */
EngineAPI.IStringExpressionContainer = function() {};
 /** @type {string} */
EngineAPI.IStringExpressionContainer.prototype.qStringExpression;
/**
 * @record
 * @struct
 */
EngineAPI.ICustomErrorMessage = function() {};
 /** @type {string} */
EngineAPI.ICustomErrorMessage.prototype.calcCond;
/**
 * @record
 * @struct
 */
EngineAPI.INxMeasure = function() {};
 /** @type {string} */
EngineAPI.INxMeasure.prototype.qLibraryId;
 /** @type {!EngineAPI.INxInlineMeasureDef} */
EngineAPI.INxMeasure.prototype.qDef;
 /** @type {!EngineAPI.ISortCriteria} */
EngineAPI.INxMeasure.prototype.qSortBy;
 /** @type {!Array<!EngineAPI.INxAttrExprDef>} */
EngineAPI.INxMeasure.prototype.qAttributeExpressions;
 /** @type {!EngineAPI.IValueExpr} */
EngineAPI.INxMeasure.prototype.qCalcCond;
 /** @type {!Array<!EngineAPI.INxAttrDimDef>} */
EngineAPI.INxMeasure.prototype.qAttributeDimensions;
/**
 * @record
 * @struct
 */
EngineAPI.INxInlineMeasureDef = function() {};
 /** @type {string} */
EngineAPI.INxInlineMeasureDef.prototype.qLabel;
 /** @type {string} */
EngineAPI.INxInlineMeasureDef.prototype.qLabelExpression;
 /** @type {string} */
EngineAPI.INxInlineMeasureDef.prototype.qDescription;
 /** @type {!Array<string>} */
EngineAPI.INxInlineMeasureDef.prototype.qTags;
 /** @type {string} */
EngineAPI.INxInlineMeasureDef.prototype.qGrouping;
 /** @type {string} */
EngineAPI.INxInlineMeasureDef.prototype.qDef;
 /** @type {!EngineAPI.IFieldAttributes} */
EngineAPI.INxInlineMeasureDef.prototype.qNumFormat;
 /** @type {boolean} */
EngineAPI.INxInlineMeasureDef.prototype.qRelative;
 /** @type {boolean} */
EngineAPI.INxInlineMeasureDef.prototype.qBrutalSum;
 /** @type {string} */
EngineAPI.INxInlineMeasureDef.prototype.qAggrFunc;
 /** @type {number} */
EngineAPI.INxInlineMeasureDef.prototype.qAccumulate;
 /** @type {boolean} */
EngineAPI.INxInlineMeasureDef.prototype.qReverseSort;
 /** @type {number} */
EngineAPI.INxInlineMeasureDef.prototype.qActiveExpression;
 /** @type {!Array<string>} */
EngineAPI.INxInlineMeasureDef.prototype.qExpressions;
/**
 * @extends {EngineAPI.INxInlineMeasureDef}
 * @record
 * @struct
 */
EngineAPI.IHyperCubeMeasureqDef = function() {};
 /** @type {boolean} */
EngineAPI.IHyperCubeMeasureqDef.prototype.autoSort;
 /** @type {string} */
EngineAPI.IHyperCubeMeasureqDef.prototype.cId;
 /** @type {boolean} */
EngineAPI.IHyperCubeMeasureqDef.prototype.numFormatFromTemplate;
/**
 * @extends {EngineAPI.INxMeasure}
 * @record
 * @struct
 */
EngineAPI.IHyperCubeMeasureDef = function() {};
 /** @type {!EngineAPI.IHyperCubeMeasureqDef} */
EngineAPI.IHyperCubeMeasureDef.prototype.qDef;
/**
 * @record
 * @struct
 */
EngineAPI.INxPivotValuePoint = function() {};
 /** @type {string} */
EngineAPI.INxPivotValuePoint.prototype.qLabel;
 /** @type {string} */
EngineAPI.INxPivotValuePoint.prototype.qText;
 /** @type {number} */
EngineAPI.INxPivotValuePoint.prototype.qNum;
 /** @type {string} */
EngineAPI.INxPivotValuePoint.prototype.qType;
 /** @type {!EngineAPI.INxAttributeExpressionValues} */
EngineAPI.INxPivotValuePoint.prototype.qAttrExps;
/**
 * @record
 * @struct
 */
EngineAPI.INxContainerEntry = function() {};
 /** @type {!EngineAPI.INxInfo} */
EngineAPI.INxContainerEntry.prototype.qInfo;
 /** @type {!EngineAPI.INxMeta} */
EngineAPI.INxContainerEntry.prototype.qMeta;
 /** @type {T} */
EngineAPI.INxContainerEntry.prototype.qData;
/**
 * @extends {EngineAPI.IGenericObject}
 * @record
 * @struct
 */
EngineAPI.IGenericObjectPrototype = function() {};

/**
 * @return {!Promise<L>}
 */
EngineAPI.IGenericObjectPrototype.prototype.getLayout = function() {};

/**
 * @return {!Promise<P>}
 */
EngineAPI.IGenericObjectPrototype.prototype.getProperties = function() {};

/**
 * @param {P} properties
 * @return {!Promise<void>}
 */
EngineAPI.IGenericObjectPrototype.prototype.setProperties = function(properties) {};
/**
 * @record
 * @struct
 */
EngineAPI.IAppObjectPrototype = function() {};

/**
 * @param {P} qProp
 * @return {!Promise<O>}
 */
EngineAPI.IAppObjectPrototype.prototype.createObject = function(qProp) {};

/**
 * @param {P} qProp
 * @return {!Promise<O>}
 */
EngineAPI.IAppObjectPrototype.prototype.createSessionObject = function(qProp) {};
/**
 * @record
 * @struct
 */
EngineAPI.IListObject = function() {};
 /** @type {string} */
EngineAPI.IListObject.prototype.qStateName;
 /** @type {!EngineAPI.ISize} */
EngineAPI.IListObject.prototype.qSize;
 /** @type {!EngineAPI.INxValidationError} */
EngineAPI.IListObject.prototype.qError;
 /** @type {!EngineAPI.INxDimensionInfo} */
EngineAPI.IListObject.prototype.qDimensionInfo;
 /** @type {!Array<!EngineAPI.INxListObjectExpression>} */
EngineAPI.IListObject.prototype.qExpressions;
 /** @type {!Array<!EngineAPI.INxDataPage>} */
EngineAPI.IListObject.prototype.qDataPages;
/**
 * @record
 * @struct
 */
EngineAPI.INxListObjectExpression = function() {};
 /** @type {string} */
EngineAPI.INxListObjectExpression.prototype.qExpr;
 /** @type {!EngineAPI.INxLayoutErrors} */
EngineAPI.INxListObjectExpression.prototype.qError;
/**
 * @extends {EngineAPI.IGenericBaseLayout}
 * @record
 * @struct
 */
EngineAPI.IGenericListLayout = function() {};
 /** @type {!EngineAPI.IListObject} */
EngineAPI.IGenericListLayout.prototype.qListObject;
/**
 * @record
 * @struct
 */
EngineAPI.INxAutoSortByStateDef = function() {};
 /** @type {number} */
EngineAPI.INxAutoSortByStateDef.prototype.qDisplayNumberOfRows;
/**
 * @record
 * @struct
 */
EngineAPI.INxListObjectExpressionDef = function() {};
 /** @type {string} */
EngineAPI.INxListObjectExpressionDef.prototype.qExpr;
 /** @type {string} */
EngineAPI.INxListObjectExpressionDef.prototype.qLibraryId;
/**
 * @record
 * @struct
 */
EngineAPI.IListObjectDef = function() {};
 /** @type {string} */
EngineAPI.IListObjectDef.prototype.qStateName;
 /** @type {string} */
EngineAPI.IListObjectDef.prototype.qLibraryId;
 /** @type {!EngineAPI.INxInlineDimensionDef} */
EngineAPI.IListObjectDef.prototype.qDef;
 /** @type {!EngineAPI.INxAutoSortByStateDef} */
EngineAPI.IListObjectDef.prototype.qAutoSortByState;
 /** @type {string} */
EngineAPI.IListObjectDef.prototype.qFrequencyMode;
 /** @type {boolean} */
EngineAPI.IListObjectDef.prototype.qShowAlternatives;
 /** @type {!Array<!EngineAPI.INxPage>} */
EngineAPI.IListObjectDef.prototype.qInitialDataFetch;
 /** @type {!Array<!EngineAPI.INxListObjectExpressionDef>} */
EngineAPI.IListObjectDef.prototype.qExpressions;
/**
 * @extends {EngineAPI.IGenericProperties}
 * @record
 * @struct
 */
EngineAPI.IGenericListProperties = function() {};
 /** @type {!EngineAPI.IListObjectDef} */
EngineAPI.IGenericListProperties.prototype.qListObjectDef;
/**
 * @extends {EngineAPI.IGenericObjectPrototype}
 * @record
 * @struct
 */
EngineAPI.IGenericList = function() {};

/**
 * @param {!EngineAPI.IGenericListProperties} qProp
 * @return {!Promise<!EngineAPI.IGenericList>}
 */
EngineAPI.IApp.prototype.createObject = function(qProp) {};

/**
 * @param {!EngineAPI.IGenericListProperties} qProp
 * @return {!Promise<!EngineAPI.IGenericList>}
 */
EngineAPI.IApp.prototype.createSessionObject = function(qProp) {};

/**
 * @param {string} qPath
 * @param {!Array<number>=} qColIndices
 * @return {!Promise<void>}
 */
EngineAPI.IApp.prototype.clearSelections = function(qPath, qColIndices) {};
/**
 * @extends {EngineAPI.INxDimension}
 * @record
 * @struct
 */
EngineAPI.IHyperCubeDimensionDef = function() {};
 /** @type {!EngineAPI.IHyperCubeDimensionqDef} */
EngineAPI.IHyperCubeDimensionDef.prototype.qDef;
/**
 * @record
 * @struct
 */
EngineAPI.IHyperCube = function() {};
 /** @type {string} */
EngineAPI.IHyperCube.prototype.qStateName;
 /** @type {!EngineAPI.ISize} */
EngineAPI.IHyperCube.prototype.qSize;
 /** @type {!EngineAPI.INxValidationError} */
EngineAPI.IHyperCube.prototype.qError;
 /** @type {!Array<!EngineAPI.INxDimensionInfo>} */
EngineAPI.IHyperCube.prototype.qDimensionInfo;
 /** @type {!EngineAPI.INxMeasureInfo} */
EngineAPI.IHyperCube.prototype.qMeasureInfo;
 /** @type {!Array<number>} */
EngineAPI.IHyperCube.prototype.qEffectiveInterColumnSortOrder;
 /** @type {!Array<!EngineAPI.INxCell>} */
EngineAPI.IHyperCube.prototype.qGrandTotalRow;
 /** @type {!Array<!EngineAPI.INxDataPage>} */
EngineAPI.IHyperCube.prototype.qDataPages;
 /** @type {!Array<!EngineAPI.INxPivotPage>} */
EngineAPI.IHyperCube.prototype.qPivotDataPages;
 /** @type {!Array<!EngineAPI.INxStackPage>} */
EngineAPI.IHyperCube.prototype.qStackedDataPages;
 /** @type {string} */
EngineAPI.IHyperCube.prototype.qMode;
 /** @type {number} */
EngineAPI.IHyperCube.prototype.qNoOfLeftDims;
 /** @type {boolean} */
EngineAPI.IHyperCube.prototype.qIndentMode;
 /** @type {!EngineAPI.INxCellPosition} */
EngineAPI.IHyperCube.prototype.qLastExpandedPos;
 /** @type {boolean} */
EngineAPI.IHyperCube.prototype.qHasOtherValues;
/**
 * @extends {EngineAPI.IGenericObjectLayout}
 * @record
 * @struct
 */
EngineAPI.IGenericHyperCubeLayout = function() {};
 /** @type {!EngineAPI.IHyperCube} */
EngineAPI.IGenericHyperCubeLayout.prototype.qHyperCube;
/**
 * @record
 * @struct
 */
EngineAPI.IHyperCubeDef = function() {};
 /** @type {string} */
EngineAPI.IHyperCubeDef.prototype.qStateName;
 /** @type {!Array<!EngineAPI.INxDimension>} */
EngineAPI.IHyperCubeDef.prototype.qDimensions;
 /** @type {!Array<!EngineAPI.INxMeasure>} */
EngineAPI.IHyperCubeDef.prototype.qMeasures;
 /** @type {!Array<number>} */
EngineAPI.IHyperCubeDef.prototype.qInterColumnSortOrder;
 /** @type {boolean} */
EngineAPI.IHyperCubeDef.prototype.qSuppressZero;
 /** @type {boolean} */
EngineAPI.IHyperCubeDef.prototype.qSuppressMissing;
 /** @type {!Array<!EngineAPI.INxPage>} */
EngineAPI.IHyperCubeDef.prototype.qInitialDataFetch;
 /** @type {string} */
EngineAPI.IHyperCubeDef.prototype.qMode;
 /** @type {number} */
EngineAPI.IHyperCubeDef.prototype.qNoOfLeftDims;
 /** @type {boolean} */
EngineAPI.IHyperCubeDef.prototype.qAlwaysFullyExpanded;
 /** @type {number} */
EngineAPI.IHyperCubeDef.prototype.qMaxStackedCells;
 /** @type {boolean} */
EngineAPI.IHyperCubeDef.prototype.qPopulateMissing;
 /** @type {boolean} */
EngineAPI.IHyperCubeDef.prototype.qShowTotalsAbove;
 /** @type {boolean} */
EngineAPI.IHyperCubeDef.prototype.qIndentMode;
 /** @type {!EngineAPI.IValueExpr} */
EngineAPI.IHyperCubeDef.prototype.qCalcCond;
 /** @type {string} */
EngineAPI.IHyperCubeDef.prototype.qSortbyYValue;
 /** @type {number} */
EngineAPI.IHyperCubeDef.prototype.qPseudoDimPos;
 /** @type {string} */
EngineAPI.IHyperCubeDef.prototype.qReductionMode;
/**
 * @extends {EngineAPI.IHyperCubeDef}
 * @record
 * @struct
 */
EngineAPI.IVisualizationHyperCubeDef = function() {};
 /** @type {!EngineAPI.ICustomErrorMessage} */
EngineAPI.IVisualizationHyperCubeDef.prototype.customErrorMessage;
 /** @type {!Array<!EngineAPI.IHyperCubeDimensionDef>} */
EngineAPI.IVisualizationHyperCubeDef.prototype.qDimensions;
 /** @type {!Array<!EngineAPI.IHyperCubeMeasureDef>} */
EngineAPI.IVisualizationHyperCubeDef.prototype.qMeasures;
 /** @type {?} */
EngineAPI.IVisualizationHyperCubeDef.prototype.qLayoutExclude;
/**
 * @extends {EngineAPI.IGenericObjectProperties}
 * @record
 * @struct
 */
EngineAPI.IGenericHyperCubeProperties = function() {};
 /** @type {!EngineAPI.IVisualizationHyperCubeDef} */
EngineAPI.IGenericHyperCubeProperties.prototype.qHyperCubeDef;
/**
 * @extends {EngineAPI.IGenericObjectPrototype}
 * @record
 * @struct
 */
EngineAPI.IHyperCubeObject = function() {};

/**
 * @param {!EngineAPI.IGenericHyperCubeProperties} qProp
 * @return {!Promise<!EngineAPI.IHyperCubeObject>}
 */
EngineAPI.IApp.prototype.createObject = function(qProp) {};

/**
 * @param {!EngineAPI.IGenericHyperCubeProperties} qProp
 * @return {!Promise<!EngineAPI.IHyperCubeObject>}
 */
EngineAPI.IApp.prototype.createSessionObject = function(qProp) {};

/** @typedef {string} */
EngineAPI.FieldSelectionModeType;
/**
 * @record
 * @struct
 */
EngineAPI.INxCurrentSelectionItem = function() {};
 /** @type {string} */
EngineAPI.INxCurrentSelectionItem.prototype.qField;
 /** @type {boolean} */
EngineAPI.INxCurrentSelectionItem.prototype.qIsNum;
 /** @type {boolean} */
EngineAPI.INxCurrentSelectionItem.prototype.qLocked;
 /** @type {!Array<!EngineAPI.INxFieldSelectionInfo>} */
EngineAPI.INxCurrentSelectionItem.prototype.qNotSelectedFieldSelectionInfo;
 /** @type {boolean} */
EngineAPI.INxCurrentSelectionItem.prototype.qOneAndOnlyOne;
 /** @type {!Array<!EngineAPI.IRangeSelectInfo>} */
EngineAPI.INxCurrentSelectionItem.prototype.qRangeInfo;
 /** @type {string} */
EngineAPI.INxCurrentSelectionItem.prototype.qReadableName;
 /** @type {string} */
EngineAPI.INxCurrentSelectionItem.prototype.qSelected;
 /** @type {number} */
EngineAPI.INxCurrentSelectionItem.prototype.qSelectedCount;
 /** @type {!Array<!EngineAPI.INxFieldSelectionInfo>} */
EngineAPI.INxCurrentSelectionItem.prototype.qSelectedFieldSelectionInfo;
 /** @type {number} */
EngineAPI.INxCurrentSelectionItem.prototype.qSelectionThreshold;
 /** @type {number} */
EngineAPI.INxCurrentSelectionItem.prototype.qSortIndex;
 /** @type {!EngineAPI.INxStateCounts} */
EngineAPI.INxCurrentSelectionItem.prototype.qStateCounts;
 /** @type {string} */
EngineAPI.INxCurrentSelectionItem.prototype.qTextSearch;
 /** @type {number} */
EngineAPI.INxCurrentSelectionItem.prototype.qTotal;
/**
 * @record
 * @struct
 */
EngineAPI.INxFieldSelectionInfo = function() {};
 /** @type {string} */
EngineAPI.INxFieldSelectionInfo.prototype.qName;
 /** @type {string} */
EngineAPI.INxFieldSelectionInfo.prototype.qFieldSelectionMode;
/**
 * @extends {EngineAPI.INxInfo}
 * @record
 * @struct
 */
EngineAPI.IGenericSelectionNxInfo = function() {};
 /** @type {string} */
EngineAPI.IGenericSelectionNxInfo.prototype.qType;
/**
 * @extends {EngineAPI.IGenericObjectProperties}
 * @record
 * @struct
 */
EngineAPI.IGenericSelectionListProperties = function() {};
 /** @type {!EngineAPI.IGenericSelectionNxInfo} */
EngineAPI.IGenericSelectionListProperties.prototype.qInfo;
 /** @type {?} */
EngineAPI.IGenericSelectionListProperties.prototype.qSelectionObjectDef;
/**
 * @record
 * @struct
 */
EngineAPI.ISelectionListObject = function() {};
 /** @type {number} */
EngineAPI.ISelectionListObject.prototype.qBackCount;
 /** @type {number} */
EngineAPI.ISelectionListObject.prototype.qForwardCount;
 /** @type {!Array<!EngineAPI.INxCurrentSelectionItem>} */
EngineAPI.ISelectionListObject.prototype.qSelections;
/**
 * @extends {EngineAPI.IGenericObjectLayout}
 * @record
 * @struct
 */
EngineAPI.IGenericSelectionListLayout = function() {};
 /** @type {!EngineAPI.ISelectionListObject} */
EngineAPI.IGenericSelectionListLayout.prototype.qSelectionObject;

/**
 * @return {!Promise<!EngineAPI.IGenericSelectionListLayout>}
 */
EngineAPI.ISelectionListObject.prototype.getLayout = function() {};

/**
 * @param {!EngineAPI.IGenericSelectionListProperties} qProp
 * @return {!Promise<!EngineAPI.ISelectionListObject>}
 */
EngineAPI.IApp.prototype.createObject = function(qProp) {};

/**
 * @param {!EngineAPI.IGenericSelectionListProperties} qProp
 * @return {!Promise<!EngineAPI.ISelectionListObject>}
 */
EngineAPI.IApp.prototype.createSessionObject = function(qProp) {};
/**
 * @record
 * @struct
 */
EngineAPI.IBookmarkList = function() {};
 /** @type {!Array<!EngineAPI.IGenericBookmarkLayout>} */
EngineAPI.IBookmarkList.prototype.qItems;
/**
 * @extends {EngineAPI.IGenericBaseLayout}
 * @record
 * @struct
 */
EngineAPI.IGenericBookmarkListLayout = function() {};
 /** @type {!EngineAPI.IBookmarkList} */
EngineAPI.IGenericBookmarkListLayout.prototype.qBookmarkList;
/**
 * @extends {EngineAPI.INxInfo}
 * @record
 * @struct
 */
EngineAPI.IGenericBookmarkListNxInfo = function() {};
 /** @type {string} */
EngineAPI.IGenericBookmarkListNxInfo.prototype.qType;
/**
 * @extends {EngineAPI.IGenericProperties}
 * @record
 * @struct
 */
EngineAPI.IGenericBookmarkListProperties = function() {};
 /** @type {!EngineAPI.IGenericBookmarkListNxInfo} */
EngineAPI.IGenericBookmarkListProperties.prototype.qInfo;
 /** @type {!EngineAPI.IBookmarkListDef} */
EngineAPI.IGenericBookmarkListProperties.prototype.qBookmarkListDef;
/**
 * @record
 * @struct
 */
EngineAPI.IBookmarkListDef = function() {};
 /** @type {string} */
EngineAPI.IBookmarkListDef.prototype.qType;
 /** @type {?} */
EngineAPI.IBookmarkListDef.prototype.qData;
/**
 * @extends {EngineAPI.IGenericObject}
 * @record
 * @struct
 */
EngineAPI.IBookmarkListObject = function() {};

/**
 * @return {!Promise<!EngineAPI.IGenericBookmarkListLayout>}
 */
EngineAPI.IBookmarkListObject.prototype.getLayout = function() {};

/**
 * @param {!EngineAPI.IGenericBookmarkListProperties} qProp
 * @return {!Promise<!EngineAPI.IBookmarkListObject>}
 */
EngineAPI.IApp.prototype.createObject = function(qProp) {};

/**
 * @param {!EngineAPI.IGenericBookmarkListProperties} qProp
 * @return {!Promise<!EngineAPI.IBookmarkListObject>}
 */
EngineAPI.IApp.prototype.createSessionObject = function(qProp) {};
/**
 * @extends {EngineAPI.IGenericBaseLayout}
 * @record
 * @struct
 */
EngineAPI.IMeassureListItemLayout = function() {};
 /** @type {!EngineAPI.INxMetaTitleDescriptionTag} */
EngineAPI.IMeassureListItemLayout.prototype.qMeta;
 /** @type {null} */
EngineAPI.IMeassureListItemLayout.prototype.qData;
/**
 * @record
 * @struct
 */
EngineAPI.IMeassureList = function() {};
 /** @type {!Array<!EngineAPI.IMeassureListItemLayout>} */
EngineAPI.IMeassureList.prototype.qItems;
/**
 * @extends {EngineAPI.IGenericBaseLayout}
 * @record
 * @struct
 */
EngineAPI.IGenericMeasureListLayout = function() {};
 /** @type {!EngineAPI.IMeassureList} */
EngineAPI.IGenericMeasureListLayout.prototype.qMeassureListObject;
/**
 * @extends {EngineAPI.INxInfo}
 * @record
 * @struct
 */
EngineAPI.IGenericMeassureListNxInfo = function() {};
 /** @type {string} */
EngineAPI.IGenericMeassureListNxInfo.prototype.qType;
/**
 * @extends {EngineAPI.IGenericProperties}
 * @record
 * @struct
 */
EngineAPI.IGenericMeasureListProperties = function() {};
 /** @type {!EngineAPI.IGenericMeassureListNxInfo} */
EngineAPI.IGenericMeasureListProperties.prototype.qInfo;
 /** @type {!EngineAPI.IMeasureListDef} */
EngineAPI.IGenericMeasureListProperties.prototype.qMeasureListDef;
/**
 * @record
 * @struct
 */
EngineAPI.IMeasureListDef = function() {};
 /** @type {string} */
EngineAPI.IMeasureListDef.prototype.qType;
/**
 * @extends {EngineAPI.IGenericObject}
 * @record
 * @struct
 */
EngineAPI.IMeassureListObject = function() {};

/**
 * @return {!Promise<!EngineAPI.IGenericMeasureListLayout>}
 */
EngineAPI.IMeassureListObject.prototype.getLayout = function() {};

/**
 * @param {!EngineAPI.IGenericMeasureListProperties} qProp
 * @return {!Promise<!EngineAPI.IMeassureListObject>}
 */
EngineAPI.IApp.prototype.createObject = function(qProp) {};

/**
 * @param {!EngineAPI.IGenericMeasureListProperties} qProp
 * @return {!Promise<!EngineAPI.IMeassureListObject>}
 */
EngineAPI.IApp.prototype.createSessionObject = function(qProp) {};
/**
 * @record
 * @struct
 */
EngineAPI.IDimensionItemLayout = function() {};
 /** @type {!EngineAPI.INxMetaTitleDescriptionTag} */
EngineAPI.IDimensionItemLayout.prototype.qMeta;
 /** @type {null} */
EngineAPI.IDimensionItemLayout.prototype.qData;
/**
 * @record
 * @struct
 */
EngineAPI.IDimensionList = function() {};
 /** @type {!Array<!EngineAPI.IDimensionItemLayout>} */
EngineAPI.IDimensionList.prototype.qItems;
/**
 * @extends {EngineAPI.IGenericBaseLayout}
 * @record
 * @struct
 */
EngineAPI.IGenericDimensionListLayout = function() {};
 /** @type {!EngineAPI.IDimensionList} */
EngineAPI.IGenericDimensionListLayout.prototype.qDimensionsListObject;
/**
 * @extends {EngineAPI.INxInfo}
 * @record
 * @struct
 */
EngineAPI.IGenericDimensionListNxInfo = function() {};
 /** @type {string} */
EngineAPI.IGenericDimensionListNxInfo.prototype.qType;
/**
 * @extends {EngineAPI.IGenericProperties}
 * @record
 * @struct
 */
EngineAPI.IGenericDimensionsListProperties = function() {};
 /** @type {!EngineAPI.IGenericMeassureListNxInfo} */
EngineAPI.IGenericDimensionsListProperties.prototype.qInfo;
 /** @type {!EngineAPI.IDimensionListDef} */
EngineAPI.IGenericDimensionsListProperties.prototype.qDimensionListDef;
/**
 * @record
 * @struct
 */
EngineAPI.IDimensionListDef = function() {};
 /** @type {string} */
EngineAPI.IDimensionListDef.prototype.qType;
 /** @type {?} */
EngineAPI.IDimensionListDef.prototype.qData;
/**
 * @extends {EngineAPI.IGenericObject}
 * @record
 * @struct
 */
EngineAPI.IDimensionListObject = function() {};

/**
 * @return {!Promise<!EngineAPI.IGenericDimensionListLayout>}
 */
EngineAPI.IDimensionListObject.prototype.getLayout = function() {};

/**
 * @param {!EngineAPI.IGenericDimensionsListProperties} qProp
 * @return {!Promise<!EngineAPI.IDimensionListObject>}
 */
EngineAPI.IApp.prototype.createObject = function(qProp) {};

/**
 * @param {!EngineAPI.IGenericDimensionsListProperties} qProp
 * @return {!Promise<!EngineAPI.IDimensionListObject>}
 */
EngineAPI.IApp.prototype.createSessionObject = function(qProp) {};
/**
 * @record
 * @struct
 */
EngineAPI.INxVariableListItem = function() {};
 /** @type {string} */
EngineAPI.INxVariableListItem.prototype.qName;
 /** @type {string} */
EngineAPI.INxVariableListItem.prototype.qDescription;
 /** @type {string} */
EngineAPI.INxVariableListItem.prototype.qDefinition;
 /** @type {boolean} */
EngineAPI.INxVariableListItem.prototype.qIsConfig;
 /** @type {boolean} */
EngineAPI.INxVariableListItem.prototype.qIsReserved;
 /** @type {!EngineAPI.INxMeta} */
EngineAPI.INxVariableListItem.prototype.qMeta;
 /** @type {!EngineAPI.INxInfo} */
EngineAPI.INxVariableListItem.prototype.qInfo;
 /** @type {?} */
EngineAPI.INxVariableListItem.prototype.qData;
 /** @type {boolean} */
EngineAPI.INxVariableListItem.prototype.qIsScriptCreated;
/**
 * @record
 * @struct
 */
EngineAPI.IVariableListObject = function() {};
 /** @type {!Array<!EngineAPI.INxVariableListItem>} */
EngineAPI.IVariableListObject.prototype.qItems;
 /** @type {!EngineAPI.IVariableListObject} */
EngineAPI.IGenericVariableLayout.prototype.qVariableListObject;
/**
 * @extends {EngineAPI.IGenericProperties}
 * @record
 * @struct
 */
EngineAPI.IGenericVariableListProperties = function() {};
 /** @type {!EngineAPI.IVariableListDef} */
EngineAPI.IGenericVariableListProperties.prototype.qVariableListDef;
/**
 * @record
 * @struct
 */
EngineAPI.IVariableListDef = function() {};
 /** @type {string} */
EngineAPI.IVariableListDef.prototype.qType;
 /** @type {boolean} */
EngineAPI.IVariableListDef.prototype.qShowReserved;
 /** @type {boolean} */
EngineAPI.IVariableListDef.prototype.qShowConfig;
 /** @type {?} */
EngineAPI.IVariableListDef.prototype.qData;

/**
 * @return {!Promise<!EngineAPI.IGenericVariableLayout>}
 */
EngineAPI.IVariableListObject.prototype.getLayout = function() {};

/**
 * @param {!EngineAPI.IGenericVariableListProperties} qProp
 * @return {!Promise<!EngineAPI.IVariableListObject>}
 */
EngineAPI.IApp.prototype.createObject = function(qProp) {};

/**
 * @param {!EngineAPI.IGenericVariableListProperties} qProp
 * @return {!Promise<!EngineAPI.IVariableListObject>}
 */
EngineAPI.IApp.prototype.createSessionObject = function(qProp) {};
/**
 * @record
 * @struct
 */
EngineAPI.IFieldListObject = function() {};
 /** @type {!Array<!EngineAPI.INxFieldDescription>} */
EngineAPI.IFieldListObject.prototype.qItems;
/**
 * @extends {EngineAPI.IGenericObjectLayout}
 * @record
 * @struct
 */
EngineAPI.IGenericFieldLayout = function() {};
 /** @type {!EngineAPI.IFieldListObject} */
EngineAPI.IGenericFieldLayout.prototype.qFieldListObject;
/**
 * @extends {EngineAPI.IGenericProperties}
 * @record
 * @struct
 */
EngineAPI.IGenericFieldListProperties = function() {};
 /** @type {!EngineAPI.IFieldListDef} */
EngineAPI.IGenericFieldListProperties.prototype.qFieldListDef;
/**
 * @record
 * @struct
 */
EngineAPI.INxFieldDescription = function() {};
 /** @type {boolean} */
EngineAPI.INxFieldDescription.prototype.qIsSemantic;
 /** @type {boolean} */
EngineAPI.INxFieldDescription.prototype.qIsHidden;
 /** @type {boolean} */
EngineAPI.INxFieldDescription.prototype.qIsSystem;
 /** @type {boolean} */
EngineAPI.INxFieldDescription.prototype.qAndMode;
 /** @type {string} */
EngineAPI.INxFieldDescription.prototype.qName;
 /** @type {number} */
EngineAPI.INxFieldDescription.prototype.qCardinal;
 /** @type {!Array<string>} */
EngineAPI.INxFieldDescription.prototype.qTags;
 /** @type {boolean} */
EngineAPI.INxFieldDescription.prototype.qIsDefinitionOnly;
 /** @type {!EngineAPI.INxDerivedFieldDescriptionList} */
EngineAPI.INxFieldDescription.prototype.qDerivedFieldData;
 /** @type {boolean} */
EngineAPI.INxFieldDescription.prototype.qIsDetail;
 /** @type {boolean} */
EngineAPI.INxFieldDescription.prototype.qIsImplicit;
/**
 * @record
 * @struct
 */
EngineAPI.INxDerivedFieldDescriptionList = function() {};
 /** @type {!Array<!EngineAPI.INxDerivedFieldsData>} */
EngineAPI.INxDerivedFieldDescriptionList.prototype.qDerivedFieldLists;
/**
 * @record
 * @struct
 */
EngineAPI.INxDerivedField = function() {};
 /** @type {string} */
EngineAPI.INxDerivedField.prototype.qId;
 /** @type {string} */
EngineAPI.INxDerivedField.prototype.qName;
 /** @type {string} */
EngineAPI.INxDerivedField.prototype.qMethod;
 /** @type {string} */
EngineAPI.INxDerivedField.prototype.qExpr;
 /** @type {!Array<string>} */
EngineAPI.INxDerivedField.prototype.qTags;
/**
 * @record
 * @struct
 */
EngineAPI.INxDerivedGroup = function() {};
 /** @type {string} */
EngineAPI.INxDerivedGroup.prototype.qId;
 /** @type {string} */
EngineAPI.INxDerivedGroup.prototype.qName;
 /** @type {string} */
EngineAPI.INxDerivedGroup.prototype.qGrouping;
 /** @type {!Array<string>} */
EngineAPI.INxDerivedGroup.prototype.qFieldDefs;
/**
 * @record
 * @struct
 */
EngineAPI.INxDerivedFieldsData = function() {};
 /** @type {string} */
EngineAPI.INxDerivedFieldsData.prototype.qDerivedDefinitionName;
 /** @type {!Array<!EngineAPI.INxDerivedField>} */
EngineAPI.INxDerivedFieldsData.prototype.qFieldDefs;
 /** @type {!Array<!EngineAPI.INxDerivedGroup>} */
EngineAPI.INxDerivedFieldsData.prototype.qGroupDefs;
 /** @type {!Array<string>} */
EngineAPI.INxDerivedFieldsData.prototype.qTags;
/**
 * @record
 * @struct
 */
EngineAPI.IFieldListDef = function() {};
 /** @type {boolean} */
EngineAPI.IFieldListDef.prototype.qShowSystem;
 /** @type {boolean} */
EngineAPI.IFieldListDef.prototype.qShowHidden;
 /** @type {boolean} */
EngineAPI.IFieldListDef.prototype.qShowSemantic;
 /** @type {boolean} */
EngineAPI.IFieldListDef.prototype.qShowSrcTables;
 /** @type {boolean} */
EngineAPI.IFieldListDef.prototype.qShowDefinitionOnly;
 /** @type {boolean} */
EngineAPI.IFieldListDef.prototype.qShowDerivedFields;
 /** @type {boolean} */
EngineAPI.IFieldListDef.prototype.qShowImplicit;

/**
 * @param {!EngineAPI.IGenericFieldListProperties} qProp
 * @return {!Promise<!EngineAPI.IFieldListObject>}
 */
EngineAPI.IApp.prototype.createObject = function(qProp) {};

/**
 * @param {!EngineAPI.IGenericFieldListProperties} qProp
 * @return {!Promise<!EngineAPI.IFieldListObject>}
 */
EngineAPI.IApp.prototype.createSessionObject = function(qProp) {};
