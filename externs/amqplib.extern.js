/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/amqplib/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ExportDeclaration in  */
/**
 * @record
 * @struct
 */
function Connection() {}

/**
 * @return {!Bluebird<void>}
 */
Connection.prototype.close = function() {};

/**
 * @return {!Bluebird<?>}
 */
Connection.prototype.createChannel = function() {};

/**
 * @return {!Bluebird<?>}
 */
Connection.prototype.createConfirmChannel = function() {};
/**
 * @record
 * @struct
 */
function Channel() {}

/**
 * @return {!Bluebird<void>}
 */
Channel.prototype.close = function() {};

/**
 * @param {string} queue
 * @param {?=} options
 * @return {!Bluebird<?>}
 */
Channel.prototype.assertQueue = function(queue, options) {};

/**
 * @param {string} queue
 * @return {!Bluebird<?>}
 */
Channel.prototype.checkQueue = function(queue) {};

/**
 * @param {string} queue
 * @param {?=} options
 * @return {!Bluebird<?>}
 */
Channel.prototype.deleteQueue = function(queue, options) {};

/**
 * @param {string} queue
 * @return {!Bluebird<?>}
 */
Channel.prototype.purgeQueue = function(queue) {};

/**
 * @param {string} queue
 * @param {string} source
 * @param {string} pattern
 * @param {?=} args
 * @return {!Bluebird<?>}
 */
Channel.prototype.bindQueue = function(queue, source, pattern, args) {};

/**
 * @param {string} queue
 * @param {string} source
 * @param {string} pattern
 * @param {?=} args
 * @return {!Bluebird<?>}
 */
Channel.prototype.unbindQueue = function(queue, source, pattern, args) {};

/**
 * @param {string} exchange
 * @param {string} type
 * @param {?=} options
 * @return {!Bluebird<?>}
 */
Channel.prototype.assertExchange = function(exchange, type, options) {};

/**
 * @param {string} exchange
 * @return {!Bluebird<?>}
 */
Channel.prototype.checkExchange = function(exchange) {};

/**
 * @param {string} exchange
 * @param {?=} options
 * @return {!Bluebird<?>}
 */
Channel.prototype.deleteExchange = function(exchange, options) {};

/**
 * @param {string} destination
 * @param {string} source
 * @param {string} pattern
 * @param {?=} args
 * @return {!Bluebird<?>}
 */
Channel.prototype.bindExchange = function(destination, source, pattern, args) {};

/**
 * @param {string} destination
 * @param {string} source
 * @param {string} pattern
 * @param {?=} args
 * @return {!Bluebird<?>}
 */
Channel.prototype.unbindExchange = function(destination, source, pattern, args) {};

/**
 * @param {string} exchange
 * @param {string} routingKey
 * @param {?} content
 * @param {?=} options
 * @return {boolean}
 */
Channel.prototype.publish = function(exchange, routingKey, content, options) {};

/**
 * @param {string} queue
 * @param {?} content
 * @param {?=} options
 * @return {boolean}
 */
Channel.prototype.sendToQueue = function(queue, content, options) {};

/**
 * @param {string} queue
 * @param {?} onMessage
 * @param {?=} options
 * @return {!Bluebird<?>}
 */
Channel.prototype.consume = function(queue, onMessage, options) {};

/**
 * @param {string} consumerTag
 * @return {!Bluebird<?>}
 */
Channel.prototype.cancel = function(consumerTag) {};

/**
 * @param {string} queue
 * @param {?=} options
 * @return {!Bluebird<(boolean|?)>}
 */
Channel.prototype.get = function(queue, options) {};

/**
 * @param {?} message
 * @param {boolean=} allUpTo
 * @return {void}
 */
Channel.prototype.ack = function(message, allUpTo) {};

/**
 * @return {void}
 */
Channel.prototype.ackAll = function() {};

/**
 * @param {?} message
 * @param {boolean=} allUpTo
 * @param {boolean=} requeue
 * @return {void}
 */
Channel.prototype.nack = function(message, allUpTo, requeue) {};

/**
 * @param {boolean=} requeue
 * @return {void}
 */
Channel.prototype.nackAll = function(requeue) {};

/**
 * @param {?} message
 * @param {boolean=} requeue
 * @return {void}
 */
Channel.prototype.reject = function(message, requeue) {};

/**
 * @param {number} count
 * @param {boolean=} global
 * @return {!Bluebird<?>}
 */
Channel.prototype.prefetch = function(count, global) {};

/**
 * @return {!Bluebird<?>}
 */
Channel.prototype.recover = function() {};
/**
 * @extends {Channel}
 * @record
 * @struct
 */
function ConfirmChannel() {}

/**
 * @param {string} exchange
 * @param {string} routingKey
 * @param {?} content
 * @param {?=} options
 * @param {?=} callback
 * @return {boolean}
 */
ConfirmChannel.prototype.publish = function(exchange, routingKey, content, options, callback) {};

/**
 * @param {string} queue
 * @param {?} content
 * @param {?=} options
 * @param {?=} callback
 * @return {boolean}
 */
ConfirmChannel.prototype.sendToQueue = function(queue, content, options, callback) {};

/**
 * @return {!Bluebird<void>}
 */
ConfirmChannel.prototype.waitForConfirms = function() {};

/**
 * @param {string} url
 * @param {?=} socketOptions
 * @return {!Bluebird<?>}
 */
function connect(url, socketOptions) {}
