/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/purl/index.d.ts:
/** @const */
var purl = {};
/**
 * @record
 * @struct
 */
purl.ParameterMap = function() {};

/* TODO: IndexSignature: purl */
/**
 * @record
 * @struct
 */
purl.Url = function() {};

/**
 * The .attr() method is used to return information on various parts of the URL.
 * @param {string} option
 * @return {string}
 */
purl.Url.prototype.attr = function(option) {};

/**
 * The .param() method is used to return the values of querystring parameters.
 * @param {string=} parameterName
 * @return {!purl.ParameterMap|string}
 */
purl.Url.prototype.param = function(parameterName) {};

/**
 * The .segment() method is used to return values of individual segments from the URL's path.
 * Pass in an integer value to get the value of that segment - note however that the count is not zero-indexed like an array - i.e. .segment(1) returns the first segment, not the second one.
 * You can also pass in negative values, in which case it will count back from the end of the path rather than forwards from the start.
 * @param {number} position
 * @return {string}
 */
purl.Url.prototype.segment = function(position) {};

/**
 * Gets a parameter from the fragment segment
 * @param {string=} parameterName
 * @return {!purl.ParameterMap|string}
 */
purl.Url.prototype.fparam = function(parameterName) {};

/**
 * Gets the fragment segment at the especified position.
 * @param {number} position
 * @return {string}
 */
purl.Url.prototype.fsegment = function(position) {};

/**
 * Parse the current page URL
 * Pass in a URI as a string and parse that
 * 
 * @param {string=} someUrl the url to be parsed
 * @return {!purl.Url}
 */
function purl(someUrl) {}

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
