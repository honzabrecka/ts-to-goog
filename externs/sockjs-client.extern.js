/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/sockjs-client/index.d.ts:

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
 /** @type {function(new: (!SockJS.Socket), string, ?, !SockJS.Options): ?} */
var SockJS;

/** @typedef {number} */
SockJS.CONNECTING;

/** @typedef {number} */
SockJS.OPEN;

/** @typedef {number} */
SockJS.CLOSING;

/** @typedef {number} */
SockJS.CLOSED;

/** @typedef {number} */
SockJS.State;
/**
 * @record
 * @struct
 */
SockJS.BaseEvent = function() {};
 /** @type {string} */
SockJS.BaseEvent.prototype.type;

/** @typedef {!SockJS.BaseEvent} */
SockJS.OpenEvent;
/**
 * @extends {SockJS.BaseEvent}
 * @record
 * @struct
 */
SockJS.CloseEvent = function() {};
 /** @type {number} */
SockJS.CloseEvent.prototype.code;
 /** @type {string} */
SockJS.CloseEvent.prototype.reason;
 /** @type {boolean} */
SockJS.CloseEvent.prototype.wasClean;
/**
 * @extends {SockJS.BaseEvent}
 * @record
 * @struct
 */
SockJS.MessageEvent = function() {};
 /** @type {string} */
SockJS.MessageEvent.prototype.data;

/** @typedef {function(): string} */
SockJS.SessionGenerator;
/**
 * @record
 * @struct
 */
SockJS.Options = function() {};
 /** @type {string} */
SockJS.Options.prototype.server;
 /** @type {(number|function(): string)} */
SockJS.Options.prototype.sessionId;
 /** @type {(string|!Array<string>)} */
SockJS.Options.prototype.transports;
/**
 * @record
 * @struct
 */
SockJS.Socket = function() {};
 /** @type {number} */
SockJS.Socket.prototype.readyState;
 /** @type {string} */
SockJS.Socket.prototype.protocol;
 /** @type {string} */
SockJS.Socket.prototype.url;

/**
 * @param {!SockJS.BaseEvent} e
 * @return {?}
 */
SockJS.Socket.prototype.onopen = function(e) {};

/**
 * @param {!SockJS.CloseEvent} e
 * @return {?}
 */
SockJS.Socket.prototype.onclose = function(e) {};

/**
 * @param {!SockJS.MessageEvent} e
 * @return {?}
 */
SockJS.Socket.prototype.onmessage = function(e) {};

/**
 * @param {?} data
 * @return {void}
 */
SockJS.Socket.prototype.send = function(data) {};

/**
 * @param {number=} code
 * @param {string=} reason
 * @return {void}
 */
SockJS.Socket.prototype.close = function(code, reason) {};
