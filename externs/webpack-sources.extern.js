/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/webpack-sources/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */
/**
 * @constructor
 * @struct
 */
function Source() {}

/**
 * @return {number}
 */
Source.prototype.size = function() {};

/**
 * @param {?=} options
 * @return {?}
 */
Source.prototype.map = function(options) {};

/**
 * @param {?=} options
 * @return {?}
 */
Source.prototype.sourceAndMap = function(options) {};

/**
 * @param {!Hash} hash
 * @return {void}
 */
Source.prototype.updateHash = function(hash) {};

/**
 * @param {?=} options
 * @return {string}
 */
Source.prototype.source = function(options) {};

/**
 * @param {?=} options
 * @return {?}
 */
Source.prototype.node = function(options) {};

/**
 * @param {?=} options
 * @return {?}
 */
Source.prototype.listNode = function(options) {};

/**
 * @param {?=} options
 * @return {?}
 */
Source.prototype.listMap = function(options) {};
/**
 * @record
 * @struct
 */
function SourceAndMapMixin() {}

/**
 * @param {?} options
 * @return {?}
 */
SourceAndMapMixin.prototype.map = function(options) {};

/**
 * @param {?} options
 * @return {?}
 */
SourceAndMapMixin.prototype.sourceAndMap = function(options) {};

/**
 * @constructor
 * @struct
 * @param {?} source
 */
function CachedSource(source) {}
 /** @type {?} */
CachedSource.prototype._source;
 /** @type {string} */
CachedSource.prototype._cachedSource;
 /** @type {number} */
CachedSource.prototype._cachedSize;
 /** @type {?} */
CachedSource.prototype._cachedMaps;
 /** @type {?} */
CachedSource.prototype.node;
 /** @type {?} */
CachedSource.prototype.listMap;

/**
 * @return {string}
 */
CachedSource.prototype.source = function() {};

/**
 * @return {number}
 */
CachedSource.prototype.size = function() {};

/**
 * @param {?} options
 * @return {?}
 */
CachedSource.prototype.sourceAndMap = function(options) {};

/**
 * @param {?} options
 * @return {?}
 */
CachedSource.prototype.map = function(options) {};

/**
 * @param {!Hash} hash
 * @return {void}
 */
CachedSource.prototype.updateHash = function(hash) {};

/**
 * @constructor
 * @struct
 * @param {...(string|?)} args
 */
function ConcatSource(args) {}
 /** @type {!Array<(string|?)>} */
ConcatSource.prototype.children;

/**
 * @param {(string|?)} item
 * @return {void}
 */
ConcatSource.prototype.add = function(item) {};

/**
 * @return {string}
 */
ConcatSource.prototype.source = function() {};

/**
 * @return {number}
 */
ConcatSource.prototype.size = function() {};

/**
 * @param {?} options
 * @return {?}
 */
ConcatSource.prototype.node = function(options) {};

/**
 * @param {?} options
 * @return {?}
 */
ConcatSource.prototype.listMap = function(options) {};

/**
 * @param {!Hash} hash
 * @return {void}
 */
ConcatSource.prototype.updateHash = function(hash) {};

/**
 * @constructor
 * @struct
 * @param {string} value
 * @param {string} name
 * @param {string} originalSource
 */
function LineToLineMappedSource(value, name, originalSource) {}
 /** @type {string} */
LineToLineMappedSource.prototype._value;
 /** @type {string} */
LineToLineMappedSource.prototype._name;
 /** @type {string} */
LineToLineMappedSource.prototype._originalSource;

/**
 * @return {string}
 */
LineToLineMappedSource.prototype.source = function() {};

/**
 * @param {?} options
 * @return {?}
 */
LineToLineMappedSource.prototype.node = function(options) {};

/**
 * @param {?} options
 * @return {?}
 */
LineToLineMappedSource.prototype.listMap = function(options) {};

/**
 * @param {!Hash} hash
 * @return {void}
 */
LineToLineMappedSource.prototype.updateHash = function(hash) {};

/**
 * @constructor
 * @struct
 * @param {string} value
 * @param {string} name
 */
function OriginalSource(value, name) {}
 /** @type {string} */
OriginalSource.prototype._value;
 /** @type {string} */
OriginalSource.prototype._name;

/**
 * @return {string}
 */
OriginalSource.prototype.source = function() {};

/**
 * @param {?=} options
 * @return {?}
 */
OriginalSource.prototype.node = function(options) {};

/**
 * @param {?} options
 * @return {?}
 */
OriginalSource.prototype.listMap = function(options) {};

/**
 * @param {!Hash} hash
 * @return {void}
 */
OriginalSource.prototype.updateHash = function(hash) {};

/**
 * @constructor
 * @struct
 * @param {(string|?)} prefix
 * @param {(string|?)} source
 */
function PrefixSource(prefix, source) {}
 /** @type {(string|?)} */
PrefixSource.prototype._source;
 /** @type {(string|?)} */
PrefixSource.prototype._prefix;

/**
 * @return {string}
 */
PrefixSource.prototype.source = function() {};

/**
 * @param {?} options
 * @return {?}
 */
PrefixSource.prototype.node = function(options) {};

/**
 * @param {?} options
 * @return {?}
 */
PrefixSource.prototype.listMap = function(options) {};

/**
 * @param {!Hash} hash
 * @return {void}
 */
PrefixSource.prototype.updateHash = function(hash) {};

/**
 * @constructor
 * @struct
 * @param {string} value
 */
function RawSource(value) {}
 /** @type {string} */
RawSource.prototype._value;

/**
 * @return {string}
 */
RawSource.prototype.source = function() {};

/**
 * @param {?} options
 * @return {null}
 */
RawSource.prototype.map = function(options) {};

/**
 * @param {?} options
 * @return {?}
 */
RawSource.prototype.node = function(options) {};

/**
 * @param {?} options
 * @return {?}
 */
RawSource.prototype.listMap = function(options) {};

/**
 * @param {!Hash} hash
 * @return {void}
 */
RawSource.prototype.updateHash = function(hash) {};

/**
 * @constructor
 * @struct
 * @param {?} source
 * @param {string} name
 */
function ReplaceSource(source, name) {}
 /** @type {?} */
ReplaceSource.prototype._source;
 /** @type {string} */
ReplaceSource.prototype._name;
 /** @type {!Array<!Array<?>>} */
ReplaceSource.prototype.replacements;

/**
 * @param {number} start
 * @param {number} end
 * @param {string} newValue
 * @return {void}
 */
ReplaceSource.prototype.replace = function(start, end, newValue) {};

/**
 * @param {number} pos
 * @param {string} newValue
 * @return {void}
 */
ReplaceSource.prototype.insert = function(pos, newValue) {};

/**
 * @return {string}
 */
ReplaceSource.prototype.source = function() {};

/**
 * @return {void}
 */
ReplaceSource.prototype._sortReplacements = function() {};

/**
 * @param {string} str
 * @return {string}
 */
ReplaceSource.prototype._replaceString = function(str) {};

/**
 * @param {?} options
 * @return {?}
 */
ReplaceSource.prototype.node = function(options) {};

/**
 * @param {?} options
 * @return {?}
 */
ReplaceSource.prototype.listMap = function(options) {};

/**
 * @param {?} oldNode
 * @param {string} newString
 * @return {(string|?)}
 */
ReplaceSource.prototype._replacementToSourceNode = function(oldNode, newString) {};

/**
 * @param {?|string} node
 * @param {!Array<?>|number} position
 * @return {!Array<?>|number}
 */
ReplaceSource.prototype._splitSourceNode = function(node, position) {};

/**
 * @param {string} str
 * @param {number} position
 * @return {!Array<string>}
 */
ReplaceSource.prototype._splitString = function(str, position) {};

/**
 * @constructor
 * @struct
 * @param {string} value
 * @param {string} name
 * @param {?} sourceMap
 * @param {string=} originalSource
 * @param {?=} innerSourceMap
 */
function SourceMapSource(value, name, sourceMap, originalSource, innerSourceMap) {}
 /** @type {string} */
SourceMapSource.prototype._value;
 /** @type {string} */
SourceMapSource.prototype._name;
 /** @type {?} */
SourceMapSource.prototype._sourceMap;
 /** @type {string} */
SourceMapSource.prototype._originalSource;
 /** @type {?} */
SourceMapSource.prototype._innerSourceMap;

/**
 * @return {string}
 */
SourceMapSource.prototype.source = function() {};

/**
 * @return {?}
 */
SourceMapSource.prototype.node = function() {};

/**
 * @param {?} options
 * @return {?}
 */
SourceMapSource.prototype.listMap = function(options) {};

/**
 * @param {!Hash} hash
 * @return {void}
 */
SourceMapSource.prototype.updateHash = function(hash) {};
