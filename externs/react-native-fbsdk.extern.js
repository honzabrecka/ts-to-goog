/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/react-native-fbsdk/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/** @typedef {string} */
var Permissions;

/** @typedef {string} */
var AppGroupPrivacy;
/**
 * @record
 * @struct
 */
function AppGroupCreationContent() {}
 /** @type {string} */
AppGroupCreationContent.prototype.description;
 /** @type {string} */
AppGroupCreationContent.prototype.name;
 /** @type {string} */
AppGroupCreationContent.prototype.privacy;
/**
 * @record
 * @struct
 */
function AppInviteContent() {}
 /** @type {string} */
AppInviteContent.prototype.previewImageUrl;
 /** @type {string} */
AppInviteContent.prototype.applinkUrl;
 /** @type {string} */
AppInviteContent.prototype.promotionCode;
 /** @type {string} */
AppInviteContent.prototype.promotionText;

/** @typedef {string} */
var GameRequestActionType;

/** @typedef {string} */
var GameRequestFilters;
/**
 * @record
 * @struct
 */
function GameRequestContent() {}
 /** @type {string} */
GameRequestContent.prototype.message;
 /** @type {string} */
GameRequestContent.prototype.actionType;
 /** @type {string} */
GameRequestContent.prototype.data;
 /** @type {string} */
GameRequestContent.prototype.filters;
 /** @type {string} */
GameRequestContent.prototype.objectId;
 /** @type {!Array<string>} */
GameRequestContent.prototype.recipients;
 /** @type {!Array<string>} */
GameRequestContent.prototype.suggestions;
 /** @type {string} */
GameRequestContent.prototype.title;

/** @typedef {string} */
var ObjectIdActionType;
/**
 * @record
 * @struct
 */
function ObjectIdAndType() {}
 /** @type {string} */
ObjectIdAndType.prototype.objectId;
 /** @type {string} */
ObjectIdAndType.prototype.objectType;

/** @typedef {?} */
var ShareContent;
/**
 * @record
 * @struct
 */
function ShareContentCommonParameters() {}
 /** @type {!Array<string>} */
ShareContentCommonParameters.prototype.peopleIds;
 /** @type {string} */
ShareContentCommonParameters.prototype.placeId;
 /** @type {string} */
ShareContentCommonParameters.prototype.ref;
 /** @type {string} */
ShareContentCommonParameters.prototype.hashtag;
/**
 * @record
 * @struct
 */
function ShareLinkContent() {}
 /** @type {string} */
ShareLinkContent.prototype.contentType;
 /** @type {?} */
ShareLinkContent.prototype.commonParameters;
 /** @type {string} */
ShareLinkContent.prototype.contentUrl;
 /** @type {string} */
ShareLinkContent.prototype.contentDescription;
 /** @type {string} */
ShareLinkContent.prototype.contentTitle;
 /** @type {string} */
ShareLinkContent.prototype.imageUrl;
 /** @type {string} */
ShareLinkContent.prototype.quote;
/**
 * @record
 * @struct
 */
function OpenGraphProperties() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function OpenGraphValue() {}
 /** @type {string} */
OpenGraphValue.prototype.type;
 /** @type {?} */
OpenGraphValue.prototype.value;

/** @typedef {string} */
var OpenGraphValueType;
/**
 * @record
 * @struct
 */
function ShareOpenGraphValueContainer() {}

/**
 * @param {string} key
 * @param {number} number
 * @return {void}
 */
ShareOpenGraphValueContainer.prototype.putNumber = function(key, number) {};

/**
 * Sets an open graph object for the specified key.
 * @param {string} key
 * @param {?} object
 * @return {void}
 */
ShareOpenGraphValueContainer.prototype.putObject = function(key, object) {};

/**
 * Sets a photo for the specified key.
 * @param {string} key
 * @param {?} photo
 * @return {void}
 */
ShareOpenGraphValueContainer.prototype.putPhoto = function(key, photo) {};

/**
 * @param {string} key
 * @param {string} string
 * @return {void}
 */
ShareOpenGraphValueContainer.prototype.putString = function(key, string) {};

/**
 * Gets an entry for the given key.
 * @param {string} key
 * @return {?}
 */
ShareOpenGraphValueContainer.prototype.getEntry = function(key) {};
 /** @type {?} */
ShareOpenGraphValueContainer.prototype._properties;

/**
 * @constructor
 * @struct
 * @param {string} actionType
 */
function ShareOpenGraphAction(actionType) {}
 /** @type {string} */
ShareOpenGraphAction.prototype.actionType;
/**
 * @record
 * @struct
 */
function ShareOpenGraphContent() {}
 /** @type {string} */
ShareOpenGraphContent.prototype.contentType;
 /** @type {?} */
ShareOpenGraphContent.prototype.commonParameters;
 /** @type {string} */
ShareOpenGraphContent.prototype.contentUrl;
 /** @type {?} */
ShareOpenGraphContent.prototype.action;
 /** @type {string} */
ShareOpenGraphContent.prototype.previewPropertyName;
/**
 * @constructor
 * @struct
 */
function ShareOpenGraphObject() {}
/**
 * @record
 * @struct
 */
function SharePhoto() {}
 /** @type {string} */
SharePhoto.prototype.imageUrl;
 /** @type {boolean} */
SharePhoto.prototype.userGenerated;
 /** @type {string} */
SharePhoto.prototype.caption;
/**
 * @record
 * @struct
 */
function SharePhotoContent() {}
 /** @type {string} */
SharePhotoContent.prototype.contentType;
 /** @type {?} */
SharePhotoContent.prototype.commonParameters;
 /** @type {string} */
SharePhotoContent.prototype.contentUrl;
 /** @type {!Array<?>} */
SharePhotoContent.prototype.photos;
/**
 * @record
 * @struct
 */
function ShareVideo() {}
 /** @type {string} */
ShareVideo.prototype.localUrl;
/**
 * @record
 * @struct
 */
function ShareVideoContent() {}
 /** @type {string} */
ShareVideoContent.prototype.contentType;
 /** @type {?} */
ShareVideoContent.prototype.commonParameters;
 /** @type {string} */
ShareVideoContent.prototype.contentUrl;
 /** @type {?} */
ShareVideoContent.prototype.video;
 /** @type {string} */
ShareVideoContent.prototype.contentDescription;
 /** @type {string} */
ShareVideoContent.prototype.contentTitle;
 /** @type {?} */
ShareVideoContent.prototype.previewPhoto;
/**
 * @record
 * @struct
 */
function AccessTokenMap() {}
 /** @type {string} */
AccessTokenMap.prototype.accessToken;
 /** @type {string} */
AccessTokenMap.prototype.applicationID;
 /** @type {string} */
AccessTokenMap.prototype.userID;
 /** @type {!Array<string>} */
AccessTokenMap.prototype.permissions;
 /** @type {!Array<string>} */
AccessTokenMap.prototype.declinedPermissions;
 /** @type {string} */
AccessTokenMap.prototype.accessTokenSource;
 /** @type {number} */
AccessTokenMap.prototype.expirationTime;
 /** @type {number} */
AccessTokenMap.prototype.lastRefreshTime;

/**
 * @constructor
 * @struct
 * @param {?} tokenMap
 */
function AccessToken(tokenMap) {}
 /** @type {string} */
AccessToken.prototype.accessToken;
 /** @type {string} */
AccessToken.prototype.applicationID;
 /** @type {string} */
AccessToken.prototype.userID;
 /** @type {!Array<string>} */
AccessToken.prototype.permissions;
 /** @type {!Array<string>} */
AccessToken.prototype.declinedPermissions;
 /** @type {string} */
AccessToken.prototype.accessTokenSource;
 /** @type {number} */
AccessToken.prototype.expirationTime;
 /** @type {number} */
AccessToken.prototype.lastRefreshTime;

/**
 * Getter for the access token that is current for the application.
 * @return {!Promise<?>}
 */
AccessToken.getCurrentAccessToken = function() {};

/**
 * Setter for the access token that is current for the application.
 * @param {?} accessToken
 * @return {void}
 */
AccessToken.setCurrentAccessToken = function(accessToken) {};

/**
 * Updates the current access token with up to date permissions,
 * and extends the expiration date, if extension is possible.
 * @return {!Promise<?>}
 */
AccessToken.refreshCurrentAccessTokenAsync = function() {};

/**
 * Gets the date at which the access token expires. The value is the number of
 * milliseconds since Jan. 1, 1970, midnight GMT.
 * @return {number}
 */
AccessToken.prototype.getExpires = function() {};

/**
 * Get the list of permissions associated with this access token. Note that the most up-to-date
 * list of permissions is maintained by Facebook, so this list may be outdated if permissions
 * have been added or removed since the time the AccessToken object was created. See
 * https://developers.facebook.com/docs/reference/login/#permissions for details.
 * @return {!Array<string>}
 */
AccessToken.prototype.getPermissions = function() {};

/**
 * Gets the list of permissions declined by the user with this access token. It represents the
 * entire set of permissions that have been requested and declined. Note that the most
 * up-to-date list of permissions is maintained by Facebook, so this list may be outdated if
 * permissions have been granted or declined since the last time an AccessToken object was
 * created. See https://developers.facebook.com/docs/reference/login/#permissions for details.
 * @return {!Array<string>}
 */
AccessToken.prototype.getDeclinedPermissions = function() {};

/**
 * Gets the date at which the token was last refreshed. Since tokens expire, the Facebook SDK
 * will attempt to renew them periodically. The value is the number of milliseconds since
 * Jan. 1, 1970, midnight GMT.
 * @return {number}
 */
AccessToken.prototype.getLastRefresh = function() {};

/**
 * Gets the ID of the Facebook Application associated with this access token.
 * @return {string}
 */
AccessToken.prototype.getApplicationId = function() {};

/**
 * Gets user ID associated with this access token.
 * @return {string}
 */
AccessToken.prototype.getUserId = function() {};

/** @typedef {string} */
var AppEventsFlushBehavior;
/**
 * @record
 * @struct
 */
function Params() {}

/* TODO: IndexSignature:  */
/** @const */
var AppEventsLogger = {};

/**
 * Sets the current event flushing behavior specifying when events
 * are sent back to Facebook servers.
 * @param {string} flushBehavior
 * @return {void}
 */
AppEventsLogger.setFlushBehavior = function(flushBehavior) {};

/**
 * Logs an event with eventName and optional arguments.
 * This function supports the following usage:
 * logEvent(eventName: string);
 * logEvent(eventName: string, valueToSum: number);
 * logEvent(eventName: string, parameters: {[key:string]:string|number});
 * logEvent(eventName: string, valueToSum: number, parameters: {[key:string]:string|number});
 * See https://developers.facebook.com/docs/app-events/android for detail.
 * @param {string} eventName
 * @param {...(number|?)} args
 * @return {void}
 */
AppEventsLogger.logEvent = function(eventName, args) {};

/**
 * Logs a purchase. See http://en.wikipedia.org/wiki/ISO_4217 for currencyCode.
 * @param {number} purchaseAmount
 * @param {string} currencyCode
 * @param {!Object=} parameters
 * @return {void}
 */
AppEventsLogger.logPurchase = function(purchaseAmount, currencyCode, parameters) {};

/**
 * Logs an app event that tracks that the application was open via Push Notification.
 * @param {!Object=} payload
 * @return {void}
 */
AppEventsLogger.logPushNotificationOpen = function(payload) {};

/**
 * Explicitly kicks off flushing of events to Facebook.
 * @return {void}
 */
AppEventsLogger.flush = function() {};

/**
 * For iOS only, sets and sends device token to register the current application for push notifications.
 * \@platform ios
 * @param {string} deviceToken
 * @return {void}
 */
AppEventsLogger.setPushNotificationsDeviceToken = function(deviceToken) {};

/**
 * For Android only, sets and sends registration id to register the current app for push notifications.
 * \@platform Android
 * @param {string} registrationId
 * @return {void}
 */
AppEventsLogger.setPushNotificationsRegistrationId = function(registrationId) {};
/** @const */
var AppInviteDialog = {};

/**
 * Check if the dialog can be shown.
 * @return {!Promise<?>}
 */
AppInviteDialog.canShow = function() {};

/**
 * Shows the dialog using the specified content.
 * @param {?} appInviteContent
 * @return {!Promise<?>}
 */
AppInviteDialog.show = function(appInviteContent) {};
/** @const */
var GameRequestDialog = {};

/**
 * Check if the dialog can be shown.
 * @return {!Promise<?>}
 */
GameRequestDialog.canShow = function() {};

/**
 * Shows the dialog using the specified content.
 * @param {?} gameRequestContent
 * @return {!Promise<?>}
 */
GameRequestDialog.show = function(gameRequestContent) {};

/** @typedef {?} */
var GraphRequestCallback;
/**
 * @record
 * @struct
 */
function GraphRequestConfig() {}
 /** @type {string} */
GraphRequestConfig.prototype.httpMethod;
 /** @type {string} */
GraphRequestConfig.prototype.version;
 /** @type {?} */
GraphRequestConfig.prototype.parameters;
 /** @type {string} */
GraphRequestConfig.prototype.accessToken;
/**
 * @record
 * @struct
 */
function GraphRequestParameters() {}

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * Constructs a new Graph API request.
 * @param {string} graphPath
 * @param {?=} config
 * @param {?=} callback
 */
function GraphRequest(graphPath, config, callback) {}
 /** @type {string} */
GraphRequest.prototype.graphPath;
 /** @type {?} */
GraphRequest.prototype.config;
 /** @type {?} */
GraphRequest.prototype.callback;

/**
 * Adds a string parameter to the request.
 * @param {string} paramString
 * @param {string} key
 * @return {void}
 */
GraphRequest.prototype.addStringParameter = function(paramString, key) {};

/**
 * @constructor
 * @struct
 */
function GraphRequestManager() {}
 /** @type {!Array<?>} */
GraphRequestManager.prototype.requestBatch;
 /** @type {!Array<?>} */
GraphRequestManager.prototype.requestCallbacks;
 /** @type {?} */
GraphRequestManager.prototype.batchCallback;

/**
 * Add a graph request.
 * @param {?} request
 * @return {?}
 */
GraphRequestManager.prototype.addRequest = function(request) {};

/**
 * Add call back to the GraphRequestManager. Only one callback can be added.
 * Note that invocation of the batch callback does not indicate success of every
 * graph request made, only that the entire batch has finished executing.
 * @param {?} callback
 * @return {?}
 */
GraphRequestManager.prototype.addBatchCallback = function(callback) {};

/**
 * Executes requests in a batch.
 * Note that when there's an issue with network connection the batch callback
 * behavior differs in Android and iOS.
 * On iOS, the batch callback returns an error if the batch fails with a network error.
 * On Android, the batch callback always returns {"result": "batch finished executing"}
 * after the batch time out. This is because detecting network status requires
 * extra permission and it's unncessary for the sdk. Instead, you can use the NetInfo module
 * in react-native to get the network status.
 * @param {number=} timeout
 * @return {void}
 */
GraphRequestManager.prototype.start = function(timeout) {};

/** @typedef {string} */
var AuxiliaryViewPosition;

/** @typedef {string} */
var HorizontalAlignment;

/** @typedef {string} */
var LikeViewStyle;
/**
 * @record
 * @struct
 */
function LikeViewProps() {}
 /** @type {?} */
LikeViewProps.prototype.objectIdAndType;
 /** @type {string} */
LikeViewProps.prototype.likeViewStyle;
 /** @type {string} */
LikeViewProps.prototype.auxiliaryViewPosition;
 /** @type {string} */
LikeViewProps.prototype.horizontalAlignment;
 /** @type {number} */
LikeViewProps.prototype.foregroundColor;
 /** @type {boolean} */
LikeViewProps.prototype.soundEnabled;
 /** @type {?} */
LikeViewProps.prototype.style;
/**
 * @constructor
 * @struct
 */
function LikeView() {}

/** @typedef {string} */
var TooltipBehaviorIOS;
/**
 * @record
 * @struct
 */
function LoginButtonProps() {}
 /** @type {!Array<string>} */
LoginButtonProps.prototype.readPermissions;
 /** @type {!Array<string>} */
LoginButtonProps.prototype.publishPermissions;
 /** @type {string} */
LoginButtonProps.prototype.loginBehaviorAndroid;
 /** @type {string} */
LoginButtonProps.prototype.loginBehaviorIOS;
 /** @type {string} */
LoginButtonProps.prototype.defaultAudience;
 /** @type {string} */
LoginButtonProps.prototype.tooltipBehaviorIOS;
 /** @type {?} */
LoginButtonProps.prototype.style;

/**
 * The callback invoked upon error/completion of a login request.
 * @param {!Object} error
 * @param {?} result
 * @return {void}
 */
LoginButtonProps.prototype.onLoginFinished = function(error, result) {};

/**
 * The callback invoked upon completion of a logout request.
 * @return {void}
 */
LoginButtonProps.prototype.onLogoutFinished = function() {};
/**
 * @constructor
 * @struct
 */
function LoginButton() {}

/**
 * @param {!Object} event
 * @return {void}
 */
LoginButton.prototype._eventHandler = function(event) {};

/** @typedef {string} */
var DefaultAudience;

/** @typedef {string} */
var LoginBehavior;

/** @typedef {string} */
var LoginBehaviorAndroid;

/** @typedef {string} */
var LoginBehaviorIOS;
/**
 * @record
 * @struct
 */
function LoginResult() {}
 /** @type {?} */
LoginResult.prototype.error;
 /** @type {boolean} */
LoginResult.prototype.isCancelled;
 /** @type {!Array<string>} */
LoginResult.prototype.grantedPermissions;
 /** @type {!Array<string>} */
LoginResult.prototype.declinedPermissions;
/** @const */
var LoginManager = {};

/**
 * Logs the user in with the requested read permissions.
 * @param {!Array<string>} permissions
 * @return {!Promise<?>}
 */
LoginManager.logInWithReadPermissions = function(permissions) {};

/**
 * Logs the user in with the requested publish permissions.
 * @param {!Array<string>} permissions
 * @return {!Promise<?>}
 */
LoginManager.logInWithPublishPermissions = function(permissions) {};

/**
 * Getter for the login behavior.
 * @return {!Promise<string>}
 */
LoginManager.getLoginBehavior = function() {};

/**
 * Setter for the login behavior.
 * @param {string} loginBehavior
 * @return {void}
 */
LoginManager.setLoginBehavior = function(loginBehavior) {};

/**
 * Getter for the default audience.
 * @return {!Promise<string>}
 */
LoginManager.getDefaultAudience = function() {};

/**
 * Setter for the default audience.
 * @param {string} defaultAudience
 * @return {void}
 */
LoginManager.setDefaultAudience = function(defaultAudience) {};

/**
 * Logs out the user.
 * @return {void}
 */
LoginManager.logOut = function() {};
/** @const */
var MessageDialog = {};

/**
 * Check if the dialog can be shown.
 * @param {?} shareContent
 * @return {!Promise<boolean>}
 */
MessageDialog.canShow = function(shareContent) {};

/**
 * Shows the dialog using the specified content.
 * @param {?} shareContent
 * @return {!Promise<?>}
 */
MessageDialog.show = function(shareContent) {};

/**
 * Sets whether or not the native message dialog should fail when it encounters a data error.
 * @param {boolean} shouldFailOnDataError
 * @return {void}
 */
MessageDialog.setShouldFailOnDataError = function(shouldFailOnDataError) {};
/**
 * @record
 * @struct
 */
function SendButtonProps() {}
 /** @type {?} */
SendButtonProps.prototype.shareContent;
 /** @type {?} */
SendButtonProps.prototype.style;
/**
 * @constructor
 * @struct
 */
function SendButton() {}
/** @const */
var ShareApi = {};

/**
 * Check if the content can be shared via share api.
 * @param {?} shareContent
 * @return {!Promise<boolean>}
 */
ShareApi.canShare = function(shareContent) {};

/**
 * For iOS only, creates a User Owned Open Graph object without an action.
 * NOTE: Only one share action can be performed at a time.
 * \@platform ios
 * @param {?} openGraphObject
 * @return {!Promise<?>}
 */
ShareApi.createOpenGraphObject = function(openGraphObject) {};

/**
 * Shares the specified content with a message.
 * NOTE: Only one share action can be performed at a time.
 * @param {?} shareContent
 * @param {string} graphNode
 * @param {string} message
 * @return {!Promise<?>}
 */
ShareApi.share = function(shareContent, graphNode, message) {};
/**
 * @record
 * @struct
 */
function ShareButtonProps() {}
 /** @type {?} */
ShareButtonProps.prototype.shareContent;
 /** @type {?} */
ShareButtonProps.prototype.style;
/**
 * @constructor
 * @struct
 */
function ShareButton() {}

/** @typedef {string} */
var ShareDialogMode;

/** @typedef {string} */
var ShareDialogModeAndroid;

/** @typedef {string} */
var ShareDialogModeIOS;
/** @const */
var ShareDialog = {};

/**
 * Check if the dialog can be shown.
 * @param {?} shareContent
 * @return {!Promise<boolean>}
 */
ShareDialog.canShow = function(shareContent) {};

/**
 * Shows the dialog using the specified content.
 * @param {?} shareContent
 * @return {!Promise<?>}
 */
ShareDialog.show = function(shareContent) {};

/**
 * Sets the mode for the share dialog.
 * @param {string} mode
 * @return {void}
 */
ShareDialog.setMode = function(mode) {};

/**
 * Sets whether or not the native share dialog should fail when it encounters a data error.
 * @param {boolean} shouldFailOnDataError
 * @return {void}
 */
ShareDialog.setShouldFailOnDataError = function(shouldFailOnDataError) {};
