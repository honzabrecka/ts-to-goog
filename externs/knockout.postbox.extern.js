/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/knockout.postbox/index.d.ts:
/**
 * @record
 * @struct
 */
function KnockoutPostBox() {}
 /** @type {function(?): string} */
KnockoutPostBox.prototype.serializer;

/**
 * @template T
 * @param {string} topic
 * @param {function(T): void} handler
 * @param {?=} target
 * @return {!KnockoutSubscription}
 */
KnockoutPostBox.prototype.subscribe = function(topic, handler, target) {};

/**
 * @template T
 * @param {string} topic
 * @param {T=} value
 * @return {void}
 */
KnockoutPostBox.prototype.publish = function(topic, value) {};

/**
 * @template T
 * @param {T} newValue
 * @param {T} oldValue
 * @return {boolean}
 */
KnockoutPostBox.prototype.defaultComparer = function(newValue, oldValue) {};

/**
 * @return {void}
 */
KnockoutPostBox.prototype.reset = function() {};

/**
 * @param {string} topic
 * @param {boolean=} useLastPublishedValueToInitialize
 * @param {function(?): T=} transform
 * @return {!KnockoutObservable}
 */
KnockoutObservable.prototype.subscribeTo = function(topic, useLastPublishedValueToInitialize, transform) {};

/**
 * @param {string} topic
 * @return {!KnockoutObservable}
 */
KnockoutObservable.prototype.unsubscribeFrom = function(topic) {};

/**
 * @param {string} topic
 * @param {boolean=} skipInitialPublish
 * @param {function(T, T): boolean=} equalityComparer
 * @return {!KnockoutObservable}
 */
KnockoutObservable.prototype.publishOn = function(topic, skipInitialPublish, equalityComparer) {};

/**
 * @param {string} topic
 * @return {!KnockoutObservable}
 */
KnockoutObservable.prototype.stopPublishingOn = function(topic) {};

/**
 * @param {string} topic
 * @param {boolean=} initializeWithLatestValue
 * @param {boolean=} skipInitialPublish
 * @param {function(T, T): boolean=} equalityComparer
 * @return {!KnockoutObservable}
 */
KnockoutObservable.prototype.syncWith = function(topic, initializeWithLatestValue, skipInitialPublish, equalityComparer) {};

/**
 * @param {string} topic
 * @param {boolean=} useLastPublishedValueToInitialize
 * @param {function(?): ?=} transform
 * @return {!KnockoutObservableArray}
 */
KnockoutObservableArray.prototype.subscribeTo = function(topic, useLastPublishedValueToInitialize, transform) {};

/**
 * @param {string} topic
 * @return {!KnockoutObservableArray}
 */
KnockoutObservableArray.prototype.unsubscribeFrom = function(topic) {};

/**
 * @param {string} topic
 * @param {boolean=} skipInitialPublish
 * @param {function(?, ?): boolean=} equalityComparer
 * @return {!KnockoutObservableArray}
 */
KnockoutObservableArray.prototype.publishOn = function(topic, skipInitialPublish, equalityComparer) {};

/**
 * @param {string} topic
 * @return {!KnockoutObservableArray}
 */
KnockoutObservableArray.prototype.stopPublishingOn = function(topic) {};

/**
 * @param {string} topic
 * @param {boolean=} initializeWithLatestValue
 * @param {boolean=} skipInitialPublish
 * @param {function(?, ?): boolean=} equalityComparer
 * @return {!KnockoutObservableArray}
 */
KnockoutObservableArray.prototype.syncWith = function(topic, initializeWithLatestValue, skipInitialPublish, equalityComparer) {};
 /** @type {!KnockoutPostBox} */
KnockoutStatic.prototype.postbox;
