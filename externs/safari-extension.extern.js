/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/safari-extension/index.d.ts:
 /** @type {?} */
Window.prototype.safari;
/** @const */
var safari = {};
 /** @type {!SafariApplication} */
safari.application;
 /** @type {!SafariExtension} */
safari.extension;
 /** @type {(!SafariExtensionGlobalPage|!SafariExtensionBar)} */
safari.self;
/**
 * @record
 * @struct
 */
function SafariEvent() {}
 /** @type {string} */
SafariEvent.prototype.type;
 /** @type {!SafariEventTarget} */
SafariEvent.prototype.target;
 /** @type {!SafariEventTarget} */
SafariEvent.prototype.currentTarget;
 /** @type {number} */
SafariEvent.prototype.timestamp;
 /** @type {number} */
SafariEvent.prototype.eventPhase;
 /** @type {boolean} */
SafariEvent.prototype.bubbles;
 /** @type {boolean} */
SafariEvent.prototype.cancelable;
 /** @type {boolean} */
SafariEvent.prototype.defaultPrevented;

/**
 * Prevents the event from any further propagation.
 * Propagation can be stopped only fon cancelable events. After propagation is stopped, the event is not sent to any other targets.
 * @return {void}
 */
SafariEvent.prototype.stopPropagation = function() {};

/**
 * Prevents the browser from performing the default action for an event.
 * Use this method to indicate that your extension has already fully handled the event; you donâ€™t want the browser to do anything. Note that preventing the default action does not stop an event from propagating.
 * @return {void}
 */
SafariEvent.prototype.preventDefault = function() {};
/**
 * @record
 * @struct
 */
function SafariEventListener() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SafariEventTarget() {}

/**
 * @param {string} type
 * @param {!SafariEventListener} listener
 * @param {boolean=} useCapture
 * @return {void}
 */
SafariEventTarget.prototype.addEventListener = function(type, listener, useCapture) {};

/**
 * @param {string} type
 * @param {!SafariEventListener} listener
 * @param {boolean=} useCapture
 * @return {void}
 */
SafariEventTarget.prototype.removeEventListener = function(type, listener, useCapture) {};
/**
 * @extends {SafariEventTarget}
 * @record
 * @struct
 */
function SafariBrowserWindow() {}
 /** @type {!Array<!SafariBrowserTab>} */
SafariBrowserWindow.prototype.tabs;
 /** @type {boolean} */
SafariBrowserWindow.prototype.visible;
 /** @type {!SafariBrowserTab} */
SafariBrowserWindow.prototype.activeTab;

/**
 * @return {void}
 */
SafariBrowserWindow.prototype.activate = function() {};

/**
 * @return {void}
 */
SafariBrowserWindow.prototype.close = function() {};

/**
 * Opens a new tab in the window.
 * Available in Safari 5.0 and later.
 * @param {string=} visibility Either foreground if the tab should be opened in the foreground, or background if it should be opened in the background.
 * @param {number=} index The desired location of the new tab.
 * @return {!SafariBrowserTab} A new tab.
 */
SafariBrowserWindow.prototype.openTab = function(visibility, index) {};

/**
 * @param {!SafariBrowserTab} tab
 * @param {number} index
 * @return {!SafariBrowserTab}
 */
SafariBrowserWindow.prototype.insertTab = function(tab, index) {};
/**
 * @extends {SafariEventTarget}
 * @record
 * @struct
 */
function SafariBrowserTab() {}
 /** @type {!SafariBrowserWindow} */
SafariBrowserTab.prototype.browserWindow;
 /** @type {!SafariReader} */
SafariBrowserTab.prototype.reader;
 /** @type {string} */
SafariBrowserTab.prototype.title;
 /** @type {!SafariWebPageProxy} */
SafariBrowserTab.prototype.page;
 /** @type {string} */
SafariBrowserTab.prototype.url;

/**
 * @return {string}
 */
SafariBrowserTab.prototype.visibleContentsAsDataURL = function() {};

/**
 * @return {void}
 */
SafariBrowserTab.prototype.activate = function() {};

/**
 * @return {void}
 */
SafariBrowserTab.prototype.close = function() {};
/**
 * @extends {SafariEventTarget}
 * @record
 * @struct
 */
function SafariReader() {}
 /** @type {boolean} */
SafariReader.prototype.available;
 /** @type {!SafariBrowserTab} */
SafariReader.prototype.tab;
 /** @type {boolean} */
SafariReader.prototype.visible;

/**
 * @return {void}
 */
SafariReader.prototype.enter = function() {};

/**
 * @return {void}
 */
SafariReader.prototype.exit = function() {};

/**
 * @param {string} name
 * @param {?=} message
 * @return {void}
 */
SafariReader.prototype.dispatchMessage = function(name, message) {};
/**
 * @record
 * @struct
 */
function SafariWebPageProxy() {}

/**
 * @param {string} name
 * @param {?=} message
 * @return {void}
 */
SafariWebPageProxy.prototype.dispatchMessage = function(name, message) {};
/**
 * @record
 * @struct
 */
function SafariExtensionGlobalPage() {}
 /** @type {!Window} */
SafariExtensionGlobalPage.prototype.contentWindow;
/**
 * @extends {SafariEventTarget}
 * @record
 * @struct
 */
function SafariExtensionPopover() {}
 /** @type {string} */
SafariExtensionPopover.prototype.identifier;
 /** @type {boolean} */
SafariExtensionPopover.prototype.visible;
 /** @type {!Window} */
SafariExtensionPopover.prototype.contentWindow;
 /** @type {number} */
SafariExtensionPopover.prototype.height;
 /** @type {number} */
SafariExtensionPopover.prototype.width;

/**
 * @return {void}
 */
SafariExtensionPopover.prototype.hide = function() {};
/**
 * @record
 * @struct
 */
function SafariExtensionMenu() {}
 /** @type {string} */
SafariExtensionMenu.prototype.identifier;
 /** @type {!Array<!SafariExtensionMenuItem>} */
SafariExtensionMenu.prototype.menuItems;
 /** @type {boolean} */
SafariExtensionMenu.prototype.visible;

/**
 * @param {string} identifier
 * @param {string} title
 * @param {string=} command
 * @return {!SafariExtensionMenuItem}
 */
SafariExtensionMenu.prototype.appendMenuItem = function(identifier, title, command) {};

/**
 * @param {string} identifier
 * @return {!SafariExtensionMenuItem}
 */
SafariExtensionMenu.prototype.appendSeparator = function(identifier) {};

/**
 * @param {number} index
 * @param {string} identifier
 * @param {string} title
 * @param {string=} command
 * @return {!SafariExtensionMenuItem}
 */
SafariExtensionMenu.prototype.insertMenuItem = function(index, identifier, title, command) {};

/**
 * @param {number} index
 * @param {string} identifier
 * @return {!SafariExtensionMenuItem}
 */
SafariExtensionMenu.prototype.insertSeparator = function(index, identifier) {};

/**
 * @param {number} index
 * @return {void}
 */
SafariExtensionMenu.prototype.removeMenuItem = function(index) {};
/**
 * @extends {SafariEventTarget}
 * @record
 * @struct
 */
function SafariExtensionMenuItem() {}
 /** @type {string} */
SafariExtensionMenuItem.prototype.command;
 /** @type {string} */
SafariExtensionMenuItem.prototype.identifier;
 /** @type {boolean} */
SafariExtensionMenuItem.prototype.separator;
 /** @type {string} */
SafariExtensionMenuItem.prototype.title;
 /** @type {string} */
SafariExtensionMenuItem.prototype.image;
 /** @type {!SafariExtensionMenu} */
SafariExtensionMenuItem.prototype.submenu;
 /** @type {boolean} */
SafariExtensionMenuItem.prototype.visible;
 /** @type {boolean} */
SafariExtensionMenuItem.prototype.disabled;
 /** @type {number} */
SafariExtensionMenuItem.prototype.checkedState;
/**
 * @extends {SafariEventTarget}
 * @record
 * @struct
 */
function SafariExtensionSettings() {}

/* TODO: IndexSignature:  */

/* TODO: IndexSignature:  */

/**
 * @param {string} key
 * @return {?}
 */
SafariExtensionSettings.prototype.getItem = function(key) {};

/**
 * @param {string} key
 * @param {?} value
 * @return {void}
 */
SafariExtensionSettings.prototype.setItem = function(key, value) {};

/**
 * @param {string} key
 * @return {void}
 */
SafariExtensionSettings.prototype.removeItem = function(key) {};

/**
 * @return {void}
 */
SafariExtensionSettings.prototype.clear = function() {};
/**
 * @extends {SafariEventTarget}
 * @record
 * @struct
 */
function SafariExtensionSecureSettings() {}

/* TODO: IndexSignature:  */

/**
 * @param {string} key
 * @return {?}
 */
SafariExtensionSecureSettings.prototype.getItem = function(key) {};

/**
 * @param {string} key
 * @param {?} value
 * @return {void}
 */
SafariExtensionSecureSettings.prototype.setItem = function(key, value) {};

/**
 * @param {string} key
 * @return {void}
 */
SafariExtensionSecureSettings.prototype.removeItem = function(key) {};

/**
 * @return {void}
 */
SafariExtensionSecureSettings.prototype.clear = function() {};
/**
 * @extends {SafariEventTarget}
 * @record
 * @struct
 */
function SafariExtensionBar() {}
 /** @type {string} */
SafariExtensionBar.prototype.identifier;
 /** @type {string} */
SafariExtensionBar.prototype.label;
 /** @type {boolean} */
SafariExtensionBar.prototype.visible;
 /** @type {!SafariBrowserWindow} */
SafariExtensionBar.prototype.browserWindow;
 /** @type {!Window} */
SafariExtensionBar.prototype.contentWindow;

/**
 * @param {boolean=} doNotRemember
 * @return {void}
 */
SafariExtensionBar.prototype.hide = function(doNotRemember) {};

/**
 * @param {boolean=} doNotRemember
 * @return {void}
 */
SafariExtensionBar.prototype.show = function(doNotRemember) {};
/**
 * @extends {SafariEventTarget}
 * @record
 * @struct
 */
function SafariExtensionToolbarItem() {}
 /** @type {number} */
SafariExtensionToolbarItem.prototype.badge;
 /** @type {string} */
SafariExtensionToolbarItem.prototype.image;
 /** @type {string} */
SafariExtensionToolbarItem.prototype.label;
 /** @type {string} */
SafariExtensionToolbarItem.prototype.paletteLabel;
 /** @type {string} */
SafariExtensionToolbarItem.prototype.toolTip;
 /** @type {!SafariExtensionMenu} */
SafariExtensionToolbarItem.prototype.menu;
 /** @type {!SafariExtensionPopover} */
SafariExtensionToolbarItem.prototype.popover;
 /** @type {!SafariBrowserWindow} */
SafariExtensionToolbarItem.prototype.browserWindow;
 /** @type {string} */
SafariExtensionToolbarItem.prototype.command;
 /** @type {boolean} */
SafariExtensionToolbarItem.prototype.disabled;
 /** @type {string} */
SafariExtensionToolbarItem.prototype.identifier;

/**
 * @return {void}
 */
SafariExtensionToolbarItem.prototype.showMenu = function() {};

/**
 * @return {void}
 */
SafariExtensionToolbarItem.prototype.showPopover = function() {};

/**
 * @return {void}
 */
SafariExtensionToolbarItem.prototype.validate = function() {};
/**
 * @record
 * @struct
 */
function SafariPrivateBrowsing() {}
 /** @type {boolean} */
SafariPrivateBrowsing.prototype.enabled;
/**
 * @record
 * @struct
 */
function SafariExtension() {}
 /** @type {!Array<!SafariExtensionBar>} */
SafariExtension.prototype.bars;
 /** @type {string} */
SafariExtension.prototype.baseURI;
 /** @type {!SafariExtensionGlobalPage} */
SafariExtension.prototype.globalPage;
 /** @type {!Array<!SafariExtensionToolbarItem>} */
SafariExtension.prototype.toolbarItems;
 /** @type {string} */
SafariExtension.prototype.displayVersion;
 /** @type {string} */
SafariExtension.prototype.bundleVersion;
 /** @type {!Array<!SafariExtensionMenu>} */
SafariExtension.prototype.menus;
 /** @type {!Array<!SafariExtensionPopover>} */
SafariExtension.prototype.popovers;
 /** @type {!SafariExtensionSettings} */
SafariExtension.prototype.settings;
 /** @type {!SafariExtensionSecureSettings} */
SafariExtension.prototype.secureSettings;

/**
 * @param {string} identifier
 * @return {!SafariExtensionMenu}
 */
SafariExtension.prototype.createMenu = function(identifier) {};

/**
 * @param {string} identifier
 * @return {void}
 */
SafariExtension.prototype.removeMenu = function(identifier) {};

/**
 * @param {string} identifier
 * @param {string} url
 * @param {number=} width
 * @param {number=} height
 * @return {!SafariExtensionPopover}
 */
SafariExtension.prototype.createPopover = function(identifier, url, width, height) {};

/**
 * @param {string} identifier
 * @return {void}
 */
SafariExtension.prototype.removePopover = function(identifier) {};

/**
 * @param {string} source
 * @param {!Array<string>} whitelist
 * @param {!Array<string>} blacklist
 * @param {boolean} runAtEnd
 * @return {string}
 */
SafariExtension.prototype.addContentScript = function(source, whitelist, blacklist, runAtEnd) {};

/**
 * @param {string} url
 * @param {!Array<string>} whitelist
 * @param {!Array<string>} blacklist
 * @param {boolean} runAtEnd
 * @return {string}
 */
SafariExtension.prototype.addContentScriptFromURL = function(url, whitelist, blacklist, runAtEnd) {};

/**
 * @param {string} source
 * @param {!Array<string>} whitelist
 * @param {!Array<string>} blacklist
 * @return {string}
 */
SafariExtension.prototype.addContentStyleSheet = function(source, whitelist, blacklist) {};

/**
 * @param {string} url
 * @param {!Array<string>} whitelist
 * @param {!Array<string>} blacklist
 * @return {string}
 */
SafariExtension.prototype.addContentStyleSheetFromURL = function(url, whitelist, blacklist) {};

/**
 * @param {string} url
 * @return {void}
 */
SafariExtension.prototype.removeContentScript = function(url) {};

/**
 * @return {void}
 */
SafariExtension.prototype.removeContentScripts = function() {};

/**
 * @param {string} url
 * @return {void}
 */
SafariExtension.prototype.removeContentStyleSheet = function(url) {};

/**
 * @return {void}
 */
SafariExtension.prototype.removeContentStyleSheets = function() {};
/**
 * @extends {SafariEventTarget}
 * @record
 * @struct
 */
function SafariApplication() {}
 /** @type {!SafariBrowserWindow} */
SafariApplication.prototype.activeBrowserWindow;
 /** @type {!Array<!SafariBrowserWindow>} */
SafariApplication.prototype.browserWindows;
 /** @type {!SafariPrivateBrowsing} */
SafariApplication.prototype.privateBrowsing;

/**
 * @return {!SafariBrowserWindow}
 */
SafariApplication.prototype.openBrowserWindow = function() {};
/**
 * @extends {SafariEvent}
 * @record
 * @struct
 */
function SafariExtensionContextMenuEvent() {}
 /** @type {!SafariExtensionContextMenuItem} */
SafariExtensionContextMenuEvent.prototype.target;
 /** @type {!SafariExtensionContextMenuItem} */
SafariExtensionContextMenuEvent.prototype.currentTarget;
 /** @type {?} */
SafariExtensionContextMenuEvent.prototype.userInfo;
 /** @type {!SafariExtensionContextMenu} */
SafariExtensionContextMenuEvent.prototype.contextMenu;
/**
 * @record
 * @struct
 */
function SafariExtensionContextMenu() {}
 /** @type {!Array<?>} */
SafariExtensionContextMenu.prototype.contextMenuItems;

/**
 * Appends a menu item to the contextual menu.
 * If another menu item with the same identifier already exists, it is removed before appending the menu item. If command is not supplied, identifier is used as the command identifier.
 * @param {string} identifier The unique identifier of the menu item.
 * @param {string} title The title of the menu item.
 * @param {string=} command The command identifier that the context menu item sends when activated.
 * @return {!SafariExtensionContextMenuItem} The context menu item that was appended.
 */
SafariExtensionContextMenu.prototype.appendContextMenuItem = function(identifier, title, command) {};

/**
 * Inserts a menu item at a specific index in the contextual menu.
 * If another menu item with the same identifier already exists, it is removed before appending the menu item. If command is not supplied, identifier is used as the command identifier.
 * @param {number} index The index where the menu item is being inserted.
 * @param {string} identifier The unique identifier of the menu item.
 * @param {string} title The title of the menu item.
 * @param {string=} command The command identifier that the context menu item sends when activated.
 * @return {!SafariExtensionContextMenuItem} The context menu item that was inserted.
 */
SafariExtensionContextMenu.prototype.insertContextMenuItem = function(index, identifier, title, command) {};
/**
 * @extends {SafariEventTarget}
 * @record
 * @struct
 */
function SafariExtensionContextMenuItem() {}
 /** @type {string} */
SafariExtensionContextMenuItem.prototype.command;
 /** @type {boolean} */
SafariExtensionContextMenuItem.prototype.disabled;
 /** @type {string} */
SafariExtensionContextMenuItem.prototype.identifier;
 /** @type {string} */
SafariExtensionContextMenuItem.prototype.title;
/**
 * @extends {SafariEvent}
 * @record
 * @struct
 */
function SafariValidateEvent() {}
 /** @type {string} */
SafariValidateEvent.prototype.command;
/**
 * @record
 * @struct
 */
function SafariExtensionContextMenuItemValidateEvent() {}
 /** @type {!SafariExtensionContextMenuItem} */
SafariExtensionContextMenuItemValidateEvent.prototype.target;
 /** @type {!SafariExtensionContextMenuItem} */
SafariExtensionContextMenuItemValidateEvent.prototype.currentTarget;
 /** @type {?} */
SafariExtensionContextMenuItemValidateEvent.prototype.userInfo;
/**
 * @extends {SafariEvent}
 * @record
 * @struct
 */
function SafariCommandEvent() {}
 /** @type {string} */
SafariCommandEvent.prototype.command;
/**
 * @extends {SafariCommandEvent}
 * @record
 * @struct
 */
function SafariExtensionContextMenuItemCommandEvent() {}
 /** @type {!SafariExtensionContextMenuItem} */
SafariExtensionContextMenuItemCommandEvent.prototype.target;
 /** @type {!SafariExtensionContextMenuItem} */
SafariExtensionContextMenuItemCommandEvent.prototype.currentTarget;
 /** @type {?} */
SafariExtensionContextMenuItemCommandEvent.prototype.userInfo;
/**
 * @extends {SafariEvent}
 * @record
 * @struct
 */
function SafariExtensionSettingsChangeEvent() {}
 /** @type {(!SafariExtensionSettings|!SafariExtensionSecureSettings)} */
SafariExtensionSettingsChangeEvent.prototype.target;
 /** @type {(!SafariExtensionSettings|!SafariExtensionSecureSettings)} */
SafariExtensionSettingsChangeEvent.prototype.currentTarget;
 /** @type {string} */
SafariExtensionSettingsChangeEvent.prototype.key;
 /** @type {?} */
SafariExtensionSettingsChangeEvent.prototype.oldValue;
 /** @type {?} */
SafariExtensionSettingsChangeEvent.prototype.newValue;
/**
 * @extends {SafariEvent}
 * @record
 * @struct
 */
function SafariExtensionMessageEvent() {}
 /** @type {string} */
SafariExtensionMessageEvent.prototype.name;
 /** @type {?} */
SafariExtensionMessageEvent.prototype.message;
