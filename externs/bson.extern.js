/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/bson/index.d.ts:
/**
 * @record
 * @struct
 */
function DeserializeOptions() {}
 /** @type {boolean} */
DeserializeOptions.prototype.evalFunctions;
 /** @type {boolean} */
DeserializeOptions.prototype.cacheFunctions;
 /** @type {boolean} */
DeserializeOptions.prototype.cacheFunctionsCrc32;
 /** @type {boolean} */
DeserializeOptions.prototype.promoteBuffers;
/**
 * @constructor
 * @struct
 */
function BSON() {}

/**
 * @param {?} object
 * @param {boolean=} checkKeys
 * @param {boolean=} asBuffer
 * @param {boolean=} serializeFunctions
 * @return {?}
 */
BSON.prototype.serialize = function(object, checkKeys, asBuffer, serializeFunctions) {};

/**
 * @param {?} buffer
 * @param {?=} options
 * @param {boolean=} isArray
 * @return {?}
 */
BSON.prototype.deserialize = function(buffer, options, isArray) {};

/**
 * @constructor
 * @struct
 * @param {?} buffer
 * @param {number=} subType
 */
function Binary(buffer, subType) {}
 /** @type {number} */
Binary.SUBTYPE_DEFAULT;
 /** @type {number} */
Binary.SUBTYPE_FUNCTION;
 /** @type {number} */
Binary.SUBTYPE_BYTE_ARRAY;
 /** @type {number} */
Binary.SUBTYPE_UUID_OLD;
 /** @type {number} */
Binary.SUBTYPE_UUID;
 /** @type {number} */
Binary.SUBTYPE_MD5;
 /** @type {number} */
Binary.SUBTYPE_USER_DEFINED;

/**
 * The length of the binary.
 * @return {number}
 */
Binary.prototype.length = function() {};

/**
 * Updates this binary with byte_value
 * @param {(string|number)} byte_value
 * @return {void}
 */
Binary.prototype.put = function(byte_value) {};

/**
 * Reads length bytes starting at position.
 * @param {number} position
 * @param {number} length
 * @return {?}
 */
Binary.prototype.read = function(position, length) {};

/**
 * Returns the value of this binary as a string.
 * @return {string}
 */
Binary.prototype.value = function() {};

/**
 * Writes a buffer or string to the binary
 * @param {(string|?)} buffer
 * @param {number} offset
 * @return {void}
 */
Binary.prototype.write = function(buffer, offset) {};

/**
 * @constructor
 * @struct
 * @param {(string|!Function)} code
 * @param {?=} scope
 */
function Code(code, scope) {}

/**
 * @constructor
 * @struct
 * @param {string} namespace
 * @param {?} oid
 * @param {string=} db
 */
function DBRef(namespace, oid, db) {}

/**
 * @constructor
 * @struct
 * @param {number} value
 */
function Double(value) {}

/**
 * @return {number}
 */
Double.prototype.valueOf = function() {};

/**
 * @constructor
 * @struct
 * @param {number} low
 * @param {number} high
 */
function Long(low, high) {}
 /** @type {?} */
Long.MAX_VALUE;
 /** @type {?} */
Long.MIN_VALUE;
 /** @type {?} */
Long.NEG_ONE;
 /** @type {?} */
Long.ONE;
 /** @type {?} */
Long.ZERO;

/**
 * @param {number} i
 * @return {?}
 */
Long.fromInt = function(i) {};

/**
 * @param {number} n
 * @return {?}
 */
Long.fromNumber = function(n) {};

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @return {?}
 */
Long.fromBits = function(lowBits, highBits) {};

/**
 * @param {string} s
 * @param {number=} opt_radix
 * @return {?}
 */
Long.fromString = function(s, opt_radix) {};

/**
 * @param {?} other
 * @return {?}
 */
Long.prototype.add = function(other) {};

/**
 * @param {?} other
 * @return {?}
 */
Long.prototype.and = function(other) {};

/**
 * @param {?} other
 * @return {number}
 */
Long.prototype.compare = function(other) {};

/**
 * @param {?} other
 * @return {?}
 */
Long.prototype.div = function(other) {};

/**
 * @param {?} other
 * @return {boolean}
 */
Long.prototype.equals = function(other) {};

/**
 * @return {number}
 */
Long.prototype.getHighBits = function() {};

/**
 * @return {number}
 */
Long.prototype.getLowBits = function() {};

/**
 * @return {number}
 */
Long.prototype.getLowBitsUnsigned = function() {};

/**
 * @return {number}
 */
Long.prototype.getNumBitsAbs = function() {};

/**
 * @param {?} other
 * @return {number}
 */
Long.prototype.greaterThan = function(other) {};

/**
 * @param {?} other
 * @return {number}
 */
Long.prototype.greaterThanOrEqual = function(other) {};

/**
 * @return {boolean}
 */
Long.prototype.isNegative = function() {};

/**
 * @return {boolean}
 */
Long.prototype.isOdd = function() {};

/**
 * @return {boolean}
 */
Long.prototype.isZero = function() {};

/**
 * @param {?} other
 * @return {boolean}
 */
Long.prototype.lessThan = function(other) {};

/**
 * @param {?} other
 * @return {boolean}
 */
Long.prototype.lessThanOrEqual = function(other) {};

/**
 * @param {?} other
 * @return {?}
 */
Long.prototype.modulo = function(other) {};

/**
 * @param {?} other
 * @return {?}
 */
Long.prototype.multiply = function(other) {};

/**
 * @return {?}
 */
Long.prototype.negate = function() {};

/**
 * @return {?}
 */
Long.prototype.not = function() {};

/**
 * @param {?} other
 * @return {boolean}
 */
Long.prototype.notEquals = function(other) {};

/**
 * @param {?} other
 * @return {?}
 */
Long.prototype.or = function(other) {};

/**
 * @param {number} other
 * @return {?}
 */
Long.prototype.shiftLeft = function(other) {};

/**
 * @param {number} other
 * @return {?}
 */
Long.prototype.shiftRight = function(other) {};

/**
 * @param {number} other
 * @return {?}
 */
Long.prototype.shiftRightUnsigned = function(other) {};

/**
 * @param {?} other
 * @return {?}
 */
Long.prototype.subtract = function(other) {};

/**
 * @return {number}
 */
Long.prototype.toInt = function() {};

/**
 * @return {string}
 */
Long.prototype.toJSON = function() {};

/**
 * @return {number}
 */
Long.prototype.toNumber = function() {};

/**
 * @param {number=} radix
 * @return {string}
 */
Long.prototype.toString = function(radix) {};

/**
 * @param {?} other
 * @return {?}
 */
Long.prototype.xor = function(other) {};

/**
 * @constructor
 * @struct
 * @param {?} bytes
 */
function Decimal128(bytes) {}

/**
 * @param {string} s
 * @return {?}
 */
Decimal128.fromString = function(s) {};

/**
 * @return {string}
 */
Decimal128.prototype.toJSON = function() {};

/**
 * @return {string}
 */
Decimal128.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 */
function MaxKey() {}

/**
 * @constructor
 * @struct
 */
function MinKey() {}

/**
 * @constructor
 * @struct
 * Create a new ObjectID instance
 * @param {(string|number|?)=} id
 */
function ObjectID(id) {}
 /** @type {number} */
ObjectID.prototype.generationTime;

/**
 * Creates an ObjectID from a hex string representation of an ObjectID.
 * @param {string} hexString
 * @return {?}
 */
ObjectID.createFromHexString = function(hexString) {};

/**
 * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.
 * @param {number} time
 * @return {?}
 */
ObjectID.createFromTime = function(time) {};

/**
 * Checks if a value is a valid bson ObjectID
 * 
 * @param {(string|number|?)} id
 * @return {boolean}
 */
ObjectID.isValid = function(id) {};

/**
 * Compares the equality of this ObjectID with `otherID`.
 * @param {?} otherID
 * @return {boolean}
 */
ObjectID.prototype.equals = function(otherID) {};

/**
 * Generate a 12 byte id string used in ObjectID's
 * @param {number=} time
 * @return {string}
 */
ObjectID.prototype.generate = function(time) {};

/**
 * Returns the generation date (accurate up to the second) that this ID was generated.
 * @return {!Date}
 */
ObjectID.prototype.getTimestamp = function() {};

/**
 * Return the ObjectID id as a 24 byte hex string representation
 * @return {string}
 */
ObjectID.prototype.toHexString = function() {};

/* TODO: ExportDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {string} pattern
 * @param {string} options
 */
function BSONRegExp(pattern, options) {}

/**
 * @constructor
 * @struct
 * @param {number} low
 * @param {number} high
 */
function Timestamp(low, high) {}
 /** @type {?} */
Timestamp.MAX_VALUE;
 /** @type {?} */
Timestamp.MIN_VALUE;
 /** @type {?} */
Timestamp.NEG_ONE;
 /** @type {?} */
Timestamp.ONE;
 /** @type {?} */
Timestamp.ZERO;

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @return {?}
 */
Timestamp.fromBits = function(lowBits, highBits) {};

/**
 * @param {number} value
 * @return {?}
 */
Timestamp.fromInt = function(value) {};

/**
 * @param {number} value
 * @return {?}
 */
Timestamp.fromNumber = function(value) {};

/**
 * @param {string} str
 * @param {number=} radix
 * @return {?}
 */
Timestamp.fromString = function(str, radix) {};

/**
 * @param {?} other
 * @return {?}
 */
Timestamp.prototype.add = function(other) {};

/**
 * @param {?} other
 * @return {?}
 */
Timestamp.prototype.and = function(other) {};

/**
 * @param {?} other
 * @return {number}
 */
Timestamp.prototype.compare = function(other) {};

/**
 * @param {?} other
 * @return {?}
 */
Timestamp.prototype.div = function(other) {};

/**
 * @param {?} other
 * @return {boolean}
 */
Timestamp.prototype.equals = function(other) {};

/**
 * @return {number}
 */
Timestamp.prototype.getHighBits = function() {};

/**
 * @return {number}
 */
Timestamp.prototype.getLowBits = function() {};

/**
 * @return {number}
 */
Timestamp.prototype.getLowBitsUnsigned = function() {};

/**
 * @return {number}
 */
Timestamp.prototype.getNumBitsAbs = function() {};

/**
 * @param {?} other
 * @return {number}
 */
Timestamp.prototype.greaterThan = function(other) {};

/**
 * @param {?} other
 * @return {number}
 */
Timestamp.prototype.greaterThanOrEqual = function(other) {};

/**
 * @return {boolean}
 */
Timestamp.prototype.isNegative = function() {};

/**
 * @return {boolean}
 */
Timestamp.prototype.isOdd = function() {};

/**
 * @return {boolean}
 */
Timestamp.prototype.isZero = function() {};

/**
 * @param {?} other
 * @return {boolean}
 */
Timestamp.prototype.lessThan = function(other) {};

/**
 * @param {?} other
 * @return {boolean}
 */
Timestamp.prototype.lessThanOrEqual = function(other) {};

/**
 * @param {?} other
 * @return {?}
 */
Timestamp.prototype.modulo = function(other) {};

/**
 * @param {?} other
 * @return {?}
 */
Timestamp.prototype.multiply = function(other) {};

/**
 * @return {?}
 */
Timestamp.prototype.negate = function() {};

/**
 * @return {?}
 */
Timestamp.prototype.not = function() {};

/**
 * @param {?} other
 * @return {boolean}
 */
Timestamp.prototype.notEquals = function(other) {};

/**
 * @param {?} other
 * @return {?}
 */
Timestamp.prototype.or = function(other) {};

/**
 * @param {number} other
 * @return {?}
 */
Timestamp.prototype.shiftLeft = function(other) {};

/**
 * @param {number} other
 * @return {?}
 */
Timestamp.prototype.shiftRight = function(other) {};

/**
 * @param {number} other
 * @return {?}
 */
Timestamp.prototype.shiftRightUnsigned = function(other) {};

/**
 * @param {?} other
 * @return {?}
 */
Timestamp.prototype.subtract = function(other) {};

/**
 * @return {number}
 */
Timestamp.prototype.toInt = function() {};

/**
 * @return {string}
 */
Timestamp.prototype.toJSON = function() {};

/**
 * @return {number}
 */
Timestamp.prototype.toNumber = function() {};

/**
 * @param {number=} radix
 * @return {string}
 */
Timestamp.prototype.toString = function(radix) {};

/**
 * @param {?} other
 * @return {?}
 */
Timestamp.prototype.xor = function(other) {};
