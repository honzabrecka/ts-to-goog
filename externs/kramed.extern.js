/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/kramed/index.d.ts:
/**
 * @record
 * @struct
 */
function KramedStatic() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */
 /** @type {?} */
KramedStatic.prototype.Renderer;
 /** @type {?} */
KramedStatic.prototype.Parser;

/**
 * @param {string} src String of kramdown source to be compiled
 * @param {?=} options Hash of options
 * @return {!Array<?>}
 */
KramedStatic.prototype.lexer = function(src, options) {};

/**
 * Compiles kramdown to HTML.
 * 
 * Compiles kramdown to HTML.
 * 
 * @param {string} src String of kramdown source to be compiled
 * @param {?=} callback_or_options Function called when the kramdownString has been fully parsed when using async highlighting / Hash of options
 * @param {?=} callback Function called when the kramdownString has been fully parsed when using async highlighting
 * @return {string} String of compiled HTML
 */
KramedStatic.prototype.parse = function(src, callback_or_options, callback) {};

/**
 * @param {!Array<?>} src
 * @param {?=} options Hash of options
 * @return {string}
 */
KramedStatic.prototype.parser = function(src, options) {};

/**
 * Sets the default options.
 * 
 * @param {?} options Hash of options
 * @return {?}
 */
KramedStatic.prototype.setOptions = function(options) {};
/**
 * @record
 * @struct
 */
function KramedRenderer() {}

/**
 * @param {string} code
 * @param {string} language
 * @return {string}
 */
KramedRenderer.prototype.code = function(code, language) {};

/**
 * @param {string} quote
 * @return {string}
 */
KramedRenderer.prototype.blockquote = function(quote) {};

/**
 * @param {string} html
 * @return {string}
 */
KramedRenderer.prototype.html = function(html) {};

/**
 * @param {string} text
 * @param {number} level
 * @param {string} raw
 * @return {string}
 */
KramedRenderer.prototype.heading = function(text, level, raw) {};

/**
 * @return {string}
 */
KramedRenderer.prototype.hr = function() {};

/**
 * @param {string} body
 * @param {boolean} ordered
 * @return {string}
 */
KramedRenderer.prototype.list = function(body, ordered) {};

/**
 * @param {string} text
 * @return {string}
 */
KramedRenderer.prototype.listitem = function(text) {};

/**
 * @param {string} text
 * @return {string}
 */
KramedRenderer.prototype.paragraph = function(text) {};

/**
 * @param {string} header
 * @param {string} body
 * @return {string}
 */
KramedRenderer.prototype.table = function(header, body) {};

/**
 * @param {string} content
 * @return {string}
 */
KramedRenderer.prototype.tablerow = function(content) {};

/**
 * @param {string} content
 * @param {?} flags
 * @return {string}
 */
KramedRenderer.prototype.tablecell = function(content, flags) {};

/**
 * @param {string} text
 * @return {string}
 */
KramedRenderer.prototype.strong = function(text) {};

/**
 * @param {string} text
 * @return {string}
 */
KramedRenderer.prototype.em = function(text) {};

/**
 * @param {string} code
 * @return {string}
 */
KramedRenderer.prototype.codespan = function(code) {};

/**
 * @return {string}
 */
KramedRenderer.prototype.br = function() {};

/**
 * @param {string} text
 * @return {string}
 */
KramedRenderer.prototype.del = function(text) {};

/**
 * @param {string} href
 * @param {string} title
 * @param {string} text
 * @return {string}
 */
KramedRenderer.prototype.link = function(href, title, text) {};

/**
 * @param {string} href
 * @param {string} title
 * @param {string} text
 * @return {string}
 */
KramedRenderer.prototype.image = function(href, title, text) {};

/**
 * @param {string} text
 * @return {string}
 */
KramedRenderer.prototype.text = function(text) {};
/**
 * @record
 * @struct
 */
function KramedParser() {}

/**
 * @param {!Array<?>} source
 * @return {string}
 */
KramedParser.prototype.parse = function(source) {};
/**
 * @record
 * @struct
 */
function KramedOptions() {}
 /** @type {?} */
KramedOptions.prototype.renderer;
 /** @type {boolean} */
KramedOptions.prototype.gfm;
 /** @type {boolean} */
KramedOptions.prototype.tables;
 /** @type {boolean} */
KramedOptions.prototype.breaks;
 /** @type {boolean} */
KramedOptions.prototype.pedantic;
 /** @type {boolean} */
KramedOptions.prototype.sanitize;
 /** @type {boolean} */
KramedOptions.prototype.smartLists;
 /** @type {boolean} */
KramedOptions.prototype.silent;
 /** @type {string} */
KramedOptions.prototype.langPrefix;
 /** @type {boolean} */
KramedOptions.prototype.smartypants;

/**
 * A function to highlight code blocks. The function takes three arguments: code, lang, and callback.
 * @param {string} code
 * @param {string} lang
 * @param {?=} callback
 * @return {string}
 */
KramedOptions.prototype.highlight = function(code, lang, callback) {};
 /** @type {?} */
var kramed;
