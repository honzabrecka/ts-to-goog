/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/soap/index.d.ts:

/* TODO: ImportDeclaration in  */
/**
 * @record
 * @struct
 */
function Security() {}
/**
 * @record
 * @struct
 */
function SoapMethod() {}

/* TODO: CallSignature:  */

/**
 * @constructor
 * @struct
 * @param {string} username
 * @param {string} password
 */
function BasicAuthSecurity(username, password) {}

/**
 * @constructor
 * @struct
 * @param {string} token
 */
function BearerSecurity(token) {}

/**
 * @constructor
 * @struct
 * @param {string} username
 * @param {string} password
 * @param {?=} options
 */
function WSSecurity(username, password, options) {}

/**
 * @constructor
 * @struct
 * @param {(string|?)} key
 * @param {(string|?)} cert
 * @param {(string|?)|?=} ca_or_defaults
 * @param {?=} defaults
 */
function ClientSSLSecurity(key, cert, ca_or_defaults, defaults) {}
/**
 * @record
 * @struct
 */
function Client() {}

/* TODO: IndexSignature:  */

/**
 * @param {?} bodyAttribute
 * @param {string=} name
 * @param {string=} namespace
 * @param {string=} xmlns
 * @return {void}
 */
Client.prototype.addBodyAttribute = function(bodyAttribute, name, namespace, xmlns) {};

/**
 * @param {string} name
 * @param {?} value
 * @return {void}
 */
Client.prototype.addHttpHeader = function(name, value) {};

/**
 * @param {?} soapHeader
 * @param {string=} name
 * @param {string=} namespace
 * @param {string=} xmlns
 * @return {number}
 */
Client.prototype.addSoapHeader = function(soapHeader, name, namespace, xmlns) {};

/**
 * @param {number} index
 * @param {?} soapHeader
 * @param {string=} name
 * @param {string=} namespace
 * @param {string=} xmlns
 * @return {void}
 */
Client.prototype.changeSoapHeader = function(index, soapHeader, name, namespace, xmlns) {};

/**
 * @return {void}
 */
Client.prototype.clearBodyAttributes = function() {};

/**
 * @return {void}
 */
Client.prototype.clearHttpHeaders = function() {};

/**
 * @return {void}
 */
Client.prototype.clearSoapHeaders = function() {};

/**
 * @return {?}
 */
Client.prototype.describe = function() {};

/**
 * @return {!Array<?>}
 */
Client.prototype.getBodyAttributes = function() {};

/**
 * @return {!Array<?>}
 */
Client.prototype.getHttpHeaders = function() {};

/**
 * @return {!Array<?>}
 */
Client.prototype.getSoapHeaders = function() {};

/**
 * @param {string} endpoint
 * @return {void}
 */
Client.prototype.setEndpoint = function(endpoint) {};

/**
 * @param {string} action
 * @return {void}
 */
Client.prototype.setSOAPAction = function(action) {};

/**
 * @param {?} s
 * @return {void}
 */
Client.prototype.setSecurity = function(s) {};
/**
 * @record
 * @struct
 */
function Server() {}

/**
 * @param {?} soapHeader
 * @param {?} name
 * @param {?} namespace
 * @param {?} xmlns
 * @return {?}
 */
Server.prototype.addSoapHeader = function(soapHeader, name, namespace, xmlns) {};

/**
 * @param {?} index
 * @param {?} soapHeader
 * @param {?} name
 * @param {?} namespace
 * @param {?} xmlns
 * @return {?}
 */
Server.prototype.changeSoapHeader = function(index, soapHeader, name, namespace, xmlns) {};

/**
 * @return {?}
 */
Server.prototype.getSoapHeaders = function() {};

/**
 * @return {?}
 */
Server.prototype.clearSoapHeaders = function() {};

/**
 * @param {?} type
 * @param {?} data
 * @return {?}
 */
Server.prototype.log = function(type, data) {};

/**
 * @param {?} server
 * @param {string} path
 * @param {?} service
 * @param {string} wsdl
 * @return {?}
 */
function listen(server, path, service, wsdl) {}

/**
 * @param {string} wsdlPath
 * @param {?} options
 * @param {function(?, ?): void} fn
 * @return {void}
 */
function createClient(wsdlPath, options, fn) {}
/**
 * @record
 * @struct
 */
function Option() {}
 /** @type {string} */
Option.prototype.attributesKey;
 /** @type {boolean} */
Option.prototype.disableCache;
 /** @type {string} */
Option.prototype.endpoint;
 /** @type {string} */
Option.prototype.envelopeKey;
 /** @type {boolean} */
Option.prototype.escapeXML;
 /** @type {boolean} */
Option.prototype.forceSoap12Headers;
 /** @type {?} */
Option.prototype.httpClient;
 /** @type {boolean} */
Option.prototype.ignoreBaseNameSpaces;
 /** @type {(!Array<string>|?)} */
Option.prototype.ignoredNamespaces;
 /** @type {?} */
Option.prototype.overrideRootElement;
 /** @type {?} */
Option.prototype.request;
 /** @type {boolean} */
Option.prototype.stream;
 /** @type {string} */
Option.prototype.valueKey;
 /** @type {?} */
Option.prototype.wsdl_headers;
 /** @type {?} */
Option.prototype.wsdl_options;
 /** @type {string} */
Option.prototype.xmlKey;

/**
 * @constructor
 * @struct
 * @param {?=} options
 */
function HttpClient(options) {}

/**
 * @param {string} rurl
 * @param {?} data
 * @param {?=} exheaders
 * @param {?=} exoptions
 * @return {?}
 */
HttpClient.prototype.buildRequest = function(rurl, data, exheaders, exoptions) {};

/**
 * @param {?} req
 * @param {?} res
 * @param {?} body
 * @return {?}
 */
HttpClient.prototype.handleResponse = function(req, res, body) {};

/**
 * @param {string} rurl
 * @param {?} data
 * @param {?} callback
 * @param {?=} exheaders
 * @param {?=} exoptions
 * @return {?}
 */
HttpClient.prototype.request = function(rurl, data, callback, exheaders, exoptions) {};

/**
 * @param {string} rurl
 * @param {?} data
 * @param {?=} exheaders
 * @param {?=} exoptions
 * @return {?}
 */
HttpClient.prototype.requestStream = function(rurl, data, exheaders, exoptions) {};
