/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jquery.pjax/index.d.ts:
/**
 * @extends {JQuery.Event}
 * @record
 * @struct
 */
function PjaxPopStateEventObject() {}
 /** @type {string} */
PjaxPopStateEventObject.prototype.direction;
/**
 * @extends {JQuery.AjaxSettings}
 * @record
 * @struct
 */
function PjaxSettings() {}
 /** @type {string} */
PjaxSettings.prototype.container;
 /** @type {boolean} */
PjaxSettings.prototype.push;
 /** @type {boolean} */
PjaxSettings.prototype.replace;
 /** @type {number} */
PjaxSettings.prototype.maxCacheLength;
 /** @type {(string|function(): string)} */
PjaxSettings.prototype.version;
 /** @type {(number|boolean)} */
PjaxSettings.prototype.scrollTo;
 /** @type {!EventTarget} */
PjaxSettings.prototype.target;
 /** @type {string} */
PjaxSettings.prototype.fragment;

/**
 * Tell PJAX to listen links with delegation selector that, when click on them, fetches the href with ajax into the container.
 * Tries to make sure the back button and ctrl+click work the way you'd expect.
 * If `options.container` is not defined, the `data-pjax` attribute of the link will be treated as container.
 * If such an attribute is not defined too, the context runs with this statement will be treated as container.
 * Tell PJAX to listen links with delegation selector that, when click on them, fetches the href with ajax into the container.
 * Tries to make sure the back button and ctrl+click work the way you'd expect.
 * If `options.container` is not defined, the `data-pjax` attribute of the link will be treated as container.
 * If such an attribute is not defined too, the context runs with this statement will be treated as container.
 * @param {string} delegationSelector The selector to limit which links PJAX should listen on.
 * @param {!PjaxSettings|string=} options_or_containerSelector PJAX settings, which is a superset of jQuery AJAX settings. It includes the following specific options:
 * - container: a jQuery selector indicates where to stick the response body. E.g., $(container).html(xhr.responseBody).
 * - push: a boolean indicates whether to pushState the URL. Default is true.
 * - replace: a boolean indicates whether to use replaceState instead of pushState. Default is false. / A jQuery selector indicates where to stick the response body. E.g., $(containerSelector).html(xhr.responseBody).
 * @param {!PjaxSettings=} options PJAX settings, which is a superset of jQuery AJAX settings. It includes the following specific options:
 * - container: a jQuery selector indicates where to stick the response body. The `containerSelector` parameter has priority.
 * - push: a boolean indicates whether to pushState the URL. Default is true.
 * - replace: a boolean indicates whether to use replaceState instead of pushState. Default is false.
 * @return {?<!HTMLElement>} Returns the jQuery object
 */
JQuery.prototype.pjax = function(delegationSelector, options_or_containerSelector, options) {};

/**
 * @param {string} event
 * @param {function(!PjaxPopStateEventObject): void} handler
 * @return {JQuery}
 */
JQuery.prototype.on = function(event, handler) {};
 /** @type {!PjaxStatic} */
JQueryStatic.prototype.pjax;
/**
 * @record
 * @struct
 */
function PjaxStatic() {}
 /** @type {!PjaxSettings} */
PjaxStatic.prototype.defaults;

/* TODO: CallSignature:  */

/**
 * PJAX on click handler.
 * PJAX on click handler.
 * @param {!JQuery.Event<!EventTarget, null>} event A jQuery click event.
 * @param {!PjaxSettings|string=} options_or_containerSelector PJAX settings, which is a superset of jQuery AJAX settings. It includes the following specific options:
 * - container: a jQuery selector indicates where to stick the response body. E.g., $(container).html(xhr.responseBody).
 * - push: a boolean indicates whether to pushState the URL. Default is true.
 * - replace: a boolean indicates whether to use replaceState instead of pushState. Default is false. / A jQuery selector indicates where to stick the response body. E.g., $(containerSelector).html(xhr.responseBody).
 * @param {!PjaxSettings=} options PJAX settings, which is a superset of jQuery AJAX settings. It includes the following specific options:
 * - container: a jQuery selector indicates where to stick the response body. The `containerSelector` parameter has priority.
 * - push: a boolean indicates whether to pushState the URL. Default is true.
 * - replace: a boolean indicates whether to use replaceState instead of pushState. Default is false.
 * @return {void}
 */
PjaxStatic.prototype.click = function(event, options_or_containerSelector, options) {};

/**
 * PJAX on form submit handler
 * PJAX on form submit handler
 * @param {!JQuery.Event<!EventTarget, null>} event A jQuery click event.
 * @param {!PjaxSettings|string=} options_or_containerSelector PJAX settings, which is a superset of jQuery AJAX settings. It includes the following specific options:
 * - container: a jQuery selector indicates where to stick the response body. E.g., $(container).html(xhr.responseBody).
 * - push: a boolean indicates whether to pushState the URL. Default is true.
 * - replace: a boolean indicates whether to use replaceState instead of pushState. Default is false. / A jQuery selector indicates where to stick the response body. E.g., $(containerSelector).html(xhr.responseBody).
 * @param {!PjaxSettings=} options PJAX settings, which is a superset of jQuery AJAX settings. It includes the following specific options:
 * - container: a jQuery selector indicates where to stick the response body. The `containerSelector` parameter has priority.
 * - push: a boolean indicates whether to pushState the URL. Default is true.
 * - replace: a boolean indicates whether to use replaceState instead of pushState. Default is false.
 * @return {void}
 */
PjaxStatic.prototype.submit = function(event, options_or_containerSelector, options) {};

/**
 * Install pjax functions on $.pjax to enable pushState behavior. Does nothing if already enabled.
 * @return {void}
 */
PjaxStatic.prototype.enable = function() {};

/**
 * Disable pushState behavior.
 * This is the case when a browser doesn't support pushState. It is sometimes useful to disable pushState for debugging on a modern browser.
 * @return {void}
 */
PjaxStatic.prototype.disable = function() {};

/**
 * Reload current page with pjax.
 * @param {string} container
 * @param {!PjaxSettings=} options
 * @return {!JQueryXHR}
 */
PjaxStatic.prototype.reload = function(container, options) {};
 /** @type {boolean} */
JQuerySupport.prototype.pjax;
