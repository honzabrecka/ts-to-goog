/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/rx-node/index.d.ts:
/** @const */
var RxNode = {};
/**
 * @record
 * @struct
 */
RxNode.PublishableEventEmitter = function() {};

/**
 * @return {void}
 */
RxNode.PublishableEventEmitter.prototype.publish = function() {};

/**
 * Converts the given observable sequence to an event emitter with the given event name.
 * The errors are handled on the 'error' event and completion on the 'end' event.
 * You must call publish in order to invoke the subscription on the Observable sequence.
 * @template T
 * @param {?<T>} observable
 * @param {string} eventName
 * @return {!RxNode.PublishableEventEmitter}
 */
RxNode.toEventEmitter = function(observable, eventName) {};

/**
 * Converts a flowing stream to an Observable sequence.
 * @template T
 * @param {!NodeJS.ReadableStream} stream
 * @param {string=} finishEventName
 * @param {string=} dataEventName
 * @return {?<T>}
 */
RxNode.fromStream = function(stream, finishEventName, dataEventName) {};

/**
 * Converts a flowing readable stream to an Observable sequence.
 * @template T
 * @param {!NodeJS.ReadableStream} stream
 * @param {string=} dataEventName
 * @return {?<T>}
 */
RxNode.fromReadableStream = function(stream, dataEventName) {};

/**
 * Converts a flowing readline stream to an Observable sequence.
 * @template T
 * @param {!NodeJS.ReadableStream} stream
 * @return {?<T>}
 */
RxNode.fromReadLineStream = function(stream) {};

/**
 * Converts a flowing writeable stream to an Observable sequence.
 * @template T
 * @param {!NodeJS.WritableStream} stream
 * @return {?<T>}
 */
RxNode.fromWritableStream = function(stream) {};

/**
 * Converts a flowing transform stream to an Observable sequence.
 * @template T
 * @param {!NodeJS.ReadWriteStream} stream
 * @param {string=} dataEventName
 * @return {?<T>}
 */
RxNode.fromTransformStream = function(stream, dataEventName) {};

/**
 * Writes an observable sequence to a stream
 * @template T
 * @param {?<T>} observable
 * @param {!NodeJS.WritableStream} stream
 * @param {string} encoding
 * @return {!Rx.Disposable}
 */
RxNode.writeToStream = function(observable, stream, encoding) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "rx-node"
/** @const */
tsickle_declare_module.rx_node = {};

/* TODO: ExportAssignment in tsickle_declare_module.rx_node */
