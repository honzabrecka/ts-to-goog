/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/zetapush-js/index.d.ts:
/**
 * @record
 * @struct
 */
function HandshakeFields() {}
 /** @type {?} */
HandshakeFields.prototype.ext;
/**
 * @record
 * @struct
 */
function AbstractHandshakeOptions() {}
 /** @type {string} */
AbstractHandshakeOptions.prototype.authType;
 /** @type {string} */
AbstractHandshakeOptions.prototype.sandboxId;
 /** @type {string} */
AbstractHandshakeOptions.prototype.deploymentId;
/**
 * @record
 * @struct
 */
function CredentialsHandshakeOptions() {}
 /** @type {string} */
CredentialsHandshakeOptions.prototype.authType;
 /** @type {string} */
CredentialsHandshakeOptions.prototype.deploymentId;
 /** @type {string} */
CredentialsHandshakeOptions.prototype.login;
 /** @type {string} */
CredentialsHandshakeOptions.prototype.password;
/**
 * @record
 * @struct
 */
function TokenHandshakeOptions() {}
 /** @type {string} */
TokenHandshakeOptions.prototype.authType;
 /** @type {string} */
TokenHandshakeOptions.prototype.deploymentId;
 /** @type {string} */
TokenHandshakeOptions.prototype.token;
/**
 * @record
 * @struct
 */
function AbstractHandshake() {}
 /** @type {string} */
AbstractHandshake.prototype.authType;
 /** @type {string} */
AbstractHandshake.prototype.authVersion;
 /** @type {string} */
AbstractHandshake.prototype.sandboxId;
 /** @type {string} */
AbstractHandshake.prototype.deploymentId;

/**
 * @param {?} client
 * @return {?}
 */
AbstractHandshake.prototype.getHandshakeFields = function(client) {};
/**
 * @record
 * @struct
 */
function CredentialsAuthData() {}
 /** @type {string} */
CredentialsAuthData.prototype.login;
 /** @type {string} */
CredentialsAuthData.prototype.password;
/**
 * @extends {AbstractHandshake}
 * @record
 * @struct
 */
function CredentialsHandshake() {}
 /** @type {string} */
CredentialsHandshake.prototype.login;
 /** @type {string} */
CredentialsHandshake.prototype.password;
 /** @type {?} */
CredentialsHandshake.prototype.authData;
/**
 * @record
 * @struct
 */
function TokenAuthData() {}
 /** @type {string} */
TokenAuthData.prototype.token;
/**
 * @extends {AbstractHandshake}
 * @record
 * @struct
 */
function TokenHandshake() {}
 /** @type {string} */
TokenHandshake.prototype.token;
 /** @type {?} */
TokenHandshake.prototype.authData;

/** @typedef {?} */
var AuthenticationCallback;

/** @typedef {?} */
var AsyncMacroServicePublisher;

/** @typedef {?} */
var MacroServicePublisher;

/** @typedef {?} */
var ServicePublisher;
/**
 * @record
 * @struct
 */
function Options() {}
 /** @type {string} */
Options.prototype.apiUrl;
 /** @type {string} */
Options.prototype.sandboxId;
 /** @type {boolean} */
Options.prototype.forceHttps;
 /** @type {string} */
Options.prototype.resource;
 /** @type {!Array<?>} */
Options.prototype.transports;
/**
 * @extends {Options}
 * @record
 * @struct
 */
function ClientOptions() {}

/**
 * @return {?}
 */
ClientOptions.prototype.authentication = function() {};
/**
 * @extends {Options}
 * @record
 * @struct
 */
function WeakClientOptions() {}
 /** @type {string} */
WeakClientOptions.prototype.deploymentId;
/**
 * @record
 * @struct
 */
function Services() {}
 /** @type {?} */
Services.prototype.Macro;
 /** @type {?} */
Services.prototype.Messaging;
/**
 * @record
 * @struct
 */
function Service() {}
 /** @type {string} */
Service.prototype.DEFAULT_DEPLOYMENT_ID;
 /** @type {?} */
Service.prototype.$publish;
/**
 * @record
 * @struct
 */
function AsyncMacroService() {}
 /** @type {string} */
AsyncMacroService.prototype.DEFAULT_DEPLOYMENT_ID;
 /** @type {?} */
AsyncMacroService.prototype.$publish;
/**
 * @record
 * @struct
 */
function MacroService() {}
 /** @type {string} */
MacroService.prototype.DEFAULT_DEPLOYMENT_ID;
 /** @type {?} */
MacroService.prototype.$publish;
/**
 * @record
 * @struct
 */
function ServiceDeclaration() {}
 /** @type {?} */
ServiceDeclaration.prototype.Type;
 /** @type {string} */
ServiceDeclaration.prototype.deploymentId;
/**
 * @record
 * @struct
 */
function Token() {}
 /** @type {string} */
Token.prototype.token;
/**
 * @record
 * @struct
 */
function Credentials() {}
 /** @type {string} */
Credentials.prototype.login;
 /** @type {string} */
Credentials.prototype.password;
/**
 * @record
 * @struct
 */
function ClientHelper() {}
 /** @type {?} */
ClientHelper.prototype.authentication;
 /** @type {!Promise<!Array<string>>} */
ClientHelper.prototype.servers;

/**
 * @return {string}
 */
ClientHelper.prototype.getUniqRequestId = function() {};

/** @typedef {number} */
var ConnectionStatusHandler;
/**
 * @constructor
 * @struct
 */
function Authentication() {}

/**
 * @param {?} __0
 * @return {?}
 */
Authentication.delegating = function(__0) {};

/**
 * @param {?} __0
 * @return {?}
 */
Authentication.simple = function(__0) {};

/**
 * @param {?} __0
 * @return {?}
 */
Authentication.weak = function(__0) {};
/**
 * @record
 * @struct
 */
function ConnectionStatusListener() {}

/**
 * @return {void}
 */
ConnectionStatusListener.prototype.onConnectionBroken = function() {};

/**
 * @return {void}
 */
ConnectionStatusListener.prototype.onConnectionClosed = function() {};

/**
 * @return {void}
 */
ConnectionStatusListener.prototype.onConnectionEstablished = function() {};

/**
 * @param {?} failure
 * @return {void}
 */
ConnectionStatusListener.prototype.onConnectionToServerFail = function(failure) {};

/**
 * @return {void}
 */
ConnectionStatusListener.prototype.onConnectionWillClose = function() {};

/**
 * @param {?} failure
 * @return {void}
 */
ConnectionStatusListener.prototype.onFailedHandshake = function(failure) {};

/**
 * @return {void}
 */
ConnectionStatusListener.prototype.onMessageLost = function() {};

/**
 * @return {void}
 */
ConnectionStatusListener.prototype.onNoServerUrlAvailable = function() {};

/**
 * @param {?} authentication
 * @return {void}
 */
ConnectionStatusListener.prototype.onSuccessfulHandshake = function(authentication) {};

/**
 * @constructor
 * @struct
 * @param {?} options
 */
function Client(options) {}
 /** @type {?} */
Client.prototype.helper;

/**
 * @param {?} listener
 * @return {number}
 */
Client.prototype.addConnectionStatusListener = function(listener) {};

/**
 * @return {void}
 */
Client.prototype.connect = function() {};

/**
 * @param {?} declaration
 * @return {?}
 */
Client.prototype.createService = function(declaration) {};

/**
 * @param {?} declaration
 * @return {?}
 */
Client.prototype.createAsyncMacroService = function(declaration) {};

/**
 * @return {void}
 */
Client.prototype.disconnect = function() {};

/**
 * @return {boolean}
 */
Client.prototype.isConnected = function() {};

/**
 * @return {string}
 */
Client.prototype.getSandboxId = function() {};

/**
 * @return {string}
 */
Client.prototype.getResource = function() {};

/**
 * @return {string}
 */
Client.prototype.getUserId = function() {};

/**
 * @param {number} listener
 * @return {void}
 */
Client.prototype.removeConnectionStatusListener = function(listener) {};

/**
 * @param {?} authentication
 * @return {void}
 */
Client.prototype.setAuthentication = function(authentication) {};

/**
 * @param {string} level
 * @return {void}
 */
Client.prototype.setLogLevel = function(level) {};

/**
 * @param {string} resource
 * @return {void}
 */
Client.prototype.setResource = function(resource) {};

/**
 * @param {?} service
 * @return {void}
 */
Client.prototype.unsubscribe = function(service) {};

/**
 * @param {?} handler
 * @return {void}
 */
Client.prototype.onConnectionBroken = function(handler) {};

/**
 * @param {?} handler
 * @return {void}
 */
Client.prototype.onConnectionClosed = function(handler) {};

/**
 * @param {?} handler
 * @return {void}
 */
Client.prototype.onConnectionEstablished = function(handler) {};

/**
 * @param {?} handler
 * @return {void}
 */
Client.prototype.onConnectionToServerFail = function(handler) {};

/**
 * @param {?} handler
 * @return {void}
 */
Client.prototype.onConnectionWillClose = function(handler) {};

/**
 * @param {?} handler
 * @return {void}
 */
Client.prototype.onFailedHandshake = function(handler) {};

/**
 * @param {?} handler
 * @return {void}
 */
Client.prototype.onMessageLost = function(handler) {};

/**
 * @param {?} handler
 * @return {void}
 */
Client.prototype.onNoServerUrlAvailable = function(handler) {};

/**
 * @param {?} handler
 * @return {void}
 */
Client.prototype.onSuccessfulHandshake = function(handler) {};
/**
 * @constructor
 * @struct
 */
function SmartClient() {}

/**
 * @return {?}
 */
SmartClient.prototype.getCredentials = function() {};

/**
 * @return {?}
 */
SmartClient.prototype.getSession = function() {};

/**
 * @return {boolean}
 */
SmartClient.prototype.hasCredentials = function() {};

/**
 * @param {?=} session
 * @return {boolean}
 */
SmartClient.prototype.isStronglyAuthenticated = function(session) {};

/**
 * @param {?=} session
 * @return {boolean}
 */
SmartClient.prototype.isWeaklyAuthenticated = function(session) {};

/**
 * @param {?} credentials
 * @return {void}
 */
SmartClient.prototype.setCredentials = function(credentials) {};

/**
 * @constructor
 * @struct
 * @param {?} options
 */
function WeakClient(options) {}

/**
 * @return {?}
 */
WeakClient.prototype.getToken = function() {};
 /** @type {?} */
var services;
 /** @type {string} */
var VERSION;

/* TODO: NamespaceExportDeclaration in  */
