/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/postal/index.d.ts:
/**
 * @record
 * @struct
 */
function IConfiguration() {}
 /** @type {string} */
IConfiguration.prototype.SYSTEM_CHANNEL;
 /** @type {string} */
IConfiguration.prototype.DEFAULT_CHANNEL;
 /** @type {!IResolver} */
IConfiguration.prototype.resolver;
/**
 * @record
 * @struct
 */
function IResolver() {}

/**
 * @param {string} binding
 * @param {string} topic
 * @param {!Object} headerOptions
 * @return {boolean}
 */
IResolver.prototype.compare = function(binding, topic, headerOptions) {};

/**
 * @return {void}
 */
IResolver.prototype.reset = function() {};

/**
 * @param {{topic: string, binding: string, compact: boolean}=} options
 * @return {void}
 */
IResolver.prototype.purge = function(options) {};
/**
 * @record
 * @struct
 */
function ICallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ISubscriptionDefinition() {}
 /** @type {string} */
ISubscriptionDefinition.prototype.channel;
 /** @type {string} */
ISubscriptionDefinition.prototype.topic;
 /** @type {!ICallback<T>} */
ISubscriptionDefinition.prototype.callback;

/**
 * @param {function(T, !IEnvelope<T>): boolean} predicateFn
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.constraint = function(predicateFn) {};

/**
 * @param {!Array<function(T, !IEnvelope<T>): boolean>} predicateFns
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.constraints = function(predicateFns) {};

/**
 * @param {?} theContext
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.context = function(theContext) {};

/**
 * @param {number} interval
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.debounce = function(interval) {};

/**
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.defer = function() {};

/**
 * @param {number} waitTime
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.delay = function(waitTime) {};

/**
 * @param {number} maxCalls
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.disposeAfter = function(maxCalls) {};

/**
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.distinct = function() {};

/**
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.distinctUntilChanged = function() {};

/**
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.logError = function() {};

/**
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.once = function() {};

/**
 * @param {number} interval
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.throttle = function(interval) {};

/**
 * @param {!ICallback<T>} callback
 * @return {!ISubscriptionDefinition}
 */
ISubscriptionDefinition.prototype.subscribe = function(callback) {};

/**
 * @return {void}
 */
ISubscriptionDefinition.prototype.unsubscribe = function() {};
/**
 * @record
 * @struct
 */
function IEnvelope() {}
 /** @type {string} */
IEnvelope.prototype.topic;
 /** @type {T} */
IEnvelope.prototype.data;
 /** @type {string} */
IEnvelope.prototype.channel;
 /** @type {string} */
IEnvelope.prototype.timeStamp;
/**
 * @record
 * @struct
 */
function IChannelDefinition() {}
 /** @type {string} */
IChannelDefinition.prototype.channel;

/**
 * @param {string} topic
 * @param {!ICallback<T>} callback
 * @return {!ISubscriptionDefinition<T>}
 */
IChannelDefinition.prototype.subscribe = function(topic, callback) {};

/**
 * @param {string} topic
 * @param {T=} data
 * @return {void}
 */
IChannelDefinition.prototype.publish = function(topic, data) {};
/**
 * @record
 * @struct
 */
function IPostal() {}
 /** @type {!Object} */
IPostal.prototype.subscriptions;
 /** @type {!Array<!ICallback<?>>} */
IPostal.prototype.wireTaps;
 /** @type {!IConfiguration} */
IPostal.prototype.configuration;

/**
 * @param {!ICallback<?>} callback
 * @return {function(): void}
 */
IPostal.prototype.addWireTap = function(callback) {};

/**
 * @template T
 * @param {string=} name
 * @return {!IChannelDefinition<T>}
 */
IPostal.prototype.channel = function(name) {};

/**
 * @param {{channel: string, topic: string, context: ?}|function(!ISubscriptionDefinition<?>): boolean=} options_or_predicateFn
 * @return {!Array<!ISubscriptionDefinition<?>>}
 */
IPostal.prototype.getSubscribersFor = function(options_or_predicateFn) {};

/**
 * @param {!IEnvelope<?>} envelope
 * @return {void}
 */
IPostal.prototype.publish = function(envelope) {};

/**
 * @return {void}
 */
IPostal.prototype.reset = function() {};

/**
 * @param {{channel: string, topic: string, callback: !ICallback<?>}} options
 * @return {!ISubscriptionDefinition<?>}
 */
IPostal.prototype.subscribe = function(options) {};

/**
 * @param {!ISubscriptionDefinition<?>} sub
 * @return {void}
 */
IPostal.prototype.unsubscribe = function(sub) {};

/**
 * @param {{channel: string, topic: string, context: ?}=} options
 * @return {void}
 */
IPostal.prototype.unsubscribeFor = function(options) {};
 /** @type {!IPostal} */
var postal;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "postal"
/** @const */
tsickle_declare_module.postal = {};
 /** @type {!IPostal} */
tsickle_declare_module.postal.postal;

/* TODO: ExportAssignment in tsickle_declare_module.postal */
