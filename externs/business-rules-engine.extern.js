/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/business-rules-engine/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var Validation = {};
/**
 * @record
 * @struct
 */
Validation.IErrorCustomMessage = function() {};

/* TODO: CallSignature: Validation */
/**
 * @record
 * @struct
 */
Validation.IPropertyValidator = function() {};
 /** @type {!Validation.IErrorCustomMessage} */
Validation.IPropertyValidator.prototype.customMessage;
 /** @type {string} */
Validation.IPropertyValidator.prototype.tagName;

/**
 * @param {?} s
 * @return {boolean}
 */
Validation.IPropertyValidator.prototype.isAcceptable = function(s) {};
/**
 * @extends {Validation.IPropertyValidator}
 * @record
 * @struct
 */
Validation.IStringValidator = function() {};

/**
 * @param {string} s
 * @return {boolean}
 */
Validation.IStringValidator.prototype.isAcceptable = function(s) {};
/**
 * @record
 * @struct
 */
Validation.IAsyncPropertyValidator = function() {};
 /** @type {!Validation.IErrorCustomMessage} */
Validation.IAsyncPropertyValidator.prototype.customMessage;
 /** @type {boolean} */
Validation.IAsyncPropertyValidator.prototype.isAsync;
 /** @type {string} */
Validation.IAsyncPropertyValidator.prototype.tagName;

/**
 * @param {?} s
 * @return {?<boolean>}
 */
Validation.IAsyncPropertyValidator.prototype.isAcceptable = function(s) {};
/**
 * @extends {Validation.IAsyncPropertyValidator}
 * @record
 * @struct
 */
Validation.IAsyncStringPropertyValidator = function() {};

/**
 * @param {string} s
 * @return {?<boolean>}
 */
Validation.IAsyncStringPropertyValidator.prototype.isAcceptable = function(s) {};

/** @const */
Validation.CompareOperator = {};
/** @const {number} */
Validation.CompareOperator.LessThan;
/** @const {number} */
Validation.CompareOperator.LessThanEqual;
/** @const {number} */
Validation.CompareOperator.Equal;
/** @const {number} */
Validation.CompareOperator.NotEqual;
/** @const {number} */
Validation.CompareOperator.GreaterThanEqual;
/** @const {number} */
Validation.CompareOperator.GreaterThan;
/**
 * @record
 * @struct
 */
Validation.IError = function() {};
 /** @type {boolean} */
Validation.IError.prototype.HasError;
 /** @type {string} */
Validation.IError.prototype.ErrorMessage;
 /** @type {!Validation.IErrorTranslateArgs} */
Validation.IError.prototype.TranslateArgs;
/**
 * @record
 * @struct
 */
Validation.IErrorTranslateArgs = function() {};
 /** @type {string} */
Validation.IErrorTranslateArgs.prototype.TranslateId;
 /** @type {?} */
Validation.IErrorTranslateArgs.prototype.MessageArgs;
 /** @type {!Validation.IErrorCustomMessage} */
Validation.IErrorTranslateArgs.prototype.CustomMessage;
/**
 * @record
 * @struct
 */
Validation.IOptional = function() {};

/* TODO: CallSignature: Validation */
/**
 * @extends {Validation.IError}
 * @record
 * @struct
 */
Validation.IValidationFailure = function() {};
 /** @type {boolean} */
Validation.IValidationFailure.prototype.IsAsync;
 /** @type {!Validation.IError} */
Validation.IValidationFailure.prototype.Error;
/**
 * @record
 * @struct
 */
Validation.IValidationResult = function() {};
 /** @type {string} */
Validation.IValidationResult.prototype.Name;
 /** @type {!Array<!Validation.IValidationResult>} */
Validation.IValidationResult.prototype.Children;
 /** @type {boolean} */
Validation.IValidationResult.prototype.HasErrors;
 /** @type {boolean} */
Validation.IValidationResult.prototype.HasErrorsDirty;
 /** @type {string} */
Validation.IValidationResult.prototype.ErrorMessage;
 /** @type {number} */
Validation.IValidationResult.prototype.ErrorCount;
 /** @type {!Validation.IOptional} */
Validation.IValidationResult.prototype.Optional;
 /** @type {!Array<!Validation.IErrorTranslateArgs>} */
Validation.IValidationResult.prototype.TranslateArgs;

/**
 * @param {!Validation.IValidationResult} validationResult
 * @return {void}
 */
Validation.IValidationResult.prototype.Add = function(validationResult) {};

/**
 * @param {number} index
 * @return {void}
 */
Validation.IValidationResult.prototype.Remove = function(index) {};
/**
 * @record
 * @struct
 */
Validation.IValidate = function() {};

/* TODO: CallSignature: Validation */
/**
 * @record
 * @struct
 */
Validation.IAsyncValidate = function() {};

/* TODO: CallSignature: Validation */
/**
 * @record
 * @struct
 */
Validation.IValidatorFce = function() {};
 /** @type {string} */
Validation.IValidatorFce.prototype.Name;
 /** @type {!Validation.IValidate} */
Validation.IValidatorFce.prototype.ValidationFce;
 /** @type {!Validation.IAsyncValidate} */
Validation.IValidatorFce.prototype.AsyncValidationFce;
/**
 * @record
 * @struct
 */
Validation.IValidator = function() {};
 /** @type {!Validation.IError} */
Validation.IValidator.prototype.Error;

/**
 * @param {?} context
 * @return {!Validation.IValidationFailure}
 */
Validation.IValidator.prototype.Validate = function(context) {};

/**
 * @param {?} context
 * @return {?<!Validation.IValidationFailure>}
 */
Validation.IValidator.prototype.ValidateAsync = function(context) {};
/**
 * @record
 * @struct
 */
Validation.IAbstractValidator = function() {};
 /** @type {boolean} */
Validation.IAbstractValidator.prototype.ForList;

/**
 * @param {string} prop
 * @param {!Validation.IPropertyValidator} validator
 * @return {?}
 */
Validation.IAbstractValidator.prototype.RuleFor = function(prop, validator) {};

/**
 * @param {string} prop
 * @param {!Validation.IValidatorFce} validatorFce
 * @return {?}
 */
Validation.IAbstractValidator.prototype.ValidationFor = function(prop, validatorFce) {};

/**
 * @param {!Validation.IValidatorFce} validatorFce
 * @return {?}
 */
Validation.IAbstractValidator.prototype.Validation = function(validatorFce) {};

/**
 * @template K
 * @param {string} prop
 * @param {!Validation.IAbstractValidator<K>} validator
 * @return {?}
 */
Validation.IAbstractValidator.prototype.ValidatorFor = function(prop, validator) {};

/**
 * @param {string} name
 * @return {!Validation.IAbstractValidationRule<?>}
 */
Validation.IAbstractValidator.prototype.CreateRule = function(name) {};

/**
 * @param {string} name
 * @return {!Validation.IAbstractValidationRule<?>}
 */
Validation.IAbstractValidator.prototype.CreateAbstractRule = function(name) {};

/**
 * @param {string} name
 * @return {!Validation.IAbstractValidationRule<?>}
 */
Validation.IAbstractValidator.prototype.CreateAbstractListRule = function(name) {};
/**
 * @record
 * @struct
 */
Validation.IAbstractValidationRule = function() {};
 /** @type {!Validation.IValidationResult} */
Validation.IAbstractValidationRule.prototype.ValidationResult;
 /** @type {!Object<string,!Validation.IPropertyValidationRule<T>>} */
Validation.IAbstractValidationRule.prototype.Rules;
 /** @type {!Object<string,!Validation.IValidator>} */
Validation.IAbstractValidationRule.prototype.Validators;
 /** @type {!Object<string,!Validation.IAbstractValidationRule<?>>} */
Validation.IAbstractValidationRule.prototype.Children;

/**
 * @param {T} context
 * @return {!Validation.IValidationResult}
 */
Validation.IAbstractValidationRule.prototype.Validate = function(context) {};

/**
 * @param {T} context
 * @return {?<!Validation.IValidationResult>}
 */
Validation.IAbstractValidationRule.prototype.ValidateAsync = function(context) {};

/**
 * @param {T} context
 * @return {?<!Validation.IValidationResult>}
 */
Validation.IAbstractValidationRule.prototype.ValidateAll = function(context) {};

/**
 * @param {T} context
 * @param {string} propName
 * @return {void}
 */
Validation.IAbstractValidationRule.prototype.ValidateProperty = function(context, propName) {};
/**
 * @record
 * @struct
 */
Validation.IPropertyValidationRule = function() {};
 /** @type {!Object<string,?>} */
Validation.IPropertyValidationRule.prototype.Validators;

/**
 * @param {!Validation.IValidationContext<T>} context
 * @return {!Array<!Validation.IValidationFailure>}
 */
Validation.IPropertyValidationRule.prototype.Validate = function(context) {};

/**
 * @param {!Validation.IValidationContext<T>} context
 * @return {?<!Array<!Validation.IValidationFailure>>}
 */
Validation.IPropertyValidationRule.prototype.ValidateAsync = function(context) {};
/**
 * @record
 * @struct
 */
Validation.IValidationContext = function() {};
 /** @type {string} */
Validation.IValidationContext.prototype.Value;
 /** @type {string} */
Validation.IValidationContext.prototype.Key;
 /** @type {T} */
Validation.IValidationContext.prototype.Data;

/**
 * @constructor
 * @struct
 */
Validation.Error = function() {};
 /** @type {boolean} */
Validation.Error.prototype.HasError;
 /** @type {string} */
Validation.Error.prototype.ErrorMessage;

/**
 * @constructor
 * @struct
 * @param {!Validation.IError} Error
 * @param {boolean} IsAsync
 */
Validation.ValidationFailure = function(Error, IsAsync) {};
 /** @type {!Validation.IError} */
Validation.ValidationFailure.prototype.Error;
 /** @type {boolean} */
Validation.ValidationFailure.prototype.IsAsync;
 /** @type {boolean} */
Validation.ValidationFailure.prototype.HasError;
 /** @type {string} */
Validation.ValidationFailure.prototype.ErrorMessage;
 /** @type {!Validation.IErrorTranslateArgs} */
Validation.ValidationFailure.prototype.TranslateArgs;

/**
 * @constructor
 * @struct
 * @param {string} Name
 */
Validation.ValidationResult = function(Name) {};
 /** @type {string} */
Validation.ValidationResult.prototype.Name;
 /** @type {boolean} */
Validation.ValidationResult.prototype.IsDirty;
 /** @type {!Array<!Validation.IValidationResult>} */
Validation.ValidationResult.prototype.Children;
 /** @type {!Validation.IOptional} */
Validation.ValidationResult.prototype.Optional;
 /** @type {!Array<!Validation.IErrorTranslateArgs>} */
Validation.ValidationResult.prototype.TranslateArgs;
 /** @type {boolean} */
Validation.ValidationResult.prototype.HasErrorsDirty;
 /** @type {boolean} */
Validation.ValidationResult.prototype.HasErrors;
 /** @type {number} */
Validation.ValidationResult.prototype.ErrorCount;
 /** @type {string} */
Validation.ValidationResult.prototype.ErrorMessage;

/**
 * @param {!Validation.IValidationResult} error
 * @return {void}
 */
Validation.ValidationResult.prototype.Add = function(error) {};

/**
 * @param {number} index
 * @return {void}
 */
Validation.ValidationResult.prototype.Remove = function(index) {};

/**
 * @constructor
 * @struct
 * @param {string} Name
 */
Validation.CompositeValidationResult = function(Name) {};
 /** @type {string} */
Validation.CompositeValidationResult.prototype.Name;
 /** @type {!Array<!Validation.IValidationResult>} */
Validation.CompositeValidationResult.prototype.Children;
 /** @type {!Validation.IOptional} */
Validation.CompositeValidationResult.prototype.Optional;
 /** @type {boolean} */
Validation.CompositeValidationResult.prototype.HasErrorsDirty;
 /** @type {boolean} */
Validation.CompositeValidationResult.prototype.HasErrors;
 /** @type {number} */
Validation.CompositeValidationResult.prototype.ErrorCount;
 /** @type {string} */
Validation.CompositeValidationResult.prototype.ErrorMessage;
 /** @type {!Array<!Validation.IErrorTranslateArgs>} */
Validation.CompositeValidationResult.prototype.TranslateArgs;
 /** @type {!Object<string,!Validation.IValidationResult>} */
Validation.CompositeValidationResult.prototype.Errors;
 /** @type {?} */
Validation.CompositeValidationResult.prototype.FlattenErros;

/**
 * @param {!Validation.IValidationResult} error
 * @return {void}
 */
Validation.CompositeValidationResult.prototype.AddFirst = function(error) {};

/**
 * @param {!Validation.IValidationResult} error
 * @return {void}
 */
Validation.CompositeValidationResult.prototype.Add = function(error) {};

/**
 * @param {number} index
 * @return {void}
 */
Validation.CompositeValidationResult.prototype.Remove = function(index) {};

/**
 * @param {string=} headerMessage
 * @return {void}
 */
Validation.CompositeValidationResult.prototype.LogErrors = function(headerMessage) {};

/**
 * @return {void}
 */
Validation.CompositeValidationResult.prototype.SetDirty = function() {};

/**
 * @return {void}
 */
Validation.CompositeValidationResult.prototype.SetPristine = function() {};

/**
 * @param {?} node
 * @param {?} dirty
 * @return {?}
 */
Validation.CompositeValidationResult.prototype.SetDirtyEx = function(node, dirty) {};

/**
 * @param {?} node
 * @param {?} errorCollection
 * @return {?}
 */
Validation.CompositeValidationResult.prototype.flattenErrors = function(node, errorCollection) {};

/**
 * @param {?} node
 * @param {?} indent
 * @return {?}
 */
Validation.CompositeValidationResult.prototype.traverse = function(node, indent) {};
/**
 * @implements {Validation.IAbstractValidator}
 * @constructor
 * @struct
 */
Validation.AbstractValidator = function() {};
 /** @type {!Object<string,!Array<!Validation.IPropertyValidator>>} */
Validation.AbstractValidator.prototype.Validators;
 /** @type {!Object<string,!Validation.IAbstractValidator<?>>} */
Validation.AbstractValidator.prototype.AbstractValidators;
 /** @type {!Object<string,!Array<!Validation.IValidatorFce>>} */
Validation.AbstractValidator.prototype.ValidationFunctions;
 /** @type {boolean} */
Validation.AbstractValidator.prototype.ForList;

/**
 * @param {string} prop
 * @param {!Validation.IPropertyValidator} validator
 * @return {void}
 */
Validation.AbstractValidator.prototype.RuleFor = function(prop, validator) {};

/**
 * @param {string} prop
 * @param {!Validation.IValidatorFce} fce
 * @return {void}
 */
Validation.AbstractValidator.prototype.ValidationFor = function(prop, fce) {};

/**
 * @param {!Validation.IValidatorFce} fce
 * @return {void}
 */
Validation.AbstractValidator.prototype.Validation = function(fce) {};

/**
 * @template K
 * @param {string} prop
 * @param {!Validation.IAbstractValidator<K>} validator
 * @param {boolean=} forList
 * @return {void}
 */
Validation.AbstractValidator.prototype.ValidatorFor = function(prop, validator, forList) {};

/**
 * @param {string} name
 * @return {!Validation.IAbstractValidationRule<T>}
 */
Validation.AbstractValidator.prototype.CreateAbstractRule = function(name) {};

/**
 * @param {string} name
 * @return {!Validation.IAbstractValidationRule<T>}
 */
Validation.AbstractValidator.prototype.CreateAbstractListRule = function(name) {};

/**
 * @param {string} name
 * @return {!Validation.IAbstractValidationRule<T>}
 */
Validation.AbstractValidator.prototype.CreateRule = function(name) {};
/**
 * @constructor
 * @struct
 */
Validation.MessageLocalization = function() {};
 /** @type {string} */
Validation.MessageLocalization.customMsg;
 /** @type {{required: string, remote: string, email: string, url: string, date: string, dateISO: string, number: string, digits: string, signedDigits: string, creditcard: string, equalTo: string, maxlength: string, minlength: string, rangelength: string, range: string, max: string, min: string, step: string, contains: string, mask: string, custom: string}} */
Validation.MessageLocalization.defaultMessages;
 /** @type {{required: string, remote: string, email: string, url: string, date: string, dateISO: string, number: string, digits: string, signedDigits: string, creditcard: string, equalTo: string, maxlength: string, minlength: string, rangelength: string, range: string, max: string, min: string, step: string, contains: string, mask: string, custom: string}} */
Validation.MessageLocalization.ValidationMessages;

/**
 * @param {?} validator
 * @return {string}
 */
Validation.MessageLocalization.GetValidationMessage = function(validator) {};

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
