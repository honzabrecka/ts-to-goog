/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/angular-growl-v2/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "angular"
/** @const */
tsickle_declare_module.angular.growl = {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.growl.IGrowlTTLConfig = function() {};
 /** @type {number} */
tsickle_declare_module.angular.growl.IGrowlTTLConfig.prototype.success;
 /** @type {number} */
tsickle_declare_module.angular.growl.IGrowlTTLConfig.prototype.error;
 /** @type {number} */
tsickle_declare_module.angular.growl.IGrowlTTLConfig.prototype.warning;
 /** @type {number} */
tsickle_declare_module.angular.growl.IGrowlTTLConfig.prototype.info;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.growl.IGrowlMessageConfig = function() {};
 /** @type {string} */
tsickle_declare_module.angular.growl.IGrowlMessageConfig.prototype.title;
 /** @type {number} */
tsickle_declare_module.angular.growl.IGrowlMessageConfig.prototype.ttl;
 /** @type {boolean} */
tsickle_declare_module.angular.growl.IGrowlMessageConfig.prototype.disableCountDown;
 /** @type {boolean} */
tsickle_declare_module.angular.growl.IGrowlMessageConfig.prototype.disableIcons;
 /** @type {boolean} */
tsickle_declare_module.angular.growl.IGrowlMessageConfig.prototype.disableCloseButton;
 /** @type {!Function} */
tsickle_declare_module.angular.growl.IGrowlMessageConfig.prototype.onclose;
 /** @type {!Function} */
tsickle_declare_module.angular.growl.IGrowlMessageConfig.prototype.onopen;
 /** @type {string} */
tsickle_declare_module.angular.growl.IGrowlMessageConfig.prototype.position;
 /** @type {number} */
tsickle_declare_module.angular.growl.IGrowlMessageConfig.prototype.referenceId;
 /** @type {boolean} */
tsickle_declare_module.angular.growl.IGrowlMessageConfig.prototype.translateMessage;
 /** @type {!Object<string,?>} */
tsickle_declare_module.angular.growl.IGrowlMessageConfig.prototype.variables;
/**
 * @extends {growl.IGrowlMessageConfig}
 * @record
 * @struct
 */
tsickle_declare_module.angular.growl.IGrowlMessage = function() {};
 /** @type {string} */
tsickle_declare_module.angular.growl.IGrowlMessage.prototype.text;

/**
 * Destroy the message.
 * @return {void}
 */
tsickle_declare_module.angular.growl.IGrowlMessage.prototype.destroy = function() {};

/**
 * Update the message body.
 * @param {string} newText new message body
 * @return {void}
 */
tsickle_declare_module.angular.growl.IGrowlMessage.prototype.setText = function(newText) {};
/**
 * @extends {angular.IServiceProvider}
 * @record
 * @struct
 */
tsickle_declare_module.angular.growl.IGrowlProvider = function() {};
 /** @type {!Array<(string|!angular.IHttpInterceptorFactory)>} */
tsickle_declare_module.angular.growl.IGrowlProvider.prototype.serverMessagesInterceptor;

/**
 * Set default TTL settings.
 * Set default TTL settings.
 * @param {!growl.IGrowlTTLConfig|number} ttl configuration of TTL for different type of message / ttl in milliseconds
 * @return {!growl.IGrowlProvider}
 */
tsickle_declare_module.angular.growl.IGrowlProvider.prototype.globalTimeToLive = function(ttl) {};

/**
 * Set default setting for disabling close button.
 * @param {boolean} disableCloseButton
 * @return {!growl.IGrowlProvider}
 */
tsickle_declare_module.angular.growl.IGrowlProvider.prototype.globalDisableCloseButton = function(disableCloseButton) {};

/**
 * Set default setting for disabling icons.
 * @param {boolean} disableIcons
 * @return {!growl.IGrowlProvider}
 */
tsickle_declare_module.angular.growl.IGrowlProvider.prototype.globalDisableIcons = function(disableIcons) {};

/**
 * Set reversing order of displaying new messages.
 * @param {boolean} reverseOrder
 * @return {!growl.IGrowlProvider}
 */
tsickle_declare_module.angular.growl.IGrowlProvider.prototype.globalReversedOrder = function(reverseOrder) {};

/**
 * Set default setting for displaying message disappear countdown.
 * @param {boolean} disableCountDown
 * @return {!growl.IGrowlProvider}
 */
tsickle_declare_module.angular.growl.IGrowlProvider.prototype.globalDisableCountDown = function(disableCountDown) {};

/**
 * Set default allowance for inline messages.
 * @param {boolean} inline
 * @return {!growl.IGrowlProvider}
 */
tsickle_declare_module.angular.growl.IGrowlProvider.prototype.globalInlineMessages = function(inline) {};

/**
 * Set default message position.
 * @param {string} position
 * @return {!growl.IGrowlProvider}
 */
tsickle_declare_module.angular.growl.IGrowlProvider.prototype.globalPosition = function(position) {};

/**
 * Enable/disable displaying only unique messages.
 * @param {boolean} onlyUniqueMessages
 * @return {!growl.IGrowlProvider}
 */
tsickle_declare_module.angular.growl.IGrowlProvider.prototype.onlyUniqueMessages = function(onlyUniqueMessages) {};

/**
 * Set key where messages are stored (for http interceptor).
 * @param {string} messageKey
 * @return {!growl.IGrowlProvider}
 */
tsickle_declare_module.angular.growl.IGrowlProvider.prototype.messagesKey = function(messageKey) {};

/**
 * Set key where message text is stored (for http interceptor).
 * @param {string} messageTextKey
 * @return {!growl.IGrowlProvider}
 */
tsickle_declare_module.angular.growl.IGrowlProvider.prototype.messageTextKey = function(messageTextKey) {};

/**
 * Set key where title of message is stored (for http interceptor).
 * @param {string} messageTitleKey
 * @return {!growl.IGrowlProvider}
 */
tsickle_declare_module.angular.growl.IGrowlProvider.prototype.messageTitleKey = function(messageTitleKey) {};

/**
 * Set key where severity of message is stored (for http interceptor).
 * @param {string} messageSeverityKey
 * @return {!growl.IGrowlProvider}
 */
tsickle_declare_module.angular.growl.IGrowlProvider.prototype.messageSeverityKey = function(messageSeverityKey) {};

/**
 * Set key where variables for message are stored (for http interceptor).
 * @param {string} messageVariableKey
 * @return {!growl.IGrowlProvider}
 */
tsickle_declare_module.angular.growl.IGrowlProvider.prototype.messageVariableKey = function(messageVariableKey) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.growl.IGrowlService = function() {};

/**
 * Show warning message.
 * Show warning message.
 * @param {string} message text to display (or code for angular-translate)
 * @param {!growl.IGrowlMessageConfig=} config additional message configuration
 * @return {!growl.IGrowlMessage}
 */
tsickle_declare_module.angular.growl.IGrowlService.prototype.warning = function(message, config) {};

/**
 * Show error message.
 * Show error message.
 * @param {string} message text to display (or code for angular-translate)
 * @param {!growl.IGrowlMessageConfig=} config additional message configuration
 * @return {!growl.IGrowlMessage}
 */
tsickle_declare_module.angular.growl.IGrowlService.prototype.error = function(message, config) {};

/**
 * Show information message.
 * Show information message.
 * @param {string} message text to display (or code for angular-translate)
 * @param {!growl.IGrowlMessageConfig=} config additional message configuration
 * @return {!growl.IGrowlMessage}
 */
tsickle_declare_module.angular.growl.IGrowlService.prototype.info = function(message, config) {};

/**
 * Show success message.
 * Show success message.
 * @param {string} message text to display (or code for angular-translate)
 * @param {!growl.IGrowlMessageConfig=} config
 * @return {!growl.IGrowlMessage}
 */
tsickle_declare_module.angular.growl.IGrowlService.prototype.success = function(message, config) {};

/**
 * Show message (generic).
 * Show message (generic).
 * Show message (generic).
 * @param {string} message text to display (or code for angular-translate)
 * @param {!growl.IGrowlMessageConfig=} config additional message configuration
 * @param {string=} severity message severity (error, warning, success, info).
 * @return {!growl.IGrowlMessage}
 */
tsickle_declare_module.angular.growl.IGrowlService.prototype.general = function(message, config, severity) {};

/**
 * Get current setting for displaying only unique messages.
 * @return {boolean}
 */
tsickle_declare_module.angular.growl.IGrowlService.prototype.onlyUnique = function() {};

/**
 * Get current setting for reversing messages order.
 * @return {boolean}
 */
tsickle_declare_module.angular.growl.IGrowlService.prototype.reverseOrder = function() {};

/**
 * Get current allowance for inline messages.
 * @return {boolean}
 */
tsickle_declare_module.angular.growl.IGrowlService.prototype.inlineMessages = function() {};

/**
 * Get current messages position.
 * @return {string}
 */
tsickle_declare_module.angular.growl.IGrowlService.prototype.position = function() {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.growl.IGrowlMessagesService = function() {};

/**
 * Initialize a directive
 * We look at the preloaded directive and use this else we
 * create a new blank object
 * @param {number} referenceId
 * @param {number} limitMessages
 * @return {!angular.IDirective}
 */
tsickle_declare_module.angular.growl.IGrowlMessagesService.prototype.initDirective = function(referenceId, limitMessages) {};

/**
 * Get current messages
 * @param {number=} referenceId
 * @return {!Array<!growl.IGrowlMessage>}
 */
tsickle_declare_module.angular.growl.IGrowlMessagesService.prototype.getAllMessages = function(referenceId) {};

/**
 * Destroy all messages
 * @param {number=} referenceId
 * @return {void}
 */
tsickle_declare_module.angular.growl.IGrowlMessagesService.prototype.destroyAllMessages = function(referenceId) {};

/**
 * Add a message
 * @param {!growl.IGrowlMessage} message
 * @return {!growl.IGrowlMessage}
 */
tsickle_declare_module.angular.growl.IGrowlMessagesService.prototype.addMessage = function(message) {};

/**
 * Delete a message
 * @param {!growl.IGrowlMessage} message
 * @return {void}
 */
tsickle_declare_module.angular.growl.IGrowlMessagesService.prototype.deleteMessage = function(message) {};
