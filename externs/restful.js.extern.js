/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/restful.js/index.d.ts:
/**
 * @record
 * @struct
 */
function Headers() {}

/* TODO: IndexSignature:  */
/**
 * @extends {Endpoint}
 * @record
 * @struct
 */
function Api() {}

/**
 * @param {string} name
 * @return {?}
 */
Api.prototype.all = function(name) {};

/**
 * @param {string} name
 * @param {string} url
 * @return {?}
 */
Api.prototype.allUrl = function(name, url) {};

/**
 * @param {string} name
 * @param {?} id
 * @return {?}
 */
Api.prototype.one = function(name, id) {};

/**
 * @param {string} name
 * @param {string} url
 * @return {?}
 */
Api.prototype.oneUrl = function(name, url) {};

/**
 * @param {string=} protocol
 * @return {?|string}
 */
Api.prototype.protocol = function(protocol) {};

/**
 * @param {string=} protocol
 * @return {?|string}
 */
Api.prototype.baseUrl = function(protocol) {};

/**
 * @param {number=} port
 * @return {?|number}
 */
Api.prototype.port = function(port) {};

/**
 * @param {string=} prefix
 * @return {?|string}
 */
Api.prototype.prefixUrl = function(prefix) {};

/**
 * @param {string=} url
 * @return {?|string}
 */
Api.prototype.customUrl = function(url) {};
/**
 * @extends {Endpoint}
 * @record
 * @struct
 */
function MemberEndpoint() {}

/**
 * Target a child collection name.
 * @param {string} name
 * @return {?}
 */
MemberEndpoint.prototype.all = function(name) {};

/**
 * @param {string} name
 * @param {string} url
 * @return {?}
 */
MemberEndpoint.prototype.allUrl = function(name, url) {};

/**
 * Target a child member in a collection name.
 * @param {string} name
 * @param {?} id
 * @return {?}
 */
MemberEndpoint.prototype.one = function(name, id) {};

/**
 * @param {string} name
 * @param {string} url
 * @return {?}
 */
MemberEndpoint.prototype.oneUrl = function(name, url) {};

/**
 * Get a member. Returns a promise with an entity.
 * @template T
 * @param {?=} params
 * @param {?=} headers
 * @return {!Promise<?>}
 */
MemberEndpoint.prototype.get = function(params, headers) {};

/**
 * Update a member. Returns a promise with the response.
 * @template T
 * @param {?} data
 * @param {?=} headers
 * @return {!Promise<?>}
 */
MemberEndpoint.prototype.put = function(data, headers) {};

/**
 * Delete a member. Returns a promise with the response.
 * @template T
 * @param {?=} data
 * @param {?=} headers
 * @return {!Promise<?>}
 */
MemberEndpoint.prototype.delete = function(data, headers) {};

/**
 * Patch a member. Returns a promise with the response.
 * @template T
 * @param {?} data
 * @param {?=} headers
 * @return {!Promise<?>}
 */
MemberEndpoint.prototype.patch = function(data, headers) {};

/**
 * Perform a HEAD request on a member. Returns a promise with the response.
 * @template T
 * @param {?=} headers
 * @return {!Promise<?>}
 */
MemberEndpoint.prototype.head = function(headers) {};

/**
 * @param {string=} url
 * @return {?|string}
 */
MemberEndpoint.prototype.customUrl = function(url) {};
/**
 * @extends {Endpoint}
 * @record
 * @struct
 */
function CollectionEndpoint() {}

/**
 * Get a member in a collection. Returns a promise with an entity.
 * @template T
 * @param {?} id
 * @param {?=} params
 * @param {?=} headers
 * @return {!Promise<?>}
 */
CollectionEndpoint.prototype.get = function(id, params, headers) {};

/**
 * Get a full collection. Returns a promise with an array of entities.
 * @template T
 * @param {?=} params
 * @param {?=} headers
 * @return {!Promise<?>}
 */
CollectionEndpoint.prototype.getAll = function(params, headers) {};

/**
 * Create a member in a collection. Returns a promise with the response.
 * @template T
 * @param {?} data
 * @param {?=} headers
 * @return {!Promise<?>}
 */
CollectionEndpoint.prototype.post = function(data, headers) {};

/**
 * Update a member in a collection. Returns a promise with the response.
 * @template T
 * @param {?} id
 * @param {?} data
 * @param {?=} headers
 * @return {!Promise<?>}
 */
CollectionEndpoint.prototype.put = function(id, data, headers) {};

/**
 * Delete a member in a collection. Returns a promise with the response.
 * @template T
 * @param {?} id
 * @param {?=} data
 * @param {?=} headers
 * @return {!Promise<?>}
 */
CollectionEndpoint.prototype.delete = function(id, data, headers) {};

/**
 * Patch a member in a collection. Returns a promise with the response.
 * @template T
 * @param {?} id
 * @param {?} data
 * @param {?=} headers
 * @return {!Promise<?>}
 */
CollectionEndpoint.prototype.patch = function(id, data, headers) {};

/**
 * Perform a HEAD request on a member in a collection. Returns a promise with the response.
 * @template T
 * @param {?} id
 * @param {?=} headers
 * @return {!Promise<?>}
 */
CollectionEndpoint.prototype.head = function(id, headers) {};
/**
 * @record
 * @struct
 */
function Endpoint() {}

/**
 * Get the url.
 * @return {string}
 */
Endpoint.prototype.url = function() {};

/**
 * Add a response interceptor. You can only alter data and headers.
 * @param {?} interceptor
 * @return {?}
 */
Endpoint.prototype.addResponseInterceptor = function(interceptor) {};

/**
 * @return {!Array<?>}
 */
Endpoint.prototype.responseInterceptors = function() {};

/**
 * Add a request interceptor.
 * @param {?} interceptor
 * @return {?}
 */
Endpoint.prototype.addRequestInterceptor = function(interceptor) {};

/**
 * @return {!Array<?>}
 */
Endpoint.prototype.requestInterceptors = function() {};

/**
 * Add a full response interceptor. You can alter data and headers.
 * @param {?} interceptor
 * @return {?}
 */
Endpoint.prototype.addFullResponseInterceptor = function(interceptor) {};

/**
 * @return {!Array<?>}
 */
Endpoint.prototype.fullResponseInterceptors = function() {};

/**
 * Add a full request interceptor. You can alter params, headers, data, method and url.
 * @param {?} interceptor
 * @return {?}
 */
Endpoint.prototype.addFullRequestInterceptor = function(interceptor) {};

/**
 * @return {!Array<?>}
 */
Endpoint.prototype.fullRequestInterceptors = function() {};

/**
 * Add a header.
 * @param {string} name
 * @param {?} value
 * @return {?}
 */
Endpoint.prototype.header = function(name, value) {};

/**
 * @return {?}
 */
Endpoint.prototype.headers = function() {};
/**
 * @extends {ResponseBase}
 * @record
 * @struct
 */
function MemberResponse() {}

/* TODO: CallSignature:  */

/**
 * @return {?}
 */
MemberResponse.prototype.body = function() {};
/**
 * @extends {ResponseBase}
 * @record
 * @struct
 */
function CollectionResponse() {}

/* TODO: CallSignature:  */

/**
 * @return {!Array<?>}
 */
CollectionResponse.prototype.body = function() {};
/**
 * @record
 * @struct
 */
function ResponseBase() {}

/**
 * @return {number}
 */
ResponseBase.prototype.status = function() {};

/**
 * @return {?}
 */
ResponseBase.prototype.headers = function() {};

/**
 * @return {?}
 */
ResponseBase.prototype.config = function() {};
/**
 * @record
 * @struct
 */
function ResponseBody() {}

/* TODO: CallSignature:  */

/**
 * Get the JS object unserialized from the response body (which must be in JSON)
 * @return {?}
 */
ResponseBody.prototype.data = function() {};

/**
 * Query a collection child of the entity.
 * @param {string} entity
 * @return {?}
 */
ResponseBody.prototype.all = function(entity) {};

/**
 * Query a member child of the entity.
 * @param {string} entity
 * @param {?} id
 * @return {?}
 */
ResponseBody.prototype.one = function(entity, id) {};

/**
 * Update the member link to the entity. Returns a promise with the response.
 * @param {?=} headers
 * @return {void}
 */
ResponseBody.prototype.save = function(headers) {};

/**
 * Delete the member link to the entity. Returns a promise with the response.
 * @param {?=} headers
 * @return {void}
 */
ResponseBody.prototype.remove = function(headers) {};

/**
 * Get the entity url.
 * @return {string}
 */
ResponseBody.prototype.url = function() {};

/**
 * Get the id of the entity.
 * @return {?}
 */
ResponseBody.prototype.id = function() {};
/**
 * @record
 * @struct
 */
function RequestInterceptor() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FullRequestInterceptor() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function FullRequestInterceptorReturnValue() {}
 /** @type {?} */
FullRequestInterceptorReturnValue.prototype.params;
 /** @type {?} */
FullRequestInterceptorReturnValue.prototype.headers;
 /** @type {?} */
FullRequestInterceptorReturnValue.prototype.data;
 /** @type {string} */
FullRequestInterceptorReturnValue.prototype.method;
 /** @type {string} */
FullRequestInterceptorReturnValue.prototype.url;
/**
 * @record
 * @struct
 */
function ResponseInterceptor() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ResponseInterceptorReturnValue() {}
 /** @type {?} */
ResponseInterceptorReturnValue.prototype.headers;
 /** @type {?} */
ResponseInterceptorReturnValue.prototype.data;
 /** @type {string} */
ResponseInterceptorReturnValue.prototype.method;
 /** @type {string} */
ResponseInterceptorReturnValue.prototype.url;

/**
 * @param {string} endpoint
 * @return {?}
 */
function restful(endpoint) {}
