/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/keypress.js/index.d.ts:

/* TODO: NamespaceExportDeclaration in  */
/**
 * @record
 * @struct
 */
function ListenerDefaults() {}
 /** @type {string} */
ListenerDefaults.prototype.keys;
 /** @type {boolean} */
ListenerDefaults.prototype.prevent_default;
 /** @type {boolean} */
ListenerDefaults.prototype.prevent_repeat;
 /** @type {boolean} */
ListenerDefaults.prototype.is_unordered;
 /** @type {boolean} */
ListenerDefaults.prototype.is_counting;
 /** @type {boolean} */
ListenerDefaults.prototype.is_exclusive;
 /** @type {boolean} */
ListenerDefaults.prototype.is_solitary;
 /** @type {boolean} */
ListenerDefaults.prototype.is_sequence;
/**
 * @record
 * @struct
 */
function Combo() {}
 /** @type {string} */
Combo.prototype.keys;
 /** @type {!Element} */
Combo.prototype.this;
 /** @type {boolean} */
Combo.prototype.prevent_default;
 /** @type {boolean} */
Combo.prototype.prevent_repeat;
 /** @type {boolean} */
Combo.prototype.is_unordered;
 /** @type {boolean} */
Combo.prototype.is_counting;
 /** @type {boolean} */
Combo.prototype.is_exclusive;
 /** @type {boolean} */
Combo.prototype.is_sequence;
 /** @type {boolean} */
Combo.prototype.is_solitary;

/**
 * @param {!KeyboardEvent=} event
 * @param {number=} count
 * @return {?}
 */
Combo.prototype.on_keydown = function(event, count) {};

/**
 * @param {!KeyboardEvent=} event
 * @return {?}
 */
Combo.prototype.on_keyup = function(event) {};

/**
 * @param {!KeyboardEvent=} event
 * @return {?}
 */
Combo.prototype.on_release = function(event) {};

/**
 * @constructor
 * @struct
 * @param {!Element=} element
 * @param {?=} defaults
 */
function Listener(element, defaults) {}

/**
 * @param {string} keys
 * @param {?} on_keydown_callback
 * @return {void}
 */
Listener.prototype.simple_combo = function(keys, on_keydown_callback) {};

/**
 * @param {string} keys
 * @param {?} on_count_callback
 * @return {void}
 */
Listener.prototype.counting_combo = function(keys, on_count_callback) {};

/**
 * @param {string} keys
 * @param {?} callback
 * @return {void}
 */
Listener.prototype.sequence_combo = function(keys, callback) {};

/**
 * @param {?} combo
 * @return {void}
 */
Listener.prototype.register_combo = function(combo) {};

/**
 * @param {(string|?)} combo
 * @return {void}
 */
Listener.prototype.unregister_combo = function(combo) {};

/**
 * @param {!Array<?>} combos
 * @return {void}
 */
Listener.prototype.register_many = function(combos) {};

/**
 * @param {(!Array<?>|!Array<string>)} combos
 * @return {void}
 */
Listener.prototype.unregister_many = function(combos) {};

/**
 * @return {!Array<?>}
 */
Listener.prototype.get_registered_combos = function() {};

/**
 * @return {void}
 */
Listener.prototype.destroy = function() {};

/**
 * @return {void}
 */
Listener.prototype.reset = function() {};

/**
 * @return {void}
 */
Listener.prototype.listen = function() {};

/**
 * @return {void}
 */
Listener.prototype.stop_listening = function() {};
