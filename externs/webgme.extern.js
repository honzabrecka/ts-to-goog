/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/webgme/index.d.ts:
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "blob/BlobMetadata"
/** @const */
tsickle_declare_module.blob_BlobMetadata = {};

/**
 * @constructor
 * @struct
 */
tsickle_declare_module.blob_BlobMetadata.BlobMetadata = function() {};
 /** @type {string} */
tsickle_declare_module.blob_BlobMetadata.BlobMetadata.prototype.name;
 /** @type {number} */
tsickle_declare_module.blob_BlobMetadata.BlobMetadata.prototype.size;
 /** @type {string} */
tsickle_declare_module.blob_BlobMetadata.BlobMetadata.prototype.mime;
 /** @type {!Object} */
tsickle_declare_module.blob_BlobMetadata.BlobMetadata.prototype.context;
 /** @type {string} */
tsickle_declare_module.blob_BlobMetadata.BlobMetadata.prototype.contentType;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "plugin/PluginBase"
/** @const */
tsickle_declare_module.plugin_PluginBase = {};

/* TODO: ExportAssignment in tsickle_declare_module.plugin_PluginBase */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "plugin/PluginConfig"
/** @const */
tsickle_declare_module.plugin_PluginConfig = {};

/* TODO: ExportAssignment in tsickle_declare_module.plugin_PluginConfig */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "webgme/config/config.default"
/** @const */
tsickle_declare_module.webgme_config_config_default = {};

/* TODO: ExportAssignment in tsickle_declare_module.webgme_config_config_default */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "webgme/common"
/** @const */
tsickle_declare_module.webgme_common = {};

/* TODO: ExportAssignment in tsickle_declare_module.webgme_common */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "common/util/canon"
/** @const */
tsickle_declare_module.common_util_canon = {};

/* TODO: ExportAssignment in tsickle_declare_module.common_util_canon */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "common/util/assert"
/** @const */
tsickle_declare_module.common_util_assert = {};

/* TODO: ExportAssignment in tsickle_declare_module.common_util_assert */
/** @const */
var Common = {};

/** @typedef {string} */
Common.ISO8601;

/** @typedef {string} */
Common.ErrorStr;

/** @typedef {string} */
Common.MetadataHash;

/** @typedef {!Array<string>} */
Common.MetadataHashArray;

/** @typedef {string} */
Common.ArtifactHash;

/** @typedef {string} */
Common.Name;

/** @typedef {!Object} */
Common.Metadata;

/**
 * @constructor
 * @struct
 */
Common.Node = function() {};

/** @typedef {!Object} */
Common.DataObject;

/** @typedef {!Array<number>} */
Common.Buffer;

/** @typedef {(string|!Array<number>|!Array<!Array<number>>)} */
Common.Payload;

/** @typedef {(!Object|!Array<number>|!Array<!Array<number>>)} */
Common.Content;

/** @typedef {string} */
Common.ContentString;

/** @typedef {(string|number)} */
Common.Primitive;

/** @typedef {(string|number|!Object)} */
Common.OutAttr;

/** @typedef {(string|number|!Object)} */
Common.InAttr;

/** @typedef {string} */
Common.OutPath;

/** @typedef {function(): void} */
Common.VoidFn;

/** @typedef {function(!Error, string): void} */
Common.MetadataHashCallback;

/** @typedef {function(!Error, !Array<string>): void} */
Common.MetadataHashArrayCallback;

/** @typedef {function(!Error, !Object): void} */
Common.MetadataCallback;

/** @typedef {function(!Error, !Object): void} */
Common.ObjectCallback;

/** @typedef {function(!Error, !Array<!Object>): void} */
Common.ObjectArrayCallback;

/** @typedef {function(!Error, !JSON): void} */
Common.JSONCallback;
/** @const */
var Util = {};
/**
 * @constructor
 * @struct
 */
Util.Canon = function() {};

/**
 * @param {?} thing
 * @return {string}
 */
Util.Canon.prototype.stringify = function(thing) {};

/**
 * @param {?} thing
 * @return {string}
 */
Util.Canon.prototype.parse = function(thing) {};
 /** @type {!Util.Canon} */
Util.CANON;

/**
 * @param {boolean} condition
 * @return {?}
 */
Util.ASSERT = function(condition) {};
/** @const */
var Blobs = {};

/** @typedef {string} */
Blobs.ObjectBlob;
/**
 * @record
 * @struct
 */
Blobs.BlobMetadata = function() {};
 /** @type {string} */
Blobs.BlobMetadata.prototype.name;
 /** @type {number} */
Blobs.BlobMetadata.prototype.size;
 /** @type {string} */
Blobs.BlobMetadata.prototype.mime;
 /** @type {!Object} */
Blobs.BlobMetadata.prototype.context;
 /** @type {string} */
Blobs.BlobMetadata.prototype.contentType;

/** @typedef {!Object} */
Blobs.BlobMetadataDescriptor;

/**
 * @constructor
 * @struct
 */
Blobs.BlobClient = function() {};
 /** @type {?} */
Blobs.BlobClient.prototype.getArtifact;
 /** @type {?} */
Blobs.BlobClient.prototype.getSubObject;
 /** @type {?} */
Blobs.BlobClient.prototype.getObject;
 /** @type {?} */
Blobs.BlobClient.prototype.getObjectAsString;
 /** @type {?} */
Blobs.BlobClient.prototype.getObjectAsJSON;
 /** @type {?} */
Blobs.BlobClient.prototype.getMetadata;
 /** @type {?} */
Blobs.BlobClient.prototype.putFile;
 /** @type {?} */
Blobs.BlobClient.prototype.putMetadata;
 /** @type {?} */
Blobs.BlobClient.prototype.putFiles;
 /** @type {?} */
Blobs.BlobClient.prototype.saveAllArtifacts;

/**
 * @param {string} name
 * @return {!Core.Artifact}
 */
Blobs.BlobClient.prototype.createArtifact = function(name) {};

/**
 * @param {string} metadataHash
 * @return {string}
 */
Blobs.BlobClient.prototype.getMetadataURL = function(metadataHash) {};

/**
 * @param {string} metadataHash
 * @return {string}
 */
Blobs.BlobClient.prototype.getRelativeMetadataURL = function(metadataHash) {};

/**
 * @param {string} metadataHash
 * @param {string} subpath
 * @return {string}
 */
Blobs.BlobClient.prototype.getViewURL = function(metadataHash, subpath) {};

/**
 * @param {string} metadataHash
 * @param {string} subpath
 * @return {string}
 */
Blobs.BlobClient.prototype.getDownloadURL = function(metadataHash, subpath) {};

/**
 * @param {string} metadataHash
 * @param {string} subpath
 * @return {string}
 */
Blobs.BlobClient.prototype.getRelativeDownloadURL = function(metadataHash, subpath) {};

/**
 * @param {string} filename
 * @param {boolean} isMetadata
 * @return {string}
 */
Blobs.BlobClient.prototype.getCreateURL = function(filename, isMetadata) {};

/**
 * @param {string} filename
 * @param {boolean} isMetadata
 * @return {string}
 */
Blobs.BlobClient.prototype.getRelativeCreateURL = function(filename, isMetadata) {};

/**
 * @param {number} bytes
 * @param {boolean} si
 * @return {string}
 */
Blobs.BlobClient.prototype.getHumanSize = function(bytes, si) {};
/** @const */
var Core = {};
/**
 * @record
 * @struct
 */
Core.ResultCallback = function() {};

/* TODO: CallSignature: Core */
/**
 * @record
 * @struct
 */
Core.Message = function() {};
 /** @type {string} */
Core.Message.prototype.msg;

/** @typedef {function(!Error, !Core.Artifact): void} */
Core.ArtifactCallback;
/**
 * @record
 * @struct
 */
Core.Artifact = function() {};
 /** @type {string} */
Core.Artifact.prototype.name;
 /** @type {!Blobs.BlobClient} */
Core.Artifact.prototype.blobClient;
 /** @type {!Blobs.BlobMetadata} */
Core.Artifact.prototype.descriptor;
 /** @type {?} */
Core.Artifact.prototype.addFile;
 /** @type {?} */
Core.Artifact.prototype.addFileAsSoftLink;
 /** @type {?} */
Core.Artifact.prototype.addFiles;
 /** @type {?} */
Core.Artifact.prototype.addFilesAsSoftLinks;
 /** @type {?} */
Core.Artifact.prototype.addMetadataHash;
 /** @type {?} */
Core.Artifact.prototype.addMetadataHashes;
 /** @type {?} */
Core.Artifact.prototype.addObjectHash;
 /** @type {?} */
Core.Artifact.prototype.addObjectHashes;
 /** @type {?} */
Core.Artifact.prototype.save;

/**
 * @param {string} name
 * @param {!Blobs.BlobClient} blobClient
 * @param {!Blobs.BlobMetadata} descriptor
 * @return {void}
 */
Core.Artifact.prototype.constructor = function(name, blobClient, descriptor) {};
/**
 * @record
 * @struct
 */
Core.Commit = function() {};
 /** @type {string} */
Core.Commit.prototype.commitHash;
 /** @type {string} */
Core.Commit.prototype.status;
 /** @type {string} */
Core.Commit.prototype.branchName;
/**
 * @record
 * @struct
 */
Core.Result = function() {};
 /** @type {boolean} */
Core.Result.prototype.success;
 /** @type {!Array<string>} */
Core.Result.prototype.messages;
 /** @type {!Array<string>} */
Core.Result.prototype.artifacts;
 /** @type {string} */
Core.Result.prototype.pluginName;
 /** @type {!Date} */
Core.Result.prototype.startTime;
 /** @type {!Date} */
Core.Result.prototype.finishTime;
 /** @type {!Error} */
Core.Result.prototype.error;
 /** @type {?} */
Core.Result.prototype.projectId;
 /** @type {!Array<?>} */
Core.Result.prototype.commits;

/**
 * Gets the success flag of this result object
 * @return {boolean}
 */
Core.Result.prototype.getSuccess = function() {};

/**
 * Sets the success flag of this result.
 * @param {boolean} value
 * @return {void}
 */
Core.Result.prototype.setSuccess = function(value) {};

/**
 * Returns with the plugin messages.
 * @return {!Array<!Core.Message>}
 */
Core.Result.prototype.getMessages = function() {};

/**
 * Adds a new plugin message to the messages list.
 * @param {!Core.Message} pluginMessage
 * @return {void}
 */
Core.Result.prototype.addMessage = function(pluginMessage) {};

/**
 * Returns the plugin artifacts.
 * @return {!Array<!Core.Artifact>}
 */
Core.Result.prototype.getArtifacts = function() {};

/**
 * Adds a saved artifact to the result - linked via its metadataHash.
 * Takes the metadataHash of saved artifact.
 * @param {string} metadataHash
 * @return {void}
 */
Core.Result.prototype.addArtifact = function(metadataHash) {};

/**
 * Adds a commit to the commit container.
 * @param {!Core.Commit} commitData
 * @return {void}
 */
Core.Result.prototype.addCommit = function(commitData) {};

/**
 * Gets the name of the plugin to which the result object belongs.
 * @return {string}
 */
Core.Result.prototype.getPluginName = function() {};

/**
 * Sets the name of the plugin to which the result object belongs to.
 * @param {string} pluginName
 * @return {string}
 */
Core.Result.prototype.setPluginName = function(pluginName) {};

/**
 * Sets the name of the projectId the result was generated from.
 * @param {string} projectId
 * @return {void}
 */
Core.Result.prototype.setProjectId = function(projectId) {};

/**
 * Gets the ISO 8601 representation of the time when the plugin started its execution.
 * @return {string}
 */
Core.Result.prototype.getStartTime = function() {};

/**
 * Sets the ISO 8601 representation of the time when the plugin started its execution.
 * @param {string} time
 * @return {void}
 */
Core.Result.prototype.setStartTime = function(time) {};

/**
 * Gets the ISO 8601 representation of the time when the plugin finished its execution.
 * @return {string}
 */
Core.Result.prototype.getFinishTime = function() {};

/**
 * Sets the ISO 8601 representation of the time when the plugin finished its execution.
 * @param {string} time
 * @return {void}
 */
Core.Result.prototype.setFinishTime = function(time) {};

/**
 * Gets error if any error occured during execution.
 * FIXME: should this return an Error object?
 * @return {string}
 */
Core.Result.prototype.getError = function() {};

/**
 * Sets the error string if any error occured during execution.
 * @param {(string|!Error)} error
 * @return {void}
 */
Core.Result.prototype.setError = function(error) {};

/**
 * Serializes this object to a JSON representation.
 * @return {{success: boolean, messages: !Array<!Core.Message>, pluginName: string, finishTime: string}}
 */
Core.Result.prototype.serialize = function() {};
/**
 * @record
 * @struct
 */
Core.RelationRule = function() {};
 /** @type {number} */
Core.RelationRule.prototype.min;
 /** @type {number} */
Core.RelationRule.prototype.max;
 /** @type {{min: number, max: number}} */
Core.RelationRule.prototype.absolutePathOfTarget;
/**
 * @record
 * @struct
 */
Core.Constraint = function() {};
 /** @type {string} */
Core.Constraint.prototype.script;
 /** @type {string} */
Core.Constraint.prototype.info;
 /** @type {string} */
Core.Constraint.prototype.priority;
/**
 * @record
 * @struct
 */
Core.MixinViolation = function() {};
 /** @type {string} */
Core.MixinViolation.prototype.severity;
 /** @type {string} */
Core.MixinViolation.prototype.type;
 /** @type {string} */
Core.MixinViolation.prototype.ruleName;
 /** @type {string} */
Core.MixinViolation.prototype.targetInfo;
 /** @type {!Common.Node} */
Core.MixinViolation.prototype.targetNode;
 /** @type {!Array<string>} */
Core.MixinViolation.prototype.collisionPaths;
 /** @type {!Array<!Common.Node>} */
Core.MixinViolation.prototype.collisionNodes;
 /** @type {string} */
Core.MixinViolation.prototype.message;
 /** @type {string} */
Core.MixinViolation.prototype.hint;
/**
 * @record
 * @struct
 */
Core.GmePersisted = function() {};
 /** @type {string} */
Core.GmePersisted.prototype.rootHash;

/** @const */
Core.TraversalOrder = {};
/** @const {number} */
Core.TraversalOrder.BFS;
/** @const {number} */
Core.TraversalOrder.DFS;

/** @typedef {string} */
Core.GUID;
/**
 * @record
 * @struct
 */
Core.NodeParameters = function() {};
 /** @type {!Common.Node} */
Core.NodeParameters.prototype.parent;
 /** @type {!Common.Node} */
Core.NodeParameters.prototype.base;
 /** @type {string} */
Core.NodeParameters.prototype.relid;
 /** @type {string} */
Core.NodeParameters.prototype.guid;
/**
 * @record
 * @struct
 */
Core.LibraryInfo = function() {};
 /** @type {string} */
Core.LibraryInfo.prototype.projectId;
 /** @type {string} */
Core.LibraryInfo.prototype.branchName;
 /** @type {string} */
Core.LibraryInfo.prototype.commitHash;
/**
 * @record
 * @struct
 */
Core.MetaNodeParameters = function() {};
 /** @type {{node: !Common.Node, children: !Array<!Common.Node>}} */
Core.MetaNodeParameters.prototype.object;
 /** @type {boolean} */
Core.MetaNodeParameters.prototype.sensitive;
 /** @type {boolean} */
Core.MetaNodeParameters.prototype.multiplicity;
 /** @type {string} */
Core.MetaNodeParameters.prototype.aspect;
/**
 * @record
 * @struct
 */
Core.MetaRule = function() {};
 /** @type {(string|number|boolean)} */
Core.MetaRule.prototype.type;
 /** @type {!Array<string>} */
Core.MetaRule.prototype.enum;
/**
 * @record
 * @struct
 */
Core.TraversalOptions = function() {};
 /** @type {boolean} */
Core.TraversalOptions.prototype.excludeRoot;
 /** @type {Core.TraversalOrder} */
Core.TraversalOptions.prototype.order;
 /** @type {number} */
Core.TraversalOptions.prototype.maxParallelLoad;
 /** @type {boolean} */
Core.TraversalOptions.prototype.stopOnError;
/**
 * @record
 * @struct
 */
Core.Core = function() {};
 /** @type {?} */
Core.Core.prototype.addLibrary;
 /** @type {?} */
Core.Core.prototype.applyTreeDiff;
 /** @type {?} */
Core.Core.prototype.generateTreeDiff;
 /** @type {?} */
Core.Core.prototype.loadByPath;
 /** @type {?} */
Core.Core.prototype.loadChild;
 /** @type {?} */
Core.Core.prototype.loadChildren;
 /** @type {?} */
Core.Core.prototype.loadCollection;
 /** @type {?} */
Core.Core.prototype.loadOwnSubTree;
 /** @type {?} */
Core.Core.prototype.loadPointer;
 /** @type {?} */
Core.Core.prototype.loadRoot;
 /** @type {?} */
Core.Core.prototype.loadSubTree;
 /** @type {?} */
Core.Core.prototype.loadTree;
 /** @type {?} */
Core.Core.prototype.setGuid;
 /** @type {function(!Common.Node, string, string, string, (string|number|!Object)): !Error} */
Core.Core.prototype.setMemberAttribute;
 /** @type {?} */
Core.Core.prototype.traverse;
 /** @type {?} */
Core.Core.prototype.updateLibrary;

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @param {!Common.Node} member
 * @return {!Error}
 */
Core.Core.prototype.addMember = function(node, name, member) {};

/**
 * @param {!Common.Node} node
 * @param {string} mixinPath
 * @return {!Error}
 */
Core.Core.prototype.addMixin = function(node, mixinPath) {};

/**
 * @param {!Object} conflict
 * @return {!Object}
 */
Core.Core.prototype.applyResolution = function(conflict) {};

/**
 * @param {!Common.Node} node
 * @param {string} mixinPath
 * @return {(string|boolean)}
 */
Core.Core.prototype.canSetAsMixin = function(node, mixinPath) {};

/**
 * @param {!Common.Node} node
 * @return {!Error}
 */
Core.Core.prototype.clearMetaRules = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {!Error}
 */
Core.Core.prototype.clearMixins = function(node) {};

/**
 * @param {!Common.Node} node
 * @param {!Common.Node} parent
 * @return {(!Common.Node|!Error)}
 */
Core.Core.prototype.copyNode = function(node, parent) {};

/**
 * @param {!Array<!Common.Node>} nodes
 * @param {!Common.Node} parent
 * @return {(!Error|!Array<!Common.Node>)}
 */
Core.Core.prototype.copyNodes = function(nodes, parent) {};

/**
 * @param {!Core.NodeParameters} parameters
 * @return {(!Common.Node|!Error)}
 */
Core.Core.prototype.createNode = function(parameters) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {!Error}
 */
Core.Core.prototype.createSet = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {!Error}
 */
Core.Core.prototype.delAspectMeta = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @param {string} targetPath
 * @return {!Error}
 */
Core.Core.prototype.delAspectMetaTarget = function(node, name, targetPath) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {!Error}
 */
Core.Core.prototype.delAttribute = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {!Error}
 */
Core.Core.prototype.delAttributeMeta = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @param {string} childPath
 * @return {!Error}
 */
Core.Core.prototype.delChildMeta = function(node, childPath) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {!Error}
 */
Core.Core.prototype.delConstraint = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @return {!Error}
 */
Core.Core.prototype.deleteNode = function(node) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {!Error}
 */
Core.Core.prototype.deletePointer = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {!Error}
 */
Core.Core.prototype.deleteSet = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @param {string} path
 * @return {!Error}
 */
Core.Core.prototype.delMember = function(node, name, path) {};

/**
 * @param {!Common.Node} node
 * @param {string} setName
 * @param {string} memberPath
 * @param {string} attrName
 * @return {!Error}
 */
Core.Core.prototype.delMemberAttribute = function(node, setName, memberPath, attrName) {};

/**
 * @param {!Common.Node} node
 * @param {string} setName
 * @param {string} memberPath
 * @param {string} regName
 * @return {!Error}
 */
Core.Core.prototype.delMemberRegistry = function(node, setName, memberPath, regName) {};

/**
 * @param {!Common.Node} node
 * @param {string} mixinPath
 * @return {!Error}
 */
Core.Core.prototype.delMixin = function(node, mixinPath) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {!Error}
 */
Core.Core.prototype.delPointerMeta = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @param {string} targetPath
 * @return {!Error}
 */
Core.Core.prototype.delPointerMetaTarget = function(node, name, targetPath) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {!Error}
 */
Core.Core.prototype.delRegistry = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @return {!Object<string,!Common.Node>}
 */
Core.Core.prototype.getAllMetaNodes = function(node) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {!Array<string>}
 */
Core.Core.prototype.getAspectMeta = function(node, name) {};

/**
 * Retrieves the value of the given attribute of the given node.
 * @param {!Common.Node} node - the node in question.
 * @param {string} name - the name of the attribute.
 * 
 * @return {(string|number|!Object)} The function returns the value of the attribute of the node.
 * The retrieved attribute should not be modified as is - it should be copied first!
 * The value can be an object or any primitive type.
 * If the return value is undefined; the node does not have such attribute defined.
 * If the node is undefined the returned value is null.
 */
Core.Core.prototype.getAttribute = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {!Object}
 */
Core.Core.prototype.getAttributeMeta = function(node, name) {};

/**
 * Get the defined attribute names
 * @param {!Common.Node} node
 * @return {!Array<string>}
 */
Core.Core.prototype.getAttributeNames = function(node) {};

/**
 * Get the base node
 * @param {!Common.Node} node
 * @return {!Common.Node}
 */
Core.Core.prototype.getBase = function(node) {};

/**
 * Get the base node at the top of the inheritance chain (typically the fco).
 * @param {!Common.Node} node
 * @return {!Common.Node}
 */
Core.Core.prototype.getBaseRoot = function(node) {};

/**
 * Get the most specific meta node.
 * @param {!Common.Node} node
 * @return {!Common.Node}
 */
Core.Core.prototype.getBaseType = function(node) {};

/**
 * @param {!Common.Node} node
 * @param {string} relativeId
 * @return {!Common.Node}
 */
Core.Core.prototype.getChild = function(node, relativeId) {};

/**
 * @param {!Common.Node} node
 * @return {!Object<string,string>}
 */
Core.Core.prototype.getChildrenHashes = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {!Core.RelationRule}
 */
Core.Core.prototype.getChildrenMeta = function(node) {};

/**
 * The children paths are available from the node.
 * @param {!Common.Node} parent
 * @return {!Array<string>}
 */
Core.Core.prototype.getChildrenPaths = function(parent) {};

/**
 * @param {!Common.Node} parent
 * @return {!Array<string>}
 */
Core.Core.prototype.getChildrenRelids = function(parent) {};

/**
 * @param {!Common.Node} node
 * @return {!Array<string>}
 */
Core.Core.prototype.getCollectionNames = function(node) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {!Array<string>}
 */
Core.Core.prototype.getCollectionPaths = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {!Core.Constraint}
 */
Core.Core.prototype.getConstraint = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @return {!Array<string>}
 */
Core.Core.prototype.getConstraintNames = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {!Common.Node}
 */
Core.Core.prototype.getFCO = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {string}
 */
Core.Core.prototype.getFullyQualifiedName = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {string}
 */
Core.Core.prototype.getGuid = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {string}
 */
Core.Core.prototype.getHash = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {!Object}
 */
Core.Core.prototype.getJsonMeta = function(node) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {(string|!Error)}
 */
Core.Core.prototype.getLibraryGuid = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {!Core.LibraryInfo}
 */
Core.Core.prototype.getLibraryInfo = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @param {boolean=} onlyOwn
 * @return {!Array<!Common.Node>}
 */
Core.Core.prototype.getLibraryMetaNodes = function(node, name, onlyOwn) {};

/**
 * @param {!Common.Node} node
 * @return {!Array<string>}
 */
Core.Core.prototype.getLibraryNames = function(node) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {!Common.Node}
 */
Core.Core.prototype.getLibraryRoot = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @param {string} setName
 * @param {string} memberPath
 * @param {string} attrName
 * @return {(string|number|!Object)}
 */
Core.Core.prototype.getMemberAttribute = function(node, setName, memberPath, attrName) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @param {string} memberPath
 * @return {!Array<string>}
 */
Core.Core.prototype.getMemberAttributeNames = function(node, name, memberPath) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @param {string} memberPath
 * @return {!Array<string>}
 */
Core.Core.prototype.getMemberOwnAttributeNames = function(node, name, memberPath) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @param {string} memberPath
 * @return {!Array<string>}
 */
Core.Core.prototype.getMemberOwnRegistry = function(node, name, memberPath) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {!Array<string>}
 */
Core.Core.prototype.getMemberPaths = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @param {string} setName
 * @param {string} memberPath
 * @param {string} regName
 * @return {(string|number|!Object)}
 */
Core.Core.prototype.getMemberRegistry = function(node, setName, memberPath, regName) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @param {string} memberpath
 * @return {!Array<string>}
 */
Core.Core.prototype.getMemberRegistryNames = function(node, name, memberpath) {};

/**
 * @param {!Common.Node} node
 * @return {!Array<!Core.MixinViolation>}
 */
Core.Core.prototype.getMixinErrors = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {!Object<string,!Common.Node>}
 */
Core.Core.prototype.getMixinNodes = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {!Array<string>}
 */
Core.Core.prototype.getMixinPaths = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {string}
 */
Core.Core.prototype.getNamespace = function(node) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {(string|number|!Object)}
 */
Core.Core.prototype.getOwnAttribute = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @return {!Array<string>}
 */
Core.Core.prototype.getOwnAttributeNames = function(node) {};

/**
 * @param {!Common.Node} parent
 * @return {!Array<string>}
 */
Core.Core.prototype.getOwnChildrenPaths = function(parent) {};

/**
 * @param {!Common.Node} parent
 * @return {!Array<string>}
 */
Core.Core.prototype.getOwnChildrenRelids = function(parent) {};

/**
 * @param {!Common.Node} node
 * @return {!Array<string>}
 */
Core.Core.prototype.getOwnConstraintNames = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {!Object}
 */
Core.Core.prototype.getOwnJsonMeta = function(node) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {!Array<string>}
 */
Core.Core.prototype.getOwnMemberPaths = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @return {!Object<string,!Common.Node>}
 */
Core.Core.prototype.getOwnMixinNodes = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {!Array<string>}
 */
Core.Core.prototype.getOwnMixinPaths = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {!Array<string>}
 */
Core.Core.prototype.getOwnPointerNames = function(node) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {string}
 */
Core.Core.prototype.getOwnPointerPath = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {(string|number|!Object)}
 */
Core.Core.prototype.getOwnRegistry = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @return {!Array<string>}
 */
Core.Core.prototype.getOwnRegistryNames = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {!Array<string>}
 */
Core.Core.prototype.getOwnValidAspectNames = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {!Array<string>}
 */
Core.Core.prototype.getOwnValidAttributeNames = function(node) {};

/**
 * The parent paths are available from the node.
 * @param {!Common.Node} node
 * @return {!Common.Node}
 */
Core.Core.prototype.getParent = function(node) {};

/**
 * Get the path/id
 * @param {!Common.Node} node
 * @return {string}
 */
Core.Core.prototype.getPath = function(node) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {!Core.RelationRule}
 */
Core.Core.prototype.getPointerMeta = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @return {!Array<string>}
 */
Core.Core.prototype.getPointerNames = function(node) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {string}
 */
Core.Core.prototype.getPointerPath = function(node, name) {};

/**
 * Get the assigned registry
 * @param {!Common.Node} node
 * @param {string} name
 * @return {(string|number|!Object)}
 */
Core.Core.prototype.getRegistry = function(node, name) {};

/**
 * Get the defined registry names
 * @param {!Common.Node} node
 * @return {!Array<string>}
 */
Core.Core.prototype.getRegistryNames = function(node) {};

/**
 * Get the relative id
 * @param {!Common.Node} node
 * @return {string}
 */
Core.Core.prototype.getRelid = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {!Common.Node}
 */
Core.Core.prototype.getRoot = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {!Array<string>}
 */
Core.Core.prototype.getSetNames = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {!Common.Node}
 */
Core.Core.prototype.getTypeRoot = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {!Array<string>}
 */
Core.Core.prototype.getValidAspectNames = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {!Array<string>}
 */
Core.Core.prototype.getValidAttributeNames = function(node) {};

/**
 * @param {!Core.MetaNodeParameters} parameters
 * @return {!Array<!Common.Node>}
 */
Core.Core.prototype.getValidChildrenMetaNodes = function(parameters) {};

/**
 * @param {!Common.Node} node
 * @return {!Array<string>}
 */
Core.Core.prototype.getValidChildrenPaths = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {!Array<string>}
 */
Core.Core.prototype.getValidPointerNames = function(node) {};

/**
 * @param {!Core.MetaNodeParameters} parameters
 * @return {!Array<!Common.Node>}
 */
Core.Core.prototype.getValidSetMetaNodes = function(parameters) {};

/**
 * @param {!Common.Node} node
 * @return {!Array<string>}
 */
Core.Core.prototype.getValidSetNames = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {boolean}
 */
Core.Core.prototype.isAbstract = function(node) {};

/**
 * Connections are just nodes with two pointers named "src" and "dst".
 * @param {!Common.Node} node
 * @return {boolean}
 */
Core.Core.prototype.isConnection = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {boolean}
 */
Core.Core.prototype.isEmpty = function(node) {};

/**
 * @param {!Common.Node} node
 * @param {string} setName
 * @param {string} memberPath
 * @return {boolean}
 */
Core.Core.prototype.isFullyOverriddenMember = function(node, setName, memberPath) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {boolean}
 */
Core.Core.prototype.isInstanceOf = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @return {boolean}
 */
Core.Core.prototype.isLibraryElement = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {boolean}
 */
Core.Core.prototype.isLibraryRoot = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {!Object}
 */
Core.Core.prototype.isMemberOf = function(node) {};

/**
 * @param {!Common.Node} node
 * @return {boolean}
 */
Core.Core.prototype.isMetaNode = function(node) {};

/**
 * @param {!Common.Node} node
 * @param {!Common.Node} type
 * @return {boolean}
 */
Core.Core.prototype.isTypeOf = function(node, type) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @param {(string|number|!Object)} value
 * @return {boolean}
 */
Core.Core.prototype.isValidAttributeValueOf = function(node, name, value) {};

/**
 * @param {!Common.Node} node
 * @param {!Common.Node} parent
 * @return {boolean}
 */
Core.Core.prototype.isValidChildOf = function(node, parent) {};

/**
 * @param {!Common.Node} node
 * @param {!Common.Node} source
 * @param {string} name
 * @return {boolean}
 */
Core.Core.prototype.isValidTargetOf = function(node, source, name) {};

/**
 * @param {!Common.Node} node
 * @param {!Common.Node} parent
 * @return {(!Common.Node|!Error)}
 */
Core.Core.prototype.moveNode = function(node, parent) {};

/**
 * @param {!Common.Node} node
 * @return {!Core.GmePersisted}
 */
Core.Core.prototype.persist = function(node) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @return {void}
 */
Core.Core.prototype.removeLibrary = function(node, name) {};

/**
 * @param {!Common.Node} node
 * @param {string} oldName
 * @param {string} newName
 * @return {void}
 */
Core.Core.prototype.renameLibrary = function(node, oldName, newName) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @param {!Common.Node} target
 * @return {!Error}
 */
Core.Core.prototype.setAspectMetaTarget = function(node, name, target) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @param {(string|number|!Object)} value
 * @return {!Error}
 */
Core.Core.prototype.setAttribute = function(node, name, value) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @param {!Core.MetaRule} rule
 * @return {!Error}
 */
Core.Core.prototype.setAttributeMeta = function(node, name, rule) {};

/**
 * @param {!Common.Node} node
 * @param {!Common.Node} base
 * @return {!Error}
 */
Core.Core.prototype.setBase = function(node, base) {};

/**
 * @param {!Common.Node} node
 * @param {!Common.Node} child
 * @param {number=} min
 * @param {number=} max
 * @return {!Error}
 */
Core.Core.prototype.setChildMeta = function(node, child, min, max) {};

/**
 * @param {!Common.Node} node
 * @param {number=} min
 * @param {number=} max
 * @return {!Error}
 */
Core.Core.prototype.setChildrenMetaLimits = function(node, min, max) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @param {!Core.Constraint} constraint
 * @return {!Error}
 */
Core.Core.prototype.setConstraint = function(node, name, constraint) {};

/**
 * @param {!Common.Node} node
 * @param {string} setName
 * @param {string} memberPath
 * @param {string} regName
 * @param {(string|number|!Object)=} value
 * @return {!Error}
 */
Core.Core.prototype.setMemberRegistry = function(node, setName, memberPath, regName, value) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @param {!Common.Node} target
 * @return {!Error}
 */
Core.Core.prototype.setPointer = function(node, name, target) {};

/**
 * @param {!Common.Node} node
 * @param {string} memberPath
 * @param {number=} min
 * @param {number=} max
 * @return {!Error}
 */
Core.Core.prototype.setPointerMetaLimits = function(node, memberPath, min, max) {};

/**
 * @param {!Common.Node} node
 * @param {string} name
 * @param {!Common.Node} target
 * @param {number=} min
 * @param {number=} max
 * @return {!Error}
 */
Core.Core.prototype.setPointerMetaTarget = function(node, name, target, min, max) {};

/**
 * Get the assigned registry
 * @param {!Common.Node} node
 * @param {string} name
 * @param {(string|number|!Object)} value
 * @return {!Error}
 */
Core.Core.prototype.setRegistry = function(node, name, value) {};

/**
 * @param {!Object} mine
 * @param {!Object} theirs
 * @return {!Object}
 */
Core.Core.prototype.tryToConcatChanges = function(mine, theirs) {};
/**
 * @record
 * @struct
 */
Core.Dictionary = function() {};

/* TODO: IndexSignature: Core */
/**
 * @record
 * @struct
 */
Core.GmeLogger = function() {};

/**
 * @param {string} fmt
 * @param {string=} msg
 * @return {void}
 */
Core.GmeLogger.prototype.debug = function(fmt, msg) {};

/**
 * @param {string} fmt
 * @param {string=} msg
 * @return {void}
 */
Core.GmeLogger.prototype.info = function(fmt, msg) {};

/**
 * @param {string} fmt
 * @param {string=} msg
 * @return {void}
 */
Core.GmeLogger.prototype.warn = function(fmt, msg) {};

/**
 * @param {string} fmt
 * @param {string=} msg
 * @return {void}
 */
Core.GmeLogger.prototype.error = function(fmt, msg) {};

/**
 * Creates a new logger with the same settings
 * and a name that is an augmentation of this logger and the
 * provided string.
 * If the second argument is true
 * - the provided name will be used as is.
 * @param {string} fmt
 * @param {boolean} reuse
 * @return {!Core.GmeLogger}
 */
Core.GmeLogger.prototype.fork = function(fmt, reuse) {};
/**
 * @record
 * @struct
 */
Core.ProjectInterface = function() {};
/**
 * @record
 * @struct
 */
Core.ThenCallback = function() {};

/* TODO: CallSignature: Core */
/**
 * @record
 * @struct
 */
Core.CatchCallback = function() {};

/* TODO: CallSignature: Core */
/**
 * @record
 * @struct
 */
Core.Promisable = function() {};

/**
 * @param {!Core.ThenCallback} callback
 * @return {!Core.Promisable}
 */
Core.Promisable.prototype.then = function(callback) {};

/**
 * @param {!Core.CatchCallback} callback
 * @return {!Core.Promisable}
 */
Core.Promisable.prototype.catch = function(callback) {};
/**
 * @record
 * @struct
 */
Core.Base = function() {};
 /** @type {!Common.Node} */
Core.Base.prototype.activeNode;
 /** @type {!Array<!Common.Node>} */
Core.Base.prototype.activeSelection;
 /** @type {!Blobs.BlobClient} */
Core.Base.prototype.blobClient;
 /** @type {!Core.Core} */
Core.Base.prototype.core;
 /** @type {!Config.GmeConfig} */
Core.Base.prototype.gmeConfig;
 /** @type {boolean} */
Core.Base.prototype.isConfigured;
 /** @type {!Core.GmeLogger} */
Core.Base.prototype.logger;
 /** @type {?} */
Core.Base.prototype.META;
 /** @type {string} */
Core.Base.prototype.namespace;
 /** @type {!Array<?>} */
Core.Base.prototype.notificationHandlers;
 /** @type {!Object} */
Core.Base.prototype.pluginMetadata;
 /** @type {!Core.ProjectInterface} */
Core.Base.prototype.project;
 /** @type {!Core.Result} */
Core.Base.prototype.result;
 /** @type {!Common.Node} */
Core.Base.prototype.rootNode;
 /** @type {?} */
Core.Base.prototype.sendNotification;

/**
 * @param {string} status
 * @return {void}
 */
Core.Base.prototype.addCommitToResult = function(status) {};

/**
 * @param {?} node
 * @return {boolean}
 */
Core.Base.prototype.baseIsMeta = function(node) {};

/**
 * @param {!Config.GmeConfig} config
 * @return {void}
 */
Core.Base.prototype.configure = function(config) {};

/**
 * @param {?} node
 * @param {string} message
 * @param {string} serverity
 * @return {void}
 */
Core.Base.prototype.createMessage = function(node, message, serverity) {};

/**
 * Gets the configuration structure for the plugin.
 * The ConfigurationStructure defines the configuration for the plugin
 * and will be used to populate the GUI when invoking the plugin from webGME.
 * @return {!Array<!Config.ConfigItem>}
 */
Core.Base.prototype.getConfigStructure = function() {};

/**
 * @return {!Config.GmeConfig}
 */
Core.Base.prototype.getCurrentConfig = function() {};

/**
 * @return {!Config.GmeConfig}
 */
Core.Base.prototype.getDefaultConfig = function() {};

/**
 * Gets the description of the plugin.
 * @return {string}
 */
Core.Base.prototype.getDescription = function() {};

/**
 * @return {?}
 */
Core.Base.prototype.getMetadata = function() {};

/**
 * @param {?} node
 * @return {?}
 */
Core.Base.prototype.getMetaType = function(node) {};

/**
 * Gets the name of the plugin.
 * @return {string}
 */
Core.Base.prototype.getName = function() {};

/**
 * Gets the semantic version (semver.org) of the plugin.
 * @return {string}
 */
Core.Base.prototype.getVersion = function() {};

/**
 * @param {!Core.GmeLogger} logger
 * @param {!Blobs.BlobClient} blobClient
 * @param {!Config.GmeConfig} gmeConfig
 * @return {void}
 */
Core.Base.prototype.initialize = function(logger, blobClient, gmeConfig) {};

/**
 * @param {?} pluginId
 * @return {?}
 */
Core.Base.prototype.isInvalidActiveNode = function(pluginId) {};

/**
 * @param {?} node
 * @param {?} metaNode
 * @return {boolean}
 */
Core.Base.prototype.isMetaTypeOf = function(node, metaNode) {};

/**
 * Main function for the plugin to execute.
 * Notes:
 * - Always log with the provided logger.[error,warning,info,debug].
 * - Do NOT put any user interaction logic UI, etc. inside this method.
 * - handler always has to be called even if error happened.
 * When this runs the core api is used to extract the essential
 * meta-model and the model-instance, these are then written to the mega-model.
 * The mega-model contains all of the models used to describe the target system.
 * https://github.com/ptaoussanis/sente
 * and https://github.com/cognitect/transit-format
 * will be used to connect to the
 * graph database (immortals) where the mega-model is stored.
 * @param {!Core.ResultCallback} callback
 * @return {void}
 */
Core.Base.prototype.main = function(callback) {};

/**
 * @param {string=} message
 * @return {!Core.Promisable}
 */
Core.Base.prototype.save = function(message) {};

/**
 * @param {!Config.GmeConfig} newConfig
 * @return {void}
 */
Core.Base.prototype.setCurrentConfig = function(newConfig) {};

/**
 * @param {?} generatedMeta
 * @return {void}
 */
Core.Base.prototype.updateMeta = function(generatedMeta) {};

/**
 * @param {boolean} value
 * @param {!TemplateStringsArray} message
 * @return {void}
 */
Core.Base.prototype.updateSuccess = function(value, message) {};

/**
 * @constructor
 * @struct
 */
Core.PluginBase = function() {};
 /** @type {!Common.Node} */
Core.PluginBase.prototype.activeNode;
 /** @type {!Array<!Common.Node>} */
Core.PluginBase.prototype.activeSelection;
 /** @type {!Blobs.BlobClient} */
Core.PluginBase.prototype.blobClient;
 /** @type {!Core.Core} */
Core.PluginBase.prototype.core;
 /** @type {!Config.GmeConfig} */
Core.PluginBase.prototype.gmeConfig;
 /** @type {boolean} */
Core.PluginBase.prototype.isConfigured;
 /** @type {!Core.GmeLogger} */
Core.PluginBase.prototype.logger;
 /** @type {?} */
Core.PluginBase.prototype.META;
 /** @type {string} */
Core.PluginBase.prototype.namespace;
 /** @type {!Array<?>} */
Core.PluginBase.prototype.notificationHandlers;
 /** @type {!Object} */
Core.PluginBase.prototype.pluginMetadata;
 /** @type {!Core.ProjectInterface} */
Core.PluginBase.prototype.project;
 /** @type {!Core.Result} */
Core.PluginBase.prototype.result;
 /** @type {!Common.Node} */
Core.PluginBase.prototype.rootNode;
 /** @type {?} */
Core.PluginBase.prototype.sendNotification;

/**
 * @param {string} status
 * @return {void}
 */
Core.PluginBase.prototype.addCommitToResult = function(status) {};

/**
 * @param {?} node
 * @return {boolean}
 */
Core.PluginBase.prototype.baseIsMeta = function(node) {};

/**
 * @param {!Config.GmeConfig} config
 * @return {void}
 */
Core.PluginBase.prototype.configure = function(config) {};

/**
 * @param {?} node
 * @param {string} message
 * @param {string} serverity
 * @return {void}
 */
Core.PluginBase.prototype.createMessage = function(node, message, serverity) {};

/**
 * @return {?}
 */
Core.PluginBase.prototype.getConfigStructure = function() {};

/**
 * @return {!Config.GmeConfig}
 */
Core.PluginBase.prototype.getCurrentConfig = function() {};

/**
 * @return {!Config.GmeConfig}
 */
Core.PluginBase.prototype.getDefaultConfig = function() {};

/**
 * @return {string}
 */
Core.PluginBase.prototype.getDescription = function() {};

/**
 * @return {?}
 */
Core.PluginBase.prototype.getMetadata = function() {};

/**
 * @param {?} node
 * @return {?}
 */
Core.PluginBase.prototype.getMetaType = function(node) {};

/**
 * @return {string}
 */
Core.PluginBase.prototype.getName = function() {};

/**
 * @return {string}
 */
Core.PluginBase.prototype.getVersion = function() {};

/**
 * @param {!Core.GmeLogger} logger
 * @param {!Blobs.BlobClient} blobClient
 * @param {!Config.GmeConfig} gmeConfig
 * @return {void}
 */
Core.PluginBase.prototype.initialize = function(logger, blobClient, gmeConfig) {};

/**
 * @param {?} pluginId
 * @return {?}
 */
Core.PluginBase.prototype.isInvalidActiveNode = function(pluginId) {};

/**
 * @param {?} node
 * @param {?} metaNode
 * @return {boolean}
 */
Core.PluginBase.prototype.isMetaTypeOf = function(node, metaNode) {};

/**
 * @param {!Core.ResultCallback} callback
 * @return {void}
 */
Core.PluginBase.prototype.main = function(callback) {};

/**
 * @param {string=} message
 * @return {!Core.Promisable}
 */
Core.PluginBase.prototype.save = function(message) {};

/**
 * @param {!Config.GmeConfig} newConfig
 * @return {void}
 */
Core.PluginBase.prototype.setCurrentConfig = function(newConfig) {};

/**
 * @param {?} generatedMeta
 * @return {void}
 */
Core.PluginBase.prototype.updateMeta = function(generatedMeta) {};

/**
 * @param {boolean} value
 * @param {!TemplateStringsArray} message
 * @return {void}
 */
Core.PluginBase.prototype.updateSuccess = function(value, message) {};
/** @const */
var Config = {};

/** @typedef {!Object<string,string>} */
Config.StringDictionary;
/**
 * @record
 * @struct
 */
Config.ConfigItem = function() {};
 /** @type {string} */
Config.ConfigItem.prototype.name;
 /** @type {string} */
Config.ConfigItem.prototype.displayName;
 /** @type {string} */
Config.ConfigItem.prototype.description;
 /** @type {string} */
Config.ConfigItem.prototype.value;
 /** @type {string} */
Config.ConfigItem.prototype.valueType;
 /** @type {!Array<string>} */
Config.ConfigItem.prototype.valueItems;
 /** @type {!RegExp} */
Config.ConfigItem.prototype.regex;
 /** @type {string} */
Config.ConfigItem.prototype.regexMessage;
 /** @type {boolean} */
Config.ConfigItem.prototype.readOnly;

/**
 * @constructor
 * @struct
 */
Config.GmeConfig = function() {};
 /** @type {?} */
Config.GmeConfig.prototype.addOns;
 /** @type {{enable: boolean, jwt: {privateKey: string, publicKey: string}, logInUrl: string, logOutUrl: string}} */
Config.GmeConfig.prototype.authentication;
 /** @type {?} */
Config.GmeConfig.prototype.bin;
 /** @type {string} */
Config.GmeConfig.prototype.blob;
 /** @type {{log: {level: string}}} */
Config.GmeConfig.prototype.client;
 /** @type {!Core.Core} */
Config.GmeConfig.prototype.core;
 /** @type {boolean} */
Config.GmeConfig.prototype.debug;
 /** @type {?} */
Config.GmeConfig.prototype.executor;
 /** @type {{uri: string}} */
Config.GmeConfig.prototype.mongo;
 /** @type {{basePaths: !Array<string>, allowBrowserExecution: boolean, allowServerExecution: boolean}} */
Config.GmeConfig.prototype.plugin;
 /** @type {!Object<string,string>} */
Config.GmeConfig.prototype.requirejsPaths;
 /** @type {?} */
Config.GmeConfig.prototype.rest;
 /** @type {{basePaths: !Array<string>, panelPaths: !Array<string>, enable: boolean, allowDuplication: boolean}} */
Config.GmeConfig.prototype.seedProjects;
 /** @type {{port: number, handle: {fd: number}, log: ?}} */
Config.GmeConfig.prototype.server;
 /** @type {?} */
Config.GmeConfig.prototype.socketIO;
 /** @type {?} */
Config.GmeConfig.prototype.storage;
 /** @type {{panelPaths: !Array<string>, visualizerDescriptors: !Array<string>, extraCss: !Array<string>}} */
Config.GmeConfig.prototype.visualization;

/**
 * @return {?}
 */
Config.GmeConfig.prototype.serialize = function() {};
/**
 * @extends {Config.GmeConfig}
 * @constructor
 * @struct
 */
Config.PluginConfig = function() {};

/* TODO: IndexSignature: Config */
 /** @type {!Config.PluginConfig} */
Config.config;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "webgme/v1"
/** @const */
tsickle_declare_module.webgme_v_ = {};

/** @typedef {string} */
tsickle_declare_module.webgme_v_.GUID;
/**
 * @record
 * @struct
 */
tsickle_declare_module.webgme_v_.JsonContainment = function() {};

/* TODO: IndexSignature: tsickle_declare_module.webgme_v_ */
/**
 * @record
 * @struct
 */
tsickle_declare_module.webgme_v_.JsonNode = function() {};
 /** @type {?} */
tsickle_declare_module.webgme_v_.JsonNode.prototype.attributes;
 /** @type {string} */
tsickle_declare_module.webgme_v_.JsonNode.prototype.base;
 /** @type {?} */
tsickle_declare_module.webgme_v_.JsonNode.prototype.meta;
 /** @type {string} */
tsickle_declare_module.webgme_v_.JsonNode.prototype.parent;
 /** @type {?} */
tsickle_declare_module.webgme_v_.JsonNode.prototype.pointers;
 /** @type {?} */
tsickle_declare_module.webgme_v_.JsonNode.prototype.registry;
 /** @type {?} */
tsickle_declare_module.webgme_v_.JsonNode.prototype.sets;
 /** @type {?} */
tsickle_declare_module.webgme_v_.JsonNode.prototype.constratints;
/**
 * @record
 * @struct
 */
tsickle_declare_module.webgme_v_.JsonObj = function() {};
 /** @type {{path: string, guid: string}} */
tsickle_declare_module.webgme_v_.JsonObj.prototype.root;
 /** @type {!JsonContainment} */
tsickle_declare_module.webgme_v_.JsonObj.prototype.containment;
 /** @type {?} */
tsickle_declare_module.webgme_v_.JsonObj.prototype.bases;
 /** @type {?} */
tsickle_declare_module.webgme_v_.JsonObj.prototype.nodes;
 /** @type {?} */
tsickle_declare_module.webgme_v_.JsonObj.prototype.relids;
 /** @type {?} */
tsickle_declare_module.webgme_v_.JsonObj.prototype.metaSheets;
