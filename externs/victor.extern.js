/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/victor/index.d.ts:
/**
 * @record
 * @struct
 */
function VictorCoordinates() {}
 /** @type {number} */
VictorCoordinates.prototype.x;
 /** @type {number} */
VictorCoordinates.prototype.y;

/**
 * @constructor
 * @struct
 * Can be used without the new keyword.
 * @param {number} x The X component
 * @param {number} y The Y component
 */
function Victor(x, y) {}
 /** @type {number} */
Victor.prototype.x;
 /** @type {number} */
Victor.prototype.y;

/**
 * Creates vector from array.
 * @param {!Array<number>} arr array An array that contains the X component in the first element and the Y component in the second
 * @return {!Victor}
 */
Victor.fromArray = function(arr) {};

/**
 * Creates vector from object.
 * @param {?} obj An object containing the X component in the x property and the Y component in the y property
 * @return {!Victor}
 */
Victor.fromObject = function(obj) {};

/**
 * Creates a new Victor with the same X and Y components.
 * @return {!Victor}
 */
Victor.prototype.clone = function() {};

/**
 * Copies the X component of another vector in to itself.
 * @param {!Victor} vector
 * @return {!Victor}
 */
Victor.prototype.copyX = function(vector) {};

/**
 * Copies the Y component of another vector in to itself.
 * @param {!Victor} vector
 * @return {!Victor}
 */
Victor.prototype.copyY = function(vector) {};

/**
 * Copies the X and Y components of another vector in to itself.
 * @param {!Victor} vector
 * @return {!Victor}
 */
Victor.prototype.copy = function(vector) {};

/**
 * Returns a string representation of the X and Y components.
 * @return {string}
 */
Victor.prototype.toString = function() {};

/**
 * Returns an array representation of the X and Y components.
 * @return {!Array<number>}
 */
Victor.prototype.toArray = function() {};

/**
 * Returns an object representation of tha X and Y components.
 * @return {?}
 */
Victor.prototype.toObject = function() {};

/**
 * Adds another vector's X component to itself.
 * @param {!Victor} vector
 * @return {!Victor}
 */
Victor.prototype.addX = function(vector) {};

/**
 * Adds another vector's Y component to itself.
 * @param {!Victor} vector
 * @return {!Victor}
 */
Victor.prototype.addY = function(vector) {};

/**
 * Adds another vector to itself.
 * @param {!Victor} vector
 * @return {!Victor}
 */
Victor.prototype.add = function(vector) {};

/**
 * Adds the given scalar to both vector axis.
 * 
 * @param {number} scalar
 * @return {!Victor}
 */
Victor.prototype.addScalar = function(scalar) {};

/**
 * Adds the given scalar to the X axis.
 * 
 * @param {number} scalar
 * @return {!Victor}
 */
Victor.prototype.addScalarX = function(scalar) {};

/**
 * Adds the given scalar to the Y axis.
 * 
 * @param {number} scalar
 * @return {!Victor}
 */
Victor.prototype.addScalarY = function(scalar) {};

/**
 * Subtracts another vector's X component from itself.
 * @param {!Victor} vector
 * @return {!Victor}
 */
Victor.prototype.subtractX = function(vector) {};

/**
 * Subtracts another vector's Y component from itself.
 * @param {!Victor} vector
 * @return {!Victor}
 */
Victor.prototype.subtractY = function(vector) {};

/**
 * Subtracts another vector from itself.
 * @param {!Victor} vector
 * @return {!Victor}
 */
Victor.prototype.subtract = function(vector) {};

/**
 * Subtracts the given scalar from both axis.
 * 
 * @param {number} scalar
 * @return {!Victor}
 */
Victor.prototype.subtractScalar = function(scalar) {};

/**
 * Subtracts the given scalar from the X axis.
 * 
 * @param {number} scalar
 * @return {!Victor}
 */
Victor.prototype.subtractScalarX = function(scalar) {};

/**
 * Subtracts the given scalar from the Y axis.
 * 
 * @param {number} scalar
 * @return {!Victor}
 */
Victor.prototype.subtractScalarY = function(scalar) {};

/**
 * Multiplies the X component with the X component of another vector.
 * @param {!Victor} vector
 * @return {!Victor}
 */
Victor.prototype.multiplyX = function(vector) {};

/**
 * Multiplies the Y component with the Y component of another vector.
 * @param {!Victor} vector
 * @return {!Victor}
 */
Victor.prototype.multiplyY = function(vector) {};

/**
 * Multiplies both components with another vector.
 * @param {!Victor} vector
 * @return {!Victor}
 */
Victor.prototype.multiply = function(vector) {};

/**
 * Multiplies both vector axis by the given scalar value
 * 
 * @param {number} scalar
 * @return {!Victor}
 */
Victor.prototype.multiplyScalar = function(scalar) {};

/**
 * Multiplies the X axis by the given scalar
 * 
 * @param {number} scalar
 * @return {!Victor}
 */
Victor.prototype.multiplyScalarX = function(scalar) {};

/**
 * Multiplies the Y axis by the given scalar
 * 
 * @param {number} scalar
 * @return {!Victor}
 */
Victor.prototype.multiplyScalarY = function(scalar) {};

/**
 * Divides the X component by the X component of another vector.
 * @param {!Victor} vector
 * @return {!Victor}
 */
Victor.prototype.divideX = function(vector) {};

/**
 * Divides the Y component by the Y component of another vector.
 * @param {!Victor} vector
 * @return {!Victor}
 */
Victor.prototype.divideY = function(vector) {};

/**
 * Divides both components by another vector.
 * @param {!Victor} scalar
 * @return {!Victor}
 */
Victor.prototype.divide = function(scalar) {};

/**
 * Divides both vector axis by the given scalar value.
 * 
 * @param {number} scalar
 * @return {!Victor}
 */
Victor.prototype.divideScalar = function(scalar) {};

/**
 * Divides the X axis by the given scalar value.
 * 
 * @param {number} scalar
 * @return {!Victor}
 */
Victor.prototype.divideScalarX = function(scalar) {};

/**
 * Divides the Y axis by the given scalar value.
 * 
 * @param {number} scalar
 * @return {!Victor}
 */
Victor.prototype.divideScalarY = function(scalar) {};

/**
 * Inverts the X component.
 * @return {!Victor}
 */
Victor.prototype.invertX = function() {};

/**
 * Inverts the Y component.
 * @return {!Victor}
 */
Victor.prototype.invertY = function() {};

/**
 * Inverts both components.
 * @return {!Victor}
 */
Victor.prototype.invert = function() {};

/**
 * Performs a linear blend / interpolation of the X component towards another vector.
 * @param {!Victor} vector Number amount Value between 0 and 1. Default: 0.5
 * @param {number} amount
 * @return {!Victor}
 */
Victor.prototype.mixX = function(vector, amount) {};

/**
 * Performs a linear blend / interpolation of the Y component towards another vector.
 * @param {!Victor} vector
 * @param {number} amount
 * @return {!Victor}
 */
Victor.prototype.mixY = function(vector, amount) {};

/**
 * Performs a linear blend / interpolation towards another vector.
 * @param {!Victor} vector
 * @param {number} amount
 * @return {!Victor}
 */
Victor.prototype.mix = function(vector, amount) {};

/**
 * Normalizes the vector by scaling it down to a length of 1 while keeping its direction.
 * @return {!Victor}
 */
Victor.prototype.normalize = function() {};

/**
 * Alias of normalize.
 * @return {!Victor}
 */
Victor.prototype.norm = function() {};

/**
 * If either component is greater than max, multiplies the component by multiplier.
 * @param {number} max
 * @param {number} multiplier
 * @return {!Victor}
 */
Victor.prototype.limit = function(max, multiplier) {};

/**
 * Rounds the components to integer numbers.
 * @return {!Victor}
 */
Victor.prototype.unfloat = function() {};

/**
 * Rotates the vector to a certain angle, in radians CCW from +X axis.
 * @param {number} angle
 * @return {!Victor}
 */
Victor.prototype.rotate = function(angle) {};

/**
 * Same as rotate but uses degrees
 * @param {number} angle
 * @return {!Victor}
 */
Victor.prototype.rotateDeg = function(angle) {};

/**
 * Rotates the vector by a rotation angle, given in radians CCW from +X axis.
 * @param {number} rotation
 * @return {!Victor}
 */
Victor.prototype.rotateBy = function(rotation) {};

/**
 * Same as rotateBy but uses degrees
 * @param {number} rotation
 * @return {!Victor}
 */
Victor.prototype.rotateByDeg = function(rotation) {};

/**
 * Randomizes the X component with a value between topLeft and bottomRight.
 * @param {!Victor} topLeft
 * @param {!Victor} bottomRight
 * @return {!Victor}
 */
Victor.prototype.randomizeX = function(topLeft, bottomRight) {};

/**
 * Randomizes the Y component with a value between topLeft and bottomRight.
 * @param {!Victor} topLeft
 * @param {!Victor} bottomRight
 * @return {!Victor}
 */
Victor.prototype.randomizeY = function(topLeft, bottomRight) {};

/**
 * Randomizes the components with a value between topLeft and bottomRight.
 * @param {!Victor} topLeft
 * @param {!Victor} bottomRight
 * @return {!Victor}
 */
Victor.prototype.randomize = function(topLeft, bottomRight) {};

/**
 * Randomly randomizes either the X component or the Y component with a value between topLeft and bottomRight.
 * @param {!Victor} topLeft
 * @param {!Victor} bottomRight
 * @return {!Victor}
 */
Victor.prototype.randomizeAny = function(topLeft, bottomRight) {};

/**
 * Rounds both axis to a certain precision.
 * @return {!Victor}
 */
Victor.prototype.toFixed = function() {};

/**
 * Sets the vector to zero (0,0).
 * @return {!Victor}
 */
Victor.prototype.zero = function() {};

/**
 * Projects a vector onto another vector, setting itself to the result.
 * @param {!Victor} vector
 * @return {!Victor}
 */
Victor.prototype.projectOnto = function(vector) {};

/**
 * Returns the dot product of two vectors.
 * @param {!Victor} vector
 * @return {number}
 */
Victor.prototype.dot = function(vector) {};

/**
 * Returns the cross product of two vectors.
 * @param {!Victor} vector
 * @return {number}
 */
Victor.prototype.cross = function(vector) {};

/**
 * Returns the length / magnitude.
 * @return {number}
 */
Victor.prototype.length = function() {};

/**
 * Alias for length.
 * @return {number}
 */
Victor.prototype.magnitude = function() {};

/**
 * Returns the squared length / magnitude. If the length is only needed for comparison, this function is faster than length.
 * @return {number}
 */
Victor.prototype.lengthSq = function() {};

/**
 * Returns the distance of the X component from another vector.
 * @param {!Victor} vector
 * @return {number}
 */
Victor.prototype.distanceX = function(vector) {};

/**
 * Same as distanceX but always returns an absolute value.
 * @param {!Victor} vector
 * @return {number}
 */
Victor.prototype.absDistanceX = function(vector) {};

/**
 * Returns the distance of the Y component from another vector.
 * @param {!Victor} vector
 * @return {number}
 */
Victor.prototype.distanceY = function(vector) {};

/**
 * Same as distanceY but always returns an absolute value.
 * @param {!Victor} vector
 * @return {number}
 */
Victor.prototype.absDistanceY = function(vector) {};

/**
 * Returns the euclidean distance between two vectors.
 * @param {!Victor} vector
 * @return {number}
 */
Victor.prototype.distance = function(vector) {};

/**
 * Returns the squared euclidean distance between two vectors. If the distance is only needed for comparison, this function is faster than distance.
 * @param {!Victor} vector
 * @return {number}
 */
Victor.prototype.distanceSq = function(vector) {};

/**
 * Returns the angle towards X in radians.
 * @return {number}
 */
Victor.prototype.horizontalAngle = function() {};

/**
 * Alias for horizontalAngle.
 * @return {number}
 */
Victor.prototype.angle = function() {};

/**
 * Alias for horizontalAngle.
 * @return {number}
 */
Victor.prototype.direction = function() {};

/**
 * Same as horizontalAngle but returns degrees.
 * @return {number}
 */
Victor.prototype.horizontalAngleDeg = function() {};

/**
 * Alias for horizontalAngleDeg.
 * @return {number}
 */
Victor.prototype.angleDeg = function() {};

/**
 * Returns the angle towards Y in radians.
 * @return {number}
 */
Victor.prototype.verticalAngle = function() {};

/**
 * Same as verticalAngle but returns degrees.
 * @return {number}
 */
Victor.prototype.verticalAngleDeg = function() {};

/**
 * Returns a true if vector is (0, 0).
 * @return {boolean}
 */
Victor.prototype.isZero = function() {};

/**
 * Returns a true if this vector is the same as another.
 * @param {!Victor} vector
 * @return {boolean}
 */
Victor.prototype.isEqualTo = function(vector) {};

/* TODO: ExportAssignment in  */
