/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/nomnom/index.d.ts:
/** @const */
var NomnomInternal = {};
/** @const */
NomnomInternal.Parser = {};
/**
 * @record
 * @struct
 */
NomnomInternal.Parser.Option = function() {};
 /** @type {string} */
NomnomInternal.Parser.Option.prototype.abbr;
 /** @type {string} */
NomnomInternal.Parser.Option.prototype.full;
 /** @type {boolean} */
NomnomInternal.Parser.Option.prototype.flag;
 /** @type {string} */
NomnomInternal.Parser.Option.prototype.metavar;
 /** @type {string} */
NomnomInternal.Parser.Option.prototype.string;
 /** @type {string} */
NomnomInternal.Parser.Option.prototype.help;
 /** @type {?} */
NomnomInternal.Parser.Option.prototype.default;
 /** @type {function(?): string} */
NomnomInternal.Parser.Option.prototype.callback;
 /** @type {number} */
NomnomInternal.Parser.Option.prototype.position;
 /** @type {boolean} */
NomnomInternal.Parser.Option.prototype.list;
 /** @type {boolean} */
NomnomInternal.Parser.Option.prototype.required;
 /** @type {!Array<string>} */
NomnomInternal.Parser.Option.prototype.choices;
 /** @type {string} */
NomnomInternal.Parser.Option.prototype.type;
 /** @type {boolean} */
NomnomInternal.Parser.Option.prototype.hidden;
/**
 * @record
 * @struct
 */
NomnomInternal.Parser.Command = function() {};
 /** @type {string} */
NomnomInternal.Parser.Command.prototype.name;

/**
 * Sets the options of the command.
 * @param {!Object<string,!NomnomInternal.Parser.Option>} specs The specifications of the options.
 * @return {!NomnomInternal.Parser.Command} The command.
 */
NomnomInternal.Parser.Command.prototype.options = function(specs) {};

/**
 * Sets an option of the command.
 * @param {string} name The name of the option.
 * @param {!NomnomInternal.Parser.Option} spec The specifiction of the option.
 * @return {!NomnomInternal.Parser.Command} The command.
 */
NomnomInternal.Parser.Command.prototype.option = function(name, spec) {};

/**
 * Sets a callback for the command.
 * @param {function(?): void} func The callback function.
 * @return {!NomnomInternal.Parser.Command} The command.
 */
NomnomInternal.Parser.Command.prototype.callback = function(func) {};

/**
 * Sets the help string for the command.
 * @param {string} help The help string.
 * @return {!NomnomInternal.Parser.Command} The command.
 */
NomnomInternal.Parser.Command.prototype.help = function(help) {};

/**
 * Sets the usage string for the command.
 * @param {string} usage The usage string.
 * @return {!NomnomInternal.Parser.Command} The command.
 */
NomnomInternal.Parser.Command.prototype.usage = function(usage) {};

/* TODO: CallSignature: NomnomInternal */

/**
 * Creates a new command.
 * @param {string} name The name of the command.
 * @return {!NomnomInternal.Parser.Command} The new command.
 */
NomnomInternal.Parser.prototype.command = function(name) {};

/**
 * Returns the commmand representing no command.
 * @return {!NomnomInternal.Parser.Command} The command representing no command.
 */
NomnomInternal.Parser.prototype.nocommand = function() {};

/**
 * Sets the options of the command-line.
 * @param {!Object<string,!NomnomInternal.Parser.Option>} specs The specifications of the options.
 * @return {!NomnomInternal.Parser} The command-line parser.
 */
NomnomInternal.Parser.prototype.options = function(specs) {};

/**
 * Sets an option of the command-line.
 * @param {string} name The name of the option.
 * @param {!NomnomInternal.Parser.Option} spec The specifiction of the option.
 * @return {!NomnomInternal.Parser} The command-line parser.
 */
NomnomInternal.Parser.prototype.option = function(name, spec) {};

/**
 * Sets the usage string for the command-line.
 * @param {string} usage The usage string.
 * @return {!NomnomInternal.Parser} The command-line parser.
 */
NomnomInternal.Parser.prototype.usage = function(usage) {};

/**
 * Provides a printer to the command-line processor.
 * @param {function(string, number): void} print The print function to use.
 * @return {!NomnomInternal.Parser} The command-line parser.
 */
NomnomInternal.Parser.prototype.printer = function(print) {};

/**
 * Sets the name of the script.
 * @param {string} script The script name.
 * @return {!NomnomInternal.Parser} The command-line parser.
 */
NomnomInternal.Parser.prototype.script = function(script) {};

/**
 * Sets the help string for the command-line.
 * @param {string} help The help string.
 * @return {!NomnomInternal.Parser} The command-line parser.
 */
NomnomInternal.Parser.prototype.help = function(help) {};

/**
 * Sets the command-line parser not to use colors.
 * @return {!NomnomInternal.Parser} The command-line parser.
 */
NomnomInternal.Parser.prototype.nocolors = function() {};

/**
 * Parses the command-line.
 * @param {!Array<string>=} argv The command-line arguments.
 * @return {?} The parsed command-line.
 */
NomnomInternal.Parser.prototype.nom = function(argv) {};

/**
 * Parses the command-line.
 * @param {!Array<string>=} argv The command-line arguments.
 * @return {?} The parsed command-line.
 */
NomnomInternal.Parser.prototype.parse = function(argv) {};
 /** @type {!NomnomInternal.Parser} */
var _nomnom;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "nomnom"
/** @const */
tsickle_declare_module.nomnom = {};

/* TODO: ExportAssignment in tsickle_declare_module.nomnom */
