/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/squirejs/index.d.ts:

/**
 * @constructor
 * @struct
 * @param {string=} context
 */
function Squire(context) {}

/**
 * @param {string|!Object<string,?>} name_or_mocks
 * @param {?=} mock
 * @return {!Squire}
 */
Squire.prototype.mock = function(name_or_mocks, mock) {};

/**
 * @param {!Array<string>} dependencies
 * @param {!Function} callback
 * @param {!Function=} errback
 * @return {!Squire}
 */
Squire.prototype.require = function(dependencies, callback, errback) {};

/**
 * @param {(string|!Array<string>)} name
 * @return {!Squire}
 */
Squire.prototype.store = function(name) {};

/**
 * @param {(string|!Array<string>)=} name
 * @return {!Squire}
 */
Squire.prototype.clean = function(name) {};

/**
 * @return {!String}
 */
Squire.prototype.remove = function() {};

/**
 * @param {!Array<string>} dependencies
 * @param {!Function} test
 * @return {function(!Function): void}
 */
Squire.prototype.run = function(dependencies, test) {};
/** @const */
Squire.Helpers = {};

/**
 * @template T
 * @param {T} what
 * @return {function(): T}
 */
Squire.Helpers.returns = function(what) {};

/**
 * @template T
 * @param {T} what
 * @return {function(): function(): T}
 */
Squire.Helpers.constructs = function(what) {};

/* TODO: ExportAssignment in  */
