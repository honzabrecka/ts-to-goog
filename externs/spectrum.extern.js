/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/spectrum/index.d.ts:

/**
 * Shows the colorpicker.
 * Hides the colorpicker.
 * Toggles the colorpicker.
 * 
 * Warning: If you are calling toggle from a click handler,
 *   make sure you return false to prevent the colorpicker from immediately hiding after it is toggled.
 * Gets the current value from the colorpicker.
 * Sets the colorpickers value to update the original input.
 * Note: this will not fire the `change` event, to prevent infinite loops
 *  from calling `set` from within `change`.
 * 
 * Retrieves the container element of the colorpicker,
 * in case you want to manaully position it or do other things.
 * Resets the positioning of the container element.
 * This could be used if the colorpicker was hidden when initialized,
 * or if the colorpicker is inside of a moving area.
 * Removes the colorpicker functionality and restores the element to its original state.
 * Allows selection of the colorpicker component. if it is already enabled, this method does nothing.
 * Additionally, this will cause the original (now hidden) input to be set as disabled.
 * Disables selection of the colorpicker component. adds the sp-disabled class onto the replacer element.
 * If it is already disabled, this method does nothing.
 * Additionally, this will remove the disabled property on the original (now hidden).
 * Retrieves the current value for the option name.
 * 
 * Sets the value of the option name with the value passed in.
 * 
 * Calls the method.
 * Initializes the input element that it is called on
 * as a spectrum colorpicker instance.
 * @param {string|!Spectrum.Options=} methodName_or_options
 * @param {string=} colorString_or_optionName
 * @param {?=} newOptionValue
 * @return {?<!HTMLElement>|!tinycolorInstance|?}
 */
JQuery.prototype.spectrum = function(methodName_or_options, colorString_or_optionName, newOptionValue) {};

/**
 * Called at the beginning of a drag event on either hue slider, alpha slider, or main color picker areas.
 * Called at the end of a drag event on either hue slider, alpha slider, or main color picker areas.
 * @param {string} events
 * @param {function(!JQueryEventObject, !tinycolorInstance): ?} handler
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.on = function(events, handler) {};
/** @const */
var Spectrum = {};
/**
 * @record
 * @struct
 */
Spectrum.Options = function() {};
 /** @type {string} */
Spectrum.Options.prototype.color;
 /** @type {boolean} */
Spectrum.Options.prototype.flat;
 /** @type {boolean} */
Spectrum.Options.prototype.showInput;
 /** @type {boolean} */
Spectrum.Options.prototype.showInitial;
 /** @type {boolean} */
Spectrum.Options.prototype.allowEmpty;
 /** @type {boolean} */
Spectrum.Options.prototype.showAlpha;
 /** @type {boolean} */
Spectrum.Options.prototype.disabled;
 /** @type {!Array<!Array<string>>} */
Spectrum.Options.prototype.palette;
 /** @type {boolean} */
Spectrum.Options.prototype.showPalette;
 /** @type {boolean} */
Spectrum.Options.prototype.showPaletteOnly;
 /** @type {boolean} */
Spectrum.Options.prototype.togglePaletteOnly;
 /** @type {string} */
Spectrum.Options.prototype.togglePaletteMoreText;
 /** @type {string} */
Spectrum.Options.prototype.togglePaletteLessText;
 /** @type {boolean} */
Spectrum.Options.prototype.hideAfterPaletteSelect;
 /** @type {boolean} */
Spectrum.Options.prototype.showSelectionPalette;
 /** @type {string} */
Spectrum.Options.prototype.localStorageKey;
 /** @type {boolean} */
Spectrum.Options.prototype.clickoutFiresChange;
 /** @type {string} */
Spectrum.Options.prototype.cancelText;
 /** @type {string} */
Spectrum.Options.prototype.chooseText;
 /** @type {string} */
Spectrum.Options.prototype.containerClassName;
 /** @type {string} */
Spectrum.Options.prototype.replacerClassName;
 /** @type {string} */
Spectrum.Options.prototype.preferredFormat;
 /** @type {boolean} */
Spectrum.Options.prototype.showButtons;
 /** @type {?} */
Spectrum.Options.prototype.appendTo;
 /** @type {number} */
Spectrum.Options.prototype.maxSelectionSize;
 /** @type {!Array<string>} */
Spectrum.Options.prototype.selectionPalette;
 /** @type {function(!tinycolorInstance): void} */
Spectrum.Options.prototype.change;
 /** @type {function(!tinycolorInstance): void} */
Spectrum.Options.prototype.move;
 /** @type {function(!tinycolorInstance): void} */
Spectrum.Options.prototype.show;
 /** @type {function(!tinycolorInstance): void} */
Spectrum.Options.prototype.hide;
 /** @type {function(!tinycolorInstance): void} */
Spectrum.Options.prototype.beforeShow;
