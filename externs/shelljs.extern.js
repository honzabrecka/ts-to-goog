/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/shelljs/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/**
 * Changes to directory dir for the duration of the script
 * @param {string} dir
 * @return {void}
 */
function cd(dir) {}

/**
 * Returns the current directory.
 * @return {string}
 */
function pwd() {}

/**
 * Returns array of files in the given path, or in current directory if no path provided.
 * Returns array of files in the given path, or in current directory if no path provided.
 * Returns array of files in the given path, or in current directory if no path provided.
 * Returns array of files in the given path, or in current directory if no path provided.
 * @param {...string|!Array<string>} paths_or_options
 * @return {!Array<string>}
 */
function ls(paths_or_options) {}

/**
 * Returns array of all files (however deep) in the given paths.
 * Returns array of all files (however deep) in the given paths.
 * @param {...string|!Array<string>} path
 * @return {!Array<string>}
 */
function find(path) {}

/**
 * Copies files. The wildcard * is accepted.
 * Copies files. The wildcard * is accepted.
 * Copies files. The wildcard * is accepted.
 * Copies files. The wildcard * is accepted.
 * @param {string|!Array<string>} source_or_options
 * @param {string|!Array<string>} dest_or_source
 * @param {string=} dest
 * @return {void}
 */
function cp(source_or_options, dest_or_source, dest) {}

/**
 * Removes files. The wildcard * is accepted.
 * Removes files. The wildcard * is accepted.
 * Removes files. The wildcard * is accepted.
 * Removes files. The wildcard * is accepted.
 * @param {...string|!Array<string>} files_or_options
 * @return {void}
 */
function rm(files_or_options) {}

/**
 * Moves files. The wildcard * is accepted.
 * Moves files. The wildcard * is accepted.
 * @param {string|!Array<string>} source
 * @param {string} dest
 * @return {void}
 */
function mv(source, dest) {}

/**
 * Creates directories.
 * Creates directories.
 * Creates directories.
 * Creates directories.
 * @param {...string|!Array<string>} dir_or_options
 * @return {void}
 */
function mkdir(dir_or_options) {}

/**
 * Evaluates expression using the available primaries and returns corresponding value.
 * @param {string} option
 * @param {string} path
 * @return {boolean}
 */
function test(option, path) {}

/**
 * Returns a string containing the given file, or a concatenated string containing the files if more than one file is given (a new line character is introduced between each file). Wildcard * accepted.
 * Returns a string containing the given file, or a concatenated string containing the files if more than one file is given (a new line character is introduced between each file). Wildcard * accepted.
 * @param {...string|!Array<string>} files
 * @return {string}
 */
function cat(files) {}
/**
 * @record
 * @struct
 */
function String() {}

/**
 * Analogous to the redirection operator > in Unix, but works with JavaScript strings (such as those returned by cat, grep, etc). Like Unix redirections, to() will overwrite any existing file!
 * @param {string} file
 * @return {void}
 */
String.prototype.to = function(file) {};

/**
 * Analogous to the redirect-and-append operator >> in Unix, but works with JavaScript strings (such as those returned by cat, grep, etc).
 * @param {string} file
 * @return {void}
 */
String.prototype.toEnd = function(file) {};

/**
 * Reads an input string from file and performs a JavaScript replace() on the input using the given search regex and replacement string or function. Returns the new string after replacement.
 * Reads an input string from file and performs a JavaScript replace() on the input using the given search regex and replacement string or function. Returns the new string after replacement.
 * Reads an input string from file and performs a JavaScript replace() on the input using the given search regex and replacement string or function. Returns the new string after replacement.
 * Reads an input string from file and performs a JavaScript replace() on the input using the given search regex and replacement string or function. Returns the new string after replacement.
 * @param {!RegExp|string} searchRegex_or_options
 * @param {string|!RegExp} replacement_or_searchRegex
 * @param {string} file_or_replacement
 * @param {string=} file
 * @return {string}
 */
function sed(searchRegex_or_options, replacement_or_searchRegex, file_or_replacement, file) {}

/**
 * Reads input string from given files and returns a string containing all lines of the file that match the given regex_filter. Wildcard * accepted.
 * Reads input string from given files and returns a string containing all lines of the file that match the given regex_filter. Wildcard * accepted.
 * Reads input string from given files and returns a string containing all lines of the file that match the given regex_filter. Wildcard * accepted.
 * Reads input string from given files and returns a string containing all lines of the file that match the given regex_filter. Wildcard * accepted.
 * @param {!RegExp|string} regex_filter_or_options
 * @param {...string|!Array<string>} files_or_regex_filter
 * @return {string}
 */
function grep(regex_filter_or_options, files_or_regex_filter) {}

/**
 * Searches for command in the system's PATH. On Windows looks for .exe, .cmd, and .bat extensions.
 * @param {string} command
 * @return {string}
 */
function which(command) {}

/**
 * Prints string to stdout, and returns string with additional utility methods like .to().
 * @param {...string} text
 * @return {string}
 */
function echo(text) {}

/**
 * Save the current directory on the top of the directory stack and then cd to dir. With no arguments, pushd exchanges the top two directories. Returns an array of paths in the stack.
 * Save the current directory on the top of the directory stack and then cd to dir. With no arguments, pushd exchanges the top two directories. Returns an array of paths in the stack.
 * Save the current directory on the top of the directory stack and then cd to dir. With no arguments, pushd exchanges the top two directories. Returns an array of paths in the stack.
 * Save the current directory on the top of the directory stack and then cd to dir. With no arguments, pushd exchanges the top two directories. Returns an array of paths in the stack.
 * Save the current directory on the top of the directory stack and then cd to dir. With no arguments, pushd exchanges the top two directories. Returns an array of paths in the stack.
 * Save the current directory on the top of the directory stack and then cd to dir. With no arguments, pushd exchanges the top two directories. Returns an array of paths in the stack.
 * @param {string} dir_or_options
 * @param {string=} dir
 * @return {!Array<string>}
 */
function pushd(dir_or_options, dir) {}

/**
 * When no arguments are given, popd removes the top directory from the stack and performs a cd to the new top directory. The elements are numbered from 0 starting at the first directory listed with dirs; i.e., popd is equivalent to popd +0. Returns an array of paths in the stack.
 * When no arguments are given, popd removes the top directory from the stack and performs a cd to the new top directory. The elements are numbered from 0 starting at the first directory listed with dirs; i.e., popd is equivalent to popd +0. Returns an array of paths in the stack.
 * When no arguments are given, popd removes the top directory from the stack and performs a cd to the new top directory. The elements are numbered from 0 starting at the first directory listed with dirs; i.e., popd is equivalent to popd +0. Returns an array of paths in the stack.
 * When no arguments are given, popd removes the top directory from the stack and performs a cd to the new top directory. The elements are numbered from 0 starting at the first directory listed with dirs; i.e., popd is equivalent to popd +0. Returns an array of paths in the stack.
 * When no arguments are given, popd removes the top directory from the stack and performs a cd to the new top directory. The elements are numbered from 0 starting at the first directory listed with dirs; i.e., popd is equivalent to popd +0. Returns an array of paths in the stack.
 * When no arguments are given, popd removes the top directory from the stack and performs a cd to the new top directory. The elements are numbered from 0 starting at the first directory listed with dirs; i.e., popd is equivalent to popd +0. Returns an array of paths in the stack.
 * When no arguments are given, popd removes the top directory from the stack and performs a cd to the new top directory. The elements are numbered from 0 starting at the first directory listed with dirs; i.e., popd is equivalent to popd +0. Returns an array of paths in the stack.
 * @param {string=} dir_or_options
 * @param {string=} dir
 * @return {!Array<string>}
 */
function popd(dir_or_options, dir) {}

/**
 * Clears the directory stack by deleting all of the elements.
 * Display the list of currently remembered directories. Returns an array of paths in the stack, or a single path if +N or -N was specified.
 * Display the list of currently remembered directories. Returns an array of paths in the stack, or a single path if +N or -N was specified.
 * Display the list of currently remembered directories. Returns an array of paths in the stack, or a single path if +N or -N was specified.
 * @param {string} options
 * @return {!Array<string>|string|?}
 */
function dirs(options) {}

/**
 * Links source to dest. Use -f to force the link, should dest already exist.
 * Links source to dest. Use -f to force the link, should dest already exist.
 * @param {string} source_or_options
 * @param {string} dest_or_source
 * @param {string=} dest
 * @return {void}
 */
function ln(source_or_options, dest_or_source, dest) {}

/**
 * Exits the current process with the given exit code.
 * @param {number} code
 * @return {void}
 */
function exit(code) {}
 /** @type {?} */
var env;

/**
 * Executes the given command synchronously.
 * Executes the given command synchronously.
 * Executes the given command synchronously.
 * Executes the given command synchronously.
 * @param {string} command
 * @param {?=} options_or_callback
 * @param {?=} callback
 * @return {?|(?|!ChildProcess)|!ChildProcess}
 */
function exec(command, options_or_callback, callback) {}

/** @typedef {?} */
var ExecCallback;
/**
 * @extends {ExecOptions}
 * @record
 * @struct
 */
function ExecOptions() {}
 /** @type {boolean} */
ExecOptions.prototype.silent;
 /** @type {boolean} */
ExecOptions.prototype.async;
/**
 * @record
 * @struct
 */
function ExecOutputReturnValue() {}
 /** @type {number} */
ExecOutputReturnValue.prototype.code;
 /** @type {string} */
ExecOutputReturnValue.prototype.stdout;
 /** @type {string} */
ExecOutputReturnValue.prototype.stderr;

/**
 * Alters the permissions of a file or directory by either specifying the absolute permissions in octal form or expressing the changes in symbols. This command tries to mimic the POSIX behavior as much as possible. Notable exceptions:
 * - In symbolic modes, 'a-r' and '-r' are identical. No consideration is given to the umask.
 * - There is no "quiet" option since default behavior is to run silent.
 * Alters the permissions of a file or directory by either specifying the absolute permissions in octal form or expressing the changes in symbols. This command tries to mimic the POSIX behavior as much as possible. Notable exceptions:
 * - In symbolic modes, 'a-r' and '-r' are identical. No consideration is given to the umask.
 * - There is no "quiet" option since default behavior is to run silent.
 * @param {number|string} octalMode_or_mode
 * @param {string} file
 * @return {void}
 */
function chmod(octalMode_or_mode, file) {}

/**
 * Searches and returns string containing a writeable, platform-dependent temporary directory. Follows Python's tempfile algorithm.
 * @return {string}
 */
function tempdir() {}

/**
 * Tests if error occurred in the last command.
 * @return {string}
 */
function error() {}

/** @typedef {string} */
var TouchOptionsLiteral;
/**
 * @record
 * @struct
 */
function touchOptionsArray() {}

/* TODO: PropertySignature: '-d' */

/* TODO: PropertySignature: '-r' */

/**
 * @param {...string|!Array<string>|?} files_or_options
 * @return {void}
 */
function touch(files_or_options) {}
/**
 * @record
 * @struct
 */
function ShellConfig() {}
 /** @type {boolean} */
ShellConfig.prototype.silent;
 /** @type {boolean} */
ShellConfig.prototype.fatal;
 /** @type {boolean} */
ShellConfig.prototype.verbose;
 /** @type {!G.IOptions} */
ShellConfig.prototype.globOptions;
 /** @type {string} */
ShellConfig.prototype.execPath;

/**
 * Reset shell.config to the defaults.
 * @return {void}
 */
ShellConfig.prototype.reset = function() {};
 /** @type {?} */
var config;
