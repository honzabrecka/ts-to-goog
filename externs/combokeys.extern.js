/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/combokeys/index.d.ts:
/** @const */
var Combokeys = {};
/**
 * @record
 * @struct
 */
Combokeys.CombokeysStatic = function() {};

/* TODO: ConstructSignature: Combokeys */
 /** @type {!Array<!Combokeys.Combokeys>} */
Combokeys.CombokeysStatic.prototype.instances;

/**
 * reset all instances
 * @return {void}
 */
Combokeys.CombokeysStatic.prototype.reset = function() {};
/**
 * @record
 * @struct
 */
Combokeys.Combokeys = function() {};
 /** @type {!Element} */
Combokeys.Combokeys.prototype.element;

/**
 * binds an event to Combokeys
 * 
 * can be a single key, a combination of keys separated with +,
 * an array of keys, or a sequence of keys separated by spaces
 * 
 * be sure to list the modifier keys first to make sure that the
 * correct key ends up getting bound (the last key in the pattern)
 * 
 * @param {(string|!Array<string>)} keys
 * @param {function(): void} callback
 * @param {string=} action
 * @return {void} void
 */
Combokeys.Combokeys.prototype.bind = function(keys, callback, action) {};

/**
 * binds multiple combinations to the same callback
 * 
 * @param {!Array<string>} keys
 * @param {function(): void} callback
 * @param {string=} action
 * @return {void} void
 */
Combokeys.Combokeys.prototype.bindMultiple = function(keys, callback, action) {};

/**
 * unbinds an event to Combokeys
 * 
 * the unbinding sets the callback function of the specified key combo
 * to an empty function and deletes the corresponding key in the
 * directMap dict.
 * 
 * the keycombo+action has to be exactly the same as
 * it was defined in the bind method
 * 
 * @param {(string|!Array<string>)} keys
 * @param {string=} action
 * @return {void} void
 */
Combokeys.Combokeys.prototype.unbind = function(keys, action) {};

/**
 * triggers an event that has already been bound
 * 
 * @param {string} keys
 * @param {string=} action
 * @return {void} void
 */
Combokeys.Combokeys.prototype.trigger = function(keys, action) {};

/**
 * resets the library back to its initial state. This is useful
 * if you want to clear out the current keyboard shortcuts and bind
 * new ones - for example if you switch to another page
 * 
 * @return {void} void
 */
Combokeys.Combokeys.prototype.reset = function() {};

/**
 * should we stop this event before firing off callbacks
 * 
 * @param {!Event} e
 * @param {!Element} element
 * @return {boolean}
 */
Combokeys.Combokeys.prototype.stopCallback = function(e, element) {};

/**
 * detach all listners from the bound element
 * 
 * @return {void}
 */
Combokeys.Combokeys.prototype.detach = function() {};
 /** @type {!Combokeys.CombokeysStatic} */
var combokeys;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "combokeys"
/** @const */
tsickle_declare_module.combokeys = {};

/* TODO: ExportAssignment in tsickle_declare_module.combokeys */
