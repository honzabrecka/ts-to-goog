/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/lockr/index.d.ts:
 /** @type {!lockr.LockrStatic} */
var Lockr;
/** @const */
var lockr = {};
/**
 * @record
 * @struct
 */
lockr.LockrStatic = function() {};
 /** @type {string} */
lockr.LockrStatic.prototype.prefix;

/**
 * Set a key to a particular value or a hash object (Object or Array) under a hash key.
 * Set a key to a particular value or a hash object (Object or Array) under a hash key.
 * @template T
 * @param {string} key
 * @param {(string|number|!Object)|!Array<T>} value
 * @return {void}
 */
lockr.LockrStatic.prototype.set = function(key, value) {};

/**
 * Removes all data associated to a key.
 * @param {string} key
 * @return {void}
 */
lockr.LockrStatic.prototype.rm = function(key) {};

/**
 * Returns the saved value for given key, even if the saved value is hash object. 
 * If value is null or undefined it returns a default value.
 * @template T
 * @param {string} key  
 * @param {T=} defaultValue
 * @return {T}
 */
lockr.LockrStatic.prototype.get = function(key, defaultValue) {};

/**
 * Adds a unique value to a particular set under a hash key.
 * Adds a unique value to a particular set under a hash key.
 * @template T
 * @param {string} key  
 * @param {(string|number|!Object)|!Array<T>} value
 * @return {void}
 */
lockr.LockrStatic.prototype.sadd = function(key, value) {};

/**
 * Returns the values of a particular set under a hash key.
 * Returns the values of a particular set under a hash key.
 * @template T
 * @param {string} key
 * @return {!Array<(string|number|!Object)>|!Array<T>}
 */
lockr.LockrStatic.prototype.smembers = function(key) {};

/**
 * Returns whether the value exists in a particular set under a hash key.
 * Returns whether the value exists in a particular set under a hash key.
 * @template T
 * @param {string} key  
 * @param {(string|number|!Object)|!Array<T>} value
 * @return {boolean}
 */
lockr.LockrStatic.prototype.sismember = function(key, value) {};

/**
 * Removes a value from a particular set under a hash key.
 * Removes a value from a particular set under a hash key.
 * @template T
 * @param {string} key  
 * @param {(string|number|!Object)|!Array<T>} value
 * @return {void}
 */
lockr.LockrStatic.prototype.srem = function(key, value) {};

/**
 * Returns all saved values & objects, in an Array.
 * @return {!Array<(string|number|!Object)>}
 */
lockr.LockrStatic.prototype.getAll = function() {};

/**
 * Empties localStorage.
 * @return {void}
 */
lockr.LockrStatic.prototype.flush = function() {};

/**
 * Returns all keys without (if set) prefix
 * @return {!Array<string>}
 */
lockr.LockrStatic.prototype.keys = function() {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "lockr"
/** @const */
tsickle_declare_module.lockr = {};

/* TODO: ExportAssignment in tsickle_declare_module.lockr */
