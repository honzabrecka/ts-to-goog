/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/ftpd/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/** @const */
var LogLevel = {};
/** @const {number} */
LogLevel.ERROR;
/** @const {number} */
LogLevel.WARN;
/** @const {number} */
LogLevel.INFO;
/** @const {number} */
LogLevel.DEBUG;
/** @const {number} */
LogLevel.TRACE;
/**
 * @record
 * @struct
 */
function FtpServerOptions() {}
 /** @type {?} */
FtpServerOptions.prototype.getInitialCwd;
 /** @type {?} */
FtpServerOptions.prototype.getRoot;
 /** @type {boolean} */
FtpServerOptions.prototype.useWriteFile;
 /** @type {boolean} */
FtpServerOptions.prototype.useReadFile;
 /** @type {number} */
FtpServerOptions.prototype.uploadMaxSlurpSize;
 /** @type {number} */
FtpServerOptions.prototype.maxStatsAtOnce;
 /** @type {?} */
FtpServerOptions.prototype.filenameSortFunc;
 /** @type {(boolean|?)} */
FtpServerOptions.prototype.filenameSortMap;
 /** @type {boolean} */
FtpServerOptions.prototype.dontSortFilenames;
 /** @type {boolean} */
FtpServerOptions.prototype.noWildcards;
 /** @type {!TlsOptions} */
FtpServerOptions.prototype.tlsOptions;
 /** @type {boolean} */
FtpServerOptions.prototype.tlsOnly;
 /** @type {boolean} */
FtpServerOptions.prototype.allowUnauthorizedTls;
 /** @type {number} */
FtpServerOptions.prototype.pasvPortRangeStart;
 /** @type {number} */
FtpServerOptions.prototype.pasvPortRangeEnd;
 /** @type {?} */
FtpServerOptions.prototype.logLevel;
/**
 * @extends {internal.EventEmitter}
 * @constructor
 * @struct
 */
function FtpConnection() {}
 /** @type {!FtpServer} */
FtpConnection.prototype.server;
 /** @type {?} */
FtpConnection.prototype.socket;
 /** @type {!Server} */
FtpConnection.prototype.pasv;
 /** @type {?} */
FtpConnection.prototype.dataSocket;
 /** @type {string} */
FtpConnection.prototype.mode;
 /** @type {string} */
FtpConnection.prototype.username;
 /** @type {string} */
FtpConnection.prototype.cwd;
 /** @type {string} */
FtpConnection.prototype.root;
 /** @type {boolean} */
FtpConnection.prototype.hasQuit;
 /** @type {boolean} */
FtpConnection.prototype.secure;
 /** @type {boolean} */
FtpConnection.prototype.pbszReceived;
/**
 * @record
 * @struct
 */
function FtpFileSystem() {}
 /** @type {?} */
FtpFileSystem.prototype.unlink;
 /** @type {?} */
FtpFileSystem.prototype.readdir;
 /** @type {?} */
FtpFileSystem.prototype.mkdir;
 /** @type {?} */
FtpFileSystem.prototype.open;
 /** @type {?} */
FtpFileSystem.prototype.close;
 /** @type {?} */
FtpFileSystem.prototype.rmdir;
 /** @type {?} */
FtpFileSystem.prototype.rename;
 /** @type {?} */
FtpFileSystem.prototype.stat;
 /** @type {?} */
FtpFileSystem.prototype.createReadStream;
 /** @type {?} */
FtpFileSystem.prototype.createWriteStream;
 /** @type {?} */
FtpFileSystem.prototype.readFile;
 /** @type {?} */
FtpFileSystem.prototype.writeFile;

/**
 * @constructor
 * @struct
 * @param {string} host host is a string representation of the IP address clients use to connect to the FTP server.
 *             It's imperative that this actually reflects the remote IP the clients use to access the server,
 *             as this IP will be used in the establishment of PASV data connections. If this IP is not the one clients use to connect,
 *             you will see some strange behavior from the client side (hangs).
 * @param {?} options See test.js for a simple example.
 */
function FtpServer(host, options) {}
 /** @type {?} */
FtpServer.prototype.debugging;

/**
 * Start listening, see net.Server.listen()
 * @param {number} port
 * @param {string=} host
 * @param {number=} backlog
 * @param {function(): void=} listeningListener
 * @return {void}
 */
FtpServer.prototype.listen = function(port, host, backlog, listeningListener) {};

/**
 * Stop listening
 * @param {function(): void=} callback
 * @return {void}
 */
FtpServer.prototype.close = function(callback) {};
