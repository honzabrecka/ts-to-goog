/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/requirejs/index.d.ts:
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "module"
/** @const */
tsickle_declare_module.module = {};
 /** @type {{config: function(): ?, id: string, uri: string}} */
tsickle_declare_module.module.mod;

/* TODO: ExportAssignment in tsickle_declare_module.module */
/**
 * @record
 * @struct
 */
function RequireError() {}
 /** @type {string} */
RequireError.prototype.requireType;
 /** @type {!Array<string>} */
RequireError.prototype.requireModules;
 /** @type {!Error} */
RequireError.prototype.originalError;
/**
 * @record
 * @struct
 */
function RequireShim() {}
 /** @type {!Array<string>} */
RequireShim.prototype.deps;
 /** @type {string} */
RequireShim.prototype.exports;
 /** @type {function(!Array<?>): ?} */
RequireShim.prototype.init;
/**
 * @record
 * @struct
 */
function RequireConfig() {}
 /** @type {string} */
RequireConfig.prototype.baseUrl;
 /** @type {!Object<string,?>} */
RequireConfig.prototype.paths;
 /** @type {!Object<string,(!Array<string>|!RequireShim)>} */
RequireConfig.prototype.shim;
 /** @type {!Object<string,!Object<string,string>>} */
RequireConfig.prototype.map;
 /** @type {!Object<string,!Array<string>>} */
RequireConfig.prototype.bundles;
 /** @type {!Object<string,!Object>} */
RequireConfig.prototype.config;
 /** @type {!Object} */
RequireConfig.prototype.packages;
 /** @type {number} */
RequireConfig.prototype.waitSeconds;
 /** @type {string} */
RequireConfig.prototype.context;
 /** @type {!Array<string>} */
RequireConfig.prototype.deps;
 /** @type {function(!Array<?>): void} */
RequireConfig.prototype.callback;
 /** @type {boolean} */
RequireConfig.prototype.enforceDefine;
 /** @type {boolean} */
RequireConfig.prototype.xhtml;
 /** @type {(string|function(string, string): string)} */
RequireConfig.prototype.urlArgs;
 /** @type {string} */
RequireConfig.prototype.scriptType;
 /** @type {boolean} */
RequireConfig.prototype.skipDataMain;
 /** @type {function(!HTMLScriptElement, !RequireConfig, string, string): void} */
RequireConfig.prototype.onNodeCreated;
/**
 * @record
 * @struct
 */
function RequireModule() {}

/**
 * 
 * 
 * @return {!Object}
 */
RequireModule.prototype.config = function() {};
/**
 * @record
 * @struct
 */
function RequireMap() {}
 /** @type {string} */
RequireMap.prototype.prefix;
 /** @type {string} */
RequireMap.prototype.name;
 /** @type {!RequireMap} */
RequireMap.prototype.parentMap;
 /** @type {string} */
RequireMap.prototype.url;
 /** @type {string} */
RequireMap.prototype.originalName;
 /** @type {string} */
RequireMap.prototype.fullName;
/**
 * @record
 * @struct
 */
function Require() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/**
 * Configure require.js
 * 
 * @param {!RequireConfig} config
 * @return {!Require}
 */
Require.prototype.config = function(config) {};

/**
 * Generate URLs from require module
 * @param {string} module Module to URL
 * @return {string} URL string
 * 
 */
Require.prototype.toUrl = function(module) {};

/**
 * Returns true if the module has already been loaded and defined.
 * @param {string} module Module to check
 * 
 * @return {boolean}
 */
Require.prototype.defined = function(module) {};

/**
 * Returns true if the module has already been requested or is in the process of loading and should be available at some point.
 * @param {string} module Module to check
 * 
 * @return {boolean}
 */
Require.prototype.specified = function(module) {};

/**
 * On Error override
 * @param {!RequireError} err 
 * 
 * @param {function(!RequireError): void=} errback
 * @return {void}
 */
Require.prototype.onError = function(err, errback) {};

/**
 * Undefine a module
 * @param {string} module Module to undefine.
 * 
 * @return {void}
 */
Require.prototype.undef = function(module) {};

/**
 * Semi-private function, overload in special instance of undef()
 * 
 * @param {!Object} context
 * @param {!RequireMap} map
 * @param {!Array<!RequireMap>} depArray
 * @return {void}
 */
Require.prototype.onResourceLoad = function(context, map, depArray) {};
/**
 * @record
 * @struct
 */
function RequireDefine() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */
 /** @type {!Object} */
RequireDefine.prototype.amd;
 /** @type {!Require} */
var requirejs;
 /** @type {!Require} */
var require;
 /** @type {!RequireDefine} */
var define;
