/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jui-grid/index.d.ts:

/* TODO: ImportDeclaration in  */
/**
 * @record
 * @struct
 */
function GridColumn() {}

/* TODO: CallSignature:  */
 /** @type {?} */
GridColumn.prototype.element;
 /** @type {string} */
GridColumn.prototype.order;
 /** @type {string} */
GridColumn.prototype.name;
 /** @type {!Array<?>} */
GridColumn.prototype.data;
 /** @type {!Array<?>} */
GridColumn.prototype.list;
 /** @type {number} */
GridColumn.prototype.index;
 /** @type {string} */
GridColumn.prototype.type;
 /** @type {number} */
GridColumn.prototype.width;

/**
 * @return {void}
 */
GridColumn.prototype.hide = function() {};

/**
 * @return {void}
 */
GridColumn.prototype.show = function() {};
/**
 * @record
 * @struct
 */
function GridRow() {}
 /** @type {!Array<?>} */
GridRow.prototype.data;
 /** @type {number} */
GridRow.prototype.seq;
 /** @type {number} */
GridRow.prototype.rownum;
 /** @type {(string|number)} */
GridRow.prototype.index;
 /** @type {?} */
GridRow.prototype.element;
 /** @type {!Array<?>} */
GridRow.prototype.list;
 /** @type {!Object} */
GridRow.prototype.hidden;
 /** @type {?} */
GridRow.prototype.parent;
 /** @type {!Array<?>} */
GridRow.prototype.children;
 /** @type {number} */
GridRow.prototype.depth;
 /** @type {string} */
GridRow.prototype.type;

/**
 * \@property {Function} [type="null"] State value that indicates whether a child row is shown or hidden.
 * @return {void}
 */
GridRow.prototype.tpl = function() {};

/**
 * @param {(string|number)} rownum
 * @return {void}
 */
GridRow.prototype.setIndex = function(rownum) {};

/**
 * @param {!Array<?>} columns
 * @param {?} seq
 * @param {?} xssFilter
 * @return {void}
 */
GridRow.prototype.reload = function(columns, seq, xssFilter) {};

/**
 * @return {void}
 */
GridRow.prototype.destroy = function() {};

/**
 * @return {boolean}
 */
GridRow.prototype.isLeaf = function() {};

/**
 * @return {void}
 */
GridRow.prototype.fold = function() {};

/**
 * @return {void}
 */
GridRow.prototype.open = function() {};

/**
 * @param {?} row
 * @return {void}
 */
GridRow.prototype.appendChild = function(row) {};

/**
 * @param {number} rownum
 * @param {?} row
 * @param {?=} isReload
 * @return {void}
 */
GridRow.prototype.insertChild = function(rownum, row, isReload) {};

/**
 * @param {(string|number)} index
 * @return {void}
 */
GridRow.prototype.removeChild = function(index) {};

/**
 * @return {?}
 */
GridRow.prototype.lastChild = function() {};

/**
 * @param {?} lastRow
 * @return {?}
 */
GridRow.prototype.lastChildLeaf = function(lastRow) {};

/**
 * @param {number} index
 * @return {void}
 */
GridRow.prototype.showCell = function(index) {};

/**
 * @param {number} index
 * @return {void}
 */
GridRow.prototype.hideCell = function(index) {};
/**
 * @record
 * @struct
 */
function GridBase() {}

/**
 * @param {(string|number)} index
 * @param {!Object=} data
 * @return {?}
 */
GridBase.prototype.appendRow = function(index, data) {};

/**
 * @param {(string|number)} index
 * @param {!Object} data
 * @return {?}
 */
GridBase.prototype.insertRow = function(index, data) {};

/**
 * @param {(string|number)} index
 * @param {!Object} data
 * @return {?}
 */
GridBase.prototype.updateRow = function(index, data) {};

/**
 * @param {(string|number)} index
 * @param {(string|number)} targetIndex
 * @return {void}
 */
GridBase.prototype.moveRow = function(index, targetIndex) {};

/**
 * @param {(string|number)} index
 * @return {void}
 */
GridBase.prototype.removeRow = function(index) {};

/**
 * @param {(string|number)} index
 * @return {void}
 */
GridBase.prototype.openRow = function(index) {};

/**
 * @return {void}
 */
GridBase.prototype.openRowAll = function() {};

/**
 * @param {(string|number)} index
 * @return {void}
 */
GridBase.prototype.foldRow = function(index) {};

/**
 * @return {void}
 */
GridBase.prototype.foldRowAll = function() {};

/**
 * @return {void}
 */
GridBase.prototype.removeRows = function() {};

/**
 * @param {string} name
 * @param {boolean} isDesc
 * @return {void}
 */
GridBase.prototype.sortRows = function(name, isDesc) {};

/**
 * @param {string} tplType
 * @param {!Array<?>} dataList
 * @return {void}
 */
GridBase.prototype.appendColumn = function(tplType, dataList) {};

/**
 * @param {(string|number)} index
 * @return {void}
 */
GridBase.prototype.removeColumn = function(index) {};

/**
 * @param {(string|number)} index
 * @return {void}
 */
GridBase.prototype.hideColumn = function(index) {};

/**
 * @param {(string|number)} index
 * @return {void}
 */
GridBase.prototype.showColumn = function(index) {};

/**
 * @return {number}
 */
GridBase.prototype.getColumnCount = function() {};

/**
 * @return {number}
 */
GridBase.prototype.getRowCount = function() {};

/**
 * @param {(string|number)=} index
 * @return {(?|!Array<?>)}
 */
GridBase.prototype.getColumn = function(index) {};

/**
 * @param {(string|number)=} index
 * @return {(?|!Array<?>)}
 */
GridBase.prototype.getRow = function(index) {};

/**
 * @param {(string|number)} index
 * @return {!Array<?>}
 */
GridBase.prototype.getRowAll = function(index) {};

/**
 * @param {(string|number)} index
 * @return {?}
 */
GridBase.prototype.getRowParent = function(index) {};

/**
 * @param {(string|number)} index
 * @param {?} column
 * @return {void}
 */
GridBase.prototype.setColumn = function(index, column) {};

/**
 * @param {(string|number)} index
 * @param {?} row
 * @return {void}
 */
GridBase.prototype.setRow = function(index, row) {};
/**
 * @extends {UIEvent}
 * @record
 * @struct
 */
function GridTable() {}

/* TODO: CallSignature:  */
 /** @type {?} */
GridTable.prototype.root;

/**
 * \@method update
 * Updates the list of rows or modifies the row at a specified index.
 * 
 * @param {?=} indexOrRows
 * @param {?=} rows
 * @return {void}
 */
GridTable.prototype.update = function(indexOrRows, rows) {};

/**
 * \@method updateTree
 * It is possible to configure a tree table using an object array with the index and data properties.
 * 
 * @param {!Array<?>} rows
 * @return {void}
 */
GridTable.prototype.updateTree = function(rows) {};

/**
 * \@method append
 * Add a row or a child row to at a specified index.
 * 
 * @param {?=} rowOrIndex
 * @param {?=} row
 * @return {void}
 */
GridTable.prototype.append = function(rowOrIndex, row) {};

/**
 * \@method insert
 * Adds a row at a specified index.
 * 
 * @param {number} index
 * @param {!Object} dataList
 * @return {void}
 */
GridTable.prototype.insert = function(index, dataList) {};

/**
 * \@method select
 * Adds a selected class to a row at a specified index and gets an instance of the applicable row.
 * 
 * @param {number} index
 * @return {?}
 */
GridTable.prototype.select = function(index) {};

/**
 * \@method unselect
 * Removes a selected class from a selected row and gets an instance of the row in question.
 * 
 * @return {?}
 */
GridTable.prototype.unselect = function() {};

/**
 * \@method check
 * Add a checked class to a row at a specified index.
 * 
 * @param {number} index
 * @return {void}
 */
GridTable.prototype.check = function(index) {};

/**
 * \@method uncheck
 * Removes a checked class from a row at a specified index.
 * 
 * @param {number} index
 * @return {void}
 */
GridTable.prototype.uncheck = function(index) {};

/**
 * \@method uncheckAll
 * Removes checked classes from all rows.
 * @return {void}
 */
GridTable.prototype.uncheckAll = function() {};

/**
 * \@method remove
 * Remove a row at a specified index.
 * 
 * @param {number} index
 * @return {void}
 */
GridTable.prototype.remove = function(index) {};

/**
 * \@method reset
 * Removes all rows.
 * @return {void}
 */
GridTable.prototype.reset = function() {};

/**
 * \@method move
 * Moves a row iat a specified index to the target index.
 * 
 * @param {number} index
 * @param {number} targetIndex
 * @return {void}
 */
GridTable.prototype.move = function(index, targetIndex) {};

/**
 * \@method sort
 * Moves a row iat a specified index to the target index.
 * 
 * @param {number} index
 * @param {string} order
 * @param {?=} e
 * @return {void}
 */
GridTable.prototype.sort = function(index, order, e) {};

/**
 * \@method scroll
 * Sets the scroll based on the height of a table.
 * 
 * @param {number} height
 * @return {void}
 */
GridTable.prototype.scroll = function(height) {};

/**
 * \@method open
 * Shows a child row of a specified index.
 * 
 * @param {number} index
 * @return {void}
 */
GridTable.prototype.open = function(index) {};

/**
 * \@method fold
 * Hides a child row of a specified index.
 * 
 * @param {number} index
 * @return {void}
 */
GridTable.prototype.fold = function(index) {};

/**
 * \@method openAll
 * Shows all child rows of a specified index.
 * @return {void}
 */
GridTable.prototype.openAll = function() {};

/**
 * \@method foldAll
 * Hides all child rows of a specified index.
 * @return {void}
 */
GridTable.prototype.foldAll = function() {};

/**
 * \@method resize
 * Resets the inner scroll and columns of a table.
 * @return {void}
 */
GridTable.prototype.resize = function() {};

/**
 * \@method resizeColumns
 * Resets the sizes of all columns of a table.
 * @return {void}
 */
GridTable.prototype.resizeColumns = function() {};

/**
 * \@method size
 * Gets the size of all the rows of a table.
 * 
 * @return {number}
 */
GridTable.prototype.size = function() {};

/**
 * \@method count
 * Gets the number of trows of a table.
 * 
 * @return {number}
 */
GridTable.prototype.count = function() {};

/**
 * \@method list
 * Gets all the rows of a table.
 * 
 * @return {!Array<?>}
 */
GridTable.prototype.list = function() {};

/**
 * \@method listData
 * Gets the data of all the rows of a table.
 * 
 * @return {!Array<?>}
 */
GridTable.prototype.listData = function() {};

/**
 * \@method listAll
 * Gets all the rows of a table including child rows.
 * 
 * @return {!Array<?>}
 */
GridTable.prototype.listAll = function() {};

/**
 * \@method listChecked
 * Gets all rows in a check state.
 * 
 * @return {!Array<?>}
 */
GridTable.prototype.listChecked = function() {};

/**
 * \@method listColumn
 * Gets all columns.
 * 
 * @return {?}
 */
GridTable.prototype.listColumn = function() {};

/**
 * \@method get
 * Gets the row at the specified index.
 * 
 * @param {number} index
 * @return {?}
 */
GridTable.prototype.get = function(index) {};

/**
 * \@method getAll
 * Gets all rows of at the specified index including child rows.
 * 
 * @param {number} index
 * @return {!Array<?>}
 */
GridTable.prototype.getAll = function(index) {};

/**
 * \@method getColumn
 * Gets the column at the specified index.
 * 
 * @param {(string|number)} index
 * @return {?}
 */
GridTable.prototype.getColumn = function(index) {};

/**
 * \@method showColumn
 * Shows the column index (or column name).
 * 
 * @param {(string|number)} index
 * @param {?=} e
 * @return {void}
 */
GridTable.prototype.showColumn = function(index, e) {};

/**
 * \@method hideColumn
 * Hides the column index (or column name).
 * 
 * @param {(string|number)} index
 * @param {?=} e
 * @return {void}
 */
GridTable.prototype.hideColumn = function(index, e) {};

/**
 * \@method initColumns
 * It is possible to determine the index or name of the column to be shown in an array.
 * 
 * @param {?} keys
 * @return {void}
 */
GridTable.prototype.initColumns = function(keys) {};

/**
 * \@method showColumnMenu
 * Shows the Show/Hide Column menu at specified coordinates.
 * 
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
GridTable.prototype.showColumnMenu = function(x, y) {};

/**
 * \@method hideColumnMenu
 * Hides the Show/Hide Column menu.
 * @return {void}
 */
GridTable.prototype.hideColumnMenu = function() {};

/**
 * \@method toggleColumnMenu
 * Shows or hides the Show/Hide Column menu.
 * 
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
GridTable.prototype.toggleColumnMenu = function(x, y) {};

/**
 * \@method showExpand
 * Shows the extended row area of a specified index.
 * 
 * @param {number} index
 * @param {?=} obj
 * @param {?=} e
 * @return {void}
 */
GridTable.prototype.showExpand = function(index, obj, e) {};

/**
 * \@method hideExpand
 * Hides the extended row area of a specified index.
 * @param {?=} e
 * @return {void}
 */
GridTable.prototype.hideExpand = function(e) {};

/**
 * \@method getExpand
 * Get a row in which the extended area is currently activated.
 * 
 * @return {?}
 */
GridTable.prototype.getExpand = function() {};

/**
 * \@method showEditRow
 * Shows the modified row area of a specified index.
 * 
 * @param {number} index
 * @param {?=} e
 * @return {void}
 */
GridTable.prototype.showEditRow = function(index, e) {};

/**
 * \@method hideEditRow
 * Hides the modified row area of a specified index.
 * @param {?=} data
 * @return {void}
 */
GridTable.prototype.hideEditRow = function(data) {};

/**
 * \@method getEditRow
 * Get a row in which the modified area is currently activated.
 * 
 * @return {?}
 */
GridTable.prototype.getEditRow = function() {};

/**
 * \@method setCsv
 * Updates a table using a CVS string.
 * @param {?} csvOrKey
 * @param {?=} key
 * @return {void}
 */
GridTable.prototype.setCsv = function(csvOrKey, key) {};

/**
 * \@method setCsvFile
 * Updates a table using a CVS file.
 * @param {?} fileOrKey
 * @param {?=} key
 * @return {void}
 */
GridTable.prototype.setCsvFile = function(fileOrKey, key) {};

/**
 * \@method getCsv
 * Gets the data of a table as a CSV string.
 * 
 * @param {boolean} isTree
 * @return {string}
 */
GridTable.prototype.getCsv = function(isTree) {};

/**
 * \@method getCsvBase64
 * Gets the data of a table as a CSV string encoded as base64.
 * 
 * @param {boolean} isTree
 * @return {string}
 */
GridTable.prototype.getCsvBase64 = function(isTree) {};

/**
 * \@method downloadCsv
 * Downloads the data of a table as a CSV file.
 * 
 * @param {string} name
 * @param {boolean} isTree
 * @return {void}
 */
GridTable.prototype.downloadCsv = function(name, isTree) {};

/**
 * \@method activeIndex
 * Gets the index of a row that is activated in an extended/modified/selected state.
 * 
 * @return {number}
 */
GridTable.prototype.activeIndex = function() {};
/**
 * @extends {UIEvent}
 * @record
 * @struct
 */
function GridXTable() {}

/* TODO: CallSignature:  */

/**
 * @param {boolean=} isTree
 * @return {void}
 */
GridXTable.prototype.render = function(isTree) {};

/**
 * \@method select
 * Adds a selected class to a row at a specified index and gets an instance of the applicable row.
 * 
 * @param {number} index
 * @return {?}
 */
GridXTable.prototype.select = function(index) {};

/**
 * \@method unselect
 * Removes a selected class from a selected row and gets an instance of the row in question.
 * 
 * @return {?}
 */
GridXTable.prototype.unselect = function() {};

/**
 * \@method update
 * Updates the list of rows or modifies the row at a specified index.
 * 
 * @param {!Array<?>} dataList
 * @return {void}
 */
GridXTable.prototype.update = function(dataList) {};

/**
 * \@method updateTree
 * It is possible to configure a tree table using an object array with the index and data properties.
 * 
 * @param {!Array<?>} tree
 * @return {void}
 */
GridXTable.prototype.updateTree = function(tree) {};

/**
 * \@method append
 * Add a row or a child row to at a specified index.
 * 
 * @param {number} index
 * @param {!Object} data
 * @return {void}
 */
GridXTable.prototype.append = function(index, data) {};

/**
 * \@method open
 * Shows a child row of a specified index.
 * 
 * @param {(string|number)} index
 * @return {void}
 */
GridXTable.prototype.open = function(index) {};

/**
 * \@method fold
 * Hides a child row of a specified index.
 * 
 * @param {(string|number)} index
 * @return {void}
 */
GridXTable.prototype.fold = function(index) {};

/**
 * \@method openAll
 * Shows all child rows of a specified index.
 * @param {(string|number)} index
 * @return {void}
 */
GridXTable.prototype.openAll = function(index) {};

/**
 * \@method foldAll
 * Hides all child rows of a specified index.
 * @param {(string|number)} index
 * @return {void}
 */
GridXTable.prototype.foldAll = function(index) {};

/**
 * \@method next
 * Changes to the next page.
 * @return {void}
 */
GridXTable.prototype.next = function() {};

/**
 * \@method page
 * Changes to the page of at a specified index.
 * 
 * @param {number} pNo
 * @return {void}
 */
GridXTable.prototype.page = function(pNo) {};

/**
 * \@method sort
 * Moves a row iat a specified index to the target index.
 * 
 * @param {number} index
 * @param {string} order
 * @param {?=} e
 * @param {?=} isNotLoading
 * @return {void}
 */
GridXTable.prototype.sort = function(index, order, e, isNotLoading) {};

/**
 * \@method filter
 * Filters columns at a specified to locate rows that contain keywords in the cell value.
 * 
 * @param {?} callback
 * @return {void}
 */
GridXTable.prototype.filter = function(callback) {};

/**
 * \@method rollback
 * Returns filtered rows to the original state.
 * @return {void}
 */
GridXTable.prototype.rollback = function() {};

/**
 * \@method clear
 * Remove all row elements.
 * @return {void}
 */
GridXTable.prototype.clear = function() {};

/**
 * \@method clear
 * Remove all data
 * @return {void}
 */
GridXTable.prototype.reset = function() {};

/**
 * \@method resize
 * Resets the inner scroll and columns of a table.
 * @return {void}
 */
GridXTable.prototype.resize = function() {};

/**
 * \@method scrollWidth
 * Sets the scroll based on the width of a table.
 * 
 * @param {number} scrollWidth
 * @param {boolean=} isInit
 * @return {void}
 */
GridXTable.prototype.scrollWidth = function(scrollWidth, isInit) {};

/**
 * \@method scrollHeight
 * Sets the scroll based on the height of a table.
 * 
 * @param {number} h
 * @return {void}
 */
GridXTable.prototype.scrollHeight = function(h) {};

/**
 * \@method scrollTop
 * Sets the scroll based on the height of a table.
 * 
 * @param {(string|number)} index
 * @param {number} dist
 * @return {void}
 */
GridXTable.prototype.scrollTop = function(index, dist) {};

/**
 * @deprecated
 * \@method height
 * Sets the scroll based on the height of a table.
 * 
 * @param {number} h
 * @return {void}
 */
GridXTable.prototype.height = function(h) {};

/**
 * \@method size
 * Gets the size of all the rows of a table.
 * 
 * @return {number}
 */
GridXTable.prototype.size = function() {};

/**
 * \@method count
 * Gets the number of trows of a table.
 * 
 * @return {number}
 */
GridXTable.prototype.count = function() {};

/**
 * \@method list
 * Gets all the rows of a table.
 * 
 * @return {!Array<?>}
 */
GridXTable.prototype.list = function() {};

/**
 * \@method listColumn
 * Gets all columns.
 * 
 * @return {!Array<?>}
 */
GridXTable.prototype.listColumn = function() {};

/**
 * \@method listData
 * Gets the data of all the rows of a table.
 * 
 * @return {!Array<?>}
 */
GridXTable.prototype.listData = function() {};

/**
 * \@method get
 * Gets the row at the specified index.
 * 
 * @param {number} index
 * @return {?}
 */
GridXTable.prototype.get = function(index) {};

/**
 * @param {number} index
 * @param {?=} _result
 * @return {!Array<?>}
 */
GridXTable.prototype.getAll = function(index, _result) {};

/**
 * \@method getColumn
 * Gets the column at the specified index.
 * 
 * @param {(string|number)} index
 * @return {?}
 */
GridXTable.prototype.getColumn = function(index) {};

/**
 * \@method getData
 * Gets the data at the specified index.
 * 
 * @param {(string|number)} index
 * @return {?}
 */
GridXTable.prototype.getData = function(index) {};

/**
 * \@method showColumn
 * Shows the column index (or column name).
 * 
 * @param {(string|number)} index
 * @return {void}
 */
GridXTable.prototype.showColumn = function(index) {};

/**
 * \@method hideColumn
 * Hides the column index (or column name).
 * 
 * @param {(string|number)} index
 * @return {void}
 */
GridXTable.prototype.hideColumn = function(index) {};

/**
 * \@method initColumns
 * It is possible to determine the index or name of the column to be shown in an array.
 * 
 * @param {(string|number)} keys
 * @return {void}
 */
GridXTable.prototype.initColumns = function(keys) {};

/**
 * \@method showColumnMenu
 * Shows the Show/Hide Column menu at specified coordinates.
 * 
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
GridXTable.prototype.showColumnMenu = function(x, y) {};

/**
 * \@method hideColumnMenu
 * Hides the Show/Hide Column menu.
 * @return {void}
 */
GridXTable.prototype.hideColumnMenu = function() {};

/**
 * \@method toggleColumnMenu
 * Shows or hides the Show/Hide Column menu.
 * 
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
GridXTable.prototype.toggleColumnMenu = function(x, y) {};

/**
 * \@method showExpand
 * Shows the extended row area of a specified index.
 * 
 * @param {number} index
 * @param {?} obj
 * @return {void}
 */
GridXTable.prototype.showExpand = function(index, obj) {};

/**
 * \@method hideExpand
 * Hides the extended row area of a specified index.
 * @param {number} index
 * @return {void}
 */
GridXTable.prototype.hideExpand = function(index) {};

/**
 * \@method getExpand
 * Get a row in which the extended area is currently activated.
 * 
 * @return {?}
 */
GridXTable.prototype.getExpand = function() {};

/**
 * \@method showLoading
 * Shows the loading screen for the specified delay time.
 * 
 * @param {number} delay
 * @return {void}
 */
GridXTable.prototype.showLoading = function(delay) {};

/**
 * \@method hideLoading
 * Hides the loading screen.
 * @return {void}
 */
GridXTable.prototype.hideLoading = function() {};

/**
 * \@method setCsv
 * Updates a table using a CVS string.
 * @param {string} csv
 * @return {void}
 */
GridXTable.prototype.setCsv = function(csv) {};

/**
 * \@method setCsvFile
 * Updates a table using a CVS file.
 * @param {?} file
 * @return {void}
 */
GridXTable.prototype.setCsvFile = function(file) {};

/**
 * \@method getCsv
 * Gets the data of a table as a CSV string.
 * 
 * @return {string}
 */
GridXTable.prototype.getCsv = function() {};

/**
 * \@method getCsvBase64
 * Gets the data of a table as a CSV string encoded as base64.
 * 
 * @return {string}
 */
GridXTable.prototype.getCsvBase64 = function() {};

/**
 * \@method downloadCsv
 * Downloads the data of a table as a CSV file.
 * 
 * @param {string} name
 * @return {void}
 */
GridXTable.prototype.downloadCsv = function(name) {};

/**
 * \@method rowFunc
 * Ir is possible to use a function for all row data applicable to the column (or column name) of a specified column (or column name). Currently only SUM and AVG are supported.
 * 
 * @param {string} type
 * @param {number} index
 * @param {?} callback
 * @return {?}
 */
GridXTable.prototype.rowFunc = function(type, index, callback) {};

/**
 * \@method getPage
 * Gets the current page of a table.
 * 
 * @return {number}
 */
GridXTable.prototype.getPage = function() {};

/**
 * \@method activeIndex
 * Gets the index of a row that is activated in an extended/modified/selected state.
 * 
 * @return {number}
 */
GridXTable.prototype.activeIndex = function() {};
