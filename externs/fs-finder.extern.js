/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/fs-finder/index.d.ts:
/** @const */
var FsFinder = {};

/** @typedef {function((string|!Array<string>)): void} */
FsFinder.AsyncFunction;

/** @typedef {string} */
FsFinder.Type;

/** @typedef {string} */
FsFinder.Mask;

/** @typedef {string} */
FsFinder.Directory;
/**
 * @extends {FsFinder.Base}
 * @constructor
 * @struct
 */
FsFinder.Finder = function() {};
 /** @type {string} */
FsFinder.Finder.TIME_FORMAT;

/**
 * @param {string} path
 * @return {!FsFinder.Finder}
 */
FsFinder.Finder.in = function(path) {};

/**
 * @param {string} path
 * @return {!FsFinder.Finder}
 */
FsFinder.Finder.from = function(path) {};

/**
 * @param {string} path
 * @param {function((string|!Array<string>)): void=} fn
 * @param {string=} type
 * @return {!FsFinder.Finder}
 */
FsFinder.Finder.find = function(path, fn, type) {};

/**
 * @param {string=} path
 * @param {function((string|!Array<string>)): void=} fn
 * @return {!FsFinder.Finder}
 */
FsFinder.Finder.findFiles = function(path, fn) {};

/**
 * @param {string=} path
 * @param {function((string|!Array<string>)): void=} fn
 * @return {!FsFinder.Finder}
 */
FsFinder.Finder.findDirectories = function(path, fn) {};

/**
 * @param {string=} path
 * @param {function((string|!Array<string>)): void=} fn
 * @return {!FsFinder.Finder}
 */
FsFinder.Finder.findFile = function(path, fn) {};

/**
 * @param {string=} path
 * @param {function((string|!Array<string>)): void=} fn
 * @return {!FsFinder.Finder}
 */
FsFinder.Finder.findDirectory = function(path, fn) {};

/**
 * @param {string=} mask
 * @param {function((string|!Array<string>)): void=} fn
 * @param {string=} type
 * @return {!Array<string>}
 */
FsFinder.Finder.prototype.find = function(mask, fn, type) {};

/**
 * @param {string=} mask
 * @param {function((string|!Array<string>)): void=} fn
 * @return {!Array<string>}
 */
FsFinder.Finder.prototype.findFiles = function(mask, fn) {};

/**
 * @param {string=} mask
 * @param {function((string|!Array<string>)): void=} fn
 * @return {!Array<string>}
 */
FsFinder.Finder.prototype.findDirectories = function(mask, fn) {};

/**
 * @param {string=} mask
 * @param {function((string|!Array<string>)): void=} fn
 * @return {!Array<string>}
 */
FsFinder.Finder.prototype.findFile = function(mask, fn) {};

/**
 * @param {string=} mask
 * @param {function((string|!Array<string>)): void=} fn
 * @return {!Array<string>}
 */
FsFinder.Finder.prototype.findDirectory = function(mask, fn) {};

/**
 * @param {?=} operation
 * @param {?=} value
 * @return {!FsFinder.Finder}
 */
FsFinder.Finder.prototype.size = function(operation, value) {};

/**
 * @param {?=} operation
 * @param {?=} value
 * @return {!FsFinder.Finder}
 */
FsFinder.Finder.prototype.date = function(operation, value) {};
/**
 * @constructor
 * @struct
 */
FsFinder.Base = function() {};

/**
 * @param {boolean=} recursive
 * @return {!FsFinder.Finder}
 */
FsFinder.Base.prototype.recursively = function(recursive) {};

/**
 * @param {(string|!Array<string>)} excludes
 * @param {boolean=} exactly
 * @return {!FsFinder.Finder}
 */
FsFinder.Base.prototype.exclude = function(excludes, exactly) {};

/**
 * @param {boolean=} systemFiles
 * @return {!FsFinder.Finder}
 */
FsFinder.Base.prototype.showSystemFiles = function(systemFiles) {};

/**
 * @param {boolean=} up
 * @return {!FsFinder.Finder}
 */
FsFinder.Base.prototype.lookUp = function(up) {};

/**
 * @param {boolean=} findFirst
 * @return {!FsFinder.Finder}
 */
FsFinder.Base.prototype.findFirst = function(findFirst) {};

/**
 * @param {!Function} fn
 * @return {!FsFinder.Finder}
 */
FsFinder.Base.prototype.filter = function(fn) {};

/**
 * @param {string=} type
 * @param {string=} mask
 * @param {string=} dir
 * @return {!Array<string>}
 */
FsFinder.Base.prototype.getPathsSync = function(type, mask, dir) {};

/**
 * @param {function((string|!Array<string>)): void} fn
 * @param {string=} type
 * @param {string=} mask
 * @param {string=} dir
 * @return {void}
 */
FsFinder.Base.prototype.getPathsAsync = function(fn, type, mask, dir) {};

/**
 * @param {string} path
 * @return {boolean}
 */
FsFinder.Base.prototype.checkExcludes = function(path) {};

/**
 * @param {string} path
 * @return {boolean}
 */
FsFinder.Base.prototype.checkSystemFiles = function(path) {};

/**
 * @param {string} path
 * @param {?} stats
 * @return {boolean}
 */
FsFinder.Base.prototype.checkFilters = function(path, stats) {};

/**
 * @param {string} path
 * @param {?} stats
 * @param {string} mask
 * @param {string} type
 * @return {number}
 */
FsFinder.Base.prototype.checkFile = function(path, stats, mask, type) {};

/**
 * @param {string=} mask
 * @param {string=} type
 * @return {!Array<string>}
 */
FsFinder.Base.prototype.getPathsFromParentsSync = function(mask, type) {};

/**
 * @param {function((string|!Array<string>)): void} fn
 * @param {string=} mask
 * @param {string=} type
 * @return {void}
 */
FsFinder.Base.prototype.getPathsFromParentsAsync = function(fn, mask, type) {};

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ExportAssignment in  */
