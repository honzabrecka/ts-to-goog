/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/underscore/index.d.ts:
 /** @type {!_.UnderscoreStatic} */
var _;

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
/**
 * @record
 * @struct
 */
_.ThrottleSettings = function() {};
 /** @type {boolean} */
_.ThrottleSettings.prototype.leading;
 /** @type {boolean} */
_.ThrottleSettings.prototype.trailing;
/**
 * @record
 * @struct
 */
_.TemplateSettings = function() {};
 /** @type {!RegExp} */
_.TemplateSettings.prototype.evaluate;
 /** @type {!RegExp} */
_.TemplateSettings.prototype.interpolate;
 /** @type {!RegExp} */
_.TemplateSettings.prototype.escape;
 /** @type {string} */
_.TemplateSettings.prototype.variable;
/**
 * @record
 * @struct
 */
_.Collection = function() {};
/**
 * @extends {_.Collection}
 * @record
 * @struct
 */
_.List = function() {};

/* TODO: IndexSignature: _ */
 /** @type {number} */
_.List.prototype.length;
/**
 * @extends {_.Collection}
 * @record
 * @struct
 */
_.Dictionary = function() {};

/* TODO: IndexSignature: _ */
/**
 * @record
 * @struct
 */
_.ListIterator = function() {};

/* TODO: CallSignature: _ */
/**
 * @record
 * @struct
 */
_.ObjectIterator = function() {};

/* TODO: CallSignature: _ */

/** @typedef {(string|number)} */
_.IterateePropertyShorthand;

/** @typedef {!_.Dictionary<T>} */
_.IterateeMatcherShorthand;
/**
 * @record
 * @struct
 */
_.MemoIterator = function() {};

/* TODO: CallSignature: _ */
/**
 * @record
 * @struct
 */
_.MemoObjectIterator = function() {};

/* TODO: CallSignature: _ */
/**
 * @record
 * @struct
 */
_.Cancelable = function() {};

/**
 * @return {void}
 */
_.Cancelable.prototype.cancel = function() {};
/**
 * @record
 * @struct
 */
_.UnderscoreStatic = function() {};

/* TODO: CallSignature: _ */

/* TODO: CallSignature: _ */

/* TODO: CallSignature: _ */
 /** @type {?} */
_.UnderscoreStatic.prototype.collect;
 /** @type {!_.TemplateSettings} */
_.UnderscoreStatic.prototype.templateSettings;

/**
 * Iterates over a list of elements, yielding each in turn to an iterator function. The iterator is
 * bound to the context object, if one is passed. Each invocation of iterator is called with three
 * arguments: (element, index, list). If list is a JavaScript object, iterator's arguments will be
 * (value, key, object). Delegates to the native forEach function if it exists.
 * @see _.each
 * @template T
 * @param {!_.List<T>|!_.Dictionary<T>} list_or_object Iterates over this list of elements. / Iterates over properties of this object.
 * @param {!_.ListIterator<T, void>|!_.ObjectIterator<T, void>} iterator Iterator function for each element `list`. / Iterator function for each property on `object`.
 * @param {?=} context 'this' object in `iterator`, optional.
 * 
 * @return {!_.List<T>|!_.Dictionary<T>}
 */
_.UnderscoreStatic.prototype.each = function(list_or_object, iterator, context) {};

/**
 * @see _.each
 * 
 * @see _.each
 * 
 * @template T
 * @param {!_.List<T>|!_.Dictionary<T>} list_or_object
 * @param {!_.ListIterator<T, void>|!_.ObjectIterator<T, void>} iterator
 * @param {?=} context
 * @return {!_.List<T>|!_.Dictionary<T>}
 */
_.UnderscoreStatic.prototype.forEach = function(list_or_object, iterator, context) {};

/**
 * Produces a new array of values by mapping each value in list through a transformation function
 * (iterator). If the native map method exists, it will be used instead. If list is a JavaScript
 * object, iterator's arguments will be (value, key, object).
 * @see _.map
 * @template T, TResult
 * @param {!_.List<T>|!_.Dictionary<T>} list_or_object Maps the elements of this array. / Maps the properties of this object.
 * @param {!_.ListIterator<T, TResult>|(string|number)|!_.Dictionary<?>|!_.ObjectIterator<T, TResult>} iterator Map iterator function for each element in `list`. / Map iterator function for each property on `object`.
 * @param {?=} context `this` object in `iterator`, optional.
 * @return {!Array<TResult>|!Array<T>|!Array<boolean>} The mapped array result.
 *  / The mapped object result.
 * 
 */
_.UnderscoreStatic.prototype.map = function(list_or_object, iterator, context) {};

/**
 * Also known as inject and foldl, reduce boils down a list of values into a single value.
 * Memo is the initial state of the reduction, and each successive step of it should be
 * returned by iterator. The iterator is passed four arguments: the memo, then the value
 * and index (or key) of the iteration, and finally a reference to the entire list.
 * @template T, TResult
 * @param {!_.List<T>|!_.Dictionary<T>} list Reduces the elements of this array.
 * @param {!_.MemoIterator<T, TResult>|!_.MemoObjectIterator<T, TResult>} iterator Reduce iterator function for each element in `list`.
 * @param {TResult=} memo Initial reduce state.
 * @param {?=} context `this` object in `iterator`, optional.
 * @return {TResult} Reduced object result.
 * 
 */
_.UnderscoreStatic.prototype.reduce = function(list, iterator, memo, context) {};

/**
 * @see _.reduce
 * 
 * @template T, TResult
 * @param {!_.List<T>|!_.Dictionary<T>} list
 * @param {!_.MemoIterator<T, TResult>|!_.MemoObjectIterator<T, TResult>} iterator
 * @param {TResult=} memo
 * @param {?=} context
 * @return {TResult}
 */
_.UnderscoreStatic.prototype.inject = function(list, iterator, memo, context) {};

/**
 * @see _.reduce
 * 
 * @template T, TResult
 * @param {!_.Collection<T>} list
 * @param {!_.MemoIterator<T, TResult>} iterator
 * @param {TResult=} memo
 * @param {?=} context
 * @return {TResult}
 */
_.UnderscoreStatic.prototype.foldl = function(list, iterator, memo, context) {};

/**
 * The right-associative version of reduce. Delegates to the JavaScript 1.8 version of
 * reduceRight, if it exists. `foldr` is not as useful in JavaScript as it would be in a
 * language with lazy evaluation.
 * @template T, TResult
 * @param {!_.Collection<T>} list Reduces the elements of this array.
 * @param {!_.MemoIterator<T, TResult>} iterator Reduce iterator function for each element in `list`.
 * @param {TResult=} memo Initial reduce state.
 * @param {?=} context `this` object in `iterator`, optional.
 * @return {TResult} Reduced object result.
 * 
 */
_.UnderscoreStatic.prototype.reduceRight = function(list, iterator, memo, context) {};

/**
 * @see _.reduceRight
 * 
 * @template T, TResult
 * @param {!_.Collection<T>} list
 * @param {!_.MemoIterator<T, TResult>} iterator
 * @param {TResult=} memo
 * @param {?=} context
 * @return {TResult}
 */
_.UnderscoreStatic.prototype.foldr = function(list, iterator, memo, context) {};

/**
 * Looks through each value in the list, returning the first one that passes a truth
 * test (iterator). The function returns as soon as it finds an acceptable element,
 * and doesn't traverse the entire list.
 * @see _.find
 * 
 * @see _.find
 * 
 * @see _.find
 * 
 * @template T, U
 * @param {!_.List<T>|!_.Dictionary<T>|(!_.List<T>|!_.Dictionary<T>)} list_or_object Searches for a value in this list.
 * @param {!_.ListIterator<T, boolean>|!_.ObjectIterator<T, boolean>|U|string} iterator Search iterator function for each element in `list`.
 * @param {?=} context `this` object in `iterator`, optional.
 * @return {T} The first acceptable found element in `list`, if nothing is found undefined/null is returned.
 * 
 */
_.UnderscoreStatic.prototype.find = function(list_or_object, iterator, context) {};

/**
 * @see _.find
 * 
 * @see _.find
 * 
 * @see _.find
 * 
 * @see _.find
 * 
 * @template T, U
 * @param {!_.List<T>|!_.Dictionary<T>|(!_.List<T>|!_.Dictionary<T>)} list_or_object
 * @param {!_.ListIterator<T, boolean>|!_.ObjectIterator<T, boolean>|U|string} iterator
 * @param {?=} context
 * @return {T}
 */
_.UnderscoreStatic.prototype.detect = function(list_or_object, iterator, context) {};

/**
 * Looks through each value in the list, returning an array of all the values that pass a truth
 * test (iterator). Delegates to the native filter method, if it exists.
 * @see _.filter
 * 
 * @template T
 * @param {!_.List<T>|!_.Dictionary<T>} list_or_object Filter elements out of this list.
 * @param {!_.ListIterator<T, boolean>|!_.ObjectIterator<T, boolean>} iterator Filter iterator function for each element in `list`.
 * @param {?=} context `this` object in `iterator`, optional.
 * @return {!Array<T>} The filtered list of elements.
 * 
 */
_.UnderscoreStatic.prototype.filter = function(list_or_object, iterator, context) {};

/**
 * @see _.filter
 * 
 * @see _.filter
 * 
 * @template T
 * @param {!_.List<T>|!_.Dictionary<T>} list_or_object
 * @param {!_.ListIterator<T, boolean>|!_.ObjectIterator<T, boolean>} iterator
 * @param {?=} context
 * @return {!Array<T>}
 */
_.UnderscoreStatic.prototype.select = function(list_or_object, iterator, context) {};

/**
 * Looks through each value in the list, returning an array of all the values that contain all
 * of the key-value pairs listed in properties.
 * @template T, U
 * @param {!_.List<T>} list List to match elements again `properties`.
 * @param {U} properties The properties to check for on each element within `list`.
 * @return {!Array<T>} The elements within `list` that contain the required `properties`.
 * 
 */
_.UnderscoreStatic.prototype.where = function(list, properties) {};

/**
 * Looks through the list and returns the first value that matches all of the key-value pairs listed in properties.
 * @template T, U
 * @param {!_.List<T>} list Search through this list's elements for the first object with all `properties`.
 * @param {U} properties Properties to look for on the elements within `list`.
 * @return {T} The first element in `list` that has all `properties`.
 * 
 */
_.UnderscoreStatic.prototype.findWhere = function(list, properties) {};

/**
 * Returns the values in list without the elements that the truth test (iterator) passes.
 * The opposite of filter.
 * Return all the elements for which a truth test fails.
 * @see _.reject
 * 
 * @template T
 * @param {!_.List<T>|!_.Dictionary<T>} list_or_object Reject elements within this list.
 * @param {!_.ListIterator<T, boolean>|!_.ObjectIterator<T, boolean>} iterator Reject iterator function for each element in `list`.
 * @param {?=} context `this` object in `iterator`, optional.
 * @return {!Array<T>} The rejected list of elements.
 * 
 */
_.UnderscoreStatic.prototype.reject = function(list_or_object, iterator, context) {};

/**
 * Returns true if all of the values in the list pass the iterator truth test. Delegates to the
 * native method every, if present.
 * @see _.every
 * 
 * @template T
 * @param {!_.List<T>|!_.Dictionary<T>} list Truth test against all elements within this list.
 * @param {!_.ListIterator<T, boolean>|!_.ObjectIterator<T, boolean>=} iterator Trust test iterator function for each element in `list`.
 * @param {?=} context `this` object in `iterator`, optional.
 * @return {boolean} True if all elements passed the truth test, otherwise false.
 * 
 */
_.UnderscoreStatic.prototype.every = function(list, iterator, context) {};

/**
 * @see _.every
 * 
 * @see _.every
 * 
 * @template T
 * @param {!_.List<T>|!_.Dictionary<T>} list
 * @param {!_.ListIterator<T, boolean>|!_.ObjectIterator<T, boolean>=} iterator
 * @param {?=} context
 * @return {boolean}
 */
_.UnderscoreStatic.prototype.all = function(list, iterator, context) {};

/**
 * Returns true if any of the values in the list pass the iterator truth test. Short-circuits and
 * stops traversing the list if a true element is found. Delegates to the native method some, if present.
 * @see _.some
 * 
 * @template T
 * @param {!_.List<T>|!_.Dictionary<T>} list_or_object Truth test against all elements within this list.
 * @param {!_.ListIterator<T, boolean>|!_.ObjectIterator<T, boolean>=} iterator Trust test iterator function for each element in `list`.
 * @param {?=} context `this` object in `iterator`, optional.
 * @return {boolean} True if any elements passed the truth test, otherwise false.
 * 
 */
_.UnderscoreStatic.prototype.some = function(list_or_object, iterator, context) {};

/**
 * @see _.some
 * 
 * @see _.some
 * 
 * @template T
 * @param {!_.List<T>|!_.Dictionary<T>} list_or_object
 * @param {!_.ListIterator<T, boolean>|!_.ObjectIterator<T, boolean>|T=} iterator_or_value
 * @param {?=} context
 * @return {boolean}
 */
_.UnderscoreStatic.prototype.any = function(list_or_object, iterator_or_value, context) {};

/**
 * Returns true if the value is present in the list. Uses indexOf internally,
 * if list is an Array.
 * @see _.contains
 * 
 * @template T
 * @param {!_.List<T>|!_.Dictionary<T>} list_or_object Checks each element to see if `value` is present.
 * @param {T} value The value to check for within `list`.
 * @param {number=} fromIndex
 * @return {boolean} True if `value` is present in `list`, otherwise false.
 * 
 */
_.UnderscoreStatic.prototype.contains = function(list_or_object, value, fromIndex) {};

/**
 * @see _.contains
 * 
 * @see _.contains
 * 
 * @template T
 * @param {!_.Collection<T>|!_.Dictionary<T>} list_or_object
 * @param {T} value
 * @param {number=} fromIndex
 * @return {boolean}
 */
_.UnderscoreStatic.prototype.include = function(list_or_object, value, fromIndex) {};

/**
 * @see _.contains
 * 
 * @see _.contains
 * 
 * @template T
 * @param {!_.Collection<T>|!_.Dictionary<T>} list_or_object
 * @param {T} value
 * @param {number=} fromIndex
 * @return {boolean}
 */
_.UnderscoreStatic.prototype.includes = function(list_or_object, value, fromIndex) {};

/**
 * Calls the method named by methodName on each value in the list. Any extra arguments passed to
 * invoke will be forwarded on to the method invocation.
 * @template T
 * @param {!_.List<T>} list The element's in this list will each have the method `methodName` invoked.
 * @param {string} methodName The method's name to call on each element within `list`.
 * @param {...?} args
 * @return {?}
 */
_.UnderscoreStatic.prototype.invoke = function(list, methodName, args) {};

/**
 * A convenient version of what is perhaps the most common use-case for map: extracting a list of
 * property values.
 * @template T
 * @param {!_.List<T>} list The list to pluck elements out of that have the property `propertyName`.
 * @param {string} propertyName The property to look for on each element within `list`.
 * @return {!Array<?>} The list of elements within `list` that have the property `propertyName`.
 * 
 */
_.UnderscoreStatic.prototype.pluck = function(list, propertyName) {};

/**
 * Returns the maximum value in list.
 * @see _.max
 * Returns the maximum value in list. If iterator is passed, it will be used on each value to generate
 * the criterion by which the value is ranked.
 * @see _.max
 * @template T
 * @param {!_.List<number>|!_.Dictionary<number>|!_.List<T>|!_.Dictionary<T>} list_or_object Finds the maximum value in this list.
 * @param {!_.ListIterator<T, ?>|!_.ObjectIterator<T, ?>=} iterator Compares each element in `list` to find the maximum value.
 * @param {?=} context `this` object in `iterator`, optional.
 * @return {number|T} Maximum value in `list`.
 *  / The maximum element within `list`.
 * 
 */
_.UnderscoreStatic.prototype.max = function(list_or_object, iterator, context) {};

/**
 * Returns the minimum value in list.
 * @see _.min
 * Returns the minimum value in list. If iterator is passed, it will be used on each value to generate
 * the criterion by which the value is ranked.
 * @see _.min
 * @template T
 * @param {!_.List<number>|!_.Dictionary<number>|!_.List<T>|!_.Dictionary<T>} list_or_o Finds the minimum value in this list.
 * @param {!_.ListIterator<T, ?>|!_.ObjectIterator<T, ?>=} iterator Compares each element in `list` to find the minimum value.
 * @param {?=} context `this` object in `iterator`, optional.
 * @return {number|T} Minimum value in `list`.
 *  / The minimum element within `list`.
 * 
 */
_.UnderscoreStatic.prototype.min = function(list_or_o, iterator, context) {};

/**
 * Returns a sorted copy of list, ranked in ascending order by the results of running each value
 * through iterator. Iterator may also be the string name of the property to sort by (eg. length).
 * @see _.sortBy
 * @template T, TSort
 * @param {!_.List<T>} list Sorts this list.
 * @param {!_.ListIterator<T, TSort>|string=} iterator Sort iterator for each element within `list`. / Sort iterator for each element within `list`.
 * 
 * @param {?=} context `this` object in `iterator`, optional.
 * @return {!Array<T>} A sorted copy of `list`.
 * 
 */
_.UnderscoreStatic.prototype.sortBy = function(list, iterator, context) {};

/**
 * Splits a collection into sets, grouped by the result of running each value through iterator.
 * If iterator is a string instead of a function, groups by the property named by iterator on
 * each of the values.
 * @see _.groupBy
 * @template T
 * @param {!_.List<T>} list Groups this list.
 * @param {!_.ListIterator<T, ?>|string=} iterator Group iterator for each element within `list`, return the key to group the element by. / Property on each object to group them by.
 * 
 * @param {?=} context `this` object in `iterator`, optional.
 * @return {!_.Dictionary<!Array<T>>} An object with the group names as properties where each property contains the grouped elements from `list`.
 * 
 */
_.UnderscoreStatic.prototype.groupBy = function(list, iterator, context) {};

/**
 * Given a `list`, and an `iterator` function that returns a key for each element in the list (or a property name),
 * returns an object with an index of each item.  Just like _.groupBy, but for when you know your keys are unique.
 * 
 * @see _.indexBy
 * @template T
 * @param {!_.List<T>} list
 * @param {!_.ListIterator<T, ?>|string} iterator Property on each object to index them by.
 * 
 * @param {?=} context
 * @return {!_.Dictionary<T>}
 */
_.UnderscoreStatic.prototype.indexBy = function(list, iterator, context) {};

/**
 * Sorts a list into groups and returns a count for the number of objects in each group. Similar
 * to groupBy, but instead of returning a list of values, returns a count for the number of values
 * in that group.
 * @see _.countBy
 * @template T
 * @param {!_.List<T>} list Group elements in this list and then count the number of elements in each group.
 * @param {!_.ListIterator<T, ?>|string=} iterator Group iterator for each element within `list`, return the key to group the element by. / Function name
 * 
 * @param {?=} context `this` object in `iterator`, optional.
 * @return {!_.Dictionary<number>} An object with the group names as properties where each property contains the number of elements in that group.
 * 
 */
_.UnderscoreStatic.prototype.countBy = function(list, iterator, context) {};

/**
 * Returns a shuffled copy of the list, using a version of the Fisher-Yates shuffle.
 * @template T
 * @param {!_.Collection<T>} list List to shuffle.
 * @return {!Array<T>} Shuffled copy of `list`.
 * 
 */
_.UnderscoreStatic.prototype.shuffle = function(list) {};

/**
 * Produce a random sample from the `list`.  Pass a number to return `n` random elements from the list.  Otherwise a single random item will be returned.
 * @see _.sample
 * 
 * @template T
 * @param {!_.Collection<T>} list List to sample.
 * @param {number=} n
 * @return {!Array<T>|T} Random sample of `n` elements in `list`.
 * 
 */
_.UnderscoreStatic.prototype.sample = function(list, n) {};

/**
 * Converts the list (anything that can be iterated over), into a real Array. Useful for transmuting
 * the arguments object.
 * @template T
 * @param {!_.Collection<T>} list object to transform into an array.
 * @return {!Array<T>} `list` as an array.
 * 
 */
_.UnderscoreStatic.prototype.toArray = function(list) {};

/**
 * Return the number of values in the list.
 * @template T
 * @param {!_.Collection<T>} list Count the number of values/elements in this list.
 * @return {number} Number of values in `list`.
 * 
 */
_.UnderscoreStatic.prototype.size = function(list) {};

/**
 * Split array into two arrays:
 * one whose elements all satisfy predicate and one whose elements all do not satisfy predicate.
 * @template T
 * @param {!Array<T>} array Array to split in two.
 * @param {!_.ListIterator<T, boolean>} iterator Filter iterator function for each element in `array`.
 * @param {?=} context `this` object in `iterator`, optional.
 * @return {!Array<!Array<T>>} Array where Array[0] are the elements in `array` that satisfies the predicate, and Array[1] the elements that did not.
 * 
 */
_.UnderscoreStatic.prototype.partition = function(array, iterator, context) {};

/**
 * Returns the first element of an array. Passing n will return the first n elements of the array.
 * @see _.first
 * @template T
 * @param {!_.List<T>} array Retrieves the first element of this array.
 * @param {number=} n Return more than one element from `array`.
 * 
 * @return {T|!Array<T>} Returns the first element of `array`.
 * 
 */
_.UnderscoreStatic.prototype.first = function(array, n) {};

/**
 * @see _.first
 * 
 * @see _.first
 * 
 * @template T
 * @param {!_.List<T>} array
 * @param {number=} n
 * @return {T|!Array<T>}
 */
_.UnderscoreStatic.prototype.head = function(array, n) {};

/**
 * @see _.first
 * 
 * @see _.first
 * 
 * @template T
 * @param {!_.List<T>} array
 * @param {number=} n
 * @return {T|!Array<T>}
 */
_.UnderscoreStatic.prototype.take = function(array, n) {};

/**
 * Returns everything but the last entry of the array. Especially useful on the arguments object.
 * Pass n to exclude the last n elements from the result.
 * @template T
 * @param {!_.List<T>} array Retrieve all elements except the last `n`.
 * @param {number=} n Leaves this many elements behind, optional.
 * @return {!Array<T>} Returns everything but the last `n` elements of `array`.
 * 
 */
_.UnderscoreStatic.prototype.initial = function(array, n) {};

/**
 * Returns the last element of an array. Passing n will return the last n elements of the array.
 * @see _.last
 * @template T
 * @param {!_.List<T>} array Retrieves the last element of this array.
 * @param {number=} n Return more than one element from `array`.
 * 
 * @return {T|!Array<T>} Returns the last element of `array`.
 * 
 */
_.UnderscoreStatic.prototype.last = function(array, n) {};

/**
 * Returns the rest of the elements in an array. Pass an index to return the values of the array
 * from that index onward.
 * @template T
 * @param {!_.List<T>} array The array to retrieve all but the first `index` elements.
 * @param {number=} n The index to start retrieving elements forward from, optional, default = 1.
 * @return {!Array<T>} Returns the elements of `array` from `index` to the end of `array`.
 * 
 */
_.UnderscoreStatic.prototype.rest = function(array, n) {};

/**
 * @see _.rest
 * 
 * @template T
 * @param {!_.List<T>} array
 * @param {number=} n
 * @return {!Array<T>}
 */
_.UnderscoreStatic.prototype.tail = function(array, n) {};

/**
 * @see _.rest
 * 
 * @template T
 * @param {!_.List<T>} array
 * @param {number=} n
 * @return {!Array<T>}
 */
_.UnderscoreStatic.prototype.drop = function(array, n) {};

/**
 * Returns a copy of the array with all falsy values removed. In JavaScript, false, null, 0, "",
 * undefined and NaN are all falsy.
 * @template T
 * @param {!_.List<T>} array Array to compact.
 * @return {!Array<T>} Copy of `array` without false values.
 * 
 */
_.UnderscoreStatic.prototype.compact = function(array) {};

/**
 * Flattens a nested array (the nesting can be to any depth). If you pass shallow, the array will
 * only be flattened a single level.
 * @param {!_.List<?>} array The array to flatten.
 * @param {boolean=} shallow If true then only flatten one level, optional, default = false.
 * @return {!Array<?>} `array` flattened.
 * 
 */
_.UnderscoreStatic.prototype.flatten = function(array, shallow) {};

/**
 * Returns a copy of the array with all instances of the values removed.
 * @template T
 * @param {!_.List<T>} array The array to remove `values` from.
 * @param {...T} values The values to remove from `array`.
 * @return {!Array<T>} Copy of `array` without `values`.
 * 
 */
_.UnderscoreStatic.prototype.without = function(array, values) {};

/**
 * Computes the union of the passed-in arrays: the list of unique items, in order, that are
 * present in one or more of the arrays.
 * @template T
 * @param {...!_.List<T>} arrays Array of arrays to compute the union of.
 * @return {!Array<T>} The union of elements within `arrays`.
 * 
 */
_.UnderscoreStatic.prototype.union = function(arrays) {};

/**
 * Computes the list of values that are the intersection of all the arrays. Each value in the result
 * is present in each of the arrays.
 * @template T
 * @param {...!_.List<T>} arrays Array of arrays to compute the intersection of.
 * @return {!Array<T>} The intersection of elements within `arrays`.
 * 
 */
_.UnderscoreStatic.prototype.intersection = function(arrays) {};

/**
 * Similar to without, but returns the values from array that are not present in the other arrays.
 * @template T
 * @param {!_.List<T>} array Keeps values that are within `others`.
 * @param {...!_.List<T>} others The values to keep within `array`.
 * @return {!Array<T>} Copy of `array` with only `others` values.
 * 
 */
_.UnderscoreStatic.prototype.difference = function(array, others) {};

/**
 * Produces a duplicate-free version of the array, using === to test object equality. If you know in
 * advance that the array is sorted, passing true for isSorted will run a much faster algorithm. If
 * you want to compute unique items based on a transformation, pass an iterator function.
 * @see _.uniq
 * 
 * @template T, TSort
 * @param {!_.List<T>} array Array to remove duplicates from.
 * @param {boolean|!_.ListIterator<T, TSort>=} isSorted_or_iterator True if `array` is already sorted, optional, default = false.
 * @param {(string|number|!_.ListIterator<T, TSort>)|?=} iterator_or_context Transform the elements of `array` before comparisons for uniqueness.
 * @param {?=} context 'this' object in `iterator`, optional.
 * @return {!Array<T>} Copy of `array` where all elements are unique.
 * 
 */
_.UnderscoreStatic.prototype.uniq = function(array, isSorted_or_iterator, iterator_or_context, context) {};

/**
 * @see _.uniq
 * 
 * @see _.uniq
 * 
 * @template T, TSort
 * @param {!_.List<T>} array
 * @param {(string|number|!_.ListIterator<T, TSort>)|boolean=} iterator_or_isSorted
 * @param {?|!_.ListIterator<T, TSort>=} context_or_iterator
 * @param {?=} context
 * @return {!Array<T>}
 */
_.UnderscoreStatic.prototype.unique = function(array, iterator_or_isSorted, context_or_iterator, context) {};

/**
 * Merges together the values of each of the arrays with the values at the corresponding position.
 * Useful when you have separate data sources that are coordinated through matching array indexes.
 * If you're working with a matrix of nested arrays, zip.apply can transpose the matrix in a similar fashion.
 * @see _.zip
 * 
 * @param {...!Array<?>|?} arrays The arrays to merge/zip.
 * @return {!Array<!Array<?>>|!Array<?>} Zipped version of `arrays`.
 * 
 */
_.UnderscoreStatic.prototype.zip = function(arrays) {};

/**
 * The opposite of zip. Given a number of arrays, returns a series of new arrays, the first
 * of which contains all of the first elements in the input arrays, the second of which
 * contains all of the second elements, and so on. Use with apply to pass in an array
 * of arrays
 * @param {...!Array<?>} arrays The arrays to unzip.
 * @return {!Array<!Array<?>>} Unzipped version of `arrays`.
 * 
 */
_.UnderscoreStatic.prototype.unzip = function(arrays) {};

/**
 * Converts arrays into objects. Pass either a single list of [key, value] pairs, or a
 * list of keys, and a list of values.
 * Converts arrays into objects. Pass either a single list of [key, value] pairs, or a
 * list of keys, and a list of values.
 * @see _.object
 * 
 * @template TResult
 * @param {...!_.List<string>|!Array<?>|!_.List<?>} keys_or_keyValuePairs_or_list Key array. / Array of [key, value] pairs.
 * @return {TResult} An object containing the `keys` as properties and `values` as the property values.
 * 
 */
_.UnderscoreStatic.prototype.object = function(keys_or_keyValuePairs_or_list) {};

/**
 * Returns the index at which value can be found in the array, or -1 if value is not present in the array.
 * Uses the native indexOf function unless it's missing. If you're working with a large array, and you know
 * that the array is already sorted, pass true for isSorted to use a faster binary search ... or, pass a number
 * as the third argument in order to look for the first matching value in the array after the given index.
 * @see _indexof
 * 
 * @template T
 * @param {!_.List<T>} array The array to search for the index of `value`.
 * @param {T} value The value to search for within `array`.
 * @param {boolean|number=} isSorted_or_startFrom True if the array is already sorted, optional, default = false.
 * @return {number} The index of `value` within `array`.
 * 
 */
_.UnderscoreStatic.prototype.indexOf = function(array, value, isSorted_or_startFrom) {};

/**
 * Returns the index of the last occurrence of value in the array, or -1 if value is not present. Uses the
 * native lastIndexOf function if possible. Pass fromIndex to start your search at a given index.
 * @template T
 * @param {!_.List<T>} array The array to search for the last index of `value`.
 * @param {T} value The value to search for within `array`.
 * @param {number=} from The starting index for the search, optional.
 * @return {number} The index of the last occurrence of `value` within `array`.
 * 
 */
_.UnderscoreStatic.prototype.lastIndexOf = function(array, value, from) {};

/**
 * Returns the first index of an element in `array` where the predicate truth test passes
 * @template T
 * @param {!_.List<T>} array The array to search for the index of the first element where the predicate truth test passes.
 * @param {(!Object|!_.ListIterator<T, boolean>)} predicate Predicate function.
 * @param {?=} context `this` object in `predicate`, optional.
 * @return {number} Returns the index of an element in `array` where the predicate truth test passes or -1.`
 * 
 */
_.UnderscoreStatic.prototype.findIndex = function(array, predicate, context) {};

/**
 * Returns the last index of an element in `array` where the predicate truth test passes
 * @template T
 * @param {!_.List<T>} array The array to search for the index of the last element where the predicate truth test passes.
 * @param {(!Object|!_.ListIterator<T, boolean>)} predicate Predicate function.
 * @param {?=} context `this` object in `predicate`, optional.
 * @return {number} Returns the index of an element in `array` where the predicate truth test passes or -1.`
 * 
 */
_.UnderscoreStatic.prototype.findLastIndex = function(array, predicate, context) {};

/**
 * Uses a binary search to determine the index at which the value should be inserted into the list in order
 * to maintain the list's sorted order. If an iterator is passed, it will be used to compute the sort ranking
 * of each value, including the value you pass.
 * @template T, TSort
 * @param {!_.List<T>} list The sorted list.
 * @param {T} value The value to determine its index within `list`.
 * @param {function(T): TSort=} iterator Iterator to compute the sort ranking of each value, optional.
 * @param {?=} context
 * @return {number} The index where `value` should be inserted into `list`.
 * 
 */
_.UnderscoreStatic.prototype.sortedIndex = function(list, value, iterator, context) {};

/**
 * A function to create flexibly-numbered lists of integers, handy for each and map loops. start, if omitted,
 * defaults to 0; step defaults to 1. Returns a list of integers from start to stop, incremented (or decremented)
 * by step, exclusive.
 * @see _.range
 * \@note If start is not specified the implementation will never pull the step (step = arguments[2] || 0)
 * 
 * @param {number} start_or_stop Start here. / Stop here.
 * @param {number=} stop Stop here.
 * @param {number=} step The number to count up by each iteration, optional, default = 1.
 * @return {!Array<number>} Array of numbers from `start` to `stop` with increments of `step`.
 *  / Array of numbers from 0 to `stop` with increments of 1.
 */
_.UnderscoreStatic.prototype.range = function(start_or_stop, stop, step) {};

/**
 * Split an **array** into several arrays containing **count** or less elements
 * of initial array.
 * @template T
 * @param {!_.Collection<T>} array The array to split
 * @param {number} count The maximum size of the inner arrays.
 * @return {!Array<!_.Collection<T>>}
 */
_.UnderscoreStatic.prototype.chunk = function(array, count) {};

/**
 * Bind a function to an object, meaning that whenever the function is called, the value of this will
 * be the object. Optionally, bind arguments to the function to pre-fill them, also known as partial application.
 * @param {!Function} func The function to bind `this` to `object`.
 * @param {?} context The `this` pointer whenever `fn` is called.
 * @param {...?} args
 * @return {function(): ?} `fn` with `this` bound to `object`.
 * 
 */
_.UnderscoreStatic.prototype.bind = function(func, context, args) {};

/**
 * Binds a number of methods on the object, specified by methodNames, to be run in the context of that object
 * whenever they are invoked. Very handy for binding functions that are going to be used as event handlers,
 * which would otherwise be invoked with a fairly useless this. If no methodNames are provided, all of the
 * object's function properties will be bound to it.
 * @param {?} object The object to bind the methods `methodName` to.
 * @param {...string} methodNames The methods to bind to `object`, optional and if not provided all of `object`'s
 * methods are bound.
 * 
 * @return {?}
 */
_.UnderscoreStatic.prototype.bindAll = function(object, methodNames) {};

/**
 * Partially apply a function by filling in any number of its arguments, without changing its dynamic this value.
 * A close cousin of bind.  You may pass _ in your list of arguments to specify an argument that should not be
 * pre-filled, but left open to supply at call-time.
 * @template T1, T2, T3, T4, T5, T6, T7, T8
 * @param {function(T1): T2|function(T1, T2): T3|function(T1, T2, T3): T4|function(T1, T2, T3, T4): T5|function(T1, T2, T3, T4, T5): T6|function(T1, T2, T3, T4, T5, T6): T7|function(T1, T2, T3, T4, T5, T6, T7): T8} fn Function to partially fill in arguments.
 * @param {T1|!_.UnderscoreStatic} p1_or_stub1
 * @param {T2|!_.UnderscoreStatic=} p2_or_stub2
 * @param {T3|!_.UnderscoreStatic=} p3_or_stub3
 * @param {T4|!_.UnderscoreStatic=} p4_or_stub4
 * @param {T5|!_.UnderscoreStatic=} p5_or_stub5
 * @param {T6|!_.UnderscoreStatic=} p6_or_stub6
 * @param {T7=} p7
 * @return {function(): T2|function(T2): T3|function(): T3|function(T1): T3|function(T2, T3): T4|function(T3): T4|function(T1, T3): T4|function(): T4|function(T1): T4|function(T2): T4|function(T1, T2): T4|function(T2, T3, T4): T5|function(T3, T4): T5|function(T1, T3, T4): T5|function(T4): T5|function(T1, T4): T5|function(T2, T4): T5|function(T1, T2, T4): T5|function(): T5|function(T1): T5|function(T2): T5|function(T1, T2): T5|function(T3): T5|function(T1, T3): T5|function(T2, T3): T5|function(T1, T2, T3): T5|function(T2, T3, T4, T5): T6|function(T3, T4, T5): T6|function(T1, T3, T4, T5): T6|function(T4, T5): T6|function(T1, T4, T5): T6|function(T2, T4, T5): T6|function(T1, T2, T4, T5): T6|function(T5): T6|function(T1, T5): T6|function(T2, T5): T6|function(T1, T2, T5): T6|function(T3, T5): T6|function(T1, T3, T5): T6|function(T2, T3, T5): T6|function(T1, T2, T3, T5): T6|function(): T6|function(T1): T6|function(T2): T6|function(T1, T2): T6|function(T3): T6|function(T1, T3): T6|function(T2, T3): T6|function(T1, T2, T3): T6|function(T4): T6|function(T1, T4): T6|function(T2, T4): T6|function(T1, T2, T4): T6|function(T3, T4): T6|function(T1, T3, T4): T6|function(T2, T3, T4): T6|function(T1, T2, T3, T4): T6|function(T2, T3, T4, T5, T6): T7|function(T3, T4, T5, T6): T7|function(T1, T3, T4, T5, T6): T7|function(T4, T5, T6): T7|function(T1, T4, T5, T6): T7|function(T2, T4, T5, T6): T7|function(T1, T2, T4, T5, T6): T7|function(T5, T6): T7|function(T1, T5, T6): T7|function(T2, T5, T6): T7|function(T1, T2, T5, T6): T7|function(T3, T5, T6): T7|function(T1, T3, T5, T6): T7|function(T2, T3, T5, T6): T7|function(T1, T2, T3, T5, T6): T7|function(T6): T7|function(T1, T6): T7|function(T2, T6): T7|function(T1, T2, T6): T7|function(T3, T6): T7|function(T1, T3, T6): T7|function(T2, T3, T6): T7|function(T1, T2, T3, T6): T7|function(T4, T6): T7|function(T1, T4, T6): T7|function(T2, T4, T6): T7|function(T1, T2, T4, T6): T7|function(T3, T4, T6): T7|function(T1, T3, T4, T6): T7|function(T2, T3, T4, T6): T7|function(T1, T2, T3, T4, T6): T7|function(): T7|function(T1): T7|function(T2): T7|function(T1, T2): T7|function(T3): T7|function(T1, T3): T7|function(T2, T3): T7|function(T1, T2, T3): T7|function(T4): T7|function(T1, T4): T7|function(T2, T4): T7|function(T1, T2, T4): T7|function(T3, T4): T7|function(T1, T3, T4): T7|function(T2, T3, T4): T7|function(T1, T2, T3, T4): T7|function(T5): T7|function(T1, T5): T7|function(T2, T5): T7|function(T1, T2, T5): T7|function(T3, T5): T7|function(T1, T3, T5): T7|function(T2, T3, T5): T7|function(T1, T2, T3, T5): T7|function(T4, T5): T7|function(T1, T4, T5): T7|function(T2, T4, T5): T7|function(T1, T2, T4, T5): T7|function(T3, T4, T5): T7|function(T1, T3, T4, T5): T7|function(T2, T3, T4, T5): T7|function(T1, T2, T3, T4, T5): T7|function(T2, T3, T4, T5, T6, T7): T8|function(T3, T4, T5, T6, T7): T8|function(T1, T3, T4, T5, T6, T7): T8|function(T4, T5, T6, T7): T8|function(T1, T4, T5, T6, T7): T8|function(T2, T4, T5, T6, T7): T8|function(T1, T2, T4, T5, T6, T7): T8|function(T5, T6, T7): T8|function(T1, T5, T6, T7): T8|function(T2, T5, T6, T7): T8|function(T1, T2, T5, T6, T7): T8|function(T3, T5, T6, T7): T8|function(T1, T3, T5, T6, T7): T8|function(T2, T3, T5, T6, T7): T8|function(T1, T2, T3, T5, T6, T7): T8|function(T6, T7): T8|function(T1, T6, T7): T8|function(T2, T6, T7): T8|function(T1, T2, T6, T7): T8|function(T3, T6, T7): T8|function(T1, T3, T6, T7): T8|function(T2, T3, T6, T7): T8|function(T1, T2, T3, T6, T7): T8|function(T4, T6, T7): T8|function(T1, T4, T6, T7): T8|function(T2, T4, T6, T7): T8|function(T1, T2, T4, T6, T7): T8|function(T3, T4, T6, T7): T8|function(T1, T3, T4, T6, T7): T8|function(T2, T3, T4, T6, T7): T8|function(T1, T2, T3, T4, T6, T7): T8|function(T7): T8|function(T1, T7): T8|function(T2, T7): T8|function(T1, T2, T7): T8|function(T3, T7): T8|function(T1, T3, T7): T8|function(T2, T3, T7): T8|function(T1, T2, T3, T7): T8|function(T4, T7): T8|function(T1, T4, T7): T8|function(T2, T4, T7): T8|function(T1, T2, T4, T7): T8|function(T3, T4, T7): T8|function(T1, T3, T4, T7): T8|function(T2, T3, T4, T7): T8|function(T1, T2, T3, T4, T7): T8|function(T5, T7): T8|function(T1, T5, T7): T8|function(T2, T5, T7): T8|function(T1, T2, T5, T7): T8|function(T3, T5, T7): T8|function(T1, T3, T5, T7): T8|function(T2, T3, T5, T7): T8|function(T1, T2, T3, T5, T7): T8|function(T4, T5, T7): T8|function(T1, T4, T5, T7): T8|function(T2, T4, T5, T7): T8|function(T1, T2, T4, T5, T7): T8|function(T3, T4, T5, T7): T8|function(T1, T3, T4, T5, T7): T8|function(T2, T3, T4, T5, T7): T8|function(T1, T2, T3, T4, T5, T7): T8|function(): T8|function(T1): T8|function(T2): T8|function(T1, T2): T8|function(T3): T8|function(T1, T3): T8|function(T2, T3): T8|function(T1, T2, T3): T8|function(T4): T8|function(T1, T4): T8|function(T2, T4): T8|function(T1, T2, T4): T8|function(T3, T4): T8|function(T1, T3, T4): T8|function(T2, T3, T4): T8|function(T1, T2, T3, T4): T8|function(T5): T8|function(T1, T5): T8|function(T2, T5): T8|function(T1, T2, T5): T8|function(T3, T5): T8|function(T1, T3, T5): T8|function(T2, T3, T5): T8|function(T1, T2, T3, T5): T8|function(T4, T5): T8|function(T1, T4, T5): T8|function(T2, T4, T5): T8|function(T1, T2, T4, T5): T8|function(T3, T4, T5): T8|function(T1, T3, T4, T5): T8|function(T2, T3, T4, T5): T8|function(T1, T2, T3, T4, T5): T8|function(T6): T8|function(T1, T6): T8|function(T2, T6): T8|function(T1, T2, T6): T8|function(T3, T6): T8|function(T1, T3, T6): T8|function(T2, T3, T6): T8|function(T1, T2, T3, T6): T8|function(T4, T6): T8|function(T1, T4, T6): T8|function(T2, T4, T6): T8|function(T1, T2, T4, T6): T8|function(T3, T4, T6): T8|function(T1, T3, T4, T6): T8|function(T2, T3, T4, T6): T8|function(T1, T2, T3, T4, T6): T8|function(T5, T6): T8|function(T1, T5, T6): T8|function(T2, T5, T6): T8|function(T1, T2, T5, T6): T8|function(T3, T5, T6): T8|function(T1, T3, T5, T6): T8|function(T2, T3, T5, T6): T8|function(T1, T2, T3, T5, T6): T8|function(T4, T5, T6): T8|function(T1, T4, T5, T6): T8|function(T2, T4, T5, T6): T8|function(T1, T2, T4, T5, T6): T8|function(T3, T4, T5, T6): T8|function(T1, T3, T4, T5, T6): T8|function(T2, T3, T4, T5, T6): T8|function(T1, T2, T3, T4, T5, T6): T8} `fn` with partially filled in arguments.
 * 
 */
_.UnderscoreStatic.prototype.partial = function(fn, p1_or_stub1, p2_or_stub2, p3_or_stub3, p4_or_stub4, p5_or_stub5, p6_or_stub6, p7) {};

/**
 * Memoizes a given function by caching the computed result. Useful for speeding up slow-running computations.
 * If passed an optional hashFunction, it will be used to compute the hash key for storing the result, based
 * on the arguments to the original function. The default hashFunction just uses the first argument to the
 * memoized function as the key.
 * @param {!Function} fn Computationally expensive function that will now memoized results.
 * @param {function(!Array<?>): string=} hashFn Hash function for storing the result of `fn`.
 * @return {!Function} Memoized version of `fn`.
 * 
 */
_.UnderscoreStatic.prototype.memoize = function(fn, hashFn) {};

/**
 * Much like setTimeout, invokes function after wait milliseconds. If you pass the optional arguments,
 * they will be forwarded on to the function when it is invoked.
 * \@arguments Additional arguments to pass to `fn`.
 * 
 * @see _delay
 * 
 * @param {!Function} func Function to delay `waitMS` amount of ms.
 * @param {...number|?} wait_or_args The amount of milliseconds to delay `fn`.
 * @return {?}
 */
_.UnderscoreStatic.prototype.delay = function(func, wait_or_args) {};

/**
 * Defers invoking the function until the current call stack has cleared, similar to using setTimeout
 * with a delay of 0. Useful for performing expensive computations or HTML rendering in chunks without
 * blocking the UI thread from updating. If you pass the optional arguments, they will be forwarded on
 * to the function when it is invoked.
 * @param {!Function} fn The function to defer.
 * @param {...?} args
 * @return {void}
 */
_.UnderscoreStatic.prototype.defer = function(fn, args) {};

/**
 * Creates and returns a new, throttled version of the passed function, that, when invoked repeatedly,
 * will only actually call the original function at most once per every wait milliseconds. Useful for
 * rate-limiting events that occur faster than you can keep up with.
 * By default, throttle will execute the function as soon as you call it for the first time, and,
 * if you call it again any number of times during the wait period, as soon as that period is over.
 * If you'd like to disable the leading-edge call, pass {leading: false}, and if you'd like to disable
 * the execution on the trailing-edge, pass {trailing: false}.
 * @template T
 * @param {T} func Function to throttle `waitMS` ms.
 * @param {number} wait The number of milliseconds to wait before `fn` can be invoked again.
 * @param {!_.ThrottleSettings=} options Allows for disabling execution of the throttled function on either the leading or trailing edge.
 * @return {?} `fn` with a throttle of `wait`.
 * 
 */
_.UnderscoreStatic.prototype.throttle = function(func, wait, options) {};

/**
 * Creates and returns a new debounced version of the passed function that will postpone its execution
 * until after wait milliseconds have elapsed since the last time it was invoked. Useful for implementing
 * behavior that should only happen after the input has stopped arriving. For example: rendering a preview
 * of a Markdown comment, recalculating a layout after the window has stopped being resized, and so on.
 * 
 * Pass true for the immediate parameter to cause debounce to trigger the function on the leading instead
 * of the trailing edge of the wait interval. Useful in circumstances like preventing accidental double
 * -clicks on a "submit" button from firing a second time.
 * @template T
 * @param {T} fn Function to debounce `waitMS` ms.
 * @param {number} wait The number of milliseconds to wait before `fn` can be invoked again.
 * @param {boolean=} immediate True if `fn` should be invoked on the leading edge of `waitMS` instead of the trailing edge.
 * @return {?} Debounced version of `fn` that waits `wait` ms when invoked.
 * 
 */
_.UnderscoreStatic.prototype.debounce = function(fn, wait, immediate) {};

/**
 * Creates a version of the function that can only be called one time. Repeated calls to the modified
 * function will have no effect, returning the value from the original call. Useful for initialization
 * functions, instead of having to set a boolean flag and then check it later.
 * @template T
 * @param {T} fn Function to only execute once.
 * @return {T} Copy of `fn` that can only be invoked once.
 * 
 */
_.UnderscoreStatic.prototype.once = function(fn) {};

/**
 * Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)
 * This accumulates the arguments passed into an array, after a given index.
 * 
 * @param {!Function} func
 * @param {number=} starIndex
 * @return {!Function}
 */
_.UnderscoreStatic.prototype.restArgs = function(func, starIndex) {};

/**
 * Creates a version of the function that will only be run after first being called count times. Useful
 * for grouping asynchronous responses, where you want to be sure that all the async calls have finished,
 * before proceeding.
 * @param {number} count
 * @param {!Function} fn
 * @return {!Function} Copy of `fn` that will not execute until it is invoked `count` times.
 * 
 */
_.UnderscoreStatic.prototype.after = function(count, fn) {};

/**
 * Creates a version of the function that can be called no more than count times.  The result of
 * the last function call is memoized and returned when count has been reached.
 * @param {number} count
 * @param {!Function} fn
 * @return {!Function} Copy of `fn` that can only be called `count` times.
 * 
 */
_.UnderscoreStatic.prototype.before = function(count, fn) {};

/**
 * Wraps the first function inside of the wrapper function, passing it as the first argument. This allows
 * the wrapper to execute code before and after the function runs, adjust the arguments, and execute it
 * conditionally.
 * @param {!Function} fn Function to wrap.
 * @param {function(!Function, !Array<?>): ?} wrapper The function that will wrap `fn`.
 * @return {!Function} Wrapped version of `fn.
 * 
 */
_.UnderscoreStatic.prototype.wrap = function(fn, wrapper) {};

/**
 * Returns a negated version of the pass-in predicate.
 * @param {function(!Array<?>): boolean} predicate
 * @return {function(!Array<?>): boolean} (...args: any[]) => boolean
 * 
 */
_.UnderscoreStatic.prototype.negate = function(predicate) {};

/**
 * Returns the composition of a list of functions, where each function consumes the return value of the
 * function that follows. In math terms, composing the functions f(), g(), and h() produces f(g(h())).
 * @param {...!Function} functions List of functions to compose.
 * @return {!Function} Composition of `functions`.
 * 
 */
_.UnderscoreStatic.prototype.compose = function(functions) {};

/**
 * Retrieve all the names of the object's properties.
 * @param {?} object Retrieve the key or property names from this object.
 * @return {!Array<string>} List of all the property names on `object`.
 * 
 */
_.UnderscoreStatic.prototype.keys = function(object) {};

/**
 * Retrieve all the names of object's own and inherited properties.
 * @param {?} object Retrieve the key or property names from this object.
 * @return {!Array<string>} List of all the property names on `object`.
 * 
 */
_.UnderscoreStatic.prototype.allKeys = function(object) {};

/**
 * Return all of the values of the object's properties.
 * Return all of the values of the object's properties.
 * @template T
 * @param {!_.Dictionary<T>|?} object Retrieve the values of all the properties on this object.
 * @return {!Array<T>|!Array<?>} List of all the values on `object`.
 * 
 */
_.UnderscoreStatic.prototype.values = function(object) {};

/**
 * Like map, but for objects. Transform the value of each property in turn.
 * Like map, but for objects. Transform the value of each property in turn.
 * Like map, but for objects. Retrieves a property from each entry in the object, as if by _.property
 * @template T, U
 * @param {!_.Dictionary<T>|?} object The object to transform
 * @param {function(T, string, !_.Dictionary<T>): U|function(?, string, ?): T|string} iteratee The function that transforms property values / The function that tranforms property values / The property name to retrieve
 * @param {?=} context The optional context (value of `this`) to bind to
 * @return {!_.Dictionary<U>|!_.Dictionary<T>|!_.Dictionary<?>} a new _.Dictionary of property values
 */
_.UnderscoreStatic.prototype.mapObject = function(object, iteratee, context) {};

/**
 * Convert an object into a list of [key, value] pairs.
 * @param {?} object Convert this object to a list of [key, value] pairs.
 * @return {!Array<!Array<?>>} List of [key, value] pairs on `object`.
 * 
 */
_.UnderscoreStatic.prototype.pairs = function(object) {};

/**
 * Returns a copy of the object where the keys have become the values and the values the keys.
 * For this to work, all of your object's values should be unique and string serializable.
 * @param {?} object Object to invert key/value pairs.
 * @return {?} An inverted key/value paired version of `object`.
 * 
 */
_.UnderscoreStatic.prototype.invert = function(object) {};

/**
 * Returns a sorted list of the names of every method in an object - that is to say,
 * the name of every function property of the object.
 * @param {?} object Object to pluck all function property names from.
 * @return {!Array<string>} List of all the function names on `object`.
 * 
 */
_.UnderscoreStatic.prototype.functions = function(object) {};

/**
 * @see _functions
 * 
 * @param {?} object
 * @return {!Array<string>}
 */
_.UnderscoreStatic.prototype.methods = function(object) {};

/**
 * Copy all of the properties in the source objects over to the destination object, and return
 * the destination object. It's in-order, so the last source will override properties of the
 * same name in previous arguments.
 * @param {?} destination Object to extend all the properties from `sources`.
 * @param {...?} sources Extends `destination` with all properties from these source objects.
 * @return {?} `destination` extended with all the properties from the `sources` objects.
 * 
 */
_.UnderscoreStatic.prototype.extend = function(destination, sources) {};

/**
 * Like extend, but only copies own properties over to the destination object. (alias: assign)
 * @param {?} destination
 * @param {...?} source
 * @return {?}
 */
_.UnderscoreStatic.prototype.extendOwn = function(destination, source) {};

/**
 * Like extend, but only copies own properties over to the destination object. (alias: extendOwn)
 * @param {?} destination
 * @param {...?} source
 * @return {?}
 */
_.UnderscoreStatic.prototype.assign = function(destination, source) {};

/**
 * Returns the first key on an object that passes a predicate test.
 * @template T
 * @param {!_.Dictionary<T>} obj the object to search in
 * @param {!_.ObjectIterator<T, boolean>} predicate Predicate function.
 * @param {?=} context `this` object in `iterator`, optional.
 * @return {string}
 */
_.UnderscoreStatic.prototype.findKey = function(obj, predicate, context) {};

/**
 * Return a copy of the object, filtered to only have values for the whitelisted keys
 * (or array of valid keys).
 * \@keys The key/value pairs to keep on `object`.
 * @see _.pick
 * 
 * @param {?} object Object to strip unwanted key/value pairs.
 * @param {...?|function(?, ?, ?): ?} keys_or_fn
 * @return {?} Copy of `object` with only the `keys` properties.
 * 
 */
_.UnderscoreStatic.prototype.pick = function(object, keys_or_fn) {};

/**
 * Return a copy of the object, filtered to omit the blacklisted keys (or array of keys).
 * @see _.omit
 * 
 * @see _.omit
 * 
 * @param {?} object Object to strip unwanted key/value pairs.
 * @param {...string|!Array<string>|!Function} keys_or_iteratee The key/value pairs to remove on `object`.
 * @return {?} Copy of `object` without the `keys` properties.
 * 
 */
_.UnderscoreStatic.prototype.omit = function(object, keys_or_iteratee) {};

/**
 * Fill in null and undefined properties in object with values from the defaults objects,
 * and return the object. As soon as the property is filled, further defaults will have no effect.
 * @param {?} object Fill this object with default values.
 * @param {...?} defaults The default values to add to `object`.
 * @return {?} `object` with added `defaults` values.
 * 
 */
_.UnderscoreStatic.prototype.defaults = function(object, defaults) {};

/**
 * Creates an object that inherits from the given prototype object.
 * If additional properties are provided then they will be added to the
 * created object.
 * @param {?} prototype The prototype that the returned object will inherit from.
 * @param {!Object=} props Additional props added to the returned object.
 * 
 * @return {?}
 */
_.UnderscoreStatic.prototype.create = function(prototype, props) {};

/**
 * Create a shallow-copied clone of the object.
 * Any nested objects or arrays will be copied by reference, not duplicated.
 * @template T
 * @param {T} object Object to clone.
 * @return {T} Copy of `object`.
 * 
 */
_.UnderscoreStatic.prototype.clone = function(object) {};

/**
 * Invokes interceptor with the object, and then returns object. The primary purpose of this method
 * is to "tap into" a method chain, in order to perform operations on intermediate results within the chain.
 * @template T
 * @param {T} object Argument to `interceptor`.
 * @param {!Function} intercepter The function to modify `object` before continuing the method chain.
 * @return {T} Modified `object`.
 * 
 */
_.UnderscoreStatic.prototype.tap = function(object, intercepter) {};

/**
 * Does the object contain the given key? Identical to object.hasOwnProperty(key), but uses a safe
 * reference to the hasOwnProperty function, in case it's been overridden accidentally.
 * @param {?} object Object to check for `key`.
 * @param {string} key The key to check for on `object`.
 * @return {boolean} True if `key` is a property on `object`, otherwise false.
 * 
 */
_.UnderscoreStatic.prototype.has = function(object, key) {};

/**
 * Returns a predicate function that will tell you if a passed in object contains all of the key/value properties present in attrs.
 * @template T
 * @param {T} attrs Object with key values pair
 * @return {!_.ListIterator<T, boolean>} Predicate function
 * 
 */
_.UnderscoreStatic.prototype.matches = function(attrs) {};

/**
 * Returns a predicate function that will tell you if a passed in object contains all of the key/value properties present in attrs.
 * @see _.matches
 * @template T
 * @param {T} attrs Object with key values pair
 * @return {!_.ListIterator<T, boolean>} Predicate function
 * 
 */
_.UnderscoreStatic.prototype.matcher = function(attrs) {};

/**
 * Returns a function that will itself return the key property of any passed-in object.
 * @param {string} key Property of the object.
 * @return {function(!Object): ?} Function which accept an object an returns the value of key in that object.
 * 
 */
_.UnderscoreStatic.prototype.property = function(key) {};

/**
 * Returns a function that will itself return the value of a object key property.
 * @param {!Object} object
 * @return {function(string): ?} Function which accept a key property in `object` and returns its value.
 * 
 */
_.UnderscoreStatic.prototype.propertyOf = function(object) {};

/**
 * Performs an optimized deep comparison between the two objects,
 * to determine if they should be considered equal.
 * @param {?} object Compare to `other`.
 * @param {?} other Compare to `object`.
 * @return {boolean} True if `object` is equal to `other`.
 * 
 */
_.UnderscoreStatic.prototype.isEqual = function(object, other) {};

/**
 * Returns true if object contains no values.
 * @param {?} object Check if this object has no properties or values.
 * @return {boolean} True if `object` is empty.
 * 
 */
_.UnderscoreStatic.prototype.isEmpty = function(object) {};

/**
 * Returns true if the keys and values in `properties` matches with the `object` properties.
 * @param {?} object Object to be compared with `properties`.
 * @param {?} properties Properties be compared with `object`
 * @return {boolean} True if `object` has matching keys and values, otherwise false.
 * 
 */
_.UnderscoreStatic.prototype.isMatch = function(object, properties) {};

/**
 * Returns true if object is a DOM element.
 * @param {?} object Check if this object is a DOM element.
 * @return {boolean} True if `object` is a DOM element, otherwise false.
 * 
 */
_.UnderscoreStatic.prototype.isElement = function(object) {};

/**
 * Returns true if object is an Array.
 * Returns true if object is an Array.
 * @template T
 * @param {?} object Check if this object is an Array.
 * @return {boolean} True if `object` is an Array, otherwise false.
 * 
 */
_.UnderscoreStatic.prototype.isArray = function(object) {};

/**
 * Returns true if object is a Symbol.
 * @param {?} object Check if this object is a Symbol.
 * @return {boolean} True if `object` is a Symbol, otherwise false.
 * 
 */
_.UnderscoreStatic.prototype.isSymbol = function(object) {};

/**
 * Returns true if value is an Object. Note that JavaScript arrays and functions are objects,
 * while (normal) strings and numbers are not.
 * @param {?} object Check if this object is an Object.
 * @return {boolean} True of `object` is an Object, otherwise false.
 * 
 */
_.UnderscoreStatic.prototype.isObject = function(object) {};

/**
 * Returns true if object is an Arguments object.
 * @param {?} object Check if this object is an Arguments object.
 * @return {boolean} True if `object` is an Arguments object, otherwise false.
 * 
 */
_.UnderscoreStatic.prototype.isArguments = function(object) {};

/**
 * Returns true if object is a Function.
 * @param {?} object Check if this object is a Function.
 * @return {boolean} True if `object` is a Function, otherwise false.
 * 
 */
_.UnderscoreStatic.prototype.isFunction = function(object) {};

/**
 * Returns true if object inherits from an Error.
 * @param {?} object Check if this object is an Error.
 * @return {boolean} True if `object` is a Error, otherwise false.
 * 
 */
_.UnderscoreStatic.prototype.isError = function(object) {};

/**
 * Returns true if object is a String.
 * @param {?} object Check if this object is a String.
 * @return {boolean} True if `object` is a String, otherwise false.
 * 
 */
_.UnderscoreStatic.prototype.isString = function(object) {};

/**
 * Returns true if object is a Number (including NaN).
 * @param {?} object Check if this object is a Number.
 * @return {boolean} True if `object` is a Number, otherwise false.
 * 
 */
_.UnderscoreStatic.prototype.isNumber = function(object) {};

/**
 * Returns true if object is a finite Number.
 * @param {?} object Check if this object is a finite Number.
 * @return {boolean} True if `object` is a finite Number.
 * 
 */
_.UnderscoreStatic.prototype.isFinite = function(object) {};

/**
 * Returns true if object is either true or false.
 * @param {?} object Check if this object is a bool.
 * @return {boolean} True if `object` is a bool, otherwise false.
 * 
 */
_.UnderscoreStatic.prototype.isBoolean = function(object) {};

/**
 * Returns true if object is a Date.
 * @param {?} object Check if this object is a Date.
 * @return {boolean} True if `object` is a Date, otherwise false.
 * 
 */
_.UnderscoreStatic.prototype.isDate = function(object) {};

/**
 * Returns true if object is a RegExp.
 * @param {?} object Check if this object is a RegExp.
 * @return {boolean} True if `object` is a RegExp, otherwise false.
 * 
 */
_.UnderscoreStatic.prototype.isRegExp = function(object) {};

/**
 * Returns true if object is NaN.
 * Note: this is not the same as the native isNaN function,
 * which will also return true if the variable is undefined.
 * @param {?} object Check if this object is NaN.
 * @return {boolean} True if `object` is NaN, otherwise false.
 * 
 */
_.UnderscoreStatic.prototype.isNaN = function(object) {};

/**
 * Returns true if the value of object is null.
 * @param {?} object Check if this object is null.
 * @return {boolean} True if `object` is null, otherwise false.
 * 
 */
_.UnderscoreStatic.prototype.isNull = function(object) {};

/**
 * Returns true if value is undefined.
 * @param {?} value
 * @return {boolean} True if `object` is undefined, otherwise false.
 * 
 */
_.UnderscoreStatic.prototype.isUndefined = function(value) {};

/**
 * Give control of the "_" variable back to its previous owner.
 * Returns a reference to the Underscore object.
 * @return {?} Underscore object reference.
 * 
 */
_.UnderscoreStatic.prototype.noConflict = function() {};

/**
 * Returns the same value that is used as the argument. In math: f(x) = x
 * This function looks useless, but is used throughout Underscore as a default iterator.
 * @template T
 * @param {T} value Identity of this object.
 * @return {T} `value`.
 * 
 */
_.UnderscoreStatic.prototype.identity = function(value) {};

/**
 * Creates a function that returns the same value that is used as the argument of _.constant
 * @template T
 * @param {T} value Identity of this object.
 * @return {function(): T} Function that return value.
 * 
 */
_.UnderscoreStatic.prototype.constant = function(value) {};

/**
 * Returns undefined irrespective of the arguments passed to it.  Useful as the default
 * for optional callback arguments.
 * Note there is no way to indicate a 'undefined' return, so it is currently typed as void.
 * @return {void} undefined
 * 
 */
_.UnderscoreStatic.prototype.noop = function() {};

/**
 * Invokes the given iterator function n times.
 * Each invocation of iterator is called with an index argument
 * @template TResult
 * @param {number} n Number of times to invoke `iterator`.
 * @param {function(number): TResult} iterator Function iterator to invoke `n` times.
 * @param {?=} context `this` object in `iterator`, optional.
 * 
 * @return {!Array<TResult>}
 */
_.UnderscoreStatic.prototype.times = function(n, iterator, context) {};

/**
 * Returns a random integer between min and max, inclusive. If you only pass one argument,
 * it will return a number between 0 and that number.
 * @see _.random
 * @param {number} max_or_min The maximum random number. / The minimum random number.
 * @param {number=} max
 * @return {number} A random number between 0 and `max`.
 *  / A random number between `min` and `max`.
 * 
 */
_.UnderscoreStatic.prototype.random = function(max_or_min, max) {};

/**
 * Allows you to extend Underscore with your own utility functions. Pass a hash of
 * {name: function} definitions to have your functions added to the Underscore object,
 * as well as the OOP wrapper.
 * @param {?} object Mixin object containing key/function pairs to add to the Underscore object.
 * 
 * @return {void}
 */
_.UnderscoreStatic.prototype.mixin = function(object) {};

/**
 * A mostly-internal function to generate callbacks that can be applied to each element
 * in a collection, returning the desired result -- either identity, an arbitrary callback,
 * a property matcher, or a propetery accessor.
 * @param {string|!Function|!Object} value
 * @param {?=} context
 * @return {!Function} Callback that can be applied to each element in a collection.
 * 
 */
_.UnderscoreStatic.prototype.iteratee = function(value, context) {};

/**
 * Generate a globally-unique id for client-side models or DOM elements that need one.
 * If prefix is passed, the id will be appended to it. Without prefix, returns an integer.
 * @param {string=} prefix A prefix string to start the unique ID with.
 * @return {string} Unique string ID beginning with `prefix`.
 * 
 */
_.UnderscoreStatic.prototype.uniqueId = function(prefix) {};

/**
 * Escapes a string for insertion into HTML, replacing &, <, >, ", ', and / characters.
 * @param {string} str Raw string to escape.
 * @return {string} `str` HTML escaped.
 * 
 */
_.UnderscoreStatic.prototype.escape = function(str) {};

/**
 * The opposite of escape, replaces &amp;, &lt;, &gt;, &quot;, and &#x27; with their unescaped counterparts.
 * @param {string} str HTML escaped string.
 * @return {string} `str` Raw string.
 * 
 */
_.UnderscoreStatic.prototype.unescape = function(str) {};

/**
 * If the value of the named property is a function then invoke it; otherwise, return it.
 * @param {?} object Object to maybe invoke function `property` on.
 * @param {string} property The function by name to invoke on `object`.
 * @param {?=} defaultValue The value to be returned in case `property` doesn't exist or is undefined.
 * @return {?} The result of invoking the function `property` on `object.
 * 
 */
_.UnderscoreStatic.prototype.result = function(object, property, defaultValue) {};

/**
 * Compiles JavaScript templates into functions that can be evaluated for rendering. Useful
 * for rendering complicated bits of HTML from JSON data sources. Template functions can both
 * interpolate variables, using <%= ... %>, as well as execute arbitrary JavaScript code, with
 * <% ... %>. If you wish to interpolate a value, and have it be HTML-escaped, use <%- ... %> When
 * you evaluate a template function, pass in a data object that has properties corresponding to
 * the template's free variables. If you're writing a one-off, you can pass the data object as
 * the second parameter to template in order to render immediately instead of returning a template
 * function. The settings argument should be a hash containing any _.templateSettings that should
 * be overridden.
 * @param {string} templateString Underscore HTML template.
 * @param {!_.TemplateSettings=} settings Settings to use while compiling.
 * @return {function(!Array<?>): string} Returns the compiled Underscore HTML template.
 * 
 */
_.UnderscoreStatic.prototype.template = function(templateString, settings) {};

/**
 * Returns an integer timestamp for the current time, using the fastest method available in the runtime. Useful for implementing timing/animation functions.
 * 
 * @return {number}
 */
_.UnderscoreStatic.prototype.now = function() {};

/**
 * Returns a wrapped object. Calling methods on this object will continue to return wrapped objects
 * until value() is used.
 * @template T
 * @param {!Array<T>|!_.Dictionary<T>|T} obj Object to chain.
 * @return {!_._Chain<T>} Wrapped `obj`.
 * 
 */
_.UnderscoreStatic.prototype.chain = function(obj) {};
/**
 * @record
 * @struct
 */
_.Underscore = function() {};

/**
 * Wrapped type `any[]`.
 * @see _.each
 * 
 * @see _.each
 * 
 * @param {!_.ListIterator<T, void>|!_.ObjectIterator<T, void>} iterator
 * @param {?=} context
 * @return {!_.List<T>}
 */
_.Underscore.prototype.each = function(iterator, context) {};

/**
 * @see _.each
 * 
 * @see _.each
 * 
 * @param {!_.ListIterator<T, void>|!_.ObjectIterator<T, void>} iterator
 * @param {?=} context
 * @return {!_.List<T>}
 */
_.Underscore.prototype.forEach = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.map
 * 
 * Wrapped type `any[]`.
 * @see _.map
 * 
 * @template TResult
 * @param {!_.ListIterator<T, TResult>|!_.ObjectIterator<T, TResult>} iterator
 * @param {?=} context
 * @return {!Array<TResult>}
 */
_.Underscore.prototype.map = function(iterator, context) {};

/**
 * @see _.map
 * 
 * @see _.map
 * 
 * @template TResult
 * @param {!_.ListIterator<T, TResult>|!_.ObjectIterator<T, TResult>} iterator
 * @param {?=} context
 * @return {!Array<TResult>}
 */
_.Underscore.prototype.collect = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.reduce
 * 
 * @template TResult
 * @param {!_.MemoIterator<T, TResult>} iterator
 * @param {TResult=} memo
 * @param {?=} context
 * @return {TResult}
 */
_.Underscore.prototype.reduce = function(iterator, memo, context) {};

/**
 * @see _.reduce
 * 
 * @template TResult
 * @param {!_.MemoIterator<T, TResult>} iterator
 * @param {TResult=} memo
 * @param {?=} context
 * @return {TResult}
 */
_.Underscore.prototype.inject = function(iterator, memo, context) {};

/**
 * @see _.reduce
 * 
 * @template TResult
 * @param {!_.MemoIterator<T, TResult>} iterator
 * @param {TResult=} memo
 * @param {?=} context
 * @return {TResult}
 */
_.Underscore.prototype.foldl = function(iterator, memo, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.reduceRight
 * 
 * @template TResult
 * @param {!_.MemoIterator<T, TResult>} iterator
 * @param {TResult=} memo
 * @param {?=} context
 * @return {TResult}
 */
_.Underscore.prototype.reduceRight = function(iterator, memo, context) {};

/**
 * @see _.reduceRight
 * 
 * @template TResult
 * @param {!_.MemoIterator<T, TResult>} iterator
 * @param {TResult=} memo
 * @param {?=} context
 * @return {TResult}
 */
_.Underscore.prototype.foldr = function(iterator, memo, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.find
 * 
 * @see _.find
 * 
 * @see _.find
 * 
 * @template T, U
 * @param {(!_.ListIterator<T, boolean>|!_.ObjectIterator<T, boolean>)|U|string} iterator_or_interator
 * @param {?=} context
 * @return {T}
 */
_.Underscore.prototype.find = function(iterator_or_interator, context) {};

/**
 * @see _.find
 * 
 * @see _.find
 * 
 * @see _.find
 * 
 * @template T, U
 * @param {(!_.ListIterator<T, boolean>|!_.ObjectIterator<T, boolean>)|U|string=} iterator_or_interator
 * @param {?=} context
 * @return {T}
 */
_.Underscore.prototype.detect = function(iterator_or_interator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.filter
 * 
 * @param {!_.ListIterator<T, boolean>} iterator
 * @param {?=} context
 * @return {!Array<T>}
 */
_.Underscore.prototype.filter = function(iterator, context) {};

/**
 * @see _.filter
 * 
 * @param {!_.ListIterator<T, boolean>} iterator
 * @param {?=} context
 * @return {!Array<T>}
 */
_.Underscore.prototype.select = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.where
 * 
 * @template U
 * @param {U} properties
 * @return {!Array<T>}
 */
_.Underscore.prototype.where = function(properties) {};

/**
 * Wrapped type `any[]`.
 * @see _.findWhere
 * 
 * @template U
 * @param {U} properties
 * @return {T}
 */
_.Underscore.prototype.findWhere = function(properties) {};

/**
 * Wrapped type `any[]`.
 * @see _.reject
 * 
 * @param {!_.ListIterator<T, boolean>} iterator
 * @param {?=} context
 * @return {!Array<T>}
 */
_.Underscore.prototype.reject = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.all
 * 
 * @param {!_.ListIterator<T, boolean>=} iterator
 * @param {?=} context
 * @return {boolean}
 */
_.Underscore.prototype.all = function(iterator, context) {};

/**
 * @see _.all
 * 
 * @param {!_.ListIterator<T, boolean>=} iterator
 * @param {?=} context
 * @return {boolean}
 */
_.Underscore.prototype.every = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.any
 * 
 * @param {!_.ListIterator<T, boolean>=} iterator
 * @param {?=} context
 * @return {boolean}
 */
_.Underscore.prototype.any = function(iterator, context) {};

/**
 * @see _.any
 * 
 * @param {!_.ListIterator<T, boolean>=} iterator
 * @param {?=} context
 * @return {boolean}
 */
_.Underscore.prototype.some = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.contains
 * 
 * @param {T} value
 * @param {number=} fromIndex
 * @return {boolean}
 */
_.Underscore.prototype.contains = function(value, fromIndex) {};

/**
 * Alias for 'contains'.
 * @see contains
 * 
 * @param {T} value
 * @param {number=} fromIndex
 * @return {boolean}
 */
_.Underscore.prototype.include = function(value, fromIndex) {};

/**
 * Alias for 'contains'.
 * @see contains
 * 
 * @param {T} value
 * @param {number=} fromIndex
 * @return {boolean}
 */
_.Underscore.prototype.includes = function(value, fromIndex) {};

/**
 * Wrapped type `any[]`.
 * @see _.invoke
 * 
 * @param {string} methodName
 * @param {...?} args
 * @return {?}
 */
_.Underscore.prototype.invoke = function(methodName, args) {};

/**
 * Wrapped type `any[]`.
 * @see _.pluck
 * 
 * @param {string} propertyName
 * @return {!Array<?>}
 */
_.Underscore.prototype.pluck = function(propertyName) {};

/**
 * Wrapped type `number[]`.
 * @see _.max
 * 
 * Wrapped type `any[]`.
 * @see _.max
 * 
 * Wrapped type `any[]`.
 * @see _.max
 * 
 * @param {!_.ListIterator<T, number>|!_.ListIterator<T, ?>=} iterator
 * @param {?=} context
 * @return {number|T}
 */
_.Underscore.prototype.max = function(iterator, context) {};

/**
 * Wrapped type `number[]`.
 * @see _.min
 * 
 * Wrapped type `any[]`.
 * @see _.min
 * 
 * Wrapped type `any[]`.
 * @see _.min
 * 
 * @param {!_.ListIterator<T, number>|!_.ListIterator<T, ?>=} iterator
 * @param {?=} context
 * @return {number|T}
 */
_.Underscore.prototype.min = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.sortBy
 * 
 * Wrapped type `any[]`.
 * @see _.sortBy
 * 
 * @param {!_.ListIterator<T, ?>|string=} iterator
 * @param {?=} context
 * @return {!Array<T>}
 */
_.Underscore.prototype.sortBy = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.groupBy
 * 
 * Wrapped type `any[]`.
 * @see _.groupBy
 * 
 * @param {!_.ListIterator<T, ?>|string=} iterator
 * @param {?=} context
 * @return {!_.Dictionary<!_.List<T>>|!_.Dictionary<!Array<T>>}
 */
_.Underscore.prototype.groupBy = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.indexBy
 * 
 * Wrapped type `any[]`.
 * @see _.indexBy
 * 
 * @param {!_.ListIterator<T, ?>|string} iterator
 * @param {?=} context
 * @return {!_.Dictionary<T>}
 */
_.Underscore.prototype.indexBy = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.countBy
 * 
 * Wrapped type `any[]`.
 * @see _.countBy
 * 
 * @param {!_.ListIterator<T, ?>|string=} iterator
 * @param {?=} context
 * @return {!_.Dictionary<number>}
 */
_.Underscore.prototype.countBy = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.shuffle
 * 
 * @return {!Array<T>}
 */
_.Underscore.prototype.shuffle = function() {};

/**
 * Wrapped type `any[]`.
 * @see _.sample
 * 
 * @see _.sample
 * 
 * @template T
 * @param {number=} n
 * @return {!Array<T>|T}
 */
_.Underscore.prototype.sample = function(n) {};

/**
 * Wrapped type `any`.
 * @see _.toArray
 * 
 * @return {!Array<T>}
 */
_.Underscore.prototype.toArray = function() {};

/**
 * Wrapped type `any`.
 * @see _.size
 * 
 * @return {number}
 */
_.Underscore.prototype.size = function() {};

/**
 * Wrapped type `any[]`.
 * @see _.first
 * 
 * Wrapped type `any[]`.
 * @see _.first
 * 
 * @param {number=} n
 * @return {T|!Array<T>}
 */
_.Underscore.prototype.first = function(n) {};

/**
 * @see _.first
 * 
 * @see _.first
 * 
 * @param {number=} n
 * @return {T|!Array<T>}
 */
_.Underscore.prototype.head = function(n) {};

/**
 * @see _.first
 * 
 * @see _.first
 * 
 * @param {number=} n
 * @return {T|!Array<T>}
 */
_.Underscore.prototype.take = function(n) {};

/**
 * Wrapped type `any[]`.
 * @see _.initial
 * 
 * @param {number=} n
 * @return {!Array<T>}
 */
_.Underscore.prototype.initial = function(n) {};

/**
 * Wrapped type `any[]`.
 * @see _.last
 * 
 * Wrapped type `any[]`.
 * @see _.last
 * 
 * @param {number=} n
 * @return {T|!Array<T>}
 */
_.Underscore.prototype.last = function(n) {};

/**
 * Wrapped type `any[]`.
 * @see _.rest
 * 
 * @param {number=} n
 * @return {!Array<T>}
 */
_.Underscore.prototype.rest = function(n) {};

/**
 * @see _.rest
 * 
 * @param {number=} n
 * @return {!Array<T>}
 */
_.Underscore.prototype.tail = function(n) {};

/**
 * @see _.rest
 * 
 * @param {number=} n
 * @return {!Array<T>}
 */
_.Underscore.prototype.drop = function(n) {};

/**
 * Wrapped type `any[]`.
 * @see _.compact
 * 
 * @return {!Array<T>}
 */
_.Underscore.prototype.compact = function() {};

/**
 * Wrapped type `any`.
 * @see _.flatten
 * 
 * @param {boolean=} shallow
 * @return {!Array<?>}
 */
_.Underscore.prototype.flatten = function(shallow) {};

/**
 * Wrapped type `any[]`.
 * @see _.without
 * 
 * @param {...T} values
 * @return {!Array<T>}
 */
_.Underscore.prototype.without = function(values) {};

/**
 * Wrapped type `any[]`.
 * @see _.partition
 * 
 * @param {!_.ListIterator<T, boolean>} iterator
 * @param {?=} context
 * @return {!Array<!Array<T>>}
 */
_.Underscore.prototype.partition = function(iterator, context) {};

/**
 * Wrapped type `any[][]`.
 * @see _.union
 * 
 * @param {...!_.List<T>} arrays
 * @return {!Array<T>}
 */
_.Underscore.prototype.union = function(arrays) {};

/**
 * Wrapped type `any[][]`.
 * @see _.intersection
 * 
 * @param {...!_.List<T>} arrays
 * @return {!Array<T>}
 */
_.Underscore.prototype.intersection = function(arrays) {};

/**
 * Wrapped type `any[]`.
 * @see _.difference
 * 
 * @param {...!_.List<T>} others
 * @return {!Array<T>}
 */
_.Underscore.prototype.difference = function(others) {};

/**
 * Wrapped type `any[]`.
 * @see _.uniq
 * 
 * Wrapped type `any[]`.
 * @see _.uniq
 * 
 * @template TSort
 * @param {boolean|!_.ListIterator<T, TSort>=} isSorted_or_iterator
 * @param {!_.ListIterator<T, ?>|?=} iterator_or_context
 * @return {!Array<T>}
 */
_.Underscore.prototype.uniq = function(isSorted_or_iterator, iterator_or_context) {};

/**
 * @see _.uniq
 * 
 * @see _.uniq
 * 
 * @template TSort
 * @param {boolean|!_.ListIterator<T, TSort>=} isSorted_or_iterator
 * @param {!_.ListIterator<T, TSort>|?=} iterator_or_context
 * @return {!Array<T>}
 */
_.Underscore.prototype.unique = function(isSorted_or_iterator, iterator_or_context) {};

/**
 * Wrapped type `any[][]`.
 * @see _.zip
 * 
 * @param {...!Array<?>} arrays
 * @return {!Array<!Array<?>>}
 */
_.Underscore.prototype.zip = function(arrays) {};

/**
 * Wrapped type `any[][]`.
 * @see _.unzip
 * 
 * @param {...!Array<?>} arrays
 * @return {!Array<!Array<?>>}
 */
_.Underscore.prototype.unzip = function(arrays) {};

/**
 * Wrapped type `any[][]`.
 * @see _.object
 * 
 * @see _.object
 * 
 * @param {...!Array<?>|?=} keyValuePairs_or_values
 * @return {?}
 */
_.Underscore.prototype.object = function(keyValuePairs_or_values) {};

/**
 * Wrapped type `any[]`.
 * @see _.indexOf
 * 
 * @see _.indexOf
 * 
 * @param {T} value
 * @param {boolean|number=} isSorted_or_startFrom
 * @return {number}
 */
_.Underscore.prototype.indexOf = function(value, isSorted_or_startFrom) {};

/**
 * Wrapped type `any[]`.
 * @see _.lastIndexOf
 * 
 * @param {T} value
 * @param {number=} from
 * @return {number}
 */
_.Underscore.prototype.lastIndexOf = function(value, from) {};

/**
 * @see _.findIndex
 * 
 * @template T
 * @param {!_.List<T>} array
 * @param {(!Object|!_.ListIterator<T, boolean>)} predicate
 * @param {?=} context
 * @return {number}
 */
_.Underscore.prototype.findIndex = function(array, predicate, context) {};

/**
 * @see _.findLastIndex
 * 
 * @template T
 * @param {!_.List<T>} array
 * @param {(!Object|!_.ListIterator<T, boolean>)} predicate
 * @param {?=} context
 * @return {number}
 */
_.Underscore.prototype.findLastIndex = function(array, predicate, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.sortedIndex
 * 
 * @param {T} value
 * @param {function(T): ?=} iterator
 * @param {?=} context
 * @return {number}
 */
_.Underscore.prototype.sortedIndex = function(value, iterator, context) {};

/**
 * Wrapped type `number`.
 * @see _.range
 * 
 * Wrapped type `number`.
 * @see _.range
 * 
 * @param {number=} stop
 * @param {number=} step
 * @return {!Array<number>}
 */
_.Underscore.prototype.range = function(stop, step) {};

/**
 * Wrapped type any[][].
 * @see _.chunk
 * 
 * @return {!Array<!Array<?>>}
 */
_.Underscore.prototype.chunk = function() {};

/**
 * Wrapped type `Function`.
 * @see _.bind
 * 
 * @param {?} object
 * @param {...?} args
 * @return {!Function}
 */
_.Underscore.prototype.bind = function(object, args) {};

/**
 * Wrapped type `object`.
 * @see _.bindAll
 * 
 * @param {...string} methodNames
 * @return {?}
 */
_.Underscore.prototype.bindAll = function(methodNames) {};

/**
 * Wrapped type `Function`.
 * @see _.partial
 * 
 * @param {...?} args
 * @return {!Function}
 */
_.Underscore.prototype.partial = function(args) {};

/**
 * Wrapped type `Function`.
 * @see _.memoize
 * 
 * @param {function(?): string=} hashFn
 * @return {!Function}
 */
_.Underscore.prototype.memoize = function(hashFn) {};

/**
 * Wrapped type `Function`.
 * @see _.defer
 * 
 * @param {...?} args
 * @return {void}
 */
_.Underscore.prototype.defer = function(args) {};

/**
 * Wrapped type `Function`.
 * @see _.delay
 * 
 * @see _.delay
 * 
 * @param {...number|?} wait_or_args
 * @return {?}
 */
_.Underscore.prototype.delay = function(wait_or_args) {};

/**
 * Wrapped type `Function`.
 * @see _.throttle
 * 
 * @param {number} wait
 * @param {!_.ThrottleSettings=} options
 * @return {?}
 */
_.Underscore.prototype.throttle = function(wait, options) {};

/**
 * Wrapped type `Function`.
 * @see _.debounce
 * 
 * @param {number} wait
 * @param {boolean=} immediate
 * @return {?}
 */
_.Underscore.prototype.debounce = function(wait, immediate) {};

/**
 * Wrapped type `Function`.
 * @see _.once
 * 
 * @return {!Function}
 */
_.Underscore.prototype.once = function() {};

/**
 * Wrapped type `Function`.
 * @see _.once
 * 
 * @param {number=} starIndex
 * @return {!Function}
 */
_.Underscore.prototype.restArgs = function(starIndex) {};

/**
 * Wrapped type `number`.
 * @see _.after
 * 
 * @param {!Function} fn
 * @return {!Function}
 */
_.Underscore.prototype.after = function(fn) {};

/**
 * Wrapped type `number`.
 * @see _.before
 * 
 * @param {!Function} fn
 * @return {!Function}
 */
_.Underscore.prototype.before = function(fn) {};

/**
 * Wrapped type `Function`.
 * @see _.wrap
 * 
 * @param {!Function} wrapper
 * @return {function(): !Function}
 */
_.Underscore.prototype.wrap = function(wrapper) {};

/**
 * Wrapped type `Function`.
 * @see _.negate
 * 
 * @return {function(!Array<?>): boolean}
 */
_.Underscore.prototype.negate = function() {};

/**
 * Wrapped type `Function[]`.
 * @see _.compose
 * 
 * @param {...!Function} functions
 * @return {!Function}
 */
_.Underscore.prototype.compose = function(functions) {};

/**
 * Wrapped type `object`.
 * @see _.keys
 * 
 * @return {!Array<string>}
 */
_.Underscore.prototype.keys = function() {};

/**
 * Wrapped type `object`.
 * @see _.allKeys
 * 
 * @return {!Array<string>}
 */
_.Underscore.prototype.allKeys = function() {};

/**
 * Wrapped type `object`.
 * @see _.values
 * 
 * @return {!Array<T>}
 */
_.Underscore.prototype.values = function() {};

/**
 * Wrapped type `object`.
 * @see _.pairs
 * 
 * @return {!Array<!Array<?>>}
 */
_.Underscore.prototype.pairs = function() {};

/**
 * Wrapped type `object`.
 * @see _.invert
 * 
 * @return {?}
 */
_.Underscore.prototype.invert = function() {};

/**
 * Wrapped type `object`.
 * @see _.functions
 * 
 * @return {!Array<string>}
 */
_.Underscore.prototype.functions = function() {};

/**
 * @see _.functions
 * 
 * @return {!Array<string>}
 */
_.Underscore.prototype.methods = function() {};

/**
 * Wrapped type `object`.
 * @see _.extend
 * 
 * @param {...?} sources
 * @return {?}
 */
_.Underscore.prototype.extend = function(sources) {};

/**
 * Wrapped type `object`.
 * @see _.extend
 * 
 * @param {!_.ObjectIterator<?, boolean>} predicate
 * @param {?=} context
 * @return {?}
 */
_.Underscore.prototype.findKey = function(predicate, context) {};

/**
 * Wrapped type `object`.
 * @see _.pick
 * 
 * @param {...?|!Array<?>|function(?, ?, ?): ?} keys_or_fn
 * @return {?}
 */
_.Underscore.prototype.pick = function(keys_or_fn) {};

/**
 * Wrapped type `object`.
 * @see _.omit
 * 
 * @param {...string|!Array<string>|!Function} keys_or_fn
 * @return {?}
 */
_.Underscore.prototype.omit = function(keys_or_fn) {};

/**
 * Wrapped type `object`.
 * @see _.defaults
 * 
 * @param {...?} defaults
 * @return {?}
 */
_.Underscore.prototype.defaults = function(defaults) {};

/**
 * Wrapped type `any`.
 * @see _.create
 * 
 * @param {!Object=} props
 * @return {?}
 */
_.Underscore.prototype.create = function(props) {};

/**
 * Wrapped type `any[]`.
 * @see _.clone
 * 
 * @return {T}
 */
_.Underscore.prototype.clone = function() {};

/**
 * Wrapped type `object`.
 * @see _.tap
 * 
 * @param {function(!Array<?>): ?} interceptor
 * @return {?}
 */
_.Underscore.prototype.tap = function(interceptor) {};

/**
 * Wrapped type `object`.
 * @see _.has
 * 
 * @param {string} key
 * @return {boolean}
 */
_.Underscore.prototype.has = function(key) {};

/**
 * Wrapped type `any[]`.
 * @see _.matches
 * 
 * @return {!_.ListIterator<T, boolean>}
 */
_.Underscore.prototype.matches = function() {};

/**
 * Wrapped type `any[]`.
 * @see _.matcher
 * 
 * @return {!_.ListIterator<T, boolean>}
 */
_.Underscore.prototype.matcher = function() {};

/**
 * Wrapped type `string`.
 * @see _.property
 * 
 * @return {function(!Object): ?}
 */
_.Underscore.prototype.property = function() {};

/**
 * Wrapped type `object`.
 * @see _.propertyOf
 * 
 * @return {function(string): ?}
 */
_.Underscore.prototype.propertyOf = function() {};

/**
 * Wrapped type `object`.
 * @see _.isEqual
 * 
 * @param {?} other
 * @return {boolean}
 */
_.Underscore.prototype.isEqual = function(other) {};

/**
 * Wrapped type `object`.
 * @see _.isEmpty
 * 
 * @return {boolean}
 */
_.Underscore.prototype.isEmpty = function() {};

/**
 * Wrapped type `object`.
 * @see _.isMatch
 * 
 * @return {boolean}
 */
_.Underscore.prototype.isMatch = function() {};

/**
 * Wrapped type `object`.
 * @see _.isElement
 * 
 * @return {boolean}
 */
_.Underscore.prototype.isElement = function() {};

/**
 * Wrapped type `object`.
 * @see _.isArray
 * 
 * @return {boolean}
 */
_.Underscore.prototype.isArray = function() {};

/**
 * Wrapped type `object`.
 * @see _.isSymbol
 * 
 * @return {boolean}
 */
_.Underscore.prototype.isSymbol = function() {};

/**
 * Wrapped type `object`.
 * @see _.isObject
 * 
 * @return {boolean}
 */
_.Underscore.prototype.isObject = function() {};

/**
 * Wrapped type `object`.
 * @see _.isArguments
 * 
 * @return {boolean}
 */
_.Underscore.prototype.isArguments = function() {};

/**
 * Wrapped type `object`.
 * @see _.isFunction
 * 
 * @return {boolean}
 */
_.Underscore.prototype.isFunction = function() {};

/**
 * Wrapped type `object`.
 * @see _.isError
 * 
 * @return {boolean}
 */
_.Underscore.prototype.isError = function() {};

/**
 * Wrapped type `object`.
 * @see _.isString
 * 
 * @return {boolean}
 */
_.Underscore.prototype.isString = function() {};

/**
 * Wrapped type `object`.
 * @see _.isNumber
 * 
 * @return {boolean}
 */
_.Underscore.prototype.isNumber = function() {};

/**
 * Wrapped type `object`.
 * @see _.isFinite
 * 
 * @return {boolean}
 */
_.Underscore.prototype.isFinite = function() {};

/**
 * Wrapped type `object`.
 * @see _.isBoolean
 * 
 * @return {boolean}
 */
_.Underscore.prototype.isBoolean = function() {};

/**
 * Wrapped type `object`.
 * @see _.isDate
 * 
 * @return {boolean}
 */
_.Underscore.prototype.isDate = function() {};

/**
 * Wrapped type `object`.
 * @see _.isRegExp
 * 
 * @return {boolean}
 */
_.Underscore.prototype.isRegExp = function() {};

/**
 * Wrapped type `object`.
 * @see _.isNaN
 * 
 * @return {boolean}
 */
_.Underscore.prototype.isNaN = function() {};

/**
 * Wrapped type `object`.
 * @see _.isNull
 * 
 * @return {boolean}
 */
_.Underscore.prototype.isNull = function() {};

/**
 * Wrapped type `object`.
 * @see _.isUndefined
 * 
 * @return {boolean}
 */
_.Underscore.prototype.isUndefined = function() {};

/**
 * Wrapped type `any`.
 * @see _.identity
 * 
 * @return {?}
 */
_.Underscore.prototype.identity = function() {};

/**
 * Wrapped type `any`.
 * @see _.constant
 * 
 * @return {function(): T}
 */
_.Underscore.prototype.constant = function() {};

/**
 * Wrapped type `any`.
 * @see _.noop
 * 
 * @return {void}
 */
_.Underscore.prototype.noop = function() {};

/**
 * Wrapped type `number`.
 * @see _.times
 * 
 * @template TResult
 * @param {function(number): TResult} iterator
 * @param {?=} context
 * @return {!Array<TResult>}
 */
_.Underscore.prototype.times = function(iterator, context) {};

/**
 * Wrapped type `number`.
 * @see _.random
 * 
 * Wrapped type `number`.
 * @see _.random
 * 
 * @param {number=} max
 * @return {number}
 */
_.Underscore.prototype.random = function(max) {};

/**
 * Wrapped type `object`.
 * @see _.mixin
 * 
 * @return {void}
 */
_.Underscore.prototype.mixin = function() {};

/**
 * Wrapped type `string|Function|Object`.
 * @see _.iteratee
 * 
 * @param {?=} context
 * @return {!Function}
 */
_.Underscore.prototype.iteratee = function(context) {};

/**
 * Wrapped type `string`.
 * @see _.uniqueId
 * 
 * @return {string}
 */
_.Underscore.prototype.uniqueId = function() {};

/**
 * Wrapped type `string`.
 * @see _.escape
 * 
 * @return {string}
 */
_.Underscore.prototype.escape = function() {};

/**
 * Wrapped type `string`.
 * @see _.unescape
 * 
 * @return {string}
 */
_.Underscore.prototype.unescape = function() {};

/**
 * Wrapped type `object`.
 * @see _.result
 * 
 * @param {string} property
 * @param {?=} defaultValue
 * @return {?}
 */
_.Underscore.prototype.result = function(property, defaultValue) {};

/**
 * Wrapped type `string`.
 * @see _.template
 * 
 * @param {!_.TemplateSettings=} settings
 * @return {function(!Array<?>): string}
 */
_.Underscore.prototype.template = function(settings) {};

/**
 * Wrapped type `any`.
 * @see _.chain
 * 
 * @return {!_._Chain<T>}
 */
_.Underscore.prototype.chain = function() {};

/**
 * Wrapped type `any`.
 * Extracts the value of a wrapped object.
 * @template TResult
 * @return {TResult} Value of the wrapped object.
 * 
 */
_.Underscore.prototype.value = function() {};
/**
 * @record
 * @struct
 */
_._Chain = function() {};

/**
 * Wrapped type `any[]`.
 * @see _.each
 * 
 * @see _.each
 * 
 * @param {!_.ListIterator<T, void>|!_.ObjectIterator<T, void>} iterator
 * @param {?=} context
 * @return {!_._Chain}
 */
_._Chain.prototype.each = function(iterator, context) {};

/**
 * @see _.each
 * 
 * @see _.each
 * 
 * @param {!_.ListIterator<T, void>|!_.ObjectIterator<T, void>} iterator
 * @param {?=} context
 * @return {!_._Chain}
 */
_._Chain.prototype.forEach = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.map
 * 
 * Wrapped type `any[]`.
 * @see _.map
 * 
 * Wrapped type `any[]`.
 * @see _.map
 * 
 * Wrapped type `any[]`.
 * @see _.map
 * 
 * @template TArray, TResult
 * @param {!_.ListIterator<T, !Array<TArray>>|!_.ListIterator<T, TResult>|!_.ObjectIterator<T, !Array<TArray>>|!_.ObjectIterator<T, TResult>} iterator
 * @param {?=} context
 * @return {!_._ChainOfArrays<TArray>|!_._Chain<TResult>}
 */
_._Chain.prototype.map = function(iterator, context) {};

/**
 * @see _.map
 * 
 * @see _.map
 * 
 * @template TResult
 * @param {!_.ListIterator<T, TResult>|!_.ObjectIterator<T, TResult>} iterator
 * @param {?=} context
 * @return {!_._Chain<TResult>}
 */
_._Chain.prototype.collect = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.reduce
 * 
 * @template TResult
 * @param {!_.MemoIterator<T, TResult>} iterator
 * @param {TResult=} memo
 * @param {?=} context
 * @return {!_._ChainSingle<TResult>}
 */
_._Chain.prototype.reduce = function(iterator, memo, context) {};

/**
 * @see _.reduce
 * 
 * @template TResult
 * @param {!_.MemoIterator<T, TResult>} iterator
 * @param {TResult=} memo
 * @param {?=} context
 * @return {!_._ChainSingle<TResult>}
 */
_._Chain.prototype.inject = function(iterator, memo, context) {};

/**
 * @see _.reduce
 * 
 * @template TResult
 * @param {!_.MemoIterator<T, TResult>} iterator
 * @param {TResult=} memo
 * @param {?=} context
 * @return {!_._ChainSingle<TResult>}
 */
_._Chain.prototype.foldl = function(iterator, memo, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.reduceRight
 * 
 * @template TResult
 * @param {!_.MemoIterator<T, TResult>} iterator
 * @param {TResult=} memo
 * @param {?=} context
 * @return {!_._ChainSingle<TResult>}
 */
_._Chain.prototype.reduceRight = function(iterator, memo, context) {};

/**
 * @see _.reduceRight
 * 
 * @template TResult
 * @param {!_.MemoIterator<T, TResult>} iterator
 * @param {TResult=} memo
 * @param {?=} context
 * @return {!_._ChainSingle<TResult>}
 */
_._Chain.prototype.foldr = function(iterator, memo, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.find
 * 
 * @see _.find
 * 
 * @see _.find
 * 
 * @template T, U
 * @param {(!_.ListIterator<T, boolean>|!_.ObjectIterator<T, boolean>)|U|string} iterator_or_interator
 * @param {?=} context
 * @return {!_._ChainSingle<T>}
 */
_._Chain.prototype.find = function(iterator_or_interator, context) {};

/**
 * @see _.find
 * 
 * @see _.find
 * 
 * @see _.find
 * 
 * @template T, U
 * @param {(!_.ListIterator<T, boolean>|!_.ObjectIterator<T, boolean>)|U|string} iterator_or_interator
 * @param {?=} context
 * @return {!_._ChainSingle<T>}
 */
_._Chain.prototype.detect = function(iterator_or_interator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.filter
 * 
 * @param {!_.ListIterator<T, boolean>} iterator
 * @param {?=} context
 * @return {!_._Chain}
 */
_._Chain.prototype.filter = function(iterator, context) {};

/**
 * @see _.filter
 * 
 * @param {!_.ListIterator<T, boolean>} iterator
 * @param {?=} context
 * @return {!_._Chain}
 */
_._Chain.prototype.select = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.where
 * 
 * @template U
 * @param {U} properties
 * @return {!_._Chain}
 */
_._Chain.prototype.where = function(properties) {};

/**
 * Wrapped type `any[]`.
 * @see _.findWhere
 * 
 * @template U
 * @param {U} properties
 * @return {!_._ChainSingle<T>}
 */
_._Chain.prototype.findWhere = function(properties) {};

/**
 * Wrapped type `any[]`.
 * @see _.reject
 * 
 * @param {!_.ListIterator<T, boolean>} iterator
 * @param {?=} context
 * @return {!_._Chain}
 */
_._Chain.prototype.reject = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.all
 * 
 * @param {!_.ListIterator<T, boolean>=} iterator
 * @param {?=} context
 * @return {!_._ChainSingle<boolean>}
 */
_._Chain.prototype.all = function(iterator, context) {};

/**
 * @see _.all
 * 
 * @param {!_.ListIterator<T, boolean>=} iterator
 * @param {?=} context
 * @return {!_._ChainSingle<boolean>}
 */
_._Chain.prototype.every = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.any
 * 
 * @param {!_.ListIterator<T, boolean>=} iterator
 * @param {?=} context
 * @return {!_._ChainSingle<boolean>}
 */
_._Chain.prototype.any = function(iterator, context) {};

/**
 * @see _.any
 * 
 * @param {!_.ListIterator<T, boolean>=} iterator
 * @param {?=} context
 * @return {!_._ChainSingle<boolean>}
 */
_._Chain.prototype.some = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.contains
 * 
 * @param {T} value
 * @param {number=} fromIndex
 * @return {!_._ChainSingle<boolean>}
 */
_._Chain.prototype.contains = function(value, fromIndex) {};

/**
 * Alias for 'contains'.
 * @see contains
 * 
 * @param {T} value
 * @param {number=} fromIndex
 * @return {!_._ChainSingle<boolean>}
 */
_._Chain.prototype.include = function(value, fromIndex) {};

/**
 * Alias for 'contains'.
 * @see contains
 * 
 * @param {T} value
 * @param {number=} fromIndex
 * @return {!_._ChainSingle<boolean>}
 */
_._Chain.prototype.includes = function(value, fromIndex) {};

/**
 * Wrapped type `any[]`.
 * @see _.invoke
 * 
 * @param {string} methodName
 * @param {...?} args
 * @return {!_._Chain}
 */
_._Chain.prototype.invoke = function(methodName, args) {};

/**
 * Wrapped type `any[]`.
 * @see _.pluck
 * 
 * @param {string} propertyName
 * @return {!_._Chain<?>}
 */
_._Chain.prototype.pluck = function(propertyName) {};

/**
 * Wrapped type `number[]`.
 * @see _.max
 * 
 * Wrapped type `any[]`.
 * @see _.max
 * 
 * Wrapped type `any[]`.
 * @see _.max
 * 
 * @param {!_.ListIterator<T, number>|!_.ListIterator<T, ?>=} iterator
 * @param {?=} context
 * @return {!_._ChainSingle<T>}
 */
_._Chain.prototype.max = function(iterator, context) {};

/**
 * Wrapped type `number[]`.
 * @see _.min
 * 
 * Wrapped type `any[]`.
 * @see _.min
 * 
 * Wrapped type `any[]`.
 * @see _.min
 * 
 * @param {!_.ListIterator<T, number>|!_.ListIterator<T, ?>=} iterator
 * @param {?=} context
 * @return {!_._ChainSingle<T>}
 */
_._Chain.prototype.min = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.sortBy
 * 
 * Wrapped type `any[]`.
 * @see _.sortBy
 * 
 * @param {!_.ListIterator<T, ?>|string=} iterator
 * @param {?=} context
 * @return {!_._Chain}
 */
_._Chain.prototype.sortBy = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.groupBy
 * 
 * Wrapped type `any[]`.
 * @see _.groupBy
 * 
 * @param {!_.ListIterator<T, ?>|string=} iterator
 * @param {?=} context
 * @return {!_._ChainOfArrays<T>}
 */
_._Chain.prototype.groupBy = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.indexBy
 * 
 * Wrapped type `any[]`.
 * @see _.indexBy
 * 
 * @param {!_.ListIterator<T, ?>|string} iterator
 * @param {?=} context
 * @return {!_._Chain}
 */
_._Chain.prototype.indexBy = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.countBy
 * 
 * Wrapped type `any[]`.
 * @see _.countBy
 * 
 * @param {!_.ListIterator<T, ?>|string=} iterator
 * @param {?=} context
 * @return {!_._Chain}
 */
_._Chain.prototype.countBy = function(iterator, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.shuffle
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.shuffle = function() {};

/**
 * Wrapped type `any[]`.
 * @see _.sample
 * 
 * @see _.sample
 * 
 * @template T
 * @param {number=} n
 * @return {!_._Chain<T>}
 */
_._Chain.prototype.sample = function(n) {};

/**
 * Wrapped type `any`.
 * @see _.toArray
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.toArray = function() {};

/**
 * Wrapped type `any`.
 * @see _.size
 * 
 * @return {!_._ChainSingle<number>}
 */
_._Chain.prototype.size = function() {};

/**
 * Wrapped type `any[]`.
 * @see _.first
 * 
 * Wrapped type `any[]`.
 * @see _.first
 * 
 * @param {number=} n
 * @return {!_._ChainSingle<T>|!_._Chain}
 */
_._Chain.prototype.first = function(n) {};

/**
 * @see _.first
 * 
 * @see _.first
 * 
 * @param {number=} n
 * @return {!_._Chain}
 */
_._Chain.prototype.head = function(n) {};

/**
 * @see _.first
 * 
 * @see _.first
 * 
 * @param {number=} n
 * @return {!_._Chain}
 */
_._Chain.prototype.take = function(n) {};

/**
 * Wrapped type `any[]`.
 * @see _.initial
 * 
 * @param {number=} n
 * @return {!_._Chain}
 */
_._Chain.prototype.initial = function(n) {};

/**
 * Wrapped type `any[]`.
 * @see _.last
 * 
 * Wrapped type `any[]`.
 * @see _.last
 * 
 * @param {number=} n
 * @return {!_._ChainSingle<T>|!_._Chain}
 */
_._Chain.prototype.last = function(n) {};

/**
 * Wrapped type `any[]`.
 * @see _.rest
 * 
 * @param {number=} n
 * @return {!_._Chain}
 */
_._Chain.prototype.rest = function(n) {};

/**
 * @see _.rest
 * 
 * @param {number=} n
 * @return {!_._Chain}
 */
_._Chain.prototype.tail = function(n) {};

/**
 * @see _.rest
 * 
 * @param {number=} n
 * @return {!_._Chain}
 */
_._Chain.prototype.drop = function(n) {};

/**
 * Wrapped type `any[]`.
 * @see _.compact
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.compact = function() {};

/**
 * Wrapped type `any`.
 * @see _.flatten
 * 
 * @param {boolean=} shallow
 * @return {!_._Chain<?>}
 */
_._Chain.prototype.flatten = function(shallow) {};

/**
 * Wrapped type `any[]`.
 * @see _.without
 * 
 * @param {...T} values
 * @return {!_._Chain}
 */
_._Chain.prototype.without = function(values) {};

/**
 * Wrapped type `any[]`.
 * @see _.partition
 * 
 * @param {!_.ListIterator<T, boolean>} iterator
 * @param {?=} context
 * @return {!_._Chain<!Array<T>>}
 */
_._Chain.prototype.partition = function(iterator, context) {};

/**
 * Wrapped type `any[][]`.
 * @see _.union
 * 
 * @param {...!_.List<T>} arrays
 * @return {!_._Chain}
 */
_._Chain.prototype.union = function(arrays) {};

/**
 * Wrapped type `any[][]`.
 * @see _.intersection
 * 
 * @param {...!_.List<T>} arrays
 * @return {!_._Chain}
 */
_._Chain.prototype.intersection = function(arrays) {};

/**
 * Wrapped type `any[]`.
 * @see _.difference
 * 
 * @param {...!_.List<T>} others
 * @return {!_._Chain}
 */
_._Chain.prototype.difference = function(others) {};

/**
 * Wrapped type `any[]`.
 * @see _.uniq
 * 
 * Wrapped type `any[]`.
 * @see _.uniq
 * 
 * @template TSort
 * @param {boolean|!_.ListIterator<T, TSort>=} isSorted_or_iterator
 * @param {!_.ListIterator<T, ?>|?=} iterator_or_context
 * @return {!_._Chain}
 */
_._Chain.prototype.uniq = function(isSorted_or_iterator, iterator_or_context) {};

/**
 * @see _.uniq
 * 
 * @see _.uniq
 * 
 * @template TSort
 * @param {boolean|!_.ListIterator<T, TSort>=} isSorted_or_iterator
 * @param {!_.ListIterator<T, TSort>|?=} iterator_or_context
 * @return {!_._Chain}
 */
_._Chain.prototype.unique = function(isSorted_or_iterator, iterator_or_context) {};

/**
 * Wrapped type `any[][]`.
 * @see _.zip
 * 
 * @param {...!Array<?>} arrays
 * @return {!_._Chain}
 */
_._Chain.prototype.zip = function(arrays) {};

/**
 * Wrapped type `any[][]`.
 * @see _.unzip
 * 
 * @param {...!Array<?>} arrays
 * @return {!_._Chain}
 */
_._Chain.prototype.unzip = function(arrays) {};

/**
 * Wrapped type `any[][]`.
 * @see _.object
 * 
 * @see _.object
 * 
 * @param {...!Array<?>|?=} keyValuePairs_or_values
 * @return {!_._Chain}
 */
_._Chain.prototype.object = function(keyValuePairs_or_values) {};

/**
 * Wrapped type `any[]`.
 * @see _.indexOf
 * 
 * @see _.indexOf
 * 
 * @param {T} value
 * @param {boolean|number=} isSorted_or_startFrom
 * @return {!_._ChainSingle<number>}
 */
_._Chain.prototype.indexOf = function(value, isSorted_or_startFrom) {};

/**
 * Wrapped type `any[]`.
 * @see _.lastIndexOf
 * 
 * @param {T} value
 * @param {number=} from
 * @return {!_._ChainSingle<number>}
 */
_._Chain.prototype.lastIndexOf = function(value, from) {};

/**
 * @see _.findIndex
 * 
 * @template T
 * @param {(!Object|!_.ListIterator<T, boolean>)} predicate
 * @param {?=} context
 * @return {!_._ChainSingle<number>}
 */
_._Chain.prototype.findIndex = function(predicate, context) {};

/**
 * @see _.findLastIndex
 * 
 * @template T
 * @param {(!Object|!_.ListIterator<T, boolean>)} predicate
 * @param {?=} context
 * @return {!_._ChainSingle<number>}
 */
_._Chain.prototype.findLastIndex = function(predicate, context) {};

/**
 * Wrapped type `any[]`.
 * @see _.sortedIndex
 * 
 * @param {T} value
 * @param {function(T): ?=} iterator
 * @param {?=} context
 * @return {!_._ChainSingle<number>}
 */
_._Chain.prototype.sortedIndex = function(value, iterator, context) {};

/**
 * Wrapped type `number`.
 * @see _.range
 * 
 * Wrapped type `number`.
 * @see _.range
 * 
 * @param {number=} stop
 * @param {number=} step
 * @return {!_._Chain}
 */
_._Chain.prototype.range = function(stop, step) {};

/**
 * Wrapped type `any[][]`.
 * @see _.chunk
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.chunk = function() {};

/**
 * Wrapped type `Function`.
 * @see _.bind
 * 
 * @param {?} object
 * @param {...?} args
 * @return {!_._Chain}
 */
_._Chain.prototype.bind = function(object, args) {};

/**
 * Wrapped type `object`.
 * @see _.bindAll
 * 
 * @param {...string} methodNames
 * @return {!_._Chain}
 */
_._Chain.prototype.bindAll = function(methodNames) {};

/**
 * Wrapped type `Function`.
 * @see _.partial
 * 
 * @param {...?} args
 * @return {!_._Chain}
 */
_._Chain.prototype.partial = function(args) {};

/**
 * Wrapped type `Function`.
 * @see _.memoize
 * 
 * @param {function(?): string=} hashFn
 * @return {!_._Chain}
 */
_._Chain.prototype.memoize = function(hashFn) {};

/**
 * Wrapped type `Function`.
 * @see _.defer
 * 
 * @param {...?} args
 * @return {!_._Chain}
 */
_._Chain.prototype.defer = function(args) {};

/**
 * Wrapped type `Function`.
 * @see _.delay
 * 
 * @see _.delay
 * 
 * @param {...number|?} wait_or_args
 * @return {!_._Chain}
 */
_._Chain.prototype.delay = function(wait_or_args) {};

/**
 * Wrapped type `Function`.
 * @see _.throttle
 * 
 * @param {number} wait
 * @param {!_.ThrottleSettings=} options
 * @return {!_._Chain}
 */
_._Chain.prototype.throttle = function(wait, options) {};

/**
 * Wrapped type `Function`.
 * @see _.debounce
 * 
 * @param {number} wait
 * @param {boolean=} immediate
 * @return {!_._Chain}
 */
_._Chain.prototype.debounce = function(wait, immediate) {};

/**
 * Wrapped type `Function`.
 * @see _.once
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.once = function() {};

/**
 * Wrapped type `Function`.
 * @see _.once
 * 
 * @param {number=} startIndex
 * @return {!_._Chain}
 */
_._Chain.prototype.restArgs = function(startIndex) {};

/**
 * Wrapped type `number`.
 * @see _.after
 * 
 * @param {!Function} func
 * @return {!_._Chain}
 */
_._Chain.prototype.after = function(func) {};

/**
 * Wrapped type `number`.
 * @see _.before
 * 
 * @param {!Function} fn
 * @return {!_._Chain}
 */
_._Chain.prototype.before = function(fn) {};

/**
 * Wrapped type `Function`.
 * @see _.wrap
 * 
 * @param {!Function} wrapper
 * @return {function(): !_._Chain}
 */
_._Chain.prototype.wrap = function(wrapper) {};

/**
 * Wrapped type `Function`.
 * @see _.negate
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.negate = function() {};

/**
 * Wrapped type `Function[]`.
 * @see _.compose
 * 
 * @param {...!Function} functions
 * @return {!_._Chain}
 */
_._Chain.prototype.compose = function(functions) {};

/**
 * Wrapped type `object`.
 * @see _.keys
 * 
 * @return {!_._Chain<string>}
 */
_._Chain.prototype.keys = function() {};

/**
 * Wrapped type `object`.
 * @see _.allKeys
 * 
 * @return {!_._Chain<string>}
 */
_._Chain.prototype.allKeys = function() {};

/**
 * Wrapped type `object`.
 * @see _.values
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.values = function() {};

/**
 * Wrapped type `object`.
 * @see _.pairs
 * 
 * @return {!_._Chain<!Array<T>>}
 */
_._Chain.prototype.pairs = function() {};

/**
 * Wrapped type `object`.
 * @see _.invert
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.invert = function() {};

/**
 * Wrapped type `object`.
 * @see _.functions
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.functions = function() {};

/**
 * @see _.functions
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.methods = function() {};

/**
 * Wrapped type `object`.
 * @see _.extend
 * 
 * @param {...?} sources
 * @return {!_._Chain}
 */
_._Chain.prototype.extend = function(sources) {};

/**
 * Wrapped type `object`.
 * @see _.extend
 * 
 * @param {!_.ObjectIterator<?, boolean>} predicate
 * @param {?=} context
 * @return {!_._Chain}
 */
_._Chain.prototype.findKey = function(predicate, context) {};

/**
 * Wrapped type `object`.
 * @see _.pick
 * 
 * @param {...?|!Array<?>|function(?, ?, ?): ?} keys_or_fn
 * @return {!_._Chain}
 */
_._Chain.prototype.pick = function(keys_or_fn) {};

/**
 * Wrapped type `object`.
 * @see _.omit
 * 
 * @param {...string|!Array<string>|!Function} keys_or_iteratee
 * @return {!_._Chain}
 */
_._Chain.prototype.omit = function(keys_or_iteratee) {};

/**
 * Wrapped type `object`.
 * @see _.defaults
 * 
 * @param {...?} defaults
 * @return {!_._Chain}
 */
_._Chain.prototype.defaults = function(defaults) {};

/**
 * Wrapped type `any`.
 * @see _.create
 * 
 * @param {!Object=} props
 * @return {!_._Chain}
 */
_._Chain.prototype.create = function(props) {};

/**
 * Wrapped type `any[]`.
 * @see _.clone
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.clone = function() {};

/**
 * Wrapped type `object`.
 * @see _.tap
 * 
 * @param {function(!Array<?>): ?} interceptor
 * @return {!_._Chain}
 */
_._Chain.prototype.tap = function(interceptor) {};

/**
 * Wrapped type `object`.
 * @see _.has
 * 
 * @param {string} key
 * @return {!_._Chain}
 */
_._Chain.prototype.has = function(key) {};

/**
 * Wrapped type `any[]`.
 * @see _.matches
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.matches = function() {};

/**
 * Wrapped type `any[]`.
 * @see _.matcher
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.matcher = function() {};

/**
 * Wrapped type `string`.
 * @see _.property
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.property = function() {};

/**
 * Wrapped type `object`.
 * @see _.propertyOf
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.propertyOf = function() {};

/**
 * Wrapped type `object`.
 * @see _.isEqual
 * 
 * @param {?} other
 * @return {!_._Chain}
 */
_._Chain.prototype.isEqual = function(other) {};

/**
 * Wrapped type `object`.
 * @see _.isEmpty
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.isEmpty = function() {};

/**
 * Wrapped type `object`.
 * @see _.isMatch
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.isMatch = function() {};

/**
 * Wrapped type `object`.
 * @see _.isElement
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.isElement = function() {};

/**
 * Wrapped type `object`.
 * @see _.isArray
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.isArray = function() {};

/**
 * Wrapped type `object`.
 * @see _.isSymbol
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.isSymbol = function() {};

/**
 * Wrapped type `object`.
 * @see _.isObject
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.isObject = function() {};

/**
 * Wrapped type `object`.
 * @see _.isArguments
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.isArguments = function() {};

/**
 * Wrapped type `object`.
 * @see _.isFunction
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.isFunction = function() {};

/**
 * Wrapped type `object`.
 * @see _.isError
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.isError = function() {};

/**
 * Wrapped type `object`.
 * @see _.isString
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.isString = function() {};

/**
 * Wrapped type `object`.
 * @see _.isNumber
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.isNumber = function() {};

/**
 * Wrapped type `object`.
 * @see _.isFinite
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.isFinite = function() {};

/**
 * Wrapped type `object`.
 * @see _.isBoolean
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.isBoolean = function() {};

/**
 * Wrapped type `object`.
 * @see _.isDate
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.isDate = function() {};

/**
 * Wrapped type `object`.
 * @see _.isRegExp
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.isRegExp = function() {};

/**
 * Wrapped type `object`.
 * @see _.isNaN
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.isNaN = function() {};

/**
 * Wrapped type `object`.
 * @see _.isNull
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.isNull = function() {};

/**
 * Wrapped type `object`.
 * @see _.isUndefined
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.isUndefined = function() {};

/**
 * Wrapped type `any`.
 * @see _.identity
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.identity = function() {};

/**
 * Wrapped type `any`.
 * @see _.constant
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.constant = function() {};

/**
 * Wrapped type `any`.
 * @see _.noop
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.noop = function() {};

/**
 * Wrapped type `number`.
 * @see _.times
 * 
 * @template TResult
 * @param {function(number): TResult} iterator
 * @param {?=} context
 * @return {!_._Chain}
 */
_._Chain.prototype.times = function(iterator, context) {};

/**
 * Wrapped type `number`.
 * @see _.random
 * 
 * Wrapped type `number`.
 * @see _.random
 * 
 * @param {number=} max
 * @return {!_._Chain}
 */
_._Chain.prototype.random = function(max) {};

/**
 * Wrapped type `object`.
 * @see _.mixin
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.mixin = function() {};

/**
 * Wrapped type `string|Function|Object`.
 * @see _.iteratee
 * 
 * @param {?=} context
 * @return {!_._Chain}
 */
_._Chain.prototype.iteratee = function(context) {};

/**
 * Wrapped type `string`.
 * @see _.uniqueId
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.uniqueId = function() {};

/**
 * Wrapped type `string`.
 * @see _.escape
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.escape = function() {};

/**
 * Wrapped type `string`.
 * @see _.unescape
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.unescape = function() {};

/**
 * Wrapped type `object`.
 * @see _.result
 * 
 * @param {string} property
 * @param {?=} defaultValue
 * @return {!_._Chain}
 */
_._Chain.prototype.result = function(property, defaultValue) {};

/**
 * Wrapped type `string`.
 * @see _.template
 * 
 * @param {!_.TemplateSettings=} settings
 * @return {function(!Array<?>): !_._Chain}
 */
_._Chain.prototype.template = function(settings) {};

/**
 * Returns a new array comprised of the array on which it is called
 * joined with the array(s) and/or value(s) provided as arguments.
 * @param {...!Array<T>} arr Arrays and/or values to concatenate into a new array. See the discussion below for details.
 * @return {!_._Chain} A new array comprised of the array on which it is called
 * 
 */
_._Chain.prototype.concat = function(arr) {};

/**
 * Join all elements of an array into a string.
 * @param {?=} separator Optional. Specifies a string to separate each element of the array. The separator is converted to a string if necessary. If omitted, the array elements are separated with a comma.
 * @return {!_._ChainSingle<T>} The string conversions of all array elements joined into one string.
 * 
 */
_._Chain.prototype.join = function(separator) {};

/**
 * Removes the last element from an array and returns that element.
 * @return {!_._ChainSingle<T>} Returns the popped element.
 * 
 */
_._Chain.prototype.pop = function() {};

/**
 * Adds one or more elements to the end of an array and returns the new length of the array.
 * @param {...T} item The elements to add to the end of the array.
 * @return {!_._Chain} The array with the element added to the end.
 * 
 */
_._Chain.prototype.push = function(item) {};

/**
 * Reverses an array in place. The first array element becomes the last and the last becomes the first.
 * @return {!_._Chain} The reversed array.
 * 
 */
_._Chain.prototype.reverse = function() {};

/**
 * Removes the first element from an array and returns that element. This method changes the length of the array.
 * @return {!_._ChainSingle<T>} The shifted element.
 * 
 */
_._Chain.prototype.shift = function() {};

/**
 * Returns a shallow copy of a portion of an array into a new array object.
 * @param {number} start Zero-based index at which to begin extraction.
 * @param {number=} end Optional. Zero-based index at which to end extraction. slice extracts up to but not including end.
 * @return {!_._Chain} A shallow copy of a portion of an array into a new array object.
 * 
 */
_._Chain.prototype.slice = function(start, end) {};

/**
 * Sorts the elements of an array in place and returns the array. The sort is not necessarily stable. The default sort order is according to string Unicode code points.
 * @param {function(T, T): boolean} compareFn Optional. Specifies a function that defines the sort order. If omitted, the array is sorted according to each character's Unicode code point value, according to the string conversion of each element.
 * @return {!_._Chain} The sorted array.
 * 
 */
_._Chain.prototype.sort = function(compareFn) {};

/**
 * Changes the content of an array by removing existing elements and/or adding new elements.
 * @param {number} index Index at which to start changing the array. If greater than the length of the array, actual starting index will be set to the length of the array. If negative, will begin that many elements from the end.
 * @param {number} quantity An integer indicating the number of old array elements to remove. If deleteCount is 0, no elements are removed. In this case, you should specify at least one new element. If deleteCount is greater than the number of elements left in the array starting at index, then all of the elements through the end of the array will be deleted.
 * @param {...T} items The element to add to the array. If you don't specify any elements, splice will only remove elements from the array.
 * @return {!_._Chain} An array containing the deleted elements. If only one element is removed, an array of one element is returned. If no elements are removed, an empty array is returned.
 * 
 */
_._Chain.prototype.splice = function(index, quantity, items) {};

/**
 * A string representing the specified array and its elements.
 * @return {!_._ChainSingle<T>} A string representing the specified array and its elements.
 * 
 */
_._Chain.prototype.toString = function() {};

/**
 * Adds one or more elements to the beginning of an array and returns the new length of the array.
 * @param {...T} items The elements to add to the front of the array.
 * @return {!_._Chain} The array with the element added to the beginning.
 * 
 */
_._Chain.prototype.unshift = function(items) {};

/**
 * Wrapped type `any`.
 * @see _.chain
 * 
 * @return {!_._Chain}
 */
_._Chain.prototype.chain = function() {};

/**
 * Wrapped type `any`.
 * @see _.value
 * 
 * @template TResult
 * @return {!Array<T>}
 */
_._Chain.prototype.value = function() {};
/**
 * @record
 * @struct
 */
_._ChainSingle = function() {};

/**
 * @return {T}
 */
_._ChainSingle.prototype.value = function() {};
/**
 * @extends {_._Chain}
 * @record
 * @struct
 */
_._ChainOfArrays = function() {};

/**
 * @param {boolean=} shallow
 * @return {!_._Chain<T>}
 */
_._ChainOfArrays.prototype.flatten = function(shallow) {};

/**
 * @param {!_.ListIterator<T, ?>} fn
 * @return {!_._ChainOfArrays}
 */
_._ChainOfArrays.prototype.mapObject = function(fn) {};
