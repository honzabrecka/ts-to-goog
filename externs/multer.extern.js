/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/multer/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var multer = {};
/**
 * @record
 * @struct
 */
multer.Field = function() {};
 /** @type {string} */
multer.Field.prototype.name;
 /** @type {number} */
multer.Field.prototype.maxCount;
/**
 * @record
 * @struct
 */
multer.Options = function() {};
 /** @type {string} */
multer.Options.prototype.dest;
 /** @type {!multer.StorageEngine} */
multer.Options.prototype.storage;
 /** @type {{fieldNameSize: number, fieldSize: number, fields: number, fileSize: number, files: number, parts: number, headerPairs: number, preservePath: boolean}} */
multer.Options.prototype.limits;

/**
 * A function to control which files to upload and which to skip.
 * @param {!Express.Request} req
 * @param {!Express.Multer.File} file
 * @param {function(!Error, boolean): void} callback
 * @return {void}
 */
multer.Options.prototype.fileFilter = function(req, file, callback) {};
/**
 * @record
 * @struct
 */
multer.StorageEngine = function() {};

/**
 * @param {!e.Request} req
 * @param {!Express.Multer.File} file
 * @param {function(?, !Express.Multer.File): void} callback
 * @return {void}
 */
multer.StorageEngine.prototype._handleFile = function(req, file, callback) {};

/**
 * @param {!e.Request} req
 * @param {!Express.Multer.File} file
 * @param {function(!Error): void} callback
 * @return {void}
 */
multer.StorageEngine.prototype._removeFile = function(req, file, callback) {};
/**
 * @record
 * @struct
 */
multer.DiskStorageOptions = function() {};
 /** @type {(string|function(!Express.Request, !Express.Multer.File, function(!Error, string): void): void)} */
multer.DiskStorageOptions.prototype.destination;

/**
 * A function used to determine what the file should be named inside the folder. Defaults to a random name with no file extension.
 * @param {!Express.Request} req
 * @param {!Express.Multer.File} file
 * @param {function(!Error, string): void} callback
 * @return {void}
 */
multer.DiskStorageOptions.prototype.filename = function(req, file, callback) {};
/**
 * @record
 * @struct
 */
multer.Instance = function() {};

/**
 * Accept a single file with the name fieldName. The single file will be stored in req.file.
 * @param {string=} fieldName
 * @return {!e.RequestHandler}
 */
multer.Instance.prototype.single = function(fieldName) {};

/**
 * Accept an array of files, all with the name fieldName. Optionally error out if more than maxCount files are uploaded. The array of files will be stored in req.files.
 * @param {string} fieldName
 * @param {number=} maxCount
 * @return {!e.RequestHandler}
 */
multer.Instance.prototype.array = function(fieldName, maxCount) {};

/**
 * Accept a mix of files, specified by fields. An object with arrays of files will be stored in req.files.
 * @param {!Array<!multer.Field>} fields
 * @return {!e.RequestHandler}
 */
multer.Instance.prototype.fields = function(fields) {};

/**
 * Accepts all files that comes over the wire. An array of files will be stored in req.files.
 * @return {!e.RequestHandler}
 */
multer.Instance.prototype.any = function() {};
/**
 * @record
 * @struct
 */
function Multer() {}

/* TODO: CallSignature:  */

/**
 * @param {!multer.DiskStorageOptions} options
 * @return {!multer.StorageEngine}
 */
Multer.prototype.diskStorage = function(options) {};

/**
 * @return {!multer.StorageEngine}
 */
Multer.prototype.memoryStorage = function() {};
 /** @type {?} */
var multer;

/* TODO: ExportAssignment in  */
 /** @type {!Express.Multer.File} */
Express.Request.prototype.file;
 /** @type {(!Object<string,!Array<!Express.Multer.File>>|!Array<!Express.Multer.File>)} */
Express.Request.prototype.files;
/** @const */
Express.Multer = {};
/**
 * @record
 * @struct
 */
Express.Multer.File = function() {};
 /** @type {string} */
Express.Multer.File.prototype.fieldname;
 /** @type {string} */
Express.Multer.File.prototype.originalname;
 /** @type {string} */
Express.Multer.File.prototype.encoding;
 /** @type {string} */
Express.Multer.File.prototype.mimetype;
 /** @type {number} */
Express.Multer.File.prototype.size;
 /** @type {string} */
Express.Multer.File.prototype.destination;
 /** @type {string} */
Express.Multer.File.prototype.filename;
 /** @type {string} */
Express.Multer.File.prototype.path;
 /** @type {?} */
Express.Multer.File.prototype.buffer;
