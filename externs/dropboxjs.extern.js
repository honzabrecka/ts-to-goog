/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/dropboxjs/index.d.ts:
/** @const */
var Dropbox = {};
/**
 * @record
 * @struct
 */
Dropbox.QueryParams = function() {};

/* TODO: IndexSignature: Dropbox */
/**
 * @record
 * @struct
 */
Dropbox.Credentials = function() {};
 /** @type {string} */
Dropbox.Credentials.prototype.key;
 /** @type {string} */
Dropbox.Credentials.prototype.secret;
 /** @type {string} */
Dropbox.Credentials.prototype.token;
 /** @type {string} */
Dropbox.Credentials.prototype.uid;
/**
 * @record
 * @struct
 */
Dropbox.AuthenticateCallback = function() {};

/* TODO: CallSignature: Dropbox */

/* TODO: CallSignature: Dropbox */
/**
 * @record
 * @struct
 */
Dropbox.QueryParamsCallback = function() {};

/* TODO: CallSignature: Dropbox */
/**
 * @record
 * @struct
 */
Dropbox.ClientFileReadCallback = function() {};

/* TODO: CallSignature: Dropbox */
/**
 * @record
 * @struct
 */
Dropbox.ClientFileWriteCallback = function() {};

/* TODO: CallSignature: Dropbox */
/**
 * @record
 * @struct
 */
Dropbox.ResumableUploadStepCallback = function() {};

/* TODO: CallSignature: Dropbox */
/**
 * @record
 * @struct
 */
Dropbox.ReadThumbnailCallback = function() {};

/* TODO: CallSignature: Dropbox */

/* TODO: CallSignature: Dropbox */
/**
 * @record
 * @struct
 */
Dropbox.FileStatCallback = function() {};

/* TODO: CallSignature: Dropbox */
/**
 * @record
 * @struct
 */
Dropbox.AuthenticateOptions = function() {};
 /** @type {boolean} */
Dropbox.AuthenticateOptions.prototype.interactive;
/**
 * @record
 * @struct
 */
Dropbox.SingOutOptions = function() {};
 /** @type {boolean} */
Dropbox.SingOutOptions.prototype.mustInvalidate;
/**
 * @record
 * @struct
 */
Dropbox.AccountInfoOptions = function() {};
 /** @type {boolean} */
Dropbox.AccountInfoOptions.prototype.httpCache;
/**
 * @record
 * @struct
 */
Dropbox.ClientFileReadOptions = function() {};
 /** @type {string} */
Dropbox.ClientFileReadOptions.prototype.versionTag;
 /** @type {string} */
Dropbox.ClientFileReadOptions.prototype.rev;
 /** @type {boolean} */
Dropbox.ClientFileReadOptions.prototype.arrayBuffer;
 /** @type {boolean} */
Dropbox.ClientFileReadOptions.prototype.blob;
 /** @type {boolean} */
Dropbox.ClientFileReadOptions.prototype.buffer;
 /** @type {boolean} */
Dropbox.ClientFileReadOptions.prototype.binary;
 /** @type {number} */
Dropbox.ClientFileReadOptions.prototype.length;
 /** @type {number} */
Dropbox.ClientFileReadOptions.prototype.start;
 /** @type {boolean} */
Dropbox.ClientFileReadOptions.prototype.httpCache;
/**
 * @record
 * @struct
 */
Dropbox.ClientFileWriteOptions = function() {};
 /** @type {string} */
Dropbox.ClientFileWriteOptions.prototype.lastVersionTag;
 /** @type {string} */
Dropbox.ClientFileWriteOptions.prototype.parentRev;
 /** @type {boolean} */
Dropbox.ClientFileWriteOptions.prototype.noOverwrite;
/**
 * @record
 * @struct
 */
Dropbox.ReadDirOptions = function() {};
 /** @type {boolean} */
Dropbox.ReadDirOptions.prototype.removed;
 /** @type {boolean} */
Dropbox.ReadDirOptions.prototype.deleted;
 /** @type {?} */
Dropbox.ReadDirOptions.prototype.limit;
 /** @type {string} */
Dropbox.ReadDirOptions.prototype.versionTag;
 /** @type {string} */
Dropbox.ReadDirOptions.prototype.contentHash;
 /** @type {boolean} */
Dropbox.ReadDirOptions.prototype.httpCache;
/**
 * @record
 * @struct
 */
Dropbox.MakeURLOptions = function() {};
 /** @type {boolean} */
Dropbox.MakeURLOptions.prototype.download;
 /** @type {boolean} */
Dropbox.MakeURLOptions.prototype.downloadHack;
 /** @type {boolean} */
Dropbox.MakeURLOptions.prototype.long;
 /** @type {boolean} */
Dropbox.MakeURLOptions.prototype.longUrl;
/**
 * @record
 * @struct
 */
Dropbox.HistoryOptions = function() {};
 /** @type {number} */
Dropbox.HistoryOptions.prototype.limit;
 /** @type {boolean} */
Dropbox.HistoryOptions.prototype.httpCache;
/**
 * @record
 * @struct
 */
Dropbox.ThumbnailUrlOptions = function() {};
 /** @type {boolean} */
Dropbox.ThumbnailUrlOptions.prototype.png;
 /** @type {string} */
Dropbox.ThumbnailUrlOptions.prototype.format;
 /** @type {string} */
Dropbox.ThumbnailUrlOptions.prototype.size;
/**
 * @extends {Dropbox.ThumbnailUrlOptions}
 * @record
 * @struct
 */
Dropbox.ReadThumbnailOptions = function() {};
 /** @type {boolean} */
Dropbox.ReadThumbnailOptions.prototype.arrayBuffer;
 /** @type {boolean} */
Dropbox.ReadThumbnailOptions.prototype.blob;
 /** @type {boolean} */
Dropbox.ReadThumbnailOptions.prototype.buffer;
/**
 * @record
 * @struct
 */
Dropbox.FindByNameOptions = function() {};
 /** @type {number} */
Dropbox.FindByNameOptions.prototype.limit;
 /** @type {boolean} */
Dropbox.FindByNameOptions.prototype.removed;
 /** @type {boolean} */
Dropbox.FindByNameOptions.prototype.deleted;
 /** @type {boolean} */
Dropbox.FindByNameOptions.prototype.httpCache;
/**
 * @record
 * @struct
 */
Dropbox.RedirectOptions = function() {};
 /** @type {string} */
Dropbox.RedirectOptions.prototype.redirectUrl;
 /** @type {string} */
Dropbox.RedirectOptions.prototype.redirectFile;
 /** @type {string} */
Dropbox.RedirectOptions.prototype.scope;
 /** @type {boolean} */
Dropbox.RedirectOptions.prototype.rememberUser;
/** @const */
Dropbox.Util = {};

/**
 * @constructor
 * @struct
 * @param {{cancelable: boolean}} options
 */
Dropbox.Util.EventSource = function(options) {};

/**
 * @param {function(?): void} listener
 * @return {!Dropbox.Util.EventSource}
 */
Dropbox.Util.EventSource.prototype.addListener = function(listener) {};

/**
 * @param {function(?): void} listener
 * @return {!Dropbox.Util.EventSource}
 */
Dropbox.Util.EventSource.prototype.removeListener = function(listener) {};

/**
 * @param {!Object} event
 * @return {boolean}
 */
Dropbox.Util.EventSource.prototype.dispatch = function(event) {};
/**
 * @constructor
 * @struct
 */
Dropbox.Util.Oauth = function() {};

/**
 * @param {string} url
 * @return {!Dropbox.QueryParams}
 */
Dropbox.Util.Oauth.queryParamsFromUrl = function(url) {};

/**
 * @return {string}
 */
Dropbox.Util.Oauth.randomAuthStateParam = function() {};

/**
 * @param {string} stateParam
 * @return {boolean}
 */
Dropbox.Util.Oauth.prototype.checkAuthStateParam = function(stateParam) {};

/**
 * @constructor
 * @struct
 * @param {string} method
 * @param {string} baseUrl
 */
Dropbox.Util.Xhr = function(method, baseUrl) {};
 /** @type {!XMLHttpRequest} */
Dropbox.Util.Xhr.prototype.xhr;
 /** @type {function(!Dropbox.ApiError, function(!Dropbox.ApiError): void): void} */
Dropbox.Util.Xhr.prototype.onError;

/**
 * @param {!Object} obj
 * @return {string}
 */
Dropbox.Util.Xhr.urlEncode = function(obj) {};

/**
 * @param {!Object} obj
 * @return {string}
 */
Dropbox.Util.Xhr.urlEncodeValue = function(obj) {};

/**
 * @param {!Object} string
 * @return {!Dropbox.QueryParams}
 */
Dropbox.Util.Xhr.urlDecode = function(string) {};

/**
 * @param {!Dropbox.QueryParams} params
 * @return {!Dropbox.Util.Xhr}
 */
Dropbox.Util.Xhr.prototype.setParams = function(params) {};

/**
 * @param {function(!Dropbox.ApiError, string, !Object, ?): void} callback
 * @return {!Dropbox.Util.Xhr}
 */
Dropbox.Util.Xhr.prototype.setCallback = function(callback) {};

/**
 * @param {!Dropbox.Util.Oauth} oauth
 * @param {boolean} cacheFriendly
 * @return {!Dropbox.Util.Xhr}
 */
Dropbox.Util.Xhr.prototype.signWithOauth = function(oauth, cacheFriendly) {};

/**
 * @param {!Dropbox.Util.Oauth} oauth
 * @return {!Dropbox.Util.Xhr}
 */
Dropbox.Util.Xhr.prototype.addOauthParams = function(oauth) {};

/**
 * @param {!Dropbox.Util.Oauth} oauth
 * @return {!Dropbox.Util.Xhr}
 */
Dropbox.Util.Xhr.prototype.addOauthHeader = function(oauth) {};

/**
 * @param {string|!Blob|!ArrayBuffer} body
 * @return {!Dropbox.Util.Xhr}
 */
Dropbox.Util.Xhr.prototype.setBody = function(body) {};

/**
 * @param {string} responseType
 * @return {!Dropbox.Util.Xhr}
 */
Dropbox.Util.Xhr.prototype.setResponseType = function(responseType) {};

/**
 * @param {string} headerName
 * @param {string} value
 * @return {!Dropbox.Util.Xhr}
 */
Dropbox.Util.Xhr.prototype.setHeader = function(headerName, value) {};

/**
 * @return {!Dropbox.Util.Xhr}
 */
Dropbox.Util.Xhr.prototype.reportResponseHeaders = function() {};

/**
 * @param {string} fieldName
 * @param {string} fileName
 * @param {string|!Blob|!File} fileData
 * @param {string=} contentType
 * @return {void}
 */
Dropbox.Util.Xhr.prototype.setFileField = function(fieldName, fileName, fileData, contentType) {};

/**
 * @return {!Dropbox.Util.Xhr}
 */
Dropbox.Util.Xhr.prototype.prepare = function() {};

/**
 * @param {function(!Dropbox.ApiError, string, !Object): void} callback
 * @return {!Dropbox.Util.Xhr}
 */
Dropbox.Util.Xhr.prototype.send = function(callback) {};

/**
 * @return {void}
 */
Dropbox.Util.Xhr.prototype.onReadyStateChange = function() {};

/**
 * @return {void}
 */
Dropbox.Util.Xhr.prototype.onXdrLoad = function() {};

/**
 * @return {void}
 */
Dropbox.Util.Xhr.prototype.onXdrError = function() {};
/** @const */
Dropbox.Http = {};
/**
 * @constructor
 * @struct
 */
Dropbox.Http.AppInfo = function() {};
 /** @type {number} */
Dropbox.Http.AppInfo.ICON_SMALL;
 /** @type {number} */
Dropbox.Http.AppInfo.ICON_LARGE;
 /** @type {string} */
Dropbox.Http.AppInfo.prototype.name;
 /** @type {string} */
Dropbox.Http.AppInfo.prototype.key;
 /** @type {boolean} */
Dropbox.Http.AppInfo.prototype.canUseDatastores;
 /** @type {boolean} */
Dropbox.Http.AppInfo.prototype.canUseFiles;
 /** @type {boolean} */
Dropbox.Http.AppInfo.prototype.hasAppFolder;
 /** @type {boolean} */
Dropbox.Http.AppInfo.prototype.canUseFullDropbox;

/**
 * @param {!Object} appInfo
 * @param {string=} appKey
 * @return {!Dropbox.Http.AppInfo}
 */
Dropbox.Http.AppInfo.parse = function(appInfo, appKey) {};

/**
 * @param {number} width
 * @param {number=} height
 * @return {void}
 */
Dropbox.Http.AppInfo.prototype.icon = function(width, height) {};
/**
 * @constructor
 * @struct
 */
Dropbox.Http.PollResult = function() {};
 /** @type {boolean} */
Dropbox.Http.PollResult.prototype.hasChanges;
 /** @type {number} */
Dropbox.Http.PollResult.prototype.retryAfter;

/**
 * @param {!Object} response
 * @return {!Dropbox.Http.PollResult}
 */
Dropbox.Http.PollResult.parse = function(response) {};
/**
 * @constructor
 * @struct
 */
Dropbox.Http.PulledChanges = function() {};
 /** @type {boolean} */
Dropbox.Http.PulledChanges.prototype.blankSlate;
 /** @type {string} */
Dropbox.Http.PulledChanges.prototype.cursorTag;
 /** @type {boolean} */
Dropbox.Http.PulledChanges.prototype.shouldPullAgain;
 /** @type {boolean} */
Dropbox.Http.PulledChanges.prototype.shouldBackOff;

/**
 * @param {!Object} deltaInfo
 * @return {!Dropbox.Http.PulledChanges}
 */
Dropbox.Http.PulledChanges.parse = function(deltaInfo) {};

/**
 * @return {string}
 */
Dropbox.Http.PulledChanges.prototype.cursor = function() {};
/**
 * @constructor
 * @struct
 */
Dropbox.Http.PulledChange = function() {};
 /** @type {string} */
Dropbox.Http.PulledChange.prototype.path;
 /** @type {boolean} */
Dropbox.Http.PulledChange.prototype.wasRemoved;
 /** @type {!Dropbox.File.Stat} */
Dropbox.Http.PulledChange.prototype.stat;

/**
 * @param {!Object} entry
 * @return {!Dropbox.Http.PulledChange}
 */
Dropbox.Http.PulledChange.parse = function(entry) {};
/**
 * @constructor
 * @struct
 */
Dropbox.Http.RangeInfo = function() {};
 /** @type {number} */
Dropbox.Http.RangeInfo.prototype.start;
 /** @type {number} */
Dropbox.Http.RangeInfo.prototype.size;
 /** @type {number} */
Dropbox.Http.RangeInfo.prototype.end;

/**
 * @param {string} headerValue
 * @return {!Dropbox.Http.RangeInfo}
 */
Dropbox.Http.RangeInfo.parse = function(headerValue) {};

/**
 * @constructor
 * @struct
 * @param {string|!Object} cursorData
 */
Dropbox.Http.UploadCursor = function(cursorData) {};
 /** @type {string} */
Dropbox.Http.UploadCursor.prototype.tag;
 /** @type {number} */
Dropbox.Http.UploadCursor.prototype.offset;
 /** @type {!Date} */
Dropbox.Http.UploadCursor.prototype.expiresAt;

/**
 * @param {string|!Object} cursorData
 * @return {!Dropbox.Http.UploadCursor}
 */
Dropbox.Http.UploadCursor.parse = function(cursorData) {};

/**
 * @return {!Object}
 */
Dropbox.Http.UploadCursor.prototype.toJSON = function() {};
/** @const */
Dropbox.File = {};
/**
 * @record
 * @struct
 */
Dropbox.File.StatOptions = function() {};
 /** @type {number} */
Dropbox.File.StatOptions.prototype.version;
 /** @type {boolean} */
Dropbox.File.StatOptions.prototype.removed;
 /** @type {boolean} */
Dropbox.File.StatOptions.prototype.deleted;
 /** @type {boolean} */
Dropbox.File.StatOptions.prototype.readDir;
 /** @type {string} */
Dropbox.File.StatOptions.prototype.versionTag;
 /** @type {string} */
Dropbox.File.StatOptions.prototype.rev;
 /** @type {string} */
Dropbox.File.StatOptions.prototype.contentHash;
 /** @type {string} */
Dropbox.File.StatOptions.prototype.hash;
 /** @type {boolean} */
Dropbox.File.StatOptions.prototype.httpCache;
/**
 * @constructor
 * @struct
 */
Dropbox.File.ShareUrl = function() {};
 /** @type {string} */
Dropbox.File.ShareUrl.prototype.url;
 /** @type {!Date} */
Dropbox.File.ShareUrl.prototype.expiresAt;
 /** @type {boolean} */
Dropbox.File.ShareUrl.prototype.isDirect;
 /** @type {boolean} */
Dropbox.File.ShareUrl.prototype.isPreview;

/**
 * @param {string|!Object} urlData
 * @param {boolean} isDirect
 * @return {!Dropbox.File.ShareUrl}
 */
Dropbox.File.ShareUrl.parse = function(urlData, isDirect) {};

/**
 * @return {!Object}
 */
Dropbox.File.ShareUrl.prototype.toJSON = function() {};
/**
 * @constructor
 * @struct
 */
Dropbox.File.CopyReference = function() {};
 /** @type {string} */
Dropbox.File.CopyReference.prototype.tag;
 /** @type {!Date} */
Dropbox.File.CopyReference.prototype.expiresAt;

/**
 * @param {string|!Object} refData
 * @return {!Dropbox.File.CopyReference}
 */
Dropbox.File.CopyReference.parse = function(refData) {};

/**
 * @return {!Object}
 */
Dropbox.File.CopyReference.prototype.toJSON = function() {};
/**
 * @constructor
 * @struct
 */
Dropbox.File.Stat = function() {};
 /** @type {string} */
Dropbox.File.Stat.prototype.path;
 /** @type {string} */
Dropbox.File.Stat.prototype.name;
 /** @type {boolean} */
Dropbox.File.Stat.prototype.inAppFolder;
 /** @type {boolean} */
Dropbox.File.Stat.prototype.isFolder;
 /** @type {boolean} */
Dropbox.File.Stat.prototype.isFile;
 /** @type {boolean} */
Dropbox.File.Stat.prototype.isRemoved;
 /** @type {string} */
Dropbox.File.Stat.prototype.typeIcon;
 /** @type {string} */
Dropbox.File.Stat.prototype.versionTag;
 /** @type {string} */
Dropbox.File.Stat.prototype.contentHash;
 /** @type {string} */
Dropbox.File.Stat.prototype.mimeType;
 /** @type {number} */
Dropbox.File.Stat.prototype.size;
 /** @type {string} */
Dropbox.File.Stat.prototype.humanSize;
 /** @type {boolean} */
Dropbox.File.Stat.prototype.hasThumbnail;
 /** @type {!Date} */
Dropbox.File.Stat.prototype.modifiedAt;
 /** @type {!Date} */
Dropbox.File.Stat.prototype.clientModifiedAt;

/**
 * @param {!Object} metadata
 * @return {!Dropbox.File.Stat}
 */
Dropbox.File.Stat.parse = function(metadata) {};

/**
 * @return {!Object}
 */
Dropbox.File.Stat.prototype.toJSON = function() {};
/** @const */
Dropbox.AuthDriver = {};
/**
 * @constructor
 * @struct
 */
Dropbox.AuthDriver.IAuthDriver = function() {};

/**
 * @param {string} authUrl
 * @param {string} stateParam
 * @param {!Dropbox.Client} client
 * @param {!Dropbox.QueryParamsCallback=} callback
 * @return {void}
 */
Dropbox.AuthDriver.IAuthDriver.prototype.doAuthorize = function(authUrl, stateParam, client, callback) {};

/**
 * @constructor
 * @struct
 * @param {{scope: string, rememberUser: boolean}} options
 */
Dropbox.AuthDriver.BrowserBase = function(options) {};

/**
 * @return {!Storage}
 */
Dropbox.AuthDriver.BrowserBase.localStorage = function() {};

/**
 * @return {string}
 */
Dropbox.AuthDriver.BrowserBase.currentLocation = function() {};

/**
 * @return {void}
 */
Dropbox.AuthDriver.BrowserBase.cleanupLocation = function() {};

/**
 * @return {string}
 */
Dropbox.AuthDriver.BrowserBase.prototype.authType = function() {};

/**
 * @param {!Dropbox.Client} client
 * @param {function(): void} callback
 * @return {void}
 */
Dropbox.AuthDriver.BrowserBase.prototype.onAuthStepChange = function(client, callback) {};

/**
 * @param {string} url
 * @return {string}
 */
Dropbox.AuthDriver.BrowserBase.prototype.locationStateParam = function(url) {};

/**
 * @constructor
 * @struct
 * @param {{redirectUrl: string, redirectFile: string, scope: string, rememberUser: boolean}=} options
 */
Dropbox.AuthDriver.Redirect = function(options) {};

/**
 * @return {string}
 */
Dropbox.AuthDriver.Redirect.prototype.url = function() {};

/**
 * @param {string} authUrl
 * @param {string} stateParam
 * @param {!Dropbox.Client} client
 * @return {void}
 */
Dropbox.AuthDriver.Redirect.prototype.doAuthorize = function(authUrl, stateParam, client) {};

/**
 * @param {string} stateParam
 * @param {!Dropbox.Client} client
 * @param {!Dropbox.QueryParamsCallback} callback
 * @return {void}
 */
Dropbox.AuthDriver.Redirect.prototype.resumeAuthorize = function(stateParam, client, callback) {};

/**
 * @constructor
 * @struct
 * @param {!Dropbox.RedirectOptions=} options
 */
Dropbox.AuthDriver.Popup = function(options) {};

/**
 * @param {string} location
 * @return {string}
 */
Dropbox.AuthDriver.Popup.locationOrigin = function(location) {};

/**
 * @return {void}
 */
Dropbox.AuthDriver.Popup.oauthReceiver = function() {};

/**
 * @return {string}
 */
Dropbox.AuthDriver.Popup.prototype.url = function() {};

/**
 * @constructor
 * @struct
 * @param {{scope: string}=} options
 */
Dropbox.AuthDriver.ChromeApp = function(options) {};

/**
 * @constructor
 * @struct
 * @param {{scope: string, receiverPath: string}=} options
 */
Dropbox.AuthDriver.ChromeExtension = function(options) {};

/**
 * @return {void}
 */
Dropbox.AuthDriver.ChromeExtension.oauthReceiver = function() {};

/**
 * @constructor
 * @struct
 * @param {{scope: string, receiverPath: string}=} options
 */
Dropbox.AuthDriver.Cordova = function(options) {};

/**
 * @return {void}
 */
Dropbox.AuthDriver.Cordova.oauthReceiver = function() {};

/**
 * @return {string}
 */
Dropbox.AuthDriver.Cordova.prototype.url = function() {};

/**
 * @constructor
 * @struct
 * @param {{port: number, tls: !Object}=} options
 */
Dropbox.AuthDriver.NodeServer = function(options) {};

/**
 * @return {string}
 */
Dropbox.AuthDriver.NodeServer.prototype.authType = function() {};

/**
 * @return {string}
 */
Dropbox.AuthDriver.NodeServer.prototype.url = function() {};

/**
 * @param {string} url
 * @return {void}
 */
Dropbox.AuthDriver.NodeServer.prototype.openBrowser = function(url) {};

/**
 * @return {void}
 */
Dropbox.AuthDriver.NodeServer.prototype.createApp = function() {};

/**
 * @return {void}
 */
Dropbox.AuthDriver.NodeServer.prototype.closeServer = function() {};

/**
 * @param {?} request
 * @param {?} response
 * @return {void}
 */
Dropbox.AuthDriver.NodeServer.prototype.doRequest = function(request, response) {};

/**
 * @param {?} response
 * @return {void}
 */
Dropbox.AuthDriver.NodeServer.prototype.closeBrowser = function(response) {};

/**
 * @return {string}
 */
Dropbox.AuthDriver.prototype.authType = function() {};

/**
 * @return {string}
 */
Dropbox.AuthDriver.prototype.url = function() {};

/**
 * @param {string} authUrl
 * @param {string} stateParam
 * @param {!Dropbox.Client} client
 * @param {!Dropbox.QueryParamsCallback} callback
 * @return {void}
 */
Dropbox.AuthDriver.prototype.doAuthorize = function(authUrl, stateParam, client, callback) {};

/**
 * @param {!Dropbox.Client} client
 * @param {function(string): void} callback
 * @return {void}
 */
Dropbox.AuthDriver.prototype.getStateParam = function(client, callback) {};

/**
 * @param {string} stateParam
 * @param {!Dropbox.Client} client
 * @param {!Dropbox.QueryParamsCallback} callback
 * @return {void}
 */
Dropbox.AuthDriver.prototype.resumeAuthorize = function(stateParam, client, callback) {};

/**
 * @param {!Dropbox.Client} client
 * @param {function(): void} callback
 * @return {void}
 */
Dropbox.AuthDriver.prototype.onAuthStepChange = function(client, callback) {};
/**
 * @constructor
 * @struct
 */
Dropbox.AccountInfo = function() {};
 /** @type {string} */
Dropbox.AccountInfo.prototype.name;
 /** @type {string} */
Dropbox.AccountInfo.prototype.email;
 /** @type {string} */
Dropbox.AccountInfo.prototype.countryCode;
 /** @type {string} */
Dropbox.AccountInfo.prototype.uid;
 /** @type {string} */
Dropbox.AccountInfo.prototype.referralUrl;
 /** @type {string} */
Dropbox.AccountInfo.prototype.publicAppUrl;
 /** @type {number} */
Dropbox.AccountInfo.prototype.quota;
 /** @type {number} */
Dropbox.AccountInfo.prototype.usedQuota;
 /** @type {number} */
Dropbox.AccountInfo.prototype.privateBytes;
 /** @type {number} */
Dropbox.AccountInfo.prototype.sharedBytes;

/**
 * @param {!Object} acountInfo
 * @return {!Dropbox.AccountInfo}
 */
Dropbox.AccountInfo.parse = function(acountInfo) {};

/**
 * @return {!Object}
 */
Dropbox.AccountInfo.prototype.json = function() {};

/**
 * @constructor
 * @struct
 * @param {!XMLHttpRequest} xhr
 * @param {string} method
 * @param {string} url
 */
Dropbox.ApiError = function(xhr, method, url) {};
 /** @type {number} */
Dropbox.ApiError.prototype.status;
 /** @type {string} */
Dropbox.ApiError.prototype.method;
 /** @type {string} */
Dropbox.ApiError.prototype.url;
 /** @type {string} */
Dropbox.ApiError.prototype.responseText;
 /** @type {!Object} */
Dropbox.ApiError.prototype.response;
 /** @type {number} */
Dropbox.ApiError.NETWORK_ERROR;
 /** @type {number} */
Dropbox.ApiError.NO_CONTENT;
 /** @type {number} */
Dropbox.ApiError.INVALID_PARAM;
 /** @type {number} */
Dropbox.ApiError.INVALID_TOKEN;
 /** @type {number} */
Dropbox.ApiError.OAUTH_ERROR;
 /** @type {number} */
Dropbox.ApiError.NOT_FOUND;
 /** @type {number} */
Dropbox.ApiError.INVALID_METHOD;
 /** @type {number} */
Dropbox.ApiError.NOT_ACCEPTABLE;
 /** @type {number} */
Dropbox.ApiError.CONFLICT;
 /** @type {number} */
Dropbox.ApiError.RATE_LIMITED;
 /** @type {number} */
Dropbox.ApiError.SERVER_ERROR;
 /** @type {number} */
Dropbox.ApiError.OVER_QUOTA;

/**
 * @constructor
 * @struct
 * @param {!Dropbox.QueryParams} queryString
 */
Dropbox.AuthError = function(queryString) {};
 /** @type {string} */
Dropbox.AuthError.prototype.code;
 /** @type {string} */
Dropbox.AuthError.prototype.description;
 /** @type {string} */
Dropbox.AuthError.prototype.uri;
 /** @type {string} */
Dropbox.AuthError.ACCESS_DENIED;
 /** @type {string} */
Dropbox.AuthError.INVALID_REQUEST;
 /** @type {string} */
Dropbox.AuthError.UNAUTHORIZED_CLIENT;
 /** @type {string} */
Dropbox.AuthError.INVALID_GRANT;
 /** @type {string} */
Dropbox.AuthError.INVALID_SCOPE;
 /** @type {string} */
Dropbox.AuthError.UNSUPPORTED_GRANT_TYPE;
 /** @type {string} */
Dropbox.AuthError.UNSUPPORTED_RESPONSE_TYPE;
 /** @type {string} */
Dropbox.AuthError.SERVER_ERROR;
 /** @type {string} */
Dropbox.AuthError.TEMPORARILY_UNAVAILABLE;

/**
 * @constructor
 * @struct
 * @param {!Dropbox.Credentials} options
 */
Dropbox.Client = function(options) {};
 /** @type {number} */
Dropbox.Client.ERROR;
 /** @type {number} */
Dropbox.Client.RESET;
 /** @type {number} */
Dropbox.Client.PARAM_SET;
 /** @type {number} */
Dropbox.Client.PARAM_LOADED;
 /** @type {number} */
Dropbox.Client.AUTHORIZED;
 /** @type {number} */
Dropbox.Client.DONE;
 /** @type {number} */
Dropbox.Client.SIGNED_OUT;
 /** @type {!Dropbox.Util.EventSource} */
Dropbox.Client.prototype.onXhr;
 /** @type {!Dropbox.Util.EventSource} */
Dropbox.Client.prototype.onError;
 /** @type {!Dropbox.Util.EventSource} */
Dropbox.Client.prototype.onAuthStepChange;
 /** @type {number} */
Dropbox.Client.prototype.authStep;

/**
 * @param {!Dropbox.AuthDriver.IAuthDriver} driver
 * @return {!Dropbox.Client}
 */
Dropbox.Client.prototype.authDriver = function(driver) {};

/**
 * @return {string}
 */
Dropbox.Client.prototype.dropboxUid = function() {};

/**
 * @return {!Dropbox.Credentials}
 */
Dropbox.Client.prototype.credentials = function() {};

/**
 * @param {!Dropbox.AuthenticateCallback|!Dropbox.AuthenticateOptions=} callback_or_options
 * @param {!Dropbox.AuthenticateCallback=} callback
 * @return {!Dropbox.Client}
 */
Dropbox.Client.prototype.authenticate = function(callback_or_options, callback) {};

/**
 * @return {boolean}
 */
Dropbox.Client.prototype.isAuthenticated = function() {};

/**
 * @param {function(!Dropbox.ApiError): void|!Dropbox.SingOutOptions} callback_or_options
 * @param {function(!Dropbox.ApiError): void=} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.signOut = function(callback_or_options, callback) {};

/**
 * @param {function(!Dropbox.ApiError): void|!Dropbox.SingOutOptions} callback_or_options
 * @param {function(!Dropbox.ApiError): void=} callback
 * @return {void}
 */
Dropbox.Client.prototype.signOff = function(callback_or_options, callback) {};

/**
 * @param {function(!Dropbox.ApiError, !Dropbox.AccountInfo, !Dropbox.AccountInfo): void|!Dropbox.AccountInfoOptions} callback_or_options
 * @param {function(!Dropbox.ApiError, !Dropbox.AccountInfo, !Dropbox.AccountInfo): void=} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.getAccountInfo = function(callback_or_options, callback) {};

/**
 * @param {string} path
 * @param {!Dropbox.ClientFileReadCallback|!Dropbox.ClientFileReadOptions} callback_or_options
 * @param {!Dropbox.ClientFileReadCallback=} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.readFile = function(path, callback_or_options, callback) {};

/**
 * @param {string} path
 * @param {?} data
 * @param {!Dropbox.ClientFileWriteCallback|!Dropbox.ClientFileWriteOptions} callback_or_options
 * @param {!Dropbox.ClientFileWriteCallback=} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.writeFile = function(path, data, callback_or_options, callback) {};

/**
 * @param {?} data
 * @param {!Dropbox.ResumableUploadStepCallback|!Dropbox.Http.UploadCursor} callback_or_cursor
 * @param {!Dropbox.ResumableUploadStepCallback=} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.resumableUploadStep = function(data, callback_or_cursor, callback) {};

/**
 * @param {string} path
 * @param {!Dropbox.Http.UploadCursor} cursor
 * @param {!Dropbox.ClientFileWriteCallback|!Dropbox.ClientFileWriteOptions} callback_or_options
 * @param {!Dropbox.ClientFileWriteCallback=} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.resumableUploadFinish = function(path, cursor, callback_or_options, callback) {};

/**
 * @param {string} path
 * @param {function(!Dropbox.ApiError, !Dropbox.File.Stat, !Array<!Dropbox.File.Stat>): void|!Dropbox.File.StatOptions} callback_or_options
 * @param {function(!Dropbox.ApiError, !Dropbox.File.Stat, !Array<!Dropbox.File.Stat>): void=} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.stat = function(path, callback_or_options, callback) {};

/**
 * @param {string} path
 * @param {function(!Dropbox.ApiError, !Array<string>, !Dropbox.File.Stat, !Array<!Dropbox.File.Stat>): void|!Dropbox.ReadDirOptions} callback_or_options
 * @param {function(!Dropbox.ApiError, !Array<string>, !Dropbox.File.Stat, !Array<!Dropbox.File.Stat>): void=} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.readdir = function(path, callback_or_options, callback) {};

/**
 * @param {string} path
 * @param {function(!Dropbox.ApiError, !Dropbox.File.Stat, !Array<!Dropbox.File.Stat>): void|!Dropbox.File.StatOptions} callback_or_options
 * @param {function(!Dropbox.ApiError, !Dropbox.File.Stat, !Array<!Dropbox.File.Stat>): void=} callback
 * @return {void}
 */
Dropbox.Client.prototype.metadata = function(path, callback_or_options, callback) {};

/**
 * @param {string} path
 * @param {function(!Dropbox.ApiError, !Dropbox.File.ShareUrl): void|!Dropbox.MakeURLOptions} callback_or_options
 * @param {function(!Dropbox.ApiError, !Dropbox.File.ShareUrl): void=} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.makeUrl = function(path, callback_or_options, callback) {};

/**
 * @param {string} path
 * @param {function(!Dropbox.ApiError, !Array<!Dropbox.File.Stat>): void|!Dropbox.HistoryOptions} callback_or_options
 * @param {function(!Dropbox.ApiError, !Array<!Dropbox.File.Stat>): void=} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.history = function(path, callback_or_options, callback) {};

/**
 * @param {string} path
 * @param {!Dropbox.HistoryOptions} options
 * @param {function(!Dropbox.ApiError, !Array<!Dropbox.File.Stat>): void} callback
 * @return {void}
 */
Dropbox.Client.prototype.revisions = function(path, options, callback) {};

/**
 * @param {string} path
 * @param {!Dropbox.ThumbnailUrlOptions=} options
 * @return {string}
 */
Dropbox.Client.prototype.thumbnailUrl = function(path, options) {};

/**
 * @param {string} path
 * @param {!Dropbox.ReadThumbnailCallback|!Dropbox.ReadThumbnailOptions} callback_or_options
 * @param {!Dropbox.ReadThumbnailCallback=} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.readThumbnail = function(path, callback_or_options, callback) {};

/**
 * @param {string} path
 * @param {string} versionTag
 * @param {!Dropbox.FileStatCallback} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.revertFile = function(path, versionTag, callback) {};

/**
 * @param {string} path
 * @param {string} versionTag
 * @param {!Dropbox.FileStatCallback} callback
 * @return {void}
 */
Dropbox.Client.prototype.restore = function(path, versionTag, callback) {};

/**
 * @param {string} path
 * @param {string} namePattern
 * @param {function(!Dropbox.ApiError, !Array<!Dropbox.File.Stat>): void|!Dropbox.FindByNameOptions} callback_or_options
 * @param {function(!Dropbox.ApiError, !Array<!Dropbox.File.Stat>): void=} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.findByName = function(path, namePattern, callback_or_options, callback) {};

/**
 * @param {string} path
 * @param {string} namePattern
 * @param {!Dropbox.FindByNameOptions} options
 * @param {function(!Dropbox.ApiError, !Array<!Dropbox.File.Stat>): void} callback
 * @return {void}
 */
Dropbox.Client.prototype.search = function(path, namePattern, options, callback) {};

/**
 * @param {string} path
 * @param {function(!Dropbox.ApiError, !Dropbox.File.CopyReference): void} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.makeCopyReference = function(path, callback) {};

/**
 * @param {string} path
 * @param {function(!Dropbox.ApiError, !Dropbox.File.CopyReference): void} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.copyRef = function(path, callback) {};

/**
 * @param {function(!Dropbox.ApiError, !Dropbox.Http.PulledChanges): void|string|!Dropbox.Http.PulledChanges} callback_or_cursor
 * @param {function(!Dropbox.ApiError, !Dropbox.Http.PulledChanges): void=} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.pullChanges = function(callback_or_cursor, callback) {};

/**
 * @param {string|!Dropbox.Http.PulledChanges} cursor
 * @param {function(!Dropbox.ApiError, !Dropbox.Http.PulledChanges): void} callback
 * @return {void}
 */
Dropbox.Client.prototype.delta = function(cursor, callback) {};

/**
 * @param {string|!Dropbox.Http.PulledChanges} cursor
 * @param {!Object} options
 * @param {function(!Dropbox.ApiError, !Dropbox.Http.PollResult): void} callback
 * @return {void}
 */
Dropbox.Client.prototype.pollForChanges = function(cursor, options, callback) {};

/**
 * @param {string} path
 * @param {!Dropbox.FileStatCallback} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.mkdir = function(path, callback) {};

/**
 * @param {string} path
 * @param {!Dropbox.FileStatCallback} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.remove = function(path, callback) {};

/**
 * @param {string} path
 * @param {!Dropbox.FileStatCallback} callback
 * @return {void}
 */
Dropbox.Client.prototype.unlink = function(path, callback) {};

/**
 * @param {string} path
 * @param {!Dropbox.FileStatCallback} callback
 * @return {void}
 */
Dropbox.Client.prototype.delete = function(path, callback) {};

/**
 * @param {string|!Dropbox.File.CopyReference} from
 * @param {string} toPath
 * @param {!Dropbox.FileStatCallback} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.copy = function(from, toPath, callback) {};

/**
 * @param {string} fromPath
 * @param {string} toPath
 * @param {!Dropbox.FileStatCallback} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.move = function(fromPath, toPath, callback) {};

/**
 * @param {function(!Dropbox.ApiError, !Dropbox.Http.AppInfo): void|string} callback_or_appKey
 * @param {function(!Dropbox.ApiError, !Dropbox.Http.AppInfo): void=} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.appInfo = function(callback_or_appKey, callback) {};

/**
 * @param {?} userId
 * @param {function(!Dropbox.ApiError, boolean): void|?} callbackcallback_or_appKey
 * @param {function(!Dropbox.ApiError, boolean): void=} callbackcallback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.isAppDeveloper = function(userId, callbackcallback_or_appKey, callbackcallback) {};

/**
 * @param {string} redirectUri
 * @param {function(!Dropbox.ApiError, boolean): void|string|!Dropbox.Http.AppInfo} callback_or_appKey
 * @param {function(!Dropbox.ApiError, boolean): void=} callback
 * @return {!XMLHttpRequest}
 */
Dropbox.Client.prototype.hasOauthRedirectUri = function(redirectUri, callback_or_appKey, callback) {};

/**
 * @return {!Dropbox.Client}
 */
Dropbox.Client.prototype.reset = function() {};

/**
 * @param {!Dropbox.Credentials} credentials
 * @return {!Dropbox.Client}
 */
Dropbox.Client.prototype.setCredentials = function(credentials) {};

/**
 * @return {string}
 */
Dropbox.Client.prototype.appHash = function() {};
