/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/bootstrap.v3.datetimepicker/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: NamespaceExportDeclaration in  */

/** @typedef {?} */
var InputParser;
/**
 * @record
 * @struct
 */
function Datetimepicker() {}

/* TODO: CallSignature:  */
 /** @type {?} */
Datetimepicker.prototype.defaults;

/**
 * Clears the datepicker by setting the value to null
 * @return {void}
 */
Datetimepicker.prototype.clear = function() {};

/**
 * Returns the component's model current date, a moment object or null if not set.
 * Takes string, Date, moment, null parameter and sets the components model current moment to it.
 * Passing a null value unsets the components model current moment.
 * Parsing of the newDate parameter is made using moment library with the options.format and options.useStrict components configuration.
 * Throws:
 * - TypeError - in case the newDate cannot be parsed
 * 
 * Emits:
 * - dp.change - In case newDate is different from current moment
 * @param {(string|!moment.Moment|!Date)=} date
 * @return {!moment.Moment|void}
 */
Datetimepicker.prototype.date = function(date) {};

/**
 * Destroys the widget and removes all attached event listeners
 * @return {void}
 */
Datetimepicker.prototype.destroy = function() {};

/**
 * Disables the input element, the component is attached to, by adding a disabled="true" attribute to it. If the widget was visible before that call it is hidden.
 * Emits:
 * - dp.hide - if the widget was visible before that call
 * @return {void}
 */
Datetimepicker.prototype.disable = function() {};

/**
 * Enables the input element, the component is attached to, by removing disabled attribute from it.
 * @return {void}
 */
Datetimepicker.prototype.enable = function() {};

/**
 * Hides the widget
 * Emits:
 * - dp.hide - if the widget was visible before that call
 * @return {void}
 */
Datetimepicker.prototype.hide = function() {};

/**
 * Returns the components current options object.
 * Note that the changing the values of the returned object does not change the components actual configuration.
 * Takes an object variable with option key:value properties and configures the component. Use this to update multiple options on the component.
 * @param {?=} options
 * @return {?|void}
 */
Datetimepicker.prototype.options = function(options) {};

/**
 * Shows the widget
 * Emits:
 * - dp.show - if the widget was hidden before that call
 * - dp.change - if the widget is opened for the first time and the useCurrent is set to true or to a granularity value and the input element the component is attached to has an empty value
 * @return {void}
 */
Datetimepicker.prototype.show = function() {};

/**
 * Shows or hides the widget
 * Emits:
 * - dp.hide - if the widget is hidden after the toggle call
 * - dp.show - if the widget is show after the toggle call
 * - dp.change - if the widget is opened for the first time and the input element is empty and options.useCurrent != false
 * @return {void}
 */
Datetimepicker.prototype.toggle = function() {};

/**
 * Returns the options.allowInputToggle option.
 * If true, the picker will show on textbox focus and icon click when used in a button group
 * @param {boolean=} value
 * @return {boolean|void}
 */
Datetimepicker.prototype.allowInputToggle = function(value) {};

/**
 * Returns the current options.calendarWeeks option configuration
 * Set if the week numbers will appear to the left on the days view
 * @param {boolean=} value
 * @return {boolean|void}
 */
Datetimepicker.prototype.calendarWeeks = function(value) {};

/**
 * Returns the options.collapse option configuration
 * If set to false the picker will display similar to sideBySide except vertical.
 * @param {boolean=} value
 * @return {boolean|void}
 */
Datetimepicker.prototype.collapse = function(value) {};

/**
 * Returns the options.daysOfWeekDisabled configuration
 * IMPORTANT! Throws exception if not set explicitly https://github.com/Eonasdan/bootstrap-datetimepicker/issues/1459
 * Takes an [ Number:0 to 6 ] and disallow the user to select weekdays that exist in this array.
 * This has lower priority over the options.minDate, options.maxDate, options.disabledDates and options.enabledDates configuration settings.
 * Emits:
 * - dp.change - if the currently selected moment falls in the values passed on the daysOfWeek parameter.
 * - dp.error - if the currently selected moment falls in the values passed on the daysOfWeek parameter.
 * @param {!Array<number>=} days
 * @return {!Array<number>|void}
 */
Datetimepicker.prototype.daysOfWeekDisabled = function(days) {};

/**
 * Returns the options.dayViewHeaderFormat option.
 * Used to customize the header of the day view.
 * @param {string=} value
 * @return {string|void}
 */
Datetimepicker.prototype.dayViewHeaderFormat = function(value) {};

/**
 * Returns a moment with the options.defaultDate option configuration or false if not set
 * Will set the picker's inital date.
 * If a boolean:false value is passed the options.defaultDate parameter is cleared.
 * Throws:
 * - TypeError - if the provided date doesn't pass validation, including disabledDates, enabledDates, minDate, maxDate, and daysOfWeekDisabled
 * - TypeError - if the provided date cannot be parsed by momentjs
 * @param {(string|boolean|!moment.Moment|!Date)=} date
 * @return {(boolean|!moment.Moment)|void}
 */
Datetimepicker.prototype.defaultDate = function(date) {};

/**
 * Returns the options.disabledDates option.
 * NOTES: probably should be: disabledDates(): boolean | Array<moment.Moment>; see: DatetimepickerOptions
 * Takes an array of values and disallows the user to select those days.
 * Setting this takes precedence over options.minDate, options.maxDate configuration.
 * Also calling this function removes the configuration of options.enabledDates if such exist.
 * Note: These values are matched with Day granularity.
 * @param {(boolean|!Array<(string|!moment.Moment|!Date)>)=} dates
 * @return {?|void}
 */
Datetimepicker.prototype.disabledDates = function(dates) {};

/**
 * Returns the options.disabledHours option.
 * NOTES: probably should be: disabledHours(): boolean | number[]; see: DatetimepickerOptions
 * Must be in 24 hour format. Will disallow hour selections (much like disabledTimeIntervals) but will affect all days.
 * Like en/disabledDates, the en/disabledHours options are mutually exclusive and will reset one of the options back to false.
 * @param {(boolean|!Array<number>)=} value
 * @return {?|void}
 */
Datetimepicker.prototype.disabledHours = function(value) {};

/**
 * Returns the options.disabledTimeIntervals option, or... not exactly
 * IMPORTANT! Creates an object from the options.disabledTimeIntervals with the keys being numbers, the values being the moment arrays.
 * eg { "0": [<moment.Moment1>, <moment.Moment2>], "1": [...] }
 * https://github.com/Eonasdan/bootstrap-datetimepicker/issues/1498
 * Disables time selection between the given moments
 * eg: [[moment({ h: 0 }), moment({ h: 8 })], [moment({ h: 18 }), moment({ h: 24 })]]
 * @param {(boolean|!Array<!Array<!moment.Moment>>)=} value
 * @return {(boolean|!Array<!Array<!moment.Moment>>)|void}
 */
Datetimepicker.prototype.disabledTimeIntervals = function(value) {};

/**
 * Returns the options.enabledDates option
 * NOTES: probably should be: enabledDates(): boolean | Array<moment.Moment>; see: DatetimepickerOptions
 * Takes an array of values and allows the user to select only from those days.
 * Setting this takes precedence over options.minDate, options.maxDate configuration.
 * Also calling this function removes the configuration of options.disabledDates if such exist.
 * Note: These values are matched with Day granularity.
 * @param {(boolean|!Array<(string|!moment.Moment|!Date)>)=} dates
 * @return {?|void}
 */
Datetimepicker.prototype.enabledDates = function(dates) {};

/**
 * Returns the options.enabledHours option.
 * NOTES: probably should be: enabledHours(): boolean | number[]; see: DatetimepickerOptions
 * Must be in 24 hour format. Will allow hour selections (much like enabledTimeIntervals) but will affect all days.
 * Like en/disabledDates, the en/disabledHours options are mutually exclusive and will reset one of the options back to false.
 * @param {(boolean|!Array<number>)=} value
 * @return {?|void}
 */
Datetimepicker.prototype.enabledHours = function(value) {};

/**
 * Returns a boolean or array with the options.extraFormats option configuration
 * Takes an array of valid input moment format options, or boolean:false
 * @param {(boolean|!Array<(string|!moment.MomentBuiltinFormat)>)=} formats
 * @return {(boolean|!Array<(string|!moment.MomentBuiltinFormat)>)|void}
 */
Datetimepicker.prototype.extraFormats = function(formats) {};

/**
 * Returns the options.focusOnShow option.
 * If false, the textbox will not be given focus when the picker is shown
 * @param {boolean=} value
 * @return {boolean|void}
 */
Datetimepicker.prototype.focusOnShow = function(value) {};

/**
 * Returns the component's options.format string
 * Takes a moment.js format string and sets the components options.format.
 * This is used for displaying and also for parsing input strings either from the input element the component is attached to or the date() function.
 * The parameter can also be a boolean:false in which case the format is set to the locale's L LT.
 * Note: this is also used to determine if the TimePicker sub component will display the hours in 12 or 24 format. (if "a" or "h" exists in the passed string then a 12 hour mode is set)
 * Throws:
 * - TypeError - if format is boolean:true
 * @param {(string|boolean|!moment.MomentBuiltinFormat)=} format
 * @return {(string|boolean|!moment.MomentBuiltinFormat)|void}
 */
Datetimepicker.prototype.format = function(format) {};

/**
 * Returns options.icons
 * Takes an Object of strings.
 * Throws:
 * - TypeError - if icons parameter is not an Object
 * @param {?=} icons
 * @return {?|void}
 */
Datetimepicker.prototype.icons = function(icons) {};

/**
 * Returns the options.ignoreReadonly option.
 * Set this to true to allow the picker to be used even if the input field is readonly. This will not bypass the disabled property
 * @param {boolean=} value
 * @return {boolean|void}
 */
Datetimepicker.prototype.ignoreReadonly = function(value) {};

/**
 * Returns the options.inline option.
 * Used to customize the header of the day view.
 * @param {boolean=} value
 * @return {boolean|void}
 */
Datetimepicker.prototype.inline = function(value) {};

/**
 * Returns the options.keepInvalid option.
 * If true, invalid dates will not be reverted to a previous selection or changed.
 * @param {boolean=} value
 * @return {boolean|void}
 */
Datetimepicker.prototype.keepInvalid = function(value) {};

/**
 * Returns a string variable with the currently set options.keyBinds option.
 * Allows for several keyBinding functions to be specified for ease of access or accessibility. For defaults see {\@link http://eonasdan.github.io/bootstrap-datetimepicker/Options/#keybinds}.
 * @param {?=} value
 * @return {?|void}
 */
Datetimepicker.prototype.keyBinds = function(value) {};

/**
 * Returns the currently set locale of the options.locale
 * Takes a string of any valid moment locale e.g. de for German.
 * Throws:
 * - TypeError - if the locale is not loaded via a separate script or moment-with-locale
 * @param {string=} newLocale
 * @return {string|void}
 */
Datetimepicker.prototype.locale = function(newLocale) {};

/**
 * Returns the currently set moment of the options.maxDate or false if not set
 * Takes a parameter and disallows the user to select a moment that is after that moment.
 * If a boolean:false value is passed options.maxDate is cleared and there is no restriction to the maximum moment the user can select.
 * Note: If the parameter is before the currently selected moment the currently selected moment changes to maxDate
 * Throws:
 * - TypeError - if the parameter cannot be parsed using the options.format and options.useStrict configuration settings
 * - TypeError - if the parameter is before options.minDate
 * 
 * Emits:
 * - dp.change - if the new maxDate is after currently selected moment
 * - dp.error - if the new maxDate is after currently selected moment
 * @param {(string|boolean|!moment.Moment|!Date)=} date
 * @return {(boolean|!moment.Moment)|void}
 */
Datetimepicker.prototype.maxDate = function(date) {};

/**
 * Returns the currently set moment of the options.minDate or false if not set
 * Takes a parameter and disallows the user to select a moment that is before that moment.
 * If a boolean:false value is passed the options.minDate parameter is cleared and there is no restriction to the miminum moment the user can select.
 * Note: If the parameter is after the currently selected moment the currently selected moment changes to minDate parameter
 * Throws:
 * - TypeError - if the parameter cannot be parsed using the options.format and options.useStrict configuration settings
 * - TypeError - if the parameter is after options.maxDate
 * 
 * Emits:
 * - dp.change - if the new minDate is after currently selected moment
 * - dp.error - if the new minDate is after currently selected moment
 * @param {(string|boolean|!moment.Moment|!Date)=} date
 * @return {(boolean|!moment.Moment)|void}
 */
Datetimepicker.prototype.minDate = function(date) {};

/**
 * Returns the options.parseInputDate option
 * Allows custom input formatting For example: the user can enter "yesterday"" or "30 days ago".
 * {\@link http://eonasdan.github.io/bootstrap-datetimepicker/Functions/#parseinputdate}
 * @param {?=} value
 * @return {?|void}
 */
Datetimepicker.prototype.parseInputDate = function(value) {};

/**
 * Returns the options.showClear option.
 * Set if the clear date button will appear on the widget
 * @param {boolean=} value
 * @return {boolean|void}
 */
Datetimepicker.prototype.showClear = function(value) {};

/**
 * Returns the options.showClose option.
 * If true, an icon will be displayed on the toolbar that will hide the picker
 * @param {boolean=} value
 * @return {boolean|void}
 */
Datetimepicker.prototype.showClose = function(value) {};

/**
 * Returns the options.showTodayButton option.
 * Set if the Today button will appear on the widget
 * @param {boolean=} value
 * @return {boolean|void}
 */
Datetimepicker.prototype.showTodayButton = function(value) {};

/**
 * Returns a boolean of the options.sideBySide.
 * If sideBySide is true and the time picker is used, both components will display side by side instead of collapsing.
 * @param {boolean=} value
 * @return {boolean|void}
 */
Datetimepicker.prototype.sideBySide = function(value) {};

/**
 * Returns a number with the options.stepping option configuration
 * This will be the amount the up/down arrows move the minute value with a time picker.
 * @param {number=} step
 * @return {number|void}
 */
Datetimepicker.prototype.stepping = function(step) {};

/**
 * Returns a string of options.timeZone
 * Takes a null or a string of a valid timezone.
 * Throws:
 * - TypeError - if tooltips parameter is not a string or null
 * @param {string=} timeZone
 * @return {string|void}
 */
Datetimepicker.prototype.timeZone = function(timeZone) {};

/**
 * Returns the options.toolbarplacement option.
 * Changes the placement of the toolbar where the today, clear, component switch icon are located.
 * See valid values at DatetimepickerOptions.toolbarplacement
 * Throws:
 * - TypeError - if the parameter is not a valid value
 * @param {string=} value
 * @return {string|void}
 */
Datetimepicker.prototype.toolbarPlacement = function(value) {};

/**
 * Returns the options.tooltips option
 * Sets the tooltips for icons.
 * Throws:
 * - TypeError - if tooltips parameter is not an Object
 * @param {?=} value
 * @return {?|void}
 */
Datetimepicker.prototype.tooltips = function(value) {};

/**
 * Returns the options.useCurrent option configuration
 * Takes a boolean or string.
 * If a boolean true is passed and the components model moment is not set (either through setDate or through a valid value on the input element the component is attached to)
 * then the first time the user opens the datetimepicker widget the value is initialized to the current moment of the action.
 * If a false boolean is passed then no initialization happens on the input element.
 * You can select the granularity on the initialized moment by passing one of the following strings ("year", "month", "day", "hour", "minute") in the variable.
 * If for example you pass "day" to the useCurrent function and the input field is empty the first time the user opens the datetimepicker widget the input text will be
 * initialized to the current datetime with day granularity (ie if currentTime = 2014-08-10 13:32:33 the input value will be initialized to 2014-08-10 00:00:00)
 * Note: If the options.defaultDate is set or the input element the component is attached to has already a value that takes precedence and the functionality of useCurrent is not triggered!
 * @param {(string|boolean)=} value
 * @return {(string|boolean)|void}
 */
Datetimepicker.prototype.useCurrent = function(value) {};

/**
 * Returns the options.useStrict
 * If useStrict is true, momentjs parsing rules will be stricter when determining if a date is valid or not.
 * @param {boolean=} value
 * @return {boolean|void}
 */
Datetimepicker.prototype.useStrict = function(value) {};

/**
 * Returns the options.viewDate option.
 * This will change the viewDate without changing or setting the selected date.
 * @param {(string|boolean|!moment.Moment|!Date)=} value
 * @return {(boolean|!moment.Moment)|void}
 */
Datetimepicker.prototype.viewDate = function(value) {};

/**
 * Returns the options.viewMode.
 * Takes a string. See valid values at DatetimepickerOptions.viewMode
 * Throws:
 * - TypeError - if the parameter is not a string or not a valid value
 * @param {string=} value
 * @return {string|void}
 */
Datetimepicker.prototype.viewMode = function(value) {};

/**
 * Returns a $(element) variable with the currently set options.widgetParent option.
 * Takes a string or $(element) value.
 * @param {(string|?<!HTMLElement>)=} widgetParent
 * @return {(string|?<!HTMLElement>)|void}
 */
Datetimepicker.prototype.widgetParent = function(widgetParent) {};

/**
 * Returns the options.widgetPositioning object
 * WidgetPositioning defines where the dropdown with the widget will appear relative to the input element the component is attached to.
 * "auto" is the default value for both horizontal and vertical keys and it tries to automatically place the dropdown in a position that is visible to the user.
 * Usually you should not override those options unless you have a special need in your layout.
 * @param {?=} value
 * @return {?|void}
 */
Datetimepicker.prototype.widgetPositioning = function(value) {};
/**
 * @record
 * @struct
 */
function DatetimepickerOptions() {}
 /** @type {boolean} */
DatetimepickerOptions.prototype.allowInputToggle;
 /** @type {boolean} */
DatetimepickerOptions.prototype.calendarWeeks;
 /** @type {boolean} */
DatetimepickerOptions.prototype.collapse;
 /** @type {(boolean|!Array<number>)} */
DatetimepickerOptions.prototype.daysOfWeekDisabled;
 /** @type {string} */
DatetimepickerOptions.prototype.dayViewHeaderFormat;
 /** @type {boolean} */
DatetimepickerOptions.prototype.debug;
 /** @type {(string|boolean|!moment.Moment|!Date)} */
DatetimepickerOptions.prototype.defaultDate;
 /** @type {?} */
DatetimepickerOptions.prototype.disabledDates;
 /** @type {?} */
DatetimepickerOptions.prototype.disabledHours;
 /** @type {(boolean|!Array<!Array<!moment.Moment>>)} */
DatetimepickerOptions.prototype.disabledTimeIntervals;
 /** @type {?} */
DatetimepickerOptions.prototype.enabledDates;
 /** @type {(boolean|!Array<number>)} */
DatetimepickerOptions.prototype.enabledHours;
 /** @type {(boolean|!Array<(string|!moment.MomentBuiltinFormat)>)} */
DatetimepickerOptions.prototype.extraFormats;
 /** @type {boolean} */
DatetimepickerOptions.prototype.focusOnShow;
 /** @type {(string|boolean|!moment.MomentBuiltinFormat)} */
DatetimepickerOptions.prototype.format;
 /** @type {?} */
DatetimepickerOptions.prototype.icons;
 /** @type {boolean} */
DatetimepickerOptions.prototype.ignoreReadonly;
 /** @type {boolean} */
DatetimepickerOptions.prototype.inline;
 /** @type {?} */
DatetimepickerOptions.prototype.keyBinds;
 /** @type {boolean} */
DatetimepickerOptions.prototype.keepInvalid;
 /** @type {boolean} */
DatetimepickerOptions.prototype.keepOpen;
 /** @type {string} */
DatetimepickerOptions.prototype.locale;
 /** @type {(string|boolean|!moment.Moment|!Date)} */
DatetimepickerOptions.prototype.maxDate;
 /** @type {(string|boolean|!moment.Moment|!Date)} */
DatetimepickerOptions.prototype.minDate;
 /** @type {?} */
DatetimepickerOptions.prototype.parseInputDate;
 /** @type {boolean} */
DatetimepickerOptions.prototype.showClear;
 /** @type {boolean} */
DatetimepickerOptions.prototype.showClose;
 /** @type {boolean} */
DatetimepickerOptions.prototype.showTodayButton;
 /** @type {boolean} */
DatetimepickerOptions.prototype.sideBySide;
 /** @type {number} */
DatetimepickerOptions.prototype.stepping;
 /** @type {string} */
DatetimepickerOptions.prototype.timeZone;
 /** @type {string} */
DatetimepickerOptions.prototype.toolbarPlacement;
 /** @type {?} */
DatetimepickerOptions.prototype.tooltips;
 /** @type {boolean} */
DatetimepickerOptions.prototype.useCurrent;
 /** @type {boolean} */
DatetimepickerOptions.prototype.useStrict;
 /** @type {(string|boolean|!moment.Moment|!Date)} */
DatetimepickerOptions.prototype.viewDate;
 /** @type {string} */
DatetimepickerOptions.prototype.viewMode;
 /** @type {(string|?<!HTMLElement>)} */
DatetimepickerOptions.prototype.widgetParent;
 /** @type {?} */
DatetimepickerOptions.prototype.widgetPositioning;
/**
 * @record
 * @struct
 */
function Icons() {}
 /** @type {string} */
Icons.prototype.clear;
 /** @type {string} */
Icons.prototype.close;
 /** @type {string} */
Icons.prototype.date;
 /** @type {string} */
Icons.prototype.down;
 /** @type {string} */
Icons.prototype.next;
 /** @type {string} */
Icons.prototype.previous;
 /** @type {string} */
Icons.prototype.time;
 /** @type {string} */
Icons.prototype.today;
 /** @type {string} */
Icons.prototype.up;
/**
 * @record
 * @struct
 */
function Tooltips() {}
 /** @type {string} */
Tooltips.prototype.today;
 /** @type {string} */
Tooltips.prototype.clear;
 /** @type {string} */
Tooltips.prototype.close;
 /** @type {string} */
Tooltips.prototype.selectMonth;
 /** @type {string} */
Tooltips.prototype.prevMonth;
 /** @type {string} */
Tooltips.prototype.nextMonth;
 /** @type {string} */
Tooltips.prototype.selectYear;
 /** @type {string} */
Tooltips.prototype.prevYear;
 /** @type {string} */
Tooltips.prototype.nextYear;
 /** @type {string} */
Tooltips.prototype.selectDecade;
 /** @type {string} */
Tooltips.prototype.prevDecade;
 /** @type {string} */
Tooltips.prototype.nextDecade;
 /** @type {string} */
Tooltips.prototype.prevCentury;
 /** @type {string} */
Tooltips.prototype.nextCentury;
 /** @type {string} */
Tooltips.prototype.selectTime;
 /** @type {string} */
Tooltips.prototype.pickHour;
 /** @type {string} */
Tooltips.prototype.incrementHour;
 /** @type {string} */
Tooltips.prototype.decrementHour;
 /** @type {string} */
Tooltips.prototype.pickMinute;
 /** @type {string} */
Tooltips.prototype.incrementMinute;
 /** @type {string} */
Tooltips.prototype.decrementMinute;
 /** @type {string} */
Tooltips.prototype.togglePeriod;
 /** @type {string} */
Tooltips.prototype.pickSecond;
 /** @type {string} */
Tooltips.prototype.incrementSecond;
 /** @type {string} */
Tooltips.prototype.decrementSecond;
/**
 * @record
 * @struct
 */
function WidgetPositioningOptions() {}
 /** @type {string} */
WidgetPositioningOptions.prototype.horizontal;
 /** @type {string} */
WidgetPositioningOptions.prototype.vertical;
/**
 * @extends {JQueryEventObject}
 * @record
 * @struct
 */
function Event() {}
 /** @type {!moment.Moment} */
Event.prototype.date;
/**
 * @extends {Event}
 * @record
 * @struct
 */
function ChangeEvent() {}
 /** @type {(boolean|!moment.Moment)} */
ChangeEvent.prototype.oldDate;
/**
 * @extends {JQueryEventObject}
 * @record
 * @struct
 */
function UpdateEvent() {}
 /** @type {string} */
UpdateEvent.prototype.change;
 /** @type {!moment.Moment} */
UpdateEvent.prototype.viewDate;

/** @typedef {string} */
var EventName;
 /** @type {?} */
JQuery.prototype.datetimepicker;

/**
 * @param {string} key
 * @return {?}
 */
JQuery.prototype.data = function(key) {};

/**
 * @param {string} events
 * @param {function(?): ?|string} handler_or_selector
 * @param {function(?): ?|?=} handler_or_data
 * @param {function(?): ?=} handler
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.on = function(events, handler_or_selector, handler_or_data, handler) {};

/**
 * @param {string} events
 * @param {function(?): ?|string=} handler_or_selector
 * @param {function(?): ?=} handler
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.off = function(events, handler_or_selector, handler) {};
