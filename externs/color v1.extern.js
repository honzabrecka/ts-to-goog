/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/color v1/index.d.ts:
/** @const */
var Color = {};

/** @typedef {(string|number|!Object<string,number>)} */
Color.ColorParam;

/** @typedef {string} */
Color.ColorModel;
/**
 * @record
 * @struct
 */
Color.Color = function() {};

/* TODO: CallSignature: Color */

/**
 * @return {string}
 */
Color.Color.prototype.toString = function() {};

/**
 * @return {?}
 */
Color.Color.prototype.toJSON = function() {};

/**
 * @param {number=} places
 * @return {string}
 */
Color.Color.prototype.string = function(places) {};

/**
 * @param {number=} placse
 * @return {string}
 */
Color.Color.prototype.percentString = function(placse) {};

/**
 * @return {!Array<number>}
 */
Color.Color.prototype.array = function() {};

/**
 * @return {?}
 */
Color.Color.prototype.object = function() {};

/**
 * @return {!Array<?>}
 */
Color.Color.prototype.unitArray = function() {};

/**
 * @return {?}
 */
Color.Color.prototype.unitObject = function() {};

/**
 * @param {number=} places
 * @return {!Color.Color}
 */
Color.Color.prototype.round = function(places) {};

/**
 * @param {number=} alpha
 * @return {!Color.Color|number}
 */
Color.Color.prototype.alpha = function(alpha) {};

/**
 * @param {number=} red
 * @return {!Color.Color|number}
 */
Color.Color.prototype.red = function(red) {};

/**
 * @param {number=} green
 * @return {!Color.Color|number}
 */
Color.Color.prototype.green = function(green) {};

/**
 * @param {number=} blue
 * @return {!Color.Color|number}
 */
Color.Color.prototype.blue = function(blue) {};

/**
 * @param {number=} hue
 * @return {!Color.Color|number}
 */
Color.Color.prototype.hue = function(hue) {};

/**
 * @param {number=} saturation
 * @return {!Color.Color|number}
 */
Color.Color.prototype.saturationl = function(saturation) {};

/**
 * @param {number=} lightness
 * @return {!Color.Color|number}
 */
Color.Color.prototype.lightness = function(lightness) {};

/**
 * @param {number=} saturationv
 * @return {!Color.Color|number}
 */
Color.Color.prototype.saturationv = function(saturationv) {};

/**
 * @param {number=} value
 * @return {!Color.Color|number}
 */
Color.Color.prototype.value = function(value) {};

/**
 * @param {number=} chroma
 * @return {!Color.Color|number}
 */
Color.Color.prototype.chroma = function(chroma) {};

/**
 * @param {number=} value
 * @return {!Color.Color|number}
 */
Color.Color.prototype.gray = function(value) {};

/**
 * @param {number=} cyan
 * @return {!Color.Color|number}
 */
Color.Color.prototype.cyan = function(cyan) {};

/**
 * @param {number=} magenta
 * @return {!Color.Color|number}
 */
Color.Color.prototype.magenta = function(magenta) {};

/**
 * @param {number=} yellow
 * @return {!Color.Color|number}
 */
Color.Color.prototype.yellow = function(yellow) {};

/**
 * @param {number=} black
 * @return {!Color.Color|number}
 */
Color.Color.prototype.black = function(black) {};

/**
 * @param {number=} x
 * @return {!Color.Color|number}
 */
Color.Color.prototype.x = function(x) {};

/**
 * @param {number=} y
 * @return {!Color.Color|number}
 */
Color.Color.prototype.y = function(y) {};

/**
 * @param {number=} z
 * @return {!Color.Color|number}
 */
Color.Color.prototype.z = function(z) {};

/**
 * @param {number=} l
 * @return {!Color.Color|number}
 */
Color.Color.prototype.l = function(l) {};

/**
 * @param {number=} a
 * @return {!Color.Color|number}
 */
Color.Color.prototype.a = function(a) {};

/**
 * @param {number=} b
 * @return {!Color.Color|number}
 */
Color.Color.prototype.b = function(b) {};

/**
 * @param {string=} keyword
 * @return {!Color.Color|string}
 */
Color.Color.prototype.keyword = function(keyword) {};

/**
 * @param {string=} color
 * @return {!Color.Color|string}
 */
Color.Color.prototype.hex = function(color) {};

/**
 * @return {!Color.Color}
 */
Color.Color.prototype.rgb = function() {};

/**
 * @return {!Color.Color}
 */
Color.Color.prototype.hsl = function() {};

/**
 * @return {!Color.Color}
 */
Color.Color.prototype.hsv = function() {};

/**
 * @return {!Color.Color}
 */
Color.Color.prototype.hwb = function() {};

/**
 * @return {!Color.Color}
 */
Color.Color.prototype.hcg = function() {};

/**
 * @return {!Color.Color}
 */
Color.Color.prototype.cmyk = function() {};

/**
 * @return {!Color.Color}
 */
Color.Color.prototype.xyz = function() {};

/**
 * @return {!Color.Color}
 */
Color.Color.prototype.lab = function() {};

/**
 * @return {number}
 */
Color.Color.prototype.rgbNumber = function() {};

/**
 * @return {number}
 */
Color.Color.prototype.luminosity = function() {};

/**
 * @param {!Color.Color} color
 * @return {number}
 */
Color.Color.prototype.contrast = function(color) {};

/**
 * @param {!Color.Color} color
 * @return {string}
 */
Color.Color.prototype.level = function(color) {};

/**
 * @return {boolean}
 */
Color.Color.prototype.dark = function() {};

/**
 * @return {boolean}
 */
Color.Color.prototype.light = function() {};

/**
 * @return {!Color.Color}
 */
Color.Color.prototype.negate = function() {};

/**
 * @param {number} value
 * @return {!Color.Color}
 */
Color.Color.prototype.lighten = function(value) {};

/**
 * @param {number} value
 * @return {!Color.Color}
 */
Color.Color.prototype.darken = function(value) {};

/**
 * @param {number} value
 * @return {!Color.Color}
 */
Color.Color.prototype.saturate = function(value) {};

/**
 * @param {number} value
 * @return {!Color.Color}
 */
Color.Color.prototype.desaturate = function(value) {};

/**
 * @param {number} value
 * @return {!Color.Color}
 */
Color.Color.prototype.whiten = function(value) {};

/**
 * @param {number} value
 * @return {!Color.Color}
 */
Color.Color.prototype.blacken = function(value) {};

/**
 * @return {!Color.Color}
 */
Color.Color.prototype.greyscale = function() {};

/**
 * @param {number} ratio
 * @return {!Color.Color}
 */
Color.Color.prototype.fade = function(ratio) {};

/**
 * @param {number} value
 * @return {!Color.Color}
 */
Color.Color.prototype.opaquer = function(value) {};

/**
 * @param {number} value
 * @return {!Color.Color}
 */
Color.Color.prototype.rotate = function(value) {};

/**
 * @param {!Color.Color} color
 * @param {number=} value
 * @return {!Color.Color}
 */
Color.Color.prototype.mix = function(color, value) {};
 /** @type {!Color.Color} */
var Color;

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
