/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/massive/index.d.ts:

/* TODO: ExportAssignment in  */

/**
 * @param {(string|!massive.ConnectionInfo)} connection
 * @param {!Object=} loaderConfig
 * @param {!Object=} driverConfig
 * @return {!Promise<!massive.Database>}
 */
function massive(connection, loaderConfig, driverConfig) {}
/**
 * @record
 * @struct
 */
massive.ConnectionInfo = function() {};
 /** @type {string} */
massive.ConnectionInfo.prototype.user;
 /** @type {string} */
massive.ConnectionInfo.prototype.database;
 /** @type {string} */
massive.ConnectionInfo.prototype.password;
 /** @type {number} */
massive.ConnectionInfo.prototype.port;
 /** @type {string} */
massive.ConnectionInfo.prototype.host;
 /** @type {boolean} */
massive.ConnectionInfo.prototype.ssl;
 /** @type {string} */
massive.ConnectionInfo.prototype.application_name;
 /** @type {boolean} */
massive.ConnectionInfo.prototype.fallback_application_name;
/**
 * @record
 * @struct
 */
massive.QueryOptions = function() {};
 /** @type {!Array<string>} */
massive.QueryOptions.prototype.columns;
 /** @type {number} */
massive.QueryOptions.prototype.limit;
 /** @type {number} */
massive.QueryOptions.prototype.offset;
 /** @type {boolean} */
massive.QueryOptions.prototype.only;
 /** @type {!Array<string>} */
massive.QueryOptions.prototype.order;
 /** @type {boolean} */
massive.QueryOptions.prototype.orderBody;
 /** @type {boolean} */
massive.QueryOptions.prototype.build;
 /** @type {boolean} */
massive.QueryOptions.prototype.document;
 /** @type {boolean} */
massive.QueryOptions.prototype.single;
 /** @type {boolean} */
massive.QueryOptions.prototype.stream;
/**
 * @record
 * @struct
 */
massive.SearchCriteria = function() {};
 /** @type {!Array<string>} */
massive.SearchCriteria.prototype.fields;
 /** @type {string} */
massive.SearchCriteria.prototype.term;
/**
 * @record
 * @struct
 */
massive.Table = function() {};

/**
 * @param {!Object} criteria
 * @param {!massive.QueryOptions=} queryOptions
 * @return {!Promise<!Array<T>>}
 */
massive.Table.prototype.find = function(criteria, queryOptions) {};

/**
 * @param {(number|!Object)} criteria
 * @param {!massive.QueryOptions=} queryOptions
 * @return {!Promise<T>}
 */
massive.Table.prototype.findOne = function(criteria, queryOptions) {};

/**
 * @param {!Object} criteria
 * @return {!Promise<string>}
 */
massive.Table.prototype.count = function(criteria) {};

/**
 * @param {string} query
 * @param {(!Object|!Array<?>)} params
 * @return {!Promise<!Array<T>>}
 */
massive.Table.prototype.where = function(query, params) {};

/**
 * @param {!massive.SearchCriteria} criteria
 * @param {!massive.QueryOptions=} queryOptions
 * @return {!Promise<?>}
 */
massive.Table.prototype.search = function(criteria, queryOptions) {};

/**
 * @param {!Object} data
 * @return {!Promise<T>}
 */
massive.Table.prototype.save = function(data) {};

/**
 * @param {!Object|!Array<!Object>} data
 * @return {!Promise<T>|!Promise<!Array<T>>}
 */
massive.Table.prototype.insert = function(data) {};

/**
 * @param {!Object|!Array<!Object>} dataOrCriteria
 * @param {!Object=} changesMap
 * @return {!Promise<T>|!Promise<!Array<T>>}
 */
massive.Table.prototype.update = function(dataOrCriteria, changesMap) {};

/**
 * @param {!Object} criteria
 * @return {!Promise<!Array<T>>}
 */
massive.Table.prototype.destroy = function(criteria) {};
/**
 * @record
 * @struct
 */
massive.Document = function() {};

/**
 * @param {!Object} criteria
 * @return {!Promise<number>}
 */
massive.Document.prototype.countDoc = function(criteria) {};

/**
 * @param {(string|number|!Object)} criteria
 * @return {!Promise<!Object>}
 */
massive.Document.prototype.findDoc = function(criteria) {};

/**
 * @param {!massive.SearchCriteria} criteria
 * @return {!Promise<!Array<!Object>>}
 */
massive.Document.prototype.searchDoc = function(criteria) {};

/**
 * @param {!Object} doc
 * @return {!Promise<!Object>}
 */
massive.Document.prototype.saveDoc = function(doc) {};

/**
 * @param {(string|number)} docId
 * @param {!Object} doc
 * @param {string=} fieldName
 * @return {!Promise<!Object>}
 */
massive.Document.prototype.modify = function(docId, doc, fieldName) {};
/**
 * @record
 * @struct
 */
massive.Database = function() {};

/**
 * @param {?} ctor
 * @param {...?} sources
 * @return {!Promise<?>}
 */
massive.Database.prototype.attach = function(ctor, sources) {};

/**
 * @param {string} entity
 * @param {string} collection
 * @return {void}
 */
massive.Database.prototype.detach = function(entity, collection) {};

/**
 * @return {void}
 */
massive.Database.prototype.reload = function() {};

/**
 * @param {?} query
 * @param {?} params
 * @param {?} options
 * @return {!Promise<?>}
 */
massive.Database.prototype.query = function(query, params, options) {};

/**
 * @param {string} collectionName
 * @param {!Object} doc
 * @return {!Promise<?>}
 */
massive.Database.prototype.saveDoc = function(collectionName, doc) {};

/**
 * @param {?} path
 * @return {!Promise<?>}
 */
massive.Database.prototype.createDocumentTable = function(path) {};

/**
 * @param {?} path
 * @param {?} collection
 * @return {!Object}
 */
massive.Database.prototype.getObject = function(path, collection) {};

/**
 * @param {string} table
 * @param {?} options
 * @return {void}
 */
massive.Database.prototype.dropTable = function(table, options) {};

/**
 * @param {string} schemaName
 * @return {void}
 */
massive.Database.prototype.createSchema = function(schemaName) {};

/**
 * @param {string} schemaName
 * @param {?} options
 * @return {void}
 */
massive.Database.prototype.dropSchema = function(schemaName, options) {};

/**
 * @param {string} query
 * @param {(!Object|!Array<?>)} params
 * @return {!Promise<!Array<!Object>>}
 */
massive.Database.prototype.run = function(query, params) {};
