/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/hasha/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ExportAssignment in  */

/**
 * @template E
 * @param {(string|!Array<string>|?|!Array<?>)} input
 * @param {!hasha.HashaOptions<E>=} options
 * @return {string|?}
 */
function hasha(input, options) {}

/** @typedef {(string|!Array<string>|?|!Array<?>)} */
hasha.HashaInput;

/** @typedef {string} */
hasha.ToStringEncoding;

/** @typedef {string} */
hasha.HashaEncoding;
/**
 * @record
 * @struct
 */
hasha.HashaOptions = function() {};
 /** @type {E} */
hasha.HashaOptions.prototype.encoding;
 /** @type {string} */
hasha.HashaOptions.prototype.algorithm;

/**
 * @param {!hasha.HashaOptions<string>=} options
 * @return {!Hash}
 */
hasha.stream = function(options) {};

/**
 * @template E
 * @param {!NodeJS.ReadableStream} stream
 * @param {!hasha.HashaOptions<E>=} options
 * @return {!Promise<string>|!Promise<?>}
 */
hasha.fromStream = function(stream, options) {};

/**
 * @template E
 * @param {string} filePath
 * @param {!hasha.HashaOptions<E>=} options
 * @return {!Promise<string>|!Promise<?>}
 */
hasha.fromFile = function(filePath, options) {};

/**
 * @template E
 * @param {string} filePath
 * @param {!hasha.HashaOptions<E>=} options
 * @return {string|?}
 */
hasha.fromFileSync = function(filePath, options) {};
