/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/js-cookie/index.d.ts:
/** @const */
var Cookies = {};
/**
 * @record
 * @struct
 */
Cookies.CookieAttributes = function() {};
 /** @type {(number|!Date)} */
Cookies.CookieAttributes.prototype.expires;
 /** @type {string} */
Cookies.CookieAttributes.prototype.path;
 /** @type {string} */
Cookies.CookieAttributes.prototype.domain;
 /** @type {boolean} */
Cookies.CookieAttributes.prototype.secure;
/**
 * @record
 * @struct
 */
Cookies.CookiesStatic = function() {};
 /** @type {!Cookies.CookieAttributes} */
Cookies.CookiesStatic.prototype.defaults;

/**
 * Create a cookie
 * @param {string} name
 * @param {?} value
 * @param {!Cookies.CookieAttributes=} options
 * @return {void}
 */
Cookies.CookiesStatic.prototype.set = function(name, value, options) {};

/**
 * Read cookie
 * Read all available cookies
 * @param {string=} name
 * @return {string|!Object<string,string>}
 */
Cookies.CookiesStatic.prototype.get = function(name) {};

/**
 * Returns the parsed representation of the string
 * stored in the cookie according to JSON.parse
 * Returns the parsed representation of
 * all cookies according to JSON.parse
 * @param {string=} name
 * @return {?|!Object<string,?>}
 */
Cookies.CookiesStatic.prototype.getJSON = function(name) {};

/**
 * Delete cookie
 * @param {string} name
 * @param {!Cookies.CookieAttributes=} options
 * @return {void}
 */
Cookies.CookiesStatic.prototype.remove = function(name, options) {};

/**
 * If there is any danger of a conflict with the namespace Cookies,
 * the noConflict method will allow you to define a new namespace
 * and preserve the original one. This is especially useful when
 * running the script on third party sites e.g. as part of a widget
 * or SDK. Note: The noConflict method is not necessary when using
 * AMD or CommonJS, thus it is not exposed in those environments.
 * @return {!Cookies.CookiesStatic}
 */
Cookies.CookiesStatic.prototype.noConflict = function() {};

/**
 * Create a new instance of the api that overrides the default
 * decoding implementation. All methods that rely in a proper
 * decoding to work, such as Cookies.remove() and Cookies.get(),
 * will run the converter first for each cookie. The returned
 * string will be used as the cookie value.
 * @param {function(string, string): string} converter
 * @return {!Cookies.CookiesStatic}
 */
Cookies.CookiesStatic.prototype.withConverter = function(converter) {};
 /** @type {!Cookies.CookiesStatic} */
var Cookies;

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
