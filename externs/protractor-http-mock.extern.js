/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/protractor-http-mock/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var mock = {};
/**
 * @record
 * @struct
 */
mock.ProtractorHttpMock = function() {};

/* TODO: CallSignature: mock */

/* TODO: CallSignature: mock */

/* TODO: CallSignature: mock */

/* TODO: CallSignature: mock */
 /** @type {{rootDirectory: string, protractorConfig: string}} */
mock.ProtractorHttpMock.prototype.config;

/**
 * Clean up.
 * Typically done in the afterEach call to ensure the teardown
 * is executed regardless of what happens in the test execution.
 * @return {void}
 */
mock.ProtractorHttpMock.prototype.teardown = function() {};

/**
 * Returns a promise that will be resolved with an array of
 * all matched HTTP requests.
 * @return {?}
 */
mock.ProtractorHttpMock.prototype.requestsMade = function() {};

/**
 * Returns a promise that will be resolved with a true boolean
 * when all matched HTTP requests are cleared.
 * @return {?}
 */
mock.ProtractorHttpMock.prototype.clearRequests = function() {};

/**
 * Add mocks during test execution.
 * Returns a promise that will be resolved with a true boolean
 * when mocks are added.
 * 
 * @template T1, T2
 * @param {!Array<(!mock.requests.Get<T1>|!mock.requests.PostData<T1, T2>|!mock.requests.Post<T1>|!mock.requests.Head<T1>|!mock.requests.Delete<T1>|!mock.requests.Put<T1>|!mock.requests.Patch<T1>|!mock.requests.Jsonp<T1>)>} mocks An array of mock modules to load into the application.
 * @return {?}
 */
mock.ProtractorHttpMock.prototype.add = function(mocks) {};

/**
 * Remove mocks during test execution.
 * Returns a promise that will be resolved with a true boolean
 * when the supplied mocks are removed.
 * 
 * @template T1, T2
 * @param {!Array<(!mock.requests.Get<T1>|!mock.requests.PostData<T1, T2>|!mock.requests.Post<T1>|!mock.requests.Head<T1>|!mock.requests.Delete<T1>|!mock.requests.Put<T1>|!mock.requests.Patch<T1>|!mock.requests.Jsonp<T1>)>} mocks An array of mock modules to remove from the application.
 * @return {?}
 */
mock.ProtractorHttpMock.prototype.remove = function(mocks) {};
/**
 * @record
 * @struct
 */
mock.ReceivedRequest = function() {};
 /** @type {string} */
mock.ReceivedRequest.prototype.url;
 /** @type {string} */
mock.ReceivedRequest.prototype.method;
/**
 * @record
 * @struct
 */
mock.Plugin = function() {};

/**
 * Match function.
 * Return a truthy value to indicate successfull match.
 * 
 * @template T1, T2
 * @param {(!mock.requests.Get<T1>|!mock.requests.PostData<T1, T2>|!mock.requests.Post<T1>|!mock.requests.Head<T1>|!mock.requests.Delete<T1>|!mock.requests.Put<T1>|!mock.requests.Patch<T1>|!mock.requests.Jsonp<T1>)} mockRequest The mock to compare request with.
 * @param {(!mock.requests.Get<T1>|!mock.requests.PostData<T1, T2>|!mock.requests.Post<T1>|!mock.requests.Head<T1>|!mock.requests.Delete<T1>|!mock.requests.Put<T1>|!mock.requests.Patch<T1>|!mock.requests.Jsonp<T1>)} requestConfig The request object to compare mock with.
 * @return {boolean}
 */
mock.Plugin.prototype.match = function(mockRequest, requestConfig) {};

/**
 * Match function.
 * Return a truthy value to indicate successfull match.
 * 
 * @template T1, T2
 * @param {(!mock.requests.Get<T1>|!mock.requests.PostData<T1, T2>|!mock.requests.Post<T1>|!mock.requests.Head<T1>|!mock.requests.Delete<T1>|!mock.requests.Put<T1>|!mock.requests.Patch<T1>|!mock.requests.Jsonp<T1>)} mockRequest The mock to compare request with.
 * @param {(!mock.requests.Get<T1>|!mock.requests.PostData<T1, T2>|!mock.requests.Post<T1>|!mock.requests.Head<T1>|!mock.requests.Delete<T1>|!mock.requests.Put<T1>|!mock.requests.Patch<T1>|!mock.requests.Jsonp<T1>)} requestConfig The request object to compare mock with.
 * @return {boolean}
 */
mock.Plugin.prototype.match = function(mockRequest, requestConfig) {};
/** @const */
mock.requests = {};

/** @typedef {string} */
mock.requests.Method;

/** @typedef {(!mock.requests.Get<T1>|!mock.requests.PostData<T1, T2>|!mock.requests.Post<T1>|!mock.requests.Head<T1>|!mock.requests.Delete<T1>|!mock.requests.Put<T1>|!mock.requests.Patch<T1>|!mock.requests.Jsonp<T1>)} */
mock.requests.AllRequests;
/**
 * @record
 * @struct
 */
mock.requests.Get = function() {};
 /** @type {{method: string, path: string, regex: boolean, params: !Object, queryString: !Object, headers: !Object, interceptedRequest: boolean, interceptedAnonymousRequest: boolean}} */
mock.requests.Get.prototype.request;
 /** @type {{status: number, data: TResponse}} */
mock.requests.Get.prototype.response;
/**
 * @record
 * @struct
 */
mock.requests.PostData = function() {};
 /** @type {{method: string, path: string, regex: boolean, data: TPayload}} */
mock.requests.PostData.prototype.request;
 /** @type {{status: number, data: TResponse}} */
mock.requests.PostData.prototype.response;
/**
 * @record
 * @struct
 */
mock.requests.Post = function() {};
 /** @type {{method: string, path: string, regex: boolean}} */
mock.requests.Post.prototype.request;
 /** @type {{status: number, data: TResponse}} */
mock.requests.Post.prototype.response;
/**
 * @record
 * @struct
 */
mock.requests.Head = function() {};
 /** @type {{method: string, path: string, regex: boolean}} */
mock.requests.Head.prototype.request;
 /** @type {{status: number, data: TResponse}} */
mock.requests.Head.prototype.response;
/**
 * @record
 * @struct
 */
mock.requests.Delete = function() {};
 /** @type {{method: string, path: string, regex: boolean}} */
mock.requests.Delete.prototype.request;
 /** @type {{status: number, data: TResponse}} */
mock.requests.Delete.prototype.response;
/**
 * @record
 * @struct
 */
mock.requests.Put = function() {};
 /** @type {{method: string, path: string, regex: boolean}} */
mock.requests.Put.prototype.request;
 /** @type {{status: number, data: TResponse}} */
mock.requests.Put.prototype.response;
/**
 * @record
 * @struct
 */
mock.requests.Patch = function() {};
 /** @type {{method: string, path: string, regex: boolean}} */
mock.requests.Patch.prototype.request;
 /** @type {{status: number, data: TResponse}} */
mock.requests.Patch.prototype.response;
/**
 * @record
 * @struct
 */
mock.requests.Jsonp = function() {};
 /** @type {{method: string, path: string, regex: boolean}} */
mock.requests.Jsonp.prototype.request;
 /** @type {{status: number, data: TResponse}} */
mock.requests.Jsonp.prototype.response;
 /** @type {!mock.ProtractorHttpMock} */
var mock;

/* TODO: ExportAssignment in  */
