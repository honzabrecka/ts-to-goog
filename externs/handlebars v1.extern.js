/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/handlebars v1/index.d.ts:
 /** @type {!HandlebarsStatic} */
var Handlebars;
/**
 * @record
 * @struct
 */
function HandlebarsTemplatable() {}
 /** @type {!HandlebarsTemplateDelegate} */
HandlebarsTemplatable.prototype.template;
/**
 * @record
 * @struct
 */
function HandlebarsTemplateDelegate() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function HandlebarsCommon() {}
 /** @type {?} */
HandlebarsCommon.prototype.SafeString;
 /** @type {?} */
HandlebarsCommon.prototype.Utils;
 /** @type {!Logger} */
HandlebarsCommon.prototype.logger;

/**
 * @param {string} name
 * @param {!Function} fn
 * @param {boolean=} inverse
 * @return {void}
 */
HandlebarsCommon.prototype.registerHelper = function(name, fn, inverse) {};

/**
 * @param {string} name
 * @param {?} str
 * @return {void}
 */
HandlebarsCommon.prototype.registerPartial = function(name, str) {};

/**
 * @return {void}
 */
HandlebarsCommon.prototype.K = function() {};

/**
 * @param {?} object
 * @return {?}
 */
HandlebarsCommon.prototype.createFrame = function(object) {};

/**
 * @param {string} message
 * @return {void}
 */
HandlebarsCommon.prototype.Exception = function(message) {};

/**
 * @param {number} level
 * @param {?} obj
 * @return {void}
 */
HandlebarsCommon.prototype.log = function(level, obj) {};
/**
 * @extends {HandlebarsCommon}
 * @record
 * @struct
 */
function HandlebarsStatic() {}

/**
 * @param {string} input
 * @return {!hbs.AST.ProgramNode}
 */
HandlebarsStatic.prototype.parse = function(input) {};

/**
 * @param {?} input
 * @param {?=} options
 * @return {!HandlebarsTemplateDelegate}
 */
HandlebarsStatic.prototype.compile = function(input, options) {};
/**
 * @record
 * @struct
 */
function HandlebarsTemplates() {}

/* TODO: IndexSignature:  */
/**
 * @extends {HandlebarsCommon}
 * @record
 * @struct
 */
function HandlebarsRuntimeStatic() {}
 /** @type {!HandlebarsTemplates} */
HandlebarsRuntimeStatic.prototype.templates;
/** @const */
var hbs = {};

/**
 * @constructor
 * @struct
 * @param {string} str
 */
hbs.SafeString = function(str) {};

/**
 * @return {string}
 */
hbs.SafeString.toString = function() {};
/** @const */
hbs.Utils = {};

/**
 * @param {string} str
 * @return {string}
 */
hbs.Utils.escapeExpression = function(str) {};
/**
 * @record
 * @struct
 */
function Logger() {}
 /** @type {number} */
Logger.prototype.DEBUG;
 /** @type {number} */
Logger.prototype.INFO;
 /** @type {number} */
Logger.prototype.WARN;
 /** @type {number} */
Logger.prototype.ERROR;
 /** @type {number} */
Logger.prototype.level;
 /** @type {!Object<number,string>} */
Logger.prototype.methodMap;

/**
 * @param {number} level
 * @param {string} obj
 * @return {void}
 */
Logger.prototype.log = function(level, obj) {};
/** @const */
hbs.AST = {};
/**
 * @record
 * @struct
 */
hbs.AST.IStripInfo = function() {};
 /** @type {boolean} */
hbs.AST.IStripInfo.prototype.left;
 /** @type {boolean} */
hbs.AST.IStripInfo.prototype.right;
 /** @type {boolean} */
hbs.AST.IStripInfo.prototype.inlineStandalone;
/**
 * @constructor
 * @struct
 */
hbs.AST.NodeBase = function() {};
 /** @type {number} */
hbs.AST.NodeBase.prototype.firstColumn;
 /** @type {number} */
hbs.AST.NodeBase.prototype.firstLine;
 /** @type {number} */
hbs.AST.NodeBase.prototype.lastColumn;
 /** @type {number} */
hbs.AST.NodeBase.prototype.lastLine;
 /** @type {string} */
hbs.AST.NodeBase.prototype.type;
/**
 * @extends {hbs.AST.NodeBase}
 * @constructor
 * @struct
 */
hbs.AST.ProgramNode = function() {};
 /** @type {!Array<!hbs.AST.NodeBase>} */
hbs.AST.ProgramNode.prototype.statements;
/**
 * @extends {hbs.AST.NodeBase}
 * @constructor
 * @struct
 */
hbs.AST.IdNode = function() {};
 /** @type {string} */
hbs.AST.IdNode.prototype.original;
 /** @type {!Array<string>} */
hbs.AST.IdNode.prototype.parts;
 /** @type {string} */
hbs.AST.IdNode.prototype.string;
 /** @type {number} */
hbs.AST.IdNode.prototype.depth;
 /** @type {string} */
hbs.AST.IdNode.prototype.idName;
 /** @type {boolean} */
hbs.AST.IdNode.prototype.isSimple;
 /** @type {string} */
hbs.AST.IdNode.prototype.stringModeValue;
/**
 * @extends {hbs.AST.NodeBase}
 * @constructor
 * @struct
 */
hbs.AST.HashNode = function() {};
 /** @type {!Array<{0: string, 1: !hbs.AST.NodeBase}>} */
hbs.AST.HashNode.prototype.pairs;
/**
 * @extends {hbs.AST.NodeBase}
 * @constructor
 * @struct
 */
hbs.AST.SexprNode = function() {};
 /** @type {!hbs.AST.HashNode} */
hbs.AST.SexprNode.prototype.hash;
 /** @type {!hbs.AST.NodeBase} */
hbs.AST.SexprNode.prototype.id;
 /** @type {!Array<!hbs.AST.NodeBase>} */
hbs.AST.SexprNode.prototype.params;
 /** @type {boolean} */
hbs.AST.SexprNode.prototype.isHelper;
 /** @type {boolean} */
hbs.AST.SexprNode.prototype.eligibleHelper;
/**
 * @extends {hbs.AST.NodeBase}
 * @constructor
 * @struct
 */
hbs.AST.MustacheNode = function() {};
 /** @type {!hbs.AST.IStripInfo} */
hbs.AST.MustacheNode.prototype.strip;
 /** @type {boolean} */
hbs.AST.MustacheNode.prototype.escaped;
 /** @type {!hbs.AST.SexprNode} */
hbs.AST.MustacheNode.prototype.sexpr;
/**
 * @extends {hbs.AST.NodeBase}
 * @constructor
 * @struct
 */
hbs.AST.BlockNode = function() {};
 /** @type {!hbs.AST.MustacheNode} */
hbs.AST.BlockNode.prototype.mustache;
 /** @type {!hbs.AST.ProgramNode} */
hbs.AST.BlockNode.prototype.program;
 /** @type {!hbs.AST.ProgramNode} */
hbs.AST.BlockNode.prototype.inverse;
 /** @type {!hbs.AST.IStripInfo} */
hbs.AST.BlockNode.prototype.strip;
 /** @type {boolean} */
hbs.AST.BlockNode.prototype.isInverse;
/**
 * @extends {hbs.AST.NodeBase}
 * @constructor
 * @struct
 */
hbs.AST.PartialNameNode = function() {};
 /** @type {string} */
hbs.AST.PartialNameNode.prototype.name;
/**
 * @extends {hbs.AST.NodeBase}
 * @constructor
 * @struct
 */
hbs.AST.PartialNode = function() {};
 /** @type {!hbs.AST.PartialNameNode} */
hbs.AST.PartialNode.prototype.partialName;
 /** @type {!hbs.AST.NodeBase} */
hbs.AST.PartialNode.prototype.context;
 /** @type {!hbs.AST.HashNode} */
hbs.AST.PartialNode.prototype.hash;
 /** @type {!hbs.AST.IStripInfo} */
hbs.AST.PartialNode.prototype.strip;
/**
 * @extends {hbs.AST.NodeBase}
 * @constructor
 * @struct
 */
hbs.AST.RawBlockNode = function() {};
 /** @type {!hbs.AST.MustacheNode} */
hbs.AST.RawBlockNode.prototype.mustache;
 /** @type {!hbs.AST.ProgramNode} */
hbs.AST.RawBlockNode.prototype.program;
/**
 * @extends {hbs.AST.NodeBase}
 * @constructor
 * @struct
 */
hbs.AST.ContentNode = function() {};
 /** @type {string} */
hbs.AST.ContentNode.prototype.original;
 /** @type {string} */
hbs.AST.ContentNode.prototype.string;
/**
 * @extends {hbs.AST.NodeBase}
 * @constructor
 * @struct
 */
hbs.AST.DataNode = function() {};
 /** @type {!hbs.AST.IdNode} */
hbs.AST.DataNode.prototype.id;
 /** @type {string} */
hbs.AST.DataNode.prototype.stringModeValue;
 /** @type {string} */
hbs.AST.DataNode.prototype.idName;
/**
 * @extends {hbs.AST.NodeBase}
 * @constructor
 * @struct
 */
hbs.AST.StringNode = function() {};
 /** @type {string} */
hbs.AST.StringNode.prototype.original;
 /** @type {string} */
hbs.AST.StringNode.prototype.string;
 /** @type {string} */
hbs.AST.StringNode.prototype.stringModeValue;
/**
 * @extends {hbs.AST.NodeBase}
 * @constructor
 * @struct
 */
hbs.AST.NumberNode = function() {};
 /** @type {string} */
hbs.AST.NumberNode.prototype.original;
 /** @type {string} */
hbs.AST.NumberNode.prototype.number;
 /** @type {number} */
hbs.AST.NumberNode.prototype.stringModeValue;
/**
 * @extends {hbs.AST.NodeBase}
 * @constructor
 * @struct
 */
hbs.AST.BooleanNode = function() {};
 /** @type {string} */
hbs.AST.BooleanNode.prototype.bool;
 /** @type {boolean} */
hbs.AST.BooleanNode.prototype.stringModeValue;
/**
 * @extends {hbs.AST.NodeBase}
 * @constructor
 * @struct
 */
hbs.AST.CommentNode = function() {};
 /** @type {string} */
hbs.AST.CommentNode.prototype.comment;
 /** @type {!hbs.AST.IStripInfo} */
hbs.AST.CommentNode.prototype.strip;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "handlebars"
/** @const */
tsickle_declare_module.handlebars = {};

/* TODO: ExportAssignment in tsickle_declare_module.handlebars */
