/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/ui-router-extras/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "angular"
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IDeepStateRedirectService = function() {};

/**
 * @param {string} stateName
 * @param {!Object<string,(string|!Array<string>)>=} stateParams
 * @return {void}
 */
tsickle_declare_module.angular.ui.IDeepStateRedirectService.prototype.reset = function(stateName, stateParams) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IDeepStateRedirectConfig = function() {};
 /** @type {(string|!ui.IRedirectParams)} */
tsickle_declare_module.angular.ui.IDeepStateRedirectConfig.prototype.default;
 /** @type {(boolean|!Array<string>)} */
tsickle_declare_module.angular.ui.IDeepStateRedirectConfig.prototype.params;

/**
 * @param {{redirect: !ui.IRedirectParams, to: !ui.IRedirectParams}} $dsr$
 * @return {(boolean|!ui.IRedirectParams)}
 */
tsickle_declare_module.angular.ui.IDeepStateRedirectConfig.prototype.fn = function($dsr$) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IRedirectParams = function() {};
 /** @type {string} */
tsickle_declare_module.angular.ui.IRedirectParams.prototype.state;
 /** @type {!ui.IStateParamsService} */
tsickle_declare_module.angular.ui.IRedirectParams.prototype.params;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IPreviousState = function() {};
 /** @type {!ui.IState} */
tsickle_declare_module.angular.ui.IPreviousState.prototype.state;
 /** @type {!ui.IStateParamsService} */
tsickle_declare_module.angular.ui.IPreviousState.prototype.params;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IPreviousStateService = function() {};

/**
 * Get a previous state
 * @param {string=} memoName Memo name
 * @return {!ui.IPreviousState} Previous state
 */
tsickle_declare_module.angular.ui.IPreviousStateService.prototype.get = function(memoName) {};

/**
 * Go to a state
 * @param {string} memoName Memo name
 * @param {!ui.IStateOptions=} options State options
 * @return {!angular.IPromise<?>} Promise
 */
tsickle_declare_module.angular.ui.IPreviousStateService.prototype.go = function(memoName, options) {};

/**
 * Memorize a state
 * @param {string} memoName Memo name
 * @param {string=} defaultStateName Default state name
 * @param {!Object=} defaultStateParams Default state parameters
 * @return {void}
 */
tsickle_declare_module.angular.ui.IPreviousStateService.prototype.memo = function(memoName, defaultStateName, defaultStateParams) {};

/**
 * Forget a memorized name
 * @param {string} memoName Memo name
 * @return {void}
 */
tsickle_declare_module.angular.ui.IPreviousStateService.prototype.forget = function(memoName) {};
/**
 * @extends {ui.IState}
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IStickyState = function() {};
 /** @type {boolean} */
tsickle_declare_module.angular.ui.IStickyState.prototype.sticky;
 /** @type {(boolean|!ui.IDeepStateRedirectConfig)} */
tsickle_declare_module.angular.ui.IStickyState.prototype.deepStateRedirect;
 /** @type {(boolean|!ui.IDeepStateRedirectConfig)} */
tsickle_declare_module.angular.ui.IStickyState.prototype.dsr;
 /** @type {!Object<string,!ui.IState>} */
tsickle_declare_module.angular.ui.IStickyState.prototype.views;

/**
 * @param {...?} args
 * @return {void}
 */
tsickle_declare_module.angular.ui.IStickyState.prototype.onInactivate = function(args) {};

/**
 * @param {...?} args
 * @return {void}
 */
tsickle_declare_module.angular.ui.IStickyState.prototype.onReactivate = function(args) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IStickyStateService = function() {};

/**
 * @return {!Array<!ui.IStickyState>}
 */
tsickle_declare_module.angular.ui.IStickyStateService.prototype.getInactiveStates = function() {};
/**
 * @extends {angular.IServiceProvider}
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IStickyStateProvider = function() {};

/**
 * @return {boolean}
 */
tsickle_declare_module.angular.ui.IStickyStateProvider.prototype.debugMode = function() {};

/**
 * @param {boolean} enabled
 * @return {boolean}
 */
tsickle_declare_module.angular.ui.IStickyStateProvider.prototype.enableDebug = function(enabled) {};

/**
 * @param {!ui.IStickyState} state
 * @return {void}
 */
tsickle_declare_module.angular.ui.IStickyStateProvider.prototype.registerStickyState = function(state) {};

/**
 * @param {!ui.IStickyState|string} config_or_name
 * @param {!ui.IStickyState=} config
 * @return {!ui.IStateProvider}
 */
tsickle_declare_module.angular.ui.IStateProvider.prototype.state = function(config_or_name, config) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IFutureStateProvider = function() {};

/**
 * Registers a `FutureState` object as a placeholder for a full UI-Router `state` or `state` tree.
 * @param {!ui.IFutureState} state
 * @return {void}
 */
tsickle_declare_module.angular.ui.IFutureStateProvider.prototype.futureState = function(state) {};

/**
 * Registers a `StateFactory` function for `FutureState` of type `type`.
 * @param {string} type
 * @param {(function(!Array<?>): !angular.IPromise<!ui.IState>|!Array<(string|?)>)} stateFactory
 * @return {void}
 */
tsickle_declare_module.angular.ui.IFutureStateProvider.prototype.stateFactory = function(type, stateFactory) {};

/**
 * Adds a resolve function.
 * `$futureStateProvider` won't reject any state transitions or routes until all resolveFunction promises have been resolved.
 * Resolves may be used to defer routing until the states have been loaded via $http, for instance.
 * @param {(function(!Array<?>): !angular.IPromise<?>|!Array<(string|?)>)} resolveFn
 * @return {void}
 */
tsickle_declare_module.angular.ui.IFutureStateProvider.prototype.addResolve = function(resolveFn) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IFutureStateService = function() {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.ui.IFutureState = function() {};
 /** @type {string} */
tsickle_declare_module.angular.ui.IFutureState.prototype.stateName;
 /** @type {string} */
tsickle_declare_module.angular.ui.IFutureState.prototype.url;
 /** @type {string} */
tsickle_declare_module.angular.ui.IFutureState.prototype.type;

/* TODO: IndexSignature: tsickle_declare_module.angular.ui */

/** @typedef {(function(!Array<?>): !angular.IPromise<!ui.IState>|!Array<(string|?)>)} */
tsickle_declare_module.angular.ui.IFutureStateFactory;

/** @typedef {(function(!Array<?>): !angular.IPromise<?>|!Array<(string|?)>)} */
tsickle_declare_module.angular.ui.IResolveFunction;
