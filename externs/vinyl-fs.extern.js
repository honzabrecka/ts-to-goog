/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/vinyl-fs/index.d.ts:

/**
 * @param {?} buffer
 * @param {function(!Error): void=} cb
 * @return {boolean}
 */
NodeJS.WritableStream.prototype.write = function(buffer, cb) {};

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */
/**
 * @extends {Options}
 * @record
 * @struct
 */
function SrcOptions() {}
 /** @type {boolean} */
SrcOptions.prototype.allowEmpty;
 /** @type {string} */
SrcOptions.prototype.cwd;
 /** @type {string} */
SrcOptions.prototype.base;
 /** @type {boolean} */
SrcOptions.prototype.buffer;
 /** @type {number} */
SrcOptions.prototype.dirMode;
 /** @type {boolean} */
SrcOptions.prototype.dot;
 /** @type {boolean} */
SrcOptions.prototype.followSymlinks;
 /** @type {boolean} */
SrcOptions.prototype.read;
 /** @type {boolean} */
SrcOptions.prototype.relative;
 /** @type {(number|!Date)} */
SrcOptions.prototype.since;
 /** @type {boolean} */
SrcOptions.prototype.stripBOM;
 /** @type {boolean} */
SrcOptions.prototype.passthrough;
 /** @type {boolean} */
SrcOptions.prototype.sourcemaps;
 /** @type {boolean} */
SrcOptions.prototype.resolveSymlinks;
 /** @type {boolean} */
SrcOptions.prototype.removeBOM;
/**
 * @record
 * @struct
 */
function DestOptions() {}
 /** @type {string} */
DestOptions.prototype.cwd;
 /** @type {(string|number)} */
DestOptions.prototype.mode;
 /** @type {(string|number)} */
DestOptions.prototype.dirMode;
 /** @type {boolean} */
DestOptions.prototype.overwrite;
 /** @type {(string|boolean)} */
DestOptions.prototype.sourcemaps;
 /** @type {boolean} */
DestOptions.prototype.relativeSymlinks;
 /** @type {boolean} */
DestOptions.prototype.useJunctions;

/**
 * Gets files that match the glob and converts them into the vinyl format
 * @param {(string|!Array<string>)} globs Takes a glob string or an array of glob strings as the first argument
 * Globs are executed in order, so negations should follow positive globs
 * fs.src(['!b*.js', '*.js']) would not exclude any files, but this would: fs.src(['*.js', '!b*.js'])
 * @param {?=} opt Options Vinyl source options, changes the way the files are read, found, or stored in the vinyl stream
 * @return {!NodeJS.ReadWriteStream}
 */
function src(globs, opt) {}

/**
 * This is just a glob-watcher
 * 
 * This is just a glob-watcher
 * 
 * @param {(string|!Array<string>)} globs Takes a glob string or an array of glob strings as the first argument
 * Globs are executed in order, so negations should follow positive globs
 * fs.src(['!b*.js', '*.js']) would not exclude any files, but this would: fs.src(['*.js', '!b*.js'])
 * @param {?=} cb_or_opt
 * @param {?=} cb
 * @return {!internal.EventEmitter}
 */
function watch(globs, cb_or_opt, cb) {}

/**
 * On write the stream will save the vinyl File to disk at the folder/cwd specified.
 * After writing the file to disk, it will be emitted from the stream so you can keep piping these around.
 * The file will be modified after being written to this stream:
 * cwd, base, and path will be overwritten to match the folder
 * stat.mode will be overwritten if you used a mode parameter
 * contents will have it's position reset to the beginning if it is a stream
 * On write the stream will save the vinyl File to disk at the folder/cwd specified.
 * After writing the file to disk, it will be emitted from the stream so you can keep piping these around.
 * The file will be modified after being written to this stream:
 * cwd, base, and path will be overwritten to match the folder
 * stat.mode will be overwritten if you used a mode parameter
 * contents will have it's position reset to the beginning if it is a stream
 * @param {string|?} folder_or_getFolderPath destination folder / function that takes in a file and returns a folder path
 * @param {?=} opt
 * @return {!NodeJS.ReadWriteStream}
 */
function dest(folder_or_getFolderPath, opt) {}

/**
 * On write the stream will create a symbolic link (i.e. symlink) on disk at the folder/cwd specified.
 * After creating the symbolic link, it will be emitted from the stream so you can keep piping these around.
 * The file will be modified after being written to this stream:
 * cwd, base, and path will be overwritten to match the folder
 * On write the stream will create a symbolic link (i.e. symlink) on disk at the folder/cwd generated from getFolderPath.
 * After creating the symbolic link, it will be emitted from the stream so you can keep piping these around.
 * The file will be modified after being written to this stream:
 * cwd, base, and path will be overwritten to match the folder
 * @param {string|?} folder_or_getFolderPath
 * @param {?=} opts
 * @return {!NodeJS.ReadWriteStream}
 */
function symlink(folder_or_getFolderPath, opts) {}
