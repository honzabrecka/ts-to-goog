/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/react-router-redux v4/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */
 /** @type {string} */
var CALL_HISTORY_METHOD;
 /** @type {string} */
var LOCATION_CHANGE;
/**
 * @record
 * @struct
 */
function LocationActionPayload() {}
 /** @type {string} */
LocationActionPayload.prototype.method;
 /** @type {!Array<?>} */
LocationActionPayload.prototype.args;
/**
 * @extends {Action}
 * @record
 * @struct
 */
function RouterAction() {}
 /** @type {?} */
RouterAction.prototype.payload;

/** @typedef {?} */
var LocationAction;

/** @typedef {?} */
var GoAction;

/** @typedef {?} */
var NavigateAction;
 /** @type {?} */
var push;
 /** @type {?} */
var replace;
 /** @type {?} */
var go;
 /** @type {?} */
var goBack;
 /** @type {?} */
var goForward;
/**
 * @record
 * @struct
 */
function RouteActions() {}
 /** @type {?} */
RouteActions.prototype.push;
 /** @type {?} */
RouteActions.prototype.replace;
 /** @type {?} */
RouteActions.prototype.go;
 /** @type {?} */
RouteActions.prototype.goForward;
 /** @type {?} */
RouteActions.prototype.goBack;
 /** @type {?} */
var routerActions;
/**
 * @record
 * @struct
 */
function RouterState() {}
 /** @type {?} */
RouterState.prototype.locationBeforeTransitions;

/** @typedef {?} */
var DefaultSelectLocationState;
/**
 * @record
 * @struct
 */
function SyncHistoryWithStoreOptions() {}
 /** @type {?} */
SyncHistoryWithStoreOptions.prototype.selectLocationState;
 /** @type {boolean} */
SyncHistoryWithStoreOptions.prototype.adjustUrlOnReplay;
/**
 * @record
 * @struct
 */
function HistoryUnsubscribe() {}

/**
 * @return {void}
 */
HistoryUnsubscribe.prototype.unsubscribe = function() {};

/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
function routerReducer(state, action) {}

/**
 * @param {?} history
 * @param {?} store
 * @param {?=} options
 * @return {?}
 */
function syncHistoryWithStore(history, store, options) {}

/**
 * @param {?} history
 * @return {?}
 */
function routerMiddleware(history) {}
