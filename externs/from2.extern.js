/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/from2/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ExportAssignment in  */

/**
 * @param {(function(number, function(?, (string|?|!Uint8Array)): void): void|!Array<(string|?|!Uint8Array)>)|?} read_or_opts
 * @param {(!Array<?>|function(number, function(?, ?): void): void)|(function(number, function(?, (string|?|!Uint8Array)): void): void|!Array<(string|?|!Uint8Array)>)=} read
 * @return {!NodeJS.ReadableStream}
 */
function from2(read_or_opts, read) {}

/**
 * @param {(!Array<?>|function(number, function(?, ?): void): void)|?} read_or_opts
 * @param {(!Array<?>|function(number, function(?, ?): void): void)=} read
 * @return {!NodeJS.ReadableStream}
 */
from2.obj = function(read_or_opts, read) {};

/**
 * @param {?=} opts
 * @return {function(new: (!NodeJS.ReadableStream), (function(number, function(?, (string|?|!Uint8Array)): void): void|!Array<(string|?|!Uint8Array)>)): ?|function(new: (!NodeJS.ReadableStream), (!Array<?>|function(number, function(?, ?): void): void)): ?}
 */
from2.ctor = function(opts) {};

/** @typedef {?} */
from2.ObjectModeOptions;

/** @typedef {?} */
from2.Options;

/** @typedef {function(new: (!NodeJS.ReadableStream), R): ?} */
from2.From2Ctor;

/** @typedef {(!Array<?>|function(number, function(?, ?): void): void)} */
from2.ReadObjectInput;

/** @typedef {(function(number, function(?, (string|?|!Uint8Array)): void): void|!Array<(string|?|!Uint8Array)>)} */
from2.ReadInput;

/** @typedef {function(number, N): void} */
from2.ReadCallback;

/** @typedef {function(?, (string|?|!Uint8Array)): void} */
from2.NextCallback;

/** @typedef {function(?, ?): void} */
from2.NextObjectCallback;

/** @typedef {(string|?|!Uint8Array)} */
from2.Chunk;
