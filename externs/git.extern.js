/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/git/index.d.ts:

/**
 * @constructor
 * @struct
 * @param {?} gitDirectory
 */
function Git(gitDirectory) {}

/**
 * @param {?} options
 * @param {string} prefix
 * @param {function(?, string): void} callback
 * @return {void}
 */
Git.prototype.refs = function(options, prefix, callback) {};

/**
 * @param {string} gitDirectory
 * @param {string} file
 * @param {function(?, ?): void} callback
 * @return {void}
 */
Git.prototype.fs_read = function(gitDirectory, file, callback) {};

/**
 * @param {?} options
 * @return {!Array<string>}
 */
Git.prototype.transform_options = function(options) {};

/**
 * @param {?} functionName
 * @param {?} options
 * @param {...?} args
 * @return {void}
 */
Git.prototype.git = function(functionName, options, args) {};

/**
 * @param {string} prefix
 * @param {?} command
 * @param {string} postfix
 * @param {?} options
 * @param {?} args
 * @param {function(?, string): void} callback
 * @return {void}
 */
Git.prototype.call_git = function(prefix, command, postfix, options, args, callback) {};

/**
 * @param {!Function|?} callback_or_options
 * @param {!Function|string=} callback_or_reference
 * @param {!Function=} callback
 * @return {void}
 */
Git.prototype.rev_list = function(callback_or_options, callback_or_reference, callback) {};

/**
 * @param {?} options
 * @param {string} str
 * @param {!Function|number} callback_or_level
 * @param {!Function=} callback
 * @return {void}
 */
Git.prototype.rev_parse = function(options, str, callback_or_level, callback) {};

/**
 * @param {?} treeish
 * @param {!Function|!Array<?>} callback_or_paths
 * @param {!Function|?=} callback_or_options
 * @param {!Function=} callback
 * @return {void}
 */
Git.prototype.ls_tree = function(treeish, callback_or_paths, callback_or_options, callback) {};

/**
 * @param {?} type
 * @param {?} ref
 * @param {!Function} callback
 * @return {void}
 */
Git.prototype.cat_file = function(type, ref, callback) {};

/**
 * @param {?} ref
 * @param {!Function} callback
 * @return {void}
 */
Git.prototype.file_size = function(ref, callback) {};

/**
 * @param {?} dir
 * @param {!Function} callback
 * @return {void}
 */
Git.prototype.fs_mkdir = function(dir, callback) {};

/**
 * @param {?} options
 * @param {!Function} callback
 * @return {void}
 */
Git.prototype.init = function(options, callback) {};

/**
 * @param {?} options
 * @param {?} originalPath
 * @param {?} targetPath
 * @param {!Function} callback
 * @return {void}
 */
Git.prototype.clone = function(options, originalPath, targetPath, callback) {};

/**
 * @param {?} commit1
 * @param {?} commit2
 * @param {function(?, string): void|?} callback_or_options
 * @param {function(?, string): void=} callback
 * @return {void}
 */
Git.prototype.diff = function(commit1, commit2, callback_or_options, callback) {};

/**
 * @param {?} path
 * @param {!Function} callback
 * @return {void}
 */
Git.prototype.fs_exist = function(path, callback) {};

/**
 * @param {?} file
 * @param {?} content
 * @param {!Function} callback
 * @return {void}
 */
Git.prototype.fs_write = function(file, content, callback) {};

/**
 * @param {?} commit
 * @param {?} path
 * @param {?} options
 * @param {!Function} callback
 * @return {void}
 */
Git.prototype.log = function(commit, path, options, callback) {};

/**
 * @param {!Array<?>} objectIds
 * @param {!Function} callback
 * @return {void}
 */
Git.prototype.select_existing_objects = function(objectIds, callback) {};

/**
 * @param {?} options
 * @param {?} reference
 * @param {!Function} callback
 * @return {void}
 */
Git.prototype.format_patch = function(options, reference, callback) {};

/**
 * @param {!Function|?} callback_or_options
 * @param {!Function=} callback
 * @return {void}
 */
Git.prototype.blame = function(callback_or_options, callback) {};

/**
 * @param {?} commit
 * @param {!Function|?} callback_or_path
 * @param {!Function=} callback
 * @return {void}
 */
Git.prototype.blame_tree = function(commit, callback_or_path, callback) {};

/**
 * @param {?} commit
 * @param {!Function|?} callback_or_path
 * @param {!Function=} callback
 * @return {void}
 */
Git.prototype.looking_for = function(commit, callback_or_path, callback) {};

/**
 * @param {...?} args_or_options
 * @return {void}
 */
Git.prototype.commit = function(args_or_options) {};

/**
 * @param {...?} args_or_options
 * @return {void}
 */
Git.prototype.config = function(args_or_options) {};

/**
 * @param {...?} args_or_options
 * @return {void}
 */
Git.prototype.add = function(args_or_options) {};

/**
 * @param {...?} args_or_options
 * @return {void}
 */
Git.prototype.remove = function(args_or_options) {};

/**
 * @param {...?} args_or_options
 * @return {void}
 */
Git.prototype.ls_files = function(args_or_options) {};

/**
 * @param {...?} args_or_options
 * @return {void}
 */
Git.prototype.diff_files = function(args_or_options) {};

/**
 * @param {...?} args_or_options
 * @return {void}
 */
Git.prototype.diff_index = function(args_or_options) {};

/**
 * @param {...?} args_or_options
 * @return {void}
 */
Git.prototype.file_type = function(args_or_options) {};

/**
 * @param {...?} args_or_options
 * @return {void}
 */
Git.prototype.put_raw_object = function(args_or_options) {};

/**
 * @param {string} id
 * @return {?}
 */
Git.prototype.commit_from_sha = function(id) {};

/**
 * @constructor
 * @struct
 * @param {string} name
 * @param {string} email
 */
function Actor(name, email) {}
 /** @type {string} */
Actor.prototype.name;
 /** @type {string} */
Actor.prototype.email;

/**
 * @param {string} str
 * @return {!Actor}
 */
Actor.from_string = function(str) {};

/**
 * @constructor
 * @struct
 * @param {!Repo} repo
 * @param {string} file
 * @param {function(?, !Blame): void|string} callback_or_commit
 * @param {function(?, !Blame): void=} callback
 */
function Blame(repo, file, callback_or_commit, callback) {}
 /** @type {!Repo} */
Blame.prototype.repo;
 /** @type {string} */
Blame.prototype.file;
 /** @type {string} */
Blame.prototype.commit;
 /** @type {!Array<!BlameLine>} */
Blame.prototype.lines;

/**
 * @constructor
 * @struct
 * @param {number} lineno
 * @param {number} oldlineno
 * @param {?} commit
 * @param {string} line
 */
function BlameLine(lineno, oldlineno, commit, line) {}
 /** @type {number} */
BlameLine.prototype.lineno;
 /** @type {number} */
BlameLine.prototype.oldlineno;
 /** @type {?} */
BlameLine.prototype.commit;
 /** @type {string} */
BlameLine.prototype.line;

/**
 * @constructor
 * @struct
 * @param {?} repo
 * @param {?} id
 * @param {?} mode
 * @param {?} name
 */
function Blob(repo, id, mode, name) {}
 /** @type {!Repo} */
Blob.prototype.repo;
 /** @type {?} */
Blob.prototype.id;
 /** @type {?} */
Blob.prototype.mode;
 /** @type {?} */
Blob.prototype.name;
 /** @type {?} */
Blob.prototype.data;
 /** @type {?} */
Blob.prototype.size;
 /** @type {?} */
Blob.prototype.mine_type;
 /** @type {?} */
Blob.prototype.basename;

/**
 * @param {?} repo
 * @param {?} commit
 * @param {?} file
 * @param {!Function} callback
 * @return {void}
 */
Blob.blame = function(repo, commit, file, callback) {};

/**
 * @constructor
 * @struct
 * @param {!Repo} repo
 * @param {string} id
 * @param {!Array<?>} parents
 * @param {?} tree
 * @param {!Actor} author
 * @param {string} authoredDate
 * @param {!Actor} committer
 * @param {string} committedDate
 * @param {string} message
 * @param {?} filechanges
 */
function Commit(repo, id, parents, tree, author, authoredDate, committer, committedDate, message, filechanges) {}
 /** @type {!Repo} */
Commit.prototype.repo;
 /** @type {string} */
Commit.prototype.id;
 /** @type {!Array<?>} */
Commit.prototype.parents;
 /** @type {?} */
Commit.prototype.tree;
 /** @type {!Actor} */
Commit.prototype.author;
 /** @type {string} */
Commit.prototype.sha;
 /** @type {string} */
Commit.prototype.authored_date;
 /** @type {!Actor} */
Commit.prototype.committer;
 /** @type {string} */
Commit.prototype.committed_date;
 /** @type {string} */
Commit.prototype.message;
 /** @type {?} */
Commit.prototype.filechanges;
 /** @type {string} */
Commit.prototype.short_message;
 /** @type {?} */
Commit.prototype._id_abbrev;

/**
 * @param {!Function} callback
 * @return {void}
 */
Commit.prototype.load = function(callback) {};

/**
 * @param {!Function} callback
 * @return {void}
 */
Commit.prototype.id_abbrev = function(callback) {};

/**
 * @param {?} repo
 * @param {?} text
 * @return {!Array<!Commit>}
 */
Commit.list_from_string = function(repo, text) {};

/**
 * @param {?} repo
 * @param {!Function|?} callback_or_reference
 * @param {!Function|?=} callback_or_options
 * @param {!Function=} callback
 * @return {void}
 */
Commit.find_all = function(repo, callback_or_reference, callback_or_options, callback) {};

/**
 * @param {?} repo
 * @param {?} ref
 * @param {!Function} callback
 * @return {void}
 */
Commit.count = function(repo, ref, callback) {};

/**
 * @param {?} repo
 * @param {?} a
 * @param {!Function|?} callback_or_b
 * @param {!Function|?=} callback_or_paths
 * @param {!Function=} callback
 * @return {void}
 */
Commit.diff = function(repo, a, callback_or_b, callback_or_paths, callback) {};

/**
 * @param {!Function} callback
 * @return {void}
 */
Commit.prototype.show = function(callback) {};

/**
 * @param {!Function} callback
 * @return {void}
 */
Commit.prototype.diffs = function(callback) {};

/**
 * @param {!Function} callback
 * @return {void}
 */
Commit.prototype.toPatch = function(callback) {};

/**
 * @constructor
 * @struct
 * @param {?} repo
 * @param {?} id
 * @param {!Array<?>} files
 */
function CommitStats(repo, id, files) {}
 /** @type {?} */
CommitStats.prototype.repo;
 /** @type {?} */
CommitStats.prototype.id;
 /** @type {!Array<?>} */
CommitStats.prototype.files;
 /** @type {?} */
CommitStats.prototype.additions;
 /** @type {?} */
CommitStats.prototype.deletions;
 /** @type {?} */
CommitStats.prototype.total;

/**
 * @param {?} repo
 * @param {?} reference
 * @param {!Function|?} callback_or_options
 * @param {!Function=} callback
 * @return {void}
 */
CommitStats.find_all = function(repo, reference, callback_or_options, callback) {};

/**
 * @param {?} repo
 * @param {string} text
 * @return {!Array<!CommitStats>}
 */
CommitStats.list_from_string = function(repo, text) {};

/**
 * @constructor
 * @struct
 * @param {?} repo
 */
function Config(repo) {}
 /** @type {?} */
Config.prototype.repo;
 /** @type {?} */
Config.prototype.data;

/**
 * @param {?} key
 * @param {?} defaultValue
 * @return {?}
 */
Config.prototype.fetch = function(key, defaultValue) {};

/**
 * @param {?} key
 * @param {?} value
 * @param {!Function} callback
 * @return {void}
 */
Config.prototype.set = function(key, value, callback) {};

/**
 * @constructor
 * @struct
 * @param {?} repo
 * @param {?} aPath
 * @param {?} bPath
 * @param {?} aBlob
 * @param {?} bBlob
 * @param {?} aMode
 * @param {?} bMode
 * @param {?} newFile
 * @param {?} deletedFile
 * @param {?} diff
 */
function Diff(repo, aPath, bPath, aBlob, bBlob, aMode, bMode, newFile, deletedFile, diff) {}
 /** @type {?} */
Diff.prototype.repo;
 /** @type {?} */
Diff.prototype.a_path;
 /** @type {?} */
Diff.prototype.b_path;
 /** @type {?} */
Diff.prototype.a_blob;
 /** @type {?} */
Diff.prototype.b_blob;
 /** @type {?} */
Diff.prototype.a_mode;
 /** @type {?} */
Diff.prototype.b_mode;
 /** @type {?} */
Diff.prototype.new_file;
 /** @type {?} */
Diff.prototype.deleted_file;
 /** @type {?} */
Diff.prototype.diff;

/**
 * @param {?} repo
 * @param {?} text
 * @param {!Function} callback
 * @return {void}
 */
Diff.list_from_string = function(repo, text, callback) {};

/**
 * @constructor
 * @struct
 * @param {?} repoPath
 * @param {!Function} callback
 */
function FileIndex(repoPath, callback) {}
 /** @type {?} */
FileIndex.prototype.repo_path;
 /** @type {?} */
FileIndex.prototype.index_file;
 /** @type {?} */
FileIndex.prototype.sha_count;
 /** @type {?} */
FileIndex.prototype.commit_index;
 /** @type {?} */
FileIndex.prototype.commit_order;
 /** @type {?} */
FileIndex.prototype.all_files;

/**
 * @param {?} commitSha
 * @param {!Function} callback
 * @return {void}
 */
FileIndex.prototype.commits_from = function(commitSha, callback) {};

/**
 * @param {!Array<?>} shaArray
 * @return {!Array<?>}
 */
FileIndex.prototype.sort_commits = function(shaArray) {};

/**
 * @param {?} commitSha
 * @param {!Function} callback
 * @return {void}
 */
FileIndex.prototype.files = function(commitSha, callback) {};

/**
 * @param {!Function} callback
 * @return {void}
 */
FileIndex.prototype.count_all = function(callback) {};

/**
 * @param {?} commitSha
 * @param {!Function} callback
 * @return {void}
 */
FileIndex.prototype.count = function(commitSha, callback) {};

/**
 * @param {?} file
 * @param {!Function} callback
 * @return {void}
 */
FileIndex.prototype.commits_for = function(file, callback) {};

/**
 * @param {?} commitSha
 * @param {?} filesMatcher
 * @param {!Function} callback
 * @return {void}
 */
FileIndex.prototype.last_commits = function(commitSha, filesMatcher, callback) {};

/**
 * @constructor
 * @struct
 * @param {?} idxfile
 * @param {?} version
 */
function FileWindow(idxfile, version) {}
 /** @type {?} */
FileWindow.prototype.idxfile;
 /** @type {?} */
FileWindow.prototype.version;
 /** @type {?} */
FileWindow.prototype.global_offset;
 /** @type {?} */
FileWindow.prototype.offset;
 /** @type {?} */
FileWindow.prototype.seek_offset;

/**
 * @return {void}
 */
FileWindow.prototype.unmap = function() {};

/**
 * @param {number|!Array<?>} idx
 * @return {void}
 */
FileWindow.prototype.index = function(idx) {};

/**
 * @return {void}
 */
FileWindow.prototype.close = function() {};
/**
 * @constructor
 * @struct
 */
function GitFileOperations() {}

/**
 * @param {?} path
 * @return {?}
 */
GitFileOperations.glob_streaming = function(path) {};

/**
 * @param {?} path
 * @param {!Function|?} callback_or_files
 * @param {!Function=} callback
 * @return {void}
 */
GitFileOperations.glob = function(path, callback_or_files, callback) {};

/**
 * @param {?} path
 * @param {?} file
 * @param {!Function} callback
 * @return {void}
 */
GitFileOperations.fs_read = function(path, file, callback) {};

/**
 * @param {?} dir
 * @param {!Function} callback
 * @return {void}
 */
GitFileOperations.fs_mkdir = function(dir, callback) {};

/**
 * @param {?} dir
 * @param {?} path
 * @param {!Function} callback
 * @return {void}
 */
GitFileOperations.fs_exist = function(dir, path, callback) {};

/**
 * @param {?} dir
 * @param {!Function} callback
 * @return {void}
 */
GitFileOperations.fs_rmdir_r = function(dir, callback) {};

/**
 * @param {?} dir
 * @param {?} file
 * @param {?} content
 * @param {!Function} callback
 * @return {void}
 */
GitFileOperations.fs_write = function(dir, file, content, callback) {};

/**
 * @constructor
 * @struct
 * @param {?} repo
 */
function GitIndex(repo) {}
 /** @type {?} */
GitIndex.prototype.repo;
 /** @type {?} */
GitIndex.prototype.tree;
 /** @type {?} */
GitIndex.prototype.current_tree;

/**
 * @param {?} tree
 * @param {!Function} callback
 * @return {void}
 */
GitIndex.prototype.read_tree = function(tree, callback) {};

/**
 * @param {?} filePath
 * @param {?} data
 * @return {void}
 */
GitIndex.prototype.add = function(filePath, data) {};

/**
 * @param {?} message
 * @param {!Function|?} callback_or_parents
 * @param {!Function|?=} callback_or_actor
 * @param {!Function|?=} callback_or_lastTree
 * @param {!Function=} callback
 * @return {void}
 */
GitIndex.prototype.commit = function(message, callback_or_parents, callback_or_actor, callback_or_lastTree, callback) {};

/**
 * @param {?} tree
 * @param {!Function|?} callback_or_nowTree
 * @param {!Function=} callback
 * @return {?}
 */
GitIndex.prototype.write_tree = function(tree, callback_or_nowTree, callback) {};

/**
 * @param {?} data
 * @return {?}
 */
GitIndex.prototype.write_blob = function(data) {};
/**
 * @constructor
 * @struct
 */
function GitObject() {}

/**
 * @param {?} rawObject
 * @param {?} repository
 * @return {?}
 */
GitObject.from_raw = function(rawObject, repository) {};

/**
 * @constructor
 * @struct
 * @param {string} name
 * @param {?} commit
 */
function Head(name, commit) {}
 /** @type {string} */
Head.prototype.name;
 /** @type {?} */
Head.prototype.commit;

/**
 * @param {?} repo
 * @param {!Function|?} callback_or_options
 * @param {!Function=} callback
 * @return {void}
 */
Head.current = function(repo, callback_or_options, callback) {};

/**
 * @param {?} repo
 * @param {!Function|?} callback_or_options
 * @param {!Function=} callback
 * @return {void}
 */
Head.find_all = function(repo, callback_or_options, callback) {};

/**
 * @constructor
 * @struct
 * @param {?} directory
 */
function LooseStorage(directory) {}
 /** @type {?} */
LooseStorage.prototype.directory;

/**
 * @param {?} sha1
 * @return {!RawObject}
 */
LooseStorage.prototype.find = function(sha1) {};

/**
 * @param {?} buf
 * @return {!RawObject}
 */
LooseStorage.prototype.get_raw_object = function(buf) {};

/**
 * @param {?} buf
 * @return {!Array<?>}
 */
LooseStorage.prototype.unpack_object_header_gently = function(buf) {};

/**
 * @param {?} buf
 * @return {boolean}
 */
LooseStorage.prototype.is_legacy_loose_object = function(buf) {};

/**
 * @param {?} content
 * @param {?} type
 * @param {!Function} callback
 * @return {void}
 */
LooseStorage.prototype.put_raw_object = function(content, type, callback) {};

/**
 * @param {?} type
 * @param {?} size
 * @return {void}
 */
LooseStorage.verify_header = function(type, size) {};

/**
 * @constructor
 * @struct
 * @param {string} str
 */
function Merge(str) {}
 /** @type {string} */
Merge.STATUS_BOTH;
 /** @type {string} */
Merge.STATUS_OURS;
 /** @type {string} */
Merge.STATUS_THEIRS;
 /** @type {?} */
Merge.prototype.conflicts;
 /** @type {?} */
Merge.prototype.text;
 /** @type {?} */
Merge.prototype.sections;

/**
 * @constructor
 * @struct
 * @param {?} file
 */
function PackStorage(file) {}
 /** @type {?} */
PackStorage.prototype.name;
 /** @type {?} */
PackStorage.prototype.cache;
 /** @type {?} */
PackStorage.prototype.version;
 /** @type {?} */
PackStorage.prototype.offsets;
 /** @type {?} */
PackStorage.prototype.size;

/**
 * @param {?} sha1
 * @return {!RawObject}
 */
PackStorage.prototype.find = function(sha1) {};

/**
 * @return {void}
 */
PackStorage.prototype.close = function() {};

/**
 * @param {?} pack
 * @param {?} offset
 * @return {!RawObject}
 */
PackStorage.prototype.parse_object = function(pack, offset) {};

/**
 * @param {?} pack
 * @param {?} packfile
 * @param {?} offset
 * @param {?} options
 * @return {!Array<?>}
 */
PackStorage.prototype.unpack_object = function(pack, packfile, offset, options) {};

/**
 * @param {?} packfile
 * @param {?} type
 * @param {?} offset
 * @param {?} objOffset
 * @param {?} size
 * @param {?} options
 * @return {?}
 */
PackStorage.prototype.unpack_deltified = function(packfile, type, offset, objOffset, size, options) {};

/**
 * @constructor
 * @struct
 * @param {?} type
 * @param {?} content
 */
function RawObject(type, content) {}
 /** @type {?} */
RawObject.prototype.type;
 /** @type {?} */
RawObject.prototype.content;

/**
 * @param {string=} encoding
 * @return {?}
 */
RawObject.prototype.sha1 = function(encoding) {};

/**
 * @return {?}
 */
RawObject.prototype.sha1_hex = function() {};
/**
 * @constructor
 * @struct
 */
function Ref() {}

/**
 * @constructor
 * @struct
 * @param {?} name
 * @param {?} commit
 */
function Remote(name, commit) {}

/**
 * @param {?} repo
 * @param {!Function|?} callback_or_options
 * @param {!Function=} callback
 * @return {void}
 */
Remote.prototype.find_all = function(repo, callback_or_options, callback) {};

/**
 * @constructor
 * @struct
 * @param {string} path
 * @param {function(?, !Repo): void|?} callback_or_options
 * @param {function(?, !Repo): void=} callback
 */
function Repo(path, callback_or_options, callback) {}
 /** @type {string} */
Repo.prototype.path;
 /** @type {?} */
Repo.prototype.options;
 /** @type {?} */
Repo.prototype.git;
 /** @type {?} */
Repo.prototype.config_object;
 /** @type {?} */
Repo.prototype.bare;
 /** @type {?} */
Repo.prototype.working_directory;

/**
 * @param {function(?, !Head): void} callback
 * @return {void}
 */
Repo.prototype.head = function(callback) {};

/**
 * @param {function(?, !Array<!Head>): void} callback
 * @return {void}
 */
Repo.prototype.heads = function(callback) {};

/**
 * @param {!Function} callback
 * @return {void}
 */
Repo.prototype.tags = function(callback) {};

/**
 * @param {!Function|string} callback_or_start
 * @param {!Function|number=} callback_or_maxCount
 * @param {!Function|?=} callback_or_skip
 * @param {!Function=} callback
 * @return {void}
 */
Repo.prototype.commits = function(callback_or_start, callback_or_maxCount, callback_or_skip, callback) {};

/**
 * @param {string} id
 * @param {!Function} callback
 * @return {void}
 */
Repo.prototype.commit = function(id, callback) {};

/**
 * @param {?} start
 * @param {!Function} callback
 * @return {void}
 */
Repo.prototype.commit_count = function(start, callback) {};

/**
 * @param {!Function|string} callback_or_treeish
 * @param {!Function|?=} callback_or_paths
 * @param {!Function=} callback
 * @return {void}
 */
Repo.prototype.tree = function(callback_or_treeish, callback_or_paths, callback) {};

/**
 * @param {string} id
 * @param {!Function} callback
 * @return {void}
 */
Repo.prototype.blob = function(id, callback) {};

/**
 * @param {?} path
 * @param {?} gitOptions
 * @param {?} repoOptions
 * @param {!Function} callback
 * @return {void}
 */
Repo.prototype.init_bare = function(path, gitOptions, repoOptions, callback) {};

/**
 * @param {?} path
 * @param {!Function|?} callback_or_options
 * @param {!Function=} callback
 * @return {void}
 */
Repo.prototype.fork_bare = function(path, callback_or_options, callback) {};

/**
 * @param {string} a
 * @param {function(?, string): void|string} callback_or_b
 * @param {function(?, string): void|?=} callback_or_paths
 * @param {function(?, string): void=} callback
 * @return {void}
 */
Repo.prototype.diff = function(a, callback_or_b, callback_or_paths, callback) {};

/**
 * @param {string} commit
 * @param {!Function} callback
 * @return {void}
 */
Repo.prototype.commit_diff = function(commit, callback) {};

/**
 * @param {!Function} callback
 * @return {void}
 */
Repo.prototype.alternates = function(callback) {};

/**
 * @param {?} alts
 * @param {!Function} callback
 * @return {void}
 */
Repo.prototype.set_alternates = function(alts, callback) {};

/**
 * @param {function(?, !Array<!Commit>): void|string} callback_or_commit
 * @param {function(?, !Array<!Commit>): void|?=} callback_or_path
 * @param {function(?, !Array<!Commit>): void|?=} callback_or_options
 * @param {function(?, !Array<!Commit>): void=} callback
 * @return {void}
 */
Repo.prototype.log = function(callback_or_commit, callback_or_path, callback_or_options, callback) {};

/**
 * @param {?} otherRepo
 * @param {!Function|?} callback_or_reference
 * @param {!Function|?=} callback_or_otherReference
 * @param {!Function=} callback
 * @return {void}
 */
Repo.prototype.commit_deltas_from = function(otherRepo, callback_or_reference, callback_or_otherReference, callback) {};

/**
 * @param {!Function} callback
 * @return {void}
 */
Repo.prototype.refs = function(callback) {};

/**
 * @param {!Function} callback
 * @return {void}
 */
Repo.prototype.description = function(callback) {};

/**
 * @param {?} head
 * @param {?} commitSha
 * @param {!Function} callback
 * @return {void}
 */
Repo.prototype.update_ref = function(head, commitSha, callback) {};

/**
 * @param {?} headName
 * @param {!Function} callback
 * @return {void}
 */
Repo.prototype.get_head = function(headName, callback) {};

/**
 * @param {string} file
 * @param {string} commit
 * @param {function(?, !Blame): void} callback
 * @return {void}
 */
Repo.prototype.blame = function(file, commit, callback) {};

/**
 * @param {!Function|?} callback_or_start
 * @param {!Function|?=} callback_or_maxCount
 * @param {!Function|?=} callback_or_skip
 * @param {!Function=} callback
 * @return {void}
 */
Repo.prototype.commit_stats = function(callback_or_start, callback_or_maxCount, callback_or_skip, callback) {};

/**
 * @param {?} message
 * @param {!Function} callback
 * @return {void}
 */
Repo.prototype.commit_index = function(message, callback) {};

/**
 * @param {?} message
 * @param {!Function} callback
 * @return {void}
 */
Repo.prototype.commit_all = function(message, callback) {};

/**
 * @param {!Function} callback
 * @return {void}
 */
Repo.prototype.config = function(callback) {};

/**
 * @param {?} files
 * @param {!Function} callback
 * @return {void}
 */
Repo.prototype.add = function(files, callback) {};

/**
 * @param {?} files
 * @param {!Function} callback
 * @return {void}
 */
Repo.prototype.remove = function(files, callback) {};

/**
 * @param {!Function} callback
 * @return {void}
 */
Repo.prototype.status = function(callback) {};

/**
 * @param {?} headName
 * @param {!Function} callback
 * @return {void}
 */
Repo.prototype.is_head = function(headName, callback) {};

/**
 * @param {!Function} callback
 * @return {void}
 */
Repo.prototype.index = function(callback) {};

/**
 * @constructor
 * @struct
 * @param {?} gitDirectory
 * @param {?=} options
 */
function Repository(gitDirectory, options) {}
 /** @type {?} */
Repository.prototype.git_directory;
 /** @type {?} */
Repository.prototype.options;
 /** @type {?} */
Repository.prototype.already_searched;
 /** @type {?} */
Repository.prototype.packs;
 /** @type {?} */
Repository.prototype.loose;

/**
 * @param {string} sha1
 * @return {?}
 */
Repository.prototype.get_object_by_sha1 = function(sha1) {};

/**
 * @param {?} treeSha1
 * @param {?} treeSha2
 * @param {?} pathLimiter
 * @return {boolean}
 */
Repository.prototype.files_changed = function(treeSha1, treeSha2, pathLimiter) {};

/**
 * @param {?} sha
 * @return {?}
 */
Repository.prototype.cat_file = function(sha) {};

/**
 * @param {?} sha
 * @return {number}
 */
Repository.prototype.cat_file_size = function(sha) {};

/**
 * @param {?} sha
 * @return {?}
 */
Repository.prototype.cat_file_type = function(sha) {};

/**
 * @param {?} sha
 * @param {?} paths
 * @param {?} recursive
 * @return {?}
 */
Repository.prototype.ls_tree = function(sha, paths, recursive) {};

/**
 * @param {?} sha
 * @param {?} recursive
 * @return {?}
 */
Repository.prototype.get_raw_tree = function(sha, recursive) {};

/**
 * @param {?} sha
 * @param {?} path
 * @return {string}
 */
Repository.prototype.get_raw_trees = function(sha, path) {};

/**
 * @param {?} sha
 * @param {?} path
 * @param {?} append
 * @return {?}
 */
Repository.prototype.ls_tree_path = function(sha, path, append) {};

/**
 * @param {?} tree1
 * @param {?} tree2
 * @param {?} path
 * @param {?} recurse
 * @return {!Array<?>}
 */
Repository.prototype.quick_diff = function(tree1, tree2, path, recurse) {};

/**
 * @param {?} sha
 * @return {?}
 */
Repository.prototype.list_tree = function(sha) {};

/**
 * @param {?} sha
 * @param {?} options
 * @param {!Function} callback
 * @return {void}
 */
Repository.prototype.rev_list = function(sha, options, callback) {};

/**
 * @param {?} sha1
 * @param {!Function} callback
 * @return {void}
 */
Repository.prototype.object_exists = function(sha1, callback) {};

/**
 * @param {?} shaHex
 * @param {!Function} callback
 * @return {void}
 */
Repository.prototype.in_packs = function(shaHex, callback) {};

/**
 * @param {?} shaHex
 * @param {!Function} callback
 * @return {void}
 */
Repository.prototype.in_loose = function(shaHex, callback) {};

/**
 * @param {?} commitSha
 * @param {?} path
 * @param {!Function} callback
 * @return {void}
 */
Repository.prototype.get_subtree = function(commitSha, path, callback) {};

/**
 * @param {?} dir
 * @param {?} bare
 * @param {!Function} callback
 * @return {void}
 */
Repository.init = function(dir, bare, callback) {};

/**
 * @param {?} content
 * @param {?} type
 * @param {!Function} callback
 * @return {?}
 */
Repository.prototype.put_raw_object = function(content, type, callback) {};

/**
 * @constructor
 * @struct
 * @param {?} repo
 * @param {!Function} callback
 */
function Status(repo, callback) {}
 /** @type {?} */
Status.prototype.repo;
 /** @type {!Array<?>} */
Status.prototype.files;

/**
 * @param {?} file
 * @return {?}
 */
Status.prototype.index = function(file) {};

/**
 * @constructor
 * @struct
 * @param {?} repo
 * @param {?} hash
 */
function StatusFile(repo, hash) {}
 /** @type {?} */
StatusFile.prototype.repo;
 /** @type {?} */
StatusFile.prototype.path;
 /** @type {?} */
StatusFile.prototype.type;
 /** @type {?} */
StatusFile.prototype.stage;
 /** @type {?} */
StatusFile.prototype.mode_index;
 /** @type {?} */
StatusFile.prototype.mode_repo;
 /** @type {?} */
StatusFile.prototype.sha_index;
 /** @type {?} */
StatusFile.prototype.sha_repo;
 /** @type {?} */
StatusFile.prototype.untracked;

/**
 * @constructor
 * @struct
 * @param {?} repo
 * @param {?} id
 * @param {?} mode
 * @param {?} name
 */
function Submodule(repo, id, mode, name) {}
 /** @type {?} */
Submodule.prototype.repo;
 /** @type {?} */
Submodule.prototype.id;
 /** @type {?} */
Submodule.prototype.mode;
 /** @type {?} */
Submodule.prototype.name;
 /** @type {?} */
Submodule.prototype.basename;

/**
 * @param {?} repo
 * @param {?} attributes
 * @param {!Function} callback
 * @return {void}
 */
Submodule.create = function(repo, attributes, callback) {};

/**
 * @param {?} repo
 * @param {?} ref
 * @param {!Function} callback
 * @return {void}
 */
Submodule.config = function(repo, ref, callback) {};

/**
 * @constructor
 * @struct
 * @param {?} name
 * @param {?} commit
 */
function Tag(name, commit) {}
 /** @type {?} */
Tag.prototype.name;
 /** @type {?} */
Tag.prototype.commit;

/**
 * @param {?} repo
 * @param {!Function|?} callback_or_options
 * @param {!Function=} callback
 * @return {void}
 */
Tag.find_all = function(repo, callback_or_options, callback) {};

/**
 * @constructor
 * @struct
 * @param {?} repo
 * @param {?} id
 * @param {?} mode
 * @param {?} name
 * @param {?} contents
 */
function Tree(repo, id, mode, name, contents) {}
 /** @type {?} */
Tree.prototype.repo;
 /** @type {?} */
Tree.prototype.id;
 /** @type {?} */
Tree.prototype.mode;
 /** @type {?} */
Tree.prototype.name;
 /** @type {?} */
Tree.prototype.contents;
 /** @type {?} */
Tree.prototype.basename;

/**
 * @param {?} repo
 * @param {?} text
 * @param {!Function} callback
 * @return {void}
 */
Tree.content_from_string = function(repo, text, callback) {};

/**
 * @param {string} file
 * @return {?}
 */
Tree.prototype.find = function(file) {};

/**
 * @param {?} repo
 * @param {!Function|?} callback_or_attributes
 * @param {!Function=} callback
 * @return {void}
 */
Tree.create = function(repo, callback_or_attributes, callback) {};

/**
 * @constructor
 * @struct
 * @param {string} str
 */
function UserInfo(str) {}
 /** @type {?} */
UserInfo.prototype.name;
 /** @type {?} */
UserInfo.prototype.email;
 /** @type {?} */
UserInfo.prototype.date;
 /** @type {?} */
UserInfo.prototype.offset;
