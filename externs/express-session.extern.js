/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/express-session/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */
 /** @type {!Express.Session} */
Express.Request.prototype.session;
 /** @type {string} */
Express.Request.prototype.sessionID;
/**
 * @record
 * @struct
 */
Express.SessionData = function() {};

/* TODO: IndexSignature: Express */
 /** @type {!Express.SessionCookieData} */
Express.SessionData.prototype.cookie;
/**
 * @record
 * @struct
 */
Express.SessionCookieData = function() {};
 /** @type {number} */
Express.SessionCookieData.prototype.originalMaxAge;
 /** @type {string} */
Express.SessionCookieData.prototype.path;
 /** @type {number} */
Express.SessionCookieData.prototype.maxAge;
 /** @type {boolean} */
Express.SessionCookieData.prototype.secure;
 /** @type {boolean} */
Express.SessionCookieData.prototype.httpOnly;
 /** @type {string} */
Express.SessionCookieData.prototype.domain;
 /** @type {(boolean|!Date)} */
Express.SessionCookieData.prototype.expires;
/**
 * @extends {Express.SessionCookieData}
 * @record
 * @struct
 */
Express.SessionCookie = function() {};

/**
 * @param {string} name
 * @param {string} value
 * @return {string}
 */
Express.SessionCookie.prototype.serialize = function(name, value) {};
/**
 * @extends {Express.SessionData}
 * @record
 * @struct
 */
Express.Session = function() {};
 /** @type {string} */
Express.Session.prototype.id;
 /** @type {!Express.SessionCookie} */
Express.Session.prototype.cookie;

/**
 * @param {function(?): void} callback
 * @return {void}
 */
Express.Session.prototype.regenerate = function(callback) {};

/**
 * @param {function(?): void} callback
 * @return {void}
 */
Express.Session.prototype.destroy = function(callback) {};

/**
 * @param {function(?): void} callback
 * @return {void}
 */
Express.Session.prototype.reload = function(callback) {};

/**
 * @param {function(?): void} callback
 * @return {void}
 */
Express.Session.prototype.save = function(callback) {};

/**
 * @param {function(?): void} callback
 * @return {void}
 */
Express.Session.prototype.touch = function(callback) {};

/**
 * @param {!session.SessionOptions=} options
 * @return {!e.RequestHandler}
 */
function session(options) {}
/**
 * @record
 * @struct
 */
session.SessionOptions = function() {};
 /** @type {string} */
session.SessionOptions.prototype.secret;
 /** @type {string} */
session.SessionOptions.prototype.name;
 /** @type {(!session.Store|!session.MemoryStore)} */
session.SessionOptions.prototype.store;
 /** @type {!e.CookieOptions} */
session.SessionOptions.prototype.cookie;
 /** @type {boolean} */
session.SessionOptions.prototype.rolling;
 /** @type {boolean} */
session.SessionOptions.prototype.resave;
 /** @type {boolean} */
session.SessionOptions.prototype.proxy;
 /** @type {boolean} */
session.SessionOptions.prototype.saveUninitialized;
 /** @type {string} */
session.SessionOptions.prototype.unset;

/**
 * @param {!e.Request} req
 * @return {string}
 */
session.SessionOptions.prototype.genid = function(req) {};
/**
 * @record
 * @struct
 */
session.BaseMemoryStore = function() {};
 /** @type {function(string, function(?, !Express.Session): void): void} */
session.BaseMemoryStore.prototype.get;
 /** @type {function(string, !Express.Session, function(?): void): void} */
session.BaseMemoryStore.prototype.set;
 /** @type {function(string, function(?): void): void} */
session.BaseMemoryStore.prototype.destroy;
 /** @type {function(function(?, number): void): void} */
session.BaseMemoryStore.prototype.length;
 /** @type {function(function(?): void): void} */
session.BaseMemoryStore.prototype.clear;

/**
 * @constructor
 * @struct
 * @param {?=} config
 */
session.Store = function(config) {};
 /** @type {function(!e.Request, function(?): ?): void} */
session.Store.prototype.regenerate;
 /** @type {function(string, function(?, !Express.Session): ?): void} */
session.Store.prototype.load;
 /** @type {function(!e.Request, !Express.SessionData): void} */
session.Store.prototype.createSession;
 /** @type {function(string, function(?, !Express.Session): void): void} */
session.Store.prototype.get;
 /** @type {function(string, !Express.Session, function(?): void): void} */
session.Store.prototype.set;
 /** @type {function(string, function(?): void): void} */
session.Store.prototype.destroy;
 /** @type {function(function(?, !Object<string,!Express.SessionData>): void): void} */
session.Store.prototype.all;
 /** @type {function(function(?, number): void): void} */
session.Store.prototype.length;
 /** @type {function(function(?): void): void} */
session.Store.prototype.clear;
/**
 * @implements {session.BaseMemoryStore}
 * @constructor
 * @struct
 */
session.MemoryStore = function() {};
 /** @type {function(string, function(?, !Express.Session): void): void} */
session.MemoryStore.prototype.get;
 /** @type {function(string, !Express.Session, function(?): void): void} */
session.MemoryStore.prototype.set;
 /** @type {function(string, function(?): void): void} */
session.MemoryStore.prototype.destroy;
 /** @type {function(function(?, !Object<string,!Express.Session>): void): void} */
session.MemoryStore.prototype.all;
 /** @type {function(function(?, number): void): void} */
session.MemoryStore.prototype.length;
 /** @type {function(function(?): void): void} */
session.MemoryStore.prototype.clear;

/* TODO: ExportAssignment in  */
