/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/rison/index.d.ts:

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
 /** @type {?} */
var rison;
/**
 * @record
 * @struct
 */
function IRison() {}

/**
 * Rison-encodes a javascript structure.
 * @param {?} obj Object to encode.
 * @return {string}
 */
IRison.prototype.encode = function(obj) {};

/**
 * Rison-encodes a javascript object without surrounding parens (O-Rison).
 * @template T
 * @param {?} obj Object to encode.
 * @return {string}
 */
IRison.prototype.encode_object = function(obj) {};

/**
 * Rison-encodes a javascript array without surrounding parens (A-Rison).
 * @template T
 * @param {!Array<?>} arr
 * @return {string}
 */
IRison.prototype.encode_array = function(arr) {};

/**
 * Rison-encodes and then url-escapes a javascript structure.
 * @param {?} obj Object to encode.
 * @return {string}
 */
IRison.prototype.encode_uri = function(obj) {};

/**
 * Parses a Rison string into a javascript structure.
 * @template T
 * @param {string} encoded Encoded string.
 * @return {?}
 */
IRison.prototype.decode = function(encoded) {};

/**
 * Parses a O-Rison string into a javascript object.
 * @template T
 * @param {string} encoded Encoded string.
 * @return {?}
 */
IRison.prototype.decode_object = function(encoded) {};

/**
 * Parses a A-Rison string into a javascript array.
 * @template T
 * @param {string} encoded Encoded string.
 * @return {!Array<?>}
 */
IRison.prototype.decode_array = function(encoded) {};
