/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cordova-plugin-ouralabs/index.d.ts:
/** @const */
var OuralabsPlugin = {};
/**
 * @record
 * @struct
 */
OuralabsPlugin.OuralabsStatic = function() {};
 /** @type {{TRACE: number, DEBUG: number, INFO: number, WARN: number, ERROR: number, FATAL: number}} */
OuralabsPlugin.OuralabsStatic.prototype.LogLevel;

/**
 * Initialize the Ourlabs plugin with the given channel ID string value.
 * You can obtain your channel ID from the Ouralabs dashboard.
 * 
 * @param {string} channelId The ID of the channel that logs will be written to.
 * @param {function(): void=} successCallback The success callback for this asynchronous function.
 * @param {function(string): void=} failureCallback The failure callback for this asynchronous function; receives an error string.
 * @return {void}
 */
OuralabsPlugin.OuralabsStatic.prototype.init = function(channelId, successCallback, failureCallback) {};

/**
 * Used to ensure values logged via the plugin are also displayed in the browser's console.
 * 
 * @param {boolean} enable True to enable logs to show up in the browser's console, false  to disable.
 * @return {void}
 */
OuralabsPlugin.OuralabsStatic.prototype.setLogToBrowserConsole = function(enable) {};

/**
 * Used to enable hooking of the browser's console logging functions (eg console.log,
 * console.error, etc) to ensure that these logs get logged via Ouralabs.
 * 
 * @param {boolean} enable True to enable hooking of the console log functions, false to disable.
 * @return {void}
 */
OuralabsPlugin.OuralabsStatic.prototype.setHookBrowserConsole = function(enable) {};

/**
 * Allows setting of the three arbitrary attribute values that are stored with the device information.
 * 
 * @param {string=} attribute1
 * @param {string=} attribute2
 * @param {string=} attribute3
 * @param {function(): void=} successCallback
 * @param {function(string): void=} errorCallback
 * @return {void}
 */
OuralabsPlugin.OuralabsStatic.prototype.setAttributes = function(attribute1, attribute2, attribute3, successCallback, errorCallback) {};

/**
 * Logs a log message of level TRACE with the given information.
 * 
 * @param {string} tag The tag for the log entry.
 * @param {string} message The body of the log message.
 * @param {?=} metadata An optional object to be appended to the log message in JSON format. If the object cannot be serialized into JSON it will be flattened into key/value pairs.
 * @param {function(): void=} successCallback The success callback for this asynchronous function.
 * @param {function(string): void=} failureCallback The failure callback for this asynchronous function; receives an error string.
 * @return {void}
 */
OuralabsPlugin.OuralabsStatic.prototype.logTrace = function(tag, message, metadata, successCallback, failureCallback) {};

/**
 * Logs a log message of level DEBUG with the given information.
 * 
 * @param {string} tag The tag for the log entry.
 * @param {string} message The body of the log message.
 * @param {?=} metadata An optional object to be appended to the log message in JSON format. If the object cannot be serialized into JSON it will be flattened into key/value pairs.
 * @param {function(): void=} successCallback The success callback for this asynchronous function.
 * @param {function(string): void=} failureCallback The failure callback for this asynchronous function; receives an error string.
 * @return {void}
 */
OuralabsPlugin.OuralabsStatic.prototype.logDebug = function(tag, message, metadata, successCallback, failureCallback) {};

/**
 * Logs a log message of level INFO with the given information.
 * 
 * @param {string} tag The tag for the log entry.
 * @param {string} message The body of the log message.
 * @param {?=} metadata An optional object to be appended to the log message in JSON format. If the object cannot be serialized into JSON it will be flattened into key/value pairs.
 * @param {function(): void=} successCallback The success callback for this asynchronous function.
 * @param {function(string): void=} failureCallback The failure callback for this asynchronous function; receives an error string.
 * @return {void}
 */
OuralabsPlugin.OuralabsStatic.prototype.logInfo = function(tag, message, metadata, successCallback, failureCallback) {};

/**
 * Logs a log message of level WARN with the given information.
 * 
 * @param {string} tag The tag for the log entry.
 * @param {string} message The body of the log message.
 * @param {?=} metadata An optional object to be appended to the log message in JSON format. If the object cannot be serialized into JSON it will be flattened into key/value pairs.
 * @param {function(): void=} successCallback The success callback for this asynchronous function.
 * @param {function(string): void=} failureCallback The failure callback for this asynchronous function; receives an error string.
 * @return {void}
 */
OuralabsPlugin.OuralabsStatic.prototype.logWarn = function(tag, message, metadata, successCallback, failureCallback) {};

/**
 * Logs a log message of level ERROR with the given information.
 * 
 * @param {string} tag The tag for the log entry.
 * @param {string} message The body of the log message.
 * @param {?=} metadata An optional object to be appended to the log message in JSON format. If the object cannot be serialized into JSON it will be flattened into key/value pairs.
 * @param {function(): void=} successCallback The success callback for this asynchronous function.
 * @param {function(string): void=} failureCallback The failure callback for this asynchronous function; receives an error string.
 * @return {void}
 */
OuralabsPlugin.OuralabsStatic.prototype.logError = function(tag, message, metadata, successCallback, failureCallback) {};

/**
 * Logs a log message of level FATAL with the given information.
 * 
 * @param {string} tag The tag for the log entry.
 * @param {string} message The body of the log message.
 * @param {?=} metadata An optional object to be appended to the log message in JSON format. If the object cannot be serialized into JSON it will be flattened into key/value pairs.
 * @param {function(): void=} successCallback The success callback for this asynchronous function.
 * @param {function(string): void=} failureCallback The failure callback for this asynchronous function; receives an error string.
 * @return {void}
 */
OuralabsPlugin.OuralabsStatic.prototype.logFatal = function(tag, message, metadata, successCallback, failureCallback) {};

/**
 * Logs a message with the given information.
 * 
 * @param {number} logLevel The level of the log; see OuralabsPlugin.LogLevels for possible values.
 * @param {string} tag The tag for the log entry.
 * @param {string} message The body of the log message.
 * @param {?=} metadata An optional object to be appended to the log message in JSON format. If the object cannot be serialized into JSON it will be flattened into key/value pairs.
 * @param {function(): void=} successCallback The success callback for this asynchronous function.
 * @param {function(string): void=} failureCallback The failure callback for this asynchronous function; receives an error string.
 * @return {void}
 */
OuralabsPlugin.OuralabsStatic.prototype.log = function(logLevel, tag, message, metadata, successCallback, failureCallback) {};
 /** @type {!OuralabsPlugin.OuralabsStatic} */
var OuralabsPlugin;
