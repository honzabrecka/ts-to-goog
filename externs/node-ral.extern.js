/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/node-ral/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */
/**
 * @record
 * @struct
 */
function LogInfo() {}
 /** @type {string} */
LogInfo.prototype.service;
 /** @type {string} */
LogInfo.prototype.requestID;
 /** @type {string} */
LogInfo.prototype.conv;
 /** @type {string} */
LogInfo.prototype.prot;
 /** @type {string} */
LogInfo.prototype.method;
 /** @type {string} */
LogInfo.prototype.path;
 /** @type {string} */
LogInfo.prototype.proxy;
 /** @type {string} */
LogInfo.prototype.query;
 /** @type {string} */
LogInfo.prototype.remote;
 /** @type {string} */
LogInfo.prototype.cost;
 /** @type {string} */
LogInfo.prototype.talk;
 /** @type {string} */
LogInfo.prototype.write;
 /** @type {string} */
LogInfo.prototype.read;
 /** @type {string} */
LogInfo.prototype.pack;
 /** @type {string} */
LogInfo.prototype.unpack;
 /** @type {string} */
LogInfo.prototype.retry;

/**
 * @param {string} serviceName
 * @param {!Object=} options
 * @return {?}
 */
function RAL(serviceName, options) {}

/**
 * @param {string} extPath
 * @return {void}
 */
RAL.appendExtPath = function(extPath) {};

/**
 * @param {?} normalizers
 * @return {void}
 */
RAL.setConfigNormalizer = function(normalizers) {};

/**
 * @param {string} name
 * @return {?}
 */
RAL.getConf = function(name) {};

/**
 * @param {string} name
 * @return {?}
 */
RAL.getRawConf = function(name) {};

/**
 * @param {!Object=} options
 * @return {void}
 */
RAL.init = function(options) {};

/**
 * @param {!Object=} options
 * @return {void}
 */
RAL.reload = function(options) {};

/**
 * @constructor
 * @struct
 * @param {string} serviceName
 * @param {!Object=} options
 */
RAL.RalRunner = function(serviceName, options) {};

/**
 * @return {void}
 */
RAL.RalRunner.prototype.doRequest = function() {};

/**
 * @return {?}
 */
RAL.RalRunner.prototype.getLogInfo = function() {};

/**
 * @param {?} err
 * @return {void}
 */
RAL.RalRunner.prototype.throwError = function(err) {};

/**
 * @param {?} err
 * @return {void}
 */
RAL.RalRunner.prototype.callRetry = function(err) {};

/**
 * @constructor
 * @struct
 */
RAL.NormalizerManager = function() {};
 /** @type {!Array<string>} */
RAL.NormalizerManager.prototype.normalizers;

/**
 * @param {!Array<string>} normalizers
 * @return {void}
 */
RAL.NormalizerManager.prototype.setConfigNormalizer = function(normalizers) {};

/**
 * @param {?} config
 * @return {boolean}
 */
RAL.NormalizerManager.prototype.needUpdate = function(config) {};

/**
 * @param {!Object} config
 * @return {!Object}
 */
RAL.NormalizerManager.prototype.apply = function(config) {};
/**
 * @record
 * @struct
 */
function Config() {}
 /** @type {?} */
Config.prototype.normalizerManager;

/**
 * @param {?=} config
 * @return {?}
 */
Config.prototype.loadRawConf = function(config) {};

/**
 * @param {string} confPath
 * @return {!Object}
 */
Config.prototype.load = function(confPath) {};

/**
 * @param {?=} config
 * @return {!Object}
 */
Config.prototype.normalize = function(config) {};

/**
 * @param {string} serviceID
 * @param {?=} options
 * @return {?}
 */
Config.prototype.getContext = function(serviceID, options) {};

/**
 * @param {string} name
 * @return {?}
 */
Config.prototype.getConf = function(name) {};

/**
 * @return {void}
 */
Config.prototype.clearConf = function() {};

/**
 * @return {!Array<string>}
 */
Config.prototype.getConfNames = function() {};

/**
 * @return {?}
 */
Config.prototype.getRawConf = function() {};

/**
 * @return {?}
 */
Config.prototype.getUpdateNeededRawConf = function() {};

/**
 * @param {number} interval
 * @param {boolean} all
 * @param {?} cb
 * @return {void}
 */
Config.prototype.enableUpdate = function(interval, all, cb) {};

/**
 * @return {void}
 */
Config.prototype.disableUpdate = function() {};

/**
 * @return {boolean}
 */
Config.prototype.isAutoUpdateEnabled = function() {};
 /** @type {?} */
var Config;

/**
 * @constructor
 * @struct
 */
function RalModule() {}
 /** @type {?} */
RalModule.modules;

/**
 * @abstract
 * @return {string}
 */
RalModule.prototype.getCategory = function() {};

/**
 * @abstract
 * @return {string}
 */
RalModule.prototype.getName = function() {};

/**
 * @return {void}
 */
RalModule.clearCache = function() {};

/**
 * @param {(string|?)} pathOrModule
 * @return {void}
 */
RalModule.load = function(pathOrModule) {};
/**
 * @record
 * @struct
 */
function Server() {}
 /** @type {string} */
Server.prototype.idc;
 /** @type {string} */
Server.prototype.host;
 /** @type {(string|number)} */
Server.prototype.port;

/** @typedef {string} */
var buildInConverter;
/**
 * @record
 * @struct
 */
function Service() {}
 /** @type {string} */
Service.prototype.method;
 /** @type {!Array<?>} */
Service.prototype.server;
 /** @type {boolean} */
Service.prototype.hybird;
 /** @type {number} */
Service.prototype.timeout;
 /** @type {number} */
Service.prototype.retry;
 /** @type {string} */
Service.prototype.unpack;
 /** @type {string} */
Service.prototype.pack;
 /** @type {string} */
Service.prototype.encoding;
 /** @type {string} */
Service.prototype.balance;
 /** @type {string} */
Service.prototype.protocol;
 /** @type {?} */
Service.prototype.headers;
 /** @type {?} */
Service.prototype.query;
 /** @type {?} */
Service.prototype.data;
 /** @type {string} */
Service.prototype.path;

/** @typedef {?} */
var BalanceContextConstructor;

/**
 * @constructor
 * @struct
 */
function Balance() {}
 /** @type {?} */
Balance.BalanceContext;

/**
 * @abstract
 * @param {?} balanceContext
 * @param {?} conf
 * @param {?} prevBackend
 * @return {?}
 */
Balance.prototype.fetchServer = function(balanceContext, conf, prevBackend) {};

/**
 * @return {?}
 */
Balance.prototype.getCategory = function() {};

/**
 * @return {?}
 */
Balance.prototype.getContextClass = function() {};

/**
 * @constructor
 * @struct
 * @param {string} serviceID
 * @param {?} service
 */
Balance.BalanceContextClass = function(serviceID, service) {};
 /** @type {string} */
Balance.BalanceContextClass.prototype.currentIDC;
 /** @type {string} */
Balance.BalanceContextClass.prototype.serviceID;
 /** @type {!Array<string>} */
Balance.BalanceContextClass.prototype.reqIDCServers;
 /** @type {!Array<string>} */
Balance.BalanceContextClass.prototype.crossIDCServers;

/**
 * @constructor
 * @struct
 */
function Converter() {}
 /** @type {boolean} */
Converter.prototype.isStreamify;

/**
 * @return {string}
 */
Converter.prototype.getCategory = function() {};

/**
 * @abstract
 * @param {?} config
 * @param {?} data
 * @return {?}
 */
Converter.prototype.pack = function(config, data) {};

/**
 * @abstract
 * @param {?} config
 * @param {?} data
 * @return {?}
 */
Converter.prototype.unpack = function(config, data) {};

/**
 * @constructor
 * @struct
 */
function Protocol() {}

/**
 * @param {?} context
 * @return {?}
 */
Protocol.prototype.beforeRequest = function(context) {};

/**
 * @return {string}
 */
Protocol.prototype.getCategory = function() {};

/**
 * @param {?} context
 * @return {?}
 */
Protocol.prototype.normalizeConfig = function(context) {};

/**
 * @param {?} config
 * @param {?} callback
 * @return {?}
 */
Protocol.prototype.talk = function(config, callback) {};

/**
 * @abstract
 * @param {?} config
 * @param {?} callback
 * @return {?}
 */
Protocol.prototype._request = function(config, callback) {};

/**
 * @param {?} context
 * @return {?}
 */
Protocol.beforeRequest = function(context) {};

/**
 * @param {?} context
 * @return {?}
 */
Protocol.normalizeConfig = function(context) {};
/**
 * @record
 * @struct
 */
function LoggerFactory() {}

/* TODO: CallSignature:  */
 /** @type {?} */
LoggerFactory.prototype.options;
/**
 * @record
 * @struct
 */
function RalLogger() {}

/**
 * @param {...?} param
 * @return {void}
 */
RalLogger.prototype.notice = function(param) {};

/**
 * @param {...?} param
 * @return {void}
 */
RalLogger.prototype.warning = function(param) {};

/**
 * @param {...?} param
 * @return {void}
 */
RalLogger.prototype.fatal = function(param) {};

/**
 * @param {...?} param
 * @return {void}
 */
RalLogger.prototype.trace = function(param) {};

/**
 * @param {...?} param
 * @return {void}
 */
RalLogger.prototype.debug = function(param) {};
 /** @type {?} */
var Logger;

/**
 * @constructor
 * @struct
 */
function ConfigNormalizer() {}

/**
 * @return {string}
 */
ConfigNormalizer.prototype.getCategory = function() {};

/**
 * @abstract
 * @param {?} config
 * @return {?}
 */
ConfigNormalizer.prototype.normalizeConfig = function(config) {};

/**
 * @abstract
 * @param {?=} config
 * @return {boolean}
 */
ConfigNormalizer.prototype.needUpdate = function(config) {};

/**
 * @param {?=} options
 * @return {?}
 */
function Middleware(options) {}

/**
 * @template T
 * @param {string} name
 * @param {!Object=} options
 * @return {!Promise<?>}
 */
function RALPromise(name, options) {}

/* TODO: ImportEqualsDeclaration in RALPromise */

/* TODO: ImportEqualsDeclaration in RALPromise */

/* TODO: ImportEqualsDeclaration in RALPromise */

/* TODO: ImportEqualsDeclaration in RALPromise */

/* TODO: ImportEqualsDeclaration in RALPromise */

/* TODO: ImportEqualsDeclaration in RALPromise */
